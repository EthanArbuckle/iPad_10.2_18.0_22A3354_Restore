uint64_t itemfig_setMetadataOutputsDict(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  const void *Tag;
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4)
    return 0;
  v5 = (const void *)v4;
  v6 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 496));
  Tag = (const void *)FigXMLNodeGetTag(*(_QWORD *)(DerivedStorage + 1760));
  if (CFEqual(a2, Tag))
  {
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 496));
  }
  else
  {
    updated = FPSupport_UpdateMetadataOutputs(*(_QWORD **)(DerivedStorage + 1760), a2);
    if ((_DWORD)updated)
    {
      v10 = updated;
      goto LABEL_8;
    }
    v9 = *(_QWORD *)(DerivedStorage + 352);
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 496));
    if (v9)
      playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(v5);
  }
  v10 = 0;
LABEL_8:
  CFRelease(v5);
  return v10;
}

void itemfig_setRenderedLegibleOutputsDict(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  const void *v6;
  dispatch_queue_t *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = (const void *)v4;
    if (a2 && !CFDictionaryGetCount(a2))
      a2 = 0;
    if (!FigCFEqual())
    {
      v6 = *(const void **)(DerivedStorage + 1784);
      *(_QWORD *)(DerivedStorage + 1784) = a2;
      if (a2)
        CFRetain(a2);
      if (v6)
        CFRelease(v6);
      v7 = *(dispatch_queue_t **)(DerivedStorage + 1776);
      if (v7)
        FigRenderedLegibleOutputManagerSetRenderedLegibleOutputsDict(v7, *(CFTypeRef *)(DerivedStorage + 1784));
      if (*(_QWORD *)(DerivedStorage + 352))
        playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(v5);
    }
    CFRelease(v5);
  }
}

uint64_t itemfig_setSuppressVideoLayers(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  int v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(unsigned __int8 *)(DerivedStorage + 1824);
  cf = 0;
  v6 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
  if ((_DWORD)v6)
  {
    v9 = v6;
    v7 = 0;
  }
  else
  {
    v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v7 || (v8 = CMBaseObjectGetDerivedStorage(), *(_BYTE *)v8))
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      *(_BYTE *)(DerivedStorage + 1824) = a2;
      if (*(_QWORD *)(DerivedStorage + 352) && v5 != a2)
      {
        if (a2)
        {
          v10 = v8;
          MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 496));
          playeritemfig_releaseRenderPipelines(v7, a1, cf);
          MEMORY[0x19402EA24](*(_QWORD *)(v10 + 496));
        }
        v9 = playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(v7, cf, 0);
      }
    }
  }
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  return v9;
}

uint64_t itemfig_setSuppressLegibleRendering(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  int v4;
  const void *v5;
  const void *v6;
  BOOL v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(unsigned __int8 *)(DerivedStorage + 1825);
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    return 0;
  v6 = v5;
  *(_BYTE *)(DerivedStorage + 1825) = a2;
  if (*(_QWORD *)(DerivedStorage + 352))
    v7 = v4 == a2;
  else
    v7 = 1;
  if (v7)
  {
    v8 = 0;
  }
  else
  {
    v12 = *MEMORY[0x1E0CA2E18];
    v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v10 = v12;
    v11 = v13;
    v8 = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v5, (uint64_t)&v12, (uint64_t)&v10, 0);
  }
  CFRelease(v6);
  return v8;
}

void itemfig_applyItemAudioCurvesToAllAudioTracks(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t DerivedStorage;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  _DWORD *ValueAtIndex;
  BOOL v10;

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (const void *)v2;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    v5 = *(const __CFArray **)(a1 + 648);
    if (v5)
    {
      Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        v7 = Count;
        v8 = 0;
        do
        {
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 648), v8);
            if (ValueAtIndex[1] == 1936684398)
              break;
            if (++v8 == v7)
              goto LABEL_12;
          }
          ++v8;
          if (itemfig_applyItemAudioCurvesToTrack(a1, (uint64_t)ValueAtIndex))
            v10 = 1;
          else
            v10 = v8 == v7;
        }
        while (!v10);
      }
    }
LABEL_12:
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t itemfig_wantsDifferentSpatializationConfiguration(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  CFTypeRef v9;
  unsigned int *ValueAtIndex;
  uint64_t v11;
  uint64_t FigBaseObject;
  void (*v13)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  _BOOL4 v14;
  uint64_t v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 496));
  v4 = *(const __CFArray **)(DerivedStorage + 368);
  if (v4 && (Count = CFArrayGetCount(v4), Count >= 1))
  {
    v6 = Count;
    v7 = 0;
    v8 = *MEMORY[0x1E0C9AE00];
    v9 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    while (1)
    {
      ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 368), v7);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v11 = *((_QWORD *)ValueAtIndex + 3);
      if (v11)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
        v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v13)
          v13(FigBaseObject, CFSTR("SpatializationEnabled"), v8, &cf);
        if (cf)
        {
          v14 = cf == v9;
          if (itemfig_shouldEnableSpatializationForTrack(a1, *ValueAtIndex) != v14)
            break;
        }
      }
      if (v6 == ++v7)
        goto LABEL_12;
    }
    v15 = 1;
  }
  else
  {
LABEL_12:
    v15 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(v3 + 496));
  if (cf)
    CFRelease(cf);
  return v15;
}

uint64_t itemfig_updateVideoSlotUsage(uint64_t a1, const __CFArray *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v13;
  CFTypeID v14;
  const void *Value;
  const void *v16;
  const void *v17;
  const __CFArray *v18;
  CFIndex FirstIndexOfValue;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t FigBaseObject;
  void (*v24)(uint64_t, const __CFString *, const void *);
  uint64_t v25;
  CFRange v26;

  result = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(result + 1000);
  if (v5)
  {
    v6 = result;
    v25 = 0;
    result = itemfig_getTrackStorage(a1, v5, &v25);
    v7 = v25;
    if (!(_DWORD)result && v25 != 0)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 1120));
      if (*(_QWORD *)(v6 + 1112))
      {
        if (a2)
        {
          Count = CFArrayGetCount(a2);
          if (Count >= 1)
          {
            v10 = Count;
            for (i = 0; i != v10; ++i)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
              if (ValueAtIndex)
              {
                v13 = ValueAtIndex;
                v14 = CFGetTypeID(ValueAtIndex);
                if (v14 == CFDictionaryGetTypeID())
                {
                  Value = CFDictionaryGetValue(v13, CFSTR("SlotNumber"));
                  v16 = CFDictionaryGetValue(v13, CFSTR("UsedForScrubbingOnly"));
                  if (Value)
                  {
                    v17 = v16;
                    if (v16)
                    {
                      v18 = *(const __CFArray **)(v6 + 1112);
                      v26.length = CFArrayGetCount(v18);
                      v26.location = 0;
                      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v18, v26, Value);
                      if (FirstIndexOfValue != -1)
                      {
                        v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 1104), FirstIndexOfValue);
                        v21 = FigImageQueueTableCopyFigImageQueueForVisualContext(*(_QWORD *)(v7 + 48), v20);
                        if (v21)
                        {
                          v22 = v21;
                          FigBaseObject = FigImageQueueGetFigBaseObject(v21);
                          v24 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 56);
                          if (v24)
                            v24(FigBaseObject, CFSTR("ForScrubbingOnly"), v17);
                          CFRelease(v22);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return MEMORY[0x19402EF04](*(_QWORD *)(v6 + 1120));
    }
  }
  return result;
}

void itemfig_updateSpeedRampDataOnAllRenderPipelines()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFSet *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(v1 + 496));
  v2 = *(const __CFSet **)(DerivedStorage + 360);
  if (v2)
    CFSetApplyFunction(v2, (CFSetApplierFunction)fp_updateRenderPipelineSpeedRamp, *(void **)(DerivedStorage + 2072));
  JUMPOUT(0x19402EA24);
}

uint64_t fp_updateRenderPipelineSpeedRamp(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v5)(uint64_t, __CFString *, uint64_t);

  FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v5)
    return v5(FigBaseObject, CFSTR("SpeedRampData"), a2);
  return result;
}

uint64_t itemfig_CopyCommonMetadata(void *a1, const __CFArray *AllCommonKeys, const __CFAllocator *a3, __CFDictionary **a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v10;
  uint64_t v11;
  CFIndex v12;
  BOOL v13;
  BOOL v14;
  __CFDictionary *Mutable;
  const __CFArray *v16;
  const void *ValueAtIndex;
  CFTypeRef v18;
  uint64_t FigBaseObject;
  unsigned int (*v20)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  unsigned int (*v21)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *);
  CFTypeRef v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  BOOL v25;
  unsigned int (*v26)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *);
  CFTypeRef v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  unsigned int (*v30)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *);
  CFTypeRef v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  unsigned int (*v34)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *);
  CFTypeRef v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  BOOL v38;
  void (*v39)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *);
  __CFDictionary *v40;
  __CFDictionary *v41;
  uint64_t v42;
  __CFDictionary **v43;
  BOOL v44;
  CFIndex Count;
  BOOL v46;
  CFTypeRef cf;
  void *value;
  CFTypeRef v49;
  CFTypeRef v50;
  CFTypeRef v51;
  CFTypeRef v52;
  CFTypeRef v53[2];

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v52 = 0;
  v53[0] = 0;
  v51 = 0;
  v49 = 0;
  v50 = 0;
  cf = 0;
  value = 0;
  if (*DerivedStorage || !a4)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  v11 = itemfig_assureBasicsReadyForInspection(a1);
  if (!(_DWORD)v11)
  {
    if (!AllCommonKeys)
    {
      AllCommonKeys = (const __CFArray *)FigMetadataGetAllCommonKeys();
      if (!AllCommonKeys)
      {
        v42 = 0;
        goto LABEL_67;
      }
    }
    v43 = a4;
    Count = CFArrayGetCount(AllCommonKeys);
    if (Count >= 1)
    {
      v12 = 0;
      v44 = 0;
      v46 = 0;
      v13 = 0;
      v14 = 0;
      Mutable = 0;
      do
      {
        v16 = AllCommonKeys;
        ValueAtIndex = CFArrayGetValueAtIndex(AllCommonKeys, v12);
        v18 = v53[0];
        if (!v14 && !v53[0])
        {
          FigBaseObject = FigFormatReaderGetFigBaseObject(*((_QWORD *)v10 + 121));
          v20 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v20)
            v14 = v20(FigBaseObject, CFSTR("QuickTimeMetadataReader"), a3, v53) != 0;
          else
            v14 = 1;
          v18 = v53[0];
        }
        if (!v18
          || (v21 = *(unsigned int (**)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
          || v21(v18, CFSTR("comn"), ValueAtIndex, 0, a3, &value, &cf))
        {
          v22 = v52;
          if (!v46 && !v52)
          {
            v23 = FigFormatReaderGetFigBaseObject(*((_QWORD *)v10 + 121));
            v24 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v24)
              v25 = v24(v23, CFSTR("iTunesMetadataReader"), a3, &v52) != 0;
            else
              v25 = 1;
            v46 = v25;
            v22 = v52;
          }
          if (!v22
            || (v26 = *(unsigned int (**)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
            || v26(v22, CFSTR("comn"), ValueAtIndex, 0, a3, &value, &cf))
          {
            v27 = v51;
            if (!v13 && !v51)
            {
              v28 = FigFormatReaderGetFigBaseObject(*((_QWORD *)v10 + 121));
              v29 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v29)
                v13 = v29(v28, CFSTR("QuickTimeUserDataReader"), a3, &v51) != 0;
              else
                v13 = 1;
              v27 = v51;
            }
            if (!v27
              || (v30 = *(unsigned int (**)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
              || v30(v27, CFSTR("comn"), ValueAtIndex, 0, a3, &value, &cf))
            {
              v31 = v50;
              if (!v50)
              {
                v32 = FigFormatReaderGetFigBaseObject(*((_QWORD *)v10 + 121));
                v33 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v33)
                {
                  if (v33(v32, CFSTR("ISOUserDataReader"), a3, &v50))
                    v13 = 1;
                }
                else
                {
                  v13 = 1;
                }
                v31 = v50;
                if (!v50)
                  goto LABEL_44;
              }
              v34 = *(unsigned int (**)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (!v34 || v34(v31, CFSTR("comn"), ValueAtIndex, 0, a3, &value, &cf))
              {
LABEL_44:
                v35 = v49;
                if (!v44 && !v49)
                {
                  v36 = FigFormatReaderGetFigBaseObject(*((_QWORD *)v10 + 121));
                  v37 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v37)
                    v38 = v37(v36, CFSTR("MetadataReader"), a3, &v49) != 0;
                  else
                    v38 = 1;
                  v44 = v38;
                  v35 = v49;
                }
                if (v35)
                {
                  v39 = *(void (**)(CFTypeRef, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                  if (v39)
                    v39(v35, CFSTR("comn"), ValueAtIndex, 0, a3, &value, &cf);
                }
              }
            }
          }
        }
        if (value)
        {
          if (!Mutable
            && (Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0
            || (v40 = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
          {
            v42 = FigSignalErrorAt();
            goto LABEL_68;
          }
          v41 = v40;
          CFDictionaryAddValue(v40, CFSTR("MetadataCommonKey"), ValueAtIndex);
          CFDictionaryAddValue(v41, CFSTR("MetadataValue"), value);
          if (cf)
            CFDictionaryAddValue(v41, CFSTR("MetadataProperties"), cf);
          CFDictionaryAddValue(Mutable, ValueAtIndex, v41);
          CFRelease(v41);
          CFRelease(value);
          value = 0;
        }
        AllCommonKeys = v16;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        ++v12;
      }
      while (Count != v12);
      v42 = 0;
      if (!Mutable)
        goto LABEL_68;
      *v43 = Mutable;
      goto LABEL_67;
    }
    v11 = FigSignalErrorAt();
  }
  v42 = v11;
LABEL_67:
  Mutable = 0;
LABEL_68:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (v53[0])
    CFRelease(v53[0]);
  if (v52)
    CFRelease(v52);
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  if (v49)
    CFRelease(v49);
  if (Mutable)
    CFRelease(Mutable);
  return v42;
}

uint64_t itemfig_GetNextThumbnailTime(void *a1, CMTime *a2, unsigned int a3, uint64_t a4)
{
  _BYTE *DerivedStorage;
  __int128 v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v17;
  CMTime v19;
  __int128 v20;
  uint64_t v21;
  CFTypeRef cf;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v9 = *MEMORY[0x1E0CA2E18];
  v20 = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v21 = v10;
  cf = 0;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  *(_OWORD *)a4 = v9;
  *(_QWORD *)(a4 + 16) = v10;
  if (a3 >= 4)
    return FigSignalErrorAt();
  v11 = DerivedStorage;
  v12 = dword_1932F7780[a3];
  v13 = itemfig_assureBasicsReadyForInspection(a1);
  if (!(_DWORD)v13)
  {
    v14 = *((unsigned int *)v11 + 250);
    if ((_DWORD)v14)
    {
      v15 = *((_QWORD *)v11 + 121);
      v16 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
      if (!v16)
      {
        v17 = 4294954514;
        goto LABEL_14;
      }
      v13 = v16(v15, v14, &cf, 0);
      if (!(_DWORD)v13)
      {
        v19 = *a2;
        v17 = FigPlaybackBossSnapTimeToIFrame((uint64_t)cf, 0, &v19, v12, (uint64_t)&v20);
        if (!(_DWORD)v17)
        {
          *(_OWORD *)a4 = v20;
          *(_QWORD *)(a4 + 16) = v21;
        }
        goto LABEL_14;
      }
    }
    else
    {
      v13 = FigSignalErrorAt();
    }
  }
  v17 = v13;
LABEL_14:
  if (cf)
    CFRelease(cf);
  return v17;
}

uint64_t itemfig_SetTrackProperty(void *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  const __CFDictionary *v12;
  const void *v13;
  __CFDictionary *Value;
  __CFDictionary *v15;
  CFMutableDictionaryRef Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v9)
  {
    v10 = (const void *)v9;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1208));
    if (*(_BYTE *)(DerivedStorage + 1200))
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
      v11 = itemfig_setTrackPropertyInternal(a1, a2, a3, a4, 1);
LABEL_14:
      CFRelease(v10);
      return v11;
    }
    v12 = *(const __CFDictionary **)(DerivedStorage + 1272);
    if (v12
      || (v12 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]),
          (*(_QWORD *)(DerivedStorage + 1272) = v12) != 0))
    {
      v13 = (const void *)(int)a2;
      Value = (__CFDictionary *)CFDictionaryGetValue(v12, (const void *)(int)a2);
      if (Value)
      {
        v15 = Value;
        CFRetain(Value);
LABEL_10:
        if (a4)
          CFDictionarySetValue(v15, a3, a4);
        else
          CFDictionaryRemoveValue(v15, a3);
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
        CFRelease(v15);
        v11 = 0;
        goto LABEL_14;
      }
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v15 = Mutable;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 1272), v13, Mutable);
        goto LABEL_10;
      }
    }
    v11 = FigSignalErrorAt();
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
    goto LABEL_14;
  }
  return FigSignalErrorAt();
}

uint64_t itemfig_CopyFormatReader(void *a1, _QWORD *a2)
{
  _BYTE *DerivedStorage;
  uint64_t result;
  _BYTE *v6;
  const void *v7;
  CFTypeRef v8;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !a2)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  result = itemfig_assureBasicsReadyForInspection(a1);
  if (!(_DWORD)result)
  {
    v7 = (const void *)*((_QWORD *)v6 + 121);
    if (v7)
      v8 = CFRetain(v7);
    else
      v8 = 0;
    result = 0;
    *a2 = v8;
  }
  return result;
}

uint64_t itemfig_SeekToDateWithID(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  const void *v7;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6)
    return FigSignalErrorAt();
  v7 = (const void *)v6;
  itemfig_postSeekWasCanceledNotification(v6, a1, a3, 0);
  CFRelease(v7);
  return 4294954514;
}

uint64_t itemfig_SetCurrentTimeWithRangeAndID(const void *a1, CMTime *a2, char a3, CMTime *a4, uint64_t a5, int a6)
{
  __int128 v7;
  uint64_t v8;
  CMTime v9;
  CMTime v10;

  v10 = *a2;
  v9 = *a4;
  v7 = *(_OWORD *)a5;
  v8 = *(_QWORD *)(a5 + 16);
  return itemfig_setCurrentTimeWithRangeAndIDGuts(a1, &v10, a3, &v9, &v7, a6, 0, 0);
}

uint64_t itemfig_CopyAsset(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage || !a2)
    return FigSignalErrorAt();
  v5 = *(CFTypeRef *)(DerivedStorage + 1216);
  if (v5)
    v5 = CFRetain(v5);
  *a2 = v5;
  return 0;
}

uint64_t itemfig_SetProperties(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  return FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemfig_handleSetProperty, 0, 0, a3);
}

uint64_t itemfig_ExtractAndRetainNextSampleBuffer(uint64_t a1, int a2, int a3, CMBufferRef *a4)
{
  uint64_t v9;
  const void *v10;
  uint64_t TrackStorage;
  uint64_t DerivedStorage;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  const void *ValueAtIndex;
  uint64_t v19;
  uint64_t v20;

  v20 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v9)
    return FigSignalErrorAt();
  v10 = (const void *)v9;
  TrackStorage = itemfig_getTrackStorage(a1, a2, &v20);
  if ((_DWORD)TrackStorage)
  {
    v19 = TrackStorage;
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    v13 = v20;
    v14 = *(const __CFArray **)(v20 + 168);
    if (v14 && (Count = CFArrayGetCount(v14), Count >= 1))
    {
      v16 = Count;
      v17 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v13 + 168), v17);
        if (*((_DWORD *)ValueAtIndex + 7) == a3)
          break;
        if (v16 == ++v17)
          goto LABEL_11;
      }
      v19 = 0;
      *a4 = CMBufferQueueDequeueIfDataReadyAndRetain(*((CMBufferQueueRef *)ValueAtIndex + 4));
    }
    else
    {
LABEL_11:
      v19 = FigSignalErrorAt();
    }
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  }
  CFRelease(v10);
  return v19;
}

uint64_t itemfig_SetCurrentTimeWithOptions(const void *a1, CMTime *a2)
{
  const void *Value;
  CMTime v6;
  CMTime v7;
  CMTime v8;
  uint64_t v9;
  CMTime v10;
  CMTime v11;
  int v12;

  v12 = 0;
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v10 = v11;
  v9 = 0;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  Value = (const void *)FigCFDictionaryGetValue();
  FigCFDictionaryGetInt32IfPresent();
  v8 = *a2;
  v7 = v11;
  v6 = v11;
  return itemfig_setCurrentTimeWithRangeAndIDGuts(a1, &v8, 0, &v7, (__int128 *)&v6.value, 0, Value, 0);
}

uint64_t itemfig_createTrackFormatDetailsDictionary(_DWORD *a1, uint64_t a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t (*v8)(uint64_t, char *, uint64_t *);
  uint64_t v9;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const __CFAllocator *v12;
  uint64_t Count;
  const __CFArray *Mutable;
  __CFArray *v15;
  CFIndex i;
  const opaqueCMFormatDescription *ValueAtIndex;
  CFNumberRef v18;
  _BOOL4 v19;
  CFTypeRef *v20;
  uint64_t v21;
  uint64_t j;
  const void *v23;
  void *value;
  CFTypeRef cf;
  FourCharCode valuePtr;
  CFArrayRef theArray;
  uint64_t v29;
  void *keys[2];
  __int128 v31;
  __int128 v32;
  void *values[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  CFRange v37;

  v36 = *MEMORY[0x1E0C80C00];
  theArray = 0;
  v29 = 0;
  valuePtr = 0;
  cf = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  *(_OWORD *)values = 0u;
  *(_OWORD *)keys = 0u;
  v31 = 0u;
  v8 = *(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
    goto LABEL_24;
  v9 = v8(a2, (char *)&v29 + 4, &v29);
  if ((_DWORD)v9)
    goto LABEL_39;
  v9 = MTCopyStringsForMediaTypeAndSubType(v29, 0, (CFStringRef *)&cf, 0);
  if ((_DWORD)v9)
    goto LABEL_39;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v11)
  {
LABEL_24:
    Mutable = 0;
    v15 = 0;
    v21 = 4294954514;
    goto LABEL_25;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = v11(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
  if ((_DWORD)v9)
  {
LABEL_39:
    v21 = v9;
    Mutable = 0;
    v15 = 0;
    goto LABEL_25;
  }
  Count = CFArrayGetCount(theArray);
  Mutable = CFArrayCreateMutable(a3, Count, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v15 = CFArrayCreateMutable(a3, Count, MEMORY[0x1E0C9B378]);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, i);
        valuePtr = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
        v18 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
        v37.length = CFArrayGetCount(Mutable);
        v37.location = 0;
        if (!CFArrayContainsValue(Mutable, v37, v18))
        {
          value = 0;
          MTCopyStringsForMediaTypeAndSubType(v29, valuePtr, 0, (CFStringRef *)&value);
          if (value)
          {
            CFArrayAppendValue(Mutable, v18);
            CFArrayAppendValue(v15, value);
            CFRelease(value);
          }
        }
        if (v18)
          CFRelease(v18);
      }
    }
    v19 = HIDWORD(v29) != a1[250]
       && HIDWORD(v29) != a1[249]
       && HIDWORD(v29) != a1[254]
       && HIDWORD(v29) != a1[252]
       && HIDWORD(v29) != a1[260];
    keys[0] = CFSTR("TrackID");
    values[0] = CFNumberCreate(v12, kCFNumberSInt32Type, (char *)&v29 + 4);
    keys[1] = CFSTR("MediaTypeString");
    values[1] = (void *)CFRetain(cf);
    *(_QWORD *)&v31 = CFSTR("MediaType");
    *(_QWORD *)&v34 = CFNumberCreate(v12, kCFNumberSInt32Type, &v29);
    *((_QWORD *)&v31 + 1) = CFSTR("MediaSubTypeString");
    *((_QWORD *)&v34 + 1) = CFRetain(v15);
    *(_QWORD *)&v32 = CFSTR("MediaSubType");
    *(_QWORD *)&v35 = CFRetain(Mutable);
    *((_QWORD *)&v32 + 1) = CFSTR("ChosenForPlayback");
    v20 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    if (!v19)
      v20 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    *((_QWORD *)&v35 + 1) = CFRetain(*v20);
    v21 = 0;
    *a4 = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  else
  {
    v15 = 0;
    v21 = 4294967188;
  }
LABEL_25:
  for (j = 0; j != 6; ++j)
  {
    v23 = values[j];
    if (v23)
      CFRelease(v23);
  }
  if (theArray)
    CFRelease(theArray);
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (Mutable)
    CFRelease(Mutable);
  return v21;
}

uint64_t itemfig_setCurrentTimeWithRangeAndIDGuts(const void *a1, CMTime *a2, char a3, CMTime *a4, __int128 *a5, int a6, const void *a7, int a8)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void *v22;
  __int128 v23;
  __int128 v24;
  BOOL v25;
  NSObject *v26;
  float v27;
  int v28;
  const void *v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, _QWORD);
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  unsigned int v36;
  unsigned int v37;
  const char *v38;
  __int128 v39;
  OpaqueCMTimebase *v40;
  _BOOL4 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  const void *v47;
  Float64 Seconds;
  __int128 v49;
  OpaqueCMTimebase *v50;
  uint64_t v51;
  CFMutableDictionaryRef Mutable;
  NSObject *v53;
  unsigned int value;
  unsigned int v55;
  const void *v56;
  const char *v57;
  NSObject *v58;
  unsigned int v59;
  unsigned int v60;
  const void *v61;
  const char *v62;
  unsigned int v63;
  int v64;
  CMTime start;
  CMTimeRange v71;
  CMTime cf;
  CMTime time2;
  os_log_type_t v74;
  os_log_type_t type[4];
  CMTimeRange v76;
  CMTime duration;
  const char *v78;
  __int16 v79;
  Float64 v80;
  CMTime time;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = DerivedStorage;
  if (!a6)
  {
    a6 = *(_DWORD *)(DerivedStorage + 2044);
    *(_DWORD *)(DerivedStorage + 2044) = FPSupport_IncrementSeekID(a6);
  }
  if (dword_1EE2A2AC8)
  {
    LODWORD(cf.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)v12)
    return FigSignalErrorAt();
  if ((a2->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  v14 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v14)
    return FigSignalErrorAt();
  v15 = (const void *)v14;
  v16 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)v16)
  {
    CFRelease(v15);
    return FigSignalErrorAt();
  }
  v19 = v16;
  v20 = a3 & 0xF;
  if ((v20 - 2) > 3)
    v21 = 1;
  else
    v21 = dword_1932F7734[v20 - 2];
  MEMORY[0x19402EA0C](*(_QWORD *)(v16 + 496));
  v22 = *(const void **)(v12 + 528);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(v12 + 528) = 0;
  }
  *(_DWORD *)(v12 + 536) = 0;
  *(_DWORD *)(v12 + 96) = v20;
  v23 = *(_OWORD *)&a4->value;
  *(_QWORD *)(v12 + 64) = a4->epoch;
  *(_OWORD *)(v12 + 48) = v23;
  v24 = *a5;
  *(_QWORD *)(v12 + 88) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(v12 + 72) = v24;
  if (*(_QWORD *)(v12 + 352))
  {
    v63 = v21;
    if (*(_QWORD *)(v19 + 512))
      v25 = !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 480)
         && CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 504), 0) == *(const void **)(v19 + 512);
    else
      v25 = CFArrayGetCount(*(CFArrayRef *)(v19 + 504)) < 1;
    if (*(_BYTE *)(v12 + 1697))
    {
      v27 = 0.0;
      if (*(_DWORD *)(v19 + 52) == 4)
        v27 = *(float *)(v19 + 48);
      itemfig_updateAccessLogEntry(v27);
      itemfig_commitAccessLogEntry(v15, (uint64_t)a1);
    }
    v28 = *(_DWORD *)(v12 + 524);
    if (v28 == a6 || v28 == 0)
      v28 = 0;
    v64 = v28;
    if (a6)
    {
      *(_DWORD *)(v12 + 524) = a6;
      *(_DWORD *)(v12 + 536) = a8;
      v30 = *(const void **)(v12 + 528);
      *(_QWORD *)(v12 + 528) = a7;
      if (a7)
        CFRetain(a7);
      if (v30)
        CFRelease(v30);
      *(_BYTE *)(v12 + 544) = 1;
    }
    playerfig_cleanupOverlappedOutroComponents((uint64_t)v15, 0);
    if ((a3 & 0x20) == 0)
    {
      itemfig_clearCoordinatedPlaybackSynchronizationTimebase();
      playerfig_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem((uint64_t)v15, a1);
      time = *a2;
      playerfig_triggerStartupTasksForSeekIfNecessary((uint64_t)v15, (uint64_t)a1, a6, &time);
    }
    if (v25)
    {
      if (*(_QWORD *)(v12 + 128))
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          if (*(_DWORD *)(v19 + 52) == 4
            || (FigPlaybackBossGetTime(*(_QWORD *)(v12 + 352), &time2), time = *a2, CMTimeCompare(&time, &time2)))
          {
            FigPlaybackBossInterruptQueueing(*(_QWORD *)(v12 + 352));
            v31 = *(_QWORD *)(v12 + 128);
            v32 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
            if (v32)
              v32(v31, 0, 0);
          }
        }
      }
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(cf.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v33, type[0]);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v45 = a1;
      itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)a1, 0);
      v46 = *(_QWORD *)(v12 + 352);
      v47 = *(const void **)(v12 + 512);
      time = *a2;
      duration = *a4;
      cf = *(CMTime *)a5;
      FigPlaybackBossSetTimeWithRange(v46, &time, v63, &duration, &cf, v47, a6);
      FigPlaybackBossGetTime(*(_QWORD *)(v12 + 352), &start);
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      CMTimeRangeMake(&v71, &start, &time);
      itemfig_HintStreamForTimeRange((uint64_t)a1, (__int128 *)&v71.start.value);
      goto LABEL_78;
    }
    cf.value = 0;
    v34 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], &cf.value);
    if (!(_DWORD)v34)
    {
      if (dword_1EE2A2AC8 >= 2)
      {
        *(_DWORD *)type = 0;
        v74 = OS_LOG_TYPE_DEFAULT;
        v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v36 = *(_DWORD *)type;
        if (os_log_type_enabled(v35, v74))
          v37 = v36;
        else
          v37 = v36 & 0xFFFFFFFE;
        if (v37)
        {
          if (a1)
            v38 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          else
            v38 = "";
          time = *a2;
          Seconds = CMTimeGetSeconds(&time);
          LODWORD(duration.value) = 136315906;
          *(CMTimeValue *)((char *)&duration.value + 4) = (CMTimeValue)"itemfig_setCurrentTimeWithRangeAndIDGuts";
          LOWORD(duration.flags) = 2048;
          *(_QWORD *)((char *)&duration.flags + 2) = a1;
          HIWORD(duration.epoch) = 2082;
          v78 = v38;
          v79 = 2048;
          v80 = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playerfig_pauseRenderPipelines();
      playeritemfig_releaseRenderPipelines(v15, 0, (CFTypeRef)cf.value);
      playerfig_disturbPlayQueue();
      v49 = *(_OWORD *)&a2->value;
      *(_QWORD *)(v12 + 40) = a2->epoch;
      *(_OWORD *)(v12 + 24) = v49;
      v50 = *(OpaqueCMTimebase **)(v12 + 328);
      time = *a2;
      CMTimebaseSetTime(v50, &time);
      playerfig_prepareWorkingItem(v15, 0, (CFTypeRef)cf.value);
      if (*(_QWORD *)(v19 + 512) && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 352))
      {
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(_QWORD *)(v19 + 512), 0);
        v51 = *(_QWORD *)(v19 + 512);
        time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        duration = time;
        itemfig_matchBossRateToPlayerRateAndPlaybackState(v51, &time, &duration);
      }
      FigDeferredTransactionCommit(cf.value);
      if (cf.value)
        CFRelease((CFTypeRef)cf.value);
      v45 = a1;
LABEL_78:
      playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems((uint64_t)v15, v45);
    }
    v17 = v34;
    MEMORY[0x19402EA24](*(_QWORD *)(v19 + 496));
    v41 = 0;
  }
  else
  {
    if (dword_1EE2A2AC8)
    {
      LODWORD(cf.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v39 = *(_OWORD *)&a2->value;
    *(_QWORD *)(v12 + 40) = a2->epoch;
    *(_OWORD *)(v12 + 24) = v39;
    v40 = *(OpaqueCMTimebase **)(v12 + 328);
    time = *a2;
    CMTimebaseSetTime(v40, &time);
    v41 = a6 != 0;
    time = *a2;
    duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    CMTimeRangeMake(&v76, &time, &duration);
    itemfig_HintStreamForTimeRange((uint64_t)a1, (__int128 *)&v76.start.value);
    if (CFArrayGetCount(*(CFArrayRef *)(v19 + 504)) >= 1
      && CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 504), 0) == a1)
    {
      if (*(_BYTE *)(v19 + 544))
      {
        *(_BYTE *)(v19 + 544) = 0;
        playerfig_postDeferredPrerollWasCancelledNotification((uint64_t)v15, *(_DWORD *)(v19 + 552));
      }
      v64 = 0;
      v17 = 0;
      v42 = MEMORY[0x1E0CA2E18];
      v43 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v12 + 548) = *MEMORY[0x1E0CA2E18];
      v44 = *(_QWORD *)(v42 + 16);
      *(_QWORD *)(v12 + 564) = v44;
      *(_OWORD *)(v12 + 572) = v43;
      *(_QWORD *)(v12 + 588) = v44;
    }
    else
    {
      v64 = 0;
      v17 = 0;
    }
    itemfig_reportingAgentReportPlayStartMovieTime();
    MEMORY[0x19402EA24](*(_QWORD *)(v19 + 496));
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (v64)
    itemfig_postSeekWasCanceledNotification((uint64_t)v15, (uint64_t)a1, v64, 0);
  if (v41)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetValue();
    FigCFDictionarySetInt32();
    if (Mutable)
    {
      if (dword_1EE2A2AC8)
      {
        LODWORD(cf.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = cf.value;
        if (os_log_type_enabled(v53, type[0]))
          v55 = value;
        else
          v55 = value & 0xFFFFFFFE;
        if (v55)
        {
          v56 = a1;
          if (a1)
          {
            v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            v56 = a1;
          }
          else
          {
            v57 = "";
          }
          LODWORD(duration.value) = 136315906;
          *(CMTimeValue *)((char *)&duration.value + 4) = (CMTimeValue)"itemfig_setCurrentTimeWithRangeAndIDGuts";
          LOWORD(duration.flags) = 2048;
          *(_QWORD *)((char *)&duration.flags + 2) = v56;
          HIWORD(duration.epoch) = 2082;
          v78 = v57;
          v79 = 1024;
          LODWORD(v80) = a6;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(Mutable);
    }
    else
    {
      LODWORD(cf.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v59 = cf.value;
      if (os_log_type_enabled(v58, type[0]))
        v60 = v59;
      else
        v60 = v59 & 0xFFFFFFFE;
      if (v60)
      {
        v61 = a1;
        if (a1)
        {
          v62 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          v61 = a1;
        }
        else
        {
          v62 = "";
        }
        LODWORD(duration.value) = 136315650;
        *(CMTimeValue *)((char *)&duration.value + 4) = (CMTimeValue)"itemfig_setCurrentTimeWithRangeAndIDGuts";
        LOWORD(duration.flags) = 2048;
        *(_QWORD *)((char *)&duration.flags + 2) = v61;
        HIWORD(duration.epoch) = 2082;
        v78 = v62;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  CFRelease(v15);
  return v17;
}

uint64_t playerfig_triggerStartupTasksForSeekIfNecessary(uint64_t a1, uint64_t a2, int a3, CMTime *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  const void *v13;
  CMTime v14;
  CMTime v15;
  int v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CMBaseObjectGetDerivedStorage();
  v10 = *(_DWORD *)(DerivedStorage + 52);
  v16 = v10;
  result = *(_QWORD *)(DerivedStorage + 504);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      if (result == a2)
      {
        v15 = *a4;
        result = playerfig_performStartupTasksForEvents(a1, 2, 0, a3, (__int128 *)&v15.value);
        if (!(_DWORD)result && (v10 == 4 || *(_BYTE *)(DerivedStorage + 56)))
        {
          result = playerfig_isWaitingForAnyStartupTask(a1, &v16);
          if ((_DWORD)result)
          {
            result = playerfig_enterPlaybackState(a1, v16);
            if (!(_DWORD)result && v10 == 4 && !*(_BYTE *)(v9 + 480))
            {
              itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(a2, 0);
              v12 = *(_QWORD *)(v9 + 352);
              v13 = *(const void **)(v9 + 512);
              v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
              v14 = v15;
              return FigPlaybackBossSetRateAndAnchorTime(v12, &v15, &v14, v13, 0.0);
            }
          }
        }
      }
    }
  }
  return result;
}

void itemfig_assetDownloadComplete(uint64_t a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  const void *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  BOOL v7;
  uint64_t v8;
  const __CFAllocator *v9;
  CFAbsoluteTime Current;
  CFDateRef v11;
  CFDateRef v12;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v5 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8 >= 3)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v4)
    v7 = *DerivedStorage == 0;
  else
    v7 = 0;
  if (v7)
  {
    if (!*(_BYTE *)v5)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(v5 + 496));
      DerivedStorage[1330] = 1;
      v8 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 2088));
      if (!*(_BYTE *)(v8 + 2121) && *(_QWORD *)(v8 + 2096) && *(_QWORD *)(v8 + 2080))
      {
        v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Current = CFAbsoluteTimeGetCurrent();
        v11 = CFDateCreate(v9, Current);
        if (v11)
        {
          v12 = v11;
          if (!FigAssetDownloadStorageManagementSetDownloadCompletionDateForAssetAtURL(*(const __CFURL **)(v8 + 2096), *(const void **)(v8 + 2080), (uint64_t)v11))FigAssetDownloadStorageManagementExcludeURLFromBackup(*(const __CFURL **)(v8 + 2096));
          CFRelease(v12);
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 2088));
      if (DerivedStorage[1])
        playerfig_configureDownloadInPlayQueue();
      itemfig_configureDownloadForItem(a2, 0);
      MEMORY[0x19402EA24](*(_QWORD *)(v5 + 496));
    }
    goto LABEL_19;
  }
  if (v4)
LABEL_19:
    CFRelease(v4);
}

void itemfig_DeferredTimebaseEffectiveRateChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  uint64_t i;
  uint64_t v12;
  const __CFArray *v13;
  CFIndex j;
  const __CFArray *v15;
  const void *ValueAtIndex;
  float Rate;
  float v18;
  int v19;
  uint64_t v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v5 = CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    v6 = v5;
    MEMORY[0x19402EA0C](*(_QWORD *)(v5 + 496));
    v7 = *(_QWORD *)(DerivedStorage + 824);
    if (v7
      || (v19 = *(_DWORD *)(DerivedStorage + 1000)) != 0
      && (v20 = 0, !itemfig_getTrackStorage((uint64_t)a2, v19, &v20))
      && v20
      && (v7 = *(_QWORD *)(v20 + 48)) != 0)
    {
      FigImageQueueTableRespondToTimebaseRateChange(v7, *(OpaqueCMTimebase **)(DerivedStorage + 328));
    }
    v8 = *(const __CFArray **)(DerivedStorage + 1048);
    if (v8)
    {
      Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        v10 = Count;
        for (i = 0; i != v10; ++i)
        {
          v20 = 0;
          FigCFArrayGetInt32AtIndex();
          itemfig_getTrackStorage((uint64_t)a2, 0, &v20);
          v12 = v20;
          if (v20)
          {
            v13 = *(const __CFArray **)(v20 + 224);
            if (v13)
            {
              if (CFArrayGetCount(v13) >= 1)
              {
                for (j = 0; ; ++j)
                {
                  v15 = *(const __CFArray **)(v12 + 224);
                  if (v15)
                    v15 = (const __CFArray *)CFArrayGetCount(v15);
                  if (j >= (uint64_t)v15)
                    break;
                  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 224), j);
                  FigImageQueueTableRespondToTimebaseRateChange((uint64_t)ValueAtIndex, *(OpaqueCMTimebase **)(DerivedStorage + 328));
                }
              }
            }
          }
        }
      }
    }
    if (!*(_BYTE *)(DerivedStorage + 2152))
    {
      Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
      if (Rate != 0.0)
      {
        itemfig_UpdateLastPlayedOutOrLastPlayedDateIfNecessary((uint64_t)a2);
        *(_BYTE *)(DerivedStorage + 2152) = 1;
      }
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v6 + 504)) >= 1 && CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 504), 0) == a2)
    {
      v18 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
      itemfig_reportingAgentReportRateChanged((uint64_t)a2, v18);
    }
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 496));
  }
  if (a2)
    CFRelease(a2);
  if (v4)
    CFRelease(v4);
}

void itemfig_assetPropertyLoaded(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *v8;
  uint64_t v9;
  const void *Value;
  const void *v11;
  int AssetBasicsIfReady;
  int v13;
  int v14;
  __CFArray *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v9 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(a5, CFSTR("assetPayload_Property"));
  if (v8)
  {
    if (*(_BYTE *)v9)
      goto LABEL_26;
    v11 = Value;
    if (!CFEqual(Value, CFSTR("Lyrics"))
      && !CFEqual(v11, CFSTR("Duration"))
      && !CFEqual(v11, CFSTR("assetProperty_InitialSamples"))
      && !CFEqual(v11, CFSTR("iTunesGaplessInfo"))
      && !CFEqual(v11, CFSTR("assetProperty_CPEProtector"))
      && !CFEqual(v11, CFSTR("assetProperty_ContentByteStream"))
      && !CFEqual(v11, CFSTR("assetProperty_FormatReader"))
      && !CFEqual(v11, CFSTR("assetProperty_Tracks"))
      && !CFEqual(v11, CFSTR("MediaSelectionArray")))
    {
      goto LABEL_26;
    }
    if (!*(_BYTE *)(DerivedStorage + 1240)
      && *(_BYTE *)(DerivedStorage + 1242)
      && (AssetBasicsIfReady = itemfig_retrieveAssetBasicsIfReady(a2)) != 0)
    {
      itemfig_assetPropertyFailedToLoad(AssetBasicsIfReady, a2, v13, v14, a5);
    }
    else
    {
      if (CFEqual(v11, CFSTR("Duration")))
      {
        MEMORY[0x19402EA0C](*(_QWORD *)(v9 + 496));
        playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems((uint64_t)v8, a2);
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1208));
      if (!*(_BYTE *)(DerivedStorage + 1240))
      {
        Mutable = *(__CFArray **)(DerivedStorage + 1248);
        if (Mutable
          || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
              (*(_QWORD *)(DerivedStorage + 1248) = Mutable) != 0))
        {
          CFArrayAppendValue(Mutable, v11);
        }
        else
        {
          FigSignalErrorAt();
        }
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
        goto LABEL_26;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
      if (!itemfig_postReadyForInspectionPayloadBecauseAssetPropertyLoadedAndBasicsReady((uint64_t)a2, v11))
      {
LABEL_26:
        CFRelease(v8);
        return;
      }
    }
    FigSignalErrorAt();
    goto LABEL_26;
  }
}

void itemfig_assetPropertyRevised(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  const void *v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  const __CFAllocator *v10;
  int v11;
  CMTime *v12;
  CFTypeRef v13;
  const __CFArray *v14;
  CFIndex v15;
  const __CFArray *v16;
  _BOOL4 v17;
  const __CFArray *v18;
  const __CFArray *v19;
  uint64_t v20;
  CFDictionaryRef v21;
  uint64_t v22;
  int v23;
  CFDictionaryRef v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  __CFDictionary *NotificationPayloadForProperties;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime time2;
  CMTime time1;
  CFTypeRef v37;

  CMBaseObjectGetDerivedStorage();
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  CFDictionaryGetValue(a5, CFSTR("assetPayload_Property"));
  if (v7)
  {
    if (!FigCFEqual())
    {
LABEL_36:
      CFRelease(v7);
      return;
    }
    v34 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    itemfig_GetDuration(a2, (uint64_t)&v34);
    v32 = v34;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = CMBaseObjectGetDerivedStorage();
    v37 = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 224));
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&v37);
    v12 = (CMTime *)MEMORY[0x1E0CA2E68];
    if (!v11)
    {
      v13 = v37;
      v14 = *(const __CFArray **)(v9 + 208);
      v15 = v14 ? CFArrayGetCount(v14) : 0;
      v16 = *(const __CFArray **)(DerivedStorage + 864);
      v17 = v16 && CFArrayGetCount(v16) > 0;
      if (v15 > 0 || v17)
      {
        time1 = v32;
        time2 = *v12;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          v18 = *(const __CFArray **)(DerivedStorage + 864);
          time1 = v32;
          FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(v13, (__int128 *)&time1.value, v18, (uint64_t)"playerfig_updateDurationOnVideoLayerArray");
          v19 = *(const __CFArray **)(v9 + 208);
          time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
          FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(v13, (__int128 *)&time1.value, v19, (uint64_t)"playerfig_updateDurationOnVideoLayerArray");
        }
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 224));
    FigDeferredTransactionCommit((uint64_t)v37);
    if (v37)
      CFRelease(v37);
    v33 = v34;
    v20 = CMBaseObjectGetDerivedStorage();
    v37 = 0;
    time1 = v33;
    v21 = CMTimeCopyAsDictionary(&time1, v10);
    time1 = v33;
    time2 = *v12;
    if (CMTimeCompare(&time1, &time2) < 1)
    {
LABEL_26:
      if (v21)
        CFRelease(v21);
      if ((v34.flags & 1) != 0 && (time1 = v34, (time1.value = (CMTimeValue)CMTimeCopyAsDictionary(&time1, v10)) != 0))
      {
        v24 = CFDictionaryCreate(v10, (const void **)kFigPlaybackItemParameter_CurrentDuration, (const void **)&time1, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFRelease((CFTypeRef)time1.value);
      }
      else
      {
        v24 = 0;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v24)
        CFRelease(v24);
      NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v7, a2, v25, v26, v27, v28, v29, v30, CFSTR("SeekableTimeIntervals"), 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (NotificationPayloadForProperties)
        CFRelease(NotificationPayloadForProperties);
      goto LABEL_36;
    }
    if (*(_QWORD *)(v20 + 656))
    {
      v22 = *(_QWORD *)(v20 + 824);
    }
    else
    {
      v23 = *(_DWORD *)(v20 + 1000);
      if (!v23 || (time1.value = 0, itemfig_getTrackStorage(a2, v23, &time1), !time1.value))
      {
LABEL_23:
        if (v37)
        {
          FigImageQueueArraySetProperty();
          if (v37)
            CFRelease(v37);
        }
        goto LABEL_26;
      }
      v22 = *(_QWORD *)(time1.value + 48);
    }
    FigImageQueueTableCopyFigImageQueueArray(v22, (uint64_t *)&v37);
    goto LABEL_23;
  }
}

void itemfig_assetPropertyFailedToLoad(int a1, void *a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  __CFError *v13;
  __CFDictionary *FailedNotificationPayload;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const __CFArray *v18;
  const void *ValueAtIndex;
  void *v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int valuePtr[32];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  Value = CFDictionaryGetValue(theDict, CFSTR("assetPayload_Property"));
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v9)
  {
    v10 = (const void *)v9;
    if (!CFEqual(Value, CFSTR("Lyrics"))
      && !CFEqual(Value, CFSTR("Duration"))
      && !CFEqual(Value, CFSTR("assetProperty_InitialSamples"))
      && !CFEqual(Value, CFSTR("iTunesGaplessInfo"))
      && !CFEqual(Value, CFSTR("assetProperty_CPEProtector"))
      && !CFEqual(Value, CFSTR("assetProperty_ContentByteStream"))
      && !CFEqual(Value, CFSTR("assetProperty_FormatReader"))
      && !CFEqual(Value, CFSTR("assetProperty_Tracks")))
    {
      goto LABEL_32;
    }
    v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("assetPayload_Result"));
    if (v11)
    {
      v12 = v11;
      v13 = (__CFError *)CFDictionaryGetValue(theDict, CFSTR("assetPayload_CFError"));
      valuePtr[0] = 0;
      CFNumberGetValue(v12, kCFNumberSInt32Type, valuePtr);
      itemfig_reportingAgentReportError((uint64_t)a2, v13, CFSTR("CoreMediaErrorDomain"), CFSTR("Asset property failed to load"), valuePtr[0]);
      FailedNotificationPayload = itemfig_createFailedNotificationPayload(v13, v12);
    }
    else
    {
      FailedNotificationPayload = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (FailedNotificationPayload)
      CFRelease(FailedNotificationPayload);
    if (!*(_BYTE *)(DerivedStorage + 1))
      goto LABEL_32;
    v15 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v15 + 776))
    {
      if (!dword_1EE2A2AC8)
      {
LABEL_32:
        CFRelease(v10);
        return;
      }
LABEL_30:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_32;
    }
    v16 = v15;
    if (*(_BYTE *)(v15 + 780))
    {
      if (!dword_1EE2A2AC8)
      {
LABEL_31:
        CFRetain(a2);
        dispatch_async_f(*(dispatch_queue_t *)(v16 + 104), a2, (dispatch_function_t)itemfig_removeFromPlayQueueIfAdvanceAtEnd_f);
        goto LABEL_32;
      }
LABEL_21:
      v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_31;
    }
    MEMORY[0x19402EA0C](*(_QWORD *)(v15 + 496));
    v18 = *(const __CFArray **)(v16 + 504);
    if (v18 && CFArrayGetCount(v18) > 0)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v16 + 504), 0);
      v20 = *(void **)(v16 + 512);
      MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
      if (ValueAtIndex == a2)
      {
        if (!dword_1EE2A2AC8)
          goto LABEL_31;
        goto LABEL_21;
      }
    }
    else
    {
      v20 = *(void **)(v16 + 512);
      MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
    }
    if (v20 != a2)
      goto LABEL_32;
    *(_BYTE *)(DerivedStorage + 1289) = 1;
    if (!dword_1EE2A2AC8)
      goto LABEL_32;
    goto LABEL_30;
  }
}

void itemfig_assetPropertyBatchLoaded(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *v9;
  const __CFNumber *Value;
  uint64_t v11;
  char v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFDictionary *v14;
  __CFDictionary *MutableCopy;
  _QWORD *v16;
  _QWORD *v17;
  CFTypeRef v18;
  const __CFDictionary *v19;
  NSObject *v20;
  int v21;
  int valuePtr;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  v9 = (const void *)v8;
  valuePtr = 0;
  if (a5 && v8)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("assetPayload_BatchID"));
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr)
      {
        if (valuePtr == *(_DWORD *)(DerivedStorage + 1256))
        {
          *(_BYTE *)(DerivedStorage + 1264) = 1;
        }
        else if (valuePtr == *(_DWORD *)(DerivedStorage + 1260))
        {
          *(_BYTE *)(DerivedStorage + 1265) = 1;
        }
      }
      if (*(_BYTE *)(DerivedStorage + 1264) && *(_BYTE *)(DerivedStorage + 1265))
      {
        v11 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19402EA0C](*(_QWORD *)(v11 + 496));
        if (*(_BYTE *)(DerivedStorage + 1288)
          || CFArrayGetCount(*(CFArrayRef *)(v11 + 504)) < 1
          || CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 504), 0) != a2)
        {
          v12 = 1;
        }
        else
        {
          if (dword_1EE2A2AC8)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v12 = 0;
          *(_BYTE *)(DerivedStorage + 1288) = 1;
        }
        if (*(const void **)(v11 + 512) == a2 && !*(_QWORD *)(DerivedStorage + 352))
        {
          if ((v12 & 1) != 0)
          {
            v14 = 0;
          }
          else
          {
            MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            v14 = MutableCopy;
            if (MutableCopy)
              CFDictionarySetValue(MutableCopy, CFSTR("ItemBecameCurrentAndReadyForFirstTime"), (const void *)*MEMORY[0x1E0C9AE50]);
          }
          if (!*(_BYTE *)v11)
          {
            v16 = malloc_type_calloc(1uLL, 0x10uLL, 0x60040FAFB2B2FuLL);
            if (v16)
            {
              v17 = v16;
              if (a2)
                v18 = CFRetain(a2);
              else
                v18 = 0;
              *v17 = v18;
              if (v14)
                v19 = v14;
              else
                v19 = a5;
              v17[1] = CFRetain(v19);
              if (dword_1EE2A2AC8)
              {
                v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              dispatch_async_f(*(dispatch_queue_t *)(v11 + 104), v17, (dispatch_function_t)itemfig_assetPropertyBatchLoaded_prepareWorkingItem_f);
            }
          }
          if (v14)
            CFRelease(v14);
        }
        else if ((v12 & 1) == 0 && *(_DWORD *)(v11 + 60) == 2)
        {
          itemfig_becameBothCurrentAndReadyForInspection((uint64_t)a2, 0);
        }
        MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 616));
        v21 = *(unsigned __int8 *)(DerivedStorage + 624);
        *(_BYTE *)(DerivedStorage + 624) = 0;
        MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 616));
        if (v21)
          itemfig_monitorPlayability(a2);
        MEMORY[0x19402EA24](*(_QWORD *)(v11 + 496));
      }
    }
    goto LABEL_43;
  }
  if (v8)
LABEL_43:
    CFRelease(v9);
}

void itemfig_removeFromPlayQueueIfAdvanceAtEnd_f(const __CFString *a1)
{
  itemfig_removeFromPlayQueueIfAdvanceAtEnd(a1);
  CFRelease(a1);
}

void itemfig_assetPropertyBatchLoaded_prepareWorkingItem_f(uint64_t a1)
{
  CFTypeRef v2;
  const __CFDictionary *v3;
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v10;

  v2 = *(CFTypeRef *)a1;
  v3 = *(const __CFDictionary **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v6 = CMBaseObjectGetDerivedStorage();
  if (v5)
    v7 = *(_BYTE *)DerivedStorage == 0;
  else
    v7 = 0;
  if (v7)
  {
    v8 = v6;
    if (!*(_BYTE *)v6)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 496));
      if (*(CFTypeRef *)(v8 + 512) == v2 && !*(_QWORD *)(DerivedStorage + 352))
      {
        if (dword_1EE2A2AC8 >= 2)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (*(_BYTE *)(DerivedStorage + 1288)
          && CFDictionaryGetValue(v3, CFSTR("ItemBecameCurrentAndReadyForFirstTime"))
          && *(_DWORD *)(v8 + 60) == 2)
        {
          itemfig_becameBothCurrentAndReadyForInspection((uint64_t)v2, 0);
        }
        playerfig_prepareWorkingItem(v5, *(unsigned __int8 *)(DerivedStorage + 993), 0);
        *(_BYTE *)(DerivedStorage + 993) = 0;
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v8 + 496));
      playerfig_updatePlaybackStateAndBossRate(v5, 8, 0);
    }
    goto LABEL_17;
  }
  if (v5)
LABEL_17:
    CFRelease(v5);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
  free((void *)a1);
}

uint64_t playerfig_DuckVolume(const void *a1, int a2, float a3, float a4)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v12;
  float v13;
  float v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (a3 < 0.0)
    a3 = 0.0;
  if (a2)
  {
    if (a3 >= 1.0 || *(_BYTE *)(DerivedStorage + 772) != 0)
      return 0;
    *(float *)(DerivedStorage + 768) = a3;
    *(_BYTE *)(DerivedStorage + 772) = 1;
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    if (!*(_QWORD *)(v10 + 512))
      goto LABEL_21;
    if (playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem((uint64_t)a1, 0))
      goto LABEL_17;
    v12 = (uint64_t)a1;
    v13 = a3;
    v14 = a4;
    v15 = 1;
    goto LABEL_20;
  }
  if (*(_BYTE *)(DerivedStorage + 772))
  {
    *(_BYTE *)(DerivedStorage + 772) = 0;
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    if (!*(_QWORD *)(v10 + 512))
    {
LABEL_21:
      MEMORY[0x19402EA24](*(_QWORD *)(v10 + 496));
      return 0;
    }
    if (playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem((uint64_t)a1, 0))
    {
LABEL_17:
      MEMORY[0x19402EA24](*(_QWORD *)(v10 + 496));
      v18 = *MEMORY[0x1E0CA2E18];
      v19 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v16 = v18;
      v17 = v19;
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&v18, (uint64_t)&v16, 0);
      return 0;
    }
    v12 = (uint64_t)a1;
    v13 = a3;
    v14 = a4;
    v15 = 0;
LABEL_20:
    playerfig_applySoftwareVolume(v12, CFSTR("SoftwareVolume2"), v15, v13, v14);
    goto LABEL_21;
  }
  return 0;
}

uint64_t playerfig_SilentMute(uint64_t a1, int a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (a2)
  {
    if (!DerivedStorage[773])
    {
      playerfig_applySoftwareVolume(a1, CFSTR("SoftwareVolume5"), 1, 0.0, 0.0);
      v6[773] = 1;
    }
  }
  else if (DerivedStorage[773])
  {
    playerfig_applySoftwareVolume(a1, CFSTR("SoftwareVolume5"), 1, 1.0, 0.0);
    v6[773] = 0;
  }
  return 0;
}

uint64_t FigSampleBufferConsumerSbufInspectorCreate(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const char *a5, _QWORD *a6)
{
  uint64_t v10;
  _QWORD *DerivedStorage;
  CFTypeRef v12;
  const __CFAllocator **v13;
  const __CFAllocator *v14;
  const char *v15;
  CFStringRef v16;
  CFMutableArrayRef Mutable;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v10 = 4294954535;
  if (a3)
  {
    if (a2)
    {
      if (a6)
      {
        FigSampleBufferConsumerGetClassID();
        v10 = CMDerivedObjectCreate();
        if (!(_DWORD)v10)
        {
          DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
          v12 = CFRetain(a2);
          v13 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
          *DerivedStorage = v12;
          v14 = *v13;
          if (a5)
            v15 = a5;
          else
            v15 = "-";
          v16 = CFStringCreateWithCString(v14, v15, 0x8000100u);
          DerivedStorage[4] = v16;
          if (v16)
          {
            Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]);
            DerivedStorage[3] = Mutable;
            if (Mutable)
            {
              v10 = 0;
              DerivedStorage[1] = a3;
              DerivedStorage[2] = a4;
              *a6 = 0;
            }
            else
            {
              return 4294954536;
            }
          }
          else
          {
            return 4294954536;
          }
        }
      }
    }
  }
  return v10;
}

void sbcins_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

__CFString *sbcins_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferConsumerSbufInspector %p>"), a1);
  return Mutable;
}

uint64_t sbcins_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t sbcins_SendSampleBuffer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigEndpointStreamAudioEngineSbufTracerDebugPrint(a2);
  v4 = CMBaseObjectGetDerivedStorage();
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v6 = Mutable;
    if (CFArrayGetCount(*(CFArrayRef *)(v4 + 24)) >= 1)
    {
      FigCFArrayApplyBlock();
      FigCFArrayRemoveAllValues();
      FigCFArrayAppendArray();
    }
    CFRelease(v6);
  }
  v7 = (*(uint64_t (**)(const void *, _QWORD))(DerivedStorage + 8))(a2, *(_QWORD *)(DerivedStorage + 16));
  if (v7 == 3)
    return 0;
  if (v7 == 2)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 24), a2);
    return 0;
  }
  if (v7 == 1
    && (v8 = *(_QWORD *)DerivedStorage,
        (v9 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0))
  {
    return v9(v8, a2);
  }
  else
  {
    return 4294954514;
  }
}

uint64_t sbcins_IsQueueAtOrAboveHighWater()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v1)
    return v1(v0);
  else
    return 0;
}

uint64_t sbcins_IsQueueBelowLowWater()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v1)
    return v1(v0);
  else
    return 0;
}

uint64_t sbcins_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t sbcins_RemoveLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t sbcins_GetPendingSampleBufferCount()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v1)
    return v1(v0);
  else
    return 0;
}

uint64_t sbcins_PostNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t sbcins_Flush()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v1)
    return v1(v0);
  else
    return 4294954514;
}

uint64_t FigContentKeyBossCreateRemoteWithObjectID(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *DerivedStorage;

  if (!a3)
    return FigSignalErrorAt();
  v5 = ckbremote_ensureClientEstablished();
  if ((_DWORD)v5)
    return v5;
  FigGetAllocatorForMedia();
  FigContentKeyBossGetClassID();
  v6 = CMDerivedObjectCreate();
  if (!(_DWORD)v6)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[2] = FigSimpleMutexCreate();
    *DerivedStorage = a2;
    v6 = FigXPCRemoteClientAssociateObject();
    if (!(_DWORD)v6)
      *a3 = 0;
  }
  return v6;
}

uint64_t ckbremote_ensureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __ckbremote_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2F82578;
  block[4] = &v3;
  if (ckbremote_ensureClientEstablished_sFigContentKeyBossRemoteClientSetupOnce != -1)
    dispatch_once(&ckbremote_ensureClientEstablished_sFigContentKeyBossRemoteClientSetupOnce, block);
  FigXPCRemoteClientKillServerOnTimeout();
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigContentKeyBossCreateRemote(uint64_t a1, _QWORD *a2)
{
  uint64_t RemoteWithObjectID;
  uint64_t uint64;
  uint64_t v5;

  if (!a2)
    goto LABEL_8;
  RemoteWithObjectID = ckbremote_ensureClientEstablished();
  if (!(_DWORD)RemoteWithObjectID)
  {
    RemoteWithObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)RemoteWithObjectID)
    {
      RemoteWithObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)RemoteWithObjectID)
      {
        uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
        if (uint64)
        {
          RemoteWithObjectID = FigContentKeyBossCreateRemoteWithObjectID(uint64, uint64, a2);
          goto LABEL_7;
        }
LABEL_8:
        RemoteWithObjectID = FigSignalErrorAt();
      }
    }
  }
LABEL_7:
  v5 = RemoteWithObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t __ckbremote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  uint64_t result;

  FigRemote_ShouldConnectToMediaparserdForFileParsing();
  FigRemote_ShouldConnectToMediaplaybackd();
  result = FigXPCRemoteClientCreate();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ckbremote_deadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t ckbremote_handleServerMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

void __ckbremote_requestStatusCallback_keyRequestDidSucceed_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 112))(a1[5], a1[6], a1[7], a1[8], a1[9], 0);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[9];
  if (v5)
    CFRelease(v5);
}

void __ckbremote_requestStatusCallback_keyRequestDidFail_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 120))(a1[5], a1[6], a1[7], a1[8], a1[9], 0);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[9];
  if (v5)
    CFRelease(v5);
}

void __ckbremote_requestHandlingCallback_keyRequestDidSucceed_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 56))(a1[5], a1[6], a1[7], a1[8], a1[9], 0);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[9];
  if (v5)
    CFRelease(v5);
}

void __ckbremote_requestHandlingCallback_keyRequestDidFail_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 64))(a1[5], a1[6], a1[7], a1[8], a1[9], 0);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[9];
  if (v5)
    CFRelease(v5);
}

void __ckbremote_requestHandlingCallback_didProvideRequest_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
}

void __ckbremote_requestHandlingCallback_didProvideRenewingRequest_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 40))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
}

void __ckbremote_requestHandlingCallback_didUpdatePersistableKey_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 48))(a1[5], a1[6], a1[7], a1[8]);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[8];
  if (v5)
    CFRelease(v5);
}

void __ckbremote_requestHandlingCallback_didExternalProtectionStatusChange_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 72))(a1[5], a1[6], a1[7]);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
}

uint64_t ckbremote_invalidate()
{
  uint64_t v0;
  uint64_t v1;

  CMBaseObjectGetDerivedStorage();
  v0 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v0)
    v0 = FigXPCRemoteClientSendSyncMessage();
  v1 = v0;
  FigXPCRelease();
  return v1;
}

uint64_t ckbremote_finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;
  NSObject *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  FigSimpleMutexDestroy();
  FigXPCRelease();
  v1 = *(NSObject **)(DerivedStorage + 88);
  if (v1)
    dispatch_release(v1);
  v2 = *(const void **)(DerivedStorage + 80);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(DerivedStorage + 136);
  if (v3)
    dispatch_release(v3);
  v4 = *(const void **)(DerivedStorage + 128);
  if (v4)
    CFRelease(v4);
  return FigXPCRemoteClientKillServerOnTimeout();
}

CFStringRef ckbremote_copyDebugDesc(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *AllocatorForMedia;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigContentKeyBossRemote %p %lld]"), a1, *DerivedStorage);
}

uint64_t ckbremote_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
    return FigXPCSendStdCopyPropertyMessage();
  else
    return FigSignalErrorAt();
}

uint64_t ckbremote_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
    return FigXPCSendStdSetPropertyMessage();
  else
    return FigSignalErrorAt();
}

uint64_t ckbremote_processRequestEntry(uint64_t a1, uint64_t a2, int64_t a3, int a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, int64_t *a10)
{
  uint64_t DerivedStorage;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = FigXPCCreateBasicMessage();
  if ((_DWORD)v15 || (v15 = FigContentKeyBossClientServerXPC_SerializeKeyRequestParams(0, a2), (_DWORD)v15))
  {
    v17 = v15;
  }
  else
  {
    xpc_dictionary_set_int64(0, ".groupID", a3);
    xpc_dictionary_set_BOOL(0, ".reuseExistingKeyFromAnyGroup", a4 != 0);
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
    if (*(_BYTE *)(DerivedStorage + 96))
    {
      FigSignalErrorAt();
    }
    else
    {
      if (a7)
      {
        *(_BYTE *)(DerivedStorage + 96) = 1;
        v16 = *a7;
        *(_QWORD *)(DerivedStorage + 120) = *((_QWORD *)a7 + 2);
        *(_OWORD *)(DerivedStorage + 104) = v16;
      }
      if (!*(_QWORD *)(DerivedStorage + 128))
        *(_QWORD *)(DerivedStorage + 128) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (!*(_QWORD *)(DerivedStorage + 136))
        *(_QWORD *)(DerivedStorage + 136) = FigXPCRetain();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
    if (a7)
    {
      if (*((_QWORD *)a7 + 1))
        xpc_dictionary_set_BOOL(0, ".installDidSucceed", 1);
      if (*((_QWORD *)a7 + 2))
        xpc_dictionary_set_BOOL(0, ".installDidFail", 1);
    }
    v17 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v17)
      *a10 = xpc_dictionary_get_int64(0, ".requestID");
  }
  FigXPCRelease();
  FigXPCRelease();
  return v17;
}

uint64_t ckb_createRequestDataEntry(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5
    || (xpc_dictionary_set_int64(0, ".requestID", a2),
        v5 = FigContentKeyBossClientServerXPC_SerializeKeyRequestDataParams(0, a3),
        (_DWORD)v5))
  {
    v6 = v5;
  }
  else
  {
    v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v6)
      FigXPCMessageCopyCFData();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t ckb_createPersistableKeyDataEntry(uint64_t a1, int64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3 || (xpc_dictionary_set_int64(0, ".requestID", a2), v3 = FigXPCMessageSetCFData(), (_DWORD)v3))
  {
    v4 = v3;
  }
  else
  {
    v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v4)
      FigXPCMessageCopyCFData();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t ckb_processResponseEntry(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  v5 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v5)
  {
    xpc_dictionary_set_int64(0, ".requestID", a2);
    v5 = FigContentKeyBossClientServerXPC_SerializeKeyResponseSpecifier(0, a3);
    if (!(_DWORD)v5)
      v5 = FigXPCRemoteClientSendAsyncMessage();
  }
  v6 = v5;
  FigXPCRelease();
  return v6;
}

uint64_t ckb_processResponseErrorEntry(uint64_t a1, int64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v3)
  {
    xpc_dictionary_set_int64(0, ".requestID", a2);
    v3 = FigXPCMessageSetCFError();
    if (!(_DWORD)v3)
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  v4 = v3;
  FigXPCRelease();
  return v4;
}

uint64_t ckb_renewEntry(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = FigXPCCreateBasicMessage();
  if ((_DWORD)v10 || (v10 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a2), (_DWORD)v10))
  {
    v13 = v10;
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
    if (*(_BYTE *)(DerivedStorage + 96))
    {
      FigSignalErrorAt();
    }
    else
    {
      if (a3)
      {
        *(_BYTE *)(DerivedStorage + 96) = 1;
        v11 = *a3;
        *(_QWORD *)(DerivedStorage + 120) = *((_QWORD *)a3 + 2);
        *(_OWORD *)(DerivedStorage + 104) = v11;
      }
      if (!*(_QWORD *)(DerivedStorage + 128))
        *(_QWORD *)(DerivedStorage + 128) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (!*(_QWORD *)(DerivedStorage + 136))
        *(_QWORD *)(DerivedStorage + 136) = FigXPCRetain();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
    if (a3)
    {
      if (*((_QWORD *)a3 + 1))
        xpc_dictionary_set_BOOL(0, ".installDidSucceed", 1);
      if (*((_QWORD *)a3 + 2))
        xpc_dictionary_set_BOOL(0, ".installDidFail", 1);
    }
    v12 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    v13 = v12;
    if (a6)
    {
      if (!(_DWORD)v12)
      {
        v13 = FigXPCMessageCopyCFArray();
        if (!(_DWORD)v13)
          *a6 = 0;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v13;
}

uint64_t ckb_setRequestHandlingCallbacksEntry(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4)
    goto LABEL_25;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v5)
  {
    v4 = FigSignalErrorAt();
LABEL_25:
    v12 = v4;
    goto LABEL_23;
  }
  v6 = v5;
  v7 = *(const void **)(DerivedStorage + 80);
  *(_QWORD *)(DerivedStorage + 80) = v5;
  CFRetain(v5);
  if (v7)
    CFRelease(v7);
  if (a2)
  {
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    *(_QWORD *)(DerivedStorage + 72) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(DerivedStorage + 56) = v10;
    *(_OWORD *)(DerivedStorage + 40) = v9;
    *(_OWORD *)(DerivedStorage + 24) = v8;
  }
  v11 = *(void **)(DerivedStorage + 88);
  if (v11)
  {
    *(_QWORD *)(DerivedStorage + 88) = 0;
    xpc_release(v11);
  }
  *(_QWORD *)(DerivedStorage + 88) = FigXPCRetain();
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  if (a2)
  {
    if (*((_QWORD *)a2 + 1))
      xpc_dictionary_set_BOOL(0, ".installDidProvideKR", 1);
    if (*((_QWORD *)a2 + 2))
      xpc_dictionary_set_BOOL(0, ".installDidProvideRKR", 1);
    if (*((_QWORD *)a2 + 3))
      xpc_dictionary_set_BOOL(0, ".installDidUPK", 1);
    if (*((_QWORD *)a2 + 4))
      xpc_dictionary_set_BOOL(0, ".installDidSucceed", 1);
    if (*((_QWORD *)a2 + 5))
      xpc_dictionary_set_BOOL(0, ".installDidFail", 1);
    if (*((_QWORD *)a2 + 6))
      xpc_dictionary_set_BOOL(0, ".installDidExternalProtectionStatusChange", 1);
  }
  v12 = FigXPCRemoteClientSendSyncMessage();
  CFRelease(v6);
LABEL_23:
  FigXPCRelease();
  return v12;
}

uint64_t ckb_createGroupEntry(uint64_t a1, int64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3)
  {
    v4 = v3;
  }
  else
  {
    v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v4)
      *a2 = xpc_dictionary_get_int64(0, ".groupID");
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t ckb_destroyGroupEntry(uint64_t a1, int64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v3)
  {
    xpc_dictionary_set_int64(0, ".groupID", a2);
    v3 = FigXPCRemoteClientSendSyncMessage();
  }
  v4 = v3;
  FigXPCRelease();
  return v4;
}

uint64_t ckb_associateRequestWithGroupEntry(uint64_t a1, int64_t a2, int64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  v5 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v5)
  {
    xpc_dictionary_set_int64(0, ".requestID", a2);
    xpc_dictionary_set_int64(0, ".groupID", a3);
    v5 = FigXPCRemoteClientSendSyncMessage();
  }
  v6 = v5;
  FigXPCRelease();
  return v6;
}

uint64_t ckb_setClientManagedBossEntry()
{
  uint64_t *DerivedStorage;
  uint64_t v1;
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v1 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v1)
  {
    xpc_dictionary_set_uint64(0, ".clientManagedBossObjectID", *DerivedStorage);
    v1 = FigXPCRemoteClientSendSyncMessage();
  }
  v2 = v1;
  FigXPCRelease();
  return v2;
}

uint64_t ckb_createSecureTokenDataEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3 || (v3 = FigContentKeyBossClientServerXPC_SerializeSecureTokenRequestSpecifier(0, a2), (_DWORD)v3))
  {
    v4 = v3;
  }
  else
  {
    v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v4)
      FigXPCMessageCopyCFData();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t ckb_getExternalProtectionStatusEntry(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
  {
    v5 = FigSignalErrorAt();
LABEL_9:
    v6 = v5;
    goto LABEL_7;
  }
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5)
    goto LABEL_9;
  v5 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a2);
  if ((_DWORD)v5)
    goto LABEL_9;
  v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v6)
    *a3 = xpc_dictionary_get_uint64(0, ".externalProtectionStatus");
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t ckb_revokeEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v3 = FigXPCCreateBasicMessage();
    if ((_DWORD)v3 || (v3 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a2), (_DWORD)v3))
      v4 = v3;
    else
      v4 = FigXPCRemoteClientSendSyncMessage();
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  FigXPCRelease();
  return v4;
}

uint64_t FigGaplessAudioEditCursorCreate(const void *a1, uint64_t a2, uint64_t a3, const __CFAllocator *a4, CFTypeRef *a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t DerivedStorage;
  __int128 v18;
  __int128 v19;
  CFMutableArrayRef Mutable;
  uint64_t (*v21)(const void *, CMTimeMapping *);
  const __CFArray *v22;
  CFIndex Count;
  CFIndex v24;
  const __CFDictionary *ValueAtIndex;
  CMTime v26;
  CMTimeMapping v27;
  CFTypeRef cf;
  CMTimeRange time1;
  CMTime time2;
  CMTimeMapping v31;

  cf = 0;
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
  *(_OWORD *)&v27.source.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
  *(_OWORD *)&v27.target.start.value = v5;
  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
  *(_OWORD *)&v27.target.start.epoch = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
  *(_OWORD *)&v27.target.duration.timescale = v6;
  v7 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
  *(_OWORD *)&v27.source.start.value = *MEMORY[0x1E0CA2E20];
  *(_OWORD *)&v27.source.start.epoch = v7;
  if (!a1
    || (*(_BYTE *)(a2 + 12) & 1) == 0
    || (*(_BYTE *)(a2 + 36) & 1) == 0
    || *(_QWORD *)(a2 + 40)
    || (*(_QWORD *)(a2 + 24) & 0x8000000000000000) != 0
    || (*(_BYTE *)(a3 + 12) & 1) == 0
    || !a5)
  {
    goto LABEL_5;
  }
  FigEditCursorGetClassID();
  v16 = CMDerivedObjectCreate();
  if ((_DWORD)v16)
  {
    v10 = v16;
    FigSignalErrorAt();
    goto LABEL_7;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = CFRetain(a1);
  v19 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(DerivedStorage + 8) = *(_OWORD *)a2;
  *(_OWORD *)(DerivedStorage + 24) = v19;
  *(_OWORD *)(DerivedStorage + 40) = v18;
  Mutable = CFArrayCreateMutable(a4, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 56) = Mutable;
  if (!Mutable)
  {
LABEL_5:
    v9 = FigSignalErrorAt();
LABEL_6:
    v10 = v9;
    goto LABEL_7;
  }
  v21 = *(uint64_t (**)(const void *, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v21)
  {
    v9 = v21(a1, &v27);
    if (!(_DWORD)v9)
    {
      v31 = v27;
      gaecSetGaplessEditSegmentArrayFromOriginalEditSegment(DerivedStorage, (uint64_t)&v31);
      *(_OWORD *)&v26.value = *(_OWORD *)a3;
      v26.epoch = *(_QWORD *)(a3 + 16);
      v22 = *(const __CFArray **)(DerivedStorage + 56);
      if (v22)
      {
        Count = CFArrayGetCount(v22);
        if (Count >= 1)
        {
          v24 = 0;
          while (1)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), v24);
            memset(&v31, 0, sizeof(v31));
            CMTimeMappingMakeFromDictionary(&v31, ValueAtIndex);
            if (!v24)
            {
              *(_OWORD *)&time1.start.value = *(_OWORD *)&v26.value;
              time1.start.epoch = v26.epoch;
              time2 = v31.target.start;
              if (CMTimeCompare(&time1.start, &time2) < 0)
                break;
            }
            time1 = v31.target;
            time2 = v26;
            if (CMTimeRangeContainsTime(&time1, &time2))
              goto LABEL_28;
            if (Count == ++v24)
              goto LABEL_27;
          }
          v24 = 0;
          goto LABEL_28;
        }
      }
      else
      {
        Count = 0;
      }
LABEL_27:
      v24 = Count - 1;
LABEL_28:
      v10 = 0;
      *(_QWORD *)(DerivedStorage + 64) = v24;
      *a5 = cf;
      return v10;
    }
    goto LABEL_6;
  }
  v10 = 4294954514;
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v10;
}

void gaecSetGaplessEditSegmentArrayFromOriginalEditSegment(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  CMTimeFlags flags;
  CMTimeFlags v5;
  CMTimeEpoch v6;
  __int128 v7;
  CMTimeFlags v8;
  CMTimeEpoch v9;
  CMTimeValue v10;
  uint64_t v11;
  CMTimeEpoch v12;
  CMTimeEpoch v13;
  CMTimeEpoch v14;
  __int128 v15;
  int v16;
  __int128 v17;
  int32_t v18;
  __int128 v19;
  char v20;
  BOOL v21;
  CMTimeEpoch v22;
  CMTimeEpoch v23;
  const __CFAllocator *v24;
  CFDictionaryRef v25;
  CFDictionaryRef v26;
  CMTimeScale v27;
  CMTimeEpoch v28;
  CMTimeEpoch epoch;
  CMTimeEpoch v30;
  uint64_t value;
  CMTimeFlags v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  CMTime v36;
  CMTime v37;
  CMTimeRange v38;
  CMTimeRange rhs;
  CMTimeMapping range;
  CMTime v41;
  CMTime v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  CMTimeScale v46;
  CMTimeValue v47;
  CMTimeScale v48;
  __int128 v49;
  __int128 v50;
  CMTimeScale v51;
  __int128 v52;
  __int128 v53;
  CMTimeScale v54;
  CMTimeValue v55;
  CMTimeScale v56;
  CMTimeRange lhs;
  CMTimeRange duration;
  __int128 v59;
  __int128 v60;
  CMTimeScale timescale;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v55 = *MEMORY[0x1E0CA2E20];
  v56 = *(_DWORD *)(MEMORY[0x1E0CA2E20] + 8);
  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 40);
  v52 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 24);
  v53 = v3;
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E20] + 60);
  v54 = *(_DWORD *)(MEMORY[0x1E0CA2E20] + 56);
  v34 = *MEMORY[0x1E0CA2E20];
  v49 = v52;
  v50 = v3;
  v51 = v54;
  v47 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 12);
  v48 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 40);
  v44 = *(_OWORD *)(a2 + 24);
  v45 = v7;
  v8 = *(_DWORD *)(a2 + 60);
  v46 = *(_DWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v43 = v34;
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E20] + 16);
  v59 = v52;
  v60 = v3;
  timescale = v54;
  v30 = v13;
  value = *(_QWORD *)(MEMORY[0x1E0CA2E20] + 72);
  v32 = *(_DWORD *)(MEMORY[0x1E0CA2E20] + 84);
  v28 = *(_QWORD *)(MEMORY[0x1E0CA2E20] + 88);
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E20] + 64);
  v27 = *(_DWORD *)(MEMORY[0x1E0CA2E20] + 80);
  v33 = v11;
  if ((v5 & 0x1D) == 1 || (v8 & 1) == 0 || (v11 & 0x100000000) == 0 || v12 || v10 < 0)
  {
    memset(&v42, 0, sizeof(v42));
    v17 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&range.source.start.value = *(_OWORD *)(a1 + 8);
    *(_OWORD *)&range.source.start.epoch = v17;
    *(_OWORD *)&range.source.duration.timescale = *(_OWORD *)(a1 + 40);
    CMTimeRangeGetEnd(&v42, &range.source);
    v41 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    range.source.start.value = v47;
    range.source.start.timescale = v48;
    range.source.start.flags = v5;
    range.source.start.epoch = 0;
    *(_OWORD *)&rhs.start.value = *(_OWORD *)(a1 + 8);
    rhs.start.epoch = *(_QWORD *)(a1 + 24);
    CMTimeAdd(&v41, &range.source.start, &rhs.start);
    range.source.start = v42;
    rhs.start = v41;
    if (CMTimeCompare(&range.source.start, &rhs.start) <= 0)
    {
      rhs.start.value = *((_QWORD *)&v45 + 1);
      rhs.start.timescale = v46;
      rhs.start.flags = v8;
      rhs.start.epoch = 0;
      rhs.duration.value = v10;
      *(_QWORD *)&rhs.duration.timescale = v33;
      rhs.duration.epoch = v12;
      CMTimeMappingMakeEmpty(&range, &rhs);
    }
    else
    {
      rhs.start.value = *((_QWORD *)&v45 + 1);
      range.source.start = v41;
      rhs.start.timescale = v46;
      rhs.start.flags = v8;
      rhs.start.epoch = 0;
      rhs.duration.value = v10;
      *(_QWORD *)&rhs.duration.timescale = v33;
      rhs.duration.epoch = v12;
      memset(&v38, 0, sizeof(v38));
      *(_OWORD *)&duration.start.value = v44;
      duration.start.epoch = v45;
      CMTimeRangeMake(&v38, &range.source.start, &duration.start);
      memset(&v37, 0, sizeof(v37));
      range.source = v38;
      CMTimeRangeGetEnd(&v37, &range.source);
      range.source.start = v42;
      duration.start = v37;
      if (CMTimeCompare(&range.source.start, &duration.start) < 0)
      {
        *(_OWORD *)&range.source.start.value = v44;
        range.source.start.epoch = v45;
        duration.start.value = v10;
        *(_QWORD *)&duration.start.timescale = v33;
        duration.start.epoch = v12;
        v18 = CMTimeCompare(&range.source.start, &duration.start);
        v19 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
        *(_OWORD *)&duration.start.value = *MEMORY[0x1E0CA2E40];
        *(_OWORD *)&duration.start.epoch = v19;
        *(_OWORD *)&duration.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
        lhs.start = v42;
        v36 = v41;
        CMTimeSubtract(&range.source.start, &lhs.start, &v36);
        v38.duration = range.source.start;
        if (v18)
        {
          range.source.start = v38.duration;
          lhs.start.value = v10;
          *(_QWORD *)&lhs.start.timescale = v33;
          lhs.start.epoch = v12;
          *(_OWORD *)&v36.value = v44;
          v36.epoch = v45;
          CMTimeMultiplyTimeByTimeRatio();
        }
        else
        {
          rhs.duration = v38.duration;
        }
        range.source.start.value = *((_QWORD *)&v45 + 1);
        range.source.start.timescale = v46;
        range.source.start.flags = v8;
        range.source.start.epoch = 0;
        lhs.start = rhs.duration;
        CMTimeAdd(&duration.start, &range.source.start, &lhs.start);
        lhs.start.value = v10;
        *(_QWORD *)&lhs.start.timescale = v33;
        lhs.start.epoch = v12;
        v36 = rhs.duration;
        CMTimeSubtract(&range.source.start, &lhs.start, &v36);
        duration.duration = range.source.start;
        lhs = duration;
        CMTimeMappingMakeEmpty(&range, &lhs);
        v43 = *(_OWORD *)&range.source.start.value;
        v59 = *(_OWORD *)&range.source.duration.value;
        v60 = *(_OWORD *)&range.source.duration.epoch;
        flags = range.target.start.flags;
        timescale = range.target.start.timescale;
        epoch = range.target.start.epoch;
        v30 = range.source.start.epoch;
        value = range.target.duration.value;
        v32 = range.target.duration.flags;
        v27 = range.target.duration.timescale;
        v28 = range.target.duration.epoch;
      }
      duration = v38;
      lhs = rhs;
      CMTimeMappingMake(&range, &duration, &lhs);
    }
    lhs.start.value = range.source.start.value;
    v5 = range.source.start.flags;
    lhs.start.timescale = range.source.start.timescale;
    *(_OWORD *)&duration.start.value = *(_OWORD *)&range.source.duration.value;
    *(_OWORD *)&duration.start.epoch = *(_OWORD *)&range.source.duration.epoch;
    v8 = range.target.start.flags;
    duration.duration.timescale = range.target.start.timescale;
    v10 = range.target.duration.value;
    v14 = range.target.duration.epoch;
    v16 = flags & 1;
    if ((flags & 1) != 0)
    {
      v20 = v32 & (v28 == 0);
      if (value < 0)
        v20 = 0;
      v21 = (v20 & 1) == 0;
      if ((v20 & 1) != 0)
        v22 = v6;
      else
        v22 = v30;
      v23 = epoch;
      if (!v21)
        v23 = v6;
      epoch = v23;
      v30 = v22;
    }
    v33 = *(_QWORD *)&range.target.duration.timescale;
    v9 = v6;
  }
  else
  {
    v14 = 0;
    lhs.start.value = *(_QWORD *)a2;
    lhs.start.timescale = *(_DWORD *)(a2 + 8);
    v15 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)&duration.start.value = *(_OWORD *)(a2 + 24);
    *(_OWORD *)&duration.start.epoch = v15;
    duration.duration.timescale = *(_DWORD *)(a2 + 56);
    v16 = flags & 1;
  }
  v55 = lhs.start.value;
  v56 = lhs.start.timescale;
  v52 = *(_OWORD *)&duration.start.value;
  v53 = *(_OWORD *)&duration.start.epoch;
  v54 = duration.duration.timescale;
  v35 = v43;
  v51 = timescale;
  v49 = v59;
  v50 = v60;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
  *(_OWORD *)&range.source.duration.value = v52;
  v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  range.source.start.value = v55;
  range.source.start.timescale = v56;
  range.source.start.flags = v5;
  range.source.start.epoch = v6;
  *(_OWORD *)&range.source.duration.epoch = v53;
  range.target.start.timescale = v54;
  range.target.start.flags = v8;
  range.target.start.epoch = v9;
  range.target.duration.value = v10;
  *(_QWORD *)&range.target.duration.timescale = v33;
  range.target.duration.epoch = v14;
  v25 = CMTimeMappingCopyAsDictionary(&range, v24);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v25);
  if (v16)
  {
    if ((v32 & 1) != 0 && !v28 && (value & 0x8000000000000000) == 0)
    {
      *(_OWORD *)&range.source.start.value = v35;
      *(_OWORD *)&range.source.duration.value = v49;
      range.source.start.epoch = v30;
      *(_OWORD *)&range.source.duration.epoch = v50;
      range.target.start.timescale = v51;
      range.target.start.flags = flags;
      range.target.start.epoch = epoch;
      range.target.duration.value = value;
      range.target.duration.timescale = v27;
      range.target.duration.flags = v32;
      range.target.duration.epoch = 0;
      v26 = CMTimeMappingCopyAsDictionary(&range, v24);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v26);
      if (v26)
        CFRelease(v26);
    }
  }
  if (v25)
    CFRelease(v25);
}

void gaec_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 56);
  if (v1)
    CFRelease(v1);
}

__CFString *gaec_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __int128 v4;
  __int128 v5;
  CFStringRef v6;
  __CFString *Mutable;
  CMTimeRange range;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = *(_OWORD *)(DerivedStorage + 8);
  v5 = *(_OWORD *)(DerivedStorage + 40);
  *(_OWORD *)&range.start.epoch = *(_OWORD *)(DerivedStorage + 24);
  *(_OWORD *)&range.duration.timescale = v5;
  *(_OWORD *)&range.start.value = v4;
  v6 = CMTimeRangeCopyDescription(v3, &range);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigGaplessAudioEditCursor %p GaplessTimeRange %@>"), a1, v6);
  if (v6)
    CFRelease(v6);
  return Mutable;
}

uint64_t gaec_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigEditCursorGetFigBaseObject(*DerivedStorage);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
    return v9(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t gaec_Copy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t MutableCopy;
  uint64_t v13;
  CFTypeRef v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v5 = *(_QWORD *)DerivedStorage;
  v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v6)
  {
    v13 = 4294954514;
    goto LABEL_7;
  }
  v7 = v6(v5, &v15);
  if (!(_DWORD)v7)
  {
    CFGetAllocator(a1);
    FigEditCursorGetClassID();
    v8 = CMDerivedObjectCreate();
    if ((_DWORD)v8)
    {
      v13 = v8;
      FigSignalErrorAt();
      goto LABEL_7;
    }
    v9 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)v9 = v15;
    v15 = 0;
    v10 = *(_OWORD *)(DerivedStorage + 40);
    v11 = *(_OWORD *)(DerivedStorage + 24);
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(DerivedStorage + 8);
    *(_OWORD *)(v9 + 24) = v11;
    *(_OWORD *)(v9 + 40) = v10;
    CFGetAllocator(a1);
    MutableCopy = FigCFArrayCreateMutableCopy();
    *(_QWORD *)(v9 + 56) = MutableCopy;
    if (MutableCopy)
    {
      v13 = 0;
      *(_QWORD *)(v9 + 64) = *(_QWORD *)(DerivedStorage + 64);
      *a2 = 0;
      goto LABEL_7;
    }
    v7 = FigSignalErrorAt();
  }
  v13 = v7;
LABEL_7:
  if (v15)
    CFRelease(v15);
  return v13;
}

uint64_t gaec_Step(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t *v4;
  int v5;
  __int128 *v6;
  const __CFArray *Count;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, __int128 *);
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, __int128 *);
  const __CFArray *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (uint64_t *)DerivedStorage;
  if (a2 >= 1)
  {
    v5 = a2 + 1;
    v6 = (__int128 *)MEMORY[0x1E0CA2E20];
    while (1)
    {
      Count = (const __CFArray *)v4[7];
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      v8 = v4[8] + 1;
      if ((uint64_t)Count <= v8)
      {
        v9 = v6[3];
        v36 = v6[2];
        v37 = v9;
        v10 = v6[5];
        v38 = v6[4];
        v39 = v10;
        v11 = v6[1];
        v34 = *v6;
        v35 = v11;
        v12 = *v4;
        v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v13)
          return 4294954514;
        result = v13(v12, 1);
        if ((_DWORD)result)
          return result;
        v15 = *v4;
        v16 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v16)
          return 4294954514;
        result = v16(v15, &v34);
        if ((_DWORD)result)
          return result;
        v30 = v36;
        v31 = v37;
        v32 = v38;
        v33 = v39;
        v28 = v34;
        v29 = v35;
        gaecSetGaplessEditSegmentArrayFromOriginalEditSegment((uint64_t)v4, (uint64_t)&v28);
        v4[8] = 0;
      }
      else
      {
        v4[8] = v8;
      }
      if (--v5 <= 1)
        return 0;
    }
  }
  if ((a2 & 0x80000000) == 0)
    return 0;
  v17 = *(_QWORD *)(DerivedStorage + 64);
  v18 = (__int128 *)MEMORY[0x1E0CA2E20];
  while (v17 > 0)
  {
    --v17;
LABEL_25:
    v4[8] = v17;
    if (__CFADD__(a2++, 1))
      return 0;
  }
  v19 = v18[3];
  v36 = v18[2];
  v37 = v19;
  v20 = v18[5];
  v38 = v18[4];
  v39 = v20;
  v21 = v18[1];
  v34 = *v18;
  v35 = v21;
  v22 = *v4;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v23)
  {
    result = v23(v22, 0xFFFFFFFFLL);
    if ((_DWORD)result)
      return result;
    v24 = *v4;
    v25 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v25)
    {
      result = v25(v24, &v34);
      if ((_DWORD)result)
        return result;
      v30 = v36;
      v31 = v37;
      v32 = v38;
      v33 = v39;
      v28 = v34;
      v29 = v35;
      gaecSetGaplessEditSegmentArrayFromOriginalEditSegment((uint64_t)v4, (uint64_t)&v28);
      v26 = (const __CFArray *)v4[7];
      if (v26)
        v26 = (const __CFArray *)CFArrayGetCount(v26);
      v17 = (uint64_t)v26 - 1;
      goto LABEL_25;
    }
  }
  return 4294954514;
}

uint64_t gaec_GetEditSegment(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *ValueAtIndex;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CMTimeMapping v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), *(_QWORD *)(DerivedStorage + 64));
  memset(&v9, 0, sizeof(v9));
  CMTimeMappingMakeFromDictionary(&v9, ValueAtIndex);
  v5 = *(_OWORD *)&v9.target.start.value;
  a2[2] = *(_OWORD *)&v9.source.duration.timescale;
  a2[3] = v5;
  v6 = *(_OWORD *)&v9.target.duration.timescale;
  a2[4] = *(_OWORD *)&v9.target.start.epoch;
  a2[5] = v6;
  v7 = *(_OWORD *)&v9.source.start.epoch;
  *a2 = *(_OWORD *)&v9.source.start.value;
  a2[1] = v7;
  return 0;
}

uint64_t FigVirtualDisplaySessionGetClassID()
{
  if (FigVirtualDisplaySessionGetClassID_once != -1)
    dispatch_once(&FigVirtualDisplaySessionGetClassID_once, &__block_literal_global_11);
  return sVirtualDisplaySessionClassID;
}

uint64_t FigVirtualDisplaySessionGetTypeID()
{
  if (FigVirtualDisplaySessionGetClassID_once != -1)
    dispatch_once(&FigVirtualDisplaySessionGetClassID_once, &__block_literal_global_11);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigVirtualDisplaySessionIsIdle(uint64_t a1, BOOL *a2)
{
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef cf;

  cf = 0;
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v4)
    return 4294954514;
  v5 = v4(a1, CFSTR("IsIdle"), *MEMORY[0x1E0C9AE00], &cf);
  v6 = cf;
  if (!(_DWORD)v5)
    *a2 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  if (v6)
    CFRelease(v6);
  return v5;
}

CFStringRef virtualDisplaySessionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVirtualDisplaySession %p]"), a1);
}

void feServer_LoadCelestial()
{
  __CFBundle *BundleWithIdentifier;
  const __CFURL *v1;
  const __CFURL *v2;
  const __CFAllocator *v3;
  const __CFURL *v4;
  const __CFURL *v5;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.MediaToolbox"));
  if (BundleWithIdentifier)
  {
    v1 = CFBundleCopyBundleURL(BundleWithIdentifier);
    if (v1)
    {
      v2 = v1;
      v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v4 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("../../PrivateFrameworks/Celestial.framework"), v1);
      if (v4)
      {
        v5 = v4;
        feServer_LoadCelestial_resultBundle = (uint64_t)CFBundleCreate(v3, v4);
        CFRelease(v5);
      }
      CFRelease(v2);
    }
  }
}

uint64_t FigMediaServerStop()
{
  FigPlayerCMSessionOneTimeFinalization();
  return 0;
}

uint64_t FigInitializePlayerProcess()
{
  void *v0;
  const __CFDictionary *ModelSpecificPropertyList;
  uint64_t v3;
  int out_token;

  GSInitialize();
  FigSandboxRegistrationServerStart();
  feServer_LoadCelestial();
  FigShared_OneTimeInitialization();
  out_token = 0;
  notify_register_dispatch("com.apple.language.changed", &out_token, MEMORY[0x1E0C80D38], &__block_literal_global_12);
  v0 = (void *)FigOSTransactionCreate();
  FigControlCommandsStartServer();
  ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartCPECryptorServer")))
    FigCPECryptorStartServer();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartCPEServer")))
    FigCPEServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartContentKeySessionServer")))
    FigContentKeyBossStartServer();
  FigContentKeySessionStartServer();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartCustomURLLoaderServer")))
    FigCustomURLLoaderServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartByteStreamServer")))
    FigByteStreamServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartFormatReaderServer")))
    FigFormatReaderServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartSampleGeneratorServer")))
    FigSampleGeneratorServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAssetServer")))
    FigAssetServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartMutableCompositionServer")))
    FigMutableCompositionServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAssetImageGeneratorServer")))
    FigAssetImageGeneratorServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartMTAudioProcessingTapServer")))
    MTAudioProcessingTapServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("VideoCompositorServer")))
    FigVideoCompositorServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartPlayerServer")))
    FigPlayerServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartVideoQueueServer")))
    FigVideoQueueServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartRemakerServer")))
    FigRemakerServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAssetDownloaderServer")))
    FigAssetDownloaderStartServer();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAssetCacheInspectorServer")))
    FigAssetCacheInspectorStartServer();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartSampleBufferAudioRendererServer")))
    FigSampleBufferAudioRendererServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartSampleBufferRenderSynchronizerServer")))
    FigSampleBufferRenderSynchronizerServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartVideoTargetServer")))
    FigVideoTargetStartServer();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartVisualContextServer")))
    FigVisualContextServerStart();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartNeroidServer")))
    FigNeroidStartServer();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartMetricEventTimelineStartServer")))
    FigMetricEventTimelineStartServer();
  if (ModelSpecificPropertyList)
    CFRelease(ModelSpecificPropertyList);
  if (v0)
    os_release(v0);
  FigStartMonitoringNetworkActivity();
  CelestialIsAudioAccessory();
  if (FigGetCFPreferenceNumberWithDefault())
  {
    v3 = 0;
    PKDGetSystemCPC(&v3);
  }
  return FigGetCFPreferenceNumberWithDefault();
}

uint64_t FigInitializeParserProcess()
{
  FigMediaparserdUtilities_StartMediaparserdUtilitiesServer();
  FigFormatReaderServerStart();
  FigMutableMovieServerStart();
  FigManifoldStartServer();
  PlaylistFileParserServer();
  FigStreamPlaylistParserStartServer();
  FigSessionDataParserStartServer();
  FigFairplayPSSHAtomParserStartServer();
  FigSteeringParserStartServer();
  FigXMLServiceStartServer();
  return FigCaptionGroupConverterFromSampleBufferStartServer();
}

void __feServer_initializeLanguageChangedNotification_block_invoke()
{
  exit(254);
}

BOOL feServer_ShouldStartSubServer(const __CFDictionary *a1, const void *a2)
{
  CFTypeID v2;
  void *value;

  if (!a1)
    return 1;
  value = 0;
  if (CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value)
    && (v2 = CFGetTypeID(value), v2 == CFBooleanGetTypeID()))
  {
    return value == (void *)*MEMORY[0x1E0C9AE50];
  }
  else
  {
    return 1;
  }
}

uint64_t ckbutil_registerClass(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t FigContentKeyBossGetClassID()
{
  if (sRegisterFigContentKeyBossClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigContentKeyBossClassIDOnce, 0, (dispatch_function_t)RegisterFigContentKeyBossType);
  return sFigContentKeyBossClassID;
}

uint64_t RegisterFigContentKeyBossType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigContentKeyBossGetTypeID()
{
  if (sRegisterFigContentKeyBossClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigContentKeyBossClassIDOnce, 0, (dispatch_function_t)RegisterFigContentKeyBossType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef ckb_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigContentKeyBoss %p]"), a1);
}

uint64_t ckbutil_getNextRequestID()
{
  return FigAtomicIncrement64() << 8;
}

uint64_t ckrp_getTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2F829B0;
  if (ckrp_getTypeID_once != -1)
    dispatch_once_f(&ckrp_getTypeID_once, &v1, (dispatch_function_t)ckbutil_registerClass);
  return ckrp_getTypeID_typeID;
}

uint64_t FigContentKeyRequestParamsGetKeySpecifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t FigContentKeyRequestParamsGetSupportsOfflineKey(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t FigContentKeyRequestParamsCreate(uint64_t a1, const void *a2, char a3, int a4, int a5, uint64_t a6, const void *a7, const void *a8, uint64_t a9, char a10, char a11, uint64_t a12, uint64_t *a13)
{
  uint64_t Instance;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;

  if (!a13)
    return FigSignalErrorAt();
  ckrp_getTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v20 = Instance;
  if (a2)
    v21 = CFRetain(a2);
  else
    v21 = 0;
  *(_QWORD *)(v20 + 16) = v21;
  *(_BYTE *)(v20 + 24) = a3;
  *(_DWORD *)(v20 + 28) = a4;
  *(_DWORD *)(v20 + 32) = a5;
  if (a7)
    v22 = CFRetain(a7);
  else
    v22 = 0;
  *(_QWORD *)(v20 + 40) = v22;
  if (a8)
    v23 = CFRetain(a8);
  else
    v23 = 0;
  *(_QWORD *)(v20 + 48) = v23;
  *(_QWORD *)(v20 + 56) = a9;
  *(_BYTE *)(v20 + 64) = a10;
  *(_BYTE *)(v20 + 65) = a11;
  *(_BYTE *)(v20 + 66) = FigCFDictionaryGetBooleanValue() == *MEMORY[0x1E0C9AE50];
  *a13 = v20;
  return 0;
}

uint64_t FigContentKeyRequestDataParamsCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, int a7, char a8, char a9, uint64_t *a10)
{
  uint64_t Instance;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  uint64_t result;
  __int128 v25;

  if (!a10)
    return FigSignalErrorAt();
  v25 = xmmword_1E2F82A20;
  if (ckrdp_getTypeID_once != -1)
    dispatch_once_f(&ckrdp_getTypeID_once, &v25, (dispatch_function_t)ckbutil_registerClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v18 = Instance;
  if (a2)
    v19 = CFRetain(a2);
  else
    v19 = 0;
  *(_QWORD *)(v18 + 16) = v19;
  if (a3)
    v20 = CFRetain(a3);
  else
    v20 = 0;
  *(_QWORD *)(v18 + 24) = v20;
  if (a4)
    v21 = CFRetain(a4);
  else
    v21 = 0;
  *(_QWORD *)(v18 + 32) = v21;
  if (a5)
    v22 = CFRetain(a5);
  else
    v22 = 0;
  *(_QWORD *)(v18 + 40) = v22;
  if (a6)
    v23 = CFRetain(a6);
  else
    v23 = 0;
  result = 0;
  *(_QWORD *)(v18 + 48) = v23;
  *(_DWORD *)(v18 + 56) = a7;
  *(_BYTE *)(v18 + 60) = a8;
  *(_BYTE *)(v18 + 61) = a9;
  *a10 = v18;
  return result;
}

uint64_t FigContentKeyResponseParamsCreate(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, _QWORD *a6)
{
  uint64_t Instance;
  _QWORD *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  uint64_t result;
  __int128 v17;

  if (!a6)
    return FigSignalErrorAt();
  v17 = xmmword_1E2F82A90;
  if (ckrsp_getTypeID_once != -1)
    dispatch_once_f(&ckrsp_getTypeID_once, &v17, (dispatch_function_t)ckbutil_registerClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v12 = (_QWORD *)Instance;
  *(_DWORD *)(Instance + 16) = a2;
  if (a3)
    v13 = CFRetain(a3);
  else
    v13 = 0;
  v12[3] = v13;
  if (a4)
    v14 = CFRetain(a4);
  else
    v14 = 0;
  v12[4] = v14;
  if (a5)
    v15 = CFRetain(a5);
  else
    v15 = 0;
  result = 0;
  v12[5] = v15;
  *a6 = v12;
  return result;
}

uint64_t FigContentKeySecureTokenRequestParamsCreate(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, const void *a6, int a7, uint64_t *a8)
{
  uint64_t Instance;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  uint64_t result;
  __int128 v22;

  if (!a8)
    return FigSignalErrorAt();
  v22 = xmmword_1E2F82B00;
  if (ckstrp_getTypeID_once != -1)
    dispatch_once_f(&ckstrp_getTypeID_once, &v22, (dispatch_function_t)ckbutil_registerClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v16 = Instance;
  *(_DWORD *)(Instance + 16) = a2;
  if (a3)
    v17 = CFRetain(a3);
  else
    v17 = 0;
  *(_QWORD *)(v16 + 24) = v17;
  if (a4)
    v18 = CFRetain(a4);
  else
    v18 = 0;
  *(_QWORD *)(v16 + 32) = v18;
  if (a5)
    v19 = CFRetain(a5);
  else
    v19 = 0;
  *(_QWORD *)(v16 + 40) = v19;
  if (a6)
    v20 = CFRetain(a6);
  else
    v20 = 0;
  result = 0;
  *(_QWORD *)(v16 + 48) = v20;
  *(_DWORD *)(v16 + 56) = a7;
  *a8 = v16;
  return result;
}

uint64_t FigContentKeyBossCreate(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  const void *Value;
  const void *v8;
  uint64_t v9;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v12;
  CFMutableDictionaryRef v13;
  const __CFAllocator *v14;
  CFMutableDictionaryRef v15;
  const __CFAllocator *v16;
  CFMutableDictionaryRef v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v19;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
    return FigSignalErrorAt();
  FigContentKeyBossGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    return v5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 152) = FigIsItOKToLogURLs();
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("kCKBCO_ClientAuditToken"));
    if (Value)
      Value = CFRetain(Value);
    *(_QWORD *)(DerivedStorage + 144) = Value;
    v8 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v8 == CFDictionaryGetValue(a2, CFSTR("kCKBCO_DoNotLogURLs")))
      *(_BYTE *)(DerivedStorage + 152) = 0;
  }
  *(_BYTE *)(DerivedStorage + 8) = 1;
  v9 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)DerivedStorage = v9;
  if (!v9)
    return FigSignalErrorAt();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, 0, MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 104) = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v12 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v13 = CFDictionaryCreateMutable(v12, 0, 0, MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 112) = v13;
  if (!v13)
    return FigSignalErrorAt();
  v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v15 = CFDictionaryCreateMutable(v14, 0, 0, 0);
  *(_QWORD *)(DerivedStorage + 120) = v15;
  if (!v15)
    return FigSignalErrorAt();
  v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v17 = CFDictionaryCreateMutable(v16, 0, 0, 0);
  *(_QWORD *)(DerivedStorage + 128) = v17;
  if (!v17)
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 96) = 6;
  *(_BYTE *)(DerivedStorage + 9) = 1;
  *(_QWORD *)(DerivedStorage + 16) = -1;
  v5 = FigRetainProxyCreate();
  if ((_DWORD)v5)
    return v5;
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v19 = 0;
  *a3 = 0;
  return v19;
}

void ckrp_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
}

uint64_t ckrp_equal(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
        && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return result;
}

CFHashCode ckrp_hash(uint64_t a1)
{
  const void *Identifier;

  Identifier = (const void *)FigContentKeySpecifierGetIdentifier(*(_QWORD *)(a1 + 16));
  return CFHash(Identifier);
}

CFStringRef ckrp_copyDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;
  uint64_t Identifier;
  uint64_t KeySystem;
  uint64_t EncryptionMethod;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Identifier = FigContentKeySpecifierGetIdentifier(*(_QWORD *)(a1 + 16));
  KeySystem = FigContentKeySpecifierGetKeySystem(*(_QWORD *)(a1 + 16));
  EncryptionMethod = FigContentKeySpecifierGetEncryptionMethod(*(_QWORD *)(a1 + 16));
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%@_%d_%d_%d_%d"), Identifier, KeySystem, EncryptionMethod, *(unsigned __int8 *)(a1 + 24), *(unsigned int *)(a1 + 28));
}

void ckrdp_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
}

void ckrsp_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

void ckstrp_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
}

uint64_t ckb_invalidate(void *a1)
{
  dispatch_queue_t *DerivedStorage;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*DerivedStorage, a1, (dispatch_function_t)ckb_invalidateOnQueue);
  return 0;
}

void ckb_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ckb_invalidateOnQueue();
  v1 = *(const void **)(DerivedStorage + 168);
  if (v1)
    CFRelease(v1);
  if (*(_QWORD *)DerivedStorage)
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
}

CFStringRef ckb_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigContentKeyBoss %p]"), a1);
}

uint64_t ckb_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v8[3];
  uint64_t v9;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v9 = 0;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_setPropertyDispatch);
  return v9;
}

void ckb_invalidateOnQueue()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    FigRetainProxyInvalidate();
    *(_BYTE *)(DerivedStorage + 176) = 1;
    v1 = *(const void **)(DerivedStorage + 104);
    if (v1)
      CFRelease(v1);
    v2 = *(const void **)(DerivedStorage + 112);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(DerivedStorage + 120);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(DerivedStorage + 128);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(DerivedStorage + 144);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(DerivedStorage + 160);
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)(DerivedStorage + 24);
    if (v7)
      CFRelease(v7);
    v8 = *(NSObject **)(DerivedStorage + 88);
    if (v8)
      dispatch_release(v8);
  }
}

uint64_t ckb_setPropertyDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t result;
  CFTypeRef v5;

  v2 = *(const void **)(a1 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    result = FigSignalErrorAt();
  }
  else if (FigCFEqual())
  {
    result = 0;
    *(_BYTE *)(DerivedStorage + 8) = v2 == (const void *)*MEMORY[0x1E0C9AE50];
  }
  else if (FigCFEqual())
  {
    result = 0;
    *(_BYTE *)(DerivedStorage + 9) = v2 == (const void *)*MEMORY[0x1E0C9AE50];
  }
  else if (FigCFEqual())
  {
    if (v2)
      v5 = CFRetain(v2);
    else
      v5 = 0;
    result = 0;
    *(_QWORD *)(DerivedStorage + 136) = v5;
  }
  else
  {
    result = 4294954512;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t ckb_processRequestEntry(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[3];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  if (!a2 || !a10)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  LOBYTE(v21) = a4;
  *((_QWORD *)&v21 + 1) = a5;
  *(_QWORD *)&v22 = a6;
  *((_QWORD *)&v22 + 1) = a7;
  *(_QWORD *)&v23 = a8;
  *((_QWORD *)&v23 + 1) = a9;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_processRequestDispatch);
  *a10 = v24;
  return DWORD2(v24);
}

uint64_t ckb_createRequestDataEntry_0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[3];
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v12 = 0;
  if (!a3 || !a4)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_createRequestDataDispatch);
  *a4 = v12;
  return v11;
}

uint64_t ckb_createPersistableKeyDataEntry_0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[3];
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v12 = 0;
  if (!a3 || !a4)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_createPersistableKeyDataDispatch);
  *a4 = v12;
  return v11;
}

uint64_t ckb_processResponseEntry_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v8[3];
  uint64_t v9;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (!a3)
    return FigSignalErrorAt();
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_processResponseDispatch);
  return v9;
}

uint64_t ckb_processResponseErrorEntry_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v8[3];
  uint64_t v9;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (!a3)
    return FigSignalErrorAt();
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_processResponseErrorDispatch);
  return v9;
}

uint64_t ckb_renewEntry_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[6];
  uint64_t v15;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[5] = a6;
  v15 = 0;
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  context[3] = a4;
  context[4] = a5;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_renewDispatch);
  return v15;
}

uint64_t ckb_setRequestHandlingCallbacksEntry_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[4];
  uint64_t v11;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  if (!a2 || !a3 || !a4)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  context[3] = a4;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_setRequestHandlingCallbacksDispatch);
  return v11;
}

uint64_t ckb_createGroupEntry_0(uint64_t a1, _QWORD *a2)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t context;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8 = 0;
  if (!a2)
    return FigSignalErrorAt();
  context = a1;
  dispatch_sync_f(*DerivedStorage, &context, (dispatch_function_t)ckb_createGroupDispatch);
  *a2 = v7;
  return v8;
}

uint64_t ckb_destroyGroupEntry_0(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[2];
  uint64_t v7;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[1] = a2;
  v7 = 0;
  context[0] = a1;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_destroyGroupDispatch);
  return v7;
}

uint64_t ckb_associateRequestWithGroupEntry_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v8[3];
  uint64_t v9;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v9 = 0;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_associateRequestWithGroupDispatch);
  return v9;
}

uint64_t ckb_createSecureTokenDataEntry_0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v10 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v8[0] = a1;
  v8[1] = a2;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_createSecureTokenDataRecDispatch);
  *a3 = v9;
  return v10;
}

uint64_t ckb_copyAuthorizationTokenEntry(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v10 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v8[0] = a1;
  v8[1] = a2;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_copyAuthorizationTokenDispatch);
  *a3 = v9;
  return v10;
}

uint64_t ckb_getExternalProtectionStatusEntry_0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t result;
  _QWORD context[2];
  uint64_t v9;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (a2 && a3)
  {
    context[0] = a1;
    context[1] = a2;
    dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_getExternalProtectionStatusDispatch);
    result = HIDWORD(v9);
    *a3 = v9;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return result;
}

uint64_t ckb_setAllowedRequestHandlersEntry(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD context[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[1] = a2;
  v9 = 0;
  context[0] = a1;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_setAllowedRequestHandlersDispatch);
  v5 = v9;
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5;
}

uint64_t ckb_revokeEntry_0(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[2];
  uint64_t v7;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v7 = 0;
  if (!a2)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_revokeDispatch);
  return v7;
}

void ckb_processRequestDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  char *v4;
  const void *v5;
  const void *v6;
  __int128 *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t *v10;
  int Group;
  const void *v12;
  const __CFDictionary *v13;
  const void *v14;
  uint64_t v15;
  char *v16;
  const __CFArray *v17;
  CFIndex Count;
  CFIndex v19;
  CFIndex v20;
  _QWORD *ValueAtIndex;
  int RequestByKeySpecifier;
  CFTypeRef v23;
  int v24;
  const void *Value;
  uint64_t *v26;
  uint64_t v27;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v29;
  uint64_t AllocatorForMedia;
  void (*v31)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v32;
  CFTypeRef v33;
  int v34;
  _QWORD *v35;
  const void *v36;
  uint64_t v37;
  int RequestWithRequestID;
  _QWORD *v39;
  const void *v40;
  uint64_t v41;
  int started;
  NSObject *v43;
  uint64_t v44;
  const void *v45;
  const void *v46;
  uint64_t DerivedStorage;
  NSObject *v48;
  __int128 *v49;
  __int128 *v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  v51 = *(unsigned __int8 *)(a1 + 24);
  v5 = *(const void **)(a1 + 32);
  v6 = *(const void **)(a1 + 40);
  v7 = *(__int128 **)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(NSObject **)(a1 + 64);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v10 = &sFigCDSNodeProtocolID;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    Group = FigSignalErrorAt();
    goto LABEL_56;
  }
  v46 = v5;
  if ((unint64_t)(v4 - 6) >= 0xFFFFFFFFFFFFFFFBLL)
  {
    Group = ckb_ensureAndGetGroup(v2, v4);
    if (Group)
      goto LABEL_56;
  }
  v45 = v6;
  v12 = *(const void **)(v3 + 16);
  cf[0] = 0;
  v13 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 104);
  if (v51)
  {
    v48 = v9;
    v44 = v3;
    v14 = v2;
    v15 = v8;
    v16 = v4;
    v17 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    Count = CFArrayGetCount(v17);
    if (Count < 1)
    {
      v24 = 0;
      v8 = v15;
      v2 = v14;
      v3 = v44;
      goto LABEL_19;
    }
    v19 = Count;
    v49 = v7;
    v20 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v17, v20);
      RequestByKeySpecifier = ckg_getRequestByKeySpecifier((uint64_t)ValueAtIndex, v12, cf);
      if (RequestByKeySpecifier)
      {
        v24 = RequestByKeySpecifier;
        goto LABEL_11;
      }
      v23 = cf[0];
      if (cf[0])
        break;
      if (v19 == ++v20)
      {
        v24 = 0;
LABEL_11:
        v4 = v16;
        v8 = v15;
        v2 = v14;
        v3 = v44;
        v10 = &sFigCDSNodeProtocolID;
        v7 = v49;
        goto LABEL_19;
      }
    }
    v4 = v16;
    v8 = v15;
    v2 = v14;
    v3 = v44;
    v7 = v49;
  }
  else
  {
    Value = CFDictionaryGetValue(v13, v4);
    if (!Value)
    {
      v24 = FigSignalErrorAt();
      if (v24)
        goto LABEL_49;
      goto LABEL_22;
    }
    ValueAtIndex = Value;
    v23 = CFDictionaryGetValue(*((CFDictionaryRef *)Value + 7), v12);
    cf[0] = v23;
    if (!v23)
    {
      v10 = &sFigCDSNodeProtocolID;
      goto LABEL_28;
    }
    v48 = v9;
    v17 = 0;
  }
  v24 = 0;
  v52 = (uint64_t *)v23;
  v54 = ValueAtIndex;
  v10 = &sFigCDSNodeProtocolID;
LABEL_19:
  if (v17)
    CFRelease(v17);
  v9 = v48;
  if (v24)
    goto LABEL_49;
LABEL_22:
  v26 = v52;
  if (!v52)
  {
LABEL_28:
    Group = ckb_getExistingKeyIfAny((uint64_t)v2, *(_QWORD *)(v3 + 16), v4, v51, &v53, &v54);
    if (!Group)
    {
      v50 = v7;
      if (v53)
      {
        cf[0] = 0;
        v29 = *(_QWORD *)(v53 + 80);
        AllocatorForMedia = FigGetAllocatorForMedia();
        v31 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
        if (v31)
        {
          v31(v29, *MEMORY[0x1E0CA31D0], AllocatorForMedia, cf);
          v32 = cf[0];
          v33 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
          if (cf[0])
            CFRelease(cf[0]);
        }
        else
        {
          v32 = 0;
          v33 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
        }
        if (v32 == v33)
          goto LABEL_38;
        v34 = *(_DWORD *)(v53 + 40);
        if (v34 == 2)
        {
          v35 = v54;
          v36 = *(const void **)(DerivedStorage + 136);
          v37 = FigAtomicIncrement64();
          RequestWithRequestID = ckb_createRequestWithRequestID(v2, (_QWORD *)v3, v35, v46, v45, v36, 0, v37 << 8, (uint64_t *)&v52);
          if (RequestWithRequestID)
          {
            v24 = RequestWithRequestID;
          }
          else
          {
            FigCFDictionarySetBoolean();
            v24 = ckg_ensureContentKeyForRequest((uint64_t)v54, v52);
            if (!v24)
            {
              ckr_addStatusCallbacks((uint64_t)v52, v50, v8, v9);
              ckb_transitionRequestToTerminalStateWithOSStatus(v2, v54, (uint64_t)v52, 0);
            }
          }
          goto LABEL_49;
        }
        if (v34 == 3)
LABEL_38:
          ck_resetState(v53);
      }
      v39 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), v4);
      v54 = v39;
      v40 = *(const void **)(DerivedStorage + 136);
      v41 = FigAtomicIncrement64();
      started = ckb_createRequestWithRequestID(v2, (_QWORD *)v3, v39, v46, v45, v40, 0, v41 << 8, (uint64_t *)&v52);
      if (!started)
      {
        ckr_addStatusCallbacks((uint64_t)v52, v50, v8, v9);
        started = ckb_startRequest(v2, v54, v52);
      }
      v24 = started;
      goto LABEL_49;
    }
LABEL_56:
    v24 = Group;
    goto LABEL_49;
  }
  if (*((_DWORD *)v52 + 14) >= 4u)
  {
    v24 = FigSignalErrorAt();
  }
  else
  {
    ckr_addStatusCallbacks((uint64_t)v52, v7, v8, v9);
    v27 = v52[3];
    if (!*(_BYTE *)(v27 + 65))
    {
      if (!*(_BYTE *)(v3 + 65))
      {
        v24 = 0;
        goto LABEL_49;
      }
      *(_BYTE *)(v27 + 65) = 1;
      if (*((_DWORD *)v10 + 706))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ckb_startRequestTimer((uint64_t)v2, (uint64_t)v54, (uint64_t)v26);
    }
    v24 = 0;
  }
LABEL_49:
  if (v52)
    *(_QWORD *)(a1 + 72) = v52[4];
  if (*((_DWORD *)v10 + 706))
  {
    v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 80) = v24;
}

uint64_t ckb_ensureAndGetGroup(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  char v6;
  const void *v7;
  uint64_t Instance;
  _QWORD *v9;
  CFTypeRef v10;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  CFMutableDictionaryRef v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v15;
  __int128 context[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), a2))
  {
    v5 = CFGetAllocator(a1);
    v6 = *(_BYTE *)(DerivedStorage + 8);
    v7 = *(const void **)(DerivedStorage + 144);
    context[0] = xmmword_1E2F82C58;
    if (ckg_getTypeID_once != -1)
      dispatch_once_f(&ckg_getTypeID_once, context, (dispatch_function_t)ckbutil_registerClass);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v9 = (_QWORD *)Instance;
      *(_BYTE *)(Instance + 64) = v6;
      *(_QWORD *)(Instance + 16) = a2;
      *(_QWORD *)(Instance + 24) = a1;
      if (v7)
        v10 = CFRetain(v7);
      else
        v10 = 0;
      v9[9] = v10;
      Mutable = CFDictionaryCreateMutable(v5, 0, 0, MEMORY[0x1E0C9B3A0]);
      v9[6] = Mutable;
      if (Mutable)
      {
        v12 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v9[5] = v12;
        if (v12)
        {
          v13 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v9[7] = v13;
          if (v13)
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), a2, v9);
            CFRelease(v9);
LABEL_12:
            if (dword_1EE2A2B08)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            return 0;
          }
        }
      }
      v15 = FigSignalErrorAt();
      CFRelease(v9);
    }
    else
    {
      v15 = FigSignalErrorAt();
    }
    if ((_DWORD)v15)
      return v15;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), a2, 0);
    goto LABEL_12;
  }
  return 0;
}

uint64_t ckr_addStatusCallbacks(uint64_t result, __int128 *a2, uint64_t a3, NSObject *a4)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;

  if (!result)
    return FigSignalErrorAt();
  if (a2 && a3 && a4)
  {
    v6 = result;
    v7 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A004085F64837uLL);
    if (v7)
    {
      v8 = v7;
      dispatch_retain(a4);
      *((_QWORD *)v8 + 6) = a4;
      v9 = *a2;
      *((_QWORD *)v8 + 5) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(v8 + 24) = v9;
      result = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *((_QWORD *)v8 + 2) = result;
      v10 = *(_QWORD **)(v6 + 224);
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = v10;
      *v10 = v8;
      *(_QWORD *)(v6 + 224) = v8;
      return result;
    }
    return FigSignalErrorAt();
  }
  return result;
}

void ckb_startRequestTimer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject **v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(*(_QWORD *)(a3 + 24) + 65))
  {
    if (!a2 || (v6 = (NSObject **)DerivedStorage, (v7 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL)) == 0))
    {
      FigSignalErrorAt();
      return;
    }
    v8 = v7;
    *v7 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v8[1] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v8[2] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v9 = *v6;
    if (v9)
    {
      ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a3 + 208));
      if (!ckbutil_createAndStartTimer(20, v8, (void (__cdecl *)(void *))ckb_requestTimerEventHandler, (void (__cdecl *)(void *))ckb_requestTimerFinalizer, v9, (NSObject **)(a3 + 208)))
      {
        if (dword_1EE2A2B08)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    ckb_requestTimerFinalizer((const void **)v8);
  }
}

uint64_t ckb_getExistingKeyIfAny(uint64_t a1, uint64_t a2, const void *a3, int a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v12;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  void *ValueAtIndex;
  uint64_t ContentKey;
  const void *v19;
  uint64_t v20;
  const __CFDictionary **Value;
  const __CFDictionary *v22;
  const void *Identifier;
  const void *v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = 0;
  if (a5 && a6)
  {
    v12 = *(const __CFDictionary **)(DerivedStorage + 104);
    if (a4)
    {
      v13 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
      Count = CFArrayGetCount(v13);
      if (Count < 1)
      {
LABEL_9:
        v20 = 0;
        if (!v13)
          return v20;
      }
      else
      {
        v15 = Count;
        v16 = 0;
        while (1)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v13, v16);
          ContentKey = ckg_getContentKey((uint64_t)ValueAtIndex, a2, &v25);
          if ((_DWORD)ContentKey)
            break;
          v19 = v25;
          if (v25)
            goto LABEL_15;
          if (v15 == ++v16)
            goto LABEL_9;
        }
        v20 = ContentKey;
        if (!v13)
          return v20;
      }
      goto LABEL_16;
    }
    Value = (const __CFDictionary **)CFDictionaryGetValue(v12, a3);
    if (Value)
    {
      ValueAtIndex = Value;
      v22 = Value[5];
      Identifier = (const void *)FigContentKeySpecifierGetIdentifier(a2);
      v19 = CFDictionaryGetValue(v22, Identifier);
      v25 = v19;
      if (!v19)
        return 0;
      v13 = 0;
LABEL_15:
      v20 = 0;
      *a5 = v19;
      *a6 = ValueAtIndex;
      if (!v13)
        return v20;
LABEL_16:
      CFRelease(v13);
      return v20;
    }
  }
  return FigSignalErrorAt();
}

void ck_resetState(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD, CFTypeRef);
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    return;
  }
  if (FigContentKeySpecifierGetKeySystem(*(_QWORD *)(a1 + 16)) != 1)
    goto LABEL_6;
  FigCreateErrorForOSStatus(4294948136, (CFErrorRef *)&cf);
  v2 = cf;
  if (cf)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v4)
      v4(v3, *MEMORY[0x1E0CA31E0], v2);
LABEL_6:
    *(_DWORD *)(a1 + 40) = 0;
    goto LABEL_7;
  }
  FigSignalErrorAt();
LABEL_7:
  if (cf)
    CFRelease(cf);
}

uint64_t ckg_ensureContentKeyForRequest(uint64_t a1, uint64_t *a2)
{
  const __CFDictionary *v4;
  const void *Identifier;
  uint64_t *Value;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  __CFDictionary *v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  __CFString **v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  uint64_t Instance;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  const __CFAllocator *v36;
  CFMutableDictionaryRef v37;
  __CFDictionary *v38;
  __CFString **v39;
  const void *v40;
  uint64_t v41;
  __CFString **v42;
  const __CFAllocator *v43;
  CFDictionaryRef Copy;
  CFDictionaryRef v45;
  uint64_t v46;
  CFAllocatorRef v47;
  uint64_t (*v48)(uint64_t, CFAllocatorRef, uint64_t, __CFDictionary *, uint64_t *);
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t SupportedProtocolVersions;
  uint64_t (*v54)(uint64_t, _QWORD, uint64_t);
  NSObject *v55;
  __CFString *v56;
  CFAllocatorRef v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, const __CFString *, uint64_t);
  __CFDictionary *v62;
  const void *v63;
  CFTypeRef v64;
  NSObject *v65;
  __int128 context[8];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2[8])
      return 0;
    v4 = *(const __CFDictionary **)(a1 + 40);
    Identifier = (const void *)FigContentKeySpecifierGetIdentifier(a2[2]);
    Value = (uint64_t *)CFDictionaryGetValue(v4, Identifier);
    v7 = &sFigCDSNodeProtocolID;
    if (Value)
    {
      v8 = Value;
      CFRetain(Value);
      goto LABEL_94;
    }
    v9 = (uint64_t *)(a1 + 32);
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_24;
    v10 = a2[3];
    v11 = *(unsigned __int8 *)(a1 + 64);
    v12 = *(_DWORD *)(v10 + 28);
    if (FigContentKeySpecifierGetKeySystem(*(_QWORD *)(v10 + 16)) != 1
      && FigContentKeySpecifierGetKeySystem(*(_QWORD *)(v10 + 16)) != 2)
    {
      goto LABEL_24;
    }
    if (*v9)
    {
      v13 = 0;
      goto LABEL_10;
    }
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v22 = FigSignalErrorAt();
      if (!(_DWORD)v22)
        goto LABEL_24;
      return v22;
    }
    v13 = Mutable;
    v17 = (const void *)*MEMORY[0x1E0C9AE40];
    v18 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v12 == 1)
      v19 = (const void *)*MEMORY[0x1E0C9AE40];
    else
      v19 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("ExternalProtectionMonitorPerCryptor"), v19);
    if (v11)
      v20 = v18;
    else
      v20 = v17;
    CFDictionarySetValue(v13, CFSTR("RequiresReencryptionContext"), v20);
    if (FigContentKeySpecifierGetKeySystem(*(_QWORD *)(v10 + 16)) == 1)
    {
      v21 = &kFigCPEProtectionScheme_PKD;
      v7 = &sFigCDSNodeProtocolID;
    }
    else
    {
      v7 = &sFigCDSNodeProtocolID;
      if (FigContentKeySpecifierGetKeySystem(*(_QWORD *)(v10 + 16)) != 2)
      {
        v58 = FigSignalErrorAt();
        goto LABEL_104;
      }
      v21 = &kFigCPEProtectionScheme_BasicAES;
    }
    v56 = *v21;
    v57 = CFGetAllocator((CFTypeRef)a1);
    v58 = FigCPEProtectorCreateForScheme((uint64_t)v57, v56, (uint64_t)v13, a1 + 32);
    if (!(_DWORD)v58)
    {
      if (*(_DWORD *)(v10 + 28) != 1 || (v59 = *(_QWORD *)(v10 + 40)) == 0)
      {
LABEL_10:
        if (!*((_DWORD *)v7 + 706))
          goto LABEL_21;
        goto LABEL_11;
      }
      v60 = *v9;
      v61 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (v61)
      {
        v22 = v61(v60, CFSTR("NeroTransport"), v59);
        if (!(_DWORD)v22 && *((_DWORD *)v7 + 706))
        {
LABEL_11:
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_21:
          if (v13)
          {
            v22 = 0;
            goto LABEL_23;
          }
LABEL_24:
          CFGetAllocator((CFTypeRef)a1);
          v23 = (const void *)a2[3];
          if (!v23)
            goto LABEL_110;
          v24 = (const void *)a2[2];
          v26 = *(_QWORD *)(a1 + 24);
          v25 = *(const void **)(a1 + 32);
          v27 = *(const void **)(a1 + 72);
          context[0] = xmmword_1E2F82D38;
          if (ck_getTypeID_once != -1)
            dispatch_once_f(&ck_getTypeID_once, context, (dispatch_function_t)ckbutil_registerClass);
          Instance = _CFRuntimeCreateInstance();
          if (!Instance)
          {
LABEL_110:
            v22 = FigSignalErrorAt();
LABEL_113:
            if ((_DWORD)v22)
              return v22;
            v22 = FigSignalErrorAt();
            if ((_DWORD)v22)
              return v22;
            v8 = 0;
            v64 = 0;
            if (!a2[8])
              goto LABEL_96;
            goto LABEL_116;
          }
          v8 = (uint64_t *)Instance;
          if (v24)
            v29 = CFRetain(v24);
          else
            v29 = 0;
          v8[2] = (uint64_t)v29;
          v8[3] = (uint64_t)CFRetain(v23);
          if (v25)
            v30 = CFRetain(v25);
          else
            v30 = 0;
          v8[9] = (uint64_t)v30;
          v8[4] = v26;
          if (v27)
            v31 = CFRetain(v27);
          else
            v31 = 0;
          v8[7] = (uint64_t)v31;
          v32 = FigCFWeakReferenceHolderCreateWithReferencedObject();
          v8[12] = v32;
          if (!v32)
          {
            v22 = FigSignalErrorAt();
LABEL_112:
            CFRelease(v8);
            goto LABEL_113;
          }
          v33 = v8 + 10;
          if (v8[10])
          {
LABEL_93:
            v62 = *(__CFDictionary **)(a1 + 40);
            v63 = (const void *)FigContentKeySpecifierGetIdentifier(a2[2]);
            CFDictionarySetValue(v62, v63, v8);
LABEL_94:
            if (!a2[8])
            {
              v64 = CFRetain(v8);
LABEL_96:
              v22 = 0;
              a2[8] = (uint64_t)v64;
              goto LABEL_97;
            }
LABEL_116:
            v22 = FigSignalErrorAt();
            if ((_DWORD)v22)
            {
LABEL_99:
              if (v8)
                CFRelease(v8);
              return v22;
            }
LABEL_97:
            if (*((_DWORD *)v7 + 706))
            {
              v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            goto LABEL_99;
          }
          v34 = v8[3];
          v35 = *(_DWORD *)(v34 + 28);
          if (v35 < 2)
          {
            if (FigContentKeySpecifierGetKeySystem(v8[2]) != 1
              && FigContentKeySpecifierGetKeySystem(v8[2]) != 2)
            {
              goto LABEL_93;
            }
            v36 = (const __CFAllocator *)FigGetAllocatorForMedia();
            v37 = CFDictionaryCreateMutable(v36, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v37)
            {
              v38 = v37;
              if (FigContentKeySpecifierGetKeySystem(v8[2]) != 1)
                goto LABEL_51;
              if (FigContentKeySpecifierGetEncryptionMethod(v8[2]) != 1
                && FigContentKeySpecifierGetEncryptionMethod(v8[2]) != 2
                && FigContentKeySpecifierGetEncryptionMethod(v8[2]) != 3)
              {
                goto LABEL_120;
              }
              if (FigContentKeySpecifierGetEncryptionMethod(v8[2]) == 1
                || FigContentKeySpecifierGetEncryptionMethod(v8[2]) == 3)
              {
                v39 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis;
              }
              else
              {
                if (FigContentKeySpecifierGetEncryptionMethod(v8[2]) != 2)
                {
LABEL_51:
                  v40 = (const void *)v8[7];
                  if (v40)
                    CFDictionarySetValue(v38, CFSTR("AuditToken"), v40);
                  v41 = v8[3];
                  if (*(_BYTE *)(v41 + 24))
                  {
                    CFDictionarySetValue(v38, CFSTR("UsedForLowValueDecryptionKey"), (const void *)*MEMORY[0x1E0C9AE50]);
                    v41 = v8[3];
                  }
                  if (*(_DWORD *)(v41 + 32) == 1)
                    v42 = kFigCPEProtectorCryptorCreationOptionDecryptDestination_Nero;
                  else
                    v42 = kFigCPEProtectorCryptorCreationOptionDecryptDestination_Local;
                  CFDictionarySetValue(v38, CFSTR("Destination"), *v42);
                  v43 = CFGetAllocator(v8);
                  Copy = CFDictionaryCreateCopy(v43, v38);
                  if (Copy)
                  {
                    v45 = Copy;
                    FigCFDictionarySetValue();
                    v46 = v8[9];
                    v47 = CFGetAllocator(v8);
                    v48 = *(uint64_t (**)(uint64_t, CFAllocatorRef, uint64_t, __CFDictionary *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
                    if (!v48)
                    {
                      v22 = 4294954514;
                      goto LABEL_89;
                    }
                    v49 = v48(v46, v47, 1, v38, v8 + 10);
                    if ((_DWORD)v49)
                    {
                      v22 = v49;
LABEL_89:
                      CFRelease(v38);
LABEL_90:
                      if (v45)
                        CFRelease(v45);
                      if (!(_DWORD)v22)
                        goto LABEL_93;
                      goto LABEL_112;
                    }
LABEL_66:
                    if (*v33)
                    {
                      CMNotificationCenterGetDefaultLocalCenter();
                      v51 = FigNotificationCenterAddWeakListener();
                      if ((_DWORD)v51
                        || (CMNotificationCenterGetDefaultLocalCenter(),
                            v51 = FigNotificationCenterAddWeakListener(),
                            (_DWORD)v51))
                      {
                        v22 = v51;
                        goto LABEL_88;
                      }
                    }
                    if (FigContentKeySpecifierGetKeySystem(v8[2]) == 1
                      && FigContentKeySpecifierGetSupportedProtocolVersions(v8[2]))
                    {
                      v52 = v8[10];
                      SupportedProtocolVersions = FigContentKeySpecifierGetSupportedProtocolVersions(v8[2]);
                      v54 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
                      if (!v54)
                      {
                        v22 = 4294954514;
                        goto LABEL_88;
                      }
                      v22 = v54(v52, *MEMORY[0x1E0CA3208], SupportedProtocolVersions);
                      if ((_DWORD)v22 || !*((_DWORD *)v7 + 706))
                      {
LABEL_88:
                        if (!v38)
                          goto LABEL_90;
                        goto LABEL_89;
                      }
                    }
                    else if (!*((_DWORD *)v7 + 706))
                    {
LABEL_87:
                      v22 = 0;
                      goto LABEL_88;
                    }
                    v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    goto LABEL_87;
                  }
LABEL_120:
                  v22 = FigSignalErrorAt();
                  v45 = 0;
                  goto LABEL_89;
                }
                v39 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE;
              }
              CFDictionarySetValue(v38, CFSTR("FormatType"), *v39);
              goto LABEL_51;
            }
            goto LABEL_123;
          }
          if (v35 == 2)
          {
            v50 = *(const void **)(v34 + 48);
            if (!v50)
            {
LABEL_123:
              v22 = FigSignalErrorAt();
              if ((_DWORD)v22)
                goto LABEL_112;
              goto LABEL_93;
            }
            *v33 = v50;
            CFRetain(v50);
          }
          v45 = 0;
          v38 = 0;
          goto LABEL_66;
        }
      }
      else
      {
        v22 = 4294954514;
      }
LABEL_23:
      CFRelease(v13);
      if (!(_DWORD)v22)
        goto LABEL_24;
      return v22;
    }
LABEL_104:
    v22 = v58;
    goto LABEL_23;
  }
  return FigSignalErrorAt();
}

void ckb_transitionRequestToTerminalStateWithOSStatus(const void *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  __CFError *v7;
  CFTypeRef cf;

  cf = 0;
  if ((_DWORD)a4)
  {
    FigCreateErrorForOSStatus(a4, (CFErrorRef *)&cf);
    v7 = (__CFError *)cf;
  }
  else
  {
    v7 = 0;
  }
  ckb_transitionRequestToTerminalState(a1, a2, a3, v7);
  if (cf)
    CFRelease(cf);
}

uint64_t ckb_startRequest(const void *a1, const void *a2, const void *a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v7 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  *v8 = v9;
  if (a2)
    v10 = CFRetain(a2);
  else
    v10 = 0;
  v8[1] = v10;
  if (a3)
    v11 = CFRetain(a3);
  else
    v11 = 0;
  v8[2] = v11;
  dispatch_async_f(*DerivedStorage, v8, (dispatch_function_t)ckb_startRequestDispatch);
  return 0;
}

void ckg_finalize(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v2 = a1[4];
  if (v2)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v3)
      v3(v2);
    v4 = (const void *)a1[4];
    if (v4)
      CFRelease(v4);
  }
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[7];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[9];
  if (v8)
    CFRelease(v8);
}

uint64_t ckg_getRequestByKeySpecifier(uint64_t a1, const void *a2, const void **a3)
{
  if (!a1 || !a3)
    return FigSignalErrorAt();
  *a3 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  return 0;
}

void ckb_requestTimerEventHandler()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  os_log_type_t type;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v0)
    return;
  v1 = (const void *)v0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    FigSignalErrorAt();
    goto LABEL_12;
  }
  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v2)
  {
LABEL_12:
    CFRelease(v1);
    return;
  }
  v3 = (_QWORD *)v2;
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = (const void *)v4;
    if (dword_1EE2A2B08)
    {
      v9 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cf = 0;
    FigCreateErrorForOSStatus(4294948144, (CFErrorRef *)&cf);
    ckb_processErrorForRequest(v1, v3, (uint64_t)v5, cf);
    if (cf)
      CFRelease(cf);
    CFRelease(v1);
    CFRelease(v3);
    CFRelease(v5);
  }
  else
  {
    CFRelease(v1);
    CFRelease(v3);
  }
}

void ckb_requestTimerFinalizer(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  if (v4)
    CFRelease(v4);
  free(a1);
}

uint64_t ckbutil_createAndStartTimer(int a1, void *a2, void (__cdecl *a3)(void *), void (__cdecl *a4)(void *), dispatch_queue_t queue, NSObject **a6)
{
  NSObject *v11;
  NSObject *v12;
  dispatch_time_t v13;
  uint64_t v14;
  dispatch_object_t v16;

  v16 = 0;
  if (a3 && a4 && queue && (v11 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, queue), (v16 = v11) != 0))
  {
    v12 = v11;
    if (a2)
      dispatch_set_context(v11, a2);
    dispatch_source_set_event_handler_f(v12, a3);
    dispatch_set_finalizer_f(v12, a4);
    v13 = dispatch_time(0x8000000000000000, 1000000000 * a1);
    dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
    dispatch_resume(v12);
    v14 = 0;
    *a6 = v12;
  }
  else
  {
    v14 = FigSignalErrorAt();
    if ((_DWORD)v14)
      ckbutil_cancelAndReleaseTimer(&v16);
  }
  return v14;
}

void ckbutil_cancelAndReleaseTimer(dispatch_object_t *a1)
{
  NSObject *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      dispatch_source_cancel(v2);
      if (*a1)
      {
        dispatch_release(*a1);
        *a1 = 0;
      }
    }
  }
}

void ckb_processErrorForRequest(const void *a1, _QWORD *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    v9 = DerivedStorage;
    if (dword_1EE2A2B08)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a4)
    {
      v11 = *(_QWORD *)(a3 + 80);
      switch(v11)
      {
        case 8:
          *(_QWORD *)(a3 + 200) = CFRetain(a4);
          break;
        case 4:
          *(_QWORD *)(a3 + 184) = CFRetain(a4);
          v12 = *(_QWORD *)(a3 + 128);
          if (v12)
          {
            v13 = *(_QWORD *)(a3 + 88);
            if (v13)
            {
              v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
              if (v14)
                v14(v12, v13);
            }
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v9 + 120), *(const void **)(a3 + 88));
          break;
        case 2:
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v9 + 128), (const void *)*(int *)(a3 + 104));
          *(_QWORD *)(a3 + 192) = CFRetain(a4);
          break;
      }
    }
    ckb_processRequestViaNextHandler(a1, a2, a3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void ckb_processRequestViaNextHandler(const void *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;
  const __CFString *Identifier;
  const __CFURL *v11;
  const __CFURL *v12;
  uint64_t v13;
  uint64_t v14;
  const void *Value;
  const __CFAllocator *v16;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t);
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, __CFString *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  const __CFAllocator *v27;
  const __CFString *v28;
  void *v29;
  uint64_t v30;
  CFAllocatorRef v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, CFAllocatorRef, _QWORD, void *, _QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, _QWORD, void (*)(const void *, int, uint64_t, const void *, uint64_t, uint64_t, int, int), uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v38;
  const __CFDictionary *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  __CFArray *v43;
  const __CFAllocator *v44;
  const __CFString *v45;
  CFURLRef v46;
  CFURLRef v47;
  uint64_t Mutable;
  const __CFAllocator *v49;
  __CFArray *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  NSObject *v55;
  _QWORD *v56;
  _QWORD *v57;
  CFTypeRef v58;
  const void *v59;
  void *v60;
  __CFArray *v61;
  CFTypeRef v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, os_log_type_t *);
  uint64_t v68;
  const void *v69;
  uint64_t v70;
  NSObject *v71;
  __int128 v72;
  NSObject *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  CFURLRef v77;
  os_log_type_t type[8];
  CFTypeRef v79;
  int v80;
  const char *v81;
  __int16 v82;
  const void *v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  CFTypeRef cf[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3)
  {
    FigSignalErrorAt();
    return;
  }
  v6 = *(_QWORD *)(a3 + 80);
  v7 = &sFigCDSNodeProtocolID;
  if (v6 == 1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Identifier = (const __CFString *)FigContentKeySpecifierGetIdentifier(*(_QWORD *)(a3 + 16));
    v11 = CFURLCreateWithString(AllocatorForMedia, Identifier, 0);
    if (!v11)
    {
      FigSignalErrorAt();
LABEL_46:
      v6 = *(_QWORD *)(a3 + 80);
      goto LABEL_47;
    }
    v12 = v11;
    if (FigCFHTTPIsHTTPBasedURL(v11) && (*(_BYTE *)(DerivedStorage + 16) & 2) != 0)
    {
      v13 = *(_QWORD *)DerivedStorage;
      if (*(_QWORD *)DerivedStorage)
      {
        v14 = *(_QWORD *)(a3 + 152);
        if (v14 && *(_QWORD *)(a3 + 128) || !*(_QWORD *)(a3 + 136))
          goto LABEL_26;
        Value = *(const void **)(a3 + 144);
        if (!Value)
        {
          Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 136), CFSTR("FHRP_StorageSession"));
          if (Value)
            Value = CFRetain(Value);
          *(_QWORD *)(a3 + 144) = Value;
          v14 = *(_QWORD *)(a3 + 152);
        }
        if (v14 || !Value)
          goto LABEL_26;
        v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
        MutableCopy = CFDictionaryCreateMutableCopy(v16, 0, *(CFDictionaryRef *)(a3 + 136));
        if (MutableCopy)
        {
          v18 = MutableCopy;
          FigCFDictionarySetInt16();
          v19 = *(_QWORD *)(a3 + 144);
          v20 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 40);
          if (v20)
          {
            v21 = v20(v19, v13, v18, a3 + 152);
            if (v21)
            {
LABEL_23:
              LODWORD(v22) = v21;
              goto LABEL_25;
            }
            v22 = *(_QWORD *)(a3 + 168);
            if (!v22)
              goto LABEL_25;
            v23 = *(_QWORD *)(a3 + 152);
            v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
            if (v24)
            {
              v21 = v24(v23, CFSTR("FHRSP_CMCDHeaderVendor"), v22);
              goto LABEL_23;
            }
          }
          LODWORD(v22) = -12782;
LABEL_25:
          CFRelease(v18);
          if (!(_DWORD)v22)
            goto LABEL_26;
          goto LABEL_45;
        }
      }
      if (FigSignalErrorAt())
      {
LABEL_45:
        CFRelease(v12);
        goto LABEL_46;
      }
    }
LABEL_26:
    v25 = *(_QWORD *)(a3 + 152);
    CFRelease(v12);
    if (v25)
    {
      *(_QWORD *)(a3 + 80) = 2;
      v26 = CMBaseObjectGetDerivedStorage();
      v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v28 = (const __CFString *)FigContentKeySpecifierGetIdentifier(*(_QWORD *)(a3 + 16));
      v29 = CFURLCreateWithString(v27, v28, 0);
      if (v29)
      {
        v30 = *(_QWORD *)(a3 + 152);
        v31 = CFGetAllocator((CFTypeRef)a3);
        v32 = *(_QWORD *)(a3 + 160);
        v33 = *(_QWORD *)(a3 + 136);
        v34 = *(_QWORD *)(v26 + 168);
        v35 = *(uint64_t (**)(uint64_t, CFAllocatorRef, _QWORD, void *, _QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, _QWORD, void (*)(const void *, int, uint64_t, const void *, uint64_t, uint64_t, int, int), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v35)
        {
          v90 = 0u;
          v91 = 0u;
          *(_OWORD *)cf = 0u;
          v89 = 0u;
          v92 = 0x800000000;
          v93 = 0u;
          v94 = 0u;
          v95 = 0;
          v36 = v35(v30, v31, 0, v29, 0, v32, v33, 1, cf, 0, 0, 0, ckb_httpReadCallback, v34, a3 + 96, a3 + 104);
          if (!(_DWORD)v36)
          {
            CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v26 + 128), (const void *)*(int *)(a3 + 104), *(const void **)(a3 + 32));
            ckb_startRequestTimer(a1, a2, a3);
          }
        }
        else
        {
          v36 = 4294954514;
        }
        v7 = &sFigCDSNodeProtocolID;
      }
      else
      {
        v36 = FigSignalErrorAt();
      }
      if (dword_1EE2A2B08)
      {
        LODWORD(v79) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!(_DWORD)v36)
      {
LABEL_39:
        if (!v29)
          goto LABEL_116;
        goto LABEL_114;
      }
      cf[0] = 0;
      v38 = v36;
LABEL_37:
      FigCreateErrorForOSStatus(v38, (CFErrorRef *)cf);
      ckb_processErrorForRequest(a1, a2, a3, cf[0]);
      if (cf[0])
        CFRelease(cf[0]);
      goto LABEL_39;
    }
    goto LABEL_46;
  }
LABEL_47:
  if (v6 <= 3)
  {
    if ((*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 16) & 4) != 0 && ckr_canRecoverError(a3))
    {
      v39 = *(const __CFDictionary **)(a3 + 136);
      if (v39)
      {
        if (!*(_QWORD *)(a3 + 128))
        {
          v40 = CFDictionaryGetValue(v39, CFSTR("FHRP_CustomURLLoader"));
          if (v40)
            v40 = CFRetain(v40);
          *(_QWORD *)(a3 + 128) = v40;
        }
      }
    }
    if (*(_QWORD *)(a3 + 128))
    {
      *(_QWORD *)(a3 + 80) = 4;
      v41 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)type = 0;
      v79 = 0;
      v42 = ckg_ensureContentKeyForRequest((uint64_t)a2, (uint64_t *)a3);
      if (!(_DWORD)v42)
      {
        v43 = *(__CFArray **)(a3 + 64);
        if (!v43)
        {
          v70 = FigSignalErrorAt();
          v77 = 0;
LABEL_130:
          v62 = 0;
          goto LABEL_97;
        }
        v44 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v45 = (const __CFString *)FigContentKeySpecifierGetIdentifier(*(_QWORD *)(a3 + 16));
        v46 = CFURLCreateWithString(v44, v45, 0);
        if (v46)
        {
          v47 = v46;
          FigGetAllocatorForMedia();
          v77 = v47;
          Mutable = FigCustomURLRequestInfoCreateMutable();
          if (!(_DWORD)Mutable)
          {
            Mutable = FigCustomURLRequestInfoSetCryptor();
            if (!(_DWORD)Mutable)
            {
              Mutable = FigCustomURLRequestInfoSetIsRenewalRequest();
              if (!(_DWORD)Mutable)
              {
                if (FigContentKeySpecifierGetKeySystem(*(_QWORD *)(a3 + 16)) == 1)
                {
                  v49 = (const __CFAllocator *)FigGetAllocatorForMedia();
                  v50 = CFArrayCreateMutable(v49, 0, MEMORY[0x1E0C9B378]);
                  v43 = v50;
                  if (!v50)
                  {
                    v51 = FigSignalErrorAt();
LABEL_132:
                    v70 = v51;
                    goto LABEL_130;
                  }
                  CFArrayAppendValue(v50, CFSTR("com.apple.streamingkeydelivery.contentkey"));
                  if (*(_BYTE *)(*(_QWORD *)(a3 + 24) + 64))
                    CFArrayAppendValue(v43, CFSTR("com.apple.streamingkeydelivery.persistentcontentkey"));
                  v51 = FigCustomURLRequestInfoSetAllowedUniversalTypeIdentifiers();
                  if ((_DWORD)v51)
                    goto LABEL_132;
                }
                else
                {
                  v43 = 0;
                }
                v62 = FigCFHTTPCreateUserAgent();
                v63 = FigCustomURLRequestInfoSetUserAgent();
                if ((_DWORD)v63
                  || *(_DWORD *)(*(_QWORD *)(a3 + 24) + 28) == 2
                  && (v63 = FigCustomURLRequestInfoSetCryptorKeyRequestID(), (_DWORD)v63))
                {
                  v70 = v63;
                }
                else
                {
                  v64 = *(_QWORD *)(a3 + 128);
                  v65 = *(_QWORD *)(v41 + 168);
                  v66 = *(_QWORD *)v41;
                  v67 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                  if (v67)
                  {
                    v68 = v67(v64, v79, v65, v66, ckb_customURLReadCallback, type);
                    if (!(_DWORD)v68)
                    {
                      v69 = *(const void **)type;
                      v7 = &sFigCDSNodeProtocolID;
                      if (*(_QWORD *)type)
                      {
                        *(_QWORD *)(a3 + 88) = *(_QWORD *)type;
                        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v41 + 120), v69, *(const void **)(a3 + 32));
                      }
                      ckb_startRequestTimer(a1, a2, a3);
                      v70 = 0;
                      goto LABEL_97;
                    }
                    v70 = v68;
                  }
                  else
                  {
                    v70 = 4294954514;
                  }
                  v7 = &sFigCDSNodeProtocolID;
                }
LABEL_97:
                if (*((_DWORD *)v7 + 706))
                {
                  v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if ((_DWORD)v70)
                {
                  cf[0] = 0;
                  FigCreateErrorForOSStatus(v70, (CFErrorRef *)cf);
                  ckb_processErrorForRequest(a1, a2, a3, cf[0]);
                  if (cf[0])
                    CFRelease(cf[0]);
                }
                if (v77)
                  CFRelease(v77);
                if (v62)
                  CFRelease(v62);
                if (v79)
                  CFRelease(v79);
                if (!v43)
                  goto LABEL_116;
                v61 = v43;
                goto LABEL_115;
              }
            }
          }
          v70 = Mutable;
          goto LABEL_129;
        }
        v42 = FigSignalErrorAt();
      }
      v70 = v42;
      v77 = 0;
LABEL_129:
      v43 = 0;
      goto LABEL_130;
    }
    v6 = *(_QWORD *)(a3 + 80);
  }
  if (v6 > 7
    || (v52 = CMBaseObjectGetDerivedStorage(), (*(_BYTE *)(v52 + 16) & 8) == 0)
    || !*(_QWORD *)(v52 + 24)
    || (!*(_BYTE *)(a3 + 72) || !*(_QWORD *)(v52 + 48)) && !*(_QWORD *)(v52 + 40))
  {
    cf[0] = 0;
    v59 = *(const void **)(a3 + 200);
    if (v59 || (v59 = *(const void **)(a3 + 184)) != 0 || (v59 = *(const void **)(a3 + 192)) != 0)
    {
      v60 = (void *)CFRetain(v59);
      cf[0] = v60;
    }
    else
    {
      FigCreateErrorForOSStatus(4294948138, (CFErrorRef *)cf);
      v60 = (void *)cf[0];
    }
    ckb_transitionRequestToTerminalState(a1, a2, a3, (__CFError *)v60);
    v61 = (__CFArray *)cf[0];
    if (!cf[0])
      goto LABEL_116;
    goto LABEL_115;
  }
  *(_QWORD *)(a3 + 80) = 8;
  v53 = CMBaseObjectGetDerivedStorage();
  v29 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v29)
  {
    v54 = *(_OWORD *)(v53 + 48);
    *(_OWORD *)cf = *(_OWORD *)(v53 + 32);
    v89 = v54;
    v90 = *(_OWORD *)(v53 + 64);
    v55 = *(NSObject **)(v53 + 88);
    *(_QWORD *)&v91 = *(_QWORD *)(v53 + 80);
    if (v55)
    {
      v56 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E0040B2B8F0E5uLL);
      if (v56)
      {
        v57 = v56;
        if (a1)
          v58 = CFRetain(a1);
        else
          v58 = 0;
        *v57 = v58;
        v57[13] = CFRetain(v29);
        v72 = v89;
        *((_OWORD *)v57 + 2) = *(_OWORD *)cf;
        *((_OWORD *)v57 + 3) = v72;
        *((_OWORD *)v57 + 4) = v90;
        v57[10] = v91;
        v57[12] = CFRetain((CFTypeRef)a3);
        v57[11] = CFRetain(a2);
        dispatch_async_f(v55, v57, (dispatch_function_t)ckb_sendKeyRequestCallbackOnQueue);
        goto LABEL_113;
      }
    }
    v38 = FigSignalErrorAt();
    if (!(_DWORD)v38)
    {
LABEL_113:
      ckb_startRequestTimer(a1, a2, a3);
LABEL_114:
      v61 = (__CFArray *)v29;
LABEL_115:
      CFRelease(v61);
      goto LABEL_116;
    }
LABEL_136:
    cf[0] = 0;
    goto LABEL_37;
  }
  v38 = FigSignalErrorAt();
  if ((_DWORD)v38)
    goto LABEL_136;
LABEL_116:
  if (*((_DWORD *)v7 + 706))
  {
    LODWORD(v79) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v74 = v79;
    if (os_log_type_enabled(v73, type[0]))
      v75 = v74;
    else
      v75 = v74 & 0xFFFFFFFE;
    if (v75)
    {
      v76 = *(_QWORD *)(a3 + 80);
      v80 = 136315906;
      v81 = "ckb_processRequestViaNextHandler";
      v82 = 2048;
      v83 = a1;
      v84 = 2112;
      v85 = a3;
      v86 = 2048;
      v87 = v76;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void ckb_transitionRequestToTerminalState(const void *a1, _QWORD *a2, uint64_t a3, __CFError *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  __CFDictionary *v11;
  const void *Identifier;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  const void *MutableCopy;
  NSObject *v20;
  int v21;
  const void *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  const void *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  __int128 v32;
  CFTypeRef v33;
  _QWORD *v34;
  const void *v35;
  NSObject *v36;
  __int128 v37;
  _BYTE cf[120];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
  {
    FigSignalErrorAt();
    return;
  }
  if (*(_DWORD *)(a3 + 56) <= 2u)
  {
    v9 = DerivedStorage;
    if (!ckg_ensureContentKeyForRequest((uint64_t)a2, (uint64_t *)a3))
    {
      v10 = *(_QWORD *)(a3 + 64);
      if (*(_DWORD *)(*(_QWORD *)(v10 + 24) + 28) == 2)
      {
        v11 = (__CFDictionary *)a2[5];
        Identifier = (const void *)FigContentKeySpecifierGetIdentifier(*(_QWORD *)(v10 + 16));
        CFDictionaryRemoveValue(v11, Identifier);
      }
      if (a4)
      {
        CFErrorGetDomain(a4);
        if (FigCFEqual())
          CFErrorGetCode(a4);
      }
      if (dword_1EE2A2B08)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a4)
      {
        *(_QWORD *)(a3 + 176) = CFRetain(a4);
        v14 = 3;
        v15 = 3;
      }
      else
      {
        v15 = 4;
        v14 = 2;
      }
      *(_DWORD *)(v10 + 40) = v14;
      *(_DWORD *)(a3 + 56) = v15;
      ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a3 + 208));
      v16 = CMBaseObjectGetDerivedStorage();
      if (a1)
      {
        v17 = v16;
        if (*(_QWORD *)(v16 + 24))
        {
          v18 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
          v37 = *(_OWORD *)(v17 + 64);
          FigGetAllocatorForMedia();
          MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
          v20 = *(NSObject **)(v17 + 88);
          *(_QWORD *)cf = 1;
          *(_OWORD *)&cf[8] = v37;
          v21 = ckb_sendStatusCallbackDispatch(a1, v18, (uint64_t)cf, v20, (const void *)a3, MutableCopy);
          if (!v21 && v18)
          {
            CFRelease(v18);
            v18 = 0;
          }
          if (MutableCopy)
            CFRelease(MutableCopy);
          if (v18)
            CFRelease(v18);
          if (v21)
            return;
        }
      }
      else if (FigSignalErrorAt())
      {
        return;
      }
      if (*(_BYTE *)(v9 + 9) && *(_QWORD *)(a3 + 176) && ckr_canRecoverError(a3) && !*(_BYTE *)(a3 + 32))
      {
        if (dword_1EE2A2B08)
        {
          v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        ck_resetState(v10);
        ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a3 + 208));
        CFRetain((CFTypeRef)a3);
        if (!ckb_removeRequestReferences((uint64_t)a1, (uint64_t)a2, a3))
        {
          v29 = CMBaseObjectGetDerivedStorage();
          *(_QWORD *)cf = 0;
          if (ckb_createRequestWithRequestID(a1, *(_QWORD **)(a3 + 24), a2, *(const void **)(a3 + 136), *(const void **)(a3 + 160), *(const void **)(v29 + 136), *(_BYTE *)(a3 + 72), (*(_QWORD *)(a3 + 32) + 1) | *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFF00, (uint64_t *)cf))
          {
            if (*(_QWORD *)cf)
              CFRelease(*(CFTypeRef *)cf);
          }
          else
          {
            v30 = *(uint64_t **)(a3 + 216);
            if (v30)
            {
              do
              {
                v31 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A004085F64837uLL);
                dispatch_retain((dispatch_object_t)v30[6]);
                *((_QWORD *)v31 + 6) = v30[6];
                v32 = *(_OWORD *)(v30 + 3);
                *((_QWORD *)v31 + 5) = v30[5];
                *(_OWORD *)(v31 + 24) = v32;
                v33 = (CFTypeRef)v30[2];
                if (v33)
                  v33 = CFRetain(v33);
                *((_QWORD *)v31 + 2) = v33;
                *(_QWORD *)v31 = 0;
                v34 = *(_QWORD **)(*(_QWORD *)cf + 224);
                *((_QWORD *)v31 + 1) = v34;
                *v34 = v31;
                v35 = *(const void **)cf;
                *(_QWORD *)(*(_QWORD *)cf + 224) = v31;
                v30 = (uint64_t *)*v30;
              }
              while (v30);
            }
            else
            {
              v35 = *(const void **)cf;
            }
            if (!ckb_startRequest(a1, a2, v35) && dword_1EE2A2B08)
            {
              v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
        CFRelease((CFTypeRef)a3);
      }
      else if (a1)
      {
        FigGetAllocatorForMedia();
        v22 = (const void *)FigCFDictionaryCreateMutableCopy();
        v23 = *(uint64_t **)(a3 + 216);
        if (v23)
        {
          v24 = 1;
          do
          {
            v25 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v25)
            {
              v26 = (const void *)v25;
              if (!v24)
                FigCFDictionarySetBoolean();
              *(_OWORD *)cf = *(_OWORD *)(v23 + 3);
              v27 = v23[6];
              *(_QWORD *)&cf[16] = v23[5];
              v24 = ckb_sendStatusCallbackDispatch(a1, v26, (uint64_t)cf, v27, (const void *)a3, v22);
              if (v24)
                goto LABEL_39;
              CFRelease(v26);
            }
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        v24 = 0;
        v26 = 0;
LABEL_39:
        if (v22)
          CFRelease(v22);
        if (v26)
          CFRelease(v26);
        if (!v24)
          goto LABEL_44;
      }
      else if (!FigSignalErrorAt())
      {
LABEL_44:
        ckb_removeRequestReferences((uint64_t)a1, (uint64_t)a2, a3);
      }
    }
  }
}

void ckb_httpReadCallback(const void *a1, int a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD *v16;
  _QWORD *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef cf;

  cf = 0;
  if (!ckb_copyBossFromRetainProxy(a3, &cf))
  {
    DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    v16 = malloc_type_calloc(1uLL, 0x38uLL, 0x1020040719A67F2uLL);
    if (v16)
    {
      v17 = v16;
      v18 = cf;
      if (cf)
        v18 = CFRetain(cf);
      *v17 = v18;
      if (a1)
        v19 = CFRetain(a1);
      else
        v19 = 0;
      v17[1] = v19;
      *((_DWORD *)v17 + 4) = a2;
      if (a4)
        v20 = CFRetain(a4);
      else
        v20 = 0;
      v17[3] = v20;
      v17[4] = a5;
      v17[5] = a6;
      *((_DWORD *)v17 + 12) = a7;
      *((_DWORD *)v17 + 13) = a8;
      dispatch_async_f(*DerivedStorage, v17, (dispatch_function_t)ckb_httpReadCallbackDispatch);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  if (cf)
    CFRelease(cf);
}

uint64_t ckb_copyBossFromRetainProxy(uint64_t a1, _QWORD *a2)
{
  const void *Owner;
  uint64_t v4;

  if (a1 && a2 && (FigRetainProxyLockMutex(), !FigRetainProxyIsInvalidated()))
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner)
      Owner = CFRetain(Owner);
    v4 = 0;
    *a2 = Owner;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  FigRetainProxyUnlockMutex();
  return v4;
}

void ckb_httpReadCallbackDispatch(uint64_t a1)
{
  CFTypeRef v2;
  int v3;
  OpaqueCMBlockBuffer *v4;
  size_t v5;
  size_t v6;
  unsigned int v7;
  int v8;
  uint64_t DerivedStorage;
  int v10;
  const void *Value;
  uint64_t Empty;
  _QWORD *v13;
  OpaqueCMBlockBuffer *v14;
  const __CFAllocator *AllocatorForMedia;
  uint64_t appended;
  uint64_t v17;
  _DWORD *v18;
  const void *v19;
  size_t v20;
  CFTypeRef v21;
  const __CFAllocator *v22;
  OpaqueCMBlockBuffer *v23;
  const __CFAllocator *v24;
  size_t DataLength;
  CFAllocatorRef v26;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v28;
  unsigned int v29;
  CFTypeRef v30;
  const void *v32;
  const void *v33;
  int v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef cf;
  _BYTE blockBufferOut[12];
  __int16 v39;
  CFTypeRef v40;
  __int16 v41;
  CFTypeRef v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  OpaqueCMBlockBuffer *v48;
  __int16 v49;
  size_t v50;
  __int16 v51;
  size_t v52;
  __int16 v53;
  int v54;
  CFTypeRef v55[18];

  v55[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = *(CFTypeRef *)a1;
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(OpaqueCMBlockBuffer **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 52);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v35 = 0;
  v36 = 0;
  v10 = (v7 >> 1) & 1;
  v34 = v3;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 128), (const void *)v3);
  if (!Value)
    goto LABEL_58;
  Empty = ckb_copyGroupAndRequestFromID((uint64_t)v2, Value, &v36, &v35);
  if ((_DWORD)Empty)
    goto LABEL_59;
  Empty = ckg_ensureContentKeyForRequest((uint64_t)v36, (uint64_t *)v35);
  if ((_DWORD)Empty)
    goto LABEL_59;
  v13 = v35;
  if (!v35)
  {
    v17 = FigSignalErrorAt();
    if ((_DWORD)v17)
      goto LABEL_30;
    goto LABEL_58;
  }
  if (!*((_QWORD *)v35 + 8) || v8)
  {
LABEL_58:
    Empty = FigSignalErrorAt();
    goto LABEL_59;
  }
  if (!v4)
  {
    if (!v10)
    {
LABEL_29:
      v17 = 0;
      goto LABEL_30;
    }
    goto LABEL_15;
  }
  v14 = (OpaqueCMBlockBuffer *)*((_QWORD *)v35 + 14);
  if (!v14)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Empty = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)v35 + 14);
    if ((_DWORD)Empty)
    {
LABEL_59:
      v17 = Empty;
      goto LABEL_30;
    }
    v14 = (OpaqueCMBlockBuffer *)*((_QWORD *)v35 + 14);
  }
  appended = CMBlockBufferAppendBufferReference(v14, v4, v5, v6, 0);
  v17 = appended;
  if (v10 && !(_DWORD)appended)
  {
    v13 = v35;
LABEL_15:
    if (v13[14])
    {
      FigCFDictionarySetValue();
      v18 = v35;
      v19 = (const void *)*((_QWORD *)v35 + 12);
      v20 = v6;
      if (v19)
      {
        CFRelease(v19);
        v18 = v35;
        *((_QWORD *)v35 + 12) = 0;
      }
      v18[26] = 0;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 128), 0);
      v21 = v35;
      v55[0] = 0;
      cf = 0;
      *(_QWORD *)blockBufferOut = 0;
      if (v35)
      {
        v22 = CFGetAllocator(v2);
        v23 = (OpaqueCMBlockBuffer *)*((_QWORD *)v21 + 14);
        v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
        DataLength = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)v21 + 14));
        if (!CMBlockBufferCreateContiguous(v22, v23, v24, 0, 0, DataLength, 0, (CMBlockBufferRef *)blockBufferOut))
        {
          CFGetAllocator(v2);
          CMBlockBufferGetDataLength(*(CMBlockBufferRef *)blockBufferOut);
          if (!FigCreateCFDataWithBlockBufferNoCopy())
          {
            v26 = CFGetAllocator(v2);
            if (!FigContentKeyResponseParamsCreate((uint64_t)v26, 1, 0, 0, cf, v55))
              ckb_processResponse(v2, *((const void **)v21 + 4), (uint64_t)v55[0]);
          }
        }
        if (cf)
          CFRelease(cf);
      }
      else
      {
        FigSignalErrorAt();
      }
      v6 = v20;
      if (v55[0])
        CFRelease(v55[0]);
      if (*(_QWORD *)blockBufferOut)
        CFRelease(*(CFTypeRef *)blockBufferOut);
      goto LABEL_29;
    }
    goto LABEL_58;
  }
LABEL_30:
  if (dword_1EE2A2B08)
  {
    LODWORD(cf) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v28 = cf;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v29 = v28;
    else
      v29 = v28 & 0xFFFFFFFE;
    if (v29)
    {
      *(_DWORD *)blockBufferOut = 136317186;
      *(_QWORD *)&blockBufferOut[4] = "ckb_httpReadCallbackGuts";
      v39 = 2048;
      v40 = v2;
      v41 = 2112;
      v42 = v35;
      v43 = 1024;
      v44 = v34;
      v45 = 1024;
      v46 = v10;
      v47 = 2048;
      v48 = v4;
      v49 = 2048;
      v50 = v5;
      v51 = 2048;
      v52 = v6;
      v53 = 1024;
      v54 = v17;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v30 = v35;
  if (v2)
  {
    if ((_DWORD)v17 && v35 != 0)
    {
      v55[0] = 0;
      FigCreateErrorForOSStatus(v17, (CFErrorRef *)v55);
      ckb_processErrorForRequest(v2, v36, v35, v55[0]);
      if (v55[0])
        CFRelease(v55[0]);
      v30 = v35;
    }
  }
  if (v30)
    CFRelease(v30);
  if (v36)
    CFRelease(v36);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v32 = *(const void **)(a1 + 8);
  if (v32)
    CFRelease(v32);
  v33 = *(const void **)(a1 + 24);
  if (v33)
    CFRelease(v33);
  free((void *)a1);
}

uint64_t ckb_copyGroupAndRequestFromID(uint64_t a1, const void *a2, CFTypeRef *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFDictionaryRef *Value;
  CFDictionaryRef *v9;
  const void *v10;
  CFTypeRef v11;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = (CFDictionaryRef *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), a2);
  if (!Value)
    return FigSignalErrorAt();
  v9 = Value;
  v10 = CFDictionaryGetValue(Value[6], a2);
  if (v10 || (result = FigSignalErrorAt(), !(_DWORD)result))
  {
    if (a3)
      *a3 = CFRetain(v9);
    if (a4)
    {
      if (v10)
        v11 = CFRetain(v10);
      else
        v11 = 0;
      result = 0;
      *a4 = v11;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ckb_processResponse(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  CFAbsoluteTime Current;
  uint64_t v10;
  CFTypeRef v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v14;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v14 = 0;
  cf[0] = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    goto LABEL_26;
  v6 = ckb_copyGroupAndRequestFromID((uint64_t)a1, a2, &v14, cf);
  if (!(_DWORD)v6)
  {
    if (*((_DWORD *)cf[0] + 14) >= 3u)
    {
LABEL_26:
      v6 = FigSignalErrorAt();
      goto LABEL_27;
    }
    if (FigContentKeySpecifierGetKeySystem(*((_QWORD *)cf[0] + 2)) == 1)
    {
      v7 = (uint64_t *)cf[0];
      if (*(_DWORD *)(a3 + 16) == 1 && *((_DWORD *)cf[0] + 14) != 1)
        goto LABEL_26;
    }
    else
    {
      v7 = (uint64_t *)cf[0];
    }
    v6 = ckg_ensureContentKeyForRequest((uint64_t)v14, v7);
    if (!(_DWORD)v6)
    {
      if (cf[0])
      {
        v8 = *((_QWORD *)cf[0] + 8);
        if (v8)
        {
          v6 = ck_processResponse(*((uint64_t **)cf[0] + 8), a3);
          if (!(_DWORD)v6)
          {
            if (*(_DWORD *)(*(_QWORD *)(v8 + 24) + 28) != 2)
              ckb_startRenewalTimer((uint64_t)a1, v8, (uint64_t)cf[0]);
            Current = CFAbsoluteTimeGetCurrent();
            v10 = 0;
            v11 = cf[0];
            *((CFAbsoluteTime *)cf[0] + 30) = Current;
            goto LABEL_16;
          }
          goto LABEL_27;
        }
      }
      else
      {
        v10 = FigSignalErrorAt();
        if ((_DWORD)v10)
          goto LABEL_28;
      }
      goto LABEL_26;
    }
  }
LABEL_27:
  v10 = v6;
LABEL_28:
  v11 = cf[0];
  if (cf[0])
LABEL_16:
    ckb_transitionRequestToTerminalStateWithOSStatus(a1, v14, (uint64_t)v11, v10);
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0])
    CFRelease(cf[0]);
  if (v14)
    CFRelease(v14);
  return v10;
}

uint64_t ck_processResponse(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t);
  uint64_t v17;
  uint64_t v18;
  const void *v20;
  const void *v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t (*v31)(uint64_t, uint64_t, __CFDictionary *);

  if (!a1 || !a2 || !*(_QWORD *)(a2 + 40))
    return FigSignalErrorAt();
  if (FigContentKeySpecifierGetKeySystem(a1[2]) == 1)
  {
    v4 = *(_DWORD *)(a2 + 16);
    if (v4 == 1)
    {
      v23 = (const void *)a1[6];
      v24 = *(const void **)(a2 + 24);
      a1[6] = (uint64_t)v24;
      if (v24)
        CFRetain(v24);
      if (v23)
        CFRelease(v23);
      if (*(_DWORD *)(a1[3] + 28) == 2 && *(_QWORD *)(a2 + 24))
      {
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
          return FigSignalErrorAt();
        v27 = Mutable;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4D70], *(const void **)(a2 + 24));
      }
      else
      {
        v27 = 0;
      }
      v28 = a1[10];
      v29 = *(_QWORD *)(a2 + 40);
      v30 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v30 >= 4uLL && (v31 = (uint64_t (*)(uint64_t, uint64_t, __CFDictionary *))v30[12]) != 0)
        v22 = v31(v28, v29, v27);
      else
        v22 = 4294954514;
      if (v27)
        CFRelease(v27);
      return v22;
    }
    if (v4 == 2)
    {
      v5 = a1[10];
      v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v6)
      {
        v7 = v6(v5, *MEMORY[0x1E0CA3238], *MEMORY[0x1E0C9AE50]);
        if (!(_DWORD)v7)
        {
          v8 = a1[10];
          v9 = *(_QWORD *)(a2 + 40);
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v10)
          {
            v11 = *MEMORY[0x1E0CA31F0];
            v12 = v8;
            v13 = v9;
            return v10(v12, v11, v13);
          }
          return 4294954514;
        }
        return v7;
      }
      return 4294954514;
    }
    return FigSignalErrorAt();
  }
  if (FigContentKeySpecifierGetKeySystem(a1[2]) == 2)
  {
    v14 = a1[10];
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v16)
      return 4294954514;
    v7 = v16(v14, *MEMORY[0x1E0CA31D8], v15);
    if ((_DWORD)v7)
      return v7;
    v17 = *(_QWORD *)(a2 + 32);
    if (v17)
    {
      v18 = a1[10];
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v10)
      {
        v11 = *MEMORY[0x1E0CA31C8];
        v12 = v18;
        v13 = v17;
        return v10(v12, v11, v13);
      }
      return 4294954514;
    }
  }
  else
  {
    if (FigContentKeySpecifierGetKeySystem(a1[2]) != 3)
      return FigSignalErrorAt();
    v20 = (const void *)a1[8];
    v21 = *(const void **)(a2 + 40);
    a1[8] = (uint64_t)v21;
    if (v21)
      CFRetain(v21);
    if (v20)
      CFRelease(v20);
  }
  return 0;
}

void ckb_startRenewalTimer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject **DerivedStorage;
  const void **v6;
  const void **v7;
  CFTypeRef v8;
  CFTypeRef v9;
  NSObject *v10;
  double v11;
  double v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176)
    || !a2
    || (v6 = (const void **)malloc_type_calloc(1uLL, 0x20uLL, 0x60040FFD3A10EuLL)) == 0)
  {
    FigSignalErrorAt();
    return;
  }
  v7 = v6;
  *v6 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  v7[1] = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  v8 = *(CFTypeRef *)(a3 + 136);
  if (v8)
    v8 = CFRetain(v8);
  v7[2] = v8;
  v9 = *(CFTypeRef *)(a3 + 160);
  if (v9)
    v9 = CFRetain(v9);
  v7[3] = v9;
  v10 = *DerivedStorage;
  if (!v10)
  {
    FigSignalErrorAt();
LABEL_17:
    ckb_renewalTimerFinalizer(v7);
    return;
  }
  if (!*(_QWORD *)(a2 + 48))
    goto LABEL_17;
  ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a2 + 88));
  v11 = MEMORY[0x194029D14](*(_QWORD *)(a2 + 48));
  v12 = v11 - CFAbsoluteTimeGetCurrent();
  if (v12 <= 0.0
    || ckbutil_createAndStartTimer((int)v12, v7, (void (__cdecl *)(void *))ckb_renewalTimerEventHandler, (void (__cdecl *)(void *))ckb_renewalTimerFinalizer, v10, (NSObject **)(a2 + 88)))
  {
    goto LABEL_17;
  }
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void ckb_renewalTimerEventHandler(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (const void *)v2;
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    {
      FigSignalErrorAt();
      CFRelease(v3);
    }
    else
    {
      v4 = (uint64_t *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (dword_1EE2A2B08)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ckb_renew(v3, v4[2], 0, 0, 0, *(const void **)(a1 + 16), *(const void **)(a1 + 24), 0);
      CFRelease(v3);
      CFRelease(v4);
    }
  }
}

void ckb_renewalTimerFinalizer(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  if (v4)
    CFRelease(v4);
  v5 = a1[3];
  if (v5)
    CFRelease(v5);
  free(a1);
}

uint64_t ckb_renew(const void *a1, uint64_t a2, __int128 *a3, uint64_t a4, NSObject *a5, const void *a6, const void *a7, __CFArray **a8)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v13;
  const __CFArray *v14;
  CFIndex v15;
  const void *ValueAtIndex;
  uint64_t ContentKey;
  uint64_t v18;
  const __CFDictionary *v19;
  const __CFAllocator *v20;
  __CFArray *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  CFIndex v24;
  _QWORD *v25;
  _DWORD *Value;
  _QWORD *v27;
  const void *v28;
  uint64_t v29;
  uint64_t RequestWithRequestID;
  const void *UInt64;
  uint64_t started;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  const __CFDictionary *v41;
  CFTypeRef cf;
  const void *v43[18];

  v43[16] = *(const void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    v18 = FigSignalErrorAt();
    v41 = 0;
    goto LABEL_48;
  }
  CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v18 = FigSignalErrorAt();
    v19 = 0;
    goto LABEL_13;
  }
  v13 = Mutable;
  v14 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (CFArrayGetCount(v14) < 1)
  {
LABEL_9:
    v18 = 0;
    v19 = v13;
    v13 = 0;
    if (!v14)
      goto LABEL_11;
  }
  else
  {
    v15 = 0;
    while (1)
    {
      v43[0] = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
      ContentKey = ckg_getContentKey((uint64_t)ValueAtIndex, a2, v43);
      if ((_DWORD)ContentKey)
        break;
      if (v43[0])
        FigCFDictionarySetValue();
      if (++v15 >= CFArrayGetCount(v14))
        goto LABEL_9;
    }
    v18 = ContentKey;
    v19 = 0;
    if (!v14)
      goto LABEL_11;
  }
  CFRelease(v14);
LABEL_11:
  if (v13)
    CFRelease(v13);
LABEL_13:
  v41 = v19;
  if ((_DWORD)v18)
  {
LABEL_48:
    v23 = 0;
    v21 = 0;
LABEL_51:
    UInt64 = 0;
    goto LABEL_27;
  }
  if (CFDictionaryGetCount(v19) <= 0)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_48;
  }
  v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v21 = CFArrayCreateMutable(v20, 0, MEMORY[0x1E0C9B378]);
  if (!v21)
  {
    v18 = FigSignalErrorAt();
    v23 = 0;
    goto LABEL_51;
  }
  v22 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  v23 = v22;
  if (!v22)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_51;
  }
  if (CFArrayGetCount(v22) < 1)
  {
LABEL_25:
    UInt64 = 0;
    v18 = 0;
    if (a8)
    {
      *a8 = v21;
      v21 = 0;
    }
    goto LABEL_27;
  }
  v24 = 0;
  while (1)
  {
    v25 = CFArrayGetValueAtIndex(v23, v24);
    Value = CFDictionaryGetValue(v19, v25);
    if (Value[10] != 2)
      goto LABEL_24;
    Value[10] = 1;
    v27 = (_QWORD *)*((_QWORD *)Value + 3);
    v28 = *(const void **)(DerivedStorage + 136);
    v29 = FigAtomicIncrement64();
    RequestWithRequestID = ckb_createRequestWithRequestID(a1, v27, v25, a6, a7, v28, 1, v29 << 8, (uint64_t *)&cf);
    if ((_DWORD)RequestWithRequestID)
    {
      v18 = RequestWithRequestID;
      UInt64 = 0;
      goto LABEL_27;
    }
    FigGetAllocatorForMedia();
    UInt64 = (const void *)FigCFNumberCreateUInt64();
    if (!UInt64)
      break;
    ckr_addStatusCallbacks((uint64_t)cf, a3, a4, a5);
    started = ckb_startRequest(a1, v25, cf);
    if ((_DWORD)started)
      goto LABEL_44;
    CFArrayAppendValue(v21, UInt64);
    cf = 0;
    CFRelease(UInt64);
    v19 = v41;
LABEL_24:
    if (++v24 >= CFArrayGetCount(v23))
      goto LABEL_25;
  }
  started = FigSignalErrorAt();
LABEL_44:
  v18 = started;
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (UInt64)
    CFRelease(UInt64);
  if (v21)
    CFRelease(v21);
  if (v41)
    CFRelease(v41);
  if (v23)
    CFRelease(v23);
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v18;
}

uint64_t ckg_getContentKey(uint64_t a1, uint64_t a2, const void **a3)
{
  const __CFDictionary *v4;
  const void *Identifier;

  if (!a1 || !a3)
    return FigSignalErrorAt();
  v4 = *(const __CFDictionary **)(a1 + 40);
  Identifier = (const void *)FigContentKeySpecifierGetIdentifier(a2);
  *a3 = CFDictionaryGetValue(v4, Identifier);
  return 0;
}

BOOL ckr_canRecoverError(uint64_t a1)
{
  __CFError *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  v1 = *(__CFError **)(a1 + 176);
  return !v1 || FigStreamingNetworkErrorGetRecommendedAction(v1, &v4, &v3) == 0;
}

void ckb_customURLReadCallback(uint64_t a1, const void *a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, unint64_t a6)
{
  uint64_t Empty;
  uint64_t DerivedStorage;
  const void *Value;
  uint64_t HTTPStatusCode;
  uint64_t v14;
  CFTypeRef v15;
  __CFError *v16;
  OpaqueCMBlockBuffer *v17;
  const __CFAllocator *v18;
  size_t v19;
  uint64_t appended;
  int v21;
  __CFError *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef v27;
  _QWORD *v28;
  CFTypeRef v29;
  const void *v30;
  char v31;
  const void *v32;
  const __CFAllocator *v33;
  OpaqueCMBlockBuffer *v34;
  const __CFAllocator *AllocatorForMedia;
  size_t DataLength;
  uint64_t Contiguous;
  uint64_t *v38;
  CFAllocatorRef v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v46;
  unsigned int v47;
  CFTypeRef v48;
  CFTypeRef v49;
  __CFError *v50;
  int v51;
  int v52;
  __CFError *v53;
  CFIndex Code;
  _BOOL4 v55;
  int v56;
  __CFError *err;
  CFTypeRef v58;
  const void *v59;
  CFTypeRef v60;
  CFTypeRef v61;
  CFTypeRef v62;
  uint64_t v63;
  CFTypeRef cf;
  CFTypeRef v65;
  _BYTE blockBufferOut[12];
  __int16 v67;
  CFTypeRef v68;
  __int16 v69;
  CFTypeRef v70;
  __int16 v71;
  const void *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  __CFError *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  _BOOL4 v82;
  CFErrorRef v83[19];

  v83[16] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v63 = 0;
  cf = 0;
  v61 = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  Empty = ckb_copyBossFromRetainProxy(a1, &cf);
  if ((_DWORD)Empty)
    goto LABEL_51;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 120), a2);
  if (!Value)
    goto LABEL_50;
  Empty = ckb_copyGroupAndRequestFromID((uint64_t)cf, Value, &v61, &v62);
  if ((_DWORD)Empty)
    goto LABEL_51;
  if (!v62)
  {
    Empty = FigSignalErrorAt();
    if ((_DWORD)Empty)
      goto LABEL_51;
LABEL_50:
    Empty = FigSignalErrorAt();
    goto LABEL_51;
  }
  if (!*((_QWORD *)v62 + 8))
    goto LABEL_50;
  HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
  if ((_DWORD)HTTPStatusCode)
  {
    v14 = HTTPStatusCode;
    if ((_DWORD)HTTPStatusCode != -17360)
      goto LABEL_52;
  }
  Empty = FigCFHTTPCreateCFErrorFromHTTPStatusCode(v63, (CFErrorRef *)&v58);
  if ((_DWORD)Empty)
    goto LABEL_51;
  if (a6 | (unint64_t)v58)
  {
    v15 = a6 ? (CFTypeRef)a6 : v58;
    v16 = (__CFError *)CFRetain(v15);
    if (v16)
    {
      v22 = v16;
      CFErrorGetDomain(v16);
      if (FigCFEqual())
      {
        Code = CFErrorGetCode(v22);
        v14 = 0;
        v23 = Code != -17297;
        v24 = Code == -17297;
        v21 = 1;
        goto LABEL_55;
      }
      v14 = 0;
      v24 = 0;
      v21 = 1;
LABEL_54:
      v23 = 1;
      goto LABEL_55;
    }
  }
  if (!a4)
  {
    if ((a5 & 1) == 0)
    {
LABEL_46:
      v21 = 0;
      v14 = 0;
LABEL_53:
      v22 = 0;
      v24 = 0;
      goto LABEL_54;
    }
LABEL_22:
    if (*((_QWORD *)v62 + 14))
    {
      v25 = FigCustomURLResponseInfoCopyContentRenewalDate();
      if (!(_DWORD)v25 || (v14 = v25, (_DWORD)v25 == -17360))
      {
        v26 = FigCustomURLResponseInfoCopyUniversalTypeIdentifier();
        if (!(_DWORD)v26 || (v14 = v26, (_DWORD)v26 == -17360))
        {
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 120), a2);
          v27 = cf;
          v28 = v61;
          v29 = v62;
          v30 = v59;
          v83[0] = 0;
          v65 = 0;
          *(_QWORD *)blockBufferOut = 0;
          if (!v62)
          {
            FigSignalErrorAt();
LABEL_42:
            if (*(_QWORD *)blockBufferOut)
              CFRelease(*(CFTypeRef *)blockBufferOut);
            if (v83[0])
              CFRelease(v83[0]);
            goto LABEL_46;
          }
          v31 = a5;
          v32 = a2;
          v33 = CFGetAllocator(cf);
          v34 = (OpaqueCMBlockBuffer *)*((_QWORD *)v29 + 14);
          AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          DataLength = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)v29 + 14));
          Contiguous = CMBlockBufferCreateContiguous(v33, v34, AllocatorForMedia, 0, 0, DataLength, 0, (CMBlockBufferRef *)blockBufferOut);
          if ((_DWORD)Contiguous
            || (CFGetAllocator(v27),
                CMBlockBufferGetDataLength(*(CMBlockBufferRef *)blockBufferOut),
                Contiguous = FigCreateCFDataWithBlockBufferNoCopy(),
                (_DWORD)Contiguous))
          {
            v43 = Contiguous;
          }
          else
          {
            v38 = (uint64_t *)*((_QWORD *)v29 + 8);
            if (v38)
            {
              v39 = CFGetAllocator(v27);
              if (FigCFEqual())
                v40 = 2;
              else
                v40 = 1;
              v41 = FigContentKeyResponseParamsCreate((uint64_t)v39, v40, v30, 0, v65, v83);
              if (!(_DWORD)v41)
              {
                v42 = ck_processResponse(v38, (uint64_t)v83[0]);
                a5 = v31;
                if ((_DWORD)v42)
                {
                  v43 = v42;
                }
                else
                {
                  if (*(_DWORD *)(v38[3] + 28) != 2)
                    ckb_startRenewalTimer((uint64_t)v27, (uint64_t)v38, (uint64_t)v29);
                  v43 = 0;
                }
                a2 = v32;
                goto LABEL_40;
              }
            }
            else
            {
              v41 = FigSignalErrorAt();
            }
            v43 = v41;
          }
          a2 = v32;
          a5 = v31;
LABEL_40:
          ckb_transitionRequestToTerminalStateWithOSStatus(v27, v28, (uint64_t)v29, v43);
          if (v65)
            CFRelease(v65);
          goto LABEL_42;
        }
      }
LABEL_52:
      v21 = 0;
      goto LABEL_53;
    }
    goto LABEL_50;
  }
  v17 = (OpaqueCMBlockBuffer *)*((_QWORD *)v62 + 14);
  if (!v17)
  {
    v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
    Empty = CMBlockBufferCreateEmpty(v18, 0, 0, (CMBlockBufferRef *)v62 + 14);
    if (!(_DWORD)Empty)
    {
      v17 = (OpaqueCMBlockBuffer *)*((_QWORD *)v62 + 14);
      goto LABEL_18;
    }
LABEL_51:
    v14 = Empty;
    goto LABEL_52;
  }
LABEL_18:
  v19 = CMBlockBufferGetDataLength(a4);
  appended = CMBlockBufferAppendBufferReference(v17, a4, 0, v19, 0);
  v14 = appended;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  if ((a5 & 1) == 0)
  {
    v24 = 0;
    goto LABEL_55;
  }
  v24 = 0;
  if (!(_DWORD)appended)
    goto LABEL_22;
LABEL_55:
  if (dword_1EE2A2B08)
  {
    v56 = v21;
    err = v22;
    v44 = a2;
    LODWORD(v65) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v46 = v65;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v47 = v46;
    else
      v47 = v46 & 0xFFFFFFFE;
    if (v47)
    {
      v55 = v24;
      v48 = cf;
      v49 = v62;
      if (v23)
        v50 = err;
      else
        v50 = 0;
      if (v56)
        v51 = CFErrorGetCode(err);
      else
        v51 = 0;
      *(_DWORD *)blockBufferOut = 136317187;
      *(_QWORD *)&blockBufferOut[4] = "ckb_customURLReadCallback";
      v67 = 2048;
      v68 = v48;
      v69 = 2112;
      v70 = v49;
      v71 = 2048;
      v72 = v44;
      v73 = 1024;
      v74 = a5 & 1;
      v75 = 1024;
      v76 = v14;
      v77 = 2113;
      v78 = v50;
      v79 = 1024;
      v80 = v51;
      v81 = 1024;
      v82 = v55;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v22 = err;
    v21 = v56;
  }
  if (cf)
  {
    v52 = (_DWORD)v14 ? 1 : v21;
    if (v52 == 1 && v62)
    {
      v83[0] = 0;
      if (v21)
      {
        v53 = (__CFError *)CFRetain(v22);
        v83[0] = v53;
      }
      else
      {
        FigCreateErrorForOSStatus(v14, v83);
        v53 = v83[0];
      }
      ckb_processErrorForRequest(cf, v61, v62, v53);
      if (v83[0])
        CFRelease(v83[0]);
    }
  }
  if (v60)
    CFRelease(v60);
  if (v62)
    CFRelease(v62);
  if (v61)
    CFRelease(v61);
  if (v22)
    CFRelease(v22);
  if (cf)
    CFRelease(cf);
  if (v58)
    CFRelease(v58);
}

void ckb_sendKeyRequestCallbackOnQueue(_QWORD *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  void (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  const void *v5;
  const void *v6;
  const void *v7;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    FigSignalErrorAt();
  }
  else
  {
    if (dword_1EE2A2B08)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v3 = a1[12];
    if (*(_BYTE *)(v3 + 72) && (v4 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1[6]) != 0
      || (v4 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1[5]) != 0)
    {
      v4(a1[13], *a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 32), *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + 64));
    }
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v5 = (const void *)a1[11];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[12];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[13];
  if (v7)
    CFRelease(v7);
  free(a1);
}

uint64_t ckg_removeContentKey(uint64_t a1, uint64_t a2)
{
  __CFDictionary *v2;
  const void *Identifier;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *(__CFDictionary **)(a1 + 40);
  Identifier = (const void *)FigContentKeySpecifierGetIdentifier(a2);
  CFDictionaryRemoveValue(v2, Identifier);
  return 0;
}

uint64_t ckb_removeRequestReferences(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = ckg_removeRequest(a2, a3);
  if (!(_DWORD)v6)
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), *(const void **)(a3 + 32));
  return v6;
}

uint64_t ckb_sendStatusCallbackDispatch(const void *a1, const void *a2, uint64_t a3, NSObject *a4, const void *a5, const void *a6)
{
  char *v12;
  char *v13;
  CFTypeRef v14;
  uint64_t v15;
  CFTypeRef v16;

  if (!a2)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v12 = (char *)malloc_type_calloc(1uLL, 0x88uLL, 0x10E0040B2B8F0E5uLL);
  if (!v12)
    return FigSignalErrorAt();
  v13 = v12;
  if (a1)
    v14 = CFRetain(a1);
  else
    v14 = 0;
  *(_QWORD *)v13 = v14;
  *((_QWORD *)v13 + 13) = CFRetain(a2);
  v15 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v13 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v13 + 3) = v15;
  *((_QWORD *)v13 + 12) = CFRetain(a5);
  if (a6)
    v16 = CFRetain(a6);
  else
    v16 = 0;
  *((_QWORD *)v13 + 16) = v16;
  dispatch_async_f(a4, v13, (dispatch_function_t)ckb_sendStatusCallbackOnQueue);
  return 0;
}

void ckb_sendStatusCallbackOnQueue(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;

  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    v2 = *(_QWORD **)(a1 + 96);
    v3 = v2[22];
    if (v3)
    {
      v4 = *(void (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 24);
      if (!v4)
        goto LABEL_11;
      v5 = *(_QWORD *)(a1 + 104);
      v6 = *(CFTypeRef *)a1;
      v7 = v2[2];
      v8 = v2[4];
LABEL_10:
      v4(v5, v6, v7, v8, v3, *(_QWORD *)(a1 + 128));
      goto LABEL_11;
    }
    v9 = v2[8];
    if (v9 && (*(_QWORD *)(v9 + 80) || FigContentKeySpecifierGetKeySystem(*(_QWORD *)(v9 + 16)) == 3))
    {
      v4 = *(void (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 16);
      if (!v4)
        goto LABEL_11;
      v6 = *(CFTypeRef *)a1;
      v10 = *(_QWORD *)(a1 + 96);
      v5 = *(_QWORD *)(a1 + 104);
      v7 = *(_QWORD *)(v10 + 16);
      v8 = *(_QWORD *)(v10 + 32);
      v3 = *(_QWORD *)(v9 + 80);
      goto LABEL_10;
    }
  }
  FigSignalErrorAt();
LABEL_11:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v11 = *(const void **)(a1 + 96);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 104);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 128);
  if (v13)
    CFRelease(v13);
  free((void *)a1);
}

uint64_t ckb_createRequestWithRequestID(CFTypeRef cf, _QWORD *a2, _QWORD *a3, const void *a4, const void *a5, const void *a6, char a7, uint64_t a8, uint64_t *a9)
{
  const __CFAllocator *v17;
  uint64_t v18;
  uint64_t Instance;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef v22;
  const void *v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFMutableDictionaryRef Mutable;
  uint64_t DerivedStorage;
  uint64_t v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v31;
  __int128 context[8];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a3 || !a9)
  {
    v28 = FigSignalErrorAt();
LABEL_21:
    v20 = 0;
    goto LABEL_22;
  }
  v17 = CFGetAllocator(cf);
  v31 = a3;
  v18 = a3[2];
  context[0] = xmmword_1E2F82CC8;
  if (ckr_getTypeID_once != -1)
    dispatch_once_f(&ckr_getTypeID_once, context, (dispatch_function_t)ckbutil_registerClass);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v20 = Instance;
    v21 = (CFTypeRef)a2[2];
    if (v21)
      v21 = CFRetain(v21);
    *(_QWORD *)(v20 + 16) = v21;
    *(_QWORD *)(v20 + 24) = CFRetain(a2);
    *(_QWORD *)(v20 + 32) = a8;
    *(_BYTE *)(v20 + 72) = a7;
    *(_QWORD *)(v20 + 40) = cf;
    *(_QWORD *)(v20 + 48) = v18;
    if (a4)
      v22 = CFRetain(a4);
    else
      v22 = 0;
    v23 = v31;
    *(_QWORD *)(v20 + 136) = v22;
    if (a5)
      v24 = CFRetain(a5);
    else
      v24 = 0;
    *(_QWORD *)(v20 + 160) = v24;
    if (a6)
      v25 = CFRetain(a6);
    else
      v25 = 0;
    *(_QWORD *)(v20 + 168) = v25;
    *(_QWORD *)(v20 + 80) = 1;
    Mutable = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(v20 + 120) = Mutable;
    if (Mutable)
    {
      FigCFDictionarySetBoolean();
      *(_QWORD *)(v20 + 216) = 0;
      *(_QWORD *)(v20 + 224) = v20 + 216;
LABEL_19:
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v28 = ckg_setRequest((uint64_t)v23, (const void **)v20);
      if ((_DWORD)v28)
        goto LABEL_22;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), *(const void **)(v20 + 32), v23);
      CFRelease((CFTypeRef)v20);
      *a9 = v20;
      goto LABEL_21;
    }
    v28 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v20);
  }
  else
  {
    v28 = FigSignalErrorAt();
    v23 = a3;
  }
  v20 = 0;
  if (!(_DWORD)v28)
    goto LABEL_19;
LABEL_22:
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v20)
    CFRelease((CFTypeRef)v20);
  return v28;
}

void ckr_finalize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  NSObject *v25;
  const void *v26;

  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(_QWORD *)(a1 + 128);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (v4)
    {
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v5)
        v5(v3, v4);
    }
  }
  v6 = *(const void **)(a1 + 16);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 24);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 64);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 128);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 136);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 144);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 152);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 160);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 96);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(a1 + 168);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 176);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(a1 + 184);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(a1 + 192);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(a1 + 200);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(a1 + 112);
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(a1 + 120);
  if (v21)
    CFRelease(v21);
  ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a1 + 208));
  v22 = *(_QWORD **)(a1 + 216);
  if (v22)
  {
    do
    {
      v24 = (_QWORD *)*v22;
      v23 = (_QWORD *)v22[1];
      if (*v22)
      {
        v24[1] = v23;
        v23 = (_QWORD *)v22[1];
      }
      else
      {
        *(_QWORD *)(a1 + 224) = v23;
      }
      *v23 = v24;
      v25 = v22[6];
      if (v25)
        dispatch_release(v25);
      v26 = (const void *)v22[2];
      if (v26)
        CFRelease(v26);
      free(v22);
      v22 = v24;
    }
    while (v24);
  }
}

CFStringRef ckr_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%lld/%lld"), *(_QWORD *)(a1 + 32) >> 8, *(_QWORD *)(a1 + 32));
}

uint64_t ckg_setRequest(uint64_t a1, const void **a2)
{
  if (!a1
    || !a2
    || CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 48), a2[4])
    || CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 56), a2[2]))
  {
    return FigSignalErrorAt();
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), a2[4], a2);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), a2[2], a2);
  return 0;
}

uint64_t ckg_removeRequest(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), *(const void **)(a2 + 32));
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), *(const void **)(a2 + 16));
  return 0;
}

void ck_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (a1)
    ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a1 + 88));
  if (*(_QWORD *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    if (!FigNotificationCenterRemoveWeakListener())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
  }
  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 56);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 72);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 80);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 96);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 64);
  if (v9)
    CFRelease(v9);
}

void ck_persistentKeyUpdatedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v7;
  const void *v8;
  const void *Value;
  const void *v10;
  const void *v11;
  dispatch_queue_t *DerivedStorage;
  _QWORD *v13;
  _QWORD *v14;
  CFTypeRef v15;

  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = (const void *)v7;
    Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA3188]);
    if (Value)
    {
      v10 = Value;
      v11 = *(const void **)(a2 + 16);
      DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      v13 = malloc_type_calloc(1uLL, 0x18uLL, 0x60040149E097CuLL);
      if (v13)
      {
        v14 = v13;
        *v13 = CFRetain(v8);
        if (v11)
          v15 = CFRetain(v11);
        else
          v15 = 0;
        v14[1] = v15;
        v14[2] = CFRetain(v10);
        dispatch_async_f(*DerivedStorage, v14, (dispatch_function_t)ckb_sendDidUpdatePersistableKeyAsyncDispatch);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    CFRelease(v8);
  }
}

void ck_externalProtectionStateChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  dispatch_queue_t *DerivedStorage;
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;

  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    v5 = *(const void **)(a2 + 16);
    DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    if (v7)
    {
      v8 = v7;
      *v7 = CFRetain(v4);
      if (v5)
        v9 = CFRetain(v5);
      else
        v9 = 0;
      v8[1] = v9;
      dispatch_async_f(*DerivedStorage, v8, (dispatch_function_t)ckb_sendDidExternalProtectionStatusChangeAsyncDispatch);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v4);
  }
}

void ckb_sendDidUpdatePersistableKeyAsyncDispatch(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;
  const void *v4;
  _QWORD *DerivedStorage;
  _QWORD *v6;
  CFTypeRef *v7;
  CFTypeRef *v8;
  CFTypeRef v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;

  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176)
    && (v3 = *(CFTypeRef *)a1,
        v2 = *(const void **)(a1 + 8),
        v4 = *(const void **)(a1 + 16),
        DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage(),
        v2)
    && v4
    && (v6 = DerivedStorage, DerivedStorage[3])
    && DerivedStorage[11]
    && DerivedStorage[7]
    && (v7 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x88uLL, 0x10E0040B2B8F0E5uLL)) != 0)
  {
    v8 = v7;
    if (v3)
      v9 = CFRetain(v3);
    else
      v9 = 0;
    *v8 = v9;
    v8[15] = CFRetain(v2);
    v8[14] = CFRetain(v4);
    v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    v8[13] = (CFTypeRef)v10;
    if (v10)
    {
      dispatch_async_f((dispatch_queue_t)v6[11], v8, (dispatch_function_t)ckb_sendDidUpdatePersistableKeyOnQueue);
    }
    else if (FigSignalErrorAt())
    {
      if (*v8)
        CFRelease(*v8);
      v13 = v8[15];
      if (v13)
        CFRelease(v13);
      v14 = v8[14];
      if (v14)
        CFRelease(v14);
      v15 = v8[13];
      if (v15)
        CFRelease(v15);
      free(v8);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v11 = *(const void **)(a1 + 8);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 16);
  if (v12)
    CFRelease(v12);
  free((void *)a1);
}

void ckb_sendDidUpdatePersistableKeyOnQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    FigSignalErrorAt();
  else
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(DerivedStorage + 56))(a1[13], *a1, a1[15], a1[14]);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v3 = (const void *)a1[15];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[14];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[13];
  if (v5)
    CFRelease(v5);
  free(a1);
}

void ckb_sendDidExternalProtectionStatusChangeAsyncDispatch(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;
  _QWORD *DerivedStorage;
  _QWORD *v5;
  CFTypeRef *v6;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef v11;
  CFTypeRef v12;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    goto LABEL_17;
  v3 = *(CFTypeRef *)a1;
  v2 = *(const void **)(a1 + 8);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!v2)
    goto LABEL_17;
  v5 = DerivedStorage;
  if (!DerivedStorage[3] || !DerivedStorage[11] || !DerivedStorage[10])
    goto LABEL_12;
  v6 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x88uLL, 0x10E0040B2B8F0E5uLL);
  if (!v6)
  {
LABEL_17:
    FigSignalErrorAt();
    goto LABEL_12;
  }
  v7 = v6;
  if (v3)
    v8 = CFRetain(v3);
  else
    v8 = 0;
  *v7 = v8;
  v7[15] = CFRetain(v2);
  v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  v7[13] = (CFTypeRef)v9;
  if (v9)
  {
    dispatch_async_f((dispatch_queue_t)v5[11], v7, (dispatch_function_t)ckb_sendDidExternalProtectionStatusChangeOnQueue);
  }
  else if (FigSignalErrorAt())
  {
    if (*v7)
      CFRelease(*v7);
    v11 = v7[15];
    if (v11)
      CFRelease(v11);
    v12 = v7[13];
    if (v12)
      CFRelease(v12);
    free(v7);
  }
LABEL_12:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
  free((void *)a1);
}

void ckb_sendDidExternalProtectionStatusChangeOnQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    FigSignalErrorAt();
  else
    (*(void (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 80))(a1[13], *a1, a1[15]);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v3 = (const void *)a1[15];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[13];
  if (v4)
    CFRelease(v4);
  free(a1);
}

void ckb_startRequestDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  const void *v5;
  const void *v6;

  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176)
    && (v2 = *(_QWORD *)(a1 + 8)) != 0
    && (v3 = *(_QWORD *)(a1 + 16)) != 0)
  {
    v4 = *(CFTypeRef *)a1;
    *(CFAbsoluteTime *)(v3 + 232) = CFAbsoluteTimeGetCurrent();
    ckb_processRequestViaNextHandler(v4, v2, v3);
  }
  else
  {
    FigSignalErrorAt();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 16);
  if (v6)
    CFRelease(v6);
  free((void *)a1);
}

void ckb_createRequestDataDispatch(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  int v5;
  int v6;
  CFMutableDictionaryRef Mutable;
  uint64_t *v8;
  int v9;
  int KeySystem;
  const void *Identifier;
  const void *SupportedProtocolVersions;
  int v13;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const void *v19;
  CFTypeRef v20;
  const void *v21;
  CFTypeRef v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  const __CFAllocator *v28;
  __CFDictionary *v29;
  __CFDictionary *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, _QWORD, _QWORD);
  int v38;
  const __CFArray *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __CFArray *v46;
  const void *v47;
  const __CFArray *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  CFTypeRef v52;
  uint64_t UInt64;
  const __CFAllocator *v54;
  __CFArray *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, _QWORD, __CFArray *);
  int v58;
  uint64_t v59;
  CFAllocatorRef v60;
  _QWORD *v61;
  uint64_t (*v62)(uint64_t, __CFDictionary *, CFAllocatorRef, CFTypeRef *);
  NSObject *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  CFTypeRef v67;
  CFTypeRef v68;
  os_log_type_t type;
  unsigned int v70;
  CFTypeRef v71;
  CFTypeRef cf;
  int v73;
  const char *v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  CFTypeRef v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  int v82;
  CFTypeRef v83[18];

  v83[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(const void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v67 = 0;
  v68 = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    goto LABEL_104;
  v5 = ckb_copyGroupAndRequestFromID(v2, v3, &v67, &v68);
  if (v5)
    goto LABEL_105;
  if (FigContentKeySpecifierGetKeySystem(*((_QWORD *)v68 + 2)) != 1 || *((_DWORD *)v68 + 14))
    goto LABEL_104;
  v6 = ckg_removeRequest((uint64_t)v67, (uint64_t)v68);
  if (v6)
  {
LABEL_84:
    v52 = 0;
    goto LABEL_85;
  }
  Mutable = 0;
  v8 = (uint64_t *)v68;
  v9 = *(_DWORD *)(v4 + 56);
  v71 = 0;
  cf = 0;
  if (!v9 || *((_QWORD *)v68 + 8))
    goto LABEL_27;
  KeySystem = FigContentKeySpecifierGetKeySystem(*((_QWORD *)v68 + 2));
  Identifier = (const void *)FigContentKeySpecifierGetIdentifier(v8[2]);
  SupportedProtocolVersions = (const void *)FigContentKeySpecifierGetSupportedProtocolVersions(v8[2]);
  v13 = FigContentKeySpecifierCreate(KeySystem, Identifier, v9, SupportedProtocolVersions, (uint64_t *)&cf);
  if (v13)
  {
    v6 = v13;
    Mutable = 0;
    goto LABEL_27;
  }
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_110;
  }
  FigCFDictionaryGetBooleanValue();
  FigCFDictionarySetValue();
  v15 = FigGetAllocatorForMedia();
  v16 = v8[3];
  v18 = FigContentKeyRequestParamsCreate(v15, cf, *(_BYTE *)(v16 + 24), *(_DWORD *)(v16 + 28), *(_DWORD *)(v16 + 32), v17, *(const void **)(v16 + 40), *(const void **)(v16 + 48), *(_QWORD *)(v16 + 56), *(_WORD *)(v16 + 64), HIBYTE(*(_WORD *)(v16 + 64)), (uint64_t)Mutable, (uint64_t *)&v71);
  if (v18)
  {
LABEL_110:
    v6 = v18;
    goto LABEL_27;
  }
  v19 = (const void *)v8[2];
  v20 = cf;
  v8[2] = (uint64_t)cf;
  if (v20)
    CFRetain(v20);
  if (v19)
    CFRelease(v19);
  v21 = (const void *)v8[3];
  v22 = v71;
  v8[3] = (uint64_t)v71;
  if (v22)
    CFRetain(v22);
  if (v21)
    CFRelease(v21);
  if (dword_1EE2A2B08)
  {
    v70 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v24 = v70;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
      v25 = v24;
    else
      v25 = v24 & 0xFFFFFFFE;
    if (v25)
    {
      v26 = v8[5];
      v73 = 136315906;
      v74 = "ckr_overrideKeyRequestParamsAttributesIfPossible";
      v75 = 2048;
      v76 = v26;
      v77 = 2112;
      v78 = v8;
      v79 = 1024;
      LODWORD(v80) = v9;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = 0;
  }
  else
  {
    v6 = 0;
  }
LABEL_27:
  if (v71)
    CFRelease(v71);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v6)
    goto LABEL_84;
  v5 = ckg_setRequest((uint64_t)v67, (const void **)v68);
  if (v5)
    goto LABEL_105;
  v5 = ckg_ensureContentKeyForRequest((uint64_t)v67, (uint64_t *)v68);
  if (v5)
    goto LABEL_105;
  if (!v68)
  {
    v5 = FigSignalErrorAt();
    if (!v5)
      goto LABEL_104;
LABEL_105:
    v6 = v5;
    goto LABEL_84;
  }
  v27 = (uint64_t *)*((_QWORD *)v68 + 8);
  if (!v27)
  {
LABEL_104:
    v5 = FigSignalErrorAt();
    goto LABEL_105;
  }
  v83[0] = 0;
  v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v29 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v29)
  {
    v30 = v29;
    v31 = *(const void **)(v4 + 16);
    if (v31)
      CFDictionarySetValue(v29, (const void *)*MEMORY[0x1E0CA4D10], v31);
    v32 = *(const void **)(v4 + 24);
    if (v32)
      CFDictionarySetValue(v30, (const void *)*MEMORY[0x1E0CA4D18], v32);
    v33 = *(const void **)(v4 + 48);
    if (v33)
      CFDictionarySetValue(v30, (const void *)*MEMORY[0x1E0CA4D58], v33);
    v34 = *(const void **)(v4 + 32);
    if (v34)
      CFDictionarySetValue(v30, (const void *)*MEMORY[0x1E0CA4D38], v34);
    FigCFDictionarySetInt();
    FigCFDictionarySetInt64();
    v35 = (_QWORD *)MEMORY[0x1E0C9AE50];
    if (*(_DWORD *)(v27[3] + 28) == 2)
      CFDictionarySetValue(v30, (const void *)*MEMORY[0x1E0CA4D28], (const void *)*MEMORY[0x1E0C9AE50]);
    if (*(_BYTE *)(v4 + 60))
      FigCFDictionarySetInt();
    if (!*(_BYTE *)(v4 + 61))
      goto LABEL_54;
    v36 = v27[10];
    v37 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v37)
      goto LABEL_66;
    v38 = v37(v36, *MEMORY[0x1E0CA3238], *v35);
    if (!v38)
    {
LABEL_54:
      if (*(_DWORD *)(v27[3] + 28) > 1u)
      {
        v46 = 0;
        v47 = 0;
        goto LABEL_71;
      }
      v39 = *(const __CFArray **)(v4 + 40);
      if (v39 && CFArrayGetCount(v39) >= 1)
      {
        v40 = v27[10];
        v41 = *(_QWORD *)(v4 + 40);
        v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v42)
        {
          v43 = *MEMORY[0x1E0CA3208];
          v44 = v40;
          v45 = v41;
LABEL_64:
          v51 = v42(v44, v43, v45);
          v52 = 0;
          if (v51)
          {
            v6 = v51;
            goto LABEL_80;
          }
          v46 = 0;
          v47 = 0;
          goto LABEL_71;
        }
        goto LABEL_66;
      }
      v48 = (const __CFArray *)FigContentKeySpecifierGetSupportedProtocolVersions(v27[2]);
      if (v48 && CFArrayGetCount(v48) >= 1)
      {
        v49 = v27[10];
        v50 = FigContentKeySpecifierGetSupportedProtocolVersions(v27[2]);
        v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v42)
        {
          v43 = *MEMORY[0x1E0CA3208];
          v44 = v49;
          v45 = v50;
          goto LABEL_64;
        }
LABEL_66:
        v52 = 0;
        v6 = -12782;
        goto LABEL_80;
      }
      UInt64 = FigCFNumberCreateUInt64();
      if (UInt64)
      {
        v47 = (const void *)UInt64;
        v54 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v55 = CFArrayCreateMutable(v54, 1, MEMORY[0x1E0C9B378]);
        v46 = v55;
        if (v55)
        {
          CFArrayAppendValue(v55, v47);
          v56 = v27[10];
          v57 = *(uint64_t (**)(uint64_t, _QWORD, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (!v57)
          {
            v52 = 0;
            v6 = -12782;
            goto LABEL_77;
          }
          v58 = v57(v56, *MEMORY[0x1E0CA3208], v46);
          if (!v58)
          {
LABEL_71:
            v59 = v27[10];
            v60 = CFGetAllocator(v27);
            v61 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
            if (*v61 >= 4uLL
              && (v62 = (uint64_t (*)(uint64_t, __CFDictionary *, CFAllocatorRef, CFTypeRef *))v61[11]) != 0)
            {
              v6 = v62(v59, v30, v60, v83);
              if (v6)
              {
                v52 = 0;
                if (!v47)
                {
LABEL_78:
                  if (v46)
                    CFRelease(v46);
LABEL_80:
                  CFRelease(v30);
                  if (v83[0])
                    CFRelease(v83[0]);
                  if (!v6)
                    goto LABEL_83;
                  goto LABEL_85;
                }
              }
              else
              {
                v52 = v83[0];
                v83[0] = 0;
                if (!v47)
                  goto LABEL_78;
              }
            }
            else
            {
              v52 = 0;
              v6 = -12782;
              if (!v47)
                goto LABEL_78;
            }
LABEL_77:
            CFRelease(v47);
            goto LABEL_78;
          }
        }
        else
        {
          v58 = FigSignalErrorAt();
        }
        v6 = v58;
        v52 = 0;
        goto LABEL_77;
      }
      v38 = FigSignalErrorAt();
    }
    v6 = v38;
    v52 = 0;
    goto LABEL_80;
  }
  v6 = FigSignalErrorAt();
  v52 = 0;
  if (!v6)
  {
LABEL_83:
    *((_DWORD *)v68 + 14) = 1;
    *(_QWORD *)(a1 + 32) = v52;
    goto LABEL_84;
  }
LABEL_85:
  if (dword_1EE2A2B08)
  {
    LODWORD(cf) = 0;
    LOBYTE(v71) = 0;
    v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v64 = cf;
    if (os_log_type_enabled(v63, (os_log_type_t)v71))
      v65 = v64;
    else
      v65 = v64 & 0xFFFFFFFE;
    if (v65)
    {
      v66 = *(_QWORD *)(a1 + 32);
      v73 = 136316162;
      v74 = "ckb_createRequestData";
      v75 = 2048;
      v76 = v2;
      v77 = 2112;
      v78 = v68;
      v79 = 2048;
      v80 = v66;
      v81 = 1024;
      v82 = v6;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v52)
    CFRelease(v52);
  if (v68)
    CFRelease(v68);
  if (v67)
    CFRelease(v67);
  *(_DWORD *)(a1 + 24) = v6;
}

void ckb_createPersistableKeyDataDispatch(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD);
  uint64_t v12;
  CFAllocatorRef v13;
  uint64_t (*v14)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  int v15;
  CFTypeRef v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v18;
  CFTypeRef cf;
  CFTypeRef v20[17];

  v20[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(const void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v18 = 0;
  cf = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    goto LABEL_28;
  v5 = ckb_copyGroupAndRequestFromID(v2, v3, &v18, &cf);
  if (v5)
    goto LABEL_29;
  if (FigContentKeySpecifierGetKeySystem(*((_QWORD *)cf + 2)) != 1 || *((_DWORD *)cf + 14) != 1)
    goto LABEL_28;
  v5 = ckg_ensureContentKeyForRequest((uint64_t)v18, (uint64_t *)cf);
  if (v5)
    goto LABEL_29;
  if (!cf)
  {
    v15 = FigSignalErrorAt();
    if (v15)
      goto LABEL_18;
    goto LABEL_28;
  }
  v6 = (_QWORD *)*((_QWORD *)cf + 8);
  if (!v6)
  {
LABEL_28:
    v5 = FigSignalErrorAt();
    goto LABEL_29;
  }
  v20[0] = 0;
  if (!v4)
  {
    v15 = FigSignalErrorAt();
    v16 = 0;
    if (!v15)
      goto LABEL_16;
    goto LABEL_18;
  }
  v7 = v6[10];
  v8 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v8)
  {
LABEL_17:
    v15 = -12782;
    goto LABEL_18;
  }
  v5 = v8(v7, *MEMORY[0x1E0CA3238], *MEMORY[0x1E0C9AE50]);
  if (v5)
    goto LABEL_29;
  v9 = v6[10];
  v10 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v10 < 4uLL)
    goto LABEL_17;
  v11 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))v10[12];
  if (!v11)
    goto LABEL_17;
  v5 = v11(v9, v4, 0);
  if (v5)
  {
LABEL_29:
    v15 = v5;
    goto LABEL_18;
  }
  v12 = v6[10];
  v13 = CFGetAllocator(v6);
  v14 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v14)
    goto LABEL_17;
  v15 = v14(v12, *MEMORY[0x1E0CA31F0], v13, v20);
  v16 = v20[0];
  if (!v15)
  {
LABEL_16:
    v15 = 0;
    *((_DWORD *)cf + 14) = 2;
    *(_QWORD *)(a1 + 32) = v16;
    goto LABEL_18;
  }
  if (v20[0])
    CFRelease(v20[0]);
LABEL_18:
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  *(_DWORD *)(a1 + 24) = v15;
}

uint64_t ckb_processResponseDispatch(uint64_t a1)
{
  uint64_t result;

  result = ckb_processResponse(*(const void **)a1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void ckb_processResponseErrorDispatch(uint64_t a1)
{
  const void *v2;
  const void *v3;
  __CFError *v4;
  int v5;
  int v6;
  CFTypeRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v9;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v3 = *(const void **)a1;
  v2 = *(const void **)(a1 + 8);
  v4 = *(__CFError **)(a1 + 16);
  v9 = 0;
  cf[0] = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    goto LABEL_13;
  v5 = ckb_copyGroupAndRequestFromID((uint64_t)v3, v2, &v9, cf);
  if (v5)
  {
LABEL_14:
    v6 = v5;
    goto LABEL_5;
  }
  if (*((_DWORD *)cf[0] + 14) >= 3u)
  {
LABEL_13:
    v5 = FigSignalErrorAt();
    goto LABEL_14;
  }
  ckb_transitionRequestToTerminalState(v3, v9, (uint64_t)cf[0], v4);
  v6 = 0;
LABEL_5:
  v7 = cf[0];
  if (cf[0] && dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = cf[0];
  }
  if (v7)
    CFRelease(v7);
  if (v9)
    CFRelease(v9);
  *(_DWORD *)(a1 + 24) = v6;
}

uint64_t ckb_renewDispatch(uint64_t a1)
{
  uint64_t result;

  result = ckb_renew(*(const void **)a1, *(_QWORD *)(a1 + 8), *(__int128 **)(a1 + 16), *(_QWORD *)(a1 + 24), *(NSObject **)(a1 + 32), 0, 0, *(__CFArray ***)(a1 + 40));
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

void ckb_setRequestHandlingCallbacksDispatch(uint64_t a1)
{
  __int128 *v2;
  NSObject *v3;
  uint64_t DerivedStorage;
  const void *v5;
  const void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const void *v10;
  NSObject *v11;
  int v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = *(__int128 **)(a1 + 8);
  v3 = *(NSObject **)(a1 + 24);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    v12 = FigSignalErrorAt();
    v6 = 0;
  }
  else
  {
    v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    v6 = v5;
    if (v5)
    {
      v7 = *v2;
      v8 = v2[1];
      v9 = v2[2];
      *(_QWORD *)(DerivedStorage + 80) = *((_QWORD *)v2 + 6);
      *(_OWORD *)(DerivedStorage + 48) = v8;
      *(_OWORD *)(DerivedStorage + 64) = v9;
      *(_OWORD *)(DerivedStorage + 32) = v7;
      v10 = *(const void **)(DerivedStorage + 24);
      *(_QWORD *)(DerivedStorage + 24) = v5;
      CFRetain(v5);
      if (v10)
        CFRelease(v10);
      v11 = *(NSObject **)(DerivedStorage + 88);
      if (v11)
        dispatch_release(v11);
      dispatch_retain(v3);
      v12 = 0;
      *(_QWORD *)(DerivedStorage + 88) = v3;
    }
    else
    {
      v12 = FigSignalErrorAt();
    }
  }
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v6)
    CFRelease(v6);
  *(_DWORD *)(a1 + 32) = v12;
}

uint64_t ckb_createGroupDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  char *v4;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    result = FigSignalErrorAt();
  }
  else
  {
    v4 = *(char **)(DerivedStorage + 96);
    *(_QWORD *)(DerivedStorage + 96) = v4 + 1;
    result = ckb_ensureAndGetGroup(v2, v4);
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a1 + 8) = v4;
      if (dword_1EE2A2B08)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      result = 0;
    }
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t ckb_destroyGroupDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176)
    || !CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), v2))
  {
    result = FigSignalErrorAt();
  }
  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), v2);
    if (dword_1EE2A2B08)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void ckb_associateRequestWithGroupDispatch(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  uint64_t DerivedStorage;
  const void *Value;
  const void *v7;
  int v8;
  const void **v9;
  CFMutableDictionaryRef *v10;
  int v11;
  const void **v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v14;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(const void **)(a1 + 8);
  v4 = *(const void **)(a1 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0;
  cf[0] = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    goto LABEL_17;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), v4);
  if (!Value)
    goto LABEL_17;
  v7 = Value;
  v8 = ckb_copyGroupAndRequestFromID(v2, v3, &v14, cf);
  if (v8)
    goto LABEL_9;
  v9 = (const void **)cf[0];
  if (*((_DWORD *)cf[0] + 14) || *((_QWORD *)cf[0] + 8))
  {
LABEL_17:
    v8 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v10 = (CFMutableDictionaryRef *)v14;
  if (*((const void **)v14 + 2) == v4)
  {
    v11 = 0;
    goto LABEL_10;
  }
  CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)v14 + 6), *((const void **)cf[0] + 4));
  CFDictionaryRemoveValue(v10[7], v9[2]);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), *((const void **)cf[0] + 4));
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), v3, v7);
  v12 = (const void **)cf[0];
  *((_QWORD *)cf[0] + 6) = v4;
  v8 = ckg_setRequest((uint64_t)v7, v12);
LABEL_9:
  v11 = v8;
LABEL_10:
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0])
    CFRelease(cf[0]);
  if (v14)
    CFRelease(v14);
  *(_DWORD *)(a1 + 24) = v11;
}

void ckb_createSecureTokenDataRecDispatch(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  const __CFAllocator *AllocatorForMedia;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  CFTypeID v7;
  const void *Value;
  CFTypeID v9;
  const __CFData *v10;
  int v11;
  char *v12;
  const void *UInt64;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v17;
  unsigned int Count;
  int v19;
  uint64_t v20;
  CFIndex v21;
  char *v22;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v24;
  CFTypeID v25;
  int v26;
  const UInt8 *BytePtr;
  int Length;
  int v29;
  const __CFAllocator *v30;
  const __CFAllocator *v31;
  int v32;
  int v33;
  const void *v34;
  const __CFData *v35;
  CFTypeID v36;
  const __CFArray *v37;
  CFTypeID v38;
  const __CFData *theData;
  uint64_t v40;
  uint64_t v41[25];

  v1 = a1;
  v41[23] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  CMBaseObjectGetDerivedStorage();
  v41[0] = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176) || (*(_DWORD *)(v2 + 56) - 1) >= 2)
    goto LABEL_13;
  v3 = *(_DWORD *)(v2 + 16);
  if (v3 != 3)
  {
    if (v3 == 2)
    {
      theData = *(const __CFData **)(v2 + 24);
      if (theData)
      {
        v40 = v1;
        v17 = *(const __CFArray **)(v2 + 40);
        if (!v17)
        {
          v11 = FigSignalErrorAt();
          v12 = 0;
          UInt64 = 0;
          v6 = 0;
          goto LABEL_59;
        }
        v6 = 0;
        goto LABEL_34;
      }
      goto LABEL_13;
    }
    if (v3 != 1)
      goto LABEL_13;
  }
  if (!*(_QWORD *)(v2 + 32))
  {
LABEL_13:
    v11 = FigSignalErrorAt();
    v12 = 0;
    UInt64 = 0;
    v6 = 0;
    goto LABEL_14;
  }
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v5 = (const __CFDictionary *)CFPropertyListCreateWithData(AllocatorForMedia, *(CFDataRef *)(v2 + 32), 0, 0, 0);
  v6 = v5;
  if (!v5
    || (v7 = CFGetTypeID(v5), v7 != CFDictionaryGetTypeID())
    || (Value = CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA4D40])) == 0
    || (v9 = CFGetTypeID(Value), v9 != CFDataGetTypeID())
    || (v10 = (const __CFData *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA4D10])) == 0
    || (v35 = v10, v36 = CFGetTypeID(v10), v36 != CFDataGetTypeID()))
  {
    v11 = FigSignalErrorAt();
    v12 = 0;
    UInt64 = 0;
LABEL_14:
    Mutable = 0;
    v15 = 0;
    goto LABEL_15;
  }
  theData = v35;
  v40 = v1;
  v37 = (const __CFArray *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA4D48]);
  if (!v37)
    goto LABEL_57;
  v17 = v37;
  v38 = CFGetTypeID(v37);
  if (v38 != CFArrayGetTypeID())
    goto LABEL_57;
LABEL_34:
  Count = CFArrayGetCount(v17);
  v19 = Count;
  if (!Count)
  {
LABEL_57:
    v11 = FigSignalErrorAt();
    v12 = 0;
LABEL_58:
    UInt64 = 0;
LABEL_59:
    Mutable = 0;
LABEL_60:
    v15 = 0;
LABEL_61:
    v1 = v40;
    goto LABEL_15;
  }
  v20 = Count;
  v12 = (char *)malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  v21 = 0;
  v22 = v12;
  do
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v17, v21);
    if (!ValueAtIndex
      || (v24 = ValueAtIndex, v25 = CFGetTypeID(ValueAtIndex), v25 != CFNumberGetTypeID())
      || !CFNumberGetValue(v24, kCFNumberSInt32Type, v22))
    {
      v11 = FigSignalErrorAt();
      UInt64 = 0;
      Mutable = 0;
      v15 = 0;
      v1 = v40;
      goto LABEL_15;
    }
    ++v21;
    v22 += 4;
  }
  while (v20 != v21);
  v26 = *(_DWORD *)(v2 + 56);
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  if (v26 == 1)
    v29 = Qhl17oSYJtCJIxM((uint64_t)BytePtr, Length, (uint64_t)v12, v19, (uint64_t)v41);
  else
    v29 = V2qUlL4PZ5VKVXDsUHg5z((uint64_t)BytePtr, Length, (uint64_t)v12, v19, (uint64_t)v41);
  if (v29)
  {
    v11 = v29;
    goto LABEL_58;
  }
  v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(v30, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v11 = FigSignalErrorAt();
    UInt64 = 0;
    goto LABEL_60;
  }
  v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v15 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v15)
  {
    v11 = FigSignalErrorAt();
    UInt64 = 0;
    goto LABEL_61;
  }
  v32 = *(_DWORD *)(v2 + 16);
  if (v32 == 3 || v32 == 1)
    FigCFDictionarySetValue();
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  if (!UInt64)
  {
    v33 = FigSignalErrorAt();
    goto LABEL_71;
  }
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt32();
  v33 = pC3lVfLuVJLMz((uint64_t)Mutable, (uint64_t)v15);
  if (v33)
  {
LABEL_71:
    v11 = v33;
    goto LABEL_61;
  }
  v34 = CFDictionaryGetValue(v15, CFSTR("yN1lNULD2GD"));
  v1 = v40;
  if (v34)
    v34 = CFRetain(v34);
  v11 = 0;
  *(_QWORD *)(v40 + 16) = v34;
LABEL_15:
  if (!v41[0])
    goto LABEL_18;
  if (*(_DWORD *)(v2 + 56) == 1)
  {
    MzdSdcDIXg8COV(v41[0]);
LABEL_18:
    if (!UInt64)
      goto LABEL_20;
    goto LABEL_19;
  }
  WuLaQ4nIoKwZC7KxU(v41[0]);
  if (UInt64)
LABEL_19:
    CFRelease(UInt64);
LABEL_20:
  if (Mutable)
    CFRelease(Mutable);
  if (v15)
    CFRelease(v15);
  if (v6)
    CFRelease(v6);
  free(v12);
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(v1 + 24) = v11;
}

const void *ckb_copyAuthorizationTokenDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *result;
  uint64_t v5;
  int v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  _QWORD v9[25];

  v9[24] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v8 = 0;
  v9[0] = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    goto LABEL_15;
  result = (const void *)ckb_getExistingKeyIfAny(v2, v3, (const void *)3, 1, &v8, v9);
  if ((_DWORD)result)
  {
LABEL_16:
    v6 = (int)result;
    goto LABEL_12;
  }
  if (!v8)
  {
    v6 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_12;
  }
  if (*(_DWORD *)(v8 + 40) != 2
    || !*(_QWORD *)(v8 + 24)
    || (v5 = *(_QWORD *)(v8 + 16)) == 0
    || FigContentKeySpecifierGetKeySystem(v5) != 3)
  {
LABEL_15:
    result = (const void *)FigSignalErrorAt();
    goto LABEL_16;
  }
  result = *(const void **)(v8 + 64);
  if (result)
    result = CFRetain(result);
  v6 = 0;
  *(_QWORD *)(a1 + 16) = result;
LABEL_12:
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = (const void *)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 24) = v6;
  return result;
}

void ckb_getExternalProtectionStatusDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int ExistingKeyIfAny;
  uint64_t v5;
  uint64_t AllocatorForMedia;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t, _QWORD, CFTypeRef);
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, _QWORD, int *);
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, char *);
  int v18;
  int v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  cf[0] = 0;
  v24 = 0;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    goto LABEL_31;
  ExistingKeyIfAny = ckb_getExistingKeyIfAny(v2, v3, 0, 1, &v21, &v22);
  if (ExistingKeyIfAny)
    goto LABEL_32;
  if (!v21 || *(_DWORD *)(v21 + 40) != 2)
  {
LABEL_31:
    ExistingKeyIfAny = FigSignalErrorAt();
    goto LABEL_32;
  }
  v5 = *(_QWORD *)(v21 + 80);
  if (!v5)
  {
    v19 = -19159;
    goto LABEL_24;
  }
  AllocatorForMedia = FigGetAllocatorForMedia();
  v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7)
    goto LABEL_23;
  ExistingKeyIfAny = v7(v5, *MEMORY[0x1E0CA3220], AllocatorForMedia, cf);
  if (ExistingKeyIfAny)
    goto LABEL_32;
  v8 = *(_QWORD *)(v21 + 80);
  v9 = cf[0];
  v10 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v10)
  {
LABEL_23:
    v19 = -12782;
    goto LABEL_24;
  }
  ExistingKeyIfAny = v10(v8, *MEMORY[0x1E0CA31C0], v9);
  if (ExistingKeyIfAny)
    goto LABEL_32;
  v11 = *(_QWORD *)(v21 + 80);
  v12 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v12 < 8uLL)
    goto LABEL_23;
  v13 = (uint64_t (*)(uint64_t, _QWORD, int *))v12[31];
  if (!v13)
    goto LABEL_23;
  ExistingKeyIfAny = v13(v11, 0, &v24);
  if (ExistingKeyIfAny)
  {
LABEL_32:
    v19 = ExistingKeyIfAny;
    goto LABEL_24;
  }
  v14 = *(_QWORD *)(v21 + 80);
  v15 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v15 < 8uLL)
    goto LABEL_23;
  v16 = (uint64_t (*)(uint64_t, char *))v15[32];
  if (!v16)
    goto LABEL_23;
  ExistingKeyIfAny = v16(v14, &v23);
  if (ExistingKeyIfAny)
    goto LABEL_32;
  if (v23)
  {
    if (v24 == 1 || v24 == 4)
      v18 = 2;
    else
      v18 = 3;
  }
  else
  {
    v18 = 1;
  }
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v19 = 0;
  *(_DWORD *)(a1 + 16) = v18;
LABEL_24:
  if (cf[0])
    CFRelease(cf[0]);
  *(_DWORD *)(a1 + 20) = v19;
}

uint64_t ckb_setAllowedRequestHandlersDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    result = FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    result = 0;
    *(_QWORD *)(DerivedStorage + 16) = v2;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t ckb_revokeDispatch(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  int v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[23];

  v11[22] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(const void **)(a1 + 8);
  v10 = 0;
  v11[0] = 0;
  v9 = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    goto LABEL_17;
  result = ckb_getExistingKeyIfAny(v2, (uint64_t)v3, 0, 1, v11, &v10);
  if ((_DWORD)result)
    goto LABEL_11;
  result = ckg_getRequestByKeySpecifier(v10, v3, (const void **)&v9);
  if ((_DWORD)result)
    goto LABEL_11;
  if (!v11[0])
  {
LABEL_17:
    result = FigSignalErrorAt();
LABEL_11:
    v7 = result;
    goto LABEL_14;
  }
  v5 = *(_QWORD *)(v11[0] + 80);
  if (v5)
  {
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v6)
    {
      result = v6(v5);
      if (!(_DWORD)result)
      {
        if (!v9 || (result = ckb_removeRequestReferences(v2, v10, v9), !(_DWORD)result))
          result = ckg_removeContentKey(v10, (uint64_t)v3);
      }
      goto LABEL_11;
    }
    v7 = -12782;
  }
  else
  {
    v7 = -12780;
  }
LABEL_14:
  if (dword_1EE2A2B08)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t FigVirtualDisplaySourceMovieCreate(const __CFAllocator *a1, const __CFString *a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  const __CFString *v5;
  const __CFString *Value;
  CFTypeID TypeID;
  const char *CStringPtrAndBufferToFree;
  uint64_t v10;
  uint64_t DerivedStorage;
  CFURLRef v12;
  CFURLRef v13;
  __CFDictionary *Mutable;
  CFRunLoopRef Current;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, unsigned int *);
  uint64_t v20;
  const CFDictionaryKeyCallBacks *v21;
  const CFDictionaryValueCallBacks *v22;
  __CFDictionary *v23;
  CFMutableDictionaryRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, CFMutableDictionaryRef, _QWORD, __int128 *, __CFDictionary *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v38;
  unsigned int v39;
  void *v40;
  CFTypeRef cf;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  cf = 0;
  v39 = 0;
  if (!a4)
    goto LABEL_24;
  v5 = a2;
  if (a2 || !theDict)
  {
    if (!a2)
    {
LABEL_24:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v28 = 4294954516;
      goto LABEL_25;
    }
  }
  else
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("moviePath"));
    if (!Value)
      goto LABEL_24;
    v5 = Value;
    TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(v5))
      goto LABEL_24;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  if (CStringPtrAndBufferToFree && access(CStringPtrAndBufferToFree, 4) < 0)
  {
    v28 = *__error();
LABEL_25:
    free(v40);
    goto LABEL_37;
  }
  FigVirtualDisplaySourceGetClassID();
  v10 = CMDerivedObjectCreate();
  if ((_DWORD)v10)
  {
    v28 = v10;
    v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_25;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 8) = 0;
  *(_QWORD *)(DerivedStorage + 16) = dispatch_queue_create("FigVirtualDisplaySourceMovieQueue", 0);
  *(_QWORD *)(DerivedStorage + 24) = dispatch_semaphore_create(0);
  *(_QWORD *)(DerivedStorage + 32) = CFRetain(v5);
  v12 = CFURLCreateWithFileSystemPath(a1, v5, kCFURLPOSIXPathStyle, 0);
  if (!v12)
  {
    v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v28 = 4294954510;
    goto LABEL_25;
  }
  v13 = v12;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("AssetReader_RequiresInProcessOperation"), (const void *)*MEMORY[0x1E0C9AE50]);
  Current = CFRunLoopGetCurrent();
  v16 = (uint64_t *)(DerivedStorage + 96);
  v17 = FigAssetReaderCreateWithURLAndFormatReader(a1, (uint64_t)v13, 0, (uint64_t)Current, (uint64_t)Mutable, (CFTypeRef *)(DerivedStorage + 96));
  if ((_DWORD)v17)
  {
    v28 = v17;
    v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    goto LABEL_29;
  }
  v18 = *v16;
  v19 = *(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v19)
  {
    v28 = 4294954514;
LABEL_20:
    v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
LABEL_29:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_30:
    v24 = 0;
    v23 = 0;
    goto LABEL_31;
  }
  v20 = v19(v18, &v39);
  if ((_DWORD)v20)
  {
    v28 = v20;
    goto LABEL_20;
  }
  if (!v39)
  {
    v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v28 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v21 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v22 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v23 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(v23, CFSTR("AssetReader_MatrixHandling"), CFSTR("AssetReader_PreserveMatrix"));
  v24 = CFDictionaryCreateMutable(a1, 0, v21, v22);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v25 = *v16;
  v26 = v39;
  v27 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, _QWORD, __int128 *, __CFDictionary *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v27)
  {
    v28 = 4294954514;
    goto LABEL_23;
  }
  v42 = *MEMORY[0x1E0CA2E18];
  v43 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v28 = v27(v25, v26, v24, 0, &v42, v23, DerivedStorage + 104);
  if ((_DWORD)v28)
  {
LABEL_23:
    v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_31;
  }
  v29 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(DerivedStorage + 40) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(DerivedStorage + 56) = *(_QWORD *)(v29 + 16);
  v30 = MEMORY[0x1E0CA2E30];
  *(_OWORD *)(DerivedStorage + 64) = *MEMORY[0x1E0CA2E30];
  *(_QWORD *)(DerivedStorage + 80) = *(_QWORD *)(v30 + 16);
  *a4 = cf;
  cf = 0;
LABEL_31:
  free(v40);
  CFRelease(v13);
  if (Mutable)
    CFRelease(Mutable);
  if (v23)
    CFRelease(v23);
  if (v24)
    CFRelease(v24);
LABEL_37:
  if (cf)
    CFRelease(cf);
  return v28;
}

void mov_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 8))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 96);
  if (v2)
    CFRelease(v2);
  dispatch_release(*(dispatch_object_t *)(DerivedStorage + 24));
  dispatch_release(*(dispatch_object_t *)(DerivedStorage + 16));
}

uint64_t mov_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v5;
  uint64_t result;

  if (!CFEqual(CFSTR("sourceType"), a2))
    return 4294954512;
  v5 = CFRetain(CFSTR("Movie"));
  result = 0;
  *a4 = v5;
  return result;
}

uint64_t mov_setProperty()
{
  return 4294954512;
}

uint64_t mov_plugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[7];
  os_log_type_t type;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __mov_plugProcessor_block_invoke;
    block[3] = &unk_1E2F82E10;
    block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v11;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v12 + 6);
  }
  else
  {
    v10 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = 4294955226;
    *((_DWORD *)v12 + 6) = -12070;
  }
  _Block_object_dispose(&v11, 8);
  return v5;
}

uint64_t mov_unplugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[7];
  os_log_type_t type;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __mov_unplugProcessor_block_invoke;
    block[3] = &unk_1E2F82E38;
    block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v11;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v12 + 6);
  }
  else
  {
    v10 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = 4294955226;
    *((_DWORD *)v12 + 6) = -12070;
  }
  _Block_object_dispose(&v11, 8);
  return v5;
}

uint64_t mov_start(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __mov_start_block_invoke;
  block[3] = &unk_1E2F82E60;
  block[4] = &v8;
  block[5] = DerivedStorage;
  block[6] = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t mov_stop()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __mov_stop_block_invoke;
  block[3] = &__block_descriptor_tmp_8_2;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 24), 0xFFFFFFFFFFFFFFFFLL);
  return 0;
}

uint64_t mov_suspend()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __mov_suspend_block_invoke;
  block[3] = &__block_descriptor_tmp_9_0;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
  return 0;
}

uint64_t mov_resume()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __mov_resume_block_invoke;
  v4[3] = &unk_1E2F82EF0;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __mov_plugProcessor_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(v2 + 8) || *(_QWORD *)v2)
  {
    result = FigSignalErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  else
  {
    result = (uint64_t)CFRetain(*(CFTypeRef *)(a1 + 48));
    **(_QWORD **)(a1 + 40) = *(_QWORD *)(a1 + 48);
  }
  return result;
}

void __mov_unplugProcessor_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = a1[5];
  if (!*(_DWORD *)(v2 + 8) && (v3 = *(const void **)v2, *(_QWORD *)v2 == a1[6]))
  {
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)a1[5] = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -12070;
  }
}

void __mov_start_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFTypeRef *, CFTypeRef *);
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  int v10;
  int v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  NSObject *v14;
  int v15;
  _DWORD *v16;
  NSObject *global_queue;
  NSObject *v18;
  NSObject *v19;
  uint64_t *v20;
  BOOL v21;
  __int128 v22;
  unsigned int v23;
  CFTypeRef v24;
  CFTypeRef cf;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 40);
  if (*((_DWORD *)v2 + 2) || (v3 = *v2) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12070;
    return;
  }
  v24 = 0;
  cf = 0;
  v23 = 0;
  v22 = xmmword_1932F75A0;
  v21 = 0;
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v4)
  {
    v11 = -12782;
LABEL_14:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_18:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_19;
  }
  v5 = v4(v3, &cf, &v24);
  if (v5)
  {
    v11 = v5;
    goto LABEL_14;
  }
  v6 = FigDisplayModes_LookupTimingModeIDByIndex((const __CFArray *)v24, 0, (int *)&v23);
  if (v6)
  {
    v11 = v6;
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    goto LABEL_18;
  }
  v7 = v23;
  v8 = *v2;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v9)
  {
    v11 = -12782;
LABEL_16:
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    goto LABEL_18;
  }
  v10 = v9(v8, v7, v7);
  if (v10)
  {
    v11 = v10;
    goto LABEL_16;
  }
  if (FigDisplayModes_ExtractDimensionsFromTimingMode((const __CFArray *)v24, v23, (double *)&v22))
  {
    v20 = v2;
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
LABEL_30:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = v20;
    goto LABEL_12;
  }
  if (FigDisplayModes_ExtractOverscanInfoFromTimingMode((const __CFArray *)v24, v23, &v21))
  {
    v20 = v2;
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    goto LABEL_30;
  }
LABEL_12:
  v11 = 0;
  *((_BYTE *)v2 + 192) = 0;
  *((_OWORD *)v2 + 7) = v22;
  *((_BYTE *)v2 + 193) = v21;
LABEL_19:
  if (cf)
    CFRelease(cf);
  if (v24)
    CFRelease(v24);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v11;
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v26 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if (v26)
      v15 = 1;
    else
      v15 = 2;
    v16 = *(_DWORD **)(a1 + 40);
    v16[2] = v15;
    global_queue = dispatch_get_global_queue(2, 0);
    dispatch_async_f(global_queue, v16, (dispatch_function_t)mov_submitFrames);
  }
}

void mov_submitFrames(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, CMTime *, CMTime *);
  int v4;
  OpaqueCMClock *HostTimeClock;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, _QWORD *, CMSampleBufferRef *);
  int v10;
  OpaqueCMClock *v11;
  signed int v12;
  NSObject *v13;
  int v14;
  int v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v18;
  int v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD block[8];
  CMTime v27;
  CMTime v28;
  CMTime type;
  CMTime rhs;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMSampleBufferRef sbuf;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  CMTime v43;
  CMTime lhs;
  CMTime v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v40 = &v39;
  v41 = 0x2000000000;
  v42 = 0;
  v35 = 0;
  v36 = &v35;
  v37 = 0x2000000000;
  v38 = 0;
  sbuf = 0;
  memset(&v33, 0, sizeof(v33));
  memset(&v32, 0, sizeof(v32));
  v2 = *(_QWORD *)(a1 + 96);
  v43 = *(CMTime *)(a1 + 40);
  v31 = *(CMTime *)(a1 + 64);
  v3 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (!v3)
  {
    v15 = -12782;
    *((_DWORD *)v40 + 6) = -12782;
LABEL_16:
    LODWORD(v43.value) = 0;
    LOBYTE(v31.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = v43.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v18 = value;
    else
      v18 = value & 0xFFFFFFFE;
    if (v18)
    {
      LODWORD(v45.value) = 136315650;
      *(CMTimeValue *)((char *)&v45.value + 4) = (CMTimeValue)"mov_submitFrames";
      LOWORD(v45.flags) = 1024;
      *(CMTimeFlags *)((char *)&v45.flags + 2) = 239;
      WORD1(v45.epoch) = 1024;
      HIDWORD(v45.epoch) = v15;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_31;
  }
  lhs = v43;
  v45 = v31;
  v4 = v3(v2, &lhs, &v45);
  *((_DWORD *)v40 + 6) = v4;
  if (v4)
  {
    v15 = v4;
    goto LABEL_16;
  }
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v33, HostTimeClock);
  CMTimeMake(&v32, 1, 2);
  v6 = v36 + 3;
  if (!*((_BYTE *)v36 + 24))
  {
    while (1)
    {
      memset(&v31, 0, sizeof(v31));
      v7 = *(_QWORD *)(a1 + 96);
      v8 = *(unsigned int *)(a1 + 104);
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, CMSampleBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 104);
      if (!v9)
      {
        v19 = -12782;
        *((_DWORD *)v40 + 6) = -12782;
        goto LABEL_23;
      }
      v10 = v9(v7, v8, 1, v6, &sbuf);
      *((_DWORD *)v40 + 6) = v10;
      if (v10)
        break;
      if (*((_BYTE *)v36 + 24))
        goto LABEL_29;
      CMSampleBufferGetPresentationTimeStamp(&rhs, sbuf);
      lhs = v33;
      CMTimeAdd(&v31, &lhs, &rhs);
      type = v31;
      while (1)
      {
        v11 = CMClockGetHostTimeClock();
        CMClockGetTime(&v45, v11);
        v43 = type;
        CMTimeSubtract(&lhs, &v43, &v45);
        v12 = (int)(CMTimeGetSeconds(&lhs) * 1000000.0);
        if (v12 < 1)
          break;
        usleep(v12);
      }
      v13 = *(NSObject **)(a1 + 16);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __mov_submitFrames_block_invoke;
      block[3] = &unk_1E2F82E88;
      block[6] = a1;
      block[7] = sbuf;
      v27 = v31;
      v28 = v32;
      block[4] = &v39;
      block[5] = &v35;
      dispatch_sync(v13, block);
      v14 = *((_DWORD *)v40 + 6);
      if (v14)
      {
        LODWORD(v43.value) = 0;
        LOBYTE(type.value) = 0;
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v24 = v43.value;
        if (os_log_type_enabled(v23, type.value))
          v25 = v24;
        else
          v25 = v24 & 0xFFFFFFFE;
        if (v25)
        {
          LODWORD(v45.value) = 136315650;
          *(CMTimeValue *)((char *)&v45.value + 4) = (CMTimeValue)"mov_submitFrames";
          LOWORD(v45.flags) = 1024;
          *(CMTimeFlags *)((char *)&v45.flags + 2) = 269;
          WORD1(v45.epoch) = 1024;
          HIDWORD(v45.epoch) = v14;
          _os_log_send_and_compose_impl();
        }
        goto LABEL_28;
      }
      if (sbuf)
      {
        CFRelease(sbuf);
        sbuf = 0;
      }
      v6 = v36 + 3;
      if (*((_BYTE *)v36 + 24))
        goto LABEL_31;
    }
    v19 = v10;
LABEL_23:
    LODWORD(v43.value) = 0;
    LOBYTE(type.value) = 0;
    v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v21 = v43.value;
    if (os_log_type_enabled(v20, type.value))
      v22 = v21;
    else
      v22 = v21 & 0xFFFFFFFE;
    if (v22)
    {
      LODWORD(v45.value) = 136315650;
      *(CMTimeValue *)((char *)&v45.value + 4) = (CMTimeValue)"mov_submitFrames";
      LOWORD(v45.flags) = 1024;
      *(CMTimeFlags *)((char *)&v45.flags + 2) = 251;
      WORD1(v45.epoch) = 1024;
      HIDWORD(v45.epoch) = v19;
      _os_log_send_and_compose_impl();
    }
LABEL_28:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_29:
    if (sbuf)
      CFRelease(sbuf);
  }
LABEL_31:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 24));
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
}

uint64_t __mov_submitFrames_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  opaqueCMSampleBuffer *v3;
  const opaqueCMFormatDescription *FormatDescription;
  double height;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, double, double, double, double, double, double, double, double);
  int v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v31;
  unsigned int v32;
  CMTime v33;
  os_log_type_t type;
  unsigned int v35;
  CMTime rhs;
  CMTime lhs;
  uint64_t v38;

  v1 = result;
  v38 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(result + 48);
  if (!*((_DWORD *)v2 + 2) || !*v2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
    return result;
  }
  v3 = *(opaqueCMSampleBuffer **)(result + 56);
  lhs = *(CMTime *)(result + 64);
  rhs = *(CMTime *)(result + 88);
  CMTimeAdd(&v33, &lhs, &rhs);
  if (!*((_BYTE *)v2 + 192))
  {
    FormatDescription = CMSampleBufferGetFormatDescription(v3);
    v2[16] = 0;
    v2[17] = 0;
    *((double *)v2 + 18) = (double)CMVideoFormatDescriptionGetDimensions(FormatDescription).width;
    height = (double)CMVideoFormatDescriptionGetDimensions(FormatDescription).height;
    *((double *)v2 + 19) = height;
    if (*((_BYTE *)v2 + 193))
      v6 = *((double *)v2 + 11);
    else
      v6 = 0.0;
    v7 = *((double *)v2 + 18);
    v8 = *((double *)v2 + 14);
    v9 = *((double *)v2 + 15);
    v10 = v8 / v7;
    if (v8 / v7 >= v9 / height)
      v10 = v9 / height;
    v11 = (1.0 - v6) * v10;
    v12 = v7 * v11;
    v13 = v11 * height;
    *((double *)v2 + 20) = (v8 - v12) * 0.5;
    *((double *)v2 + 21) = (v9 - v13) * 0.5;
    *((double *)v2 + 22) = v12;
    *((double *)v2 + 23) = v13;
    *((_BYTE *)v2 + 192) = 1;
  }
  result = (uint64_t)CMSampleBufferGetImageBuffer(v3);
  if (!result)
  {
    v35 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v31 = v35;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
      v32 = v31;
    else
      v32 = v31 & 0xFFFFFFFE;
    if (v32)
    {
      LODWORD(rhs.value) = 136315394;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"mov_submitSampleBuffer";
      LOWORD(rhs.flags) = 1024;
      *(CMTimeFlags *)((char *)&rhs.flags + 2) = 218;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    result = FigSignalErrorAt();
    v26 = result;
    goto LABEL_23;
  }
  if (*((_DWORD *)v2 + 2) == 2)
  {
    v14 = result;
    v15 = *v2;
    lhs = v33;
    v16 = CMClockConvertHostTimeToSystemUnits(&lhs);
    v17 = *((double *)v2 + 16);
    v18 = *((double *)v2 + 17);
    v19 = *((double *)v2 + 18);
    v20 = *((double *)v2 + 19);
    v21 = *((double *)v2 + 20);
    v22 = *((double *)v2 + 21);
    v23 = *((double *)v2 + 22);
    v24 = *((double *)v2 + 23);
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (!v25)
    {
      v26 = -12782;
      goto LABEL_17;
    }
    result = v25(v15, v14, v16, 0, 0, v17, v18, v19, v20, v21, v22, v23, v24);
    v26 = 0;
    if ((_DWORD)result)
    {
      v26 = result;
LABEL_17:
      v35 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v28 = v35;
      if (os_log_type_enabled(v27, type))
        v29 = v28;
      else
        v29 = v28 & 0xFFFFFFFE;
      if (v29)
      {
        LODWORD(rhs.value) = 136315650;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"mov_submitSampleBuffer";
        LOWORD(rhs.flags) = 1024;
        *(CMTimeFlags *)((char *)&rhs.flags + 2) = 224;
        WORD1(rhs.epoch) = 1024;
        HIDWORD(rhs.epoch) = v26;
        _os_log_send_and_compose_impl();
      }
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v26 = 0;
  }
LABEL_23:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = v26;
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
    ++*(_DWORD *)(*(_QWORD *)(v1 + 48) + 108);
  return result;
}

uint64_t __mov_stop_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 8) = 0;
  return result;
}

uint64_t __mov_suspend_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 8) = 1;
  return result;
}

uint64_t __mov_resume_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  if (*(_DWORD *)(v1 + 8) == 1)
    *(_DWORD *)(v1 + 8) = 2;
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -12070;
  return result;
}

uint64_t FigPlayerGetTypeID()
{
  MEMORY[0x19402F294](&FigPlayerGetClassID_sRegisterFigPlayerTypeOnce, RegisterFigPlayerType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigPlaybackItemGetTypeID()
{
  MEMORY[0x19402F294](&FigPlaybackItemGetClassID_sRegisterFigPlaybackItemTypeOnce, RegisterFigPlaybackItemType);
  return CMBaseClassGetCFTypeID();
}

uint64_t ExtraPrivatePlayerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t ExtraPrivatePlayerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t ExtraPrivatePlayerBeginInterruption(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v2 && (v3 = *(uint64_t (**)(uint64_t))(v2 + 8)) != 0)
    return v3(a1);
  else
    return 4294954514;
}

uint64_t ExtraPrivatePlayerEndInterruption(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v4 && (v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16)) != 0)
    return v5(a1, a2);
  else
    return 4294954514;
}

const char *FigPlayerPlaythroughPredictionGetDescription(unsigned int a1)
{
  if (a1 > 3)
    return "INVALID";
  else
    return off_1E2F84870[a1];
}

const char *FigPlayerPlaybackStateGetDescription(unsigned int a1)
{
  if (a1 > 6)
    return "INVALID";
  else
    return off_1E2F84890[a1];
}

const char *FigPlaybackRateChangeReasonGetDescription(int a1)
{
  if ((a1 - 1) > 0x2A)
    return "Unknown";
  else
    return off_1E2F848C8[a1 - 1];
}

const char *FigPlaybackItemSeekReasonGetDescription(int a1)
{
  if ((a1 - 1) > 6)
    return "Unknown";
  else
    return off_1E2F84A20[a1 - 1];
}

uint64_t FigPlaybackGetActionAtEndForString(const void *a1)
{
  if (CFEqual(a1, CFSTR("Stop")))
    return 1;
  if (CFEqual(a1, CFSTR("Advance")))
    return 0;
  if (CFEqual(a1, CFSTR("None")))
    return 2;
  if (CFEqual(a1, CFSTR("StopAtEndOfQueue")))
    return 3;
  return 0;
}

uint64_t FigPlaybackGetEffectiveActionAtEnd(uint64_t result, uint64_t a2)
{
  _BOOL4 v2;

  v2 = a2 < 2;
  if ((_DWORD)result != 3)
    v2 = 0;
  if (result >= 3)
    return v2;
  else
    return result;
}

CFStringRef FigPlayerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPlayer %p]"), a1);
}

CFStringRef FigPlaybackItemCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPlaybackItem %p]"), a1);
}

uint64_t FigPlaybackCoordinatorRemoteRetainCopiedPlaybackCoordinator(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t v6;
  uint64_t DerivedStorage;

  if (a1)
  {
    if (!a2)
      return FigSignalErrorAt();
    v4 = FigXPCRemoteClientRetainCopiedObject();
    if (!(_DWORD)v4)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      FigPlaybackCoordinatorGetClassID();
      v6 = CMDerivedObjectCreate();
      if (!(_DWORD)v6)
      {
        FigPlaybackCoordinatorGetCMBaseObject(0);
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        *(_QWORD *)(DerivedStorage + 56) = CFDictionaryCreateMutable(v5, 0, 0, 0);
        FigPlaybackCoordinatorGetCMBaseObject(0);
        *(_QWORD *)CMBaseObjectGetDerivedStorage() = a1;
        v6 = FigXPCRemoteClientAssociateObject();
        FigXPCRemoteClientKillServerOnTimeout();
        if (!(_DWORD)v6)
        {
          v6 = 0;
          *a2 = 0;
        }
      }
      return v6;
    }
    return v4;
  }
  return FigSignalErrorAt();
}

uint64_t FigXPCPlaybackCoordinatorClientHandleMessage(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  uint64_t OpCode;

  if (!FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(a1) || !a2)
    return FigSignalErrorAt();
  if (!a1)
    return 0;
  v4 = CFGetTypeID(a1);
  if (v4 != FigPlaybackCoordinatorGetTypeID())
    return 0;
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

BOOL FigXPCPlaybackCoordinatorClientHandleNotificationFilter()
{
  return FigCFEqual() != 0;
}

uint64_t FigXPCPlaybackCoordinatorClientStartAsSubclient(uint64_t a1, uint64_t a2)
{
  _QWORD v5[6];

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (gCoordinatorRemoteClient || !a1)
    return FigSignalErrorAt();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __FigXPCPlaybackCoordinatorClientStartAsSubclient_block_invoke;
  v5[3] = &__block_descriptor_tmp_19;
  v5[4] = a1;
  v5[5] = a2;
  if (FigXPCPlaybackCoordinatorClientStartAsSubclient_onceToken != -1)
    dispatch_once(&FigXPCPlaybackCoordinatorClientStartAsSubclient_onceToken, v5);
  return 0;
}

uint64_t remoteXPCPlaybackCoordinator_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  FigPlaybackCoordinatorGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  return FigXPCRelease();
}

__CFString *remoteXPCPlaybackCoordinator_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlaybackCoordinator_RemoteXPC %p>"), a1);
  return Mutable;
}

uint64_t remoteXPCPlaybackCoordinator_CopyProperty(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1)
    v2 = FigXPCSendStdCopyPropertyMessage();
  else
    v2 = FigSignalErrorAt();
  v3 = v2;
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlaybackCoordinator_SetProperty(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1)
    v2 = FigXPCSendStdSetPropertyMessage();
  else
    v2 = FigSignalErrorAt();
  v3 = v2;
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlaybackCoordinator_BeginSuspension(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const void *int64;
  uint64_t v8;

  FigPlaybackCoordinatorGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1 || !a2)
    goto LABEL_9;
  v5 = DerivedStorage;
  v6 = FigXPCCreateBasicMessage();
  if ((_DWORD)v6)
    goto LABEL_10;
  v6 = FigXPCMessageSetTimelineCoordinatorSuspension();
  if ((_DWORD)v6)
    goto LABEL_10;
  v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v6)
    goto LABEL_10;
  int64 = (const void *)xpc_dictionary_get_int64(0, "SuspensionID");
  if (!int64)
  {
LABEL_9:
    v6 = FigSignalErrorAt();
LABEL_10:
    v8 = v6;
    goto LABEL_8;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v5 + 56), a2, int64);
  v8 = 0;
LABEL_8:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t remoteXPCPlaybackCoordinator_EndSuspension(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t, __int128 *);
  __int128 v6;
  uint64_t v7;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v4)
    return 4294954514;
  v6 = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  return v4(a1, a2, &v6);
}

uint64_t remoteXPCPlaybackCoordinator_EndSuspensionProposingNewTime(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *Value;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;

  FigPlaybackCoordinatorGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1
    && a2
    && (v5 = DerivedStorage, (Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 56), a2)) != 0))
  {
    v7 = (int64_t)Value;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 56), a2);
    v8 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v8)
    {
      FigXPCMessageSetCMTime();
      xpc_dictionary_set_int64(0, "SuspensionID", v7);
      v8 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  v9 = v8;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v9;
}

uint64_t remoteXPCPlaybackCoordinator_SetWeakMediumAndCallbacks(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  const void *v11;
  uint64_t v12;

  FigPlaybackCoordinatorGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1 || !a2 || !a3)
  {
    v8 = FigSignalErrorAt();
LABEL_11:
    v12 = v8;
    goto LABEL_9;
  }
  v7 = DerivedStorage;
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8)
    goto LABEL_11;
  v8 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v8)
    goto LABEL_11;
  v9 = *a3;
  v10 = a3[1];
  *(_QWORD *)(v7 + 48) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = v10;
  v11 = *(const void **)(v7 + 8);
  if (v11)
    CFRelease(v11);
  v12 = 0;
  *(_QWORD *)(v7 + 8) = FigCFWeakReferenceHolderCreateWithReferencedObject();
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v12;
}

uint64_t remoteXPCPlaybackCoordinator_HandleAssignmentOfUUIDToLocalParticipantByMedium(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
    {
      v2 = FigXPCMessageSetCFObject();
      if (!(_DWORD)v2)
        v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    v2 = FigSignalErrorAt();
  }
  v3 = v2;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v3;
}

uint64_t remoteXPCPlaybackCoordinator_CopyParticipantSnapshotForUUID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2 && a3)
  {
    v6 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v6)
    {
      v6 = FigXPCMessageSetCFObject();
      if (!(_DWORD)v6)
      {
        v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v6)
          v6 = FigXPCMessageCopyTimelineCoordinatorParticipantSnapshot();
      }
    }
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  v7 = v6;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t remoteXPCPlaybackCoordinator_CopyParticipantSnapshots(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v4)
        v4 = FigXPCMessageCopyTimelineCoordinatorParticipantSnapshots();
    }
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_HandleRemovalOfParticipantStateFromMedium(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      v4 = FigXPCMessageSetCFObject();
      if (!(_DWORD)v4)
        v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_GetExpectedTimeAtHostTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMTime;
  uint64_t v7;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1 && a3 && (*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    CMTime = FigXPCCreateBasicMessage();
    if (!(_DWORD)CMTime)
    {
      CMTime = FigXPCMessageSetCMTime();
      if (!(_DWORD)CMTime)
      {
        CMTime = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)CMTime)
          CMTime = FigXPCMessageGetCMTime();
      }
    }
  }
  else
  {
    CMTime = FigSignalErrorAt();
  }
  v7 = CMTime;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t remoteXPCPlaybackCoordinator_HandleUpdatedTimelineStateFromMedium(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      v4 = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)v4)
        v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_HandleReplacementOfAllParticipantStatesFromMedium(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      v4 = FigXPCMessageSetCFArray();
      if (!(_DWORD)v4)
        v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_HandleUpdatedParticipantStateFromMedium(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      v4 = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)v4)
        v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_DisconnectFromMedium()
{
  uint64_t v0;
  uint64_t v1;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  v0 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v0)
    v0 = FigXPCRemoteClientSendSyncMessage();
  v1 = v0;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v1;
}

uint64_t remoteXPCPlaybackCoordinator_ResetGroupTimelineExpectations(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  FigPlaybackCoordinatorGetCMBaseObject();
  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
      v2 = FigXPCRemoteClientSendSyncMessage();
  }
  else
  {
    v2 = FigSignalErrorAt();
  }
  v3 = v2;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v3;
}

void remoteXPCPlaybackCoordinator_asyncReloadCompletion(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)*a1;
  FigPlaybackCoordinatorGetCMBaseObject(*a1);
  CMBaseObjectGetDerivedStorage();
  if (!FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_int64(0, "FetchID", a1[1]);
    FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  if (v2)
    CFRelease(v2);
  FigXPCRelease();
  free(a1);
}

uint64_t FigAudioFileStreamFormatReaderCreateFromStream(const void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  const void **DerivedStorage;
  uint64_t Instance;
  _QWORD *v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  uint64_t v13;
  AudioFileTypeID AudioFileInfos;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  _QWORD *v21;
  CFTypeRef v22;
  CFNumberRef number;
  _QWORD inPropertyData[5];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  FigAudioFileShouldNotUseAllowList();
  FigFormatReaderGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    return v6;
  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  number = 0;
  qmemcpy(inPropertyData, "CRYLe3dicdcsduolfmrppsfrofnp", 28);
  if (sRegisterFigAudioFileStreamInfoTypeOnce != -1)
    dispatch_once_f(&sRegisterFigAudioFileStreamInfoTypeOnce, 0, (dispatch_function_t)RegisterFigAudioFileStreamInfoType);
  Instance = _CFRuntimeCreateInstance();
  v9 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (!Instance)
  {
    v19 = FigSignalErrorAt();
    if ((_DWORD)v19)
      return v19;
    goto LABEL_20;
  }
  v10 = Instance;
  *(_QWORD *)(Instance + 16) = CFRetain(a1);
  *(_QWORD *)(v10 + 328) = -1;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v12 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (!v12)
  {
    v19 = 4294954514;
    goto LABEL_16;
  }
  v13 = v12(CMBaseObject, *MEMORY[0x1E0CA2070], *v9, &number);
  if ((_DWORD)v13)
    goto LABEL_31;
  if (!number)
  {
    v13 = FigSignalErrorAt();
LABEL_31:
    v19 = v13;
    goto LABEL_16;
  }
  CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(v10 + 24));
  CFRelease(number);
  AudioFileInfos = FigDetermineAudioFileTypeHintAndCreateAudioFileInfos((uint64_t)a1, 0, 0, 0);
  v15 = AudioFileStreamOpen((void *)v10, (AudioFileStream_PropertyListenerProc)AudioFileStream_FigPropertyListenerProc, (AudioFileStream_PacketsProc)AudioFileStream_FigPacketsProc, AudioFileInfos, (AudioFileStreamID *)(v10 + 48));
  if (!(_DWORD)v15)
  {
    AudioFileStreamSetProperty(*(AudioFileStreamID *)(v10 + 48), 0x6F707470u, 0x1Cu, inPropertyData);
    *(_QWORD *)(v10 + 32) = FigReentrantMutexCreate();
    *(_QWORD *)(v10 + 40) = FigSimpleMutexCreate();
    *(_QWORD *)(v10 + 72) = 0x10000;
    while (1)
    {
      v13 = PushBytesThroughParser(v10);
      if ((_DWORD)v13)
        goto LABEL_31;
      if (*(_BYTE *)(v10 + 56))
      {
        v16 = *(_QWORD *)(v10 + 256);
        if (v16 >= 1 && (v17 = *(unsigned int *)(v10 + 224), (_DWORD)v17))
          v18 = v16 * v17;
        else
          v18 = 0x10000;
        *(_QWORD *)(v10 + 72) = v18;
        *DerivedStorage = (const void *)v10;
        goto LABEL_20;
      }
    }
  }
  v19 = v15;
  FigSignalErrorAt();
LABEL_16:
  CFRelease((CFTypeRef)v10);
  if ((_DWORD)v19)
    return v19;
LABEL_20:
  v20 = *DerivedStorage;
  inPropertyData[0] = 0;
  FigTrackReaderGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    return v6;
  v21 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (v20)
    v22 = CFRetain(v20);
  else
    v22 = 0;
  v19 = 0;
  *v21 = v22;
  DerivedStorage[1] = (const void *)inPropertyData[0];
  *a4 = 0;
  return v19;
}

void FigAudioFileStreamFormatReaderFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *FigAudioFileStreamFormatReaderCopyDebugDescription()
{
  uint64_t v0;
  __CFString *Mutable;
  const void *v2;
  CFStringRef v3;

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = *(const void **)(v0 + 16);
  if (v2)
  {
    v3 = CFCopyDescription(v2);
    CFStringAppendFormat(Mutable, 0, CFSTR("\tFigAudioFileStreamFormatReader: stream<%@>"), v3);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("\tFigAudioFileStreamFormatReader: stream<%@>"), 0);
  }
  return Mutable;
}

uint64_t FigAudioFileStreamFormatReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  const void **v13;
  int v14;
  const void *v15;
  const __CFDictionary *GaplessInfoDictionary;
  const __CFDictionary *v17;
  __CFArray *Mutable;
  uint64_t v19;
  const __CFDictionary *v20;
  UInt32 ioPropertyDataSize;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v8 = *DerivedStorage;
  *a4 = 0;
  if (CFEqual(a2, CFSTR("Duration")))
  {
    v9 = v8;
    v10 = 0;
    v11 = 1;
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("NominalDuration")))
  {
    v9 = v8;
    v10 = 0;
LABEL_8:
    v11 = 0;
LABEL_9:
    if (CopyAudioFileStreamDuration(v9, v10, v11, a3, a4))
      return 0;
    else
      return 4294954513;
  }
  if (CFEqual(a2, CFSTR("EstimatedDuration")))
  {
    v9 = v8;
    v10 = 1;
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("Identifier")))
  {
    v13 = (const void **)kFigFormatReaderIdentifier_AudioFileStream;
LABEL_20:
    v15 = *v13;
LABEL_21:
    GaplessInfoDictionary = (const __CFDictionary *)CFRetain(v15);
LABEL_22:
    v17 = GaplessInfoDictionary;
LABEL_23:
    result = 0;
LABEL_24:
    *a4 = v17;
    return result;
  }
  if (CFEqual(a2, CFSTR("SampleCursorTimeAccuracyIsExact")))
  {
    v13 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("AccurateDurationIsKnown")))
  {
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    v14 = *(_DWORD *)(v8 + 276);
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("iTunesGaplessInfo")))
  {
    GaplessInfoDictionary = CreateGaplessInfoDictionary(v8);
    goto LABEL_22;
  }
  if (CFEqual(a2, CFSTR("iTunesSoundCheckVolumeNormalization")))
  {
    if (*(_QWORD *)(v8 + 408))
    {
      LODWORD(v20) = 0;
      ioPropertyDataSize = 4;
      if (!AudioFormatGetProperty(0x73636462u, 8u, (const void *)(v8 + 408), &ioPropertyDataSize, &v20))
      {
        GaplessInfoDictionary = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &v20);
        if (GaplessInfoDictionary)
          goto LABEL_22;
      }
    }
    return 4294954512;
  }
  if (CFEqual(a2, CFSTR("SoundCheckInfo")))
  {
    v15 = *(const void **)(v8 + 408);
    if (v15)
      goto LABEL_21;
    goto LABEL_34;
  }
  if (CFEqual(a2, CFSTR("LyricsScanCompleted")))
  {
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    v14 = *(unsigned __int8 *)(v8 + 320);
LABEL_18:
    if (!v14)
      v13 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("Lyrics")))
  {
    v15 = *(const void **)(v8 + 312);
    if (v15)
      goto LABEL_21;
    goto LABEL_34;
  }
  if (!CFEqual(a2, CFSTR("MetadataReaders")))
  {
    if (CFEqual(a2, CFSTR("ID3MetadataReader")) || CFEqual(a2, CFSTR("MetadataReader")))
    {
      EnsureMetadataReaderCreated(v8, a3);
      v15 = *(const void **)(v8 + 336);
      if (v15)
        goto LABEL_21;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("ID3MetadataReaderBC")))
      {
        if (CFEqual(a2, CFSTR("Chapters")))
        {
          EnsureMetadataReaderCreated(v8, a3);
          GaplessInfoDictionary = FigID3MetadataCreateChapterArrayFromTopLevelTableOfContents(a3, *(_QWORD *)(v8 + 336));
          goto LABEL_22;
        }
        return 4294954512;
      }
      v20 = 0;
      v19 = *(_QWORD *)(v8 + 328);
      if ((v19 & 0x8000000000000000) == 0)
      {
        result = FigMetadataReaderCreateForID3WithBackwardCompatibility(a3, *(const void **)(v8 + 16), v19, &v20);
        v17 = v20;
        goto LABEL_24;
      }
    }
LABEL_34:
    v17 = 0;
    goto LABEL_23;
  }
  EnsureMetadataReaderCreated(v8, a3);
  if (!*(_QWORD *)(v8 + 336))
    return 0;
  Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, *(const void **)(v8 + 336));
  result = 0;
  *a4 = Mutable;
  return result;
}

uint64_t FigAudioFileStreamFormatReaderSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("MarkPacketOffsetFromEOF")))
    return 4294954512;
  CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(*(_QWORD *)DerivedStorage + 324));
  return 0;
}

uint64_t CopyAudioFileStreamDuration(uint64_t a1, int a2, int a3, const __CFAllocator *a4, CFDictionaryRef *a5)
{
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFDictionaryRef v13;
  int AudioFileStreamPacketAndFrameCount;
  CFMutableDictionaryRef DefaultEnhanced;
  CMTime v17;
  CMTime v18;

  v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  GetAudioFileStreamPacketTableInfo(a1);
  if (!*(_BYTE *)(a1 + 345))
  {
    if (!a2 && !*(_DWORD *)(a1 + 276))
      return 0;
    do
      AudioFileStreamPacketAndFrameCount = GetAudioFileStreamPacketAndFrameCount(a1);
    while (AudioFileStreamPacketAndFrameCount == 1836020325);
    if (AudioFileStreamPacketAndFrameCount)
      return 0;
    v10 = *(_QWORD *)(a1 + 296);
    if (a3)
    {
      DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(*(const AudioFormatListItem **)(a1 + 264));
      LODWORD(v17.value) = 0;
      if (FigCFDictionaryGetInt32IfPresent())
        v10 = (v10 - SLODWORD(v17.value)) & ~((v10 - SLODWORD(v17.value)) >> 63);
      if (DefaultEnhanced)
        CFRelease(DefaultEnhanced);
    }
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(a1 + 352);
  if (a3)
  {
LABEL_5:
    CMTimeMake(&v18, v10, *(_DWORD *)(a1 + 252));
    v17 = v18;
    v13 = CMTimeCopyAsDictionary(&v17, a4);
    *a5 = v13;
    if (v13)
      return 1;
    goto LABEL_16;
  }
  v11 = *(int *)(a1 + 360);
  v12 = *(int *)(a1 + 364);
  if (((v11 + v12) ^ 0x7FFFFFFFFFFFFFFFLL) >= v10)
  {
    v10 += v12 + v11;
    goto LABEL_5;
  }
LABEL_16:
  FigSignalErrorAt();
  return 0;
}

CFMutableDictionaryRef CreateGaplessInfoDictionary(uint64_t a1)
{
  CFMutableDictionaryRef Enhanced_NoCorrection;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a1 + 345))
    Enhanced_NoCorrection = FigGaplessInfoCreateEnhanced_NoCorrection(*(const AudioFormatListItem **)(a1 + 264), *(_DWORD *)(a1 + 360), *(_DWORD *)(a1 + 364), *(_QWORD *)(a1 + 352));
  else
    Enhanced_NoCorrection = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 40));
  return Enhanced_NoCorrection;
}

uint64_t EnsureMetadataReaderCreated(uint64_t a1, const __CFAllocator *a2)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, _QWORD, _QWORD, CFBooleanRef *);
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  uint64_t v15;
  int v16;
  uint64_t valuePtr;
  CFNumberRef number;
  CFBooleanRef BOOLean;

  number = 0;
  BOOLean = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
  if (*(_QWORD *)(a1 + 336))
    return MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a1 + 328);
  if (v4 != -1)
    goto LABEL_3;
  if (!*(_BYTE *)(a1 + 344))
  {
    valuePtr = 0;
    v16 = 0;
    v15 = 0;
    *(_BYTE *)(a1 + 344) = 1;
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v6 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (!v6)
      goto LABEL_19;
    v7 = *MEMORY[0x1E0C9AE00];
    if (v6(CMBaseObject, *MEMORY[0x1E0CA2078], *MEMORY[0x1E0C9AE00], &BOOLean))
      goto LABEL_19;
    if (!CFBooleanGetValue(BOOLean))
      goto LABEL_20;
    v8 = CMByteStreamGetCMBaseObject();
    v9 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (!v9 || v9(v8, *MEMORY[0x1E0CA2070], v7, &number))
    {
LABEL_19:
      FigSignalErrorAt();
      goto LABEL_20;
    }
    CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
    v10 = valuePtr - 128;
    if (valuePtr >= 128)
    {
      v11 = *(_QWORD *)(a1 + 16);
      v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
      if (v12 && !v12(v11, 3, v10, &v16, &v15))
      {
        if ((unsigned __int16)v16 == 16724 && BYTE2(v16) == 71)
        {
          v4 = valuePtr - 128;
          *(_QWORD *)(a1 + 328) = valuePtr - 128;
        }
        else
        {
          v4 = *(_QWORD *)(a1 + 328);
        }
LABEL_3:
        if ((v4 & 0x8000000000000000) == 0)
          FigMetadataReaderCreateForID3(a2, *(const void **)(a1 + 16), v4, (_QWORD *)(a1 + 336));
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  if (BOOLean)
    CFRelease(BOOLean);
  if (number)
    CFRelease(number);
  return MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
}

uint64_t GetAudioFileStreamPacketTableInfo(uint64_t result)
{
  uint64_t v1;
  UInt32 ioPropertyDataSize;

  if (!*(_BYTE *)(result + 345))
  {
    v1 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 40));
    ioPropertyDataSize = 16;
    if (!AudioFileStreamGetProperty(*(AudioFileStreamID *)(v1 + 48), 0x706E666Fu, &ioPropertyDataSize, (void *)(v1 + 352))&& *(uint64_t *)(v1 + 352) >= 1)
    {
      *(_BYTE *)(v1 + 345) = 1;
      if ((*(_DWORD *)(v1 + 360) & 0x80000000) != 0)
        *(_DWORD *)(v1 + 360) = 0;
      if ((*(_DWORD *)(v1 + 364) & 0x80000000) != 0)
        *(_DWORD *)(v1 + 364) = 0;
    }
    return MEMORY[0x19402EF04](*(_QWORD *)(v1 + 40));
  }
  return result;
}

uint64_t GetAudioFileStreamPacketAndFrameCount(uint64_t a1)
{
  uint64_t Property;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  UInt32 ioPropertyDataSize;

  if (!*(_DWORD *)(a1 + 272))
  {
    ioPropertyDataSize = 0;
    if (*(_DWORD *)(a1 + 276))
    {
      LODWORD(v10) = 8;
      Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x70636E74u, (UInt32 *)&v10, (void *)(a1 + 288));
      if ((_DWORD)Property)
        return Property;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      ioPropertyDataSize = 24;
      v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 304);
      v3 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x6279706Bu, &ioPropertyDataSize, &v10);
      if ((_DWORD)v3 == 1836020325)
      {
        MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
        Property = PushBytesThroughParser(a1);
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
        if ((_DWORD)Property)
          return Property;
        v4 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x6279706Bu, &ioPropertyDataSize, &v10);
        if ((_DWORD)v4)
          return v4;
      }
      else
      {
        Property = v3;
        if ((_DWORD)v3)
          return Property;
      }
      *(_QWORD *)(a1 + 288) = v11;
    }
    v5 = *(unsigned int *)(a1 + 228);
    v6 = *(_QWORD *)(a1 + 288);
    if ((_DWORD)v5)
    {
      v7 = v6 * v5;
LABEL_21:
      *(_QWORD *)(a1 + 296) = v7;
      goto LABEL_22;
    }
    if (!v6)
    {
      *(_QWORD *)(a1 + 296) = 0;
LABEL_22:
      Property = 0;
      *(_DWORD *)(a1 + 272) = 1;
      return Property;
    }
    v10 = 0;
    v4 = MapPacketNumberToFrameNumber(a1, v6 - 1, &v10);
    if (!(_DWORD)v4)
    {
      if (v6 < 2)
        v8 = 0;
      else
        v8 = v10 / (v6 - 1);
      v7 = v8 + v10;
      goto LABEL_21;
    }
    return v4;
  }
  return 0;
}

uint64_t PushBytesThroughParser(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, unint64_t *);
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, size_t *);
  CFTypeRef *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  unint64_t v19;
  size_t v20;

  v20 = 0;
  v1 = *(_QWORD *)(a1 + 88);
  if (v1 >= *(_QWORD *)(a1 + 24))
    return 4294954423;
  v19 = 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 24);
  if (!v4 || (!v4(v3, v1, &v19) ? (v5 = v19 == 0) : (v5 = 1), v5))
  {
    if ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 88)) >= 1024)
      v6 = 1024;
    else
      v6 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 88);
    if (v6)
      goto LABEL_19;
    return 4294954423;
  }
  if (v19 >= *(_QWORD *)(a1 + 72))
    v6 = *(_QWORD *)(a1 + 72);
  else
    v6 = v19;
  v8 = *(_DWORD *)(a1 + 324);
  if (v8 && *(_QWORD *)(a1 + 88) + v6 > *(_QWORD *)(a1 + 24) - *(int *)(a1 + 248) * (uint64_t)v8)
    v6 = v19;
LABEL_19:
  if (v6 < 0)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 32);
  if (!v11)
    return 4294954514;
  v12 = (CFTypeRef *)(a1 + 96);
  v13 = v11(v9, v6, v10, a1 + 96, &v20);
  if ((_DWORD)v13)
    return v13;
  v14 = 0;
  *(_QWORD *)(a1 + 104) = 0;
  do
  {
    CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 96), v14, (size_t *)(a1 + 112), 0, (char **)(a1 + 120));
    v15 = AudioFileStreamParseBytes(*(AudioFileStreamID *)(a1 + 48), *(_DWORD *)(a1 + 112), *(const void **)(a1 + 120), 0);
    if ((_DWORD)v15)
    {
      v7 = v15;
      FigSignalErrorAt();
      return v7;
    }
    v14 = *(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = v14;
  }
  while (v14 < v20);
  v16 = *(_QWORD *)(a1 + 88) + v20;
  *(_QWORD *)(a1 + 88) = v16;
  if (v16 == *(_QWORD *)(a1 + 24))
    AudioFileStreamParseBytes(*(AudioFileStreamID *)(a1 + 48), 0, 0, 0);
  v17 = *(int *)(a1 + 324);
  if ((_DWORD)v17 && *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 24))
  {
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 152) - v17;
    *(_BYTE *)(a1 + 192) = 1;
  }
  if (*v12)
    CFRelease(*v12);
  v7 = 0;
  *v12 = 0;
  return v7;
}

uint64_t MapPacketNumberToFrameNumber(uint64_t a1, int64_t a2, int64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t Property;
  int64_t v7;
  UInt32 ioPropertyDataSize;
  _QWORD outPropertyData[3];

  v4 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v4)
    v5 = *(unsigned int *)(a1 + 228);
  else
    v5 = 1;
  if ((uint64_t)(0x7FFFFFFFFFFEA06FLL / v5) <= a2)
  {
    Property = 0;
    *a3 = 0x7FFFFFFFFFFEA06FLL;
  }
  else
  {
    if ((_DWORD)v4)
    {
      Property = 0;
      v7 = v4 * a2;
    }
    else
    {
      outPropertyData[0] = 0;
      outPropertyData[1] = a2;
      outPropertyData[2] = 0;
      ioPropertyDataSize = 24;
      Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x706B6672u, &ioPropertyDataSize, outPropertyData);
      if ((_DWORD)Property)
      {
        FigSignalErrorAt();
        return Property;
      }
      v7 = outPropertyData[0];
    }
    *a3 = v7;
  }
  return Property;
}

uint64_t FigAudioFileStreamFormatReaderGetTrackCount(uint64_t a1, _QWORD *a2)
{
  *a2 = 1;
  return 0;
}

uint64_t FigAudioFileStreamFormatReaderCopyTrackByIndex(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t DerivedStorage;
  CFTypeRef v10;

  if (a2)
    return 4294954453;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v10 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v10)
      v10 = CFRetain(v10);
    *a3 = v10;
  }
  if (a4)
    *a4 = 1936684398;
  result = 0;
  if (a5)
    *a5 = 1;
  return result;
}

uint64_t FigAudioFileStreamFormatReaderCopyTrackByID(uint64_t a1, int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v7;

  if (a2 != 1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v7 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v7)
      v7 = CFRetain(v7);
    *a3 = v7;
  }
  if (a4)
    *a4 = 1936684398;
  return 0;
}

uint64_t FigAudioFileStreamFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t DerivedStorage;
  CFTypeRef v9;

  result = 4294954453;
  if (!a2 && a3 == 1936684398)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a4)
    {
      v9 = *(CFTypeRef *)(DerivedStorage + 8);
      if (v9)
        v9 = CFRetain(v9);
      *a4 = v9;
    }
    result = 0;
    if (a5)
      *a5 = 1;
  }
  return result;
}

void FigAudioFileStreamTrackReaderFinalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *FigAudioFileStreamTrackReaderCopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const void *v2;
  CFStringRef v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (*(_QWORD *)DerivedStorage)
  {
    v2 = *(const void **)(*(_QWORD *)DerivedStorage + 16);
    if (v2)
    {
      v3 = CFCopyDescription(v2);
      CFStringAppendFormat(Mutable, 0, CFSTR("\tFigAudioFileStreamTrackReader: stream<%@> trackID %d"), v3, 1);
      if (v3)
        CFRelease(v3);
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("\tFigAudioFileStreamTrackReader: stream<%@> trackID %d"), 0, 1);
    }
  }
  return Mutable;
}

uint64_t FigAudioFileStreamTrackReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t *DerivedStorage;
  uint64_t v8;
  void *v9;
  const __CFAllocator *v10;
  float *p_valuePtr;
  CFNumberType v12;
  uint64_t result;
  const void *v14;
  void *v15;
  unint64_t v16;
  float v17;
  float v18;
  int valuePtr;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v8 = *DerivedStorage;
  *a4 = 0;
  if (CFEqual(a2, CFSTR("TrackFormatDescriptionArray")))
  {
    if (!*(_QWORD *)(v8 + 264))
      return 0;
    v9 = CFArrayCreate(a3, (const void **)(v8 + 264), 1, MEMORY[0x1E0C9B378]);
    goto LABEL_12;
  }
  if (!CFEqual(a2, CFSTR("TrackTimescale")))
  {
    if (CFEqual(a2, CFSTR("TrackEnabled")))
    {
      v14 = (const void *)*MEMORY[0x1E0C9AE50];
    }
    else
    {
      if (!CFEqual(a2, CFSTR("LoudnessInfo")))
      {
        if (!CFEqual(a2, CFSTR("EstimatedDataRate")))
          return 4294954512;
        LODWORD(v16) = *(_DWORD *)(v8 + 424);
        v17 = (double)v16 * 0.125;
        v18 = v17;
        v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        p_valuePtr = &v18;
        v12 = kCFNumberFloat32Type;
        goto LABEL_7;
      }
      v14 = *(const void **)(v8 + 416);
      if (!v14)
      {
        v15 = 0;
        goto LABEL_13;
      }
    }
    v9 = (void *)CFRetain(v14);
    goto LABEL_12;
  }
  valuePtr = *(_DWORD *)(v8 + 252);
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  p_valuePtr = (float *)&valuePtr;
  v12 = kCFNumberSInt32Type;
LABEL_7:
  v9 = CFNumberCreate(v10, v12, p_valuePtr);
LABEL_12:
  v15 = v9;
LABEL_13:
  result = 0;
  *a4 = v15;
  return result;
}

uint64_t FigAudioFileStreamTrackReaderGetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a3)
    *a3 = 1936684398;
  if (a2)
    *a2 = 1;
  return 0;
}

uint64_t FigAudioFileStreamTrackReaderCopySampleCursorService(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  uint64_t v4;
  _QWORD *DerivedStorage;
  CFTypeRef v6;

  v3 = *(const void **)CMBaseObjectGetDerivedStorage();
  FigSampleCursorServiceGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (v3)
      v6 = CFRetain(v3);
    else
      v6 = 0;
    *DerivedStorage = v6;
    *a2 = 0;
  }
  return v4;
}

void FigAudioFileStreamCursorService_finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *FigAudioFileStreamCursorService_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFormatReader_AudioFileStream_CursorService %p>{ samplerate %d }"), a1, *(unsigned int *)(*(_QWORD *)DerivedStorage + 252));
  return Mutable;
}

uint64_t FigAudioFileStreamCursorService_createCursorAtPresentationTimeStamp(uint64_t a1, CMTime *a2, _QWORD *a3, BOOL *a4, BOOL *a5)
{
  const void *v9;
  uint64_t v10;
  const void *v11;
  uint64_t *DerivedStorage;
  uint64_t v13;
  CMTime v15;
  const void *v16;

  v9 = *(const void **)CMBaseObjectGetDerivedStorage();
  v16 = 0;
  v10 = createFigAudioPacketAccessor(v9, &v16);
  if ((_DWORD)v10)
    return v10;
  v11 = v16;
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v15 = *a2;
  v13 = moveToSampleAtPTS(DerivedStorage, &v15, a4, a5);
  if ((_DWORD)v13)
    CFRelease(v11);
  else
    *a3 = v11;
  return v13;
}

uint64_t FigAudioFileStreamCursorService_createCursorNearPresentationTimeStamp(uint64_t a1, CMTime *a2, uint64_t a3, _QWORD *a4, BOOL *a5, BOOL *a6)
{
  CMTime v7;

  v7 = *a2;
  return FigAudioFileStreamCursorService_createCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t FigAudioFileStreamCursorService_createCursorAtFirstSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(const void **)CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v4 = createFigAudioPacketAccessor(v3, &v7);
  if (!(_DWORD)v4)
  {
    v5 = v7;
    *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
    *a2 = v5;
  }
  return v4;
}

uint64_t FigAudioFileStreamCursorService_createCursorAtLastSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  uint64_t DerivedStorage;
  uint64_t AudioFileStreamPacketAndFrameCount;
  const void *v9;

  v3 = *(_QWORD **)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v4 = createFigAudioPacketAccessor(v3, &v9);
  if ((_DWORD)v4)
    return v4;
  v5 = v9;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  AudioFileStreamPacketAndFrameCount = GetAudioFileStreamPacketAndFrameCount((uint64_t)v3);
  if ((_DWORD)AudioFileStreamPacketAndFrameCount)
  {
    CFRelease(v5);
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 8) = v3[36] - 1;
    *a2 = v5;
  }
  return AudioFileStreamPacketAndFrameCount;
}

uint64_t createFigAudioPacketAccessor(const void *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *DerivedStorage;
  CFTypeRef v6;

  FigSampleCursorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a1)
      v6 = CFRetain(a1);
    else
      v6 = 0;
    *DerivedStorage = v6;
    DerivedStorage[1] = 0;
    *a2 = 0;
  }
  return v4;
}

uint64_t moveToSampleAtPTS(uint64_t *a1, CMTime *a2, BOOL *a3, BOOL *a4)
{
  int32_t v8;
  int32_t v9;
  uint64_t value;
  uint64_t v11;
  uint64_t v12;
  uint64_t Property;
  unint64_t v14;
  uint64_t AudioFileStreamPacketAndFrameCount;
  uint64_t v16;
  BOOL v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v25;
  CMTime v26;
  CMTime time1;

  time1 = *a2;
  v26 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v8 = CMTimeCompare(&time1, &v26);
  if (v8 < 0)
  {
    value = 0;
    v11 = *a1;
    v12 = *(unsigned int *)(*a1 + 228);
    if ((_DWORD)v12)
    {
LABEL_13:
      v14 = value / v12;
      goto LABEL_14;
    }
  }
  else
  {
    if ((a2->flags & 0x1D) == 1)
    {
      memset(&time1, 0, sizeof(time1));
      v9 = *(_DWORD *)(*a1 + 252);
      v26 = *a2;
      CMTimeConvertScale(&time1, &v26, v9, kCMTimeRoundingMethod_RoundTowardZero);
      value = time1.value;
      v11 = *a1;
    }
    else
    {
      AudioFileStreamPacketAndFrameCount = GetAudioFileStreamPacketAndFrameCount(*a1);
      if ((_DWORD)AudioFileStreamPacketAndFrameCount)
        return AudioFileStreamPacketAndFrameCount;
      v11 = *a1;
      v16 = *(_QWORD *)(*a1 + 288);
      if (v16 >= 2)
      {
        v14 = v16 - 1;
        goto LABEL_15;
      }
      value = *(_QWORD *)(v11 + 296);
    }
    v12 = *(unsigned int *)(v11 + 228);
    if (value > 0x7FFFFFFFFFFEA06ELL)
    {
      if ((_DWORD)v12)
        v25 = *(unsigned int *)(v11 + 228);
      else
        v25 = 1;
      v14 = 0x7FFFFFFFFFFEA06FLL / v25;
      goto LABEL_15;
    }
    if ((_DWORD)v12)
      goto LABEL_13;
  }
  *(_QWORD *)&time1.timescale = 0;
  time1.epoch = 0;
  time1.value = value;
  LODWORD(v26.value) = 24;
  Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v11 + 48), 0x6672706Bu, (UInt32 *)&v26, &time1);
  if ((_DWORD)Property)
  {
    v23 = Property;
    FigSignalErrorAt();
    return v23;
  }
  v14 = *(_QWORD *)&time1.timescale;
LABEL_14:
  if ((v14 & 0x8000000000000000) != 0)
    return 4294954456;
LABEL_15:
  a1[1] = v14;
  if (a3)
  {
    v18 = v8 < 0 || a2->value < 0;
    *a3 = v18;
  }
  if (!a4)
    return 0;
  v19 = *a1;
  v20 = a1[1];
  LODWORD(v21) = *(_DWORD *)(*a1 + 228);
  if (v21 <= 1)
    v21 = 1;
  else
    v21 = v21;
  if ((uint64_t)(0x7FFFFFFFFFFEA06FLL / v21) <= v20)
  {
    v22 = 0;
  }
  else if (*(_DWORD *)(v19 + 272))
  {
    v22 = *(_QWORD *)(v19 + 288) > v20;
  }
  else
  {
    time1.value = 0;
    LODWORD(v26.value) = 24;
    *(_QWORD *)&time1.timescale = v20;
    time1.epoch = 0;
    v22 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v19 + 48), 0x706B6672u, (UInt32 *)&v26, &time1) == 0;
  }
  v23 = 0;
  *a4 = !v22;
  return v23;
}

void FigAudioFileStreamCursor_finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *FigAudioFileStreamCursor_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFormatReader_AudioFile_SampleCursor %p>{ curPacketNum %lld }"), a1, *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t FigAudioFileStreamCursor_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, UInt32 *);
  uint64_t SampleDependencyInfo;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, UInt32 *);
  uint64_t Property;
  CFTypeRef *v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CMTimeValue v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, CMTimeValue *);
  uint64_t v31;
  CMTimeValue v32;
  uint64_t v33;
  int64_t v34;
  CMTimeValue v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  CMTimeValue v41;
  uint64_t v42;
  CMTimeValue value;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, UInt32 *);
  CMTime *p_outPropertyData;
  uint64_t v47;
  CMTime v49;
  UInt32 v50;
  UInt32 v51;
  UInt32 ioPropertyDataSize[2];
  uint64_t v53;
  uint64_t v54;
  UInt32 v55[2];
  uint64_t v56;
  uint64_t v57;
  CMTimeValue v58;
  UInt32 v59;
  CMTime outPropertyData;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    v9 = (uint64_t *)DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, CFSTR("CursorPlayableThroughEndOfTrack")))
    {
      v10 = (_QWORD *)CMBaseObjectGetDerivedStorage();
      v11 = *v10;
      v12 = *(_QWORD *)(*v10 + 16);
      v13 = *(_QWORD *)(*v10 + 304);
      v14 = *(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v14)
      {
        *(_QWORD *)v55 = 0;
        SampleDependencyInfo = v14(v12, v13, v55);
        if ((_DWORD)SampleDependencyInfo)
          return SampleDependencyInfo;
        if (*(_QWORD *)v55 + *(_QWORD *)(v11 + 304) >= *(_QWORD *)(v11 + 24))
          goto LABEL_32;
        v16 = v10[1];
        v17 = *(_QWORD *)(v11 + 136);
        if (v16 < v17 || v16 >= *(_QWORD *)(v11 + 152) + v17)
        {
LABEL_12:
          outPropertyData.value = 0;
          ioPropertyDataSize[0] = 24;
          *(_QWORD *)&outPropertyData.timescale = v16;
          outPropertyData.epoch = 0;
          Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v11 + 48), 0x706B6279u, ioPropertyDataSize, &outPropertyData);
          if ((_DWORD)Property == 1836020325)
          {
            v22 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_33:
            v35 = (CMTimeValue)CFRetain(*v22);
LABEL_69:
            v26 = 0;
            *a4 = v35;
            return v26;
          }
          v26 = Property;
          if (!(_DWORD)Property)
          {
            v42 = *(_QWORD *)(v11 + 16);
            value = outPropertyData.value;
            v44 = *(_QWORD *)(v11 + 304);
            v45 = *(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (v45)
            {
              SampleDependencyInfo = v45(v42, v44 + value, v55);
              if (!(_DWORD)SampleDependencyInfo)
              {
                if (*(_QWORD *)(v11 + 304) + outPropertyData.value + *(_QWORD *)v55 >= *(_QWORD *)(v11 + 24))
                  v22 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
                else
                  v22 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
                goto LABEL_33;
              }
              return SampleDependencyInfo;
            }
            return 4294954514;
          }
          return v26;
        }
        v18 = *(_QWORD *)(v11 + 16);
        v19 = *(_QWORD *)(v11 + 88);
        v20 = *(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v20)
        {
          SampleDependencyInfo = v20(v18, v19, v55);
          if ((_DWORD)SampleDependencyInfo)
            return SampleDependencyInfo;
          if (*(_QWORD *)v55 + *(_QWORD *)(v11 + 88) < *(_QWORD *)(v11 + 24))
          {
            v16 = v10[1];
            goto LABEL_12;
          }
LABEL_32:
          v22 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
          goto LABEL_33;
        }
      }
      return 4294954514;
    }
    if (!CFEqual(a2, CFSTR("CursorPlayableHorizon")))
    {
      if (CFEqual(a2, CFSTR("ApproximateSampleLocation")))
      {
        v36 = (_QWORD *)CMBaseObjectGetDerivedStorage();
        v37 = *v36;
        LODWORD(v38) = *(_DWORD *)(*v36 + 228);
        if (v38 <= 1)
          v38 = 1;
        else
          v38 = v38;
        if (v36[1] >= (int64_t)(0x7FFFFFFFFFFEA06FLL / v38))
          return 4294954454;
        v39 = v36;
        if (!*(_DWORD *)(v37 + 280))
        {
          outPropertyData.value = 0;
          v55[0] = 8;
          AudioFileStreamGetProperty(*(AudioFileStreamID *)(v37 + 48), 0x646F6666u, v55, &outPropertyData);
          *(_DWORD *)(v37 + 280) = 1;
          *(_QWORD *)(v37 + 304) = *(_QWORD *)(v37 + 128) + outPropertyData.value;
        }
        v40 = *(unsigned int *)(v37 + 224);
        if ((_DWORD)v40)
        {
          v41 = *(_QWORD *)(v37 + 304) + v39[1] * v40;
        }
        else
        {
          memset(&outPropertyData, 0, sizeof(outPropertyData));
          v55[0] = 24;
          *(_QWORD *)&outPropertyData.timescale = v39[1];
          p_outPropertyData = &outPropertyData;
          v47 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v37 + 48), 0x706B6279u, v55, &outPropertyData);
          if ((_DWORD)v47 == 1836020325)
          {
            p_outPropertyData = (CMTime *)(v37 + 88);
          }
          else
          {
            v26 = v47;
            if ((_DWORD)v47)
              return v26;
          }
          v41 = *(_QWORD *)(v37 + 304) + p_outPropertyData->value;
        }
        outPropertyData.value = v41;
        v35 = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &outPropertyData);
        goto LABEL_69;
      }
      if (CFEqual(a2, CFSTR("SampleDependencyAttributes")))
      {
        outPropertyData.value = 0;
        *(_QWORD *)v55 = 0;
        if (!*(_BYTE *)(*(_QWORD *)CMBaseObjectGetDerivedStorage() + 400))
        {
          v35 = 0;
          goto LABEL_69;
        }
        SampleDependencyInfo = figAudioFileStreamCursor_getSampleDependencyInfo(a1, (BOOL *)v55, &v55[1]);
        if (!(_DWORD)SampleDependencyInfo)
        {
          v26 = FigPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary();
          v35 = outPropertyData.value;
          if ((_DWORD)v26)
          {
            if (outPropertyData.value)
              CFRelease((CFTypeRef)outPropertyData.value);
            return v26;
          }
          goto LABEL_69;
        }
        return SampleDependencyInfo;
      }
      return 4294954512;
    }
    memset(&v49, 0, sizeof(v49));
    memset(&outPropertyData, 0, sizeof(outPropertyData));
    v59 = 24;
    v24 = *v9;
    v23 = v9[1];
    LODWORD(v25) = *(_DWORD *)(*v9 + 228);
    if (v25 <= 1)
      v25 = 1;
    else
      v25 = v25;
    if (v23 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v25))
    {
      v49 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      goto LABEL_68;
    }
    v58 = 0;
    *(_QWORD *)&outPropertyData.timescale = v23;
    v26 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v24 + 48), 0x706B6279u, &v59, &outPropertyData);
    if ((_DWORD)v26 == 1836020325)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(v24 + 32));
      v26 = PushBytesThroughParser(v24);
      MEMORY[0x19402EA24](*(_QWORD *)(v24 + 32));
      if ((_DWORD)v26)
        return v26;
      v26 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v24 + 48), 0x706B6279u, &v59, &outPropertyData);
    }
    if ((_DWORD)v26)
      return v26;
    v27 = *(_QWORD *)(v24 + 16);
    v28 = outPropertyData.value;
    v29 = *(_QWORD *)(v24 + 304);
    v30 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v30 && (v31 = v30(v27, v29 + v28, &v58), (_DWORD)v31 != -12782))
    {
      v26 = v31;
      if ((_DWORD)v31)
        goto LABEL_67;
      v32 = v58 + outPropertyData.value;
    }
    else
    {
      v58 = *(_QWORD *)(v24 + 24) - (outPropertyData.value + *(_QWORD *)(v24 + 304));
      v32 = v58 + outPropertyData.value;
    }
    v56 = 0;
    v57 = 0;
    *(_QWORD *)ioPropertyDataSize = 0;
    v53 = 0;
    v54 = 0;
    *(_QWORD *)v55 = v32;
    v51 = 24;
    v26 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v24 + 48), 0x6279706Bu, &v51, v55);
    if ((_DWORD)v26 == 1836020325)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(v24 + 32));
      v26 = PushBytesThroughParser(v24);
      MEMORY[0x19402EA24](*(_QWORD *)(v24 + 32));
      if ((_DWORD)v26)
        goto LABEL_67;
      v26 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v24 + 48), 0x6279706Bu, &v51, v55);
    }
    if (!(_DWORD)v26)
    {
      v33 = *(unsigned int *)(v24 + 228);
      if ((_DWORD)v33)
      {
        v26 = 0;
        v34 = (v56 - v9[1]) * v33;
      }
      else
      {
        v50 = 24;
        v53 = v56;
        v26 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v24 + 48), 0x706B6672u, &v50, ioPropertyDataSize);
        v34 = *(_QWORD *)ioPropertyDataSize;
      }
      CMTimeMake(&v49, v34, *(_DWORD *)(v24 + 252));
    }
LABEL_67:
    if ((_DWORD)v26)
      return v26;
LABEL_68:
    outPropertyData = v49;
    v35 = (CMTimeValue)CMTimeCopyAsDictionary(&outPropertyData, a3);
    goto LABEL_69;
  }
  return FigSignalErrorAt();
}

uint64_t figAudioFileStreamCursor_getSampleDependencyInfo(uint64_t a1, BOOL *a2, _DWORD *a3)
{
  uint64_t *DerivedStorage;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v6 = *DerivedStorage;
  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  SetupPacketRequest(DerivedStorage[1], 1, (uint64_t)v11, *(_DWORD *)(v6 + 224) == 0, *(unsigned __int8 *)(v6 + 400));
  MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 32));
  v7 = ObtainRequestedPackets(v6, v11);
  MEMORY[0x19402EA24](*(_QWORD *)(v6 + 32));
  if (v7 == -12873)
    v8 = 4294954456;
  else
    v8 = v7;
  if (!(_DWORD)v8)
  {
    v9 = v12;
    if ((_QWORD)v12)
    {
      *a2 = *(_BYTE *)v12 != 0;
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
    }
    else
    {
      *a2 = 1;
    }
    *a3 = v9;
  }
  TearDownPacketRequest((uint64_t)v11);
  return v8;
}

void *SetupPacketRequest(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  void *result;

  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  result = (void *)CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3u, 0, (CMBlockBufferRef *)(a3 + 48));
  if (!(_DWORD)result)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 40) = a2;
    if (a4)
    {
      result = malloc_type_malloc(16 * a2, 0x1000040451B5BE8uLL);
      *(_QWORD *)(a3 + 24) = result;
    }
    if (a5)
    {
      result = malloc_type_malloc(8 * a2, 0x10000404A09149AuLL);
      *(_QWORD *)(a3 + 32) = result;
    }
    *(_BYTE *)(a3 + 56) = 0;
  }
  return result;
}

uint64_t ObtainRequestedPackets(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  SInt64 v7;
  SInt64 v8;
  const void *v9;
  SInt64 v10;
  __int16 v11;
  AudioFileStreamSeekFlags ioFlags;
  SInt64 outDataByteOffset;

  outDataByteOffset = 0;
  ioFlags = 0;
  v11 = 0;
  v4 = a1 + 136;
  result = FillPacketRequestFromCache(a1 + 136, (uint64_t)a2, *(unsigned int *)(a1 + 224), (_BYTE *)&v11 + 1, &v11);
  if ((_DWORD)result)
    return result;
  if ((_BYTE)v11)
    return 0;
LABEL_5:
  v6 = a2[2];
  if (v6 >= a2[1])
    return 0;
  v7 = *a2 + v6;
  if (!v7)
  {
    *(_BYTE *)(a1 + 376) = 0;
    AudioFileStreamSeek(*(AudioFileStreamID *)(a1 + 48), 0, &outDataByteOffset, &ioFlags);
    v10 = 0;
    v8 = *(_QWORD *)(a1 + 304);
    v9 = *(const void **)(a1 + 160);
    if (!v9)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 != *(_QWORD *)(a1 + 80))
  {
    *(_BYTE *)(a1 + 376) = 0;
    result = AudioFileStreamSeek(*(AudioFileStreamID *)(a1 + 48), v7, &outDataByteOffset, &ioFlags);
    if ((_DWORD)result)
      return result;
    v8 = outDataByteOffset + *(_QWORD *)(a1 + 304);
    v7 = v7;
    v9 = *(const void **)(a1 + 160);
    v10 = v7;
    if (!v9)
    {
LABEL_13:
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      *(_OWORD *)(a1 + 136) = xmmword_1932F77B0;
      *(_BYTE *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 88) = v8;
      goto LABEL_14;
    }
LABEL_12:
    CFRelease(v9);
    v10 = v7;
    goto LABEL_13;
  }
LABEL_14:
  while (1)
  {
    result = PushBytesThroughParser(a1);
    if ((_DWORD)result)
      break;
    result = FillPacketRequestFromCache(v4, (uint64_t)a2, *(unsigned int *)(a1 + 224), (_BYTE *)&v11 + 1, &v11);
    if ((_DWORD)result)
      break;
    if (HIBYTE(v11))
    {
      if ((_BYTE)v11)
        return 0;
      goto LABEL_5;
    }
  }
  if ((_DWORD)result == -12873)
  {
    if (a2[2])
      return 0;
    else
      return 4294954423;
  }
  return result;
}

void TearDownPacketRequest(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 48) = 0;
  free(*(void **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

uint64_t FillPacketRequestFromCache(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t appended;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t *v25;
  size_t DataLength;
  size_t v27;
  size_t *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 v33;
  size_t v34;
  uint64_t v35;
  OpaqueCMBlockBuffer *v37;
  OpaqueCMBlockBuffer *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;

  *a4 = 0;
  *a5 = 0;
  v6 = (_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = v9 + *(_QWORD *)a2;
  v11 = v10 - *(_QWORD *)a1;
  if (v10 < *(_QWORD *)a1 || v10 >= *(_QWORD *)a1 + v5)
  {
    appended = 0;
LABEL_42:
    if (v9 < *(_QWORD *)(a2 + 8))
    {
      v45 = *(const void **)(a1 + 24);
      if (v45)
        CFRelease(v45);
      *v6 = 0;
      v6[1] = 0;
      *(_OWORD *)a1 = xmmword_1932F77B0;
      *(_BYTE *)(a1 + 56) = 0;
    }
    return appended;
  }
  v15 = *(_QWORD *)(a2 + 8) - v9;
  v16 = v5 - v11;
  if (v15 >= v16)
    v17 = v16;
  else
    v17 = v15;
  if (*(_BYTE *)(a1 + 56))
  {
    v18 = *(_QWORD *)(a1 + 64);
    v19 = v17 + v11 <= v18 || v18 < v11;
    v20 = v19 || v16 <= v15;
    if (!v20 && v18 != v11)
    {
      v17 = v18 - v11;
      *a5 = 1;
    }
  }
  v22 = *(_QWORD *)(a1 + 32);
  if (!v22)
  {
    v37 = *(OpaqueCMBlockBuffer **)(a2 + 48);
    v38 = *(OpaqueCMBlockBuffer **)(a1 + 24);
    v34 = v17 * a3;
    v27 = v11 * a3;
LABEL_36:
    appended = CMBlockBufferAppendBufferReference(v37, v38, v27, v34, 0);
    v39 = *(_QWORD *)(a1 + 40);
    v40 = *(_QWORD *)(a2 + 16);
    if (v39 && v17)
    {
      v41 = (uint64_t *)(v39 + 8 * v11);
      v42 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v40);
      v43 = v17;
      do
      {
        v44 = *v41++;
        *v42++ = v44;
        --v43;
      }
      while (v43);
      v40 = *(_QWORD *)(a2 + 16);
    }
    *(_QWORD *)(a2 + 16) = v40 + v17;
    *a4 = 1;
    v9 = *(_QWORD *)(a2 + 16);
    goto LABEL_42;
  }
  v24 = *(_QWORD *)(a2 + 16);
  v23 = *(_QWORD *)(a2 + 24);
  v25 = (size_t *)(v22 + 16 * v11);
  DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a2 + 48));
  v27 = *v25;
  v28 = &v25[2 * v17];
  v29 = *(v28 - 2);
  v30 = *((unsigned int *)v28 - 1);
  if (v17)
  {
    v31 = (_OWORD *)(v23 + 16 * v24);
    v32 = v17;
    do
    {
      v33 = *(_OWORD *)v25;
      v25 += 2;
      *v31 = v33;
      *(_QWORD *)v31++ += DataLength - v27;
      --v32;
    }
    while (v32);
  }
  if ((v27 & 0x8000000000000000) == 0)
  {
    v34 = v29 - v27 + v30;
    if (*(_BYTE *)(a1 + 56))
    {
      v35 = *(_QWORD *)(a1 + 64);
      if (v17 + v11 > v35 && v35 >= v11)
      {
        *(_BYTE *)(a2 + 56) = 1;
        *(_QWORD *)(a2 + 64) = v35 - v11 + *(_QWORD *)(a2 + 16);
      }
    }
    v37 = *(OpaqueCMBlockBuffer **)(a2 + 48);
    v38 = *(OpaqueCMBlockBuffer **)(a1 + 24);
    goto LABEL_36;
  }
  return FigSignalErrorAt();
}

uint64_t FigAudioFileStreamCursor_copy(uint64_t a1, _QWORD *a2)
{
  _OWORD *DerivedStorage;
  uint64_t v4;
  _OWORD *v5;
  const void *v6;

  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    v5 = (_OWORD *)CMBaseObjectGetDerivedStorage();
    *v5 = *DerivedStorage;
    v6 = *(const void **)v5;
    if (v6)
      CFRetain(v6);
    *a2 = 0;
  }
  return v4;
}

uint64_t FigAudioFileStreamCursor_compareInDecodeOrder()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 8);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = v2 < v3;
  v5 = v2 > v3;
  if (v4)
    return -1;
  else
    return v5;
}

uint64_t FigAudioFileStreamCursor_getPresentationTimeStamp(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  CMTime v6;
  int64_t value;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  value = 0;
  v4 = MapPacketNumberToFrameNumber(*DerivedStorage, DerivedStorage[1], &value);
  if (!(_DWORD)v4)
  {
    CMTimeMake(&v6, value, *(_DWORD *)(*DerivedStorage + 252));
    *a2 = v6;
  }
  return v4;
}

uint64_t FigAudioFileStreamCursor_getDuration(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  int32_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  CMTime v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v4 = *DerivedStorage;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  if (*(_DWORD *)(v4 + 228))
  {
    v5 = *(_DWORD *)(v4 + 252);
    v6 = *(unsigned int *)(v4 + 228);
LABEL_3:
    CMTimeMake(&v18, v6, v5);
    v7 = 0;
    *a2 = v18;
    return v7;
  }
  v8 = *(_QWORD *)(v4 + 152);
  if (v8)
  {
    v9 = DerivedStorage[1];
    v10 = *(_QWORD *)(v4 + 136);
    if (v9 < v10 || v9 >= v10 + v8)
    {
      if (v8 < 1)
      {
        v5 = *(_DWORD *)(v4 + 252);
        v6 = 1;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v14 = (unsigned int *)(*(_QWORD *)(v4 + 168) + 8);
        while (1)
        {
          v16 = *v14;
          v14 += 4;
          v15 = v16;
          if ((v13 ^ 0x7FFFFFFFFFFFFFFFLL) < v16)
            break;
          v13 += v15;
          if (v8 == ++v12)
          {
            v12 = *(_QWORD *)(v4 + 152);
            break;
          }
        }
        v5 = *(_DWORD *)(v4 + 252);
        v6 = v13 / v12;
      }
      goto LABEL_3;
    }
  }
  else
  {
    v9 = DerivedStorage[1];
  }
  SetupPacketRequest(v9, 1, (uint64_t)&v19, *(_DWORD *)(v4 + 224) == 0, *(unsigned __int8 *)(v4 + 400));
  MEMORY[0x19402EA0C](*(_QWORD *)(v4 + 32));
  LODWORD(v7) = ObtainRequestedPackets(v4, &v19);
  MEMORY[0x19402EA24](*(_QWORD *)(v4 + 32));
  if ((_DWORD)v7 == -12873)
    v7 = 4294954456;
  else
    v7 = v7;
  if (!(_DWORD)v7)
  {
    if (*((_QWORD *)&v20 + 1))
    {
      CMTimeMake(&v18, *(unsigned int *)(*((_QWORD *)&v20 + 1) + 8), *(_DWORD *)(v4 + 252));
      v7 = 0;
      *a2 = v18;
    }
    else
    {
      v7 = FigSignalErrorAt();
    }
  }
  TearDownPacketRequest((uint64_t)&v19);
  return v7;
}

uint64_t FigAudioFileStreamCursor_getDependencyInfo(uint64_t a1, BOOL *a2, _BYTE *a3, _DWORD *a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t result;
  BOOL v13;
  int v14;
  BOOL v15;

  v10 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  if (!a2)
    return 0;
  *a2 = 1;
  if (!*(_BYTE *)(v10 + 400))
    return 0;
  v15 = 0;
  v14 = 0;
  result = figAudioFileStreamCursor_getSampleDependencyInfo(a1, &v15, &v14);
  if (!(_DWORD)result)
  {
    v13 = v15 && v14 == 0;
    *a2 = v13;
  }
  return result;
}

uint64_t FigAudioFileStreamCursor_createSampleBuffer(uint64_t a1, uint64_t a2, CMSampleBufferRef *a3)
{
  uint64_t *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const __CFAllocator *v17;
  const opaqueCMFormatDescription *v18;
  uint64_t v19;
  CMSampleBufferRef v20;
  int v21;
  CFDictionaryRef v22;
  CFDictionaryRef v23;
  int32_t v24;
  opaqueCMSampleBuffer *v25;
  CMTime *p_keys;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CMTimeEpoch v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  BOOL v37;
  CFDictionaryRef v38;
  CFIndex v39;
  const __CFArray *SampleAttachmentsArray;
  void *ValueAtIndex;
  void *v42;
  __int128 v44;
  CMTime v45;
  CMTime rhs;
  __int128 v47;
  __int128 packetDescriptions;
  __int128 v49;
  CMBlockBufferRef dataBuffer[2];
  uint64_t v51;
  CMTime v52;
  CMSampleBufferRef sbuf;
  CMTime time;
  CMTime presentationTimeStamp;
  CMTime values;
  CMTime keys;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
    v7 = CMBaseObjectGetDerivedStorage();
  else
    v7 = 0;
  v8 = *DerivedStorage;
  sbuf = 0;
  memset(&v52, 0, sizeof(v52));
  v51 = 0;
  v49 = 0u;
  *(_OWORD *)dataBuffer = 0u;
  v47 = 0u;
  packetDescriptions = 0u;
  v9 = FigAudioFileStreamCursor_getPresentationTimeStamp(a1, &v52);
  if ((_DWORD)v9)
    return v9;
  if (!v7)
  {
    v11 = DerivedStorage[1];
    v14 = 1;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = DerivedStorage[1];
  v12 = v10 < v11;
  v13 = v10 - v11;
  if (!v12)
  {
    v14 = v13 + 1;
LABEL_9:
    SetupPacketRequest(v11, v14, (uint64_t)&v47, *(_DWORD *)(v8 + 224) == 0, *(unsigned __int8 *)(v8 + 400));
    MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 32));
    v15 = ObtainRequestedPackets(v8, &v47);
    MEMORY[0x19402EA24](*(_QWORD *)(v8 + 32));
    if (v15 == -12873)
      v16 = 4294954456;
    else
      v16 = v15;
    if (!(_DWORD)v16)
    {
      v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v18 = *(const opaqueCMFormatDescription **)(v8 + 264);
      presentationTimeStamp = v52;
      v19 = CMAudioSampleBufferCreateWithPacketDescriptions(v17, dataBuffer[0], 1u, 0, 0, v18, packetDescriptions, &presentationTimeStamp, *((const AudioStreamPacketDescription **)&packetDescriptions + 1), &sbuf);
      if ((_DWORD)v19)
      {
        v16 = v19;
        if (sbuf)
          CFRelease(sbuf);
      }
      else
      {
        if (LOBYTE(dataBuffer[1]))
        {
          v20 = sbuf;
          v21 = *(_DWORD *)(v8 + 228) * *(_DWORD *)(v8 + 324);
          memset(&presentationTimeStamp, 0, sizeof(presentationTimeStamp));
          CMTimeMake(&presentationTimeStamp, v21, (int)*(double *)(v8 + 208));
          keys.value = *MEMORY[0x1E0CA4EC0];
          values.value = (CMTimeValue)CFNumberCreate(v17, kCFNumberCFIndexType, &v51);
          *(_QWORD *)&keys.timescale = *MEMORY[0x1E0CA4EB8];
          time = presentationTimeStamp;
          *(_QWORD *)&values.timescale = CMTimeCopyAsDictionary(&time, v17);
          v22 = CFDictionaryCreate(v17, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CMSetAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA4E38], v22, 0);
          if (values.value)
            CFRelease((CFTypeRef)values.value);
          if (*(_QWORD *)&values.timescale)
            CFRelease(*(CFTypeRef *)&values.timescale);
          if (v22)
            CFRelease(v22);
        }
        if (*(_BYTE *)(v8 + 368) && !*(_BYTE *)(v8 + 345))
        {
          memset(&presentationTimeStamp, 0, sizeof(presentationTimeStamp));
          CMTimeMake(&presentationTimeStamp, *(unsigned int *)(v8 + 372), (int)*(double *)(v8 + 208));
          memset(&time, 0, sizeof(time));
          CMSampleBufferGetPresentationTimeStamp(&time, sbuf);
          keys = presentationTimeStamp;
          values = time;
          if (CMTimeCompare(&keys, &values) >= 1)
          {
            memset(&keys, 0, sizeof(keys));
            values = presentationTimeStamp;
            rhs = time;
            CMTimeSubtract(&keys, &values, &rhs);
            values = keys;
            v23 = CMTimeCopyAsDictionary(&values, v17);
            CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA2728], v23, 1u);
            if (v23)
              CFRelease(v23);
          }
          keys = time;
          values = presentationTimeStamp;
          v24 = CMTimeCompare(&keys, &values);
          v25 = sbuf;
          if (v24 < 1)
          {
            keys = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
            p_keys = &keys;
          }
          else
          {
            keys = time;
            values = presentationTimeStamp;
            CMTimeSubtract(&v45, &keys, &values);
            p_keys = &v45;
          }
          CMSampleBufferSetOutputPresentationTimeStamp(v25, p_keys);
        }
        if (*(_BYTE *)(v8 + 376))
        {
          if (!*(_BYTE *)(v8 + 345))
          {
            v27 = DerivedStorage[1];
            v28 = packetDescriptions;
            v29 = *(_QWORD *)(v8 + 384);
            if ((uint64_t)packetDescriptions + v27 > v29)
            {
              v44 = *MEMORY[0x1E0CA2E68];
              *(_OWORD *)&presentationTimeStamp.value = *MEMORY[0x1E0CA2E68];
              v30 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
              presentationTimeStamp.epoch = v30;
              v31 = v29 - v27;
              if (v29 >= v27)
              {
                if (v31 < (uint64_t)packetDescriptions)
                {
                  v32 = *(_DWORD *)(v8 + 228);
                  if (!v32 && *((_QWORD *)&packetDescriptions + 1))
                    v32 = *(_DWORD *)(*((_QWORD *)&packetDescriptions + 1) + 16 * v31 + 8);
                  v33 = *(_DWORD *)(v8 + 392);
                  if (v32 > v33)
                  {
                    CMTimeMake(&presentationTimeStamp, v32 - v33, (int)*(double *)(v8 + 208));
                    v28 = packetDescriptions;
                  }
                  v34 = v31 + 1;
                  if (v34 < v28)
                  {
                    v35 = 16 * v29 - 16 * v27 + 24;
                    do
                    {
                      v36 = *(unsigned int *)(v8 + 228);
                      if ((_DWORD)v36)
                        v37 = 1;
                      else
                        v37 = *((_QWORD *)&packetDescriptions + 1) == 0;
                      if (!v37)
                        v36 = *(unsigned int *)(*((_QWORD *)&packetDescriptions + 1) + v35);
                      memset(&time, 0, sizeof(time));
                      CMTimeMake(&time, v36, (int)*(double *)(v8 + 208));
                      values = presentationTimeStamp;
                      rhs = time;
                      CMTimeAdd(&keys, &values, &rhs);
                      presentationTimeStamp = keys;
                      ++v34;
                      v35 += 16;
                    }
                    while (v34 < (uint64_t)packetDescriptions);
                  }
                }
              }
              else
              {
                CMSampleBufferGetDuration(&presentationTimeStamp, sbuf);
              }
              time = presentationTimeStamp;
              *(_OWORD *)&keys.value = v44;
              keys.epoch = v30;
              if (CMTimeCompare(&time, &keys) >= 1)
              {
                time = presentationTimeStamp;
                v38 = CMTimeCopyAsDictionary(&time, v17);
                CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA2720], v38, 1u);
                if (v38)
                  CFRelease(v38);
              }
            }
          }
        }
        if (*(_BYTE *)(v8 + 400) && (uint64_t)packetDescriptions >= 1)
        {
          v39 = 0;
          do
          {
            SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
            if (SampleAttachmentsArray)
            {
              ValueAtIndex = (void *)CFArrayGetValueAtIndex(SampleAttachmentsArray, v39);
              if (ValueAtIndex)
              {
                v42 = ValueAtIndex;
                presentationTimeStamp.value = 0;
                FigPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary();
                if (presentationTimeStamp.value)
                {
                  CFDictionaryApplyFunction((CFDictionaryRef)presentationTimeStamp.value, (CFDictionaryApplierFunction)appendAttributesToDictionary, v42);
                  CFRelease((CFTypeRef)presentationTimeStamp.value);
                }
              }
            }
            ++v39;
          }
          while (v39 < (uint64_t)packetDescriptions);
        }
        v16 = 0;
        *a3 = sbuf;
        sbuf = 0;
      }
    }
    TearDownPacketRequest((uint64_t)&v47);
    return v16;
  }
  return FigSignalErrorAt();
}

uint64_t FigAudioFileStreamCursor_stepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t result;
  CMTime v9;
  CMTime value;
  __int16 v11;
  CMTime v12;
  CMTime v13;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  memset(&v13, 0, sizeof(v13));
  memset(&v12, 0, sizeof(v12));
  v5 = *DerivedStorage;
  v4 = DerivedStorage[1];
  LODWORD(v6) = *(_DWORD *)(*DerivedStorage + 228);
  if (v6 <= 1)
    v6 = 1;
  else
    v6 = v6;
  if (v4 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v6))
    return 4294954456;
  v7 = DerivedStorage;
  v11 = 0;
  value.value = 0;
  result = MapPacketNumberToFrameNumber(v5, v4, &value.value);
  if (!(_DWORD)result)
  {
    CMTimeMake(&v13, value.value, *(_DWORD *)(v5 + 252));
    value = v13;
    v9 = *a2;
    CMTimeAdd(&v12, &value, &v9);
    value = v12;
    result = moveToSampleAtPTS(v7, &value, (BOOL *)&v11 + 1, (BOOL *)&v11);
    if (!(_DWORD)result)
    {
      if (HIBYTE(v11) | v11)
        return 4294954456;
      else
        return 0;
    }
  }
  return result;
}

uint64_t FigAudioFileStreamCursor_stepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return FigAudioFileStreamCursor_stepByDecodeTime(a1, &v3);
}

uint64_t FigAudioFileStreamCursor_copyFormatDescription(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(CFTypeRef *)(*(_QWORD *)DerivedStorage + 264);
    if (v4)
      v4 = CFRetain(v4);
    *a2 = v4;
  }
  return 0;
}

uint64_t FigAudioFileStreamCursor_stepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *DerivedStorage;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage[1];
  LODWORD(v7) = *(_DWORD *)(*DerivedStorage + 228);
  if (v7 <= 1)
    v7 = 1;
  else
    v7 = v7;
  if (v6 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v7))
  {
    v8 = 4294954456;
    v9 = DerivedStorage[1];
  }
  else
  {
    v8 = 0;
    v9 = v6 + a2;
    if (a2 <= 0)
      v9 = (v6 + a2) & ~((v6 + a2) >> 63);
  }
  DerivedStorage[1] = v9;
  if (a3)
    *a3 = v9 - v6;
  return v8;
}

void appendAttributesToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

void AudioFileStream_FigPropertyListenerProc(uint64_t a1, uint64_t a2, int a3)
{
  double *v4;
  OSStatus Property;
  double v6;
  OpaqueAudioFileStreamID *v7;
  void *v8;
  AudioFileStreamPropertyID v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  int v16;
  OSStatus PropertyInfo;
  AudioChannelLayout *v18;
  UInt32 v19;
  OSStatus v20;
  int v21;
  UInt32 v22;
  int outPropertyData;
  UInt32 v24;
  unsigned int v25;
  UInt32 v26;
  UInt32 v27[2];
  UInt32 ioPropertyDataSize;
  Boolean outWritable;
  UInt32 outPropertyDataSize[2];

  if (a3 > 1886283374)
  {
    if (a3 <= 1919247480)
    {
      if (a3 == 1886283375)
      {
        GetAudioFileStreamPacketTableInfo(a1);
      }
      else if (a3 == 1886547302)
      {
        v27[0] = 4;
        *(_BYTE *)(a1 + 368) = 0;
        if (!AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x70726D66u, v27, (void *)(a1 + 372))
          && !*(_BYTE *)(a1 + 345))
        {
          *(_BYTE *)(a1 + 368) = 1;
        }
      }
      return;
    }
    if (a3 == 1935893603)
    {
      v27[0] = 8;
      v7 = *(OpaqueAudioFileStreamID **)(a1 + 48);
      v8 = (void *)(a1 + 408);
      v9 = 1935893603;
      goto LABEL_31;
    }
    if (a3 == 1919316848)
    {
      v27[0] = 16;
      *(_BYTE *)(a1 + 376) = 0;
      if (!AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x72667370u, v27, (void *)(a1 + 384))
        && !*(_BYTE *)(a1 + 345))
      {
        *(_BYTE *)(a1 + 376) = 1;
      }
      return;
    }
    if (a3 != 1919247481 || *(_BYTE *)(a1 + 56))
      return;
    *(_BYTE *)(a1 + 56) = 1;
    *(_QWORD *)outPropertyDataSize = 0;
    outWritable = 0;
    ioPropertyDataSize = 40;
    *(_QWORD *)v27 = 0;
    v25 = 0;
    v26 = 8;
    v24 = 4;
    v4 = (double *)(a1 + 208);
    Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x64666D74u, &ioPropertyDataSize, (void *)(a1 + 208));
    if (Property
      || (v22 = 4,
          outPropertyData = 0,
          AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x72726170u, &v22, &outPropertyData),
          *(_BYTE *)(a1 + 400) = outPropertyData != 0,
          (Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x646F6666u, &v26, v27)) != 0))
    {
      v21 = Property;
      FigSignalErrorAt();
    }
    else
    {
      if (AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x706B7562u, &v24, &v25))
      {
        v6 = *(double *)(a1 + 208);
        if (*(_DWORD *)(a1 + 216) == 778924083)
          v25 = (64512000.0 / v6);
      }
      else
      {
        v6 = *v4;
      }
      *(_DWORD *)(a1 + 248) = v25;
      *(_DWORD *)(a1 + 280) = 1;
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 128) + *(_QWORD *)v27;
      if (v6 > 0.0)
      {
        *(_DWORD *)(a1 + 252) = (int)v6;
        v11 = *(_DWORD *)(a1 + 228);
        if (v11)
        {
          v12 = v11 - (v11 & ((int)v6 / 2));
          if ((v11 & ((int)v6 / 2)) == 0)
            v12 = 0;
          v13 = v12 + (int)v6 / 2;
          if (v11 > v13)
            v14 = 1;
          else
            v14 = v13 / v11;
          *(_QWORD *)(a1 + 256) = v14;
        }
        v15 = 0;
        if (AudioFileStreamGetPropertyInfo(*(AudioFileStreamID *)(a1 + 48), 0x6D676963u, &outPropertyDataSize[1], &outWritable)|| !outPropertyDataSize[1])
        {
          goto LABEL_54;
        }
        v15 = malloc_type_malloc(outPropertyDataSize[1], 0x7646B7D9uLL);
        if (v15)
        {
          v16 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x6D676963u, &outPropertyDataSize[1], v15);
          if (!v16)
          {
LABEL_54:
            PropertyInfo = AudioFileStreamGetPropertyInfo(*(AudioFileStreamID *)(a1 + 48), 0x636D6170u, outPropertyDataSize, &outWritable);
            v18 = 0;
            v19 = outPropertyDataSize[0];
            if (!PropertyInfo && outPropertyDataSize[0])
            {
              v18 = (AudioChannelLayout *)malloc_type_malloc(outPropertyDataSize[0], 0x1EA31406uLL);
              v20 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x636D6170u, outPropertyDataSize, v18);
              if (v20)
              {
                v21 = v20;
                goto LABEL_66;
              }
              v19 = outPropertyDataSize[0];
            }
            v21 = CMAudioFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const AudioStreamBasicDescription *)(a1 + 208), v19, v18, outPropertyDataSize[1], v15, 0, (CMAudioFormatDescriptionRef *)(a1 + 264));
            if (!v21)
            {
LABEL_59:
              free(v15);
              free(v18);
              *(_DWORD *)(a1 + 64) = v21;
              return;
            }
LABEL_66:
            FigFormatDescriptionRelease();
            *(_QWORD *)(a1 + 264) = 0;
            goto LABEL_59;
          }
        }
        else
        {
          v16 = FigSignalErrorAt();
        }
        v21 = v16;
LABEL_65:
        v18 = 0;
        goto LABEL_66;
      }
      v21 = FigSignalErrorAt();
    }
    v15 = 0;
    goto LABEL_65;
  }
  if (a3 <= 1768174436)
  {
    if (a3 != 1280922179)
    {
      if (a3 != 1651663220)
        return;
      v27[0] = 4;
      v7 = *(OpaqueAudioFileStreamID **)(a1 + 48);
      v8 = (void *)(a1 + 424);
      v9 = 1651663220;
      goto LABEL_31;
    }
    v27[0] = 8;
    if (!*(_QWORD *)(a1 + 312))
    {
      v10 = (_QWORD *)(a1 + 312);
      if (!AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x4C595243u, v27, (void *)(a1 + 312)))
      {
        if (*v10)
          *(_BYTE *)(a1 + 320) = 1;
      }
    }
  }
  else
  {
    if (a3 != 1768174437)
    {
      if (a3 != 1819243876)
      {
        if (a3 == 1885564532 && !*(_DWORD *)(a1 + 272))
          *(_DWORD *)(a1 + 276) = 1;
        return;
      }
      v27[0] = 8;
      v7 = *(OpaqueAudioFileStreamID **)(a1 + 48);
      v8 = (void *)(a1 + 416);
      v9 = 1819243876;
LABEL_31:
      AudioFileStreamGetProperty(v7, v9, v27, v8);
      return;
    }
    v27[0] = 0;
    outPropertyDataSize[1] = 4;
    if (*(_QWORD *)(a1 + 328) == -1
      && !AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x69643365u, &outPropertyDataSize[1], v27))
    {
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 88) + (int)v27[0];
    }
  }
}

void AudioFileStream_FigPacketsProc(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, _QWORD *a5)
{
  void *v9;
  uint64_t v10;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t DataLength;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  char v29;
  char *v30;
  _OWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  const __CFAllocator *v36;
  int64_t v37;
  unint64_t v38;
  UInt32 ioPropertyDataSize;
  CMBlockBufferRef outPropertyData;
  uint64_t v41;

  v9 = 0;
  v10 = a3;
  if (!a5 || !*(_BYTE *)(a1 + 400))
    goto LABEL_12;
  v12 = malloc_type_malloc(8 * a3, 0x10000404A09149AuLL);
  v9 = v12;
  if (!v12)
  {
LABEL_10:
    v15 = a2;
    outPropertyData = 0;
    goto LABEL_13;
  }
  if (!a3)
  {
    v10 = 0;
    goto LABEL_10;
  }
  v13 = 0;
  v14 = v12 + 1;
  while (1)
  {
    ioPropertyDataSize = 16;
    outPropertyData = (CMBlockBufferRef)(v13 + *(_QWORD *)(a1 + 80));
    v41 = 0;
    if (AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x706B6470u, &ioPropertyDataSize, &outPropertyData))
      break;
    *((_BYTE *)v14 - 4) = (_DWORD)v41 != 0;
    *v14 = HIDWORD(v41);
    v14 += 2;
    if (v10 == ++v13)
      goto LABEL_12;
  }
  free(v9);
  v9 = 0;
LABEL_12:
  v15 = a2;
  outPropertyData = 0;
  if (a5)
  {
LABEL_13:
    DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 160));
    v17 = *a5;
    v18 = *(char **)(a1 + 168);
    if (v18)
    {
      v19 = (uint64_t *)(a1 + 152);
      v20 = *(_QWORD *)(a1 + 152);
      v21 = *(_QWORD *)(a1 + 184);
      if (v21 - v20 >= v10)
      {
        v27 = &v18[16 * v20];
        if (!v9)
        {
          v30 = 0;
          if (!v10)
          {
LABEL_37:
            v29 = 0;
            *v19 = v20 + v10;
            v28 = a5[2 * v10 - 2] - v17 + HIDWORD(a5[2 * v10 - 1]);
            goto LABEL_38;
          }
LABEL_32:
          v31 = a5;
          v32 = v9;
          v33 = v10;
          do
          {
            *(_OWORD *)v27 = *v31;
            *(_QWORD *)v27 += DataLength - v17;
            if (v9)
              *(_QWORD *)v30 = *v32;
            ++v32;
            v30 += 8;
            ++v31;
            v27 += 16;
            --v33;
          }
          while (v33);
          v20 = *v19;
          goto LABEL_37;
        }
        v25 = *(char **)(a1 + 176);
LABEL_27:
        v30 = &v25[8 * v20];
        if (!v10)
          goto LABEL_37;
        goto LABEL_32;
      }
      v22 = 64;
      if (v10 > 64)
        v22 = v10;
      v23 = v21 + v22;
      v24 = (char *)malloc_type_realloc(v18, 16 * (v21 + v22), 0x1000040451B5BE8uLL);
      *(_QWORD *)(a1 + 184) = v23;
      *(_QWORD *)(a1 + 168) = v24;
      if (v9)
      {
        v25 = (char *)malloc_type_realloc(*(void **)(a1 + 176), 8 * v23, 0x10000404A09149AuLL);
LABEL_23:
        *(_QWORD *)(a1 + 176) = v25;
        v19 = (uint64_t *)(a1 + 152);
        v20 = *(_QWORD *)(a1 + 152);
        v27 = (char *)(*(_QWORD *)(a1 + 168) + 16 * v20);
        goto LABEL_27;
      }
    }
    else
    {
      v26 = 128;
      if (v10 > 128)
        v26 = v10;
      *(_QWORD *)(a1 + 184) = v26;
      *(_QWORD *)(a1 + 152) = 0;
      v24 = (char *)malloc_type_malloc(16 * v26, 0x1000040451B5BE8uLL);
      *(_QWORD *)(a1 + 168) = v24;
      if (v9)
      {
        v25 = (char *)malloc_type_malloc(8 * *(_QWORD *)(a1 + 184), 0x10000404A09149AuLL);
        goto LABEL_23;
      }
    }
    v30 = 0;
    v19 = (uint64_t *)(a1 + 152);
    v20 = *(_QWORD *)(a1 + 152);
    v27 = &v24[16 * v20];
    if (!v10)
      goto LABEL_37;
    goto LABEL_32;
  }
  v17 = 0;
  v28 = v10 * (unint64_t)*(unsigned int *)(a1 + 224);
  *(_QWORD *)(a1 + 152) += v10;
  v29 = 1;
LABEL_38:
  v34 = *(_QWORD *)(a1 + 120);
  if (v34 > a4 || v34 + *(_QWORD *)(a1 + 112) <= a4)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v15 - v17, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v15 - v17, 1u, &outPropertyData))
      {
        goto LABEL_60;
      }
      CMBlockBufferReplaceDataBytes((const void *)(a4 + v17), outPropertyData, 0, v15 - v17);
      v35 = 0;
      goto LABEL_47;
    }
LABEL_61:
    if (!FigSignalErrorAt())
      goto LABEL_60;
    goto LABEL_62;
  }
  v35 = v17 + a4 - v34 + *(_QWORD *)(a1 + 104);
  if (v35 < 0 || (v28 & 0x8000000000000000) != 0)
    goto LABEL_61;
  v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMBlockBufferRef *)(a1 + 96), v35, v28, 0, &outPropertyData))
  {
    goto LABEL_60;
  }
LABEL_47:
  if (*(_QWORD *)(a1 + 160))
    goto LABEL_50;
  if (!CMBlockBufferCreateEmpty(v36, 8u, 0, (CMBlockBufferRef *)(a1 + 160)))
  {
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 80);
LABEL_50:
    if (*(_QWORD *)(a1 + 144) == -1)
    {
      if ((v29 & 1) != 0)
      {
        v37 = *(_QWORD *)(a1 + 304) + *(_QWORD *)(a1 + 136) * *(unsigned int *)(a1 + 224);
      }
      else
      {
        v38 = *(_QWORD *)(a1 + 120);
        if (v38 > a4 || v38 + *(_QWORD *)(a1 + 112) <= a4)
          goto LABEL_57;
        v37 = *(_QWORD *)(a1 + 88)
            + v35
            - *(_QWORD *)(*(_QWORD *)(a1 + 168) + 16 * (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 136)));
      }
      *(_QWORD *)(a1 + 144) = v37;
    }
LABEL_57:
    CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 160), outPropertyData, 0, 0, 0);
    if (outPropertyData)
      CFRelease(outPropertyData);
    *(_QWORD *)(a1 + 80) += v10;
    goto LABEL_60;
  }
LABEL_62:
  if (outPropertyData)
    CFRelease(outPropertyData);
LABEL_60:
  free(v9);
}

uint64_t RegisterFigAudioFileStreamInfoType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAudioFileStreamInfoID = result;
  return result;
}

double InitFigAudioFileStreamInfo(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FinalizeFigAudioFileStreamInfo(uint64_t a1)
{
  const void *v2;
  const void *v3;
  OpaqueAudioFileStreamID *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = *(const void **)(a1 + 96);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 160);
  if (v3)
    CFRelease(v3);
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 176));
  FigFormatDescriptionRelease();
  v4 = *(OpaqueAudioFileStreamID **)(a1 + 48);
  if (v4)
    AudioFileStreamClose(v4);
  v5 = *(const void **)(a1 + 16);
  if (v5)
    CFRelease(v5);
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  v6 = *(const void **)(a1 + 312);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 408);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 416);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 336);
  if (v9)
    CFRelease(v9);
}

uint64_t FigDataChannelResourceServer_CreateServedState(const void *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;

  if (a1 && a2 && a3)
  {
    v5 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004023CB03E4uLL);
    if (!v5 || (v6 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (v5[2] = v6) == 0))
    {
      v8 = FigSignalErrorAt();
      goto LABEL_8;
    }
    v7 = CFRetain(a1);
    v8 = 0;
    v5[1] = v7;
    *a3 = v5;
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  v5 = 0;
LABEL_8:
  FigDataChannelResourceServer_DisposeServedState(v5);
  return v8;
}

void FigDataChannelResourceServer_DisposeServedState(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  void (*v7)(const void *, uint64_t);
  const void *v8;
  const void *v9;

  if (a1)
  {
    v2 = a1[1];
    if (v2)
    {
      v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v3)
        v3(v2);
      v4 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v4)
      {
        v5 = (const void *)v4;
        v6 = a1[1];
        v7 = *(void (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
        if (v7)
          v7(v5, v6);
        CFRelease(v5);
      }
      v8 = (const void *)a1[1];
      if (v8)
      {
        CFRelease(v8);
        a1[1] = 0;
      }
    }
    v9 = (const void *)a1[2];
    if (v9)
      CFRelease(v9);
    free(a1);
  }
}

uint64_t AssureDefaultAttributes(uint64_t a1, const __CFAllocator *a2, CMFormatDescriptionRef desc)
{
  uint64_t result;
  __int128 v7;
  const void *v8;
  __int128 v9;
  const void *v10;
  const void *v11;
  const __CFAllocator *v12;
  CMTextDisplayFlags v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFDictionaryRef v22;
  uint64_t i;
  const void *v24;
  CFStringRef fontNameOut;
  CGFloat fontSizeOut;
  Boolean underlineOut;
  Boolean italicOut[2];
  uint16_t localFontIDOut;
  CMTextJustificationValue verticalJustificationOut[2];
  CMTextDisplayFlags displayFlagsOut;
  void *values;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void *keys;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  CGFloat colorComponentsOut[5];

  colorComponentsOut[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
    return 0;
  displayFlagsOut = 0;
  *(_WORD *)verticalJustificationOut = 0;
  localFontIDOut = 0;
  *(_WORD *)italicOut = 0;
  underlineOut = 0;
  fontNameOut = 0;
  fontSizeOut = 0.0;
  v49 = 0;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v40 = 0;
  v39 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  if (!desc)
    return 4294966852;
  if (CMFormatDescriptionGetMediaType(desc) == 1935832172 && CMFormatDescriptionGetMediaSubType(desc) == 1937010800
    || CMFormatDescriptionGetMediaType(desc) == 1668310898
    || CMFormatDescriptionGetMediaType(desc) == 1952807028 && CMFormatDescriptionGetMediaSubType(desc) == 1634301044)
  {
    v7 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    *(_OWORD *)(a1 + 8) = *MEMORY[0x1E0C9D648];
    *(_OWORD *)(a1 + 24) = v7;
    v8 = *(const void **)(a1 + 40);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 40) = 0;
    }
    result = 0;
    *(_WORD *)(a1 + 64) = 1;
  }
  else if (WebVTTIsFormatDescriptionForWebVTT(desc))
  {
    colorComponentsOut[0] = 0.0;
    v9 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    *(_OWORD *)(a1 + 8) = *MEMORY[0x1E0C9D648];
    *(_OWORD *)(a1 + 24) = v9;
    v10 = *(const void **)(a1 + 40);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 40) = 0;
    }
    *(_WORD *)(a1 + 64) = 1;
    v11 = *(const void **)(a1 + 48);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 48) = 0;
    }
    result = WebVTTCreateMetadataDictionaryFromFormatDescripton(desc, 1, (CFDictionaryRef *)colorComponentsOut);
    if (!(_DWORD)result && *(_QWORD *)&colorComponentsOut[0])
      *(CGFloat *)(a1 + 48) = colorComponentsOut[0];
  }
  else
  {
    result = CMTextFormatDescriptionGetDisplayFlags(desc, &displayFlagsOut);
    if (!(_DWORD)result)
    {
      keys = (void *)*MEMORY[0x1E0CA5298];
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &displayFlagsOut);
      v13 = displayFlagsOut;
      *(_BYTE *)(a1 + 65) = (displayFlagsOut & 0x80000000) != 0;
      *(_BYTE *)(a1 + 64) = (v13 & 0x20000000) != 0;
      result = CMTextFormatDescriptionGetDefaultTextBox(desc, 1u, 0.0, (CGRect *)(a1 + 8));
      if (!(_DWORD)result)
      {
        result = CMTextFormatDescriptionGetJustification(desc, &verticalJustificationOut[1], verticalJustificationOut);
        if (!(_DWORD)result)
        {
          *(_QWORD *)&v42 = *MEMORY[0x1E0CA52A0];
          *(_QWORD *)&v33 = CFNumberCreate(v12, kCFNumberSInt8Type, &verticalJustificationOut[1]);
          *((_QWORD *)&v42 + 1) = *MEMORY[0x1E0CA52A8];
          *((_QWORD *)&v33 + 1) = CFNumberCreate(v12, kCFNumberSInt8Type, verticalJustificationOut);
          result = CMTextFormatDescriptionGetDefaultStyle(desc, &localFontIDOut, &italicOut[1], italicOut, &underlineOut, &fontSizeOut, colorComponentsOut);
          if (!(_DWORD)result)
          {
            v14 = *MEMORY[0x1E0C9AE50];
            v15 = *MEMORY[0x1E0C9AE40];
            v16 = italicOut[1] ? *MEMORY[0x1E0C9AE50] : *MEMORY[0x1E0C9AE40];
            v17 = *MEMORY[0x1E0CA2A50];
            *(_QWORD *)&v43 = *MEMORY[0x1E0CA2978];
            *((_QWORD *)&v43 + 1) = v17;
            v18 = italicOut[0] ? v14 : v15;
            *(_QWORD *)&v34 = v16;
            *((_QWORD *)&v34 + 1) = v18;
            v19 = *MEMORY[0x1E0CA2B38];
            v20 = underlineOut ? v14 : v15;
            *(_QWORD *)&v35 = v20;
            v21 = *MEMORY[0x1E0CA2A20];
            *(_QWORD *)&v44 = v19;
            *((_QWORD *)&v44 + 1) = v21;
            *((_QWORD *)&v35 + 1) = FigCreateCFArrayFromColorValues();
            *(_QWORD *)&v45 = *MEMORY[0x1E0CA52B0];
            *(_QWORD *)&v36 = CFNumberCreate(v12, kCFNumberCGFloatType, &fontSizeOut);
            result = CMTextFormatDescriptionGetFontName(desc, localFontIDOut, &fontNameOut);
            if (!(_DWORD)result)
            {
              *((_QWORD *)&v45 + 1) = *MEMORY[0x1E0CA2A00];
              *((_QWORD *)&v36 + 1) = CFRetain(fontNameOut);
              v22 = CFDictionaryCreate(a2, (const void **)&keys, (const void **)&values, 9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v22)
              {
                *(_QWORD *)(a1 + 40) = v22;
                *(_QWORD *)a1 = FigFormatDescriptionRetain();
              }
              for (i = 0; i != 72; i += 8)
              {
                v24 = *(void **)((char *)&values + i);
                if (v24)
                  CFRelease(v24);
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigTextSampleBufferDecryptSample(uint64_t a1, opaqueCMSampleBuffer *a2, _QWORD *a3)
{
  const void *Decryptor;
  const void *v7;
  CFTypeID v8;
  uint64_t TypeID;
  const void *v10;
  CMFormatDescriptionRef FormatDescription;
  CMBlockBufferRef DataBuffer;
  const __CFAllocator *v13;
  size_t DataLength;
  uint64_t v15;
  CMBlockBufferRef v16;
  CMBlockBufferRef v17;
  size_t v18;
  CMBlockBufferRef v19;
  _QWORD *v20;
  uint64_t (*v21)(CMBlockBufferRef, CMBlockBufferRef, CMBlockBufferRef);
  uint64_t v22;
  CMBlockBufferRef v23;
  uint64_t v24;
  uint64_t CopyWithNoData;
  CMBlockBufferRef blockBufferOut;
  CMBlockBufferRef v28;

  blockBufferOut = 0;
  Decryptor = (const void *)FigSampleBufferGetDecryptor();
  if (Decryptor)
  {
    v7 = Decryptor;
    if (Decryptor != *(const void **)(a1 + 56))
    {
      v8 = CFGetTypeID(Decryptor);
      TypeID = FigCPECryptorGetTypeID();
      v10 = *(const void **)(a1 + 56);
      if (v8 == TypeID)
      {
        *(_QWORD *)(a1 + 56) = v7;
        CFRetain(v7);
        if (v10)
          CFRelease(v10);
      }
      else if (v10)
      {
        CFRelease(*(CFTypeRef *)(a1 + 56));
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  if (FigCPEIsSupportedFormatDescription((uint64_t)FormatDescription) && !*(_QWORD *)(a1 + 56))
  {
    v15 = FigSignalErrorAt();
    goto LABEL_36;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    blockBufferOut = (CMBlockBufferRef)CFRetain(DataBuffer);
  }
  else
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    DataLength = CMBlockBufferGetDataLength(DataBuffer);
    v15 = CMBlockBufferCreateContiguous(v13, DataBuffer, v13, 0, 0, DataLength, 0, &blockBufferOut);
    if ((_DWORD)v15)
      goto LABEL_36;
  }
  v16 = *(CMBlockBufferRef *)(a1 + 56);
  if (v16)
  {
    v17 = blockBufferOut;
    v18 = CMBlockBufferGetDataLength(blockBufferOut);
    v28 = 0;
    v15 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v18, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v18, 1u, &v28);
    if (!(_DWORD)v15)
    {
      v19 = v28;
      v20 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v20 >= 4uLL
        && (v21 = (uint64_t (*)(CMBlockBufferRef, CMBlockBufferRef, CMBlockBufferRef))v20[4]) != 0)
      {
        v22 = v21(v16, v17, v19);
        if (!(_DWORD)v22)
        {
          v23 = blockBufferOut;
          v16 = v28;
          blockBufferOut = v28;
          if (v28)
            CFRetain(v28);
          if (v23)
            CFRelease(v23);
          goto LABEL_22;
        }
        v24 = v22;
      }
      else
      {
        v24 = 4294954514;
      }
      CFRelease(v28);
LABEL_26:
      v16 = 0;
      goto LABEL_30;
    }
LABEL_36:
    v24 = v15;
    goto LABEL_26;
  }
LABEL_22:
  if (FigCFEqual())
  {
    v24 = 0;
  }
  else
  {
    CopyWithNoData = FigSampleBufferCreateCopyWithNoData();
    if ((_DWORD)CopyWithNoData)
    {
      v24 = CopyWithNoData;
    }
    else
    {
      v24 = CMSampleBufferSetDataBuffer(0, blockBufferOut);
      if (!(_DWORD)v24)
        *a3 = 0;
    }
  }
LABEL_30:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v16)
    CFRelease(v16);
  return v24;
}

uint64_t FigTextSampleBufferCopyAttributedString(uint64_t a1, const __CFAllocator *a2, CMSampleBufferRef sbuf, __CFAttributedString **a4, char *a5, _BYTE *a6, double *a7)
{
  double v12;
  double v13;
  double v14;
  double v15;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t v17;
  OpaqueCMBlockBuffer *DataBuffer;
  char *v19;
  size_t v20;
  const UInt8 *v21;
  unsigned int v22;
  unsigned int v23;
  CFIndex v24;
  int v25;
  const __CFAllocator *v26;
  CFIndex v27;
  CFStringEncoding v28;
  Boolean v29;
  CFStringRef v30;
  const __CFString *v31;
  const __CFString *v32;
  CFIndex Length;
  const __CFString *v34;
  CFArrayRef Results;
  __CFString *MutableCopy;
  __CFString *v37;
  const __CFArray *v38;
  unint64_t v39;
  __CFAttributedString *Mutable;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  CFIndex Count;
  int v51;
  const __CFString *v52;
  int v53;
  int v54;
  int v55;
  CFIndex v57;
  uint64_t v58;
  char *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  CFIndex v65;
  char v66;
  CFIndex v67;
  int v68;
  CFIndex v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  CFIndex v75;
  const __CFDictionary *v76;
  uint64_t i;
  const void *v78;
  const __CFString *attrName;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  char *v87;
  unint64_t v88;
  __CFAttributedString **v89;
  double *v90;
  char v93;
  uint64_t v94;
  CFIndex v95;
  __CFAttributedString *v96;
  const __CFString *v97;
  char *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  const opaqueCMFormatDescription *desc;
  unsigned int v103;
  unsigned int v104;
  const __CFAllocator *allocator;
  char *dataPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  double valuePtr;
  CFStringRef fontNameOut;
  void *values[2];
  __int128 v112;
  __int128 v113;
  void *keys[8];
  CFRange v115;
  CFRange v116;
  CFRange v117;
  CFRange v118;
  CFRange v119;
  CFRange v120;
  CFRange v121;

  keys[6] = *(void **)MEMORY[0x1E0C80C00];
  dataPointerOut = 0;
  v12 = *(double *)(a1 + 8);
  v13 = *(double *)(a1 + 16);
  v14 = *(double *)(a1 + 24);
  v15 = *(double *)(a1 + 32);
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  v17 = AssureDefaultAttributes(a1, a2, FormatDescription);
  if ((_DWORD)v17)
    return v17;
  v90 = a7;
  totalLengthOut = 0;
  lengthAtOffsetOut = 0;
  v93 = *(_BYTE *)(a1 + 65);
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  CMBlockBufferGetDataPointer(DataBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  v19 = dataPointerOut;
  v20 = totalLengthOut;
  v21 = (const UInt8 *)(dataPointerOut + 2);
  v22 = *(unsigned __int16 *)dataPointerOut;
  dataPointerOut += 2;
  v23 = bswap32(v22);
  if ((v23 & 0x80000000) != 0)
    return FigSignalErrorAt();
  v24 = SHIWORD(v23);
  if (SHIWORD(v23) + 2 > totalLengthOut)
    return FigSignalErrorAt();
  dataPointerOut = (char *)&v21[SHIWORD(v23)];
  if (SHIWORD(v23) < 2)
    goto LABEL_8;
  v25 = *v21;
  if (v25 == 255)
  {
    if (v19[3] != 254)
    {
LABEL_8:
      v26 = a2;
      v27 = v24;
      v28 = 134217984;
      v29 = 0;
      goto LABEL_9;
    }
  }
  else if (v25 != 254 || v19[3] != 255)
  {
    goto LABEL_8;
  }
  v26 = a2;
  v27 = v24;
  v28 = 256;
  v29 = 1;
LABEL_9:
  v30 = CFStringCreateWithBytes(v26, v21, v27, v28, v29);
  v31 = v30;
  if (!v30)
    return FigSignalErrorAt();
  v89 = a4;
  v99 = a1;
  v32 = (const __CFString *)CFRetain(v30);
  Length = CFStringGetLength(v32);
  v34 = CFSTR("\r\n");
  if (CFStringFind(v32, CFSTR("\r\n"), 0).length
    || (v34 = CFSTR("\n\r"), (unint64_t)CFStringFind(v32, CFSTR("\n\r"), 0).length))
  {
    v119.location = 0;
    v119.length = Length;
    Results = CFStringCreateArrayWithFindResults(a2, v32, v34, v119, 0);
    MutableCopy = CFStringCreateMutableCopy(a2, Length, v32);
    if (MutableCopy)
    {
      v37 = MutableCopy;
      v120.location = 0;
      v120.length = Length;
      if (CFStringFindAndReplace(MutableCopy, CFSTR("\r\n"), CFSTR("\n"), v120, 0)
        || (v121.location = 0, v121.length = Length,
                                 CFStringFindAndReplace(v37, CFSTR("\n\r"), CFSTR("\n"), v121, 0)))
      {
        v24 = CFStringGetLength(v37);
        CFRetain(v37);
        CFRelease(v31);
        v38 = Results;
        v31 = v37;
      }
      else
      {
        v38 = Results;
      }
      goto LABEL_16;
    }
    FigSignalErrorAt();
    v38 = 0;
    v37 = (__CFString *)Results;
    if (Results)
LABEL_16:
      CFRelease(v37);
  }
  else
  {
    v38 = 0;
  }
  if (v32)
    CFRelease(v32);
  if (totalLengthOut > v24 + 2)
  {
    v39 = (unint64_t)&v19[v20];
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    CFAttributedStringBeginEditing(Mutable);
    v115.location = 0;
    v115.length = 0;
    CFAttributedStringReplaceString(Mutable, v115, v31);
    v116.length = CFAttributedStringGetLength(Mutable);
    v41 = v99;
    v116.location = 0;
    CFAttributedStringSetAttributes(Mutable, v116, *(CFDictionaryRef *)(v99 + 40), 1u);
    v42 = dataPointerOut;
    if (dataPointerOut + 8 > &v19[v20])
    {
LABEL_21:
      CFAttributedStringEndEditing(Mutable);
      goto LABEL_23;
    }
    attrName = (const __CFString *)*MEMORY[0x1E0CA52B8];
    v86 = (void *)*MEMORY[0x1E0CA2978];
    v85 = (void *)*MEMORY[0x1E0CA2A50];
    v84 = (void *)*MEMORY[0x1E0CA2B38];
    v83 = (void *)*MEMORY[0x1E0CA52B0];
    v82 = (void *)*MEMORY[0x1E0CA2A20];
    v81 = (void *)*MEMORY[0x1E0CA2A00];
    v101 = (void *)*MEMORY[0x1E0C9AE50];
    v100 = (void *)*MEMORY[0x1E0C9AE40];
    v87 = &v19[v20];
    while (1)
    {
      v44 = bswap32(*(_DWORD *)v42);
      dataPointerOut = v42 + 4;
      v45 = *((_DWORD *)v42 + 1);
      v46 = (unsigned __int8 *)(v42 + 8);
      dataPointerOut = v42 + 8;
      v47 = v44 - 8;
      if ((int)(v44 - 8) < 0 || (unint64_t)&v46[v47] > v39)
      {
        v43 = FigSignalErrorAt();
        CFRelease(Mutable);
        goto LABEL_92;
      }
      v48 = bswap32(v45);
      if (v48 > 1952608119)
      {
        if (v48 == 1952608120)
        {
          v53 = bswap32(*((unsigned __int16 *)v42 + 4));
          v54 = bswap32(*((unsigned __int16 *)v42 + 5));
          v12 = (double)(v54 >> 16);
          v13 = (double)(v53 >> 16);
          v14 = (double)(((int)bswap32(*((unsigned __int16 *)v42 + 7)) >> 16) - (v54 >> 16));
          v15 = (double)(((int)bswap32(*((unsigned __int16 *)v42 + 6)) >> 16) - (v53 >> 16));
        }
        else if (v48 == 1953985136)
        {
          v51 = *v46;
          if (!v51)
          {
            v52 = CFSTR("None");
            goto LABEL_56;
          }
          if (v51 == 1)
          {
            v52 = CFSTR("AutomaticSoftWrap");
LABEL_56:
            v117.length = CFAttributedStringGetLength(Mutable);
            v117.location = 0;
            CFAttributedStringSetAttribute(Mutable, v117, attrName, v52);
          }
        }
      }
      else if (v48 == 1718772580)
      {
        v93 = 1;
      }
      else if (v48 == 1937013100)
      {
        desc = *(const opaqueCMFormatDescription **)v41;
        keys[0] = v86;
        keys[1] = v85;
        keys[2] = v84;
        keys[3] = v83;
        keys[4] = v82;
        keys[5] = v81;
        v112 = 0u;
        v113 = 0u;
        *(_OWORD *)values = 0u;
        valuePtr = 0.0;
        fontNameOut = 0;
        v49 = *(unsigned __int16 *)v46;
        if (v38)
          Count = CFArrayGetCount(v38);
        else
          Count = 0;
        v88 = v47;
        if (v47 < 0xE)
          goto LABEL_53;
        v55 = (int)bswap32(v49) >> 16;
        if (((12 * v55) | 2uLL) > v47 || Mutable == 0)
          goto LABEL_53;
        v57 = CFAttributedStringGetLength(Mutable);
        if (v55 >= 1)
        {
          v58 = 0;
          v97 = v31;
          v98 = v42 + 10;
          v94 = (unsigned __int16)v55;
          v95 = v57;
          v96 = Mutable;
          while (1)
          {
            v59 = &v98[12 * v58];
            v60 = bswap32(*(unsigned __int16 *)v59);
            if ((v60 & 0x80000000) != 0)
              break;
            v61 = HIWORD(v60);
            v62 = (__int16)v61;
            if (v57 < (__int16)v61)
              break;
            v63 = bswap32(*((unsigned __int16 *)v59 + 1)) >> 16;
            v64 = (__int16)v63;
            v65 = (__int16)v63 - (uint64_t)(__int16)v61;
            if (v65 < 0 || v57 < (__int16)v63)
              break;
            v66 = v59[6];
            v103 = v59[7];
            v104 = *((unsigned __int16 *)v59 + 2);
            if (Count < 1)
            {
              v69 = (__int16)v61;
            }
            else
            {
              v67 = 0;
              v68 = 0;
              v69 = (__int16)v61;
              do
              {
                v70 = *(_QWORD *)CFArrayGetValueAtIndex(v38, v67);
                v69 -= v70 < v62;
                v71 = v70 < v64 && v70 >= v62;
                v65 -= v71;
                v67 = (__int16)++v68;
              }
              while (Count > (__int16)v68);
            }
            if ((v66 & 1) != 0)
              v72 = v101;
            else
              v72 = v100;
            if ((v66 & 2) != 0)
              v73 = v101;
            else
              v73 = v100;
            values[0] = v72;
            values[1] = v73;
            if ((v66 & 4) != 0)
              v74 = v101;
            else
              v74 = v100;
            *(_QWORD *)&v112 = v74;
            valuePtr = (double)v103;
            *((_QWORD *)&v112 + 1) = CFNumberCreate(allocator, kCFNumberCGFloatType, &valuePtr);
            *(_QWORD *)&v113 = FigCreateCFArrayFromColorValues();
            CMTextFormatDescriptionGetFontName(desc, __rev16(v104), &fontNameOut);
            Mutable = v96;
            if (fontNameOut)
            {
              *((_QWORD *)&v113 + 1) = CFRetain(fontNameOut);
              v75 = 6;
            }
            else
            {
              v75 = 5;
            }
            v31 = v97;
            v76 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, v75, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v118.location = v69;
            v118.length = v65;
            CFAttributedStringSetAttributes(v96, v118, v76, 0);
            CFRelease(v76);
            for (i = 0; i != 6; ++i)
            {
              v78 = values[i];
              if (v78)
              {
                CFRelease(v78);
                values[i] = 0;
              }
            }
            ++v58;
            v57 = v95;
            if (v58 == v94)
              goto LABEL_54;
          }
LABEL_53:
          FigSignalErrorAt();
        }
LABEL_54:
        v41 = v99;
        v39 = (unint64_t)v87;
        v47 = v88;
      }
      v42 = &dataPointerOut[v47];
      dataPointerOut = v42;
      if ((unint64_t)(v42 + 8) > v39)
        goto LABEL_21;
    }
  }
  v41 = v99;
  Mutable = CFAttributedStringCreate(a2, v31, *(CFDictionaryRef *)(v99 + 40));
LABEL_23:
  *v89 = Mutable;
  if (!Mutable)
  {
    v43 = FigSignalErrorAt();
    if (!v38)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (a5)
    *a5 = v93;
  if (a6)
    *a6 = *(_BYTE *)(v41 + 64);
  v43 = 0;
  if (v90)
  {
    *v90 = v12;
    v90[1] = v13;
    v90[2] = v14;
    v90[3] = v15;
    if (!v38)
      goto LABEL_94;
    goto LABEL_93;
  }
LABEL_92:
  if (v38)
LABEL_93:
    CFRelease(v38);
LABEL_94:
  CFRelease(v31);
  return v43;
}

void FigTextSampleBufferTearDownState(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 56);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
}

uint64_t FigByteFlumePostHostUnavailableNotification(uint64_t a1)
{
  FigRetainProxyGetOwner();
  if (*(_BYTE *)(a1 + 16) != 1)
    return 0;
  *(_BYTE *)(a1 + 16) = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  return 1;
}

uint64_t FigByteFlumePostHostAvailableNotification(uint64_t a1)
{
  uint64_t v2;

  FigRetainProxyGetOwner();
  if (*(_BYTE *)(a1 + 16))
    return 0;
  v2 = 1;
  *(_BYTE *)(a1 + 16) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  return v2;
}

uint64_t FigByteFlumePostHostAvailableOnBetterInterfaceNotification(uint64_t a1)
{
  FigRetainProxyGetOwner();
  if (*(_BYTE *)(a1 + 16) != 1)
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  return 1;
}

uint64_t FigByteFlumePostConnectionToHostLostNotification(uint64_t a1)
{
  uint64_t v1;
  CFDictionaryRef v2;
  const void *Owner;
  CFTypeRef v5;

  v1 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 18) = 1;
  if (v1)
  {
    v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigByteFlumeNotificationPayload_LastError, (const void **)(a1 + 24), 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v2)
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  else
  {
    v2 = 0;
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner)
    v5 = CFRetain(Owner);
  else
    v5 = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (v5)
    CFRelease(v5);
  if (v2)
    CFRelease(v2);
  return 1;
}

void FigByteFlumeBaseInvalidate(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    if (v2 == dispatch_get_current_queue()
      || (dispatch_sync_f(v2, 0, (dispatch_function_t)fbf_notificationBarrierDQFunc),
          (v2 = *(NSObject **)(a1 + 8)) != 0))
    {
      dispatch_release(v2);
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void FigByteFlumeBaseDispose(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
}

uint64_t FigByteFlumeBaseInitialize(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  dispatch_queue_t v4;

  *(_BYTE *)(a2 + 16) = 1;
  result = FigRetainProxyCreate();
  if (!(_DWORD)result)
  {
    v4 = dispatch_queue_create("com.apple.coremedia.byteflume", 0);
    *(_QWORD *)(a2 + 8) = v4;
    if (v4)
      return 0;
    else
      return FigSignalErrorAt();
  }
  return result;
}

CFMutableDictionaryRef FigByteFlumeCreateNetworkPathEvaluatorCreateOptionsFromHTTPRequestOptions(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;

  if (!a1)
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigByteFlumeCreateReportingAgent(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const void *a4, const void *a5, int a6, const __CFDictionary *a7)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  const void *Value;
  const void *v16;
  CFTypeID v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  CFTypeID v21;
  const void *v22;
  const void *v23;
  CFTypeID v24;
  const void *v25;
  const void *v26;
  CFTypeID v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const __CFDictionary *v31;
  CFTypeID v32;
  BOOL v33;
  const void *v34;
  char v35;
  uint64_t *v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v38;
  void (*v39)(uint64_t, _QWORD);
  const void *v40;
  uint64_t result;
  const void *v42;
  int v43;
  const void *v44;
  const __CFDictionary *cf;
  uint64_t v47;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v14 = Mutable;
    if (a7)
    {
      a7 = FigRCLCopyConfigurationGroupName(a7);
      if (a7)
        CFDictionarySetValue(v14, CFSTR("configurationGroup"), a7);
    }
    cf = a7;
    v47 = a1;
    if (a2)
    {
      v44 = a5;
      Value = (const void *)FigCFDictionaryGetValue();
      if (!Value || (v16 = Value, v17 = CFGetTypeID(Value), v17 != CFStringGetTypeID()))
        v16 = 0;
      v43 = a6;
      v18 = FigCFDictionaryGetValue();
      v19 = (const void *)FigCFDictionaryGetValue();
      if (!v19 || (v20 = v19, v21 = CFGetTypeID(v19), v21 != CFStringGetTypeID()))
        v20 = 0;
      v42 = (const void *)v18;
      v22 = (const void *)FigCFDictionaryGetValue();
      if (!v22 || (v23 = v22, v24 = CFGetTypeID(v22), v24 != CFStringGetTypeID()))
        v23 = 0;
      v25 = (const void *)FigCFDictionaryGetValue();
      if (!v25 || (v26 = v25, v27 = CFGetTypeID(v25), v27 != CFStringGetTypeID()))
        v26 = 0;
      v28 = (const void *)FigCFDictionaryGetValue();
      if (!v28
        || (v29 = v28,
            v30 = v16,
            v31 = a3,
            v32 = CFGetTypeID(v28),
            v33 = v32 == CFDictionaryGetTypeID(),
            a3 = v31,
            v16 = v30,
            !v33))
      {
        v29 = 0;
      }
      if (v20)
        CFDictionarySetValue(v14, CFSTR("MediaIdentifier"), v20);
      if (v23)
        CFDictionarySetValue(v14, CFSTR("ContentProvider"), v23);
      a5 = v44;
      if (v26)
        CFDictionarySetValue(v14, CFSTR("StorefrontID"), v26);
      a6 = v43;
      if (v29)
        CFDictionarySetValue(v14, CFSTR("ServiceInformationKey"), v29);
      a1 = v47;
      v34 = v42;
    }
    else
    {
      v34 = 0;
      v16 = 0;
    }
    if (a3)
      a3 = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("X-Playback-Session-Id"));
    if (a6)
      v35 = 0;
    else
      v35 = FigIsItOKToLogURLs() != 0;
    v36 = (uint64_t *)(a1 + 32);
    FigReportingAgentCreate(a3, a4, v16, v34, a5, 2, v14, v35, (_QWORD *)(a1 + 32));
    if (dword_1EE2A2B28 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a1 = v47;
    }
    v38 = *v36;
    if (*v36)
    {
      v39 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v39)
        v39(v38, 0);
    }
    CFRelease(v14);
    if (cf)
      CFRelease(cf);
  }
  v40 = (const void *)MGCopyAnswer();
  *(_BYTE *)(a1 + 40) = *MEMORY[0x1E0C9AE50] == (_QWORD)v40;
  if (v40)
    CFRelease(v40);
  result = FigGetCFPreferenceNumberWithDefault();
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

uint64_t CreatePlaylistFileParserFromData(OpaqueCMBlockBuffer *a1, uint64_t a2, CFArrayRef **a3)
{
  uint64_t v5;
  uint64_t v6;
  CFArrayRef *v7;
  _QWORD block[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  if (!_os_feature_enabled_impl())
    return CreatePlaylistFileParserFromDataInProcess(a1, a3);
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __pfp_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2F85010;
  block[4] = &v10;
  if (pfp_ensureClientEstablished_sFigManifoldRemoteClientSetupOnce != -1)
    dispatch_once(&pfp_ensureClientEstablished_sFigManifoldRemoteClientSetupOnce, block);
  v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  if (!(_DWORD)v5)
  {
    if (xpc_dictionary_create(0, 0, 0))
    {
      v6 = FigXPCMessageSetBlockBuffer();
      if (!(_DWORD)v6)
      {
        v6 = FigXPCMessageSetCFString();
        if (!(_DWORD)v6)
        {
          v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!(_DWORD)v6)
            v6 = FigXPCMessageCopyCFArray();
        }
      }
    }
    else
    {
      v6 = FigSignalErrorAt();
    }
    v5 = v6;
  }
  FigXPCRelease();
  FigXPCRelease();
  if (!(_DWORD)v5)
  {
    v7 = (CFArrayRef *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v7)
    {
      v5 = 0;
      *v7 = 0;
      *a3 = v7;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v5;
}

uint64_t CreatePlaylistFileParserFromDataInProcess(OpaqueCMBlockBuffer *a1, CFArrayRef **a2)
{
  CFArrayRef *v4;
  CFArrayRef *v5;
  CFMutableArrayRef Mutable;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  CFTypeRef URL;
  uint64_t v15;
  char *v16;
  const __CFAllocator *v17;
  const CFArrayCallBacks *v18;
  CFTypeRef v19;
  const void *v20;
  __CFArray *v21;
  size_t v23;
  size_t v24;
  char *__endptr;

  v4 = (CFArrayRef *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  if (!*v4)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *v5 = Mutable;
    if (!Mutable)
    {
LABEL_24:
      v15 = FigSignalErrorAt();
      if ((_DWORD)v15)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  v23 = 0;
  v24 = 0;
  do
  {
    v7 = pfp_CopyLine(a1, v24, &v23, &v24);
    if (!v7)
    {
      v11 = 0;
      v15 = 4294951106;
      goto LABEL_43;
    }
    v8 = v7;
    v9 = strcasecmp(v7, "[Playlist]");
    free(v8);
  }
  while (v9);
  v10 = pfp_CopyLine(a1, v24, &v23, &v24);
  if (!v10)
  {
    v12 = 0;
    v13 = 0;
LABEL_20:
    if (v12 | v13 && *v5 && CFArrayGetCount(*v5) > 0)
      goto LABEL_23;
    goto LABEL_24;
  }
  v11 = v10;
  v12 = 0;
  v13 = 0;
  __endptr = 0;
  while (1)
  {
    if (!strncasecmp(v11, "NumberOfEntries=", 0x10uLL))
    {
      v12 = 1;
      goto LABEL_17;
    }
    if (!strncasecmp(v11, "Version=", 8uLL))
    {
      v13 = 1;
      goto LABEL_17;
    }
    if (!strncasecmp(v11, "File", 4uLL))
      break;
LABEL_17:
    free(v11);
    v11 = pfp_CopyLine(a1, v24, &v23, &v24);
    if (!v11)
      goto LABEL_20;
  }
  strtol(v11 + 4, &__endptr, 0);
  if (*__endptr == 61)
  {
    URL = pfp_MakeURL((UInt8 *)__endptr + 1, v11 - (__endptr + 1) + v23);
    if (URL)
    {
      CFArrayAppendValue(*v5, URL);
      goto LABEL_17;
    }
  }
  v15 = 4294951104;
LABEL_43:
  free(v11);
LABEL_25:
  if (*v5)
  {
    CFRelease(*v5);
    *v5 = 0;
  }
  if ((_DWORD)v15 == -16190)
  {
    v24 = 0;
    __endptr = 0;
    v16 = pfp_CopyLine(a1, 0, &v24, &__endptr);
    if (v16)
    {
      v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v18 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        if (*v16 == 35 || (v19 = pfp_MakeURL((UInt8 *)v16, v24)) == 0)
        {
          free(v16);
        }
        else
        {
          v20 = v19;
          v21 = *v5;
          if (!*v5)
          {
            v21 = CFArrayCreateMutable(v17, 0, v18);
            *v5 = v21;
            if (!v21)
            {
              FigSignalErrorAt();
              CFRelease(v20);
              break;
            }
          }
          CFArrayAppendValue(v21, v20);
          free(v16);
          CFRelease(v20);
        }
        v16 = pfp_CopyLine(a1, (size_t)__endptr, &v24, &__endptr);
      }
      while (v16);
    }
    free(v16);
    if (!*v5 || !CFArrayGetCount(*v5))
    {
      v15 = 4294951106;
      goto LABEL_40;
    }
LABEL_23:
    v15 = 0;
    *a2 = v5;
  }
  else
  {
LABEL_40:
    PlaylistFileParserDestroy((const void **)v5);
  }
  return v15;
}

const __CFArray *PlaylistFileParserItemCount(const __CFArray **a1)
{
  const __CFArray *result;

  result = *a1;
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t PlaylistFileParserCopyItem(CFArrayRef *a1, CFIndex idx, _QWORD *a3)
{
  const __CFArray *Count;
  const void *ValueAtIndex;

  Count = *a1;
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*a1, idx);
  if (ValueAtIndex)
    ValueAtIndex = CFRetain(ValueAtIndex);
  *a3 = ValueAtIndex;
  return 0;
}

void PlaylistFileParserDestroy(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

uint64_t PlaylistFileParserServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __PlaylistFileParserServer_block_invoke;
  block[3] = &unk_1E2F84FE8;
  block[4] = &v3;
  if (PlaylistFileParserServer_sFigPlaylistFileParserServerSetupOnce != -1)
    dispatch_once(&PlaylistFileParserServer_sFigPlaylistFileParserServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t pfp_replyingMessageHandler()
{
  uint64_t BlockBufferDataWithSize;
  uint64_t PlaylistFileParserFromDataInProcess;
  const void **v2;
  uint64_t v3;
  void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  v5 = 0;
  BlockBufferDataWithSize = FigXPCMessageCreateBlockBufferDataWithSize();
  if ((_DWORD)BlockBufferDataWithSize
    || (BlockBufferDataWithSize = FigXPCMessageCopyCFString(), (_DWORD)BlockBufferDataWithSize))
  {
    v3 = BlockBufferDataWithSize;
    v2 = 0;
  }
  else
  {
    PlaylistFileParserFromDataInProcess = CreatePlaylistFileParserFromDataInProcess((OpaqueCMBlockBuffer *)cf, (CFArrayRef **)&v5);
    v2 = (const void **)v5;
    if (!(_DWORD)PlaylistFileParserFromDataInProcess)
      PlaylistFileParserFromDataInProcess = FigXPCMessageSetCFArray();
    v3 = PlaylistFileParserFromDataInProcess;
  }
  PlaylistFileParserDestroy(v2);
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  return v3;
}

char *pfp_CopyLine(OpaqueCMBlockBuffer *a1, size_t a2, size_t *a3, _QWORD *a4)
{
  size_t v6;
  OSStatus DataPointer;
  char *result;
  size_t v10;
  size_t v11;
  char *v12;
  int v13;
  int v14;
  char *v16;
  size_t lengthAtOffsetOut;

  v6 = a2;
  v16 = 0;
  lengthAtOffsetOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(a1, a2, &lengthAtOffsetOut, 0, &v16);
  result = 0;
  if (!DataPointer)
  {
    v10 = 0;
    do
    {
      v11 = lengthAtOffsetOut;
      if (lengthAtOffsetOut)
      {
        v12 = v16;
        do
        {
          v14 = *v12++;
          v13 = v14;
          if (v14 == 13 || v13 == 10)
          {
            if (v10)
              goto LABEL_15;
            ++v6;
          }
          else
          {
            ++v10;
          }
          --v11;
        }
        while (v11);
      }
    }
    while (!CMBlockBufferGetDataPointer(a1, v10 + v6, &lengthAtOffsetOut, 0, &v16));
    if (v10)
    {
LABEL_15:
      v16 = (char *)malloc_type_malloc(v10 + 1, 0xD93EFC75uLL);
      CMBlockBufferCopyDataBytes(a1, v6, v10, v16);
      v16[v10] = 0;
      *a3 = v10;
      *a4 = v6 + v10;
      return v16;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef pfp_MakeURL(UInt8 *URLBytes, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  const __CFURL *v7;
  const __CFURL *v8;
  CFStringRef v9;
  CFTypeRef v10;

  v3 = a2 - 1;
  v4 = MEMORY[0x1E0C80978];
  do
  {
    if (v3 == -1)
      return 0;
    v5 = (char)URLBytes[v3];
    if ((v5 & 0x80000000) != 0)
      v6 = __maskrune(v5, 0x4000uLL);
    else
      v6 = *(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000;
    --v3;
  }
  while (v6);
  v7 = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], URLBytes, v3 + 2, 0x201u, 0);
  if (!v7)
    return 0;
  v8 = v7;
  if (CFURLCanBeDecomposed(v7))
  {
    v9 = CFURLGetString(v8);
    v10 = CFRetain(v9);
  }
  else
  {
    v10 = 0;
  }
  CFRelease(v8);
  return v10;
}

void __pfp_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    FigCFDictionarySetValue();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12786;
  }
}

CFTypeRef FigCopyUTITypesForFormatReaderIdentifier(CFTypeRef cf1)
{
  CFTypeRef v1;
  char *v2;
  const __CFDictionary *Value;
  const void *v4;
  CFDictionaryRef theDict;

  v1 = cf1;
  theDict = 0;
  if (!cf1)
    return v1;
  if (CFEqual(cf1, CFSTR("com.apple.coremedia.formatreader.quicktime-iso")))
  {
    v2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>MooV</string>\t\t</array>\t\t<key>public.mime-type</"
         "key>\t\t<array>\t\t\t<string>video/quicktime</string>\t\t\t<string>video/mp4</string>\t\t</array>\t\t<key>publi"
         "c.filename-extension</key>\t\t<array>\t\t\t<string>mov</string>\t\t\t<string>qt</string>\t\t\t<string>mqv</stri"
         "ng>\t\t\t<string>mp4</string>\t\t\t<string>m4a</string>\t\t\t<string>m4v</string>\t\t\t<string>m4b</string>\t\t"
         "\t<string>m4p</string>\t\t\t<string>m4r</string>\t\t\t<string>aax</string>\t\t\t<string>3gp</string>\t\t\t<stri"
         "ng>3gpp</string>\t\t\t<string>3g2</string>\t\t\t<string>3gp2</string>\t\t\t<string>aivu</string>\t\t</array>\t\t"
         "<key>com.apple.uti</key>\t\t<array>\t\t\t<string>com.apple.quicktime-movie</string>\t\t\t<string>public.mpeg-4<"
         "/string>\t\t\t<string>public.mpeg-4-audio</string>\t\t\t<string>com.apple.m4a-audio</string>\t\t\t<string>com.a"
         "pple.protected-mpeg-4-audio</string>\t\t\t<string>com.apple.m4v-video</string>\t\t\t<string>com.apple.mpeg-4-ri"
         "ngtone</string>\t\t\t<string>com.audible.aax-audiobook</string>\t\t\t<string>public.3gpp</string>\t\t\t<string>"
         "public.3gpp2</string>\t\t\t<string>com.apple.immersive-video</string>\t\t</array>\t</dict></dict></plist>";
  }
  else if (CFEqual(v1, CFSTR("com.apple.coremedia.formatreader.webvtt")))
  {
    v2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>text/vtt</string>\t\t</array>\t\t<key>public.filenam"
         "e-extension</key>\t\t<array>\t\t\t<string>vtt</string>\t\t\t<string>webvtt</string>\t\t</array>\t\t\t<key>com.a"
         "pple.uti</key>\t\t\t<array>\t\t\t\t<string>org.w3.webvtt</string>\t\t\t</array>\t</dict></dict></plist>";
  }
  else if (CFEqual(v1, CFSTR("com.apple.coremedia.formatreader.mpeg")))
  {
    v2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>MPG2</string>\t\t\t<string>mMPG</string>           <"
         "string>m2ts</string>\t\t\t<string>MPEG</string>\t\t\t<string>MPG </string>\t\t</array>\t\t<key>public.mime-type"
         "</key>\t\t<array>\t\t\t<string>video/mpeg</string>\t\t\t<string>video/x-mpeg</string>\t\t\t<string>video/mpeg2<"
         "/string>\t\t\t<string>video/x-mpeg2</string>\t\t\t<string>video/mpg</string>\t\t\t<string>video/x-mpg</string>\t"
         "\t\t<string>video/mp2t</string>\t\t\t<string>video/mp2p</string>\t\t\t<string>video/x-mp2p</string>\t\t\t<strin"
         "g>video/mp1s</string>\t\t\t<string>video/x-mp1s</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t"
         "<array>\t\t\t<string>mpeg</string>\t\t\t<string>m2v</string>\t\t\t<string>mpe</string>\t\t\t<string>mpg</string"
         ">\t\t\t<string>mp2</string>\t\t\t<string>mod</string>\t\t\t<string>vob</string>\t\t\t<string>m2ts</string>\t\t\t"
         "<string>m2t</string>\t\t\t<string>ts</string>\t\t\t<string>mts</string>\t\t</array>\t\t<key>com.apple.uti</key>"
         "\t\t<array>\t\t\t<string>public.mpeg</string>\t\t\t<string>public.mp2</string>\t\t\t<string>public.mpeg-2-video"
         "</string>\t\t\t<string>public.mpeg-2-transport-stream</string>\t\t</array>\t</dict></dict></plist>";
  }
  else
  {
    if (!CFEqual(v1, CFSTR("com.apple.coremedia.formatreader.audiofilestream")))
      goto LABEL_18;
    v2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>mp3!</string>\t\t\t<string>MP3!</string>\t\t\t<strin"
         "g>MPG3</string>\t\t\t<string>mpg3</string>\t\t\t<string>Mp3 </string>\t\t\t<string>MP3 </string>\t\t\t<string>a"
         "mr </string>\t\t\t<string>amrw</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>audi"
         "o/mpeg</string>\t\t\t<string>audio/AMR</string>\t\t\t<string>audio/AMR-WB</string>\t\t\t<string>audio/aac</stri"
         "ng>\t\t\t<string>audio/flac</string>\t\t\t<string>audio/usac</string>\t\t</array>\t\t<key>public.filename-exten"
         "sion</key>\t\t<array>\t\t\t<string>mp3</string>\t\t\t<string>m1a</string>\t\t\t<string>m2a</string>\t\t\t<strin"
         "g>mpa</string>\t\t\t<string>mp2</string>\t\t\t<string>mp1</string>\t\t\t<string>aac</string>\t\t\t<string>adts<"
         "/string>\t\t\t<string>amr</string>\t\t\t<string>awb</string>\t\t\t<string>ac3</string>\t\t\t<string>ec3</string"
         ">\t\t\t<string>eac3</string>\t\t\t<string>flac</string>\t\t\t<string>latm</string>\t\t\t<string>loas</string>\t"
         "\t\t<string>xhe</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>public.mp3</string>\t\t"
         "\t<string>public.mp2</string>\t\t\t<string>public.aac-audio</string>\t\t\t<string>org.3gpp.adaptive-multi-rate-"
         "audio</string>\t\t\t<string>public.ac3-audio</string>\t\t\t<string>public.enhanced-ac3-audio</string>\t\t\t<str"
         "ing>org.xiph.flac</string>\t\t\t<string>public.mp4a-loas</string>\t\t</array>\t</dict></dict></plist>";
  }
  if (!FigFormatReaderCreatePropertyListDictionaryFromCString(v2, 0, &theDict))
  {
    if (!theDict)
      return 0;
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ContainerLabelling"));
    if (Value)
    {
      v4 = CFDictionaryGetValue(Value, CFSTR("com.apple.uti"));
      v1 = v4;
      if (v4)
        CFRetain(v4);
      goto LABEL_15;
    }
  }
LABEL_18:
  v1 = 0;
LABEL_15:
  if (theDict)
    CFRelease(theDict);
  return v1;
}

uint64_t FigFormatReaderCreatePropertyListDictionaryFromCString(char *__s, int a2, const __CFDictionary **a3)
{
  const __CFAllocator *v6;
  size_t v7;
  const __CFData *v8;
  const __CFData *v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  uint64_t v12;

  if (!a3)
    return 0;
  *a3 = 0;
  if (__s)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = strlen(__s);
    v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)__s, v7, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v8)
    {
      v9 = v8;
      v10 = (const __CFDictionary *)CFPropertyListCreateWithData(v6, v8, 0, 0, 0);
      if (v10)
      {
        v11 = v10;
        if (a2)
        {
          if (gFFREquivalentMIMETypes)
          {
            CFDictionaryGetValue(v10, CFSTR("ContainerLabelling"));
            FigCFDictionaryGetValueIfPresent();
          }
        }
        v12 = 0;
        *a3 = v11;
      }
      else
      {
        v12 = FigSignalErrorAt();
      }
      CFRelease(v9);
      return v12;
    }
  }
  return FigSignalErrorAt();
}

void printRegisteredFormatReaders()
{
  CFIndex Count;
  CFIndex v1;
  CFIndex i;
  const void *v3;

  if (gFFRRegistry)
  {
    Count = CFArrayGetCount((CFArrayRef)gFFRRegistry);
    if (Count >= 1)
    {
      v1 = Count;
      for (i = 0; i != v1; ++i)
      {
        CFArrayGetValueAtIndex((CFArrayRef)gFFRRegistry, i);
        v3 = (const void *)FigCFCopyCompactDescription();
        if (v3)
          CFRelease(v3);
      }
    }
  }
}

uint64_t FigCopySetOfFormatReaderSupportedFileExtensions(const __CFAllocator *a1, __CFSet **a2)
{
  uint64_t v4;

  v4 = ensureRegistryInitialized();
  if (!(_DWORD)v4)
    *a2 = copySetOfRegistryEntryLabels(a1, CFSTR("public.filename-extension"));
  return v4;
}

__CFSet *copySetOfRegistryEntryLabels(const __CFAllocator *a1, const void *a2)
{
  __CFSet *Mutable;
  CFIndex v4;
  const __CFDictionary *v5;
  const __CFArray *Value;
  const __CFArray *v7;
  CFIndex Count;
  unint64_t v9;
  const void *ValueAtIndex;

  Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E0C9B3B0]);
  if (CFArrayGetCount((CFArrayRef)gFFRRegistry) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (const __CFDictionary *)*((_QWORD *)CFArrayGetValueAtIndex((CFArrayRef)gFFRRegistry, v4) + 1);
      if (v5)
      {
        Value = (const __CFArray *)CFDictionaryGetValue(v5, a2);
        if (Value)
        {
          v7 = Value;
          Count = CFArrayGetCount(Value);
          if (Count >= 1)
          {
            v9 = Count + 1;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v7, v9 - 2);
              CFSetAddValue(Mutable, ValueAtIndex);
              --v9;
            }
            while (v9 > 1);
          }
        }
      }
      ++v4;
    }
    while (v4 < CFArrayGetCount((CFArrayRef)gFFRRegistry));
  }
  return Mutable;
}

const void *FigCopyQTMovieMIMETypes()
{
  const __CFDictionary *Value;
  const void *v1;
  CFDictionaryRef theDict;

  theDict = 0;
  ensureRegistryInitialized();
  FigFormatReaderCreatePropertyListDictionaryFromCString("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>MooV</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>video/quicktime</string>\t\t\t<string>video/mp4</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>mov</string>\t\t\t<string>qt</string>\t\t\t<string>mqv</string>\t\t\t<string>mp4</string>\t\t\t<string>m4a</string>\t\t\t<string>m4v</string>\t\t\t<string>m4b</string>\t\t\t<string>m4p</string>\t\t\t<string>m4r</string>\t\t\t<string>aax</string>\t\t\t<string>3gp</string>\t\t\t<string>3gpp</string>\t\t\t<string>3g2</string>\t\t\t<string>3gp2</string>\t\t\t<string>aivu</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>com.apple.quicktime-movie</string>\t\t\t<string>public.mpeg-4</string>\t\t\t<string>public.mpeg-4-audio</string>\t\t\t<string>com.apple.m4a-audio</string>\t\t\t<string>com.apple.protected-mpeg-4-audio</string>\t\t\t<string>com.apple.m4v-video</string>\t\t\t<string>com.apple.mpeg-4-ringtone</string>\t\t\t<string>com.audible.aax-audiobook</string>\t\t\t<string>public.3gpp</string>\t\t\t<string>public.3gpp2</string>\t\t\t<string>com.apple.immersive-video</string>\t\t</array>\t</dict></dict></plist>", 1, &theDict);
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ContainerLabelling"));
  v1 = CFDictionaryGetValue(Value, CFSTR("public.mime-type"));
  CFRetain(v1);
  if (theDict)
    CFRelease(theDict);
  return v1;
}

const void *FigCopyWebVTTMIMETypes()
{
  const __CFDictionary *Value;
  const void *v1;
  CFDictionaryRef theDict;

  theDict = 0;
  ensureRegistryInitialized();
  FigFormatReaderCreatePropertyListDictionaryFromCString("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>text/vtt</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>vtt</string>\t\t\t<string>webvtt</string>\t\t</array>\t\t\t<key>com.apple.uti</key>\t\t\t<array>\t\t\t\t<string>org.w3.webvtt</string>\t\t\t</array>\t</dict></dict></plist>", 1, &theDict);
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ContainerLabelling"));
  v1 = CFDictionaryGetValue(Value, CFSTR("public.mime-type"));
  CFRetain(v1);
  if (theDict)
    CFRelease(theDict);
  return v1;
}

void *FigCopyMPEGTransportStreamMIMETypes()
{
  CFArrayRef v0;
  void *MutableCopy;
  CFRange v3;

  v0 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigRepresentativeMIMEType_MPEG2TS, 1, MEMORY[0x1E0C9B378]);
  ensureRegistryInitialized();
  CFGetAllocator(v0);
  MutableCopy = (void *)FigCFArrayCreateMutableCopy();
  v3.length = CFArrayGetCount(v0);
  v3.location = 0;
  CFArrayApplyFunction(v0, v3, (CFArrayApplierFunction)FFRExpandRepresentativeMIMETypes, MutableCopy);
  if (v0)
    CFRelease(v0);
  return MutableCopy;
}

void FFRExpandRepresentativeMIMETypes(const void *a1, void *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  const __CFArray *v6;
  void *value;
  CFRange v8;

  if (a1)
  {
    if (a2)
    {
      if (gFFREquivalentMIMETypes)
      {
        v4 = CFGetTypeID(a1);
        if (v4 == CFStringGetTypeID())
        {
          value = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)gFFREquivalentMIMETypes, a1, (const void **)&value))
          {
            if (value)
            {
              v5 = CFGetTypeID(value);
              if (v5 == CFArrayGetTypeID())
              {
                v6 = (const __CFArray *)value;
                v8.length = CFArrayGetCount((CFArrayRef)value);
                v8.location = 0;
                CFArrayApplyFunction(v6, v8, (CFArrayApplierFunction)FFRAddMIMETypeIfAbsent, a2);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t FigCopySetOfFormatReaderSupportedMIMETypes(const __CFAllocator *a1, __CFSet **a2)
{
  uint64_t v4;

  v4 = ensureRegistryInitialized();
  if (!(_DWORD)v4)
    *a2 = copySetOfRegistryEntryLabels(a1, CFSTR("public.mime-type"));
  return v4;
}

uint64_t FigCopySetOfFormatReaderSupportedFileTypes(const __CFAllocator *a1, __CFSet **a2)
{
  uint64_t v4;

  v4 = ensureRegistryInitialized();
  if (!(_DWORD)v4)
    *a2 = copySetOfRegistryEntryLabels(a1, CFSTR("com.apple.ostype"));
  return v4;
}

uint64_t FigCopySetOfFormatReaderSupportedUTIs(const __CFAllocator *a1, __CFSet **a2)
{
  uint64_t v4;

  v4 = ensureRegistryInitialized();
  if (!(_DWORD)v4)
    *a2 = copySetOfRegistryEntryLabels(a1, CFSTR("com.apple.uti"));
  return v4;
}

uint64_t FigFormatReaderCreateForStreamReturningResults(uint64_t a1, const __CFDictionary *a2, const __CFAllocator *a3, uint64_t a4, CFTypeRef *a5, CFTypeRef *a6, _DWORD *a7, CFTypeRef *a8)
{
  uint64_t v16;
  uint64_t v17;
  const void *Value;
  const void *v19;
  const __CFArray *v20;
  const __CFArray *v21;
  uint64_t CMBaseObject;
  void (*v23)(uint64_t, _QWORD, const __CFAllocator *, CFURLRef *);
  const __CFString *v24;
  const __CFString *v25;
  CFRange v26;
  const __CFString *v27;
  const __CFString *v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, _QWORD, const __CFAllocator *, CFURLRef *);
  const __CFString *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  const __CFArray *v39;
  CFTypeRef cf[2];
  CFTypeRef v41[2];
  CFTypeRef v42[2];
  int valuePtr;
  CFURLRef anURL;
  CFRange v45;

  *(_OWORD *)v41 = 0u;
  *(_OWORD *)v42 = 0u;
  *(_OWORD *)cf = 0u;
  v16 = ensureRegistryInitialized();
  if ((_DWORD)v16)
    goto LABEL_50;
  if (a2)
  {
    v17 = a4;
    Value = CFDictionaryGetValue(a2, CFSTR("Selection_OutOfBandMIMEType"));
    v19 = CFDictionaryGetValue(a2, CFSTR("Selection_OutOfBandFileType"));
    v20 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("Selection_AllowableTypes"));
    v21 = v20;
    if (Value)
    {
      AttemptMIMETypeInstantiation((uint64_t)a3, a1, v17, Value, v20, (uint64_t)cf);
      goto LABEL_31;
    }
    if (v19)
    {
      v33 = (uint64_t)a3;
      v34 = a1;
      v35 = v17;
      v36 = v19;
      goto LABEL_30;
    }
    v39 = v20;
    a4 = v17;
  }
  else
  {
    v39 = 0;
  }
  anURL = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v23 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v23)
  {
    v23(CMBaseObject, *MEMORY[0x1E0CA2098], a3, &anURL);
    if (anURL)
    {
      v24 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
      if (v24)
      {
        v25 = v24;
        v26 = CFStringFind(v24, CFSTR("."), 4uLL);
        if (v26.length >= 1)
        {
          v45.length = CFStringGetLength(v25) + ~v26.location;
          v45.location = v26.location + 1;
          v27 = CFStringCreateWithSubstring(a3, v25, v45);
          if (v27)
          {
            v28 = v27;
            AttemptInstantiationForMatchingLabel(a1, a4, CFSTR("public.filename-extension"), 0, v27, 1, v39, (uint64_t)cf);
            CFRelease(v28);
          }
        }
        CFRelease(v25);
      }
      if (anURL)
        CFRelease(anURL);
    }
  }
  if (!v41[1])
  {
    anURL = 0;
    v29 = CMByteStreamGetCMBaseObject();
    v30 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
    if (v30 && !v30(v29, *MEMORY[0x1E0CA2F60], a3, &anURL))
    {
      valuePtr = 0;
      CFNumberGetValue(anURL, kCFNumberSInt32Type, &valuePtr);
      v31 = CFStringCreateWithBytes(a3, (const UInt8 *)&valuePtr, 4, 0, 0);
      if (v31)
      {
        AttemptInstantiationForMatchingLabel(a1, a4, CFSTR("com.apple.ostype"), 1, v31, 0, v39, (uint64_t)cf);
        v32 = 0;
LABEL_20:
        if (anURL)
          CFRelease(anURL);
        if ((v32 & 1) == 0)
          CFRelease(v31);
        if (!v41[1])
        {
          AttemptMIMETypeInstantiation((uint64_t)a3, a1, a4, 0, v39, (uint64_t)cf);
          if (!v41[1])
          {
            AttemptSuggestedFileNameInstantiation(a3, a1, a4, v39, (uint64_t)cf);
            if (!v41[1])
            {
              v33 = (uint64_t)a3;
              v34 = a1;
              v35 = a4;
              v36 = 0;
              v21 = v39;
LABEL_30:
              AttemptUTIInstantiation(v33, v34, v35, v36, v21, (uint64_t)cf);
              goto LABEL_31;
            }
          }
        }
        goto LABEL_31;
      }
    }
    else
    {
      v31 = 0;
    }
    v32 = 1;
    goto LABEL_20;
  }
LABEL_31:
  if (LODWORD(v41[0]) || !v41[1])
  {
    v16 = FigSignalErrorAt();
LABEL_50:
    v37 = v16;
    goto LABEL_37;
  }
  *a5 = v41[1];
  v41[1] = 0;
  if (a7)
    *a7 = v42[1];
  v37 = 0;
  if (a6)
  {
    *a6 = v42[0];
    v42[0] = 0;
  }
LABEL_37:
  if (a8)
  {
    *a8 = cf[0];
  }
  else if (cf[0])
  {
    CFRelease(cf[0]);
  }
  if (v41[1])
    CFRelease(v41[1]);
  if (v42[0])
    CFRelease(v42[0]);
  return v37;
}

void AttemptMIMETypeInstantiation(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf, const __CFArray *a5, uint64_t a6)
{
  const __CFString *v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef cfa;

  if (cf)
  {
    v11 = (const __CFString *)CFRetain(cf);
    cfa = v11;
    if (v11)
    {
LABEL_7:
      AttemptInstantiationForMatchingLabel(a2, a3, CFSTR("public.mime-type"), 2, v11, 1, a5, a6);
      if (cfa)
        CFRelease(cfa);
      return;
    }
  }
  else
  {
    cfa = 0;
  }
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
  {
    v13(CMBaseObject, *MEMORY[0x1E0CA2F78], a1, &cfa);
    v11 = (const __CFString *)cfa;
    if (cfa)
      goto LABEL_7;
  }
}

void AttemptUTIInstantiation(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf, const __CFArray *a5, uint64_t a6)
{
  const __CFString *v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef cfa;

  if (cf)
  {
    v11 = (const __CFString *)CFRetain(cf);
    cfa = v11;
    if (v11)
    {
LABEL_7:
      AttemptInstantiationForMatchingLabel(a2, a3, CFSTR("com.apple.uti"), 4, v11, 1, a5, a6);
      if (cfa)
        CFRelease(cfa);
      return;
    }
  }
  else
  {
    cfa = 0;
  }
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
  {
    v13(CMBaseObject, *MEMORY[0x1E0CA2FC8], a1, &cfa);
    v11 = (const __CFString *)cfa;
    if (cfa)
      goto LABEL_7;
  }
}

void AttemptSuggestedFileNameInstantiation(const __CFAllocator *a1, uint64_t a2, uint64_t a3, const __CFArray *a4, uint64_t a5)
{
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, const __CFAllocator *, CFStringRef *);
  CFRange v12;
  const __CFString *v13;
  const __CFString *v14;
  CFStringRef theString;
  CFRange v16;

  theString = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v11 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (v11)
  {
    v11(CMBaseObject, *MEMORY[0x1E0CA2FC0], a1, &theString);
    if (theString)
    {
      v12 = CFStringFind(theString, CFSTR("."), 4uLL);
      if (v12.length >= 1)
      {
        v16.length = CFStringGetLength(theString) + ~v12.location;
        v16.location = v12.location + 1;
        v13 = CFStringCreateWithSubstring(a1, theString, v16);
        if (v13)
        {
          v14 = v13;
          AttemptInstantiationForMatchingLabel(a2, a3, CFSTR("public.filename-extension"), 3, v13, 1, a4, a5);
          CFRelease(v14);
        }
      }
      if (theString)
        CFRelease(theString);
    }
  }
}

uint64_t FigFormatReaderCreateForStreamReturningMatchingContainerLabel(uint64_t a1, const __CFDictionary *a2, const __CFAllocator *a3, uint64_t a4, CFTypeRef *a5, CFTypeRef *a6, _DWORD *a7)
{
  return FigFormatReaderCreateForStreamReturningResults(a1, a2, a3, a4, a5, a6, a7, 0);
}

const __CFString *FigGetNotifyingObjectForSupportedFormatsChanged()
{
  if (FigGetNotifyingObjectForSupportedFormatsChanged_onceToken != -1)
    dispatch_once_f(&FigGetNotifyingObjectForSupportedFormatsChanged_onceToken, 0, (dispatch_function_t)registerSupportedFormatsChangedNotificationBarrierOnce);
  return CFSTR("SupportedFormatChanged");
}

uint64_t registerSupportedFormatsChangedNotificationBarrierOnce()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterRegisterForBarrierSupport();
}

uint64_t FigFormatReaderGetTypeID()
{
  MEMORY[0x19402F294](&FigFormatReaderGetClassID_sRegisterFigFormatReaderOnce, RegisterFigFormatReader);
  return CMBaseClassGetCFTypeID();
}

const __CFString *FigFormatReaderUtilityCopyRepresentativeMIMETypeForMIMEType(const __CFString *result)
{
  const __CFString *v1;
  __CFString *MutableCopy;
  CFTypeRef v3;
  __CFString *v4;
  CFTypeRef cf;

  if (result)
  {
    v1 = result;
    if (ensureRegistryInitialized())
      return 0;
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v1);
    CFStringLowercase(MutableCopy, 0);
    v4 = MutableCopy;
    cf = 0;
    CFDictionaryApplyFunction((CFDictionaryRef)gFFREquivalentMIMETypes, (CFDictionaryApplierFunction)FFRFindRepresentativeMIMEType, &v4);
    v3 = cf;
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (!v3)
      return 0;
    else
      return (const __CFString *)CFRetain(v3);
  }
  return result;
}

uint64_t FFRFindRepresentativeMIMEType(uint64_t result, CFTypeRef cf, uint64_t a3)
{
  uint64_t v5;
  CFTypeID v6;
  CFRange v7;

  if (cf)
  {
    if (!*(_QWORD *)(a3 + 8))
    {
      v5 = result;
      v6 = CFGetTypeID(cf);
      result = CFArrayGetTypeID();
      if (v6 == result)
      {
        v7.length = CFArrayGetCount((CFArrayRef)cf);
        v7.location = 0;
        result = CFArrayContainsValue((CFArrayRef)cf, v7, *(const void **)a3);
        if ((_DWORD)result)
          *(_QWORD *)(a3 + 8) = v5;
      }
    }
  }
  return result;
}

uint64_t FigFormatReaderUtilityConvertCodecElementsToMediaSubType(uint64_t a1, int a2, char *a3, uint64_t a4, _DWORD *a5, int *a6, int *a7)
{
  int v14;

  if (FigCFEqual())
    return AVIFormatReaderConvertCodecElementsToMediaSubType(a2, a3, a4, a5, a6, a7);
  if (FigCFEqual())
  {
    v14 = 1463899717;
    return FigAudioFormatReaderConvertCodecElementsToMediaSubType(v14, a2, a3, a4, a5, a6, a7);
  }
  if (FigCFEqual())
  {
    v14 = 1095321155;
    return FigAudioFormatReaderConvertCodecElementsToMediaSubType(v14, a2, a3, a4, a5, a6, a7);
  }
  if (FigCFEqual())
  {
    v14 = 1667327590;
    return FigAudioFormatReaderConvertCodecElementsToMediaSubType(v14, a2, a3, a4, a5, a6, a7);
  }
  if (FigCFEqual())
  {
    v14 = 1297106739;
    return FigAudioFormatReaderConvertCodecElementsToMediaSubType(v14, a2, a3, a4, a5, a6, a7);
  }
  if (a7)
    *a7 = 1;
  return 0;
}

uint64_t FigFormatReaderUtilityEstablishCombinedDataRateProfileForTracks(uint64_t a1, const __CFArray *a2, void *a3, uint64_t a4, CMTime *a5)
{
  uint64_t (*v10)(uint64_t, const __CFArray *, void *, uint64_t, CMTime *);

  if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72))
    return FigFormatReaderUtilityEstablishCombinedDataRateProfileForTracksCommon(a1, a2, a3, a4, a5);
  v10 = *(uint64_t (**)(uint64_t, const __CFArray *, void *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 72);
  if (v10)
    return v10(a1, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t FigFormatReaderUtilityEstablishCombinedDataRateProfileForTracksCommon(uint64_t a1, const __CFArray *a2, void *a3, unsigned int a4, CMTime *a5)
{
  CMTimeEpoch v5;
  uint64_t Duration;
  CMTime *v12;
  CMTimeEpoch v13;
  CFIndex Count;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CFTypeRef v18;
  uint64_t (*v19)(CFTypeRef, CFTypeRef *);
  CFTypeRef v20;
  uint64_t (*v21)(CFTypeRef, CFTypeRef *);
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, _QWORD, _QWORD, _QWORD, uint64_t *, int32_t *, _QWORD, char *, __int16 *, _QWORD);
  unint64_t v24;
  uint64_t v25;
  CFTypeRef v26;
  uint64_t (*v27)(CFTypeRef, CMTime *);
  double Seconds;
  double v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  CFTypeRef v33;
  uint64_t (*v34)(CFTypeRef, CMTime *);
  CFTypeRef v35;
  uint64_t (*v36)(CFTypeRef, _QWORD, uint64_t *, _QWORD, _QWORD);
  double v37;
  double v38;
  unint64_t v39;
  CFTypeRef v40;
  uint64_t (*v41)(CFTypeRef, uint64_t, uint64_t *);
  int v42;
  int32_t v44;
  CFTypeRef v45;
  unsigned int (*v46)(CFTypeRef, _QWORD, uint64_t *);
  uint64_t v47;
  CFIndex v49;
  CMTime *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  CMTime v55;
  CMTime lhs;
  CMTime time;
  CMTime rhs;
  __int16 v59;
  int32_t multiplier[2];
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  CMTime time2;
  CMTime time1;
  CMTime v66;
  CMTime v67;
  CFTypeRef v68;
  CFTypeRef v69;
  CFTypeRef v70[3];

  v69 = 0;
  v70[0] = 0;
  v68 = 0;
  *(_OWORD *)&v67.value = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v67.epoch = v5;
  v52 = *(_OWORD *)&v67.value;
  *(_OWORD *)&v66.value = *(_OWORD *)&v67.value;
  v66.epoch = v5;
  if (!a1 || !a2 || !a3)
    goto LABEL_76;
  Duration = FigFormatReaderUtilityGetDuration(a1, 1, &v67);
  if ((_DWORD)Duration)
    goto LABEL_77;
  v12 = (CMTime *)MEMORY[0x1E0CA2E68];
  if ((v67.flags & 0x1D) != 1
    || (time1 = v67,
        v53 = *MEMORY[0x1E0CA2E68],
        *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68],
        v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16),
        time2.epoch = v13,
        CMTimeCompare(&time1, &time2) < 1))
  {
    v66 = *v12;
    goto LABEL_76;
  }
  time1 = v67;
  CMTimeMultiplyByFloat64(&v66, &time1, 1.0 / (double)a4);
  bzero(a3, 8 * a4);
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    v15 = 0;
    v50 = a5;
    v49 = Count;
LABEL_9:
    v63 = 0;
    *(_OWORD *)&time1.value = v53;
    time1.epoch = v13;
    v51 = v15;
    if (FigCFArrayGetInt32AtIndex())
    {
      v16 = v63;
      v17 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
      if (!v17)
        goto LABEL_78;
      Duration = v17(a1, v16, v70, 0);
      if ((_DWORD)Duration)
        goto LABEL_77;
      v18 = v70[0];
      v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v19)
        goto LABEL_78;
      Duration = v19(v18, &v69);
      if ((_DWORD)Duration)
        goto LABEL_77;
      v20 = v69;
      v21 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v21)
      {
LABEL_78:
        v47 = 4294954514;
        goto LABEL_79;
      }
      Duration = v21(v20, &v68);
      if (!(_DWORD)Duration)
      {
        v61 = 0;
        v62 = 0;
        *(_QWORD *)multiplier = 0;
        v59 = 0;
        *(_OWORD *)&time2.value = v52;
        time2.epoch = v5;
        v22 = v68;
        v23 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, _QWORD, uint64_t *, int32_t *, _QWORD, char *, __int16 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
        if (v23)
        {
          v24 = 0;
          v25 = 0;
          while (1)
          {
            Duration = v23(v22, 0, 0, 0, &v62, multiplier, 0, (char *)&v59 + 1, &v59, 0);
            if ((_DWORD)Duration)
              goto LABEL_77;
            if ((_BYTE)v59)
            {
              v26 = v68;
              v27 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
              if (!v27)
                goto LABEL_78;
              Duration = v27(v26, &time2);
              if ((_DWORD)Duration)
                goto LABEL_77;
              time = time2;
              CMTimeMultiply(&rhs, &time, multiplier[0]);
              time = time1;
              CMTimeAdd(&time1, &time, &rhs);
              v24 += v62;
              time = v66;
              Seconds = CMTimeGetSeconds(&time);
              time = time1;
              v29 = CMTimeGetSeconds(&time);
              time = time1;
              lhs = v66;
              if ((CMTimeCompare(&time, &lhs) & 0x80000000) == 0)
              {
                v30 = (unint64_t)(Seconds * (double)v24 / v29);
                do
                {
                  *((_QWORD *)a3 + v25) += v30;
                  lhs = time1;
                  v55 = v66;
                  CMTimeSubtract(&time, &lhs, &v55);
                  time1 = time;
                  v24 -= v30;
                  if (v25 + 1 >= a4)
                  {
                    *((_QWORD *)a3 + v25) += v24;
                    *(_OWORD *)&time1.value = v53;
                    time1.epoch = v13;
                    v24 = 0;
                  }
                  else
                  {
                    ++v25;
                  }
                  time = time1;
                  lhs = v66;
                }
                while ((CMTimeCompare(&time, &lhs) & 0x80000000) == 0);
              }
              v31 = 0;
            }
            else
            {
              v54 = 0;
              if (*(uint64_t *)multiplier >= 1)
              {
                v32 = 0;
                while (1)
                {
                  v33 = v68;
                  v34 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                  if (!v34)
                    goto LABEL_78;
                  Duration = v34(v33, &time2);
                  if ((_DWORD)Duration)
                    goto LABEL_77;
                  if (!v32 || !HIBYTE(v59))
                  {
                    v35 = v68;
                    v36 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 144);
                    if (!v36)
                      goto LABEL_78;
                    Duration = v36(v35, 0, &v54, 0, 0);
                    if ((_DWORD)Duration)
                      goto LABEL_77;
                  }
                  lhs = time1;
                  v55 = time2;
                  CMTimeAdd(&time, &lhs, &v55);
                  time1 = time;
                  v24 += v54;
                  time = v66;
                  v37 = CMTimeGetSeconds(&time);
                  time = time1;
                  v38 = CMTimeGetSeconds(&time);
                  time = time1;
                  lhs = v66;
                  if (CMTimeCompare(&time, &lhs) >= 1)
                  {
                    v39 = (unint64_t)(v37 * (double)v24 / v38);
                    do
                    {
                      *((_QWORD *)a3 + v25) += v39;
                      lhs = time1;
                      v55 = v66;
                      CMTimeSubtract(&time, &lhs, &v55);
                      time1 = time;
                      v24 -= v39;
                      if (v25 + 1 >= a4)
                      {
                        *((_QWORD *)a3 + v25) += v24;
                        *(_OWORD *)&time1.value = v53;
                        time1.epoch = v13;
                        v24 = 0;
                      }
                      else
                      {
                        ++v25;
                      }
                      time = time1;
                      lhs = v66;
                    }
                    while (CMTimeCompare(&time, &lhs) > 0);
                  }
                  v40 = v68;
                  v41 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 168);
                  if (v41)
                    v42 = v41(v40, 1, &v61);
                  else
                    v42 = -12782;
                  if (v61 != 1 && v42 == 0)
                    v31 = -12840;
                  else
                    v31 = v42;
                  if (++v32 >= *(uint64_t *)multiplier || v31)
                    goto LABEL_56;
                }
              }
              v31 = 0;
LABEL_56:
              *(_QWORD *)multiplier = 0;
            }
            v44 = multiplier[0];
            if (*(uint64_t *)multiplier < 1 || v31)
            {
              if (v31)
                goto LABEL_66;
            }
            else
            {
              v45 = v68;
              v46 = *(unsigned int (**)(CFTypeRef, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 168);
              if (!v46 || v46(v45, v44, &v61) || v61 != *(_QWORD *)multiplier)
              {
LABEL_66:
                if (v68)
                {
                  CFRelease(v68);
                  v68 = 0;
                }
                a5 = v50;
                if (v69)
                {
                  CFRelease(v69);
                  v69 = 0;
                }
                if (v70[0])
                {
                  CFRelease(v70[0]);
                  v70[0] = 0;
                }
                v15 = v51 + 1;
                if (v51 + 1 != v49)
                  goto LABEL_9;
                goto LABEL_73;
              }
            }
            v61 = 0;
            v62 = 0;
            *(_QWORD *)multiplier = 0;
            v59 = 0;
            *(_OWORD *)&time2.value = v52;
            time2.epoch = v5;
            v22 = v68;
            v23 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, _QWORD, uint64_t *, int32_t *, _QWORD, char *, __int16 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
            if (!v23)
              goto LABEL_78;
          }
        }
        goto LABEL_78;
      }
LABEL_77:
      v47 = Duration;
      goto LABEL_79;
    }
LABEL_76:
    Duration = FigSignalErrorAt();
    goto LABEL_77;
  }
LABEL_73:
  v47 = 0;
  if (a5)
    *a5 = v66;
LABEL_79:
  if (v68)
    CFRelease(v68);
  if (v69)
    CFRelease(v69);
  if (v70[0])
    CFRelease(v70[0]);
  return v47;
}

uint64_t FigFormatReaderUtilityGetDuration(uint64_t a1, int a2, CMTime *a3)
{
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *);
  __CFString **v10;
  uint64_t v11;
  CFDictionaryRef dictionaryRepresentation;
  CFBooleanRef BOOLean;
  CMTime v15;

  v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  dictionaryRepresentation = 0;
  BOOLean = 0;
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v6)
    goto LABEL_11;
  v7 = *MEMORY[0x1E0C9AE00];
  v8 = v6(a1, CFSTR("AccurateDurationIsKnown"), *MEMORY[0x1E0C9AE00], &BOOLean);
  if (!(_DWORD)v8)
  {
    if (CFBooleanGetValue(BOOLean))
    {
      v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v9)
      {
        v10 = kFigFormatReaderProperty_NominalDuration;
        goto LABEL_9;
      }
    }
    else
    {
      if (!a2)
      {
        v11 = 4294949523;
        goto LABEL_12;
      }
      v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v9)
      {
        v10 = kFigFormatReaderProperty_EstimatedDuration;
LABEL_9:
        v8 = v9(a1, *v10, v7, &dictionaryRepresentation);
        if (!(_DWORD)v8)
        {
          CMTimeMakeFromDictionary(&v15, dictionaryRepresentation);
          v11 = 0;
          goto LABEL_12;
        }
        goto LABEL_20;
      }
    }
LABEL_11:
    v11 = 4294954514;
    goto LABEL_12;
  }
LABEL_20:
  v11 = v8;
LABEL_12:
  if (a3)
    *a3 = v15;
  if (dictionaryRepresentation)
    CFRelease(dictionaryRepresentation);
  if (BOOLean)
    CFRelease(BOOLean);
  return v11;
}

uint64_t RegisterStaticFormatReader(char *a1, uint64_t a2)
{
  uint64_t v3;
  const void *Value;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  CFDictionaryRef theDict;

  theDict = 0;
  v3 = FigFormatReaderCreatePropertyListDictionaryFromCString(a1, 1, &theDict);
  if ((_DWORD)v3)
    goto LABEL_10;
  Value = CFDictionaryGetValue(theDict, CFSTR("ContainerLabelling"));
  v5 = malloc_type_calloc(1uLL, 0x18uLL, 0xF00404EBE86FAuLL);
  if (!v5)
  {
    v3 = FigSignalErrorAt();
LABEL_10:
    v7 = v3;
    goto LABEL_6;
  }
  v6 = v5;
  *v5 = a2;
  v5[1] = Value;
  if (Value)
    CFRetain(Value);
  v6[2] = 0;
  CFArrayAppendValue((CFMutableArrayRef)gFFRRegistry, v6);
  v7 = 0;
LABEL_6:
  if (theDict)
    CFRelease(theDict);
  return v7;
}

uint64_t InstantiateMovieFormatReader(const void *a1, uint64_t a2, const __CFAllocator *a3, const __CFDictionary *a4, _QWORD *a5)
{
  return QTMovieFormatReaderCreateFromStream(a1, a3, a4, a5);
}

uint64_t InstantiateAVIFormatReader(const void *a1, uint64_t a2, const __CFAllocator *a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  if (a6)
    *a6 = 0;
  return AVIFormatReaderCreateFromStream(a1, a3, a5);
}

uint64_t InstantiateAudioFileFormatReader(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  if (a6)
    *a6 = 0;
  return FigAudioFileFormatReaderCreateFromStream(a1, a3, a4, a5);
}

uint64_t InstantiateAudioFileStreamFormatReader(const void *a1, int a2, uint64_t a3, CFDictionaryRef theDict, _QWORD *a5, _QWORD *a6)
{
  uint64_t (*v11)(const void *, uint64_t, uint64_t, _QWORD *);
  int ValueIfPresent;
  uint64_t (*v13)(const void *, uint64_t, uint64_t, _QWORD *);
  void *value;

  v11 = FigAudioFileStreamFormatReaderCreateFromStream;
  if (theDict)
  {
    value = 0;
    ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, CFSTR("Instantiation_PreferPreciseDurationAndTiming"), (const void **)&value);
    v13 = value == (void *)*MEMORY[0x1E0C9AE50]
        ? FigAudioFileFormatReaderCreateFromStream
        : FigAudioFileStreamFormatReaderCreateFromStream;
    if (ValueIfPresent)
      v11 = v13;
  }
  if (a6)
    *a6 = 0;
  return v11(a1, a3, (uint64_t)theDict, a5);
}

uint64_t InstantiateWebVTTFormatReader(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  if (a6)
    *a6 = 0;
  return FigWebVTTFormatReaderCreateFromStream(a1, a3, a5);
}

uint64_t InstantiateSCCFormatReader(const void *a1, uint64_t a2, const void *a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  return FigSCCFormatReaderCreateFromStream(a1, a3, a4, a5, a6);
}

uint64_t InstantiateTTMLFormatReader(uint64_t a1, int a2, const __CFAllocator *a3, int a4, CFTypeRef *a5, _QWORD *a6)
{
  if (a6)
    *a6 = 0;
  return FigTTMLFormatReaderCreateFromStream(a1, a4, a3, a5);
}

void FFRAddMIMETypeIfAbsent(const void *a1, const __CFArray *a2)
{
  CFTypeID v4;
  CFRange v5;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      v5.length = CFArrayGetCount(a2);
      v5.location = 0;
      if (!CFArrayContainsValue(a2, v5, a1))
        CFArrayAppendValue(a2, a1);
    }
  }
}

void AttemptInstantiationForMatchingLabel(uint64_t a1, uint64_t a2, const void *a3, int a4, const __CFString *a5, int a6, const __CFArray *a7, uint64_t a8)
{
  __objc2_class **p_superclass;
  uint64_t v10;
  const __CFDictionary *v11;
  const __CFArray *Value;
  const __CFArray *v13;
  CFIndex Count;
  uint64_t v15;
  const __CFString *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex v19;
  CFIndex v20;
  uint64_t v21;
  CFIndex v22;
  const void *v23;
  const void *v24;
  CFIndex v25;
  const void *v26;
  int v28;
  const void *v29;
  CFTypeRef v30;
  const void *v31;
  CFTypeRef v32;
  uint64_t v34;
  CFIndex v39;
  const void *ValueAtIndex;
  uint64_t v43;
  CFTypeRef cf;

  cf = 0;
  p_superclass = &OBJC_METACLASS___FigBaseCALayer.superclass;
  if (CFArrayGetCount((CFArrayRef)gFFRRegistry) < 1)
    goto LABEL_37;
  v10 = 0;
  v34 = *MEMORY[0x1E0C9AE00];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)p_superclass[154], v10);
    v11 = (const __CFDictionary *)*((_QWORD *)ValueAtIndex + 1);
    if (!v11
      || (Value = (const __CFArray *)CFDictionaryGetValue(v11, a3)) == 0
      || (v13 = Value, Count = CFArrayGetCount(Value), Count < 1))
    {
LABEL_22:
      ++v10;
      p_superclass = (__objc2_class **)(&OBJC_METACLASS___FigBaseCALayer + 8);
      continue;
    }
    v15 = Count;
    while (1)
    {
      v16 = (const __CFString *)CFArrayGetValueAtIndex(v13, v15 - 1);
      if (a6)
      {
        if (CFStringCompare(v16, a5, 1uLL))
          goto LABEL_20;
      }
      else if (!CFEqual(v16, a5))
      {
        goto LABEL_20;
      }
      if (!a7)
        goto LABEL_23;
      v17 = (const __CFArray *)CFDictionaryGetValue(*((CFDictionaryRef *)ValueAtIndex + 1), CFSTR("com.apple.uti"));
      if (v17)
      {
        v18 = v17;
        v19 = CFArrayGetCount(v17);
        v20 = CFArrayGetCount(a7);
        v39 = v19;
        if (v19 >= 1)
          break;
      }
LABEL_20:
      if (v15-- <= 1)
        goto LABEL_22;
    }
    v21 = v20;
    v22 = 0;
    while (1)
    {
      v23 = CFArrayGetValueAtIndex(v18, v22);
      if (v21 >= 1)
        break;
LABEL_19:
      if (++v22 == v39)
        goto LABEL_20;
    }
    v24 = v23;
    v25 = 0;
    while (1)
    {
      v26 = CFArrayGetValueAtIndex(a7, v25);
      if (CFEqual(v24, v26))
        break;
      if (v21 == ++v25)
        goto LABEL_19;
    }
LABEL_23:
    p_superclass = &OBJC_METACLASS___FigBaseCALayer.superclass;
    if (!ValueAtIndex)
      break;
    if (*(const void **)(a8 + 8) == ValueAtIndex)
      goto LABEL_33;
    v43 = 0;
    v28 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, CFTypeRef *))ValueAtIndex)(a1, *((_QWORD *)ValueAtIndex + 2), v34, a2, &v43, &cf);
    if (!v28)
    {
      *(_QWORD *)(a8 + 24) = v43;
      *(_QWORD *)(a8 + 32) = CFRetain(a5);
      *(_DWORD *)(a8 + 40) = a4;
      v31 = *(const void **)a8;
      v32 = cf;
      *(_QWORD *)a8 = cf;
      if (v32)
        CFRetain(v32);
      if (v31)
        CFRelease(v31);
      *(_QWORD *)(a8 + 8) = 0;
      *(_DWORD *)(a8 + 16) = 0;
      break;
    }
    if (!*(_QWORD *)(a8 + 8))
    {
      *(_DWORD *)(a8 + 16) = v28;
      v29 = *(const void **)a8;
      v30 = cf;
      *(_QWORD *)a8 = cf;
      *(_QWORD *)(a8 + 8) = ValueAtIndex;
      if (v30)
        CFRetain(v30);
      if (v29)
        CFRelease(v29);
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
LABEL_33:
    if (v10 >= 0)
      ++v10;
    else
      v10 = 0;
  }
  while (v10 < CFArrayGetCount((CFArrayRef)p_superclass[154]));
LABEL_37:
  if (cf)
    CFRelease(cf);
}

CFStringRef FigFormatReaderBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigFormatReader %p]"), a1);
}

void audioMentorPrerollSampleNotImmediatelyAvailable(uint64_t a1, uint64_t a2)
{
  audioMentorThreadFinishPreroll(a2, 2, *(const void **)(a2 + 272));
}

uint64_t AudioMentorSetModeToReversePlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, const void *a7, const void *a8)
{
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a3;
  v12 = *(_QWORD *)(a3 + 16);
  v9 = *(_OWORD *)a5;
  v10 = *(_QWORD *)(a5 + 16);
  return audioMentorSetModeToForwardOrReversePlayback(a1, a2, &v11, a4, &v9, a6, a7, a8, 2);
}

uint64_t AudioMentorSetModeToEmptyEdit(uint64_t a1, const void *a2, const __CFDictionary *a3, const void *a4, const void *a5)
{
  int PolicyFromPrerollPolicy;
  unsigned int v11;
  _BOOL4 ShouldSynchronouslyResetOutput;
  const void *v13;
  const void *v14;
  const void *v15;

  PolicyFromPrerollPolicy = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a3);
  v11 = audioMentorGetModeChangePolicy(a3);
  if (v11)
    ShouldSynchronouslyResetOutput = audioMentorShouldSynchronouslyResetOutput(a3);
  else
    ShouldSynchronouslyResetOutput = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
  if (!*(_BYTE *)a1)
  {
    *(_DWORD *)(a1 + 192) = PolicyFromPrerollPolicy;
    *(_DWORD *)(a1 + 196) = v11;
    *(_BYTE *)(a1 + 238) = ShouldSynchronouslyResetOutput;
    v13 = *(const void **)(a1 + 240);
    if (v13)
      CFRelease(v13);
    *(_QWORD *)(a1 + 240) = a2;
    if (a2)
      CFRetain(a2);
    v14 = *(const void **)(a1 + 248);
    if (v14)
      CFRelease(v14);
    *(_QWORD *)(a1 + 248) = a4;
    if (a4)
      CFRetain(a4);
    v15 = *(const void **)(a1 + 256);
    if (v15)
      CFRelease(v15);
    *(_QWORD *)(a1 + 256) = a5;
    if (a5)
      CFRetain(a5);
    *(_DWORD *)(a1 + 112) = 3;
    *(_BYTE *)(a1 + 116) = 1;
    FigMemoryBarrier();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
  FigSemaphoreSignal();
  if (ShouldSynchronouslyResetOutput)
    FigSemaphoreWaitRelative();
  return 0;
}

uint64_t audioMentorGetInitialReadPolicyFromPrerollPolicy(uint64_t result)
{
  const void *v1;

  if (result)
  {
    result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("PrerollPolicy"));
    if (result)
    {
      v1 = (const void *)result;
      if (CFEqual((CFTypeRef)result, CFSTR("PrerollUntilOutputReachesLowWater")))
      {
        return 1;
      }
      else if (CFEqual(v1, CFSTR("PrerollUntilOutputReachesLowWaterOrSampleNotImmediatelyAvailable")))
      {
        return 3;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL audioMentorShouldSynchronouslyResetOutput(const __CFDictionary *a1)
{
  const void *Value;
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    Value = CFDictionaryGetValue(a1, CFSTR("SynchronouslyResetOutput"));
    if (Value)
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], Value))
        return 1;
    }
  }
  return result;
}

uint64_t AudioMentorSetClientPID(_BYTE *a1)
{
  if (a1 && !*a1)
    return FigThreadSetProperty();
  else
    return 4294954511;
}

uint64_t AudioMentorSetThrottleForBackground(uint64_t a1, int a2)
{
  uint64_t v3;
  CFNumberRef v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, CFNumberRef);
  int valuePtr;

  if (!a1 || *(_BYTE *)a1)
    return 4294954511;
  valuePtr = 16 * (a2 != 0);
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v3 = FigThreadSetProperty();
  if (*(_BYTE *)(a1 + 41))
  {
    FigBaseObject = FigSampleCursorServiceGetFigBaseObject(*(_QWORD *)(a1 + 8));
    v7 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v7)
      v7(FigBaseObject, CFSTR("PriorityOfConsistentThreadHandlingSampleCursors"), v5);
  }
  if (v5)
    CFRelease(v5);
  return v3;
}

uint64_t audioMentorEnqueueBufferConsumedMarker(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  CMAttachmentBearerRef v6;
  uint64_t (*v7)(uint64_t, CMAttachmentBearerRef);
  CMAttachmentBearerRef target;

  target = 0;
  v4 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
  if (!(_DWORD)v4)
  {
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA26C8], a2, 1u);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = target;
    v7 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v7)
      v4 = v7(v5, v6);
    else
      v4 = 4294954514;
    CFRelease(target);
  }
  return v4;
}

uint64_t audioMentorGetDecodeWalkCatchupStatusForSteps(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  int v5;
  CFDictionaryRef v6;
  BOOL v7;
  uint64_t v8;
  const void *v9;
  int Int64IfPresent;
  unsigned int v11;
  CFDictionaryRef theDict;

  theDict = 0;
  FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v4)
    goto LABEL_17;
  v5 = v4(FigBaseObject, CFSTR("SampleDependencyAttributes"), *MEMORY[0x1E0C9AE00], &theDict);
  v6 = theDict;
  if (v5)
    v7 = 1;
  else
    v7 = theDict == 0;
  if (v7)
  {
    v8 = 2;
    if (!theDict)
      return v8;
    goto LABEL_19;
  }
  v9 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v9 == CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA2620])
    || CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CA25A8]))
  {
    Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
    if (a2 < 0)
      v11 = 1;
    else
      v11 = 2;
    if (Int64IfPresent)
      v8 = v11;
    else
      v8 = 0;
  }
  else
  {
LABEL_17:
    v8 = 2;
  }
  v6 = theDict;
  if (theDict)
LABEL_19:
    CFRelease(v6);
  return v8;
}

uint64_t FigTTMLDocumentWriterCreateRegionAttributeInserter(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterRegionAttributeInserter_Finalize(uint64_t a1)
{
  const void *v1;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
    CFRelease(v1);
}

CFStringRef figTTMLDocumentWriterRegionAttributeInserter_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterRegionAttributeInserter[%p]"), a1);
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_StartElement(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_EndElement(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterEndElement(*DerivedStorage);
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v10;
  CFTypeRef *v11;
  uint64_t v12;
  CFTypeRef v13;
  CFTypeRef cf;
  CFTypeRef v16;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v16 = 0;
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v5)
    goto LABEL_8;
  v6 = *MEMORY[0x1E0C9AE00];
  v7 = v5(CMBaseObject, *MEMORY[0x1E0CA3340], *MEMORY[0x1E0C9AE00], &v16);
  if ((_DWORD)v7)
    goto LABEL_18;
  if (!v16)
  {
LABEL_17:
    v7 = FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, a2);
    goto LABEL_18;
  }
  v8 = FigCaptionRegionGetCMBaseObject();
  v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v9)
  {
LABEL_8:
    v12 = 4294954514;
    goto LABEL_19;
  }
  v7 = v9(v8, *MEMORY[0x1E0CA3438], v6, &cf);
  if ((_DWORD)v7)
    goto LABEL_18;
  if (FigCFEqual())
  {
    v10 = *DerivedStorage;
    v11 = (CFTypeRef *)&kFigTTML_AttributeValue_region_top;
LABEL_15:
    v13 = *v11;
    goto LABEL_16;
  }
  if (FigCFEqual())
  {
    v10 = *DerivedStorage;
    v11 = (CFTypeRef *)&kFigTTML_AttributeValue_region_bottom;
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    v10 = *DerivedStorage;
    v11 = (CFTypeRef *)&kFigTTML_AttributeValue_region_left;
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    v10 = *DerivedStorage;
    v11 = (CFTypeRef *)&kFigTTML_AttributeValue_region_right;
    goto LABEL_15;
  }
  if (!cf || !CFStringGetLength((CFStringRef)cf))
    goto LABEL_17;
  v10 = *DerivedStorage;
  v13 = cf;
LABEL_16:
  v7 = FigTTMLDocumentWriterSetAttribute(v10, (uint64_t)CFSTR("region"), (uint64_t)v13);
  if (!(_DWORD)v7)
    goto LABEL_17;
LABEL_18:
  v12 = v7;
LABEL_19:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v12;
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterSetAttribute(*DerivedStorage, a2, a3);
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

__CFDictionary *FigMentorNotificationPayloadCreate(uint64_t a1, const void *a2, int a3, int a4, const void *a5, int a6)
{
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  if (!a2 && !a3 && !a5)
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = Mutable;
  if (Mutable)
  {
    if (a2)
      CFDictionarySetValue(Mutable, CFSTR("Mentor_Order"), a2);
    if (a3)
      FigCFDictionarySetInt32();
    if (FigCFEqual() || FigCFEqual())
    {
      v13 = (const void *)*MEMORY[0x1E0C9AE50];
      v14 = (const void *)*MEMORY[0x1E0C9AE40];
      v15 = (const void *)(a4 ? *MEMORY[0x1E0C9AE50] : *MEMORY[0x1E0C9AE40]);
      CFDictionarySetValue(v12, CFSTR("Mentor_SamplesWereGenerated"), v15);
      if (FigCFEqual())
      {
        if (a6)
          v16 = v13;
        else
          v16 = v14;
        CFDictionarySetValue(v12, CFSTR("Mentor_LastsForever"), v16);
      }
    }
    if (a5)
      CFDictionarySetValue(v12, CFSTR("Mentor_NotificationThatWasRequestedButDropped"), a5);
  }
  else
  {
    FigSignalErrorAt();
  }
  return v12;
}

uint64_t FigSampleBufferAudioRendererAirPlayCreateWithOptions(uint64_t a1, const __CFDictionary *a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t DerivedStorage;
  dispatch_queue_t v10;
  dispatch_queue_t v11;
  CFTypeRef v12;
  uint64_t v13;
  char *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *value;
  CFTypeRef cf;
  char __str[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  value = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v7 = 4294950916;
  if (!a3 || !a4)
    return v7;
  cf = 0;
  FigSampleBufferAudioRendererGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
  {
    v7 = v8;
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    snprintf(__str, 0x80uLL, "com.apple.coremedia.samplebufferaudiorendererairplay.state[%p]", cf);
    v10 = dispatch_queue_create(__str, 0);
    *(_QWORD *)(DerivedStorage + 16) = v10;
    if (v10)
    {
      snprintf(__str, 0x80uLL, "com.apple.coremedia.samplebufferaudiorendererairplay.notification[%p]", cf);
      v11 = dispatch_queue_create(__str, 0);
      *(_QWORD *)(DerivedStorage + 8) = v11;
      if (v11)
      {
        *(_QWORD *)DerivedStorage = a3;
        CFRetain(a3);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        *(_BYTE *)(DerivedStorage + 77) = 1;
        v12 = cf;
        v13 = CMBaseObjectGetDerivedStorage();
        *(_BYTE *)(v13 + 80) = 0;
        v14 = (char *)(v13 + 80);
        if (a2 && CFDictionaryGetValueIfPresent(a2, CFSTR("LoggingIdentifier"), (const void **)&value))
          CFStringGetCString((CFStringRef)value, v14, 10, 0x600u);
        *a4 = v12;
        if (dword_1EE2A2B68)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
    }
    v7 = 4294950914;
  }
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t FigSampleBufferAudioRendererAirPlayCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  return FigSampleBufferAudioRendererAirPlayCreateWithOptions(a1, 0, a2, a3);
}

uint64_t audioRendererAirPlay_subRendererNotificationHandler()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void audioRendererAirPlay_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t SharedInstance;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;
  NSObject *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 64))
  {
    SharedInstance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    v4 = *(_QWORD *)(DerivedStorage + 64);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v5)
      v5(SharedInstance, a1, v4);
    v6 = *(const void **)(DerivedStorage + 64);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(_QWORD *)DerivedStorage)
    {
      CFRelease(*(CFTypeRef *)DerivedStorage);
      *(_QWORD *)DerivedStorage = 0;
    }
  }
  v7 = *(const void **)(DerivedStorage + 32);
  if (v7)
    CFRelease(v7);
  audioRendererAirPlay_removeRoutingContextListeners(a1, *(_QWORD *)(DerivedStorage + 24));
  v8 = *(const void **)(DerivedStorage + 24);
  if (v8)
    CFRelease(v8);
  audioRendererAirPlay_removeEndpointListeners(a1, *(_QWORD *)(DerivedStorage + 40));
  v9 = *(const void **)(DerivedStorage + 40);
  if (v9)
  {
    if (!*(_QWORD *)(DerivedStorage + 48)
      || (FigEndpointRelinquishStreamResource(), (v9 = *(const void **)(DerivedStorage + 40)) != 0))
    {
      CFRelease(v9);
    }
  }
  v10 = *(const void **)(DerivedStorage + 48);
  if (v10)
    CFRelease(v10);
  audioRendererAirPlay_removeBufferedAirPlayOutputListeners(a1, *(_QWORD *)(DerivedStorage + 56));
  v11 = *(const void **)(DerivedStorage + 56);
  if (v11)
    CFRelease(v11);
  v12 = *(NSObject **)(DerivedStorage + 16);
  if (v12)
  {
    dispatch_release(v12);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v13 = *(NSObject **)(DerivedStorage + 8);
  if (v13)
  {
    dispatch_release(v13);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *audioRendererAirPlay_CopyDebugDesc(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  CFAllocatorRef v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferAudioRendererAirPlay=%p retainCount=%d allocator=%p"), a1, v5, v6);
  CFStringAppendFormat(Mutable, 0, CFSTR(" subRenderer=%p"), *DerivedStorage);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t audioRendererAirPlay_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void **v9;
  uint64_t v10;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, uint64_t, uint64_t, _QWORD *);
  uint64_t v14;
  CFTypeRef v15;
  NSObject *v16;
  _QWORD *v17;
  const void *v18;
  _QWORD block[6];
  _QWORD v20[6];
  _QWORD v21[6];
  CFTypeRef v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  if (!a4)
    return 4294950916;
  v9 = (const void **)DerivedStorage;
  if (FigCFEqual())
  {
    audioRendererAirPlay_copyRoutingContext(a1, (uint64_t)a4);
LABEL_4:
    v10 = 0;
    goto LABEL_5;
  }
  if (FigCFEqual())
  {
    audioRendererAirPlay_copyRoutingContext(a1, (uint64_t)&v22);
    v12 = v22;
    if (!v22)
    {
      v10 = 0;
      *a4 = 0;
      return v10;
    }
    v13 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (v13)
    {
      v14 = *MEMORY[0x1E0D48D58];
      v15 = v12;
LABEL_12:
      v10 = v13(v15, v14, a3, a4);
      goto LABEL_5;
    }
    goto LABEL_23;
  }
  if (FigCFEqual())
  {
    v16 = v9[2];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 0x40000000;
    v21[2] = __audioRendererAirPlay_CopyProperty_block_invoke;
    v21[3] = &__block_descriptor_tmp_21;
    v21[4] = a4;
    v21[5] = v9;
    v17 = v21;
LABEL_20:
    dispatch_sync(v16, v17);
    goto LABEL_4;
  }
  if (FigCFEqual())
  {
    v16 = v9[2];
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 0x40000000;
    v20[2] = __audioRendererAirPlay_CopyProperty_block_invoke_2;
    v20[3] = &__block_descriptor_tmp_14;
    v20[4] = a4;
    v20[5] = v9;
    v17 = v20;
    goto LABEL_20;
  }
  if (FigCFEqual())
  {
    v16 = v9[2];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __audioRendererAirPlay_CopyProperty_block_invoke_3;
    block[3] = &__block_descriptor_tmp_15;
    block[4] = a4;
    block[5] = v9;
    v17 = block;
    goto LABEL_20;
  }
  v18 = *v9;
  v13 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
  {
    v15 = v18;
    v14 = a2;
    goto LABEL_12;
  }
LABEL_23:
  v10 = 4294954514;
LABEL_5:
  if (v22)
    CFRelease(v22);
  return v10;
}

uint64_t audioRendererAirPlay_SetProperty(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t *DerivedStorage;
  CFTypeID v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  CFTypeID v12;
  __CFDictionary *MutableCopy;
  __CFDictionary *v14;
  int v15;
  CFTypeRef v16;
  NSObject *v17;
  CFTypeID v18;
  CFTypeID v19;
  Boolean Value;
  NSObject *v21;
  int v22;
  CFTypeID v23;
  Boolean v24;
  int v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, const void *);
  uint64_t *v28;
  int v29;
  _QWORD v30[8];
  _QWORD v31[8];
  _QWORD block[8];
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  CFTypeRef v37[6];
  Boolean v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;

  v33 = 0;
  v34 = &v33;
  v35 = 0x2000000000;
  v36 = 0;
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    if (!a3 || (v7 = CFGetTypeID(a3), v7 == FigRoutingContextGetTypeID()))
    {
      v8 = DerivedStorage[2];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __audioRendererAirPlay_SetProperty_block_invoke;
      block[3] = &unk_1E2F853E8;
      block[4] = &v33;
      block[5] = a1;
      block[6] = a3;
      block[7] = DerivedStorage;
      v9 = block;
LABEL_5:
      dispatch_sync(v8, v9);
      goto LABEL_6;
    }
    goto LABEL_35;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (!a3 || (v18 = CFGetTypeID(a3), v18 == CFStringGetTypeID()))
      {
        v8 = DerivedStorage[2];
        v30[0] = MEMORY[0x1E0C809B0];
        v30[1] = 0x40000000;
        v30[2] = __audioRendererAirPlay_SetProperty_block_invoke_3;
        v30[3] = &unk_1E2F85438;
        v30[4] = &v33;
        v30[5] = a1;
        v30[6] = DerivedStorage;
        v30[7] = a3;
        v9 = v30;
        goto LABEL_5;
      }
      goto LABEL_35;
    }
    if (FigCFEqual())
    {
      if (a3)
      {
        v19 = CFGetTypeID(a3);
        if (v19 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue((CFBooleanRef)a3);
          v39 = 0;
          v40 = &v39;
          v41 = 0x2000000000;
          v42 = 0;
          v21 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
          v37[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
          v37[1] = (CFTypeRef)0x40000000;
          v37[2] = __audioRendererAirPlay_setIsActiveAudioSessionApp_block_invoke;
          v37[3] = &unk_1E2F85460;
          v37[4] = &v39;
          v37[5] = a1;
          v38 = Value;
          dispatch_sync(v21, v37);
          v22 = *((_DWORD *)v40 + 6);
          _Block_object_dispose(&v39, 8);
          *((_DWORD *)v34 + 6) = v22;
          goto LABEL_6;
        }
      }
      goto LABEL_35;
    }
    if (FigCFEqual())
    {
      if (!a3)
        goto LABEL_35;
      v23 = CFGetTypeID(a3);
      if (v23 != CFBooleanGetTypeID())
        goto LABEL_35;
      v24 = CFBooleanGetValue((CFBooleanRef)a3);
      v25 = audioRendererAirPlay_setBufferedAirPlayAllowed((uint64_t)a1, v24);
    }
    else
    {
      v26 = *DerivedStorage;
      v27 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v27)
        v25 = v27(v26, a2, a3);
      else
        v25 = -12782;
    }
    *((_DWORD *)v34 + 6) = v25;
    goto LABEL_6;
  }
  if (!a3 || (v12 = CFGetTypeID(a3), v12 != CFStringGetTypeID()))
  {
LABEL_35:
    v28 = v34;
    v29 = -16380;
LABEL_37:
    *((_DWORD *)v28 + 6) = v29;
    goto LABEL_6;
  }
  v37[0] = 0;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v28 = v34;
    v29 = -16382;
    goto LABEL_37;
  }
  v14 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D48BE0], a3);
  v15 = FigRoutingContextRemoteCopyContextForUUID();
  if (v15)
  {
    v16 = 0;
  }
  else
  {
    v16 = v37[0];
    v37[0] = 0;
  }
  CFRelease(v14);
  if (v37[0])
    CFRelease(v37[0]);
  *((_DWORD *)v34 + 6) = v15;
  if (!v15)
  {
    v17 = DerivedStorage[2];
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 0x40000000;
    v31[2] = __audioRendererAirPlay_SetProperty_block_invoke_2;
    v31[3] = &unk_1E2F85410;
    v31[4] = &v33;
    v31[5] = a1;
    v31[6] = v16;
    v31[7] = DerivedStorage;
    dispatch_sync(v17, v31);
  }
  if (v16)
    CFRelease(v16);
LABEL_6:
  v10 = *((unsigned int *)v34 + 6);
  _Block_object_dispose(&v33, 8);
  return v10;
}

uint64_t audioRendererAirPlay_removeRoutingContextListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t audioRendererAirPlay_removeEndpointListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t audioRendererAirPlay_removeBufferedAirPlayOutputListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void audioRendererAirPlay_routingContextRouteChangedListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *);
  int v9;
  CFTypeRef v10;
  int IsDisallowedInternal;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_QWORD *)(DerivedStorage + 24) == a4)
  {
    v7 = *(_QWORD *)(DerivedStorage + 32);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
    if (v8)
    {
      v9 = v8(a4, v7, &cf);
      v10 = cf;
      if (!v9)
      {
        IsDisallowedInternal = audioRendererAirPlay_setNonBAOPlaybackIsDisallowedInternal(a2, (uint64_t)cf);
        v10 = cf;
        if (!IsDisallowedInternal)
        {
          audioRendererAirPlay_routeToEndpointInternal(a2, cf);
          v10 = cf;
        }
      }
      if (v10)
        CFRelease(v10);
    }
  }
}

uint64_t audioRendererAirPlay_setNonBAOPlaybackIsDisallowedInternal(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t *v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, CFBooleanRef *);
  _QWORD *v7;
  CFBooleanRef v8;
  BOOL v9;
  int Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t);
  uint64_t v14;
  CFBooleanRef BOOLean[25];

  BOOLean[24] = *(CFBooleanRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOLean[0] = 0;
  v4 = *(_QWORD *)(DerivedStorage + 24);
  if (!v4)
    return v4;
  v5 = (uint64_t *)DerivedStorage;
  if (a2)
  {
    v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (!v6)
      goto LABEL_18;
    v7 = (_QWORD *)MEMORY[0x1E0D48D38];
  }
  else
  {
    v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (!v6)
      goto LABEL_18;
    v7 = (_QWORD *)MEMORY[0x1E0D48D40];
  }
  v4 = v6(v4, *v7, 0, BOOLean);
  v8 = BOOLean[0];
  if ((_DWORD)v4)
    v9 = 1;
  else
    v9 = BOOLean[0] == 0;
  if (v9)
    goto LABEL_20;
  Value = CFBooleanGetValue(BOOLean[0]);
  if (dword_1EE2A2B68)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = *v5;
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v13)
  {
    if (Value)
      v14 = *MEMORY[0x1E0C9AE40];
    else
      v14 = *MEMORY[0x1E0C9AE50];
    v4 = v13(v12, CFSTR("NonBAOPlaybackIsDisallowed"), v14);
    goto LABEL_19;
  }
LABEL_18:
  v4 = 4294954514;
LABEL_19:
  v8 = BOOLean[0];
LABEL_20:
  if (v8)
    CFRelease(v8);
  return v4;
}

uint64_t audioRendererAirPlay_routeToEndpointInternal(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  CFTypeRef v6;
  const void *v7;
  CFTypeRef *v8;
  CFTypeRef v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;
  const void *v16;
  CFTypeRef v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
    v6 = CFRetain(v5);
  else
    v6 = 0;
  v8 = (CFTypeRef *)(DerivedStorage + 48);
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
    v9 = CFRetain(v7);
  else
    v9 = 0;
  v10 = *(_QWORD *)(DerivedStorage + 40);
  if ((const void *)v10 != a2)
  {
    audioRendererAirPlay_removeEndpointListeners(a1, v10);
    v11 = *(const void **)(DerivedStorage + 40);
    *(_QWORD *)(DerivedStorage + 40) = a2;
    if (a2)
      CFRetain(a2);
    if (v11)
      CFRelease(v11);
    audioRendererAirPlay_addEndpointListeners(a1, *(_QWORD *)(DerivedStorage + 40));
  }
  if (*v8)
  {
    CFRelease(*v8);
    *v8 = 0;
  }
  if (!a2)
    goto LABEL_24;
  if (v9 && FigEndpointContainsStream())
  {
    *v8 = CFRetain(v9);
LABEL_24:
    if (*v8 != v9)
    {
      audioRendererAirPlay_updateBufferedAirPlayOutput(a1);
      if (v9)
        FigEndpointRelinquishStreamResource();
    }
    v15 = 0;
    goto LABEL_28;
  }
  v12 = FigEndpointAcquireAndCopyStreamResource();
  if ((_DWORD)v12)
    v13 = (_DWORD)v12 == -16725;
  else
    v13 = 1;
  if (v13)
    goto LABEL_24;
  v15 = v12;
  audioRendererAirPlay_removeEndpointListeners(a1, *(_QWORD *)(DerivedStorage + 40));
  v16 = *(const void **)(DerivedStorage + 40);
  *(_QWORD *)(DerivedStorage + 40) = v6;
  if (v6)
    CFRetain(v6);
  if (v16)
    CFRelease(v16);
  audioRendererAirPlay_addEndpointListeners(a1, *(_QWORD *)(DerivedStorage + 40));
  v17 = v9;
  if (*(CFTypeRef *)(DerivedStorage + 48) != v9)
  {
    FigEndpointRelinquishStreamResource();
    v17 = *v8;
  }
  *v8 = v9;
  if (v9)
    CFRetain(v9);
  if (v17)
    CFRelease(v17);
LABEL_28:
  if (v6)
    CFRelease(v6);
  if (v9)
    CFRelease(v9);
  return v15;
}

uint64_t audioRendererAirPlay_addEndpointListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

void audioRendererAirPlay_updateBufferedAirPlayOutput(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  char v4;
  const void *v5;
  CFTypeRef *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, const __CFString *, uint64_t);
  CFTypeRef v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 48) && *(_BYTE *)(DerivedStorage + 77))
  {
    v4 = 0;
    v6 = (CFTypeRef *)(DerivedStorage + 56);
    v5 = *(const void **)(DerivedStorage + 56);
    if (!v5)
    {
      v7 = 0;
      v8 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    v6 = (CFTypeRef *)(DerivedStorage + 56);
    v5 = *(const void **)(DerivedStorage + 56);
    if (!v5)
      return;
    v4 = 1;
  }
  v8 = CFRetain(v5);
  v7 = *v6;
LABEL_8:
  audioRendererAirPlay_removeBufferedAirPlayOutputListeners(a1, (uint64_t)v7);
  if (*v6)
  {
    CFRelease(*v6);
    *v6 = 0;
  }
  if ((v4 & 1) == 0)
  {
    if (FigBufferedAirPlayOutputCreate(0, *(const void **)(v3 + 40), *(const void **)(v3 + 48), v6))
      goto LABEL_20;
    audioRendererAirPlay_addBufferedAirPlayOutputListeners(a1, (uint64_t)*v6);
  }
  if (dword_1EE2A2B68)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = *(_QWORD *)v3;
  v11 = *(_QWORD *)(v3 + 56);
  v12 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
  if (v12 && !v12(v10, CFSTR("BufferedAirPlayOutput"), v11))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (!v8)
      return;
    goto LABEL_18;
  }
LABEL_20:
  audioRendererAirPlay_removeBufferedAirPlayOutputListeners(a1, (uint64_t)*v6);
  v13 = *v6;
  *v6 = v8;
  if (v8)
    CFRetain(v8);
  if (v13)
    CFRelease(v13);
  audioRendererAirPlay_addBufferedAirPlayOutputListeners(a1, (uint64_t)*v6);
  if (v8)
LABEL_18:
    CFRelease(v8);
}

uint64_t audioRendererAirPlay_endpointStreamsChangedListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 40) == a4)
    return audioRendererAirPlay_routeToEndpointInternal(a2, a4);
  return result;
}

uint64_t audioRendererAirPlay_addBufferedAirPlayOutputListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

_QWORD *audioRendererAirPlay_bufferedAirPlayOutputEndpointPreemptedNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (result[7] == a4)
  {
    if (*result)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return (_QWORD *)FigDispatchAsyncPostNotification();
    }
  }
  return result;
}

void audioRendererAirPlay_copyRoutingContext(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  _QWORD v5[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(NSObject **)(DerivedStorage + 16);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __audioRendererAirPlay_copyRoutingContext_block_invoke;
  v5[3] = &__block_descriptor_tmp_16;
  v5[4] = a2;
  v5[5] = DerivedStorage;
  dispatch_sync(v4, v5);
}

CFTypeRef __audioRendererAirPlay_copyRoutingContext_block_invoke(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 24);
  if (result)
    result = CFRetain(result);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

uint64_t audioRendererAirPlay_setRoutingContextAndRemoteDeviceIDInternal(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t *DerivedStorage;
  const void *v7;
  CFTypeRef v8;
  uint64_t SharedInstance;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  const void *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t IsDisallowedInternal;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  const void *v24;
  const void *v25;
  CFTypeRef cf;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (FigCFEqual() && FigCFEqual())
  {
    v8 = 0;
    v20 = 0;
    goto LABEL_38;
  }
  v7 = (const void *)DerivedStorage[3];
  if (v7)
    v8 = CFRetain(v7);
  else
    v8 = 0;
  if (DerivedStorage[8])
  {
    SharedInstance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    v10 = DerivedStorage[8];
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v11)
      v11(SharedInstance, a1, v10);
    v12 = (const void *)DerivedStorage[8];
    if (v12)
    {
      CFRelease(v12);
      DerivedStorage[8] = 0;
    }
  }
  audioRendererAirPlay_removeRoutingContextListeners(a1, DerivedStorage[3]);
  v13 = (const void *)DerivedStorage[3];
  DerivedStorage[3] = (uint64_t)a2;
  if (a2)
    CFRetain(a2);
  if (v13)
    CFRelease(v13);
  audioRendererAirPlay_updateRoutingRegistryInternal(a1);
  audioRendererAirPlay_addRoutingContextListeners(a1, DerivedStorage[3]);
  v14 = (const void *)DerivedStorage[4];
  DerivedStorage[4] = (uint64_t)a3;
  if (a3)
    CFRetain(a3);
  if (v14)
    CFRelease(v14);
  v15 = DerivedStorage[3];
  if (!v15)
  {
    v19 = 0;
LABEL_25:
    v20 = audioRendererAirPlay_routeToEndpointInternal(a1, v19);
    if (!(_DWORD)v20)
      goto LABEL_38;
    goto LABEL_28;
  }
  v16 = DerivedStorage[4];
  v17 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  if (v17)
  {
    IsDisallowedInternal = v17(v15, v16, &cf);
    if (!(_DWORD)IsDisallowedInternal)
    {
      IsDisallowedInternal = audioRendererAirPlay_setNonBAOPlaybackIsDisallowedInternal(a1, (uint64_t)cf);
      if (!(_DWORD)IsDisallowedInternal)
      {
        v19 = cf;
        goto LABEL_25;
      }
    }
    v20 = IsDisallowedInternal;
  }
  else
  {
    v20 = 4294954514;
  }
LABEL_28:
  if (DerivedStorage[8])
  {
    v21 = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    v22 = DerivedStorage[8];
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v23)
      v23(v21, a1, v22);
    v24 = (const void *)DerivedStorage[8];
    if (v24)
    {
      CFRelease(v24);
      DerivedStorage[8] = 0;
    }
  }
  audioRendererAirPlay_removeRoutingContextListeners(a1, DerivedStorage[3]);
  v25 = (const void *)DerivedStorage[3];
  DerivedStorage[3] = (uint64_t)v8;
  if (v8)
    CFRetain(v8);
  if (v25)
    CFRelease(v25);
  audioRendererAirPlay_updateRoutingRegistryInternal(a1);
  audioRendererAirPlay_addRoutingContextListeners(a1, DerivedStorage[3]);
LABEL_38:
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return v20;
}

uint64_t audioRendererAirPlay_setBufferedAirPlayAllowed(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v4 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __audioRendererAirPlay_setBufferedAirPlayAllowed_block_invoke;
  block[3] = &unk_1E2F85488;
  block[4] = &v9;
  block[5] = a1;
  v8 = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void audioRendererAirPlay_updateRoutingRegistryInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, _QWORD, uint64_t *);
  uint64_t SharedInstance;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  const void *v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v13 = 0;
  if (*(float *)(DerivedStorage + 72) && *(_BYTE *)(DerivedStorage + 77))
  {
    if (!*(_QWORD *)(DerivedStorage + 64))
    {
      v4 = *(_QWORD *)(DerivedStorage + 24);
      if (v4)
      {
        v5 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v5)
        {
          v5(v4, *MEMORY[0x1E0D48D58], 0, &v13);
          if (v13)
          {
            *(_QWORD *)(v3 + 64) = v13;
            v13 = 0;
            SharedInstance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
            v7 = *(_QWORD *)(v3 + 64);
            v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (v8)
              v8(SharedInstance, a1, v7);
          }
        }
      }
    }
  }
  else if (*(_QWORD *)(DerivedStorage + 64))
  {
    v9 = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    v10 = *(_QWORD *)(v3 + 64);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v11)
      v11(v9, a1, v10);
    v12 = *(const void **)(v3 + 64);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(v3 + 64) = 0;
    }
  }
}

uint64_t audioRendererAirPlay_addRoutingContextListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

uint64_t __audioRendererAirPlay_setIsActiveAudioSessionApp_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 48);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 76) == (_DWORD)v2
    || (*(_BYTE *)(DerivedStorage + 76) = v2, (v4 = *(_QWORD *)(DerivedStorage + 56)) == 0))
  {
    result = 0;
  }
  else
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v5)
      result = v5(v4, v2, 0, 0);
    else
      result = 4294954514;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __audioRendererAirPlay_setBufferedAirPlayAllowed_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t DerivedStorage;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 77) != v3)
  {
    *(_BYTE *)(DerivedStorage + 77) = v3;
    audioRendererAirPlay_updateRoutingRegistryInternal(v2);
    audioRendererAirPlay_updateBufferedAirPlayOutput(v2);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
}

__CFString *audioRendererAirPlay_deviceRendererProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigSampleBufferAudioRenderer <FigSampleBufferAudioDeviceRendererProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t audioRendererAirPlay_DuckVolume(float a1, float a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, float, float);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleBufferAudioDeviceRendererProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v9 + 8);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t audioRendererAirPlay_SilentMute(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleBufferAudioDeviceRendererProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t audioRendererAirPlay_QueueIsAboveHighWaterLevel()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v1)
    return v1(v0);
  else
    return 1;
}

uint64_t audioRendererAirPlay_EnqueueSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t audioRendererAirPlay_Flush()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v1)
    return v1(v0);
  else
    return 4294954514;
}

uint64_t audioRendererAirPlay_AttachToSynchronizer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t audioRendererAirPlay_CopyClock(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t audioRendererAirPlay_SetRateAndTime(uint64_t a1, __int128 *a2, float a3)
{
  uint64_t *DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, float);
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(a1, a3);
  v7 = *DerivedStorage;
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v8)
  {
    v13 = v11;
    v14 = v12;
    v9 = v8(v7, &v13, a3);
    if (!(_DWORD)v9)
      return v9;
  }
  else
  {
    v9 = 4294954514;
  }
  audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(a1, 0.0);
  return v9;
}

uint64_t audioRendererAirPlay_FlushFromMediaTime(uint64_t a1, __int128 *a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, void (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v8)
  {
    v13 = v11;
    v14 = v12;
    return v8(v7, &v13, a3, a4);
  }
  else
  {
    v9 = 4294954514;
    if (a3)
      a3(4294954514, a4);
  }
  return v9;
}

uint64_t audioRendererAirPlay_SetRateAndAnchorTime(uint64_t a1, __int128 *a2, __int128 *a3, float a4)
{
  uint64_t *DerivedStorage;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, __int128 *, __int128 *, float);
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(a1, a4);
  v9 = *DerivedStorage;
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  v13 = *a3;
  v14 = *((_QWORD *)a3 + 2);
  v10 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 64);
  if (v10)
  {
    v19 = v15;
    v20 = v16;
    v17 = v13;
    v18 = v14;
    v11 = v10(v9, &v19, &v17, a4);
    if (!(_DWORD)v11)
      return v11;
  }
  else
  {
    v11 = 4294954514;
  }
  audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(a1, 0.0);
  return v11;
}

void audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD block[6];
  float v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __audioRendererAirPlay_saveRateAndUpdateRoutingRegistry_block_invoke;
  block[3] = &__block_descriptor_tmp_24;
  v7 = a2;
  block[4] = DerivedStorage;
  block[5] = a1;
  dispatch_sync(v5, block);
}

void __audioRendererAirPlay_saveRateAndUpdateRoutingRegistry_block_invoke(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 72) = v1;
  audioRendererAirPlay_updateRoutingRegistryInternal(v2);
}

uint64_t FigSampleGeneratorBatchGetClassID()
{
  MEMORY[0x19402F294](&FigSampleGeneratorBatchGetClassID_sRegisterFigSampleGeneratorBatchTypeOnce, RegisterFigSampleGeneratorBatchType);
  return sFigSampleGeneratorBatchClassID;
}

uint64_t RegisterFigSampleGeneratorBatchType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigSampleGeneratorBatchGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleGeneratorBatchGetClassID_sRegisterFigSampleGeneratorBatchTypeOnce, RegisterFigSampleGeneratorBatchType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleGeneratorGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleGeneratorGetClassID_sRegisterFigSampleGeneratorTypeOnce, RegisterFigSampleGeneratorType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleGeneratorBatchCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleGeneratorBatch %p]"), a1);
}

CFStringRef FigSampleGeneratorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleGenerator %p]"), a1);
}

uint64_t FigImageQueueConfigurationGetTypeID()
{
  if (FigImageQueueConfigurationGetTypeID_sRegisterImageQueueConfigurationTypeOnce != -1)
    dispatch_once(&FigImageQueueConfigurationGetTypeID_sRegisterImageQueueConfigurationTypeOnce, &__block_literal_global_13);
  return FigImageQueueConfigurationGetTypeID_sImageQueueConfigurationTypeID;
}

uint64_t imageQueueConfiguration_init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void imageQueueConfiguration_finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t imageQueueConfiguration_equal()
{
  return FigCFEqual();
}

CFHashCode imageQueueConfiguration_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

CFStringRef imageQueueConfiguration_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a1)
    return CFStringCreateWithFormat(v2, 0, CFSTR("[ImageQueueConfiguration %p] array: %@"), a1, *(_QWORD *)(a1 + 16));
  else
    return CFStringCreateWithFormat(v2, 0, CFSTR("[ImageQueueConfiguration %p]"), 0);
}

uint64_t FigImageQueueConfigurationCreate(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v6;
  CFMutableArrayRef Mutable;
  uint64_t v9;

  if (FigImageQueueConfigurationGetTypeID_sRegisterImageQueueConfigurationTypeOnce != -1)
    dispatch_once(&FigImageQueueConfigurationGetTypeID_sRegisterImageQueueConfigurationTypeOnce, &__block_literal_global_13);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v6 = (_QWORD *)Instance;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v6[2] = Mutable;
  if (Mutable)
  {
    *a3 = v6;
    return 0;
  }
  else
  {
    v9 = FigSignalErrorAt();
    CFRelease(v6);
    return v9;
  }
}

uint64_t FigImageQueueConfigurationAddFigImageQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;

  if (!a1)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v5 = Mutable;
  FigCFDictionarySetValue();
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), v5);
  CFRelease(v5);
  return 0;
}

uint64_t FigByteStreamCreateForByteFlume(const void *a1, const __CFAllocator *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  int IsItOKToLogURLs;
  uint64_t v9;
  _QWORD *DerivedStorage;
  CFTypeRef v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, const __CFAllocator *, CFNumberRef *);
  uint64_t v14;
  CFNumberRef v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const __CFString *, const __CFAllocator *, CFURLRef *);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, _QWORD, _QWORD *);
  const void *v21;
  CFStringRef v22;
  const __CFString *v23;
  CFStringRef v24;
  CFStringRef v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFURLRef anURL;
  CFTypeRef cf;
  uint64_t valuePtr;
  CFNumberRef number[16];
  char buffer[3];
  _BYTE v33[1045];

  *(_QWORD *)&v33[1021] = *MEMORY[0x1E0C80C00];
  anURL = 0;
  cf = 0;
  bzero(v33, 0x3FDuLL);
  qmemcpy(buffer, "n/a", sizeof(buffer));
  IsItOKToLogURLs = FigIsItOKToLogURLs();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_46;
  }
  if (a4)
  {
    CMByteStreamGetClassID();
    v9 = CMDerivedObjectCreate();
    if (!(_DWORD)v9)
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      v11 = CFRetain(a1);
      *DerivedStorage = v11;
      number[0] = 0;
      FigBaseObject = FigByteFlumeGetFigBaseObject(v11);
      v13 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v13)
      {
        v14 = v13(FigBaseObject, CFSTR("FBF_EntireLength"), a2, number);
        v15 = number[0];
        if (!(_DWORD)v14 && number[0])
        {
          valuePtr = 0;
          CFNumberGetValue(number[0], kCFNumberSInt64Type, &valuePtr);
          if (valuePtr < 0)
          {
            v14 = 4294954513;
          }
          else
          {
            v14 = 0;
            DerivedStorage[1] = valuePtr;
          }
          v15 = number[0];
        }
        if (v15)
          CFRelease(v15);
        if ((_DWORD)v14)
          goto LABEL_27;
        FigByteStreamStatsSetupWorker();
        if (sFlumeStreamDestMutexOnce != -1)
          dispatch_once_f(&sFlumeStreamDestMutexOnce, 0, (dispatch_function_t)flumeStream_setUpDestMutexOnce);
        v16 = FigByteFlumeGetFigBaseObject(*DerivedStorage);
        v17 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v17)
        {
          v18 = v17(v16, CFSTR("FBF_URL"), a2, &anURL);
          if (!(_DWORD)v18)
          {
            v19 = FigByteFlumeGetFigBaseObject(*DerivedStorage);
            v20 = *(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
            if (v20)
              v20(v19, CFSTR("FBF_ClientBundleIdentifier"), *MEMORY[0x1E0C9AE00], DerivedStorage + 3);
            if (a3
              && (v21 = (const void *)*MEMORY[0x1E0C9AE50], v21 == CFDictionaryGetValue(a3, CFSTR("DoNotLogURLs")))
              || !IsItOKToLogURLs)
            {
              v24 = CFURLCopyScheme(anURL);
              if (v24)
              {
                v25 = v24;
                v23 = CFStringCreateWithFormat(a2, 0, CFSTR("%@://<redacted>"), v24);
                CFRelease(v25);
                if (!v23)
                {
LABEL_33:
                  if (dword_1EE2A2B88)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  v14 = 0;
                  *a4 = cf;
                  cf = 0;
LABEL_36:
                  if (*MEMORY[0x1E0CA1FC0] != 1)
                    goto LABEL_38;
                  goto LABEL_37;
                }
LABEL_31:
                CFStringGetCString(v23, buffer, 1024, 0x8000100u);
                goto LABEL_33;
              }
            }
            else
            {
              v22 = CFURLGetString(anURL);
              if (v22)
              {
                v23 = (const __CFString *)CFRetain(v22);
                if (!v23)
                  goto LABEL_33;
                goto LABEL_31;
              }
            }
            v23 = 0;
            goto LABEL_33;
          }
          v14 = v18;
          goto LABEL_27;
        }
      }
      v14 = 4294954514;
LABEL_27:
      FigSignalErrorAt();
LABEL_28:
      v23 = 0;
      goto LABEL_36;
    }
LABEL_46:
    v14 = v9;
    goto LABEL_28;
  }
  v14 = FigSignalErrorAt();
  if (*MEMORY[0x1E0CA1FC0] != 1)
    goto LABEL_40;
  v23 = 0;
LABEL_37:
  strncpy((char *)number, buffer, 8uLL);
  kdebug_trace();
LABEL_38:
  if (v23)
    CFRelease(v23);
LABEL_40:
  if (anURL)
    CFRelease(anURL);
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t flumeStream_setUpDestMutexOnce()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  sFlumeStreamDestMutex = result;
  return result;
}

__n128 FigFlumeStreamFinalize()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v2;
  __n128 result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (dword_1EE2A2B88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
  FigByteStreamStatsTeardownWorker();
  result.n128_u64[0] = 0xF5F5F5F5F5F5F5F5;
  result.n128_u64[1] = 0xF5F5F5F5F5F5F5F5;
  *(__n128 *)(DerivedStorage + 64) = result;
  *(__n128 *)(DerivedStorage + 80) = result;
  *(__n128 *)(DerivedStorage + 32) = result;
  *(__n128 *)(DerivedStorage + 48) = result;
  *(__n128 *)DerivedStorage = result;
  *(__n128 *)(DerivedStorage + 16) = result;
  return result;
}

__CFString *FigFlumeStreamCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigFlumeStream %p sourceFlume %@ entireLength %lld lastReadIssued %d"), a1, *(_QWORD *)DerivedStorage, *(_QWORD *)(DerivedStorage + 8), *(unsigned int *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t FigFlumeStreamCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *DerivedStorage;
  _DWORD *v9;
  uint64_t SInt64;
  uint64_t v11;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, __CFString *, uint64_t, uint64_t *);
  __CFString **v15;
  uint64_t StatsDictionary;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2070]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2068]))
  {
    SInt64 = FigCFNumberCreateSInt64();
LABEL_8:
    v11 = 0;
    *a4 = SInt64;
    goto LABEL_9;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2098]))
  {
    FigBaseObject = FigByteFlumeGetFigBaseObject(*DerivedStorage);
    v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v14)
    {
      v15 = kFigByteFlumeProperty_URL;
LABEL_17:
      StatsDictionary = v14(FigBaseObject, *v15, a3, a4);
LABEL_18:
      v11 = StatsDictionary;
      goto LABEL_9;
    }
    goto LABEL_35;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F60]))
  {
LABEL_20:
    v11 = 4294954512;
    goto LABEL_9;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F78]))
  {
    FigBaseObject = FigByteFlumeGetFigBaseObject(*DerivedStorage);
    v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v14)
    {
      v15 = kFigByteFlumeProperty_MIMEType;
      goto LABEL_17;
    }
    goto LABEL_35;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2078]))
  {
LABEL_25:
    SInt64 = (uint64_t)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F98]))
  {
    StatsDictionary = flumeStreamCreateReadStatsDictionary(a1, a3, a4);
    goto LABEL_18;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F38]))
  {
    FigBaseObject = FigByteFlumeGetFigBaseObject(*DerivedStorage);
    v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v14)
    {
      v15 = kFigByteFlumeProperty_AccessLog;
      goto LABEL_17;
    }
    goto LABEL_35;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F70]))
  {
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F40]))
      goto LABEL_20;
    goto LABEL_25;
  }
  if (*DerivedStorage)
  {
    FigBaseObject = FigByteFlumeGetFigBaseObject(*DerivedStorage);
    v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v14)
    {
      v15 = kFigByteFlumeProperty_LastError;
      goto LABEL_17;
    }
LABEL_35:
    v11 = 4294954514;
    goto LABEL_9;
  }
  v11 = 4294954513;
LABEL_9:
  if (*v9 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  return v11;
}

uint64_t FigFlumeStreamSetProperty(int a1, CFTypeRef cf)
{
  _DWORD *v2;

  v2 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (cf)
    {
      CFHash(cf);
      kdebug_trace();
      if (*v2 == 1)
      {
        CFHash(cf);
LABEL_6:
        kdebug_trace();
      }
    }
    else
    {
      kdebug_trace();
      if (*v2 == 1)
        goto LABEL_6;
    }
  }
  return 4294954512;
}

uint64_t flumeStreamCreateReadStatsDictionary(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *DerivedStorage;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t result;
  CFTypeRef cf;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a3)
    return 4294954516;
  FigBaseObject = FigByteFlumeGetFigBaseObject(*DerivedStorage);
  v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v7)
    v7(FigBaseObject, CFSTR("FBF_URL"), a2, &cf);
  *a3 = FigByteStreamStatsCreateStatsDictionary();
  result = (uint64_t)cf;
  if (cf)
  {
    CFRelease(cf);
    return 0;
  }
  return result;
}

uint64_t FigFlumeStreamRead(const void *a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v13 = 0;
  CMBaseObjectGetDerivedStorage();
  FigGetUpTimeNanoseconds();
  v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v11 = flumeStream_issueReadAndWaitForCompletion(a1, a2, a3, a4, 0, &v13);
  if (a5)
    *a5 = v13;
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  if (*v10 == 1)
    kdebug_trace();
  return v11;
}

uint64_t FigFlumeStreamGetAvailableLengthAtOffset(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  CMBaseObjectGetDerivedStorage();
  v5 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    v10 = FigSignalErrorAt();
    if (*v5 != 1)
      return v10;
    goto LABEL_8;
  }
  if (a2 < 0 || (v7 = *(_QWORD *)(DerivedStorage + 8), v8 = v7 < a2, v9 = v7 - a2, v8))
  {
    v10 = FigSignalErrorAt();
  }
  else
  {
    v10 = 0;
    *a3 = v9;
  }
  if (*v5 == 1)
LABEL_8:
    kdebug_trace();
  return v10;
}

uint64_t FigFlumeStreamReadAndCreateBlockBuffer(const void *a1, unint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v13 = 0;
  CMBaseObjectGetDerivedStorage();
  *a4 = 0;
  FigGetUpTimeNanoseconds();
  v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v11 = flumeStream_issueReadAndWaitForCompletion(a1, a2, a3, 0, a4, &v13);
  if (a5)
    *a5 = v13;
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  if (*v10 == 1)
    kdebug_trace();
  return v11;
}

uint64_t flumeStream_issueReadAndWaitForCompletion(const void *a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t *DerivedStorage;
  const __CFAllocator *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t Instance;
  uint64_t v17;
  dispatch_semaphore_t v18;
  uint64_t Empty;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, unint64_t, _QWORD, void (*)(uint64_t, int, int, uint64_t, CMBlockBufferRef, char, int), uint64_t, uint64_t, _QWORD *);
  uint64_t v24;
  dispatch_time_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v33;
  _QWORD v35[25];

  v35[23] = *MEMORY[0x1E0C80C00];
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v35[0] = 0;
  v12 = CFGetAllocator(a1);
  if (a5)
    *a5 = 0;
  if (a3 < 0)
    goto LABEL_46;
  v13 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v14 = v13 < a3;
  v15 = v13 - a3;
  if (v14)
  {
    v33 = FigSignalErrorAt();
    if ((_DWORD)v33)
    {
LABEL_47:
      v27 = v33;
      v17 = 0;
LABEL_48:
      v26 = 0;
      goto LABEL_38;
    }
    if (a2)
    {
LABEL_46:
      v33 = FigSignalErrorAt();
      goto LABEL_47;
    }
LABEL_49:
    v17 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_38;
  }
  if (!a2)
    goto LABEL_49;
  if (v15 <= 0)
    goto LABEL_46;
  if (v15 < a2)
    a2 = v15;
  if (figFlumeStreamReadRecord_GetTypeID_sRegisterFigFlumeStreamReadRecordTypeOnce != -1)
    dispatch_once_f(&figFlumeStreamReadRecord_GetTypeID_sRegisterFigFlumeStreamReadRecordTypeOnce, &figFlumeStreamReadRecord_GetTypeID_sFigFlumeStreamReadRecordTypeID, (dispatch_function_t)figFlumeStreamReadRecord_RegisterType);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v17 = Instance;
    v18 = dispatch_semaphore_create(0);
    *(_QWORD *)(v17 + 72) = v18;
    if (v18)
      goto LABEL_13;
    v27 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v17);
  }
  else
  {
    v27 = FigSignalErrorAt();
  }
  v17 = 0;
  v26 = 0;
  if ((_DWORD)v27)
    goto LABEL_38;
LABEL_13:
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 56) = a4;
  if (a5)
  {
    Empty = CMBlockBufferCreateEmpty(v12, 0, 0, (CMBlockBufferRef *)(v17 + 64));
    if ((_DWORD)Empty)
    {
      v27 = Empty;
      goto LABEL_48;
    }
  }
  *(_DWORD *)(v17 + 40) = FigAtomicIncrement32();
  *(_DWORD *)(v17 + 80) = 1;
  v20 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  CFRetain((CFTypeRef)v17);
  v21 = *DerivedStorage;
  v22 = *(int *)(v17 + 40);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD, void (*)(uint64_t, int, int, uint64_t, CMBlockBufferRef, char, int), uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v23)
  {
    v24 = v23(v21, a3, a2, 0, flumeStream_incrementalReadCallback, v17, v22, v35);
    if ((_DWORD)v24 || (*(_QWORD *)(v17 + 48) = v35[0], v24 = FigThreadRegisterAbortAction(), (_DWORD)v24))
    {
      v27 = v24;
      v26 = 0;
    }
    else
    {
      if (FigCFEqual())
        v25 = dispatch_time(0, 10000000000);
      else
        v25 = -1;
      if (dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v17 + 72), v25))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (*v20 == 1)
          kdebug_trace();
        v29 = *DerivedStorage;
        v30 = v35[0];
        v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v31)
          v31(v29, v30);
        if (*v20 == 1)
          kdebug_trace();
        v26 = 0;
        v27 = 4294954364;
      }
      else
      {
        v26 = *(_QWORD *)(v17 + 32);
        if (a5)
          *a5 = *(_QWORD *)(v17 + 64);
        *(_QWORD *)(v17 + 64) = 0;
        v27 = *(unsigned int *)(v17 + 80);
      }
    }
  }
  else
  {
    v26 = 0;
    v27 = 4294954514;
  }
  if (*v20 == 1)
    kdebug_trace();
LABEL_38:
  if (a6)
    *a6 = v26;
  FigThreadUnregisterAbortAction();
  if (v17)
    CFRelease((CFTypeRef)v17);
  return v27;
}

void flumeStream_incrementalReadCallback(uint64_t a1, int a2, int a3, uint64_t a4, CMBlockBufferRef theBuffer, char a6, int a7)
{
  _DWORD *v12;
  const char *v13;
  size_t DataLength;
  uint64_t v15;
  OpaqueCMBlockBuffer *v16;
  char __dst[8];

  v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if ((a6 & 1) != 0)
      v13 = "true";
    else
      v13 = "false";
    strncpy(__dst, v13, 8uLL);
    kdebug_trace();
  }
  if (!a7)
  {
    DataLength = CMBlockBufferGetDataLength(theBuffer);
    if (DataLength)
    {
      MEMORY[0x19402EEEC](sFlumeStreamDestMutex);
      v15 = *(_QWORD *)(a1 + 56);
      if (v15)
        CMBlockBufferCopyDataBytes(theBuffer, 0, DataLength, (void *)(v15 + a4));
      v16 = *(OpaqueCMBlockBuffer **)(a1 + 64);
      if (v16)
        CMBlockBufferAppendBufferReference(v16, theBuffer, 0, 0, 0);
      MEMORY[0x19402EF04](sFlumeStreamDestMutex);
      *(_QWORD *)(a1 + 32) += DataLength;
    }
  }
  *(_DWORD *)(a1 + 80) = a7;
  if (*v12 == 1)
    kdebug_trace();
  if ((a6 & 1) != 0)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 72));
    CFRelease((CFTypeRef)a1);
  }
}

intptr_t flumeStream_abortWaitingForReadCompletion(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _DWORD *v3;
  intptr_t result;

  if (dword_1EE2A2B88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  *(_DWORD *)(a1 + 12) = -12871;
  result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)a1);
  if (*v3 == 1)
    return kdebug_trace();
  return result;
}

uint64_t figFlumeStreamReadRecord_RegisterType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double figFlumeStreamReadRecord_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figFlumeStreamReadRecord_Finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v3 = *(NSObject **)(a1 + 72);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 72) = 0;
  }
}

__CFString *figFlumeStreamReadRecord_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigFlumeStreamReadRecordRef %p RC %d readIssue %d flumeReadID %lld start %lld length %lld bytesRead %lld reqResult %d"), a1, v4, *(unsigned int *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 80));
  return Mutable;
}

uint64_t FigCaptionRendererCaptionArrayInputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3 && a5)
  {
    *a5 = 0;
    FigCaptionRendererInputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererCaptionArrayInputSetCaptionsArray(uint64_t a1, const void *a2)
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    CFRelease(*DerivedStorage);
  if (a2)
    *DerivedStorage = CFRetain(a2);
  return 0;
}

void figFCRCaptionArrayInput_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 32);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

__CFString *figFCRCaptionArrayInput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererCaptionArrayInput %p>"), a1);
  return Mutable;
}

uint64_t ffcrcainput_start(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 32))
  {
    v3 = DerivedStorage;
    v4 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v4)
    {
      v5 = v4;
      *v4 = CFRetain(a1);
      dispatch_sync_f(*(dispatch_queue_t *)(v3 + 32), v5, (dispatch_function_t)startInputDoAsync);
    }
  }
  return 0;
}

uint64_t ffcrcainput_stop()
{
  return 0;
}

void startInputDoAsync(const void **a1)
{
  const void *v1;
  uint64_t DerivedStorage;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  char v12;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, char **);
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, CFTypeRef *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, double *);
  double v31;
  CFIndex v32;
  CFIndex v33;
  CFIndex v34;
  const void *v35;
  uint64_t ProtocolVTable;
  uint64_t v37;
  unsigned int (*v38)(const void *, CFTypeRef *);
  const char *v39;
  int v40;
  void (**v41)(const void *, _QWORD);
  int v42;
  CMTime cf;
  double FigBaseObject;
  uint64_t v46;
  CFTypeRef v47;
  double v48;
  char *__s1;
  _QWORD context[2];
  CFRange v51;

  v1 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = v1;
  context[1] = DerivedStorage;
  v3 = *(const __CFArray **)DerivedStorage;
  cf.value = 0;
  *(double *)&v47 = 0.0;
  if (CFArrayGetCount(v3))
  {
    v4 = 0;
    v5 = *MEMORY[0x1E0C9AE00];
    v6 = *MEMORY[0x1E0CA3368];
    while (1)
    {
      if (cf.value)
      {
        CFRelease((CFTypeRef)cf.value);
        cf.value = 0;
      }
      if (*(double *)&v47 != 0.0)
      {
        CFRelease(v47);
        *(double *)&v47 = 0.0;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(v3, v4);
      CMBaseObject = FigCaptionGetCMBaseObject(ValueAtIndex);
      v9 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
      if (!v9
        || v9(CMBaseObject, CFSTR("CaptionData"), v5, &cf)
        || (v10 = FigCaptionDataGetCMBaseObject(),
            (v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48)) == 0)
        || v11(v10, v6, v5, &v47))
      {
LABEL_13:
        v12 = 0;
        goto LABEL_16;
      }
      if (FigCFArrayContainsValue())
        break;
      if (++v4 == CFArrayGetCount(v3))
        goto LABEL_13;
    }
    v12 = 1;
LABEL_16:
    if (*(double *)&v47 != 0.0)
      CFRelease(v47);
    if (cf.value)
      CFRelease((CFTypeRef)cf.value);
  }
  else
  {
    v12 = 0;
  }
  *(_BYTE *)(DerivedStorage + 16) = v12;
  v13 = *(const __CFArray **)DerivedStorage;
  v51.length = CFArrayGetCount(*(CFArrayRef *)DerivedStorage);
  v51.location = 0;
  CFArrayApplyFunction(v13, v51, (CFArrayApplierFunction)enumCaptions_applierFunc, context);
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
  if (Count < 1)
  {
LABEL_43:
    v32 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
    if (v32 < 1)
    {
LABEL_54:
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 8));
      goto LABEL_56;
    }
    v33 = v32;
    v34 = 0;
    while (1)
    {
      v35 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), v34);
      *(double *)&v47 = 0.0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (!ProtocolVTable)
        break;
      v37 = *(_QWORD *)(ProtocolVTable + 16);
      if (!v37)
        break;
      v38 = *(unsigned int (**)(const void *, CFTypeRef *))(v37 + 8);
      if (!v38 || v38(v35, &v47))
        break;
      v39 = (const char *)v47;
      if (*(double *)&v47 == 0.0
        || (v40 = strcmp((const char *)v47, "FigCaptionRendererPaintOnCaption"),
            v41 = (void (**)(const void *, _QWORD))(DerivedStorage + 40),
            v40)
        && (v42 = strcmp(v39, "FigCaptionRendererCaption"),
            v41 = (void (**)(const void *, _QWORD))(DerivedStorage + 40),
            v42))
      {
        v41 = (void (**)(const void *, _QWORD))(DerivedStorage + 48);
      }
      (*v41)(v35, *(_QWORD *)(DerivedStorage + 56));
      if (v33 == ++v34)
        goto LABEL_54;
    }
  }
  else
  {
    v15 = Count;
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), v16);
      __s1 = 0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      v19 = CMBaseObjectGetProtocolVTable();
      if (!v19)
        break;
      v20 = *(_QWORD *)(v19 + 16);
      if (!v20)
        break;
      v21 = *(unsigned int (**)(uint64_t, char **))(v20 + 8);
      if (!v21 || v21(v18, &__s1))
        break;
      if (__s1 && (v22 = strcmp(__s1, "FigCaptionRendererPaintOnCaption"), !(_DWORD)v22))
      {
        if (v17)
        {
          *(double *)&v47 = 0.0;
          v48 = 0.0;
          *(double *)&v47 = FigBytePumpGetFigBaseObject(v22);
          v48 = v23;
          FigCaptionRendererIntervalProtocolGetProtocolID();
          v24 = CMBaseObjectGetProtocolVTable();
          if (v24)
          {
            v25 = *(_QWORD *)(v24 + 16);
            if (v25)
            {
              v26 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v25 + 8);
              if (v26)
                v24 = v26(v17, &v47);
            }
          }
          FigBaseObject = 0.0;
          v46 = 0;
          FigBaseObject = FigBytePumpGetFigBaseObject(v24);
          v46 = v27;
          FigCaptionRendererIntervalProtocolGetProtocolID();
          v28 = CMBaseObjectGetProtocolVTable();
          if (v28)
          {
            v29 = *(_QWORD *)(v28 + 16);
            if (v29)
            {
              v30 = *(void (**)(uint64_t, double *))(v29 + 8);
              if (v30)
                v30(v18, &FigBaseObject);
            }
          }
          v31 = FigBaseObject;
          if (FigBaseObject >= *(double *)&v47 + v48)
            v31 = *(double *)&v47 + v48;
          CMTimeMake(&cf, (uint64_t)((v31 - *(double *)&v47) * 1000.0), 1000);
          FigCaptionRendererPaintOnCaptionSetAnimationDuration(v17, (uint64_t)&cf);
        }
      }
      else
      {
        v18 = v17;
      }
      ++v16;
      v17 = v18;
      if (v15 == v16)
        goto LABEL_43;
    }
  }
  FigSignalErrorAt();
LABEL_56:
  if (v1)
    CFRelease(v1);
  free(a1);
}

void enumCaptions_applierFunc(uint64_t a1)
{
  uint64_t DerivedStorage;
  void (*v3)(CMTimeRange *__return_ptr, uint64_t);
  __int128 v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const void *v10;
  uint64_t v11;
  double FigBaseObject;
  double v13;
  double v14;
  uint64_t ProtocolVTable;
  uint64_t v16;
  void (*v17)(const void *, double, double);
  CFMutableStringRef Mutable;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, const __CFAllocator *, CFStringRef *);
  const __CFAttributedString *v21;
  const __CFAttributedString *MutableCopy;
  CFMutableDictionaryRef v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(const void *, CFMutableDictionaryRef);
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, const __CFAllocator *, CMTimeRange *);
  const void *InitialValue;
  const void *v31;
  __CFArray *v32;
  __CFArray *v33;
  __CFArray *v34;
  __CFArray *v35;
  __CFArray *v36;
  __CFArray *v37;
  __CFArray *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, const __CFString *);
  uint64_t v43;
  unsigned int (*v44)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v45;
  unsigned int (*v46)(uint64_t, _QWORD, const __CFAllocator *, CFStringRef *);
  CFComparisonResult v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  double v50;
  int v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(const void *, uint64_t);
  uint64_t v56;
  void (*v57)(uint64_t, _QWORD, const __CFAllocator *, const __CFString **);
  CFStringRef v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(const void *, const __CFString *);
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(const void *, const __CFString *);
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(const void *, uint64_t);
  void *v75;
  CFStringRef v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(void *, CFStringRef);
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(void *, uint64_t);
  void *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(void *, _QWORD);
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(void *, double, double);
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(void *, double, double);
  CFAttributedStringRef Copy;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(const void *, CFAttributedStringRef);
  const void *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(const void *, uint64_t);
  double v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  const void *v109;
  uint64_t v110;
  void (*v111)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  double v112;
  int v113;
  uint64_t v114;
  unsigned int (*v115)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  double v116;
  double v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  unsigned int (*v122)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const __CFString *v123;
  const __CFString *v124;
  uint64_t v125;
  unsigned int (*v126)(uint64_t, _QWORD, const __CFAllocator *, CFStringRef *);
  const void *v127;
  CFTypeRef *v128;
  const void *v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(const void *, const __CFString *);
  void *v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(void *, _QWORD);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, int *);
  uint64_t v141;
  void (*v142)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(void *, _QWORD);
  CFStringRef v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(void *, CFStringRef);
  void *v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(void *, _QWORD);
  void *v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(void *, double, double);
  const void *v162;
  void *v163;
  CFStringRef v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(void *, CFStringRef *);
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  __int128 v174;
  __int128 v175;
  _OWORD v176[2];
  int v177;
  CFStringRef theString1;
  double v179;
  const __CFString *v180;
  CFTypeRef v181;
  void *value;
  CFTypeRef cf;
  CMTimeRange time;
  CMTime v185;
  CFTypeRef v186;
  CFStringRef v187;
  CFStringRef v188;
  CFTypeRef v189;
  CFTypeRef v190;
  CMTimeRange v191;
  const void *v192[2];
  CFRange v193;
  CFRange v194;
  CFRange v195;
  CFRange v196;
  CFRange v197;
  CFRange v198;
  CFRange v199;
  CFRange v200;
  CFRange v201;
  CFRange v202;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v192[0] = 0;
  memset(&v191, 0, sizeof(v191));
  v3 = *(void (**)(CMTimeRange *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v3)
  {
    v3(&v191, a1);
  }
  else
  {
    v4 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *(_OWORD *)&v191.start.value = *MEMORY[0x1E0CA2E40];
    *(_OWORD *)&v191.start.epoch = v4;
    *(_OWORD *)&v191.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  }
  v189 = 0;
  v190 = 0;
  v187 = 0;
  v188 = 0;
  v186 = 0;
  CMBaseObject = FigCaptionGetCMBaseObject(a1);
  v6 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v6
    || (v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        v6(CMBaseObject, CFSTR("CaptionData"), *MEMORY[0x1E0C9AE00], &v190)))
  {
    FigSignalErrorAt();
    goto LABEL_176;
  }
  v8 = FigCaptionDataGetCMBaseObject();
  v9 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (v9 && !v9(v8, *MEMORY[0x1E0CA3300], v7, &v186) && FigCFEqual())
  {
    FigCaptionRendererPaintOnCaptionCreate(v192);
    FigCaptionRendererPaintOnCaptionSetAnimationEnabled((uint64_t)v192[0], 1);
  }
  else
  {
    FigCaptionRendererCaptionCreate(v192);
  }
  *(_OWORD *)&time.start.value = *(_OWORD *)&v191.start.value;
  time.start.epoch = v191.start.epoch;
  CMTimeGetSeconds(&time.start);
  time = v191;
  CMTimeRangeGetEnd(&v185, &time);
  CMTimeGetSeconds(&v185);
  v10 = v192[0];
  FigBaseObject = FigBytePumpGetFigBaseObject(v11);
  v14 = v13;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v16 = *(_QWORD *)(ProtocolVTable + 16);
    if (v16)
    {
      v17 = *(void (**)(const void *, double, double))(v16 + 16);
      if (v17)
        v17(v10, FigBaseObject, v14);
    }
  }
  Mutable = CFStringCreateMutable(v7, 0);
  v19 = FigCaptionDataGetCMBaseObject();
  v20 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (v20)
    v20(v19, *MEMORY[0x1E0CA3370], v7, &v188);
  if (v188 && CFStringGetLength(v188) >= 1)
  {
    CFStringAppend(Mutable, v188);
    v21 = CFAttributedStringCreate(v7, Mutable, 0);
    MutableCopy = CFAttributedStringCreateMutableCopy(v7, 0, v21);
    if (v21)
      CFRelease(v21);
    v23 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v24 = v192[0];
    FigCaptionRendererCaptionProtocolGetProtocolID();
    v25 = CMBaseObjectGetProtocolVTable();
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 16);
      if (v26)
      {
        v27 = *(void (**)(const void *, CFMutableDictionaryRef))(v26 + 8);
        if (v27)
          v27(v24, v23);
      }
    }
    time.start.value = 0;
    v28 = FigCaptionDataGetCMBaseObject();
    v29 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v29)
      v29(v28, *MEMORY[0x1E0CA3378], v7, &time);
    InitialValue = (const void *)FigCaptionDynamicStyleGetInitialValue();
    if (InitialValue)
    {
      v31 = InitialValue;
      if (!CFEqual(InitialValue, (CFTypeRef)*MEMORY[0x1E0CA3670])
        && !CFEqual(v31, (CFTypeRef)*MEMORY[0x1E0CA3658])
        && !CFEqual(v31, (CFTypeRef)*MEMORY[0x1E0CA3650])
        && !CFEqual(v31, (CFTypeRef)*MEMORY[0x1E0CA3660]))
      {
        CFEqual(v31, (CFTypeRef)*MEMORY[0x1E0CA3668]);
      }
    }
    FigCFDictionarySetValue();
    if (time.start.value)
      CFRelease((CFTypeRef)time.start.value);
    v32 = copyRangedValuesOfStyleProperty((uint64_t)v190, *MEMORY[0x1E0CA35E8]);
    FigCFDictionarySetValue();
    time.start.value = *MEMORY[0x1E0CA2A20];
    *(_QWORD *)&time.start.timescale = MutableCopy;
    v193.length = CFArrayGetCount(v32);
    v193.location = 0;
    CFArrayApplyFunction(v32, v193, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v32)
      CFRelease(v32);
    v33 = copyRangedValuesOfStyleProperty((uint64_t)v190, *MEMORY[0x1E0CA35A0]);
    FigCFDictionarySetValue();
    time.start.value = *MEMORY[0x1E0CA2978];
    *(_QWORD *)&time.start.timescale = MutableCopy;
    v194.length = CFArrayGetCount(v33);
    v194.location = 0;
    CFArrayApplyFunction(v33, v194, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v33)
      CFRelease(v33);
    v34 = copyRangedValuesOfStyleProperty((uint64_t)v190, *MEMORY[0x1E0CA3580]);
    FigCFDictionarySetValue();
    time.start.value = *MEMORY[0x1E0CA2A50];
    *(_QWORD *)&time.start.timescale = MutableCopy;
    v195.length = CFArrayGetCount(v34);
    v195.location = 0;
    CFArrayApplyFunction(v34, v195, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v34)
      CFRelease(v34);
    v35 = copyRangedValuesOfStyleProperty((uint64_t)v190, *MEMORY[0x1E0CA3560]);
    FigCFDictionarySetValue();
    time.start.value = *MEMORY[0x1E0CA2B38];
    *(_QWORD *)&time.start.timescale = MutableCopy;
    v196.length = CFArrayGetCount(v35);
    v196.location = 0;
    CFArrayApplyFunction(v35, v196, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v35)
      CFRelease(v35);
    v36 = copyRangedValuesOfStyleProperty((uint64_t)v190, *MEMORY[0x1E0CA3558]);
    FigCFDictionarySetValue();
    time.start.value = *MEMORY[0x1E0CA29B8];
    *(_QWORD *)&time.start.timescale = MutableCopy;
    v197.length = CFArrayGetCount(v36);
    v197.location = 0;
    CFArrayApplyFunction(v36, v197, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v36)
      CFRelease(v36);
    v37 = copyRangedValuesOfStyleProperty((uint64_t)v190, *MEMORY[0x1E0CA35E0]);
    FigCFDictionarySetValue();
    time.start.value = *MEMORY[0x1E0CA2AD8];
    *(_QWORD *)&time.start.timescale = MutableCopy;
    v198.length = CFArrayGetCount(v37);
    v198.location = 0;
    CFArrayApplyFunction(v37, v198, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v37)
      CFRelease(v37);
    v38 = copyRangedValuesOfStyleProperty((uint64_t)v190, *MEMORY[0x1E0CA35F0]);
    FigCFDictionarySetValue();
    time.start.value = *MEMORY[0x1E0CA2A38];
    *(_QWORD *)&time.start.timescale = MutableCopy;
    v199.length = CFArrayGetCount(v38);
    v199.location = 0;
    CFArrayApplyFunction(v38, v199, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v38)
      CFRelease(v38);
    FigCFDictionarySetValue();
    if (*(_BYTE *)(DerivedStorage + 16))
    {
      FigCFDictionarySetValue();
      v39 = v192[0];
      FigCaptionRendererCaptionProtocolGetProtocolID();
      v40 = CMBaseObjectGetProtocolVTable();
      if (!v40)
        goto LABEL_168;
      v41 = *(_QWORD *)(v40 + 16);
      if (!v41)
        goto LABEL_168;
      v42 = *(unsigned int (**)(const void *, const __CFString *))(v41 + 56);
      if (!v42 || v42(v39, CFSTR("ja-JP")))
        goto LABEL_168;
    }
    cf = 0;
    v43 = FigCaptionDataGetCMBaseObject();
    v44 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (!v44 || v44(v43, *MEMORY[0x1E0CA3340], v7, &cf))
      goto LABEL_168;
    if (!cf)
      goto LABEL_124;
    value = 0;
    v45 = FigCaptionRegionGetCMBaseObject();
    v46 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
    if (!v46 || v46(v45, *MEMORY[0x1E0CA3438], v7, &v187))
      goto LABEL_168;
    if (v187)
    {
      v47 = CFStringCompare(v187, (CFStringRef)*MEMORY[0x1E0CA3468], 0);
      if (CFStringCompare(v187, (CFStringRef)*MEMORY[0x1E0CA3448], 0))
      {
        if (CFStringCompare(v187, (CFStringRef)*MEMORY[0x1E0CA3450], 0))
        {
          if (CFStringCompare(v187, (CFStringRef)*MEMORY[0x1E0CA3460], 0) == kCFCompareEqualTo)
          {
            v101 = v192[0];
            FigCaptionRendererCaptionProtocolGetProtocolID();
            v102 = CMBaseObjectGetProtocolVTable();
            if (v102)
            {
              v103 = *(_QWORD *)(v102 + 16);
              if (v103)
              {
                v104 = *(void (**)(const void *, uint64_t))(v103 + 40);
                if (v104)
                  v104(v101, 3);
              }
            }
            FigCaptionRendererSRTRegionCreate(&value);
            FigCaptionRendererSRTRegionSetWritingMode((uint64_t)value, 0);
            FigCaptionRendererSRTRegionSetAlignment((uint64_t)value, 2, 3);
            v173 = 18;
            v65 = 100;
            v170 = 50;
            v171 = 50;
LABEL_98:
            v75 = value;
            v76 = v187;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v77 = CMBaseObjectGetProtocolVTable();
            if (v77)
            {
              v78 = *(_QWORD *)(v77 + 16);
              if (v78)
              {
                v79 = *(void (**)(void *, CFStringRef))(v78 + 8);
                if (v79)
                  v79(v75, v76);
              }
            }
            v80 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v81 = CMBaseObjectGetProtocolVTable();
            if (v81)
            {
              v82 = *(_QWORD *)(v81 + 16);
              if (v82)
              {
                v83 = *(void (**)(void *, uint64_t))(v82 + 24);
                if (v83)
                  v83(v80, v65);
              }
            }
            v84 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v85 = CMBaseObjectGetProtocolVTable();
            if (v85)
            {
              v86 = *(_QWORD *)(v85 + 16);
              if (v86)
              {
                v87 = *(void (**)(void *, _QWORD))(v86 + 40);
                if (v87)
                  v87(v84, v173);
              }
            }
            v88 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v89 = CMBaseObjectGetProtocolVTable();
            if (v89)
            {
              v90 = *(_QWORD *)(v89 + 16);
              if (v90)
              {
                v91 = *(void (**)(void *, double, double))(v90 + 56);
                if (v91)
                  v91(v88, 50.0, 50.0);
              }
            }
            v92 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v93 = CMBaseObjectGetProtocolVTable();
            if (v93)
            {
              v94 = *(_QWORD *)(v93 + 16);
              if (v94)
              {
                v95 = *(void (**)(void *, double, double))(v94 + 72);
                if (v95)
                  v95(v92, (double)v170, (double)(100 - v171));
              }
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), value);
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            FigCFDictionarySetValue();
            v58 = v187;
            if (!v187)
              goto LABEL_122;
            goto LABEL_121;
          }
          if (v189)
          {
            CFRelease(v189);
            v189 = 0;
          }
          v48 = FigCaptionRegionGetCMBaseObject();
          v49 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v49 && !v49(v48, *MEMORY[0x1E0CA34B0], v7, &v189))
          {
            if (v189)
            {
              FigCaptionDynamicStyleGetInitialValue();
              FigGeometryDimensionMakeFromDictionary();
              FigGeometryDimensionGetCGFloat();
              v51 = (int)v50;
              if (v189)
              {
                CFRelease(v189);
                v189 = 0;
              }
            }
            else
            {
              v51 = 50;
            }
            v110 = FigCaptionRegionGetCMBaseObject();
            v111 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
            if (v111)
              v111(v110, *MEMORY[0x1E0CA3428], v7, &v189);
            if (v189)
            {
              FigCaptionDynamicStyleGetInitialValue();
              FigGeometryDimensionMakeFromDictionary();
              FigGeometryDimensionGetCGFloat();
              v113 = (int)v112;
              if (v189)
              {
                CFRelease(v189);
                v189 = 0;
              }
            }
            else
            {
              v113 = 50;
            }
            v114 = FigCaptionRegionGetCMBaseObject();
            v115 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v115)
            {
              if (!v115(v114, *MEMORY[0x1E0CA3490], v7, &v189))
              {
                memset(&time, 0, 32);
                FigCaptionDynamicStyleGetInitialValue();
                FigGeometryPointMakeFromDictionary();
                v116 = *(double *)&time.start.value;
                v117 = *(double *)&time.start.epoch;
                v169 = v51;
                if (v51 >= 0)
                  v118 = v51;
                else
                  v118 = v51 + 1;
                v172 = v118;
                if (v113 >= 0)
                  v119 = v113;
                else
                  v119 = v113 + 1;
                v120 = ((float)v113 / 5.33 + 0.5);
                if (v120 >= 18)
                  v120 = 18;
                v173 = v120;
                if (v189)
                {
                  CFRelease(v189);
                  v189 = 0;
                }
                v121 = FigCaptionRegionGetCMBaseObject();
                v122 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v122)
                {
                  if (!v122(v121, *MEMORY[0x1E0CA34B8], v7, &v189))
                  {
                    v170 = (int)v116 + (v172 >> 1);
                    v171 = (int)v117 + (v119 >> 1);
                    v123 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
                    if (v123)
                    {
                      v124 = v123;
                      v65 = v169;
                      if (CFStringCompare((CFStringRef)*MEMORY[0x1E0CA34D8], v123, 1uLL))
                      {
                        v63 = 1;
                        if (CFStringCompare((CFStringRef)*MEMORY[0x1E0CA34E0], v124, 1uLL))
                        {
                          if (CFStringCompare((CFStringRef)*MEMORY[0x1E0CA34F0], v124, 1uLL))
                          {
                            if (CFStringCompare((CFStringRef)*MEMORY[0x1E0CA34E8], v124, 1uLL))
                            {
                              v63 = 0;
                              v66 = 0;
                              v64 = 0;
                              goto LABEL_203;
                            }
                            v63 = 3;
                            v128 = (CFTypeRef *)MEMORY[0x1E0CA2DD8];
                          }
                          else
                          {
                            v63 = 2;
                            v128 = (CFTypeRef *)MEMORY[0x1E0CA2DE0];
                          }
                          v202.length = CFAttributedStringGetLength(MutableCopy);
                          v202.location = 0;
                          CFAttributedStringSetAttribute(MutableCopy, v202, (CFStringRef)*MEMORY[0x1E0CA2B40], *v128);
                          FigCFDictionarySetValue();
                          v129 = v192[0];
                          FigCaptionRendererCaptionProtocolGetProtocolID();
                          v130 = CMBaseObjectGetProtocolVTable();
                          if (v130)
                          {
                            v131 = *(_QWORD *)(v130 + 16);
                            if (v131)
                            {
                              v132 = *(void (**)(const void *, const __CFString *))(v131 + 56);
                              if (v132)
                                v132(v129, CFSTR("ja-JP"));
                            }
                          }
                          v64 = 1;
                          v66 = 3;
                          goto LABEL_202;
                        }
                      }
                      else
                      {
                        v63 = 0;
                      }
                      v66 = 2;
                      v64 = 2;
                      goto LABEL_203;
                    }
                    v63 = 0;
                    v66 = 2;
                    v64 = 2;
LABEL_202:
                    v65 = v169;
LABEL_203:
                    if (v47 == kCFCompareEqualTo)
                    {
                      FigCaptionRendererStackLayoutRegionCreate(&value);
                      v133 = value;
                      FigCaptionRendererStackLayoutRegionProtocolGetProtocolID();
                      v134 = CMBaseObjectGetProtocolVTable();
                      if (v134)
                      {
                        v135 = *(_QWORD *)(v134 + 16);
                        if (v135)
                        {
                          v136 = *(void (**)(void *, _QWORD))(v135 + 8);
                          if (v136)
                            v136(v133, 0);
                        }
                      }
                      goto LABEL_98;
                    }
                    goto LABEL_93;
                  }
                }
              }
            }
          }
LABEL_168:
          Copy = 0;
          if (!v23)
          {
LABEL_170:
            if (Copy)
              CFRelease(Copy);
            if (MutableCopy)
              CFRelease(MutableCopy);
            goto LABEL_174;
          }
LABEL_169:
          CFRelease(v23);
          goto LABEL_170;
        }
        v201.length = CFAttributedStringGetLength(MutableCopy);
        v201.location = 0;
        CFAttributedStringSetAttribute(MutableCopy, v201, (CFStringRef)*MEMORY[0x1E0CA2B40], (CFTypeRef)*MEMORY[0x1E0CA2DE0]);
        FigCFDictionarySetValue();
        v67 = v192[0];
        FigCaptionRendererCaptionProtocolGetProtocolID();
        v68 = CMBaseObjectGetProtocolVTable();
        if (v68)
        {
          v69 = *(_QWORD *)(v68 + 16);
          if (v69)
          {
            v70 = *(void (**)(const void *, const __CFString *))(v69 + 56);
            if (v70)
              v70(v67, CFSTR("ja-JP"));
          }
        }
        v63 = 2;
        v66 = 3;
        v64 = 1;
        v170 = 92;
        v171 = 50;
        v173 = 18;
        v65 = 15;
      }
      else
      {
        v200.length = CFAttributedStringGetLength(MutableCopy);
        v200.location = 0;
        CFAttributedStringSetAttribute(MutableCopy, v200, (CFStringRef)*MEMORY[0x1E0CA2B40], (CFTypeRef)*MEMORY[0x1E0CA2DE0]);
        FigCFDictionarySetValue();
        v59 = v192[0];
        FigCaptionRendererCaptionProtocolGetProtocolID();
        v60 = CMBaseObjectGetProtocolVTable();
        if (v60)
        {
          v61 = *(_QWORD *)(v60 + 16);
          if (v61)
          {
            v62 = *(void (**)(const void *, const __CFString *))(v61 + 56);
            if (v62)
              v62(v59, CFSTR("ja-JP"));
          }
        }
        v63 = 2;
        v64 = 1;
        v170 = 8;
        v171 = 50;
        v173 = 18;
        v65 = 15;
        v66 = 1;
      }
LABEL_93:
      v71 = v192[0];
      FigCaptionRendererCaptionProtocolGetProtocolID();
      v72 = CMBaseObjectGetProtocolVTable();
      if (v72)
      {
        v73 = *(_QWORD *)(v72 + 16);
        if (v73)
        {
          v74 = *(void (**)(const void *, uint64_t))(v73 + 40);
          if (v74)
            v74(v71, 3);
        }
      }
      FigCaptionRendereriTTRegionCreate(&value);
      FigCaptionRendererSRTRegionSetWritingMode((uint64_t)value, v63);
      FigCaptionRendererSRTRegionSetAlignment((uint64_t)value, v64, v66);
      goto LABEL_98;
    }
    v180 = 0;
    v181 = 0;
    v179 = 0.0;
    v52 = v192[0];
    FigCaptionRendererCaptionProtocolGetProtocolID();
    v53 = CMBaseObjectGetProtocolVTable();
    if (v53)
    {
      v54 = *(_QWORD *)(v53 + 16);
      if (v54)
      {
        v55 = *(void (**)(const void *, uint64_t))(v54 + 40);
        if (v55)
          v55(v52, 1);
      }
    }
    v56 = FigCaptionRegionGetCMBaseObject();
    v57 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (v57)
      v57(v56, *MEMORY[0x1E0CA3428], v7, &v180);
    if (!v180)
      goto LABEL_122;
    FigCaptionDynamicStyleGetInitialValue();
    if (FigCaptionGeometryGetCellBasedDimensionFromDictionary())
    {
LABEL_81:
      v58 = v180;
      if (!v180)
      {
LABEL_122:
        if (cf)
          CFRelease(cf);
LABEL_124:
        Copy = CFAttributedStringCreateCopy(v7, MutableCopy);
        v97 = v192[0];
        FigCaptionRendererCaptionProtocolGetProtocolID();
        v98 = CMBaseObjectGetProtocolVTable();
        if (v98)
        {
          v99 = *(_QWORD *)(v98 + 16);
          if (v99)
          {
            v100 = *(void (**)(const void *, CFAttributedStringRef))(v99 + 24);
            if (v100)
              v100(v97, Copy);
          }
        }
        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), v192[0]);
        if (!v23)
          goto LABEL_170;
        goto LABEL_169;
      }
LABEL_121:
      CFRelease(v58);
      goto LABEL_122;
    }
    v105 = v179;
    if (v179 == 1.0)
    {
      v106 = *MEMORY[0x1E0CA3490];
      v107 = FigCaptionRegionGetCMBaseObject();
      v108 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
      if (v108)
        v108(v107, v106, v7, &v181);
      if (!v181)
        goto LABEL_81;
      FigCaptionDynamicStyleGetInitialValue();
      FigCFDictionarySetValue();
      v109 = v181;
      if (!v181)
        goto LABEL_81;
    }
    else
    {
      if (v179 <= 1.0)
        goto LABEL_81;
      theString1 = 0;
      v125 = FigCaptionRegionGetCMBaseObject();
      v126 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
      if (v126 && !v126(v125, *MEMORY[0x1E0CA33E0], v7, &theString1) && theString1)
      {
        if (CFStringCompare(theString1, (CFStringRef)*MEMORY[0x1E0CA3388], 0))
        {
          v127 = *(const void **)(DerivedStorage + 24);
          if (v127)
          {
            CFRelease(v127);
            *(_QWORD *)(DerivedStorage + 24) = 0;
          }
        }
        else
        {
          memset(&time, 0, 32);
          FigGeometryDimensionMake();
          FigGeometryDimensionMake();
          FigGeometryPointMake();
          v177 = 0;
          memset(v176, 0, sizeof(v176));
          FigGeometryDimensionMake();
          FigGeometryDimensionMake();
          FigGeometryPointMake();
          v137 = *(_QWORD *)(DerivedStorage + 24);
          if (v137)
          {
            FigCaptionRendererRegionProtocolGetProtocolID();
            v138 = CMBaseObjectGetProtocolVTable();
            if (v138)
            {
              v139 = *(_QWORD *)(v138 + 16);
              if (v139)
              {
                v140 = *(void (**)(uint64_t, int *))(v139 + 48);
                if (v140)
                  v140(v137, &v177);
              }
            }
            FigCaptionRendererCellStackLayoutRegionGetPosition(*(_QWORD *)(DerivedStorage + 24), v176);
          }
          v141 = FigCaptionRegionGetCMBaseObject();
          v142 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v142)
            v142(v141, *MEMORY[0x1E0CA3490], v7, &v181);
          if (v181)
          {
            v143 = FigCaptionDynamicStyleGetInitialValue();
            if (v181)
              CFRelease(v181);
            if (v143 && !FigCaptionGeometryGetCellBasedPointFromDictionary())
            {
              FigGeometryDimensionMake();
              FigGeometryDimensionMake();
              FigGeometryPointMake();
              *(_OWORD *)&time.start.value = v174;
              *(_OWORD *)&time.start.epoch = v175;
            }
          }
          if (v177 >= 1
            && v177 == (int)v105
            && (v174 = *(_OWORD *)&time.start.value,
                v175 = *(_OWORD *)&time.start.epoch,
                FigGeometryPointEqualToPoint()))
          {
            v144 = *(void **)(DerivedStorage + 24);
            if (v144)
              v144 = (void *)CFRetain(v144);
            value = v144;
          }
          else
          {
            FigCaptionRendererCellStackLayoutRegionCreate(&value);
            v145 = value;
            FigCaptionRendererStackLayoutRegionProtocolGetProtocolID();
            v146 = CMBaseObjectGetProtocolVTable();
            if (v146)
            {
              v147 = *(_QWORD *)(v146 + 16);
              if (v147)
              {
                v148 = *(void (**)(void *, _QWORD))(v147 + 8);
                if (v148)
                  v148(v145, 0);
              }
            }
            v149 = CFStringCreateWithFormat(v7, 0, CFSTR("%p"), value);
            v150 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v151 = CMBaseObjectGetProtocolVTable();
            if (v151)
            {
              v152 = *(_QWORD *)(v151 + 16);
              if (v152)
              {
                v153 = *(void (**)(void *, CFStringRef))(v152 + 8);
                if (v153)
                  v153(v150, v149);
              }
            }
            if (v149)
              CFRelease(v149);
            v154 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v155 = CMBaseObjectGetProtocolVTable();
            if (v155)
            {
              v156 = *(_QWORD *)(v155 + 16);
              if (v156)
              {
                v157 = *(void (**)(void *, _QWORD))(v156 + 40);
                if (v157)
                  v157(v154, (int)v105);
              }
            }
            v158 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v159 = CMBaseObjectGetProtocolVTable();
            if (v159)
            {
              v160 = *(_QWORD *)(v159 + 16);
              if (v160)
              {
                v161 = *(void (**)(void *, double, double))(v160 + 56);
                if (v161)
                  v161(v158, 50.0, 50.0);
              }
            }
            v174 = *(_OWORD *)&time.start.value;
            v175 = *(_OWORD *)&time.start.epoch;
            FigCaptionRendererCellStackLayoutRegionSetPosition((uint64_t)value, &v174);
            v162 = *(const void **)(DerivedStorage + 24);
            v163 = value;
            *(_QWORD *)(DerivedStorage + 24) = value;
            if (v163)
              CFRetain(v163);
            if (v162)
              CFRelease(v162);
          }
        }
      }
      if (value)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), value);
        v164 = v187;
        if (!v187)
        {
          v165 = value;
          FigCaptionRendererRegionProtocolGetProtocolID();
          v166 = CMBaseObjectGetProtocolVTable();
          if (v166)
          {
            v167 = *(_QWORD *)(v166 + 16);
            if (v167)
            {
              v168 = *(void (**)(void *, CFStringRef *))(v167 + 16);
              if (v168)
                v168(v165, &v187);
            }
          }
          if (v187)
          {
            CFRetain(v187);
            v164 = v187;
          }
          else
          {
            v164 = 0;
          }
        }
        CFDictionarySetValue(v23, CFSTR("region"), v164);
        if (value)
          CFRelease(value);
      }
      if (v187)
        CFRelease(v187);
      v109 = theString1;
      if (!theString1)
        goto LABEL_81;
    }
    CFRelease(v109);
    goto LABEL_81;
  }
LABEL_174:
  if (Mutable)
    CFRelease(Mutable);
LABEL_176:
  if (v192[0])
  {
    CFRelease(v192[0]);
    v192[0] = 0;
  }
  if (v188)
  {
    CFRelease(v188);
    v188 = 0;
  }
  if (v186)
  {
    CFRelease(v186);
    v186 = 0;
  }
  if (v190)
    CFRelease(v190);
}

__CFArray *copyRangedValuesOfStyleProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __CFArray *Mutable;
  uint64_t (*v6)(uint64_t);
  const __CFString *v7;
  CFIndex Length;
  CFIndex v9;
  CFIndex v10;
  unsigned int (*v11)(uint64_t, CFIndex, uint64_t, uint64_t, CFTypeRef *, uint64_t *);
  uint64_t v12;
  double FigBaseObject;
  double v14;
  double v15;
  void *v16;
  uint64_t ProtocolVTable;
  uint64_t v18;
  void (*v19)(void *, double, double);
  CFTypeID v20;
  uint64_t TypeID;
  const void *InitialValue;
  void *v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef cf;
  void *value;

  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v6)
      v7 = (const __CFString *)v6(a1);
    else
      v7 = &stru_1E2FD85F8;
    Length = CFStringGetLength(v7);
    if (Length >= 1)
    {
      v9 = Length;
      v10 = 0;
      while (1)
      {
        cf = 0;
        value = 0;
        v26 = 0;
        v27 = 0;
        v11 = *(unsigned int (**)(uint64_t, CFIndex, uint64_t, uint64_t, CFTypeRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v11)
        {
          if (!v11(a1, v10, a2, v4, &cf, &v26))
            break;
        }
LABEL_21:
        if (cf)
          CFRelease(cf);
        if (v10 >= v9)
          return Mutable;
      }
      v12 = FigCaptionRendererIntervalCreate(&value);
      FigBaseObject = FigBytePumpGetFigBaseObject(v12);
      v15 = v14;
      v16 = value;
      FigCaptionRendererIntervalProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v18 = *(_QWORD *)(ProtocolVTable + 16);
        if (v18)
        {
          v19 = *(void (**)(void *, double, double))(v18 + 16);
          if (v19)
            v19(v16, FigBaseObject, v15);
        }
      }
      if (cf)
      {
        v20 = CFGetTypeID(cf);
        TypeID = FigCaptionDynamicStyleGetTypeID();
        InitialValue = cf;
        if (v20 == TypeID)
        {
          v23 = value;
          InitialValue = (const void *)FigCaptionDynamicStyleGetInitialValue();
          v24 = v23;
LABEL_18:
          FigCaptionRendererIntervalSetValue((uint64_t)v24, InitialValue);
          CFArrayAppendValue(Mutable, value);
          if (value)
            CFRelease(value);
          v10 += v27;
          goto LABEL_21;
        }
      }
      else
      {
        InitialValue = 0;
      }
      v24 = value;
      goto LABEL_18;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

void stylePropertyRangeValueApplier(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, double *);
  uint64_t Value;
  const __CFNumber *v9;
  CFRange v10;
  __CFAttributedString *v11;
  const __CFString *v12;
  const __CFNumber *v13;
  CFStringRef *v14;
  uint64_t (*v15)(const __CFNumber *);
  const __CFString *v16;
  int v17;
  const __CFAllocator *v18;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v20;
  uint64_t CMBaseObject;
  void (*v22)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const void **v23;
  const void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const void **v27;
  int v28;
  const void **v29;
  const void *UInt32;
  CFAttributedStringRef v31;
  CFAttributedStringRef v32;
  int valuePtr;
  CFTypeRef cf;
  double FigBaseObject;
  double v36;
  CFRange v37;
  CFRange v38;

  FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  v36 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, double *))(v6 + 8);
      if (v7)
        v7(a1, &FigBaseObject);
    }
  }
  Value = FigCaptionRendererIntervalGetValue();
  cf = 0;
  if (!Value)
    return;
  v9 = (const __CFNumber *)Value;
  if (CFStringCompare(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E0CA2B38], 0) == kCFCompareEqualTo)
  {
    valuePtr = 0;
    CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr != 1)
      return;
LABEL_17:
    v13 = (const __CFNumber *)*MEMORY[0x1E0C9AE50];
    v10.location = (uint64_t)FigBaseObject;
    v10.length = (uint64_t)v36;
    v12 = *(const __CFString **)a2;
    v11 = *(__CFAttributedString **)(a2 + 8);
    goto LABEL_18;
  }
  if (CFStringCompare(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E0CA2A50], 0) == kCFCompareEqualTo)
  {
    v14 = (CFStringRef *)MEMORY[0x1E0CA3588];
    goto LABEL_16;
  }
  if (CFStringCompare(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E0CA2978], 0) == kCFCompareEqualTo)
  {
    v14 = (CFStringRef *)MEMORY[0x1E0CA35A8];
LABEL_16:
    if (CFStringCompare((CFStringRef)v9, *v14, 0))
      return;
    goto LABEL_17;
  }
  if (CFStringCompare(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E0CA2AD8], 0) == kCFCompareEqualTo)
  {
    v15 = *(uint64_t (**)(const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v15)
      v16 = (const __CFString *)v15(v9);
    else
      v16 = &stru_1E2FD85F8;
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return;
    v20 = Mutable;
    CMBaseObject = FigCaptionDataGetCMBaseObject();
    v22 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (!v22 || (v22(CMBaseObject, *MEMORY[0x1E0CA3348], v18, &cf), !cf))
    {
LABEL_42:
      v25 = FigCaptionDataGetCMBaseObject();
      v26 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v26)
        v26(v25, *MEMORY[0x1E0CA3350], v18, &cf);
      if (cf)
      {
        FigCaptionDynamicStyleGetInitialValue();
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v27 = (const void **)MEMORY[0x1E0CA2D20];
        v28 = FigCFEqual();
        v29 = (const void **)MEMORY[0x1E0CA2D18];
        if (!v28)
          v29 = v27;
        CFDictionarySetValue(v20, (const void *)*MEMORY[0x1E0CA2AF0], *v29);
      }
      UInt32 = (const void *)FigCFNumberCreateUInt32();
      if (UInt32)
      {
        CFDictionarySetValue(v20, (const void *)*MEMORY[0x1E0CA2B00], UInt32);
        v31 = CFAttributedStringCreate(v18, v16, v20);
        if (v31)
        {
          v32 = v31;
          v37.location = (uint64_t)FigBaseObject;
          v37.length = (uint64_t)v36;
          CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(a2 + 8), v37, *(CFStringRef *)a2, v31);
          CFRelease(v32);
        }
      }
      CFRelease(v20);
      if (cf)
        CFRelease(cf);
      goto LABEL_58;
    }
    FigCaptionDynamicStyleGetInitialValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (FigCFEqual())
    {
      v23 = (const void **)MEMORY[0x1E0CA2D10];
    }
    else
    {
      v24 = (const void *)*MEMORY[0x1E0CA2CE0];
      if (FigCFEqual())
        goto LABEL_41;
      if (!FigCFEqual())
      {
        if (FigCFEqual())
          v24 = (const void *)*MEMORY[0x1E0CA2CF0];
        goto LABEL_41;
      }
      v23 = (const void **)MEMORY[0x1E0CA2CE8];
    }
    v24 = *v23;
LABEL_41:
    CFDictionarySetValue(v20, (const void *)*MEMORY[0x1E0CA2AE0], v24);
    goto LABEL_42;
  }
  if (CFStringCompare(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E0CA2A38], 0))
  {
    v10.location = (uint64_t)FigBaseObject;
    v10.length = (uint64_t)v36;
    v12 = *(const __CFString **)a2;
    v11 = *(__CFAttributedString **)(a2 + 8);
    v13 = v9;
LABEL_18:
    CFAttributedStringSetAttribute(v11, v10, v12, v13);
    return;
  }
  if (CFStringCompare((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E0CA3610], 0) == kCFCompareEqualTo)
  {
    v17 = 1;
LABEL_57:
    valuePtr = v17;
    UInt32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    v38.location = (uint64_t)FigBaseObject;
    v38.length = (uint64_t)v36;
    CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(a2 + 8), v38, *(CFStringRef *)a2, UInt32);
LABEL_58:
    if (UInt32)
      CFRelease(UInt32);
    return;
  }
  if (CFStringCompare((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E0CA3620], 0) == kCFCompareEqualTo)
  {
    v17 = 2;
    goto LABEL_57;
  }
  if (CFStringCompare((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E0CA3618], 0) == kCFCompareEqualTo)
  {
    v17 = 3;
    goto LABEL_57;
  }
  if (CFStringCompare((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E0CA3600], 0) == kCFCompareEqualTo)
  {
    v17 = 4;
    goto LABEL_57;
  }
  if (CFStringCompare((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E0CA35F8], 0) == kCFCompareEqualTo)
  {
    v17 = (int)v36;
    if (((int)v36 - 1) <= 3)
      goto LABEL_57;
  }
}

uint64_t FigSampleBufferConsumerStartServer()
{
  CFMutableDictionaryRef Mutable;
  uint64_t v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  v1 = FigXPCServerStart();
  if (Mutable)
    CFRelease(Mutable);
  return v1;
}

uint64_t HandleSampleBufferConsumerRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  *(_QWORD *)&v7 = 0;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    v4 = FigSignalErrorAt();
  v6 = v4;
  if (!(_DWORD)v4)
    return 4294951138;
  return v6;
}

uint64_t FigXPCSampleBufferConsumerServerAssociateNeighborFigSampleBufferConsumer(int a1, CFTypeRef cf)
{
  CFTypeID v3;
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!cf)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(cf);
  if (v3 != FigSampleBufferConsumerGetTypeID())
    return FigSignalErrorAt();
  result = CreateSampleBufferConsumerServerState(cf, &v5);
  if (!(_DWORD)result)
    return FigXPCServerAssociateObjectWithNeighborProcess();
  return result;
}

uint64_t CreateSampleBufferConsumerServerState(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  CFTypeRef v5;
  uint64_t result;

  v4 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040AE0EF783uLL);
  if (v4)
  {
    if (a1)
      v5 = CFRetain(a1);
    else
      v5 = 0;
    result = 0;
    *v4 = v5;
    v4[4] = 0;
    *((_BYTE *)v4 + 48) = 0;
  }
  else
  {
    result = FigSignalErrorAt();
  }
  *a2 = v4;
  return result;
}

void DisposeSampleBufferConsumerServerState(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t v3;
  void (*v4)(CFTypeRef, uint64_t);
  const void *v5;
  const void *v6;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v2 = *(CFTypeRef *)a1;
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v4)
        v4(v2, v3);
      *(_BYTE *)(a1 + 48) = 0;
    }
    if (*(_QWORD *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(_QWORD *)a1 = 0;
    }
    v5 = *(const void **)(a1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v6 = *(const void **)(a1 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 32) = 0;
    }
    FigXPCRelease();
    free((void *)a1);
  }
}

uint64_t FigXPCSampleBufferConsumerServerAssociateCopiedNeighborFigSampleBufferConsumer(int a1, CFTypeRef cf)
{
  CFTypeID v3;
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!cf)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(cf);
  if (v3 != FigSampleBufferConsumerGetTypeID())
    return FigSignalErrorAt();
  result = CreateSampleBufferConsumerServerState(cf, &v5);
  if (!(_DWORD)result)
    return FigXPCServerAssociateCopiedObjectWithNeighborProcess();
  return result;
}

uint64_t FigXPCSampleBufferConsumerServerAssociateCopiedSampleBufferConsumerWithNeighborProcessByPID(int a1, CFTypeRef cf)
{
  CFTypeID v3;
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!cf)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(cf);
  if (v3 != FigSampleBufferConsumerGetTypeID())
    return FigSignalErrorAt();
  result = CreateSampleBufferConsumerServerState(cf, &v5);
  if (!(_DWORD)result)
    return FigXPCServerAssociateCopiedObjectWithNeighborProcessByPID();
  return result;
}

uint64_t FigXPCSampleBufferConsumerServerLowWaterTriggerCallback(uint64_t a1)
{
  if (!FigXPCCreateBasicMessage())
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  return FigXPCRelease();
}

uint64_t FigVTTCueCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;

  if (!a2)
    return FigSignalErrorAt();
  FigVTTNodeGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v3 = FigVTTInitializeNodeBaseStorage((CFMutableDictionaryRef *)DerivedStorage);
    if (!(_DWORD)v3)
    {
      *(_QWORD *)(DerivedStorage + 16) = 0;
      *a2 = 0;
    }
  }
  return v3;
}

void figVTTCue_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTCue_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("cue: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figVTTCue_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 1;
  return 0;
}

uint64_t figVTTCue_setNodeValue(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFTypeID v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = CFGetTypeID(a2);
    if (v4 != CFStringGetTypeID())
      return FigSignalErrorAt();
  }
  v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  if (a2)
    CFRetain(a2);
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t figVTTCue_copyNodeValue(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  void *Copy;
  const void *v7;
  const __CFAllocator *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    v5 = CFGetAllocator(a1);
    CFStringCreateMutable(v5, 0);
    FigCFArrayApplyFunction();
    Copy = 0;
  }
  else
  {
    v7 = *(const void **)(DerivedStorage + 8);
    if (!v7 || (Copy = (void *)CFRetain(v7)) == 0)
    {
      v8 = CFGetAllocator(a1);
      Copy = (void *)CFStringCreateCopy(v8, CFSTR(" "));
    }
  }
  *a2 = Copy;
  return 0;
}

uint64_t figVTTCue_copyChildNodeArray(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  v3 = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 16);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t figVTTCue_copyNodeDocumentSerialization(const void *a1, __CFString **a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  CFTypeID v9;
  CFStringRef v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFTypeID v13;
  CFStringRef v14;
  const __CFAllocator *v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  CFMutableStringRef Mutable;
  const __CFAllocator *v20;
  const __CFDictionary *v21;
  uint64_t i;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t j;
  const void *v26;
  const __CFString *v27;
  const __CFString *v28;
  CFTypeID v29;
  const __CFAllocator *v30;
  CFMutableStringRef v31;
  CFAllocatorRef *v32;
  uint64_t v33;
  const __CFArray *Count;
  const void *epoch;
  CFIndex v36;
  const void *ValueAtIndex;
  const void *v38;
  CFTypeID v39;
  uint64_t v40;
  CFAllocatorRef v41;
  const __CFString *v42;
  const __CFString *v43;
  CFAllocatorRef v44;
  __CFString *v45;
  CFTypeRef v46;
  uint64_t v47;
  CFMutableArrayRef v48;
  CFIndex v49;
  unint64_t v50;
  const __CFDictionary *v51;
  const __CFString *v52;
  uint64_t v53;
  CFStringRef v54;
  __CFString *v55;
  __CFString *v56;
  const void *Value;
  CFStringRef v60;
  const __CFAllocator *allocator;
  CFStringRef theString;
  CFDictionaryRef theDict;
  int v64;
  CFTypeRef cf1;
  CFTypeRef v66;
  CFTypeRef cf;
  CFDictionaryRef v68;
  CFDictionaryRef theArray;
  CMTimeScale timescale;
  CMTime v71;
  const __CFString *v72;
  const __CFString *v73;
  uint64_t (*v74)(void *, const void *, CFMutableDictionaryRef);
  const __CFString *v75;
  const __CFString *v76;
  uint64_t (*v77)(uint64_t, const void *, __CFDictionary *);
  const __CFString *v78;
  const __CFString *v79;
  uint64_t (*v80)(uint64_t, const void *, __CFDictionary *);
  const __CFString *v81;
  const __CFString *v82;
  uint64_t (*v83)(uint64_t, const void *, __CFDictionary *);
  const __CFString *v84;
  const __CFString *v85;
  uint64_t (*v86)(const void *, uint64_t, __CFDictionary *);
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  theString = 0;
  theDict = 0;
  if (!a2)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_128;
  }
  *a2 = 0;
  v3 = FigVTTNodeCopyAttributes((uint64_t)a1, &theDict);
  if ((_DWORD)v3)
  {
    v16 = v3;
    v54 = 0;
    Mutable = 0;
    goto LABEL_122;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("id"));
  v68 = 0;
  v4 = FigVTTNodeCopyAttributes((uint64_t)a1, &v68);
  if ((_DWORD)v4)
    goto LABEL_144;
  if (!v68)
  {
    v4 = FigSignalErrorAt();
LABEL_144:
    v16 = v4;
    v60 = 0;
    goto LABEL_25;
  }
  v5 = CFDictionaryGetValue(v68, CFSTR("raw_starttime"));
  v6 = CFDictionaryGetValue(v68, CFSTR("raw_endtime"));
  if (v5)
    v5 = CFRetain(v5);
  if (v6)
    v6 = CFRetain(v6);
  if (v5)
  {
    if (v6)
      goto LABEL_22;
    goto LABEL_17;
  }
  v7 = (const __CFDictionary *)CFDictionaryGetValue(v68, CFSTR("starttime"));
  if (v7)
  {
    v8 = v7;
    v9 = CFGetTypeID(v7);
    if (v9 == CFDictionaryGetTypeID())
    {
      CMTimeMakeFromDictionary(&v71, v8);
      theArray = (CFDictionaryRef)v71.value;
      timescale = v71.timescale;
      if ((v71.flags & 0x1D) == 1)
      {
        v71.value = (CMTimeValue)theArray;
        v71.timescale = timescale;
        v10 = FigVTTCopyCMTimeAsTimeStamp(&v71);
        if (v10)
        {
          v5 = v10;
          if (v6)
            goto LABEL_22;
LABEL_17:
          v11 = (const __CFDictionary *)CFDictionaryGetValue(v68, CFSTR("endtime"));
          if (!v11)
            goto LABEL_153;
          v12 = v11;
          v13 = CFGetTypeID(v11);
          if (v13 != CFDictionaryGetTypeID()
            || (CMTimeMakeFromDictionary(&v71, v12),
                theArray = (CFDictionaryRef)v71.value,
                timescale = v71.timescale,
                (v71.flags & 0x1D) != 1)
            || (v71.value = (CMTimeValue)theArray,
                v71.timescale = timescale,
                (v14 = FigVTTCopyCMTimeAsTimeStamp(&v71)) == 0))
          {
LABEL_153:
            v16 = FigSignalErrorAt();
            v60 = 0;
            v6 = 0;
LABEL_23:
            CFRelease(v5);
            if (!v6)
              goto LABEL_25;
            goto LABEL_24;
          }
          v6 = v14;
LABEL_22:
          v15 = CFGetAllocator(a1);
          v60 = CFStringCreateWithFormat(v15, 0, CFSTR("%@ --> %@"), v5, v6);
          v16 = 0;
          goto LABEL_23;
        }
      }
    }
  }
  v16 = FigSignalErrorAt();
  v60 = 0;
  if (v6)
LABEL_24:
    CFRelease(v6);
LABEL_25:
  if (v68)
    CFRelease(v68);
  if ((_DWORD)v16)
  {
    Mutable = 0;
LABEL_142:
    v54 = v60;
    goto LABEL_122;
  }
  theArray = 0;
  v71.value = (CMTimeValue)CFSTR("regionID");
  *(_QWORD *)&v71.timescale = CFSTR("region");
  v71.epoch = (CMTimeEpoch)figVTTCue_MapCueAttributeToCueSettings_regionID;
  v72 = CFSTR("align");
  v73 = CFSTR("align");
  v74 = figVTTCue_MapCueAttributeToCueSettings_passThroughString;
  v75 = CFSTR("position");
  v76 = CFSTR("position");
  v77 = figVTTCue_MapCueAttributeToCueSettings_fromFigGeometryDimension;
  v78 = CFSTR("line");
  v79 = CFSTR("line");
  v80 = figVTTCue_MapCueAttributeToCueSettings_fromFigGeometryDimension;
  v81 = CFSTR("size");
  v82 = CFSTR("size");
  v83 = figVTTCue_MapCueAttributeToCueSettings_fromFigGeometryDimension;
  v84 = CFSTR("writingMode");
  v85 = CFSTR("vertical");
  v86 = figVTTCue_MapCueAttributeToCueSettings_writingMode;
  v17 = FigVTTNodeCopyAttributes((uint64_t)a1, &theArray);
  if ((_DWORD)v17)
    goto LABEL_146;
  if (!theArray)
  {
    v17 = FigSignalErrorAt();
LABEL_146:
    v16 = v17;
    Mutable = 0;
LABEL_149:
    v21 = 0;
    goto LABEL_43;
  }
  v18 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v18, 0);
  if (!Mutable)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_149;
  }
  v20 = CFGetAllocator(a1);
  v21 = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 144; i += 24)
  {
    if (CFDictionaryGetValue(theArray, *(const void **)((char *)&v71.value + i)))
    {
      v23 = *(uint64_t (**)(void))((char *)&v71.epoch + i);
      if (v23)
      {
        v24 = v23();
        if ((_DWORD)v24)
        {
          v16 = v24;
          CFRelease(Mutable);
          Mutable = 0;
          goto LABEL_43;
        }
      }
    }
  }
  for (j = 8; j != 152; j += 24)
  {
    v26 = *(const void **)((char *)&v71.value + j);
    v27 = (const __CFString *)CFDictionaryGetValue(v21, v26);
    if (v27)
    {
      v28 = v27;
      v29 = CFGetTypeID(v27);
      if (v29 == CFStringGetTypeID() && CFStringGetLength(v28) >= 1)
        CFStringAppendFormat(Mutable, 0, CFSTR(" %@:%@"), v26, v28);
    }
  }
  v16 = 0;
LABEL_43:
  if (theArray)
    CFRelease(theArray);
  if (v21)
    CFRelease(v21);
  if ((_DWORD)v16)
    goto LABEL_142;
  v68 = 0;
  theArray = 0;
  v66 = 0;
  cf = 0;
  cf1 = 0;
  v30 = CFGetAllocator(a1);
  v31 = CFStringCreateMutable(v30, 0);
  v32 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!v31)
  {
    v33 = FigSignalErrorAt();
    goto LABEL_100;
  }
  v33 = FigVTTNodeCopyChildNodeArray((uint64_t)a1, (uint64_t)&theArray);
  if ((_DWORD)v33)
  {
LABEL_100:
    v16 = v33;
    epoch = 0;
    goto LABEL_101;
  }
  Count = theArray;
  if (!theArray)
  {
    v33 = FigVTTNodeCopyValue((uint64_t)a1, &theString);
    goto LABEL_100;
  }
  epoch = 0;
  v36 = 0;
  allocator = *v32;
LABEL_95:
  Count = (const __CFArray *)CFArrayGetCount(Count);
  while (1)
  {
    if (v36 >= (uint64_t)Count)
    {
      v16 = 0;
      theString = v31;
      v31 = 0;
      goto LABEL_98;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v36);
    v64 = 0;
    if (!ValueAtIndex || (v38 = ValueAtIndex, v39 = CFGetTypeID(ValueAtIndex), v39 != FigVTTNodeGetTypeID()))
    {
      v40 = FigSignalErrorAt();
LABEL_132:
      v16 = v40;
      goto LABEL_98;
    }
    FigVTTNodeGetNodeType((uint64_t)v38, (uint64_t)&v64);
    if (v64 == 5)
      break;
LABEL_94:
    ++v36;
    Count = theArray;
    if (theArray)
      goto LABEL_95;
  }
  if (v68)
  {
    CFRelease(v68);
    v68 = 0;
  }
  v40 = FigVTTNodeCopyValue((uint64_t)v38, &v68);
  if ((_DWORD)v40)
    goto LABEL_132;
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v40 = FigVTTNodeCopyAttributes((uint64_t)v38, &cf);
  if ((_DWORD)v40)
    goto LABEL_132;
  if (cf1)
  {
    CFRelease(cf1);
    cf1 = 0;
  }
  v41 = CFGetAllocator(v38);
  v40 = FigVTTNodeCopyProperty((uint64_t)v38, (uint64_t)CFSTR("WebVTTSpanNode_MarkupElement"), (uint64_t)v41, (uint64_t)&cf1);
  if ((_DWORD)v40)
    goto LABEL_132;
  if (cf1)
  {
    if (CFEqual(cf1, CFSTR("RubyStart")))
    {
      v42 = CFSTR("ruby");
LABEL_67:
      CFStringAppendFormat(v31, 0, CFSTR("<%@>"), v42);
      goto LABEL_94;
    }
    if (CFEqual(cf1, CFSTR("RubyEnd")))
    {
      v43 = CFSTR("ruby");
    }
    else
    {
      if (CFEqual(cf1, CFSTR("RubyTextStart")))
      {
        v42 = CFSTR("rt");
        goto LABEL_67;
      }
      if (!CFEqual(cf1, CFSTR("RubyTextEnd")))
        goto LABEL_75;
      v43 = CFSTR("rt");
    }
    CFStringAppendFormat(v31, 0, CFSTR("</%@>"), v43);
    goto LABEL_94;
  }
LABEL_75:
  if (v66)
  {
    CFRelease(v66);
    v66 = 0;
  }
  v44 = CFGetAllocator(v38);
  v40 = FigVTTNodeCopyProperty((uint64_t)v38, (uint64_t)CFSTR("WebVTTSpanNode_StyleReferences"), (uint64_t)v44, (uint64_t)&v66);
  if ((_DWORD)v40)
    goto LABEL_132;
  v45 = Mutable;
  if (epoch)
    CFRelease(epoch);
  v46 = cf;
  MEMORY[0x19402F294](&getCSSAttributeToMarkupMapping_once, initCSSAttributeToMarkupMapping);
  v47 = sCSSAttributeToMarkupMapping;
  MEMORY[0x19402F294](&getCSSAttributesToProcessArray_once, initAttributesToProcessArray);
  v48 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  epoch = v48;
  if (!v48)
  {
    v53 = FigSignalErrorAt();
    if ((_DWORD)v53)
    {
      v16 = v53;
      Mutable = v45;
      goto LABEL_98;
    }
    Mutable = v45;
LABEL_93:
    CFStringAppendFormat(v31, 0, CFSTR("%@"), v68);
    goto LABEL_94;
  }
  v71.value = (CMTimeValue)v46;
  *(_QWORD *)&v71.timescale = v47;
  v71.epoch = (CMTimeEpoch)v48;
  v72 = 0;
  FigCFArrayApplyFunction();
  v16 = v72;
  if (!(_DWORD)v72)
  {
    FigCFArrayApplyFunction();
    v16 = v72;
    Mutable = v45;
    if ((_DWORD)v72)
      goto LABEL_135;
    epoch = (const void *)v71.epoch;
    if (v71.epoch && CFArrayGetCount((CFArrayRef)v71.epoch) >= 1)
    {
      FigCFArrayApplyFunction();
      CFStringAppendFormat(v31, 0, CFSTR("%@"), v68);
      v49 = CFArrayGetCount((CFArrayRef)epoch);
      if (v49 >= 1)
      {
        v50 = v49 + 1;
        do
        {
          v51 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)epoch, v50 - 2);
          v52 = (const __CFString *)CFDictionaryGetValue(v51, CFSTR("closeTag"));
          if (v52)
            CFStringAppend(v31, v52);
          --v50;
        }
        while (v50 > 1);
      }
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  Mutable = v45;
LABEL_135:
  CFRelease(epoch);
  epoch = 0;
LABEL_98:
  v32 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
LABEL_101:
  if (cf1)
    CFRelease(cf1);
  if (v66)
    CFRelease(v66);
  if (epoch)
    CFRelease(epoch);
  if (cf)
    CFRelease(cf);
  v54 = v60;
  if (v68)
    CFRelease(v68);
  if (v31)
    CFRelease(v31);
  if (theArray)
    CFRelease(theArray);
  if (!(_DWORD)v16)
  {
    if (theString && CFStringGetLength(theString) > 0 && (v55 = CFStringCreateMutable(*v32, 0)) != 0)
    {
      v56 = v55;
      if (Value)
        CFStringAppendFormat(v55, 0, CFSTR("%@\n"), Value);
      CFStringAppendFormat(v56, 0, CFSTR("%@%@\n%@\n"), v60, Mutable, theString);
      v16 = 0;
      *a2 = v56;
    }
    else
    {
      v16 = FigSignalErrorAt();
    }
  }
LABEL_122:
  if (theString)
    CFRelease(theString);
  if (Mutable)
    CFRelease(Mutable);
  if (v54)
    CFRelease(v54);
LABEL_128:
  if (theDict)
    CFRelease(theDict);
  return v16;
}

uint64_t figVTTCue_setChildNodeArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

void figVTTCue_concatenateSpanText(uint64_t a1, __CFString *a2)
{
  int v3;
  CFStringRef v4;
  CFStringRef appendedString;

  appendedString = 0;
  v3 = FigVTTNodeCopyValue(a1, &appendedString);
  v4 = appendedString;
  if (!v3 && appendedString)
  {
    CFStringAppend(a2, appendedString);
    v4 = appendedString;
  }
  if (v4)
    CFRelease(v4);
}

uint64_t figVTTCue_MapCueAttributeToCueSettings_regionID(void *value, int a2, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, CFSTR("region"), value);
  return 0;
}

uint64_t figVTTCue_MapCueAttributeToCueSettings_passThroughString(void *value, const void *a2, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, a2, value);
  return 0;
}

uint64_t figVTTCue_MapCueAttributeToCueSettings_fromFigGeometryDimension(uint64_t a1, const void *a2, __CFDictionary *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __CFString *Mutable;
  __CFString *v10;

  v5 = FigGeometryDimensionMakeFromDictionary();
  if ((v6 & 0x1D00000000) != 0x100000000)
    return FigSignalErrorAt();
  v7 = v5;
  v8 = v6;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return FigSignalErrorAt();
  v10 = Mutable;
  FigVTTStringifyFigGeometryDimensionAndAppend(Mutable, v7, v8);
  CFDictionarySetValue(a3, a2, v10);
  CFRelease(v10);
  return 0;
}

uint64_t figVTTCue_MapCueAttributeToCueSettings_writingMode(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  __CFString **v5;
  CFStringRef v6;

  if (a1)
  {
    if (CFEqual(a1, CFSTR("tb")))
    {
      v5 = kFigVTT_AttributeValue_cue_horizontal;
    }
    else if (CFEqual(a1, CFSTR("lr")))
    {
      v5 = kFigVTT_AttributeValue_cue_leftToRight;
    }
    else
    {
      if (!CFEqual(a1, CFSTR("rl")))
        return 0;
      v5 = kFigVTT_AttributeValue_cue_rightToLeft;
    }
    v6 = *v5;
    if (*v5 && CFStringGetLength(*v5) >= 1)
      CFDictionarySetValue(a3, CFSTR("vertical"), v6);
  }
  return 0;
}

void figVTTCue_emitOpenTag(const __CFDictionary *a1, __CFString *a2)
{
  const __CFString *Value;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("openTag"));
  if (Value)
    CFStringAppend(a2, Value);
}

void figVTTCue_processCSSAttribute(void *key, uint64_t a2)
{
  uint64_t (*Value)(const void *, CFMutableDictionaryRef);
  uint64_t (*v5)(const void *, CFMutableDictionaryRef);
  const void *v6;
  const void *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;

  if (!*(_DWORD *)(a2 + 24))
  {
    Value = (uint64_t (*)(const void *, CFMutableDictionaryRef))CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 8), key);
    if (Value)
    {
      v5 = Value;
      v6 = CFDictionaryGetValue(*(CFDictionaryRef *)a2, key);
      if (v6)
      {
        v7 = v6;
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v9 = Mutable;
          *(_DWORD *)(a2 + 24) = v5(v7, Mutable);
          if (FigCFDictionaryGetCount() >= 1)
            CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v9);
          CFRelease(v9);
        }
        else
        {
          *(_DWORD *)(a2 + 24) = -17882;
        }
      }
    }
  }
}

void figVTTCue_processClassStyleReference(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CFStringRef v7;
  CFStringRef v8;

  if (!*(_DWORD *)(a2 + 24))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v6 = Mutable;
      v7 = CFStringCreateWithFormat(v4, 0, CFSTR("<c.%@>"), a1);
      v8 = CFStringCreateWithFormat(v4, 0, CFSTR("</c>"));
      CFDictionarySetValue(v6, CFSTR("openTag"), v7);
      CFDictionarySetValue(v6, CFSTR("closeTag"), v8);
      if (v7)
        CFRelease(v7);
      if (v8)
        CFRelease(v8);
      if (FigCFDictionaryGetCount() >= 1)
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v6);
      CFRelease(v6);
    }
    else
    {
      *(_DWORD *)(a2 + 24) = -17882;
    }
  }
}

void initCSSAttributeToMarkupMapping()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ font-weight"), figVTTCue_MapAttributeToMarkup_fontWeight);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ font-style"), figVTTCue_MapAttributeToMarkup_fontStyle);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ text-decoration"), figVTTCue_MapAttributeToMarkup_textDecoration);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ color"), figVTTCue_MapAttributeToMarkup_color);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ background-color"), figVTTCue_MapAttributeToMarkup_backgroundColor);
  sCSSAttributeToMarkupMapping = (uint64_t)Mutable;
}

uint64_t figVTTCue_MapAttributeToMarkup_fontWeight(const void *a1, __CFDictionary *a2)
{
  const __CFAllocator *v4;
  CFStringRef v5;
  CFStringRef v6;
  CFStringRef v7;
  CFStringRef v8;

  if (CFEqual(a1, CFSTR("bold")))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%@>"), CFSTR("b"));
    v6 = CFStringCreateWithFormat(v4, 0, CFSTR("</%@>"), CFSTR("b"));
    v7 = v6;
    if (v5)
    {
      CFDictionarySetValue(a2, CFSTR("openTag"), v5);
      if (!v7)
      {
        v8 = v5;
        goto LABEL_10;
      }
      CFDictionarySetValue(a2, CFSTR("closeTag"), v7);
      CFRelease(v5);
LABEL_8:
      v8 = v7;
LABEL_10:
      CFRelease(v8);
      return 0;
    }
    if (v6)
    {
      CFDictionarySetValue(a2, CFSTR("closeTag"), v6);
      goto LABEL_8;
    }
  }
  else
  {
    CFEqual(a1, CFSTR("normal"));
  }
  return 0;
}

uint64_t figVTTCue_MapAttributeToMarkup_fontStyle(const void *a1, __CFDictionary *a2)
{
  const __CFAllocator *v4;
  CFStringRef v5;
  CFStringRef v6;
  CFStringRef v7;
  CFStringRef v8;

  if (CFEqual(a1, CFSTR("italic")))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%@>"), CFSTR("i"));
    v6 = CFStringCreateWithFormat(v4, 0, CFSTR("</%@>"), CFSTR("i"));
    v7 = v6;
    if (v5)
    {
      CFDictionarySetValue(a2, CFSTR("openTag"), v5);
      if (!v7)
      {
        v8 = v5;
        goto LABEL_12;
      }
      CFDictionarySetValue(a2, CFSTR("closeTag"), v7);
      CFRelease(v5);
LABEL_10:
      v8 = v7;
LABEL_12:
      CFRelease(v8);
      return 0;
    }
    if (v6)
    {
      CFDictionarySetValue(a2, CFSTR("closeTag"), v6);
      goto LABEL_10;
    }
  }
  else if (!CFEqual(a1, CFSTR("normal")) && CFEqual(a1, CFSTR("oblique")))
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figVTTCue_MapAttributeToMarkup_textDecoration(const __CFString *a1, __CFDictionary *a2)
{
  CFIndex location;
  CFIndex v5;
  const __CFAllocator *v7;
  CFStringRef v8;
  CFStringRef v9;
  CFStringRef v10;

  location = CFStringFind(a1, CFSTR("none"), 1uLL).location;
  v5 = CFStringFind(a1, CFSTR("underline"), 1uLL).location;
  if (location == -1 && v5 != -1)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%@>"), CFSTR("u"));
    v9 = CFStringCreateWithFormat(v7, 0, CFSTR("</%@>"), CFSTR("u"));
    v10 = v9;
    if (v8)
    {
      CFDictionarySetValue(a2, CFSTR("openTag"), v8);
      if (v10)
      {
        CFDictionarySetValue(a2, CFSTR("closeTag"), v10);
        CFRelease(v8);
      }
      else
      {
        v10 = v8;
      }
      goto LABEL_11;
    }
    if (v9)
    {
      CFDictionarySetValue(a2, CFSTR("closeTag"), v9);
LABEL_11:
      CFRelease(v10);
    }
  }
  return 0;
}

uint64_t figVTTCue_MapAttributeToMarkup_color(uint64_t a1, __CFDictionary *a2)
{
  const __CFAllocator *v3;
  CFStringRef v4;
  CFStringRef v5;
  CFStringRef v6;

  if (a1)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%@.%@>"), CFSTR("c"), a1);
    v5 = CFStringCreateWithFormat(v3, 0, CFSTR("</%@>"), CFSTR("c"));
    v6 = v5;
    if (v4)
    {
      CFDictionarySetValue(a2, CFSTR("openTag"), v4);
      if (v6)
      {
        CFDictionarySetValue(a2, CFSTR("closeTag"), v6);
        CFRelease(v4);
      }
      else
      {
        v6 = v4;
      }
      goto LABEL_8;
    }
    if (v5)
    {
      CFDictionarySetValue(a2, CFSTR("closeTag"), v5);
LABEL_8:
      CFRelease(v6);
    }
  }
  return 0;
}

uint64_t figVTTCue_MapAttributeToMarkup_backgroundColor(uint64_t a1, __CFDictionary *a2)
{
  const __CFAllocator *v3;
  CFStringRef v4;
  CFStringRef v5;
  CFStringRef v6;

  if (a1)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%@.bg_%@>"), CFSTR("c"), a1);
    v5 = CFStringCreateWithFormat(v3, 0, CFSTR("</%@>"), CFSTR("c"));
    v6 = v5;
    if (v4)
    {
      CFDictionarySetValue(a2, CFSTR("openTag"), v4);
      if (v6)
      {
        CFDictionarySetValue(a2, CFSTR("closeTag"), v6);
        CFRelease(v4);
      }
      else
      {
        v6 = v4;
      }
      goto LABEL_8;
    }
    if (v5)
    {
      CFDictionarySetValue(a2, CFSTR("closeTag"), v5);
LABEL_8:
      CFRelease(v6);
    }
  }
  return 0;
}

void initAttributesToProcessArray()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ font-weight"));
  CFArrayAppendValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ font-style"));
  CFArrayAppendValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ text-decoration"));
  CFArrayAppendValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ color"));
  CFArrayAppendValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ background-color"));
  sCSSAttributesToProcessArray = (uint64_t)Mutable;
}

uint64_t FigCPEServerStart()
{
  uint64_t result;

  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  result = FigXPCServerStart();
  if (!(_DWORD)result)
    return FigCPEProtectorServerStart();
  return result;
}

uint64_t HandleCPEMessage()
{
  uint64_t result;

  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return FigSecureStopManagerServerHandleMessage();
  return result;
}

uint64_t FigAssetDownloaderStartServer()
{
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t assetDownloaderServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  CFTypeRef cf[2];
  __int128 block;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  cf[0] = 0;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  *(_QWORD *)&block = 0;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    v4 = FigSignalErrorAt();
  v6 = v4;
  if (!(_DWORD)v4)
    return 4294950644;
  return v6;
}

void FigCFRelease_1(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t assetDownloaderServer_downloadSuccessCallback(uint64_t a1)
{
  if (a1 && *(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 32) && !FigXPCCreateBasicMessage())
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_downloadFailureCallback(uint64_t a1)
{
  if (a1
    && *(_QWORD *)(a1 + 40)
    && *(_QWORD *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFError())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_loadedTimeRangeChangedCallback(uint64_t a1)
{
  if (a1
    && *(_QWORD *)(a1 + 40)
    && *(_QWORD *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFDictionary()
    && !FigXPCMessageSetCFArray()
    && !FigXPCMessageSetCFDictionary()
    && !FigXPCMessageSetCFArray())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_didResolveMediaSelection(uint64_t a1)
{
  if (a1
    && *(_QWORD *)(a1 + 40)
    && *(_QWORD *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFArray())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_didFinishDownloadForMediaSelection(uint64_t a1)
{
  if (a1
    && *(_QWORD *)(a1 + 40)
    && *(_QWORD *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFArray())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_didFinishLoadingMetadata(uint64_t result)
{
  if (result)
  {
    if (!*(_BYTE *)(result + 56))
    {
      *(_BYTE *)(result + 56) = 1;
      if (!*(_BYTE *)(result + 72))
      {
        if (*(_QWORD *)(result + 64))
        {
          *(_BYTE *)(result + 72) = 1;
          return MX_RunningBoardServices_InvalidateBackgroundDownloadProcessAssertion();
        }
      }
    }
  }
  return result;
}

uint64_t assetDownloaderServer_progressUpdateCallback(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4)
{
  if (a1 && *(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 32) && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_int64(0, "ExpectedBytesToDownload", a3);
    xpc_dictionary_set_int64(0, "BytesDownloaded", a4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_willDownloadAlternatesCallback(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  xpc_object_t value;
  xpc_object_t xdict;

  value = 0;
  xdict = 0;
  if (a1
    && *(_QWORD *)(a1 + 40)
    && *(_QWORD *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigAlternateCopyArrayOfAlternatesAsXPCObject(a3, &value))
  {
    xpc_dictionary_set_value(xdict, "Alternates", value);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), xdict);
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_init(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

void assetDownloaderServer_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;

  if (!*(_BYTE *)(a1 + 72) && *(_QWORD *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 72) = 1;
    MX_RunningBoardServices_InvalidateBackgroundDownloadProcessAssertion();
  }
  FigXPCRelease();
  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 64);
  if (v4)
    CFRelease(v4);
  v5 = *(NSObject **)(a1 + 48);
  if (v5)
    dispatch_release(v5);
}

uint64_t assetDownloaderServer_registerServerClassOnce(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

void __assetDownloadServer_handleLoadMetataMessage_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const __CFAllocator *v3;
  CFStringRef v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 56))
    goto LABEL_8;
  if (!*(_QWORD *)(v1 + 64) && !*(_BYTE *)(v1 + 72) && *(_QWORD *)(v1 + 24))
  {
    v3 = CFGetAllocator(*(CFTypeRef *)(a1 + 32));
    v4 = CFStringCreateWithFormat(v3, 0, CFSTR("FigAssetDownloadMetadata.%@"), *(_QWORD *)(v1 + 24));
    *(_QWORD *)(v1 + 64) = MX_RunningBoardServices_CreateBackgroundDownloadProcessAssertionForBundleIdentifier();
    if (v4)
      CFRelease(v4);
  }
  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
LABEL_8:
    CFRelease((CFTypeRef)v1);
}

void cdsReleaseAndClearMediaAccessibilityParams(uint64_t a1)
{
  int64x2_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v12;
  const void *v13;

  v2 = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 128) = 1;
  *(int64x2_t *)(a1 + 32) = v2;
  *(int64x2_t *)(a1 + 48) = v2;
  *(int64x2_t *)a1 = v2;
  *(int64x2_t *)(a1 + 16) = v2;
  memset_pattern16((void *)(a1 + 64), &xmmword_1932FA140, 0x40uLL);
  v3 = *(const void **)(a1 + 136);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_QWORD *)(a1 + 160) = 0xBFF0000000000000;
  v4 = *(const void **)(a1 + 144);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  v5 = *(const void **)(a1 + 152);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v6 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 176) = _Q0;
  *(_QWORD *)(a1 + 192) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 264) = 0;
  v12 = a1 + 200;
  do
  {
    v13 = *(const void **)(v12 + v6);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v12 + v6) = 0;
    }
    v6 += 8;
  }
  while (v6 != 64);
}

void cdsCopyMediaAccessibilityParams(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  v7 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  v10 = *(const void **)(a2 + 136);
  v11 = *(const void **)(a1 + 136);
  *(_QWORD *)(a2 + 136) = v11;
  if (v11)
    CFRetain(v11);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a1 + 160);
  v12 = *(const void **)(a2 + 144);
  v13 = *(const void **)(a1 + 144);
  *(_QWORD *)(a2 + 144) = v13;
  if (v13)
    CFRetain(v13);
  if (v12)
    CFRelease(v12);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 168);
  v14 = *(const void **)(a2 + 152);
  v15 = *(const void **)(a1 + 152);
  *(_QWORD *)(a2 + 152) = v15;
  if (v15)
    CFRetain(v15);
  if (v14)
    CFRelease(v14);
  v16 = 0;
  *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a2 + 192) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 264) = *(_QWORD *)(a1 + 264);
  v17 = a2 + 200;
  v18 = a1 + 200;
  do
  {
    v19 = *(const void **)(v17 + v16);
    v20 = *(const void **)(v18 + v16);
    *(_QWORD *)(v17 + v16) = v20;
    if (v20)
      CFRetain(v20);
    if (v19)
      CFRelease(v19);
    v16 += 8;
  }
  while (v16 != 64);
}

uint64_t FigCDSMACacheLoad(_QWORD *a1, int a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;

  if (!a1[39])
    return 0;
  v4 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v4)
  {
    v5 = v4;
    *v4 = CFRetain(a1);
    v6 = a1[39];
    if (a2)
      dispatch_sync_f(v6, v5, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync);
    else
      dispatch_async_f(v6, v5, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync);
    return 0;
  }
  return 4294950095;
}

void mediaAccessibilityDidChangeDoAsync(_QWORD *a1)
{
  _QWORD *v2;
  CGColor *v3;
  CGColor *v4;
  CGColor *v5;
  MACaptionAppearanceFontStyle v6;
  MACaptionAppearanceBehavior *v7;
  uint64_t v8;
  const void *v9;
  void (*v10)(const void *, _BYTE *);
  _BYTE v11[272];
  MACaptionAppearanceBehavior behavior[34];

  v2 = (_QWORD *)*a1;
  memset(behavior, 0, sizeof(behavior));
  v3 = MACaptionAppearanceCopyForegroundColor(kMACaptionAppearanceDomainUser, behavior);
  behavior[17] = (MACaptionAppearanceBehavior)v3;
  if (v3)
    CGColorGetComponents(v3);
  v4 = MACaptionAppearanceCopyBackgroundColor(kMACaptionAppearanceDomainUser, &behavior[1]);
  behavior[18] = (MACaptionAppearanceBehavior)v4;
  if (v4)
    CGColorGetComponents(v4);
  v5 = MACaptionAppearanceCopyWindowColor(kMACaptionAppearanceDomainUser, &behavior[2]);
  behavior[19] = (MACaptionAppearanceBehavior)v5;
  if (v5)
    CGColorGetComponents(v5);
  behavior[20] = MACaptionAppearanceGetForegroundOpacity(kMACaptionAppearanceDomainUser, &behavior[3]);
  behavior[21] = MACaptionAppearanceGetBackgroundOpacity(kMACaptionAppearanceDomainUser, &behavior[4]);
  behavior[22] = MACaptionAppearanceGetWindowOpacity(kMACaptionAppearanceDomainUser, &behavior[5]);
  behavior[23] = MACaptionAppearanceGetWindowRoundedCornerRadius(kMACaptionAppearanceDomainUser, &behavior[6]);
  v6 = kMACaptionAppearanceFontStyleDefault;
  behavior[24] = MACaptionAppearanceGetRelativeCharacterSize(kMACaptionAppearanceDomainUser, &behavior[7]);
  v7 = &behavior[8];
  do
  {
    behavior[v6 + 25] = (MACaptionAppearanceBehavior)MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, v7, v6);
    ++v6;
    ++v7;
  }
  while (v6 != 8);
  behavior[33] = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, &behavior[16]);
  cdsCopyMediaAccessibilityParams((uint64_t)behavior, (uint64_t)(v2 + 4));
  if (v2[3])
  {
    v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v8)
    {
      v9 = (const void *)v8;
      v10 = (void (*)(const void *, _BYTE *))v2[3];
      memcpy(v11, behavior, sizeof(v11));
      v10(v9, v11);
      CFRelease(v9);
    }
  }
  cdsReleaseAndClearMediaAccessibilityParams((uint64_t)behavior);
  CFRelease(v2);
  free(a1);
}

uint64_t FigCDSMACacheCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *Instance;
  dispatch_queue_t v7;
  uint64_t v8;
  uint64_t v9;
  char __str[256];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  MEMORY[0x19402F294](&FigCDSMACacheLocalGetTypeID_sRegisterFigCDSMACacheOnce, RegisterFigCDSMACacheClass);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  cdsReleaseAndClearMediaAccessibilityParams((uint64_t)(Instance + 4));
  snprintf(__str, 0x100uLL, "com.apple.coremedia.FigCDSMACache.msgQueue<%p>", Instance);
  v7 = dispatch_queue_create(__str, 0);
  Instance[39] = v7;
  if (!v7)
  {
    v9 = 4294950095;
LABEL_7:
    CFRelease(Instance);
    return v9;
  }
  if (a1)
  {
    if (a2)
    {
      Instance[3] = a1;
      v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      Instance[2] = v8;
      if (!v8)
      {
        v9 = FigSignalErrorAt();
        goto LABEL_7;
      }
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterAddWeakListener();
  v9 = 0;
  *a3 = Instance;
  return v9;
}

void mediaAccessibilityDidChange(uint64_t a1, dispatch_queue_t *a2)
{
  _QWORD *v3;
  void *v4;

  if (a2[39])
  {
    v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v3)
    {
      v4 = v3;
      *v3 = CFRetain(a2);
      dispatch_async_f(a2[39], v4, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync);
    }
  }
}

uint64_t RegisterFigCDSMACacheClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCDSMACacheID = result;
  return result;
}

double FigCDSMACacheInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void FigCDSMACache_Finalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterRemoveWeakListener();
  v2 = *(NSObject **)(a1 + 312);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 312) = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  cdsReleaseAndClearMediaAccessibilityParams(a1 + 32);
}

__CFString *FigCDSMACacheCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSMACache %p>"), a1);
  return Mutable;
}

uint64_t FigStreamingAssetDownloadOrchestratorCreate(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, uint64_t a8, dispatch_object_t object, _OWORD *a10, _QWORD *a11)
{
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  uint64_t CMBaseObject;
  unsigned int (*v20)(uint64_t, const __CFString *, const void *, CFTypeRef *);
  BOOL v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const __CFString *, const void *, CFTypeRef *);
  int v24;
  const void *URLValue;
  const void *v26;
  _BOOL4 v27;
  const void *v28;
  int v29;
  CFTypeID v30;
  uint64_t v31;
  uint64_t DerivedStorage;
  CFTypeRef v33;
  const void *v34;
  CFTypeRef v35;
  char DownloadsInterstitialAssets;
  CFMutableSetRef Mutable;
  CFMutableArrayRef v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  const __CFAllocator *AllocatorForMedia;
  const void *Value;
  const void *v45;
  const void *v46;
  const __CFString *v47;
  const __CFString *v48;
  uint64_t v49;
  BOOL v50;
  dispatch_queue_t v51;
  CFMutableArrayRef v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v70;
  double v71;
  void (*v72)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v73;
  double v74;
  void (*v75)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  __CFError *v79;
  __CFError *v80;
  uint64_t v81;
  CFIndex Code;
  CFIndex v83;
  void (*v84)(uint64_t, __CFString *, __CFString *, CFIndex, _QWORD);
  uint64_t v85;
  CFErrorDomain Domain;
  CFErrorDomain v87;
  void (*v88)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v90;
  const void *v91;
  const void *v92;
  NSObject *v93;
  NSObject *v94;
  uint64_t v95;
  const __CFArray *v96;
  NSObject *v97;
  const __CFAllocator *v98;
  uint64_t v99;
  const void **v103;
  CFTypeRef v105;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2
    || (v16 = CFGetTypeID(a2), v16 != FigAssetGetTypeID())
    || !a4
    || (v17 = CFGetTypeID(a4), v17 != CFArrayGetTypeID())
    || a6 && (v18 = CFGetTypeID(a6), v18 != CFDictionaryGetTypeID())
    || !a11)
  {
LABEL_145:
    v99 = FigSignalErrorAt();
    if (!(_DWORD)v99)
      return v99;
    goto LABEL_148;
  }
  cf[0] = 0;
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v20 = *(unsigned int (**)(uint64_t, const __CFString *, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  v21 = v20 && !v20(CMBaseObject, CFSTR("assetProperty_AssetType"), a1, cf) && !FigCFEqual();
  if (cf[0])
    CFRelease(cf[0]);
  if (v21)
    return 0;
  cf[0] = 0;
  v22 = FigAssetGetCMBaseObject(a2);
  v23 = *(uint64_t (**)(uint64_t, const __CFString *, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
  if (!v23)
  {
    v29 = -12782;
    goto LABEL_31;
  }
  v24 = v23(v22, CFSTR("assetProperty_CreationOptionsDictionary"), a1, cf);
  if (v24)
    goto LABEL_152;
  if (!cf[0])
  {
    v27 = 0;
    v26 = 0;
LABEL_24:
    if (a3)
      v28 = a3;
    else
      v28 = v26;
    if (!a3 && !v27)
      goto LABEL_151;
LABEL_29:
    v30 = CFURLGetTypeID();
    if (v30 == CFGetTypeID(v28))
    {
      v29 = 0;
      goto LABEL_31;
    }
    goto LABEL_151;
  }
  URLValue = (const void *)FigCFDictionaryGetURLValue();
  v26 = URLValue;
  v27 = URLValue != 0;
  if (!a3 || !URLValue)
    goto LABEL_24;
  v28 = a3;
  if (CFEqual(a3, URLValue))
    goto LABEL_29;
LABEL_151:
  v24 = FigSignalErrorAt();
LABEL_152:
  v29 = v24;
LABEL_31:
  if (cf[0])
    CFRelease(cf[0]);
  if (v29)
    return 0;
  FigAssetDownloaderGetClassID();
  v31 = CMDerivedObjectCreate();
  if ((_DWORD)v31)
    goto LABEL_147;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    v33 = CFRetain(a1);
  else
    v33 = 0;
  *(_QWORD *)(DerivedStorage + 8) = v33;
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(a4);
  if (a5)
    v34 = a5;
  else
    v34 = a4;
  *(_QWORD *)(DerivedStorage + 48) = CFRetain(v34);
  if (a7)
  {
    v35 = CFRetain(a7);
    *(_QWORD *)(DerivedStorage + 56) = v35;
    v103 = (const void **)(DerivedStorage + 56);
    if (v35)
    {
      FigStreamingAssetDownloadConfigCopyAssetNameAndImage((uint64_t)v35, (_QWORD *)(DerivedStorage + 80), (_QWORD *)(DerivedStorage + 88));
      DownloadsInterstitialAssets = FigStreamingAssetDownloadConfigGetDownloadsInterstitialAssets(*(_QWORD *)(DerivedStorage + 56));
LABEL_47:
      *(_BYTE *)(DerivedStorage + 417) = DownloadsInterstitialAssets;
      goto LABEL_48;
    }
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 56) = 0;
    v103 = (const void **)(DerivedStorage + 56);
  }
  if (a6)
  {
    DownloadsInterstitialAssets = FigCFDictionaryGetBooleanIfPresent();
    goto LABEL_47;
  }
LABEL_48:
  v31 = FigRetainProxyCreate();
  if ((_DWORD)v31)
    goto LABEL_147;
  Mutable = CFSetCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(DerivedStorage + 432) = Mutable;
  if (!Mutable)
    goto LABEL_145;
  v38 = CFArrayCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 440) = v38;
  if (!v38)
    goto LABEL_145;
  v31 = FigCFURLCreateWithSuffixedExtension();
  if ((_DWORD)v31)
    goto LABEL_147;
  v105 = a2;
  *(_QWORD *)(DerivedStorage + 24) = 0;
  if (a8)
  {
    if (object)
    {
      if (a10)
      {
        dispatch_retain(object);
        *(_QWORD *)(DerivedStorage + 280) = object;
        *(_OWORD *)(DerivedStorage + 200) = *a10;
        v39 = a10[1];
        v40 = a10[2];
        v41 = a10[3];
        *(_OWORD *)(DerivedStorage + 264) = a10[4];
        *(_OWORD *)(DerivedStorage + 248) = v41;
        *(_OWORD *)(DerivedStorage + 232) = v40;
        *(_OWORD *)(DerivedStorage + 216) = v39;
        v42 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        *(_QWORD *)(DerivedStorage + 192) = v42;
        if (!v42)
          goto LABEL_145;
      }
    }
  }
  *(_BYTE *)(DerivedStorage + 162) = 0;
  *(_WORD *)(DerivedStorage + 160) = 257;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(_QWORD *)(DerivedStorage + 64) = CFDictionaryCreateCopy(AllocatorForMedia, (CFDictionaryRef)a6);
  if (a6)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)a6, CFSTR("AssetDownloaderCreateOption_ClientBundleIdentifier"));
    if (Value)
      Value = CFRetain(Value);
    *(_QWORD *)(DerivedStorage + 72) = Value;
    if (!*(_QWORD *)(DerivedStorage + 80))
    {
      v45 = CFDictionaryGetValue((CFDictionaryRef)a6, CFSTR("AssetDownloaderCreateOption_AssetName"));
      if (v45)
        v45 = CFRetain(v45);
      *(_QWORD *)(DerivedStorage + 80) = v45;
    }
    if (!*(_QWORD *)(DerivedStorage + 88))
    {
      v46 = CFDictionaryGetValue((CFDictionaryRef)a6, CFSTR("AssetDownloaderCreateOption_AssetImage"));
      if (v46)
        v46 = CFRetain(v46);
      *(_QWORD *)(DerivedStorage + 88) = v46;
    }
    v47 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a6, CFSTR("AssetDownloaderCreateOption_DebugIdentifier"));
    if (v47)
      v47 = (const __CFString *)CFRetain(v47);
    v48 = &stru_1E2FD85F8;
    if (v47)
      v48 = v47;
    *(_QWORD *)(DerivedStorage + 32) = v48;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    if (FigCFDictionaryGetInt64IfPresent())
      *(_BYTE *)(DerivedStorage + 120) = 1;
    if (FigCFDictionaryGetInt64IfPresent())
      *(_BYTE *)(DerivedStorage + 121) = 1;
    if (FigCFDictionaryGetCGSizeIfPresent())
      *(_BYTE *)(DerivedStorage + 96) = 1;
    if (FigCFDictionaryGetInt64IfPresent())
      *(_BYTE *)(DerivedStorage + 144) = 1;
    if (FigCFDictionaryGetBooleanIfPresent())
      *(_BYTE *)(DerivedStorage + 161) = *(_BYTE *)(DerivedStorage + 163);
  }
  v31 = FigNetworkHistoryCreate();
  if ((_DWORD)v31)
  {
LABEL_147:
    v99 = v31;
LABEL_148:
    v92 = 0;
    goto LABEL_142;
  }
  if (FigIsItOKToLogURLs())
  {
    v49 = (uint64_t)a2;
    v50 = FPSupport_GetAssetDoNotLogURLs((uint64_t)a2) == 0;
  }
  else
  {
    v50 = 0;
    v49 = (uint64_t)a2;
  }
  *(_BYTE *)(DerivedStorage + 552) = v50;
  *(_DWORD *)(DerivedStorage + 532) = 0;
  v51 = dispatch_queue_create("com.apple.coremedia.streamingssetdownloadorchestrator.state", 0);
  *(_QWORD *)DerivedStorage = v51;
  if (!v51)
    goto LABEL_145;
  *(_QWORD *)(DerivedStorage + 336) = 0;
  *(_QWORD *)(DerivedStorage + 344) = DerivedStorage + 336;
  *(_QWORD *)(DerivedStorage + 504) = 0;
  *(_QWORD *)(DerivedStorage + 512) = DerivedStorage + 504;
  v52 = CFArrayCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 464) = v52;
  if (!v52)
    goto LABEL_145;
  *(_QWORD *)(DerivedStorage + 472) = 1;
  *(_QWORD *)(DerivedStorage + 480) = 6;
  v53 = CMBaseObjectGetDerivedStorage();
  v54 = (uint64_t *)(v53 + 576);
  if (!FigReportingAgentCreateFromAsset(v49, 3, 0, (_QWORD *)(v53 + 576)))
  {
    *(_DWORD *)(v53 + 584) = FigGetCFPreferenceNumberWithDefault();
    *(_BYTE *)(v53 + 569) = FigDebugIsInternalBuild();
    v55 = *(_QWORD *)(v53 + 576);
    if (v55)
    {
      v56 = *(_QWORD *)(v53 + 32);
      v57 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 48);
      if (v57)
        v57(v55, CFSTR("streamingOrchestratorStats"), CFSTR("DebugID"), v56, 0);
    }
    v58 = *(_QWORD *)(v53 + 576);
    if (v58)
    {
      v59 = *(unsigned __int8 *)(v53 + 160);
      v60 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v60)
        v60(v58, CFSTR("streamingOrchestratorStats"), CFSTR("AllowHDR"), v59, 0);
    }
    v61 = *(_QWORD *)(v53 + 576);
    if (v61)
    {
      v62 = *(unsigned __int8 *)(v53 + 161);
      v63 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v63)
        v63(v61, CFSTR("streamingOrchestratorStats"), CFSTR("PreferMultiChannel"), v62, 0);
    }
    v64 = *(_QWORD *)(v53 + 576);
    if (v64)
    {
      v65 = *(unsigned __int8 *)(v53 + 178);
      v66 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v66)
        v66(v64, CFSTR("streamingOrchestratorStats"), CFSTR("DisExpNetAccess"), v65, 0);
    }
    v67 = *(_QWORD *)(v53 + 576);
    if (v67)
    {
      v68 = *(unsigned __int8 *)(v53 + 179);
      v69 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v69)
        v69(v67, CFSTR("streamingOrchestratorStats"), CFSTR("DisConNetAccess"), v68, 0);
    }
    if (*(_BYTE *)(v53 + 96))
    {
      v70 = *(_QWORD *)(v53 + 576);
      if (v70)
      {
        v71 = *(double *)(v53 + 112);
        v72 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v72)
          v72(v70, CFSTR("streamingOrchestratorStats"), CFSTR("MinPresSizeHeight"), (uint64_t)v71, 0);
      }
      v73 = *(_QWORD *)(v53 + 576);
      if (v73)
      {
        v74 = *(double *)(v53 + 104);
        v75 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v75)
          v75(v73, CFSTR("streamingOrchestratorStats"), CFSTR("MinPresSizeWidth"), (uint64_t)v74, 0);
      }
    }
    if (*(_BYTE *)(v53 + 120))
    {
      v76 = *(_QWORD *)(v53 + 576);
      if (v76)
      {
        v77 = *(_QWORD *)(v53 + 128);
        v78 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v78)
          v78(v76, CFSTR("streamingOrchestratorStats"), CFSTR("MinBW"), v77, 0);
      }
    }
    v79 = (__CFError *)CFDictionaryGetValue((CFDictionaryRef)a6, CFSTR("AssetDownloaderCreateOption_RetryError"));
    if (v79)
    {
      v80 = v79;
      v81 = *v54;
      Code = CFErrorGetCode(v79);
      if (v81)
      {
        v83 = Code;
        v84 = *(void (**)(uint64_t, __CFString *, __CFString *, CFIndex, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v84)
          v84(v81, CFSTR("streamingOrchestratorStats"), CFSTR("retryErrorCode"), v83, 0);
      }
      v85 = *v54;
      Domain = CFErrorGetDomain(v80);
      if (v85)
      {
        v87 = Domain;
        v88 = *(void (**)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 48);
        if (v88)
          v88(v85, CFSTR("streamingOrchestratorStats"), CFSTR("retryErrorDomain"), v87, 0);
      }
    }
  }
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((*(_BYTE *)(DerivedStorage + 176) || *(_BYTE *)(DerivedStorage + 177)) && dword_1EE2A2BB0)
  {
    v90 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v91 = *v103;
  v92 = (const void *)FigCFCopyCompactDescription();
  if (v91)
  {
    if (dword_1EE2A2BB0)
    {
      v93 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    dworch_logDownloadConfig(0, CFSTR("input config: "), *v103);
  }
  else
  {
    if (dword_1EE2A2BB0)
    {
      v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v95 = CMBaseObjectGetDerivedStorage();
    dworch_logMediaSelectionArray(0, (uint64_t)CFSTR("primary"), *(const __CFArray **)(v95 + 40));
    v96 = *(const __CFArray **)(v95 + 48);
    if (*(const __CFArray **)(v95 + 40) == v96)
    {
      if (dword_1EE2A2BB0)
      {
        v97 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      dworch_logMediaSelectionArray(0, (uint64_t)CFSTR("aux"), v96);
    }
  }
  if (!*(_BYTE *)(DerivedStorage + 417))
    goto LABEL_140;
  if (*(_QWORD *)(DerivedStorage + 24))
  {
    v98 = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(_QWORD *)(DerivedStorage + 424) = CFURLCreateCopyAppendingPathComponent(v98, *(CFURLRef *)(DerivedStorage + 24), CFSTR("InterstitialAssets"), 1u);
LABEL_140:
    v99 = FigStreamingAssetDownloadProgressMonitorCreate((const void *)*MEMORY[0x1E0C9AE00], v105, (const __CFDictionary *)a6, 0, *(NSObject **)DerivedStorage, &FigStreamingAssetDownloadOrchestratorCreate_progressMonitorCallbacks, (_QWORD *)(DerivedStorage + 360));
    if (!(_DWORD)v99)
      *a11 = 0;
    goto LABEL_142;
  }
  v99 = 0;
LABEL_142:
  if (v92)
    CFRelease(v92);
  return v99;
}

void dworch_progressUpdateCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
    FigSignalErrorAt();
  else
    dworch_sendProgressUpdateCallback(a1, a3, a4);
}

void dworch_logDownloadConfig(uint64_t a1, const __CFString *a2, const void *a3)
{
  unsigned int OptimizesAuxiliaryContentConfigurations;
  unsigned int DownloadsInterstitialAssets;
  const __CFAllocator *v7;
  CFMutableStringRef Mutable;
  __CFString *v9;
  CFMutableArrayRef v10;
  __CFArray *v11;
  const __CFString *v12;
  CFStringRef TrimmedLogFromString;
  CFStringRef v14;
  CFIndex v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  OptimizesAuxiliaryContentConfigurations = FigStreamingAssetDownloadConfigGetOptimizesAuxiliaryContentConfigurations((uint64_t)a3);
  DownloadsInterstitialAssets = FigStreamingAssetDownloadConfigGetDownloadsInterstitialAssets((uint64_t)a3);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    v9 = Mutable;
    v10 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
    if (!v10)
      goto LABEL_15;
    v11 = v10;
    v12 = CFCopyDescription(a3);
    if (v12)
    {
      if (a2)
        CFStringAppend(v9, a2);
      CFStringAppendFormat(v9, 0, CFSTR("\noptimizesAuxContentConfigs: %d"), OptimizesAuxiliaryContentConfigurations);
      CFStringAppendFormat(v9, 0, CFSTR("\ndownloadsInterstitialAssets: %d"), DownloadsInterstitialAssets);
      CFStringAppend(v9, v12);
      TrimmedLogFromString = dworch_copyNextTrimmedLogFromString(v9, 0);
      if (TrimmedLogFromString)
      {
        v14 = TrimmedLogFromString;
        v15 = 0;
        do
        {
          CFArrayAppendValue(v11, v14);
          v15 += CFStringGetLength(v14);
          CFRelease(v14);
          v14 = dworch_copyNextTrimmedLogFromString(v9, v15);
        }
        while (v14);
      }
      Count = CFArrayGetCount(v11);
      if (Count >= 1)
      {
        v17 = Count;
        for (i = 0; i != v17; ++i)
        {
          CFArrayGetValueAtIndex(v11, i);
          if (dword_1EE2A2BB0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
    }
    CFRelease(v9);
    CFRelease(v11);
    v9 = (__CFString *)v12;
    if (v12)
LABEL_15:
      CFRelease(v9);
  }
}

uint64_t FigStreamingAssetDownloadOrchestratorTestAlternateChoice(const void *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  const __CFAllocator *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  uint64_t v9;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return dworch_selectAlternates_chooseAlternatesFromCreationOptions(0, v4, a1, (unsigned __int8 *)v8, a3, a4);
}

uint64_t dworch_selectAlternates_chooseAlternatesFromCreationOptions(uint64_t a1, const __CFAllocator *a2, const void *a3, unsigned __int8 *a4, _QWORD *a5, _QWORD *a6)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  const __CFNumber *v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  CFTypeRef v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  CFTypeRef v41;
  const void *v42;
  uint64_t v43;
  CFTypeRef v44;
  uint64_t v45;
  const void *PlaylistAlternateURL;
  const __CFNumber *v47;
  uint64_t DerivedStorage;
  uint64_t v49;
  char v50;
  CFTypeRef v51;
  CFTypeRef v52;
  CFTypeRef v53;
  _QWORD *v54;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v56;
  unsigned int v58;
  unsigned int v59;
  int v60;
  _QWORD *v61;
  _QWORD *v62;
  __CFArray *v63;
  CFTypeRef v64;
  CFTypeRef v65;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v64 = 0;
  v65 = 0;
  CMBaseObjectGetDerivedStorage();
  Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v33 = FigSignalErrorAt();
    goto LABEL_141;
  }
  v12 = Mutable;
  v62 = a5;
  v13 = dworch_selectAlternates_installDeviceCapabilityFilters(a2, (uint64_t)a3);
  if ((_DWORD)v13)
    goto LABEL_144;
  v61 = a6;
  v63 = v12;
  v14 = *a4;
  v15 = *((double *)a4 + 1);
  v16 = *((double *)a4 + 2);
  v17 = a4[24];
  v18 = a4[25];
  v20 = *((_QWORD *)a4 + 4);
  v19 = *((_QWORD *)a4 + 5);
  v21 = a4[48];
  v22 = *((_QWORD *)a4 + 7);
  v23 = a4[64];
  v24 = a4[66];
  v25 = a4[68];
  v26 = (const __CFNumber *)*((_QWORD *)a4 + 9);
  cf[0] = 0;
  if (v25)
    v27 = 1;
  else
    v27 = 4;
  if (v23)
    v28 = v27;
  else
    v28 = 1;
  v58 = v19;
  v59 = v20;
  v60 = v18;
  if (v25)
  {
    v29 = 2;
  }
  else if (v23)
  {
    if (v18)
      v29 = 7;
    else
      v29 = 0;
  }
  else
  {
    v29 = 4 * (v18 != 0);
  }
  v30 = FigAlternatePreferredVideoFormatFilterCreate(a2, v28, v29, cf);
  v31 = cf[0];
  if ((_DWORD)v30)
    goto LABEL_51;
  v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  v31 = cf[0];
  if ((_DWORD)v30)
    goto LABEL_51;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v30 = FigAlternateSuppressAudioOnlyFilterCreate(a2, cf);
  v31 = cf[0];
  if ((_DWORD)v30)
    goto LABEL_51;
  v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  v31 = cf[0];
  if ((_DWORD)v30)
    goto LABEL_51;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v30 = v24
      ? FigAlternateLosslessAudioPreferenceFilterCreate((uint64_t)a2, 0, cf)
      : FigAlternateLossyAudioPreferenceFilterCreate((uint64_t)a2, cf);
  v31 = cf[0];
  if ((_DWORD)v30)
    goto LABEL_51;
  v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  v31 = cf[0];
  if ((_DWORD)v30)
    goto LABEL_51;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v21)
  {
    v30 = FigAlternateMaximumSampleRatePreferenceFilter(a2, v26, cf, (double)v22);
    v31 = cf[0];
    if ((_DWORD)v30)
      goto LABEL_51;
    v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
    v31 = cf[0];
    if ((_DWORD)v30)
      goto LABEL_51;
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
  }
  if (!v14)
    goto LABEL_39;
  v30 = FigAlternateMinimumRequiredPresentationSizeFilterCreate(a2, cf, v15, v16);
  v31 = cf[0];
  if ((_DWORD)v30 || (v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]), v31 = cf[0], (_DWORD)v30))
  {
LABEL_51:
    v33 = v30;
    v12 = v63;
    goto LABEL_52;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
LABEL_39:
  v12 = v63;
  if (v17)
  {
    v32 = FigAlternateMinimumRequiredBitrateFilterCreate(a2, v59, cf);
    v31 = cf[0];
    if ((_DWORD)v32 || (v32 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]), v31 = cf[0], (_DWORD)v32))
    {
LABEL_96:
      v33 = v32;
      goto LABEL_52;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
  }
  if (!v60)
    goto LABEL_55;
  v32 = FigAlternateMinimumRequiredBitrateForHEVCFilterCreate(a2, v58, cf);
  v31 = cf[0];
  if ((_DWORD)v32)
    goto LABEL_96;
  v33 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  v31 = cf[0];
  if ((_DWORD)v33 || !cf[0])
  {
LABEL_52:
    if (!v31)
      goto LABEL_54;
    goto LABEL_53;
  }
  v33 = 0;
LABEL_53:
  CFRelease(v31);
LABEL_54:
  if ((_DWORD)v33)
    goto LABEL_139;
LABEL_55:
  v34 = a4[25];
  v35 = a4[64];
  v36 = a4[68];
  cf[0] = 0;
  v37 = FigAlternateContinuousFramesOnlyFilterCreate((uint64_t)a2, cf);
  if ((_DWORD)v37)
    goto LABEL_88;
  v37 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if ((_DWORD)v37)
    goto LABEL_88;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v38 = v36 ? 1 : 4;
  v39 = v35 ? v38 : 1;
  if (v36)
  {
    v40 = 2;
  }
  else if (v35)
  {
    v40 = v34 ? 7 : 0;
  }
  else
  {
    v40 = 4 * (v34 != 0);
  }
  v37 = FigAlternatePreferredVideoFormatFilterCreate(a2, v39, v40, cf);
  if ((_DWORD)v37)
    goto LABEL_88;
  v37 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if ((_DWORD)v37)
    goto LABEL_88;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v37 = FigAlternateHighestRankingScoreFilterCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], cf);
  if ((_DWORD)v37)
    goto LABEL_88;
  v37 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if ((_DWORD)v37)
    goto LABEL_88;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v37 = FigAlternatePlaybackScoreAndBitRateFilterCreate(a2, cf);
  if ((_DWORD)v37)
    goto LABEL_88;
  v37 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if ((_DWORD)v37)
    goto LABEL_88;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v37 = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)a2, cf);
  if ((_DWORD)v37)
  {
LABEL_88:
    v33 = v37;
    v41 = cf[0];
    goto LABEL_89;
  }
  v33 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  v41 = cf[0];
  if ((_DWORD)v33 || !cf[0])
  {
LABEL_89:
    if (!v41)
      goto LABEL_91;
    goto LABEL_90;
  }
  v33 = 0;
LABEL_90:
  CFRelease(v41);
LABEL_91:
  if ((_DWORD)v33)
    goto LABEL_139;
  v42 = (const void *)*((_QWORD *)a4 + 9);
  cf[0] = 0;
  v43 = FigAlternateDefaultAudioLayoutPreferenceFilterCreate((uint64_t)a2, v42, cf);
  v44 = cf[0];
  if ((_DWORD)v43)
  {
    v33 = v43;
    goto LABEL_99;
  }
  v33 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  v44 = cf[0];
  if ((_DWORD)v33 || !cf[0])
  {
LABEL_99:
    if (!v44)
      goto LABEL_101;
    goto LABEL_100;
  }
  v33 = 0;
LABEL_100:
  CFRelease(v44);
LABEL_101:
  if ((_DWORD)v33)
    goto LABEL_139;
  v13 = dworch_selectAlternates_chooseAppropriateAlternate(a3, &v65);
  if ((_DWORD)v13)
    goto LABEL_144;
  v13 = FigAlternateSelectionBossRemoveFilter((uint64_t)a3, (uint64_t)CFSTR("DefaultAudioLayoutPreference"));
  if ((_DWORD)v13)
    goto LABEL_144;
  v45 = (uint64_t)v65;
  if (!v65)
  {
    CFRelease(v12);
    v33 = 0;
    goto LABEL_141;
  }
  if (!a4[67] && !a4[65] || (int)FigAlternateGetAudioChannelCount((uint64_t)v65, *((_QWORD *)a4 + 9), 0) > 2)
    goto LABEL_126;
  PlaylistAlternateURL = (const void *)FigAlternateGetPlaylistAlternateURL(v45);
  v47 = (const __CFNumber *)*((_QWORD *)a4 + 9);
  cf[0] = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v49 = FigAlternatePreferredAudioFormatFilterCreate(a2, 7u, 0, 0, 0, v47, 0, cf);
  if ((_DWORD)v49)
    goto LABEL_119;
  v49 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if ((_DWORD)v49)
    goto LABEL_119;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v50 = DerivedStorage ? *(_BYTE *)(DerivedStorage + 552) : 1;
  v49 = FigAlternateAllowListWithURLFilterCreate((uint64_t)a2, PlaylistAlternateURL, 700, v50, cf);
  if ((_DWORD)v49)
  {
LABEL_119:
    v33 = v49;
    v51 = cf[0];
  }
  else
  {
    v33 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
    v51 = cf[0];
    if (!(_DWORD)v33 && cf[0])
    {
      v33 = 0;
LABEL_121:
      CFRelease(v51);
      goto LABEL_122;
    }
  }
  if (v51)
    goto LABEL_121;
LABEL_122:
  if ((_DWORD)v33)
    goto LABEL_139;
  v13 = dworch_selectAlternates_chooseAppropriateAlternate(a3, &v64);
  if (!(_DWORD)v13)
  {
    v13 = FigAlternateSelectionBossRemoveFilter((uint64_t)a3, (uint64_t)CFSTR("PreferredAudioFormat"));
    if (!(_DWORD)v13)
    {
      v13 = FigAlternateSelectionBossRemoveFilter((uint64_t)a3, (uint64_t)CFSTR("AllowListURLFilter"));
      if (!(_DWORD)v13)
      {
LABEL_126:
        v53 = v64;
        v52 = v65;
        if (a4[67] && v64)
        {
          v54 = v62;
          if (v65)
          {
            CFRelease(v65);
            v52 = 0;
            v65 = 0;
          }
        }
        else
        {
          v54 = v62;
          if (FigCFEqual() && v53)
          {
            CFRelease(v53);
            v53 = 0;
            v64 = 0;
          }
        }
        if (dword_1EE2A2BB0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v54)
        {
          *v54 = v52;
          v65 = 0;
        }
        v33 = 0;
        if (v61)
        {
          *v61 = v53;
          v64 = 0;
        }
        goto LABEL_139;
      }
    }
  }
LABEL_144:
  v33 = v13;
LABEL_139:
  v56 = v65;
  CFRelease(v12);
  if (v56)
    CFRelease(v56);
LABEL_141:
  if (v64)
    CFRelease(v64);
  return v33;
}

void dworch_sendProgressUpdateCallback(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  CFTypeRef v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = (const void *)v7;
    v9 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
    if (v9)
    {
      v10 = v9;
      if (a1)
        v11 = CFRetain(a1);
      else
        v11 = 0;
      *v10 = v11;
      v10[1] = v8;
      v10[7] = a2;
      v10[8] = a3;
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 280), v10, (dispatch_function_t)dworch_sendProgressUpdateCallbackOnCallbackQueue);
    }
    else if (FigSignalErrorAt())
    {
      CFRelease(v8);
    }
  }
}

void dworch_sendProgressUpdateCallbackOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD, _QWORD, _QWORD);
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(DerivedStorage + 256);
    if (v3)
      v3(a1[1], *a1, a1[7], a1[8]);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[1];
  if (v4)
    CFRelease(v4);
  free(a1);
}

uint64_t dworch_invalidate(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)dworch_invalidateDispatch);
  return v5;
}

void dworch_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dworch_invalidateGuts();
  dworch_relinquishAccessToDestinationURL();
  FigSymptomsReportStreamingAssetDownloadEnd((const unsigned __int8 *)(DerivedStorage + 600));
  v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 560);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 560) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

CFStringRef dworch_copyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = (const __CFString *)DerivedStorage[3];
  v4 = DerivedStorage[4];
  v6 = DerivedStorage[2];
  v7 = CMBaseObjectGetDerivedStorage();
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8 || !*(_BYTE *)(v7 + 552))
    v5 = CFSTR("[]");
  return CFStringCreateWithFormat(v3, 0, CFSTR("[FigStreamingAssetDownloadOrchestrator %p debugIdentifier:%@ asset %p asset %@ destinationURL %@]"), a1, v4, v6, v6, v5);
}

uint64_t dworch_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t result;
  _QWORD context[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v12 = 0;
  context[0] = a1;
  context[1] = a2;
  v13 = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)dworch_copyPropertyDispatch);
  result = v12;
  if (!(_DWORD)v12)
    *a4 = v11;
  return result;
}

uint64_t dworch_invalidateDispatch(uint64_t a1)
{
  uint64_t result;

  result = dworch_invalidateGuts();
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t dworch_invalidateGuts()
{
  uint64_t result;
  _QWORD *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  CFIndex i;
  const __CFArray *Count;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  NSObject *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  const void *v44;
  const void *v45;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 568))
  {
    v1 = (_QWORD *)result;
    *(_BYTE *)(result + 568) = 1;
    if (*(_QWORD *)(result + 560))
      FigRetainProxyInvalidate();
    if (dword_1EE2A2BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    dworch_removeAssetListeners();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    for (i = 0; ; ++i)
    {
      Count = *(const __CFArray **)(DerivedStorage + 464);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), i);
      dworch_downloadMedia_removeMediaDownloaderListeners();
    }
    dworch_selectAlternates_removePumpListeners();
    v6 = (const void *)v1[1];
    if (v6)
    {
      CFRelease(v6);
      v1[1] = 0;
    }
    v7 = (const void *)v1[2];
    if (v7)
    {
      CFRelease(v7);
      v1[2] = 0;
    }
    v8 = (const void *)v1[3];
    if (v8)
    {
      CFRelease(v8);
      v1[3] = 0;
    }
    v9 = (const void *)v1[5];
    if (v9)
    {
      CFRelease(v9);
      v1[5] = 0;
    }
    v10 = (const void *)v1[6];
    if (v10)
    {
      CFRelease(v10);
      v1[6] = 0;
    }
    v11 = (const void *)v1[8];
    if (v11)
    {
      CFRelease(v11);
      v1[8] = 0;
    }
    v12 = (const void *)v1[9];
    if (v12)
    {
      CFRelease(v12);
      v1[9] = 0;
    }
    v13 = (const void *)v1[10];
    if (v13)
    {
      CFRelease(v13);
      v1[10] = 0;
    }
    v14 = (const void *)v1[11];
    if (v14)
    {
      CFRelease(v14);
      v1[11] = 0;
    }
    v15 = (const void *)v1[23];
    if (v15)
    {
      CFRelease(v15);
      v1[23] = 0;
    }
    v16 = (const void *)v1[24];
    if (v16)
    {
      CFRelease(v16);
      v1[24] = 0;
    }
    v17 = v1[35];
    if (v17)
    {
      dispatch_release(v17);
      v1[35] = 0;
    }
    v18 = (const void *)v1[36];
    if (v18)
    {
      CFRelease(v18);
      v1[36] = 0;
    }
    v19 = (const void *)v1[37];
    if (v19)
    {
      CFRelease(v19);
      v1[37] = 0;
    }
    v20 = (const void *)v1[38];
    if (v20)
    {
      CFRelease(v20);
      v1[38] = 0;
    }
    v21 = (const void *)v1[40];
    if (v21)
    {
      CFRelease(v21);
      v1[40] = 0;
    }
    v22 = (const void *)v1[41];
    if (v22)
    {
      CFRelease(v22);
      v1[41] = 0;
    }
    v23 = (const void *)v1[44];
    if (v23)
    {
      CFRelease(v23);
      v1[44] = 0;
    }
    v24 = (const void *)v1[45];
    if (v24)
    {
      CFRelease(v24);
      v1[45] = 0;
    }
    v25 = (const void *)v1[7];
    if (v25)
    {
      CFRelease(v25);
      v1[7] = 0;
    }
    v26 = (const void *)v1[48];
    if (v26)
    {
      CFRelease(v26);
      v1[48] = 0;
    }
    v27 = (const void *)v1[46];
    if (v27)
    {
      CFRelease(v27);
      v1[46] = 0;
    }
    v28 = (const void *)v1[47];
    if (v28)
    {
      CFRelease(v28);
      v1[47] = 0;
    }
    v29 = (const void *)v1[50];
    if (v29)
    {
      CFRelease(v29);
      v1[50] = 0;
    }
    v30 = (_QWORD *)v1[42];
    if (v30)
    {
      v31 = (_QWORD *)*v30;
      if (*v30)
      {
        do
        {
          v32 = v31;
          v31[1] = v30[1];
          *(_QWORD *)v30[1] = v31;
          dworch_freeAlternateAndRenditionItem(v30);
          v31 = (_QWORD *)*v32;
          v30 = v32;
        }
        while (*v32);
      }
      else
      {
        v32 = (_QWORD *)v1[42];
      }
      v33 = (_QWORD *)v32[1];
      v1[43] = v33;
      *v33 = 0;
      dworch_freeAlternateAndRenditionItem(v32);
    }
    v34 = (const void *)v1[51];
    if (v34)
    {
      CFRelease(v34);
      v1[51] = 0;
    }
    v35 = (const void *)v1[54];
    if (v35)
    {
      CFRelease(v35);
      v1[54] = 0;
    }
    v36 = (const void *)v1[55];
    if (v36)
    {
      CFRelease(v36);
      v1[55] = 0;
    }
    v37 = (const void *)v1[57];
    if (v37)
    {
      CFRelease(v37);
      v1[57] = 0;
    }
    v38 = (const void *)v1[58];
    if (v38)
    {
      CFRelease(v38);
      v1[58] = 0;
    }
    v39 = (const void *)v1[62];
    if (v39)
    {
      CFRelease(v39);
      v1[62] = 0;
    }
    v40 = (_QWORD *)v1[63];
    if (v40)
    {
      v41 = (_QWORD *)*v40;
      if (*v40)
      {
        do
        {
          v42 = v41;
          v41[1] = v40[1];
          *(_QWORD *)v40[1] = v41;
          dworch_freeDownloadMediaProgressItem(v40);
          v41 = (_QWORD *)*v42;
          v40 = v42;
        }
        while (*v42);
      }
      else
      {
        v42 = (_QWORD *)v1[63];
      }
      v43 = (_QWORD *)v42[1];
      v1[64] = v43;
      *v43 = 0;
      dworch_freeDownloadMediaProgressItem(v42);
    }
    v44 = (const void *)v1[67];
    if (v44)
    {
      CFRelease(v44);
      v1[67] = 0;
    }
    v45 = (const void *)v1[72];
    if (v45)
    {
      CFRelease(v45);
      v1[72] = 0;
    }
    return dworch_relinquishAccessToDestinationURL();
  }
  return result;
}

uint64_t dworch_removeAssetListeners()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t dworch_selectAlternates_removePumpListeners()
{
  uint64_t result;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296))
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  result = FigNotificationCenterRemoveWeakListener();
  if (!(_DWORD)result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void dworch_freeAlternateAndRenditionItem(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[2];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[3];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

void dworch_freeDownloadMediaProgressItem(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  free(a1);
}

uint64_t dworch_relinquishAccessToDestinationURL()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 544))
    return 0;
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = FigAssetDownloadCoordinatorRelinquishAccessToURL(*(void **)(DerivedStorage + 544));
  if (!(_DWORD)result)
    *(_QWORD *)(DerivedStorage + 544) = 0;
  return result;
}

uint64_t dworch_assetNotificationCallback(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t CMBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, uint64_t, _QWORD *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v10 = (_QWORD *)DerivedStorage;
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated() || !CFEqual(a3, CFSTR("assetNotice_PropertyLoaded")) || v10[2] != a4)
    return FigSignalErrorAt();
  FigCFDictionaryGetInt32IfPresent();
  CFDictionaryGetValue(a5, CFSTR("assetPayload_Property"));
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    if (!v10[44])
    {
      v12 = v10[1];
      CMBaseObject = FigAssetGetCMBaseObject(v10[2]);
      result = CMBaseObjectGetVTable();
      v14 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(result + 8) + 48);
      if (v14)
      {
        result = v14(CMBaseObject, CFSTR("Duration"), v12, v10 + 44);
        if (!(_DWORD)result)
        {
          dworch_downloadMedia_symptomsReportStreamingAssetDownloadStart();
          return dworch_removeAssetListeners(a2);
        }
      }
    }
  }
  return result;
}

uint64_t dworch_downloadMedia_symptomsReportStreamingAssetDownloadStart()
{
  uint64_t result;
  _BOOL4 v1;
  _BOOL4 v2;
  uint64_t v3;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v6;
  uint64_t v7;
  BOOL v8;
  CMTime v9;
  CFTypeRef cf;
  CMTime v11;

  result = CMBaseObjectGetDerivedStorage();
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v1 = *(_BYTE *)(result + 178) == 0;
  v2 = *(_BYTE *)(result + 179) == 0;
  if (*(_DWORD *)(result + 532) == 3)
  {
    v3 = result;
    if (*(_DWORD *)(result + 524) == 1)
    {
      result = (uint64_t)dworch_loadDuration();
      if (*(_QWORD *)(v3 + 352))
      {
        cf = 0;
        CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v3 + 16));
        v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
        if (v5 && !v5(CMBaseObject, CFSTR("assetProperty_CreationOptionsDictionary"), *MEMORY[0x1E0C9AE00], &cf))
        {
          v9.value = 0;
          if (FigCFDictionaryGetInt64IfPresent())
            v8 = v9.value == 0;
          else
            v8 = 0;
          v6 = !v8;
          if (cf)
            CFRelease(cf);
        }
        else
        {
          v6 = 1;
        }
        CMTimeMakeFromDictionary(&v11, *(CFDictionaryRef *)(v3 + 352));
        v7 = *(_QWORD *)(v3 + 72);
        v9 = v11;
        return FigSymptomsReportStreamingAssetDownloadStart(v7, &v9, v6, v1, v2, (unsigned __int8 *)(v3 + 600));
      }
    }
  }
  return result;
}

_QWORD *dworch_loadDuration()
{
  _QWORD *result;
  _QWORD *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const __CFString *, char *);
  BOOL v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  char v9;

  result = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (!result[44])
  {
    v1 = result;
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    result = (_QWORD *)FigNotificationCenterAddWeakListener();
    if (!(_DWORD)result || (_DWORD)result == -12724)
    {
      v3 = v1[2];
      result = (_QWORD *)CMBaseObjectGetVTable();
      v4 = *(uint64_t (**)(uint64_t, const __CFString *, char *))(result[2] + 24);
      if (v4)
      {
        result = (_QWORD *)v4(v3, CFSTR("Duration"), &v9);
        if ((_DWORD)result)
          v5 = 1;
        else
          v5 = v9 == 0;
        if (!v5)
        {
          v6 = v1[1];
          CMBaseObject = FigAssetGetCMBaseObject(v1[2]);
          result = (_QWORD *)CMBaseObjectGetVTable();
          v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(result[1] + 48);
          if (v8)
            return (_QWORD *)v8(CMBaseObject, CFSTR("Duration"), v6, v1 + 44);
        }
      }
    }
  }
  return result;
}

uint64_t dworch_downloadMedia_removeMediaDownloaderListeners()
{
  uint64_t result;

  CMNotificationCenterGetDefaultLocalCenter();
  result = FigNotificationCenterRemoveWeakListener();
  if (!(_DWORD)result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListener();
    if (!(_DWORD)result)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return FigNotificationCenterRemoveWeakListener();
    }
  }
  return result;
}

void dworch_downloadMedia_downloadSucceededCallback(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *Value;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  CMTimeEpoch v17;
  uint64_t *v18;
  uint64_t v19;
  const __CFAllocator *v20;
  CFDictionaryRef v21;
  CFDictionaryRef v22;
  CFIndex v23;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  _QWORD *v32;
  _QWORD *v33;
  CFTypeRef v34;
  CFTypeRef v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const __CFArray *v41;
  CFRange v42;
  CFIndex FirstIndexOfValue;
  uint64_t v44;
  uint64_t CMBaseObject;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t started;
  const __CFArray *v49;
  __int128 v50;
  CMTime duration;
  CMTimeRange start;
  CMTimeRange v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (!FigRetainProxyIsInvalidated() && FigCFArrayContainsValue() && a5)
  {
    if (dword_1EE2A2BB0)
    {
      LODWORD(duration.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    Value = CFDictionaryGetValue(a5, CFSTR("AssetDownloaderPayloadKey_SelectedMediaArray"));
    v11 = CMBaseObjectGetDerivedStorage() + 504;
    while (1)
    {
      v11 = *(_QWORD *)v11;
      if (!v11)
        break;
      if (*(const void **)(v11 + 16) == a4)
      {
        *(_BYTE *)(v11 + 48) = 1;
        v12 = *(const void **)(v11 + 40);
        *(_QWORD *)(v11 + 40) = Value;
        if (Value)
          CFRetain(Value);
        if (v12)
          CFRelease(v12);
        if (v11 == *(_QWORD *)(DerivedStorage + 504))
        {
          v13 = *(const void **)(v11 + 24);
          if (v13)
          {
            CFRelease(v13);
            *(_QWORD *)(v11 + 24) = 0;
          }
        }
        v14 = CMBaseObjectGetDerivedStorage();
        v15 = *(uint64_t **)(v14 + 504);
        if (v15)
        {
          v16 = v14;
          v50 = *MEMORY[0x1E0CA2E68];
          v17 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          do
          {
            v18 = (uint64_t *)*v15;
            v19 = CMBaseObjectGetDerivedStorage();
            memset(&v53, 0, sizeof(v53));
            CMTimeMakeFromDictionary(&duration, *(CFDictionaryRef *)(v19 + 352));
            *(_OWORD *)&start.start.value = v50;
            start.start.epoch = v17;
            CMTimeRangeMake(&v53, &start.start, &duration);
            v20 = *(const __CFAllocator **)(v19 + 8);
            start = v53;
            v21 = CMTimeRangeCopyAsDictionary(&start, v20);
            if (v21)
            {
              v22 = v21;
              v23 = 0;
              while (1)
              {
                Count = (const __CFArray *)v15[3];
                if (Count)
                  Count = (const __CFArray *)CFArrayGetCount(Count);
                if (v23 >= (uint64_t)Count)
                  break;
                ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v15[3], v23);
                v26 = dworch_sendDidChangeLoadedTimeRangeCallback(a2, ValueAtIndex, (const void *)v15[3], v22, (const void *)v15[5]);
                ++v23;
                if ((_DWORD)v26)
                {
                  v27 = v26;
                  goto LABEL_26;
                }
              }
              v27 = 0;
LABEL_26:
              CFRelease(v22);
              if ((_DWORD)v27)
                goto LABEL_58;
            }
            else
            {
              v27 = FigSignalErrorAt();
              if ((_DWORD)v27)
                goto LABEL_58;
            }
            if (!*((_BYTE *)v15 + 48))
              break;
            v28 = (const void *)v15[5];
            v29 = CMBaseObjectGetDerivedStorage();
            v30 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v30)
            {
              v31 = (const void *)v30;
              v32 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
              if (v32)
              {
                v33 = v32;
                if (a2)
                  v34 = CFRetain(a2);
                else
                  v34 = 0;
                *v33 = v34;
                v33[1] = v31;
                if (v28)
                  v35 = CFRetain(v28);
                else
                  v35 = 0;
                v33[6] = v35;
                dispatch_async_f(*(dispatch_queue_t *)(v29 + 280), v33, (dispatch_function_t)dworch_sendDidFinishDownloadForMediaSelectionCallbackOnCallbackQueue);
              }
              else
              {
                v38 = FigSignalErrorAt();
                if ((_DWORD)v38)
                {
                  v27 = v38;
                  CFRelease(v31);
                  goto LABEL_58;
                }
              }
            }
            v36 = *v15;
            v37 = (_QWORD *)v15[1];
            if (*v15)
            {
              *(_QWORD *)(v36 + 8) = v37;
              v37 = (_QWORD *)v15[1];
            }
            else
            {
              *(_QWORD *)(v16 + 512) = v37;
            }
            *v37 = v36;
            dworch_freeDownloadMediaProgressItem(v15);
            v15 = v18;
          }
          while (v18);
        }
        v39 = CMBaseObjectGetDerivedStorage();
        v40 = CMBaseObjectGetDerivedStorage();
        v41 = *(const __CFArray **)(v40 + 464);
        if (v41)
          v42.length = CFArrayGetCount(*(CFArrayRef *)(v40 + 464));
        else
          v42.length = 0;
        v42.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v41, v42, a4);
        v44 = dworch_downloadMedia_removeMediaDownloaderListeners(a2, a4);
        if ((_DWORD)v44)
        {
          v27 = v44;
          goto LABEL_58;
        }
        CMBaseObject = FigAssetDownloaderGetCMBaseObject(a4);
        if (CMBaseObject)
        {
          v46 = CMBaseObject;
          v47 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v47)
            v47(v46);
        }
        if (FirstIndexOfValue != -1)
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v39 + 464), FirstIndexOfValue);
        if (*(_BYTE *)(v39 + 312)
          || !*(_QWORD *)(v39 + 488) && ((v49 = *(const __CFArray **)(v39 + 464)) == 0 || !CFArrayGetCount(v49)))
        {
          *(_BYTE *)(v39 + 521) = 1;
          started = dworch_downloadMedia_checkIfStageComplete(a2);
          goto LABEL_57;
        }
        if (*(_DWORD *)(v39 + 524) == 1)
        {
          started = dworch_downloadMedia_startNextMediaSelectionDownload((uint64_t)a2);
          goto LABEL_57;
        }
        return;
      }
    }
  }
  else
  {
    started = FigSignalErrorAt();
LABEL_57:
    v27 = started;
    if ((_DWORD)started)
LABEL_58:
      dworch_transitionToTerminalStateWithOSStatus(a2, v27);
  }
}

void dworch_downloadMedia_downloadFailedCallback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  void *Value;
  const void *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (!FigRetainProxyIsInvalidated() && FigCFArrayContainsValue() && a5)
  {
    Value = (void *)CFDictionaryGetValue(a5, CFSTR("AssetDownloaderPayloadKey_CFError"));
    v9 = CFDictionaryGetValue(a5, CFSTR("AssetDownloaderPayloadKey_SelectedAlternate"));
    if (v9)
      v9 = CFRetain(v9);
    *(_QWORD *)(DerivedStorage + 496) = v9;
    if (dword_1EE2A2BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    dworch_transitionToTerminalState(a2, Value);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void dworch_downloadMedia_loadedTimeRangesChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  __int128 v9;
  const void *Value;
  const void *v11;
  const void *v12;
  const __CFAllocator *v13;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  _QWORD *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  CMTimeRange v21;
  CMTime duration;
  CMTimeRange v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  *(_OWORD *)&v23.start.value = *MEMORY[0x1E0CA2E50];
  *(_OWORD *)&v23.start.epoch = v9;
  *(_OWORD *)&v23.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  CMBaseObjectGetDerivedStorage();
  if (!FigRetainProxyIsInvalidated() && FigCFArrayContainsValue() && a5)
  {
    Value = CFDictionaryGetValue(a5, CFSTR("AssetDownloaderPayloadKey_NewlyLoadedTimeRanges"));
    v11 = CFDictionaryGetValue(a5, CFSTR("AssetDownloaderPayloadKey_CurrentLoadedTimeRanges"));
    v12 = CFDictionaryGetValue(a5, CFSTR("AssetDownloaderPayloadKey_SelectedMediaArray"));
    CMTimeMakeFromDictionary(&duration, *(CFDictionaryRef *)(DerivedStorage + 352));
    *(_OWORD *)&v21.start.value = *MEMORY[0x1E0CA2E68];
    v21.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    CMTimeRangeMake(&v23, &v21.start, &duration);
    v13 = *(const __CFAllocator **)(DerivedStorage + 8);
    v21 = v23;
    v14 = CMTimeRangeCopyAsDictionary(&v21, v13);
    if (v14)
    {
      v15 = v14;
      v16 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 504);
      while (1)
      {
        v16 = (_QWORD *)*v16;
        if (!v16)
          break;
        if (v16[2] == a4)
        {
          v17 = (const void *)v16[3];
          v16[3] = v11;
          if (v11)
            CFRetain(v11);
          if (v17)
            CFRelease(v17);
          v18 = (const void *)v16[4];
          v16[4] = v15;
          CFRetain(v15);
          if (v18)
            CFRelease(v18);
          v19 = (const void *)v16[5];
          v16[5] = v12;
          if (v12)
            CFRetain(v12);
          if (v19)
            CFRelease(v19);
          if (v16 == *(_QWORD **)(DerivedStorage + 504))
            dworch_sendDidChangeLoadedTimeRangeCallback(a2, Value, v11, v15, v12);
          v20 = *(_QWORD *)(DerivedStorage + 480);
          if (*(_QWORD *)(DerivedStorage + 472) != v20 && *(_DWORD *)(DerivedStorage + 524) == 1)
          {
            *(_QWORD *)(DerivedStorage + 472) = v20;
            dworch_downloadMedia_startNextMediaSelectionDownload(a2);
          }
          break;
        }
      }
      CFRelease(v15);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void dworch_transitionToTerminalStateWithOSStatus(const void *a1, uint64_t a2)
{
  CFTypeRef cf;

  cf = 0;
  FigCreateErrorForOSStatus(a2, (CFErrorRef *)&cf);
  dworch_transitionToTerminalState(a1, (void *)cf);
  if (cf)
    CFRelease(cf);
}

uint64_t dworch_sendDidChangeLoadedTimeRangeCallback(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  uint64_t v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v11)
    return 0;
  v12 = (const void *)v11;
  v13 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
  if (v13)
  {
    v14 = v13;
    if (a1)
      v15 = CFRetain(a1);
    else
      v15 = 0;
    *v14 = v15;
    v14[1] = v12;
    if (a2)
      v16 = CFRetain(a2);
    else
      v16 = 0;
    v14[3] = v16;
    if (a3)
      v17 = CFRetain(a3);
    else
      v17 = 0;
    v14[4] = v17;
    if (a4)
      v18 = CFRetain(a4);
    else
      v18 = 0;
    v14[5] = v18;
    if (a5)
      v19 = CFRetain(a5);
    else
      v19 = 0;
    v14[6] = v19;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 280), v14, (dispatch_function_t)dworch_sendDidChangeLoadedTimeRangeOnCallbackQueue);
    return 0;
  }
  v20 = FigSignalErrorAt();
  if ((_DWORD)v20)
    CFRelease(v12);
  return v20;
}

void dworch_sendDidChangeLoadedTimeRangeOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(DerivedStorage + 224);
    if (v3)
      v3(a1[1], *a1, a1[3], a1[4], a1[5], a1[6]);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[1];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[3];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[4];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[5];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[6];
  if (v8)
    CFRelease(v8);
  free(a1);
}

void dworch_sendDidFinishDownloadForMediaSelectionCallbackOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD, _QWORD);
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 240);
    if (v3)
      v3(a1[1], *a1, a1[6]);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[1];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
  free(a1);
}

uint64_t dworch_downloadMedia_checkIfStageComplete(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  const void *ValueAtIndex;
  uint64_t v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v9;
  uint64_t SInt64;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const CFArrayCallBacks *v14;
  CFArrayRef v15;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t (*v18)(CFTypeRef, CFArrayRef, CFArrayRef *);
  __CFString *v19;
  uint64_t v20;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  const void *v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  char v30[24];
  uint64_t v31;
  char v32[40];
  uint64_t v33;
  _BYTE v34[48];
  _BYTE v35[48];
  CFTypeRef v36;
  os_log_type_t type;
  unsigned int v38;
  CFArrayRef theArray;
  CFTypeRef cf;
  int v41;
  const char *v42;
  __int16 v43;
  const void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const void *v48;
  __int16 v49;
  __CFString *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 521))
  {
    v3 = *(const __CFArray **)(DerivedStorage + 440);
    if (v3 && CFArrayGetCount(v3) >= 1)
    {
      ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
      return dworch_start(ValueAtIndex);
    }
    v6 = CMBaseObjectGetDerivedStorage();
    v36 = 0;
    CMBaseObject = FigAssetDownloaderGetCMBaseObject(*(_QWORD *)(v6 + 360));
    v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v8)
    {
      v9 = v8(CMBaseObject, CFSTR("AssetDownloaderProperty_DownloadedBytes"), *MEMORY[0x1E0C9AE00], &v36);
      if (!(_DWORD)v9)
      {
        SInt64 = FigCFNumberGetSInt64();
        dworch_sendProgressUpdateCallback(a1, SInt64, SInt64);
        FigStreamingAssetProgressMarkDownloadComplete(*(const void **)(v6 + 360));
        v11 = *(_QWORD *)(v6 + 56);
        if (v11)
        {
          FigStreamingAssetDownloadConfigGetTimeRange(v11, (uint64_t)v35);
          if ((v35[12] & 1) != 0)
          {
            FigStreamingAssetDownloadConfigGetTimeRange(*(_QWORD *)(v6 + 56), (uint64_t)v34);
            if ((v34[36] & 1) != 0)
            {
              FigStreamingAssetDownloadConfigGetTimeRange(*(_QWORD *)(v6 + 56), (uint64_t)v32);
              if (!v33)
              {
                FigStreamingAssetDownloadConfigGetTimeRange(*(_QWORD *)(v6 + 56), (uint64_t)v30);
                if ((v31 & 0x8000000000000000) == 0)
                {
LABEL_46:
                  if (dword_1EE2A2BB0)
                  {
                    LODWORD(cf) = 0;
                    LOBYTE(theArray) = 0;
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v27 = cf;
                    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)theArray))
                      v28 = v27;
                    else
                      v28 = v27 & 0xFFFFFFFE;
                    if (v28)
                    {
                      v29 = *(_QWORD *)(v6 + 32);
                      v41 = 136315650;
                      v42 = "dworch_downloadMedia_stageComplete";
                      v43 = 2048;
                      v44 = a1;
                      v45 = 2114;
                      v46 = v29;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  dworch_transitionToTerminalState(a1, 0);
                  v20 = 0;
                  goto LABEL_54;
                }
              }
            }
          }
        }
        v12 = CMBaseObjectGetDerivedStorage();
        theArray = 0;
        cf = 0;
        v9 = dworch_ensurePersistentStreamingCache((uint64_t)a1);
        if (!(_DWORD)v9)
        {
          v13 = *(const void ***)(v12 + 336);
          if (v13)
          {
            v14 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
            while (1)
            {
              v15 = CFArrayCreate(*(CFAllocatorRef *)(v12 + 8), v13 + 2, 1, v14);
              if (!v15)
              {
                v16 = FigSignalErrorAt();
LABEL_60:
                v20 = v16;
                v19 = 0;
                goto LABEL_37;
              }
              v16 = FigAlternateOfflinePlayableForMediaSelectionFilterCreate(*(void **)(v12 + 8), *(_QWORD *)(v12 + 456), (const __CFArray *)v13[3], 1, &cf);
              if ((_DWORD)v16)
                goto LABEL_60;
              v17 = cf;
              v18 = *(uint64_t (**)(CFTypeRef, CFArrayRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 24);
              if (!v18)
              {
                v19 = 0;
                v20 = 4294954514;
                goto LABEL_37;
              }
              v16 = v18(v17, v15, &theArray);
              if ((_DWORD)v16)
                goto LABEL_60;
              if (!theArray || CFArrayGetCount(theArray) != 1)
                break;
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              CFRelease(v15);
              if (theArray)
              {
                CFRelease(theArray);
                theArray = 0;
              }
              v13 = (const void **)*v13;
              if (!v13)
                goto LABEL_25;
            }
            v19 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v12 + 8), (const __CFArray *)v13[3]);
            if (dword_1EE2A2BB0)
            {
              v38 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v22 = v38;
              if (os_log_type_enabled(v21, type))
                v23 = v22;
              else
                v23 = v22 & 0xFFFFFFFE;
              if (v23)
              {
                v24 = *(_QWORD *)(v12 + 32);
                v25 = v13[2];
                v41 = 136316162;
                v42 = "dworch_downloadMedia_validateDownloadIsPlayableOffline";
                v43 = 2048;
                v44 = a1;
                v45 = 2114;
                v46 = v24;
                v47 = 2112;
                v48 = v25;
                v49 = 2112;
                v50 = v19;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v20 = 4294950639;
            }
            else
            {
              v20 = 4294950639;
            }
          }
          else
          {
LABEL_25:
            v15 = 0;
            v19 = 0;
            v20 = 0;
          }
LABEL_37:
          if (cf)
            CFRelease(cf);
          if (v15)
            CFRelease(v15);
          if (theArray)
            CFRelease(theArray);
          if (v19)
            CFRelease(v19);
          if ((_DWORD)v20)
            goto LABEL_54;
          goto LABEL_46;
        }
      }
      v20 = v9;
    }
    else
    {
      v20 = 4294954514;
    }
LABEL_54:
    if (v36)
      CFRelease(v36);
    return v20;
  }
  return 0;
}

uint64_t dworch_downloadMedia_startNextMediaSelectionDownload(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const __CFArray *Count;
  const __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t matched;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t CMBaseObject;
  uint64_t (*v22)(uint64_t, const __CFString *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, const __CFString *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, const __CFString *, uint64_t);
  void *v29;
  _QWORD *v30;
  CFTypeRef v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  const void *v37;
  void *value;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 524) != 1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = 0;
  v4 = 0;
  value = 0;
  v5 = (const void *)*MEMORY[0x1E0C9AE50];
  v37 = (const void *)*MEMORY[0x1E0C9AE40];
  while (1)
  {
    if (*(_QWORD *)(DerivedStorage + 488))
    {
      Count = *(const __CFArray **)(DerivedStorage + 464);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if ((uint64_t)Count < *(_QWORD *)(DerivedStorage + 472))
        goto LABEL_10;
    }
    if (!*(_BYTE *)(DerivedStorage + 312))
      goto LABEL_61;
    v7 = *(const __CFArray **)(DerivedStorage + 464);
    if (v7)
    {
      if (CFArrayGetCount(v7))
      {
LABEL_61:
        v11 = 0;
        v36 = 0;
        goto LABEL_62;
      }
LABEL_10:
      if (!*(_BYTE *)(DerivedStorage + 312))
      {
        v8 = *(_QWORD *)(DerivedStorage + 488);
        v4 = *(const void **)(v8 + 16);
        v3 = *(_QWORD *)(v8 + 24);
      }
    }
    v9 = CMBaseObjectGetDerivedStorage();
    Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v9 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = Mutable;
    if (Mutable)
      break;
    v34 = FigSignalErrorAt();
    if ((_DWORD)v34)
    {
      v36 = v34;
      goto LABEL_68;
    }
LABEL_31:
    matched = FigStreamingAssetDownloaderCreateWithAsset(*(const void **)(DerivedStorage + 8), *(const void **)(DerivedStorage + 16), *(const void **)(DerivedStorage + 24), v11, (CFTypeRef *)&value);
    if ((_DWORD)matched)
      goto LABEL_59;
    if (dword_1EE2A2BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    matched = FigNotificationCenterAddWeakListener();
    if ((_DWORD)matched)
      goto LABEL_59;
    CMNotificationCenterGetDefaultLocalCenter();
    matched = FigNotificationCenterAddWeakListener();
    if ((_DWORD)matched)
      goto LABEL_59;
    CMNotificationCenterGetDefaultLocalCenter();
    matched = FigNotificationCenterAddWeakListener();
    if ((_DWORD)matched)
      goto LABEL_59;
    if (v3)
    {
      CMBaseObject = FigAssetDownloaderGetCMBaseObject(value);
      v22 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (!v22)
        goto LABEL_60;
      matched = v22(CMBaseObject, CFSTR("AssetDownloaderProperty_SelectedMediaArray"), v3);
      if ((_DWORD)matched)
        goto LABEL_59;
    }
    v23 = *(_QWORD *)(DerivedStorage + 360);
    v24 = FigAssetDownloaderGetCMBaseObject(value);
    v25 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (!v25)
      goto LABEL_60;
    matched = v25(v24, CFSTR("AssetDownloaderProperty_ProgressMonitor"), v23);
    if ((_DWORD)matched)
      goto LABEL_59;
    v26 = *(_QWORD *)(DerivedStorage + 576);
    v27 = FigAssetDownloaderGetCMBaseObject(value);
    v28 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (!v28)
    {
LABEL_60:
      v36 = 4294954514;
      goto LABEL_62;
    }
    matched = v28(v27, CFSTR("AssetDownloaderProperty_ReportingAgent"), v26);
    if ((_DWORD)matched)
      goto LABEL_59;
    v29 = value;
    v30 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E00404C80A7E4uLL);
    if (v30)
    {
      if (v29)
        v31 = CFRetain(v29);
      else
        v31 = 0;
      v30[2] = v31;
    }
    else
    {
      matched = FigSignalErrorAt();
      if ((_DWORD)matched)
        goto LABEL_59;
    }
    *v30 = 0;
    v32 = *(_QWORD **)(DerivedStorage + 512);
    v30[1] = v32;
    *v32 = v30;
    *(_QWORD *)(DerivedStorage + 512) = v30;
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 464), value);
    v33 = *(_QWORD **)(DerivedStorage + 488);
    if (v33)
      *(_QWORD *)(DerivedStorage + 488) = *v33;
    matched = dworch_downloadMedia_matchMediaDownloaderToOrchestratorStatus(a1, (uint64_t)value);
    if ((_DWORD)matched)
    {
LABEL_59:
      v36 = matched;
      goto LABEL_62;
    }
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
    if (v11)
      CFRelease(v11);
  }
  if (v4)
    CFDictionarySetValue(Mutable, CFSTR("AssetDownloaderCreateOption_SelectedAlternate"), v4);
  CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_DisableCoordinatorInteraction"), v5);
  CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_enableDownloadStorageManagementInteraction"), v37);
  CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_ReleaseResourcesImmediatelyOnPause"), v5);
  v12 = *(const void **)(v9 + 288);
  if (v12)
    CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_PlaylistCache"), v12);
  if (*(_BYTE *)(v9 + 178))
    CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_DisallowsExpensiveNetworkAccess"), v5);
  if (*(_BYTE *)(v9 + 179))
    CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_DisallowsConstrainedNetworkAccess"), v5);
  v13 = *(const void **)(v9 + 32);
  if (v13)
    CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_DebugIdentifier"), v13);
  v14 = *(const void **)(v9 + 72);
  if (v14)
    CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_ClientBundleIdentifier"), v14);
  v15 = *(const void **)(v9 + 184);
  if (v15)
    CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_NetworkHistory"), v15);
  v16 = *(const void **)(v9 + 400);
  if (v16)
    CFDictionarySetValue(v11, CFSTR("AssetDownloaderCreateOption_ContentSteeringMonitor"), v16);
  v17 = *(_QWORD *)(v9 + 56);
  if (!v17)
    goto LABEL_31;
  FigStreamingAssetDownloadConfigGetTimeRange(v17, (uint64_t)v39);
  v18 = FigCFDictionarySetCMTimeRange();
  if (!(_DWORD)v18)
    goto LABEL_31;
  v36 = v18;
  CFRelease(v11);
LABEL_68:
  v11 = 0;
LABEL_62:
  if (value)
    CFRelease(value);
  if (v11)
    CFRelease(v11);
  return v36;
}

uint64_t dworch_start(const void *a1)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD *v3;
  _QWORD *v4;
  CFTypeRef v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200403A5D3213uLL);
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  if (a1)
    v5 = CFRetain(a1);
  else
    v5 = 0;
  *v4 = v5;
  dispatch_async_f(*DerivedStorage, v4, (dispatch_function_t)dworch_startDispatch);
  return 0;
}

void dworch_startDispatch(const void **a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v5;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor;
  uint64_t v10;

  v2 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    TimestampClientDidPauseOnContentSteeringMonitor = FigSignalErrorAt();
    goto LABEL_12;
  }
  v5 = *(_DWORD *)(DerivedStorage + 524);
  if (v5 > 2 || v5 == 1)
    goto LABEL_14;
  *(_DWORD *)(DerivedStorage + 524) = 1;
  *(_BYTE *)(DerivedStorage + 528) = 1;
  v7 = kDownloadOrchestratorStage_JumpTable[6 * *(unsigned int *)(DerivedStorage + 532)];
  if (!v7 || (v8 = ((uint64_t (*)(const void *))v7)(v2), !(_DWORD)v8))
  {
    if (*(_BYTE *)(DerivedStorage + 529))
      goto LABEL_14;
    TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x7FFFFFFFFFFFFFFFLL);
LABEL_12:
    v10 = TimestampClientDidPauseOnContentSteeringMonitor;
    if (!(_DWORD)TimestampClientDidPauseOnContentSteeringMonitor)
      goto LABEL_14;
    goto LABEL_13;
  }
  v10 = v8;
LABEL_13:
  dworch_transitionToTerminalStateWithOSStatus(*a1, v10);
LABEL_14:
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t dworch_selectAlternates_start()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(CFAbsoluteTime *)(DerivedStorage + 592) = CFAbsoluteTimeGetCurrent();
  v2 = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)(v2 + 560);
  if (v3)
  {
    CFRetain(v3);
    v4 = *(_QWORD *)(v2 + 560);
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v6)
    return 4294954514;
  result = v6(v5, dworch_selectAlternates_pumpTransferCallback, v4);
  if (!(_DWORD)result)
  {
    dworch_loadDuration();
    return 0;
  }
  return result;
}

uint64_t dworch_selectAlternates_pause()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_releaseDiskResources();
  dworch_relinquishAccessToDestinationURL();
  return 0;
}

uint64_t dworch_selectAlternates_stop()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_releaseDiskResources();
  dworch_relinquishAccessToDestinationURL();
  return 0;
}

uint64_t dworch_selectAlternates_pauseForInteractivePlayback()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_releaseDiskResources();
  return 0;
}

uint64_t dworch_downloadMetadata_start(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 544))
    return FigAssetDownloadCoordinatorScheduleAccessToURL(a1, *(const void **)(DerivedStorage + 24), *(NSObject **)DerivedStorage, 1, (uint64_t)dworch_downloadMetadata_gotAccessToDestinationURLCallback);
  dworch_downloadMetadata_gotAccessToDestinationURLCallback(a1, 1, *(_QWORD *)(DerivedStorage + 544));
  return 0;
}

uint64_t dworch_downloadMetadata_pause(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 408);
  if (!v3)
  {
LABEL_7:
    dworch_releaseDiskResources();
    dworch_relinquishAccessToDestinationURL();
    return 0;
  }
  v4 = DerivedStorage;
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v5)
    return 4294954514;
  result = v5(v3);
  if (!(_DWORD)result)
  {
    result = dworch_ensureTemporaryMetadataOnlyStreamingCache(a1);
    if (!(_DWORD)result)
    {
      v7 = *(_QWORD *)(v4 + 408);
      v8 = *(_QWORD *)(v4 + 288);
      CMBaseObject = FigAssetDownloaderGetCMBaseObject(v7);
      v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (v10)
      {
        result = v10(CMBaseObject, CFSTR("AssetDownloaderProperty_StreamingCache"), v8);
        if ((_DWORD)result)
          return result;
        goto LABEL_7;
      }
      return 4294954514;
    }
  }
  return result;
}

uint64_t dworch_downloadMetadata_stop()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t result;

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 408);
  if (!v0)
  {
LABEL_4:
    dworch_releaseDiskResources();
    dworch_relinquishAccessToDestinationURL();
    return 0;
  }
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v1)
  {
    result = v1(v0);
    if ((_DWORD)result)
      return result;
    goto LABEL_4;
  }
  return 4294954514;
}

uint64_t dworch_downloadMetadata_pauseForInteractivePlayback(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 408))
  {
LABEL_5:
    dworch_releaseDiskResources();
    return 0;
  }
  v3 = DerivedStorage;
  result = dworch_ensureTemporaryMetadataOnlyStreamingCache(a1);
  if ((_DWORD)result)
    return result;
  v5 = *(_QWORD *)(v3 + 408);
  v6 = *(_QWORD *)(v3 + 288);
  CMBaseObject = FigAssetDownloaderGetCMBaseObject(v5);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v8)
  {
    result = v8(CMBaseObject, CFSTR("AssetDownloaderProperty_StreamingCache"), v6);
    if ((_DWORD)result)
      return result;
    goto LABEL_5;
  }
  return 4294954514;
}

uint64_t dworch_persistMetadata_start(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 544))
    return FigAssetDownloadCoordinatorScheduleAccessToURL(a1, *(const void **)(DerivedStorage + 24), *(NSObject **)DerivedStorage, 0, (uint64_t)dworch_persistMetadata_gotAccessToDestinationURLCallback);
  dworch_persistMetadata_gotAccessToDestinationURLCallback(a1, 1, *(_QWORD *)(DerivedStorage + 544));
  return 0;
}

uint64_t dworch_downloadMedia_start(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  CFAbsoluteTime Current;
  CFDateRef v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v4 + 536)
    || (v5 = v4,
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        Current = CFAbsoluteTimeGetCurrent(),
        v8 = CFDateCreate(v6, Current),
        (*(_QWORD *)(v5 + 536) = v8) != 0)
    || (result = FigSignalErrorAt(), !(_DWORD)result))
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 544))
    {
      dworch_downloadMedia_gotAccessToDestinationURLCallback(a1, 0, *(_QWORD *)(DerivedStorage + 544));
    }
    else
    {
      result = FigAssetDownloadCoordinatorScheduleAccessToURL(a1, *(const void **)(DerivedStorage + 24), *(NSObject **)DerivedStorage, 0, (uint64_t)dworch_downloadMedia_gotAccessToDestinationURLCallback);
      if ((_DWORD)result)
        return result;
    }
    dworch_downloadMedia_symptomsReportStreamingAssetDownloadStart();
    dworch_issueReportingEvent((uint64_t)a1, 705);
    return 0;
  }
  return result;
}

uint64_t dworch_downloadMedia_pause(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t (*v6)(const void *);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 464);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), i);
    v6 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v6)
      return 4294954514;
    result = v6(ValueAtIndex);
    if ((_DWORD)result)
      return result;
  }
  result = dworch_relinquishAccessToDestinationURL();
  if (!(_DWORD)result)
  {
    FigSymptomsReportStreamingAssetDownloadPause((const unsigned __int8 *)(DerivedStorage + 600));
    dworch_issueReportingEvent(a1, 704);
    return 0;
  }
  return result;
}

uint64_t dworch_downloadMedia_stop()
{
  uint64_t DerivedStorage;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t (*v4)(const void *);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 464);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), i);
    v4 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v4)
      return 4294954514;
    result = v4(ValueAtIndex);
    if ((_DWORD)result)
      return result;
  }
  result = dworch_relinquishAccessToDestinationURL();
  if (!(_DWORD)result)
  {
    v6 = *(_QWORD *)(DerivedStorage + 576);
    if (v6)
    {
      v7 = *(unsigned int *)(DerivedStorage + 524);
      v8 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v8)
        v8(v6, CFSTR("streamingOrchestratorStats"), CFSTR("DownStatus"), v7, 0);
    }
    return 0;
  }
  return result;
}

uint64_t dworch_downloadMedia_pauseForInteractivePlayback(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t (*v6)(const void *);
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 464);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), i);
    v6 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v6)
      return 4294954514;
    result = v6(ValueAtIndex);
    if ((_DWORD)result)
      return result;
  }
  v8 = *(_QWORD *)(DerivedStorage + 576);
  if (v8)
  {
    v9 = *(unsigned __int8 *)(DerivedStorage + 529);
    v10 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v10)
      v10(v8, CFSTR("streamingOrchestratorStats"), CFSTR("PauseForInteractive"), v9, 0);
  }
  FigSymptomsReportStreamingAssetDownloadPause((const unsigned __int8 *)(DerivedStorage + 600));
  dworch_issueReportingEvent(a1, 704);
  return 0;
}

uint64_t dworch_downloadMedia_resumeFromInteractivePlayback(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t (*v7)(const void *);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(v3 + 464);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
    {
      FigSymptomsReportStreamingAssetDownloadResume((const unsigned __int8 *)(DerivedStorage + 600));
      dworch_issueReportingEvent(a1, 705);
      return 0;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 464), i);
    v7 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v7)
      break;
    result = v7(ValueAtIndex);
    if ((_DWORD)result)
      return result;
  }
  return 4294954514;
}

void dworch_selectAlternates_pumpTransferCallback(const void *a1, const void *a2, const void *a3)
{
  CFTypeRef v6;
  dispatch_queue_t *DerivedStorage;
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;

  cf = 0;
  if (dworch_copyAssetDownloaderFromRetainProxy((uint64_t)a1, &cf))
    goto LABEL_13;
  v6 = cf;
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (v8)
  {
    v9 = v8;
    if (v6)
      v10 = CFRetain(v6);
    else
      v10 = 0;
    *v9 = v10;
    if (a2)
      v11 = CFRetain(a2);
    else
      v11 = 0;
    v9[1] = v11;
    if (a3)
      v12 = CFRetain(a3);
    else
      v12 = 0;
    v9[2] = v12;
    dispatch_async_f(*DerivedStorage, v9, (dispatch_function_t)dworch_selectAlternates_pumpTransferCallbackOnQueue);
LABEL_13:
    if (!a1)
      goto LABEL_15;
    goto LABEL_14;
  }
  FigSignalErrorAt();
  if (a1)
LABEL_14:
    CFRelease(a1);
LABEL_15:
  if (cf)
    CFRelease(cf);
}

uint64_t dworch_copyAssetDownloaderFromRetainProxy(uint64_t a1, _QWORD *a2)
{
  const void *Owner;
  uint64_t v4;

  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v4 = FigSignalErrorAt();
  }
  else
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner)
      Owner = CFRetain(Owner);
    v4 = 0;
    *a2 = Owner;
  }
  FigRetainProxyUnlockMutex();
  return v4;
}

void dworch_selectAlternates_pumpTransferCallbackOnQueue(const void **a1)
{
  const void *v2;
  const void *v3;
  void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = (void *)a1[2];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_27;
  v6 = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(v6 + 524) == 1 || *(_BYTE *)(v6 + 529) || *(_BYTE *)(v6 + 528))
    && !*(_QWORD *)(DerivedStorage + 296))
  {
    if (v3)
      v7 = CFRetain(v3);
    else
      v7 = 0;
    *(_QWORD *)(DerivedStorage + 296) = v7;
    if (dword_1EE2A2BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v7 = *(CFTypeRef *)(DerivedStorage + 296);
    }
    if (v7)
    {
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 544))
      {
        dworch_selectAlternates_gotAccessToDestinationURLCallback(v2, 1, *(_QWORD *)(DerivedStorage + 544));
        goto LABEL_14;
      }
      v10 = FigAssetDownloadCoordinatorScheduleAccessToURL(v2, *(const void **)(DerivedStorage + 24), *(NSObject **)DerivedStorage, 1, (uint64_t)dworch_selectAlternates_gotAccessToDestinationURLCallback);
LABEL_17:
      v9 = v10;
      if (v4)
        goto LABEL_15;
      goto LABEL_18;
    }
LABEL_27:
    v10 = FigSignalErrorAt();
    goto LABEL_17;
  }
LABEL_14:
  v9 = 0;
  if (v4)
  {
LABEL_15:
    dworch_transitionToTerminalState(v2, v4);
    goto LABEL_20;
  }
LABEL_18:
  if ((_DWORD)v9)
    dworch_transitionToTerminalStateWithOSStatus(v2, v9);
LABEL_20:
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  if (v2)
    CFRelease(v2);
  free(a1);
}

void dworch_selectAlternates_gotAccessToDestinationURLCallback(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  uint64_t IsRegisteredForDownload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), _QWORD, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, __CFString *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, __CFString *, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, __CFString *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, __CFString *, uint64_t, void **);
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, __CFString *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, __CFString *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, __CFString *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, __CFString *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, __CFString *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, __CFString *, __CFString *);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  const __CFDictionary *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  const void *v76;
  const void *v77;
  const void *Value;
  const void *v79;
  CFDictionaryRef theDict;
  CFTypeRef v81;
  void *v82;
  CFTypeRef cf;
  CFTypeRef v84;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CFGetTypeID(a1);
  if (v7 != FigAssetDownloaderGetTypeID()
    || (*(_QWORD *)(DerivedStorage + 544) = a3,
        CMBaseObjectGetDerivedStorage(),
        FigRetainProxyIsInvalidated())
    || a2 && !a3)
  {
    IsRegisteredForDownload = FigSignalErrorAt();
    goto LABEL_90;
  }
  if (*(_DWORD *)(DerivedStorage + 524) != 1 && !*(_BYTE *)(DerivedStorage + 528))
  {
    v14 = 0;
    goto LABEL_91;
  }
  IsRegisteredForDownload = dworch_ensureAssetIsRegisteredForDownload((uint64_t)a1);
  if ((_DWORD)IsRegisteredForDownload)
  {
LABEL_90:
    v14 = IsRegisteredForDownload;
LABEL_91:
    dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
    goto LABEL_92;
  }
  v9 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v84 = 0;
  v81 = 0;
  v82 = 0;
  theDict = 0;
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  v10 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v10)
    goto LABEL_77;
  CMNotificationCenterGetDefaultLocalCenter();
  v10 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v10)
    goto LABEL_77;
  v11 = *(_QWORD *)(v9 + 296);
  v12 = *(_QWORD *)(v9 + 560);
  v13 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (!v13)
  {
    v14 = 4294954514;
LABEL_29:
    v31 = *(_QWORD *)(v9 + 296);
    v32 = *(_QWORD *)(v9 + 8);
    FigBytePumpGetFigBaseObject(v31);
    v34 = v33;
    v35 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (v35)
    {
      v35(v34, CFSTR("FBP_EndError"), v32, &v82);
      v36 = v82;
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  v14 = v13(v11, dworch_selectAlternates_bytePumpFn, 0, v12);
  if ((_DWORD)v14)
    goto LABEL_29;
  v15 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (*(_BYTE *)(v9 + 178))
  {
    FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
    v17 = v16;
    v18 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v18)
      goto LABEL_66;
    v10 = v18(v17, CFSTR("FBP_DisallowsExpensiveNetwork"), *v15);
    if ((_DWORD)v10)
      goto LABEL_77;
  }
  if (*(_BYTE *)(v9 + 179))
  {
    FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
    v20 = v19;
    v21 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v21)
      goto LABEL_66;
    v10 = v21(v20, CFSTR("FBP_DisallowsConstrainedNetwork"), *v15);
    if ((_DWORD)v10)
      goto LABEL_77;
  }
  v22 = *(_QWORD *)(v9 + 8);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
  v24 = v23;
  v25 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v25)
    v25(v24, CFSTR("FBP_SegmentCache"), v22, &cf);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
  v27 = v26;
  v28 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v28)
    goto LABEL_66;
  v10 = v28(v27, CFSTR("FBP_SegmentCache"), 0);
  if ((_DWORD)v10)
    goto LABEL_77;
  if (cf)
  {
    v10 = dworch_ensureTemporaryMetadataOnlyStreamingCache((uint64_t)a1);
    if ((_DWORD)v10)
      goto LABEL_77;
    v10 = FigStreamingCacheTransferData((uint64_t)cf, *(_QWORD *)(v9 + 288));
    if ((_DWORD)v10)
      goto LABEL_77;
  }
  if (*(_BYTE *)(v9 + 529) || !*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 544))
  {
    v10 = dworch_ensureTemporaryMetadataOnlyStreamingCache((uint64_t)a1);
    if ((_DWORD)v10)
      goto LABEL_77;
    v30 = *(_QWORD *)(v9 + 288);
    v29 = *(_QWORD *)(v9 + 296);
  }
  else
  {
    FigStreamingCacheInvalidate((uint64_t)cf);
    v10 = dworch_ensurePersistentStreamingCache((uint64_t)a1);
    if ((_DWORD)v10)
      goto LABEL_77;
    v37 = *(_QWORD *)(v9 + 288);
    if (v37)
    {
      v38 = *(_QWORD *)(v9 + 456);
      if (v38)
      {
        v10 = FigStreamingCacheTransferData(v37, v38);
        if ((_DWORD)v10)
          goto LABEL_77;
      }
    }
    v29 = *(_QWORD *)(v9 + 296);
    v30 = *(_QWORD *)(v9 + 456);
  }
  FigBytePumpGetFigBaseObject(v29);
  v40 = v39;
  v41 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v41)
    goto LABEL_66;
  v10 = v41(v40, CFSTR("FBP_SegmentCache"), v30);
  if ((_DWORD)v10)
    goto LABEL_77;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
  v43 = v42;
  v44 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v44)
    goto LABEL_66;
  v45 = *MEMORY[0x1E0C9AE40];
  v10 = v44(v43, CFSTR("FBP_RequiresCryptKeysForMediaDelivery"), *MEMORY[0x1E0C9AE40]);
  if ((_DWORD)v10)
    goto LABEL_77;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
  v47 = v46;
  v48 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v48)
    goto LABEL_66;
  v10 = v48(v47, CFSTR("FBP_EnableCryptKeyRequests"), v45);
  if ((_DWORD)v10)
    goto LABEL_77;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
  v50 = v49;
  v51 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v51)
    goto LABEL_66;
  v10 = v51(v50, CFSTR("FBP_EnableNetworkRetry"), v45);
  if ((_DWORD)v10)
    goto LABEL_77;
  v52 = *(_QWORD *)(v9 + 72);
  if (v52)
  {
    FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
    v54 = v53;
    v55 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v55)
      goto LABEL_66;
    v10 = v55(v54, CFSTR("FBP_ClientBundleIdentifier"), v52);
    if ((_DWORD)v10)
      goto LABEL_77;
  }
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
  v57 = v56;
  v58 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v58)
    goto LABEL_66;
  v10 = v58(v57, CFSTR("FBP_PumpClientName"), CFSTR("SADownloader"));
  if ((_DWORD)v10)
  {
LABEL_77:
    v14 = v10;
    goto LABEL_78;
  }
  v59 = *(_QWORD *)(v9 + 8);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
  v61 = v60;
  v62 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v62)
  {
    v62(v61, CFSTR("FBP_SessionConfiguration"), v59, &v81);
    v63 = (const __CFDictionary *)v81;
  }
  else
  {
    v63 = 0;
  }
  v64 = FigRCLGetNumberWithDefault(v63, CFSTR("mediaDownloadersMaxWidth"));
  if (v64 <= 1)
    LODWORD(v65) = 1;
  else
    LODWORD(v65) = v64;
  if (v65 >= 6)
    v65 = 6;
  else
    v65 = v65;
  *(_QWORD *)(v9 + 480) = v65;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
  v67 = v66;
  v68 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v68 || v68(v67, CFSTR("FBP_AlternateInfo"), *MEMORY[0x1E0C9AE00], &theDict) != -12783)
  {
    v76 = *(const void **)(v9 + 368);
    if (v76)
    {
      CFRelease(v76);
      *(_QWORD *)(v9 + 368) = 0;
    }
    v77 = *(const void **)(v9 + 376);
    if (v77)
    {
      CFRelease(v77);
      *(_QWORD *)(v9 + 376) = 0;
    }
    Value = CFDictionaryGetValue(theDict, CFSTR("FBPAIK_FigAlternateArray"));
    if (Value)
      Value = CFRetain(Value);
    *(_QWORD *)(v9 + 368) = Value;
    v79 = CFDictionaryGetValue(theDict, CFSTR("FBPAIK_MediaSelectionArray"));
    if (v79)
      v79 = CFRetain(v79);
    *(_QWORD *)(v9 + 376) = v79;
    goto LABEL_76;
  }
  v69 = *(_QWORD *)(v9 + 8);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v9 + 296));
  v71 = v70;
  v72 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v72)
    goto LABEL_66;
  v73 = v72(v71, CFSTR("FBP_Duration"), v69, &v84);
  if (!(_DWORD)v73)
  {
LABEL_76:
    v10 = dworch_selectAlternates_gotAlternates(a1);
    goto LABEL_77;
  }
  v14 = v73;
  if ((_DWORD)v73 == -12783)
  {
    v74 = *(_QWORD *)(v9 + 296);
    v75 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v75)
    {
      v10 = v75(v74);
      goto LABEL_77;
    }
LABEL_66:
    v36 = 0;
    v14 = 4294954514;
    goto LABEL_79;
  }
LABEL_78:
  v36 = 0;
LABEL_79:
  v82 = 0;
  if (cf)
    CFRelease(cf);
  if (theDict)
    CFRelease(theDict);
  if (v84)
    CFRelease(v84);
  if (v81)
    CFRelease(v81);
  dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
  if (v36)
  {
    dworch_transitionToTerminalState(a1, v36);
    CFRelease(v36);
    return;
  }
LABEL_92:
  if ((_DWORD)v14)
    dworch_transitionToTerminalStateWithOSStatus(a1, v14);
}

void dworch_transitionToTerminalState(const void *a1, void *a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  CFAbsoluteTime Current;
  CFDateRef v10;
  CFDateRef v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  _QWORD *v15;
  _QWORD *v16;
  CFTypeRef v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  CFTypeRef v22;
  NSObject *v23;
  void (__cdecl *v24)(void *);
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  void (*v36)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v37;
  CFErrorDomain Domain;
  CFStringRef v39;
  CFIndex Code;
  uint64_t v41;
  CFIndex v42;
  void (*v43)(uint64_t, __CFString *, __CFString *, CFIndex, _QWORD);
  uint64_t v44;
  void (*v45)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD);
  uint64_t v46;
  void (*v47)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD);
  uint64_t v48;
  double Resolution;
  double v50;
  double v51;
  uint64_t v52;
  double v53;
  void (*v54)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  void (*v55)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  const __CFString *VideoRangeString;
  const __CFString *v57;
  void (*v58)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  uint64_t v59;
  int PeakBitRate;
  int v61;
  void (*v62)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v63;
  int AverageBitRate;
  int v65;
  void (*v66)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v67;
  uint64_t CodecString;
  uint64_t v69;
  void (*v70)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v71;
  int VideoQualityIndex;
  int v73;
  void (*v74)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
    return;
  }
  if (*(_DWORD *)(DerivedStorage + 524) > 2u)
    return;
  dworch_releaseDiskResources();
  dworch_relinquishAccessToDestinationURL();
  if (a2)
  {
    if (dword_1EE2A2BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_DWORD *)(DerivedStorage + 524) = 4;
    v18 = *(_DWORD *)(DerivedStorage + 532);
    if (v18 != 2)
      ((void (*)(const void *))kDownloadOrchestratorStage_JumpTable[6 * v18 + 2])(a1);
    v19 = CMBaseObjectGetDerivedStorage();
    v20 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v20)
    {
      v14 = (const void *)v20;
      v21 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
      if (v21)
      {
        v16 = v21;
        if (a1)
          v22 = CFRetain(a1);
        else
          v22 = 0;
        *v16 = v22;
        v16[1] = v14;
        v16[2] = CFRetain(a2);
        v23 = *(NSObject **)(v19 + 280);
        v24 = (void (__cdecl *)(void *))dworch_sendDownloadFailedCallbackOnCallbackQueue;
LABEL_23:
        dispatch_async_f(v23, v16, v24);
        goto LABEL_24;
      }
LABEL_74:
      if (FigSignalErrorAt())
        CFRelease(v14);
    }
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 524) = 3;
    v6 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v6 + 72))
    {
      v7 = v6;
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Current = CFAbsoluteTimeGetCurrent();
      v10 = CFDateCreate(v8, Current);
      if (v10)
      {
        v11 = v10;
        FigAssetDownloadStorageManagementSetDownloadCompletionDateForAssetAtURL(*(const __CFURL **)(v7 + 24), *(const void **)(v7 + 72), (uint64_t)v10);
        CFRelease(v11);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    v12 = CMBaseObjectGetDerivedStorage();
    v13 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v13)
    {
      v14 = (const void *)v13;
      v15 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
      if (v15)
      {
        v16 = v15;
        if (a1)
          v17 = CFRetain(a1);
        else
          v17 = 0;
        *v16 = v17;
        v16[1] = v14;
        v23 = *(NSObject **)(v12 + 280);
        v24 = (void (__cdecl *)(void *))dworch_sendDownloadSucceededCallbackOnCallbackQueue;
        goto LABEL_23;
      }
      goto LABEL_74;
    }
  }
LABEL_24:
  FigSymptomsReportStreamingAssetDownloadEnd((const unsigned __int8 *)(DerivedStorage + 600));
  uuid_clear((unsigned __int8 *)(DerivedStorage + 600));
  if (dword_1EE2A2BB0)
  {
    v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v26 = *(_QWORD *)(DerivedStorage + 576);
  if (v26)
  {
    v27 = *(unsigned int *)(DerivedStorage + 524);
    v28 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v28)
      v28(v26, CFSTR("streamingOrchestratorStats"), CFSTR("DownStatus"), v27, 0);
  }
  v29 = *(_QWORD *)(DerivedStorage + 576);
  if (v29)
  {
    v30 = *(unsigned int *)(DerivedStorage + 532);
    v31 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v31)
      v31(v29, CFSTR("streamingOrchestratorStats"), CFSTR("DownStage"), v30, 0);
  }
  v32 = *(_QWORD *)(DerivedStorage + 576);
  v33 = CFAbsoluteTimeGetCurrent();
  if (v32)
  {
    v34 = v33;
    v35 = *(double *)(DerivedStorage + 592);
    v36 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v36)
      v36(v32, CFSTR("streamingOrchestratorStats"), CFSTR("DownloadTime"), 1000 * (uint64_t)(v34 - v35), 0);
  }
  if (a2)
  {
    v37 = CMBaseObjectGetDerivedStorage();
    Domain = CFErrorGetDomain((CFErrorRef)a2);
    v39 = CFErrorCopyDescription((CFErrorRef)a2);
    Code = CFErrorGetCode((CFErrorRef)a2);
    v41 = *(_QWORD *)(v37 + 576);
    if (v41)
    {
      v42 = Code;
      v43 = *(void (**)(uint64_t, __CFString *, __CFString *, CFIndex, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v43)
        v43(v41, CFSTR("streamingOrchestratorStats"), CFSTR("DownErrCode"), v42, 0);
      v44 = *(_QWORD *)(v37 + 576);
      if (v44)
      {
        v45 = *(void (**)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 48);
        if (v45)
          v45(v44, CFSTR("streamingOrchestratorStats"), CFSTR("DownErrDomain"), Domain, 0);
        v46 = *(_QWORD *)(v37 + 576);
        if (v46)
        {
          v47 = *(void (**)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 48);
          if (v47)
            v47(v46, CFSTR("streamingOrchestratorStats"), CFSTR("DownErrMsg"), v39, 0);
        }
      }
    }
    v48 = *(_QWORD *)(v37 + 496);
    if (!v48)
      goto LABEL_70;
    Resolution = FigAlternateGetResolution(v48);
    if (Resolution > 0.0)
    {
      v51 = v50;
      if (v50 > 0.0)
      {
        v52 = *(_QWORD *)(v37 + 576);
        if (!v52)
          goto LABEL_55;
        v53 = Resolution;
        v54 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v54)
          v54(v52, CFSTR("streamingOrchestratorStats"), CFSTR("LastReWd"), (uint64_t)v53, 0);
        v52 = *(_QWORD *)(v37 + 576);
        if (!v52)
          goto LABEL_55;
        v55 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v55)
          v55(v52, CFSTR("streamingOrchestratorStats"), CFSTR("LastReHt"), (uint64_t)v51, 0);
      }
    }
    v52 = *(_QWORD *)(v37 + 576);
LABEL_55:
    VideoRangeString = FigAlternateGetVideoRangeString(*(const __CFString **)(v37 + 496));
    if (v52)
    {
      v57 = VideoRangeString;
      v58 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v58)
        v58(v52, CFSTR("streamingOrchestratorStats"), CFSTR("LastVideoRange"), v57, 0);
    }
    v59 = *(_QWORD *)(v37 + 576);
    PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)(v37 + 496));
    if (v59)
    {
      v61 = PeakBitRate;
      v62 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v62)
        v62(v59, CFSTR("streamingOrchestratorStats"), CFSTR("LastIBR"), v61, 0);
    }
    v63 = *(_QWORD *)(v37 + 576);
    AverageBitRate = FigAlternateGetAverageBitRate(*(_QWORD *)(v37 + 496));
    if (v63)
    {
      v65 = AverageBitRate;
      v66 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v66)
        v66(v63, CFSTR("streamingOrchestratorStats"), CFSTR("LastIABR"), v65, 0);
    }
    v67 = *(_QWORD *)(v37 + 576);
    CodecString = FigAlternateGetCodecString(*(_QWORD *)(v37 + 496));
    if (v67)
    {
      v69 = CodecString;
      v70 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 48);
      if (v70)
        v70(v67, CFSTR("streamingOrchestratorStats"), CFSTR("LastCodec"), v69, 0);
    }
    v71 = *(_QWORD *)(v37 + 576);
    VideoQualityIndex = FigAlternateGetVideoQualityIndex(*(_QWORD *)(v37 + 496));
    if (v71)
    {
      v73 = VideoQualityIndex;
      v74 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v74)
        v74(v71, CFSTR("streamingOrchestratorStats"), CFSTR("LastVidQltyIndex"), v73, 0);
    }
LABEL_70:
    dworch_issueReportingEvent((uint64_t)a1, 707);
    if (v39)
      CFRelease(v39);
  }
}

uint64_t dworch_ensureAssetIsRegisteredForDownload(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  char v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = 0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 544) || *(_BYTE *)(DerivedStorage + 530))
    return 0;
  result = FigAssetDownloadCoordinatorRegisterAssetForDownloader(*(_QWORD *)(DerivedStorage + 16), a1, *(_QWORD *)(DerivedStorage + 24), *(_QWORD *)(DerivedStorage + 72), 0, &v4);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(DerivedStorage + 529) = v4;
    *(_BYTE *)(DerivedStorage + 530) = 1;
  }
  return result;
}

uint64_t dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 524) != 1 && !*(_BYTE *)(result + 529) && !*(_BYTE *)(result + 528))
  {
    dworch_releaseDiskResources();
    return dworch_relinquishAccessToDestinationURL();
  }
  return result;
}

void dworch_selectAlternates_bytePumpFn(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  int v13;
  CFTypeRef v14;
  dispatch_queue_t *DerivedStorage;
  _DWORD *v16;
  _DWORD *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef cf;

  cf = 0;
  v13 = dworch_copyAssetDownloaderFromRetainProxy(a2, &cf);
  v14 = cf;
  if (v13)
    goto LABEL_10;
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v16 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004093CA8EA1uLL);
  if (v16)
  {
    v17 = v16;
    if (v14)
      v18 = CFRetain(v14);
    else
      v18 = 0;
    *(_QWORD *)v17 = v18;
    v17[2] = a4;
    if (a12)
      v19 = CFRetain(a12);
    else
      v19 = 0;
    *((_QWORD *)v17 + 2) = v19;
    dispatch_async_f(*DerivedStorage, v17, (dispatch_function_t)dworch_selectAlternates_bytePumpFnOnQueue);
LABEL_10:
    if (!v14)
      return;
    goto LABEL_11;
  }
  FigSignalErrorAt();
  if (v14)
LABEL_11:
    CFRelease(v14);
}

uint64_t dworch_ensureTemporaryMetadataOnlyStreamingCache(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 288))
    return 0;
  else
    return dworch_createStreamingCache(a1, CFSTR("FSC_MemoryBacking"), (_QWORD *)(DerivedStorage + 288));
}

uint64_t dworch_ensurePersistentStreamingCache(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 456))
    return 0;
  else
    return dworch_createStreamingCache(a1, CFSTR("FSC_DiskBacking"), (_QWORD *)(DerivedStorage + 456));
}

uint64_t dworch_selectAlternates_gotAlternates(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, __CFString *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v21;
  const __CFArray *v22;
  CFIndex Count;
  const __CFArray *v24;
  CFIndex v25;
  uint64_t v26;
  const void *v27;
  CFArrayRef v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  _QWORD *v33;
  _QWORD *v34;
  CFTypeRef v35;
  CFTypeRef v36;
  NSObject *v37;
  const void *v38;
  const void *v39;
  const __CFArray *v40;
  uint64_t v41;
  uint64_t v42;
  CFMutableDictionaryRef v43;
  CFMutableArrayRef v44;
  CFMutableArrayRef v45;
  CFIndex v46;
  const __CFArray *ValueAtIndex;
  const __CFArray *v48;
  CFIndex v49;
  __CFArray *v50;
  CFIndex i;
  const __CFDictionary *v52;
  const void *Value;
  const void *v54;
  __CFDictionary *v55;
  CFTypeRef v56;
  const void *v57;
  const __CFArray *v58;
  _BOOL4 v59;
  NSObject *v60;
  const __CFArray *v61;
  const __CFArray *v62;
  CFIndex v63;
  CFIndex j;
  const __CFDictionary *v65;
  const void *v66;
  const __CFAllocator *v67;
  const void *v68;
  const void **v69;
  const void **v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  __CFArray *v77;
  __CFArray *v78;
  NSObject *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CFIndex v85;
  CFIndex v86;
  CFIndex v87;
  __CFString *v88;
  uint64_t PrimaryContentConfig;
  uint64_t v90;
  uint64_t v91;
  uint64_t Alternate;
  CFIndex v93;
  __CFString *v94;
  const __CFArray *AuxConfigs;
  uint64_t v96;
  CFIndex v97;
  CFIndex v98;
  CFIndex v99;
  const void *v100;
  uint64_t v101;
  const void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __CFArray *v106;
  CFIndex v107;
  const __CFArray *theArray;
  CFIndex v109;
  CFIndex v110;
  __CFDictionary *v111;
  int OptimizesAuxiliaryContentConfigurations;
  CFMutableDictionaryRef Mutable;
  CFTypeRef v114;
  uint64_t *theDict;
  CFDictionaryRef theDicta;
  void *values;
  _BYTE v118[12];
  __int16 v119;
  const void *v120;
  __int16 v121;
  uint64_t v122;
  CFTypeRef cf[2];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 392))
    return 0;
  v3 = DerivedStorage;
  *(_BYTE *)(DerivedStorage + 392) = 1;
  v4 = *(const __CFArray **)(DerivedStorage + 368);
  if (!v4 || !CFArrayGetCount(v4))
  {
    v18 = CMBaseObjectGetDerivedStorage();
    if (dword_1EE2A2BB0)
    {
      LODWORD(values) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_BYTE *)(v18 + 312) = 1;
    return dworch_selectAlternates_stageComplete((uint64_t)a1);
  }
  v5 = *(const void **)(v3 + 304);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(v3 + 304) = 0;
  }
  v6 = FigAlternateSelectionBossCreate(*(const __CFAllocator **)(v3 + 8), (_QWORD *)(v3 + 304));
  if ((_DWORD)v6)
    return v6;
  v6 = FigAlternateSelectionBossInitializeAlternateList(*(void **)(v3 + 304), *(const __CFArray **)(v3 + 368), *(const __CFArray **)(v3 + 376), 0, 0);
  if ((_DWORD)v6)
    return v6;
  v7 = *(_QWORD *)(v3 + 304);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v3 + 296));
  v9 = v8;
  v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v10)
    return 4294954514;
  v6 = v10(v9, CFSTR("FBP_AlternateSelectionBoss"), v7);
  if ((_DWORD)v6)
    return v6;
  v11 = *(_QWORD *)(v3 + 56);
  v12 = CMBaseObjectGetDerivedStorage();
  v13 = v12;
  if (!v11)
  {
    values = 0;
    CMBaseObjectGetDerivedStorage();
    if (!FigRetainProxyIsInvalidated())
    {
      v21 = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v21 + 524) != 1 && !*(_BYTE *)(v21 + 529) && !*(_BYTE *)(v21 + 528) || !*(_QWORD *)(v13 + 304))
      {
        v16 = 0;
        goto LABEL_120;
      }
      v22 = *(const __CFArray **)(v13 + 40);
      if (v22)
        Count = CFArrayGetCount(v22);
      else
        Count = 0;
      v24 = *(const __CFArray **)(v13 + 48);
      if (v24)
      {
        v25 = CFArrayGetCount(v24);
        if (Count)
          goto LABEL_72;
      }
      else
      {
        v25 = 0;
        if (Count)
          goto LABEL_72;
      }
      v26 = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(*(_QWORD *)(v13 + 376), 0, 0, 0, &values);
      if ((_DWORD)v26)
      {
LABEL_223:
        v16 = v26;
        goto LABEL_120;
      }
      v27 = *(const void **)(v13 + 40);
      if (v27)
      {
        CFRelease(v27);
        *(_QWORD *)(v13 + 40) = 0;
      }
      v28 = CFArrayCreate(*(CFAllocatorRef *)(v13 + 8), (const void **)&values, 1, MEMORY[0x1E0C9B378]);
      *(_QWORD *)(v13 + 40) = v28;
      if (v28)
      {
        v29 = values;
        v30 = CMBaseObjectGetDerivedStorage();
        v31 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v31)
        {
          v32 = (const void *)v31;
          v33 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
          if (v33)
          {
            v34 = v33;
            if (a1)
              v35 = CFRetain(a1);
            else
              v35 = 0;
            *v34 = v35;
            v34[1] = v32;
            if (v29)
              v36 = CFRetain(v29);
            else
              v36 = 0;
            v34[6] = v36;
            dispatch_async_f(*(dispatch_queue_t *)(v30 + 280), v34, (dispatch_function_t)dworch_sendDidResolveMediaSelectionCallbackOnCallbackQueue);
          }
          else if (FigSignalErrorAt())
          {
            CFRelease(v32);
          }
        }
        if (dword_1EE2A2BB0)
        {
          v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!v25)
        {
          v38 = *(const void **)(v13 + 40);
          v39 = *(const void **)(v13 + 48);
          *(_QWORD *)(v13 + 48) = v38;
          if (v38)
            CFRetain(v38);
          if (v39)
            CFRelease(v39);
        }
LABEL_72:
        v40 = *(const __CFArray **)(v13 + 40);
        v41 = CMBaseObjectGetDerivedStorage();
        theArray = v40;
        if (!v40)
        {
          v56 = 0;
          v57 = *(const void **)(v13 + 40);
          *(_QWORD *)(v13 + 40) = 0;
          if (!v57)
          {
LABEL_112:
            v58 = *(const __CFArray **)(v13 + 40);
            if (v58)
              v59 = CFArrayGetCount(v58) == 0;
            else
              v59 = 1;
            v16 = 0;
            if (v59 && dword_1EE2A2BB0)
            {
              v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v16 = 0;
            }
            goto LABEL_118;
          }
LABEL_111:
          CFRelease(v57);
          goto LABEL_112;
        }
        v42 = v41;
        theDicta = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v41 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (theDicta)
        {
          LODWORD(cf[0]) = 0;
          Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v42 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v43 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v42 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v43)
            {
              v44 = CFArrayCreateMutable(*(CFAllocatorRef *)(v42 + 8), 0, MEMORY[0x1E0C9B378]);
              if (v44)
              {
                v45 = v44;
                v111 = v43;
                v103 = v13;
                v104 = v3;
                v107 = CFArrayGetCount(theArray);
                if (v107 < 1)
                {
LABEL_99:
                  v56 = CFRetain(v45);
                  v16 = 0;
                  v50 = 0;
                }
                else
                {
                  v46 = 0;
                  v105 = v42;
                  v106 = v45;
                  while (1)
                  {
                    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v46);
                    v48 = ValueAtIndex;
                    v49 = ValueAtIndex ? CFArrayGetCount(ValueAtIndex) : 0;
                    v50 = CFArrayCreateMutable(*(CFAllocatorRef *)(v42 + 8), 0, MEMORY[0x1E0C9B378]);
                    if (!v50)
                      break;
                    v109 = v46;
                    if (v49 >= 1)
                    {
                      for (i = 0; v49 != i; ++i)
                      {
                        v52 = (const __CFDictionary *)CFArrayGetValueAtIndex(v48, i);
                        CFDictionaryGetValue(v52, CFSTR("MediaSelectionGroupMediaType"));
                        if (!FigCFStringGetOSTypeValue())
                        {
                          v16 = FigSignalErrorAt();
                          v56 = 0;
                          v13 = v103;
                          v3 = v104;
                          v43 = v111;
                          v45 = v106;
                          goto LABEL_101;
                        }
                        Value = CFDictionaryGetValue(v52, CFSTR("MediaSelectionOptionsPersistentID"));
                        v54 = Value;
                        if (LODWORD(cf[0]) == 1935832172)
                        {
                          if (Value)
                          {
                            v55 = v111;
                            goto LABEL_95;
                          }
                        }
                        else if (LODWORD(cf[0]) == 1936684398)
                        {
                          if (Value)
                          {
                            v55 = Mutable;
LABEL_95:
                            if (!CFDictionaryContainsKey(v55, Value))
                            {
                              CFDictionarySetValue(v55, v54, v52);
                              CFArrayAppendValue(v50, v52);
                            }
                          }
                        }
                        else if (LODWORD(cf[0]) == 1986618469 && Value)
                        {
                          v55 = theDicta;
                          goto LABEL_95;
                        }
                      }
                    }
                    v45 = v106;
                    CFArrayAppendValue(v106, v50);
                    CFRelease(v50);
                    v46 = v109 + 1;
                    v42 = v105;
                    if (v109 + 1 == v107)
                      goto LABEL_99;
                  }
                  v16 = FigSignalErrorAt();
                  v56 = 0;
                }
                v13 = v103;
                v3 = v104;
                v43 = v111;
                goto LABEL_101;
              }
            }
            v16 = FigSignalErrorAt();
            v56 = 0;
            v50 = 0;
            v45 = 0;
LABEL_101:
            CFRelease(theDicta);
            CFRelease(Mutable);
            if (v43)
              CFRelease(v43);
            if (v50)
              CFRelease(v50);
            if (v45)
              CFRelease(v45);
            if ((_DWORD)v16)
              goto LABEL_118;
            goto LABEL_108;
          }
          v16 = FigSignalErrorAt();
          CFRelease(theDicta);
        }
        else
        {
          v16 = FigSignalErrorAt();
        }
        v56 = 0;
        if ((_DWORD)v16)
        {
LABEL_118:
          if (v56)
            CFRelease(v56);
LABEL_120:
          if (values)
            CFRelease(values);
          if (!(_DWORD)v16)
          {
            v61 = *(const __CFArray **)(v3 + 40);
            if (!v61 || CFArrayGetCount(v61) <= 0)
              return FigSignalErrorAt();
            v62 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 40), 0);
            v63 = 0;
            if (!v62)
              goto LABEL_127;
LABEL_126:
            for (j = CFArrayGetCount(v62); ; j = 0)
            {
              if (v63 >= j)
              {
                v66 = 0;
                goto LABEL_137;
              }
              v65 = (const __CFDictionary *)CFArrayGetValueAtIndex(v62, v63);
              if (CFDictionaryGetValue(v65, CFSTR("MediaSelectionGroupMediaType")))
              {
                LODWORD(cf[0]) = 0;
                if (FigCFStringGetOSTypeValue())
                {
                  if (LODWORD(cf[0]) == 1936684398)
                    break;
                }
              }
              ++v63;
              if (v62)
                goto LABEL_126;
LABEL_127:
              ;
            }
            v66 = CFDictionaryGetValue(v65, CFSTR("MediaSelectionOptionsPersistentID"));
LABEL_137:
            *(_QWORD *)(v3 + 168) = v66;
            v67 = *(const __CFAllocator **)(v3 + 8);
            v68 = *(const void **)(v3 + 304);
            v69 = (const void **)(v3 + 320);
            v70 = (const void **)(v3 + 328);
            v71 = *(_OWORD *)(v3 + 144);
            v125 = *(_OWORD *)(v3 + 128);
            v126 = v71;
            v127 = *(_OWORD *)(v3 + 160);
            v128 = *(_QWORD *)(v3 + 176);
            v72 = *(_OWORD *)(v3 + 112);
            *(_OWORD *)cf = *(_OWORD *)(v3 + 96);
            v124 = v72;
            v6 = dworch_selectAlternates_chooseAlternatesFromCreationOptions((uint64_t)a1, v67, v68, (unsigned __int8 *)cf, (_QWORD *)(v3 + 320), (_QWORD *)(v3 + 328));
            if ((_DWORD)v6)
              return v6;
            if (*v69 || *v70)
            {
              v73 = CMBaseObjectGetDerivedStorage();
              v6 = dworch_setupDownloadItemsAndProgressMonitorForAlternate((uint64_t)a1, *(const void **)(v73 + 320), *(const __CFArray **)(v73 + 40));
              if ((_DWORD)v6)
                return v6;
              v6 = dworch_setupDownloadItemsAndProgressMonitorForAlternate((uint64_t)a1, *(const void **)(v73 + 328), *(const __CFArray **)(v73 + 48));
              if ((_DWORD)v6)
                return v6;
              if (*(_QWORD *)(v73 + 328))
                v74 = 2;
              else
                v74 = 1;
              v75 = *(_QWORD *)(v73 + 576);
              if (v75)
              {
                v76 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 56);
                if (v76)
                  v76(v75, CFSTR("streamingOrchestratorStats"), CFSTR("TotSelAlt"), v74, 0);
              }
              dworch_updateMediaSelectionsReportingKeys();
              dworch_updateAlternateInfoForReporting();
              *(_QWORD *)(v73 + 488) = *(_QWORD *)(v73 + 336);
              v77 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
              v78 = v77;
              if (*v69)
                CFArrayAppendValue(v77, *v69);
              if (*v70)
                CFArrayAppendValue(v78, *v70);
              dworch_sendWillDownloadAlternatesCallback(a1, v78);
              v16 = dworch_selectAlternates_stageComplete((uint64_t)a1);
              if (v78)
                CFRelease(v78);
            }
            else
            {
              if (dword_1EE2A2BB0)
              {
                LODWORD(values) = 0;
                v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v80 = values;
                if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                  v81 = v80;
                else
                  v81 = v80 & 0xFFFFFFFE;
                if (v81)
                {
                  v82 = *(_QWORD *)(v3 + 32);
                  *(_DWORD *)v118 = 136315650;
                  *(_QWORD *)&v118[4] = "dworch_selectAlternates_gotAlternates";
                  v119 = 2048;
                  v120 = a1;
                  v121 = 2114;
                  v122 = v82;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              return 4294950637;
            }
          }
          return v16;
        }
LABEL_108:
        v57 = *(const void **)(v13 + 40);
        *(_QWORD *)(v13 + 40) = v56;
        if (v56)
          CFRetain(v56);
        if (!v57)
          goto LABEL_112;
        goto LABEL_111;
      }
    }
    v26 = FigSignalErrorAt();
    goto LABEL_223;
  }
  theDict = (uint64_t *)(v12 + 384);
  v6 = FigStreamingAssetDownloadConfigCreate(*(_QWORD *)(v12 + 8), (uint64_t *)(v12 + 384));
  if ((_DWORD)v6)
    return v6;
  v6 = dworch_selectAlternates_installDeviceCapabilityFilters(*(const __CFAllocator **)(v13 + 8), *(_QWORD *)(v13 + 304));
  if ((_DWORD)v6)
    return v6;
  v14 = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  v15 = FigAlternateContinuousFramesOnlyFilterCreate(*(_QWORD *)(v14 + 8), cf);
  if ((_DWORD)v15)
    goto LABEL_164;
  v15 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v14 + 304), cf[0]);
  if ((_DWORD)v15)
    goto LABEL_164;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v15 = FigAlternatePreferredVideoFormatFilterCreate(*(CFAllocatorRef *)(v14 + 8), 4, 8u, cf);
  if ((_DWORD)v15)
    goto LABEL_164;
  v15 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v14 + 304), cf[0]);
  if ((_DWORD)v15)
    goto LABEL_164;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v15 = FigAlternateHighestRankingScoreFilterCreate(*(const __CFAllocator **)(v14 + 8), cf);
  if ((_DWORD)v15)
    goto LABEL_164;
  v15 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v14 + 304), cf[0]);
  if ((_DWORD)v15)
    goto LABEL_164;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v15 = FigAlternatePlaybackScoreAndBitRateFilterCreate(*(const __CFAllocator **)(v14 + 8), cf);
  if ((_DWORD)v15)
    goto LABEL_164;
  v15 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v14 + 304), cf[0]);
  if ((_DWORD)v15)
    goto LABEL_164;
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  v15 = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate(*(_QWORD *)(v14 + 8), cf);
  if ((_DWORD)v15)
  {
LABEL_164:
    v16 = v15;
    v17 = cf[0];
    goto LABEL_165;
  }
  v16 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v14 + 304), cf[0]);
  v17 = cf[0];
  if ((_DWORD)v16 || !cf[0])
  {
LABEL_165:
    if (!v17)
      goto LABEL_167;
    goto LABEL_166;
  }
  v16 = 0;
LABEL_166:
  CFRelease(v17);
LABEL_167:
  if ((_DWORD)v16)
    return v16;
  v83 = *(_QWORD *)(v13 + 56);
  cf[0] = 0;
  *(_QWORD *)v118 = 0;
  v84 = FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForPrimary(v83, (__CFArray **)cf);
  if (!(_DWORD)v84)
  {
    if (!cf[0])
    {
      v16 = 0;
      goto LABEL_179;
    }
    v85 = CFArrayGetCount((CFArrayRef)cf[0]);
    if (v85 < 1)
    {
LABEL_175:
      v16 = 0;
      goto LABEL_176;
    }
    v86 = v85;
    v87 = 0;
    while (1)
    {
      v88 = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v87);
      PrimaryContentConfig = FigStreamingAssetDownloadConfigGetPrimaryContentConfig(v83, v88);
      v84 = dworch_selectAlternates_evaluateAndCopyContentConfig((uint64_t)a1, PrimaryContentConfig, 0, 0, (CFTypeRef *)v118);
      if ((_DWORD)v84)
        break;
      v84 = FigStreamingAssetDownloadConfigSetPrimaryContentConfig(*theDict, *(CFTypeRef *)v118, v88);
      if ((_DWORD)v84)
        break;
      if (v86 == ++v87)
        goto LABEL_175;
    }
  }
  v16 = v84;
LABEL_176:
  if (cf[0])
    CFRelease(cf[0]);
LABEL_179:
  if (*(_QWORD *)v118)
    CFRelease(*(CFTypeRef *)v118);
  if ((_DWORD)v16)
    return v16;
  v90 = *(_QWORD *)(v13 + 56);
  cf[0] = 0;
  *(_QWORD *)v118 = 0;
  OptimizesAuxiliaryContentConfigurations = FigStreamingAssetDownloadConfigGetOptimizesAuxiliaryContentConfigurations(v90);
  v114 = (CFTypeRef)v90;
  v91 = FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForAux(v90, (__CFArray **)cf);
  if ((_DWORD)v91)
  {
LABEL_210:
    v16 = v91;
  }
  else
  {
    if (!cf[0])
    {
      v16 = 0;
      goto LABEL_206;
    }
    v110 = CFArrayGetCount((CFArrayRef)cf[0]);
    if (v110 >= 1)
    {
      Alternate = 0;
      v93 = 0;
      while (1)
      {
        v94 = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v93);
        AuxConfigs = (const __CFArray *)FigStreamingAssetDownloadConfigGetAuxConfigs((uint64_t)v114, v94);
        if (!OptimizesAuxiliaryContentConfigurations)
          goto LABEL_189;
        v96 = FigStreamingAssetDownloadConfigGetPrimaryContentConfig(*theDict, v94);
        if (v96)
          break;
        Alternate = 0;
        if (AuxConfigs)
        {
LABEL_190:
          v97 = CFArrayGetCount(AuxConfigs);
          if (v97 >= 1)
          {
            v98 = v97;
            v99 = 0;
            do
            {
              v100 = CFArrayGetValueAtIndex(AuxConfigs, v99);
              v101 = dworch_selectAlternates_evaluateAndCopyContentConfig((uint64_t)a1, (uint64_t)v100, Alternate, 1, (CFTypeRef *)v118);
              if ((_DWORD)v101 != -16659)
              {
                v16 = v101;
                if ((_DWORD)v101)
                  goto LABEL_203;
                v102 = *(const void **)v118;
                v91 = FigStreamingAssetDownloadConfigAddAuxConfig(*theDict, *(void **)v118, v94);
                if ((_DWORD)v91)
                  goto LABEL_210;
                if (v102)
                {
                  CFRelease(v102);
                  *(_QWORD *)v118 = 0;
                }
              }
            }
            while (v98 != ++v99);
          }
        }
LABEL_198:
        if (++v93 == v110)
          goto LABEL_202;
      }
      Alternate = FigStreamingAssetDownloadContentConfigGetAlternate(v96);
LABEL_189:
      if (AuxConfigs)
        goto LABEL_190;
      goto LABEL_198;
    }
LABEL_202:
    v16 = 0;
  }
LABEL_203:
  if (cf[0])
    CFRelease(cf[0]);
LABEL_206:
  if (*(_QWORD *)v118)
    CFRelease(*(CFTypeRef *)v118);
  if (!(_DWORD)v16)
  {
    dworch_logDownloadConfig((uint64_t)a1, CFSTR("evaluated config: "), (const void *)*theDict);
    return dworch_selectAlternates_stageComplete((uint64_t)a1);
  }
  return v16;
}

void dworch_selectAlternates_alternateListOrDurationChangedNote(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  const void *v10;
  const void *v11;
  const void *Value;
  const void *v13;
  uint64_t v14;
  CFDictionaryRef theDict;

  theDict = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    v14 = FigSignalErrorAt();
    if (!(_DWORD)v14)
      return;
    goto LABEL_24;
  }
  if (!*(_DWORD *)(DerivedStorage + 532))
  {
    v4 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v4 + 524) == 1 || *(_BYTE *)(v4 + 529) || *(_BYTE *)(v4 + 528))
    {
      v5 = *(_QWORD *)(DerivedStorage + 296);
      if (v5)
      {
        FigBytePumpGetFigBaseObject(v5);
        v7 = v6;
        v8 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
        if (v8)
        {
          if (v8(v7, CFSTR("FBP_AlternateInfo"), *MEMORY[0x1E0C9AE00], &theDict) != -12783 && theDict != 0)
          {
            v10 = *(const void **)(DerivedStorage + 368);
            if (v10)
            {
              CFRelease(v10);
              *(_QWORD *)(DerivedStorage + 368) = 0;
            }
            v11 = *(const void **)(DerivedStorage + 376);
            if (v11)
            {
              CFRelease(v11);
              *(_QWORD *)(DerivedStorage + 376) = 0;
            }
            Value = CFDictionaryGetValue(theDict, CFSTR("FBPAIK_FigAlternateArray"));
            if (Value)
              Value = CFRetain(Value);
            *(_QWORD *)(DerivedStorage + 368) = Value;
            v13 = CFDictionaryGetValue(theDict, CFSTR("FBPAIK_MediaSelectionArray"));
            if (v13)
              v13 = CFRetain(v13);
            *(_QWORD *)(DerivedStorage + 376) = v13;
          }
        }
        v14 = dworch_selectAlternates_gotAlternates(a2);
        if (theDict)
          CFRelease(theDict);
        if ((_DWORD)v14)
LABEL_24:
          dworch_transitionToTerminalStateWithOSStatus(a2, v14);
      }
    }
  }
}

void dworch_selectAlternates_bytePumpFnOnQueue(const void **a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v7;
  uint64_t v8;

  v2 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    v8 = FigSignalErrorAt();
    if ((_DWORD)v8)
      dworch_transitionToTerminalStateWithOSStatus(v2, v8);
  }
  else if (!*(_DWORD *)(DerivedStorage + 532))
  {
    v4 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v4 + 524) == 1 || *(_BYTE *)(v4 + 529) || *(_BYTE *)(v4 + 528))
    {
      if (*(_QWORD *)(DerivedStorage + 296))
      {
        if (((_BYTE)a1[1] & 2) != 0)
        {
          v5 = (void *)a1[2];
          if (v5)
          {
            if (dword_1EE2A2BB0)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v5 = (void *)a1[2];
            }
            dworch_transitionToTerminalState(v2, v5);
          }
        }
      }
    }
  }
  if (v2)
    CFRelease(v2);
  v7 = a1[2];
  if (v7)
    CFRelease(v7);
  free(a1);
}

uint64_t dworch_createStreamingCache(uint64_t a1, __CFString *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  if (!a3)
  {
    v13 = FigSignalErrorAt();
    v8 = 0;
    goto LABEL_10;
  }
  v6 = DerivedStorage;
  Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(DerivedStorage + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = Mutable;
  if (!Mutable)
  {
    v12 = FigSignalErrorAt();
LABEL_17:
    v13 = v12;
    goto LABEL_10;
  }
  if (CFSTR("FSC_DiskBacking") == a2)
    CFDictionarySetValue(Mutable, CFSTR("FSC_DownloadDestinationURL"), *(const void **)(v6 + 24));
  CFDictionarySetValue(v8, CFSTR("FSC_Backing"), a2);
  v9 = *(_QWORD *)(v6 + 8);
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v6 + 16));
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v11)
  {
    v13 = 4294954514;
    goto LABEL_10;
  }
  v12 = v11(CMBaseObject, CFSTR("assetProperty_OriginalNetworkContentURL"), v9, &cf);
  if ((_DWORD)v12)
    goto LABEL_17;
  v13 = FigStreamingCacheCreate(*(const __CFAllocator **)(v6 + 8), (const __CFURL *)cf, v8, &v15);
  if (!(_DWORD)v13)
    *a3 = v15;
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return v13;
}

void dworch_sendWillDownloadAlternatesCallback(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    v6 = (const void *)v5;
    v7 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
    if (v7)
    {
      v8 = v7;
      if (a1)
        v9 = CFRetain(a1);
      else
        v9 = 0;
      *v8 = v9;
      v8[1] = v6;
      if (a2)
        v10 = CFRetain(a2);
      else
        v10 = 0;
      v8[9] = v10;
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 280), v8, (dispatch_function_t)dworch_sendWillDownloadAlternatesOnCallbackQueue);
    }
    else if (FigSignalErrorAt())
    {
      CFRelease(v6);
    }
  }
}

uint64_t dworch_selectAlternates_stageComplete(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __CFString *, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __CFString *, _QWORD, uint64_t);
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v17;
  CFTypeRef v18;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    LODWORD(cf[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!*(_QWORD *)(DerivedStorage + 296))
    return dworch_changeStageOnQueue(a1, 1u);
  v4 = DerivedStorage;
  TimestampClientDidPauseOnContentSteeringMonitor = dworch_selectAlternates_removePumpListeners(a1);
  if ((_DWORD)TimestampClientDidPauseOnContentSteeringMonitor)
    return TimestampClientDidPauseOnContentSteeringMonitor;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v4 + 296));
  v7 = v6;
  v8 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v8)
    return 4294954514;
  TimestampClientDidPauseOnContentSteeringMonitor = v8(v7, CFSTR("FBP_SegmentCache"), 0);
  if ((_DWORD)TimestampClientDidPauseOnContentSteeringMonitor)
    return TimestampClientDidPauseOnContentSteeringMonitor;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v4 + 296));
  v10 = v9;
  v11 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (!v11)
    return 4294954514;
  v12 = *MEMORY[0x1E0C9AE00];
  TimestampClientDidPauseOnContentSteeringMonitor = v11(v10, CFSTR("FBP_ContentSteeringMonitor"), *MEMORY[0x1E0C9AE00], v4 + 400);
  if ((_DWORD)TimestampClientDidPauseOnContentSteeringMonitor)
    return TimestampClientDidPauseOnContentSteeringMonitor;
  if (*(_QWORD *)(v4 + 400))
  {
    if (dword_1EE2A2BB0)
    {
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_DWORD *)(v4 + 524) == 1 && !*(_BYTE *)(v4 + 529))
    {
      TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor(a1, 0x7FFFFFFFFFFFFFFFLL);
      if ((_DWORD)TimestampClientDidPauseOnContentSteeringMonitor)
        return TimestampClientDidPauseOnContentSteeringMonitor;
    }
  }
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v4 + 296));
  v15 = v14;
  v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
  if (!v16)
    return 4294954514;
  v17 = v16(v15, CFSTR("FBP_PlaylistCache"), v12, cf);
  v18 = cf[0];
  if (!(_DWORD)v17)
  {
    if (cf[0])
    {
      v17 = dworch_ensureTemporaryMetadataOnlyStreamingCache(a1);
      v18 = cf[0];
      if (!(_DWORD)v17)
      {
        v17 = FigStreamingCacheTransferData((uint64_t)cf[0], *(_QWORD *)(v4 + 288));
        v18 = cf[0];
      }
    }
  }
  if (v18)
    CFRelease(v18);
  if (!(_DWORD)v17)
    return dworch_changeStageOnQueue(a1, 1u);
  return v17;
}

uint64_t dworch_selectAlternates_installDeviceCapabilityFilters(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v8;
  CFTypeRef cf;
  int v10;

  v8 = 0;
  cf = 0;
  v4 = FigAlternateMediaValidationFilterCreate((uint64_t)a1, 0, &cf);
  if ((_DWORD)v4)
    goto LABEL_18;
  v4 = FigAlternateSelectionBossAddFilter(a2, cf);
  if ((_DWORD)v4)
    goto LABEL_18;
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v10 = 0;
  FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate(&v10, 0, 0);
  v4 = FigAlternateSupportedVideoRangeFilterCreate(a1, v10, &cf);
  if ((_DWORD)v4)
    goto LABEL_18;
  v4 = FigAlternateSelectionBossAddFilter(a2, cf);
  if ((_DWORD)v4)
    goto LABEL_18;
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (!PKDGetSystemCPC(&v8))
  {
    v4 = FigAlternateAllowedCPCFilterCreate(a1, v8, &cf);
    if ((_DWORD)v4)
      goto LABEL_18;
    v4 = FigAlternateSelectionBossAddFilter(a2, cf);
    if ((_DWORD)v4)
      goto LABEL_18;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  v4 = FigAlternatePreferVideoCodecsWithHardwareDecodeFilterCreate(a1, &cf);
  if ((_DWORD)v4)
  {
LABEL_18:
    v5 = v4;
    v6 = cf;
    goto LABEL_19;
  }
  v5 = FigAlternateSelectionBossAddFilter(a2, cf);
  v6 = cf;
  if (!(_DWORD)v5 && cf)
  {
    v5 = 0;
LABEL_20:
    CFRelease(v6);
    return v5;
  }
LABEL_19:
  if (v6)
    goto LABEL_20;
  return v5;
}

uint64_t dworch_selectAlternates_evaluateAndCopyContentConfig(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage;
  const void *Alternate;
  void *v12;
  void *AlternateQualifiers;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __CFArray *Mutable;
  const __CFArray *MediaSelections;
  const __CFArray *v19;
  CFIndex Count;
  CFIndex i;
  const __CFArray *ValueAtIndex;
  uint64_t SelectedMediaArrayForCriteria;
  uint64_t v24;
  __CFArray *v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  os_log_type_t type;
  int v30;
  CFTypeRef v31;
  void *value[17];

  value[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  Alternate = (const void *)FigStreamingAssetDownloadContentConfigGetAlternate(a2);
  if (Alternate)
  {
    v12 = (void *)CFRetain(Alternate);
    v31 = v12;
    AlternateQualifiers = (void *)FigStreamingAssetDownloadContentConfigGetAlternateQualifiers(a2);
    if (v12)
      goto LABEL_10;
  }
  else
  {
    v31 = 0;
    AlternateQualifiers = (void *)FigStreamingAssetDownloadContentConfigGetAlternateQualifiers(a2);
  }
  v14 = AlternateQualifiers;
  if (a3)
  {
    v15 = dworch_selectAlternates_evaluateAndCopyAlternateWithQualifiers(a1, AlternateQualifiers, a3, a4, &v31);
    v12 = (void *)v31;
    if ((_DWORD)v15)
      goto LABEL_42;
    if (v31)
      goto LABEL_10;
  }
  v15 = dworch_selectAlternates_evaluateAndCopyAlternateWithQualifiers(a1, v14, 0, a4, &v31);
  v12 = (void *)v31;
  if ((_DWORD)v15)
  {
LABEL_42:
    SelectedMediaArrayForCriteria = v15;
    if (v12)
    {
      v25 = (__CFArray *)v12;
LABEL_32:
      CFRelease(v25);
      goto LABEL_36;
    }
    goto LABEL_36;
  }
  if (v31)
  {
LABEL_10:
    v16 = CMBaseObjectGetDerivedStorage();
    value[0] = 0;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      MediaSelections = (const __CFArray *)FigStreamingAssetDownloadContentConfigGetMediaSelections(a2);
      if (!MediaSelections)
        goto LABEL_19;
      v19 = MediaSelections;
      Count = CFArrayGetCount(MediaSelections);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v19, i);
          FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(*(_QWORD *)(v16 + 376), ValueAtIndex, 0, 0, value);
          CFArrayAppendValue(Mutable, value[0]);
          if (value[0])
          {
            CFRelease(value[0]);
            value[0] = 0;
          }
        }
      }
      if (Count)
      {
        SelectedMediaArrayForCriteria = 0;
      }
      else
      {
LABEL_19:
        SelectedMediaArrayForCriteria = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(*(_QWORD *)(v16 + 376), 0, 0, 0, value);
        if ((_DWORD)SelectedMediaArrayForCriteria)
        {
          CFRelease(Mutable);
          Mutable = 0;
        }
        else
        {
          CFArrayAppendValue(Mutable, value[0]);
        }
      }
    }
    else
    {
      SelectedMediaArrayForCriteria = FigSignalErrorAt();
    }
    if (value[0])
      CFRelease(value[0]);
    if (!(_DWORD)SelectedMediaArrayForCriteria)
    {
      v24 = FigStreamingAssetDownloadContentConfigCreate(*(_QWORD *)(DerivedStorage + 8), (uint64_t *)&cf);
      if ((_DWORD)v24 || (v24 = FigStreamingAssetDownloadContentConfigSetAlternate((uint64_t)cf, v12), (_DWORD)v24))
      {
        SelectedMediaArrayForCriteria = v24;
        if (!v12)
          goto LABEL_30;
        goto LABEL_29;
      }
      SelectedMediaArrayForCriteria = FigStreamingAssetDownloadContentConfigSetMediaSelections((uint64_t)cf, Mutable);
      if (!(_DWORD)SelectedMediaArrayForCriteria)
      {
        *a5 = cf;
        cf = 0;
      }
    }
    if (!v12)
    {
LABEL_30:
      if (!Mutable)
        goto LABEL_36;
      v25 = Mutable;
      goto LABEL_32;
    }
LABEL_29:
    CFRelease(v12);
    goto LABEL_30;
  }
  if (dword_1EE2A2BB0)
  {
    v30 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  SelectedMediaArrayForCriteria = 4294950637;
LABEL_36:
  if (cf)
    CFRelease(cf);
  return SelectedMediaArrayForCriteria;
}

uint64_t dworch_selectAlternates_evaluateAndCopyAlternateWithQualifiers(uint64_t a1, void *a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  const void *PlaylistAlternateURL;
  uint64_t v11;
  char CFPreferenceNumberWithDefault;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a2 && a4)
    return 0;
  if (a3)
  {
    PlaylistAlternateURL = (const void *)FigAlternateGetPlaylistAlternateURL(a3);
    if (PlaylistAlternateURL)
    {
      v11 = FigAlternateAllowListWithURLFilterCreate(*(_QWORD *)(DerivedStorage + 8), PlaylistAlternateURL, 874, *(_BYTE *)(DerivedStorage + 552), &cf);
      if ((_DWORD)v11)
        goto LABEL_36;
      v11 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 304), cf);
      if ((_DWORD)v11)
        goto LABEL_36;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
  }
  if (a2)
  {
    v11 = FigAlternateMultipleAlternateQualifierFilterCreate(*(_QWORD *)(DerivedStorage + 8), a2, &cf);
    if ((_DWORD)v11)
      goto LABEL_36;
    v11 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 304), cf);
    if ((_DWORD)v11)
      goto LABEL_36;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  if (a4)
  {
    v11 = FigAlternateMatchesAnyClientPredicateFilterCreate(*(_QWORD *)(DerivedStorage + 8), a2, &cf);
    if ((_DWORD)v11)
      goto LABEL_36;
    v11 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 304), cf);
    if ((_DWORD)v11)
      goto LABEL_36;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  v11 = dworch_selectAlternates_chooseAppropriateAlternate(*(const void **)(DerivedStorage + 304), a5);
  if ((_DWORD)v11)
    goto LABEL_36;
  v11 = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 304), (uint64_t)CFSTR("ClientPredicatesFilter"));
  if ((_DWORD)v11)
    goto LABEL_36;
  v11 = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 304), (uint64_t)CFSTR("AllowListURLFilter"));
  if ((_DWORD)v11)
    goto LABEL_36;
  v11 = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 304), (uint64_t)CFSTR("MatchesAnyClientPredicateFilter"));
  if ((_DWORD)v11)
    goto LABEL_36;
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  v11 = FigAlternateSuppressDoVi5StereoFilterCreate(*(_QWORD *)(DerivedStorage + 8), &cf);
  if ((_DWORD)v11)
    goto LABEL_36;
  v11 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 304), cf);
  if ((_DWORD)v11)
    goto LABEL_36;
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (CFPreferenceNumberWithDefault)
  {
    v11 = FigAlternateMediaValidationForStereoVideoFilterCreate(*(_QWORD *)(DerivedStorage + 8), &cf);
    if ((_DWORD)v11)
      goto LABEL_36;
    v11 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 304), cf);
    if ((_DWORD)v11)
      goto LABEL_36;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  v11 = FigAlternateSuppressDoVi20MonoFilterCreate(*(_QWORD *)(DerivedStorage + 8), &cf);
  if ((_DWORD)v11)
  {
LABEL_36:
    v13 = v11;
    v14 = cf;
    goto LABEL_37;
  }
  v13 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 304), cf);
  v14 = cf;
  if (!(_DWORD)v13 && cf)
  {
    v13 = 0;
LABEL_38:
    CFRelease(v14);
    return v13;
  }
LABEL_37:
  if (v14)
    goto LABEL_38;
  return v13;
}

uint64_t dworch_selectAlternates_chooseAppropriateAlternate(const void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  FigAlternateSelectionLogNextFilterOperation();
  v4 = FigAlternateSelectionBossApplyFilters(a1);
  if ((_DWORD)v4)
    return v4;
  v5 = FigAlternateSelectionBossCopyProperty((uint64_t)a1, CFSTR("FilteredAlternateList"), *MEMORY[0x1E0C9AE00], &theArray);
  ValueAtIndex = theArray;
  if (!(_DWORD)v5)
  {
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
        ValueAtIndex = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (ValueAtIndex)
          ValueAtIndex = CFRetain(ValueAtIndex);
      }
    }
    *a2 = ValueAtIndex;
    ValueAtIndex = theArray;
  }
  if (ValueAtIndex)
    CFRelease(ValueAtIndex);
  return v5;
}

void dworch_sendDidResolveMediaSelectionCallbackOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD, _QWORD);
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 232);
    if (v3)
      v3(a1[1], *a1, a1[6]);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[1];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
  free(a1);
}

uint64_t dworch_setupDownloadItemsAndProgressMonitorForAlternate(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const void *ValueAtIndex;
  CFTypeRef v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  v7 = 0;
  if (a2 && a3)
  {
    v8 = DerivedStorage;
    Count = CFArrayGetCount(a3);
    if (Count < 1)
    {
LABEL_15:
      v7 = 0;
      v6 = 0;
    }
    else
    {
      v10 = Count;
      v11 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a3, v11);
        v7 = malloc_type_calloc(1uLL, 0x20uLL, 0xE00401043B4FBuLL);
        if (v7)
        {
          v7[2] = CFRetain(a2);
          v13 = ValueAtIndex ? CFRetain(ValueAtIndex) : 0;
          v7[3] = v13;
        }
        else
        {
          v16 = FigSignalErrorAt();
          if ((_DWORD)v16)
          {
            v6 = v16;
            v7 = 0;
            goto LABEL_16;
          }
        }
        v14 = FigStreamingAssetProgressMonitorRegisterAlternateAndMediaSelections(*(_QWORD *)(v8 + 360), (uint64_t)a2, (uint64_t)ValueAtIndex);
        if ((_DWORD)v14)
          break;
        v15 = *(_QWORD **)(v8 + 344);
        *v7 = 0;
        v7[1] = v15;
        *v15 = v7;
        *(_QWORD *)(v8 + 344) = v7;
        if (v10 == ++v11)
          goto LABEL_15;
      }
      v6 = v14;
    }
  }
LABEL_16:
  dworch_freeAlternateAndRenditionItem(v7);
  return v6;
}

void dworch_updateMediaSelectionsReportingKeys()
{
  uint64_t DerivedStorage;
  int v1;
  const __CFAllocator *v2;
  __CFArray *v3;
  CFMutableArrayRef v4;
  CFIndex i;
  const __CFArray *ValueAtIndex;
  const __CFArray *v7;
  CFIndex v8;
  CFIndex v9;
  CFIndex j;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const void *Value;
  const void *v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v19;
  void (*v20)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v23;
  void (*v24)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v25;
  __CFArray *v26;
  __CFArray *v27;
  uint64_t v28;
  CFIndex Count;
  const __CFArray *theArray;
  __CFArray *v31;
  __CFArray *v32;
  __CFArray *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_DWORD *)(DerivedStorage + 584);
  if (*(_BYTE *)(DerivedStorage + 569))
  {
    if (!v1)
      return;
  }
  else if (v1 != 2)
  {
    return;
  }
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    return;
  }
  v32 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  if (!v32)
  {
    FigSignalErrorAt();
    v27 = Mutable;
    goto LABEL_43;
  }
  v3 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  if (v3 && (v4 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378])) != 0)
  {
    v28 = DerivedStorage;
    theArray = *(const __CFArray **)(DerivedStorage + 40);
    v31 = v4;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, i);
          if (ValueAtIndex)
          {
            v7 = ValueAtIndex;
            v8 = CFArrayGetCount(ValueAtIndex);
            if (v8 >= 1)
            {
              v9 = v8;
              for (j = 0; j != v9; ++j)
              {
                v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, j);
                if (v11)
                {
                  v12 = v11;
                  Value = CFDictionaryGetValue(v11, CFSTR("MediaSelectionGroupMediaType"));
                  if (Value)
                    CFArrayAppendValue(Mutable, Value);
                  v14 = CFDictionaryGetValue(v12, CFSTR("MediaSelectionOptionsAudioChannelLayouts"));
                  if (v14)
                    CFArrayAppendValue(v32, v14);
                  v15 = CFDictionaryGetValue(v12, CFSTR("MediaSelectionOptionsLanguageCode"));
                  if (v15)
                    CFArrayAppendValue(v3, v15);
                  v16 = CFDictionaryGetValue(v12, CFSTR("MediaSelectionOptionsName"));
                  if (v16)
                    CFArrayAppendValue(v31, v16);
                }
              }
            }
          }
        }
      }
    }
    v17 = *(_QWORD *)(v28 + 576);
    if (!v17)
      goto LABEL_38;
    v18 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 48);
    if (v18)
      v18(v17, CFSTR("streamingOrchestratorStats"), CFSTR("MediaTypeArr"), Mutable, 0);
    v19 = *(_QWORD *)(v28 + 576);
    if (!v19)
      goto LABEL_38;
    v20 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 48);
    if (v20)
      v20(v19, CFSTR("streamingOrchestratorStats"), CFSTR("AuChnlLayoutArr"), v32, 0);
    v21 = *(_QWORD *)(v28 + 576);
    if (!v21)
      goto LABEL_38;
    v22 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 48);
    if (v22)
      v22(v21, CFSTR("streamingOrchestratorStats"), CFSTR("LangCodeArr"), v3, 0);
    v23 = *(_QWORD *)(v28 + 576);
    if (v23
      && (v24 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 48)) != 0)
    {
      v25 = v23;
      v26 = v31;
      v24(v25, CFSTR("streamingOrchestratorStats"), CFSTR("MediaNameArr"), v31, 0);
    }
    else
    {
LABEL_38:
      v26 = v31;
    }
  }
  else
  {
    FigSignalErrorAt();
    v26 = 0;
  }
  CFRelease(Mutable);
  CFRelease(v32);
  if (v3)
    CFRelease(v3);
  if (v26)
  {
    v27 = v26;
LABEL_43:
    CFRelease(v27);
  }
}

void dworch_updateAlternateInfoForReporting()
{
  const __CFAllocator *v0;
  CFMutableArrayRef v1;
  CFMutableArrayRef v2;
  CFMutableArrayRef v3;
  CFMutableArrayRef v4;
  CFMutableArrayRef v5;
  CFMutableArrayRef v6;
  CFMutableArrayRef v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;
  CFMutableArrayRef v12;
  _QWORD *v13;
  uint64_t v14;
  const __CFString *VideoRangeString;
  const void *CodecString;
  _BOOL4 BestAudioFormat;
  const __CFString *StringFromAudioFormat;
  __CFString *VideoLayoutString;
  __CFString *VideoContentTypeString;
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v23;
  void (*v24)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD);
  uint64_t v25;
  void (*v26)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v27;
  void (*v28)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v29;
  void (*v30)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD);
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD);
  uint64_t v33;
  void (*v34)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD);
  uint64_t v35;
  void (*v36)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v37;
  void (*v38)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v39;
  void (*v40)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD);
  uint64_t v41;
  void (*v42)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD);
  uint64_t v43;
  void (*v44)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v45;
  void (*v46)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v47;
  void (*v48)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v49;
  void (*v50)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  uint64_t v51;
  void (*v52)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD);
  CFMutableArrayRef v53;
  __CFArray *v54;
  __CFArray *v55;
  __CFArray *theArray;
  __CFArray *v57;
  __CFArray *v58;
  __CFArray *Mutable;
  uint64_t DerivedStorage;
  __CFArray *v61;
  __CFArray *v62;
  __CFArray *v63;
  __CFArray *v64;
  __CFArray *v65;
  __CFArray *v66;
  __CFArray *v67;
  CFMutableArrayRef v68;
  CFMutableArrayRef v69;
  CFMutableArrayRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    return;
  }
  cf = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!cf)
  {
    FigSignalErrorAt();
    v54 = Mutable;
LABEL_105:
    CFRelease(v54);
    return;
  }
  v1 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v1)
  {
    v58 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v69 = 0;
    v53 = 0;
    v6 = 0;
    v5 = 0;
    v4 = 0;
    v3 = 0;
    v2 = 0;
    goto LABEL_120;
  }
  v2 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v2)
  {
    v58 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v69 = 0;
    v53 = 0;
    v6 = 0;
    v5 = 0;
    v4 = 0;
    v3 = 0;
    goto LABEL_120;
  }
  v3 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v3)
  {
    v58 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v69 = 0;
    v53 = 0;
    v6 = 0;
    v5 = 0;
    v4 = 0;
    goto LABEL_120;
  }
  v4 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v4)
  {
    v58 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v69 = 0;
    v53 = 0;
    v6 = 0;
    v5 = 0;
    goto LABEL_120;
  }
  v5 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v5)
  {
    v58 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v69 = 0;
    v53 = 0;
    v6 = 0;
    goto LABEL_120;
  }
  v6 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v6 || (v68 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378])) == 0)
  {
    v58 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v69 = 0;
    v53 = 0;
LABEL_120:
    FigSignalErrorAt();
    v57 = 0;
    goto LABEL_80;
  }
  v7 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v7)
  {
    v58 = 0;
    v9 = 0;
    v8 = 0;
    goto LABEL_118;
  }
  v8 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v8)
  {
    v58 = 0;
    v9 = 0;
    goto LABEL_118;
  }
  v9 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v9 || (v10 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378])) == 0)
  {
    v58 = 0;
LABEL_118:
    v69 = 0;
    goto LABEL_119;
  }
  v69 = v10;
  v11 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v11)
  {
    v58 = 0;
    goto LABEL_119;
  }
  v58 = v11;
  v12 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!v12)
  {
LABEL_119:
    v53 = v68;
    goto LABEL_120;
  }
  theArray = v3;
  v57 = v12;
  v66 = v1;
  v67 = v7;
  v64 = v6;
  v65 = v9;
  v55 = v8;
  v13 = *(_QWORD **)(DerivedStorage + 336);
  if (v13)
  {
    v14 = 0;
    v62 = v4;
    v63 = v2;
    v61 = v5;
    do
    {
      FigAlternateGetPeakBitRate(v13[2]);
      FigAlternateGetAverageBitRate(v13[2]);
      VideoRangeString = FigAlternateGetVideoRangeString((const __CFString *)v13[2]);
      FigAlternateGetVideoQualityIndex(v13[2]);
      FigAlternateIsAudioOnly(v13[2]);
      FigAlternateGetResolution(v13[2]);
      CodecString = (const void *)FigAlternateGetCodecString(v13[2]);
      FigAlternateHasBinauralAudio(v13[2]);
      FigAlternateGetMaxPlayableAudioChannelCount(v13[2]);
      FigAlternateHasLosslessAudio(v13[2]);
      BestAudioFormat = FigAlternateGetBestAudioFormat(v13[2]);
      StringFromAudioFormat = FigAlternateGetStringFromAudioFormat(BestAudioFormat);
      FigAlternateGetMaxAudioSampleRate(v13[2]);
      VideoLayoutString = FigAlternateGetVideoLayoutString(v13[2]);
      VideoContentTypeString = FigAlternateGetVideoContentTypeString(v13[2]);
      FigCFArrayAppendInt();
      FigCFArrayAppendInt();
      if (VideoRangeString)
        CFArrayAppendValue(theArray, VideoRangeString);
      v2 = v63;
      FigCFArrayAppendInt();
      v4 = v62;
      FigCFArrayAppendInt();
      v5 = v61;
      FigCFArrayAppendInt();
      if (CodecString)
        CFArrayAppendValue(Mutable, CodecString);
      FigCFArrayAppendInt();
      FigCFArrayAppendInt();
      FigCFArrayAppendInt();
      if (StringFromAudioFormat)
        CFArrayAppendValue(v55, StringFromAudioFormat);
      FigCFArrayAppendInt();
      FigCFArrayAppendDouble();
      if (VideoLayoutString)
        CFArrayAppendValue(v58, VideoLayoutString);
      if (VideoContentTypeString)
        CFArrayAppendValue(v57, VideoContentTypeString);
      v13 = (_QWORD *)*v13;
      ++v14;
    }
    while (v13);
  }
  else
  {
    v14 = 0;
  }
  v21 = *(_QWORD *)(DerivedStorage + 576);
  if (v21)
  {
    v22 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    v9 = v65;
    v1 = v66;
    v8 = v55;
    v6 = v64;
    if (v22)
      v22(v21, CFSTR("streamingOrchestratorStats"), CFSTR("TotSelAlt"), v14, 0);
    v23 = *(_QWORD *)(DerivedStorage + 576);
    if (v23)
    {
      v24 = *(void (**)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 48);
      v3 = theArray;
      if (v24)
        v24(v23, CFSTR("streamingOrchestratorStats"), CFSTR("IBR"), cf, 0);
      v25 = *(_QWORD *)(DerivedStorage + 576);
      if (v25)
      {
        v26 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 48);
        if (v26)
          v26(v25, CFSTR("streamingOrchestratorStats"), CFSTR("IABR"), v66, 0);
        v27 = *(_QWORD *)(DerivedStorage + 576);
        if (v27)
        {
          v28 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 48);
          if (v28)
            v28(v27, CFSTR("streamingOrchestratorStats"), CFSTR("DisplayVideoRange"), theArray, 0);
          v29 = *(_QWORD *)(DerivedStorage + 576);
          if (v29)
          {
            v30 = *(void (**)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (v30)
              v30(v29, CFSTR("streamingOrchestratorStats"), CFSTR("VideoQltyIndex"), v2, 0);
            v31 = *(_QWORD *)(DerivedStorage + 576);
            if (v31)
            {
              v32 = *(void (**)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v32)
                v32(v31, CFSTR("streamingOrchestratorStats"), CFSTR("VarReWd"), v5, 0);
              v33 = *(_QWORD *)(DerivedStorage + 576);
              if (v33)
              {
                v34 = *(void (**)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                if (v34)
                  v34(v33, CFSTR("streamingOrchestratorStats"), CFSTR("VarReHt"), v4, 0);
                v35 = *(_QWORD *)(DerivedStorage + 576);
                if (v35)
                {
                  v36 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                  if (v36)
                    v36(v35, CFSTR("streamingOrchestratorStats"), CFSTR("Codecs"), Mutable, 0);
                  v37 = *(_QWORD *)(DerivedStorage + 576);
                  if (v37)
                  {
                    v38 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                    if (v38)
                      v38(v37, CFSTR("streamingOrchestratorStats"), CFSTR("AuOn"), v64, 0);
                    v39 = *(_QWORD *)(DerivedStorage + 576);
                    if (v39)
                    {
                      v40 = *(void (**)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                      if (v40)
                        v40(v39, CFSTR("streamingOrchestratorStats"), CFSTR("BnrlAvail"), v68, 0);
                      v41 = *(_QWORD *)(DerivedStorage + 576);
                      if (v41)
                      {
                        v42 = *(void (**)(uint64_t, __CFString *, __CFString *, CFMutableArrayRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                        if (v42)
                          v42(v41, CFSTR("streamingOrchestratorStats"), CFSTR("AuChAvail"), v69, 0);
                        v43 = *(_QWORD *)(DerivedStorage + 576);
                        if (v43)
                        {
                          v44 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                          if (v44)
                            v44(v43, CFSTR("streamingOrchestratorStats"), CFSTR("LLSAvail"), v67, 0);
                          v45 = *(_QWORD *)(DerivedStorage + 576);
                          if (v45)
                          {
                            v46 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                            if (v46)
                              v46(v45, CFSTR("streamingOrchestratorStats"), CFSTR("AuFormat"), v55, 0);
                            v47 = *(_QWORD *)(DerivedStorage + 576);
                            if (v47)
                            {
                              v48 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                              if (v48)
                                v48(v47, CFSTR("streamingOrchestratorStats"), CFSTR("AuSampleRate"), v65, 0);
                              v49 = *(_QWORD *)(DerivedStorage + 576);
                              if (v49)
                              {
                                v50 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                                if (v50)
                                  v50(v49, CFSTR("streamingOrchestratorStats"), CFSTR("VidImTag"), v58, 0);
                                v51 = *(_QWORD *)(DerivedStorage + 576);
                                if (v51)
                                {
                                  v52 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFArray *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                                  if (v52)
                                    v52(v51, CFSTR("streamingOrchestratorStats"), CFSTR("VidType"), v57, 0);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v3 = theArray;
    }
  }
  else
  {
    v9 = v65;
    v1 = v66;
    v8 = v55;
    v3 = theArray;
    v6 = v64;
  }
  v7 = v67;
  v53 = v68;
LABEL_80:
  CFRelease(Mutable);
  CFRelease(cf);
  if (v1)
    CFRelease(v1);
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  if (v53)
    CFRelease(v53);
  if (v7)
    CFRelease(v7);
  if (v69)
    CFRelease(v69);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v58)
    CFRelease(v58);
  v54 = v57;
  if (v57)
    goto LABEL_105;
}

void dworch_sendWillDownloadAlternatesOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD, _QWORD);
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else if (*(_QWORD *)(DerivedStorage + 200) == 2)
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 264);
    if (v3)
      v3(a1[1], *a1, a1[9]);
  }
  v4 = (const void *)a1[9];
  if (v4)
    CFRelease(v4);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v5 = (const void *)a1[1];
  if (v5)
    CFRelease(v5);
  free(a1);
}

uint64_t dworch_changeStageOnQueue(uint64_t a1, unsigned int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v7)();

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 532) >= a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(v5 + 532) = a2;
  if (a2 == 3)
  {
    dworch_releaseDiskResources();
    if (*(_DWORD *)(v5 + 524) != 1)
      dworch_relinquishAccessToDestinationURL();
  }
  if ((*(_DWORD *)(v5 + 524) == 1 || a2 <= 2 && *(_BYTE *)(v5 + 528))
    && (v7 = kDownloadOrchestratorStage_JumpTable[6 * *(unsigned int *)(v5 + 532)]) != 0)
  {
    return ((uint64_t (*)(uint64_t))v7)(a1);
  }
  else
  {
    return 0;
  }
}

void dworch_releaseDiskResources()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigStreamingCacheInvalidate(*(_QWORD *)(DerivedStorage + 456));
  v1 = *(const void **)(DerivedStorage + 456);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 456) = 0;
  }
}

void dworch_sendDownloadSucceededCallbackOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD);
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD))(DerivedStorage + 208);
    if (v3)
      v3(a1[1], *a1);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[1];
  if (v4)
    CFRelease(v4);
  free(a1);
}

void dworch_sendDownloadFailedCallbackOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD, _QWORD);
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 216);
    if (v3)
      v3(a1[1], *a1, a1[2]);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[2];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[1];
  if (v5)
    CFRelease(v5);
  free(a1);
}

uint64_t dworch_issueReportingEvent(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __CFString *, uint64_t, uint64_t, _QWORD);

  result = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(result + 576);
  if (v4)
  {
    result = CMBaseObjectGetVTable();
    v5 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 8);
    if (v5)
      return v5(v4, CFSTR("streamingOrchestratorStats"), a2, 1, 0);
  }
  return result;
}

void dworch_downloadMetadata_gotAccessToDestinationURLCallback(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  uint64_t IsRegisteredForDownload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  const void **v14;
  const void *v15;
  uint64_t v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const __CFString *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFDictionary *v25;
  CFIndex v26;
  CFIndex v27;
  CFIndex v28;
  __CFString *v29;
  uint64_t PrimaryContentConfig;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CFIndex Count;
  CFIndex v36;
  CFIndex v37;
  __CFString *ValueAtIndex;
  const __CFArray *AuxConfigs;
  const __CFArray *v40;
  CFIndex v41;
  CFIndex v42;
  CFIndex v43;
  const void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, const __CFString *, uint64_t);
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t CMBaseObject;
  uint64_t (*v56)(uint64_t, const __CFString *, uint64_t);
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  __CFDictionary *v60;
  uint64_t v61;
  _OWORD v62[5];
  __CFArray *v63[19];

  v63[16] = *(__CFArray **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CFGetTypeID(a1);
  if (v7 == FigAssetDownloaderGetTypeID())
  {
    *(_QWORD *)(DerivedStorage + 544) = a3;
    CMBaseObjectGetDerivedStorage();
    if (!FigRetainProxyIsInvalidated() && (!a2 || a3))
    {
      if (*(_DWORD *)(DerivedStorage + 524) != 1 && !*(_BYTE *)(DerivedStorage + 528))
      {
        dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
        return;
      }
      IsRegisteredForDownload = dworch_ensureAssetIsRegisteredForDownload((uint64_t)a1);
      if ((_DWORD)IsRegisteredForDownload)
        goto LABEL_86;
      v9 = CMBaseObjectGetDerivedStorage();
      v62[2] = xmmword_1E2F85CD8;
      v62[3] = *(_OWORD *)&off_1E2F85CE8;
      v62[4] = xmmword_1E2F85CF8;
      v62[0] = xmmword_1E2F85CB8;
      v62[1] = *(_OWORD *)&off_1E2F85CC8;
      if (*(_QWORD *)(v9 + 408))
      {
LABEL_62:
        if (*(_BYTE *)(DerivedStorage + 529) || !*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 544))
        {
          IsRegisteredForDownload = dworch_ensureTemporaryMetadataOnlyStreamingCache((uint64_t)a1);
          if ((_DWORD)IsRegisteredForDownload)
            goto LABEL_86;
          v51 = (uint64_t *)(DerivedStorage + 288);
        }
        else
        {
          IsRegisteredForDownload = dworch_ensurePersistentStreamingCache((uint64_t)a1);
          if ((_DWORD)IsRegisteredForDownload)
            goto LABEL_86;
          v52 = *(_QWORD *)(DerivedStorage + 288);
          if (v52)
          {
            v53 = *(_QWORD *)(DerivedStorage + 456);
            if (v53)
            {
              IsRegisteredForDownload = FigStreamingCacheTransferData(v52, v53);
              if ((_DWORD)IsRegisteredForDownload)
                goto LABEL_86;
            }
          }
          v51 = (uint64_t *)(DerivedStorage + 456);
        }
        v54 = *v51;
        CMBaseObject = FigAssetDownloaderGetCMBaseObject(*(_QWORD *)(DerivedStorage + 408));
        v56 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
        if (!v56)
        {
LABEL_79:
          v32 = 4294954514;
          goto LABEL_80;
        }
        IsRegisteredForDownload = v56(CMBaseObject, CFSTR("AssetDownloaderProperty_StreamingCache"), v54);
        if (!(_DWORD)IsRegisteredForDownload)
        {
          v57 = *(_QWORD *)(DerivedStorage + 408);
          v58 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v58)
          {
            v59 = v58(v57);
            goto LABEL_77;
          }
          goto LABEL_79;
        }
LABEL_86:
        v32 = IsRegisteredForDownload;
        goto LABEL_80;
      }
      v10 = v9;
      v11 = CMBaseObjectGetDerivedStorage();
      Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v11 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v13 = Mutable;
      if (Mutable)
      {
        v14 = (const void **)MEMORY[0x1E0C9AE50];
        if (*(_BYTE *)(v11 + 178))
          CFDictionarySetValue(Mutable, CFSTR("AssetDownloaderCreateOption_DisallowsExpensiveNetworkAccess"), (const void *)*MEMORY[0x1E0C9AE50]);
        if (*(_BYTE *)(v11 + 179))
          CFDictionarySetValue(v13, CFSTR("AssetDownloaderCreateOption_DisallowsConstrainedNetworkAccess"), *v14);
        v15 = *(const void **)(v11 + 32);
        if (v15)
          CFDictionarySetValue(v13, CFSTR("AssetDownloaderCreateOption_DebugIdentifier"), v15);
        if (*(_BYTE *)(v11 + 417))
          CFDictionarySetValue(v13, CFSTR("AssetDownloaderCreateOption_DownloadsInterstitialAssets"), *v14);
      }
      else
      {
        IsRegisteredForDownload = FigSignalErrorAt();
        if ((_DWORD)IsRegisteredForDownload)
          goto LABEL_86;
      }
      v16 = FigStreamingAssetMetadataDownloaderCreate((const void *)*MEMORY[0x1E0C9AE00], *(const void **)(v10 + 16), v13, *(_QWORD *)(v10 + 56), (uint64_t)a1, *(NSObject **)v10, v62, (_QWORD *)(v10 + 408));
      if ((_DWORD)v16)
        goto LABEL_58;
      if (dword_1EE2A2BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v18 = *(_QWORD *)(v10 + 360);
      v19 = FigAssetDownloaderGetCMBaseObject(*(_QWORD *)(v10 + 408));
      v20 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (!v20)
        goto LABEL_65;
      v16 = v20(v19, CFSTR("AssetDownloaderProperty_ProgressMonitor"), v18);
      if ((_DWORD)v16)
      {
LABEL_58:
        v32 = v16;
        goto LABEL_59;
      }
      if (!*(_QWORD *)(v10 + 384))
        goto LABEL_52;
      v21 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(v21 + 416))
        goto LABEL_52;
      v22 = v21;
      v23 = *(_QWORD *)(v21 + 384);
      v63[0] = 0;
      v24 = FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForPrimary(v23, v63);
      if ((_DWORD)v24)
      {
        v32 = v24;
      }
      else
      {
        if (!v63[0])
        {
LABEL_36:
          v33 = *(_QWORD *)(v22 + 384);
          v63[0] = 0;
          v34 = FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForAux(v33, v63);
          if ((_DWORD)v34)
          {
            v32 = v34;
            goto LABEL_49;
          }
          if (v63[0])
          {
            Count = CFArrayGetCount(v63[0]);
            if (Count < 1)
            {
              v32 = 0;
            }
            else
            {
              v36 = Count;
              v60 = v13;
              v61 = DerivedStorage;
              v37 = 0;
              while (1)
              {
                ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v63[0], v37);
                AuxConfigs = (const __CFArray *)FigStreamingAssetDownloadConfigGetAuxConfigs(v33, ValueAtIndex);
                if (AuxConfigs)
                {
                  v40 = AuxConfigs;
                  v41 = CFArrayGetCount(AuxConfigs);
                  if (v41 >= 1)
                    break;
                }
LABEL_45:
                if (++v37 == v36)
                {
                  v32 = 0;
                  goto LABEL_47;
                }
              }
              v42 = v41;
              v43 = 0;
              while (1)
              {
                v44 = CFArrayGetValueAtIndex(v40, v43);
                v45 = dworch_setupDownloadItemsForContentConfig((uint64_t)a1, (uint64_t)v44);
                if ((_DWORD)v45)
                  break;
                if (v42 == ++v43)
                  goto LABEL_45;
              }
              v32 = v45;
LABEL_47:
              v13 = v60;
              DerivedStorage = v61;
            }
LABEL_49:
            if (v63[0])
              CFRelease(v63[0]);
            if (!(_DWORD)v32)
              goto LABEL_52;
LABEL_59:
            if (!v13)
              goto LABEL_61;
            goto LABEL_60;
          }
LABEL_52:
          v46 = (_QWORD *)(v10 + 336);
          while (1)
          {
            v46 = (_QWORD *)*v46;
            v47 = *(_QWORD *)(v10 + 408);
            if (!v46)
              break;
            v16 = FigStreamingAssetMetadataDownloaderConfigureMediaSelectionsForAlternate(v47, v46[2], v46[3]);
            if ((_DWORD)v16)
              goto LABEL_58;
          }
          v48 = *(_QWORD *)(v10 + 576);
          v49 = FigAssetDownloaderGetCMBaseObject(v47);
          v50 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
          if (v50)
          {
            v16 = v50(v49, CFSTR("AssetDownloaderProperty_ReportingAgent"), v48);
            goto LABEL_58;
          }
LABEL_65:
          v32 = 4294954514;
          if (!v13)
          {
LABEL_61:
            if ((_DWORD)v32)
            {
LABEL_80:
              dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
              goto LABEL_81;
            }
            goto LABEL_62;
          }
LABEL_60:
          CFRelease(v13);
          goto LABEL_61;
        }
        v25 = v13;
        v26 = CFArrayGetCount(v63[0]);
        if (v26 < 1)
        {
LABEL_31:
          v32 = 0;
        }
        else
        {
          v27 = v26;
          v28 = 0;
          while (1)
          {
            v29 = (__CFString *)CFArrayGetValueAtIndex(v63[0], v28);
            PrimaryContentConfig = FigStreamingAssetDownloadConfigGetPrimaryContentConfig(v23, v29);
            v31 = dworch_setupDownloadItemsForContentConfig((uint64_t)a1, PrimaryContentConfig);
            if ((_DWORD)v31)
              break;
            if (v27 == ++v28)
              goto LABEL_31;
          }
          v32 = v31;
        }
        v13 = v25;
      }
      if (v63[0])
        CFRelease(v63[0]);
      if ((_DWORD)v32)
        goto LABEL_59;
      goto LABEL_36;
    }
  }
  v59 = FigSignalErrorAt();
LABEL_77:
  v32 = v59;
  dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
  if ((_DWORD)v32)
LABEL_81:
    dworch_transitionToTerminalStateWithOSStatus(a1, v32);
}

uint64_t dworch_downloadMetadata_downloadSuccededCallback()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void dworch_downloadMetadata_downloadFailedCallback(const void *a1, uint64_t a2, void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_transitionToTerminalState(a1, a3);
}

void dworch_downloadMetadata_didFinishLoadingMetadata(const void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  _QWORD *v6;
  _QWORD *v7;
  CFTypeRef v8;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = (const void *)v4;
    v6 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
    if (v6)
    {
      v7 = v6;
      if (a1)
        v8 = CFRetain(a1);
      else
        v8 = 0;
      *v7 = v8;
      v7[1] = v5;
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 280), v7, (dispatch_function_t)dworch_sendDidFinishLoadingMetadataOnCallbackQueue);
    }
    else if (FigSignalErrorAt())
    {
      CFRelease(v5);
    }
  }
}

void dworch_downloadMetadata_didFinishLoadingPlaylistsCallback(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  int v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  CFArrayRef v15;
  int Count;
  uint64_t v17;
  const __CFArray *v18;
  uint64_t v19;
  uint64_t v20;
  const __CFAllocator *v21;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v23;
  const __CFAllocator *v24;
  __CFDictionary *MutableCopy;
  __CFDictionary *v26;
  const __CFAllocator *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, const __CFString *);
  int v30;
  const void *v31;
  CFMutableDictionaryRef v32;
  __CFDictionary *v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  CFIndex v39;
  CFIndex v40;
  const void *v41;
  uint64_t ValueAtIndex;
  uint64_t v43;
  CFTypeRef *v44;
  const __CFArray *v45;
  CFIndex v46;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  CFIndex v52;
  const __CFURL *v53;
  CFTypeRef v54;
  int v55;
  uint64_t v56;
  NSObject *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  CFIndex v61;
  NSObject *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  CFIndex i;
  void *v67;
  dispatch_queue_t *v68;
  const __CFArray *v69;
  uint64_t v70;
  CFIndex v71;
  __CFDictionary *v72;
  CFTypeRef v73;
  const void *v74;
  __CFDictionary *v75;
  CFArrayRef theArray;
  os_log_type_t v77;
  unsigned int v78;
  CFTypeRef v79;
  os_log_type_t type[8];
  CFTypeRef v81;
  _BYTE cf[12];
  __int16 v83;
  const void *v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  _BYTE v88[14];
  __int16 v89;
  int v90;
  void *value[18];

  value[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  if (dword_1EE2A2BB0)
  {
    LODWORD(v81) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(DerivedStorage + 529) && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 544))
  {
    if (!*(_QWORD *)(DerivedStorage + 456))
    {
LABEL_132:
      v6 = FigSignalErrorAt();
      goto LABEL_26;
    }
    v6 = dworch_ensureTemporaryMetadataOnlyStreamingCache((uint64_t)a1);
    if ((_DWORD)v6)
      goto LABEL_26;
    v6 = FigStreamingCacheTransferData(*(_QWORD *)(DerivedStorage + 456), *(_QWORD *)(DerivedStorage + 288));
    if ((_DWORD)v6)
      goto LABEL_26;
  }
  if (!*(_QWORD *)(DerivedStorage + 288))
    goto LABEL_132;
  if (!*(_BYTE *)(DerivedStorage + 417))
    goto LABEL_25;
  AllocatorForMedia = FigGetAllocatorForMedia();
  CMBaseObject = FigAssetDownloaderGetCMBaseObject(a2);
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v9)
    v10 = v9(CMBaseObject, CFSTR("AssetDownloaderProperty_InterstitialEvents"), AllocatorForMedia, &theArray);
  else
    v10 = -12782;
  if (dword_1EE2A2BB0)
  {
    LODWORD(v81) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v12 = v81;
    if (os_log_type_enabled(v11, type[0]))
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFE;
    if (v13)
    {
      v14 = *(_QWORD *)(DerivedStorage + 32);
      v15 = theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      else
        Count = 0;
      *(_DWORD *)cf = 136316418;
      *(_QWORD *)&cf[4] = "dworch_downloadMetadata_didFinishLoadingPlaylistsCallback";
      v83 = 2048;
      v84 = a1;
      v85 = 2114;
      v86 = v14;
      v87 = 2048;
      *(_QWORD *)v88 = v15;
      *(_WORD *)&v88[8] = 1024;
      *(_DWORD *)&v88[10] = Count;
      v89 = 1024;
      v90 = v10;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v10 || !theArray || CFArrayGetCount(theArray) < 1)
  {
LABEL_25:
    v6 = dworch_downloadMetadata_stageComplete((uint64_t)a1);
LABEL_26:
    v17 = v6;
    goto LABEL_27;
  }
  v18 = theArray;
  v19 = CMBaseObjectGetDerivedStorage();
  v20 = CMBaseObjectGetDerivedStorage();
  value[0] = 0;
  *(_QWORD *)cf = 0;
  v21 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v23 = Mutable;
    v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
    MutableCopy = CFDictionaryCreateMutableCopy(v24, 0, *(CFDictionaryRef *)(v20 + 64));
    if (!MutableCopy)
    {
      v73 = 0;
      v32 = 0;
      v33 = 0;
LABEL_50:
      CFRelease(v23);
      if (*(_QWORD *)cf)
        CFRelease(*(CFTypeRef *)cf);
      goto LABEL_115;
    }
    v26 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, CFSTR("AssetDownloaderCreateOption_DownloadsInterstitialAssets"));
    if (*(_QWORD *)(v20 + 56))
    {
      v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
      if (FigStreamingAssetDownloadConfigCreateCopy(v27, *(_QWORD *)(v20 + 56), (uint64_t *)cf))
        goto LABEL_48;
      if (*(_QWORD *)cf)
        FigStreamingAssetDownloadConfigSetDownloadsInterstitialAssets(*(uint64_t *)cf, 0);
    }
    v28 = FigAssetGetCMBaseObject(*(_QWORD *)(v20 + 16));
    v29 = *(uint64_t (**)(uint64_t, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v29)
    {
      v74 = (const void *)*MEMORY[0x1E0C9AE00];
      v30 = v29(v28, CFSTR("assetProperty_CustomURLLoader"));
      v31 = value[0];
      if (v30)
      {
        v73 = 0;
        v32 = 0;
        v75 = 0;
        if (value[0])
LABEL_45:
          CFRelease(v31);
      }
      else
      {
        if (value[0])
        {
          CFDictionarySetValue(v23, CFSTR("assetOption_CustomURLLoader"), value[0]);
          v31 = value[0];
        }
        v73 = *(CFTypeRef *)cf;
        v32 = v23;
        v75 = v26;
        if (v31)
          goto LABEL_45;
      }
      if (v30)
      {
        v33 = v75;
LABEL_49:
        CFRelease(v26);
        goto LABEL_50;
      }
      v72 = v32;
      if (dword_1EE2A2BB0)
      {
        LODWORD(v81) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v35 = v81;
        if (os_log_type_enabled(v34, type[0]))
          v36 = v35;
        else
          v36 = v35 & 0xFFFFFFFE;
        if (v36)
        {
          v37 = *(_QWORD *)(v19 + 32);
          if (v18)
            v38 = CFArrayGetCount(v18);
          else
            v38 = 0;
          *(_DWORD *)cf = 136315906;
          *(_QWORD *)&cf[4] = "dworch_createDownloadOrchestratorsForInterstitialEvents";
          v83 = 2048;
          v84 = a1;
          v85 = 2114;
          v86 = v37;
          v87 = 1024;
          *(_DWORD *)v88 = v38;
          _os_log_send_and_compose_impl();
          v32 = v72;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v39 = 0;
      v69 = v18;
      v70 = DerivedStorage;
LABEL_64:
      if (v18)
        v40 = CFArrayGetCount(v18);
      else
        v40 = 0;
      v41 = v73;
      if (v39 >= v40)
      {
        DerivedStorage = v70;
        goto LABEL_114;
      }
      v71 = v39;
      ValueAtIndex = FigCFArrayGetValueAtIndex();
      v43 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)type = 0;
      v81 = 0;
      v79 = 0;
      v44 = FigPlayerInterstitialEventCopyInterstitialAssetURLs(ValueAtIndex);
      v45 = (const __CFArray *)v44;
      if (v44)
        v46 = CFArrayGetCount((CFArrayRef)v44);
      else
        v46 = 0;
      if (dword_1EE2A2BB0)
      {
        v78 = 0;
        v77 = OS_LOG_TYPE_DEFAULT;
        v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v48 = v78;
        if (os_log_type_enabled(v47, v77))
          v49 = v48;
        else
          v49 = v48 & 0xFFFFFFFE;
        if (v49)
        {
          v50 = *(_QWORD *)(v43 + 32);
          *(_DWORD *)cf = 136316162;
          *(_QWORD *)&cf[4] = "dworch_createDownloadOrchestratorForInterstitialEvent";
          v83 = 2048;
          v84 = a1;
          v85 = 2114;
          v86 = v50;
          v87 = 1024;
          *(_DWORD *)v88 = v46;
          *(_WORD *)&v88[4] = 2048;
          *(_QWORD *)&v88[6] = ValueAtIndex;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v46 < 1)
      {
        v51 = 0;
        v32 = v72;
        goto LABEL_103;
      }
      v51 = 0;
      v52 = 0;
      v32 = v72;
      while (1)
      {
        v53 = (const __CFURL *)CFArrayGetValueAtIndex(v45, v52);
        v54 = FigCFHTTPCreateURLString(v53);
        if (!CFSetContainsValue(*(CFSetRef *)(v43 + 432), v54))
        {
          v55 = FigStreamingCacheAddInterstitialAsset(*(_QWORD *)(v43 + 456), (uint64_t)v54, &v79);
          if (v55
            || (v56 = FigGetAllocatorForMedia(), (v55 = FigAssetCreateWithURL(v56, (uint64_t)v53, 0, v32, &v81)) != 0))
          {
            v51 = v55;
            if (v54)
              CFRelease(v54);
LABEL_103:
            if (v45)
              CFRelease(v45);
            DerivedStorage = v70;
            if (v79)
              CFRelease(v79);
            v18 = v69;
            if (v81)
              CFRelease(v81);
            v39 = v71 + 1;
            if (v51)
            {
LABEL_114:
              v33 = v75;
              goto LABEL_115;
            }
            goto LABEL_64;
          }
          v51 = FigStreamingAssetDownloadOrchestratorCreate(v74, v81, v79, *(const void **)(v43 + 40), *(const void **)(v43 + 48), v75, v41, (uint64_t)a1, *(dispatch_object_t *)v43, dworch_createDownloadOrchestratorForInterstitialEvent_kStreamingAssetDownloadOrchestratorInterstititialCallbacks, type);
          if (!v51)
          {
            if (dword_1EE2A2BB0)
            {
              v78 = 0;
              v77 = OS_LOG_TYPE_DEFAULT;
              v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v58 = v78;
              if (os_log_type_enabled(v57, v77))
                v59 = v58;
              else
                v59 = v58 & 0xFFFFFFFE;
              if (v59)
              {
                v60 = *(_QWORD *)(v43 + 32);
                *(_DWORD *)cf = 136315906;
                *(_QWORD *)&cf[4] = "dworch_createDownloadOrchestratorForInterstitialEvent";
                v83 = 2048;
                v84 = a1;
                v85 = 2114;
                v86 = v60;
                v87 = 2048;
                *(_QWORD *)v88 = *(_QWORD *)type;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v32 = v72;
              v41 = v73;
            }
            CFSetAddValue(*(CFMutableSetRef *)(v43 + 432), v54);
            CFArrayAppendValue(*(CFMutableArrayRef *)(v43 + 440), *(const void **)type);
          }
          if (*(_QWORD *)type)
          {
            CFRelease(*(CFTypeRef *)type);
            *(_QWORD *)type = 0;
          }
          if (v79)
          {
            CFRelease(v79);
            v79 = 0;
          }
          if (v81)
          {
            CFRelease(v81);
            v81 = 0;
          }
        }
        if (v54)
          CFRelease(v54);
        if (v46 == ++v52)
          goto LABEL_103;
      }
    }
LABEL_48:
    v73 = 0;
    v32 = 0;
    v33 = 0;
    goto LABEL_49;
  }
  v73 = 0;
  v32 = 0;
  v33 = 0;
LABEL_115:
  if (v73)
    CFRelease(v73);
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  v61 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 440));
  if (dword_1EE2A2BB0)
  {
    LODWORD(v81) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v63 = v81;
    if (os_log_type_enabled(v62, type[0]))
      v64 = v63;
    else
      v64 = v63 & 0xFFFFFFFE;
    if (v64)
    {
      v65 = *(_QWORD *)(DerivedStorage + 32);
      *(_DWORD *)cf = 136315906;
      *(_QWORD *)&cf[4] = "dworch_downloadMetadata_didFinishLoadingPlaylistsCallback";
      v83 = 2048;
      v84 = a1;
      v85 = 2114;
      v86 = v65;
      v87 = 1024;
      *(_DWORD *)v88 = v61;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v61 >= 1)
  {
    for (i = 0; i != v61; ++i)
    {
      v67 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 440), i);
      v68 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      value[0] = v67;
      value[1] = 0;
      dispatch_sync_f(*v68, value, (dispatch_function_t)dworch_loadMetadataDispatch);
    }
  }
  v17 = 0;
LABEL_27:
  if (theArray)
    CFRelease(theArray);
  if ((_DWORD)v17)
    dworch_transitionToTerminalStateWithOSStatus(a1, v17);
}

void dworch_sendDidFinishLoadingMetadataOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD);
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD))(DerivedStorage + 248);
    if (v3)
      v3(a1[1], *a1);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[1];
  if (v4)
    CFRelease(v4);
  free(a1);
}

uint64_t dworch_loadMetadata(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)dworch_loadMetadataDispatch);
  return v5;
}

uint64_t dworch_downloadMetadata_stageComplete(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)(DerivedStorage + 456))
    v4 = 3;
  else
    v4 = 2;
  return dworch_changeStageOnQueue(a1, v4);
}

void dworch_interstitialDownloadSuccessCallback(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigCFArrayGetValueAtIndex() == a2)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 440), 0);
    v6 = dworch_downloadMedia_checkIfStageComplete(a1);
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  if ((_DWORD)v6)
    dworch_transitionToTerminalStateWithOSStatus(a1, v6);
}

void dworch_interstitialDownloadFailureCallback(const void *a1, uint64_t a2, void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_transitionToTerminalState(a1, a3);
}

void dworch_interstitialDidFinishLoadingMetadata(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *Count;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  Count = *(const __CFArray **)(DerivedStorage + 440);
  v5 = *(_QWORD *)(DerivedStorage + 448) + 1;
  *(_QWORD *)(DerivedStorage + 448) = v5;
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if (v5 >= (uint64_t)Count)
  {
    v6 = dworch_downloadMetadata_stageComplete((uint64_t)a1);
    if ((_DWORD)v6)
      dworch_transitionToTerminalStateWithOSStatus(a1, v6);
  }
}

void dworch_loadMetadataDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v5)();
  uint64_t v6;
  int v7;

  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated() || *(_DWORD *)(DerivedStorage + 524) >= 3u)
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    if (*(_BYTE *)(DerivedStorage + 528)
      || (*(_BYTE *)(DerivedStorage + 528) = 1,
          (v5 = kDownloadOrchestratorStage_JumpTable[6 * *(unsigned int *)(DerivedStorage + 532)]) == 0))
    {
      v7 = 0;
      goto LABEL_11;
    }
    v6 = ((uint64_t (*)(const void *))v5)(v2);
  }
  v7 = v6;
  if ((_DWORD)v6)
    dworch_transitionToTerminalStateWithOSStatus(*(const void **)a1, v6);
LABEL_11:
  *(_DWORD *)(a1 + 8) = v7;
}

uint64_t dworch_setupDownloadItemsForContentConfig(uint64_t a1, uint64_t a2)
{
  uint64_t Alternate;
  const void *v5;
  const __CFArray *MediaSelections;

  Alternate = FigStreamingAssetDownloadContentConfigGetAlternate(a2);
  if (Alternate
    && (v5 = (const void *)Alternate,
        (MediaSelections = (const __CFArray *)FigStreamingAssetDownloadContentConfigGetMediaSelections(a2)) != 0))
  {
    return dworch_setupDownloadItemsAndProgressMonitorForAlternate(a1, v5, MediaSelections);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void dworch_persistMetadata_gotAccessToDestinationURLCallback(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  uint64_t IsRegisteredForDownload;
  uint64_t v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CFGetTypeID(a1);
  if (v7 != FigAssetDownloaderGetTypeID()
    || (*(_QWORD *)(DerivedStorage + 544) = a3,
        CMBaseObjectGetDerivedStorage(),
        FigRetainProxyIsInvalidated())
    || !a2)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_16;
  }
  if (*(_DWORD *)(DerivedStorage + 524) != 1 && !*(_BYTE *)(DerivedStorage + 528))
    goto LABEL_21;
  IsRegisteredForDownload = dworch_ensureAssetIsRegisteredForDownload((uint64_t)a1);
  if ((_DWORD)IsRegisteredForDownload)
    goto LABEL_19;
  if (*(_BYTE *)(DerivedStorage + 529))
  {
LABEL_21:
    dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
    return;
  }
  IsRegisteredForDownload = dworch_ensurePersistentStreamingCache((uint64_t)a1);
  if (!(_DWORD)IsRegisteredForDownload)
  {
    IsRegisteredForDownload = (uint64_t)dworch_ensureExtendedAttributesSetOnDestinationURL();
    if (!(_DWORD)IsRegisteredForDownload)
    {
      v9 = *(_QWORD *)(DerivedStorage + 288);
      if (!v9
        || (v10 = *(_QWORD *)(DerivedStorage + 456)) == 0
        || (IsRegisteredForDownload = FigStreamingCacheTransferData(v9, v10), !(_DWORD)IsRegisteredForDownload))
      {
        CMBaseObjectGetDerivedStorage();
        if (dword_1EE2A2BB0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v12 = dworch_changeStageOnQueue((uint64_t)a1, 3u);
LABEL_16:
        v13 = v12;
        dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
        if (!(_DWORD)v13)
          return;
        goto LABEL_17;
      }
    }
  }
LABEL_19:
  v13 = IsRegisteredForDownload;
  dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
LABEL_17:
  dworch_transitionToTerminalStateWithOSStatus(a1, v13);
}

const void *dworch_ensureExtendedAttributesSetOnDestinationURL()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *result;
  const void *v4;
  const __CFData *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = *(_QWORD *)(DerivedStorage + 80);
  if (v2)
  {
    result = (const void *)FigSetNameForAssetAtURL(*(const __CFURL **)(DerivedStorage + 24), v2);
    if ((_DWORD)result)
      return result;
    v4 = *(const void **)(v1 + 80);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v1 + 80) = 0;
    }
  }
  v5 = *(const __CFData **)(v1 + 88);
  if (v5)
  {
    result = (const void *)FigSetImageDataForAssetAtURL(*(const __CFURL **)(v1 + 24), v5);
    if ((_DWORD)result)
      return result;
    v6 = *(const void **)(v1 + 88);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v1 + 88) = 0;
    }
  }
  v7 = *(const void **)(v1 + 72);
  if (!v7 || !*(_QWORD *)(v1 + 536))
    return 0;
  FigAssetDownloadStorageManagementSetContentTypeForAssetAtURL(*(const __CFURL **)(v1 + 24), v7, CFSTR("CacheManagementContentType_DownloadedAsset"));
  FigAssetDownloadStorageManagementSetDownloadStartDateForAssetAtURL(*(const __CFURL **)(v1 + 24), *(const void **)(v1 + 72), *(_QWORD *)(v1 + 536));
  result = *(const void **)(v1 + 536);
  if (result)
  {
    CFRelease(result);
    result = 0;
    *(_QWORD *)(v1 + 536) = 0;
  }
  return result;
}

uint64_t dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 524) != 1 && !*(_BYTE *)(result + 529))
  {
    dworch_releaseDiskResources();
    return dworch_relinquishAccessToDestinationURL();
  }
  return result;
}

void dworch_downloadMedia_gotAccessToDestinationURLCallback(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  uint64_t IsRegisteredForDownload;
  uint64_t v8;
  _QWORD *v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t PrimaryContentConfig;
  uint64_t v19;
  const void *Alternate;
  uint64_t v21;
  const __CFArray *AuxConfigs;
  const __CFArray *DefaultAuxConfigs;
  CFIndex Count;
  CFIndex v25;
  CFIndex v26;
  const void *ValueAtIndex;
  const void *v28;
  uint64_t v29;
  CFIndex v30;
  const __CFArray *v31;
  const void *v32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CFGetTypeID(a1);
  if (v6 == FigAssetDownloaderGetTypeID())
  {
    *(_QWORD *)(DerivedStorage + 544) = a3;
    CMBaseObjectGetDerivedStorage();
    if (!FigRetainProxyIsInvalidated())
    {
      if (*(_DWORD *)(DerivedStorage + 524) != 1)
      {
LABEL_44:
        dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
        return;
      }
      IsRegisteredForDownload = (uint64_t)dworch_ensureExtendedAttributesSetOnDestinationURL();
      if ((_DWORD)IsRegisteredForDownload)
        goto LABEL_40;
      IsRegisteredForDownload = dworch_ensureAssetIsRegisteredForDownload((uint64_t)a1);
      if ((_DWORD)IsRegisteredForDownload)
        goto LABEL_40;
      if (!*(_BYTE *)(DerivedStorage + 312))
      {
        if (*(_QWORD *)(DerivedStorage + 384))
        {
          v8 = CMBaseObjectGetDerivedStorage();
          if (!*(_BYTE *)(v8 + 520))
          {
            v9 = (_QWORD *)v8;
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
            if (Mutable)
            {
              v11 = Mutable;
              if (dword_1EE2A2BB0)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v13 = (_QWORD *)v9[42];
              if (v13)
              {
                v14 = (_QWORD *)*v13;
                if (*v13)
                {
                  do
                  {
                    v15 = v14;
                    v14[1] = v13[1];
                    *(_QWORD *)v13[1] = v14;
                    dworch_freeAlternateAndRenditionItem(v13);
                    v14 = (_QWORD *)*v15;
                    v13 = v15;
                  }
                  while (*v15);
                }
                else
                {
                  v15 = (_QWORD *)v9[42];
                }
                v16 = (_QWORD *)v15[1];
                v9[43] = v16;
                *v16 = 0;
                dworch_freeAlternateAndRenditionItem(v15);
              }
              v17 = v9[48];
              PrimaryContentConfig = FigStreamingAssetDownloadConfigGetPrimaryContentConfig(v17, CFSTR("kFigEnvironmentalCondition_DefaultKey"));
              if (PrimaryContentConfig
                || (PrimaryContentConfig = FigStreamingAssetDownloadConfigGetDefaultPrimaryContentConfig(v17)) != 0)
              {
                v19 = dworch_setupDownloadItemsForContentConfig((uint64_t)a1, PrimaryContentConfig);
                if ((_DWORD)v19)
                  goto LABEL_50;
                Alternate = (const void *)FigStreamingAssetDownloadContentConfigGetAlternate(PrimaryContentConfig);
                if (Alternate)
                  CFArrayAppendValue(v11, Alternate);
              }
              else
              {
                v19 = FigSignalErrorAt();
                if ((_DWORD)v19)
                  goto LABEL_50;
              }
              v21 = v9[48];
              AuxConfigs = (const __CFArray *)FigStreamingAssetDownloadConfigGetAuxConfigs(v21, CFSTR("kFigEnvironmentalCondition_DefaultKey"));
              if ((!AuxConfigs || (DefaultAuxConfigs = AuxConfigs, !CFArrayGetCount(AuxConfigs)))
                && (DefaultAuxConfigs = (const __CFArray *)FigStreamingAssetDownloadConfigGetDefaultAuxConfigs(v21)) == 0
                || (Count = CFArrayGetCount(DefaultAuxConfigs), Count < 1))
              {
LABEL_32:
                v9[61] = v9[42];
                dworch_sendWillDownloadAlternatesCallback(a1, v11);
                v29 = 0;
                goto LABEL_33;
              }
              v25 = Count;
              v26 = 0;
              while (1)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(DefaultAuxConfigs, v26);
                v19 = dworch_setupDownloadItemsForContentConfig((uint64_t)a1, (uint64_t)ValueAtIndex);
                if ((_DWORD)v19)
                  break;
                v28 = (const void *)FigStreamingAssetDownloadContentConfigGetAlternate((uint64_t)ValueAtIndex);
                if (v28)
                  CFArrayAppendValue(v11, v28);
                if (v25 == ++v26)
                  goto LABEL_32;
              }
LABEL_50:
              v29 = v19;
LABEL_33:
              CFRelease(v11);
              if ((_DWORD)v29)
              {
LABEL_41:
                dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
LABEL_42:
                dworch_transitionToTerminalStateWithOSStatus(a1, v29);
                return;
              }
              goto LABEL_34;
            }
            v29 = FigSignalErrorAt();
            if ((_DWORD)v29)
              goto LABEL_41;
          }
        }
      }
LABEL_34:
      IsRegisteredForDownload = dworch_downloadMedia_startNextMediaSelectionDownload((uint64_t)a1);
      if (!(_DWORD)IsRegisteredForDownload)
      {
        v30 = 0;
        while (1)
        {
          v31 = *(const __CFArray **)(DerivedStorage + 464);
          if (v31)
            v31 = (const __CFArray *)CFArrayGetCount(v31);
          if (v30 >= (uint64_t)v31)
            break;
          v32 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), v30);
          IsRegisteredForDownload = dworch_downloadMedia_matchMediaDownloaderToOrchestratorStatus((uint64_t)a1, (uint64_t)v32);
          ++v30;
          if ((_DWORD)IsRegisteredForDownload)
            goto LABEL_40;
        }
        dworch_updateAlternateInfoForReporting();
        dworch_updateMediaSelectionsReportingKeys();
        goto LABEL_44;
      }
LABEL_40:
      v29 = IsRegisteredForDownload;
      goto LABEL_41;
    }
  }
  v29 = FigSignalErrorAt();
  dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
  if ((_DWORD)v29)
    goto LABEL_42;
}

uint64_t dworch_downloadMedia_matchMediaDownloaderToOrchestratorStatus(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  int v6;
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 529))
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v4)
      return 4294954514;
    result = v4(a2);
    if ((_DWORD)result)
      return result;
  }
  v6 = *(_DWORD *)(DerivedStorage + 524);
  switch(v6)
  {
    case 5:
      v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v7)
        return 4294954514;
      break;
    case 2:
      v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v7)
        return 4294954514;
      break;
    case 1:
      v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v7)
        return 4294954514;
      break;
    default:
      goto LABEL_13;
  }
  result = v7(a2);
  if ((_DWORD)result)
    return result;
LABEL_13:
  if (*(_BYTE *)(DerivedStorage + 529))
    return 0;
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v8)
    return v8(a2);
  return 4294954514;
}

uint64_t dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFNumberRef v4;
  CFNumberRef v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v8;
  uint64_t valuePtr;

  valuePtr = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 400))
    return 0;
  v3 = DerivedStorage;
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = *(_QWORD *)(v3 + 400);
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
  if (v7)
    v8 = v7(v6, CFSTR("AlternateFilterMonitorProperty_LastTimestampClientDidPause"), v5);
  else
    v8 = 4294954514;
  CFRelease(v5);
  return v8;
}

const void *dworch_copyPropertyDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  const void *result;
  int v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, const void **);
  uint64_t v8;
  const void **v9;
  const void *v10;

  v10 = 0;
  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_16;
  if (CFEqual(CFSTR("AssetDownloaderProperty_Status"), v2))
  {
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(DerivedStorage + 524));
    if (result)
    {
LABEL_4:
      v5 = 0;
      goto LABEL_5;
    }
LABEL_16:
    v5 = FigSignalErrorAt();
    result = 0;
    goto LABEL_5;
  }
  if (!CFEqual(CFSTR("AssetDownloaderProperty_DownloadedBytes"), v2))
  {
    if (!CFEqual(CFSTR("AssetDownloaderProperty_HasAccessToDestinationURL"), v2))
    {
      result = 0;
      v5 = -12784;
      goto LABEL_5;
    }
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_QWORD *)(v8 + 544))
      v9 = (const void **)MEMORY[0x1E0C9AE40];
    result = *v9;
    if (*v9)
      result = CFRetain(result);
    goto LABEL_4;
  }
  CMBaseObject = FigAssetDownloaderGetCMBaseObject(*(_QWORD *)(DerivedStorage + 360));
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v7)
  {
    v5 = v7(CMBaseObject, CFSTR("AssetDownloaderProperty_DownloadedBytes"), *MEMORY[0x1E0C9AE00], &v10);
    result = v10;
  }
  else
  {
    result = 0;
    v5 = -12782;
  }
LABEL_5:
  *(_DWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t dworch_pause(const void *a1)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD *v3;
  _QWORD *v4;
  CFTypeRef v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200403A5D3213uLL);
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  if (a1)
    v5 = CFRetain(a1);
  else
    v5 = 0;
  *v4 = v5;
  dispatch_async_f(*DerivedStorage, v4, (dispatch_function_t)dworch_pauseDispatch);
  return 0;
}

uint64_t dworch_stop(const void *a1)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD *v3;
  _QWORD *v4;
  CFTypeRef v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200403A5D3213uLL);
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  if (a1)
    v5 = CFRetain(a1);
  else
    v5 = 0;
  *v4 = v5;
  dispatch_async_f(*DerivedStorage, v4, (dispatch_function_t)dworch_stopDispatch);
  return 0;
}

uint64_t dworch_pauseForPlayback(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)dworch_pauseForPlaybackDispatch);
  return v5;
}

uint64_t dworch_resumeAfterPlayback(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)dworch_resumeAfterPlaybackDispatch);
  return v5;
}

void dworch_pauseDispatch(const void **a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v5;
  uint64_t v6;
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor;
  uint64_t v8;

  v2 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    TimestampClientDidPauseOnContentSteeringMonitor = FigSignalErrorAt();
LABEL_8:
    v8 = TimestampClientDidPauseOnContentSteeringMonitor;
    if (!(_DWORD)TimestampClientDidPauseOnContentSteeringMonitor)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (*(_DWORD *)(DerivedStorage + 524) > 2u)
    goto LABEL_10;
  *(_DWORD *)(DerivedStorage + 524) = 2;
  *(_BYTE *)(DerivedStorage + 529) = 0;
  v5 = *(_DWORD *)(DerivedStorage + 532);
  if (v5 == 2
    || (v6 = ((uint64_t (*)(const void *))kDownloadOrchestratorStage_JumpTable[6 * v5 + 1])(v2), !(_DWORD)v6))
  {
    TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x8000000000000000);
    goto LABEL_8;
  }
  v8 = v6;
LABEL_9:
  dworch_transitionToTerminalStateWithOSStatus(*a1, v8);
LABEL_10:
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

void dworch_stopDispatch(const void **a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v5;
  uint64_t v6;
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor;
  uint64_t v8;

  v2 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    TimestampClientDidPauseOnContentSteeringMonitor = FigSignalErrorAt();
LABEL_8:
    v8 = TimestampClientDidPauseOnContentSteeringMonitor;
    if (!(_DWORD)TimestampClientDidPauseOnContentSteeringMonitor)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (*(_DWORD *)(DerivedStorage + 524) > 2u)
    goto LABEL_10;
  *(_DWORD *)(DerivedStorage + 524) = 5;
  *(_BYTE *)(DerivedStorage + 529) = 0;
  v5 = *(_DWORD *)(DerivedStorage + 532);
  if (v5 == 2
    || (v6 = ((uint64_t (*)(const void *))kDownloadOrchestratorStage_JumpTable[6 * v5 + 2])(v2), !(_DWORD)v6))
  {
    TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x8000000000000000);
    goto LABEL_8;
  }
  v8 = v6;
LABEL_9:
  dworch_transitionToTerminalStateWithOSStatus(*a1, v8);
LABEL_10:
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

void dworch_pauseForPlaybackDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v5;
  uint64_t v6;
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor;

  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
LABEL_11:
    LODWORD(TimestampClientDidPauseOnContentSteeringMonitor) = 0;
    goto LABEL_9;
  }
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 524) > 2u)
    goto LABEL_11;
  *(_BYTE *)(DerivedStorage + 529) = 1;
  v5 = *(_DWORD *)(DerivedStorage + 532);
  if (v5 != 2)
  {
    v6 = ((uint64_t (*)(const void *))kDownloadOrchestratorStage_JumpTable[6 * v5 + 3])(v2);
    if ((_DWORD)v6)
    {
      TimestampClientDidPauseOnContentSteeringMonitor = v6;
      goto LABEL_8;
    }
  }
  TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x8000000000000000);
  if ((_DWORD)TimestampClientDidPauseOnContentSteeringMonitor)
LABEL_8:
    dworch_transitionToTerminalStateWithOSStatus(*(const void **)a1, TimestampClientDidPauseOnContentSteeringMonitor);
LABEL_9:
  *(_DWORD *)(a1 + 8) = TimestampClientDidPauseOnContentSteeringMonitor;
}

void dworch_resumeAfterPlaybackDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor;

  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
    goto LABEL_13;
  }
  v5 = *(_DWORD *)(DerivedStorage + 524);
  if (v5 > 2 || *(_BYTE *)(DerivedStorage + 529) != 1)
    goto LABEL_13;
  *(_BYTE *)(DerivedStorage + 529) = 0;
  v6 = *(_DWORD *)(DerivedStorage + 532);
  if (v6)
  {
    v7 = ((uint64_t (*)(const void *))kDownloadOrchestratorStage_JumpTable[6 * v6 + 4])(v2);
    if ((_DWORD)v7)
    {
      TimestampClientDidPauseOnContentSteeringMonitor = v7;
      goto LABEL_11;
    }
    v5 = *(_DWORD *)(DerivedStorage + 524);
  }
  if (v5 != 1)
  {
LABEL_13:
    LODWORD(TimestampClientDidPauseOnContentSteeringMonitor) = 0;
    goto LABEL_14;
  }
  TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x7FFFFFFFFFFFFFFFLL);
  if ((_DWORD)TimestampClientDidPauseOnContentSteeringMonitor)
LABEL_11:
    dworch_transitionToTerminalStateWithOSStatus(*(const void **)a1, TimestampClientDidPauseOnContentSteeringMonitor);
LABEL_14:
  *(_DWORD *)(a1 + 8) = TimestampClientDidPauseOnContentSteeringMonitor;
}

CFStringRef dworch_copyNextTrimmedLogFromString(const __CFString *a1, CFIndex a2)
{
  CFIndex Length;
  unint64_t v5;
  CFIndex v6;
  CFIndex v7;
  CFIndex location;
  CFIndex v9;
  const __CFAllocator *v10;
  CFRange v12;
  CFRange v13;
  CFRange v14;
  CFRange v15;

  Length = CFStringGetLength(a1);
  v5 = Length - a2;
  if (Length - a2 < 1)
    return 0;
  v12.location = 0;
  v12.length = 0;
  v6 = Length - a2;
  if (v5 >= 0x385)
  {
    v6 = 900;
    v13.location = a2;
    v13.length = 900;
    if (CFStringFindWithOptions(a1, CFSTR("\n"), v13, 0, &v12))
    {
      v7 = a2 + 900;
      do
      {
        location = v12.location;
        if (v7 <= v12.length + v12.location)
          break;
        v14.location = v12.length + v12.location;
        v14.length = v7 - (v12.length + v12.location);
      }
      while (CFStringFindWithOptions(a1, CFSTR("\n"), v14, 0, &v12));
      if (location - a2 >= (uint64_t)v5)
        v9 = v5;
      else
        v9 = location - a2;
      if (location - a2 <= 0)
        v6 = v5;
      else
        v6 = v9;
    }
    if (v6 < 1)
      return 0;
  }
  v10 = CFGetAllocator(a1);
  v15.location = a2;
  v15.length = v6;
  return CFStringCreateWithSubstring(v10, a1, v15);
}

void dworch_logMediaSelectionArray(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const __CFArray *ValueAtIndex;
  __CFString *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v5 = DerivedStorage;
    Count = CFArrayGetCount(a3);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a3, i);
        v10 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v5 + 8), ValueAtIndex);
        if (dword_1EE2A2BB0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v10)
          CFRelease(v10);
      }
    }
  }
}

uint64_t FigSampleGeneratorDataSourceCacheCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v4;
  uint64_t v5;
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  uint64_t v11;

  if (!a2)
    return FigSignalErrorAt();
  if (FigSampleGeneratorDataSourceCacheGetTypeID_sRegisterFigSampleGeneratorDataSourceCacheTypeOnce != -1)
    dispatch_once_f(&FigSampleGeneratorDataSourceCacheGetTypeID_sRegisterFigSampleGeneratorDataSourceCacheTypeOnce, &FigSampleGeneratorDataSourceCacheGetTypeID_sFigSampleGeneratorDataSourceCacheID, (dispatch_function_t)RegisterFigSampleGeneratorDataSourceCacheType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v4 = (_QWORD *)Instance;
  v5 = FigReadWriteLockCreate();
  v4[2] = v5;
  if (v5
    && (v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v4[3] = Mutable) != 0)&& (v8 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v4[4] = v8) != 0)&& (v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v4[5] = v9) != 0))
  {
    *a2 = v4;
    return 0;
  }
  else
  {
    v11 = FigSignalErrorAt();
    CFRelease(v4);
    return v11;
  }
}

uint64_t FigSampleGeneratorCreateForTrackReaderUsingScheduledIO(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, CMTime *a6, char a7, _QWORD *a8)
{
  uint64_t v10;
  uint64_t v11;
  CMTime v13;
  uint64_t v14;

  v14 = 0;
  v13 = *a6;
  v10 = figSampleGeneratorCreateForFormatReaderCommon(a1, 0, a2, 0, 1, a3, a5, &v13, a7, a4, &v14);
  v11 = v10;
  if (a5 && !(_DWORD)v10)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  *a8 = v14;
  return v11;
}

uint64_t FigSampleGeneratorCreateForFormatReaderUsingScheduledIO(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, CMTime *a6, char a7, _QWORD *a8)
{
  uint64_t v10;
  uint64_t v11;
  CMTime v13;
  uint64_t v14;

  v14 = 0;
  v13 = *a6;
  v10 = figSampleGeneratorCreateForFormatReaderCommon(a1, a2, a3, 0, 1, a4, a5, &v13, a7, 0, &v14);
  v11 = v10;
  if (a5 && !(_DWORD)v10)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  *a8 = v14;
  return v11;
}

uint64_t FigSampleGeneratorCreateForFormatReaderUsingByteStreams(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, char a6, _QWORD *a7)
{
  return figSampleGeneratorCreateForFormatReaderCommon(a1, a2, a3, 0, 0, a4, a5, MEMORY[0x1E0CA2E68], a6, 0, a7);
}

uint64_t FigSampleGeneratorCreateForFormatReaderProducingByteReferenceSampleBuffers(const void *a1, const void *a2, const void *a3, uint64_t a4, char a5, _QWORD *a6)
{
  return figSampleGeneratorCreateForFormatReaderCommon(a1, a2, a3, 1, 0, 0, a4, MEMORY[0x1E0CA2E68], a5, 0, a6);
}

uint64_t RegisterFigSampleGeneratorDataSourceCacheType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double sampleGeneratorDataSourceCache_Init(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void sampleGeneratorDataSourceCache_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  FigReadWriteLockDestroy();
  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
}

__CFString *sampleGeneratorDataSourceCache_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigSampleGeneratorDataSourceCache:  urlToByteStream: {%@}"), *(_QWORD *)(a1 + 24));
  return Mutable;
}

__CFString *sgffr_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleGenerator %p>"), a1);
  return Mutable;
}

uint64_t sgffr_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  uint64_t v9;
  const __CFDictionary *v10;
  void (__cdecl *v11)(const void *, const void *, void *);
  CFDictionaryRef v13;
  void *values[4];
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(CFSTR("SampleGeneratorPerformanceDictionary"), a2))
    return 4294954512;
  memset(&keys[1], 0, 24);
  memset(&values[1], 0, 24);
  FigReadWriteLockLockForRead();
  Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v9 = *(_QWORD *)(DerivedStorage + 48);
    if (*(_BYTE *)(DerivedStorage + 32))
    {
      v10 = *(const __CFDictionary **)(v9 + 40);
      if (!v10)
        goto LABEL_10;
      v11 = (void (__cdecl *)(const void *, const void *, void *))sgffr_collectSchedIOReadStatistics;
    }
    else
    {
      v10 = *(const __CFDictionary **)(v9 + 32);
      if (!v10)
        goto LABEL_10;
      v11 = (void (__cdecl *)(const void *, const void *, void *))sgffr_collectByteStreamReadStatistics;
    }
    CFDictionaryApplyFunction(v10, v11, Mutable);
LABEL_10:
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      Mutable = 0;
    }
    goto LABEL_12;
  }
  FigSignalErrorAt();
LABEL_12:
  FigReadWriteLockUnlockForRead();
  if (Mutable)
  {
    keys[0] = CFSTR("ReadStatistics");
    values[0] = (void *)CFRetain(Mutable);
    v13 = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (values[0])
      CFRelease(values[0]);
    CFRelease(Mutable);
  }
  else
  {
    v13 = 0;
  }
  *a4 = v13;
  if (v13)
    return 0;
  else
    return 4294954513;
}

uint64_t sgffr_finishPrerollBatch(uint64_t a1, int a2)
{
  uint64_t v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t (*v10)(const void *, _QWORD, uint64_t);
  unsigned int v11;

  CMBaseObjectGetDerivedStorage();
  if (a2)
    v3 = 4;
  else
    v3 = 5;
  FigReadWriteLockLockForRead();
  v4 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  FigReadWriteLockUnlockForRead();
  if (!v4)
    return 0;
  Count = CFArrayGetCount(v4);
  if (Count < 1)
  {
    v7 = 0;
  }
  else
  {
    v6 = Count;
    LODWORD(v7) = 0;
    for (i = 0; i != v6; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
      v10 = *(uint64_t (**)(const void *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v10)
        v11 = v10(ValueAtIndex, 0, v3);
      else
        v11 = -12782;
      if ((_DWORD)v7)
        v7 = v7;
      else
        v7 = v11;
    }
  }
  CFRelease(v4);
  return v7;
}

void sgffr_collectSchedIOReadStatistics(int a1, int a2, void *cf)
{
  CFAllocatorRef v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, _QWORD, CFAllocatorRef, void **);
  void *value;

  value = 0;
  v4 = CFGetAllocator(cf);
  v5 = FigScheduledIOGetFigBaseObject();
  v6 = *(unsigned int (**)(uint64_t, _QWORD, CFAllocatorRef, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v6)
  {
    if (!v6(v5, *MEMORY[0x1E0CA4ED0], v4, &value))
    {
      CFArrayAppendValue((CFMutableArrayRef)cf, value);
      CFRelease(value);
    }
  }
}

void sgffr_collectByteStreamReadStatistics(int a1, int a2, void *cf)
{
  CFAllocatorRef v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, _QWORD, CFAllocatorRef, void **);
  void *value;

  value = 0;
  v4 = CFGetAllocator(cf);
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v6 = *(unsigned int (**)(uint64_t, _QWORD, CFAllocatorRef, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v6)
  {
    if (!v6(CMBaseObject, *MEMORY[0x1E0CA2F98], v4, &value))
    {
      CFArrayAppendValue((CFMutableArrayRef)cf, value);
      CFRelease(value);
    }
  }
}

uint64_t sgffr_CreateSampleBufferAtCursor(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, char a8, uint64_t (*a9)(uint64_t, uint64_t, CMSampleBufferRef), uint64_t a10, uint64_t a11, CMSampleTimingInfo *a12)
{
  return sgffr_createSampleBufferAtCursorUsingBatch(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t sgffr_FinishPrerollBatch(uint64_t a1)
{
  return sgffr_finishPrerollBatch(a1, 1);
}

uint64_t sgffr_GenerateSampleBuffersForRequests(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, CMTimeValue))
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const __CFDictionary *Mutable;
  uint64_t epoch_high;
  uint64_t v14;
  CMTimeValue value;
  void *v16;
  uint64_t (*v17)(void *, const __CFAllocator *, CMTimeScale *);
  const __CFAllocator *allocator;
  void *key;
  CMSampleTimingInfo cf;

  HIDWORD(cf.duration.epoch) = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&cf.duration.timescale = 0;
  if (a2 < 1)
    return 0;
  v11 = DerivedStorage;
  Mutable = 0;
  LODWORD(epoch_high) = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    key = 0;
    cf.duration.value = 0;
    if (*(_BYTE *)(v11 + 32))
    {
      sgffr_copyCursorSampleLocationAndDataSource(a1, *(_QWORD *)a3, 0, 0, 0, 0, 0, 0, 0, 0, (CFTypeRef *)&key);
      if (!Mutable)
        Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)&cf.duration.timescale = CFDictionaryGetValue(Mutable, key);
      if (!*(_QWORD *)&cf.duration.timescale && *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48))
      {
        v16 = key;
        v17 = *(uint64_t (**)(void *, const __CFAllocator *, CMTimeScale *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 48);
        if (v17)
        {
          HIDWORD(cf.duration.epoch) = v17(v16, allocator, &cf.duration.timescale);
          if (!HIDWORD(cf.duration.epoch))
          {
            CFDictionarySetValue(Mutable, key, *(const void **)&cf.duration.timescale);
            if (*(_QWORD *)&cf.duration.timescale)
              CFRelease(*(CFTypeRef *)&cf.duration.timescale);
          }
        }
        else
        {
          HIDWORD(cf.duration.epoch) = -12782;
        }
      }
    }
    v14 = sgffr_createSampleBufferAtCursorUsingBatch(a1, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_DWORD *)(a3 + 24), *(_QWORD *)a3, *(_DWORD *)(a3 + 36), *(_DWORD *)(a3 + 40), *(uint64_t (**)(uint64_t, uint64_t, CMSampleBufferRef))(a3 + 44), *(_QWORD *)(a3 + 52), *(_QWORD *)(a3 + 60), *(uint64_t *)&cf.duration.timescale, &cf);
    HIDWORD(cf.duration.epoch) = v14;
    if ((_DWORD)v14)
      value = 0;
    else
      value = cf.duration.value;
    a5(a4, a3, v14, value);
    if (cf.duration.value)
    {
      CFRelease((CFTypeRef)cf.duration.value);
      cf.duration.value = 0;
    }
    if (key)
      CFRelease(key);
    if ((_DWORD)epoch_high)
      epoch_high = epoch_high;
    else
      epoch_high = v14;
    a3 += 68;
    --a2;
  }
  while (a2);
  if (Mutable)
  {
    CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)sgffr_commitBatchApply, (char *)&cf.duration.epoch + 4);
    if ((_DWORD)epoch_high)
      epoch_high = epoch_high;
    else
      epoch_high = HIDWORD(cf.duration.epoch);
    CFRelease(Mutable);
  }
  return epoch_high;
}

uint64_t sgffr_CreateSampleGeneratorBatch(uint64_t a1, const __CFAllocator *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  const __CFAllocator *v7;

  if (!a3 || !a1)
    return FigSignalErrorAt();
  FigSampleGeneratorBatchGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 16) = FigSimpleMutexCreate();
    *(_QWORD *)DerivedStorage = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_DWORD *)(DerivedStorage + 32) = 0;
    *(_BYTE *)(DerivedStorage + 36) = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *(_QWORD *)(DerivedStorage + 24) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
    *(_QWORD *)(DerivedStorage + 40) = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
    FigCFWeakReferenceStore();
    if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 32))
      *(_BYTE *)(DerivedStorage + 36) = 1;
    v5 = 0;
    *a3 = 0;
  }
  return v5;
}

uint64_t sgffr_createSampleBufferAtCursorUsingBatch(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, char a8, uint64_t (*a9)(uint64_t, uint64_t, CMSampleBufferRef), uint64_t a10, uint64_t a11, uint64_t a12, CMSampleTimingInfo *a13)
{
  uint64_t DerivedStorage;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(const void *, uint64_t);
  BOOL v25;
  const void *v26;
  uint64_t FigBaseObject;
  void (*v28)(uint64_t, const __CFString *, _QWORD, _BYTE *);
  uint64_t (*v29)(uint64_t, uint64_t, CMSampleBufferRef);
  uint64_t v30;
  uint64_t v31;
  CMTimeEpoch v32;
  CMTimeValue v33;
  uint64_t (*v34)(const void *, CFTypeRef *, CFTypeRef *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, char *, __int16 *, char *);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(const void *, CFTypeRef *);
  uint64_t (*v38)(const void *, CFTypeRef *);
  CMSampleTimingInfo *v39;
  CFTypeRef v40;
  uint64_t (*v41)(CFTypeRef, void *, void **);
  uint64_t v42;
  CFTypeRef v43;
  uint64_t (*v44)(CFTypeRef, CFTypeRef *, CFTypeRef *, CMSampleTimingInfo **, uint64_t *, uint64_t *, uint64_t *, char *, __int16 *, char *);
  uint64_t v45;
  CFTypeRef v46;
  uint64_t (*v47)(CFTypeRef, CFTypeRef *);
  uint64_t v48;
  uint64_t (*v49)(const void *, _QWORD, uint64_t *, _QWORD, _QWORD);
  uint64_t v50;
  CFTypeRef v51;
  uint64_t (*v52)(CFTypeRef, _QWORD, CMTime *, _QWORD, _QWORD);
  uint64_t (*v53)(const void *, CMTime *);
  CFTypeRef v54;
  uint64_t (*v55)(CFTypeRef, CMTime *);
  uint64_t (*v56)(const void *, CMTime *);
  uint64_t (*v57)(const void *, CMTime *);
  CFTypeRef v58;
  uint64_t (*v59)(CFTypeRef, CMTime *);
  CFTypeRef v60;
  uint64_t (*v61)(CFTypeRef, CMTime *);
  int32_t v62;
  int v63;
  uint64_t (*v64)(const void *, uint64_t);
  int v65;
  uint64_t v66;
  uint64_t v68;
  CMSampleTimingInfo *v69;
  unint64_t v70;
  BOOL v71;
  int v72;
  CMSampleTimingInfo *v73;
  const opaqueCMFormatDescription *v74;
  uint64_t ContiguousSampleOffsetAndSize;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  CFTypeRef v80;
  uint64_t (*v81)(const void *, CFTypeRef *);
  CFTypeRef v82;
  uint64_t (*v83)(CFTypeRef, CMItemCount, uint64_t *);
  uint64_t (*v84)(uint64_t, CFTypeRef *);
  char v85;
  uint64_t v86;
  uint64_t CMBaseObject;
  uint64_t (*v88)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v89;
  uint64_t (*v90)(const void *, CFTypeRef *);
  CFTypeRef v91;
  uint64_t (*v92)(CFTypeRef, CMItemCount, uint64_t *);
  uint64_t v93;
  _BOOL4 v94;
  int v95;
  char v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, _QWORD);
  CFTypeRef v99;
  uint64_t (*v100)(CFTypeRef, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, _QWORD);
  uint64_t v101;
  CMTimeValue v102;
  uint64_t v103;
  uint64_t VTable;
  CFTypeRef v105;
  int v106;
  uint64_t (*v107)(CFTypeRef, CMItemCount, uint64_t, CMTime *, _QWORD, uint64_t, _QWORD, size_t *);
  size_t *v108;
  uint64_t BatchSampleTimingAndSizes;
  CMTimeValue value;
  CMTimeValue v111;
  CMTime *p_decodeTimeStamp;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  CFTypeRef v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  CFTypeRef v120;
  uint64_t (*v121)(CFTypeRef, CFTypeRef *);
  CFTypeRef v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(CFTypeRef, uint64_t);
  uint64_t v126;
  uint64_t v127;
  CFTypeRef v128;
  uint64_t (*v129)(CFTypeRef, CFTypeRef *);
  CFTypeRef v130;
  uint64_t (*v131)(CFTypeRef, uint64_t, uint64_t *);
  BOOL v132;
  CFTypeRef v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  CFTypeRef v137;
  uint64_t (*v138)(CFTypeRef, uint64_t);
  uint64_t PTSAndDTSAndDuration;
  unint64_t v140;
  size_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  Boolean v145;
  uint64_t (*v146)(const void *, CFTypeRef *);
  CFIndex v147;
  CFTypeRef v148;
  uint64_t (*v149)(CFTypeRef, uint64_t, uint64_t *);
  uint64_t v150;
  CMSampleBufferRef *v151;
  CMSampleBufferRef *v152;
  CMSampleBufferRef v153;
  CMSampleBufferRef v154;
  uint64_t (*v155)(uint64_t, uint64_t, CMSampleBufferRef);
  CMTimeValue v156;
  int32_t v157;
  uint64_t v158;
  void (*v159)(const void *, CMTime *);
  uint64_t v160;
  uint64_t (*v161)(const void *, CMTime *);
  uint64_t v162;
  CMTimeValue v163;
  uint64_t (*v164)(CMTimeValue, _BYTE *);
  uint64_t v165;
  CMTimeValue v166;
  uint64_t (*v167)(const void *, CMTime *);
  CMTimeValue v168;
  uint64_t (*v169)(CMTimeValue, uint64_t, _BYTE *);
  CMTimeValue v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t (*v174)(CMTimeValue, CMTimeValue);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (*v178)(uint64_t, CMTimeValue);
  uint64_t (*v179)(const void *, CMTimeValue, CMTime *);
  uint64_t v180;
  uint64_t v181;
  CMTimeValue v183;
  uint64_t v184;
  CMItemCount v185;
  CMItemCount numSampleSizeEntries;
  uint64_t v187;
  uint64_t v188;
  CMItemCount numSamples;
  CMItemCount numSamplesa;
  CMItemCount numSamplesb;
  uint64_t numSamplesc;
  CMTimeFlags flags;
  int v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  CMSampleTimingInfo *v200;
  CMSampleTimingInfo *sampleTimingArray;
  CMSampleTimingInfo *v202;
  uint64_t v203;
  uint64_t v204;
  int v205[2];
  uint64_t v206;
  uint64_t (*v207)(uint64_t, uint64_t, CMSampleBufferRef);
  void *v208;
  size_t *v209;
  int v210;
  int v211;
  CMFormatDescriptionRef formatDescription[2];
  const opaqueCMFormatDescription *formatDescriptiona;
  CFTypeRef v217;
  uint64_t v218;
  CFTypeRef v219;
  CFTypeRef v220;
  CFTypeRef v221;
  char v222;
  int v223;
  uint64_t invalidateRefCon;
  uint64_t v225;
  CMSampleBufferRef sbuf;
  CMBlockBufferRef dataBuffer;
  uint64_t v228;
  _BYTE time[32];
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  __int16 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  CFTypeRef v238;
  CFTypeRef v239;
  CFTypeRef v240;
  int v241;
  CMTime rhs;
  CMTime lhs;
  CMTime v244;
  void *v245;
  char v246;
  __int16 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  CMSampleTimingInfo *v251;
  CFTypeRef cf1;
  CFTypeRef v253;
  CFTypeRef cf;
  CFTypeRef cf2;
  CFTypeRef v256;
  CFTypeRef v257;
  uint64_t v258;
  CFTypeRef v259;
  CMTime time2;
  CMTime time1;
  CMTime v262;
  CMTime v263;
  CMTimeValue v264;
  CMTimeScale timescale;
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v217 = 0;
  v19 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  v20 = v19 != 0;
  v21 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (a6)
  {
    v22 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    v23 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (a5 == 1)
    {
      if (v22 == v23)
      {
        v24 = *(uint64_t (**)(const void *, uint64_t))(v22 + 32);
        if (v24)
        {
          if (v24(a2, a6) == 1)
            return 4294954454;
        }
      }
    }
    else if (v22 == v23)
    {
      v64 = *(uint64_t (**)(const void *, uint64_t))(v22 + 32);
      if (v64)
      {
        if (v64(a2, a6) == -1)
          return 4294954454;
      }
    }
  }
  if (v19)
    v25 = v21 == 0;
  else
    v25 = 1;
  if (!v25)
  {
    v26 = (const void *)*MEMORY[0x1E0C9AE40];
    *(_QWORD *)time = *MEMORY[0x1E0C9AE40];
    FigBaseObject = FigSampleCursorGetFigBaseObject(a2);
    v28 = *(void (**)(uint64_t, const __CFString *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v28)
    {
      v28(FigBaseObject, CFSTR("PreferCreateSampleBuffer"), *MEMORY[0x1E0C9AE00], time);
      v26 = *(const void **)time;
    }
    if ((const void *)*MEMORY[0x1E0C9AE50] == v26 && !*(_BYTE *)(DerivedStorage + 33))
      v20 = 0;
    if (v26)
      CFRelease(v26);
  }
  v29 = a9;
  if (!v20)
  {
    v36 = 0;
    v39 = a13;
    goto LABEL_362;
  }
  if (a4 != 1 && a5)
  {
    v241 = a7;
    v30 = CMBaseObjectGetDerivedStorage();
    v239 = 0;
    v240 = 0;
    v237 = 0;
    v238 = 0;
    v235 = 0;
    v236 = 0;
    v234 = 0;
    v233 = 0;
    v232 = 0;
    v231 = 0u;
    v230 = 0u;
    memset(time, 0, sizeof(time));
    dataBuffer = 0;
    v228 = 0;
    v225 = 0;
    sbuf = 0;
    invalidateRefCon = 0;
    v223 = 0;
    v222 = 1;
    v220 = 0;
    v221 = 0;
    v218 = 0;
    v219 = 0;
    if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152))
    {
      formatDescriptiona = 0;
      v65 = 0;
      v39 = a13;
LABEL_99:
      if (v236 && v235 && v222)
      {
        v66 = v235 - v234;
        if (a5 != 1)
          v66 = v234 + 1;
        if (v66 <= a4 || a4 <= 0)
          v68 = v66;
        else
          v68 = a4;
        v194 = v65;
        if ((v65 & 1) != 0)
        {
          numSamplesa = v68;
          v69 = 0;
          v199 = 0;
          sampleTimingArray = (CMSampleTimingInfo *)time;
          v68 = 1;
          goto LABEL_149;
        }
        v69 = (CMSampleTimingInfo *)malloc_type_malloc(72 * v68, 0x1000040FF89C88EuLL);
        if (v69)
        {
          v199 = 1;
          sampleTimingArray = v69;
          numSamplesa = v68;
LABEL_149:
          v187 = (uint64_t)v69;
          if (HIBYTE(v233))
          {
            v209 = (size_t *)&v228;
            ContiguousSampleOffsetAndSize = sgffr_getContiguousSampleOffsetAndSize((uint64_t)a2, 0, (uint64_t)&v228);
            v211 = 0;
            if ((_DWORD)ContiguousSampleOffsetAndSize)
            {
              v36 = ContiguousSampleOffsetAndSize;
LABEL_337:
              v74 = formatDescriptiona;
              v72 = v199;
              v73 = sampleTimingArray;
              goto LABEL_338;
            }
            numSampleSizeEntries = 1;
          }
          else
          {
            v209 = (size_t *)malloc_type_malloc(8 * numSamplesa, 0x100004000313F17uLL);
            if (!v209)
            {
              v36 = FigSignalErrorAt();
              v209 = 0;
              v211 = 0;
              v74 = formatDescriptiona;
              v72 = v199;
              v73 = sampleTimingArray;
              goto LABEL_338;
            }
            v211 = 1;
            numSampleSizeEntries = numSamplesa;
          }
          if (a5 == 1)
          {
            if (a2)
              v80 = CFRetain(a2);
            else
              v80 = 0;
            v239 = v80;
            if (a6)
            {
              v90 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (!v90)
                goto LABEL_335;
              *(_QWORD *)v205 = v30;
              v36 = v90(a2, &v240);
              if ((_DWORD)v36)
                goto LABEL_336;
              v207 = v29;
              v91 = v240;
              v92 = *(uint64_t (**)(CFTypeRef, CMItemCount, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 168);
              if (!v92)
                goto LABEL_393;
              v93 = v92(v91, numSamplesa - 1, &v218);
              if ((_DWORD)v93)
              {
LABEL_451:
                v36 = v93;
                goto LABEL_394;
              }
              v94 = numSamplesa - 1 != v218 || FigSampleCursorCompareInDecodeOrder((uint64_t)v240, a6) == 1;
              v30 = *(_QWORD *)v205;
              CFRelease(v240);
              v240 = 0;
              goto LABEL_194;
            }
            v207 = v29;
            goto LABEL_193;
          }
          v81 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v81)
            goto LABEL_335;
          v204 = v30;
          v36 = v81(a2, &v239);
          if ((_DWORD)v36)
            goto LABEL_336;
          v207 = v29;
          v82 = v239;
          v83 = *(uint64_t (**)(CFTypeRef, CMItemCount, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 168);
          if (v83)
          {
            v36 = v83(v82, 1 - numSamplesa, &v218);
            if (!(_DWORD)v36)
            {
              v29 = v207;
              if (1 - numSamplesa != v218)
                goto LABEL_336;
              if (!a6)
              {
                v94 = 0;
                v30 = v204;
                goto LABEL_194;
              }
              v30 = v204;
              if (FigSampleCursorCompareInDecodeOrder((uint64_t)v239, a6) == -1)
              {
                if (v239)
                {
                  CFRelease(v239);
                  v239 = 0;
                }
                v84 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                if (!v84)
                  goto LABEL_335;
                v36 = v84(a6, &v239);
                if ((_DWORD)v36)
                  goto LABEL_336;
                v85 = v194;
                if (!HIBYTE(v233))
                  v85 = 0;
                v30 = v204;
                if ((v85 & 1) != 0)
                {
LABEL_199:
                  v263.value = 0;
                  v262.value = 0;
                  time1.value = 0;
                  time2.value = 0;
                  if (a5 == -1)
                    v97 = (uint64_t)a2;
                  else
                    v97 = a6;
                  v98 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
                  if (!v98)
                    goto LABEL_393;
                  v204 = v30;
                  v188 = v97;
                  v93 = v98(v97, 0, 0, &time1, 0, 0, &time2, 0, 0, 0);
                  if (!(_DWORD)v93)
                  {
                    v99 = v239;
                    v100 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
                    if (!v100)
                      goto LABEL_393;
                    v185 = v68;
                    v93 = v100(v99, 0, 0, &v263, 0, 0, &v262, 0, 0, 0);
                    if (!(_DWORD)v93)
                    {
                      v101 = numSamplesa;
                      if (time1.value == v263.value)
                      {
                        v102 = time2.value - v262.value;
                        v29 = v207;
LABEL_294:
                        value = v102 + 1;
                        if (v240)
                        {
                          CFRelease(v240);
                          v240 = 0;
                        }
                        v115 = 0;
                        v95 = v194;
                        goto LABEL_297;
                      }
                      v120 = v239;
                      v121 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
                      if (v121)
                      {
                        v93 = v121(v120, &v240);
                        if (!(_DWORD)v93)
                        {
                          v183 = 0;
                          v184 = 0;
                          while (1)
                          {
                            v122 = v240;
                            v123 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                            if (v188)
                              v124 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                            else
                              v124 = 0;
                            if (v123 != v124
                              || (v125 = *(uint64_t (**)(CFTypeRef, uint64_t))(v123 + 32)) == 0
                              || !v125(v122, v188))
                            {
                              v29 = v207;
                              v102 = v183;
                              goto LABEL_294;
                            }
                            if (v101 >= 0)
                              v126 = v101;
                            else
                              v126 = v101 + 1;
                            v127 = v126 >> 1;
                            if (v127 <= 1)
                              v101 = 1;
                            else
                              v101 = v127;
                            v128 = v240;
                            v129 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
                            if (!v129)
                              goto LABEL_393;
                            v93 = v129(v128, &v238);
                            if ((_DWORD)v93)
                              goto LABEL_451;
                            v130 = v238;
                            v131 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 168);
                            if (!v131)
                              goto LABEL_393;
                            v93 = v131(v130, v101, &v218);
                            if ((_DWORD)v93)
                              v132 = (_DWORD)v93 == -12840;
                            else
                              v132 = 1;
                            if (!v132)
                              goto LABEL_451;
                            if (v218 == v101)
                            {
                              v133 = v238;
                              v134 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                              v135 = v188 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
                              if (v134 != v135
                                || (v138 = *(uint64_t (**)(CFTypeRef, uint64_t))(v134 + 32)) == 0
                                || v138(v133, v188) != 1)
                              {
                                v136 = v218;
                                v137 = v240;
                                v240 = v238;
                                if (v238)
                                  CFRetain(v238);
                                v183 += v136;
                                if (v137)
                                  CFRelease(v137);
                              }
                            }
                            if (v101 + v184 >= numSamplesa)
                              break;
                            v184 += v101;
                            if (v238)
                            {
                              CFRelease(v238);
                              v238 = 0;
                            }
                          }
                          v93 = FigSignalErrorAt();
                        }
                        goto LABEL_451;
                      }
LABEL_393:
                      v36 = 4294954514;
                      goto LABEL_394;
                    }
                  }
                  goto LABEL_451;
                }
                time2.value = 0;
                v86 = (uint64_t)a2;
LABEL_215:
                VTable = CMBaseObjectGetVTable();
                v105 = v239;
                v106 = HIBYTE(v233);
                if (*(_QWORD *)(*(_QWORD *)(VTable + 16) + 224))
                {
                  v107 = *(uint64_t (**)(CFTypeRef, CMItemCount, uint64_t, CMTime *, _QWORD, uint64_t, _QWORD, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 224);
                  if (!v107)
                  {
                    v36 = 4294954514;
                    goto LABEL_247;
                  }
                  v185 = v68;
                  if (v106)
                    v108 = 0;
                  else
                    v108 = v209;
                  BatchSampleTimingAndSizes = v107(v105, numSamplesa, v86, &time2, 0, v187, 0, v108);
                  if (!(_DWORD)BatchSampleTimingAndSizes)
                    goto LABEL_221;
                }
                else
                {
                  v185 = v68;
                  if (HIBYTE(v233))
                    v117 = 0;
                  else
                    v117 = (uint64_t)v209;
                  BatchSampleTimingAndSizes = FigSampleCursorUtilityGetBatchSampleTimingAndSizes((uint64_t)v239, numSamplesa, v86, &time2.value, 0, v187, 0, v117);
                  if (!(_DWORD)BatchSampleTimingAndSizes)
                  {
LABEL_221:
                    value = time2.value;
                    v39 = a13;
                    v95 = v194;
                    if ((v194 & 1) == 0)
                    {
                      v185 = time2.value;
                      if (time2.value >= 1)
                      {
                        v111 = time2.value;
                        p_decodeTimeStamp = &sampleTimingArray->decodeTimeStamp;
                        numSamplesb = time2.value;
                        do
                        {
                          if ((p_decodeTimeStamp->flags & 1) != 0)
                          {
                            v113 = *(_OWORD *)&p_decodeTimeStamp->value;
                            v262.epoch = p_decodeTimeStamp->epoch;
                            *(_OWORD *)&v262.value = v113;
                            time1 = *(CMTime *)(v204 + 88);
                            CMTimeSubtract(&v263, &v262, &time1);
                            v95 = v194;
                            v114 = *(_OWORD *)&v263.value;
                            p_decodeTimeStamp->epoch = v263.epoch;
                            *(_OWORD *)&p_decodeTimeStamp->value = v114;
                          }
                          p_decodeTimeStamp += 3;
                          --v111;
                        }
                        while (v111);
                        value = numSamplesb;
                        v185 = numSamplesb;
                      }
                    }
                    if (HIBYTE(v233))
                    {
                      v115 = 0;
                      v29 = v207;
                    }
                    else
                    {
                      v29 = v207;
                      if (value >= 1)
                      {
                        v118 = 0;
                        v115 = 0;
                        while (1)
                        {
                          v119 = v115;
                          v115 += v209[v118];
                          if (v115 <= v119)
                            break;
                          if (value == ++v118)
                            goto LABEL_289;
                        }
                        PTSAndDTSAndDuration = FigSignalErrorAt();
                        goto LABEL_440;
                      }
                      v115 = 0;
LABEL_289:
                      numSampleSizeEntries = value;
                    }
LABEL_297:
                    if (v95)
                    {
                      v140 = v115;
                      PTSAndDTSAndDuration = sgffr_getPTSAndDTSAndDuration(v204, (uint64_t)v239, (uint64_t)sampleTimingArray);
                      v115 = v140;
                      if ((_DWORD)PTSAndDTSAndDuration)
                        goto LABEL_440;
                    }
                    if (HIBYTE(v233))
                    {
                      v141 = *v209;
                      if (a5 == 1)
                        v142 = v237 + v234 * v141;
                      else
                        v142 = v141 + v141 * (v234 - value) + v237;
                      v225 = v142;
                      v143 = v204;
                      goto LABEL_308;
                    }
                    v225 = v237;
                    if (v234 < 1)
                    {
                      v143 = v204;
                    }
                    else
                    {
                      v196 = v115;
                      PTSAndDTSAndDuration = sgffr_getContiguousSampleOffsetAndSize((uint64_t)v239, (uint64_t)&v225, 0);
                      if ((_DWORD)PTSAndDTSAndDuration)
                        goto LABEL_440;
                      v143 = v204;
                      v115 = v196;
                      if (HIBYTE(v233))
                      {
                        v141 = *v209;
LABEL_308:
                        v115 = v141 * value;
                      }
                    }
                    v206 = v143;
                    v197 = v115;
                    if (!*(_BYTE *)(v143 + 33))
                    {
                      PTSAndDTSAndDuration = sgffr_checkByteRangeForByteStream(v143, (uint64_t)v220, v225, v115);
                      v115 = v197;
                      if ((_DWORD)PTSAndDTSAndDuration)
                        goto LABEL_440;
                    }
                    numSamplesc = value;
                    if (v241 == 3)
                    {
                      sgffr_checkDataAvailability(a1, (uint64_t)v221, (uint64_t)v220, v225, v115, &v241);
                      v115 = v197;
                    }
                    v144 = v206;
                    if (*(_BYTE *)(v206 + 33))
                    {
                      v145 = 1;
                    }
                    else if (*(_BYTE *)(v206 + 32))
                    {
                      PTSAndDTSAndDuration = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)v206, 0, 0, &dataBuffer);
                      if ((_DWORD)PTSAndDTSAndDuration)
                        goto LABEL_440;
                      v145 = 0;
                    }
                    else
                    {
                      v150 = sgffr_readFromByteStreamCreatingBlockBuffer(v206, (uint64_t)v220, v115, v225, &dataBuffer);
                      if ((_DWORD)v150)
                      {
LABEL_443:
                        v36 = v150;
                        goto LABEL_336;
                      }
                      v145 = 1;
                      v144 = v206;
                    }
                    PTSAndDTSAndDuration = CMSampleBufferCreate(*(CFAllocatorRef *)v144, dataBuffer, v145, 0, 0, formatDescriptiona, numSamplesc, v185, sampleTimingArray, numSampleSizeEntries, v209, &sbuf);
                    if (!(_DWORD)PTSAndDTSAndDuration)
                    {
                      if (CMFormatDescriptionGetMediaType(formatDescriptiona) == 1936684398
                        && !*(_BYTE *)(v144 + 35)
                        && !*(_BYTE *)(v144 + 36))
                      {
LABEL_329:
                        if (!v29 || (v150 = v29(a10, a11, sbuf), !(_DWORD)v150))
                        {
                          if (!*(_BYTE *)(v206 + 32))
                          {
                            sgffr_setSampleBufferAttachments(v206, sbuf, v219, v225);
                            v36 = 0;
                            v217 = sbuf;
                            sbuf = 0;
                            v74 = formatDescriptiona;
                            v72 = v199;
                            v73 = sampleTimingArray;
LABEL_340:
                            if (dataBuffer)
                              CFRelease(dataBuffer);
                            if (v72)
                              free(v73);
                            if (v211)
                              free(v209);
                            if (v240)
                              CFRelease(v240);
                            if (v238)
                              CFRelease(v238);
                            if (v239)
                              CFRelease(v239);
                            if (v219)
                              CFRelease(v219);
                            if (v74)
                              CFRelease(v74);
                            if (v220)
                              CFRelease(v220);
                            if (v221)
                              CFRelease(v221);
                            goto LABEL_360;
                          }
                          sgffr_getTimeNeededInNanosecondsAndReadSchedulerFlags(v206, sbuf, v241, a8, (uint64_t)a2, &v223);
                          v151 = (CMSampleBufferRef *)malloc_type_calloc(1uLL, 0x40uLL, 0x1020040A1797456uLL);
                          if (v151)
                          {
                            v152 = v151;
                            v153 = sbuf;
                            *v152 = sbuf;
                            v152[1] = 0;
                            if (v153)
                            {
                              CFRetain(v153);
                              v154 = sbuf;
                            }
                            else
                            {
                              v154 = 0;
                            }
                            sgffr_rememberScheduledIOForSampleBuffer(v221, v154);
                          }
                          v36 = FigSignalErrorAt();
                          v39 = a13;
                          goto LABEL_337;
                        }
                        goto LABEL_443;
                      }
                      if (v240)
                      {
                        CFRelease(v240);
                        v240 = 0;
                      }
                      v146 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
                      if (v146)
                      {
                        v36 = v146(a2, &v240);
                        if (!(_DWORD)v36)
                        {
                          v207 = v29;
                          FigSampleCursorSetProperty((uint64_t)v240, (uint64_t)CFSTR("EagerlyFetchSampleDependencyAttributes"), *MEMORY[0x1E0C9AE50]);
                          if (numSamplesc >= 1)
                          {
                            v147 = 0;
                            do
                            {
                              sgffr_attachMediaSampleAttachmentsToSampleBuffer(v206, (uint64_t)v240, sbuf, v147);
                              v148 = v240;
                              v149 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 168);
                              if (!v149)
                                goto LABEL_393;
                              v93 = v149(v148, 1, &v218);
                              if ((_DWORD)v93)
                                goto LABEL_451;
                            }
                            while (numSamplesc != ++v147);
                          }
                          CFRelease(v240);
                          v240 = 0;
                          v29 = v207;
                          goto LABEL_329;
                        }
LABEL_336:
                        FigSignalErrorAt();
                        goto LABEL_337;
                      }
LABEL_335:
                      v36 = 4294954514;
                      goto LABEL_336;
                    }
LABEL_440:
                    v36 = PTSAndDTSAndDuration;
                    goto LABEL_337;
                  }
                }
                v36 = BatchSampleTimingAndSizes;
LABEL_247:
                v39 = a13;
LABEL_394:
                v29 = v207;
                goto LABEL_337;
              }
LABEL_193:
              v94 = 0;
LABEL_194:
              v95 = v194;
              if (HIBYTE(v233))
                v96 = v194;
              else
                v96 = 0;
              if ((v96 & 1) != 0)
              {
                if (!v94)
                {
                  v185 = v68;
                  v204 = v30;
                  v115 = 0;
                  v29 = v207;
                  value = numSamplesa;
                  goto LABEL_297;
                }
                goto LABEL_199;
              }
              v204 = v30;
              time2.value = 0;
              if (a5 == 1)
                v103 = a6;
              else
                v103 = (uint64_t)a2;
              if (v94)
                v86 = v103;
              else
                v86 = 0;
              goto LABEL_215;
            }
          }
          else
          {
            v36 = 4294954514;
          }
          v29 = v207;
          goto LABEL_336;
        }
        v36 = FigSignalErrorAt();
        v73 = 0;
        v72 = 0;
        v211 = 0;
        v209 = (size_t *)&v228;
      }
      else
      {
        v36 = sgffr_generateSingleSampleBuffer(a1, (uint64_t)a2, a7, a8, v29, a10, a11, a12, &v217);
        v72 = 0;
        v211 = 0;
        v209 = (size_t *)&v228;
        v73 = (CMSampleTimingInfo *)time;
      }
LABEL_146:
      v74 = formatDescriptiona;
      goto LABEL_338;
    }
    v203 = v30;
    v258 = 0;
    v259 = 0;
    v31 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)formatDescription = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&v263.value = *MEMORY[0x1E0CA2E18];
    v32 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v33 = *MEMORY[0x1E0CA2E18];
    v263.epoch = v32;
    v264 = v33;
    timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
    v257 = 0;
    v256 = 0;
    cf2 = 0;
    cf = 0;
    v253 = 0;
    cf1 = 0;
    v34 = *(uint64_t (**)(const void *, CFTypeRef *, CFTypeRef *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, char *, __int16 *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
    if (v34)
    {
      v35 = v34(a2, &v256, &v257, &v237, &v236, &v235, &v234, (char *)&v233 + 1, &v233, &v222);
      v36 = v35;
      if ((_DWORD)v35 == -12841)
      {
LABEL_114:
        v70 = 0;
        formatDescriptiona = 0;
LABEL_115:
        LOBYTE(v210) = 1;
        v39 = a13;
        goto LABEL_116;
      }
      if ((_DWORD)v35)
        goto LABEL_113;
      v37 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
      if (v37)
      {
        v36 = v37(a2, &cf2);
        if (!(_DWORD)v36)
        {
          if (!v222)
          {
            v70 = 0;
            formatDescriptiona = 0;
            v36 = 0;
            goto LABEL_115;
          }
          if (v235 >= a3)
            goto LABEL_231;
          v38 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v38)
          {
            v36 = v38(a2, &v259);
            if (!(_DWORD)v36)
            {
              v208 = (void *)(v235 - v234);
              if (v235 - v234 >= 1 && v236)
              {
                v200 = (CMSampleTimingInfo *)(v237 + v236);
                v210 = 1;
                flags = *(_DWORD *)(v31 + 12);
                numSamples = v32;
                v39 = a13;
                while (1)
                {
                  v251 = 0;
                  v250 = 0;
                  v249 = 0;
                  v248 = 0;
                  v247 = 0;
                  v246 = 0;
                  v245 = 0;
                  v40 = v259;
                  v41 = *(uint64_t (**)(CFTypeRef, void *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 168);
                  if (!v41)
                    break;
                  v42 = v41(v40, v208, &v245);
                  v36 = v42;
                  if (v245 != v208)
                    goto LABEL_232;
                  if ((_DWORD)v42)
                    goto LABEL_448;
                  v43 = v259;
                  v44 = *(uint64_t (**)(CFTypeRef, CFTypeRef *, CFTypeRef *, CMSampleTimingInfo **, uint64_t *, uint64_t *, uint64_t *, char *, __int16 *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
                  if (!v44)
                    goto LABEL_446;
                  v45 = v44(v43, &v253, &cf, &v251, &v250, &v249, &v248, (char *)&v247 + 1, &v247, &v246);
                  if ((_DWORD)v45)
                    goto LABEL_447;
                  if (!FigCFEqual() || !FigCFEqual())
                    goto LABEL_292;
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                  if (v253)
                  {
                    CFRelease(v253);
                    v253 = 0;
                  }
                  if (!v246)
                  {
LABEL_292:
                    v36 = 0;
                    goto LABEL_232;
                  }
                  v46 = v259;
                  v47 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 160);
                  if (!v47)
                    goto LABEL_446;
                  v45 = v47(v46, &cf1);
                  if ((_DWORD)v45)
                    goto LABEL_447;
                  if (!CFEqual(cf1, cf2))
                    goto LABEL_292;
                  if (cf1)
                  {
                    CFRelease(cf1);
                    cf1 = 0;
                  }
                  if (v200 != v251)
                    goto LABEL_292;
                  v208 = (void *)v249;
                  if (v249 < 1)
                    goto LABEL_292;
                  v48 = v250;
                  if (!v250)
                    goto LABEL_292;
                  if (__CFADD__(v236, v250))
                  {
                    v36 = FigSignalErrorAt();
                    goto LABEL_449;
                  }
                  v236 += v250;
                  v235 += v249;
                  v198 = v250;
                  if (!HIBYTE(v247))
                    goto LABEL_64;
                  if (HIBYTE(v233))
                  {
                    v262.value = 0;
                    if (!v258)
                    {
                      v49 = *(uint64_t (**)(const void *, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
                      if (!v49)
                        goto LABEL_454;
                      v50 = v49(a2, 0, &v258, 0, 0);
                      if ((_DWORD)v50)
                        goto LABEL_457;
                    }
                    v51 = v259;
                    v52 = *(uint64_t (**)(CFTypeRef, _QWORD, CMTime *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 144);
                    if (!v52)
                      goto LABEL_454;
                    v50 = v52(v51, 0, &v262, 0, 0);
                    if ((_DWORD)v50)
                      goto LABEL_457;
                    v48 = v198;
                    if (v258 != v262.value)
LABEL_64:
                      HIBYTE(v233) = 0;
                  }
                  if ((_BYTE)v247)
                  {
                    if ((_BYTE)v233)
                    {
                      *(_OWORD *)&v262.value = *(_OWORD *)formatDescription;
                      v262.epoch = v32;
                      if ((v263.flags & 0x1D) != 1)
                      {
                        v53 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
                        if (!v53)
                          goto LABEL_454;
                        v50 = v53(a2, &v263);
                        if ((_DWORD)v50)
                        {
LABEL_457:
                          v36 = v50;
LABEL_458:
                          FigSignalErrorAt();
                          v39 = a13;
LABEL_449:
                          v70 = 0;
                          formatDescriptiona = 0;
                          goto LABEL_116;
                        }
                      }
                      v54 = v259;
                      v55 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 56);
                      if (!v55)
                      {
LABEL_454:
                        v36 = 4294954514;
                        goto LABEL_458;
                      }
                      v50 = v55(v54, &v262);
                      if ((_DWORD)v50)
                        goto LABEL_457;
                      time1 = v263;
                      time2 = v262;
                      if (CMTimeCompare(&time1, &time2))
                        LOBYTE(v233) = 0;
                      v48 = v198;
                    }
                  }
                  else
                  {
                    LOBYTE(v233) = 0;
                  }
                  if ((_BYTE)v210)
                  {
                    *(_OWORD *)&v262.value = *(_OWORD *)formatDescription;
                    v262.epoch = v32;
                    *(_OWORD *)&time1.value = *(_OWORD *)formatDescription;
                    time1.epoch = v32;
                    *(_OWORD *)&time2.value = *(_OWORD *)formatDescription;
                    time2.epoch = v32;
                    if ((flags & 0x1D) != 1)
                    {
                      v56 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 40);
                      if (!v56)
                        goto LABEL_446;
                      v45 = v56(a2, &time1);
                      if ((_DWORD)v45)
                        goto LABEL_447;
                      v57 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 48);
                      if (!v57)
                        goto LABEL_446;
                      v45 = v57(a2, &time2);
                      if ((_DWORD)v45)
                        goto LABEL_447;
                      lhs = time2;
                      rhs = time1;
                      CMTimeSubtract(&v244, &lhs, &rhs);
                      v264 = v244.value;
                      flags = v244.flags;
                      timescale = v244.timescale;
                      numSamples = v244.epoch;
                    }
                    v58 = v259;
                    v59 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 40);
                    if (!v59)
                      goto LABEL_446;
                    v45 = v59(v58, &time1);
                    if ((_DWORD)v45)
                    {
LABEL_447:
                      v36 = v45;
                      goto LABEL_448;
                    }
                    v60 = v259;
                    v61 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 48);
                    if (!v61)
                    {
LABEL_446:
                      v36 = 4294954514;
                      goto LABEL_448;
                    }
                    v45 = v61(v60, &time2);
                    if ((_DWORD)v45)
                      goto LABEL_447;
                    v244 = time2;
                    lhs = time1;
                    CMTimeSubtract(&v262, &v244, &lhs);
                    v244.value = v264;
                    v244.timescale = timescale;
                    v244.flags = flags;
                    v244.epoch = numSamples;
                    lhs = v262;
                    v62 = CMTimeCompare(&v244, &lhs);
                    v63 = v210;
                    if (v62)
                      v63 = 0;
                    v210 = v63;
                    v48 = v198;
                  }
                  else
                  {
                    v210 = 0;
                  }
                  v36 = 0;
                  v200 = (CMSampleTimingInfo *)((char *)v200 + v48);
                  if (v235 >= a3)
                    goto LABEL_232;
                }
                v36 = 4294954514;
                if (v245 == v208)
                {
LABEL_448:
                  FigSignalErrorAt();
                  goto LABEL_449;
                }
                goto LABEL_232;
              }
LABEL_231:
              v36 = 0;
              LOBYTE(v210) = 1;
              v39 = a13;
LABEL_232:
              formatDescriptiona = (const opaqueCMFormatDescription *)cf2;
              cf2 = 0;
              v116 = v257;
              v257 = 0;
              v70 = (unint64_t)v256;
              v219 = v116;
              v220 = v256;
              v256 = 0;
LABEL_116:
              if (v259)
                CFRelease(v259);
              if (cf2)
                CFRelease(cf2);
              if (v257)
                CFRelease(v257);
              if (v256)
                CFRelease(v256);
              if (cf)
                CFRelease(cf);
              if (v253)
                CFRelease(v253);
              if (cf1)
                CFRelease(cf1);
              if ((_DWORD)v36 != -12841)
              {
                if ((_DWORD)v36)
                {
                  FigSignalErrorAt();
                }
                else
                {
                  if (v70 | (unint64_t)v219)
                  {
                    if ((_BYTE)v210)
                      v71 = v233 == 0;
                    else
                      v71 = 1;
                    v65 = !v71;
                    v30 = v203;
                    if (!*(_BYTE *)(v203 + 33))
                    {
                      v202 = v39;
                      if (!v70
                        && (v76 = v65,
                            v77 = sgffr_copyByteStreamForDataSourceURL(v203, v219, (void **)&v220),
                            v65 = v76,
                            (_DWORD)v77))
                      {
                        v36 = v77;
                        v72 = 0;
                        v211 = 0;
                        v209 = (size_t *)&v228;
                        v73 = (CMSampleTimingInfo *)time;
                        v29 = a9;
                      }
                      else
                      {
                        v30 = v203;
                        if (!*(_BYTE *)(v203 + 32))
                        {
                          v29 = a9;
                          goto LABEL_99;
                        }
                        v78 = v65;
                        v79 = sgffr_copyScheduledIOForByteStream(v203, v220, &v221);
                        v29 = a9;
                        if (!(_DWORD)v79)
                        {
                          v65 = v78;
                          v39 = v202;
                          v30 = v203;
                          goto LABEL_99;
                        }
                        v36 = v79;
                        v72 = 0;
                        v211 = 0;
                        v209 = (size_t *)&v228;
                        v73 = (CMSampleTimingInfo *)time;
                      }
                      v74 = formatDescriptiona;
                      v39 = v202;
LABEL_338:
                      if (sbuf)
                        CFRelease(sbuf);
                      goto LABEL_340;
                    }
                    if (v219)
                    {
                      v29 = a9;
                      goto LABEL_99;
                    }
                    v195 = v65;
                    CMBaseObject = CMByteStreamGetCMBaseObject();
                    v88 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
                    if (!v88)
                    {
                      v72 = 0;
                      v211 = 0;
                      v209 = (size_t *)&v228;
                      v73 = (CMSampleTimingInfo *)time;
                      v36 = 4294954514;
                      goto LABEL_145;
                    }
                    v89 = v88(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &v219);
                    if (!(_DWORD)v89)
                    {
                      v29 = a9;
                      v30 = v203;
                      v65 = v195;
                      goto LABEL_99;
                    }
                  }
                  else
                  {
                    v89 = FigSignalErrorAt();
                  }
                  v36 = v89;
                }
              }
              v72 = 0;
              v211 = 0;
              v209 = (size_t *)&v228;
              v73 = (CMSampleTimingInfo *)time;
LABEL_145:
              v29 = a9;
              goto LABEL_146;
            }
            goto LABEL_113;
          }
          goto LABEL_112;
        }
LABEL_113:
        FigSignalErrorAt();
        goto LABEL_114;
      }
    }
LABEL_112:
    v36 = 4294954514;
    goto LABEL_113;
  }
  v36 = sgffr_generateSingleSampleBuffer(a1, (uint64_t)a2, a7, a8, a9, a10, a11, a12, &v217);
  v39 = a13;
LABEL_360:
  if (!(_DWORD)v36)
    goto LABEL_373;
  if ((_DWORD)v36 != -12841)
    goto LABEL_434;
LABEL_362:
  if (v21)
  {
    v155 = v29;
    v156 = 0;
    v244.value = 0;
    lhs.value = 0;
    rhs.value = 0;
    v217 = 0;
    if (a3 >= 0x7FFFFFFF)
      v157 = 0x7FFFFFFF;
    else
      v157 = a3;
    v158 = a4 - 1;
    if (a4 == 1 || !a5)
    {
LABEL_417:
      v179 = *(uint64_t (**)(const void *, CMTimeValue, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 112);
      if (v179)
      {
        v180 = v179(a2, v156, &v244);
        v36 = v180;
        if ((_DWORD)v180 == -12840)
          goto LABEL_425;
        if (!(_DWORD)v180)
        {
          if (!v155 || (v181 = v155(a10, a11, (CMSampleBufferRef)v244.value), !(_DWORD)v181))
          {
            v36 = 0;
            v217 = (CFTypeRef)v244.value;
            v244.value = 0;
            goto LABEL_427;
          }
          v36 = v181;
        }
      }
      else
      {
        v36 = 4294954514;
      }
      FigSignalErrorAt();
LABEL_425:
      if (v244.value)
        CFRelease((CFTypeRef)v244.value);
LABEL_427:
      if (rhs.value)
        CFRelease((CFTypeRef)rhs.value);
      if (lhs.value)
        CFRelease((CFTypeRef)lhs.value);
      if (v39 && !(_DWORD)v36)
        goto LABEL_433;
      goto LABEL_434;
    }
    v263 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    memset(&v262, 0, sizeof(v262));
    v159 = *(void (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v159)
      v159(a2, &v263);
    if (a3 >= 1 && (v263.flags & 0x1D) == 1)
    {
      *(CMTime *)time = v263;
      CMTimeMultiply(&v262, (CMTime *)time, v157);
    }
    else
    {
      CMTimeMake((CMTime *)time, 1, 2);
      v262 = *(CMTime *)time;
    }
    if (a5 == 1)
    {
      v160 = -1;
    }
    else
    {
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      time2 = v262;
      CMTimeSubtract((CMTime *)time, &time1, &time2);
      v262 = *(CMTime *)time;
      v160 = 1;
      v158 = 1 - a4;
    }
    v161 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v161)
    {
      v162 = v161(a2, &lhs);
      if ((_DWORD)v162)
        goto LABEL_467;
      v163 = lhs.value;
      time1 = v262;
      v164 = *(uint64_t (**)(CMTimeValue, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
      if (v164)
      {
        *(CMTime *)time = time1;
        v165 = v164(v163, time);
        if ((_DWORD)v165)
        {
          v36 = v165;
          if ((_DWORD)v165 != -12840)
            goto LABEL_425;
        }
        v166 = lhs.value;
        if (a4 < 1)
          goto LABEL_402;
        *(_QWORD *)time = 0;
        v167 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v167)
        {
          v162 = v167(a2, &rhs);
          if ((_DWORD)v162)
            goto LABEL_467;
          v168 = rhs.value;
          v169 = *(uint64_t (**)(CMTimeValue, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 168);
          if (v169)
          {
            v162 = v169(v168, v158, time);
            if (!(_DWORD)v162)
            {
              if (v158 == *(_QWORD *)time)
              {
                v170 = rhs.value;
                v171 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                v172 = v166 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
                if (v171 == v172 && (v174 = *(uint64_t (**)(CMTimeValue, CMTimeValue))(v171 + 32)) != 0)
                  v173 = v174(v170, v166);
                else
                  v173 = 0;
                if (v160 == v173)
                  v166 = rhs.value;
              }
LABEL_402:
              if (a6)
              {
                v175 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                v176 = v166 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
                if (v175 == v176 && (v178 = *(uint64_t (**)(uint64_t, CMTimeValue))(v175 + 32)) != 0)
                  v177 = v178(a6, v166);
                else
                  v177 = 0;
                if (v160 == v177)
                  v166 = a6;
              }
              if (a5 == -1)
                v156 = (CMTimeValue)a2;
              else
                v156 = v166;
              if (a5 == -1)
                a2 = (const void *)v166;
              goto LABEL_417;
            }
LABEL_467:
            v36 = v162;
            goto LABEL_425;
          }
        }
      }
    }
    v36 = 4294954514;
    goto LABEL_425;
  }
LABEL_373:
  if (v39)
  {
LABEL_433:
    v39->duration.value = (CMTimeValue)v217;
    return v36;
  }
LABEL_434:
  if (v217)
    CFRelease(v217);
  return v36;
}

uint64_t FigSampleCursorCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 48);
  if (v9)
    return v9(FigBaseObject, a2, a3, a4);
  return result;
}

uint64_t sgffr_copyCursorSampleLocationAndDataSource(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _QWORD *a5, char *a6, _QWORD *a7, _QWORD *a8, CFTypeRef *a9, CFTypeRef *a10, CFTypeRef *a11)
{
  uint64_t DerivedStorage;
  uint64_t (*v19)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, CFTypeRef *, CFTypeRef *);
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t *, uint64_t *, CFTypeRef *, CFTypeRef *);
  char v24;
  uint64_t CMBaseObject;
  uint64_t (*v26)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v27;
  CFTypeRef cf;
  CFTypeRef v30;
  CFTypeRef v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  cf = 0;
  if (a3
    && *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184)
    && *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 192))
  {
    v19 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184);
    if (!v19)
      goto LABEL_27;
    v20 = v19(a2, &v35, &v33, &v34, &v32, &cf, &v31);
    if ((_DWORD)v20)
      v21 = 1;
    else
      v21 = v32 == 0;
    if (v21)
      goto LABEL_19;
    if (v34 >= v35 && v34 + v32 <= (unint64_t)(v33 + v35))
    {
      v24 = 1;
      goto LABEL_21;
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v31)
    {
      CFRelease(v31);
      v31 = 0;
    }
    v22 = FigSignalErrorAt();
  }
  else
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 144);
    if (!v23)
      goto LABEL_27;
    v22 = v23(a2, &v35, &v33, &cf, &v31);
  }
  v20 = v22;
LABEL_19:
  if ((_DWORD)v20)
    goto LABEL_48;
  v24 = 0;
LABEL_21:
  if (!((unint64_t)cf | (unint64_t)v31))
  {
    v27 = FigSignalErrorAt();
LABEL_57:
    v20 = v27;
    goto LABEL_48;
  }
  if (!*(_BYTE *)(DerivedStorage + 33))
  {
    if (!cf)
    {
      v27 = sgffr_copyByteStreamForDataSourceURL(DerivedStorage, v31, (void **)&cf);
      if ((_DWORD)v27)
        goto LABEL_57;
    }
    if (*(_BYTE *)(DerivedStorage + 32))
    {
      v27 = sgffr_copyScheduledIOForByteStream(DerivedStorage, cf, &v30);
      if ((_DWORD)v27)
        goto LABEL_57;
    }
    goto LABEL_32;
  }
  if (v31)
    goto LABEL_32;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v26 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v26)
  {
LABEL_27:
    v20 = 4294954514;
    goto LABEL_48;
  }
  v27 = v26(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &v31);
  if ((_DWORD)v27)
    goto LABEL_57;
LABEL_32:
  if (a4)
    *a4 = v35;
  if (a5)
    *a5 = v33;
  if (a6)
    *a6 = v24;
  if (a7)
    *a7 = v34;
  if (a8)
    *a8 = v32;
  if (a9)
  {
    *a9 = v31;
    v31 = 0;
  }
  if (a10)
  {
    *a10 = cf;
    cf = 0;
  }
  v20 = 0;
  if (a11)
  {
    *a11 = v30;
    v30 = 0;
  }
LABEL_48:
  if (v31)
    CFRelease(v31);
  if (cf)
    CFRelease(cf);
  if (v30)
    CFRelease(v30);
  return v20;
}

uint64_t sgffr_checkByteRangeForByteStream(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int Int64IfPresent;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  uint64_t v9;
  uint64_t v11;
  CFNumberRef number;

  v11 = 0;
  FigReadWriteLockLockForRead();
  Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  FigReadWriteLockUnlockForRead();
  if (Int64IfPresent && (a3 & 0x8000000000000000) == 0 && v11 >= a3 && v11 - a3 >= a4)
    return 0;
  number = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v8)
    return 4294954514;
  v9 = v8(CMBaseObject, *MEMORY[0x1E0CA2070], 0, &number);
  if (number)
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, &v11);
    CFRelease(number);
  }
  if (!(_DWORD)v9)
  {
    FigReadWriteLockLockForWrite();
    FigCFDictionarySetInt64();
    FigReadWriteLockUnlockForWrite();
    if (a3 < 0 || v11 < a3 || v11 - a3 < a4)
      return FigSignalErrorAt();
    return 0;
  }
  return v9;
}

uint64_t sgffr_checkDataAvailability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, _DWORD *a6)
{
  uint64_t result;
  uint64_t (*v11)(uint64_t, uint64_t, unint64_t *);
  uint64_t v12;
  BOOL v14;
  unint64_t v15;

  v15 = 0;
  if (a2)
  {
    result = CMBaseObjectGetVTable();
    v11 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(result + 16) + 40);
    if (!v11)
      return result;
    v12 = a2;
  }
  else
  {
    result = CMBaseObjectGetVTable();
    v11 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(result + 16) + 24);
    if (!v11)
      return result;
    v12 = a3;
  }
  result = v11(v12, a4, &v15);
  if ((_DWORD)result)
    v14 = 1;
  else
    v14 = v15 >= a5;
  if (!v14)
  {
    *a6 = 2;
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t createSampleBufferForUncompressed(uint64_t a1, size_t a2, const opaqueCMFormatDescription *a3, Boolean a4, const CMSampleTimingInfo *a5, CMSampleBufferRef *a6, CMBlockBufferRef *a7)
{
  uint64_t DerivedStorage;
  FourCharCode MediaSubType;
  unint64_t Dimensions;
  uint64_t v13;
  unint64_t v14;
  CFTypeRef *v15;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v17;
  CFPropertyListRef Extension;
  const void *v19;
  FourCharCode v20;
  uint64_t v21;
  int v22;
  const opaqueCMFormatDescription *v23;
  CMBlockBufferRef *v24;
  CMSampleBufferRef *v25;
  CFTypeID v26;
  BOOL v27;
  const __CFDictionary *DescriptionWithPixelFormatType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __CVBuffer *v32;
  CMSampleBufferRef *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CFDictionaryRef Extensions;
  const __CFDictionary *v43;
  uint64_t i;
  const __CFString *v45;
  const void *Value;
  size_t v47;
  void *v48;
  CFTypeRef *v50;
  CMBlockBufferRef blockBufferOut;
  CMSampleBufferRef sampleBufferOut;
  CVPixelBufferRef pixelBufferOut;
  _BYTE customBlockSource[32];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  sampleBufferOut = 0;
  pixelBufferOut = 0;
  blockBufferOut = 0;
  MediaSubType = CMFormatDescriptionGetMediaSubType(a3);
  Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(a3);
  v13 = Dimensions;
  v14 = HIDWORD(Dimensions);
  v15 = (CFTypeRef *)(DerivedStorage + 136);
  if (*(_QWORD *)(DerivedStorage + 144) == __PAIR64__(HIDWORD(Dimensions), MediaSubType)
    && *(_DWORD *)(DerivedStorage + 152) == (_DWORD)Dimensions)
  {
    goto LABEL_17;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*v15)
  {
    CFRelease(*v15);
    *v15 = 0;
  }
  FigCFDictionarySetInt();
  FigCFDictionarySetInt();
  FigCFDictionarySetInt();
  v17 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v17);
  CFRelease(v17);
  Extension = CMFormatDescriptionGetExtension(a3, (CFStringRef)*MEMORY[0x1E0CA2168]);
  if (!Extension)
    goto LABEL_9;
  v19 = Extension;
  v50 = (CFTypeRef *)(DerivedStorage + 136);
  v20 = MediaSubType;
  v21 = DerivedStorage;
  v22 = v14;
  v14 = v13;
  v23 = a3;
  v24 = a7;
  v25 = a6;
  v26 = CFGetTypeID(Extension);
  v27 = v26 == CFNumberGetTypeID();
  a6 = v25;
  a7 = v24;
  a3 = v23;
  v13 = v14;
  LODWORD(v14) = v22;
  DerivedStorage = v21;
  MediaSubType = v20;
  v15 = v50;
  if (v27)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8F98], v19);
  }
  else
  {
LABEL_9:
    DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (DescriptionWithPixelFormatType
      && !CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0]))
    {
      if (((a2 / (v13 >> 32)) & 0x8000000000000000) != 0)
        goto LABEL_43;
      FigCFDictionarySetInt64();
    }
  }
  v29 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, Mutable, (CVPixelBufferPoolRef *)v15);
  if (Mutable)
    CFRelease(Mutable);
  if (!(_DWORD)v29)
  {
    *(_DWORD *)(DerivedStorage + 144) = MediaSubType;
    *(_DWORD *)(DerivedStorage + 148) = v14;
    *(_DWORD *)(DerivedStorage + 152) = v13;
LABEL_17:
    if (!*v15)
    {
LABEL_32:
      if (a6)
      {
        *a6 = sampleBufferOut;
        sampleBufferOut = 0;
      }
      v29 = 0;
      if (a7)
      {
        *a7 = blockBufferOut;
        blockBufferOut = 0;
      }
      goto LABEL_36;
    }
    v30 = v13;
    v31 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CVPixelBufferPoolRef)*v15, &pixelBufferOut);
    if ((_DWORD)v31)
    {
LABEL_44:
      v29 = v31;
      goto LABEL_36;
    }
    v32 = pixelBufferOut;
    if (!pixelBufferOut)
      goto LABEL_32;
    v33 = a6;
    v34 = *MEMORY[0x1E0CA8DC8];
    *(_QWORD *)customBlockSource = *MEMORY[0x1E0CA8D50];
    *(_QWORD *)&customBlockSource[8] = v34;
    v35 = *MEMORY[0x1E0CA8E68];
    *(_QWORD *)&customBlockSource[16] = *MEMORY[0x1E0CA8DD0];
    *(_QWORD *)&customBlockSource[24] = v35;
    v36 = *MEMORY[0x1E0CA8E98];
    v58 = *MEMORY[0x1E0CA8D68];
    v59 = v36;
    v37 = *MEMORY[0x1E0CA8EE8];
    v60 = *MEMORY[0x1E0CA8DF8];
    v61 = v37;
    v38 = *MEMORY[0x1E0CA8CE8];
    v62 = *MEMORY[0x1E0CA2210];
    v63 = v38;
    v39 = *MEMORY[0x1E0CA2220];
    v64 = *MEMORY[0x1E0CA8CE0];
    v65 = v39;
    v40 = *MEMORY[0x1E0CA2150];
    v66 = *MEMORY[0x1E0CA21A8];
    v67 = v40;
    v41 = *MEMORY[0x1E0CA2218];
    v68 = *MEMORY[0x1E0CA21A0];
    v69 = v41;
    Extensions = CMFormatDescriptionGetExtensions(a3);
    if (Extensions)
    {
      v43 = Extensions;
      for (i = 0; i != 128; i += 8)
      {
        v45 = *(const __CFString **)&customBlockSource[i];
        Value = CFDictionaryGetValue(v43, v45);
        if (Value)
          CVBufferSetAttachment(v32, v45, Value, kCVAttachmentMode_ShouldPropagate);
      }
    }
    a6 = v33;
    if (!pixelBufferOut)
      goto LABEL_32;
    v47 = CVPixelBufferGetBytesPerRow(pixelBufferOut) * (v30 >> 32);
    if (v47 >= a2)
    {
      v31 = CMSampleBufferCreateForImageBuffer(*(CFAllocatorRef *)DerivedStorage, pixelBufferOut, a4, 0, 0, a3, a5, &sampleBufferOut);
      if (!(_DWORD)v31)
      {
        if (!a7)
          goto LABEL_32;
        *(_DWORD *)customBlockSource = 0;
        v48 = pixelBufferOut;
        if (pixelBufferOut)
          v48 = (void *)CFRetain(pixelBufferOut);
        *(_QWORD *)&customBlockSource[20] = v48;
        *(_QWORD *)&customBlockSource[4] = cvbufferBBufSourceLock;
        *(_QWORD *)&customBlockSource[12] = cvbufferBBufSourceRelease;
        v31 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)DerivedStorage, 0, v47, 0, (const CMBlockBufferCustomBlockSource *)customBlockSource, 0, v47, 0, &blockBufferOut);
        if (!(_DWORD)v31)
          goto LABEL_32;
      }
      goto LABEL_44;
    }
LABEL_43:
    v31 = FigSignalErrorAt();
    goto LABEL_44;
  }
LABEL_36:
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v29;
}

uint64_t sgffr_refineAndVerifySampleLocation(uint64_t a1, CMBlockBufferRef theBuffer, CMBlockBufferRef a3, uint64_t a4, size_t a5, uint64_t a6, size_t size, _QWORD *a8, _QWORD *a9)
{
  size_t v10;
  char *v17;
  char *p_destination;
  OpaqueCMBlockBuffer *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, size_t, char *, size_t, uint64_t *, uint64_t *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char destination;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = 0;
  if ((theBuffer != 0) == (a3 != 0)
    || (v10 = a6 - a4, a6 - a4 < 0)
    || v10 + size > a5
    || theBuffer && CMBlockBufferGetDataLength(theBuffer) != a5
    || a3 && CMBlockBufferGetDataLength(a3) != size)
  {
    v21 = FigSignalErrorAt();
    v17 = 0;
    goto LABEL_12;
  }
  if (size >= 9)
  {
    v17 = (char *)malloc_type_malloc(size, 0x7DC3141EuLL);
    p_destination = v17;
    if (!a3)
      goto LABEL_10;
  }
  else
  {
    v17 = 0;
    p_destination = &destination;
    if (!a3)
    {
LABEL_10:
      v19 = theBuffer;
      v20 = v10;
      goto LABEL_15;
    }
  }
  v19 = a3;
  v20 = 0;
LABEL_15:
  v23 = CMBlockBufferCopyDataBytes(v19, v20, size, p_destination);
  if ((_DWORD)v23)
    goto LABEL_21;
  v24 = *(uint64_t (**)(uint64_t, uint64_t, size_t, char *, size_t, uint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 192);
  if (!v24)
  {
    v21 = 4294954514;
    goto LABEL_12;
  }
  v23 = v24(a1, a4, a5, p_destination, size, &v27, &v26);
  if ((_DWORD)v23)
    goto LABEL_21;
  if (v27 < a4 || (v25 = v26, v26 + v27 > a5 + a4))
  {
    v23 = FigSignalErrorAt();
LABEL_21:
    v21 = v23;
    goto LABEL_12;
  }
  if (a8)
    *a8 = v27;
  v21 = 0;
  if (a9)
    *a9 = v25;
LABEL_12:
  free(v17);
  return v21;
}

uint64_t sgffr_readFromByteStreamCreatingBlockBuffer(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, CMBlockBufferRef *a5)
{
  uint64_t (*v9)(uint64_t, unint64_t, uint64_t, CMBlockBufferRef *, _QWORD);
  uint64_t BlockBuffer;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, unint64_t, uint64_t, char *, _QWORD);
  char *v15;
  CMBlockBufferRef theBuffer;

  theBuffer = 0;
  if (a3 <= 0x2000
    || !*(_QWORD *)(a1 + 8)
    || (CMByteStreamGetCMBaseObject(), FigCachedFileByteStreamGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    v9 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, CMBlockBufferRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 32);
    if (v9)
    {
      BlockBuffer = v9(a2, a3, a4, &theBuffer, 0);
      if (!(_DWORD)BlockBuffer)
      {
LABEL_6:
        v11 = 0;
        *a5 = theBuffer;
        return v11;
      }
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  v15 = 0;
  BlockBuffer = FigMemoryPoolCreateBlockBuffer();
  if ((_DWORD)BlockBuffer
    || (BlockBuffer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v15), (_DWORD)BlockBuffer))
  {
LABEL_16:
    v11 = BlockBuffer;
    goto LABEL_13;
  }
  v12 = v15;
  v13 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, char *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 8);
  if (!v13)
  {
LABEL_12:
    v11 = 4294954514;
    goto LABEL_13;
  }
  v11 = v13(a2, a3, a4, v12, 0);
  if (!(_DWORD)v11)
    goto LABEL_6;
LABEL_13:
  if (theBuffer)
    CFRelease(theBuffer);
  return v11;
}

uint64_t sgffr_createBlockBufferWithBufferReference(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, size_t a3, size_t a4, CMBlockBufferRef *blockBufferOut)
{
  if ((a3 & 0x8000000000000000) != 0)
    return FigSignalErrorAt();
  else
    return CMBlockBufferCreateWithBufferReference(a1, a2, a3, a4, 0, blockBufferOut);
}

uint64_t sgffr_getTimeNeededInNanosecondsAndReadSchedulerFlags(uint64_t a1, opaqueCMSampleBuffer *a2, int a3, char a4, uint64_t a5, _DWORD *a6)
{
  uint64_t UpTimeNanoseconds;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  double EffectiveRate;
  CMTimeEpoch v17;
  CMTime v18;
  CMTime v19;
  CFDictionaryRef dictionaryRepresentation;
  CMTime rhs;
  CMTime lhs;
  CMTime v23;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if ((a4 & 1) != 0)
  {
    *a6 |= 0x80u;
  }
  else
  {
    switch(a3)
    {
      case 0:
        if (!*(_QWORD *)(a1 + 56))
          return UpTimeNanoseconds;
        CMSampleBufferGetOutputDecodeTimeStamp(&v23, a2);
        value = v23.value;
        flags = v23.flags;
        timescale = v23.timescale;
        epoch = v23.epoch;
        if (*(_QWORD *)(a1 + 24))
        {
          lhs.value = value;
          lhs.timescale = timescale;
          lhs.flags = v23.flags;
          lhs.epoch = v23.epoch;
          rhs = *(CMTime *)(a1 + 112);
          CMTimeSubtract(&v23, &lhs, &rhs);
          value = v23.value;
          flags = v23.flags;
          timescale = v23.timescale;
          epoch = v23.epoch;
        }
        else if (a5)
        {
          dictionaryRepresentation = 0;
          FigSampleCursorCopyProperty(a5, (uint64_t)CFSTR("AdvanceDecodeDelta"), *MEMORY[0x1E0C9AE00], (uint64_t)&dictionaryRepresentation);
          if (dictionaryRepresentation)
          {
            memset(&v23, 0, sizeof(v23));
            CMTimeMakeFromDictionary(&v23, dictionaryRepresentation);
            CFRelease(dictionaryRepresentation);
            lhs = v23;
            rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
            if (CMTimeCompare(&lhs, &rhs) >= 1)
            {
              rhs.value = value;
              rhs.timescale = timescale;
              rhs.flags = flags;
              rhs.epoch = epoch;
              v19 = v23;
              CMTimeSubtract(&lhs, &rhs, &v19);
              value = lhs.value;
              flags = lhs.flags;
              timescale = lhs.timescale;
              epoch = lhs.epoch;
            }
          }
        }
        if ((flags & 0x1D) != 1)
          return UpTimeNanoseconds;
        memset(&v23, 0, sizeof(v23));
        CMTimebaseGetTime(&v18, *(CMTimebaseRef *)(a1 + 56));
        lhs.value = value;
        lhs.timescale = timescale;
        lhs.flags = flags;
        lhs.epoch = epoch;
        CMTimeSubtract(&v23, &lhs, &v18);
        EffectiveRate = CMTimebaseGetEffectiveRate(*(CMTimebaseRef *)(a1 + 56));
        if (EffectiveRate == 0.0)
        {
          *(_OWORD *)&v23.value = *MEMORY[0x1E0CA2E68];
          v17 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        }
        else
        {
          if (EffectiveRate == 1.0)
            goto LABEL_20;
          rhs = v23;
          CMTimeMultiplyByFloat64(&lhs, &rhs, 1.0 / EffectiveRate);
          *(_OWORD *)&v23.value = *(_OWORD *)&lhs.value;
          v17 = lhs.epoch;
        }
        v23.epoch = v17;
LABEL_20:
        rhs = v23;
        v19 = *(CMTime *)(a1 + 64);
        CMTimeSubtract(&lhs, &rhs, &v19);
        v23 = lhs;
        rhs = lhs;
        CMTimeConvertScale(&lhs, &rhs, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v23 = lhs;
        UpTimeNanoseconds = v23.value + FigGetUpTimeNanoseconds();
        break;
      case 1:
      case 3:
        *a6 |= 4u;
        return 0x7FFFFFFFFFFFFFFFLL;
      case 2:
        return FigGetUpTimeNanoseconds();
      default:
        return UpTimeNanoseconds;
    }
  }
  return UpTimeNanoseconds;
}

void sgffr_rememberScheduledIOForSampleBuffer(const void *a1, const void *a2)
{
  MEMORY[0x19402F294](&gFigSampleGeneratorSetUpTableOnce, sgffr_setUpTableOnce);
  MEMORY[0x19402EEEC](gFigSampleGeneratorSampleBufferToScheduledIOMutex);
  CFDictionarySetValue((CFMutableDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a2, a1);
  JUMPOUT(0x19402EF04);
}

void sgffr_forgetScheduledIOForSampleBuffer(const void *a1)
{
  MEMORY[0x19402F294](&gFigSampleGeneratorSetUpTableOnce, sgffr_setUpTableOnce);
  MEMORY[0x19402EEEC](gFigSampleGeneratorSampleBufferToScheduledIOMutex);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a1);
  JUMPOUT(0x19402EF04);
}

void sgffr_invalidateSampleBuffer(const void *a1, uint64_t a2)
{
  const void *Value;
  const void *v5;
  uint64_t v6;
  void (*v7)(const void *, uint64_t, uint64_t);

  MEMORY[0x19402F294](&gFigSampleGeneratorSetUpTableOnce, sgffr_setUpTableOnce);
  MEMORY[0x19402EEEC](gFigSampleGeneratorSampleBufferToScheduledIOMutex);
  Value = CFDictionaryGetValue((CFDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a1);
  if (!Value)
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a1);
    JUMPOUT(0x19402EF04);
  }
  v5 = Value;
  CFRetain(Value);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a1);
  MEMORY[0x19402EF04](gFigSampleGeneratorSampleBufferToScheduledIOMutex);
  v6 = FigScheduledIOGetTypeID();
  if (v6 == CFGetTypeID(v5))
  {
    v7 = *(void (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v7)
      v7(v5, a2, 2);
  }
  CFRelease(v5);
}

void sgffr_attachMediaSampleAttachmentsToSampleBuffer(uint64_t a1, uint64_t a2, CMSampleBufferRef sbuf, CFIndex a4)
{
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;
  __CFDictionary *v9;
  uint64_t FigBaseObject;
  unsigned int (*v11)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  BOOL v12;
  unsigned int (*v13)(uint64_t, char *, __int16 *, _QWORD, char *);
  uint64_t v14;
  unsigned int (*v15)(uint64_t, const __CFString *, _QWORD, void **);
  char v16;
  __int16 v17;
  void *value;
  CFDictionaryRef theDict;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, a4);
    if (ValueAtIndex)
    {
      v9 = ValueAtIndex;
      value = 0;
      theDict = 0;
      FigBaseObject = FigSampleCursorGetFigBaseObject(a2);
      v11 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
      if (!v11
        || (!v11(FigBaseObject, CFSTR("SampleDependencyAttributes"), 0, &theDict) ? (v12 = theDict == 0) : (v12 = 1),
            v12))
      {
        v17 = 0;
        v16 = 0;
        if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64))
          return;
        v13 = *(unsigned int (**)(uint64_t, char *, __int16 *, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
        if (!v13 || v13(a2, (char *)&v17 + 1, &v17, 0, &v16))
        {
          FigSignalErrorAt();
          return;
        }
        if (!HIBYTE(v17))
          CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CA2620], (const void *)*MEMORY[0x1E0C9AE50]);
        if ((_BYTE)v17)
          CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CA2628], (const void *)*MEMORY[0x1E0C9AE50]);
        if (v16)
          CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CA2618], (const void *)*MEMORY[0x1E0C9AE40]);
      }
      else
      {
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sgffr_appendAttributesToDictionary, v9);
        CFRelease(theDict);
      }
      if (*(_BYTE *)(a1 + 36))
      {
        v14 = FigSampleCursorGetFigBaseObject(a2);
        v15 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
        if (v15)
        {
          if (!v15(v14, CFSTR("SeamIdentifier"), 0, &value))
          {
            if (value)
            {
              CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CA4E28], value);
              CFRelease(value);
            }
          }
        }
      }
    }
  }
}

void sgffr_setSampleBufferAttachments(uint64_t a1, CMAttachmentBearerRef target, const void *a3, uint64_t a4)
{
  CFNumberRef v5;
  uint64_t valuePtr;

  valuePtr = a4;
  if (*(_BYTE *)(a1 + 33))
  {
    if (a3)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA26F8], a3, 1u);
      v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA26F0], v5, 1u);
      if (v5)
        CFRelease(v5);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t sgffr_copyByteStreamForDataSourceURL(uint64_t a1, const void *a2, void **a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const void *, _QWORD, _QWORD, _QWORD, void **);
  void *value;

  FigReadWriteLockLockForWrite();
  v6 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 48) + 24), a2);
  value = v6;
  if (v6)
  {
    CFRetain(v6);
    v7 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v9 = *(uint64_t (**)(uint64_t, const void *, _QWORD, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
      if (v9)
      {
        v7 = v9(v8, a2, 0, 0, *MEMORY[0x1E0C9AE00], &value);
        if (!(_DWORD)v7)
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 48) + 24), a2, value);
      }
      else
      {
        v7 = 4294954514;
      }
    }
    else
    {
      v7 = FigSignalErrorAt();
    }
  }
  FigReadWriteLockUnlockForWrite();
  *a3 = value;
  return v7;
}

uint64_t sgffr_copyScheduledIOForByteStream(uint64_t a1, const void *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *value;

  FigReadWriteLockLockForRead();
  v6 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 48) + 40), a2);
  if (v6)
  {
    v7 = v6;
    CFRetain(v6);
    FigReadWriteLockUnlockForRead();
    v8 = 0;
  }
  else
  {
    FigReadWriteLockUnlockForRead();
    FigReadWriteLockLockForWrite();
    v9 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 48) + 40), a2);
    value = v9;
    if (v9)
    {
      CFRetain(v9);
      v8 = 0;
    }
    else
    {
      v8 = FigScheduledIOCreateForReadingByteStream();
      if (!(_DWORD)v8)
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 48) + 40), a2, 0);
    }
    FigReadWriteLockUnlockForWrite();
    v7 = value;
  }
  *a3 = v7;
  return v8;
}

void *cvbufferBBufSourceLock(__CVBuffer *a1, size_t a2)
{
  size_t BytesPerRow;

  CVPixelBufferLockBaseAddress(a1, 0);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  if (CVPixelBufferGetHeight(a1) * BytesPerRow < a2)
    cvbufferBBufSourceLock_cold_1();
  return CVPixelBufferGetBaseAddress(a1);
}

uint64_t sgffr_setUpTableOnce()
{
  uint64_t result;

  gFigSampleGeneratorSampleBufferToScheduledIOTable = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = FigSimpleMutexCreate();
  gFigSampleGeneratorSampleBufferToScheduledIOMutex = result;
  return result;
}

uint64_t FigSampleCursorSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(FigBaseObject, a2, a3);
  return result;
}

uint64_t sgffr_commitBatchApply(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t (*v5)(uint64_t);
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v5)
    result = v5(a2);
  else
    result = 4294954514;
  if (!*a3)
    *a3 = result;
  return result;
}

uint64_t figSampleGeneratorBatch_Finalize(void *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(void *);
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFDictionaryApplyFunction(*(CFDictionaryRef *)DerivedStorage, (CFDictionaryApplierFunction)figSampleGeneratorBatch_removeListeners, a1);
  if (!*(_DWORD *)(DerivedStorage + 32))
  {
    v3 = *(void (**)(void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v3)
      v3(a1);
  }
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
    CFRelease(v5);
  FigCFWeakReferenceStore();
  return FigSimpleMutexDestroy();
}

__CFString *figSampleGeneratorBatch_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  CFIndex v4;
  uint64_t Count;
  const char *v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable(0, 0);
  v4 = CFGetRetainCount(a1);
  Count = FigCFDictionaryGetCount();
  v6 = "open";
  v7 = *(unsigned int *)(DerivedStorage + 32);
  if ((int)v7 > 1)
    v6 = "completed";
  if ((_DWORD)v7 == 1)
    v6 = "committed";
  CFStringAppendFormat(Mutable, 0, CFSTR("FigSampleGenBatch %p(%d): batchCount=%ld state:%s(%d)"), a1, v4, Count, v6, v7);
  return Mutable;
}

uint64_t figSampleGeneratorBatch_removeListeners()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t figSampleGeneratrBatch_completionCallback(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  opaqueCMSampleBuffer *ValueAtIndex;
  int v10;
  OSStatus statusOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 24), a4);
  if (!CFSetGetCount(*(CFSetRef *)(DerivedStorage + 24)))
  {
    *(_DWORD *)(DerivedStorage + 32) = 2;
    Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40));
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 0;
      while (1)
      {
        ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 40), v8);
        statusOut = 0;
        if (CMSampleBufferHasDataFailed(ValueAtIndex, &statusOut) || !CMSampleBufferDataIsReady(ValueAtIndex))
          break;
        if (v7 == ++v8)
          goto LABEL_12;
      }
      if (statusOut == -16751)
        v10 = 4;
      else
        v10 = 3;
      *(_DWORD *)(DerivedStorage + 32) = v10;
    }
LABEL_12:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
}

uint64_t figSampleGeneratorBatch_CreateAndAddSampleBufferAtCursor(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, char a8, uint64_t (*a9)(uint64_t, uint64_t, CMSampleBufferRef), uint64_t a10, uint64_t a11, CMTimeValue *a12)
{
  uint64_t DerivedStorage;
  const void *v19;
  const void *epoch;
  uint64_t v21;
  const void *v23;
  const void *v24;
  unsigned int (*v25)(const void *, _QWORD, CMTimeEpoch *);
  CFMutableDictionaryRef *v26;
  uint64_t v27;
  CMSampleTimingInfo value;

  value.duration.value = 0;
  *(_QWORD *)&value.duration.timescale = 0;
  if (!a1 || !a12)
  {
    v21 = FigSignalErrorAt();
    v19 = 0;
    goto LABEL_12;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v19 = (const void *)MEMORY[0x19402D578](DerivedStorage + 8);
  if (!v19 || *(_DWORD *)(DerivedStorage + 32))
  {
    v21 = FigSignalErrorAt();
    goto LABEL_33;
  }
  v27 = a4;
  if (!*(_BYTE *)(DerivedStorage + 36) && *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144))
  {
    epoch = 0;
    if (sgffr_copyCursorSampleLocationAndDataSource((uint64_t)v19, (uint64_t)a2, 0, 0, 0, 0, 0, 0, 0, 0, (CFTypeRef *)&value.duration.timescale))goto LABEL_7;
    v23 = *(const void **)&value.duration.timescale;
    value.duration.epoch = 0;
    v26 = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
    if (*v26 && v23)
    {
      if (!CFDictionaryContainsKey(*v26, v23))
      {
        if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48))
        {
          v25 = *(unsigned int (**)(const void *, _QWORD, CMTimeEpoch *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 48);
          if (v25)
          {
            if (!v25(v23, *MEMORY[0x1E0C9AE00], &value.duration.epoch))
            {
              CFDictionarySetValue(*v26, v23, (const void *)value.duration.epoch);
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              if (value.duration.epoch)
              {
                CFRelease((CFTypeRef)value.duration.epoch);
                value.duration.epoch = 0;
              }
            }
          }
        }
      }
      v24 = CFDictionaryGetValue(*v26, v23);
      value.duration.epoch = (CMTimeEpoch)v24;
      if (v24)
      {
        CFRetain(v24);
        epoch = (const void *)value.duration.epoch;
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    v21 = FigSignalErrorAt();
    epoch = 0;
    if (!(_DWORD)v21)
      goto LABEL_7;
LABEL_33:
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
    goto LABEL_12;
  }
LABEL_6:
  epoch = 0;
LABEL_7:
  if (sgffr_createSampleBufferAtCursorUsingBatch((uint64_t)v19, a2, a3, v27, a5, a6, a7, a8, a9, a10, a11, (uint64_t)epoch, &value)|| !value.duration.value)
  {
    v21 = FigSignalErrorAt();
  }
  else
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 40), (const void *)value.duration.value);
    v21 = 0;
    *a12 = value.duration.value;
    value.duration.value = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  if (epoch)
    CFRelease(epoch);
LABEL_12:
  if (*(_QWORD *)&value.duration.timescale)
    CFRelease(*(CFTypeRef *)&value.duration.timescale);
  if (v19)
    CFRelease(v19);
  if (value.duration.value)
    CFRelease((CFTypeRef)value.duration.value);
  return v21;
}

uint64_t figSampleGeneratorBatch_Commit(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    figSampleGeneratorBatch_Commit_cold_1();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_DWORD *)(DerivedStorage + 32) || (v3 = *(const __CFDictionary **)DerivedStorage) == 0)
  {
    v4 = FigSignalErrorAt();
  }
  else if (*(_BYTE *)(DerivedStorage + 36))
  {
    *(_DWORD *)(DerivedStorage + 32) = 2;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    v4 = 0;
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 32) = 1;
    v6 = a1;
    v7 = 0;
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)figSampleGeneratorBatch_commitBatchApply, &v6);
    v4 = v7;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v4;
}

uint64_t figSampleGeneratorBatch_Cancel(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    figSampleGeneratorBatch_Commit_cold_1();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_DWORD *)(DerivedStorage + 32) == 2)
  {
    v3 = 0;
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 32) = 4;
    v5 = a1;
    v6 = 0;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)DerivedStorage, (CFDictionaryApplierFunction)figSampleGeneratorBatch_cancelBatchApply, &v5);
    v3 = v6;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v3;
}

uint64_t figSampleGeneratorBatch_GetState(uint64_t a1, _DWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t figSampleGeneratorBatch_commitBatchApply(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t (*v6)(const void *);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 24), a2);
  v6 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v6)
    result = v6(a2);
  else
    result = 4294954514;
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t figSampleGeneratorBatch_cancelBatchApply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t result;

  v5 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v5 >= 2uLL && (v6 = (uint64_t (*)(uint64_t))v5[3]) != 0)
    result = v6(a2);
  else
    result = 4294954514;
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t sgffr_initializeSharedMemoryPoolManagement()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  qword_1EE29F7F8 = result;
  byte_1EE29F808 = 1;
  return result;
}

uint64_t sgffr_expediteAllClientRequestsForScheduledIO(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t);

  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 32);
  if (v4)
    return v4(a2);
  return result;
}

uint64_t OUTLINED_FUNCTION_0()
{
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererCaptionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererCaptionProtocolGetProtocolID_sRegisterFigCaptionRendererCaptionProtocolTypeOnce, RegisterFigCaptionRendererCaptionProtocolType);
  return sFigCaptionRendererCaptionProtocolID;
}

uint64_t RegisterFigCaptionRendererCaptionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigStreamingAssetDownloadContentConfigGetAlternateQualifiers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t FigStreamingAssetDownloadContentConfigSetAlternateQualifiers(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t FigStreamingAssetDownloadContentConfigGetAlternate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t FigStreamingAssetDownloadContentConfigSetAlternate(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t FigStreamingAssetDownloadContentConfigGetMediaSelections(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t FigStreamingAssetDownloadContentConfigSetMediaSelections(uint64_t a1, const __CFArray *a2)
{
  *(_QWORD *)(a1 + 32) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  return 0;
}

uint64_t FigStreamingAssetDownloadContentConfigCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  dwContentConf_getTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *a2 = Instance;
  return 0;
}

uint64_t dwContentConf_getTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2F85F90;
  if (dwContentConf_getTypeID_once != -1)
    dispatch_once_f(&dwContentConf_getTypeID_once, &v1, (dispatch_function_t)dwConf_registerClass);
  return dwContentConf_getTypeID_typeID;
}

uint64_t FigStreamingAssetDownloadContentConfigCreateCopy(const __CFAllocator *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v7;
  CFTypeRef v8;
  const __CFArray *v9;
  const __CFArray *v10;

  if (!a2)
  {
    v7 = 0;
LABEL_10:
    *a3 = v7;
    return 0;
  }
  dwContentConf_getTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v7 = (_QWORD *)Instance;
    v8 = (CFTypeRef)a2[3];
    if (v8)
      v8 = CFRetain(v8);
    v7[3] = v8;
    v9 = (const __CFArray *)a2[2];
    if (v9)
      v7[2] = CFArrayCreateCopy(a1, v9);
    v10 = (const __CFArray *)a2[4];
    if (v10)
      v7[4] = CFArrayCreateCopy(a1, v10);
    goto LABEL_10;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingAssetDownloadConfigGetPrimaryContentConfig(uint64_t a1, __CFString *a2)
{
  uint64_t v3;

  if (a2 == CFSTR("kFigEnvironmentalCondition_DefaultKey"))
  {
    v3 = a1 + 24;
  }
  else
  {
    if (a2 != CFSTR("kFigEnvironmentalCondition_OnExpensiveNetworkKey"))
      return 0;
    v3 = a1 + 32;
  }
  return *(_QWORD *)v3;
}

uint64_t FigStreamingAssetDownloadConfigGetDefaultPrimaryContentConfig(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t FigStreamingAssetDownloadConfigSetPrimaryContentConfig(uint64_t a1, CFTypeRef cf, __CFString *a3)
{
  uint64_t result;
  CFTypeRef v5;
  CFTypeRef v6;

  if (a3 == CFSTR("kFigEnvironmentalCondition_DefaultKey"))
  {
    if (cf)
      v5 = CFRetain(cf);
    else
      v5 = 0;
    result = 0;
    *(_QWORD *)(a1 + 24) = v5;
  }
  else if (a3 == CFSTR("kFigEnvironmentalCondition_OnExpensiveNetworkKey"))
  {
    if (cf)
      v6 = CFRetain(cf);
    else
      v6 = 0;
    result = 0;
    *(_QWORD *)(a1 + 32) = v6;
  }
  else
  {
    return 4294950643;
  }
  return result;
}

uint64_t FigStreamingAssetDownloadConfigGetAuxConfigs(uint64_t a1, __CFString *a2)
{
  uint64_t v3;

  if (a2 == CFSTR("kFigEnvironmentalCondition_DefaultKey"))
  {
    v3 = a1 + 40;
  }
  else
  {
    if (a2 != CFSTR("kFigEnvironmentalCondition_OnExpensiveNetworkKey"))
      return 0;
    v3 = a1 + 48;
  }
  return *(_QWORD *)v3;
}

uint64_t FigStreamingAssetDownloadConfigGetDefaultAuxConfigs(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t FigStreamingAssetDownloadConfigAddAuxConfig(uint64_t a1, void *value, __CFString *a3)
{
  __CFArray *Mutable;

  if (a3 == CFSTR("kFigEnvironmentalCondition_DefaultKey"))
  {
    Mutable = *(__CFArray **)(a1 + 40);
    if (Mutable
      || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
          (*(_QWORD *)(a1 + 40) = Mutable) != 0))
    {
LABEL_9:
      CFArrayAppendValue(Mutable, value);
      return 0;
    }
  }
  else
  {
    if (a3 != CFSTR("kFigEnvironmentalCondition_OnExpensiveNetworkKey"))
      return 4294950643;
    Mutable = *(__CFArray **)(a1 + 48);
    if (Mutable)
      goto LABEL_9;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 48) = Mutable;
    if (Mutable)
      goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForPrimary(uint64_t a1, __CFArray **a2)
{
  __CFArray *Mutable;
  __CFArray *v5;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v5 = Mutable;
  if (*(_QWORD *)(a1 + 24))
    CFArrayAppendValue(Mutable, CFSTR("kFigEnvironmentalCondition_DefaultKey"));
  if (*(_QWORD *)(a1 + 32))
    CFArrayAppendValue(v5, CFSTR("kFigEnvironmentalCondition_OnExpensiveNetworkKey"));
  *a2 = v5;
  return 0;
}

uint64_t FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForAux(uint64_t a1, __CFArray **a2)
{
  CFMutableArrayRef Mutable;
  __CFArray *v5;
  const __CFArray *v6;
  const __CFArray *v7;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v5 = Mutable;
  v6 = *(const __CFArray **)(a1 + 40);
  if (v6 && CFArrayGetCount(v6) >= 1)
    CFArrayAppendValue(v5, CFSTR("kFigEnvironmentalCondition_DefaultKey"));
  v7 = *(const __CFArray **)(a1 + 48);
  if (v7)
  {
    if (CFArrayGetCount(v7) >= 1)
      CFArrayAppendValue(v5, CFSTR("kFigEnvironmentalCondition_OnExpensiveNetworkKey"));
  }
  *a2 = v5;
  return 0;
}

xpc_object_t FigStreamingAssetDownloadConfigCopySerializedRepresentation(uint64_t a1)
{
  xpc_object_t empty;
  uint64_t v3;
  xpc_object_t v4;
  void *v5;
  uint64_t v6;
  xpc_object_t v7;
  void *v8;
  int v9;
  xpc_object_t v10;
  int v11;
  xpc_object_t v12;
  __int128 v13;
  xpc_object_t value[2];
  __int128 v16;
  __int128 v17;
  CFMutableDictionaryRef v18;

  v18 = 0;
  empty = xpc_dictionary_create_empty();
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = downloadContentConfig_copySerializedRepresentation(v3, &v18);
    if (v4)
    {
      v5 = v4;
      xpc_dictionary_set_value(empty, "DefaultPrimaryConfig", v4);
      xpc_release(v5);
    }
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = downloadContentConfig_copySerializedRepresentation(v6, &v18);
    if (v7)
    {
      v8 = v7;
      xpc_dictionary_set_value(empty, "OnExpensiveNetworkPrimaryConfig", v7);
      xpc_release(v8);
    }
  }
  FigXPCRelease();
  value[0] = 0;
  v9 = downloadConfig_serializeAuxContentConfigsGuts(*(const __CFArray **)(a1 + 40), &v18, value);
  v10 = value[0];
  if (v9)
  {
    FigXPCRelease();
  }
  else
  {
    if (value[0])
    {
      xpc_dictionary_set_value(empty, "DefaultAuxConfigs", value[0]);
      value[0] = 0;
      xpc_release(v10);
    }
    v11 = downloadConfig_serializeAuxContentConfigsGuts(*(const __CFArray **)(a1 + 48), &v18, value);
    v12 = value[0];
    if (v11 || !value[0])
    {
      FigXPCRelease();
      if (v11)
        goto LABEL_15;
    }
    else
    {
      xpc_dictionary_set_value(empty, "OnExpensiveNetworkAuxConfigs", value[0]);
      xpc_release(v12);
      FigXPCRelease();
    }
    xpc_dictionary_set_BOOL(empty, "OptimizesAuxiliaryContentConfigurations", *(_BYTE *)(a1 + 16) != 0);
    xpc_dictionary_set_BOOL(empty, "DownloadsInterstitialAssets", *(_BYTE *)(a1 + 17) != 0);
    FigXPCMessageSetCFString();
    FigXPCMessageSetCFData();
    v13 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)value = *(_OWORD *)(a1 + 72);
    v16 = v13;
    v17 = *(_OWORD *)(a1 + 104);
    FigXPCMessageSetCMTimeRange();
  }
LABEL_15:
  if (v18)
    CFRelease(v18);
  return empty;
}

uint64_t FigStreamingAssetDownloadConfigCreateWithSerializedConfig(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v5;
  CFTypeRef v6;
  xpc_object_t value;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  CFTypeRef cf;
  CFTypeRef v14;

  cf = 0;
  v14 = 0;
  v5 = FigStreamingAssetDownloadConfigCreate(a1, (uint64_t *)&v14);
  if ((_DWORD)v5)
    goto LABEL_16;
  v6 = v14;
  value = xpc_dictionary_get_value(a2, "DefaultPrimaryConfig");
  if (value)
    *((_QWORD *)v6 + 3) = downloadContentConfig_deserializeAndCopyContentConfig(value, (CFMutableDictionaryRef *)&cf);
  v8 = xpc_dictionary_get_value(a2, "OnExpensiveNetworkPrimaryConfig");
  if (v8)
    *((_QWORD *)v6 + 4) = downloadContentConfig_deserializeAndCopyContentConfig(v8, (CFMutableDictionaryRef *)&cf);
  if ((v9 = xpc_dictionary_get_value(a2, "DefaultAuxConfigs")) != 0
    && (v5 = downloadConfig_deserializeAuxContentConfigsGuts(v9, (CFMutableDictionaryRef *)&cf, (__CFArray **)v6 + 5),
        (_DWORD)v5)
    || (v10 = xpc_dictionary_get_value(a2, "OnExpensiveNetworkAuxConfigs")) != 0
    && (v5 = downloadConfig_deserializeAuxContentConfigsGuts(v10, (CFMutableDictionaryRef *)&cf, (__CFArray **)v6 + 6),
        (_DWORD)v5))
  {
LABEL_16:
    v11 = v5;
  }
  else
  {
    *((_BYTE *)v6 + 16) = xpc_dictionary_get_BOOL(a2, "OptimizesAuxiliaryContentConfigurations");
    *((_BYTE *)v6 + 17) = xpc_dictionary_get_BOOL(a2, "DownloadsInterstitialAssets");
    FigXPCMessageCopyCFString();
    FigXPCMessageCopyCFData();
    FigXPCMessageGetCMTimeRange();
    v11 = 0;
    *a3 = v6;
    v14 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  return v11;
}

uint64_t FigStreamingAssetDownloadConfigCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  dwconf_getTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *a2 = Instance;
  return 0;
}

uint64_t FigStreamingAssetDownloadConfigGetOptimizesAuxiliaryContentConfigurations(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t FigStreamingAssetDownloadConfigSetOptimizesAuxiliaryContentConfigurations(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 16) = a2;
  return 0;
}

uint64_t FigStreamingAssetDownloadConfigGetDownloadsInterstitialAssets(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t FigStreamingAssetDownloadConfigSetDownloadsInterstitialAssets(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 17) = a2;
  return 0;
}

CFTypeRef FigStreamingAssetDownloadConfigCopyAssetNameAndImage(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeRef v6;
  CFTypeRef result;

  v6 = *(CFTypeRef *)(a1 + 56);
  if (v6)
    v6 = CFRetain(v6);
  *a2 = v6;
  result = *(CFTypeRef *)(a1 + 64);
  if (result)
    result = CFRetain(result);
  *a3 = result;
  return result;
}

CFTypeRef FigStreamingAssetDownloadConfigSetAssetNameAndImage(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeRef v5;
  CFTypeRef result;

  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  *(_QWORD *)(a1 + 56) = v5;
  if (a3)
    result = CFRetain(a3);
  else
    result = 0;
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

__n128 FigStreamingAssetDownloadConfigGetTimeRange@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 104);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 FigStreamingAssetDownloadConfigSetTimeRange(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 88) = v3;
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t dwconf_getTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2F86000;
  if (dwconf_getTypeID_once != -1)
    dispatch_once_f(&dwconf_getTypeID_once, &v1, (dispatch_function_t)dwConf_registerClass);
  return dwconf_getTypeID_typeID;
}

uint64_t FigStreamingAssetDownloadConfigCreateCopy(const __CFAllocator *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;
  const __CFData *v8;
  const __CFString *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  __int128 v12;
  __int128 v13;

  if (!a2)
  {
    v7 = 0;
LABEL_13:
    *a3 = v7;
    return 0;
  }
  dwconf_getTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v7 = Instance;
    v8 = *(const __CFData **)(a2 + 64);
    if (v8)
      *(_QWORD *)(Instance + 64) = CFDataCreateCopy(a1, v8);
    v9 = *(const __CFString **)(a2 + 56);
    if (v9)
      *(_QWORD *)(v7 + 56) = CFStringCreateCopy(a1, v9);
    v10 = *(const __CFArray **)(a2 + 40);
    if (v10)
      *(_QWORD *)(v7 + 40) = CFArrayCreateMutableCopy(a1, 0, v10);
    v11 = *(const __CFArray **)(a2 + 48);
    if (v11)
      *(_QWORD *)(v7 + 48) = CFArrayCreateMutableCopy(a1, 0, v11);
    *(_WORD *)(v7 + 16) = *(_WORD *)(a2 + 16);
    v12 = *(_OWORD *)(a2 + 72);
    v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v7 + 88) = v13;
    *(_OWORD *)(v7 + 72) = v12;
    FigStreamingAssetDownloadContentConfigCreateCopy(a1, *(_QWORD **)(a2 + 24), (_QWORD *)(v7 + 24));
    FigStreamingAssetDownloadContentConfigCreateCopy(a1, *(_QWORD **)(a2 + 32), (_QWORD *)(v7 + 32));
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

void dwContentConf_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
}

__CFString *dwContentConf_copyDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t v7;
  const void *v8;
  const __CFArray *v9;
  CFIndex Count;
  void *v11;
  CFIndex i;
  void *ValueAtIndex;
  CFStringRef v14;
  CFStringRef v15;
  uint64_t v16;
  const void *v17;
  const __CFArray *v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex j;
  const __CFArray *v22;
  __CFString *v23;
  __CFString *v24;
  uint64_t v25;
  const void *v26;
  void *v28;

  if (!a1)
    return 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("<"));
    v5 = CFCopyDescription(*(CFTypeRef *)(a1 + 24));
    if (v5)
    {
      v6 = v5;
      v7 = FigCFStringCopyWithIndent();
      if (v7)
      {
        v8 = (const void *)v7;
        CFStringAppendFormat(v4, 0, CFSTR("\n%@"), v7);
        CFRelease(v8);
      }
      CFRelease(v6);
    }
    v9 = *(const __CFArray **)(a1 + 16);
    if (v9)
    {
      Count = CFArrayGetCount(v9);
      v11 = (void *)MEMORY[0x19403137C]();
      if (Count >= 1)
      {
        v28 = v11;
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v14 = CFCopyDescription((CFTypeRef)objc_msgSend(ValueAtIndex, "_predicate"));
          else
            v14 = CFStringCreateWithCString(v2, (const char *)objc_msgSend((id)objc_msgSend(ValueAtIndex, "description"), "UTF8String"), 0x8000100u);
          v15 = v14;
          if (v14)
          {
            v16 = FigCFStringCopyWithIndent();
            if (v16)
            {
              v17 = (const void *)v16;
              CFStringAppendFormat(v4, 0, CFSTR("\n%@"), v16);
              CFRelease(v17);
            }
            CFRelease(v15);
          }
        }
        v11 = v28;
      }
    }
    else
    {
      v11 = (void *)MEMORY[0x19403137C]();
    }
    objc_autoreleasePoolPop(v11);
    v18 = *(const __CFArray **)(a1 + 32);
    if (v18)
    {
      v19 = CFArrayGetCount(v18);
      if (v19 >= 1)
      {
        v20 = v19;
        for (j = 0; j != v20; ++j)
        {
          v22 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), j);
          v23 = FigMediaSelectionArrayCopyDescription(v2, v22);
          if (v23)
          {
            v24 = v23;
            v25 = FigCFStringCopyWithIndent();
            if (v25)
            {
              v26 = (const void *)v25;
              CFStringAppendFormat(v4, 0, CFSTR("\n%@"), v25);
              CFRelease(v26);
            }
            CFRelease(v24);
          }
        }
      }
    }
    CFStringAppendFormat(v4, 0, CFSTR("\n>"));
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

uint64_t dwConf_registerClass(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

xpc_object_t downloadContentConfig_copySerializedRepresentation(uint64_t a1, CFMutableDictionaryRef *a2)
{
  void *v4;
  xpc_object_t empty;
  xpc_object_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  CFMutableDictionaryRef *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  xpc_object_t value;
  uint64_t v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x19403137C]();
  value = 0;
  empty = xpc_dictionary_create_empty();
  if (!empty)
  {
    FigSignalErrorAt();
    goto LABEL_19;
  }
  v16 = a2;
  v6 = xpc_array_create_empty();
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v7 = *(void **)(a1 + 16);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
        v22 = 0;
        if ((objc_msgSend((id)objc_opt_class(), "conformsToProtocol:", &unk_1EE2A5860) & 1) != 0
          && objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v12, 1, &v22))
        {
          v13 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          xpc_array_append_value(v6, v13);
          xpc_release(v13);
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    }
    while (v9);
  }
  if (xpc_array_get_count(v6))
    xpc_dictionary_set_value(empty, "SerializedQualifiersKey", v6);
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
    goto LABEL_18;
  if (!FigAlternateCopyAsXPCObjectWithContext(v14, v16, &value))
  {
    if (value)
    {
      xpc_dictionary_set_value(empty, "SerializedAlternateKey", value);
      xpc_release(value);
    }
LABEL_18:
    FigXPCMessageSetCFArray();
  }
LABEL_19:
  FigXPCRelease();
  objc_autoreleasePoolPop(v4);
  return empty;
}

uint64_t downloadConfig_serializeAuxContentConfigsGuts(const __CFArray *a1, CFMutableDictionaryRef *a2, _QWORD *a3)
{
  CFIndex Count;
  CFIndex v7;
  xpc_object_t empty;
  CFIndex v9;
  const void *ValueAtIndex;
  xpc_object_t v11;
  void *v12;
  uint64_t v13;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v7 = Count;
      empty = 0;
      v9 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
        v11 = downloadContentConfig_copySerializedRepresentation((uint64_t)ValueAtIndex, a2);
        if (v11)
        {
          v12 = v11;
          if (!empty)
          {
            empty = xpc_array_create_empty();
            if (!empty)
            {
              v13 = FigSignalErrorAt();
              goto LABEL_12;
            }
          }
          xpc_array_append_value(empty, v12);
          xpc_release(v12);
        }
        if (v7 == ++v9)
          goto LABEL_11;
      }
    }
  }
  empty = 0;
LABEL_11:
  v13 = 0;
  *a3 = empty;
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  return v13;
}

uint64_t downloadContentConfig_deserializeAndCopyContentConfig(void *a1, CFMutableDictionaryRef *a2)
{
  void *v4;
  CFAllocatorRef v5;
  uint64_t v6;
  void *v7;
  xpc_object_t value;
  int64_t count;
  int64_t v10;
  size_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  FigAlternatePredicateValidator *v18;
  FigAlternatePredicateValidator *v19;
  BOOL v20;
  CFTypeRef v21;
  uint64_t v22;
  xpc_object_t v23;
  CFMutableDictionaryRef *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v4 = (void *)MEMORY[0x19403137C]();
  v5 = CFGetAllocator(0);
  if (!FigStreamingAssetDownloadContentConfigCreate((uint64_t)v5, &v28))
  {
    v6 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    if (v6)
    {
      v7 = (void *)v6;
      v25 = a2;
      v26 = a1;
      v27 = v4;
      value = xpc_dictionary_get_value(a1, "SerializedQualifiersKey");
      count = xpc_array_get_count(value);
      if (count >= 1)
      {
        v10 = count;
        for (i = 0; v10 != i; ++i)
        {
          xpc_array_get_value(value, i);
          v30 = 0;
          v31 = 0;
          v32[0] = 0;
          v12 = _CFXPCCreateCFObjectFromXPCObject();
          if (!v12)
          {
            FigSignalErrorAt();
            continue;
          }
          v13 = (void *)v12;
          v14 = (void *)objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v12, &v30);
          if (v14)
          {
            v15 = (uint64_t)v14;
            v29 = 0;
            v16 = objc_msgSend(v14, "_predicate");
            if (v16
              && (v17 = (void *)v16,
                  (v18 = -[FigAlternatePredicateValidator initWithPredicate:]([FigAlternatePredicateValidator alloc], "initWithPredicate:", v16)) != 0))
            {
              v19 = v18;
              v20 = -[FigAlternatePredicateValidator validateWithError:](v18, "validateWithError:", &v29);

              if (v20)
                objc_msgSend(v17, "allowEvaluation");
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          else
          {
            v15 = objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v13, &v31);
            if (!v15)
            {
              v15 = objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v13, v32);

              if (!v15)
                continue;
              goto LABEL_13;
            }
          }

LABEL_13:
          objc_msgSend(v7, "addObject:", v15);
        }
      }
      if (objc_msgSend(v7, "count"))
      {
        v21 = CFRetain(v7);
        v22 = v28;
        *(_QWORD *)(v28 + 16) = v21;
      }
      else
      {
        v22 = v28;
      }
      v4 = v27;
      v23 = xpc_dictionary_get_value(v26, "SerializedAlternateKey");
      if (v23)
        FigAlternateCreateWithXPCObject(v23, v25, (CFTypeRef *)(v22 + 24));
      FigXPCMessageCopyCFArray();
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  objc_autoreleasePoolPop(v4);
  return v28;
}

uint64_t downloadConfig_deserializeAuxContentConfigsGuts(void *a1, CFMutableDictionaryRef *a2, __CFArray **a3)
{
  int64_t count;
  int64_t v7;
  __CFArray *Mutable;
  size_t v9;
  const __CFAllocator *v10;
  const CFArrayCallBacks *v11;
  xpc_object_t value;
  uint64_t v13;
  const void *v14;
  uint64_t v16;

  count = xpc_array_get_count(a1);
  if (count >= 1)
  {
    v7 = count;
    Mutable = 0;
    v9 = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      value = xpc_array_get_value(a1, v9);
      v13 = downloadContentConfig_deserializeAndCopyContentConfig(value, a2);
      if (v13)
      {
        v14 = (const void *)v13;
        if (!Mutable)
        {
          Mutable = CFArrayCreateMutable(v10, 0, v11);
          if (!Mutable)
          {
            v16 = FigSignalErrorAt();
            CFRelease(v14);
            return v16;
          }
        }
        CFArrayAppendValue(Mutable, v14);
        CFRelease(v14);
      }
      if (v7 == ++v9)
        goto LABEL_10;
    }
  }
  Mutable = 0;
LABEL_10:
  *a3 = Mutable;
  return 0;
}

void dwConf_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[7];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[8];
  if (v7)
    CFRelease(v7);
}

__CFString *dwConf_copyDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFStringRef v4;
  CFStringRef v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  CFStringRef v12;
  CFStringRef v13;
  __int128 v15;
  CFStringRef v16;
  CMTimeRange range;

  if (!a1)
    return 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    v4 = CFCopyDescription(*(CFTypeRef *)(a1 + 24));
    if (v4)
    {
      v5 = v4;
      CFStringAppendFormat(Mutable, 0, CFSTR("\nPrimary:\n%@"), v4);
      CFRelease(v5);
    }
    v6 = *(const __CFArray **)(a1 + 40);
    if (v6)
    {
      Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        v8 = Count;
        v9 = 0;
        v10 = Count;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v9);
          v12 = CFCopyDescription(ValueAtIndex);
          if (v12)
          {
            v13 = v12;
            CFStringAppendFormat(Mutable, 0, CFSTR("\nAux %d/%d:\n%@"), v9, v10, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v8 != v9);
      }
    }
    if ((*(_BYTE *)(a1 + 84) & 1) != 0
      && (*(_BYTE *)(a1 + 108) & 1) != 0
      && !*(_QWORD *)(a1 + 112)
      && (*(_QWORD *)(a1 + 96) & 0x8000000000000000) == 0)
    {
      v15 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)&range.start.value = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&range.start.epoch = v15;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 104);
      v16 = CMTimeRangeCopyDescription(v2, &range);
      CFStringAppendFormat(Mutable, 0, CFSTR("\nTimeRange: %@"), v16);
      if (v16)
        CFRelease(v16);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigVideoCompositorCreatevImage(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t DesiredSourcePixelBufferAttributes;
  uint64_t DerivedStorage;
  void *value;
  __int128 v11;
  _BYTE v12[20];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  FigVideoCompositorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
    return v4;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v6 = Mutable;
  value = 0;
  v11 = *(_OWORD *)"v024f024ARGB ";
  qmemcpy(v12, "024x02fx024p02fpr46l", sizeof(v12));
  DesiredSourcePixelBufferAttributes = FigVideoCompositorCreateDesiredSourcePixelBufferAttributes((uint64_t)&v11, 9, (CFMutableDictionaryRef *)&value);
  if (!(_DWORD)DesiredSourcePixelBufferAttributes)
    CFDictionarySetValue(v6, CFSTR("SourcePixelBufferAttributes"), value);
  if (value)
    CFRelease(value);
  if ((_DWORD)DesiredSourcePixelBufferAttributes)
  {
    CFRelease(v6);
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = v6;
    *(_OWORD *)(DerivedStorage + 56) = 0u;
    *(_OWORD *)(DerivedStorage + 72) = 0u;
    *(_OWORD *)(DerivedStorage + 88) = 0u;
    *(_OWORD *)(DerivedStorage + 104) = 0u;
    *(_OWORD *)(DerivedStorage + 120) = 0u;
    *(_OWORD *)(DerivedStorage + 136) = 0u;
    *(_OWORD *)(DerivedStorage + 152) = 0u;
    *(_OWORD *)(DerivedStorage + 168) = 0u;
    *a3 = 0;
  }
  return DesiredSourcePixelBufferAttributes;
}

void vivc_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
  via_cleanupVImageAdaptor(DerivedStorage + 56);
  via_cleanupVImageAdaptor(DerivedStorage + 120);
  free(*(void **)(DerivedStorage + 48));
}

__CFString *vivc_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  CFDictionaryRef *DerivedStorage;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoCompositor_vImage %p>\n"), a1);
  CFDictionaryApplyFunction(*DerivedStorage, (CFDictionaryApplierFunction)vivc_appendDebugDescriptionOfProperty, Mutable);
  return Mutable;
}

uint64_t vivc_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFDictionaryRef *v7;
  const void *UInt32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v7 = (CFDictionaryRef *)DerivedStorage;
  if (FigCFEqual())
  {
    *a4 = *MEMORY[0x1E0C9AE50];
  }
  else
  {
    if (FigCFEqual())
    {
      UInt32 = (const void *)FigCFNumberCreateUInt32();
    }
    else
    {
      UInt32 = CFDictionaryGetValue(*v7, a2);
      if (UInt32)
        UInt32 = CFRetain(UInt32);
    }
    *a4 = UInt32;
  }
  return 0;
}

uint64_t vivc_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef cf[7];

  cf[6] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  v8 = 0;
  cf[1] = CFSTR("RenderDimensions");
  cf[2] = CFSTR("RenderPixelAspectRatio");
  cf[3] = CFSTR("RenderEdgeProcessingPixels");
  cf[4] = CFSTR("DestinationPixelBufferDesiredAttributes");
  cf[5] = CFSTR("RenderScale");
  while (!FigCFEqual())
  {
    v8 += 8;
    if (v8 == 40)
      goto LABEL_12;
  }
  CFGetAllocator(a1);
  vivc_CopyProperty((uint64_t)a1, a2, v9, cf);
  if (!FigCFEqual())
  {
    v10 = *(const void **)(v7 + 8);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v7 + 8) = 0;
    }
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
LABEL_12:
  CFDictionarySetValue(*(CFMutableDictionaryRef *)v7, a2, a3);
  return 0;
}

double via_cleanupVImageAdaptor(uint64_t a1)
{
  const void *v2;
  double result;

  if (a1)
  {
    via_releaseVImageBuffer(a1);
    v2 = *(const void **)(a1 + 48);
    if (v2)
      CFRelease(v2);
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t via_releaseVImageBuffer(uint64_t result)
{
  uint64_t v1;
  __CVBuffer *v2;
  void *BaseAddress;
  const void *v4;

  if (result)
  {
    v1 = result;
    v2 = *(__CVBuffer **)(result + 32);
    if (!v2)
    {
      result = *(_QWORD *)v1;
      if (!*(_QWORD *)v1)
        return result;
      free((void *)result);
      goto LABEL_13;
    }
    if (!*(_BYTE *)(v1 + 40))
    {
      result = CVPixelBufferLockBaseAddress(v2, 0);
      if ((_DWORD)result)
        return result;
      *(_BYTE *)(v1 + 40) = 1;
      v2 = *(__CVBuffer **)(v1 + 32);
    }
    BaseAddress = CVPixelBufferGetBaseAddress(v2);
    result = CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v1 + 32), 0);
    if (!(_DWORD)result)
    {
      *(_BYTE *)(v1 + 40) = 0;
      v4 = *(const void **)(v1 + 32);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(v1 + 32) = 0;
      }
      if (BaseAddress != *(void **)v1)
        return FigSignalErrorAt();
LABEL_13:
      result = 0;
      *(_QWORD *)v1 = 0;
    }
  }
  return result;
}

void vivc_appendDebugDescriptionOfProperty(uint64_t a1, uint64_t a2, CFMutableStringRef theString)
{
  CFStringAppendFormat(theString, 0, CFSTR("  %@ : %@\n"), a1, a2);
}

uint64_t vivc_RenderFrame(const void *a1, int a2, _DWORD *a3, const void **a4, uint64_t a5, uint64_t a6, uint64_t a7, const __CFDictionary *a8, uint64_t a9, uint64_t a10)
{
  uint64_t DerivedStorage;
  CGFloat *v15;
  uint64_t v16;
  uint64_t RenderDimensions;
  uint64_t PixelBuffer;
  const __CFArray *v19;
  uint64_t v20;
  const __CFDictionary **v21;
  CGAffineTransform *p_t1;
  const void *ValueAtIndex;
  __CVBuffer *SourcePixelBuffer;
  OSType PixelFormatType;
  uint64_t v26;
  const __CFAllocator *v27;
  CFMutableArrayRef Mutable;
  uint64_t i;
  CVPixelBufferPoolRef *v30;
  CFAllocatorRef *v31;
  int v32;
  const void *v33;
  uint64_t DestinationPixelBufferPool;
  const void *v35;
  CGFloat a;
  __CVBuffer *v37;
  OSType v38;
  const __CFDictionary *v39;
  int32x4_t v40;
  int32x4_t v41;
  const __CFDictionary *v42;
  int UInt64;
  int v44;
  VTPixelTransferSessionRef *v45;
  uint64_t v46;
  CFStringRef *v47;
  signed int v48;
  CFStringRef v49;
  CFTypeRef v50;
  int Width;
  __CVBuffer *v52;
  int v53;
  int Height;
  VTPixelTransferSessionRef *v55;
  size_t v56;
  OpaqueVTPixelTransferSession *v57;
  int v58;
  vImage_Buffer *v59;
  vImage_Error v60;
  CGFloat v61;
  OSType v62;
  CVBufferRef *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t j;
  const __CFString *v67;
  CFTypeRef v68;
  const void *v69;
  uint64_t v70;
  OpaqueVTPixelTransferSession *BaseAddress;
  vImage_Error v72;
  __int128 v73;
  CFIndex Count;
  CGFloat v76;
  CGFloat v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  const void *v83;
  uint64_t v84;
  uint64_t v85;
  __CVBuffer *v86;
  __CVBuffer *v87;
  signed int v88;
  uint64_t v89;
  int v90;
  _BOOL4 IsPixelBufferOpaque;
  const __CFDictionary *v92;
  const __CFDictionary *v93;
  CGColorSpace *ColorSpaceFromAttachments;
  OSType v95;
  CFTypeRef v96;
  const __CFString *v97;
  _BOOL4 v98;
  const vImage_ARGBToYpCbCrMatrix **v99;
  const vImage_ARGBToYpCbCrMatrix *v100;
  vImageCVImageFormat *v101;
  int v102;
  int v103;
  int v104;
  __int128 v105;
  char *v106;
  vImagePixelCount v107;
  CGFloat v108;
  CGFloat v109;
  int v110;
  int v111;
  OSType v112;
  size_t v113;
  uint64_t v114;
  CVPixelBufferRef *v115;
  size_t BytesPerRow;
  uint64_t v117;
  int v118;
  uint64_t CroppedSourceCleanApertureRect;
  uint64_t AffineTransform;
  uint64_t v121;
  __CVBuffer *v122;
  CGFloat v123;
  vImagePixelCount v124;
  double v125;
  int v126;
  size_t v127;
  void *v128;
  size_t v129;
  vImagePixelCount v130;
  vImagePixelCount v131;
  uint64_t v132;
  int v133;
  char *data;
  size_t rowBytes;
  char *v136;
  size_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unsigned int v142;
  const __CFDictionary *v143;
  const __CFDictionary *v144;
  const __CFDictionary *Copy;
  OSType v146;
  CFTypeRef v147;
  VTPixelTransferSessionRef *v148;
  __CVBuffer *v149;
  OpaqueVTPixelTransferSession *v150;
  VTSessionRef *v151;
  const vImage_ARGBToYpCbCrMatrix **v152;
  const vImage_ARGBToYpCbCrMatrix *v153;
  const __CFDictionary *v154;
  const __CFDictionary *v155;
  CGColorSpace *v156;
  vImageCVImageFormat *v157;
  int v158;
  int v159;
  const __CFString *v160;
  const void *v161;
  const __CFString *v162;
  const __CFString *v163;
  VTPixelTransferSessionRef *pixelTransferSessionOut;
  vImage_Buffer *buf;
  const __CFAllocator *allocator;
  const __CFArray *theArray;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  const __CFString *key;
  CFIndex v173;
  CFTypeRef v174;
  uint64_t v175;
  __CVBuffer *buffer;
  CGAffineTransform v177;
  CFTypeRef v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  CFTypeRef v182;
  CGSize v183;
  CGAffineTransform v184;
  int v185;
  int8x16_t v186;
  vImage_Buffer dest;
  CGAffineTransform v188;
  vImage_Buffer srcTop;
  vImage_Buffer src;
  CGAffineTransform t2;
  CGAffineTransform v192;
  CGAffineTransform v193;
  CGAffineTransform v194;
  CGAffineTransform pixelBufferOut;
  __int128 v196;
  CGAffineTransform v197;
  CGAffineTransform t1;
  CGAffineTransform desiredFormat;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v183.width = 0.0;
  v183.height = 0.0;
  v182 = 0;
  v15 = (CGFloat *)MEMORY[0x1E0C9BAA8];
  v169 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  v170 = *MEMORY[0x1E0C9BAA8];
  v179 = *MEMORY[0x1E0C9BAA8];
  v180 = v169;
  v168 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  v181 = v168;
  v178 = 0;
  if (!DerivedStorage)
  {
    PixelBuffer = FigSignalErrorAt();
    goto LABEL_93;
  }
  v16 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 24))
  {
    RenderDimensions = FigSignalErrorAt();
    goto LABEL_100;
  }
  RenderDimensions = FigVideoCompositorPropertiesGetRenderDimensions(*(const __CFDictionary **)DerivedStorage, &v183);
  if ((_DWORD)RenderDimensions)
    goto LABEL_100;
  *(_OWORD *)&desiredFormat.a = *(_OWORD *)a9;
  desiredFormat.c = *(CGFloat *)(a9 + 16);
  RenderDimensions = FigVCLayerDefinitionCreateLayerDefinitionArray(a2, a3, a4, a8, v183.width, v183.height, (uint64_t)&desiredFormat, (__CFArray **)&v182);
  if ((_DWORD)RenderDimensions)
    goto LABEL_100;
  RenderDimensions = FigVideoCompositorCopyDestinationPixelBufferWithoutComposingIfPossible(*(const __CFDictionary **)v16, (const __CFArray *)v182, &v178);
  if ((_DWORD)RenderDimensions)
    goto LABEL_100;
  if (v178)
    goto LABEL_7;
  v19 = (const __CFArray *)v182;
  v20 = CMBaseObjectGetDerivedStorage();
  pixelBufferOut.a = 0.0;
  *(_OWORD *)&desiredFormat.a = *(_OWORD *)"024x02fx024p02fpv024f024ARGB ";
  *(_OWORD *)&t1.a = *(_OWORD *)"v024f024ARGB ";
  v21 = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if ((int)FigVideoCompositorGetBestBitDepthForCompositorPropertiesAndLayerDefinitions(*v21, v19) <= 8)
    p_t1 = &t1;
  else
    p_t1 = &desiredFormat;
  if (!v19)
    goto LABEL_101;
  if (CFArrayGetCount(v19) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v19, 0);
    if (ValueAtIndex)
    {
      SourcePixelBuffer = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)ValueAtIndex);
      if (SourcePixelBuffer)
      {
        PixelFormatType = CVPixelBufferGetPixelFormatType(SourcePixelBuffer);
        v26 = 0;
        while (*(_DWORD *)((char *)&p_t1->a + v26) != PixelFormatType)
        {
          v26 += 4;
          if (v26 == 16)
            goto LABEL_20;
        }
        *(_DWORD *)((char *)&p_t1->a + v26) = LODWORD(p_t1->a);
        LODWORD(p_t1->a) = PixelFormatType;
        goto LABEL_20;
      }
    }
LABEL_101:
    Mutable = 0;
    goto LABEL_23;
  }
LABEL_20:
  v27 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v27, 4, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    for (i = 0; i != 16; i += 4)
      FigCFArrayAppendInt32();
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_23:
  v30 = (CVPixelBufferPoolRef *)(v20 + 8);
  v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (*(_QWORD *)(v20 + 8))
  {
    v32 = FigCFEqual();
    v33 = *(const void **)(v20 + 8);
    if (v32)
    {
      if (v33)
        goto LABEL_34;
    }
    else if (v33)
    {
      CFRelease(v33);
      *v30 = 0;
    }
  }
  DestinationPixelBufferPool = FigVideoCompositorCreateDestinationPixelBufferPool(*(const __CFDictionary **)v20, (uint64_t)CFSTR("vimage-vc-output"), Mutable, (_QWORD *)(v20 + 8), 0);
  if ((_DWORD)DestinationPixelBufferPool)
  {
    PixelBuffer = DestinationPixelBufferPool;
    goto LABEL_38;
  }
  v35 = *(const void **)(v20 + 16);
  *(_QWORD *)(v20 + 16) = Mutable;
  if (Mutable)
    CFRetain(Mutable);
  if (v35)
    CFRelease(v35);
LABEL_34:
  PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(*v31, *v30, (CVPixelBufferRef *)&pixelBufferOut);
  a = pixelBufferOut.a;
  if ((_DWORD)PixelBuffer
    || (PixelBuffer = FigVideoCompositorSetDestinationPixelBufferColorProperties(*(__CVBuffer **)&pixelBufferOut.a, *(CFDictionaryRef *)v20, v19), a = pixelBufferOut.a, (_DWORD)PixelBuffer)|| (PixelBuffer = FigVideoCompositorSetDestinationPixelBufferGeometricProperties(*(__CVBuffer **)&pixelBufferOut.a, *(const __CFDictionary **)v20), a = pixelBufferOut.a, (_DWORD)PixelBuffer))
  {
    if (a != 0.0)
      CFRelease(*(CFTypeRef *)&a);
  }
  else
  {
    v178 = *(CFTypeRef *)&pixelBufferOut.a;
    pixelBufferOut.a = 0.0;
  }
LABEL_38:
  if (Mutable)
    CFRelease(Mutable);
  if ((_DWORD)PixelBuffer)
    goto LABEL_91;
  v196 = xmmword_1932FA180;
  RenderDimensions = FigVideoCompositionInstructionGetBackgroundColorARGB(a8, (uint64_t)&v196);
  if ((_DWORD)RenderDimensions
    || (RenderDimensions = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(*(const __CFDictionary **)v16, 0, &v179, 0), (_DWORD)RenderDimensions))
  {
LABEL_100:
    PixelBuffer = RenderDimensions;
    goto LABEL_91;
  }
  theArray = (const __CFArray *)v182;
  v37 = (__CVBuffer *)v178;
  *(_OWORD *)&v177.a = v179;
  *(_OWORD *)&v177.c = v180;
  *(_OWORD *)&v177.tx = v181;
  memset(&dest, 0, sizeof(dest));
  pixelTransferSessionOut = (VTPixelTransferSessionRef *)CMBaseObjectGetDerivedStorage();
  v38 = CVPixelBufferGetPixelFormatType(v37);
  allocator = *v31;
  v39 = CVPixelFormatDescriptionCreateWithPixelFormatType(*v31, v38);
  if (v39)
  {
    v42 = v39;
    if (CFDictionaryGetValue(v39, (const void *)*MEMORY[0x1E0CA90F0]))
      UInt64 = FigCFNumberGetUInt64();
    else
      UInt64 = 0;
    CFRelease(v42);
  }
  else
  {
    UInt64 = 0;
  }
  if (UInt64 >= 9)
    v44 = 16;
  else
    v44 = 8;
  v45 = pixelTransferSessionOut;
  if (*((_DWORD *)pixelTransferSessionOut + 28) != v44)
  {
    via_releaseVImageBuffer((uint64_t)(pixelTransferSessionOut + 7));
    v45 = pixelTransferSessionOut;
    *((_DWORD *)pixelTransferSessionOut + 28) = v44;
  }
  v46 = (uint64_t)(v45 + 15);
  buf = (vImage_Buffer *)(v45 + 15);
  if (*((_DWORD *)v45 + 44) != v44)
  {
    via_releaseVImageBuffer(v46);
    v46 = (uint64_t)buf;
    *((_DWORD *)pixelTransferSessionOut + 44) = v44;
  }
  v40.i32[0] = UInt64;
  v41.i32[0] = 9;
  v185 = v44;
  v186 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v41, v40), 0), (int8x16_t)xmmword_1932FA170, (int8x16_t)xmmword_1932FA160);
  v47 = (CFStringRef *)MEMORY[0x1E0CA8EE8];
  buffer = v37;
  if (v37)
  {
    via_releaseVImageBuffer(v46);
    v48 = CVPixelBufferGetPixelFormatType(v37);
    v49 = *v47;
    v50 = CVBufferCopyAttachment(v37, *v47, 0);
    Width = CVPixelBufferGetWidth(v37);
    v52 = v37;
    v53 = Width;
    Height = CVPixelBufferGetHeight(v52);
    v55 = pixelTransferSessionOut;
    v56 = Height;
    v57 = (OpaqueVTPixelTransferSession *)v53;
    if (*((_DWORD *)pixelTransferSessionOut + 44) != 8)
      goto LABEL_74;
    if (FigCFEqual() || FigCFEqual())
    {
      v55 = pixelTransferSessionOut;
      if (v48 > 875704437)
      {
        if (v48 > 1714696751)
        {
          if (v48 == 1714696752)
            goto LABEL_69;
          v58 = 2033463856;
        }
        else
        {
          if (v48 == 875704438)
            goto LABEL_69;
          v58 = 1111970369;
        }
LABEL_68:
        if (v48 == v58)
          goto LABEL_69;
LABEL_74:
        v61 = *MEMORY[0x1E0CA8E98];
        desiredFormat.a = *(CGFloat *)MEMORY[0x1E0CA8D68];
        desiredFormat.b = v61;
        *(_QWORD *)&desiredFormat.c = v49;
        if (*((_DWORD *)v55 + 44) == 16)
          v62 = 1815491698;
        else
          v62 = 32;
        v63 = v55 + 19;
        v64 = CVPixelBufferCreate(allocator, v53, v56, v62, 0, v55 + 19);
        if ((_DWORD)v64)
        {
          PixelBuffer = v64;
          v59 = buf;
        }
        else
        {
          v65 = v16;
          for (j = 0; j != 24; j += 8)
          {
            v67 = *(const __CFString **)((char *)&desiredFormat.a + j);
            v68 = CVBufferCopyAttachment(buffer, v67, 0);
            if (v68)
            {
              v69 = v68;
              CVBufferSetAttachment(*v63, v67, v68, kCVAttachmentMode_ShouldPropagate);
              CFRelease(v69);
            }
          }
          v70 = CVPixelBufferLockBaseAddress(*v63, 0);
          if ((_DWORD)v70)
          {
            PixelBuffer = v70;
            v16 = v65;
          }
          else
          {
            *((_BYTE *)pixelTransferSessionOut + 160) = 1;
            BaseAddress = (OpaqueVTPixelTransferSession *)CVPixelBufferGetBaseAddress(pixelTransferSessionOut[19]);
            pixelTransferSessionOut[16] = (VTPixelTransferSessionRef)v56;
            pixelTransferSessionOut[17] = v57;
            pixelTransferSessionOut[15] = BaseAddress;
            pixelTransferSessionOut[18] = (VTPixelTransferSessionRef)CVPixelBufferGetBytesPerRow(pixelTransferSessionOut[19]);
            v72 = vifa_vImageFill(&v185, buf, (uint64_t)&v196);
            v16 = v65;
            if (!(_DWORD)v72)
            {
              v59 = buf;
              v47 = (CFStringRef *)MEMORY[0x1E0CA8EE8];
LABEL_85:
              PixelBuffer = 0;
              v73 = *(_OWORD *)&v59->width;
              *(_OWORD *)&dest.data = *(_OWORD *)&v59->data;
              *(_OWORD *)&dest.width = v73;
              goto LABEL_86;
            }
            PixelBuffer = v72;
          }
          v59 = buf;
          v47 = (CFStringRef *)MEMORY[0x1E0CA8EE8];
        }
LABEL_86:
        if (v50)
        {
          CFRelease(v50);
          v59 = buf;
        }
        if ((_DWORD)PixelBuffer)
        {
LABEL_89:
          via_releaseVImageBuffer((uint64_t)v59);
LABEL_90:
          via_releaseVImageBuffer((uint64_t)buf);
          goto LABEL_91;
        }
        goto LABEL_105;
      }
      if (v48 != 32 && v48 != 846624121)
      {
        v58 = 875704422;
        goto LABEL_68;
      }
    }
    else
    {
      v55 = pixelTransferSessionOut;
      if (v48 != 1111970369 && v48 != 32)
        goto LABEL_74;
    }
LABEL_69:
    v59 = buf;
    PixelBuffer = vImageBuffer_Init(buf, v56, v53, 4 * *((_DWORD *)v55 + 44), 0);
    if ((_DWORD)PixelBuffer)
      goto LABEL_86;
    v60 = vifa_vImageFill(&v185, buf, (uint64_t)&v196);
    v59 = buf;
    if ((_DWORD)v60)
    {
      PixelBuffer = v60;
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  v59 = buf;
  PixelBuffer = FigSignalErrorAt();
  if ((_DWORD)PixelBuffer)
    goto LABEL_89;
LABEL_105:
  Count = CFArrayGetCount(theArray);
  key = *v47;
  v163 = (const __CFString *)*MEMORY[0x1E0CA8CE8];
  v160 = (const __CFString *)*MEMORY[0x1E0CA8D10];
  v162 = (const __CFString *)*MEMORY[0x1E0CED7F8];
  v161 = (const void *)*MEMORY[0x1E0C9AE40];
  v76 = *v15;
  v77 = v15[1];
  v78 = v15[2];
  v79 = v15[3];
  v80 = v15[4];
  v81 = v15[5];
  while (Count-- >= 1)
  {
    v83 = CFArrayGetValueAtIndex(theArray, Count);
    v184 = v177;
    memset(&src, 0, sizeof(src));
    memset(&srcTop, 0, sizeof(srcTop));
    v84 = CMBaseObjectGetDerivedStorage();
    v85 = v84 + 56;
    v86 = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)v83);
    if (!v86)
    {
      PixelBuffer = 4294954792;
      goto LABEL_206;
    }
    v87 = v86;
    memset(&desiredFormat, 0, 40);
    v88 = CVPixelBufferGetPixelFormatType(v86);
    v174 = CVBufferCopyAttachment(v87, key, 0);
    v89 = via_releaseVImageBuffer(v85);
    v173 = Count;
    v175 = (uint64_t)v83;
    if ((_DWORD)v89)
      goto LABEL_203;
    if (*(_DWORD *)(v84 + 112) != 8)
      goto LABEL_149;
    if (FigCFEqual() || FigCFEqual())
    {
      if (v88 <= 875704437)
      {
        if (v88 == 32 || v88 == 846624121)
          goto LABEL_122;
        v90 = 875704422;
      }
      else if (v88 > 1714696751)
      {
        if (v88 == 1714696752)
          goto LABEL_122;
        v90 = 2033463856;
      }
      else
      {
        if (v88 == 875704438)
          goto LABEL_122;
        v90 = 1111970369;
      }
      if (v88 != v90)
        goto LABEL_149;
    }
    else if (v88 != 1111970369 && v88 != 32)
    {
LABEL_149:
      v110 = CVPixelBufferGetWidth(v87);
      v111 = CVPixelBufferGetHeight(v87);
      if (*(_DWORD *)(v84 + 112) == 16)
        v112 = 1815491698;
      else
        v112 = 32;
      v113 = v110;
      v114 = v111;
      v115 = (CVPixelBufferRef *)(v84 + 88);
      v89 = CVPixelBufferCreate(allocator, v113, v111, v112, 0, (CVPixelBufferRef *)(v84 + 88));
      if (!(_DWORD)v89)
      {
        v89 = CVPixelBufferLockBaseAddress(*v115, 0);
        if (!(_DWORD)v89)
        {
          *(_BYTE *)(v84 + 96) = 1;
          *(_QWORD *)(v84 + 64) = v114;
          *(_QWORD *)(v84 + 72) = v113;
          *(_QWORD *)(v84 + 56) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(v84 + 88));
          BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(v84 + 88));
          v117 = *(_QWORD *)(v84 + 104);
          *(_QWORD *)(v84 + 80) = BytesPerRow;
          if (v117)
            goto LABEL_157;
          v89 = VTPixelTransferSessionCreate(allocator, (VTPixelTransferSessionRef *)(v84 + 104));
          if (!(_DWORD)v89)
          {
            VTSessionSetProperty(*(VTSessionRef *)(v84 + 104), v162, v161);
LABEL_157:
            v89 = CVPixelBufferUnlockBaseAddress(*v115, 0);
            if (!(_DWORD)v89)
            {
              *(_BYTE *)(v84 + 96) = 0;
              v89 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(v84 + 104), v87, *(CVPixelBufferRef *)(v84 + 88));
              if (!(_DWORD)v89)
              {
                v89 = CVPixelBufferLockBaseAddress(*v115, 0);
                if (!(_DWORD)v89)
                {
                  v101 = 0;
                  ColorSpaceFromAttachments = 0;
                  *(_BYTE *)(v84 + 96) = 1;
                  v105 = 0uLL;
LABEL_161:
                  PixelBuffer = 0;
                  v106 = *(char **)(v84 + 56);
                  v107 = *(_QWORD *)(v84 + 64);
                  v108 = *(double *)(v84 + 72);
                  v109 = *(double *)(v84 + 80);
                  if (!v101)
                    goto LABEL_163;
LABEL_162:
                  vImageCVImageFormat_Release(v101);
                  v105 = 0uLL;
                  goto LABEL_163;
                }
              }
            }
          }
        }
      }
LABEL_203:
      PixelBuffer = v89;
      ColorSpaceFromAttachments = 0;
      v101 = 0;
      goto LABEL_145;
    }
LABEL_122:
    IsPixelBufferOpaque = FigVideoCompositorIsPixelBufferOpaque(v87);
    v92 = CVBufferCopyAttachments(v87, kCVAttachmentMode_ShouldPropagate);
    if (v92)
    {
      v93 = v92;
      ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v92);
      CFRelease(v93);
    }
    else
    {
      ColorSpaceFromAttachments = 0;
    }
    v95 = CVPixelBufferGetPixelFormatType(v87);
    v96 = CVBufferCopyAttachment(v87, key, 0);
    v97 = (const __CFString *)CVBufferCopyAttachment(v87, v163, 0);
    v98 = IsPixelBufferOpaque;
    if (FigCFEqual())
    {
      v99 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
LABEL_129:
      v100 = *v99;
      goto LABEL_130;
    }
    if (FigCFEqual())
    {
      v99 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
      goto LABEL_129;
    }
    v100 = 0;
    if (v95 != 32 && v95 != 1111970369)
    {
      FigSignalErrorAt();
      v101 = 0;
      if (v96)
        goto LABEL_133;
      goto LABEL_134;
    }
LABEL_130:
    if (!v97)
      v97 = (const __CFString *)CFRetain(v160);
    v101 = vImageCVImageFormat_Create(v95, v100, v97, ColorSpaceFromAttachments, 0);
    if (v96)
LABEL_133:
      CFRelease(v96);
LABEL_134:
    if (v97)
      CFRelease(v97);
    v102 = *(_DWORD *)(v84 + 112);
    if (v98)
      v103 = 6;
    else
      v103 = 4;
    if (v98)
      v104 = 5;
    else
      v104 = 3;
    *(CGFloat *)((char *)&desiredFormat.c + 4) = 0.0;
    if (v102 != 8)
      v103 = v104;
    HIDWORD(desiredFormat.d) = 0;
    LODWORD(desiredFormat.a) = v102;
    HIDWORD(desiredFormat.a) = 4 * v102;
    *(_QWORD *)&desiredFormat.b = ColorSpaceFromAttachments;
    LODWORD(desiredFormat.c) = v103;
    desiredFormat.tx = 0.0;
    v85 = v84 + 56;
    PixelBuffer = vImageBuffer_InitWithCVPixelBuffer((vImage_Buffer *)(v84 + 56), (vImage_CGImageFormat *)&desiredFormat, v87, v101, 0, 0);
    v105 = 0uLL;
    if (!(_DWORD)PixelBuffer)
      goto LABEL_161;
LABEL_145:
    via_releaseVImageBuffer(v85);
    v105 = 0uLL;
    v106 = 0;
    v107 = 0;
    v108 = 0.0;
    v109 = 0.0;
    if (v101)
      goto LABEL_162;
LABEL_163:
    if (ColorSpaceFromAttachments)
    {
      CFRelease(ColorSpaceFromAttachments);
      v105 = 0uLL;
    }
    if (v174)
    {
      CFRelease(v174);
      v105 = 0uLL;
    }
    Count = v173;
    if ((_DWORD)PixelBuffer)
      goto LABEL_206;
    v118 = *(_DWORD *)(v84 + 112);
    *(_OWORD *)&t1.a = v105;
    *(_OWORD *)&t1.c = v105;
    CroppedSourceCleanApertureRect = FigVCLayerDefinitionGetCroppedSourceCleanApertureRect(v175, (CGRect *)&t1);
    if ((_DWORD)CroppedSourceCleanApertureRect)
      goto LABEL_204;
    *(_QWORD *)&pixelBufferOut.a = v106;
    *(_QWORD *)&pixelBufferOut.b = (unint64_t)t1.b;
    pixelBufferOut.c = v108;
    pixelBufferOut.d = v109;
    *(_QWORD *)&v194.a = &v106[*(_QWORD *)&v109 * (int)t1.b];
    *(_QWORD *)&v194.b = (unint64_t)t1.d;
    *(_QWORD *)&v194.c = (unint64_t)t1.a;
    v194.d = v109;
    *(_QWORD *)&v193.a = *(_QWORD *)&v194.a + 4 * v118 / 8 * (int)(t1.a + t1.c);
    *(_QWORD *)&v193.b = (unint64_t)t1.d;
    *(_QWORD *)&v193.c = (unint64_t)((double)*(unint64_t *)&v108 - (t1.a + t1.c));
    v193.d = v109;
    *(_QWORD *)&v192.a = &v106[*(_QWORD *)&v109 * (int)(t1.b + t1.d)];
    *(_QWORD *)&v192.b = (unint64_t)((double)v107 - (t1.b + t1.d));
    v192.c = v108;
    v192.d = v109;
    v197.b = 0.0;
    v197.a = 0.0;
    CroppedSourceCleanApertureRect = vifa_vImageFill(&v185, (vImage_Buffer *)&pixelBufferOut, (uint64_t)&v197);
    if ((_DWORD)CroppedSourceCleanApertureRect
      || (vifa_vImageFill(&v185, (vImage_Buffer *)&v194, (uint64_t)&v197),
          vifa_vImageFill(&v185, (vImage_Buffer *)&v193, (uint64_t)&v197),
          CroppedSourceCleanApertureRect = vifa_vImageFill(&v185, (vImage_Buffer *)&v192, (uint64_t)&v197),
          src.data = v106,
          src.height = v107,
          *(CGFloat *)&src.width = v108,
          *(CGFloat *)&src.rowBytes = v109,
          (_DWORD)CroppedSourceCleanApertureRect))
    {
LABEL_204:
      PixelBuffer = CroppedSourceCleanApertureRect;
LABEL_206:
      v121 = v84 + 56;
      goto LABEL_195;
    }
    *(_OWORD *)&v188.a = v170;
    *(_OWORD *)&v188.c = v169;
    *(_OWORD *)&v188.tx = v168;
    AffineTransform = FigVCLayerDefinitionGetAffineTransform(v175, &v188);
    v121 = v84 + 56;
    if ((_DWORD)AffineTransform)
      goto LABEL_194;
    t1 = v188;
    pixelBufferOut = v184;
    CGAffineTransformConcat(&desiredFormat, &t1, &pixelBufferOut);
    v188 = desiredFormat;
    v122 = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer(v175);
    v123 = (double)CVPixelBufferGetHeight(v122);
    v124 = dest.height;
    v125 = (double)dest.height;
    memset(&desiredFormat, 0, sizeof(desiredFormat));
    CGAffineTransformMakeScale(&t1, 1.0, -1.0);
    CGAffineTransformMakeTranslation(&pixelBufferOut, 0.0, v123);
    CGAffineTransformConcat(&desiredFormat, &t1, &pixelBufferOut);
    v193 = desiredFormat;
    memset(&v194, 0, sizeof(v194));
    CGAffineTransformInvert(&v194, &v193);
    memset(&v193, 0, sizeof(v193));
    CGAffineTransformMakeTranslation(&v193, 0.0, v125 - v123);
    v197.a = v76;
    v197.b = v77;
    v197.c = v78;
    v197.d = v79;
    v197.tx = v80;
    v197.ty = v81;
    t2 = desiredFormat;
    CGAffineTransformConcat(&v192, &v197, &t2);
    v197 = v192;
    t2 = v188;
    CGAffineTransformConcat(&v192, &v197, &t2);
    v197 = v192;
    t2 = v194;
    CGAffineTransformConcat(&v192, &v197, &t2);
    v197 = v192;
    t2 = v193;
    CGAffineTransformConcat(&v192, &v197, &t2);
    PixelBuffer = vImageBuffer_Init(&srcTop, v124, dest.width, 4 * v185, 0);
    if (!(_DWORD)PixelBuffer)
    {
      desiredFormat.a = 0.0;
      desiredFormat.b = 0.0;
      v126 = vifa_vImageAffineWarpCG(&v185, &src, &srcTop, 0, (float64x2_t *)&v192, (uint64_t)&desiredFormat, 0x80u);
      if (v126)
      {
        v127 = v126;
        if (*(_QWORD *)(v84 + 40) < (unint64_t)v126)
        {
          free(*(void **)(v84 + 48));
          v128 = malloc_type_malloc(v127, 0x1F4CB958uLL);
          if (v128)
            v129 = v127;
          else
            v129 = 0;
          *(_QWORD *)(v84 + 40) = v129;
          *(_QWORD *)(v84 + 48) = v128;
        }
      }
      vifa_vImageAffineWarpCG(&v185, &src, &srcTop, *(void **)(v84 + 48), (float64x2_t *)&v192, (uint64_t)&desiredFormat, 0);
      LODWORD(t1.a) = 1065353216;
      FigVCLayerDefinitionGetOpacity(v175, &t1);
      if (v185 == 16)
      {
        v130 = srcTop.width;
        if (srcTop.width == dest.width)
        {
          v131 = srcTop.height;
          if (srcTop.height == dest.height)
          {
            if (srcTop.height)
            {
              v132 = 0;
              v133 = (int)(float)(*(float *)&t1.a * 65535.0);
              data = (char *)srcTop.data;
              rowBytes = srcTop.rowBytes;
              v136 = (char *)dest.data;
              v137 = dest.rowBytes;
              do
              {
                if (v130)
                {
                  v138 = 0;
                  v139 = v136;
                  v140 = data;
                  do
                  {
                    v141 = 0;
                    v142 = (-131071 - *((unsigned __int16 *)v140 + 3) * v133) >> 16;
                    do
                    {
                      *(_WORD *)&v139[v141] = v142 * *(unsigned __int16 *)&v139[v141] / 0xFFFF
                                            + *(unsigned __int16 *)&v140[v141] * v133 / 0xFFFF;
                      v141 += 2;
                    }
                    while (v141 != 8);
                    v140 += 8;
                    v139 += 8;
                    ++v138;
                  }
                  while (v138 != v130);
                }
                data += rowBytes;
                v136 += v137;
                ++v132;
              }
              while (v132 != v131);
            }
            PixelBuffer = 0;
            goto LABEL_195;
          }
        }
LABEL_193:
        AffineTransform = FigSignalErrorAt();
LABEL_194:
        PixelBuffer = AffineTransform;
        goto LABEL_195;
      }
      if (v185 != 8)
        goto LABEL_193;
      PixelBuffer = vImagePremultipliedConstAlphaBlend_ARGB8888(&srcTop, (int)(float)(*(float *)&t1.a * 255.0), &dest, &dest, 0);
    }
LABEL_195:
    via_releaseVImageBuffer(v121);
    if (srcTop.data)
      free(srcTop.data);
    if ((_DWORD)PixelBuffer)
      goto LABEL_90;
  }
  v143 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
  if (v143)
  {
    v144 = v143;
    Copy = CFDictionaryCreateCopy(allocator, v143);
    CFRelease(v144);
  }
  else
  {
    Copy = 0;
  }
  if (!buffer)
  {
    FigSignalErrorAt();
    goto LABEL_238;
  }
  v146 = CVPixelBufferGetPixelFormatType(buffer);
  v147 = CVBufferCopyAttachment(buffer, key, 0);
  v148 = pixelTransferSessionOut;
  v149 = pixelTransferSessionOut[19];
  if (!v149)
  {
    if (FigCFEqual())
    {
      v152 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
    }
    else
    {
      if (!FigCFEqual())
      {
        v153 = 0;
        if (v146 != 32 && v146 != 1111970369)
        {
          FigSignalErrorAt();
          if (v147)
            goto LABEL_237;
          goto LABEL_238;
        }
LABEL_226:
        v154 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
        if (v154)
        {
          v155 = v154;
          v156 = CVImageBufferCreateColorSpaceFromAttachments(v154);
          CFRelease(v155);
        }
        else
        {
          v156 = 0;
        }
        v157 = vImageCVImageFormat_Create(v146, v153, v160, v156, 0);
        memset(&t1, 0, 24);
        v158 = *((_DWORD *)pixelTransferSessionOut + 44);
        if (v158 == 8)
          v159 = 4;
        else
          v159 = 3;
        LODWORD(desiredFormat.a) = *((_DWORD *)pixelTransferSessionOut + 44);
        HIDWORD(desiredFormat.a) = 4 * v158;
        *(_QWORD *)&desiredFormat.b = v156;
        LODWORD(desiredFormat.c) = v159;
        memset((char *)&desiredFormat.c + 4, 0, 20);
        vImageBuffer_CopyToCVPixelBuffer(buf, (const vImage_CGImageFormat *)&desiredFormat, buffer, v157, &t1.a, 0);
        if (v157)
          vImageCVImageFormat_Release(v157);
        if (v156)
          CFRelease(v156);
        goto LABEL_236;
      }
      v152 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
    }
    v153 = *v152;
    goto LABEL_226;
  }
  if (!*((_BYTE *)pixelTransferSessionOut + 160))
    goto LABEL_216;
  if (CVPixelBufferUnlockBaseAddress(v149, 0))
    goto LABEL_236;
  v148 = pixelTransferSessionOut;
  *((_BYTE *)pixelTransferSessionOut + 160) = 0;
LABEL_216:
  v151 = (VTSessionRef *)(v148 + 21);
  v150 = v148[21];
  if (v150)
  {
LABEL_219:
    VTPixelTransferSessionTransferImage(v150, v148[19], buffer);
    if (v147)
      goto LABEL_237;
  }
  else
  {
    if (!VTPixelTransferSessionCreate(allocator, v148 + 21))
    {
      VTSessionSetProperty(*v151, v162, v161);
      v150 = (OpaqueVTPixelTransferSession *)*v151;
      v148 = pixelTransferSessionOut;
      goto LABEL_219;
    }
LABEL_236:
    if (v147)
LABEL_237:
      CFRelease(v147);
  }
LABEL_238:
  if (Copy)
  {
    CVBufferSetAttachments(buffer, Copy, kCVAttachmentMode_ShouldPropagate);
    via_releaseVImageBuffer((uint64_t)buf);
    CFRelease(Copy);
  }
  else
  {
    via_releaseVImageBuffer((uint64_t)buf);
  }
LABEL_7:
  (*(void (**)(_QWORD, uint64_t, _QWORD, CFTypeRef))(v16 + 24))(*(_QWORD *)(v16 + 32), a10, 0, v178);
  PixelBuffer = 0;
LABEL_91:
  if (v178)
    CFRelease(v178);
LABEL_93:
  if (v182)
    CFRelease(v182);
  return PixelBuffer;
}

uint64_t vivc_SetOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 24) = a2;
  *(_QWORD *)(DerivedStorage + 32) = a3;
  return 0;
}

vImage_Error vifa_vImageFill(_DWORD *a1, vImage_Buffer *dest, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  if (!a1 || !a3)
    return FigSignalErrorAt();
  if (*a1 != 16)
  {
    if (*a1 == 8)
    {
      v3 = 0;
      LODWORD(v6[0]) = 0;
      do
      {
        *((_BYTE *)v6 + (int)a1[v3 + 1]) = (int)(float)(*(float *)(a3 + v3 * 4) * 255.0);
        ++v3;
      }
      while (v3 != 4);
      return vImageBufferFill_ARGB8888(dest, (const uint8_t *)v6, 0);
    }
    return FigSignalErrorAt();
  }
  v5 = 0;
  v6[0] = 0;
  do
  {
    *((_WORD *)v6 + (int)a1[v5 + 1]) = (int)(float)(*(float *)(a3 + v5 * 4) * 65535.0);
    ++v5;
  }
  while (v5 != 4);
  return vImageBufferFill_ARGB16U(dest, (const uint16_t *)v6, 0);
}

vImage_Error vifa_vImageAffineWarpCG(_DWORD *a1, vImage_Buffer *src, vImage_Buffer *dest, void *tempBuffer, float64x2_t *a5, uint64_t a6, vImage_Flags flags)
{
  uint64_t v7;
  uint64_t v9;
  vImage_AffineTransform v10;
  uint8_t backColor[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a6)
    return FigSignalErrorAt();
  *(float32x4_t *)&v10.a = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a5), a5[1]);
  *(float32x2_t *)&v10.tx = vcvt_f32_f64(a5[2]);
  if (*a1 != 16)
  {
    if (*a1 == 8)
    {
      v7 = 0;
      *(_DWORD *)backColor = 0;
      do
      {
        backColor[a1[v7 + 1]] = (int)(float)(*(float *)(a6 + v7 * 4) * 255.0);
        ++v7;
      }
      while (v7 != 4);
      return vImageAffineWarp_ARGB8888(src, dest, tempBuffer, &v10, backColor, flags);
    }
    return FigSignalErrorAt();
  }
  v9 = 0;
  *(_QWORD *)backColor = 0;
  do
  {
    *(_WORD *)&backColor[2 * a1[v9 + 1]] = (int)(float)(*(float *)(a6 + v9 * 4) * 65535.0);
    ++v9;
  }
  while (v9 != 4);
  return vImageAffineWarp_ARGB16U(src, dest, tempBuffer, &v10, (const uint16_t *)backColor, flags);
}

uint64_t FigStreamingAssetMetadataDownloaderConfigureMediaSelectionsForAlternate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v8[3];
  uint64_t v9;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v9 = 0;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)metadw_configureMediaSelectionsForAlternateDispatch);
  return v9;
}

void metadw_configureMediaSelectionsForAlternateDispatch(uint64_t a1)
{
  const void *v2;
  const __CFArray *v3;
  uint64_t DerivedStorage;
  __CFString *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(const void **)(a1 + 8);
  v3 = *(const __CFArray **)(a1 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216) || *(_DWORD *)(DerivedStorage + 232) || !v2 || !v3)
  {
    v7 = FigSignalErrorAt();
    if (!(_DWORD)v7)
      goto LABEL_12;
    goto LABEL_11;
  }
  v5 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(DerivedStorage + 8), v3);
  v6 = malloc_type_calloc(1uLL, 0x20uLL, 0xE00401043B4FBuLL);
  if (v6)
  {
    v6[2] = CFRetain(v2);
    v6[3] = CFRetain(v3);
LABEL_7:
    v7 = 0;
    v8 = *(_QWORD **)(DerivedStorage + 272);
    *v6 = 0;
    v6[1] = v8;
    *v8 = v6;
    *(_QWORD *)(DerivedStorage + 272) = v6;
    goto LABEL_8;
  }
  v7 = FigSignalErrorAt();
  if (!(_DWORD)v7)
    goto LABEL_7;
LABEL_8:
  if (v5)
    CFRelease(v5);
  if ((_DWORD)v7)
LABEL_11:
    metadw_transitionToTerminalStateWithOSStatus(*(const void **)a1, v7);
LABEL_12:
  *(_DWORD *)(a1 + 24) = v7;
}

uint64_t FigStreamingAssetMetadataDownloaderCreate(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, NSObject *a6, _OWORD *a7, _QWORD *a8)
{
  CFTypeID v13;
  CFTypeID v14;
  uint64_t v15;
  uint64_t DerivedStorage;
  CFTypeRef v17;
  BOOL v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  const void *Value;
  uint64_t v24;
  dispatch_queue_t v25;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v27;
  CFMutableSetRef v28;
  CFMutableSetRef v29;
  const void *v30;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v32;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2)
    return FigSignalErrorAt();
  v13 = CFGetTypeID(a2);
  if (v13 != FigAssetGetTypeID())
    return FigSignalErrorAt();
  if (a3)
  {
    v14 = CFGetTypeID(a3);
    if (v14 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
  }
  if (!a8)
    return FigSignalErrorAt();
  FigAssetDownloaderGetClassID();
  v15 = CMDerivedObjectCreate();
  if ((_DWORD)v15)
    return v15;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = a1 ? CFRetain(a1) : 0;
  *(_QWORD *)(DerivedStorage + 8) = v17;
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a2);
  v18 = FigIsItOKToLogURLs() && FPSupport_GetAssetDoNotLogURLs((uint64_t)a2) == 0;
  *(_BYTE *)(DerivedStorage + 202) = v18;
  if (a5)
  {
    if (a6)
    {
      if (a7)
      {
        dispatch_retain(a6);
        *(_QWORD *)(DerivedStorage + 120) = a6;
        *(_OWORD *)(DerivedStorage + 40) = *a7;
        v19 = a7[1];
        v20 = a7[2];
        v21 = a7[3];
        *(_OWORD *)(DerivedStorage + 104) = a7[4];
        *(_OWORD *)(DerivedStorage + 88) = v21;
        *(_OWORD *)(DerivedStorage + 72) = v20;
        *(_OWORD *)(DerivedStorage + 56) = v19;
        v22 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        *(_QWORD *)(DerivedStorage + 32) = v22;
        if (!v22)
          return FigSignalErrorAt();
      }
    }
  }
  if (!a3)
  {
    v24 = a4;
    if (!a4)
      goto LABEL_24;
LABEL_23:
    *(_BYTE *)(DerivedStorage + 144) = FigStreamingAssetDownloadConfigGetDownloadsInterstitialAssets(v24);
    goto LABEL_24;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("AssetDownloaderCreateOption_DebugIdentifier"));
  if (Value)
    Value = CFRetain(Value);
  *(_QWORD *)(DerivedStorage + 136) = Value;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  v24 = a4;
  if (a4)
    goto LABEL_23;
  FigCFDictionaryGetBooleanIfPresent();
LABEL_24:
  v25 = dispatch_queue_create("com.apple.coremedia.streamingassetmetadatadownloader.state", 0);
  *(_QWORD *)DerivedStorage = v25;
  if (!v25)
    return FigSignalErrorAt();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)a1, 0, 0, 0);
  *(_QWORD *)(DerivedStorage + 312) = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v27 = CFDictionaryCreateMutable((CFAllocatorRef)a1, 0, 0, 0);
  *(_QWORD *)(DerivedStorage + 320) = v27;
  if (!v27)
    return FigSignalErrorAt();
  v28 = CFSetCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(DerivedStorage + 304) = v28;
  if (!v28)
    return FigSignalErrorAt();
  v29 = CFSetCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(DerivedStorage + 296) = v29;
  if (!v29)
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 264) = 0;
  *(_QWORD *)(DerivedStorage + 272) = DerivedStorage + 264;
  *(_QWORD *)(DerivedStorage + 280) = 0;
  *(_QWORD *)(DerivedStorage + 288) = DerivedStorage + 280;
  v15 = FigRetainProxyCreate();
  if ((_DWORD)v15)
    return v15;
  v30 = (const void *)FigCFCopyCompactDescription();
  if (dword_1EE2A2BD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v32 = 0;
  *a8 = 0;
  if (v30)
    CFRelease(v30);
  return v32;
}

void metadw_transitionToTerminalStateWithOSStatus(const void *a1, uint64_t a2)
{
  CFTypeRef cf;

  cf = 0;
  FigCreateErrorForOSStatus(a2, (CFErrorRef *)&cf);
  metadw_transitionToTerminalState(a1, cf);
  if (cf)
    CFRelease(cf);
}

void metadw_transitionToTerminalState(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeRef v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  _QWORD *v11;
  _QWORD *v12;
  CFTypeRef v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v5 = DerivedStorage;
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
    {
      FigSignalErrorAt();
    }
    else if (*(_DWORD *)(v5 + 232) <= 2u)
    {
      if (a2)
        v6 = CFRetain(a2);
      else
        v6 = 0;
      *(_QWORD *)(v5 + 224) = v6;
      if (dword_1EE2A2BD0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_DWORD *)(v5 + 232) = 4;
      metadw_cancelResourceRequestForMetadataItems((uint64_t)a1);
      v8 = CMBaseObjectGetDerivedStorage();
      v9 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v9)
      {
        v10 = (const void *)v9;
        v11 = malloc_type_calloc(1uLL, 0x18uLL, 0xE0040D4EF70FBuLL);
        if (v11)
        {
          v12 = v11;
          *v11 = CFRetain(a1);
          v12[1] = v10;
          if (a2)
            v13 = CFRetain(a2);
          else
            v13 = 0;
          v12[2] = v13;
          dispatch_async_f(*(dispatch_queue_t *)(v8 + 120), v12, (dispatch_function_t)metadw_sendDownloadFailedCallbackOnCallbackQueue);
        }
        else if (FigSignalErrorAt())
        {
          CFRelease(v10);
        }
      }
    }
  }
}

void metadw_cancelResourceRequestForMetadataItems(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t i;
  _BOOL4 shouldRequestBeSentOverHTTP;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  for (i = *(_QWORD *)(DerivedStorage + 280); i; i = *(_QWORD *)i)
  {
    if (*(_DWORD *)(i + 16) != 5)
    {
      shouldRequestBeSentOverHTTP = metadw_shouldRequestBeSentOverHTTP(a1, i);
      CMBaseObjectGetDerivedStorage();
      if (shouldRequestBeSentOverHTTP)
      {
        if (*(_QWORD *)(i + 88))
        {
          if (dword_1EE2A2BD0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          metadw_clearHTTPRequestState(a1, i);
        }
      }
      else if (*(_QWORD *)(i + 104))
      {
        if (dword_1EE2A2BD0)
        {
          v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        metadw_clearCustomURLRequestState(a1, i);
      }
    }
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 312));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 320));
  *(_QWORD *)(DerivedStorage + 328) = 0;
  *(_QWORD *)(DerivedStorage + 336) = 0;
}

BOOL metadw_shouldRequestBeSentOverHTTP(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _BOOL8 result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigCFHTTPIsHTTPBasedURL(*(const __CFURL **)(a2 + 24));
  if (result)
    return *(_BYTE *)(DerivedStorage + 200) == 0;
  return result;
}

void metadw_clearHTTPRequestState(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(a2 + 88);
  if (v4)
  {
    v5 = DerivedStorage;
    v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v6)
      v6(v4);
    v7 = *(const void **)(a2 + 88);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a2 + 88) = 0;
    }
    *(_DWORD *)(a2 + 96) = 0;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 312), 0);
  }
}

void metadw_clearCustomURLRequestState(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(a2 + 104);
  if (v4)
  {
    v5 = DerivedStorage;
    v6 = *(_QWORD *)(DerivedStorage + 168);
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v7)
      v7(v6, v4);
    *(_QWORD *)(a2 + 104) = 0;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 320), 0);
  }
}

void metadw_sendDownloadFailedCallbackOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD, _QWORD);
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 56);
    if (v3)
      v3(a1[1], *a1, a1[2]);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[2];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[1];
  if (v5)
    CFRelease(v5);
  free(a1);
}

uint64_t metadw_invalidate(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v4[3];
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4[2] = 0;
  v5 = 0;
  v4[0] = a1;
  v4[1] = 0;
  dispatch_sync_f(*DerivedStorage, v4, (dispatch_function_t)metadw_invalidateDispatch);
  return v5;
}

void metadw_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  metadw_invalidateOnQueue(a1);
  v3 = *(const void **)(DerivedStorage + 136);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 376);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 376) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 208);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

CFStringRef metadw_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigStreamingAssetMetadataDownloader %p debugIdentifier:%@ asset %p asset %@]"), a1, *(_QWORD *)(DerivedStorage + 136), *(_QWORD *)(DerivedStorage + 16), *(_QWORD *)(DerivedStorage + 16));
}

uint64_t metadw_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t result;
  _QWORD context[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  context[0] = a1;
  context[1] = a2;
  v12 = a3;
  v13 = 0;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)metadw_copyPropertyDispatch);
  result = v13;
  if (!(_DWORD)v13)
    *a4 = v11;
  return result;
}

uint64_t metadw_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[4];
  uint64_t v9;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[3] = 0;
  v9 = 0;
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)metadw_setPropertyDispatch);
  return v9;
}

void metadw_invalidateDispatch(uint64_t a1)
{
  metadw_invalidateOnQueue(*(_QWORD *)a1);
  *(_DWORD *)(a1 + 24) = 0;
}

void metadw_invalidateOnQueue(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v4;
  const void *v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  NSObject *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(DerivedStorage + 216))
  {
    *(_BYTE *)(DerivedStorage + 216) = 1;
    FigRetainProxyInvalidate();
    metadw_cancelResourceRequestForMetadataItems(a1);
    v4 = *(const void **)(DerivedStorage + 8);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    v5 = *(const void **)(DerivedStorage + 16);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    v6 = *(const void **)(DerivedStorage + 24);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
    v7 = *(_QWORD **)(DerivedStorage + 264);
    if (v7)
    {
      do
      {
        v9 = (_QWORD *)*v7;
        v8 = (_QWORD *)v7[1];
        if (*v7)
        {
          v9[1] = v8;
          v8 = (_QWORD *)v7[1];
        }
        else
        {
          *(_QWORD *)(DerivedStorage + 272) = v8;
        }
        *v8 = v9;
        v10 = (const void *)v7[2];
        if (v10)
          CFRelease(v10);
        v11 = (const void *)v7[3];
        if (v11)
          CFRelease(v11);
        free(v7);
        v7 = v9;
      }
      while (v9);
    }
    v12 = *(const void **)(DerivedStorage + 32);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v13 = *(NSObject **)(DerivedStorage + 120);
    if (v13)
    {
      dispatch_release(v13);
      *(_QWORD *)(DerivedStorage + 120) = 0;
    }
    v14 = *(const void **)(DerivedStorage + 152);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 152) = 0;
    }
    v15 = *(const void **)(DerivedStorage + 160);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 160) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 168);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 168) = 0;
    }
    v17 = *(const void **)(DerivedStorage + 176);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(DerivedStorage + 176) = 0;
    }
    v18 = *(const void **)(DerivedStorage + 184);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(DerivedStorage + 184) = 0;
    }
    v19 = *(const void **)(DerivedStorage + 192);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(DerivedStorage + 192) = 0;
    }
    v20 = *(const void **)(DerivedStorage + 256);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(DerivedStorage + 256) = 0;
    }
    v21 = *(const void **)(DerivedStorage + 296);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(DerivedStorage + 296) = 0;
    }
    v22 = *(const void **)(DerivedStorage + 304);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(DerivedStorage + 304) = 0;
    }
    v23 = *(const void **)(DerivedStorage + 240);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(DerivedStorage + 240) = 0;
    }
    v24 = *(const void **)(DerivedStorage + 360);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(DerivedStorage + 360) = 0;
    }
    v25 = *(const void **)(DerivedStorage + 368);
    if (v25)
    {
      CFRelease(v25);
      *(_QWORD *)(DerivedStorage + 368) = 0;
    }
    v26 = *(_QWORD **)(DerivedStorage + 280);
    if (v26)
    {
      do
      {
        v28 = (_QWORD *)*v26;
        v27 = (_QWORD *)v26[1];
        if (*v26)
        {
          v28[1] = v27;
          v27 = (_QWORD *)v26[1];
        }
        else
        {
          *(_QWORD *)(DerivedStorage + 288) = v27;
        }
        *v27 = v28;
        v29 = (const void *)v26[3];
        if (v29)
        {
          CFRelease(v29);
          v26[3] = 0;
        }
        v30 = (const void *)v26[4];
        if (v30)
        {
          CFRelease(v30);
          v26[4] = 0;
        }
        v31 = (const void *)v26[6];
        if (v31)
        {
          CFRelease(v31);
          v26[6] = 0;
        }
        v32 = (const void *)v26[7];
        if (v32)
        {
          CFRelease(v32);
          v26[7] = 0;
        }
        v33 = (const void *)v26[8];
        if (v33)
        {
          CFRelease(v33);
          v26[8] = 0;
        }
        v34 = (const void *)v26[11];
        if (v34)
        {
          CFRelease(v34);
          v26[11] = 0;
        }
        v35 = (const void *)v26[14];
        if (v35)
        {
          CFRelease(v35);
          v26[14] = 0;
        }
        v36 = (const void *)v26[15];
        if (v36)
        {
          CFRelease(v36);
          v26[15] = 0;
        }
        v37 = (const void *)v26[16];
        if (v37)
          CFRelease(v37);
        free(v26);
        v26 = v28;
      }
      while (v28);
    }
    v38 = *(const void **)(DerivedStorage + 312);
    if (v38)
    {
      CFRelease(v38);
      *(_QWORD *)(DerivedStorage + 312) = 0;
    }
    v39 = *(const void **)(DerivedStorage + 320);
    if (v39)
    {
      CFRelease(v39);
      *(_QWORD *)(DerivedStorage + 320) = 0;
    }
    v40 = *(const void **)(DerivedStorage + 384);
    if (v40)
    {
      CFRelease(v40);
      *(_QWORD *)(DerivedStorage + 384) = 0;
    }
    v41 = *(const void **)(DerivedStorage + 224);
    if (v41)
    {
      CFRelease(v41);
      *(_QWORD *)(DerivedStorage + 224) = 0;
    }
  }
}

const __CFArray *metadw_copyPropertyDispatch(uint64_t a1)
{
  const __CFAllocator *v2;
  const void *v3;
  uint64_t DerivedStorage;
  const __CFArray *result;
  int v6;

  v2 = *(const __CFAllocator **)(a1 + 24);
  v3 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
    goto LABEL_11;
  if (!CFEqual(CFSTR("AssetDownloaderProperty_InterstitialEvents"), v3))
  {
    result = 0;
    v6 = -12784;
    goto LABEL_10;
  }
  result = *(const __CFArray **)(DerivedStorage + 376);
  if (result)
  {
    if (CFArrayGetCount(result) < 1)
    {
      v6 = 0;
LABEL_9:
      result = 0;
      goto LABEL_10;
    }
    result = CFArrayCreateCopy(v2, *(CFArrayRef *)(DerivedStorage + 376));
    if (result)
      goto LABEL_6;
LABEL_11:
    v6 = FigSignalErrorAt();
    goto LABEL_9;
  }
LABEL_6:
  v6 = 0;
LABEL_10:
  *(_DWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t metadw_setPropertyDispatch(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t DerivedStorage;
  CFTypeID v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t result;
  CFTypeID v10;
  const void *v11;
  const void *v12;
  CFTypeID v13;

  v3 = *(const void **)(a1 + 8);
  v2 = *(const void **)(a1 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
    goto LABEL_27;
  if (!FigCFEqual())
  {
    if (CFEqual(CFSTR("AssetDownloaderProperty_ProgressMonitor"), v3))
    {
      v10 = CFGetTypeID(v2);
      if (v10 != FigStreamingAssetDownloadProgressMonitorGetTypeID())
        goto LABEL_27;
      v11 = *(const void **)(DerivedStorage + 240);
      *(_QWORD *)(DerivedStorage + 240) = v2;
      if (v2)
LABEL_12:
        CFRetain(v2);
    }
    else
    {
      if (!FigCFEqual())
      {
        result = 4294954512;
        goto LABEL_21;
      }
      v13 = CFGetTypeID(v2);
      if (v13 != FigReportingAgentGetTypeID())
      {
LABEL_27:
        result = FigSignalErrorAt();
        goto LABEL_21;
      }
      v11 = *(const void **)(DerivedStorage + 384);
      *(_QWORD *)(DerivedStorage + 384) = v2;
      if (v2)
        goto LABEL_12;
    }
    if (v11)
    {
      v12 = v11;
LABEL_19:
      CFRelease(v12);
    }
LABEL_20:
    result = 0;
    goto LABEL_21;
  }
  v5 = CFGetTypeID(v2);
  if (v5 != FigStreamingCacheGetTypeID())
    goto LABEL_27;
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)(v6 + 24);
  if (v7 == v2)
    goto LABEL_20;
  v8 = v6;
  if (!v2 || !v7)
  {
    *(_QWORD *)(v6 + 24) = v2;
    if (!v2)
      goto LABEL_17;
    goto LABEL_16;
  }
  result = FigStreamingCacheTransferData(*(_QWORD *)(v6 + 24), (uint64_t)v2);
  if (!(_DWORD)result)
  {
    v7 = *(const void **)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v2;
LABEL_16:
    CFRetain(v2);
LABEL_17:
    if (v7)
    {
      v12 = v7;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

uint64_t metadw_start(const void *a1)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD *v3;
  _QWORD *v4;
  CFTypeRef v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v3 = malloc_type_calloc(1uLL, 0x20uLL, 0x10600405C4CBD68uLL);
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  if (a1)
    v5 = CFRetain(a1);
  else
    v5 = 0;
  *v4 = v5;
  dispatch_async_f(*DerivedStorage, v4, (dispatch_function_t)metadw_startDispatch);
  return 0;
}

uint64_t metadw_pause(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v4[3];
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4[2] = 0;
  v5 = 0;
  v4[0] = a1;
  v4[1] = 0;
  dispatch_sync_f(*DerivedStorage, v4, (dispatch_function_t)metadw_pauseDispatch);
  return v5;
}

uint64_t metadw_stop(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v4[3];
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4[2] = 0;
  v5 = 0;
  v4[0] = a1;
  v4[1] = 0;
  dispatch_sync_f(*DerivedStorage, v4, (dispatch_function_t)metadw_stopDispatch);
  return v5;
}

void metadw_startDispatch(const void **a1)
{
  const void *v1;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, os_log_type_t *);
  uint64_t DoesNotExistAndAddToQueue;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v15;
  const void *PlaylistAlternateURL;
  const void *URLForCacheLookup;
  const void *StableStreamIdentifier;
  CFIndex Count;
  CFIndex v20;
  CFIndex v21;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v24;
  const void *v25;
  CFTypeRef v26;
  const void *v27;
  const __CFDictionary *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t ResourceRequestForMetadataItem;
  CFTypeRef v37;
  os_log_type_t type[8];
  const __CFDictionary *v39;
  int v40;
  const void *v41;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v1 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BD0)
  {
    LODWORD(v39) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    v33 = FigSignalErrorAt();
    if (!(_DWORD)v33)
      goto LABEL_59;
LABEL_57:
    metadw_transitionToTerminalStateWithOSStatus(*a1, v33);
    goto LABEL_59;
  }
  v4 = *(_DWORD *)(DerivedStorage + 232);
  if (v4 > 2 || v4 == 1)
    goto LABEL_59;
  *(_DWORD *)(DerivedStorage + 232) = 1;
  v6 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v37 = 0;
  *(_QWORD *)type = 0;
  if (v6[35])
    goto LABEL_45;
  v7 = v6;
  v8 = v6[1];
  CMBaseObject = FigAssetGetCMBaseObject(v6[2]);
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v10)
    goto LABEL_44;
  DoesNotExistAndAddToQueue = v10(CMBaseObject, CFSTR("assetProperty_OriginalNetworkContentURL"), v8, type);
  if ((_DWORD)DoesNotExistAndAddToQueue)
    goto LABEL_47;
  v12 = v7[1];
  v13 = FigAssetGetCMBaseObject(v7[2]);
  v14 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v14)
  {
LABEL_44:
    v33 = 4294954514;
    goto LABEL_48;
  }
  DoesNotExistAndAddToQueue = v14(v13, CFSTR("assetProperty_CreationOptionsDictionary"), v12, &v37);
  if (!(_DWORD)DoesNotExistAndAddToQueue)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    v15 = v7[33];
    if (v15)
    {
      while (1)
      {
        cf[0] = 0;
        v41 = 0;
        v39 = 0;
        if (*(_QWORD *)type)
        {
          DoesNotExistAndAddToQueue = metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue((uint64_t)v1, v15, 1, *(const void **)type, *(const void **)type, 0, 0);
          if ((_DWORD)DoesNotExistAndAddToQueue)
            goto LABEL_47;
        }
        PlaylistAlternateURL = (const void *)FigAlternateGetPlaylistAlternateURL(*(_QWORD *)(v15 + 16));
        URLForCacheLookup = (const void *)FigAlternateGetURLForCacheLookup(*(_QWORD *)(v15 + 16));
        StableStreamIdentifier = (const void *)FigAlternateGetStableStreamIdentifier(*(_QWORD *)(v15 + 16));
        DoesNotExistAndAddToQueue = metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue((uint64_t)v1, v15, 2, PlaylistAlternateURL, URLForCacheLookup, 0, StableStreamIdentifier);
        if ((_DWORD)DoesNotExistAndAddToQueue)
          goto LABEL_47;
        Count = CFArrayGetCount(*(CFArrayRef *)(v15 + 24));
        if (Count <= 0)
          goto LABEL_42;
        v20 = Count;
        v21 = 0;
        v40 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v15 + 24), v21);
          Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
          v24 = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
          if (Value)
          {
            v25 = v24;
            if (FigCFStringGetOSTypeValue())
              break;
          }
          FigSignalErrorAt();
LABEL_30:
          if (v20 == ++v21)
          {
            v33 = 0;
            goto LABEL_39;
          }
        }
        if (v40 == 1668047728)
          goto LABEL_30;
        if (!v25)
          goto LABEL_30;
        FigAlternateGetRenditionInfoForMediaType(*(_QWORD *)(v15 + 16), v40, v25, v25, v25, 0, &v39, cf, &v41);
        if (!cf[0] || !v41)
          goto LABEL_30;
        CFRetain(cf[0]);
        switch(v40)
        {
          case 1935832172:
            v26 = cf[0];
            v27 = v41;
            v28 = v39;
            v29 = (uint64_t)v1;
            v30 = v15;
            v31 = 4;
            break;
          case 1936684398:
            v26 = cf[0];
            v27 = v41;
            v28 = v39;
            v29 = (uint64_t)v1;
            v30 = v15;
            v31 = 3;
            break;
          case 1986618469:
            v26 = cf[0];
            v27 = v41;
            v28 = v39;
            v29 = (uint64_t)v1;
            v30 = v15;
            v31 = 2;
            break;
          default:
            FigSignalErrorAt();
LABEL_37:
            if (cf[0])
            {
              CFRelease(cf[0]);
              cf[0] = 0;
            }
            goto LABEL_30;
        }
        v32 = metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue(v29, v30, v31, v26, v27, v25, v28);
        if (!(_DWORD)v32)
          goto LABEL_37;
        v33 = v32;
LABEL_39:
        if (cf[0])
          CFRelease(cf[0]);
        if ((_DWORD)v33)
          goto LABEL_48;
LABEL_42:
        v15 = *(_QWORD *)v15;
        if (!v15)
        {
LABEL_45:
          v33 = 0;
          goto LABEL_48;
        }
      }
    }
    *((_BYTE *)v7 + 201) = 1;
    DoesNotExistAndAddToQueue = metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue((uint64_t)v1, 0, 2, *(const void **)type, *(const void **)type, 0, 0);
  }
LABEL_47:
  v33 = DoesNotExistAndAddToQueue;
LABEL_48:
  if (v37)
    CFRelease(v37);
  if (*(_QWORD *)type)
    CFRelease(*(CFTypeRef *)type);
  if ((_DWORD)v33)
    goto LABEL_57;
  v34 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 280);
  while (1)
  {
    v34 = (_QWORD *)*v34;
    if (!v34)
      break;
    ResourceRequestForMetadataItem = metadw_createResourceRequestForMetadataItem((uint64_t)v1, (uint64_t)v34);
    if ((_DWORD)ResourceRequestForMetadataItem)
    {
      v33 = ResourceRequestForMetadataItem;
      metadw_transitionToTerminalStateWithOSStatus(v1, ResourceRequestForMetadataItem);
      goto LABEL_57;
    }
  }
  metadw_checkIfDownloadIsComplete(v1);
LABEL_59:
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue(uint64_t a1, uint64_t a2, int a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t DerivedStorage;
  uint64_t result;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 296), a5))
  {
    result = metadw_createMetadataDownloadItem(a2, a3, a4, a5, a6, a7, 0, &v17);
    if ((_DWORD)result)
      return result;
    v15 = v17;
    v16 = *(_QWORD **)(DerivedStorage + 288);
    *v17 = 0;
    v15[1] = v16;
    *v16 = v15;
    *(_QWORD *)(DerivedStorage + 288) = v15;
    CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 296), a5);
  }
  return 0;
}

uint64_t metadw_createMetadataDownloadItem(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, _QWORD *a8)
{
  _QWORD *v16;
  _QWORD *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;

  v16 = malloc_type_calloc(1uLL, 0x98uLL, 0x10E0040DF620F7DuLL);
  if (!v16)
    return FigSignalErrorAt();
  v17 = v16;
  v16[5] = a1;
  *((_DWORD *)v16 + 4) = a2;
  if (a3)
    v18 = CFRetain(a3);
  else
    v18 = 0;
  v17[3] = v18;
  if (a4)
    v19 = CFRetain(a4);
  else
    v19 = 0;
  v17[4] = v19;
  if (a5)
    v20 = CFRetain(a5);
  else
    v20 = 0;
  v17[6] = v20;
  if (a6)
    v21 = CFRetain(a6);
  else
    v21 = 0;
  v17[7] = v21;
  if (a7)
    v22 = CFRetain(a7);
  else
    v22 = 0;
  v17[8] = v22;
  *a8 = v17;
  return 0;
}

uint64_t metadw_createResourceRequestForMetadataItem(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  __CFDictionary **v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v13;
  __CFDictionary *v14;
  uint64_t (*v15)(__CFDictionary *, NSObject *, _QWORD, __CFDictionary **);
  uint64_t v16;
  __CFDictionary *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const __CFString *, __CFDictionary *, CFTypeRef *);
  __CFDictionary *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const __CFString *, __CFDictionary *, CFTypeRef *);
  const void *DictionaryValue;
  __CFDictionary *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, const __CFString *, __CFDictionary *, __CFDictionary **);
  __CFDictionary *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, const __CFString *, __CFDictionary *, __CFDictionary **);
  __CFDictionary *v30;
  CFTypeRef v31;
  __CFDictionary *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, const __CFString *, __CFDictionary *, __CFDictionary **);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CFTypeRef v39;
  const __CFArray *ContentKeySpecifiers;
  uint64_t v41;
  CFTypeRef v42;
  const __CFArray *v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  CFTypeRef v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t AllocatorForMedia;
  uint64_t v57;
  uint64_t v58;
  CFTypeRef v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, uint64_t, uint64_t, CFTypeRef *);
  NSObject *v64;
  _BOOL4 shouldRequestBeSentOverHTTP;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t Mutable;
  CFTypeRef v73;
  uint64_t v74;
  NSObject *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, _QWORD, void (*)(uint64_t, int, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, char, uint64_t), uint64_t, CFTypeRef *, CFTypeRef *);
  uint64_t v92;
  const void *v93;
  uint64_t v94;
  CFTypeRef v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, CFTypeRef *);
  CFTypeRef v99;
  uint64_t v101;
  CFTypeRef cf;
  CFTypeRef v103[2];
  void (*v104)(const void *);
  CFTypeRef v105;
  _BYTE v106[12];
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  CFTypeRef v113[2];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  int v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v103[0] = 0;
  v105 = 0;
  v5 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v6 = v5 + 19;
  if (v5[19])
  {
    v7 = 0;
    v8 = 0;
    goto LABEL_31;
  }
  v9 = (__CFDictionary **)v5;
  v10 = v5[1];
  CMBaseObject = FigAssetGetCMBaseObject(v5[2]);
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v12)
  {
    v8 = 0;
    goto LABEL_28;
  }
  v13 = v12(CMBaseObject, CFSTR("assetProperty_StorageSession"), v10, v6);
  if (!(_DWORD)v13)
  {
    v8 = FigHTTPSchedulerRetain((dispatch_object_t)*v9);
    v14 = v9[19];
    v15 = *(uint64_t (**)(__CFDictionary *, NSObject *, _QWORD, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 40);
    if (v15)
    {
      v16 = v15(v14, v8, 0, v9 + 32);
      if ((_DWORD)v16)
        goto LABEL_141;
      v17 = v9[1];
      v18 = FigAssetGetCMBaseObject(v9[2]);
      v19 = *(uint64_t (**)(uint64_t, const __CFString *, __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
      if (!v19)
        goto LABEL_28;
      v16 = v19(v18, CFSTR("assetProperty_InstanceUUID"), v17, v103);
      if ((_DWORD)v16)
        goto LABEL_141;
      v20 = v9[1];
      v21 = FigAssetGetCMBaseObject(v9[2]);
      v22 = *(uint64_t (**)(uint64_t, const __CFString *, __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
      if (!v22)
        goto LABEL_28;
      v16 = v22(v21, CFSTR("assetProperty_CreationOptionsDictionary"), v20, &v105);
      if ((_DWORD)v16)
        goto LABEL_141;
      v16 = FigCFHTTPCreateHTTPRequestOptionsFromAssetCreationOptions(v9[1], (uint64_t)v105, (__CFDictionary **)&cf);
      if ((_DWORD)v16)
        goto LABEL_141;
      v16 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions(v9[1], (uint64_t)v105, (unint64_t)v103[0], v9 + 23);
      if ((_DWORD)v16)
        goto LABEL_141;
      DictionaryValue = (const void *)FigCFDictionaryGetDictionaryValue();
      if (DictionaryValue)
        DictionaryValue = CFRetain(DictionaryValue);
      v9[24] = (__CFDictionary *)DictionaryValue;
      v24 = v9[1];
      v25 = FigAssetGetCMBaseObject(v9[2]);
      v26 = *(uint64_t (**)(uint64_t, const __CFString *, __CFDictionary *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v26)
        goto LABEL_28;
      v16 = v26(v25, CFSTR("assetProperty_DefaultContentKeySession"), v24, v9 + 20);
      if ((_DWORD)v16)
      {
LABEL_141:
        v7 = v16;
        goto LABEL_29;
      }
      v27 = v9[1];
      v28 = FigAssetGetCMBaseObject(v9[2]);
      v29 = *(uint64_t (**)(uint64_t, const __CFString *, __CFDictionary *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v29)
      {
        v16 = v29(v28, CFSTR("assetProperty_CustomURLLoader"), v27, v9 + 21);
        if (!(_DWORD)v16)
        {
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          v30 = v9[22];
          v31 = cf;
          v9[22] = (__CFDictionary *)cf;
          if (v31)
            CFRetain(v31);
          if (v30)
            CFRelease(v30);
          v32 = v9[1];
          v33 = FigAssetGetCMBaseObject(v9[2]);
          v34 = *(uint64_t (**)(uint64_t, const __CFString *, __CFDictionary *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v34)
          {
            v7 = v34(v33, CFSTR("assetProperty_ContentKeyBoss"), v32, v9 + 45);
            if (!(_DWORD)v7 && dword_1EE2A2BD0)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v7 = 0;
            }
            goto LABEL_29;
          }
          goto LABEL_28;
        }
        goto LABEL_141;
      }
    }
LABEL_28:
    v7 = 4294954514;
    goto LABEL_29;
  }
  v7 = v13;
  v8 = 0;
LABEL_29:
  if (cf)
    CFRelease(cf);
LABEL_31:
  FigHTTPSchedulerRelease(v8);
  if (v103[0])
    CFRelease(v103[0]);
  if (v105)
    CFRelease(v105);
  if ((_DWORD)v7)
    return v7;
  v36 = CMBaseObjectGetDerivedStorage();
  v113[0] = 0;
  *(_QWORD *)v106 = 0;
  if (*(_BYTE *)(a2 + 136))
    goto LABEL_37;
  v49 = v36;
  v50 = *(_DWORD *)(a2 + 16);
  if ((v50 - 2) >= 3)
  {
    if (v50 != 1)
      goto LABEL_63;
    v51 = FigStreamingCacheCopyMasterPlaylist(*(_QWORD *)(v36 + 24), (unint64_t)v113, 0);
    goto LABEL_56;
  }
  if (!metadw_createCacheForStream(a1, a2, v106) && *(_QWORD *)v106)
  {
    v51 = FigStreamingCacheMediaStreamCopyPlaylist(*(_QWORD *)(v49 + 24), *(uint64_t *)v106, (unint64_t)v113, 0);
LABEL_56:
    v52 = v51;
    v53 = v113[0];
    if (!v52 && v113[0])
    {
      *(CFTypeRef *)(a2 + 112) = v113[0];
LABEL_37:
      if ((*(_DWORD *)(a2 + 16) - 1) > 3)
        return 0;
      v37 = CMBaseObjectGetDerivedStorage();
      v103[0] = 0;
      v105 = 0;
      v38 = metadw_parseValidateAndCopyPlaylist(*(OpaqueCMBlockBuffer **)(a2 + 112), a1, a2, v103, (uint64_t *)&v105);
      v39 = v103[0];
      if (!(_DWORD)v38)
      {
        if (v103[0])
        {
          ContentKeySpecifiers = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers((uint64_t)v103[0]);
          v41 = metadw_processCryptKeysFromPlaylist(a1, a2, ContentKeySpecifiers);
          if ((_DWORD)v41)
          {
            v7 = v41;
            goto LABEL_98;
          }
        }
        v42 = v105;
        if (!v105
          || (v43 = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers((uint64_t)v105),
              v38 = metadw_processCryptKeysFromPlaylist(a1, a2, v43),
              !(_DWORD)v38))
        {
          metadw_estimateMediaBytesToDownloadForPlaylist(a1, a2, (uint64_t)v42);
          if (dword_1EE2A2BD0)
          {
            LODWORD(cf) = 0;
            v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v45 = cf;
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
              v46 = v45;
            else
              v46 = v45 & 0xFFFFFFFE;
            if (v46)
            {
              v47 = *(_QWORD *)(v37 + 136);
              v48 = *(_QWORD *)(a2 + 24);
              *(_DWORD *)v106 = 136315906;
              *(_QWORD *)&v106[4] = "metadw_processCachedPlaylist";
              v107 = 2048;
              v108 = a1;
              v109 = 2114;
              v110 = v47;
              v111 = 2112;
              v112 = v48;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v7 = 0;
          if (!v39)
            goto LABEL_99;
          goto LABEL_98;
        }
      }
      v7 = v38;
      if (!v39)
      {
LABEL_99:
        if (v105)
          CFRelease(v105);
        return v7;
      }
LABEL_98:
      CFRelease(v39);
      goto LABEL_99;
    }
    goto LABEL_60;
  }
  v53 = v113[0];
LABEL_60:
  if (v53)
    CFRelease(v53);
  v50 = *(_DWORD *)(a2 + 16);
LABEL_63:
  if (v50 == 5 && PKDIsContentKeyBossEnabled())
  {
    v54 = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)v103 = xmmword_1E2F861A8;
    v104 = metadw_contentKeyRequestDidFail;
    v105 = 0;
    cf = 0;
    if (!*(_QWORD *)(v54 + 360))
      goto LABEL_117;
    v55 = (uint64_t *)v54;
    FigContentKeySpecifierGetKeySystem(*(_QWORD *)(a2 + 64));
    AllocatorForMedia = FigGetAllocatorForMedia();
    v57 = FigContentKeyRequestParamsCreate(AllocatorForMedia, *(const void **)(a2 + 64), 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, (uint64_t *)&cf);
    if ((_DWORD)v57)
    {
      v7 = v57;
    }
    else
    {
      v58 = v55[45];
      v59 = cf;
      v60 = v55[22];
      v61 = v55[23];
      v62 = *v55;
      v63 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v63)
      {
        v7 = v63(v58, v59, 1, 1, v60, v61, v103, a1, v62, &v105);
        if (!(_DWORD)v7 && dword_1EE2A2BD0)
        {
          v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v7 = 0;
        }
      }
      else
      {
        v7 = 4294954514;
      }
    }
    if (cf)
      CFRelease(cf);
    if (!(_DWORD)v7)
    {
LABEL_117:
      v7 = 0;
      ++*(_QWORD *)(DerivedStorage + 344);
    }
    return v7;
  }
  shouldRequestBeSentOverHTTP = metadw_shouldRequestBeSentOverHTTP(a1, a2);
  v66 = CMBaseObjectGetDerivedStorage();
  v67 = v66;
  if (shouldRequestBeSentOverHTTP)
  {
    v103[0] = 0;
    LODWORD(v105) = 0;
    if (*(_QWORD *)(a2 + 88) || *(_DWORD *)(a2 + 96))
    {
      v92 = FigSignalErrorAt();
      if (!(_DWORD)v92)
      {
LABEL_129:
        if (*(_DWORD *)(a2 + 96) || *(_QWORD *)(a2 + 104))
          ++*(_QWORD *)(DerivedStorage + 328);
        v7 = 0;
        *(_QWORD *)(a2 + 144) = FigGetUpTimeNanoseconds();
        return v7;
      }
    }
    else
    {
      v101 = DerivedStorage;
      if (*(_BYTE *)(v66 + 128))
        v68 = 2055;
      else
        v68 = 7;
      if (*(_BYTE *)(v66 + 129))
        v69 = v68 | 0x1000;
      else
        v69 = v68;
      v70 = *(_DWORD *)(a2 + 16) - 1;
      if (v70 > 4)
        v71 = 0;
      else
        v71 = dword_1932FA1E8[v70];
      if (dword_1EE2A2BD0)
      {
        LODWORD(cf) = 0;
        v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v81 = cf;
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
          v82 = v81;
        else
          v82 = v81 & 0xFFFFFFFE;
        if (v82)
        {
          v83 = *(_QWORD *)(v67 + 136);
          v84 = *(_QWORD *)(a2 + 24);
          *(_DWORD *)v106 = 136315906;
          *(_QWORD *)&v106[4] = "metadw_createHTTPRequest";
          v107 = 2048;
          v108 = a1;
          v109 = 2114;
          v110 = v83;
          v111 = 2112;
          v112 = v84;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v85 = *(_QWORD *)(v67 + 256);
      v86 = *(_QWORD *)(v67 + 8);
      v87 = *(_QWORD *)(a2 + 24);
      v89 = *(_QWORD *)(v67 + 176);
      v88 = *(_QWORD *)(v67 + 184);
      v90 = *(_QWORD *)(v67 + 208);
      v91 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, _QWORD, void (*)(uint64_t, int, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, char, uint64_t), uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v91)
        return 4294954514;
      v115 = 0u;
      v116 = 0u;
      *(_OWORD *)v113 = 0u;
      v114 = 0u;
      v117 = 0;
      v118 = v71;
      v119 = 0u;
      v120 = 0u;
      v121 = 0;
      v92 = v91(v85, v86, 0, v87, 0, v88, v89, v69, v113, 0, 0, 0, metadw_httpReadCallback, v90, v103, &v105);
      if (!(_DWORD)v92)
      {
        *(CFTypeRef *)(a2 + 88) = v103[0];
        v93 = (const void *)(int)v105;
        *(_DWORD *)(a2 + 96) = (_DWORD)v105;
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v67 + 312), v93, (const void *)a2);
        DerivedStorage = v101;
        goto LABEL_129;
      }
    }
    return v92;
  }
  v103[0] = 0;
  v105 = 0;
  if (!*(_QWORD *)(a2 + 24) || !*(_QWORD *)(v66 + 168) || !*(_QWORD *)(v66 + 160) || *(_QWORD *)(a2 + 104))
  {
    Mutable = FigSignalErrorAt();
    goto LABEL_145;
  }
  Mutable = FigCustomURLRequestInfoCreateMutable();
  if ((_DWORD)Mutable)
  {
LABEL_145:
    v7 = Mutable;
    v73 = 0;
    goto LABEL_124;
  }
  v73 = FigCFHTTPCreateUserAgent();
  v74 = FigCustomURLRequestInfoSetUserAgent();
  if ((_DWORD)v74)
    goto LABEL_142;
  if ((*(_DWORD *)(a2 + 16) - 1) > 3)
  {
LABEL_123:
    v7 = 0;
    goto LABEL_124;
  }
  v74 = FigCustomURLRequestInfoSetAcceptEncoding();
  if ((_DWORD)v74)
  {
LABEL_142:
    v7 = v74;
  }
  else
  {
    if (dword_1EE2A2BD0)
    {
      LODWORD(cf) = 0;
      v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v76 = cf;
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
        v77 = v76;
      else
        v77 = v76 & 0xFFFFFFFE;
      if (v77)
      {
        v78 = *(_QWORD *)(v67 + 136);
        v79 = *(_QWORD *)(a2 + 24);
        *(_DWORD *)v106 = 136315906;
        *(_QWORD *)&v106[4] = "metadw_createCustomURLRequest";
        v107 = 2048;
        v108 = a1;
        v109 = 2114;
        v110 = v78;
        v111 = 2112;
        v112 = v79;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v94 = *(_QWORD *)(v67 + 168);
    v95 = v103[0];
    v96 = *(_QWORD *)(v67 + 208);
    v97 = *(_QWORD *)v67;
    v98 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 24);
    if (v98)
    {
      v7 = v98(v94, v95, v96, v97, metadw_customURLReadCallback, &v105);
      if (!(_DWORD)v7)
      {
        v99 = v105;
        if (v105)
        {
          *(_QWORD *)(a2 + 104) = v105;
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v67 + 320), v99, (const void *)a2);
          goto LABEL_123;
        }
      }
    }
    else
    {
      v7 = 4294954514;
    }
  }
LABEL_124:
  if (v103[0])
    CFRelease(v103[0]);
  if (v73)
    CFRelease(v73);
  if (!(_DWORD)v7)
    goto LABEL_129;
  return v7;
}

void metadw_checkIfDownloadIsComplete(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _QWORD *v14;
  _QWORD *v15;
  CFTypeRef v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 232) <= 2u)
  {
    v3 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 336) == *(_QWORD *)(DerivedStorage + 328) && !*(_BYTE *)(DerivedStorage + 248))
    {
      *(_BYTE *)(DerivedStorage + 248) = 1;
      v4 = CMBaseObjectGetDerivedStorage();
      v5 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v5)
      {
        v6 = (const void *)v5;
        v7 = malloc_type_calloc(1uLL, 0x18uLL, 0xE0040D4EF70FBuLL);
        if (v7)
        {
          v8 = v7;
          if (a1)
            v9 = CFRetain(a1);
          else
            v9 = 0;
          *v8 = v9;
          v8[1] = v6;
          dispatch_async_f(*(dispatch_queue_t *)(v4 + 120), v8, (dispatch_function_t)metadw_sendDidFinishLoadingPlaylistsCallbackCallbackOnCallbackQueue);
        }
        else if (FigSignalErrorAt())
        {
          CFRelease(v6);
        }
      }
    }
    if (*(_QWORD *)(v3 + 344) == *(_QWORD *)(v3 + 352) && *(_QWORD *)(v3 + 336) == *(_QWORD *)(v3 + 328))
    {
      if (dword_1EE2A2BD0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_DWORD *)(v3 + 232) = 3;
      FigStreamingAssetProgressMonitorMarkInitialEstimationOfExpectedBytesAsComplete(*(const void **)(v3 + 240));
      v11 = CMBaseObjectGetDerivedStorage();
      v12 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v12)
      {
        v13 = (const void *)v12;
        v14 = malloc_type_calloc(1uLL, 0x18uLL, 0xE0040D4EF70FBuLL);
        if (v14)
        {
          v15 = v14;
          if (a1)
            v16 = CFRetain(a1);
          else
            v16 = 0;
          *v15 = v16;
          v15[1] = v13;
          dispatch_async_f(*(dispatch_queue_t *)(v11 + 120), v15, (dispatch_function_t)metadw_sendDownloadSucceededCallbackOnCallbackQueue);
        }
        else if (FigSignalErrorAt())
        {
          CFRelease(v13);
        }
      }
    }
  }
}

uint64_t metadw_createCacheForStream(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  int PeakBitRate;
  __CFDictionary *v7;
  __CFDictionary *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  if (*(_BYTE *)(DerivedStorage + 201))
    PeakBitRate = 0;
  else
    PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 16));
  v7 = (__CFDictionary *)FigCFHTTPCreateURLString(*(const __CFURL **)(a2 + 32));
  if (v7)
  {
    v8 = v7;
    v9 = *(_DWORD *)(a2 + 16);
    if ((v9 - 2) >= 3)
    {
      v10 = FigSignalErrorAt();
    }
    else
    {
      v10 = FigStreamingCacheCreateMediaStream(*(_QWORD *)(DerivedStorage + 24), v9 - 2, v7, *(const void **)(a2 + 56), PeakBitRate, v9 == 4, &v13);
      if (!(_DWORD)v10)
      {
        v11 = FigStreamingCacheMediaStreamSetPersistent(*(_QWORD *)(DerivedStorage + 24), v13, *MEMORY[0x1E0C9AE50]);
        if (!(_DWORD)v11)
          *a3 = v13;
        goto LABEL_11;
      }
    }
    v11 = v10;
LABEL_11:
    CFRelease(v8);
    return v11;
  }
  return FigSignalErrorAt();
}

uint64_t metadw_parseValidateAndCopyPlaylist(OpaqueCMBlockBuffer *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t DerivedStorage;
  uint64_t ParamsAsDict;
  uint64_t v11;
  const void *v12;
  const void *PlaylistVariables;
  CFTypeRef cf;
  uint64_t v16;
  uint64_t v17;
  int v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v16 = 0;
  v17 = 0;
  cf = 0;
  ParamsAsDict = FigCFHTTPCopyQueryParamsAsDict(*(_QWORD *)(a3 + 24), (CFMutableDictionaryRef *)&cf);
  if ((_DWORD)ParamsAsDict)
    goto LABEL_16;
  v11 = FigStreamPlaylistParse(a1, 0, 0, &v18, 0, 0, 1, *(unsigned __int8 *)(DerivedStorage + 202), 0, 0, *(const __CFDictionary **)(DerivedStorage + 368), (const __CFDictionary *)cf, &v17, (CFTypeRef *)&v16);
  if (*(_DWORD *)(a3 + 16) == 1)
  {
    v12 = *(const void **)(DerivedStorage + 368);
    if (v17)
    {
      PlaylistVariables = (const void *)FigMultivariantPlaylistGetPlaylistVariables(v17);
      *(_QWORD *)(DerivedStorage + 368) = PlaylistVariables;
      if (PlaylistVariables)
        CFRetain(PlaylistVariables);
      if (!v12)
        goto LABEL_8;
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 368) = 0;
      if (!v12)
        goto LABEL_8;
    }
    CFRelease(v12);
  }
LABEL_8:
  if ((_DWORD)v11)
    goto LABEL_17;
  if (*(_DWORD *)(a3 + 16) == 1 || v16 && FigMediaPlaylistHasEndTag(v16))
  {
    v11 = 0;
    *a4 = v17;
    *a5 = v16;
    goto LABEL_17;
  }
  ParamsAsDict = FigSignalErrorAt();
LABEL_16:
  v11 = ParamsAsDict;
LABEL_17:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t metadw_processCryptKeysFromPlaylist(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFAllocator *AllocatorForMedia;
  const __CFString *Identifier;
  CFURLRef v12;
  uint64_t ResourceRequestForMetadataItem;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v18 = 0;
  if (!a3)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(a3); ; i = 0)
  {
    if (v7 >= i)
      return 0;
    ValueAtIndex = CFArrayGetValueAtIndex(a3, v7);
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Identifier = (const __CFString *)FigContentKeySpecifierGetIdentifier((uint64_t)ValueAtIndex);
    v12 = CFURLCreateWithString(AllocatorForMedia, Identifier, 0);
    if (FigCFHTTPIsHTTPBasedURL(v12) || CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 304), v12))
    {
      if (!v12)
        goto LABEL_9;
LABEL_8:
      CFRelease(v12);
      goto LABEL_9;
    }
    ResourceRequestForMetadataItem = metadw_createMetadataDownloadItem(*(_QWORD *)(a2 + 40), 5, v12, 0, 0, 0, ValueAtIndex, &v18);
    if ((_DWORD)ResourceRequestForMetadataItem)
      break;
    v14 = v18;
    ResourceRequestForMetadataItem = metadw_createResourceRequestForMetadataItem(a1, v18);
    if ((_DWORD)ResourceRequestForMetadataItem)
      break;
    CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 304), v12);
    v15 = *(_QWORD **)(DerivedStorage + 288);
    *v14 = 0;
    v14[1] = v15;
    *v15 = v14;
    *(_QWORD *)(DerivedStorage + 288) = v14;
    if (v12)
      goto LABEL_8;
LABEL_9:
    ++v7;
    if (a3)
      goto LABEL_2;
LABEL_3:
    ;
  }
  v16 = ResourceRequestForMetadataItem;
  if (v12)
    CFRelease(v12);
  free(v18);
  return v16;
}

uint64_t metadw_estimateMediaBytesToDownloadForPlaylist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  CFIndex v9;
  char v10;
  const __CFArray *MediaSegmentSpecifiers;
  const __CFArray *v12;
  const void *ValueAtIndex;
  int v14;
  uint64_t v15;
  double v16;
  int HasLosslessAudio;
  const void *v18;
  uint64_t v19;
  uint64_t AudioSampleRate;
  int AudioBitDepth;
  BOOL v22;
  double TimeInSeconds;
  double v24;
  double v25;
  int AudioChannelCount;
  double v27;
  const void *v28;
  uint64_t v29;
  const void *v30;
  const void *v31;
  CMTime v32;

  result = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v6 = result;
    if (!*(_BYTE *)(result + 201))
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 1;
      while (1)
      {
        MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a3);
        if (MediaSegmentSpecifiers)
          MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
        if (v9 >= (uint64_t)MediaSegmentSpecifiers)
        {
          v28 = *(const void **)(v6 + 240);
          v29 = *(_QWORD *)(a2 + 40);
          v30 = *(const void **)(v29 + 16);
          v31 = *(const void **)(v29 + 24);
          CMTimeMake(&v32, v8, 1);
          return FigStreamingAssetProgressMonitorUpdateExpectedMediaBytesToDownload(v28, v30, v31, (__int128 *)&v32.value, v7, v10);
        }
        v12 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a3);
        ValueAtIndex = CFArrayGetValueAtIndex(v12, v9);
        if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)ValueAtIndex))
        {
          v7 += FigMediaSegmentSpecifierGetBytesToRead((uint64_t)ValueAtIndex);
          goto LABEL_29;
        }
        v14 = *(_DWORD *)(a2 + 16);
        switch(v14)
        {
          case 4:
            v10 = 0;
            v16 = (double)v7 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex) * 30.0;
            break;
          case 3:
            HasLosslessAudio = FigAlternateHasLosslessAudio(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 16));
            v18 = *(const void **)(a2 + 48);
            v19 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 16);
            if (HasLosslessAudio)
            {
              AudioSampleRate = (uint64_t)FigAlternateGetAudioSampleRate(v19, v18);
              AudioBitDepth = FigAlternateGetAudioBitDepth(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 16), *(const void **)(a2 + 48));
              if (AudioSampleRate)
                v22 = AudioBitDepth == 0;
              else
                v22 = 1;
              if (v22)
              {
                TimeInSeconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
                v10 = 0;
                v24 = (double)v7;
                v25 = 131072.0;
LABEL_27:
                v16 = v24 + TimeInSeconds * v25;
                break;
              }
              v27 = (float)((float)((float)AudioSampleRate * (float)AudioBitDepth) * 0.125);
              v10 = 0;
              v16 = (double)v7 + v27 * FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
            }
            else
            {
              AudioChannelCount = FigAlternateGetAudioChannelCount(v19, (uint64_t)v18, 0);
              TimeInSeconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
              v24 = (double)v7;
              if (AudioChannelCount < 3)
              {
                v10 = 0;
                v25 = 16384.0;
                goto LABEL_27;
              }
              v10 = 0;
              v16 = v24 + TimeInSeconds * 52428.8008;
            }
            break;
          case 2:
            v15 = (uint64_t)(float)((float)(int)FigAlternateGetAverageBitRate(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 16))
                                 * 0.95);
            if (!v15)
              v15 = (uint64_t)(float)((float)(int)FigAlternateGetPeakBitRate(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 16))
                                   * 0.7);
            v10 = 0;
            v16 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex) * (float)v15 * 0.125 + (double)v7;
            break;
          default:
            v10 = 0;
            goto LABEL_29;
        }
        v7 = (uint64_t)v16;
LABEL_29:
        v8 = (uint64_t)(FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex) + (double)v8);
        ++v9;
      }
    }
  }
  return result;
}

void metadw_contentKeyRequestDidSucceed(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ++*(_QWORD *)(DerivedStorage + 352);
  metadw_checkIfDownloadIsComplete(a1);
}

void metadw_contentKeyRequestDidFail(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ++*(_QWORD *)(DerivedStorage + 352);
  metadw_checkIfDownloadIsComplete(a1);
}

void metadw_httpReadCallback(uint64_t a1, int a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, char a7, uint64_t a8)
{
  int v15;
  CFTypeRef v16;
  uint64_t DerivedStorage;
  _DWORD *Value;
  uint64_t v19;
  void (*v20)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  int v21;
  void (*v22)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  __CFHTTPMessage *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v28;
  CFTypeRef v29[25];

  v29[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v28 = 0;
  v29[0] = 0;
  cf = 0;
  v15 = dworch_copyAssetDownloaderFromRetainProxy(a3, v29);
  v16 = v29[0];
  if (v15)
    goto LABEL_27;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
    goto LABEL_30;
  if (*(_DWORD *)(DerivedStorage + 232) != 1)
    goto LABEL_25;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 312), (const void *)a2);
  if (Value && (v19 = (uint64_t)Value, *((_QWORD *)Value + 11) == a1))
  {
    if ((_DWORD)a8)
    {
      v20 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
      if (v20)
      {
        v20(a1, CFSTR("FHRP_ErrorReturned"), *MEMORY[0x1E0C9AE00], &cf);
        if (cf)
        {
          metadw_transitionToTerminalState(v16, cf);
          goto LABEL_22;
        }
      }
LABEL_21:
      metadw_transitionToTerminalStateWithOSStatus(v16, a8);
LABEL_22:
      if (cf)
        CFRelease(cf);
      goto LABEL_25;
    }
    v21 = a7 & 2;
    if ((Value[4] - 1) <= 3)
    {
      v22 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
      if (v22)
      {
        v22(a1, CFSTR("FHRP_HTTPResponseHeaders"), *MEMORY[0x1E0C9AE00], &v28);
        v23 = (__CFHTTPMessage *)v28;
      }
      else
      {
        v23 = 0;
      }
      v25 = metadw_handlePlaylistFileData((uint64_t)v16, v19, a4, a5, a6, v23, v21);
      a8 = v25;
      if (v21 && !(_DWORD)v25)
        goto LABEL_18;
      goto LABEL_20;
    }
    v24 = FigSignalErrorAt();
    if (v21)
    {
LABEL_18:
      if (dword_1EE2A2BD0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      metadw_clearHTTPRequestState((uint64_t)v16, v19);
      ++*(_QWORD *)(DerivedStorage + 336);
      metadw_checkIfDownloadIsComplete(v16);
      goto LABEL_25;
    }
  }
  else
  {
LABEL_30:
    v24 = FigSignalErrorAt();
  }
  a8 = v24;
LABEL_20:
  if ((_DWORD)a8)
    goto LABEL_21;
LABEL_25:
  if (v28)
    CFRelease(v28);
LABEL_27:
  if (v16)
    CFRelease(v16);
}

uint64_t metadw_handlePlaylistFileData(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, size_t a4, size_t a5, __CFHTTPMessage *a6, int a7)
{
  uint64_t DerivedStorage;
  OpaqueCMBlockBuffer *v15;
  CMBlockBufferRef *v16;
  uint64_t Empty;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  const __CFArray *ContentKeySpecifiers;
  uint64_t v22;
  CFTypeRef v23;
  const __CFArray *v24;
  uint64_t v25;
  const __CFArray *DateEntryArray;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int Count;
  CFArrayRef v32;
  __CFArray *v33;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  uint64_t v36;
  const __CFString *v37;
  const __CFString *v38;
  size_t DataLength;
  uint64_t CacheForStream;
  int v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, __CFString *, __CFString *, unint64_t);
  int v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, __CFString *, uint64_t, uint64_t);
  CFTypeRef v55;
  uint64_t UpTimeNanoseconds;
  CFTypeRef v57;
  const void *v58;
  char v59;
  os_log_type_t type;
  unsigned int v61;
  CFArrayRef theArray;
  _BYTE cf[12];
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  _QWORD *v72[18];
  CFRange v73;

  v72[16] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v59 = 0;
  v57 = 0;
  v58 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (!a3)
  {
LABEL_9:
    if (!a7)
    {
      v18 = 0;
      goto LABEL_71;
    }
    v19 = metadw_parseValidateAndCopyPlaylist(*(OpaqueCMBlockBuffer **)(a2 + 112), a1, a2, &v58, (uint64_t *)&v57);
    v20 = v58;
    v55 = v58;
    if ((_DWORD)v19)
      goto LABEL_75;
    if (v58)
    {
      ContentKeySpecifiers = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers((uint64_t)v58);
      v22 = metadw_processCryptKeysFromPlaylist(a1, a2, ContentKeySpecifiers);
      if ((_DWORD)v22)
      {
        v18 = v22;
LABEL_70:
        CFRelease(v20);
        goto LABEL_71;
      }
    }
    v23 = v57;
    if (!v57)
      goto LABEL_38;
    v24 = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers((uint64_t)v57);
    v19 = metadw_processCryptKeysFromPlaylist(a1, a2, v24);
    if ((_DWORD)v19)
    {
LABEL_75:
      v18 = v19;
      goto LABEL_69;
    }
    if (!*(_BYTE *)(DerivedStorage + 144))
      goto LABEL_38;
    v25 = CMBaseObjectGetDerivedStorage();
    theArray = 0;
    DateEntryArray = (const __CFArray *)FigMediaPlaylistGetDateEntryArray((uint64_t)v23);
    if (DateEntryArray)
    {
      v18 = FigPlayerInterstitialEventsCreateFromTaggedRangeMetadata(DateEntryArray, (uint64_t)CFSTR("kFPICPlayerItem_Null"), &theArray);
      if (dword_1EE2A2BD0)
      {
        v61 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v28 = v61;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v29 = v28;
        else
          v29 = v28 & 0xFFFFFFFE;
        if (v29)
        {
          v30 = *(_QWORD *)(v25 + 136);
          Count = (int)theArray;
          if (theArray)
            Count = CFArrayGetCount(theArray);
          *(_DWORD *)cf = 136316162;
          *(_QWORD *)&cf[4] = "metadw_processInterstitialEventsFromPlaylist";
          v64 = 2048;
          v65 = a1;
          v66 = 2114;
          v67 = v30;
          v68 = 1024;
          v69 = Count;
          v70 = 1024;
          v71 = v18;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v32 = theArray;
      if ((_DWORD)v18 || !theArray)
      {
LABEL_35:
        if (v32)
          CFRelease(v32);
        if ((_DWORD)v18)
          goto LABEL_69;
LABEL_38:
        v36 = CMBaseObjectGetDerivedStorage();
        v72[0] = 0;
        *(_QWORD *)cf = 0;
        v37 = (const __CFString *)FigCFHTTPCreateURLString(*(const __CFURL **)(a2 + 24));
        if (!v37)
        {
          v18 = FigSignalErrorAt();
          if ((_DWORD)v18)
            goto LABEL_69;
          goto LABEL_56;
        }
        v38 = v37;
        if (!a6
          || (DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a2 + 112)),
              CacheForStream = FigCFHTTPCreateCacheHeaders(v38, DataLength, a6, 0, (CFDictionaryRef *)cf),
              !(_DWORD)CacheForStream))
        {
          v41 = *(_DWORD *)(a2 + 16);
          if ((v41 - 2) >= 3)
          {
            if (v41 == 5)
            {
              v18 = FigSignalErrorAt();
            }
            else
            {
              if (v41 == 1)
              {
                v42 = FigStreamingCacheSetMasterPlaylist(*(_QWORD *)(v36 + 24), *(const void **)(a2 + 112), *(const void **)cf);
LABEL_47:
                v18 = v42;
                if ((_DWORD)v42)
                  goto LABEL_53;
                goto LABEL_51;
              }
              v18 = 0;
            }
LABEL_51:
            *(_BYTE *)(a2 + 136) = 1;
            v43 = *(const void **)(a2 + 112);
            if (v43)
            {
              CFRelease(v43);
              *(_QWORD *)(a2 + 112) = 0;
            }
LABEL_53:
            CFRelease(v38);
            if (*(_QWORD *)cf)
              CFRelease(*(CFTypeRef *)cf);
            if (!(_DWORD)v18)
            {
LABEL_56:
              metadw_estimateMediaBytesToDownloadForPlaylist(a1, a2, (uint64_t)v23);
              if (*(_DWORD *)(a2 + 16) == 1)
              {
                v44 = *(_QWORD *)(DerivedStorage + 384);
                if (v44)
                {
                  v45 = *(_QWORD *)(a2 + 144);
                  v46 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                  if (v46)
                    v46(v44, CFSTR("streamingOrchestratorStats"), CFSTR("MasterPlaylistDT"), (UpTimeNanoseconds - v45) / 0xF4240uLL, 0);
                }
              }
              v47 = *(_QWORD *)(DerivedStorage + 384);
              if (v47)
              {
                v48 = *(_QWORD *)(a2 + 144);
                v49 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
                if (v49)
                  v49(v47, CFSTR("streamingOrchestratorStats"), CFSTR("LastMetaDataDwnTime"), (UpTimeNanoseconds - v48) / 0xF4240uLL);
              }
              v50 = *(_DWORD *)(a2 + 16);
              v51 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 384);
              if (v51)
              {
                if ((v50 - 2) <= 2)
                {
                  v52 = (uint64_t)*off_1E2F861C0[v50 - 2];
                  if (v52)
                  {
                    v53 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 32);
                    if (v53)
                      v53(v51, CFSTR("streamingOrchestratorStats"), v52, 1);
                  }
                }
              }
              v18 = 0;
            }
LABEL_69:
            v20 = v55;
            if (!v55)
              goto LABEL_71;
            goto LABEL_70;
          }
          CacheForStream = metadw_createCacheForStream(a1, a2, v72);
          if (!(_DWORD)CacheForStream)
          {
            v42 = FigStreamingCacheMediaStreamSetPlaylist(*(_QWORD *)(v36 + 24), v72[0], *(const void **)(a2 + 112), *(const void **)cf);
            goto LABEL_47;
          }
        }
        v18 = CacheForStream;
        goto LABEL_53;
      }
      v33 = *(__CFArray **)(v25 + 376);
      if (!v33)
      {
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)(v25 + 376) = Mutable;
        if (!Mutable)
        {
          v18 = FigSignalErrorAt();
          goto LABEL_34;
        }
        v33 = Mutable;
        v32 = theArray;
      }
      v73.length = CFArrayGetCount(v32);
      v73.location = 0;
      CFArrayAppendArray(v33, v32, v73);
    }
    v18 = 0;
LABEL_34:
    v32 = theArray;
    goto LABEL_35;
  }
  v16 = (CMBlockBufferRef *)(a2 + 112);
  v15 = *(OpaqueCMBlockBuffer **)(a2 + 112);
  if (!v15)
  {
    Empty = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, (CMBlockBufferRef *)(a2 + 112));
    if ((_DWORD)Empty)
      goto LABEL_74;
    v15 = *v16;
  }
  Empty = CMBlockBufferAppendBufferReference(v15, a3, a4, a5, 0);
  if (!(_DWORD)Empty)
  {
    if (!FigStreamingPlaylistVerifyM3UPlaylist(*v16, &v59) && v59)
    {
      v18 = 4294951694;
      goto LABEL_71;
    }
    goto LABEL_9;
  }
LABEL_74:
  v18 = Empty;
LABEL_71:
  if (v57)
    CFRelease(v57);
  return v18;
}

void metadw_customURLReadCallback(uint64_t a1, const void *a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, unint64_t a6)
{
  CFTypeRef v10;
  uint64_t DerivedStorage;
  _DWORD *Value;
  uint64_t v13;
  int v14;
  uint64_t HTTPStatusCode;
  uint64_t ResourceRequestForMetadataItem;
  uint64_t v17;
  int v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFURLRef v21;
  __CFHTTPMessage *v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v24;
  CFURLRef v25;
  const void *v26;
  CFTypeRef cf;
  CFTypeRef v28;
  uint64_t v29;
  CFTypeRef v30;
  CFTypeRef v31[25];

  v31[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v30 = 0;
  v31[0] = 0;
  v28 = 0;
  v29 = 0;
  cf = 0;
  if (dworch_copyAssetDownloaderFromRetainProxy(a1, v31))
    goto LABEL_54;
  v10 = v31[0];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216)
    || (Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 320), a2)) == 0)
  {
    ResourceRequestForMetadataItem = FigSignalErrorAt();
    v22 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  v13 = (uint64_t)Value;
  v14 = *(_DWORD *)(DerivedStorage + 232);
  if (v14 == 1 || v14 == 3 && Value[4] == 5)
  {
    HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
    if (!(_DWORD)HTTPStatusCode || (ResourceRequestForMetadataItem = HTTPStatusCode, (_DWORD)HTTPStatusCode == -17360))
    {
      v17 = FigCFHTTPCreateCFErrorFromHTTPStatusCode(v29, (CFErrorRef *)&cf);
      if ((_DWORD)v17)
        goto LABEL_41;
      v18 = a5 & 1;
      if (a6 | (unint64_t)cf)
      {
        if (a6)
          v19 = (CFTypeRef)a6;
        else
          v19 = cf;
        v20 = CFRetain(v19);
      }
      else
      {
        v20 = 0;
      }
      if ((*(_DWORD *)(v13 + 16) - 1) > 3)
      {
        ResourceRequestForMetadataItem = FigSignalErrorAt();
        v21 = 0;
        v22 = 0;
        goto LABEL_34;
      }
      if (v20)
      {
        v22 = 0;
        v21 = 0;
LABEL_37:
        metadw_transitionToTerminalState(v10, v20);
        CFRelease(v20);
        goto LABEL_44;
      }
      if ((a5 & 1) != 0 && dword_1EE2A2BD0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v17 = FigCustomURLResponseInfoCopyRequestInfo();
      if ((_DWORD)v17)
      {
LABEL_41:
        ResourceRequestForMetadataItem = v17;
      }
      else
      {
        v24 = FigCustomURLResponseInfoCopyHTTPHeaders();
        if (!(_DWORD)v24 || (ResourceRequestForMetadataItem = v24, (_DWORD)v24 == -17360))
        {
          if ((a5 & 1) != 0 && FigCFHTTPIsStatusCodeRedirect(v29))
          {
            v25 = FigCFHTTPCopyRedirectLocationFromHTTPHeaders((const __CFDictionary *)v28);
            v21 = v25;
            if (!v25)
            {
              ResourceRequestForMetadataItem = FigSignalErrorAt();
              v22 = 0;
              if (!(_DWORD)ResourceRequestForMetadataItem)
                goto LABEL_44;
              goto LABEL_43;
            }
            v26 = *(const void **)(v13 + 24);
            *(_QWORD *)(v13 + 24) = v25;
            CFRetain(v25);
            if (v26)
              CFRelease(v26);
            ResourceRequestForMetadataItem = metadw_createResourceRequestForMetadataItem(v10, v13);
            v22 = 0;
            if ((_DWORD)ResourceRequestForMetadataItem)
            {
LABEL_43:
              metadw_transitionToTerminalStateWithOSStatus(v10, ResourceRequestForMetadataItem);
              goto LABEL_44;
            }
          }
          else
          {
            v22 = FigCFHTTPCreateHTTPMessageFromHTTPResponseHeaders(v28);
            ResourceRequestForMetadataItem = metadw_handlePlaylistFileData((uint64_t)v10, v13, a4, 0, 0, v22, v18);
            v21 = 0;
            if ((_DWORD)ResourceRequestForMetadataItem)
              goto LABEL_43;
          }
LABEL_34:
          if (v18)
          {
            metadw_clearCustomURLRequestState((uint64_t)v10, v13);
            ++*(_QWORD *)(DerivedStorage + 336);
            metadw_checkIfDownloadIsComplete(v10);
            ResourceRequestForMetadataItem = 0;
          }
          if (v20)
            goto LABEL_37;
LABEL_39:
          if (!(_DWORD)ResourceRequestForMetadataItem)
            goto LABEL_44;
          goto LABEL_43;
        }
      }
    }
    v21 = 0;
    v22 = 0;
    goto LABEL_43;
  }
  v21 = 0;
  v22 = 0;
LABEL_44:
  if (cf)
    CFRelease(cf);
  if (v30)
    CFRelease(v30);
  if (v21)
    CFRelease(v21);
  if (v28)
    CFRelease(v28);
  if (v22)
    CFRelease(v22);
LABEL_54:
  if (v31[0])
    CFRelease(v31[0]);
}

void metadw_sendDidFinishLoadingPlaylistsCallbackCallbackOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD);
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD))(DerivedStorage + 112);
    if (v3)
      v3(a1[1], *a1);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[1];
  if (v4)
    CFRelease(v4);
  free(a1);
}

void metadw_sendDownloadSucceededCallbackOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD);
  void (*v4)(_QWORD, _QWORD);
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD))(DerivedStorage + 48);
    if (v3)
      v3(a1[1], *a1);
    v4 = *(void (**)(_QWORD, _QWORD))(DerivedStorage + 88);
    if (v4)
      v4(a1[1], *a1);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v5 = (const void *)a1[1];
  if (v5)
    CFRelease(v5);
  free(a1);
}

void metadw_pauseDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;

  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    v5 = FigSignalErrorAt();
    if ((_DWORD)v5)
      metadw_transitionToTerminalStateWithOSStatus(*(const void **)a1, v5);
  }
  else
  {
    if (*(_DWORD *)(DerivedStorage + 232) <= 1u)
    {
      *(_DWORD *)(DerivedStorage + 232) = 2;
      metadw_cancelResourceRequestForMetadataItems((uint64_t)v2);
    }
    LODWORD(v5) = 0;
  }
  *(_DWORD *)(a1 + 24) = v5;
}

void metadw_stopDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;

  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2BD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    v5 = FigSignalErrorAt();
    if ((_DWORD)v5)
      metadw_transitionToTerminalStateWithOSStatus(*(const void **)a1, v5);
  }
  else
  {
    if (*(_DWORD *)(DerivedStorage + 232) <= 2u)
    {
      *(_DWORD *)(DerivedStorage + 232) = 5;
      metadw_cancelResourceRequestForMetadataItems((uint64_t)v2);
    }
    LODWORD(v5) = 0;
  }
  *(_DWORD *)(a1 + 24) = v5;
}

uint64_t FigWriteHLSfMP4SecurityInfoIncludingAtomHeader(int a1, unsigned int a2, signed int a3, unsigned int a4, const __CFData *a5, _QWORD *a6, size_t *a7, unint64_t a8, void *a9)
{
  uint64_t v11;
  OpaqueCMBlockBuffer *v12;
  uint64_t v13;
  size_t DataLength;
  CMBlockBufferRef theBuffer;

  theBuffer = 0;
  v11 = hlsfmp4_CreateBlockBufferContainingHLSfMP4SecurityInfo(a1, a2, a3, a4, a5, a6, a8, &theBuffer);
  v12 = theBuffer;
  if ((_DWORD)v11)
    goto LABEL_7;
  v13 = (uint64_t)a9;
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  if (a7)
    *a7 = DataLength;
  if (a9)
  {
    if (DataLength > a8)
      v11 = FigSignalErrorAt();
    else
      v11 = CMBlockBufferCopyDataBytes(v12, 0, DataLength, a9);
LABEL_7:
    v13 = v11;
  }
  if (v12)
    CFRelease(v12);
  return v13;
}

uint64_t hlsfmp4_CreateBlockBufferContainingHLSfMP4SecurityInfo(int a1, unsigned int a2, signed int a3, unsigned int a4, const __CFData *a5, _QWORD *a6, unint64_t a7, CMBlockBufferRef *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t appended;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char Length;
  const __CFData *PlayReadyKeyIdentifier;
  unint64_t v27;
  BOOL v28;
  size_t v29;
  uint64_t v30;
  void *v31;
  CMBlockBufferRef blockBufferOut;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  blockBufferOut = 0;
  v16 = CMBlockBufferCreateEmpty(0, 0x20u, 1u, &blockBufferOut);
  if ((_DWORD)v16)
    goto LABEL_89;
  v16 = FigAtomWriterInitWithBlockBuffer();
  if ((_DWORD)v16)
    goto LABEL_89;
  v17 = FigAtomWriterBeginAtom();
  if ((_DWORD)v17)
  {
    appended = v17;
    goto LABEL_84;
  }
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v45 = 0u;
  LODWORD(v39) = 0;
  v18 = FigAtomWriterInitWithParent();
  if ((_DWORD)v18)
    goto LABEL_80;
  v18 = FigAtomWriterBeginAtom();
  if ((_DWORD)v18)
    goto LABEL_80;
  LODWORD(v39) = bswap32(a2);
  appended = FigAtomWriterAppendData();
  FigAtomWriterEndAtom();
  if ((_DWORD)appended)
  {
LABEL_84:
    FigAtomWriterEndAtom();
    goto LABEL_90;
  }
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v45 = 0u;
  DWORD2(v39) = 0;
  *(_QWORD *)&v39 = 0;
  LODWORD(v49) = 0;
  if (EC_GetEncryptionScheme((uint64_t)a6, &v49) || !(_DWORD)v49 || v49 >= 4)
  {
    v22 = FigSignalErrorAt();
    goto LABEL_19;
  }
  v18 = FigAtomWriterInitWithParent();
  if ((_DWORD)v18 || (v18 = FigAtomWriterBeginAtom(), (_DWORD)v18))
  {
LABEL_80:
    appended = v18;
    FigAtomWriterEndAtom();
    goto LABEL_84;
  }
  if ((_DWORD)v49 == 1)
    v20 = 845374051;
  else
    v20 = 1935893091;
  if ((_DWORD)v49 == 3)
    v21 = 1668179299;
  else
    v21 = v20;
  LODWORD(v39) = 0;
  *(_QWORD *)((char *)&v39 + 4) = v21 | 0x10000000000;
  v22 = FigAtomWriterAppendData();
LABEL_19:
  appended = v22;
  FigAtomWriterEndAtom();
  if ((_DWORD)appended)
    goto LABEL_84;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v39 = 0u;
  v38 = 0;
  if (EC_GetEncryptionScheme((uint64_t)a6, &v38) || !v38 || v38 >= 4)
  {
    v23 = FigSignalErrorAt();
  }
  else
  {
    v23 = FigAtomWriterInitWithParent();
    if (!(_DWORD)v23)
    {
      v23 = FigAtomWriterBeginAtom();
      if (!(_DWORD)v23)
      {
        if (v38 == 1)
        {
          if (a1 != 1986618469)
          {
            appended = 0;
            goto LABEL_65;
          }
          v48 = 0;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          LODWORD(v50) = 0;
          v49 = 0;
          v24 = FigAtomWriterInitWithParent();
          if ((_DWORD)v24)
            goto LABEL_63;
          v24 = FigAtomWriterBeginAtom();
          if ((_DWORD)v24)
            goto LABEL_63;
          if (a3 > 0 && (a4 & 0x80000000) == 0 && a4 + a3 == 10)
          {
            LODWORD(v49) = 0;
            HIDWORD(v49) = bswap32(a3);
            LODWORD(v50) = bswap32(a4);
            goto LABEL_62;
          }
        }
        else
        {
          v48 = 0;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          v49 = 0;
          v50 = 0uLL;
          if (a5)
            Length = CFDataGetLength(a5);
          else
            Length = 0;
          v44 = Length;
          v43 = 0;
          if (a3 >= 0x10 || a4 >= 0x10 || EC_GetEncryptionScheme((uint64_t)a6, &v43) || !v43)
            goto LABEL_79;
          v24 = FigAtomWriterInitWithParent();
          if ((_DWORD)v24)
            goto LABEL_63;
          v24 = FigAtomWriterBeginAtom();
          if ((_DWORD)v24)
            goto LABEL_63;
          LODWORD(v49) = v43 != 3;
          if (v43 == 3)
          {
            if (a4 | a3)
              goto LABEL_79;
            *(_WORD *)((char *)&v49 + 5) = 256;
            if (EC_HasPlayReadyInfo((uint64_t)a6))
            {
              PlayReadyKeyIdentifier = (const __CFData *)EC_GetPlayReadyKeyIdentifier((uint64_t)a6);
              if (!PlayReadyKeyIdentifier)
                goto LABEL_79;
            }
            else if (EC_HasWidevineInfo((uint64_t)a6))
            {
              PlayReadyKeyIdentifier = (const __CFData *)EC_GetWidevineKeyIdentifier((uint64_t)a6);
              if (!PlayReadyKeyIdentifier)
                goto LABEL_79;
            }
            else
            {
              if (!EC_HasLegacyConfigInfo(a6))
                goto LABEL_79;
              PlayReadyKeyIdentifier = (const __CFData *)EC_GetLegacyConfigKeyIdentifier(a6);
              if (!PlayReadyKeyIdentifier)
                goto LABEL_79;
            }
            HIBYTE(v49) = 8;
            v50 = *(_OWORD *)CFDataGetBytePtr(PlayReadyKeyIdentifier);
          }
          else
          {
            BYTE5(v49) = a4 | (16 * a3);
            HIWORD(v49) = 1;
            LOBYTE(v50) = 0;
          }
          appended = FigAtomWriterAppendData();
          if ((_DWORD)appended || BYTE6(v49) != 1 || HIBYTE(v49))
            goto LABEL_64;
          if (Length == 8 || Length == 16)
          {
            v24 = FigAtomWriterAppendData();
            if ((_DWORD)v24)
            {
LABEL_63:
              appended = v24;
LABEL_64:
              FigAtomWriterEndAtom();
              goto LABEL_65;
            }
            CFDataGetBytePtr(a5);
LABEL_62:
            v24 = FigAtomWriterAppendData();
            goto LABEL_63;
          }
        }
LABEL_79:
        v24 = FigSignalErrorAt();
        goto LABEL_63;
      }
    }
  }
  appended = v23;
LABEL_65:
  FigAtomWriterEndAtom();
  FigAtomWriterEndAtom();
  if ((_DWORD)appended)
    goto LABEL_90;
  if (!a7 || *((_QWORD *)&v35 + 1) == a7)
    goto LABEL_77;
  if (*((_QWORD *)&v36 + 1) + 8 > a7)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_89;
  }
  v16 = FigAtomWriterInitWithBlockBuffer();
  if ((_DWORD)v16)
  {
LABEL_89:
    appended = v16;
    goto LABEL_90;
  }
  v27 = a7 - *((_QWORD *)&v35 + 1);
  v28 = a7 - *((_QWORD *)&v35 + 1) >= 7;
  v29 = a7 - *((_QWORD *)&v35 + 1) - 7;
  if (v29 == 0 || !v28 || v27 >= 0x7D1)
  {
    v30 = FigSignalErrorAt();
    goto LABEL_93;
  }
  v30 = FigAtomWriterBeginAtom();
  if ((_DWORD)v30)
  {
LABEL_93:
    appended = v30;
    v31 = 0;
    goto LABEL_76;
  }
  v31 = malloc_type_calloc(1uLL, v29, 0x7E71BF74uLL);
  if (v31)
  {
    FigAtomWriterAppendData();
    appended = 0;
  }
  else
  {
    appended = FigSignalErrorAt();
  }
LABEL_76:
  free(v31);
  FigAtomWriterEndAtom();
  if (!(_DWORD)appended)
  {
LABEL_77:
    appended = 0;
    *a8 = blockBufferOut;
    return appended;
  }
LABEL_90:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return appended;
}

uint64_t FigCreateHLSfMP4SecurityInfoData(int a1, int a2, signed int a3, unsigned int a4, const __CFData *a5, _QWORD *a6, __CFData **a7)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  OpaqueCMBlockBuffer *v11;
  size_t v12;
  __CFData *Mutable;
  __CFData *v14;
  UInt8 *MutableBytePtr;
  uint64_t v16;
  CMBlockBufferRef theBuffer;

  theBuffer = 0;
  if (a2 == 1869641075)
    v8 = 1332770163;
  else
    v8 = a2;
  if (a2 == 1718378851)
    v9 = 1716281667;
  else
    v9 = v8;
  v10 = hlsfmp4_CreateBlockBufferContainingHLSfMP4SecurityInfo(a1, v9, a3, a4, a5, a6, 0, &theBuffer);
  v11 = theBuffer;
  if ((_DWORD)v10)
    goto LABEL_15;
  v12 = CMBlockBufferGetDataLength(theBuffer) - 8;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12);
  if (!Mutable)
  {
    v10 = FigSignalErrorAt();
LABEL_15:
    v16 = v10;
    goto LABEL_11;
  }
  v14 = Mutable;
  CFDataSetLength(Mutable, v12);
  MutableBytePtr = CFDataGetMutableBytePtr(v14);
  v16 = CMBlockBufferCopyDataBytes(v11, 8uLL, v12, MutableBytePtr);
  if ((_DWORD)v16)
    CFRelease(v14);
  else
    *a7 = v14;
LABEL_11:
  if (v11)
    CFRelease(v11);
  return v16;
}

uint64_t FigParseHLSfMP4SecurityInfoAndCopyIV(int a1, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5, _DWORD *a6, _OWORD *a7, _QWORD *a8)
{
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  CFTypeRef v17;
  uint64_t v18;
  _OWORD v20[7];
  __int128 v21;
  __int128 v22;
  CFTypeRef cf[3];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  *(_OWORD *)cf = 0u;
  v21 = 0u;
  memset(v20, 0, sizeof(v20));
  LODWORD(v21) = a1;
  v13 = FigAtomStreamInitWithMemoryBlock();
  if ((_DWORD)v13)
    goto LABEL_32;
  v13 = hlsfmp4_ParseChildAtoms((uint64_t)v20, 3, (uint64_t)&hlsfmp4_parse_sinf_atomDispatch, (uint64_t)&v21);
  if ((_DWORD)v13)
    goto LABEL_32;
  v14 = DWORD1(v21);
  if (!DWORD1(v21))
    goto LABEL_31;
  v15 = DWORD2(v21);
  if ((_DWORD)v21 == 1986618469)
  {
    if (DWORD2(v21))
    {
      v16 = HIDWORD(v21);
      if (HIDWORD(v21) + DWORD2(v21) == 10)
      {
        if (!a4)
          goto LABEL_8;
LABEL_21:
        if (DWORD1(v21) == 1716281667)
        {
          v14 = 1718378851;
        }
        else if (DWORD1(v21) == 1332770163)
        {
          v14 = 1869641075;
        }
        *a4 = v14;
        if (!a5)
          goto LABEL_10;
        goto LABEL_9;
      }
    }
    goto LABEL_31;
  }
  if (DWORD2(v21) || (v15 = HIDWORD(v21)) != 0)
  {
LABEL_31:
    v13 = FigSignalErrorAt();
LABEL_32:
    v18 = v13;
    goto LABEL_25;
  }
  v16 = 0;
  if (a4)
    goto LABEL_21;
LABEL_8:
  if (a5)
LABEL_9:
    *a5 = v15;
LABEL_10:
  if (a6)
    *a6 = v16;
  if (a7)
    *a7 = v22;
  if (a8)
  {
    v17 = cf[0];
    if (cf[0])
      v17 = CFRetain(cf[0]);
    v18 = 0;
    *a8 = v17;
  }
  else
  {
    v18 = 0;
  }
LABEL_25:
  if (cf[0])
    CFRelease(cf[0]);
  return v18;
}

uint64_t FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(const opaqueCMFormatDescription *a1, int *a2, _DWORD *a3, _DWORD *a4, _OWORD *a5, _QWORD *a6)
{
  CMMediaType MediaType;
  const __CFDictionary *Extensions;
  const __CFDictionary *Value;
  const __CFArray *v15;
  const __CFArray *v16;
  CFTypeID v17;
  CFIndex v18;
  const void *ValueAtIndex;
  CFTypeID v20;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v23;
  CFTypeID v24;
  const UInt8 *v25;
  CFIndex v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef cf;

  MediaType = CMFormatDescriptionGetMediaType(a1);
  cf = 0;
  Extensions = CMFormatDescriptionGetExtensions(a1);
  if (!Extensions)
  {
    v23 = FigSignalErrorAt();
    if (!a6)
      return v23;
    v27 = 0;
    v28 = 0;
    if ((_DWORD)v23)
      return v23;
    goto LABEL_22;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA2240]);
  if (!Value)
    goto LABEL_12;
  v15 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("sinf"));
  if (!v15)
    goto LABEL_12;
  v16 = v15;
  v17 = CFGetTypeID(v15);
  if (v17 == CFArrayGetTypeID())
  {
    if (CFArrayGetCount(v16) >= 1)
    {
      v18 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v16, v18);
        v20 = CFGetTypeID(ValueAtIndex);
        if (v20 != CFDataGetTypeID())
          break;
        BytePtr = CFDataGetBytePtr((CFDataRef)ValueAtIndex);
        Length = CFDataGetLength((CFDataRef)ValueAtIndex);
        if (!FigParseHLSfMP4SecurityInfoAndCopyIV(MediaType, (uint64_t)BytePtr, Length, a2, a3, a4, a5, &cf))
        {
          v23 = 0;
          goto LABEL_17;
        }
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (++v18 >= CFArrayGetCount(v16))
          goto LABEL_12;
      }
    }
    goto LABEL_12;
  }
  v24 = CFGetTypeID(v16);
  if (v24 != CFDataGetTypeID())
  {
LABEL_12:
    v23 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v25 = CFDataGetBytePtr(v16);
  v26 = CFDataGetLength(v16);
  v23 = FigParseHLSfMP4SecurityInfoAndCopyIV(MediaType, (uint64_t)v25, v26, a2, a3, a4, a5, &cf);
  if ((_DWORD)v23)
  {
    v27 = cf;
    goto LABEL_23;
  }
LABEL_17:
  v27 = cf;
  if (a6 && !(_DWORD)v23)
  {
    if (cf)
    {
      v28 = CFRetain(cf);
      v27 = cf;
    }
    else
    {
      v28 = 0;
    }
LABEL_22:
    v23 = 0;
    *a6 = v28;
  }
LABEL_23:
  if (v27)
    CFRelease(v27);
  return v23;
}

uint64_t FigWriteHLSfMP4SecurityInfoPlaceholderIncludingAtomHeader(int a1, uint64_t a2, size_t *a3, size_t a4, uint64_t *a5)
{
  size_t v6;
  size_t v7;

  if (a1 == 1936684398 || a1 == 1986618469)
    v6 = 89;
  else
    v6 = 40;
  v7 = v6 + 8;
  if (a3)
    *a3 = v7;
  if (!a5)
    return 0;
  if (v7 <= a4)
  {
    *a5 = (v7 << 24) | 0x666E733400000000;
    bzero(a5 + 1, v6);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigCreateHLSfMP4SecurityInfoPlaceholderData(int a1, uint64_t a2, __CFData **a3)
{
  size_t v5;
  __CFData *Mutable;
  __CFData *v7;
  UInt8 *MutableBytePtr;

  if (a1 == 1936684398 || a1 == 1986618469)
    v5 = 89;
  else
    v5 = 40;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5);
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  CFDataSetLength(Mutable, v5);
  MutableBytePtr = CFDataGetMutableBytePtr(v7);
  bzero(MutableBytePtr, v5);
  *a3 = v7;
  return 0;
}

uint64_t hlsfmp4_parse_frma()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t hlsfmp4_parse_schm()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t hlsfmp4_parse_schi()
{
  return FigAtomStreamGetCurrentAtomTypeAndDataLength();
}

uint64_t hlsfmp4_ParseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t (**v9)(uint64_t, uint64_t);
  uint64_t result;
  int v11;
  uint64_t (**v12)(uint64_t, uint64_t);
  int v13;
  int v14;
  char *v15;
  char v16;

  v8 = 0;
  v9 = (uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  while (1)
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)result)
      return result;
    if (a2 >= 1)
    {
      v11 = 0;
      v12 = v9;
      while (*((_DWORD *)v12 - 2))
      {
        ++v11;
        v12 += 2;
        if (a2 == v11)
          goto LABEL_12;
      }
      v13 = 1 << v11;
      if ((*((_BYTE *)v12 - 4) & 1) != 0 && (v13 & v8) != 0)
        return FigSignalErrorAt();
      result = (*v12)(a1, a4);
      if ((_DWORD)result)
        return result;
      v8 |= v13;
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == -12890)
        result = 0;
      else
        result = result;
      if (a2 >= 1)
      {
        v14 = 0;
        v15 = (char *)(a3 + 4);
        do
        {
          v16 = *v15;
          v15 += 16;
          if ((v16 & 2) != 0 && ((v8 >> v14) & 1) == 0)
            result = FigSignalErrorAt();
          ++v14;
        }
        while (a2 != v14);
      }
      return result;
    }
  }
}

uint64_t hlsfmp4_parse_cspn()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t hlsfmp4_parse_tenc()
{
  uint64_t result;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  v2 = 0uLL;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    FigAtomStreamGetCurrentAtomVersionAndFlags();
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t videoMentorRegisterCFTypes()
{
  uint64_t result;

  sVideoMentorFrameNodeID = _CFRuntimeRegisterClass();
  result = _CFRuntimeRegisterClass();
  sVideoMentorRefreshGroupID = result;
  return result;
}

void videoMentorPrerollSampleNotImmediatelyAvailable(uint64_t a1, uint64_t a2)
{
  videoMentorThreadFinishPreroll(a2, 2, *(const void **)(a2 + 512));
}

void videoMentorDependencyStateReset(uint64_t a1)
{
  CFTypeRef v2;
  __CFArray *Mutable;
  const __CFArray *v4;
  CFMutableArrayRef *ValueAtIndex;
  const __CFArray *v6;
  const __CFArray *v7;
  const void *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  CFMutableArrayRef *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  CFRange v21;
  CFRange v22;

  v2 = *(CFTypeRef *)a1;
  if (*(_QWORD *)a1)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v4 = Mutable;
      CFArrayAppendValue(Mutable, v2);
      if (CFArrayGetCount(v4) >= 1)
      {
        do
        {
          ValueAtIndex = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v4, 0);
          CFArrayRemoveValueAtIndex(v4, 0);
          v6 = ValueAtIndex[3];
          v21.length = CFArrayGetCount(v6);
          v21.location = 0;
          CFArrayAppendArray(v4, v6, v21);
          v7 = ValueAtIndex[5];
          v22.length = CFArrayGetCount(v7);
          v22.location = 0;
          CFArrayAppendArray(v4, v7, v22);
          CFArrayRemoveAllValues(ValueAtIndex[3]);
          CFArrayRemoveAllValues(ValueAtIndex[5]);
          CFArrayRemoveAllValues(ValueAtIndex[4]);
          CFArrayRemoveAllValues(ValueAtIndex[6]);
        }
        while (CFArrayGetCount(v4) > 0);
      }
      CFRelease(v4);
    }
    if (*(_QWORD *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(_QWORD *)a1 = 0;
    }
  }
  v8 = *(const void **)(a1 + 8);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v9 = *(const __CFArray **)(a1 + 16);
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      v11 = Count;
      for (i = 0; i != v11; ++i)
      {
        v13 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
        CFArrayRemoveAllValues(v13[5]);
        CFArrayRemoveAllValues(v13[6]);
      }
    }
    v14 = *(const void **)(a1 + 16);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  v15 = *(const void **)(a1 + 24);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v16 = MEMORY[0x1E0CA2E18];
  *(_WORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 36) = *(_OWORD *)v16;
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(v16 + 16);
  v17 = *(const void **)(a1 + 64);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v18 = *(const void **)(a1 + 72);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v19 = *(const void **)(a1 + 80);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_BYTE *)(a1 + 88) = 0;
  v20 = *(const void **)(a1 + 96);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(a1 + 96) = 0;
  }
}

uint64_t VideoMentorSetModeToReversePlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, const __CFDictionary *a6, const void *a7, const void *a8, CFTypeRef a9)
{
  unsigned int (*v16)(uint64_t, CFTypeRef *);
  unsigned int (*v17)(uint64_t, CFTypeRef *);
  const void *v18;
  CFTypeRef v19;
  uint64_t v20;
  const void *v21;
  CFTypeRef v22;
  __int128 v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  BOOL IsCursorAccuracyExact;
  unsigned int v30;
  int PolicyFromPrerollPolicy;
  CFTypeRef v33;
  CFTypeRef cf;
  int v35;

  v33 = 0;
  cf = 0;
  PolicyFromPrerollPolicy = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a6);
  v30 = audioMentorGetModeChangePolicy(a6);
  IsCursorAccuracyExact = videoMentorIsCursorAccuracyExact(a6);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  v35 = 0;
  FigCFDictionaryGetInt32IfPresent();
  if (a6)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    FigCFDictionaryGetFloat32IfPresent();
  }
  if (a2
    && ((v16 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
     || v16(a2, &cf))
    || a4
    && ((v17 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
     || v17(a4, &v33)))
  {
    v27 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
    if (!*(_BYTE *)a1)
    {
      v18 = *(const void **)(a1 + 168);
      v19 = cf;
      *(_QWORD *)(a1 + 168) = cf;
      if (v19)
        CFRetain(v19);
      if (v18)
        CFRelease(v18);
      v20 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)a3;
      v21 = *(const void **)(a1 + 200);
      v22 = v33;
      *(_QWORD *)(a1 + 192) = v20;
      *(_QWORD *)(a1 + 200) = v22;
      if (v22)
        CFRetain(v22);
      if (v21)
        CFRelease(v21);
      v23 = *a5;
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a5 + 2);
      *(_OWORD *)(a1 + 208) = v23;
      *(_DWORD *)(a1 + 232) = -1;
      *(_DWORD *)(a1 + 236) = -1;
      *(_DWORD *)(a1 + 240) = PolicyFromPrerollPolicy;
      *(_DWORD *)(a1 + 244) = v30;
      *(_BYTE *)(a1 + 248) = 0;
      *(_DWORD *)(a1 + 252) = 0;
      *(_DWORD *)(a1 + 256) = 1065353216;
      *(_BYTE *)(a1 + 372) = IsCursorAccuracyExact;
      *(_BYTE *)(a1 + 373) = 1;
      *(_BYTE *)(a1 + 374) = 0;
      *(_DWORD *)(a1 + 452) = 0;
      v24 = *(const void **)(a1 + 464);
      *(_QWORD *)(a1 + 464) = a7;
      if (a7)
        CFRetain(a7);
      if (v24)
        CFRelease(v24);
      v25 = *(const void **)(a1 + 472);
      *(_QWORD *)(a1 + 472) = a8;
      if (a8)
        CFRetain(a8);
      if (v25)
        CFRelease(v25);
      v26 = *(const void **)(a1 + 480);
      *(_QWORD *)(a1 + 480) = a9;
      if (a9)
        CFRetain(a9);
      if (v26)
        CFRelease(v26);
      *(_DWORD *)(a1 + 112) = 3;
      *(_BYTE *)(a1 + 116) = 1;
      FigMemoryBarrier();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
    FigSemaphoreSignal();
    v27 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v33)
    CFRelease(v33);
  return v27;
}

uint64_t VideoMentorSetModeToEmptyEdit(uint64_t a1, const void *a2, const __CFDictionary *a3, const void *a4, const void *a5)
{
  int PolicyFromPrerollPolicy;
  unsigned int v11;
  const void *v12;
  const void *v13;
  const void *v14;

  PolicyFromPrerollPolicy = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a3);
  v11 = audioMentorGetModeChangePolicy(a3);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
  if (!*(_BYTE *)a1)
  {
    *(_DWORD *)(a1 + 240) = PolicyFromPrerollPolicy;
    *(_DWORD *)(a1 + 244) = v11;
    *(_BYTE *)(a1 + 374) = 0;
    *(_DWORD *)(a1 + 452) = 0;
    v12 = *(const void **)(a1 + 456);
    *(_QWORD *)(a1 + 456) = a2;
    if (a2)
      CFRetain(a2);
    if (v12)
      CFRelease(v12);
    v13 = *(const void **)(a1 + 472);
    *(_QWORD *)(a1 + 472) = a4;
    if (a4)
      CFRetain(a4);
    if (v13)
      CFRelease(v13);
    v14 = *(const void **)(a1 + 480);
    *(_QWORD *)(a1 + 480) = a5;
    if (a5)
      CFRetain(a5);
    if (v14)
      CFRelease(v14);
    *(_DWORD *)(a1 + 112) = 4;
    *(_BYTE *)(a1 + 116) = 1;
    FigMemoryBarrier();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
  FigSemaphoreSignal();
  return 0;
}

uint64_t VideoMentorSetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeID v5;
  CFTypeID v6;
  CFTypeID v7;
  CFTypeID v8;
  CFTypeID v9;
  CMTime v11;

  if (a1 && !*(_BYTE *)a1)
  {
    if (FigCFEqual())
    {
      if (!a3)
        return 0;
      v5 = CFGetTypeID(a3);
      if (v5 != CFDictionaryGetTypeID())
        return 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 264));
      CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
      *(CMTime *)(a1 + 272) = v11;
LABEL_23:
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 264));
      return 0;
    }
    if (FigCFEqual())
    {
      if (!a3)
        return 0;
      v6 = CFGetTypeID(a3);
      if (v6 != CFDictionaryGetTypeID())
        return 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 264));
      CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
      *(CMTime *)(a1 + 296) = v11;
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      if (!a3)
        return 0;
      v7 = CFGetTypeID(a3);
      if (v7 != CFDictionaryGetTypeID())
        return 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 264));
      CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
      *(CMTime *)(a1 + 320) = v11;
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      if (!a3)
        return 0;
      v8 = CFGetTypeID(a3);
      if (v8 != CFDictionaryGetTypeID())
        return 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 264));
      CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
      *(CMTime *)(a1 + 344) = v11;
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      if (!a3)
        return 0;
      v9 = CFGetTypeID(a3);
      if (v9 != CFNumberGetTypeID())
        return 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 264));
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, (void *)(a1 + 368));
      goto LABEL_23;
    }
  }
  return FigSignalErrorAt();
}

uint64_t VideoMentorSetClientPID(_BYTE *a1)
{
  if (a1 && !*a1)
    return FigThreadSetProperty();
  else
    return 4294954511;
}

uint64_t VideoMentorSetThrottleForBackground(uint64_t a1, int a2)
{
  uint64_t v3;
  CFNumberRef v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, CFNumberRef);
  int valuePtr;

  if (!a1 || *(_BYTE *)a1)
    return 4294954511;
  valuePtr = 16 * (a2 != 0);
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v3 = FigThreadSetProperty();
  if (*(_BYTE *)(a1 + 41))
  {
    FigBaseObject = FigSampleCursorServiceGetFigBaseObject(*(_QWORD *)(a1 + 8));
    v7 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v7)
      v7(FigBaseObject, CFSTR("PriorityOfConsistentThreadHandlingSampleCursors"), v5);
  }
  if (v5)
    CFRelease(v5);
  return v3;
}

uint64_t VideoMentorCopyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v4 = Mutable;
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  *a2 = v4;
  return 0;
}

__CFString *videoMentorDebugCopyKnownNodes(uint64_t a1)
{
  __CFString *Mutable;
  const __CFDictionary *v3;
  CFIndex Count;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = *(const __CFDictionary **)(a1 + 8);
  Count = CFDictionaryGetCount(v3);
  CFStringAppendFormat(Mutable, 0, CFSTR("Known nodes: %p (%d)\n"), v3, Count);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)videoMentorDebugCopyKnownNodesApplier, Mutable);
  return Mutable;
}

void videoMentorDebugCopyKnownNodesApplier(uint64_t a1, uint64_t a2, __CFString *a3)
{
  const void *v4;

  v4 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(a3, 0, CFSTR("\t%@\n"), v4);
  CFRelease(v4);
}

void videoMentorDebugDumpGraph(uint64_t *a1, const char *a2)
{
  const __CFAllocator *v4;
  CFMutableSetRef Mutable;
  __CFSet *v6;
  CFMutableDictionaryRef v7;
  const __CFDictionary *v8;
  FILE *v9;
  FILE *v10;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  if (Mutable)
  {
    v6 = Mutable;
    v7 = CFDictionaryCreateMutable(v4, 0, 0, 0);
    if (v7)
    {
      v8 = v7;
      v9 = fopen(a2, "w+");
      if (v9)
      {
        v10 = v9;
        fwrite("digraph dependencyGraph {\n", 0x1AuLL, 1uLL, v9);
        fwrite("node [ style = filled ]\n", 0x18uLL, 1uLL, v10);
        videoMentorDebugDumpGraphNode(v10, v6, v8, *a1);
        fwrite("}\n", 2uLL, 1uLL, v10);
        fclose(v10);
      }
      CFRelease(v6);
    }
    else
    {
      v8 = v6;
    }
    CFRelease(v8);
  }
}

void videoMentorDebugDumpGraphNode(FILE *a1, __CFSet *a2, const __CFDictionary *a3, uint64_t a4)
{
  char *value;
  double Seconds;
  Float64 v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  Float64 v19;
  uint64_t v20;
  Float64 v21;
  int v22;
  const char *v23;
  int v24;
  const char *v25;
  int v26;
  const char *v27;
  const char *v28;
  const void *v29;
  char **v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  CFIndex Count;
  CFIndex v35;
  CFIndex i;
  const void *ValueAtIndex;
  void *v38;
  CFIndex v39;
  CFIndex v40;
  CFIndex j;
  const void *v42;
  void *v43;
  CFIndex v44;
  CFIndex v45;
  CFIndex k;
  const void *v47;
  CFIndex v48;
  CFIndex v49;
  CFIndex m;
  const void *v51;
  CMTime time;

  if (!CFSetContainsValue(a2, (const void *)a4))
  {
    CFSetSetValue(a2, (const void *)a4);
    time.value = 0;
    asprintf((char **)&time, "node_%p", (const void *)a4);
    value = (char *)time.value;
    time = *(CMTime *)(a4 + 104);
    Seconds = CMTimeGetSeconds(&time);
    time = *(CMTime *)(a4 + 128);
    v10 = CMTimeGetSeconds(&time);
    fprintf(a1, "\"%s\" [ label = \"PTS %1.6f OPTS %1.6f\\n", value, Seconds, v10);
    v11 = " Sync";
    v12 = "";
    if (!*(_BYTE *)(a4 + 158))
      v11 = "";
    if (*(_BYTE *)(a4 + 159))
      v13 = " Partial sync";
    else
      v13 = "";
    v14 = "  Open GOP";
    if (!*(_BYTE *)(a4 + 160))
      v14 = "";
    if (*(_BYTE *)(a4 + 161))
      v15 = " droppable";
    else
      v15 = "";
    if (*(_BYTE *)(a4 + 162))
      v16 = " leading";
    else
      v16 = "";
    if (*(_BYTE *)(a4 + 157))
      v17 = " STSA";
    else
      v17 = "";
    if (*(_BYTE *)(a4 + 156))
      v12 = " TSA";
    fprintf(a1, "T%d%s%s%s%s%s%s%s", *(_DWORD *)(a4 + 152), v11, v13, v14, v15, v16, v17, v12);
    v18 = *(_QWORD *)(a4 + 56);
    if (v18)
    {
      time = *(CMTime *)(v18 + 16);
      v19 = CMTimeGetSeconds(&time);
      fprintf(a1, " RG%1.6f", v19);
      v20 = *(_QWORD *)(a4 + 56);
      if (*(_BYTE *)(v20 + 58))
      {
        fwrite("(catchup)", 9uLL, 1uLL, a1);
        v20 = *(_QWORD *)(a4 + 56);
      }
      if (!*(_BYTE *)(v20 + 56))
        fwrite("(undetermined)", 0xEuLL, 1uLL, a1);
    }
    if ((*(_DWORD *)(a4 + 92) & 0x1D) == 1)
    {
      time = *(CMTime *)(a4 + 80);
      v21 = CMTimeGetSeconds(&time);
      fprintf(a1, "\\nadjusted to %1.6f", v21);
    }
    fprintf(a1, "\\nnode %p", (const void *)a4);
    v22 = *(_DWORD *)(a4 + 72);
    if (v22)
    {
      if (v22 == 1)
      {
        v23 = "NO";
      }
      else if (v22 == 2)
      {
        v23 = "YES";
      }
      else
      {
        v23 = "??";
      }
    }
    else
    {
      v23 = "UNK";
    }
    v24 = *(_DWORD *)(a4 + 68);
    if (v24)
    {
      if (v24 == 1)
      {
        v25 = "NO";
      }
      else if (v24 == 2)
      {
        v25 = "YES";
      }
      else
      {
        v25 = "??";
      }
    }
    else
    {
      v25 = "UNK";
    }
    v26 = *(_DWORD *)(a4 + 76);
    v27 = "undetermined";
    if (v26 == 2)
      v27 = "selected";
    if (v26 == 1)
      v28 = "dropped";
    else
      v28 = v27;
    fprintf(a1, "\\nR: %s L: %s S: %s", v23, v25, v28);
    fputc(34, a1);
    v29 = *(const void **)(a4 + 56);
    if (v29)
    {
      v30 = (char **)CFDictionaryGetValue(a3, v29);
      if (!v30)
      {
        v30 = &videoMentorDebugDumpGraphNode_colorStrings[3 * videoMentorDebugDumpGraphNode_nextColorIndex];
        videoMentorDebugDumpGraphNode_nextColorIndex = ((_BYTE)videoMentorDebugDumpGraphNode_nextColorIndex + 1) & 3;
        CFDictionarySetValue(a3, *(const void **)(a4 + 56), v30);
      }
      v31 = *(_DWORD *)(a4 + 76);
      v32 = 1;
      if (v31 != 2)
        v32 = 2;
      if (v31)
        v33 = v32;
      else
        v33 = 0;
      fprintf(a1, ", color = \"%s\"", v30[v33]);
    }
    fwrite("]\n", 2uLL, 1uLL, a1);
    Count = CFArrayGetCount(*(CFArrayRef *)(a4 + 24));
    if (Count >= 1)
    {
      v35 = Count;
      for (i = 0; i != v35; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 24), i);
        time.value = 0;
        asprintf((char **)&time, "node_%p", ValueAtIndex);
        v38 = (void *)time.value;
        fprintf(a1, "\"%s\" -> \"%s\"\n", value, (const char *)time.value);
        free(v38);
      }
    }
    if (*(_BYTE *)(a4 + 64))
      fprintf(a1, "\"%s\" -> \"UnknownDepFor%s\"\n", value, value);
    v39 = CFArrayGetCount(*(CFArrayRef *)(a4 + 40));
    if (v39 >= 1)
    {
      v40 = v39;
      for (j = 0; j != v40; ++j)
      {
        v42 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 40), j);
        time.value = 0;
        asprintf((char **)&time, "node_%p", v42);
        v43 = (void *)time.value;
        fprintf(a1, "\"%s\" -> \"%s\" [style = dotted]\n", value, (const char *)time.value);
        free(v43);
      }
    }
    v44 = CFArrayGetCount(*(CFArrayRef *)(a4 + 24));
    if (v44 >= 1)
    {
      v45 = v44;
      for (k = 0; k != v45; ++k)
      {
        v47 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 24), k);
        videoMentorDebugDumpGraphNode(a1, a2, a3, v47);
      }
    }
    v48 = CFArrayGetCount(*(CFArrayRef *)(a4 + 40));
    if (v48 >= 1)
    {
      v49 = v48;
      for (m = 0; m != v49; ++m)
      {
        v51 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 40), m);
        videoMentorDebugDumpGraphNode(a1, a2, a3, v51);
      }
    }
    free(value);
  }
}

double videoMentorFrameNodeInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void videoMentorFrameNodeFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[7];
  if (v7)
    CFRelease(v7);
}

__CFString *videoMentorFrameNodeCopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFStringRef v4;
  Float64 Seconds;
  Float64 v6;
  int v7;
  const __CFArray *v8;
  CFIndex Count;
  const __CFArray *v10;
  CFIndex v11;
  const __CFArray *v12;
  CFIndex v13;
  const __CFArray *v14;
  CFIndex v15;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  int v20;
  const char *v21;
  int v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  CMTime time;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFCopyDescription(*(CFTypeRef *)(a1 + 16));
  time = *(CMTime *)(a1 + 104);
  Seconds = CMTimeGetSeconds(&time);
  time = *(CMTime *)(a1 + 128);
  v6 = CMTimeGetSeconds(&time);
  v7 = *(_DWORD *)(a1 + 92);
  v8 = *(const __CFArray **)(a1 + 24);
  if (v8)
    Count = CFArrayGetCount(v8);
  else
    Count = 0;
  v10 = *(const __CFArray **)(a1 + 40);
  if (v10)
    v11 = CFArrayGetCount(v10);
  else
    v11 = 0;
  v12 = *(const __CFArray **)(a1 + 32);
  if (v12)
    v13 = CFArrayGetCount(v12);
  else
    v13 = 0;
  v14 = *(const __CFArray **)(a1 + 48);
  if (v14)
    v15 = CFArrayGetCount(v14);
  else
    v15 = 0;
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
  {
    time = *(CMTime *)(v16 + 16);
    v17 = CMTimeGetSeconds(&time);
  }
  else
  {
    v17 = NAN;
  }
  v18 = *(_DWORD *)(a1 + 68);
  if (v18)
  {
    if (v18 == 1)
    {
      v19 = "NO";
    }
    else if (v18 == 2)
    {
      v19 = "YES";
    }
    else
    {
      v19 = "??";
    }
  }
  else
  {
    v19 = "UNK";
  }
  v20 = *(_DWORD *)(a1 + 72);
  if (v20)
  {
    if (v20 == 1)
    {
      v21 = "NO";
    }
    else if (v20 == 2)
    {
      v21 = "YES";
    }
    else
    {
      v21 = "??";
    }
  }
  else
  {
    v21 = "UNK";
  }
  v22 = *(_DWORD *)(a1 + 76);
  v23 = "undetermined";
  if (v22 == 2)
    v23 = "selected";
  if (v22 == 1)
    v24 = "dropped";
  else
    v24 = v23;
  if (*(_BYTE *)(a1 + 64))
    v25 = ", hasUnknownDependents";
  else
    v25 = "";
  v26 = "(with adjustment)";
  if ((v7 & 1) == 0)
    v26 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<VideoMentorFrameNode: %p, sampleCursor: %@ %1.6f/%1.6f%s, %d dependents (%d dropped), %d parents (%d dropped), refreshGroup: %p (%1.6f)%s, isLeaf: %s, isRoot: %s, state: %s>"), a1, v4, *(_QWORD *)&Seconds, *(_QWORD *)&v6, v26, Count, v11, v13, v15, v16, *(_QWORD *)&v17, v25, v19, v21, v24);
  if (v4)
    CFRelease(v4);
  return Mutable;
}

double refreshGroupInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void refreshGroupFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[8];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[9];
  if (v5)
    CFRelease(v5);
}

__CFString *refreshGroupCopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const void *v4;
  Float64 Seconds;
  const char *v6;
  CFIndex Count;
  const char *v8;
  const char *v9;
  CMTime time;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = (const void *)FigCFCopyCompactDescription();
  time = *(CMTime *)(a1 + 16);
  Seconds = CMTimeGetSeconds(&time);
  if (*(_BYTE *)(a1 + 58))
    v6 = "(catchup)";
  else
    v6 = "";
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  if (*(_BYTE *)(a1 + 56))
    v8 = ", groupIsProcessed";
  else
    v8 = "";
  if (*(_BYTE *)(a1 + 57))
    v9 = ", commonParentNodesHaveBeenSelected";
  else
    v9 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<VideoMentorRefreshGroup: %p targetOPTS: %1.6f%s, %d nodes%s%s>"), a1, *(_QWORD *)&Seconds, v6, Count, v8, v9);
  if (v4)
    CFRelease(v4);
  return Mutable;
}

void videoMentorThreadForwardPlayback(uint64_t a1, const void *a2, CMTime *a3, const void *a4, CMTime *a5, int a6, int a7, int a8, float a9, float a10, int a11, unsigned __int8 a12, unsigned __int8 a13, char a14, unsigned __int8 a15, unsigned __int8 a16, char a17, CFArrayRef *a18, const void *a19, char a20,char a21,CFTypeRef cf)
{
  CMTimeEpoch v27;
  _BOOL4 v28;
  int *v29;
  int v30;
  const void *v31;
  int v32;
  CMTime *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t (*v37)(const void *, CMTime *);
  int v38;
  const void *v39;
  uint64_t (*v40)(const void *, const void **);
  int v41;
  const void *v42;
  uint64_t (*v43)(const void *, uint64_t, uint64_t *);
  int v44;
  const void *v45;
  uint64_t (*v46)(const void *, CMTime *);
  const void *v47;
  uint64_t (*v48)(const void *, CFTypeRef *);
  const void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(const void *, const void *, uint64_t);
  uint64_t (*v54)(const void *, CMTime *);
  int CursorForPresentationTimeStamp;
  __CFArray *Mutable;
  __CFArray *v57;
  int v58;
  CFTypeRef v59;
  uint64_t (*v60)(const void *, CMTime *);
  const void *v61;
  uint64_t (*v62)(const void *, uint64_t, _QWORD);
  const void *v63;
  uint64_t (*v64)(const void *, CMTime *);
  uint64_t (*v65)(uint64_t, const void **);
  const void *v66;
  uint64_t (*v67)(const void *, uint64_t, uint64_t *);
  int v68;
  __int128 v69;
  __CFString **v70;
  int v71;
  __CFDictionary *v72;
  const void *v73;
  CFTypeRef v74;
  int v75;
  int v76;
  const void *v77;
  uint64_t (*v78)(const void *, CMTime *);
  void (*v79)(_QWORD, CFTypeRef, _QWORD, CMTime *, CMTime *);
  CFTypeRef v80;
  CFTypeRef v81;
  _BOOL4 v82;
  uint64_t (*v83)(CFTypeRef, const void **);
  CFTypeRef v84;
  uint64_t (*v85)(CFTypeRef, CMTime *);
  uint64_t (*v86)(CFTypeRef, CMTime *);
  CFArrayRef *v87;
  const void *v88;
  unsigned int (*v89)(const void *, const void **);
  int v90;
  int v91;
  const void *v92;
  uint64_t (*v93)(const void *, CFTypeRef *);
  int v94;
  const void *v95;
  CFTypeRef v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(const void *, CFTypeRef, uint64_t);
  const void *v100;
  uint64_t (*v101)(const void *, uint64_t, uint64_t *);
  int started;
  float v103;
  _BOOL4 v104;
  _BOOL4 v105;
  int v106;
  _QWORD *i;
  const void *v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t, const void *);
  const void *v111;
  const void *v112;
  CFIndex v113;
  opaqueCMSampleBuffer *ValueAtIndex;
  const void *v115;
  uint64_t v116;
  const void *v117;
  unsigned int (*v118)(const void *, CMTime *);
  const void *v119;
  unsigned int (*v120)(const void *, uint64_t, uint64_t *);
  const void *v122;
  unsigned int (*v123)(const void *, CFTypeRef *);
  const void *v124;
  unsigned int (*v125)(const void *, CMTime *);
  const void *v126;
  CMTime *v127;
  CMTime *v128;
  __int128 v129;
  CMTimeEpoch v130;
  float v131;
  _BOOL4 v132;
  _BOOL4 v133;
  const void *v134;
  uint64_t (*v135)(const void *, CMTime *);
  _BOOL4 v136;
  int v137;
  int NodeForCursor;
  int v139;
  CMTimeValue v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int refreshed;
  uint64_t v146;
  CFIndex v147;
  CFIndex v148;
  CFIndex j;
  _DWORD *v150;
  CFIndex v151;
  CFIndex v152;
  CFIndex k;
  _BYTE *v154;
  uint64_t v155;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  char v162;
  int v163;
  int v164;
  const void *v165;
  unsigned int (*v166)(const void *, uint64_t, uint64_t *);
  _BOOL4 v167;
  uint64_t v168;
  char v169;
  CFTypeRef v170;
  CFTypeRef v171;
  uint64_t (*v172)(CFTypeRef, uint64_t, _QWORD);
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  CMTimeEpoch v178;
  CMTime *v179;
  BOOL v180;
  const __CFAllocator *allocator;
  _BOOL4 v182;
  CMTime *v183;
  int v184;
  __int128 v185;
  _BOOL4 v186;
  _BOOL4 v188;
  uint64_t v190;
  CFIndex Count;
  uint64_t v192;
  _BOOL4 v193;
  const void **value;
  opaqueCMSampleBuffer *valuea;
  const void *v197;
  __int128 v198;
  int v199;
  char v200;
  unsigned __int8 v201;
  CMTime v202;
  unsigned __int8 v203;
  CMTime v204;
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  CMTime time1;
  CMTime v209;
  CMTime v210;
  CMTime v211;
  CMTime v212;
  __CFArray *v213;
  CFTypeRef v214;
  int v215;
  __int128 v216;
  CMTimeEpoch v217;
  __int128 v218;
  CMTimeEpoch v219;
  _BYTE v220[28];
  __int128 v221;
  CMTimeEpoch v222;
  char v223;
  CMTime v224;
  uint64_t v225;
  unsigned __int8 v226;
  CMTime v227;
  CMTime v228;
  CMTime v229;
  unsigned __int8 v230;
  unsigned __int8 v231;
  CFTypeRef v232;
  CFTypeRef v233;
  const void *v234;
  const void *v235;
  const void *v236;
  CFTypeRef v237;
  const void *v238[3];

  v237 = a4;
  v238[0] = a2;
  v235 = 0;
  v236 = 0;
  v233 = 0;
  v234 = 0;
  v232 = 0;
  v231 = 1;
  v230 = 0;
  v229 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  *(_OWORD *)&v228.value = *MEMORY[0x1E0CA2E18];
  v27 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v228.epoch = v27;
  *(_OWORD *)&v227.value = *(_OWORD *)&v228.value;
  v227.epoch = v27;
  v226 = 0;
  v225 = 0;
  *(_OWORD *)&v224.value = *(_OWORD *)&v228.value;
  v224.epoch = v27;
  v28 = a9 != 0.0;
  if (a10 == 1.0)
    v28 = 0;
  v193 = v28;
  v223 = 0;
  v221 = *(_OWORD *)&v228.value;
  v222 = v27;
  v215 = 0;
  *(_OWORD *)&v220[12] = 0u;
  v216 = *(_OWORD *)&v228.value;
  v217 = v27;
  v218 = *(_OWORD *)&v228.value;
  v219 = v27;
  *(_QWORD *)&v220[16] = v27;
  *(_OWORD *)v220 = *(_OWORD *)&v228.value;
  v220[25] = 0;
  v213 = 0;
  v214 = 0;
  *(_OWORD *)&v212.value = *(_OWORD *)&v228.value;
  v212.epoch = v27;
  *(_OWORD *)&v211.value = *(_OWORD *)&v228.value;
  v211.epoch = v27;
  *(_OWORD *)&v210.value = *(_OWORD *)&v228.value;
  v210.epoch = v27;
  v198 = *(_OWORD *)&v228.value;
  *(_OWORD *)&v209.value = *(_OWORD *)&v228.value;
  v209.epoch = v27;
  ++*(_DWORD *)(a1 + 924);
  v29 = (int *)MEMORY[0x1E0CA1FC0];
  v30 = *MEMORY[0x1E0CA1FC0];
  if ((a6 & 0xFFFFFFFD) == 1 && v30 == 1)
  {
    kdebug_trace();
    v30 = *v29;
  }
  if (v30 == 1)
    kdebug_trace();
  *(_BYTE *)(a1 + 492) = *(_DWORD *)(a1 + 488) != 0;
  *(_DWORD *)(a1 + 524) = 0;
  *(_DWORD *)(a1 + 500) = 0;
  *(_DWORD *)(a1 + 496) = a6;
  v31 = *(const void **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = cf;
  if (cf)
    CFRetain(cf);
  v32 = a15;
  if (v31)
    CFRelease(v31);
  v197 = a19;
  if (!a15)
  {
    v33 = a3;
    goto LABEL_16;
  }
  time1 = *a3;
  v33 = a3;
  time2 = *(CMTime *)(a1 + 404);
  if (CMTimeCompare(&time1, &time2))
  {
    v32 = 0;
LABEL_16:
    LODWORD(v34) = 0;
LABEL_17:
    v35 = 1;
    goto LABEL_18;
  }
  v34 = *(_QWORD *)(a1 + 528);
  if (!v34)
  {
    v32 = 0;
    goto LABEL_17;
  }
  v36 = v238[0];
  if (v238[0])
  {
    v32 = 0;
    LODWORD(v34) = 0;
    v35 = 1;
    goto LABEL_19;
  }
  v65 = *(uint64_t (**)(uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v65)
  {
    v41 = -12782;
    goto LABEL_88;
  }
  v41 = v65(v34, v238);
  if (v41)
  {
LABEL_88:
    FigSignalErrorAt();
    Mutable = 0;
    v57 = 0;
    v58 = 0;
    v199 = 0;
    goto LABEL_89;
  }
  v66 = v238[0];
  v67 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (!v67)
  {
    Mutable = 0;
    v57 = 0;
    v58 = 0;
    v41 = -12782;
    goto LABEL_86;
  }
  v68 = v67(v66, 1, &v225);
  if (v68)
  {
    v41 = v68;
    v199 = 1;
    goto LABEL_53;
  }
  if (v225 != 1)
  {
    v58 = 0;
    v41 = 0;
    v76 = 1;
LABEL_147:
    v59 = cf;
    goto LABEL_148;
  }
  v35 = 0;
  v69 = *(_OWORD *)(a1 + 380);
  v33->epoch = *(_QWORD *)(a1 + 396);
  *(_OWORD *)&v33->value = v69;
  v224 = *(CMTime *)(a1 + 380);
  LODWORD(v34) = 1;
LABEL_18:
  v36 = v238[0];
  if (v238[0])
    goto LABEL_19;
  time1 = *v33;
  CursorForPresentationTimeStamp = audioMentorCreateCursorForPresentationTimeStamp(a1, a12, (__int128 *)&time1.value, (uint64_t)v238);
  if (CursorForPresentationTimeStamp)
  {
    v41 = CursorForPresentationTimeStamp;
    v199 = v34;
    goto LABEL_53;
  }
  v36 = v238[0];
  if (a20)
  {
    memset(&time1, 0, sizeof(time1));
    memset(&time2, 0, sizeof(time2));
    v60 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v60)
    {
      v41 = v60(v36, &time1);
      if (!v41)
      {
        if ((time1.flags & 0x1D) == 1)
        {
          lhs = time1;
          rhs = *v33;
          if (!CMTimeCompare(&lhs, &rhs))
          {
LABEL_73:
            LODWORD(v34) = 1;
            v36 = v238[0];
            goto LABEL_19;
          }
          v61 = v238[0];
          v62 = *(uint64_t (**)(const void *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 176);
          if (v62)
          {
            v41 = v62(v61, 1, 0);
            if (v41)
            {
LABEL_153:
              FigSignalErrorAt();
              goto LABEL_85;
            }
            v63 = v238[0];
            v64 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (v64)
            {
              v41 = v64(v63, &time2);
              if (!v41)
              {
                if ((time2.flags & 0x1D) == 1)
                {
                  *v33 = time2;
                  goto LABEL_73;
                }
                v41 = FigSignalErrorAt();
                goto LABEL_85;
              }
              goto LABEL_153;
            }
          }
          v41 = -12782;
          goto LABEL_153;
        }
        v41 = FigSignalErrorAt();
LABEL_85:
        Mutable = 0;
        v57 = 0;
        v58 = 0;
LABEL_86:
        v199 = 1;
        goto LABEL_89;
      }
    }
    else
    {
      v41 = -12782;
    }
    FigSignalErrorAt();
    goto LABEL_85;
  }
  LODWORD(v34) = 1;
LABEL_19:
  v199 = v34;
  if ((v33->flags & 0x1D) != 1)
  {
    v54 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v54)
    {
      v41 = v54(v36, v33);
      if (!v41)
      {
        if ((v33->flags & 0x1D) == 1)
        {
          v36 = v238[0];
          goto LABEL_20;
        }
        v41 = FigSignalErrorAt();
LABEL_61:
        Mutable = 0;
        v57 = 0;
        v58 = 0;
        v59 = cf;
        goto LABEL_90;
      }
    }
    else
    {
      v41 = -12782;
    }
    FigSignalErrorAt();
    goto LABEL_61;
  }
LABEL_20:
  *(_OWORD *)&time1.value = v198;
  time1.epoch = v27;
  v37 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v37)
  {
    v41 = -12782;
    goto LABEL_58;
  }
  v38 = v37(v36, &time1);
  if (v38)
  {
LABEL_443:
    v41 = v38;
    goto LABEL_58;
  }
  v39 = v238[0];
  v40 = *(uint64_t (**)(const void *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v40)
    goto LABEL_45;
  v41 = v40(v39, &v235);
  if (v41)
  {
LABEL_46:
    FigSignalErrorAt();
LABEL_58:
    v59 = cf;
    Mutable = 0;
    v57 = 0;
    v58 = 0;
    goto LABEL_90;
  }
  *(_OWORD *)&time2.value = v198;
  time2.epoch = v27;
  v42 = v235;
  v43 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (!v43)
  {
LABEL_45:
    v41 = -12782;
    goto LABEL_46;
  }
  while (1)
  {
    v44 = v43(v42, 1, &v225);
    if (v44)
    {
LABEL_141:
      v41 = v44;
      goto LABEL_46;
    }
    if (v225 != 1)
      break;
    v45 = v235;
    v46 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v46)
    {
      v41 = -12782;
      goto LABEL_58;
    }
    v38 = v46(v45, &time2);
    if (v38)
      goto LABEL_443;
    lhs = time2;
    rhs = time1;
    if (CMTimeCompare(&lhs, &rhs) < 0)
    {
      lhs = time2;
      rhs = *v33;
      if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0)
      {
        if (v233)
        {
          CFRelease(v233);
          v233 = 0;
        }
        v47 = v235;
        v48 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v48)
          goto LABEL_45;
        v44 = v48(v47, &v233);
        if (v44)
          goto LABEL_141;
        time1 = time2;
      }
    }
    if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
      break;
    v49 = v235;
    v50 = v238[0];
    v51 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    v52 = v50 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
    if (v51 == v52)
    {
      v53 = *(unsigned int (**)(const void *, const void *, uint64_t))(v51 + 80);
      if (v53)
      {
        if (v53(v49, v50, 1))
          break;
      }
    }
    if (*(_BYTE *)(a1 + 116))
    {
      v41 = -1;
      goto LABEL_58;
    }
    *(_OWORD *)&time2.value = v198;
    time2.epoch = v27;
    v42 = v235;
    v43 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (!v43)
      goto LABEL_45;
  }
  if (v235)
  {
    CFRelease(v235);
    v235 = 0;
  }
  v74 = v233;
  v75 = v199;
  if (v233)
  {
    if (v199 && v238[0])
    {
      CFRelease(v238[0]);
      v74 = v233;
    }
    v238[0] = v74;
    v233 = 0;
    v75 = 1;
  }
  v199 = v75;
  if (v35)
  {
    *(_OWORD *)&time1.value = v198;
    time1.epoch = v27;
    v77 = v238[0];
    v78 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v78)
    {
      v41 = v78(v77, &time1);
      if (!v41)
      {
        if ((time1.flags & 0x1D) == 1)
        {
          time2 = *v33;
          lhs = time1;
          if ((CMTimeCompare(&time2, &lhs) & 0x80000000) == 0)
            goto LABEL_163;
          time2 = *v33;
          lhs = time1;
          MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
          v79 = *(void (**)(_QWORD, CFTypeRef, _QWORD, CMTime *, CMTime *))(a1 + 64);
          if (v79)
            v79(*(_QWORD *)(a1 + 72), cf, 0, &time2, &lhs);
          MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
          rhs = time2;
          v204 = lhs;
          if (!videoMentorEnqueueTimestampIntervalMarker(a1))
            goto LABEL_163;
        }
LABEL_213:
        v41 = FigSignalErrorAt();
LABEL_53:
        Mutable = 0;
        v57 = 0;
        v58 = 0;
LABEL_89:
        v59 = cf;
        goto LABEL_90;
      }
LABEL_425:
      FigSignalErrorAt();
      goto LABEL_53;
    }
LABEL_424:
    v41 = -12782;
    goto LABEL_425;
  }
LABEL_163:
  v224 = *v33;
  v183 = v33;
  v80 = v237;
  if (v237)
  {
    v58 = 0;
    v81 = v237;
    goto LABEL_165;
  }
  if ((a5->flags & 0x1D) != 1)
  {
    v58 = 0;
    goto LABEL_184;
  }
  memset(&time1, 0, sizeof(time1));
  time2 = *a5;
  v41 = audioMentorCreateCursorForPresentationTimeStamp(a1, a12, (__int128 *)&time2.value, (uint64_t)&v237);
  if (v41)
    goto LABEL_53;
  v84 = v237;
  v85 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v85)
    goto LABEL_424;
  v41 = v85(v84, &time1);
  if (v41)
    goto LABEL_425;
  if ((time1.flags & 0x1D) != 1)
    goto LABEL_213;
  time2 = time1;
  lhs = *a5;
  if (!CMTimeCompare(&time2, &lhs))
  {
    v171 = v237;
    v172 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
    if (!v172)
      goto LABEL_424;
    v41 = v172(v171, -1, 0);
    if (v41)
      goto LABEL_425;
  }
  v81 = v237;
  v58 = 1;
  if (!v237)
  {
LABEL_184:
    v82 = a21 == 0;
    goto LABEL_185;
  }
LABEL_165:
  if ((a5->flags & 0x1D) != 1)
  {
    v86 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v86)
    {
      v41 = v86(v81, a5);
      if (v41)
        goto LABEL_210;
      if ((a5->flags & 0x1D) == 1)
      {
        v81 = v237;
        goto LABEL_166;
      }
      v41 = FigSignalErrorAt();
LABEL_211:
      Mutable = 0;
      v57 = 0;
      goto LABEL_89;
    }
LABEL_209:
    v41 = -12782;
LABEL_210:
    FigSignalErrorAt();
    goto LABEL_211;
  }
LABEL_166:
  v82 = a21 == 0;
  if (a21 || !v81)
    goto LABEL_185;
  v83 = *(uint64_t (**)(CFTypeRef, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v83)
    goto LABEL_209;
  v41 = v83(v81, &v234);
  if (v41)
    goto LABEL_210;
  while (1)
  {
    while (1)
    {
      v100 = v234;
      v101 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 168);
      if (!v101)
      {
        v41 = -12782;
        goto LABEL_414;
      }
      v90 = v101(v100, 1, &v225);
      if (v90)
      {
        v41 = v90;
LABEL_414:
        v59 = cf;
        FigSignalErrorAt();
LABEL_430:
        Mutable = 0;
        v57 = 0;
        goto LABEL_90;
      }
      if (v225 != 1)
        goto LABEL_406;
      time1 = v224;
      time2 = *a5;
      v91 = videoMentorCursorIsInPlayRange(v234, (uint64_t)&time1, &time2, &v226);
      if (v91)
      {
        v41 = v91;
        Mutable = 0;
        v57 = 0;
        goto LABEL_89;
      }
      if (!v226)
        break;
      if (v232)
      {
        CFRelease(v232);
        v232 = 0;
      }
      v92 = v234;
      v93 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v93)
        goto LABEL_209;
      v94 = v93(v92, &v232);
      if (v94)
      {
        v41 = v94;
        goto LABEL_210;
      }
    }
    if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
      break;
    v95 = v234;
    v96 = v237;
    v97 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    v98 = v96 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
    if (v97 == v98)
    {
      v99 = *(unsigned int (**)(const void *, CFTypeRef, uint64_t))(v97 + 80);
      if (v99)
      {
        if (v99(v95, v96, 1))
          break;
      }
    }
    if (*(_BYTE *)(a1 + 116))
    {
      Mutable = 0;
      v57 = 0;
      v41 = -1;
      goto LABEL_89;
    }
  }
LABEL_406:
  if (v234)
  {
    CFRelease(v234);
    v234 = 0;
  }
  v170 = v232;
  if (v232)
  {
    if (!v80 && v237)
    {
      CFRelease(v237);
      v170 = v232;
    }
    v237 = v170;
    v232 = 0;
    v82 = 1;
    v58 = 1;
  }
  else
  {
    v82 = 1;
  }
LABEL_185:
  v182 = v82;
  v87 = a18;
  if (*a18)
  {
    if (CFArrayGetCount(*a18) < 1)
    {
      Mutable = 0;
      v57 = 0;
    }
    else
    {
      v88 = v238[0];
      v89 = *(unsigned int (**)(const void *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v89 && !v89(v88, &v235))
      {
        Mutable = 0;
        v57 = 0;
        lhs.value = 0;
        allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v87 = a18;
        while (1)
        {
          valuea = videoMentorGetCachedVideoFrameForCursor((_QWORD *)a1, v235, *v87, (uint64_t)cf);
          if (!valuea)
            break;
          *(_OWORD *)&time1.value = v198;
          time1.epoch = v27;
          v117 = v235;
          v118 = *(unsigned int (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v118)
            break;
          if (v118(v117, &lhs))
            break;
          v119 = v235;
          v120 = *(unsigned int (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 176);
          if (!v120)
            break;
          if (v120(v119, 1, &v225) || v225 != 1)
            break;
          v122 = v235;
          v123 = *(unsigned int (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
          if (!v123)
            break;
          if (v123(v122, &v233))
            break;
          v124 = v235;
          v125 = *(unsigned int (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (!v125 || v125(v124, &time1))
            break;
          if (!Mutable)
            Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          if (!v57)
            v57 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(Mutable, valuea);
          CFArrayAppendValue(v57, (const void *)lhs.value);
          if (lhs.value)
          {
            CFRelease((CFTypeRef)lhs.value);
            lhs.value = 0;
          }
          v224 = time1;
          v126 = v238[0];
          v238[0] = v233;
          if (v233)
            CFRetain(v233);
          if (v126)
            CFRelease(v126);
          if (v233)
          {
            CFRelease(v233);
            v233 = 0;
          }
          time1 = v224;
          time2 = *a5;
          v87 = a18;
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
            goto LABEL_285;
        }
        v87 = a18;
LABEL_285:
        if (lhs.value)
        {
          CFRelease((CFTypeRef)lhs.value);
          lhs.value = 0;
        }
        if (v235)
        {
          CFRelease(v235);
          v235 = 0;
        }
        if (v233)
        {
          CFRelease(v233);
          v233 = 0;
        }
      }
      else
      {
        Mutable = 0;
        v57 = 0;
        v87 = a18;
      }
    }
    if (*v87)
    {
      CFRelease(*v87);
      *v87 = 0;
    }
  }
  else
  {
    v57 = 0;
    Mutable = 0;
  }
  value = (const void **)(a1 + 744);
  started = videoMentorDependencyStateStartNewOrder((_QWORD *)a1, (uint64_t *)(a1 + 744));
  if (started)
    goto LABEL_222;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 264));
  v103 = *(float *)(a1 + 368);
  v212 = *(CMTime *)(a1 + 272);
  v211 = *(CMTime *)(a1 + 296);
  v210 = *(CMTime *)(a1 + 320);
  v209 = *(CMTime *)(a1 + 344);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 264));
  v203 = 0;
  v104 = fabsf(v103 * a10) > a9;
  v105 = v193 ? v104 : a8;
  time1 = v224;
  time2 = *v183;
  lhs = *a5;
  rhs = v210;
  v204 = v209;
  v202 = v212;
  v186 = v105;
  started = videoMentorDependencyStateCopyCursorForDecodeWalk(a1, (uint64_t)value, 2, (uint64_t)cf, a7, (uint64_t)&time1, &time2, (__int128 *)&lhs.value, v105, (uint64_t)&rhs, (uint64_t)&v204, (uint64_t)&v202, v238[0], v32, MEMORY[0x1E0CA2E18], &v203, 0, (char *)&v231, &v230,
              &v236);
  if (started)
  {
LABEL_222:
    v41 = started;
    goto LABEL_89;
  }
  v106 = v203;
  v188 = v203 == 0;
  if (v32 | a16)
  {
    v184 = 0;
  }
  else
  {
    time1 = *v183;
    videoMentorEnqueueEditBoundaryMarker((_QWORD *)a1, (uint64_t)cf, &time1);
    v106 = v203;
    v184 = 1;
  }
  if (v106)
  {
    for (i = *(_QWORD **)(a1 + 552); i; i = (_QWORD *)*i)
    {
      v108 = v236;
      if (v236)
      {
        v190 = i[1];
        v109 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v109 != *(_QWORD *)(CMBaseObjectGetVTable() + 16))
          continue;
        v110 = *(uint64_t (**)(uint64_t, const void *))(v109 + 32);
        if (!v110 || v110(v190, v108) != -1)
          continue;
      }
      v111 = (const void *)i[1];
      time1 = *v183;
      time2 = *a5;
      started = videoMentorCursorIsInPlayRange(v111, (uint64_t)&time1, &time2, &v226);
      if (started)
        goto LABEL_222;
      if (v226)
      {
        v112 = (const void *)i[1];
        time1 = *v183;
        time2 = *a5;
        started = videoMentorThreadGenerateAndEnqueueFrame(a1, v112, 0, 2, v231, v230, 0, v188, a13, (uint64_t)&time1, (uint64_t)&time2, MEMORY[0x1E0CA2E18], cf);
        if (started)
          goto LABEL_222;
        v188 = 0;
        v231 = 0;
      }
    }
  }
  videoMentorResetSavedListAndEnqueueMarker(a1);
  if (Mutable)
  {
    Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      v113 = 0;
      do
      {
        ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(Mutable, v113);
        v115 = CFArrayGetValueAtIndex(v57, v113);
        time1 = *v183;
        time2 = *a5;
        started = videoMentorThreadResendCachedSampleBuffer(a1, v115, ValueAtIndex, 0, v231, 0, a13, (__int128 *)&time1.value, (__int128 *)&time2.value, MEMORY[0x1E0CA2E18], cf);
        if (started)
          goto LABEL_222;
        v231 = 0;
      }
      while (Count != ++v113);
    }
    CFRelease(Mutable);
  }
  if (v57)
    CFRelease(v57);
  v76 = v199;
  if (!v236)
  {
    v41 = 0;
    goto LABEL_147;
  }
  v59 = cf;
  if (!v182)
  {
    v116 = 0;
LABEL_293:
    v180 = a21 != 0;
    goto LABEL_294;
  }
  if (!v237)
  {
    v116 = -1;
    goto LABEL_293;
  }
  v116 = FigSampleCursorCompareInDecodeOrder((uint64_t)v236, (uint64_t)v237);
  v180 = a21 != 0;
  if (!a21 && v116 == 1)
  {
LABEL_251:
    v41 = 0;
    goto LABEL_252;
  }
LABEL_294:
  v192 = v116;
  v176 = 0;
  v127 = (CMTime *)(a1 + 272);
  v128 = (CMTime *)(a1 + 320);
  v179 = (CMTime *)(a1 + 560);
  v177 = *MEMORY[0x1E0C9AE50];
  v129 = *MEMORY[0x1E0CA2E68];
  v130 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v178 = v130;
  v185 = *MEMORY[0x1E0CA2E68];
  while (2)
  {
    v200 = 0;
    v202.value = 0;
    memset(&time1, 0, sizeof(time1));
    *(_OWORD *)&time2.value = v129;
    time2.epoch = v130;
    v225 = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 264));
    v131 = *(float *)(a1 + 368);
    v212 = *v127;
    v211 = *(CMTime *)(a1 + 296);
    v210 = *v128;
    v209 = *(CMTime *)(a1 + 344);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 264));
    v132 = fabsf(v131 * a10) > a9;
    v133 = v186;
    if (v193)
      v133 = v132;
    v186 = v133;
    if (*(_BYTE *)(a1 + 116))
    {
      v41 = -1;
      goto LABEL_430;
    }
    v134 = v236;
    v135 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    v136 = v182;
    if (!v135)
    {
      v41 = -12782;
LABEL_418:
      FigSignalErrorAt();
LABEL_429:
      v59 = cf;
      goto LABEL_430;
    }
    v137 = v135(v134, &time1);
    if (v137)
    {
      v41 = v137;
      goto LABEL_418;
    }
    if ((time1.flags & 0x1D) != 1)
    {
      NodeForCursor = FigSignalErrorAt();
LABEL_420:
      v41 = NodeForCursor;
      goto LABEL_430;
    }
    lhs = v224;
    rhs = *a5;
    NodeForCursor = videoMentorCursorIsInPlayRange(v236, (uint64_t)&lhs, &rhs, &v226);
    if (NodeForCursor)
      goto LABEL_420;
    v201 = v226;
    if (!v182)
    {
      v175 = v226;
      v141 = 1;
      v142 = a1 + 744;
      while (1)
      {
        NodeForCursor = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, v142, (uint64_t)v236, (uint64_t)v59, 0, &v202);
        if (NodeForCursor)
          goto LABEL_420;
        if (v202.value)
        {
          v143 = *(_DWORD *)(v202.value + 76);
          if (v143 == 2)
          {
            v144 = *(_QWORD *)(v202.value + 56);
            if (v144 && (*(_BYTE *)(v144 + 58) || *(_BYTE *)(v144 + 56)))
              goto LABEL_337;
          }
          else if (v143 == 1)
          {
            goto LABEL_337;
          }
        }
        if (v214)
        {
          CFRelease(v214);
          v214 = 0;
        }
        lhs = v210;
        rhs = v209;
        v204 = v212;
        refreshed = videoMentorDependencyStateFillRefreshGroupsUntil(a1, v142, (uint64_t)v236, (uint64_t)v59, v186, &lhs, &rhs, &v204, v141, &v214);
        if (refreshed)
          goto LABEL_435;
        v146 = (uint64_t)v214;
        if (v214)
        {
          if (v213)
          {
            CFRelease(v213);
            v213 = 0;
          }
          v59 = cf;
          v41 = videoMentorDependencyStateAddSamplesToGraph(a1, v142, (uint64_t)cf, v146, v186, &v213, 0);
          if (v41)
            goto LABEL_430;
          v147 = CFArrayGetCount(v213);
          if (v147 >= 1)
          {
            v148 = v147;
            for (j = 0; j != v148; ++j)
            {
              v150 = CFArrayGetValueAtIndex(v213, j);
              if (v150[17] == 1)
                v150[17] = 0;
            }
          }
        }
        v151 = CFArrayGetCount(*(CFArrayRef *)(a1 + 760));
        if (v151 >= 1)
        {
          v152 = v151;
          for (k = 0; k != v152; ++k)
          {
            v154 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 760), k);
            if (!v154[56])
            {
              v155 = (uint64_t)v154;
              videoMentorRefreshGroupClassifyNodes((uint64_t)v154);
              videoMentorAddRefreshGroupToProcess((uint64_t)value, v155);
            }
          }
        }
        v142 = a1 + 744;
        videoMentorDependencyStateProcessRefreshGroups((uint64_t)value);
        v59 = cf;
        if (!*(_BYTE *)(a1 + 832) && !*(_BYTE *)(a1 + 777) && v141++ < 9)
          continue;
LABEL_337:
        v157 = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, v142, (uint64_t)v236, (uint64_t)v59, 0, &v202);
        if (v157)
          goto LABEL_428;
        v140 = v202.value;
        if (v202.value)
        {
          v158 = *(_DWORD *)(v202.value + 76);
          if (!v158)
          {
            lhs.value = 1;
            *(_QWORD *)&lhs.timescale = v202.value;
            videoMentorDependencyStateExecuteAction(value, (int *)&lhs);
            v158 = *(_DWORD *)(v140 + 76);
          }
          if (v158 == 2)
          {
            v200 = 1;
            if ((*(_DWORD *)(v140 + 92) & 0x1D) == 1)
            {
              lhs = *(CMTime *)(v140 + 80);
              rhs = *(CMTime *)(v140 + 128);
              CMTimeSubtract(&time2, &lhs, &rhs);
            }
            v159 = v188;
            if (v186)
              v159 = 1;
            v188 = v159;
          }
          v139 = v175;
          goto LABEL_363;
        }
        goto LABEL_440;
      }
    }
    v200 = v226;
    if (!a11)
    {
      if (v186)
      {
        if (!v226)
        {
          v59 = cf;
          v76 = v199;
          v136 = v182;
          goto LABEL_393;
        }
        v160 = v226;
        lhs = time1;
        rhs = v212;
        v188 = 1;
        v157 = videoMentorSimulateIFramesOnly((uint64_t)v236, &lhs, &rhs, v179, 1, &v200, &v230);
        if (v157)
          goto LABEL_428;
        v140 = 0;
      }
      else
      {
        v160 = v226;
        if (!v226 || !v230)
        {
          v157 = videoMentorSimulateFrame((uint64_t)v236, &v223, (uint64_t)&v221, &v200, &v230);
          if (v157)
            goto LABEL_428;
        }
        v140 = 0;
        v186 = 0;
      }
      v139 = v160;
LABEL_363:
      if (a14 && v139)
      {
        if (a11)
        {
          v76 = v199;
          v136 = v182;
          goto LABEL_367;
        }
        videoMentorUpdateUpcomingOutputPTSRangeAnnouncement((_QWORD *)a1, (uint64_t)v236, (uint64_t)v237, (uint64_t)cf, &v229, &v228, &v227);
      }
LABEL_370:
      v76 = v199;
      v136 = v182;
      goto LABEL_371;
    }
    if (!v226 && v220[25])
    {
      v139 = 0;
      v140 = 0;
      *(_OWORD *)&v179->value = v198;
      *(_QWORD *)(a1 + 576) = v27;
      goto LABEL_371;
    }
    lhs = time1;
    rhs = v212;
    v204 = v211;
    v157 = videoMentorSimulateSyncFrameClustersOnly((uint64_t)v236, &lhs, &rhs, &v204, a11, &v200, &v201, &v230, (uint64_t)&v215);
    if (v157)
      goto LABEL_428;
    v140 = 0;
    v161 = v188;
    if (!v230)
      v161 = 1;
    v188 = v161;
    v139 = v201;
    *(_OWORD *)&v179->value = v198;
    *(_QWORD *)(a1 + 576) = v27;
    if (!a14)
      goto LABEL_370;
    v76 = v199;
    v136 = v182;
    if (v139)
LABEL_367:
      videoMentorPostMinAndMaxUpcomingOutputPTS(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
LABEL_371:
    if (!v200)
    {
      v164 = 0;
      goto LABEL_390;
    }
    if (!(v139 | v184))
    {
      lhs = *v183;
      videoMentorEnqueueEditBoundaryMarker((_QWORD *)a1, (uint64_t)cf, &lhs);
      v162 = 1;
      v184 = 1;
LABEL_382:
      v163 = 1;
      goto LABEL_386;
    }
    if (!v139)
    {
      v162 = 1;
      goto LABEL_382;
    }
    if (a17)
    {
      if (v176)
      {
        v162 = 0;
        if (++v176 == 2)
          v163 = 3;
        else
          v163 = 0;
      }
      else
      {
        v162 = 0;
        v163 = 5;
        v176 = 1;
      }
      v76 = v199;
    }
    else
    {
      v162 = 0;
      v163 = 0;
    }
LABEL_386:
    FigSampleCursorSetProperty((uint64_t)v236, (uint64_t)CFSTR("EagerlyFetchSampleDependencyAttributes"), v177);
    lhs = *v183;
    rhs = *a5;
    v204 = time2;
    refreshed = videoMentorThreadGenerateAndEnqueueFrame(a1, v236, v163, 0, v231, v230, 0, v188, a13, (uint64_t)&lhs, (uint64_t)&rhs, (uint64_t)&v204, cf);
    if (refreshed)
    {
LABEL_435:
      v41 = refreshed;
      goto LABEL_429;
    }
    v231 = 0;
    v188 = 0;
    if ((v162 & 1) == 0)
    {
      *(_OWORD *)&v179->value = *(_OWORD *)&time1.value;
      *(_QWORD *)(a1 + 576) = time1.epoch;
    }
    v164 = 1;
    v136 = v182;
LABEL_390:
    if (!v136)
    {
      videoMentorUpdateDecoderState(a1, v140, v164);
      videoMentorDependencyStateForgetObsoleteRefreshGroups((uint64_t)value, v140);
      v202.value = 0;
    }
    v59 = cf;
LABEL_393:
    v165 = v236;
    v166 = *(unsigned int (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 168);
    if (!v166 || v166(v165, 1, &v225))
    {
      v157 = FigSignalErrorAt();
LABEL_428:
      v41 = v157;
      goto LABEL_429;
    }
    v127 = (CMTime *)(a1 + 272);
    v129 = v185;
    if (v225 == 1)
    {
      if (v237)
        v167 = v136;
      else
        v167 = 0;
      v168 = v192;
      if (v167)
      {
        v168 = FigSampleCursorCompareInDecodeOrder((uint64_t)v236, (uint64_t)v237);
        v129 = v185;
      }
      v192 = v168;
      v169 = v168 != 1 || v180;
      v130 = v178;
      v128 = (CMTime *)(a1 + 320);
      if ((v169 & 1) == 0)
        goto LABEL_251;
      continue;
    }
    break;
  }
  if (v136)
  {
    v173 = (uint64_t)v237;
    if (v237)
    {
      v174 = (uint64_t)v236;
      goto LABEL_438;
    }
    goto LABEL_440;
  }
  if (!*(_BYTE *)(a1 + 832))
    goto LABEL_439;
  v174 = *(_QWORD *)(a1 + 824);
  v173 = (uint64_t)v236;
LABEL_438:
  if (!FigSampleCursorCompareInDecodeOrder(v174, v173))
LABEL_440:
    v41 = 0;
  else
LABEL_439:
    v41 = FigSignalErrorAt();
  v59 = cf;
  v76 = v199;
LABEL_252:
  videoMentorEnqueueDrainAfterDecodingMarker(a1);
LABEL_148:
  v199 = v76;
  if (a19 && !v41)
  {
    v41 = audioMentorEnqueueBufferConsumedMarker(a1, a19);
    v197 = 0;
  }
  Mutable = 0;
  v57 = 0;
  ++*(_DWORD *)(a1 + 928);
LABEL_90:
  if (*(_BYTE *)(a1 + 492))
  {
    videoMentorPostCollectorCoherenceConduitNotification(a1);
    *(_BYTE *)(a1 + 492) = 0;
  }
  if (a14 && (v41 + 1) <= 1)
    videoMentorPostMinAndMaxUpcomingOutputPTS(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
  videoMentorThreadFinishPreroll(a1, 0, v59);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!*(_BYTE *)a1)
  {
    v70 = kMentorNotification_StoppingDueToCompletion;
    if (v41)
      v70 = kMentorNotification_StoppingDueToError;
    if (v41 == -1)
      v71 = 0;
    else
      v71 = v41;
    if (v41 == -1)
      v70 = kMentorNotification_ResettingDueToModeSwitch;
    v72 = FigMentorNotificationPayloadCreate((uint64_t)*v70, v59, v71, *(unsigned __int8 *)(a1 + 520), v197, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v72)
      CFRelease(v72);
  }
  if (v199 && v238[0])
  {
    CFRelease(v238[0]);
    v238[0] = 0;
  }
  if (v58 && v237)
  {
    CFRelease(v237);
    v237 = 0;
  }
  if (v236)
  {
    CFRelease(v236);
    v236 = 0;
  }
  if (v235)
  {
    CFRelease(v235);
    v235 = 0;
  }
  if (v234)
  {
    CFRelease(v234);
    v234 = 0;
  }
  if (v233)
  {
    CFRelease(v233);
    v233 = 0;
  }
  if (v232)
  {
    CFRelease(v232);
    v232 = 0;
  }
  videoMentorThrottlingStateFree(a1 + 584);
  v73 = *(const void **)(a1 + 512);
  if (v73)
  {
    CFRelease(v73);
    *(_QWORD *)(a1 + 512) = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v57)
    CFRelease(v57);
  if (v214)
    CFRelease(v214);
  if (v213)
    CFRelease(v213);
}

void videoMentorThreadReversePlayback(uint64_t a1, const void *a2, CMTime *a3, const void *a4, CMTime *a5, int a6, int a7, int a8, int a9, char a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, CFArrayRef *a14, const void *a15, CFTypeRef cf)
{
  CFTypeRef v21;
  int v22;
  const void *v23;
  __CFArray *Mutable;
  __CFArray *v25;
  int v26;
  int v27;
  int CursorForPresentationTimeStamp;
  CFTypeRef v29;
  uint64_t v30;
  CFTypeRef v31;
  CFTypeRef v32;
  uint64_t (*v33)(CFTypeRef, CFTypeRef *);
  CFTypeRef v34;
  uint64_t (*v35)(CFTypeRef, uint64_t, uint64_t *);
  int v36;
  __CFArray *v37;
  __CFArray *v38;
  uint64_t v39;
  CFTypeRef v40;
  uint64_t (*v41)(CFTypeRef, CMTime *);
  int v42;
  CFTypeRef v43;
  uint64_t (*v44)(CFTypeRef, CFTypeRef *);
  int v45;
  CFTypeRef v46;
  CFTypeRef v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(CFTypeRef, CFTypeRef, uint64_t);
  CFTypeRef v51;
  uint64_t (*v52)(CFTypeRef, CMTime *);
  CFTypeRef v53;
  unsigned int (*v54)(CFTypeRef, CFTypeRef *);
  CFTypeRef v55;
  uint64_t (*v56)(CFTypeRef, CMTime *);
  uint64_t (*v57)(CFTypeRef, CMTime *);
  uint64_t v58;
  CMTime *v59;
  CFTypeRef v60;
  uint64_t (*v61)(CFTypeRef, CFTypeRef *);
  CFTypeRef v62;
  uint64_t (*v63)(CFTypeRef, CMTime *);
  CFTypeRef v64;
  uint64_t (*v65)(CFTypeRef, CFTypeRef *);
  int v66;
  CFTypeRef v67;
  CFTypeRef v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(CFTypeRef, CFTypeRef, _QWORD);
  CFTypeRef v72;
  uint64_t (*v73)(CFTypeRef, uint64_t, uint64_t *);
  _DWORD *v74;
  CFTypeRef v75;
  uint64_t (*v76)(CFTypeRef, uint64_t, _QWORD);
  __CFString **v77;
  int v78;
  __CFDictionary *v79;
  const void *v80;
  CFTypeRef v81;
  CFTypeRef v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  CFTypeRef v87;
  uint64_t (*v88)(CFTypeRef, CMTime *);
  int v89;
  CFTypeRef v90;
  uint64_t (*v91)(CFTypeRef, CMTime *);
  int v92;
  unsigned int v93;
  CMTimeFlags v94;
  CMTimeEpoch v95;
  int v96;
  CFTypeRef v97;
  uint64_t (*v98)(CFTypeRef, uint64_t, uint64_t *);
  __CFArray *v99;
  __CFArray *v100;
  opaqueCMSampleBuffer *CachedVideoFrameForCursor;
  CFTypeRef v102;
  unsigned int (*v103)(CFTypeRef, CMTime *);
  CFTypeRef v104;
  unsigned int (*v105)(CFTypeRef, CMTimeRange *);
  CFTypeRef v106;
  unsigned int (*v107)(CFTypeRef, uint64_t, uint64_t *);
  CFTypeRef v109;
  unsigned int (*v110)(CFTypeRef, CFTypeRef *);
  uint64_t v111;
  CMTime *v112;
  const void *v113;
  uint64_t (*v114)(CFTypeRef, CFTypeRef *);
  int v115;
  uint64_t i;
  CFTypeRef v117;
  uint64_t (*v118)(CFTypeRef, char *, __int16 *, _QWORD);
  int v119;
  int v120;
  int v122;
  _BOOL4 v123;
  CFTypeRef v124;
  uint64_t (*v125)(CFTypeRef, char *, __int16 *, int *, BOOL *);
  int v126;
  uint64_t (*v127)(CFTypeRef, CMTimeRange *);
  int v128;
  CFTypeRef v129;
  uint64_t (*v130)(CFTypeRef, CMTime *);
  int32_t v131;
  CFTypeRef v132;
  uint64_t (*v133)(CFTypeRef, CFTypeRef *);
  int v134;
  unsigned int v135;
  CFTypeRef v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(CFTypeRef, CFTypeRef);
  CFTypeRef v140;
  uint64_t (*v141)(CFTypeRef, uint64_t, uint64_t *);
  int v142;
  CFTypeRef v143;
  uint64_t (*v144)(CFTypeRef, CMTime *);
  CFTypeRef v145;
  uint64_t (*v146)(CFTypeRef, CFTypeRef *);
  int v147;
  CFTypeRef v148;
  uint64_t (*v149)(CFTypeRef, CFTypeRef *);
  uint64_t v150;
  CFTypeRef v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(uint64_t, CFTypeRef);
  uint64_t v158;
  uint64_t (*v159)(uint64_t, CFTypeRef);
  int v160;
  uint64_t v161;
  CFTypeRef v162;
  uint64_t (*v163)(CFTypeRef, uint64_t, uint64_t *);
  uint64_t v164;
  int v165;
  uint64_t v166;
  void (*v167)(uint64_t);
  const void *v168;
  const void *v169;
  CFIndex v170;
  const void *v171;
  int v172;
  CFTypeRef v173;
  uint64_t (*v174)(CFTypeRef, CFTypeRef *);
  CFTypeRef v175;
  int v176;
  CFTypeRef v177;
  uint64_t (*v178)(CFTypeRef, uint64_t, uint64_t *);
  CMTimeFlags v179;
  uint64_t (*v180)(CFTypeRef, CMTime *);
  int v181;
  CFTypeRef v182;
  uint64_t (*v183)(CFTypeRef, CMTimeRange *);
  int v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  char v188;
  int32_t v189;
  _BOOL4 v190;
  int CursorPTSRange;
  uint64_t (*v192)(CFTypeRef, CMTime *, _QWORD, _QWORD);
  unsigned int v193;
  uint64_t (*v194)(CFTypeRef, _QWORD, _QWORD, _QWORD, CMTime *);
  _BOOL4 v195;
  uint64_t v196;
  int SampleBuffer;
  uint64_t (*v198)(CFTypeRef, uint64_t, uint64_t *);
  uint64_t v199;
  uint64_t (*v200)(uint64_t, CFTypeRef *);
  CFTypeRef v201;
  uint64_t (*v202)(CFTypeRef, uint64_t, uint64_t *);
  int v203;
  uint64_t v204;
  int64_t v205;
  _OWORD *v206;
  CMTimeEpoch v207;
  int v208;
  int v209;
  CMTimeFlags v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  int v214;
  uint64_t v215;
  _BOOL4 v216;
  uint64_t v217;
  int v218;
  CFTypeRef v219;
  int v220;
  CFIndex v221;
  uint64_t v222;
  CFIndex v223;
  CMTimeEpoch v224;
  int64_t count;
  int v226;
  BOOL v227;
  unsigned __int8 v228;
  const __CFAllocator *allocator;
  void *value;
  CMTimeFlags valuea;
  opaqueCMSampleBuffer *valueb;
  int v235;
  CMTimeScale v236;
  opaqueCMSampleBuffer *ValueAtIndex;
  __int128 v238;
  CMTimeEpoch v239;
  CMTimeValue v240;
  __int128 v241;
  CMTimeEpoch v242;
  const void *v243;
  CMTime v244;
  CMTime v245;
  CMTime v246;
  CMTime v247;
  __int128 v248;
  CMTimeEpoch v249;
  CMTime start;
  uint64_t v251;
  CMTime v252;
  CFTypeRef v253;
  CFTypeRef v254;
  CFTypeRef v255;
  CFTypeRef v256;
  CFTypeRef v257;
  CFTypeRef v258;
  CFTypeRef v259;
  CFTypeRef v260;
  CMTime v261;
  CMTime rhs;
  int v263;
  CMTime lhs;
  CMTimeRange time2;
  uint64_t v266;
  CMTime time1[2];
  BOOL v268;
  __int16 v269;
  __int16 v270;
  CFTypeRef v271;
  CMTimeValue v272;
  CMTimeScale v273;
  CMTime v274;
  uint64_t v275;

  v21 = cf;
  v275 = *MEMORY[0x1E0C80C00];
  v260 = a2;
  v259 = a4;
  v258 = 0;
  v257 = 0;
  v256 = 0;
  v255 = 0;
  v254 = 0;
  v253 = 0;
  v251 = 0;
  v241 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&start.value = *MEMORY[0x1E0CA2E18];
  v239 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  start.epoch = v239;
  ++*(_DWORD *)(a1 + 932);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  *(_DWORD *)(a1 + 524) = 0;
  *(_BYTE *)(a1 + 492) = *(_DWORD *)(a1 + 488) != 0;
  *(_DWORD *)(a1 + 500) = 2;
  if (a8)
    v22 = a8;
  else
    v22 = 2;
  *(_DWORD *)(a1 + 496) = v22;
  v23 = *(const void **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = cf;
  if (cf)
    CFRetain(cf);
  if (v23)
    CFRelease(v23);
  Mutable = 0;
  v25 = 0;
  v243 = a15;
  *(_OWORD *)&v252.value = 0uLL;
  if (a9 == 2)
    v26 = 1;
  else
    v26 = a9;
  v235 = v26;
  v252.epoch = 0;
  if (!a2)
  {
    memset(time1, 0, 24);
    *(_OWORD *)&time2.start.value = *(_OWORD *)&a3->value;
    time2.start.epoch = a3->epoch;
    CursorForPresentationTimeStamp = audioMentorCreateCursorForPresentationTimeStamp(a1, a11, (__int128 *)&time2.start.value, (uint64_t)&v260);
    if (!CursorForPresentationTimeStamp)
    {
      v51 = v260;
      v52 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v52)
      {
LABEL_104:
        CursorForPresentationTimeStamp = -12782;
        goto LABEL_105;
      }
      CursorForPresentationTimeStamp = v52(v51, time1);
      if (CursorForPresentationTimeStamp)
      {
LABEL_105:
        FigSignalErrorAt();
        goto LABEL_106;
      }
      if ((time1[0].flags & 0x1D) == 1)
      {
        time2.start = time1[0];
        lhs = *a3;
        if (CMTimeCompare(&time2.start, &lhs))
        {
LABEL_53:
          start = *a3;
          if (*a14
            && CFArrayGetCount(*a14) >= 1
            && (v53 = v260,
                (v54 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8)) != 0)
            && !v54(v53, &v258))
          {
            Mutable = 0;
            v25 = 0;
            rhs.value = 0;
            allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            do
            {
              CachedVideoFrameForCursor = videoMentorGetCachedVideoFrameForCursor((_QWORD *)a1, v258, *a14, (uint64_t)cf);
              if (!CachedVideoFrameForCursor)
                break;
              valueb = CachedVideoFrameForCursor;
              *(_OWORD *)&time2.start.value = v241;
              time2.start.epoch = v239;
              v102 = v258;
              v103 = *(unsigned int (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (!v103)
                break;
              if (v103(v102, &rhs))
                break;
              v104 = v258;
              v105 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 40);
              if (!v105)
                break;
              if (v105(v104, &time2))
                break;
              v106 = v258;
              v107 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 176);
              if (!v107)
                break;
              if (v107(v106, -1, &v251) || v251 != -1)
                break;
              v109 = v258;
              v110 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 8);
              if (!v110 || v110(v109, &v256))
                break;
              if (!Mutable)
                Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
              if (!v25)
                v25 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
              CFArrayAppendValue(Mutable, valueb);
              CFArrayAppendValue(v25, (const void *)rhs.value);
              if (rhs.value)
              {
                CFRelease((CFTypeRef)rhs.value);
                rhs.value = 0;
              }
              start = time2.start;
              if (v260)
                CFRelease(v260);
              v260 = v256;
              v256 = 0;
              time2.start = start;
              lhs = *a5;
            }
            while (CMTimeCompare(&time2.start, &lhs) > 0);
            if (rhs.value)
            {
              CFRelease((CFTypeRef)rhs.value);
              rhs.value = 0;
            }
            if (v258)
            {
              CFRelease(v258);
              v258 = 0;
            }
            if (v256)
            {
              CFRelease(v256);
              v256 = 0;
            }
          }
          else
          {
            Mutable = 0;
            v25 = 0;
          }
          goto LABEL_14;
        }
        v75 = v260;
        v76 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
        if (v76)
        {
          CursorForPresentationTimeStamp = v76(v75, -1, 0);
          if (!CursorForPresentationTimeStamp)
            goto LABEL_53;
          goto LABEL_105;
        }
        goto LABEL_104;
      }
      CursorForPresentationTimeStamp = FigSignalErrorAt();
    }
LABEL_106:
    v29 = 0;
    LODWORD(v30) = 0;
    v58 = 0;
    v59 = 0;
    goto LABEL_107;
  }
LABEL_14:
  if (*a14)
  {
    CFRelease(*a14);
    *a14 = 0;
  }
  time1[0] = *a5;
  *(_OWORD *)&time2.start.value = *(_OWORD *)&a5->value;
  time2.start.epoch = a5->epoch;
  lhs = *a3;
  videoMentorThrottlingStateStartNewOrder(a1 + 584, (__int128 *)&time1[0].value, (uint64_t)&time2, (__n128 *)&lhs, (uint64_t)v260);
  if (v259 || (a5->flags & 0x1D) != 1)
  {
    value = (void *)(a1 + 584);
    v30 = 0;
  }
  else
  {
    time1[0] = *a5;
    v27 = audioMentorCreateCursorForPresentationTimeStamp(a1, a11, (__int128 *)&time1[0].value, (uint64_t)&v259);
    if (v27)
    {
      CursorForPresentationTimeStamp = v27;
      v29 = 0;
      LODWORD(v30) = 0;
LABEL_69:
      v58 = 0;
      v59 = 0;
      goto LABEL_108;
    }
    value = (void *)(a1 + 584);
    v30 = 1;
  }
  if ((a3->flags & 0x1D) != 1)
  {
    v55 = v260;
    v56 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v56)
      goto LABEL_66;
    CursorForPresentationTimeStamp = v56(v55, a3);
    if (CursorForPresentationTimeStamp)
      goto LABEL_67;
    if ((a3->flags & 0x1D) != 1)
      goto LABEL_65;
  }
  v31 = v259;
  if (v259 && (a5->flags & 0x1D) != 1)
  {
    v57 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v57)
      goto LABEL_66;
    CursorForPresentationTimeStamp = v57(v31, a5);
    if (CursorForPresentationTimeStamp)
      goto LABEL_67;
    if ((a5->flags & 0x1D) != 1)
    {
LABEL_65:
      CursorForPresentationTimeStamp = FigSignalErrorAt();
LABEL_68:
      v29 = 0;
      goto LABEL_69;
    }
  }
  v32 = v260;
  v33 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v33)
  {
LABEL_66:
    CursorForPresentationTimeStamp = -12782;
    goto LABEL_67;
  }
  CursorForPresentationTimeStamp = v33(v32, &v258);
  if (CursorForPresentationTimeStamp)
  {
LABEL_67:
    FigSignalErrorAt();
    goto LABEL_68;
  }
  while (1)
  {
    v34 = v258;
    v35 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (!v35)
      goto LABEL_66;
    v36 = v35(v34, 1, &v251);
    if (v36)
    {
      CursorForPresentationTimeStamp = v36;
      goto LABEL_67;
    }
    v37 = Mutable;
    v38 = v25;
    v39 = v30;
    if (v251 != 1)
      break;
    v40 = v258;
    v41 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v41)
    {
LABEL_98:
      CursorForPresentationTimeStamp = -12782;
      LODWORD(v30) = v39;
      goto LABEL_100;
    }
    v42 = v41(v40, &v252);
    if (v42)
    {
LABEL_99:
      CursorForPresentationTimeStamp = v42;
LABEL_100:
      v25 = v38;
      FigSignalErrorAt();
      v29 = 0;
      v58 = 0;
      v59 = 0;
      v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
LABEL_199:
      Mutable = v37;
      v21 = cf;
      goto LABEL_109;
    }
    if ((v252.flags & 0x1D) != 1)
    {
LABEL_150:
      CursorForPresentationTimeStamp = FigSignalErrorAt();
      goto LABEL_197;
    }
    time1[0] = v252;
    time2.start = start;
    if (CMTimeCompare(time1, &time2.start) < 0)
    {
      if (!v259 || (time1[0] = *a5, time2.start = v252, CMTimeCompare(time1, &time2.start) <= 0))
      {
        if (v256)
        {
          CFRelease(v256);
          v256 = 0;
        }
        v43 = v258;
        v44 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v44)
        {
LABEL_96:
          CursorForPresentationTimeStamp = -12782;
          goto LABEL_196;
        }
        v45 = v44(v43, &v256);
        if (v45)
        {
LABEL_195:
          CursorForPresentationTimeStamp = v45;
          goto LABEL_196;
        }
      }
    }
    if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
      break;
    v46 = v258;
    v47 = v260;
    v48 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    v49 = v47 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
    if (v48 == v49)
    {
      v50 = *(unsigned int (**)(CFTypeRef, CFTypeRef, uint64_t))(v48 + 80);
      if (v50)
      {
        if (v50(v46, v47, 1))
          break;
      }
    }
    CursorForPresentationTimeStamp = -1;
    v30 = v39;
    v25 = v38;
    Mutable = v37;
    v21 = cf;
    if (*(_BYTE *)(a1 + 116))
      goto LABEL_68;
  }
  v60 = v259;
  if (v259)
  {
    v61 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v61)
    {
      CursorForPresentationTimeStamp = -12782;
      LODWORD(v30) = v39;
      goto LABEL_196;
    }
    CursorForPresentationTimeStamp = v61(v60, &v257);
    LODWORD(v30) = v39;
    if (CursorForPresentationTimeStamp)
    {
LABEL_196:
      FigSignalErrorAt();
LABEL_197:
      v29 = 0;
      v58 = 0;
      v59 = 0;
      v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    }
    else
    {
      while (1)
      {
        v72 = v257;
        v73 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
        if (!v73)
          goto LABEL_96;
        v45 = v73(v72, -1, &v251);
        if (v45)
          goto LABEL_195;
        if (v251 != -1)
          goto LABEL_151;
        v62 = v257;
        v63 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v63)
          goto LABEL_98;
        v42 = v63(v62, &v252);
        LODWORD(v30) = v39;
        if (v42)
          goto LABEL_99;
        if ((v252.flags & 0x1D) != 1)
          goto LABEL_150;
        time1[0] = v252;
        time2.start = start;
        if (CMTimeCompare(time1, &time2.start) < 0)
        {
          time1[0] = *a5;
          time2.start = v252;
          if (CMTimeCompare(time1, &time2.start) <= 0)
          {
            if (v255)
            {
              CFRelease(v255);
              v255 = 0;
            }
            v64 = v257;
            v65 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (!v65)
            {
              CursorForPresentationTimeStamp = -12782;
              goto LABEL_493;
            }
            v66 = v65(v64, &v255);
            if (v66)
              break;
          }
        }
        if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
          goto LABEL_151;
        v67 = v257;
        v68 = v259;
        v69 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        v70 = v68 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
        if (v69 == v70)
        {
          v71 = *(unsigned int (**)(CFTypeRef, CFTypeRef, _QWORD))(v69 + 80);
          if (v71)
          {
            if (v71(v67, v68, 0))
              goto LABEL_151;
          }
        }
        CursorForPresentationTimeStamp = -1;
        LODWORD(v30) = v39;
        if (*(_BYTE *)(a1 + 116))
          goto LABEL_197;
      }
      CursorForPresentationTimeStamp = v66;
LABEL_493:
      FigSignalErrorAt();
      v29 = 0;
      v58 = 0;
      v59 = 0;
      v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      LODWORD(v30) = v39;
    }
    v25 = v38;
    goto LABEL_199;
  }
LABEL_151:
  v81 = v256;
  LODWORD(v30) = v39;
  v25 = v38;
  Mutable = v37;
  v21 = cf;
  if (v256)
  {
    if (!a2 && v260)
    {
      CFRelease(v260);
      v81 = v256;
    }
    v260 = v81;
    v256 = 0;
  }
  v82 = v255;
  if (v255)
  {
    if (v259)
      v83 = v30;
    else
      v83 = 0;
    if (v83 == 1)
    {
      CFRelease(v259);
      v82 = v255;
    }
    v259 = v82;
    v255 = 0;
    LODWORD(v30) = 1;
  }
  videoMentorResetSavedListAndEnqueueMarker(a1);
  v226 = v30;
  if (!v259)
  {
    v86 = v235 != 0;
    if (a10)
    {
      LOBYTE(v261.value) = 0;
      v85 = -1;
      goto LABEL_170;
    }
    v248 = v241;
    v249 = v239;
    v85 = -1;
    goto LABEL_233;
  }
  v84 = FigSampleCursorCompareInDecodeOrder((uint64_t)v259, (uint64_t)v260);
  v85 = v84;
  v86 = v235 != 0;
  if (!a10)
  {
    v248 = v241;
    v249 = v239;
    if (v84 == 1)
    {
      v215 = 0;
      v59 = 0;
      v99 = Mutable;
      v100 = v25;
LABEL_202:
      CursorForPresentationTimeStamp = 0;
      Mutable = v99;
      v25 = v100;
      v58 = v215;
      goto LABEL_470;
    }
LABEL_233:
    v228 = v86;
    v204 = v85;
    v205 = 0;
    v59 = 0;
    v215 = 0;
    v111 = a1 + 320;
    v112 = (CMTime *)(a1 + 344);
    v206 = (_OWORD *)(a1 + 560);
    v212 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    v213 = *MEMORY[0x1E0CA2E40];
    v211 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
    while (1)
    {
      *(_OWORD *)&v246.value = v241;
      v246.epoch = v239;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 264));
      v272 = *(_QWORD *)v111;
      v273 = *(_DWORD *)(v111 + 8);
      v210 = *(_DWORD *)(a1 + 332);
      v207 = *(_QWORD *)(a1 + 336);
      v247 = *v112;
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 264));
      v219 = v260;
      v245 = start;
      v271 = 0;
      *(_OWORD *)&time1[0].value = v213;
      *(_OWORD *)&time1[0].epoch = v212;
      *(_OWORD *)&time1[1].timescale = v211;
      v266 = 0;
      v254 = 0;
      v270 = 0;
      v269 = 0;
      v268 = 0;
      v113 = *(const void **)(a1 + 536);
      if (v113)
        videoMentorGetCursorPTSRange(v113, time1);
      *(_OWORD *)&time2.start.value = *(_OWORD *)&time1[0].value;
      *(_OWORD *)&time2.start.epoch = *(_OWORD *)&time1[0].epoch;
      *(_OWORD *)&time2.duration.timescale = *(_OWORD *)&time1[1].timescale;
      lhs = start;
      CMTimeRangeContainsTime(&time2, &lhs);
      v114 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v114)
      {
LABEL_474:
        CursorForPresentationTimeStamp = -12782;
LABEL_476:
        FigSignalErrorAt();
LABEL_485:
        v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        goto LABEL_486;
      }
      v115 = v114(v219, &v271);
      if (v115)
      {
LABEL_475:
        CursorForPresentationTimeStamp = v115;
        goto LABEL_476;
      }
      v218 = 0;
      v222 = 0;
      v217 = 0;
      v208 = 0;
      v209 = 0;
      v214 = 0;
      v220 = 3;
      for (i = 1; ; i = count + 1)
      {
        count = i;
        if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72))
        {
          v117 = v271;
          v118 = *(uint64_t (**)(CFTypeRef, char *, __int16 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 72);
          if (!v118)
            goto LABEL_477;
          v119 = v118(v117, (char *)&v270 + 1, &v270, 0);
          if (v119)
          {
LABEL_478:
            CursorForPresentationTimeStamp = v119;
            goto LABEL_479;
          }
          v120 = HIBYTE(v270);
          if (HIBYTE(v270) - 66 > 0xE || ((1 << (HIBYTE(v270) - 66)) & 0x4081) == 0)
          {
            v165 = FigSignalErrorAt();
            count = 0;
            v29 = v271;
            if (!v165)
            {
              LODWORD(v30) = v226;
              v21 = cf;
              goto LABEL_350;
            }
            CursorForPresentationTimeStamp = v165;
            goto LABEL_499;
          }
          v122 = v220;
          if (v220 == 3)
          {
            if (HIBYTE(v270) == 73)
            {
              if ((_BYTE)v270)
              {
                if (!v254)
                {
                  v148 = v271;
                  v149 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
                  if (!v149)
                    goto LABEL_501;
                  v147 = v149(v148, &v254);
                  if (v147)
                    goto LABEL_502;
                  v123 = 0;
                  v122 = 1;
                  v120 = HIBYTE(v270);
                  v21 = cf;
                  goto LABEL_303;
                }
                v123 = 0;
                v122 = 1;
              }
              else
              {
                v123 = 1;
                v122 = 3;
              }
              v120 = 73;
            }
            else
            {
              v123 = 0;
              v122 = 3;
            }
          }
          else
          {
            v123 = HIBYTE(v270) == 73;
          }
LABEL_303:
          v268 = v120 == 66;
          goto LABEL_304;
        }
        v263 = 0;
        v124 = v271;
        v125 = *(uint64_t (**)(CFTypeRef, char *, __int16 *, int *, BOOL *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 64);
        if (!v125)
        {
LABEL_477:
          CursorForPresentationTimeStamp = -12782;
LABEL_479:
          v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          v58 = v215;
          FigSignalErrorAt();
          goto LABEL_487;
        }
        v119 = v125(v124, (char *)&v269 + 1, &v269, &v263, &v268);
        if (v119)
          goto LABEL_478;
        if (count == 1)
        {
          v214 = v263;
        }
        else if (v214 >= 1 && !v209)
        {
          v126 = v214;
          if (v214 <= v263)
            v126 = v263;
          v214 = v126;
        }
        if (HIBYTE(v269))
        {
          if (videoMentorSyncFrameIsOpenGOP((uint64_t)v271))
          {
            *(_OWORD *)&time2.start.value = v241;
            time2.start.epoch = v239;
            *(_OWORD *)&lhs.value = v241;
            lhs.epoch = v239;
            v127 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (!v127)
              goto LABEL_484;
            v128 = v127(v219, &time2);
            if (v128)
            {
LABEL_520:
              CursorForPresentationTimeStamp = v128;
              goto LABEL_485;
            }
            v129 = v271;
            v130 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (!v130)
            {
LABEL_484:
              CursorForPresentationTimeStamp = -12782;
              goto LABEL_485;
            }
            v128 = v130(v129, &lhs);
            if (v128)
              goto LABEL_520;
            rhs = time2.start;
            v274 = lhs;
            v131 = CMTimeCompare(&rhs, &v274);
            v123 = 0;
            if ((v131 & 0x80000000) == 0)
            {
              v122 = v220;
              if (v254)
                goto LABEL_304;
              rhs = lhs;
              v132 = v271;
              v133 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (!v133)
              {
                CursorForPresentationTimeStamp = -12782;
LABEL_506:
                FigSignalErrorAt();
                v21 = cf;
                goto LABEL_482;
              }
              v134 = v133(v132, &v254);
              if (v134)
              {
                CursorForPresentationTimeStamp = v134;
                goto LABEL_506;
              }
              v135 = 0;
              while (1)
              {
                v274 = rhs;
                v261 = lhs;
                if (CMTimeCompare(&v274, &v261) > 0)
                  break;
                v136 = v254;
                v137 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                v138 = v219 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
                if (v137 != v138)
                  break;
                v139 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(v137 + 32);
                if (!v139 || v139(v136, v219) != -1)
                  break;
                v140 = v254;
                v141 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 168);
                if (!v141)
                  goto LABEL_481;
                v142 = v141(v140, 1, &v266);
                if (v142)
                {
LABEL_518:
                  CursorForPresentationTimeStamp = v142;
LABEL_482:
                  v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
                  LODWORD(v30) = v226;
LABEL_486:
                  v58 = v215;
LABEL_487:
                  v29 = v271;
                  goto LABEL_109;
                }
                if (v266 != 1)
                  break;
                v143 = v254;
                v144 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
                if (!v144)
                {
LABEL_481:
                  CursorForPresentationTimeStamp = -12782;
                  goto LABEL_482;
                }
                ++v135;
                v142 = v144(v143, &rhs);
                if (v142)
                  goto LABEL_518;
              }
              if (v135 <= 1 && v254)
              {
                CFRelease(v254);
                v254 = 0;
              }
LABEL_296:
              v123 = 1;
            }
LABEL_297:
            v122 = v220;
            goto LABEL_304;
          }
          if (HIBYTE(v269))
            goto LABEL_296;
        }
        v123 = 0;
        if (!(_BYTE)v269)
          goto LABEL_297;
        v122 = v220;
        if (v214 >= 1)
        {
          if (!v254)
          {
            v145 = v271;
            v146 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (!v146)
              goto LABEL_501;
            v147 = v146(v145, &v254);
            if (v147)
              goto LABEL_502;
          }
          v123 = ++v208 >= v214;
          v209 = 1;
        }
LABEL_304:
        v220 = v122;
        v150 = *(_QWORD *)(a1 + 528);
        if (v150)
        {
          v216 = v123;
          v151 = v271;
          v152 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v151)
            v153 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          else
            v153 = 0;
          if (v152 == v153
            && (v157 = *(uint64_t (**)(uint64_t, CFTypeRef))(v152 + 32)) != 0
            && v157(v150, v151))
          {
            LODWORD(v30) = v226;
          }
          else
          {
            v154 = *(_QWORD *)(a1 + 528);
            v155 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v219)
              v156 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            else
              v156 = 0;
            LODWORD(v30) = v226;
            if (v155 == v156 && (v159 = *(uint64_t (**)(uint64_t, CFTypeRef))(v155 + 32)) != 0)
              v158 = v159(v154, v219);
            else
              v158 = 0;
            v160 = v218;
            if (v158)
              v160 = 1;
            v218 = v160;
            v161 = v217;
            if (v158)
              v161 = v222;
            v217 = v161;
          }
          v123 = v216;
        }
        else
        {
          LODWORD(v30) = v226;
        }
        if (v123)
          goto LABEL_335;
        v162 = v271;
        v163 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                       + 168);
        if (!v163)
          goto LABEL_474;
        v115 = v163(v162, -1, &v266);
        if (v115)
          goto LABEL_475;
        if (v266 != -1)
          break;
        if (*(_BYTE *)(a1 + 116))
        {
          CursorForPresentationTimeStamp = -1;
          goto LABEL_485;
        }
        v164 = v222;
        if (!v268)
          v164 = v222 + 1;
        v222 = v164;
      }
      FigSignalErrorAt();
LABEL_335:
      if (v235)
      {
        if (v235 == 1)
        {
          v166 = *(_QWORD *)(a1 + 24);
          v167 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          if (v167)
            v167(v166);
          videoMentorResetSavedListAndEnqueueMarker(a1);
          *(_DWORD *)(a1 + 544) = -2;
          v168 = *(const void **)(a1 + 528);
          if (v168)
          {
            CFRelease(v168);
            *(_QWORD *)(a1 + 528) = 0;
          }
          v169 = *(const void **)(a1 + 536);
          if (v169)
          {
            CFRelease(v169);
            *(_QWORD *)(a1 + 536) = 0;
          }
          *v206 = v241;
          *(_QWORD *)(a1 + 576) = v239;
        }
        goto LABEL_349;
      }
      if (!(_BYTE)v218)
        goto LABEL_349;
      if (v271)
      {
        CFRelease(v271);
        v271 = 0;
      }
      v199 = *(_QWORD *)(a1 + 528);
      v200 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v200)
        goto LABEL_501;
      v147 = v200(v199, &v271);
      if (v147)
        goto LABEL_502;
      v201 = v271;
      v202 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (!v202)
      {
LABEL_501:
        CursorForPresentationTimeStamp = -12782;
LABEL_503:
        FigSignalErrorAt();
        v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        LODWORD(v30) = v226;
        v21 = cf;
        goto LABEL_486;
      }
      v147 = v202(v201, 1, &v266);
      if (v147)
      {
LABEL_502:
        CursorForPresentationTimeStamp = v147;
        goto LABEL_503;
      }
      LODWORD(v30) = v226;
      v21 = cf;
      if (v266 != 1 && v271)
      {
        CFRelease(v271);
        v271 = 0;
      }
LABEL_349:
      v29 = v271;
LABEL_350:
      if (Mutable)
      {
        if (CFArrayGetCount(Mutable) >= 1)
        {
          lhs = *a5;
          rhs = *a3;
          v221 = CFArrayGetCount(Mutable);
          if (v221 >= 1)
          {
            v170 = 0;
            while (1)
            {
              ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(Mutable, v170);
              v223 = v170;
              v171 = CFArrayGetValueAtIndex(v25, v170);
              time1[0] = lhs;
              time2.start = rhs;
              v172 = videoMentorThreadResendCachedSampleBuffer(a1, v171, ValueAtIndex, 0, v228, 1, a12, (__int128 *)&time1[0].value, (__int128 *)&time2.start.value, MEMORY[0x1E0CA2E18], v21);
              if (v172)
                break;
              v228 = 0;
              ++v170;
              if (v221 == v223 + 1)
              {
                v228 = 0;
                goto LABEL_357;
              }
            }
            CursorForPresentationTimeStamp = v172;
LABEL_489:
            v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
LABEL_500:
            v58 = v215;
            goto LABEL_109;
          }
        }
LABEL_357:
        CFRelease(Mutable);
      }
      if (v25)
        CFRelease(v25);
      v173 = v254;
      if (v254)
      {
        v174 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v174)
        {
          v175 = v173;
          goto LABEL_365;
        }
LABEL_495:
        CursorForPresentationTimeStamp = -12782;
LABEL_497:
        FigSignalErrorAt();
LABEL_498:
        Mutable = 0;
        v25 = 0;
LABEL_499:
        v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        LODWORD(v30) = v226;
        v21 = cf;
        goto LABEL_500;
      }
      v174 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v174)
        goto LABEL_495;
      v175 = v29;
LABEL_365:
      v176 = v174(v175, &v253);
      if (v176)
        goto LABEL_496;
      v177 = v253;
      v178 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (!v178)
        goto LABEL_495;
      v176 = v178(v177, -1, &v251);
      if (v176)
      {
LABEL_496:
        CursorForPresentationTimeStamp = v176;
        goto LABEL_497;
      }
      v179 = v210;
      if (v251 != -1 && v253)
      {
        CFRelease(v253);
        v253 = 0;
      }
      if (v59 && v205 >= count)
      {
        count = v205;
      }
      else
      {
        free(v59);
        v59 = (CMTime *)malloc_type_calloc(count, 0x20uLL, 0x10E004092DD265EuLL);
        if (!v59)
        {
          CursorForPresentationTimeStamp = FigSignalErrorAt();
          Mutable = 0;
          v25 = 0;
          goto LABEL_489;
        }
      }
      if (videoMentorSyncFrameIsOpenGOP((uint64_t)v29))
      {
        v180 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v180)
        {
          v181 = v180(v29, &v246);
          if (!v181)
            goto LABEL_378;
          CursorForPresentationTimeStamp = v181;
          v58 = 0;
LABEL_107:
          Mutable = 0;
          v25 = 0;
        }
        else
        {
          v58 = 0;
          Mutable = 0;
          v25 = 0;
          CursorForPresentationTimeStamp = -12782;
        }
LABEL_108:
        v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        goto LABEL_109;
      }
LABEL_378:
      *v206 = v241;
      *(_QWORD *)(a1 + 576) = v239;
      if (v254)
        v182 = v254;
      else
        v182 = v29;
      time1[0].value = v272;
      *(_QWORD *)&time1[0].timescale = __PAIR64__(v210, v273);
      time1[0].epoch = v207;
      *(_OWORD *)&time2.start.value = *(_OWORD *)&a5->value;
      time2.start.epoch = a5->epoch;
      videoMentorThrottlingStateHandleDiscontinuity((uint64_t)value, (uint64_t)time1, (uint64_t)v182, (uint64_t)&time2);
      LOBYTE(v261.value) = 0;
      memset(&time2, 0, 24);
      v238 = *MEMORY[0x1E0CA2E68];
      *(_OWORD *)&lhs.value = *MEMORY[0x1E0CA2E68];
      v224 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      lhs.epoch = v224;
      v183 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v183)
      {
        v215 = 0;
LABEL_508:
        CursorForPresentationTimeStamp = -12782;
LABEL_509:
        FigSignalErrorAt();
        v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        LODWORD(v30) = v226;
        v21 = cf;
LABEL_510:
        v58 = v215;
LABEL_511:
        Mutable = 0;
        v25 = 0;
        goto LABEL_109;
      }
      v215 = 0;
      while (2)
      {
        v184 = v183(v29, &time2);
        if (v184)
        {
LABEL_483:
          CursorForPresentationTimeStamp = v184;
          goto LABEL_509;
        }
        v186 = v212;
        v185 = v213;
        v187 = v211;
        if ((time2.start.flags & 0x1D) != 1)
          goto LABEL_490;
        if ((v246.flags & 1) != 0)
        {
          time1[0] = time2.start;
          rhs = v246;
          v189 = CMTimeCompare(time1, &rhs);
          if (v189 < 0)
          {
            v188 = 0;
            v186 = v212;
            v185 = v213;
            v187 = v211;
          }
          else
          {
            v187 = v211;
            v186 = v212;
            if (v189)
            {
              *(_OWORD *)&v246.value = v241;
              v246.epoch = v239;
            }
            v188 = 1;
            v185 = v213;
          }
        }
        else
        {
          v188 = 1;
        }
        if (v254)
        {
          if (FigSampleCursorCompareInDecodeOrder((uint64_t)v29, (uint64_t)v254))
          {
            v190 = 0;
            goto LABEL_403;
          }
          v186 = v212;
          v185 = v213;
          v187 = v211;
          if (v254)
          {
            CFRelease(v254);
            v187 = v211;
            v186 = v212;
            v185 = v213;
            v254 = 0;
          }
        }
        *(_OWORD *)&time1[0].value = v185;
        *(_OWORD *)&time1[0].epoch = v186;
        *(_OWORD *)&time1[1].timescale = v187;
        CursorPTSRange = videoMentorGetCursorPTSRange(v29, time1);
        if (CursorPTSRange)
        {
          CursorForPresentationTimeStamp = CursorPTSRange;
          v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          LODWORD(v30) = v226;
          goto LABEL_510;
        }
        if ((a5->flags & 0x1D) != 1)
          goto LABEL_401;
        rhs = time1[1];
        *(_OWORD *)&v274.value = v238;
        v274.epoch = v224;
        if (!CMTimeCompare(&rhs, &v274))
        {
          rhs = time2.start;
          v274 = *a5;
          if (CMTimeCompare(&rhs, &v274) < 0)
            goto LABEL_420;
LABEL_401:
          rhs = start;
          v274 = time2.start;
          v190 = CMTimeCompare(&rhs, &v274) > 0;
          goto LABEL_402;
        }
        rhs = time2.start;
        v274 = time1[1];
        CMTimeAdd(&v244, &rhs, &v274);
        rhs = *a5;
        if (CMTimeCompare(&v244, &rhs) >= 1)
          goto LABEL_401;
LABEL_420:
        v190 = 0;
LABEL_402:
        v179 = v210;
LABEL_403:
        if ((v188 & 1) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72))
          {
            LOBYTE(time1[0].value) = 0;
            v192 = *(uint64_t (**)(CFTypeRef, CMTime *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 72);
            if (!v192)
              goto LABEL_508;
            v184 = v192(v29, time1, 0, 0);
            LODWORD(v30) = v226;
            if (v184)
              goto LABEL_483;
            v193 = LOBYTE(time1[0].value) - 66;
            if (v193 > 0xE || ((1 << v193) & 0x4081) == 0)
            {
LABEL_490:
              CursorForPresentationTimeStamp = FigSignalErrorAt();
              v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
              goto LABEL_510;
            }
            LOBYTE(v261.value) = LOBYTE(time1[0].value) == 66;
          }
          else
          {
            v194 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 64);
            if (!v194)
              goto LABEL_508;
            v184 = v194(v29, 0, 0, 0, &v261);
            LODWORD(v30) = v226;
            if (v184)
              goto LABEL_483;
          }
        }
        else
        {
          LOBYTE(v261.value) = 1;
          LODWORD(v30) = v226;
        }
        if (v190)
        {
          if ((v210 & 0x1D) == 1)
          {
            time1[0].value = v272;
            *(_QWORD *)&time1[0].timescale = __PAIR64__(v179, v273);
            time1[0].epoch = v207;
            *(_OWORD *)&rhs.value = v238;
            rhs.epoch = v224;
            if (CMTimeCompare(time1, &rhs) >= 1)
            {
              *(_OWORD *)&time1[0].value = v241;
              time1[0].epoch = v239;
              rhs.value = v272;
              rhs.timescale = v273;
              rhs.flags = v179;
              rhs.epoch = v207;
              v274 = v247;
              videoMentorThrottleDroppableFrames((uint64_t)value, (uint64_t)v29, &rhs, &v274);
              if (videoMentorPopCursorFromSelectedCursors((uint64_t)value, (uint64_t)v29, (uint64_t)time1))
              {
                rhs = time1[0];
                v274 = time2.start;
                CMTimeSubtract(&lhs, &rhs, &v274);
                v190 = 1;
              }
              else
              {
                v190 = 0;
                ++*(_DWORD *)(a1 + 952);
              }
              v179 = v210;
              goto LABEL_423;
            }
          }
          v195 = 1;
          v190 = 1;
LABEL_425:
          time1[0] = *a5;
          v196 = (uint64_t)v59 + 32 * v215;
          rhs = *a3;
          v274 = lhs;
          SampleBuffer = videoMentorThreadCreateSampleBuffer(a1, (uint64_t)v29, !v195, a12, (__int128 *)&time1[0].value, (__int128 *)&rhs.value, (__int128 *)&v274.value, 1, (uint64_t)v21, v196);
          if (SampleBuffer)
          {
            CursorForPresentationTimeStamp = SampleBuffer;
            v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
            LODWORD(v30) = v226;
            v58 = v215;
            goto LABEL_511;
          }
          *(_BYTE *)(v196 + 28) = v261.value;
          *(_BYTE *)(v196 + 29) = v190;
          *(_BYTE *)(v196 + 30) = 0;
          *(_DWORD *)(v196 + 24) = 0;
          ++v215;
          if (v190)
          {
            *v206 = *(_OWORD *)&time2.start.value;
            *(_QWORD *)(a1 + 576) = time2.start.epoch;
          }
          LODWORD(v30) = v226;
          v179 = v210;
        }
        else
        {
LABEL_423:
          v195 = v190;
          if (v190 || !LOBYTE(v261.value))
            goto LABEL_425;
        }
        v198 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                       + 168);
        if (!v198)
          goto LABEL_508;
        v184 = v198(v29, 1, &v251);
        if (v184)
          goto LABEL_483;
        if (v251 != 1 || FigSampleCursorCompareInDecodeOrder((uint64_t)v29, (uint64_t)v260) == 1)
          goto LABEL_446;
        if (v215 != count)
        {
          LOBYTE(v261.value) = 0;
          memset(&time2, 0, 24);
          *(_OWORD *)&lhs.value = v238;
          lhs.epoch = v224;
          v183 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (!v183)
            goto LABEL_508;
          continue;
        }
        break;
      }
      FigSignalErrorAt();
      v215 = count;
LABEL_446:
      if ((a7 & 0x80000000) == 0)
        videoMentorThreadReduceReversedGroupToSatisfyPassLimit(v59, v215, a6, a7 + 1, v228);
      v203 = videoMentorThreadSendReversedGroup(a1, (uint64_t)v59, v215, a6, v228, a12, cf, a13, (uint64_t)&v248);
      if (v203)
      {
        CursorForPresentationTimeStamp = v203;
        goto LABEL_498;
      }
      if (v29)
        CFRelease(v29);
      if (v254)
      {
        CFRelease(v254);
        v254 = 0;
      }
      videoMentorThreadReleaseSampleBuffersInReversalArray((uint64_t)v59, v215);
      if (v260)
        CFRelease(v260);
      v100 = (__CFArray *)v253;
      v260 = v253;
      v253 = 0;
      if (!v260)
      {
        v99 = 0;
        LODWORD(v30) = v226;
        v21 = cf;
        goto LABEL_202;
      }
      if (v259)
        v204 = FigSampleCursorCompareInDecodeOrder((uint64_t)v259, (uint64_t)v100);
      v235 = 0;
      v25 = 0;
      Mutable = 0;
      v228 = 0;
      v99 = 0;
      v100 = 0;
      v205 = count;
      v111 = a1 + 320;
      LODWORD(v30) = v226;
      v21 = cf;
      v112 = (CMTime *)(a1 + 344);
      if (v204 == 1)
        goto LABEL_202;
    }
  }
  CursorForPresentationTimeStamp = 0;
  LOBYTE(v261.value) = 0;
  if (v84 == 1)
    goto LABEL_469;
LABEL_170:
  v227 = v86;
  valuea = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
  v242 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v240 = *MEMORY[0x1E0CA2E18];
  v236 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  while (2)
  {
    LOBYTE(v248) = 0;
    memset(time1, 0, 24);
    memset(&time2, 0, 24);
    v274.value = v240;
    v274.timescale = v236;
    v87 = v260;
    v88 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v88)
    {
LABEL_460:
      CursorForPresentationTimeStamp = -12782;
      goto LABEL_462;
    }
    v89 = v88(v87, &v252);
    if (v89)
      goto LABEL_461;
    if ((v252.flags & 0x1D) != 1)
    {
LABEL_463:
      v96 = FigSignalErrorAt();
LABEL_464:
      CursorForPresentationTimeStamp = v96;
      goto LABEL_465;
    }
    v90 = v260;
    v91 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v91)
    {
      v92 = v91(v90, time1);
      if (v92)
      {
        CursorForPresentationTimeStamp = v92;
        if (v92 != -12782)
          goto LABEL_462;
        goto LABEL_177;
      }
      if ((time1[0].flags & 0x1D) != 1)
        goto LABEL_463;
    }
    else
    {
LABEL_177:
      *(_OWORD *)&time1[0].value = *MEMORY[0x1E0CA2E68];
      time1[0].epoch = v242;
    }
    lhs = v252;
    rhs = time1[0];
    CMTimeAdd(&time2.start, &lhs, &rhs);
    if (v259 && (lhs = *a5, rhs = time2.start, CMTimeCompare(&lhs, &rhs) > 0))
    {
      LOBYTE(v93) = 0;
    }
    else
    {
      lhs = v252;
      rhs = start;
      v93 = CMTimeCompare(&lhs, &rhs) >> 31;
    }
    LOBYTE(v248) = v93;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 264));
    v274.value = *(_QWORD *)(a1 + 272);
    v274.timescale = *(_DWORD *)(a1 + 280);
    v94 = *(_DWORD *)(a1 + 284);
    v95 = *(_QWORD *)(a1 + 288);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 264));
    if ((v94 & 0x1D) != 1)
    {
      v274.value = *MEMORY[0x1E0CA2E68];
      v274.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
      v94 = valuea;
      v95 = v242;
    }
    lhs = v252;
    rhs.value = v274.value;
    rhs.timescale = v274.timescale;
    rhs.flags = v94;
    rhs.epoch = v95;
    v96 = videoMentorSimulateIFramesOnly((uint64_t)v260, &lhs, &rhs, (CMTime *)(a1 + 560), -1, &v248, &v261);
    if (v96)
      goto LABEL_464;
    if ((_BYTE)v248)
    {
      lhs = *a5;
      rhs = *a3;
      v96 = videoMentorThreadGenerateAndEnqueueFrame(a1, v260, 0, 0, v227, LOBYTE(v261.value), 1, 1, a12, (uint64_t)&lhs, (uint64_t)&rhs, MEMORY[0x1E0CA2E18], cf);
      v227 = 0;
      if (v96)
        goto LABEL_464;
    }
    v97 = v260;
    v98 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (!v98)
      goto LABEL_460;
    v89 = v98(v97, -1, &v251);
    if (v89)
    {
LABEL_461:
      CursorForPresentationTimeStamp = v89;
LABEL_462:
      FigSignalErrorAt();
LABEL_465:
      v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      v29 = 0;
      v58 = 0;
      v59 = 0;
      goto LABEL_109;
    }
    if (v251 == -1)
    {
      if (v259)
        v85 = FigSampleCursorCompareInDecodeOrder((uint64_t)v259, (uint64_t)v260);
      if (v85 == 1)
      {
        CursorForPresentationTimeStamp = 0;
        goto LABEL_469;
      }
      continue;
    }
    break;
  }
  CursorForPresentationTimeStamp = 0;
  if (v85 && v259)
    CursorForPresentationTimeStamp = FigSignalErrorAt();
LABEL_469:
  v58 = 0;
  v59 = 0;
LABEL_470:
  v74 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (a15 && !CursorForPresentationTimeStamp)
  {
    CursorForPresentationTimeStamp = audioMentorEnqueueBufferConsumedMarker(a1, a15);
    v243 = 0;
  }
  videoMentorEnqueueDrainAfterDecodingMarker(a1);
  v29 = 0;
  ++*(_DWORD *)(a1 + 936);
LABEL_109:
  if (*(_BYTE *)(a1 + 492))
  {
    videoMentorPostCollectorCoherenceConduitNotification(a1);
    *(_BYTE *)(a1 + 492) = 0;
  }
  if (a13 && (CursorForPresentationTimeStamp + 1) <= 1)
    videoMentorPostMinAndMaxUpcomingOutputPTS(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
  videoMentorThreadFinishPreroll(a1, 0, v21);
  if (*v74 == 1)
    kdebug_trace();
  if (!*(_BYTE *)a1)
  {
    v77 = kMentorNotification_StoppingDueToCompletion;
    if (CursorForPresentationTimeStamp)
      v77 = kMentorNotification_StoppingDueToError;
    if (CursorForPresentationTimeStamp == -1)
      v78 = 0;
    else
      v78 = CursorForPresentationTimeStamp;
    if (CursorForPresentationTimeStamp == -1)
      v77 = kMentorNotification_ResettingDueToModeSwitch;
    v79 = FigMentorNotificationPayloadCreate((uint64_t)*v77, v21, v78, *(unsigned __int8 *)(a1 + 520), v243, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v79)
      CFRelease(v79);
  }
  if (v260)
  {
    CFRelease(v260);
    v260 = 0;
  }
  if ((_DWORD)v30 && v259)
  {
    CFRelease(v259);
    v259 = 0;
  }
  if (v29)
    CFRelease(v29);
  if (v258)
  {
    CFRelease(v258);
    v258 = 0;
  }
  if (v257)
  {
    CFRelease(v257);
    v257 = 0;
  }
  if (v255)
  {
    CFRelease(v255);
    v255 = 0;
  }
  if (v254)
  {
    CFRelease(v254);
    v254 = 0;
  }
  if (v253)
  {
    CFRelease(v253);
    v253 = 0;
  }
  videoMentorThreadReleaseSampleBuffersInReversalArray((uint64_t)v59, v58);
  videoMentorThrottlingStateFree(a1 + 584);
  free(v59);
  v80 = *(const void **)(a1 + 512);
  if (v80)
  {
    CFRelease(v80);
    *(_QWORD *)(a1 + 512) = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v25)
    CFRelease(v25);
}

uint64_t videoMentorGetCursorPTSRange(const void *a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  unsigned int (*v6)(const void *, _OWORD *);
  uint64_t FigBaseObject;
  unsigned int (*v8)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **);
  BOOL v9;
  uint64_t PresentationTimeRange;
  __int128 v11;
  CMTimeRange v13;
  const __CFDictionary *v14;

  v14 = 0;
  v2 = MEMORY[0x1E0CA2E40];
  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *a2 = *MEMORY[0x1E0CA2E40];
  a2[1] = v3;
  a2[2] = *(_OWORD *)(v2 + 32);
  if (!a1)
    return FigSignalErrorAt();
  v6 = *(unsigned int (**)(const void *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 232);
  if (v6 && !v6(a1, a2))
  {
    PresentationTimeRange = 0;
  }
  else
  {
    FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
    v8 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v8
      || (!v8(FigBaseObject, CFSTR("PresentationTimeRange"), *MEMORY[0x1E0C9AE00], &v14) ? (v9 = v14 == 0) : (v9 = 1),
          v9))
    {
      PresentationTimeRange = FigSampleCursorUtilityGetPresentationTimeRange(a1, a2);
    }
    else
    {
      CMTimeRangeMakeFromDictionary(&v13, v14);
      PresentationTimeRange = 0;
      v11 = *(_OWORD *)&v13.start.epoch;
      *a2 = *(_OWORD *)&v13.start.value;
      a2[1] = v11;
      a2[2] = *(_OWORD *)&v13.duration.timescale;
    }
  }
  if (v14)
    CFRelease(v14);
  return PresentationTimeRange;
}

opaqueCMSampleBuffer *videoMentorGetCachedVideoFrameForCursor(_QWORD *a1, const void *a2, CFArrayRef theArray, uint64_t a4)
{
  __int128 v4;
  CMTimeEpoch v5;
  CFIndex Count;
  uint64_t v11;
  void (*v12)(_QWORD, uint64_t, _QWORD, CMTime *, CMTime *);
  CFIndex i;
  opaqueCMSampleBuffer *ValueAtIndex;
  opaqueCMSampleBuffer *v15;
  CFTypeID v16;
  __int128 v18;
  CMTime time2;
  CMTime time1;
  CMTimeRange range;
  CMTime v22;
  CMTime start;
  CMTimeRange v24;

  v4 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v24.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v24.start.epoch = v4;
  *(_OWORD *)&v24.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v18 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v22.value = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v22.epoch = v5;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v11 = Count;
      if (!videoMentorGetCursorPTSRange(a2, &v24))
      {
        start = v24.start;
        range = v24;
        CMTimeRangeGetEnd(&v22, &range);
        MEMORY[0x19402EEEC](a1[10]);
        v12 = (void (*)(_QWORD, uint64_t, _QWORD, CMTime *, CMTime *))a1[8];
        if (v12)
          v12(a1[9], a4, 0, &start, &v22);
        MEMORY[0x19402EF04](a1[10]);
        if (v11 >= 1)
        {
          for (i = 0; v11 != i; ++i)
          {
            ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(theArray, i);
            *(_OWORD *)&range.start.value = v18;
            range.start.epoch = v5;
            if (!ValueAtIndex)
              break;
            v15 = ValueAtIndex;
            v16 = CFGetTypeID(ValueAtIndex);
            if (v16 != CMSampleBufferGetTypeID())
              break;
            CMSampleBufferGetPresentationTimeStamp(&range.start, v15);
            time1 = range.start;
            time2 = start;
            if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
            {
              time1 = range.start;
              time2 = v22;
              if (CMTimeCompare(&time1, &time2) < 0)
                return v15;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t videoMentorDependencyStateStartNewOrder(_QWORD *a1, uint64_t *a2)
{
  const __CFAllocator *v4;
  uint64_t result;
  uint64_t v6;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;

  videoMentorDependencyStateReset((uint64_t)a2);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = videoMentorFrameNodeCreate(a1, *MEMORY[0x1E0C9AE00], -1, 0, a2);
  if (!(_DWORD)result)
  {
    v6 = *a2;
    *(_BYTE *)(v6 + 64) = 0;
    *(_QWORD *)(v6 + 68) = 0x200000001;
    *(_DWORD *)(v6 + 76) = 2;
    Mutable = CFDictionaryCreateMutable(v4, 0, &kVideoMentorFrameNodeCursorKeyCallbacks, MEMORY[0x1E0C9B3A0]);
    a2[1] = (uint64_t)Mutable;
    if (Mutable
      && (v8 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]), (a2[2] = (uint64_t)v8) != 0)
      && (v9 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]), (a2[8] = (uint64_t)v9) != 0)
      && (v10 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]), (a2[12] = (uint64_t)v10) != 0))
    {
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t videoMentorDependencyStateCopyCursorForDecodeWalk(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, CMTime *a7, __int128 *a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, char a14, uint64_t *a15, _BYTE *a16, _BYTE *a17, char *a18, _BYTE *a19, _QWORD *a20)
{
  _BYTE *v25;
  __int128 v26;
  int32_t v27;
  unsigned int v28;
  _BOOL4 v29;
  _BOOL4 v31;
  const void *v32;
  _BOOL4 v33;
  __int128 v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  unsigned int v39;
  uint64_t (*v40)(const void *, CFTypeRef *);
  uint64_t refreshed;
  CFTypeRef v42;
  uint64_t v43;
  int32_t v44;
  uint64_t (*v45)(CFTypeRef, CMTimeRange *);
  BOOL v46;
  CFTypeRef v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  CFTypeRef v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, CFTypeRef);
  uint64_t (*v56)(const void *, uint64_t);
  CFTypeRef v57;
  uint64_t (*v58)(CFTypeRef, uint64_t);
  CFTypeRef v59;
  int v60;
  _BOOL4 v61;
  CFTypeRef v62;
  uint64_t (*v63)(const void *, CMTime *);
  uint64_t (*v64)(CFTypeRef, CFTypeRef *);
  uint64_t NodeForCursor;
  CFTypeRef v66;
  CFTypeRef v67;
  uint64_t v68;
  uint64_t (*v69)(CFTypeRef, CFTypeRef);
  uint64_t v70;
  CFTypeRef v71;
  uint64_t (*v72)(CFTypeRef, uint64_t, uint64_t *);
  CFTypeRef v73;
  uint64_t v74;
  void (*v75)(CFTypeRef, CFTypeRef);
  CFSetRef *p_theSet;
  uint64_t v77;
  CFTypeRef v78;
  uint64_t (*v79)(CFTypeRef, _BYTE *);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, const void *);
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t, CMTime *);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, const void *);
  _BYTE *v91;
  CFTypeRef v92;
  uint64_t (*v93)(CFTypeRef, CFTypeRef *);
  int v94;
  CFTypeRef v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(CFTypeRef, const void *);
  uint64_t v99;
  _BYTE *v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  CFIndex Count;
  CFIndex v106;
  CFIndex i;
  _DWORD *ValueAtIndex;
  CFIndex v109;
  CFIndex v110;
  CFIndex v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  CFTypeRef v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  BOOL v122;
  uint64_t (*v123)(CFTypeRef, uint64_t);
  uint64_t v124;
  __int128 v125;
  BOOL v126;
  CFTypeRef v127;
  uint64_t (*v128)(CFTypeRef, uint64_t, CMTime *);
  _BOOL4 v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t);
  uint64_t v134;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  _BOOL4 v142;
  uint64_t v143;
  void (*v144)(uint64_t);
  const void *v145;
  const void *v146;
  uint64_t v147;
  CFTypeRef v148;
  BOOL v149;
  char v150;
  uint64_t v151;
  uint64_t (*v152)(uint64_t, CFTypeRef *);
  CFTypeRef v153;
  uint64_t (*v154)(CFTypeRef, uint64_t, CMTimeRange *);
  CFTypeRef v155;
  uint64_t (*v156)(CFTypeRef, CFTypeRef *);
  int v158;
  int v159;
  const __CFAllocator *v160;
  uint64_t v161;
  int v162;
  int v163;
  _BOOL4 v164;
  CFTypeRef v166;
  int v167;
  __int128 v170;
  uint64_t v171;
  CMTime v172;
  CMTimeRange v173;
  uint64_t v174;
  CFTypeRef v175;
  CFTypeRef v176;
  CFSetRef theSet;
  CFTypeRef v178;
  CFTypeRef v179;
  CFTypeRef v180;
  CMTime v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  CFTypeRef v185;
  CFTypeRef cf;
  _BYTE time2[28];
  __int16 v188;
  int v189;
  CMTimeRange time1[2];
  uint64_t v191;

  v25 = a16;
  v191 = *MEMORY[0x1E0C80C00];
  v179 = 0;
  v180 = 0;
  theSet = 0;
  v178 = 0;
  v175 = 0;
  v176 = 0;
  v174 = 0;
  v26 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v173.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v173.start.epoch = v26;
  *(_OWORD *)&v173.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  if ((*((_DWORD *)a15 + 3) & 0x1D) == 1)
  {
    *(_OWORD *)&time1[0].start.value = *MEMORY[0x1E0CA2E68];
    time1[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *(_OWORD *)time2 = *(_OWORD *)a15;
    *(_QWORD *)&time2[16] = a15[2];
    v27 = CMTimeCompare(&time1[0].start, (CMTime *)time2);
    v28 = v27 >> 31;
    v25 = a16;
    v29 = v27 >= 0;
  }
  else
  {
    v28 = 0;
    v29 = 1;
  }
  v163 = a5;
  v31 = a5 != 1 && *(_QWORD *)(a1 + 528) != 0;
  if (v25)
    *v25 = 0;
  if (a17)
    *a17 = 0;
  if (a18)
    *a18 = 0;
  if (a19)
    *a19 = 1;
  if (a20)
    *a20 = 0;
  v32 = *(const void **)(a1 + 536);
  if (v32)
    videoMentorGetCursorPTSRange(v32, &v173);
  time1[0] = v173;
  *(_OWORD *)time2 = *(_OWORD *)a6;
  *(_QWORD *)&time2[16] = *(_QWORD *)(a6 + 16);
  v33 = CMTimeRangeContainsTime(time1, (CMTime *)time2)
     && ((~v173.duration.flags & 5) != 0 || v173.start.epoch == *(_QWORD *)(a6 + 16));
  *(_OWORD *)time2 = *(_OWORD *)a6;
  *(_QWORD *)&time2[16] = *(_QWORD *)(a6 + 16);
  videoMentorRemapTime((_QWORD *)a1, a4, 0, (__int128 *)time2, (uint64_t)time1);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)&time1[0].start.value;
  *(_QWORD *)(a2 + 52) = time1[0].start.epoch;
  v34 = *a8;
  *(_QWORD *)(a2 + 120) = *((_QWORD *)a8 + 2);
  *(_OWORD *)(a2 + 104) = v34;
  *(_OWORD *)time2 = *a8;
  *(_QWORD *)&time2[16] = *((_QWORD *)a8 + 2);
  videoMentorRemapTime((_QWORD *)a1, a4, 0, (__int128 *)time2, (uint64_t)time1);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)&time1[0].start.value;
  *(_QWORD *)(a2 + 144) = time1[0].start.epoch;
  v35 = v29 && v31;
  v36 = a3 == 1 && v35 && v33;
  v164 = v33;
  if (a3 == 1 && v35)
  {
    v181 = *(CMTime *)a6;
    v37 = a1 + 552;
    while (1)
    {
      v37 = *(_QWORD *)v37;
      if (!v37)
        break;
      v38 = *(_OWORD *)(v37 + 32);
      *(_OWORD *)&time1[0].start.value = *(_OWORD *)(v37 + 16);
      *(_OWORD *)&time1[0].start.epoch = v38;
      *(_OWORD *)&time1[0].duration.timescale = *(_OWORD *)(v37 + 48);
      *(CMTime *)time2 = v181;
      if (CMTimeRangeContainsTime(time1, (CMTime *)time2))
      {
        v36 = 1;
        break;
      }
    }
  }
  v39 = v28;
  if (v28)
  {
    v40 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v40)
      goto LABEL_301;
    refreshed = v40(a13, &v176);
    if ((_DWORD)refreshed)
      goto LABEL_250;
    v42 = v176;
    v43 = *a15;
    v44 = *((_DWORD *)a15 + 2);
    memset(time2, 0, 24);
    CMTimeMake((CMTime *)time2, -v43, v44);
    v181 = *(CMTime *)time2;
    v45 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (!v45)
      goto LABEL_301;
    time1[0].start = v181;
    refreshed = v45(v42, time1);
    if ((_DWORD)refreshed)
      v46 = (_DWORD)refreshed == -12840;
    else
      v46 = 1;
    if (!v46)
      goto LABEL_250;
    v47 = v176;
    v48 = a1;
    v49 = 0;
  }
  else
  {
    v48 = a1;
    v47 = a13;
    v49 = a19;
  }
  v50 = videoMentorCopySyncCursorForCursor(v48, (uint64_t)v47, &v180, v49);
  if ((_DWORD)v50)
    goto LABEL_302;
  if (v35)
  {
    v51 = *(_QWORD *)(a1 + 528);
    v52 = v180;
    v53 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v52)
      v54 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    else
      v54 = 0;
    v35 = v53 != v54 || (v55 = *(uint64_t (**)(uint64_t, CFTypeRef))(v53 + 32)) == 0 || v55(v51, v52) != -1;
  }
  v56 = *(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v56)
    goto LABEL_301;
  refreshed = v56(a13, a2 + 24);
  if ((_DWORD)refreshed)
    goto LABEL_250;
  v57 = v180;
  v58 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v58)
    goto LABEL_301;
  refreshed = v58(v57, a2 + 80);
  if ((_DWORD)refreshed)
    goto LABEL_250;
  if (a3 == 1)
  {
    v59 = CFRetain(a13);
    v179 = v59;
    v60 = a9;
    goto LABEL_102;
  }
  v61 = v35;
  v181 = *a7;
  *(_OWORD *)&time1[0].start.value = *(_OWORD *)a10;
  time1[0].start.epoch = *(_QWORD *)(a10 + 16);
  *(_OWORD *)time2 = *(_OWORD *)a11;
  *(_QWORD *)&time2[16] = *(_QWORD *)(a11 + 16);
  *(_OWORD *)&v172.value = *(_OWORD *)a12;
  v172.epoch = *(_QWORD *)(a12 + 16);
  refreshed = videoMentorDependencyStateFillRefreshGroupsUntil(a1, a2, (uint64_t)a13, a4, a9, &time1[0].start, (CMTime *)time2, &v172, 1, &v179);
  if ((_DWORD)refreshed)
    goto LABEL_250;
  v62 = v179;
  if (!v179)
  {
    if (v57)
    {
      CFRelease(v57);
      v180 = 0;
    }
LABEL_225:
    v130 = 0;
    v159 = v163;
    v91 = a17;
LABEL_227:
    v100 = a16;
    v129 = v164;
    v158 = v36;
LABEL_228:
    if (v159 == 2)
    {
      if (v158)
      {
        if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48)
          && (v132 = *(_QWORD *)(a1 + 24),
              (v133 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48)) != 0))
        {
          v134 = v133(v132);
        }
        else
        {
          v134 = 0;
        }
        if (v134 <= v130)
        {
          v138 = *(_QWORD *)(a1 + 24);
          v139 = *MEMORY[0x1E0CA25D8];
          v140 = *MEMORY[0x1E0C9AE50];
          *(_OWORD *)&time1[0].start.value = *(_OWORD *)a6;
          time1[0].start.epoch = *(_QWORD *)(a6 + 16);
          FigSampleBufferConsumerSetAttachmentOnPendingSampleBuffersInPTSRange(v138, v139, v140, MEMORY[0x1E0CA2E28], (__int128 *)&time1[0].start.value);
          v158 = 1;
          v131 = 0;
          if (a19)
            *a19 = 1;
        }
        else
        {
          v158 = 0;
          v131 = 1;
        }
        v100 = a16;
LABEL_252:
        if (v100)
          *v100 = v158;
        if (a3 == 1)
          v141 = v131;
        else
          v141 = 1;
        if (v141)
          v142 = 0;
        else
          v142 = v129;
        if (v131)
        {
          v143 = *(_QWORD *)(a1 + 24);
          v144 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          if (v144)
            v144(v143);
          videoMentorResetSavedListAndEnqueueMarker(a1);
          *(_DWORD *)(a1 + 544) = -2;
          v145 = *(const void **)(a1 + 528);
          if (v145)
          {
            CFRelease(v145);
            *(_QWORD *)(a1 + 528) = 0;
          }
          v146 = *(const void **)(a1 + 536);
          if (v146)
          {
            CFRelease(v146);
            *(_QWORD *)(a1 + 536) = 0;
          }
          v147 = MEMORY[0x1E0CA2E18];
          *(_OWORD *)(a1 + 560) = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)(a1 + 576) = *(_QWORD *)(v147 + 16);
        }
        if (v91)
          *v91 = v142;
        if (v175)
        {
          CFRelease(v175);
          v175 = 0;
        }
        if (v142)
        {
          if (a20)
          {
LABEL_274:
            v148 = 0;
            goto LABEL_275;
          }
LABEL_296:
          v50 = 0;
          goto LABEL_302;
        }
        if (a18)
        {
          if (v159)
          {
            if (v158)
              v149 = v129;
            else
              v149 = 0;
            if (v149)
            {
              *a18 = 0;
              if (!a20)
                goto LABEL_296;
              goto LABEL_289;
            }
            v150 = 1;
          }
          else
          {
            v150 = 0;
          }
          *a18 = v150;
        }
        if (!a20)
          goto LABEL_296;
        if (!v158)
        {
          v155 = v180;
          if (!v180)
            goto LABEL_274;
          v156 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v156)
            goto LABEL_301;
          refreshed = v156(v155, &v175);
          if ((_DWORD)refreshed)
            goto LABEL_250;
          v148 = v175;
          goto LABEL_275;
        }
LABEL_289:
        time1[0].start.value = 0;
        v151 = *(_QWORD *)(a1 + 528);
        v152 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v152)
          goto LABEL_301;
        refreshed = v152(v151, &v175);
        if ((_DWORD)refreshed)
          goto LABEL_250;
        v153 = v175;
        v154 = *(uint64_t (**)(CFTypeRef, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 168);
        if (!v154)
          goto LABEL_301;
        refreshed = v154(v153, 1, time1);
        if ((_DWORD)refreshed)
          goto LABEL_250;
        v148 = v175;
        if (time1[0].start.value != 1 && v175)
        {
          CFRelease(v175);
          goto LABEL_274;
        }
LABEL_275:
        v50 = 0;
        *a20 = v148;
        v175 = 0;
        goto LABEL_302;
      }
    }
    else
    {
      if (v159 != 1)
      {
        if (v159)
          v158 = 0;
        v131 = 0;
        goto LABEL_252;
      }
      v158 = 0;
    }
    v131 = 1;
    goto LABEL_252;
  }
  if (a14)
  {
    v63 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v63)
    {
LABEL_301:
      v50 = 4294954514;
      goto LABEL_302;
    }
    refreshed = v63(a13, &v181);
    if ((_DWORD)refreshed)
      goto LABEL_250;
  }
  v172 = v181;
  v170 = *a8;
  v171 = *((_QWORD *)a8 + 2);
  v185 = 0;
  cf = 0;
  v64 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v64)
  {
LABEL_94:
    v50 = 4294954514;
LABEL_95:
    v60 = a9;
    v35 = v61;
LABEL_96:
    if (cf)
      CFRelease(cf);
    goto LABEL_98;
  }
  NodeForCursor = v64(v57, &v185);
  if ((_DWORD)NodeForCursor)
  {
LABEL_316:
    v50 = NodeForCursor;
    goto LABEL_95;
  }
  v66 = 0;
  v166 = 0;
  v160 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    v67 = v185;
    v68 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v68 == *(_QWORD *)(CMBaseObjectGetVTable() + 16))
    {
      v69 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(v68 + 32);
      if (v69)
      {
        if (v69(v67, v62) == 1)
          break;
      }
    }
    v183 = 0;
    v184 = 0;
    NodeForCursor = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, a2, (uint64_t)v185, a4, 1, &v183);
    if ((_DWORD)NodeForCursor)
      goto LABEL_316;
    v70 = v183;
    if (!*(_QWORD *)(v183 + 56))
    {
      v182 = 0;
      time1[0].start = v172;
      *(_OWORD *)time2 = v170;
      *(_QWORD *)&time2[16] = v171;
      NodeForCursor = videoMentorCursorIsInPlayRange(v185, (uint64_t)time1, (CMTime *)time2, &v182);
      if ((_DWORD)NodeForCursor)
        goto LABEL_316;
      if (!v182)
      {
        if (!v166)
        {
          NodeForCursor = videoMentorRefreshGroupCreate(v160, MEMORY[0x1E0CA2E18], (uint64_t *)&cf);
          if ((_DWORD)NodeForCursor)
            goto LABEL_316;
          v66 = cf;
          *((_BYTE *)cf + 58) = 1;
        }
        videoMentorRefreshGroupAddNode((uint64_t)v66, v70);
        v166 = v66;
      }
    }
    v71 = v185;
    v72 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (!v72)
      goto LABEL_94;
    NodeForCursor = v72(v71, 1, &v184);
    if ((_DWORD)NodeForCursor)
      goto LABEL_316;
    if (v184 != 1)
    {
      v73 = v185;
      v74 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v74 == *(_QWORD *)(CMBaseObjectGetVTable() + 16))
      {
        v75 = *(void (**)(CFTypeRef, CFTypeRef))(v74 + 32);
        if (v75)
          v75(v73, v62);
      }
      break;
    }
  }
  v35 = v61;
  if (v66)
  {
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a2 + 16), 0, v66);
    v50 = 0;
    v60 = a9;
    goto LABEL_96;
  }
  v50 = 0;
  v60 = a9;
LABEL_98:
  if (v185)
    CFRelease(v185);
  if ((_DWORD)v50)
    goto LABEL_302;
  v59 = v179;
LABEL_102:
  if (v35)
    p_theSet = &theSet;
  else
    p_theSet = 0;
  v50 = videoMentorDependencyStateAddSamplesToGraph(a1, a2, a4, (uint64_t)v59, v60, 0, p_theSet);
  if ((_DWORD)v50)
    goto LABEL_302;
  refreshed = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, a2, (uint64_t)a13, a4, 0, &v174);
  if ((_DWORD)refreshed)
    goto LABEL_250;
  v77 = v174;
  if (!v174)
  {
LABEL_318:
    refreshed = FigSignalErrorAt();
    goto LABEL_250;
  }
  if (v39)
  {
    v78 = v176;
    *(_QWORD *)time2 = 0;
    v79 = *(uint64_t (**)(CFTypeRef, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v79)
    {
      v80 = v79(v78, time2);
      if ((_DWORD)v80)
      {
LABEL_317:
        v50 = v80;
      }
      else
      {
        while (1)
        {
          v81 = *(_QWORD *)time2;
          v82 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          v83 = a13 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
          if (v82 == v83)
          {
            v84 = *(uint64_t (**)(uint64_t, const void *))(v82 + 32);
            if (v84)
            {
              if (v84(v81, a13) == 1)
                break;
            }
          }
          v181.value = 0;
          v172.value = 0;
          v80 = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, a2, *(uint64_t *)time2, a4, 0, &v181);
          if ((_DWORD)v80)
            goto LABEL_317;
          if (v181.value && *(_DWORD *)(v181.value + 76) != 2)
          {
            time1[0].start.value = 1;
            *(_QWORD *)&time1[0].start.timescale = v181.value;
            videoMentorDependencyStateExecuteAction((const void **)a2, (int *)time1);
          }
          v85 = *(_QWORD *)time2;
          v86 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
          if (!v86)
            goto LABEL_129;
          v80 = v86(v85, 1, &v172);
          if ((_DWORD)v80)
            goto LABEL_317;
          if (v172.value != 1)
          {
            v87 = *(_QWORD *)time2;
            v88 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (a13)
              v89 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            else
              v89 = 0;
            if (v88 == v89)
            {
              v90 = *(void (**)(uint64_t, const void *))(v88 + 32);
              if (v90)
                v90(v87, a13);
            }
            break;
          }
        }
        v50 = 0;
      }
    }
    else
    {
LABEL_129:
      v50 = 4294954514;
    }
    if (*(_QWORD *)time2)
      CFRelease(*(CFTypeRef *)time2);
    if ((_DWORD)v50)
      goto LABEL_302;
  }
  else if (a3 == 1 && *(_DWORD *)(v174 + 76) != 2)
  {
    time1[0].start.value = 1;
    *(_QWORD *)&time1[0].start.timescale = v174;
    videoMentorDependencyStateExecuteAction((const void **)a2, (int *)time1);
  }
  if (!theSet)
    goto LABEL_225;
  v161 = v77;
  v91 = a17;
  if (CFSetGetCount(theSet) < 1)
  {
    v130 = 0;
    v159 = v163;
    goto LABEL_227;
  }
  v92 = v180;
  v93 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v93)
    goto LABEL_301;
  refreshed = v93(v92, &v175);
  if ((_DWORD)refreshed)
    goto LABEL_250;
  v162 = 0;
  v94 = 0;
  while (1)
  {
    v95 = v175;
    v96 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (a13)
      v97 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    else
      v97 = 0;
    if (v96 == v97)
    {
      v98 = *(uint64_t (**)(CFTypeRef, const void *))(v96 + 32);
      if (v98)
      {
        v99 = v98(v95, a13);
        v100 = a16;
        if (v99 == 1)
        {
LABEL_222:
          v158 = 1;
LABEL_223:
          v159 = v163;
          goto LABEL_224;
        }
      }
    }
    v172.value = 0;
    *(_QWORD *)&v170 = 0;
    if (*(_BYTE *)(a1 + 116))
    {
      v50 = 0xFFFFFFFFLL;
      goto LABEL_302;
    }
    v167 = v94;
    if (a3 != 1)
      break;
LABEL_181:
    refreshed = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, a2, (uint64_t)v175, a4, 0, &v170);
    if ((_DWORD)refreshed)
      goto LABEL_250;
    v114 = v170;
    v91 = a17;
    if (!(_QWORD)v170)
      goto LABEL_318;
    if (a3 != 1 && !*(_DWORD *)(v170 + 76))
    {
      time1[0].start.value = 1;
      *(_QWORD *)&time1[0].start.timescale = v170;
      videoMentorDependencyStateExecuteAction((const void **)a2, (int *)time1);
    }
    if (v167)
    {
      v94 = 1;
    }
    else
    {
      v115 = v175;
      v116 = *(_QWORD *)(a1 + 528);
      v117 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v116)
        v118 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      else
        v118 = 0;
      if (v117 == v118 && (v123 = *(uint64_t (**)(CFTypeRef, uint64_t))(v117 + 32)) != 0 && v123(v115, v116))
      {
        if (*(_DWORD *)(v114 + 76) != 2)
        {
          v94 = 0;
          v91 = a17;
          goto LABEL_219;
        }
        v91 = a17;
        if (!CFSetContainsValue(theSet, (const void *)v114))
        {
          v158 = 0;
          v100 = a16;
          goto LABEL_223;
        }
        v94 = 0;
        ++v162;
      }
      else
      {
        v94 = 1;
        v91 = a17;
        if (*(_DWORD *)(v114 + 76) != 2)
          goto LABEL_219;
      }
      v119 = *(_QWORD *)(v114 + 56);
      if (v119)
      {
        v120 = *(unsigned __int8 *)(v119 + 58);
        v122 = a3 == 1 && v114 == v161;
        if (v120 && !v122)
          goto LABEL_219;
      }
      else if (a3 != 1 || v114 != v161)
      {
        goto LABEL_219;
      }
      v181 = *(CMTime *)(v114 + 104);
      v124 = a1 + 552;
      while (1)
      {
        v124 = *(_QWORD *)v124;
        if (!v124)
          break;
        v125 = *(_OWORD *)(v124 + 32);
        *(_OWORD *)&time1[0].start.value = *(_OWORD *)(v124 + 16);
        *(_OWORD *)&time1[0].start.epoch = v125;
        *(_OWORD *)&time1[0].duration.timescale = *(_OWORD *)(v124 + 48);
        *(CMTime *)time2 = v181;
        if (CMTimeRangeContainsTime(time1, (CMTime *)time2))
          goto LABEL_219;
      }
      v126 = v164;
      if (v114 != v161)
        v126 = 0;
      if (!v126)
      {
        v158 = 0;
        v159 = v163;
        v100 = a16;
LABEL_224:
        v129 = v164;
        v130 = v162;
        goto LABEL_228;
      }
    }
LABEL_219:
    v127 = v175;
    v128 = *(uint64_t (**)(CFTypeRef, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (!v128)
      goto LABEL_301;
    refreshed = v128(v127, 1, &v172);
    if ((_DWORD)refreshed)
      goto LABEL_250;
    v100 = a16;
    if (v172.value != 1)
      goto LABEL_222;
  }
  v101 = 1;
  while (1)
  {
    refreshed = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, a2, (uint64_t)v175, a4, 0, &v170);
    if ((_DWORD)refreshed)
      break;
    v102 = v170;
    if ((_QWORD)v170)
    {
      v103 = *(_DWORD *)(v170 + 76);
      if (v103 == 2)
      {
        v104 = *(_QWORD *)(v170 + 56);
        if (v104 && (*(_BYTE *)(v104 + 58) || *(_BYTE *)(v104 + 56)))
          goto LABEL_181;
      }
      else if (v103 == 1)
      {
        goto LABEL_181;
      }
    }
    if (v59)
    {
      CFRelease(v59);
      v179 = 0;
    }
    *(_OWORD *)&time1[0].start.value = *(_OWORD *)a10;
    time1[0].start.epoch = *(_QWORD *)(a10 + 16);
    *(_OWORD *)time2 = *(_OWORD *)a11;
    *(_QWORD *)&time2[16] = *(_QWORD *)(a11 + 16);
    *(_OWORD *)&v181.value = *(_OWORD *)a12;
    v181.epoch = *(_QWORD *)(a12 + 16);
    refreshed = videoMentorDependencyStateFillRefreshGroupsUntil(a1, a2, (uint64_t)v175, a4, v60, &time1[0].start, (CMTime *)time2, &v181, v101, &v179);
    if ((_DWORD)refreshed)
      break;
    v59 = v179;
    if (v179)
    {
      if (v178)
      {
        CFRelease(v178);
        v178 = 0;
      }
      refreshed = videoMentorDependencyStateAddSamplesToGraph(a1, a2, a4, (uint64_t)v59, v60, (__CFArray **)&v178, 0);
      if ((_DWORD)refreshed)
        break;
      Count = CFArrayGetCount((CFArrayRef)v178);
      if (Count >= 1)
      {
        v106 = Count;
        for (i = 0; i != v106; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v178, i);
          if (ValueAtIndex[17] == 1)
            ValueAtIndex[17] = 0;
        }
      }
    }
    v109 = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
    v110 = v109;
    if (v109 > 10000)
    {
      LODWORD(v181.value) = 0;
      LOBYTE(cf) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = v181.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)cf))
        v137 = value;
      else
        v137 = value & 0xFFFFFFFE;
      if (v137)
      {
        *(_DWORD *)time2 = 136315906;
        *(_QWORD *)&time2[4] = "videoMentorDependencyStateCopyCursorForDecodeWalk";
        *(_WORD *)&time2[12] = 1024;
        *(_DWORD *)&time2[14] = -12836;
        *(_WORD *)&time2[18] = 2080;
        *(_QWORD *)&time2[20] = "videoMentorDependencyStateCopyCursorForDecodeWalk";
        v188 = 1024;
        v189 = v110;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      refreshed = videoMentorReportIssueWithRefreshNode(v102);
      break;
    }
    if (v109 >= 1)
    {
      v111 = 0;
      do
      {
        v112 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v111);
        if (!v112[56])
        {
          v113 = (uint64_t)v112;
          refreshed = videoMentorRefreshGroupClassifyNodes((uint64_t)v112);
          if ((_DWORD)refreshed)
            goto LABEL_250;
          videoMentorAddRefreshGroupToProcess(a2, v113);
        }
        ++v111;
      }
      while (v110 != v111);
    }
    videoMentorDependencyStateProcessRefreshGroups(a2);
    ++v101;
    v60 = a9;
    if (v101 == 10)
      goto LABEL_181;
  }
LABEL_250:
  v50 = refreshed;
LABEL_302:
  if (v176)
    CFRelease(v176);
  if (v180)
    CFRelease(v180);
  if (v179)
    CFRelease(v179);
  if (v175)
    CFRelease(v175);
  if (theSet)
    CFRelease(theSet);
  if (v178)
    CFRelease(v178);
  return v50;
}

uint64_t videoMentorEnqueueTimestampIntervalMarker(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  uint64_t v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetCMTime();
  FigCFDictionarySetCMTime();
  v3 = audioMentorEnqueueBufferConsumedMarker(a1, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

void videoMentorResetSavedListAndEnqueueMarker(uint64_t a1)
{
  uint64_t v2;
  CMAttachmentBearerRef v3;
  unsigned int (*v4)(uint64_t, CMAttachmentBearerRef);
  _QWORD *v5;
  _QWORD *v6;
  CMAttachmentBearerRef target;

  target = 0;
  if (*(_QWORD *)(a1 + 552))
  {
    if (!CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target))
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA4E58], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
      v2 = *(_QWORD *)(a1 + 24);
      v3 = target;
      v4 = *(unsigned int (**)(uint64_t, CMAttachmentBearerRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8);
      if (v4)
      {
        if (!v4(v2, v3))
        {
          ++*(_DWORD *)(a1 + 912);
          v5 = *(_QWORD **)(a1 + 552);
          *(_QWORD *)(a1 + 552) = 0;
          if (v5)
          {
            do
            {
              v6 = (_QWORD *)*v5;
              videoMentorSavedFrameDestroy(v5);
              v5 = v6;
            }
            while (v6);
          }
        }
      }
    }
    if (target)
      CFRelease(target);
  }
}

uint64_t videoMentorThreadResendCachedSampleBuffer(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, int a4, int a5, int a6, int a7, __int128 *a8, __int128 *a9, __int128 *a10, const void *a11)
{
  uint64_t v19;
  uint64_t (*v20)(const void *, CMTime *);
  uint64_t v21;
  uint64_t (*v22)(const void *, CMSampleTimingInfo *);
  uint64_t (*v23)(const void *, CMTime *);
  BOOL v24;
  BOOL v25;
  CMSampleTimingInfo sampleTimingArray;
  CMSampleBufferRef sampleBufferOut;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  sampleBufferOut = 0;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  if (videoMentorThreadWaitForOutputQueueToDropBelowHighWater(a1, a11))
    return 0xFFFFFFFFLL;
  v20 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v20)
    return 4294954514;
  v21 = v20(a2, &sampleTimingArray.decodeTimeStamp);
  if ((_DWORD)v21)
    return v21;
  v22 = *(uint64_t (**)(const void *, CMSampleTimingInfo *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v22)
    return 4294954514;
  v21 = v22(a2, &sampleTimingArray);
  if ((_DWORD)v21)
    return v21;
  v23 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v23)
    return 4294954514;
  v21 = v23(a2, &sampleTimingArray.presentationTimeStamp);
  if ((_DWORD)v21)
    return v21;
  v36 = 0;
  CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, 1, &sampleTimingArray, &sampleBufferOut);
  v29 = a1;
  v24 = a4 == 1;
  if (!a7)
    v24 = 0;
  LOBYTE(v36) = v24;
  if (a7)
    v25 = a4 == 0;
  else
    v25 = 0;
  BYTE1(v36) = v25;
  v30 = *a8;
  v31 = *((_QWORD *)a8 + 2);
  v32 = *a9;
  v33 = *((_QWORD *)a9 + 2);
  v34 = *a10;
  v35 = *((_QWORD *)a10 + 2);
  BYTE2(v36) = a6;
  videoMentorRemapSBufTiming((uint64_t)&v29, (uint64_t)a11, sampleBufferOut);
  if (a6)
    CMSetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x1E0CA26E8], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
  v19 = videoMentorThreadSendSampleBuffer(a1, sampleBufferOut, a2, a4, 3, a5, 0, 0);
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  return v19;
}

uint64_t videoMentorDependencyStateGetNodeForCursor(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t (*v12)(uint64_t, char *);
  uint64_t result;
  const void *Value;
  const void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[4];
  uint64_t v24;
  const void *v25;

  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v16 = 0u;
  v18 = 0;
  *a6 = 0;
  v17 = a3;
  v12 = *(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v12)
    return 4294954514;
  result = v12(a3, (char *)v23 + 8);
  if ((_DWORD)result)
    return result;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 8), &v16);
  v15 = Value;
  v25 = Value;
  if (a5 && !Value)
  {
    result = videoMentorFrameNodeCreate(a1, *MEMORY[0x1E0C9AE00], a3, a4, (uint64_t *)&v25);
    if ((_DWORD)result)
      return result;
    v15 = v25;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 8), v25, v25);
    if (v15)
      CFRelease(v15);
  }
  result = 0;
  *a6 = v15;
  return result;
}

void videoMentorUpdateDecoderState(uint64_t a1, uint64_t a2, int a3)
{
  signed int v5;
  unsigned int v6;
  const void *v7;
  CFTypeRef v8;
  signed int v9;
  const void *v10;

  v5 = *(_DWORD *)(a1 + 544);
  v6 = v5;
  if (*(_BYTE *)(a1 + 548) && !*(_BYTE *)(a2 + 162))
  {
    *(_BYTE *)(a1 + 548) = 0;
    v6 = 0x7FFFFFFF;
    if (a3)
    {
LABEL_4:
      v7 = *(const void **)(a2 + 16);
      if (v7)
        v8 = CFRetain(v7);
      else
        v8 = 0;
      if (*(_BYTE *)(a2 + 158))
      {
LABEL_13:
        v6 = 0x7FFFFFFF;
        goto LABEL_18;
      }
      if (*(_BYTE *)(a2 + 159))
      {
        v6 += v6 >> 31;
      }
      else
      {
        if (!*(_BYTE *)(a2 + 160))
        {
          if (!*(_BYTE *)(a2 + 156))
          {
            if (*(_BYTE *)(a2 + 157) && *(_DWORD *)(a1 + 544) < *(_DWORD *)(a2 + 152))
              v6 = *(_DWORD *)(a2 + 152);
            goto LABEL_18;
          }
          goto LABEL_13;
        }
        *(_BYTE *)(a1 + 548) = 1;
      }
LABEL_18:
      *(_DWORD *)(a1 + 544) = v6;
      if (v8)
      {
        v10 = *(const void **)(a1 + 528);
        if (v10)
          CFRelease(v10);
        *(_QWORD *)(a1 + 528) = v8;
      }
      return;
    }
  }
  else if (a3)
  {
    goto LABEL_4;
  }
  if (!*(_BYTE *)(a2 + 161))
  {
    v9 = *(_DWORD *)(a2 + 152);
    if (v5 >= v9)
      v6 = v9 - 1;
  }
  *(_DWORD *)(a1 + 544) = v6;
}

void videoMentorEnqueueDrainAfterDecodingMarker(uint64_t a1)
{
  uint64_t v2;
  CMSampleBufferRef v3;
  void (*v4)(uint64_t, CMSampleBufferRef);
  CMSampleBufferRef v5;

  v5 = 0;
  if (!CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, &v5))
  {
    CMSetAttachment(v5, (CFStringRef)*MEMORY[0x1E0CA2658], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
    v2 = *(_QWORD *)(a1 + 24);
    v3 = v5;
    v4 = *(void (**)(uint64_t, CMSampleBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v4)
      v4(v2, v3);
    CFRelease(v5);
  }
}

void videoMentorPostCollectorCoherenceConduitNotification(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, CFMutableDictionaryRef, _QWORD);

  if (*(_DWORD *)(a1 + 488))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v3 = Mutable;
      FigCFDictionarySetInt32();
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(void (**)(uint64_t, _QWORD, CFMutableDictionaryRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 64);
      if (v5)
        v5(v4, *MEMORY[0x1E0CA4EA8], v3, 0);
      CFRelease(v3);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t videoMentorFrameNodeCreate(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v10;
  const __CFAllocator *v11;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v13;
  CFMutableArrayRef v14;
  CFMutableArrayRef v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v10 = Instance;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(v10 + 24) = Mutable;
    if (Mutable
      && (v13 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v10 + 32) = v13) != 0)
      && (v14 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v10 + 40) = v14) != 0)
      && (v15 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v10 + 48) = v15) != 0))
    {
      v16 = MEMORY[0x1E0CA2E18];
      v17 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v10 + 104) = *MEMORY[0x1E0CA2E18];
      v18 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(v10 + 120) = v18;
      *(_OWORD *)(v10 + 128) = v17;
      *(_QWORD *)(v10 + 144) = v18;
      if (a3 == -1)
      {
LABEL_12:
        v22 = 0;
        *(_BYTE *)(v10 + 64) = 1;
        *a5 = v10;
        return v22;
      }
      v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v19)
        goto LABEL_13;
      v20 = v19(a3, v10 + 16);
      if (!(_DWORD)v20)
      {
        v21 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v21)
        {
          v20 = v21(a3, v10 + 104);
          if (!(_DWORD)v20)
          {
            v24 = *(_OWORD *)(v10 + 104);
            v25 = *(_QWORD *)(v10 + 120);
            videoMentorRemapTime(a1, a4, 0, &v24, (uint64_t)&v26);
            *(_OWORD *)(v10 + 128) = v26;
            *(_QWORD *)(v10 + 144) = v27;
            goto LABEL_12;
          }
          goto LABEL_17;
        }
LABEL_13:
        v22 = 4294954514;
LABEL_14:
        CFRelease((CFTypeRef)v10);
        return v22;
      }
    }
    else
    {
      v20 = FigSignalErrorAt();
    }
LABEL_17:
    v22 = v20;
    goto LABEL_14;
  }
  return FigSignalErrorAt();
}

uint64_t videoMentorRemapTime@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  void (*v10)(_QWORD, uint64_t, uint64_t, uint64_t, __int128 *);
  __int128 v12;
  uint64_t v13;

  *(_OWORD *)a5 = *a4;
  *(_QWORD *)(a5 + 16) = *((_QWORD *)a4 + 2);
  MEMORY[0x19402EEEC](a1[10]);
  v10 = (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, __int128 *))a1[8];
  if (v10)
  {
    v12 = *a4;
    v13 = *((_QWORD *)a4 + 2);
    v10(a1[9], a2, a3, a5, &v12);
  }
  return MEMORY[0x19402EF04](a1[10]);
}

CFTypeRef videoMentorFrameNodeDictionaryRetain(int a1, CFTypeRef cf)
{
  return CFRetain(cf);
}

void videoMentorFrameNodeDictionaryRelease(int a1, CFTypeRef cf)
{
  CFRelease(cf);
}

__CFString *videoMentorFrameNodeCopyDescription(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("VideoMentorFrameNode: %p, sampleCursor: %@\n"), a1, a1[2]);
  return Mutable;
}

BOOL videoMentorFrameNodeIsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if (v2 == v3)
    return 1;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  return v6 != *(_QWORD *)(CMBaseObjectGetVTable() + 16)
      || (v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 32)) == 0
      || v7(v2, v3) == 0;
}

CMTimeValue videoMentorFrameNodeHash(uint64_t a1)
{
  CMTime v2;
  CMTime v3;

  v2 = *(CMTime *)(a1 + 104);
  CMTimeConvertScale(&v3, &v2, 1000000000, kCMTimeRoundingMethod_RoundTowardPositiveInfinity);
  return v3.value;
}

uint64_t videoMentorCopySyncCursorForCursor(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t (*v8)(uint64_t, CFTypeRef *);
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  int value;
  CMTime *v13;
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, char *, __int16 *, CMTime *, _QWORD);
  uint64_t v16;
  CFTypeRef v17;
  uint64_t (*v18)(CFTypeRef, CMTime *, CMTime *, CMTime *);
  uint64_t (*v19)(uint64_t, CMTime *);
  CFTypeRef v20;
  uint64_t (*v21)(CFTypeRef, CMTime *);
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, uint64_t, uint64_t *);
  CMTime v25;
  CMTime time1;
  CMTime v27;
  CMTime v28;
  uint64_t v29;
  __int16 v30;
  CFTypeRef v31;

  v31 = 0;
  v30 = 0;
  if (a4)
    *a4 = 1;
  v8 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
  {
LABEL_41:
    v16 = 4294954514;
    goto LABEL_42;
  }
  v9 = v8(a2, &v31);
  if (!(_DWORD)v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64) == 0;
    if (((v10 ^ (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72) != 0)) & 1) == 0)
    {
      v11 = 0;
      value = -1;
      v13 = (CMTime *)MEMORY[0x1E0CA2E18];
      while (1)
      {
        v29 = 0;
        if (*(_BYTE *)(a1 + 116))
        {
          v16 = 0xFFFFFFFFLL;
          goto LABEL_42;
        }
        if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64))
        {
          LODWORD(v28.value) = 0;
          v14 = v31;
          v15 = *(uint64_t (**)(CFTypeRef, char *, __int16 *, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 64);
          if (!v15)
            goto LABEL_41;
          v16 = v15(v14, (char *)&v30 + 1, &v30, &v28, 0);
          if ((_DWORD)v16)
            goto LABEL_42;
          if (value < 0)
            value = v28.value;
          if (!HIBYTE(v30))
            goto LABEL_26;
        }
        else
        {
          LOBYTE(v28.value) = 0;
          LOBYTE(v27.value) = 0;
          LOBYTE(time1.value) = 0;
          v17 = v31;
          v18 = *(uint64_t (**)(CFTypeRef, CMTime *, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 72);
          if (!v18)
            goto LABEL_41;
          v9 = v18(v17, &v28, &v27, &time1);
          if ((_DWORD)v9)
            goto LABEL_47;
          if (LOBYTE(v27.value))
            LODWORD(v16) = LOBYTE(v28.value) == 73;
          else
            LODWORD(v16) = 0;
          HIBYTE(v30) = LOBYTE(v28.value) == 73;
          if (LOBYTE(v28.value) != 73)
            goto LABEL_26;
        }
        if (!videoMentorSyncFrameIsOpenGOP((uint64_t)v31))
        {
          if (a4)
            *a4 = 1;
LABEL_26:
          if (!(_DWORD)v16)
            goto LABEL_33;
          goto LABEL_27;
        }
        if (a4)
          *a4 = 0;
LABEL_27:
        v28 = *v13;
        v27 = v28;
        v19 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v19)
          goto LABEL_41;
        v9 = v19(a2, &v28);
        if ((_DWORD)v9)
          goto LABEL_47;
        v20 = v31;
        v21 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v21)
          goto LABEL_41;
        v9 = v21(v20, &v27);
        if ((_DWORD)v9)
          goto LABEL_47;
        time1 = v28;
        v25 = v27;
        if (CMTimeCompare(&time1, &v25) < 0)
          v30 = 1;
LABEL_33:
        if (!(_BYTE)v30 || value < 1 || (++v11, v11 < value))
        {
          if (!HIBYTE(v30))
          {
            v22 = v31;
            v23 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 168);
            if (!v23)
              goto LABEL_41;
            v9 = v23(v22, -1, &v29);
            if ((_DWORD)v9)
              goto LABEL_47;
            if (v29 == -1)
              continue;
          }
        }
        v16 = 0;
        *a3 = v31;
        return v16;
      }
    }
    v9 = FigSignalErrorAt();
  }
LABEL_47:
  v16 = v9;
LABEL_42:
  if (v31)
    CFRelease(v31);
  return v16;
}

uint64_t videoMentorDependencyStateFillRefreshGroupsUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, CMTime *a6, CMTime *a7, CMTime *a8, int a9, _QWORD *a10)
{
  uint64_t (*v18)(uint64_t, CMTime *);
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, CMTime *);
  const void *v24;
  int v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v27;
  unsigned int v28;
  CMTimeValue v29;
  char *ValueAtIndex;
  CFIndex v31;
  CFIndex v32;
  const __CFAllocator *v33;
  CFIndex v34;
  CMTimeValue *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, CMTime *);
  uint64_t v39;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  int v42;
  uint64_t FigBaseObject;
  void (*v44)(uint64_t, const __CFString *, uint64_t);
  void *v45;
  CFIndex Count;
  const void *v47;
  uint64_t NodeForCursor;
  CMTimeValue v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, CMTime *);
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, CMTime *);
  uint64_t (*v60)(uint64_t, uint64_t);
  uint64_t (*v61)(const void *, const void *);
  CMTime *v62;
  CMTimeFlags v63;
  CMTimeEpoch v64;
  double Seconds;
  double v66;
  CMTimeEpoch v67;
  _OWORD *v68;
  uint64_t v69;
  CMTime *v70;
  const __CFAllocator *v71;
  int v72;
  int v73;
  _OWORD *v74;
  uint64_t v75;
  CMTime v76;
  __int128 v77;
  CMTimeEpoch v78;
  CMTime v79;
  void *value;
  CMTime v81;
  CMTime v82;
  CMTime v83;
  CMTime rhs;
  CMTime type;
  CMTime time2;
  CMTime lhs;
  CMTimeValue v88;
  CMTimeScale timescale;
  CMTime time1;
  CMTimeValue v91;
  CMTimeScale v92;
  uint64_t v93;
  CFRange v94;

  v93 = *MEMORY[0x1E0C80C00];
  v81 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v79 = v81;
  value = 0;
  v88 = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v18 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v18)
    goto LABEL_14;
  v19 = v18(a3, &v81);
  if (!(_DWORD)v19)
  {
    *a10 = 0;
    if (*(_BYTE *)(a2 + 32))
      return 0;
    if (a5 && (a8->flags & 0x1D) == 1)
    {
      if ((a6->flags & 0x1D) == 1)
      {
        time1 = *a6;
        time2 = *a8;
        CMTimeMaximum(&lhs, &time1, &time2);
        *a6 = lhs;
      }
      else
      {
        v21 = *(_OWORD *)&a8->value;
        a6->epoch = a8->epoch;
        *(_OWORD *)&a6->value = v21;
      }
    }
    v22 = *(_QWORD *)(a2 + 24);
    v23 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v23)
    {
      v19 = v23(v22, &v79);
      if (!(_DWORD)v19)
      {
        lhs = v81;
        time1 = v79;
        if ((CMTimeCompare(&lhs, &time1) & 0x80000000) == 0)
        {
          v24 = 0;
          v25 = 0;
          v73 = 0;
LABEL_40:
          if (v25 <= a9)
          {
            v70 = a7;
            v74 = (_OWORD *)(a2 + 104);
            v36 = (CMTimeValue *)(a2 + 36);
            v71 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v68 = (_OWORD *)(a2 + 128);
            v69 = *MEMORY[0x1E0C9AE50];
            v75 = a4;
            while (!*(_BYTE *)(a2 + 33) && !*(_BYTE *)(a2 + 32))
            {
              if (*(_BYTE *)(a1 + 116))
              {
                v20 = 0xFFFFFFFFLL;
                goto LABEL_16;
              }
              v37 = *(_QWORD *)(a2 + 24);
              v38 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
              if (!v38)
                goto LABEL_15;
              v72 = v25;
              v39 = v38(v37, &v79);
              if ((_DWORD)v39)
                goto LABEL_135;
              time1 = v79;
              videoMentorRemapTime((_QWORD *)a1, a4, 0, (__int128 *)&time1.value, (uint64_t)&lhs);
              v88 = lhs.value;
              flags = lhs.flags;
              timescale = lhs.timescale;
              if ((lhs.flags & 0x1D) != 1)
                break;
              epoch = lhs.epoch;
              lhs = v79;
              *(_OWORD *)&time1.value = *v74;
              time1.epoch = *(_QWORD *)(a2 + 120);
              if ((CMTimeCompare(&lhs, &time1) & 0x80000000) == 0)
              {
                *(_BYTE *)(a2 + 32) = 1;
                break;
              }
              if ((a6->flags & 0x1D) != 1
                || (lhs = *a6, time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], !CMTimeCompare(&lhs, &time1))
                || (v42 = *(_DWORD *)(a2 + 48), (v42 & 0x1D) != 1))
              {
                *v36 = v88;
                *(_DWORD *)(a2 + 44) = timescale;
                *(_DWORD *)(a2 + 48) = flags;
                *(_QWORD *)(a2 + 52) = epoch;
                LOBYTE(v42) = flags;
              }
              if ((v42 & 0x1D) != 1)
                break;
              if (value)
              {
                CFRelease(value);
                value = 0;
              }
              *(_OWORD *)&lhs.value = *(_OWORD *)v36;
              lhs.epoch = *(_QWORD *)(a2 + 52);
              v39 = videoMentorRefreshGroupCreate(v71, (__int128 *)&lhs.value, (uint64_t *)&value);
              if ((_DWORD)v39)
              {
LABEL_135:
                v20 = v39;
                goto LABEL_16;
              }
              FigBaseObject = FigSampleCursorGetFigBaseObject(*(_QWORD *)(a2 + 24));
              v44 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
              if (v44)
                v44(FigBaseObject, CFSTR("EagerlyFetchSampleDependencyAttributes"), v69);
              lhs.value = v88;
              lhs.timescale = timescale;
              lhs.flags = flags;
              lhs.epoch = epoch;
              *(_OWORD *)&time1.value = *(_OWORD *)v36;
              time1.epoch = *(_QWORD *)(a2 + 52);
              if (CMTimeCompare(&lhs, &time1) <= 0)
              {
                v47 = v24;
                while (1)
                {
                  time2.value = 0;
                  type.value = 0;
                  if (*(_BYTE *)(a1 + 116))
                  {
                    v20 = 0xFFFFFFFFLL;
                    goto LABEL_130;
                  }
                  NodeForCursor = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, a2, *(_QWORD *)(a2 + 24), v75, 1, &type);
                  if ((_DWORD)NodeForCursor)
                    break;
                  v49 = type.value;
                  videoMentorRefreshGroupAddNode((uint64_t)value, type.value);
                  v24 = *(const void **)(v49 + 16);
                  if (v47)
                  {
                    v50 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                    if (v24)
                      v51 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                    else
                      v51 = 0;
                    if (v50 == v51
                      && (v61 = *(uint64_t (**)(const void *, const void *))(v50 + 32)) != 0
                      && v61(v47, v24) == -1)
                    {
                      v24 = *(const void **)(type.value + 16);
                      if (v24)
                        CFRetain(*(CFTypeRef *)(type.value + 16));
                      CFRelease(v47);
                    }
                    else
                    {
                      v24 = v47;
                    }
                  }
                  else if (v24)
                  {
                    CFRetain(*(CFTypeRef *)(v49 + 16));
                  }
                  v52 = *(_QWORD *)(type.value + 16);
                  v53 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                  if (a3)
                    v54 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                  else
                    v54 = 0;
                  if (v53 != v54
                    || (v60 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 32)) == 0
                    || !v60(v52, a3))
                  {
                    v73 = 1;
                  }
                  v55 = *(_QWORD *)(a2 + 24);
                  v56 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 176);
                  if (!v56)
                  {
LABEL_127:
                    v20 = 4294954514;
LABEL_128:
                    v47 = v24;
                    goto LABEL_130;
                  }
                  v57 = v56(v55, 1, &time2);
                  if ((_DWORD)v57)
                    goto LABEL_134;
                  if (time2.value != 1)
                  {
LABEL_106:
                    *(_BYTE *)(a2 + 32) = 1;
                    goto LABEL_64;
                  }
                  v58 = *(_QWORD *)(a2 + 24);
                  v59 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
                  if (!v59)
                    goto LABEL_127;
                  v57 = v59(v58, &v79);
                  if ((_DWORD)v57)
                  {
LABEL_134:
                    v20 = v57;
                    goto LABEL_128;
                  }
                  time1 = v79;
                  videoMentorRemapTime((_QWORD *)a1, v75, 0, (__int128 *)&time1.value, (uint64_t)&lhs);
                  v88 = lhs.value;
                  flags = lhs.flags;
                  timescale = lhs.timescale;
                  epoch = lhs.epoch;
                  lhs = v79;
                  *(_OWORD *)&time1.value = *v74;
                  time1.epoch = *(_QWORD *)(a2 + 120);
                  if ((CMTimeCompare(&lhs, &time1) & 0x80000000) == 0)
                    goto LABEL_106;
                  lhs.value = v88;
                  lhs.timescale = timescale;
                  lhs.flags = flags;
                  lhs.epoch = epoch;
                  *(_OWORD *)&time1.value = *(_OWORD *)v36;
                  time1.epoch = *(_QWORD *)(a2 + 52);
                  v47 = v24;
                  if (CMTimeCompare(&lhs, &time1) >= 1)
                    goto LABEL_64;
                }
                v20 = NodeForCursor;
LABEL_130:
                v24 = v47;
                goto LABEL_16;
              }
LABEL_64:
              v45 = value;
              Count = CFArrayGetCount(*((CFArrayRef *)value + 5));
              if (Count < 1)
              {
                v25 = v72;
              }
              else
              {
                CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v45);
                v25 = v72;
                if (v73)
                  v25 = v72 + 1;
              }
              v77 = *(_OWORD *)&a6->value;
              v78 = a6->epoch;
              v76 = *v70;
              time1 = *a6;
              if (!*(_BYTE *)(a2 + 33) && (*(_BYTE *)(a2 + 48) & 1) != 0 && (BYTE12(v77) & 1) != 0)
              {
                if ((v76.flags & 0x1D) == 1)
                {
                  lhs = *a6;
                  time2 = *v70;
                  CMTimeAdd(&time1, &lhs, &time2);
                }
                else
                {
                  v76 = *a6;
                }
                v62 = (CMTime *)&v77;
                if (Count < 1)
                  v62 = &v76;
                lhs = *v62;
                if ((flags & 0x1D) == 1
                  && (time2.value = v88,
                      time2.timescale = timescale,
                      time2.flags = flags,
                      time2.epoch = epoch,
                      *(_OWORD *)&type.value = *v68,
                      type.epoch = *(_QWORD *)(a2 + 144),
                      CMTimeCompare(&time2, &type) < 0))
                {
                  type.value = v88;
                  type.timescale = timescale;
                  type.flags = flags;
                  type.epoch = epoch;
                }
                else
                {
                  *(_OWORD *)&type.value = *v68;
                  type.epoch = *(_QWORD *)(a2 + 144);
                }
                *(_OWORD *)&rhs.value = *(_OWORD *)v36;
                rhs.epoch = *(_QWORD *)(a2 + 52);
                CMTimeSubtract(&time2, &type, &rhs);
                v91 = time2.value;
                v63 = time2.flags;
                v92 = time2.timescale;
                v64 = time2.epoch;
                if ((time2.flags & 0x1D) != 1)
                  goto LABEL_121;
                time2.value = v91;
                time2.timescale = v92;
                type = time1;
                if (CMTimeCompare(&time2, &type) < 1)
                  goto LABEL_121;
                time2.value = v91;
                time2.timescale = v92;
                time2.flags = v63;
                time2.epoch = v64;
                Seconds = CMTimeGetSeconds(&time2);
                time2 = v76;
                v66 = Seconds / CMTimeGetSeconds(&time2);
                if (v66 > 2147483650.0)
                  v66 = 2147483650.0;
                if (v66 - floor(v66) < 0.01)
                  v66 = v66 + -1.0;
                if (v66 > 1.0)
                {
                  memset(&time2, 0, sizeof(time2));
                  rhs = v76;
                  CMTimeMultiply(&type, &rhs, (int)v66);
                  *(_OWORD *)&rhs.value = *(_OWORD *)v36;
                  rhs.epoch = *(_QWORD *)(a2 + 52);
                  CMTimeAdd(&time2, &rhs, &type);
                  v83 = time2;
                  v82 = v76;
                  CMTimeAdd(&rhs, &v83, &v82);
                  *(_OWORD *)v36 = *(_OWORD *)&rhs.value;
                  v67 = rhs.epoch;
                }
                else
                {
LABEL_121:
                  *(_OWORD *)&type.value = *(_OWORD *)v36;
                  type.epoch = *(_QWORD *)(a2 + 52);
                  rhs = lhs;
                  CMTimeAdd(&time2, &type, &rhs);
                  *(_OWORD *)v36 = *(_OWORD *)&time2.value;
                  v67 = time2.epoch;
                }
                *(_QWORD *)(a2 + 52) = v67;
                *(_OWORD *)&time2.value = *(_OWORD *)v36;
                time2.epoch = v67;
                *(_OWORD *)&rhs.value = *v68;
                rhs.epoch = *(_QWORD *)(a2 + 144);
                if ((CMTimeCompare(&time2, &rhs) & 0x80000000) == 0)
                  *(_BYTE *)(a2 + 33) = 1;
              }
              a4 = v75;
              if (v25 > a9)
                break;
            }
          }
          v20 = 0;
          *a10 = v24;
          goto LABEL_42;
        }
        type.value = 0;
        v19 = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, a2, a3, a4, 1, &type);
        if (!(_DWORD)v19)
        {
          v29 = type.value;
          ValueAtIndex = *(char **)(type.value + 56);
          if (ValueAtIndex)
          {
            v24 = 0;
LABEL_39:
            v34 = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
            v94.location = 0;
            v94.length = v34;
            v25 = v34 + ~CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a2 + 16), v94, ValueAtIndex);
            v73 = 1;
            goto LABEL_40;
          }
          memset(&lhs, 0, sizeof(lhs));
          time1 = v81;
          videoMentorRemapTime((_QWORD *)a1, a4, 0, (__int128 *)&time1.value, (uint64_t)&lhs);
          v31 = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
          if (v31 < 1)
          {
            v32 = 0;
            ValueAtIndex = 0;
          }
          else
          {
            v32 = 0;
            while (1)
            {
              ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v32);
              time1 = lhs;
              time2 = *(CMTime *)(ValueAtIndex + 16);
              if (CMTimeCompare(&time1, &time2) < 1)
                break;
              if (v31 == ++v32)
              {
                v32 = v31;
                goto LABEL_34;
              }
            }
          }
          if (v32 != v31 && !ValueAtIndex[56])
          {
LABEL_37:
            videoMentorRefreshGroupAddNode((uint64_t)ValueAtIndex, v29);
            v24 = *(const void **)(type.value + 16);
            if (v24)
              CFRetain(*(CFTypeRef *)(type.value + 16));
            goto LABEL_39;
          }
LABEL_34:
          v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          time1 = lhs;
          v19 = videoMentorRefreshGroupCreate(v33, (__int128 *)&time1.value, (uint64_t *)&value);
          if (!(_DWORD)v19)
          {
            ValueAtIndex = (char *)value;
            CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a2 + 16), v32, value);
            if (ValueAtIndex)
            {
              CFRelease(ValueAtIndex);
              value = 0;
            }
            goto LABEL_37;
          }
        }
      }
      goto LABEL_136;
    }
LABEL_14:
    v24 = 0;
LABEL_15:
    v20 = 4294954514;
    goto LABEL_16;
  }
LABEL_136:
  v20 = v19;
  v24 = 0;
LABEL_16:
  LODWORD(time2.value) = 0;
  LOBYTE(type.value) = 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v27 = time2.value;
  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
    v28 = v27;
  else
    v28 = v27 & 0xFFFFFFFE;
  if (v28)
  {
    LODWORD(time1.value) = 136315394;
    *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"videoMentorDependencyStateFillRefreshGroupsUntil";
    LOWORD(time1.flags) = 1024;
    *(CMTimeFlags *)((char *)&time1.flags + 2) = v20;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v24)
    CFRelease(v24);
LABEL_42:
  if (value)
    CFRelease(value);
  return v20;
}

uint64_t videoMentorDependencyStateAddSamplesToGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, __CFArray **a6, CFMutableSetRef *a7)
{
  __CFArray *Mutable;
  CFMutableSetRef v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t NodeForCursor;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, CMTime *, char *, CMTime *);
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  int32_t v29;
  CFIndex Count;
  CFIndex v31;
  CFIndex v32;
  CFIndex CountOfNodesWithUnknownDependentsAtLevel;
  CFIndex v34;
  CFIndex i;
  const __CFArray *NodeWithUnknownDependentsAtLevel;
  CFIndex v37;
  CFIndex v38;
  CFIndex j;
  const __CFArray *v40;
  CFIndex v41;
  CFIndex v42;
  __CFSet *v43;
  const __CFArray *v44;
  CFIndex v45;
  CFIndex v46;
  CFIndex v47;
  CFIndex k;
  const __CFArray *v49;
  const __CFArray *v50;
  const void *v52;
  CFIndex v53;
  CFIndex v54;
  void *ValueAtIndex;
  void *v56;
  __CFArray *v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, __int16 *, unsigned __int8 *, int *, BOOL *);
  uint64_t FigBaseObject;
  void (*v61)(uint64_t, const __CFString *, uint64_t);
  uint64_t v62;
  unsigned int (*v63)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeID v64;
  int ValueIfPresent;
  int v66;
  CFIndex v67;
  CFIndex v68;
  const __CFArray *v69;
  __CFArray *v70;
  CFIndex v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __CFArray *v76;
  CFIndex v77;
  CFIndex v78;
  uint64_t v79;
  CFIndex m;
  CFIndex v81;
  CFIndex v82;
  CFIndex n;
  const __CFArray *v84;
  _QWORD *v85;
  const __CFArray *v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t *);
  uint64_t (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  void *v92;
  void *v93;
  void *key;
  __CFArray **v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  CFMutableSetRef *v100;
  const __CFAllocator *allocator;
  uint64_t v104;
  CMTime time2;
  CMTime time1;
  __int16 v107;
  uint64_t v108;
  BOOL v109;
  int v110;
  unsigned __int8 v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;
  CFTypeRef v115[2];
  CFRange v116;
  CFRange v117;
  CFRange v118;

  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v115[0] = 0;
  if (a6)
    *a6 = 0;
  if (a7)
    *a7 = 0;
  if (!*(_BYTE *)(a2 + 88))
  {
    v95 = a6;
    v100 = a7;
    v98 = 0;
    v13 = 0;
    v97 = *MEMORY[0x1E0C9AE50];
    key = (void *)*MEMORY[0x1E0CA2618];
    v96 = *MEMORY[0x1E0C9AE40];
    v93 = (void *)*MEMORY[0x1E0CA25C8];
    v92 = (void *)*MEMORY[0x1E0CA2600];
    v15 = (const void *)*MEMORY[0x1E0C9B0D0];
    v99 = a4;
    v104 = a1;
    while (1)
    {
      v113 = 0;
      v114 = 0;
      v16 = *(_QWORD *)(a2 + 80);
      v17 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (a4)
        v18 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      else
        v18 = 0;
      if (v17 == v18)
      {
        v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 32);
        if (v19)
        {
          if (v19(v16, a4) == 1)
          {
LABEL_153:
            if (v98)
            {
              a7 = v100;
              a6 = v95;
            }
            else
            {
              a7 = v100;
              a6 = v95;
              if (v13)
              {
                CFRelease(v13);
                v13 = 0;
              }
            }
            if (!*(_BYTE *)(a2 + 88))
              goto LABEL_8;
            goto LABEL_7;
          }
        }
      }
      if (*(_BYTE *)(a1 + 116))
      {
        v14 = 0xFFFFFFFFLL;
        goto LABEL_145;
      }
      NodeForCursor = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, a2, *(_QWORD *)(a2 + 80), a3, 1, &v114);
      if ((_DWORD)NodeForCursor)
        goto LABEL_159;
      v112 = 0;
      v111 = 0;
      v110 = 0;
      v109 = 0;
      v108 = 0;
      v107 = 0;
      if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72))
      {
        LOBYTE(time1.value) = 0;
        LOBYTE(time2.value) = 0;
        v21 = *(_QWORD *)(a2 + 80);
        v22 = *(uint64_t (**)(uint64_t, CMTime *, char *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 72);
        if (!v22)
          goto LABEL_143;
        NodeForCursor = v22(v21, &time1, (char *)&v112 + 1, &time2);
        if ((_DWORD)NodeForCursor)
          goto LABEL_159;
        v23 = LOBYTE(time1.value) == 73;
        LOBYTE(v112) = LOBYTE(time1.value) == 73;
        v109 = LOBYTE(time1.value) == 66;
        v24 = v23;
      }
      else
      {
        v58 = *(_QWORD *)(a2 + 80);
        v59 = *(uint64_t (**)(uint64_t, __int16 *, unsigned __int8 *, int *, BOOL *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 64);
        if (!v59)
          goto LABEL_143;
        NodeForCursor = v59(v58, &v112, &v111, &v110, &v109);
        if ((_DWORD)NodeForCursor)
          goto LABEL_159;
        v24 = (v112 | v111) != 0;
        if (v115[0])
        {
          CFRelease(v115[0]);
          v115[0] = 0;
        }
        FigBaseObject = FigSampleCursorGetFigBaseObject(*(_QWORD *)(a2 + 80));
        v61 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v61)
          v61(FigBaseObject, CFSTR("EagerlyFetchSampleDependencyAttributes"), v97);
        v62 = FigSampleCursorGetFigBaseObject(*(_QWORD *)(a2 + 80));
        v63 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v63)
        {
          if (!v63(v62, CFSTR("SampleDependencyAttributes"), allocator, v115))
          {
            if (v115[0])
            {
              v64 = CFGetTypeID(v115[0]);
              if (v64 == CFDictionaryGetTypeID())
              {
                time1.value = 0;
                time2.value = 0;
                if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v115[0], key, (const void **)&time2)
                  && time2.value == v96)
                {
                  v109 = 1;
                }
                ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)v115[0], v93, (const void **)&time2);
                v66 = time2.value == v96 || v24;
                if (ValueIfPresent)
                  v24 = v66;
                if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v115[0], v92, (const void **)&time1))
                  FigCFDictionaryGetIntIfPresent();
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetIntIfPresent();
              }
            }
          }
        }
        v23 = v112;
        if ((_BYTE)v112 && ((_DWORD)v108 == 21 || (_DWORD)v108 == 16))
          HIBYTE(v112) = 1;
      }
      v25 = v114;
      *(_DWORD *)(v114 + 152) = HIDWORD(v108);
      *(_BYTE *)(v25 + 156) = HIBYTE(v107);
      *(_BYTE *)(v25 + 157) = v107;
      *(_BYTE *)(v25 + 158) = v23;
      *(_BYTE *)(v25 + 159) = v111;
      v26 = HIBYTE(v112);
      *(_BYTE *)(v25 + 160) = HIBYTE(v112);
      *(_WORD *)(v25 + 161) = v109;
      if (v23)
      {
        if (!v26)
          break;
      }
      v28 = *(_QWORD *)(a2 + 72);
      if (v28)
      {
        if (v28 == *(_QWORD *)a2
          || (time1 = *(CMTime *)(v25 + 104),
              time2 = *(CMTime *)(v28 + 104),
              v29 = CMTimeCompare(&time1, &time2),
              *(_BYTE *)(v25 + 162) = v29 < 0,
              (v29 & 0x80000000) == 0))
        {
          videoMentorDependencyStateCloseNodesWithUnknownDependents(a2, Mutable);
          CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 64), *(const void **)(a2 + 72));
          v27 = *(_BYTE **)(a2 + 72);
          if (v27)
            goto LABEL_34;
        }
      }
LABEL_35:
      if (HIBYTE(v112))
        *(_QWORD *)(a2 + 72) = CFRetain((CFTypeRef)v25);
      if (v109)
      {
        *(_BYTE *)(v25 + 64) = 0;
        CFArrayAppendValue(Mutable, (const void *)v25);
      }
      Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
      v31 = Count;
      v32 = SHIDWORD(v108);
      if (HIBYTE(v107) && Count > SHIDWORD(v108))
      {
        do
        {
          CountOfNodesWithUnknownDependentsAtLevel = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, v32);
          if (CountOfNodesWithUnknownDependentsAtLevel >= 1)
          {
            v34 = CountOfNodesWithUnknownDependentsAtLevel;
            for (i = 0; i != v34; ++i)
            {
              NodeWithUnknownDependentsAtLevel = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, v32, i);
              *((_BYTE *)NodeWithUnknownDependentsAtLevel + 64) = 0;
              CFArrayAppendValue(Mutable, NodeWithUnknownDependentsAtLevel);
            }
          }
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), v32++, v15);
        }
        while (v32 != v31);
      }
      else if ((_BYTE)v107)
      {
        if (Count > SHIDWORD(v108))
        {
          v37 = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, SHIDWORD(v108));
          if (v37 >= 1)
          {
            v38 = v37;
            for (j = 0; j != v38; ++j)
            {
              v40 = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, SHIDWORD(v108), j);
              *((_BYTE *)v40 + 64) = 0;
              CFArrayAppendValue(Mutable, v40);
              CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), SHIDWORD(v108), v15);
            }
          }
        }
      }
      v41 = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
      if (v41 <= SHIDWORD(v108))
      {
        v42 = v41 - 1;
        do
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 64), v15);
          ++v42;
        }
        while (v42 < SHIDWORD(v108));
      }
      a1 = v104;
      if (!v24)
      {
        v43 = v13;
        v44 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
        v45 = HIDWORD(v108);
        if ((v108 & 0x8000000000000000) == 0)
        {
          do
          {
            v46 = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, v45);
            if (v46 >= 1)
            {
              v47 = v46;
              for (k = 0; k != v47; ++k)
              {
                v49 = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, v45, k);
                v116.length = CFArrayGetCount(v44);
                v116.location = 0;
                if (CFArrayGetFirstIndexOfValue(v44, v116, v49) == -1)
                {
                  CFArrayAppendValue(*((CFMutableArrayRef *)v49 + 3), (const void *)v25);
                  CFArrayAppendValue(*(CFMutableArrayRef *)(v25 + 32), v49);
                }
                CFArrayAppendValue(v44, v49);
                v50 = (const __CFArray *)*((_QWORD *)v49 + 4);
                v117.length = CFArrayGetCount(v50);
                v117.location = 0;
                CFArrayAppendArray(v44, v50, v117);
              }
            }
          }
          while (v45-- > 0);
        }
        v13 = v43;
        a1 = v104;
        v24 = 0;
        if (v44)
          CFRelease(v44);
      }
      if (!CFArrayGetCount(*(CFArrayRef *)(v25 + 32)))
      {
        v52 = *(const void **)a2;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)a2 + 24), (const void *)v25);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v25 + 32), v52);
      }
      if (*(_BYTE *)(v25 + 64))
      {
        v53 = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, SHIDWORD(v108));
        if (!v24)
        {
          v67 = v53;
          if (v53 >= 1)
          {
            v68 = 0;
            do
            {
              v69 = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, SHIDWORD(v108), v68);
              *((_BYTE *)v69 + 64) = 0;
              CFArrayAppendValue(Mutable, v69);
              ++v68;
            }
            while (v67 != v68);
          }
          v70 = *(__CFArray **)(a2 + 64);
          v71 = SHIDWORD(v108);
          goto LABEL_102;
        }
        v54 = SHIDWORD(v108);
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), SHIDWORD(v108));
        if (ValueAtIndex == v15)
        {
          v70 = *(__CFArray **)(a2 + 64);
          v71 = v54;
LABEL_102:
          CFArraySetValueAtIndex(v70, v71, (const void *)v25);
          goto LABEL_104;
        }
        v56 = ValueAtIndex;
        if (CFGetTypeID(ValueAtIndex) == sVideoMentorFrameNodeID)
        {
          v57 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(v57, v56);
          CFArrayAppendValue(v57, (const void *)v25);
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), v54, v57);
          CFRelease(v57);
        }
        else
        {
          CFArrayAppendValue((CFMutableArrayRef)v56, (const void *)v25);
        }
      }
LABEL_104:
      if (v100)
      {
        v72 = *(_QWORD *)(a1 + 528);
        if (v72)
        {
          if (!v98)
          {
            v73 = *(_QWORD *)(a2 + 80);
            v74 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v74 == *(_QWORD *)(CMBaseObjectGetVTable() + 16)
              && (v89 = *(uint64_t (**)(uint64_t, uint64_t))(v74 + 32)) != 0
              && v89(v73, v72))
            {
              v98 = 0;
            }
            else
            {
              if (!*(_BYTE *)(v25 + 160))
              {
                v75 = *(int *)(a1 + 544);
                v13 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0]);
                v76 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                v77 = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
                if (v77 >= v75 + 1)
                  v78 = v75 + 1;
                else
                  v78 = v77;
                if ((_DWORD)v75 == 0x7FFFFFFF)
                  v79 = v77;
                else
                  v79 = v78;
                if (v79 >= 1)
                {
                  for (m = 0; m != v79; ++m)
                  {
                    v81 = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, m);
                    if (v81 >= 1)
                    {
                      v82 = v81;
                      for (n = 0; n != v82; ++n)
                      {
                        v84 = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, m, n);
                        CFArrayAppendValue(v76, v84);
                      }
                    }
                  }
                }
                CFArrayAppendValue(v76, (const void *)v25);
                a1 = v104;
                if (CFArrayGetCount(v76) >= 1)
                {
                  do
                  {
                    v85 = CFArrayGetValueAtIndex(v76, 0);
                    CFArrayRemoveValueAtIndex(v76, 0);
                    if (!CFSetContainsValue(v13, v85))
                    {
                      CFSetSetValue(v13, v85);
                      v86 = (const __CFArray *)v85[4];
                      v118.length = CFArrayGetCount(v86);
                      v118.location = 0;
                      CFArrayAppendArray(v76, v86, v118);
                    }
                  }
                  while (CFArrayGetCount(v76) > 0);
                }
                if (v76)
                  CFRelease(v76);
              }
              v98 = 1;
            }
          }
        }
      }
      if (a5)
      {
        if (*(_BYTE *)(v25 + 158) || *(_BYTE *)(v25 + 159))
        {
          *(_QWORD *)(v25 + 68) = 0x200000002;
        }
        else if (!*(_DWORD *)(v25 + 76))
        {
          *(_DWORD *)(v25 + 76) = 1;
          v90 = *(_QWORD *)(v25 + 56);
          if (v90)
            --*(_DWORD *)(v90 + 80);
        }
      }
      v87 = *(_QWORD *)(a2 + 80);
      v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (!v88)
      {
LABEL_143:
        v14 = 4294954514;
        goto LABEL_145;
      }
      NodeForCursor = v88(v87, 1, &v113);
      if ((_DWORD)NodeForCursor)
      {
LABEL_159:
        v14 = NodeForCursor;
        goto LABEL_145;
      }
      a4 = v99;
      if (v113 != 1)
      {
        *(_BYTE *)(a2 + 88) = 1;
        goto LABEL_153;
      }
      if (*(_BYTE *)(a2 + 88))
        goto LABEL_153;
    }
    videoMentorDependencyStateCloseNodesWithUnknownDependents(a2, Mutable);
    v27 = *(_BYTE **)(a2 + 72);
    if (!v27)
      goto LABEL_35;
    if (v27[64])
    {
      v27[64] = 0;
      CFArrayAppendValue(Mutable, v27);
    }
LABEL_34:
    CFRelease(v27);
    *(_QWORD *)(a2 + 72) = 0;
    goto LABEL_35;
  }
  v13 = 0;
LABEL_7:
  videoMentorDependencyStateCloseNodesWithUnknownDependents(a2, Mutable);
LABEL_8:
  if (a6)
  {
    *a6 = Mutable;
    Mutable = 0;
  }
  v14 = 0;
  if (a7)
  {
    *a7 = v13;
    v13 = 0;
  }
LABEL_145:
  if (v115[0])
    CFRelease(v115[0]);
  if (Mutable)
    CFRelease(Mutable);
  if (v13)
    CFRelease(v13);
  return v14;
}

uint64_t videoMentorReportIssueWithRefreshNode(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *, CFTypeRef *);
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const void *RadarDescriptionString;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v9;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v9 = 0;
  cf[0] = 0;
  v1 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 144);
    if (!v3 || (v3(v2, 0, 0, cf, &v9), !v9))
    {
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v5)
        v5(CMBaseObject, *MEMORY[0x1E0CA2098], *v1, &v9);
    }
  }
  if (FigCanTriggerTapToRadar())
  {
    RadarDescriptionString = (const void *)FigTapToRadarCreateRadarDescriptionString();
    FigTriggerTapToRadar();
    if (RadarDescriptionString)
      CFRelease(RadarDescriptionString);
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (cf[0])
    CFRelease(cf[0]);
  if (v9)
    CFRelease(v9);
  return 0;
}

uint64_t videoMentorRefreshGroupClassifyNodes(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v5;
  _DWORD *ValueAtIndex;
  _DWORD *v7;
  __CFArray *Mutable;
  CFArrayRef *v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex i;
  _DWORD *v13;
  CFIndex v14;
  __CFArray *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  int v27;
  __CFArray *v28;
  CFArrayRef *v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex j;
  _DWORD *v33;
  const void *v34;
  uint64_t result;
  const __CFAllocator *allocator;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  v3 = Count;
  if (Count <= 10000)
  {
    if (Count >= 1)
    {
      v5 = 0;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v5);
        if (ValueAtIndex[19] != 1)
        {
          v7 = ValueAtIndex;
          result = videoMentorFrameNodeDetermineIfIsLeaf(ValueAtIndex, a1);
          if ((_DWORD)result)
            return result;
          if (v7[17] == 1)
          {
            Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
            CFArrayAppendValue(Mutable, v7);
            if (CFArrayGetCount(Mutable) >= 1)
            {
              do
              {
                v9 = (CFArrayRef *)CFArrayGetValueAtIndex(Mutable, 0);
                v10 = CFArrayGetCount(v9[4]);
                if (v10 >= 1)
                {
                  v11 = v10;
                  for (i = 0; i != v11; ++i)
                  {
                    v13 = CFArrayGetValueAtIndex(v9[4], i);
                    if (*((_QWORD *)v13 + 7) == a1 && !v13[17])
                    {
                      v13[17] = 1;
                      CFArrayAppendValue(Mutable, v13);
                    }
                  }
                }
                CFArrayRemoveValueAtIndex(Mutable, 0);
              }
              while (CFArrayGetCount(Mutable) > 0);
            }
            CFRelease(Mutable);
          }
          v14 = v3;
          v15 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(v15, v7);
          if (CFArrayGetCount(v15) < 1)
          {
LABEL_31:
            v27 = 2;
          }
          else
          {
            while (1)
            {
              v16 = CFArrayGetValueAtIndex(v15, 0);
              v17 = v16[2];
              if (v17)
              {
                v18 = v16;
                v19 = *(_QWORD *)(a1 + 64);
                v20 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                v21 = v19 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
                if (v20 != v21
                  || (v26 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 32)) == 0
                  || v26(v17, v19) != -1)
                {
                  v22 = CFArrayGetCount((CFArrayRef)v18[4]);
                  if (v22 >= 1)
                    break;
                }
              }
LABEL_30:
              CFArrayRemoveValueAtIndex(v15, 0);
              if (CFArrayGetCount(v15) <= 0)
                goto LABEL_31;
            }
            v23 = v22;
            v24 = 0;
            while (1)
            {
              v25 = CFArrayGetValueAtIndex((CFArrayRef)v18[4], v24);
              if (v25[7] == a1)
                break;
              CFArrayAppendValue(v15, v25);
              if (v23 == ++v24)
                goto LABEL_30;
            }
            v27 = 1;
          }
          CFRelease(v15);
          v7[18] = v27;
          v28 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(v28, v7);
          v3 = v14;
          if (CFArrayGetCount(v28) >= 1)
          {
            do
            {
              v29 = (CFArrayRef *)CFArrayGetValueAtIndex(v28, 0);
              v30 = CFArrayGetCount(v29[3]);
              if (v30 >= 1)
              {
                v31 = v30;
                for (j = 0; j != v31; ++j)
                {
                  v33 = CFArrayGetValueAtIndex(v29[3], j);
                  if (*((_QWORD *)v33 + 7) == a1 && !v33[18])
                  {
                    v33[18] = 1;
                    CFArrayAppendValue(v28, v33);
                  }
                }
              }
              CFArrayRemoveValueAtIndex(v28, 0);
            }
            while (CFArrayGetCount(v28) > 0);
          }
          CFRelease(v28);
        }
        ++v5;
      }
      while (v5 != v3);
    }
    return 0;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v34 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), 0);
    return videoMentorReportIssueWithRefreshNode((uint64_t)v34);
  }
}

void videoMentorAddRefreshGroupToProcess(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  _QWORD *ValueAtIndex;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  if (!*(_DWORD *)(a2 + 80))
    videoMentorRefreshGroupMarkAsProcessed(a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
    if (Count < 1)
    {
LABEL_14:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 96), (const void *)a2);
    }
    else
    {
      v5 = Count;
      v6 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v6);
        v8 = ValueAtIndex[8];
        v9 = *(_QWORD *)(a2 + 64);
        v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        v11 = v9 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
        if (v10 != v11)
          break;
        v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 32);
        if (!v12 || v12(v8, v9) != -1)
          break;
        if (v5 == ++v6)
          goto LABEL_14;
      }
      if (ValueAtIndex != (_QWORD *)a2)
        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 96), v6, (const void *)a2);
    }
  }
}

CFIndex videoMentorDependencyStateProcessRefreshGroups(uint64_t a1)
{
  CFIndex result;
  const __CFAllocator *v3;
  const CFArrayCallBacks *v4;
  CFArrayRef *ValueAtIndex;
  CFIndex Count;
  CFIndex i;
  const __CFArray *v8;
  CFIndex v9;
  int *v10;
  int v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex j;
  const __CFSet *v15;
  int v16;
  BOOL v17;
  CFIndex v18;
  CFIndex v19;
  CFIndex k;
  const __CFSet *v21;
  CFIndex v22;
  uint64_t v23;
  int v24;
  const __CFSet *v25;
  CFArrayRef *v26;
  CFArrayRef *v27;
  CFArrayRef *v28;
  int v29;
  int v30;
  CFIndex v31;
  CFIndex v32;
  CFIndex v33;
  BOOL v34;
  CFIndex v35;
  uint64_t v36;
  CFArrayRef *v37;
  CFArrayRef *v38;
  CFIndex v39;
  CFIndex v40;
  CFIndex v41;
  const void *v42;
  int refreshed;
  const CFSetCallBacks *v44;
  CFIndex v45;
  const __CFSet *MutableCopy;
  CFIndex v47;
  const void *v48;
  const void *v49;
  __CFArray *Mutable;
  CFMutableSetRef v51;
  __CFSet *v52;
  BOOL v53;
  CFArrayRef *v54;
  CFIndex v55;
  CFIndex v56;
  CFIndex m;
  _DWORD *v58;
  const void *v59;
  const __CFSet *Copy;
  CFIndex v61;
  CFSetRef theSet;
  CFSetRef theSeta;
  const __CFSet *theSetb;
  int v65;
  int v66;
  CFIndex v67;
  uint64_t context;
  CFSetRef v69;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
  if (result < 1)
    return result;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  do
  {
    ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), 0);
    CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 96), 0);
    if (*((_BYTE *)ValueAtIndex + 56)
      || videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex))
    {
      goto LABEL_118;
    }
    Count = CFArrayGetCount(ValueAtIndex[6]);
    if (Count >= 1)
    {
      for (i = Count; i > 0; i = CFArrayGetCount(ValueAtIndex[6]))
      {
        v8 = ValueAtIndex[6];
        v9 = 0;
        ValueAtIndex[6] = CFArrayCreateMutable(v3, 0, &kVideoMentorActionCallbacks);
        do
        {
          v10 = (int *)CFArrayGetValueAtIndex(v8, v9);
          videoMentorDependencyStateExecuteAction((const void **)a1, v10);
          ++v9;
        }
        while (i != v9);
        if (v8)
          CFRelease(v8);
      }
    }
    if (*((_BYTE *)ValueAtIndex + 58))
      v11 = 2;
    else
      v11 = 1;
    v12 = CFArrayGetCount(ValueAtIndex[5]);
    if (v12 >= 1)
    {
      v13 = v12;
      for (j = 0; j != v13; ++j)
      {
        v15 = (const __CFSet *)CFArrayGetValueAtIndex(ValueAtIndex[5], j);
        if (!*((_DWORD *)v15 + 19))
        {
          v16 = *((_DWORD *)v15 + 18);
          v17 = v16 == 1 || v16 == v11;
          if (v17 && *((_DWORD *)v15 + 17) == 2)
          {
            context = 0;
            v69 = v15;
            videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
          }
        }
      }
    }
    if (videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex)|| *((_BYTE *)ValueAtIndex + 58))
    {
      goto LABEL_118;
    }
    if (*((int *)ValueAtIndex + 21) >= 1)
    {
      v18 = CFArrayGetCount(ValueAtIndex[5]);
      if (v18 >= 1)
      {
        v19 = v18;
        for (k = 0; k != v19; ++k)
        {
          v21 = (const __CFSet *)CFArrayGetValueAtIndex(ValueAtIndex[5], k);
          if (!*((_DWORD *)v21 + 19) && *((_DWORD *)v21 + 18) == 2 && *((_DWORD *)v21 + 17) == 2)
          {
            context = 0;
            v69 = v21;
            videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
          }
        }
      }
    }
    if (videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex))goto LABEL_118;
    v22 = CFArrayGetCount(ValueAtIndex[5]);
    if (v22 >= 1)
    {
      v23 = v22;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = (CFArrayRef *)CFArrayGetValueAtIndex(ValueAtIndex[5], v23 - 1);
        v28 = v27;
        v29 = *((_DWORD *)v27 + 19);
        if (v26)
        {
          if (!v29 && *((_DWORD *)v27 + 18) == 2)
          {
            v30 = *((_DWORD *)v27 + 17);
            if (v30 == 2)
            {
              context = 0;
              v69 = (CFSetRef)v27;
              videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
            }
            else if (v30 == 1)
            {
              ++v24;
            }
          }
        }
        else if (v29 || *((_DWORD *)v27 + 18) != 2)
        {
          v26 = 0;
        }
        else
        {
          v65 = v24 + 1;
          if (!v25)
            v25 = (const __CFSet *)v27;
          v31 = CFArrayGetCount(v27[4]);
          if (v31 < 1)
          {
            v26 = v28;
          }
          else
          {
            v32 = v31;
            theSet = v25;
            v33 = 0;
            while (*((_DWORD *)CFArrayGetValueAtIndex(v28[4], v33) + 19))
            {
              if (v32 == ++v33)
              {
                v26 = v28;
                goto LABEL_62;
              }
            }
            v26 = 0;
LABEL_62:
            v25 = theSet;
          }
          v24 = v65;
        }
        v34 = v23-- <= 1;
      }
      while (!v34);
      v66 = v24;
      theSeta = v25;
      if (v26)
      {
        v35 = CFArrayGetCount(ValueAtIndex[5]);
        if (v35 >= 1)
        {
          v36 = v35;
          do
          {
            v37 = (CFArrayRef *)CFArrayGetValueAtIndex(ValueAtIndex[5], v36 - 1);
            if (v37 == v26)
              break;
            v38 = v37;
            if (!*((_DWORD *)v37 + 19) && *((_DWORD *)v37 + 18) == 2 && *((_DWORD *)v37 + 17) == 2)
            {
              v39 = CFArrayGetCount(v37[4]);
              if (v39 >= 1)
              {
                v40 = v39;
                v41 = 0;
                while (1)
                {
                  v42 = CFArrayGetValueAtIndex(v38[4], v41);
                  if (!*((_DWORD *)v42 + 19) && CFArrayGetCount(*((CFArrayRef *)v42 + 3)) == 1)
                    break;
                  if (v40 == ++v41)
                    goto LABEL_78;
                }
                context = 0;
                v69 = (CFSetRef)v38;
                videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
              }
            }
LABEL_78:
            v34 = v36-- <= 1;
          }
          while (!v34);
        }
      }
      v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      if (v66 == 1 && !*((_DWORD *)ValueAtIndex + 21))
      {
        context = 1;
        v69 = theSeta;
        videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
      }
    }
    refreshed = videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex);
    v44 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
    if (refreshed)
      goto LABEL_118;
    if (*((_BYTE *)ValueAtIndex + 57))
      goto LABEL_117;
    v45 = CFArrayGetCount(ValueAtIndex[5]);
    MutableCopy = 0;
    while (v45 >= 1)
    {
      theSetb = MutableCopy;
      v47 = v45 + 1;
      while (1)
      {
        v67 = v47 - 2;
        v48 = CFArrayGetValueAtIndex(ValueAtIndex[5], v47 - 2);
        if (!*((_DWORD *)v48 + 19))
        {
          v49 = v48;
          if (*((_DWORD *)v48 + 18) != 1)
            break;
        }
        if ((unint64_t)--v47 <= 1)
        {
          MutableCopy = theSetb;
          goto LABEL_112;
        }
      }
      Mutable = CFArrayCreateMutable(v3, 0, v4);
      v51 = CFSetCreateMutable(v3, 0, v44);
      v52 = v51;
      if (Mutable)
        v53 = v51 == 0;
      else
        v53 = 1;
      if (!v53)
      {
        CFArrayAppendValue(Mutable, v49);
        if (CFArrayGetCount(Mutable) < 1)
          goto LABEL_105;
        do
        {
          v54 = (CFArrayRef *)CFArrayGetValueAtIndex(Mutable, 0);
          CFArrayRemoveValueAtIndex(Mutable, 0);
          v55 = CFArrayGetCount(v54[4]);
          if (v55 >= 1)
          {
            v56 = v55;
            for (m = 0; m != v56; ++m)
            {
              v58 = CFArrayGetValueAtIndex(v54[4], m);
              if (!v58[19])
              {
                v59 = v58;
                if (!CFSetContainsValue(v52, v58))
                {
                  CFSetSetValue(v52, v59);
                  CFArrayAppendValue(Mutable, v59);
                }
              }
            }
          }
        }
        while (CFArrayGetCount(Mutable) >= 1);
      }
      if (Mutable)
LABEL_105:
        CFRelease(Mutable);
      MutableCopy = theSetb;
      if (theSetb)
      {
        Copy = CFSetCreateCopy(v3, theSetb);
        context = (uint64_t)theSetb;
        v69 = v52;
        CFSetApplyFunction(Copy, (CFSetApplierFunction)videoMentorRemoveFromSetIfNotInIntersection, &context);
        CFRelease(Copy);
      }
      else
      {
        MutableCopy = CFSetCreateMutableCopy(v3, 0, v52);
      }
      v45 = v67;
      if (v52)
        CFRelease(v52);
      v61 = CFSetGetCount(MutableCopy);
      v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      v44 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
      if (!v61)
        break;
    }
LABEL_112:
    if (MutableCopy)
    {
      if (CFSetGetCount(MutableCopy) >= 1)
        CFSetApplyFunction(MutableCopy, (CFSetApplierFunction)videoMentorDependencyStateSelectNodeApplier, (void *)a1);
      CFRelease(MutableCopy);
    }
    *((_BYTE *)ValueAtIndex + 57) = 1;
LABEL_117:
    videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex);
LABEL_118:
    CFRelease(ValueAtIndex);
    result = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
  }
  while (result > 0);
  return result;
}

uint64_t FigSampleBufferConsumerSetAttachmentOnPendingSampleBuffersInPTSRange(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t result;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, __int128 *, __int128 *);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  result = CMBaseObjectGetVTable();
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(*(_QWORD *)(result + 16) + 56);
  if (v11)
  {
    v14 = *a4;
    v15 = *((_QWORD *)a4 + 2);
    v12 = *a5;
    v13 = *((_QWORD *)a5 + 2);
    return v11(a1, a2, a3, &v14, &v12);
  }
  return result;
}

uint64_t videoMentorSyncFrameIsOpenGOP(uint64_t a1)
{
  uint64_t FigBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v2)
    v2(FigBaseObject, CFSTR("SampleDependencyAttributes"), *MEMORY[0x1E0C9AE00], &cf);
  FigCFDictionaryGetIntIfPresent();
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t videoMentorRefreshGroupCreate(const __CFAllocator *a1, __int128 *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  __int128 v10;
  uint64_t v12;

  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(v7 + 40) = Mutable;
  if (Mutable
    && (v9 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kVideoMentorActionCallbacks),
        (*(_QWORD *)(v7 + 48) = v9) != 0))
  {
    v10 = *a2;
    *(_QWORD *)(v7 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v7 + 16) = v10;
    *a3 = v7;
    return 0;
  }
  else
  {
    v12 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v7);
    return v12;
  }
}

void videoMentorRefreshGroupAddNode(uint64_t a1, uint64_t a2)
{
  int v4;
  CFIndex Count;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(const void *, uint64_t);
  const void *v16;
  const void *v17;
  uint64_t (*v18)(uint64_t, uint64_t);

  *(_QWORD *)(a2 + 56) = CFRetain((CFTypeRef)a1);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), (const void *)a2);
  v4 = *(_DWORD *)(a2 + 76);
  if (v4 == 2)
  {
    ++*(_DWORD *)(a1 + 84);
  }
  else if (!v4)
  {
    ++*(_DWORD *)(a1 + 80);
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  v6 = *(const void **)(a2 + 16);
  if (Count == 1)
  {
    v7 = *(const void **)(a2 + 16);
    if (!v6)
      goto LABEL_23;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v8)
      v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    else
      v10 = 0;
    if (v9 == v10 && (v15 = *(uint64_t (**)(const void *, uint64_t))(v9 + 32)) != 0 && v15(v6, v8) == -1)
      v6 = *(const void **)(a2 + 16);
    else
      v6 = 0;
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a1 + 72);
    v13 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v12)
      v14 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    else
      v14 = 0;
    if (v13 == v14 && (v18 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 32)) != 0 && v18(v11, v12) == 1)
    {
      v7 = *(const void **)(a2 + 16);
      if (!v6)
        goto LABEL_23;
    }
    else
    {
      v7 = 0;
      if (!v6)
        goto LABEL_23;
    }
  }
  v16 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  CFRetain(v6);
  if (v16)
    CFRelease(v16);
LABEL_23:
  if (v7)
  {
    v17 = *(const void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v7;
    CFRetain(v7);
    if (v17)
      CFRelease(v17);
  }
}

_QWORD *videoMentorActionArrayRetain(const __CFAllocator *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = CFAllocatorAllocate(a1, 16, 0);
  v4 = v3;
  if (v3)
  {
    *(_DWORD *)v3 = *(_DWORD *)a2;
    v3[1] = CFRetain(*(CFTypeRef *)(a2 + 8));
  }
  return v4;
}

void videoMentorActionArrayRelease(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFRelease(a2[1]);
  CFAllocatorDeallocate(a1, a2);
}

__CFString *videoMentorActionArrayCopyDescription(int *a1)
{
  __CFString *Mutable;
  __CFString *v3;
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  v4 = "drop";
  v5 = "select";
  v6 = *a1;
  v7 = "??";
  if (*a1 == 2)
    v7 = "reclassify";
  if (v6 != 1)
    v5 = v7;
  if (v6)
    v4 = v5;
  CFStringAppendFormat(Mutable, 0, CFSTR("VideoMentorAction: %p %s node %@\n"), a1, v4, *((_QWORD *)a1 + 1));
  return v3;
}

uint64_t videoMentorCursorIsInPlayRange(const void *a1, uint64_t a2, CMTime *a3, _BYTE *a4)
{
  __int128 v7;
  uint64_t CursorPTSRange;
  CMTimeRange v10;
  CMTime v11;
  CMTime time2;
  CMTimeRange v13;

  v7 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v13.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v13.start.epoch = v7;
  *(_OWORD *)&v13.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  *a4 = 0;
  CursorPTSRange = videoMentorGetCursorPTSRange(a1, &v13);
  if (!(_DWORD)CursorPTSRange)
  {
    *(_OWORD *)&v10.start.value = *(_OWORD *)&v13.start.value;
    v10.start.epoch = v13.start.epoch;
    time2 = *a3;
    if (CMTimeCompare(&v10.start, &time2) < 0)
    {
      v10 = v13;
      CMTimeRangeGetEnd(&v11, &v10);
      *(_OWORD *)&v10.start.value = *(_OWORD *)a2;
      v10.start.epoch = *(_QWORD *)(a2 + 16);
      if (CMTimeCompare(&v10.start, &v11) < 0)
        *a4 = 1;
    }
  }
  return CursorPTSRange;
}

void videoMentorDependencyStateCloseNodesWithUnknownDependents(uint64_t a1, __CFArray *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  CFIndex CountOfNodesWithUnknownDependentsAtLevel;
  CFIndex v8;
  CFIndex j;
  const __CFArray *NodeWithUnknownDependentsAtLevel;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (Count >= 1)
  {
    v5 = Count;
    for (i = 0; i != v5; ++i)
    {
      CountOfNodesWithUnknownDependentsAtLevel = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a1, i);
      if (CountOfNodesWithUnknownDependentsAtLevel >= 1)
      {
        v8 = CountOfNodesWithUnknownDependentsAtLevel;
        for (j = 0; j != v8; ++j)
        {
          NodeWithUnknownDependentsAtLevel = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a1, i, j);
          *((_BYTE *)NodeWithUnknownDependentsAtLevel + 64) = 0;
          CFArrayAppendValue(a2, NodeWithUnknownDependentsAtLevel);
        }
      }
    }
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 64));
}

CFIndex videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(uint64_t a1, CFIndex a2)
{
  const __CFArray *ValueAtIndex;
  const __CFArray *v3;
  CFTypeID v4;

  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), a2);
  if (ValueAtIndex == (const __CFArray *)*MEMORY[0x1E0C9B0D0])
    return 0;
  v3 = ValueAtIndex;
  v4 = CFGetTypeID(ValueAtIndex);
  if (v4 == CFArrayGetTypeID())
    return CFArrayGetCount(v3);
  else
    return 1;
}

const __CFArray *videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(uint64_t a1, CFIndex a2, CFIndex a3)
{
  const __CFArray *ValueAtIndex;
  const __CFArray *v5;
  CFTypeID v6;

  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), a2);
  v5 = ValueAtIndex;
  if (a3)
    return (const __CFArray *)CFArrayGetValueAtIndex(v5, a3);
  v6 = CFGetTypeID(ValueAtIndex);
  if (v6 == CFArrayGetTypeID())
  {
    a3 = 0;
    return (const __CFArray *)CFArrayGetValueAtIndex(v5, a3);
  }
  return v5;
}

void videoMentorDependencyStateExecuteAction(const void **a1, int *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const __CFArray *Copy;
  CFIndex v7;
  CFIndex v8;
  CFIndex m;
  void *v10;
  uint64_t v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  _QWORD *ValueAtIndex;
  _QWORD *v16;
  uint64_t v17;
  __CFArray *Mutable;
  const __CFArray *v19;
  const void *v20;
  int32x2_t *v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex j;
  _DWORD *v25;
  CFIndex v26;
  CFIndex v27;
  CFIndex k;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *a2;
  if (*a2 == 2)
  {
    if ((*(_DWORD *)(v3 + 76) - 1) >= 2 && *(_DWORD *)(v3 + 68) != 2)
    {
      *(_DWORD *)(v3 + 68) = 0;
      videoMentorFrameNodeDetermineIfIsLeaf((const void *)v3, *(_QWORD *)(v3 + 56));
      if (*(_DWORD *)(v3 + 68) == 2)
      {
        Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 32));
        if (Count >= 1)
        {
          v13 = Count;
          for (i = 0; i != v13; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 32), i);
            if (!*((_DWORD *)ValueAtIndex + 19))
            {
              v16 = ValueAtIndex;
              v17 = ValueAtIndex[7];
              if (v17)
              {
                v33 = ValueAtIndex;
                v32 = 2;
                if (!*(_BYTE *)(v17 + 56))
                {
                  CFArrayAppendValue(*(CFMutableArrayRef *)(v17 + 48), &v32);
                  videoMentorAddRefreshGroupToProcess((uint64_t)a1, v16[7]);
                }
              }
            }
          }
        }
        videoMentorAddRefreshGroupToProcess((uint64_t)a1, *(_QWORD *)(v3 + 56));
      }
      else if (CFArrayGetCount(*(CFArrayRef *)(v3 + 24)) == 1)
      {
        v31 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 24), 0) + 7);
        if (v31)
          videoMentorAddRefreshGroupToProcess((uint64_t)a1, v31);
      }
    }
  }
  else if (v4 == 1)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v19 = Mutable;
      CFArrayAppendValue(Mutable, (const void *)v3);
      if (CFArrayGetCount(v19) >= 1)
      {
        do
        {
          v20 = CFArrayGetValueAtIndex(v19, 0);
          CFArrayRemoveValueAtIndex(v19, 0);
          if (*((_DWORD *)v20 + 19) != 2 && v20 != *a1)
          {
            *((_DWORD *)v20 + 19) = 2;
            v21 = (int32x2_t *)*((_QWORD *)v20 + 7);
            if (v21)
              v21[10] = vadd_s32(v21[10], (int32x2_t)0x1FFFFFFFFLL);
            v22 = CFArrayGetCount(*((CFArrayRef *)v20 + 4));
            if (v22 >= 1)
            {
              v23 = v22;
              for (j = 0; j != v23; ++j)
              {
                v25 = CFArrayGetValueAtIndex(*((CFArrayRef *)v20 + 4), j);
                if (v25[19] != 2)
                  CFArrayAppendValue(v19, v25);
              }
            }
            v26 = CFArrayGetCount(*((CFArrayRef *)v20 + 3));
            if (v26 >= 1)
            {
              v27 = v26;
              for (k = 0; k != v27; ++k)
              {
                v29 = *((_QWORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)v20 + 3), k) + 7);
                if (v29)
                  videoMentorAddRefreshGroupToProcess((uint64_t)a1, v29);
              }
            }
            v30 = *((_QWORD *)v20 + 7);
            if (v30)
              videoMentorAddRefreshGroupToProcess((uint64_t)a1, v30);
          }
        }
        while (CFArrayGetCount(v19) > 0);
      }
      CFRelease(v19);
    }
  }
  else if (!v4 && *(_DWORD *)(v3 + 76) != 1)
  {
    *(_DWORD *)(v3 + 76) = 1;
    v5 = *(_QWORD *)(v3 + 56);
    if (v5)
    {
      --*(_DWORD *)(v5 + 80);
      *(_BYTE *)(v5 + 57) = 0;
    }
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(v3 + 32));
    v7 = CFArrayGetCount(Copy);
    if (v7 >= 1)
    {
      v8 = v7;
      for (m = 0; m != v8; ++m)
      {
        v10 = (void *)CFArrayGetValueAtIndex(Copy, m);
        videoMentorFrameNodeRemoveDependentNode((CFMutableArrayRef *)v10, (CFMutableArrayRef *)v3, 1);
        if (!*((_DWORD *)v10 + 19))
        {
          v11 = *((_QWORD *)v10 + 7);
          if (v11)
          {
            v33 = v10;
            v32 = 2;
            if (!*(_BYTE *)(v11 + 56))
            {
              CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 48), &v32);
              videoMentorAddRefreshGroupToProcess((uint64_t)a1, *((_QWORD *)v10 + 7));
            }
          }
        }
      }
    }
    if (Copy)
      CFRelease(Copy);
  }
}

void videoMentorFrameNodeRemoveDependentNode(CFMutableArrayRef *a1, CFMutableArrayRef *a2, int a3)
{
  const __CFArray *v6;
  CFIndex FirstIndexOfValue;
  const __CFArray *v8;
  CFIndex v9;
  CFRange v10;
  CFRange v11;

  v6 = a1[3];
  v10.length = CFArrayGetCount(v6);
  v10.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v10, a2);
  CFArrayRemoveValueAtIndex(a1[3], FirstIndexOfValue);
  v8 = a2[4];
  v11.length = CFArrayGetCount(v8);
  v11.location = 0;
  v9 = CFArrayGetFirstIndexOfValue(v8, v11, a1);
  CFArrayRemoveValueAtIndex(a2[4], v9);
  if (a3)
  {
    CFArrayAppendValue(a1[5], a2);
    CFArrayAppendValue(a2[6], a1);
  }
}

uint64_t videoMentorFrameNodeDetermineIfIsLeaf(const void *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFMutableArrayRef v6;
  __CFArray *v7;
  BOOL v8;
  CFIndex Count;
  unint64_t v10;
  CFIndex v11;
  CFArrayRef *ValueAtIndex;
  char *v13;
  CFIndex v14;
  char *v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  int v19;
  int v20;
  uint64_t refreshed;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v6 = CFArrayCreateMutable(v4, 0, 0);
  v7 = v6;
  if (Mutable)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8)
  {
LABEL_29:
    refreshed = 0;
    if (Mutable)
      goto LABEL_33;
    goto LABEL_34;
  }
  CFArrayAppendValue(Mutable, a1);
  CFArrayAppendValue(v7, 0);
  Count = CFArrayGetCount(Mutable);
  if (Count < 1)
  {
    refreshed = 0;
    goto LABEL_33;
  }
  v10 = 0;
  while (1)
  {
    v11 = Count - 1;
    ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(Mutable, Count - 1);
    v13 = (char *)CFArrayGetValueAtIndex(v7, v11);
    v14 = CFArrayGetCount(ValueAtIndex[3]);
    v15 = (char *)v14;
    if (v10 >> 4 > 0x270 || v14 >= 10001)
      break;
    if (!v13)
    {
      if (*((_DWORD *)ValueAtIndex + 17))
        goto LABEL_27;
      if (*((_BYTE *)ValueAtIndex + 64))
      {
        v20 = 1;
LABEL_25:
        *((_DWORD *)ValueAtIndex + 17) = v20;
LABEL_27:
        CFArrayRemoveValueAtIndex(Mutable, v11);
        CFArrayRemoveValueAtIndex(v7, v11);
        goto LABEL_28;
      }
    }
    if (v14 > (uint64_t)v13)
    {
      while (1)
      {
        v16 = CFArrayGetValueAtIndex(ValueAtIndex[3], (CFIndex)v13);
        v17 = *((_QWORD *)v16 + 7);
        if (!v17 || v17 != a2)
        {
          v19 = 1;
LABEL_21:
          *((_DWORD *)ValueAtIndex + 17) = v19;
          goto LABEL_23;
        }
        v18 = v16;
        v19 = *((_DWORD *)v16 + 17);
        if (!v19)
          break;
        if (v19 == 1)
          goto LABEL_21;
        if (v15 == ++v13)
          goto LABEL_24;
      }
      CFArraySetValueAtIndex(v7, v11, v13);
      CFArrayAppendValue(Mutable, v18);
      CFArrayAppendValue(v7, 0);
    }
LABEL_23:
    if (v13 == v15)
    {
LABEL_24:
      v20 = 2;
      goto LABEL_25;
    }
    if (*((_DWORD *)ValueAtIndex + 17))
      goto LABEL_27;
LABEL_28:
    ++v10;
    Count = CFArrayGetCount(Mutable);
    if (Count <= 0)
      goto LABEL_29;
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  refreshed = videoMentorReportIssueWithRefreshNode((uint64_t)ValueAtIndex);
  if (Mutable)
LABEL_33:
    CFRelease(Mutable);
LABEL_34:
  if (v7)
    CFRelease(v7);
  return refreshed;
}

__n128 videoMentorRefreshGroupMarkAsProcessed(uint64_t a1)
{
  CFIndex Count;
  __n128 result;
  CFIndex v4;
  __n128 *v5;
  CFIndex i;
  __n128 *ValueAtIndex;
  __n128 *v8;
  __n128 *v9;
  CMTime v10;
  CMTime time1;
  CMTime v12;

  v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 48));
  *(_BYTE *)(a1 + 56) = 1;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  if (Count >= 1)
  {
    v4 = Count;
    v5 = 0;
    for (i = 0; i != v4; ++i)
    {
      ValueAtIndex = (__n128 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), i);
      if (ValueAtIndex[4].n128_u32[3] == 2)
      {
        v8 = ValueAtIndex;
        v9 = ValueAtIndex + 8;
        if (!v5
          || (time1 = v12,
              *(__n128 *)&v10.value = *v9,
              v10.epoch = ValueAtIndex[9].n128_i64[0],
              CMTimeCompare(&time1, &v10) < 0))
        {
          result = *v9;
          v12 = *(CMTime *)v9->n128_u8;
          v5 = v8;
        }
      }
    }
    if (v5)
    {
      result = *(__n128 *)(a1 + 16);
      v5[6].n128_u64[0] = *(_QWORD *)(a1 + 32);
      v5[5] = result;
    }
  }
  return result;
}

uint64_t videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup(const void **a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  _DWORD *ValueAtIndex;
  _QWORD v9[2];

  if (!*(_BYTE *)(a2 + 58) && *(_DWORD *)(a2 + 80) == 1 && !*(_DWORD *)(a2 + 84))
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 40));
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 40), v7);
        if (!ValueAtIndex[19])
          break;
        if (v6 == ++v7)
          goto LABEL_4;
      }
      v9[1] = ValueAtIndex;
      v9[0] = 1;
      videoMentorDependencyStateExecuteAction(a1, (int *)v9);
    }
  }
LABEL_4:
  if (!*(_DWORD *)(a2 + 80))
    videoMentorRefreshGroupMarkAsProcessed(a2);
  return *(unsigned __int8 *)(a2 + 56);
}

void videoMentorDependencyStateSelectNodeApplier(uint64_t a1, const void **a2)
{
  _QWORD v2[2];

  if (*(_DWORD *)(a1 + 76) != 2)
  {
    v2[0] = 1;
    v2[1] = a1;
    videoMentorDependencyStateExecuteAction(a2, (int *)v2);
  }
}

void videoMentorRemoveFromSetIfNotInIntersection(void *value, CFMutableSetRef *a2)
{
  if (!CFSetContainsValue(a2[1], value))
    CFSetRemoveValue(*a2, value);
}

void videoMentorSavedFrameDestroy(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    v2 = (const void *)a1[1];
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

void videoMentorEnqueueEditBoundaryMarker(_QWORD *a1, uint64_t a2, CMTime *a3)
{
  void (*v5)(_QWORD, uint64_t, CMSampleBufferRef);
  uint64_t v6;
  CMSampleBufferRef v7;
  void (*v8)(uint64_t, CMSampleBufferRef);
  CMSampleTimingInfo sampleTimingArray;
  CMSampleBufferRef v10;

  v10 = 0;
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E68];
  sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  sampleTimingArray.presentationTimeStamp = *a3;
  sampleTimingArray.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v10))
  {
    v5 = (void (*)(_QWORD, uint64_t, CMSampleBufferRef))a1[7];
    if (v5)
      v5(a1[9], a2, v10);
    CMSetAttachment(v10, (CFStringRef)*MEMORY[0x1E0CA2670], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
    v6 = a1[3];
    v7 = v10;
    v8 = *(void (**)(uint64_t, CMSampleBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v8)
      v8(v6, v7);
    CFRelease(v10);
  }
}

uint64_t videoMentorSimulateSyncFrameClustersOnly(uint64_t a1, CMTime *a2, CMTime *a3, CMTime *a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, uint64_t a9)
{
  uint64_t (*v17)(uint64_t, char *, _QWORD, _QWORD, __int16 *);
  uint64_t v18;
  int v19;
  uint64_t (*v20)(uint64_t, CMTime *, CMTime *, _QWORD);
  unsigned int v21;
  BOOL v22;
  int v23;
  __int128 v27;
  __int128 v28;
  uint64_t (*v29)(uint64_t, CFTypeRef *);
  uint64_t v30;
  CFTypeRef v31;
  void (*v32)(CFTypeRef, _QWORD, _QWORD);
  CFTypeRef v33;
  void (*v34)(CFTypeRef, uint64_t);
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  CMTimeEpoch epoch;
  CMTime v39;
  CMTime time2;
  CMTime time1;
  CFTypeRef cf;
  __int16 v43;

  v43 = 0;
  cf = 0;
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64))
  {
    v17 = *(uint64_t (**)(uint64_t, char *, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 64);
    if (v17)
    {
      v18 = v17(a1, (char *)&v43 + 1, 0, 0, &v43);
      if (!(_DWORD)v18)
      {
        v19 = HIBYTE(v43);
        goto LABEL_18;
      }
LABEL_30:
      FigSignalErrorAt();
      goto LABEL_31;
    }
LABEL_29:
    v18 = 4294954514;
    goto LABEL_30;
  }
  LOBYTE(time1.value) = 0;
  LOBYTE(time2.value) = 0;
  v20 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v20)
    goto LABEL_29;
  v18 = v20(a1, &time1, &time2, 0);
  if ((_DWORD)v18)
    goto LABEL_30;
  v21 = LOBYTE(time1.value) - 66;
  v22 = v21 > 0xE;
  v23 = (1 << v21) & 0x4081;
  if (v22 || v23 == 0)
  {
    v30 = FigSignalErrorAt();
    goto LABEL_55;
  }
  v19 = LOBYTE(time1.value) == 73 && LOBYTE(time2.value) == 0;
  HIBYTE(v43) = v19;
  LOBYTE(v43) = LOBYTE(time1.value) == 66;
LABEL_18:
  if (v19)
  {
    if ((*(_BYTE *)(a9 + 16) & 1) == 0
      || (time1 = *(CMTime *)(a9 + 4), time2 = *a2, CMTimeCompare(&time1, &time2) <= 0))
    {
      *a6 = 1;
      *a8 = 1;
      *(_BYTE *)(a9 + 76) = videoMentorSyncFrameIsOpenGOP(a1);
      v27 = *(_OWORD *)&a2->value;
      *(_QWORD *)(a9 + 44) = a2->epoch;
      *(_OWORD *)(a9 + 28) = v27;
      if (!*a7)
        goto LABEL_66;
      *(_DWORD *)a9 = 1;
      v28 = *(_OWORD *)&a2->value;
      *(_QWORD *)(a9 + 68) = a2->epoch;
      *(_OWORD *)(a9 + 52) = v28;
      if (a5 < 2)
        goto LABEL_47;
      v29 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v29)
      {
        v18 = 4294954514;
        goto LABEL_31;
      }
      v30 = v29(a1, &cf);
      if (!(_DWORD)v30)
      {
        v31 = cf;
        v32 = *(void (**)(CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
        if (v32)
          v32(v31, (a5 - 1), 0);
        v33 = cf;
        v34 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v34)
          v34(v33, a9 + 52);
LABEL_47:
        if ((a4->flags & 0x1D) == 1
          && (time1 = *a4, time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], CMTimeCompare(&time1, &time2) >= 1))
        {
          v37 = (_OWORD *)(a9 + 4);
          if ((*(_BYTE *)(a9 + 16) & 1) != 0)
          {
            *(_OWORD *)&time2.value = *v37;
            epoch = *(_QWORD *)(a9 + 20);
          }
          else
          {
            *(_OWORD *)&time2.value = *(_OWORD *)&a2->value;
            epoch = a2->epoch;
          }
          time2.epoch = epoch;
          v39 = *a4;
          CMTimeAdd(&time1, &time2, &v39);
          *v37 = *(_OWORD *)&time1.value;
          *(_QWORD *)(a9 + 20) = time1.epoch;
        }
        else
        {
          time2 = *(CMTime *)(a9 + 28);
          v39 = *a3;
          CMTimeAdd(&time1, &time2, &v39);
          *(CMTime *)(a9 + 4) = time1;
        }
        goto LABEL_64;
      }
LABEL_55:
      v18 = v30;
      goto LABEL_31;
    }
  }
  if (!*(_BYTE *)(a9 + 77))
  {
    if (*(_BYTE *)(a9 + 76))
    {
      time1 = *a2;
      time2 = *(CMTime *)(a9 + 28);
      if (CMTimeCompare(&time1, &time2) < 0)
        goto LABEL_57;
    }
    if (!*a7 || !*a8)
    {
      if ((_BYTE)v43)
      {
LABEL_57:
        v18 = 0;
        *a6 = 0;
LABEL_59:
        *a7 = 0;
        goto LABEL_31;
      }
LABEL_58:
      v18 = 0;
      *a6 = 1;
      goto LABEL_59;
    }
    *a6 = 1;
    *a7 = 1;
    *(_DWORD *)a9 = 1;
    v35 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a9 + 44) = a2->epoch;
    *(_OWORD *)(a9 + 28) = v35;
    v36 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a9 + 68) = a2->epoch;
    *(_OWORD *)(a9 + 52) = v36;
    goto LABEL_47;
  }
  if (*(_DWORD *)a9 >= a5)
  {
    v18 = 0;
    *a6 = 0;
    *a7 = 0;
    if ((_BYTE)v43)
      goto LABEL_31;
    *a8 = 0;
    *(_BYTE *)(a9 + 76) = 0;
  }
  else
  {
    time1 = *(CMTime *)(a9 + 28);
    time2 = *a2;
    if (CMTimeCompare(&time1, &time2) > 0
      || (time1 = *a2, time2 = *(CMTime *)(a9 + 52), CMTimeCompare(&time1, &time2) > 0))
    {
      if ((_BYTE)v43)
        goto LABEL_57;
      if (*(_BYTE *)(a9 + 76))
      {
        time1 = *a2;
        time2 = *(CMTime *)(a9 + 28);
        if (CMTimeCompare(&time1, &time2) < 0)
          goto LABEL_57;
      }
      goto LABEL_58;
    }
    *a6 = 1;
    *a7 = 1;
    ++*(_DWORD *)a9;
  }
LABEL_64:
  if (*a7)
  {
    v18 = 0;
    *(_BYTE *)(a9 + 77) = 1;
    goto LABEL_31;
  }
LABEL_66:
  v18 = 0;
LABEL_31:
  if (cf)
    CFRelease(cf);
  return v18;
}

uint64_t videoMentorSimulateIFramesOnly(uint64_t a1, CMTime *a2, CMTime *a3, CMTime *a4, int a5, _BYTE *a6, _BYTE *a7)
{
  uint64_t (*v14)(uint64_t, CMTime *, CMTime *, _QWORD);
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  BOOL v20;
  CMTimeEpoch epoch;
  uint64_t (*v22)(uint64_t, char *, __int16 *, _QWORD, _QWORD);
  __int128 v24;
  CMTime v25;
  CMTime lhs;
  CMTime v27;
  __int16 v28;

  v28 = 0;
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72))
  {
    LOBYTE(v27.value) = 0;
    LOBYTE(lhs.value) = 0;
    v14 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 72);
    if (v14)
    {
      v15 = v14(a1, &v27, &lhs, 0);
      if (!(_DWORD)v15)
      {
        v16 = LOBYTE(v27.value) - 66;
        v17 = v16 > 0xE;
        v18 = (1 << v16) & 0x4081;
        if (v17 || v18 == 0)
          return FigSignalErrorAt();
        v20 = LOBYTE(v27.value) == 73;
        if (LOBYTE(lhs.value))
          v20 = 0;
        HIBYTE(v28) = v20;
        if (LOBYTE(v27.value) == 73)
          goto LABEL_11;
LABEL_17:
        v15 = 0;
        *a6 = 0;
        return v15;
      }
LABEL_19:
      FigSignalErrorAt();
      return v15;
    }
LABEL_18:
    v15 = 4294954514;
    goto LABEL_19;
  }
  v22 = *(uint64_t (**)(uint64_t, char *, __int16 *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 64);
  if (!v22)
    goto LABEL_18;
  v15 = v22(a1, (char *)&v28 + 1, &v28, 0, 0);
  if ((_DWORD)v15)
    goto LABEL_19;
  if (!(HIBYTE(v28) | v28))
    goto LABEL_17;
LABEL_11:
  if ((a4->flags & 0x1D) == 1)
  {
    memset(&v27, 0, sizeof(v27));
    if (a5 < 0)
    {
      lhs = *a4;
      *(_OWORD *)&v25.value = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
    }
    else
    {
      lhs = *a2;
      *(_OWORD *)&v25.value = *(_OWORD *)&a4->value;
      epoch = a4->epoch;
    }
    v25.epoch = epoch;
    CMTimeSubtract(&v27, &lhs, &v25);
    lhs = v27;
    v25 = *a3;
    if (CMTimeCompare(&lhs, &v25) < 0)
      *a6 = 0;
  }
  if (!*a6)
    return 0;
  if (HIBYTE(v28))
    *a7 = 1;
  v15 = 0;
  v24 = *(_OWORD *)&a2->value;
  a4->epoch = a2->epoch;
  *(_OWORD *)&a4->value = v24;
  return v15;
}

void videoMentorUpdateUpcomingOutputPTSRangeAnnouncement(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, CMTime *a7)
{
  unsigned int (*v14)(uint64_t, CMTime *);
  unsigned int (*v15)(uint64_t, CMTime *);
  unsigned int (*v16)(uint64_t, uint64_t, CMTime *, CMTime *);
  char v17;
  void (*v18)(_QWORD, uint64_t, _QWORD, CMTime *, __int128 *);
  CMTimeEpoch epoch;
  CMTime v20;
  CMTime time2;
  CMTime time1;
  CMTime v23;
  __int128 v24;
  uint64_t v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;

  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  v24 = *MEMORY[0x1E0CA2E30];
  v25 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  v14 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v14
    || v14(a2, &v27)
    || (v27.flags & 0x1D) != 1
    || (v15 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40)) == 0
    || v15(a2, &v28)
    || (v28.flags & 0x1D) != 1)
  {
    FigSignalErrorAt();
    return;
  }
  v26 = v28;
  v23 = *a7;
  if ((v23.flags & 0x1D) == 1 && (time1 = v27, time2 = *a7, CMTimeCompare(&time1, &time2) < 0))
  {
    v26 = *a6;
    v17 = 1;
  }
  else
  {
    if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 208)
      || (v16 = *(unsigned int (**)(uint64_t, uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 208)) == 0
      || v16(a2, a3, &v26, &v23))
    {
      if (FigSampleCursorUtilityGetMinimumUpcomingPresentationTime(a2, a3, &v26, &v23))
        return;
    }
    v17 = 0;
  }
  MEMORY[0x19402EEEC](a1[10]);
  v18 = (void (*)(_QWORD, uint64_t, _QWORD, CMTime *, __int128 *))a1[8];
  if (v18)
  {
    if ((v28.flags & 0x1D) == 1)
      v18(a1[9], a4, 0, &v28, &v24);
    if ((v17 & 1) == 0 && (v26.flags & 0x1D) == 1)
      ((void (*)(_QWORD, uint64_t, _QWORD, CMTime *, __int128 *))a1[8])(a1[9], a4, 0, &v26, &v24);
  }
  MEMORY[0x19402EF04](a1[10]);
  time2 = *a5;
  v20 = v28;
  CMTimeMaximum(&time1, &time2, &v20);
  *(_OWORD *)&a5->value = *(_OWORD *)&time1.value;
  epoch = time1.epoch;
  a5->epoch = time1.epoch;
  *(_OWORD *)&time1.value = *(_OWORD *)&a5->value;
  time1.epoch = epoch;
  time2 = v26;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    v26 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v23 = v26;
  }
  time1 = *a6;
  time2 = v26;
  if (CMTimeCompare(&time1, &time2))
  {
    time1 = v26;
    videoMentorPostMinAndMaxUpcomingOutputPTS((uint64_t)a1, (uint64_t)&time1, MEMORY[0x1E0CA2E18]);
    *a6 = v26;
    *a7 = v23;
  }
}

void videoMentorDependencyStateForgetObsoleteRefreshGroups(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  CFMutableArrayRef ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex j;
  CFArrayRef *v13;
  CFMutableArrayRef *v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex k;
  CFMutableArrayRef *v18;
  CFMutableArrayRef *v19;
  CFMutableArrayRef *v20;
  CFMutableArrayRef *v21;
  CFIndex v22;
  CFRange v23;
  const void *v24;
  uint64_t (*v25)(CFTypeRef, uint64_t);
  CFTypeRef cf;
  CFIndex v27;

  cf = CFRetain(*(CFTypeRef *)(a2 + 16));
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (Count >= 1)
  {
    v4 = Count;
    for (i = 0; i < v4; ++i)
    {
      ValueAtIndex = (CFMutableArrayRef)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
      v7 = *((_QWORD *)ValueAtIndex + 9);
      v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      v27 = v4;
      if (v7)
        v9 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      else
        v9 = 0;
      if (v8 == v9)
      {
        v25 = *(uint64_t (**)(CFTypeRef, uint64_t))(v8 + 32);
        if (v25)
        {
          if (v25(cf, v7) == -1)
            continue;
        }
      }
      v10 = CFArrayGetCount(*((CFArrayRef *)ValueAtIndex + 5));
      if (v10 >= 1)
      {
        v11 = v10;
        for (j = 0; j != v11; ++j)
        {
          v13 = (CFArrayRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 5), j);
          if (CFArrayGetCount(v13[3]) >= 1)
          {
            do
            {
              v14 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v13[3], 0);
              if (v14[7] != ValueAtIndex || *((_DWORD *)v13 + 17) == 1)
              {
                v15 = CFArrayGetCount(v13[4]);
                if (v15 >= 1)
                {
                  v16 = v15;
                  for (k = 0; k != v16; ++k)
                  {
                    v18 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v13[4], k);
                    CFArrayAppendValue(v18[3], v14);
                    CFArrayAppendValue(v14[4], v18);
                  }
                }
              }
              videoMentorFrameNodeRemoveDependentNode(v13, v14, 0);
            }
            while (CFArrayGetCount(v13[3]) > 0);
          }
          if (CFArrayGetCount(v13[5]) >= 1)
          {
            do
            {
              v19 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v13[5], 0);
              videoMentorFrameNodeRemoveDroppedDependentNode(v13, v19);
            }
            while (CFArrayGetCount(v13[5]) > 0);
          }
          if (CFArrayGetCount(v13[4]) >= 1)
          {
            do
            {
              v20 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v13[4], 0);
              videoMentorFrameNodeRemoveDependentNode(v20, v13, 0);
            }
            while (CFArrayGetCount(v13[4]) > 0);
          }
          if (CFArrayGetCount(v13[6]) >= 1)
          {
            do
            {
              v21 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v13[6], 0);
              videoMentorFrameNodeRemoveDroppedDependentNode(v21, v13);
            }
            while (CFArrayGetCount(v13[6]) > 0);
          }
          if (*((_BYTE *)v13 + 64))
          {
            v22 = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
            v23.location = *((int *)v13 + 38);
            if (v22 > v23.location)
            {
              v23.length = 1;
              CFArrayReplaceValues(*(CFMutableArrayRef *)(a1 + 64), v23, (const void **)a1, 1);
            }
          }
          if (*(CFArrayRef **)(a1 + 72) == v13)
          {
            v24 = *(const void **)a1;
            *(_QWORD *)(a1 + 72) = *(_QWORD *)a1;
            if (v24)
              CFRetain(v24);
            CFRelease(v13);
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 8), v13);
        }
      }
      CFArrayRemoveAllValues(*((CFMutableArrayRef *)ValueAtIndex + 5));
      CFArrayRemoveAllValues(*((CFMutableArrayRef *)ValueAtIndex + 6));
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), i--);
      v4 = v27 - 1;
    }
  }
  CFRelease(cf);
}

__n128 videoMentorThrottlingStateFree(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  videoMentorThrottlingStateClearSelectedCursors(a1);
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = 0;
    free(v2);
  }
  *(_QWORD *)(a1 + 88) = 0;
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  v3 = MEMORY[0x1E0CA2E18];
  result = *(__n128 *)MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 32) = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(a1 + 48) = v5;
  *(__n128 *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 152) = 0;
  return result;
}

void videoMentorPostMinAndMaxUpcomingOutputPTS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  const void **v7;
  const void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, __CFDictionary *, _QWORD);

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = (const void **)MEMORY[0x1E0C9AE50];
  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    v8 = (const void *)*MEMORY[0x1E0C9AE50];
    FigCFDictionarySetCMTime();
  }
  else
  {
    v8 = (const void *)*MEMORY[0x1E0C9AE40];
  }
  if ((*(_DWORD *)(a3 + 12) & 0x1D) == 1)
  {
    v8 = *v7;
    FigCFDictionarySetCMTime();
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA2758], v8);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(void (**)(uint64_t, _QWORD, __CFDictionary *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 64);
  if (v10)
    v10(v9, *MEMORY[0x1E0CA2770], Mutable, 0);
  if (Mutable)
    CFRelease(Mutable);
}

void videoMentorFrameNodeRemoveDroppedDependentNode(CFMutableArrayRef *a1, CFMutableArrayRef *a2)
{
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  const __CFArray *v6;
  CFIndex v7;
  CFRange v8;
  CFRange v9;

  v4 = a1[5];
  v8.length = CFArrayGetCount(v4);
  v8.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v8, a2);
  CFArrayRemoveValueAtIndex(a1[5], FirstIndexOfValue);
  v6 = a2[6];
  v9.length = CFArrayGetCount(v6);
  v9.location = 0;
  v7 = CFArrayGetFirstIndexOfValue(v6, v9, a1);
  CFArrayRemoveValueAtIndex(a2[6], v7);
}

void videoMentorThrottlingStateClearSelectedCursors(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  const void *v6;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
    {
      v4 = 0;
      for (i = 0; i < v1; ++i)
      {
        v6 = *(const void **)(v3 + v4);
        if (v6)
        {
          CFRelease(v6);
          v3 = *(_QWORD *)(a1 + 80);
          v1 = *(_QWORD *)(a1 + 88);
          *(_QWORD *)(v3 + v4) = 0;
        }
        v4 += 32;
      }
    }
  }
}

__n128 videoMentorThrottlingStateStartNewOrder(uint64_t a1, __int128 *a2, uint64_t a3, __n128 *a4, uint64_t a5)
{
  void *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __n128 result;

  videoMentorThrottlingStateClearSelectedCursors(a1);
  free(*(void **)(a1 + 80));
  *(_QWORD *)(a1 + 88) = 1;
  v10 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040B07D1DCCuLL);
  *(_QWORD *)(a1 + 80) = v10;
  if (!v10)
    *(_QWORD *)(a1 + 88) = 0;
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  if (a5)
  {
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v11)
      v11(a5, a1);
  }
  v12 = MEMORY[0x1E0CA2E18];
  v13 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 32) = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 152) = 0;
  v15 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v15;
  v16 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 120) = v16;
  v17 = a4[1].n128_u64[0];
  result = *a4;
  *(__n128 *)(a1 + 128) = *a4;
  *(_QWORD *)(a1 + 144) = v17;
  return result;
}

void videoMentorThrottlingStateHandleDiscontinuity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CMTimeEpoch v8;
  const void *v9;
  unsigned int (*v10)(uint64_t, CFTypeRef *);
  unsigned int (*v11)(uint64_t, const void **);
  CFTypeRef v12;
  unsigned int (*v13)(CFTypeRef, CMTime *);
  CFTypeRef v14;
  unsigned int (*v15)(CFTypeRef, const void **);
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(CFTypeRef, uint64_t, uint64_t);
  CFTypeRef v20;
  unsigned int (*v21)(CFTypeRef, uint64_t, uint64_t *);
  const void *v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t *);
  double Seconds;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CMTime v31;
  CMTime rhs;
  CMTimeRange time2;
  CMTime v34;
  CMTimeRange time1;
  uint64_t v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  const void *v40;
  CFTypeRef v41;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  v41 = 0;
  *(_OWORD *)&v39.value = *MEMORY[0x1E0CA2E18];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v39.epoch = v8;
  *(_OWORD *)&v38.value = *(_OWORD *)&v39.value;
  v38.epoch = v8;
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v30 = *(_OWORD *)&v39.value;
  *(_OWORD *)&v37.value = *(_OWORD *)&v39.value;
  v37.epoch = v8;
  v36 = 0;
  v9 = *(const void **)a1;
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)a1 = 0;
  }
  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
    time1.start.epoch = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&time2.start.value = *MEMORY[0x1E0CA2E68];
    time2.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    if (CMTimeCompare(&time1.start, &time2.start) >= 1)
    {
      v10 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v10)
      {
        if (!v10(a3, &v41))
        {
          v11 = *(unsigned int (**)(uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v11)
          {
            if (!v11(a3, &v40))
            {
              while (1)
              {
                v12 = v41;
                v13 = *(unsigned int (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 40);
                if (!v13 || v13(v12, &v38))
                  goto LABEL_41;
                if (!v40)
                  goto LABEL_15;
                time1.start = v38;
                time2.start = v39;
                if (CMTimeCompare(&time1.start, &time2.start) < 0)
                  break;
LABEL_18:
                if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
                {
                  v16 = v41;
                  v17 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                  v18 = a3 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
                  if (v17 != v18
                    || (v19 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t))(v17 + 80)) == 0
                    || !v19(v16, a3, 1))
                  {
                    v20 = v41;
                    v21 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 168);
                    if (!v21 || v21(v20, 1, &v36))
                      goto LABEL_41;
                    if (v36 == 1)
                      continue;
                  }
                }
                v28 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
                v29 = *MEMORY[0x1E0CA2E40];
                v27 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
                do
                {
                  *(_OWORD *)&time1.start.value = v29;
                  *(_OWORD *)&time1.start.epoch = v28;
                  *(_OWORD *)&time1.duration.timescale = v27;
                  if (videoMentorGetCursorPTSRange(v40, &time1))
                    break;
                  time2 = time1;
                  CMTimeRangeGetEnd(&v34, &time2);
                  *(_OWORD *)&time2.start.value = *(_OWORD *)(a1 + 104);
                  time2.start.epoch = *(_QWORD *)(a1 + 120);
                  if (CMTimeCompare(&time2.start, &v34) < 0)
                    break;
                  v22 = v40;
                  v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 176);
                  if (!v23)
                    break;
                }
                while (!v23(v22, 1, &v36) && v36 == 1);
                *(_QWORD *)a1 = v40;
                v40 = 0;
                time1.start = v39;
                *(_OWORD *)&time2.start.value = *(_OWORD *)a4;
                time2.start.epoch = *(_QWORD *)(a4 + 16);
                if (CMTimeCompare(&time1.start, &time2.start) < 0)
                  v39 = *(CMTime *)a4;
                *(_OWORD *)&time2.start.value = *(_OWORD *)(a1 + 8);
                time2.start.epoch = *(_QWORD *)(a1 + 24);
                rhs = v39;
                CMTimeSubtract(&time1.start, &time2.start, &rhs);
                value = time1.start.value;
                timescale = time1.start.timescale;
                if ((time1.start.flags & 0x1D) == 1)
                {
                  time1.start.value = value;
                  time1.start.timescale = timescale;
                  Seconds = CMTimeGetSeconds(&time1.start);
                  *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
                  time1.start.epoch = *(_QWORD *)(a2 + 16);
                  v26 = Seconds / CMTimeGetSeconds(&time1.start);
                  if (v26 < 2147483650.0)
                  {
                    *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
                    time1.start.epoch = *(_QWORD *)(a2 + 16);
                    CMTimeMultiply(&v31, &time1.start, (int)v26);
                    *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 8);
                    time1.start.epoch = *(_QWORD *)(a1 + 24);
                    CMTimeSubtract(&v37, &time1.start, &v31);
                  }
                }
                goto LABEL_41;
              }
              if (v40)
              {
                CFRelease(v40);
                v40 = 0;
              }
LABEL_15:
              v14 = v41;
              v15 = *(unsigned int (**)(CFTypeRef, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 8);
              if (!v15 || v15(v14, &v40))
                goto LABEL_41;
              v39 = v38;
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
LABEL_41:
  *(CMTime *)(a1 + 8) = v37;
  *(_OWORD *)(a1 + 32) = v30;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 152) = 0;
  videoMentorThrottlingStateClearSelectedCursors(a1);
  if (v40)
  {
    CFRelease(v40);
    v40 = 0;
  }
  if (v41)
    CFRelease(v41);
}

void videoMentorThrottleDroppableFrames(uint64_t a1, uint64_t a2, CMTime *a3, CMTime *a4)
{
  CMTimeEpoch v7;
  unsigned int (*v8)(uint64_t, CMTime *);
  _OWORD *v9;
  unsigned int (*v10)(uint64_t, uint64_t);
  Float64 v11;
  CMTimeEpoch epoch;
  _OWORD *v13;
  _OWORD *v14;
  double Seconds;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, CMTime *);
  uint64_t v18;
  unsigned int (*v19)(uint64_t, CFTypeRef *);
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t *);
  int v23;
  unint64_t v24;
  int IsDroppableFrame;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, CMTime *);
  uint64_t v28;
  int v29;
  CMTime *v30;
  uint64_t v31;
  __int128 v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, CFTypeRef *);
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t *);
  CMTime *v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, CMTime *);
  CMTimeEpoch v42;
  CMTimeFlags flags;
  CMTimeEpoch v44;
  double v45;
  double v46;
  CMTimeEpoch v47;
  CMTime *v48;
  CMTime *v49;
  __int128 v51;
  CMTime v52;
  __int128 v53;
  CMTimeEpoch v54;
  uint64_t v55;
  CMTime v56;
  CFTypeRef cf;
  CMTime v58;
  CMTime v59;
  CMTime v60;
  CMTime v61;
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v58.value = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v58.epoch = v7;
  v56.epoch = v7;
  cf = 0;
  v51 = *(_OWORD *)&v58.value;
  *(_OWORD *)&v56.value = *(_OWORD *)&v58.value;
  v55 = 0;
  v8 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v8 || v8(a2, &v56))
    goto LABEL_31;
  v9 = (_OWORD *)(a1 + 32);
  if ((*(_DWORD *)(a1 + 44) & 0x1D) != 1
    || (time1 = v56,
        *(_OWORD *)&time2.value = *v9,
        time2.epoch = *(_QWORD *)(a1 + 48),
        CMTimeCompare(&time1, &time2) >= 1))
  {
    if (!*(_BYTE *)(a1 + 152))
    {
      if (*(_QWORD *)a1
        || (v10 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0
        && !v10(a2, a1))
      {
        if ((*(_DWORD *)(a1 + 44) & 0x1D) != 1)
        {
          if ((*(_DWORD *)(a1 + 20) & 0x1D) == 1)
          {
            memset(&time1, 0, sizeof(time1));
            v11 = *(double *)(a1 + 96);
            time2 = *a3;
            CMTimeMultiplyByFloat64(&time1, &time2, v11);
            lhs = *(CMTime *)(a1 + 8);
            rhs = time1;
            CMTimeAdd(&time2, &lhs, &rhs);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)&time2.value;
            epoch = time2.epoch;
          }
          else
          {
            *(_OWORD *)(a1 + 56) = *(_OWORD *)&v56.value;
            epoch = v56.epoch;
          }
          *(_QWORD *)(a1 + 72) = epoch;
        }
        v13 = (_OWORD *)(a1 + 56);
        v14 = (_OWORD *)(a1 + 128);
        time1 = *(CMTime *)(a1 + 56);
        time2 = *(CMTime *)(a1 + 128);
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
LABEL_15:
          *(_OWORD *)&time1.value = *v13;
          time1.epoch = *(_QWORD *)(a1 + 72);
          *(_OWORD *)&time2.value = *v14;
          time2.epoch = *(_QWORD *)(a1 + 144);
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          {
            memset(&time1, 0, sizeof(time1));
            *(_OWORD *)&time2.value = *v13;
            time2.epoch = *(_QWORD *)(a1 + 72);
            *(_OWORD *)&lhs.value = *v14;
            lhs.epoch = *(_QWORD *)(a1 + 144);
            CMTimeSubtract(&time1, &time2, &lhs);
            time2 = time1;
            Seconds = CMTimeGetSeconds(&time2);
            time2 = *a3;
            *(double *)(a1 + 96) = Seconds / CMTimeGetSeconds(&time2);
            *v9 = *v13;
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 72);
            do
            {
              v16 = *(_QWORD *)a1;
              v17 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
              if (!v17)
                break;
              if (v17(v16, &v58))
                break;
              time2 = v58;
              *(_OWORD *)&lhs.value = *v14;
              lhs.epoch = *(_QWORD *)(a1 + 144);
              if ((CMTimeCompare(&time2, &lhs) & 0x80000000) == 0)
                break;
              if (!videoMentorIsDroppableFrame(*(_QWORD *)a1))
              {
                v18 = *(_QWORD *)a1;
                v19 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
                if (!v19 || v19(v18, &cf))
                  goto LABEL_31;
                if (videoMentorPushCursorIntoSelectedCursors(a1, cf) < 0)
                  goto LABEL_92;
                if (cf)
                {
                  CFRelease(cf);
                  cf = 0;
                }
              }
              v20 = *(_QWORD *)a1;
              v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 176);
              if (!v21)
                break;
            }
            while (!v21(v20, 1, &v55) && v55 == 1);
          }
          goto LABEL_31;
        }
        v23 = 0;
        v24 = -1;
        IsDroppableFrame = 1;
        while (1)
        {
          v26 = *(_QWORD *)a1;
          v27 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (!v27 || v27(v26, &v58))
            goto LABEL_31;
          time1 = v58;
          *(_OWORD *)&time2.value = *v13;
          time2.epoch = *(_QWORD *)(a1 + 72);
          if (CMTimeCompare(&time1, &time2) > 0 || *(_BYTE *)(a1 + 152))
            break;
          v33 = cf;
          if (cf && !IsDroppableFrame)
          {
            v34 = videoMentorPushCursorIntoSelectedCursors(a1, cf);
            if (v34 < 0)
            {
LABEL_92:
              FigSignalErrorAt();
              goto LABEL_31;
            }
            v24 = v34;
            v23 = 1;
            v33 = cf;
          }
          if (v33)
          {
            CFRelease(v33);
            cf = 0;
          }
          v35 = *(_QWORD *)a1;
          v36 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v36)
            goto LABEL_31;
          if (v36(v35, &cf))
            goto LABEL_31;
          IsDroppableFrame = videoMentorIsDroppableFrame((uint64_t)cf);
          v37 = *(_QWORD *)a1;
          v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 176);
          if (!v38 || v38(v37, 1, &v55))
            goto LABEL_31;
          if (v55 != 1)
            *(_BYTE *)(a1 + 152) = 1;
LABEL_89:
          *(_OWORD *)&time1.value = *v13;
          time1.epoch = *(_QWORD *)(a1 + 72);
          *(_OWORD *)&time2.value = *v14;
          time2.epoch = *(_QWORD *)(a1 + 144);
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
            goto LABEL_15;
        }
        if (cf)
        {
          if (!IsDroppableFrame || !v23)
          {
            v28 = videoMentorPushCursorIntoSelectedCursors(a1, cf);
            if (v28 < 0)
              goto LABEL_92;
            v24 = v28;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
          }
        }
        else if (!v23)
        {
          v29 = 1;
          goto LABEL_64;
        }
        v29 = 0;
        if (!*(_BYTE *)(a1 + 152))
        {
          v30 = a4;
          if ((v24 & 0x8000000000000000) == 0)
          {
            v29 = 0;
            if (*(_QWORD *)(a1 + 88) > v24)
            {
              v31 = *(_QWORD *)(a1 + 80) + 32 * v24;
              v32 = *v13;
              *(_QWORD *)(v31 + 24) = *(_QWORD *)(a1 + 72);
              *(_OWORD *)(v31 + 8) = v32;
            }
          }
          goto LABEL_65;
        }
LABEL_64:
        v30 = a4;
LABEL_65:
        v53 = *(_OWORD *)&a3->value;
        v54 = a3->epoch;
        v52 = *v30;
        *(_OWORD *)&time1.value = v51;
        time1.epoch = v7;
        timescale = 0;
        value = 0;
        lhs = *a3;
        if ((v52.flags & 0x1D) == 1)
        {
          time2 = *a3;
          rhs = *v30;
          CMTimeAdd(&lhs, &time2, &rhs);
        }
        else
        {
          v52 = *a3;
        }
        v39 = (CMTime *)&v53;
        if (v29)
          v39 = &v52;
        time2 = *v39;
        v40 = *(_QWORD *)a1;
        v41 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v41
          && !v41(v40, &time1)
          && (time1.flags & 0x1D) == 1
          && (rhs = time1, *(_OWORD *)&v61.value = *v14,
                           v61.epoch = *(_QWORD *)(a1 + 144),
                           CMTimeCompare(&rhs, &v61) < 0))
        {
          *(_OWORD *)&v61.value = *(_OWORD *)&time1.value;
          v42 = time1.epoch;
        }
        else
        {
          *(_OWORD *)&v61.value = *v14;
          v42 = *(_QWORD *)(a1 + 144);
        }
        v61.epoch = v42;
        *(_OWORD *)&v60.value = *v13;
        v60.epoch = *(_QWORD *)(a1 + 72);
        CMTimeSubtract(&rhs, &v61, &v60);
        value = rhs.value;
        flags = rhs.flags;
        timescale = rhs.timescale;
        v44 = rhs.epoch;
        if ((rhs.flags & 0x1D) != 1)
          goto LABEL_83;
        rhs.value = value;
        rhs.timescale = timescale;
        v61 = lhs;
        if (CMTimeCompare(&rhs, &v61) < 1)
          goto LABEL_83;
        rhs.value = value;
        rhs.timescale = timescale;
        rhs.flags = flags;
        rhs.epoch = v44;
        v45 = CMTimeGetSeconds(&rhs);
        rhs = v52;
        v46 = v45 / CMTimeGetSeconds(&rhs);
        if (v46 > 2147483650.0)
          v46 = 2147483650.0;
        if (v46 - floor(v46) < 0.01)
          v46 = v46 + -1.0;
        if (v46 > 1.0)
        {
          rhs = v52;
          CMTimeMultiply(&v61, &rhs, (int)v46);
          *(_OWORD *)&v60.value = *v13;
          v60.epoch = *(_QWORD *)(a1 + 72);
          CMTimeAdd(&rhs, &v60, &v61);
          *v9 = *(_OWORD *)&rhs.value;
          v47 = rhs.epoch;
          *(_QWORD *)(a1 + 48) = rhs.epoch;
          *(_OWORD *)&v60.value = *v9;
          v60.epoch = v47;
          v59 = v52;
          v48 = &v60;
          v49 = &v59;
        }
        else
        {
LABEL_83:
          *v9 = *v13;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 72);
          *(_OWORD *)&v61.value = *v13;
          v61.epoch = *(_QWORD *)(a1 + 72);
          v60 = time2;
          v48 = &v61;
          v49 = &v60;
        }
        CMTimeAdd(&rhs, v48, v49);
        *v13 = *(_OWORD *)&rhs.value;
        *(_QWORD *)(a1 + 72) = rhs.epoch;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        time1 = v56;
        *(_OWORD *)&time2.value = *v9;
        time2.epoch = *(_QWORD *)(a1 + 48);
        if (CMTimeCompare(&time1, &time2) < 1 || *(_BYTE *)(a1 + 152))
          goto LABEL_15;
        v23 = 0;
        v24 = -1;
        IsDroppableFrame = 1;
        goto LABEL_89;
      }
LABEL_31:
      if (cf)
        CFRelease(cf);
    }
  }
}

uint64_t videoMentorPopCursorFromSelectedCursors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  __int128 v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 88);
  if (!v4)
    return *(_QWORD *)(a1 + 80) == 0;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = *(_QWORD *)(a1 + 80);
    v10 = *(_QWORD *)(v9 + v7);
    if (v10)
      break;
LABEL_8:
    ++v8;
    v7 += 32;
    if (v8 >= v4)
      return *(_QWORD *)(a1 + 80) == 0;
  }
  v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v11 == *(_QWORD *)(CMBaseObjectGetVTable() + 16))
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 32);
    if (v12)
    {
      if (v12(a2, v10))
      {
        v4 = *(_QWORD *)(a1 + 88);
        goto LABEL_8;
      }
    }
  }
  if (a3)
  {
    v14 = *(_OWORD *)(v9 + v7 + 8);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v9 + v7 + 24);
    *(_OWORD *)a3 = v14;
  }
  v15 = *(const void **)(v9 + v7);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(v9 + v7) = 0;
  }
  v16 = MEMORY[0x1E0CA2E18];
  v17 = v9 + v7;
  *(_OWORD *)(v17 + 8) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(v16 + 16);
  return 1;
}

CMTime *videoMentorThreadReduceReversedGroupToSatisfyPassLimit(CMTime *result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  CMTime *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  CMTimeFlags flags;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  CMTimeEpoch epoch;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  CMTime *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  CMTime time2;
  CMTime time1;
  CMTime v32;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v35;

  v5 = a2;
  v6 = result;
  v35 = *MEMORY[0x1E0C80C00];
  v7 = (a3 + 1);
  if (a3 < 0)
    v7 = a2;
  v8 = v7 * a4;
  if (a2 < 1)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = (unsigned __int8 *)&result[1].value + 5;
    v11 = a2;
    do
    {
      v12 = *v10;
      v10 += 32;
      if (v12)
        ++v9;
      --v11;
    }
    while (v11);
  }
  value = *MEMORY[0x1E0CA2E28];
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 12);
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 8);
  v14 = v9 - v8;
  if (v9 <= v8 || a2 < 1)
  {
    v16 = 0;
  }
  else
  {
    v17 = 0;
    epoch = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
    v19 = (unsigned __int8 *)&result[1].value + 4;
    v20 = a2;
    do
    {
      v21 = *v19;
      v19 += 32;
      if (v21)
        ++v17;
      --v20;
    }
    while (v20);
    v16 = 0;
    v29 = a5;
    if (a5 && a2 >= 1)
    {
      v16 = 0;
      v22 = 0;
      v23 = result;
      do
      {
        memset(&v32, 0, sizeof(v32));
        result = CMSampleBufferGetOutputPresentationTimeStamp(&v32, (CMSampleBufferRef)v23->value);
        if (BYTE5(v23[1].value))
        {
          time1 = v32;
          time2.value = value;
          time2.timescale = timescale;
          time2.flags = flags;
          time2.epoch = epoch;
          result = (CMTime *)CMTimeCompare(&time1, &time2);
          if ((int)result >= 1)
          {
            value = v32.value;
            flags = v32.flags;
            timescale = v32.timescale;
            epoch = v32.epoch;
            v16 = v22;
          }
        }
        ++v22;
        v23 = (CMTime *)((char *)v23 + 32);
      }
      while (v5 != v22);
    }
    if (v14 >= v17)
    {
      a5 = v29;
      if (v5 >= 1)
      {
        v26 = 0;
        v27 = v9 - v17;
        v28 = (char *)&v6[1].value + 5;
        do
        {
          if (*(v28 - 1))
          {
            *v28 = 0;
          }
          else if (*v28)
          {
            v26 += v14 - v17;
            if (v26 >= v27)
            {
              *v28 = 0;
              v26 -= v27;
            }
          }
          v28 += 32;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      a5 = v29;
      if (v5 >= 1)
      {
        v24 = 0;
        v25 = (char *)&v6[1].value + 5;
        do
        {
          if (*(v25 - 1))
          {
            v24 += v14;
            if (v24 >= v17)
            {
              *v25 = 0;
              v24 -= v17;
            }
          }
          v25 += 32;
          --v5;
        }
        while (v5);
      }
    }
  }
  if (a5)
  {
    if ((flags & 0x1D) == 1)
      *((_BYTE *)&v6[1].value + 32 * v16 + 5) = 1;
  }
  return result;
}

uint64_t videoMentorThreadSendReversedGroup(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 a5, int a6, const void *a7, int a8, uint64_t a9)
{
  uint64_t v11;
  CMTimeEpoch v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CMTimeEpoch epoch;
  CMTimeFlags flags;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE *v27;
  int v28;
  opaqueCMSampleBuffer *v29;
  uint64_t SampleTimingInfo;
  const __CFAllocator *v31;
  OpaqueCMBlockBuffer *DataBuffer;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t v34;
  opaqueCMSampleBuffer *value;
  CFTypeRef v36;
  CFArrayRef SampleAttachmentsArray;
  unsigned __int8 v38;
  const __CFArray *v39;
  CFArrayRef v40;
  const __CFArray *v41;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  int v47;
  uint64_t v48;
  const void *v49;
  const void *v50;
  CFTypeRef v51;
  CFTypeRef v52;
  uint64_t v53;
  int v55;
  int v56;
  char v57;
  _BYTE *v58;
  void *v59;
  void *v60;
  void *v61;
  const __CFString *v62;
  const __CFString *v63;
  const void *v64;
  const __CFString *v65;
  const __CFString *key;
  CMSampleBufferRef sbuf;
  CMTimeFlags v70;
  CMTimeEpoch v71;
  CMTimeFlags v72;
  CMTime time2;
  CMSampleTimingInfo sampleTimingArray;
  CMTime time1;
  CMTime sampleSizeArray;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (a4 >= 0)
    v11 = (a4 + 1);
  else
    v11 = a3;
  if (*(_DWORD *)(a1 + 940) < a4)
    *(_DWORD *)(a1 + 940) = a4;
  v72 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v71 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  v70 = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 12);
  v61 = (void *)*MEMORY[0x1E0CA2618];
  v65 = (const __CFString *)*MEMORY[0x1E0CA26E8];
  v58 = (_BYTE *)(a2 + 30);
  v64 = (const void *)*MEMORY[0x1E0C9AE50];
  v63 = (const __CFString *)*MEMORY[0x1E0CA2728];
  v62 = (const __CFString *)*MEMORY[0x1E0CA2720];
  key = (const __CFString *)*MEMORY[0x1E0CA2708];
  v59 = (void *)*MEMORY[0x1E0CA2628];
  v60 = (void *)*MEMORY[0x1E0CA2620];
  do
  {
LABEL_7:
    if (a8)
    {
      sampleSizeArray.value = *MEMORY[0x1E0CA2E28];
      sampleSizeArray.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 8);
      if (a3 < 1)
      {
        sampleSizeArray.value = *MEMORY[0x1E0CA2E18];
        sampleSizeArray.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
      }
      else
      {
        v13 = 0;
        v14 = a2;
        v15 = a3;
        epoch = v71;
        flags = v70;
        do
        {
          if (*(_BYTE *)(v14 + 29))
          {
            memset(&sampleTimingArray, 0, 24);
            CMSampleBufferGetOutputPresentationTimeStamp(&sampleTimingArray.duration, *(CMSampleBufferRef *)v14);
            time1 = sampleTimingArray.duration;
            time2.value = sampleSizeArray.value;
            time2.timescale = sampleSizeArray.timescale;
            time2.flags = flags;
            time2.epoch = epoch;
            if (CMTimeCompare(&time1, &time2) >= 1)
            {
              sampleSizeArray.value = sampleTimingArray.duration.value;
              flags = sampleTimingArray.duration.flags;
              sampleSizeArray.timescale = sampleTimingArray.duration.timescale;
              epoch = sampleTimingArray.duration.epoch;
            }
            ++v13;
          }
          v14 += 32;
          --v15;
        }
        while (v15);
        if ((flags & 0x1D) == 1 && v13 > 1
          || (sampleSizeArray.value = *MEMORY[0x1E0CA2E18],
              sampleSizeArray.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8),
              epoch = v12,
              flags = v72,
              v13 > 1))
        {
LABEL_21:
          sampleTimingArray.duration.value = sampleSizeArray.value;
          sampleTimingArray.duration.timescale = sampleSizeArray.timescale;
          sampleTimingArray.duration.flags = flags;
          sampleTimingArray.duration.epoch = epoch;
          videoMentorPostMinAndMaxUpcomingOutputPTS(a1, MEMORY[0x1E0CA2E18], (uint64_t)&sampleTimingArray);
          *(_QWORD *)a9 = sampleSizeArray.value;
          *(_DWORD *)(a9 + 8) = sampleSizeArray.timescale;
          *(_DWORD *)(a9 + 12) = flags;
          *(_QWORD *)(a9 + 16) = epoch;
          goto LABEL_22;
        }
      }
      epoch = v12;
      flags = v72;
      if ((*(_BYTE *)(a9 + 12) & 1) != 0)
        goto LABEL_21;
    }
LABEL_22:
    v18 = videoMentorThreadWaitForOutputQueueToDropBelowHighWater(a1, a7);
    if (v18 || v11 < 1)
    {
      if (v18)
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
    v19 = 0;
    v20 = -1;
LABEL_25:
    *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
    sampleTimingArray.duration.epoch = v12;
    if (a3 < 1)
      return 0;
    v21 = 0;
    v22 = 1;
    v23 = -1;
LABEL_27:
    v24 = a2 + 32 * v21++;
    do
    {
      if (*(_BYTE *)(v24 + 29))
      {
        memset(&time1, 0, sizeof(time1));
        CMSampleBufferGetPresentationTimeStamp(&time1, *(CMSampleBufferRef *)v24);
        if ((v22 & 1) != 0
          || (time2 = sampleTimingArray.duration, sampleSizeArray = time1, CMTimeCompare(&time2, &sampleSizeArray) < 0))
        {
          v23 = v21 - 1;
          sampleTimingArray.duration = time1;
        }
        v22 = 0;
        if (v21 != a3)
          goto LABEL_27;
LABEL_37:
        *(_WORD *)(a2 + 32 * v23 + 29) = 256;
        if (v20 <= v23)
          v20 = v23;
        if (++v19 == v11)
          goto LABEL_42;
        goto LABEL_25;
      }
      ++v21;
      v24 += 32;
    }
    while (v21 - a3 != 1);
    if ((v22 & 1) == 0)
      goto LABEL_37;
    if (!v19)
      return 0;
LABEL_42:
    ;
  }
  while (v20 < 0);
  v25 = v20 + 1;
  v26 = 1;
  v27 = v58;
  while (1)
  {
    v28 = *v27;
    if (*v27)
    {
      *(_WORD *)(v27 - 1) = 0;
    }
    else if (*(v27 - 2))
    {
      goto LABEL_89;
    }
    v29 = *(opaqueCMSampleBuffer **)(v27 - 30);
    v56 = *(_DWORD *)(v27 - 6);
    v57 = v26;
    sbuf = v29;
    if (v56 >= 1)
      break;
    CFRetain(v29);
    v47 = *(_DWORD *)(v27 - 6);
    v48 = a1;
    v38 = v57;
LABEL_66:
    *(_DWORD *)(v27 - 6) = v47 + 1;
    if (a6)
    {
      memset(&sampleTimingArray, 0, 24);
      if (v28)
      {
        if (v56 >= 1)
        {
          v49 = *(const void **)(v27 - 22);
          if (v49)
            CMSetAttachment(sbuf, v63, v49, 1u);
          v50 = *(const void **)(v27 - 14);
          if (v50)
            CMSetAttachment(sbuf, v62, v50, 1u);
        }
      }
      else
      {
        if (v56 <= 0)
        {
          v51 = CMGetAttachment(sbuf, v63, 0);
          *(_QWORD *)(v27 - 22) = v51;
          if (v51)
            CFRetain(v51);
          v52 = CMGetAttachment(sbuf, v62, 0);
          *(_QWORD *)(v27 - 14) = v52;
          if (v52)
            CFRetain(v52);
        }
        CMSampleBufferGetDuration(&sampleTimingArray.duration, sbuf);
        time1 = sampleTimingArray.duration;
        audioMentorSetAttachmentAsFigTimeDictionary(sbuf, v63, &time1);
        CMSetAttachment(sbuf, v62, 0, 1u);
        v38 = v57;
      }
    }
    v53 = videoMentorThreadSendSampleBuffer(v48, sbuf, 0, v28 == 0, 0, a5, 0, v38);
    if (!(_DWORD)v53)
    {
      if (!v28)
        ++*(_DWORD *)(a1 + 948);
      if (*(_BYTE *)(a1 + 116))
        v53 = 0xFFFFFFFFLL;
      else
        v53 = 0;
    }
    if (sbuf)
      CFRelease(sbuf);
    if ((_DWORD)v53)
      return v53;
    a5 = 0;
    v26 = 0;
LABEL_89:
    v27 += 32;
    if (!--v25)
      goto LABEL_7;
  }
  time2.value = 0;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  sampleSizeArray.value = CMSampleBufferGetSampleSize(v29, 0);
  SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(v29, 0, &sampleTimingArray);
  if ((_DWORD)SampleTimingInfo)
    return SampleTimingInfo;
  v55 = v28;
  v31 = CFGetAllocator(v29);
  DataBuffer = CMSampleBufferGetDataBuffer(v29);
  FormatDescription = CMSampleBufferGetFormatDescription(v29);
  v34 = CMSampleBufferCreate(v31, DataBuffer, 0, 0, 0, FormatDescription, 1, 1, &sampleTimingArray, 1, (const size_t *)&sampleSizeArray, (CMSampleBufferRef *)&time2);
  value = (opaqueCMSampleBuffer *)time2.value;
  if (!(_DWORD)v34)
  {
    v34 = CMSampleBufferTrackDataReadiness((CMSampleBufferRef)time2.value, v29);
    value = (opaqueCMSampleBuffer *)time2.value;
    if (!(_DWORD)v34)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&time1, v29);
      CMSampleBufferSetOutputPresentationTimeStamp(value, &time1);
      v36 = CMGetAttachment(v29, key, 0);
      if (v36)
        CMSetAttachment((CMAttachmentBearerRef)time2.value, key, v36, 1u);
      SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v29, 0);
      v38 = v57;
      if (SampleAttachmentsArray)
      {
        v39 = SampleAttachmentsArray;
        v40 = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)time2.value, 1u);
        if (v40)
        {
          v41 = v40;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v39, 0);
          v43 = (__CFDictionary *)CFArrayGetValueAtIndex(v41, 0);
          v44 = CFDictionaryGetValue(ValueAtIndex, v60);
          if (v44)
            CFDictionarySetValue(v43, v60, v44);
          v45 = CFDictionaryGetValue(ValueAtIndex, v59);
          if (v45)
            CFDictionarySetValue(v43, v59, v45);
          v46 = CFDictionaryGetValue(ValueAtIndex, v61);
          v38 = v57;
          if (v46)
            CFDictionarySetValue(v43, v61, v46);
        }
      }
      FigSampleBufferGetDecryptor();
      FigSampleBufferSetDecryptor();
      sbuf = (CMSampleBufferRef)time2.value;
      CMSetAttachment((CMAttachmentBearerRef)time2.value, v65, v64, 1u);
      v47 = *(_DWORD *)(v27 - 6);
      v48 = a1;
      if (v47 > *(_DWORD *)(a1 + 944))
        *(_DWORD *)(a1 + 944) = v47;
      v28 = v55;
      goto LABEL_66;
    }
  }
  v53 = v34;
  if (value)
    CFRelease(value);
  return v53;
}

void videoMentorThreadReleaseSampleBuffersInReversalArray(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CFTypeRef *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = a2;
    if (a2 >= 1)
    {
      v3 = (CFTypeRef *)(a1 + 16);
      do
      {
        v4 = *(v3 - 2);
        if (v4)
        {
          CFRelease(v4);
          *(v3 - 2) = 0;
        }
        v5 = *(v3 - 1);
        if (v5)
        {
          CFRelease(v5);
          *(v3 - 1) = 0;
        }
        if (*v3)
        {
          CFRelease(*v3);
          *v3 = 0;
        }
        v3 += 4;
        --v2;
      }
      while (v2);
    }
  }
}

uint64_t videoMentorPushCursorIntoSelectedCursors(uint64_t a1, CFTypeRef cf)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  CFTypeRef v10;
  void *v11;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 88);
  if (v4)
  {
    v5 = 0;
    v6 = *(char **)(a1 + 80);
    while (*(_QWORD *)v6)
    {
      ++v5;
      v6 += 32;
      if (v4 == v5)
      {
        v5 = *(_QWORD *)(a1 + 88);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (v5 == v4)
  {
LABEL_8:
    if (v4 >> 58
      || !(v4 << 6)
      || (v7 = (char *)malloc_type_realloc(*(void **)(a1 + 80), v4 << 6, 0xE093869DuLL)) == 0)
    {
      videoMentorThrottlingStateClearSelectedCursors(a1);
      v11 = *(void **)(a1 + 80);
      if (v11)
      {
        *(_QWORD *)(a1 + 80) = 0;
        free(v11);
      }
      *(_QWORD *)(a1 + 88) = 0;
      return -1;
    }
    v8 = v7;
    bzero(&v7[32 * *(_QWORD *)(a1 + 88)], (v4 << 6) - 32 * *(_QWORD *)(a1 + 88));
    v9 = 2 * *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v8;
    *(_QWORD *)(a1 + 88) = v9;
    if (v4 >= v9)
      return -1;
    v6 = &v8[32 * v4];
  }
  if (!v6 || *(_QWORD *)v6)
    return -1;
  if (cf)
    v10 = CFRetain(cf);
  else
    v10 = 0;
  *(_QWORD *)v6 = v10;
  v13 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v6 + 8) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)v6 + 3) = *(_QWORD *)(v13 + 16);
  return v5;
}

uint64_t videoMentorIsDroppableFrame(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, char *, __int16 *, _QWORD);
  unsigned int v5;
  BOOL v6;
  int v7;
  unsigned int (*v10)(uint64_t, char *, __int16 *, _QWORD, unsigned __int8 *);
  unsigned __int8 v11;
  __int16 v12;
  __int16 v13;

  v13 = 0;
  v12 = 0;
  v11 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  v3 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v2)
  {
    v4 = *(unsigned int (**)(uint64_t, char *, __int16 *, _QWORD))(v3 + 72);
    if (v4 && !v4(a1, (char *)&v13 + 1, &v13, 0))
    {
      v5 = HIBYTE(v13) - 66;
      v6 = v5 > 0xE;
      v7 = (1 << v5) & 0x4081;
      if (!v6 && v7 != 0)
        return HIBYTE(v13) == 66;
    }
  }
  else
  {
    v10 = *(unsigned int (**)(uint64_t, char *, __int16 *, _QWORD, unsigned __int8 *))(v3 + 64);
    if (v10 && !v10(a1, (char *)&v12 + 1, &v12, 0, &v11))
      return v11;
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t FigCEA608DataInspectorCreate(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;
  uint64_t v7;

  if (a2 && (v4 = CFAllocatorAllocate((CFAllocatorRef)a1, 24, 0)) != 0)
  {
    v5 = v4;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    if (a1)
      v6 = CFRetain(a1);
    else
      v6 = 0;
    v7 = 0;
    *v5 = v6;
    *a2 = v5;
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  FigCEA608DataInspectorRelease(0);
  return v7;
}

void FigCEA608DataInspectorRelease(CFAllocatorRef *ptr)
{
  CFAllocatorRef v1;

  if (ptr)
  {
    v1 = *ptr;
    CFAllocatorDeallocate(*ptr, ptr);
    if (v1)
      CFRelease(v1);
  }
}

uint64_t FigCEA608DataInspectorInspectBytePair(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4, __CFString **a5)
{
  __CFString *Mutable;
  __CFString *v10;
  uint64_t v11;
  __int16 v13;

  v13 = 0;
  if (a1 && a2 && a3 && a4)
  {
    LOBYTE(v13) = *a2 & 0x7F;
    if (a3 >= 2)
      HIBYTE(v13) = a2[1] & 0x7F;
    if (!a5)
      return inspectorInspectBytePair(a1, (unsigned __int8 *)&v13, a3, a4, 0);
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (Mutable)
    {
      v10 = Mutable;
      v11 = inspectorInspectBytePair(a1, (unsigned __int8 *)&v13, a3, a4, Mutable);
      if ((_DWORD)v11)
        CFRelease(v10);
      else
        *a5 = v10;
      return v11;
    }
  }
  return FigSignalErrorAt();
}

uint64_t inspectorInspectBytePair(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, __CFString *a5)
{
  unsigned int v10;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t result;
  uint64_t v14;
  __CFString *v15;
  int v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  int v21;
  int v22;
  const __CFString *v23;
  const __CFString *v24;
  char cStr[4];
  char v26;

  v10 = *a2;
  if (v10 <= 0xF)
  {
    if (*a2 && *(_DWORD *)(a1 + 16) == 2)
    {
      if (a3 > 1)
      {
        if (!a5)
        {
LABEL_8:
          result = 0;
          *(_BYTE *)a4 = 1;
          *(_QWORD *)(a4 + 4) = 0x7874646100000002;
          *(_DWORD *)(a4 + 12) = 0;
          *(_DWORD *)(a1 + 16) = 2;
          *(_QWORD *)(a1 + 8) = 2020893793;
          return result;
        }
        v26 = 0;
        *(_DWORD *)cStr = 0;
        __sprintf_chk(cStr, 0, 5uLL, "%02x%02x", v10, a2[1]);
        v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
        if (v11)
        {
          v12 = v11;
          CFStringAppend(a5, v11);
          CFRelease(v12);
          goto LABEL_8;
        }
        return 4294950736;
      }
      return FigSignalErrorAt();
    }
    if (!a3)
      return FigSignalErrorAt();
    if (!a5)
      goto LABEL_25;
    cStr[2] = 0;
    *(_WORD *)cStr = 0;
    __sprintf_chk(cStr, 0, 3uLL, "%02x", v10);
    v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
    if (!v17)
      return 4294950736;
    goto LABEL_24;
  }
  if (v10 > 0x1F)
  {
    if ((v10 & 0x80) != 0)
      return 0;
    if (!a3)
      return FigSignalErrorAt();
    if (!a5)
    {
LABEL_25:
      *(_BYTE *)a4 = 1;
      *(_DWORD *)(a4 + 4) = *(_DWORD *)(a1 + 16);
      *(_QWORD *)(a4 + 8) = *(_QWORD *)(a1 + 8);
      if (a3 >= 2)
        return inspectorInspectBytePair(a1, a2 + 1, a3 - 1, a4, a5);
      return 0;
    }
    *(_WORD *)cStr = bswap32((unsigned __int16)kUTF16StandardCharacters[*a2 - 32]) >> 16;
    v17 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)cStr, 2, 0x10000100u, 0);
    if (v17)
    {
LABEL_24:
      v18 = v17;
      CFStringAppend(a5, v17);
      CFRelease(v18);
      goto LABEL_25;
    }
    return 4294950736;
  }
  if (a3 <= 1)
    return FigSignalErrorAt();
  v14 = a2[1];
  if ((v10 & 0xFFFFFFF7) == 0x10 && v14 >= 0x20 && v14 <= 0x2F)
  {
    if (a5)
    {
      v15 = a5;
      v16 = 16;
      goto LABEL_33;
    }
    goto LABEL_47;
  }
  if ((v10 & 0xF7) != 0x17 || v14 < 0x2D || v14 > 0x2F)
  {
    if ((v10 & 0xF7) == 0x11 && v14 >= 0x20 && v14 <= 0x2F)
    {
      if (!a5)
        goto LABEL_47;
      v19 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &inspectorAppendMnemonicForMidRowCode_kMidRowMnemonics[6 * a2[1] - 192], 0);
      if (!v19)
        return 4294950736;
LABEL_46:
      v20 = v19;
      CFStringAppend(a5, v19);
      CFRelease(v20);
      goto LABEL_47;
    }
    if ((v10 & 0xF7) != 0x11 || v14 < 0x30 || v14 > 0x3F)
    {
      if ((v10 & 0xF6) == 0x14 && v14 >= 0x20 && v14 <= 0x2F)
      {
        if (a5)
        {
          result = inspectorAppendMnemonicForMiscControlCode(a5, v10 & 0xF7, v14);
          if ((_DWORD)result)
            return result;
        }
        if ((v10 & 1) != 0)
          v21 = 2;
        else
          v21 = 1;
        goto LABEL_48;
      }
      if ((v10 & 0xF7) == 0x17 && v14 >= 0x21 && v14 <= 0x23)
      {
        if (a5)
        {
          result = inspectorAppendMnemonicForMiscControlCode(a5, 23, v14);
          if ((_DWORD)result)
            return result;
        }
        goto LABEL_47;
      }
      if ((char)v14 >= 64)
      {
        if (a5)
        {
          result = inspectorAppendMnemonicForPreambleAddressCode(a5, v10 & 0xF7, v14);
          if ((_DWORD)result)
            return result;
        }
        goto LABEL_47;
      }
      if ((v10 & 0x16) == 0x12 && v14 >= 0x20 && v14 <= 0x3F)
      {
        if (a5)
        {
          result = inspectorAppendMnemonicForExtendedCharacterCode(a5, v10 & 0xF7, v14);
          if ((_DWORD)result)
            return result;
        }
        goto LABEL_47;
      }
      if (a5)
      {
        v26 = 0;
        *(_DWORD *)cStr = 0;
        __sprintf_chk(cStr, 0, 5uLL, "%02x%02x", v10, v14);
        v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
        if (!v23)
          return 4294950736;
        v24 = v23;
        CFStringAppend(a5, v23);
        CFRelease(v24);
      }
      result = 0;
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 4) = 0;
      return result;
    }
    if (!a5)
      goto LABEL_47;
    *(_WORD *)cStr = bswap32(kUTF16SpecialCharacters[v14 - 48]) >> 16;
    v19 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)cStr, 2, 0x10000100u, 0);
    if (v19)
      goto LABEL_46;
    return 4294950736;
  }
  if (a5)
  {
    v15 = a5;
    v16 = 23;
LABEL_33:
    result = inspectorAppendMnemonicForBackgroundAndForegroundAttributeCode(v15, v16, v14);
    if ((_DWORD)result)
      return result;
  }
LABEL_47:
  v21 = *(_DWORD *)(a1 + 16);
LABEL_48:
  result = 0;
  *(_BYTE *)a4 = 1;
  if ((v10 & 8) != 0)
    v22 = 2;
  else
    v22 = 1;
  *(_DWORD *)(a4 + 4) = v21;
  *(_DWORD *)(a4 + 8) = 1668314222;
  *(_DWORD *)(a4 + 12) = v22;
  *(_DWORD *)(a1 + 12) = v22;
  *(_DWORD *)(a1 + 16) = v21;
  *(_DWORD *)(a1 + 8) = 1668314222;
  return result;
}

uint64_t inspectorAppendMnemonicForBackgroundAndForegroundAttributeCode(__CFString *a1, int a2, unsigned int a3)
{
  const char *v4;
  const __CFString *v5;
  const __CFString *v6;

  if (a2 == 23)
  {
    if (a3 > 0x2F)
      return 4294950734;
    v4 = &inspectorAppendMnemonicForBackgroundAndForegroundAttributeCode_kAttributeMnemonics2[6 * a3 - 270];
  }
  else
  {
    if (a2 == 16)
    {
      if (a3 <= 0x2F)
      {
        v4 = &inspectorAppendMnemonicForBackgroundAndForegroundAttributeCode_kAttributeMnemonics1[8 * a3 - a3 - 224];
        goto LABEL_8;
      }
      return 4294950734;
    }
    v4 = 0;
  }
LABEL_8:
  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 0);
  if (!v5)
    return 4294950736;
  v6 = v5;
  CFStringAppend(a1, v5);
  CFRelease(v6);
  return 0;
}

uint64_t inspectorAppendMnemonicForMiscControlCode(__CFString *a1, int a2, unsigned int a3)
{
  const char *v4;
  const __CFString *v5;
  const __CFString *v6;

  if ((a2 & 0xFE) == 0x14)
  {
    if (a3 <= 0x2F)
    {
      v4 = &inspectorAppendMnemonicForMiscControlCode_kMiscMnemonics1[6 * a3 - 192];
      goto LABEL_8;
    }
    return 4294950734;
  }
  if (a2 == 23)
  {
    if (a3 > 0x23)
      return 4294950734;
    v4 = &inspectorAppendMnemonicForMiscControlCode_kMiscMnemonics2[6 * a3 - 198];
  }
  else
  {
    v4 = 0;
  }
LABEL_8:
  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 0);
  if (!v5)
    return 4294950736;
  v6 = v5;
  CFStringAppend(a1, v5);
  CFRelease(v6);
  return 0;
}

uint64_t inspectorAppendMnemonicForPreambleAddressCode(__CFString *a1, int a2, int a3)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  __CFString *Mutable;
  const __CFString *v17;

  switch(a2)
  {
    case 16:
      if ((a3 & 0xE0) == 0x40)
        v4 = a3 - 64;
      else
        v4 = 0;
      if ((a3 & 0xE0) == 0x40)
        v5 = 11;
      else
        v5 = 0;
      break;
    case 17:
      v6 = a3 & 0xE0;
      v7 = a3 - 96;
      if ((char)a3 <= 95)
        v7 = 0;
      v8 = 2 * ((char)a3 > 95);
      v9 = a3 - 64;
      v10 = 1;
      goto LABEL_39;
    case 18:
      v6 = a3 & 0xE0;
      v7 = a3 - 96;
      if ((char)a3 <= 95)
        v7 = 0;
      v8 = 4 * ((char)a3 > 95);
      v9 = a3 - 64;
      v10 = 3;
      goto LABEL_39;
    case 19:
      v11 = a3 & 0xE0;
      if ((char)a3 <= 95)
        v12 = 0;
      else
        v12 = a3 - 96;
      if ((char)a3 <= 95)
        v13 = 0;
      else
        v13 = 13;
      v14 = a3 - 64;
      v15 = 12;
      goto LABEL_52;
    case 20:
      v11 = a3 & 0xE0;
      if ((char)a3 <= 95)
        v12 = 0;
      else
        v12 = a3 - 96;
      if ((char)a3 <= 95)
        v13 = 0;
      else
        v13 = 15;
      v14 = a3 - 64;
      v15 = 14;
      goto LABEL_52;
    case 21:
      v11 = a3 & 0xE0;
      if ((char)a3 <= 95)
        v12 = 0;
      else
        v12 = a3 - 96;
      if ((char)a3 <= 95)
        v13 = 0;
      else
        v13 = 6;
      v14 = a3 - 64;
      v15 = 5;
      goto LABEL_52;
    case 22:
      v6 = a3 & 0xE0;
      v7 = a3 - 96;
      if ((char)a3 <= 95)
        v7 = 0;
      v8 = 8 * ((char)a3 > 95);
      v9 = a3 - 64;
      v10 = 7;
LABEL_39:
      if (v6 == 64)
        v4 = v9;
      else
        v4 = v7;
      if (v6 == 64)
        v5 = v10;
      else
        v5 = v8;
      break;
    case 23:
      v11 = a3 & 0xE0;
      if ((char)a3 <= 95)
        v12 = 0;
      else
        v12 = a3 - 96;
      if ((char)a3 <= 95)
        v13 = 0;
      else
        v13 = 10;
      v14 = a3 - 64;
      v15 = 9;
LABEL_52:
      if (v11 == 64)
        v4 = v14;
      else
        v4 = v12;
      if (v11 == 64)
        v5 = v15;
      else
        v5 = v13;
      break;
    default:
      v4 = 0;
      v5 = 0;
      break;
  }
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 4294950736;
  v17 = Mutable;
  CFStringAppendFormat(Mutable, 0, CFSTR("{Row:%02d,Col:%s}"), v5, &inspectorAppendMnemonicForPreambleAddressCode_kPACMnemonics[5 * v4]);
  CFStringAppend(a1, v17);
  CFRelease(v17);
  return 0;
}

uint64_t inspectorAppendMnemonicForExtendedCharacterCode(__CFString *a1, int a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  const __CFString *v6;
  const __CFString *v7;
  UInt8 bytes[2];

  v4 = a3 - 32;
  *(_WORD *)bytes = 0;
  if (a2 == 19)
  {
    if (a3 <= 0x3F)
    {
      v5 = kUTF16ExtendedCharacters2[(int)v4];
      goto LABEL_7;
    }
    return 4294950734;
  }
  if (a2 != 18)
    goto LABEL_8;
  if (a3 > 0x3F)
    return 4294950734;
  v5 = kUTF16ExtendedCharacters1[v4];
LABEL_7:
  *(_WORD *)bytes = bswap32(v5) >> 16;
LABEL_8:
  v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 2, 0x10000100u, 0);
  if (!v6)
    return 4294950736;
  v7 = v6;
  CFStringAppend(a1, v6);
  CFRelease(v7);
  return 0;
}

uint64_t FigAudioQueueTimingShimNewOutput(const AudioStreamBasicDescription *a1, void (__cdecl *a2)(void *, AudioQueueRef, AudioQueueBufferRef), void *a3, __CFRunLoop *a4, const __CFString *a5, UInt32 a6, const void *a7, __int128 *a8, uint64_t *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(const void *, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t Instance;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  CFTypeRef cf;
  int inData;
  AudioQueueRef outAQ;

  outAQ = 0;
  inData = 0;
  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v14 = AudioQueueNewOutput(a1, a2, a3, a4, a5, a6, &outAQ);
  if ((_DWORD)v14)
    goto LABEL_24;
  if (a7)
  {
    v15 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v15)
    {
      Instance = 0;
      v21 = 4294948075;
      goto LABEL_17;
    }
    v16 = *(uint64_t (**)(const void *, const __CFString *, _QWORD, CFTypeRef *))(v15 + 16);
    if (!v16)
    {
      Instance = 0;
      v21 = 4294948071;
      goto LABEL_17;
    }
    v14 = v16(a7, CFSTR("FAS_AudioSessionID"), *MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v14
      || (inData = FigCFNumberGetSInt32()) != 0
      && (v14 = AudioQueueSetProperty(outAQ, 0x72736573u, &inData, 4u), (_DWORD)v14))
    {
LABEL_24:
      v21 = v14;
LABEL_13:
      Instance = 0;
      goto LABEL_17;
    }
  }
  MEMORY[0x19402F294](&sRegisterFigAudioQueueTimingShimTypeOnce, registerFigAudioQueueTimingShimType);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v18 = FigDispatchQueueCreateWithPriority();
    if (v18)
    {
      v19 = v18;
      *(_DWORD *)(Instance + 52) = (int)a1->mSampleRate;
      v20 = *a8;
      *(_QWORD *)(Instance + 44) = *((_QWORD *)a8 + 2);
      *(_OWORD *)(Instance + 28) = v20;
      *(_QWORD *)(Instance + 16) = outAQ;
      outAQ = 0;
      if (a7)
        CFRetain(a7);
      v21 = 0;
      *(_DWORD *)(Instance + 24) = -12948;
      *(_QWORD *)(Instance + 56) = a7;
      *(_QWORD *)(Instance + 64) = v19;
      *a9 = Instance;
      goto LABEL_13;
    }
    v21 = 4294954510;
  }
  else
  {
    v21 = FigSignalErrorAt();
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (Instance)
    CFRelease((CFTypeRef)Instance);
  if (outAQ)
    AudioQueueDispose(outAQ, 0);
  return v21;
}

uint64_t FigAudioQueueTimingShimDispose(AudioQueueRef *a1, Boolean a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;

  if (!a1)
    return 4294954516;
  if (!a1[2])
    return 4294954511;
  faqts_waitAudioQueueStartSynchronous((uint64_t)a1);
  if (dword_1EE2A2C10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = AudioQueueDispose(a1[2], a2);
  a1[2] = 0;
  CFRelease(a1);
  return v5;
}

uint64_t faqts_waitAudioQueueStartSynchronous(uint64_t a1)
{
  NSObject *v1;
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(NSObject **)(a1 + 64);
  if (!v1)
    return 4294954348;
  v5 = a1;
  v6 = 0;
  if (v1 == dispatch_get_current_queue())
  {
    v3 = (unsigned int *)(a1 + 24);
  }
  else
  {
    dispatch_sync_f(v1, &v5, (dispatch_function_t)faqts_getAudioQueueStartErrorInternal);
    v3 = (unsigned int *)&v6;
  }
  return *v3;
}

uint64_t FigAudioQueueTimingShimFlush(uint64_t a1)
{
  OpaqueAudioQueue *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1)
    return 4294954516;
  v2 = *(OpaqueAudioQueue **)(a1 + 16);
  if (!v2)
    return 4294954511;
  if (dword_1EE2A2C10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = *(OpaqueAudioQueue **)(a1 + 16);
  }
  return AudioQueueFlush(v2);
}

uint64_t FigAudioQueueTimingShimReset(uint64_t a1)
{
  OpaqueAudioQueue *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1)
    return 4294954516;
  v2 = *(OpaqueAudioQueue **)(a1 + 16);
  if (!v2)
    return 4294954511;
  if (dword_1EE2A2C10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = *(OpaqueAudioQueue **)(a1 + 16);
  }
  return AudioQueueReset(v2);
}

uint64_t FigAudioQueueTimingShimPause(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (!a1)
    return 4294954516;
  if (!*(_QWORD *)(a1 + 16))
    return 4294954511;
  faqts_waitAudioQueueStartSynchronous(a1);
  if (dword_1EE2A2C10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = AudioQueuePause(*(AudioQueueRef *)(a1 + 16));
  if (!(_DWORD)result)
    *(_DWORD *)(a1 + 24) = -12948;
  return result;
}

uint64_t FigAudioQueueTimingShimPrime(uint64_t a1, UInt32 inNumberOfFramesToPrepare, UInt32 *outNumberOfFramesPrepared)
{
  OpaqueAudioQueue *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1)
    return 4294954516;
  v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (!v4)
    return 4294954511;
  if (dword_1EE2A2C10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v4 = *(OpaqueAudioQueue **)(a1 + 16);
  }
  return AudioQueuePrime(v4, inNumberOfFramesToPrepare, outNumberOfFramesPrepared);
}

uint64_t FigAudioQueueTimingShimGetIncrementedSampleTime(CMTime *a1, double *a2, double *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t result;
  _OWORD v9[4];
  _OWORD v10[4];

  if (!a1)
    return 4294954516;
  if (!a1->epoch)
    return 4294954511;
  if (!a3)
    return 4294954516;
  memset(v10, 0, sizeof(v10));
  faqts_convertTimingShimTimeStampToAQTimeStamp((uint64_t)a1, (uint64_t)a2, (double *)v10);
  *(double *)v10 = *(double *)v10 + 1.0;
  faqts_convertAQTimeStampToTimingShimTimeStamp(a1, (uint64_t)v10, (double *)v9);
  v6 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *((_OWORD *)a3 + 1) = v6;
  v7 = v9[3];
  *((_OWORD *)a3 + 2) = v9[2];
  *((_OWORD *)a3 + 3) = v7;
  result = 0;
  if (*a3 == *a2)
    *a3 = *a3 + 1.0;
  return result;
}

uint64_t faqts_convertTimingShimTimeStampToAQTimeStamp@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int32_t v8;
  double value;
  double v10;
  __int128 v11;
  __int128 v12;
  CMTime v13;
  CMTime rhs;
  CMTime lhs;
  CMTime v16;
  CMTime v17;
  double v18;

  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    v7 = result;
    *((_OWORD *)a3 + 2) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    v18 = 0.0;
    CMTimeMake(&v17, (uint64_t)*(double *)a2, *(_DWORD *)(result + 52));
    lhs = v17;
    rhs = *(CMTime *)(v7 + 28);
    CMTimeSubtract(&v16, &lhs, &rhs);
    v8 = *(_DWORD *)(v7 + 52);
    lhs = v16;
    CMTimeConvertScale(&v13, &lhs, v8, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    value = (double)v13.value;
    result = AudioQueueConvertToUnscaledSampleTime();
    v10 = v18;
    if ((_DWORD)result)
      v10 = value;
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *((_OWORD *)a3 + 1) = v11;
    v12 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)a3 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a3 + 3) = v12;
    *a3 = v10;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *((_OWORD *)a3 + 1) = v5;
    v6 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)a3 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a3 + 3) = v6;
  }
  return result;
}

CMTime *faqts_convertAQTimeStampToTimingShimTimeStamp@<X0>(CMTime *result@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  CMTime *v7;
  double v8;
  __int128 v9;
  __int128 v10;
  int32_t value_high;
  CMTime v12;
  CMTime rhs;
  CMTime lhs;
  CMTime v15;
  CMTime v16;
  double v17;

  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    v7 = result;
    v17 = 0.0;
    memset(&v16, 0, sizeof(v16));
    memset(&v15, 0, sizeof(v15));
    v8 = *(double *)a2;
    if (AudioQueueConvertToScaledSampleTime())
      v17 = v8;
    else
      v8 = v17;
    CMTimeMake(&v16, (uint64_t)v8, HIDWORD(v7[2].value));
    lhs = v16;
    rhs = *(CMTime *)((char *)v7 + 28);
    CMTimeAdd(&v15, &lhs, &rhs);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *((_OWORD *)a3 + 1) = v9;
    v10 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)a3 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a3 + 3) = v10;
    value_high = HIDWORD(v7[2].value);
    lhs = v15;
    result = CMTimeConvertScale(&v12, &lhs, value_high, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *a3 = (double)v12.value;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *((_OWORD *)a3 + 1) = v5;
    v6 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)a3 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a3 + 3) = v6;
  }
  return result;
}

CMTime *FigAudioQueueTimingShimConvertTimingShimTimeToAQTime@<X0>(CMTime *result@<X0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int32_t value_high;
  CMTime v7[3];
  CMTime v8;
  double value;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a3->value = *MEMORY[0x1E0CA2E18];
  a3->epoch = *(_QWORD *)(v4 + 16);
  if (result)
  {
    v5 = (uint64_t)result;
    v13 = 1;
    v12 = 0u;
    v11 = 0u;
    v10 = 0u;
    value_high = HIDWORD(result[2].value);
    v7[0] = *a2;
    CMTimeConvertScale(&v8, v7, value_high, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    value = (double)v8.value;
    faqts_convertTimingShimTimeStampToAQTimeStamp(v5, (uint64_t)&value, (double *)&v7[0].value);
    return CMTimeMake(a3, (uint64_t)*(double *)&v7[0].value, *(_DWORD *)(v5 + 52));
  }
  return result;
}

uint64_t FigAudioQueueTimingShimStartAsyncWithPerfCallback(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[4];

  if (!a1)
    return 4294954516;
  if (!*(_QWORD *)(a1 + 16))
    return 4294954511;
  if (a2)
  {
    v13 = a1 + 72;
    faqts_convertTimingShimTimeStampToAQTimeStamp(a1, a2, (double *)v17);
    v14 = v17[1];
    *(_OWORD *)(a1 + 72) = v17[0];
    *(_OWORD *)(a1 + 88) = v14;
    v15 = v17[3];
    *(_OWORD *)(a1 + 104) = v17[2];
    *(_OWORD *)(a1 + 120) = v15;
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(a1 + 136) = v13;
  faqts_audioQueueStartAsync((dispatch_queue_t *)a1, a4, a5, a3, a6, a7);
  return 0;
}

void faqts_audioQueueStartAsync(dispatch_queue_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  v12 = malloc_type_malloc(0x38uLL, 0x10A0040BEAD7E86uLL);
  *v12 = a1;
  v12[1] = a2;
  v12[2] = a3;
  *((_BYTE *)v12 + 24) = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = FigGetUpTimeNanoseconds();
  if (a1)
    CFRetain(a1);
  dispatch_async_f(a1[8], v12, (dispatch_function_t)faqts_audioQueueStartInternal);
}

uint64_t FigAudioQueueTimingShimStartAsync(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return FigAudioQueueTimingShimStartAsyncWithPerfCallback(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t FigAudioQueueTimingShimStartWithPerfCallback(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[4];

  if (!a1)
    return 4294954516;
  if (!*(_QWORD *)(a1 + 16))
    return 4294954511;
  if (a2)
  {
    v9 = a1 + 72;
    faqts_convertTimingShimTimeStampToAQTimeStamp(a1, a2, (double *)v13);
    v10 = v13[1];
    *(_OWORD *)(a1 + 72) = v13[0];
    *(_OWORD *)(a1 + 88) = v10;
    v11 = v13[3];
    *(_OWORD *)(a1 + 104) = v13[2];
    *(_OWORD *)(a1 + 120) = v11;
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a1 + 136) = v9;
  faqts_audioQueueStartAsync((dispatch_queue_t *)a1, 0, 0, a3, a4, a5);
  return faqts_waitAudioQueueStartSynchronous(a1);
}

uint64_t FigAudioQueueTimingShimStart(uint64_t a1, uint64_t a2, char a3)
{
  return FigAudioQueueTimingShimStartWithPerfCallback(a1, a2, a3, 0, 0);
}

uint64_t FigAudioQueueTimingShimStop(uint64_t a1, Boolean a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (!a1)
    return 4294954516;
  if (!*(_QWORD *)(a1 + 16))
    return 4294954511;
  faqts_waitAudioQueueStartSynchronous(a1);
  if (dword_1EE2A2C10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = AudioQueueStop(*(AudioQueueRef *)(a1 + 16), a2);
  if (!(_DWORD)result)
    *(_DWORD *)(a1 + 24) = -12948;
  return result;
}

uint64_t FigAudioQueueTimingShimGetParameter(uint64_t a1, AudioQueueParameterID a2, AudioQueueParameterValue *a3)
{
  OpaqueAudioQueue *v3;

  if (!a1)
    return 4294954516;
  v3 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v3)
    return AudioQueueGetParameter(v3, a2, a3);
  else
    return 4294954511;
}

uint64_t FigAudioQueueTimingShimSetParameter(uint64_t a1, AudioQueueParameterID a2, AudioQueueParameterValue a3)
{
  OpaqueAudioQueue *v3;

  if (!a1)
    return 4294954516;
  v3 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v3)
    return AudioQueueSetParameter(v3, a2, a3);
  else
    return 4294954511;
}

uint64_t FigAudioQueueTimingShimGetProperty(uint64_t a1, AudioQueuePropertyID a2, void *a3, UInt32 *a4)
{
  OpaqueAudioQueue *v4;

  if (!a1)
    return 4294954516;
  v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v4)
    return AudioQueueGetProperty(v4, a2, a3, a4);
  else
    return 4294954511;
}

uint64_t FigAudioQueueTimingShimSetProperty(uint64_t a1, AudioQueuePropertyID a2, const void *a3, UInt32 a4)
{
  OpaqueAudioQueue *v4;

  if (!a1)
    return 4294954516;
  v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v4)
    return AudioQueueSetProperty(v4, a2, a3, a4);
  else
    return 4294954511;
}

uint64_t FigAudioQueueTimingShimAddPropertyListener(uint64_t a1, AudioQueuePropertyID a2, void (__cdecl *a3)(void *, AudioQueueRef, AudioQueuePropertyID), void *a4)
{
  OpaqueAudioQueue *v4;

  if (!a1)
    return 4294954516;
  v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v4)
    return AudioQueueAddPropertyListener(v4, a2, a3, a4);
  else
    return 4294954511;
}

uint64_t FigAudioQueueTimingShimRemovePropertyListener(uint64_t a1, AudioQueuePropertyID a2, void (__cdecl *a3)(void *, AudioQueueRef, AudioQueuePropertyID), void *a4)
{
  OpaqueAudioQueue *v4;

  if (!a1)
    return 4294954516;
  v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v4)
    return AudioQueueRemovePropertyListener(v4, a2, a3, a4);
  else
    return 4294954511;
}

uint64_t FigAudioQueueTimingShimAllocateBufferWithMemory(uint64_t a1)
{
  if (!a1)
    return 4294954516;
  if (*(_QWORD *)(a1 + 16))
    return AudioQueueAllocateBufferWithMemory();
  return 4294954511;
}

uint64_t FigAudioQueueTimingShimAllocateBuffer(uint64_t a1, UInt32 a2, AudioQueueBufferRef *a3)
{
  OpaqueAudioQueue *v3;

  if (!a1)
    return 4294954516;
  v3 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v3)
    return AudioQueueAllocateBuffer(v3, a2, a3);
  else
    return 4294954511;
}

uint64_t FigAudioQueueTimingShimFreeBuffer(uint64_t a1, AudioQueueBuffer *a2)
{
  OpaqueAudioQueue *v2;

  if (!a1)
    return 4294954516;
  v2 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v2)
    return AudioQueueFreeBuffer(v2, a2);
  else
    return 4294954511;
}

uint64_t FigAudioQueueTimingShimGetCurrentTime(CMTime *a1, AudioQueueTimelineRef inTimeline, int a3, _OWORD *a4, Boolean *outTimelineDiscontinuity)
{
  __int128 v5;
  __int128 v6;
  OpaqueAudioQueue *epoch;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  _OWORD v15[4];
  AudioTimeStamp outTimeStamp;

  v5 = a4[1];
  *(_OWORD *)&outTimeStamp.mSampleTime = *a4;
  *(_OWORD *)&outTimeStamp.mRateScalar = v5;
  v6 = a4[3];
  *(_OWORD *)&outTimeStamp.mSMPTETime.mSubframes = a4[2];
  *(_OWORD *)&outTimeStamp.mSMPTETime.mHours = v6;
  if (!a1)
    return 4294954516;
  epoch = (OpaqueAudioQueue *)a1->epoch;
  if (!epoch)
    return 4294954511;
  if (a3)
  {
    result = faqts_waitAudioQueueStartSynchronous((uint64_t)a1);
    if ((_DWORD)result)
      return result;
    epoch = (OpaqueAudioQueue *)a1->epoch;
  }
  result = AudioQueueGetCurrentTime(epoch, inTimeline, &outTimeStamp, outTimelineDiscontinuity);
  if (!(_DWORD)result)
  {
    faqts_convertAQTimeStampToTimingShimTimeStamp(a1, (uint64_t)&outTimeStamp, (double *)v15);
    result = 0;
    v13 = v15[1];
    *a4 = v15[0];
    a4[1] = v13;
    v14 = v15[3];
    a4[2] = v15[2];
    a4[3] = v14;
  }
  return result;
}

uint64_t FigAudioQueueTimingShimScheduleParameters(uint64_t a1, double *a2, unsigned int a3, unsigned int *a4, float *a5)
{
  uint64_t v9;
  unsigned int *v10;
  float *v11;
  unsigned int v12;
  int v13;
  float v15;
  float *v16;
  uint64_t v17;
  float *v19;
  double v21[8];
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[5];

  memset(v27, 0, 64);
  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      faqts_convertTimingShimTimeStampToAQTimeStamp(a1, (uint64_t)a2, (double *)v27);
      v9 = a3;
      v19 = (float *)malloc_type_calloc(a3, 4uLL, 0x100004052888210uLL);
      if (a3)
      {
        v11 = v19;
        v10 = a4;
        do
        {
          v12 = *v10++;
          v13 = (1 << v12) & 0x8001440;
          if (v12 > 0x1B || v13 == 0)
          {
            v15 = *a5;
          }
          else
          {
            v26 = 1;
            v24 = 0u;
            v25 = 0u;
            v23 = 0u;
            v22 = *a2 + (float)(*a5 * (float)*(int *)(a1 + 52));
            faqts_convertTimingShimTimeStampToAQTimeStamp(a1, (uint64_t)&v22, v21);
            v15 = (v21[0] - *(double *)v27) / (double)*(int *)(a1 + 52);
          }
          *v11++ = v15;
          ++a5;
          --v9;
        }
        while (v9);
      }
      v16 = v19;
      v17 = AudioQueueScheduleParameters();
    }
    else
    {
      v16 = 0;
      v17 = 4294954511;
    }
  }
  else
  {
    v16 = 0;
    v17 = 4294954516;
  }
  free(v16);
  return v17;
}

uint64_t FigAudioQueueTimingShimEnqueueBufferWithParameters(CMTime *a1, AudioQueueBuffer *a2, UInt32 a3, const AudioStreamPacketDescription *a4, UInt32 a5, UInt32 a6, UInt32 a7, const AudioQueueParameterEvent *a8, uint64_t a9, _OWORD *a10)
{
  OpaqueAudioQueue *epoch;
  const AudioTimeStamp *inStartTime;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  _OWORD v23[4];
  AudioTimeStamp v24;
  _OWORD v25[5];

  if (!a1)
    return 4294954516;
  epoch = (OpaqueAudioQueue *)a1->epoch;
  if (!epoch)
    return 4294954511;
  memset(v25, 0, 64);
  memset(&v24, 0, sizeof(v24));
  if (a9)
  {
    inStartTime = (const AudioTimeStamp *)v25;
    faqts_convertTimingShimTimeStampToAQTimeStamp((uint64_t)a1, a9, (double *)v25);
    epoch = (OpaqueAudioQueue *)a1->epoch;
  }
  else
  {
    inStartTime = 0;
  }
  result = AudioQueueEnqueueBufferWithParameters(epoch, a2, a3, a4, a5, a6, a7, a8, inStartTime, &v24);
  if (a10)
  {
    if (!(_DWORD)result)
    {
      faqts_convertAQTimeStampToTimingShimTimeStamp(a1, (uint64_t)&v24, (double *)v23);
      result = 0;
      v21 = v23[1];
      *a10 = v23[0];
      a10[1] = v21;
      v22 = v23[3];
      a10[2] = v23[2];
      a10[3] = v22;
    }
  }
  return result;
}

uint64_t FigAudioQueueTimingShimGetAudioQueue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t FigAudioQueueTimingShimGetAudioQueueLatency(uint64_t a1, OpaqueCMClock *a2, int a3, CMTime *a4)
{
  __int128 v4;
  CMTimeEpoch v5;
  int v10;
  CMTime *v11;
  OSStatus Property;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v14;
  unsigned int v15;
  Float64 Seconds;
  OSStatus AudioDevice;
  NSObject *v18;
  uint64_t CurrentTime;
  uint64_t PropertyData;
  int64_t v21;
  Float64 v22;
  unsigned int mSampleTime_low;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  CMTime v28;
  os_log_type_t v29;
  int v30;
  AudioObjectPropertyAddress v31;
  AudioObjectPropertyAddress inAddress;
  UInt32 v33;
  CMTime v34;
  CMTime type;
  CMTime inObjectID;
  CMTime ioDataSize;
  unsigned int value;
  double value_4;
  AudioDeviceID deviceIDOut;
  CMTime outData;
  AudioTimeStamp rhs;
  AudioTimeStamp time[2];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v28.value = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v28.epoch = v5;
  if (!a1)
    return 4294954516;
  if (!*(_QWORD *)(a1 + 16))
    return 4294954511;
  v26 = v4;
  v10 = FigPreferAudioSessionClock();
  v11 = (CMTime *)MEMORY[0x1E0CA2E68];
  if (v10)
  {
    outData.value = 0;
    LODWORD(ioDataSize.value) = 8;
    Property = AudioQueueGetProperty(*(AudioQueueRef *)(a1 + 16), 0x7164646Cu, &outData, (UInt32 *)&ioDataSize);
    if (!Property)
    {
      CMTimeMakeWithSeconds(&v28, *(Float64 *)&outData.value, 1000000000);
      if (dword_1EE2A2C10)
      {
        LODWORD(inObjectID.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v14 = inObjectID.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
          v15 = v14;
        else
          v15 = v14 & 0xFFFFFFFE;
        if (v15)
        {
          *(_OWORD *)&time[0].mSampleTime = *(_OWORD *)&v28.value;
          *(_QWORD *)&time[0].mRateScalar = v28.epoch;
          Seconds = CMTimeGetSeconds((CMTime *)time);
          LODWORD(rhs.mSampleTime) = 136315650;
          *(_QWORD *)((char *)&rhs.mSampleTime + 4) = "faqts_getAudioQueueDynamicLatency";
          WORD2(rhs.mHostTime) = 2048;
          *(UInt64 *)((char *)&rhs.mHostTime + 6) = a1;
          HIWORD(rhs.mRateScalar) = 2048;
          *(Float64 *)&rhs.mWordClockTime = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  else
  {
    deviceIDOut = 0;
    value_4 = NAN;
    value = 0;
    *(_OWORD *)&outData.value = v26;
    outData.epoch = v5;
    *(_OWORD *)&ioDataSize.value = v26;
    ioDataSize.epoch = v5;
    *(_OWORD *)&inObjectID.value = v26;
    inObjectID.epoch = v5;
    type = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v34.value = v26;
    v34.epoch = v5;
    inAddress.mElement = 0;
    *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"trsnptuo";
    AudioDevice = CMAudioDeviceClockGetAudioDevice(a2, 0, &deviceIDOut, 0);
    if (AudioDevice)
      goto LABEL_44;
    if (!FigAudioDeviceSupportsPresentationTime())
    {
      Property = -17921;
      goto LABEL_22;
    }
    AudioDevice = faqts_getAudioQueueLatency(a1, &inObjectID);
    if (AudioDevice
      || (AudioDevice = FigAudioDeviceGetCurrentDynamicLatency()) != 0
      || (v33 = 8, (AudioDevice = AudioObjectGetPropertyData(deviceIDOut, &inAddress, 0, 0, &v33, &value_4)) != 0))
    {
LABEL_44:
      Property = AudioDevice;
    }
    else
    {
      v31.mElement = 0;
      *(_QWORD *)&v31.mSelector = *(_QWORD *)"tlwhptuo";
      v33 = 4;
      if (!AudioObjectGetPropertyData(deviceIDOut, &v31, 0, 0, &v33, &value))
      {
        CMTimeMake(&ioDataSize, value, (int)value_4);
        *(_OWORD *)&time[0].mSampleTime = *(_OWORD *)&inObjectID.value;
        *(_QWORD *)&time[0].mRateScalar = inObjectID.epoch;
        *(_OWORD *)&rhs.mSampleTime = *(_OWORD *)&ioDataSize.value;
        *(_QWORD *)&rhs.mRateScalar = ioDataSize.epoch;
        CMTimeSubtract(&type, (CMTime *)time, (CMTime *)&rhs);
      }
      *(_OWORD *)&time[0].mSampleTime = *(_OWORD *)&outData.value;
      *(_QWORD *)&time[0].mRateScalar = outData.epoch;
      *(_OWORD *)&rhs.mSampleTime = *(_OWORD *)&type.value;
      *(_QWORD *)&rhs.mRateScalar = type.epoch;
      CMTimeAdd(&v34, (CMTime *)time, (CMTime *)&rhs);
      if (dword_1EE2A2C10)
      {
        v30 = 0;
        v29 = OS_LOG_TYPE_DEFAULT;
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      Property = 0;
      v28 = v34;
    }
  }
LABEL_22:
  if (Property && faqts_getAudioQueueLatency(a1, &v28))
  {
    memset(time, 0, 64);
    memset(&rhs, 0, sizeof(rhs));
    outData = *v11;
    CurrentTime = AudioQueueDeviceGetCurrentTime(*(AudioQueueRef *)(a1 + 16), time);
    if (!(_DWORD)CurrentTime)
    {
      if ((~time[0].mFlags & 3) != 0)
      {
LABEL_33:
        v28 = outData;
        goto LABEL_34;
      }
      LODWORD(inObjectID.value) = 0;
      LODWORD(type.value) = 0;
      inAddress.mSelector = 0;
      v31.mSelector = 0;
      PropertyData = CMAudioDeviceClockGetAudioDevice(a2, 0, (AudioDeviceID *)&inObjectID, 0);
      if ((_DWORD)PropertyData)
        goto LABEL_48;
      ioDataSize.value = 0x6F75747073746D23;
      ioDataSize.timescale = 0;
      LODWORD(v34.value) = 4;
      CurrentTime = AudioObjectGetPropertyData(inObjectID.value, (const AudioObjectPropertyAddress *)&ioDataSize, 0, 0, (UInt32 *)&v34, &type);
      if ((_DWORD)CurrentTime)
        return CurrentTime;
      ioDataSize.value = 0x676C6F626C746E63;
      ioDataSize.timescale = 0;
      LODWORD(v34.value) = 4;
      PropertyData = AudioObjectGetPropertyData(type.value, (const AudioObjectPropertyAddress *)&ioDataSize, 0, 0, (UInt32 *)&v34, &inAddress);
      if ((_DWORD)PropertyData
        || (ioDataSize.value = 0x6F7574706C746E63,
            ioDataSize.timescale = 0,
            LODWORD(v34.value) = 4,
            PropertyData = AudioObjectGetPropertyData(inObjectID.value, (const AudioObjectPropertyAddress *)&ioDataSize, 0, 0, (UInt32 *)&v34, &v31), (_DWORD)PropertyData))
      {
LABEL_48:
        v24 = PropertyData;
        FigSignalErrorAt();
        return v24;
      }
      time[0].mSampleTime = time[0].mSampleTime + (double)(v31.mSelector + inAddress.mSelector);
      time[0].mFlags = 1;
      rhs.mFlags = 2;
      CurrentTime = AudioQueueDeviceTranslateTime(*(AudioQueueRef *)(a1 + 16), time, &rhs);
      if (!(_DWORD)CurrentTime)
      {
        if ((rhs.mFlags & 2) != 0)
        {
          v21 = FigHostTimeToNanoseconds();
          CMTimeMake(&outData, v21, 1000000000);
        }
        goto LABEL_33;
      }
    }
    return CurrentTime;
  }
LABEL_34:
  LODWORD(rhs.mSampleTime) = 0;
  v27 = *(_OWORD *)&v11->value;
  *(_OWORD *)&time[0].mSampleTime = *(_OWORD *)&v11->value;
  v22 = *(double *)&v11->epoch;
  time[0].mRateScalar = v22;
  if (!FigPreferAudioSessionClock()
    && !faqts_getAudioDeviceScreenLatencyFromDevice((uint64_t)CFSTR("AirTunes"), &rhs))
  {
    mSampleTime_low = LODWORD(rhs.mSampleTime);
    if (!a3 || LODWORD(rhs.mSampleTime))
    {
LABEL_40:
      CMTimeMake((CMTime *)time, mSampleTime_low, 1000);
      *(_OWORD *)&rhs.mSampleTime = *(_OWORD *)&time[0].mSampleTime;
      rhs.mRateScalar = time[0].mRateScalar;
      *(_OWORD *)&outData.value = v27;
      *(Float64 *)&outData.epoch = v22;
      if (CMTimeCompare((CMTime *)&rhs, &outData))
      {
        outData = v28;
        *(_OWORD *)&ioDataSize.value = *(_OWORD *)&time[0].mSampleTime;
        ioDataSize.epoch = *(_QWORD *)&time[0].mRateScalar;
        CMTimeSubtract((CMTime *)&rhs, &outData, &ioDataSize);
        *(_OWORD *)&v28.value = *(_OWORD *)&rhs.mSampleTime;
        v28.epoch = *(_QWORD *)&rhs.mRateScalar;
      }
      goto LABEL_42;
    }
    if (!faqts_getAudioDeviceScreenLatencyFromDevice((uint64_t)CFSTR("Nero"), &rhs))
    {
      mSampleTime_low = LODWORD(rhs.mSampleTime);
      goto LABEL_40;
    }
  }
LABEL_42:
  v24 = 0;
  *a4 = v28;
  return v24;
}

uint64_t faqts_getAudioQueueLatency(uint64_t a1, CMTime *a2)
{
  uint64_t Property;
  CMTime v5;
  Float64 outData;
  UInt32 ioDataSize;

  outData = 0.0;
  ioDataSize = 8;
  Property = AudioQueueGetProperty(*(AudioQueueRef *)(a1 + 16), 0x71646C73u, &outData, &ioDataSize);
  if (!(_DWORD)Property)
  {
    CMTimeMakeWithSeconds(&v5, outData, 1000000000);
    *a2 = v5;
  }
  return Property;
}

uint64_t registerFigAudioQueueTimingShimType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAudioQueueTimingShimID = result;
  return result;
}

_DWORD *faqts_getAudioQueueStartErrorInternal(_DWORD *result)
{
  result[2] = *(_DWORD *)(*(_QWORD *)result + 24);
  return result;
}

void faqts_audioQueueStartInternal(uint64_t a1)
{
  CFTypeRef v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  uint64_t v5;
  void (*v6)(_QWORD, uint64_t);
  void (*v7)(_QWORD, _QWORD);

  v2 = *(CFTypeRef *)a1;
  if (*(_BYTE *)(a1 + 24))
  {
    if (dword_1EE2A2C10)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v5 = AudioQueueStartWithFlags();
  }
  else
  {
    if (dword_1EE2A2C10)
    {
      v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v5 = AudioQueueStart(*((AudioQueueRef *)v2 + 2), *((const AudioTimeStamp **)v2 + 17));
  }
  *((_DWORD *)v2 + 6) = v5;
  v6 = *(void (**)(_QWORD, uint64_t))(a1 + 8);
  if (v6)
    v6(*(_QWORD *)(a1 + 16), v5);
  v7 = *(void (**)(_QWORD, _QWORD))(a1 + 32);
  if (v7)
    v7(*(_QWORD *)(a1 + 40), 0);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

uint64_t faqts_getAudioDeviceScreenLatencyFromDevice(uint64_t a1, void *a2)
{
  uint64_t PropertyData;
  AudioObjectID inObjectID;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  uint64_t inQualifierData;

  inQualifierData = a1;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6272756964;
  inAddress.mElement = 0;
  inObjectID = 0;
  ioDataSize = 4;
  PropertyData = AudioObjectGetPropertyData(1u, &inAddress, 8u, &inQualifierData, &ioDataSize, &inObjectID);
  if (!(_DWORD)PropertyData && inObjectID)
  {
    *(_QWORD *)&inAddress.mSelector = 0x6F7574706170736CLL;
    inAddress.mElement = 0;
    ioDataSize = 4;
    return AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, a2);
  }
  return PropertyData;
}

double faqts_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void faqts_finalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
    CFRelease(v3);
}

CFStringRef faqts_copyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<FigAudioQueueTimingShim %p>"), a1);
}

uint64_t editMentorEditsChanged()
{
  return FigDeferNotificationToDispatchQueue();
}

uint64_t EditMentorNewWithChildEditMentorAndSingleEditSegment(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(0, 0, a1, 0, a2, 0, 0, a3);
}

uint64_t EditMentorNewWithMentorCallbacks(uint64_t a1, const void *a2, _QWORD *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(0, 0, 0, a1, 0, a2, 0, a3);
}

_QWORD *EditMentorSetDebugName(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;
  const void *v4;

  if (result)
  {
    v3 = result;
    v4 = (const void *)result[38];
    if (v4)
      CFRelease(v4);
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    v3[38] = result;
  }
  return result;
}

uint64_t editMentorSetChildMentorModeToEmptyEdit(uint64_t a1, CMSampleBufferRef a2, uint64_t a3, int a4, uint64_t a5, const void *a6)
{
  const void *v12;
  CMSampleBufferRef v13;
  char v14;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  CMTimeValue v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  void (*v21)(_QWORD, uint64_t, CMSampleBufferRef);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef cf;
  CMSampleTimingInfo sampleTimingArray;
  CMSampleBufferRef v28;

  cf = 0;
  v12 = (const void *)editMentorRetainCurrentChildOrderAndOptionsDictionary(a1, (__CFDictionary **)&cf);
  v13 = 0;
  if (!a2)
  {
    if (a4 && *(_BYTE *)(a1 + 616))
    {
      v14 = 0;
      *(_BYTE *)(a1 + 616) = 0;
    }
    else
    {
      v14 = 1;
    }
    v15 = *(_DWORD *)(a3 + 12);
    v16 = *(_QWORD *)(a3 + 16);
    v28 = 0;
    if ((v15 & 0x1D) == 1)
    {
      *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E68];
      v17 = *(_QWORD *)a3;
      sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      sampleTimingArray.presentationTimeStamp.value = v17;
      sampleTimingArray.presentationTimeStamp.timescale = *(_DWORD *)(a3 + 8);
      sampleTimingArray.presentationTimeStamp.flags = v15;
      sampleTimingArray.presentationTimeStamp.epoch = v16;
      sampleTimingArray.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v18 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v28);
      if ((_DWORD)v18)
      {
        v19 = v18;
        v13 = 0;
        if (!v12)
          goto LABEL_29;
LABEL_28:
        CFRelease(v12);
        goto LABEL_29;
      }
      v20 = (const void *)*MEMORY[0x1E0C9AE50];
      CMSetAttachment(v28, (CFStringRef)*MEMORY[0x1E0CA2678], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
      if (*(_DWORD *)(a1 + 320) == 1)
        CMSetAttachment(v28, (CFStringRef)*MEMORY[0x1E0CA2648], v20, 1u);
      if ((v14 & 1) == 0)
      {
        CMSetAttachment(v28, (CFStringRef)*MEMORY[0x1E0CA26C0], v20, 1u);
        if (*(_DWORD *)(a1 + 320) == 3)
          CMSetAttachment(v28, (CFStringRef)*MEMORY[0x1E0CA2680], v20, 1u);
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 272));
      v21 = *(void (**)(_QWORD, uint64_t, CMSampleBufferRef))(a1 + 248);
      if (v21)
        v21(*(_QWORD *)(a1 + 264), a5, v28);
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 272));
      a2 = v28;
      v13 = v28;
    }
    else
    {
      a2 = 0;
      v13 = 0;
    }
  }
  if (*(_QWORD *)a1)
  {
    v22 = VideoMentorSetModeToEmptyEdit(*(_QWORD *)a1, a2, (const __CFDictionary *)cf, a6, v12);
    goto LABEL_27;
  }
  v23 = *(_QWORD *)(a1 + 8);
  if (v23)
  {
    v22 = AudioMentorSetModeToEmptyEdit(v23, a2, (const __CFDictionary *)cf, a6, v12);
    goto LABEL_27;
  }
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
    EditMentorSetModeToEmptyEdit(v24, (uint64_t)a2, cf, (uint64_t)a6, v12);
  if (*(_BYTE *)(a1 + 24))
  {
    v22 = (*(uint64_t (**)(_QWORD, CMSampleBufferRef, CFTypeRef, const void *, const void *))(a1 + 96))(*(_QWORD *)(a1 + 40), a2, cf, a6, v12);
LABEL_27:
    v19 = v22;
    if (!v12)
      goto LABEL_29;
    goto LABEL_28;
  }
  v19 = 0;
  if (v12)
    goto LABEL_28;
LABEL_29:
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  return v19;
}

void EditMentorSetModeToReversePlayback(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, const void *a7)
{
  uint64_t v7;

  if ((*(_BYTE *)(a3 + 12) & 1) == 0)
  {
    v7 = MEMORY[0x1E0CA2E28];
    *(_OWORD *)a3 = *MEMORY[0x1E0CA2E28];
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 16);
  }
  editMentorStartNewParentOrder(a1, a4, a7);
}

uint64_t sub_192AEBC4C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  const void *v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  const void *v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  *(_DWORD *)(v0 + 320) = 3;
  v7 = *v5;
  *(_QWORD *)(v0 + 636) = *((_QWORD *)v5 + 2);
  *(_OWORD *)(v0 + 620) = v7;
  v8 = *v4;
  *(_QWORD *)(v0 + 660) = *((_QWORD *)v4 + 2);
  *(_OWORD *)(v0 + 644) = v8;
  v9 = *(const void **)(v0 + 672);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(v0 + 672) = 0;
  }
  v20 = 0u;
  v21 = 0u;
  v10 = *(_OWORD *)(v0 + 636);
  v16 = *(_OWORD *)(v0 + 620);
  v17 = v10;
  v18 = *(_OWORD *)(v0 + 652);
  v19 = 0u;
  if (!editMentorSelectFirstEditSegmentForParentRange(v0, (uint64_t)&v16, (_BYTE *)(v6 - 65), (uint64_t)&v19))
  {
    v16 = *v4;
    *(_QWORD *)&v17 = *((_QWORD *)v4 + 2);
    v11 = v0;
    v12 = 1;
    v13 = v1;
    v14 = v3;
    return editMentorSetChildMentorModeToEmptyEdit(v11, 0, (uint64_t)&v16, v12, v13, v14);
  }
  *(_QWORD *)(v0 + 672) = v3;
  if (v3)
    CFRetain(v3);
  if (*(_BYTE *)(v6 - 65))
  {
    v16 = *v4;
    *(_QWORD *)&v17 = *((_QWORD *)v4 + 2);
    v11 = v0;
    v12 = 0;
    v13 = v1;
    v14 = 0;
    return editMentorSetChildMentorModeToEmptyEdit(v11, 0, (uint64_t)&v16, v12, v13, v14);
  }
  v16 = v19;
  v17 = v20;
  v18 = v21;
  return editMentorSetChildMentorModeToReversePlayback(v0, (uint64_t)&v16, v2);
}

uint64_t editMentorSetChildMentorModeToReversePlayback(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *, __int128 *, __CFDictionary *, const void *, _QWORD, const void *);
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __CFDictionary *v19;

  v19 = 0;
  v6 = (const void *)editMentorRetainCurrentChildOrderAndOptionsDictionary(a1, &v19);
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v17 = *(_OWORD *)(a2 + 24);
    v18 = *(_QWORD *)(a2 + 40);
    v15 = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
    v8 = VideoMentorSetModeToReversePlayback(v7, 0, (uint64_t)&v17, 0, &v15, v19, a3, 0, v6);
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v17 = *(_OWORD *)(a2 + 24);
    v18 = *(_QWORD *)(a2 + 40);
    v15 = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
    v8 = AudioMentorSetModeToReversePlayback(v9, 0, (uint64_t)&v17, 0, (uint64_t)&v15, v19, 0, v6);
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v17 = *(_OWORD *)(a2 + 24);
    v18 = *(_QWORD *)(a2 + 40);
    v15 = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
    EditMentorSetModeToReversePlayback(v10, (uint64_t)&v17, (uint64_t)&v15, v19, (uint64_t)a3, 0, v6);
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v11 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, __CFDictionary *, const void *, _QWORD, const void *))(a1 + 88);
    v12 = *(_QWORD *)(a1 + 40);
    v17 = *(_OWORD *)(a2 + 24);
    v18 = *(_QWORD *)(a2 + 40);
    v15 = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
    v8 = v11(v12, &v17, &v15, v19, a3, 0, v6);
LABEL_9:
    v13 = v8;
    if (!v6)
      goto LABEL_11;
    goto LABEL_10;
  }
  v13 = 0;
  if (v6)
LABEL_10:
    CFRelease(v6);
LABEL_11:
  if (v19)
    CFRelease(v19);
  return v13;
}

void EditMentorSetModeToEmptyEdit(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5)
{
  editMentorStartNewParentOrder(a1, a3, a5);
}

uint64_t sub_192AEBF34()
{
  const void *v0;
  uint64_t v1;
  opaqueCMSampleBuffer *v2;
  uint64_t v3;
  const void *v4;

  *(_DWORD *)(v3 + 320) = 0;
  v4 = *(const void **)(v3 + 672);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v3 + 672) = 0;
  }
  return editMentorSetChildMentorModeToEmptyEdit(v3, v2, MEMORY[0x1E0CA2E18], 0, v1, v0);
}

uint64_t EditMentorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  __CFDictionary *v6;

  if (editMentorPropertyNeedsToBeRescaled())
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 280));
    v6 = *(__CFDictionary **)(a1 + 288);
    if (a3)
      CFDictionarySetValue(v6, a2, a3);
    else
      CFDictionaryRemoveValue(v6, a2);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 280));
  }
  return editMentorSetChildMentorProperty(a1, (uint64_t)a2, (const __CFDictionary *)a3);
}

BOOL editMentorPropertyNeedsToBeRescaled()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t editMentorSetChildMentorProperty(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  const __CFDictionary *v3;
  const __CFAllocator *v6;
  const __CFDictionary *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  CMTime time2;
  CMTime time1;
  CMTime v14;

  v3 = a3;
  if (a3 && editMentorPropertyNeedsToBeRescaled())
  {
    CMTimeMakeFromDictionary(&v14, v3);
    time1 = *(CMTime *)(a1 + 440);
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2))
    {
      time2 = v14;
      CMTimeMultiplyTimeByTimeRatio();
      v14 = time1;
    }
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    time1 = v14;
    v3 = CMTimeCopyAsDictionary(&time1, v6);
    v7 = v3;
  }
  else
  {
    v7 = 0;
  }
  if (*(_QWORD *)a1)
  {
    v8 = VideoMentorSetProperty(*(_QWORD *)a1, a2, v3);
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 8))
  {
LABEL_13:
    v9 = 0;
    if (!v7)
      return v9;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v8 = EditMentorSetProperty(v11, a2, v3);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_13;
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, const __CFDictionary *))(a1 + 104))(*(_QWORD *)(a1 + 40), a2, v3);
  }
LABEL_9:
  v9 = v8;
  if (v7)
LABEL_10:
    CFRelease(v7);
  return v9;
}

void editMentorEditsChanged_deferred(uint64_t a1, uint64_t a2)
{
  const void *v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 312));
  if (*(_BYTE *)(a2 + 566))
  {
    *(_BYTE *)(a2 + 566) = 0;
    v3 = *(const void **)(a2 + 568);
    if (v3)
      CFRetain(v3);
    MEMORY[0x19402EF04](*(_QWORD *)(a2 + 312));
    editMentorAdvanceToNextEdit(a2);
  }
  JUMPOUT(0x19402EF04);
}

void sub_192AEC230()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

void editMentorAdvanceToNextEdit(uint64_t a1)
{
  editMentorStartNewChildOrder(a1);
}

void editMentorPostSyntheticPrerollCompleteNotification(uint64_t a1, const void *a2)
{
  __CFDictionary *v4;

  v4 = FigMentorPrerollCompletePayloadCreate(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v4)
    CFRelease(v4);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 312));
  if (*(const void **)(a1 + 568) == a2)
    *(_BYTE *)(a1 + 680) = 0;
  JUMPOUT(0x19402EF04);
}

unint64_t editMentorCurrentEditIsLastOpenEndedEdit(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;
  void (*v4)(CFTypeRef, CFTypeRef *);
  unint64_t v5;
  unsigned int (*v6)(unint64_t, uint64_t);
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v9;
  char v10;
  CFTypeRef v12;
  CFTypeRef cf;

  v12 = 0;
  cf = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 344));
  v2 = *(const void **)(a1 + 336);
  if (!v2)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 344));
    v9 = 0;
    v3 = 0;
LABEL_14:
    v5 = 0;
    v10 = 1;
    goto LABEL_15;
  }
  v3 = CFRetain(v2);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 344));
  if (!v3)
  {
    v9 = 0;
    goto LABEL_14;
  }
  if (*(_DWORD *)(a1 + 320) != 2 || !*(_BYTE *)(a1 + 617))
    goto LABEL_12;
  v4 = *(void (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_20;
  }
  v4(v3, &cf);
  v5 = (unint64_t)cf;
  if (!cf)
  {
LABEL_20:
    CFRelease(v3);
    return v5;
  }
  v6 = *(unsigned int (**)(unint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v6 || v6(v5, 1) != -12520)
  {
LABEL_12:
    v9 = 0;
    v10 = 0;
    v5 = 0;
    goto LABEL_15;
  }
  FigBaseObject = FigEditCursorGetFigBaseObject(v3);
  v8 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v8)
  {
    v8(FigBaseObject, CFSTR("TimeRangesMayIncrease"), *MEMORY[0x1E0C9AE00], &v12);
    v9 = v12;
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v5 = v9 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
LABEL_15:
  if (cf)
  {
    CFRelease(cf);
    v9 = v12;
  }
  if (v9)
    CFRelease(v9);
  if ((v10 & 1) == 0)
    goto LABEL_20;
  return v5;
}

uint64_t editMentorDoesEditSegmentIntersectTrackRange(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  CMTimeRange v6;
  CMTime time2;
  CMTime v8;

  memset(&v8, 0, sizeof(v8));
  if ((*(_DWORD *)(a2 + 36) & 0x1D) == 1)
  {
    *(_OWORD *)&v6.start.value = *(_OWORD *)(a2 + 24);
    v6.start.epoch = *(_QWORD *)(a2 + 40);
    time2 = *(CMTime *)(a1 + 48);
    if (CMTimeCompare(&v6.start, &time2) < 1)
      return 0;
  }
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v6.start.value = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v6.start.epoch = v4;
  *(_OWORD *)&v6.duration.timescale = *(_OWORD *)(a1 + 80);
  CMTimeRangeGetEnd(&v8, &v6);
  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1
    && (v6.start = v8, time2 = *(CMTime *)a2, CMTimeCompare(&v6.start, &time2) < 1))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

void editMentorUpdateChildMentorProperties(uint64_t a1)
{
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 280));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 288), (CFDictionaryApplierFunction)editMentorUpdateChildMentorProperties_applier, (void *)a1);
  JUMPOUT(0x19402EF04);
}

void editMentorSetCurrentConsolidatedEdit(uint64_t a1, const void *a2)
{
  const void *v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 360));
  v4 = *(const void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  JUMPOUT(0x19402EF04);
}

uint64_t editMentorConsolidateCurrentEdit(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __CFArray *Mutable;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, CFTypeRef *);
  uint64_t v14;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v17;
  CFTypeRef v18;
  uint64_t (*v19)(CFTypeRef, uint64_t);
  int v20;
  BOOL v21;
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, CMTimeRange *);
  uint64_t v24;
  CMTime *p_time1;
  __int128 v26;
  const void *v27;
  CFTypeRef v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[3];
  CMTimeRange range;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  CMTime time1;
  CMTime v43;
  CMTimeRange v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  CMTimeRange value;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  CFTypeRef v52;
  CFTypeRef v53[3];

  v52 = 0;
  v53[0] = 0;
  if (*(_BYTE *)(a1 + 681))
  {
    v4 = *(_OWORD *)(a1 + 416);
    *(_OWORD *)&value.duration.timescale = *(_OWORD *)(a1 + 400);
    v49 = v4;
    v5 = *(_OWORD *)(a1 + 448);
    v50 = *(_OWORD *)(a1 + 432);
    v51 = v5;
    v6 = *(_OWORD *)(a1 + 384);
    *(_OWORD *)&value.start.value = *(_OWORD *)(a1 + 368);
    *(_OWORD *)&value.start.epoch = v6;
    if (*(_DWORD *)(a1 + 320) == 3)
      v7 = 0xFFFFFFFFLL;
    else
      v7 = 1;
    v8 = *MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &editMentorCMTimeMappingArrayCallbacks);
    if (Mutable)
    {
      v10 = 0;
      v11 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
      v35 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
      v36 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
      v33 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
      v34 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
      v31 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
      v32 = *MEMORY[0x1E0CA2E20];
      while (1)
      {
        *(_OWORD *)&v44.duration.timescale = v36;
        v45 = v35;
        v46 = v34;
        v47 = v33;
        *(_OWORD *)&v44.start.value = v32;
        *(_OWORD *)&v44.start.epoch = v31;
        if (v10)
        {
          CFRelease(v10);
          v53[0] = 0;
        }
        v12 = *(_QWORD *)(a1 + 336);
        v13 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v13)
        {
          v29 = 4294954514;
          goto LABEL_43;
        }
        v14 = v13(v12, v53);
        if ((_DWORD)v14)
          goto LABEL_51;
        if (v52)
        {
          CFRelease(v52);
          v52 = 0;
        }
        FigBaseObject = FigEditCursorGetFigBaseObject(v53[0]);
        v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v16)
          v16(FigBaseObject, CFSTR("TimeRangesMayIncrease"), v8, &v52);
        v18 = v52;
        v17 = v53[0];
        v19 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v19)
        {
          v20 = v19(v17, v7);
          v21 = v20 == -12520;
          if (v18 == v11 && v20 == -12520)
            goto LABEL_36;
        }
        else
        {
          v21 = 0;
        }
        if (*(_DWORD *)(a1 + 320) == 3)
        {
          CFArrayInsertValueAtIndex(Mutable, 0, &value);
          if (v21)
            goto LABEL_36;
        }
        else
        {
          CFArrayAppendValue(Mutable, &value);
          if (v21)
            goto LABEL_36;
        }
        v22 = v53[0];
        v23 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v23)
        {
          v29 = 4294954514;
          goto LABEL_42;
        }
        v24 = v23(v22, &v44);
        if ((_DWORD)v24)
          break;
        if (*(_DWORD *)(a1 + 320) == 3)
        {
          range = v44;
          CMTimeRangeGetEnd(&v43, &range);
          *(_OWORD *)&range.start.value = *(_OWORD *)&value.start.value;
          range.start.epoch = value.start.epoch;
          p_time1 = &v43;
        }
        else
        {
          range = value;
          CMTimeRangeGetEnd(&time1, &range);
          *(_OWORD *)&range.start.value = *(_OWORD *)&v44.start.value;
          range.start.epoch = v44.start.epoch;
          p_time1 = &time1;
        }
        if (CMTimeCompare(p_time1, &range.start))
          goto LABEL_36;
        range = v44;
        v39 = v45;
        v40 = v46;
        v41 = v47;
        v26 = a2[1];
        v37[0] = *a2;
        v37[1] = v26;
        v37[2] = a2[2];
        if (!editMentorDoesEditSegmentIntersectTrackRange((uint64_t)&range, (uint64_t)v37))
        {
LABEL_36:
          if (CFArrayGetCount(Mutable) >= 1)
            editMentorSetCurrentConsolidatedEdit(a1, Mutable);
          editMentorSetCurrentConsolidatedEdit(a1, 0);
        }
        v27 = *(const void **)(a1 + 336);
        v28 = v53[0];
        *(CFTypeRef *)(a1 + 336) = v53[0];
        if (v28)
          CFRetain(v28);
        if (v27)
          CFRelease(v27);
        value = v44;
        v49 = v45;
        v50 = v46;
        v51 = v47;
        v10 = v53[0];
      }
      v29 = v24;
LABEL_42:
      FigSignalErrorAt();
    }
    else
    {
      v14 = FigSignalErrorAt();
LABEL_51:
      v29 = v14;
    }
LABEL_43:
    if (v52)
      CFRelease(v52);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v29 = 0;
  }
  if (v53[0])
    CFRelease(v53[0]);
  return v29;
}

__n128 editMentorCMTimeMappingArrayRetainCallback(const __CFAllocator *a1, uint64_t a2)
{
  _OWORD *v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = CFAllocatorAllocate(a1, 96, 0);
  if (v3)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *v3 = *(_OWORD *)a2;
    v3[1] = v5;
    result = *(__n128 *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 80);
    v3[4] = *(_OWORD *)(a2 + 64);
    v3[5] = v7;
    v3[2] = result;
    v3[3] = v6;
  }
  return result;
}

CFStringRef editMentorCMTimeMappingArrayCopyDescriptionCallback(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  CMTimeMapping v6;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[3];
  *(_OWORD *)&v6.source.duration.timescale = a1[2];
  *(_OWORD *)&v6.target.start.value = v2;
  v3 = a1[5];
  *(_OWORD *)&v6.target.start.epoch = a1[4];
  *(_OWORD *)&v6.target.duration.timescale = v3;
  v4 = a1[1];
  *(_OWORD *)&v6.source.start.value = *a1;
  *(_OWORD *)&v6.source.start.epoch = v4;
  return CMTimeMappingCopyDescription(v1, &v6);
}

uint64_t editMentorCMTimeMappingArrayEqualCallback(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  CMTimeRange v9;
  CMTimeRange range1;

  v4 = a1[1];
  *(_OWORD *)&range1.start.value = *a1;
  *(_OWORD *)&range1.start.epoch = v4;
  *(_OWORD *)&range1.duration.timescale = a1[2];
  v5 = a2[1];
  *(_OWORD *)&v9.start.value = *a2;
  *(_OWORD *)&v9.start.epoch = v5;
  *(_OWORD *)&v9.duration.timescale = a2[2];
  result = CMTimeRangeEqual(&range1, &v9);
  if ((_DWORD)result)
  {
    v7 = a1[4];
    *(_OWORD *)&range1.start.value = a1[3];
    *(_OWORD *)&range1.start.epoch = v7;
    *(_OWORD *)&range1.duration.timescale = a1[5];
    v8 = a2[4];
    *(_OWORD *)&v9.start.value = a2[3];
    *(_OWORD *)&v9.start.epoch = v8;
    *(_OWORD *)&v9.duration.timescale = a2[5];
    return CMTimeRangeEqual(&range1, &v9) != 0;
  }
  return result;
}

void editMentorSelectEditForTimeInConsolidatedEdit(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  const void *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *ValueAtIndex;
  __int128 *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CMTimeRange v36;
  CMTime v37;
  CMTime time2;
  CMTimeRange v39;

  if (!*(_BYTE *)(a1 + 681))
    goto LABEL_18;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 360));
  v8 = *(const void **)(a1 + 352);
  if (!v8)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 360));
    goto LABEL_18;
  }
  v9 = (const __CFArray *)CFRetain(v8);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 360));
  if (!v9)
  {
LABEL_18:
    if (*(_BYTE *)(a1 + 563))
    {
      v19 = *(_OWORD *)(a1 + 512);
      a4[2] = *(_OWORD *)(a1 + 496);
      a4[3] = v19;
      v20 = *(_OWORD *)(a1 + 544);
      a4[4] = *(_OWORD *)(a1 + 528);
      a4[5] = v20;
      v21 = *(_OWORD *)(a1 + 464);
      v22 = *(_OWORD *)(a1 + 480);
    }
    else
    {
      v23 = *(_OWORD *)(a1 + 416);
      a4[2] = *(_OWORD *)(a1 + 400);
      a4[3] = v23;
      v24 = *(_OWORD *)(a1 + 448);
      a4[4] = *(_OWORD *)(a1 + 432);
      a4[5] = v24;
      v21 = *(_OWORD *)(a1 + 368);
      v22 = *(_OWORD *)(a1 + 384);
    }
    *a4 = v21;
    a4[1] = v22;
    return;
  }
  if (CFArrayGetCount(v9) < 2)
  {
    if (*(_BYTE *)(a1 + 563))
    {
      v25 = *(_OWORD *)(a1 + 512);
      a4[2] = *(_OWORD *)(a1 + 496);
      a4[3] = v25;
      v26 = *(_OWORD *)(a1 + 544);
      a4[4] = *(_OWORD *)(a1 + 528);
      a4[5] = v26;
      v27 = *(_OWORD *)(a1 + 464);
      v28 = *(_OWORD *)(a1 + 480);
    }
    else
    {
      v32 = *(_OWORD *)(a1 + 416);
      a4[2] = *(_OWORD *)(a1 + 400);
      a4[3] = v32;
      v33 = *(_OWORD *)(a1 + 448);
      a4[4] = *(_OWORD *)(a1 + 432);
      a4[5] = v33;
      v27 = *(_OWORD *)(a1 + 368);
      v28 = *(_OWORD *)(a1 + 384);
    }
  }
  else
  {
    Count = CFArrayGetCount(v9);
    if (Count >= 2)
    {
      v11 = 0;
      v12 = Count - 1;
      while (1)
      {
        v13 = v12 + v11;
        if (v12 + v11 < 0 != __OFADD__(v12, v11))
          ++v13;
        v14 = v13 >> 1;
        ValueAtIndex = (__int128 *)CFArrayGetValueAtIndex(v9, v13 >> 1);
        v16 = ValueAtIndex;
        v17 = ValueAtIndex + 3;
        if (a3)
          v17 = ValueAtIndex;
        v18 = v17[1];
        *(_OWORD *)&v39.start.value = *v17;
        *(_OWORD *)&v39.start.epoch = v18;
        *(_OWORD *)&v39.duration.timescale = v17[2];
        *(_OWORD *)&v36.start.value = *(_OWORD *)a2;
        v36.start.epoch = *(_QWORD *)(a2 + 16);
        *(_OWORD *)&time2.value = *(_OWORD *)&v39.start.value;
        time2.epoch = v18;
        if (CMTimeCompare(&v36.start, &time2) < 0)
        {
          v12 = v14 - 1;
        }
        else
        {
          v36 = v39;
          CMTimeRangeGetEnd(&v37, &v36);
          *(_OWORD *)&v36.start.value = *(_OWORD *)a2;
          v36.start.epoch = *(_QWORD *)(a2 + 16);
          if (CMTimeCompare(&v36.start, &v37) < 0)
          {
            v34 = v16[3];
            a4[2] = v16[2];
            a4[3] = v34;
            v35 = v16[5];
            a4[4] = v16[4];
            a4[5] = v35;
            v27 = *v16;
            v28 = v16[1];
            goto LABEL_28;
          }
          v11 = v14 + 1;
        }
        if (v12 <= v11)
          goto LABEL_25;
      }
    }
    v11 = 0;
LABEL_25:
    v29 = (__int128 *)CFArrayGetValueAtIndex(v9, v11);
    v30 = v29[3];
    a4[2] = v29[2];
    a4[3] = v30;
    v31 = v29[5];
    a4[4] = v29[4];
    a4[5] = v31;
    v27 = *v29;
    v28 = v29[1];
  }
LABEL_28:
  *a4 = v27;
  a4[1] = v28;
  CFRelease(v9);
}

uint64_t editMentorUpdateChildMentorProperties_applier(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  return editMentorSetChildMentorProperty(a3, a1, a2);
}

void editMentorChildMentorStoppedDueToError(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  BOOL v8;
  CFTypeRef cf;

  cf = 0;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("Mentor_Order"));
    FigCFDictionaryGetInt32IfPresent();
    v8 = CFDictionaryGetValue(theDict, CFSTR("Mentor_SamplesWereGenerated")) == (const void *)*MEMORY[0x1E0C9AE50];
  }
  else
  {
    Value = 0;
    v8 = 0;
  }
  if (*(_BYTE *)(a2 + 296))
    v8 = 1;
  *(_BYTE *)(a2 + 296) = v8;
  if (editMentorChildOrderRefIsCurrent_RetainParentOrder(a2, Value, &cf, 0, 0))
  {
    if (*(_BYTE *)(a2 + 680))
      editMentorPostSyntheticPrerollCompleteNotification(a2, cf);
    editMentorStartNewChildOrder(a2);
  }
  if (cf)
    CFRelease(cf);
}

uint64_t editMentorTimeRangesMayNoLongerIncrease()
{
  return FigDeferNotificationToDispatchQueue();
}

void editMentorTimeRangesMayNoLongerIncrease_deferred(uint64_t a1, uint64_t a2)
{
  const void *v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 312));
  if (*(_BYTE *)(a2 + 566))
  {
    *(_BYTE *)(a2 + 566) = 0;
    v3 = *(const void **)(a2 + 568);
    if (v3)
      CFRetain(v3);
    MEMORY[0x19402EF04](*(_QWORD *)(a2 + 312));
    editMentorAdvanceToNextEdit(a2);
  }
  JUMPOUT(0x19402EF04);
}

void sub_192AEDB48()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

uint64_t editMentorRemapTimeInterval(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v9;
  uint64_t (*v10)(_QWORD, CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CFTypeRef v31;

  v31 = 0;
  if (editMentorChildOrderRefIsCurrent_RetainParentOrder((uint64_t)a1, a2, &v31, 0, 0))
  {
    if (!(_DWORD)a3)
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v19 = *(_OWORD *)a4;
      *(_QWORD *)&v20 = *(_QWORD *)(a4 + 16);
      editMentorSelectEditForTimeInConsolidatedEdit((uint64_t)a1, (uint64_t)&v19, 1, &v25);
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v13 = *(_OWORD *)a5;
      *(_QWORD *)&v14 = *(_QWORD *)(a5 + 16);
      editMentorSelectEditForTimeInConsolidatedEdit((uint64_t)a1, (uint64_t)&v13, 1, &v19);
      v15 = v27;
      v16 = v28;
      v17 = v29;
      v18 = v30;
      v13 = v25;
      v14 = v26;
      editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(&v13, 0, (__int128 *)a4);
      v15 = v21;
      v16 = v22;
      v17 = v23;
      v18 = v24;
      v13 = v19;
      v14 = v20;
      v9.n128_f64[0] = editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(&v13, 0, (__int128 *)a5);
    }
    MEMORY[0x19402EEEC](a1[34], v9);
    v10 = (uint64_t (*)(_QWORD, CFTypeRef, uint64_t, uint64_t, uint64_t))a1[32];
    if (v10)
      v11 = v10(a1[33], v31, a3, a4, a5);
    else
      v11 = 0;
    MEMORY[0x19402EF04](a1[34]);
    if ((_DWORD)a3)
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v19 = *(_OWORD *)a4;
      *(_QWORD *)&v20 = *(_QWORD *)(a4 + 16);
      editMentorSelectEditForTimeInConsolidatedEdit((uint64_t)a1, (uint64_t)&v19, 0, &v25);
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v13 = *(_OWORD *)a5;
      *(_QWORD *)&v14 = *(_QWORD *)(a5 + 16);
      editMentorSelectEditForTimeInConsolidatedEdit((uint64_t)a1, (uint64_t)&v13, 0, &v19);
      v15 = v27;
      v16 = v28;
      v17 = v29;
      v18 = v30;
      v13 = v25;
      v14 = v26;
      editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(&v13, a3, (__int128 *)a4);
      v15 = v21;
      v16 = v22;
      v17 = v23;
      v18 = v24;
      v13 = v19;
      v14 = v20;
      editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(&v13, a3, (__int128 *)a5);
    }
  }
  else
  {
    v11 = 0;
  }
  if (v31)
    CFRelease(v31);
  return v11;
}

__n128 editMentorMapTimeFromRangeToRange@<Q0>(CMTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  CMTimeRange v12;
  CMTimeRange time1;
  CMTime v14;

  v8 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a4->value = *MEMORY[0x1E0CA2E18];
  a4->epoch = *(_QWORD *)(v8 + 16);
  if ((a1->flags & 0x1D) == 1)
  {
    *(_OWORD *)&time1.start.value = *(_OWORD *)&a1->value;
    time1.start.epoch = a1->epoch;
    *(_OWORD *)&v12.start.value = *(_OWORD *)a2;
    v12.start.epoch = *(_QWORD *)(a2 + 16);
    if (!CMTimeCompare(&time1.start, &v12.start))
      goto LABEL_9;
  }
  if ((*(_BYTE *)(a3 + 12) & 1) == 0
    || (*(_BYTE *)(a3 + 36) & 1) == 0
    || *(_QWORD *)(a3 + 40)
    || (*(_QWORD *)(a3 + 24) & 0x8000000000000000) != 0
    || (*(_OWORD *)&time1.start.value = *(_OWORD *)(a3 + 24),
        time1.start.epoch = *(_QWORD *)(a3 + 40),
        *(_OWORD *)&v12.start.value = *MEMORY[0x1E0CA2E68],
        v12.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16),
        CMTimeCompare(&time1.start, &v12.start)))
  {
    v14 = *a1;
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
    *(_OWORD *)&time1.start.epoch = v9;
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v12.start.value = *(_OWORD *)a3;
    *(_OWORD *)&v12.start.epoch = v10;
    *(_OWORD *)&v12.duration.timescale = *(_OWORD *)(a3 + 32);
    CMTimeMapTimeFromRangeToRange(a4, &v14, &time1, &v12);
  }
  else
  {
LABEL_9:
    result = *(__n128 *)a3;
    *(_OWORD *)&a4->value = *(_OWORD *)a3;
    a4->epoch = *(_QWORD *)(a3 + 16);
  }
  return result;
}

void editMentorAddToTrimAttachment(const void *a1, CMTime *a2, CFStringRef key)
{
  const __CFDictionary *v6;
  CMTimeEpoch epoch;
  const __CFAllocator *v8;
  CFDictionaryRef v9;
  CMTime v10;
  CMTime lhs;
  CMTime time;
  CMTime v13;

  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v6 = (const __CFDictionary *)CMGetAttachment(a1, key, 0);
  if (v6)
  {
    CMTimeMakeFromDictionary(&v13, v6);
    lhs = v13;
    v10 = *a2;
    CMTimeAdd(&time, &lhs, &v10);
    *(_OWORD *)&v13.value = *(_OWORD *)&time.value;
    epoch = time.epoch;
  }
  else
  {
    *(_OWORD *)&v13.value = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
  }
  v13.epoch = epoch;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_OWORD *)&time.value = *(_OWORD *)&v13.value;
  time.epoch = epoch;
  v9 = CMTimeCopyAsDictionary(&time, v8);
  CMSetAttachment(a1, key, v9, 1u);
  if (v9)
    CFRelease(v9);
}

double editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(_OWORD *a1, int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CMTimeEpoch v8;
  __int128 v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CMTime v14;
  CMTimeRange range;
  CMTime time;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CMTimeRange v20;

  if (a2)
  {
    v4 = a1[4];
    *(_OWORD *)&v20.start.value = a1[3];
    *(_OWORD *)&v20.start.epoch = v4;
    *(_OWORD *)&v20.duration.timescale = a1[5];
  }
  else
  {
    v5 = a1[1];
    *(_OWORD *)&v20.start.value = *a1;
    *(_OWORD *)&v20.start.epoch = v5;
    *(_OWORD *)&v20.duration.timescale = a1[2];
    a1 += 3;
  }
  v6 = a1[1];
  v17 = *a1;
  v18 = v6;
  v19 = a1[2];
  v7 = *a3;
  time.epoch = *((_QWORD *)a3 + 2);
  range = v20;
  *(_OWORD *)&time.value = v7;
  CMTimeClampToRange((CMTime *)&v11, &time, &range);
  *a3 = v11;
  v8 = v12;
  *((_QWORD *)a3 + 2) = v12;
  v9 = *a3;
  v14.epoch = v8;
  range = v20;
  v11 = v17;
  v12 = v18;
  v13 = v19;
  *(_OWORD *)&v14.value = v9;
  editMentorMapTimeFromRangeToRange(&v14, (uint64_t)&range, (uint64_t)&v11, &time);
  result = *(double *)&time.value;
  *(CMTime *)a3 = time;
  return result;
}

uint64_t FigSampleBufferRenderSynchronizerCreateRemoteWithOptions(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t OnlyTimebase;
  uint64_t DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t uint64;
  uint64_t v12;
  CFTypeRef cf[5];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  if (!a3)
  {
    v9 = 0;
    v5 = 4294950926;
    goto LABEL_16;
  }
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  cf[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
  cf[1] = (CFTypeRef)0x40000000;
  cf[2] = __synchronizerRemote_ensureClientEstablished_block_invoke;
  cf[3] = &unk_1E2F864F8;
  cf[4] = &v15;
  if (gSBRSRemoteClientSetupOnce != -1)
    dispatch_once(&gSBRSRemoteClientSetupOnce, cf);
  v5 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  if ((_DWORD)v5)
  {
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  cf[0] = 0;
  FigSampleBufferRenderSynchronizerGetClassID();
  OnlyTimebase = CMDerivedObjectCreate();
  if ((_DWORD)OnlyTimebase
    || (DerivedStorage = CMBaseObjectGetDerivedStorage(),
        HostTimeClock = CMClockGetHostTimeClock(),
        OnlyTimebase = CMTimebaseCreateWithSourceClock(a1, HostTimeClock, (CMTimebaseRef *)(DerivedStorage + 16)),
        (_DWORD)OnlyTimebase)
    || (OnlyTimebase = CMTimebaseCreateWithSourceTimebase(a1, *(CMTimebaseRef *)(DerivedStorage + 16), (CMTimebaseRef *)(DerivedStorage + 24)), (_DWORD)OnlyTimebase)|| (OnlyTimebase = CMTimebaseCreateReadOnlyTimebase(), (_DWORD)OnlyTimebase))
  {
    v5 = OnlyTimebase;
    if (cf[0])
      CFRelease(cf[0]);
    goto LABEL_15;
  }
  v9 = cf[0];
  v10 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v10)
  {
    v10 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v10)
    {
      v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if ((_DWORD)v5)
        goto LABEL_16;
      uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
      v12 = CMBaseObjectGetDerivedStorage();
      FigXPCRemoteClientAssociateObject();
      *(_QWORD *)(v12 + 8) = uint64;
      CMBaseObjectGetDerivedStorage();
      cf[0] = 0;
      if (!FigXPCCreateBasicMessage())
        FigXPCRemoteClientSendAsyncMessage();
      FigXPCRelease();
      v5 = 0;
      *a3 = v9;
      goto LABEL_15;
    }
  }
  v5 = v10;
LABEL_16:
  FigXPCRelease();
  FigXPCRelease();
  if (v9)
    CFRelease(v9);
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

void __synchronizerRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("ServerConnectionDied"));
    FigCFDictionarySetInt32();
    FigRemote_ShouldConnectToMediaparserdForFileParsing();
    FigRemote_ShouldConnectToMediaplaybackd();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16372;
  }
}

_BYTE *synchronizerRemote_deadConnectionCallback()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  *result = 1;
  return result;
}

uint64_t synchronizerRemote_handleClientMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t synchronizerRemote_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 8);
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
    CFRelease(v4);
  if (v2)
  {
    FigXPCRemoteClientDisassociateObject();
    if (!*(_BYTE *)DerivedStorage && !FigXPCCreateBasicMessage())
      FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *synchronizerRemote_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  CFAllocatorRef v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferRenderSynchronizerRemote=%p retainCount=%d allocator=%p"), a1, v5, v6);
  CFStringAppendFormat(Mutable, 0, CFSTR(" objectID=%lld"), *(_QWORD *)(DerivedStorage + 8));
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t synchronizerRemote_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  ObjectID = synchronizerRemote_getObjectID(a1, &v8);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdCopyPropertyMessage();
  v6 = ObjectID;
  if (a4)
    *a4 = 0;
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t synchronizerRemote_SetProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = synchronizerRemote_getObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdSetPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t synchronizerRemote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t synchronizerRemote_AddAudioRenderer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = synchronizerRemote_sendMessageWithAudioRendererPayload(a1, 1633969249, a2);
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t synchronizerRemote_RemoveAudioRenderer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = synchronizerRemote_sendMessageWithAudioRendererPayload(a1, 1919776353, a2);
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t synchronizerRemote_SetRateAndTime(uint64_t a1, float a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (a1)
  {
    ObjectID = synchronizerRemote_getObjectID(a1, &v7);
    if ((_DWORD)ObjectID)
    {
      v5 = ObjectID;
    }
    else
    {
      v4 = FigXPCCreateBasicMessage();
      if ((_DWORD)v4 || (xpc_dictionary_set_double(0, "rate", a2), v4 = FigXPCMessageSetCMTime(), (_DWORD)v4))
        v5 = v4;
      else
        v5 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    v5 = 4294950926;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t synchronizerRemote_CopyReadOnlyTimebase(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950926;
  v4 = DerivedStorage;
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
  {
    CFRetain(v5);
    v6 = *(_QWORD *)(v4 + 32);
  }
  else
  {
    v6 = 0;
  }
  result = 0;
  *a2 = v6;
  return result;
}

uint64_t synchronizerRemote_SetRateAndAnchorTime(uint64_t a1, float a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (a1)
  {
    ObjectID = synchronizerRemote_getObjectID(a1, &v7);
    if ((_DWORD)ObjectID)
    {
      v5 = ObjectID;
    }
    else
    {
      v4 = FigXPCCreateBasicMessage();
      if ((_DWORD)v4
        || (xpc_dictionary_set_double(0, "rate", a2), v4 = FigXPCMessageSetCMTime(), (_DWORD)v4)
        || (v4 = FigXPCMessageSetCMTime(), (_DWORD)v4))
      {
        v5 = v4;
      }
      else
      {
        v5 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    v5 = 4294950926;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t synchronizerRemote_ConvertTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectID;
  uint64_t v7;

  v7 = 0;
  v4 = 4294950926;
  if (a1 && a4)
  {
    ObjectID = synchronizerRemote_getObjectID(a1, &v7);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        FigXPCMessageSetUInt32();
        ObjectID = FigXPCMessageSetCMTime();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!(_DWORD)ObjectID)
            ObjectID = FigXPCMessageGetCMTime();
        }
      }
    }
    v4 = ObjectID;
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t synchronizerRemote_sendMessageWithAudioRendererPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  if (a1)
  {
    ObjectID = synchronizerRemote_getObjectID(a1, &v8);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigSampleBufferAudioRendererGetRemoteObjectID(a3, &v7);
        if (!(_DWORD)ObjectID)
        {
          xpc_dictionary_set_uint64(0, "audioRendererObjectID", v7);
          ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    v5 = ObjectID;
  }
  else
  {
    v5 = 4294950926;
  }
  FigXPCRelease();
  return v5;
}

uint64_t FigDetermineAudioFileTypeHintAndCreateAudioFileInfos(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFURLRef *);
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, _QWORD, CFURLRef *);
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, _QWORD, CFURLRef *);
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, _QWORD, CFURLRef *);
  unsigned int *v22;
  unsigned int *v23;
  CFStringRef inSpecifier;
  CFURLRef url;
  UInt32 outDataSize;

  outDataSize = 0;
  url = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
  {
    v7(CMBaseObject, *MEMORY[0x1E0CA2098], 0, &url);
    if (url)
    {
      inSpecifier = CFURLCopyPathExtension(url);
      outDataSize = 0;
      if (inSpecifier)
      {
        v8 = 0;
        if (!AudioFileGetGlobalInfoSize(0x74657874u, 8u, &inSpecifier, &outDataSize) && outDataSize)
        {
          v9 = (unsigned int *)malloc_type_calloc(1uLL, outDataSize, 0x61B38FD5uLL);
          if (v9)
          {
            v10 = v9;
            if (AudioFileGetGlobalInfo(0x74657874u, 8u, &inSpecifier, &outDataSize, v9))
              v8 = 0;
            else
              v8 = *v10;
            free(v10);
          }
          else
          {
            v8 = 0;
          }
        }
        if (inSpecifier)
          CFRelease(inSpecifier);
        CFRelease(url);
        if (v8)
          goto LABEL_55;
      }
      else
      {
        CFRelease(url);
      }
    }
  }
  url = 0;
  v11 = CMByteStreamGetCMBaseObject();
  v12 = *(void (**)(uint64_t, _QWORD, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
    v12(v11, *MEMORY[0x1E0CA2F60], 0, &url);
  if (url)
  {
    LODWORD(inSpecifier) = 0;
    CFNumberGetValue(url, kCFNumberSInt32Type, &inSpecifier);
    v13 = (int)inSpecifier;
    LODWORD(inSpecifier) = bswap32(inSpecifier);
    outDataSize = 0;
    if (v13
      && !AudioFileGetGlobalInfoSize(0x74686673u, 4u, &inSpecifier, &outDataSize)
      && outDataSize
      && (v14 = (unsigned int *)malloc_type_calloc(1uLL, outDataSize, 0x4CBBF0E8uLL)) != 0)
    {
      v15 = v14;
      if (AudioFileGetGlobalInfo(0x74686673u, 4u, &inSpecifier, &outDataSize, v14))
        v8 = 0;
      else
        v8 = *v15;
      free(v15);
      CFRelease(url);
      if (v8)
        goto LABEL_55;
    }
    else
    {
      CFRelease(url);
    }
  }
  url = 0;
  v16 = CMByteStreamGetCMBaseObject();
  v17 = *(void (**)(uint64_t, _QWORD, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v17)
    goto LABEL_42;
  v17(v16, *MEMORY[0x1E0CA2F78], 0, &url);
  if (!url)
    goto LABEL_42;
  outDataSize = 0;
  v8 = 0;
  if (!AudioFileGetGlobalInfoSize(0x746D696Du, 8u, &url, &outDataSize) && outDataSize)
  {
    v18 = (unsigned int *)malloc_type_calloc(1uLL, outDataSize, 0xF2526951uLL);
    if (v18)
    {
      v19 = v18;
      if (AudioFileGetGlobalInfo(0x746D696Du, 8u, &url, &outDataSize, v18))
        v8 = 0;
      else
        v8 = *v19;
      free(v19);
    }
    else
    {
      v8 = 0;
    }
  }
  if (url)
    CFRelease(url);
  if (!v8)
  {
LABEL_42:
    url = 0;
    v20 = CMByteStreamGetCMBaseObject();
    v21 = *(void (**)(uint64_t, _QWORD, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v21 && (v21(v20, *MEMORY[0x1E0CA2FC8], *MEMORY[0x1E0C9AE00], &url), url))
    {
      outDataSize = 0;
      v8 = 0;
      if (!AudioFileGetGlobalInfoSize(0x74757469u, 8u, &url, &outDataSize) && outDataSize)
      {
        v22 = (unsigned int *)malloc_type_calloc(1uLL, outDataSize, 0xDB291F60uLL);
        if (v22)
        {
          v23 = v22;
          if (AudioFileGetGlobalInfo(0x74757469u, 8u, &url, &outDataSize, v22))
            v8 = 0;
          else
            v8 = *v23;
          free(v23);
        }
        else
        {
          v8 = 0;
        }
      }
      if (url)
        CFRelease(url);
    }
    else
    {
      v8 = 0;
    }
  }
LABEL_55:
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (v8)
    return v8;
  else
    return 1297106739;
}

uint64_t FigAudioFileShouldNotUseAllowList()
{
  if (FigAudioFileShouldNotUseAllowList_sDoNotUseAudioFileAllowListOnce != -1)
    dispatch_once_f(&FigAudioFileShouldNotUseAllowList_sDoNotUseAudioFileAllowListOnce, &FigAudioFileShouldNotUseAllowList_sDoNotUseAudioFileAllowList, (dispatch_function_t)AudioFileShouldNotUseAllowList);
  return FigAudioFileShouldNotUseAllowList_sDoNotUseAudioFileAllowList;
}

uint64_t AudioFileShouldNotUseAllowList(_BYTE *a1)
{
  uint64_t result;

  result = FigGetCFPreferenceBooleanWithDefault();
  *a1 = result;
  return result;
}

uint64_t FigAudioFileFormatReaderCreateFromStream(const void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *DerivedStorage;
  uint64_t Instance;
  uint64_t v9;
  uint64_t v10;
  AudioFileTypeID AudioFileInfos;
  AudioFileID *v12;
  uint64_t Property;
  double *v14;
  double v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  void *v19;
  uint64_t v20;
  OSStatus PropertyInfo;
  AudioChannelLayout *v22;
  UInt32 v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  _QWORD *v28;
  CFTypeRef v29;
  uint64_t CMBaseObject;
  void (*v31)(uint64_t, __CFString *, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, _QWORD, UInt32 *, UInt32 *);
  uint64_t v35;
  uint64_t SizeProc;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, UInt32 *, UInt32 *);
  uint64_t v40;
  UInt32 isWritable[2];
  UInt32 outDataSize[2];
  UInt32 v44[3];
  UInt32 inPropertyData;
  UInt32 outPropertyData[2];
  UInt32 ioDataSize[2];

  FigFormatReaderGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    return v6;
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  inPropertyData = 0;
  outPropertyData[0] = 0;
  v44[0] = 0;
  outDataSize[0] = 0;
  if (sRegisterFigAudioFileInfoTypeOnce != -1)
    dispatch_once_f(&sRegisterFigAudioFileInfoTypeOnce, 0, (dispatch_function_t)RegisterFigAudioFileInfoType);
  ioDataSize[0] = 0;
  isWritable[0] = 0;
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v25 = FigSignalErrorAt();
    v22 = 0;
    v18 = 0;
    goto LABEL_25;
  }
  v9 = Instance;
  *(_QWORD *)(Instance + 16) = FigReentrantMutexCreate();
  *(_QWORD *)(v9 + 24) = CFRetain(a1);
  *(_DWORD *)(v9 + 112) = AudioFileGetGlobalInfoSize(0x616D696Du, 0, 0, outDataSize) == 0;
  AudioFileInfos = FigDetermineAudioFileTypeHintAndCreateAudioFileInfos((uint64_t)a1, v10, 0, 0);
  v12 = (AudioFileID *)(v9 + 32);
  Property = AudioFileOpenWithCallbacks((void *)v9, (AudioFile_ReadProc)AudioFile_FigReadProc, 0, (AudioFile_GetSizeProc)AudioFile_FigGetSizeProc, 0, AudioFileInfos, (AudioFileID *)(v9 + 32));
  if ((_DWORD)Property)
    goto LABEL_65;
  ioDataSize[0] = 4;
  Property = AudioFileGetProperty(*(AudioFileID *)(v9 + 32), 0x66666D74u, ioDataSize, (void *)(v9 + 40));
  if ((_DWORD)Property)
    goto LABEL_65;
  if (FigCFDictionaryGetInt32IfPresent())
    AudioFileSetProperty(*v12, 0x61616770u, 4u, &inPropertyData);
  ioDataSize[0] = 40;
  v14 = (double *)(v9 + 48);
  Property = AudioFileGetProperty(*(AudioFileID *)(v9 + 32), 0x64666D74u, ioDataSize, (void *)(v9 + 48));
  if ((_DWORD)Property)
    goto LABEL_65;
  v15 = *v14;
  if (*v14 <= 0.0)
    goto LABEL_64;
  *(_DWORD *)(v9 + 88) = (int)v15;
  v16 = *(_DWORD *)(v9 + 68);
  if (v16)
  {
    v17 = v16 - (v16 & ((int)v15 / 2));
    if ((v16 & ((int)v15 / 2)) == 0)
      v17 = 0;
    *(_QWORD *)(v9 + 96) = (v17 + (int)v15 / 2) / v16;
  }
  v18 = 0;
  if (AudioFileGetPropertyInfo(*v12, 0x6D676963u, outPropertyData, isWritable) || !outPropertyData[0])
    goto LABEL_19;
  v19 = malloc_type_malloc(outPropertyData[0], 0x4CB4281CuLL);
  if (!v19)
  {
LABEL_64:
    Property = FigSignalErrorAt();
LABEL_65:
    v25 = Property;
    v18 = 0;
LABEL_66:
    v22 = 0;
    goto LABEL_67;
  }
  v18 = v19;
  v20 = AudioFileGetProperty(*v12, 0x6D676963u, outPropertyData, v19);
  if ((_DWORD)v20)
  {
    v25 = v20;
    goto LABEL_66;
  }
LABEL_19:
  PropertyInfo = AudioFileGetPropertyInfo(*v12, 0x636D6170u, v44, isWritable);
  v22 = 0;
  v23 = v44[0];
  if (PropertyInfo || !v44[0])
  {
LABEL_23:
    v25 = CMAudioFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const AudioStreamBasicDescription *)(v9 + 48), v23, v22, outPropertyData[0], v18, 0, (CMAudioFormatDescriptionRef *)(v9 + 104));
    if (!(_DWORD)v25)
    {
      *DerivedStorage = v9;
      goto LABEL_25;
    }
    goto LABEL_67;
  }
  v22 = (AudioChannelLayout *)malloc_type_malloc(v44[0], 0x3B46C4B5uLL);
  v24 = AudioFileGetProperty(*v12, 0x636D6170u, v44, v22);
  if (!(_DWORD)v24)
  {
    v23 = v44[0];
    goto LABEL_23;
  }
  v25 = v24;
LABEL_67:
  CFRelease((CFTypeRef)v9);
LABEL_25:
  free(v18);
  free(v22);
  if ((_DWORD)v25)
    goto LABEL_63;
  v26 = (const void *)*DerivedStorage;
  *(_QWORD *)ioDataSize = 0;
  FigTrackReaderGetClassID();
  v27 = CMDerivedObjectCreate();
  if ((_DWORD)v27)
  {
    v25 = v27;
    goto LABEL_63;
  }
  v28 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (v26)
    v29 = CFRetain(v26);
  else
    v29 = 0;
  *v28 = v29;
  DerivedStorage[1] = *(_QWORD *)ioDataSize;
  if ((*(_DWORD *)(*DerivedStorage + 56) - 778924081) <= 2)
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v31 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v31)
      v31(CMBaseObject, CFSTR("CFBS_EnableCaching"), *MEMORY[0x1E0C9AE50]);
  }
  v32 = *DerivedStorage;
  *(_QWORD *)outPropertyData = 0;
  *(_QWORD *)ioDataSize = 0;
  inPropertyData = 8;
  if (AudioFileGetProperty(*(AudioFileID *)(v32 + 32), 0x6964336Fu, &inPropertyData, outPropertyData))
  {
    *(_QWORD *)outDataSize = 0;
    *(_QWORD *)v44 = 0;
    *(_QWORD *)(v32 + 216) = -1;
    v33 = *(_QWORD *)(v32 + 24);
    v34 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, UInt32 *, UInt32 *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 32);
    if (v34)
    {
      v35 = v34(v33, 3, 0, ioDataSize, v44);
      if ((_DWORD)v35)
      {
LABEL_70:
        v25 = v35;
LABEL_55:
        if (*(_QWORD *)ioDataSize)
          CFRelease(*(CFTypeRef *)ioDataSize);
        if (!(_DWORD)v25)
          goto LABEL_58;
LABEL_63:
        CFRelease(0);
        return v25;
      }
      if (*(_QWORD *)v44 == 3)
      {
        CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)ioDataSize, 0, 0, 0, (char **)outDataSize);
        if (**(_BYTE **)outDataSize == 73
          && *(_BYTE *)(*(_QWORD *)outDataSize + 1) == 68
          && *(_BYTE *)(*(_QWORD *)outDataSize + 2) == 51)
        {
          v25 = 0;
          *(_QWORD *)(v32 + 216) = 0;
          goto LABEL_55;
        }
      }
      if (*(_QWORD *)(v32 + 216) != -1)
        goto LABEL_53;
      SizeProc = AudioFile_FigGetSizeProc(v32);
      if (SizeProc < 129)
        goto LABEL_53;
      v37 = SizeProc;
      *(_QWORD *)isWritable = 0;
      if (*(_QWORD *)ioDataSize)
        CFRelease(*(CFTypeRef *)ioDataSize);
      *(_QWORD *)ioDataSize = 0;
      v38 = *(_QWORD *)(v32 + 24);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt32 *, UInt32 *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 32);
      if (v39)
      {
        v40 = v37 - 128;
        v35 = v39(v38, 3, v40, ioDataSize, v44);
        if (!(_DWORD)v35)
        {
          if (*(_QWORD *)v44 == 3)
          {
            CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)ioDataSize, 0, 0, 0, (char **)isWritable);
            if (**(_BYTE **)isWritable == 84
              && *(_BYTE *)(*(_QWORD *)isWritable + 1) == 65
              && *(_BYTE *)(*(_QWORD *)isWritable + 2) == 71)
            {
              *(_QWORD *)(v32 + 216) = v40;
            }
          }
LABEL_53:
          v25 = 0;
          goto LABEL_55;
        }
        goto LABEL_70;
      }
    }
    v25 = 4294954514;
    goto LABEL_55;
  }
  *(_QWORD *)(v32 + 216) = *(_QWORD *)outPropertyData;
LABEL_58:
  v25 = 0;
  *a4 = 0;
  return v25;
}

uint64_t FigAudioFormatReaderConvertCodecElementsToMediaSubType(int a1, int a2, char *__s1, uint64_t a4, _DWORD *a5, int *a6, int *a7)
{
  uint64_t v8;
  int v9;
  int v13;
  int v14;
  int v15;
  UInt32 v16;
  char *v17;
  int v18;
  uint64_t v19;
  int v20;
  UInt32 outPropertyDataSize;
  char v23;
  int outPropertyData;
  int inSpecifier;
  int v26;
  int v27;
  int v28;

  v28 = a1;
  if (!a4)
  {
    if (!__s1)
    {
      if (a7)
      {
        v8 = 0;
        v9 = 4;
        goto LABEL_4;
      }
      return 0;
    }
    v26 = 0;
    v27 = 0;
    outPropertyData = 0;
    inSpecifier = a1;
    if (a1 > 1463899716)
    {
      if (a1 == 1667327590)
      {
LABEL_23:
        if (!a2)
        {
LABEL_29:
          if (!a7)
            goto LABEL_51;
          v17 = 0;
          v8 = 0;
          v18 = 2;
LABEL_34:
          *a7 = v18;
LABEL_53:
          free(v17);
          return v8;
        }
        v26 = 4;
        v27 = a2;
        v16 = 12;
LABEL_25:
        outPropertyDataSize = 0;
        if (AudioFormatGetPropertyInfo(0x6964636Eu, v16, &inSpecifier, &outPropertyDataSize))
          goto LABEL_51;
        outPropertyDataSize = 4;
        if (AudioFormatGetProperty(0x6964636Eu, v16, &inSpecifier, &outPropertyDataSize, &outPropertyData)
          || !outPropertyData)
        {
          goto LABEL_51;
        }
        goto LABEL_37;
      }
      if (a1 == 1463899717)
      {
        LOWORD(outPropertyDataSize) = 0;
        v23 = 0;
        v14 = sscanf(__s1, "%hx%c", &outPropertyDataSize, &v23);
        if (v14 == 2)
        {
          if (!a7)
            goto LABEL_51;
          v15 = 10;
        }
        else
        {
          if (v14 == 1)
          {
            v26 = 2;
            LOWORD(v27) = outPropertyDataSize;
            v16 = 10;
            goto LABEL_25;
          }
          if (v14 || !a7)
            goto LABEL_51;
          v15 = 6;
        }
        *a7 = v15;
        goto LABEL_51;
      }
    }
    else
    {
      if ((a1 - 1297106737) < 3)
      {
        if (!strcmp(__s1, "mp3"))
        {
          v28 = 1297106739;
          v13 = 778924083;
          goto LABEL_36;
        }
        if (!strcmp(__s1, "mp2"))
        {
          v28 = 1297106738;
          v13 = 778924082;
          goto LABEL_36;
        }
        if (!strcmp(__s1, "mp1"))
        {
          v28 = 1297106737;
          v13 = 778924081;
LABEL_36:
          outPropertyData = v13;
LABEL_37:
          outPropertyDataSize = 0;
          if (!AudioFileGetGlobalInfoSize(0x666D6964u, 4u, &v28, &outPropertyDataSize))
          {
            v17 = (char *)malloc_type_calloc(1uLL, outPropertyDataSize, 0xEC368B04uLL);
            AudioFileGetGlobalInfo(0x666D6964u, 4u, &v28, &outPropertyDataSize, v17);
            if (outPropertyDataSize >= 4)
            {
              v19 = 0;
              v20 = outPropertyData;
              while (*(_DWORD *)&v17[v19] != outPropertyData)
              {
                v19 += 4;
                if ((outPropertyDataSize & 0xFFFFFFFC) == v19)
                  goto LABEL_52;
              }
              if (a5)
                *a5 = 1936684398;
              if (a6)
                *a6 = v20;
              v8 = 1;
              goto LABEL_53;
            }
            goto LABEL_52;
          }
LABEL_51:
          v17 = 0;
LABEL_52:
          v8 = 0;
          goto LABEL_53;
        }
        goto LABEL_29;
      }
      if (a1 == 1095321155)
        goto LABEL_23;
    }
    if (!a7)
      goto LABEL_51;
    v17 = 0;
    v8 = 0;
    v18 = 1;
    goto LABEL_34;
  }
  if (!a7)
    return 0;
  v8 = 0;
  v9 = 8;
LABEL_4:
  *a7 = v9;
  return v8;
}

void FigAudioFileFormatReaderFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *FigAudioFileFormatReaderCopyDebugDescription()
{
  uint64_t v0;
  __CFString *Mutable;
  const void *v2;
  CFStringRef v3;

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = *(const void **)(v0 + 24);
  if (v2)
  {
    v3 = CFCopyDescription(v2);
    CFStringAppendFormat(Mutable, 0, CFSTR("\tFigAudioFileFormatReader: stream<%@>"), v3);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("\tFigAudioFileFormatReader: stream<%@>"), 0);
  }
  return Mutable;
}

uint64_t FigAudioFileFormatReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t *DerivedStorage;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __CFString **v12;
  uint64_t v14;
  CFTypeRef *v15;
  __CFArray *GaplessInfoDictionary_0;
  CFNumberRef v17;
  _BOOL4 v18;
  __CFArray *Mutable;
  uint64_t v20;
  CMTimeValue v21;
  uint64_t v22;
  UInt32 v23;
  int outPropertyData;
  void *inSpecifier;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    v9 = DerivedStorage;
    v10 = *DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, CFSTR("Duration")))
    {
      v11 = v9[1];
      if (v11)
      {
        v12 = kFigTrackProperty_EditedDuration;
        return FigAudioFileTrackReaderCopyProperty(v11, *v12, a3, a4);
      }
      return 4294954513;
    }
    if (CFEqual(a2, CFSTR("NominalDuration")))
    {
      v11 = v9[1];
      if (v11)
      {
        v12 = kFigTrackProperty_UneditedDuration;
        return FigAudioFileTrackReaderCopyProperty(v11, *v12, a3, a4);
      }
      return 4294954513;
    }
    if (CFEqual(a2, CFSTR("Identifier")))
    {
      v15 = (CFTypeRef *)kFigFormatReaderIdentifier_AudioFile;
LABEL_15:
      GaplessInfoDictionary_0 = (__CFArray *)CFRetain(*v15);
LABEL_16:
      v14 = 0;
LABEL_17:
      *a4 = (CMTimeValue)GaplessInfoDictionary_0;
      return v14;
    }
    if (CFEqual(a2, CFSTR("LyricsScanCompleted")))
    {
      v15 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(v10 + 177))
        v15 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("Lyrics")))
      return CopyLyricsFromAudioFile(a1, a4);
    if (CFEqual(a2, CFSTR("AccurateDurationIsKnown")) || CFEqual(a2, CFSTR("SampleCursorTimeAccuracyIsExact")))
    {
      v15 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("iTunesGaplessInfo")))
    {
      GaplessInfoDictionary_0 = CreateGaplessInfoDictionary_0(v10);
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("iTunesSoundCheckVolumeNormalization")))
    {
      inSpecifier = (void *)CopySoundCheckInfoDictionary(v10);
      if (inSpecifier)
      {
        v23 = 4;
        outPropertyData = 0;
        if (AudioFormatGetProperty(0x73636462u, 8u, &inSpecifier, &v23, &outPropertyData))
        {
          CFRelease(inSpecifier);
        }
        else
        {
          v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &outPropertyData);
          CFRelease(inSpecifier);
          if (v17)
          {
            v14 = 0;
            *a4 = (CMTimeValue)v17;
            return v14;
          }
        }
      }
      return 4294954512;
    }
    if (CFEqual(a2, CFSTR("SoundCheckInfo")))
    {
      GaplessInfoDictionary_0 = (__CFArray *)CopySoundCheckInfoDictionary(v10);
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("IndicatesContentProtection")))
    {
      v18 = IndicatesContentProtection(v10);
      v15 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!v18)
        v15 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("MetadataReaders")))
    {
      v14 = EnsureMetadataReaderCreated_0(v10);
      if (*(_QWORD *)(v10 + 224))
      {
        Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
        CFArrayAppendValue(Mutable, *(const void **)(v10 + 224));
      }
      else
      {
        Mutable = 0;
      }
      *a4 = (CMTimeValue)Mutable;
      return v14;
    }
    if (CFEqual(a2, CFSTR("MetadataReader")) || CFEqual(a2, CFSTR("FormatSpecificMetadataReader")))
    {
      v14 = EnsureMetadataReaderCreated_0(v10);
      GaplessInfoDictionary_0 = *(__CFArray **)(v10 + 224);
      if (!GaplessInfoDictionary_0)
        goto LABEL_17;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("ID3MetadataReader")))
      {
        if (CFEqual(a2, CFSTR("ID3MetadataReaderBC")))
        {
          inSpecifier = 0;
          v20 = *(_QWORD *)(v10 + 216);
          if (v20 < 0)
          {
            v21 = 0;
            v14 = 0;
          }
          else
          {
            v14 = FigMetadataReaderCreateForID3WithBackwardCompatibility(a3, *(const void **)(v10 + 24), v20, &inSpecifier);
            v21 = (CMTimeValue)inSpecifier;
          }
          *a4 = v21;
          return v14;
        }
        if (CFEqual(a2, CFSTR("Chapters")))
        {
          inSpecifier = 0;
          EnsureMetadataReaderCreated_0(v10);
          v22 = *(_QWORD *)(v10 + 224);
          if (!v22
            || !*(_BYTE *)(v10 + 232)
            || (GaplessInfoDictionary_0 = FigID3MetadataCreateChapterArrayFromTopLevelTableOfContents(a3, v22),
                (inSpecifier = GaplessInfoDictionary_0) == 0))
          {
            CreateChaptersFromAudioFileChapterList(v10, (CFMutableArrayRef *)&inSpecifier);
            GaplessInfoDictionary_0 = (__CFArray *)inSpecifier;
          }
          goto LABEL_16;
        }
        return 4294954512;
      }
      v14 = EnsureMetadataReaderCreated_0(v10);
      GaplessInfoDictionary_0 = *(__CFArray **)(v10 + 224);
      if (!GaplessInfoDictionary_0)
        goto LABEL_17;
      if (!*(_BYTE *)(v10 + 232))
      {
        GaplessInfoDictionary_0 = 0;
        goto LABEL_17;
      }
    }
    GaplessInfoDictionary_0 = (__CFArray *)CFRetain(GaplessInfoDictionary_0);
    goto LABEL_17;
  }
  return FigSignalErrorAt();
}

uint64_t FigAudioFileTrackReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t *DerivedStorage;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  CMTimeValue value;
  uint64_t Property;
  CFTypeRef *v13;
  int64_t v14;
  uint64_t AudioFilePacketAndFrameCount;
  int64_t v16;
  int32_t v17;
  CFMutableDictionaryRef DefaultEnhanced;
  int HasSampleDependencies;
  CMTime v21;
  CMTime valuePtr;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    v8 = *DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, CFSTR("TrackFormatDescriptionArray")))
    {
      v10 = *(_QWORD *)(v8 + 104);
      v9 = (const void **)(v8 + 104);
      if (!v10)
        return 0;
      value = (CMTimeValue)CFArrayCreate(a3, v9, 1, MEMORY[0x1E0C9B378]);
      goto LABEL_26;
    }
    if (CFEqual(a2, CFSTR("TrackTimescale")))
    {
      LODWORD(valuePtr.value) = *(_DWORD *)(v8 + 88);
      value = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
LABEL_26:
      Property = 0;
LABEL_27:
      *a4 = value;
      return Property;
    }
    if (CFEqual(a2, CFSTR("TrackEnabled")))
      goto LABEL_9;
    if (CFEqual(a2, CFSTR("TrackDuration")))
    {
      if (*(_QWORD *)(v8 + 32))
      {
        memset(&valuePtr, 0, sizeof(valuePtr));
        GetAudioFilePacketTableInfo(v8);
        if (*(_BYTE *)(v8 + 179))
        {
          v14 = *(_QWORD *)(v8 + 184);
        }
        else
        {
          AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount(v8);
          if ((_DWORD)AudioFilePacketAndFrameCount)
            return AudioFilePacketAndFrameCount;
          DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(*(const AudioFormatListItem **)(v8 + 104));
          LODWORD(v21.value) = 0;
          v14 = *(_QWORD *)(v8 + 136);
          if (FigCFDictionaryGetInt32IfPresent())
            v14 = (v14 - SLODWORD(v21.value)) & ~((v14 - SLODWORD(v21.value)) >> 63);
          if (DefaultEnhanced)
            CFRelease(DefaultEnhanced);
        }
        v17 = *(_DWORD *)(v8 + 88);
        v16 = v14;
        goto LABEL_25;
      }
    }
    else if (CFEqual(a2, CFSTR("UneditedTrackDuration")))
    {
      if (*(_QWORD *)(v8 + 32))
      {
        memset(&valuePtr, 0, sizeof(valuePtr));
        AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount(v8);
        if ((_DWORD)AudioFilePacketAndFrameCount)
          return AudioFilePacketAndFrameCount;
        v16 = *(_QWORD *)(v8 + 136);
        v17 = *(_DWORD *)(v8 + 88);
LABEL_25:
        CMTimeMake(&valuePtr, v16, v17);
        v21 = valuePtr;
        value = (CMTimeValue)CMTimeCopyAsDictionary(&v21, a3);
        if (value)
          goto LABEL_26;
        return FigSignalErrorAt();
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("UneditedSampleCount")))
      {
        if (CFEqual(a2, CFSTR("LoudnessInfo")))
        {
          valuePtr.value = 0;
          LODWORD(v21.value) = 8;
          Property = AudioFileGetProperty(*(AudioFileID *)(v8 + 32), 0x6C6F7564u, (UInt32 *)&v21, &valuePtr);
          value = valuePtr.value;
          if ((_DWORD)Property)
          {
            if (valuePtr.value)
              CFRelease((CFTypeRef)valuePtr.value);
            return Property;
          }
          goto LABEL_27;
        }
        if (CFEqual(a2, CFSTR("HasAudioSampleDependencyInformation")))
        {
          HasSampleDependencies = AudioFileHasSampleDependencies(v8);
        }
        else
        {
          if (!CFEqual(a2, CFSTR("IndicatesContentProtection")))
          {
            if (CFEqual(a2, CFSTR("UsesAudibleDRM")))
            {
              LODWORD(valuePtr.value) = 0;
              LODWORD(v21.value) = 4;
              AudioFileGetProperty(*(AudioFileID *)(v8 + 32), 0x61756462u, (UInt32 *)&v21, &valuePtr);
              v13 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
              if (LODWORD(valuePtr.value))
                v13 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
              goto LABEL_10;
            }
            if (!CFEqual(a2, CFSTR("AudibleContentIsAuthorized")))
              return 4294954512;
            LODWORD(valuePtr.value) = 0;
            if (*(_DWORD *)(v8 + 40) == 1635083362)
            {
              LODWORD(v21.value) = 4;
              if (AudioFileGetProperty(*(AudioFileID *)(v8 + 32), 0x61757468u, (UInt32 *)&v21, &valuePtr))
              {
                LODWORD(valuePtr.value) = 0;
              }
              else if (LODWORD(valuePtr.value))
              {
LABEL_9:
                v13 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_10:
                value = (CMTimeValue)CFRetain(*v13);
                goto LABEL_26;
              }
            }
            v13 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
            goto LABEL_10;
          }
          HasSampleDependencies = IndicatesContentProtection(v8);
        }
        v13 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        if (!HasSampleDependencies)
          v13 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        goto LABEL_10;
      }
      if (*(_QWORD *)(v8 + 32))
      {
        Property = GetAudioFilePacketAndFrameCount(v8);
        if ((_DWORD)Property)
          return Property;
        value = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(v8 + 128));
        goto LABEL_27;
      }
    }
    return 4294954513;
  }
  return FigSignalErrorAt();
}

uint64_t CopyLyricsFromAudioFile(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  OSStatus Property;
  uint64_t v6;
  UInt32 ioDataSize;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(*(_QWORD *)DerivedStorage + 16));
  *a2 = 0;
  if (*(_BYTE *)(v4 + 176))
    goto LABEL_8;
  ioDataSize = 8;
  Property = AudioFileGetProperty(*(AudioFileID *)(v4 + 32), 0x4C595243u, &ioDataSize, a2);
  if (!*(_BYTE *)(v4 + 177))
  {
    *(_BYTE *)(v4 + 177) = 1;
    if (!Property)
      goto LABEL_6;
LABEL_8:
    *(_BYTE *)(v4 + 176) = 1;
    v6 = 4294954513;
    goto LABEL_9;
  }
  if (Property)
    goto LABEL_8;
LABEL_6:
  if (!*a2)
    goto LABEL_8;
  v6 = 0;
LABEL_9:
  MEMORY[0x19402EA24](*(_QWORD *)(v4 + 16));
  return v6;
}

CFMutableDictionaryRef CreateGaplessInfoDictionary_0(uint64_t a1)
{
  const AudioFormatListItem *v2;
  int v3;
  int v4;
  int64_t v5;
  CMTime v7;
  CMTime v8;

  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  GetAudioFilePacketTableInfo(a1);
  if (!*(_BYTE *)(a1 + 179))
    return 0;
  GetAudioFilePacketAndFrameCount(a1);
  if (!*(_DWORD *)(a1 + 116))
    return 0;
  CMTimeMake(&v8, *(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 88));
  v2 = *(const AudioFormatListItem **)(a1 + 104);
  v3 = *(_DWORD *)(a1 + 192);
  v4 = *(_DWORD *)(a1 + 196);
  v5 = *(_QWORD *)(a1 + 184);
  v7 = v8;
  return FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration(v2, &v7, v3, v4, v5);
}

CFTypeRef CopySoundCheckInfoDictionary(uint64_t a1)
{
  CFTypeRef result;
  UInt32 ioDataSize;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 202))
  {
    ioDataSize = 8;
    AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x73636463u, &ioDataSize, (void *)(a1 + 208));
    *(_BYTE *)(a1 + 202) = 1;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  result = *(CFTypeRef *)(a1 + 208);
  if (result)
    return CFRetain(result);
  return result;
}

BOOL IndicatesContentProtection(uint64_t a1)
{
  _BOOL8 v2;
  UInt32 ioDataSize;
  int outPropertyData;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  ioDataSize = 4;
  outPropertyData = 0;
  AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x63727074u, &ioDataSize, &outPropertyData);
  v2 = outPropertyData != 0;
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t EnsureMetadataReaderCreated_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  CFMutableArrayRef Mutable;
  CFIndex Count;
  CFTypeRef v6;
  CFAllocatorRef v7;
  uint64_t v8;
  CFTypeID v9;
  CFTypeID v10;
  uint64_t v12;
  UInt32 v13;
  CFTypeRef cf;
  UInt32 ioDataSize;
  CFTypeRef outPropertyData;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 216);
  if (v2 < 0 || *(_QWORD *)(a1 + 224))
    goto LABEL_3;
  v3 = FigMetadataReaderCreateForID3((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(const void **)(a1 + 24), v2, (_QWORD *)(a1 + 224));
  if (!(_DWORD)v3)
  {
    if (!*(_QWORD *)(a1 + 224))
    {
LABEL_3:
      v3 = 0;
      goto LABEL_4;
    }
    v3 = 0;
    *(_BYTE *)(a1 + 232) = 1;
  }
LABEL_4:
  if (!*(_QWORD *)(a1 + 224))
  {
    outPropertyData = 0;
    ioDataSize = 8;
    cf = 0;
    v13 = 8;
    v12 = 0;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      if (!AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x696E666Fu, &ioDataSize, &outPropertyData)
        && ioDataSize == 8)
      {
        if (outPropertyData)
        {
          v9 = CFGetTypeID(outPropertyData);
          if (v9 == CFDictionaryGetTypeID() && CFDictionaryGetCount((CFDictionaryRef)outPropertyData) >= 1)
            CFDictionaryApplyFunction((CFDictionaryRef)outPropertyData, (CFDictionaryApplierFunction)CreateFigMetadataItemForAudioFileInfoItem, Mutable);
        }
      }
      if (!AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x61617274u, &v13, &cf) && v13 == 8)
      {
        if (cf)
        {
          v10 = CFGetTypeID(cf);
          if (v10 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)cf) >= 1)
            AddFigMetadataItemToArray(Mutable, CFSTR("aart"), cf);
        }
      }
      Count = CFArrayGetCount(Mutable);
      v6 = outPropertyData;
      if (Count < 1)
      {
        v8 = 0;
        v3 = 0;
      }
      else
      {
        v7 = CFGetAllocator(outPropertyData);
        v3 = FigMetadataReaderCreateForGenericMetadataArray((uint64_t)v7, Mutable, CFSTR("public.unknown"), CFSTR("caaf"), &v12);
        v8 = v12;
        v6 = outPropertyData;
      }
      *(_QWORD *)(a1 + 224) = v8;
      if (v6)
        CFRelease(v6);
    }
    else
    {
      v3 = FigSignalErrorAt();
      *(_QWORD *)(a1 + 224) = 0;
    }
    if (cf)
      CFRelease(cf);
    if (Mutable)
      CFRelease(Mutable);
    if (!(_DWORD)v3)
    {
      v3 = 0;
      if (*(_QWORD *)(a1 + 224))
        *(_BYTE *)(a1 + 232) = 0;
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v3;
}

void CreateChaptersFromAudioFileChapterList(uint64_t a1, CFMutableArrayRef *a2)
{
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  OSStatus Property;
  const __CFAllocator *v8;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v10;
  unint64_t v11;
  _QWORD *v12;
  const CFDictionaryValueCallBacks *v13;
  int64_t v14;
  _QWORD *v15;
  int AudioFilePacketAndFrameCount;
  CFMutableDictionaryRef v17;
  CFMutableDictionaryRef v18;
  CFMutableDictionaryRef v19;
  CFMutableArrayRef *v20;
  CMTime v21;
  CMTime v22;
  UInt32 outDataSize;

  outDataSize = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (AudioFileGetPropertyInfo(*(AudioFileID *)(a1 + 32), 0x63687073u, &outDataSize, 0))
    v4 = 0;
  else
    v4 = outDataSize >= 0x10;
  if (!v4)
    goto LABEL_26;
  v5 = malloc_type_malloc(outDataSize, 0xB6EB5CEDuLL);
  if (!v5)
  {
    FigSignalErrorAt();
LABEL_26:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    v6 = 0;
    goto LABEL_20;
  }
  v6 = v5;
  Property = AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x63687073u, &outDataSize, v5);
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  if (!Property && *v6 && 8 * (*v6 - 1) + 16 == outDataSize)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v10 = Mutable;
      v20 = a2;
      if (*v6)
      {
        v11 = 0;
        v12 = v6 + 4;
        v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        while (1)
        {
          v14 = *(v12 - 1);
          memset(&v22, 0, sizeof(v22));
          CMTimeMake(&v22, v14, *(_DWORD *)(a1 + 88));
          memset(&v21, 0, sizeof(v21));
          ++v11;
          v15 = v12;
          if (v11 >= *v6)
          {
            AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount(a1);
            v15 = (_QWORD *)(a1 + 136);
            if (AudioFilePacketAndFrameCount)
              break;
          }
          CMTimeMake(&v21, *v15 - v14, *(_DWORD *)(a1 + 88));
          v17 = CFDictionaryCreateMutable(v8, 2, MEMORY[0x1E0C9B390], v13);
          if (!v17)
          {
            FigSignalErrorAt();
            break;
          }
          v18 = v17;
          if (FigCFDictionarySetCMTime() || FigCFDictionarySetCMTime())
          {
            FigSignalErrorAt();
            CFRelease(v10);
            v19 = v18;
            goto LABEL_24;
          }
          CFArrayAppendValue(v10, v18);
          CFRelease(v18);
          ++v12;
          if (v11 >= *v6)
            goto LABEL_19;
        }
        v19 = v10;
LABEL_24:
        CFRelease(v19);
      }
      else
      {
LABEL_19:
        *v20 = v10;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
LABEL_20:
  free(v6);
}

uint64_t GetAudioFilePacketTableInfo(uint64_t a1)
{
  UInt32 ioDataSize;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 178))
  {
    ioDataSize = 16;
    if (!AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x706E666Fu, &ioDataSize, (void *)(a1 + 184))
      && *(uint64_t *)(a1 + 184) >= 1)
    {
      *(_BYTE *)(a1 + 179) = 1;
      if ((*(_DWORD *)(a1 + 192) & 0x80000000) != 0)
        *(_DWORD *)(a1 + 192) = 0;
      if ((*(_DWORD *)(a1 + 196) & 0x80000000) != 0)
        *(_DWORD *)(a1 + 196) = 0;
    }
    *(_BYTE *)(a1 + 178) = 1;
  }
  return MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
}

uint64_t GetAudioFilePacketAndFrameCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t Property;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  UInt32 ioNumPackets;
  AudioStreamPacketDescription outPacketDescriptions;
  int64_t v11;
  UInt32 ioDataSize;
  uint64_t outPropertyData;

  outPropertyData = 0;
  if (!*(_DWORD *)(a1 + 116))
  {
    ioDataSize = 8;
    Property = AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x70636E74u, &ioDataSize, &outPropertyData);
    if ((_DWORD)Property)
      return Property;
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    v4 = outPropertyData;
    *(_QWORD *)(a1 + 128) = outPropertyData;
    v5 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v5)
    {
      v6 = v4 * v5;
    }
    else
    {
      *(_QWORD *)&outPacketDescriptions.mVariableFramesInPacket = 0;
      v11 = 0;
      outPacketDescriptions.mStartOffset = 0;
      ioNumPackets = 1;
      v7 = MapPacketNumberToFrameNumber_0(a1, v4 - 1, &v11);
      if ((_DWORD)v7
        || (v7 = AudioFileReadPacketData(*(AudioFileID *)(a1 + 32), 0, 0, &outPacketDescriptions, outPropertyData - 1, &ioNumPackets, 0), (_DWORD)v7))
      {
        v1 = v7;
        goto LABEL_10;
      }
      v6 = v11 + outPacketDescriptions.mVariableFramesInPacket;
    }
    *(_QWORD *)(a1 + 136) = v6;
    v1 = 0;
    *(_DWORD *)(a1 + 116) = 1;
LABEL_10:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    return v1;
  }
  return 0;
}

uint64_t AudioFileHasSampleDependencies(uint64_t a1)
{
  UInt32 ioDataSize;
  int outPropertyData;

  if (!*(_BYTE *)(a1 + 200))
  {
    ioDataSize = 4;
    outPropertyData = 0;
    *(_WORD *)(a1 + 200) = 1;
    if (!AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x72726170u, &ioDataSize, &outPropertyData))
      *(_BYTE *)(a1 + 201) = outPropertyData != 0;
  }
  return *(unsigned __int8 *)(a1 + 201);
}

uint64_t MapPacketNumberToFrameNumber_0(uint64_t a1, int64_t a2, int64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  UInt32 ioDataSize;
  _QWORD outPropertyData[3];

  v4 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v4)
    v5 = *(unsigned int *)(a1 + 68);
  else
    v5 = 1;
  if ((uint64_t)(0x7FFFFFFFFFFEA06FLL / v5) <= a2)
  {
    result = 0;
    *a3 = 0x7FFFFFFFFFFEA06FLL;
    return result;
  }
  if ((_DWORD)v4)
  {
    result = 0;
    v7 = v4 * a2;
  }
  else
  {
    outPropertyData[0] = 0;
    outPropertyData[1] = a2;
    outPropertyData[2] = 0;
    ioDataSize = 24;
    result = AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x706B6672u, &ioDataSize, outPropertyData);
    if ((_DWORD)result)
      return result;
    v7 = outPropertyData[0];
  }
  *a3 = v7;
  return result;
}

void CreateFigMetadataItemForAudioFileInfoItem(uint64_t a1, const void *a2, void *cf)
{
  const __CFAllocator *v6;
  CFStringRef v7;
  CFStringRef v8;

  v6 = CFGetAllocator(cf);
  v7 = CFStringCreateWithFormat(v6, 0, CFSTR("info-%@"), a1);
  if (v7)
  {
    v8 = v7;
    AddFigMetadataItemToArray(cf, v7, a2);
    CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void AddFigMetadataItemToArray(void *a1, const void *a2, const void *a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;

  v6 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v6, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v8 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("key"), a2);
    CFDictionarySetValue(v8, CFSTR("value"), a3);
    CFDictionarySetValue(v8, CFSTR("keyspace"), CFSTR("caaf"));
    CFArrayAppendValue((CFMutableArrayRef)a1, v8);
    CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigAudioFileFormatReaderGetTrackCount(uint64_t a1, _QWORD *a2)
{
  *a2 = 1;
  return 0;
}

uint64_t FigAudioFileFormatReaderCopyTrackByIndex(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t DerivedStorage;
  CFTypeRef v10;

  if (a2)
    return 4294954453;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v10 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v10)
      v10 = CFRetain(v10);
    *a3 = v10;
  }
  if (a4)
    *a4 = 1936684398;
  result = 0;
  if (a5)
    *a5 = 1;
  return result;
}

uint64_t FigAudioFileFormatReaderCopyTrackByID(uint64_t a1, int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v7;

  if (a2 != 1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v7 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v7)
      v7 = CFRetain(v7);
    *a3 = v7;
  }
  if (a4)
    *a4 = 1936684398;
  return 0;
}

uint64_t FigAudioFileFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t DerivedStorage;
  CFTypeRef v9;

  result = 4294954453;
  if (!a2 && a3 == 1936684398)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a4)
    {
      v9 = *(CFTypeRef *)(DerivedStorage + 8);
      if (v9)
        v9 = CFRetain(v9);
      *a4 = v9;
    }
    result = 0;
    if (a5)
      *a5 = 1;
  }
  return result;
}

uint64_t AudioFile_FigReadProc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v12;

  v12 = 0;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 8);
  if (v10)
  {
    result = v10(v9, a3, a2, a4, &v12);
    LODWORD(v10) = v12;
  }
  else
  {
    result = 4294954514;
  }
  *a5 = (_DWORD)v10;
  return result;
}

uint64_t AudioFile_FigGetSizeProc(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t CMBaseObject;
  unsigned int (*v4)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  BOOL v5;
  CFNumberRef number;

  v2 = (void *)(a1 + 152);
  v1 = *(_QWORD *)(a1 + 152);
  if (!v1)
  {
    number = 0;
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v4 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v4)
    {
      if (v4(CMBaseObject, *MEMORY[0x1E0CA2070], *MEMORY[0x1E0C9AE00], &number))
        v5 = 1;
      else
        v5 = number == 0;
      if (!v5)
      {
        CFNumberGetValue(number, kCFNumberSInt64Type, v2);
        CFRelease(number);
      }
    }
    return *(_QWORD *)v2;
  }
  return v1;
}

uint64_t RegisterFigAudioFileInfoType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAudioFileInfoID = result;
  return result;
}

double InitFigAudioFileInfo(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t FinalizeFigAudioFileInfo(uint64_t a1)
{
  OpaqueAudioFileID *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t result;

  free(*(void **)(a1 + 168));
  FigFormatDescriptionRelease();
  v2 = *(OpaqueAudioFileID **)(a1 + 32);
  if (v2)
    AudioFileClose(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 208);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 224);
  if (v5)
    CFRelease(v5);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return FigSimpleMutexDestroy();
  return result;
}

void FigAudioFileTrackReaderFinalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *FigAudioFileTrackReaderCopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const void *v2;
  CFStringRef v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (*(_QWORD *)DerivedStorage)
  {
    v2 = *(const void **)(*(_QWORD *)DerivedStorage + 24);
    if (v2)
    {
      v3 = CFCopyDescription(v2);
      CFStringAppendFormat(Mutable, 0, CFSTR("\tFigAudioFileTrackReader: stream<%@> trackID %d"), v3, 1);
      if (v3)
        CFRelease(v3);
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("\tFigAudioFileTrackReader: stream<%@> trackID %d"), 0, 1);
    }
  }
  return Mutable;
}

uint64_t FigAudioFileTrackReaderGetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a3)
    *a3 = 1936684398;
  if (a2)
    *a2 = 1;
  return 0;
}

uint64_t FigAudioFileTrackReaderCopySampleCursorService(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  uint64_t v4;
  _QWORD *DerivedStorage;
  CFTypeRef v6;

  v3 = *(const void **)CMBaseObjectGetDerivedStorage();
  FigSampleCursorServiceGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (v3)
      v6 = CFRetain(v3);
    else
      v6 = 0;
    *DerivedStorage = v6;
    *a2 = 0;
  }
  return v4;
}

void FigAudioFileCursorService_finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *FigAudioFileCursorService_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFormatReader_AudioFile_CursorService %p>{ samplerate %d }"), a1, *(unsigned int *)(*(_QWORD *)DerivedStorage + 88));
  return Mutable;
}

uint64_t FigAudioFileCursorService_createCursorAtPresentationTimeStamp(uint64_t a1, CMTime *a2, _QWORD *a3, BOOL *a4, char *a5)
{
  _QWORD *v9;
  uint64_t v10;
  const void *v11;
  _QWORD *DerivedStorage;
  uint64_t v13;
  CMTime v15;
  const void *v16;

  v9 = *(_QWORD **)CMBaseObjectGetDerivedStorage();
  v16 = 0;
  MEMORY[0x19402EA0C](v9[2]);
  v10 = createFigAudioPacketAccessor_0(v9, &v16);
  if ((_DWORD)v10)
  {
    v13 = v10;
  }
  else
  {
    v11 = v16;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v15 = *a2;
    v13 = moveToSampleAtPTS_0(DerivedStorage, (uint64_t)v9, &v15, a4, a5);
    if ((_DWORD)v13)
    {
      if (v11)
        CFRelease(v11);
    }
    else
    {
      *a3 = v11;
    }
  }
  MEMORY[0x19402EA24](v9[2]);
  return v13;
}

uint64_t FigAudioFileCursorService_createCursorNearPresentationTimeStamp(uint64_t a1, CMTime *a2, uint64_t a3, _QWORD *a4, BOOL *a5, char *a6)
{
  CMTime v7;

  v7 = *a2;
  return FigAudioFileCursorService_createCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t FigAudioFileCursorService_createCursorAtFirstSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(_QWORD **)CMBaseObjectGetDerivedStorage();
  v7 = 0;
  MEMORY[0x19402EA0C](v3[2]);
  v4 = createFigAudioPacketAccessor_0(v3, &v7);
  if (!(_DWORD)v4)
  {
    v5 = v7;
    *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
    *a2 = v5;
  }
  MEMORY[0x19402EA24](v3[2]);
  return v4;
}

uint64_t FigAudioFileCursorService_createCursorAtLastSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  uint64_t DerivedStorage;
  uint64_t AudioFilePacketAndFrameCount;
  const void *v9;

  v3 = *(_QWORD **)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  MEMORY[0x19402EA0C](v3[2]);
  v4 = createFigAudioPacketAccessor_0(v3, &v9);
  if ((_DWORD)v4)
  {
    AudioFilePacketAndFrameCount = v4;
  }
  else
  {
    v5 = v9;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount((uint64_t)v3);
    if ((_DWORD)AudioFilePacketAndFrameCount)
    {
      if (v5)
        CFRelease(v5);
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 8) = v3[16] - 1;
      *a2 = v5;
    }
  }
  MEMORY[0x19402EA24](v3[2]);
  return AudioFilePacketAndFrameCount;
}

uint64_t createFigAudioPacketAccessor_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t AudioFilePacketAndFrameCount;
  uint64_t v5;
  _QWORD *DerivedStorage;

  AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount((uint64_t)a1);
  if ((_DWORD)AudioFilePacketAndFrameCount)
    return AudioFilePacketAndFrameCount;
  if (a1[16])
  {
    FigSampleCursorGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      FigSignalErrorAt();
    }
    else
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      *DerivedStorage = CFRetain(a1);
      DerivedStorage[1] = 0;
      *a2 = 0;
    }
    return v5;
  }
  return FigSignalErrorAt();
}

uint64_t moveToSampleAtPTS_0(_QWORD *a1, uint64_t a2, CMTime *a3, BOOL *a4, char *a5)
{
  CMTimeFlags flags;
  int v11;
  CMTimeValue value;
  int32_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  BOOL v20;
  CMTime v21;
  CMTime outPropertyData;

  flags = a3->flags;
  v11 = flags & 9;
  if (v11 == 9)
  {
    value = 0;
  }
  else if ((flags & 0x1D) == 1)
  {
    memset(&outPropertyData, 0, sizeof(outPropertyData));
    v13 = *(_DWORD *)(*a1 + 88);
    v21 = *a3;
    CMTimeConvertScale(&outPropertyData, &v21, v13, kCMTimeRoundingMethod_RoundTowardZero);
    value = outPropertyData.value;
  }
  else
  {
    value = 0x7FFFFFFFFFFEA06FLL;
  }
  v14 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v14)
  {
    if (!GetAudioFilePacketAndFrameCount(a2))
    {
      if (*(_DWORD *)(a2 + 116))
      {
        v15 = value / v14;
        if (*(_QWORD *)(a2 + 128) > value / v14)
        {
          v16 = 0;
          goto LABEL_22;
        }
      }
    }
    result = GetAudioFilePacketAndFrameCount(a2);
    if ((_DWORD)result)
      return result;
    v15 = *(_QWORD *)(a2 + 128) - 1;
LABEL_19:
    v16 = 1;
    goto LABEL_22;
  }
  *(_QWORD *)&outPropertyData.timescale = 0;
  outPropertyData.epoch = 0;
  outPropertyData.value = value;
  LODWORD(v21.value) = 24;
  result = AudioFileGetProperty(*(AudioFileID *)(a2 + 32), 0x6672706Bu, (UInt32 *)&v21, &outPropertyData);
  if ((value & 0x8000000000000000) == 0 && (_DWORD)result == 1885563711)
  {
    result = GetAudioFilePacketAndFrameCount(a2);
    if ((_DWORD)result)
      return result;
    v18 = *(_QWORD *)(a2 + 128);
    v15 = v18 - 1;
    if (v18 <= 0)
      v15 = 0;
    goto LABEL_19;
  }
  if ((_DWORD)result)
    return result;
  v16 = 0;
  v15 = *(_QWORD *)&outPropertyData.timescale;
LABEL_22:
  a1[1] = v15;
  if (a4)
  {
    v20 = v11 == 9 || a3->value < 0;
    *a4 = v20;
  }
  result = 0;
  if (a5)
    *a5 = v16;
  return result;
}

void FigAudioFileCursor_finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *FigAudioFileCursor_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFormatReader_AudioFile_SampleCursor %p>{ curPacketNum %lld }"), a1, *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t FigAudioFileCursor_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t *DerivedStorage;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t Property;
  uint64_t DependencyInfo;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t *);
  uint64_t v20;
  uint64_t SizeProc;
  uint64_t *v22;
  uint64_t v23;
  CMTimeValue v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  CMTime v29;
  UInt32 v30;
  UInt32 v31;
  int64_t value;
  uint64_t v33;
  uint64_t v34;
  UInt32 ioNumPackets[2];
  uint64_t v36;
  uint64_t v37;
  UInt32 ioDataSize;
  uint64_t outPropertyData;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  CMTime outPacketDescriptions[5];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(*DerivedStorage + 16));
  if (!a4)
  {
    DependencyInfo = FigSignalErrorAt();
    goto LABEL_41;
  }
  *a4 = 0;
  if (!CFEqual(a2, CFSTR("CursorPlayableHorizon")))
  {
    if (CFEqual(a2, CFSTR("PreferCreateSampleBuffer")))
    {
      v14 = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
      goto LABEL_16;
    }
    if (!CFEqual(a2, CFSTR("SampleDependencyAttributes")))
    {
      Property = 4294954512;
      goto LABEL_17;
    }
    v22 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    outPacketDescriptions[0].value = 0;
    if (AudioFileHasSampleDependencies(*v22))
    {
      outPropertyData = 0;
      DependencyInfo = fafc_GetDependencyInfo(a1, (uint64_t)&outPropertyData);
      if ((_DWORD)DependencyInfo)
        goto LABEL_41;
      v23 = FigPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary();
      if ((_DWORD)v23)
      {
        Property = v23;
        if (outPacketDescriptions[0].value)
          CFRelease((CFTypeRef)outPacketDescriptions[0].value);
        goto LABEL_17;
      }
      v24 = outPacketDescriptions[0].value;
    }
    else
    {
      v24 = 0;
    }
    Property = 0;
    *a4 = v24;
    goto LABEL_17;
  }
  memset(&v29, 0, sizeof(v29));
  outPropertyData = 0;
  v40 = 0;
  v41 = 0;
  ioDataSize = 24;
  v9 = *DerivedStorage;
  v10 = DerivedStorage[1];
  LODWORD(v11) = *(_DWORD *)(*DerivedStorage + 68);
  if (v11 <= 1)
    v11 = 1;
  else
    v11 = v11;
  if (v10 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v11))
  {
    v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    goto LABEL_13;
  }
  v42 = 0;
  v40 = v10;
  Property = AudioFileGetProperty(*(AudioFileID *)(v9 + 32), 0x706B6279u, &ioDataSize, &outPropertyData);
  if ((_DWORD)Property == 1836020325)
  {
    ioNumPackets[0] = 8;
    DependencyInfo = AudioFileReadPacketData(*(AudioFileID *)(*DerivedStorage + 32), 0, 0, (AudioStreamPacketDescription *)outPacketDescriptions, 0, ioNumPackets, 0);
    if (!(_DWORD)DependencyInfo)
    {
      Property = AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x706B6279u, &ioDataSize, &outPropertyData);
      goto LABEL_10;
    }
LABEL_41:
    Property = DependencyInfo;
    goto LABEL_17;
  }
LABEL_10:
  if ((_DWORD)Property)
  {
LABEL_11:
    v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    goto LABEL_12;
  }
  v16 = *(_QWORD *)(*DerivedStorage + 24);
  v17 = outPropertyData;
  v18 = *(_QWORD *)(*DerivedStorage + 144);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v19 || (v20 = v19(v16, v18 + v17, &v42), (_DWORD)v20 == -12782))
  {
    SizeProc = AudioFile_FigGetSizeProc(*DerivedStorage);
    if (!SizeProc)
      goto LABEL_22;
  }
  else
  {
    Property = v20;
    if ((_DWORD)v20)
      goto LABEL_11;
    SizeProc = v42 + outPropertyData;
    if (!(v42 + outPropertyData))
    {
LABEL_22:
      Property = 0;
      goto LABEL_11;
    }
  }
  v36 = 0;
  v37 = 0;
  value = 0;
  v33 = 0;
  v34 = 0;
  *(_QWORD *)ioNumPackets = SizeProc;
  v31 = 24;
  Property = AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x6279706Bu, &v31, ioNumPackets);
  if ((_DWORD)Property == 1836020325)
  {
    v30 = 8;
    v25 = AudioFileReadPacketData(*(AudioFileID *)(*DerivedStorage + 32), 0, 0, (AudioStreamPacketDescription *)outPacketDescriptions, 0, &v30, 0);
    if ((_DWORD)v25)
    {
      Property = v25;
      goto LABEL_12;
    }
    Property = AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x6279706Bu, &v31, ioNumPackets);
  }
  if (!(_DWORD)Property)
  {
    v26 = *DerivedStorage;
    v27 = *(unsigned int *)(*DerivedStorage + 68);
    if ((_DWORD)v27)
    {
      Property = 0;
      v28 = (v36 - DerivedStorage[1]) * v27;
    }
    else
    {
      v31 = 24;
      v33 = v36;
      Property = AudioFileGetProperty(*(AudioFileID *)(v26 + 32), 0x706B6672u, &v31, &value);
      v28 = value;
      v26 = *DerivedStorage;
    }
    CMTimeMake(&v29, v28, *(_DWORD *)(v26 + 88));
  }
LABEL_12:
  if (!(_DWORD)Property)
  {
LABEL_13:
    outPacketDescriptions[0] = v29;
    v14 = CMTimeCopyAsDictionary(outPacketDescriptions, a3);
LABEL_16:
    Property = 0;
    *a4 = (CMTimeValue)v14;
  }
LABEL_17:
  MEMORY[0x19402EA24](*(_QWORD *)(*DerivedStorage + 16));
  return Property;
}

uint64_t fafc_GetDependencyInfo(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  uint64_t result;
  int v5;
  UInt32 ioDataSize;
  uint64_t outPropertyData;
  uint64_t v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = 0;
  ioDataSize = 16;
  outPropertyData = DerivedStorage[1];
  result = AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x706B6470u, &ioDataSize, &outPropertyData);
  if (!(_DWORD)result)
  {
    v5 = HIDWORD(v8);
    *(_BYTE *)a2 = (_DWORD)v8 != 0;
    *(_DWORD *)(a2 + 4) = v5;
  }
  return result;
}

uint64_t FigAudioFileCursor_copy(uint64_t a1, _QWORD *a2)
{
  _OWORD *DerivedStorage;
  uint64_t v4;
  _OWORD *v5;
  const void *v6;

  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    v5 = (_OWORD *)CMBaseObjectGetDerivedStorage();
    *v5 = *DerivedStorage;
    v6 = *(const void **)v5;
    if (v6)
      CFRetain(v6);
    *a2 = 0;
  }
  return v4;
}

uint64_t FigAudioFileCursor_compareInDecodeOrder()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 8);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = v2 < v3;
  v5 = v2 > v3;
  if (v4)
    return -1;
  else
    return v5;
}

uint64_t FigAudioFileCursor_getPresentationTimeStamp(uint64_t a1, CMTime *a2)
{
  int64_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (int64_t *)CMBaseObjectGetDerivedStorage();
  v4 = *DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(*DerivedStorage + 16));
  v5 = PacketToPTS(v4, DerivedStorage[1], a2);
  MEMORY[0x19402EA24](*(_QWORD *)(v4 + 16));
  return v5;
}

uint64_t FigAudioFileCursor_getDuration(uint64_t a1, CMTime *a2)
{
  SInt64 *DerivedStorage;
  SInt64 v4;
  int64_t mVariableFramesInPacket;
  uint64_t v6;
  uint64_t v7;
  UInt32 ioNumPackets;
  AudioStreamPacketDescription outPacketDescriptions;
  CMTime v11;

  DerivedStorage = (SInt64 *)CMBaseObjectGetDerivedStorage();
  v4 = *DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(*DerivedStorage + 16));
  mVariableFramesInPacket = *(unsigned int *)(v4 + 68);
  if (!(_DWORD)mVariableFramesInPacket)
  {
    outPacketDescriptions.mStartOffset = 0;
    *(_QWORD *)&outPacketDescriptions.mVariableFramesInPacket = 0;
    ioNumPackets = 1;
    v6 = AudioFileReadPacketData(*(AudioFileID *)(v4 + 32), 0, 0, &outPacketDescriptions, DerivedStorage[1], &ioNumPackets, 0);
    if ((_DWORD)v6)
    {
      v7 = v6;
      goto LABEL_5;
    }
    mVariableFramesInPacket = outPacketDescriptions.mVariableFramesInPacket;
    if (!outPacketDescriptions.mVariableFramesInPacket)
    {
      v7 = 4294954516;
      goto LABEL_5;
    }
  }
  CMTimeMake(&v11, mVariableFramesInPacket, *(_DWORD *)(v4 + 88));
  v7 = 0;
  *a2 = v11;
LABEL_5:
  MEMORY[0x19402EA24](*(_QWORD *)(v4 + 16));
  return v7;
}

uint64_t FigAudioFileCursor_getDependencyInfo(uint64_t a1, char *a2, _BYTE *a3, _DWORD *a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  char v13;
  uint64_t v14;

  v10 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  if (!a2)
    return 0;
  *a2 = 1;
  result = AudioFileHasSampleDependencies(v10);
  if ((_DWORD)result)
  {
    v14 = 0;
    result = fafc_GetDependencyInfo(a1, (uint64_t)&v14);
    if (!(_DWORD)result)
    {
      if ((_BYTE)v14)
        v12 = HIDWORD(v14) == 0;
      else
        v12 = 0;
      v13 = v12;
      *a2 = v13;
    }
  }
  return result;
}

uint64_t FigAudioFileCursor_createSampleBuffer(uint64_t a1, uint64_t a2, CMSampleBufferRef *a3)
{
  int64_t *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  SInt64 v9;
  SInt64 v10;
  UInt32 v11;
  uint64_t v12;
  int v13;
  CFAllocatorRef *v14;
  unint64_t epoch;
  const __CFAllocator *v16;
  void *v17;
  uint64_t PacketData;
  const opaqueCMFormatDescription *v19;
  const AudioStreamPacketDescription *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, CFTypeRef *);
  uint64_t v23;
  CFIndex v24;
  CFTypeRef v25;
  const __CFArray *SampleAttachmentsArray;
  void *ValueAtIndex;
  void *v28;
  uint64_t FigBaseObject;
  unsigned int (*v30)(uint64_t, const __CFString *, _QWORD, CMTime *);
  CFTypeRef v32;
  uint64_t (*v33)(CFTypeRef, uint64_t, _QWORD);
  CMBlockBufferRef v34;
  uint64_t v35;
  UInt32 ioDataSize;
  CFTypeRef cf;
  UInt32 ioNumPackets[2];
  CMTime v40;
  CMSampleBufferRef sbuf;
  CMBlockBufferRef dataBuffer;
  CMTime outPropertyData;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (int64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
    v7 = CMBaseObjectGetDerivedStorage();
  else
    v7 = 0;
  v8 = *DerivedStorage;
  sbuf = 0;
  dataBuffer = 0;
  memset(&v40, 0, sizeof(v40));
  cf = 0;
  *(_QWORD *)ioNumPackets = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 16));
  v9 = DerivedStorage[1];
  if (v7)
  {
    v10 = *(_QWORD *)(v7 + 8);
    if (v10 < v9)
    {
      v12 = FigSignalErrorAt();
      goto LABEL_63;
    }
    v11 = v10 - v9 + 1;
  }
  else
  {
    v11 = 1;
  }
  v12 = PacketToPTS(v8, DerivedStorage[1], &v40);
  if ((_DWORD)v12)
  {
LABEL_63:
    v35 = v12;
    goto LABEL_57;
  }
  ioNumPackets[1] = v11;
  v13 = *(_DWORD *)(v8 + 64);
  v14 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v13)
  {
    epoch = v13 * v11;
LABEL_18:
    v16 = *v14;
    v17 = CFAllocatorAllocate(*v14, epoch, 0);
    if (!v17)
    {
      PacketData = FigSignalErrorAt();
      goto LABEL_59;
    }
    if (*(_DWORD *)(v8 + 68) && *(_DWORD *)(v8 + 64)
      || (v12 = ensureAllocationOfPacketDescriptions(v8, ioNumPackets[1]), !(_DWORD)v12))
    {
      ioNumPackets[0] = epoch;
      PacketData = AudioFileReadPacketData(*(AudioFileID *)(v8 + 32), 0, ioNumPackets, *(AudioStreamPacketDescription **)(v8 + 168), v9, &ioNumPackets[1], v17);
      if (!(_DWORD)PacketData)
      {
        PacketData = CMBlockBufferCreateWithMemoryBlock(v16, v17, epoch, v16, 0, 0, ioNumPackets[0], 0, &dataBuffer);
        if (!(_DWORD)PacketData)
        {
          v19 = *(const opaqueCMFormatDescription **)(v8 + 104);
          v20 = *(const AudioStreamPacketDescription **)(v8 + 168);
          outPropertyData = v40;
          v21 = CMAudioSampleBufferCreateWithPacketDescriptions(v16, dataBuffer, 1u, 0, 0, v19, ioNumPackets[1], &outPropertyData, v20, &sbuf);
          if ((_DWORD)v21)
          {
            v35 = v21;
LABEL_49:
            if (sbuf)
              CFRelease(sbuf);
            goto LABEL_51;
          }
          if (AudioFileHasSampleDependencies(v8))
          {
            v22 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (!v22)
            {
LABEL_46:
              v35 = 4294954514;
              goto LABEL_47;
            }
            v23 = v22(a1, &cf);
            if ((_DWORD)v23)
            {
LABEL_64:
              v35 = v23;
LABEL_47:
              if (cf)
                CFRelease(cf);
              goto LABEL_49;
            }
            if (ioNumPackets[1])
            {
              v24 = 0;
              do
              {
                v25 = cf;
                SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
                if (SampleAttachmentsArray)
                {
                  ValueAtIndex = (void *)CFArrayGetValueAtIndex(SampleAttachmentsArray, v24);
                  if (ValueAtIndex)
                  {
                    v28 = ValueAtIndex;
                    outPropertyData.value = 0;
                    FigBaseObject = FigSampleCursorGetFigBaseObject(v25);
                    v30 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v30)
                    {
                      if (!v30(FigBaseObject, CFSTR("SampleDependencyAttributes"), 0, &outPropertyData)
                        && outPropertyData.value != 0)
                      {
                        CFDictionaryApplyFunction((CFDictionaryRef)outPropertyData.value, (CFDictionaryApplierFunction)appendAttributesToDictionary_Applier, v28);
                        CFRelease((CFTypeRef)outPropertyData.value);
                      }
                    }
                  }
                }
                v32 = cf;
                v33 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 168);
                if (!v33)
                  goto LABEL_46;
                v23 = v33(v32, 1, 0);
                if ((_DWORD)v23)
                  goto LABEL_64;
              }
              while (++v24 < (unint64_t)ioNumPackets[1]);
            }
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
          }
          v34 = dataBuffer;
          *a3 = sbuf;
          if (v34)
            CFRelease(v34);
          v35 = 0;
          goto LABEL_57;
        }
      }
LABEL_59:
      v35 = PacketData;
      goto LABEL_52;
    }
    goto LABEL_63;
  }
  ioDataSize = 24;
  outPropertyData.value = v9;
  *(_QWORD *)&outPropertyData.timescale = v11;
  outPropertyData.epoch = 0;
  if (AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x70727562u, &ioDataSize, &outPropertyData))
  {
    v12 = ensureAllocationOfPacketDescriptions(v8, ioNumPackets[1]);
    if ((_DWORD)v12)
      goto LABEL_63;
    v12 = AudioFileReadPacketData(*(AudioFileID *)(v8 + 32), 0, 0, *(AudioStreamPacketDescription **)(v8 + 168), v9, &ioNumPackets[1], 0);
    if ((_DWORD)v12)
      goto LABEL_63;
    if (ioNumPackets[1])
    {
      epoch = *(_QWORD *)(*(_QWORD *)(v8 + 168) + 16 * (ioNumPackets[1] - 1))
            - **(_QWORD **)(v8 + 168)
            + *(unsigned int *)(*(_QWORD *)(v8 + 168) + 16 * (ioNumPackets[1] - 1) + 12);
      goto LABEL_17;
    }
LABEL_56:
    v35 = 4294954456;
    goto LABEL_57;
  }
  epoch = outPropertyData.epoch;
  ioNumPackets[1] = outPropertyData.timescale;
  if (!outPropertyData.timescale)
    goto LABEL_56;
LABEL_17:
  if (!HIDWORD(epoch))
    goto LABEL_18;
  v35 = FigSignalErrorAt();
LABEL_51:
  v17 = 0;
LABEL_52:
  if (dataBuffer)
    CFRelease(dataBuffer);
  if (v17)
    CFAllocatorDeallocate(*v14, v17);
LABEL_57:
  MEMORY[0x19402EA24](*(_QWORD *)(v8 + 16));
  return v35;
}

uint64_t FigAudioFileCursor_stepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CMTime v11;
  CMTime lhs;
  __int16 v13;
  CMTime v14;
  CMTime v15;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  memset(&v14, 0, sizeof(v14));
  v13 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(*DerivedStorage + 16));
  v4 = *DerivedStorage;
  v5 = DerivedStorage[1];
  LODWORD(v6) = *(_DWORD *)(*DerivedStorage + 68);
  if (v6 <= 1)
    v6 = 1;
  else
    v6 = v6;
  if (v5 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v6))
  {
    v9 = 4294954456;
  }
  else
  {
    memset(&v15, 0, sizeof(v15));
    v7 = PacketToPTS(v4, v5, &v15);
    if ((_DWORD)v7)
    {
      v9 = v7;
    }
    else
    {
      lhs = v15;
      v11 = *a2;
      CMTimeAdd(&v14, &lhs, &v11);
      v8 = *DerivedStorage;
      lhs = v14;
      v9 = moveToSampleAtPTS_0(DerivedStorage, v8, &lhs, (BOOL *)&v13 + 1, (char *)&v13);
      if (!(_DWORD)v9)
      {
        if (HIBYTE(v13) | v13)
          v9 = 4294954456;
        else
          v9 = 0;
      }
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(*DerivedStorage + 16));
  return v9;
}

uint64_t FigAudioFileCursor_stepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return FigAudioFileCursor_stepByDecodeTime(a1, &v3);
}

uint64_t FigAudioFileCursor_copySampleLocation(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t *DerivedStorage;
  uint64_t v10;
  uint64_t Property;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  CFTypeRef v15;
  UInt32 ioDataSize;
  uint64_t outPropertyData;
  UInt32 ioNumPackets;
  AudioStreamPacketDescription outPacketDescriptions;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v10 = *DerivedStorage;
  outPacketDescriptions.mStartOffset = 0;
  *(_QWORD *)&outPacketDescriptions.mVariableFramesInPacket = 0;
  ioNumPackets = 1;
  MEMORY[0x19402EA0C](*(_QWORD *)(v10 + 16));
  if (!*(_DWORD *)(v10 + 120))
  {
    outPropertyData = 0;
    ioDataSize = 8;
    Property = AudioFileGetProperty(*(AudioFileID *)(v10 + 32), 0x646F6666u, &ioDataSize, &outPropertyData);
    if ((_DWORD)Property)
    {
      v14 = Property;
      goto LABEL_20;
    }
    *(_DWORD *)(v10 + 120) = 1;
    *(_QWORD *)(v10 + 144) = outPropertyData;
  }
  v12 = *(unsigned int *)(v10 + 64);
  if ((_DWORD)v12)
  {
    outPacketDescriptions.mStartOffset = DerivedStorage[1] * v12;
    outPacketDescriptions.mDataByteSize = v12;
  }
  else
  {
    v13 = AudioFileReadPacketData(*(AudioFileID *)(v10 + 32), 0, 0, &outPacketDescriptions, DerivedStorage[1], &ioNumPackets, 0);
    if (v13 == 1869627199)
      v14 = 4294954455;
    else
      v14 = v13;
    if ((_DWORD)v14)
      goto LABEL_20;
  }
  if (a2)
    *a2 = *(_QWORD *)(v10 + 144) + outPacketDescriptions.mStartOffset;
  if (a3)
    *a3 = outPacketDescriptions.mDataByteSize;
  if (a4)
  {
    v15 = *(CFTypeRef *)(v10 + 24);
    if (v15)
      v15 = CFRetain(v15);
    *a4 = v15;
  }
  v14 = 0;
  if (a5)
    *a5 = 0;
LABEL_20:
  MEMORY[0x19402EA24](*(_QWORD *)(v10 + 16));
  return v14;
}

uint64_t FigAudioFileCursor_copyChunkDetails(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unint64_t *a6, unint64_t *a7, _BYTE *a8, _BYTE *a9, _BYTE *a10)
{
  _QWORD *DerivedStorage;
  uint64_t v16;
  uint64_t Property;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef v30;
  uint64_t v31;
  unint64_t *v33;
  _BYTE *v34;
  UInt32 ioDataSize;
  uint64_t outPropertyData;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v16 = *DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(*DerivedStorage + 16));
  if (!*(_DWORD *)(v16 + 120))
  {
    outPropertyData = 0;
    ioDataSize = 8;
    Property = AudioFileGetProperty(*(AudioFileID *)(v16 + 32), 0x646F6666u, &ioDataSize, &outPropertyData);
    if ((_DWORD)Property)
    {
      v31 = Property;
      goto LABEL_33;
    }
    *(_DWORD *)(v16 + 120) = 1;
    *(_QWORD *)(v16 + 144) = outPropertyData;
  }
  v34 = a8;
  v33 = a7;
  if (*(_BYTE *)(v16 + 264))
  {
    v18 = *(_QWORD *)(v16 + 240);
    v19 = *(_QWORD *)(v16 + 256);
    v20 = a4;
  }
  else
  {
    v21 = 0.5;
    LODWORD(v21) = *(_DWORD *)(v16 + 68);
    v22 = *(double *)(v16 + 48) * 0.5 / (double)v21;
    if ((unint64_t)v22 <= 1)
      v18 = 1;
    else
      v18 = (unint64_t)v22;
    v23 = *(_QWORD *)(v16 + 128);
    v19 = v23 / v18;
    v24 = v23 % v18;
    *(_QWORD *)(v16 + 240) = v18;
    *(_QWORD *)(v16 + 248) = v24;
    *(_QWORD *)(v16 + 256) = v19;
    if (v24)
      *(_QWORD *)(v16 + 256) = ++v19;
    else
      *(_QWORD *)(v16 + 248) = v18;
    v20 = a4;
    *(_BYTE *)(v16 + 264) = 1;
  }
  v25 = DerivedStorage[1];
  v26 = *(_QWORD *)(v16 + 96);
  v27 = v18;
  if (v25 / v26 == v19 - 1)
    v27 = *(_QWORD *)(v16 + 248);
  v28 = *(unsigned int *)(v16 + 64);
  v29 = *(_QWORD *)(v16 + 144);
  if (a2)
  {
    v30 = CFRetain(*(CFTypeRef *)(v16 + 24));
    v20 = a4;
    *a2 = v30;
  }
  if (a3)
    *a3 = 0;
  if (v20)
    *v20 = v29 + v25 / v26 * v26 * v28;
  if (a5)
    *a5 = v27 * v28;
  if (a6)
    *a6 = v27;
  if (v33)
    *v33 = v25 % v18;
  if (v34)
    *v34 = 1;
  if (a9)
    *a9 = 1;
  v31 = 0;
  if (a10)
    *a10 = 1;
LABEL_33:
  MEMORY[0x19402EA24](*(_QWORD *)(v16 + 16));
  return v31;
}

uint64_t FigAudioFileCursor_copyFormatDescription(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(CFTypeRef *)(*(_QWORD *)DerivedStorage + 104);
    if (v4)
      v4 = CFRetain(v4);
    *a2 = v4;
  }
  return 0;
}

uint64_t FigAudioFileCursor_stepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *DerivedStorage;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t AudioFilePacketAndFrameCount;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v6 = *DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(*DerivedStorage + 16));
  v7 = DerivedStorage[1];
  LODWORD(v8) = *(_DWORD *)(v6 + 68);
  if (v8 <= 1)
    v8 = 1;
  else
    v8 = v8;
  if (v7 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v8))
  {
    AudioFilePacketAndFrameCount = 4294954456;
    v9 = DerivedStorage[1];
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  v9 = v7 + a2;
  if (a2 < 1)
  {
    AudioFilePacketAndFrameCount = 0;
    v9 &= ~(v9 >> 63);
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (!GetAudioFilePacketAndFrameCount(v6) && *(_DWORD *)(v6 + 116) && *(_QWORD *)(v6 + 128) > v9)
  {
    AudioFilePacketAndFrameCount = 0;
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount(v6);
  if (!(_DWORD)AudioFilePacketAndFrameCount)
  {
    v9 = *(_QWORD *)(v6 + 128) - 1;
    if (!a3)
    {
LABEL_16:
      DerivedStorage[1] = v9;
      goto LABEL_17;
    }
LABEL_15:
    *a3 = v9 - v7;
    goto LABEL_16;
  }
LABEL_17:
  MEMORY[0x19402EA24](*(_QWORD *)(v6 + 16));
  return AudioFilePacketAndFrameCount;
}

uint64_t PacketToPTS(uint64_t a1, int64_t a2, CMTime *a3)
{
  uint64_t v5;
  CMTime v7;
  int64_t value;

  value = 0;
  v5 = MapPacketNumberToFrameNumber_0(a1, a2, &value);
  if (!(_DWORD)v5)
  {
    CMTimeMake(&v7, value, *(_DWORD *)(a1 + 88));
    *a3 = v7;
  }
  return v5;
}

uint64_t ensureAllocationOfPacketDescriptions(uint64_t a1, unsigned int a2)
{
  size_t v3;
  void *v4;
  __int16 v5;

  if (*(_QWORD *)(a1 + 160) >= (uint64_t)a2)
  {
    return 0;
  }
  else
  {
    v3 = a2;
    free(*(void **)(a1 + 168));
    v4 = malloc_type_calloc(v3, 0x10uLL, 0x1000040451B5BE8uLL);
    *(_QWORD *)(a1 + 168) = v4;
    if (v4)
    {
      v5 = 0;
      *(_QWORD *)(a1 + 160) = v3;
    }
    else
    {
      return (__int16)FigSignalErrorAt();
    }
  }
  return v5;
}

void appendAttributesToDictionary_Applier(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t FigTTMLDocumentWriterGetClassID()
{
  MEMORY[0x19402F294](&FigTTMLDocumentWriterGetClassID_sRegisterFigTTMLDocumentWriterBaseTypeOnce, figTTMLDocumentWriter_RegisterFigTTMLDocumentWriterBaseType);
  return sFigTTMLDocumentWriterClassID;
}

uint64_t figTTMLDocumentWriter_RegisterFigTTMLDocumentWriterBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigTTMLDocumentWriterGetTypeID()
{
  MEMORY[0x19402F294](&FigTTMLDocumentWriterGetClassID_sRegisterFigTTMLDocumentWriterBaseTypeOnce, figTTMLDocumentWriter_RegisterFigTTMLDocumentWriterBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigTTMLDocumentWriterSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigTTMLDocumentWriterCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigTTMLDocumentWriterInvalidate(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  if (!a1)
    return 4294954516;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigTTMLDocumentWriterStartElement(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigTTMLDocumentWriterEndElement(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigTTMLDocumentWriterAddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigTTMLDocumentWriterAddText(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD);

  v2 = FigCaptionDataCreate();
  if (!(_DWORD)v2)
  {
    v3 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v3)
      return 4294954514;
    return v3(a1, 0);
  }
  return v2;
}

uint64_t FigTTMLDocumentWriterSetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigTTMLDocumentWriterFlush(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

CFStringRef figTTMLDocumentWriter_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLDocumentWriter %p]"), a1);
}

uint64_t FigSampleCursorServiceGetClassID()
{
  MEMORY[0x19402F294](&FigSampleCursorServiceGetClassID_sRegisterFigSampleCursorServiceTypeOnce, RegisterFigSampleCursorServiceType);
  return sFigSampleCursorServiceClassID;
}

uint64_t RegisterFigSampleCursorServiceType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigSampleCursorServiceGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleCursorServiceGetClassID_sRegisterFigSampleCursorServiceTypeOnce, RegisterFigSampleCursorServiceType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleCursorGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleCursorGetClassID_sRegisterFigSampleCursorTypeOnce, RegisterFigSampleCursorType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleCursorUtilityGetBatchSampleTimingAndSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t (*v16)(uint64_t, CFTypeRef *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t (*v22)(CFTypeRef, _QWORD, uint64_t, _QWORD, _QWORD);
  CFTypeRef v23;
  uint64_t (*v24)(CFTypeRef, uint64_t);
  CFTypeRef v25;
  uint64_t (*v26)(CFTypeRef, uint64_t);
  uint64_t v27;
  CFTypeRef v28;
  uint64_t (*v29)(CFTypeRef, uint64_t);
  CFTypeRef v30;
  uint64_t (*v31)(CFTypeRef, uint64_t, uint64_t *);
  CFTypeRef v32;
  uint64_t v33;
  uint64_t (*v34)(CFTypeRef, uint64_t);
  uint64_t v35;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return FigSignalErrorAt();
  v16 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v16)
  {
    v17 = v16(a1, &cf);
    if (!(_DWORD)v17)
    {
      if (a2 < 1)
      {
        a2 = 0;
        if (a4)
LABEL_30:
          *a4 = a2;
LABEL_31:
        if (a5)
          *a5 = a2;
        v35 = 0;
        if (a7)
          *a7 = a2;
        goto LABEL_35;
      }
      v37 = a5;
      v38 = a7;
      v18 = 0;
      v19 = a6 + 48;
      v20 = a8;
      while (1)
      {
        if (a8)
        {
          v21 = cf;
          v22 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 144);
          if (!v22)
            goto LABEL_28;
          v17 = v22(v21, 0, v20, 0, 0);
          if ((_DWORD)v17)
            break;
        }
        if (a6)
        {
          v23 = cf;
          v24 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (!v24)
            goto LABEL_28;
          v17 = v24(v23, v19 - 24);
          if ((_DWORD)v17)
            break;
          if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48))
          {
            v25 = cf;
            v26 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (!v26)
              goto LABEL_28;
            v17 = v26(v25, v19);
            if ((_DWORD)v17)
              break;
          }
          else
          {
            v27 = MEMORY[0x1E0CA2E18];
            *(_OWORD *)v19 = *MEMORY[0x1E0CA2E18];
            *(_QWORD *)(v19 + 16) = *(_QWORD *)(v27 + 16);
          }
          v28 = cf;
          v29 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
          if (!v29)
            goto LABEL_28;
          v17 = v29(v28, v19 - 48);
          if ((_DWORD)v17)
            break;
        }
        v39 = 0;
        v30 = cf;
        v31 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
        if (!v31)
          goto LABEL_28;
        v17 = v31(v30, 1, &v39);
        if ((_DWORD)v17)
          break;
        if (v39 != 1
          || a3
          && (v32 = cf, v33 = *(_QWORD *)(CMBaseObjectGetVTable() + 16),
                        v33 == *(_QWORD *)(CMBaseObjectGetVTable() + 16))
          && (v34 = *(uint64_t (**)(CFTypeRef, uint64_t))(v33 + 32)) != 0
          && v34(v32, a3) == 1)
        {
          a2 = v18 + 1;
LABEL_39:
          a5 = v37;
          a7 = v38;
          if (a4)
            goto LABEL_30;
          goto LABEL_31;
        }
        ++v18;
        v19 += 72;
        v20 += 8;
        if (a2 == v18)
          goto LABEL_39;
      }
    }
    v35 = v17;
  }
  else
  {
LABEL_28:
    v35 = 4294954514;
  }
LABEL_35:
  if (cf)
    CFRelease(cf);
  return v35;
}

uint64_t FigSampleCursorUtilityGetMinimumUpcomingPresentationTime(uint64_t a1, uint64_t a2, CMTime *a3, CMTime *a4)
{
  uint64_t (*v8)(uint64_t, CFTypeRef *);
  uint64_t v9;
  CFTypeRef v10;
  unsigned int (*v11)(CFTypeRef, CMTime *);
  BOOL v12;
  CFTypeRef v13;
  unsigned int (*v14)(CFTypeRef, CMTime *);
  BOOL v15;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t (*v18)(CFTypeRef, uint64_t, uint64_t *);
  CFTypeRef v19;
  uint64_t v20;
  uint64_t (*v21)(CFTypeRef, uint64_t);
  CFTypeRef v22;
  unsigned int (*v23)(CFTypeRef, CMTime *);
  CFTypeRef v25;
  unsigned int (*v26)(CFTypeRef, CMTime *);
  CFTypeRef v28;
  uint64_t v29;
  unsigned int (*v30)(CFTypeRef, uint64_t, uint64_t);
  CMTime v32;
  CMTime time1;
  uint64_t v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CFTypeRef v39;

  v39 = 0;
  v38 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v37 = v38;
  v35 = v38;
  v34 = 0;
  if (!a1)
    goto LABEL_15;
  v8 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v8)
  {
    v9 = v8(a1, &v39);
    if ((_DWORD)v9)
    {
LABEL_16:
      v16 = v9;
      goto LABEL_48;
    }
    v10 = v39;
    v11 = *(unsigned int (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v11
      || (!v11(v10, &v37) ? (v12 = (v37.flags & 0x1D) == 1) : (v12 = 0),
          !v12
       || (v13 = v39,
           (v14 = *(unsigned int (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40)) == 0)
       || (!v14(v13, &v38) ? (v15 = (v38.flags & 0x1D) == 1) : (v15 = 0), !v15)))
    {
LABEL_15:
      v9 = FigSignalErrorAt();
      goto LABEL_16;
    }
    v36 = v38;
    v35 = v37;
    while (1)
    {
      v17 = v39;
      v18 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (!v18)
        break;
      v9 = v18(v17, 1, &v34);
      if ((_DWORD)v9)
        goto LABEL_16;
      if (v34 == 1)
      {
        if (!a2
          || (v19 = v39,
              v20 = *(_QWORD *)(CMBaseObjectGetVTable() + 16),
              v20 != *(_QWORD *)(CMBaseObjectGetVTable() + 16))
          || (v21 = *(uint64_t (**)(CFTypeRef, uint64_t))(v20 + 32)) == 0
          || v21(v19, a2) != 1)
        {
          v22 = v39;
          v23 = *(unsigned int (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (!v23)
            goto LABEL_15;
          if (v23(v22, &v38) || (v38.flags & 0x1D) != 1)
            goto LABEL_15;
          time1 = v38;
          v32 = v36;
          if (CMTimeCompare(&time1, &v32) < 0)
          {
            v36 = v38;
            v25 = v39;
            v26 = *(unsigned int (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (!v26)
              goto LABEL_15;
            if (v26(v25, &v35) || (v35.flags & 0x1D) != 1)
              goto LABEL_15;
          }
          if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
          {
            v28 = v39;
            v29 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v29 != *(_QWORD *)(CMBaseObjectGetVTable() + 16))
              continue;
            v30 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t))(v29 + 80);
            if (!v30 || !v30(v28, a1, 1))
              continue;
          }
        }
      }
      if (a3)
        *a3 = v36;
      v16 = 0;
      if (a4)
        *a4 = v35;
      goto LABEL_48;
    }
  }
  v16 = 4294954514;
LABEL_48:
  if (v39)
    CFRelease(v39);
  return v16;
}

uint64_t FigSampleCursorUtilityGetPresentationTimeRange(const void *a1, _OWORD *a2)
{
  __int128 v4;
  CFTypeID v5;
  uint64_t (*v6)(const void *, CMTime *);
  uint64_t v7;
  uint64_t (*v8)(const void *, CFTypeRef *);
  CFTypeRef v9;
  uint64_t (*v10)(CFTypeRef, uint64_t, uint64_t *);
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, CMTime *);
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v15;
  __int128 v16;
  CMTime v18;
  CMTime lhs;
  CMTime start;
  CMTimeRange v21;
  uint64_t v22;
  CMTime v23;
  CFTypeRef v24;
  CMTime v25;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(&v25, 0, sizeof(v25));
  value = 0;
  timescale = 0;
  v24 = 0;
  v23 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v22 = 0;
  v4 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v21.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v21.start.epoch = v4;
  *(_OWORD *)&v21.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v5 = CFGetTypeID(a1);
  MEMORY[0x19402F294](&FigSampleCursorGetClassID_sRegisterFigSampleCursorTypeOnce, RegisterFigSampleCursorType);
  if (v5 != CMBaseClassGetCFTypeID())
    goto LABEL_22;
  v6 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v6)
    goto LABEL_13;
  v7 = v6(a1, &v25);
  if ((_DWORD)v7)
    goto LABEL_23;
  if ((v25.flags & 0x1D) != 1)
  {
LABEL_22:
    v7 = FigSignalErrorAt();
    goto LABEL_23;
  }
  v8 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
    goto LABEL_13;
  v7 = v8(a1, &v24);
  if ((_DWORD)v7)
    goto LABEL_23;
  v9 = v24;
  v10 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v10)
    goto LABEL_13;
  v7 = v10(v9, 1, &v22);
  if ((_DWORD)v7)
  {
LABEL_23:
    v15 = v7;
    goto LABEL_14;
  }
  if (v22 != 1)
  {
    value = *MEMORY[0x1E0CA2E30];
    flags = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 12);
    timescale = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 8);
    epoch = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
    goto LABEL_20;
  }
  v11 = v24;
  v12 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v12)
  {
LABEL_13:
    v15 = 4294954514;
    goto LABEL_14;
  }
  v7 = v12(v11, &v23);
  if ((_DWORD)v7)
    goto LABEL_23;
  lhs = v23;
  v18 = v25;
  CMTimeSubtract(&start, &lhs, &v18);
  value = start.value;
  flags = start.flags;
  timescale = start.timescale;
  epoch = start.epoch;
LABEL_20:
  if ((flags & 0x1D) != 1 && (flags & 5) != 5)
    goto LABEL_22;
  start = v25;
  lhs.value = value;
  lhs.timescale = timescale;
  lhs.flags = flags;
  lhs.epoch = epoch;
  CMTimeRangeMake(&v21, &start, &lhs);
  v15 = 0;
LABEL_14:
  if (a2)
  {
    v16 = *(_OWORD *)&v21.start.epoch;
    *a2 = *(_OWORD *)&v21.start.value;
    a2[1] = v16;
    a2[2] = *(_OWORD *)&v21.duration.timescale;
  }
  if (v24)
    CFRelease(v24);
  return v15;
}

CFStringRef FigSampleCursorServiceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleCursorService %p]"), a1);
}

CFStringRef FigSampleCursorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleCursor %p]"), a1);
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigBufferedAirPlayGlobalRoutingRegistryStartServer_block_invoke;
  block[3] = &unk_1E2F86B78;
  block[4] = &v3;
  if (FigBufferedAirPlayGlobalRoutingRegistryStartServer_once != -1)
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryStartServer_once, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t globalRoutingRegistry_handleClientMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t uint64;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  uint64 = xpc_dictionary_get_uint64(a2, "RemoteClientID");
  if (!uint64)
    return 4294951145;
  v5 = uint64;
  if (FigXPCServerGetConnectionRefcon())
    return 4294951138;
  v6 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  v7 = v6;
  if (!v6)
  {
    v8 = 4294951146;
    goto LABEL_6;
  }
  *v6 = v5;
  v8 = FigXPCServerSetConnectionRefcon();
  if (!(_DWORD)v8)
    return 4294951138;
LABEL_6:
  globalRoutingRegistry_disposeConnectionState(v7);
  return v8;
}

void globalRoutingRegistry_disposeConnectionState(uint64_t *a1)
{
  uint64_t SharedInstance;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  if (a1)
  {
    SharedInstance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    if (SharedInstance)
    {
      v3 = SharedInstance;
      v4 = *a1;
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v5)
        v5(v3, v4);
    }
    free(a1);
  }
}

uint64_t FigSnippetEditCursorServiceSetTrackDuration(uint64_t a1, uint64_t a2)
{
  CMTime *DerivedStorage;
  CMTimeEpoch v4;

  DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[3].epoch);
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)&DerivedStorage->value = *(_OWORD *)a2;
  DerivedStorage->epoch = v4;
  snippet_updateSnippetCount(DerivedStorage);
  MEMORY[0x19402EF04](DerivedStorage[3].epoch);
  return 0;
}

uint64_t FigSnippetEditCursorServiceSetSnippetDurationAndStep(uint64_t a1, CMTime *a2, CMTime *a3, char a4)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v8;
  uint64_t v9;
  __int128 v10;
  CMTimeEpoch v11;
  __int128 v12;
  CMTimeEpoch epoch;
  __int128 v15;
  CMTime time2;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a2->flags & 0x1D) != 1)
    goto LABEL_5;
  if ((a3->flags & 0x1D) != 1)
    goto LABEL_5;
  time1 = *a2;
  v15 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v8;
  if (CMTimeCompare(&time1, &time2) < 1
    || (time1 = *a3, *(_OWORD *)&time2.value = v15, time2.epoch = v8, CMTimeCompare(&time1, &time2) <= 0))
  {
LABEL_5:
    v9 = MEMORY[0x1E0CA2E18];
    v10 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
    v11 = *(_QWORD *)(v9 + 16);
    a2->epoch = v11;
    *(_OWORD *)&a3->value = v10;
    a3->epoch = v11;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  v12 = *(_OWORD *)&a2->value;
  *(_QWORD *)(DerivedStorage + 40) = a2->epoch;
  *(_OWORD *)(DerivedStorage + 24) = v12;
  epoch = a3->epoch;
  *(_OWORD *)(DerivedStorage + 48) = *(_OWORD *)&a3->value;
  *(_QWORD *)(DerivedStorage + 64) = epoch;
  *(_BYTE *)(DerivedStorage + 72) = a4;
  snippet_updateSnippetCount((CMTime *)DerivedStorage);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  return 0;
}

uint64_t FigSnippetEditCursorServiceCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  FigEditCursorServiceGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)DerivedStorage = *(_OWORD *)a2;
    *(_QWORD *)(DerivedStorage + 16) = v7;
    v8 = MEMORY[0x1E0CA2E18];
    v9 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E0CA2E18];
    v10 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(DerivedStorage + 40) = v10;
    *(_OWORD *)(DerivedStorage + 48) = v9;
    *(_QWORD *)(DerivedStorage + 64) = v10;
    *(_BYTE *)(DerivedStorage + 72) = 1;
    *(_QWORD *)(DerivedStorage + 80) = 1;
    *(_QWORD *)(DerivedStorage + 88) = FigSimpleMutexCreate();
    *a3 = 0;
  }
  return v5;
}

uint64_t snippetCursorService_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 88);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  return result;
}

__CFString *snippetCursorService_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  __int128 v4;
  Float64 Seconds;
  Float64 v6;
  Float64 v7;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSnippetEditCursorService %p>"), a1);
  v4 = *(_OWORD *)DerivedStorage;
  time.epoch = *(_QWORD *)(DerivedStorage + 16);
  *(_OWORD *)&time.value = v4;
  Seconds = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, CFSTR("{ trackDuration %1.3f"), *(_QWORD *)&Seconds);
  if ((*(_DWORD *)(DerivedStorage + 36) & 0x1D) == 1 && (*(_DWORD *)(DerivedStorage + 60) & 0x1D) == 1)
  {
    time = *(CMTime *)(DerivedStorage + 24);
    v6 = CMTimeGetSeconds(&time);
    CFStringAppendFormat(Mutable, 0, CFSTR(", snippetDuration %1.3f"), *(_QWORD *)&v6);
    time = *(CMTime *)(DerivedStorage + 48);
    v7 = CMTimeGetSeconds(&time);
    CFStringAppendFormat(Mutable, 0, CFSTR(", snippetStep %1.3f"), *(_QWORD *)&v7);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(" }"));
  return Mutable;
}

uint64_t snippetCursorService_CreateCursorAtTrackTime(const void *a1, CMTime *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  _QWORD *v8;
  int32_t v9;
  CMTimeValue v10;
  CMTimeValue v11;
  CMTime v13;
  CMTime v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    v8 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *v8 = a1;
    CFRetain(a1);
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
    if ((*(_DWORD *)(DerivedStorage + 60) & 0x1D) == 1)
    {
      memset(&v14, 0, sizeof(v14));
      v9 = *(_DWORD *)(DerivedStorage + 56);
      v13 = *a2;
      CMTimeConvertScale(&v14, &v13, v9, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
      v10 = v14.value / *(uint64_t *)(DerivedStorage + 48);
      if (v10 < 0)
      {
        v10 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(DerivedStorage + 80);
        if (v10 >= v11)
          v10 = v11 - 1;
      }
      v8[1] = v10;
    }
    else
    {
      v8[1] = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
    *a3 = v15;
  }
  return v7;
}

void snippetCursor_Finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *snippetCursor_CopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSnippetEditCursor %p>{ service %p, editIndex %d }"), a1, *DerivedStorage, DerivedStorage[1]);
  return Mutable;
}

uint64_t snippetCursor_Copy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    v6 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v7 = *(const void **)DerivedStorage;
    v8 = *(_QWORD *)(DerivedStorage + 8);
    *v6 = *(_QWORD *)DerivedStorage;
    v6[1] = v8;
    CFRetain(v7);
    *a2 = 0;
  }
  return v5;
}

uint64_t snippetCursor_Step(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 88));
  v5 = *(_QWORD *)(v4 + 80);
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 88));
  v6 = *(_QWORD *)(DerivedStorage + 8) + a2;
  v7 = v5 - 1;
  if (v6 >= v5)
    v8 = -12520;
  else
    v8 = 0;
  if (v6 < v5)
    v7 = *(_QWORD *)(DerivedStorage + 8) + a2;
  if (v6 >= 0)
    result = v8;
  else
    result = 4294954776;
  if (v6 >= 0)
    v10 = v7;
  else
    v10 = 0;
  *(_QWORD *)(DerivedStorage + 8) = v10;
  return result;
}

uint64_t snippetCursor_GetEditSegment(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  __int128 v7;
  CMTimeEpoch epoch;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  CMTime rhs;
  CMTime time;
  CMTime lhs;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 88));
  if ((*(_DWORD *)(v4 + 60) & 0x1D) == 1)
  {
    v5 = *(_QWORD *)(DerivedStorage + 8);
    if (v5 >> 31)
    {
      v9 = FigSignalErrorAt();
    }
    else
    {
      v6 = (_OWORD *)(a2 + 48);
      time = *(CMTime *)(v4 + 48);
      CMTimeMultiply(&lhs, &time, v5);
      *(CMTime *)(a2 + 48) = lhs;
      v7 = *(_OWORD *)(v4 + 48);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(v4 + 64);
      *(_OWORD *)(a2 + 72) = v7;
      if (*(_BYTE *)(v4 + 72))
      {
        lhs = *(CMTime *)(v4 + 48);
        time = *(CMTime *)(v4 + 24);
        CMTimeSubtract(&rhs, &lhs, &time);
        *(_OWORD *)&time.value = *v6;
        time.epoch = *(_QWORD *)(a2 + 64);
        CMTimeAdd(&lhs, &time, &rhs);
        *(_OWORD *)a2 = *(_OWORD *)&lhs.value;
        epoch = lhs.epoch;
      }
      else
      {
        *(_OWORD *)a2 = *v6;
        epoch = *(_QWORD *)(a2 + 64);
      }
      *(_QWORD *)(a2 + 16) = epoch;
      v9 = 0;
      v15 = *(_OWORD *)(v4 + 24);
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(v4 + 40);
      *(_OWORD *)(a2 + 24) = v15;
    }
  }
  else
  {
    v9 = 0;
    v10 = MEMORY[0x1E0CA2E68];
    v11 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)(a2 + 48) = *MEMORY[0x1E0CA2E68];
    v12 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(a2 + 64) = v12;
    v13 = *(_OWORD *)v4;
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(v4 + 16);
    *(_OWORD *)(a2 + 72) = v13;
    *(_QWORD *)(a2 + 16) = v12;
    *(_OWORD *)a2 = v11;
    v14 = *(_QWORD *)(v4 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v4;
    *(_QWORD *)(a2 + 40) = v14;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 88));
  return v9;
}

uint64_t FigCaptionRendererOutputGetClassID()
{
  MEMORY[0x19402F294](&FigCaptionRendererOutputGetClassID_sRegisterFigCaptionRendererOutputTypeOnce, RegisterFigCaptionRendererOutputType);
  return sFigCaptionRendererOutputClassID;
}

uint64_t RegisterFigCaptionRendererOutputType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigCaptionRendererOutputCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionRendererOutput %p]"), a1);
}

uint64_t FigStreamingAssetLoaderRequestSessionKeys(_QWORD *a1)
{
  const __CFAllocator *AllocatorForMedia;
  CFIndex v3;
  CFIndex v4;
  CFIndex Count;
  const void *ValueAtIndex;
  char v7;
  int KeySystem;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD *, uint64_t, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  CFTypeRef v21[3];
  CFTypeRef cf;
  CFArrayRef theArray;

  cf = 0;
  theArray = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v3 = FigStreamingAssetLoaderCopyProperty((uint64_t)a1, (uint64_t)CFSTR("assetProperty_HLSSessionKeys"), AllocatorForMedia, &theArray);
  if ((_DWORD)v3)
  {
    v18 = v3;
  }
  else
  {
    v4 = 0;
    while (1)
    {
      Count = (CFIndex)theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (v4 >= Count)
      {
        v18 = 0;
        goto LABEL_18;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
      v7 = FigContentKeySpecifierGetKeySystem((uint64_t)ValueAtIndex) == 1
        && FigContentKeySpecifierGetEncryptionMethod((uint64_t)ValueAtIndex) == 3;
      KeySystem = FigContentKeySpecifierGetKeySystem((uint64_t)ValueAtIndex);
      v9 = FigGetAllocatorForMedia();
      v10 = FigContentKeyRequestParamsCreate(v9, ValueAtIndex, v7, 0, 0, 0, 0, 0, 0, 1, 1, 0, (uint64_t *)&cf);
      if ((_DWORD)v10)
      {
LABEL_15:
        v18 = v10;
        goto LABEL_18;
      }
      v11 = a1[7];
      v12 = cf;
      v13 = a1[4];
      v14 = a1[5];
      v15 = a1[11];
      v16 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v16)
        break;
      if (KeySystem == 1)
        v17 = 1;
      else
        v17 = 2;
      v10 = v16(v11, v12, v17, 1, v13, v14, v21, a1, v15, &v20);
      ++v4;
      if ((_DWORD)v10)
        goto LABEL_15;
    }
    v18 = 4294954514;
LABEL_18:
    if (cf)
      CFRelease(cf);
  }
  if (theArray)
    CFRelease(theArray);
  return v18;
}

CFIndex FigStreamingAssetLoaderCopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, _QWORD *a4)
{
  const void *Alternates;
  void *DictionaryRepresentation;
  void *v9;
  const __CFArray *v10;
  CFNumberRef v11;
  BOOL v12;
  unsigned int v13;
  CFIndex result;
  const __CFArray *SessionDataSpecifiers;
  __CFArray *Mutable;
  __CFArray *v17;
  const __CFArray *v18;
  const __CFArray *v19;
  int HasEndTag;
  double PlaylistActiveDurationSecs;
  __CFError *v22;
  __CFError *v23;
  const __CFArray *ContentKeySpecifiers;
  const __CFArray *v25;
  void **v26;
  double MinimumTimeOffsetFromLive;
  CFDictionaryRef v28;
  CMTime v29;
  CMTime time;
  CMTime v31;
  CGSize v32;

  if (!a4)
    return FigSignalErrorAt();
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    sapl_loadMultivariantPlaylist(a1);
    if (*(_BYTE *)(a1 + 72))
      return 4294954513;
    if (*(_QWORD *)(a1 + 160))
    {
      if (FigCFEqual())
      {
        Alternates = (const void *)FigMultivariantPlaylistGetAlternates(*(_QWORD *)(a1 + 160));
        if (!Alternates)
          goto LABEL_75;
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        Alternates = (const void *)FigMultivariantPlaylistGetContentKeySpecifiers(*(_QWORD *)(a1 + 160));
        if (!Alternates)
          goto LABEL_75;
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        Alternates = (const void *)FigMultivariantPlaylistGetMediaSelectionArray(*(_QWORD *)(a1 + 160));
        if (Alternates)
        {
LABEL_19:
          DictionaryRepresentation = (void *)CFRetain(Alternates);
LABEL_20:
          v9 = DictionaryRepresentation;
LABEL_76:
          result = 0;
LABEL_77:
          *a4 = v9;
          return result;
        }
LABEL_75:
        v9 = 0;
        goto LABEL_76;
      }
      if (FigCFEqual())
      {
        v10 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(*(_QWORD *)(a1 + 160));
        v11 = FigStreamAlternateCopyNominalVideoFrameRate(v10);
LABEL_23:
        *a4 = v11;
        v12 = v11 == 0;
        v13 = -12783;
        goto LABEL_24;
      }
      if (FigCFEqual())
      {
        SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(_QWORD *)(a1 + 160));
        if (SessionDataSpecifiers && CFArrayGetCount(SessionDataSpecifiers) >= 1)
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
          if (Mutable)
          {
            v17 = Mutable;
            CFArrayAppendValue(Mutable, CFSTR("com.apple.quicktime.HLS"));
            *a4 = CFRetain(v17);
            CFRelease(v17);
            return 0;
          }
          return FigSignalErrorAt();
        }
      }
      else
      {
        if (FigCFEqual())
        {
          v18 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(*(_QWORD *)(a1 + 160));
          v11 = FigStreamAlternateCopyAvailableVideoDynamicRanges(v18);
          goto LABEL_23;
        }
        result = FigCFEqual();
        if (!(_DWORD)result)
          return result;
        *(_OWORD *)&v31.value = *MEMORY[0x1E0C9D820];
        v19 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(*(_QWORD *)(a1 + 160));
        if (FigStreamAlternateCopyMaximumVideoResolution(v19, (double *)&v31.value))
        {
          *(_QWORD *)&v32.width = v31.value;
          v32.height = *(CGFloat *)&v31.timescale;
          DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v32);
          goto LABEL_20;
        }
      }
      return 4294954513;
    }
    v22 = *(__CFError **)(a1 + 176);
    if (!v22)
      return 4294954513;
    return CFErrorGetCode(v22);
  }
  if (FigCFEqual() || FigCFEqual() || FigCFEqual())
  {
    sapl_loadMultivariantPlaylist(a1);
    result = sapl_loadMediaPlaylist(a1);
    if ((_DWORD)result)
      return result;
    if (*(_QWORD *)(a1 + 184))
    {
      if (FigCFEqual())
      {
        v31 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
        HasEndTag = FigMediaPlaylistHasEndTag(*(_QWORD *)(a1 + 184));
        PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(_QWORD *)(a1 + 184));
        if (HasEndTag)
        {
          CMTimeMakeWithSeconds(&v31, PlaylistActiveDurationSecs, 1000000);
        }
        else if (PlaylistActiveDurationSecs <= 0.0)
        {
          return 4294954513;
        }
        time = v31;
        DictionaryRepresentation = CMTimeCopyAsDictionary(&time, a3);
        goto LABEL_20;
      }
      if (FigCFEqual())
      {
        ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(*(_QWORD *)(a1 + 184));
        if (ContentKeySpecifiers && CFArrayGetCount(ContentKeySpecifiers) > 0
          || (v25 = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers(*(_QWORD *)(a1 + 160))) != 0
          && CFArrayGetCount(v25) >= 1)
        {
          result = 0;
          v26 = (void **)MEMORY[0x1E0C9AE50];
        }
        else
        {
          result = 0;
          v26 = (void **)MEMORY[0x1E0C9AE40];
        }
        v9 = *v26;
        goto LABEL_77;
      }
      result = FigCFEqual();
      if (!(_DWORD)result)
        return result;
      if (FigMediaPlaylistGetTargetDuration(*(_QWORD *)(a1 + 184)))
      {
        MinimumTimeOffsetFromLive = sapl_getMinimumTimeOffsetFromLive(a1);
        CMTimeMakeWithSeconds(&v29, MinimumTimeOffsetFromLive, 1000000);
        v28 = CMTimeCopyAsDictionary(&v29, a3);
        *a4 = v28;
        v12 = v28 == 0;
        v13 = -12786;
LABEL_24:
        if (v12)
          return v13;
        else
          return 0;
      }
      *a4 = 0;
      return 4294954513;
    }
    if (*(_QWORD *)(a1 + 160) || (v23 = *(__CFError **)(a1 + 176)) == 0)
    {
      v23 = *(__CFError **)(a1 + 200);
      if (!v23)
        return 4294954513;
    }
    result = CFErrorGetCode(v23);
    if (!(_DWORD)result)
      return 4294954513;
  }
  else
  {
    if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual())
    {
      result = FigCFEqual();
      if (!(_DWORD)result)
        return result;
      Alternates = *(const void **)(a1 + 96);
      if (Alternates)
        goto LABEL_19;
      return 4294954513;
    }
    sapl_loadMultivariantPlaylist(a1);
    result = sapl_loadMediaPlaylist(a1);
    if (!(_DWORD)result)
    {
      result = sapl_loadSessionData(a1);
      if (!(_DWORD)result)
      {
        if (*(_QWORD *)(a1 + 208) || *(_QWORD *)(a1 + 240))
        {
          if (FigCFEqual())
          {
            if (*(_QWORD *)(a1 + 208))
            {
              Alternates = *(const void **)(a1 + 232);
              if (Alternates)
                goto LABEL_19;
              goto LABEL_75;
            }
          }
          else if (FigCFEqual())
          {
            Alternates = *(const void **)(a1 + 208);
            if (Alternates)
              goto LABEL_19;
          }
          else
          {
            result = FigCFEqual();
            if (!(_DWORD)result)
              return result;
            Alternates = *(const void **)(a1 + 240);
            if (Alternates)
              goto LABEL_19;
          }
          return 4294954513;
        }
        v22 = *(__CFError **)(a1 + 224);
        if (!v22)
          return 4294954513;
        return CFErrorGetCode(v22);
      }
    }
  }
  return result;
}

intptr_t sapl_loadMultivariantPlaylist(uint64_t a1)
{
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 168))
    JUMPOUT(0x19402EF04);
  if (!*(_QWORD *)(a1 + 120))
  {
    *(_DWORD *)(a1 + 136) = 1;
    sapl_loadPlaylist(a1, *(const void **)(a1 + 16), 1);
  }
  ++*(_QWORD *)(a1 + 152);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 144), 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t sapl_loadMediaPlaylist(uint64_t a1)
{
  uint64_t v2;
  const __CFArray *Alternates;
  const __CFArray *v4;
  uint64_t ValueAtIndex;
  CFIndex v6;
  const void *v7;
  const void *PlaylistAlternateURL;
  uint64_t v9;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 192) || *(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 160)) == 0)
  {
    v9 = 0;
    goto LABEL_19;
  }
  Alternates = (const __CFArray *)FigMultivariantPlaylistGetAlternates(v2);
  if (!*(_QWORD *)(a1 + 120))
  {
    if (*(_QWORD *)(a1 + 160))
    {
      v4 = Alternates;
      if (Alternates)
      {
        if (CFArrayGetCount(Alternates) >= 1)
        {
          ValueAtIndex = FigCFArrayGetValueAtIndex();
          if (CFArrayGetCount(v4) >= 1)
          {
            v6 = 0;
            while (1)
            {
              v7 = CFArrayGetValueAtIndex(v4, v6);
              if (!FigAlternateIsIFrameOnly((uint64_t)v7))
                break;
              if (++v6 >= CFArrayGetCount(v4))
                goto LABEL_14;
            }
            ValueAtIndex = (uint64_t)v7;
          }
LABEL_14:
          if (ValueAtIndex)
          {
            *(_DWORD *)(a1 + 136) = 2;
            PlaylistAlternateURL = (const void *)FigAlternateGetPlaylistAlternateURL(ValueAtIndex);
            sapl_loadPlaylist(a1, PlaylistAlternateURL, 0);
            goto LABEL_16;
          }
        }
      }
    }
    v9 = FigSignalErrorAt();
LABEL_19:
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    return v9;
  }
LABEL_16:
  ++*(_QWORD *)(a1 + 152);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 144), 0xFFFFFFFFFFFFFFFFLL);
  return 0;
}

double sapl_getMinimumTimeOffsetFromLive(uint64_t a1)
{
  double PartTargetDuration;
  double v3;
  uint64_t LastValue;
  double TimeInSeconds;

  if (FigMediaPlaylistDoesServerSupportsBlockingReload(*(_QWORD *)(a1 + 184))
    && FigMediaPlaylistGetPartTargetDuration(*(_QWORD *)(a1 + 184)) > 0.0)
  {
    PartTargetDuration = FigMediaPlaylistGetPartTargetDuration(*(_QWORD *)(a1 + 184));
    v3 = PartTargetDuration + PartTargetDuration;
    if (FigMediaPlaylistGetHoldBackDuration(*(_QWORD *)(a1 + 184)) <= PartTargetDuration + PartTargetDuration)
      return v3;
  }
  else
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(*(_QWORD *)(a1 + 184));
    LastValue = FigCFArrayGetLastValue();
    if (LastValue && (TimeInSeconds = FigMediaSegmentSpecifierGetTimeInSeconds(LastValue), TimeInSeconds != 0.0))
      v3 = TimeInSeconds + (double)FigMediaPlaylistGetTargetDuration(*(_QWORD *)(a1 + 184)) * 2.0;
    else
      v3 = (double)FigMediaPlaylistGetTargetDuration(*(_QWORD *)(a1 + 184)) * 3.0;
    if (v3 >= FigMediaPlaylistGetHoldBackDuration(*(_QWORD *)(a1 + 184)))
      return v3;
  }
  return FigMediaPlaylistGetHoldBackDuration(*(_QWORD *)(a1 + 184));
}

uint64_t sapl_loadSessionData(uint64_t a1)
{
  uint64_t AllocatorForMedia;
  uint64_t *v3;
  uint64_t Queue;
  int v5;
  CFIndex v6;
  const CFArrayCallBacks *v7;
  const __CFArray *SessionDataSpecifiers;
  const __CFArray *v9;
  const void *ValueAtIndex;
  const __CFAllocator *v11;
  CFMutableArrayRef Mutable;
  void *Identifier;
  const void *v14;
  const void *Language;
  uint64_t v16;
  void *value;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  value = 0;
  if (*(_BYTE *)(a1 + 216) || *(_BYTE *)(a1 + 72))
  {
LABEL_20:
    v16 = 0;
  }
  else
  {
    AllocatorForMedia = FigGetAllocatorForMedia();
    v3 = (uint64_t *)(a1 + 128);
    Queue = FigMediaRequestSchedulerCreate(AllocatorForMedia, *(const void **)(a1 + 80), *(const void **)(a1 + 32), *(const void **)(a1 + 40), *(const void **)(a1 + 112), 0, *(const void **)(a1 + 48), *(const void **)(a1 + 104), *(const void **)(a1 + 96), a1, (uint64_t)&sapl_loadSessionData_outputCallbacks, *(NSObject **)(a1 + 88), (uint64_t *)(a1 + 128));
    if ((_DWORD)Queue)
    {
LABEL_25:
      v16 = Queue;
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(_QWORD *)(a1 + 160));
        if (SessionDataSpecifiers)
          SessionDataSpecifiers = (const __CFArray *)CFArrayGetCount(SessionDataSpecifiers);
        if (v6 >= (uint64_t)SessionDataSpecifiers)
          break;
        v9 = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(_QWORD *)(a1 + 160));
        ValueAtIndex = CFArrayGetValueAtIndex(v9, v6);
        if (FigSessionDataSpecifierGetURL((uint64_t)ValueAtIndex))
        {
          Queue = FigMediaRequestSchedulerAddResourceToReadQueue(*v3, ValueAtIndex);
          if ((_DWORD)Queue)
            goto LABEL_25;
          v5 = 1;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 208))
          {
            v11 = (const __CFAllocator *)FigGetAllocatorForMedia();
            Mutable = CFArrayCreateMutable(v11, 0, v7);
            *(_QWORD *)(a1 + 208) = Mutable;
            if (!Mutable)
            {
              Queue = FigSignalErrorAt();
              goto LABEL_25;
            }
          }
          Identifier = (void *)FigSessionDataSpecifierGetIdentifier((uint64_t)ValueAtIndex);
          v14 = (const void *)FigSessionDataSpecifierGetValue((uint64_t)ValueAtIndex);
          Language = (const void *)FigSessionDataSpecifierGetLanguage((uint64_t)ValueAtIndex);
          Queue = FigHLSSessionDataCopyMetadataEntry(Identifier, v14, Language, 0, (CFMutableDictionaryRef *)&value);
          if ((_DWORD)Queue)
            goto LABEL_25;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 208), value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
        ++v6;
      }
      if (!v5)
        goto LABEL_20;
      v16 = FigMediaRequestSchedulerStart(*v3);
      if (!(_DWORD)v16)
      {
        ++*(_QWORD *)(a1 + 152);
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 144), 0xFFFFFFFFFFFFFFFFLL);
        MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
      }
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  if (value)
    CFRelease(value);
  return v16;
}

uint64_t FigStreamingAssetPropertyLoaderCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, _QWORD *a9)
{
  uint64_t Instance;
  _QWORD *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  NSObject *v21;
  uint64_t v22;
  __int128 context;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a9)
    return FigSignalErrorAt();
  context = xmmword_1E2F86D68;
  if (sapl_getTypeID_once != -1)
    dispatch_once_f(&sapl_getTypeID_once, &context, (dispatch_function_t)spptUtil_registerClass_0);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v13 = (_QWORD *)Instance;
  if (a2)
    v14 = CFRetain(a2);
  else
    v14 = 0;
  v13[2] = v14;
  if (a3)
    v15 = CFRetain(a3);
  else
    v15 = 0;
  v13[3] = v15;
  if (a4)
    v16 = CFRetain(a4);
  else
    v16 = 0;
  v13[4] = v16;
  v17 = a5;
  if (a5)
    v17 = CFRetain(a5);
  v13[5] = v17;
  v18 = a6;
  if (a6)
    v18 = CFRetain(a6);
  v13[6] = v18;
  v19 = a7;
  if (a7)
    v19 = CFRetain(a7);
  v13[7] = v19;
  v20 = a8;
  if (a8)
    v20 = CFRetain(a8);
  v13[12] = v20;
  v13[8] = FigSimpleMutexCreate();
  v21 = FigHTTPSchedulerRetain(0);
  v13[11] = v21;
  if (v21)
  {
    v22 = 0;
    v13[18] = dispatch_semaphore_create(0);
    *a9 = v13;
  }
  else
  {
    v22 = FigSignalErrorAt();
    CFRelease(v13);
  }
  return v22;
}

void sapl_loadPlaylist(uint64_t a1, const void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t);
  int v14;
  __CFDictionary *v15;
  const __CFAllocator *v16;
  __CFDictionary *Mutable;
  const __CFAllocator *v18;
  int v19;
  uint64_t v20;
  void (*v21)(uint64_t);

  v6 = a1 + 80;
  if (!*(_QWORD *)(a1 + 80))
  {
    v7 = *(_QWORD *)(a1 + 32);
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    if (v7)
      MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, *(CFDictionaryRef *)(a1 + 32));
    else
      MutableCopy = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v10 = MutableCopy;
    if (MutableCopy)
    {
      FigCFDictionarySetInt64();
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 88);
      v13 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 40);
      if (v13)
        v14 = v13(v11, v12, v10, v6);
      else
        v14 = -12782;
      CFRelease(v10);
      if (v14)
LABEL_27:
        JUMPOUT(0x19402EF04);
    }
    else if (FigSignalErrorAt())
    {
      goto LABEL_27;
    }
  }
  if (!*(_QWORD *)(a1 + 104))
    *(_QWORD *)(a1 + 104) = FigCopyCommonMemoryPool();
  if (*(_QWORD *)(a1 + 96))
  {
    v15 = 0;
    goto LABEL_16;
  }
  v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    goto LABEL_27;
  }
  v15 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("FSC_Backing"), CFSTR("FSC_MemoryBacking"));
  v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (FigStreamingCacheCreate(v18, *(const __CFURL **)(a1 + 16), v15, (uint64_t *)(a1 + 96)))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
LABEL_20:
    CFRelease(v15);
    return;
  }
LABEL_16:
  v19 = FigGetAllocatorForMedia();
  if (!FigMediaRequestCreateForPlaylist(v19, a2, *(const void **)(a1 + 96), a3, *(const void **)(a1 + 80), *(const void **)(a1 + 32), *(const void **)(a1 + 40), 0, 0, 0, 0, *(const void **)(a1 + 48), *(const void **)(a1 + 104), a1, (uint64_t)&sapl_loadPlaylist_outputCallbacks, *(NSObject **)(a1 + 88), (_QWORD *)(a1 + 120)))
  {
    v20 = *(_QWORD *)(a1 + 120);
    v21 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v21)
      v21(v20);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  if (v15)
    goto LABEL_20;
}

void sapl_playlistDidProduceDataOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, OpaqueCMBlockBuffer *a6, int a7)
{
  int v10;
  int v11;
  CFTypeRef v12;
  int v13;
  const __CFAllocator *AllocatorForMedia;
  CFErrorRef v15;
  const void *v16;
  uint64_t v17;
  CFTypeRef cf;
  CFTypeRef v19;
  int v20;

  v20 = 0;
  v19 = 0;
  cf = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 64));
  if (!a7)
  {
    v11 = FigSignalErrorAt();
    if (!v11)
      goto LABEL_21;
LABEL_19:
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v15 = CFErrorCreate(AllocatorForMedia, CFSTR("CoreMediaErrorDomain"), v11, 0);
    sapl_playlistDidFail((uint64_t)v15, a2, v15);
  }
  v10 = FigStreamPlaylistParse(a6, *(const __CFURL **)(a2 + 16), *(const __CFURL **)(a2 + 16), &v20, 0, 1, 1, 1, 0, 0, 0, 0, (uint64_t *)&v19, &cf);
  if (v10)
  {
    v11 = v10;
    goto LABEL_19;
  }
  if (v19)
  {
    v11 = 0;
    *(_QWORD *)(a2 + 160) = CFRetain(v19);
  }
  else
  {
    v12 = cf;
    if (cf)
    {
      if (*(_DWORD *)(a2 + 136) == 1)
        *(_BYTE *)(a2 + 72) = 1;
      v11 = 0;
      *(_QWORD *)(a2 + 184) = CFRetain(v12);
    }
    else
    {
      v11 = FigSignalErrorAt();
    }
  }
  v13 = *(_DWORD *)(a2 + 136);
  if (v13 == 2)
  {
    LOBYTE(v13) = 1;
    goto LABEL_15;
  }
  if (v13 != 1)
  {
    FigSignalErrorAt();
    goto LABEL_18;
  }
  *(_BYTE *)(a2 + 168) = 1;
  if (*(_BYTE *)(a2 + 72))
  {
LABEL_15:
    *(_BYTE *)(a2 + 192) = v13;
    if (v11)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_18:
  if (v11)
    goto LABEL_19;
LABEL_21:
  v16 = *(const void **)(a2 + 120);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a2 + 120) = 0;
  }
  if (*(uint64_t *)(a2 + 152) >= 1)
  {
    v17 = 0;
    do
    {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 144));
      ++v17;
    }
    while (v17 < *(_QWORD *)(a2 + 152));
  }
  *(_QWORD *)(a2 + 152) = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a2 + 64));
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
}

void sapl_playlistDidFail(uint64_t a1, uint64_t a2, const void *a3)
{
  int v5;
  CFTypeRef v6;
  CFTypeRef v7;
  int v8;
  const void *v9;
  uint64_t v10;

  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 64));
  v5 = *(_DWORD *)(a2 + 136);
  if (v5 == 2)
  {
    if (a3)
      v7 = CFRetain(a3);
    else
      v7 = 0;
    *(_QWORD *)(a2 + 200) = v7;
  }
  else if (v5 == 1)
  {
    if (a3)
      v6 = CFRetain(a3);
    else
      v6 = 0;
    *(_QWORD *)(a2 + 176) = v6;
  }
  else
  {
    FigSignalErrorAt();
  }
  v8 = *(_DWORD *)(a2 + 136);
  if (v8 == 2)
  {
    *(_BYTE *)(a2 + 192) = 1;
  }
  else if (v8 == 1)
  {
    *(_BYTE *)(a2 + 168) = 1;
  }
  else
  {
    FigSignalErrorAt();
  }
  v9 = *(const void **)(a2 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a2 + 120) = 0;
  }
  if (*(uint64_t *)(a2 + 152) >= 1)
  {
    v10 = 0;
    do
    {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 144));
      ++v10;
    }
    while (v10 < *(_QWORD *)(a2 + 152));
  }
  *(_QWORD *)(a2 + 152) = 0;
  JUMPOUT(0x19402EF04);
}

void sapl_sessionDataSchedulerDidProduceDataOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, OpaqueCMBlockBuffer *a7, int a8)
{
  uint64_t AllocatorForMedia;
  void (*v15)(uint64_t, __CFString *, uint64_t, CFHTTPMessageRef *);
  const __CFAllocator *v16;
  const __CFAllocator *v17;
  size_t DataLength;
  CFTypeRef v19;
  const __CFData *v20;
  const __CFAllocator *v21;
  CFPropertyListRef v22;
  int v23;
  const __CFAllocator *v24;
  const __CFAllocator *v25;
  CFMutableArrayRef v26;
  uint64_t v27;
  double PlaylistActiveDurationSecs;
  const void *Identifier;
  const __CFURL *URL;
  __CFArray *v31;
  const __CFArray *v32;
  CFRange v33;
  const void *v34;
  const __CFAllocator *v35;
  CFMutableArrayRef Mutable;
  void *v37;
  const void *Language;
  const __CFURL *v39;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v41;
  CFHTTPMessageRef message;
  void *value;
  CFArrayRef theArray;
  CFTypeRef cf;
  CFTypeRef v46;

  v41 = 0;
  message = 0;
  blockBufferOut = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a3 + 64));
  if (!a8)
  {
    FigSignalErrorAt();
    goto LABEL_57;
  }
  if (a4)
  {
    AllocatorForMedia = FigGetAllocatorForMedia();
    v15 = *(void (**)(uint64_t, __CFString *, uint64_t, CFHTTPMessageRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v15)
    {
      v15(a4, CFSTR("FHRP_HTTPResponseHeaders"), AllocatorForMedia, &message);
      if (message)
        v41 = CFHTTPMessageCopyAllHeaderFields(message);
    }
  }
  else if (a5)
  {
    FigCustomURLResponseInfoCopyHTTPHeaders();
  }
  v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
  DataLength = CMBlockBufferGetDataLength(a7);
  if (!CMBlockBufferCreateContiguous(v16, a7, v17, 0, 0, DataLength, 0, &blockBufferOut))
  {
    v19 = v41;
    theArray = 0;
    cf = 0;
    value = 0;
    FigGetAllocatorForMedia();
    if (FigCreateCFDataWithBlockBufferNoCopy())
    {
      v22 = 0;
      goto LABEL_49;
    }
    v20 = (const __CFData *)cf;
    v46 = 0;
    if (FigSessionDataSpecifierGetFormatType(a2) == 2)
    {
      v21 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v22 = CFPropertyListCreateWithData(v21, v20, 1uLL, 0, 0);
      if (!v22)
        goto LABEL_49;
      goto LABEL_25;
    }
    if (FigSessionDataSpecifierGetFormatType(a2) == 1)
      goto LABEL_14;
    if (FigSessionDataSpecifierGetFormatType(a2) == 3)
    {
      if (v20)
      {
LABEL_18:
        v22 = CFRetain(v20);
        goto LABEL_25;
      }
    }
    else
    {
      FigSessionDataSpecifierGetIdentifier(a2);
      if (!FigCFEqual())
      {
        if (FigSessionDataSpecifierGetFormatType(a2))
        {
          v22 = v46;
        }
        else
        {
          v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
          v22 = CFPropertyListCreateWithData(v24, v20, 1uLL, 0, 0);
          v46 = v22;
          if (!v22)
          {
LABEL_14:
            v23 = FigCFHTTPCreatePropertyListFromJSON((uint64_t)v20, &v46);
            v22 = v46;
            if (v23)
              goto LABEL_49;
          }
        }
LABEL_25:
        if (*(_QWORD *)(a3 + 232)
          || (v25 = (const __CFAllocator *)FigGetAllocatorForMedia(),
              v26 = CFArrayCreateMutable(v25, 0, MEMORY[0x1E0C9B378]),
              (*(_QWORD *)(a3 + 232) = v26) != 0))
        {
          v27 = *(_QWORD *)(a3 + 184);
          if (v27)
            PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(v27);
          else
            PlaylistActiveDurationSecs = 0.0;
          Identifier = (const void *)FigSessionDataSpecifierGetIdentifier(a2);
          URL = (const __CFURL *)FigSessionDataSpecifierGetURL(a2);
          if (FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntry(Identifier, v22, URL, (uint64_t)v19, &theArray, 0, PlaylistActiveDurationSecs))goto LABEL_49;
          if (theArray && CFArrayGetCount(theArray) >= 1)
          {
            v31 = *(__CFArray **)(a3 + 232);
            v32 = theArray;
            if (theArray)
              v33.length = CFArrayGetCount(theArray);
            else
              v33.length = 0;
            v33.location = 0;
            CFArrayAppendArray(v31, v32, v33);
          }
          if (FigSessionDataSpecifierGetURL(a2)
            && (!FigSessionDataSpecifierGetFormatType(a2)
             || FigSessionDataSpecifierGetFormatType(a2) == 1))
          {
            FigSessionDataSpecifierGetIdentifier(a2);
            if (FigCFEqual())
            {
              v34 = *(const void **)(a3 + 240);
              *(_QWORD *)(a3 + 240) = v22;
              if (v22)
                CFRetain(v22);
              if (v34)
                CFRelease(v34);
              goto LABEL_49;
            }
          }
          if (*(_QWORD *)(a3 + 208)
            || (v35 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                Mutable = CFArrayCreateMutable(v35, 0, MEMORY[0x1E0C9B378]),
                (*(_QWORD *)(a3 + 208) = Mutable) != 0))
          {
            v37 = (void *)FigSessionDataSpecifierGetIdentifier(a2);
            Language = (const void *)FigSessionDataSpecifierGetLanguage(a2);
            v39 = (const __CFURL *)FigSessionDataSpecifierGetURL(a2);
            if (!FigHLSSessionDataCopyMetadataEntry(v37, v22, Language, v39, (CFMutableDictionaryRef *)&value))CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 208), value);
            goto LABEL_49;
          }
        }
        FigSignalErrorAt();
LABEL_49:
        if (value)
          CFRelease(value);
        if (theArray)
          CFRelease(theArray);
        if (v22)
          CFRelease(v22);
        if (cf)
          CFRelease(cf);
        goto LABEL_57;
      }
      if (v20)
        goto LABEL_18;
    }
    v22 = 0;
    goto LABEL_25;
  }
LABEL_57:
  MEMORY[0x19402EF04](*(_QWORD *)(a3 + 64));
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v41)
    CFRelease(v41);
  if (message)
    CFRelease(message);
}

void sapl_sessionDataSchedulerDidFailForItem(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const void *v6;

  MEMORY[0x19402EF04](*(_QWORD *)(a3 + 64));
  v6 = *(const void **)(a3 + 224);
  *(_QWORD *)(a3 + 224) = a4;
  if (a4)
    CFRetain(a4);
  if (v6)
    CFRelease(v6);
  JUMPOUT(0x19402EF04);
}

void sapl_sessionDataSchedulerDidFinishReadQueue(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 64));
  *(_BYTE *)(a2 + 216) = 1;
  v3 = *(const void **)(a2 + 120);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a2 + 120) = 0;
  }
  if (*(uint64_t *)(a2 + 152) >= 1)
  {
    v4 = 0;
    do
    {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 144));
      ++v4;
    }
    while (v4 < *(_QWORD *)(a2 + 152));
  }
  *(_QWORD *)(a2 + 152) = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t sapl_shouldRetrySessionDataResource()
{
  return 0;
}

uint64_t sapl_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  NSObject *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
  v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0;
  }
  v8 = (const void *)a1[10];
  if (v8)
  {
    CFRelease(v8);
    a1[10] = 0;
  }
  v9 = a1[11];
  if (v9)
  {
    dispatch_release(v9);
    a1[11] = 0;
  }
  v10 = (const void *)a1[12];
  if (v10)
  {
    CFRelease(v10);
    a1[12] = 0;
  }
  v11 = (const void *)a1[13];
  if (v11)
  {
    CFRelease(v11);
    a1[13] = 0;
  }
  v12 = (const void *)a1[14];
  if (v12)
  {
    CFRelease(v12);
    a1[14] = 0;
  }
  v13 = (const void *)a1[15];
  if (v13)
  {
    CFRelease(v13);
    a1[15] = 0;
  }
  v14 = (const void *)a1[16];
  if (v14)
  {
    CFRelease(v14);
    a1[16] = 0;
  }
  v15 = a1[18];
  if (v15)
  {
    dispatch_release(v15);
    a1[18] = 0;
  }
  v16 = (const void *)a1[20];
  if (v16)
  {
    CFRelease(v16);
    a1[20] = 0;
  }
  v17 = (const void *)a1[23];
  if (v17)
  {
    CFRelease(v17);
    a1[23] = 0;
  }
  v18 = (const void *)a1[26];
  if (v18)
  {
    CFRelease(v18);
    a1[26] = 0;
  }
  v19 = (const void *)a1[22];
  if (v19)
  {
    CFRelease(v19);
    a1[22] = 0;
  }
  v20 = (const void *)a1[25];
  if (v20)
  {
    CFRelease(v20);
    a1[25] = 0;
  }
  v21 = (const void *)a1[28];
  if (v21)
  {
    CFRelease(v21);
    a1[28] = 0;
  }
  v22 = (const void *)a1[29];
  if (v22)
  {
    CFRelease(v22);
    a1[29] = 0;
  }
  v23 = (const void *)a1[30];
  if (v23)
  {
    CFRelease(v23);
    a1[30] = 0;
  }
  return FigSimpleMutexDestroy();
}

CFStringRef sapl_copyDesc(_QWORD *a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("<FigStreamingAssetPropertyLoader %p %@ mvp:%@ media:%@>"), a1, a1[2], a1[20], a1[23]);
}

uint64_t spptUtil_registerClass_0(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t FigTrackReaderGetTypeID()
{
  MEMORY[0x19402F294](&FigTrackReaderGetClassID_sRegisterFigTrackReaderBaseTypeOnce, RegisterFigTrackReaderBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigEditCursorServiceGetClassID()
{
  MEMORY[0x19402F294](&FigEditCursorServiceGetClassID_sRegisterFigEditCursorServiceBaseTypeOnce, RegisterFigEditCursorServiceBaseType);
  return sFigEditCursorServiceClassID;
}

uint64_t RegisterFigEditCursorServiceBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigEditCursorServiceGetTypeID()
{
  MEMORY[0x19402F294](&FigEditCursorServiceGetClassID_sRegisterFigEditCursorServiceBaseTypeOnce, RegisterFigEditCursorServiceBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigEditCursorGetClassID()
{
  MEMORY[0x19402F294](&FigEditCursorGetClassID_sRegisterFigEditCursorBaseTypeOnce, RegisterFigEditCursorBaseType);
  return sFigEditCursorClassID;
}

uint64_t RegisterFigEditCursorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigEditCursorGetTypeID()
{
  MEMORY[0x19402F294](&FigEditCursorGetClassID_sRegisterFigEditCursorBaseTypeOnce, RegisterFigEditCursorBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigTrackReaderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTrackReader %p]"), a1);
}

CFStringRef FigEditCursorServiceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigEditCursorService %p]"), a1);
}

CFStringRef FigEditCursorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigEditCursor %p]"), a1);
}

uint64_t FigPlaybackItemLogCreateW3CLogData(const __CFArray *a1, __CFString **a2)
{
  const __CFAllocator *v4;
  CFMutableStringRef Mutable;
  __CFString *v6;
  CFAbsoluteTime Current;
  const __CFDate *v8;
  __CFDateFormatter *v9;
  __CFDateFormatter *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *StringWithDate;
  const __CFString *v14;
  const __CFDictionary *ValueAtIndex;
  int v16;
  __CFDateFormatter *v17;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *v20;
  const __CFDate *Value;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFNumber *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFArray *v33;
  CFIndex j;
  const __CFDictionary *v35;
  const __CFDate *v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  const __CFString *v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  const __CFNumber *v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  const __CFNumber *v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  const __CFNumber *v55;
  const __CFNumber *v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  const __CFString *v59;
  const __CFString *v60;
  const __CFNumber *v61;
  const __CFNumber *v62;
  uint64_t v63;
  __CFString **v65;
  const __CFDate *v66;

  if (a1)
  {
    if (a2)
    {
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      if (Mutable)
      {
        v6 = Mutable;
        Current = CFAbsoluteTimeGetCurrent();
        v8 = CFDateCreate(v4, Current);
        if (!v8)
          goto LABEL_50;
        if (FigPlaybackItemLogCreateW3CLogData_sDateFormatter)
          goto LABEL_10;
        v9 = CFDateFormatterCreate(v4, 0, kCFDateFormatterShortStyle, kCFDateFormatterLongStyle);
        if (v9)
        {
          v10 = v9;
          CFDateFormatterSetFormat(v9, CFSTR("yyyy/MM/dd HH:mm:ss.sss"));
          if (!FigAtomicCompareAndSwapPtr())
            CFRelease(v10);
        }
        if (FigPlaybackItemLogCreateW3CLogData_sDateFormatter)
        {
LABEL_10:
          v65 = a2;
          CFStringAppend(v6, CFSTR("#Version: 1.0\n#Software: "));
          v11 = (const __CFString *)FigCFHTTPCreateUserAgent();
          if (v11)
          {
            v12 = v11;
            CFStringAppend(v6, v11);
            CFRelease(v12);
          }
          CFStringAppend(v6, CFSTR("\n#Date: "));
          v66 = v8;
          StringWithDate = CFDateFormatterCreateStringWithDate(v4, (CFDateFormatterRef)FigPlaybackItemLogCreateW3CLogData_sDateFormatter, v8);
          if (StringWithDate)
          {
            v14 = StringWithDate;
            CFStringAppend(v6, StringWithDate);
            CFRelease(v14);
          }
          if (CFArrayGetCount(a1) >= 1)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, 0);
            v16 = CFDictionaryContainsKey(ValueAtIndex, CFSTR("status"));
            v17 = (__CFDateFormatter *)FigPlaybackItemLogCreateW3CLogData_sDateFormatter;
            Count = CFArrayGetCount(a1);
            if (v16)
            {
              CFStringAppend(v6, CFSTR("\n#Fields: date time uri cs-guid s-ip status domain comment cs-iftype\n"));
              if (Count >= 1)
              {
                for (i = 0; i != Count; ++i)
                {
                  v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
                  Value = (const __CFDate *)CFDictionaryGetValue(v20, CFSTR("date"));
                  w3cAppendDateString(v6, Value, v17);
                  v22 = (const __CFString *)CFDictionaryGetValue(v20, CFSTR("uri"));
                  if (v22)
                    v23 = v22;
                  else
                    v23 = CFSTR("-");
                  CFStringAppend(v6, v23);
                  CFStringAppend(v6, CFSTR(" "));
                  v24 = (const __CFString *)CFDictionaryGetValue(v20, CFSTR("cs-guid"));
                  if (v24)
                    v25 = v24;
                  else
                    v25 = CFSTR("-");
                  CFStringAppend(v6, v25);
                  CFStringAppend(v6, CFSTR(" "));
                  v26 = (const __CFString *)CFDictionaryGetValue(v20, CFSTR("s-ip"));
                  if (v26)
                    v27 = v26;
                  else
                    v27 = CFSTR("-");
                  CFStringAppend(v6, v27);
                  CFStringAppend(v6, CFSTR(" "));
                  v28 = (const __CFNumber *)CFDictionaryGetValue(v20, CFSTR("status"));
                  w3cAppendNumber(v6, v28, 1);
                  v29 = (const __CFString *)CFDictionaryGetValue(v20, CFSTR("domain"));
                  w3cAppendQuotedString(v6, v29);
                  v30 = (const __CFString *)CFDictionaryGetValue(v20, CFSTR("comment"));
                  w3cAppendQuotedString(v6, v30);
                  v31 = (const __CFString *)CFDictionaryGetValue(v20, CFSTR("cs-iftype"));
                  if (v31)
                    v32 = v31;
                  else
                    v32 = CFSTR("-");
                  CFStringAppend(v6, v32);
                  CFStringAppend(v6, CFSTR("\n"));
                }
              }
            }
            else
            {
              CFStringAppend(v6, CFSTR("\n#Fields: date time uri cs-guid s-ip s-ip-changes sc-count c-duration-downloaded c-start-time c-duration-watched bytes c-observed-bitrate sc-indicated-bitrate c-stalls c-frames-dropped c-startup-time c-overdue c-reason c-observed-min-bitrate c-observed-max-bitrate c-observed-bitrate-sd s-playback-type sc-wwan-count c-switch-bitrate\n"));
              if (Count >= 1)
              {
                v33 = a1;
                for (j = 0; j != Count; ++j)
                {
                  v35 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, j);
                  v36 = (const __CFDate *)CFDictionaryGetValue(v35, CFSTR("date"));
                  w3cAppendDateString(v6, v36, v17);
                  v37 = (const __CFString *)CFDictionaryGetValue(v35, CFSTR("uri"));
                  if (v37)
                    v38 = v37;
                  else
                    v38 = CFSTR("-");
                  CFStringAppend(v6, v38);
                  CFStringAppend(v6, CFSTR(" "));
                  v39 = (const __CFString *)CFDictionaryGetValue(v35, CFSTR("cs-guid"));
                  if (v39)
                    v40 = v39;
                  else
                    v40 = CFSTR("-");
                  CFStringAppend(v6, v40);
                  CFStringAppend(v6, CFSTR(" "));
                  v41 = (const __CFString *)CFDictionaryGetValue(v35, CFSTR("s-ip"));
                  if (v41)
                    v42 = v41;
                  else
                    v42 = CFSTR("-");
                  CFStringAppend(v6, v42);
                  CFStringAppend(v6, CFSTR(" "));
                  v43 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("s-ip-changes"));
                  w3cAppendNumber(v6, v43, 1);
                  v44 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("sc-count"));
                  w3cAppendNumber(v6, v44, 1);
                  v45 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-duration-downloaded"));
                  w3cAppendNumber(v6, v45, 1);
                  v46 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-start-time"));
                  w3cAppendNumber(v6, v46, 1);
                  v47 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-duration-watched"));
                  w3cAppendNumber(v6, v47, 1);
                  v48 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("bytes"));
                  w3cAppendNumber(v6, v48, 1);
                  v49 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-observed-bitrate"));
                  w3cAppendNumber(v6, v49, 1);
                  v50 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("sc-indicated-bitrate"));
                  w3cAppendNumber(v6, v50, 1);
                  v51 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-stalls"));
                  w3cAppendNumber(v6, v51, 1);
                  v52 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-frames-dropped"));
                  w3cAppendNumber(v6, v52, 1);
                  v53 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-startup-time"));
                  w3cAppendNumber(v6, v53, 1);
                  v54 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-overdue"));
                  w3cAppendNumber(v6, v54, 1);
                  v55 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-reason"));
                  w3cAppendNumber(v6, v55, 1);
                  v56 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-observed-min-bitrate"));
                  w3cAppendNumber(v6, v56, 1);
                  v57 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-observed-max-bitrate"));
                  w3cAppendNumber(v6, v57, 1);
                  v58 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-observed-bitrate-sd"));
                  w3cAppendNumber(v6, v58, 1);
                  v59 = (const __CFString *)CFDictionaryGetValue(v35, CFSTR("s-playback-type"));
                  if (v59)
                    v60 = v59;
                  else
                    v60 = CFSTR("-");
                  CFStringAppend(v6, v60);
                  CFStringAppend(v6, CFSTR(" "));
                  v61 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("sc-wwan-count"));
                  w3cAppendNumber(v6, v61, 1);
                  v62 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("c-switch-bitrate"));
                  w3cAppendNumber(v6, v62, 0);
                  CFStringAppend(v6, CFSTR("\n"));
                }
              }
            }
          }
          v63 = 0;
          v8 = v66;
          *v65 = v6;
        }
        else
        {
LABEL_50:
          v63 = FigSignalErrorAt();
          CFRelease(v6);
          if (!v8)
            return v63;
        }
        CFRelease(v8);
        return v63;
      }
    }
  }
  return FigSignalErrorAt();
}

void w3cAppendDateString(CFMutableStringRef theString, CFDateRef date, CFDateFormatterRef formatter)
{
  const __CFString *StringWithDate;
  const __CFString *v5;

  if (date
    && (StringWithDate = CFDateFormatterCreateStringWithDate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], formatter, date)) != 0)
  {
    v5 = StringWithDate;
    CFStringAppend(theString, StringWithDate);
    CFStringAppend(theString, CFSTR(" "));
    CFRelease(v5);
  }
  else
  {
    CFStringAppend(theString, CFSTR("-"));
    CFStringAppend(theString, CFSTR(" "));
    CFStringAppend(theString, CFSTR("-"));
    CFStringAppend(theString, CFSTR(" "));
  }
}

void w3cAppendNumber(CFMutableStringRef theString, CFNumberRef number, int a3)
{
  const __CFString *v6;
  const __CFString *v7;
  uint64_t valuePtr;

  if (!number
    || (!CFNumberIsFloatType(number)
      ? (v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@"), number))
      : (valuePtr = 0,
         CFNumberGetValue(number, kCFNumberDoubleType, &valuePtr),
         v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%.3f"), valuePtr)),
        (v7 = v6) == 0))
  {
    CFStringAppend(theString, CFSTR("-"));
    if (!a3)
      return;
    goto LABEL_9;
  }
  CFStringAppend(theString, v6);
  CFRelease(v7);
  if (a3)
LABEL_9:
    CFStringAppend(theString, CFSTR(" "));
}

void w3cAppendQuotedString(CFMutableStringRef theString, const __CFString *a2)
{
  const __CFString *v4;

  if (a2)
  {
    v4 = CFSTR("\"");
    CFStringAppend(theString, CFSTR("\""));
    CFStringAppend(theString, a2);
  }
  else
  {
    v4 = CFSTR("-");
  }
  CFStringAppend(theString, v4);
  CFStringAppend(theString, CFSTR(" "));
}

uint64_t FigAlternateSetErrorCategory(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;

  if (!a1)
    return 4294954516;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  *(_DWORD *)(DerivedStorage + 216) = a2;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return 0;
}

uint64_t FigAlternateSetIsFairPlayStreamingVideoAlternate(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;

  if (!a1)
    return 4294954516;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  *(_BYTE *)(DerivedStorage + 232) = a2;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return 0;
}

uint64_t FigAlternateSetPeakBitRate(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;

  if (!a1)
    return 4294954516;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  *(_DWORD *)(DerivedStorage + 236) = a2;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return 0;
}

uint64_t FigAlternateSetLateDiscoveredMediaType(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 != 1986618469)
    return 4294954514;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  *(_DWORD *)(v4 + 240) = 1986618469;
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 480));
  return 0;
}

uint64_t FigAlternateSetStartupScore(uint64_t a1, double a2)
{
  uint64_t DerivedStorage;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
    *(double *)(DerivedStorage + 224) = a2;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  }
  return 0;
}

uint64_t FigAlternateSetLastKnownValueForIsFullyCached(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
    *(_BYTE *)(DerivedStorage + 244) = a2;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  }
  return 0;
}

uint64_t FigAlternateIsFairPlayStreamingVideoAlternate()
{
  return 0;
}

uint64_t FigAlternateGetCurrentErrorCategory(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;

  if (!a1)
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  v2 = *(unsigned int *)(DerivedStorage + 216);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return v2;
}

BOOL FigAlternateHasUndeclaredVideo()
{
  uint64_t DerivedStorage;
  _BOOL8 v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  v1 = *(_DWORD *)(DerivedStorage + 240) == 1986618469;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return v1;
}

uint64_t FigAlternateHasVideo(uint64_t result)
{
  if (result)
    return FigAlternateHasVideoDeclared(result) || FigAlternateHasUndeclaredVideo();
  return result;
}

uint64_t FigAlternateHasVideoDeclared(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v4;
  const __CFDictionary *MediaValidatorPlist;
  uint64_t v6;
  int v8;

  if (!a1)
    return 1;
  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 414))
  {
    v2 = *(unsigned __int8 *)(DerivedStorage + 413);
    v3 = *(_QWORD *)(DerivedStorage + 480);
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    v4 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    if (!v4)
      goto LABEL_9;
    MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
    if (!MediaValidatorPlist)
      MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
    if (!FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v4, MediaValidatorPlist, &v8, 0))v2 = v8 & 2;
    else
LABEL_9:
      v2 = 1;
    v6 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 480));
    *(_BYTE *)(v6 + 413) = v2;
    *(_BYTE *)(v6 + 414) = 1;
    v3 = *(_QWORD *)(v6 + 480);
  }
  MEMORY[0x19402EF04](v3);
  return v2;
}

uint64_t FigAlternateHasStereoVideo(__CFArray *a1)
{
  __CFArray *VideoLayoutTags;
  uint64_t DerivedStorage;
  _QWORD *v4;
  CFIndex v5;
  uint64_t v6;
  CMTagValue v7;
  CFIndex i;
  const OpaqueCMTagCollection *ValueAtIndex;
  uint64_t v10;
  CMTag v12;

  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = (_QWORD *)(DerivedStorage + 480);
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
    if (*(_BYTE *)(DerivedStorage + 458))
    {
      LOBYTE(DerivedStorage) = *(_BYTE *)(DerivedStorage + 457);
LABEL_14:
      MEMORY[0x19402EF04](*v4);
      return DerivedStorage;
    }
    MEMORY[0x19402EF04](*v4);
  }
  LODWORD(DerivedStorage) = 0;
  v5 = 0;
  v6 = *MEMORY[0x1E0CA2830];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2830] + 8);
  if (!VideoLayoutTags)
    goto LABEL_7;
LABEL_6:
  for (i = CFArrayGetCount(VideoLayoutTags); v5 < i && !(_DWORD)DerivedStorage; i = 0)
  {
    ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(VideoLayoutTags, v5);
    *(_QWORD *)&v12.category = v6;
    v12.value = v7;
    LODWORD(DerivedStorage) = CMTagCollectionContainsTag(ValueAtIndex, v12);
    ++v5;
    if (VideoLayoutTags)
      goto LABEL_6;
LABEL_7:
    ;
  }
  if (a1)
  {
    v10 = CMBaseObjectGetDerivedStorage();
    v4 = (_QWORD *)(v10 + 480);
    MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 480));
    *(_BYTE *)(v10 + 457) = DerivedStorage;
    *(_BYTE *)(v10 + 458) = 1;
    goto LABEL_14;
  }
  return DerivedStorage;
}

__CFArray *FigAlternateGetVideoLayoutTags(__CFArray *result)
{
  uint64_t DerivedStorage;

  if (result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    result = *(__CFArray **)(DerivedStorage + 152);
    if (!result)
    {
      result = FigAlternateCreateDefaultTagCollectionsArrayForVideo();
      *(_QWORD *)(DerivedStorage + 152) = result;
    }
  }
  return result;
}

uint64_t FigAlternateHasAudioDeclared(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v4;
  const __CFDictionary *MediaValidatorPlist;
  uint64_t v6;
  int v8;

  if (!a1)
    return 1;
  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 412))
  {
    v2 = *(unsigned __int8 *)(DerivedStorage + 411);
    v3 = *(_QWORD *)(DerivedStorage + 480);
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    v4 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    if (!v4)
      goto LABEL_9;
    MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
    if (!MediaValidatorPlist)
      MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
    if (!FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v4, MediaValidatorPlist, &v8, 0))v2 = v8 & 1;
    else
LABEL_9:
      v2 = 1;
    v6 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 480));
    *(_BYTE *)(v6 + 411) = v2;
    *(_BYTE *)(v6 + 412) = 1;
    v3 = *(_QWORD *)(v6 + 480);
  }
  MEMORY[0x19402EF04](v3);
  return v2;
}

uint64_t FigAlternateIsAudioOnly(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (FigAlternateHasVideoDeclared(result))
    {
      return 0;
    }
    else
    {
      result = FigAlternateHasAudioDeclared(v1);
      if ((_DWORD)result)
        return !FigAlternateHasUndeclaredVideo();
    }
  }
  return result;
}

uint64_t FigAlternateGetLastKnownValueForIsFullyCached()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  v1 = *(unsigned __int8 *)(DerivedStorage + 244);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return v1;
}

uint64_t FigAlternateGetPeakBitRate(uint64_t result)
{
  uint64_t DerivedStorage;
  unsigned int v2;

  if (result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
    v2 = *(_DWORD *)(DerivedStorage + 236);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    if (v2)
      return v2;
    else
      return 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t FigAlternateGetExpectedAverageBitrate(uint64_t a1)
{
  if (a1)
    return fa_GetAlternateAverageBandwidth(a1);
  return a1;
}

uint64_t fa_GetAlternateAverageBandwidth(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 48);
  if (!(_DWORD)result)
    return FigAlternateGetPeakBitRate(a1);
  return result;
}

uint64_t FigAlternateGetDeclaredPeakBitRate(uint64_t result)
{
  if (result)
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
  return result;
}

uint64_t FigAlternateGetAverageBitRate(uint64_t result)
{
  if (result)
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 48);
  return result;
}

uint64_t FigAlternateGetRankingScoreOrPeakBWWithVideoCodecScore(uint64_t result, int a2, _DWORD *a3)
{
  uint64_t v5;
  int PeakBitRate;

  if (result)
  {
    v5 = result;
    PeakBitRate = FigAlternateGetPeakBitRate(result);
    if (a2)
    {
      result = CMBaseObjectGetDerivedStorage();
      if (!a3)
        return result;
    }
    else
    {
      result = FigAlternateGetBestVideoFormat(v5);
      if (!a3)
        return result;
    }
  }
  else
  {
    PeakBitRate = 0;
    if (!a3)
      return result;
  }
  *a3 = PeakBitRate;
  return result;
}

double FigAlternateGetRankingScore(uint64_t a1)
{
  if (a1)
    return *(double *)(CMBaseObjectGetDerivedStorage() + 72);
  else
    return -1.0;
}

uint64_t FigAlternateGetVideoQualityIndex(uint64_t result)
{
  uint64_t v1;
  unsigned int VideoRange;
  int BestVideoFormat;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  if (result)
  {
    v1 = result;
    VideoRange = FigAlternateGetVideoRange(result);
    BestVideoFormat = FigAlternateGetBestVideoFormat(v1);
    result = 0;
    switch(BestVideoFormat)
    {
      case 1:
        if (VideoRange >= 2)
          result = 0;
        else
          result = 20;
        break;
      case 2:
        result = VideoRange < 2;
        break;
      case 3:
        if (VideoRange == 2)
          v4 = 14;
        else
          v4 = 0;
        if (VideoRange == 3)
          v4 = 13;
        if (VideoRange >= 2)
          result = v4;
        else
          result = 3;
        break;
      case 4:
        switch(VideoRange)
        {
          case 1u:
            result = 2;
            break;
          case 2u:
            if (FigAlternateGetBestSupplementalVideoFormat(v1) == 2)
              result = 9;
            else
              result = 10;
            break;
          case 3u:
            v5 = FigAlternateGetBestSupplementalVideoFormat(v1) == 3;
            v6 = 11;
            v7 = 18;
            goto LABEL_35;
          default:
            goto LABEL_29;
        }
        break;
      case 5:
        if (VideoRange >= 2)
        {
          if (VideoRange == 2)
          {
            v5 = FigAlternateGetBestSupplementalVideoFormat(v1) == 3;
            v6 = 15;
            v7 = 21;
          }
          else
          {
            if (VideoRange != 3)
              goto LABEL_29;
            v5 = FigAlternateGetBestSupplementalVideoFormat(v1) == 3;
            v6 = 16;
            v7 = 19;
          }
          goto LABEL_35;
        }
        result = 4;
        break;
      case 7:
        if (VideoRange == 3)
        {
          v5 = fa_CodecsIncludeVideoFormat(v1, 1685481521, 20) == 0;
          v6 = 22;
          v7 = 12;
LABEL_35:
          if (v5)
            result = v7;
          else
            result = v6;
        }
        else
        {
LABEL_29:
          result = 0;
        }
        break;
      case 8:
        if (VideoRange == 3)
          result = 17;
        else
          result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t FigAlternateGetVideoRange(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (!a1)
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = (_QWORD *)(DerivedStorage + 480);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 356))
  {
    v3 = *(unsigned int *)(DerivedStorage + 352);
  }
  else
  {
    MEMORY[0x19402EF04](*v2);
    v4 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 140) + 2;
    if (v4 > 4)
      v3 = 0;
    else
      v3 = dword_1932FA60C[v4];
    v5 = CMBaseObjectGetDerivedStorage();
    v2 = (_QWORD *)(v5 + 480);
    MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 480));
    *(_DWORD *)(v5 + 352) = v3;
    *(_BYTE *)(v5 + 356) = 1;
  }
  MEMORY[0x19402EF04](*v2);
  return v3;
}

uint64_t FigAlternateGetBestVideoFormat(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_QWORD *)(DerivedStorage + 480);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 252))
  {
    v4 = *(unsigned int *)(DerivedStorage + 248);
  }
  else
  {
    MEMORY[0x19402EF04](*v3);
    if (fa_CodecsIncludeVideoFormat(a1, 1684108849, 0))
    {
      v4 = 8;
    }
    else
    {
      v4 = 7;
      if (!FigAlternateHasVideoFormat(a1, 7))
      {
        if (fa_CodecsIncludeVideoFormat(a1, 1635135537, 0))
        {
          v4 = 5;
        }
        else
        {
          v4 = 4;
          if (!FigAlternateHasVideoFormat(a1, 4))
          {
            if (fa_CodecsIncludeVideoFormat(a1, 1987063865, 0))
            {
              v4 = 3;
            }
            else
            {
              v4 = 2;
              if (!FigAlternateHasVideoFormat(a1, 2))
                v4 = FigAlternateHasVideoFormat(a1, 1) != 0;
            }
          }
        }
      }
    }
    v5 = CMBaseObjectGetDerivedStorage();
    v3 = (_QWORD *)(v5 + 480);
    MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 480));
    *(_DWORD *)(v5 + 248) = v4;
    *(_BYTE *)(v5 + 252) = 1;
  }
  MEMORY[0x19402EF04](*v3);
  return v4;
}

uint64_t FigAlternateGetBestSupplementalVideoFormat(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_QWORD *)(DerivedStorage + 480);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 260))
  {
    v4 = *(unsigned int *)(DerivedStorage + 256);
  }
  else
  {
    MEMORY[0x19402EF04](*v3);
    v4 = 3;
    if (!FigAlternateHasSupplementalVideoFormat(a1, 3))
    {
      v4 = 2;
      if (!FigAlternateHasSupplementalVideoFormat(a1, 2))
        v4 = FigAlternateHasSupplementalVideoFormat(a1, 1) != 0;
    }
    v5 = CMBaseObjectGetDerivedStorage();
    v3 = (_QWORD *)(v5 + 480);
    MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 480));
    *(_DWORD *)(v5 + 256) = v4;
    *(_BYTE *)(v5 + 260) = 1;
  }
  MEMORY[0x19402EF04](*v3);
  return v4;
}

uint64_t FigAlternateHasVideoDolbyVisionHEVCProfile(uint64_t result, int a2)
{
  if (result)
    return fa_CodecsIncludeVideoFormat(result, 1685481521, a2);
  return result;
}

uint64_t FigAlternateMeetsVideoChoice(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  int VideoRange;
  int v6;

  if (result)
  {
    v3 = result;
    VideoRange = FigAlternateGetVideoRange(result);
    if (FigAlternateHasVideoFormat(v3, 7))
      return *a2 == 7;
    if (fa_CodecsIncludeVideoFormat(v3, 1684108849, 0))
      return *a2 == 8;
    if (FigAlternateHasVideoFormat(v3, 4))
    {
      v6 = *a2 | 2;
      goto LABEL_12;
    }
    if (fa_CodecsIncludeVideoFormat(v3, 1987063865, 0))
    {
      if (*a2 != 6 && *a2 != 3)
        return 0;
    }
    else if (fa_CodecsIncludeVideoFormat(v3, 1635135537, 0))
    {
      if ((*a2 - 5) > 1)
        return 0;
    }
    else
    {
      if (FigAlternateHasVideoFormat(v3, 2))
      {
        v6 = *a2 | 4;
LABEL_12:
        if (v6 != 6)
          return 0;
        return a2[1] == VideoRange;
      }
      if (!FigAlternateHasVideoFormat(v3, 1))
        return FigAlternateHasUndeclaredVideo() && *a2 == 2;
      if (*a2 != 6 && *a2 != 1)
        return 0;
    }
    return a2[1] == VideoRange;
  }
  return result;
}

uint64_t FigAlternateHasVideoFormat(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  if (result)
  {
    v2 = result;
    switch(a2)
    {
      case 1:
        if (fa_CodecsIncludeVideoFormat(result, 1785750887, 0))
          goto LABEL_19;
        v3 = v2;
        v4 = 1835692135;
        goto LABEL_24;
      case 2:
        if (fa_CodecsIncludeVideoFormat(result, 1635148593, 0))
          goto LABEL_19;
        v4 = 1635148595;
        goto LABEL_23;
      case 3:
        v5 = 1987063865;
        return fa_CodecsIncludeVideoFormat(result, v5, 0);
      case 4:
        if (fa_CodecsIncludeVideoFormat(result, 1752589105, 0))
          goto LABEL_19;
        v3 = v2;
        v4 = 1751479857;
        goto LABEL_24;
      case 5:
        v5 = 1635135537;
        return fa_CodecsIncludeVideoFormat(result, v5, 0);
      case 6:
        if (fa_CodecsIncludeVideoFormat(result, 1635148593, 0)
          || fa_CodecsIncludeVideoFormat(v2, 1635148595, 0)
          || fa_CodecsIncludeVideoFormat(v2, 1752589105, 0)
          || fa_CodecsIncludeVideoFormat(v2, 1751479857, 0)
          || fa_CodecsIncludeVideoFormat(v2, 1987063865, 0))
        {
          goto LABEL_19;
        }
        v3 = v2;
        v4 = 1635135537;
        goto LABEL_24;
      case 7:
        if (fa_CodecsIncludeVideoFormat(result, 1685481521, 0))
        {
LABEL_19:
          result = 1;
        }
        else
        {
          v4 = 1685481573;
LABEL_23:
          v3 = v2;
LABEL_24:
          result = fa_CodecsIncludeVideoFormat(v3, v4, 0) != 0;
        }
        break;
      case 8:
        v5 = 1684108849;
        return fa_CodecsIncludeVideoFormat(result, v5, 0);
      default:
        return 0;
    }
  }
  return result;
}

BOOL FigAlternateIsVideoRangeUnknown(uint64_t a1)
{
  return !a1 || *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 140) == -1;
}

uint64_t FigAlternateGetNormalizedPeakBitrate(uint64_t result)
{
  uint64_t v1;
  unsigned int BestVideoFormat;
  unsigned int v3;
  float v4;
  int PeakBitRate;

  if (result)
  {
    v1 = result;
    BestVideoFormat = FigAlternateGetBestVideoFormat(result);
    if (BestVideoFormat >= 9)
      v3 = 0;
    else
      v3 = BestVideoFormat;
    v4 = kVideoCodecScoreFactor[v3];
    PeakBitRate = FigAlternateGetPeakBitRate(v1);
    if (PeakBitRate == 0x7FFFFFFF)
      return 0x7FFFFFFFLL;
    else
      return (int)(float)(v4 * (float)PeakBitRate);
  }
  return result;
}

int FigAlternateGetVariantBitrateRank(uint64_t a1, int a2)
{
  int NormalizedPeakBitrate;
  int v4;
  int v5;

  if (a1)
  {
    NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
    if (NormalizedPeakBitrate <= 1)
      v4 = 1;
    else
      v4 = NormalizedPeakBitrate;
    if (v4 <= a2)
      v5 = a2;
    else
      v5 = v4;
    LODWORD(a1) = vcvtpd_s64_f64((double)v4 * 100.0 / (double)v5);
  }
  return a1;
}

uint64_t FigAlternateGetCodecString(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return result;
}

uint64_t FigAlternateGetSupplementalCodecString(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  return result;
}

BOOL FigAlternateHasDeclaredPathwayID(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 160) != 0;
  return result;
}

const __CFString *FigAlternateGetPathwayID(uint64_t a1)
{
  const __CFString *v1;
  uint64_t DerivedStorage;

  v1 = CFSTR(".");
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(DerivedStorage + 160))
      return *(const __CFString **)(DerivedStorage + 160);
  }
  return v1;
}

uint64_t FigAlternateIsIFrameOnly(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 24);
  return result;
}

uint64_t FigAlternateHasValidCodecs(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v2;
  uint64_t IsValidCodecString;
  const __CFString *v4;
  const __CFDictionary *MediaValidatorPlist;
  uint64_t v6;

  if (!a1)
    return 1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = (_QWORD *)(DerivedStorage + 480);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 410))
  {
    IsValidCodecString = *(unsigned __int8 *)(DerivedStorage + 409);
  }
  else
  {
    MEMORY[0x19402EF04](*v2);
    v4 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    if (v4)
    {
      MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
      if (!MediaValidatorPlist)
        MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
      IsValidCodecString = FigStreamAlternateIsValidCodecString(v4, MediaValidatorPlist, 0, 0, 0, 0);
    }
    else
    {
      IsValidCodecString = 1;
    }
    v6 = CMBaseObjectGetDerivedStorage();
    v2 = (_QWORD *)(v6 + 480);
    MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 480));
    *(_BYTE *)(v6 + 409) = IsValidCodecString;
    *(_BYTE *)(v6 + 410) = 1;
  }
  MEMORY[0x19402EF04](*v2);
  return IsValidCodecString;
}

const __CFString *FigAlternateHasUnknownCodecs(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFString *v2;
  uint64_t v3;
  const __CFDictionary *MediaValidatorPlist;
  uint64_t v5;
  int v7;

  if (!a1)
    return 0;
  v7 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 416))
  {
    v2 = (const __CFString *)*(unsigned __int8 *)(DerivedStorage + 415);
    v3 = *(_QWORD *)(DerivedStorage + 480);
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    v2 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    if (v2)
    {
      MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
      if (!MediaValidatorPlist)
        MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
      if (FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v2, MediaValidatorPlist, &v7, 0))v2 = 0;
      else
        v2 = (const __CFString *)((v7 >> 2) & 1);
    }
    v5 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 480));
    *(_BYTE *)(v5 + 415) = (_BYTE)v2;
    *(_BYTE *)(v5 + 416) = 1;
    v3 = *(_QWORD *)(v5 + 480);
  }
  MEMORY[0x19402EF04](v3);
  return v2;
}

uint64_t FigAlternateHasVideoCodecType(uint64_t result, int a2)
{
  if (result)
    return fa_CodecsIncludeVideoFormat(result, a2, 0);
  return result;
}

uint64_t fa_CodecsIncludeVideoFormat(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t CodecAndProfile;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t DerivedStorage;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1)
    v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  else
    v5 = 0;
  CodecAndProfile = 0;
  if (a2 <= 1685481572)
  {
    if (a2 <= 1635148594)
    {
      if (a2 == 1635135537)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v8 = (_QWORD *)(DerivedStorage + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
        if (*(_BYTE *)(DerivedStorage + 308))
        {
          CodecAndProfile = *(unsigned __int8 *)(DerivedStorage + 307);
        }
        else
        {
          MEMORY[0x19402EF04](*v8);
          CodecAndProfile = FigCFStringFind();
          v27 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v27 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v27 + 480));
          *(_BYTE *)(v27 + 307) = CodecAndProfile;
          *(_BYTE *)(v27 + 308) = 1;
        }
        goto LABEL_63;
      }
      if (a2 == 1635148593)
      {
        v11 = CMBaseObjectGetDerivedStorage();
        v8 = (_QWORD *)(v11 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 480));
        if (*(_BYTE *)(v11 + 292))
        {
          CodecAndProfile = *(unsigned __int8 *)(v11 + 291);
        }
        else
        {
          MEMORY[0x19402EF04](*v8);
          CodecAndProfile = FigCFStringFind();
          v21 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v21 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v21 + 480));
          *(_BYTE *)(v21 + 291) = CodecAndProfile;
          *(_BYTE *)(v21 + 292) = 1;
        }
        goto LABEL_63;
      }
    }
    else
    {
      switch(a2)
      {
        case 1635148595:
          v14 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v14 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 480));
          if (*(_BYTE *)(v14 + 294))
          {
            CodecAndProfile = *(unsigned __int8 *)(v14 + 293);
          }
          else
          {
            MEMORY[0x19402EF04](*v8);
            CodecAndProfile = FigCFStringFind();
            v24 = CMBaseObjectGetDerivedStorage();
            v8 = (_QWORD *)(v24 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v24 + 480));
            *(_BYTE *)(v24 + 293) = CodecAndProfile;
            *(_BYTE *)(v24 + 294) = 1;
          }
          goto LABEL_63;
        case 1684108849:
          v15 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v15 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v15 + 480));
          if (a3 == 10)
          {
            if (*(_BYTE *)(v15 + 312))
            {
              CodecAndProfile = *(unsigned __int8 *)(v15 + 311);
            }
            else
            {
              MEMORY[0x19402EF04](*v8);
              CodecAndProfile = fa_CodecStringFindCodecAndProfile(v5, (uint64_t)CFSTR("dav1"), 10);
              v30 = CMBaseObjectGetDerivedStorage();
              v8 = (_QWORD *)(v30 + 480);
              MEMORY[0x19402EEEC](*(_QWORD *)(v30 + 480));
              *(_BYTE *)(v30 + 311) = CodecAndProfile;
              *(_BYTE *)(v30 + 312) = 1;
            }
          }
          else if (*(_BYTE *)(v15 + 310))
          {
            CodecAndProfile = *(unsigned __int8 *)(v15 + 309);
          }
          else
          {
            MEMORY[0x19402EF04](*v8);
            CodecAndProfile = FigCFStringFind();
            v31 = CMBaseObjectGetDerivedStorage();
            v8 = (_QWORD *)(v31 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v31 + 480));
            *(_BYTE *)(v31 + 309) = CodecAndProfile;
            *(_BYTE *)(v31 + 310) = 1;
          }
          goto LABEL_63;
        case 1685481521:
          if (a3 == 5)
          {
            v28 = CMBaseObjectGetDerivedStorage();
            v8 = (_QWORD *)(v28 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v28 + 480));
            if (*(_BYTE *)(v28 + 306))
            {
              CodecAndProfile = *(unsigned __int8 *)(v28 + 305);
            }
            else
            {
              MEMORY[0x19402EF04](*v8);
              CodecAndProfile = fa_CodecStringFindCodecAndProfile(v5, (uint64_t)CFSTR("dvh1"), 5);
              v33 = CMBaseObjectGetDerivedStorage();
              v8 = (_QWORD *)(v33 + 480);
              MEMORY[0x19402EEEC](*(_QWORD *)(v33 + 480));
              *(_BYTE *)(v33 + 305) = CodecAndProfile;
              *(_BYTE *)(v33 + 306) = 1;
            }
          }
          else if (a3 == 20)
          {
            v9 = CMBaseObjectGetDerivedStorage();
            v8 = (_QWORD *)(v9 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 480));
            if (*(_BYTE *)(v9 + 304))
            {
              CodecAndProfile = *(unsigned __int8 *)(v9 + 303);
            }
            else
            {
              MEMORY[0x19402EF04](*v8);
              CodecAndProfile = fa_CodecStringFindCodecAndProfile(v5, (uint64_t)CFSTR("dvh1"), 20);
              v32 = CMBaseObjectGetDerivedStorage();
              v8 = (_QWORD *)(v32 + 480);
              MEMORY[0x19402EEEC](*(_QWORD *)(v32 + 480));
              *(_BYTE *)(v32 + 303) = CodecAndProfile;
              *(_BYTE *)(v32 + 304) = 1;
            }
          }
          else
          {
            v29 = CMBaseObjectGetDerivedStorage();
            v8 = (_QWORD *)(v29 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v29 + 480));
            if (*(_BYTE *)(v29 + 302))
            {
              CodecAndProfile = *(unsigned __int8 *)(v29 + 301);
            }
            else
            {
              MEMORY[0x19402EF04](*v8);
              CodecAndProfile = FigCFStringFind();
              v34 = CMBaseObjectGetDerivedStorage();
              v8 = (_QWORD *)(v34 + 480);
              MEMORY[0x19402EEEC](*(_QWORD *)(v34 + 480));
              *(_BYTE *)(v34 + 301) = CodecAndProfile;
              *(_BYTE *)(v34 + 302) = 1;
            }
          }
          goto LABEL_63;
      }
    }
  }
  else if (a2 > 1785750886)
  {
    switch(a2)
    {
      case 1785750887:
        v16 = CMBaseObjectGetDerivedStorage();
        v8 = (_QWORD *)(v16 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 480));
        if (*(_BYTE *)(v16 + 288))
        {
          CodecAndProfile = *(unsigned __int8 *)(v16 + 287);
        }
        else
        {
          MEMORY[0x19402EF04](*v8);
          CodecAndProfile = FigCFStringFind();
          v25 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v25 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v25 + 480));
          *(_BYTE *)(v25 + 287) = CodecAndProfile;
          *(_BYTE *)(v25 + 288) = 1;
        }
        goto LABEL_63;
      case 1835692135:
        v17 = CMBaseObjectGetDerivedStorage();
        v8 = (_QWORD *)(v17 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v17 + 480));
        if (*(_BYTE *)(v17 + 290))
        {
          CodecAndProfile = *(unsigned __int8 *)(v17 + 289);
        }
        else
        {
          MEMORY[0x19402EF04](*v8);
          CodecAndProfile = FigCFStringFind();
          v26 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v26 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v26 + 480));
          *(_BYTE *)(v26 + 289) = CodecAndProfile;
          *(_BYTE *)(v26 + 290) = 1;
        }
        goto LABEL_63;
      case 1987063865:
        v10 = CMBaseObjectGetDerivedStorage();
        v8 = (_QWORD *)(v10 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 480));
        if (*(_BYTE *)(v10 + 314))
        {
          CodecAndProfile = *(unsigned __int8 *)(v10 + 313);
        }
        else
        {
          MEMORY[0x19402EF04](*v8);
          CodecAndProfile = FigCFStringFind();
          v20 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v20 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v20 + 480));
          *(_BYTE *)(v20 + 313) = CodecAndProfile;
          *(_BYTE *)(v20 + 314) = 1;
        }
        goto LABEL_63;
    }
  }
  else
  {
    switch(a2)
    {
      case 1685481573:
        v12 = CMBaseObjectGetDerivedStorage();
        v8 = (_QWORD *)(v12 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v12 + 480));
        if (*(_BYTE *)(v12 + 300))
        {
          CodecAndProfile = *(unsigned __int8 *)(v12 + 299);
        }
        else
        {
          MEMORY[0x19402EF04](*v8);
          CodecAndProfile = FigCFStringFind();
          v22 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v22 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v22 + 480));
          *(_BYTE *)(v22 + 299) = CodecAndProfile;
          *(_BYTE *)(v22 + 300) = 1;
        }
        goto LABEL_63;
      case 1751479857:
        v13 = CMBaseObjectGetDerivedStorage();
        v8 = (_QWORD *)(v13 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v13 + 480));
        if (*(_BYTE *)(v13 + 298))
        {
          CodecAndProfile = *(unsigned __int8 *)(v13 + 297);
        }
        else
        {
          MEMORY[0x19402EF04](*v8);
          CodecAndProfile = FigCFStringFind();
          v23 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v23 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v23 + 480));
          *(_BYTE *)(v23 + 297) = CodecAndProfile;
          *(_BYTE *)(v23 + 298) = 1;
        }
        goto LABEL_63;
      case 1752589105:
        v7 = CMBaseObjectGetDerivedStorage();
        v8 = (_QWORD *)(v7 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 480));
        if (*(_BYTE *)(v7 + 296))
        {
          CodecAndProfile = *(unsigned __int8 *)(v7 + 295);
        }
        else
        {
          MEMORY[0x19402EF04](*v8);
          CodecAndProfile = FigCFStringFind();
          v19 = CMBaseObjectGetDerivedStorage();
          v8 = (_QWORD *)(v19 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v19 + 480));
          *(_BYTE *)(v19 + 295) = CodecAndProfile;
          *(_BYTE *)(v19 + 296) = 1;
        }
LABEL_63:
        MEMORY[0x19402EF04](*v8);
        break;
    }
  }
  return CodecAndProfile;
}

uint64_t FigAlternateHasVideoDolbyVisionProfile(uint64_t result, int a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    return fa_CodecsIncludeVideoFormat(result, 1685481521, a2)
        || fa_CodecsIncludeVideoFormat(v3, 1684108849, a2) != 0;
  }
  return result;
}

uint64_t FigAlternateHasSupplementalVideoFormat(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  if (v3)
  {
    switch(a2)
    {
      case 1:
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(DerivedStorage + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
        if (*(_BYTE *)(DerivedStorage + 320))
        {
          v3 = *(unsigned __int8 *)(DerivedStorage + 319);
        }
        else
        {
          MEMORY[0x19402EF04](*v5);
          v3 = FigCFStringFind();
          v9 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v9 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 480));
          *(_BYTE *)(v9 + 319) = v3;
          *(_BYTE *)(v9 + 320) = 1;
        }
        goto LABEL_16;
      case 2:
        v7 = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(v7 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 480));
        if (*(_BYTE *)(v7 + 318))
        {
          v3 = *(unsigned __int8 *)(v7 + 317);
        }
        else
        {
          MEMORY[0x19402EF04](*v5);
          v3 = FigCFStringFind();
          v10 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v10 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 480));
          *(_BYTE *)(v10 + 317) = v3;
          *(_BYTE *)(v10 + 318) = 1;
        }
        goto LABEL_16;
      case 3:
        v4 = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(v4 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 480));
        if (*(_BYTE *)(v4 + 316))
        {
          v3 = *(unsigned __int8 *)(v4 + 315);
        }
        else
        {
          MEMORY[0x19402EF04](*v5);
          v3 = FigCFStringFind();
          v8 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v8 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 480));
          *(_BYTE *)(v8 + 315) = v3;
          *(_BYTE *)(v8 + 316) = 1;
        }
LABEL_16:
        MEMORY[0x19402EF04](*v5);
        return v3;
    }
    return 0;
  }
  return v3;
}

double FigAlternateGetResolution(uint64_t a1)
{
  uint64_t v1;

  if (a1)
    v1 = CMBaseObjectGetDerivedStorage() + 168;
  else
    v1 = MEMORY[0x1E0C9D820];
  return *(double *)v1;
}

uint64_t FigAlternateGetPixelCount(uint64_t a1)
{
  uint64_t DerivedStorage;
  double *v2;
  double *v3;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v2 = (double *)(DerivedStorage + 168);
    v3 = (double *)(DerivedStorage + 176);
  }
  else
  {
    v2 = (double *)MEMORY[0x1E0C9D820];
    v3 = (double *)(MEMORY[0x1E0C9D820] + 8);
  }
  return (uint64_t)*v3 * (uint64_t)*v2;
}

uint64_t FigAlternateGetFrameRateBucket(uint64_t a1)
{
  double v1;

  if (a1)
    v1 = *(double *)(CMBaseObjectGetDerivedStorage() + 56);
  else
    v1 = 0.0;
  if (v1 <= 60.0)
    return v1 > 30.0;
  else
    return 2;
}

uint64_t FigFrameRateToFrameRateBucket(double a1)
{
  if (a1 <= 60.0)
    return a1 > 30.0;
  else
    return 2;
}

double FigAlternateGetFrameRate(uint64_t a1)
{
  if (a1)
    return *(double *)(CMBaseObjectGetDerivedStorage() + 56);
  else
    return 0.0;
}

uint64_t FigAlternateGetRankingScoreOrAverageBWWithVideoCodecScore(uint64_t result, int a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;

  if (result)
  {
    v5 = result;
    CMBaseObjectGetDerivedStorage();
    result = fa_GetAlternateAverageBandwidth(v5);
    v6 = result;
    if (a2)
    {
      if (!a3)
        return result;
    }
    else
    {
      result = FigAlternateGetBestVideoFormat(v5);
      if (!a3)
        return result;
    }
  }
  else
  {
    v6 = 0;
    if (!a3)
      return result;
  }
  *a3 = v6;
  return result;
}

uint64_t FigAlternateGetAlternateIndex(uint64_t result)
{
  if (result)
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 28);
  return result;
}

uint64_t FigAlternateGetZeroIndexedAlternateIndex(uint64_t result)
{
  if (result)
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 32);
  return result;
}

BOOL FigAlternateHasRankingScore(_BOOL8 result)
{
  if (result)
    return *(double *)(CMBaseObjectGetDerivedStorage() + 72) > 0.0;
  return result;
}

double FigAlternateGetStartupScore(uint64_t a1)
{
  uint64_t DerivedStorage;
  double v2;

  if (!a1)
    return -1.79769313e308;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  v2 = *(double *)(DerivedStorage + 224);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return v2;
}

uint64_t FigAlternateGetAllowedCPC(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  else
    return -1;
}

uint64_t FigAlternateGetHDCPLevel(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 136);
  else
    return 4294967294;
}

BOOL FigAlternateHasDeclaredVideoLayoutTags(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 152) != 0;
  return result;
}

__CFString *FigAlternateGetVideoLayoutString(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  __CFString *VideoLayoutLoggingStringFromCollectionArray;
  uint64_t v6;
  const __CFArray *v7;
  const __CFArray *v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (a1)
  {
    v4 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 480));
    if (*(_BYTE *)(v4 + 440))
    {
      VideoLayoutLoggingStringFromCollectionArray = *(__CFString **)(v4 + 432);
      v6 = *(_QWORD *)(v4 + 480);
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(v4 + 480));
      v9 = *(const __CFArray **)(v3 + 152);
      if (v9)
      {
        VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(v9);
        if (!VideoLayoutLoggingStringFromCollectionArray)
          return VideoLayoutLoggingStringFromCollectionArray;
      }
      else
      {
        VideoLayoutLoggingStringFromCollectionArray = 0;
      }
      v10 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 480));
      *(_QWORD *)(v10 + 432) = VideoLayoutLoggingStringFromCollectionArray;
      *(_BYTE *)(v10 + 440) = 1;
      v6 = *(_QWORD *)(v10 + 480);
    }
    MEMORY[0x19402EF04](v6);
  }
  else
  {
    v7 = *(const __CFArray **)(DerivedStorage + 152);
    if (v7)
      return FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(v7);
    return 0;
  }
  return VideoLayoutLoggingStringFromCollectionArray;
}

__CFString *FigAlternateGetVideoContentTypeString(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  __CFString *VideoContentTypeStringFromCollectionArray;
  uint64_t v6;
  const __CFArray *v7;
  const __CFArray *v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (a1)
  {
    v4 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 480));
    if (*(_BYTE *)(v4 + 456))
    {
      VideoContentTypeStringFromCollectionArray = *(__CFString **)(v4 + 448);
      v6 = *(_QWORD *)(v4 + 480);
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(v4 + 480));
      v9 = *(const __CFArray **)(v3 + 152);
      if (v9)
      {
        VideoContentTypeStringFromCollectionArray = FigAlternateCreateVideoContentTypeStringFromCollectionArray(v9);
        if (!VideoContentTypeStringFromCollectionArray)
          return VideoContentTypeStringFromCollectionArray;
      }
      else
      {
        VideoContentTypeStringFromCollectionArray = 0;
      }
      v10 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 480));
      *(_QWORD *)(v10 + 448) = VideoContentTypeStringFromCollectionArray;
      *(_BYTE *)(v10 + 456) = 1;
      v6 = *(_QWORD *)(v10 + 480);
    }
    MEMORY[0x19402EF04](v6);
  }
  else
  {
    v7 = *(const __CFArray **)(DerivedStorage + 152);
    if (v7)
      return FigAlternateCreateVideoContentTypeStringFromCollectionArray(v7);
    return 0;
  }
  return VideoContentTypeStringFromCollectionArray;
}

__CFString *FigAlternateGetHDCPString(uint64_t a1)
{
  unsigned int v1;

  if (!a1)
    return CFSTR("Unknown");
  v1 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 136) + 1;
  if (v1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E2F87340[v1];
}

const __CFString *FigAlternateGetLoggingStringFromHDCPLevel(int a1)
{
  if ((a1 + 1) > 2)
    return CFSTR("Unknown");
  else
    return off_1E2F87340[a1 + 1];
}

uint64_t FigAlternateGetAudioGroupIDString(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88);
  return result;
}

uint64_t FigAlternateGetVideoGroupIDString(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 96);
  return result;
}

uint64_t FigAlternateGetSubtitleGroupIDString(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 104);
  return result;
}

uint64_t FigAlternateGetClosedCaptionGroupIDString(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 112);
  return result;
}

uint64_t FigAlternateIsVideoGroupSynthesized(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 121);
  return result;
}

uint64_t FigAlternateIsAudioGroupSynthesized(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 120);
  return result;
}

uint64_t FigAlternateIsSubtitleGroupSynthesized(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 122);
  return result;
}

uint64_t FigAlternateIsClosedCaptionGroupSynthesized(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 123);
  return result;
}

const __CFString *FigAlternateGetVideoRangeString(const __CFString *result)
{
  unsigned int v1;

  if (result)
  {
    v1 = FigAlternateGetVideoRange((uint64_t)result) - 1;
    if (v1 > 3)
      return CFSTR("Unknown");
    else
      return off_1E2F87358[v1];
  }
  return result;
}

uint64_t FigAlternateGetStableStreamIdentifier(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 128);
  return result;
}

uint64_t FigAlternateGetPlaylistAlternateURL(uint64_t result)
{
  if (result)
    return *(_QWORD *)CMBaseObjectGetDerivedStorage();
  return result;
}

uint64_t FigAlternateGetURLForCacheLookup(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return result;
}

uint64_t FigAlternateGetRenditionInfoForMediaType(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, int a6, const __CFDictionary **a7, _QWORD *a8, _QWORD *a9)
{
  const __CFDictionary **v14;
  const void *v17;
  const __CFDictionary *v18;
  const void *v19;
  const __CFDictionary *Value;
  const __CFDictionary *v21;

  if (a2 == 1986618469)
  {
    if (!a1)
      goto LABEL_14;
    v14 = (const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 192);
    a5 = a3;
  }
  else
  {
    if (a2 != 1936684398)
    {
      if (a2 == 1935832172 && a1)
      {
        v14 = (const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 200);
        goto LABEL_10;
      }
LABEL_14:
      v17 = 0;
      v19 = 0;
      Value = 0;
      goto LABEL_15;
    }
    if (!a1)
      goto LABEL_14;
    v14 = (const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
    a5 = a4;
  }
LABEL_10:
  v17 = 0;
  if (a5)
  {
    v18 = *v14;
    v19 = 0;
    Value = 0;
    if (v18)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(v18, a5);
      if (Value)
      {
        v21 = Value;
        v17 = CFDictionaryGetValue(Value, CFSTR("FBPAEGLMK_URL"));
        v19 = CFDictionaryGetValue(v21, CFSTR("FBPAEGLMK_URLForCacheLookup"));
        Value = (const __CFDictionary *)CFDictionaryGetValue(v21, CFSTR("FBPAEGLMK_StableStreamIdentifier"));
      }
      else
      {
        v17 = 0;
        v19 = 0;
      }
    }
  }
  else
  {
    v19 = 0;
    Value = 0;
  }
LABEL_15:
  if (a6 && !v17 && !v19 && !Value)
  {
    if (a1)
    {
      v17 = *(const void **)CMBaseObjectGetDerivedStorage();
      v19 = *(const void **)(CMBaseObjectGetDerivedStorage() + 40);
      Value = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 128);
    }
    else
    {
      v17 = 0;
      v19 = 0;
      Value = 0;
    }
  }
  if (a7)
    *a7 = Value;
  if (a8)
    *a8 = v17;
  if (a9)
    *a9 = v19;
  return 0;
}

uint64_t FigAlternateGetSubtitleGroupLocatorMap(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 200);
  return result;
}

uint64_t FigAlternateGetAudioGroupLocatorMap(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184);
  return result;
}

uint64_t FigAlternateGetVideoGroupLocatorMap(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 192);
  return result;
}

const __CFURL *FigAlternateGetCacheLookupIdentifier(const __CFURL *result)
{
  if (result)
  {
    result = *(const __CFURL **)(CMBaseObjectGetDerivedStorage() + 128);
    if (!result)
    {
      result = *(const __CFURL **)CMBaseObjectGetDerivedStorage();
      if (result)
        return (const __CFURL *)CFURLGetString(result);
    }
  }
  return result;
}

uint64_t FigAlternateGetClosedCaptionGroupLocatorMap(uint64_t result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 208);
  return result;
}

uint64_t FigAlternateGetMediaGroupLocatorMap(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  if (a2 > 1936684397)
  {
    if (a2 == 1936684398)
    {
      if (a1)
      {
        v3 = CMBaseObjectGetDerivedStorage() + 184;
        return *(_QWORD *)v3;
      }
      return 0;
    }
    if (a2 == 1986618469)
    {
      if (a1)
      {
        v3 = CMBaseObjectGetDerivedStorage() + 192;
        return *(_QWORD *)v3;
      }
      return 0;
    }
  }
  else
  {
    if (a2 == 1668047728)
    {
      if (a1)
      {
        v3 = CMBaseObjectGetDerivedStorage() + 208;
        return *(_QWORD *)v3;
      }
      return 0;
    }
    if (a2 == 1935832172)
    {
      if (a1)
      {
        v3 = CMBaseObjectGetDerivedStorage() + 200;
        return *(_QWORD *)v3;
      }
      return 0;
    }
  }
  return v2;
}

const __CFDictionary *FigAlternateMightHaveDummyAudioGroup(const __CFDictionary *result)
{
  if (result)
  {
    result = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
    if (result)
    {
      if (CFDictionaryContainsKey(result, CFSTR("FBPAEGLMK_Name")))
      {
        return 0;
      }
      else
      {
        CMBaseObjectGetDerivedStorage();
        return (const __CFDictionary *)(FigCFEqual() != 0);
      }
    }
  }
  return result;
}

const void *FigAlternateGetStableStreamIdentifierForMediaSubstream(uint64_t a1, int a2, const void *a3)
{
  CFDictionaryRef *v4;
  const __CFDictionary *Value;

  if (!a1)
    return 0;
  switch(a2)
  {
    case 1935832172:
      v4 = (CFDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 200);
      break;
    case 1986618469:
      v4 = (CFDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 192);
      break;
    case 1936684398:
      v4 = (CFDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 184);
      break;
    default:
      return 0;
  }
  if (*v4)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(*v4, a3);
    if (Value)
      return CFDictionaryGetValue(Value, CFSTR("FBPAEGLMK_StableStreamIdentifier"));
  }
  return 0;
}

const __CFString *FigAlternateGetAudioFormatIDs(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFString *v3;
  const __CFDictionary *MediaValidatorPlist;
  int v5;
  const __CFString *Value;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
    if (*(_BYTE *)(DerivedStorage + 408))
    {
      v3 = *(const __CFString **)(DerivedStorage + 400);
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
      if (FigAlternateHasAudioDeclared(a1))
      {
        v3 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
        if (v3)
        {
          MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
          v5 = FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v3, MediaValidatorPlist, 0, (const __CFDictionary **)&cf);
          v3 = 0;
          if (!v5)
          {
            Value = (const __CFString *)FigCFDictionaryGetValue();
            v3 = Value;
            if (Value)
              CFRetain(Value);
          }
        }
      }
      else
      {
        v3 = 0;
      }
      v7 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 480));
      *(_QWORD *)(v7 + 400) = v3;
      *(_BYTE *)(v7 + 408) = 1;
      MEMORY[0x19402EF04](*(_QWORD *)(v7 + 480));
      if (cf)
        CFRelease(cf);
    }
  }
  else
  {
    FigAlternateHasAudioDeclared(0);
    return 0;
  }
  return v3;
}

const __CFArray *FigAlternateGetCountOfValidMediaSubTypes(const __CFArray *result, int a2)
{
  if (!result)
    return result;
  if (a2 == 1986618469)
  {
    result = (const __CFArray *)FigAlternateGetVideoCodecs((uint64_t)result);
    if (!result)
      return result;
    return (const __CFArray *)CFArrayGetCount(result);
  }
  if (a2 != 1936684398)
    return 0;
  result = (const __CFArray *)FigAlternateGetAudioFormatIDs((uint64_t)result);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const void *FigAlternateGetVideoCodecs(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const __CFString *v4;
  const __CFDictionary *MediaValidatorPlist;
  const void *Value;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    v4 = 0;
    v3 = 0;
    if (!FigAlternateHasVideoDeclared(0))
      return v3;
LABEL_8:
    MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
    v3 = 0;
    if (!FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v4, MediaValidatorPlist, 0, (const __CFDictionary **)&cf))
    {
      Value = (const void *)FigCFDictionaryGetValue();
      v3 = Value;
      if (Value)
        CFRetain(Value);
    }
    if (!a1)
      goto LABEL_15;
    goto LABEL_14;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 392))
  {
    v3 = *(const void **)(DerivedStorage + 384);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    return v3;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  if (FigAlternateHasVideoDeclared(a1))
  {
    v4 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    goto LABEL_8;
  }
  v3 = 0;
LABEL_14:
  v7 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 480));
  *(_QWORD *)(v7 + 384) = v3;
  *(_BYTE *)(v7 + 392) = 1;
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 480));
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t FigAlternateHasAudioFormatID(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const __CFDictionary *v7;
  int64_t Count;
  int64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (!a1)
    return 0;
  if (a2 != 1700997939)
    return fa_CodecsIncludeAudioFormatChoice(a1, a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (!*(_BYTE *)(DerivedStorage + 346))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    if (!fa_CodecsIncludeAudioFormatChoice(a1, 1700998451))
    {
      v4 = 0;
LABEL_17:
      v13 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v13 + 480));
      *(_BYTE *)(v13 + 345) = v4;
      *(_BYTE *)(v13 + 346) = 1;
      v5 = *(_QWORD *)(v13 + 480);
      goto LABEL_18;
    }
    v7 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
    Count = FigCFDictionaryGetCount();
    if (Count < 1)
    {
      v4 = 0;
      v11 = 0;
LABEL_16:
      free(v11);
      goto LABEL_17;
    }
    v9 = Count;
    v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v10)
    {
      v11 = v10;
      CFDictionaryGetKeysAndValues(v7, v10, 0);
      v12 = 0;
      while (1)
      {
        v14 = 0;
        FigAlternateGetAudioChannelCount(a1, (uint64_t)v11[v12], &v14);
        if ((v14 & 1) != 0)
          break;
        if (v9 == ++v12)
        {
          v4 = 0;
          goto LABEL_16;
        }
      }
      v4 = 1;
      goto LABEL_16;
    }
    FigSignalErrorAt();
    return 0;
  }
  v4 = *(unsigned __int8 *)(DerivedStorage + 345);
  v5 = *(_QWORD *)(DerivedStorage + 480);
LABEL_18:
  MEMORY[0x19402EF04](v5);
  return v4;
}

uint64_t fa_CodecsIncludeAudioFormatChoice(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DerivedStorage;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1)
    CMBaseObjectGetDerivedStorage();
  v3 = 0;
  if (a2 <= 1633889586)
  {
    if (a2 > 1633772319)
    {
      switch(a2)
      {
        case 1633772320:
          DerivedStorage = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(DerivedStorage + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
          if (*(_BYTE *)(DerivedStorage + 322))
          {
            v3 = *(unsigned __int8 *)(DerivedStorage + 321);
          }
          else
          {
            MEMORY[0x19402EF04](*v5);
            v3 = FigCFStringFind();
            v28 = CMBaseObjectGetDerivedStorage();
            v5 = (_QWORD *)(v28 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v28 + 480));
            *(_BYTE *)(v28 + 321) = v3;
            *(_BYTE *)(v28 + 322) = 1;
          }
          goto LABEL_59;
        case 1633772392:
          v16 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v16 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 480));
          if (*(_BYTE *)(v16 + 324))
          {
            v3 = *(unsigned __int8 *)(v16 + 323);
          }
          else
          {
            MEMORY[0x19402EF04](*v5);
            v3 = FigCFStringFind();
            v29 = CMBaseObjectGetDerivedStorage();
            v5 = (_QWORD *)(v29 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v29 + 480));
            *(_BYTE *)(v29 + 323) = v3;
            *(_BYTE *)(v29 + 324) = 1;
          }
          goto LABEL_59;
        case 1633772400:
          v8 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v8 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 480));
          if (*(_BYTE *)(v8 + 326))
          {
            v3 = *(unsigned __int8 *)(v8 + 325);
          }
          else
          {
            MEMORY[0x19402EF04](*v5);
            v3 = FigCFStringFind();
            v21 = CMBaseObjectGetDerivedStorage();
            v5 = (_QWORD *)(v21 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v21 + 480));
            *(_BYTE *)(v21 + 325) = v3;
            *(_BYTE *)(v21 + 326) = 1;
          }
          goto LABEL_59;
      }
    }
    else
    {
      switch(a2)
      {
        case 778924081:
          v11 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v11 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 480));
          if (*(_BYTE *)(v11 + 328))
          {
            v3 = *(unsigned __int8 *)(v11 + 327);
          }
          else
          {
            MEMORY[0x19402EF04](*v5);
            v3 = FigCFStringFind();
            v24 = CMBaseObjectGetDerivedStorage();
            v5 = (_QWORD *)(v24 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v24 + 480));
            *(_BYTE *)(v24 + 327) = v3;
            *(_BYTE *)(v24 + 328) = 1;
          }
          goto LABEL_59;
        case 778924082:
          v12 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v12 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v12 + 480));
          if (*(_BYTE *)(v12 + 330))
          {
            v3 = *(unsigned __int8 *)(v12 + 329);
          }
          else
          {
            MEMORY[0x19402EF04](*v5);
            v3 = FigCFStringFind();
            v25 = CMBaseObjectGetDerivedStorage();
            v5 = (_QWORD *)(v25 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v25 + 480));
            *(_BYTE *)(v25 + 329) = v3;
            *(_BYTE *)(v25 + 330) = 1;
          }
          goto LABEL_59;
        case 778924083:
          v6 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v6 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 480));
          if (*(_BYTE *)(v6 + 332))
          {
            v3 = *(unsigned __int8 *)(v6 + 331);
          }
          else
          {
            MEMORY[0x19402EF04](*v5);
            v3 = FigCFStringFind();
            v19 = CMBaseObjectGetDerivedStorage();
            v5 = (_QWORD *)(v19 + 480);
            MEMORY[0x19402EEEC](*(_QWORD *)(v19 + 480));
            *(_BYTE *)(v19 + 331) = v3;
            *(_BYTE *)(v19 + 332) = 1;
          }
          goto LABEL_59;
      }
    }
  }
  else if (a2 <= 1700998450)
  {
    switch(a2)
    {
      case 1633889587:
        v13 = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(v13 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v13 + 480));
        if (*(_BYTE *)(v13 + 342))
        {
          v3 = *(unsigned __int8 *)(v13 + 341);
        }
        else
        {
          MEMORY[0x19402EF04](*v5);
          v3 = FigCFStringFind();
          v26 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v26 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v26 + 480));
          *(_BYTE *)(v26 + 341) = v3;
          *(_BYTE *)(v26 + 342) = 1;
        }
        goto LABEL_59;
      case 1634492771:
        v14 = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(v14 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 480));
        if (*(_BYTE *)(v14 + 340))
        {
          v3 = *(unsigned __int8 *)(v14 + 339);
        }
        else
        {
          MEMORY[0x19402EF04](*v5);
          v3 = FigCFStringFind();
          v27 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v27 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v27 + 480));
          *(_BYTE *)(v27 + 339) = v3;
          *(_BYTE *)(v27 + 340) = 1;
        }
        goto LABEL_59;
      case 1634754915:
        v7 = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(v7 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 480));
        if (*(_BYTE *)(v7 + 348))
        {
          v3 = *(unsigned __int8 *)(v7 + 347);
        }
        else
        {
          MEMORY[0x19402EF04](*v5);
          v3 = FigCFStringFind();
          v20 = CMBaseObjectGetDerivedStorage();
          v5 = (_QWORD *)(v20 + 480);
          MEMORY[0x19402EEEC](*(_QWORD *)(v20 + 480));
          *(_BYTE *)(v20 + 347) = v3;
          *(_BYTE *)(v20 + 348) = 1;
        }
        goto LABEL_59;
    }
  }
  else if (a2 > 1869641074)
  {
    if (a2 == 1869641075)
    {
      v17 = CMBaseObjectGetDerivedStorage();
      v5 = (_QWORD *)(v17 + 480);
      MEMORY[0x19402EEEC](*(_QWORD *)(v17 + 480));
      if (*(_BYTE *)(v17 + 338))
      {
        v3 = *(unsigned __int8 *)(v17 + 337);
      }
      else
      {
        MEMORY[0x19402EF04](*v5);
        v3 = FigCFStringFind();
        v30 = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(v30 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v30 + 480));
        *(_BYTE *)(v30 + 337) = v3;
        *(_BYTE *)(v30 + 338) = 1;
      }
      goto LABEL_59;
    }
    if (a2 == 1970495843)
    {
      v9 = CMBaseObjectGetDerivedStorage();
      v5 = (_QWORD *)(v9 + 480);
      MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 480));
      if (*(_BYTE *)(v9 + 334))
      {
        v3 = *(unsigned __int8 *)(v9 + 333);
      }
      else
      {
        MEMORY[0x19402EF04](*v5);
        v3 = FigCFStringFind();
        v22 = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(v22 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v22 + 480));
        *(_BYTE *)(v22 + 333) = v3;
        *(_BYTE *)(v22 + 334) = 1;
      }
      goto LABEL_59;
    }
  }
  else
  {
    if (a2 == 1700998451)
    {
      v10 = CMBaseObjectGetDerivedStorage();
      v5 = (_QWORD *)(v10 + 480);
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 480));
      if (*(_BYTE *)(v10 + 344))
      {
        v3 = *(unsigned __int8 *)(v10 + 343);
      }
      else
      {
        MEMORY[0x19402EF04](*v5);
        v3 = FigCFStringFind();
        v23 = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(v23 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v23 + 480));
        *(_BYTE *)(v23 + 343) = v3;
        *(_BYTE *)(v23 + 344) = 1;
      }
      goto LABEL_59;
    }
    if (a2 == 1718378851)
    {
      v4 = CMBaseObjectGetDerivedStorage();
      v5 = (_QWORD *)(v4 + 480);
      MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 480));
      if (*(_BYTE *)(v4 + 336))
      {
        v3 = *(unsigned __int8 *)(v4 + 335);
      }
      else
      {
        MEMORY[0x19402EF04](*v5);
        v3 = FigCFStringFind();
        v18 = CMBaseObjectGetDerivedStorage();
        v5 = (_QWORD *)(v18 + 480);
        MEMORY[0x19402EEEC](*(_QWORD *)(v18 + 480));
        *(_BYTE *)(v18 + 335) = v3;
        *(_BYTE *)(v18 + 336) = 1;
      }
LABEL_59:
      MEMORY[0x19402EF04](*v5);
    }
  }
  return v3;
}

uint64_t FigAlternateGetAudioChannelCount(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  _QWORD v6[3];

  memset(v6, 0, sizeof(v6));
  fa_getDeclaredAudioInfo(v6);
  result = LODWORD(v6[0]);
  if (a3)
    *a3 = HIDWORD(v6[0]);
  if (!(_DWORD)result)
    return FigAlternateGetAudioChannelCountAccordingToCodecTag(a1);
  return result;
}

uint64_t FigAlternateHasAudioFormat(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;

  if (result)
  {
    v2 = result;
    switch(a2)
    {
      case 1:
        return fa_CodecsIncludeAudioFormatChoice(result, 1633772320)
            || fa_CodecsIncludeAudioFormatChoice(v2, 1633772392)
            || fa_CodecsIncludeAudioFormatChoice(v2, 1633772400)
            || fa_CodecsIncludeAudioFormatChoice(v2, 778924083)
            || fa_CodecsIncludeAudioFormatChoice(v2, 1970495843)
            || fa_CodecsIncludeAudioFormatChoice(v2, 778924082)
            || fa_CodecsIncludeAudioFormatChoice(v2, 778924081) != 0;
      case 2:
        v3 = 1718378851;
        goto LABEL_19;
      case 3:
        v3 = 1869641075;
        goto LABEL_19;
      case 4:
        v3 = 1634492771;
        goto LABEL_19;
      case 5:
        v3 = 1633889587;
        goto LABEL_19;
      case 6:
        v3 = 1700998451;
        goto LABEL_19;
      case 7:
        return FigAlternateHasAudioFormatID(result, 1700997939);
      case 8:
        v3 = 1634754915;
LABEL_19:
        result = fa_CodecsIncludeAudioFormatChoice(result, v3);
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

BOOL FigAlternateGetBestAudioFormat(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return FigAlternateHasAudioFormat(0, 1) != 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 268))
  {
    v3 = *(unsigned int *)(DerivedStorage + 264);
    v4 = *(_QWORD *)(DerivedStorage + 480);
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    if (fa_CodecsIncludeAudioFormatChoice(a1, 1718378851))
    {
      v3 = 2;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1634492771))
    {
      v3 = 4;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1634754915))
    {
      v3 = 8;
    }
    else if (FigAlternateHasAudioFormatID(a1, 1700997939))
    {
      v3 = 7;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1700998451))
    {
      v3 = 6;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1633889587))
    {
      v3 = 5;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1869641075))
    {
      v3 = 3;
    }
    else
    {
      v3 = FigAlternateHasAudioFormat(a1, 1) != 0;
    }
    v5 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 480));
    *(_DWORD *)(v5 + 264) = v3;
    *(_BYTE *)(v5 + 268) = 1;
    v4 = *(_QWORD *)(v5 + 480);
  }
  MEMORY[0x19402EF04](v4);
  return v3;
}

uint64_t FigAlternateGetDeclaredAudioChannelCount(const void *a1, const void *a2, _DWORD *a3)
{
  __int128 v5;
  uint64_t v6;

  v5 = 0uLL;
  v6 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v5);
  if (a3)
    *a3 = DWORD1(v5);
  return v5;
}

void fa_getDeclaredAudioInfo(const void *a1@<X0>, const void *a2@<X1>, __int128 *a3@<X8>)
{
  uint64_t DerivedStorage;
  const __CFData *Value;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  CFTypeID v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  CFTypeID v14;
  const __CFString *v15;
  const __CFString *v16;
  CFTypeID v17;
  const __CFAllocator *v18;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFString *ValueAtIndex;
  const __CFString *v21;
  int v22;
  CFIndex location;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFArray *v27;
  CFIndex v28;
  CFIndex i;
  uint64_t v30;
  const __CFAllocator *v31;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v33;
  CFDataRef v34;
  CFDataRef v35;
  __int128 v36;
  uint64_t v37;
  CFRange v38;
  CFRange v39;

  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  if (a2 && a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
    if (FigCFDictionaryGetCount() >= 1)
    {
      Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 464), a2);
      if (Value)
      {
        v38.location = 0;
        v38.length = 24;
        CFDataGetBytes(Value, v38, (UInt8 *)a3);
        JUMPOUT(0x19402EF04);
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
    v9 = CMBaseObjectGetDerivedStorage();
    v10 = *(const __CFDictionary **)(v9 + 184);
    if (v10)
    {
      v11 = CFGetTypeID(*(CFTypeRef *)(v9 + 184));
      if (v11 == CFDictionaryGetTypeID())
      {
        v12 = (const __CFDictionary *)CFDictionaryGetValue(v10, a2);
        if (v12)
        {
          v13 = v12;
          v14 = CFGetTypeID(v12);
          if (v14 == CFDictionaryGetTypeID())
          {
            v15 = (const __CFString *)CFDictionaryGetValue(v13, CFSTR("FBPAEGLMK_Channels"));
            v16 = v15;
            if (!v15)
              goto LABEL_43;
            v17 = CFGetTypeID(v15);
            if (v17 != CFStringGetTypeID())
              return;
            v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16, CFSTR("/"));
            if (!ArrayBySeparatingStrings)
              return;
            v16 = (const __CFString *)ArrayBySeparatingStrings;
            if (CFArrayGetCount(ArrayBySeparatingStrings) < 1)
            {
              v27 = 0;
              goto LABEL_48;
            }
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v16, 0);
            *(_DWORD *)a3 = CFStringGetIntValue(ValueAtIndex);
            if (CFArrayGetCount((CFArrayRef)v16) >= 2)
            {
              v21 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v16, 1);
              if (FigAlternateHasAudioFormatID((uint64_t)a1, 1700998451)
                && FigCFStringFind())
              {
                v22 = 1;
                *((_DWORD *)a3 + 1) = 1;
                goto LABEL_24;
              }
              if (v8)
              {
                if (FigAlternateHasAudioFormatID((uint64_t)a1, 1634754915))
                {
                  location = CFStringFind(v21, CFSTR("OA"), 0).location;
                  if (location != -1)
                  {
                    v39.length = location;
                    v39.location = 0;
                    v24 = CFStringCreateWithSubstring(v18, v21, v39);
                    if (v24)
                    {
                      v25 = v24;
                      *((_DWORD *)a3 + 2) = CFStringGetIntValue(v24);
                      CFRelease(v25);
                    }
                  }
                }
              }
            }
            v22 = 0;
LABEL_24:
            if (CFArrayGetCount((CFArrayRef)v16) > 2)
            {
              LODWORD(v36) = 0;
              v26 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v16, 2);
              v27 = CFStringCreateArrayBySeparatingStrings(v18, v26, CFSTR(","));
              v28 = 0;
              if (!v27)
                goto LABEL_27;
LABEL_26:
              for (i = CFArrayGetCount(v27); ; i = 0)
              {
                if (v28 >= i)
                  goto LABEL_44;
                CFArrayGetValueAtIndex(v27, v28);
                if (FigCFStringFind())
                  break;
                if (FigCFStringFind())
                {
                  v22 |= 8u;
                  goto LABEL_33;
                }
                if (FigCFStringFind())
                {
                  v22 |= 4u;
                  *((_DWORD *)a3 + 1) = v22;
                  if (FigCFStringGetIntAfterString())
                    *((_DWORD *)a3 + 4) = v36;
                }
                else if (FigCFStringGetIntAfterString())
                {
                  *((_DWORD *)a3 + 3) = v36;
                }
                else if (FigCFStringGetIntAfterString())
                {
                  *((_DWORD *)a3 + 5) = v36;
                }
LABEL_34:
                ++v28;
                if (v27)
                  goto LABEL_26;
LABEL_27:
                ;
              }
              v22 |= 2u;
LABEL_33:
              *((_DWORD *)a3 + 1) = v22;
              goto LABEL_34;
            }
LABEL_43:
            v27 = 0;
LABEL_44:
            v36 = *a3;
            v37 = *((_QWORD *)a3 + 2);
            v30 = CMBaseObjectGetDerivedStorage();
            MEMORY[0x19402EEEC](*(_QWORD *)(v30 + 480));
            if ((*(_QWORD *)(v30 + 464)
               || (v31 = CFGetAllocator(a1),
                   Mutable = CFDictionaryCreateMutable(v31, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
                   (*(_QWORD *)(v30 + 464) = Mutable) != 0))
              && (v33 = CFGetAllocator(a1), (v34 = CFDataCreate(v33, (const UInt8 *)&v36, 24)) != 0))
            {
              v35 = v34;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v30 + 464), a2, v34);
              MEMORY[0x19402EF04](*(_QWORD *)(v30 + 480));
              CFRelease(v35);
              if (!v16)
                goto LABEL_49;
            }
            else
            {
              MEMORY[0x19402EF04](*(_QWORD *)(v30 + 480));
              if (!v16)
              {
LABEL_49:
                if (v27)
                  CFRelease(v27);
                return;
              }
            }
LABEL_48:
            CFRelease(v16);
            goto LABEL_49;
          }
        }
      }
    }
  }
}

uint64_t FigAlternateGetAudioChannelCountAccordingToCodecTag(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
    if (*(_BYTE *)(DerivedStorage + 276))
    {
      v3 = *(unsigned int *)(DerivedStorage + 272);
      v4 = *(_QWORD *)(DerivedStorage + 480);
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
      if (FigAlternateHasAudioFormatID(a1, 1634754915))
      {
        v3 = 4;
      }
      else if (FigAlternateHasAudioFormatID(a1, 1700998451))
      {
        v3 = 8;
      }
      else if (FigAlternateHasAudioFormatID(a1, 1633889587))
      {
        v3 = 6;
      }
      else if (FigAlternateHasAudioFormatID(a1, 1718378851)
             || FigAlternateHasAudioFormatID(a1, 1869641075)
             || FigAlternateHasAudioFormatID(a1, 1634492771)
             || FigAlternateHasAudioFormat(a1, 1))
      {
        v3 = 2;
      }
      else
      {
        v3 = 2 * (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 24) == 0);
      }
      v5 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 480));
      *(_DWORD *)(v5 + 272) = v3;
      *(_BYTE *)(v5 + 276) = 1;
      v4 = *(_QWORD *)(v5 + 480);
    }
    MEMORY[0x19402EF04](v4);
  }
  else
  {
    FigAlternateHasAudioFormat(0, 1);
    return 2;
  }
  return v3;
}

uint64_t FigAlternateGetAudioChannelCounts(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t AudioChannelCount;
  uint64_t DerivedStorage;
  int v8;
  uint64_t v9;
  const __CFString *AudioFormatIDs;
  const __CFArray *v11;
  CFIndex v12;
  int AudioMaximumDecodeChannelCount;
  uint64_t v14;
  BOOL v15;

  AudioChannelCount = FigAlternateGetAudioChannelCount(a1, a2, a4);
  if (a3)
  {
    *a3 = 0;
    if (a1)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
      if (*(_BYTE *)(DerivedStorage + 428))
      {
        v8 = *(_DWORD *)(DerivedStorage + 424);
        v9 = *(_QWORD *)(DerivedStorage + 480);
      }
      else
      {
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
        AudioFormatIDs = FigAlternateGetAudioFormatIDs(a1);
        if (AudioFormatIDs
          && (v11 = (const __CFArray *)AudioFormatIDs, CFArrayGetCount((CFArrayRef)AudioFormatIDs) >= 1))
        {
          v8 = 0;
          v12 = 0;
          do
          {
            FigCFArrayGetInt32AtIndex();
            AudioMaximumDecodeChannelCount = FigStreamAlternateGetAudioMaximumDecodeChannelCount(0);
            if (AudioMaximumDecodeChannelCount > v8)
              v8 = AudioMaximumDecodeChannelCount;
            ++v12;
          }
          while (CFArrayGetCount(v11) > v12);
        }
        else
        {
          v8 = 0;
        }
        v14 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 480));
        *(_DWORD *)(v14 + 424) = v8;
        *(_BYTE *)(v14 + 428) = 1;
        v9 = *(_QWORD *)(v14 + 480);
      }
      MEMORY[0x19402EF04](v9);
      if (v8)
        v15 = (int)AudioChannelCount <= v8;
      else
        v15 = 1;
      if (!v15)
        *a3 = AudioChannelCount - v8;
    }
  }
  return AudioChannelCount;
}

uint64_t FigAlternateHasLosslessAudio(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_QWORD *)(DerivedStorage + 480);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 286))
  {
    v4 = *(unsigned __int8 *)(DerivedStorage + 285);
  }
  else
  {
    MEMORY[0x19402EF04](*v3);
    v4 = 1;
    if (!fa_CodecsIncludeAudioFormatChoice(a1, 1718378851))
      v4 = fa_CodecsIncludeAudioFormatChoice(a1, 1634492771) != 0;
    v5 = CMBaseObjectGetDerivedStorage();
    v3 = (_QWORD *)(v5 + 480);
    MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 480));
    *(_BYTE *)(v5 + 285) = v4;
    *(_BYTE *)(v5 + 286) = 1;
  }
  MEMORY[0x19402EF04](*v3);
  return v4;
}

const void *FigAlternateGetAudioBitDepth(uint64_t a1, const void *a2)
{
  const void *result;
  uint64_t DerivedStorage;
  const __CFDictionary *v6;
  CFTypeID v7;
  CFTypeID v8;

  result = 0;
  if (a1 && a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = *(const __CFDictionary **)(DerivedStorage + 184);
    if (!v6)
      return 0;
    v7 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 184));
    if (v7 != CFDictionaryGetTypeID())
      return 0;
    result = CFDictionaryGetValue(v6, a2);
    if (!result)
      return result;
    v8 = CFGetTypeID(result);
    if (v8 != CFDictionaryGetTypeID())
      return 0;
    FigCFDictionaryGetInt32IfPresent();
    return 0;
  }
  return result;
}

double FigAlternateGetAudioSampleRate(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v4;
  CFTypeID v5;
  const void *Value;
  CFTypeID v7;

  if (a1)
  {
    if (a2)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v4 = *(const __CFDictionary **)(DerivedStorage + 184);
      if (v4)
      {
        v5 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 184));
        if (v5 == CFDictionaryGetTypeID())
        {
          Value = CFDictionaryGetValue(v4, a2);
          if (Value)
          {
            v7 = CFGetTypeID(Value);
            if (v7 == CFDictionaryGetTypeID())
              FigCFDictionaryGetDoubleIfPresent();
          }
        }
      }
    }
  }
  return 0.0;
}

uint64_t FigAlternateGetAudioInstreamID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v4;
  CFTypeID v5;
  const void *Value;
  CFTypeID v7;

  if (a1
    && a2
    && (DerivedStorage = CMBaseObjectGetDerivedStorage(), (v4 = *(const __CFDictionary **)(DerivedStorage + 184)) != 0)
    && (v5 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 184)), v5 == CFDictionaryGetTypeID())
    && (Value = CFDictionaryGetValue(v4, a2)) != 0
    && (v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    return FigCFDictionaryGetValue();
  }
  else
  {
    return 0;
  }
}

double FigAlternateGetMaxAudioSampleRate(uint64_t a1)
{
  uint64_t DerivedStorage;
  double v3;
  const __CFDictionary *v4;
  int64_t Count;
  int64_t v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  double AudioSampleRate;
  uint64_t v11;

  if (!a1)
  {
    v4 = 0;
    if (!FigAlternateHasAudioDeclared(0))
      goto LABEL_5;
    goto LABEL_8;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (!*(_BYTE *)(DerivedStorage + 376))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    if (!FigAlternateHasAudioDeclared(a1))
    {
      v8 = 0;
      v3 = 0.0;
LABEL_19:
      v11 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 480));
      *(double *)(v11 + 368) = v3;
      *(_BYTE *)(v11 + 376) = 1;
      MEMORY[0x19402EF04](*(_QWORD *)(v11 + 480));
      v4 = (const __CFDictionary *)v8;
      goto LABEL_20;
    }
    v4 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
LABEL_8:
    Count = FigCFDictionaryGetCount();
    if (Count < 1)
    {
      v8 = 0;
      v3 = 0.0;
      goto LABEL_16;
    }
    v6 = Count;
    v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v7)
    {
      v8 = v7;
      CFDictionaryGetKeysAndValues(v4, v7, 0);
      v9 = 0;
      v3 = 0.0;
      do
      {
        AudioSampleRate = FigAlternateGetAudioSampleRate(a1, v8[v9]);
        if (AudioSampleRate > v3)
          v3 = AudioSampleRate;
        ++v9;
      }
      while (v6 != v9);
LABEL_16:
      v4 = (const __CFDictionary *)v8;
      if (!a1)
        goto LABEL_20;
      goto LABEL_19;
    }
    FigSignalErrorAt();
    v4 = 0;
LABEL_5:
    v3 = 0.0;
LABEL_20:
    free(v4);
    return v3;
  }
  v3 = *(double *)(DerivedStorage + 368);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return v3;
}

uint64_t FigAlternateWillPlayIfFairplayProtected(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t HasValidCodecs;
  uint64_t v5;

  if (!a1)
    return 1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_QWORD *)(DerivedStorage + 480);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (*(_BYTE *)(DerivedStorage + 420))
  {
    HasValidCodecs = *(unsigned __int8 *)(DerivedStorage + 419);
  }
  else
  {
    MEMORY[0x19402EF04](*v3);
    HasValidCodecs = FigAlternateHasValidCodecs(a1);
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16)
      && (_DWORD)HasValidCodecs
      && FigAlternateHasValidCodecs(a1)
      && fa_hasVideoDecodedBySoftware(a1))
    {
      if (FigAlternateHasVideoFormat(a1, 4) || FigAlternateHasVideoFormat(a1, 7))
      {
        HasValidCodecs = 0;
      }
      else
      {
        HasValidCodecs = 0;
        if (!fa_CodecsIncludeVideoFormat(a1, 1635135537, 0))
          HasValidCodecs = fa_CodecsIncludeVideoFormat(a1, 1684108849, 0) == 0;
      }
    }
    v5 = CMBaseObjectGetDerivedStorage();
    v3 = (_QWORD *)(v5 + 480);
    MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 480));
    *(_BYTE *)(v5 + 419) = HasValidCodecs;
    *(_BYTE *)(v5 + 420) = 1;
  }
  MEMORY[0x19402EF04](*v3);
  return HasValidCodecs;
}

unint64_t fa_hasVideoDecodedBySoftware(uint64_t a1)
{
  uint64_t DerivedStorage;
  unint64_t v3;
  uint64_t v4;
  const __CFDictionary *MediaValidatorPlist;
  uint64_t v6;
  int v8;

  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (!*(_BYTE *)(DerivedStorage + 418))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    if (a1)
    {
      v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
      if (!v3)
      {
LABEL_10:
        v6 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 480));
        *(_BYTE *)(v6 + 417) = v3;
        *(_BYTE *)(v6 + 418) = 1;
        v4 = *(_QWORD *)(v6 + 480);
        goto LABEL_11;
      }
      MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
      if (!MediaValidatorPlist)
        MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
      if (!FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming((CFStringRef)v3, MediaValidatorPlist, &v8, 0))
      {
        v3 = (~v8 & 0x18) == 0;
        goto LABEL_10;
      }
    }
    v3 = 0;
    goto LABEL_10;
  }
  v3 = *(unsigned __int8 *)(DerivedStorage + 417);
  v4 = *(_QWORD *)(DerivedStorage + 480);
LABEL_11:
  MEMORY[0x19402EF04](v4);
  return v3;
}

BOOL FigAlternateHasVideoCodecRequiringSoftwareDecode(_BOOL8 result)
{
  if (result)
    return fa_hasVideoDecodedBySoftware(result) != 0;
  return result;
}

unint64_t FigAlternateShouldBeAvoidedForPlaybackInLPM(unint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = fa_hasVideoDecodedBySoftware(result);
    if (!(_DWORD)result)
      return FigAlternateGetVideoRange(v1) > 1;
  }
  return result;
}

uint64_t FigAlternateGetMaxAudioChannelCount(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t AudioChannelCountAccordingToCodecTag;
  const void **v4;
  int64_t Count;
  int64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  if (!a1)
  {
    AudioChannelCountAccordingToCodecTag = 0;
    v4 = 0;
    if (!FigAlternateHasAudioDeclared(0))
      goto LABEL_19;
    goto LABEL_8;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (!*(_BYTE *)(DerivedStorage + 284))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    if (!FigAlternateHasAudioDeclared((uint64_t)a1))
      goto LABEL_18;
    AudioChannelCountAccordingToCodecTag = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184);
LABEL_8:
    Count = FigCFDictionaryGetCount();
    if (Count >= 1)
    {
      v6 = Count;
      v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
      if (!v4)
      {
        FigSignalErrorAt();
        AudioChannelCountAccordingToCodecTag = 0;
        goto LABEL_21;
      }
      CFDictionaryGetKeysAndValues((CFDictionaryRef)AudioChannelCountAccordingToCodecTag, v4, 0);
      v7 = 0;
      LODWORD(AudioChannelCountAccordingToCodecTag) = 0;
      do
      {
        v8 = v4[v7];
        v11 = 0uLL;
        v12 = 0;
        fa_getDeclaredAudioInfo(a1, v8, &v11);
        if ((int)v11 <= (int)AudioChannelCountAccordingToCodecTag)
          AudioChannelCountAccordingToCodecTag = AudioChannelCountAccordingToCodecTag;
        else
          AudioChannelCountAccordingToCodecTag = v11;
        ++v7;
      }
      while (v6 != v7);
      if ((_DWORD)AudioChannelCountAccordingToCodecTag)
      {
        if (!a1)
          goto LABEL_21;
        goto LABEL_20;
      }
LABEL_19:
      AudioChannelCountAccordingToCodecTag = FigAlternateGetAudioChannelCountAccordingToCodecTag((uint64_t)a1);
      if (!a1)
      {
LABEL_21:
        free(v4);
        return AudioChannelCountAccordingToCodecTag;
      }
LABEL_20:
      v9 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 480));
      *(_DWORD *)(v9 + 280) = AudioChannelCountAccordingToCodecTag;
      *(_BYTE *)(v9 + 284) = 1;
      MEMORY[0x19402EF04](*(_QWORD *)(v9 + 480));
      goto LABEL_21;
    }
LABEL_18:
    v4 = 0;
    goto LABEL_19;
  }
  AudioChannelCountAccordingToCodecTag = *(unsigned int *)(DerivedStorage + 280);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return AudioChannelCountAccordingToCodecTag;
}

uint64_t FigAlternateGetMaxPlayableAudioChannelCount(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t AudioChannelCountAccordingToCodecTag;
  const void **v4;
  int64_t Count;
  int64_t v6;
  uint64_t v7;
  int AudioChannelCounts;
  uint64_t v9;
  int v11;

  if (!a1)
  {
    AudioChannelCountAccordingToCodecTag = 0;
    v4 = 0;
    if (!FigAlternateHasAudioDeclared(0))
      goto LABEL_19;
    goto LABEL_8;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (!*(_BYTE *)(DerivedStorage + 364))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    if (!FigAlternateHasAudioDeclared(a1))
      goto LABEL_18;
    AudioChannelCountAccordingToCodecTag = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184);
LABEL_8:
    Count = FigCFDictionaryGetCount();
    if (Count >= 1)
    {
      v6 = Count;
      v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
      if (!v4)
      {
        FigSignalErrorAt();
        AudioChannelCountAccordingToCodecTag = 0;
        goto LABEL_21;
      }
      CFDictionaryGetKeysAndValues((CFDictionaryRef)AudioChannelCountAccordingToCodecTag, v4, 0);
      v7 = 0;
      LODWORD(AudioChannelCountAccordingToCodecTag) = 0;
      do
      {
        v11 = 0;
        AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, (uint64_t)v4[v7], &v11, 0);
        if (AudioChannelCounts - v11 <= (int)AudioChannelCountAccordingToCodecTag)
          AudioChannelCountAccordingToCodecTag = AudioChannelCountAccordingToCodecTag;
        else
          AudioChannelCountAccordingToCodecTag = (AudioChannelCounts - v11);
        ++v7;
      }
      while (v6 != v7);
      if ((_DWORD)AudioChannelCountAccordingToCodecTag)
      {
        if (!a1)
          goto LABEL_21;
        goto LABEL_20;
      }
LABEL_19:
      AudioChannelCountAccordingToCodecTag = FigAlternateGetAudioChannelCountAccordingToCodecTag(a1);
      if (!a1)
      {
LABEL_21:
        free(v4);
        return AudioChannelCountAccordingToCodecTag;
      }
LABEL_20:
      v9 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 480));
      *(_DWORD *)(v9 + 360) = AudioChannelCountAccordingToCodecTag;
      *(_BYTE *)(v9 + 364) = 1;
      MEMORY[0x19402EF04](*(_QWORD *)(v9 + 480));
      goto LABEL_21;
    }
LABEL_18:
    v4 = 0;
    goto LABEL_19;
  }
  AudioChannelCountAccordingToCodecTag = *(unsigned int *)(DerivedStorage + 360);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return AudioChannelCountAccordingToCodecTag;
}

uint64_t FigAlternateGetImmersiveAudioCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v6;

  v6 = 0;
  v2 = 1;
  if (a2)
  {
    FigAlternateGetAudioChannelCount(a1, a2, &v6);
    if ((v6 & 4) != 0)
      v3 = 2;
    else
      v3 = 1;
    if ((v6 & 8) != 0)
      v4 = 4;
    else
      v4 = v3;
    if ((v6 & 2) != 0)
      return 3;
    else
      return v4;
  }
  return v2;
}

uint64_t FigAlternateHasBinauralAudio(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFDictionary *v4;
  int64_t Count;
  int64_t v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v4 = 0;
    if (!FigAlternateHasAudioDeclared(0))
      goto LABEL_5;
    goto LABEL_8;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  if (!*(_BYTE *)(DerivedStorage + 358))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
    if (!FigAlternateHasAudioDeclared(a1))
    {
      v3 = 0;
      v8 = 0;
LABEL_20:
      v10 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 480));
      *(_BYTE *)(v10 + 357) = v3;
      *(_BYTE *)(v10 + 358) = 1;
      MEMORY[0x19402EF04](*(_QWORD *)(v10 + 480));
      v4 = (const __CFDictionary *)v8;
      goto LABEL_21;
    }
    v4 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
LABEL_8:
    Count = FigCFDictionaryGetCount();
    if (Count < 1)
    {
      v8 = 0;
LABEL_15:
      v3 = 0;
LABEL_17:
      v4 = (const __CFDictionary *)v8;
      if (!a1)
        goto LABEL_21;
      goto LABEL_20;
    }
    v6 = Count;
    v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v7)
    {
      v8 = v7;
      CFDictionaryGetKeysAndValues(v4, v7, 0);
      v9 = 0;
      while (FigAlternateGetImmersiveAudioCapability(a1, (uint64_t)v8[v9]) != 3)
      {
        if (v6 == ++v9)
          goto LABEL_15;
      }
      v3 = 1;
      goto LABEL_17;
    }
    FigSignalErrorAt();
    v4 = 0;
LABEL_5:
    v3 = 0;
LABEL_21:
    free(v4);
    return v3;
  }
  v3 = *(unsigned __int8 *)(DerivedStorage + 357);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  return v3;
}

uint64_t FigAlternateIsPeakBitRateDeclared(uint64_t result)
{
  if (result)
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
  return result;
}

BOOL FigAlternateIsAverageBitRateDeclared(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 48) != 0;
  return result;
}

BOOL FigAlternateIsFrameRateDeclared(_BOOL8 result)
{
  if (result)
    return *(double *)(CMBaseObjectGetDerivedStorage() + 56) > 0.0;
  return result;
}

uint64_t FigAlternateGetAmbisonicsOrder(const void *a1, const void *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = 0uLL;
  v4 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v3);
  return DWORD2(v3);
}

uint64_t FigAlternateGetChannelBedCount(const void *a1, const void *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = 0uLL;
  v4 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v3);
  return HIDWORD(v3);
}

uint64_t FigAlternateGetDownmixOfChannelCount(const void *a1, const void *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = 0uLL;
  v4 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v3);
  return v4;
}

uint64_t FigAlternateGetDegreesOfFreedom(const void *a1, const void *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = 0uLL;
  v4 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v3);
  return HIDWORD(v4);
}

const __CFString *FigAlternateGetStringFromVideoRange(int a1)
{
  if ((a1 - 1) > 3)
    return CFSTR("Unknown");
  else
    return off_1E2F87358[a1 - 1];
}

const __CFString *FigAlternateGetStringFromVideoFormat(int a1)
{
  if ((a1 - 1) > 8)
    return CFSTR("Unknown");
  else
    return off_1E2F87378[a1 - 1];
}

const __CFString *FigAlternateGetStringFromAudioFormat(int a1)
{
  if ((a1 - 1) > 8)
    return CFSTR("Unknown");
  else
    return off_1E2F873C0[a1 - 1];
}

const __CFString *FigAlternateGetStringFromHDCPState(int a1)
{
  if ((a1 + 1) > 2)
    return CFSTR("Unknown");
  else
    return off_1E2F87408[a1 + 1];
}

const __CFString *FigAlternateGetPlaylistStringFromHDCPLevel(int a1)
{
  if ((a1 + 1) > 2)
    return CFSTR("UNKNOWN");
  else
    return off_1E2F87420[a1 + 1];
}

const __CFString *FigAlternateGetStringFromFramerateBucket(unsigned int a1)
{
  if (a1 > 3)
    return CFSTR("UnknownBucket");
  else
    return off_1E2F87438[a1];
}

const __CFString *FigAlternateGetStringFromImmersiveAudioCapability(int a1)
{
  if ((a1 - 2) > 2)
    return CFSTR("Unknown");
  else
    return off_1E2F87458[a1 - 2];
}

uint64_t FigAlternateStreamVideoQualityIndexToCMVideoDynamicRange(int a1)
{
  if ((a1 - 1) > 0x15)
    return 0;
  else
    return dword_1932FA620[a1 - 1];
}

BOOL FigAlternateIs4k(uint64_t a1)
{
  uint64_t DerivedStorage;
  double *v2;
  double *v3;
  double v4;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v2 = (double *)(DerivedStorage + 168);
    v3 = (double *)(DerivedStorage + 176);
  }
  else
  {
    v2 = (double *)MEMORY[0x1E0C9D820];
    v3 = (double *)(MEMORY[0x1E0C9D820] + 8);
  }
  v4 = *v2;
  if (*v3 < *v2)
    v4 = *v3;
  return v4 > 1440.0;
}

BOOL FigAlternateHasHDVideoResolution(uint64_t a1)
{
  uint64_t DerivedStorage;
  double *v2;
  double *v3;
  double v4;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v2 = (double *)(DerivedStorage + 168);
    v3 = (double *)(DerivedStorage + 176);
  }
  else
  {
    v2 = (double *)MEMORY[0x1E0C9D820];
    v3 = (double *)(MEMORY[0x1E0C9D820] + 8);
  }
  v4 = *v2;
  if (*v3 < *v2)
    v4 = *v3;
  return v4 >= 1440.0;
}

void FigAlternateScaleBitrateFractionToNewAlternate(uint64_t a1, uint64_t a2)
{
  fa_getAlternateAvgToPeakRatio(a1);
  fa_getAlternateAvgToPeakRatio(a2);
}

double fa_getAlternateAvgToPeakRatio(uint64_t a1)
{
  double AlternateAverageBandwidth;

  if (a1)
    AlternateAverageBandwidth = (double)(int)fa_GetAlternateAverageBandwidth(a1);
  else
    AlternateAverageBandwidth = 0.0;
  return AlternateAverageBandwidth / (double)(int)FigAlternateGetPeakBitRate(a1);
}

uint64_t FigAlternateGetClassID()
{
  if (sRegisterFigAlternateClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigAlternateClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateType);
  return sFigAlternateClassID;
}

uint64_t RegisterFigAlternateType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateGetTypeID()
{
  if (sRegisterFigAlternateClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigAlternateClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAlternateCreateWithSerializedRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const void *v5;
  const void *v6;
  const __CFDictionary *DictionaryValue;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  uint64_t v11;
  __CFArray *Mutable;
  CFIndex v13;
  uint64_t ValueAtIndex;
  uint64_t AllocatorForMedia;
  uint64_t v16;
  void *value[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  _BYTE v31[128];
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  v34 = 0;
  memset(&v31[8], 0, 120);
  *((_QWORD *)&v30[1] + 1) = 0;
  *(_OWORD *)((char *)v30 + 8) = 0u;
  v5 = (const void *)FigCFDictionaryGetValue();
  *(_QWORD *)&v30[0] = FigCFDictionaryGetValue();
  v6 = (const void *)FigCFDictionaryGetValue();
  *(_QWORD *)v31 = FigCFDictionaryGetValue();
  *(_QWORD *)&v31[24] = FigCFDictionaryGetValue();
  *(_QWORD *)&v31[8] = FigCFDictionaryGetValue();
  *(_QWORD *)&v31[40] = FigCFDictionaryGetValue();
  *(_QWORD *)&v31[56] = FigCFDictionaryGetValue();
  *(_QWORD *)&v31[72] = FigCFDictionaryGetValue();
  *(_QWORD *)&v31[104] = FigCFDictionaryGetValue();
  *(_QWORD *)&v32 = FigCFDictionaryGetValue();
  *((_QWORD *)&v32 + 1) = FigCFDictionaryGetValue();
  *(_QWORD *)&v33 = FigCFDictionaryGetValue();
  *((_QWORD *)&v33 + 1) = FigCFDictionaryGetValue();
  DictionaryValue = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
  CGSizeMakeWithDictionaryRepresentation(DictionaryValue, (CGSize *)&v31[112]);
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetDoubleIfPresent();
  FigCFDictionaryGetDoubleIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  value[0] = 0;
  v8 = (const __CFArray *)FigCFDictionaryGetValue();
  if (v8)
  {
    v9 = v8;
    Count = CFArrayGetCount(v8);
    v11 = *MEMORY[0x1E0C9AE00];
    if (Count < 1)
    {
      Mutable = 0;
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        if (CFArrayGetCount(v9) >= 1)
        {
          v13 = 0;
          do
          {
            ValueAtIndex = FigCFArrayGetValueAtIndex();
            AllocatorForMedia = FigGetAllocatorForMedia();
            if (MEMORY[0x19402F00C](ValueAtIndex, AllocatorForMedia, value))
              break;
            CFArrayAppendValue(Mutable, value[0]);
            if (value[0])
            {
              CFRelease(value[0]);
              value[0] = 0;
            }
            ++v13;
          }
          while (v13 < CFArrayGetCount(v9));
          if (value[0])
            CFRelease(value[0]);
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
  }
  else
  {
    Mutable = 0;
    v11 = *MEMORY[0x1E0C9AE00];
  }
  *(_QWORD *)&v31[96] = Mutable;
  v26 = *(_OWORD *)&v31[96];
  v27 = *(_OWORD *)&v31[112];
  v28 = v32;
  v29 = v33;
  v22 = *(_OWORD *)&v31[32];
  v23 = *(_OWORD *)&v31[48];
  v24 = *(_OWORD *)&v31[64];
  v25 = *(_OWORD *)&v31[80];
  *(_OWORD *)value = v30[0];
  v19 = v30[1];
  v20 = *(_OWORD *)v31;
  v21 = *(_OWORD *)&v31[16];
  v16 = FigAlternateCreate(v11, 0, v5, v35, v6, v34, SHIDWORD(v36), v36, (uint64_t)value, a4);
  if (*(_QWORD *)&v31[96])
    CFRelease(*(CFTypeRef *)&v31[96]);
  return v16;
}

uint64_t FigAlternateCreate(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const void *a5, char a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v16;
  uint64_t DerivedStorage;
  CFTypeRef v18;
  CFTypeRef v19;
  uint64_t v20;
  double v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  uint64_t v34;
  CFTypeRef v35;
  CFTypeRef v36;

  if (!a10)
    return FigSignalErrorAt();
  if (sRegisterFigAlternateClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigAlternateClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateType);
  v16 = CMDerivedObjectCreate();
  if (!(_DWORD)v16)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a3)
      v18 = CFRetain(a3);
    else
      v18 = 0;
    *(_QWORD *)DerivedStorage = v18;
    v19 = *(CFTypeRef *)a9;
    if (*(_QWORD *)a9)
      v19 = CFRetain(v19);
    *(_QWORD *)(DerivedStorage + 8) = a4;
    v20 = *(_QWORD *)(a9 + 8);
    *(_QWORD *)(DerivedStorage + 40) = v19;
    *(_QWORD *)(DerivedStorage + 48) = v20;
    v21 = *(double *)(a9 + 16);
    *(double *)(DerivedStorage + 56) = v21;
    *(double *)(DerivedStorage + 64) = fmax(v21, 0.0);
    if (a5)
      v22 = CFRetain(a5);
    else
      v22 = 0;
    *(_QWORD *)(DerivedStorage + 16) = v22;
    v23 = *(CFTypeRef *)(a9 + 32);
    if (v23)
      v23 = CFRetain(v23);
    *(_QWORD *)(DerivedStorage + 80) = v23;
    v24 = *(CFTypeRef *)(a9 + 56);
    if (v24)
      v24 = CFRetain(v24);
    *(_QWORD *)(DerivedStorage + 88) = v24;
    *(_BYTE *)(DerivedStorage + 120) = *(_BYTE *)(a9 + 64);
    v25 = *(CFTypeRef *)(a9 + 40);
    if (v25)
      v25 = CFRetain(v25);
    *(_QWORD *)(DerivedStorage + 96) = v25;
    *(_BYTE *)(DerivedStorage + 121) = *(_BYTE *)(a9 + 48);
    v26 = *(CFTypeRef *)(a9 + 72);
    if (v26)
      v26 = CFRetain(v26);
    *(_QWORD *)(DerivedStorage + 104) = v26;
    *(_BYTE *)(DerivedStorage + 122) = *(_BYTE *)(a9 + 80);
    v27 = *(CFTypeRef *)(a9 + 88);
    if (v27)
      v27 = CFRetain(v27);
    *(_QWORD *)(DerivedStorage + 112) = v27;
    *(_BYTE *)(DerivedStorage + 123) = *(_BYTE *)(a9 + 96);
    *(_BYTE *)(DerivedStorage + 24) = a6;
    *(_QWORD *)(DerivedStorage + 72) = *(_QWORD *)(a9 + 24);
    v28 = *(CFTypeRef *)(a9 + 104);
    if (v28)
      v28 = CFRetain(v28);
    *(_QWORD *)(DerivedStorage + 128) = v28;
    *(_QWORD *)(DerivedStorage + 136) = *(_QWORD *)(a9 + 112);
    *(_QWORD *)(DerivedStorage + 144) = *(_QWORD *)(a9 + 120);
    v29 = *(CFTypeRef *)(a9 + 136);
    if (v29)
      v29 = CFRetain(v29);
    *(_QWORD *)(DerivedStorage + 160) = v29;
    *(_OWORD *)(DerivedStorage + 168) = *(_OWORD *)(a9 + 144);
    *(_DWORD *)(DerivedStorage + 28) = a7;
    *(_DWORD *)(DerivedStorage + 32) = a8;
    v30 = *(CFTypeRef *)(a9 + 160);
    if (v30)
      v30 = CFRetain(v30);
    *(_QWORD *)(DerivedStorage + 184) = v30;
    v31 = *(CFTypeRef *)(a9 + 168);
    if (v31)
      v31 = CFRetain(v31);
    *(_QWORD *)(DerivedStorage + 192) = v31;
    v32 = *(CFTypeRef *)(a9 + 176);
    if (v32)
      v32 = CFRetain(v32);
    *(_QWORD *)(DerivedStorage + 200) = v32;
    v33 = *(CFTypeRef *)(a9 + 184);
    if (v33)
      v33 = CFRetain(v33);
    *(_QWORD *)(DerivedStorage + 208) = v33;
    v34 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 480) = v34;
    if (v34)
    {
      *(_QWORD *)(DerivedStorage + 224) = 0xFFEFFFFFFFFFFFFFLL;
      *(_DWORD *)(DerivedStorage + 236) = a4;
      v35 = a2;
      if (a2)
        v35 = CFRetain(a2);
      *(_QWORD *)(DerivedStorage + 472) = v35;
      v36 = *(CFTypeRef *)(a9 + 128);
      if (v36)
        v36 = CFRetain(v36);
      v16 = 0;
      *(_QWORD *)(DerivedStorage + 152) = v36;
      *a10 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v16;
}

uint64_t FigAlternateCopy(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  uint64_t DerivedStorage;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  char v48;
  int v49;
  char v51;
  char v52;
  int v53;
  const void *v54;
  _QWORD v55[6];
  char v56;
  uint64_t v57;
  char v58;
  int v59;
  __int16 v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  int v66;
  __int16 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a3)
      goto LABEL_3;
LABEL_7:
    a3 = *(const void **)DerivedStorage;
    if (a4)
      goto LABEL_4;
    goto LABEL_8;
  }
  a2 = *(const void **)(DerivedStorage + 472);
  if (!a3)
    goto LABEL_7;
LABEL_3:
  if (a4)
    goto LABEL_4;
LABEL_8:
  a4 = *(_QWORD *)(DerivedStorage + 40);
LABEL_4:
  v26 = a11;
  if (a7)
  {
    v52 = a8;
  }
  else
  {
    a7 = *(_QWORD *)(DerivedStorage + 88);
    v52 = *(_BYTE *)(DerivedStorage + 120);
  }
  v27 = a13;
  if (a11)
  {
    v51 = a12;
  }
  else
  {
    v26 = *(_QWORD *)(DerivedStorage + 112);
    v51 = *(_BYTE *)(DerivedStorage + 123);
  }
  if (!a13)
    v27 = *(_QWORD *)(DerivedStorage + 160);
  v29 = a16;
  if (!a15)
    a14 = *(_DWORD *)(DerivedStorage + 28);
  v30 = a17;
  if (!a16)
    v29 = *(_QWORD *)(DerivedStorage + 184);
  v31 = a18;
  if (!a17)
    v30 = *(_QWORD *)(DerivedStorage + 192);
  v53 = a14;
  v32 = a19;
  if (!a18)
    v31 = *(_QWORD *)(DerivedStorage + 200);
  v33 = a2;
  v54 = a3;
  if (!a19)
    v32 = *(_QWORD *)(DerivedStorage + 208);
  v34 = *(_QWORD *)(DerivedStorage + 48);
  v35 = *(_QWORD *)(DerivedStorage + 56);
  v36 = *(_QWORD *)(DerivedStorage + 80);
  v37 = *(_BYTE *)(DerivedStorage + 121);
  v38 = *(_QWORD *)(DerivedStorage + 96);
  v39 = *(_QWORD *)(DerivedStorage + 104);
  v40 = *(_BYTE *)(DerivedStorage + 122);
  v41 = *(_QWORD *)(DerivedStorage + 72);
  v42 = *(_QWORD *)(DerivedStorage + 128);
  v43 = *(_QWORD *)(DerivedStorage + 144);
  v44 = *(_QWORD *)(DerivedStorage + 152);
  v45 = *MEMORY[0x1E0C9AE00];
  v46 = *(_QWORD *)(DerivedStorage + 8);
  v47 = *(const void **)(DerivedStorage + 16);
  v48 = *(_BYTE *)(DerivedStorage + 24);
  v49 = *(_DWORD *)(DerivedStorage + 32);
  v55[0] = a4;
  v55[1] = v34;
  v55[2] = v35;
  v55[3] = v41;
  v55[4] = v36;
  v55[5] = v38;
  v56 = v37;
  v57 = a7;
  v58 = v52;
  v61 = HIBYTE(a8);
  v60 = HIDWORD(a8) >> 8;
  v59 = a8 >> 8;
  v62 = v39;
  v63 = v40;
  v64 = v26;
  v65 = v51;
  v68 = HIBYTE(a12);
  v67 = HIDWORD(a12) >> 8;
  v66 = a12 >> 8;
  v69 = v42;
  v70 = *(_QWORD *)(DerivedStorage + 136);
  v71 = v43;
  v72 = v44;
  v73 = v27;
  v74 = *(_OWORD *)(DerivedStorage + 168);
  v75 = v29;
  v76 = v30;
  v77 = v31;
  v78 = v32;
  return FigAlternateCreate(v45, v33, v54, v46, v47, v48, v53, v49, (uint64_t)v55, a20);
}

__CFString *figAlternateCopyDesc(const __CFString *cf)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t DerivedStorage;
  double v6;
  double v7;
  int v8;
  int IsAudioOnly;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  const __CFString *VideoRangeString;
  const __CFString *v15;
  int v16;
  double v17;
  double v18;
  const __CFAllocator *v19;
  __CFString *Mutable;
  __CFString *v21;
  const char *v22;
  CFIndex Length;
  __CFString *MutableCopy;
  __CFString *HDCPString;
  const __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __CFString *VideoLayoutString;
  const __CFString *v32;
  CFRange v33;

  if (cf)
  {
    v2 = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 32);
    v3 = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
    v4 = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 48);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = *(double *)(DerivedStorage + 168);
    v7 = *(double *)(DerivedStorage + 176);
    v8 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 24);
    IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)cf);
    v10 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 96);
    v11 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88);
    v28 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 104);
    v29 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
    v30 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
    v12 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v12 + 160))
      v13 = *(const __CFString **)(v12 + 160);
    else
      v13 = CFSTR(".");
    if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 140) == -1)
      VideoRangeString = 0;
    else
      VideoRangeString = FigAlternateGetVideoRangeString(cf);
    v32 = v13;
    v27 = VideoRangeString;
    v16 = IsAudioOnly;
    if (*(int *)(CMBaseObjectGetDerivedStorage() + 136) < -1)
      HDCPString = 0;
    else
      HDCPString = FigAlternateGetHDCPString((uint64_t)cf);
    v17 = *(double *)(CMBaseObjectGetDerivedStorage() + 56);
    v15 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 128);
    v18 = *(double *)(CMBaseObjectGetDerivedStorage() + 72);
    VideoLayoutString = FigAlternateGetVideoLayoutString((uint64_t)cf);
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    VideoLayoutString = 0;
    HDCPString = 0;
    v27 = 0;
    v32 = 0;
    v15 = 0;
    v8 = 0;
    v16 = 0;
    v2 = 0;
    v4 = 0;
    v3 = 0;
    v6 = 0.0;
    v7 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
  }
  v19 = CFGetAllocator(cf);
  Mutable = CFStringCreateMutable(v19, 0);
  v21 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigAlternate(%2d):[%p]"), v2, cf);
    if ((int)v3 >= 1)
    {
      v22 = "";
      if ((int)v4 > 0)
        v22 = "/Avg";
      CFStringAppendFormat(v21, 0, CFSTR(" [Peak%s %d"), v22, v3);
      if ((int)v4 >= 1)
        CFStringAppendFormat(v21, 0, CFSTR("/%d"), v4);
      CFStringAppendFormat(v21, 0, CFSTR("]"));
    }
    if (v6 > 2.22044605e-16 || v7 > 2.22044605e-16)
      CFStringAppendFormat(v21, 0, CFSTR(" [%.0fx%.0f]"), *(_QWORD *)&v6, *(_QWORD *)&v7);
    if (v8)
      CFStringAppendFormat(v21, 0, CFSTR(" [I-FrameOnly]"));
    if (v16)
      CFStringAppendFormat(v21, 0, CFSTR(" [AudioOnly]"));
    if (v10)
      CFStringAppendFormat(v21, 0, CFSTR(" [VideoGroup %@]"), v10);
    if (v11)
      CFStringAppendFormat(v21, 0, CFSTR(" [AudioGroup %@]"), v11);
    if (v28)
      CFStringAppendFormat(v21, 0, CFSTR(" [SubtitleGroup %@]"), v28);
    if (v29)
      CFStringAppendFormat(v21, 0, CFSTR(" [%@]"), v29);
    if (v30)
      CFStringAppendFormat(v21, 0, CFSTR(" [%@]"), v30);
    if (v27)
      CFStringAppendFormat(v21, 0, CFSTR(" [VideoRange %@]"), v27);
    if (HDCPString)
      CFStringAppendFormat(v21, 0, CFSTR(" [HDCP %@]"), HDCPString);
    if (v17 > 2.22044605e-16)
      CFStringAppendFormat(v21, 0, CFSTR(" [FrameRate %.3f]"), *(_QWORD *)&v17);
    if (!FigCFEqual())
      CFStringAppendFormat(v21, 0, CFSTR(" [Pathway %@]"), v32);
    if (v18 != -1.0)
      CFStringAppendFormat(v21, 0, CFSTR(" [Score %.3f]"), *(_QWORD *)&v18);
    if (VideoLayoutString)
      CFStringAppendFormat(v21, 0, CFSTR(" [Immersive %@]"), VideoLayoutString);
    if (v15)
    {
      Length = CFStringGetLength(v15);
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v15);
      if (Length > CFStringGetLength(CFSTR("...")) + 16)
      {
        v33.length = Length - 16;
        v33.location = 9;
        CFStringReplace(MutableCopy, v33, CFSTR("..."));
      }
      CFStringAppendFormat(v21, 0, CFSTR(" [StableID %@]"), MutableCopy);
      if (MutableCopy)
        CFRelease(MutableCopy);
    }
    CFStringAppendFormat(v21, 0, CFSTR(">"));
  }
  return v21;
}

uint64_t FigAlternatesCarryRankingScore(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t result;

  if (!a1)
    return 1;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 1;
  v3 = Count;
  v4 = 0;
  while (1)
  {
    result = (uint64_t)CFArrayGetValueAtIndex(a1, v4);
    if (!result)
      break;
    if (*(double *)(CMBaseObjectGetDerivedStorage() + 72) == -1.0)
      return 0;
    if (v3 == ++v4)
      return 1;
  }
  return result;
}

CFMutableDictionaryRef FigAlternateCopyAsSerializedRepresentation(__CFArray *a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  CFDictionaryRef DictionaryRepresentation;
  __CFArray *VideoLayoutTags;
  const __CFArray *v9;
  const __CFAllocator *v10;
  CFMutableArrayRef v11;
  __CFArray *v12;
  uint64_t v13;
  uint64_t ValueAtIndex;
  uint64_t v15;
  const void *v16;
  const void *v17;

  if (!a1)
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 480));
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetBoolean();
  FigCFDictionarySetBoolean();
  FigCFDictionarySetBoolean();
  FigCFDictionarySetBoolean();
  FigCFDictionarySetBoolean();
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 168));
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt64();
  FigCFDictionarySetDouble();
  FigCFDictionarySetDouble();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  if (!Mutable
    || (VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1)) == 0
    || (v9 = VideoLayoutTags, CFArrayGetCount(VideoLayoutTags) < 1))
  {
LABEL_12:
    if (!a2)
      goto LABEL_14;
    goto LABEL_13;
  }
  v10 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v11 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
  if (v11)
  {
    v12 = v11;
    if (CFArrayGetCount(v9) < 1)
    {
LABEL_10:
      FigCFDictionarySetValue();
    }
    else
    {
      v13 = 0;
      while (1)
      {
        ValueAtIndex = FigCFArrayGetValueAtIndex();
        v15 = FigGetAllocatorForMedia();
        v16 = (const void *)MEMORY[0x19402EFD0](ValueAtIndex, v15);
        if (!v16)
          break;
        v17 = v16;
        CFArrayAppendValue(v12, v16);
        CFRelease(v17);
        if (++v13 >= CFArrayGetCount(v9))
          goto LABEL_10;
      }
      FigSignalErrorAt();
    }
    CFRelease(v12);
    goto LABEL_12;
  }
  FigSignalErrorAt();
  if (a2)
  {
LABEL_13:
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
LABEL_14:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 480));
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  return Mutable;
}

uint64_t FigAlternateCopyAsXPCObject(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  xpc_object_t v4;
  void *v5;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v7;
  const __CFArray *v8;
  xpc_object_t empty;
  CFIndex v10;
  void *v11;
  void *v12;
  uint64_t v13;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = xpc_dictionary_create(0, 0, 0);
    if (!v4)
    {
      v13 = FigSignalErrorAt();
      goto LABEL_18;
    }
    v5 = v4;
    xpc_dictionary_set_double(v4, "AltRankingScore", *(double *)(DerivedStorage + 72));
    xpc_dictionary_set_double(v5, "AltMaxFrameRate", *(double *)(DerivedStorage + 64));
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 168));
    FigXPCMessageSetCFDictionary();
    xpc_dictionary_set_int64(v5, "AltHDCP", *(int *)(DerivedStorage + 136));
    xpc_dictionary_set_int64(v5, "AltVideoRange", *(int *)(DerivedStorage + 140));
    xpc_dictionary_set_uint64(v5, "AltAllowedCPC", *(_QWORD *)(DerivedStorage + 144));
    xpc_dictionary_set_int64(v5, "AltAlternateIndex", *(int *)(DerivedStorage + 28));
    xpc_dictionary_set_int64(v5, "AltZeroIndexedAlternateIndex", *(int *)(DerivedStorage + 32));
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    xpc_dictionary_set_int64(v5, "AlternateDeclaredPeakBitRate", *(_QWORD *)(DerivedStorage + 8));
    xpc_dictionary_set_int64(v5, "AltAverageBitRate", *(_QWORD *)(DerivedStorage + 48));
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    xpc_dictionary_set_BOOL(v5, "AltAudioGroupIsSynthesized", *(_BYTE *)(DerivedStorage + 120) != 0);
    xpc_dictionary_set_BOOL(v5, "AltVideoGroupIsSynthesized", *(_BYTE *)(DerivedStorage + 121) != 0);
    xpc_dictionary_set_BOOL(v5, "AltSubtitlesGroupIsSynthesized", *(_BYTE *)(DerivedStorage + 122) != 0);
    xpc_dictionary_set_BOOL(v5, "AltClosedCaptionGroupIsSynthesized", *(_BYTE *)(DerivedStorage + 123) != 0);
    xpc_dictionary_set_BOOL(v5, "AltIFrameOnly", *(_BYTE *)(DerivedStorage + 24) != 0);
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    v7 = CMBaseObjectGetDerivedStorage();
    v8 = *(const __CFArray **)(v7 + 152);
    if (!v8 || CFArrayGetCount(*(CFArrayRef *)(v7 + 152)) < 1)
      goto LABEL_15;
    empty = xpc_array_create_empty();
    if (empty)
    {
      if (CFArrayGetCount(v8) < 1)
      {
        FigXPCRelease();
LABEL_13:
        xpc_dictionary_set_value(v5, "AltVideoLayoutTags", empty);
LABEL_14:
        FigXPCRelease();
LABEL_15:
        *a2 = v5;
        if (DictionaryRepresentation)
          CFRelease(DictionaryRepresentation);
        goto LABEL_17;
      }
      v10 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v8, v10);
        v11 = (void *)FigTagCollectionCopyAsXPCDictionary();
        if (!v11)
          break;
        v12 = v11;
        xpc_array_append_value(empty, v11);
        xpc_release(v12);
        if (++v10 >= CFArrayGetCount(v8))
          goto LABEL_10;
      }
    }
    FigSignalErrorAt();
LABEL_10:
    FigXPCRelease();
    if (!empty)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_17:
  v13 = 0;
LABEL_18:
  FigXPCRelease();
  return v13;
}

uint64_t FigAlternateCopyAsXPCObjectWithContext(uint64_t a1, CFMutableDictionaryRef *a2, _QWORD *a3)
{
  uint64_t v6;
  const __CFDictionary *v7;
  void *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  void *v13;

  v13 = 0;
  v6 = FigAlternateCopyAsXPCObject(a1, &v13);
  if (!(_DWORD)v6)
  {
    if (a1)
    {
      v7 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
      v8 = v13;
      if (v7)
        fa_serializeMediaGroupLocatorMapToXPCDict(v7, v13, a2, "AltAudioGroupLocatorMap", (uint64_t)"AltAudioGroupID", CFSTR("FASP_AudioGroups"));
      v9 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 192);
      if (v9)
        fa_serializeMediaGroupLocatorMapToXPCDict(v9, v8, a2, "AltVideoGroupLocatorMap", (uint64_t)"AltVideoGroupID", CFSTR("FASP_VideoGroups"));
      v10 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 200);
      if (v10)
        fa_serializeMediaGroupLocatorMapToXPCDict(v10, v8, a2, "AltSubtitleGroupLocatorMap", (uint64_t)"AltSubtitleGroupID", CFSTR("FASP_SubtitleGroups"));
      v11 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 208);
      if (v11)
        fa_serializeMediaGroupLocatorMapToXPCDict(v11, v8, a2, "AltClosedCaptionGroupLocatorMap", (uint64_t)"AltClosedCaptionGroupID", CFSTR("FASP_ClosedCaptionGroups"));
    }
    else
    {
      v8 = v13;
    }
    *a3 = v8;
  }
  FigXPCRelease();
  return v6;
}

void fa_serializeMediaGroupLocatorMapToXPCDict(const __CFDictionary *a1, void *a2, CFMutableDictionaryRef *a3, const char *a4, uint64_t a5, void *a6)
{
  CFIndex Count;
  const void **v12;
  const void *Value;
  __CFDictionary *v14;
  const void *v15;
  void *v16;
  CFDictionaryRef theDict;

  theDict = 0;
  if (CFDictionaryGetCount(a1) < 1)
  {
    v12 = 0;
  }
  else
  {
    if (fa_ensureSerializationContextAndCopyMediaGroupForCache(a3, a6, &theDict))
    {
      v12 = 0;
      v14 = theDict;
    }
    else
    {
      Count = CFDictionaryGetCount(a1);
      v12 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
      CFDictionaryGetKeysAndValues(a1, 0, v12);
      Value = CFDictionaryGetValue((CFDictionaryRef)*v12, CFSTR("FBPAEGLMK_GroupID"));
      v14 = theDict;
      if (Value)
      {
        v15 = Value;
        if (!theDict || !CFDictionaryContainsKey(theDict, Value))
        {
          v16 = (void *)FigStreamPlaylistParserCopySerializedRepresentationForMediaGroupAsXPCObject((uint64_t)v15, a1);
          if (v16)
            xpc_dictionary_set_value(a2, a4, v16);
          if (v14)
            CFDictionarySetValue(v14, v15, (const void *)*MEMORY[0x1E0C9B0D0]);
        }
        FigXPCMessageSetCFString();
      }
    }
    if (v14)
      CFRelease(v14);
  }
  FigXPCRelease();
  free(v12);
}

uint64_t FigAlternateCopyArrayOfAlternatesAsXPCObject(const __CFArray *a1, _QWORD *a2)
{
  xpc_object_t empty;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t v9;
  xpc_object_t v10;
  uint64_t v11;
  CFTypeRef cf;
  xpc_object_t value;

  cf = 0;
  value = 0;
  empty = xpc_array_create_empty();
  if (empty)
  {
    if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
    {
      v6 = Count;
      v7 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        v9 = FigAlternateCopyAsXPCObjectWithContext((uint64_t)ValueAtIndex, (CFMutableDictionaryRef *)&cf, &value);
        if ((_DWORD)v9)
          break;
        v10 = value;
        xpc_array_append_value(empty, value);
        if (v10)
        {
          value = 0;
          xpc_release(v10);
        }
        if (v6 == ++v7)
          goto LABEL_9;
      }
      v11 = v9;
    }
    else
    {
LABEL_9:
      v11 = 0;
      *a2 = empty;
    }
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v11;
}

uint64_t FigAlternateCreateWithXPCObject(void *a1, CFMutableDictionaryRef *a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  xpc_object_t v13;
  __CFArray *Mutable;
  size_t v15;
  __CFArray *v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef cf;
  CFTypeRef v21;
  void *value;

  cf = 0;
  v21 = 0;
  if (a1)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (sRegisterFigAlternateClassIDOnce != -1)
      dispatch_once_f(&sRegisterFigAlternateClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateType);
    v7 = CMDerivedObjectCreate();
    if (!(_DWORD)v7)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v7 = fa_deserializeAndCopyMediaGroupLocatorMap(a1, a2, "AltAudioGroupLocatorMap", (int)"AltAudioGroupID", &cf, CFSTR("FASP_AudioGroups"));
      if (!(_DWORD)v7)
      {
        v9 = cf;
        if (cf)
        {
          *(_QWORD *)(DerivedStorage + 184) = CFRetain(cf);
          CFRelease(v9);
          cf = 0;
        }
        v7 = fa_deserializeAndCopyMediaGroupLocatorMap(a1, a2, "AltVideoGroupLocatorMap", (int)"AltVideoGroupID", &cf, CFSTR("FASP_VideoGroups"));
        if (!(_DWORD)v7)
        {
          v10 = cf;
          if (cf)
          {
            *(_QWORD *)(DerivedStorage + 192) = CFRetain(cf);
            CFRelease(v10);
            cf = 0;
          }
          v7 = fa_deserializeAndCopyMediaGroupLocatorMap(a1, a2, "AltSubtitleGroupLocatorMap", (int)"AltSubtitleGroupID", &cf, CFSTR("FASP_SubtitleGroups"));
          if (!(_DWORD)v7)
          {
            v11 = cf;
            if (cf)
            {
              *(_QWORD *)(DerivedStorage + 200) = CFRetain(cf);
              CFRelease(v11);
              cf = 0;
            }
            v7 = fa_deserializeAndCopyMediaGroupLocatorMap(a1, a2, "AltClosedCaptionGroupLocatorMap", (int)"AltClosedCaptionGroupID", &cf, CFSTR("FASP_ClosedCaptionGroups"));
            if (!(_DWORD)v7)
            {
              v12 = cf;
              if (cf)
              {
                *(_QWORD *)(DerivedStorage + 208) = CFRetain(cf);
                CFRelease(v12);
              }
              v7 = FigXPCMessageCopyCFURL();
              if (!(_DWORD)v7)
              {
                v7 = FigXPCMessageCopyCFURL();
                if (!(_DWORD)v7)
                {
                  v7 = FigXPCMessageCopyCFString();
                  if (!(_DWORD)v7)
                  {
                    v7 = FigXPCMessageCopyCFString();
                    if (!(_DWORD)v7)
                    {
                      v7 = FigXPCMessageCopyCFString();
                      if (!(_DWORD)v7)
                      {
                        v7 = FigXPCMessageCopyCFString();
                        if (!(_DWORD)v7)
                        {
                          v7 = FigXPCMessageCopyCFString();
                          if (!(_DWORD)v7)
                          {
                            v7 = FigXPCMessageCopyCFString();
                            if (!(_DWORD)v7)
                            {
                              v7 = FigXPCMessageCopyCFString();
                              if (!(_DWORD)v7)
                              {
                                v7 = FigXPCMessageCopyCFString();
                                if (!(_DWORD)v7)
                                {
                                  *(_QWORD *)(DerivedStorage + 8) = xpc_dictionary_get_int64(a1, "AlternateDeclaredPeakBitRate");
                                  *(_QWORD *)(DerivedStorage + 48) = xpc_dictionary_get_int64(a1, "AltAverageBitRate");
                                  *(_BYTE *)(DerivedStorage + 120) = xpc_dictionary_get_BOOL(a1, "AltAudioGroupIsSynthesized");
                                  *(_BYTE *)(DerivedStorage + 121) = xpc_dictionary_get_BOOL(a1, "AltVideoGroupIsSynthesized");
                                  *(_BYTE *)(DerivedStorage + 122) = xpc_dictionary_get_BOOL(a1, "AltSubtitlesGroupIsSynthesized");
                                  *(_BYTE *)(DerivedStorage + 123) = xpc_dictionary_get_BOOL(a1, "AltClosedCaptionGroupIsSynthesized");
                                  *(_BYTE *)(DerivedStorage + 24) = xpc_dictionary_get_BOOL(a1, "AltIFrameOnly");
                                  *(double *)(DerivedStorage + 56) = xpc_dictionary_get_double(a1, "AltMaxFrameRate");
                                  *(_DWORD *)(DerivedStorage + 136) = xpc_dictionary_get_int64(a1, "AltHDCP");
                                  *(_DWORD *)(DerivedStorage + 140) = xpc_dictionary_get_int64(a1, "AltVideoRange");
                                  *(double *)(DerivedStorage + 72) = xpc_dictionary_get_double(a1, "AltRankingScore");
                                  *(_QWORD *)(DerivedStorage + 144) = xpc_dictionary_get_uint64(a1, "AltAllowedCPC");
                                  *(_DWORD *)(DerivedStorage + 28) = xpc_dictionary_get_int64(a1, "AltAlternateIndex");
                                  *(_DWORD *)(DerivedStorage + 32) = xpc_dictionary_get_int64(a1, "AltZeroIndexedAlternateIndex");
                                  FigXPCMessageCopyCFDictionary();
                                  CGSizeMakeWithDictionaryRepresentation(0, (CGSize *)(DerivedStorage + 168));
                                  v13 = xpc_dictionary_get_value(a1, "AltVideoLayoutTags");
                                  if (FigXPCArrayGetCount())
                                  {
                                    Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
                                    value = 0;
                                    if (Mutable)
                                    {
                                      if (xpc_array_get_count(v13))
                                      {
                                        v15 = 0;
                                        while (1)
                                        {
                                          xpc_array_get_value(v13, v15);
                                          if (FigTagCollectionCreateFromXPCDictionary())
                                            break;
                                          CFArrayAppendValue(Mutable, value);
                                          if (value)
                                          {
                                            CFRelease(value);
                                            value = 0;
                                          }
                                          if (++v15 >= xpc_array_get_count(v13))
                                          {
                                            v16 = 0;
                                            goto LABEL_36;
                                          }
                                        }
                                        v16 = Mutable;
                                        Mutable = 0;
LABEL_36:
                                        if (value)
                                          CFRelease(value);
                                        if (v16)
                                          CFRelease(v16);
                                      }
                                    }
                                    else
                                    {
                                      FigSignalErrorAt();
                                    }
                                  }
                                  else
                                  {
                                    Mutable = 0;
                                  }
                                  *(_QWORD *)(DerivedStorage + 152) = Mutable;
                                  v17 = FigSimpleMutexCreate();
                                  *(_QWORD *)(DerivedStorage + 480) = v17;
                                  if (v17)
                                  {
                                    v18 = 0;
                                    *(_QWORD *)(DerivedStorage + 224) = 0xFFEFFFFFFFFFFFFFLL;
                                    *(_DWORD *)(DerivedStorage + 236) = *(_QWORD *)(DerivedStorage + 8);
                                    *a3 = v21;
                                    v21 = 0;
                                    goto LABEL_43;
                                  }
                                  v7 = FigSignalErrorAt();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v18 = v7;
  }
  else
  {
    v18 = 0;
  }
LABEL_43:
  if (v21)
    CFRelease(v21);
  return v18;
}

uint64_t fa_deserializeAndCopyMediaGroupLocatorMap(void *a1, CFMutableDictionaryRef *a2, const char *a3, int a4, _QWORD *a5, void *key)
{
  uint64_t v9;
  const __CFDictionary *v10;
  void *v11;
  void *v12;
  xpc_object_t v13;
  uint64_t MediaGroupFromXPCDictionary;
  uint64_t v15;
  CFDictionaryRef theDict;
  void *value;
  void *keya;

  value = 0;
  keya = 0;
  theDict = 0;
  v9 = fa_ensureSerializationContextAndCopyMediaGroupForCache(a2, key, &theDict);
  if ((_DWORD)v9)
  {
    v15 = v9;
    v10 = theDict;
  }
  else
  {
    FigXPCMessageCopyCFString();
    v10 = theDict;
    if (keya)
    {
      if (theDict && CFDictionaryContainsKey(theDict, keya))
      {
        v11 = (void *)CFDictionaryGetValue(v10, keya);
        v12 = v11;
        if (v11)
          CFRetain(v11);
        goto LABEL_12;
      }
      v13 = xpc_dictionary_get_value(a1, a3);
      if (!v13)
      {
        v12 = 0;
LABEL_12:
        v15 = 0;
        *a5 = v12;
        value = 0;
        goto LABEL_13;
      }
      MediaGroupFromXPCDictionary = FigStreamPlaylistParserCreateMediaGroupFromXPCDictionary((uint64_t)v13, 0, (__CFDictionary **)&value);
      if (!(_DWORD)MediaGroupFromXPCDictionary)
      {
        v12 = value;
        if (v10)
        {
          CFDictionarySetValue(v10, keya, value);
          v12 = value;
        }
        goto LABEL_12;
      }
      v15 = MediaGroupFromXPCDictionary;
    }
    else
    {
      v15 = 0;
    }
  }
LABEL_13:
  if (v10)
    CFRelease(v10);
  if (value)
    CFRelease(value);
  if (keya)
    CFRelease(keya);
  return v15;
}

uint64_t FigAlternateCreateArrayOfAlternatesFromXPCObject(void *a1, __CFArray **a2)
{
  __CFArray *Mutable;
  int64_t count;
  int64_t v6;
  size_t v7;
  xpc_object_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    count = xpc_array_get_count(a1);
    if (count < 1)
    {
LABEL_8:
      v11 = 0;
      *a2 = Mutable;
      Mutable = 0;
      goto LABEL_9;
    }
    v6 = count;
    v7 = 0;
    while (1)
    {
      v8 = xpc_array_get_value(a1, v7);
      v9 = FigAlternateCreateWithXPCObject(v8, (CFMutableDictionaryRef *)&cf, (CFTypeRef *)&value);
      if ((_DWORD)v9)
        break;
      v10 = value;
      CFArrayAppendValue(Mutable, value);
      if (v10)
      {
        CFRelease(v10);
        value = 0;
      }
      if (v6 == ++v7)
        goto LABEL_8;
    }
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
  v11 = v9;
LABEL_9:
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  return v11;
}

uint64_t fa_CodecStringFindCodecAndProfile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *Mutable;
  uint64_t v6;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@.%02d"), a2, a3);
  v6 = FigCFStringFind();
  if (Mutable)
    CFRelease(Mutable);
  return v6;
}

uint64_t figAlternateEqual(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const void *v5;
  uint64_t DerivedStorage;
  int v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  int VideoRange;
  int v22;

  result = (a1 | a2) == 0;
  if (a1 && a2)
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 128) && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 128))
    {
      CMBaseObjectGetDerivedStorage();
      CMBaseObjectGetDerivedStorage();
      result = FigCFEqual();
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      v5 = *(const void **)(CMBaseObjectGetDerivedStorage() + 40);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      result = FigCFHTTPCompareURLs(v5, *(CFTypeRef *)(DerivedStorage + 40));
      if (!(_DWORD)result)
        return result;
    }
    v7 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8);
    if (v7 != *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8))
      return 0;
    v8 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48);
    if (v8 != *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48))
      return 0;
    v9 = CMBaseObjectGetDerivedStorage();
    v11 = *(double *)(v9 + 168);
    v10 = *(double *)(v9 + 176);
    v12 = CMBaseObjectGetDerivedStorage();
    result = 0;
    if (v11 != *(double *)(v12 + 168) || v10 != *(double *)(v12 + 176))
      return result;
    v13 = *(double *)(CMBaseObjectGetDerivedStorage() + 72);
    if (v13 != *(double *)(CMBaseObjectGetDerivedStorage() + 72))
      return 0;
    v14 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 24);
    if (v14 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 24))
      return 0;
    v15 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
    if (v15 != *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144))
      return 0;
    v16 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 120);
    if (v16 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 120))
      return 0;
    v17 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 121);
    if (v17 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 121))
      return 0;
    v18 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 122);
    if (v18 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 122))
      return 0;
    v19 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 123);
    if (v19 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 123))
      return 0;
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    result = FigCFEqual();
    if (!(_DWORD)result)
      return result;
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    result = FigCFEqual();
    if (!(_DWORD)result)
      return result;
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    result = FigCFEqual();
    if (!(_DWORD)result)
      return result;
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    result = FigCFEqual();
    if (!(_DWORD)result)
      return result;
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    result = FigCFEqual();
    if (!(_DWORD)result)
      return result;
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    result = FigCFEqual();
    if (!(_DWORD)result)
      return result;
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    result = FigCFEqual();
    if (!(_DWORD)result)
      return result;
    v20 = *(double *)(CMBaseObjectGetDerivedStorage() + 56);
    if (v20 != *(double *)(CMBaseObjectGetDerivedStorage() + 56))
      return 0;
    VideoRange = FigAlternateGetVideoRange(a1);
    if (VideoRange != FigAlternateGetVideoRange(a2))
      return 0;
    v22 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 136);
    if (v22 != *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 136))
      return 0;
    FigAlternateGetVideoLayoutTags((__CFArray *)a1);
    FigAlternateGetVideoLayoutTags((__CFArray *)a2);
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      CMBaseObjectGetDerivedStorage();
      CMBaseObjectGetDerivedStorage();
      result = FigCFEqual();
      if ((_DWORD)result)
      {
        CMBaseObjectGetDerivedStorage();
        CMBaseObjectGetDerivedStorage();
        result = FigCFEqual();
        if ((_DWORD)result)
        {
          CMBaseObjectGetDerivedStorage();
          CMBaseObjectGetDerivedStorage();
          result = FigCFEqual();
          if ((_DWORD)result)
          {
            CMBaseObjectGetDerivedStorage();
            CMBaseObjectGetDerivedStorage();
            return FigCFEqual() != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t figAlternateFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 80);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 88);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 96);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 104);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 112);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 128);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 160);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 184);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 192);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 200);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 208);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 464);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 464) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 384);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 384) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 400);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 400) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 472);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 472) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 152);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 432);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 432) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 448);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 448) = 0;
  }
  return FigSimpleMutexDestroy();
}

uint64_t fa_ensureSerializationContextAndCopyMediaGroupForCache(CFMutableDictionaryRef *a1, void *key, CFMutableDictionaryRef *a3)
{
  const __CFDictionary *v6;
  __CFDictionary *Value;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef Mutable;

  if (!a1)
  {
    v8 = 0;
    goto LABEL_9;
  }
  v6 = *a1;
  if (v6
    || (v6 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*a1 = v6) != 0))
  {
    Value = (__CFDictionary *)CFDictionaryGetValue(v6, key);
    if (Value)
    {
      v8 = Value;
      CFRetain(Value);
LABEL_9:
      *a3 = v8;
      return 0;
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v8 = Mutable;
      CFDictionarySetValue(*a1, key, Mutable);
      goto LABEL_9;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryGetClassID()
{
  if (FigBufferedAirPlayGlobalRoutingRegistryGetClassID_sGlobalRoutingRegistryOnce != -1)
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryGetClassID_sGlobalRoutingRegistryOnce, &__block_literal_global_14);
  return sGlobalRoutingRegistryClassID;
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryGetTypeID()
{
  if (FigBufferedAirPlayGlobalRoutingRegistryGetClassID_sGlobalRoutingRegistryOnce != -1)
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryGetClassID_sGlobalRoutingRegistryOnce, &__block_literal_global_14);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance()
{
  if (FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance_onceToken != -1)
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance_onceToken, &__block_literal_global_5);
  return FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance_sGlobalRoutingRegistry;
}

CFStringRef FigBufferedAirPlayGlobalRoutingRegistryCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigBufferedAirPlayGlobalRoutingRegistry %p]"), a1);
}

uint64_t FigVTTSerializerGetClassID()
{
  MEMORY[0x19402F294](&FigVTTSerializerGetClassID_sRegisterFigVTTSerializerBaseTypeOnce, figVTTSerializer_RegisterFigVTTSerializerBaseType);
  return sFigVTTSerializerClassID;
}

uint64_t figVTTSerializer_RegisterFigVTTSerializerBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVTTSerializerGetTypeID()
{
  MEMORY[0x19402F294](&FigVTTSerializerGetClassID_sRegisterFigVTTSerializerBaseTypeOnce, figVTTSerializer_RegisterFigVTTSerializerBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigVTTSerializerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVTTSerializerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigVTTSerializerInvalidate(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  if (!a1)
    return 4294954516;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigVTTSerializerAddText(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigVTTSerializerFlush(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

CFStringRef figVTTSerializer_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVTTSerializer %p]"), a1);
}

void figPlaybackBoss_durationChanged(uint64_t a1, uint64_t a2)
{
  OpaqueCMTimebase *v3;
  float EffectiveRate;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v6;
  _QWORD *ValueAtIndex;
  uint64_t v8;
  NSObject *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = *MEMORY[0x1E0CA2E18];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 140) = 1;
    MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 576));
    if (!*(_BYTE *)(a2 + 128) && *(_DWORD *)(a2 + 424) == 1886151033)
    {
      v3 = *(OpaqueCMTimebase **)(a2 + 112);
      if (v3)
        EffectiveRate = CMTimebaseGetEffectiveRate(v3);
      else
        EffectiveRate = 1.0;
      bossScheduleReachedEndCallbackForRate(a2, EffectiveRate);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a2 + 576));
    bossGetContentDuration(a2, (uint64_t)&v10);
    MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 64));
    if (*(_BYTE *)(a2 + 840))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(a2 + 80) >= 1)
    {
      v6 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 72), v6);
        v8 = ValueAtIndex[20];
        if (v8 && *((_BYTE *)ValueAtIndex + 168))
        {
          v12 = v10;
          v13 = v11;
          if (FigSnippetEditCursorServiceSetTrackDuration(v8, (uint64_t)&v12))
          {
            v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        ++v6;
      }
      while (v6 < *(_QWORD *)(a2 + 80));
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a2 + 64));
  }
}

void figPlaybackBoss_formatReaderPropertyChanged(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 16))
    *(_BYTE *)(a2 + 140) = 1;
}

uint64_t bossSetCursorServiceInTrackList(const __CFArray *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  char *ValueAtIndex;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, char *);
  uint64_t result;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(a1, v6);
    v8 = ValueAtIndex;
    if (a2)
    {
      v9 = ValueAtIndex + 48;
      if (*(_QWORD *)(a2 + 8 * v6))
        FigCFDictionaryGetBooleanIfPresent();
    }
    else
    {
      v9 = ValueAtIndex + 48;
    }
    v10 = *((_QWORD *)v8 + 4);
    v11 = *(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v11)
      break;
    result = v11(v10, v9);
    if ((_DWORD)result)
      return result;
    v8[396] = 0;
    if (v5 == ++v6)
      return 0;
  }
  return 4294954514;
}

uint64_t bossElectNewTimebaseStarter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  CFIndex v5;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t);

  if ((*(_QWORD *)(result + 96) & 0x8000000000000000) != 0)
  {
    v1 = result;
    v2 = *MEMORY[0x1E0C9AE50];
    v3 = 1;
    do
    {
      while (1)
      {
        v4 = v3;
        if (*(uint64_t *)(v1 + 80) >= 1)
          break;
        v3 = 0;
        if ((v4 & 1) == 0)
          return result;
      }
      v5 = 0;
      while (1)
      {
        result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 72), v5);
        v6 = result;
        if ((v4 & 1) == 0 || *(_DWORD *)(result + 72) == 1936684398)
        {
          result = CMBaseObjectGetVTable();
          if (*(_QWORD *)(*(_QWORD *)(result + 16) + 8))
          {
            FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v6 + 80));
            result = CMBaseObjectGetVTable();
            v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
            if (v8)
            {
              result = v8(FigBaseObject, CFSTR("IsTimebaseStarter"), v2);
              if (!(_DWORD)result)
                break;
            }
          }
        }
        if (++v5 >= *(_QWORD *)(v1 + 80))
        {
          v5 = *(_QWORD *)(v1 + 96);
          goto LABEL_15;
        }
      }
      *(_QWORD *)(v1 + 96) = v5;
LABEL_15:
      v3 = 0;
    }
    while (((v5 < 0) & v4) != 0);
  }
  return result;
}

void bossElectNewPreferredClock(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  CFIndex v5;
  _QWORD *ValueAtIndex;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, CMClockRef *);
  int v9;
  OpaqueCMClock *v10;
  CMClockRef newSourceClock;

  newSourceClock = 0;
  if (*(uint64_t *)(a1 + 88) <= -2)
  {
    v2 = *MEMORY[0x1E0C9AE00];
    v3 = 1;
    while (1)
    {
      v4 = v3;
      if (*(uint64_t *)(a1 + 80) >= 1)
      {
        v5 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5);
          if ((v4 & 1) == 0 || *((_DWORD *)ValueAtIndex + 18) == 1936684398)
          {
            FigBaseObject = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
            v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMClockRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
            if (v8)
            {
              v9 = v8(FigBaseObject, CFSTR("PreferredClock"), v2, &newSourceClock);
              v10 = newSourceClock;
              if (!v9 && newSourceClock != 0)
              {
                *(_QWORD *)(a1 + 88) = v5;
                goto LABEL_17;
              }
            }
          }
          ++v5;
        }
        while (v5 < *(_QWORD *)(a1 + 80));
        v10 = newSourceClock;
        if (newSourceClock)
          break;
      }
      v3 = 0;
      if ((v4 & 1) == 0)
      {
        newSourceClock = CMClockGetHostTimeClock();
        CFRetain(newSourceClock);
        *(_QWORD *)(a1 + 88) = -2;
        v10 = newSourceClock;
        break;
      }
    }
LABEL_17:
    CMTimebaseSetSourceClock(*(CMTimebaseRef *)(a1 + 112), v10);
    CFRelease(newSourceClock);
  }
}

uint64_t bossGetVideoDecoderMaxSpeedThreshold(uint64_t a1, float *a2)
{
  int v4;
  CFIndex v5;
  float v6;
  const void *ValueAtIndex;
  float v8;
  uint64_t result;
  float v10;

  if (*(uint64_t *)(a1 + 80) < 1)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 3.4028e38;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5);
    v10 = 3.4028e38;
    if (*((_DWORD *)ValueAtIndex + 18) == 1986618469
      && !FigGetEstimatedMaxFullFramePlaybackSpeedForTrackReader(*((_QWORD *)ValueAtIndex + 4), &v10))
    {
      if (v6 >= v10)
        v8 = v10;
      else
        v8 = v6;
      if (v4)
        v6 = v8;
      else
        v6 = v10;
      v4 = 1;
    }
    ++v5;
  }
  while (v5 < *(_QWORD *)(a1 + 80));
  result = 0;
  if (v4)
  {
    if (v6 > 2.0)
    {
      *a2 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t bossBuildMentorForTrack(uint64_t a1, uint64_t a2, const __CFAllocator *a3, const __CFDictionary *a4)
{
  uint64_t v8;
  __CFDictionary *Mutable;
  CMTime *v10;
  const void *Value;
  const void *v12;
  CFTypeID v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  CFTypeID v28;
  CFComparisonResult v29;
  uint64_t ThatDiscards;
  uint64_t FigBaseObject;
  unsigned int (*v32)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  int v33;
  CFTypeID TypeID;
  CFStringRef v35;
  const __CFDictionary *v36;
  CFTypeID v37;
  const __CFNumber *v38;
  const __CFNumber *v39;
  CFTypeID v40;
  CFTypeID v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, const __CFString *, _QWORD, _BYTE *);
  const void *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v48;
  int v49;
  CMTimeEpoch v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  uint64_t v53;
  int v54;
  uint64_t *v55;
  const void *v56;
  CFTypeID v57;
  int Int32IfPresent;
  int Int64IfPresent;
  int v60;
  int v61;
  _BOOL4 v62;
  int v63;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const __CFAllocator *v71;
  uint64_t v72;
  void (*v73)(uint64_t, const __CFString *, const __CFAllocator *, _BYTE *);
  const void *v74;
  NSObject *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  const __CFAllocator *v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, const __CFString *, const __CFAllocator *, _BYTE *);
  uint64_t v82;
  uint64_t *v83;
  const void *ValueAtIndex;
  CFTypeRef v85;
  int32_t v86;
  CMTimeEpoch v87;
  int v88;
  NSObject *v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  CFNumberRef v93;
  NSObject *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  void (*v98)(uint64_t, const __CFString *, CFNumberRef);
  NSObject *v99;
  unsigned int v100;
  unsigned int v101;
  CFStringRef v102;
  uint64_t v103;
  void (*v104)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  _QWORD *v105;
  const void *v106;
  uint64_t v107;
  CFStringRef v108;
  const void **v109;
  uint64_t v110;
  void (*v111)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  uint64_t v112;
  CFStringRef v113;
  __int128 v114;
  CFStringRef v115;
  CFStringRef v116;
  _OWORD *v117;
  int v118;
  NSObject *v119;
  unsigned int v120;
  unsigned int v121;
  CFStringRef v122;
  NSObject *v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  int v130;
  int v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  __int128 v142;
  uint64_t v143;
  CMTime rhs;
  CMTime lhs;
  CMTime valuePtr;
  CFTypeRef cf;
  os_log_type_t v148;
  unsigned int v149;
  CMTime v150;
  os_log_type_t type[4];
  int v152;
  int32_t timescale;
  _BYTE time[64];
  _BYTE v155[38];
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  __int16 v162;
  const char *v163;
  __int16 v164;
  uint64_t v165;
  CMTime v166[5];
  CMTime v167;
  CMTimeValue v168;
  __int16 v169;
  _BYTE v170[10];
  CMTimeValue v171;
  __int16 v172;
  CMTimeValue v173;
  __int16 v174;
  CMTimeValue v175;
  __int16 v176;
  int v177;
  __int16 v178;
  int v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a2 + 344) = 0;
  v8 = a2 + 348;
  CMTimeMake((CMTime *)time, 1, 10);
  *(_OWORD *)v8 = *(_OWORD *)time;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)&time[16];
  Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(a2 + 256) = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v10 = (CMTime *)MEMORY[0x1E0CA2E18];
  v143 = a1;
  if (!a4)
  {
    v19 = (const void *)*MEMORY[0x1E0C9AE50];
    goto LABEL_37;
  }
  v167 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  LODWORD(v150.value) = 0;
  Value = CFDictionaryGetValue(a4, CFSTR("gdrCount"));
  if (Value)
  {
    v12 = Value;
    v13 = CFGetTypeID(Value);
    if (v13 == CFNumberGetTypeID())
      *(_QWORD *)(a2 + 216) = CFRetain(v12);
  }
  v14 = CFDictionaryGetValue(a4, CFSTR("BossTrack_BonusAudioPrimingPacketCountAtStart"));
  if (v14)
  {
    v15 = v14;
    v16 = CFGetTypeID(v14);
    if (v16 == CFNumberGetTypeID())
      *(_QWORD *)(a2 + 224) = CFRetain(v15);
  }
  v17 = (const void *)*MEMORY[0x1E0C9AE40];
  if (v17 == CFDictionaryGetValue(a4, CFSTR("BossTrack_TrimSampleBufferDurations")))
    *(_BYTE *)(a2 + 248) = 1;
  v18 = CFDictionaryGetValue(a4, CFSTR("BossTrack_SampleBufferCryptor"));
  if (v18)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 256), CFSTR("SampleBufferCryptor"), v18);
  if (FigCFDictionaryGetCMTimeIfPresent() && (v167.flags & 0x1D) == 1)
    *(CMTime *)(a2 + 264) = v167;
  *(_DWORD *)(a2 + 288) = 1065353216;
  FigCFDictionaryGetFloat32IfPresent();
  if (FigCFDictionaryGetCMTimeIfPresent() && (v167.flags & 0x1D) == 1)
    *(CMTime *)(a2 + 292) = v167;
  if (FigCFDictionaryGetCMTimeIfPresent() && (v167.flags & 0x1D) == 1)
    *(CMTime *)(a2 + 316) = v167;
  v19 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v19 == CFDictionaryGetValue(a4, CFSTR("BossTrack_SendSampleReferenceSampleBuffers")))
    *(_BYTE *)(a2 + 340) = 1;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  if (FigCFDictionaryGetInt32IfPresent())
    FigCFDictionarySetInt32();
  v20 = CFDictionaryGetValue(a4, CFSTR("BossTrack_OptimizeSampleCursorIPCForPower"));
  if (v19 == CFDictionaryGetValue(a4, CFSTR("BossTrack_RoundUpStartPTS")))
    *(_BYTE *)(a2 + 399) = 1;
  if (v17 == CFDictionaryGetValue(a4, CFSTR("BossTrack_EnableForStepping")))
    *(_BYTE *)(a2 + 89) = 0;
  *(_OWORD *)time = *MEMORY[0x1E0CA2E68];
  v21 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&time[24] = *(_OWORD *)time;
  *(_QWORD *)&time[16] = v21;
  *(_QWORD *)&time[40] = v21;
  *(_OWORD *)&time[48] = *(_OWORD *)time;
  *(_OWORD *)&v155[8] = *(_OWORD *)time;
  *(_QWORD *)v155 = v21;
  *(_QWORD *)&v155[24] = v21;
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  if (!FigCFDictionaryGetCMTimeIfPresent())
  {
    *(_OWORD *)&time[48] = *(_OWORD *)time;
    *(_QWORD *)v155 = *(_QWORD *)&time[16];
  }
  if (!FigCFDictionaryGetCMTimeIfPresent())
  {
    *(_OWORD *)&v155[8] = *(_OWORD *)&time[24];
    *(_QWORD *)&v155[24] = *(_QWORD *)&time[40];
  }
  *(_QWORD *)(a2 + 420) = *(_QWORD *)&time[16];
  *(_OWORD *)(a2 + 428) = *(_OWORD *)&time[24];
  *(_QWORD *)(a2 + 444) = *(_QWORD *)&time[40];
  *(_OWORD *)(a2 + 452) = *(_OWORD *)&time[48];
  *(_OWORD *)(a2 + 476) = *(_OWORD *)&v155[8];
  v22 = *(_OWORD *)&time[16];
  *(_OWORD *)&v166[1].timescale = *(_OWORD *)&time[32];
  *(_OWORD *)&v166[2].value = *(_OWORD *)&time[48];
  *(_OWORD *)&v166[2].epoch = *(_OWORD *)v155;
  *(_OWORD *)&v166[3].timescale = *(_OWORD *)&v155[16];
  v23 = *(_OWORD *)time;
  *(_OWORD *)(a2 + 404) = *(_OWORD *)time;
  *(_QWORD *)(a2 + 468) = *(_QWORD *)v155;
  *(_QWORD *)(a2 + 492) = *(_QWORD *)&v155[24];
  *(_OWORD *)&v166[0].value = v23;
  *(_OWORD *)&v166[0].epoch = v22;
  *(_BYTE *)(a2 + 400) = !FigVideoCompositionTimeWindowDurationIsZero((uint64_t)v166);
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  if (v17 != v20)
  {
    Mutable = *(__CFDictionary **)(a2 + 256);
LABEL_37:
    CFDictionarySetValue(Mutable, CFSTR("OptimizeSampleCursorIPCForPower"), v19);
  }
  cf = 0;
  v24 = *(_DWORD *)(a2 + 72);
  if (v24 == 1936684398)
  {
    v25 = CFSTR("AudioEarlyDumpBefore");
  }
  else
  {
    if (v24 != 1986618469)
      goto LABEL_48;
    v25 = CFSTR("VideoEarlyDumpBefore");
  }
  v26 = (const __CFString *)CFPreferencesCopyValue(v25, CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v26)
  {
    v27 = v26;
    v28 = CFGetTypeID(v26);
    if (v28 == CFStringGetTypeID())
    {
      v29 = CFStringCompare(v27, CFSTR("decode"), 1uLL);
      CFRelease(v27);
      if (v29 == kCFCompareEqualTo)
      {
        ThatDiscards = FigSampleBufferConsumerCreateThatDiscards((_QWORD *)(a2 + 96));
        if ((_DWORD)ThatDiscards)
          return ThatDiscards;
        goto LABEL_84;
      }
    }
    else
    {
      CFRelease(v27);
    }
  }
LABEL_48:
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 80));
  v32 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v32 || v32(FigBaseObject, CFSTR("SourceSampleBufferConsumer"), a3, a2 + 96))
  {
    v166[0] = *v10;
    memset(&v167, 0, sizeof(v167));
    CMTimeMake(&v167, 1, 1);
    memset(&v150, 0, sizeof(v150));
    CMTimeMake(&v150, 1, 2);
    v33 = *(_DWORD *)(a2 + 72);
    if (v33 == 1936684398)
    {
      CMTimeMake((CMTime *)time, 4, 1);
      v167 = *(CMTime *)time;
      CMTimeMake((CMTime *)time, 2, 1);
      v150 = *(CMTime *)time;
      v33 = *(_DWORD *)(a2 + 72);
    }
    MEMORY[0x19402F294](&sReadModelSpecificPlaybackTuningOnce, bossReadModelSpecificPlaybackTuning);
    if (sModelSpecificPlaybackTuning)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID((CFTypeRef)sModelSpecificPlaybackTuning))
      {
        v35 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%c%c%c%c"), (v33 >> 24), (v33 << 8 >> 24), ((__int16)v33 >> 8), (char)v33);
        v36 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)sModelSpecificPlaybackTuning, v35);
        if (v36
          || (v36 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)sModelSpecificPlaybackTuning, CFSTR("Default"))) != 0)
        {
          v37 = CFDictionaryGetTypeID();
          if (v37 == CFGetTypeID(v36))
          {
            v38 = (const __CFNumber *)CFDictionaryGetValue(v36, CFSTR("SampleBufferQueueLowWaterLevelMilliseconds"));
            v39 = (const __CFNumber *)CFDictionaryGetValue(v36, CFSTR("SampleBufferQueueHighWaterLevelMilliseconds"));
            LODWORD(valuePtr.value) = 0;
            if (v38)
            {
              v40 = CFNumberGetTypeID();
              if (v40 == CFGetTypeID(v38))
              {
                CFNumberGetValue(v38, kCFNumberIntType, &valuePtr);
                CMTimeMake((CMTime *)time, SLODWORD(valuePtr.value), 1000);
                v150 = *(CMTime *)time;
              }
            }
            if (v39)
            {
              v41 = CFNumberGetTypeID();
              if (v41 == CFGetTypeID(v39))
              {
                CFNumberGetValue(v39, kCFNumberIntType, &valuePtr);
                CMTimeMake((CMTime *)time, SLODWORD(valuePtr.value), 1000);
                v167 = *(CMTime *)time;
              }
            }
          }
        }
        a1 = v143;
        if (v35)
          CFRelease(v35);
      }
    }
    if (FigCFDictionaryGetCMTimeIfPresent() && (v166[0].flags & 0x1D) == 1)
      v167 = v166[0];
    if (FigCFDictionaryGetCMTimeIfPresent() && (v166[0].flags & 0x1D) == 1)
      v150 = v166[0];
    v42 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)time = 0;
    v43 = FigTrackReaderGetFigBaseObject(v42);
    v44 = *(void (**)(uint64_t, const __CFString *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v44)
    {
      v44(v43, CFSTR("HasSeamSamples"), *MEMORY[0x1E0C9AE00], time);
      v45 = *(const void **)time;
      if (*(_QWORD *)time)
        CFRelease(*(CFTypeRef *)time);
    }
    else
    {
      v45 = 0;
    }
    if (v45 == v19)
    {
      memset(time, 0, 24);
      CMTimeMake((CMTime *)time, 1, 1);
      lhs = v167;
      rhs = *(CMTime *)time;
      CMTimeAdd(&valuePtr, &lhs, &rhs);
      v167 = valuePtr;
      lhs = v150;
      rhs = *(CMTime *)time;
      CMTimeAdd(&valuePtr, &lhs, &rhs);
      v150 = valuePtr;
    }
    v46 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 80));
    v47 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v47)
      return 4294954514;
    ThatDiscards = v47(v46, CFSTR("SourceSampleBufferQueue"), a3, &cf);
    v48 = cf;
    if ((_DWORD)ThatDiscards
      || (*(CMTime *)time = v167,
          valuePtr = v150,
          ThatDiscards = FigSampleBufferConsumerCreateForBufferQueue((uint64_t)cf, (uint64_t)time, (uint64_t)&valuePtr, (_QWORD *)(a2 + 96)), v48 = cf, (_DWORD)ThatDiscards))
    {
      if (v48)
        CFRelease(v48);
      return ThatDiscards;
    }
    if (cf)
      CFRelease(cf);
  }
LABEL_84:
  v49 = *(unsigned __int8 *)(a1 + 121);
  v167.value = 0;
  v150.value = 0;
  v142 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)time = *MEMORY[0x1E0CA2E68];
  v50 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_QWORD *)&time[16] = v50;
  v51 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 80));
  v52 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v52)
  {
    if (!v52(v51, CFSTR("PipelineLatency"), a3, &v150))
    {
      if (v150.value)
      {
        CMTimeMakeFromDictionary((CMTime *)time, (CFDictionaryRef)v150.value);
        if (v150.value)
        {
          CFRelease((CFTypeRef)v150.value);
          v150.value = 0;
        }
      }
    }
  }
  if (*(_BYTE *)(a2 + 340))
  {
    v53 = FigSampleGeneratorCreateForFormatReaderProducingByteReferenceSampleBuffers(a3, *(const void **)(a1 + 40), *(const void **)(a2 + 32), *(_QWORD *)(a1 + 112), 0, &v167);
    if (!(_DWORD)v53)
    {
LABEL_91:
      ThatDiscards = 0;
      *(_QWORD *)(a2 + 40) = CFRetain((CFTypeRef)v167.value);
      goto LABEL_92;
    }
  }
  else
  {
    v67 = *(_QWORD *)(a1 + 112);
    if (v49)
    {
      v68 = *(const void **)(a2 + 32);
      v69 = *(const void **)(a1 + 48);
      v70 = *(const void **)(a1 + 56);
      v166[0] = *(CMTime *)time;
      v53 = FigSampleGeneratorCreateForTrackReaderUsingScheduledIO(a3, v68, v69, v70, v67, v166, 2, &v167);
      if (!(_DWORD)v53)
        goto LABEL_91;
    }
    else
    {
      v53 = FigSampleGeneratorCreateForFormatReaderUsingByteStreams(a3, *(const void **)(a1 + 40), *(const void **)(a2 + 32), *(const void **)(a1 + 48), v67, 2, &v167);
      if (!(_DWORD)v53)
        goto LABEL_91;
    }
  }
  ThatDiscards = v53;
LABEL_92:
  if (v167.value)
    CFRelease((CFTypeRef)v167.value);
  if ((_DWORD)ThatDiscards)
    return ThatDiscards;
  v54 = *(_DWORD *)(a2 + 72);
  v55 = &sFigCDSNodeProtocolID;
  if (v54 != 1936684398 && v54 != 1751216244)
  {
    *(_QWORD *)time = 0;
    v71 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v72 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 80));
    v73 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (v73)
      v73(v72, CFSTR("SupportsSavingFrames"), v71, time);
    v74 = *(const void **)time;
    if (*(const void **)time == v19)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 256), CFSTR("SpeculativelySaveFrames"), v19);
      v74 = *(const void **)time;
    }
    if (v74)
      CFRelease(v74);
    ThatDiscards = VideoMentorNew(*(const void **)(a2 + 48), *(const void **)(a2 + 40), *(const void **)(a2 + 96), *(const __CFDictionary **)(a2 + 256), (_QWORD *)(a2 + 120));
    if ((_DWORD)ThatDiscards)
      return ThatDiscards;
    goto LABEL_182;
  }
  LODWORD(lhs.value) = 0;
  LODWORD(rhs.value) = 0;
  valuePtr.value = 0;
  LODWORD(cf) = 0;
  timescale = 0;
  if (!a4)
    goto LABEL_247;
  v56 = CFDictionaryGetValue(a4, CFSTR("iTunesGaplessInfo"));
  if (!v56)
    goto LABEL_247;
  v57 = CFGetTypeID(v56);
  if (v57 != CFDictionaryGetTypeID())
    goto LABEL_247;
  Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
  Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  v60 = FigCFDictionaryGetInt32IfPresent();
  v61 = FigCFDictionaryGetInt32IfPresent();
  v62 = 0;
  v63 = 0;
  if (v60 && v61)
  {
    v63 = Int64IfPresent;
    if (FigCFDictionaryGetInt32IfPresent())
    {
      if (!Int64IfPresent)
      {
        LODWORD(v167.value) = 0;
        LOBYTE(v150.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v65 = v167.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v150.value))
          v66 = v65;
        else
          v66 = v65 & 0xFFFFFFFE;
        if (v66)
        {
          LODWORD(v166[0].value) = 136315138;
          *(CMTimeValue *)((char *)&v166[0].value + 4) = (CMTimeValue)"bossGetGaplessInfoFromOptions";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        LODWORD(rhs.value) = 0;
      }
      goto LABEL_129;
    }
    if (*(_BYTE *)(a1 + 124))
    {
LABEL_129:
      v62 = (Int32IfPresent | Int64IfPresent) != 0;
      goto LABEL_130;
    }
    LODWORD(v167.value) = 0;
    LOBYTE(v150.value) = 0;
    v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v76 = v167.value;
    if (os_log_type_enabled(v75, v150.value))
      v77 = v76;
    else
      v77 = v76 & 0xFFFFFFFE;
    if (v77)
    {
      LODWORD(v166[0].value) = 136315138;
      *(CMTimeValue *)((char *)&v166[0].value + 4) = (CMTimeValue)"bossGetGaplessInfoFromOptions";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_247:
    v62 = 0;
    v63 = 0;
  }
LABEL_130:
  ThatDiscards = AudioMentorNew(*(const void **)(a2 + 48), *(const void **)(a2 + 40), *(const void **)(a2 + 96), *(const __CFDictionary **)(a2 + 256), (_QWORD *)(a2 + 104));
  if (!(_DWORD)ThatDiscards && v62)
  {
    v152 = 0;
    memset(v166, 0, 96);
    v78 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)time = 0;
    v79 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v80 = FigTrackReaderGetFigBaseObject(v78);
    v81 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v81)
    {
      v82 = v81(v80, CFSTR("TrackFormatDescriptionArray"), v79, time);
      if (!(_DWORD)v82)
      {
        if (*(_QWORD *)time)
        {
          v83 = &sFigCDSNodeProtocolID;
          if (CFArrayGetCount(*(CFArrayRef *)time))
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)time, 0);
            if (ValueAtIndex)
              v85 = CFRetain(ValueAtIndex);
            else
              v85 = 0;
            ThatDiscards = 0;
          }
          else
          {
            ThatDiscards = FigSignalErrorAt();
            v85 = 0;
          }
          goto LABEL_142;
        }
        v82 = FigSignalErrorAt();
      }
      ThatDiscards = v82;
      v85 = 0;
    }
    else
    {
      v85 = 0;
      ThatDiscards = 4294954514;
    }
    v83 = &sFigCDSNodeProtocolID;
LABEL_142:
    if (*(_QWORD *)time)
      CFRelease(*(CFTypeRef *)time);
    if (!(_DWORD)ThatDiscards)
    {
      v86 = timescale;
      CMTimeMake(v166, SLODWORD(lhs.value), timescale);
      if (v63)
      {
        CMTimeMake((CMTime *)time, valuePtr.value, v86);
        *(_OWORD *)&v166[1].value = *(_OWORD *)time;
        v87 = *(_QWORD *)&time[16];
      }
      else
      {
        *(_OWORD *)&v166[1].value = *MEMORY[0x1E0CA2E30];
        v87 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
      }
      v166[1].epoch = v87;
      CMTimeMake((CMTime *)time, 0, v86);
      v166[2] = *(CMTime *)time;
      v166[3] = v166[1];
      v88 = (int)cf;
      if ((int)cf <= 0)
      {
        LODWORD(v150.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v89 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v90 = v150.value;
        if (os_log_type_enabled(v89, type[0]))
          v91 = v90;
        else
          v91 = v90 & 0xFFFFFFFE;
        if (v91)
        {
          LODWORD(v167.value) = 136315394;
          *(CMTimeValue *)((char *)&v167.value + 4) = (CMTimeValue)"bossCreateAudioAndGaplessMentorForTrack";
          LOWORD(v167.flags) = 1024;
          *(CMTimeFlags *)((char *)&v167.flags + 2) = cf;
          _os_log_send_and_compose_impl();
        }
        v88 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        LODWORD(cf) = 1;
        v83 = &sFigCDSNodeProtocolID;
      }
      v92 = rhs.value;
      if (!*(_BYTE *)(v143 + 124) && LODWORD(rhs.value))
      {
        *(_DWORD *)type = (v88 + LODWORD(rhs.value) - 1) / v88;
        v93 = CFNumberCreate(v79, kCFNumberSInt32Type, type);
        memset(&v150, 0, sizeof(v150));
        CMTimeMake(&v150, SLODWORD(rhs.value), v86);
        *(CMTime *)time = v150;
        *(_QWORD *)(a2 + 240) = CMTimeCopyAsDictionary((CMTime *)time, v79);
        if (*((_DWORD *)v83 + 788))
        {
          v149 = 0;
          v148 = OS_LOG_TYPE_DEFAULT;
          v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v95 = v149;
          if (os_log_type_enabled(v94, v148))
            v96 = v95;
          else
            v96 = v95 & 0xFFFFFFFE;
          if (v96)
          {
            LODWORD(v167.value) = 136316418;
            *(CMTimeValue *)((char *)&v167.value + 4) = (CMTimeValue)"bossCreateAudioAndGaplessMentorForTrack";
            LOWORD(v167.flags) = 2048;
            *(_QWORD *)((char *)&v167.flags + 2) = v143;
            HIWORD(v167.epoch) = 2082;
            v168 = v143 + 841;
            v169 = 1024;
            *(_DWORD *)v170 = rhs.value;
            *(_WORD *)&v170[4] = 1024;
            *(_DWORD *)&v170[6] = (_DWORD)cf;
            LOWORD(v171) = 1024;
            *(_DWORD *)((char *)&v171 + 2) = *(_DWORD *)type;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v83 = &sFigCDSNodeProtocolID;
        }
        v97 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(v143 + 40));
        v98 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
        if (v98)
          v98(v97, CFSTR("MarkPacketOffsetFromEOF"), v93);
        CFRelease(v93);
        v166[1] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
        v166[3] = v166[1];
        v92 = rhs.value;
        v88 = (int)cf;
      }
      a1 = v143;
      if (v92 > v88)
      {
        v152 = v92 / v88;
        *(_QWORD *)(a2 + 232) = CFNumberCreate(v79, kCFNumberSInt32Type, &v152);
      }
      if (*((_DWORD *)v83 + 788))
      {
        LODWORD(v150.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v99 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v100 = v150.value;
        if (os_log_type_enabled(v99, type[0]))
          v101 = v100;
        else
          v101 = v100 & 0xFFFFFFFE;
        if (v101)
        {
          LODWORD(v167.value) = 136317186;
          *(CMTimeValue *)((char *)&v167.value + 4) = (CMTimeValue)"bossCreateAudioAndGaplessMentorForTrack";
          LOWORD(v167.flags) = 2048;
          *(_QWORD *)((char *)&v167.flags + 2) = v143;
          HIWORD(v167.epoch) = 2082;
          v168 = v143 + 841;
          v169 = 2048;
          *(_QWORD *)v170 = v166[0].value;
          *(_WORD *)&v170[8] = 2048;
          v171 = v166[1].value;
          v172 = 2048;
          v173 = v166[2].value;
          v174 = 2048;
          v175 = v166[3].value;
          v176 = 1024;
          v177 = v152;
          v178 = 1024;
          v179 = rhs.value;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ThatDiscards = EditMentorNewWithChildAudioMentorAndSingleEditSegment(*(_QWORD **)(a2 + 104), (uint64_t)v166, (_QWORD *)(a2 + 112));
      v102 = CFStringCreateWithFormat(v79, 0, CFSTR("GAPLESS (%c%c%c%c)"), HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
      EditMentorSetDebugName(*(_QWORD **)(a2 + 112), v102);
      if (v102)
        CFRelease(v102);
    }
    if (v85)
      CFRelease(v85);
  }
  v55 = &sFigCDSNodeProtocolID;
  if ((_DWORD)ThatDiscards)
    return ThatDiscards;
  v71 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_182:
  v103 = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a2 + 32));
  v104 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
  if (v104)
    v104(v103, CFSTR("EditCursorService"), v71, a2 + 56);
  v105 = *(_QWORD **)(a2 + 104);
  if (v105)
  {
    v106 = *(const void **)(a2 + 56);
    if (*(_QWORD *)(a2 + 112))
      v107 = EditMentorNewWithChildEditMentor(*(_QWORD **)(a2 + 112), v106, 0, (_QWORD *)(a2 + 128));
    else
      v107 = EditMentorNewWithChildAudioMentor(v105, v106, (_QWORD *)(a2 + 128));
  }
  else
  {
    v107 = EditMentorNewWithChildVideoMentor(*(_QWORD **)(a2 + 120), *(const void **)(a2 + 56), (_QWORD *)(a2 + 128));
  }
  ThatDiscards = v107;
  if (!(_DWORD)v107)
  {
    v108 = CFStringCreateWithFormat(v71, 0, CFSTR("PRIMARY (%c%c%c%c)"), HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
    EditMentorSetDebugName(*(_QWORD **)(a2 + 128), v108);
    if (v108)
      CFRelease(v108);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a2 + 128);
    v109 = (const void **)(a2 + 64);
    v110 = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a2 + 32));
    v111 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
    if (v111)
      v111(v110, CFSTR("SecondaryEditCursorService"), v71, a2 + 64);
    if (*v109)
    {
      v112 = EditMentorNewWithChildEditMentor(*(_QWORD **)(a2 + 192), *v109, 0, (_QWORD *)(a2 + 136));
      if ((_DWORD)v112)
        return v112;
      v113 = CFStringCreateWithFormat(v71, 0, CFSTR("SUPER (%c%c%c%c)"), HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
      EditMentorSetDebugName(*(_QWORD **)(a2 + 136), v113);
      if (v113)
        CFRelease(v113);
      *(_QWORD *)(a2 + 192) = *(_QWORD *)(a2 + 136);
    }
    if ((*(_BYTE *)(a1 + 204) & 1) != 0
      && (*(_BYTE *)(a1 + 228) & 1) != 0
      && !*(_QWORD *)(a1 + 232)
      && (*(_QWORD *)(a1 + 216) & 0x8000000000000000) == 0)
    {
      v114 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)time = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&time[16] = v114;
      *(_OWORD *)&time[32] = *(_OWORD *)(a1 + 224);
      v112 = FigLoopingEditCursorServiceCreate((uint64_t)v71, (__int128 *)time, (_QWORD *)(a2 + 144));
      if ((_DWORD)v112)
        return v112;
      v112 = EditMentorNewWithChildEditMentor(*(_QWORD **)(a2 + 192), *(const void **)(a2 + 144), 0, (_QWORD *)(a2 + 152));
      if ((_DWORD)v112)
        return v112;
      v115 = CFStringCreateWithFormat(v71, 0, CFSTR("LOOPING (%c%c%c%c)"), HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
      EditMentorSetDebugName(*(_QWORD **)(a2 + 152), v115);
      if (v115)
        CFRelease(v115);
      *(_QWORD *)(a2 + 192) = *(_QWORD *)(a2 + 152);
    }
    if (!*(_QWORD *)(a2 + 104))
      goto LABEL_214;
    *(_OWORD *)time = *MEMORY[0x1E0CA2E10];
    *(_QWORD *)&time[16] = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
    v112 = FigSnippetEditCursorServiceCreate((uint64_t)v71, (uint64_t)time, (_QWORD *)(a2 + 160));
    if (!(_DWORD)v112)
    {
      *(_BYTE *)(a2 + 168) = 0;
      v112 = EditMentorNewWithChildEditMentor(*(_QWORD **)(a2 + 192), *(const void **)(a2 + 160), 1, (_QWORD *)(a2 + 176));
      if (!(_DWORD)v112)
      {
        v116 = CFStringCreateWithFormat(v71, 0, CFSTR("SNIPPET (%c%c%c%c)"), HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
        EditMentorSetDebugName(*(_QWORD **)(a2 + 176), v116);
        if (v116)
          CFRelease(v116);
        *(_QWORD *)(a2 + 192) = *(_QWORD *)(a2 + 176);
LABEL_214:
        if (*(_QWORD *)(a2 + 120))
        {
          v117 = (_OWORD *)(a2 + 500);
          if ((*(_BYTE *)(a2 + 512) & 1) != 0)
          {
            memset(&v166[1], 0, 72);
            *(_OWORD *)&v166[0].value = *v117;
            v166[0].epoch = *(_QWORD *)(a2 + 516);
            v118 = *(_DWORD *)(a2 + 536);
          }
          else
          {
            v118 = *(_DWORD *)(a2 + 536);
            if ((v118 & 1) == 0)
              goto LABEL_217;
            memset(&v166[1], 0, 72);
            *(_OWORD *)&v166[0].value = v142;
            v166[0].epoch = v50;
          }
          if ((v118 & 1) != 0)
          {
            *(_OWORD *)time = *(_OWORD *)(a2 + 524);
            *(_QWORD *)&time[16] = *(_QWORD *)(a2 + 540);
            *(_OWORD *)&v167.value = *v117;
            v167.epoch = *(_QWORD *)(a2 + 516);
            CMTimeSubtract(&v166[1], (CMTime *)time, &v167);
          }
          else
          {
            v166[1] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
          }
          v166[2] = v166[0];
          v166[3] = v166[1];
          if (*((_DWORD *)v55 + 788))
          {
            LODWORD(v150.value) = 0;
            LOBYTE(valuePtr.value) = 0;
            v119 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v120 = v150.value;
            if (os_log_type_enabled(v119, valuePtr.value))
              v121 = v120;
            else
              v121 = v120 & 0xFFFFFFFE;
            if (v121)
            {
              LODWORD(v167.value) = 136316418;
              *(CMTimeValue *)((char *)&v167.value + 4) = (CMTimeValue)"bossBuildMentorForTrack";
              LOWORD(v167.flags) = 2048;
              *(_QWORD *)((char *)&v167.flags + 2) = a1;
              HIWORD(v167.epoch) = 2048;
              v168 = v166[0].value;
              v169 = 2048;
              *(_QWORD *)v170 = v166[1].value;
              *(_WORD *)&v170[8] = 2048;
              v171 = v166[2].value;
              v172 = 2048;
              v173 = v166[3].value;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          ThatDiscards = EditMentorNewWithChildEditMentorAndSingleEditSegment(*(_QWORD **)(a2 + 192), (uint64_t)v166, (_QWORD *)(a2 + 184));
          v122 = CFStringCreateWithFormat(v71, 0, CFSTR("TRIM (%c%c%c%c)"), HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
          EditMentorSetDebugName(*(_QWORD **)(a2 + 184), v122);
          if (v122)
            CFRelease(v122);
          *(_QWORD *)(a2 + 192) = *(_QWORD *)(a2 + 184);
          goto LABEL_233;
        }
LABEL_217:
        ThatDiscards = 0;
LABEL_233:
        if (*((_DWORD *)v55 + 788))
        {
          LODWORD(v167.value) = 0;
          LOBYTE(v150.value) = 0;
          v123 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v124 = v167.value;
          if (os_log_type_enabled(v123, v150.value))
            v125 = v124;
          else
            v125 = v124 & 0xFFFFFFFE;
          if (v125)
          {
            v126 = *(_DWORD *)(a2 + 24);
            v127 = *(_DWORD *)(a2 + 72);
            v128 = HIBYTE(v127);
            v129 = BYTE2(v127);
            v130 = BYTE1(v127);
            v131 = v127;
            if (*(_BYTE *)(a2 + 89))
              v132 = "enableForStepping";
            else
              v132 = "disableForStepping";
            v133 = *(_QWORD *)(a2 + 192);
            v134 = *(_QWORD *)(a2 + 176);
            v135 = *(_QWORD *)(a2 + 152);
            v136 = *(_QWORD *)(a2 + 128);
            v137 = *(_QWORD *)(a2 + 136);
            v138 = *(_QWORD *)(a2 + 104);
            v139 = *(_QWORD *)(a2 + 112);
            v140 = "audioMentor";
            if (!v138)
            {
              v140 = "videoMentor";
              v138 = *(_QWORD *)(a2 + 120);
            }
            *(_DWORD *)time = 136319234;
            *(_QWORD *)&time[4] = "bossBuildMentorForTrack";
            *(_WORD *)&time[12] = 2048;
            *(_QWORD *)&time[14] = a1;
            *(_WORD *)&time[22] = 2082;
            *(_QWORD *)&time[24] = a1 + 841;
            *(_WORD *)&time[32] = 1024;
            *(_DWORD *)&time[34] = v126;
            *(_WORD *)&time[38] = 1024;
            *(_DWORD *)&time[40] = v128;
            *(_WORD *)&time[44] = 1024;
            *(_DWORD *)&time[46] = v129;
            *(_WORD *)&time[50] = 1024;
            *(_DWORD *)&time[52] = v130;
            *(_WORD *)&time[56] = 1024;
            *(_DWORD *)&time[58] = v131;
            *(_WORD *)&time[62] = 2082;
            *(_QWORD *)v155 = v132;
            *(_WORD *)&v155[8] = 2048;
            *(_QWORD *)&v155[10] = v133;
            *(_WORD *)&v155[18] = 2048;
            *(_QWORD *)&v155[20] = v134;
            *(_WORD *)&v155[28] = 2048;
            *(_QWORD *)&v155[30] = v135;
            v156 = 2048;
            v157 = v137;
            v158 = 2048;
            v159 = v136;
            v160 = 2048;
            v161 = v139;
            v162 = 2082;
            v163 = v140;
            v164 = 2048;
            v165 = v138;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return ThatDiscards;
      }
    }
    return v112;
  }
  return ThatDiscards;
}

uint64_t bossAddNotificationListenersForTrack(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  CMNotificationCenterGetDefaultLocalCenter();
  result = FigNotificationCenterAddWeakListeners();
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a2 + 397) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterAddWeakListeners();
    if (!(_DWORD)result)
      *(_BYTE *)(a2 + 398) = 1;
  }
  return result;
}

uint64_t bossSetExpectScaledEdits(const __CFArray *a1, char *a2, char *a3)
{
  uint64_t result;
  uint64_t v5;
  CFIndex v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t FigBaseObject;
  void (*v14)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v18;
  unsigned int (*v19)(CFTypeRef, CMTimeRange *, CFTypeRef *);
  CFTypeRef v20;
  unsigned int (*v21)(CFTypeRef, CMTimeRange *);
  CFTypeRef v22;
  unsigned int (*v23)(CFTypeRef, uint64_t);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, const __CFString *, uint64_t);
  uint64_t v26;
  uint64_t v29;
  uint64_t v30;
  CMTime v31;
  CMTimeRange duration;
  CMTimeRange start;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  CMTimeRange v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40[2];

  result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *MEMORY[0x1E0C9AE00];
    v30 = *MEMORY[0x1E0C9AE50];
    v29 = *MEMORY[0x1E0C9AE40];
    v10 = MEMORY[0x1E0CA2E28];
    while (1)
    {
      result = (uint64_t)CFArrayGetValueAtIndex(a1, v6);
      if (*(_DWORD *)(result + 72) == 1936684398)
        break;
LABEL_37:
      if (++v6 == v5)
        goto LABEL_41;
    }
    v11 = result;
    v12 = *(_QWORD *)(result + 32);
    v39 = 0;
    v40[0] = 0;
    v38 = 0;
    FigBaseObject = FigTrackReaderGetFigBaseObject(v12);
    v14 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (!v14)
      goto LABEL_7;
    v14(FigBaseObject, CFSTR("SecondaryEditCursorService"), v9, v40);
    v15 = (uint64_t)v40[0];
    if (!v40[0]
      || (*(_OWORD *)&start.start.value = *(_OWORD *)v10,
          start.start.epoch = *(_QWORD *)(v10 + 16),
          *(_OWORD *)&duration.start.value = *MEMORY[0x1E0CA2E30],
          duration.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16),
          CMTimeRangeMake(&v37, &start.start, &duration.start),
          LODWORD(v15) = figPlaybackBoss_editCursorServiceContainsScaledEditsInTimeRange(v15, (uint64_t)&v37),
          !(_DWORD)v15))
    {
LABEL_7:
      v16 = FigTrackReaderGetFigBaseObject(v12);
      v17 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (!v17)
      {
LABEL_21:
        LODWORD(v15) = 0;
        goto LABEL_23;
      }
      v17(v16, CFSTR("EditCursorService"), v9, &v39);
      v15 = (uint64_t)v39;
      if (v39)
      {
        v18 = v40[0];
        if (!v40[0])
        {
          *(_OWORD *)&duration.start.value = *(_OWORD *)v10;
          duration.start.epoch = *(_QWORD *)(v10 + 16);
          v31 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
          CMTimeRangeMake(&start, &duration.start, &v31);
          LODWORD(v15) = figPlaybackBoss_editCursorServiceContainsScaledEditsInTimeRange(v15, (uint64_t)&start);
          goto LABEL_23;
        }
        v19 = *(unsigned int (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 8);
        if (v19)
        {
          *(_OWORD *)&start.start.value = *(_OWORD *)v10;
          start.start.epoch = *(_QWORD *)(v10 + 16);
          if (!v19(v18, &start, &v38))
          {
            while (1)
            {
              v35 = 0u;
              v36 = 0u;
              v34 = 0u;
              memset(&start, 0, sizeof(start));
              v20 = v38;
              v21 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
              if (!v21 || v21(v20, &start))
                break;
              if ((start.start.flags & 1) != 0
                && (start.duration.flags & 1) != 0
                && !start.duration.epoch
                && (start.duration.value & 0x8000000000000000) == 0)
              {
                duration = start;
                if (figPlaybackBoss_editCursorServiceContainsScaledEditsInTimeRange((uint64_t)v39, (uint64_t)&duration))
                {
                  LODWORD(v15) = 1;
                  goto LABEL_23;
                }
              }
              v22 = v38;
              v23 = *(unsigned int (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (!v23 || v23(v22, 1))
                goto LABEL_21;
            }
          }
        }
        goto LABEL_21;
      }
    }
LABEL_23:
    if (v40[0])
      CFRelease(v40[0]);
    if (v39)
      CFRelease(v39);
    if (v38)
      CFRelease(v38);
    v24 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v11 + 80));
    result = CMBaseObjectGetVTable();
    v25 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
    if (v25)
    {
      if ((_DWORD)v15)
        v26 = v30;
      else
        v26 = v29;
      result = v25(v24, CFSTR("ExpectScaledEdits"), v26);
    }
    if ((_DWORD)v15)
      v7 = 1;
    v8 = 1;
    goto LABEL_37;
  }
  v8 = 0;
  v7 = 0;
LABEL_41:
  if (a2)
    *a2 = v8;
  if (a3)
    *a3 = v7;
  return result;
}

uint64_t FigPlaybackBossRemoveAndAddTracks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFIndex a5, uint64_t a6, uint64_t a7, const __CFArray *a8)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v15;
  const void *v16;
  CFTypeID v17;
  CFTypeRef *v18;
  CFTypeID v19;
  CFMutableArrayRef Mutable;
  __CFArray *v21;
  uint64_t v22;
  char *Instance;
  char *v24;
  uint64_t v25;
  const __CFArray *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, char *, char *);
  uint64_t v30;
  CFTypeRef v31;
  uint64_t FigBaseObject;
  unsigned int (*v33)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  uint64_t started;
  CFNumberRef v35;
  __CFArray *v36;
  uint64_t v37;
  CFIndex v38;
  _QWORD *ValueAtIndex;
  uint64_t v40;
  const __CFDictionary *v41;
  uint64_t v42;
  void (*v43)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, const __CFString *, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  CFIndex v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  NSObject *v57;
  unsigned int (*v58)(uint64_t);
  NSObject *v59;
  int v60;
  CFIndex v61;
  uint64_t v62;
  CFIndex v63;
  uint64_t v64;
  CFIndex v65;
  CFIndex v66;
  char v67;
  BOOL v68;
  int v69;
  int v70;
  uint64_t v71;
  NSObject *v72;
  int v73;
  const void *v74;
  int32_t timescale;
  uint64_t v77;
  __CFArray *v78;
  CFNumberRef v79;
  CFArrayRef otherArray;
  const __CFArray *otherArraya;
  int v83;
  CFIndex v85;
  const __CFAllocator *allocator;
  CMTime rhs;
  CMTime type;
  CMTime v89;
  CMTime v90;
  __int16 v91;
  CMTime v92;
  CMTime v93;
  uint64_t v94;
  CFRange v95;

  v94 = *MEMORY[0x1E0C80C00];
  v91 = 0;
  memset(&v90, 0, sizeof(v90));
  if (dword_1EE2A2C50)
  {
    LODWORD(v89.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1)
    return FigSignalErrorAt();
  if (!(a5 | a2))
  {
    started = 0;
    goto LABEL_139;
  }
  if ((a5 | a2) < 0 || a2 && (!a3 || !a4))
    goto LABEL_138;
  v85 = a5;
  if (!a5)
  {
    v79 = 0;
    v21 = 0;
    goto LABEL_57;
  }
  if (!a6 || !a7)
    goto LABEL_138;
  otherArray = a8;
  v15 = 0;
  do
  {
    v16 = *(const void **)(a7 + 8 * v15);
    if (!v16)
      goto LABEL_138;
    v17 = CFGetTypeID(v16);
    if (v17 != FigRenderPipelineGetTypeID())
      goto LABEL_138;
    ++v15;
  }
  while (a5 != v15);
  if (otherArray)
  {
    v18 = (CFTypeRef *)otherArray;
    do
    {
      if (*v18)
      {
        v19 = CFGetTypeID(*v18);
        if (v19 != CFDictionaryGetTypeID())
          goto LABEL_138;
      }
      ++v18;
    }
    while (--a5);
  }
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_138:
    started = FigSignalErrorAt();
LABEL_139:
    *(_BYTE *)(a1 + 140) = 1;
    return started;
  }
  v21 = Mutable;
  v22 = 0;
  v77 = *MEMORY[0x1E0C9AE50];
  do
  {
    v93.value = 0;
    if (FigPlaybackBossTrackGetTypeID_oneTimeOnly != -1)
      dispatch_once_f(&FigPlaybackBossTrackGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figPlaybackBossTrackClassInitialize);
    Instance = (char *)_CFRuntimeCreateInstance();
    if (!Instance
      || (v24 = Instance,
          CFArrayAppendValue(v21, Instance),
          CFRelease(v24),
          v25 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
          (*((_QWORD *)v24 + 2) = v25) == 0))
    {
      v37 = FigSignalErrorAt();
LABEL_141:
      started = v37;
      goto LABEL_40;
    }
    v26 = v21;
    v27 = *(unsigned int *)(a6 + 4 * v22);
    *((_DWORD *)v24 + 6) = v27;
    v28 = *(_QWORD *)(a1 + 40);
    v29 = *(uint64_t (**)(uint64_t, uint64_t, char *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v29)
    {
      started = 4294954514;
LABEL_39:
      v21 = v26;
LABEL_40:
      v35 = 0;
      v36 = 0;
      goto LABEL_131;
    }
    v30 = v29(v28, v27, v24 + 32, v24 + 72);
    if ((_DWORD)v30)
    {
      started = v30;
      goto LABEL_39;
    }
    v31 = *(CFTypeRef *)(a7 + 8 * v22);
    v21 = v26;
    if (v31)
      v31 = CFRetain(v31);
    *((_QWORD *)v24 + 10) = v31;
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v31);
    v33 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v33 && !v33(FigBaseObject, CFSTR("NeedsToFlushWhenRateChanges"), allocator, &v93) && v93.value == v77)
      v24[88] = 1;
    v24[89] = 1;
    ++v22;
  }
  while (v85 != v22);
  v37 = bossSetCursorServiceInTrackList(v26, (uint64_t)otherArray);
  if ((_DWORD)v37)
    goto LABEL_141;
  v79 = CFNumberCreate(allocator, kCFNumberFloat32Type, (const void *)(a1 + 436));
  v38 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v21, v38);
    v40 = (uint64_t)ValueAtIndex;
    if (otherArray)
      v41 = (const __CFDictionary *)*((_QWORD *)otherArray + v38);
    else
      v41 = 0;
    if (*((_DWORD *)ValueAtIndex + 18) == 1936684398)
    {
      v42 = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
      v43 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v43)
        v43(v42, CFSTR("PipelineRate"), v79);
    }
    v44 = *(_QWORD *)(a1 + 112);
    v45 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v40 + 80));
    v46 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v46)
      v46(v45, CFSTR("Timebase"), v44);
    v47 = *(_QWORD *)(v40 + 80);
    v48 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v48)
      v48(v47);
    v49 = bossBuildMentorForTrack(a1, v40, allocator, v41);
    if ((_DWORD)v49)
    {
      started = v49;
      v36 = 0;
      v21 = v26;
      goto LABEL_123;
    }
    *(_DWORD *)(v40 + 208) = 1000 * FigAtomicIncrement32();
    v50 = bossAddNotificationListenersForTrack(a1, v40);
    v21 = v26;
    if ((_DWORD)v50)
    {
      started = v50;
      v36 = 0;
      goto LABEL_123;
    }
    ++v38;
  }
  while (v85 != v38);
  bossSetExpectScaledEdits(v26, (char *)&v91 + 1, (char *)&v91);
  a5 = v85;
LABEL_57:
  if (a2)
    v36 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  else
    v36 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    LODWORD(v89.value) = 0;
    LOBYTE(type.value) = 0;
    v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  otherArraya = v21;
  if (a2 >= 1)
  {
    v83 = 0;
    v52 = 0;
    v78 = v36;
    while (*(uint64_t *)(a1 + 80) < 1)
    {
LABEL_69:
      LODWORD(v89.value) = 0;
      LOBYTE(type.value) = 0;
      v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_87:
      if (++v52 == a2)
        goto LABEL_90;
    }
    v53 = 0;
    while (1)
    {
      v54 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v53);
      if (v54[6] == *(_DWORD *)(a3 + 4 * v52))
      {
        v55 = v54;
        v56 = *((_QWORD *)v54 + 10);
        if (v56 == *(_QWORD *)(a4 + 8 * v52))
          break;
      }
      if (++v53 >= *(_QWORD *)(a1 + 80))
        goto LABEL_69;
    }
    if (*(_QWORD *)(a1 + 96) == v53)
    {
      v58 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (!v58 || v58(v56))
      {
        LODWORD(v89.value) = 0;
        LOBYTE(type.value) = 0;
        v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a5 = v85;
        v36 = v78;
      }
    }
    CFArrayAppendValue(v36, v55);
    v60 = v83;
    if (v55[18] == 1936684398)
      v60 = 1;
    v83 = v60;
    v61 = *(_QWORD *)(a1 + 96);
    if (v61 == v53)
    {
      v62 = -1;
      goto LABEL_80;
    }
    if (v61 > v53)
    {
      v62 = v61 - 1;
LABEL_80:
      *(_QWORD *)(a1 + 96) = v62;
    }
    v63 = *(_QWORD *)(a1 + 88);
    if (v63 == v53)
    {
      v64 = -2;
      goto LABEL_85;
    }
    if (v63 > v53)
    {
      v64 = v63 - 1;
LABEL_85:
      *(_QWORD *)(a1 + 88) = v64;
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 72), v53);
    --*(_QWORD *)(a1 + 80);
    goto LABEL_87;
  }
  LOBYTE(v83) = 0;
LABEL_90:
  v65 = *(_QWORD *)(a1 + 80);
  v21 = otherArraya;
  v95.location = 0;
  v95.length = a5;
  CFArrayAppendArray(*(CFMutableArrayRef *)(a1 + 72), otherArraya, v95);
  *(_QWORD *)(a1 + 80) += a5;
  bossApplyThrottleForBackground(a1);
  if (*(uint64_t *)(a1 + 80) < 1)
  {
LABEL_94:
    v67 = 0;
  }
  else
  {
    v66 = 0;
    while (!*((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v66) + 88))
    {
      if (*(_QWORD *)(a1 + 80) <= ++v66)
        goto LABEL_94;
    }
    v67 = 1;
  }
  *(_BYTE *)(a1 + 107) = v67;
  if (HIBYTE(v91))
    v68 = v91 == 0;
  else
    v68 = 1;
  if (v68)
  {
    if ((_BYTE)v83)
      bossSetExpectScaledEdits(*(const __CFArray **)(a1 + 72), (char *)(a1 + 104), (char *)(a1 + 105));
  }
  else
  {
    *(_WORD *)(a1 + 104) = 257;
  }
  bossElectNewTimebaseStarter(a1);
  bossElectNewPreferredClock(a1);
  started = 0;
  v69 = *(_DWORD *)(a1 + 424);
  if (v69 <= 1886530415)
  {
    if (v69 <= 1886151032)
    {
      if (v69 == 1768189029)
        goto LABEL_121;
      v35 = v79;
      if (v69 != 1885435251)
        goto LABEL_130;
LABEL_120:
      FigPlaybackBossGetTime(a1, &v90);
      v93 = v90;
      v71 = bossSetMentorModesToScrub(a1, v65, a5, &v93, 0, 0);
    }
    else
    {
      v35 = v79;
      if (v69 != 1886151033)
      {
        if (v69 == 1886154860)
        {
          bossSwitchMentorsToSideQueues(a1, v65);
        }
        else if (v69 != 1886155888)
        {
          goto LABEL_130;
        }
      }
      memset(&v93, 0, sizeof(v93));
      CMTimebaseGetTime(&v93, *(CMTimebaseRef *)(a1 + 112));
      memset(&v92, 0, sizeof(v92));
      if (v93.timescale <= 1000)
        timescale = 1000;
      else
        timescale = v93.timescale;
      CMTimeMakeWithSeconds(&v92, *(float *)(a1 + 432) * 0.1, timescale);
      type = v93;
      rhs = v92;
      CMTimeAdd(&v89, &type, &rhs);
      v93 = v89;
      bossBroadcastPrerollRateToRenderPipelines(a1, v65, *(float *)(a1 + 432));
      v89 = v93;
      v71 = bossSetMentorModesForTimeAndRate(a1, v65, a5, &v89, *(_QWORD *)(a1 + 432), *(_DWORD *)(a1 + 440), 2, 0);
    }
    started = v71;
    goto LABEL_130;
  }
  if (v69 <= 1919247480)
  {
    if (v69 != 1886530416)
    {
      if (v69 != 1886544244)
      {
        v70 = 1886545266;
        goto LABEL_116;
      }
LABEL_121:
      LODWORD(v89.value) = 0;
      LOBYTE(type.value) = 0;
      v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
      v21 = otherArraya;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      started = 0;
      v35 = v79;
      goto LABEL_130;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    v73 = *(_DWORD *)(a1 + 424);
    v74 = *(const void **)(a1 + 416);
    v93 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    started = figPlaybackBossStartPrerollAndSetPlayState(a1, &v93, *(_QWORD *)(a1 + 432), *(_DWORD *)(a1 + 440), 3, v73, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v74);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
LABEL_123:
    v35 = v79;
    goto LABEL_131;
  }
  if (v69 == 2003853684 || v69 == 1920298606)
    goto LABEL_121;
  v70 = 1919247481;
LABEL_116:
  v35 = v79;
  if (v69 == v70)
  {
    *(_DWORD *)(a1 + 424) = 1885435251;
    goto LABEL_120;
  }
LABEL_130:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
LABEL_131:
  *(_BYTE *)(a1 + 140) = 1;
  if (v21)
    CFRelease(v21);
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  return started;
}

uint64_t bossApplyThrottleForBackground(uint64_t result)
{
  uint64_t v1;
  CFIndex v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *ValueAtIndex;
  uint64_t v6;
  int v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, uint64_t);
  uint64_t v10;
  uint64_t v11;

  if (*(uint64_t *)(result + 80) >= 1)
  {
    v1 = result;
    v2 = 0;
    v3 = *MEMORY[0x1E0C9AE50];
    v4 = *MEMORY[0x1E0C9AE40];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 72), v2);
      v6 = ValueAtIndex[10];
      if (v6)
      {
        v7 = *(unsigned __int8 *)(v1 + 127);
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        v9 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v9)
        {
          if (v7)
            v10 = v3;
          else
            v10 = v4;
          v9(FigBaseObject, CFSTR("ThrottleForBackground"), v10);
        }
      }
      v11 = ValueAtIndex[15];
      if (v11)
        VideoMentorSetThrottleForBackground(v11, *(unsigned __int8 *)(v1 + 127));
      result = ValueAtIndex[13];
      if (result)
        result = AudioMentorSetThrottleForBackground(result, *(unsigned __int8 *)(v1 + 127));
      ++v2;
    }
    while (*(_QWORD *)(v1 + 80) > v2);
  }
  return result;
}

void bossBroadcastPrerollRateToRenderPipelines(uint64_t a1, uint64_t a2, float a3)
{
  CFNumberRef v5;
  CFIndex v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, CFNumberRef);
  float valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  if (a2 < FigCFRangeGetLimit())
  {
    v6 = a2;
    do
    {
      v7 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6) + 10);
      if (v7)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
        v9 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
        if (v9)
          v9(FigBaseObject, CFSTR("PrerollRate"), v5);
      }
      ++v6;
    }
    while (v6 < FigCFRangeGetLimit());
  }
  CFRelease(v5);
}

uint64_t FigPlaybackBossSetTrackList(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4, uint64_t a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  size_t v11;
  _DWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  const __CFArray *v16;
  const __CFArray *v17;
  BOOL v18;
  uint64_t v22;
  CFIndex v23;
  _DWORD *ValueAtIndex;
  int v25;
  int *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  CFIndex v30;
  uint64_t v31;
  _DWORD *v32;
  CFIndex v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)(a1 + 80) <= a2)
    v11 = a2;
  else
    v11 = *(_QWORD *)(a1 + 80);
  v12 = malloc_type_calloc(v11, 4uLL, 0x100004052888210uLL);
  v13 = malloc_type_calloc(v11, 8uLL, 0x2004093837F09uLL);
  v14 = malloc_type_calloc(v11, 4uLL, 0x100004052888210uLL);
  v15 = malloc_type_calloc(v11, 8uLL, 0x2004093837F09uLL);
  v16 = (const __CFArray *)malloc_type_calloc(v11, 8uLL, 0x6004044C4A2DFuLL);
  v17 = v16;
  if (v12)
    v18 = v13 == 0;
  else
    v18 = 1;
  v42 = v14;
  if (v18 || v14 == 0 || v15 == 0 || v16 == 0)
  {
    v38 = FigSignalErrorAt();
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    v37 = v14;
  }
  else
  {
    if (*(uint64_t *)(a1 + 80) < 1)
    {
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v23);
        v25 = ValueAtIndex[6];
        if (a2 < 1)
        {
LABEL_28:
          v12[v22] = v25;
          v13[v22++] = *((_QWORD *)ValueAtIndex + 10);
        }
        else
        {
          v26 = a3;
          v27 = a4;
          v28 = a2;
          while (1)
          {
            v29 = *v26++;
            if (v25 == v29 && *((_QWORD *)ValueAtIndex + 10) == *v27)
              break;
            ++v27;
            if (!--v28)
              goto LABEL_28;
          }
        }
        ++v23;
      }
      while (v23 < *(_QWORD *)(a1 + 80));
    }
    v40 = (uint64_t)v13;
    v41 = (uint64_t)v12;
    if (a2 < 1)
    {
      v30 = 0;
      v32 = v42;
    }
    else
    {
      v30 = 0;
      v31 = 0;
      v32 = v42;
      do
      {
        if (*(uint64_t *)(a1 + 80) <= 0)
        {
          v35 = a3[v31];
LABEL_41:
          v32[v30] = v35;
          *((_QWORD *)v17 + v30) = *(_QWORD *)(a5 + 8 * v31);
          v15[v30++] = a4[v31];
        }
        else
        {
          v33 = 0;
          while (1)
          {
            v34 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v33);
            v35 = a3[v31];
            if (v34[6] == v35 && *((_QWORD *)v34 + 10) == a4[v31])
              break;
            if (++v33 >= *(_QWORD *)(a1 + 80))
            {
              v32 = v42;
              goto LABEL_41;
            }
          }
          v32 = v42;
        }
        ++v31;
      }
      while (v31 != a2);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    v36 = a1;
    v37 = v32;
    v13 = (_QWORD *)v40;
    v12 = (_DWORD *)v41;
    v38 = FigPlaybackBossRemoveAndAddTracks(v36, v22, v41, v40, v30, (uint64_t)v37, (uint64_t)v15, v17);
  }
  free(v12);
  free(v13);
  free(v37);
  free(v15);
  free(v17);
  return v38;
}

void figPlaybackBossPrerollCompleted(uint64_t a1, int a2)
{
  int v4;
  void *v5;
  CFDictionaryRef v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  int v12;
  int v13;
  NSObject *v14;
  float v15;
  float v16;
  NSObject *v17;
  int v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueCMClock *v20;
  OpaqueCMTimebase *v21;
  NSObject *v22;
  int v23;
  OpaqueCMClock *HostTimeClock;
  uint64_t v25;
  int v26;
  const void *v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  CMTime lhs;
  CMTime v32;
  os_log_type_t type;
  unsigned int v34;
  void *values;
  CMTime v36;
  uint64_t v37;
  CMTime rhs;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  values = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    return;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  v4 = FigCFEqual();
  if (v4)
  {
    v5 = *(void **)(a1 + 496);
    values = v5;
    *(_QWORD *)(a1 + 496) = 0;
  }
  else
  {
    v5 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  if (!a2 && v4)
  {
    v6 = v5
       ? CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackBossParameter_PrerollToken, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]): 0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v6)
      CFRelease(v6);
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  v7 = FigCFEqual();
  if (a2 || v7)
  {
    v11 = 0;
    v12 = *(_DWORD *)(a1 + 424);
    if (v12 <= 1886155887)
    {
      if (v12 <= 1885435250)
      {
        if (v12 == 1634624887)
        {
          v10 = 0;
          if (a2 == 2)
            v18 = 1885435251;
          else
            v18 = 1919247481;
LABEL_49:
          *(_DWORD *)(a1 + 424) = v18;
          goto LABEL_50;
        }
        if (v12 != 1684365668)
        {
          v13 = 1768189029;
          goto LABEL_40;
        }
LABEL_41:
        v10 = 0;
LABEL_50:
        v11 = 1;
        goto LABEL_64;
      }
      if (v12 == 1885435251)
      {
LABEL_42:
        v10 = 0;
        if (!a2)
        {
LABEL_69:
          if (*MEMORY[0x1E0CA1FC0] == 1)
            kdebug_trace();
          v9 = *(_DWORD *)(a1 + 776);
          v8 = *(unsigned __int8 *)(a1 + 780);
          *(_DWORD *)(a1 + 776) = 0;
          *(_BYTE *)(a1 + 780) = 0;
          goto LABEL_72;
        }
        v18 = 1885435251;
        goto LABEL_49;
      }
      if (v12 == 1886151033)
        goto LABEL_41;
      v10 = 0;
      if (v12 != 1886154860)
        goto LABEL_64;
    }
    else
    {
      if (v12 > 1886545265)
      {
        if (v12 <= 1920298605)
        {
          if (v12 != 1886545266)
          {
            v10 = 0;
            if (v12 != 1919247481)
              goto LABEL_64;
            goto LABEL_42;
          }
          if (a2 == 2)
          {
            v10 = 0;
            *(_DWORD *)(a1 + 424) = 1885435251;
LABEL_67:
            ++*(_DWORD *)(a1 + 644);
            if ((*(_BYTE *)(a1 + 628) & 1) != 0)
            {
              HostTimeClock = CMClockGetHostTimeClock();
              CMClockGetTime(&lhs, HostTimeClock);
              rhs = *(CMTime *)(a1 + 616);
              CMTimeSubtract(&v32, &lhs, &rhs);
              *(double *)(a1 + 608) = *(double *)(a1 + 608) + fabs(CMTimeGetSeconds(&v32));
              v25 = MEMORY[0x1E0CA2E18];
              *(_OWORD *)(a1 + 616) = *MEMORY[0x1E0CA2E18];
              *(_QWORD *)(a1 + 632) = *(_QWORD *)(v25 + 16);
            }
            goto LABEL_69;
          }
          v11 = 0;
          v10 = 0;
          v23 = 1919247481;
LABEL_63:
          *(_DWORD *)(a1 + 424) = v23;
          goto LABEL_64;
        }
        if (v12 != 1920298606)
        {
          v13 = 2003853684;
LABEL_40:
          v10 = 0;
          if (v12 != v13)
            goto LABEL_64;
          goto LABEL_41;
        }
        goto LABEL_41;
      }
      if (v12 == 1886155888)
      {
        if (dword_1EE2A2C50)
        {
          v34 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v11 = 0;
        v10 = 0;
        v23 = 1886151033;
        goto LABEL_63;
      }
      if (v12 != 1886530416)
      {
        v10 = 0;
        if (v12 != 1886544244)
          goto LABEL_64;
        if (dword_1EE2A2C50)
        {
          v34 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v11 = 0;
        v10 = 0;
        v23 = 2003853684;
        goto LABEL_63;
      }
    }
    v15 = *(float *)(a1 + 432);
    v16 = *(float *)(a1 + 436);
    rhs = *(CMTime *)(a1 + 792);
    v36 = *(CMTime *)(a1 + 816);
    if (bossStartTimebaseAndAudioContext(a1, (__int128 *)&rhs.value, &v36, v15, v16))
    {
      *(_DWORD *)(a1 + 424) = 1885435251;
      v11 = dword_1EE2A2C50;
      if (dword_1EE2A2C50)
      {
        v34 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v11 = 0;
      }
      v10 = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 424) = 1886151033;
      ++*(_DWORD *)(a1 + 712);
      ++*(_DWORD *)(a1 + 720);
      v20 = CMClockGetHostTimeClock();
      CMClockGetTime(&rhs, v20);
      *(CMTime *)(a1 + 656) = rhs;
      v21 = *(OpaqueCMTimebase **)(a1 + 112);
      if (v21)
      {
        CMTimebaseGetTime(&rhs, v21);
        *(CMTime *)(a1 + 688) = rhs;
      }
      v11 = dword_1EE2A2C50;
      if (dword_1EE2A2C50)
      {
        v34 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v11 = 0;
      }
      v10 = 0;
    }
LABEL_64:
    if (a2 == 1)
      *(_DWORD *)(a1 + 424) = 1684365668;
    if ((v11 & 1) != 0)
      goto LABEL_69;
    goto LABEL_67;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
LABEL_72:
  v26 = *(unsigned __int8 *)(a1 + 560);
  if (*(_BYTE *)(a1 + 560))
  {
    v27 = *(const void **)(a1 + 568);
    *(_BYTE *)(a1 + 560) = 0;
    *(_QWORD *)(a1 + 568) = 0;
  }
  else
  {
    v27 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  if (v8 && v9)
    figPlaybackBossPostSeekDidComplete(a1, v9, 0);
  if (v10)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (v26)
  {
    if (dword_1EE2A2C50)
    {
      v34 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v29 = v34;
      if (os_log_type_enabled(v28, type))
        v30 = v29;
      else
        v30 = v29 & 0xFFFFFFFE;
      if (v30)
      {
        LODWORD(v36.value) = 136315650;
        *(CMTimeValue *)((char *)&v36.value + 4) = (CMTimeValue)"figPlaybackBossPrerollCompleted";
        LOWORD(v36.flags) = 2048;
        *(_QWORD *)((char *)&v36.flags + 2) = a1;
        HIWORD(v36.epoch) = 2082;
        v37 = a1 + 841;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v27)
      CFRelease(v27);
  }
  if (values)
    CFRelease(values);
}

void bossBumpCurrentMasterOrder(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 536);
  ++*(_DWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 536) = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(a1 + 544));
  *(_BYTE *)(a1 + 548) = 0;
  v3 = *(const void **)(a1 + 552);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 552) = 0;
  }
  *(_BYTE *)(a1 + 560) = 0;
  v4 = *(const void **)(a1 + 568);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 568) = 0;
  }
  if (v2)
    CFRelease(v2);
}

uint64_t bossRemoveVideoCompositionProcessorNotificationListenersForPrerollForBoss(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 781))
  {
    v1 = result;
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListeners();
    *(_BYTE *)(v1 + 781) = 0;
  }
  return result;
}

uint64_t bossRemoveVideoCompositionProcessorNotificationListenersForSeekForBoss(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 782))
  {
    v1 = result;
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListeners();
    *(_BYTE *)(v1 + 782) = 0;
  }
  return result;
}

uint64_t FigPlaybackBossSetVideoCompositionProcessor(uint64_t a1, const void *a2)
{
  const void *v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 468) && *(_QWORD *)(a1 + 592))
    bossRemoveVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
  if (*(_QWORD *)(a1 + 592))
  {
    bossRemoveVideoCompositionProcessorNotificationListenersForPrerollForBoss(a1);
    v4 = *(const void **)(a1 + 592);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 592) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  v5 = *(_QWORD *)(a1 + 592);
  if (*(_BYTE *)(a1 + 468))
  {
    if (!v5)
      return 0;
    bossAddVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
    v5 = *(_QWORD *)(a1 + 592);
  }
  if (v5)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    if (!FigNotificationCenterAddWeakListeners())
      *(_BYTE *)(a1 + 781) = 1;
  }
  return 0;
}

uint64_t bossAddVideoCompositionProcessorNotificationListenersForSeekForBoss(uint64_t a1)
{
  uint64_t result;

  CMNotificationCenterGetDefaultLocalCenter();
  result = FigNotificationCenterAddWeakListeners();
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 782) = 1;
  return result;
}

uint64_t FigPlaybackBossSetSeekingWaitsForVideoCompositionRendering(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 468) && *(_QWORD *)(a1 + 592))
    bossRemoveVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
  *(_BYTE *)(a1 + 468) = a2;
  if (a2 && *(_QWORD *)(a1 + 592))
    bossAddVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
  return 0;
}

uint64_t FigPlaybackBossCanChangeEndTimeTo(uint64_t a1, uint64_t a2)
{
  CMTime v5;
  CMTime time1;
  __n128 v7;
  CMTimeEpoch v8;

  if (!*(_BYTE *)(a1 + 122) && (!*(_BYTE *)(a1 + 123) || !*(_BYTE *)(a1 + 124)))
    return 0;
  v7 = 0uLL;
  v8 = 0;
  FigPlaybackBossGetDuration(a1, &v7);
  if ((*(_BYTE *)(a1 + 180) & 1) != 0)
  {
    time1 = *(CMTime *)(a1 + 168);
    *(__n128 *)&v5.value = v7;
    v5.epoch = v8;
    if (CMTimeCompare(&time1, &v5) < 0)
      return 0;
  }
  if ((*(_BYTE *)(a2 + 12) & 1) != 0
    && (time1 = *(CMTime *)a2, *(__n128 *)&v5.value = v7, v5.epoch = v8, CMTimeCompare(&time1, &v5) < 0))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

__n128 FigPlaybackBossGetEndTime@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 168);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(a1 + 184);
  return result;
}

__n128 FigPlaybackBossGetReverseEndTime@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[18];
  *a2 = result;
  a2[1].n128_u64[0] = a1[19].n128_u64[0];
  return result;
}

uint64_t FigPlaybackBossSetAdvanceTimeForOverlappedPlayback(uint64_t a1, __int128 *a2)
{
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v7;
  OpaqueCMTimebase *v8;
  float EffectiveRate;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 120))
    return FigSignalErrorAt();
  if ((*((_DWORD *)a2 + 3) & 0x1D) != 1)
  {
    v5 = MEMORY[0x1E0CA2E18];
    *a2 = *MEMORY[0x1E0CA2E18];
    *((_QWORD *)a2 + 2) = *(_QWORD *)(v5 + 16);
  }
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = *a2;
  *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 336) = v7;
  if (*(_DWORD *)(a1 + 424) == 1886151033)
  {
    v8 = *(OpaqueCMTimebase **)(a1 + 112);
    if (v8)
      EffectiveRate = CMTimebaseGetEffectiveRate(v8);
    else
      EffectiveRate = 1.0;
    bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(a1, EffectiveRate);
  }
  return 0;
}

uint64_t bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(uint64_t a1, float a2)
{
  CMTime *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  CMTime v8;
  CMTime time2;
  CMTime time1;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memset(&v8, 0, sizeof(v8));
  v3 = (CMTime *)(a1 + 336);
  if ((*(_BYTE *)(a1 + 348) & 1) == 0)
    goto LABEL_9;
  CMTimebaseGetTime(&v8, *(CMTimebaseRef *)(a1 + 112));
  if (a2 <= 0.0)
  {
    time1 = *v3;
    time2 = v8;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      if (!dword_1EE2A2C50)
        goto LABEL_10;
      goto LABEL_5;
    }
LABEL_9:
    time1 = *v3;
    return bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(a1, &time1);
  }
  time1 = *v3;
  time2 = v8;
  if (CMTimeCompare(&time1, &time2) > 0)
    goto LABEL_9;
  if (dword_1EE2A2C50)
  {
LABEL_5:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_10:
  time1 = *v3;
  bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(a1, &time1);
  v7 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 368) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(v7 + 16);
  return CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 360));
}

__n128 FigPlaybackBossGetAdvanceTimeForOverlappedPlayback@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[21];
  *a2 = result;
  a2[1].n128_u64[0] = a1[22].n128_u64[0];
  return result;
}

void bossGetContentDuration(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  _BOOL4 v7;
  CFDictionaryRef v8;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  BOOL v12;
  uint64_t v13;
  CFDictionaryRef dictionaryRepresentation;

  dictionaryRepresentation = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v4 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (*(_BYTE *)(a1 + 122)
    || (v10 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 40)),
        (v11 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) == 0)
    || (!v11(v10, CFSTR("EstimatedDuration"), *v4, &dictionaryRepresentation)
      ? (v12 = dictionaryRepresentation == 0)
      : (v12 = 1),
        v12))
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 40));
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (!v6)
    {
      v8 = dictionaryRepresentation;
      goto LABEL_17;
    }
    v7 = v6(FigBaseObject, CFSTR("Duration"), *v4, &dictionaryRepresentation) == 0;
  }
  else
  {
    v7 = 1;
  }
  v8 = dictionaryRepresentation;
  if (!v7 || dictionaryRepresentation == 0)
  {
LABEL_17:
    v13 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v13 + 16);
    if (!v8)
      return;
    goto LABEL_18;
  }
  CMTimeMakeFromDictionary((CMTime *)a2, dictionaryRepresentation);
  v8 = dictionaryRepresentation;
  if (dictionaryRepresentation)
LABEL_18:
    CFRelease(v8);
}

uint64_t FigPlaybackBossSetVolume(uint64_t a1, float a2)
{
  CFNumberRef v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  CFIndex v7;
  uint64_t v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, CFNumberRef);
  float valuePtr;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v3)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7) + 10);
      if (v8)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
        v10 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
        if (v10)
          v10(FigBaseObject, CFSTR("SoftwareVolume1"), v3);
      }
      ++v7;
    }
    while (*(_QWORD *)(a1 + 80) > v7);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  CFRelease(v3);
  return 0;
}

float FigPlaybackBossGetVolume(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeID v8;
  float valuePtr;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  valuePtr = 0.0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v3 = 0;
    v4 = *MEMORY[0x1E0C9AE00];
    do
    {
      v5 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v3) + 10);
      if (v5)
      {
        cf[0] = 0;
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v5);
        v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (v7)
          v7(FigBaseObject, CFSTR("SoftwareVolume1"), v4, cf);
        if (cf[0])
        {
          v8 = CFGetTypeID(cf[0]);
          if (v8 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)cf[0], kCFNumberFloatType, &valuePtr);
            CFRelease(cf[0]);
            break;
          }
          if (cf[0])
            CFRelease(cf[0]);
        }
      }
      ++v3;
    }
    while (*(_QWORD *)(a1 + 80) > v3);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return valuePtr;
}

uint64_t FigPlaybackBossSetMuted(uint64_t a1, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  CFIndex v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *ValueAtIndex;
  uint64_t v10;
  uint64_t FigBaseObject;
  void (*v12)(uint64_t, const __CFString *, uint64_t);

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v6 = 0;
    v7 = (uint64_t *)MEMORY[0x1E0C9AE50];
    if (!a2)
      v7 = (uint64_t *)MEMORY[0x1E0C9AE40];
    v8 = *v7;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
      if (*((_DWORD *)ValueAtIndex + 18) == 1936684398)
      {
        v10 = ValueAtIndex[10];
        if (v10)
        {
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v10);
          v12 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v12)
            v12(FigBaseObject, CFSTR("Muted"), v8);
        }
      }
      ++v6;
    }
    while (*(_QWORD *)(a1 + 80) > v6);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return 0;
}

uint64_t FigPlaybackBossGetMuted(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v3;
  uint64_t v4;
  _QWORD *ValueAtIndex;
  uint64_t v6;
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeID v9;
  uint64_t Value;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v3 = 0;
    v4 = *MEMORY[0x1E0C9AE00];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v3);
      if (*((_DWORD *)ValueAtIndex + 18) == 1936684398)
      {
        v6 = ValueAtIndex[10];
        if (v6)
        {
          cf[0] = 0;
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
          v8 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
          if (v8)
            v8(FigBaseObject, CFSTR("Muted"), v4, cf);
          if (cf[0])
          {
            v9 = CFGetTypeID(cf[0]);
            if (v9 == CFBooleanGetTypeID())
            {
              Value = CFBooleanGetValue((CFBooleanRef)cf[0]);
              CFRelease(cf[0]);
              goto LABEL_15;
            }
            if (cf[0])
              CFRelease(cf[0]);
          }
        }
      }
      ++v3;
    }
    while (*(_QWORD *)(a1 + 80) > v3);
  }
  Value = 0;
LABEL_15:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return Value;
}

uint64_t FigPlaybackBossSnapTimeToIFrameWithRange(uint64_t a1, OpaqueCMTimebase *a2, CMTime *a3, unsigned int a4, CMTime *a5, CMTime *a6, uint64_t a7)
{
  uint64_t v7;
  CMTime *v11;
  __int128 v12;
  CMTimeEpoch v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int32_t v16;
  int32_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  NSObject *v22;
  unsigned int value;
  unsigned int v24;
  Float64 Seconds;
  uint64_t TimeOfNextIFrameInDirection;
  NSObject *v27;
  int32_t v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  unsigned int v37;
  unsigned int v38;
  Float64 v39;
  NSObject *v40;
  uint64_t *v41;
  __int128 v42;
  int32_t v43;
  __int128 v44;
  int v45;
  int32_t v46;
  int v47;
  NSObject *v48;
  unsigned int v49;
  unsigned int v50;
  Float64 v51;
  Float64 v52;
  NSObject *v53;
  NSObject *v54;
  int v55;
  __int128 v56;
  NSObject *v57;
  int32_t v58;
  uint64_t *v59;
  NSObject *v60;
  NSObject *v61;
  CMTimeEpoch v62;
  NSObject *v63;
  int32_t v64;
  NSObject *v65;
  NSObject *v66;
  CMTimeEpoch epoch;
  __int128 v68;
  NSObject *v69;
  unsigned int v70;
  unsigned int v71;
  Float64 v72;
  Float64 v73;
  __int128 v78;
  CMTime v79;
  CMTime v80;
  os_log_type_t v81;
  unsigned int v82;
  __int16 v83;
  CMTime type;
  CMTime v85;
  CMTime time1;
  char v87;
  CMTime v88;
  CMTime time2;
  Float64 v90;
  _BYTE time[32];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v7 = a7;
  v11 = a3;
  v96 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v88.value = *MEMORY[0x1E0CA2E18];
  v12 = *(_OWORD *)&v88.value;
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v88.epoch = v13;
  v87 = 0;
  v78 = *(_OWORD *)&v88.value;
  if (dword_1EE2A2C50)
  {
    LODWORD(v85.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = a7;
    v11 = a3;
    v12 = *(_OWORD *)&v88.value;
  }
  if ((a5->flags & 0x1D) == 1)
  {
    *(_OWORD *)time = *(_OWORD *)&a5->value;
    *(_QWORD *)&time[16] = a5->epoch;
    time2 = *v11;
    v16 = CMTimeCompare((CMTime *)time, &time2);
    v12 = *(_OWORD *)&v88.value;
    if (v16 >= 1)
      return FigSignalErrorAt();
  }
  if ((a6->flags & 0x1D) == 1)
  {
    *(_OWORD *)time = *(_OWORD *)&v11->value;
    *(_QWORD *)&time[16] = v11->epoch;
    time2 = *a6;
    v17 = CMTimeCompare((CMTime *)time, &time2);
    v12 = *(_OWORD *)&v88.value;
    if (v17 >= 1)
      return FigSignalErrorAt();
  }
  v18 = 0;
  switch((char)a4)
  {
    case 0:
      time2 = *v11;
      LOBYTE(v85.value) = 0;
      LOBYTE(type.value) = 0;
      v19 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
      v92 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
      v93 = v19;
      v20 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
      v94 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
      v95 = v20;
      v21 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
      *(_OWORD *)time = *MEMORY[0x1E0CA2E20];
      *(_OWORD *)&time[16] = v21;
      if (!bossScanForEditSegmentContainingTrackTime(a1, (uint64_t)&time2, &v85, &type, (uint64_t)time, 0, 0, 0)&& (!LOBYTE(v85.value) || LOBYTE(type.value) && (time[12] & 0x1D) == 1))
      {
        if (dword_1EE2A2C50)
        {
          LODWORD(v85.value) = 0;
          LOBYTE(type.value) = 0;
          v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          value = v85.value;
          if (os_log_type_enabled(v22, type.value))
            v24 = value;
          else
            v24 = value & 0xFFFFFFFE;
          if (v24)
          {
            *(_OWORD *)time = *(_OWORD *)&a3->value;
            *(_QWORD *)&time[16] = a3->epoch;
            Seconds = CMTimeGetSeconds((CMTime *)time);
            LODWORD(time2.value) = 136315394;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSnapTimeToIFrameWithRange";
            LOWORD(time2.flags) = 2048;
            *(Float64 *)((char *)&time2.flags + 2) = Seconds;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        TimeOfNextIFrameInDirection = 0;
        goto LABEL_107;
      }
      if (!dword_1EE2A2C50)
        return 0;
      LODWORD(v85.value) = 0;
      LOBYTE(type.value) = 0;
      v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v37 = v85.value;
      if (os_log_type_enabled(v36, type.value))
        v38 = v37;
      else
        v38 = v37 & 0xFFFFFFFE;
      if (v38)
      {
        *(_OWORD *)time = *(_OWORD *)&a3->value;
        *(_QWORD *)&time[16] = a3->epoch;
        v39 = CMTimeGetSeconds((CMTime *)time);
        LODWORD(time2.value) = 136315394;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSnapTimeToIFrameWithRange";
        LOWORD(time2.flags) = 2048;
        *(Float64 *)((char *)&time2.flags + 2) = v39;
        _os_log_send_and_compose_impl();
      }
      goto LABEL_123;
    case 1:
      *(_OWORD *)time = *(_OWORD *)&v11->value;
      *(_QWORD *)&time[16] = v11->epoch;
      TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, -1, 0, (a4 >> 8) & 1, &v88, &v87, 0);
      if (v87)
      {
        if (!dword_1EE2A2C50)
          goto LABEL_107;
        goto LABEL_21;
      }
      if ((v88.flags & 1) == 0)
      {
        if (!dword_1EE2A2C50)
          return TimeOfNextIFrameInDirection;
        goto LABEL_62;
      }
      if ((a5->flags & 0x1D) != 1
        || (*(CMTime *)time = v88, time2 = *a5, (CMTimeCompare((CMTime *)time, &time2) & 0x80000000) == 0))
      {
        if (!dword_1EE2A2C50)
          goto LABEL_134;
        goto LABEL_109;
      }
      if (!dword_1EE2A2C50)
        goto LABEL_133;
      LODWORD(v85.value) = 0;
      LOBYTE(type.value) = 0;
      v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
      goto LABEL_132;
    case 2:
      *(_OWORD *)time = *(_OWORD *)&v11->value;
      *(_QWORD *)&time[16] = v11->epoch;
      TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, 1, 0, (a4 >> 8) & 1, &v88, &v87, 0);
      if (v87)
      {
        if (dword_1EE2A2C50)
        {
LABEL_21:
          LODWORD(v85.value) = 0;
          LOBYTE(type.value) = 0;
          v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
          goto LABEL_59;
        }
        goto LABEL_107;
      }
      if ((v88.flags & 1) == 0)
      {
        if (dword_1EE2A2C50)
        {
LABEL_62:
          LODWORD(v85.value) = 0;
          LOBYTE(type.value) = 0;
          v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
          goto LABEL_90;
        }
        return TimeOfNextIFrameInDirection;
      }
      if ((a6->flags & 0x1D) == 1)
      {
        *(CMTime *)time = v88;
        time2 = *a6;
        if (CMTimeCompare((CMTime *)time, &time2) >= 1)
        {
          if (!dword_1EE2A2C50)
            goto LABEL_133;
          LODWORD(v85.value) = 0;
          LOBYTE(type.value) = 0;
          v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
          goto LABEL_132;
        }
      }
      if (!dword_1EE2A2C50)
        goto LABEL_134;
LABEL_109:
      LODWORD(v85.value) = 0;
      LOBYTE(type.value) = 0;
      v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
      goto LABEL_110;
    case 3:
      if (!a2)
        goto LABEL_32;
      CMTimebaseGetTime(&time1, a2);
      *(_OWORD *)time = *(_OWORD *)&v11->value;
      *(_QWORD *)&time[16] = v11->epoch;
      v28 = CMTimeCompare(&time1, (CMTime *)time);
      if (v28 < 0)
        v29 = 1;
      else
        v29 = -1;
      *(_OWORD *)time = *(_OWORD *)&v11->value;
      *(_QWORD *)&time[16] = v11->epoch;
      TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, v29, 0, (a4 >> 8) & 1, &v88, &v87, 0);
      if (v87)
      {
        if (dword_1EE2A2C50)
        {
          LODWORD(v85.value) = 0;
          LOBYTE(type.value) = 0;
          v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
LABEL_59:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_107:
        v56 = *(_OWORD *)&a3->value;
        *(_QWORD *)(v7 + 16) = a3->epoch;
        *(_OWORD *)v7 = v56;
        return TimeOfNextIFrameInDirection;
      }
      if ((v88.flags & 1) == 0)
      {
        if (!dword_1EE2A2C50)
          return TimeOfNextIFrameInDirection;
        LODWORD(v85.value) = 0;
        LOBYTE(type.value) = 0;
        v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
LABEL_90:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return TimeOfNextIFrameInDirection;
      }
      if (v28 < 0)
      {
        if ((a6->flags & 0x1D) == 1)
        {
          *(CMTime *)time = v88;
          time2 = *a6;
          v64 = CMTimeCompare((CMTime *)time, &time2);
          v59 = &sFigCDSNodeProtocolID;
          if (v64 < 1)
            goto LABEL_128;
LABEL_126:
          v88 = *a3;
LABEL_128:
          if (*((_DWORD *)v59 + 788))
          {
            LODWORD(v85.value) = 0;
            LOBYTE(type.value) = 0;
            v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_OWORD *)v7 = *(_OWORD *)&v88.value;
          epoch = v88.epoch;
          goto LABEL_135;
        }
      }
      else if ((a5->flags & 0x1D) == 1)
      {
        *(CMTime *)time = v88;
        time2 = *a5;
        v58 = CMTimeCompare((CMTime *)time, &time2);
        v59 = &sFigCDSNodeProtocolID;
        if ((v58 & 0x80000000) == 0)
          goto LABEL_128;
        goto LABEL_126;
      }
      v59 = &sFigCDSNodeProtocolID;
      goto LABEL_128;
    case 4:
      goto LABEL_33;
    case 5:
      *(_OWORD *)time = *(_OWORD *)&v11->value;
      *(_QWORD *)&time[16] = v11->epoch;
      TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, -1, 1, (a4 >> 8) & 1, &v88, 0, 0);
      if ((v88.flags & 1) == 0)
      {
        if (!dword_1EE2A2C50)
          return TimeOfNextIFrameInDirection;
        goto LABEL_38;
      }
      if ((a5->flags & 0x1D) != 1
        || (*(CMTime *)time = v88, time2 = *a5, (CMTimeCompare((CMTime *)time, &time2) & 0x80000000) == 0))
      {
        if (!dword_1EE2A2C50)
          goto LABEL_134;
        goto LABEL_48;
      }
      if (!dword_1EE2A2C50)
        goto LABEL_133;
      LODWORD(v85.value) = 0;
      LOBYTE(type.value) = 0;
      v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
      goto LABEL_132;
    case 6:
      *(_OWORD *)time = *(_OWORD *)&v11->value;
      *(_QWORD *)&time[16] = v11->epoch;
      TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, 1, 1, (a4 >> 8) & 1, &v88, 0, 0);
      if ((v88.flags & 1) != 0)
      {
        if ((a6->flags & 0x1D) == 1 && (*(CMTime *)time = v88, time2 = *a6, CMTimeCompare((CMTime *)time, &time2) >= 1))
        {
          if (dword_1EE2A2C50)
          {
            LODWORD(v85.value) = 0;
            LOBYTE(type.value) = 0;
            v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
LABEL_132:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_133:
          v88 = *a3;
        }
        else if (dword_1EE2A2C50)
        {
LABEL_48:
          LODWORD(v85.value) = 0;
          LOBYTE(type.value) = 0;
          v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
LABEL_110:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_134:
        *(_OWORD *)v7 = *(_OWORD *)&v88.value;
        epoch = v88.epoch;
LABEL_135:
        *(_QWORD *)(v7 + 16) = epoch;
      }
      else if (dword_1EE2A2C50)
      {
LABEL_38:
        LODWORD(v85.value) = 0;
        LOBYTE(type.value) = 0;
        v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        goto LABEL_90;
      }
      return TimeOfNextIFrameInDirection;
    case 7:
LABEL_32:
      v18 = 2;
LABEL_33:
      *(_OWORD *)&v85.value = v12;
      v85.epoch = v13;
      *(_OWORD *)&type.value = v12;
      type.epoch = v13;
      v83 = 0;
      *(_OWORD *)time = *(_OWORD *)&v11->value;
      *(_QWORD *)&time[16] = v11->epoch;
      bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, -1, v18, (a4 >> 8) & 1, &v85, &v87, (BOOL *)&v83 + 1);
      if (v87)
      {
        if (dword_1EE2A2C50)
        {
          v82 = 0;
          v81 = OS_LOG_TYPE_DEFAULT;
          v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
LABEL_119:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_120;
        }
        goto LABEL_120;
      }
      *(_OWORD *)time = *(_OWORD *)&v11->value;
      *(_QWORD *)&time[16] = v11->epoch;
      bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, 1, v18, (a4 >> 8) & 1, &type, &v87, (BOOL *)&v83);
      if (v87)
      {
        if (dword_1EE2A2C50)
        {
LABEL_44:
          v82 = 0;
          v81 = OS_LOG_TYPE_DEFAULT;
          v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
LABEL_143:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_144:
        *(_OWORD *)v7 = *(_OWORD *)&type.value;
        v62 = type.epoch;
        goto LABEL_145;
      }
      if ((a5->flags & 0x1D) == 1
        && (v85.flags & 0x1D) == 1
        && (*(CMTime *)time = v85, time2 = *a5, CMTimeCompare((CMTime *)time, &time2) < 0))
      {
        v68 = *(_OWORD *)&v11->value;
        *(_QWORD *)(v7 + 16) = v11->epoch;
        *(_OWORD *)v7 = v68;
        v42 = v78;
        *(_OWORD *)&v85.value = v78;
        v85.epoch = v13;
        v41 = &sFigCDSNodeProtocolID;
      }
      else
      {
        v41 = &sFigCDSNodeProtocolID;
        v42 = v78;
      }
      if ((a6->flags & 0x1D) == 1 && (type.flags & 0x1D) == 1)
      {
        *(CMTime *)time = type;
        time2 = *a6;
        v43 = CMTimeCompare((CMTime *)time, &time2);
        v42 = v78;
        if (v43 >= 1)
        {
          v44 = *(_OWORD *)&v11->value;
          *(_QWORD *)(v7 + 16) = v11->epoch;
          *(_OWORD *)v7 = v44;
          *(_OWORD *)&type.value = v78;
          type.epoch = v13;
        }
      }
      if (HIBYTE(v83) | v83)
      {
        if (!HIBYTE(v83))
        {
          *(_OWORD *)&v85.value = v42;
          v85.epoch = v13;
        }
        if (!(_BYTE)v83)
        {
          *(_OWORD *)&type.value = v42;
          type.epoch = v13;
        }
      }
      v45 = type.flags & 0x1D;
      if ((v85.flags & 0x1D) == 1)
      {
        if (v45 != 1)
        {
          if (*((_DWORD *)v41 + 788))
          {
            v82 = 0;
            v81 = OS_LOG_TYPE_DEFAULT;
            v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
            goto LABEL_119;
          }
LABEL_120:
          *(_OWORD *)v7 = *(_OWORD *)&v85.value;
          v62 = v85.epoch;
LABEL_145:
          *(_QWORD *)(v7 + 16) = v62;
          return 0;
        }
        *(CMTime *)time = type;
        time2 = *v11;
        CMTimeSubtract(&v80, (CMTime *)time, &time2);
        *(_OWORD *)time = *(_OWORD *)&v11->value;
        *(_QWORD *)&time[16] = v11->epoch;
        time2 = v85;
        CMTimeSubtract(&v79, (CMTime *)time, &time2);
        v46 = CMTimeCompare(&v80, &v79);
        v47 = *((_DWORD *)v41 + 788);
        if ((v46 & 0x80000000) == 0)
        {
          if (v47)
          {
            v82 = 0;
            v81 = OS_LOG_TYPE_DEFAULT;
            v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v49 = v82;
            if (os_log_type_enabled(v48, v81))
              v50 = v49;
            else
              v50 = v49 & 0xFFFFFFFE;
            if (v50)
            {
              *(_OWORD *)time = *(_OWORD *)&a3->value;
              *(_QWORD *)&time[16] = a3->epoch;
              v51 = CMTimeGetSeconds((CMTime *)time);
              *(CMTime *)time = v85;
              v52 = CMTimeGetSeconds((CMTime *)time);
              LODWORD(time2.value) = 136315650;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSnapTimeToIFrameWithRange";
              LOWORD(time2.flags) = 2048;
              *(Float64 *)((char *)&time2.flags + 2) = v51;
              HIWORD(time2.epoch) = 2048;
              v90 = v52;
              _os_log_send_and_compose_impl();
            }
            goto LABEL_119;
          }
          goto LABEL_120;
        }
        if (v47)
        {
          v82 = 0;
          v81 = OS_LOG_TYPE_DEFAULT;
          v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v70 = v82;
          if (os_log_type_enabled(v69, v81))
            v71 = v70;
          else
            v71 = v70 & 0xFFFFFFFE;
          if (v71)
          {
            *(_OWORD *)time = *(_OWORD *)&a3->value;
            *(_QWORD *)&time[16] = a3->epoch;
            v72 = CMTimeGetSeconds((CMTime *)time);
            *(CMTime *)time = type;
            v73 = CMTimeGetSeconds((CMTime *)time);
            LODWORD(time2.value) = 136315650;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSnapTimeToIFrameWithRange";
            LOWORD(time2.flags) = 2048;
            *(Float64 *)((char *)&time2.flags + 2) = v72;
            HIWORD(time2.epoch) = 2048;
            v90 = v73;
            _os_log_send_and_compose_impl();
          }
          goto LABEL_143;
        }
        goto LABEL_144;
      }
      v55 = *((_DWORD *)v41 + 788);
      if (v45 == 1)
      {
        if (v55)
          goto LABEL_44;
        goto LABEL_144;
      }
      if (v55)
      {
        v82 = 0;
        v81 = OS_LOG_TYPE_DEFAULT;
        v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
LABEL_123:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    default:
      return FigSignalErrorAt();
  }
}

uint64_t FigPlaybackBossSetDroppableFrameMinimumIntervalAndRequestedFrameTimestampIntervalStep(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v3;
  CFIndex v8;
  int v9;
  char *ValueAtIndex;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t *v14;
  __int128 v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v17;
  int v18;
  CMTime time2;
  CMTime time1;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = MEMORY[0x1E0CA2E18];
  v23 = *MEMORY[0x1E0CA2E18];
  v24 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v21 = v23;
  v22 = v24;
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(uint64_t *)(a1 + 80) <= 0)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v17 = *(_DWORD *)(v3 + 12);
    LOBYTE(v18) = v17;
    do
    {
      ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v8);
      if (*((_DWORD *)ValueAtIndex + 18) == 1986618469)
      {
        v11 = ValueAtIndex;
        v12 = ValueAtIndex + 292;
        time1 = *(CMTime *)(ValueAtIndex + 292);
        time2 = *a2;
        if (CMTimeCompare(&time1, &time2))
        {
          if ((v18 & 1) == 0)
          {
            v23 = *(_QWORD *)v12;
            v24 = *((_DWORD *)v12 + 2);
            v18 = *((_DWORD *)v11 + 76);
          }
          v13 = *(_OWORD *)&a2->value;
          *((_QWORD *)v12 + 2) = a2->epoch;
          *(_OWORD *)v12 = v13;
          v9 = 1;
          *(_BYTE *)(a1 + 134) = 1;
        }
        v14 = (uint64_t *)(v11 + 316);
        time1 = *(CMTime *)(v11 + 316);
        time2 = *a3;
        if (CMTimeCompare(&time1, &time2))
        {
          if ((v17 & 1) == 0)
          {
            v21 = *v14;
            v22 = *((_DWORD *)v11 + 81);
            v17 = *((_DWORD *)v11 + 82);
          }
          v15 = *(_OWORD *)&a3->value;
          *(_QWORD *)(v11 + 332) = a3->epoch;
          *(_OWORD *)v14 = v15;
          v9 = 1;
          *(_BYTE *)(a1 + 134) = 1;
        }
      }
      ++v8;
    }
    while (*(_QWORD *)(a1 + 80) > v8);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    if (v9)
    {
      if (dword_1EE2A2C50)
        goto LABEL_21;
      return 0;
    }
  }
  if (dword_1EE2A2C50 >= 2)
  {
LABEL_21:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

float FigPlaybackBossGetRate(uint64_t a1)
{
  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 120))
    {
      FigSignalErrorAt();
      return 1.0;
    }
    else
    {
      return *(float *)(a1 + 432);
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0.0;
  }
}

uint64_t FigPlaybackBossSetRateAndAnchorTime(uint64_t a1, CMTime *a2, CMTime *a3, const void *a4, float a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime *p_time;
  uint64_t v13;
  int v14;
  os_log_type_t type;
  int v16;
  CMTime v17;
  CMTime time;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2C50)
  {
    v16 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 120))
    return FigSignalErrorAt();
  if (a5 == 0.0)
  {
    if ((a2->flags & 0x1D) == 1)
    {
      time = *a2;
      p_time = &time;
      v13 = a1;
      v14 = 2;
    }
    else
    {
      p_time = (CMTime *)MEMORY[0x1E0CA2E18];
      v13 = a1;
      v14 = 1;
    }
    figPlaybackBossSetRateToZero(v13, v14, p_time);
    return 0;
  }
  else
  {
    time = *a2;
    v17 = *a3;
    return figPlaybackBossSetRateToNonZero(a1, &time, &v17, a4, a5);
  }
}

uint64_t figPlaybackBossSetRateToNonZero(uint64_t a1, CMTime *a2, CMTime *a3, const void *a4, float a5)
{
  int v8;
  CMTime *v9;
  float v10;
  int v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  float v14;
  NSObject *v15;
  float *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  float v20;
  float v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  OpaqueCMTimebase *v30;
  uint64_t v31;
  CMTimeEpoch v32;
  const void *v33;
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t started;
  int v40;
  int v41;
  CMTimeEpoch epoch;
  CMTimeEpoch v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  OpaqueCMTimebase *v52;
  _OWORD *v53;
  NSObject *v54;
  OpaqueCMClock *HostTimeClock;
  OpaqueCMTimebase *v56;
  OpaqueCMTimebase *v57;
  NSObject *v58;
  const void *v59;
  NSObject *v60;
  unsigned int value;
  unsigned int v62;
  NSObject *v63;
  unsigned int v64;
  unsigned int v65;
  int32_t timescale;
  unsigned int v67;
  NSObject *v68;
  unsigned int v69;
  unsigned int v70;
  const char *StateName;
  uint64_t v73;
  __int16 v74;
  int v75;
  __int128 v76;
  CMTime v79;
  CMTime rhs;
  CMTime v81;
  CMTime lhs;
  CMTime v83;
  CMTime v84;
  CMTime v85;
  CMTime v86;
  os_log_type_t type;
  CMTime v88;
  CMTime v89;
  uint64_t v90;
  int v91;
  CMTime v92;
  uint64_t v93;
  __int16 v94;
  const char *v95;
  CMTime time;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v91 = 0;
  v90 = 0;
  v8 = *(unsigned __int8 *)(a1 + 131);
  memset(&v89, 0, sizeof(v89));
  memset(&v88, 0, sizeof(v88));
  *(_BYTE *)(a1 + 128) = 0;
  v9 = (CMTime *)MEMORY[0x1E0CA2E18];
  bossScheduleReachedEndCallbackForTime(a1, MEMORY[0x1E0CA2E18]);
  bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(a1, v9);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  bossConfigureRatePlan(*(unsigned __int8 *)(a1 + 104), a1 + 392, (float *)(a1 + 404), (uint64_t)&v90, a5);
  v10 = *(float *)(a1 + 504);
  if (v10 == 0.0)
  {
    if (dword_1EE2A2C50)
      goto LABEL_14;
    goto LABEL_15;
  }
  if (v10 <= 0.0 == *(float *)&v90 > 0.0)
  {
    if (dword_1EE2A2C50)
      goto LABEL_14;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 106))
  {
    if (dword_1EE2A2C50)
      goto LABEL_14;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 107))
  {
    v11 = 1;
    if (v10 != *(float *)&v90 && *(float *)&v90 != 0.0)
    {
      if (dword_1EE2A2C50)
      {
LABEL_14:
        LODWORD(rhs.value) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_15:
      v11 = 0;
    }
  }
  else
  {
    v11 = 1;
  }
  if (v91 != *(unsigned __int8 *)(a1 + 440))
  {
    if (dword_1EE2A2C50)
    {
LABEL_22:
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_23:
    v11 = 0;
    goto LABEL_24;
  }
  if ((_BYTE)v91
    && (float)(*((float *)&v90 + 1) * *(float *)(a1 + 432)) != (float)(*(float *)(a1 + 436) * *(float *)&v90))
  {
    if (dword_1EE2A2C50)
      goto LABEL_22;
    goto LABEL_23;
  }
LABEL_24:
  v14 = *(float *)(a1 + 504);
  if (*(_BYTE *)(a1 + 132))
  {
    if (v14 == *(float *)&v90)
      goto LABEL_32;
    if (!dword_1EE2A2C50)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (fabsf(v14) <= *(float *)(a1 + 136) != fabsf(*(float *)&v90) > *(float *)(a1 + 136))
    goto LABEL_32;
  if (dword_1EE2A2C50)
  {
LABEL_30:
    LODWORD(rhs.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_31:
  v11 = 0;
LABEL_32:
  v16 = (float *)(a1 + 432);
  if (*(unsigned __int8 *)(a1 + 441) != BYTE1(v91))
  {
    if (dword_1EE2A2C50)
    {
LABEL_38:
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_39:
    v11 = 0;
    goto LABEL_40;
  }
  if (*(_BYTE *)(a1 + 441) && *v16 != *(float *)&v90)
  {
    if (dword_1EE2A2C50)
      goto LABEL_38;
    goto LABEL_39;
  }
LABEL_40:
  if (*(_BYTE *)(a1 + 548))
  {
    if (dword_1EE2A2C50)
    {
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v11 = 0;
  }
  if (*(_BYTE *)(a1 + 105) && *(float *)(a1 + 436) != *((float *)&v90 + 1))
  {
    if (dword_1EE2A2C50)
    {
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v11 = 0;
  }
  v20 = *(float *)(a1 + 504);
  v21 = *(float *)&v90;
  if (v20 == 0.0 && *(float *)&v90 < 0.0)
  {
    if (dword_1EE2A2C50)
    {
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v11 = 0;
      v20 = *(float *)(a1 + 504);
      v21 = *(float *)&v90;
    }
    else
    {
      v11 = 0;
    }
  }
  if (v20 <= 0.0 != v21 > 0.0)
    v23 = v8;
  else
    v23 = 0;
  if ((a2->flags & 0x1D) == 1)
  {
    if (dword_1EE2A2C50)
    {
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v23 = 0;
    v11 = 0;
  }
  v25 = a3->flags & 0x1D;
  if (v25 == 1)
  {
    if (dword_1EE2A2C50)
    {
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v23 = 0;
    v11 = 0;
  }
  if (BYTE1(v91) && *v16 == 0.0 && *(float *)&v90 > 0.0 && *(float *)&v90 < 1.0)
  {
    if (dword_1EE2A2C50)
    {
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v11 = 0;
  }
  if (*(_BYTE *)(a1 + 134))
  {
    if (dword_1EE2A2C50)
    {
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v11 = 0;
  }
  if (*(float *)(a1 + 504) != *(float *)&v90 || *(_BYTE *)(a1 + 134))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
    if (*(_BYTE *)(a1 + 840))
    {
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    bossSetMentorPropertiesForRate(a1, 0, *(float *)&v90);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  }
  *(_BYTE *)(a1 + 134) = 0;
  if (*(_BYTE *)(a1 + 468) && (*(_BYTE *)(a1 + 484) & 1) != 0)
  {
    v30 = *(OpaqueCMTimebase **)(a1 + 112);
    time = *(CMTime *)(a1 + 472);
    CMTimebaseSetTime(v30, &time);
  }
  v31 = MEMORY[0x1E0CA2E18];
  v76 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 472) = *MEMORY[0x1E0CA2E18];
  v32 = *(_QWORD *)(v31 + 16);
  *(_QWORD *)(a1 + 488) = v32;
  if (!v11)
  {
    v34 = 0;
    v40 = *(_DWORD *)(a1 + 424);
    if (v40 <= 1886530415)
    {
      if (v40 > 1886151032)
      {
        v44 = 3;
        if (v40 != 1886151033)
        {
          if (v40 == 1886154860)
          {
            bossBumpCurrentMasterOrder(a1);
            MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
            if (*(_BYTE *)(a1 + 840))
            {
              LODWORD(rhs.value) = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            bossSetMentorModesToDoNothing(a1, 0, *(_QWORD *)(a1 + 80), 2);
            MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
            if ((*(_DWORD *)(a1 + 456) & 0x1D) == 1)
            {
              v57 = *(OpaqueCMTimebase **)(a1 + 112);
              time = *(CMTime *)(a1 + 444);
              CMTimebaseSetTime(v57, &time);
              *(_OWORD *)(a1 + 444) = v76;
              *(_QWORD *)(a1 + 460) = v32;
            }
            MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
            if (*(_BYTE *)(a1 + 840))
            {
              LODWORD(rhs.value) = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            bossResetSideQueuesAndSwitchMentorsToMainQueues(a1);
            MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
            v44 = 2;
          }
          else
          {
            v36 = 0;
            if (v40 != 1886155888)
              goto LABEL_183;
          }
        }
        CMTimebaseGetTime(&v79, *(CMTimebaseRef *)(a1 + 112));
        if (bossCheckTimeWithEndTimes(a1, &v79, 0, *(float *)&v90))
          goto LABEL_157;
        bossBumpCurrentMasterOrder(a1);
        MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
        if (v23)
        {
          if (*(_BYTE *)(a1 + 840))
          {
            v59 = a4;
            LODWORD(rhs.value) = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = rhs.value;
            if (os_log_type_enabled(v60, type))
              v62 = value;
            else
              v62 = value & 0xFFFFFFFE;
            if (v62)
            {
              LODWORD(v92.value) = 136315394;
              *(CMTimeValue *)((char *)&v92.value + 4) = (CMTimeValue)"figPlaybackBossSetRateToNonZero";
              LOWORD(v92.flags) = 2048;
              *(_QWORD *)((char *)&v92.flags + 2) = a1;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a4 = v59;
          }
          bossSetMentorModesToDoNothing(a1, 0, *(_QWORD *)(a1 + 80), 2);
          bossSwitchMentorsToSideQueues(a1, 0);
          MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
          CMTimebaseGetTime(&v89, *(CMTimebaseRef *)(a1 + 112));
          if (v89.timescale <= 1000)
            timescale = 1000;
          else
            timescale = v89.timescale;
          CMTimeMakeWithSeconds(&v88, *(float *)(a1 + 432) * 0.1, timescale);
          v92 = v89;
          rhs = v88;
          CMTimeAdd(&time, &v92, &rhs);
          v89 = time;
          *(_QWORD *)v16 = v90;
          *(_DWORD *)(a1 + 440) = v91;
          if (fabsf(a5) <= *(float *)(a1 + 136))
          {
            if (a5 < 0.0)
              v67 = 1;
            else
              v67 = 2;
            time = v89;
            bossSnapTimeToIFrameWithRange(a1, &time, v67, MEMORY[0x1E0CA2E28], MEMORY[0x1E0CA2E30], (uint64_t)&v89);
          }
          time = v89;
          started = figPlaybackBossStartPrerollAndSetPlayState(a1, &time, v90, v91, 2, 1886154860, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], a4);
          goto LABEL_181;
        }
        if (*(_BYTE *)(a1 + 840))
        {
          LODWORD(rhs.value) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v64 = rhs.value;
          if (os_log_type_enabled(v63, type))
            v65 = v64;
          else
            v65 = v64 & 0xFFFFFFFE;
          if (v65)
          {
            LODWORD(v92.value) = 136315394;
            *(CMTimeValue *)((char *)&v92.value + 4) = (CMTimeValue)"figPlaybackBossSetRateToNonZero";
            LOWORD(v92.flags) = 2048;
            *(_QWORD *)((char *)&v92.flags + 2) = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        bossSetMentorModesToDoNothing(a1, 0, *(_QWORD *)(a1 + 80), 0);
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
        bossStopTimebaseAndAudioContext(a1, 1, MEMORY[0x1E0CA2E18]);
        v73 = v90;
        *(_QWORD *)v16 = v90;
        v74 = v91;
        *(_DWORD *)(a1 + 440) = v91;
        if (v25 == 1)
          v75 = 1886151033;
        else
          v75 = 1886530416;
        *(_OWORD *)&time.value = v76;
        time.epoch = v32;
        v92 = *a2;
        rhs = *a3;
        v48 = figPlaybackBossStartPrerollAndSetPlayState(a1, &time, v73, v74, v44, v75, &v92, (__int128 *)&rhs.value, a4);
        goto LABEL_135;
      }
      if (v40 != 1634624887)
      {
        if (v40 == 1768189029)
          goto LABEL_136;
        v41 = 1885435251;
        goto LABEL_129;
      }
LABEL_130:
      CMTimebaseGetTime(&v81, *(CMTimebaseRef *)(a1 + 112));
      if (bossCheckTimeWithEndTimes(a1, &v81, 0, *(float *)&v90))
        goto LABEL_157;
      v45 = v90;
      *(_QWORD *)v16 = v90;
      v46 = v91;
      *(_DWORD *)(a1 + 440) = v91;
      if (v25 == 1)
        v47 = 1886151033;
      else
        v47 = 1886530416;
      *(_OWORD *)&time.value = v76;
      time.epoch = v32;
      v92 = *a2;
      rhs = *a3;
      v48 = figPlaybackBossStartPrerollAndSetPlayState(a1, &time, v45, v46, 3, v47, &v92, (__int128 *)&rhs.value, a4);
LABEL_135:
      v36 = v48;
      v34 = v48 != 0;
      goto LABEL_183;
    }
    if (v40 > 1919247480)
    {
      if (v40 == 2003853684 || v40 == 1920298606)
        goto LABEL_136;
      v41 = 1919247481;
    }
    else
    {
      if (v40 == 1886530416)
        goto LABEL_130;
      if (v40 == 1886544244)
        goto LABEL_136;
      v41 = 1886545266;
    }
LABEL_129:
    v36 = 0;
    if (v40 != v41)
      goto LABEL_183;
    goto LABEL_130;
  }
  v33 = *(const void **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = a4;
  if (a4)
    CFRetain(a4);
  if (v33)
    CFRelease(v33);
  v34 = 0;
  v35 = *(_DWORD *)(a1 + 424);
  if (v35 > 1886530415)
  {
    if (v35 > 1919247480)
    {
      if (v35 == 1919247481)
      {
        CMTimebaseGetTime(&v85, *(CMTimebaseRef *)(a1 + 112));
        if (bossCheckTimeWithEndTimes(a1, &v85, 0, *(float *)&v90))
          goto LABEL_157;
        *(_QWORD *)v16 = v90;
        *(_DWORD *)(a1 + 440) = v91;
        v50 = bossStartTimebaseAndAudioContext(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], *(float *)(a1 + 432), *(float *)(a1 + 436));
        if ((_DWORD)v50)
        {
          v36 = v50;
          *(_DWORD *)(a1 + 432) = 0;
          *(_DWORD *)(a1 + 424) = 1885435251;
          v34 = 1;
          goto LABEL_183;
        }
        *(_DWORD *)(a1 + 424) = 1886151033;
        ++*(_DWORD *)(a1 + 712);
        ++*(_DWORD *)(a1 + 720);
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&time, HostTimeClock);
        *(CMTime *)(a1 + 656) = time;
        v56 = *(OpaqueCMTimebase **)(a1 + 112);
        if (v56)
        {
          CMTimebaseGetTime(&time, v56);
          v34 = 0;
          v36 = 0;
          *(CMTime *)(a1 + 688) = time;
          goto LABEL_183;
        }
        goto LABEL_137;
      }
      if (v35 != 1920298606)
      {
        v36 = 0;
        if (v35 != 2003853684)
          goto LABEL_183;
      }
    }
    else
    {
      if (v35 == 1886530416)
        goto LABEL_120;
      if (v35 != 1886544244)
      {
        v36 = 0;
        if (v35 == 1886545266)
        {
          v34 = 0;
          v36 = 0;
          *(_QWORD *)v16 = v90;
          *(_DWORD *)(a1 + 440) = v91;
          *(_DWORD *)(a1 + 424) = 1886530416;
          epoch = a2->epoch;
          *(_OWORD *)(a1 + 792) = *(_OWORD *)&a2->value;
          *(_QWORD *)(a1 + 808) = epoch;
          v43 = a3->epoch;
          *(_OWORD *)(a1 + 816) = *(_OWORD *)&a3->value;
          *(_QWORD *)(a1 + 832) = v43;
        }
        goto LABEL_183;
      }
    }
LABEL_136:
    LODWORD(rhs.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_137:
    v34 = 0;
    v36 = 0;
    goto LABEL_183;
  }
  if (v35 > 1886151032)
  {
    if (v35 == 1886151033)
      goto LABEL_113;
    if (v35 != 1886154860)
    {
      v36 = 0;
      if (v35 != 1886155888)
        goto LABEL_183;
LABEL_113:
      if (*(float *)&v90 == *v16)
      {
        v36 = 0;
        *(_DWORD *)(a1 + 504) = v90;
      }
      else
      {
        CMTimebaseGetTime(&v84, *(CMTimebaseRef *)(a1 + 112));
        if (bossCheckTimeWithEndTimes(a1, &v84, 0, *(float *)&v90))
          goto LABEL_157;
        *(_QWORD *)v16 = v90;
        *(_DWORD *)(a1 + 440) = v91;
        v51 = MEMORY[0x1E0CA2E18];
        v36 = bossSetPossiblyOutsourcedTimebaseRate(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], *(float *)(a1 + 432), *(float *)(a1 + 436));
        ++*(_DWORD *)(a1 + 720);
        v52 = *(OpaqueCMTimebase **)(a1 + 112);
        if (v52)
        {
          v53 = (_OWORD *)(a1 + 688);
          if ((*(_BYTE *)(a1 + 700) & 1) != 0)
          {
            CMTimebaseGetTime(&lhs, v52);
            *(_OWORD *)&time.value = *v53;
            time.epoch = *(_QWORD *)(a1 + 704);
            CMTimeSubtract(&v83, &lhs, &time);
            *(double *)(a1 + 680) = *(double *)(a1 + 680) + fabs(CMTimeGetSeconds(&v83));
            *v53 = *(_OWORD *)v51;
            *(_QWORD *)(a1 + 704) = *(_QWORD *)(v51 + 16);
            v52 = *(OpaqueCMTimebase **)(a1 + 112);
          }
          CMTimebaseGetTime(&time, v52);
          *v53 = *(_OWORD *)&time.value;
          *(_QWORD *)(a1 + 704) = time.epoch;
        }
      }
      bossScheduleReachedEndCallbackForRate(a1, *(float *)&v90);
      bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(a1, *(float *)&v90);
LABEL_182:
      v34 = 0;
      goto LABEL_183;
    }
LABEL_120:
    v34 = 0;
    v36 = 0;
    *(_QWORD *)v16 = v90;
    *(_DWORD *)(a1 + 440) = v91;
    goto LABEL_183;
  }
  if (v35 == 1634624887)
    goto LABEL_94;
  if (v35 == 1768189029)
    goto LABEL_136;
  v36 = 0;
  if (v35 == 1885435251)
  {
LABEL_94:
    CMTimebaseGetTime(&v86, *(CMTimebaseRef *)(a1 + 112));
    if (!bossCheckTimeWithEndTimes(a1, &v86, 0, *(float *)&v90))
    {
      v37 = v90;
      *(_QWORD *)v16 = v90;
      v38 = v91;
      *(_DWORD *)(a1 + 440) = v91;
      *(_OWORD *)&time.value = v76;
      time.epoch = v32;
      started = figPlaybackBossStartPrerollAndSetPlayState(a1, &time, v37, v38, 3, 1886530416, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], a4);
LABEL_181:
      v36 = started;
      goto LABEL_182;
    }
LABEL_157:
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
    return 0;
  }
LABEL_183:
  if (dword_1EE2A2C50)
  {
    LODWORD(rhs.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v69 = rhs.value;
    if (os_log_type_enabled(v68, type))
      v70 = v69;
    else
      v70 = v69 & 0xFFFFFFFE;
    if (v70)
    {
      StateName = getStateName(*(_DWORD *)(a1 + 424));
      LODWORD(v92.value) = 136315906;
      *(CMTimeValue *)((char *)&v92.value + 4) = (CMTimeValue)"figPlaybackBossSetRateToNonZero";
      LOWORD(v92.flags) = 2048;
      *(_QWORD *)((char *)&v92.flags + 2) = a1;
      HIWORD(v92.epoch) = 2082;
      v93 = a1 + 841;
      v94 = 2082;
      v95 = StateName;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  if (v34)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return v36;
}

uint64_t FigPlaybackBossStartPreroll(uint64_t a1, const __CFDictionary *a2, const void *a3, float a4)
{
  CFDictionaryRef v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  const void *v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t started;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const void *v21;
  uint64_t v22;
  int v23;
  void *values;
  CMTime v25;
  uint64_t v26;

  v5 = a2;
  v26 = *MEMORY[0x1E0C80C00];
  values = a2;
  v23 = 0;
  v22 = 0;
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 120) || a4 == 0.0)
    return FigSignalErrorAt();
  bossConfigureRatePlan(*(unsigned __int8 *)(a1 + 104), a1 + 392, (float *)(a1 + 404), (uint64_t)&v22, a4);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  v11 = *(const void **)(a1 + 496);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 496) = 0;
  }
  v9 = 0;
  v12 = *(_DWORD *)(a1 + 424);
  if (v12 <= 1886530415)
  {
    if (v12 <= 1886151032)
    {
      if (v12 == 1634624887)
        goto LABEL_16;
      if (v12 != 1768189029)
      {
        if (v12 == 1885435251)
        {
LABEL_16:
          MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
          if (!*(_BYTE *)(a1 + 840))
          {
LABEL_51:
            bossSetMentorPropertiesForRate(a1, 0, *(float *)&v22);
            MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
            v21 = *(const void **)(a1 + 496);
            *(_QWORD *)(a1 + 496) = v5;
            if (v5)
              CFRetain(v5);
            if (v21)
              CFRelease(v21);
            v25 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
            started = figPlaybackBossStartPrerollAndSetPlayState(a1, &v25, v22, v23, 3, 1886545266, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], a3);
            goto LABEL_56;
          }
LABEL_50:
          v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_51;
        }
LABEL_57:
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
        return v9;
      }
LABEL_34:
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v9 = 0;
      goto LABEL_57;
    }
    if (v12 == 1886151033 || v12 == 1886154860)
      goto LABEL_32;
    v13 = 1886155888;
    goto LABEL_31;
  }
  if (v12 <= 1919247480)
  {
    if (v12 != 1886530416 && v12 != 1886544244)
    {
      if (v12 != 1886545266)
        goto LABEL_57;
      if (*(float *)(a1 + 504) != *(float *)&v22)
      {
        if (dword_1EE2A2C50)
        {
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
        if (!*(_BYTE *)(a1 + 840))
          goto LABEL_51;
        goto LABEL_50;
      }
      if (!dword_1EE2A2C50)
      {
LABEL_33:
        started = FigSignalErrorAt();
LABEL_56:
        v9 = started;
        goto LABEL_57;
      }
    }
LABEL_32:
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_33;
  }
  if (v12 != 1919247481)
  {
    if (v12 == 1920298606)
      goto LABEL_34;
    v13 = 2003853684;
LABEL_31:
    if (v12 != v13)
      goto LABEL_57;
    goto LABEL_32;
  }
  if (*(float *)(a1 + 504) != *(float *)&v22)
  {
    if (dword_1EE2A2C50)
    {
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
    if (!*(_BYTE *)(a1 + 840))
      goto LABEL_51;
    goto LABEL_50;
  }
  if (dword_1EE2A2C50)
  {
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  if (v5)
    v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackBossParameter_PrerollToken, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v5)
    CFRelease(v5);
  return 0;
}

void bossSetMentorPropertiesForRate(uint64_t a1, uint64_t a2, float a3)
{
  const __CFAllocator *v5;
  CFNumberRef v6;
  int v7;
  double v8;
  CFIndex v9;
  char *ValueAtIndex;
  char *v11;
  CFDictionaryRef v12;
  CFDictionaryRef v13;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const __CFNumber *v21;
  CMTime v23;
  CMTime v24;
  CMTime time;
  CMTime v26;
  float valuePtr[3];

  valuePtr[0] = a3;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, valuePtr);
  if (a2 < FigCFRangeGetLimit())
  {
    v7 = 0;
    v8 = fabsf(a3);
    v9 = a2;
    v21 = v6;
    do
    {
      ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v9);
      if (*((_QWORD *)ValueAtIndex + 24))
      {
        v11 = ValueAtIndex;
        memset(&v26, 0, sizeof(v26));
        time = *(CMTime *)(ValueAtIndex + 348);
        CMTimeMultiplyByFloat64(&v26, &time, v8);
        time = v26;
        v12 = CMTimeCopyAsDictionary(&time, v5);
        memset(&time, 0, sizeof(time));
        v24 = *(CMTime *)(v11 + 372);
        CMTimeMultiplyByFloat64(&time, &v24, v8);
        v24 = time;
        v13 = CMTimeCopyAsDictionary(&v24, v5);
        v14 = 0;
        if ((*((_DWORD *)v11 + 76) & 0x1D) == 1)
        {
          memset(&v24, 0, sizeof(v24));
          v23 = *(CMTime *)(v11 + 292);
          CMTimeMultiplyByFloat64(&v24, &v23, v8);
          v23 = v24;
          v14 = CMTimeCopyAsDictionary(&v23, v5);
        }
        if ((*((_DWORD *)v11 + 82) & 0x1D) == 1)
        {
          memset(&v24, 0, sizeof(v24));
          v23 = *(CMTime *)(v11 + 316);
          CMTimeMultiplyByFloat64(&v24, &v23, v8);
          v23 = v24;
          v15 = CMTimeCopyAsDictionary(&v23, v5);
        }
        else
        {
          v15 = 0;
        }
        v16 = EditMentorSetProperty(*((_QWORD *)v11 + 24), CFSTR("IFrameMinimumInterval"), v12);
        if (!v7)
          v7 = v16;
        if (v12)
          CFRelease(v12);
        v17 = EditMentorSetProperty(*((_QWORD *)v11 + 24), CFSTR("IFrameAverageInterval"), v13);
        if (!v7)
          v7 = v17;
        if (v13)
          CFRelease(v13);
        v18 = EditMentorSetProperty(*((_QWORD *)v11 + 24), CFSTR("DroppableFrameMinimumInterval"), v14);
        if (!v7)
          v7 = v18;
        if (v14)
          CFRelease(v14);
        v19 = EditMentorSetProperty(*((_QWORD *)v11 + 24), CFSTR("RequestedFrameTimestampIntervalStep"), v15);
        if (!v7)
          v7 = v19;
        if (v15)
          CFRelease(v15);
        v6 = v21;
        v20 = EditMentorSetProperty(*((_QWORD *)v11 + 24), CFSTR("PlayRate"), v21);
        if (!v7)
          v7 = v20;
      }
      ++v9;
    }
    while (v9 < FigCFRangeGetLimit());
  }
  if (v6)
    CFRelease(v6);
}

uint64_t FigPlaybackBossGoQuiescent(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;

  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  figPlaybackBossTeardownTracks(a1, 0);
  if (dword_1EE2A2C50)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_BYTE *)(a1 + 840) = 1;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return 0;
}

uint64_t FigPlaybackBossPrerollAndScheduleGaplessStart(uint64_t a1, const void *a2, const void *a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v11;
  const void *v12;
  _QWORD *ValueAtIndex;
  uint64_t v14;
  _QWORD *v15;
  OpaqueCMTimebase *v16;
  uint64_t (*v17)(uint64_t, OpaqueCMTimebase *, CMTime *, const void *, _QWORD, _QWORD);
  int v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  OpaqueCMTimebase *v36;
  Float64 Seconds;
  uint64_t FigBaseObject;
  void (*v39)(uint64_t, const __CFString *, uint64_t, CMTime *);
  const void *value;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, const __CFString *, uint64_t);
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  CFIndex v47;
  uint64_t v48;
  CMAttachmentBearerRef v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, const __CFString *, uint64_t, CMTime *);
  int v52;
  const void *v53;
  uint64_t v54;
  __int16 v55;
  OpaqueCMClock *HostTimeClock;
  uint64_t v57;
  const void *v58;
  const void *v60;
  uint64_t v61;
  int v62;
  const void *v63;
  int v64;
  int v65;
  uint64_t v66;
  CMTime time;
  CMTime v68;
  os_log_type_t type;
  unsigned int v70;
  CMAttachmentBearerRef target;
  uint64_t v72;
  int v73;
  int v74;
  const char *v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  OpaqueCMTimebase *v91;
  __int16 v92;
  const void *v93;
  __int16 v94;
  Float64 v95;
  __int16 v96;
  int v97;
  CMTime v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v73 = 0;
  target = 0;
  v72 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  bossConfigureRatePlan(*(unsigned __int8 *)(a1 + 104), a1 + 392, (float *)(a1 + 404), (uint64_t)&v72, a4);
  v8 = *MEMORY[0x1E0C9AE00];
  v9 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
  if ((_DWORD)v9)
    goto LABEL_77;
  v63 = a2;
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2718], a2, 0);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    v70 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) <= 0)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
LABEL_60:
    v9 = FigSignalErrorAt();
    goto LABEL_77;
  }
  v60 = a3;
  v11 = 0;
  v62 = 0;
  v61 = v8;
  v12 = v63;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v11);
    v14 = ValueAtIndex[10];
    if (v14)
    {
      v15 = ValueAtIndex;
      v16 = *(OpaqueCMTimebase **)(a1 + 112);
      CMTimebaseGetTime(&v68, v16);
      v17 = *(uint64_t (**)(uint64_t, OpaqueCMTimebase *, CMTime *, const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v17)
      {
        v98 = v68;
        v18 = v17(v14, v16, &v98, v12, 0, 0);
      }
      else
      {
        v18 = -12782;
      }
      if (dword_1EE2A2C50)
      {
        v70 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v20 = v70;
        if (os_log_type_enabled(v19, type))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if (v21)
        {
          v66 = v15[10];
          v22 = *((unsigned int *)v15 + 18);
          v23 = v22 >> 24;
          if ((v22 & 0x80000000) != 0)
          {
            v25 = __maskrune(HIBYTE(*((_DWORD *)v15 + 18)), 0x40000uLL);
            LODWORD(v22) = *((_DWORD *)v15 + 18);
            v24 = MEMORY[0x1E0C80978];
          }
          else
          {
            v24 = MEMORY[0x1E0C80978];
            v25 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v23 + 60) & 0x40000;
          }
          if (v25)
            v26 = v23;
          else
            v26 = 46;
          v27 = BYTE2(v22);
          v65 = v26;
          if (BYTE2(v22) > 0x7Fu)
          {
            v28 = __maskrune(BYTE2(v22), 0x40000uLL);
            LODWORD(v22) = *((_DWORD *)v15 + 18);
          }
          else
          {
            v28 = *(_DWORD *)(v24 + 4 * BYTE2(v22) + 60) & 0x40000;
          }
          if (v28)
            v29 = v27;
          else
            v29 = 46;
          v30 = BYTE1(v22);
          v64 = v29;
          if (BYTE1(v22) > 0x7Fu)
          {
            v31 = __maskrune(BYTE1(v22), 0x40000uLL);
            LOBYTE(v22) = *((_BYTE *)v15 + 72);
          }
          else
          {
            v31 = *(_DWORD *)(v24 + 4 * BYTE1(v22) + 60) & 0x40000;
          }
          if (v31)
            v32 = v30;
          else
            v32 = 46;
          v33 = v22;
          if (v22 > 0x7Fu)
            v34 = __maskrune(v22, 0x40000uLL);
          else
            v34 = *(_DWORD *)(v24 + 4 * v22 + 60) & 0x40000;
          if (v34)
            v35 = v33;
          else
            v35 = 46;
          v36 = *(OpaqueCMTimebase **)(a1 + 112);
          CMTimebaseGetTime(&time, v36);
          Seconds = CMTimeGetSeconds(&time);
          v74 = 136317954;
          v75 = "FigPlaybackBossPrerollAndScheduleGaplessStart";
          v76 = 2048;
          v77 = a1;
          v78 = 2082;
          v79 = a1 + 841;
          v80 = 2048;
          v81 = v66;
          v82 = 1024;
          v83 = v65;
          v84 = 1024;
          v85 = v64;
          v86 = 1024;
          v87 = v32;
          v88 = 1024;
          v89 = v35;
          v90 = 2048;
          v91 = v36;
          v92 = 2114;
          v12 = v63;
          v93 = v63;
          v94 = 2048;
          v95 = Seconds;
          v96 = 1024;
          v97 = v18;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v18)
      {
        v98.value = 0;
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v15[10]);
        v39 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
        if (v39)
          v39(FigBaseObject, CFSTR("Timebase"), v61, &v98);
        value = (const void *)v98.value;
        if (v98.value)
          goto LABEL_49;
        v41 = *(_QWORD *)(a1 + 112);
        v42 = FigRenderPipelineGetFigBaseObject(v15[10]);
        v43 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v43)
          v43(v42, CFSTR("Timebase"), v41);
        value = (const void *)v98.value;
        if (v98.value)
LABEL_49:
          CFRelease(value);
      }
      else
      {
        v62 = 1;
      }
    }
    ++v11;
  }
  while (*(_QWORD *)(a1 + 80) > v11);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  if (!v62)
    goto LABEL_60;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    v70 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v45 = v70;
    if (os_log_type_enabled(v44, type))
      v46 = v45;
    else
      v46 = v45 & 0xFFFFFFFE;
    if (v46)
    {
      v74 = 136315394;
      v75 = "FigPlaybackBossPrerollAndScheduleGaplessStart";
      v76 = 2048;
      v77 = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v47 = 0;
    do
    {
      v48 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v47) + 10);
      if (v48)
      {
        v49 = target;
        v98.value = 0;
        v50 = FigRenderPipelineGetFigBaseObject(v48);
        v51 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v51)
        {
          v52 = v51(v50, CFSTR("SourceSampleBufferQueue"), v61, &v98);
          v53 = (const void *)v98.value;
          if (!v52)
          {
            CMBufferQueueEnqueue((CMBufferQueueRef)v98.value, v49);
            v53 = (const void *)v98.value;
          }
          if (v53)
            CFRelease(v53);
        }
      }
      ++v47;
    }
    while (*(_QWORD *)(a1 + 80) > v47);
  }
  v54 = v72;
  *(_QWORD *)(a1 + 432) = v72;
  v55 = v73;
  *(_DWORD *)(a1 + 440) = v73;
  ++*(_DWORD *)(a1 + 640);
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v98, HostTimeClock);
  *(CMTime *)(a1 + 616) = v98;
  *(_DWORD *)(a1 + 424) = 1886544244;
  *(_DWORD *)(a1 + 504) = v54;
  bossBroadcastPrerollRateToRenderPipelines(a1, 0, *(float *)&v54);
  bossBumpCurrentMasterOrder(a1);
  v57 = *(_QWORD *)(a1 + 80);
  CMTimebaseGetTime(&v98, *(CMTimebaseRef *)(a1 + 112));
  v9 = bossSetMentorModesForTimeAndRate(a1, 0, v57, &v98, v54, v55, 1, 0);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  if (!(_DWORD)v9)
  {
    v58 = *(const void **)(a1 + 416);
    *(_QWORD *)(a1 + 416) = v60;
    if (v60)
      CFRetain(v60);
    if (v58)
      CFRelease(v58);
    bossScheduleReachedEndCallbackForRate(a1, *(float *)(a1 + 432));
    bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(a1, *(float *)(a1 + 432));
    v9 = 0;
  }
LABEL_77:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  if (target)
    CFRelease(target);
  return v9;
}

uint64_t FigPlaybackBossSetTime(uint64_t a1, CMTime *a2, unsigned int a3, const void *a4, int a5)
{
  CMTime v6;

  v6 = *a2;
  return FigPlaybackBossSetTimeWithRange(a1, &v6, a3, MEMORY[0x1E0CA2E28], MEMORY[0x1E0CA2E30], a4, a5);
}

uint64_t bossSnapTimeToIFrameWithRange(uint64_t a1, CMTime *a2, unsigned int a3, CMTime *a4, CMTime *a5, uint64_t a6)
{
  CMTimeEpoch v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v13;
  _QWORD *ValueAtIndex;
  _QWORD *v15;
  uint64_t v16;
  OpaqueCMTimebase *v17;
  CMTimeFlags flags;
  uint64_t result;
  _QWORD *v21;
  CMTimeEpoch epoch;
  CMTimeFlags v23;
  CMTime v24;
  CMTime time2;
  CMTime time;
  CMTime time1;
  CMTime type;
  CMTime rhs;
  CMTime lhs;
  CMTime v31;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  value = *MEMORY[0x1E0CA2E18];
  v23 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) < 1)
  {
    v21 = 0;
    epoch = v11;
  }
  else
  {
    v13 = 0;
    v21 = 0;
    epoch = v11;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v13);
      if (*((_DWORD *)ValueAtIndex + 18) == 1986618469)
      {
        v15 = ValueAtIndex;
        *(_OWORD *)&v31.value = *MEMORY[0x1E0CA2E18];
        v31.epoch = v11;
        v16 = ValueAtIndex[4];
        v17 = *(OpaqueCMTimebase **)(a1 + 112);
        lhs = *a2;
        rhs = *a4;
        type = *a5;
        if (!FigPlaybackBossSnapTimeToIFrameWithRange(v16, v17, &lhs, a3, &rhs, &type, (uint64_t)&v31))
        {
          flags = v31.flags;
          if ((v31.flags & 0x1D) == 1)
          {
            if ((v23 & 0x1D) != 1)
              goto LABEL_10;
            lhs.value = value;
            lhs.timescale = timescale;
            lhs.flags = v23;
            lhs.epoch = epoch;
            rhs = *a2;
            CMTimeSubtract(&time, &lhs, &rhs);
            CMTimeAbsoluteValue(&time1, &time);
            lhs = v31;
            rhs = *a2;
            CMTimeSubtract(&v24, &lhs, &rhs);
            CMTimeAbsoluteValue(&time2, &v24);
            if (CMTimeCompare(&time1, &time2) >= 1)
            {
LABEL_10:
              value = v31.value;
              timescale = v31.timescale;
              v21 = v15;
              epoch = v31.epoch;
              v23 = flags;
            }
          }
        }
      }
      ++v13;
    }
    while (*(_QWORD *)(a1 + 80) > v13);
  }
  result = MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  if (a6)
  {
    if (v21)
    {
      *(_QWORD *)a6 = value;
      *(_DWORD *)(a6 + 8) = timescale;
      *(_DWORD *)(a6 + 12) = v23;
      *(_QWORD *)(a6 + 16) = epoch;
    }
  }
  return result;
}

uint64_t bossResetSideQueuesAndSwitchMentorsToMainQueues(uint64_t result)
{
  uint64_t v1;
  CFIndex v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  if (*(uint64_t *)(result + 80) >= 1)
  {
    v1 = result;
    v2 = 0;
    do
    {
      v3 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 72), v2) + 12);
      result = CMBaseObjectGetVTable();
      v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 96);
      if (v4)
        result = v4(v3);
      ++v2;
    }
    while (v2 < *(_QWORD *)(v1 + 80));
  }
  return result;
}

void figPlaybackBossPostSeekDidComplete(uint64_t a1, int a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      if (!FigCFDictionarySetInt32() && (!a3 || !FigCFDictionarySetInt32()))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
      CFRelease(v7);
    }
  }
}

uint64_t FigPlaybackBossInterruptQueueing(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1 || *(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 120))
    return FigSignalErrorAt();
  figPlaybackBossPrerollCompleted(a1, 2);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  bossBumpCurrentMasterOrder(a1);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bossSetMentorModesToDoNothing(a1, 0, *(_QWORD *)(a1 + 80), 1);
  bossBumpCurrentMasterOrder(a1);
  bossSetMentorModesToDoNothing(a1, 0, *(_QWORD *)(a1 + 80), 2);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  return 0;
}

uint64_t FigPlaybackBossStepByCount(uint64_t a1, int a2, const void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  _QWORD *v7;
  int v9;
  BOOL v10;
  CMTimeFlags flags;
  __int128 *v13;
  NSObject *v14;
  CFIndex v15;
  int v16;
  _DWORD *ValueAtIndex;
  int v18;
  BOOL v19;
  int v21;
  int v22;
  CMTimeEpoch v23;
  int v24;
  int v25;
  uint64_t v26;
  CMTimeScale v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t PresentationTimeAfterSampleCursorStepping;
  CMTimeValue v34;
  CMTimeScale v35;
  CMTimeFlags v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  CMTimeValue v40;
  CMTimeEpoch v41;
  CMTimeFlags v42;
  CMTimeScale v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CMTimeEpoch v47;
  uint64_t v48;
  CMTime *v49;
  uint64_t v50;
  _QWORD *v51;
  CMTimeEpoch v52;
  uint64_t v53;
  int v54;
  int v55;
  NSObject *v56;
  unsigned int v57;
  unsigned int v58;
  Float64 Seconds;
  Float64 v60;
  CMTimeFlags v61;
  CMTimeEpoch v62;
  CMTimeScale v63;
  CMTimeValue v64;
  uint64_t v65;
  const void *v66;
  NSObject *v67;
  unsigned int v68;
  unsigned int v69;
  Float64 v70;
  CMTimeFlags v71;
  CMTimeScale timescale;
  CMTimeValue v73;
  CMTimeEpoch epoch;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  int64_t value;
  CMTimeEpoch v82;
  CMTimeScale v83;
  CMTimeValue v84;
  _QWORD *v85;
  CMTimeScale v86;
  CMTimeFlags v87;
  int v88;
  CMTimeScale v89;
  CMTimeValue v90;
  CMTimeFlags v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  CMTimeEpoch v100;
  __int128 v101;
  int v102;
  unsigned int v103;
  CMTimeValue v104;
  CMTimeEpoch v105;
  CMTimeFlags v106;
  uint64_t v107;
  CMTime v108;
  CMTime v109;
  CMTime v110;
  CMTime time;
  CMTime v112;
  CMTime v113;
  __n128 v114;
  CMTimeEpoch v115;
  CMTime v116;
  CMTime v117;
  CMTime v118;
  CMTime time2;
  CMTime rhs;
  CMTime v121;
  CMTime v122;
  CMTimeRange v123;
  CMTimeRange v124;
  CMTime v125;
  CMTime v126;
  __int16 v127;
  CMTime v128;
  CMTime lhs;
  CMTime v130;
  __int16 v131;
  CMTimeRange time1;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  CMTimeRange type;
  CMTimeRange v137;
  CMTimeRange v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v88 = a2;
  if (dword_1EE2A2C50)
  {
    LODWORD(v123.start.value) = 0;
    LOBYTE(type.start.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a2 = v88;
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    goto LABEL_5;
  v9 = *(_DWORD *)(a1 + 424);
  v10 = v9 == 1885435251 || v9 == 1886545266;
  if (!v10 && v9 != 1919247481)
    goto LABEL_5;
  if (!a2)
    return 0;
  CMTimebaseGetTime(&time1.start, *(CMTimebaseRef *)(a1 + 112));
  flags = time1.start.flags;
  if ((time1.start.flags & 0x1D) != 1
    || (timescale = time1.start.timescale,
        v73 = time1.start.value,
        epoch = time1.start.epoch,
        (v85 = malloc_type_calloc(*(_QWORD *)(a1 + 80), 8uLL, 0x2004093837F09uLL)) == 0))
  {
LABEL_5:
    v6 = FigSignalErrorAt();
    v7 = 0;
    goto LABEL_6;
  }
  v71 = flags;
  v13 = (__int128 *)MEMORY[0x1E0CA2E18];
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    LODWORD(v123.start.value) = 0;
    LOBYTE(type.start.value) = 0;
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, type.start.value);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v90 = *(_QWORD *)v13;
  v89 = *((_DWORD *)v13 + 2);
  v91 = *((_DWORD *)v13 + 3);
  v100 = *((_QWORD *)v13 + 2);
  if (*(uint64_t *)(a1 + 80) < 1)
  {
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v15);
      if (*((_BYTE *)ValueAtIndex + 89))
      {
        v18 = ValueAtIndex[18];
        v19 = v18 == 1635088502 || v18 == 1986618469;
        if (v19 || v18 == 1935893870)
          v85[v16++] = ValueAtIndex;
      }
      ++v15;
    }
    while (*(_QWORD *)(a1 + 80) > v15);
  }
  if (v88 >= 0)
    v21 = v88;
  else
    v21 = -v88;
  if (v16 > 1)
    v22 = 1;
  else
    v22 = v21;
  v101 = *v13;
  v114 = (__n128)*v13;
  v23 = v100;
  v115 = v100;
  v76 = v22;
  if (v88 >= 0)
    v24 = v22;
  else
    v24 = -v22;
  FigPlaybackBossGetDuration(a1, &v114);
  if (v24 < 0)
    v25 = -1;
  else
    v25 = 1;
  v80 = 0;
  value = 250 * v24;
  v102 = v24;
  v103 = v25;
  v92 = v16;
  v78 = v25 * v24;
  v75 = v25 * v24 + 1;
  v106 = v71;
  v86 = timescale;
  v104 = v73;
  v105 = epoch;
  v77 = a1;
  do
  {
    v79 = v21;
    if ((int)v92 >= 1)
    {
      v26 = 0;
      v87 = v91;
      v82 = v23;
      v83 = v89;
      v84 = v90;
      v7 = v85;
      v27 = v86;
      while (1)
      {
        v28 = v7[v26];
        *(__n128 *)&v113.value = v114;
        v113.epoch = v115;
        v127 = 0;
        v29 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
        *(_OWORD *)&v137.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
        *(_OWORD *)&v138.start.value = v29;
        v30 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
        *(_OWORD *)&v138.start.epoch = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
        *(_OWORD *)&v138.duration.timescale = v30;
        v31 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
        *(_OWORD *)&v137.start.value = *MEMORY[0x1E0CA2E20];
        *(_OWORD *)&v137.start.epoch = v31;
        *(_OWORD *)&v126.value = v101;
        v126.epoch = v23;
        *(_OWORD *)&v124.duration.timescale = v30;
        *(_OWORD *)&v125.value = v101;
        v125.epoch = v23;
        v97 = v29;
        v98 = *(_OWORD *)&v137.duration.timescale;
        *(_OWORD *)&v123.duration.timescale = *(_OWORD *)&v137.duration.timescale;
        *(_OWORD *)&v124.start.value = v29;
        v95 = v30;
        v96 = *(_OWORD *)&v138.start.epoch;
        *(_OWORD *)&v124.start.epoch = *(_OWORD *)&v138.start.epoch;
        v93 = v31;
        v94 = *(_OWORD *)&v137.start.value;
        *(_OWORD *)&v123.start.value = *(_OWORD *)&v137.start.value;
        *(_OWORD *)&v123.start.epoch = v31;
        v107 = v28;
        v32 = *(_QWORD *)(v28 + 32);
        time1.start.value = v104;
        time1.start.timescale = v27;
        time1.start.flags = v106;
        time1.start.epoch = v105;
        PresentationTimeAfterSampleCursorStepping = bossScanForEditSegmentContainingTrackTime(v32, (uint64_t)&time1, (_BYTE *)&v127 + 1, &v127, (uint64_t)&v137, v103, (uint64_t)&v125, (unint64_t)&v123);
        if ((_DWORD)PresentationTimeAfterSampleCursorStepping)
        {
LABEL_123:
          v6 = PresentationTimeAfterSampleCursorStepping;
          goto LABEL_100;
        }
        if (!HIBYTE(v127))
        {
          v50 = *(_QWORD *)(v107 + 48);
          time1.start.value = v104;
          time1.start.timescale = v27;
          time1.start.flags = v106;
          time1.start.epoch = v105;
          PresentationTimeAfterSampleCursorStepping = bossGetPresentationTimeAfterSampleCursorStepping(v50, &time1.start, v102, 0, &v126);
          if ((_DWORD)PresentationTimeAfterSampleCursorStepping)
            goto LABEL_123;
          v34 = v126.value;
          v35 = v126.timescale;
          v36 = v126.flags;
          v23 = v126.epoch;
          goto LABEL_112;
        }
        v34 = v90;
        v35 = v89;
        v36 = v91;
        if (!(_BYTE)v127)
          goto LABEL_112;
        *(_OWORD *)&v122.value = v101;
        v23 = v100;
        v122.epoch = v100;
        if ((v137.start.flags & 0x1D) != 1)
          break;
        type.start.value = v104;
        type.start.timescale = v27;
        type.start.flags = v106;
        type.start.epoch = v105;
        time1 = v138;
        CMTimeClampToRange(&v121, &type.start, &time1);
        time1 = v138;
        type = v137;
        CMTimeMapTimeFromRangeToRange(&v122, &v121, &time1, &type);
        v37 = *(_QWORD *)(v107 + 48);
        time1.start = v122;
        v38 = bossGetPresentationTimeAfterSampleCursorStepping(v37, &time1.start, v102, 1, &v126);
        if ((_DWORD)v38)
        {
          v6 = v38;
          if ((_DWORD)v38 != -12840)
            goto LABEL_100;
          v51 = v7;
          v131 = 0;
          *(_OWORD *)&type.start.value = v101;
          type.start.epoch = v100;
          *(_OWORD *)&time1.duration.timescale = v98;
          v133 = v97;
          v134 = v96;
          v135 = v95;
          *(_OWORD *)&time1.start.value = v94;
          *(_OWORD *)&time1.start.epoch = v93;
          CMTimeMake(&v130, value, 1000);
          lhs.value = v104;
          lhs.timescale = v27;
          lhs.flags = v106;
          lhs.epoch = v105;
          CMTimeAdd(&type.start, &lhs, &v130);
          lhs = type.start;
          v128 = v113;
          if (CMTimeCompare(&lhs, &v128) < 1)
          {
            lhs = type.start;
            v99 = *MEMORY[0x1E0CA2E68];
            *(_OWORD *)&v128.value = *MEMORY[0x1E0CA2E68];
            v52 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
            v128.epoch = v52;
            if (CMTimeCompare(&lhs, &v128) < 0)
            {
              *(_OWORD *)&type.start.value = v99;
              type.start.epoch = v52;
            }
          }
          else
          {
            type.start = v113;
          }
          v53 = *(_QWORD *)(v107 + 32);
          lhs = type.start;
          v54 = bossScanForEditSegmentContainingTrackTime(v53, (uint64_t)&lhs, (_BYTE *)&v131 + 1, &v131, (uint64_t)&time1, 0, 0, 0);
          v55 = v91 & 0x1D;
          v34 = v90;
          v35 = v89;
          v36 = v91;
          v7 = v51;
          if (!v54)
          {
            v55 = v91 & 0x1D;
            v34 = v90;
            v35 = v89;
            v36 = v91;
            if ((_BYTE)v131)
            {
              v55 = v91 & 0x1D;
              v34 = v90;
              v35 = v89;
              v36 = v91;
              if ((time1.start.flags & 0x1D) != 1)
              {
                v34 = type.start.value;
                v35 = type.start.timescale;
                v36 = type.start.flags;
                v23 = type.start.epoch;
                v55 = type.start.flags & 0x1D;
              }
            }
          }
          if (v55 != 1)
          {
            v6 = 4294954456;
            goto LABEL_100;
          }
          goto LABEL_96;
        }
        time1.start = v126;
        *(_OWORD *)&type.start.value = *(_OWORD *)&v137.start.value;
        type.start.epoch = v137.start.epoch;
        if (CMTimeCompare(&time1.start, &type.start) < 0
          || (time1 = v137,
              CMTimeRangeGetEnd(&time2, &time1),
              time1.start = v126,
              CMTimeCompare(&time1.start, &time2) > 0))
        {
          if (v78 >= 1)
          {
            v39 = v75;
            v40 = v104;
            v41 = v105;
            v42 = v106;
            v43 = v27;
            do
            {
              v44 = *(_QWORD *)(v107 + 48);
              time1.start = v122;
              v45 = bossGetPresentationTimeAfterSampleCursorStepping(v44, &time1.start, v103, 0, &v126);
              if ((_DWORD)v45)
              {
                v6 = v45;
                v7 = v85;
LABEL_100:
                if ((_DWORD)v6 != -12840)
                {
                  MEMORY[0x19402EF04](*(_QWORD *)(v77 + 64));
                  goto LABEL_6;
                }
                goto LABEL_120;
              }
              if (v102 < 0)
              {
                time1.start = v126;
                *(_OWORD *)&type.start.value = *(_OWORD *)&v137.start.value;
                type.start.epoch = v137.start.epoch;
                if (CMTimeCompare(&time1.start, &type.start) < 0)
                {
                  v43 = v138.start.timescale;
                  v42 = v138.start.flags;
                  v41 = v138.start.epoch;
                  v40 = v138.start.value - 1;
                  v48 = *(_QWORD *)(v107 + 32);
                  time1.start.value = v138.start.value - 1;
                  *(_OWORD *)&time1.start.timescale = *(_OWORD *)&v138.start.timescale;
                  if (bossScanForEditSegmentContainingTrackTime(v48, (uint64_t)&time1, (_BYTE *)&v127 + 1, &v127, (uint64_t)&v137, 0xFFFFFFFF, (uint64_t)&v125, (unint64_t)&v123))break;
                  if ((v137.start.flags & 0x1D) != 1)
                  {
                    v40 = v125.value;
                    v43 = v125.timescale;
                    v42 = v125.flags;
                    v41 = v125.epoch;
                    v137 = v123;
                    v138 = v124;
                  }
                  type.start.value = v40;
                  type.start.timescale = v43;
                  type.start.flags = v42;
                  type.start.epoch = v41;
                  time1 = v138;
                  CMTimeClampToRange(&v116, &type.start, &time1);
                  time1 = v138;
                  type = v137;
                  v49 = &v116;
                  goto LABEL_79;
                }
              }
              else
              {
                time1 = v137;
                CMTimeRangeGetEnd(&v118, &time1);
                time1.start = v126;
                if ((CMTimeCompare(&time1.start, &v118) & 0x80000000) == 0)
                {
                  time1 = v138;
                  CMTimeRangeGetEnd(&type.start, &time1);
                  v46 = *(_QWORD *)(v107 + 32);
                  time1.start.value = type.start.value;
                  *(_QWORD *)&time1.start.timescale = *(_QWORD *)&type.start.timescale;
                  time1.start.epoch = type.start.epoch;
                  if (bossScanForEditSegmentContainingTrackTime(v46, (uint64_t)&time1, (_BYTE *)&v127 + 1, &v127, (uint64_t)&v137, 1u, (uint64_t)&v125, (unint64_t)&v123))break;
                  if ((v137.start.flags & 0x1D) == 1)
                  {
                    time1.start.value = v40;
                    time1.start.timescale = v43;
                    time1.start.flags = v42;
                    time1.start.epoch = v41;
                    *(_OWORD *)&type.start.value = *(_OWORD *)&v138.start.value;
                    type.start.epoch = v138.start.epoch;
                    if (CMTimeCompare(&time1.start, &type.start) < 1)
                    {
                      v40 = v138.start.value;
                      v43 = v138.start.timescale;
                      v42 = v138.start.flags;
                      v41 = v138.start.epoch;
                    }
                    else
                    {
                      memset(&type, 0, 24);
                      time1 = v138;
                      CMTimeRangeGetEnd(&type.start, &time1);
                      v42 = type.start.flags;
                      if ((type.start.flags & 0x1D) != 1)
                        break;
                      v40 = type.start.value;
                      v43 = type.start.timescale;
                      v41 = type.start.epoch;
                    }
                  }
                  else
                  {
                    v40 = v125.value;
                    v43 = v125.timescale;
                    v42 = v125.flags;
                    v41 = v125.epoch;
                    v137 = v123;
                    v138 = v124;
                  }
                  type.start.value = v40;
                  type.start.timescale = v43;
                  type.start.flags = v42;
                  type.start.epoch = v41;
                  time1 = v138;
                  CMTimeClampToRange(&v117, &type.start, &time1);
                  time1 = v138;
                  type = v137;
                  v49 = &v117;
LABEL_79:
                  CMTimeMapTimeFromRangeToRange(&v130, v49, &time1, &type);
                  *(_OWORD *)&v122.value = *(_OWORD *)&v130.value;
                  v47 = v130.epoch;
                  goto LABEL_80;
                }
              }
              *(_OWORD *)&v122.value = *(_OWORD *)&v126.value;
              v47 = v126.epoch;
LABEL_80:
              v122.epoch = v47;
              --v39;
            }
            while (v39 > 1);
          }
          lhs = v122;
          time1 = v137;
          type = v138;
          CMTimeMapTimeFromRangeToRange(&v130, &lhs, &time1, &type);
          v34 = v130.value;
          v35 = v130.timescale;
          v36 = v130.flags;
          v23 = v130.epoch;
LABEL_110:
          v7 = v85;
          goto LABEL_112;
        }
        lhs = v126;
        time1 = v137;
        type = v138;
        CMTimeMapTimeFromRangeToRange(&v130, &lhs, &time1, &type);
        v34 = v130.value;
        v35 = v130.timescale;
        v36 = v130.flags;
        v23 = v130.epoch;
LABEL_112:
        if ((v36 & 0x1D) != 1)
          goto LABEL_120;
        if (v88 < 1)
        {
          if ((v88 & 0x80000000) == 0)
            goto LABEL_120;
          time1.start.value = v34;
          time1.start.timescale = v35;
          time1.start.flags = v36;
          time1.start.epoch = v23;
          v137.start.value = v104;
          v137.start.timescale = v27;
          v137.start.flags = v106;
          v137.start.epoch = v105;
          if ((CMTimeCompare(&time1.start, &v137.start) & 0x80000000) == 0)
            goto LABEL_120;
        }
        else
        {
          time1.start.value = v34;
          time1.start.timescale = v35;
          time1.start.flags = v36;
          time1.start.epoch = v23;
          v137.start.value = v104;
          v137.start.timescale = v27;
          v137.start.flags = v106;
          v137.start.epoch = v105;
          if (CMTimeCompare(&time1.start, &v137.start) <= 0)
            goto LABEL_120;
        }
        if ((v87 & 0x1D) != 1)
          goto LABEL_117;
        time1.start.value = v84;
        time1.start.timescale = v83;
        time1.start.flags = v87;
        time1.start.epoch = v82;
        v137.start.value = v104;
        v137.start.timescale = v27;
        v137.start.flags = v106;
        v137.start.epoch = v105;
        CMTimeSubtract(&time, &time1.start, &v137.start);
        CMTimeAbsoluteValue(&v112, &time);
        time1.start.value = v34;
        time1.start.timescale = v35;
        time1.start.flags = v36;
        time1.start.epoch = v23;
        v137.start.value = v104;
        v7 = v85;
        v137.start.timescale = v86;
        v137.start.flags = v106;
        v137.start.epoch = v105;
        v27 = v86;
        CMTimeSubtract(&v109, &time1.start, &v137.start);
        CMTimeAbsoluteValue(&v110, &v109);
        if (CMTimeCompare(&v112, &v110) >= 1)
        {
LABEL_117:
          v84 = v34;
          v83 = v35;
          v82 = v23;
          v80 = v107;
          v87 = v36;
        }
LABEL_120:
        ++v26;
        v23 = v100;
        if (v26 == v92)
          goto LABEL_126;
      }
      v34 = v90;
      v35 = v89;
      v36 = v91;
      if ((v91 & 0x1D) != 1)
      {
        CMTimeMake(&rhs, value, 1000);
        type.start.value = v104;
        type.start.timescale = v27;
        type.start.flags = v106;
        type.start.epoch = v105;
        CMTimeAdd(&time1.start, &type.start, &rhs);
        v34 = time1.start.value;
        v35 = time1.start.timescale;
        v36 = time1.start.flags;
        v23 = time1.start.epoch;
      }
LABEL_96:
      if ((v125.flags & 0x1D) == 1)
      {
        type.start.value = v34;
        type.start.timescale = v35;
        type.start.flags = v36;
        type.start.epoch = v23;
        v130 = v125;
        if (v102 < 0)
          CMTimeMaximum(&time1.start, &type.start, &v130);
        else
          CMTimeMinimum(&time1.start, &type.start, &v130);
        v34 = time1.start.value;
        v35 = time1.start.timescale;
        v36 = time1.start.flags;
        v23 = time1.start.epoch;
      }
      if (!dword_1EE2A2C50)
        goto LABEL_110;
      LODWORD(v130.value) = 0;
      LOBYTE(lhs.value) = 0;
      v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v57 = v130.value;
      if (os_log_type_enabled(v56, lhs.value))
        v58 = v57;
      else
        v58 = v57 & 0xFFFFFFFE;
      if (v58)
      {
        time1.start.value = v104;
        time1.start.timescale = v86;
        time1.start.flags = v106;
        time1.start.epoch = v105;
        Seconds = CMTimeGetSeconds(&time1.start);
        time1.start.value = v34;
        time1.start.timescale = v35;
        time1.start.flags = v36;
        time1.start.epoch = v23;
        v60 = CMTimeGetSeconds(&time1.start);
        LODWORD(type.start.value) = 136315906;
        *(CMTimeValue *)((char *)&type.start.value + 4) = (CMTimeValue)"bossGetNextTrackTimeAfterStepping";
        LOWORD(type.start.flags) = 2048;
        *(Float64 *)((char *)&type.start.flags + 2) = Seconds;
        HIWORD(type.start.epoch) = 1024;
        LODWORD(type.duration.value) = v102;
        WORD2(type.duration.value) = 2048;
        *(Float64 *)((char *)&type.duration.value + 6) = v60;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v27 = v86;
      v7 = v85;
      goto LABEL_112;
    }
    v84 = v90;
    v83 = v89;
    v82 = v23;
    v87 = v91;
LABEL_126:
    v61 = v87;
    if ((v87 & 0x1D) != 1)
    {
      v65 = v77;
      MEMORY[0x19402EF04](*(_QWORD *)(v77 + 64));
      goto LABEL_131;
    }
    v21 = v79 - v76;
    v106 = v87;
    v62 = v82;
    v63 = v83;
    v86 = v83;
    v64 = v84;
    v104 = v84;
    v105 = v82;
    v65 = v77;
  }
  while (v79 - v76 >= 1);
  MEMORY[0x19402EF04](*(_QWORD *)(v77 + 64));
  if (!v80)
  {
LABEL_131:
    CMTimeMake(&v108, 250 * v88, 1000);
    v137.start.value = v73;
    v137.start.timescale = timescale;
    v137.start.flags = v71;
    v137.start.epoch = epoch;
    CMTimeAdd(&time1.start, &v137.start, &v108);
    v64 = time1.start.value;
    v63 = time1.start.timescale;
    v61 = time1.start.flags;
    v62 = time1.start.epoch;
  }
  v66 = a3;
  if (dword_1EE2A2C50)
  {
    LODWORD(v123.start.value) = 0;
    LOBYTE(type.start.value) = 0;
    v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v68 = v123.start.value;
    if (os_log_type_enabled(v67, type.start.value))
      v69 = v68;
    else
      v69 = v68 & 0xFFFFFFFE;
    if (v69)
    {
      time1.start.value = v64;
      time1.start.timescale = v63;
      time1.start.flags = v61;
      time1.start.epoch = v62;
      v70 = CMTimeGetSeconds(&time1.start);
      LODWORD(v137.start.value) = 136315906;
      *(CMTimeValue *)((char *)&v137.start.value + 4) = (CMTimeValue)"FigPlaybackBossStepByCount";
      LOWORD(v137.start.flags) = 2048;
      *(_QWORD *)((char *)&v137.start.flags + 2) = v65;
      HIWORD(v137.start.epoch) = 2082;
      v137.duration.value = v65 + 841;
      LOWORD(v137.duration.timescale) = 2048;
      *(Float64 *)((char *)&v137.duration.timescale + 2) = v70;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v66 = a3;
  }
  time1.start.value = v64;
  time1.start.timescale = v63;
  time1.start.flags = v61;
  time1.start.epoch = v62;
  v6 = FigPlaybackBossSetTimeWithRange(v65, &time1.start, 0, MEMORY[0x1E0CA2E28], MEMORY[0x1E0CA2E30], v66, 0);
  v7 = v85;
LABEL_6:
  free(v7);
  return v6;
}

uint64_t FigPlaybackBossResetCompositionInstructions(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v5;

  if ((*(_DWORD *)(a1 + 484) & 0x1D) == 1)
    v5 = 0;
  else
    v5 = a3;
  return FigVideoCompositionProcessorResetCompositionInstruction(a2, v5, a4);
}

uint64_t FigPlaybackBossRefreshVideoComposition(uint64_t a1)
{
  uint64_t v2;
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v6;
  const void *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t restarted;
  NSObject *v15;
  uint64_t v16;
  CFDictionaryRef v17;
  CMTime v18;
  CFTypeRef cf;
  CMTime time;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!a1 || *(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 120))
  {
    v2 = FigSignalErrorAt();
    goto LABEL_4;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  v4 = *(_DWORD *)(a1 + 424);
  if (v4 <= 1886530415)
  {
    if (v4 <= 1886151032)
    {
      switch(v4)
      {
        case 1634624887:
          goto LABEL_13;
        case 1768189029:
          goto LABEL_14;
        case 1885435251:
LABEL_13:
          if (dword_1EE2A2C50)
          {
LABEL_14:
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          break;
      }
LABEL_42:
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
      v2 = 0;
      goto LABEL_4;
    }
    if (v4 == 1886151033)
      goto LABEL_27;
    if (v4 != 1886154860)
    {
      v8 = 1886155888;
LABEL_26:
      if (v4 != v8)
        goto LABEL_42;
LABEL_27:
      FigPlaybackBossGetTime(a1, &v18);
      if (dword_1EE2A2C50)
      {
        v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      time = v18;
      v12 = a1;
      v13 = 0;
      goto LABEL_40;
    }
LABEL_29:
    if ((*(_BYTE *)(a1 + 804) & 1) != 0)
      v18 = *(CMTime *)(a1 + 792);
    else
      FigPlaybackBossGetTime(a1, &v18);
    if (dword_1EE2A2C50)
    {
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    time = v18;
    v12 = a1;
    v13 = 1;
LABEL_40:
    restarted = figPlaybackBossRestartVideoMentorsFromItemTime(v12, &time, v13);
    if ((_DWORD)restarted)
    {
      v2 = restarted;
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
      goto LABEL_4;
    }
    goto LABEL_42;
  }
  if (v4 > 1919247480)
  {
    if (v4 != 1919247481)
    {
      if (v4 == 1920298606)
        goto LABEL_14;
      v8 = 2003853684;
      goto LABEL_26;
    }
    v7 = 0;
    v6 = 1;
  }
  else
  {
    if (v4 == 1886530416 || v4 == 1886544244)
      goto LABEL_29;
    if (v4 != 1886545266)
      goto LABEL_42;
    v6 = 0;
    v7 = *(const void **)(a1 + 496);
    cf = v7;
    *(_QWORD *)(a1 + 496) = 0;
  }
  FigPlaybackBossGetTime(a1, &v18);
  if (dword_1EE2A2C50)
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bossBumpCurrentMasterOrder(a1);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v16 = *(_QWORD *)(a1 + 80);
  time = v18;
  v2 = bossSetMentorModesToScrub(a1, 0, v16, &time, 0, 0);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  *(_DWORD *)(a1 + 424) = 1885435251;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  if ((v6 & 1) == 0)
  {
    v17 = v7
        ? CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackBossParameter_PrerollToken, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]): 0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v17)
      CFRelease(v17);
  }
LABEL_4:
  if (cf)
    CFRelease(cf);
  return v2;
}

const char *getStateName(int a1)
{
  const char *v1;
  int v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  const char *v10;
  int v11;
  BOOL v12;
  const char *v13;
  const char *v14;
  const char *v15;

  v1 = "unknown";
  if (a1 <= 1886155887)
  {
    v2 = 1885435250;
    v7 = "Paused";
    v14 = "PlayingAndPrerollingWillPlay";
    if (a1 != 1886154860)
      v14 = "unknown";
    if (a1 == 1886151033)
      v15 = "Playing";
    else
      v15 = v14;
    if (a1 != 1885435251)
      v7 = v15;
    v8 = 1634624887;
    v9 = "NotYetUsed";
    v10 = "Invalidated";
    v11 = 1684365668;
    v12 = a1 == 1768189029;
    v13 = "IdleNonRealTime";
  }
  else
  {
    v2 = 1886545265;
    v3 = "PrerolledWillPlayAtTransition";
    if (a1 != 2003853684)
      v3 = "unknown";
    if (a1 == 1920298606)
      v4 = "PlayingNonRealTime";
    else
      v4 = v3;
    v5 = "PausedButPrerolled";
    if (a1 != 1919247481)
      v5 = "unknown";
    if (a1 == 1886545266)
      v6 = "PrerollingWillPause";
    else
      v6 = v5;
    if (a1 <= 1920298605)
      v7 = v6;
    else
      v7 = v4;
    v8 = 1886155888;
    v9 = "PlayingAfterTransitionStillPrerolling";
    v10 = "PrerollingWillPlay";
    v11 = 1886530416;
    v12 = a1 == 1886544244;
    v13 = "PrerollingWillPlayAtTransition";
  }
  if (v12)
    v1 = v13;
  if (a1 == v11)
    v1 = v10;
  if (a1 == v8)
    v1 = v9;
  if (a1 <= v2)
    return v1;
  else
    return v7;
}

uint64_t figPlaybackBossRestartVideoMentorsFromItemTime(uint64_t a1, CMTime *a2, int a3)
{
  int v4;
  float v5;
  float v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  CFIndex v9;
  _DWORD *ValueAtIndex;
  uint64_t v11;
  int v12;
  char v13;
  __CFDictionary *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  int v19;
  __int128 v22;
  uint64_t v23;
  CMTime time;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a3)
    v4 = 2;
  else
    v4 = 3;
  v19 = v4;
  v5 = *(float *)(a1 + 432);
  if (v5 <= 0.0)
    v6 = -v5;
  else
    v6 = *(float *)(a1 + 432);
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v9 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v9);
      if (ValueAtIndex[18] == 1986618469)
      {
        v11 = (uint64_t)ValueAtIndex;
        bossBumpTrackCurrentOrder(ValueAtIndex);
        if (a3)
          *(_WORD *)(v11 + 213) = 1;
        if (*(_QWORD *)(v11 + 192))
        {
          if (v5 < 0.0)
            v12 = 0;
          else
            v12 = *(unsigned __int8 *)(v11 + 248);
          v13 = bossTrackShouldRemoveExcessFramesInRefreshIntervals(a1, v11, v6);
          v14 = bossCopyOptionsDictionaryForMentors(a1, v19, *(const void **)(v11 + 216), *(const void **)(v11 + 224), *(const void **)(v11 + 232), *(const void **)(v11 + 240), v12, 0, v6, a3 != 0, v5 >= 0.0, 1, *(_DWORD *)(v11 + 344), *(_BYTE *)(v11 + 399), 0, v13);
          v15 = bossCopyRenderPipelineCachedVideoFrames(a1, *(_QWORD *)(v11 + 80));
          v16 = *(_QWORD *)(v11 + 192);
          v17 = *(const void **)(v11 + 200);
          if (v5 >= 0.0)
          {
            time = *a2;
            v22 = *(_OWORD *)(a1 + 168);
            v23 = *(_QWORD *)(a1 + 184);
            EditMentorSetModeToForwardPlayback(v16, (uint64_t)&time, (uint64_t)&v22, v14, v15, 0, v17);
          }
          time = *a2;
          v22 = *(_OWORD *)(a1 + 288);
          v23 = *(_QWORD *)(a1 + 304);
          EditMentorSetModeToReversePlayback(v16, (uint64_t)&time, (uint64_t)&v22, v14, v15, 0, v17);
        }
      }
      ++v9;
    }
    while (*(_QWORD *)(a1 + 80) > v9);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return 0;
}

uint64_t FigPlaybackBossSendSampleForTime(uint64_t a1, CMTime *a2, char a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  int v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  CMTime time;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1 && !*(_BYTE *)(a1 + 16) && *(_BYTE *)(a1 + 120))
  {
    *(_BYTE *)(a1 + 428) = (a3 & 2) != 0;
    *(_BYTE *)(a1 + 429) = (a3 & 4) != 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
    v9 = *(_DWORD *)(a1 + 424);
    if (v9 > 1768189028)
    {
      if (v9 == 1768189029)
        goto LABEL_15;
      v10 = 1920298606;
    }
    else
    {
      if (v9 == 1634624887)
        goto LABEL_15;
      v10 = 1684365668;
    }
    if (v9 != v10)
    {
      v7 = FigSignalErrorAt();
LABEL_19:
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
      return v7;
    }
LABEL_15:
    *(_DWORD *)(a1 + 424) = 1920298606;
    bossBumpCurrentMasterOrder(a1);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
    if (*(_BYTE *)(a1 + 840))
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v12 = *(_QWORD *)(a1 + 80);
    time = *a2;
    v7 = bossSetMentorModesToScrub(a1, 0, v12, &time, 1, 0);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    goto LABEL_19;
  }
  return FigSignalErrorAt();
}

uint64_t FigPlaybackBossSendSamplesForTimeRange(uint64_t a1, CMTime *a2, uint64_t a3, char a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  int v11;
  int v12;
  NSObject *v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  CMTime v20;
  CMTime time;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1 && !*(_BYTE *)(a1 + 16) && *(_BYTE *)(a1 + 120))
  {
    *(_BYTE *)(a1 + 428) = (a4 & 2) != 0;
    *(_BYTE *)(a1 + 429) = (a4 & 4) != 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
    v11 = *(_DWORD *)(a1 + 424);
    if (v11 > 1768189028)
    {
      if (v11 == 1768189029)
        goto LABEL_15;
      v12 = 1920298606;
    }
    else
    {
      if (v11 == 1634624887)
        goto LABEL_15;
      v12 = 1684365668;
    }
    if (v11 != v12)
    {
      v9 = FigSignalErrorAt();
LABEL_24:
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
      return v9;
    }
LABEL_15:
    *(_DWORD *)(a1 + 424) = 1920298606;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
    if (*(_BYTE *)(a1 + 840))
    {
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    bossSetMentorPropertiesForRate(a1, 0, 1.0);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    v14 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a1 + 256) = a2->epoch;
    *(_OWORD *)(a1 + 240) = v14;
    v15 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 280) = v15;
    v16 = a4 & 1;
    if ((a4 & 8) != 0)
      v17 = 2;
    else
      v17 = 1;
    bossBumpCurrentMasterOrder(a1);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
    if (*(_BYTE *)(a1 + 840))
    {
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v19 = *(_QWORD *)(a1 + 80);
    time = *a2;
    v20 = *(CMTime *)a3;
    v9 = bossSetMentorModesToForwardPlayback(a1, 0, v19, &time, &v20, 0, 0, v17, 1.0, 1.0, v16, 0, 0);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    goto LABEL_24;
  }
  return FigSignalErrorAt();
}

__n128 FigPlaybackBossGetScheduledEndTime@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  a2[1].n128_u64[0] = *(_QWORD *)(a1 + 328);
  result = *(__n128 *)(a1 + 312);
  *a2 = result;
  return result;
}

uint64_t FigPlaybackBossDidReachEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t FigPlaybackBossGetStopAtEnd(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
    else
      return *(unsigned __int8 *)(result + 129);
  }
  return result;
}

uint64_t FigPlaybackBossSetAudibleRateRange(uint64_t a1, char a2, char a3, float a4, float a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  result = 0;
  *(_BYTE *)(a1 + 392) = a2;
  *(float *)(a1 + 396) = a4;
  *(_BYTE *)(a1 + 393) = a3;
  *(float *)(a1 + 400) = a5;
  return result;
}

uint64_t FigPlaybackBossGetAudibleRateRange(uint64_t a1, _BYTE *a2, _DWORD *a3, _BYTE *a4, _DWORD *a5)
{
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (a2)
    *a2 = *(_BYTE *)(a1 + 392);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 396);
  if (a4)
    *a4 = *(_BYTE *)(a1 + 393);
  if (a5)
    *a5 = *(_DWORD *)(a1 + 400);
  return 0;
}

uint64_t FigPlaybackBossSetRateSnapping(uint64_t a1, char a2, float a3, float a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  result = 0;
  *(_BYTE *)(a1 + 404) = a2;
  *(float *)(a1 + 408) = a3;
  *(float *)(a1 + 412) = a4;
  return result;
}

uint64_t FigPlaybackBossGetRateSnapping(uint64_t a1, _BYTE *a2, _DWORD *a3, _DWORD *a4)
{
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (a2)
    *a2 = *(_BYTE *)(a1 + 404);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 408);
  if (a4)
    *a4 = *(_DWORD *)(a1 + 412);
  return 0;
}

uint64_t FigPlaybackBossSetContinuePlayingDuringPrerollForSeek(uint64_t a1, char a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  result = 0;
  *(_BYTE *)(a1 + 130) = a2;
  return result;
}

uint64_t FigPlaybackBossGetContinuePlayingDuringPrerollForSeek(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
    else
      return *(unsigned __int8 *)(result + 130);
  }
  return result;
}

uint64_t FigPlaybackBossSetContinuePlayingDuringPrerollForRateChange(uint64_t a1, char a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  result = 0;
  *(_BYTE *)(a1 + 131) = a2;
  return result;
}

uint64_t FigPlaybackBossGetContinuePlayingDuringPrerollForRateChange(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
    else
      return *(unsigned __int8 *)(result + 131);
  }
  return result;
}

uint64_t FigPlaybackBossSetIFrameOnlySpeedThreshold(uint64_t a1, float a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  result = 0;
  *(_BYTE *)(a1 + 135) = 1;
  *(float *)(a1 + 136) = a2;
  *(_DWORD *)(a1 + 504) = 0;
  return result;
}

float FigPlaybackBossGetIFrameOnlySpeedThreshold(uint64_t a1)
{
  float result;

  result = 0.0;
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 16))
      return *(float *)(a1 + 136);
  }
  return result;
}

uint64_t FigPlaybackBossSetReversalLimits(uint64_t a1, int a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  *(_DWORD *)(a1 + 144) = a2;
  *(_DWORD *)(a1 + 148) = a3;
  result = 0;
  if (*(float *)(a1 + 504) < 0.0)
    *(_DWORD *)(a1 + 504) = 0;
  return result;
}

uint64_t FigPlaybackBossGetReversalLimits(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (a2)
    *a2 = *(_DWORD *)(a1 + 144);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 148);
  return 0;
}

uint64_t FigPlaybackBossSetScrubPolicy(uint64_t a1, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  result = 0;
  *(_DWORD *)(a1 + 152) = a2;
  return result;
}

uint64_t FigPlaybackBossGetScrubPolicy(uint64_t a1, _DWORD *a2)
{
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (a2)
    *a2 = *(_DWORD *)(a1 + 152);
  return 0;
}

uint64_t FigPlaybackBossSetUseIFrameOnlyPlaybackForHighRateScaledEdits(uint64_t a1, char a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  result = 0;
  *(_BYTE *)(a1 + 132) = a2;
  return result;
}

uint64_t FigPlaybackBossGetUseIFrameOnlyPlaybackForHighRateScaledEdits(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
    else
      return *(unsigned __int8 *)(result + 132);
  }
  return result;
}

uint64_t FigPlaybackBossSetMinimumIntervalForIFrameOnlyPlayback(uint64_t a1, __int128 *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v6;
  char *ValueAtIndex;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v6 = 0;
    do
    {
      ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
      v8 = *a2;
      *(_QWORD *)(ValueAtIndex + 364) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(ValueAtIndex + 348) = v8;
      ++v6;
    }
    while (*(_QWORD *)(a1 + 80) > v6);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return 0;
}

uint64_t FigPlaybackBossSetTrackEnableForStepping(uint64_t a1, int a2, char a3)
{
  CFIndex v7;
  _BYTE *ValueAtIndex;

  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v7 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7);
      if (*((_DWORD *)ValueAtIndex + 6) == a2)
        ValueAtIndex[89] = a3;
      ++v7;
    }
    while (*(_QWORD *)(a1 + 80) > v7);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return 0;
}

uint64_t FigPlaybackBossSetThoroughlyRefreshClosedCaptionsWhenSeeking(uint64_t a1, char a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  result = 0;
  *(_BYTE *)(a1 + 133) = a2;
  return result;
}

uint64_t FigPlaybackBossGetThoroughlyRefreshClosedCaptionsWhenSeeking(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
    else
      return *(unsigned __int8 *)(result + 133);
  }
  return result;
}

uint64_t FigPlaybackBossCopyTrackPerformanceDictionary(uint64_t a1, int a2, const __CFAllocator *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v8;
  _DWORD *ValueAtIndex;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, _QWORD, os_log_type_t *);
  const __CFAllocator *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, CFTypeRef *);
  int v22;
  int v23;
  CFTypeRef v24;
  uint64_t (*v25)(CFTypeRef, uint64_t, uint64_t *);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, const __CFString *, const __CFAllocator *, char *);
  uint64_t v33;
  uint64_t v34;
  const void **v35;
  const void *v36;
  uint64_t v37;
  os_log_type_t type[8];
  CFTypeRef cf;
  int valuePtr;
  _OWORD v41[10];
  void *values[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *keys[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  memset(v41, 0, sizeof(v41));
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v8 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v8);
      if (ValueAtIndex[6] == a2)
        break;
      if (*(_QWORD *)(a1 + 80) <= ++v8)
        goto LABEL_10;
    }
    v11 = ValueAtIndex;
    CFRetain(ValueAtIndex);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    v12 = *(unsigned __int8 *)(a1 + 123);
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    *(_OWORD *)keys = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    *(_OWORD *)values = 0u;
    v43 = 0u;
    if (!v12)
    {
      *(_QWORD *)&v41[0] = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      goto LABEL_36;
    }
    keys[0] = CFSTR("NumberOfSamplesInTrack");
    valuePtr = 0;
    *(_QWORD *)type = 0;
    cf = 0;
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 40));
    v14 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v14)
    {
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v16 = v14(FigBaseObject, CFSTR("Identifier"), *MEMORY[0x1E0C9AE00], type);
      if (v16)
        goto LABEL_59;
      if (FigCFEqual() || FigCFEqual())
      {
        v17 = v11[4];
        if (v17)
        {
          v18 = FigTrackReaderGetFigBaseObject(v17);
          v19 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v19)
          {
            if (!v19(v18, CFSTR("UneditedSampleCount"), v15, values))
            {
LABEL_57:
              v22 = 0;
              goto LABEL_31;
            }
          }
        }
        v20 = v11[6];
        v21 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v21)
        {
          v22 = v21(v20, &cf);
          if (v22)
            goto LABEL_31;
          valuePtr = 0;
          v23 = 1;
          while (1)
          {
            v37 = 0;
            v24 = cf;
            v25 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 168);
            if (!v25)
            {
              if (v37 == 1)
                valuePtr = v23;
LABEL_29:
              CFRelease(cf);
              goto LABEL_30;
            }
            v26 = v25(v24, 1, &v37);
            v22 = v26;
            if (v37 != 1)
              break;
            valuePtr = v23++;
            if (v26)
              goto LABEL_29;
          }
          CFRelease(cf);
          if (v22)
            goto LABEL_31;
          values[0] = CFNumberCreate(v15, kCFNumberSInt32Type, &valuePtr);
          if (values[0])
            goto LABEL_57;
          v16 = FigSignalErrorAt();
LABEL_59:
          v22 = v16;
          goto LABEL_31;
        }
      }
    }
LABEL_30:
    v22 = -12783;
LABEL_31:
    if (*(_QWORD *)type)
      CFRelease(*(CFTypeRef *)type);
    *(_QWORD *)&v41[0] = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, v22 == 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v22 && values[0])
      CFRelease(values[0]);
LABEL_36:
    v28 = v11[15];
    if (v28)
    {
      if (VideoMentorCopyPerformanceDictionary(v28, (CFMutableDictionaryRef *)v41 + 1))
        v29 = 1;
      else
        v29 = 2;
    }
    else
    {
      v29 = 1;
    }
    v30 = v11[5];
    if (v30)
    {
      v31 = FigSampleGeneratorGetFigBaseObject(v30, v27);
      v32 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v32)
      {
        if (!v32(v31, CFSTR("SampleGeneratorPerformanceDictionary"), a3, (char *)v41 + 8 * v29))
          ++v29;
      }
    }
    v33 = 0;
    v34 = 0;
    do
      v33 += CFDictionaryGetCount(*((CFDictionaryRef *)v41 + v34++));
    while (v29 != v34);
    if (v33 < 1)
    {
      v10 = 0;
      if (!v11)
      {
LABEL_50:
        v35 = (const void **)v41;
        do
        {
          v36 = *v35++;
          CFRelease(v36);
          --v29;
        }
        while (v29);
        return v10;
      }
    }
    else
    {
      v10 = FigCFCreateCombinedDictionary();
      if (!v11)
        goto LABEL_50;
    }
    CFRelease(v11);
    goto LABEL_50;
  }
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return FigSignalErrorAt();
}

uint64_t FigPlaybackBossCopyPerformanceDictionary(uint64_t a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  OpaqueCMClock *HostTimeClock;
  OpaqueCMTimebase *v7;
  CMTime v9;
  CMTime v10;
  CMTime rhs;
  CMTime lhs;
  CMTime time;

  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    FigCFDictionarySetDouble();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    if ((*(_BYTE *)(a1 + 668) & 1) != 0)
    {
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&lhs, HostTimeClock);
      rhs = *(CMTime *)(a1 + 656);
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeGetSeconds(&time);
    }
    FigCFDictionarySetDouble();
    if ((*(_BYTE *)(a1 + 700) & 1) != 0)
    {
      v7 = *(OpaqueCMTimebase **)(a1 + 112);
      if (v7)
      {
        CMTimebaseGetTime(&v9, v7);
        rhs = *(CMTime *)(a1 + 688);
        CMTimeSubtract(&v10, &v9, &rhs);
        CMTimeGetSeconds(&v10);
      }
    }
    FigCFDictionarySetDouble();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    if ((*(_BYTE *)(a1 + 740) & 1) != 0)
    {
      rhs = *(CMTime *)(a1 + 728);
      CMTimeGetSeconds(&rhs);
      FigCFDictionarySetDouble();
    }
  }
  *a3 = Mutable;
  return 0;
}

uint64_t FigPlaybackBossSetClientPID(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v6;
  _QWORD *ValueAtIndex;
  uint64_t v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, uint64_t);
  _BYTE *v11;
  _BYTE *v12;

  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v6 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
      v8 = ValueAtIndex[10];
      if (v8)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
        v10 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v10)
          v10(FigBaseObject, CFSTR("ClientPID"), a2);
      }
      v11 = (_BYTE *)ValueAtIndex[15];
      if (v11)
        VideoMentorSetClientPID(v11);
      v12 = (_BYTE *)ValueAtIndex[13];
      if (v12)
        AudioMentorSetClientPID(v12);
      ++v6;
    }
    while (*(_QWORD *)(a1 + 80) > v6);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return 0;
}

uint64_t FigPlaybackBossSetThrottleForBackground(uint64_t a1, char a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 127) = a2;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bossApplyThrottleForBackground(a1);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return 0;
}

BOOL FigPlaybackBossIsInPlayingState(uint64_t a1)
{
  return *(_DWORD *)(a1 + 424) == 1886151033;
}

BOOL FigPlaybackBossIsInPausedState(uint64_t a1)
{
  return *(_DWORD *)(a1 + 424) == 1885435251;
}

uint64_t bossReadModelSpecificPlaybackTuning()
{
  uint64_t result;

  FigGetAllocatorForPermanentAllocations();
  result = FigCreateModelSpecificPropertyList();
  sModelSpecificPlaybackTuning = result;
  return result;
}

void figPlaybackBoss_MentorPrerollComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v7;
  uint64_t v8;
  const void *Value;
  const void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  const __CFArray *v13;
  CFArrayRef Copy;
  CFIndex v15;
  _BYTE *ValueAtIndex;
  CFIndex i;
  uint64_t v18;
  void (*v19)(uint64_t);

  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = v7;
    if (!*(_BYTE *)(v7 + 16))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 24));
      if (a5)
      {
        Value = CFDictionaryGetValue(a5, CFSTR("MentorPrerollComplete_Order"));
        FigCFDictionaryGetInt32IfPresent();
      }
      else
      {
        Value = 0;
      }
      if (!*(_BYTE *)(v8 + 16) && *(const void **)(a2 + 200) == Value && *(_BYTE *)(a2 + 213))
      {
        v10 = *(const void **)(v8 + 536);
        if (v10)
          CFRetain(*(CFTypeRef *)(v8 + 536));
        *(_BYTE *)(a2 + 213) = 0;
        MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 64));
        if (*(_BYTE *)(v8 + 840))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v12 = *(_QWORD *)(v8 + 80);
        if (v12 < 1)
        {
          MEMORY[0x19402EF04](*(_QWORD *)(v8 + 64));
          Copy = 0;
        }
        else
        {
          v13 = *(const __CFArray **)(v8 + 72);
          if (v13)
            Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13);
          else
            Copy = 0;
          MEMORY[0x19402EF04](*(_QWORD *)(v8 + 64));
          if (*((_BYTE *)CFArrayGetValueAtIndex(Copy, 0) + 213))
          {
LABEL_33:
            if (v10)
              CFRelease(v10);
            MEMORY[0x19402EF04](*(_QWORD *)(v8 + 24));
            if (Copy)
              CFRelease(Copy);
            goto LABEL_9;
          }
          v15 = 1;
          while (v12 != v15)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(Copy, v15++);
            if (ValueAtIndex[213])
            {
              if (v15 - 1 < v12)
                goto LABEL_33;
              break;
            }
          }
          for (i = 0; i != v12; ++i)
          {
            v18 = *((_QWORD *)CFArrayGetValueAtIndex(Copy, i) + 5);
            if (v18)
            {
              v19 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (v19)
                v19(v18);
            }
          }
        }
        if (!*(_BYTE *)(v8 + 16))
        {
          *(_BYTE *)(v8 + 601) = 0;
          figPlaybackBoss_waitForCompletionOfPhase1AndStartPhase2(v8);
        }
        goto LABEL_33;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 24));
    }
LABEL_9:
    CFRelease((CFTypeRef)v8);
  }
}

void figPlaybackBoss_waitForCompletionOfPhase1AndStartPhase2(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v3;
  uint64_t v4;
  OpaqueCMTimebase *v5;
  NSObject *v6;
  CFIndex v7;
  int v8;
  _BYTE *ValueAtIndex;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t);
  CMTime time;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 16))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
    if (*(_BYTE *)(a1 + 840))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!FigCFEqual() || *(_BYTE *)(a1 + 600))
    {
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
LABEL_7:
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
      return;
    }
    v3 = *(unsigned __int8 *)(a1 + 601);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    if (v3)
      goto LABEL_7;
    if (*(_DWORD *)(a1 + 424) == 1886154860)
    {
      v4 = MEMORY[0x1E0CA2E18];
      bossStopTimebaseAndAudioContext(a1, 0, MEMORY[0x1E0CA2E18]);
      ++*(_DWORD *)(a1 + 720);
      if ((*(_DWORD *)(a1 + 456) & 0x1D) == 1)
      {
        v5 = *(OpaqueCMTimebase **)(a1 + 112);
        time = *(CMTime *)(a1 + 444);
        CMTimebaseSetTime(v5, &time);
        *(_OWORD *)(a1 + 444) = *(_OWORD *)v4;
        *(_QWORD *)(a1 + 460) = *(_QWORD *)(v4 + 16);
      }
      bossReplaceMainQueuesWithSideQueuesAndSwitchMentorsToMainQueues(a1);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
    if (!*(_BYTE *)(a1 + 16))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
      if (*(_BYTE *)(a1 + 840))
      {
        v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (FigCFEqual() && *(uint64_t *)(a1 + 80) >= 1)
      {
        v7 = 0;
        v8 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7);
          v10 = ValueAtIndex;
          ValueAtIndex[214] = 1;
          v11 = *((_QWORD *)ValueAtIndex + 10);
          if (v11
            && (v12 = *((_QWORD *)ValueAtIndex + 25),
                (v13 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56)) != 0)
            && !v13(v11, v12))
          {
            v8 = 1;
          }
          else
          {
            v10[214] = 0;
          }
          ++v7;
        }
        while (*(_QWORD *)(a1 + 80) > v7);
      }
      else
      {
        v8 = 0;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
      if (!v8)
        figPlaybackBossPrerollCompleted(a1, 0);
    }
  }
}

uint64_t bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS(uint64_t a1)
{
  float v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  CMTimeEpoch epoch;
  int64_t v11;
  NSObject *v12;
  unsigned int value;
  unsigned int v14;
  Float64 Seconds;
  Float64 v16;
  int64_t v17;
  NSObject *v18;
  unsigned int v19;
  unsigned int v20;
  Float64 v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  Float64 v28;
  uint64_t v30;
  CMTime v31;
  CMTime v32;
  CMTime rhs;
  CMTime type;
  CMTime time2;
  CFDictionaryRef dictionaryRepresentation;
  CMTime v37;
  CMTime time1;
  uint64_t v39;
  __int16 v40;
  Float64 v41;
  __int16 v42;
  Float64 v43;
  CMTime lhs;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  memset(&v37, 0, sizeof(v37));
  v2 = *(float *)(a1 + 432);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    LODWORD(time2.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) <= 0)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    goto LABEL_31;
  }
  v4 = 0;
  v5 = 0;
  v6 = *MEMORY[0x1E0C9AE00];
  do
  {
    v7 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v4) + 10);
    if (v7)
    {
      dictionaryRepresentation = 0;
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
      v9 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
      if (v9)
        v9(FigBaseObject, CFSTR("EndPresentationTimeForQueuedSamples"), v6, &dictionaryRepresentation);
      if (dictionaryRepresentation)
      {
        memset(&lhs, 0, sizeof(lhs));
        CMTimeMakeFromDictionary(&lhs, dictionaryRepresentation);
        if ((lhs.flags & 0x1D) != 1)
        {
LABEL_17:
          CFRelease(dictionaryRepresentation);
          goto LABEL_18;
        }
        if (v5)
        {
          if (v2 >= 0.0)
          {
            time1 = v37;
            time2 = lhs;
            CMTimeMaximum(&v37, &time1, &time2);
LABEL_16:
            v5 = 1;
            goto LABEL_17;
          }
          time2 = v37;
          type = lhs;
          CMTimeMinimum(&time1, &time2, &type);
          *(_OWORD *)&v37.value = *(_OWORD *)&time1.value;
          epoch = time1.epoch;
        }
        else
        {
          *(_OWORD *)&v37.value = *(_OWORD *)&lhs.value;
          epoch = lhs.epoch;
        }
        v37.epoch = epoch;
        goto LABEL_16;
      }
    }
LABEL_18:
    ++v4;
  }
  while (*(_QWORD *)(a1 + 80) > v4);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  if (v5)
  {
    if (bossShouldExtendEndTime(a1))
    {
      memset(&time2, 0, sizeof(time2));
      if (v2 < 0.0)
        v11 = -10;
      else
        v11 = 10;
      CMTimeMake(&rhs, v11, 1);
      lhs = v37;
      CMTimeAdd(&time2, &lhs, &rhs);
      if (dword_1EE2A2C50)
      {
        LODWORD(type.value) = 0;
        LOBYTE(dictionaryRepresentation) = 0;
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = type.value;
        if (os_log_type_enabled(v12, (os_log_type_t)dictionaryRepresentation))
          v14 = value;
        else
          v14 = value & 0xFFFFFFFE;
        if (v14)
        {
          lhs = v37;
          Seconds = CMTimeGetSeconds(&lhs);
          lhs = time2;
          v16 = CMTimeGetSeconds(&lhs);
          LODWORD(time1.value) = 136316162;
          *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS";
          LOWORD(time1.flags) = 2048;
          *(_QWORD *)((char *)&time1.flags + 2) = a1;
          HIWORD(time1.epoch) = 2082;
          v39 = a1 + 841;
          v40 = 2048;
          v41 = Seconds;
          v42 = 2048;
          v43 = v16;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v37 = time2;
    }
    if (dword_1EE2A2C50)
    {
      LODWORD(time2.value) = 0;
      LOBYTE(type.value) = 0;
      v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v26 = time2.value;
      if (os_log_type_enabled(v25, type.value))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if (v27)
      {
        lhs = v37;
        v28 = CMTimeGetSeconds(&lhs);
        LODWORD(time1.value) = 136315906;
        *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS";
        LOWORD(time1.flags) = 2048;
        *(_QWORD *)((char *)&time1.flags + 2) = a1;
        HIWORD(time1.epoch) = 2082;
        v39 = a1 + 841;
        v40 = 2048;
        v41 = v28;
LABEL_55:
        _os_log_send_and_compose_impl();
      }
      goto LABEL_56;
    }
    goto LABEL_57;
  }
LABEL_31:
  if (bossShouldExtendEndTime(a1))
  {
    CMTimebaseGetTime(&v32, *(CMTimebaseRef *)(a1 + 112));
    if (v2 < 0.0)
      v17 = -10;
    else
      v17 = 10;
    CMTimeMake(&v31, v17, 1);
    CMTimeAdd(&lhs, &v32, &v31);
    v37 = lhs;
    if (dword_1EE2A2C50)
    {
      LODWORD(time2.value) = 0;
      LOBYTE(type.value) = 0;
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v19 = time2.value;
      if (os_log_type_enabled(v18, type.value))
        v20 = v19;
      else
        v20 = v19 & 0xFFFFFFFE;
      if (v20)
      {
        lhs = v37;
        v21 = CMTimeGetSeconds(&lhs);
        LODWORD(time1.value) = 136315906;
        *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS";
        LOWORD(time1.flags) = 2048;
        *(_QWORD *)((char *)&time1.flags + 2) = a1;
        HIWORD(time1.epoch) = 2082;
        v39 = a1 + 841;
        v40 = 2048;
        v41 = v21;
        goto LABEL_55;
      }
LABEL_56:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_57:
    lhs = v37;
    return bossScheduleReachedEndCallbackForTime(a1, &lhs);
  }
  else
  {
    if (dword_1EE2A2C50)
    {
      LODWORD(time2.value) = 0;
      LOBYTE(type.value) = 0;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v23 = time2.value;
      if (os_log_type_enabled(v22, type.value))
        v24 = v23;
      else
        v24 = v23 & 0xFFFFFFFE;
      if (v24)
      {
        LODWORD(time1.value) = 136315650;
        *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS";
        LOWORD(time1.flags) = 2048;
        *(_QWORD *)((char *)&time1.flags + 2) = a1;
        HIWORD(time1.epoch) = 2082;
        v39 = a1 + 841;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v30 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a1 + 312) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(v30 + 16);
    return CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 160));
  }
}

BOOL bossShouldExtendEndTime(uint64_t a1)
{
  const __CFNumber *v1;
  _BOOL8 v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int valuePtr;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  v1 = *(const __CFNumber **)(a1 + 552);
  if (!v1)
    return 0;
  CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
  v2 = valuePtr == -12935 || valuePtr == -1001;
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v2;
}

void figPlaybackBossReachedEndWithContext(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  void *v4;
  CMTime time;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 16))
  {
    os_retain(*(void **)(a1 + 784));
    voucher_adopt();
    *(_BYTE *)(a1 + 128) = 1;
    if (*(_BYTE *)(a1 + 129))
    {
      if (dword_1EE2A2C50)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      time = *(CMTime *)(a1 + 312);
      figPlaybackBossSetRateToZero(a1, 2, &time);
      v3 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(a1 + 312) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(v3 + 16);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    v4 = (void *)voucher_adopt();
    os_release(v4);
  }
}

void figPlaybackBoss_bufferConsumedByRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  CFTypeID v9;
  int v10;

  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    v7 = v6;
    if (*(_BYTE *)(v6 + 16))
    {
LABEL_3:
      CFRelease((CFTypeRef)v7);
      return;
    }
    if (*(_QWORD *)(v6 + 592))
    {
      v8 = *(_BYTE *)(v6 + 468) == 0;
      if (!a5)
        goto LABEL_3;
    }
    else
    {
      v8 = 1;
      if (!a5)
        goto LABEL_3;
    }
    if (v8)
    {
      v9 = CFGetTypeID(a5);
      if (v9 == CFDictionaryGetTypeID())
      {
        if (CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("BossScrubOrder")))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 576));
          if (FigCFEqual() && (v10 = *(_DWORD *)(v7 + 776)) != 0)
          {
            *(_BYTE *)(v7 + 780) = 0;
            *(_DWORD *)(v7 + 776) = 0;
            MEMORY[0x19402EF04](*(_QWORD *)(v7 + 576));
            figPlaybackBossPostSeekDidComplete(v7, v10, 0);
          }
          else
          {
            MEMORY[0x19402EF04](*(_QWORD *)(v7 + 576));
          }
        }
      }
    }
    goto LABEL_3;
  }
}

void figPlaybackBoss_renderPipelineCompletedDecodeForPreroll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *Value)
{
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v11;
  _QWORD *v12;
  CFTypeRef v13;

  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = v7;
    MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 24));
    if (Value)
      Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("RequestID"));
    MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 576));
    if (!*(_BYTE *)(v8 + 16) && *(const __CFDictionary **)(a2 + 200) == Value && *(_BYTE *)(a2 + 214))
    {
      v9 = *(const void **)(v8 + 536);
      if (v9)
        CFRetain(*(CFTypeRef *)(v8 + 536));
      *(_BYTE *)(a2 + 214) = 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 64));
      if (*(_BYTE *)(v8 + 840))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(uint64_t *)(v8 + 80) < 1)
      {
LABEL_17:
        MEMORY[0x19402EF04](*(_QWORD *)(v8 + 64));
        v12 = malloc_type_calloc(1uLL, 0x10uLL, 0xE0040E685C293uLL);
        *v12 = CFRetain((CFTypeRef)v8);
        if (v9)
          v13 = CFRetain(v9);
        else
          v13 = 0;
        v12[1] = v13;
        dispatch_async_f(*(dispatch_queue_t *)(v8 + 32), v12, (dispatch_function_t)figPlaybackBoss_allRenderPipelinesCompletedDecodeForPreroll_f);
      }
      else
      {
        v11 = 0;
        while (!*((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 72), v11) + 214))
        {
          if (*(_QWORD *)(v8 + 80) <= ++v11)
            goto LABEL_17;
        }
        MEMORY[0x19402EF04](*(_QWORD *)(v8 + 64));
      }
      if (v9)
        CFRelease(v9);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v8 + 576));
    MEMORY[0x19402EF04](*(_QWORD *)(v8 + 24));
    CFRelease((CFTypeRef)v8);
  }
}

void figPlaybackBoss_renderPipelinePrerollLost()
{
  uint64_t v0;
  uint64_t v1;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = v0;
    MEMORY[0x19402EEEC](*(_QWORD *)(v0 + 24));
    MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 576));
    if (!*(_BYTE *)(v1 + 16))
      *(_BYTE *)(v1 + 106) = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(v1 + 576));
    MEMORY[0x19402EF04](*(_QWORD *)(v1 + 24));
    CFRelease((CFTypeRef)v1);
  }
}

void figPlaybackBoss_renderPipelineLostDecoderState()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const void *v11;
  CMTime v12;
  os_log_type_t v13;
  os_log_type_t type[4];
  int v15;
  CMTime v16;
  CMTime v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = v0;
    if (*(_BYTE *)(v0 + 120))
    {
      CFRelease((CFTypeRef)v0);
      return;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v0 + 24));
    MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 64));
    if (*(_BYTE *)(v1 + 840))
    {
      v15 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(v1 + 80) >= 1)
    {
      v3 = 0;
      do
      {
        v4 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 72), v3) + 10);
        v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
        if (v5)
          v5(v4, 1);
        ++v3;
      }
      while (v3 < *(_QWORD *)(v1 + 80));
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v1 + 64));
    MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 576));
    v6 = *(_QWORD *)(v1 + 80);
    v7 = *(_DWORD *)(v1 + 424);
    if (v7 <= 1886530415)
    {
      if (v7 > 1886151032)
      {
        if (v7 != 1886151033 && v7 != 1886154860 && v7 != 1886155888)
          goto LABEL_38;
        MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 64));
        if (*(_BYTE *)(v1 + 840))
        {
          v15 = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMTimebaseGetTime(&v12, *(CMTimebaseRef *)(v1 + 112));
        bossSetMentorModesForTimeAndRate(v1, 0, v6, &v12, *(_QWORD *)(v1 + 432), *(_DWORD *)(v1 + 440), 2, 0);
        goto LABEL_37;
      }
      if (v7 != 1768189029)
      {
        if (v7 != 1885435251)
          goto LABEL_38;
        goto LABEL_31;
      }
    }
    else
    {
      if (v7 <= 1919247480)
      {
        if (v7 == 1886530416)
        {
          v11 = *(const void **)(v1 + 416);
          v17[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          figPlaybackBossStartPrerollAndSetPlayState(v1, v17, *(_QWORD *)(v1 + 432), *(_DWORD *)(v1 + 440), 2, 1886530416, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v11);
          goto LABEL_38;
        }
        if (v7 != 1886544244)
        {
          if (v7 != 1886545266)
            goto LABEL_38;
          goto LABEL_30;
        }
        goto LABEL_26;
      }
      if (v7 == 1919247481)
      {
LABEL_30:
        *(_DWORD *)(v1 + 424) = 1885435251;
LABEL_31:
        memset(&v16, 0, sizeof(v16));
        FigPlaybackBossGetTime(v1, &v16);
        MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 64));
        if (*(_BYTE *)(v1 + 840))
        {
          *(_DWORD *)type = 0;
          v13 = OS_LOG_TYPE_DEFAULT;
          v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v17[0] = v16;
        bossSetMentorModesToScrub(v1, 0, v6, v17, 0, 0);
LABEL_37:
        MEMORY[0x19402EF04](*(_QWORD *)(v1 + 64));
        goto LABEL_38;
      }
      if (v7 != 1920298606)
      {
        if (v7 != 2003853684)
        {
LABEL_38:
          MEMORY[0x19402EF04](*(_QWORD *)(v1 + 576));
          MEMORY[0x19402EF04](*(_QWORD *)(v1 + 24));
          CFRelease((CFTypeRef)v1);
          return;
        }
LABEL_26:
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        goto LABEL_38;
      }
    }
    v15 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_38;
  }
}

void figPlaybackBoss_allRenderPipelinesCompletedDecodeForPreroll_f(uint64_t *a1)
{
  const void *v2;

  figPlaybackBossPrerollCompleted(*a1, 0);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t figPlaybackBoss_editCursorServiceContainsScaledEditsInTimeRange(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, __int128 *, const void **);
  int v5;
  const void *v6;
  unsigned int (*v7)(const void *, __int128 *);
  const void *v8;
  unsigned int (*v9)(const void *, uint64_t);
  __int128 v10;
  uint64_t v11;
  CMTime v13;
  CMTimeRange time1;
  CMTime v15;
  CMTime time2;
  __int128 v17;
  _BYTE v18[80];
  const void *v19;

  v19 = 0;
  *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
  time1.start.epoch = *(_QWORD *)(a2 + 16);
  v4 = *(uint64_t (**)(uint64_t, __int128 *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v4)
    return 0;
  v17 = *(_OWORD *)&time1.start.value;
  *(_QWORD *)v18 = time1.start.epoch;
  v5 = v4(a1, &v17, &v19);
  v6 = v19;
  if (v5)
  {
    v11 = 0;
    if (!v19)
      return v11;
LABEL_19:
    CFRelease(v6);
    return v11;
  }
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  v7 = *(unsigned int (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v7)
  {
    while (!v7(v6, &v17))
    {
      if ((BYTE12(v17) & 1) != 0
        && (v18[20] & 1) != 0
        && !*(_QWORD *)&v18[24]
        && (*(_QWORD *)&v18[8] & 0x8000000000000000) == 0)
      {
        *(_OWORD *)&time1.start.value = *(_OWORD *)&v18[8];
        time1.start.epoch = *(_QWORD *)&v18[24];
        time2 = *(CMTime *)&v18[56];
        if (CMTimeCompare(&time1.start, &time2))
        {
          v11 = 1;
          goto LABEL_15;
        }
      }
      v8 = v19;
      v9 = *(unsigned int (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v9)
      {
        if (!v9(v8, 1))
        {
          v10 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
          *(_OWORD *)&time1.start.epoch = v10;
          *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a2 + 32);
          CMTimeRangeGetEnd(&v15, &time1);
          time1 = *(CMTimeRange *)&v18[32];
          CMTimeRangeGetEnd(&v13, &time1);
          if (CMTimeCompare(&v15, &v13) > 0)
          {
            v17 = 0u;
            memset(v18, 0, sizeof(v18));
            v6 = v19;
            v7 = *(unsigned int (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
            if (v7)
              continue;
          }
        }
      }
      break;
    }
  }
  v11 = 0;
LABEL_15:
  v6 = v19;
  if (v19)
    goto LABEL_19;
  return v11;
}

void figPlaybackBoss_VideoCompositionProcessorPrerollComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  if (a2 && !*(_BYTE *)(a2 + 16))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 24));
    if (a5)
      CFDictionaryGetValue(a5, CFSTR("VideoCompositionProcessor_Order"));
    MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 576));
    if (*(_BYTE *)(a2 + 16) || !FigCFEqual() || !*(_BYTE *)(a2 + 600))
    {
      MEMORY[0x19402EF04](*(_QWORD *)(a2 + 576));
      JUMPOUT(0x19402EF04);
    }
    *(_BYTE *)(a2 + 600) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(a2 + 576));
    MEMORY[0x19402EF04](*(_QWORD *)(a2 + 24));
    figPlaybackBoss_waitForCompletionOfPhase1AndStartPhase2(a2);
  }
}

uint64_t bossRemoveNotificationListenersForTrack(uint64_t result)
{
  uint64_t v1;
  uint64_t FigBaseObject;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);

  v1 = result;
  if (*(_BYTE *)(result + 397))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListeners();
    *(_BYTE *)(v1 + 397) = 0;
  }
  if (*(_BYTE *)(v1 + 398))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
    *(_BYTE *)(v1 + 398) = 0;
    FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v1 + 80));
    result = CMBaseObjectGetVTable();
    v3 = *(_QWORD **)(result + 8);
    if (*v3 >= 2uLL)
    {
      v4 = (uint64_t (*)(uint64_t))v3[8];
      if (v4)
        return v4(FigBaseObject);
    }
  }
  return result;
}

void figPlaybackBoss_VideoCompositionProcessorSeekComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v5;
  CFTypeID TypeID;
  const void *Value;
  const void *v10;
  CFTypeID v11;
  CMTimeFlags v12;
  CMTimeEpoch v13;
  int v14;
  int v15;
  CMTimeEpoch v16;
  OpaqueCMTimebase *v17;
  CMTime v18;
  CMTimeValue v19;
  CMTimeScale v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = MEMORY[0x1E0CA2E18];
  v19 = *MEMORY[0x1E0CA2E18];
  v20 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  if (a5)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a5))
      {
        Value = CFDictionaryGetValue(a5, CFSTR("VideoCompositionProcessor_Order"));
        if (Value)
        {
          v10 = Value;
          v11 = CFNumberGetTypeID();
          if (v11 == CFGetTypeID(v10))
          {
            v12 = *(_DWORD *)(v5 + 12);
            v13 = *(_QWORD *)(v5 + 16);
            MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 24));
            if (*(_BYTE *)(a2 + 16))
            {
              v14 = 0;
              v15 = 0;
            }
            else
            {
              MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 576));
              if (CFEqual(v10, *(CFTypeRef *)(a2 + 536)))
              {
                v19 = *(_QWORD *)(a2 + 472);
                v20 = *(_DWORD *)(a2 + 480);
                v12 = *(_DWORD *)(a2 + 484);
                v16 = *(_QWORD *)(a2 + 488);
                *(_OWORD *)(a2 + 472) = *(_OWORD *)v5;
                *(_QWORD *)(a2 + 488) = v13;
                if (*(_BYTE *)(a2 + 468))
                {
                  v15 = *(_DWORD *)(a2 + 776);
                  if (v15)
                  {
                    *(_BYTE *)(a2 + 780) = 0;
                    *(_DWORD *)(a2 + 776) = 0;
                    v14 = 1;
                  }
                  else
                  {
                    v14 = 0;
                  }
                }
                else
                {
                  v14 = 0;
                  v15 = 0;
                }
                v13 = v16;
              }
              else
              {
                v14 = 0;
                v15 = 0;
              }
              MEMORY[0x19402EF04](*(_QWORD *)(a2 + 576));
            }
            MEMORY[0x19402EF04](*(_QWORD *)(a2 + 24));
            if ((v12 & 0x1D) == 1)
            {
              v17 = *(OpaqueCMTimebase **)(a2 + 112);
              v18.value = v19;
              v18.timescale = v20;
              v18.flags = v12;
              v18.epoch = v13;
              CMTimebaseSetTime(v17, &v18);
            }
            if (v14)
              figPlaybackBossPostSeekDidComplete(a2, v15, 0);
          }
        }
      }
    }
  }
}

uint64_t bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(uint64_t a1, CMTime *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  NSObject *v6;
  uint64_t result;
  __int128 v8;
  OpaqueCMTimebase *v9;
  CMTime time;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(NSObject **)(a1 + 360);
  if (v5)
    goto LABEL_7;
  v6 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 32));
  *(_QWORD *)(a1 + 360) = v6;
  if (!v6)
    return FigSignalErrorAt();
  dispatch_set_context(v6, (void *)a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 360), (dispatch_function_t)figPlaybackBossAdvanceForOverlappedPlaybackWithContext);
  dispatch_resume(*(dispatch_object_t *)(a1 + 360));
  result = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 360));
  if (!(_DWORD)result)
  {
    v5 = *(NSObject **)(a1 + 360);
LABEL_7:
    v8 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a1 + 384) = a2->epoch;
    *(_OWORD *)(a1 + 368) = v8;
    v9 = *(OpaqueCMTimebase **)(a1 + 112);
    time = *a2;
    return CMTimebaseSetTimerDispatchSourceNextFireTime(v9, v5, &time, 1u);
  }
  return result;
}

void figPlaybackBossAdvanceForOverlappedPlaybackWithContext(uint64_t a1)
{
  void *v1;

  if (!*(_BYTE *)(a1 + 16))
  {
    os_retain(*(void **)(a1 + 784));
    voucher_adopt();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    v1 = (void *)voucher_adopt();
    os_release(v1);
  }
}

uint64_t bossUsingEditCursorServiceArrayFindEditSegmentContainingTrackTime(uint64_t *a1, int a2, uint64_t a3, _BYTE *a4, _OWORD *a5)
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, CMTimeRange *, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, CMTimeRange *);
  uint64_t EditSegmentContainingTrackTime;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[6];
  CMTimeRange time[2];
  CMTimeRange range;
  CMTimeRange v24;
  CMTime v25;
  CMTime v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CMTimeRange v33[2];
  CFTypeRef v34;

  v34 = 0;
  memset(v33, 0, sizeof(v33));
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  memset(&v26, 0, sizeof(v26));
  v10 = *a1;
  *(_OWORD *)&time[0].start.value = *(_OWORD *)a3;
  time[0].start.epoch = *(_QWORD *)(a3 + 16);
  v11 = *(uint64_t (**)(uint64_t, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v11)
    goto LABEL_14;
  *(_OWORD *)&range.start.value = *(_OWORD *)&time[0].start.value;
  range.start.epoch = time[0].start.epoch;
  v12 = v11(v10, &range, &v34);
  if ((_DWORD)v12 == -12521)
  {
LABEL_16:
    v13 = 0;
    goto LABEL_17;
  }
  v13 = v12;
  if ((_DWORD)v12)
  {
LABEL_15:
    FigSignalErrorAt();
    goto LABEL_17;
  }
  v14 = v34;
  v15 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v15)
  {
LABEL_14:
    v13 = 4294954514;
    goto LABEL_15;
  }
  v13 = v15(v14, v33);
  if ((_DWORD)v13)
    goto LABEL_15;
  if (a4)
    *a4 = 1;
  if ((v33[0].start.flags & 0x1D) != 1
    || (*(_OWORD *)&time[0].start.value = *(_OWORD *)a3,
        time[0].start.epoch = *(_QWORD *)(a3 + 16),
        range = v33[1],
        CMTimeClampToRange(&v25, &time[0].start, &range),
        range = v33[1],
        time[0] = v33[0],
        CMTimeMapTimeFromRangeToRange(&v26, &v25, &range, time),
        a2 < 2))
  {
LABEL_12:
    if (a5)
    {
      v13 = 0;
      v17 = *(_OWORD *)&v33[1].start.value;
      a5[2] = *(_OWORD *)&v33[0].duration.timescale;
      a5[3] = v17;
      v18 = *(_OWORD *)&v33[1].duration.timescale;
      a5[4] = *(_OWORD *)&v33[1].start.epoch;
      a5[5] = v18;
      v19 = *(_OWORD *)&v33[0].start.epoch;
      *a5 = *(_OWORD *)&v33[0].start.value;
      a5[1] = v19;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  range.start = v26;
  EditSegmentContainingTrackTime = bossUsingEditCursorServiceArrayFindEditSegmentContainingTrackTime(a1 + 1, 1, &range, 0, &v27);
  if (!(_DWORD)EditSegmentContainingTrackTime)
  {
    time[0] = v33[0];
    time[1] = v33[1];
    v21[2] = v29;
    v21[3] = v30;
    v21[4] = v31;
    v21[5] = v32;
    v21[0] = v27;
    v21[1] = v28;
    bossCombineEditSegments((uint64_t)time, (uint64_t)v21, (uint64_t)&range);
    v33[0] = range;
    v33[1] = v24;
    goto LABEL_12;
  }
  v13 = EditSegmentContainingTrackTime;
LABEL_17:
  if (v34)
    CFRelease(v34);
  return v13;
}

uint64_t bossUsingEditCursorServiceArrayFindNextNonEmptyTrackTime(uint64_t *a1, int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  uint64_t v14;
  uint64_t (*v15)(uint64_t, CMTimeRange *, CFTypeRef *);
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  uint64_t (*v19)(CFTypeRef, CMTimeRange *);
  uint64_t v20;
  uint64_t NextNonEmptyTrackTime;
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, uint64_t);
  CFTypeRef v24;
  uint64_t (*v25)(CFTypeRef, CMTimeRange *);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CFTypeRef v33;
  uint64_t (*v34)(CFTypeRef, uint64_t);
  CFTypeRef v35;
  uint64_t (*v36)(CFTypeRef, CMTimeRange *);
  CMTimeRange v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  CMTimeRange time[2];
  CMTimeRange time2;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  CMTime v47;
  CMTimeRange time1;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  CMTimeEpoch v53;
  CMTime v54;
  CMTime start;
  CMTime v56;
  CMTimeRange v57[2];
  CFTypeRef v58[2];

  v58[0] = 0;
  memset(v57, 0, sizeof(v57));
  if (!a2)
  {
    v17 = 0;
    v26 = *a3;
    *(_QWORD *)(a6 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)a6 = v26;
    goto LABEL_44;
  }
  v14 = *a1;
  *(_OWORD *)&time2.start.value = *a3;
  time2.start.epoch = *((_QWORD *)a3 + 2);
  v15 = *(uint64_t (**)(uint64_t, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v15)
  {
    v17 = 4294954514;
    goto LABEL_32;
  }
  *(_OWORD *)&time1.start.value = *(_OWORD *)&time2.start.value;
  time1.start.epoch = time2.start.epoch;
  v16 = v15(v14, &time1, v58);
  if ((_DWORD)v16 == -12521)
  {
    v17 = 0;
    goto LABEL_44;
  }
  v17 = v16;
  if ((_DWORD)v16)
  {
LABEL_32:
    FigSignalErrorAt();
    goto LABEL_44;
  }
  v18 = v58[0];
  v19 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v19)
  {
    v20 = v19(v18, v57);
    if ((_DWORD)v20)
      goto LABEL_42;
    if ((a4 & 0x80000000) == 0
      || (*(_OWORD *)&time1.start.value = *a3,
          time1.start.epoch = *((_QWORD *)a3 + 2),
          *(_OWORD *)&time2.start.value = *(_OWORD *)&v57[1].start.value,
          time2.start.epoch = v57[1].start.epoch,
          CMTimeCompare(&time1.start, &time2.start)))
    {
      while (1)
      {
LABEL_9:
        if ((int)a4 < 1)
        {
          memset(&time2, 0, 24);
          time1 = v57[1];
          CMTimeRangeGetEnd(&time2.start, &time1);
          *(_OWORD *)&time1.start.value = *a3;
          time1.start.epoch = *((_QWORD *)a3 + 2);
          *(_OWORD *)&time[0].start.value = *(_OWORD *)&time2.start.value;
          time[0].start.epoch = time2.start.epoch;
          if (CMTimeCompare(&time1.start, &time[0].start) >= 1)
          {
            *a3 = *(_OWORD *)&time2.start.value;
            *((_QWORD *)a3 + 2) = time2.start.epoch;
          }
          if ((*(_DWORD *)(a5 + 12) & 0x1D) == 1)
          {
            *(_OWORD *)&time1.start.value = *a3;
            time1.start.epoch = *((_QWORD *)a3 + 2);
            *(_OWORD *)&time[0].start.value = *(_OWORD *)a5;
            time[0].start.epoch = *(_QWORD *)(a5 + 16);
            if (CMTimeCompare(&time1.start, &time[0].start) < 1)
            {
LABEL_47:
              v17 = 4294954776;
              goto LABEL_44;
            }
          }
        }
        else
        {
          *(_OWORD *)&time1.start.value = *a3;
          time1.start.epoch = *((_QWORD *)a3 + 2);
          *(_OWORD *)&time2.start.value = *(_OWORD *)&v57[1].start.value;
          time2.start.epoch = v57[1].start.epoch;
          if (CMTimeCompare(&time1.start, &time2.start) < 0)
          {
            *a3 = *(_OWORD *)&v57[1].start.value;
            *((_QWORD *)a3 + 2) = v57[1].start.epoch;
          }
          if ((*(_DWORD *)(a5 + 12) & 0x1D) == 1)
          {
            *(_OWORD *)&time1.start.value = *a3;
            time1.start.epoch = *((_QWORD *)a3 + 2);
            *(_OWORD *)&time2.start.value = *(_OWORD *)a5;
            time2.start.epoch = *(_QWORD *)(a5 + 16);
            if ((CMTimeCompare(&time1.start, &time2.start) & 0x80000000) == 0)
              goto LABEL_47;
          }
        }
        if ((v57[0].start.flags & 0x1D) == 1)
        {
          memset(&start, 0, sizeof(start));
          *(_OWORD *)&time2.start.value = *a3;
          time2.start.epoch = *((_QWORD *)a3 + 2);
          time1 = v57[1];
          CMTimeClampToRange(&v54, &time2.start, &time1);
          time1 = v57[1];
          time2 = v57[0];
          CMTimeMapTimeFromRangeToRange(&v56, &v54, &time1, &time2);
          if ((int)a4 < 1)
          {
            start = v57[0].start;
          }
          else
          {
            time1 = v57[0];
            CMTimeRangeGetEnd(&start, &time1);
          }
          v52 = 0uLL;
          v53 = 0;
          v50 = 0u;
          v51 = 0u;
          v49 = 0u;
          memset(&time1, 0, sizeof(time1));
          time2.start = v56;
          time[0].start = start;
          NextNonEmptyTrackTime = bossUsingEditCursorServiceArrayFindNextNonEmptyTrackTime(a1 + 1, (a2 - 1), &time2, a4, time, &v52, &time1);
          v17 = NextNonEmptyTrackTime;
          if (!(_DWORD)NextNonEmptyTrackTime)
          {
            *(_OWORD *)&time[0].start.value = v52;
            time[0].start.epoch = v53;
            time2 = v57[0];
            CMTimeClampToRange(&v47, &time[0].start, &time2);
            time2 = v57[0];
            time[0] = v57[1];
            CMTimeMapTimeFromRangeToRange(&v38.start, &v47, &time2, time);
            *(_OWORD *)a6 = *(_OWORD *)&v38.start.value;
            *(_QWORD *)(a6 + 16) = v38.start.epoch;
            if (a2 < 2)
            {
              v31 = *(_OWORD *)&v57[1].start.value;
              a7[2] = *(_OWORD *)&v57[0].duration.timescale;
              a7[3] = v31;
              v32 = *(_OWORD *)&v57[1].duration.timescale;
              a7[4] = *(_OWORD *)&v57[1].start.epoch;
              a7[5] = v32;
              v29 = *(_OWORD *)&v57[0].start.value;
              v30 = *(_OWORD *)&v57[0].start.epoch;
            }
            else
            {
              time[0] = v57[0];
              time[1] = v57[1];
              v38 = time1;
              v39 = v49;
              v40 = v50;
              v41 = v51;
              bossCombineEditSegments((uint64_t)time, (uint64_t)&v38, (uint64_t)&time2);
              v27 = v44;
              a7[2] = *(_OWORD *)&time2.duration.timescale;
              a7[3] = v27;
              v28 = v46;
              a7[4] = v45;
              a7[5] = v28;
              v29 = *(_OWORD *)&time2.start.value;
              v30 = *(_OWORD *)&time2.start.epoch;
            }
            *a7 = v29;
            a7[1] = v30;
            goto LABEL_44;
          }
          if ((_DWORD)NextNonEmptyTrackTime != -12520)
            goto LABEL_44;
        }
        v22 = v58[0];
        v23 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v23)
          goto LABEL_43;
        v17 = v23(v22, a4);
        if (!(_DWORD)v17)
        {
          v24 = v58[0];
          v25 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (!v25)
            goto LABEL_43;
          v17 = v25(v24, v57);
          if (!(_DWORD)v17)
            continue;
        }
        goto LABEL_44;
      }
    }
    v33 = v58[0];
    v34 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v34)
      goto LABEL_43;
    v20 = v34(v33, 0xFFFFFFFFLL);
    if ((_DWORD)v20)
    {
LABEL_42:
      v17 = v20;
      goto LABEL_44;
    }
    v35 = v58[0];
    v36 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v36)
    {
      v20 = v36(v35, v57);
      if (!(_DWORD)v20)
        goto LABEL_9;
      goto LABEL_42;
    }
  }
LABEL_43:
  v17 = 4294954514;
LABEL_44:
  if (v58[0])
    CFRelease(v58[0]);
  return v17;
}

double bossCombineEditSegments@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double result;
  CMTime v29;
  CMTime dur;
  CMTime v31;
  CMTime rhs;
  CMTimeRange time2;
  CMTimeRange time1;
  CMTime v35;
  CMTime v36;
  CMTime v37;

  memset(&v37, 0, sizeof(v37));
  memset(&v36, 0, sizeof(v36));
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v8;
  v9 = a3 + 48;
  *(_OWORD *)&time1.start.value = *(_OWORD *)(a3 + 48);
  time1.start.epoch = *(_QWORD *)(a3 + 64);
  *(_OWORD *)&time2.start.value = *(_OWORD *)a1;
  time2.start.epoch = *(_QWORD *)(a1 + 16);
  if (CMTimeCompare(&time1.start, &time2.start) < 0)
  {
    *(_OWORD *)v9 = *(_OWORD *)a1;
    *(_OWORD *)&v35.value = *(_OWORD *)a1;
    v10 = *(_OWORD *)(a2 + 64);
    v11 = *(_OWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&time1.start.value = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&time1.start.epoch = v10;
    *(_OWORD *)&time1.duration.timescale = v11;
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&time2.start.value = *(_OWORD *)a2;
    *(_OWORD *)&time2.start.epoch = v13;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a1 + 16);
    v35.epoch = *(_QWORD *)(a1 + 16);
    *(_OWORD *)&time2.duration.timescale = v12;
    CMTimeMapTimeFromRangeToRange((CMTime *)a3, &v35, &time1, &time2);
    *(_OWORD *)&time1.start.value = *(_OWORD *)v9;
    time1.start.epoch = *(_QWORD *)(v9 + 16);
    *(_OWORD *)&time2.start.value = *(_OWORD *)(a2 + 48);
    time2.start.epoch = *(_QWORD *)(a2 + 64);
    CMTimeSubtract(&rhs, &time1.start, &time2.start);
    *(_OWORD *)&time2.start.value = *(_OWORD *)(a2 + 72);
    time2.start.epoch = *(_QWORD *)(a2 + 88);
    CMTimeSubtract(&time1.start, &time2.start, &rhs);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)&time1.start.value;
    *(_QWORD *)(a3 + 88) = time1.start.epoch;
    *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
    time1.start.epoch = *(_QWORD *)(a3 + 16);
    *(_OWORD *)&time2.start.value = *(_OWORD *)a2;
    time2.start.epoch = *(_QWORD *)(a2 + 16);
    CMTimeSubtract(&v31, &time1.start, &time2.start);
    *(_OWORD *)&time2.start.value = *(_OWORD *)(a2 + 24);
    time2.start.epoch = *(_QWORD *)(a2 + 40);
    CMTimeSubtract(&time1.start, &time2.start, &v31);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&time1.start.value;
    *(_QWORD *)(a3 + 40) = time1.start.epoch;
  }
  v14 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)&time1.start.value = *(_OWORD *)v9;
  *(_OWORD *)&time1.start.epoch = v14;
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v9 + 32);
  CMTimeRangeGetEnd(&v37, &time1);
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&time1.start.value = *(_OWORD *)a1;
  *(_OWORD *)&time1.start.epoch = v15;
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 32);
  CMTimeRangeGetEnd(&v36, &time1);
  time1.start = v37;
  time2.start = v36;
  if (CMTimeCompare(&time1.start, &time2.start) >= 1)
  {
    memset(&v35, 0, sizeof(v35));
    time1.start = v37;
    time2.start = v36;
    CMTimeSubtract(&v35, &time1.start, &time2.start);
    *(_OWORD *)&v29.value = *(_OWORD *)&v35.value;
    v16 = *(_OWORD *)(a2 + 64);
    v17 = *(_OWORD *)(a2 + 80);
    v18 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&time1.start.value = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&time1.start.epoch = v16;
    *(_OWORD *)&time1.duration.timescale = v17;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&time2.start.value = *(_OWORD *)a2;
    *(_OWORD *)&time2.start.epoch = v19;
    memset(&dur, 0, sizeof(dur));
    v29.epoch = v35.epoch;
    *(_OWORD *)&time2.duration.timescale = v18;
    CMTimeMapDurationFromRangeToRange(&dur, &v29, &time1, &time2);
    *(_OWORD *)&time2.start.value = *(_OWORD *)(a3 + 72);
    time2.start.epoch = *(_QWORD *)(a3 + 88);
    v29 = v35;
    CMTimeSubtract(&time1.start, &time2.start, &v29);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)&time1.start.value;
    *(_QWORD *)(a3 + 88) = time1.start.epoch;
    *(_OWORD *)&time2.start.value = *(_OWORD *)(a3 + 24);
    time2.start.epoch = *(_QWORD *)(a3 + 40);
    v29 = dur;
    CMTimeSubtract(&time1.start, &time2.start, &v29);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&time1.start.value;
    *(_QWORD *)(a3 + 40) = time1.start.epoch;
  }
  *(_OWORD *)&dur.value = *(_OWORD *)v9;
  v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&time1.start.value = *(_OWORD *)a1;
  *(_OWORD *)&time1.start.epoch = v20;
  v21 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 32);
  v22 = *(_OWORD *)(a1 + 64);
  v23 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&time2.start.value = v21;
  *(_OWORD *)&time2.start.epoch = v22;
  dur.epoch = *(_QWORD *)(v9 + 16);
  *(_OWORD *)&time2.duration.timescale = v23;
  CMTimeMapTimeFromRangeToRange(&v35, &dur, &time1, &time2);
  *(_OWORD *)v9 = *(_OWORD *)&v35.value;
  *(_OWORD *)&dur.value = *(_OWORD *)(a3 + 72);
  v24 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&time1.start.value = *(_OWORD *)a1;
  *(_OWORD *)&time1.start.epoch = v24;
  v25 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 32);
  v26 = *(_OWORD *)(a1 + 64);
  v27 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&time2.start.value = v25;
  *(_OWORD *)&time2.start.epoch = v26;
  *(_QWORD *)(v9 + 16) = v35.epoch;
  dur.epoch = *(_QWORD *)(a3 + 88);
  *(_OWORD *)&time2.duration.timescale = v27;
  CMTimeMapDurationFromRangeToRange(&v35, &dur, &time1, &time2);
  result = *(double *)&v35.value;
  *(CMTime *)(a3 + 72) = v35;
  return result;
}

uint64_t figPlaybackBoss_timebaseRateChangedDeferredWork(uint64_t a1, uint64_t a2)
{
  CMTimeEpoch epoch;
  const void *v4;
  CMClockRef HostTimeClock;
  const void *v6;
  CMClockRef v7;
  const void *v8;
  CMClockRef v9;
  NSObject *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v12;
  _QWORD *ValueAtIndex;
  uint64_t FigBaseObject;
  void (*v15)(uint64_t, const __CFString *, _QWORD, CMTime *);
  NSObject *v16;
  CMTimeEpoch v17;
  char *v18;
  __int128 v20;
  CMTime lhs;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime time2;
  CMTime time;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 576));
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(a2 + 112)) != 0.0 && *(_DWORD *)(a2 + 424) == 1886151033)
  {
    v30 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v20 = *(_OWORD *)&v30.value;
    epoch = v30.epoch;
    memset(&v29, 0, sizeof(v29));
    CMTimebaseGetTime(&v29, *(CMTimebaseRef *)(a2 + 112));
    *(_OWORD *)&v28.value = v20;
    v28.epoch = epoch;
    v27 = *(CMTime *)(a2 + 508);
    memset(&v26, 0, sizeof(v26));
    v4 = *(const void **)(a2 + 112);
    HostTimeClock = CMClockGetHostTimeClock();
    time = v29;
    CMSyncConvertTime(&v26, &time, v4, HostTimeClock);
    memset(&v25, 0, sizeof(v25));
    v6 = *(const void **)(a2 + 112);
    v7 = CMClockGetHostTimeClock();
    time = v27;
    CMSyncConvertTime(&v25, &time, v6, v7);
    *(_OWORD *)&v24.value = v20;
    v24.epoch = epoch;
    FigCFDictionaryGetCMTimeIfPresent();
    if ((v30.flags & 1) == 0)
      v30 = v29;
    v8 = *(const void **)(a2 + 112);
    v9 = CMClockGetHostTimeClock();
    time = v30;
    CMSyncConvertTime(&v24, &time, v8, v9);
    time = v24;
    time2 = v25;
    if (CMTimeCompare(&time, &time2) < 0)
    {
      memset(&v23, 0, sizeof(v23));
      time = v25;
      time2 = v26;
      CMTimeSubtract(&v23, &time, &time2);
      if (dword_1EE2A2C50)
      {
        LODWORD(v22.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_OWORD *)&v28.value = *(_OWORD *)&v23.value;
      v17 = v23.epoch;
    }
    else
    {
      v23 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 64));
      if (*(_BYTE *)(a2 + 840))
      {
        LODWORD(v22.value) = 0;
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v12 = *(_QWORD *)(a2 + 96);
      if ((v12 & 0x8000000000000000) == 0)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 72), v12);
        time.value = 0;
        FigBaseObject = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
        v15 = *(void (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
        if (v15)
        {
          v15(FigBaseObject, CFSTR("UnpauseLatencyEstimate"), *MEMORY[0x1E0C9AE00], &time);
          if (time.value)
          {
            CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)time.value);
            CFRelease((CFTypeRef)time.value);
          }
        }
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a2 + 64));
      memset(&v22, 0, sizeof(v22));
      time = v24;
      time2 = v23;
      CMTimeAdd(&lhs, &time, &time2);
      time = v26;
      CMTimeSubtract(&v22, &lhs, &time);
      if (dword_1EE2A2C50)
      {
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_OWORD *)&v28.value = *(_OWORD *)&v22.value;
      v17 = v22.epoch;
    }
    v28.epoch = v17;
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      v18 = strncpy((char *)&time, (const char *)(a2 + 841), 8uLL);
      time = v29;
      CMTimeGetSeconds((CMTime *)v18);
      time = v28;
      CMTimeGetSeconds(&time);
      kdebug_trace();
    }
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(a2 + 576));
}

uint64_t bossCopyRenderPipelineCachedVideoFrames(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  unsigned int (*v3)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  uint64_t v5;

  if (a2
    && *(_BYTE *)(a1 + 124)
    && (v5 = 0,
        FigBaseObject = FigRenderPipelineGetFigBaseObject(a2),
        (v3 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48)) != 0)
    && !v3(FigBaseObject, CFSTR("CachedVideoFrames"), *MEMORY[0x1E0C9AE00], &v5))
  {
    return v5;
  }
  else
  {
    return 0;
  }
}

void bossBumpTrackCurrentOrder(_QWORD *valuePtr)
{
  const void *v1;

  v1 = (const void *)valuePtr[25];
  ++*((_DWORD *)valuePtr + 52);
  valuePtr[25] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr + 26);
  if (v1)
    CFRelease(v1);
}

void figPlaybackBoss_AllMentorsPrerollCompleteWithContext(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  v3 = (const void *)a1[1];
  if (*(_BYTE *)(v2 + 16))
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_BYTE *)(v2 + 601) = 0;
  figPlaybackBoss_waitForCompletionOfPhase1AndStartPhase2(v2);
  v3 = (const void *)a1[1];
  if (v3)
LABEL_3:
    CFRelease(v3);
LABEL_4:
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  free(a1);
}

uint64_t bossGetPresentationTimeAfterSampleCursorStepping(uint64_t a1, CMTime *a2, int a3, int a4, CMTime *a5)
{
  int v8;
  uint64_t (*v10)(uint64_t, CMTime *, CFTypeRef *, _QWORD, _QWORD);
  BOOL v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, uint64_t, uint64_t *);
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, CMTime *);
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, _QWORD, uint64_t *);
  CFTypeRef v18;
  uint64_t (*v19)(CFTypeRef, CMTime *);
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  NSObject *v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  NSObject *v31;
  CMTime v33;
  uint64_t v34;
  CFTypeRef cf;
  CMTime time2;
  CMTime time1;
  CMTime time;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  cf = 0;
  v33 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!a3)
  {
    a1 = 0;
    *(_OWORD *)&v33.value = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
    goto LABEL_23;
  }
  v8 = a3;
  time = *a2;
  v10 = *(uint64_t (**)(uint64_t, CMTime *, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
  if (!v10)
  {
    LODWORD(a1) = -12782;
LABEL_25:
    LODWORD(time2.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = time2.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v23 = value;
    else
      v23 = value & 0xFFFFFFFE;
    if (v23)
    {
      LODWORD(time.value) = 136315394;
      *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"bossGetPresentationTimeAfterSampleCursorStepping";
      LOWORD(time.flags) = 1024;
      *(CMTimeFlags *)((char *)&time.flags + 2) = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if ((_DWORD)a1)
      a1 = a1;
    else
      a1 = 4294954926;
    goto LABEL_51;
  }
  time1 = time;
  LODWORD(a1) = v10(a1, &time1, &cf, 0, 0);
  if ((_DWORD)a1)
    v11 = 1;
  else
    v11 = cf == 0;
  if (v11)
    goto LABEL_25;
  if ((a2->flags & 0x1F) != 3)
    goto LABEL_15;
  memset(&time, 0, sizeof(time));
  CMTimeMake(&time, a2->value + 1, a2->timescale);
  v12 = cf;
  v13 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v13)
  {
    a1 = 4294954514;
    goto LABEL_40;
  }
  a1 = v13(v12, 1, &v34);
  if ((_DWORD)a1)
  {
LABEL_40:
    v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    goto LABEL_50;
  }
  if (v34 != 1)
    goto LABEL_15;
  v14 = cf;
  v15 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v15)
  {
    a1 = 4294954514;
    goto LABEL_49;
  }
  a1 = v15(v14, &v33);
  if ((_DWORD)a1)
  {
LABEL_49:
    v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    goto LABEL_50;
  }
  time.epoch = v33.epoch;
  time1 = v33;
  *(_OWORD *)&time2.value = *(_OWORD *)&time.value;
  time2.epoch = v33.epoch;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0 && !--v8)
    goto LABEL_20;
LABEL_15:
  v16 = cf;
  v17 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v17)
  {
    a1 = 4294954514;
LABEL_34:
    LODWORD(time2.value) = 0;
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v25 = time2.value;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      v26 = v25;
    else
      v26 = v25 & 0xFFFFFFFE;
    if (!v26)
      goto LABEL_50;
LABEL_38:
    LODWORD(time.value) = 136315394;
    *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"bossGetPresentationTimeAfterSampleCursorStepping";
    LOWORD(time.flags) = 1024;
    *(CMTimeFlags *)((char *)&time.flags + 2) = a1;
    _os_log_send_and_compose_impl();
LABEL_50:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_51;
  }
  a1 = v17(v16, v8, &v34);
  if ((_DWORD)a1)
    goto LABEL_34;
  if (v34 != v8)
  {
    a1 = 4294954456;
    goto LABEL_51;
  }
  v18 = cf;
  v19 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v19)
  {
    a1 = 4294954514;
LABEL_43:
    LODWORD(time2.value) = 0;
    v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v29 = time2.value;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      v30 = v29;
    else
      v30 = v29 & 0xFFFFFFFE;
    if (!v30)
      goto LABEL_50;
    goto LABEL_38;
  }
  a1 = v19(v18, &v33);
  if ((_DWORD)a1)
    goto LABEL_43;
LABEL_20:
  if (a4)
  {
    time = v33;
    CMTimeConvertScale(&time1, &time, 1000000000, kCMTimeRoundingMethod_RoundTowardPositiveInfinity);
    a1 = 0;
    *(_OWORD *)&v33.value = *(_OWORD *)&time1.value;
    epoch = time1.epoch;
LABEL_23:
    v33.epoch = epoch;
    goto LABEL_51;
  }
  a1 = 0;
LABEL_51:
  if (cf)
    CFRelease(cf);
  *a5 = v33;
  return a1;
}

uint64_t bossTrackShouldRemoveExcessFramesInRefreshIntervals(uint64_t a1, uint64_t a2, float a3)
{
  _BOOL8 v4;
  _OWORD *v7;
  double Seconds;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime time;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 72) != 1986618469 || (*(_DWORD *)(a2 + 304) & 0x1D) != 1)
    return 0;
  if (*(_BYTE *)(a1 + 120))
    return 1;
  v7 = (_OWORD *)(a2 + 292);
  time = *(CMTime *)(a2 + 264);
  Seconds = CMTimeGetSeconds(&time);
  *(_OWORD *)&time.value = *v7;
  time.epoch = *(_QWORD *)(a2 + 308);
  v4 = Seconds < CMTimeGetSeconds(&time) * *(float *)(a2 + 288) * a3 * 0.7;
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v4;
}

uint64_t figPlaybackBossTrackClassInitialize()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gFigPlaybackBossTrackTypeID = result;
  return result;
}

void figPlaybackBossTrackInit(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x218uLL);
}

void figPlaybackBossTrackFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  _QWORD **v12;
  _QWORD **v13;
  _QWORD **v14;
  _QWORD *v15;
  _QWORD *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;

  bossRemoveNotificationListenersForTrack((uint64_t)a1);
  a1[24] = 0;
  v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  v3 = (const void *)a1[5];
  if (v3)
  {
    CFRelease(v3);
    a1[5] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  v6 = (const void *)a1[20];
  if (v6)
  {
    CFRelease(v6);
    a1[20] = 0;
  }
  v7 = (const void *)a1[18];
  if (v7)
  {
    CFRelease(v7);
    a1[18] = 0;
  }
  v8 = (_QWORD *)a1[15];
  if (v8)
    VideoMentorInvalidate(v8);
  v9 = a1[13];
  if (v9)
    AudioMentorInvalidate(v9);
  v10 = (_QWORD **)a1[22];
  if (v10)
  {
    EditMentorDispose(v10);
    a1[22] = 0;
  }
  v11 = (_QWORD **)a1[19];
  if (v11)
  {
    EditMentorDispose(v11);
    a1[19] = 0;
  }
  v12 = (_QWORD **)a1[17];
  if (v12)
  {
    EditMentorDispose(v12);
    a1[17] = 0;
  }
  v13 = (_QWORD **)a1[16];
  if (v13)
  {
    EditMentorDispose(v13);
    a1[16] = 0;
  }
  v14 = (_QWORD **)a1[14];
  if (v14)
  {
    EditMentorDispose(v14);
    a1[14] = 0;
  }
  v15 = (_QWORD *)a1[15];
  if (v15)
  {
    VideoMentorDispose(v15);
    a1[15] = 0;
  }
  v16 = (_QWORD *)a1[13];
  if (v16)
  {
    AudioMentorDispose(v16);
    a1[13] = 0;
  }
  v17 = (const void *)a1[25];
  if (v17)
  {
    CFRelease(v17);
    a1[25] = 0;
  }
  v18 = (const void *)a1[27];
  if (v18)
  {
    CFRelease(v18);
    a1[27] = 0;
  }
  v19 = (const void *)a1[28];
  if (v19)
  {
    CFRelease(v19);
    a1[28] = 0;
  }
  v20 = (const void *)a1[29];
  if (v20)
  {
    CFRelease(v20);
    a1[29] = 0;
  }
  v21 = (const void *)a1[30];
  if (v21)
  {
    CFRelease(v21);
    a1[30] = 0;
  }
  v22 = (const void *)a1[10];
  if (v22)
  {
    CFRelease(v22);
    a1[10] = 0;
  }
  v23 = (const void *)a1[6];
  if (v23)
  {
    CFRelease(v23);
    a1[6] = 0;
  }
  v24 = (const void *)a1[12];
  if (v24)
  {
    CFRelease(v24);
    a1[12] = 0;
  }
  v25 = (const void *)a1[32];
  if (v25)
  {
    CFRelease(v25);
    a1[32] = 0;
  }
  v26 = (const void *)a1[2];
  if (v26)
  {
    CFRelease(v26);
    a1[2] = 0;
  }
}

CFStringRef figPlaybackBossTrackCopyFormattedDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<FigPlaybackBossTrack %p>"), a1);
}

__CFString *figPlaybackBossTrackCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  const char *v3;
  const char *v4;
  const char *v5;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlaybackBossTrack %p: "), a1);
  v3 = "";
  if (*(_BYTE *)(a1 + 212))
    v4 = "";
  else
    v4 = "not ";
  if (*(_BYTE *)(a1 + 213))
    v5 = "";
  else
    v5 = "not ";
  if (!*(_BYTE *)(a1 + 214))
    v3 = "not ";
  CFStringAppendFormat(Mutable, 0, CFSTR("trackID %d, mediaType %c%c%c%c, renderPipeline %@, %swaiting for mentor completion, %swaiting for mentor preroll, %swaiting for decode for preroll"), *(unsigned int *)(a1 + 24), HIBYTE(*(_DWORD *)(a1 + 72)), BYTE2(*(_DWORD *)(a1 + 72)), BYTE1(*(_DWORD *)(a1 + 72)), *(_DWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v4, v5, v3);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

CFStringRef figPlaybackBossCopyFormattedDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<FigPlaybackBoss %p>"), a1);
}

__CFString *figPlaybackBossCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *StateName;
  CFIndex v7;
  unsigned int *ValueAtIndex;
  unsigned int v10;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlaybackBoss %p: "), a1);
  v3 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 120))
    v4 = "YES";
  else
    v4 = "NO";
  v5 = *(_QWORD *)(a1 + 112);
  StateName = getStateName(*(_DWORD *)(a1 + 424));
  CFStringAppendFormat(Mutable, 0, CFSTR("formatReader %@, nonRealTimeMode %s, timebase %@, playState %s"), v3, v4, v5, StateName);
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v7 = 0;
    do
    {
      ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7);
      v10 = bswap32(ValueAtIndex[18]);
      CFStringAppendFormat(Mutable, 0, CFSTR("\n  %d: %.4s id %d, renderPipeline %@"), v7++, &v10, ValueAtIndex[6], *((_QWORD *)ValueAtIndex + 10));
    }
    while (*(_QWORD *)(a1 + 80) > v7);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

void FigPlayerInterstitialEventGetPrimaryItem()
{
  __assert_rtn("FigPlayerInterstitialEventGetPrimaryItem", "MediaToolboxWorkaround126882051.c", 23, "false");
}

uint64_t FigRenderPipelineGetTypeID()
{
  MEMORY[0x19402F294](&FigRenderPipelineGetClassID_sRegisterFigRenderPipelineTypeOnce, RegisterFigRenderPipelineType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigRenderPipelineCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRenderPipeline %p]"), a1);
}

uint64_t FigReportingStatsCreate(_QWORD *a1)
{
  _QWORD *v2;
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  CFMutableDictionaryRef v6;
  CFMutableDictionaryRef v7;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  CFMutableSetRef v10;
  uint64_t result;
  CFDictionaryValueCallBacks v12;

  *(_OWORD *)&v12.version = xmmword_1E2F87D98;
  *(_OWORD *)&v12.release = *(_OWORD *)&off_1E2F87DA8;
  v12.equal = 0;
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
    return 4294955296;
  v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x200400FA965B2uLL);
  if (!v2)
    goto LABEL_12;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *v2 = Mutable;
  if (!Mutable)
    goto LABEL_12;
  v5 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], &v12);
  v2[1] = v5;
  if (!v5)
    goto LABEL_12;
  v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v2[2] = v6;
  if (!v6)
    goto LABEL_12;
  v7 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], 0);
  v2[5] = v7;
  if (!v7)
    goto LABEL_12;
  v8 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v2[3] = v8;
  if (v8
    && (v9 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v2[4] = v9) != 0)
    && (v10 = CFSetCreateMutable(v3, 0, MEMORY[0x1E0C9B3B0]), (v2[6] = v10) != 0))
  {
    result = 0;
    *a1 = v2;
  }
  else
  {
LABEL_12:
    FigReportingStatsDestroy((uint64_t)v2);
    return 4294955295;
  }
  return result;
}

uint64_t frs_retainSampleValue(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2;
  ++*(_DWORD *)(a2 + 48);
  return result;
}

void frs_releaseSampleValue(int a1, void *a2)
{
  if (*((_DWORD *)a2 + 12) == 1)
    free(a2);
  else
    --*((_DWORD *)a2 + 12);
}

void FigReportingStatsDestroy(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  if (a1)
  {
    FigReportingStatsResetAll(a1);
    if (*(_QWORD *)a1)
      CFRelease(*(CFTypeRef *)a1);
    v2 = *(const void **)(a1 + 8);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 16);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(a1 + 24);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 32);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a1 + 48);
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)(a1 + 40);
    if (v7)
      CFRelease(v7);
    v8 = *(const void **)(a1 + 56);
    if (v8)
      CFRelease(v8);
    free((void *)a1);
  }
}

void FigReportingStatsResetAll(uint64_t a1)
{
  uint64_t context;
  CFSetRef theSet;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 56))
  {
    v4 = 0;
    context = a1;
    theSet = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)frs_findKeysToRemoveDictApplier, &context);
    if ((_BYTE)v4)
      CFSetApplyFunction(theSet, (CFSetApplierFunction)frs_removeKeysSetApplier, (void *)a1);
    else
      frs_resetAll((CFMutableDictionaryRef *)a1);
    if (theSet)
      CFRelease(theSet);
  }
  else
  {
    frs_resetAll((CFMutableDictionaryRef *)a1);
  }
}

uint64_t FigReportingStatsSetValue(uint64_t a1, void *key, uint64_t a3)
{
  const __CFSet *v5;
  uint64_t result;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  const __CFDictionary *v10;
  uint64_t valuePtr;

  v10 = 0;
  valuePtr = a3;
  if (key)
  {
    v5 = *(const __CFSet **)(a1 + 56);
    if (v5)
    {
      if (CFSetContainsValue(v5, key))
        return 0;
    }
  }
  result = frs_validateAndGetStatsDataDictionary(a1, key, 0x1010u, &v10, 0);
  if (!(_DWORD)result || (_DWORD)result == -12005)
  {
    if (!v10)
      return 4294955294;
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongLongType, &valuePtr);
    if (!v7)
      return 4294955295;
    v8 = v7;
    v9 = v10;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, (const void *)0x1010);
    CFDictionarySetValue(v9, key, v8);
    CFRelease(v8);
    return 0;
  }
  return result;
}

uint64_t frs_validateAndGetStatsDataDictionary(uint64_t a1, void *key, unsigned int a3, const __CFDictionary **a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v7;
  const __CFDictionary *v8;
  int v10;
  unsigned int Value;
  unsigned int v12;
  const __CFDictionary *v13;

  v5 = 4294955296;
  if (a1 && key)
  {
    v7 = a1;
    v8 = *(const __CFDictionary **)(a1 + 40);
    if (!v8
      || !*(_QWORD *)v7
      || !*(_QWORD *)(v7 + 16)
      || !*(_QWORD *)(v7 + 8)
      || !*(_QWORD *)(v7 + 24)
      || !*(_QWORD *)(v7 + 32))
    {
      return 4294955294;
    }
    v10 = CFDictionaryContainsKey(v8, key);
    if (v10)
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 40), key);
      v12 = Value;
      v5 = 0;
      if (a3 && Value != a3)
        return 4294955287;
    }
    else
    {
      v5 = 4294955291;
      v12 = a3;
      if (!a3)
        return v5;
    }
    switch(v12)
    {
      case 0x1010u:
        break;
      case 0x1011u:
        v7 += 8;
        break;
      case 0x1012u:
        v7 += 16;
        break;
      case 0x1013u:
        v7 += 24;
        break;
      case 0x1014u:
        v7 += 32;
        break;
      default:
        return 4294955287;
    }
    v13 = *(const __CFDictionary **)v7;
    if (!v13)
      return 4294955287;
    if (v10 && !CFDictionaryContainsKey(v13, key))
    {
      return 4294955292;
    }
    else
    {
      if (a4)
        *a4 = v13;
      if (a5)
        *a5 = v12;
    }
  }
  return v5;
}

uint64_t FigReportingStatsAddToCountValue(uint64_t a1, void *key, uint64_t a3)
{
  const __CFSet *v6;
  uint64_t StatsDataDictionary;
  uint64_t v8;
  const __CFNumber *Value;
  CFNumberRef v10;
  CFNumberRef v11;
  __CFDictionary *v12;
  uint64_t valuePtr;
  CFDictionaryRef theDict;
  uint64_t v16;

  theDict = 0;
  v16 = a3;
  valuePtr = 0;
  if (key)
  {
    v6 = *(const __CFSet **)(a1 + 56);
    if (v6)
    {
      if (CFSetContainsValue(v6, key))
        return 0;
    }
  }
  StatsDataDictionary = frs_validateAndGetStatsDataDictionary(a1, key, 0x1013u, &theDict, 0);
  v8 = StatsDataDictionary;
  if (!(_DWORD)StatsDataDictionary || (_DWORD)StatsDataDictionary == -12005)
  {
    if (theDict)
    {
      if ((_DWORD)StatsDataDictionary == -12005)
      {
        v8 = 0;
        goto LABEL_11;
      }
      Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
        v16 = valuePtr + a3;
LABEL_11:
        v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &v16);
        if (!v10)
          return 4294955295;
        v11 = v10;
        v12 = theDict;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, (const void *)0x1013);
        CFDictionarySetValue(v12, key, v11);
        CFRelease(v11);
        return v8;
      }
    }
    return 4294955294;
  }
  return v8;
}

uint64_t FigReportingStatsSetCFTypeValue(uint64_t a1, void *key, const void *a3)
{
  const __CFSet *v6;
  uint64_t result;
  __CFDictionary *v8;
  const __CFDictionary *v9;

  v9 = 0;
  if (!a3)
    return 0;
  if (key)
  {
    v6 = *(const __CFSet **)(a1 + 56);
    if (v6)
    {
      if (CFSetContainsValue(v6, key))
        return 0;
    }
  }
  result = frs_validateAndGetStatsDataDictionary(a1, key, 0x1012u, &v9, 0);
  if (!(_DWORD)result || (_DWORD)result == -12005)
  {
    v8 = v9;
    if (!v9)
      return 4294955294;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, (const void *)0x1012);
    CFDictionarySetValue(v8, key, a3);
    return 0;
  }
  return result;
}

uint64_t FigReportingStatsUpdateSampleValue(uint64_t a1, void *key, unint64_t a3)
{
  const __CFSet *v6;
  uint64_t result;
  _DWORD *v8;
  _DWORD *v9;
  __CFDictionary *v10;
  int v11;
  _DWORD *Value;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  CFDictionaryRef theDict;

  theDict = 0;
  if (key)
  {
    v6 = *(const __CFSet **)(a1 + 56);
    if (v6)
    {
      if (CFSetContainsValue(v6, key))
        return 0;
    }
  }
  result = frs_validateAndGetStatsDataDictionary(a1, key, 0x1011u, &theDict, 0);
  if ((_DWORD)result && (_DWORD)result != -12005)
    return result;
  if (!theDict)
    return 4294955294;
  if ((_DWORD)result == -12005)
  {
    v8 = malloc_type_calloc(1uLL, 0x38uLL, 0x10000405AA1D1E9uLL);
    if (!v8)
      return 4294955295;
    v9 = v8;
    v8[10] = 1;
    *((_QWORD *)v8 + 2) = a3;
    *((_QWORD *)v8 + 3) = a3;
    *(_QWORD *)v8 = a3;
    *((_QWORD *)v8 + 1) = a3;
    v8[12] = 1;
    v10 = theDict;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, (const void *)0x1011);
    CFDictionarySetValue(v10, key, v9);
    v11 = v9[12];
    goto LABEL_19;
  }
  Value = CFDictionaryGetValue(theDict, key);
  if (!Value)
    return 4294955294;
  v9 = Value;
  v14 = *((_QWORD *)Value + 1);
  v13 = *((_QWORD *)Value + 2);
  if (v13 <= a3)
    v13 = a3;
  if (v14 >= a3)
    v14 = a3;
  *((_QWORD *)Value + 1) = v14;
  *((_QWORD *)Value + 2) = v13;
  v15 = Value[10];
  v16 = (v15 + 1);
  Value[10] = v16;
  v17 = *((_QWORD *)Value + 3);
  *((_QWORD *)Value + 3) = v17 + a3;
  if ((int)v15 < 1)
    v18 = 0;
  else
    v18 = (*((_QWORD *)Value + 4) + (a3 - (uint64_t)(v17 + a3) / v16) * (a3 - v17 / v15)) / v16;
  *((_QWORD *)Value + 4) = v18;
  *(_QWORD *)Value = a3;
  v11 = Value[12] + 1;
  Value[12] = v11;
LABEL_19:
  v19 = v11 - 1;
  if (!v19)
  {
    free(v9);
    return 0;
  }
  result = 0;
  v9[12] = v19;
  return result;
}

uint64_t FigReportingStatsResetArray(uint64_t a1, CFStringRef theString)
{
  const __CFSet *v4;
  __CFString *ArrayNameFromKey;
  __CFString *v6;
  uint64_t StatsDataDictionary;
  CFMutableDictionaryRef theDict;
  unsigned int v10;

  v10 = 0;
  theDict = 0;
  if (!theString)
    return 0;
  v4 = *(const __CFSet **)(a1 + 56);
  if (v4)
  {
    if (CFSetContainsValue(v4, theString))
      return 0;
  }
  ArrayNameFromKey = fsrm_createArrayNameFromKey(theString);
  if (!ArrayNameFromKey)
    return 4294955295;
  v6 = ArrayNameFromKey;
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 48), ArrayNameFromKey);
  StatsDataDictionary = frs_validateAndGetStatsDataDictionary(a1, v6, 0x1014u, &theDict, &v10);
  if (!(_DWORD)StatsDataDictionary && theDict)
  {
    CFDictionaryRemoveValue(theDict, v6);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v6);
  }
  CFRelease(v6);
  return StatsDataDictionary;
}

void FigReportingStatsResetValue(uint64_t a1, void *key)
{
  const __CFSet *v4;
  unsigned int v5;
  CFMutableDictionaryRef theDict;

  theDict = 0;
  if (!key || (v4 = *(const __CFSet **)(a1 + 56)) == 0 || !CFSetContainsValue(v4, key))
  {
    v5 = 0;
    if (!frs_validateAndGetStatsDataDictionary(a1, key, 0, &theDict, &v5))
    {
      if (theDict)
      {
        CFDictionaryRemoveValue(theDict, key);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), key);
      }
    }
  }
}

void frs_resetAll(CFMutableDictionaryRef *a1)
{
  __CFDictionary *v2;
  __CFDictionary *v3;
  __CFDictionary *v4;
  __CFDictionary *v5;
  __CFDictionary *v6;
  __CFSet *v7;

  if (a1)
  {
    v2 = a1[5];
    if (v2)
      CFDictionaryRemoveAllValues(v2);
    v3 = a1[1];
    if (v3)
      CFDictionaryRemoveAllValues(v3);
    if (*a1)
      CFDictionaryRemoveAllValues(*a1);
    v4 = a1[3];
    if (v4)
      CFDictionaryRemoveAllValues(v4);
    v5 = a1[2];
    if (v5)
      CFDictionaryRemoveAllValues(v5);
    v6 = a1[4];
    if (v6)
      CFDictionaryRemoveAllValues(v6);
    v7 = a1[6];
    if (v7)
      CFSetRemoveAllValues(v7);
  }
}

uint64_t FigReportingStatsCopyAsCFTypeAndSetInDictionary(uint64_t a1, __CFString *a2, __CFDictionary *a3)
{
  uint64_t result;
  int *Value;
  int *v8;
  int v9;
  CFAllocatorRef *v10;
  __CFString *MutableCopy;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  unsigned int v23;
  CFDictionaryRef theDict;
  uint64_t valuePtr;

  theDict = 0;
  v23 = 0;
  result = 4294955296;
  if (a2)
  {
    if (a3)
    {
      result = frs_validateAndGetStatsDataDictionary(a1, a2, 0, &theDict, &v23);
      if (!(_DWORD)result)
      {
        if (theDict)
        {
          if (v23)
          {
            Value = (int *)CFDictionaryGetValue(theDict, a2);
            if (Value)
            {
              valuePtr = 0;
              v8 = Value;
              switch(v23)
              {
                case 0x1010u:
                case 0x1013u:
                  CFNumberGetValue((CFNumberRef)Value, kCFNumberLongLongType, &valuePtr);
                  FigCFDictionarySetInt64();
                  goto LABEL_35;
                case 0x1011u:
                  if (Value[10] < 1)
                    goto LABEL_35;
                  v9 = Value[11];
                  v10 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
                  if (v9 && (v9 & 2) == 0)
                    goto LABEL_14;
                  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
                  if (!MutableCopy)
                    goto LABEL_40;
                  v12 = MutableCopy;
                  CFStringAppend(MutableCopy, CFSTR("Min"));
                  FigCFDictionarySetInt64();
                  CFRelease(v12);
                  v9 = v8[11];
LABEL_14:
                  if (v9 && (v9 & 4) == 0)
                    goto LABEL_18;
                  v13 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (!v13)
                    goto LABEL_40;
                  v14 = v13;
                  CFStringAppend(v13, CFSTR("Max"));
                  FigCFDictionarySetInt64();
                  CFRelease(v14);
                  v9 = v8[11];
LABEL_18:
                  if (v9 && (v9 & 1) == 0)
                    goto LABEL_22;
                  v15 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (!v15)
                    goto LABEL_40;
                  v16 = v15;
                  CFStringAppend(v15, CFSTR("Mean"));
                  FigCFDictionarySetInt64();
                  CFRelease(v16);
                  v9 = v8[11];
LABEL_22:
                  if (v9 && (v9 & 8) == 0)
                    goto LABEL_26;
                  v17 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (!v17)
                    goto LABEL_40;
                  v18 = v17;
                  CFStringAppend(v17, CFSTR("Last"));
                  FigCFDictionarySetInt64();
                  CFRelease(v18);
                  v9 = v8[11];
LABEL_26:
                  if (v9 && (v9 & 0x10) == 0)
                    goto LABEL_30;
                  v19 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (!v19)
                    goto LABEL_40;
                  v20 = v19;
                  CFStringAppend(v19, CFSTR("_Count"));
                  FigCFDictionarySetInt64();
                  CFRelease(v20);
                  v9 = v8[11];
LABEL_30:
                  if (v9 && (v9 & 0x20) == 0)
                    goto LABEL_35;
                  v21 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (v21)
                  {
                    v22 = v21;
                    CFStringAppend(v21, CFSTR("_Var"));
                    FigCFDictionarySetInt64();
                    CFRelease(v22);
LABEL_35:
                    result = 0;
                  }
                  else
                  {
LABEL_40:
                    result = 4294955295;
                  }
                  break;
                case 0x1012u:
                  CFDictionarySetValue(a3, a2, Value);
                  goto LABEL_35;
                default:
                  goto LABEL_35;
              }
            }
            else
            {
              return 4294955294;
            }
          }
          else
          {
            return 4294955292;
          }
        }
        else
        {
          return 4294955291;
        }
      }
    }
  }
  return result;
}

uint64_t FigReportingStatsCopyArrayAndSetInDictionary(uint64_t a1, const __CFString *a2, __CFDictionary *a3)
{
  uint64_t v3;
  uint64_t v6;
  const __CFArray *v7;
  CFArrayRef Copy;
  CFArrayRef v9;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  v3 = 4294955296;
  if (a2 && a3)
  {
    v6 = frs_copyArrayForKey(a1, a2, 0, (__CFString **)&value, (CFMutableArrayRef *)&cf);
    v7 = (const __CFArray *)cf;
    if (!(_DWORD)v6)
    {
      if (!cf)
        goto LABEL_11;
      if (!value)
        goto LABEL_10;
      if (CFSetGetValue(*(CFSetRef *)(a1 + 48), value))
      {
        Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7);
        if (!Copy)
        {
          v3 = 4294955295;
          goto LABEL_10;
        }
        v9 = Copy;
        CFDictionarySetValue(a3, value, Copy);
        CFRelease(v9);
      }
      v3 = 0;
LABEL_10:
      CFRelease(v7);
      goto LABEL_11;
    }
    v3 = v6;
    if (cf)
      goto LABEL_10;
  }
LABEL_11:
  if (value)
    CFRelease(value);
  return v3;
}

uint64_t frs_copyArrayForKey(uint64_t a1, CFStringRef theString, int a3, __CFString **a4, CFMutableArrayRef *a5)
{
  __CFString *ArrayNameFromKey;
  __CFString *v10;
  uint64_t StatsDataDictionary;
  uint64_t v12;
  __CFArray *Value;
  CFMutableArrayRef v14;
  CFMutableArrayRef Mutable;
  __CFDictionary *v16;
  CFDictionaryRef theDict;

  theDict = 0;
  ArrayNameFromKey = fsrm_createArrayNameFromKey(theString);
  if (!ArrayNameFromKey)
    return 4294955295;
  v10 = ArrayNameFromKey;
  StatsDataDictionary = frs_validateAndGetStatsDataDictionary(a1, ArrayNameFromKey, 0x1014u, &theDict, 0);
  v12 = StatsDataDictionary;
  if (!(_DWORD)StatsDataDictionary || (_DWORD)StatsDataDictionary == -12005)
  {
    if (theDict)
    {
      Value = (__CFArray *)CFDictionaryGetValue(theDict, v10);
      v14 = Value;
      if (!a3 || Value)
        goto LABEL_9;
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v14 = Mutable;
        v16 = theDict;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v10, (const void *)0x1014);
        CFDictionarySetValue(v16, v10, v14);
        CFRelease(v14);
        v12 = 0;
LABEL_9:
        if (a4)
        {
          CFRetain(v10);
          *a4 = v10;
        }
        if (v14)
          CFRetain(v14);
        *a5 = v14;
        goto LABEL_14;
      }
      v12 = 4294955295;
    }
    else
    {
      v12 = 4294955294;
    }
  }
LABEL_14:
  CFRelease(v10);
  return v12;
}

uint64_t FigReportingStatsCopyAsCFTypeAndAppendToArray(uint64_t a1, __CFString *theString)
{
  const __CFSet *v4;
  uint64_t v5;
  __CFArray *v6;
  uint64_t StatsDataDictionary;
  int *Value;
  unsigned int v10;
  int v11;
  unsigned int v12;
  CFMutableArrayRef v13;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  uint64_t valuePtr;

  cf = 0;
  theDict = 0;
  v13 = 0;
  v12 = 0;
  if (!theString)
  {
LABEL_28:
    StatsDataDictionary = 4294955296;
    goto LABEL_9;
  }
  v4 = *(const __CFSet **)(a1 + 56);
  if (v4 && CFSetContainsValue(v4, theString))
  {
    StatsDataDictionary = 0;
  }
  else
  {
    v5 = frs_copyArrayForKey(a1, theString, 1, (__CFString **)&cf, &v13);
    v6 = v13;
    if (!(_DWORD)v5)
    {
      if (v13)
      {
        StatsDataDictionary = frs_validateAndGetStatsDataDictionary(a1, theString, 0, &theDict, &v12);
        if (!(_DWORD)StatsDataDictionary)
        {
          if (theDict)
          {
            if (v12)
            {
              Value = (int *)CFDictionaryGetValue(theDict, theString);
              v10 = v12;
              valuePtr = 0;
              if (!Value)
                v10 = 0;
              switch(v10)
              {
                case 0x1010u:
                case 0x1013u:
                  CFNumberGetValue((CFNumberRef)Value, kCFNumberLongLongType, &valuePtr);
                  goto LABEL_18;
                case 0x1011u:
                  if (Value[10] >= 1)
                  {
                    v11 = Value[11];
                    if (!v11 || (v11 & 8) != 0)
LABEL_18:
                      FigCFArrayAppendInt64();
                  }
                  goto LABEL_26;
                case 0x1012u:
                  CFArrayAppendValue(v6, Value);
LABEL_26:
                  CFSetSetValue(*(CFMutableSetRef *)(a1 + 48), cf);
                  StatsDataDictionary = 0;
                  break;
                default:
                  CFArrayAppendValue(v6, CFSTR("-"));
                  StatsDataDictionary = 4294955291;
                  break;
              }
              goto LABEL_8;
            }
            StatsDataDictionary = 4294955292;
          }
          else
          {
            StatsDataDictionary = 4294955291;
          }
        }
        CFArrayAppendValue(v6, CFSTR("-"));
LABEL_8:
        CFRelease(v6);
        goto LABEL_9;
      }
      goto LABEL_28;
    }
    StatsDataDictionary = v5;
    if (v13)
      goto LABEL_8;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  return StatsDataDictionary;
}

uint64_t FigReportingStatsGetIntValue(uint64_t a1, void *a2, _QWORD *a3)
{
  return frs_getIntValue(a1, a2, 0x1010u, a3);
}

uint64_t frs_getIntValue(uint64_t a1, void *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t result;
  const __CFNumber *Value;
  uint64_t v8;
  CFDictionaryRef theDict;

  v8 = 0;
  theDict = 0;
  if (!a4)
    return 4294955296;
  result = frs_validateAndGetStatsDataDictionary(a1, a2, a3, &theDict, 0);
  if (!(_DWORD)result)
  {
    if (theDict)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(theDict, a2);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberLongLongType, &v8);
        result = 0;
        *a4 = v8;
      }
      else
      {
        return 4294955292;
      }
    }
    else
    {
      return 4294955291;
    }
  }
  return result;
}

uint64_t FigReportingStatsGetCountValue(uint64_t a1, void *a2, _QWORD *a3)
{
  return frs_getIntValue(a1, a2, 0x1013u, a3);
}

uint64_t FigReportingStatsGetCFTypeValue(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t result;
  const void *Value;
  CFDictionaryRef theDict;

  theDict = 0;
  if (!a3)
    return 4294955296;
  result = frs_validateAndGetStatsDataDictionary(a1, a2, 0x1012u, &theDict, 0);
  if (!(_DWORD)result)
  {
    if (theDict)
    {
      Value = CFDictionaryGetValue(theDict, a2);
      result = 0;
      *a3 = Value;
    }
    else
    {
      return 4294955291;
    }
  }
  return result;
}

uint64_t FigReportingStatsGetArrayCount(uint64_t a1, const __CFString *a2, CFIndex *a3)
{
  uint64_t v4;
  CFArrayRef v5;
  CFArrayRef theArray;

  theArray = 0;
  *a3 = 0;
  v4 = frs_copyArrayForKey(a1, a2, 0, 0, &theArray);
  v5 = theArray;
  if (!(_DWORD)v4)
    *a3 = CFArrayGetCount(theArray);
  if (v5)
    CFRelease(v5);
  return v4;
}

void FigReportingStatsCopy(_QWORD *a1, const __CFDictionary **a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const __CFSet *v9;
  _QWORD *v10;
  uint64_t v11;

  if (a1 && a2)
  {
    v10 = a1;
    v11 = 0;
    v4 = a2[1];
    if (v4 && a1[1])
    {
      LODWORD(v11) = 4113;
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    v5 = *a2;
    if (*a2 && *a1)
    {
      LODWORD(v11) = 4112;
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    v6 = a2[3];
    if (v6 && a1[3])
    {
      LODWORD(v11) = 4115;
      CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    v7 = a2[2];
    if (v7 && a1[2])
    {
      LODWORD(v11) = 4114;
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    v8 = a2[4];
    if (v8 && a1[4])
    {
      LODWORD(v11) = 4116;
      CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    v9 = a2[7];
    if (v9)
      frs_mergeFrozenKeys((uint64_t)a1, v9);
  }
}

void frs_mergeValueDictApplier(void *key, const void *a2, uint64_t a3)
{
  __CFDictionary **v4;
  __CFDictionary *v6;
  __CFDictionary *v7;
  const void *v8;
  uint64_t v9;
  __CFDictionary *v10;

  if (key)
  {
    if (a2)
    {
      v4 = *(__CFDictionary ***)a3;
      if (*(_QWORD *)a3)
      {
        switch(*(_DWORD *)(a3 + 8))
        {
          case 0x1010:
            v6 = *v4;
            v7 = v4[5];
            v8 = key;
            v9 = 4112;
            goto LABEL_10;
          case 0x1011:
            v6 = v4[1];
            v7 = v4[5];
            v8 = key;
            v9 = 4113;
            goto LABEL_10;
          case 0x1012:
            v6 = v4[2];
            v7 = v4[5];
            v8 = key;
            v9 = 4114;
            goto LABEL_10;
          case 0x1013:
            v6 = v4[3];
            v7 = v4[5];
            v8 = key;
            v9 = 4115;
LABEL_10:
            CFDictionarySetValue(v7, v8, (const void *)v9);
            CFDictionarySetValue(v6, key, a2);
            break;
          case 0x1014:
            v10 = v4[4];
            CFDictionarySetValue(v4[5], key, (const void *)0x1014);
            CFDictionarySetValue(v10, key, a2);
            CFSetSetValue(v4[6], key);
            break;
          default:
            return;
        }
      }
    }
  }
}

void frs_mergeFrozenKeys(uint64_t a1, CFSetRef theSet)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = 0;
  if (!*(_QWORD *)(a1 + 56))
    *(_QWORD *)(a1 + 56) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  CFSetApplyFunction(theSet, (CFSetApplierFunction)frs_mergeValueSetApplier, v3);
}

uint64_t FigReportingStatsFreezeKeys(uint64_t a1, CFSetRef theSet)
{
  uint64_t result;
  CFMutableSetRef MutableCopy;

  if (!a1)
    return 4294955296;
  if (!theSet)
    return 0;
  if (*(_QWORD *)(a1 + 56))
  {
    frs_mergeFrozenKeys(a1, theSet);
    return 0;
  }
  else
  {
    MutableCopy = CFSetCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theSet);
    result = 0;
    *(_QWORD *)(a1 + 56) = MutableCopy;
  }
  return result;
}

void frs_findKeysToRemoveDictApplier(void *value, uint64_t a2, uint64_t a3)
{
  if (CFSetContainsValue(*(CFSetRef *)(*(_QWORD *)a3 + 56), value))
    *(_BYTE *)(a3 + 16) = 1;
  else
    CFSetAddValue(*(CFMutableSetRef *)(a3 + 8), value);
}

void frs_removeKeysSetApplier(const __CFString *key, __CFDictionary **a2)
{
  __CFDictionary *v4;
  __CFString *ArrayNameFromKey;
  __CFString *v6;

  switch(CFDictionaryGetValue(a2[5], key))
  {
    case 0x1010u:
      v4 = *a2;
      goto LABEL_6;
    case 0x1011u:
      v4 = a2[1];
      goto LABEL_6;
    case 0x1012u:
      v4 = a2[2];
      goto LABEL_6;
    case 0x1013u:
      v4 = a2[3];
LABEL_6:
      CFDictionaryRemoveValue(v4, key);
      break;
    case 0x1014u:
      CFDictionaryRemoveValue(a2[4], key);
      if (a2[6])
      {
        ArrayNameFromKey = fsrm_createArrayNameFromKey(key);
        if (ArrayNameFromKey)
        {
          v6 = ArrayNameFromKey;
          CFSetRemoveValue(a2[6], ArrayNameFromKey);
          CFRelease(v6);
        }
      }
      break;
    default:
      return;
  }
}

void frs_mergeValueSetApplier(void *value, uint64_t a2)
{
  if (value)
  {
    if (*(_QWORD *)a2)
      CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)a2 + 56), value);
  }
}

uint64_t FigNetworkPathInformationSetInterfaceType()
{
  return FigCFDictionarySetInt();
}

void FigNetworkPathInformationSetHostIsReachable(__CFDictionary *a1, int a2)
{
  const void **v2;

  v2 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a2)
    v2 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(a1, CFSTR("kFigNetworkPathInformationKey_HostIsReachable"), *v2);
}

void FigNetworkPathInformationSetHostIsLocal(__CFDictionary *a1, int a2)
{
  const void **v2;

  v2 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a2)
    v2 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(a1, CFSTR("kFigNetworkPathInformationKey_HostIsLocal"), *v2);
}

void FigNetworkPathInformationSetDoesUseCellular(__CFDictionary *a1, int a2)
{
  const void **v2;

  v2 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a2)
    v2 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(a1, CFSTR("kFigNetworkPathInformationKey_DoesUseCellular"), *v2);
}

void FigNetworkPathInformationSetExpensive(__CFDictionary *a1, int a2)
{
  const void **v2;

  v2 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a2)
    v2 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(a1, CFSTR("kFigNetworkPathInformationKey_IsExpensive"), *v2);
}

uint64_t FigNetworkPathInformationIsHostReachable(uint64_t a1, char a2)
{
  if (FigCFDictionaryGetBooleanIfPresent() && (a2 & 1) == 0)
    FigCFDictionaryGetBooleanIfPresent();
  return 0;
}

uint64_t FigNetworkPathInformationIsHostLocal()
{
  FigCFDictionaryGetBooleanIfPresent();
  return 0;
}

uint64_t FigNetworkPathInformationDoesUseCellular()
{
  FigCFDictionaryGetBooleanIfPresent();
  return 0;
}

uint64_t FigNetworkPathInformationIsExpensive()
{
  FigCFDictionaryGetBooleanIfPresent();
  return 0;
}

uint64_t FigNetworkPathInformationGetInterfaceType()
{
  if (FigCFDictionaryGetInt64IfPresent())
    return 0;
  else
    return 0;
}

uint64_t state_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigTTMLDocumentWriterStateID = result;
  return result;
}

uint64_t FigTTMLDocumentWriterStateStartElement(uint64_t a1, int a2)
{
  const __CFAllocator *v4;
  uint64_t Instance;
  uint64_t v6;
  CFMutableDictionaryRef Mutable;
  uint64_t v8;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&element_GetTypeID_sRegisterElementOnce, element_Register);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v6 = Instance;
    Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      *(_DWORD *)(v6 + 16) = a2;
      *(_BYTE *)(v6 + 20) = 0;
      *(_QWORD *)(v6 + 24) = Mutable;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), (const void *)v6);
      CFRelease((CFTypeRef)v6);
      return 0;
    }
    v8 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v6);
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  if (!(_DWORD)v8)
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), 0);
  return v8;
}

uint64_t FigTTMLDocumentWriterStateCloseStartTag(uint64_t a1)
{
  _BYTE *v1;

  v1 = state_peekTop(a1);
  if (!v1)
    return FigSignalErrorAt();
  v1[20] = 1;
  return 0;
}

const void *state_peekTop(uint64_t a1)
{
  const void *result;

  result = (const void *)CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (result)
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), (CFIndex)result - 1);
  return result;
}

uint64_t FigTTMLDocumentWriterStateSetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  CFMutableDictionaryRef *v5;

  v5 = (CFMutableDictionaryRef *)state_peekTop(a1);
  if (!v5)
    return FigSignalErrorAt();
  CFDictionaryAddValue(v5[3], a2, a3);
  return 0;
}

uint64_t FigTTMLDocumentWriterStateEndElement(uint64_t a1)
{
  CFIndex Count;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (Count <= 0)
    return FigSignalErrorAt();
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), Count - 1);
  return 0;
}

unsigned __int8 *FigTTMLDocumentWriterStateStartTagClosed(uint64_t a1)
{
  unsigned __int8 *result;

  result = (unsigned __int8 *)state_peekTop(a1);
  if (result)
    return (unsigned __int8 *)result[20];
  return result;
}

_QWORD *FigTTMLDocumentWriterStateGetAttributes(uint64_t a1)
{
  _QWORD *result;

  result = state_peekTop(a1);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

unsigned int *FigTTMLDocumentWriterStateGetCurrentElementType(uint64_t a1)
{
  unsigned int *result;

  result = (unsigned int *)state_peekTop(a1);
  if (result)
    return (unsigned int *)result[4];
  return result;
}

uint64_t FigTTMLDocumentWriterStateCreate(uint64_t a1, _QWORD *a2)
{
  const __CFAllocator *v3;
  _QWORD *Instance;
  CFMutableArrayRef Mutable;
  uint64_t v6;

  if (!a2)
    return FigSignalErrorAt();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigTTMLDocumentWriterStateGetTypeID_sRegisterFigTTMLDocumentWriterStateOnce, state_Register);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v6 = 0;
    Instance[2] = Mutable;
    *a2 = Instance;
  }
  else
  {
    v6 = FigSignalErrorAt();
    if (Instance)
      CFRelease(Instance);
  }
  return v6;
}

uint64_t state_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void state_Finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 16);
  if (v1)
    CFRelease(v1);
}

__CFString *state_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  CFIndex Count;
  unint64_t v4;
  const void *ValueAtIndex;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigTTMLDocumentWriterState(%p)]"), a1);
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (Count >= 1)
  {
    v4 = Count + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v4 - 2);
      CFStringAppendFormat(Mutable, 0, CFSTR("\n  %@"), ValueAtIndex);
      --v4;
    }
    while (v4 > 1);
  }
  return Mutable;
}

uint64_t element_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sElementID = result;
  return result;
}

uint64_t element_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void element_Finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

CFStringRef element_CopyFormattingDesc(uint64_t a1)
{
  const char *v1;

  v1 = "YES";
  if (!*(_BYTE *)(a1 + 20))
    v1 = "NO";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[Element %p] elementType = %d startTagClosed: %s"), a1, *(unsigned int *)(a1 + 16), v1);
}

CFStringRef element_CopyDebugDesc(uint64_t a1)
{
  const char *v1;

  v1 = "YES";
  if (!*(_BYTE *)(a1 + 20))
    v1 = "NO";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[Element %p] elementType = %d startTagClosed: %s"), a1, *(unsigned int *)(a1 + 16), v1);
}

uint64_t FigUserExperienceSetCurrentRank(_QWORD *a1, int a2)
{
  NSObject *v4;
  _QWORD v6[5];
  int v7;

  if (a1)
  {
    CFRetain(a1);
    v4 = a1[4];
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigUserExperienceSetCurrentRank_block_invoke;
    v6[3] = &__block_descriptor_44_e5_v8__0l;
    v6[4] = a1;
    v7 = a2;
    dispatch_async(v4, v6);
  }
  return 0;
}

uint64_t FigUserExperienceReportRateChange(_QWORD *a1, int a2, int a3)
{
  NSObject *v6;
  _QWORD block[6];
  int v9;
  int v10;

  if (a1)
  {
    CFRetain(a1);
    v6 = a1[4];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __FigUserExperienceReportRateChange_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a1;
    block[5] = a1;
    v9 = a3;
    v10 = a2;
    dispatch_async(v6, block);
  }
  return 0;
}

uint64_t fus_completeVariantGuts(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 96) + *(_QWORD *)(result + 48);
    result = objc_msgSend(*(id *)(result + 24), "addStreamTierSwitch:end:quality:weight:", (double)(*(_QWORD *)(result + 88) - v5) / 1000000000.0, (double)(a3 - v5) / 1000000000.0, (double)a2 / 100.0, 1.0);
    *(_QWORD *)(v4 + 88) = a3;
  }
  return result;
}

uint64_t FigUserExperienceReportStall(_QWORD *a1)
{
  NSObject *v2;
  _QWORD v4[6];

  if (a1)
  {
    CFRetain(a1);
    v2 = a1[4];
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __FigUserExperienceReportStall_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = a1;
    v4[5] = a1;
    dispatch_async(v2, v4);
  }
  return 0;
}

uint64_t FigUserExperienceReportVariantCompleted(_QWORD *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD v8[7];
  int v9;

  if (a1)
  {
    CFRetain(a1);
    v6 = a1[4];
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __FigUserExperienceReportVariantCompleted_block_invoke;
    v8[3] = &__block_descriptor_60_e5_v8__0l;
    v9 = a2;
    v8[4] = a1;
    v8[5] = a1;
    v8[6] = a3;
    dispatch_async(v6, v8);
  }
  return 0;
}

uint64_t FigUserExperienceReportSessionEnd(_QWORD *a1)
{
  NSObject *v2;
  _QWORD v4[6];

  if (a1)
  {
    CFRetain(a1);
    v2 = a1[4];
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __FigUserExperienceReportSessionEnd_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = a1;
    v4[5] = a1;
    dispatch_async(v2, v4);
  }
  return 0;
}

uint64_t FigUserExperienceCalculateScore(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  void *v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3052000000;
  v10 = __Block_byref_object_copy__0;
  v11 = __Block_byref_object_dispose__0;
  v12 = 0;
  if (!a1)
    goto LABEL_5;
  v2 = *(NSObject **)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __FigUserExperienceCalculateScore_block_invoke;
  v6[3] = &unk_1E2F87F08;
  v6[4] = &v7;
  v6[5] = a1;
  dispatch_sync(v2, v6);
  v3 = (const void *)v8[5];
  if (v3)
  {
    FPSupport_ReportAlgosScoreToSymptomLog(*(const void **)(a1 + 16), v3);
    v4 = (void *)v8[5];
  }
  else
  {
LABEL_5:
    v4 = 0;
  }

  _Block_object_dispose(&v7, 8);
  return 0;
}

void sub_192B177EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_192B17874(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x192B17864);
}

uint64_t FigUserExperienceScorerCreate(const void *a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v5;
  void *v6;
  dispatch_queue_t v7;
  CFTypeRef v8;
  uint64_t v9;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  *a2 = 0;
  if (FigUserExperienceScorerGetClassID_sRegisterFigUserExperienceScorerTypeOnce != -1)
    dispatch_once(&FigUserExperienceScorerGetClassID_sRegisterFigUserExperienceScorerTypeOnce, &__block_literal_global_15);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v5 = (_QWORD *)Instance;
  v6 = (void *)MEMORY[0x19403137C]();
  v5[3] = objc_alloc_init((Class)getAlgosStreamScoreClass[0]());
  objc_autoreleasePoolPop(v6);
  if (v5[3] && (v7 = dispatch_queue_create("com.apple.coremedia.uxscorer.work", 0), (v5[4] = v7) != 0))
  {
    if (a1)
      v8 = CFRetain(a1);
    else
      v8 = 0;
    v5[2] = v8;
    v9 = 0;
    v5[6] = FigGetUpTimeNanoseconds();
    *a2 = v5;
  }
  else
  {
    v9 = FigSignalErrorAt();
    if ((_DWORD)v9)
      CFRelease(v5);
  }
  return v9;
}

double fus_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fus_Finalize(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const void *v4;

  v2 = (void *)MEMORY[0x19403137C]();

  objc_autoreleasePoolPop(v2);
  v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
}

CFStringRef fus_BaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigUserExperienceScorer %p]"), a1);
}

CFStringRef fus_CopyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigUserExperienceScorer %p]"), a1);
}

Class initAlgosStreamScore()
{
  Class result;

  if (AlgosScoreFrameworkLibrary_sOnce != -1)
    dispatch_once(&AlgosScoreFrameworkLibrary_sOnce, &__block_literal_global_14);
  result = objc_getClass("AlgosStreamScore");
  classAlgosStreamScore = (uint64_t)result;
  getAlgosStreamScoreClass[0] = AlgosStreamScoreFunction;
  return result;
}

uint64_t AlgosStreamScoreFunction()
{
  return classAlgosStreamScore;
}

uint64_t FigGaplessInfoGetDefaultAudioPrimingFrameCount(const opaqueCMFormatDescription *a1)
{
  const AudioFormatListItem *MostCompatibleFormat;

  MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(a1);
  if (MostCompatibleFormat)
    return figi_GetDefaultNumAudioPrimingFrames(MostCompatibleFormat->mASBD.mFormatID);
  FigSignalErrorAt();
  return 0;
}

uint64_t figi_GetDefaultNumAudioPrimingFrames(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v1 = 2048;
  v2 = 2112;
  if (a1 > 1667330146)
  {
    if (a1 > 1902207847)
    {
      if (a1 <= 2053202274)
      {
        if (a1 != 1902207848 && a1 != 1902207856)
        {
          v3 = 1902211171;
LABEL_12:
          if (a1 != v3)
            return 0;
          return v1;
        }
        return 4224;
      }
      if (a1 == 2053202275)
        return v2;
      if (a1 == 2053202792)
        return 4224;
      v4 = 2053202800;
LABEL_28:
      if (a1 == v4)
        return 4224;
      return 0;
    }
    if (a1 <= 1885430631)
    {
      if (a1 == 1667330147)
        return v1;
      v5 = 1885430115;
    }
    else
    {
      if (a1 == 1885430632 || a1 == 1885430640)
        return 4224;
      v5 = 1902207331;
    }
LABEL_34:
    if (a1 == v5)
      return v2;
    return 0;
  }
  if (a1 <= 1633772395)
  {
    if (a1 > 1633772319)
    {
      if (a1 == 1633772320)
        return v2;
      if (a1 == 1633772389)
        return 256;
      v4 = 1633772392;
      goto LABEL_28;
    }
    if (a1 == 778924083)
      return 0;
    v5 = 1633771875;
    goto LABEL_34;
  }
  if (a1 <= 1667326306)
  {
    if (a1 == 1633772396)
      return 512;
    if (a1 != 1633772400)
    {
      v3 = 1634754915;
      goto LABEL_12;
    }
    return 4224;
  }
  if (a1 != 1667326307)
  {
    if (a1 != 1667326824)
    {
      v4 = 1667326832;
      goto LABEL_28;
    }
    return 4224;
  }
  return v2;
}

CMTime *FigGaplessInfoGetDefaultAudioPrimingDuration@<X0>(const opaqueCMFormatDescription *a1@<X0>, CMTime *a2@<X8>)
{
  const AudioFormatListItem *MostCompatibleFormat;
  uint64_t v4;
  double mSampleRate;
  unsigned int DefaultNumAudioPrimingFrames;

  MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(a1);
  v4 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
  a2->epoch = *(_QWORD *)(v4 + 16);
  if (!MostCompatibleFormat)
    return (CMTime *)FigSignalErrorAt();
  mSampleRate = MostCompatibleFormat->mASBD.mSampleRate;
  if (MostCompatibleFormat->mASBD.mSampleRate <= 0.0)
    return (CMTime *)FigSignalErrorAt();
  DefaultNumAudioPrimingFrames = figi_GetDefaultNumAudioPrimingFrames(MostCompatibleFormat->mASBD.mFormatID);
  return CMTimeMake(a2, DefaultNumAudioPrimingFrames, (int)(mSampleRate + 0.5));
}

uint64_t FigGaplessInfoGetDefaultBonusAudioPrimingPacketCount(const opaqueCMFormatDescription *a1)
{
  uint64_t result;
  uint64_t v2;
  int v3;

  result = (uint64_t)CMAudioFormatDescriptionGetMostCompatibleFormat(a1);
  if (result)
  {
    v2 = result;
    result = figi_GetDefaultNumAudioPrimingFrames(*(_DWORD *)(result + 8));
    if ((_DWORD)result)
    {
      v3 = *(_DWORD *)(v2 + 20);
      if (v3)
        return ((int)result / v3);
      else
        return 0;
    }
  }
  return result;
}

CFMutableDictionaryRef FigGaplessInfoCreateDefaultEnhanced(const AudioFormatListItem *a1)
{
  const AudioFormatListItem *MostCompatibleFormat;
  int DefaultNumAudioPrimingFrames;

  if (a1
    && (MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat((CMAudioFormatDescriptionRef)a1)) != 0
    && (DefaultNumAudioPrimingFrames = figi_GetDefaultNumAudioPrimingFrames(MostCompatibleFormat->mASBD.mFormatID)) != 0)
  {
    return FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration(a1, MEMORY[0x1E0CA2E18], DefaultNumAudioPrimingFrames, 0, 0);
  }
  else
  {
    return 0;
  }
}

CFMutableDictionaryRef FigGaplessInfoCreateEnhanced_NoCorrection(const AudioFormatListItem *a1, int a2, int a3, int64_t a4)
{
  return FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration(a1, MEMORY[0x1E0CA2E18], a2, a3, a4);
}

CFMutableDictionaryRef FigGaplessInfoCreateForLaterEnhancement(int a1, int a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;

  if (!(a2 | a1) && !a3)
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a1)
    FigCFDictionarySetInt32();
  if (a2)
    FigCFDictionarySetInt32();
  if (a3)
    FigCFDictionarySetInt64();
  return Mutable;
}

CFMutableDictionaryRef FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration(const AudioFormatListItem *a1, CMTime *a2, int a3, int a4, int64_t a5)
{
  CFMutableDictionaryRef Mutable;
  CMTime v10;
  uint64_t v11;

  if (!a1 || !(a4 | a3) && !a5)
    return 0;
  v10 = *a2;
  v11 = 0;
  if (!figi_ComputeEnhancementsWithDurations(a1, a5, &v10, (int32_t *)&v11 + 1, (UInt32 *)&v11))
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    if (a3)
      FigCFDictionarySetInt32();
    if (a4)
      FigCFDictionarySetInt32();
    if (a5)
      FigCFDictionarySetInt64();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
  }
  return Mutable;
}

const AudioFormatListItem *figi_ComputeEnhancementsWithDurations(const AudioFormatListItem *result, int64_t a2, CMTime *a3, int32_t *a4, UInt32 *a5)
{
  const opaqueCMFormatDescription *v9;
  int32_t v10;
  UInt32 mFramesPerPacket;
  CMTime v12;
  CMTime time1;
  CMTime v14;

  v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (result)
  {
    v9 = (const opaqueCMFormatDescription *)result;
    result = CMAudioFormatDescriptionGetMostCompatibleFormat((CMAudioFormatDescriptionRef)result);
    if (result)
    {
      v10 = (int)(result->mASBD.mSampleRate + 0.5);
      mFramesPerPacket = result->mASBD.mFramesPerPacket;
      CMTimeMake(&v14, a2, v10);
      if ((a3->flags & 0x1D) == 1)
      {
        time1 = v14;
        v12 = *a3;
        if (CMTimeCompare(&time1, &v12) >= 1)
        {
          result = CMAudioFormatDescriptionGetRichestDecodableFormat(v9);
          if (!result)
            return result;
          v10 = (int)(result->mASBD.mSampleRate + 0.5);
          mFramesPerPacket = result->mASBD.mFramesPerPacket;
        }
      }
      *a4 = v10;
      *a5 = mFramesPerPacket;
      return (const AudioFormatListItem *)1;
    }
  }
  return result;
}

CFMutableDictionaryRef FigGaplessInfoCopyAndEnhance_CorrectingWithTrackReader(const AudioFormatListItem *a1, uint64_t a2, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v7;
  BOOL v8;
  const __CFAllocator *v9;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v13;
  uint64_t v15;
  CMTime dictionaryRepresentation;
  CMTime v17;
  int64_t v18;

  if (!theDict)
    return 0;
  Value = CFDictionaryGetValue(theDict, CFSTR("FramesPerSecond"));
  v7 = CFDictionaryGetValue(theDict, CFSTR("FramesPerPacket"));
  if (Value)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
    return (CFMutableDictionaryRef)CFRetain(theDict);
  v15 = 0;
  v18 = 0;
  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  FigCFDictionaryGetInt64IfPresent();
  dictionaryRepresentation.value = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  v11 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
  if (v11)
  {
    v11(FigBaseObject, CFSTR("UneditedTrackDuration"), v9, &dictionaryRepresentation);
    if (dictionaryRepresentation.value)
    {
      CMTimeMakeFromDictionary(&v17, (CFDictionaryRef)dictionaryRepresentation.value);
      CFRelease((CFTypeRef)dictionaryRepresentation.value);
    }
  }
  dictionaryRepresentation = v17;
  if (!figi_ComputeEnhancementsWithDurations(a1, v18, &dictionaryRepresentation, (int32_t *)&v15 + 1, (UInt32 *)&v15))return (CFMutableDictionaryRef)CFRetain(theDict);
  MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, theDict);
  if (!MutableCopy)
    return (CFMutableDictionaryRef)CFRetain(theDict);
  v13 = MutableCopy;
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  return v13;
}

uint64_t FigGaplessInfoFetchiTunesParametersFromMetadataReader(uint64_t a1, uint64_t a2)
{
  unsigned int (*v4)(uint64_t, const __CFString *, const __CFString *, _QWORD, _QWORD, CFTypeRef *, _QWORD);
  const __CFAllocator *v5;
  uint64_t v7;
  CFTypeID TypeID;
  const __CFString *v10;
  CFTypeID v11;
  const UInt8 *BytePtr;
  CFIndex Length;
  const __CFString *v14;
  CFIndex v15;
  CFIndex v16;
  char *v17;
  char *v18;
  _DWORD *v19;
  CFTypeRef cf;

  if (a1)
  {
    cf = 0;
    v4 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFString *, _QWORD, _QWORD, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v4)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (!v4(a1, CFSTR("itlk"), CFSTR("com.apple.iTunes.iTunSMPB"), 0, *MEMORY[0x1E0C9AE00], &cf, 0) && cf != 0)
      {
        TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(cf))
        {
          v10 = (const __CFString *)CFRetain(cf);
        }
        else
        {
          v11 = CFDataGetTypeID();
          if (v11 != CFGetTypeID(cf))
            goto LABEL_25;
          BytePtr = CFDataGetBytePtr((CFDataRef)cf);
          Length = CFDataGetLength((CFDataRef)cf);
          v10 = CFStringCreateWithBytes(v5, BytePtr, Length, 0x8000100u, 0);
        }
        v14 = v10;
        if (v10)
        {
          v15 = CFStringGetLength(v10);
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >= 0x2C)
          {
            v17 = (char *)malloc_type_malloc(v15 + 1, 0xB9A8C49DuLL);
            if (v17)
            {
              v18 = v17;
              if (CFStringGetCString(v14, v17, v16, 0))
              {
                v18[44] = 0;
                v19 = (_DWORD *)(a2 + 4);
                if (sscanf(v18 + 10, "%08x %08x %016llx", a2, a2 + 4, a2 + 8) == 3 && *(uint64_t *)(a2 + 8) >= 1)
                {
                  if ((*(_DWORD *)a2 & 0x80000000) != 0)
                    *(_DWORD *)a2 = 0;
                  if ((*v19 & 0x80000000) != 0)
                    *v19 = 0;
                  v7 = 1;
                  goto LABEL_30;
                }
                FigSignalErrorAt();
              }
              v7 = 0;
LABEL_30:
              free(v18);
              goto LABEL_31;
            }
            FigSignalErrorAt();
          }
          v7 = 0;
LABEL_31:
          CFRelease(v14);
          goto LABEL_32;
        }
LABEL_25:
        v7 = 0;
LABEL_32:
        CFRelease(cf);
        return v7;
      }
    }
  }
  return 0;
}

uint64_t FigGaplessInfoCreateGradualDecoderRefresh(const opaqueCMFormatDescription *a1)
{
  const AudioFormatListItem *RichestDecodableFormat;
  int mFormatID;
  int v3;

  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(a1);
  if (!RichestDecodableFormat)
    return 0;
  mFormatID = RichestDecodableFormat->mASBD.mFormatID;
  if (mFormatID <= 1633772399)
  {
    if (mFormatID <= 1633772388)
    {
      if (mFormatID != 778924083 && mFormatID != 1633772320)
        return 0;
      return FigCFNumberCreateSInt32();
    }
    if (mFormatID == 1633772389 || mFormatID == 1633772392)
      return FigCFNumberCreateSInt32();
    v3 = 1633772396;
  }
  else
  {
    if (mFormatID > 1885430631)
    {
      if (mFormatID != 1885430632 && mFormatID != 1987015266 && mFormatID != 1885430640)
        return 0;
      return FigCFNumberCreateSInt32();
    }
    if (mFormatID == 1633772400 || mFormatID == 1869641075)
      return FigCFNumberCreateSInt32();
    v3 = 1885430115;
  }
  if (mFormatID != v3)
    return 0;
  return FigCFNumberCreateSInt32();
}

double FigGaplessInfoGetGaplessSourceTimeRange(const AudioFormatListItem *a1, __CFDictionary *cf, _OWORD *a3)
{
  __int128 v4;
  CFMutableDictionaryRef DefaultEnhanced;
  CFMutableDictionaryRef v6;
  CFTypeID v7;
  int Int32IfPresent;
  int v9;
  __int128 v11;
  double result;
  CMTime v13;
  int64_t value;
  int v15;
  int32_t timescale[2];
  __int128 v17;
  _BYTE v18[32];

  v4 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v17 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)v18 = v4;
  *(_OWORD *)&v18[16] = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  *(_QWORD *)timescale = 0;
  if (cf)
  {
    DefaultEnhanced = cf;
    v6 = 0;
  }
  else
  {
    DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(a1);
    v6 = DefaultEnhanced;
    if (!DefaultEnhanced)
      goto LABEL_15;
  }
  v7 = CFGetTypeID(DefaultEnhanced);
  if (v7 == CFDictionaryGetTypeID())
  {
    Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    v9 = FigCFDictionaryGetInt32IfPresent();
    if (Int32IfPresent && v9 != 0)
    {
      v15 = 0;
      if (FigCFDictionaryGetInt32IfPresent())
        CMTimeMake((CMTime *)&v17, v15, timescale[0]);
      value = 0;
      if (FigCFDictionaryGetInt64IfPresent())
      {
        CMTimeMake(&v13, value, timescale[0]);
        *(CMTime *)&v18[8] = v13;
      }
    }
  }
  if (v6)
    CFRelease(v6);
LABEL_15:
  v11 = *(_OWORD *)v18;
  *a3 = v17;
  a3[1] = v11;
  result = *(double *)&v18[16];
  a3[2] = *(_OWORD *)&v18[16];
  return result;
}

uint64_t FigGaplessInfoGetTrackGaplessSourceTimeRange(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t, _QWORD, int *);
  uint64_t v9;
  uint64_t v10;
  uint64_t FigBaseObject;
  void (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  const AudioFormatListItem *ValueAtIndex;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v21;
  __CFDictionary *v22;
  uint64_t v23;
  __int128 v24;
  CFTypeRef v26;
  CFArrayRef theArray;
  CFDictionaryRef dictionaryRepresentation;
  CFTypeRef cf;
  int v30;
  CMTimeRange v31;

  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v31.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v31.start.epoch = v6;
  *(_OWORD *)&v31.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v7 = *(_OWORD *)&v31.duration.timescale;
  v30 = 0;
  dictionaryRepresentation = 0;
  cf = 0;
  v26 = 0;
  theArray = 0;
  *a3 = *(_OWORD *)&v31.start.value;
  a3[1] = v6;
  a3[2] = v7;
  v8 = *(uint64_t (**)(uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
    goto LABEL_18;
  v9 = v8(a2, 0, &v30);
  if ((_DWORD)v9)
    goto LABEL_39;
  if (v30 != 1936684398)
    goto LABEL_20;
  v10 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  v12 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v12)
  {
    v12(FigBaseObject, CFSTR("EditsExcludePrimingAndRemainderDuration"), v10, &cf);
    v13 = cf;
  }
  else
  {
    v13 = 0;
  }
  if (v13 != (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    v14 = FigTrackReaderGetFigBaseObject(a2);
    v15 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v15 && !v15(v14, CFSTR("GaplessSourceTimeRange"), v10, &dictionaryRepresentation))
    {
      CMTimeRangeMakeFromDictionary(&v31, dictionaryRepresentation);
      goto LABEL_20;
    }
    v16 = FigTrackReaderGetFigBaseObject(a2);
    v17 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v17)
    {
      v9 = v17(v16, CFSTR("TrackFormatDescriptionArray"), v10, &theArray);
      if (!(_DWORD)v9)
      {
        if (theArray && CFArrayGetCount(theArray) >= 1)
        {
          ValueAtIndex = (const AudioFormatListItem *)CFArrayGetValueAtIndex(theArray, 0);
          v19 = FigFormatReaderGetFigBaseObject(a1);
          v20 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v20)
          {
            v21 = v20(v19, CFSTR("iTunesGaplessInfo"), v10, &v26);
            v22 = 0;
            if (!v21 && v26)
              v22 = FigGaplessInfoCopyAndEnhance_CorrectingWithTrackReader(ValueAtIndex, a2, (CFDictionaryRef)v26);
          }
          else
          {
            v22 = 0;
          }
          FigGaplessInfoGetGaplessSourceTimeRange(ValueAtIndex, v22, &v31);
          goto LABEL_23;
        }
LABEL_20:
        v22 = 0;
LABEL_23:
        v23 = 0;
        goto LABEL_24;
      }
LABEL_39:
      v23 = v9;
      v22 = 0;
LABEL_24:
      v13 = cf;
      if (!cf)
        goto LABEL_26;
      goto LABEL_25;
    }
LABEL_18:
    v22 = 0;
    v23 = 4294954514;
    goto LABEL_24;
  }
  v22 = 0;
  v23 = 0;
  if (v13)
LABEL_25:
    CFRelease(v13);
LABEL_26:
  if (dictionaryRepresentation)
    CFRelease(dictionaryRepresentation);
  if (theArray)
    CFRelease(theArray);
  if (v26)
    CFRelease(v26);
  if (v22)
    CFRelease(v22);
  if (!(_DWORD)v23)
  {
    v24 = *(_OWORD *)&v31.start.epoch;
    *a3 = *(_OWORD *)&v31.start.value;
    a3[1] = v24;
    a3[2] = *(_OWORD *)&v31.duration.timescale;
  }
  return v23;
}

uint64_t FigGaplessInfoGetTrackDuration(uint64_t a1, uint64_t a2, int a3, CMTime *a4)
{
  uint64_t v5;
  const __CFData *v6;
  CFTypeID v7;
  unint64_t Length;
  unint64_t v9;
  unint64_t v10;
  const UInt8 *BytePtr;
  __int128 v12;
  const UInt8 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CMTimeRange v18;
  CMTimeRange range;
  CMTimeRange v20;
  CMTime duration;
  __CFData *v22;

  v22 = 0;
  duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v5 = FigTrackReaderCreateSegmentData(a1, a2, a3, &v22);
  v6 = v22;
  if (!(_DWORD)v5)
  {
    if (v22)
    {
      v7 = CFGetTypeID(v22);
      if (v7 == CFDataGetTypeID())
      {
        Length = CFDataGetLength(v6);
        v9 = Length - 96;
        if (Length >= 0x60)
        {
          v10 = Length;
          BytePtr = CFDataGetBytePtr(v6);
          v12 = *((_OWORD *)BytePtr + 4);
          *(_OWORD *)&v20.start.value = *((_OWORD *)BytePtr + 3);
          *(_OWORD *)&v20.start.epoch = v12;
          *(_OWORD *)&v20.duration.timescale = *((_OWORD *)BytePtr + 5);
          if (v9 >= 0x60)
          {
            v13 = &BytePtr[96 * (v10 / 0x60)];
            v14 = *((_OWORD *)BytePtr + 4);
            *(_OWORD *)&range.start.value = *((_OWORD *)BytePtr + 3);
            *(_OWORD *)&range.start.epoch = v14;
            *(_OWORD *)&range.duration.timescale = *((_OWORD *)BytePtr + 5);
            v15 = *((_OWORD *)v13 - 3);
            v16 = *((_OWORD *)v13 - 1);
            *(_OWORD *)&v18.start.epoch = *((_OWORD *)v13 - 2);
            *(_OWORD *)&v18.duration.timescale = v16;
            *(_OWORD *)&v18.start.value = v15;
            CMTimeRangeGetUnion(&v20, &range, &v18);
          }
          duration = v20.duration;
        }
      }
    }
    *a4 = duration;
  }
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t FigTrackReaderCreateSegmentData(uint64_t a1, uint64_t a2, int a3, __CFData **a4)
{
  __int128 v4;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, _QWORD, const void **);
  const void *v10;
  uint64_t TrackUneditedDurationWithPossibleFallback;
  __int128 v13[3];
  CMTime v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CMTime v18;
  const void *v19;

  v19 = 0;
  v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v4 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v15 = *MEMORY[0x1E0CA2E40];
  v16 = v4;
  v17 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  if (!a1 || !a2)
    return FigSignalErrorAt();
  if (a3)
    FigGaplessInfoGetTrackGaplessSourceTimeRange(a1, a2, &v15);
  FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  v9 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v9 && (v9(FigBaseObject, CFSTR("EditCursorService"), *MEMORY[0x1E0C9AE00], &v19), (v10 = v19) != 0)
    || (TrackUneditedDurationWithPossibleFallback = FigGetTrackUneditedDurationWithPossibleFallback(a1, a2, (uint64_t)&v18), v10 = v19, !(_DWORD)TrackUneditedDurationWithPossibleFallback))
  {
    v14 = v18;
    v13[0] = v15;
    v13[1] = v16;
    v13[2] = v17;
    TrackUneditedDurationWithPossibleFallback = FigGaplessInfoCreateSegmentDataForTrack((uint64_t)v10, &v14, v13, a4);
    v10 = v19;
  }
  if (v10)
    CFRelease(v10);
  return TrackUneditedDurationWithPossibleFallback;
}

uint64_t FigGaplessInfoAdjustEditSegmentAccordingtoGaplessAudioTimeRange@<X0>(CMTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeScale v8;
  CMTimeFlags v9;
  CMTimeValue v10;
  CMTimeEpoch v11;
  CMTimeScale v12;
  CMTimeFlags v13;
  CMTimeEpoch v14;
  CMTimeFlags v16;
  CMTimeScale v17;
  CMTimeEpoch v18;
  uint64_t result;
  CMTimeValue v20;
  CMTimeValue v21;
  CMTimeValue v22;
  CMTime *v23;
  CMTimeValue v24;
  __int128 *v25;
  CMTimeEpoch v26;
  __int128 v27;
  CMTimeEpoch v31;
  uint64_t v32;
  CMTimeEpoch v33;
  CMTimeFlags v34;
  CMTimeFlags v35;
  CMTimeValue v36;
  CMTimeScale v37;
  CMTimeEpoch v38;
  int32_t v39;
  __int128 v40;
  CMTimeEpoch v41;
  CMTimeScale v42;
  uint64_t v43;
  CMTimeEpoch v44;
  CMTimeFlags v45;
  CMTimeEpoch v46;
  CMTimeScale v47;
  CMTimeEpoch v48;
  CMTimeFlags v49;
  CMTimeEpoch v50;
  __int128 v51;
  CMTimeEpoch v52;
  int v53;
  CMTimeEpoch v54;
  CMTime *v55;
  CMTimeFlags v56;
  CMTimeEpoch v57;
  CMTime *v58;
  CMTimeValue v59;
  CMTimeEpoch v60;
  CMTimeScale v61;
  CMTimeFlags v62;
  CMTimeEpoch v63;
  CMTime *v64;
  CMTimeValue v65;
  CMTimeEpoch v66;
  CMTimeFlags v67;
  CMTimeEpoch v68;
  CMTimeFlags v69;
  CMTime *v70;
  CMTime start;
  CMTime rhs;
  CMTime lhs;
  CMTimeRange time1;
  CMTime time2;
  CMTimeValue v76;
  CMTimeScale v77;
  CMTimeValue v78;
  CMTimeScale v79;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  value = a1->value;
  flags = a1->flags;
  timescale = a1->timescale;
  epoch = a1->epoch;
  v8 = a1[1].timescale;
  v9 = a1[1].flags;
  v11 = a1[1].epoch;
  v10 = a1[2].value;
  v12 = a1[2].timescale;
  v13 = a1[2].flags;
  v14 = a1[2].epoch;
  v17 = a1[3].timescale;
  v16 = a1[3].flags;
  v18 = a1[3].epoch;
  v21 = a1[1].value;
  result = (uint64_t)&a1[1];
  v20 = v21;
  v78 = v10;
  v79 = v12;
  v24 = a1[3].value;
  v23 = a1 + 3;
  v22 = v24;
  v25 = (__int128 *)MEMORY[0x1E0CA2E68];
  v26 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *v25;
  *(_OWORD *)a5 = *v25;
  if (a4)
  {
    if ((flags & 0x1D) != 1 && (v13 & 1) != 0 && (v16 & 1) != 0 && !v18 && (v22 & 0x8000000000000000) == 0)
    {
      v31 = 0;
      *(_OWORD *)a5 = *(_OWORD *)result;
      *(_QWORD *)(a5 + 16) = *(_QWORD *)(result + 16);
LABEL_42:
      *(_QWORD *)a4 = value;
      *(_DWORD *)(a4 + 8) = timescale;
      *(_DWORD *)(a4 + 12) = flags;
      *(_QWORD *)(a4 + 16) = epoch;
      *(_QWORD *)(a4 + 24) = v20;
      *(_DWORD *)(a4 + 32) = v8;
      *(_DWORD *)(a4 + 36) = v9;
      v59 = v78;
      *(_QWORD *)(a4 + 40) = v11;
      *(_QWORD *)(a4 + 48) = v59;
      *(_DWORD *)(a4 + 56) = v79;
      *(_DWORD *)(a4 + 60) = v13;
      *(_QWORD *)(a4 + 64) = v14;
      *(_QWORD *)(a4 + 72) = v22;
      *(_DWORD *)(a4 + 80) = v17;
      *(_DWORD *)(a4 + 84) = v16;
      *(_QWORD *)(a4 + 88) = v31;
      return result;
    }
    v64 = v23;
    v65 = v22;
    v70 = (CMTime *)result;
    v66 = v18;
    v67 = v16;
    v68 = v14;
    v69 = v13;
    if ((*(_BYTE *)(a3 + 36) & 1) != 0)
    {
      *(_OWORD *)&time1.start.value = *(_OWORD *)(a3 + 24);
      time1.start.epoch = *(_QWORD *)(a3 + 40);
      *(_OWORD *)&time2.value = v27;
      time2.epoch = v26;
      v61 = v17;
      v32 = a5;
      v33 = v11;
      v34 = v9;
      v35 = flags;
      v36 = v20;
      v37 = v8;
      v38 = epoch;
      v39 = CMTimeCompare(&time1.start, &time2);
      epoch = v38;
      v8 = v37;
      v20 = v36;
      flags = v35;
      v9 = v34;
      v11 = v33;
      a5 = v32;
      v17 = v61;
      if (v39 >= 1)
      {
        memset(&time2, 0, sizeof(time2));
        v40 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)&time1.start.value = *(_OWORD *)(a3 + 48);
        *(_OWORD *)&time1.start.epoch = v40;
        *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a3 + 80);
        CMTimeRangeGetEnd(&time2, &time1);
        rhs = *(CMTime *)(a3 + 72);
        value = *MEMORY[0x1E0CA2E40];
        flags = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 12);
        timescale = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 8);
        v41 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 16);
        v20 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 24);
        v42 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 32);
        v9 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 36);
        v43 = a5;
        v44 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
        v78 = time2.value;
        v45 = time2.flags;
        v79 = time2.timescale;
        v46 = time2.epoch;
        lhs = *v64;
        result = (uint64_t)CMTimeSubtract(&time1.start, &lhs, &rhs);
        epoch = v41;
        v8 = v42;
        v11 = v44;
        v14 = v46;
        v13 = v45;
        v22 = time1.start.value;
        v47 = time1.start.timescale;
        v16 = time1.start.flags;
        v31 = time1.start.epoch;
        *(_OWORD *)v43 = *(_OWORD *)&v70->value;
        *(_QWORD *)(v43 + 16) = v70->epoch;
        v17 = v47;
        goto LABEL_42;
      }
    }
    memset(&time2, 0, sizeof(time2));
    time1.start.value = value;
    time1.start.timescale = timescale;
    time1.start.flags = flags;
    v48 = epoch;
    time1.start.epoch = epoch;
    time1.duration.value = v20;
    time1.duration.timescale = v8;
    time1.duration.flags = v9;
    time1.duration.epoch = v11;
    result = (uint64_t)CMTimeRangeGetEnd(&time2, &time1);
    v76 = *(_QWORD *)(a2 + 24);
    v49 = *(_DWORD *)(a2 + 36);
    v77 = *(_DWORD *)(a2 + 32);
    v50 = *(_QWORD *)(a2 + 40);
    if ((*(_BYTE *)(a2 + 12) & 1) != 0)
    {
      if ((v49 & 1) != 0)
      {
        v51 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
        *(_OWORD *)&time1.start.epoch = v51;
        *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a2 + 32);
        CMTimeRangeGetEnd(&lhs, &time1);
        v76 = lhs.value;
        v49 = lhs.flags;
        v77 = lhs.timescale;
        v50 = lhs.epoch;
      }
      v60 = v50;
      v62 = v49;
      *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
      time1.start.epoch = *(_QWORD *)(a2 + 16);
      lhs.value = value;
      lhs.timescale = timescale;
      lhs.flags = flags;
      lhs.epoch = v48;
      result = CMTimeCompare(&time1.start, &lhs);
      if ((int)result < 1)
      {
        epoch = v48;
      }
      else
      {
        *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
        time1.start.epoch = *(_QWORD *)(a2 + 16);
        lhs = time2;
        result = CMTimeCompare(&time1.start, &lhs);
        if ((result & 0x80000000) != 0)
        {
          memset(&lhs, 0, sizeof(lhs));
          *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
          time1.start.epoch = *(_QWORD *)(a2 + 16);
          rhs.value = value;
          rhs.timescale = timescale;
          rhs.flags = flags;
          rhs.epoch = v48;
          CMTimeSubtract(&lhs, &time1.start, &rhs);
          value = *(_QWORD *)a2;
          flags = *(_DWORD *)(a2 + 12);
          timescale = *(_DWORD *)(a2 + 8);
          v52 = *(_QWORD *)(a2 + 16);
          rhs.value = v20;
          rhs.timescale = v8;
          rhs.flags = v9;
          rhs.epoch = v11;
          start = lhs;
          CMTimeSubtract(&time1.start, &rhs, &start);
          v20 = time1.start.value;
          v8 = time1.start.timescale;
          v9 = time1.start.flags;
          v11 = time1.start.epoch;
          time1.start.value = value;
          time1.start.timescale = timescale;
          time1.start.flags = flags;
          time1.start.epoch = v52;
          time1.duration.value = v20;
          time1.duration.timescale = v8;
          time1.duration.flags = v9;
          time1.duration.epoch = v11;
          result = (uint64_t)CMTimeRangeGetEnd(&rhs, &time1);
          epoch = v52;
          time2 = rhs;
        }
        else
        {
          value = *MEMORY[0x1E0CA2E40];
          flags = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 12);
          timescale = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 8);
          epoch = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 16);
          v20 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 24);
          v8 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 32);
          v9 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 36);
          v11 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
        }
      }
      v49 = v62;
      v50 = v60;
    }
    else
    {
      epoch = v48;
    }
    v53 = flags & 0x1D;
    v13 = v69;
    v14 = v68;
    v16 = v67;
    v54 = v66;
    v55 = v70;
    if (v53 == 1 && (v49 & 1) != 0)
    {
      v63 = epoch;
      time1.start.value = v76;
      time1.start.timescale = v77;
      time1.start.flags = v49;
      time1.start.epoch = v50;
      lhs = time2;
      v56 = v49;
      v57 = v50;
      if ((CMTimeCompare(&time1.start, &lhs) & 0x80000000) == 0)
      {
LABEL_26:
        v55 = v70;
        goto LABEL_35;
      }
      time1.start.value = v76;
      time1.start.timescale = v77;
      time1.start.flags = v56;
      time1.start.epoch = v57;
      lhs.value = value;
      lhs.timescale = timescale;
      lhs.flags = flags;
      lhs.epoch = v63;
      result = CMTimeCompare(&time1.start, &lhs);
      if ((int)result > 0)
      {
        memset(&time1, 0, 24);
        lhs = time2;
        rhs.value = v76;
        rhs.timescale = v77;
        rhs.flags = v56;
        rhs.epoch = v57;
        CMTimeSubtract(&time1.start, &lhs, &rhs);
        rhs.value = v20;
        rhs.timescale = v8;
        rhs.flags = v9;
        rhs.epoch = v11;
        start = time1.start;
        CMTimeSubtract(&lhs, &rhs, &start);
        v20 = lhs.value;
        v8 = lhs.timescale;
        v9 = lhs.flags;
        v11 = lhs.epoch;
        goto LABEL_26;
      }
      value = *MEMORY[0x1E0CA2E40];
      flags = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 12);
      timescale = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 8);
      epoch = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 16);
      v20 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 24);
      v8 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 32);
      v9 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 36);
      v11 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
      v53 = flags & 0x1D;
      v13 = v69;
      v14 = v68;
      v16 = v67;
      v54 = v66;
      v55 = v70;
    }
    if (v53 != 1 && (v13 & 1) != 0 && (v16 & 1) != 0 && !v54)
    {
      v22 = v65;
      if ((v65 & 0x8000000000000000) == 0)
      {
        v31 = 0;
LABEL_41:
        *(_QWORD *)a5 = v20;
        *(_DWORD *)(a5 + 8) = v8;
        *(_DWORD *)(a5 + 12) = v9;
        *(_QWORD *)(a5 + 16) = v11;
        goto LABEL_42;
      }
    }
    v63 = epoch;
LABEL_35:
    time1.start.value = v20;
    time1.start.timescale = v8;
    time1.start.flags = v9;
    time1.start.epoch = v11;
    lhs = *v55;
    v58 = v55;
    result = CMTimeCompare(&time1.start, &lhs);
    if ((result & 0x80000000) != 0)
    {
      *(_OWORD *)&time1.start.value = *(_OWORD *)&v64->value;
      time1.start.epoch = v64->epoch;
      lhs = *v58;
      result = CMTimeCompare(&time1.start, &lhs);
      if ((_DWORD)result)
      {
        lhs.value = v20;
        lhs.timescale = v8;
        lhs.flags = v9;
        lhs.epoch = v11;
        rhs = *v64;
        start = *v58;
        result = CMTimeMultiplyTimeByTimeRatio();
        v22 = time1.start.value;
        v17 = time1.start.timescale;
        v16 = time1.start.flags;
        v31 = time1.start.epoch;
      }
      else
      {
        v22 = v20;
        v17 = v8;
        v16 = v9;
        v31 = v11;
      }
      v13 = v69;
      v14 = v68;
      epoch = v63;
    }
    else
    {
      v13 = v69;
      v14 = v68;
      epoch = v63;
      v22 = v65;
      v31 = v66;
      v16 = v67;
    }
    goto LABEL_41;
  }
  return FigSignalErrorAt();
}

uint64_t FigGaplessInfoCreateSegmentDataForTrack(uint64_t a1, CMTime *a2, __int128 *a3, __CFData **a4)
{
  void (*v8)(uint64_t, CMTimeRange *, CFTypeRef *);
  CFTypeRef v9;
  uint64_t (*v10)(CFTypeRef, CMTimeRange *);
  uint64_t v11;
  int v12;
  int v13;
  CMTimeValue value;
  uint64_t (*v15)(CMTimeValue, uint64_t);
  int v16;
  int v17;
  __CFData *Mutable;
  __CFData *v19;
  UInt8 *MutableBytePtr;
  UInt8 *v21;
  int v22;
  CFTypeRef v23;
  void (*v24)(CFTypeRef, CMTimeRange *);
  UInt8 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  CFTypeRef v30;
  void (*v31)(CFTypeRef, uint64_t);
  __int128 v32;
  __int128 v33;
  unsigned int v34;
  UInt8 *v35;
  UInt8 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  UInt8 *v41;
  __int128 v42;
  __int128 v43;
  CFIndex v44;
  uint64_t v45;
  UInt8 *v47;
  int v48;
  __CFData *theData;
  _BOOL4 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  CMTime lhs;
  _BYTE rhs[32];
  __int128 v59;
  CMTimeRange v60;
  _OWORD v61[3];
  CMTimeRange time2[2];
  _BYTE time1[32];
  __int128 v64;
  CMTimeRange v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  CMTimeRange v71;
  CMTimeRange v72;
  CMTimeRange v73;
  CFTypeRef v74[3];

  v74[0] = 0;
  if (!a1)
  {
    if ((a2->flags & 0x1D) == 1)
    {
      v13 = 1;
      goto LABEL_14;
    }
    v11 = FigSignalErrorAt();
    goto LABEL_63;
  }
  v8 = *(void (**)(uint64_t, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8
    || (*(_OWORD *)&v72.start.value = *MEMORY[0x1E0CA2E28],
        v72.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16),
        v8(a1, &v72, v74),
        (v9 = v74[0]) == 0))
  {
    v13 = 0;
    goto LABEL_14;
  }
  v72.start.value = 0;
  v10 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v10)
  {
    v45 = 4294954514;
    goto LABEL_55;
  }
  v11 = v10(v9, &v72);
  if ((_DWORD)v11)
  {
LABEL_63:
    v45 = v11;
    goto LABEL_55;
  }
  v12 = 1;
  do
  {
    v13 = v12;
    value = v72.start.value;
    v15 = *(uint64_t (**)(CMTimeValue, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v15)
      break;
    v16 = v15(value, 1);
    v12 = v13 + 1;
  }
  while (!v16);
  if (v72.start.value)
    CFRelease((CFTypeRef)v72.start.value);
LABEL_14:
  v50 = (*((_DWORD *)a3 + 3) & 0x1D) != 1 && (*((_DWORD *)a3 + 9) & 0x1D) != 1;
  if (!v13)
  {
    v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    v45 = 0;
    goto LABEL_56;
  }
  v17 = v13 << !v50;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 96 * v17);
  v19 = Mutable;
  if (!Mutable)
  {
    v45 = FigSignalErrorAt();
    goto LABEL_56;
  }
  CFDataSetLength(Mutable, 96 * v17);
  MutableBytePtr = CFDataGetMutableBytePtr(v19);
  if (!MutableBytePtr)
  {
    v45 = FigSignalErrorAt();
    if (!(_DWORD)v45)
      goto LABEL_56;
    CFRelease(v19);
LABEL_55:
    v19 = 0;
    goto LABEL_56;
  }
  v21 = MutableBytePtr;
  v48 = v13 << !v50;
  theData = v19;
  v22 = 0;
  v55 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
  v56 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
  v53 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
  v54 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
  v51 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
  v52 = *MEMORY[0x1E0CA2E20];
  do
  {
    *(_OWORD *)&v72.duration.timescale = v56;
    *(_OWORD *)&v73.start.value = v55;
    *(_OWORD *)&v73.start.epoch = v54;
    *(_OWORD *)&v73.duration.timescale = v53;
    *(_OWORD *)&v72.start.value = v52;
    *(_OWORD *)&v72.start.epoch = v51;
    v23 = v74[0];
    if (v74[0])
    {
      v24 = *(void (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v24)
        v24(v23, &v72);
    }
    else
    {
      v72.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      *(_OWORD *)&v72.start.value = *MEMORY[0x1E0CA2E68];
      v72.duration = *a2;
      v73 = v72;
    }
    if (v50)
    {
      v25 = &v21[96 * v22++];
      v26 = *(_OWORD *)&v72.start.epoch;
      *(_OWORD *)v25 = *(_OWORD *)&v72.start.value;
      *((_OWORD *)v25 + 1) = v26;
      v27 = *(_OWORD *)&v72.duration.timescale;
      v28 = *(_OWORD *)&v73.start.value;
      v29 = *(_OWORD *)&v73.duration.timescale;
      *((_OWORD *)v25 + 4) = *(_OWORD *)&v73.start.epoch;
      *((_OWORD *)v25 + 5) = v29;
      *((_OWORD *)v25 + 2) = v27;
      *((_OWORD *)v25 + 3) = v28;
    }
    else
    {
      v70 = v56;
      *(_OWORD *)&v71.start.value = v55;
      *(_OWORD *)&v71.start.epoch = v54;
      *(_OWORD *)&v71.duration.timescale = v53;
      v68 = v52;
      v69 = v51;
      v66 = *MEMORY[0x1E0CA2E68];
      v67 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      do
      {
        v64 = v56;
        *(_OWORD *)&v65.start.value = v55;
        *(_OWORD *)&v65.start.epoch = v54;
        *(_OWORD *)&v65.duration.timescale = v53;
        *(_OWORD *)time1 = v52;
        *(_OWORD *)&time1[16] = v51;
        time2[0] = v72;
        time2[1] = v73;
        v32 = *a3;
        v33 = a3[2];
        v61[1] = a3[1];
        v61[2] = v33;
        v59 = v70;
        v60 = v71;
        v61[0] = v32;
        *(_OWORD *)rhs = v68;
        *(_OWORD *)&rhs[16] = v69;
        FigGaplessInfoAdjustEditSegmentAccordingtoGaplessAudioTimeRange(&time2[0].start, (uint64_t)v61, (uint64_t)rhs, (uint64_t)time1, (uint64_t)&v66);
        v70 = v64;
        v71 = v65;
        v68 = *(_OWORD *)time1;
        v69 = *(_OWORD *)&time1[16];
        v34 = v22 - 1;
        if (v22 < 1
          || (*(_DWORD *)&v21[96 * v34 + 12] & 0x1D) == 1
          || (v21[96 * v34 + 60] & 1) == 0
          || (v35 = &v21[96 * v34], (v35[84] & 1) == 0)
          || *(_QWORD *)&v21[96 * v34 + 88]
          || (v41 = v35 + 72, (*((_QWORD *)v35 + 9) & 0x8000000000000000) != 0)
          || (time1[12] & 0x1D) == 1
          || (v65.start.flags & 1) == 0
          || (v65.duration.flags & 1) == 0
          || v65.duration.epoch
          || v65.duration.value < 0)
        {
          v36 = &v21[96 * v22++];
          v37 = *(_OWORD *)&time1[16];
          *(_OWORD *)v36 = *(_OWORD *)time1;
          *((_OWORD *)v36 + 1) = v37;
          v38 = v64;
          v39 = *(_OWORD *)&v65.start.value;
          v40 = *(_OWORD *)&v65.duration.timescale;
          *((_OWORD *)v36 + 4) = *(_OWORD *)&v65.start.epoch;
          *((_OWORD *)v36 + 5) = v40;
          *((_OWORD *)v36 + 2) = v38;
          *((_OWORD *)v36 + 3) = v39;
        }
        else
        {
          v47 = &v21[96 * v34];
          time2[0] = v65;
          CMTimeRangeGetEnd(&lhs, time2);
          v42 = *((_OWORD *)v47 + 3);
          *(_QWORD *)&rhs[16] = *((_QWORD *)v47 + 8);
          *(_OWORD *)rhs = v42;
          CMTimeSubtract(&time2[0].start, &lhs, (CMTime *)rhs);
          v43 = *(_OWORD *)&time2[0].start.value;
          *((_QWORD *)v41 + 2) = time2[0].start.epoch;
          *(_OWORD *)v41 = v43;
        }
        if (v13 < 2)
          break;
        *(_OWORD *)time1 = v66;
        *(_QWORD *)&time1[16] = v67;
        time2[0].start = v72.duration;
      }
      while (CMTimeCompare((CMTime *)time1, &time2[0].start) < 0);
    }
    v30 = v74[0];
    if (v74[0])
    {
      v31 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v31)
        v31(v30, 1);
    }
    --v13;
  }
  while (v13);
  if (v22 >= v48)
  {
    v45 = 0;
    v19 = theData;
  }
  else
  {
    v44 = 96 * v22;
    v19 = theData;
    CFDataSetLength(theData, v44);
    v45 = 0;
  }
LABEL_56:
  if (v74[0])
    CFRelease(v74[0]);
  *a4 = v19;
  return v45;
}

uint64_t FigSimpleRenderPipelineCreateWithCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, _QWORD *a7)
{
  uint64_t v12;
  uint64_t DerivedStorage;
  uint64_t v14;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const __CFBoolean *Value;
  uint64_t v17;

  if (!a7 || !a2 || (*(_DWORD *)(a5 + 12) & 0x1D) != 1)
    return FigSignalErrorAt();
  FigCFDictionaryGetBooleanIfPresent();
  FigRenderPipelineGetClassID();
  v12 = CMDerivedObjectCreate();
  if ((_DWORD)v12)
    return v12;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 32) = a2;
  *(_QWORD *)(DerivedStorage + 40) = a3;
  *(_QWORD *)(DerivedStorage + 48) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v14 = *(_QWORD *)(a5 + 16);
  *(_OWORD *)(DerivedStorage + 56) = *(_OWORD *)a5;
  *(_QWORD *)(DerivedStorage + 72) = v14;
  *(_BYTE *)(DerivedStorage + 88) = 0;
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  if (a6)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(a6, CFSTR("SortSampleBufferQueueByOutputPTS"));
    if (Value)
    {
      if (CFBooleanGetValue(Value))
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
    }
  }
  v17 = CMBufferQueueCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 16));
  if (!(_DWORD)v17)
    *a7 = 0;
  return v17;
}

uint64_t figSimpleRenderPipelineInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  dispatch_queue_t *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v3 = (_QWORD *)DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      *(_BYTE *)DerivedStorage = 1;
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
      v4 = (dispatch_queue_t *)v3[3];
      v3[3] = 0;
      MEMORY[0x19402EF04](v3[1]);
      if (v4)
      {
        TMCInvalidate(v4);
        CFRelease(v4);
      }
      simplepipelineSetTimebase(a1, 0);
      v5 = (const void *)v3[2];
      if (v5)
      {
        CFRelease(v5);
        v3[2] = 0;
      }
    }
  }
  return 0;
}

uint64_t figSimpleRenderPipelineFinalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  figSimpleRenderPipelineInvalidate(a1);
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *figSimpleRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSimpleRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t figSimpleRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  _BYTE *DerivedStorage;
  _QWORD *v8;
  const void *v10;
  uint64_t v11;
  const void *v12;
  dispatch_queue_t *v13;
  CFDictionaryRef v14;
  CMTime v15;
  CMTime v16;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("SourceSampleBufferQueue"), a2))
  {
    *a4 = (CFDictionaryRef)v8[2];
    v10 = (const void *)v8[2];
    if (!v10)
      return 0;
LABEL_6:
    CFRetain(v10);
    return 0;
  }
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    *a4 = (CFDictionaryRef)v8[10];
    v10 = (const void *)v8[10];
    if (!v10)
      return 0;
    goto LABEL_6;
  }
  if (CFEqual(CFSTR("PerformanceDictionary"), a2))
  {
    v11 = 0;
    *a4 = 0;
  }
  else if (CFEqual(CFSTR("EndPresentationTimeForDecodedSamples"), a2))
  {
    memset(&v16, 0, sizeof(v16));
    MEMORY[0x19402EEEC](v8[1]);
    v12 = (const void *)v8[3];
    if (v12)
    {
      v13 = (dispatch_queue_t *)CFRetain(v12);
      MEMORY[0x19402EF04](v8[1]);
      if (v13)
      {
        v11 = TMCGetEndPresentationTimeForDecodedSamples(v13, (uint64_t)&v16);
        if (!(_DWORD)v11)
        {
          v15 = v16;
          v14 = CMTimeCopyAsDictionary(&v15, a3);
          *a4 = v14;
          if (v14)
            v11 = 0;
          else
            v11 = 4294954510;
        }
        CFRelease(v13);
        return v11;
      }
    }
    else
    {
      MEMORY[0x19402EF04](v8[1]);
    }
    return 4294954513;
  }
  else
  {
    return 4294954446;
  }
  return v11;
}

uint64_t figSimpleRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;
  CFTypeID TypeID;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || *DerivedStorage || CFEqual(CFSTR("SourceSampleBufferQueue"), a2))
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    if (!a3 || (TypeID = CMTimebaseGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      simplepipelineSetTimebase(a1, (uint64_t)a3);
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("PerformanceDictionary"), a2) || CFEqual(CFSTR("EndPresentationTimeForDecodedSamples"), a2))
    return FigSignalErrorAt();
  return 4294954446;
}

void simplepipelineSetTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  dispatch_queue_t *v5;
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  const void *v8;
  const void *v9;
  dispatch_queue_t *v10;
  _QWORD v11[5];
  uint64_t v12;
  void *keys[2];
  uint64_t v14;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 80))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
    v5 = *(dispatch_queue_t **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 8));
    if (v5)
    {
      TMCInvalidate(v5);
      CFRelease(v5);
    }
    CFRelease(*(CFTypeRef *)(v4 + 80));
  }
  *(_QWORD *)(v4 + 80) = a2;
  if (a2)
  {
    v12 = 0;
    v11[0] = 0;
    v11[1] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v11[2] = simplepipelineSendSample;
    v11[3] = simplepipelineReleaseService;
    v11[4] = simplepipelineResetOutput;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (*(_BYTE *)(v4 + 88))
    {
      keys[0] = CFSTR("AllowCaptionGroupSampleBuffers");
      values[0] = *(void **)MEMORY[0x1E0C9AE50];
      v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(const void **)(v4 + 16);
    *(_OWORD *)keys = *(_OWORD *)(v4 + 56);
    v9 = *(const void **)(v4 + 80);
    v14 = *(_QWORD *)(v4 + 72);
    TMCCreateWithQueueAndOptions((uint64_t)v6, v8, (uint64_t)keys, (uint64_t)v11, v9, (uint64_t)v7, &v12);
    MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 8));
    v10 = *(dispatch_queue_t **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = v12;
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 8));
    if (v10)
    {
      TMCInvalidate(v10);
      CFRelease(v10);
    }
    CFRetain(*(CFTypeRef *)(v4 + 80));
    if (v7)
      CFRelease(v7);
  }
}

uint64_t simplepipelineSendSample(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v6 = DerivedStorage;
      if (!*(_BYTE *)DerivedStorage)
      {
        if (*(_QWORD *)(DerivedStorage + 32))
        {
          v7 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v7)
          {
            v8 = (const void *)v7;
            (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v7, a2);
            CFRelease(v8);
          }
        }
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t simplepipelineResetOutput()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *v5;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v3 = DerivedStorage;
      if (!*(_BYTE *)DerivedStorage)
      {
        if (*(_QWORD *)(DerivedStorage + 40))
        {
          v4 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v4)
          {
            v5 = (const void *)v4;
            (*(void (**)(void))(v3 + 40))();
            CFRelease(v5);
          }
        }
      }
    }
    CFRelease(v1);
  }
  return 0;
}

uint64_t FigSampleBufferConsumerCreateForFrameSilo(const void *a1, _QWORD *a2)
{
  uint64_t v4;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  FigSampleBufferConsumerGetClassID();
  v4 = CMDerivedObjectCreate();
  if (!(_DWORD)v4)
  {
    *(_QWORD *)CMBaseObjectGetDerivedStorage() = a1;
    CFRetain(a1);
    *a2 = 0;
  }
  return v4;
}

void otfs_finalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *otfs_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferConsumerForFrameSilo %p>"), a1);
  return Mutable;
}

uint64_t otfs_sendSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  VTFrameSiloRef *DerivedStorage;

  DerivedStorage = (VTFrameSiloRef *)CMBaseObjectGetDerivedStorage();
  return VTFrameSiloAddSampleBuffer(*DerivedStorage, a2);
}

uint64_t otfs_isQueueAtOrAboveHighWater()
{
  return 0;
}

uint64_t otfs_isQueueBelowLowWater()
{
  return 1;
}

uint64_t otfs_installLowWaterTrigger()
{
  return 0;
}

uint64_t otfs_removeLowWaterTrigger()
{
  return 0;
}

__CFString *figAudioQueueRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAudioQueueRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t faqrp_setTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_log_type_t type;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v4 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 48));
    if (*(_QWORD *)(v4 + 112))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CFRelease(*(CFTypeRef *)(v4 + 112));
    }
    *(_QWORD *)(v4 + 112) = a2;
    if (a2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CFRetain(*(CFTypeRef *)(v4 + 112));
      if (dword_1EE2A2CB0)
      {
        v7 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    return MEMORY[0x19402EF04](*(_QWORD *)(v4 + 48));
  }
  return result;
}

void faqrp_DecodeError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *Value;
  CFTypeID TypeID;
  CFTypeID v7;
  void *values;

  Value = a5;
  values = 0;
  if (!a5)
    goto LABEL_7;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(Value))
    goto LABEL_6;
  Value = (void *)CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("FigAudioQueueNotificationParameter_ConverterError"));
  values = Value;
  if (!Value)
    goto LABEL_7;
  v7 = CFNumberGetTypeID();
  if (v7 == CFGetTypeID(Value))
    Value = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigRenderPipelineNotificationParameter_ErrorCode, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  else
LABEL_6:
    Value = 0;
LABEL_7:
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Value)
    CFRelease(Value);
}

uint64_t faqrp_PreemptedError()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_RanDry()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_SegmentFinished()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_playResourceReleased()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_defaultDeviceChanged()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_latencyChanged()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_faqRequiresManualRestartBecauseConfigurationChanged()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_audioQueueDecodeFormatCouldBeImprovedByRebuild()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_audioQueueStartupPerformanceMetricsAvailable()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_audioQueueDeviceHasDisconnected()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_timebaseRateChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  v4 = result;
  if (dword_1EE2A2CB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)v4 && !*(_BYTE *)(v4 + 65))
    return faqrp_startStopAudioQueueSlavedToTimebase(a2, *(_QWORD *)(v4 + 40));
  return result;
}

uint64_t faqrp_startStopAudioQueueSlavedToTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  CMClockOrTimebaseRef v7;
  uint64_t RelativeRateAndAnchorTime;
  CMTimeEpoch v9;
  CMClockRef HostTimeClock;
  BOOL v11;
  float v12;
  float v13;
  BOOL v14;
  __int128 v16;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v20;
  CMTime outRelativeToClockOrTimebaseAnchorTime;
  CMTime outOfClockOrTimebaseAnchorTime;
  Float64 outRelativeRate;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  outRelativeRate = 0.0;
  memset(&outOfClockOrTimebaseAnchorTime, 0, sizeof(outOfClockOrTimebaseAnchorTime));
  memset(&outRelativeToClockOrTimebaseAnchorTime, 0, sizeof(outRelativeToClockOrTimebaseAnchorTime));
  if (!*(_BYTE *)DerivedStorage)
  {
    v6 = DerivedStorage;
    v7 = CMTimebaseCopySource(*(CMTimebaseRef *)(DerivedStorage + 112));
    RelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(v6 + 112), v7, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
    if ((_DWORD)RelativeRateAndAnchorTime)
    {
      v5 = RelativeRateAndAnchorTime;
      if (!v7)
        return v5;
      goto LABEL_18;
    }
    if (outRelativeRate == 0.0)
    {
      FigAudioQueuePause(a2);
      *(_BYTE *)(v6 + 64) = 0;
      v14 = outRelativeRate == 0.0;
      if (outRelativeRate == 1.0)
        v14 = 1;
      *(_BYTE *)(v6 + 101) = v14;
      faqrp_updateTimePitchBypass();
    }
    else
    {
      memset(&v20, 0, sizeof(v20));
      if (!*(_BYTE *)(v6 + 64))
      {
        time1 = outOfClockOrTimebaseAnchorTime;
        v16 = *MEMORY[0x1E0CA2E68];
        *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
        v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        time2.epoch = v9;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          time2 = outRelativeToClockOrTimebaseAnchorTime;
          rhs = outOfClockOrTimebaseAnchorTime;
          CMTimeSubtract(&time1, &time2, &rhs);
          outRelativeToClockOrTimebaseAnchorTime = time1;
          *(_OWORD *)&outOfClockOrTimebaseAnchorTime.value = v16;
          outOfClockOrTimebaseAnchorTime.epoch = v9;
        }
        HostTimeClock = CMClockGetHostTimeClock();
        time1 = outRelativeToClockOrTimebaseAnchorTime;
        CMSyncConvertTime(&v20, &time1, v7, HostTimeClock);
        v11 = outRelativeRate == 0.0;
        if (outRelativeRate == 1.0)
          v11 = 1;
        *(_BYTE *)(v6 + 101) = v11;
        faqrp_updateTimePitchBypass();
        FigAudioQueueSetParameter(a2, 2u, *(AudioQueueParameterValue *)(v6 + 216));
        v12 = outRelativeRate;
        time1 = outOfClockOrTimebaseAnchorTime;
        faqrp_primeAudioChain(v12, a1, (uint64_t)&time1);
        v13 = outRelativeRate;
        time1 = outOfClockOrTimebaseAnchorTime;
        time2 = v20;
        v5 = FigAudioQueueStart2(a2, &time1, &time2, (uint64_t)faqrp_startTimebaseAtAnchorAudioTimeStamp, a1, 0, v13);
        if (!(_DWORD)v5)
        {
          *(_BYTE *)(v6 + 64) = 1;
          if (!v7)
            return v5;
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    v5 = 0;
LABEL_17:
    if (!v7)
      return v5;
LABEL_18:
    CFRelease(v7);
    return v5;
  }
  return 4294954444;
}

uint64_t faqrp_updateTimePitchBypass()
{
  uint64_t DerivedStorage;
  uint64_t v2;
  const __CFNumber **v3;
  const __CFNumber *v4;
  const __CFNumber *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 4294954444;
  v2 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 67))
  {
    if (*(_BYTE *)(DerivedStorage + 101) && !*(_BYTE *)(DerivedStorage + 100))
      v3 = (const __CFNumber **)MEMORY[0x1E0C9AE50];
    else
      v3 = (const __CFNumber **)MEMORY[0x1E0C9AE40];
    v4 = *v3;
    FigAudioQueueSetProperty(*(_QWORD *)(DerivedStorage + 40), CFSTR("TimePitchBypass"), *v3);
    if (*(_BYTE *)(v2 + 66))
    {
      if (v4 == (const __CFNumber *)*MEMORY[0x1E0C9AE50])
        v5 = (const __CFNumber *)*MEMORY[0x1E0C9AE40];
      else
        v5 = (const __CFNumber *)*MEMORY[0x1E0C9AE50];
      FigAudioQueueSetProperty(*(_QWORD *)(v2 + 40), CFSTR("EnableTimePitch"), v5);
    }
  }
  return 0;
}

uint64_t faqrp_primeAudioChain(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  CMTime *v8;
  CMTime *v9;
  __int128 v10;
  uint64_t v11;
  CMTime v12;
  CMTime v13;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v6 = result;
    if ((*(_BYTE *)(a3 + 12) & 1) != 0)
    {
      v7 = *(_QWORD *)(result + 40);
      v13 = *(CMTime *)a3;
      v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v8 = &v13;
      v9 = &v12;
    }
    else
    {
      memset(&v13, 0, sizeof(v13));
      CMTimebaseGetTime(&v13, *(CMTimebaseRef *)(result + 112));
      v7 = *(_QWORD *)(v6 + 40);
      v12 = v13;
      v10 = *MEMORY[0x1E0CA2E18];
      v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v8 = &v12;
      v9 = (CMTime *)&v10;
    }
    return FigAudioQueuePrime(v7, v8, (uint64_t)v9, 0, a1);
  }
  return result;
}

uint64_t faqrp_startTimebaseCommon(float a1, uint64_t a2, OpaqueCMTimebase *a3, CMTime *a4, CMTime *a5, CMTime *a6)
{
  double v11;
  __int128 v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMClockOrTimebaseRef v14;
  CMClockRef HostTimeClock;
  NSObject *v16;
  NSObject *v17;
  CMTime v19;
  CMTime time;
  CMTime timebaseTime;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  time = *a6;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a6 = timebaseTime;
  time = *a4;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a4 = timebaseTime;
  time = *a5;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a5 = timebaseTime;
  v11 = a1;
  a6->value += (uint64_t)((double)(a5->value - a4->value) / v11 + 0.5);
  v12 = *(_OWORD *)&a5->value;
  a4->epoch = a5->epoch;
  *(_OWORD *)&a4->value = v12;
  if (dword_1EE2A2CB0)
  {
    LODWORD(v19.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v14 = CMTimebaseCopySource(a3);
  memset(&v19, 0, sizeof(v19));
  HostTimeClock = CMClockGetHostTimeClock();
  timebaseTime = *a6;
  CMSyncConvertTime(&v19, &timebaseTime, HostTimeClock, v14);
  if (dword_1EE2A2CB0)
  {
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v14)
    CFRelease(v14);
  time = *a4;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a4 = timebaseTime;
  time = v19;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  v19 = timebaseTime;
  if (dword_1EE2A2CB0)
  {
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  timebaseTime = *a4;
  time = v19;
  return CMTimebaseSetRateAndAnchorTime(a3, v11, &timebaseTime, &time);
}

uint64_t faqrp_setMuted(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  v5 = 1065353216;
  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v4 = result;
    if (*(unsigned __int8 *)(result + 103) != a2)
    {
      if (a2)
      {
        if (!FigAudioQueueGetParameter(*(_QWORD *)(result + 40), 1u, &v5)
          && !FigAudioQueueSetParameter(*(_QWORD *)(v4 + 40), 1u, 0.0))
        {
          *(_BYTE *)(v4 + 108) = 1;
          *(_DWORD *)(v4 + 104) = v5;
        }
        *(_BYTE *)(v4 + 103) = 1;
        return faqrp_updateFAQDiscardSampleBuffersProperty();
      }
      else
      {
        *(_BYTE *)(result + 103) = 0;
        result = faqrp_updateFAQDiscardSampleBuffersProperty();
        if (*(_BYTE *)(v4 + 108))
        {
          result = FigAudioQueueSetParameter(*(_QWORD *)(v4 + 40), 1u, *(AudioQueueParameterValue *)(v4 + 104));
          *(_BYTE *)(v4 + 108) = 0;
        }
      }
    }
  }
  return result;
}

_BYTE *faqrp_setSuspended(uint64_t a1, int a2)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result && result[102] != a2)
  {
    result[102] = a2;
    return (_BYTE *)faqrp_updateFAQDiscardSampleBuffersProperty();
  }
  return result;
}

uint64_t faqrp_updateFAQDiscardSampleBuffersProperty()
{
  uint64_t result;
  const __CFNumber **v1;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v1 = (const __CFNumber **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(result + 103) && !*(_BYTE *)(result + 102))
      v1 = (const __CFNumber **)MEMORY[0x1E0C9AE40];
    return FigAudioQueueSetProperty(*(_QWORD *)(result + 40), CFSTR("DiscardSampleBuffers"), *v1);
  }
  return result;
}

uint64_t figAudioQueueRenderPipelineSetRateAndAnchorTime(const void *a1, CMTime *a2, uint64_t a3, float a4, AudioQueueParameterValue a5)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  const __CFNumber *v14;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v17;
  CMTimeEpoch v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  CMTimeValue v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  double Seconds;
  Float64 v29;
  OpaqueCMClock *HostTimeClock;
  Float64 v31;
  uint64_t v32;
  uint64_t v33;
  CMClockOrTimebaseRef v34;
  CMClockRef v35;
  CMTimeEpoch v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  Float64 v41;
  Float64 v42;
  OpaqueCMTimebase *v43;
  CMTimeEpoch v44;
  float valuePtr;
  os_log_type_t v46;
  os_log_type_t v47[4];
  CMTime v48;
  CMTime type;
  CMTime v50;
  CMTimeValue v51;
  CMTimeScale v52;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTime immediateSourceTime;
  uint64_t v56;
  __int16 v57;
  double v58;
  __int16 v59;
  Float64 v60;
  __int16 v61;
  Float64 v62;
  CMTime time;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  valuePtr = a4;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2CB0)
  {
    LODWORD(v50.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)(DerivedStorage + 66))
    goto LABEL_4;
  if (a4 == 0.0)
  {
    time = *a2;
    v12 = faqrp_stopTimebaseAndAudioQueue(a1, (__int128 *)&time.value);
    *(_BYTE *)(DerivedStorage + 101) = 1;
    faqrp_updateTimePitchBypass();
    goto LABEL_5;
  }
  *(_BYTE *)(DerivedStorage + 101) = a4 == 1.0;
  faqrp_updateTimePitchBypass();
  if (*(_BYTE *)(DerivedStorage + 64))
    v12 = faqrp_stopTimebaseAndAudioQueue(a1, MEMORY[0x1E0CA2E18]);
  else
    v12 = 0;
  FigAudioQueueSetParameter(*(_QWORD *)(DerivedStorage + 40), 2u, a5);
  *(AudioQueueParameterValue *)(DerivedStorage + 216) = a5;
  if (*(_BYTE *)(DerivedStorage + 64))
  {
    v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
    FigAudioQueueSetProperty(*(_QWORD *)(DerivedStorage + 40), CFSTR("TimebaseRate"), v14);
    CFRelease(v14);
    CMTimebaseSetRate(*(CMTimebaseRef *)(DerivedStorage + 112), valuePtr);
    goto LABEL_5;
  }
  time = *a2;
  faqrp_primeAudioChain(a4, (uint64_t)a1, (uint64_t)&time);
  value = a2->value;
  flags = a2->flags;
  timescale = a2->timescale;
  epoch = a2->epoch;
  v51 = *(_QWORD *)a3;
  v17 = *(_DWORD *)(a3 + 12);
  v52 = *(_DWORD *)(a3 + 8);
  v18 = *(_QWORD *)(a3 + 16);
  v19 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)v19)
  {
LABEL_4:
    v12 = 4294954444;
  }
  else
  {
    v20 = v19;
    if ((flags & 0x1D) != 1)
    {
      CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v19 + 112));
      value = time.value;
      flags = time.flags;
      timescale = time.timescale;
      epoch = time.epoch;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v20 + 48));
    v21 = *(const void **)(v20 + 112);
    v22 = *(const void **)(v20 + 120);
    *(_QWORD *)(v20 + 120) = v21;
    if (v21)
      CFRetain(v21);
    if (v22)
      CFRelease(v22);
    *(_QWORD *)(v20 + 128) = value;
    *(_DWORD *)(v20 + 136) = timescale;
    *(_DWORD *)(v20 + 140) = flags;
    v23 = v51;
    *(_QWORD *)(v20 + 144) = epoch;
    *(_QWORD *)(v20 + 152) = v23;
    *(_DWORD *)(v20 + 160) = v52;
    *(_DWORD *)(v20 + 164) = v17;
    *(_QWORD *)(v20 + 168) = v18;
    *(float *)(v20 + 176) = a4;
    MEMORY[0x19402EF04](*(_QWORD *)(v20 + 48));
    *(_BYTE *)(v20 + 64) = 1;
    if (dword_1EE2A2CB0)
    {
      v44 = epoch;
      LODWORD(v48.value) = 0;
      v47[0] = OS_LOG_TYPE_DEFAULT;
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v25 = v48.value;
      if (os_log_type_enabled(v24, v47[0]))
        v26 = v25;
      else
        v26 = v25 & 0xFFFFFFFE;
      if (v26)
      {
        v27 = *(_QWORD *)(v20 + 112);
        time.value = value;
        time.timescale = timescale;
        time.flags = flags;
        time.epoch = v44;
        Seconds = CMTimeGetSeconds(&time);
        time.value = v51;
        time.timescale = v52;
        time.flags = v17;
        time.epoch = v18;
        v29 = CMTimeGetSeconds(&time);
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&type, HostTimeClock);
        time.value = v51;
        time.timescale = v52;
        time.flags = v17;
        time.epoch = v18;
        CMTimeSubtract(&v50, &time, &type);
        v31 = CMTimeGetSeconds(&v50);
        LODWORD(immediateSourceTime.value) = 136316418;
        *(CMTimeValue *)((char *)&immediateSourceTime.value + 4) = (CMTimeValue)"faqrp_startTimebaseAndAudioQueue";
        LOWORD(immediateSourceTime.flags) = 2048;
        *(_QWORD *)((char *)&immediateSourceTime.flags + 2) = a1;
        HIWORD(immediateSourceTime.epoch) = 2048;
        v56 = v27;
        v57 = 2048;
        v58 = Seconds;
        v59 = 2048;
        v60 = v29;
        v61 = 2048;
        v62 = v31;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      epoch = v44;
    }
    v32 = *(_QWORD *)(v20 + 40);
    time.value = value;
    time.timescale = timescale;
    time.flags = flags;
    time.epoch = epoch;
    immediateSourceTime.value = v51;
    immediateSourceTime.timescale = v52;
    immediateSourceTime.flags = v17;
    immediateSourceTime.epoch = v18;
    v33 = FigAudioQueueStart2(v32, &time, &immediateSourceTime, (uint64_t)faqrp_startTimebaseAtAnchorAudioTimeStamp, (uint64_t)a1, 0, a4);
    if ((_DWORD)v33)
    {
      v12 = v33;
      *(_BYTE *)(v20 + 64) = 0;
      FigSignalErrorAt();
    }
    else
    {
      if ((v17 & 0x1D) == 1)
      {
        v34 = CMTimebaseCopySource(*(CMTimebaseRef *)(v20 + 112));
        memset(&v48, 0, sizeof(v48));
        v35 = CMClockGetHostTimeClock();
        time.value = v51;
        time.timescale = v52;
        time.flags = v17;
        time.epoch = v18;
        CMSyncConvertTime(&v48, &time, v35, v34);
        if (v34)
          CFRelease(v34);
        if (dword_1EE2A2CB0)
        {
          v36 = epoch;
          *(_DWORD *)v47 = 0;
          v46 = OS_LOG_TYPE_DEFAULT;
          v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v38 = *(_DWORD *)v47;
          if (os_log_type_enabled(v37, v46))
            v39 = v38;
          else
            v39 = v38 & 0xFFFFFFFE;
          if (v39)
          {
            v40 = *(_QWORD *)(v20 + 112);
            time.value = value;
            time.timescale = timescale;
            time.flags = flags;
            time.epoch = v36;
            v41 = CMTimeGetSeconds(&time);
            time = v48;
            v42 = CMTimeGetSeconds(&time);
            LODWORD(immediateSourceTime.value) = 136316418;
            *(CMTimeValue *)((char *)&immediateSourceTime.value + 4) = (CMTimeValue)"faqrp_startTimebaseAndAudioQueue";
            LOWORD(immediateSourceTime.flags) = 2048;
            *(_QWORD *)((char *)&immediateSourceTime.flags + 2) = a1;
            HIWORD(immediateSourceTime.epoch) = 2048;
            v56 = v40;
            v57 = 2048;
            v58 = a4;
            v59 = 2048;
            v60 = v41;
            v61 = 2048;
            v62 = v42;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          epoch = v36;
        }
        v43 = *(OpaqueCMTimebase **)(v20 + 112);
        time.value = value;
        time.timescale = timescale;
        time.flags = flags;
        time.epoch = epoch;
        immediateSourceTime = v48;
        CMTimebaseSetRateAndAnchorTime(v43, a4, &time, &immediateSourceTime);
      }
      v12 = 0;
    }
  }
LABEL_5:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v12;
}

uint64_t figAudioQueueRenderPipelineStartAndUseTimebaseAtTransition(uint64_t a1, CMTimebaseRef timebase, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v12;
  CFMutableDictionaryRef v13;
  __CFDictionary *Mutable;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (!timebase || !a4 || CMTimebaseGetRate(timebase) != 0.0)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)(DerivedStorage + 66))
  {
    v16 = 4294954444;
  }
  else
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(DerivedStorage + 184)
      || (v13 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(DerivedStorage + 184) = v13) != 0))
    {
      Mutable = CFDictionaryCreateMutable(v12, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("TransitionTimebase"), timebase);
      if (a5)
      {
        FigCFDictionarySetCFIndex();
        FigCFDictionarySetCFIndex();
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 184), a4, Mutable);
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v17 = *(_OWORD *)a3;
      v18 = *(_QWORD *)(a3 + 16);
      v16 = FigAudioQueueRequestTransitionCallback(v15, &v17, a4, (uint64_t)faqrp_transitionCallback, a1);
      if (Mutable)
        CFRelease(Mutable);
    }
    else
    {
      v16 = FigSignalErrorAt();
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v16;
}

uint64_t figAudioQueueRenderPipelineStartOffline(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v4;
  uint64_t v5;
  uint64_t started;
  __int128 v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)(DerivedStorage + 66))
  {
    v4 = *(_OWORD *)a2;
    *(_QWORD *)(DerivedStorage + 84) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 68) = v4;
    v5 = *(_QWORD *)(DerivedStorage + 40);
    v8 = *(_OWORD *)a2;
    v9 = *(_QWORD *)(a2 + 16);
    started = FigAudioQueueStartOffline(v5, &v8);
    if ((_DWORD)started)
      FigSignalErrorAt();
  }
  else
  {
    started = 4294954444;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return started;
}

uint64_t figAudioQueueRenderPipelineStopOffline()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)(DerivedStorage + 66))
  {
    v1 = FigAudioQueueStopOffline(*(_QWORD *)(DerivedStorage + 40));
    if ((_DWORD)v1)
      FigSignalErrorAt();
  }
  else
  {
    v1 = 4294954444;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v1;
}

uint64_t figAudioQueueRenderPipelineSynchronizeToTimebase(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t started;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  started = faqrp_startStopAudioQueueSlavedToTimebase(a1, *(_QWORD *)(DerivedStorage + 40));
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return started;
}

uint64_t figAudioQueueRenderPipelineReset()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v1 = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 32));
  if (!(_DWORD)v1)
    v1 = FigAudioQueueResetOffline(*(_QWORD *)(DerivedStorage + 40));
  v2 = v1;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v2;
}

uint64_t figAudioQueueRenderPipelineFinishSettingRate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CMTimeValue v4;
  OpaqueCMTimebase *v5;
  CMTimeFlags v6;
  CMTimeEpoch v7;
  CMTimeFlags v8;
  CMTimeEpoch v9;
  float v10;
  OpaqueCMClock *HostTimeClock;
  void (*v12)(uint64_t);
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTimeValue v19;
  CMTimeScale v20;
  CMTimeValue v21;
  CMTimeScale v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    v3 = 4294954444;
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
    v5 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
    v4 = *(_QWORD *)(DerivedStorage + 128);
    *(_QWORD *)(DerivedStorage + 120) = 0;
    v21 = v4;
    v6 = *(_DWORD *)(DerivedStorage + 140);
    v22 = *(_DWORD *)(DerivedStorage + 136);
    v7 = *(_QWORD *)(DerivedStorage + 144);
    v19 = *(_QWORD *)(DerivedStorage + 152);
    v8 = *(_DWORD *)(DerivedStorage + 164);
    v20 = *(_DWORD *)(DerivedStorage + 160);
    v9 = *(_QWORD *)(DerivedStorage + 168);
    v10 = *(float *)(DerivedStorage + 176);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
    if (v5)
    {
      memset(&v18, 0, sizeof(v18));
      if ((v8 & 1) != 0)
      {
        v18.value = v19;
        v18.timescale = v20;
        v18.flags = v8;
        v18.epoch = v9;
      }
      else
      {
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&v18, HostTimeClock);
      }
      memset(&v17, 0, sizeof(v17));
      if ((v6 & 1) != 0)
      {
        v17.value = v21;
        v17.timescale = v22;
        v17.flags = v6;
        v17.epoch = v7;
      }
      else
      {
        CMTimebaseGetTime(&v17, v5);
      }
      v16 = v17;
      v15 = v17;
      v14 = v18;
      faqrp_startTimebaseCommon(v10, a1, v5, &v16, &v15, &v14);
      v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v12)
        v12(a1);
      CFRelease(v5);
    }
    v3 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v3;
}

uint64_t faqrp_stopTimebaseAndAudioQueue(const void *a1, __int128 *a2)
{
  _BYTE *DerivedStorage;
  uint64_t result;
  _BYTE *v6;
  char *v7;
  CFTypeRef v8;
  __int128 v9;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 4294954444;
  v6 = DerivedStorage;
  v7 = (char *)malloc_type_malloc(0x20uLL, 0x1020040B07D1DCCuLL);
  if (a1)
    v8 = CFRetain(a1);
  else
    v8 = 0;
  *(_QWORD *)v7 = v8;
  v9 = *a2;
  *((_QWORD *)v7 + 3) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v9;
  dispatch_async_f(*((dispatch_queue_t *)v6 + 3), v7, (dispatch_function_t)faqrp_stopTimebaseAndAudioQueueDispatch);
  if (!v6[64])
    return 0;
  result = FigAudioQueuePause(*((_QWORD *)v6 + 5));
  v6[64] = 0;
  return result;
}

void faqrp_stopTimebaseAndAudioQueueDispatch(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  CMClockOrTimebaseRef v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  OpaqueCMTimebase *v7;
  CMTime immediateSourceTime;
  os_log_type_t type;
  int v10;
  CMTime v11;
  CMTime time;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  v3 = *(const void **)(DerivedStorage + 120);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  if ((*(_DWORD *)(a1 + 20) & 0x1D) == 1)
  {
    v4 = CMTimebaseCopySource(*(CMTimebaseRef *)(DerivedStorage + 112));
    if (dword_1EE2A2CB0)
    {
      v10 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v7 = *(OpaqueCMTimebase **)(DerivedStorage + 112);
    CMSyncGetTime(&immediateSourceTime, v4);
    time = *(CMTime *)(a1 + 8);
    CMTimebaseSetRateAndAnchorTime(v7, 0.0, &time, &immediateSourceTime);
    if (v4)
      CFRelease(v4);
  }
  else
  {
    if (dword_1EE2A2CB0)
    {
      v10 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v11 = time;
    CMTimebaseSetRateAndAnchorTimeWithFlags();
  }
  FigDeferCFRelease();
  free((void *)a1);
}

void faqrp_transitionCallback(uint64_t a1, const void *a2, CMTime *a3, CMTime *a4, float a5)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Value;
  void *v12;
  void *v13;
  CMClockOrTimebaseRef v14;
  CMClockRef HostTimeClock;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_log_type_t type;
  int v18;
  CMTime v19;
  uint64_t v20;
  CMTime v21;
  CMTime rhs;
  CMTime time;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v21, 0, sizeof(v21));
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 184), a2);
  if (Value)
  {
    v12 = (void *)CFDictionaryGetValue(Value, CFSTR("TransitionTimebase"));
    if (v12)
    {
      v13 = v12;
      v20 = 0;
      if (FigCFDictionaryGetCFIndexIfPresent())
        FigCFDictionaryGetCFIndexIfPresent();
      CFRetain(v13);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 184), a2);
      v14 = CMTimebaseCopySource((CMTimebaseRef)v13);
      HostTimeClock = CMClockGetHostTimeClock();
      time = *a4;
      CMSyncConvertTime(&v21, &time, HostTimeClock, v14);
      memset(&v19, 0, sizeof(v19));
      CMSyncGetTime(&v19, v14);
      if (dword_1EE2A2CB0)
      {
        v18 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      time = *a3;
      rhs = v21;
      if (!CMTimebaseSetRateAndAnchorTime((CMTimebaseRef)v13, a5, &time, &rhs))
        faqrp_setTimebase(a1, (uint64_t)v13);
      CFRelease(v13);
      if (v14)
        CFRelease(v14);
    }
  }
}

uint64_t figCSSParserRegisterFigCSSParser()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCSSParserID = result;
  return result;
}

uint64_t FigCSSParserCreate(uint64_t a1, const void *a2, CFTypeRef cf, uint64_t **a4)
{
  CFTypeID v8;
  uint64_t Instance;
  uint64_t *v10;
  uint64_t v11;

  if (!a2)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  if (cf)
  {
    v8 = CFGetTypeID(cf);
    if (v8 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
  }
  MEMORY[0x19402F294](&FigCSSParserGetTypeID_sRegisterFigCSSParserOnce, figCSSParserRegisterFigCSSParser);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v10 = (uint64_t *)Instance;
  *(_DWORD *)(Instance + 32) = 0;
  if (cf)
    FigCFDictionaryGetBooleanIfPresent();
  v10[2] = (uint64_t)CFRetain(a2);
  v11 = FigCSSTokenizerCreateWithTextContainer(a1, a2, v10 + 3);
  if ((_DWORD)v11)
    CFRelease(v10);
  else
    *a4 = v10;
  return v11;
}

uint64_t FigCSSParserProduceStyleSheet(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  CFStringRef v5;
  CFAllocatorRef v6;
  uint64_t v7;
  CFAllocatorRef v8;
  CFTypeRef v9;
  const __CFAllocator *v10;
  __CFArray *Mutable;
  CFAllocatorRef v12;
  uint64_t appended;
  int v14;
  const CFArrayCallBacks *v15;
  const __CFAllocator *v16;
  uint64_t v17;
  CFAllocatorRef v18;
  int v19;
  CFArrayRef v20;
  const __CFAllocator *v21;
  __CFArray *MutableCopy;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  uint64_t v29;
  char *v30;
  CFAllocatorRef v31;
  uint64_t v32;
  CFAllocatorRef v33;
  CFTypeRef v34;
  const __CFAllocator *v35;
  const __CFAllocator *v36;
  CFMutableArrayRef v37;
  __CFArray *v38;
  uint64_t v39;
  int v40;
  CFTypeRef v41;
  __CFArray *v42;
  __CFArray *v43;
  CFMutableArrayRef v44;
  __CFArray *v45;
  const __CFArray *v46;
  const __CFAllocator *v47;
  const CFArrayCallBacks *v48;
  uint64_t CurrentInputToken;
  const void *v50;
  int v51;
  CFAllocatorRef v52;
  uint64_t v53;
  const __CFAllocator *v54;
  uint64_t v55;
  const __CFAllocator *v56;
  CFMutableArrayRef v57;
  uint64_t v58;
  int v59;
  const void *v60;
  const __CFAllocator *v61;
  int v62;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t SerializationString;
  CFTypeRef v66;
  const __CFAllocator *v67;
  uint64_t v68;
  uint64_t v69;
  CFTypeRef v70;
  const __CFAllocator *v71;
  CFStringRef v72;
  CFTypeRef v73;
  CFTypeRef v76;
  __CFArray *v77;
  CFTypeRef v78;
  __CFArray *v79;
  CFTypeRef v80;
  CFTypeRef v81;
  void *value;
  CFTypeRef cf;
  CFTypeRef v84;
  CFArrayRef theArray;
  CFTypeRef v86;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef v89;
  CFTypeRef v90;
  CFTypeRef v91;
  CFTypeRef v92;
  CFTypeRef v93;
  CFTypeRef v94;
  CFTypeRef v95;
  CFTypeRef v96;
  CFTypeRef v97;
  __CFArray *v98;
  const __CFArray *v99;
  const __CFArray *v100;
  CFTypeRef v101;
  CFTypeRef v102;
  char *v103;
  CFTypeRef v104;
  CFTypeRef v105;
  const void *v106;
  CFTypeRef v107;
  CFTypeRef v108;
  int v109;
  const void *v110[2];

  if (!a1 || !a2)
    return FigSignalErrorAt();
  figCSSParser_reset(a1);
  if (*(_DWORD *)(a1 + 32))
    figCSSParser_reset(a1);
  v3 = FigCSSTokenizerProduceTokenArray(*(char **)(a1 + 24), (_QWORD *)(a1 + 40));
  if ((_DWORD)v3)
  {
    v24 = v3;
    goto LABEL_279;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    v24 = FigSignalErrorAt();
    if (!(_DWORD)v24)
      goto LABEL_268;
    goto LABEL_279;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v4 = CFGetAllocator((CFTypeRef)a1);
    v5 = CFStringCreateWithFormat(v4, 0, CFSTR("parser produced tokens: %@"), *(_QWORD *)(a1 + 40));
    if (v5)
      CFRelease(v5);
  }
  v80 = 0;
  v81 = 0;
  v6 = CFGetAllocator((CFTypeRef)a1);
  v7 = FigCSSTokenWalkerCreate((uint64_t)v6, *(const void **)(a1 + 40), (uint64_t *)&v80);
  if ((_DWORD)v7
    || (v8 = CFGetAllocator((CFTypeRef)a1), v7 = FigCSSStyleSheetCreate((uint64_t)v8, (uint64_t *)&v81), (_DWORD)v7))
  {
    v24 = v7;
    v70 = 0;
    Mutable = 0;
    goto LABEL_274;
  }
  v9 = v80;
  cf = 0;
  v84 = 0;
  value = 0;
  v10 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    appended = FigSignalErrorAt();
LABEL_281:
    v24 = appended;
    v25 = 0;
    v26 = 0;
    goto LABEL_282;
  }
  v12 = CFGetAllocator((CFTypeRef)a1);
  appended = FigCSSRuleListCreate((uint64_t)v12, (uint64_t *)&v84);
  if ((_DWORD)appended)
    goto LABEL_281;
  v110[0] = 0;
  LODWORD(v108) = 0;
  appended = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v9, v110, &v108);
  if ((_DWORD)appended)
    goto LABEL_281;
  v14 = (int)v108;
  v15 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v76 = v9;
  v77 = Mutable;
  while (v14 > 24)
  {
    if ((v14 - 25) >= 2)
      goto LABEL_31;
LABEL_229:
    v110[0] = 0;
    LODWORD(v108) = 0;
    appended = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v9, v110, &v108);
    v14 = (int)v108;
    if ((_DWORD)appended)
      goto LABEL_281;
  }
  switch(v14)
  {
    case 2:
      goto LABEL_229;
    case 8:
      appended = FigCSSTokenWalkerReconsumeInputToken((uint64_t)v9);
      if ((_DWORD)appended)
        goto LABEL_281;
      appended = _figCSSParser_consume_an_at_rule((const void *)a1, (uint64_t)v9, &cf, (CFTypeRef *)&value);
      if ((_DWORD)appended)
        goto LABEL_281;
      if (cf)
      {
        appended = FigCSSRuleListAppendRule(v84, (void *)cf);
        if ((_DWORD)appended)
          goto LABEL_281;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
      }
      if (value)
      {
        CFArrayAppendValue(Mutable, value);
        if (value)
        {
          CFRelease(value);
          value = 0;
        }
      }
      goto LABEL_229;
    case 1:
      v25 = 0;
      v26 = 0;
      v24 = 0;
      v70 = v84;
      v84 = 0;
      goto LABEL_247;
  }
LABEL_31:
  appended = FigCSSTokenWalkerReconsumeInputToken((uint64_t)v9);
  if ((_DWORD)appended)
    goto LABEL_281;
  v90 = 0;
  v91 = 0;
  v88 = 0;
  v89 = 0;
  v86 = 0;
  v87 = 0;
  theArray = 0;
  v16 = CFGetAllocator((CFTypeRef)a1);
  v17 = FigCSSQualifiedRuleParserNodeCreate(v16, &v90);
  if ((_DWORD)v17)
    goto LABEL_54;
  v18 = CFGetAllocator((CFTypeRef)a1);
  v17 = FigCSSRuleCreate((uint64_t)v18, 1, (uint64_t *)&v91);
  if ((_DWORD)v17)
    goto LABEL_54;
  v110[0] = 0;
  LODWORD(v108) = 0;
  v17 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v9, v110, &v108);
  if ((_DWORD)v17)
    goto LABEL_54;
  v19 = (int)v108;
  while (2)
  {
    if (v19 == 1)
    {
      v25 = 0;
      v26 = 0;
      MutableCopy = 0;
      v24 = 4294949493;
      goto LABEL_207;
    }
    if (v19 == 18)
    {
      if (v86)
      {
        CFRelease(v86);
        v86 = 0;
      }
      if (v87)
      {
        CFRelease(v87);
        v87 = 0;
      }
      v17 = _figCSSParser_consume_a_simple_block((const void *)a1, (uint64_t)v9, &v86, &v87);
      if ((_DWORD)v17 || (v17 = FigCSSQualifiedRuleParserNodeSetSimpleBlock((uint64_t)v90, v87), (_DWORD)v17))
      {
LABEL_54:
        v24 = v17;
        goto LABEL_55;
      }
      v27 = v90;
      v28 = v91;
      v93 = 0;
      v94 = 0;
      v92 = 0;
      if (v90 && v91)
      {
        v29 = FigCSSQualifiedRuleParserNodeCopyPrelude((uint64_t)v90, &v94);
        if (!(_DWORD)v29)
        {
          v29 = FigCSSQualifiedRuleParserNodeCopySimpleBlock((uint64_t)v27, &v93);
          if (!(_DWORD)v29)
          {
            v29 = _figCSSParser_util_serializeComponentValueNodeArray((const void *)a1, (const __CFArray *)v94, (__CFString **)&v92);
            if (!(_DWORD)v29)
            {
              v30 = (char *)v93;
              v102 = 0;
              v103 = 0;
              v100 = 0;
              v101 = 0;
              v98 = 0;
              v99 = 0;
              v96 = 0;
              v97 = 0;
              v95 = 0;
              if (v93)
              {
                v31 = CFGetAllocator((CFTypeRef)a1);
                v32 = FigCSSStyleDeclarationCreate((uint64_t)v31, (uint64_t *)&v103);
                if (!(_DWORD)v32)
                {
                  v32 = FigCSSSimpleBlockParserNodeCopyAssociatedToken((uint64_t)v30, &v101);
                  if (!(_DWORD)v32)
                  {
                    v32 = FigCSSSimpleBlockParserNodeCopyValue((uint64_t)v30, &v99);
                    if (!(_DWORD)v32)
                    {
                      v32 = _figCSSParser_util_convertComponentValueArrayToTokenArray((const void *)a1, v99, &v98);
                      if (!(_DWORD)v32)
                      {
                        v33 = CFGetAllocator((CFTypeRef)a1);
                        v32 = FigCSSTokenWalkerCreate((uint64_t)v33, v98, (uint64_t *)&v95);
                        if (!(_DWORD)v32)
                        {
                          v34 = v95;
                          v105 = 0;
                          v106 = 0;
                          v104 = 0;
                          v35 = CFGetAllocator((CFTypeRef)a1);
                          v78 = v28;
                          v79 = CFArrayCreateMutable(v35, 0, v15);
                          if (!v79)
                          {
                            v24 = FigSignalErrorAt();
                            v45 = 0;
                            v46 = 0;
                            v41 = 0;
                            v42 = 0;
                            v43 = 0;
                            v44 = 0;
                            goto LABEL_136;
                          }
                          v36 = CFGetAllocator((CFTypeRef)a1);
                          v37 = CFArrayCreateMutable(v36, 0, v15);
                          if (!v37)
                          {
                            v24 = FigSignalErrorAt();
                            v45 = 0;
                            v46 = 0;
                            v41 = 0;
                            v43 = 0;
                            v44 = 0;
                            v42 = v79;
                            goto LABEL_136;
                          }
                          v38 = v37;
                          v110[0] = 0;
                          LODWORD(v108) = 0;
                          v39 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v34, v110, &v108);
                          if ((_DWORD)v39)
                          {
LABEL_232:
                            v24 = v39;
                            v45 = 0;
                            v46 = 0;
                            v41 = 0;
                            v44 = 0;
                            goto LABEL_135;
                          }
                          v40 = (int)v108;
                          while (1)
                          {
                            v41 = 0;
                            v24 = 0;
                            v42 = 0;
                            v43 = 0;
                            v44 = 0;
                            v45 = v79;
                            v46 = v38;
                            switch(v40)
                            {
                              case 1:
                                goto LABEL_136;
                              case 2:
                                goto LABEL_128;
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                                goto LABEL_132;
                              case 7:
                                v47 = CFGetAllocator((CFTypeRef)a1);
                                v48 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
                                v44 = CFArrayCreateMutable(v47, 0, MEMORY[0x1E0C9B378]);
                                if (!v44)
                                {
                                  CurrentInputToken = FigSignalErrorAt();
LABEL_236:
                                  v24 = CurrentInputToken;
                                  v45 = 0;
                                  v46 = 0;
                                  v41 = 0;
LABEL_135:
                                  v42 = v79;
                                  v43 = v38;
LABEL_136:
                                  if (v105)
                                    CFRelease(v105);
                                  if (v106)
                                    CFRelease(v106);
                                  if (v42)
                                    CFRelease(v42);
                                  if (v41)
                                    CFRelease(v41);
                                  if (v43)
                                    CFRelease(v43);
                                  if (v104)
                                    CFRelease(v104);
                                  if (v44)
                                    CFRelease(v44);
                                  v30 = 0;
                                  if ((_DWORD)v24)
                                  {
                                    v9 = v76;
                                    Mutable = v77;
                                    v28 = v78;
                                  }
                                  else
                                  {
                                    v9 = v76;
                                    Mutable = v77;
                                    v28 = v78;
                                    if (v46)
                                    {
LABEL_152:
                                      Count = CFArrayGetCount(v46);
                                      goto LABEL_154;
                                    }
                                    while (1)
                                    {
                                      Count = 0;
LABEL_154:
                                      if ((uint64_t)v30 >= Count)
                                      {
                                        v24 = 0;
                                        v30 = v103;
                                        v103 = 0;
                                        goto LABEL_171;
                                      }
                                      ValueAtIndex = CFArrayGetValueAtIndex(v46, (CFIndex)v30);
                                      SerializationString = FigCSSDeclarationParserNodeCopyName((uint64_t)ValueAtIndex, &v102);
                                      if ((_DWORD)SerializationString)
                                        break;
                                      SerializationString = FigCSSDeclarationParserNodeCopyValue((uint64_t)ValueAtIndex, &v100);
                                      if ((_DWORD)SerializationString)
                                        break;
                                      v66 = v102;
                                      v67 = CFGetAllocator((CFTypeRef)a1);
                                      SerializationString = FigCSSTokenCreateSerializationString(v67, v66, (CFStringRef *)&v96);
                                      if ((_DWORD)SerializationString)
                                        break;
                                      SerializationString = _figCSSParser_util_serializeComponentValueNodeArray((const void *)a1, v100, (__CFString **)&v97);
                                      if ((_DWORD)SerializationString)
                                        break;
                                      SerializationString = FigCSSStyleDeclarationSetPropertyInfo(v103, (void *)v96, v97, 0);
                                      if ((_DWORD)SerializationString)
                                        break;
                                      if (v97)
                                      {
                                        CFRelease(v97);
                                        v97 = 0;
                                      }
                                      if (v100)
                                      {
                                        CFRelease(v100);
                                        v100 = 0;
                                      }
                                      if (v96)
                                      {
                                        CFRelease(v96);
                                        v96 = 0;
                                      }
                                      if (v102)
                                      {
                                        CFRelease(v102);
                                        v102 = 0;
                                      }
                                      ++v30;
                                      if (v46)
                                        goto LABEL_152;
                                    }
                                    v24 = SerializationString;
                                    v30 = 0;
                                  }
LABEL_171:
                                  if (v97)
                                    CFRelease(v97);
                                  if (v100)
                                    CFRelease(v100);
                                  if (v96)
                                    CFRelease(v96);
                                  if (v102)
                                    CFRelease(v102);
                                  if (v45)
                                    CFRelease(v45);
                                  if (v46)
                                    CFRelease(v46);
                                  if (v95)
                                    CFRelease(v95);
                                  v15 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
                                  if (v98)
                                    CFRelease(v98);
                                  if (v99)
                                    CFRelease(v99);
                                  if (v101)
                                    CFRelease(v101);
                                  if (v103)
                                    CFRelease(v103);
                                  if (!(_DWORD)v24)
                                  {
                                    v68 = FigCSSStyleRuleSetSelector((uint64_t)v28, v92);
                                    if (!(_DWORD)v68)
                                      v68 = FigCSSStyleRuleSetDeclaration((uint64_t)v28, v30);
                                    v24 = v68;
                                  }
                                  if (v30)
                                    CFRelease(v30);
LABEL_199:
                                  if (v92)
                                    CFRelease(v92);
                                  if (v93)
                                    CFRelease(v93);
                                  if (v94)
                                    CFRelease(v94);
                                  if (!(_DWORD)v24)
                                  {
                                    MutableCopy = 0;
                                    v26 = v90;
                                    v25 = (void *)v91;
                                    v90 = 0;
                                    v91 = 0;
                                    goto LABEL_207;
                                  }
LABEL_55:
                                  v25 = 0;
                                  v26 = 0;
                                  MutableCopy = 0;
                                  goto LABEL_207;
                                }
                                v110[0] = 0;
                                LODWORD(v108) = 0;
                                CurrentInputToken = FigCSSTokenWalkerGetCurrentInputToken((uint64_t)v34, v110, &v108);
                                if ((_DWORD)CurrentInputToken)
                                  goto LABEL_236;
                                CFArrayAppendValue(v44, v110[0]);
                                v110[0] = 0;
                                LODWORD(v108) = 0;
                                CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v34, v110, &v108);
                                if ((_DWORD)CurrentInputToken)
                                  goto LABEL_236;
                                v50 = v110[0];
                                v51 = (int)v108;
                                while (v51 != 1 && v51 != 14)
                                {
                                  CFArrayAppendValue(v44, v50);
                                  v110[0] = 0;
                                  LODWORD(v108) = 0;
                                  CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v34, v110, &v108);
                                  v50 = v110[0];
                                  v51 = (int)v108;
                                  if ((_DWORD)CurrentInputToken)
                                    goto LABEL_236;
                                }
                                v52 = CFGetAllocator((CFTypeRef)a1);
                                CurrentInputToken = FigCSSTokenWalkerCreate((uint64_t)v52, v44, (uint64_t *)&v104);
                                if ((_DWORD)CurrentInputToken)
                                  goto LABEL_236;
                                CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v104, 0, 0);
                                if ((_DWORD)CurrentInputToken)
                                  goto LABEL_236;
                                v53 = (uint64_t)v104;
                                v107 = 0;
                                v108 = 0;
                                v54 = CFGetAllocator((CFTypeRef)a1);
                                v55 = FigCSSDeclarationParserNodeCreate(v54, &v108);
                                if ((_DWORD)v55
                                  || (v110[0] = 0,
                                      v109 = 0,
                                      v55 = FigCSSTokenWalkerGetCurrentInputToken(v53, v110, &v109),
                                      (_DWORD)v55)
                                  || (v55 = FigCSSDeclarationParserNodeSetName((uint64_t)v108, v110[0]), (_DWORD)v55))
                                {
                                  v24 = v55;
                                  v57 = 0;
                                  goto LABEL_115;
                                }
                                v56 = CFGetAllocator((CFTypeRef)a1);
                                v57 = CFArrayCreateMutable(v56, 0, v48);
                                if (v57)
                                {
                                  v58 = FigCSSDeclarationParserNodeSetValue((uint64_t)v108, v57);
                                  if (!(_DWORD)v58)
                                  {
                                    v110[0] = 0;
                                    v109 = 0;
                                    v58 = FigCSSTokenWalkerConsumeNextInputToken(v53, v110, &v109);
                                    if (!(_DWORD)v58)
                                    {
                                      v59 = v109;
                                      while (v59 == 2)
                                      {
                                        v110[0] = 0;
                                        v109 = 0;
                                        v58 = FigCSSTokenWalkerConsumeNextInputToken(v53, v110, &v109);
                                        v59 = v109;
                                        if ((_DWORD)v58)
                                          goto LABEL_102;
                                      }
                                      if (v59 != 13)
                                      {
                                        v24 = 4294949493;
                                        goto LABEL_115;
                                      }
                                      v110[0] = 0;
                                      v109 = 0;
                                      v58 = FigCSSTokenWalkerConsumeNextInputToken(v53, v110, &v109);
                                      if (!(_DWORD)v58)
                                      {
                                        if (v109 == 1)
                                        {
LABEL_113:
                                          v24 = 0;
                                          v41 = v108;
                                          v108 = 0;
                                          goto LABEL_118;
                                        }
                                        v60 = v110[0];
                                        while (1)
                                        {
                                          v61 = CFGetAllocator((CFTypeRef)a1);
                                          v58 = FigCSSComponentValueParserNodeCreate(v61, &v107);
                                          if ((_DWORD)v58)
                                            break;
                                          v58 = FigCSSComponentValueParserNodeSetPreservedToken((uint64_t)v107, v60);
                                          if ((_DWORD)v58)
                                            break;
                                          CFArrayAppendValue(v57, v107);
                                          v110[0] = 0;
                                          v109 = 0;
                                          v58 = FigCSSTokenWalkerConsumeNextInputToken(v53, v110, &v109);
                                          if ((_DWORD)v58)
                                            break;
                                          v60 = v110[0];
                                          v62 = v109;
                                          if (v107)
                                          {
                                            CFRelease(v107);
                                            v107 = 0;
                                          }
                                          if (v62 == 1)
                                            goto LABEL_113;
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  v58 = FigSignalErrorAt();
                                }
LABEL_102:
                                v24 = v58;
LABEL_115:
                                if (v108)
                                  CFRelease(v108);
                                v41 = 0;
LABEL_118:
                                if (v107)
                                  CFRelease(v107);
                                if (v57)
                                  CFRelease(v57);
                                if ((_DWORD)v24)
                                {
                                  v45 = 0;
                                  v46 = 0;
                                  goto LABEL_135;
                                }
                                if (v41)
                                {
                                  CFArrayAppendValue(v38, v41);
                                  CFRelease(v41);
                                }
                                if (v104)
                                {
                                  CFRelease(v104);
                                  v104 = 0;
                                }
                                CFRelease(v44);
LABEL_128:
                                v110[0] = 0;
                                LODWORD(v108) = 0;
                                v39 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v34, v110, &v108);
                                v40 = (int)v108;
                                if ((_DWORD)v39)
                                  goto LABEL_232;
                                break;
                              case 8:
                                v39 = _figCSSParser_consume_an_at_rule((const void *)a1, (uint64_t)v34, &v106, &v105);
                                if ((_DWORD)v39)
                                  goto LABEL_232;
                                CFArrayAppendValue(v79, v106);
                                CFArrayAppendValue(v38, v105);
                                goto LABEL_128;
                              default:
                                if (v40 == 14)
                                  goto LABEL_128;
LABEL_132:
                                while (1)
                                {
                                  v110[0] = 0;
                                  LODWORD(v108) = 0;
                                  v39 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v34, v110, &v108);
                                  if ((_DWORD)v39)
                                    goto LABEL_232;
                                  if (((_DWORD)v108 - 3) >= 0xFFFFFFFE)
                                  {
                                    v45 = 0;
                                    v46 = 0;
                                    v41 = 0;
                                    v44 = 0;
                                    v24 = 4294949493;
                                    goto LABEL_135;
                                  }
                                }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v24 = v32;
                v30 = 0;
              }
              else
              {
                v24 = FigSignalErrorAt();
              }
              v45 = 0;
              v46 = 0;
              goto LABEL_171;
            }
          }
        }
      }
      else
      {
        v29 = FigSignalErrorAt();
      }
      v24 = v29;
      goto LABEL_199;
    }
    v17 = FigCSSTokenWalkerReconsumeInputToken((uint64_t)v9);
    if ((_DWORD)v17)
      goto LABEL_54;
    v17 = _figCSSParser_consume_a_component_value((const void *)a1, (uint64_t)v9, &v88, &v89);
    if ((_DWORD)v17)
      goto LABEL_54;
    v17 = FigCSSQualifiedRuleParserNodeCopyPrelude((uint64_t)v90, &theArray);
    if ((_DWORD)v17)
      goto LABEL_54;
    v20 = theArray;
    v21 = CFGetAllocator((CFTypeRef)a1);
    if (v20)
    {
      MutableCopy = CFArrayCreateMutableCopy(v21, 0, theArray);
      goto LABEL_44;
    }
    MutableCopy = CFArrayCreateMutable(v21, 0, v15);
    if (MutableCopy)
    {
LABEL_44:
      CFArrayAppendValue(MutableCopy, v89);
      v23 = FigCSSQualifiedRuleParserNodeSetPrelude((uint64_t)v90, MutableCopy);
      if ((_DWORD)v23)
        goto LABEL_234;
      if (v89)
      {
        CFRelease(v89);
        v89 = 0;
      }
      if (v88)
      {
        CFRelease(v88);
        v88 = 0;
      }
      if (MutableCopy)
        CFRelease(MutableCopy);
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
      v110[0] = 0;
      LODWORD(v108) = 0;
      v17 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v9, v110, &v108);
      v19 = (int)v108;
      if ((_DWORD)v17)
        goto LABEL_54;
      continue;
    }
    break;
  }
  v23 = FigSignalErrorAt();
LABEL_234:
  v24 = v23;
  v25 = 0;
  v26 = 0;
LABEL_207:
  if (v86)
    CFRelease(v86);
  if (v87)
    CFRelease(v87);
  if (v91)
    CFRelease(v91);
  if (v90)
    CFRelease(v90);
  if (v88)
    CFRelease(v88);
  if (v89)
    CFRelease(v89);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (theArray)
    CFRelease(theArray);
  if ((_DWORD)v24)
    goto LABEL_282;
  if (!v25)
  {
LABEL_227:
    if (v26)
    {
      CFArrayAppendValue(Mutable, v26);
      CFRelease(v26);
    }
    goto LABEL_229;
  }
  v69 = FigCSSRuleListAppendRule(v84, v25);
  if (!(_DWORD)v69)
  {
    CFRelease(v25);
    goto LABEL_227;
  }
  v24 = v69;
LABEL_282:
  if (v84)
    CFRelease(v84);
  if (Mutable)
  {
    CFRelease(Mutable);
    v70 = 0;
    Mutable = 0;
  }
  else
  {
    v70 = 0;
  }
LABEL_247:
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  if (v25)
    CFRelease(v25);
  if (v26)
    CFRelease(v26);
  if (!(_DWORD)v24)
  {
    v24 = FigCSSStyleSheetSetRuleList((uint64_t)v81, v70);
    if (!(_DWORD)v24)
    {
      *(_QWORD *)(a1 + 72) = v81;
      v81 = 0;
      goto LABEL_258;
    }
  }
LABEL_274:
  if (v81)
    CFRelease(v81);
LABEL_258:
  if (v70)
    CFRelease(v70);
  if (Mutable)
    CFRelease(Mutable);
  if (v80)
    CFRelease(v80);
  if ((_DWORD)v24)
  {
LABEL_279:
    *(_DWORD *)(a1 + 32) = 2;
    return v24;
  }
  if (*(_BYTE *)(a1 + 81))
  {
    v71 = CFGetAllocator((CFTypeRef)a1);
    v72 = CFStringCreateWithFormat(v71, 0, CFSTR("parser produced styleSheet: %@"), *(_QWORD *)(a1 + 72));
    if (v72)
      CFRelease(v72);
  }
LABEL_268:
  *(_DWORD *)(a1 + 32) = 1;
  v73 = *(CFTypeRef *)(a1 + 72);
  if (v73)
    v73 = CFRetain(v73);
  v24 = 0;
  *a2 = v73;
  return v24;
}

double figCSSParser_reset(uint64_t a1)
{
  const void *v2;
  const void *v3;
  double result;

  v2 = *(const void **)(a1 + 72);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_DWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = xmmword_1932F77B0;
  return result;
}

double figCSSParser_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figCSSParser_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  figCSSParser_reset(a1);
  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
}

CFStringRef figCSSParser_CopyFormattingDesc(_QWORD *a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCSSParser <%p> textContainer:<%p> tokenizer:<%p> tokens:<%p> producedStyleSheet:<%p>]"), a1, a1[2], a1[3], a1[5], a1[9]);
}

CFStringRef figCSSParser_CopyDebugDesc(_QWORD *a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCSSParser <%p> textContainer:<%p> tokenizer:<%p> tokens:<%p> producedStyleSheet:<%p>]"), a1, a1[2], a1[3], a1[5], a1[9]);
}

uint64_t _figCSSParser_consume_an_at_rule(const void *a1, uint64_t a2, _QWORD *a3, CFTypeRef *a4)
{
  const __CFAllocator *v8;
  uint64_t CurrentInputToken;
  const void *v10;
  const __CFAllocator *v11;
  CFMutableArrayRef Mutable;
  __CFArray *v13;
  uint64_t v14;
  void *value;
  CFTypeRef v17;
  CFTypeRef cf;
  int v19;
  const void *v20;

  v17 = 0;
  cf = 0;
  value = 0;
  if (!a1 || !a3 || !a4)
    goto LABEL_30;
  v8 = CFGetAllocator(a1);
  v20 = 0;
  v19 = 0;
  CurrentInputToken = FigCSSTokenWalkerGetCurrentInputToken(a2, &v20, &v19);
  if ((_DWORD)CurrentInputToken)
    goto LABEL_31;
  v10 = v20;
  CurrentInputToken = FigCSSAtRuleParserNodeCreate(v8, &cf);
  if ((_DWORD)CurrentInputToken)
    goto LABEL_31;
  CurrentInputToken = FigCSSAtRuleParserNodeSetName((uint64_t)cf, v10);
  if ((_DWORD)CurrentInputToken)
    goto LABEL_31;
  v11 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_30:
    CurrentInputToken = FigSignalErrorAt();
    goto LABEL_31;
  }
  v13 = Mutable;
  CurrentInputToken = FigCSSAtRuleParserNodeSetPrelude((uint64_t)cf, Mutable);
  if ((_DWORD)CurrentInputToken)
    goto LABEL_31;
  CurrentInputToken = FigCSSAtRuleParserNodeSetSimpleBlock((uint64_t)cf, 0);
  if ((_DWORD)CurrentInputToken)
    goto LABEL_31;
  v20 = 0;
  v19 = 0;
  CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken(a2, &v20, &v19);
  if ((_DWORD)CurrentInputToken)
    goto LABEL_31;
  if (v19 == 1)
  {
LABEL_14:
    v14 = 0;
    *a3 = 0;
    goto LABEL_23;
  }
  if (v19 != 18)
  {
    if (v19 == 14)
      goto LABEL_14;
    CurrentInputToken = FigCSSTokenWalkerReconsumeInputToken(a2);
    if (!(_DWORD)CurrentInputToken)
    {
      CurrentInputToken = _figCSSParser_consume_a_component_value(a1, a2, 0, (CFTypeRef *)&value);
      if (!(_DWORD)CurrentInputToken)
      {
        CFArrayAppendValue(v13, value);
        if (value)
        {
          CFRelease(value);
          v14 = 0;
          value = 0;
        }
        else
        {
          v14 = 0;
        }
        goto LABEL_23;
      }
    }
LABEL_31:
    v14 = CurrentInputToken;
    goto LABEL_23;
  }
  v20 = 0;
  CurrentInputToken = _figCSSParser_consume_a_simple_block(a1, a2, &v20, &v17);
  if ((_DWORD)CurrentInputToken)
    goto LABEL_31;
  v14 = FigCSSAtRuleParserNodeSetSimpleBlock((uint64_t)cf, v17);
  if (!(_DWORD)v14)
  {
    *a4 = cf;
    cf = 0;
    goto LABEL_25;
  }
LABEL_23:
  if (cf)
    CFRelease(cf);
LABEL_25:
  if (v17)
    CFRelease(v17);
  if (value)
    CFRelease(value);
  return v14;
}

uint64_t _figCSSParser_consume_a_simple_block(const void *a1, uint64_t a2, _QWORD *a3, CFTypeRef *a4)
{
  const __CFAllocator *v8;
  CFMutableArrayRef Mutable;
  uint64_t CurrentInputToken;
  const void *v11;
  int v12;
  const __CFAllocator *v13;
  const __CFAllocator *v14;
  CFMutableArrayRef v15;
  __CFArray *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  CFTypeRef cf;
  void *value;
  CFTypeRef v24;
  int v25;
  const void *v26;

  value = 0;
  v24 = 0;
  cf = 0;
  if (!a1 || !a2 || !a3 || !a4)
  {
    v20 = FigSignalErrorAt();
    Mutable = 0;
    goto LABEL_33;
  }
  v8 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v26 = 0;
    v25 = 0;
    CurrentInputToken = FigCSSTokenWalkerGetCurrentInputToken(a2, &v26, &v25);
    if ((_DWORD)CurrentInputToken)
      goto LABEL_44;
    v11 = v26;
    v12 = v25;
    *a3 = 0;
    *a4 = 0;
    v13 = CFGetAllocator(a1);
    CurrentInputToken = FigCSSSimpleBlockParserNodeCreate(v13, &v24);
    if ((_DWORD)CurrentInputToken)
      goto LABEL_44;
    CurrentInputToken = FigCSSSimpleBlockParserNodeSetAssociatedToken((uint64_t)v24, v11);
    if ((_DWORD)CurrentInputToken)
      goto LABEL_44;
    v14 = CFGetAllocator(a1);
    v15 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]);
    if (v15)
    {
      v16 = v15;
      switch(v12)
      {
        case 16:
          v17 = 17;
          break;
        case 18:
          v17 = 19;
          break;
        case 20:
          v17 = 21;
          break;
        default:
          v18 = FigSignalErrorAt();
          goto LABEL_31;
      }
      v18 = FigCSSSimpleBlockParserNodeSetValue((uint64_t)v24, v15);
      if (!(_DWORD)v18)
      {
        v26 = 0;
        v25 = 0;
        v18 = FigCSSTokenWalkerConsumeNextInputToken(a2, &v26, &v25);
        if (!(_DWORD)v18)
        {
          v19 = v25;
          while (v19 != 1 && v19 != v17)
          {
            v18 = FigCSSTokenWalkerReconsumeInputToken(a2);
            if (!(_DWORD)v18)
            {
              v18 = _figCSSParser_consume_a_component_value(a1, a2, &cf, (CFTypeRef *)&value);
              if (!(_DWORD)v18)
              {
                CFArrayAppendValue(v16, value);
                if (cf)
                {
                  CFRelease(cf);
                  cf = 0;
                }
                if (value)
                {
                  CFRelease(value);
                  value = 0;
                }
                v26 = 0;
                v25 = 0;
                v18 = FigCSSTokenWalkerConsumeNextInputToken(a2, &v26, &v25);
                v19 = v25;
                if (!(_DWORD)v18)
                  continue;
              }
            }
            goto LABEL_31;
          }
          v20 = 0;
          *a4 = v24;
          v24 = 0;
          goto LABEL_32;
        }
      }
LABEL_31:
      v20 = v18;
LABEL_32:
      CFRelease(v16);
      goto LABEL_33;
    }
  }
  CurrentInputToken = FigSignalErrorAt();
LABEL_44:
  v20 = CurrentInputToken;
LABEL_33:
  if (v24)
    CFRelease(v24);
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  return v20;
}

uint64_t _figCSSParser_consume_a_component_value(const void *a1, uint64_t a2, _QWORD *a3, CFTypeRef *a4)
{
  uint64_t CurrentInputToken;
  unsigned int v8;
  unint64_t v9;
  const __CFAllocator *v10;
  uint64_t v11;
  const __CFAllocator *v12;
  uint64_t v13;
  CFTypeRef v14;
  const __CFAllocator *v15;
  const __CFAllocator *v16;
  CFMutableArrayRef Mutable;
  uint64_t v18;
  int v19;
  uint64_t v20;
  CFTypeRef v21;
  const __CFAllocator *v22;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef cf;
  void *value;
  CFTypeRef v29;
  int v30;
  CFTypeRef v31;

  v25 = 0;
  v26 = 0;
  v24 = 0;
  if (!a1 || !a3 || !a4)
  {
    CurrentInputToken = FigSignalErrorAt();
    goto LABEL_57;
  }
  *a3 = 0;
  *a4 = 0;
  v31 = 0;
  LODWORD(v29) = 0;
  CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken(a2, &v31, &v29);
  if ((_DWORD)CurrentInputToken)
  {
LABEL_57:
    v20 = CurrentInputToken;
LABEL_58:
    v21 = 0;
    goto LABEL_37;
  }
  HIDWORD(v9) = (_DWORD)v29;
  LODWORD(v9) = (_DWORD)v29 - 16;
  v8 = v9 >> 1;
  if (v8 < 3)
  {
    v10 = CFGetAllocator(a1);
    CurrentInputToken = FigCSSComponentValueParserNodeCreate(v10, &v24);
    if (!(_DWORD)CurrentInputToken)
    {
      CurrentInputToken = _figCSSParser_consume_a_simple_block(a1, a2, &v26, &v25);
      if (!(_DWORD)CurrentInputToken)
      {
        v11 = FigCSSComponentValueParserNodeSetSimpleBlock((uint64_t)v24, v25);
        goto LABEL_34;
      }
    }
    goto LABEL_57;
  }
  if (v8 != 8)
  {
    v22 = CFGetAllocator(a1);
    CurrentInputToken = FigCSSComponentValueParserNodeCreate(v22, &v24);
    if (!(_DWORD)CurrentInputToken)
    {
      v31 = 0;
      LODWORD(v29) = 0;
      CurrentInputToken = FigCSSTokenWalkerGetCurrentInputToken(a2, &v31, &v29);
      if (!(_DWORD)CurrentInputToken)
      {
        v11 = FigCSSComponentValueParserNodeSetPreservedToken((uint64_t)v24, v31);
LABEL_34:
        v20 = v11;
        if (!(_DWORD)v11)
        {
          v21 = 0;
LABEL_36:
          *a4 = v24;
          v24 = 0;
          goto LABEL_37;
        }
        goto LABEL_58;
      }
    }
    goto LABEL_57;
  }
  v12 = CFGetAllocator(a1);
  CurrentInputToken = FigCSSComponentValueParserNodeCreate(v12, &v24);
  if ((_DWORD)CurrentInputToken)
    goto LABEL_57;
  value = 0;
  v29 = 0;
  cf = 0;
  if (!a2)
  {
    v13 = FigSignalErrorAt();
LABEL_60:
    v20 = v13;
    Mutable = 0;
    goto LABEL_28;
  }
  v31 = 0;
  v30 = 0;
  v13 = FigCSSTokenWalkerGetCurrentInputToken(a2, &v31, &v30);
  if ((_DWORD)v13)
    goto LABEL_60;
  v14 = v31;
  v15 = CFGetAllocator(a1);
  v13 = FigCSSFunctionParserNodeCreate(v15, &v29);
  if ((_DWORD)v13)
    goto LABEL_60;
  v13 = FigCSSFunctionParserNodeSetName((uint64_t)v29, v14);
  if ((_DWORD)v13)
    goto LABEL_60;
  v16 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v18 = FigSignalErrorAt();
LABEL_27:
    v20 = v18;
LABEL_28:
    if (v29)
      CFRelease(v29);
    v21 = 0;
    goto LABEL_47;
  }
  v18 = FigCSSFunctionParserNodeSetValue((uint64_t)v29, Mutable);
  if ((_DWORD)v18)
    goto LABEL_27;
  v31 = 0;
  v30 = 0;
  v18 = FigCSSTokenWalkerConsumeNextInputToken(a2, &v31, &v30);
  if ((_DWORD)v18)
    goto LABEL_27;
  v19 = v30;
  while ((v19 & 0xFFFFFFEF) != 1)
  {
    v18 = FigCSSTokenWalkerReconsumeInputToken(a2);
    if (!(_DWORD)v18)
    {
      v18 = _figCSSParser_consume_a_component_value(a1, a2, &cf, &value);
      if (!(_DWORD)v18)
      {
        CFArrayAppendValue(Mutable, value);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (value)
        {
          CFRelease(value);
          value = 0;
        }
        v31 = 0;
        v30 = 0;
        v18 = FigCSSTokenWalkerConsumeNextInputToken(a2, &v31, &v30);
        v19 = v30;
        if (!(_DWORD)v18)
          continue;
      }
    }
    goto LABEL_27;
  }
  v20 = 0;
  v21 = v29;
  v29 = 0;
LABEL_47:
  if (Mutable)
    CFRelease(Mutable);
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (!(_DWORD)v20)
  {
    v20 = FigCSSComponentValueParserNodeSetFunctionNode((uint64_t)v24, v21);
    if (!(_DWORD)v20)
      goto LABEL_36;
  }
LABEL_37:
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  if (v21)
    CFRelease(v21);
  if (v24)
    CFRelease(v24);
  return v20;
}

uint64_t _figCSSParser_util_serializeComponentValueNodeArray(const void *a1, const __CFArray *a2, __CFString **a3)
{
  const __CFAllocator *v6;
  __CFString *Mutable;
  CFIndex v8;
  CFMutableStringRef v9;
  const void *ValueAtIndex;
  const void *v11;
  CFTypeID v12;
  CFTypeID v13;
  const __CFAllocator *v14;
  uint64_t Type;
  CFTypeRef v16;
  const __CFAllocator *v17;
  uint64_t v18;
  int v19;
  CFTypeRef v20;
  const __CFAllocator *v21;
  __CFString *v22;
  const __CFString *v23;
  CFAllocatorRef v24;
  CFTypeRef v25;
  const __CFAllocator *v26;
  CFTypeRef v27;
  const __CFAllocator *v28;
  __CFString *v29;
  CFMutableStringRef v30;
  int v32;
  CFStringRef v33;
  CFStringRef v34;
  CFStringRef appendedString;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef cf;
  int v43;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v6 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v6, 0);
  if (CFArrayGetCount(a2) < 1)
  {
    v9 = 0;
LABEL_73:
    v18 = 0;
    *a3 = Mutable;
    goto LABEL_74;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a2, v8);
    if (!ValueAtIndex)
      break;
    v11 = ValueAtIndex;
    v12 = CFGetTypeID(ValueAtIndex);
    if (v12 != FigCSSParserNodeGetTypeID())
      break;
    if (v9)
      CFRelease(v9);
    v43 = 0;
    v41 = 0;
    cf = 0;
    v39 = 0;
    v40 = 0;
    v37 = 0;
    v38 = 0;
    appendedString = 0;
    v36 = 0;
    v33 = 0;
    v34 = 0;
    v13 = CFGetTypeID(v11);
    if (v13 != FigCSSParserNodeGetTypeID())
    {
      v18 = FigSignalErrorAt();
      v29 = 0;
      goto LABEL_39;
    }
    v14 = CFGetAllocator(a1);
    v9 = CFStringCreateMutable(v14, 0);
    v43 = 0;
    Type = FigCSSComponentValueParserNodeGetType((uint64_t)v11, &v43);
    if ((_DWORD)Type)
      goto LABEL_69;
    if (v43 == 3)
    {
      v32 = 0;
      Type = FigCSSComponentValueParserNodeCopySimpleBlock((uint64_t)v11, &v36);
      if ((_DWORD)Type)
        goto LABEL_69;
      Type = FigCSSSimpleBlockParserNodeCopyAssociatedToken((uint64_t)v36, &v40);
      if ((_DWORD)Type)
        goto LABEL_69;
      Type = FigCSSTokenGetTokenType((uint64_t)v40, &v32);
      if ((_DWORD)Type)
        goto LABEL_69;
      v19 = (v32 - 16) > 4 ? 0 : dword_1932FA728[v32 - 16];
      v24 = CFGetAllocator(a1);
      FigCSSSimpleTokenCreate((uint64_t)v24, v19, &v39);
      Type = FigCSSSimpleBlockParserNodeCopyValue((uint64_t)v36, &v38);
      if ((_DWORD)Type
        || (v25 = v40,
            v26 = CFGetAllocator(a1),
            Type = FigCSSTokenCreateSerializationString(v26, v25, &appendedString),
            (_DWORD)Type)
        || (Type = _figCSSParser_util_serializeComponentValueNodeArray(a1, v38, &v34), (_DWORD)Type))
      {
LABEL_69:
        v18 = Type;
LABEL_70:
        v29 = 0;
        goto LABEL_40;
      }
      v27 = v39;
      v28 = CFGetAllocator(a1);
      v18 = FigCSSTokenCreateSerializationString(v28, v27, &v33);
      if ((_DWORD)v18)
        goto LABEL_70;
      CFStringAppend(v9, appendedString);
      CFStringAppend(v9, v34);
      v23 = v33;
      v22 = v9;
    }
    else
    {
      if (v43 != 2)
      {
        if (v43 == 1)
        {
          Type = FigCSSComponentValueParserNodeCopyPreservedToken((uint64_t)v11, &cf);
          if ((_DWORD)Type)
            goto LABEL_69;
          v16 = cf;
          v17 = CFGetAllocator(a1);
          Type = FigCSSTokenCreateSerializationString(v17, v16, &appendedString);
          if ((_DWORD)Type)
            goto LABEL_69;
          if (!appendedString)
          {
            v30 = 0;
            v18 = 0;
            goto LABEL_43;
          }
          CFStringAppend(v9, appendedString);
        }
        v18 = 0;
        goto LABEL_38;
      }
      Type = FigCSSComponentValueParserNodeCopyFunctionNode((uint64_t)v11, &v37);
      if ((_DWORD)Type)
        goto LABEL_69;
      Type = FigCSSFunctionParserNodeCopyName((uint64_t)v37, &v41);
      if ((_DWORD)Type)
        goto LABEL_69;
      Type = FigCSSFunctionParserNodeCopyValue((uint64_t)v37, &v38);
      if ((_DWORD)Type)
        goto LABEL_69;
      v20 = v41;
      v21 = CFGetAllocator(a1);
      Type = FigCSSTokenCreateSerializationString(v21, v20, &appendedString);
      if ((_DWORD)Type)
        goto LABEL_69;
      v18 = _figCSSParser_util_serializeComponentValueNodeArray(a1, v38, &v34);
      if ((_DWORD)v18)
        goto LABEL_70;
      CFStringAppend(v9, appendedString);
      CFStringAppend(v9, v34);
      v22 = v9;
      v23 = CFSTR(")");
    }
    CFStringAppend(v22, v23);
LABEL_38:
    v29 = v9;
LABEL_39:
    v9 = 0;
LABEL_40:
    if (appendedString)
      CFRelease(appendedString);
    v30 = v9;
    v9 = v29;
LABEL_43:
    if (v34)
      CFRelease(v34);
    if (cf)
      CFRelease(cf);
    if (v30)
      CFRelease(v30);
    if (v37)
      CFRelease(v37);
    if (v41)
      CFRelease(v41);
    if (v36)
      CFRelease(v36);
    if (v40)
      CFRelease(v40);
    if (v39)
      CFRelease(v39);
    if (v33)
      CFRelease(v33);
    if (v38)
      CFRelease(v38);
    if ((_DWORD)v18)
      goto LABEL_78;
    if (v9)
      CFStringAppend(Mutable, v9);
    if (++v8 >= CFArrayGetCount(a2))
      goto LABEL_73;
  }
  v18 = FigSignalErrorAt();
LABEL_78:
  if (Mutable)
    CFRelease(Mutable);
LABEL_74:
  if (v9)
    CFRelease(v9);
  return v18;
}

uint64_t _figCSSParser_util_convertComponentValueArrayToTokenArray(const void *a1, const __CFArray *a2, __CFArray **a3)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  CFIndex v8;
  const void *ValueAtIndex;
  uint64_t NodeType;
  uint64_t Type;
  uint64_t v12;
  const __CFArray *v13;
  CFAllocatorRef v14;
  uint64_t v16;
  CFArrayRef theArray;
  CFTypeRef v18;
  CFTypeRef cf;
  CFTypeRef v20;
  CFTypeRef v21;
  void *value;
  CFRange v23;

  v21 = 0;
  value = 0;
  cf = 0;
  v20 = 0;
  theArray = 0;
  v18 = 0;
  if (!a1 || !a2 || !a3)
  {
    v12 = FigSignalErrorAt();
LABEL_37:
    Mutable = 0;
    goto LABEL_38;
  }
  v6 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      v8 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v8);
        v16 = 0;
        NodeType = FigCSSParserNodeGetNodeType((uint64_t)ValueAtIndex, (_DWORD *)&v16 + 1);
        if ((_DWORD)NodeType)
          goto LABEL_54;
        if (HIDWORD(v16) != 4)
          goto LABEL_53;
        Type = FigCSSComponentValueParserNodeGetType((uint64_t)ValueAtIndex, (int *)&v16);
        if ((_DWORD)v16 == 2)
        {
          NodeType = FigCSSComponentValueParserNodeCopyFunctionNode((uint64_t)ValueAtIndex, &v20);
          if ((_DWORD)NodeType)
            goto LABEL_54;
          NodeType = FigCSSFunctionParserNodeCopyName((uint64_t)v20, &cf);
          if ((_DWORD)NodeType)
            goto LABEL_54;
          CFArrayAppendValue(Mutable, cf);
          NodeType = FigCSSFunctionParserNodeCopyValue((uint64_t)v20, &v18);
          if ((_DWORD)NodeType)
            goto LABEL_54;
          NodeType = _figCSSParser_util_convertComponentValueArrayToTokenArray(a1, v18, &theArray);
          if ((_DWORD)NodeType)
            goto LABEL_54;
          v13 = theArray;
          if (theArray)
          {
            v23.length = CFArrayGetCount(theArray);
            v23.location = 0;
            CFArrayAppendArray(Mutable, v13, v23);
          }
          v14 = CFGetAllocator(a1);
          NodeType = FigCSSSimpleTokenCreate((uint64_t)v14, 17, &v21);
          if ((_DWORD)NodeType)
            goto LABEL_54;
          CFArrayAppendValue(Mutable, v21);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (v21)
          {
            CFRelease(v21);
            v21 = 0;
          }
          if (v20)
          {
            CFRelease(v20);
            v20 = 0;
          }
          if (v18)
          {
            CFRelease(v18);
            v18 = 0;
          }
          if (!theArray)
          {
LABEL_32:
            v12 = 0;
            goto LABEL_33;
          }
          CFRelease(theArray);
          v12 = 0;
          theArray = 0;
        }
        else
        {
          v12 = Type;
          if ((_DWORD)v16 == 1)
          {
            NodeType = FigCSSComponentValueParserNodeCopyPreservedToken((uint64_t)ValueAtIndex, &value);
            if ((_DWORD)NodeType)
              goto LABEL_54;
            if (!value)
              goto LABEL_32;
            CFArrayAppendValue(Mutable, value);
            if (!value)
              goto LABEL_32;
            CFRelease(value);
            v12 = 0;
            value = 0;
          }
        }
LABEL_33:
        if (++v8 >= CFArrayGetCount(a2))
          goto LABEL_36;
      }
    }
    v12 = 0;
LABEL_36:
    *a3 = Mutable;
    goto LABEL_37;
  }
LABEL_53:
  NodeType = FigSignalErrorAt();
LABEL_54:
  v12 = NodeType;
LABEL_38:
  if (value)
  {
    CFRelease(value);
    value = 0;
  }
  if (v21)
  {
    CFRelease(v21);
    v21 = 0;
  }
  if (v20)
  {
    CFRelease(v20);
    v20 = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v18)
  {
    CFRelease(v18);
    v18 = 0;
  }
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  return v12;
}

uint64_t FigVideoRenderPipelineCreateWithFigImageQueueArray(const __CFAllocator *a1, int a2, const void *a3, const void *a4, int a5, CFArrayRef theArray, const __CFArray *a7, const __CFDictionary *a8, _QWORD *a9)
{
  uint64_t Count;
  uint64_t v14;
  const void *v15;
  uint64_t DerivedStorage;
  uint64_t v17;
  CFAllocatorRef *v18;
  __CFArray *MutableCopy;
  CFMutableArrayRef Mutable;
  const void *v22;
  CFAllocatorRef v23;
  CFArrayRef Copy;
  CFTypeRef v25;
  uint64_t v26;
  CFArrayRef v27;
  uint64_t v28;
  const __CFArray *v29;
  CFIndex v30;
  const __CFArray *v31;
  CFIndex v32;
  __CFArray *v33;
  CFIndex v34;
  const __CFArray *ValueAtIndex;
  const __CFArray *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  const void **v42;
  const void *v43;
  uint64_t v44;
  const void *v45;
  CFTypeRef v46;
  const void *v47;
  const __CFString *v48;
  uint64_t Asynchronous;
  void *v50;
  const void *v51;
  CFIndex v52;
  __int128 *v53;
  const void *v54;
  const __CFArray *v55;
  dispatch_queue_t v56;
  uint64_t v57;
  const __CFAllocator *v58;
  CFMutableArrayRef v59;
  void (*v60)(_QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const __CFArray *v69;
  __int128 *v70;
  CFTypeRef v71;
  CFArrayRef v72;
  const void *v73;
  __CFArray *v74;
  const __CFAllocator *allocator;
  __int128 v78;
  __int128 v79;
  uint64_t (*v80)(uint64_t, CVImageBufferRef, uint64_t, void (*)(uint64_t, CVImageBufferRef), uint64_t);
  CFArrayRef theArraya;
  CFArrayRef v82;
  CFArrayRef v83;
  void *value;
  CMTime v85;
  CMTime v86;
  char v87;
  __int16 v88;
  __int16 v89;
  CFTypeRef v90;
  __CFDictionary *v91;
  __int16 v92;
  CMTime v93;
  CMTime v94;

  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v83 = 0;
  value = 0;
  theArraya = 0;
  v82 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a9 || Count <= 0)
    return FigSignalErrorAt();
  v94.value = 0;
  FigRenderPipelineGetClassID();
  v14 = CMDerivedObjectCreate();
  if ((_DWORD)v14)
  {
    v61 = v14;
    v33 = 0;
    v53 = 0;
  }
  else
  {
    v15 = (const void *)v94.value;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(DerivedStorage + 136) = 1;
    v17 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 72) = v17;
    if (v17)
    {
      *(_BYTE *)(DerivedStorage + 80) = 1;
      v18 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      if (a7)
      {
        MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a7);
        goto LABEL_14;
      }
      Mutable = CFArrayCreateMutable(a1, Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        MutableCopy = Mutable;
        v22 = (const void *)*MEMORY[0x1E0C9B0D0];
        do
        {
          CFArrayAppendValue(MutableCopy, v22);
          --Count;
        }
        while (Count);
LABEL_14:
        v23 = *v18;
        Copy = CFArrayCreateCopy(*v18, theArray);
        *(_QWORD *)(DerivedStorage + 56) = Copy;
        if (Copy)
        {
          if (MutableCopy)
            v25 = CFRetain(MutableCopy);
          else
            v25 = 0;
          *(_QWORD *)(DerivedStorage + 64) = v25;
          v26 = figVideoRenderPipelineCopyFigImageQueueAndOptionsArrayGroupedByVideoLayerID((uint64_t)v15, &v83, &v82, &theArraya);
          if (!(_DWORD)v26)
          {
            v74 = MutableCopy;
            v27 = theArraya;
            allocator = v23;
            if (theArraya)
              v28 = CFArrayGetCount(theArraya);
            else
              v28 = 0;
            v29 = v83;
            if (v83)
              v30 = CFArrayGetCount(v83);
            else
              v30 = 0;
            if (v28 != v30 || ((v31 = v82) == 0 ? (v32 = 0) : (v32 = CFArrayGetCount(v82)), v28 != v32))
            {
              v61 = FigSignalErrorAt();
              v53 = 0;
              v33 = 0;
LABEL_104:
              MutableCopy = v74;
LABEL_78:
              if (MutableCopy)
                CFRelease(MutableCopy);
              goto LABEL_80;
            }
            v33 = CFArrayCreateMutable(a1, v28, MEMORY[0x1E0C9B378]);
            if (!v33)
            {
              v41 = FigSignalErrorAt();
LABEL_103:
              v61 = v41;
              v53 = 0;
              goto LABEL_104;
            }
            v72 = v27;
            if (v28 >= 1)
            {
              v34 = 0;
              do
              {
                ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v29, v34);
                v36 = (const __CFArray *)CFArrayGetValueAtIndex(v31, v34);
                v41 = FigImageQueueCreateForCacheAndFanOut((int)a1, ValueAtIndex, v36, (uint64_t)&value, v37, v38, v39, v40, v62, v63, v64, v65, v66, v67, v68, v69);
                if ((_DWORD)v41)
                  goto LABEL_103;
                CFArrayAppendValue(v33, value);
                if (value)
                {
                  CFRelease(value);
                  value = 0;
                }
              }
              while (v28 != ++v34);
            }
            *(_QWORD *)(DerivedStorage + 40) = v33;
            *(_QWORD *)(DerivedStorage + 48) = v72;
            theArraya = 0;
            v78 = 0u;
            v79 = 0u;
            v80 = 0;
            v42 = (const void **)MEMORY[0x1E0C9AE50];
            if (a8 && CFDictionaryGetValue(a8, CFSTR("ShouldRotateAndScale")) == *v42)
            {
              v43 = (const void *)FigTransformUtilityCreate((uint64_t)a1, a3);
              *(_QWORD *)(DerivedStorage + 128) = v43;
              *(_QWORD *)&v78 = 0;
              *((_QWORD *)&v78 + 1) = CFRetain(v43);
              *((_QWORD *)&v79 + 1) = FigTransformUtilityRelease;
              v80 = FigTransformUtilityGenerateReplacementImageBufferAsync;
              v70 = &v78;
            }
            else
            {
              v70 = 0;
            }
            memset(&v94, 0, sizeof(v94));
            CMTimeMake(&v94, 3, 30);
            memset(&v93, 0, sizeof(v93));
            CMTimeMake(&v93, 5, 30);
            v92 = 0;
            v44 = CMBaseObjectGetDerivedStorage();
            v90 = 0;
            v91 = 0;
            v89 = 0;
            v88 = 0;
            v87 = 0;
            if (a8)
            {
              CFDictionaryGetValue(a8, CFSTR("FormatDescription"));
              FigCFDictionaryGetCMTimeIfPresent();
              FigCFDictionaryGetCMTimeIfPresent();
              CFDictionaryGetValue(a8, CFSTR("SharePixelBufferPool"));
              CFDictionaryGetValue(a8, CFSTR("AllowClientProcessDecode"));
              CFDictionaryGetValue(a8, CFSTR("LoggingID"));
              FigCFDictionaryGetBooleanIfPresent();
              if (FigCFDictionaryGetBooleanIfPresent())
                HIBYTE(v92) = (_BYTE)v92 == 0;
              FigCFDictionaryGetBooleanIfPresent();
              FigCFDictionaryGetBooleanIfPresent();
              FigCFDictionaryGetBooleanIfPresent();
              FigCFDictionaryGetInt32IfPresent();
              FigCFDictionaryGetBooleanIfPresent();
              FigCFDictionaryGetBooleanIfPresent();
            }
            v45 = *(const void **)(v44 + 40);
            if (v45)
              v46 = CFRetain(v45);
            else
              v46 = 0;
            v47 = *(const void **)(v44 + 48);
            v73 = v46;
            if (v47)
              v71 = CFRetain(v47);
            else
              v71 = 0;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.version = 1;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.refcon = 0;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getDecodeTimeStamp = (CMBufferGetTimeCallback)vsbufGetDecodeTimeStamp;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getPresentationTimeStamp = (CMBufferGetTimeCallback)vsbufGetPresentationTimeStamp;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getDuration = (CMBufferGetTimeCallback)vsbufGetDuration;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.isDataReady = (CMBufferGetBooleanCallback)vsbufDataIsReady;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.compare = 0;
            v48 = (const __CFString *)*MEMORY[0x1E0CA27C8];
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.dataBecameReadyNotification = (CFStringRef)*MEMORY[0x1E0CA27C8];
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getSize = (CMBufferGetSizeCallback)vsbufGetSampleSize;
            Asynchronous = CMBufferQueueCreate(allocator, 0, &gFigBufferQueueCallbacksThatIgnoreCatchupFrames, (CMBufferQueueRef *)(v44 + 8));
            if ((_DWORD)Asynchronous)
              goto LABEL_95;
            if (!v87)
              goto LABEL_55;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.version = 1;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.refcon = 0;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getDecodeTimeStamp = (CMBufferGetTimeCallback)vsbufGetDecodeTimeStamp;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getPresentationTimeStamp = (CMBufferGetTimeCallback)vsbufGetPresentationTimeStamp;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getDuration = (CMBufferGetTimeCallback)vsbufGetDuration;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.isDataReady = (CMBufferGetBooleanCallback)vsbufDataIsReady;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.compare = 0;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.dataBecameReadyNotification = v48;
            gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getSize = (CMBufferGetSizeCallback)vsbufGetSampleSize;
            Asynchronous = CMBufferQueueCreate(allocator, 0, &gFigBufferQueueCallbacksThatIgnoreCatchupFrames, (CMBufferQueueRef *)(v44 + 24));
            if ((_DWORD)Asynchronous
              || (v50 = *(void **)(v44 + 8),
                  v51 = *(const void **)(v44 + 24),
                  v86 = v93,
                  v85 = v94,
                  Asynchronous = FigSampleAttachmentCollectorCreateAsynchronous(allocator, 0, v50, 0, v51, (uint64_t)&v86, (__int128 *)&v85.value, 0, (CFTypeRef *)(v44 + 32)), (_DWORD)Asynchronous))
            {
LABEL_95:
              v61 = Asynchronous;
              v53 = v70;
              v54 = v71;
            }
            else
            {
LABEL_55:
              *(_QWORD *)(v44 + 104) = a3;
              if (a3)
                CFRetain(a3);
              *(_QWORD *)(v44 + 112) = a4;
              if (a4)
                CFRetain(a4);
              figVideoRenderPipelineCopyMaxFanOutDisplayLayerSize((uint64_t)v15, &v91);
              v52 = 0;
              v53 = v70;
              v54 = v71;
              while (1)
              {
                v55 = *(const __CFArray **)(v44 + 40);
                if (v55)
                  v55 = (const __CFArray *)CFArrayGetCount(v55);
                if (v52 >= (uint64_t)v55)
                  break;
                CFArrayGetValueAtIndex(*(CFArrayRef *)(v44 + 40), v52);
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListeners();
                ++v52;
              }
              v56 = dispatch_queue_create("com.apple.coremedia.svrp.notificationQueue", 0);
              *(_QWORD *)(v44 + 192) = v56;
              if (v56)
              {
                v57 = FigSimpleMutexCreate();
                *(_QWORD *)(v44 + 152) = v57;
                if (v57)
                {
                  v58 = CFGetAllocator(v15);
                  v59 = CFArrayCreateMutable(v58, 0, MEMORY[0x1E0C9B378]);
                  *(_QWORD *)(v44 + 184) = v59;
                  if (v59)
                  {
                    *(_BYTE *)(v44 + 160) = 0;
                    *(_BYTE *)(v44 + 176) = 0;
                    figVideoRenderPipelineCopyVideoImageQueueArray((uint64_t)v15, &v90, 0);
                  }
                }
              }
              v61 = FigSignalErrorAt();
            }
            if (v91)
              CFRelease(v91);
            if (v73)
              CFRelease(v73);
            MutableCopy = v74;
            if (v54)
              CFRelease(v54);
            if (v90)
              CFRelease(v90);
            if (!(_DWORD)v61)
            {
              v33 = 0;
              *a9 = v15;
              goto LABEL_78;
            }
LABEL_101:
            v33 = 0;
            goto LABEL_78;
          }
        }
        else
        {
          v26 = FigSignalErrorAt();
        }
        v61 = v26;
        v53 = 0;
        goto LABEL_101;
      }
      v61 = FigSignalErrorAt();
    }
    else
    {
      v61 = 0;
    }
    v33 = 0;
    v53 = 0;
  }
LABEL_80:
  if (value)
    CFRelease(value);
  if (v83)
    CFRelease(v83);
  if (v82)
    CFRelease(v82);
  if (theArraya)
    CFRelease(theArraya);
  if (v33)
    CFRelease(v33);
  if (v53)
  {
    v60 = (void (*)(_QWORD))*((_QWORD *)v53 + 3);
    if (v60)
      v60(*((_QWORD *)v53 + 1));
  }
  return v61;
}

