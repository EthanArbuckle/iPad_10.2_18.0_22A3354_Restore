uint64_t FigICY_CustomURLLoaderCallbackFn(uint64_t a1, uint64_t a2, const void *a3, void *a4, char a5)
{
  const void *v8;
  const void *v9;
  int v10;
  OpaqueCMBlockBuffer *v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  int v14;
  uint64_t v15;
  size_t DataLength;
  uint64_t v17;
  size_t v18;
  OpaqueCMBlockBuffer *v19;
  _BOOL4 v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  CMBlockBufferRef theBuffer;
  uint64_t v27;
  void *value;
  CFDictionaryRef theDict;

  theBuffer = 0;
  v8 = FigICY_LockAndCopyPump(a1, a2);
  if (!v8)
    goto LABEL_40;
  v9 = v8;
  v10 = a5 & 1;
  if (a4)
    v11 = (OpaqueCMBlockBuffer *)CFRetain(a4);
  else
    v11 = 0;
  theBuffer = v11;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = DerivedStorage;
  v14 = v10;
  if (a3)
  {
    v14 = v10;
    if (!*(_QWORD *)(DerivedStorage + 328))
    {
      *(_QWORD *)(DerivedStorage + 328) = CFRetain(a3);
      value = 0;
      theDict = 0;
      if (*(_BYTE *)(v13 + 336))
      {
        v27 = 0;
        *(_BYTE *)(v13 + 337) = 1;
        FigCustomURLResponseInfoCopyHTTPHeaders();
        if (theDict)
        {
          if (CFDictionaryGetValueIfPresent(theDict, CFSTR("Content-Range"), (const void **)&value)
            && FigCFHTTPGetContentRangeFromHeaderString((uint64_t)value, &v27, 0, 0, 0)
            && v27 == *(_QWORD *)(v13 + 344))
          {
            *(_BYTE *)(v13 + 337) = 0;
          }
          if (theDict)
            CFRelease(theDict);
        }
      }
      v14 = 1;
    }
  }
  v15 = 0;
  if (a4 && *(_BYTE *)(v13 + 337))
  {
    if (*(_QWORD *)(v13 + 352) >= *(_QWORD *)(v13 + 344))
    {
      v15 = 0;
      *(_BYTE *)(v13 + 337) = 0;
      if (v11)
        goto LABEL_24;
LABEL_33:
      v20 = 0;
      v19 = 0;
      goto LABEL_34;
    }
    DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)a4);
    v17 = *(_QWORD *)(v13 + 352);
    v18 = *(_QWORD *)(v13 + 344) - v17;
    *(_QWORD *)(v13 + 352) = v17 + DataLength;
    if (v11)
    {
      CFRelease(v11);
      theBuffer = 0;
    }
    if (DataLength <= v18)
    {
      v20 = 0;
      v19 = 0;
      v15 = 0;
      if (v14)
        goto LABEL_36;
      goto LABEL_35;
    }
    v15 = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CMBlockBufferRef)a4, v18, DataLength - v18, 0, &theBuffer);
    v14 = 1;
    v11 = theBuffer;
  }
  if (!v11)
    goto LABEL_33;
LABEL_24:
  CMBlockBufferGetDataLength(v11);
  v19 = theBuffer;
  v20 = theBuffer != 0;
  if (*(_BYTE *)(v13 + 19) && theBuffer)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v13 + 360), theBuffer);
    v21 = *(_QWORD *)(v13 + 368) + CMBlockBufferGetDataLength(theBuffer);
    *(_QWORD *)(v13 + 368) = v21;
    if (v21 > 0x100000)
    {
      v22 = *(_QWORD *)(v13 + 312);
      v23 = *(_QWORD *)(v13 + 320);
      v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v24)
        v24(v22, v23);
      *(_QWORD *)(v13 + 320) = 0;
      *(_BYTE *)(v13 + 376) = 1;
    }
    if (v10)
      *(_BYTE *)(v13 + 377) = 1;
    goto LABEL_37;
  }
LABEL_34:
  if (v14)
  {
LABEL_36:
    FigICY_HTTPCommonCallback((uint64_t)v9, v19, v10, v15);
    goto LABEL_37;
  }
LABEL_35:
  if (v20)
    goto LABEL_36;
LABEL_37:
  if (theBuffer)
    CFRelease(theBuffer);
  CFRelease(v9);
LABEL_40:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t FigICY_HTTPPumpFn(uint64_t a1, int a2, uint64_t a3, OpaqueCMBlockBuffer *a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  const void *v11;
  const void *v12;

  v11 = FigICY_LockAndCopyPump(a3, a2);
  if (v11)
  {
    v12 = v11;
    FigICY_HTTPCommonCallback((uint64_t)v11, a4, (a7 >> 1) & 1, a8);
    CFRelease(v12);
  }
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t fbp_NetworkInactivityTimer()
{
  uint64_t UpTimeNanoseconds;
  uint64_t Owner;
  uint64_t DerivedStorage;
  uint64_t v4;
  unint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  double v8;
  NSObject *v9;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    Owner = FigRetainProxyGetOwner();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = DerivedStorage;
    v5 = UpTimeNanoseconds - *(_QWORD *)(DerivedStorage + 40);
    if (v5 <= 0x37E11D5FFLL)
    {
      v7 = *(NSObject **)(DerivedStorage + 48);
      if (v7)
      {
        v8 = (double)(15000000000 - v5) / 1000000000.0;
        if (v8 < 1.0)
          v8 = 1.0;
        FigHTTPRescheduleTimer(v8, *(_QWORD *)(DerivedStorage + 80), v7);
      }
    }
    else if (*(_BYTE *)(DerivedStorage + 19))
    {
      if (dword_1EE2A2988)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1EE2A2988)
      {
        v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fbp_CancelAndRetryRequest(Owner, v4, 4294950466);
    }
  }
  return FigRetainProxyUnlockMutex();
}

const void *FigICY_LockAndCopyPump(uint64_t a1, uint64_t a2)
{
  const void *Owner;
  uint64_t DerivedStorage;
  const void *result;
  uint64_t v6;

  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
    return 0;
  Owner = (const void *)FigRetainProxyGetOwner();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 304))
  {
    result = 0;
    if (!Owner)
      return result;
    v6 = *(_QWORD *)(DerivedStorage + 320);
  }
  else
  {
    result = 0;
    if (!Owner)
      return result;
    v6 = *(int *)(DerivedStorage + 152);
  }
  if (v6 == a2)
  {
    CFRetain(Owner);
    return Owner;
  }
  return result;
}

void FigICY_HTTPCommonCallback(uint64_t a1, OpaqueCMBlockBuffer *a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t appended;
  const __CFAllocator *v9;
  OpaqueCMBlockBuffer *v10;
  size_t DataLength;
  size_t v12;
  OpaqueCMBlockBuffer *v13;
  size_t v14;
  BOOL v15;
  _BOOL4 v17;
  uint64_t v18;
  OpaqueCMBlockBuffer *v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  void *v28;
  uint64_t PlaylistFileParserFromData;
  size_t v30;
  OpaqueCMBlockBuffer *v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  size_t v37;
  int v38;
  size_t v39;
  size_t v40;
  unint64_t v41;
  OpaqueCMBlockBuffer *v42;
  uint64_t Empty;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  int v47;
  const __CFString *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, __CFString *, _QWORD, CFURLRef *);
  CFStringRef v51;
  CMBlockBufferRef v52;
  const __CFString *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, __CFString *, _QWORD, _BYTE *);
  CFComparisonResult v57;
  const double *v58;
  int64x2_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, const __CFString *, _QWORD, _BYTE *);
  uint64_t v62;
  unsigned int (*v63)(uint64_t, __CFString *, _QWORD, _BYTE *);
  int v64;
  int v65;
  OpaqueCMBlockBuffer *v66;
  size_t v67;
  const void *v68;
  CMBlockBufferRef v69;
  const void **v70;
  const void *v71;
  const __CFArray **v72;
  const __CFArray *v73;
  CFArrayRef *v74;
  CFIndex v75;
  CFURLRef v76;
  NSObject *v77;
  unsigned int v78;
  unsigned int v79;
  const void *v80;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v82;
  unsigned int v83;
  NSObject *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 v94;
  const __CFString *inTagClass;
  CMBlockBufferRef *v96;
  int v97;
  const __CFString *v99;
  CFURLRef url;
  CMBlockBufferRef blockBufferOut;
  _BYTE cf[12];
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  CMBlockBufferRef destination[18];

  destination[16] = *(CMBlockBufferRef *)MEMORY[0x1E0C80C00];
  blockBufferOut = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  appended = a4;
  v97 = a4;
  if ((_DWORD)a4)
    goto LABEL_184;
  *(_QWORD *)(DerivedStorage + 40) = FigGetUpTimeNanoseconds();
  *(_DWORD *)(DerivedStorage + 56) = 0;
  if (a3)
    FigHTTPStopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 48));
  if (*(_BYTE *)(DerivedStorage + 19))
    *(_QWORD *)(DerivedStorage + 288) = FigGetUpTimeNanoseconds();
  if (!a2)
  {
    appended = 0;
    if (a3)
      goto LABEL_160;
    goto LABEL_183;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  appended = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 2u, &blockBufferOut);
  if ((_DWORD)appended)
    v10 = a2;
  else
    v10 = blockBufferOut;
  DataLength = CMBlockBufferGetDataLength(v10);
  v12 = DataLength;
  v13 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 216);
  if (v13 && DataLength)
  {
    v14 = CMBlockBufferGetDataLength(v10);
    appended = CMBlockBufferAppendBufferReference(v13, v10, 0, v14, 0);
    v12 = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(DerivedStorage + 216));
  }
  else
  {
    if (v10)
      v15 = DataLength == 0;
    else
      v15 = 1;
    if (!v15)
    {
      *(_QWORD *)(DerivedStorage + 216) = CFRetain(v10);
      *(_QWORD *)(DerivedStorage + 232) = 0;
    }
  }
  v17 = (v12 & 0xFFFFFFFFFFFF0000) != 0 && a3 == 0;
  v94 = v17;
  v96 = (CMBlockBufferRef *)(DerivedStorage + 160);
  inTagClass = (const __CFString *)*MEMORY[0x1E0CA5A90];
  while (2)
  {
    switch(*(_DWORD *)(DerivedStorage + 224))
    {
      case 0:
        url = 0;
        if (*(_BYTE *)(DerivedStorage + 304))
        {
          if (!*(_QWORD *)(DerivedStorage + 328))
          {
            appended = 4294954651;
            goto LABEL_184;
          }
          v18 = FigCustomURLResponseInfoCopyFinalURL();
        }
        else
        {
          v49 = *(_QWORD *)(DerivedStorage + 144);
          v50 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
          if (!v50)
          {
            appended = 4294954514;
LABEL_184:
            v80 = *(const void **)(DerivedStorage + 216);
            if (v80)
            {
              CFRelease(v80);
              *(_QWORD *)(DerivedStorage + 216) = 0;
            }
            *(_QWORD *)(DerivedStorage + 232) = 0;
            if (a3 || v97)
            {
              FigICY_InvalidateHTTP(DerivedStorage);
              if (v97)
              {
                fbp_CancelAndRetryRequest(a1, DerivedStorage, appended);
                goto LABEL_211;
              }
            }
            if (dword_1EE2A2988)
            {
              LODWORD(url) = 0;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v82 = url;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
                v83 = v82;
              else
                v83 = v82 & 0xFFFFFFFE;
              if (v83)
              {
                *(_DWORD *)cf = 136315394;
                *(_QWORD *)&cf[4] = "FigICY_HTTPCommonCallback";
                v103 = 1024;
                v104 = appended;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v88 = *(_QWORD *)(DerivedStorage + 72);
            v89 = *(_QWORD *)(DerivedStorage + 192);
            v90 = (__int128 *)MEMORY[0x1E0CA2E18];
            v91 = a1;
            v92 = DerivedStorage;
            v93 = appended;
            goto LABEL_210;
          }
          v18 = v50(v49, CFSTR("FHRP_HTTPFinalURL"), 0, &url);
        }
        appended = v18;
        if ((_DWORD)v18)
          goto LABEL_184;
        if (!url)
          goto LABEL_86;
        v51 = CFURLCopyPathExtension(url);
        CFRelease(url);
        if (!v51)
          goto LABEL_86;
        if (CFStringCompare(v51, CFSTR("pls"), 1uLL) == kCFCompareEqualTo
          || CFStringCompare(v51, CFSTR("m3u8"), 1uLL) == kCFCompareEqualTo
          || CFStringCompare(v51, CFSTR("m3u"), 1uLL) == kCFCompareEqualTo)
        {
          CFRelease(v51);
          if (*(_QWORD *)(DerivedStorage + 168))
            goto LABEL_215;
          Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)DerivedStorage, 0, 0, v96);
          if ((_DWORD)Empty)
            goto LABEL_216;
          v54 = *(_DWORD *)(DerivedStorage + 280) + 1;
          *(_DWORD *)(DerivedStorage + 280) = v54;
          if (v54 > 1)
            goto LABEL_215;
          goto LABEL_120;
        }
        CFRelease(v51);
LABEL_86:
        destination[0] = 0;
        if (*(_BYTE *)(DerivedStorage + 304))
        {
          if (!*(_QWORD *)(DerivedStorage + 328))
            goto LABEL_113;
          appended = FigCustomURLResponseInfoCopyUniversalTypeIdentifier();
          v52 = destination[0];
          if (!(_DWORD)appended)
          {
            v53 = UTTypeCopyPreferredTagWithClass((CFStringRef)destination[0], inTagClass);
            v52 = destination[0];
            if (!destination[0])
              goto LABEL_107;
            goto LABEL_106;
          }
          v53 = 0;
          if (destination[0])
            goto LABEL_106;
        }
        else
        {
          *(_QWORD *)cf = 0;
          v55 = *(_QWORD *)(DerivedStorage + 144);
          v56 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
          if (v56)
          {
            appended = v56(v55, CFSTR("FHRP_HTTPResponseHeaders"), 0, cf);
            if (!(_DWORD)appended)
            {
              v53 = FigCFHTTPCopyMimeTypeFromHTTPResponse(*(__CFHTTPMessage **)cf);
              v52 = *(CMBlockBufferRef *)cf;
LABEL_106:
              CFRelease(v52);
              goto LABEL_107;
            }
            v53 = 0;
          }
          else
          {
            v53 = 0;
            appended = 4294954514;
          }
        }
LABEL_107:
        if ((_DWORD)appended)
          goto LABEL_184;
        if (v53)
        {
          if (CFStringCompare(v53, CFSTR("audio/mpegurl"), 1uLL)
            && CFStringCompare(v53, CFSTR("audio/x-mpegurl"), 1uLL)
            && CFStringCompare(v53, CFSTR("audio/scpls"), 1uLL))
          {
            v57 = CFStringCompare(v53, CFSTR("audio/x-scpls"), 1uLL);
            CFRelease(v53);
            if (v57)
              goto LABEL_113;
          }
          else
          {
            CFRelease(v53);
          }
          if (*(_QWORD *)(DerivedStorage + 168))
          {
LABEL_215:
            Empty = FigSignalErrorAt();
LABEL_216:
            appended = Empty;
            if (!(_DWORD)Empty)
              goto LABEL_211;
            goto LABEL_184;
          }
          Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)DerivedStorage, 0, 0, v96);
          if ((_DWORD)Empty)
            goto LABEL_216;
LABEL_120:
          appended = 0;
          *(_DWORD *)(DerivedStorage + 224) = 5;
          continue;
        }
LABEL_113:
        *(_QWORD *)(DerivedStorage + 208) = 0;
        if (*(_BYTE *)(DerivedStorage + 304))
        {
          destination[0] = 0;
          if (*(_QWORD *)(DerivedStorage + 328) && !FigCustomURLResponseInfoGetContentLength())
            goto LABEL_116;
        }
        else
        {
          destination[0] = 0;
          *(_QWORD *)cf = 0;
          v60 = *(_QWORD *)(DerivedStorage + 144);
          v61 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v61
            && !v61(v60, CFSTR("FHRP_PayloadLength"), 0, cf)
            && CFNumberGetValue(*(CFNumberRef *)cf, kCFNumberSInt64Type, destination))
          {
LABEL_116:
            *(CMBlockBufferRef *)(DerivedStorage + 208) = destination[0];
          }
        }
        destination[0] = 0;
        *(_QWORD *)cf = 0;
        v99 = 0;
        if (*(_BYTE *)(DerivedStorage + 304))
        {
          if (*(_QWORD *)(DerivedStorage + 328) && !FigCustomURLResponseInfoCopyHTTPHeaders())
            FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent();
        }
        else
        {
          v62 = *(_QWORD *)(DerivedStorage + 144);
          v63 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
          if (v63 && !v63(v62, CFSTR("FHRP_HTTPResponseHeaders"), 0, cf))
            v99 = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)cf, CFSTR("icy-metaint"));
        }
        if (destination[0])
          CFRelease(destination[0]);
        if (*(_QWORD *)cf)
          CFRelease(*(CFTypeRef *)cf);
        if (v99)
        {
          *(_BYTE *)(DerivedStorage + 60) = 1;
          fbp_SetMetadataPeriod(DerivedStorage, v99);
          CFRelease(v99);
          v64 = 0;
          *(_DWORD *)(DerivedStorage + 224) = 2;
        }
        else if (fbp_CopyChars(DerivedStorage, destination, 0xCuLL))
        {
          if (!strncasecmp((const char *)destination, "ICY 200 OK\r\n", 0xCuLL))
          {
            fbp_AdvanceChars(DerivedStorage, 0xCuLL);
            v65 = 1;
          }
          else
          {
            v65 = 2;
          }
          v64 = 0;
          *(_DWORD *)(DerivedStorage + 224) = v65;
        }
        else
        {
          v64 = 1;
        }
        appended = 0;
        if (!v64)
          continue;
LABEL_153:
        v66 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 216);
        if (!v66)
          goto LABEL_159;
        v67 = *(_QWORD *)(DerivedStorage + 232);
        if (v67 >= v12)
        {
          CFRelease(*(CFTypeRef *)(DerivedStorage + 216));
          *(_QWORD *)(DerivedStorage + 216) = 0;
          if (a3)
            goto LABEL_160;
          goto LABEL_183;
        }
        destination[0] = 0;
        PlaylistFileParserFromData = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)DerivedStorage, v66, v67, 0, 0, destination);
        if ((_DWORD)PlaylistFileParserFromData)
        {
LABEL_218:
          appended = PlaylistFileParserFromData;
          goto LABEL_184;
        }
        v68 = *(const void **)(DerivedStorage + 216);
        if (v68)
          CFRelease(v68);
        appended = 0;
        *(CMBlockBufferRef *)(DerivedStorage + 216) = destination[0];
        *(_QWORD *)(DerivedStorage + 232) = 0;
LABEL_159:
        if (!a3)
        {
LABEL_183:
          if (!(_DWORD)appended)
            goto LABEL_211;
          goto LABEL_184;
        }
LABEL_160:
        if (*(_DWORD *)(DerivedStorage + 224) != 5)
          goto LABEL_169;
        destination[0] = 0;
        PlaylistFileParserFromData = CreatePlaylistFileParserFromData(*(OpaqueCMBlockBuffer **)(DerivedStorage + 216), 0, (CFArrayRef **)destination);
        if ((_DWORD)PlaylistFileParserFromData)
          goto LABEL_218;
        v69 = destination[0];
        if (destination[0])
        {
          v70 = *(const void ***)(DerivedStorage + 168);
          if (v70)
          {
            PlaylistFileParserDestroy(v70);
            v69 = destination[0];
          }
          *(_QWORD *)(DerivedStorage + 168) = v69;
          *(_QWORD *)(DerivedStorage + 176) = 0;
        }
        v71 = *(const void **)(DerivedStorage + 216);
        if (v71)
          CFRelease(v71);
        *(_QWORD *)(DerivedStorage + 216) = 0;
        *(_QWORD *)(DerivedStorage + 232) = 0;
LABEL_169:
        v72 = *(const __CFArray ***)(DerivedStorage + 168);
        if (!v72 || (v73 = PlaylistFileParserItemCount(v72), (v74 = *(CFArrayRef **)(DerivedStorage + 168)) == 0))
        {
          if (dword_1EE2A2988)
          {
            LODWORD(url) = 0;
            v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v78 = url;
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              v79 = v78;
            else
              v79 = v78 & 0xFFFFFFFE;
            if (v79)
            {
              *(_DWORD *)cf = 136315138;
              *(_QWORD *)&cf[4] = "FigICY_HTTPCommonCallback";
              _os_log_send_and_compose_impl();
            }
            goto LABEL_208;
          }
LABEL_209:
          v88 = *(_QWORD *)(DerivedStorage + 72);
          v89 = *(_QWORD *)(DerivedStorage + 192);
          v90 = (__int128 *)MEMORY[0x1E0CA2E18];
          v91 = a1;
          v92 = DerivedStorage;
          v93 = 0;
LABEL_210:
          fbp_SendDataCallback(v91, v92, v88, 0, 2, v89, v90, v93);
          goto LABEL_211;
        }
        v75 = *(_QWORD *)(DerivedStorage + 176);
        if (v75 >= (uint64_t)v73)
        {
          if (dword_1EE2A2988)
          {
            LODWORD(url) = 0;
            v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v85 = url;
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
              v86 = v85;
            else
              v86 = v85 & 0xFFFFFFFE;
            if (v86)
            {
              v87 = *(_QWORD *)(DerivedStorage + 176);
              *(_DWORD *)cf = 136315650;
              *(_QWORD *)&cf[4] = "FigICY_HTTPCommonCallback";
              v103 = 1024;
              v104 = v87;
              v105 = 1024;
              v106 = (int)v73;
              _os_log_send_and_compose_impl();
            }
LABEL_208:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_209;
          }
          goto LABEL_209;
        }
        destination[0] = 0;
        PlaylistFileParserFromData = PlaylistFileParserCopyItem(v74, v75, destination);
        if ((_DWORD)PlaylistFileParserFromData)
          goto LABEL_218;
        ++*(_QWORD *)(DerivedStorage + 176);
        FigICY_InvalidateHTTP(DerivedStorage);
        *(_BYTE *)(DerivedStorage + 20) = 0;
        v76 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)destination[0], 0);
        CFRelease(destination[0]);
        if (!v76)
        {
          *(_DWORD *)(DerivedStorage + 224) = 0;
          *(_BYTE *)(DerivedStorage + 21) = 1;
          goto LABEL_211;
        }
        appended = FigICY_CreateHTTPRequest(a1, v76, 0);
        CFRelease(v76);
        *(_DWORD *)(DerivedStorage + 224) = 0;
        *(_BYTE *)(DerivedStorage + 21) = 1;
        if ((_DWORD)appended)
          goto LABEL_184;
LABEL_211:
        if (blockBufferOut)
          CFRelease(blockBufferOut);
        return;
      case 1:
        *(_QWORD *)cf = 0;
        LOBYTE(url) = 0;
        do
        {
          if (!fbp_CopyChars(DerivedStorage, destination, 0x20uLL))
            goto LABEL_152;
          if (!strncasecmp((const char *)destination, "icy-metaint:", 0xCuLL))
          {
            appended = fbp_GrabHeaderPayload(DerivedStorage, 0xCuLL, (CFStringRef *)cf, &url);
            if (!(_DWORD)appended)
            {
              v48 = *(const __CFString **)cf;
              if (*(_QWORD *)cf)
              {
                *(_BYTE *)(DerivedStorage + 60) = 1;
                fbp_SetMetadataPeriod(DerivedStorage, v48);
                CFRelease(*(CFTypeRef *)cf);
                appended = 0;
              }
            }
          }
          else
          {
            if (!strncasecmp((const char *)destination, "\r\n", 2uLL))
            {
              fbp_AdvanceChars(DerivedStorage, 2uLL);
              *(_DWORD *)(DerivedStorage + 224) = 2;
              goto LABEL_122;
            }
            appended = fbp_GrabHeaderPayload(DerivedStorage, 0, 0, &url);
          }
        }
        while (!(_BYTE)url && !(_DWORD)appended);
        if ((_DWORD)appended)
          goto LABEL_184;
        if ((_BYTE)url)
        {
LABEL_152:
          appended = 0;
          *(int64x2_t *)(DerivedStorage + 192) = vaddq_s64(*(int64x2_t *)(DerivedStorage + 192), vdupq_n_s64(v12));
          goto LABEL_153;
        }
LABEL_122:
        appended = 0;
        v58 = (const double *)(DerivedStorage + 232);
        v59 = (int64x2_t)vld1q_dup_f64(v58);
        *(int64x2_t *)(DerivedStorage + 192) = vaddq_s64(*(int64x2_t *)(DerivedStorage + 192), v59);
        continue;
      case 2:
        v31 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 216);
        if (!v31)
          goto LABEL_215;
        v32 = CMBlockBufferGetDataLength(v31);
        v33 = *(_QWORD *)(DerivedStorage + 232);
        v34 = *(_QWORD *)(DerivedStorage + 240);
        v35 = v32 - v33;
        if (v34)
        {
          destination[0] = 0;
          v36 = v34 - *(_QWORD *)(DerivedStorage + 248);
          if (v36 >= v35)
            v37 = v32 - v33;
          else
            v37 = v36;
          PlaylistFileParserFromData = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)DerivedStorage, *(CMBlockBufferRef *)(DerivedStorage + 216), v33, v37, 0, destination);
          if ((_DWORD)PlaylistFileParserFromData)
            goto LABEL_218;
          v38 = fbp_SendDataCallback(a1, DerivedStorage, *(_QWORD *)(DerivedStorage + 72), (uint64_t)destination[0], 0, *(_QWORD *)(DerivedStorage + 192), MEMORY[0x1E0CA2E18], 0);
          if (destination[0])
            CFRelease(destination[0]);
          if (v38)
            goto LABEL_211;
          v39 = *(_QWORD *)(DerivedStorage + 240);
          v40 = *(_QWORD *)(DerivedStorage + 248) + v37;
          *(_QWORD *)(DerivedStorage + 248) = v40;
          *(_QWORD *)(DerivedStorage + 232) += v37;
          *(int64x2_t *)(DerivedStorage + 192) = vaddq_s64(*(int64x2_t *)(DerivedStorage + 192), vdupq_n_s64(v37));
          if (v40 >= v39)
          {
            *(_DWORD *)(DerivedStorage + 224) = 3;
            *(_QWORD *)(DerivedStorage + 248) = 0;
          }
          v41 = v35 - v37;
        }
        else
        {
          if (fbp_SendDataCallback(a1, DerivedStorage, *(_QWORD *)(DerivedStorage + 72), (uint64_t)v10, 0, *(_QWORD *)(DerivedStorage + 192), MEMORY[0x1E0CA2E18], 0))goto LABEL_211;
          v41 = 0;
          *(_QWORD *)(DerivedStorage + 232) += v35;
          *(int64x2_t *)(DerivedStorage + 192) = vaddq_s64(*(int64x2_t *)(DerivedStorage + 192), vdupq_n_s64(v35));
        }
        appended = 0;
        if (!v41)
          goto LABEL_153;
        continue;
      case 3:
        LOBYTE(destination[0]) = 0;
        *(_QWORD *)(DerivedStorage + 248) = 0;
        v42 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 216);
        if (!v42)
          goto LABEL_215;
        Empty = CMBlockBufferCopyDataBytes(v42, *(_QWORD *)(DerivedStorage + 232), 1uLL, destination);
        if ((_DWORD)Empty)
          goto LABEL_216;
        v44 = LOBYTE(destination[0]);
        *(_QWORD *)(DerivedStorage + 256) = LOBYTE(destination[0]);
        if (v44)
        {
          v45 = *(void **)(DerivedStorage + 272);
          if (v45)
          {
            CFAllocatorDeallocate(v9, v45);
            *(_QWORD *)(DerivedStorage + 272) = 0;
            v44 = *(_QWORD *)(DerivedStorage + 256);
          }
          *(_QWORD *)(DerivedStorage + 256) = 16 * v44;
          v46 = CFAllocatorAllocate(v9, (16 * v44) | 1, 0);
          *(_QWORD *)(DerivedStorage + 272) = v46;
          if (v46)
            v46[*(_QWORD *)(DerivedStorage + 256)] = 0;
          *(_QWORD *)(DerivedStorage + 264) = 0;
          v47 = 4;
        }
        else
        {
          v47 = 2;
        }
        *(_DWORD *)(DerivedStorage + 224) = v47;
        v26 = *(_QWORD *)(DerivedStorage + 232) + 1;
        *(_QWORD *)(DerivedStorage + 232) = v26;
        *(int64x2_t *)(DerivedStorage + 192) = vaddq_s64(*(int64x2_t *)(DerivedStorage + 192), vdupq_n_s64(1uLL));
        v30 = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(DerivedStorage + 216));
        appended = 0;
        goto LABEL_97;
      case 4:
        v19 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 216);
        if (!v19)
          goto LABEL_215;
        v20 = CMBlockBufferGetDataLength(v19);
        v21 = *(_QWORD *)(DerivedStorage + 232);
        v22 = *(_QWORD *)(DerivedStorage + 256);
        v23 = *(_QWORD *)(DerivedStorage + 264);
        if (v20 - v21 >= v22 - v23)
          v24 = v22 - v23;
        else
          v24 = v20 - v21;
        v25 = *(_QWORD *)(DerivedStorage + 272);
        if (!v25)
          goto LABEL_38;
        appended = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(DerivedStorage + 216), v21, v24, (void *)(v25 + v23));
        if ((_DWORD)appended)
          goto LABEL_184;
        v21 = *(_QWORD *)(DerivedStorage + 232);
        v22 = *(_QWORD *)(DerivedStorage + 256);
        v23 = *(_QWORD *)(DerivedStorage + 264);
LABEL_38:
        v26 = v21 + v24;
        *(_QWORD *)(DerivedStorage + 232) = v21 + v24;
        v27 = v23 + v24;
        *(_QWORD *)(DerivedStorage + 264) = v27;
        if (v27 < v22)
          goto LABEL_43;
        *(_DWORD *)(DerivedStorage + 224) = 2;
        v28 = *(void **)(DerivedStorage + 272);
        if (!v28)
          goto LABEL_43;
        destination[0] = 0;
        PlaylistFileParserFromData = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)DerivedStorage, v28, v22 + 1, v9, 0, 0, v22 + 1, 0, destination);
        if ((_DWORD)PlaylistFileParserFromData)
          goto LABEL_218;
        *(_QWORD *)(DerivedStorage + 272) = 0;
        CMSetAttachment(destination[0], CFSTR("FBPAKey_TimedData"), CFSTR("FBPA_TimedData_ICY"), 0);
        appended = fbp_SendDataCallback(a1, DerivedStorage, *(_QWORD *)(DerivedStorage + 72), (uint64_t)destination[0], 0, *(_QWORD *)(DerivedStorage + 192), MEMORY[0x1E0CA2E18], 0);
        CFRelease(destination[0]);
        if ((_DWORD)appended)
          goto LABEL_211;
        v26 = *(_QWORD *)(DerivedStorage + 232);
LABEL_43:
        *(int64x2_t *)(DerivedStorage + 192) = vaddq_s64(*(int64x2_t *)(DerivedStorage + 192), vdupq_n_s64(v24));
        v30 = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(DerivedStorage + 216));
LABEL_97:
        if (v26 >= v30)
          goto LABEL_153;
        continue;
      case 5:
        if (v94)
          goto LABEL_215;
        goto LABEL_153;
      default:
        continue;
    }
  }
}

void fbp_SetMetadataPeriod(uint64_t a1, CFStringRef str)
{
  SInt32 IntValue;

  IntValue = CFStringGetIntValue(str);
  *(_QWORD *)(a1 + 240) = IntValue;
  if ((IntValue - 0x7FFFFFFF) <= 1)
    *(_QWORD *)(a1 + 240) = (unint64_t)CFStringGetDoubleValue(str);
}

uint64_t fbp_CancelAndRetryRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;

  if (*(int *)(a2 + 56) <= 1 && !*(_QWORD *)(a2 + 208) && !*(_BYTE *)(a2 + 19) && *(_BYTE *)(a2 + 60))
  {
    result = FigICY_CreateHTTPRequest(a1, *(_QWORD *)(a2 + 96), 0);
    if (!(_DWORD)result)
    {
      ++*(_DWORD *)(a2 + 56);
      *(_BYTE *)(a2 + 21) = 1;
      return result;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1EE2A2988)
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return fbp_SendDataCallback(a1, a2, *(_QWORD *)(a2 + 72), 0, 2, *(_QWORD *)(a2 + 192), MEMORY[0x1E0CA2E18], a3);
}

uint64_t fbp_CopyChars(uint64_t result, void *a2, size_t a3)
{
  uint64_t v3;
  size_t DataLength;
  size_t v7;
  size_t v8;

  if (result)
  {
    v3 = result;
    result = *(_QWORD *)(result + 216);
    if (result)
    {
      DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)result);
      v7 = *(_QWORD *)(v3 + 232);
      if (DataLength - v7 < a3)
      {
        return 0;
      }
      else
      {
        if (DataLength != v7)
        {
          if (DataLength - v7 >= a3)
            v8 = a3;
          else
            v8 = DataLength - v7;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v3 + 216), v7, v8, a2);
        }
        return 1;
      }
    }
  }
  return result;
}

void fbp_AdvanceChars(uint64_t a1, size_t a2)
{
  OpaqueCMBlockBuffer *v3;
  size_t DataLength;
  uint64_t v6;
  size_t v7;
  const void *v8;

  if (a1)
  {
    v3 = *(OpaqueCMBlockBuffer **)(a1 + 216);
    if (v3)
    {
      DataLength = CMBlockBufferGetDataLength(v3);
      v6 = *(_QWORD *)(a1 + 232);
      if (DataLength - v6 <= a2)
      {
        v8 = *(const void **)(a1 + 216);
        if (v8)
          CFRelease(v8);
        v7 = 0;
        *(_QWORD *)(a1 + 216) = 0;
      }
      else
      {
        v7 = v6 + a2;
      }
      *(_QWORD *)(a1 + 232) = v7;
    }
  }
}

uint64_t fbp_GrabHeaderPayload(uint64_t a1, size_t a2, CFStringRef *a3, _BYTE *a4)
{
  OpaqueCMBlockBuffer *v8;
  uint64_t v9;
  size_t v10;
  size_t DataLength;
  size_t v12;
  OpaqueCMBlockBuffer *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  OpaqueCMBlockBuffer *v19;
  size_t v20;
  char *v22;
  char *v23;
  const __CFAllocator *v24;
  CFStringRef v25;
  char *v26;
  size_t lengthAtOffsetOut;

  v8 = *(OpaqueCMBlockBuffer **)(a1 + 216);
  v9 = *(_QWORD *)(a1 + 232);
  v10 = v9 + a2;
  DataLength = CMBlockBufferGetDataLength(v8);
  v12 = DataLength - v10;
  if (DataLength != v10)
  {
    v15 = 0;
    v26 = 0;
    lengthAtOffsetOut = 0;
    while (!CMBlockBufferGetDataPointer(v8, v15 + v10, &lengthAtOffsetOut, 0, &v26))
    {
      if (lengthAtOffsetOut)
      {
        v16 = 0;
        while (v26[v16] != 13)
        {
          if (lengthAtOffsetOut == ++v16)
          {
            v15 += lengthAtOffsetOut;
            goto LABEL_12;
          }
        }
        v17 = *(_QWORD *)(a1 + 232);
        v18 = v9 + v15 - v17 + v16;
        v19 = *(OpaqueCMBlockBuffer **)(a1 + 216);
        if (v19)
          v20 = CMBlockBufferGetDataLength(v19) - *(_QWORD *)(a1 + 232);
        else
          v20 = 0;
        if (v20 < v18 + 2)
          goto LABEL_17;
        *a4 = 0;
        fbp_AdvanceChars(a1, a2);
        if (a3)
        {
          v22 = (char *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9 + v15 - v17 + v16 + 1, 0);
          if (!v22)
            return FigSignalErrorAt();
          v23 = v22;
          fbp_CopyChars(a1, v22, v18);
        }
        else
        {
          v23 = 0;
        }
        fbp_AdvanceChars(a1, v18);
        fbp_CopyChars(a1, &lengthAtOffsetOut, 2uLL);
        fbp_AdvanceChars(a1, 2uLL);
        if ((unsigned __int16)lengthAtOffsetOut != 2573)
        {
          if (v23)
            CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v23);
          return FigSignalErrorAt();
        }
        if (!v23)
          return 0;
        v23[v9 + v15 - v17 + v16] = 0;
        v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v25 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v23, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
        v14 = 0;
        *a3 = v25;
        if (!v25)
        {
          v14 = FigSignalErrorAt();
          CFAllocatorDeallocate(v24, v23);
        }
        return v14;
      }
LABEL_12:
      if (v15 >= v12)
        break;
    }
  }
  v13 = *(OpaqueCMBlockBuffer **)(a1 + 216);
  if (v13 && CMBlockBufferGetDataLength(v13) - *(_QWORD *)(a1 + 232) > 0x1000)
    return FigSignalErrorAt();
LABEL_17:
  v14 = 0;
  *a4 = 1;
  return v14;
}

uint64_t MovieSampleDataWriterCreate(const void *a1, const void *a2, uint64_t a3, uint64_t a4, char a5, unsigned int a6, uint64_t *a7)
{
  uint64_t Instance;
  uint64_t v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  CFMutableArrayRef Mutable;
  uint64_t v20;

  if (a2 && a7)
  {
    if (sMovieSampleDataWriterRegisterTypeOnce != -1)
      dispatch_once_f(&sMovieSampleDataWriterRegisterTypeOnce, 0, (dispatch_function_t)movieSampleDataWriterRegisterType);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v15 = Instance;
      if (a1)
        v16 = CFRetain(a1);
      else
        v16 = 0;
      *(_QWORD *)(v15 + 16) = v16;
      *(_QWORD *)(v15 + 24) = CFRetain(a2);
      v17 = MediaDataChunkWriterCreate((const __CFAllocator *)a1, (uint64_t *)(v15 + 32));
      if (!(_DWORD)v17)
      {
        v18 = FigSimpleMutexCreate();
        *(_QWORD *)(v15 + 48) = v18;
        if (v18
          && (Mutable = CFArrayCreateMutable((CFAllocatorRef)a1, 0, 0), (*(_QWORD *)(v15 + 56) = Mutable) != 0))
        {
          *(_BYTE *)(v15 + 72) = a5 & 1;
          v17 = MovieHeaderMakerCopyFileTypeMajorBrand((uint64_t)a1, (uint64_t)a2, a3, a4, (CFNumberRef *)(v15 + 80));
          if (!(_DWORD)v17)
          {
            v17 = MovieHeaderMakerCopyFileTypeMinorVersion((uint64_t)a1, (uint64_t)a2, a3, a4, (CFNumberRef *)(v15 + 88));
            if (!(_DWORD)v17)
            {
              v17 = MovieHeaderMakerCopyFileTypeCompatibleBrands((const __CFAllocator *)a1, (uint64_t)a2, a3, a4, (CFMutableArrayRef *)(v15 + 96));
              if (!(_DWORD)v17)
              {
                if (a6 <= 3)
                {
                  *(_BYTE *)(v15 + 105) = 0x1010100u >> (8 * a6);
                  *(_BYTE *)(v15 + 104) = 0x1000100u >> (8 * a6);
                  *(_BYTE *)(v15 + 106) = 0x1000000u >> (8 * a6);
                }
                v17 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x4000uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0x4000uLL, 1u, (CMBlockBufferRef *)(v15 + 144));
                if (!(_DWORD)v17)
                {
                  v20 = CMBlockBufferFillDataBytes(0, *(CMBlockBufferRef *)(v15 + 144), 0, 0);
                  if (!(_DWORD)v20)
                  {
                    *a7 = v15;
                    return v20;
                  }
LABEL_23:
                  CFRelease((CFTypeRef)v15);
                  return v20;
                }
              }
            }
          }
        }
        else
        {
          v17 = FigSignalErrorAt();
        }
      }
      v20 = v17;
      goto LABEL_23;
    }
  }
  return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterAddTrack(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  if (!a1)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v10 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 16), 16, 0);
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  *v10 = 0;
  v10[1] = 0;
  *(_DWORD *)v10 = a2;
  v12 = MediaDataChunkWriterAddTrack(*(CFAllocatorRef **)(a1 + 32), a2, 0, a3, a4, v10 + 1);
  if ((_DWORD)v12)
  {
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 16), v11);
  }
  else
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v11);
    *a5 = v11;
  }
  return v12;
}

uint64_t MovieSampleDataWriterSetThreadPriorityAndClientPID(uint64_t a1)
{
  uint64_t v2;

  if (a1
    && !*(_QWORD *)(a1 + 64)
    && (v2 = FigDispatchQueueCreateWithPriorityAndClientPID(), (*(_QWORD *)(a1 + 64) = v2) != 0))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleDataWriterFlushPendingAsynchronousTasks(uint64_t a1)
{
  NSObject *v1;

  if (!a1)
    return FigSignalErrorAt();
  v1 = *(NSObject **)(a1 + 64);
  if (v1)
    dispatch_sync_f(v1, 0, (dispatch_function_t)doNothingFunc);
  return 0;
}

uint64_t MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](a1[6]);
  v2 = a1[5];
  if (v2)
  {
    v3 = MediaDataChunkWriterFlush(a1[4], v2);
    if (!(_DWORD)v3)
      v3 = patchMediaDataAtomSizeIfNeeded((uint64_t)a1);
  }
  else
  {
    v3 = FigSignalErrorAt();
  }
  v4 = v3;
  MEMORY[0x19402EF04](a1[6]);
  return v4;
}

uint64_t patchMediaDataAtomSizeIfNeeded(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD, uint64_t *);
  uint64_t result;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 108) != 1)
    return 0;
  v5 = 0;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v3)
    return 4294954514;
  result = v3(v2, 0, &v5);
  if (!(_DWORD)result)
    return patchMediaDataAtomSize(a1, *(_QWORD *)(a1 + 112), v5 - *(_QWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 106));
  return result;
}

uint64_t MovieSampleDataWriterGetFirstMediaDataAtomOffset(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!a1 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  if (*(_BYTE *)(a1 + 120) == 1)
  {
    if (a2)
    {
      v6 = -8;
      if (!*(_BYTE *)(a1 + 104))
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v7 = 0;
    *a3 = v6 + *(_QWORD *)(a1 + 128);
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return v7;
}

uint64_t MovieSampleDataWriterPatchFirstMediaDataAtomSize(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (!a1 || (a2 & 0x8000000000000000) != 0)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  if (*(_QWORD *)(a1 + 40) && *(_BYTE *)(a1 + 120) == 1)
    v4 = patchMediaDataAtomSize(a1, *(_QWORD *)(a1 + 128), a2, *(unsigned __int8 *)(a1 + 106));
  else
    v4 = FigSignalErrorAt();
  v5 = v4;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return v5;
}

uint64_t patchMediaDataAtomSize(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *);
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *);
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = 0;
  if (HIDWORD(a3) || a4)
  {
    if (*(_BYTE *)(a1 + 104) != 1)
      return FigSignalErrorAt();
    v14 = 0x7461646D01000000;
    v13 = bswap64(a3 + 8);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 16);
    if (!v10)
      return 4294954514;
    result = v10(v9, 8, a2 - 8, &v14, &v15);
    if ((_DWORD)result)
      return result;
    if (v15 == 8)
    {
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 16);
      if (!v12)
        return 4294954514;
      result = v12(v11, 8, a2, &v13, &v15);
      if ((_DWORD)result)
        return result;
      if (v15 == 8)
        goto LABEL_14;
    }
    return FigSignalErrorAt();
  }
  LODWORD(v14) = bswap32(a3);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 16);
  if (!v7)
    return 4294954514;
  result = v7(v6, 4, a2, &v14, &v15);
  if (!(_DWORD)result)
  {
    if (v15 != 4)
      return FigSignalErrorAt();
LABEL_14:
    result = 0;
    *(_DWORD *)(a1 + 108) = 2;
  }
  return result;
}

uint64_t MovieSampleDataWriterSetPredeterminedMediaDataAtomSize(uint64_t a1, uint64_t a2)
{
  if (!a1 || a2 && a2 <= 7 || *(_DWORD *)(a1 + 108))
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 136) = a2;
  return 0;
}

uint64_t MovieSampleDataWriterSetDefaultByteStream(uint64_t a1, const void *a2)
{
  const void *v4;
  const __CFArray *started;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  v4 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2;
  CFRetain(a2);
  if (v4)
    CFRelease(v4);
  started = startNewChunkForAllTracks(a1);
  if (!(_DWORD)started)
    *(_DWORD *)(a1 + 108) = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return (uint64_t)started;
}

const __CFArray *startNewChunkForAllTracks(uint64_t a1)
{
  const __CFArray *result;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  _QWORD *ValueAtIndex;

  result = *(const __CFArray **)(a1 + 56);
  if (result)
  {
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v4 = Count;
      v5 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v5);
        result = (const __CFArray *)MediaDataChunkWriterTrackStartNewChunk(*(_QWORD *)(a1 + 32), ValueAtIndex[1]);
        if ((_DWORD)result)
          break;
        if (v4 == ++v5)
          return 0;
      }
    }
  }
  return result;
}

uint64_t MovieSampleDataWriterGetLengthOfDefaultByteStream(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t EntireLength;
  uint64_t v7;

  v7 = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](a1[6]);
  v4 = a1[5];
  if (v4)
  {
    EntireLength = MediaDataChunkWriterGetEntireLength(a1[4], v4, &v7);
    if (!(_DWORD)EntireLength)
      *a2 = v7;
  }
  else
  {
    EntireLength = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](a1[6]);
  return EntireLength;
}

uint64_t MovieSampleDataWriterCopyURLOfDefaultByteStream(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v8;
  void (*v10)(uint64_t, _QWORD, uint64_t, _QWORD);

  v10 = 0;
  if (!a1 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  if (*(_QWORD *)(a1 + 40))
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v7 = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
    {
      v7(CMBaseObject, *MEMORY[0x1E0CA2098], a2, &v10);
      v7 = v10;
    }
    v8 = 0;
    *a3 = v7;
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return v8;
}

uint64_t MovieSampleDataWriterSynchronizeDefaultByteStream(uint64_t a1, uint64_t a2, int a3)
{
  const void *v3;
  NSObject *v6;
  _QWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t (*v10)(const void *, uint64_t);

  if (!a1)
    return FigSignalErrorAt();
  v3 = *(const void **)(a1 + 40);
  if (!v3)
    return FigSignalErrorAt();
  v6 = *(NSObject **)(a1 + 64);
  if (v6)
  {
    v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200403A5D3213uLL);
    if (v7)
    {
      v8 = v7;
      *v7 = CFRetain(v3);
      v8[2] = a2;
      if (a3)
        dispatch_async_f(v6, v8, (dispatch_function_t)byteStreamSynchronizeFunc);
      else
        dispatch_sync_f(v6, v8, (dispatch_function_t)byteStreamSynchronizeFunc);
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (a3)
    return FigSignalErrorAt();
  v9 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v9 >= 2uLL && (v10 = (uint64_t (*)(const void *, uint64_t))v9[5]) != 0)
    return v10(v3, a2);
  else
    return 4294954514;
}

uint64_t MovieSampleDataWriterWriteData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a1 && (a3 & 0x8000000000000000) == 0 && a4)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v13 = 0;
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 16);
      if (!v9)
      {
        v11 = 4294954514;
        goto LABEL_10;
      }
      v10 = v9(v8, a2, a3, a4, &v13);
      if ((_DWORD)v10)
      {
LABEL_13:
        v11 = v10;
        goto LABEL_10;
      }
      if (v13 == a2)
      {
        v11 = 0;
LABEL_10:
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
        return v11;
      }
    }
    v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterWriteFreeAtom(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  if (*(_QWORD *)(a1 + 40))
    v6 = writeFreeAtom(a1, a2, a3);
  else
    v6 = FigSignalErrorAt();
  v7 = v6;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return v7;
}

uint64_t writeFreeAtom(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t *);
  uint64_t result;
  uint64_t v11;
  _DWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  if (a3 <= 7)
    return FigSignalErrorAt();
  v13 = v3;
  v14 = v4;
  v12[0] = bswap32(a3);
  v12[1] = 1701147238;
  v11 = 0;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 16);
  if (!v9)
    return 4294954514;
  result = v9(v8, 8, a2, v12, &v11);
  if (!(_DWORD)result)
  {
    if (v11 == 8)
      return writeZeroData(a1, *(_QWORD *)(a1 + 40), a2 + 8, a3 - 8);
    else
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t MovieSampleDataWriterAppendFreeAtom(uint64_t a1, unint64_t a2)
{
  uint64_t appended;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t *);
  uint64_t v7;
  uint64_t v9;

  if (a1)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
    if (*(_QWORD *)(a1 + 40))
    {
      appended = appendFileTypeAtomIfNeeded(a1);
      if (!(_DWORD)appended)
      {
        v9 = 0;
        v5 = *(_QWORD *)(a1 + 40);
        v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v6)
        {
          v7 = 4294954514;
          goto LABEL_9;
        }
        appended = v6(v5, 0, &v9);
        if (!(_DWORD)appended)
          appended = writeFreeAtom(a1, v9, a2);
      }
    }
    else
    {
      appended = FigSignalErrorAt();
    }
    v7 = appended;
LABEL_9:
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
    return v7;
  }
  return FigSignalErrorAt();
}

uint64_t appendFileTypeAtomIfNeeded(uint64_t a1)
{
  uint64_t appended;
  CMBlockBufferRef v3;
  CMBlockBufferRef theBuffer;

  theBuffer = 0;
  appended = createFileTypeAtomIfNeeded(a1, &theBuffer);
  v3 = theBuffer;
  if (!(_DWORD)appended && theBuffer)
  {
    appended = byteStreamAppendBlockBuffer(*(_QWORD *)(a1 + 40), theBuffer);
LABEL_5:
    CFRelease(v3);
    return appended;
  }
  if (theBuffer)
    goto LABEL_5;
  return appended;
}

uint64_t MovieSampleDataWriterAppendBlockBuffer(uint64_t *a1, OpaqueCMBlockBuffer *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t *);
  uint64_t appended;
  size_t DataLength;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a1 && a2)
  {
    MEMORY[0x19402EEEC](a1[6]);
    if (a1[5])
    {
      appendFileTypeAtomAndMediaDataAtomHeaderAndPaddingIfNeeded((uint64_t)a1, 0);
      v13 = 0;
      v6 = a1[5];
      v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v7)
      {
        v11 = 4294954514;
LABEL_12:
        MEMORY[0x19402EF04](a1[6]);
        return v11;
      }
      appended = v7(v6, 0, &v13);
      if ((_DWORD)appended
        || (DataLength = CMBlockBufferGetDataLength(a2), appended = CMByteStreamAppendBlockBuffer(), (_DWORD)appended))
      {
LABEL_15:
        v11 = appended;
        goto LABEL_12;
      }
      if (!DataLength)
      {
        v10 = checkIfMediaDataAtomSizeExceededPredeterminedSizeIfNeeded(a1);
        v11 = v10;
        if (a3)
        {
          if (!(_DWORD)v10)
            *a3 = v13;
        }
        goto LABEL_12;
      }
    }
    appended = FigSignalErrorAt();
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

uint64_t appendFileTypeAtomAndMediaDataAtomHeaderAndPaddingIfNeeded(uint64_t a1, CMBlockBufferRef a2)
{
  uint64_t v4;
  uint64_t appended;
  OpaqueCMBlockBuffer *v6;
  size_t DataLength;
  _BOOL4 v8;
  int v9;
  OpaqueCMBlockBuffer *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t *);
  uint64_t PreferredChunkAlignment;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  signed int v21;
  uint64_t v22;
  CMBlockBufferRef targetBBuf;
  CMBlockBufferRef blockBufferOut;
  CMBlockBufferRef v25;

  targetBBuf = 0;
  blockBufferOut = 0;
  v4 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3u, 0, &blockBufferOut);
  if ((_DWORD)v4)
  {
    v19 = v4;
    goto LABEL_38;
  }
  appended = createFileTypeAtomIfNeeded(a1, &targetBBuf);
  if ((_DWORD)appended)
    goto LABEL_28;
  v6 = targetBBuf;
  if (targetBBuf)
  {
    appended = CMBlockBufferAppendBufferReference(blockBufferOut, targetBBuf, 0, 0, 0);
    if ((_DWORD)appended)
      goto LABEL_28;
    DataLength = CMBlockBufferGetDataLength(v6);
  }
  else
  {
    DataLength = 0;
  }
  v25 = 0;
  if (*(_BYTE *)(a1 + 105) != 1 || *(_DWORD *)(a1 + 108))
  {
    v10 = 0;
    goto LABEL_30;
  }
  appended = MovieHeaderMakerCopyMediaDataAtomHeaderAsBlockBuffer(*(CFAllocatorRef *)(a1 + 16), *(unsigned __int8 *)(a1 + 104), *(_QWORD *)(a1 + 136), &v25);
  if (!(_DWORD)appended)
  {
    v8 = *(_BYTE *)(a1 + 104) != 0;
    if (*(_QWORD *)(a1 + 136))
      v9 = 2;
    else
      v9 = 1;
    *(_DWORD *)(a1 + 108) = v9;
    v10 = v25;
    if (v25)
    {
      v22 = 0;
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v12)
      {
        v19 = 4294954514;
        goto LABEL_34;
      }
      PreferredChunkAlignment = v12(v11, 0, &v22);
      if ((_DWORD)PreferredChunkAlignment)
        goto LABEL_42;
      v14 = 8 * v8 + DataLength + v22;
      *(_QWORD *)(a1 + 112) = v14;
      if (!*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a1 + 128) = v14;
        *(_BYTE *)(a1 + 120) = 1;
      }
      PreferredChunkAlignment = CMBlockBufferAppendBufferReference(blockBufferOut, v10, 0, 0, 0);
      if ((_DWORD)PreferredChunkAlignment)
        goto LABEL_42;
      if (!a2)
        goto LABEL_31;
      v15 = CMBlockBufferGetDataLength(v10);
      v16 = v22;
      v21 = 0;
      PreferredChunkAlignment = MovieSampleDataWriterTrackGetPreferredChunkAlignment(a1, (uint64_t)a2, &v21);
      if ((_DWORD)PreferredChunkAlignment)
      {
LABEL_42:
        v19 = PreferredChunkAlignment;
LABEL_34:
        if (v10)
          CFRelease(v10);
        goto LABEL_36;
      }
      v25 = 0;
      if (v21 >= 2)
      {
        v17 = (uint64_t)(v15 + DataLength + v16) % v21;
        if (v17)
        {
          PreferredChunkAlignment = createPadding(a1, v21 - v17, &v25);
          if (!(_DWORD)PreferredChunkAlignment)
          {
            a2 = v25;
            if (v25)
            {
              v18 = CMBlockBufferAppendBufferReference(blockBufferOut, v25, 0, 0, 0);
              if ((_DWORD)v18)
              {
LABEL_32:
                v19 = v18;
                if (a2)
                  CFRelease(a2);
                goto LABEL_34;
              }
            }
LABEL_31:
            v18 = byteStreamAppendBlockBuffer(*(_QWORD *)(a1 + 40), blockBufferOut);
            goto LABEL_32;
          }
          goto LABEL_42;
        }
      }
    }
LABEL_30:
    a2 = 0;
    goto LABEL_31;
  }
LABEL_28:
  v19 = appended;
LABEL_36:
  if (targetBBuf)
    CFRelease(targetBBuf);
LABEL_38:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v19;
}

uint64_t checkIfMediaDataAtomSizeExceededPredeterminedSizeIfNeeded(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  if (a1[17])
  {
    v3 = 0;
    result = MediaDataChunkWriterGetEntireLength(a1[4], a1[5], &v3);
    if ((_DWORD)result)
      return result;
    if (v3 - a1[14] > a1[17])
      return FigSignalErrorAt();
  }
  return 0;
}

uint64_t MovieSampleDataWriterAppendHeader(uint64_t a1, OpaqueCMBlockBuffer *a2, _QWORD *a3)
{
  uint64_t appended;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _QWORD, uint64_t *);
  size_t DataLength;
  uint64_t v17;
  uint64_t v18;

  if (a1 && a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
    if (!*(_QWORD *)(a1 + 40))
    {
LABEL_25:
      appended = FigSignalErrorAt();
      goto LABEL_26;
    }
    appended = appendFileTypeAtomIfNeeded(a1);
    if ((_DWORD)appended)
      goto LABEL_26;
    appended = MediaDataChunkWriterFlush(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    if ((_DWORD)appended)
      goto LABEL_26;
    appended = patchMediaDataAtomSizeIfNeeded(a1);
    if ((_DWORD)appended)
      goto LABEL_26;
    if (*(_QWORD *)(a1 + 136))
    {
      v18 = 0;
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v8)
        goto LABEL_20;
      appended = v8(v7, 0, &v18);
      if ((_DWORD)appended)
      {
LABEL_26:
        v12 = appended;
        goto LABEL_21;
      }
      v9 = v18 - *(_QWORD *)(a1 + 112);
      v10 = *(_QWORD *)(a1 + 136);
      if (v10 < v9)
        v11 = FigSignalErrorAt();
      else
        v11 = writeZeroData(a1, *(_QWORD *)(a1 + 40), v18, v10 - v9);
      v12 = v11;
      if ((_DWORD)v11)
        goto LABEL_21;
    }
    v17 = 0;
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v14)
    {
      appended = v14(v13, 0, &v17);
      if ((_DWORD)appended)
        goto LABEL_26;
      DataLength = CMBlockBufferGetDataLength(a2);
      appended = CMByteStreamAppendBlockBuffer();
      if ((_DWORD)appended)
        goto LABEL_26;
      if (!DataLength)
      {
        appended = (uint64_t)startNewChunkForAllTracks(a1);
        if (!(_DWORD)appended)
        {
          *(_DWORD *)(a1 + 108) = 0;
          v12 = 0;
          if (a3)
            *a3 = v17;
          goto LABEL_21;
        }
        goto LABEL_26;
      }
      goto LABEL_25;
    }
LABEL_20:
    v12 = 4294954514;
LABEL_21:
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterFlush(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](a1[6]);
  v2 = a1[5];
  if (v2)
    v3 = MediaDataChunkWriterFlush(a1[4], v2);
  else
    v3 = FigSignalErrorAt();
  v4 = v3;
  MEMORY[0x19402EF04](a1[6]);
  return v4;
}

uint64_t MovieSampleDataWriterTrackAppendSampleData(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, const __CFArray *a10, uint64_t a11)
{
  uint64_t appended;
  uint64_t v20;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](a1[6]);
  if (a1[5])
  {
    appended = appendFileTypeAtomAndMediaDataAtomHeaderAndPaddingIfNeeded((uint64_t)a1, (CMBlockBufferRef)a2);
    if (!(_DWORD)appended)
    {
      appended = MediaDataChunkWriterTrackAppendSampleData(a1[4], a2[1], a1[5], a3, a4, a5, a6, a7, a8, a9, a10, a11);
      if (!(_DWORD)appended)
        appended = checkIfMediaDataAtomSizeExceededPredeterminedSizeIfNeeded(a1);
    }
  }
  else
  {
    appended = FigSignalErrorAt();
  }
  v20 = appended;
  MEMORY[0x19402EF04](a1[6]);
  return v20;
}

uint64_t MovieSampleDataWriterTrackAppendSampleReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, const __CFArray *a10, uint64_t a11)
{
  if (a1 && a2)
    return MediaDataChunkWriterTrackAppendSampleReference(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 8), a3, a4, a5, a6, a7, a8, a9, a10, a11);
  else
    return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterTrackSetPreferredChunkSize(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && a2)
    return MediaDataChunkWriterTrackSetPreferredChunkSize(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 8), a3);
  else
    return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterTrackGetPreferredChunkSize(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1 && a2 && a3)
    return MediaDataChunkWriterTrackGetPreferredChunkSize(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 8), a3);
  else
    return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterTrackSetPreferredChunkDuration(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v3;
  uint64_t v4;
  CMTime v6;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *a3;
  return MediaDataChunkWriterTrackSetPreferredChunkDuration(v3, v4, &v6);
}

uint64_t MovieSampleDataWriterTrackGetPreferredChunkDuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
    return MediaDataChunkWriterTrackGetPreferredChunkDuration(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 8), a3);
  else
    return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterTrackSetPreferredChunkAlignment(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && a2)
    return MediaDataChunkWriterTrackSetPreferredChunkAlignment(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 8), a3);
  else
    return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterTrackGetPreferredChunkAlignment(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1 && a2 && a3)
    return MediaDataChunkWriterTrackGetPreferredChunkAlignment(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 8), a3);
  else
    return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterCopyFileTypeAtomAsBlockBuffer(const __CFNumber **a1, const __CFAllocator *a2, CMBlockBufferRef *a3)
{
  if (a1 && a3)
    return MovieHeaderMakerCopyFileTypeAtomAsBlockBuffer(a2, a1[10], a1[11], a1[12], a3);
  else
    return FigSignalErrorAt();
}

uint64_t MovieSampleDataWriterSetMajorBrand(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!a1)
    return FigSignalErrorAt();
  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = cf;
  CFRetain(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t MovieSampleDataWriterCopyMajorBrand(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 80);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t MovieSampleDataWriterSetMinorVersion(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!a1)
    return FigSignalErrorAt();
  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = cf;
  CFRetain(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t MovieSampleDataWriterCopyMinorVersion(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 88);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t MovieSampleDataWriterSetCompatibleBrands(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!a1)
    return FigSignalErrorAt();
  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = cf;
  CFRetain(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t MovieSampleDataWriterCopyCompatibleBrands(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 96);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t movieSampleDataWriterRegisterType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sMovieSampleDataWriterID = result;
  return result;
}

double movieSampleDataWriter_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void movieSampleDataWriter_Finalize(uint64_t a1)
{
  const __CFAllocator *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  void *ValueAtIndex;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  NSObject *v15;

  v2 = *(const __CFAllocator **)(a1 + 16);
  v3 = *(const __CFArray **)(a1 + 56);
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
        if (ValueAtIndex)
          CFAllocatorDeallocate(v2, ValueAtIndex);
      }
    }
    v8 = *(const void **)(a1 + 56);
    if (v8)
      CFRelease(v8);
  }
  v9 = *(const void **)(a1 + 80);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 88);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 96);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 144);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 24);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 40);
  if (v14)
    CFRelease(v14);
  FigSimpleMutexDestroy();
  MediaDataChunkWriterRelease(*(const __CFAllocator ***)(a1 + 32));
  v15 = *(NSObject **)(a1 + 64);
  if (v15)
    dispatch_release(v15);
  if (v2)
    CFRelease(v2);
}

__CFString *movieSampleDataWriter_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<MovieSampleDataWriter %p>{fileType:%@}"), a1, *(_QWORD *)(a1 + 24));
  return Mutable;
}

void byteStreamSynchronizeFunc(const void **a1)
{
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v5)(const void *, uint64_t);

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v4 >= 2uLL)
  {
    v5 = (void (*)(const void *, uint64_t))v4[5];
    if (v5)
      v5(v2, v3);
  }
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t writeZeroData(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t v4;
  CMBlockBufferRef v5;
  uint64_t v7;
  CMBlockBufferRef v8;

  v8 = 0;
  if (!a4)
    return 0;
  v4 = createPadding(a1, a4, &v8);
  v5 = v8;
  if (!(_DWORD)v4)
  {
    v4 = CMByteStreamWriteBlockBuffer();
    if (!(_DWORD)v4)
      v4 = FigSignalErrorAt();
  }
  v7 = v4;
  if (v5)
    CFRelease(v5);
  return v7;
}

uint64_t createPadding(uint64_t a1, size_t a2, CMBlockBufferRef *a3)
{
  size_t DataLength;
  uint64_t appended;
  size_t v8;
  uint64_t v9;
  CMBlockBufferRef blockBufferOut;

  DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 144));
  blockBufferOut = 0;
  appended = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &blockBufferOut);
  if ((_DWORD)appended)
  {
LABEL_7:
    v9 = appended;
    if (blockBufferOut)
      CFRelease(blockBufferOut);
  }
  else
  {
    while (a2)
    {
      if (a2 >= DataLength)
        v8 = DataLength;
      else
        v8 = a2;
      appended = CMBlockBufferAppendBufferReference(blockBufferOut, *(CMBlockBufferRef *)(a1 + 144), 0, v8, 0);
      a2 -= v8;
      if ((_DWORD)appended)
        goto LABEL_7;
    }
    v9 = 0;
    *a3 = blockBufferOut;
  }
  return v9;
}

uint64_t createFileTypeAtomIfNeeded(uint64_t a1, CMBlockBufferRef *a2)
{
  uint64_t result;
  CMBlockBufferRef v5;
  CMBlockBufferRef v6;

  v6 = 0;
  if (*(_BYTE *)(a1 + 72) != 1 || *(_BYTE *)(a1 + 73))
  {
    v5 = 0;
  }
  else
  {
    result = MovieHeaderMakerCopyFileTypeAtomAsBlockBuffer(*(const __CFAllocator **)(a1 + 16), *(const __CFNumber **)(a1 + 80), *(const __CFNumber **)(a1 + 88), *(CFArrayRef *)(a1 + 96), &v6);
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 73) = 1;
    v5 = v6;
  }
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t byteStreamAppendBlockBuffer(int a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;

  result = CMBlockBufferGetDataLength(theBuffer);
  if (result)
  {
    result = CMByteStreamAppendBlockBuffer();
    if (!(_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCLCPCaptionFormatConformerCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  CFTypeRef v7;
  uint64_t v8;

  if (!a3)
    return FigSignalErrorAt();
  FigCaptionFormatConformerGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v8 = v5;
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a2)
      v7 = CFRetain(a2);
    else
      v7 = 0;
    v8 = 0;
    *DerivedStorage = v7;
    *a3 = 0;
  }
  return v8;
}

void clcpcfc_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *clcpcfc_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCLCPCaptionFormatConformer %p>"), a1);
  return Mutable;
}

uint64_t clcpcfc_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a4)
    return 4294954512;
  else
    return FigSignalErrorAt();
}

uint64_t clcpcfc_SetProperty(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 4294954512;
  else
    return FigSignalErrorAt();
}

uint64_t clcpcfc_CreateConformedCaptionData(uint64_t a1, void *a2, __int128 *a3, CFTypeRef *a4, _OWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t (*v12)(void *);
  const __CFString *v13;
  const void *v14;
  CFTypeRef *v15;
  uint64_t v16;
  CFArrayRef v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t (*v20)(CFTypeRef, _QWORD, _OWORD *);
  CFTypeRef v21;
  uint64_t (*v22)(CFTypeRef);
  CFTypeRef v23;
  uint64_t (*v24)(CFTypeRef);
  CFTypeRef v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  const void *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  CFTypeRef v37;
  __int128 v38;
  __int128 v39;
  void *values;
  _OWORD v41[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2
    || (*((_BYTE *)a3 + 12) & 1) == 0
    || (*((_BYTE *)a3 + 36) & 1) == 0
    || *((_QWORD *)a3 + 5)
    || (*((_QWORD *)a3 + 3) & 0x8000000000000000) != 0
    || !a4
    || !a5)
  {
    return FigSignalErrorAt();
  }
  v11 = DerivedStorage;
  v12 = *(uint64_t (**)(void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v12)
  {
    v13 = (const __CFString *)v12(a2);
    if (!v13)
      goto LABEL_37;
  }
  else
  {
    v13 = &stru_1E2FD85F8;
  }
  if (CFStringGetLength(v13))
  {
    v34 = *a3;
    v35 = a3[1];
    v36 = a3[2];
    values = a2;
    v14 = *(const void **)v11;
    *(_QWORD *)&v39 = clcpcfcFromSbufOutputCallback;
    *((_QWORD *)&v39 + 1) = v11;
    *(_QWORD *)&v38 = clcpcfcToSbufOutputCallback;
    *((_QWORD *)&v38 + 1) = v11;
    v37 = 0;
    v15 = (CFTypeRef *)(v11 + 8);
    v16 = FigCLCPCaptionGroupConverterFromSampleBufferCreate(&v39, v14, (_QWORD *)(v11 + 8));
    if ((_DWORD)v16 || (v16 = FigCLCPCaptionGroupConverterToSampleBufferCreate(&v38, v14, &v37), (_DWORD)v16))
    {
      v26 = v16;
      v17 = 0;
      goto LABEL_28;
    }
    v17 = CFArrayCreate((CFAllocatorRef)v14, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (!v17)
    {
      v18 = FigSignalErrorAt();
      goto LABEL_41;
    }
    v18 = FigCaptionGroupCreate();
    if (!(_DWORD)v18)
    {
      v19 = v37;
      v20 = *(uint64_t (**)(CFTypeRef, _QWORD, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v20)
        goto LABEL_27;
      v41[0] = v34;
      v41[1] = v35;
      v41[2] = v36;
      v18 = v20(v19, 0, v41);
      if ((_DWORD)v18)
        goto LABEL_41;
      v21 = v37;
      v22 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v22)
      {
LABEL_27:
        v26 = 4294954514;
LABEL_28:
        if (v17)
          CFRelease(v17);
        if (v37)
          CFRelease(v37);
        v29 = *(const void **)(v11 + 16);
        if (v29)
        {
          CFRelease(v29);
          *(_QWORD *)(v11 + 16) = 0;
        }
        if (*v15)
        {
          CFRelease(*v15);
          *v15 = 0;
        }
        v30 = MEMORY[0x1E0CA2E40];
        v31 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
        *(_OWORD *)(v11 + 24) = *MEMORY[0x1E0CA2E40];
        *(_OWORD *)(v11 + 40) = v31;
        *(_OWORD *)(v11 + 56) = *(_OWORD *)(v30 + 32);
        return v26;
      }
      v18 = v22(v21);
      if (!(_DWORD)v18)
      {
        v23 = *v15;
        v24 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v24)
        {
          v18 = v24(v23);
          if (!(_DWORD)v18)
          {
            v25 = *(CFTypeRef *)(v11 + 16);
            if (v25)
              v25 = CFRetain(v25);
            v26 = 0;
            *a4 = v25;
            v27 = *(_OWORD *)(v11 + 24);
            v28 = *(_OWORD *)(v11 + 56);
            a5[1] = *(_OWORD *)(v11 + 40);
            a5[2] = v28;
            *a5 = v27;
            goto LABEL_28;
          }
          goto LABEL_41;
        }
        goto LABEL_27;
      }
    }
LABEL_41:
    v26 = v18;
    goto LABEL_28;
  }
LABEL_37:
  v26 = 0;
  *a4 = CFRetain(a2);
  v33 = a3[1];
  v32 = a3[2];
  *a5 = *a3;
  a5[1] = v33;
  a5[2] = v32;
  return v26;
}

uint64_t clcpcfcFromSbufOutputCallback(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t SliceCount;
  const void *CaptionData;
  __int128 v7;
  __int128 v8;

  SliceCount = FigCaptionGroupGetSliceCount();
  if (SliceCount == 1)
  {
    if (!*(_QWORD *)(a3 + 16))
    {
      CaptionData = (const void *)FigCaptionGroupGetCaptionData();
      if (CaptionData)
        CaptionData = CFRetain(CaptionData);
      *(_QWORD *)(a3 + 16) = CaptionData;
      v7 = *a2;
      v8 = a2[1];
      *(_OWORD *)(a3 + 56) = a2[2];
      *(_OWORD *)(a3 + 40) = v8;
      *(_OWORD *)(a3 + 24) = v7;
      return 0;
    }
  }
  else if (!SliceCount)
  {
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t clcpcfcToSbufOutputCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(v3, a1);
  else
    return 4294954514;
}

uint64_t FigManifoldCreateForICY(const __CFAllocator *a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v12;
  uint64_t DerivedStorage;
  CFAllocatorRef Default;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  CFMutableArrayRef Mutable;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  CMMemoryPoolRef v22;
  uint64_t ContiguousBlockBuffer;
  unint64_t v24;
  int v25;
  _OWORD *v26;
  _QWORD *v27;
  AudioFileTypeID v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  AudioFileTypeID v33;
  size_t v35;
  BOOL v36;
  uint64_t v37;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  const __CFDictionary *cf;
  uint64_t v43;
  AudioFileTypeID v44;
  void *values;
  CMBlockBufferRef theBuffera;
  void *inClientData;

  values = CFSTR("IcyManifoldMemoryPool");
  theBuffera = 0;
  if (!theBuffer || !CMBlockBufferGetDataLength(theBuffer))
    return FigSignalErrorAt();
  inClientData = 0;
  FigManifoldGetClassID();
  v12 = CMDerivedObjectCreate();
  if ((_DWORD)v12)
  {
LABEL_49:
    v37 = v12;
    v21 = 0;
    goto LABEL_39;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Default = a1;
  if (!a1)
    Default = CFAllocatorGetDefault();
  *(_QWORD *)DerivedStorage = CFRetain(Default);
  v15 = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 8) = v15;
  if (!v15)
  {
    v21 = 0;
    v37 = 12;
    goto LABEL_38;
  }
  *(_QWORD *)(DerivedStorage + 464) = 0;
  *(_QWORD *)(DerivedStorage + 472) = DerivedStorage + 464;
  v16 = MEMORY[0x1E0CA2E18];
  v17 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 280) = *MEMORY[0x1E0CA2E18];
  v18 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(DerivedStorage + 296) = v18;
  *(_OWORD *)(DerivedStorage + 480) = v17;
  *(_QWORD *)(DerivedStorage + 496) = v18;
  *(_OWORD *)(DerivedStorage + 576) = v17;
  *(_QWORD *)(DerivedStorage + 592) = v18;
  *(_OWORD *)(DerivedStorage + 600) = v17;
  *(_QWORD *)(DerivedStorage + 616) = v18;
  *(_QWORD *)(DerivedStorage + 528) = 0;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 560) = Mutable;
  if (!Mutable)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_49;
  }
  v20 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA4BA0], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v21 = v20;
  if (!v20 || (v22 = CMMemoryPoolCreate(v20), (*(_QWORD *)(DerivedStorage + 16) = v22) == 0))
  {
    v37 = FigSignalErrorAt();
    goto LABEL_39;
  }
  if (CMBlockBufferIsRangeContiguous(theBuffer, 0, 0))
  {
    theBuffera = (CMBlockBufferRef)CFRetain(theBuffer);
  }
  else
  {
    ContiguousBlockBuffer = FigMemoryPoolCreateContiguousBlockBuffer();
    if ((_DWORD)ContiguousBlockBuffer)
      return ContiguousBlockBuffer;
  }
  v40 = a4;
  v41 = a5;
  cf = v21;
  v39 = a6;
  v24 = 0;
  v43 = 0;
  v44 = 0;
  v25 = 0;
  v26 = (_OWORD *)(DerivedStorage + 232);
  v27 = (_QWORD *)(DerivedStorage + 128);
  do
  {
    while (1)
    {
      *(_BYTE *)(DerivedStorage + 35) = 0;
      fim_DestroyAudioTrack(DerivedStorage + 72);
      *(_QWORD *)(DerivedStorage + 264) = 0;
      *v26 = 0u;
      *(_OWORD *)(DerivedStorage + 248) = 0u;
      *v27 = 0;
      *(_QWORD *)(DerivedStorage + 136) = 0;
      fim_DestroyMetaTrack((_QWORD *)(DerivedStorage + 392));
      *(_QWORD *)(DerivedStorage + 552) = 0;
      v28 = possibleAudioTypes[v24];
      *(_DWORD *)(DerivedStorage + 144) = v28;
      v29 = AudioFileStreamOpen(inClientData, (AudioFileStream_PropertyListenerProc)AudioFileStreamStartupPropertyListener, (AudioFileStream_PacketsProc)AudioFileStreamStartupPackets, v28, (AudioFileStreamID *)(DerivedStorage + 152));
      if ((_DWORD)v29)
      {
        v37 = v29;
        goto LABEL_37;
      }
      fim_ConfigureAudioFileStreamForID3(DerivedStorage);
      *(_BYTE *)(DerivedStorage + 33) = 1;
      FigIcyManifoldInjectData(inClientData, v30, v31, theBuffera);
      *(_BYTE *)(DerivedStorage + 33) = 0;
      if (!*(_BYTE *)(DerivedStorage + 35) || (v32 = *(_QWORD *)(DerivedStorage + 136), v32 < 2))
      {
LABEL_23:
        if (v25)
          goto LABEL_26;
        goto LABEL_24;
      }
      v33 = *(_DWORD *)(DerivedStorage + 144);
      if (v32 <= v43)
        break;
      if (v33 == v28)
      {
        v25 = 1;
        v43 = *(_QWORD *)(DerivedStorage + 136);
        v44 = *(_DWORD *)(DerivedStorage + 144);
        v36 = v24++ >= 2;
        if (!v36)
          continue;
      }
      goto LABEL_34;
    }
    if (v32 != v43 || v33 == v44)
      goto LABEL_23;
LABEL_24:
    v35 = *(_QWORD *)(DerivedStorage + 552);
    if (v35 > CMBlockBufferGetDataLength(theBuffera))
    {
      v37 = 4294951248;
      goto LABEL_37;
    }
    v25 = 0;
LABEL_26:
    v36 = v24++ >= 2;
  }
  while (!v36);
  v33 = v44;
  if (!v25)
  {
    v37 = 4294951252;
    goto LABEL_37;
  }
LABEL_34:
  *(_QWORD *)(DerivedStorage + 48) = a3;
  *(_QWORD *)(DerivedStorage + 56) = v40;
  *(_QWORD *)(DerivedStorage + 64) = v41;
  *(_BYTE *)(DerivedStorage + 35) = 0;
  fim_DestroyAudioTrack(DerivedStorage + 72);
  *(_QWORD *)(DerivedStorage + 264) = 0;
  *v26 = 0u;
  *(_OWORD *)(DerivedStorage + 248) = 0u;
  *v27 = 0;
  *(_QWORD *)(DerivedStorage + 136) = 0;
  fim_DestroyMetaTrack((_QWORD *)(DerivedStorage + 392));
  *(_QWORD *)(DerivedStorage + 552) = 0;
  v37 = AudioFileStreamOpen(inClientData, (AudioFileStream_PropertyListenerProc)AudioFileStreamPropertyListener, (AudioFileStream_PacketsProc)AudioFileStreamPackets, v33, (AudioFileStreamID *)(DerivedStorage + 152));
  if (!(_DWORD)v37)
  {
    fim_ConfigureAudioFileStreamForID3(DerivedStorage);
    *v39 = inClientData;
    v21 = cf;
    goto LABEL_39;
  }
LABEL_37:
  v21 = cf;
LABEL_38:
  CFRelease(inClientData);
LABEL_39:
  if (theBuffera)
    CFRelease(theBuffera);
  if (v21)
    CFRelease(v21);
  return v37;
}

uint64_t AudioFileStreamStartupPropertyListener(uint64_t a1, OpaqueAudioFileStreamID *a2, int a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t v7;
  double *v8;
  unsigned int outPropertyData;
  UInt32 ioPropertyDataSize;

  result = CMBaseObjectGetDerivedStorage();
  v7 = result;
  outPropertyData = 0;
  switch(a3)
  {
    case 1684434292:
      ioPropertyDataSize = 40;
      v8 = (double *)(result + 232);
      result = AudioFileStreamGetProperty(*(AudioFileStreamID *)(result + 152), 0x64666D74u, &ioPropertyDataSize, (void *)(result + 232));
      if (!(_DWORD)result && *v8 != 0.0 && *(_DWORD *)(v7 + 240))
        *(_BYTE *)(v7 + 35) = 1;
      break;
    case 1768174437:
      ioPropertyDataSize = 4;
      result = AudioFileStreamGetProperty(*(AudioFileStreamID *)(result + 152), 0x69643365u, &ioPropertyDataSize, &outPropertyData);
      if (!(_DWORD)result)
        return ProcessID3HeaderTagFromAudioFileStream(a1, outPropertyData);
      break;
    case 1717988724:
      ioPropertyDataSize = 4;
      return AudioFileStreamGetProperty(*(AudioFileStreamID *)(result + 152), 0x66666D74u, &ioPropertyDataSize, (void *)(result + 144));
  }
  return result;
}

uint64_t AudioFileStreamStartupPackets(void *a1, unsigned int a2, unsigned int a3, const void *a4, AudioStreamPacketDescription *a5)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(result + 136) += a3;
  return result;
}

uint64_t fim_ConfigureAudioFileStreamForID3(uint64_t a1)
{
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  LODWORD(v3[0]) = 1768174437;
  AudioFileStreamSetProperty(*(AudioFileStreamID *)(a1 + 152), 0x6F707470u, 4u, v3);
  v3[0] = 0x5052495669643365;
  return AudioFileStreamSetProperty(*(AudioFileStreamID *)(a1 + 152), 0x6F707470u, 8u, v3);
}

uint64_t FigIcyManifoldInjectData(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef v10;
  const void *v11;
  OpaqueCMBlockBuffer *v12;
  int ContiguousBlockBuffer;
  uint64_t v14;
  size_t DataLength;
  size_t v16;
  size_t v17;
  _QWORD *v18;
  OpaqueCMBlockBuffer *v19;
  size_t v20;
  uint64_t appended;
  size_t v22;
  const void *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  unsigned int v27;
  __int16 v28;
  _QWORD *v29;
  _QWORD **v30;
  uint64_t v31;
  _QWORD *v32;
  const void *v33;
  uint64_t v34;
  void *v36;
  OpaqueCMBlockBuffer *cf;
  char *dataPointerOut;
  size_t lengthAtOffsetOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  CFRetain(a1);
  CFRetain(a4);
  MEMORY[0x19402EA0C](*(_QWORD *)(v7 + 8));
  ++*(_QWORD *)(v7 + 24);
  if (*(_BYTE *)(v7 + 32) || *(_BYTE *)(v7 + 36))
  {
    LODWORD(v9) = FigSignalErrorAt();
    goto LABEL_64;
  }
  *(_WORD *)(v7 + 36) = 1;
  *(_DWORD *)(v7 + 44) = 0;
  *(_BYTE *)(v7 + 39) = 1;
  v8 = CMGetAttachment(a4, CFSTR("FBPAKey_TimedData"), 0);
  if (v8)
  {
    if (CFEqual(v8, CFSTR("FBPA_TimedData_ICY")))
    {
      v9 = fim_PushMetaData((uint64_t)a1, a4, 0x69637920u);
      if (!(_DWORD)v9)
        goto LABEL_63;
LABEL_62:
      fim_EndAllTracks(a1, v9);
      goto LABEL_63;
    }
  }
  else
  {
    cf = 0;
    v10 = CMGetAttachment(a4, CFSTR("FMFD_BufferAudioDecryptor"), 0);
    if (!v10)
      v10 = CMGetAttachment(a4, CFSTR("FMFD_BufferDecryptor"), 0);
    if (!FigCFEqual())
    {
      v11 = *(const void **)(v7 + 568);
      if (!v11)
        *(_BYTE *)(v7 + 272) = 1;
      *(_QWORD *)(v7 + 568) = v10;
      if (v10)
        CFRetain(v10);
      if (v11)
        CFRelease(v11);
      *(_BYTE *)(v7 + 275) = 1;
    }
    if (CMBlockBufferGetDataLength((CMBlockBufferRef)a4))
    {
      v36 = a4;
      if (CMBlockBufferIsRangeContiguous((CMBlockBufferRef)a4, 0, 0))
      {
        v12 = (OpaqueCMBlockBuffer *)CFRetain(a4);
        cf = v12;
      }
      else
      {
        ContiguousBlockBuffer = FigMemoryPoolCreateContiguousBlockBuffer();
        if (ContiguousBlockBuffer)
        {
          LODWORD(v9) = ContiguousBlockBuffer;
          goto LABEL_63;
        }
        v12 = 0;
      }
      dataPointerOut = 0;
      lengthAtOffsetOut = 0;
      v14 = CMBaseObjectGetDerivedStorage();
      DataLength = CMBlockBufferGetDataLength(v12);
      if (DataLength)
      {
        v16 = DataLength;
        v17 = 0;
        v18 = (_QWORD *)(v14 + 504);
        while (1)
        {
          v19 = *(OpaqueCMBlockBuffer **)(v14 + 520);
          if (v19)
          {
            if (v16 >= *(_QWORD *)(v14 + 536))
              v20 = *(_QWORD *)(v14 + 536);
            else
              v20 = v16;
            appended = CMBlockBufferAppendBufferReference(v19, v12, v17, v20, 0);
            if ((_DWORD)appended)
            {
LABEL_68:
              v9 = appended;
              goto LABEL_71;
            }
            v22 = *(_QWORD *)(v14 + 536) - v20;
            *(_QWORD *)(v14 + 536) = v22;
            if (!v22)
            {
              fim_PushMetaData((uint64_t)a1, *(void **)(v14 + 520), 0x69643320u);
              v23 = *(const void **)(v14 + 520);
              if (v23)
                CFRelease(v23);
              *(_QWORD *)(v14 + 520) = 0;
              *(_QWORD *)(v14 + 544) = 0;
            }
          }
          appended = CMBlockBufferGetDataPointer(v12, v17, &lengthAtOffsetOut, 0, &dataPointerOut);
          if ((_DWORD)appended)
            goto LABEL_68;
          v24 = dataPointerOut;
          if (v16 >= lengthAtOffsetOut)
            v25 = lengthAtOffsetOut;
          else
            v25 = v16;
          *(_QWORD *)(v14 + 320) = dataPointerOut;
          *(_QWORD *)(v14 + 328) = v25;
          *(_QWORD *)(v14 + 336) = v12;
          *(_QWORD *)(v14 + 344) = v17;
          v26 = *(_QWORD *)(v14 + 528);
          if (v26)
          {
            if (v26 + v25 < 0xA)
            {
              *(_QWORD *)(v14 + 528) = v26 + v25;
            }
            else
            {
              v27 = -*(_DWORD *)(v14 + 528);
              *(_QWORD *)(v14 + 528) = 0;
              ProcessID3HeaderTagFromAudioFileStream((uint64_t)a1, v27);
              v24 = dataPointerOut;
            }
          }
          v9 = AudioFileStreamParseBytes(*(AudioFileStreamID *)(v14 + 152), v25, v24, *(_BYTE *)(v14 + 34) != 0);
          if (v25 > 9)
          {
            v28 = *(_WORD *)&dataPointerOut[v25 - 2];
            *v18 = *(_QWORD *)&dataPointerOut[v25 - 10];
            *(_WORD *)(v14 + 512) = v28;
          }
          else
          {
            memmove((void *)(v14 + 504), (char *)v18 + v25, 10 - v25);
            memmove((char *)v18 + 10 - v25, dataPointerOut, v25);
          }
          *(_BYTE *)(v14 + 34) = 0;
          if (!*(_BYTE *)(v14 + 33) && (_DWORD)v9)
            goto LABEL_71;
          if (*(_DWORD *)(v14 + 44))
            break;
          v17 += v25;
          v16 -= v25;
          if (!v16)
            goto LABEL_52;
        }
        v9 = *(unsigned int *)(v14 + 44);
LABEL_71:
        a4 = v36;
      }
      else
      {
        v9 = 0;
LABEL_52:
        v29 = *(_QWORD **)(v14 + 464);
        a4 = v36;
        if (v29)
        {
          v30 = (_QWORD **)(v14 + 464);
          while (1)
          {
            v31 = fim_PushMetaData((uint64_t)a1, (void *)v29[1], *((_DWORD *)v29 + 4));
            if ((_DWORD)v31)
              break;
            v32 = (_QWORD *)**v30;
            *v30 = v32;
            if (!v32)
              *(_QWORD *)(v14 + 472) = v30;
            v33 = (const void *)v29[1];
            if (v33)
              CFRelease(v33);
            free(v29);
            v29 = *v30;
            if (!*v30)
            {
              v9 = 0;
              goto LABEL_61;
            }
          }
          v9 = v31;
        }
      }
LABEL_61:
      CFRelease(cf);
      if (!(_DWORD)v9)
        goto LABEL_63;
      goto LABEL_62;
    }
  }
  LODWORD(v9) = 0;
LABEL_63:
  *(_BYTE *)(v7 + 36) = 0;
LABEL_64:
  if ((_DWORD)v9 == -16045)
    v34 = 0;
  else
    v34 = v9;
  --*(_QWORD *)(v7 + 24);
  MEMORY[0x19402EA24](*(_QWORD *)(v7 + 8));
  CFRelease(a4);
  CFRelease(a1);
  return v34;
}

void AudioFileStreamPropertyListener(void *a1, OpaqueAudioFileStreamID *a2, int a3, unsigned int *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t Property;
  unsigned int outPropertyData;
  UInt32 ioPropertyDataSize;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  outPropertyData = 0;
  if (a3 == 1768174437)
  {
    ioPropertyDataSize = 4;
    Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(DerivedStorage + 152), 0x69643365u, &ioPropertyDataSize, &outPropertyData);
    if ((_DWORD)Property
      || (Property = ProcessID3HeaderTagFromAudioFileStream((uint64_t)a1, outPropertyData), (_DWORD)Property))
    {
LABEL_8:
      fim_EndAllTracks(a1, Property);
    }
  }
  else if (a3 == 1684434292)
  {
    ioPropertyDataSize = 40;
    Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(DerivedStorage + 152), 0x64666D74u, &ioPropertyDataSize, (void *)(DerivedStorage + 232));
    if (!(_DWORD)Property)
    {
      *(_BYTE *)(v7 + 272) = 1;
      return;
    }
    goto LABEL_8;
  }
}

void AudioFileStreamPackets(void *a1, unsigned int a2, unsigned int a3, char *a4, AudioStreamPacketDescription *a5)
{
  uint64_t DerivedStorage;
  int v11;
  uint64_t v12;
  unsigned int v13;
  OSStatus Property;
  void *v15;
  const void *v16;
  int64_t v17;
  _OWORD *v18;
  CMTimeEpoch epoch;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  int v25;
  CFIndex v26;
  uint64_t v27;
  unsigned __int16 v28;
  int v29;
  __CFString *inited;
  void *v31;
  const __CFDictionary *v32;
  const AudioChannelLayout *v33;
  uint64_t v34;
  uint64_t FormatDescriptionCallback;
  uint64_t v36;
  uint64_t (*v37)(void *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  CMBlockBufferRef v50;
  CMBlockBufferRef v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  UInt32 *p_mVariableFramesInPacket;
  UInt32 v56;
  unsigned int v57;
  _QWORD **v58;
  CMItemCount v59;
  AudioStreamPacketDescription *v60;
  uint64_t v61;
  AudioStreamPacketDescription *v62;
  size_t mStartOffset;
  size_t v64;
  size_t v65;
  int v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  OpaqueCMBlockBuffer *v70;
  const AudioStreamPacketDescription *v71;
  CMItemCount v72;
  CMItemCount v73;
  const __CFAllocator *v74;
  const opaqueCMFormatDescription *v75;
  CFArrayRef SampleAttachmentsArray;
  const __CFArray *v77;
  CFIndex v78;
  void *ValueAtIndex;
  void *v80;
  uint64_t v81;
  int v82;
  void *v83;
  const void **v84;
  const void *v85;
  const void **v86;
  __CFArray *v87;
  const __CFArray *v88;
  uint64_t PushSampleBufferCallback;
  void *v90;
  const void *v91;
  void *v92;
  const void *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  const void *v97;
  uint64_t mVariableFramesInPacket;
  int v99;
  uint64_t v100;
  UInt32 *v101;
  UInt32 v102;
  uint64_t v103;
  uint64_t v104;
  UInt32 *v105;
  uint64_t v106;
  const void *v107;
  const __CFString *v108;
  const __CFDictionary *v109;
  __CFString *cf;
  CFTypeRef v111;
  AudioStreamPacketDescription *v112;
  CFTypeRef v113;
  unsigned int v114;
  OpaqueCMBlockBuffer *theBuffer;
  unsigned int v116;
  uint64_t v117;
  CMItemCount v118;
  const void **v119;
  const void **v120;
  unsigned int dataLength;
  const void **dataLengtha;
  char *v123;
  CMTime rhs;
  CMTime lhs;
  CFTypeRef v126;
  Boolean outWritable;
  CMBlockBufferRef blockBufferOut;
  UInt32 v129;
  UInt32 ioPropertyDataSize[2];
  uint64_t v131;
  CMTime presentationTimeStamp;
  CMSampleBufferRef v133;
  CMTime outPropertyData;
  UInt32 outPropertyDataSize[2];
  void *values;
  void *keys[3];
  CFRange v138;

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  outWritable = 0;
  v11 = *(unsigned __int8 *)(DerivedStorage + 275);
  v126 = 0;
  values = 0;
  keys[0] = 0;
  if (*(_BYTE *)(DerivedStorage + 32)
    || (v12 = DerivedStorage, *(_BYTE *)(DerivedStorage + 37))
    || *(_DWORD *)(DerivedStorage + 44))
  {
    v109 = 0;
    cf = 0;
    goto LABEL_198;
  }
  *(_QWORD *)(DerivedStorage + 128) += a3;
  dataLength = a2;
  if (*(_BYTE *)(DerivedStorage + 272)
    || (v20 = *(unsigned int *)(DerivedStorage + 72), !(_DWORD)v20)
    || (v21 = *(_QWORD *)(DerivedStorage + 120)) == 0)
  {
    v123 = a4;
    v13 = a3;
    ioPropertyDataSize[0] = 32;
    outPropertyDataSize[0] = 0;
    Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(DerivedStorage + 152), 0x636D6170u, ioPropertyDataSize, (void *)(DerivedStorage + 160));
    v15 = 0;
    if (!AudioFileStreamGetPropertyInfo(*(AudioFileStreamID *)(v12 + 152), 0x6D676963u, outPropertyDataSize, &outWritable))
    {
      if (outPropertyDataSize[0])
      {
        v15 = malloc_type_malloc(outPropertyDataSize[0], 0x4885D39BuLL);
        if (v15)
        {
          if (AudioFileStreamGetProperty(*(AudioFileStreamID *)(v12 + 152), 0x6D676963u, outPropertyDataSize, v15))
          {
            outPropertyDataSize[0] = 0;
            free(v15);
            v15 = 0;
          }
        }
      }
    }
    v16 = *(const void **)(v12 + 120);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(v12 + 120) = 0;
    }
    v17 = *(_QWORD *)(v12 + 136);
    if (v17 >= 1)
    {
      memset(&outPropertyData, 0, sizeof(outPropertyData));
      CMTimeMake(&outPropertyData, v17, (int)*(double *)(v12 + 192));
      v18 = (_OWORD *)(v12 + 280);
      if ((*(_BYTE *)(v12 + 292) & 1) != 0)
      {
        *(_OWORD *)&lhs.value = *v18;
        lhs.epoch = *(_QWORD *)(v12 + 296);
        rhs = outPropertyData;
        CMTimeAdd(&presentationTimeStamp, &lhs, &rhs);
        *v18 = *(_OWORD *)&presentationTimeStamp.value;
        epoch = presentationTimeStamp.epoch;
      }
      else
      {
        *v18 = *(_OWORD *)&outPropertyData.value;
        epoch = outPropertyData.epoch;
      }
      *(_QWORD *)(v12 + 296) = epoch;
    }
    *(_QWORD *)(v12 + 136) = 0;
    v22 = *(_OWORD *)(v12 + 248);
    *(_OWORD *)(v12 + 192) = *(_OWORD *)(v12 + 232);
    *(_OWORD *)(v12 + 208) = v22;
    *(_QWORD *)(v12 + 224) = *(_QWORD *)(v12 + 264);
    *(_BYTE *)(v12 + 276) = 0;
    if (!*(_QWORD *)(v12 + 568) || (FigBasicAESCPECryptorGetClassID(), !CMBaseObjectIsMemberOfClass()))
    {
LABEL_36:
      v26 = 0;
      v27 = *(unsigned int *)(v12 + 200);
      if ((int)v27 <= 2053202738)
      {
        if ((int)v27 > 1902212706)
        {
          if ((_DWORD)v27 != 1902212707)
          {
            v28 = 24931;
            goto LABEL_46;
          }
        }
        else if ((_DWORD)v27 != 1667331683)
        {
          v29 = 1700886115;
          goto LABEL_47;
        }
      }
      else if (((v27 - 2053202739) > 0x3D
              || ((1 << (v27 - 51)) & 0x2020000000000001) == 0)
             && (_DWORD)v27 != 2053464883)
      {
        v28 = 30307;
LABEL_46:
        v29 = v28 | 0x7A610000;
LABEL_47:
        inited = 0;
        if ((_DWORD)v27 != v29)
          goto LABEL_50;
      }
      inited = (__CFString *)PKDCreateTransportStreamEncryptionInitData(1936684398, v27);
      if (!inited)
      {
        cf = 0;
        goto LABEL_211;
      }
      v31 = (void *)*MEMORY[0x1E0CA4A78];
      values = inited;
      keys[0] = v31;
      v26 = 1;
LABEL_50:
      cf = inited;
      v32 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, v26, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
      if (v32)
      {
        if (Property)
          v33 = 0;
        else
          v33 = (const AudioChannelLayout *)(v12 + 160);
        v109 = v32;
        v34 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)v12, (const AudioStreamBasicDescription *)(v12 + 192), 32 * (Property == 0), v33, outPropertyDataSize[0], v15, v32, (CMAudioFormatDescriptionRef *)(v12 + 120));
        free(v15);
        if ((_DWORD)v34)
          goto LABEL_197;
        a3 = v13;
        if (!*(_DWORD *)(v12 + 72))
        {
          v36 = CMBaseObjectGetDerivedStorage();
          *(_BYTE *)(v36 + 38) = 1;
          *(_DWORD *)(v36 + 72) = 100;
          v37 = *(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 48);
          if (v37)
          {
            v38 = v36;
            v39 = *(_QWORD *)(v36 + 24);
            *(_QWORD *)(v36 + 24) = 0;
            if (v39 < 1)
            {
              v41 = v37(a1, *(_QWORD *)(v36 + 64), 1936684398, 100);
            }
            else
            {
              v40 = v39;
              do
              {
                MEMORY[0x19402EA24](*(_QWORD *)(v38 + 8));
                --v40;
              }
              while (v40);
              v41 = (*(uint64_t (**)(void *, _QWORD, uint64_t, _QWORD))(v38 + 48))(a1, *(_QWORD *)(v38 + 64), 1936684398, *(unsigned int *)(v38 + 72));
            }
            v34 = v41;
            do
            {
              MEMORY[0x19402EA0C](*(_QWORD *)(v38 + 8));
              v103 = *(_QWORD *)(v38 + 24) + 1;
              *(_QWORD *)(v38 + 24) = v103;
            }
            while (v103 < v39);
            if ((_DWORD)v34)
              goto LABEL_197;
            if (*(_BYTE *)(v38 + 32) || *(_BYTE *)(v38 + 37))
            {
              v34 = 4294951251;
              goto LABEL_197;
            }
          }
        }
        LODWORD(outPropertyData.value) = 0;
        LODWORD(presentationTimeStamp.value) = 4;
        AudioFileStreamGetProperty(*(AudioFileStreamID *)(v12 + 152), 0x72726170u, (UInt32 *)&presentationTimeStamp, &outPropertyData);
        *(_BYTE *)(v12 + 352) = LODWORD(outPropertyData.value) != 0;
        v20 = *(unsigned int *)(v12 + 72);
        v21 = *(_QWORD *)(v12 + 120);
        a4 = v123;
        goto LABEL_57;
      }
LABEL_211:
      v109 = 0;
      v34 = 4294954510;
      goto LABEL_197;
    }
    *(_BYTE *)(v12 + 276) = 1;
    v23 = *(_DWORD *)(v12 + 200);
    if (v23 > 2053202791)
    {
      switch(v23)
      {
        case 2053202792:
          v25 = 72;
          break;
        case 2053202800:
          v25 = 80;
          break;
        case 2053464883:
          v24 = 1700998451;
LABEL_35:
          *(_DWORD *)(v12 + 200) = v24;
          goto LABEL_36;
        default:
LABEL_205:
          *(_BYTE *)(v12 + 276) = 0;
          goto LABEL_36;
      }
      v24 = v25 | 0x61616320;
      goto LABEL_35;
    }
    if (v23 == 2053202275)
    {
      v24 = 1633772320;
      goto LABEL_35;
    }
    if (v23 == 2053202739)
    {
      v24 = 1633889587;
      goto LABEL_35;
    }
    goto LABEL_205;
  }
  v109 = 0;
  if (!v11)
  {
    cf = 0;
    goto LABEL_66;
  }
  cf = 0;
LABEL_57:
  FormatDescriptionCallback = fim_MakeFormatDescriptionCallback((uint64_t)a1, v12, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 80), *(_QWORD *)(v12 + 104), v21, *(_QWORD *)(v12 + 568));
  if ((_DWORD)FormatDescriptionCallback)
  {
    v34 = FormatDescriptionCallback;
    *(_DWORD *)(v12 + 44) = FormatDescriptionCallback;
LABEL_197:
    fim_EndAllTracks(a1, v34);
    goto LABEL_198;
  }
  if (*(_DWORD *)(v12 + 44))
    goto LABEL_198;
  *(_BYTE *)(v12 + 275) = 0;
  *(_BYTE *)(v12 + 272) = 0;
LABEL_66:
  v42 = *(_DWORD *)(v12 + 240);
  if (((v42 - 2053202739) > 0x3D || ((1 << (v42 - 51)) & 0x2020000000000001) == 0)
    && v42 != 2053464883
    && v42 != 2053202275)
  {
    goto LABEL_75;
  }
  v43 = *(_QWORD *)(v12 + 568);
  if (!*(_BYTE *)(v12 + 276))
  {
    if (!v43)
      goto LABEL_76;
LABEL_75:
    v126 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
    goto LABEL_76;
  }
  v44 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v44)
  {
    v34 = 4294954514;
    goto LABEL_197;
  }
  v45 = v44(v43, *MEMORY[0x1E0CA3218], *MEMORY[0x1E0C9AE00], &v126);
  if ((_DWORD)v45)
  {
    v34 = v45;
    goto LABEL_197;
  }
LABEL_76:
  v113 = v126;
  v46 = CMBaseObjectGetDerivedStorage();
  v47 = v46;
  blockBufferOut = 0;
  v48 = *(char **)(v46 + 320);
  if (v48 <= a4 && &a4[dataLength] <= &v48[*(_QWORD *)(v46 + 328)])
  {
    v104 = *(_QWORD *)(v46 + 344);
    if (v48 != a4 || v104)
    {
      v34 = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)v46, *(CMBlockBufferRef *)(v46 + 336), a4 - v48 + v104, dataLength, 0, &blockBufferOut);
      v50 = blockBufferOut;
      v51 = blockBufferOut;
      if ((_DWORD)v34)
        goto LABEL_182;
    }
    else
    {
      v50 = 0;
      v51 = *(CMBlockBufferRef *)(v46 + 336);
    }
LABEL_81:
    v52 = *(_DWORD *)(v47 + 212);
    if (v52)
    {
      LODWORD(v53) = (*(double *)(v47 + 192) / (double)(2 * v52));
    }
    else if (a5)
    {
      if (!a3)
      {
LABEL_181:
        v34 = 0;
        goto LABEL_182;
      }
      v53 = 0;
      v54 = 0;
      p_mVariableFramesInPacket = &a5->mVariableFramesInPacket;
      while (1)
      {
        v56 = *p_mVariableFramesInPacket;
        p_mVariableFramesInPacket += 4;
        v54 += v56;
        if (*(double *)(v47 + 192) * 0.5 < (double)v54)
          break;
        if (a3 == ++v53)
          goto LABEL_88;
      }
    }
    else
    {
LABEL_88:
      LODWORD(v53) = a3;
    }
    if (v53 <= 1)
      LODWORD(v53) = 1;
    v114 = v53;
    if (a3)
    {
      theBuffer = v51;
      v57 = 0;
      v111 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
      v108 = (const __CFString *)*MEMORY[0x1E0CA2698];
      v119 = (const void **)(v47 + 360);
      v120 = (const void **)(v47 + 376);
      dataLengtha = (const void **)(v47 + 384);
      v58 = (_QWORD **)(v47 + 464);
      v106 = *(_QWORD *)(v47 + 128) - a3;
      v107 = (const void *)*MEMORY[0x1E0C9AE50];
      v105 = &a5->mVariableFramesInPacket;
      v112 = a5;
      while (1)
      {
        if (v114 >= a3)
          v59 = a3;
        else
          v59 = v114;
        v117 = v57;
        v118 = v59;
        *(_QWORD *)outPropertyDataSize = 0;
        v133 = 0;
        v116 = a3;
        if (!a5)
        {
LABEL_178:
          v68 = FigSignalErrorAt();
LABEL_179:
          v34 = v68;
          goto LABEL_167;
        }
        v60 = &a5[v57];
        v61 = (v59 - 1);
        v62 = &v60[v61];
        mStartOffset = v60->mStartOffset;
        if (v60->mStartOffset)
        {
          v64 = v62->mStartOffset + v60[v61].mDataByteSize;
        }
        else
        {
          v65 = CMBlockBufferGetDataLength(theBuffer);
          v64 = v62->mStartOffset + v60[v61].mDataByteSize;
          if (v65 <= v64)
          {
            v72 = v118;
            v71 = v60;
            v70 = theBuffer;
            goto LABEL_107;
          }
          mStartOffset = v60->mStartOffset;
          LODWORD(v59) = v118;
        }
        if (*(_DWORD *)(v47 + 312) < v59)
        {
          v66 = v59;
          v67 = malloc_type_realloc(*(void **)(v47 + 304), 16 * v59, 0x1000040451B5BE8uLL);
          *(_QWORD *)(v47 + 304) = v67;
          if (!v67)
            goto LABEL_178;
          *(_DWORD *)(v47 + 312) = v66;
        }
        v68 = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)v47, theBuffer, mStartOffset, v64 - mStartOffset, 0, (CMBlockBufferRef *)outPropertyDataSize);
        if ((_DWORD)v68)
          goto LABEL_179;
        v69 = 0;
        v70 = *(OpaqueCMBlockBuffer **)outPropertyDataSize;
        v71 = *(const AudioStreamPacketDescription **)(v47 + 304);
        v72 = v118;
        v73 = v118;
        do
        {
          v71[v69] = v60[v69];
          v71 = *(const AudioStreamPacketDescription **)(v47 + 304);
          v71[v69].mStartOffset = v60[v69].mStartOffset - mStartOffset;
          ++v69;
          --v73;
        }
        while (v73);
LABEL_107:
        fim_GetCurrentAudioTime(v47 + 72, &presentationTimeStamp);
        outPropertyData = presentationTimeStamp;
        fim_AdjustPTS(v47, &outPropertyData);
        v74 = *(const __CFAllocator **)v47;
        v75 = *(const opaqueCMFormatDescription **)(v47 + 120);
        presentationTimeStamp = outPropertyData;
        v68 = CMAudioSampleBufferCreateWithPacketDescriptions(v74, v70, 1u, 0, 0, v75, v72, &presentationTimeStamp, v71, &v133);
        if ((_DWORD)v68)
          goto LABEL_179;
        if (!*(_QWORD *)(v47 + 88))
          goto LABEL_146;
        if (*(_BYTE *)(v47 + 274))
          CMSetAttachment(v133, v108, v107, 1u);
        if (*(_BYTE *)(v47 + 352))
        {
          SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v133, 1u);
          if (SampleAttachmentsArray)
          {
            v77 = SampleAttachmentsArray;
            v78 = 0;
            while (1)
            {
              ValueAtIndex = (void *)CFArrayGetValueAtIndex(v77, v78);
              v129 = 16;
              *(_QWORD *)ioPropertyDataSize = v106 + v117 + v78;
              v131 = 0;
              if (!ValueAtIndex)
                break;
              v80 = ValueAtIndex;
              v81 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v47 + 152), 0x706B6470u, &v129, ioPropertyDataSize);
              if ((_DWORD)v81)
              {
                v34 = v81;
                FigSignalErrorAt();
                goto LABEL_176;
              }
              v82 = HIDWORD(v131);
              if ((_DWORD)v131)
              {
                if (HIDWORD(v131))
                {
                  v83 = a1;
                  v84 = (const void **)(v47 + 376);
                  v85 = *v120;
                  if (!*v120)
                    goto LABEL_128;
                  if (*(_DWORD *)(v47 + 368) != HIDWORD(v131))
                  {
                    CFRelease(v85);
                    v84 = (const void **)(v47 + 376);
                    *v120 = 0;
LABEL_128:
                    if (FigPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary())
                    {
                      v34 = FigSignalErrorAt();
                      a1 = v83;
                      a5 = v112;
                      goto LABEL_167;
                    }
                    *(_DWORD *)(v47 + 368) = v82;
                    v86 = v84;
                    a1 = v83;
LABEL_130:
                    v85 = *v86;
                    if (!*v86)
                      break;
                    goto LABEL_131;
                  }
                  a1 = v83;
                }
                else
                {
                  v85 = *v119;
                  if (!*v119)
                  {
                    v86 = (const void **)(v47 + 360);
LABEL_125:
                    if (FigPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary())
                      break;
                    goto LABEL_130;
                  }
                }
              }
              else
              {
                v85 = *dataLengtha;
                if (!*dataLengtha)
                {
                  v86 = (const void **)(v47 + 384);
                  goto LABEL_125;
                }
              }
LABEL_131:
              CFDictionaryApplyFunction((CFDictionaryRef)v85, (CFDictionaryApplierFunction)appendAttributesToDictionary, v80);
              if (v72 == ++v78)
                goto LABEL_132;
            }
          }
          v34 = FigSignalErrorAt();
LABEL_176:
          a5 = v112;
        }
        else
        {
LABEL_132:
          v87 = *(__CFArray **)(v47 + 560);
          if (v113 == v111)
          {
            CFArrayAppendValue(v87, v133);
            a5 = v112;
          }
          else
          {
            a5 = v112;
            if (CFArrayGetCount(v87) >= 1)
            {
              v88 = *(const __CFArray **)(v47 + 560);
              v138.length = CFArrayGetCount(v88);
              v138.location = 0;
              CFArrayApplyFunction(v88, v138, (CFArrayApplierFunction)fim_emitSampleApplier, a1);
              CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v47 + 560));
            }
            PushSampleBufferCallback = fim_MakePushSampleBufferCallback((uint64_t)a1, v47, *(unsigned int *)(v47 + 72), *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v47 + 88), *(_QWORD *)(v47 + 104), v133);
            if ((_DWORD)PushSampleBufferCallback)
            {
              v34 = PushSampleBufferCallback;
              *(_DWORD *)(v47 + 44) = PushSampleBufferCallback;
              goto LABEL_167;
            }
          }
          v90 = *(void **)(v47 + 448);
          if (!v90)
            goto LABEL_215;
          v34 = fim_PushMetaData((uint64_t)a1, v90, 0x69637920u);
          v91 = *(const void **)(v47 + 448);
          if (v91)
            CFRelease(v91);
          *(_QWORD *)(v47 + 448) = 0;
          if (!(_DWORD)v34)
          {
LABEL_215:
            v92 = *(void **)(v47 + 456);
            if (!v92)
              goto LABEL_146;
            v34 = fim_PushMetaData((uint64_t)a1, v92, 0x69643320u);
            v93 = *(const void **)(v47 + 456);
            if (v93)
              CFRelease(v93);
            *(_QWORD *)(v47 + 456) = 0;
            if (!(_DWORD)v34)
            {
LABEL_146:
              *(_BYTE *)(v47 + 274) = 0;
              v94 = *(_QWORD **)(v47 + 464);
              if (v94)
              {
                v95 = 0;
                do
                {
                  if (v94)
                  {
                    do
                    {
                      if (v60[v95].mStartOffset < *((int *)v94 + 5))
                        break;
                      v68 = fim_PushMetaData((uint64_t)a1, (void *)v94[1], *((_DWORD *)v94 + 4));
                      if ((_DWORD)v68)
                        goto LABEL_179;
                      v96 = (_QWORD *)**v58;
                      *v58 = v96;
                      if (!v96)
                        *(_QWORD *)(v47 + 472) = v58;
                      v97 = (const void *)v94[1];
                      if (v97)
                        CFRelease(v97);
                      free(v94);
                      v94 = *v58;
                    }
                    while (*v58);
                  }
                  mVariableFramesInPacket = *(unsigned int *)(v47 + 212);
                  if (!(_DWORD)mVariableFramesInPacket)
                    mVariableFramesInPacket = v60[v95].mVariableFramesInPacket;
                  *(_QWORD *)(v47 + 136) += mVariableFramesInPacket;
                  ++v95;
                }
                while (v95 != v72);
                v34 = 0;
              }
              else
              {
                v99 = *(_DWORD *)(v47 + 212);
                if (v99)
                {
                  v34 = 0;
                  v100 = *(_QWORD *)(v47 + 136) + (v99 * v118);
                }
                else
                {
                  v100 = *(_QWORD *)(v47 + 136);
                  v101 = &v105[4 * v117];
                  do
                  {
                    v102 = *v101;
                    v101 += 4;
                    v100 += v102;
                    --v72;
                  }
                  while (v72);
                  v34 = 0;
                }
                *(_QWORD *)(v47 + 136) = v100;
              }
            }
          }
        }
LABEL_167:
        if (v133)
          CFRelease(v133);
        if (*(_QWORD *)outPropertyDataSize)
          CFRelease(*(CFTypeRef *)outPropertyDataSize);
        if (!(_DWORD)v34)
        {
          v57 = v118 + v117;
          a3 = v116 - v118;
          if (v116 != (_DWORD)v118)
            continue;
        }
        v50 = blockBufferOut;
        goto LABEL_182;
      }
    }
    goto LABEL_181;
  }
  v49 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)v46, 0, dataLength, *(CFAllocatorRef *)v46, 0, 0, dataLength, 1u, &blockBufferOut);
  v50 = blockBufferOut;
  if (!(_DWORD)v49)
  {
    v49 = CMBlockBufferReplaceDataBytes(a4, blockBufferOut, 0, dataLength);
    v50 = blockBufferOut;
    if (!(_DWORD)v49)
    {
      v51 = blockBufferOut;
      goto LABEL_81;
    }
  }
  v34 = v49;
LABEL_182:
  if (v50)
    CFRelease(v50);
  if ((_DWORD)v34)
    goto LABEL_197;
LABEL_198:
  if (v126)
    CFRelease(v126);
  if (cf)
    CFRelease(cf);
  if (v109)
    CFRelease(v109);
}

void FigIcyManifoldInvalidate(void *a1)
{
  CFRetain(a1);
  FigIcyManifoldInvalidateGuts(a1);
}

uint64_t sub_192977E98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  CFRelease(v12);
  return 0;
}

void FigIcyManifoldFinalize(void *a1)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 40) = 1;
  FigIcyManifoldInvalidateGuts(a1);
}

uint64_t sub_192977ED8()
{
  uint64_t v0;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t result;

  fim_DestroyAudioTrack(v0 + 72);
  fim_DestroyMetaTrack((_QWORD *)(v0 + 392));
  v1 = *(const void **)(v0 + 560);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(v0 + 560) = 0;
  }
  v2 = *(const void **)(v0 + 568);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(v0 + 568) = 0;
  }
  v3 = *(const void **)(v0 + 520);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(v0 + 520) = 0;
  }
  v4 = *(const void **)(v0 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v0 + 16) = 0;
  }
  if (*(_QWORD *)v0)
    CFRelease(*(CFTypeRef *)v0);
  result = *(_QWORD *)(v0 + 8);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(v0 + 8) = 0;
  }
  return result;
}

__CFString *FigIcyManifoldCopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  ++*(_QWORD *)(DerivedStorage + 24);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigIcyManifold :"));
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t FigIcyManifoldCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  int v8;
  void *v9;
  uint64_t v10;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 32))
  {
    v10 = FigSignalErrorAt();
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("FMFD_ParserState")))
  {
    valuePtr = 0;
    if (*(_BYTE *)(DerivedStorage + 39))
    {
      if (*(_QWORD *)(DerivedStorage + 120))
        v8 = 2;
      else
        v8 = 1;
      valuePtr = v8;
    }
    v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  }
  else
  {
    if (!CFEqual(a2, CFSTR("FMFD_Type")))
    {
      v10 = 4294954512;
      goto LABEL_12;
    }
    v9 = (void *)CFStringCreateWithCString(a3, "AAC", 0x8000100u);
  }
  v10 = 0;
  *a4 = v9;
LABEL_12:
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v10;
}

uint64_t FigIcyManifoldSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  CMTimeFlags flags;
  uint64_t v8;
  CMTimeEpoch epoch;
  uint64_t v10;
  CMTime v12;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (CFEqual(a2, CFSTR("FMFD_HintForStartTime")))
  {
    if (a3
      && (v6 = CFGetTypeID(a3), v6 == CFDictionaryGetTypeID())
      && (CMTimeMakeFromDictionary(&v12, (CFDictionaryRef)a3),
          value = v12.value,
          flags = v12.flags,
          timescale = v12.timescale,
          (v12.flags & 0x1D) == 1))
    {
      v8 = 0;
      epoch = v12.epoch;
      *(_QWORD *)(DerivedStorage + 576) = value;
      *(_DWORD *)(DerivedStorage + 584) = timescale;
      *(_DWORD *)(DerivedStorage + 588) = flags;
      *(_QWORD *)(DerivedStorage + 592) = epoch;
      v10 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 600) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(DerivedStorage + 616) = *(_QWORD *)(v10 + 16);
    }
    else
    {
      v8 = FigSignalErrorAt();
    }
  }
  else
  {
    v8 = 4294954512;
  }
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v8;
}

void FigIcyManifoldInvalidateGuts(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v3 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = v3 + 1;
  if (!*(_BYTE *)(DerivedStorage + 32))
  {
    *(_BYTE *)(DerivedStorage + 32) = 1;
    *(_QWORD *)(DerivedStorage + 48) = 0;
    if (!*(_BYTE *)(DerivedStorage + 40))
    {
      fim_EndAllTracks(a1, 4294954511);
      v3 = *(_QWORD *)(DerivedStorage + 24) - 1;
    }
  }
  *(_QWORD *)(DerivedStorage + 24) = v3;
  JUMPOUT(0x19402EA24);
}

void fim_EndAllTracks(void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t (*v5)(void *, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(DerivedStorage + 96);
  *(_QWORD *)(DerivedStorage + 96) = 0;
  if ((_DWORD)a2)
  {
    if (!v5)
      goto LABEL_16;
  }
  else
  {
    FigIcyManifoldFlush(a1);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(unsigned int *)(DerivedStorage + 72);
  v7 = *(_QWORD *)(DerivedStorage + 104);
  v8 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = 0;
  if (v8 >= 1)
  {
    v9 = v8;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
      --v9;
    }
    while (v9);
  }
  if (v7)
  {
    v10 = v5(a1, v6, v7, a2);
    do
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
      v11 = *(_QWORD *)(DerivedStorage + 24) + 1;
      *(_QWORD *)(DerivedStorage + 24) = v11;
    }
    while (v11 < v8);
    if (v10)
      goto LABEL_23;
  }
  else
  {
    do
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
      v12 = *(_QWORD *)(DerivedStorage + 24) + 1;
      *(_QWORD *)(DerivedStorage + 24) = v12;
    }
    while (v12 < v8);
  }
LABEL_16:
  v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(DerivedStorage + 416);
  *(_QWORD *)(DerivedStorage + 416) = 0;
  if (v13)
  {
    v14 = *(unsigned int *)(DerivedStorage + 392);
    v15 = *(_QWORD *)(DerivedStorage + 424);
    v16 = *(_QWORD *)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = 0;
    if (v16 >= 1)
    {
      v17 = v16;
      do
      {
        MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
        --v17;
      }
      while (v17);
    }
    if (v15)
      v13(a1, v14, v15, a2);
    do
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
      v18 = *(_QWORD *)(DerivedStorage + 24) + 1;
      *(_QWORD *)(DerivedStorage + 24) = v18;
    }
    while (v18 < v16);
  }
LABEL_23:
  if (a1)
    CFRelease(a1);
}

uint64_t FigIcyManifoldFlush(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  unsigned int (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v8;
  const __CFArray *v9;
  OpaqueAudioFileStreamID *v10;
  uint64_t v11;
  CFTypeRef cf;
  CFRange v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 32) || *(_BYTE *)(DerivedStorage + 36))
  {
    v11 = FigSignalErrorAt();
    goto LABEL_21;
  }
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = v3;
  cf = 0;
  v5 = *(_QWORD *)(v3 + 568);
  v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (v5)
  {
    if (*(_BYTE *)(v3 + 276))
    {
      v7 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (!v7 || v7(v5, *MEMORY[0x1E0CA3218], *MEMORY[0x1E0C9AE00], &cf))
      {
LABEL_13:
        v8 = cf;
        goto LABEL_14;
      }
      v8 = cf;
    }
    else
    {
      v8 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
      cf = v8;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v8 == *v6)
  {
    if (CFArrayGetCount(*(CFArrayRef *)(v4 + 560)) >= 1)
    {
      v9 = *(const __CFArray **)(v4 + 560);
      v14.length = CFArrayGetCount(v9);
      v14.location = 0;
      CFArrayApplyFunction(v9, v14, (CFArrayApplierFunction)fim_emitSampleApplier, a1);
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v4 + 560));
    }
    goto LABEL_13;
  }
LABEL_14:
  if (v8)
    CFRelease(v8);
  if (*(_BYTE *)(DerivedStorage + 39))
  {
    v10 = *(OpaqueAudioFileStreamID **)(DerivedStorage + 152);
    if (v10)
    {
      if (*(_QWORD *)(DerivedStorage + 120))
        AudioFileStreamParseBytes(v10, 0, 0, 0);
    }
  }
  v11 = 0;
  *(_BYTE *)(DerivedStorage + 37) = 1;
LABEL_21:
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v11;
}

uint64_t fim_emitSampleApplier(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = fim_MakePushSampleBufferCallback(a2, DerivedStorage, *(unsigned int *)(DerivedStorage + 72), *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(DerivedStorage + 88), *(_QWORD *)(DerivedStorage + 104), a1);
  if ((_DWORD)result)
    *(_DWORD *)(DerivedStorage + 44) = result;
  return result;
}

uint64_t fim_MakePushSampleBufferCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a5, CMSampleBufferRef sbuf)
{
  opaqueCMSampleBuffer *v6;
  uint64_t (*v8)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  const opaqueCMFormatDescription *v12;
  BOOL v13;
  uint32_t NumSamples;
  CMFormatDescriptionRef v15;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v17;
  uint64_t AudioStreamPacketDescriptionsPtr;
  const __CFAllocator *v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t DataLength;
  AudioStreamPacketDescription *v27;
  uint64_t v28;
  size_t v29;
  uint64_t appended;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  CMBlockBufferRef v34;
  CMBlockBufferRef v35;
  _QWORD *v36;
  uint64_t (*v37)(uint64_t, CMBlockBufferRef, CMBlockBufferRef);
  const __CFAllocator *v38;
  uint64_t v39;
  CMSampleBufferRef v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const opaqueCMFormatDescription *formatDescription;
  uint64_t (*v46)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v47;
  unsigned int v48;
  CMItemCount v49;
  AudioStreamPacketDescription *v50;
  CMTime presentationTimeStamp;
  CMSampleBufferRef sampleBufferOut;
  CMBlockBufferRef blockBufferOut;
  AudioStreamPacketDescription *packetDescriptionsPointerOut;
  CMTime v55;
  CMBlockBufferRef v56;
  CMBlockBufferRef v57;

  if (!a4)
    return 0;
  v6 = sbuf;
  v8 = a4;
  v12 = CMSampleBufferGetFormatDescription(sbuf);
  if (*(_BYTE *)(a2 + 276))
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13 && CMFormatDescriptionGetMediaType(v12) == 1936684398)
  {
    v47 = a1;
    v48 = a3;
    v56 = 0;
    v57 = 0;
    blockBufferOut = 0;
    packetDescriptionsPointerOut = 0;
    sampleBufferOut = 0;
    NumSamples = CMSampleBufferGetNumSamples(v6);
    v15 = CMSampleBufferGetFormatDescription(v6);
    CMSampleBufferGetPresentationTimeStamp(&v55, v6);
    DataBuffer = CMSampleBufferGetDataBuffer(v6);
    if (DataBuffer)
    {
      v17 = DataBuffer;
      AudioStreamPacketDescriptionsPtr = CMSampleBufferGetAudioStreamPacketDescriptionsPtr(v6, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, 0);
      if (!(_DWORD)AudioStreamPacketDescriptionsPtr)
      {
        v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        AudioStreamPacketDescriptionsPtr = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], NumSamples, 0, &blockBufferOut);
        if (!(_DWORD)AudioStreamPacketDescriptionsPtr)
        {
          v49 = NumSamples;
          v50 = (AudioStreamPacketDescription *)malloc_type_calloc(NumSamples, 0x10uLL, 0x1000040451B5BE8uLL);
          if (v50)
          {
            formatDescription = v15;
            v46 = v8;
            v20 = *(_DWORD *)(a2 + 200);
            v21 = (uint64_t *)MEMORY[0x1E0CA30C0];
            if (v20 != 1700998451)
              v21 = (uint64_t *)MEMORY[0x1E0CA30A8];
            if (v20 == 1633889587)
              v22 = (uint64_t *)MEMORY[0x1E0CA30B8];
            else
              v22 = v21;
            if (!NumSamples)
            {
LABEL_30:
              v38 = *(const __CFAllocator **)a2;
              presentationTimeStamp = v55;
              v39 = CMAudioSampleBufferCreateWithPacketDescriptions(v38, blockBufferOut, 1u, 0, 0, formatDescription, v49, &presentationTimeStamp, v50, &sampleBufferOut);
              v8 = v46;
              a3 = v48;
              a1 = v47;
              if ((_DWORD)v39)
              {
                v40 = 0;
              }
              else
              {
                v40 = sampleBufferOut;
                sampleBufferOut = 0;
              }
LABEL_36:
              if (v57)
                CFRelease(v57);
              if (v56)
                CFRelease(v56);
              if (blockBufferOut)
                CFRelease(blockBufferOut);
              free(v50);
              if (sampleBufferOut)
                CFRelease(sampleBufferOut);
              v6 = v40;
              if ((_DWORD)v39)
                goto LABEL_54;
              goto LABEL_45;
            }
            v23 = 0;
            v24 = *v22;
            v25 = *MEMORY[0x1E0CA3108];
            while (1)
            {
              DataLength = CMBlockBufferGetDataLength(blockBufferOut);
              v27 = &v50[v23];
              v27->mStartOffset = DataLength;
              v28 = *(_QWORD *)&packetDescriptionsPointerOut[v23].mVariableFramesInPacket;
              *(_QWORD *)&v27->mVariableFramesInPacket = v28;
              v29 = HIDWORD(v28);
              appended = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)a2, 0, HIDWORD(v28), v19, 0, 0, HIDWORD(v28), 1u, &v56);
              if ((_DWORD)appended)
                break;
              CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)a2, v17, packetDescriptionsPointerOut[v23].mStartOffset, v29, 0, &v57);
              v31 = *(_QWORD *)(a2 + 568);
              v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
              if (!v32)
                goto LABEL_33;
              appended = v32(v31, v25, v24);
              if ((_DWORD)appended)
                break;
              v33 = *(_QWORD *)(a2 + 568);
              v34 = v56;
              v35 = v57;
              v36 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
              if (*v36 < 4uLL
                || (v37 = (uint64_t (*)(uint64_t, CMBlockBufferRef, CMBlockBufferRef))v36[4]) == 0)
              {
LABEL_33:
                v40 = 0;
                v39 = 4294954514;
                goto LABEL_34;
              }
              appended = v37(v33, v35, v34);
              if ((_DWORD)appended)
                break;
              appended = CMBlockBufferAppendBufferReference(blockBufferOut, v56, 0, 0, 0);
              if ((_DWORD)appended)
                break;
              if (v57)
              {
                CFRelease(v57);
                v57 = 0;
              }
              if (v56)
              {
                CFRelease(v56);
                v56 = 0;
              }
              if (v49 == ++v23)
                goto LABEL_30;
            }
            v39 = appended;
            v40 = 0;
LABEL_34:
            v8 = v46;
LABEL_35:
            a3 = v48;
            a1 = v47;
            goto LABEL_36;
          }
          AudioStreamPacketDescriptionsPtr = FigSignalErrorAt();
        }
      }
      v39 = AudioStreamPacketDescriptionsPtr;
      v40 = 0;
    }
    else
    {
      v40 = 0;
      v39 = 0;
    }
    v50 = 0;
    goto LABEL_35;
  }
  v40 = 0;
LABEL_45:
  v41 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v41 >= 1)
  {
    v42 = v41;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(a2 + 8));
      --v42;
    }
    while (v42);
  }
  v39 = v8(a1, a3, a5, 0, 0, v6);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 8));
    v43 = *(_QWORD *)(a2 + 24) + 1;
    *(_QWORD *)(a2 + 24) = v43;
  }
  while (v43 < v41);
  if (!(_DWORD)v39)
  {
    if (!*(_BYTE *)(a2 + 32) && !*(_BYTE *)(a2 + 37))
    {
      v39 = 0;
      if (!v40)
        return v39;
      goto LABEL_55;
    }
    v39 = 4294951251;
  }
LABEL_54:
  if (v40)
LABEL_55:
    CFRelease(v40);
  return v39;
}

void fim_DestroyAudioTrack(uint64_t a1)
{
  const void *v2;
  OpaqueAudioFileStreamID *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  FigFormatDescriptionRelease();
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v3 = *(OpaqueAudioFileStreamID **)(a1 + 80);
  if (v3)
  {
    AudioFileStreamClose(v3);
    *(_QWORD *)(a1 + 80) = 0;
  }
  free(*(void **)(a1 + 232));
  *(_BYTE *)(a1 + 280) = 0;
  v4 = *(const void **)(a1 + 304);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 304) = 0;
  }
  v5 = *(const void **)(a1 + 288);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 288) = 0;
  }
  *(_DWORD *)(a1 + 296) = 0;
  v6 = *(const void **)(a1 + 312);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 312) = 0;
  }
}

void fim_DestroyMetaTrack(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t v6;
  const void *v7;

  FigFormatDescriptionRelease();
  a1[5] = 0;
  FigFormatDescriptionRelease();
  a1[6] = 0;
  v2 = (const void *)a1[7];
  if (v2)
    CFRelease(v2);
  a1[7] = 0;
  v3 = (const void *)a1[8];
  if (v3)
    CFRelease(v3);
  v5 = (uint64_t **)(a1 + 9);
  v4 = (uint64_t *)a1[9];
  a1[8] = 0;
  if (v4)
  {
    do
    {
      v6 = *v4;
      *v5 = (uint64_t *)*v4;
      if (!v6)
        a1[10] = v5;
      v7 = (const void *)v4[1];
      if (v7)
        CFRelease(v7);
      free(v4);
      v4 = *v5;
    }
    while (*v5);
  }
}

uint64_t FigIcyManifoldNoteStreamEnd(void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 32))
  {
    v5 = FigSignalErrorAt();
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 37) = 1;
    fim_EndAllTracks(a1, a2);
    v5 = 0;
  }
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  CFRelease(a1);
  return v5;
}

uint64_t FigIcyManifoldCopyCurrentFormatDescriptionForTrack(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 32) || !a2)
    goto LABEL_10;
  if (*(_DWORD *)(DerivedStorage + 72) == a2)
  {
    if (!*(_QWORD *)(DerivedStorage + 120))
    {
LABEL_10:
      v6 = FigSignalErrorAt();
      goto LABEL_11;
    }
  }
  else if (*(_DWORD *)(DerivedStorage + 392) != a2
         || !*(_QWORD *)(DerivedStorage + 432) && !*(_QWORD *)(DerivedStorage + 440))
  {
    goto LABEL_10;
  }
  v6 = 0;
  *a3 = FigFormatDescriptionRetain();
LABEL_11:
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v6;
}

uint64_t FigIcyManifoldInstallCallbacksForTrack(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v8 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = v8 + 1;
  if (a3 && *(_BYTE *)(DerivedStorage + 32))
  {
    v13 = 4294954511;
    goto LABEL_15;
  }
  if (!a2)
    goto LABEL_10;
  if (*(_DWORD *)(DerivedStorage + 72) == a2)
  {
    v9 = (_OWORD *)(DerivedStorage + 80);
    if (a3)
    {
      v10 = *a3;
      *(_QWORD *)(DerivedStorage + 96) = *((_QWORD *)a3 + 2);
      *v9 = v10;
    }
    else
    {
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(DerivedStorage + 88) = 0;
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v13 = 0;
    *(_QWORD *)(DerivedStorage + 104) = a4;
    goto LABEL_15;
  }
  if (*(_DWORD *)(DerivedStorage + 392) != a2)
  {
LABEL_10:
    v13 = FigSignalErrorAt();
    v8 = *(_QWORD *)(DerivedStorage + 24) - 1;
    goto LABEL_15;
  }
  v11 = (_OWORD *)(DerivedStorage + 400);
  if (a3)
  {
    v12 = *a3;
    *(_QWORD *)(DerivedStorage + 416) = *((_QWORD *)a3 + 2);
    *v11 = v12;
  }
  else
  {
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(DerivedStorage + 408) = 0;
    *(_QWORD *)(DerivedStorage + 416) = 0;
  }
  v13 = 0;
  *(_QWORD *)(DerivedStorage + 424) = a4;
LABEL_15:
  *(_QWORD *)(DerivedStorage + 24) = v8;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v13;
}

uint64_t FigIcyManifoldCopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, CFNumberRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t Property;
  CFNumberRef v10;
  uint64_t v11;
  UInt32 ioPropertyDataSize;
  unsigned int outPropertyData;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 32))
  {
    v11 = 4294954511;
  }
  else if (*(_DWORD *)(DerivedStorage + 72) == a2)
  {
    if (CFEqual(a3, CFSTR("FMFD_TrackEstimatedDataRate")))
    {
      ioPropertyDataSize = 4;
      outPropertyData = 0;
      Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(DerivedStorage + 152), 0x62726174u, &ioPropertyDataSize, &outPropertyData);
      if ((_DWORD)Property)
      {
        v11 = Property;
      }
      else
      {
        outPropertyData >>= 3;
        v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &outPropertyData);
        *a5 = v10;
        if (v10)
          v11 = 0;
        else
          v11 = 4294954510;
      }
    }
    else
    {
      v11 = 4294954512;
    }
  }
  else if (*(_DWORD *)(DerivedStorage + 392) == a2)
  {
    v11 = 4294954513;
  }
  else
  {
    v11 = 4294951254;
  }
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v11;
}

uint64_t FigIcyManifoldReannounceUnregisteredTracks(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const opaqueCMFormatDescription *v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 32))
  {
    v8 = FigSignalErrorAt();
    goto LABEL_15;
  }
  *(_BYTE *)(DerivedStorage + 37) = 0;
  if (!*(_QWORD *)(DerivedStorage + 48))
  {
LABEL_10:
    v4 = 0;
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(DerivedStorage + 72);
  if (!(_DWORD)v3
    || *(_QWORD *)(DerivedStorage + 80)
    || *(_QWORD *)(DerivedStorage + 88)
    || (v4 = fim_ReannounceTrack(a1, v3, *(const opaqueCMFormatDescription **)(DerivedStorage + 120), 0), !(_DWORD)v4))
  {
    v5 = *(unsigned int *)(DerivedStorage + 392);
    if (!(_DWORD)v5 || *(_QWORD *)(DerivedStorage + 400) || *(_QWORD *)(DerivedStorage + 408))
      goto LABEL_10;
    v7 = *(const opaqueCMFormatDescription **)(DerivedStorage + 432);
    if (!v7)
      v7 = *(const opaqueCMFormatDescription **)(DerivedStorage + 440);
    v8 = fim_ReannounceTrack(a1, v5, v7, 0);
LABEL_15:
    v4 = v8;
  }
LABEL_11:
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v4;
}

uint64_t fim_ReannounceTrack(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t MediaType;
  uint64_t v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(_QWORD *)(DerivedStorage + 64);
  v10 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = 0;
  if (v10 >= 1)
  {
    v11 = v10;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
      --v11;
    }
    while (v11);
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(DerivedStorage + 48);
  MediaType = CMFormatDescriptionGetMediaType(a3);
  v14 = v12(a1, v9, MediaType, a2);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
    v15 = *(_QWORD *)(DerivedStorage + 24) + 1;
    *(_QWORD *)(DerivedStorage + 24) = v15;
  }
  while (v15 < v10);
  if ((_DWORD)v14)
    return v14;
  if (*(_BYTE *)(DerivedStorage + 32) || *(_BYTE *)(DerivedStorage + 37))
    return 4294951251;
  return fim_MakeFormatDescriptionCallback(a1, DerivedStorage, a2, a4, v9, (uint64_t)a3, 0);
}

uint64_t fim_MakeFormatDescriptionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, _QWORD);
  uint64_t v20;
  uint64_t v21;

  if (!a4)
    return 0;
  v14 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v14 >= 1)
  {
    v15 = v14;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(a2 + 8));
      --v15;
    }
    while (v15);
  }
  v16 = a4(a1, a3, a5, a6, a7);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 8));
    v17 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v17 + 1;
  }
  while (v17 + 1 < v14);
  if (!(_DWORD)v16)
  {
    if (!*(_BYTE *)(a2 + 32) && !*(_BYTE *)(a2 + 37))
    {
      if (!*(_BYTE *)(a2 + 38))
        return 0;
      if (*(_DWORD *)(a2 + 72) != 100)
        return 0;
      *(_BYTE *)(a2 + 38) = 0;
      v19 = *(void (**)(uint64_t, _QWORD))(a2 + 56);
      if (!v19)
        return 0;
      *(_QWORD *)(a2 + 24) = 0;
      if ((v17 & 0x8000000000000000) == 0)
      {
        v20 = v17 + 1;
        do
        {
          MEMORY[0x19402EA24](*(_QWORD *)(a2 + 8));
          --v20;
        }
        while (v20);
        v19 = *(void (**)(uint64_t, _QWORD))(a2 + 56);
      }
      v19(a1, *(_QWORD *)(a2 + 64));
      do
      {
        MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 8));
        v21 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v21 + 1;
      }
      while (v21 < v17);
      if (!*(_BYTE *)(a2 + 32) && !*(_BYTE *)(a2 + 37))
        return 0;
    }
    return 4294951251;
  }
  return v16;
}

uint64_t ProcessID3HeaderTagFromAudioFileStream(uint64_t a1, unsigned int a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  unint64_t v6;
  size_t v7;
  uint64_t *v8;
  __int16 v9;
  uint64_t Property;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  void *v14;
  void *v15;
  const __CFAllocator *v16;
  const __CFAllocator *GlobalCFAllocatorFigMalloc;
  uint64_t appended;
  uint64_t v19;
  OpaqueCMBlockBuffer *v20;
  CMBlockBufferRef v21;
  _DWORD *v22;
  _DWORD *v23;
  CFTypeRef v24;
  CMBlockBufferRef theBuffer;
  uint64_t outPropertyData;
  uint64_t __dst;
  __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  theBuffer = 0;
  if (DerivedStorage[65])
    return 0;
  v5 = DerivedStorage;
  outPropertyData = 0;
  if (DerivedStorage[66])
    goto LABEL_19;
  if ((a2 & 0x80000000) != 0)
  {
    v7 = -a2;
    memcpy(&__dst, (char *)DerivedStorage + 10 - v7 + 504, v7);
    memcpy((char *)&__dst + v7, (const void *)v5[40], 10 - v7);
    v6 = v5[41];
  }
  else
  {
    v6 = DerivedStorage[41] - a2;
    if (v6 < 0xA)
    {
      v11 = 0;
      DerivedStorage[66] = v6;
      return v11;
    }
    v7 = 0;
    v8 = (uint64_t *)(DerivedStorage[40] + a2);
    v9 = *((_WORD *)v8 + 4);
    __dst = *v8;
    v29 = v9;
  }
  HIDWORD(outPropertyData) = 4;
  Property = AudioFormatGetProperty(0x69643373u, 0xAu, &__dst, (UInt32 *)&outPropertyData + 1, &outPropertyData);
  if ((_DWORD)Property)
    goto LABEL_29;
  if (*((_BYTE *)v5 + 33))
  {
    v11 = 0;
    v5[69] += outPropertyData;
    goto LABEL_32;
  }
  if (outPropertyData < 0xB)
  {
LABEL_19:
    v11 = 0;
    goto LABEL_32;
  }
  v12 = v6 + v7;
  if (v6 + v7 >= outPropertyData)
    v13 = outPropertyData;
  else
    v13 = v6 + v7;
  if (!v7)
  {
    appended = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CMBlockBufferRef)v5[42], v5[43] + (int)a2, v13, 0, &theBuffer);
    goto LABEL_21;
  }
  v14 = malloc_type_malloc(v7, 0x65D3CF0uLL);
  if (!v14)
  {
LABEL_36:
    Property = FigSignalErrorAt();
    goto LABEL_29;
  }
  v15 = v14;
  memcpy(v14, &__dst, v7);
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  GlobalCFAllocatorFigMalloc = (const __CFAllocator *)FigGetGlobalCFAllocatorFigMalloc();
  Property = CMBlockBufferCreateWithMemoryBlock(v16, v15, v7, GlobalCFAllocatorFigMalloc, 0, 0, v7, 0, &theBuffer);
  if (!(_DWORD)Property)
  {
    appended = CMBlockBufferAppendBufferReference(theBuffer, (CMBlockBufferRef)v5[42], v5[43], v13 - v7, 0);
LABEL_21:
    v11 = appended;
    if ((_DWORD)appended)
      goto LABEL_32;
    v19 = outPropertyData;
    if (v12 < outPropertyData)
    {
      v20 = theBuffer;
      v5[65] = theBuffer;
      theBuffer = 0;
      v5[68] = v19;
      v11 = 0;
      v5[67] = v19 - CMBlockBufferGetDataLength(v20);
      goto LABEL_32;
    }
    v21 = theBuffer;
    if (a2)
    {
      v22 = malloc_type_malloc(0x18uLL, 0x102004062D53EE8uLL);
      if (v22)
      {
        v23 = v22;
        if (v21)
          v24 = CFRetain(v21);
        else
          v24 = 0;
        v11 = 0;
        v23[4] = 1768174368;
        v23[5] = a2;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = v24;
        *(_QWORD *)v5[59] = v23;
        v5[59] = v23;
        goto LABEL_32;
      }
      goto LABEL_36;
    }
    Property = fim_PushMetaData(a1, theBuffer, 0x69643320u);
  }
LABEL_29:
  v11 = Property;
LABEL_32:
  if (theBuffer)
    CFRelease(theBuffer);
  return v11;
}

uint64_t fim_PushMetaData(uint64_t a1, void *a2, FourCharCode a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFAllocatorRef *v9;
  uint64_t v10;
  uint64_t v11;
  CMFormatDescriptionRef *v12;
  uint64_t (*v13)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t FormatDescriptionCallback;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  CFTypeRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const opaqueCMFormatDescription *v23;
  BOOL v24;
  _OWORD *v25;
  uint64_t PushSampleBufferCallback;
  int64_t v28;
  unint64_t v29;
  CMTime rhs;
  CMTime lhs;
  CMTime v32;
  CMTime time2;
  CMTime time1;
  CMTime time;
  CMTime v36;
  CMTime v37;
  int64_t destination;
  char *returnedPointerOut;
  _BYTE temporaryBlock[4];
  size_t sampleSizeArray;
  CMTime duration;
  CMSampleBufferRef v43;
  CMSampleTimingInfo sampleTimingArray;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  v43 = 0;
  sampleSizeArray = 0;
  if (a3 != 1768174368)
  {
    if (!*(_QWORD *)(DerivedStorage + 120))
    {
      if (a3 == 1768126752)
      {
        v15 = *(const void **)(DerivedStorage + 448);
        if (v15)
          CFRelease(v15);
        if (a2)
          v16 = CFRetain(a2);
        else
          v16 = 0;
        FormatDescriptionCallback = 0;
        *(_QWORD *)(v7 + 448) = v16;
        goto LABEL_57;
      }
      goto LABEL_26;
    }
    goto LABEL_10;
  }
  returnedPointerOut = 0;
  v8 = CMBlockBufferAccessDataBytes((CMBlockBufferRef)a2, 0xAuLL, 4uLL, temporaryBlock, &returnedPointerOut);
  if ((_DWORD)v8)
    goto LABEL_66;
  if (strncasecmp(returnedPointerOut, "PRIV", 4uLL)
    || CMBlockBufferAccessDataBytes((CMBlockBufferRef)a2, 0x14uLL, 0x2DuLL, &sampleTimingArray, &returnedPointerOut)
    || strcmp("com.apple.streaming.transportStreamTimestamp", returnedPointerOut)
    || (destination = 0, CMBlockBufferCopyDataBytes((CMBlockBufferRef)a2, 0x41uLL, 8uLL, &destination)))
  {
    if (!*(_QWORD *)(v7 + 120))
    {
LABEL_26:
      v17 = *(const void **)(v7 + 456);
      if (v17)
        CFRelease(v17);
      if (a2)
        v18 = CFRetain(a2);
      else
        v18 = 0;
      FormatDescriptionCallback = 0;
      *(_QWORD *)(v7 + 456) = v18;
      goto LABEL_57;
    }
LABEL_10:
    v9 = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
    v10 = (uint64_t)v9;
    if (a3 == 1768126752)
      v11 = 54;
    else
      v11 = 55;
    if (a3 == 1768126752)
      v12 = v9 + 54;
    else
      v12 = v9 + 55;
    if (v9[v11])
      goto LABEL_20;
    v8 = CMFormatDescriptionCreate(*v9, 0x6D657461u, a3, 0, v12);
    if (!(_DWORD)v8)
    {
      v13 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 48);
      if (v13 && !*(_DWORD *)(v10 + 392))
      {
        v19 = 101;
        *(_DWORD *)(v10 + 392) = 101;
        v20 = *(_QWORD *)(v10 + 24);
        *(_QWORD *)(v10 + 24) = 0;
        if (v20 >= 1)
        {
          v21 = v20;
          do
          {
            MEMORY[0x19402EA24](*(_QWORD *)(v10 + 8));
            --v21;
          }
          while (v21);
          v13 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 48);
          v19 = *(unsigned int *)(v10 + 392);
        }
        FormatDescriptionCallback = v13(a1, *(_QWORD *)(v10 + 64), 1835365473, v19);
        do
        {
          MEMORY[0x19402EA0C](*(_QWORD *)(v10 + 8));
          v22 = *(_QWORD *)(v10 + 24) + 1;
          *(_QWORD *)(v10 + 24) = v22;
        }
        while (v22 < v20);
        if ((_DWORD)FormatDescriptionCallback)
          goto LABEL_57;
        if (*(_BYTE *)(v10 + 32) || *(_BYTE *)(v10 + 37))
        {
          FormatDescriptionCallback = 4294951251;
LABEL_57:
          if (v43)
            CFRelease(v43);
          return FormatDescriptionCallback;
        }
        FormatDescriptionCallback = fim_MakeFormatDescriptionCallback(a1, v10, *(unsigned int *)(v10 + 392), *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 400), *(_QWORD *)(v10 + 424), *(_QWORD *)(v10 + v11 * 8), 0);
        goto LABEL_40;
      }
LABEL_20:
      FormatDescriptionCallback = 0;
LABEL_40:
      v23 = *(const opaqueCMFormatDescription **)(v10 + v11 * 8);
      if (v23)
        v24 = (_DWORD)FormatDescriptionCallback == 0;
      else
        v24 = 0;
      if (!v24)
        goto LABEL_57;
      if (!*(_QWORD *)(v7 + 408))
      {
        FormatDescriptionCallback = 0;
        goto LABEL_57;
      }
      fim_GetCurrentAudioTime(v7 + 72, &sampleTimingArray.duration);
      duration = sampleTimingArray.duration;
      v25 = (_OWORD *)(v7 + 480);
      if ((*(_BYTE *)(v7 + 492) & 1) != 0)
      {
        time1 = duration;
        *(_OWORD *)&time2.value = *v25;
        time2.epoch = *(_QWORD *)(v7 + 496);
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          *(_OWORD *)&duration.value = *v25;
          duration.epoch = *(_QWORD *)(v7 + 496);
        }
      }
      fim_AdjustPTS(v7, &duration);
      sampleTimingArray.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      sampleTimingArray.presentationTimeStamp = duration;
      CMTimeMake(&sampleTimingArray.duration, 1, duration.timescale);
      sampleSizeArray = CMBlockBufferGetDataLength((CMBlockBufferRef)a2);
      v8 = CMSampleBufferCreate(*(CFAllocatorRef *)v7, (CMBlockBufferRef)a2, 1u, 0, 0, v23, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v43);
      if (!(_DWORD)v8)
      {
        lhs = duration;
        rhs = sampleTimingArray.duration;
        CMTimeAdd(&v32, &lhs, &rhs);
        *v25 = *(_OWORD *)&v32.value;
        *(_QWORD *)(v7 + 496) = v32.epoch;
        PushSampleBufferCallback = fim_MakePushSampleBufferCallback(a1, v7, *(unsigned int *)(v7 + 392), *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v7 + 408), *(_QWORD *)(v7 + 424), v43);
        FormatDescriptionCallback = PushSampleBufferCallback;
        if ((_DWORD)PushSampleBufferCallback)
          *(_DWORD *)(v7 + 44) = PushSampleBufferCallback;
        goto LABEL_57;
      }
    }
LABEL_66:
    FormatDescriptionCallback = v8;
    goto LABEL_57;
  }
  v28 = bswap64(destination & 0xFFFFFFFF01000000);
  destination = v28;
  if (*(_BYTE *)(v7 + 273))
  {
    v37 = *(CMTime *)(v7 + 280);
    CMTimeMake(&v36, *(_QWORD *)(v7 + 136), (int)*(double *)(v7 + 192));
    CMTimeAdd(&duration, &v37, &v36);
    *(_OWORD *)&v32.value = *(_OWORD *)&duration.timescale;
    time = duration;
    CMTimeConvertScale(&duration, &time, 90000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    v29 = ((destination - duration.value) << 31 >> 63) & 0xFFFFFFFE00000000 | (destination - duration.value) & 0x1FFFFFFFFLL;
    if (v29 - 3 <= 0xFFFFFFFFFFFFFFFALL)
    {
      CMTimeMake(&duration, v29 + duration.value, 90000);
      *(CMTime *)(v7 + 280) = duration;
      *(_QWORD *)(v7 + 136) = 0;
      *(_BYTE *)(v7 + 274) = 1;
    }
  }
  else if (!*(_QWORD *)(v7 + 136))
  {
    *(_BYTE *)(v7 + 273) = 1;
    CMTimeMake(&duration, v28, 90000);
    *(CMTime *)(v7 + 280) = duration;
  }
  return 0;
}

double fim_GetCurrentAudioTime@<D0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  __int128 v4;
  CMTimeEpoch epoch;
  uint64_t v6;
  CMTime v8;
  CMTime lhs;
  CMTime v10;

  if (*(_QWORD *)(a1 + 48))
  {
    CMTimeMake(&v10, *(_QWORD *)(a1 + 64), (int)*(double *)(a1 + 120));
    *(_QWORD *)&v4 = v10.value;
    *(_OWORD *)&a2->value = *(_OWORD *)&v10.value;
    epoch = v10.epoch;
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    v4 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
    epoch = *(_QWORD *)(v6 + 16);
  }
  a2->epoch = epoch;
  if ((*(_BYTE *)(a1 + 220) & 1) != 0)
  {
    lhs = *a2;
    v8 = *(CMTime *)(a1 + 208);
    CMTimeAdd(&v10, &lhs, &v8);
    *(_QWORD *)&v4 = v10.value;
    *a2 = v10;
  }
  return *(double *)&v4;
}

__n128 fim_AdjustPTS(uint64_t a1, CMTime *a2)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  CMTimeValue v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  CMTimeEpoch v15;
  uint64_t v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v30;
  CMTimeValue v31;
  CMTimeScale v32;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (__n128 *)(a1 + 576);
  if ((*(_DWORD *)(a1 + 588) & 0x1D) != 1)
  {
    v5 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *v4 = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(v5 + 16);
  }
  if (a2)
  {
    if ((a2->flags & 0x1D) == 1)
    {
      v22 = *a2;
      *(__n128 *)&v21.value = *v4;
      v21.epoch = *(_QWORD *)(a1 + 592);
      FigManifoldAdjustTimestampAndUpdateRefTime(&v21, &v22, v4);
      value = a2->value;
      flags = a2->flags;
      timescale = a2->timescale;
      epoch = a2->epoch;
      v31 = v22.value;
      v9 = v22.flags;
      v32 = v22.timescale;
      v10 = v22.epoch;
      if ((flags & 0x1F) != 3 && (v22.flags & 0x1F) != 3)
        goto LABEL_8;
      memset(&v30, 0, sizeof(v30));
      v11 = a2->value;
      rhs.epoch = v22.epoch;
      lhs.value = v11;
      lhs.timescale = a2->timescale;
      lhs.flags = flags;
      lhs.epoch = epoch;
      *(_OWORD *)&rhs.value = *(_OWORD *)&v22.value;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&v30, &time);
      time1 = v30;
      CMTimeMake(&time2, 1, 1000000000);
      if (CMTimeCompare(&time1, &time2) > 0)
      {
LABEL_8:
        v23.epoch = v10;
        v24.value = value;
        v24.timescale = timescale;
        v24.flags = flags;
        v24.epoch = epoch;
        v23.value = v31;
        v23.timescale = v32;
        v23.flags = v9;
        if (CMTimeCompare(&v24, &v23))
        {
          result.n128_u64[0] = v22.value;
          *a2 = v22;
        }
      }
    }
    v12 = (_OWORD *)(a1 + 600);
    if ((*(_DWORD *)(a1 + 612) & 0x1D) != 1)
    {
      v13 = MEMORY[0x1E0CA2E68];
      v14 = *MEMORY[0x1E0CA2E68];
      *v12 = *MEMORY[0x1E0CA2E68];
      v15 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(a1 + 616) = v15;
      v20 = *a2;
      *(_OWORD *)&v19.value = v14;
      v19.epoch = v15;
      if (CMTimeCompare(&v20, &v19) < 0)
      {
        CMTimeMake(&v30, 0x200000000, 90000);
        result.n128_u64[0] = v30.value;
        *v12 = *(_OWORD *)&v30.value;
        *(_QWORD *)(a1 + 616) = v30.epoch;
      }
    }
    if ((a2->flags & 0x1D) == 1)
    {
      v18 = *a2;
      *(_OWORD *)&v17.value = *v12;
      v17.epoch = *(_QWORD *)(a1 + 616);
      CMTimeAdd(&v30, &v18, &v17);
      result.n128_u64[0] = v30.value;
      *a2 = v30;
    }
  }
  else if ((*(_DWORD *)(a1 + 612) & 0x1D) != 1)
  {
    v16 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)(a1 + 600) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a1 + 616) = *(_QWORD *)(v16 + 16);
  }
  return result;
}

void appendAttributesToDictionary(const void *key, const void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t FigStreamingLiveServerClockCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t TimeCallback;
  uint64_t DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  __int128 v8;
  CMTimeEpoch epoch;
  CMTime v11;
  CMTime v12;
  CFTypeRef v13;

  v13 = 0;
  if (!a3)
    return FigSignalErrorAt();
  CMClockGetHostTimeClock();
  CMTimeMake(&v12, 0, 1);
  TimeCallback = FigDerivedClockCreateWithGetTimeCallback();
  if ((_DWORD)TimeCallback)
  {
    if (v13)
      CFRelease(v13);
  }
  else
  {
    DerivedStorage = FigDerivedClockGetDerivedStorage();
    *(_QWORD *)DerivedStorage = 0x3FF0000000000000;
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v11, HostTimeClock);
    v8 = *(_OWORD *)&v11.value;
    epoch = v11.epoch;
    *(_QWORD *)(DerivedStorage + 24) = v11.epoch;
    *(_OWORD *)(DerivedStorage + 8) = v8;
    *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)(DerivedStorage + 8);
    *(_QWORD *)(DerivedStorage + 48) = epoch;
    *(_QWORD *)(DerivedStorage + 56) = a2;
    *(_QWORD *)(DerivedStorage + 64) = FigReentrantMutexCreate();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    TimeCallback = 0;
    *a3 = v13;
  }
  return TimeCallback;
}

uint64_t fslscHandleRateDelta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  double v8;
  __int128 v9;
  CMTime v11;
  CMTime v12;
  double v13;

  v13 = 0.0;
  DerivedStorage = FigDerivedClockGetDerivedStorage();
  memset(&v12, 0, sizeof(v12));
  memset(&v11, 0, sizeof(v11));
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 64));
  if (a5)
  {
    fslscGetAnchorTime(a2, &v12, &v11);
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      v8 = v13;
    }
    else
    {
      if (!FigCFDictionaryGetDoubleIfPresent())
      {
LABEL_7:
        v9 = *(_OWORD *)&v12.value;
        *(_QWORD *)(DerivedStorage + 24) = v12.epoch;
        *(_OWORD *)(DerivedStorage + 8) = v9;
        *(CMTime *)(DerivedStorage + 32) = v11;
        return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 64));
      }
      v8 = v13 + *(double *)DerivedStorage;
    }
    *(double *)DerivedStorage = v8;
    goto LABEL_7;
  }
  return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 64));
}

CFStringRef fslscCopyDebugDesc(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;

  DerivedStorage = (_QWORD *)FigDerivedClockGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("LowLatencyServerClock(minder = %p, Rate = %f)"), DerivedStorage[7], *DerivedStorage);
}

uint64_t fslscFinalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = FigDerivedClockGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  result = *(_QWORD *)(DerivedStorage + 64);
  if (result)
    return FigSimpleMutexDestroy();
  return result;
}

BOOL fslscMightDrift()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (!FigDerivedClockVerifyCallbacksMatch())
    return 1;
  if (!FigDerivedClockVerifyCallbacksMatch())
    return 1;
  DerivedStorage = FigDerivedClockGetDerivedStorage();
  v1 = FigDerivedClockGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 56);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v1 + 56);
  if (v3)
    v4 = v2 == v3;
  else
    v4 = 0;
  return !v4;
}

double fslscGetRate()
{
  double *DerivedStorage;
  double v1;

  DerivedStorage = (double *)FigDerivedClockGetDerivedStorage();
  MEMORY[0x19402EA0C](*((_QWORD *)DerivedStorage + 8));
  v1 = *DerivedStorage;
  MEMORY[0x19402EA24](*((_QWORD *)DerivedStorage + 8));
  return v1;
}

uint64_t fslscGetAnchorTime(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  __int128 v7;
  CMTime v9;
  CMTime time;
  CMTime rhs;
  CMTime lhs;
  CMTime v13;

  DerivedStorage = FigDerivedClockGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 64));
  memset(&v13, 0, sizeof(v13));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v13, HostTimeClock);
  if (a2)
  {
    lhs = v13;
    v9 = *(CMTime *)(DerivedStorage + 32);
    CMTimeSubtract(&time, &lhs, &v9);
    CMTimeMultiplyByFloat64(&rhs, &time, *(Float64 *)DerivedStorage);
    v7 = *(_OWORD *)(DerivedStorage + 8);
    v9.epoch = *(_QWORD *)(DerivedStorage + 24);
    *(_OWORD *)&v9.value = v7;
    CMTimeAdd(&lhs, &v9, &rhs);
    *a2 = lhs;
  }
  if (a3)
    *a3 = v13;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 64));
  return 0;
}

uint64_t FigContentKeySessionGetClassID()
{
  MEMORY[0x19402F294](&FigContentKeySessionGetClassID_sRegisterFigContentKeySessionTypeOnce, RegisterFigContentKeySessionType);
  return sFigContentKeySessionClassID;
}

uint64_t RegisterFigContentKeySessionType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigContentKeySessionGetTypeID()
{
  MEMORY[0x19402F294](&FigContentKeySessionGetClassID_sRegisterFigContentKeySessionTypeOnce, RegisterFigContentKeySessionType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigContentKeySessionCreateWithCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a6
    || (*a6 = 0,
        MEMORY[0x19402F294](&FigContentKeySessionGetClassID_sRegisterFigContentKeySessionTypeOnce, RegisterFigContentKeySessionType), v7 = CMDerivedObjectCreate(), !(_DWORD)v7))
  {
    v7 = FigSignalErrorAt();
  }
  v10 = v7;
  if (dword_1EE2A29A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v10;
}

uint64_t FigContentKeySessionCreate(uint64_t a1, _QWORD *a2)
{
  return FigContentKeySessionCreateWithCallbacks(a1, 0, 0, 0, 0, a2);
}

CFStringRef FigContentKeySessionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigContentKeySession %p]"), a1);
}

uint64_t fcks_invalidate()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  void (*v3)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A29A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (!*(_BYTE *)DerivedStorage)
  {
    v2 = *(_QWORD *)(DerivedStorage + 16);
    if (v2)
    {
      v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v3)
        v3(v2);
    }
    *(_BYTE *)DerivedStorage = 1;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return 0;
}

uint64_t fcks_finalize(const void *a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[5]);
  fcks_freeAllCryptorEntries(a1);
  fcks_removeListenersForSecureStopGenerationOnDefaultManager((uint64_t)a1);
  if (a1 && DerivedStorage[21])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  v3 = (const void *)DerivedStorage[1];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[1] = 0;
  }
  v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
  v5 = (const void *)DerivedStorage[3];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[3] = 0;
  }
  v6 = (const void *)DerivedStorage[4];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[4] = 0;
  }
  v7 = (const void *)DerivedStorage[6];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[6] = 0;
  }
  v8 = DerivedStorage[8];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[8] = 0;
  }
  v9 = (const void *)DerivedStorage[15];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[15] = 0;
  }
  v10 = (const void *)DerivedStorage[18];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[18] = 0;
  }
  v11 = (const void *)DerivedStorage[19];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[19] = 0;
  }
  v12 = (const void *)DerivedStorage[20];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[20] = 0;
  }
  v13 = (const void *)DerivedStorage[21];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[21] = 0;
  }
  v14 = (const void *)DerivedStorage[22];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[22] = 0;
  }
  MEMORY[0x19402EF04](DerivedStorage[5]);
  return FigSimpleMutexDestroy();
}

__CFString *fcks_copyDebugDescription(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigContentKeySession %p retainCount: %ld%s allocator: %p, "), a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t fcks_copyProperty(const void *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v12;
  CFTypeRef *v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t (*v24)(const void *, const __CFString *, uint64_t, CFTypeRef *);
  int v25;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  *a4 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)v9)
    goto LABEL_31;
  if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA3098], a2))
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
      goto LABEL_38;
    v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (!v11)
    {
      v10 = 4294954514;
      goto LABEL_38;
    }
    v12 = v11(v10, CFSTR("SessionID"), a3, a4);
LABEL_8:
    v10 = v12;
    goto LABEL_38;
  }
  if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA3090], a2))
  {
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_34;
LABEL_11:
    v13 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    goto LABEL_35;
  }
  if (CFEqual(CFSTR("kFigCKSPropertyKey_SecureStopManager"), a2))
  {
    v12 = fcks_ensureSecureStopManager(a1);
    if (!(_DWORD)v12)
    {
      v14 = *(CFTypeRef *)(v9 + 168);
      if (v14)
        goto LABEL_36;
      goto LABEL_37;
    }
    goto LABEL_8;
  }
  if (!CFEqual(CFSTR("kFigCKSPropertyKey_ShouldProvideFPSSecureStop"), a2))
  {
LABEL_31:
    v12 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v15 = CMBaseObjectGetDerivedStorage();
  v16 = *(_QWORD *)(v15 + 152);
  LODWORD(v17) = v16 != 0;
  v18 = *(const __CFArray **)(v15 + 8);
  if (!v18 || (Count = CFArrayGetCount(v18), v16) || (v20 = Count, Count < 1))
  {
LABEL_29:
    if (!(_DWORD)v17)
      goto LABEL_34;
    goto LABEL_11;
  }
  v21 = *MEMORY[0x1E0C9AE00];
  v22 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v23 = 1;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v15 + 8), v23 - 1);
    v17 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v17)
      goto LABEL_27;
    cf = 0;
    v24 = *(uint64_t (**)(const void *, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (!v24)
      break;
    v25 = v24(v17, CFSTR("kFigCKSPropertyKey_ShouldProvideFPSSecureStop"), v21, &cf);
    CFRelease(v17);
    if (v25)
      goto LABEL_33;
    LODWORD(v17) = v22 == cf;
    if (cf)
      CFRelease(cf);
LABEL_27:
    if (!(_DWORD)v17 && v23++ < v20)
      continue;
    goto LABEL_29;
  }
  CFRelease(v17);
LABEL_33:
  FigSignalErrorAt();
LABEL_34:
  v13 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_35:
  v14 = *v13;
LABEL_36:
  v14 = CFRetain(v14);
LABEL_37:
  v10 = 0;
  *a4 = v14;
LABEL_38:
  MEMORY[0x19402EF04](*(_QWORD *)(v9 + 40));
  return v10;
}

uint64_t fcks_setProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID v8;
  const void *v9;
  const __CFArray *v10;
  const __CFArray *Copy;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  CFTypeID TypeID;
  int v20;
  const void *Value;
  const void *v22;
  CFTypeID v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  CFTypeID v30;
  const void *v31;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    v7 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
    if (*(_BYTE *)v7)
      goto LABEL_42;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3088]))
    {
      v8 = CFGetTypeID(a3);
      if (v8 == CFDataGetTypeID())
      {
        if (!FigCFEqual())
        {
          v9 = *(const void **)(v7 + 48);
          *(_QWORD *)(v7 + 48) = a3;
          CFRetain(a3);
          if (v9)
            CFRelease(v9);
          fcks_resetSessionGuts(a1);
          v10 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
          if (v10)
          {
            Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10);
            if (Copy)
            {
              v12 = Copy;
              Count = CFArrayGetCount(Copy);
              if (Count < 1)
              {
LABEL_16:
                v18 = 0;
              }
              else
              {
                v14 = Count;
                v15 = 0;
                while (1)
                {
                  CFArrayGetValueAtIndex(v12, v15);
                  v16 = FigCFWeakReferenceHolderCopyReferencedObject();
                  if (v16)
                  {
                    v17 = (const void *)v16;
                    v18 = fcks_setClientAuditTokenForChildSession((uint64_t)a1, v16, (uint64_t)a3);
                    CFRelease(v17);
                    if ((_DWORD)v18)
                      break;
                  }
                  if (v14 == ++v15)
                    goto LABEL_16;
                }
              }
              CFRelease(v12);
              goto LABEL_41;
            }
            goto LABEL_42;
          }
        }
        goto LABEL_40;
      }
LABEL_42:
      v25 = FigSignalErrorAt();
LABEL_43:
      v18 = v25;
      goto LABEL_41;
    }
    if (CFEqual(a2, CFSTR("kFigCKSPropertyKey_SendToNero")))
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("kFigCKSPropertyKeySendToNero_Visuals"));
        v20 = FigCFEqual();
        if (v20 != *(unsigned __int8 *)(v7 + 56))
        {
          *(_BYTE *)(v7 + 56) = v20;
          if (v20)
          {
            Value = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("kFigCKSPropertyKeySendToNero_NeroTransport"));
            if (Value)
            {
              v22 = *(const void **)(v7 + 144);
              *(_QWORD *)(v7 + 144) = Value;
              CFRetain(Value);
              if (v22)
                CFRelease(v22);
            }
          }
          else
          {
            v31 = *(const void **)(v7 + 144);
            if (v31)
            {
              CFRelease(v31);
              *(_QWORD *)(v7 + 144) = 0;
            }
          }
          fcks_resetSessionGuts(a1);
        }
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3080]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA30A0]))
        {
          v30 = CFGetTypeID(a3);
          if (v30 == CFBooleanGetTypeID())
          {
            v18 = 0;
            *(_BYTE *)(v7 + 184) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
LABEL_41:
            MEMORY[0x19402EF04](*(_QWORD *)(v7 + 40));
            return v18;
          }
        }
        goto LABEL_42;
      }
      v23 = CFGetTypeID(a3);
      if (v23 != CFDataGetTypeID())
        goto LABEL_42;
      if (!*(_QWORD *)(v7 + 160))
        goto LABEL_30;
      if (!FigCFEqual())
        goto LABEL_42;
      if (!*(_QWORD *)(v7 + 160))
      {
LABEL_30:
        *(_QWORD *)(v7 + 160) = CFRetain(a3);
        if (*(_QWORD *)(v7 + 152))
        {
          v24 = (_QWORD *)CMBaseObjectGetDerivedStorage();
          v25 = fcks_ensureSecureStopManager(a1);
          if (!(_DWORD)v25)
          {
            v27 = v24[20];
            v26 = v24[21];
            v28 = v24[19];
            v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (!v29)
            {
              v18 = 4294954514;
              goto LABEL_41;
            }
            v25 = v29(v26, v27, v28);
          }
          goto LABEL_43;
        }
      }
    }
LABEL_40:
    v18 = 0;
    goto LABEL_41;
  }
  return FigSignalErrorAt();
}

void fcks_freeAllCryptorEntries(const void *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 128);
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 8);
      fcks_freeCryptorEntry(a1, v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t fcks_removeListenersForSecureStopGenerationOnDefaultManager(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 0;
  v1 = FigSecureStopManagerCopyDefaultRuntimeInstance(*MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v1)
    goto LABEL_5;
  if (!cf)
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  v1 = FigNotificationCenterRemoveWeakListener();
LABEL_5:
  v2 = v1;
  if (cf)
    CFRelease(cf);
  return v2;
}

void fcks_freeCryptorEntry(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  _QWORD *v8;
  const __CFAllocator *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  v6 = (const void *)v5;
  if (a1 && v5)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    if (!FigNotificationCenterRemoveWeakListener())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      if (!FigNotificationCenterRemoveWeakListener())
      {
        CMNotificationCenterGetDefaultLocalCenter();
        if (!FigNotificationCenterRemoveWeakListener())
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
        }
      }
    }
    goto LABEL_7;
  }
  if (v5)
LABEL_7:
    CFRelease(v6);
  if (*(_QWORD *)a2)
  {
    CFRelease(*(CFTypeRef *)a2);
    *(_QWORD *)a2 = 0;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD **)(a2 + 16);
  if (v7)
  {
    *(_QWORD *)(v7 + 16) = v8;
    v8 = *(_QWORD **)(a2 + 16);
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 136) = v8;
  }
  *v8 = v7;
  v9 = CFGetAllocator(a1);
  CFAllocatorDeallocate(v9, (void *)a2);
}

void fcks_persistentKeyUpdatedCallback(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const __CFDictionary *a5)
{
  CFTypeRef v6;
  uint64_t (*v8)(CFTypeRef, _QWORD, _QWORD, CFDictionaryRef *);
  int v9;
  CFDictionaryRef v10;
  const void *Value;
  const void *v12;
  CFTypeRef v13;
  const void *v14;
  void (*v15)(uint64_t, CFTypeRef, const void *);
  CFDictionaryRef theDict;

  if (a5)
  {
    v6 = a4;
    theDict = 0;
    if (a4)
    {
      v8 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
      if (!v8)
        return;
      v9 = v8(v6, *MEMORY[0x1E0CA31B0], *MEMORY[0x1E0C9AE00], &theDict);
      v10 = theDict;
      if (v9)
      {
        v6 = 0;
        if (theDict)
LABEL_9:
          CFRelease(v10);
      }
      else
      {
        Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA3030]);
        if (Value)
          v6 = CFRetain(Value);
        else
          v6 = 0;
        v10 = theDict;
        if (theDict)
          goto LABEL_9;
      }
    }
    else
    {
      v9 = FigSignalErrorAt();
    }
    if (!v9)
    {
      v12 = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA3188]);
      if (v12)
      {
        v13 = CFRetain(v12);
        if (v13)
        {
          v14 = v13;
          v15 = *(void (**)(uint64_t, CFTypeRef, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 48);
          if (v15)
            v15(a2, v6, v14);
          if (!v6)
            goto LABEL_17;
          goto LABEL_16;
        }
      }
      FigSignalErrorAt();
    }
    v14 = 0;
    if (!v6)
    {
LABEL_17:
      if (v14)
        CFRelease(v14);
      return;
    }
LABEL_16:
    CFRelease(v6);
    goto LABEL_17;
  }
}

void fcks_keyResponseErrorOccurredCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  unsigned int (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const void *Value;
  CFTypeRef v10;
  const void *v11;
  CFTypeRef v12;
  void (*v13)(uint64_t, CFTypeRef, _QWORD, const void *);
  CFTypeRef cf;

  cf = 0;
  if (!a5)
    return;
  v8 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v8 && !v8(a4, *MEMORY[0x1E0CA3230], *MEMORY[0x1E0C9AE00], &cf))
  {
    if (FigCFDictionaryGetInt64IfPresent())
    {
      Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA3128]);
      if (Value)
      {
        v10 = CFRetain(Value);
        if (v10)
        {
          v11 = v10;
          v12 = cf;
          v13 = *(void (**)(uint64_t, CFTypeRef, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 32);
          if (v13)
            v13(a2, v12, 0, v11);
          goto LABEL_11;
        }
      }
    }
    FigSignalErrorAt();
  }
  v11 = 0;
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
}

void fcks_keyResponseSuccessfullyProcessedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v8;
  void (*v9)(uint64_t, CFTypeRef, _QWORD);
  CFTypeRef cf;

  cf = 0;
  if (a5)
  {
    v7 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v7 && !v7(a4, *MEMORY[0x1E0CA3230], *MEMORY[0x1E0C9AE00], &cf))
    {
      if (FigCFDictionaryGetInt64IfPresent())
      {
        v8 = cf;
        v9 = *(void (**)(uint64_t, CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v9)
          v9(a2, v8, 0);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    if (cf)
      CFRelease(cf);
  }
}

void fcks_externalProtectionStateChangedCallback(int a1, int a2, int a3, CFTypeRef cf, uint64_t a5)
{
  CFTypeID v5;
  CFTypeRef cfa;

  cfa = 0;
  if (a5)
  {
    if (cf && (v5 = CFGetTypeID(cf), v5 == FigCPECryptorGetTypeID()))
      FigCFDictionaryGetInt32IfPresent();
    else
      FigSignalErrorAt();
  }
}

uint64_t fcks_secureStopDidFinalizeRecordCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t);

  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 56);
  if (v4)
    return v4(a2);
  return result;
}

uint64_t fcks_ensureSecureStopManager(const void *a1)
{
  _QWORD *v2;
  CFAllocatorRef v3;
  uint64_t result;

  v2 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 168);
  if (*v2)
    return 0;
  v3 = CFGetAllocator(a1);
  result = FigSecureStopManagerCreate((uint64_t)v3, v2);
  if (!(_DWORD)result)
  {
    if (!a1)
      return fcks_removeListenersForSecureStopGenerationOnDefaultManager((uint64_t)a1);
    if (!*v2)
      return fcks_removeListenersForSecureStopGenerationOnDefaultManager((uint64_t)a1);
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterAddWeakListener();
    if (!(_DWORD)result)
      return fcks_removeListenersForSecureStopGenerationOnDefaultManager((uint64_t)a1);
  }
  return result;
}

void fcks_resetSessionGuts(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fcks_freeAllCryptorEntries(a1);
  v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

uint64_t fcks_setClientAuditTokenForChildSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  if (FigCFEqual())
  {
    v6 = 0;
    goto LABEL_9;
  }
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v7)
  {
    v8 = v7(a2);
    if ((_DWORD)v8)
    {
LABEL_7:
      v6 = v8;
      goto LABEL_9;
    }
    v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v9)
    {
      v8 = v9(a2, *MEMORY[0x1E0CA3088], a3);
      goto LABEL_7;
    }
  }
  v6 = 4294954514;
LABEL_9:
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  else
    return v6;
}

uint64_t fcks_addChildSession(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  CFAllocatorRef v7;
  uint64_t (*v8)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[23];

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (a2 && a1 != (const void *)a2)
  {
    v5 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
    if (!*(_BYTE *)v5)
    {
      v6 = fcks_setClientAuditTokenForChildSession((uint64_t)a1, a2, *(_QWORD *)(v5 + 48));
      if ((_DWORD)v6)
        goto LABEL_22;
      v7 = CFGetAllocator(a1);
      v8 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
      if (!v8)
      {
        v13 = 4294954514;
        goto LABEL_14;
      }
      v6 = v8(a2, CFSTR("kFigCKSPropertyKey_SecureStopManager"), v7, cf);
      if ((_DWORD)v6)
      {
LABEL_22:
        v13 = v6;
        goto LABEL_14;
      }
      v9 = *(const void **)(v5 + 168);
      v10 = cf[0];
      *(CFTypeRef *)(v5 + 168) = cf[0];
      if (v10)
        CFRetain(v10);
      if (v9)
        CFRelease(v9);
      v11 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (v11)
      {
        v12 = v11;
        CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 8), v11);
        CFRelease(v12);
        v13 = 0;
LABEL_14:
        MEMORY[0x19402EF04](*(_QWORD *)(v5 + 40));
        goto LABEL_15;
      }
    }
    v6 = FigSignalErrorAt();
    goto LABEL_22;
  }
  v13 = FigSignalErrorAt();
LABEL_15:
  if (dword_1EE2A29A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0])
    CFRelease(cf[0]);
  return v13;
}

uint64_t fcks_copyCryptor(const void *a1, const __CFAllocator *a2, const __CFDictionary *a3, int a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  const void *v11;
  int v12;
  const void **v13;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v15;
  CFTypeRef v16;
  const __CFArray *Value;
  const opaqueCMFormatDescription *v18;
  uint64_t v19;
  const __CFDictionary *v20;
  const __CFArray *v21;
  uint64_t v22;
  CFTypeRef v23;
  uint64_t Base64EncodedStringFromCFData;
  CFTypeRef v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  const __CFArray *v30;
  CFArrayRef Copy;
  const __CFArray *v32;
  CFIndex Count;
  CFIndex v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t (*v38)(const void *, _QWORD, const __CFDictionary *, _QWORD, _BYTE *);
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(const void *, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const __CFAllocator *v53;
  __CFDictionary *v54;
  __CFDictionary *v55;
  __CFDictionary *v56;
  __CFDictionary *v57;
  const void *v58;
  _QWORD *v59;
  CFAllocatorRef v60;
  uint64_t v61;
  CFDictionaryRef v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, const __CFAllocator *, _QWORD, __CFDictionary *, CFTypeRef *);
  uint64_t v65;
  const void *v66;
  const __CFAllocator *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const void *v76;
  NSObject *v77;
  __CFDictionary *Mutable;
  const void *v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, const __CFString *, uint64_t);
  uint64_t v85;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v87;
  unsigned int v88;
  unsigned int v89;
  CFTypeRef v90;
  uint64_t v92;
  uint64_t v93;
  CFTypeRef *v94;
  int v95;
  uint64_t v96;
  CFTypeRef v98;
  char v99;
  os_log_type_t type[4];
  _BYTE v101[12];
  __int16 v102;
  const void *v103;
  __int16 v104;
  CFTypeRef v105;
  __int16 v106;
  const void *v107;
  __int16 v108;
  int v109;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3 || !a5)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  v95 = a4;
  *a5 = 0;
  v11 = (const void *)*MEMORY[0x1E0CA3060];
  v12 = CFDictionaryContainsKey(a3, (const void *)*MEMORY[0x1E0CA3060]);
  v13 = (const void **)MEMORY[0x1E0CA3050];
  v96 = (uint64_t)a3;
  if (v12 || CFDictionaryContainsKey(a3, (const void *)*MEMORY[0x1E0CA3050]))
  {
    MutableCopy = CFDictionaryCreateMutableCopy(a2, 0, a3);
    if (!MutableCopy)
    {
      v26 = FigSignalErrorAt();
      v20 = 0;
      if ((_DWORD)v26)
        goto LABEL_146;
      goto LABEL_31;
    }
    v15 = MutableCopy;
    if (CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x1E0CA3048]))
    {
      v16 = 0;
      goto LABEL_15;
    }
    Value = (const __CFArray *)CFDictionaryGetValue(a3, v11);
    v18 = (const opaqueCMFormatDescription *)CFDictionaryGetValue(a3, *v13);
    cf[0] = 0;
    if (v18)
    {
      v19 = PKDCopyDecryptFormatTypeFromFormatDescription(v18, cf);
      if ((_DWORD)v19)
      {
LABEL_174:
        v26 = v19;
        if (cf[0])
          CFRelease(cf[0]);
        v20 = 0;
        goto LABEL_29;
      }
    }
    else if (Value)
    {
      v19 = PKDCopyDecryptFormatTypeFromSinfArray(Value, cf);
      if ((_DWORD)v19)
        goto LABEL_174;
    }
    v16 = cf[0];
    FigCFDictionarySetValue();
LABEL_15:
    if (!CFDictionaryContainsKey(a3, v11))
    {
      v23 = 0;
      v25 = 0;
LABEL_22:
      CFDictionaryRemoveValue(v15, v11);
      CFDictionaryRemoveValue(v15, *v13);
      v26 = 0;
      v20 = v15;
      v15 = 0;
      if (!v16)
        goto LABEL_24;
      goto LABEL_23;
    }
    v21 = (const __CFArray *)CFDictionaryGetValue(a3, v11);
    cf[0] = 0;
    if (v21)
    {
      v22 = PKDCopyDefaultKeyIDFromSinfArray(v21, (CFDataRef *)cf);
      v23 = cf[0];
      if ((_DWORD)v22)
      {
        v26 = v22;
        if (cf[0])
          CFRelease(cf[0]);
        v20 = 0;
        v23 = 0;
        goto LABEL_164;
      }
      cf[0] = 0;
      if (v23)
      {
        Base64EncodedStringFromCFData = FigCreateBase64EncodedStringFromCFData();
        v25 = cf[0];
        if (!(_DWORD)Base64EncodedStringFromCFData)
        {
LABEL_20:
          FigCFDictionarySetValue();
          goto LABEL_22;
        }
        v26 = Base64EncodedStringFromCFData;
        if (cf[0])
          CFRelease(cf[0]);
        v20 = 0;
LABEL_164:
        v25 = 0;
        if (!v16)
        {
LABEL_24:
          if (v23)
            CFRelease(v23);
          if (v25)
            CFRelease(v25);
          if (!v15)
          {
LABEL_30:
            if ((_DWORD)v26)
              goto LABEL_146;
            goto LABEL_31;
          }
LABEL_29:
          CFRelease(v15);
          goto LABEL_30;
        }
LABEL_23:
        CFRelease(v16);
        goto LABEL_24;
      }
    }
    else
    {
      v23 = 0;
    }
    v25 = 0;
    goto LABEL_20;
  }
  v20 = (const __CFDictionary *)CFRetain(a3);
LABEL_31:
  MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 40));
  if (*(_BYTE *)v10)
  {
    v26 = FigSignalErrorAt();
    goto LABEL_151;
  }
  v27 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v101 = 0;
  LOBYTE(v98) = 0;
  *a5 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  if ((_BYTE)v98)
  {
    if (*(_QWORD *)(v27 + 24))
    {
      v28 = FigCFWeakReferenceHolderCopyReferencedObject();
      *(_QWORD *)v101 = v28;
      if (v28)
      {
        v29 = (const void *)v28;
        v26 = 0;
        goto LABEL_72;
      }
    }
  }
  v30 = *(const __CFArray **)(v27 + 8);
  if (!v30)
  {
    v26 = 0;
LABEL_57:
    v41 = CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    v42 = *(_QWORD *)(v41 + 128);
    if (v42)
    {
      v43 = *MEMORY[0x1E0CA31B0];
      v44 = *MEMORY[0x1E0C9AE00];
      do
      {
        while (1)
        {
          v45 = v42;
          v42 = *(_QWORD *)(v42 + 8);
          v46 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v46)
            break;
          fcks_freeCryptorEntry(a1, v45);
          if (!v42)
            goto LABEL_68;
        }
        v29 = (const void *)v46;
        v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v47 && !v47(v29, v43, v44, cf) && FigCFEqual())
          goto LABEL_69;
        CFRelease(v29);
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
      }
      while (v42);
LABEL_68:
      v29 = 0;
LABEL_69:
      if (cf[0])
        CFRelease(cf[0]);
    }
    else
    {
      v29 = 0;
    }
LABEL_72:
    *a5 = v29;
    if ((_DWORD)v26)
      goto LABEL_151;
    goto LABEL_73;
  }
  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v30);
  if (!Copy)
    goto LABEL_168;
  v32 = Copy;
  MEMORY[0x19402EF04](*(_QWORD *)(v27 + 40));
  Count = CFArrayGetCount(v32);
  if (Count < 1)
  {
    v26 = 0;
    goto LABEL_55;
  }
  v34 = Count;
  v35 = 1;
  while (1)
  {
    CFArrayGetValueAtIndex(v32, v35 - 1);
    v36 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v36)
      break;
LABEL_47:
    if (*(_QWORD *)v101)
      v40 = 0;
    else
      v40 = v35 < v34;
    ++v35;
    if (!v40)
    {
      v26 = 0;
      goto LABEL_55;
    }
  }
  v37 = (const void *)v36;
  v38 = *(uint64_t (**)(const void *, _QWORD, const __CFDictionary *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
  if (v38)
  {
    v26 = v38(v37, 0, v20, 0, v101);
    CFRelease(v37);
    if ((_DWORD)v26)
      v39 = (_DWORD)v26 == -17293;
    else
      v39 = 1;
    if (!v39)
      goto LABEL_55;
    goto LABEL_47;
  }
  CFRelease(v37);
  v26 = 4294954514;
LABEL_55:
  CFRelease(v32);
  MEMORY[0x19402EEEC](*(_QWORD *)(v27 + 40));
  if (!*(_BYTE *)v27)
  {
    v29 = *(const void **)v101;
    if (!*(_QWORD *)v101)
      goto LABEL_57;
    goto LABEL_72;
  }
LABEL_168:
  v26 = FigSignalErrorAt();
  if ((_DWORD)v26)
  {
LABEL_151:
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 40));
    goto LABEL_146;
  }
LABEL_73:
  if (v95 && !*a5)
  {
    *(_DWORD *)type = 1;
    v99 = 0;
    v98 = 0;
    v48 = CMBaseObjectGetDerivedStorage();
    v49 = CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E0CA3058]);
    v93 = v10;
    if (!v49)
      goto LABEL_154;
    v50 = v49;
    v51 = *(const void **)(v48 + 32);
    if (!v51)
      goto LABEL_79;
    if (CFEqual(v49, v51))
    {
      if (!*(_QWORD *)(v48 + 32))
LABEL_79:
        *(_QWORD *)(v48 + 32) = CFRetain(v50);
      v52 = CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E0CA3048]);
      v53 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v94 = a5;
      if (*(_QWORD *)(v48 + 16))
      {
        v54 = 0;
        goto LABEL_82;
      }
      Mutable = CFDictionaryCreateMutable(v53, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v54 = Mutable;
      if (Mutable)
      {
        v79 = (const void *)*MEMORY[0x1E0C9AE40];
        if (*(_BYTE *)(v48 + 56))
          v80 = (const void *)*MEMORY[0x1E0C9AE40];
        else
          v80 = (const void *)*MEMORY[0x1E0C9AE50];
        CFDictionarySetValue(Mutable, CFSTR("ExternalProtectionMonitorPerCryptor"), v80);
        if (!*(_BYTE *)(v48 + 184))
        {
          CFDictionarySetValue(v54, CFSTR("RequiresReencryptionContext"), v79);
          if (!*(_BYTE *)(v48 + 184))
            CFDictionarySetValue(v54, CFSTR("RequiresReencryptionContext"), v79);
        }
        v81 = FigCPEProtectorCreateForScheme((uint64_t)a2, v50, (uint64_t)v54, v48 + 16);
        if ((_DWORD)v81)
        {
          v26 = v81;
          v62 = 0;
          v56 = 0;
          goto LABEL_125;
        }
        v82 = *(_QWORD *)(v48 + 16);
        v83 = *(_QWORD *)(v48 + 144);
        v84 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
        if (!v84)
        {
          v62 = 0;
          v56 = 0;
          v26 = 4294954514;
          goto LABEL_127;
        }
        v85 = v84(v82, CFSTR("NeroTransport"), v83);
        if (!(_DWORD)v85)
        {
          if (dword_1EE2A29A8 >= 2)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_82:
          v55 = CFDictionaryCreateMutable(v53, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v56 = v55;
          if (!v55)
          {
            v26 = FigSignalErrorAt();
            v62 = 0;
            goto LABEL_127;
          }
          if (v52)
            CFDictionarySetValue(v55, CFSTR("FormatType"), v52);
          v57 = v54;
          v58 = *(const void **)(v48 + 48);
          if (v58)
            CFDictionarySetValue(v56, CFSTR("AuditToken"), v58);
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionaryGetInt32IfPresent();
          v59 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 168);
          if (!*v59
            && (v60 = CFGetAllocator(a1),
                v61 = FigSecureStopManagerCopyDefaultRuntimeInstance((uint64_t)v60, v59),
                (_DWORD)v61))
          {
            v26 = v61;
            v62 = 0;
          }
          else
          {
            FigCFDictionarySetValue();
            v62 = CFDictionaryCreateCopy(a2, v20);
            if (v62)
            {
              FigCFDictionarySetValue();
              v63 = *(_QWORD *)(v48 + 16);
              v64 = *(uint64_t (**)(uint64_t, const __CFAllocator *, _QWORD, __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
              v54 = v57;
              if (v64)
              {
                v65 = v64(v63, a2, *(unsigned int *)type, v56, &v98);
                a5 = v94;
                if ((_DWORD)v65)
                {
                  v26 = v65;
                }
                else
                {
                  FigCFDictionaryGetBooleanIfPresent();
                  if (v99)
                  {
                    v66 = *(const void **)(v48 + 24);
                    if (v66)
                      CFRelease(v66);
                    *(_QWORD *)(v48 + 24) = FigCFWeakReferenceHolderCreateWithReferencedObject();
                  }
                  v67 = CFGetAllocator(a1);
                  v68 = (uint64_t *)CFAllocatorAllocate(v67, 24, 0);
                  v69 = v68;
                  if (v68)
                  {
                    *v68 = 0;
                    v68[1] = 0;
                    v68[2] = 0;
                    v70 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                    *v69 = v70;
                    if (v70)
                    {
                      v69[1] = 0;
                      v71 = *(uint64_t ***)(v48 + 136);
                      v69[2] = (uint64_t)v71;
                      *v71 = v69;
                      *(_QWORD *)(v48 + 136) = v69 + 1;
                      goto LABEL_99;
                    }
                  }
                  v92 = FigSignalErrorAt();
                  if ((_DWORD)v92)
                  {
                    v26 = v92;
                    CFAllocatorDeallocate(v67, v69);
                    goto LABEL_127;
                  }
LABEL_99:
                  if (!a1 || !v98)
                    goto LABEL_109;
                  CMNotificationCenterGetDefaultLocalCenter();
                  v72 = FigNotificationCenterAddWeakListener();
                  if (!(_DWORD)v72 || (v26 = v72, (_DWORD)v72 == -12724))
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    v73 = FigNotificationCenterAddWeakListener();
                    if (!(_DWORD)v73 || (v26 = v73, (_DWORD)v73 == -12724))
                    {
                      CMNotificationCenterGetDefaultLocalCenter();
                      v74 = FigNotificationCenterAddWeakListener();
                      if (!(_DWORD)v74 || (v26 = v74, (_DWORD)v74 == -12724))
                      {
                        CMNotificationCenterGetDefaultLocalCenter();
                        v75 = FigNotificationCenterAddWeakListener();
                        if (!(_DWORD)v75 || (v26 = v75, (_DWORD)v75 == -12724))
                        {
LABEL_109:
                          v26 = 0;
                          *v94 = v98;
                          v98 = 0;
                          goto LABEL_130;
                        }
                      }
                    }
                  }
                }
LABEL_127:
                if (v98)
                  CFRelease(v98);
                if (v56)
LABEL_130:
                  CFRelease(v56);
                if (v54)
                  CFRelease(v54);
                if (v62)
                  CFRelease(v62);
                v10 = v93;
                if ((_DWORD)v26)
                  goto LABEL_151;
                PKDLogPrivateData(v96);
                v76 = (const void *)FigCFCopyCompactDescription();
                if (dword_1EE2A29A8)
                {
                  LODWORD(v98) = 0;
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  v87 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v88 = v98;
                  if (os_log_type_enabled(v87, type[0]))
                    v89 = v88;
                  else
                    v89 = v88 & 0xFFFFFFFE;
                  if (v89)
                  {
                    v90 = *a5;
                    *(_DWORD *)v101 = 136316162;
                    *(_QWORD *)&v101[4] = "fcks_copyCryptor";
                    v102 = 2048;
                    v103 = a1;
                    v104 = 2114;
                    v105 = v90;
                    v106 = 2114;
                    v107 = v76;
                    v108 = 1024;
                    v109 = 0;
                    _os_log_send_and_compose_impl();
                  }
LABEL_142:
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                goto LABEL_143;
              }
              v26 = 4294954514;
LABEL_125:
              a5 = v94;
              goto LABEL_127;
            }
            v26 = FigSignalErrorAt();
          }
          v54 = v57;
          goto LABEL_125;
        }
      }
      else
      {
        v85 = FigSignalErrorAt();
      }
      v26 = v85;
    }
    else
    {
LABEL_154:
      v26 = FigSignalErrorAt();
      v54 = 0;
    }
    v62 = 0;
    v56 = 0;
    goto LABEL_127;
  }
  PKDLogPrivateData(v96);
  v76 = (const void *)FigCFCopyCompactDescription();
  if (dword_1EE2A29A8)
  {
    LODWORD(v98) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
    goto LABEL_142;
  }
LABEL_143:
  MEMORY[0x19402EF04](*(_QWORD *)(v10 + 40));
  if (v76)
    CFRelease(v76);
  v26 = 0;
LABEL_146:
  if (v20)
    CFRelease(v20);
  return v26;
}

uint64_t fcks_resetSession(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)DerivedStorage)
  {
    v3 = FigSignalErrorAt();
  }
  else
  {
    fcks_resetSessionGuts(a1);
    v3 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  if (dword_1EE2A29A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v3;
}

uint64_t fcks_invokeKeyResponseErrorCallbackAsync(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *FigContentKeySessionCallbackContext;
  CFTypeRef *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFIndex i;
  const __CFArray *Count;
  uint64_t v14;
  const void *v15;
  uint64_t (*v16)(const void *, const void *, const void *, const void *);
  uint64_t v17;
  CFTypeRef *v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)DerivedStorage)
  {
    v17 = FigSignalErrorAt();
    if ((_DWORD)v17)
      goto LABEL_21;
    goto LABEL_22;
  }
  FigContentKeySessionCallbackContext = fcks_createFigContentKeySessionCallbackContext(DerivedStorage);
  v19 = FigContentKeySessionCallbackContext;
  if (FigContentKeySessionCallbackContext)
  {
    v9 = FigContentKeySessionCallbackContext;
    if (a2)
      v10 = CFRetain(a2);
    else
      v10 = 0;
    *v9 = v10;
    if (a4)
      v11 = CFRetain(a4);
    else
      v11 = 0;
    v9[3] = v11;
    v9[1] = a3;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 64), v9, (dispatch_function_t)fcks_dispatchKeyResponseErrorCallback);
  }
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 8);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
    {
      v17 = 0;
      goto LABEL_22;
    }
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), i);
    v14 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v14)
      continue;
    v15 = (const void *)v14;
    v16 = *(uint64_t (**)(const void *, const void *, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 32);
    if (!v16)
      break;
    v17 = v16(v15, a2, a3, a4);
    CFRelease(v15);
    if ((_DWORD)v17)
      goto LABEL_20;
  }
  CFRelease(v15);
  v17 = 4294954514;
LABEL_20:
  FigSignalErrorAt();
LABEL_21:
  fcks_releaseAndClearFigContentKeySessionCallbackContext(&v19);
LABEL_22:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return v17;
}

uint64_t fcks_invokeKeyResponseSuccessfullyProcessedCallbackAsync(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeRef *FigContentKeySessionCallbackContext;
  CFTypeRef *v7;
  CFTypeRef v8;
  CFIndex i;
  const __CFArray *Count;
  uint64_t v11;
  const void *v12;
  uint64_t (*v13)(const void *, const void *, const void *);
  uint64_t v14;
  CFTypeRef *v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)DerivedStorage)
  {
    v14 = FigSignalErrorAt();
    if ((_DWORD)v14)
      goto LABEL_18;
    goto LABEL_19;
  }
  FigContentKeySessionCallbackContext = fcks_createFigContentKeySessionCallbackContext(DerivedStorage);
  v16 = FigContentKeySessionCallbackContext;
  if (FigContentKeySessionCallbackContext)
  {
    v7 = FigContentKeySessionCallbackContext;
    if (a2)
      v8 = CFRetain(a2);
    else
      v8 = 0;
    *v7 = v8;
    v7[1] = a3;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 64), v7, (dispatch_function_t)fcks_dispatchKeyResponseSuccessfullyProcessedCallback);
  }
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 8);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
    {
      v14 = 0;
      goto LABEL_19;
    }
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), i);
    v11 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v11)
      continue;
    v12 = (const void *)v11;
    v13 = *(uint64_t (**)(const void *, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 40);
    if (!v13)
      break;
    v14 = v13(v12, a2, a3);
    CFRelease(v12);
    if ((_DWORD)v14)
      goto LABEL_17;
  }
  CFRelease(v12);
  v14 = 4294954514;
LABEL_17:
  FigSignalErrorAt();
LABEL_18:
  fcks_releaseAndClearFigContentKeySessionCallbackContext(&v16);
LABEL_19:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return v14;
}

uint64_t fcks_invokePersistentKeyUpdatedCallbackAsync(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeRef *FigContentKeySessionCallbackContext;
  CFTypeRef *v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFIndex i;
  const __CFArray *Count;
  uint64_t v12;
  const void *v13;
  uint64_t (*v14)(const void *, const void *, const void *);
  uint64_t v15;
  CFTypeRef *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)DerivedStorage)
  {
    v15 = FigSignalErrorAt();
    if ((_DWORD)v15)
      goto LABEL_21;
    goto LABEL_22;
  }
  FigContentKeySessionCallbackContext = fcks_createFigContentKeySessionCallbackContext(DerivedStorage);
  v17 = FigContentKeySessionCallbackContext;
  if (FigContentKeySessionCallbackContext)
  {
    v7 = FigContentKeySessionCallbackContext;
    if (a2)
      v8 = CFRetain(a2);
    else
      v8 = 0;
    v7[2] = v8;
    if (a3)
      v9 = CFRetain(a3);
    else
      v9 = 0;
    v7[4] = v9;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 64), v7, (dispatch_function_t)fcks_dispatchPersistentKeyUpdatedCallback);
  }
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 8);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
    {
      v15 = 0;
      goto LABEL_22;
    }
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), i);
    v12 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v12)
      continue;
    v13 = (const void *)v12;
    v14 = *(uint64_t (**)(const void *, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 48);
    if (!v14)
      break;
    v15 = v14(v13, a2, a3);
    CFRelease(v13);
    if ((_DWORD)v15)
      goto LABEL_20;
  }
  CFRelease(v13);
  v15 = 4294954514;
LABEL_20:
  FigSignalErrorAt();
LABEL_21:
  fcks_releaseAndClearFigContentKeySessionCallbackContext(&v17);
LABEL_22:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return v15;
}

uint64_t fcks_invokeSecureStopDidFinalizeRecordCallbackAsync()
{
  uint64_t DerivedStorage;
  CFTypeRef *FigContentKeySessionCallbackContext;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  FigContentKeySessionCallbackContext = fcks_createFigContentKeySessionCallbackContext(DerivedStorage);
  if (FigContentKeySessionCallbackContext)
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 64), FigContentKeySessionCallbackContext, (dispatch_function_t)fcks_dispatchSecureStopDidFinalizeRecordCallback);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return 0;
}

uint64_t fcks_invokeDispatchExternalProtectionStateChangedCallbackAsync(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef *FigContentKeySessionCallbackContext;
  CFTypeRef *v5;
  CFTypeRef v6;
  CFIndex i;
  const __CFArray *Count;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)DerivedStorage)
  {
    v12 = FigSignalErrorAt();
    if ((_DWORD)v12)
      goto LABEL_18;
    goto LABEL_19;
  }
  FigContentKeySessionCallbackContext = fcks_createFigContentKeySessionCallbackContext(DerivedStorage);
  v14 = FigContentKeySessionCallbackContext;
  if (FigContentKeySessionCallbackContext)
  {
    v5 = FigContentKeySessionCallbackContext;
    if (a2)
      v6 = CFRetain(a2);
    else
      v6 = 0;
    *v5 = v6;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 64), v5, (dispatch_function_t)fcks_dispatchExternalProtectionStateChangedCallback);
  }
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 8);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
    {
      v12 = 0;
      goto LABEL_19;
    }
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), i);
    v9 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v9)
      continue;
    v10 = (const void *)v9;
    v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!*(_QWORD *)(v11 + 56))
      break;
    v12 = (*(uint64_t (**)(const void *, const void *))(v11 + 64))(v10, a2);
    CFRelease(v10);
    if ((_DWORD)v12)
      goto LABEL_17;
  }
  CFRelease(v10);
  v12 = 4294954514;
LABEL_17:
  FigSignalErrorAt();
LABEL_18:
  fcks_releaseAndClearFigContentKeySessionCallbackContext(&v14);
LABEL_19:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return v12;
}

uint64_t fcks_setAuthorizationToken(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)v6)
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 176), a2, a3);
    v7 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 40));
  return v7;
}

uint64_t fcks_copyAuthorizationToken(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *Value;
  CFTypeRef v8;
  CFTypeRef v9;
  CFIndex i;
  const __CFArray *Count;
  uint64_t v12;
  const void *v13;
  uint64_t (*v14)(const void *, const void *, CFTypeRef *);
  uint64_t v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  *a3 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)v6)
  {
    v15 = FigSignalErrorAt();
LABEL_19:
    MEMORY[0x19402EF04](*(_QWORD *)(v6 + 40));
    v9 = cf;
    if ((_DWORD)v15)
      goto LABEL_25;
    goto LABEL_20;
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 176), a2);
  if (Value)
  {
    v8 = CFRetain(Value);
    cf = v8;
    if (v8)
    {
      v9 = v8;
      MEMORY[0x19402EF04](*(_QWORD *)(v6 + 40));
LABEL_20:
      v15 = 0;
      *a3 = v9;
      return v15;
    }
  }
  else
  {
    cf = 0;
  }
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(v6 + 8);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      goto LABEL_17;
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 8), i);
    v12 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v12)
      break;
LABEL_15:
    ;
  }
  v13 = (const void *)v12;
  v14 = *(uint64_t (**)(const void *, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 80);
  if (!v14)
  {
    CFRelease(v13);
    v15 = 4294954514;
    goto LABEL_23;
  }
  v15 = v14(v13, a2, &cf);
  CFRelease(v13);
  if ((_DWORD)v15 == -17295)
    goto LABEL_15;
  if ((_DWORD)v15)
  {
LABEL_23:
    FigSignalErrorAt();
    goto LABEL_24;
  }
LABEL_17:
  if (cf)
  {
    v15 = 0;
    goto LABEL_19;
  }
  v15 = 4294950001;
LABEL_24:
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 40));
  v9 = cf;
LABEL_25:
  if (v9)
    CFRelease(v9);
  return v15;
}

uint64_t fcsk_externalProtectionStatusForCryptor(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t, _QWORD, CFTypeRef);
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t);
  uint64_t (*v12)(uint64_t, _QWORD, int *);
  uint64_t (*v13)(uint64_t, char *);
  int v15;
  uint64_t v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v19;
  int v20;
  CFTypeRef cf[27];

  cf[26] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  v20 = 0;
  v19 = 0;
  if (!a2 || !a4 || !a3)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7)
    goto LABEL_21;
  v8 = v7(a2, *MEMORY[0x1E0CA3220], *MEMORY[0x1E0C9AE00], cf);
  if ((_DWORD)v8)
  {
LABEL_30:
    v16 = v8;
    goto LABEL_22;
  }
  v9 = cf[0];
  v10 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v10)
  {
LABEL_21:
    v16 = 4294954514;
    goto LABEL_22;
  }
  v8 = v10(a2, *MEMORY[0x1E0CA31C0], v9);
  if ((_DWORD)v8)
    goto LABEL_30;
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v11)
    goto LABEL_21;
  v8 = v11(a2, CFSTR("DisplayList"), a3);
  if ((_DWORD)v8)
    goto LABEL_30;
  v12 = *(uint64_t (**)(uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v12)
    goto LABEL_21;
  v8 = v12(a2, 0, &v20);
  if ((_DWORD)v8)
    goto LABEL_30;
  v13 = *(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 192);
  if (!v13)
    goto LABEL_21;
  v8 = v13(a2, &v19);
  if ((_DWORD)v8)
    goto LABEL_30;
  if (v19)
  {
    if (v20 == 1 || v20 == 4)
      v15 = 2;
    else
      v15 = 3;
  }
  else
  {
    v15 = 1;
  }
  if (dword_1EE2A29A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v16 = 0;
  *a4 = v15;
LABEL_22:
  if (cf[0])
    CFRelease(cf[0]);
  return v16;
}

CFTypeRef *fcks_createFigContentKeySessionCallbackContext(uint64_t a1)
{
  CFTypeRef *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  CFTypeRef *v7;

  v7 = 0;
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_6;
  if (!*(_QWORD *)(a1 + 120))
    goto LABEL_6;
  v2 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x60uLL, 0x10E0040ACD5F95AuLL);
  v7 = v2;
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  v2[5] = (CFTypeRef)v3;
  if (v3)
  {
    v4 = *(_OWORD *)(a1 + 72);
    v5 = *(_OWORD *)(a1 + 104);
    *((_OWORD *)v2 + 4) = *(_OWORD *)(a1 + 88);
    *((_OWORD *)v2 + 5) = v5;
    *((_OWORD *)v2 + 3) = v4;
  }
  else
  {
LABEL_6:
    fcks_releaseAndClearFigContentKeySessionCallbackContext(&v7);
    return v7;
  }
  return v2;
}

void fcks_dispatchKeyResponseErrorCallback(CFTypeRef *a1)
{
  void (*v1)(CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef);
  CFTypeRef *v2;

  v2 = a1;
  v1 = (void (*)(CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef))a1[7];
  if (v1)
    v1(a1[5], *a1, a1[1], a1[3]);
  fcks_releaseAndClearFigContentKeySessionCallbackContext(&v2);
}

void fcks_releaseAndClearFigContentKeySessionCallbackContext(CFTypeRef **a1)
{
  CFTypeRef *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      if (*v2)
      {
        CFRelease(*v2);
        v2 = *a1;
      }
      if (v2[2])
      {
        CFRelease(v2[2]);
        v2 = *a1;
      }
      if (v2[3])
      {
        CFRelease(v2[3]);
        v2 = *a1;
      }
      if (v2[4])
      {
        CFRelease(v2[4]);
        v2 = *a1;
      }
      if (v2[5])
      {
        CFRelease(v2[5]);
        v2 = *a1;
      }
      free(v2);
      *a1 = 0;
    }
  }
}

void fcks_dispatchKeyResponseSuccessfullyProcessedCallback(CFTypeRef *a1)
{
  void (*v1)(CFTypeRef, CFTypeRef, CFTypeRef);
  CFTypeRef *v2;

  v2 = a1;
  v1 = (void (*)(CFTypeRef, CFTypeRef, CFTypeRef))a1[8];
  if (v1)
    v1(a1[5], *a1, a1[1]);
  fcks_releaseAndClearFigContentKeySessionCallbackContext(&v2);
}

void fcks_dispatchPersistentKeyUpdatedCallback(uint64_t a1)
{
  void (*v1)(_QWORD, _QWORD, _QWORD);
  CFTypeRef *v2;

  v2 = (CFTypeRef *)a1;
  v1 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 72);
  if (v1)
    v1(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
  fcks_releaseAndClearFigContentKeySessionCallbackContext(&v2);
}

void fcks_dispatchSecureStopDidFinalizeRecordCallback(uint64_t a1)
{
  void (*v1)(_QWORD);
  CFTypeRef *v2;

  v2 = (CFTypeRef *)a1;
  v1 = *(void (**)(_QWORD))(a1 + 80);
  if (v1)
    v1(*(_QWORD *)(a1 + 40));
  fcks_releaseAndClearFigContentKeySessionCallbackContext(&v2);
}

void fcks_dispatchExternalProtectionStateChangedCallback(CFTypeRef *a1)
{
  CFTypeRef *v1;

  v1 = a1;
  if (a1[10])
    ((void (*)(CFTypeRef, CFTypeRef))a1[11])(a1[5], *a1);
  fcks_releaseAndClearFigContentKeySessionCallbackContext(&v1);
}

uint64_t FigAssetWriterCreateWithURL(const __CFAllocator *a1, const __CFURL *a2, uint64_t a3, const __CFDictionary *a4, const __CFDictionary *a5, _QWORD *a6)
{
  int v11;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  CFTypeRef v17;
  CFTypeRef cf;
  char CFPreferenceBooleanWithDefault;

  CFPreferenceBooleanWithDefault = 0;
  v17 = 0;
  cf = 0;
  FigKTraceInit();
  if (!a2 || !remakerFamily_CFURLSchemeIsFile(a2) || FigFileDoesFileExist() || !a6)
    goto LABEL_20;
  FigCFDictionaryGetBooleanIfPresent();
  CFPreferenceBooleanWithDefault = FigGetCFPreferenceBooleanWithDefault();
  v11 = CMByteStreamCreateForFileURL();
  if (v11 != -12204 && v11 != 0)
    v11 = -12143;
  if (v11)
  {
LABEL_20:
    v13 = FigSignalErrorAt();
    goto LABEL_21;
  }
  v13 = assetWriter_CreateWithByteStreamOrFormatWriterSegmentCallback(a1, cf, 0, a4, a5, &v17);
  if ((_DWORD)v13)
  {
LABEL_21:
    v15 = v13;
    goto LABEL_15;
  }
  v14 = v17;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v15 = 0;
  *a6 = v14;
  v17 = 0;
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  return v15;
}

uint64_t assetWriter_CreateWithByteStreamOrFormatWriterSegmentCallback(const __CFAllocator *a1, const void *a2, uint64_t a3, const __CFDictionary *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  int IsServerProcess;
  void *v13;
  uint64_t LoggingIdentifier;
  uint64_t DerivedStorage;
  uint64_t v16;
  uint64_t v17;
  const void *Value;
  CFMutableArrayRef Mutable;
  uint64_t CMBaseObject;
  void (*v21)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v22;
  const __CFURL *v23;
  CFURLRef v24;
  CFURLRef v25;
  uint64_t v26;
  CFTypeRef cf;
  CFTypeRef v29;

  cf = 0;
  v29 = 0;
  IsServerProcess = FigServer_IsServerProcess();
  if (IsServerProcess)
  {
    v13 = (void *)FigOSTransactionCreate();
    if (!v13)
      goto LABEL_32;
  }
  else
  {
    v13 = 0;
  }
  FigAssetWriterGetClassID();
  LoggingIdentifier = CMDerivedObjectCreate();
  if ((_DWORD)LoggingIdentifier)
    goto LABEL_33;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LoggingIdentifier = remakerFamily_generateLoggingIdentifier(87, (char *)(DerivedStorage + 41));
  if ((_DWORD)LoggingIdentifier)
    goto LABEL_33;
  v16 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(DerivedStorage + 88) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(DerivedStorage + 104) = *(_QWORD *)(v16 + 16);
  v17 = MEMORY[0x1E0CA2E30];
  *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E0CA2E30];
  *(_QWORD *)(DerivedStorage + 128) = *(_QWORD *)(v17 + 16);
  *(_DWORD *)(DerivedStorage + 456) = -1;
  *(_QWORD *)(DerivedStorage + 8) = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 64) = FigReentrantMutexCreate();
  remakerFamily_initializePowerLog((uint64_t)v29);
  if (IsServerProcess)
  {
    *(_QWORD *)(DerivedStorage + 448) = v13;
    v13 = 0;
  }
  remakerFamily_SetRemakerState((uint64_t)v29, 1, 0);
  *(_QWORD *)(DerivedStorage + 24) = FigSemaphoreCreate();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt64IfPresent();
  *(_QWORD *)(DerivedStorage + 56) = FigDispatchQueueCreateWithPriorityAndClientPID();
  FigCFDictionaryGetBooleanIfPresent();
  if (a4)
  {
    Value = CFDictionaryGetValue(a4, CFSTR("Remaker_TemporaryDirectoryURL"));
    if (Value)
      Value = CFRetain(Value);
    *(_QWORD *)(DerivedStorage + 232) = Value;
  }
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 80) = Mutable;
  if (!Mutable)
  {
LABEL_32:
    LoggingIdentifier = FigSignalErrorAt();
LABEL_33:
    v26 = LoggingIdentifier;
    goto LABEL_25;
  }
  if (a2)
  {
    *(_QWORD *)(DerivedStorage + 168) = CFRetain(a2);
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v21 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v21 && (v21(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &cf), cf))
    {
      v22 = CFRetain(cf);
      v23 = (const __CFURL *)cf;
      *(_QWORD *)(DerivedStorage + 160) = v22;
      if (v23)
      {
        v24 = CFURLCopyAbsoluteURL(v23);
        if (v24)
        {
          v25 = v24;
          *(_BYTE *)(DerivedStorage + 176) = FigFileIsFileOnExternalStorageDevice();
          CFRelease(v25);
        }
      }
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 160) = 0;
    }
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  FigCFDictionaryGetBooleanIfPresent();
  *(_DWORD *)(DerivedStorage + 360) = -1;
  LoggingIdentifier = remakerFamily_createFormatWriter(v29, a1, 0, a3, a5, (CFTypeRef *)(DerivedStorage + 184));
  if ((_DWORD)LoggingIdentifier)
    goto LABEL_33;
  *(_QWORD *)(DerivedStorage + 192) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  CMNotificationCenterGetDefaultLocalCenter();
  v26 = FigNotificationCenterAddWeakListeners();
  if (!(_DWORD)v26)
  {
    *a6 = v29;
    v29 = 0;
  }
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v29)
    CFRelease(v29);
  if (v13)
    os_release(v13);
  return v26;
}

uint64_t FigAssetWriterCreateForWritingFragmentedData(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, const __CFDictionary *a6, _QWORD *a7)
{
  uint64_t v14;
  CFTypeRef v15;
  uint64_t DerivedStorage;
  uint64_t v17;
  CFTypeRef cf;

  cf = 0;
  FigKTraceInit();
  if (!a7)
    return FigSignalErrorAt();
  v14 = assetWriter_CreateWithByteStreamOrFormatWriterSegmentCallback(a1, 0, (uint64_t)assetWriter_FormatWriterSegmentCallback, a5, a6, &cf);
  v15 = cf;
  if ((_DWORD)v14)
  {
    v17 = v14;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(DerivedStorage + 304) = 1;
    *(_QWORD *)(DerivedStorage + 312) = a2;
    *(_QWORD *)(DerivedStorage + 320) = a3;
    *(_QWORD *)(DerivedStorage + 328) = a4;
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    v17 = 0;
    *a7 = v15;
  }
  return v17;
}

uint64_t assetWriter_FormatWriterSegmentCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  cf = 0;
  if (*(_QWORD *)(DerivedStorage + 312)
    && !*(_BYTE *)(DerivedStorage + 305)
    && *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
  {
    v11 = *(_QWORD *)(v6 + 184);
    v12 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (!v12)
    {
      v9 = 4294954514;
      goto LABEL_7;
    }
    v8 = v12(v11, 0, &cf);
    if ((_DWORD)v8)
      goto LABEL_5;
    v8 = (*(uint64_t (**)(CFTypeRef, _QWORD))(v6 + 312))(cf, *(_QWORD *)(v6 + 328));
    if ((_DWORD)v8)
      goto LABEL_5;
    *(_BYTE *)(v6 + 305) = 1;
  }
  v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v6 + 320);
  if (v7)
  {
    v8 = v7(a2, a3, *(_QWORD *)(v6 + 328));
LABEL_5:
    v9 = v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t assetWriter_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  _DWORD *DerivedStorage;
  _DWORD *v8;
  uint64_t result;
  CFTypeRef *v10;
  int v11;
  void *v12;
  const __CFAllocator *v13;
  const void *v14;
  CFNumberType v15;
  void *v16;
  _DWORD *v17;
  __int128 v18;
  CMTime v19;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage >= 7u)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (CFEqual(a2, CFSTR("AssetWriter_RealTime")))
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("AssetWriter_MaximizePowerEfficiency")))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v11 = *((unsigned __int8 *)v8 + 424);
LABEL_7:
    if (!v11)
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v12 = (void *)CFRetain(*v10);
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("AssetWriter_ClientPID")))
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = v8 + 9;
    v15 = kCFNumberSInt32Type;
LABEL_12:
    v12 = CFNumberCreate(v13, v15, v14);
LABEL_13:
    v16 = v12;
    result = 0;
    *a4 = v16;
    return result;
  }
  if (CFEqual(a2, CFSTR("AssetWriter_ThrottleForBackground")))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v11 = *((unsigned __int8 *)v8 + 40);
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("AssetWriter_IOPolicy")))
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = v8 + 114;
    v15 = kCFNumberIntType;
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("AssetWriter_PreferredOutputSegmentInterval")))
  {
    v17 = v8 + 67;
    v18 = *(_OWORD *)(v8 + 67);
LABEL_22:
    *(_OWORD *)&v19.value = v18;
    v19.epoch = *((_QWORD *)v17 + 2);
    v12 = CMTimeCopyAsDictionary(&v19, a3);
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("AssetWriter_InitialSegmentStartTime")))
  {
    v17 = v8 + 61;
    v18 = *(_OWORD *)(v8 + 61);
    goto LABEL_22;
  }
  return 4294954512;
}

uint64_t assetWriter_SetProperty(const void *a1, const void *a2, const void *a3)
{
  _DWORD *DerivedStorage;
  _DWORD *v7;
  CFTypeID v8;
  const void *v9;
  uint64_t result;
  CFTypeID v11;
  const void *v12;
  CFArrayRef Copy;
  CFTypeID v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  Boolean Value;
  _DWORD *v19;
  CMTime v20;
  CMTime time1;
  CMTime v22;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage >= 7u)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("AssetWriter_ClientSecTask")))
  {
    if (CFEqual(a2, CFSTR("AssetWriter_Metadata")))
    {
      if (*v7 >= 5u)
      {
        FigSignalErrorAt();
        return 0;
      }
      if (!a3)
      {
        result = *((_QWORD *)v7 + 50);
        if (result)
        {
          CFRelease((CFTypeRef)result);
          result = 0;
          *((_QWORD *)v7 + 50) = 0;
        }
        return result;
      }
      v11 = CFGetTypeID(a3);
      if (v11 == CFArrayGetTypeID())
      {
        v12 = (const void *)*((_QWORD *)v7 + 50);
        if (v12)
        {
          CFRelease(v12);
          *((_QWORD *)v7 + 50) = 0;
        }
        Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a3);
        result = 0;
        *((_QWORD *)v7 + 50) = Copy;
        return result;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("AssetWriter_RealTime")))
      return FigSignalErrorAt();
    if (CFEqual(a2, CFSTR("AssetWriter_ClientPID")))
    {
      if (a3)
      {
        v14 = CFGetTypeID(a3);
        if (v14 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v7 + 9);
          return remakerfamily_updateClientPID();
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("AssetWriter_ThrottleForBackground")))
    {
      if (a3)
      {
        v15 = CFGetTypeID(a3);
        if (v15 == CFBooleanGetTypeID())
        {
          *((_BYTE *)v7 + 40) = CFBooleanGetValue((CFBooleanRef)a3);
          return remakerfamily_updateThrottleForBackground(a1);
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("AssetWriter_IOPolicy")))
    {
      if (a3)
      {
        v16 = CFGetTypeID(a3);
        if (v16 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, v7 + 114);
          return remakerfamily_updateIOPolicy();
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("AssetWriter_MaximizePowerEfficiency")))
    {
      if (a3)
      {
        v17 = CFGetTypeID(a3);
        if (v17 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue((CFBooleanRef)a3);
          result = 0;
          *((_BYTE *)v7 + 424) = Value;
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("AssetWriter_PreferredOutputSegmentInterval")))
    {
      if (*((_BYTE *)v7 + 304) != 1)
        return FigSignalErrorAt();
      memset(&v22, 0, sizeof(v22));
      CMTimeMakeFromDictionary(&v22, (CFDictionaryRef)a3);
      if ((~v22.flags & 0x11) == 0
        || (v22.flags & 0x1D) == 1
        && (time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], v20 = v22, CMTimeCompare(&time1, &v20) < 0))
      {
        result = FigFormatWriterSetProperty(*((_QWORD *)v7 + 23), (uint64_t)CFSTR("PreferredOutputSegmentInterval"), (uint64_t)a3);
        if ((_DWORD)result)
          return result;
        v19 = v7 + 67;
        *(_OWORD *)(v7 + 67) = *(_OWORD *)&v22.value;
        goto LABEL_51;
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("AssetWriter_InitialSegmentStartTime")))
        return 4294954512;
      if (*((_BYTE *)v7 + 304) != 1)
        return FigSignalErrorAt();
      memset(&v22, 0, sizeof(v22));
      CMTimeMakeFromDictionary(&v22, (CFDictionaryRef)a3);
      if ((v22.flags & 0x1D) == 1)
      {
        result = FigFormatWriterSetProperty(*((_QWORD *)v7 + 23), (uint64_t)CFSTR("InitialSegmentStartTime"), (uint64_t)a3);
        if ((_DWORD)result)
          return result;
        v19 = v7 + 61;
        *(_OWORD *)(v7 + 61) = *(_OWORD *)&v22.value;
LABEL_51:
        *((_QWORD *)v19 + 2) = v22.epoch;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (a3)
  {
    v8 = CFGetTypeID(a3);
    if (v8 == SecTaskGetTypeID())
    {
      v9 = (const void *)*((_QWORD *)v7 + 55);
      *((_QWORD *)v7 + 55) = a3;
      CFRetain(a3);
      if (v9)
        CFRelease(v9);
      return 0;
    }
    return FigSignalErrorAt();
  }
  result = *((_QWORD *)v7 + 55);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    result = 0;
    *((_QWORD *)v7 + 55) = 0;
  }
  return result;
}

uint64_t FigFormatWriterSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigFormatWriterGetFigBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(FigBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t assetWriter_AddNativeTrack(const void *a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *DerivedStorage;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  intptr_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, intptr_t);
  uint64_t v12;
  uint64_t v13;
  CFAllocatorRef v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  CMTime *v17;
  int64_t v18;
  uint64_t v19;
  CMTime *v20;
  int64_t v21;
  uint64_t v22;
  opaqueCMBufferQueue *v23;
  uint64_t v24;
  const void *v25;
  int v26;
  CMTime v28;
  intptr_t v29;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v29 = 0;
  if (*DerivedStorage != 1 || !a3)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_25;
  }
  v7 = DerivedStorage;
  v8 = remakerFamily_createChannel(a1, 0, a2, &v29);
  if ((_DWORD)v8)
    goto LABEL_25;
  v9 = *((_QWORD *)v7 + 23);
  v10 = v29;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, intptr_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v11)
  {
    v19 = 4294954514;
    goto LABEL_23;
  }
  v8 = v11(v9, a2, 0, v10 + 300);
  if ((_DWORD)v8)
    goto LABEL_25;
  v8 = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v29 + 300));
  if ((_DWORD)v8)
    goto LABEL_25;
  v8 = remakerFamily_setFormatWriterProperties((uint64_t)a1, 0);
  if ((_DWORD)v8)
    goto LABEL_25;
  v12 = *((_QWORD *)v7 + 23);
  v13 = *(unsigned int *)(v29 + 300);
  v14 = CFGetAllocator(a1);
  v15 = *(_QWORD *)(v29 + 160);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v16)
  {
    if (!v16(v12, v13, CFSTR("SourceSampleBufferQueue"), v14, v15 + 32))
    {
      v17 = (CMTime *)(*(_QWORD *)(v29 + 160) + 40);
      v18 = *((_BYTE *)v7 + 32) ? 8 : 1;
      CMTimeMake(&v28, v18, 1);
      *v17 = v28;
      v20 = (CMTime *)(*(_QWORD *)(v29 + 160) + 64);
      v21 = *((_BYTE *)v7 + 32) ? 10 : 2;
      CMTimeMake(&v28, v21, 1);
      *v20 = v28;
      v22 = *(_QWORD *)(v29 + 160);
      v23 = *(opaqueCMBufferQueue **)(v22 + 32);
      v28 = *(CMTime *)(v22 + 40);
      v8 = CMBufferQueueInstallTrigger(v23, (CMBufferQueueTriggerCallback)assetWriterTrack_reachedLowWater, (void *)v22, 2, &v28, (CMBufferQueueTriggerToken *)(v22 + 88));
      if ((_DWORD)v8)
      {
LABEL_25:
        v19 = v8;
        goto LABEL_23;
      }
    }
  }
  v24 = v29;
  if (*(_DWORD *)(v29 + 32) == 1936684398)
  {
    v25 = (const void *)*((_QWORD *)v7 + 25);
    if (v25)
    {
      v26 = CFEqual(v25, CFSTR("AudioPrimingFormat_Manual"));
      v24 = v29;
      if (!v26)
        *(_BYTE *)(*(_QWORD *)(v29 + 160) + 176) = 1;
    }
  }
  *a3 = *(_DWORD *)(v24 + 300);
  remakerFamily_commitChannel((uint64_t)a1, v24);
  v19 = 0;
  v29 = 0;
LABEL_23:
  remakerFamily_discardChannel((uint64_t)a1, v29);
  return v19;
}

uint64_t assetWriter_AddAudioTrackWithCompression(const void *a1, uint64_t a2, size_t a3, const void *a4, const void *a5, const __CFDictionary *a6, _DWORD *a7)
{
  _DWORD *DerivedStorage;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, intptr_t);
  const __CFAllocator *v20;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  CMTime *v22;
  int64_t v23;
  uint64_t v24;
  CMTime *v25;
  int64_t v26;
  uint64_t v27;
  opaqueCMBufferQueue *v28;
  intptr_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  void *v33;
  CFTypeRef v34;
  uint64_t v35;
  uint64_t v36;
  const void *Value;
  CMTime v39;
  intptr_t v40;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v40 = 0;
  if (*DerivedStorage != 1)
    goto LABEL_32;
  if (!a2)
    goto LABEL_32;
  if (!a7)
    goto LABEL_32;
  v15 = DerivedStorage;
  if (!remakerFamily_checkClientHasAudioEncoderAccess((uint64_t)a1, a2))
    goto LABEL_32;
  v16 = remakerFamily_createChannel(a1, 0, 1936684398, &v40);
  if ((_DWORD)v16)
    goto LABEL_33;
  v17 = *((_QWORD *)v15 + 23);
  v18 = v40;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, intptr_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v19)
  {
    v16 = v19(v17, 1936684398, 0, v18 + 300);
    if ((_DWORD)v16)
      goto LABEL_33;
    v16 = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v40 + 300));
    if ((_DWORD)v16)
      goto LABEL_33;
    v16 = remakerFamily_setFormatWriterProperties((uint64_t)a1, *(_DWORD *)(a2 + 8));
    if ((_DWORD)v16)
      goto LABEL_33;
    v20 = CFGetAllocator(a1);
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    v16 = CMBufferQueueCreate(v20, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(*(_QWORD *)(v40 + 160) + 32));
    if ((_DWORD)v16)
      goto LABEL_33;
    v22 = (CMTime *)(*(_QWORD *)(v40 + 160) + 40);
    v23 = *((_BYTE *)v15 + 32) ? 8 : 1;
    CMTimeMake(&v39, v23, 1);
    *v22 = v39;
    v25 = (CMTime *)(*(_QWORD *)(v40 + 160) + 64);
    v26 = *((_BYTE *)v15 + 32) ? 10 : 2;
    CMTimeMake(&v39, v26, 1);
    *v25 = v39;
    v27 = *(_QWORD *)(v40 + 160);
    v28 = *(opaqueCMBufferQueue **)(v27 + 32);
    v39 = *(CMTime *)(v27 + 40);
    v16 = CMBufferQueueInstallTrigger(v28, (CMBufferQueueTriggerCallback)assetWriterTrack_reachedLowWater, (void *)v27, 2, &v39, (CMBufferQueueTriggerToken *)(v27 + 88));
    if ((_DWORD)v16)
      goto LABEL_33;
    v29 = v40;
    v30 = *(_QWORD *)(v40 + 160);
    v31 = *(_QWORD *)(a2 + 32);
    v32 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v30 + 112) = *(_OWORD *)a2;
    *(_OWORD *)(v30 + 128) = v32;
    *(_QWORD *)(v30 + 144) = v31;
    *(_QWORD *)(*(_QWORD *)(v29 + 160) + 152) = a3;
    if (!a3 || !a4)
      goto LABEL_23;
    v33 = malloc_type_malloc(a3, 0x31F3991AuLL);
    *(_QWORD *)(*(_QWORD *)(v40 + 160) + 160) = v33;
    if (v33)
    {
      memcpy(v33, a4, a3);
LABEL_23:
      if (a5)
        v34 = CFRetain(a5);
      else
        v34 = 0;
      v35 = v40;
      v36 = *(_QWORD *)(v40 + 160);
      *(_QWORD *)(v36 + 168) = v34;
      *(_BYTE *)(v36 + 104) = 1;
      if (!a6)
        goto LABEL_30;
      Value = CFDictionaryGetValue(a6, CFSTR("AssetWriterAudioTrackProcessingOption_SourceAudioFormatDescriptionHint"));
      v35 = v40;
      if (!Value)
        goto LABEL_30;
      v16 = assetWriter_finishBuildingAudioTrackWithSourceFormatDescription(a1, *(_QWORD *)(v40 + 160), Value);
      if (!(_DWORD)v16)
      {
        v35 = v40;
LABEL_30:
        *a7 = *(_DWORD *)(v35 + 300);
        remakerFamily_commitChannel((uint64_t)a1, v35);
        v24 = 0;
        v40 = 0;
        goto LABEL_31;
      }
LABEL_33:
      v24 = v16;
      goto LABEL_31;
    }
LABEL_32:
    v16 = FigSignalErrorAt();
    goto LABEL_33;
  }
  v24 = 4294954514;
LABEL_31:
  remakerFamily_discardChannel((uint64_t)a1, v40);
  return v24;
}

uint64_t assetWriter_AddAudioTrackWithPresetCompression(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() != 1 || !a2)
    return FigSignalErrorAt();
  v16 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  result = FigAudioCompressionOptionsGetPreset(a2, &v17, &v16, &v15, &v14);
  if (!(_DWORD)result)
  {
    v10 = v16;
    v9 = v17;
    v12 = v14;
    v11 = v15;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 16);
    if (v13)
      return v13(a1, v9, v10, v11, v12, a3, a4);
    else
      return 4294954514;
  }
  return result;
}

uint64_t assetWriter_AddVideoTrackWithCompression(const void *a1, int a2, int a3, uint64_t a4, int a5, const __CFDictionary *a6, const void *a7, uint64_t a8, uint64_t a9, const __CFDictionary *a10, _DWORD *a11)
{
  __int128 v12;
  uint64_t v13;

  v12 = *(_OWORD *)a9;
  v13 = *(_QWORD *)(a9 + 16);
  return assetWriter_AddVideoTrackWithCompressionAndMediaType(a1, a2, a3, a4, 1986618469, a5, a6, a7, a8, &v12, a10, a11);
}

uint64_t assetWriter_SetTrackProperty(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t ChannelByWriterTrackID;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  CFTypeID v12;
  const void *v13;
  CFArrayRef Copy;
  uint64_t v15;
  CFTypeID v17;
  Boolean Value;
  const void *v19;

  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() != 1)
    return FigSignalErrorAt();
  ChannelByWriterTrackID = assetWriter_getChannelByWriterTrackID(a1, a2);
  if (!ChannelByWriterTrackID)
    return FigSignalErrorAt();
  v9 = ChannelByWriterTrackID;
  if (!*(_QWORD *)(ChannelByWriterTrackID + 16))
    return FigSignalErrorAt();
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v10)
    return FigSignalErrorAt();
  v11 = (_QWORD *)v10;
  if (CFEqual(a3, CFSTR("AssetWriterTrack_Metadata")))
  {
    if (!a4)
    {
      v19 = (const void *)v11[24];
      if (v19)
      {
        CFRelease(v19);
        v15 = 0;
        v11[24] = 0;
      }
      else
      {
        v15 = 0;
      }
      goto LABEL_20;
    }
    v12 = CFGetTypeID(a4);
    if (v12 == CFArrayGetTypeID())
    {
      v13 = (const void *)v11[24];
      if (v13)
      {
        CFRelease(v13);
        v11[24] = 0;
      }
      Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a4);
      v15 = 0;
      v11[24] = Copy;
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  if (CFEqual(a3, CFSTR("AssetWriterTrack_ShouldVerifyFirstAudioSampleBufferPriming")))
  {
    if (!a4 || (v17 = CFGetTypeID(a4), v17 != CFBooleanGetTypeID()))
    {
LABEL_23:
      v15 = FigSignalErrorAt();
      goto LABEL_20;
    }
    Value = CFBooleanGetValue((CFBooleanRef)a4);
    v15 = 0;
    *(_BYTE *)(v9 + 176) = Value;
  }
  else
  {
    v15 = 4294954512;
  }
LABEL_20:
  CFRelease(v11);
  return v15;
}

uint64_t assetWriter_CopyTrackProperty(const void *a1, int a2, const void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t ChannelByWriterTrackID;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void *PixelBufferPool;
  uint64_t v17;
  uint64_t v19;
  int v20;
  const void *VTCompressionSession;
  OSStatus v22;
  _QWORD *v23;
  const void **v24;
  CFTypeRef propertyValueOut;

  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() >= 7u)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  ChannelByWriterTrackID = assetWriter_getChannelByWriterTrackID((uint64_t)a1, a2);
  if (!ChannelByWriterTrackID)
    return FigSignalErrorAt();
  v10 = ChannelByWriterTrackID;
  if (!*(_QWORD *)(ChannelByWriterTrackID + 16))
    return FigSignalErrorAt();
  v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v11)
    return FigSignalErrorAt();
  v12 = v11;
  if (!CFEqual(a3, CFSTR("AssetWriterTrack_PixelBufferPool")))
  {
    if (!CFEqual(a3, CFSTR("AssetWriterTrack_EncoderSupportsMultiPass")))
    {
      if (!CFEqual(a3, CFSTR("AssetWriterTrack_ShouldVerifyFirstAudioSampleBufferPriming")))
      {
        v17 = 4294954512;
        goto LABEL_29;
      }
      v24 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(v10 + 176))
        v24 = (const void **)MEMORY[0x1E0C9AE40];
      PixelBufferPool = *v24;
      if (!*v24)
        goto LABEL_14;
      goto LABEL_13;
    }
    if (*(_BYTE *)(v10 + 104))
    {
      v13 = assetWriter_finishBuildingVideoTrackWithPixelBufferAttributes(a1, v10, 0);
      if ((_DWORD)v13)
      {
LABEL_28:
        v17 = v13;
        goto LABEL_29;
      }
    }
    v19 = *(_QWORD *)(v12 + 288);
    if (v19)
    {
      v20 = *(_DWORD *)(v12 + 32);
      if (v20 == 1986618469 || v20 == 1635088502)
      {
        propertyValueOut = 0;
        VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(v19);
        v22 = VTSessionCopyProperty(VTCompressionSession, (CFStringRef)*MEMORY[0x1E0CED0F0], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &propertyValueOut);
        v23 = (_QWORD *)MEMORY[0x1E0C9AE50];
        if (v22)
          v23 = (_QWORD *)MEMORY[0x1E0C9AE40];
        *a5 = *v23;
        if (propertyValueOut)
          CFRelease(propertyValueOut);
        v17 = 0;
        goto LABEL_29;
      }
    }
LABEL_27:
    v13 = FigSignalErrorAt();
    goto LABEL_28;
  }
  if (*(_BYTE *)(v10 + 104))
  {
    v13 = assetWriter_finishBuildingVideoTrackWithPixelBufferAttributes(a1, v10, 0);
    if ((_DWORD)v13)
      goto LABEL_28;
  }
  v14 = *(_QWORD *)(v12 + 288);
  if (!v14)
    goto LABEL_27;
  v15 = *(_DWORD *)(v12 + 32);
  if (v15 != 1986618469 && v15 != 1635088502)
    goto LABEL_27;
  PixelBufferPool = FigMediaProcessorGetPixelBufferPool(v14);
  if (PixelBufferPool)
LABEL_13:
    PixelBufferPool = CFRetain(PixelBufferPool);
LABEL_14:
  v17 = 0;
  *a5 = PixelBufferPool;
LABEL_29:
  CFRelease((CFTypeRef)v12);
  return v17;
}

uint64_t assetWriter_BeginSession(const void *a1, CMTime *a2)
{
  _DWORD *DerivedStorage;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  CMTimeEpoch v8;
  CFIndex v9;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  CMTimeEpoch v12;
  CMTimeFlags v13;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v16;
  uint64_t v17;
  CFAllocatorRef v18;
  uint64_t FigBaseObject;
  uint64_t (*v20)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *);
  int v21;
  const void *v22;
  CMTimeFlags v23;
  CMTimeEpoch v24;
  CMTimeFlags v25;
  CMTimeEpoch v26;
  CFIndex v27;
  CMTimeValue *v28;
  CMTimeFlags v29;
  CMTimeEpoch v30;
  CMTimeEpoch v31;
  CMTimeEpoch v32;
  uint64_t v33;
  unsigned int *ValueAtIndex;
  uint64_t v35;
  uint64_t v36;
  CFAllocatorRef v37;
  uint64_t (*v38)(uint64_t, uint64_t, const __CFString *, CFAllocatorRef, CMTime *);
  int v39;
  const void *v40;
  uint64_t v41;
  const __CFAllocator *v42;
  CFDictionaryRef v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v48;
  uint64_t v49;
  uint64_t updated;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, CMTime *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  CFStringRef v58;
  CMTime *v60;
  _DWORD *v61;
  CMTimeEpoch v62;
  CMTimeFlags v63;
  CMTimeFlags v64;
  __int128 v65;
  CFIndex v66;
  CFIndex Count;
  char v68;
  CMTime v69;
  CMTime v70;
  CMTime v71;
  CMTime rhs;
  CMTime v73;
  CMTime v74;
  CMTime v75;
  CMTime time2;
  CMTime time;
  CMTimeValue v78;
  CMTimeScale v79;
  CMTimeValue v80;
  CMTimeScale v81;
  CMTimeValue v82;
  CMTimeScale v83;
  CMTimeValue v84;
  CMTimeScale v85;
  CMTimeValue v86;
  CMTimeScale v87;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v68 = 0;
  if (*DerivedStorage < 4u && (a2->flags & 0x1D) == 1)
  {
    v5 = DerivedStorage;
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      time = *a2;
      CMTimeGetSeconds(&time);
      kdebug_trace();
    }
    if (*((_BYTE *)v5 + 32))
    {
      v60 = a2;
      v61 = v5;
      v6 = CMBaseObjectGetDerivedStorage();
      v7 = MEMORY[0x1E0CA2E18];
      v86 = *MEMORY[0x1E0CA2E18];
      v87 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
      v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v84 = v86;
      v85 = v87;
      v65 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)&v73.value = *MEMORY[0x1E0CA2E18];
      v73.epoch = v8;
      Count = CFArrayGetCount(*(CFArrayRef *)(v6 + 80));
      if (Count >= 2)
      {
        v66 = 0;
        v9 = 0;
        v10 = *(_DWORD *)(v7 + 12);
        v11 = v8;
        v12 = v8;
        v13 = v10;
        do
        {
          assetWriter_GetInputQueueLengthBeforeFormatWriterForTrackIndex(a1, v9, (uint64_t)&time);
          value = time.value;
          flags = time.flags;
          timescale = time.timescale;
          if ((time.flags & 1) != 0)
          {
            epoch = time.epoch;
            time.value = value;
            time.timescale = timescale;
            time2.value = v86;
            time2.timescale = v87;
            time2.flags = v10;
            time2.epoch = v11;
            if (CMTimeCompare(&time, &time2) < 0)
            {
              v84 = v86;
              v85 = v87;
              v86 = value;
              v66 = v9;
              v87 = timescale;
              v13 = v10;
              v12 = v11;
              v10 = flags;
              v11 = epoch;
            }
            else
            {
              time2.value = v84;
              time2.timescale = v85;
              time2.flags = v13;
              time2.epoch = v12;
              v75.value = value;
              v75.timescale = timescale;
              v75.flags = flags;
              v75.epoch = epoch;
              CMTimeMinimum(&time, &time2, &v75);
              v84 = time.value;
              v13 = time.flags;
              v85 = time.timescale;
              v12 = time.epoch;
            }
          }
          ++v9;
        }
        while (Count != v9);
        if ((v10 & 1) != 0)
        {
          *(_OWORD *)&time.value = v65;
          time.epoch = v8;
          v16 = CMBaseObjectGetDerivedStorage();
          time2.value = 0;
          v17 = *(_QWORD *)(v16 + 184);
          v18 = CFGetAllocator(a1);
          FigBaseObject = FigFormatWriterGetFigBaseObject(v17);
          v20 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
          if (v20)
          {
            v21 = v20(FigBaseObject, CFSTR("InterleavingPeriod"), v18, &time2);
            v22 = (const void *)time2.value;
            if (!v21)
            {
              CMTimeMakeFromDictionary(&time, (CFDictionaryRef)time2.value);
              v22 = (const void *)time2.value;
            }
            if (v22)
              CFRelease(v22);
          }
          v74 = time;
          CMTimeMake(&rhs, 1, 1);
          time2.value = v86;
          time2.timescale = v87;
          time2.flags = v10;
          time2.epoch = v11;
          CMTimeSubtract(&time, &time2, &rhs);
          v83 = time.timescale;
          v82 = time.value;
          time2 = time;
          v75 = v74;
          CMTimeMaximum(&time, &time2, &v75);
          v82 = time.value;
          v23 = time.flags;
          v83 = time.timescale;
          v24 = time.epoch;
          CMTimeMake(&v71, 1, 1);
          time2.value = v84;
          time2.timescale = v85;
          time2.flags = v13;
          time2.epoch = v12;
          CMTimeSubtract(&time, &time2, &v71);
          v81 = time.timescale;
          v80 = time.value;
          time2 = time;
          v75 = v74;
          CMTimeMaximum(&time, &time2, &v75);
          v80 = time.value;
          v25 = time.flags;
          v81 = time.timescale;
          v26 = time.epoch;
          CMTimeMake(&v70, 1, 1);
          time = v74;
          CMTimeAdd(&v73, &time, &v70);
          v27 = 0;
          v63 = v25;
          v64 = v23;
          v62 = v26;
          while (1)
          {
            v28 = v66 == v27 ? &v80 : &v82;
            v29 = v66 == v27 ? v25 : v23;
            v30 = v66 == v27 ? v26 : v24;
            v78 = *v28;
            v79 = *((_DWORD *)v28 + 2);
            if ((v29 & 1) != 0)
              break;
LABEL_43:
            if (Count == ++v27)
              goto LABEL_47;
          }
          v31 = v24;
          *(_OWORD *)&time.value = v65;
          v32 = v8;
          time.epoch = v8;
          v33 = CMBaseObjectGetDerivedStorage();
          time2.value = 0;
          ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v33 + 80), v27);
          v35 = *(_QWORD *)(v33 + 184);
          v36 = ValueAtIndex[75];
          v37 = CFGetAllocator(a1);
          v38 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, CFAllocatorRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v38)
          {
            v39 = v38(v35, v36, CFSTR("InterleavingAdvance"), v37, &time2);
            v40 = (const void *)time2.value;
            if (!v39)
            {
              CMTimeMakeFromDictionary(&time, (CFDictionaryRef)time2.value);
              v40 = (const void *)time2.value;
            }
            if (v40)
              CFRelease(v40);
          }
          time2 = time;
          time.value = v78;
          time.timescale = v79;
          time.flags = v29;
          time.epoch = v30;
          if (CMTimeCompare(&time2, &time) < 1)
          {
LABEL_40:
            v69 = v73;
            v49 = CMBaseObjectGetDerivedStorage();
            *(_OWORD *)&time.value = v65;
            v8 = v32;
            time.epoch = v32;
            assetWriter_GetInputQueueLengthBeforeFormatWriterForTrackIndex(a1, v27, (uint64_t)&time);
            time2 = time;
            v75 = v69;
            v24 = v31;
            if (CMTimeCompare(&time2, &v75) < 0)
              *(CMTime *)(*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v49 + 80), v27) + 20) + 64) = v69;
            v25 = v63;
            v23 = v64;
            v26 = v62;
            goto LABEL_43;
          }
          v41 = CMBaseObjectGetDerivedStorage();
          v42 = CFGetAllocator(a1);
          time.value = v78;
          time.timescale = v79;
          time.flags = v29;
          time.epoch = v30;
          v43 = CMTimeCopyAsDictionary(&time, v42);
          v44 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v41 + 80), v27);
          v45 = *(_QWORD *)(v41 + 184);
          v46 = v44[75];
          v47 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 24);
          if (v47)
          {
            v48 = v47(v45, v46, CFSTR("InterleavingAdvance"), v43);
            if (!v43)
              goto LABEL_39;
          }
          else
          {
            v48 = 4294954514;
            if (!v43)
            {
LABEL_39:
              if ((_DWORD)v48)
                return v48;
              goto LABEL_40;
            }
          }
          CFRelease(v43);
          goto LABEL_39;
        }
      }
LABEL_47:
      a2 = v60;
      v5 = v61;
    }
    updated = remakerfamily_updateClientPID();
    if ((_DWORD)updated)
      return updated;
    updated = remakerfamily_updateThrottleForBackground(a1);
    if ((_DWORD)updated)
      return updated;
    updated = remakerfamily_updateJoinWritingThreadToNewWorkgroup();
    if ((_DWORD)updated)
      return updated;
    v51 = *((_QWORD *)v5 + 23);
    time2 = *a2;
    v52 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v52)
    {
      time = time2;
      updated = v52(v51, &time);
      if ((_DWORD)updated)
        return updated;
      remakerFamily_transferMetadata(a1);
      if (*v5 == 3)
      {
LABEL_54:
        remakerFamily_SetRemakerState((uint64_t)a1, 3, 0);
        return 0;
      }
      updated = remakerFamily_startAllMultiPassTracks((uint64_t)a1, &v68);
      if ((_DWORD)updated)
        return updated;
      if (!v68)
      {
        updated = remakerFamily_startAllSinglePassTracks((uint64_t)a1);
        if ((_DWORD)updated)
          return updated;
      }
      v53 = *((_QWORD *)v5 + 42);
      if (!v53)
      {
LABEL_63:
        v57 = CMBaseObjectGetDerivedStorage();
        if (!remakerFamily_hasTrackForMediaType((uint64_t)a1, 1986618469) || *(_QWORD *)(v57 + 352))
          goto LABEL_54;
        v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("com.apple.coremedia.figassetwriter.writing-video-%d"), *(unsigned int *)(v57 + 36));
        *(_QWORD *)(v57 + 352) = v58;
        if (!v58)
        {
          v48 = FigSignalErrorAt();
          if ((_DWORD)v48)
            return v48;
          goto LABEL_54;
        }
        updated = remakerFamily_registerDarwinNotification((uint64_t)v58, (int *)(v57 + 360));
        if (!(_DWORD)updated)
        {
          updated = remakerFamily_postDarwinNotificationWithState(*(_QWORD *)(v57 + 352), *(_DWORD *)(v57 + 360), 1uLL);
          if (!(_DWORD)updated)
          {
            *(_QWORD *)(v57 + 368) = 1;
            goto LABEL_54;
          }
        }
        return updated;
      }
      v54 = 56;
      if (!*((_BYTE *)v5 + 240))
        v54 = 40;
      v55 = *(_QWORD *)&v5[v54];
      v56 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v56)
      {
        v48 = v56(v53, v55);
        if ((_DWORD)v48)
          return v48;
        goto LABEL_63;
      }
    }
    return 4294954514;
  }
  return FigSignalErrorAt();
}

uint64_t assetWriter_AddSampleBuffer(const void *a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  _DWORD *DerivedStorage;
  _DWORD *v7;
  uint64_t ChannelByWriterTrackID;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  CMBlockBufferRef DataBuffer;
  CVImageBufferRef v13;
  uint64_t CaptionGroup;
  CMFormatDescriptionRef FormatDescription;
  uint64_t v16;
  const __CFDictionary *v17;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  _OWORD *v21;
  const opaqueCMFormatDescription *v22;
  const AudioFormatListItem *MostCompatibleFormat;
  const void *GradualDecoderRefresh;
  int32_t SInt32;
  const __CFAllocator *v26;
  CFStringRef v27;
  CFStringRef v28;
  CFStringRef v29;
  __CVBuffer *ImageBuffer;
  const void *v31;
  uint64_t v32;
  opaqueCMBufferQueue *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, opaqueCMSampleBuffer *);
  CMTime v36;
  CMTime v37;
  CMTime time2;
  CMTime time;
  CMTime v40;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage >= 7u)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (DerivedStorage[5])
    return FigSignalErrorAt();
  if (*DerivedStorage != 3)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  ChannelByWriterTrackID = assetWriter_getChannelByWriterTrackID((uint64_t)a1, a2);
  if (!ChannelByWriterTrackID)
    return FigSignalErrorAt();
  v9 = ChannelByWriterTrackID;
  if (!*(_QWORD *)(ChannelByWriterTrackID + 16))
    return FigSignalErrorAt();
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v10)
    return FigSignalErrorAt();
  v11 = (_DWORD *)v10;
  if ((!CMSampleBufferGetNumSamples(a3)
     || assetWriter_IsTrackNativeTrack(a1, v9)
     || (DataBuffer = CMSampleBufferGetDataBuffer(a3),
         v13 = CMSampleBufferGetImageBuffer(a3),
         CaptionGroup = FigSampleBufferGetCaptionGroup(),
         DataBuffer)
     || v13
     || CaptionGroup)
    && ((CMSampleBufferGetDuration(&time1, a3), (time1.flags & 1) == 0)
     || (CMSampleBufferGetDuration(&lhs, a3), (lhs.flags & 8) == 0))
    || (v32 = FigSignalErrorAt(), !(_DWORD)v32))
  {
    if (v11[8] == 1936684398)
    {
      if (!*(_BYTE *)(v9 + 104))
        goto LABEL_64;
      FormatDescription = CMSampleBufferGetFormatDescription(a3);
      v16 = assetWriter_finishBuildingAudioTrackWithSourceFormatDescription(a1, v9, FormatDescription);
      if ((_DWORD)v16)
        goto LABEL_51;
      if (v11[8] == 1936684398)
      {
LABEL_64:
        if (*(_BYTE *)(v9 + 176))
        {
          if (CMSampleBufferGetNumSamples(a3) >= 1)
          {
            v37 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
            if (!*(_BYTE *)(v9 + 177))
            {
              v17 = (const __CFDictionary *)CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
              CMTimeMakeFromDictionary(&time1, v17);
              value = time1.value;
              flags = time1.flags;
              timescale = time1.timescale;
              if ((time1.flags & 1) != 0)
              {
                epoch = time1.epoch;
              }
              else
              {
                value = *MEMORY[0x1E0CA2E68];
                flags = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
                timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
                epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
              }
              v21 = (_OWORD *)(v9 + 180);
              if ((*(_BYTE *)(v9 + 192) & 1) != 0)
              {
                *(_OWORD *)&lhs.value = *v21;
                lhs.epoch = *(_QWORD *)(v9 + 196);
                rhs.value = value;
                rhs.timescale = timescale;
                rhs.flags = flags;
                rhs.epoch = epoch;
                CMTimeAdd(&time1, &lhs, &rhs);
                *v21 = *(_OWORD *)&time1.value;
                *(_QWORD *)(v9 + 196) = time1.epoch;
              }
              else
              {
                *(_QWORD *)v21 = value;
                *(_DWORD *)(v9 + 188) = timescale;
                *(_DWORD *)(v9 + 192) = flags;
                *(_QWORD *)(v9 + 196) = epoch;
              }
              CMSampleBufferGetDuration(&v37, a3);
              time1 = v37;
              lhs.value = value;
              lhs.timescale = timescale;
              lhs.flags = flags;
              lhs.epoch = epoch;
              if (CMTimeCompare(&time1, &lhs) >= 1)
              {
                v22 = CMSampleBufferGetFormatDescription(a3);
                *(_OWORD *)&v36.value = *v21;
                v36.epoch = *(_QWORD *)(v9 + 196);
                MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(v22);
                if (MostCompatibleFormat)
                {
                  memset(&time1, 0, sizeof(time1));
                  CMTimeMake(&time1, MostCompatibleFormat->mASBD.mFramesPerPacket, (int)MostCompatibleFormat->mASBD.mSampleRate);
                  GradualDecoderRefresh = (const void *)FigGaplessInfoCreateGradualDecoderRefresh(v22);
                  SInt32 = FigCFNumberGetSInt32();
                  memset(&lhs, 0, sizeof(lhs));
                  rhs = time1;
                  CMTimeMultiply(&lhs, &rhs, SInt32);
                  memset(&rhs, 0, sizeof(rhs));
                  FigGaplessInfoGetDefaultAudioPrimingDuration(v22, &rhs);
                  memset(&v40, 0, sizeof(v40));
                  time = lhs;
                  time2 = rhs;
                  CMTimeMinimum(&v40, &time, &time2);
                  time = v36;
                  time2 = v40;
                  if (CMTimeCompare(&time, &time2) < 0)
                  {
                    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                    time = v36;
                    v27 = CMTimeCopyDescription(v26, &time);
                    time = rhs;
                    v28 = CMTimeCopyDescription(v26, &time);
                    time = time1;
                    v29 = CMTimeCopyDescription(v26, &time);
                    if (v29)
                      CFRelease(v29);
                    if (v28)
                      CFRelease(v28);
                    if (v27)
                      CFRelease(v27);
                  }
                  if (GradualDecoderRefresh)
                    CFRelease(GradualDecoderRefresh);
                }
                *(_BYTE *)(v9 + 177) = 1;
              }
            }
          }
        }
      }
    }
    if (!*(_BYTE *)(v9 + 104))
      goto LABEL_47;
    time1.value = 0;
    ImageBuffer = CMSampleBufferGetImageBuffer(a3);
    if (ImageBuffer)
    {
      v16 = assetWriter_copyPixelBufferAttributesForHintingEncoder(ImageBuffer, (CFDictionaryRef *)&time1);
      if (!(_DWORD)v16)
      {
        v31 = (const void *)time1.value;
        v32 = assetWriter_finishBuildingVideoTrackWithPixelBufferAttributes(a1, v9, (const __CFDictionary *)time1.value);
        if (v31)
          CFRelease(v31);
        if ((_DWORD)v32)
          goto LABEL_52;
LABEL_47:
        v33 = *(opaqueCMBufferQueue **)(v9 + 32);
        if (v33)
        {
          v16 = CMBufferQueueEnqueue(v33, a3);
        }
        else
        {
          v34 = *((_QWORD *)v7 + 23);
          v35 = *(uint64_t (**)(uint64_t, uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 32);
          if (!v35)
          {
            v32 = 4294954514;
            goto LABEL_52;
          }
          v16 = v35(v34, a2, a3);
        }
      }
    }
    else
    {
      v16 = FigSignalErrorAt();
    }
LABEL_51:
    v32 = v16;
  }
LABEL_52:
  CFRelease(v11);
  return v32;
}

uint64_t assetWriter_AddPixelBuffer(const void *a1, int a2, __CVBuffer *a3, CMTime *a4)
{
  _DWORD *DerivedStorage;
  uint64_t ChannelByWriterTrackID;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const opaqueCMFormatDescription *v14;
  CFTypeRef *v15;
  const __CFAllocator *v16;
  uint64_t v17;
  const __CFAllocator *v18;
  CFDictionaryRef v19;
  uint64_t v20;
  CFDictionaryRef v22;
  CMSampleTimingInfo sampleTiming;
  CMSampleBufferRef sampleBufferOut;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  sampleBufferOut = 0;
  memset(&sampleTiming, 0, sizeof(sampleTiming));
  if (*DerivedStorage >= 7u
    || DerivedStorage[5]
    || *DerivedStorage != 3
    || !a3
    || (a4->flags & 0x1D) != 1
    || (ChannelByWriterTrackID = assetWriter_getChannelByWriterTrackID((uint64_t)a1, a2)) == 0
    || (v10 = ChannelByWriterTrackID, !*(_QWORD *)(ChannelByWriterTrackID + 16))
    || (v11 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
  {
    v20 = FigSignalErrorAt();
    v12 = 0;
    goto LABEL_26;
  }
  v12 = (const void *)v11;
  v13 = *(_DWORD *)(v11 + 32);
  if (v13 != 1635088502 && v13 != 1986618469)
  {
    v17 = FigSignalErrorAt();
    goto LABEL_25;
  }
  v15 = (CFTypeRef *)(v10 + 96);
  v14 = *(const opaqueCMFormatDescription **)(v10 + 96);
  if (v14)
  {
    if (CMVideoFormatDescriptionMatchesImageBuffer(v14, a3))
      goto LABEL_16;
    if (*v15)
    {
      CFRelease(*v15);
      *v15 = 0;
    }
  }
  v16 = CFGetAllocator(a1);
  v17 = CMVideoFormatDescriptionCreateForImageBuffer(v16, a3, (CMVideoFormatDescriptionRef *)(v10 + 96));
  if ((_DWORD)v17)
    goto LABEL_25;
LABEL_16:
  *(_OWORD *)&sampleTiming.duration.value = *MEMORY[0x1E0CA2E18];
  sampleTiming.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  sampleTiming.presentationTimeStamp = *a4;
  sampleTiming.decodeTimeStamp = sampleTiming.duration;
  v18 = CFGetAllocator(a1);
  v17 = CMSampleBufferCreateForImageBuffer(v18, a3, 1u, 0, 0, (CMVideoFormatDescriptionRef)*v15, &sampleTiming, &sampleBufferOut);
  if ((_DWORD)v17)
    goto LABEL_25;
  if (!*(_BYTE *)(v10 + 104))
  {
LABEL_22:
    v17 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v10 + 32), sampleBufferOut);
    goto LABEL_25;
  }
  v22 = 0;
  v17 = assetWriter_copyPixelBufferAttributesForHintingEncoder(a3, &v22);
  if ((_DWORD)v17)
  {
LABEL_25:
    v20 = v17;
    goto LABEL_26;
  }
  v19 = v22;
  v20 = assetWriter_finishBuildingVideoTrackWithPixelBufferAttributes(a1, v10, v22);
  if (v19)
    CFRelease(v19);
  if (!(_DWORD)v20)
    goto LABEL_22;
LABEL_26:
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  if (v12)
    CFRelease(v12);
  return v20;
}

opaqueCMBufferQueue *assetWriter_IsTrackQueueAboveHighWaterLevel(uint64_t a1, int a2)
{
  uint64_t ChannelByWriterTrackID;
  uint64_t v5;
  opaqueCMBufferQueue *result;
  CMTime v7;
  CMTime time1;
  CMTime v9;

  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() < 7u
    && (ChannelByWriterTrackID = assetWriter_getChannelByWriterTrackID(a1, a2)) != 0)
  {
    v5 = ChannelByWriterTrackID;
    result = *(opaqueCMBufferQueue **)(ChannelByWriterTrackID + 32);
    if (result)
    {
      memset(&v9, 0, sizeof(v9));
      CMBufferQueueGetDuration(&v9, result);
      time1 = v9;
      v7 = *(CMTime *)(v5 + 64);
      return (opaqueCMBufferQueue *)(CMTimeCompare(&time1, &v7) > 0);
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return result;
}

uint64_t assetWriter_MarkEndOfDataForTrack(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t ChannelByWriterTrackID;
  uint64_t v6;
  const void *v7;
  uint64_t v8;

  v4 = *(_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v4 >= 7)
    return FigSignalErrorAt();
  if (v4 <= 2)
    return FigSignalErrorAt();
  ChannelByWriterTrackID = assetWriter_getChannelByWriterTrackID(a1, a2);
  if (!ChannelByWriterTrackID)
    return FigSignalErrorAt();
  if (!*(_QWORD *)(ChannelByWriterTrackID + 16))
    return FigSignalErrorAt();
  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6)
    return FigSignalErrorAt();
  v7 = (const void *)v6;
  v8 = remakerFamily_MarkEndOfDataForTrack(v6, 1);
  CFRelease(v7);
  return v8;
}

uint64_t assetWriter_EndSession(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  unsigned int v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  _QWORD *ValueAtIndex;
  CFIndex v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, CMTime *);
  CMTime v14;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    time = *a2;
    CMTimeGetSeconds(&time);
    kdebug_trace();
  }
  v4 = *(_DWORD *)DerivedStorage;
  if (*(_DWORD *)DerivedStorage >= 7u
    || *(_DWORD *)(DerivedStorage + 20)
    || v4 >= 5
    || v4 <= 2
    || (a2->flags & 0x1D) != 1)
  {
    return FigSignalErrorAt();
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  if (Count < 1)
  {
LABEL_15:
    v12 = *(_QWORD *)(DerivedStorage + 184);
    *(_OWORD *)&v14.value = *(_OWORD *)&a2->value;
    v14.epoch = a2->epoch;
    v13 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v13)
    {
      time = v14;
      return v13(v12, &time);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    v6 = Count;
    for (i = 0; i != v6; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), i);
      CMBufferQueueMarkEndOfData(*(CMBufferQueueRef *)(ValueAtIndex[20] + 32));
    }
    v9 = 0;
    while (1)
    {
      v10 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v9) + 36);
      if (v10)
      {
        result = FigMediaProcessorFlush(v10);
        if ((_DWORD)result)
          break;
      }
      if (v6 == ++v9)
        goto LABEL_15;
    }
  }
  return result;
}

uint64_t assetWriter_Finish(void *a1)
{
  dispatch_queue_t *DerivedStorage;
  dispatch_queue_t *v3;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage >= 7u)
    return FigSignalErrorAt();
  v3 = DerivedStorage;
  if (*((_DWORD *)DerivedStorage + 5) || *(_DWORD *)DerivedStorage <= 2u)
    return FigSignalErrorAt();
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  FigAtomicCompareAndSwap32();
  dispatch_sync_f(v3[7], a1, (dispatch_function_t)assetWriter_finishAsyncDispatch);
  FigSemaphoreWaitRelative();
  FigSemaphoreSignal();
  return *((unsigned int *)v3 + 5);
}

uint64_t assetWriter_FinishAsync(void *a1)
{
  dispatch_queue_t *DerivedStorage;
  dispatch_queue_t *v3;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage >= 7u)
    return FigSignalErrorAt();
  v3 = DerivedStorage;
  if (*((_DWORD *)DerivedStorage + 5) || *(_DWORD *)DerivedStorage <= 2u)
    return FigSignalErrorAt();
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  FigAtomicCompareAndSwap32();
  remakerFamily_safeDispatchAsync(v3[7], a1, (dispatch_function_t)assetWriter_finishAsyncDispatch);
  return 0;
}

uint64_t assetWriter_BeginPass(uint64_t a1, int a2)
{
  uint64_t ChannelByWriterTrackID;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFArray *v10;
  uint64_t Pass;
  OpaqueVTCompressionSession *VTCompressionSession;
  CFIndex v13;
  void *v14;

  v13 = 0;
  v14 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() != 3)
    return FigSignalErrorAt();
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  ChannelByWriterTrackID = assetWriter_getChannelByWriterTrackID(a1, a2);
  if (!ChannelByWriterTrackID)
    return FigSignalErrorAt();
  v5 = ChannelByWriterTrackID;
  if (!*(_QWORD *)(ChannelByWriterTrackID + 16))
    return FigSignalErrorAt();
  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  if (!*(_BYTE *)(v6 + 360))
    goto LABEL_22;
  *(_BYTE *)(v6 + 432) = 0;
  if (!*(_BYTE *)(v5 + 104))
  {
    if (*(_QWORD *)(v6 + 288))
    {
      v10 = *(const __CFArray **)(v6 + 408);
      if (!v10
        || CFArrayGetCount(v10) < 1
        || (Pass = remakerFamily_createTimeRangesCArray(*(CFArrayRef *)(v7 + 408), &v13, &v14), !(_DWORD)Pass)
        && (Pass = VTFrameSiloSetTimeRangesForNextPass(*(VTFrameSiloRef *)(v7 + 368), v13, (const CMTimeRange *)v14),
            !(_DWORD)Pass))
      {
        VTCompressionSession = (OpaqueVTCompressionSession *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(v7 + 288));
        Pass = VTCompressionSessionBeginPass(VTCompressionSession, 0, 0);
        if (!(_DWORD)Pass)
        {
          *(_BYTE *)(v7 + 296) = 0;
          Pass = CMBufferQueueReset(*(CMBufferQueueRef *)(v5 + 32));
        }
      }
      goto LABEL_18;
    }
LABEL_22:
    Pass = FigSignalErrorAt();
LABEL_18:
    v8 = Pass;
    goto LABEL_19;
  }
  v8 = 0;
  *(_BYTE *)(v5 + 204) = 1;
LABEL_19:
  free(v14);
  CFRelease((CFTypeRef)v7);
  return v8;
}

uint64_t assetWriter_EndPass(uint64_t a1, int a2)
{
  uint64_t ChannelByWriterTrackID;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;

  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() != 3)
    return FigSignalErrorAt();
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  ChannelByWriterTrackID = assetWriter_getChannelByWriterTrackID(a1, a2);
  if (!ChannelByWriterTrackID)
    return FigSignalErrorAt();
  if (!*(_QWORD *)(ChannelByWriterTrackID + 16))
    return FigSignalErrorAt();
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    return FigSignalErrorAt();
  v6 = (unsigned __int8 *)v5;
  v7 = *(unsigned __int8 *)(v5 + 360);
  if (!*(_BYTE *)(v5 + 360))
  {
    FigSignalErrorAt();
    v7 = v6[360];
  }
  v8 = remakerFamily_MarkEndOfDataForTrack((uint64_t)v6, v7 == 0);
  CFRelease(v6);
  return v8;
}

uint64_t assetWriter_AddCaptionTrack(const void *a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5)
{
  _DWORD *DerivedStorage;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  intptr_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, _QWORD, intptr_t);
  int CMTimeIfPresent;
  uint64_t *v16;
  const __CFAllocator *v17;
  CFDictionaryRef v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v22;
  uint64_t v23;
  int v24;
  void (*v25)(uint64_t, uint64_t, const __CFString *, uint64_t);
  uint64_t v26;
  const __CFAllocator *v27;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  opaqueCMBufferQueue *v34;
  uint64_t v35;
  const void *v36;
  const void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  CMTime v43;
  CMTime v44;
  CMTime time;
  unsigned __int8 v46;
  CMTime v47;
  intptr_t v48;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v48 = 0;
  v47 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v46 = 0;
  if (*DerivedStorage != 1 || !a5)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_34;
  }
  v10 = DerivedStorage;
  v11 = remakerFamily_createChannel(a1, 0, a2, &v48);
  if ((_DWORD)v11)
    goto LABEL_34;
  v12 = *((_QWORD *)v10 + 23);
  v13 = v48;
  v14 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, intptr_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v14)
  {
    v41 = 4294954514;
LABEL_30:
    remakerFamily_discardChannel((uint64_t)a1, v48);
    return v41;
  }
  v11 = v14(v12, a2, 0, v13 + 300);
  if ((_DWORD)v11
    || (v11 = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v48 + 300)), (_DWORD)v11)
    || (v11 = remakerFamily_setFormatWriterProperties((uint64_t)a1, a3), (_DWORD)v11))
  {
LABEL_34:
    v41 = v11;
    goto LABEL_30;
  }
  CMTimeIfPresent = FigCFDictionaryGetCMTimeIfPresent();
  v16 = (uint64_t *)MEMORY[0x1E0C9AE00];
  if (CMTimeIfPresent && (v47.flags & 0x1D) == 1)
  {
    v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    time = v47;
    v18 = CMTimeCopyAsDictionary(&time, v17);
    v19 = *((_QWORD *)v10 + 23);
    v20 = *(unsigned int *)(v48 + 300);
    v21 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 24);
    if (v21)
      v21(v19, v20, CFSTR("CaptionTimeCodeFrameDuration"), v18);
  }
  else
  {
    v18 = 0;
  }
  if (FigCFDictionaryGetBooleanIfPresent())
  {
    v22 = *((_QWORD *)v10 + 23);
    v23 = *(unsigned int *)(v48 + 300);
    v24 = v46;
    v25 = *(void (**)(uint64_t, uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 24);
    if (v25)
    {
      if (v24)
        v26 = *MEMORY[0x1E0C9AE50];
      else
        v26 = *MEMORY[0x1E0C9AE40];
      v25(v22, v23, CFSTR("UseDropFrameTimeCode"), v26);
    }
  }
  v27 = CFGetAllocator(a1);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v29 = CMBufferQueueCreate(v27, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(*(_QWORD *)(v48 + 160) + 32));
  v30 = v48;
  if ((_DWORD)v29)
    goto LABEL_32;
  v31 = *(_QWORD *)(v48 + 160);
  remakerFamily_getLowWaterLevel(*((unsigned __int8 *)v10 + 32), (uint64_t)&time);
  *(CMTime *)(v31 + 40) = time;
  v32 = *(_QWORD *)(v48 + 160);
  remakerFamily_getHighWaterLevel(*((unsigned __int8 *)v10 + 32), (uint64_t)&time);
  *(CMTime *)(v32 + 64) = time;
  v33 = *(_QWORD *)(v48 + 160);
  v34 = *(opaqueCMBufferQueue **)(v33 + 32);
  time = *(CMTime *)(v33 + 40);
  v29 = CMBufferQueueInstallTrigger(v34, (CMBufferQueueTriggerCallback)assetWriterTrack_reachedLowWater, (void *)v33, 2, &time, (CMBufferQueueTriggerToken *)(v33 + 88));
  v30 = v48;
  if ((_DWORD)v29)
  {
LABEL_32:
    v41 = v29;
  }
  else
  {
    v35 = *v16;
    v36 = *(const void **)(*(_QWORD *)(v48 + 160) + 32);
    v37 = (const void *)*((_QWORD *)v10 + 23);
    v38 = *(unsigned int *)(v48 + 300);
    CMTimeMake(&v44, 2, 1);
    CMTimeMake(&v43, 1, 1);
    if (*((_BYTE *)v10 + 32))
      v39 = 0;
    else
      v39 = 31;
    v40 = FigMediaProcessorCreateForCaptionConversionWithFormatWriter(v35, a2, a3, v36, v37, v38, (__int128 *)&v44.value, (uint64_t)&v43, v39, (uint64_t *)(v48 + 288));
    if ((_DWORD)v40)
    {
      v41 = v40;
      v30 = v48;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      v41 = FigNotificationCenterAddWeakListeners();
      v30 = v48;
      if (!(_DWORD)v41)
      {
        *a5 = *(_DWORD *)(v48 + 300);
        remakerFamily_commitChannel((uint64_t)a1, v30);
        v30 = 0;
        v48 = 0;
      }
    }
  }
  remakerFamily_discardChannel((uint64_t)a1, v30);
  if (v18)
    CFRelease(v18);
  return v41;
}

uint64_t assetWriter_Flush()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 20)
    || *(_DWORD *)DerivedStorage >= 5u
    || *(_DWORD *)DerivedStorage <= 2u
    || *(_BYTE *)(DerivedStorage + 304) != 1)
  {
    return FigSignalErrorAt();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v1 = *(_QWORD *)(DerivedStorage + 184);
  v2 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v2)
    return v2(v1, 0);
  else
    return 4294954514;
}

uint64_t assetWriter_AddTaggedBufferGroup(const void *a1, int a2, OpaqueCMTaggedBufferGroup *a3, __int128 *a4)
{
  _DWORD *DerivedStorage;
  uint64_t ChannelByWriterTrackID;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  CFIndex v14;
  uint64_t v15;
  __CVBuffer *CVPixelBufferAtIndex;
  const void *v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  CMBufferRef buf;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  buf = 0;
  if (*DerivedStorage >= 7u)
    return FigSignalErrorAt();
  if (!DerivedStorage[5] && *DerivedStorage == 3)
  {
    if (a3)
    {
      if ((*((_DWORD *)a4 + 3) & 0x1D) == 1)
      {
        ChannelByWriterTrackID = assetWriter_getChannelByWriterTrackID((uint64_t)a1, a2);
        if (ChannelByWriterTrackID)
        {
          v10 = ChannelByWriterTrackID;
          if (*(_QWORD *)(ChannelByWriterTrackID + 16))
          {
            v11 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v11)
            {
              v12 = (const void *)v11;
              v13 = *(_DWORD *)(v11 + 32);
              if (v13 != 1986618469 && v13 != 1635088502)
              {
LABEL_23:
                v15 = FigSignalErrorAt();
                goto LABEL_24;
              }
              if (CMTaggedBufferGroupGetCount(a3) >= 1)
              {
                v14 = 0;
                while (CMTaggedBufferGroupGetCVPixelBufferAtIndex(a3, v14))
                {
                  if (++v14 >= CMTaggedBufferGroupGetCount(a3))
                    goto LABEL_15;
                }
                goto LABEL_23;
              }
LABEL_15:
              CFGetAllocator(a1);
              v20 = *a4;
              v21 = *((_QWORD *)a4 + 2);
              v15 = FigSampleBufferCreateForTaggedBufferGroup();
              if (!(_DWORD)v15)
              {
                if (!*(_BYTE *)(v10 + 104))
                {
LABEL_21:
                  v15 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v10 + 32), buf);
                  goto LABEL_24;
                }
                *(_QWORD *)&v20 = 0;
                CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
                v15 = assetWriter_copyPixelBufferAttributesForHintingEncoder(CVPixelBufferAtIndex, (CFDictionaryRef *)&v20);
                if (!(_DWORD)v15)
                {
                  v17 = (const void *)v20;
                  v18 = assetWriter_finishBuildingVideoTrackWithPixelBufferAttributes(a1, v10, (const __CFDictionary *)v20);
                  if (v17)
                    CFRelease(v17);
                  if ((_DWORD)v18)
                    goto LABEL_25;
                  goto LABEL_21;
                }
              }
LABEL_24:
              v18 = v15;
              goto LABEL_25;
            }
          }
        }
      }
    }
  }
  v18 = FigSignalErrorAt();
  v12 = 0;
LABEL_25:
  if (buf)
    CFRelease(buf);
  if (v12)
    CFRelease(v12);
  return v18;
}

uint64_t assetWriter_AddVideoTrackWithCompressionAndMediaType(const void *a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, const __CFDictionary *a7, const void *a8, uint64_t a9, __int128 *a10, const __CFDictionary *a11, _DWORD *a12)
{
  _DWORD *DerivedStorage;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, uint64_t);
  const __CFAllocator *v24;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  opaqueCMBufferQueue *v29;
  unsigned __int16 v30;
  uint64_t v31;
  uint64_t RemakerVideoEncoderSpecification;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  CFTypeRef v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  CFNumberRef v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, const __CFString *, CFNumberRef);
  int v46;
  CMTime time;
  CFTypeRef v49;
  uint64_t v50;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v49 = 0;
  v50 = 0;
  if (*DerivedStorage != 1 || (v19 = DerivedStorage, !a6) || !a12)
  {
    v20 = FigSignalErrorAt();
    goto LABEL_54;
  }
  v20 = remakerFamily_createChannel(a1, 0, a5, &v50);
  if ((_DWORD)v20)
    goto LABEL_54;
  v46 = a2;
  v21 = *((_QWORD *)v19 + 23);
  v22 = v50;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v23)
  {
    v31 = 4294954514;
    goto LABEL_17;
  }
  v20 = v23(v21, a5, 0, v22 + 300);
  if ((_DWORD)v20)
    goto LABEL_54;
  v20 = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v50 + 300));
  if ((_DWORD)v20)
    goto LABEL_54;
  v20 = remakerFamily_setFormatWriterProperties((uint64_t)a1, a6);
  if ((_DWORD)v20)
    goto LABEL_54;
  v24 = CFGetAllocator(a1);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v20 = CMBufferQueueCreate(v24, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(*(_QWORD *)(v50 + 160) + 32));
  if ((_DWORD)v20)
    goto LABEL_54;
  v26 = *(_QWORD *)(v50 + 160);
  remakerFamily_getLowWaterLevel(*((unsigned __int8 *)v19 + 32), (uint64_t)&time);
  *(CMTime *)(v26 + 40) = time;
  v27 = *(_QWORD *)(v50 + 160);
  remakerFamily_getHighWaterLevel(*((unsigned __int8 *)v19 + 32), (uint64_t)&time);
  *(CMTime *)(v27 + 64) = time;
  v28 = *(_QWORD *)(v50 + 160);
  v29 = *(opaqueCMBufferQueue **)(v28 + 32);
  time = *(CMTime *)(v28 + 40);
  v20 = CMBufferQueueInstallTrigger(v29, (CMBufferQueueTriggerCallback)assetWriterTrack_reachedLowWater, (void *)v28, 2, &time, (CMBufferQueueTriggerToken *)(v28 + 88));
  if ((_DWORD)v20)
  {
LABEL_54:
    v31 = v20;
    goto LABEL_17;
  }
  *(_BYTE *)(*(_QWORD *)(v50 + 160) + 104) = 1;
  if (a6 <= 1634743415)
  {
    if (a6 == 1634742376 || a6 == 1634742888)
      goto LABEL_24;
    v30 = 13416;
  }
  else
  {
    if ((a6 - 1634755432) <= 0xB && ((1 << (a6 - 104)) & 0x8C1) != 0
      || (a6 - 1634759272) <= 6 && ((1 << (a6 - 104)) & 0x51) != 0)
    {
      goto LABEL_24;
    }
    v30 = 13432;
  }
  if (a6 == (v30 | 0x61700000))
  {
LABEL_24:
    if (hasProResHWEncoder_pred != -1)
      dispatch_once(&hasProResHWEncoder_pred, &__block_literal_global_3);
    if (hasProResHWEncoder_hasProResHW == 1)
    {
      if (doesProResHWEncoderSupportInterlaced_pred != -1)
        dispatch_once(&doesProResHWEncoderSupportInterlaced_pred, &__block_literal_global_9);
      if ((doesProResHWEncoderSupportInterlaced_proResHWSupportsInterlaced & 1) == 0)
        FigCFDictionaryGetInt32IfPresent();
    }
  }
  RemakerVideoEncoderSpecification = remakerFamily_createRemakerVideoEncoderSpecification(a1, a7, (__CFDictionary **)&v49);
  if ((_DWORD)RemakerVideoEncoderSpecification)
    goto LABEL_55;
  RemakerVideoEncoderSpecification = remakerFamily_setupMultiPassTrackIfNecessary(a1, v50);
  if ((_DWORD)RemakerVideoEncoderSpecification)
    goto LABEL_55;
  v33 = v49;
  v34 = v50;
  v35 = *(_QWORD *)(v50 + 160);
  *(_DWORD *)(v35 + 212) = v46;
  *(_DWORD *)(v35 + 216) = a3;
  *(_DWORD *)(v35 + 220) = a6;
  if (v33)
  {
    v33 = CFRetain(v33);
    v34 = v50;
    v35 = *(_QWORD *)(v50 + 160);
  }
  *(_QWORD *)(v35 + 224) = v33;
  v36 = *a10;
  *(_QWORD *)(v35 + 248) = *((_QWORD *)a10 + 2);
  *(_OWORD *)(v35 + 232) = v36;
  if (a8)
  {
    v37 = CFRetain(a8);
    v34 = v50;
  }
  else
  {
    v37 = 0;
  }
  v38 = *(_QWORD *)(v34 + 160);
  *(_QWORD *)(v38 + 256) = v37;
  if (a11)
  {
    RemakerVideoEncoderSpecification = assetWriter_finishBuildingVideoTrackWithPixelBufferAttributes(a1, v38, a11);
    if ((_DWORD)RemakerVideoEncoderSpecification)
      goto LABEL_55;
  }
  else
  {
    RemakerVideoEncoderSpecification = VTSelectAndCreateVideoEncoderInstance();
    if ((_DWORD)RemakerVideoEncoderSpecification)
    {
LABEL_55:
      v31 = RemakerVideoEncoderSpecification;
      goto LABEL_17;
    }
  }
  v39 = v50;
  *a12 = *(_DWORD *)(v50 + 300);
  if ((*((_DWORD *)a10 + 3) & 0x1D) == 1)
  {
    v40 = *((_DWORD *)a10 + 2);
    if (v40 <= 600)
      v40 = 600;
    LODWORD(time.value) = v40;
    v41 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &time);
    v42 = *((_QWORD *)v19 + 23);
    v43 = *(unsigned int *)(v50 + 300);
    v44 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 24);
    if (v44)
      v44(v42, v43, CFSTR("MediaTimeScale"), v41);
    remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate((uint64_t)a1, (uint64_t)v41, a5);
    CFRelease(v41);
    v39 = v50;
  }
  remakerFamily_commitChannel((uint64_t)a1, v39);
  v31 = 0;
  v50 = 0;
LABEL_17:
  remakerFamily_discardChannel((uint64_t)a1, v50);
  if (v49)
    CFRelease(v49);
  return v31;
}

void assetWriterTrack_reachedLowWater(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;

  if (!a1 || !*(_QWORD *)(a1 + 16) || (v2 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
  {
    FigSignalErrorAt();
    return;
  }
  v3 = (const void *)v2;
  if (*(_QWORD *)(a1 + 16) && (v4 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    v5 = (void *)v4;
    v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v6)
    {
      v7 = (const void *)v6;
      if (*(_DWORD *)remakerFamily_getStorage() > 6u)
      {
        Mutable = 0;
      }
      else
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE10], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetInt32();
        remakerFamily_safelyPostNotification(v7, 1, (uint64_t)CFSTR("AssetWriter_TrackQueueNowBelowLowWaterLevel"), (uint64_t)Mutable, v7);
      }
      CFRelease(v5);
      CFRelease(v7);
      if (!Mutable)
        goto LABEL_14;
      v9 = Mutable;
    }
    else
    {
      v9 = (CFMutableDictionaryRef)v5;
    }
    CFRelease(v9);
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_14:
  CFRelease(v3);
}

uint64_t assetWriter_finishBuildingAudioTrackWithSourceFormatDescription(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  CMBaseObjectGetDerivedStorage();
  if (a2 && *(_QWORD *)(a2 + 16) && (v6 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    v7 = (_QWORD *)v6;
    v8 = 0;
    if (!a3 || !*(_BYTE *)(a2 + 104))
      goto LABEL_15;
    v9 = CFGetTypeID(a3);
    if (v9 == CMFormatDescriptionGetTypeID()
      && (*(_BYTE *)(a2 + 104) = 0, CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)a3) == 1819304813))
    {
      v10 = remakerFamily_buildMediaProcessorForAudioCompressionFromLPCMWithFormatWriter(a1, (uint64_t)v7, (const opaqueCMFormatDescription *)a3, (double *)(a2 + 112), *(_QWORD *)(a2 + 152), *(AudioChannelLayout **)(a2 + 160), *(_QWORD *)(a2 + 168), *(const void **)(a2 + 32));
      if (!(_DWORD)v10)
      {
        v11 = v7[36];
        if (v11)
          FigMediaProcessorGo(v11);
        v8 = 0;
        goto LABEL_15;
      }
      v8 = v10;
    }
    else
    {
      v8 = FigSignalErrorAt();
      if (!(_DWORD)v8)
        goto LABEL_15;
    }
    v12 = 0;
  }
  else
  {
    v8 = FigSignalErrorAt();
    if (!(_DWORD)v8)
      return v8;
    v7 = 0;
    v12 = 1;
  }
  remakerfamily_setFailureStatusIfError((uint64_t)a1, v8);
  remakerFamily_invalidateAllMediaProcessors();
  if ((v12 & 1) == 0)
LABEL_15:
    CFRelease(v7);
  return v8;
}

uint64_t assetWriter_getChannelByWriterTrackID(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  _DWORD *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v6);
    if (ValueAtIndex[75] == a2)
      break;
    if (v5 == ++v6)
      return 0;
  }
  return *((_QWORD *)ValueAtIndex + 20);
}

uint64_t assetWriter_finishBuildingVideoTrackWithPixelBufferAttributes(const void *a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int32_t v12;
  int32_t v13;
  CMVideoCodecType v14;
  const __CFDictionary *v15;
  const void *v16;
  const __CFDictionary *v17;
  uint64_t Pass;
  const void *v19;
  const __CFArray *v20;
  OpaqueVTCompressionSession *VTCompressionSession;
  const void *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  CMTimeRange *timeRangeArray;
  CFIndex v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v30 = 0;
  timeRangeArray = 0;
  if (a2)
  {
    v7 = (_DWORD *)DerivedStorage;
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v8)
      {
        v9 = v8;
        v10 = *(_DWORD *)(v8 + 32);
        if (v10 != 1635088502 && v10 != 1986618469)
        {
          v25 = FigSignalErrorAt();
LABEL_31:
          free(timeRangeArray);
LABEL_32:
          CFRelease((CFTypeRef)v9);
          return v25;
        }
        if (!*(_BYTE *)(a2 + 104))
        {
LABEL_26:
          v25 = 0;
          goto LABEL_31;
        }
        *(_BYTE *)(a2 + 104) = 0;
        v12 = *(_DWORD *)(a2 + 212);
        v13 = *(_DWORD *)(a2 + 216);
        v14 = *(_DWORD *)(a2 + 220);
        v15 = *(const __CFDictionary **)(a2 + 224);
        v16 = *(const void **)(a2 + 32);
        v27 = *(_OWORD *)(a2 + 232);
        v17 = *(const __CFDictionary **)(a2 + 256);
        v28 = *(_QWORD *)(a2 + 248);
        Pass = remakerFamily_setupCompressionMediaProcessorAndFileOutput(a1, v12, v13, v14, &v27, v15, a3, v8, v16, 0, v17);
        if (!(_DWORD)Pass)
        {
          v19 = *(const void **)(a2 + 224);
          if (v19)
          {
            CFRelease(v19);
            *(_QWORD *)(a2 + 224) = 0;
          }
          if (!*(_BYTE *)(v9 + 360) || !*(_BYTE *)(a2 + 204))
            goto LABEL_21;
          v20 = *(const __CFArray **)(v9 + 408);
          if (!v20
            || CFArrayGetCount(v20) < 1
            || (Pass = remakerFamily_createTimeRangesCArray(*(CFArrayRef *)(v9 + 408), &v30, &timeRangeArray),
                !(_DWORD)Pass)
            && (Pass = VTFrameSiloSetTimeRangesForNextPass(*(VTFrameSiloRef *)(v9 + 368), v30, timeRangeArray),
                !(_DWORD)Pass))
          {
            VTCompressionSession = (OpaqueVTCompressionSession *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(v9 + 288));
            Pass = VTCompressionSessionBeginPass(VTCompressionSession, *(_DWORD *)(a2 + 208), 0);
            if (!(_DWORD)Pass)
            {
              *(_BYTE *)(a2 + 204) = 0;
              *(_DWORD *)(a2 + 208) = 0;
LABEL_21:
              v22 = *(const void **)(a2 + 256);
              if (v22)
              {
                CFRelease(v22);
                *(_QWORD *)(a2 + 256) = 0;
              }
              if (*v7 == 3)
              {
                v23 = *(_QWORD *)(v9 + 288);
                if (v23)
                  FigMediaProcessorGo(v23);
              }
              goto LABEL_26;
            }
          }
        }
        v25 = Pass;
        v24 = 0;
LABEL_29:
        remakerfamily_setFailureStatusIfError((uint64_t)a1, v25);
        remakerFamily_invalidateAllMediaProcessors();
        free(timeRangeArray);
        if ((v24 & 1) != 0)
          return v25;
        goto LABEL_32;
      }
    }
  }
  v25 = FigSignalErrorAt();
  if ((_DWORD)v25)
  {
    v9 = 0;
    v24 = 1;
    goto LABEL_29;
  }
  return v25;
}

BOOL assetWriter_GetInputQueueLengthBeforeFormatWriterForTrackIndex@<W0>(const void *a1@<X0>, CFIndex a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t DerivedStorage;
  _QWORD *ValueAtIndex;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), a2);
  result = assetWriter_IsTrackNativeTrack(a1, ValueAtIndex[20]);
  if (result)
  {
    v9 = ValueAtIndex[20];
    *(_OWORD *)a3 = *(_OWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v9 + 80);
  }
  else
  {
    v11 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a3 = *MEMORY[0x1E0CA2E18];
    v10 = *(_QWORD *)(v11 + 16);
  }
  *(_QWORD *)(a3 + 16) = v10;
  return result;
}

BOOL assetWriter_IsTrackNativeTrack(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  CFAllocatorRef v10;
  uint64_t (*v11)(uint64_t, uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  int v12;
  CFTypeRef v13;
  _BOOL8 v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (a2)
  {
    v5 = DerivedStorage;
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v6)
      {
        v7 = (const void *)v6;
        v8 = *(_QWORD *)(v5 + 184);
        v9 = *(unsigned int *)(v6 + 300);
        v10 = CFGetAllocator(a1);
        v11 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v11)
        {
          v14 = 0;
          goto LABEL_10;
        }
        v12 = v11(v8, v9, CFSTR("SourceSampleBufferQueue"), v10, &cf);
        v13 = cf;
        if (v12)
        {
          v14 = 0;
          if (!cf)
            goto LABEL_10;
        }
        else
        {
          v14 = FigCFEqual() != 0;
          v13 = cf;
          if (!cf)
          {
LABEL_10:
            CFRelease(v7);
            return v14;
          }
        }
        CFRelease(v13);
        goto LABEL_10;
      }
    }
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t assetWriter_copyPixelBufferAttributesForHintingEncoder(__CVBuffer *a1, CFDictionaryRef *a2)
{
  const __CFAllocator *v3;
  CFDictionaryRef v4;
  uint64_t v5;
  CFTypeRef cf;
  OSType valuePtr;

  valuePtr = CVPixelBufferGetPixelFormatType(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (cf
    && (v4 = CFDictionaryCreate(v3, MEMORY[0x1E0CA9040], &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
  {
    v5 = 0;
    *a2 = v4;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t assetWriter_finishAsyncDispatch(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t result;

  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() != 4)
    return FigSignalErrorAt();
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage > 6u)
  {
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
    return remakerFamily_performLastStepIfComplete(a1);
  }
  v3 = DerivedStorage;
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  if (Count < 1)
  {
LABEL_9:
    *(_BYTE *)(v3 + 384) = 1;
    return remakerFamily_performLastStepIfComplete(a1);
  }
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 80), v6);
    result = remakerFamily_MarkEndOfDataForTrack((uint64_t)ValueAtIndex, 1);
    if ((_DWORD)result)
      return result;
    if (v5 == ++v6)
      goto LABEL_9;
  }
}

void __hasProResHWEncoder_block_invoke()
{
  __CFDictionary *Mutable;
  BOOL v1;
  CFIndex v2;
  CFArrayRef listOfVideoEncodersOut;

  listOfVideoEncodersOut = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCE0], (const void *)*MEMORY[0x1E0C9AE50]);
  if (VTCopyVideoEncoderList(Mutable, &listOfVideoEncodersOut))
    v1 = 1;
  else
    v1 = listOfVideoEncodersOut == 0;
  if (!v1)
  {
    if (CFArrayGetCount(listOfVideoEncodersOut) >= 1)
    {
      v2 = 0;
      do
      {
        CFArrayGetValueAtIndex(listOfVideoEncodersOut, v2);
        FigCFDictionaryGetBooleanIfPresent();
        ++v2;
      }
      while (v2 < CFArrayGetCount(listOfVideoEncodersOut));
    }
    CFRelease(listOfVideoEncodersOut);
  }
}

void __doesProResHWEncoderSupportInterlaced_block_invoke()
{
  __CFDictionary *Mutable;
  __CFDictionary *v1;
  const void *v2;
  const void *SInt32;
  const void *v4;
  VTSessionRef session;

  session = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v1 = Mutable;
    v2 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDD20], (const void *)*MEMORY[0x1E0C9AE50]);
    CFDictionarySetValue(v1, (const void *)*MEMORY[0x1E0CEDD38], v2);
    if (!VTCompressionSessionCreate(0, 1920, 1080, 0x6170636Eu, v1, 0, 0, 0, 0, (VTCompressionSessionRef *)&session))
    {
      SInt32 = (const void *)FigCFNumberCreateSInt32();
      if (SInt32)
      {
        v4 = SInt32;
        if (!VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x1E0CECFD8], SInt32))
          doesProResHWEncoderSupportInterlaced_proResHWSupportsInterlaced = 1;
        CFRelease(v4);
      }
      CFRelease(session);
    }
    CFRelease(v1);
  }
}

uint64_t FigManifoldGetClassID()
{
  MEMORY[0x19402F294](&FigManifoldGetClassID_sRegisterFigManifoldBaseTypeOnce, RegisterFigManifoldBaseType);
  return sFigManifoldClassID;
}

uint64_t RegisterFigManifoldBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigManifoldGetCFTypeID()
{
  MEMORY[0x19402F294](&FigManifoldGetClassID_sRegisterFigManifoldBaseTypeOnce, RegisterFigManifoldBaseType);
  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigManifoldRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void FigManifoldRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CMTime *fmi_CalculateMPEG2WrapForTime@<X0>(CMTime *result@<X0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v4;
  CMTimeValue value;
  unint64_t v7;
  uint64_t v8;
  CMTime v10;
  CMTime v11;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a3->value = *MEMORY[0x1E0CA2E18];
  a3->epoch = *(_QWORD *)(v4 + 16);
  if ((result->flags & 0x1D) == 1 && (a2->flags & 0x1D) == 1)
  {
    v10 = *result;
    CMTimeConvertScale(&v11, &v10, 90000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    value = v11.value;
    v10 = *a2;
    CMTimeConvertScale(&v11, &v10, 90000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    v7 = value & 0xFFFFFFFE00000000 | v11.value & 0x1FFFFFFFFLL;
    v8 = value - v7;
    if ((uint64_t)(value - v7) < 0 && ((v7 - value) & 0x100000000) != 0)
    {
      v7 -= 0x200000000;
    }
    else if ((v8 & 0x100000000) != 0 && v8 >= 1)
    {
      v7 += 0x200000000;
    }
    return CMTimeMake(a3, v7 - v11.value, 90000);
  }
  return result;
}

__n128 FigManifoldAdjustTimestampAndUpdateRefTime(CMTime *a1, CMTime *a2, __n128 *a3)
{
  __n128 result;
  CMTime v7;
  CMTime v8;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v12;

  memset(&v12, 0, sizeof(v12));
  if (a2 && (a1->flags & 0x1D) == 1 && (a2->flags & 0x1D) == 1)
  {
    lhs = *a2;
    rhs = *a1;
    CMTimeSubtract(&v12, &lhs, &rhs);
    lhs = v12;
    CMTimeAbsoluteValue(&time1, &lhs);
    *(_OWORD *)&lhs.value = FigManifoldAdjustTimestampAndUpdateRefTime_kAlmostHalfWrap;
    lhs.epoch = 0;
    if (CMTimeCompare(&time1, &lhs) >= 1)
    {
      memset(&lhs, 0, sizeof(lhs));
      rhs = *a1;
      v8 = *a2;
      fmi_CalculateMPEG2WrapForTime(&rhs, &v8, &lhs);
      v8 = *a2;
      v7 = lhs;
      CMTimeAdd(&rhs, &v8, &v7);
      result.n128_u64[0] = rhs.value;
      *a2 = rhs;
    }
    if (a3)
    {
      result = *(__n128 *)&a2->value;
      a3[1].n128_u64[0] = a2->epoch;
      *a3 = result;
    }
  }
  return result;
}

CFStringRef FigManifoldBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigManifold %p]"), a1);
}

uint64_t FigCaptionGroupConverterFromSampleBufferGetClassID()
{
  MEMORY[0x19402F294](&FigCaptionGroupConverterFromSampleBufferGetClassID_sRegisterFigCaptionGroupConverterFromSampleBufferBaseTypeOnce, RegisterFigCaptionGroupConverterFromSampleBufferBaseType);
  return sFigCaptionGroupConverterFromSampleBufferClassID;
}

uint64_t RegisterFigCaptionGroupConverterFromSampleBufferBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCaptionGroupConverterFromSampleBufferGetTypeID()
{
  MEMORY[0x19402F294](&FigCaptionGroupConverterFromSampleBufferGetClassID_sRegisterFigCaptionGroupConverterFromSampleBufferBaseTypeOnce, RegisterFigCaptionGroupConverterFromSampleBufferBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCaptionGroupConverterFromSampleBufferCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionGroupConverterFromSampleBuffer %p]"), a1);
}

uint64_t FigAIOClientCreate(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  MEMORY[0x19402F294](&gFigAIOInitOnce, figAIOInitOnce);
  if (gInitResult)
    return 0;
  v7 = MEMORY[0x19402EA0C](gFigAIOClientListLock);
  if ((_DWORD)v7)
    return v7;
  v8 = (_QWORD *)gFigAIOClientList;
  if (gFigAIOClientList)
  {
    while (*v8 != a2 || (const void *)v8[1] != a3)
    {
      v8 = (_QWORD *)v8[2];
      if (!v8)
        goto LABEL_7;
    }
    v11 = 0xFFFFFFFFLL;
  }
  else
  {
LABEL_7:
    v9 = malloc_type_malloc(0x20uLL, 0x10E004028FE4D45uLL);
    if (v9)
    {
      v10 = v9;
      *v9 = a2;
      if (a3)
        CFRetain(a3);
      v11 = 0;
      v10[2] = 0;
      v10[1] = a3;
      *(_QWORD *)qword_1EE29F2A8 = v10;
      qword_1EE29F2A8 = (uint64_t)(v10 + 2);
      *a4 = v10;
    }
    else
    {
      v11 = FigSignalErrorAt();
    }
  }
  MEMORY[0x19402EA24](gFigAIOClientListLock);
  return v11;
}

void figAIOInitOnce()
{
  __CFDictionary *Mutable;
  int v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA52C0], (const void *)*MEMORY[0x1E0C9AE40]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA52C8], CFSTR("com.apple.coremedia.asyncio"));
  gFigAIOClientListLock = FigReentrantMutexCreate();
  if (gFigAIOClientListLock
    && (gFigAIOClientList = 0,
        qword_1EE29F2A8 = (uint64_t)&gFigAIOClientList,
        (gFigAIORequestListLock = FigReentrantMutexCreate()) != 0))
  {
    gFigAIOPendingRequestList = 0;
    gFigAIOCompletedRequestList = 0;
    gFigAIORequestThreadWakeupSem = FigSemaphoreCreate();
    v1 = FigThreadCreate();
  }
  else
  {
    v1 = -1;
  }
  gInitResult = v1;
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t FigAIOClientRelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;

  v2 = MEMORY[0x19402EA0C](gFigAIOClientListLock);
  if (!(_DWORD)v2)
  {
    v3 = &gFigAIOClientList;
    do
    {
      v4 = *v3;
      v3 = (uint64_t *)(*v3 + 16);
      if (v4)
        v5 = v4 == a1;
      else
        v5 = 1;
    }
    while (!v5);
    if (v4)
      FinalizeClientRequestsOnList(a1, &gFigAIOPendingRequestList, 1);
    MEMORY[0x19402EA24](gFigAIOClientListLock);
  }
  return v2;
}

void FinalizeClientRequestsOnList(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  int v7;
  ssize_t v8;
  int v9;

  while (1)
  {
    MEMORY[0x19402EA0C](gFigAIORequestListLock);
    v6 = *a2;
    if (!*a2)
      break;
    while (*(_QWORD *)(v6 + 80) != a1)
    {
      v6 = *(_QWORD *)(v6 + 88);
      if (!v6)
        goto LABEL_8;
    }
    v7 = MEMORY[0x19402EA24](gFigAIORequestListLock);
    v9 = 0;
    v8 = 0;
    if (a3)
      v7 = FigAIOBlockUntilReady(v7, (aiocb *)v6, 1);
    FigAIOTryToComplete(v7, (aiocb *)v6, &v9, &v8);
  }
LABEL_8:
  JUMPOUT(0x19402EA24);
}

uint64_t FigAIOIssueRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v9 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A20409309F963uLL);
  if (!v9)
    return 4294949775;
  v10 = (uint64_t)v9;
  *v9 = FigFileGetDarwinFileDesc();
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 16) = a5;
  *(_QWORD *)(v10 + 24) = a4;
  if (!aio_read((aiocb *)v10))
  {
    *(_QWORD *)(v10 + 80) = a1;
    AddPendingRequest(v10);
  }
  v12 = *__error();
  free((void *)v10);
  return v12;
}

void AddPendingRequest(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x19402EA0C](gFigAIORequestListLock);
  v2 = gFigAIOPendingRequestList;
  *(_QWORD *)(a1 + 88) = gFigAIOPendingRequestList;
  if (v2)
    *(_QWORD *)(v2 + 96) = a1 + 88;
  gFigAIOPendingRequestList = a1;
  *(_QWORD *)(a1 + 96) = &gFigAIOPendingRequestList;
  FigSemaphoreSignal();
  JUMPOUT(0x19402EA24);
}

uint64_t FigAIOIssueWrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v9 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A20409309F963uLL);
  if (!v9)
    return 4294949775;
  v10 = (uint64_t)v9;
  *v9 = FigFileGetDarwinFileDesc();
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 16) = a5;
  *(_QWORD *)(v10 + 24) = a4;
  if (!aio_write((aiocb *)v10))
  {
    *(_QWORD *)(v10 + 80) = a1;
    AddPendingRequest(v10);
  }
  v12 = *__error();
  free((void *)v10);
  return v12;
}

uint64_t FigAIOTryToComplete(int a1, aiocb *aiocbp, int *a3, ssize_t *a4)
{
  uint64_t *v8;
  aiocb *v9;
  BOOL v10;
  off_t aio_offset;
  int v12;
  uint64_t *v13;
  aiocb *v14;
  BOOL v15;
  int v16;
  int v17;
  ssize_t v18;
  uint64_t *v19;
  aiocb *v20;
  BOOL v21;
  uint64_t *v22;
  aiocb *v23;
  BOOL v24;
  off_t v25;
  int v26;

  *a3 = -1;
  *a4 = 0;
  if (aio_error(aiocbp) == 36)
    return 0;
  MEMORY[0x19402EA0C](gFigAIORequestListLock);
  v8 = &gFigAIOCompletedRequestList;
  do
  {
    v9 = (aiocb *)*v8;
    v8 = (uint64_t *)(*v8 + 88);
    if (v9)
      v10 = v9 == aiocbp;
    else
      v10 = 1;
  }
  while (!v10);
  if (v9)
  {
    aio_offset = aiocbp[1].aio_offset;
    if (aio_offset)
      *(_QWORD *)(aio_offset + 96) = aiocbp[1].aio_buf;
    *(_QWORD *)aiocbp[1].aio_buf = aio_offset;
    v12 = 1;
  }
  else
  {
    v13 = &gFigAIOPendingRequestList;
    do
    {
      v14 = (aiocb *)*v13;
      v13 = (uint64_t *)(*v13 + 88);
      if (v14)
        v15 = v14 == aiocbp;
      else
        v15 = 1;
    }
    while (!v15);
    if (!v14)
    {
      MEMORY[0x19402EA24](gFigAIORequestListLock);
      return 0;
    }
    v12 = 0;
    LOBYTE(aiocbp[1].aio_nbytes) = 1;
  }
  MEMORY[0x19402EA24](gFigAIORequestListLock);
  *a4 = 0;
  v16 = aio_error(aiocbp);
  if (v16 == 36)
  {
    *a3 = 36;
  }
  else
  {
    v17 = v16;
    v18 = aio_return(aiocbp);
    *a4 = v18;
    if (v17 == -1 || v18 == -1)
      v17 = *__error();
    *a3 = v17;
    if (v17 == 22)
    {
      if (v9)
      {
        v12 = 1;
      }
      else
      {
        MEMORY[0x19402EA0C](gFigAIORequestListLock);
        v19 = &gFigAIOPendingRequestList;
        do
        {
          v20 = (aiocb *)*v19;
          v19 = (uint64_t *)(*v19 + 88);
          if (v20)
            v21 = v20 == aiocbp;
          else
            v21 = 1;
        }
        while (!v21);
        if (!v20)
        {
          v22 = &gFigAIOCompletedRequestList;
          do
          {
            v23 = (aiocb *)*v22;
            v22 = (uint64_t *)(*v22 + 88);
            if (v23)
              v24 = v23 == aiocbp;
            else
              v24 = 1;
          }
          while (!v24);
          if (!v23)
            goto LABEL_48;
        }
        if (LOBYTE(aiocbp[1].aio_nbytes))
        {
          v25 = aiocbp[1].aio_offset;
          if (v25)
            *(_QWORD *)(v25 + 96) = aiocbp[1].aio_buf;
          *(_QWORD *)aiocbp[1].aio_buf = v25;
          v12 = 1;
        }
        else
        {
LABEL_48:
          v12 = 0;
        }
        MEMORY[0x19402EA24](gFigAIORequestListLock);
      }
      v26 = FigAtomicIncrement32();
      if (v26 == 1)
      {
        beartrap_for_37975981_sBeartrapStartTime = FigGetUpTimeNanoseconds();
      }
      else if (v26 >= 20)
      {
        if ((unint64_t)(FigGetUpTimeNanoseconds() - beartrap_for_37975981_sBeartrapStartTime) <= 0x12A05F200)
          FigUserCrash();
        FigAtomicCompareAndSwap32();
      }
    }
  }
  if (v12)
    free(aiocbp);
  return 1;
}

uint64_t FigAIOBlockUntilReady(int a1, aiocb *aiocbp, int a3)
{
  int i;
  uint64_t result;
  __int128 v7;
  aiocb *aiocblist[2];

  aiocblist[1] = *(aiocb **)MEMORY[0x1E0C80C00];
  if (aio_error(aiocbp) != 36)
    return 0;
  aiocblist[0] = aiocbp;
  v7 = xmmword_1932F7040;
  if (a3)
    aio_cancel(aiocbp->aio_fildes, aiocbp);
  for (i = 0; ; i = aio_suspend((const aiocb *const *)aiocblist, 1, (const timespec *)&v7))
  {
    if (i != 4)
    {
      result = aio_error(aiocbp);
      if ((_DWORD)result != 36)
        break;
    }
  }
  return result;
}

void FigAIORequestThread()
{
  _QWORD *v0;
  int v1;
  const aiocb *aio_offset;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  off_t *p_aio_offset;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  timespec timeoutp;

  v0 = malloc_type_malloc(0x40uLL, 0x2004093837F09uLL);
  v1 = 8;
  while (1)
  {
    MEMORY[0x19402EA0C](gFigAIORequestListLock);
    aio_offset = (const aiocb *)gFigAIOPendingRequestList;
    if (!gFigAIOPendingRequestList)
    {
      MEMORY[0x19402EA24](gFigAIORequestListLock);
      goto LABEL_33;
    }
    v3 = 0;
    v4 = 0;
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t)aio_offset;
        v6 = aio_error(aio_offset);
        p_aio_offset = &aio_offset[1].aio_offset;
        aio_offset = (const aiocb *)aio_offset[1].aio_offset;
        if (v6 == 36)
          break;
        if (aio_offset)
          aio_offset[1].aio_buf = *(void **)(v5 + 96);
        **(_QWORD **)(v5 + 96) = aio_offset;
        if (*(_BYTE *)(v5 + 104))
        {
          free((void *)v5);
          if (!aio_offset)
            goto LABEL_21;
        }
        else
        {
          v9 = gFigAIOCompletedRequestList;
          *p_aio_offset = gFigAIOCompletedRequestList;
          if (v9)
            *(_QWORD *)(v9 + 96) = p_aio_offset;
          gFigAIOCompletedRequestList = v5;
          *(_QWORD *)(v5 + 96) = &gFigAIOCompletedRequestList;
          *(_BYTE *)(*(_QWORD *)(v5 + 80) + 24) = 1;
          ++v3;
          if (!aio_offset)
            goto LABEL_21;
        }
      }
      if (v4 == v1)
        break;
LABEL_8:
      v0[v4++] = v5;
      if (!aio_offset)
        goto LABEL_21;
    }
    v8 = malloc_type_realloc(v0, 8 * (v1 + 4), 0x2004093837F09uLL);
    if (v8)
      break;
    v4 = v1;
LABEL_21:
    MEMORY[0x19402EA24](gFigAIORequestListLock);
    if (v3 >= 1)
    {
      MEMORY[0x19402EA0C](gFigAIOClientListLock);
      do
      {
        v10 = gFigAIOClientList;
        if (!gFigAIOClientList)
          break;
        while (1)
        {
          if (*(_BYTE *)(v10 + 24))
          {
            *(_BYTE *)(v10 + 24) = 0;
            if (*(_QWORD *)v10)
              break;
          }
          v10 = *(_QWORD *)(v10 + 16);
          if (!v10)
            goto LABEL_30;
        }
        (*(void (**)(uint64_t, _QWORD))v10)(v10, *(_QWORD *)(v10 + 8));
      }
      while (v3-- > 0);
LABEL_30:
      MEMORY[0x19402EA24](gFigAIOClientListLock);
    }
    if (v4)
    {
      timeoutp = (timespec)xmmword_1932F7040;
      aio_suspend((const aiocb *const *)v0, v4, &timeoutp);
      continue;
    }
LABEL_33:
    FigSemaphoreWaitRelative();
  }
  v1 += 4;
  v0 = v8;
  goto LABEL_8;
}

uint64_t FPSupport_CheckPlayerPerformanceTrace()
{
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

BOOL FPSupport_IsPlayerPerformanceTraceEnabled()
{
  return dword_1EE2A29C8 != 0;
}

void FPSupport_TracePlayerPerformanceDictionary(uint64_t a1, void *a2)
{
  id v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = FPSupport_CopyDictionaryDescriptionAsCFString(a2);
  if (dword_1EE2A29C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v2)
    CFRelease(v2);
}

uint64_t FigByteFlumeGetTypeID()
{
  MEMORY[0x19402F294](&FigByteFlumeGetClassID_sRegisterFigByteFlumeBaseTypeOnce, RegisterFigByteFlumeBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigByteFlumeBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigByteFlume %p]"), a1);
}

uint64_t FigTTMLFeaturesCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  uint64_t v11;

  if (a4)
  {
    FigTTMLNodeGetClassID();
    v8 = CMDerivedObjectCreate();
    if (!(_DWORD)v8)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
      if (!(_DWORD)v8)
      {
        v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!(_DWORD)v8)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(DerivedStorage + 144) = Mutable;
          if (Mutable)
          {
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            v11 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLFeaturesConsumeChildNode, (uint64_t *)a3);
            if (!(_DWORD)v11)
              *a4 = 0;
            return v11;
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLFeaturesConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  CFTypeRef cf;
  CFTypeRef v13;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  value = 0;
  cf = 0;
  v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1)
    goto LABEL_8;
  v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v13, (CFStringRef *)&cf);
  if ((_DWORD)v8)
    goto LABEL_18;
  if (FigCFEqual() && FigCFEqual())
  {
    v9 = CFGetAllocator(*a2);
    v8 = FigTTMLFeatureCreate(v9, a1, (__int128 *)a2, &value);
    if (!(_DWORD)v8)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 144), value);
      goto LABEL_9;
    }
  }
  else
  {
LABEL_8:
    v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!(_DWORD)v8)
    {
LABEL_9:
      v10 = 0;
      if (a3)
      {
        *a3 = value;
        value = 0;
      }
      goto LABEL_11;
    }
  }
LABEL_18:
  v10 = v8;
LABEL_11:
  if (cf)
    CFRelease(cf);
LABEL_13:
  if (v13)
    CFRelease(v13);
  if (value)
    CFRelease(value);
  return v10;
}

void figTTMLFeatures_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 144);
  if (v1)
    CFRelease(v1);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLFeatures_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("features: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLFeatures_CopyChildNodeArray(const void *a1, __CFArray **a2)
{
  const __CFAllocator *v3;
  __CFArray *Mutable;
  uint64_t DerivedStorage;
  const __CFArray *v6;
  CFRange v7;
  uint64_t v8;

  v3 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = *(const __CFArray **)(DerivedStorage + 144);
    if (v6)
      v7.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 144));
    else
      v7.length = 0;
    v7.location = 0;
    CFArrayAppendArray(Mutable, v6, v7);
    v8 = 0;
    *a2 = Mutable;
  }
  else
  {
    v8 = FigSignalErrorAt();
    if (Mutable)
      CFRelease(Mutable);
  }
  return v8;
}

uint64_t figTTMLFeatures_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 16;
  return 0;
}

uint64_t FigAssetImageGeneratorCreateFromAssetRemote(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return FigAssetImageGeneratorCreateRemoteFromAssetWithOptions(a1, a2, 0, a3);
}

uint64_t FigAssetImageGeneratorCreateRemoteFromAssetWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t started;
  uint64_t ObjectID;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t uint64;
  uint64_t value;
  xpc_object_t v14;
  xpc_object_t xdict;
  CFTypeRef block[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v14 = 0;
  xdict = 0;
  value = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  block[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
  block[1] = (CFTypeRef)0x40000000;
  block[2] = __remoteXPCAIG_EnsureClientEstablished_block_invoke;
  block[3] = &unk_1E2F7B548;
  block[4] = &v17;
  if (remoteXPCAIG_EnsureClientEstablished_gAIGRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCAIG_EnsureClientEstablished_gAIGRemoteClientSetupOnce, block);
  started = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v17, 8);
  if ((_DWORD)started)
    goto LABEL_13;
  ObjectID = FigAssetXPCRemoteGetObjectID(a2, &value);
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  if (!a4)
  {
    ObjectID = FigSignalErrorAt();
LABEL_19:
    started = ObjectID;
LABEL_13:
    v9 = 0;
    goto LABEL_14;
  }
  block[0] = 0;
  FigAssetImageGeneratorGetClassID();
  v8 = CMDerivedObjectCreate();
  v9 = block[0];
  if ((_DWORD)v8)
  {
    started = v8;
    if (block[0])
      CFRelease(block[0]);
    goto LABEL_13;
  }
  v10 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v10)
  {
    xpc_dictionary_set_uint64(xdict, "Asset", value);
    v10 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v10)
    {
      v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v10)
      {
        uint64 = xpc_dictionary_get_uint64(v14, (const char *)*MEMORY[0x1E0CA36A0]);
        *(_QWORD *)CMBaseObjectGetDerivedStorage() = uint64;
        v10 = FigXPCRemoteClientAssociateObject();
        if (!(_DWORD)v10)
        {
          started = FigStartMonitoringMediaServicesProcessDeath();
          if ((_DWORD)started)
            goto LABEL_14;
          *a4 = v9;
          goto LABEL_13;
        }
      }
    }
  }
  started = v10;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  if (v9)
    CFRelease(v9);
  FigXPCRemoteClientKillServerOnTimeout();
  return started;
}

uint64_t remoteXPCAIG_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 9) = 1;
  return result;
}

uint64_t remoteXPCAIG_NotificationFilter(int a1, CFTypeRef cf1, void *a3, uint64_t a4, CFDictionaryRef *a5)
{
  int CMTime;
  CFAllocatorRef *v8;
  CFDictionaryRef v9;
  CFIndex v10;
  uint64_t v11;
  const __CFAllocator *v12;
  xpc_object_t value;
  const __CFAllocator *v14;
  CFNumberRef v15;
  CMTime v17[2];
  CFTypeRef cf;
  void *values;
  CFDictionaryRef v20;
  uint64_t v21;
  void *keys;
  const __CFString *v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!CFEqual(cf1, CFSTR("AIGDidGenerateCGImage")))
    return 0;
  memset(&v17[1], 0, sizeof(CMTime));
  v23 = 0;
  v24 = 0;
  v20 = 0;
  v21 = 0;
  if (!remoteXPCAIG_CopyCGImageFromMessage(a3, (uint64_t)&cf))
  {
    keys = CFSTR("CGImage");
    values = (void *)cf;
    CMTime = FigXPCMessageGetCMTime();
    v8 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (CMTime)
    {
      v9 = 0;
      v10 = 1;
    }
    else
    {
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v17[0] = v17[1];
      v9 = CMTimeCopyAsDictionary(v17, v12);
      v23 = CFSTR("FigTime");
      v20 = v9;
      v10 = 2;
    }
    value = xpc_dictionary_get_value(a3, "RequestID");
    if (value)
    {
      v17[0].value = xpc_int64_get_value(value);
      v14 = *v8;
      v15 = CFNumberCreate(v14, kCFNumberSInt64Type, v17);
      *(&keys + v10) = CFSTR("RequestID");
      *(&values + v10) = v15;
      *a5 = CFDictionaryCreate(v14, (const void **)&keys, (const void **)&values, v10 + 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v15)
        CFRelease(v15);
      if (!v9)
        goto LABEL_12;
    }
    else
    {
      *a5 = CFDictionaryCreate(*v8, (const void **)&keys, (const void **)&values, v10, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v9)
        goto LABEL_12;
    }
    CFRelease(v9);
LABEL_12:
    v11 = 4;
    goto LABEL_13;
  }
  v11 = 1;
LABEL_13:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t remoteXPCAIG_CopyCGImageFromMessage(void *a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  xpc_object_t value;
  IOSurfaceRef v7;
  uint64_t NumberValue;
  uint64_t CGImageFromIOSurfaceAndAttributes;
  uint64_t v10;
  size_t length;

  length = 0;
  if (xpc_dictionary_get_data(a1, "ImageParams", &length))
    v4 = length == 0;
  else
    v4 = 1;
  if (v4 || (v5 = MEMORY[0x19402EA9C](), !(_DWORD)v5))
  {
    FigXPCMessageCreateBlockBufferData();
    value = xpc_dictionary_get_value(a1, "IOSurface");
    if (value)
    {
      v7 = IOSurfaceLookupFromXPCObject(value);
      if (v7)
      {
        NumberValue = FigCFDictionaryGetNumberValue();
        CGImageFromIOSurfaceAndAttributes = FigCreateCGImageFromIOSurfaceAndAttributes(v7, 0, 1, NumberValue, a2);
      }
      else
      {
        CGImageFromIOSurfaceAndAttributes = FigSignalErrorAt();
      }
      v10 = CGImageFromIOSurfaceAndAttributes;
      goto LABEL_12;
    }
    v5 = FigSignalErrorAt();
  }
  v10 = v5;
  v7 = 0;
LABEL_12:
  if (v7)
    CFRelease(v7);
  return v10;
}

uint64_t remoteXPCAIG_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8)
    || (v1 = DerivedStorage,
        FigStopMonitoringMediaServicesProcessDeath(),
        *(_BYTE *)(v1 + 8) = 1,
        FigXPCRemoteClientDisassociateObject(),
        *(_BYTE *)(v1 + 9)))
  {
    v2 = 0;
  }
  else
  {
    v3 = FigXPCCreateBasicMessage();
    if ((_DWORD)v3)
      v2 = v3;
    else
      v2 = FigXPCRemoteClientSendAsyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

__CFString *remoteXPCAIG_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  const char *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  v6 = "";
  if (*(_BYTE *)(DerivedStorage + 8))
    v7 = " (invalidated)";
  else
    v7 = "";
  if (*(_BYTE *)(DerivedStorage + 9))
    v6 = "SERVER DIED";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAssetImageGeneratorRemote(XPC) %p retainCount: %ld%s ObjectID: %016llx%s>"), a1, v5, v7, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCAIG_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  CMBaseObjectGetDerivedStorage();
  result = 4294954863;
  if (a2)
  {
    if (a3)
      return remoteXPCAIG_GetObjectID(a1, &v7);
  }
  return result;
}

uint64_t remoteXPCAIG_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 9))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t remoteXPCAIG_CopyCGImageAtTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectID;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v12 = 0;
  ObjectID = remoteXPCAIG_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (FigXPCMessageSetCMTime(), a3) && (ObjectID = FigXPCMessageSetCFDictionary(), (_DWORD)ObjectID))
  {
    v10 = ObjectID;
  }
  else
  {
    v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v10)
    {
      v10 = remoteXPCAIG_CopyCGImageFromMessage(v13, a5);
      if (a6)
      {
        if (!(_DWORD)v10)
          FigXPCMessageGetCMTime();
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCAIG_RequestCGImageAtTimeAsync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  ObjectID = remoteXPCAIG_GetObjectID(a1, v7);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      FigXPCMessageSetCMTime();
      if (!a3 || (ObjectID = FigXPCMessageSetCFDictionary(), !(_DWORD)ObjectID))
        ObjectID = FigXPCRemoteClientSendSyncMessage();
    }
  }
  v5 = ObjectID;
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCAIG_CancelAllCGImageAsyncRequests(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteXPCAIG_GetObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendAsyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t crabsUpdateLength(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  uint64_t v5;
  CFNumberRef v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  CFNumberRef number;

  number = 0;
  FigBaseObject = FigByteFlumeGetFigBaseObject(a2);
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v4)
    return 4294954514;
  v5 = v4(FigBaseObject, CFSTR("FBF_EntireLength"), *MEMORY[0x1E0C9AE00], &number);
  v6 = number;
  if ((_DWORD)v5)
    v7 = 1;
  else
    v7 = number == 0;
  if (v7)
  {
    v8 = 0;
    if (number)
LABEL_11:
      CFRelease(v6);
  }
  else
  {
    v10 = 0;
    CFNumberGetValue(number, kCFNumberSInt64Type, &v10);
    v6 = number;
    v8 = v10 & ~(v10 >> 63);
    v5 = (v10 >> 63) & 0xFFFFCE11;
    if (number)
      goto LABEL_11;
  }
  if (!(_DWORD)v5)
    *(_QWORD *)(a1 + 56) = v8;
  return v5;
}

uint64_t crabsDiskBackingIsBusy(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  BOOL v8;
  CFTypeRef cf;

  result = *(unsigned __int8 *)(a1 + 24);
  if (result | a2)
  {
    cf = 0;
    *(_BYTE *)(a1 + 24) = 0;
    FigBaseObject = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(a1 + 8));
    v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v5)
    {
      v6 = v5(FigBaseObject, CFSTR("CacheIsBusy"), *MEMORY[0x1E0C9AE00], &cf);
      v7 = cf;
      if (v6)
        v8 = 0;
      else
        v8 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
      if (v8)
        *(_BYTE *)(a1 + 24) = 1;
      if (v7)
        CFRelease(v7);
    }
    return *(unsigned __int8 *)(a1 + 24);
  }
  return result;
}

uint64_t crabsInitialize(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  const __CFAllocator *v13;
  const void *SInt64;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, const void *);
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, const void *);
  CFNumberRef v21;
  CFNumberRef v22;
  uint64_t v23;
  void (*v24)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v25;
  unsigned int (*v26)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v27;
  CFTypeRef v28;
  unsigned int (*v29)(uint64_t, CFTypeRef);
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  const void *v33;
  _QWORD *v34;
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD *);
  int valuePtr;
  CFTypeRef v38;
  CFTypeRef cf;

  if (*(_QWORD *)(a1 + 80))
    return 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 == -1)
    return 0;
  v4 = 0x10000;
  if (v3 < 6291456)
    v4 = 0x4000;
  *(_QWORD *)(a1 + 96) = v4;
  v5 = (v3 + v4 - 1) / v4;
  v6 = malloc_type_calloc(v5, 8uLL, 0x2004093837F09uLL);
  *(_QWORD *)(a1 + 80) = v6;
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v5;
    if (*(_QWORD *)(a1 + 168) || (v7 = FigReadWriteLockCreate(), (*(_QWORD *)(a1 + 168) = v7) != 0))
    {
      v8 = malloc_type_calloc(1uLL, *(_QWORD *)(a1 + 96), 0xE6C46140uLL);
      *(_QWORD *)(a1 + 152) = v8;
      if (v8)
      {
        *(_QWORD *)(a1 + 160) = -1;
        v9 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 232) = v9;
        *(_QWORD *)(a1 + 360) = v9;
        if (*(uint64_t *)(a1 + 184) >= 1)
        {
          v10 = 0;
          v11 = *(_QWORD *)(a1 + 192);
          do
            *(_QWORD *)(v11 + 8 * v10++) = *(_QWORD *)(a1 + 88);
          while (v10 < *(_QWORD *)(a1 + 184));
        }
        *(_QWORD *)&v12 = -1;
        *((_QWORD *)&v12 + 1) = -1;
        *(_OWORD *)(a1 + 424) = v12;
        *(_OWORD *)(a1 + 440) = v12;
        *(_QWORD *)(a1 + 472) = (*(_QWORD *)(a1 + 96) + 0x3FFFFFLL) / *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 480) = 4;
        if (!*(_QWORD *)(a1 + 8))
          return 0;
        v38 = 0;
        cf = 0;
        v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        SInt64 = (const void *)FigCFNumberCreateSInt64();
        FigBaseObject = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(a1 + 8));
        v16 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
        if (v16)
          v16(FigBaseObject, CFSTR("CacheSize"), SInt64);
        v17 = FigCFNumberCreateSInt64();
        if (v17)
        {
          v18 = (const void *)v17;
          v19 = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(a1 + 8));
          v20 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
          if (v20)
            v20(v19, CFSTR("CacheBlockSize"), v18);
          CFRelease(v18);
        }
        valuePtr = 16;
        v21 = CFNumberCreate(v13, kCFNumberSInt32Type, &valuePtr);
        if (v21)
        {
          v22 = v21;
          v23 = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(a1 + 8));
          v24 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (v24)
            v24(v23, CFSTR("CacheMapEntrySize"), v22);
          CFRelease(v22);
        }
        if ((*(_BYTE *)(a1 + 504) & 4) == 0)
        {
          v25 = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(a1 + 8));
          v26 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v26)
          {
            if (!v26(v25, CFSTR("CacheIdentifier"), v13, &cf))
            {
              v27 = *(_QWORD *)(a1 + 32);
              v28 = cf;
              v29 = *(unsigned int (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
              if (v29 && v29(v27, v28))
              {
                if (!FigDiskCacheProviderCopyProperty(*(_QWORD *)(a1 + 8), (uint64_t)CFSTR("CacheMap"), (uint64_t)v13, (uint64_t)&v38))
                {
                  v30 = *(_QWORD *)(a1 + 8);
                  v31 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                  if (v31)
                  {
                    v32 = v31(v30);
                    if (v32)
                    {
                      if (crabsRestoreCache(a1, (CFDataRef)v38, v32, *(_QWORD *)(a1 + 56)))
                        FigDiskCacheProviderSetProperty(*(_QWORD *)(a1 + 8), (uint64_t)CFSTR("CacheMap"), 0);
                    }
                  }
                }
LABEL_39:
                if (cf)
                  CFRelease(cf);
                if (v38)
                  CFRelease(v38);
                if (SInt64)
                  CFRelease(SInt64);
                return 0;
              }
              FigDiskCacheProviderSetProperty(*(_QWORD *)(a1 + 8), (uint64_t)CFSTR("CacheMap"), 0);
            }
          }
        }
        v34 = (_QWORD *)(a1 + 144);
        v33 = *(const void **)(a1 + 144);
        if (v33)
        {
          CFRelease(v33);
          *v34 = 0;
        }
        v35 = *(_QWORD *)(a1 + 32);
        v36 = *(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v36)
          v36(v35, v34);
        goto LABEL_39;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigReportingAgentStatsSetIntValue(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  if (result)
  {
    v7 = result;
    result = CMBaseObjectGetVTable();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 56);
    if (v8)
      return v8(v7, a2, a3, a4, 0);
  }
  return result;
}

uint64_t FigCRABSPrintWorkingSet()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  int v2;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  printf("FigCRABSPrintWorkingSet stream [%p]", DerivedStorage);
  v1 = DerivedStorage[39];
  if (!v1)
    return printf("<%d>\n", DerivedStorage[28]);
  v2 = 0;
  do
  {
    if (*(_QWORD *)(v1 + 80) && DerivedStorage[28] == *(_DWORD *)v1)
    {
      v2 = 1;
      printf("[%d] ");
    }
    else
    {
      printf("%d ");
    }
    v1 = *(_QWORD *)(v1 + 32);
  }
  while (v1);
  if (v2)
    return putchar(10);
  else
    return printf("<%d>\n", DerivedStorage[28]);
}

void gdbShowCRABSStats()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  uint64_t i;
  void *values[2];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *keys[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  keys[0] = (void *)CFRetain(CFSTR("cacheMemAllotted"));
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = (void *)FigCFNumberCreateSInt64();
  keys[1] = (void *)CFRetain(CFSTR("diskCacheAllotted"));
  values[1] = (void *)FigCFNumberCreateSInt64();
  v1 = CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 1; i != -1; --i)
  {
    CFRelease(keys[i]);
    CFRelease(values[i]);
  }
  puts(" Statistics for FigByteStream_CRABS:");
  CFShow(v1);
  if (v1)
    CFRelease(v1);
}

uint64_t *gdbDumpCRABSWorkingSet(uint64_t *result)
{
  uint64_t i;

  for (i = *result; i; i = *(_QWORD *)(i + 32))
    result = (uint64_t *)printf(" Mem block %d has MemIsland <%p>\n", *(_DWORD *)i, *(const void **)(i + 80));
  return result;
}

__CFString *FigCRABSCopyDebugDescription()
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;
  int **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  FigRetainProxyLockMutex();
  if (DerivedStorage[7] == -1 || (v2 = (int **)DerivedStorage[10]) == 0)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("FigByteStream_CRABS: Uninitialized"));
  }
  else
  {
    v3 = DerivedStorage[11];
    if (v3 < 1)
    {
      v9 = 0;
      v8 = 0;
      v7 = 0;
      v6 = 0;
      v5 = 0;
      v4 = 0;
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = *v2;
        if (*v2)
        {
          v11 = *((_QWORD *)v10 + 10);
          if (v11)
          {
            v5 = (v5 + 1);
            if (*(int *)(v11 + 24) <= 0)
              v8 = v8;
            else
              v8 = (v8 + 1);
          }
          v12 = *((unsigned __int16 *)v10 + 4);
          if ((v12 & 0x200) != 0)
            v13 = (v12 >> 8) & 1;
          else
            v13 = *((_QWORD *)v10 + 11) != 0;
          v9 = (v9 + 1);
          v4 = (v13 + v4);
          if (DerivedStorage[28] <= *v10)
            v6 = (v6 + 1);
          else
            v7 = (v7 + 1);
        }
        ++v2;
        --v3;
      }
      while (v3);
    }
    CFStringAppendFormat(Mutable, 0, CFSTR("FigByteStream_CRABS: \n\t\t# active cache blocks <%d>\n\t\t# in-memory cache blocks <%d>\n\t\t# referenced cache blocks <%d>\n\t\t# on disk <%d>\n\t\t# in state Backfill <%d>\n\t\t# in state Follows Hints <%d>"), v9, v5, v8, v4, v7, v6);
  }
  FigRetainProxyUnlockMutex();
  return Mutable;
}

uint64_t crabsCompleteLazySync(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  ssize_t v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  if (!*(_QWORD *)(a1 + 728))
    return 0;
  if (a2)
    FigAIOBlockUntilReady(*(_QWORD *)(a1 + 720), *(aiocb **)(a1 + 736), 0);
  v11 = 0;
  v3 = FigAIOTryToComplete(*(_QWORD *)(a1 + 720), *(aiocb **)(a1 + 736), (int *)&v12, &v11);
  result = v12;
  if (v3)
  {
    v5 = a1 + 728;
    if (v12)
    {
      if (v12 == 69 || v12 == 28)
      {
        *(_BYTE *)(a1 + 135) = 1;
        if (*(_BYTE *)(a1 + 112))
        {
          *(_BYTE *)(a1 + 112) = 0;
          *(_WORD *)(a1 + 176) |= 8u;
          if (dword_1EE2A29E8)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      *(_WORD *)(*(_QWORD *)v5 + 8) |= 8u;
      FigSignalErrorAt();
    }
    v7 = *(_QWORD **)v5;
    if ((*(_WORD *)(*(_QWORD *)v5 + 8) & 8) != 0)
    {
      v10 = 1;
    }
    else
    {
      v8 = *(int *)v7;
      v9 = *(_QWORD *)(a1 + 224);
      v10 = v9 <= v8 && v9 + *(_QWORD *)(a1 + 344) / 4 > v8;
    }
    crabsReleaseWorking((_QWORD *)a1, v7, v10, 1);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(a1 + 736) = 0;
    return v12;
  }
  return result;
}

uint64_t crabsCompleteLazyPagein(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  ssize_t v6;
  unsigned int v7;

  v7 = 0;
  if (!*(_QWORD *)(a1 + 744))
    return 0;
  if (a2)
    FigAIOBlockUntilReady(*(_QWORD *)(a1 + 720), *(aiocb **)(a1 + 752), 0);
  v6 = 0;
  v3 = FigAIOTryToComplete(*(_QWORD *)(a1 + 720), *(aiocb **)(a1 + 752), (int *)&v7, &v6);
  result = v7;
  if (v3)
  {
    if (v7)
      crabsMarkBlockUnbacked(a1, *(int **)(a1 + 744), *(_QWORD *)(a1 + 224) <= **(int **)(a1 + 744));
    crabsReleaseWorking((_QWORD *)a1, *(_QWORD **)(a1 + 744), 1, 1);
    v5 = *(_QWORD *)(a1 + 744);
    if ((~*(unsigned __int16 *)(v5 + 8) & 5) == 0)
      crabsUnhint(a1, v5);
    *(_QWORD *)(a1 + 744) = 0;
    *(_QWORD *)(a1 + 752) = 0;
    return v7;
  }
  return result;
}

uint64_t crabsSyncCache(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, int *);
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  CFDataRef v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t FigBaseObject;
  void (*v32)(uint64_t, const __CFString *, uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t, const __CFString *, CFDataRef);

  v2 = *(_DWORD *)(a1 + 504);
  if ((v2 & 5) == 4 && !*(_BYTE *)(a1 + 136))
    return 0;
  v3 = *(_QWORD *)(a1 + 88);
  if ((v2 & 1) == 0)
  {
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = 0;
      while (1)
      {
        v6 = *(int **)(*(_QWORD *)(a1 + 80) + 8 * v4);
        if (v6)
          break;
LABEL_35:
        if (v3 <= ++v4)
          goto LABEL_58;
      }
      v7 = *((unsigned __int16 *)v6 + 4);
      if ((v7 & 0x80) != 0 && ((v7 & 0x40) != 0 || *(_BYTE *)(a1 + 136)))
      {
        crabsMakeBackingNonvolatile((_QWORD *)a1, (uint64_t)v6, *(_QWORD *)(a1 + 224) <= *v6);
        v7 = *((unsigned __int16 *)v6 + 4);
      }
      if ((v7 & 0x10) != 0)
      {
        if ((v7 & 0x100) != 0)
          goto LABEL_20;
      }
      else if ((v7 & 0x100) != 0 || !*(_BYTE *)(a1 + 136))
      {
        goto LABEL_20;
      }
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(a1 + 96);
        v10 = *v6;
        v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
        if (!v11)
        {
          v7 = *((unsigned __int16 *)v6 + 4);
          if ((v7 & 0x40) == 0)
            goto LABEL_34;
LABEL_21:
          if (*((_QWORD *)v6 + 10))
            goto LABEL_28;
          if ((v7 & 0x200) == 0)
          {
            if (!*((_QWORD *)v6 + 11))
              goto LABEL_34;
LABEL_28:
            v13 = v6[1];
            v14 = FigFileForkWrite();
            if ((_DWORD)v14)
              v15 = 0;
            else
              v15 = v13 == 0;
            if (!v15)
              goto LABEL_78;
            v7 = v6[2] & 0xFFBF;
            *((_WORD *)v6 + 4) &= ~0x40u;
            goto LABEL_34;
          }
          if (((v7 >> 8) & 1) != 0)
            goto LABEL_28;
LABEL_34:
          v5 += (v7 >> 8) & 1;
          v3 = *(_QWORD *)(a1 + 88);
          goto LABEL_35;
        }
        v12 = v11(v8, v9, v9 * v10, a1 + 16, v6 + 24);
        v7 = *((unsigned __int16 *)v6 + 4);
        if (v12)
        {
          v7 |= 0x140u;
          *((_WORD *)v6 + 4) = v7;
        }
      }
LABEL_20:
      if ((v7 & 0x40) == 0)
        goto LABEL_34;
      goto LABEL_21;
    }
    goto LABEL_57;
  }
  if (v3 >= 1)
  {
    v16 = 0;
    v5 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v16);
      if (v17)
        break;
LABEL_55:
      if (v3 <= ++v16)
        goto LABEL_58;
    }
    if (!*(_QWORD *)(v17 + 80))
      goto LABEL_54;
    v18 = *(unsigned __int16 *)(v17 + 8);
    if ((v18 & 8) == 0 && v17 != *(_QWORD *)(a1 + 728))
      goto LABEL_54;
    if ((v18 & 0x200) != 0)
    {
      if (((v18 >> 8) & 1) == 0)
        goto LABEL_47;
    }
    else if (!*(_QWORD *)(v17 + 88))
    {
LABEL_47:
      if (crabsAllocBacking(a1, (int *)v17))
        crabsAddBlockToBackedList((uint64_t *)a1, (int *)v17);
    }
    v19 = *(unsigned __int16 *)(v17 + 8);
    if ((v19 & 0x200) == 0)
    {
      if (!*(_QWORD *)(v17 + 88))
        goto LABEL_54;
LABEL_53:
      v14 = crabsSyncBlock(a1, v17);
      if ((_DWORD)v14)
        goto LABEL_78;
      goto LABEL_54;
    }
    if (((v19 >> 8) & 1) != 0)
      goto LABEL_53;
LABEL_54:
    v5 += HIBYTE(*(unsigned __int16 *)(v17 + 8)) & 1;
    v3 = *(_QWORD *)(a1 + 88);
    goto LABEL_55;
  }
LABEL_57:
  v5 = 0;
LABEL_58:
  v20 = (char *)malloc_type_malloc(16 * (int)(v5 - 1) + 32, 0xEEE1D236uLL);
  if (v20)
  {
    v21 = v20;
    *(_QWORD *)v20 = 0x6261726305000000;
    *((_DWORD *)v20 + 2) = bswap32(*(_DWORD *)(a1 + 96));
    *((_DWORD *)v20 + 3) = bswap32(v5);
    v22 = *(_QWORD *)(a1 + 88);
    if (v22 >= 1)
    {
      v23 = 0;
      v24 = v20 + 16;
      v25 = *(_QWORD *)(a1 + 80);
      do
      {
        v26 = *(_QWORD *)(v25 + 8 * v23);
        if (v26 && (*(_WORD *)(v26 + 8) & 0x100) != 0)
        {
          *((_QWORD *)v24 + 1) = bswap64(*(_QWORD *)(v26 + 96));
          v27 = bswap32(*(_DWORD *)(v26 + 4));
          *(_DWORD *)v24 = bswap32(v23);
          *((_DWORD *)v24 + 1) = v27;
          v24 += 16;
        }
        ++v23;
      }
      while (v22 != v23);
    }
    v28 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v20, 16 * (int)(v5 - 1) + 32);
    if (v28)
      v29 = 0;
    else
      v29 = FigSignalErrorAt();
    free(v21);
  }
  else
  {
    v14 = FigSignalErrorAt();
LABEL_78:
    v29 = v14;
    v28 = 0;
  }
  v30 = *(_QWORD *)(a1 + 144);
  if (v30)
  {
    FigBaseObject = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(a1 + 8));
    v32 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v32)
      v32(FigBaseObject, CFSTR("CacheIdentifier"), v30);
  }
  v33 = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(a1 + 8));
  v34 = *(void (**)(uint64_t, const __CFString *, CFDataRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v34)
    v34(v33, CFSTR("CacheMap"), v28);
  if (v28)
    CFRelease(v28);
  return v29;
}

void crabsReleaseDiskCacheProviderAsync(const void **a1)
{
  const void *v2;
  void *v3;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  v3 = (void *)a1[1];
  if (v3)
    os_release(v3);
  free(a1);
}

uint64_t crabsRetainProxyUnlockWithActions()
{
  uint64_t DerivedStorage;

  if (FigRetainProxyIsInvalidated())
    return FigRetainProxyUnlockMutex();
  FigRetainProxyGetOwner();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return crabsUnlockWithActions(DerivedStorage);
}

uint64_t crabsDeferredUnlockWithActions()
{
  const void *Owner;
  uint64_t DerivedStorage;
  const void **v2;
  __int16 v3;
  int v4;
  int v5;
  CFAllocatorRef *v6;
  CFDictionaryRef v7;
  const __CFString *v8;
  int v9;
  const __CFAllocator *v10;
  CFDictionaryRef v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  unsigned int v14;
  unsigned int v15;
  const void *v16;
  const __CFAllocator *v17;
  CFDictionaryRef v18;
  const void *v19;
  const __CFAllocator *v20;
  CFDictionaryRef v21;
  int valuePtr;
  void *values;
  int v25;
  const char *v26;
  __int16 v27;
  const void **v28;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  FigRetainProxyLockMutex();
  Owner = (const void *)FigRetainProxyGetOwner();
  if (FigRetainProxyIsInvalidated())
  {
    FigRetainProxyUnlockMutex();
    goto LABEL_46;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = (const void **)DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 104))
    v3 = *(_WORD *)(DerivedStorage + 176);
  else
    LOBYTE(v3) = 0;
  v4 = *(unsigned __int8 *)(DerivedStorage + 24);
  v5 = *(unsigned __int8 *)(DerivedStorage + 135);
  *(_WORD *)(DerivedStorage + 176) = 0;
  FigRetainProxyUnlockMutex();
  if ((v3 & 4) != 0)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if ((v3 & 3) != 0)
  {
    v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v7)
      CFRelease(v7);
  }
  if ((v3 & 8) != 0)
  {
    values = 0;
    valuePtr = 0;
    if (v4)
    {
      v8 = CFSTR("Cache is Busy");
      v9 = -12542;
    }
    else
    {
      if (!v5)
      {
        v11 = 0;
        goto LABEL_17;
      }
      v8 = CFSTR("Disk is Full");
      v9 = -12541;
    }
    valuePtr = v9;
    v10 = *v6;
    values = CFNumberCreate(*v6, kCFNumberSInt32Type, &valuePtr);
    v11 = CFDictionaryCreate(v10, (const void **)kFigCachedReadAheadByteStreamParameter_StatusCode, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    crabsReportingReportError((uint64_t)v2, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)v8, valuePtr);
LABEL_17:
    crabsReportingIssueEvent((uint64_t)v2, 401);
    crabsReportingIssueIRATEventIfNeeded((uint64_t)v2, 801);
    if (dword_1EE2A29E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (values)
      CFRelease(values);
    if (v11)
      CFRelease(v11);
  }
  if ((v3 & 0x20) != 0)
  {
    if (dword_1EE2A29E8)
    {
      LODWORD(values) = 0;
      LOBYTE(valuePtr) = 0;
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v14 = values;
      if (os_log_type_enabled(v13, (os_log_type_t)valuePtr))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if (v15)
      {
        v25 = 136315394;
        v26 = "crabsDeferredUnlockWithActions";
        v27 = 2048;
        v28 = v2;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v16 = v2[119];
    if (*((_DWORD *)v2 + 236))
    {
      if (!v16)
      {
        v17 = *v6;
        cf[0] = CFNumberCreate(*v6, kCFNumberIntType, v2 + 118);
        v18 = CFDictionaryCreate(v17, (const void **)kFigCachedReadAheadByteStreamParameter_ReadResult, cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (cf[0])
          CFRelease(cf[0]);
        goto LABEL_37;
      }
LABEL_36:
      v18 = CFDictionaryCreate(*v6, (const void **)kFigCachedReadAheadByteStreamParameter_ReadCFError, v2 + 119, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
LABEL_37:
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      crabsReportingReportError((uint64_t)v2, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)CFSTR("CRABS Read Error"), *((_DWORD *)v2 + 236));
      v19 = v2[119];
      if (v19)
      {
        CFRelease(v19);
        v2[119] = 0;
      }
      *((_DWORD *)v2 + 236) = 0;
      if (v18)
        CFRelease(v18);
      goto LABEL_41;
    }
    if (v16)
      goto LABEL_36;
  }
LABEL_41:
  if ((v3 & 0x40) != 0)
  {
    v20 = *v6;
    cf[0] = CFNumberCreate(*v6, kCFNumberSInt32Type, (char *)v2 + 108);
    v21 = CFDictionaryCreate(v20, (const void **)kFigCachedReadAheadByteStreamParameter_ConnectionState, cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (cf[0])
      CFRelease(cf[0]);
    if (v21)
      CFRelease(v21);
  }
LABEL_46:
  if (Owner)
    CFRelease(Owner);
  return FigRetainProxyRelease();
}

uint64_t crabsReportingReportError(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v5;
  void (*v9)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  if (result)
  {
    v4 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 920);
    if (v5)
    {
      v9 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 48);
      if (v9)
        v9(v5, CFSTR("crabsStats"), CFSTR("CRABSErrMsg"), a3, 0);
      v10 = v4[115];
      if (!v10)
        goto LABEL_23;
      v11 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v11)
        v11(v10, CFSTR("crabsStats"), CFSTR("CRABSErrCode"), a4, 0);
      v12 = v4[115];
      if (v12)
      {
        v13 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 48);
        if (v13)
          v13(v12, CFSTR("crabsStats"), CFSTR("CRABSErrDomain"), a2, 0);
        v14 = v4[115];
      }
      else
      {
LABEL_23:
        v14 = 0;
      }
      if (v4[7] == -1)
      {
        v15 = 1;
        if (!v14)
          return crabsReportingIssueEvent((uint64_t)v4, 402);
      }
      else
      {
        if (v4[10])
          v15 = 2;
        else
          v15 = 1;
        if (!v14)
          return crabsReportingIssueEvent((uint64_t)v4, 402);
      }
      v16 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v16)
        v16(v14, CFSTR("crabsStats"), CFSTR("CRABSErrType"), v15, 0);
      return crabsReportingIssueEvent((uint64_t)v4, 402);
    }
  }
  return result;
}

uint64_t crabsReportingIssueEvent(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);

  if (result)
  {
    v2 = *(_QWORD *)(result + 920);
    if (v2)
    {
      result = CMBaseObjectGetVTable();
      v4 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 8);
      if (v4)
        return v4(v2, CFSTR("crabsStats"), a2, 0, 0);
    }
  }
  return result;
}

uint64_t crabsReportingIssueIRATEventIfNeeded(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  if (result)
  {
    v3 = result;
    if ((_DWORD)a2 == 800)
      v4 = 1;
    else
      v4 = 2;
    v5 = *(_DWORD *)(result + 928);
    if (!v5)
    {
      v6 = *(_QWORD *)(result + 920);
      if (v6)
      {
        result = CMBaseObjectGetVTable();
        v7 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(result + 16)
                                                                                            + 56);
        if (v7)
          result = v7(v6, CFSTR("crabsStats"), CFSTR("IRAT_TimeHorizon"), 300, 0);
      }
    }
    if (v4 != v5)
    {
      result = crabsReportingIssueEvent(v3, a2);
      *(_DWORD *)(v3 + 928) = v4;
    }
  }
  return result;
}

uint64_t crabsMarkBlockUnbacked(uint64_t a1, int *a2, int a3)
{
  int v6;
  uint64_t result;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  __int16 v15;

  v6 = a2[1];
  result = crabsMarkBlockUnfilled(a1, (uint64_t)a2);
  *((_QWORD *)a2 + 12) = -1;
  v8 = *((_WORD *)a2 + 4);
  *((_WORD *)a2 + 4) = v8 & 0xFEFF;
  ++*(_QWORD *)(a1 + 408);
  if ((v8 & 0x11) == 0)
  {
    if (a3)
      v9 = a1 + 264;
    else
      v9 = a1 + 280;
    result = removeFromList(a1, v9, (uint64_t)a2, 0);
  }
  v10 = *a2;
  v11 = *(_QWORD *)(a1 + 224);
  if (v11 <= v10)
  {
    v12 = *(_QWORD *)(a1 + 240);
    if (v12 < v11 || v12 > v10)
      *(_QWORD *)(a1 + 240) = v10;
  }
  if (v6)
  {
    if (*(_BYTE *)(a1 + 128))
      v14 = 1;
    else
      v14 = v11 <= v10;
    if (v14)
      v15 = 2;
    else
      v15 = 1;
    *(_WORD *)(a1 + 176) |= v15;
    *(_BYTE *)(a1 + 128) = 0;
  }
  return result;
}

uint64_t FigDiskCacheProviderSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigDiskCacheProviderGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(FigBaseObject, a2, a3);
  return result;
}

uint64_t crabsEnsureInitialized(const void *a1)
{
  uint64_t DerivedStorage;
  BOOL v3;
  int IsInvalidated;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  v3 = *(_QWORD *)(DerivedStorage + 56) != -1 && *(_QWORD *)(DerivedStorage + 80) != 0;
  FigRetainProxyUnlockMutex();
  IsInvalidated = FigRetainProxyIsInvalidated();
  if (IsInvalidated)
    result = 4294954511;
  else
    result = 0;
  if (!IsInvalidated && !v3)
  {
    LODWORD(result) = readOrRef(a1, 1uLL, 0, 0, 0, 0, -1);
    if ((_DWORD)result == -12873)
      return 0;
    else
      return result;
  }
  return result;
}

void crabsReleaseReadAheadAssertion(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigRetainProxyLockMutex())
  {
    if (dword_1EE2A29E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v4 = *(_DWORD *)(DerivedStorage + 116) - 1;
    *(_DWORD *)(DerivedStorage + 116) = v4;
    if (!v4)
      crabsReportingIssueIRATEventIfNeeded(DerivedStorage, 801);
    FigRetainProxyUnlockMutex();
  }
  if (a1)
    CFRelease(a1);
}

BOOL crabsIsEntireLengthAvailableInCache(uint64_t a1)
{
  int v2;
  _BOOL8 result;
  int *v4;

  v4 = 0;
  v2 = crabsSelectNextFill(a1, &v4);
  result = 0;
  if (!v2 && !v4)
    return *(_BYTE *)(a1 + 130) != 0;
  return result;
}

uint64_t crabsCreateReadStatsDictionary(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *StatsDictionary;
  const void *MutableCopy;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 4294954516;
  FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(a1 + 32));
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v5)
    v5(FigBaseObject, CFSTR("FBF_URL"), *MEMORY[0x1E0C9AE00], &cf);
  StatsDictionary = (const void *)FigByteStreamStatsCreateStatsDictionary();
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v8 = FigSignalErrorAt();
    if (!StatsDictionary)
      goto LABEL_10;
    goto LABEL_9;
  }
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    FigRetainProxyUnlockMutex();
    v8 = 4294954511;
    if (!StatsDictionary)
      goto LABEL_10;
    goto LABEL_9;
  }
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  FigRetainProxyUnlockMutex();
  v8 = 0;
  *a3 = MutableCopy;
  MutableCopy = 0;
  if (StatsDictionary)
LABEL_9:
    CFRelease(StatsDictionary);
LABEL_10:
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t crabsShouldStartFirehose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(a1 + 134))
    return 1;
  v4 = *(_QWORD *)(a1 + 88);
  v5 = 0x200000 / *(_QWORD *)(a1 + 96);
  if (v5 < 1 || v4 <= a2)
  {
    v7 = 0;
  }
  else
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2 + 8 * v9);
      if (v10)
      {
        if ((*(_WORD *)(v10 + 8) & 4) != 0)
          break;
      }
      v7 = v9 + 1;
      if (a2 + 1 + v9 < v4)
      {
        ++v9;
        if (v7 < v5)
          continue;
      }
      goto LABEL_15;
    }
    v7 = v9;
  }
LABEL_15:
  if ((*(_BYTE *)(a1 + 504) & 3) != 0)
    goto LABEL_22;
  v11 = 2 * *(_QWORD *)(a1 + 480);
  if (v11 >= *(_QWORD *)(a1 + 472))
    v11 = *(_QWORD *)(a1 + 472);
  v12 = v11 + v7;
  v13 = v4 - a2;
  v7 = v12 >= v13 ? v13 : v12;
  result = crabsEnsureSafetyMargin((_QWORD *)a1, a2);
  if ((_DWORD)result)
LABEL_22:
    result = crabsAllocateMoreBacking(a1, a2, v7, *(_QWORD *)(a1 + 224) > a2);
  *(_BYTE *)(a1 + 134) = result ^ 1;
  return result;
}

uint64_t crabsWaitForLoadAbort(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2A29E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRetainProxyLockMutex();
  *(_DWORD *)(a1 + 16) = -12871;
  MEMORY[0x19402D920](*(_QWORD *)a1);
  return FigRetainProxyUnlockMutex();
}

BOOL crabsRangeInBlockIsCached(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;

  v3 = *(_QWORD *)(a1 + 96);
  if (v3 == 0x4000)
  {
    v4 = a2 >> 14;
  }
  else if (v3 == 0x10000)
  {
    v4 = a2 >> 16;
  }
  else
  {
    v4 = a2 / v3;
  }
  v5 = *(int **)(*(_QWORD *)(a1 + 80) + 8 * v4);
  return v5 && v5[1] + v3 * *v5 >= a3 + a2;
}

uint64_t crabsAIOCallback()
{
  uint64_t DerivedStorage;
  _QWORD *v1;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    FigRetainProxyGetOwner();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(DerivedStorage + 104))
    {
      v1 = (_QWORD *)DerivedStorage;
      if (crabsTaskHints(DerivedStorage, 0) != -12785)
        crabsRebalanceWorkingSet(v1);
    }
  }
  return crabsRetainProxyUnlockWithActions();
}

BOOL crabsEnsureSafetyMargin(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t UpTimeNanoseconds;
  uint64_t v7;
  uint64_t v8;

  v4 = 2 * a1[60];
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  crabsPurgeCompletionSweep(a1);
  if (v4 >= a1[11] + ~a2)
    v4 = a1[11] + ~a2;
  if (crabsHasSafetyMargin(a1, a2, v4))
    return 1;
  v7 = a1[61];
  if (v7 && UpTimeNanoseconds < v7)
    return 0;
  if (a1[59] >= a1[11] + ~a2)
    v8 = a1[11] + ~a2;
  else
    v8 = a1[59];
  if (crabsAllocateMoreBacking((uint64_t)a1, a2, v8, a1[28] > a2))
  {
    a1[61] = 0;
    return 1;
  }
  a1[61] = UpTimeNanoseconds + 1090000000;
  return crabsHasSafetyMargin(a1, a2, v4);
}

void crabsRebalanceWorkingSet(_QWORD *a1)
{
  crabsDiskBackingIsBusy((uint64_t)a1, 0);
  flushPendingReleaseSet(a1);
}

BOOL crabsBlockIsAKeeper(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;

  if ((a2[2] & 0x10) != 0)
    return 1;
  v2 = a1[28];
  v3 = *a2;
  if (**(_QWORD **)(a1[36] + 8) && v2 <= v3)
    return 1;
  v5 = **(_DWORD ***)(a1[34] + 8);
  if (!v5)
    return 1;
  if (v2 <= v3)
    return (int)v3 <= *v5;
  return 0;
}

uint64_t crabsSwipeBacking(uint64_t a1, uint64_t a2, int a3)
{
  int *v6;
  int *v7;
  __int16 v8;
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  __int16 v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  __int16 v18;

  v6 = **(int ***)(*(_QWORD *)(a1 + 288) + 8);
  if (!v6)
  {
LABEL_6:
    if (a3)
      return FigSignalErrorAt();
    v6 = **(int ***)(*(_QWORD *)(a1 + 272) + 8);
    if (!v6)
      return FigSignalErrorAt();
    while (1)
    {
      v12 = **(int ***)(*((_QWORD *)v6 + 7) + 8);
      v13 = *((_WORD *)v6 + 4);
      if ((v13 & 0x400) == 0
        && ((v13 & 0x80) == 0 || crabsMakeBackingNonvolatile((_QWORD *)a1, (uint64_t)v6, 1)))
      {
        break;
      }
      v6 = v12;
      if (!v12)
        return FigSignalErrorAt();
    }
    v14 = *((_QWORD *)v6 + 6);
    v15 = (_QWORD *)*((_QWORD *)v6 + 7);
    if (v14)
    {
      *(_QWORD *)(v14 + 56) = v15;
      v15 = (_QWORD *)*((_QWORD *)v6 + 7);
    }
    else
    {
      if (!v15)
        goto LABEL_24;
      *(_QWORD *)(a1 + 272) = v15;
    }
    *v15 = v14;
    *((_QWORD *)v6 + 6) = 0;
    *((_QWORD *)v6 + 7) = 0;
    *((_WORD *)v6 + 4) &= ~0x1000u;
    goto LABEL_24;
  }
  while (1)
  {
    v7 = **(int ***)(*((_QWORD *)v6 + 7) + 8);
    v8 = *((_WORD *)v6 + 4);
    if ((v8 & 0x400) == 0
      && ((v8 & 0x80) == 0 || crabsMakeBackingNonvolatile((_QWORD *)a1, (uint64_t)v6, 0)))
    {
      break;
    }
    v6 = v7;
    if (!v7)
      goto LABEL_6;
  }
  v10 = *((_QWORD *)v6 + 6);
  v11 = (_QWORD *)*((_QWORD *)v6 + 7);
  if (v10)
  {
    *(_QWORD *)(v10 + 56) = v11;
    v11 = (_QWORD *)*((_QWORD *)v6 + 7);
LABEL_18:
    *v11 = v10;
    *((_QWORD *)v6 + 6) = 0;
    *((_QWORD *)v6 + 7) = 0;
    goto LABEL_24;
  }
  if (v11)
  {
    *(_QWORD *)(a1 + 288) = v11;
    goto LABEL_18;
  }
LABEL_24:
  v16 = *(_DWORD *)(a1 + 504);
  if ((v16 & 1) != 0)
  {
    if (v6 == *(int **)(a1 + 728))
    {
      crabsSyncBlock(a1, (uint64_t)v6);
      v16 = *(_DWORD *)(a1 + 504);
    }
    *(_QWORD *)(a2 + 96) = *((_QWORD *)v6 + 12);
    *(_WORD *)(a2 + 8) |= 0x100u;
    *((_QWORD *)v6 + 12) = -1;
    *((_WORD *)v6 + 4) &= ~0x100u;
  }
  else
  {
    *(_QWORD *)(a2 + 88) = *((_QWORD *)v6 + 11);
    *((_QWORD *)v6 + 11) = 0;
  }
  v17 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 240) = (int)v17;
  ++*(_QWORD *)(a1 + 408);
  if ((v16 & 1) == 0)
    *(_BYTE *)(a1 + 132) = 0;
  if (v6[1] >= 1)
  {
    if (*((_QWORD *)v6 + 10))
      *((_WORD *)v6 + 4) |= 8u;
    if (*(_BYTE *)(a1 + 128))
    {
      v18 = 2;
    }
    else if (v17 > *v6)
    {
      v18 = 1;
    }
    else
    {
      v18 = 2;
    }
    *(_WORD *)(a1 + 176) |= v18;
    *(_BYTE *)(a1 + 128) = 0;
  }
  crabsCleanupOrphan((_QWORD *)a1, v6);
  return 0;
}

BOOL crabsHasSafetyMargin(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;

  v6 = *(int **)(a1[10] + 8 * a2);
  if (!v6)
  {
    if (crabsInitBlock((uint64_t)a1, a2))
      v6 = 0;
    else
      v6 = *(int **)(a1[10] + 8 * a2);
  }
  v7 = *((unsigned __int16 *)v6 + 4);
  if ((v7 & 0x200) == 0)
  {
    if (*((_QWORD *)v6 + 11))
      goto LABEL_7;
    return 0;
  }
  if (((v7 >> 8) & 1) == 0)
    return 0;
LABEL_7:
  v8 = a1[28];
  if (v8 <= a2)
  {
    v9 = *((_QWORD *)v6 + 6);
    v10 = a3 > 0;
    if (v9)
      v11 = a3 < 1;
    else
      v11 = 1;
    if (!v11)
    {
      do
      {
        a3 += *(unsigned __int16 *)(v9 + 8) << 24 >> 31;
        v9 = *(_QWORD *)(v9 + 48);
        v10 = a3 != 0;
        if (v9)
          v12 = a3 == 0;
        else
          v12 = 1;
      }
      while (!v12);
    }
    if (!v10)
      return a3 == 0;
    v6 = (int *)a1[35];
  }
  if (a3 >= 1 && v6)
  {
    if (v8 <= *v6)
    {
      a3 = 1;
    }
    else
    {
      do
      {
        a3 += *((unsigned __int16 *)v6 + 4) << 24 >> 31;
        v6 = (int *)*((_QWORD *)v6 + 6);
        if (v6)
          v13 = a3 == 0;
        else
          v13 = 1;
      }
      while (!v13);
    }
  }
  return a3 == 0;
}

uint64_t crabsAllocateMoreBacking(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unsigned int v12;

  v4 = a3;
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 224);
  if (v6 != a2 && a3 >= 1)
  {
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v5);
      if (!v11)
      {
        if (crabsInitBlock(a1, v5))
          v11 = 0;
        else
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v5);
      }
      v12 = *(unsigned __int16 *)(v11 + 8);
      if ((v12 & 0x200) != 0)
      {
        if (((v12 >> 8) & 1) != 0)
          goto LABEL_16;
      }
      else if (*(_QWORD *)(v11 + 88))
      {
        goto LABEL_16;
      }
      if (!crabsAllocBacking(a1, (int *)v11))
      {
        v6 = *(_QWORD *)(a1 + 224);
        if (v5 < v6 || !crabsBlockIsAKeeper((_QWORD *)a1, (int *)v11))
          return v5 == v6;
        if (crabsSwipeBacking(a1, v11, a4))
        {
          v6 = *(_QWORD *)(a1 + 224);
          return v5 == v6;
        }
      }
      crabsAddBlockToBackedList((uint64_t *)a1, (int *)v11);
      if ((*(_WORD *)(v11 + 8) & 0x11) == 0 && !*(_QWORD *)(v11 + 80))
      {
        if ((*(_BYTE *)(a1 + 504) & 3) == 0)
          crabsMakeBlockVolatileRelativeToAnchor((_QWORD *)a1, (int *)v11);
LABEL_16:
        --v4;
      }
      v5 = (v5 + 1) % *(_QWORD *)(a1 + 88);
      v6 = *(_QWORD *)(a1 + 224);
    }
    while (v5 != v6 && v4 > 0);
  }
  if (v4)
    return v5 == v6;
  return 1;
}

void flushPendingReleaseSet(_QWORD *a1)
{
  _QWORD *i;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x19402EA0C](a1[48]);
  for (i = **(_QWORD ***)(a1[47] + 8); i; i = **(_QWORD ***)(a1[47] + 8))
  {
    v3 = i[8];
    v4 = (_QWORD *)i[9];
    if (v3)
    {
      *(_QWORD *)(v3 + 72) = v4;
      v4 = (_QWORD *)i[9];
    }
    else
    {
      a1[47] = v4;
    }
    *v4 = v3;
    i[8] = 0;
    i[9] = 0;
    v5 = i[10];
    if (v5)
    {
      if (!*(_DWORD *)(v5 + 24))
      {
        addToWorkingSet(a1, (uint64_t)i, 1, 1);
        v6 = a1[12];
        gCRABS_Stats_1 += v6;
        a1[106] += v6;
      }
    }
  }
  JUMPOUT(0x19402EA24);
}

void crabsMakeCacheInFrontListVolatile(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = **(_QWORD **)(a1[34] + 8);
  if (v1)
  {
    do
    {
      v3 = **(_QWORD **)(*(_QWORD *)(v1 + 56) + 8);
      crabsMakeBlockVolatileRelativeToAnchor(a1, (int *)v1);
      v1 = v3;
    }
    while (v3);
  }
}

float crabsMakeCacheInFrontListNonvolatile(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[33];
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 48);
      if ((*(_WORD *)(v2 + 8) & 0x80) != 0 && !crabsMakeBackingNonvolatile(a1, v2, 1))
        break;
      v2 = v3;
    }
    while (v3);
  }
  return crabsPurgeCompletionSweep(a1);
}

uint64_t FigCRABSWrite(const void *a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  __int16 v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a4)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  v11 = a3;
  v12 = crabsEnsureInitialized(a1);
  if ((_DWORD)v12)
    return v12;
  v13 = *(_QWORD *)(v10 + 96);
  if (v13 == 0x4000)
  {
    v14 = a3;
    v15 = a3 >> 14;
  }
  else
  {
    v14 = a3;
    v15 = v13 == 0x10000 ? a3 >> 16 : a3 / v13;
  }
  if (v15 >= *(_QWORD *)(v10 + 88) || !*(_BYTE *)(v10 + 104))
    return FigSignalErrorAt();
  v16 = v15 * v13;
  if (v14 <= v15 * v13)
    goto LABEL_15;
  if (v14 - v15 * v13 < 0)
    return FigSignalErrorAt();
  v12 = readOrRef(a1, v14 - v15 * v13, v15 * v13, 0, (CMBlockBufferRef *)&cf, 0, -1);
  if ((_DWORD)v12)
    return v12;
  if (cf)
    CFRelease(cf);
LABEL_15:
  v12 = FigRetainProxyLockMutex();
  if ((_DWORD)v12)
    return v12;
  if (FigRetainProxyIsInvalidated())
  {
    v17 = 0;
    v33 = 4294954511;
    goto LABEL_56;
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(v10 + 72));
  if (!a2)
  {
    v33 = 0;
    v17 = 0;
    goto LABEL_56;
  }
  v17 = 0;
  v18 = 0;
  v36 = a4;
  v35 = a5;
  v19 = v11;
  while (v15 < *(_QWORD *)(v10 + 88))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v15);
    if (!v20)
    {
      if (crabsInitBlock(v10, v15))
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v15);
      if (!v20)
        break;
    }
    v21 = *(_QWORD *)(v20 + 80);
    if (!v21)
    {
      if (!crabsReadyBlockForLoad(v10, (int *)v20, 1))
        break;
      v21 = *(_QWORD *)(v20 + 80);
    }
    v22 = v19 - v16;
    if (a2 - v17 >= *(_QWORD *)(v10 + 96) - (v19 - v16))
      v23 = *(_QWORD *)(v10 + 96) - (v19 - v16);
    else
      v23 = a2 - v17;
    memcpy((void *)(*(_QWORD *)(v21 + 16) + v22), (const void *)(a4 + v18), v23);
    v24 = *(_DWORD *)(v20 + 4);
    v25 = v23 + v22;
    if (v25 > v24)
    {
      v37 = v19;
      v26 = *(_QWORD *)(v10 + 64) + v25 - v24;
      *(_QWORD *)(v10 + 64) = v26;
      v27 = *(_QWORD *)(v10 + 920);
      if (v27)
      {
        v28 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
        if (v28)
          v28(v27, CFSTR("crabsStats"), CFSTR("CachedBytes"), v26, 0);
      }
      *(_DWORD *)(v20 + 4) = v25;
      v24 = v25;
      a4 = v36;
      v19 = v37;
    }
    v29 = *(_WORD *)(v20 + 8);
    v30 = v29 | 8;
    *(_WORD *)(v20 + 8) = v29 | 8;
    if ((*(_BYTE *)(v10 + 504) & 1) == 0 && (v29 & 0x100) != 0)
    {
      v30 = v29 | 0x48;
      *(_WORD *)(v20 + 8) = v29 | 0x48;
    }
    if (*(_QWORD *)(v10 + 96) == v24 || v15 + 1 == *(_QWORD *)(v10 + 88) && *(_QWORD *)(v10 + 56) - v16 == v24)
    {
      LOBYTE(v31) = v30 | 4;
      *(_WORD *)(v20 + 8) = v30 | 4;
      if ((v30 & 1) != 0)
      {
        crabsUnhint(v10, v20);
        v31 = *(_WORD *)(v20 + 8);
      }
      if ((v31 & 0x20) == 0)
        goto LABEL_44;
    }
    else if ((v30 & 0x20) == 0)
    {
      goto LABEL_44;
    }
    crabsRetainWorking((_QWORD *)v10, v20);
    crabsReleaseWorking((_QWORD *)v10, (_QWORD *)v20, 1, 1);
LABEL_44:
    v19 += v23;
    *(_WORD *)(v10 + 176) |= 1u;
    v32 = *(_QWORD *)(v10 + 96);
    if (v32 == 0x4000)
    {
      v15 = v19 >> 14;
    }
    else if (v32 == 0x10000)
    {
      v15 = v19 >> 16;
    }
    else
    {
      v15 = v19 / v32;
    }
    v17 += v23;
    v18 += v23;
    v16 = v15 * v32;
    if (v17 >= a2)
    {
      v33 = 0;
      goto LABEL_55;
    }
  }
  v33 = FigSignalErrorAt();
LABEL_55:
  a5 = v35;
LABEL_56:
  MEMORY[0x19402EA24](*(_QWORD *)(v10 + 72));
  crabsUnlockWithActions(v10);
  if (a5)
    *a5 = v17;
  return v33;
}

uint64_t FigCRABSReadAndCreateBlockBuffer(const void *a1, size_t a2, uint64_t a3, CMBlockBufferRef *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  CMBaseObjectGetDerivedStorage();
  *a4 = 0;
  FigGetUpTimeNanoseconds();
  v10 = readOrRef(a1, a2, a3, 0, a4, &v12, -1);
  if (a5)
    *a5 = v12;
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  return v10;
}

uint64_t FigCRABS_UnhintActiveRanges(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  result = crabsEnsureInitialized(a1);
  if (!(_DWORD)result)
  {
    result = FigRetainProxyLockMutex();
    if (!(_DWORD)result)
    {
      if (a2 >= 1)
      {
        v8 = 0;
        v9 = DerivedStorage[12];
        do
        {
          v10 = (uint64_t *)(a3 + 16 * v8);
          v11 = *v10;
          if (v9 == 0x4000)
          {
            v12 = v11 >> 14;
          }
          else if (v9 == 0x10000)
          {
            v12 = v11 >> 16;
          }
          else
          {
            v12 = v11 / v9;
          }
          while (1)
          {
            v13 = v11 + *(_QWORD *)(a3 + 16 * v8 + 8) - 1;
            if (v9 == 0x4000)
              v14 = v13 >> 14;
            else
              v14 = v9 == 0x10000 ? v13 >> 16 : v13 / v9;
            if (v12 > v14 || v12 >= DerivedStorage[11])
              break;
            v15 = *(_QWORD *)(DerivedStorage[10] + 8 * v12);
            if (v15)
            {
              if ((*(_WORD *)(v15 + 8) & 1) != 0)
              {
                crabsUnhint((uint64_t)DerivedStorage, v15);
                v11 = *v10;
                v9 = DerivedStorage[12];
              }
            }
            ++v12;
          }
          ++v8;
        }
        while (v8 != a2);
      }
      if (!a2)
      {
        while (1)
        {
          v16 = DerivedStorage[31];
          if (!v16)
            break;
          crabsUnhint((uint64_t)DerivedStorage, v16);
        }
      }
      crabsUnlockWithActions((uint64_t)DerivedStorage);
      return 0;
    }
  }
  return result;
}

uint64_t FigCRABS_SyncCache(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = crabsEnsureInitialized(a1);
  if (!(_DWORD)result)
  {
    result = FigRetainProxyLockMutex();
    if (!(_DWORD)result)
    {
      v4 = crabsSyncCache(DerivedStorage);
      crabsUnlockWithActions(DerivedStorage);
      return v4;
    }
  }
  return result;
}

uint64_t FigCRABS_IterateCache(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v24;
  void *v25;
  int IsBusy;
  char v27;
  uint64_t v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(const void **)(DerivedStorage + 760);
  if (v8)
    v9 = CFRetain(v8);
  else
    v9 = 0;
  v28 = 0;
  v27 = 0;
  if (a1)
    CFRetain(a1);
  if (a4)
  {
    v10 = crabsEnsureInitialized(a1);
    if ((_DWORD)v10)
      goto LABEL_52;
    v25 = malloc_type_calloc(1uLL, *(_QWORD *)(DerivedStorage + 96), 0x8D01563FuLL);
    if (v25)
    {
      v11 = FigRetainProxyLockMutex();
      if ((_DWORD)v11)
      {
        v17 = v11;
        goto LABEL_42;
      }
      IsBusy = crabsDiskBackingIsBusy(DerivedStorage, 0);
      if (*(uint64_t *)(DerivedStorage + 88) < 1)
      {
        v17 = 0;
        goto LABEL_41;
      }
      v24 = v9;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v28 = 0;
        v27 = 1;
        v14 = *(int **)(*(_QWORD *)(DerivedStorage + 80) + 8 * v13);
        if (v14)
        {
          v15 = v14[1];
          if ((_DWORD)v15)
          {
            if (*((_QWORD *)v14 + 10))
            {
              crabsRetainWorking((_QWORD *)DerivedStorage, (uint64_t)v14);
              v16 = crabsCallCacheIterationCallback(DerivedStorage, *(_QWORD *)(*((_QWORD *)v14 + 10) + 16), v12, v15, a4, a2, &v27);
              if ((_DWORD)v16 == -12785)
                goto LABEL_50;
              v17 = v16;
              crabsReleaseWorking((_QWORD *)DerivedStorage, v14, 1, v16 == 0);
              if ((_DWORD)v17)
                goto LABEL_48;
            }
            else
            {
              v18 = *((unsigned __int16 *)v14 + 4);
              if ((v18 & 0x200) != 0)
                v19 = (v18 >> 8) & 1;
              else
                v19 = *((_QWORD *)v14 + 11) != 0;
              if (v19)
                v20 = IsBusy == 0;
              else
                v20 = 0;
              if (v20)
              {
                if ((*(_BYTE *)(DerivedStorage + 504) & 1) != 0)
                {
                  FigFileForkRead();
                  if (v28 == v15)
                  {
                    v22 = crabsCallCacheIterationCallback(DerivedStorage, (uint64_t)v25, v12, v15, a4, a2, &v27);
                    if ((_DWORD)v22)
                    {
                      v17 = v22;
LABEL_48:
                      v9 = v24;
                      if (!v27)
                      {
LABEL_42:
                        free(v25);
                        if (v9)
                          goto LABEL_43;
                        goto LABEL_44;
                      }
LABEL_41:
                      crabsUnlockWithActions(DerivedStorage);
                      goto LABEL_42;
                    }
                  }
                }
                else if ((v18 & 0x80) == 0
                       || crabsMakeBackingNonvolatile((_QWORD *)DerivedStorage, (uint64_t)v14, *(_QWORD *)(DerivedStorage + 224) <= *v14))
                {
                  v21 = crabsCallCacheIterationCallback(DerivedStorage, *((_QWORD *)v14 + 11), v12, v15, a4, a2, &v27);
                  if ((_DWORD)v21 == -12785)
                  {
LABEL_50:
                    v17 = 4294954511;
                    goto LABEL_39;
                  }
                  v17 = v21;
                  if ((v18 & 0x80) != 0 && v27)
                    crabsMakeBlockVolatileRelativeToAnchor((_QWORD *)DerivedStorage, v14);
                  if ((_DWORD)v17)
                    goto LABEL_48;
                }
              }
            }
          }
        }
        ++v13;
        v12 += *(_QWORD *)(DerivedStorage + 96);
        if (v13 >= *(_QWORD *)(DerivedStorage + 88))
        {
          v17 = 0;
LABEL_39:
          v9 = v24;
          goto LABEL_41;
        }
      }
    }
  }
  v10 = FigSignalErrorAt();
LABEL_52:
  v17 = v10;
  if (v9)
LABEL_43:
    CFRelease(v9);
LABEL_44:
  if (a1)
    CFRelease(a1);
  return v17;
}

uint64_t crabsCallCacheIterationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  const void *v13;
  CFTypeRef v14;
  unsigned int v15;
  char v16;

  v13 = *(const void **)(a1 + 760);
  if (v13)
  {
    v14 = CFRetain(v13);
    if (a4)
      goto LABEL_3;
LABEL_10:
    a5 = 0;
    v16 = 1;
    if (!a7)
      goto LABEL_12;
    goto LABEL_11;
  }
  v14 = 0;
  if (!a4)
    goto LABEL_10;
LABEL_3:
  FigRetainProxyUnlockMutex();
  LODWORD(a5) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a5)(a6, a4, a3, a2);
  v15 = FigRetainProxyLockMutex();
  if (v15)
  {
    v16 = 0;
    if ((_DWORD)a5)
      a5 = a5;
    else
      a5 = v15;
    if (!a7)
      goto LABEL_12;
  }
  else
  {
    if (FigRetainProxyIsInvalidated())
      a5 = 4294954511;
    else
      a5 = a5;
    v16 = 1;
    if (!a7)
      goto LABEL_12;
  }
LABEL_11:
  *a7 = v16;
LABEL_12:
  if (v14)
    CFRelease(v14);
  return a5;
}

uint64_t FigDiskCacheProviderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigDiskCacheProviderGetFigBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t crabsRestoreCache(uint64_t a1, CFDataRef theData, uint64_t a3, uint64_t a4)
{
  const UInt8 *BytePtr;
  const UInt8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  unint64_t *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v24;
  uint64_t v25;
  signed int v29;

  if (!theData)
    return FigSignalErrorAt();
  BytePtr = CFDataGetBytePtr(theData);
  if (!BytePtr)
    return FigSignalErrorAt();
  v7 = BytePtr;
  if (*(_DWORD *)BytePtr != 83886080)
    return FigSignalErrorAt();
  if (*((_DWORD *)BytePtr + 1) != 1650553443)
    return FigSignalErrorAt();
  v8 = *(_QWORD *)(a1 + 96);
  if (bswap32(v8) != *((_DWORD *)BytePtr + 2))
    return FigSignalErrorAt();
  v9 = (int)bswap32(*((_DWORD *)BytePtr + 3));
  v10 = *(_QWORD *)(a1 + 920);
  if (v10)
  {
    v11 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v11)
      v11(v10, CFSTR("crabsStats"), CFSTR("BytesCachedAtStartup"), v8 * v9, 0);
  }
  if (CFDataGetLength(theData) != 16 * v9 + 16)
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 16) = a3;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 72));
  if ((int)v9 < 1)
  {
    v16 = 0;
LABEL_31:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 72));
    return v16;
  }
  v12 = (unint64_t *)(v7 + 24);
  while (1)
  {
    v13 = bswap32(*((_DWORD *)v12 - 2));
    if (*(_QWORD *)(a1 + 88) <= v13 || *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13))
      return FigSignalErrorAt();
    inited = crabsInitBlock(a1, v13);
    if ((_DWORD)inited)
      return inited;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
    *(_WORD *)(v15 + 8) |= 0x100u;
    *(_QWORD *)(v15 + 96) = bswap64(*v12);
    if ((*(_BYTE *)(a1 + 504) & 1) != 0)
    {
      crabsAddBlockToBackedList((uint64_t *)a1, (int *)v15);
      v20 = bswap32(*((_DWORD *)v12 - 1));
      *(_DWORD *)(v15 + 4) = v20;
      v21 = *(_QWORD *)(a1 + 64) + v20;
      *(_QWORD *)(a1 + 64) = v21;
      v22 = *(_QWORD *)(a1 + 920);
      if (v22)
      {
        v23 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v23)
          v23(v22, CFSTR("crabsStats"), CFSTR("CachedBytes"), v21, 0);
      }
    }
    else if (crabsAllocBacking(a1, (int *)v15))
    {
      v29 = bswap32(*((_DWORD *)v12 - 1));
      v16 = FigFileForkRead();
      crabsAddBlockToBackedList((uint64_t *)a1, (int *)v15);
      *(_DWORD *)(v15 + 4) = v29;
      v17 = *(_QWORD *)(a1 + 64) + v29;
      *(_QWORD *)(a1 + 64) = v17;
      v18 = *(_QWORD *)(a1 + 920);
      if (v18)
      {
        v19 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v19)
          v19(v18, CFSTR("crabsStats"), CFSTR("CachedBytes"), v17, 0);
      }
      goto LABEL_24;
    }
    v16 = 0;
LABEL_24:
    v24 = *(int *)(v15 + 4);
    v25 = *(_QWORD *)(a1 + 96);
    if (v25 == v24 || v13 + 1 == *(_QWORD *)(a1 + 88) && a4 - v25 * v13 == v24)
      *(_WORD *)(v15 + 8) |= 4u;
    v12 += 2;
    if (!--v9)
      goto LABEL_31;
  }
}

uint64_t crabsFlumeHostUnavailable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    if (!*(_DWORD *)(DerivedStorage + 108))
    {
      *(_DWORD *)(DerivedStorage + 108) = 1;
      *(_WORD *)(DerivedStorage + 176) |= 0x40u;
    }
    *(_BYTE *)(DerivedStorage + 608) = 0;
  }
  return crabsRetainProxyUnlockWithActions();
}

uint64_t crabsFlumeHostAvailable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    *(_BYTE *)(DerivedStorage + 608) = 0;
    if (*(_DWORD *)(DerivedStorage + 108))
    {
      *(_DWORD *)(DerivedStorage + 108) = 0;
      *(_WORD *)(DerivedStorage + 176) |= 0x40u;
      crabsStartIdleRead(DerivedStorage);
    }
  }
  return crabsRetainProxyUnlockWithActions();
}

uint64_t crabsFlumeConnectionToHostLost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  __CFError *Value;
  __CFError *v8;
  const void *v9;
  int Code;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    *(_DWORD *)(DerivedStorage + 108) = 2;
    *(_WORD *)(DerivedStorage + 176) |= 0x40u;
    if (a5 && (Value = (__CFError *)CFDictionaryGetValue(a5, CFSTR("NotePayload_LastError"))) != 0)
    {
      v8 = Value;
      v9 = *(const void **)(DerivedStorage + 952);
      *(_QWORD *)(DerivedStorage + 952) = Value;
      CFRetain(Value);
      if (v9)
        CFRelease(v9);
      Code = CFErrorGetCode(v8);
    }
    else
    {
      Code = -1004;
    }
    *(_DWORD *)(DerivedStorage + 944) = Code;
    if ((*(_BYTE *)(DerivedStorage + 504) & 1) == 0 || !crabsIsEntireLengthAvailableInCache(DerivedStorage))
      *(_WORD *)(DerivedStorage + 176) |= 0x20u;
  }
  return crabsRetainProxyUnlockWithActions();
}

uint64_t crabsFlumeHostAvailableOnBetterInterface()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t, __CFString *, __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated() && *(_DWORD *)(DerivedStorage + 560) == 1)
  {
    if (*(uint64_t *)(DerivedStorage + 568) < 1)
    {
      if (crabsCancelRead((_QWORD *)DerivedStorage, (uint64_t *)(DerivedStorage + 512), -12932) != -12785)
      {
        v1 = *(_QWORD *)(DerivedStorage + 920);
        if (v1)
        {
          v2 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 32);
          if (v2)
            v2(v1, CFSTR("crabsStats"), CFSTR("AFDIC"), 1);
        }
        crabsStartIdleRead(DerivedStorage);
      }
    }
    else
    {
      *(_BYTE *)(DerivedStorage + 608) = 1;
    }
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t FigCRABSScheduledIOEqual()
{
  CFTypeRef *DerivedStorage;
  const void *v1;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  return CFEqual(*DerivedStorage, v1);
}

uint64_t FigCRABSScheduledIOCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);

  CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4ED0]))
    return 4294954512;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, *MEMORY[0x1E0CA2F98], a3, a4);
  else
    return 4294954514;
}

uint64_t siocrabsFinishUnlocked(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, __int128 *);
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v3 = a3;
  if (!a2)
  {
    if (!a3)
    {
      if (*(_BYTE *)(a1 + 12))
      {
        v21 = *(_QWORD *)a1;
        v22 = *(void (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 24);
        if (v22)
        {
          v24 = *MEMORY[0x1E0CA2E68];
          v25 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          v22(v21, &v24);
        }
      }
    }
    v10 = MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    if (!(_DWORD)v10)
    {
      v11 = 0;
      v12 = (uint64_t *)(a1 + 24);
      while (1)
      {
        if (v11 == -12871 && v3 == 0)
          v3 = 2;
        v14 = *v12;
        if (!*v12)
          break;
        v15 = *(_QWORD *)(v14 + 16);
        *v12 = v15;
        if (!v15)
          *(_QWORD *)(a1 + 32) = v12;
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
        v16 = siocrabsFinish((uint64_t *)a1, v14, v3, 1);
        v11 = v16;
        if (!(_DWORD)v10)
          LODWORD(v10) = v16;
        v17 = MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
        if ((_DWORD)v10)
          v10 = v10;
        else
          v10 = v17;
        if (v17)
          return v10;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
    }
    return v10;
  }
  v6 = MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  if ((_DWORD)v6)
    return v6;
  v7 = (_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
  {
LABEL_7:
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
    return 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  while (*(_DWORD *)(v9 + 8) != a2)
  {
    v9 = *(_QWORD *)(v9 + 16);
    if (!v9)
      goto LABEL_7;
  }
  if (v8 == v9)
  {
    v23 = *(_QWORD *)(v8 + 16);
    *v7 = v23;
    if (v23)
      goto LABEL_32;
  }
  else
  {
    do
    {
      v19 = v8;
      v8 = *(_QWORD *)(v8 + 16);
    }
    while (v8 != v9);
    v20 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v19 + 16) = v20;
    v7 = (_QWORD *)(v19 + 16);
    if (v20)
      goto LABEL_32;
  }
  *(_QWORD *)(a1 + 32) = v7;
LABEL_32:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return siocrabsFinish((uint64_t *)a1, v9, v3, 1);
}

uint64_t FigCRABSScheduledIOGetEOF(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  uint64_t result;
  CFNumberRef number;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  number = 0;
  *a2 = 0;
  FigCRABSGetByteStream(*DerivedStorage);
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v5)
    return 4294954514;
  result = v5(CMBaseObject, *MEMORY[0x1E0CA2070], *MEMORY[0x1E0C9AE00], &number);
  if (!(_DWORD)result)
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, a2);
    CFRelease(number);
    return 0;
  }
  return result;
}

uint64_t FigCRABSScheduledIOGetAvailableLengthAtOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v6 = FigCRABSGetByteStream(*DerivedStorage);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t FigTTMLFormatReaderCreateFromStream(uint64_t a1, int a2, CFAllocatorRef allocator, CFTypeRef *a4)
{
  CFMutableArrayRef Mutable;
  uint64_t v7;
  _QWORD *DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, _QWORD, _QWORD, CFURLRef *);
  const __CFAllocator *v11;
  uint64_t v12;
  const __CFString *v13;
  const __CFString *v14;
  __CFDictionary *v15;
  CFMutableArrayRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t v23;
  __int128 v25;
  CFURLRef url;
  char v27;
  CFTypeRef cf;
  CFTypeRef v29;

  cf = 0;
  v29 = 0;
  Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  v27 = 0;
  url = 0;
  if (a1)
  {
    if (a4)
    {
      FigFormatReaderGetClassID();
      v7 = CMDerivedObjectCreate();
      if ((_DWORD)v7)
      {
        v17 = v7;
        FigSignalErrorAt();
        goto LABEL_47;
      }
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v10 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
      if (!v10)
      {
        v15 = 0;
        v16 = 0;
        v17 = 4294954514;
        goto LABEL_27;
      }
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = v10(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &url);
      if (!(_DWORD)v12)
      {
        if (url)
        {
          v13 = CFURLCopyPathExtension(url);
          v14 = v13;
          if (v13 && CFStringCompare(v13, CFSTR("itt"), 1uLL) == kCFCompareEqualTo)
          {
            v15 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CFDictionarySetValue(v15, CFSTR("FixUpiTTLeftRegionOrigin"), (const void *)*MEMORY[0x1E0C9AE40]);
            LOBYTE(v25) = 0;
            FigCFDictionaryGetBooleanIfPresent();
            MEMORY[0x19402F294](&ttmlFormatReader_isSDKVersionBeforeJazz_sOnce, ttmlFormatReader_initIsSDKVersionBeforeJazz);
            if ((sTTMLFormatReader_IsSDKVersionBeforeJazz & 1) != 0)
              CFDictionarySetValue(v15, CFSTR("ConsolidateiTTRegions"), (const void *)*MEMORY[0x1E0C9AE50]);
          }
          else
          {
            v15 = 0;
          }
        }
        else
        {
          v15 = 0;
          v14 = 0;
        }
        v18 = TTMLParserCreate((uint64_t)Mutable, (uint64_t)ttmlFormatReader_appendSampleBuffer, v15, &cf);
        if (!(_DWORD)v18)
        {
          FigCFDictionaryGetBooleanIfPresent();
          if (v27)
          {
            v16 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)&v25 = ttmlFormatReader_reportSkippedSyntaxElement;
            *((_QWORD *)&v25 + 1) = ttmlFormatReader_reportUnsupportedFeatures;
            v19 = TTMLParserRegisterReportingCallbacks((uint64_t)cf, (uint64_t)v16, &v25);
            if ((_DWORD)v19)
              goto LABEL_15;
          }
          else
          {
            v16 = 0;
          }
          v19 = TTMLParserParseStream((uint64_t)cf, a1);
          if (!(_DWORD)v19)
          {
            if (CFArrayGetCount(Mutable))
            {
              *(_QWORD *)&v25 = 0;
              FigTrackReaderGetClassID();
              v20 = CMDerivedObjectCreate();
              if ((_DWORD)v20)
              {
                v17 = v20;
                FigSignalErrorAt();
                if (!v14)
                {
LABEL_27:
                  if (url)
                    CFRelease(url);
                  if (v15)
                    CFRelease(v15);
                  if (v16)
                    CFRelease(v16);
                  if (Mutable)
                    goto LABEL_34;
                  goto LABEL_35;
                }
LABEL_26:
                CFRelease(v14);
                goto LABEL_27;
              }
              v21 = CMBaseObjectGetDerivedStorage();
              if (Mutable)
                v22 = CFRetain(Mutable);
              else
                v22 = 0;
              v17 = 0;
              *(_QWORD *)(v21 + 8) = v22;
              v23 = v25;
              DerivedStorage[1] = Mutable;
              DerivedStorage[2] = v16;
              *DerivedStorage = v23;
              *a4 = v29;
              v29 = 0;
              Mutable = 0;
LABEL_25:
              v16 = 0;
              if (!v14)
                goto LABEL_27;
              goto LABEL_26;
            }
            v19 = FigSignalErrorAt();
          }
LABEL_15:
          v17 = v19;
          if (!v14)
            goto LABEL_27;
          goto LABEL_26;
        }
        v17 = v18;
        goto LABEL_25;
      }
    }
    else
    {
      v12 = FigSignalErrorAt();
    }
    v17 = v12;
LABEL_47:
    v15 = 0;
    v16 = 0;
    goto LABEL_27;
  }
  v17 = FigSignalErrorAt();
  if (Mutable)
LABEL_34:
    CFRelease(Mutable);
LABEL_35:
  if (cf)
    CFRelease(cf);
  if (v29)
    CFRelease(v29);
  return v17;
}

uint64_t ttmlFormatReader_appendSampleBuffer(__CFArray *a1, const void *a2)
{
  CFArrayAppendValue(a1, a2);
  return 0;
}

void ttmlFormatReader_reportSkippedSyntaxElement(__CFArray *a1, CFArrayRef theArray)
{
  CFIndex v3;
  CFMutableDictionaryRef Mutable;
  CFStringRef v5;
  const __CFAllocator *v6;
  const void *ValueAtIndex;
  CFIndex Count;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v3 = 0;
      Mutable = 0;
      v5 = 0;
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
        if (Mutable)
          CFRelease(Mutable);
        if (v5)
          CFRelease(v5);
        Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v5 = CFStringCreateWithFormat(v6, 0, CFSTR("The parser skipped a syntax element: %@"), ValueAtIndex);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        CFArrayAppendValue(a1, Mutable);
        ++v3;
      }
      while (Count != v3);
      if (Mutable)
        CFRelease(Mutable);
      if (v5)
        CFRelease(v5);
    }
  }
}

void ttmlFormatReader_reportUnsupportedFeatures(__CFArray *a1, CFArrayRef theArray)
{
  CFIndex v3;
  CFMutableDictionaryRef Mutable;
  CFStringRef v5;
  const __CFAllocator *v6;
  const void *ValueAtIndex;
  CFIndex Count;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v3 = 0;
      Mutable = 0;
      v5 = 0;
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
        if (Mutable)
          CFRelease(Mutable);
        if (v5)
          CFRelease(v5);
        Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v5 = CFStringCreateWithFormat(v6, 0, CFSTR("The parser doesn't support a feature/extension: %@"), ValueAtIndex);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        CFArrayAppendValue(a1, Mutable);
        ++v3;
      }
      while (Count != v3);
      if (Mutable)
        CFRelease(Mutable);
      if (v5)
        CFRelease(v5);
    }
  }
}

void ttmlFormatReader_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
}

__CFString *ttmlFormatReader_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<TTMLFormatReader %p>"), a1);
  return Mutable;
}

uint64_t ttmlFormatReader_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t result;
  const __CFString *v12;
  CFTypeRef v13;
  CFTypeRef *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v8 = (_QWORD *)DerivedStorage;
  if (!FigCFEqual() && !FigCFEqual())
  {
    if (FigCFEqual())
    {
      v12 = CFSTR("com.apple.coremedia.formatreader.ttml");
    }
    else
    {
      if (FigCFEqual())
      {
        result = 0;
        if (v8[2])
          v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        else
          v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        v13 = *v14;
        goto LABEL_17;
      }
      if (!FigCFEqual())
        return 4294954512;
      v12 = (const __CFString *)v8[2];
      if (!v12)
      {
        v13 = 0;
        goto LABEL_11;
      }
    }
    v13 = CFRetain(v12);
LABEL_11:
    result = 0;
LABEL_17:
    *a4 = v13;
    return result;
  }
  FigBaseObject = FigTrackReaderGetFigBaseObject(*v8);
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v10)
    return v10(FigBaseObject, CFSTR("UneditedTrackDuration"), a3, a4);
  else
    return 4294954514;
}

uint64_t ttmlFormatReader_GetTrackCount(uint64_t a1, _QWORD *a2)
{
  *a2 = 1;
  return 0;
}

uint64_t ttmlFormatReader_CopyTrackByIndex(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v10;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (a2)
    return FigSignalErrorAt();
  if (a3)
  {
    v10 = *DerivedStorage;
    if (v10)
      v10 = CFRetain(v10);
    *a3 = v10;
  }
  if (a4)
    *a4 = 1952807028;
  if (a5)
    *a5 = 1;
  return 0;
}

uint64_t ttmlFormatReader_CopyTrackByID(uint64_t a1, int a2, _QWORD *a3, _DWORD *a4)
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v8;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (a2 != 1)
    return FigSignalErrorAt();
  if (a3)
  {
    v8 = *DerivedStorage;
    if (v8)
      v8 = CFRetain(v8);
    *a3 = v8;
  }
  if (a4)
    *a4 = 1952807028;
  return 0;
}

uint64_t ttmlFormatReader_CopyTrackByType(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5)
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v10;
  uint64_t result;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (a2)
    return 4294954453;
  if (a3 != 1952807028)
    return 4294954452;
  if (a4)
  {
    v10 = *DerivedStorage;
    if (v10)
      v10 = CFRetain(v10);
    *a4 = v10;
  }
  result = 0;
  if (a5)
    *a5 = 1;
  return result;
}

uint64_t ttmlFormatReader_initIsSDKVersionBeforeJazz()
{
  uint64_t result;

  result = _CFExecutableLinkedOnOrAfter();
  sTTMLFormatReader_IsSDKVersionBeforeJazz = (_DWORD)result == 0;
  return result;
}

void ttmlCaptionTrackReader_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
}

__CFString *ttmlCaptionTrackReader_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<TTMLCaptionTrackReader %p>"), a1);
  return Mutable;
}

uint64_t ttmlCaptionTrackReader_CopyProperty(const void *a1, uint64_t a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage;
  CFArrayRef *v9;
  opaqueCMSampleBuffer *ValueAtIndex;
  const __CFArray *v11;
  CFIndex Count;
  opaqueCMSampleBuffer *v13;
  CFArrayRef value;
  uint64_t v15;
  CFArrayRef v17;
  uint64_t v18;
  _QWORD *v19;
  const __CFAllocator *v20;
  uint64_t FormatDescriptionArray;
  CMTime v22;
  CMTime lhs;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime time;
  CMTime v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    v9 = (CFArrayRef *)DerivedStorage;
    if (FigCFEqual() || FigCFEqual())
    {
      v28 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CFArrayGetCount(v9[1]))
      {
        ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v9[1], 0);
        v11 = v9[1];
        Count = CFArrayGetCount(v11);
        v13 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v11, Count - 1);
        memset(&time, 0, sizeof(time));
        CMSampleBufferGetPresentationTimeStamp(&time, ValueAtIndex);
        memset(&v26, 0, sizeof(v26));
        CMSampleBufferGetPresentationTimeStamp(&v26, v13);
        memset(&v25, 0, sizeof(v25));
        CMSampleBufferGetDuration(&v25, v13);
        memset(&v24, 0, sizeof(v24));
        lhs = v26;
        v22 = v25;
        CMTimeAdd(&v24, &lhs, &v22);
        lhs = v24;
        v22 = time;
        CMTimeSubtract(&v28, &lhs, &v22);
      }
      time = v28;
      value = CMTimeCopyAsDictionary(&time, a3);
      goto LABEL_8;
    }
    if (FigCFEqual())
    {
      value = v9[2];
      if (!value)
      {
        v17 = v9[1];
        CFGetAllocator(a1);
        v28.value = 0;
        FigSampleCursorServiceGetClassID();
        v18 = CMDerivedObjectCreate();
        if ((_DWORD)v18)
        {
          v15 = v18;
          FigSignalErrorAt();
          return v15;
        }
        v19 = (_QWORD *)CMBaseObjectGetDerivedStorage();
        *v19 = CFRetain(v17);
        value = (CFArrayRef)v28.value;
        v9[2] = (CFArrayRef)v28.value;
        if (!value)
          goto LABEL_8;
      }
    }
    else
    {
      if (!FigCFEqual())
        return 4294954512;
      value = *v9;
      if (!*v9)
      {
        v20 = CFGetAllocator(a1);
        FormatDescriptionArray = ttmlFormatReader_createFormatDescriptionArray(v20, v9);
        if ((_DWORD)FormatDescriptionArray)
          return FormatDescriptionArray;
        value = *v9;
        if (!*v9)
        {
LABEL_8:
          v15 = 0;
          *a4 = value;
          return v15;
        }
      }
    }
    value = (CFArrayRef)CFRetain(value);
    goto LABEL_8;
  }
  return FigSignalErrorAt();
}

uint64_t ttmlFormatReader_createFormatDescriptionArray(const __CFAllocator *a1, CFArrayRef *a2)
{
  uint64_t v4;
  CFArrayRef v5;
  uint64_t v6;
  CMFormatDescriptionRef formatDescriptionOut;

  formatDescriptionOut = 0;
  if (!a2)
    return FigSignalErrorAt();
  v4 = CMFormatDescriptionCreate(a1, 0x74657874u, 0x61697474u, 0, &formatDescriptionOut);
  if ((_DWORD)v4)
    goto LABEL_10;
  v5 = CFArrayCreate(a1, (const void **)&formatDescriptionOut, 1, MEMORY[0x1E0C9B378]);
  if (!v5)
  {
    v4 = FigSignalErrorAt();
LABEL_10:
    v6 = v4;
    goto LABEL_5;
  }
  v6 = 0;
  *a2 = v5;
LABEL_5:
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  return v6;
}

void ttmlCursorService_Finalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *ttmlCursorService_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<TTMLSampleCursorService %p>"), a1);
  return Mutable;
}

uint64_t ttmlSampleCursorService_CreateCursorAtTime(const void *a1, CMTime *a2, _QWORD *a3, char *a4, char *a5)
{
  uint64_t v9;
  CFTypeRef v10;
  CMTime v12;
  CFTypeRef cf;

  cf = 0;
  v9 = ttmlSampleCursorService_CreateCursorAtFirstSample(a1, &cf);
  v10 = cf;
  if (!(_DWORD)v9 && (v12 = *a2, ttmlSampleCursor_MoveToTime((uint64_t)cf, &v12, a4, a5), a3))
  {
    *a3 = v10;
  }
  else if (v10)
  {
    CFRelease(v10);
  }
  return v9;
}

uint64_t ttmlSampleCursorService_CreateCursorNearTime(const void *a1, CMTime *a2, uint64_t a3, _QWORD *a4, char *a5, char *a6)
{
  CMTime v7;

  v7 = *a2;
  return ttmlSampleCursorService_CreateCursorAtTime(a1, &v7, a4, a5, a6);
}

uint64_t ttmlSampleCursorService_CreateCursorAtFirstSample(const void *a1, CFTypeRef *a2)
{
  CFArrayRef *DerivedStorage;
  int v5;
  uint64_t v6;
  CFTypeRef cf;

  DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  v5 = CFGetAllocator(a1);
  cf = 0;
  v6 = ttmlSampleCursorCreate(v5, *DerivedStorage, 0, &cf);
  if ((_DWORD)v6)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v6;
}

uint64_t ttmlSampleCursorService_CreateCursorAtLastSample(const void *a1, CFTypeRef *a2)
{
  const __CFArray **DerivedStorage;
  const __CFArray *v5;
  CFIndex Count;
  uint64_t v7;
  CFTypeRef cf;

  DerivedStorage = (const __CFArray **)CMBaseObjectGetDerivedStorage();
  LODWORD(a1) = CFGetAllocator(a1);
  cf = 0;
  v5 = *DerivedStorage;
  Count = CFArrayGetCount(v5);
  v7 = ttmlSampleCursorCreate((int)a1, v5, Count - 1, &cf);
  if ((_DWORD)v7)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v7;
}

CFIndex ttmlSampleCursor_MoveToTime(uint64_t a1, CMTime *a2, char *a3, char *a4)
{
  _QWORD *DerivedStorage;
  const __CFArray *v8;
  CFIndex Count;
  opaqueCMSampleBuffer *ValueAtIndex;
  opaqueCMSampleBuffer *v11;
  CFIndex result;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  opaqueCMSampleBuffer *v18;
  char v19;
  char v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v28;
  CMTime v29;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = (const __CFArray *)DerivedStorage[1];
  Count = CFArrayGetCount(v8);
  ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v8, 0);
  v11 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v8, Count - 1);
  memset(&v29, 0, sizeof(v29));
  CMSampleBufferGetPresentationTimeStamp(&v29, ValueAtIndex);
  memset(&v28, 0, sizeof(v28));
  CMSampleBufferGetPresentationTimeStamp(&lhs, v11);
  CMSampleBufferGetDuration(&rhs, v11);
  CMTimeAdd(&v28, &lhs, &rhs);
  time1 = *a2;
  time2 = v29;
  result = CMTimeCompare(&time1, &time2);
  if ((result & 0x80000000) != 0)
  {
    v20 = 0;
    *DerivedStorage = 0;
    v19 = 1;
    if (!a3)
      goto LABEL_18;
    goto LABEL_17;
  }
  time1 = v28;
  time2 = *a2;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    for (i = 0; ; Count = v17 - i)
    {
      v14 = Count + i;
      if (i >= 0)
        v15 = i;
      else
        v15 = i + 1;
      if (v14 >= 0)
        v16 = Count + i;
      else
        v16 = v14 + 1;
      v17 = (v16 >> 1) + (v15 >> 1);
      v18 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v8, v17);
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetPresentationTimeStamp(&time1, v18);
      memset(&time2, 0, sizeof(time2));
      CMSampleBufferGetDuration(&v23, v18);
      v22 = time1;
      CMTimeAdd(&time2, &v22, &v23);
      v22 = *a2;
      v21 = time1;
      if ((CMTimeCompare(&v22, &v21) & 0x80000000) == 0)
      {
        v22 = time2;
        v21 = *a2;
        result = CMTimeCompare(&v22, &v21);
        if ((int)result > 0)
        {
          v19 = 0;
          v20 = 0;
          *DerivedStorage = v17;
          if (!a3)
            goto LABEL_18;
LABEL_17:
          *a3 = v19;
          goto LABEL_18;
        }
        i = v17 + 1;
        v17 = v14;
      }
    }
  }
  result = CFArrayGetCount(v8);
  v19 = 0;
  *DerivedStorage = result - 1;
  v20 = 1;
  if (a3)
    goto LABEL_17;
LABEL_18:
  if (a4)
    *a4 = v20;
  return result;
}

uint64_t ttmlSampleCursorCreate(int a1, CFArrayRef theArray, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  CFTypeRef v9;

  if (!theArray || !CFArrayGetCount(theArray))
    return FigSignalErrorAt();
  FigSampleCursorGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v9 = CFRetain(theArray);
    *DerivedStorage = a3;
    DerivedStorage[1] = v9;
    *a4 = 0;
  }
  return v7;
}

void ttmlSampleCursor_Finalize()
{
  const void *v0;

  v0 = *(const void **)(CMBaseObjectGetDerivedStorage() + 8);
  if (v0)
    CFRelease(v0);
}

__CFString *ttmlSampleCursor_CopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<TTMLSampleCursor %p>{currentIndex:%ld}"), a1, *DerivedStorage);
  return Mutable;
}

uint64_t ttmlSampleCursor_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a4)
    return 4294954512;
  else
    return FigSignalErrorAt();
}

uint64_t ttmlSampleCursor_Copy(const void *a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v5;
  _QWORD *v6;
  CFTypeRef v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  FigSampleCursorGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    FigSignalErrorAt();
  }
  else
  {
    v6 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v7 = (CFTypeRef)DerivedStorage[1];
    *v6 = *DerivedStorage;
    if (v7)
      v7 = CFRetain(v7);
    v6[1] = v7;
    *a2 = 0;
  }
  return v5;
}

uint64_t ttmlSampleCursor_CompareInDecodeOrder()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage < *v1)
    return -1;
  else
    return *DerivedStorage > *v1;
}

uint64_t ttmlSampleCursor_GetStartTime(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  opaqueCMSampleBuffer *ValueAtIndex;
  CMTime v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), *(_QWORD *)DerivedStorage);
  memset(&v6, 0, sizeof(v6));
  CMSampleBufferGetPresentationTimeStamp(&v6, ValueAtIndex);
  *a2 = v6;
  return 0;
}

uint64_t ttmlSampleCursor_GetDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  opaqueCMSampleBuffer *ValueAtIndex;
  CMTime v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), *(_QWORD *)DerivedStorage);
  memset(&v6, 0, sizeof(v6));
  CMSampleBufferGetDuration(&v6, ValueAtIndex);
  *a2 = v6;
  return 0;
}

uint64_t ttmlSampleCursor_GetDependencyInfo(uint64_t a1, _BYTE *a2, _BYTE *a3, _DWORD *a4, _BYTE *a5)
{
  if (a2)
    *a2 = 1;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  return 0;
}

uint64_t ttmlSampleCursor_CreateSample(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), *(_QWORD *)DerivedStorage);
  *a3 = CFRetain(ValueAtIndex);
  return 0;
}

uint64_t ttmlSampleCursor_StepByTime(uint64_t a1, CMTime *a2)
{
  CMTime v5;
  CMTime lhs;
  __int16 v7;
  CMTime v8;
  CMTime v9;

  v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v8 = v9;
  v7 = 0;
  ttmlSampleCursor_GetStartTime(a1, &v9);
  lhs = v9;
  v5 = *a2;
  CMTimeAdd(&v8, &lhs, &v5);
  lhs = v8;
  ttmlSampleCursor_MoveToTime(a1, &lhs, (char *)&v7 + 1, (char *)&v7);
  if (HIBYTE(v7) | v7)
    return 4294954456;
  else
    return 0;
}

uint64_t ttmlSampleCursor_CopyFormatDescription(const void *a1, CMFormatDescriptionRef *a2)
{
  const __CFAllocator *v3;
  uint64_t v4;
  CMFormatDescriptionRef formatDescriptionOut;

  formatDescriptionOut = 0;
  v3 = CFGetAllocator(a1);
  v4 = CMFormatDescriptionCreate(v3, 0x63706772u, 0, 0, &formatDescriptionOut);
  if (!a2 || (_DWORD)v4)
  {
    if (formatDescriptionOut)
      CFRelease(formatDescriptionOut);
  }
  else
  {
    *a2 = formatDescriptionOut;
  }
  return v4;
}

uint64_t ttmlSampleCursor_StepAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFIndex Count;
  uint64_t v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)DerivedStorage;
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
  v8 = Count - 1;
  if (Count < 1)
    return 4294954454;
  if (((v6 + a2) & (unint64_t)~((v6 + a2) >> 63)) < Count)
    v8 = (v6 + a2) & ~((v6 + a2) >> 63);
  *(_QWORD *)DerivedStorage = v8;
  result = 0;
  if (a3)
    *a3 = v8 - v6;
  return result;
}

uint64_t ttmlCaptionTrackReader_GetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a2)
    *a2 = 1;
  if (a3)
    *a3 = 1952807028;
  return 0;
}

uint64_t QTMovieCacheMemReallocateCallBack()
{
  FigSignalErrorAt();
  return 0;
}

uint64_t fpm_StallWarningProc()
{
  __CFData *Owner;
  UInt8 *MutableBytePtr;
  double Seconds;
  double v3;
  double v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  CMTime v10;
  CMTime time;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  _QWORD v15[3];
  CMTime rhs;
  CMTime lhs;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    memset(v15, 0, sizeof(v15));
    memset(&v14, 0, sizeof(v14));
    memset(&v13, 0, sizeof(v13));
    v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19402EA0C](*((_QWORD *)MutableBytePtr + 6));
    os_retain(*((void **)MutableBytePtr + 1070));
    voucher_adopt();
    if (CMTimebaseGetRate(*((CMTimebaseRef *)MutableBytePtr + 3)) > 0.0)
    {
      FigPlayabilityMonitorGetPlayableRange((uint64_t)MutableBytePtr, (uint64_t)v15, &v14);
      CMTimebaseGetTime(&v13, *((CMTimebaseRef *)MutableBytePtr + 3));
      lhs = v14;
      rhs = v13;
      CMTimeSubtract(&time, &lhs, &rhs);
      Seconds = CMTimeGetSeconds(&time);
      FigFormatReaderUtilityGetDuration(*((_QWORD *)MutableBytePtr + 1), 1, &v12);
      lhs = v12;
      rhs = v13;
      v3 = 0.0;
      if (CMTimeCompare(&lhs, &rhs) >= 1)
      {
        lhs = v12;
        rhs = v13;
        CMTimeSubtract(&v10, &lhs, &rhs);
        v3 = CMTimeGetSeconds(&v10);
      }
      v4 = fmax(Seconds, 0.0);
      if (dword_1EE2A2A08)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*((_DWORD *)MutableBytePtr + 26) != 3 && v3 > v4)
      {
        if (v4 >= 0.1)
        {
          if (dword_1EE2A2A08)
          {
            v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpm_updateCache((uint64_t)MutableBytePtr);
        }
        else
        {
          *((_QWORD *)MutableBytePtr + 13) = 3;
          if (dword_1EE2A2A08)
          {
            v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRetainProxyRetain();
          CMNotificationCenterGetDefaultLocalCenter();
          FigDeferNotificationToDispatchQueue();
        }
      }
    }
    v8 = (void *)voucher_adopt();
    os_release(v8);
    MEMORY[0x19402EA24](*((_QWORD *)MutableBytePtr + 6));
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t fpm_prepareDataRateProfile(uint64_t a1)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  int v7;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v3 = Mutable;
    if (*(uint64_t *)(a1 + 80) >= 1)
    {
      v4 = 0;
      v5 = 0;
      while (!FigCFArrayAppendInt32())
      {
        ++v5;
        v4 += 48;
        if (v5 >= *(_QWORD *)(a1 + 80))
          goto LABEL_6;
      }
      v6 = (const void *)FigSignalErrorAt();
      goto LABEL_15;
    }
LABEL_6:
    if (!FigFormatReaderUtilityEstablishCombinedDataRateProfileForTracks(*(_QWORD *)(a1 + 8), v3, (void *)(a1 + 336), 1024, (CMTime *)(a1 + 8528)))
    {
      v6 = 0;
      *(_BYTE *)(a1 + 8552) = 1;
LABEL_15:
      CFRelease(v3);
      return (uint64_t)v6;
    }
    v6 = (const void *)MGCopyAnswer();
    if (FigCFEqual())
    {
      v7 = 1;
    }
    else
    {
      if (*(_DWORD *)(a1 + 112) == 3)
        goto LABEL_13;
      v7 = 0;
    }
    *(_DWORD *)(a1 + 112) = v7;
LABEL_13:
    if (v6)
    {
      CFRelease(v6);
      v6 = 0;
    }
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

uint64_t fpm_timebaseRateChangedCallback()
{
  __int128 v0;
  __CFData *Owner;
  UInt8 *MutableBytePtr;
  Float64 Rate;
  _BYTE *v4;
  _OWORD v6[3];
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v0 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v7 = *MEMORY[0x1E0CA2E40];
  v8 = v0;
  v9 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19402EA0C](*((_QWORD *)MutableBytePtr + 6));
    if (CMTimebaseGetRate(*((CMTimebaseRef *)MutableBytePtr + 3)) != 0.0 && *((_DWORD *)MutableBytePtr + 26) == 3)
      *((_QWORD *)MutableBytePtr + 13) = 0;
    Rate = CMTimebaseGetRate(*((CMTimebaseRef *)MutableBytePtr + 3));
    v4 = MutableBytePtr + 8553;
    if (Rate >= 0.0)
    {
      if (MutableBytePtr[8553])
      {
        *v4 = 0;
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
    }
    else if (!MutableBytePtr[8553])
    {
      *v4 = 1;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    fpm_durationAhead((uint64_t)MutableBytePtr, &v7);
    v6[0] = v7;
    v6[1] = v8;
    v6[2] = v9;
    fpm_updateStreamBufferDurationAhead(MutableBytePtr, (uint64_t)v6);
    MEMORY[0x19402EA24](*((_QWORD *)MutableBytePtr + 6));
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t fpm_streamCacheMissCallback()
{
  __CFData *Owner;
  UInt8 *MutableBytePtr;
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v5;
  __int128 v7;
  CMTime rhs;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime time1;
  CMTime time2;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(&v13, 0, sizeof(v13));
  memset(&v12, 0, sizeof(v12));
  memset(&v11, 0, sizeof(v11));
  memset(&v10, 0, sizeof(v10));
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19402EA0C](*((_QWORD *)MutableBytePtr + 6));
    if (*((_DWORD *)MutableBytePtr + 26) != 3)
    {
      CMTimeMake(&v11, 2000, 1000);
      CMTimebaseGetTime(&time1, *((CMTimebaseRef *)MutableBytePtr + 3));
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v7 = *(_OWORD *)&time2.value;
      epoch = time2.epoch;
      CMTimeMaximum(&v13, &time1, &time2);
      time1 = v13;
      time2 = v11;
      CMTimeSubtract(&v9, &time1, &time2);
      *(_OWORD *)&time1.value = v7;
      time1.epoch = epoch;
      CMTimeMaximum(&v12, &time1, &v9);
      time1 = v12;
      if (!fpm_getPlayableDurationFromTime((uint64_t)MutableBytePtr, &time1, (uint64_t)&v10, 0, 0, 0))
      {
        time2 = v12;
        rhs = v10;
        CMTimeAdd(&time1, &time2, &rhs);
        v12 = time1;
        time2 = v13;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          *((_QWORD *)MutableBytePtr + 13) = 3;
          if (dword_1EE2A2A08)
          {
            LODWORD(rhs.value) = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = rhs.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
              v5 = value;
            else
              v5 = value & 0xFFFFFFFE;
            if (v5)
            {
              LODWORD(time2.value) = 136315394;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_streamCacheMissCallback";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = MutableBytePtr;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRetainProxyRetain();
          CMNotificationCenterGetDefaultLocalCenter();
          FigDeferNotificationToDispatchQueue();
        }
      }
    }
    MEMORY[0x19402EA24](*((_QWORD *)MutableBytePtr + 6));
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t FigPlayabilityMonitorCanReuse(_QWORD *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int *v12;
  int v13;
  int v14;
  int v15;

  MEMORY[0x19402EA0C](a1[6]);
  if (a1[10] == a4 && a1[1] == a2 && a1[2] == a5)
  {
    if (a4 < 1)
    {
      v10 = 1;
      goto LABEL_5;
    }
    v12 = (int *)a1[11];
    v10 = 1;
    while (1)
    {
      v14 = *v12;
      v12 += 12;
      v13 = v14;
      v15 = *a3++;
      if (v13 != v15)
        break;
      if (!--a4)
        goto LABEL_5;
    }
  }
  v10 = 0;
LABEL_5:
  MEMORY[0x19402EA24](a1[6]);
  return v10;
}

uint64_t FigPlayabilityMonitorSetRenderPipelines(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;

  MEMORY[0x19402EA0C](a1[6]);
  if (!a2)
  {
    a2 = a1[10];
    goto LABEL_5;
  }
  if (a1[10] == a2)
  {
LABEL_5:
    if (a2 < 1)
    {
LABEL_16:
      v6 = 1;
      goto LABEL_17;
    }
    v7 = 0;
    v8 = 32;
    while (1)
    {
      v9 = a1[11];
      v10 = *(const void **)(v9 + v8);
      if (a3)
      {
        v11 = *(const void **)(a3 + 8 * v7);
        *(_QWORD *)(v9 + v8) = v11;
        if (v11)
          CFRetain(v11);
        if (!v10)
          goto LABEL_12;
      }
      else
      {
        *(_QWORD *)(v9 + v8) = 0;
        if (!v10)
          goto LABEL_12;
      }
      CFRelease(v10);
LABEL_12:
      ++v7;
      v8 += 48;
      if (v7 >= a1[10])
        goto LABEL_16;
    }
  }
  v6 = 0;
LABEL_17:
  MEMORY[0x19402EA24](a1[6]);
  return v6;
}

uint64_t FigPlayabilityMonitorSetPlaybackTimebase(uint64_t a1, const void *a2)
{
  const void *v4;
  NSObject *v5;
  OpaqueCMTimebase *v6;
  const void *v7;
  OpaqueCMTimebase *v8;
  NSObject *v9;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 48));
  v4 = *(const void **)(a1 + 24);
  if (v4 != a2)
  {
    if (v4)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v5 = *(NSObject **)(a1 + 304);
      if (v5)
        CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 24), v5);
      v6 = (OpaqueCMTimebase *)CFRetain(*(CFTypeRef *)(a1 + 24));
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 48));
      CMTimebaseNotificationBarrier(v6);
      MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 48));
      CFRelease(v6);
      if (*(int *)(a1 + 64) >= 1)
      {
        do
          FigConditionVariableWaitRelative();
        while (*(int *)(a1 + 64) > 0);
      }
      v7 = *(const void **)(a1 + 24);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(a1 + 24) = a2;
    if (a2)
      CFRetain(a2);
    if (v7)
      CFRelease(v7);
    v8 = *(OpaqueCMTimebase **)(a1 + 24);
    if (v8)
    {
      v9 = *(NSObject **)(a1 + 304);
      if (v9)
        CMTimebaseAddTimerDispatchSource(v8, v9);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 48));
  return 1;
}

uint64_t fpm_updateCacheAndNotify(uint64_t a1)
{
  __int128 v2;
  const void **v3;
  uint64_t UpTimeNanoseconds;
  double v5;
  uint64_t updated;
  double Seconds;
  double v8;
  const void *v9;
  __CFDictionary *Mutable;
  int v11;
  uint64_t v12;
  uint64_t CMBaseObject;
  unsigned int (*v14)(uint64_t, _QWORD, uint64_t, CFBooleanRef *);
  int Value;
  double v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, _QWORD, uint64_t, CFBooleanRef *);
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, _QWORD, uint64_t, CFBooleanRef *);
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  double v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *);
  CFTypeRef v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *);
  float v48;
  int DoubleIfPresent;
  BOOL v51;
  const void *v52;
  const void *v53;
  const void *v54;
  double v55;
  int v56;
  float v57;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v59;
  unsigned int v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *);
  double v65;
  double v66;
  int v67;
  double v68;
  float v69;
  double v70;
  double v71;
  NSObject *v72;
  unsigned int v73;
  unsigned int v74;
  char *v75;
  float v76;
  CFNumberRef v77;
  NSObject *v78;
  unsigned int v79;
  unsigned int v80;
  NSObject *v81;
  unsigned int v82;
  unsigned int v83;
  NSObject *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  NSObject *v88;
  unsigned int v89;
  unsigned int v90;
  float v91;
  NSObject *v92;
  unsigned int v93;
  unsigned int v94;
  char *v95;
  float v96;
  float v97;
  NSObject *v98;
  unsigned int v99;
  unsigned int v100;
  float v101;
  double v102;
  int v103;
  NSObject *v104;
  unsigned int v105;
  unsigned int v106;
  char *v107;
  float v108;
  double v109;
  double v110;
  int v111;
  NSObject *v112;
  unsigned int v113;
  unsigned int v114;
  float v115;
  double v116;
  double v117;
  CFTypeRef v118;
  uint64_t v120;
  __int128 v121;
  _BYTE v122[32];
  os_log_type_t type;
  unsigned int v124;
  CMTime v125;
  double v126;
  double v127;
  double valuePtr;
  CFNumberRef number;
  CFDictionaryRef theDict;
  CFBooleanRef BOOLean;
  CMTime v132;
  CMTime time2;
  double v134;
  __int16 v135;
  double v136;
  __int16 v137;
  double v138;
  __int16 v139;
  double v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  _BYTE time[32];
  __int128 v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v121 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)v122 = v2;
  *(_OWORD *)&v122[16] = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v3 = (const void **)MEMORY[0x1E0C9AE40];
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_DWORD *)(a1 + 96) == *(_DWORD *)(a1 + 184) && !*(_BYTE *)(a1 + 313))
  {
    fpm_durationAhead(a1, &v121);
    *(_OWORD *)time = *(_OWORD *)&v122[8];
    *(_QWORD *)&time[16] = *(_QWORD *)&v122[24];
    Seconds = CMTimeGetSeconds((CMTime *)time);
    v5 = Seconds;
    updated = 0;
  }
  else
  {
    fpm_durationAhead(a1, &v121);
    *(_OWORD *)time = *(_OWORD *)&v122[8];
    *(_QWORD *)&time[16] = *(_QWORD *)&v122[24];
    v5 = CMTimeGetSeconds((CMTime *)time);
    updated = fpm_updateCache(a1);
    fpm_durationAhead(a1, &v121);
    *(_OWORD *)time = *(_OWORD *)&v122[8];
    *(_QWORD *)&time[16] = *(_QWORD *)&v122[24];
    Seconds = CMTimeGetSeconds((CMTime *)time);
  }
  v8 = Seconds;
  v9 = *v3;
  if (v5 != Seconds)
    *(_BYTE *)(a1 + 316) = 1;
  if (v5 < Seconds && !*(_BYTE *)(a1 + 315))
  {
    *(_BYTE *)(a1 + 314) = 0;
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
  }
  if (*(_BYTE *)(a1 + 316) && (*(_BYTE *)(a1 + 315) || UpTimeNanoseconds - *(_QWORD *)(a1 + 208) >= 500000000))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
      CFDictionarySetValue(Mutable, CFSTR("FPM_IsFilling"), v9);
    FigRetainProxyRetain();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
    *(_QWORD *)(a1 + 208) = UpTimeNanoseconds;
    *(_BYTE *)(a1 + 316) = 0;
  }
  if (UpTimeNanoseconds - *(_QWORD *)(a1 + 200) > 449999999 || fpm_shouldUpdateAggressively(a1))
  {
    v11 = *(unsigned __int8 *)(a1 + 314);
    switch(*(_DWORD *)(a1 + 112))
    {
      case 0:
        v132 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        theDict = 0;
        BOOLean = 0;
        valuePtr = 0.0;
        *(double *)&number = 0.0;
        v126 = 0.0;
        v127 = 0.0;
        if (FigFormatReaderUtilityGetDuration(*(_QWORD *)(a1 + 8), 1, &v132) || (v132.flags & 0x1D) != 1)
          goto LABEL_244;
        v12 = *MEMORY[0x1E0C9AE00];
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v14 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (v14 && !v14(CMBaseObject, *MEMORY[0x1E0CA2078], v12, &BOOLean))
        {
          Value = CFBooleanGetValue(BOOLean);
          CFRelease(BOOLean);
        }
        else
        {
          Value = 0;
        }
        CMTimebaseGetTime((CMTime *)time, *(CMTimebaseRef *)(a1 + 24));
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        CMTimeMaximum(&v125, (CMTime *)time, &time2);
        v26 = CMTimeGetSeconds(&v125);
        *(CMTime *)time = v132;
        v27 = CMTimeGetSeconds((CMTime *)time);
        v28 = v27 - v26;
        v29 = 0.0;
        if (v27 <= v26)
          v28 = 0.0;
        if (v28 <= 900.0)
          v30 = v28;
        else
          v30 = 900.0;
        if (Value
          || v27 <= 0.0
          || (v31 = CMByteStreamGetCMBaseObject(),
              (v32 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48)) == 0))
        {
          v33 = 0.0;
        }
        else
        {
          v33 = 0.0;
          if (!v32(v31, *MEMORY[0x1E0CA2070], v12, &number))
          {
            CFNumberGetValue(number, kCFNumberFloat64Type, &valuePtr);
            CFRelease(number);
            v29 = valuePtr / v27;
            v33 = (v30 - v8) * (valuePtr / v27);
          }
        }
        v34 = CMByteStreamGetCMBaseObject();
        v35 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v35 && !v35(v34, *MEMORY[0x1E0CA2090], v12, &theDict))
        {
          FigCFDictionaryGetDoubleIfPresent();
          DoubleIfPresent = FigCFDictionaryGetDoubleIfPresent();
          v51 = v126 > 0.0 && DoubleIfPresent != 0;
          *(_BYTE *)(a1 + 8555) = v51;
          v52 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA2FA0]);
          if (v52)
            v36 = CFRetain(v52);
          else
            v36 = 0;
          CFRelease(theDict);
        }
        else
        {
          v36 = 0;
        }
        if ((v132.flags & 0x1D) != 1)
          goto LABEL_222;
        if (v33 < 1.0 || (v55 = v30 * v126, v30 * v126 >= v33 + v33))
        {
          if (*(_DWORD *)(a1 + 104) == 1)
            goto LABEL_222;
          if (v8 < 10.0 && v30 > 10.0)
          {
            v57 = v8 / 10.0;
            *(float *)(a1 + 108) = v57;
            goto LABEL_222;
          }
          fpm_createDurationDictionary(v8);
          *(_QWORD *)(a1 + 104) = 0x3F80000000000001;
          if (dword_1EE2A2A08)
          {
            v124 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v59 = v124;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
              v60 = v59;
            else
              v60 = v59 & 0xFFFFFFFE;
            if (v60)
            {
              v61 = *(float *)(a1 + 108);
              LODWORD(time2.value) = 136316418;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingLegacyAlgorithm";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2048;
              v134 = v126 * 8.0 / 1000.0;
              v135 = 2048;
              v136 = v33 / 1000.0;
              v137 = 2048;
              v138 = v30;
              v139 = 2048;
              v140 = v61;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          if (!*(_BYTE *)(a1 + 8555))
          {
            fpm_likelyToKeepUpUsingLivePlaybackAlgorithm(a1, v11, v8);
            goto LABEL_222;
          }
          v56 = *(_DWORD *)(a1 + 104);
          if (v56 == 1)
          {
            if (v55 >= v33)
            {
LABEL_222:
              if (v11)
              {
                if (*(_DWORD *)(a1 + 104) != 1)
                {
                  *(_QWORD *)(a1 + 104) = 2;
                  v111 = *(_DWORD *)(a1 + 96);
                  if (*(_DWORD *)(a1 + 100) != v111)
                  {
                    *(_DWORD *)(a1 + 100) = v111;
                    if (dword_1EE2A2A08)
                    {
                      v124 = 0;
                      type = OS_LOG_TYPE_DEFAULT;
                      v112 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v113 = v124;
                      if (os_log_type_enabled(v112, type))
                        v114 = v113;
                      else
                        v114 = v113 & 0xFFFFFFFE;
                      if (v114)
                      {
                        v115 = *(float *)(a1 + 108);
                        LODWORD(time2.value) = 136316418;
                        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingLegacyAlgorithm";
                        LOWORD(time2.flags) = 2048;
                        *(_QWORD *)((char *)&time2.flags + 2) = a1;
                        HIWORD(time2.epoch) = 2048;
                        v134 = v126 * 8.0 / 1000.0;
                        v135 = 2048;
                        v136 = v33 / 1000.0;
                        v137 = 2048;
                        v138 = v30;
                        v139 = 2048;
                        v140 = v115;
                        _os_log_send_and_compose_impl();
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    FigRetainProxyRetain();
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigDeferNotificationToDispatchQueue();
                  }
                }
              }
              MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 8632));
              *(double *)(a1 + 8576) = v33;
              *(double *)(a1 + 8584) = v30;
              v116 = v126;
              v117 = v127;
              *(double *)(a1 + 8592) = v126;
              *(double *)(a1 + 8600) = v117;
              *(_QWORD *)(a1 + 8608) = 0x4000000000000000;
              v102 = (v33 + v33) / v116 - v30;
              goto LABEL_234;
            }
          }
          else
          {
            v97 = v8 / (v30 * (1.0 - v126 / (v29 + v29)));
            *(float *)(a1 + 108) = v97;
            if (v55 >= v33 || v56 == 2)
              goto LABEL_222;
          }
          *(_DWORD *)(a1 + 104) = 2;
          if (dword_1EE2A2A08)
          {
            v124 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v98 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v99 = v124;
            if (os_log_type_enabled(v98, type))
              v100 = v99;
            else
              v100 = v99 & 0xFFFFFFFE;
            if (v100)
            {
              v101 = *(float *)(a1 + 108);
              LODWORD(time2.value) = 136316418;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingLegacyAlgorithm";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2048;
              v134 = v126 * 8.0 / 1000.0;
              v135 = 2048;
              v136 = v33 / 1000.0;
              v137 = 2048;
              v138 = v30;
              v139 = 2048;
              v140 = v101;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        FigRetainProxyRetain();
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
        goto LABEL_222;
      case 1:
        v132 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        theDict = 0;
        BOOLean = 0;
        valuePtr = 0.0;
        *(double *)&number = 0.0;
        v126 = 0.0;
        v127 = 0.0;
        v16 = *(double *)(a1 + 144);
        v17 = *(float *)(a1 + 116);
        if (FigFormatReaderUtilityGetDuration(*(_QWORD *)(a1 + 8), 1, &v132) || (v132.flags & 0x1D) != 1)
          goto LABEL_244;
        v18 = *MEMORY[0x1E0C9AE00];
        v19 = CMByteStreamGetCMBaseObject();
        v20 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (v20 && !v20(v19, *MEMORY[0x1E0CA2078], v18, &BOOLean))
        {
          v21 = CFBooleanGetValue(BOOLean);
          CFRelease(BOOLean);
        }
        else
        {
          v21 = 0;
        }
        *(CMTime *)time = v132;
        v37 = CMTimeGetSeconds((CMTime *)time);
        CMTimebaseGetTime((CMTime *)time, *(CMTimebaseRef *)(a1 + 24));
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        CMTimeMaximum(&v125, (CMTime *)time, &time2);
        v38 = CMTimeGetSeconds(&v125);
        v39 = 0.0;
        if (v37 <= v38)
          v40 = 0.0;
        else
          v40 = v37 - v38;
        v41 = CMByteStreamGetCMBaseObject();
        v42 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
        if (v42 && !v42(v41, *MEMORY[0x1E0CA2090], v18, &number))
        {
          FigCFDictionaryGetDoubleIfPresent();
          FigCFDictionaryGetDoubleIfPresent();
          v53 = CFDictionaryGetValue(number, (const void *)*MEMORY[0x1E0CA2FA0]);
          if (v53)
            v36 = CFRetain(v53);
          else
            v36 = 0;
          CFRelease(number);
        }
        else
        {
          v36 = 0;
        }
        v62 = 0;
        if (v21 || v37 <= 0.0)
          goto LABEL_102;
        v63 = CMByteStreamGetCMBaseObject();
        v64 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v64 && !v64(v63, *MEMORY[0x1E0CA2070], v18, &theDict))
        {
          CFNumberGetValue(theDict, kCFNumberFloat64Type, &valuePtr);
          CFRelease(theDict);
          v62 = 0;
          v39 = valuePtr / v37;
          v70 = v40 - v8;
          if (v40 - v8 < 0.0)
            v70 = 0.0;
          v65 = v70 * v39;
          if (v126 > 0.0 && v39 > 0.0)
          {
            v71 = v126 / v39;
            if (v126 / v39 >= *(float *)(a1 + 124))
            {
              if (v71 <= *(float *)(a1 + 128))
              {
                if (*(_DWORD *)(a1 + 104) != 1)
                {
                  v16 = *(double *)(a1 + 136);
                  v65 = 0.0;
                }
                v62 = 2;
              }
              else if (v71 <= *(float *)(a1 + 132))
              {
                if (v71 <= *(float *)(a1 + 128))
                {
                  v62 = 0;
                }
                else
                {
                  if (*(_DWORD *)(a1 + 104) != 1)
                  {
                    v16 = *(double *)(a1 + 144);
                    v65 = 0.0;
                  }
                  v62 = 3;
                }
              }
              else
              {
                if (*(_DWORD *)(a1 + 104) != 1)
                {
                  v16 = *(double *)(a1 + 152);
                  v65 = 0.0;
                }
                v62 = 4;
              }
            }
            else
            {
              if (v37 > 300.0)
                v17 = *(float *)(a1 + 120);
              v62 = 1;
            }
          }
        }
        else
        {
          v62 = 0;
LABEL_102:
          v65 = 0.0;
        }
        if ((v132.flags & 0x1D) != 1)
          goto LABEL_204;
        if (v65 < 1.0 || (v66 = v40 * v126, v40 * v126 >= v65 * v17))
        {
          if (*(_DWORD *)(a1 + 104) == 1)
            goto LABEL_204;
          if (v16 >= v40)
            v68 = v40;
          else
            v68 = v16;
          if (v68 > v8)
          {
            v69 = v8 / v68;
            *(float *)(a1 + 108) = v69;
            goto LABEL_204;
          }
          fpm_createDurationDictionary(v8);
          *(_QWORD *)(a1 + 104) = 0x3F80000000000001;
          if (dword_1EE2A2A08)
          {
            v124 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v73 = v124;
            if (os_log_type_enabled(v72, type))
              v74 = v73;
            else
              v74 = v73 & 0xFFFFFFFE;
            if (v74)
            {
              v75 = fpm_likelyToKeepUpUsingBucketAlgorithm_bandwidthType[v62];
              LODWORD(time2.value) = 136316930;
              v76 = *(float *)(a1 + 108);
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingBucketAlgorithm";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2082;
              v134 = *(double *)&v75;
              v135 = 2048;
              v136 = v126 * 8.0 / 1000.0;
              v137 = 2048;
              v138 = v65 / 1000.0;
              v139 = 2048;
              v140 = v40 * (v126 / 1000.0);
              v141 = 2048;
              v142 = v40;
              v143 = 2048;
              v144 = v76;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_203;
        }
        v67 = *(_DWORD *)(a1 + 104);
        if (v67 == 1)
        {
          if (v66 >= v65)
            goto LABEL_204;
          goto LABEL_173;
        }
        v91 = v8 / (v40 * (1.0 - v126 / (v39 * v17)));
        *(float *)(a1 + 108) = v91;
        if (v66 < v65 && v67 != 2)
        {
LABEL_173:
          *(_QWORD *)(a1 + 104) = 2;
          if (dword_1EE2A2A08)
          {
            v120 = v62;
            v124 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v92 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v93 = v124;
            if (os_log_type_enabled(v92, type))
              v94 = v93;
            else
              v94 = v93 & 0xFFFFFFFE;
            if (v94)
            {
              v95 = fpm_likelyToKeepUpUsingBucketAlgorithm_bandwidthType[v120];
              LODWORD(time2.value) = 136316930;
              v96 = *(float *)(a1 + 108);
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingBucketAlgorithm";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2082;
              v134 = *(double *)&v95;
              v135 = 2048;
              v136 = v126 * 8.0 / 1000.0;
              v137 = 2048;
              v138 = v65 / 1000.0;
              v139 = 2048;
              v140 = v40 * (v126 / 1000.0);
              v141 = 2048;
              v142 = v40;
              v143 = 2048;
              v144 = v96;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v62 = v120;
          }
LABEL_203:
          FigRetainProxyRetain();
          CMNotificationCenterGetDefaultLocalCenter();
          FigDeferNotificationToDispatchQueue();
        }
LABEL_204:
        if (v11)
        {
          if (*(_DWORD *)(a1 + 104) != 1)
          {
            *(_QWORD *)(a1 + 104) = 2;
            v103 = *(_DWORD *)(a1 + 96);
            if (*(_DWORD *)(a1 + 100) != v103)
            {
              *(_DWORD *)(a1 + 100) = v103;
              if (dword_1EE2A2A08)
              {
                v124 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                v104 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v105 = v124;
                if (os_log_type_enabled(v104, type))
                  v106 = v105;
                else
                  v106 = v105 & 0xFFFFFFFE;
                if (v106)
                {
                  v107 = fpm_likelyToKeepUpUsingBucketAlgorithm_bandwidthType[v62];
                  LODWORD(time2.value) = 136316930;
                  v108 = *(float *)(a1 + 108);
                  *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingBucketAlgorithm";
                  LOWORD(time2.flags) = 2048;
                  *(_QWORD *)((char *)&time2.flags + 2) = a1;
                  HIWORD(time2.epoch) = 2082;
                  v134 = *(double *)&v107;
                  v135 = 2048;
                  v136 = v126 * 8.0 / 1000.0;
                  v137 = 2048;
                  v138 = v65 / 1000.0;
                  v139 = 2048;
                  v140 = v40 * (v126 / 1000.0);
                  v141 = 2048;
                  v142 = v40;
                  v143 = 2048;
                  v144 = v108;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigRetainProxyRetain();
              CMNotificationCenterGetDefaultLocalCenter();
              FigDeferNotificationToDispatchQueue();
            }
          }
        }
        MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 8632));
        *(double *)(a1 + 8576) = v65;
        *(double *)(a1 + 8584) = v40;
        v109 = v126;
        v110 = v127;
        *(double *)(a1 + 8592) = v126;
        *(double *)(a1 + 8600) = v110;
        *(double *)(a1 + 8608) = v17;
        v102 = v65 * v17 / v109 - v40;
LABEL_234:
        if (v102 < 0.0)
          v102 = 0.0;
        *(double *)(a1 + 8616) = v102;
        v118 = *(CFTypeRef *)(a1 + 8624);
        if (v118 != v36)
        {
          *(_QWORD *)(a1 + 8624) = v36;
          if (v36)
            CFRetain(v36);
          if (v118)
            CFRelease(v118);
        }
        if (v36)
          CFRelease(v36);
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 8632));
LABEL_244:
        *(_QWORD *)(a1 + 200) = UpTimeNanoseconds;
        break;
      case 2:
        v132 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        theDict = 0;
        BOOLean = 0;
        valuePtr = 0.0;
        *(double *)&number = 0.0;
        v126 = 0.0;
        v127 = 0.0;
        if (FigFormatReaderUtilityGetDuration(*(_QWORD *)(a1 + 8), 1, &v132) || (v132.flags & 0x1D) != 1)
          goto LABEL_244;
        v22 = *MEMORY[0x1E0C9AE00];
        v23 = CMByteStreamGetCMBaseObject();
        v24 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (v24 && !v24(v23, *MEMORY[0x1E0CA2078], v22, &BOOLean))
        {
          v25 = CFBooleanGetValue(BOOLean);
          CFRelease(BOOLean);
        }
        else
        {
          v25 = 0;
        }
        CMTimebaseGetTime((CMTime *)time, *(CMTimebaseRef *)(a1 + 24));
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        CMTimeMaximum(&v125, (CMTime *)time, &time2);
        v43 = CMTimeGetSeconds(&v125);
        *(CMTime *)time = v132;
        v44 = CMTimeGetSeconds((CMTime *)time);
        if (v44 <= v43)
          v45 = 0.0;
        else
          v45 = v44 - v43;
        v46 = CMByteStreamGetCMBaseObject();
        v47 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        v48 = 1.0;
        if (v47 && !v47(v46, *MEMORY[0x1E0CA2090], v22, &theDict))
        {
          FigCFDictionaryGetDoubleIfPresent();
          FigCFDictionaryGetDoubleIfPresent();
          FigCFDictionaryGetDoubleIfPresent();
          v54 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA2FA0]);
          if (v54)
            v36 = CFRetain(v54);
          else
            v36 = 0;
          if (*(double *)&number != 0.0)
            v48 = v127 / *(double *)&number + 1.0;
          CFRelease(theDict);
        }
        else
        {
          v36 = 0;
        }
        if (v25
          || v45 - v8 <= 0.1
          || (valuePtr <= 0.0 ? (v77 = number) : COERCE_CFNUMBERREF(*(double *)&v77 = valuePtr),
              fpm_isLikelyToKeepUp(a1, &v126, v43, v8, *(double *)&v77, v48)))
        {
          if (*(_DWORD *)(a1 + 104) == 1)
            goto LABEL_155;
          fpm_createDurationDictionary(v8);
          *(_QWORD *)(a1 + 104) = 0x3F80000000000001;
          if (dword_1EE2A2A08)
          {
            v124 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v79 = v124;
            if (os_log_type_enabled(v78, type))
              v80 = v79;
            else
              v80 = v79 & 0xFFFFFFFE;
            if (v80)
            {
              LODWORD(time2.value) = 136315906;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingDynamicAlgorithm";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2048;
              v134 = valuePtr * 8.0 / 1000.0;
              v135 = 2048;
              v136 = v45;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 104) == 2)
            goto LABEL_155;
          *(_QWORD *)(a1 + 104) = 2;
          if (dword_1EE2A2A08)
          {
            v124 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v82 = v124;
            if (os_log_type_enabled(v81, type))
              v83 = v82;
            else
              v83 = v82 & 0xFFFFFFFE;
            if (v83)
            {
              LODWORD(time2.value) = 136316162;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingDynamicAlgorithm";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2048;
              v134 = valuePtr * 8.0 / 1000.0;
              v135 = 2048;
              v136 = v45;
              v137 = 2048;
              v138 = v126;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        FigRetainProxyRetain();
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
LABEL_155:
        if (dword_1EE2A2A08)
        {
          v124 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v85 = v124;
          if (os_log_type_enabled(v84, type))
            v86 = v85;
          else
            v86 = v85 & 0xFFFFFFFE;
          if (v86)
          {
            LODWORD(time2.value) = 136316930;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingDynamicAlgorithm";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = a1;
            HIWORD(time2.epoch) = 2048;
            v134 = *(double *)&number * 8.0 / 1000.0;
            v135 = 2048;
            v136 = valuePtr * 8.0 / 1000.0;
            v137 = 2048;
            v138 = v48;
            v139 = 2048;
            v140 = v44 - v45;
            v141 = 2048;
            v142 = v8;
            v143 = 2048;
            v144 = v126;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        updated = updated;
        if (v11)
        {
          if (*(_DWORD *)(a1 + 104) != 1)
          {
            *(_QWORD *)(a1 + 104) = 2;
            v87 = *(_DWORD *)(a1 + 96);
            if (*(_DWORD *)(a1 + 100) != v87)
            {
              *(_DWORD *)(a1 + 100) = v87;
              if (dword_1EE2A2A08)
              {
                v124 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                v88 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v89 = v124;
                if (os_log_type_enabled(v88, type))
                  v90 = v89;
                else
                  v90 = v89 & 0xFFFFFFFE;
                if (v90)
                {
                  LODWORD(time2.value) = 136316162;
                  *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingDynamicAlgorithm";
                  LOWORD(time2.flags) = 2048;
                  *(_QWORD *)((char *)&time2.flags + 2) = a1;
                  HIWORD(time2.epoch) = 2048;
                  v134 = valuePtr * 8.0 / 1000.0;
                  v135 = 2048;
                  v136 = v45;
                  v137 = 2048;
                  v138 = v126;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigRetainProxyRetain();
              CMNotificationCenterGetDefaultLocalCenter();
              FigDeferNotificationToDispatchQueue();
            }
          }
        }
        MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 8632));
        *(double *)(a1 + 8584) = v45;
        *(double *)(a1 + 8592) = valuePtr;
        *(double *)(a1 + 8600) = *(double *)&number;
        *(double *)(a1 + 8608) = v48;
        v102 = v126;
        goto LABEL_234;
      case 3:
        fpm_likelyToKeepUpUsingLivePlaybackAlgorithm(a1, *(unsigned __int8 *)(a1 + 314), v8);
        goto LABEL_244;
      default:
        goto LABEL_244;
    }
  }
  *(_OWORD *)time = v121;
  *(_OWORD *)&time[16] = *(_OWORD *)v122;
  v146 = *(_OWORD *)&v122[16];
  fpm_updateStreamBufferDurationAhead((_QWORD *)a1, (uint64_t)time);
  *(_BYTE *)(a1 + 315) = 0;
  return updated;
}

uint64_t FigPlayabilityMonitorGetPlaythroughInfo(uint64_t a1, _DWORD *a2, BOOL *a3, _DWORD *a4)
{
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 48));
  if (a2)
    *a2 = *(_DWORD *)(a1 + 104);
  if (a3)
    *a3 = *(_BYTE *)(a1 + 314) == 0;
  if (a4)
    *a4 = *(_DWORD *)(a1 + 108);
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 48));
  return 0;
}

uint64_t FigPlayabilityMonitorGetProgressToPlayThrough(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 108);
  return 0;
}

uint64_t FigPlayabilityMonitorGetPlayabilityMetrics(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  MEMORY[0x19402EA0C](a1[1079]);
  *a2 = a1[1072];
  *a3 = a1[1073];
  *a4 = a1[1074];
  *a5 = a1[1075];
  *a6 = a1[1076];
  *a7 = a1[1077];
  MEMORY[0x19402EA24](a1[1079]);
  return 0;
}

uint64_t FigPlayabilityMonitorCopyRemoteIPAddress(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v4;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 8632));
  v4 = *(CFTypeRef *)(a1 + 8624);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 8632));
  return 0;
}

void fpm_postDeferredNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  __CFData *Owner;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    CFDataGetMutableBytePtr(Owner);
    CMNotificationCenterPostNotification();
  }
  FigRetainProxyUnlockMutex();
  FigRetainProxyRelease();
  if (a5)
    CFRelease(a5);
}

uint64_t fpm_getPlayableDurationFromTime(uint64_t a1, CMTime *a2, uint64_t a3, char *a4, uint64_t *a5, CMTimeValue *a6)
{
  CMTimeValue *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  CMTime *v10;
  CMTimeFlags v11;
  CMTimeEpoch v12;
  _OWORD *v13;
  CMTimeValue v14;
  CMTimeScale v15;
  CMTimeFlags v16;
  CMTimeEpoch v17;
  uint64_t v18;
  uint64_t v20;
  CMTimeEpoch v21;
  const void *v22;
  CFTypeRef v23;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t FigBaseObject;
  unsigned int (*v27)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  CMTimeFlags v28;
  CMTimeEpoch v29;
  int v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t *);
  uint64_t v33;
  void (*v34)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v35;
  void (*v36)(CFTypeRef, CMTime *, CFTypeRef *);
  __int128 v37;
  CFTypeRef v38;
  uint64_t (*v39)(CFTypeRef, CMTime *);
  uint64_t PlayableDurationForTrack;
  CMTimeValue v41;
  int32_t v42;
  CMTimeValue v43;
  CMTimeScale v44;
  double v45;
  OpaqueCMTimebase *v46;
  const void *v47;
  const void *v48;
  CFTypeRef v49;
  unsigned int (*v50)(CFTypeRef, uint64_t);
  Float64 RelativeRate;
  uint64_t v52;
  CMTimeValue v53;
  CMTimeValue v54;
  uint64_t v55;
  CMTimeValue v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  CMTimeEpoch v60;
  int32_t v61;
  CMTimeFlags v63;
  CMTimeScale v64;
  CMTimeValue v65;
  CMTimeEpoch v66;
  char v71;
  CMTimeFlags v72;
  CMTimeValue v73;
  CMTimeValue v74;
  CMTimeEpoch v75;
  CMTimeEpoch v77;
  CMTimeFlags v78;
  uint64_t v79;
  CMTimeEpoch v80;
  uint64_t v81;
  CMTime v82;
  CMTime v83;
  CMTime v84;
  CMTime v85;
  CMTime v86;
  CMTime v87;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime time2;
  uint64_t v92;
  CMTimeValue v93;
  CMTimeValue v94;
  CFDictionaryRef dictionaryRepresentation;
  CMTime v96[2];
  int32_t newTimescale[4];
  _OWORD v98[2];
  CFTypeRef v99;
  CFTypeRef cf;
  __int16 v101;
  CMTime v102;
  CMTime time1;
  uint64_t v104;
  int v105;
  CMTimeValue v106;
  CMTimeScale v107;
  uint64_t v108;
  int epoch_high;
  CMTimeValue v110;
  CMTimeScale v111;
  CMTimeValue v112;
  CMTimeScale v113;
  CMTimeValue v114;
  CMTimeScale v115;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v118;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = a2;
  v118 = *MEMORY[0x1E0C80C00];
  timescale = 0;
  value = 0;
  v115 = 0;
  v114 = 0;
  memset(&v102, 0, sizeof(v102));
  v112 = *MEMORY[0x1E0CA2E10];
  v11 = *(_DWORD *)(MEMORY[0x1E0CA2E10] + 12);
  v113 = *(_DWORD *)(MEMORY[0x1E0CA2E10] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
  v13 = (_OWORD *)MEMORY[0x1E0CA2E68];
  v14 = *MEMORY[0x1E0CA2E68];
  v110 = *MEMORY[0x1E0CA2E68];
  v15 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
  v16 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
  v111 = v15;
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v101 = 0;
  cf = 0;
  v99 = 0;
  memset(v98, 0, sizeof(v98));
  *(_OWORD *)newTimescale = 0u;
  memset(v96, 0, sizeof(v96));
  v94 = 0;
  dictionaryRepresentation = 0;
  v92 = 0;
  v93 = 0;
  v18 = *(_QWORD *)(a1 + 80);
  if (v18 < 1)
  {
    v56 = 0;
    v57 = 0x7FFFFFFFFFFFFFFFLL;
    v78 = v16;
    v77 = v17;
    v58 = 1;
    if (!v18)
      goto LABEL_77;
    goto LABEL_78;
  }
  v64 = v15;
  v65 = v14;
  v72 = v11;
  v74 = 0;
  v20 = 0;
  v79 = *MEMORY[0x1E0C9AE00];
  v75 = v12;
  v73 = 0x7FFFFFFFFFFFFFFFLL;
  v71 = 1;
  v21 = v12;
  v66 = v17;
  v77 = v17;
  v63 = v16;
  v78 = v16;
  do
  {
    v80 = v21;
    v81 = v20;
    v22 = *(const void **)(*(_QWORD *)(a1 + 88) + 48 * v20 + 32);
    if (v22)
      v23 = CFRetain(v22);
    else
      v23 = 0;
    value = v10->value;
    flags = v10->flags;
    timescale = v10->timescale;
    epoch = v10->epoch;
    ++*(_DWORD *)(a1 + 64);
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 48));
    if (v23)
    {
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v23);
      v27 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v27)
      {
        if (!v27(FigBaseObject, CFSTR("EndPresentationTimeForQueuedSamples"), v79, &dictionaryRepresentation))
        {
          CMTimeMakeFromDictionary(&time1, dictionaryRepresentation);
          v114 = time1.value;
          v28 = time1.flags;
          v115 = time1.timescale;
          v29 = time1.epoch;
          if (dictionaryRepresentation)
            CFRelease(dictionaryRepresentation);
          if ((v28 & 1) != 0)
          {
            time1.value = value;
            time1.timescale = timescale;
            time1.flags = flags;
            time1.epoch = epoch;
            time2.value = v114;
            time2.timescale = v115;
            time2.flags = v28;
            time2.epoch = v29;
            if (CMTimeCompare(&time1, &time2) < 0)
            {
              value = v114;
              timescale = v115;
              flags = v28;
              epoch = v29;
            }
          }
        }
      }
    }
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 48));
    v30 = *(_DWORD *)(a1 + 64) - 1;
    *(_DWORD *)(a1 + 64) = v30;
    if (v30)
    {
      if (!v23)
        goto LABEL_17;
LABEL_16:
      CFRelease(v23);
      goto LABEL_17;
    }
    MEMORY[0x19402D920](*(_QWORD *)(a1 + 72));
    if (v23)
      goto LABEL_16;
LABEL_17:
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 48 * v81 + 8);
    v32 = *(void (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v32)
      v32(v31, (char *)&v92 + 4, &v92);
    v33 = FigTrackReaderGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48 * v81 + 8));
    v34 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v34)
      v34(v33, CFSTR("EditCursorService"), v79, &cf);
    v35 = cf;
    if (cf)
    {
      v36 = *(void (**)(CFTypeRef, CMTime *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v36)
      {
        time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
        v36(v35, &time1, &v99);
      }
    }
    if (v99)
    {
      v106 = value;
      v107 = timescale;
      v105 = 0;
      v104 = 0;
      memset(&time1, 0, sizeof(time1));
      memset(&time2, 0, sizeof(time2));
      v37 = *MEMORY[0x1E0CA2E10];
      v102.epoch = v75;
      *(_OWORD *)&v102.value = v37;
      HIBYTE(v101) = 1;
      while (1)
      {
        v38 = v99;
        v39 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v39)
        {
          v59 = 4294954514;
          goto LABEL_90;
        }
        PlayableDurationForTrack = v39(v38, v96);
        if ((_DWORD)PlayableDurationForTrack)
          goto LABEL_95;
        *(_OWORD *)&lhs.value = *(_OWORD *)newTimescale;
        lhs.epoch = *(_QWORD *)&v98[0];
        rhs = *(CMTime *)((char *)v98 + 8);
        CMTimeAdd(&time, &lhs, &rhs);
        v41 = time.value;
        v42 = time.timescale;
        v108 = *(_QWORD *)&time.flags;
        epoch_high = HIDWORD(time.epoch);
        time.value = v106;
        time.timescale = v107;
        time.flags = flags;
        time.epoch = epoch;
        CMTimeConvertScale(&v87, &time, newTimescale[2], kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        *(_OWORD *)&time.value = *(_OWORD *)newTimescale;
        time.epoch = *(_QWORD *)&v98[0];
        if (CMTimeCompare(&time, &v87) <= 0)
        {
          time.value = v106;
          time.timescale = v107;
          time.flags = flags;
          time.epoch = epoch;
          CMTimeConvertScale(&v86, &time, v42, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          time.value = v41;
          time.timescale = v42;
          *(_QWORD *)&time.flags = v108;
          HIDWORD(time.epoch) = epoch_high;
          if (CMTimeCompare(&v86, &time) < 0)
            break;
        }
LABEL_44:
        v49 = v99;
        v50 = *(unsigned int (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v50 || v50(v49, 1))
          goto LABEL_55;
      }
      if ((v96[0].flags & 1) != 0)
      {
        time = v96[1];
        lhs = *(CMTime *)((char *)v98 + 8);
        if (CMTimeCompare(&time, &lhs))
          v45 = (double)v96[1].value
              / (double)v96[1].timescale
              * (double)SLODWORD(v98[1])
              / (double)*((uint64_t *)&v98[0] + 1);
        else
          v45 = 1.0;
        v46 = *(OpaqueCMTimebase **)(a1 + 40);
        time = v96[0];
        *(_OWORD *)&lhs.value = *(_OWORD *)newTimescale;
        lhs.epoch = *(_QWORD *)&v98[0];
        PlayableDurationForTrack = CMTimebaseSetRateAndAnchorTime(v46, v45, &time, &lhs);
        if ((_DWORD)PlayableDurationForTrack)
          goto LABEL_95;
        time.value = v106;
        time.timescale = v107;
        time.flags = flags;
        time.epoch = epoch;
        *(_OWORD *)&lhs.value = *(_OWORD *)newTimescale;
        lhs.epoch = *(_QWORD *)&v98[0];
        if (CMTimeCompare(&time, &lhs))
        {
          v47 = *(const void **)(a1 + 32);
          v48 = *(const void **)(a1 + 40);
          time.value = v106;
          time.timescale = v107;
          time.flags = flags;
          time.epoch = epoch;
          CMSyncConvertTime(&time1, &time, v47, v48);
        }
        else
        {
          time1 = v96[0];
        }
        time = time1;
        PlayableDurationForTrack = fpm_getPlayableDurationForTrack(a1, v81, &time, &time2, (Boolean *)&v101, &v94, &v93);
        if ((_DWORD)PlayableDurationForTrack)
          goto LABEL_95;
        if ((_BYTE)v101)
        {
          v104 = v108;
          v105 = epoch_high;
          v43 = v41;
          v44 = v42;
          goto LABEL_42;
        }
        RelativeRate = CMSyncGetRelativeRate(*(CMClockOrTimebaseRef *)(a1 + 32), *(CMClockOrTimebaseRef *)(a1 + 40));
        lhs = time2;
        CMTimeMultiplyByFloat64(&time, &lhs, RelativeRate);
        v43 = time.value;
        v44 = time.timescale;
        v104 = *(_QWORD *)&time.flags;
        v105 = HIDWORD(time.epoch);
        time = time2;
        lhs = v96[1];
        if (CMTimeCompare(&time, &lhs))
        {
          time.value = v106;
          time.timescale = v107;
          time.flags = flags;
          time.epoch = epoch;
          lhs.value = v43;
          lhs.timescale = v44;
          *(_QWORD *)&lhs.flags = v104;
          HIDWORD(lhs.epoch) = v105;
          CMTimeAdd(&v84, &time, &lhs);
          CMTimeConvertScale(&v85, &v84, v42, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          time.value = v41;
          time.timescale = v42;
          *(_QWORD *)&time.flags = v108;
          HIDWORD(time.epoch) = epoch_high;
          if (CMTimeCompare(&v85, &time) < 1)
            goto LABEL_42;
        }
      }
      lhs.value = v41;
      lhs.timescale = v42;
      *(_QWORD *)&lhs.flags = v108;
      HIDWORD(lhs.epoch) = epoch_high;
      rhs.value = v106;
      rhs.timescale = v107;
      rhs.flags = flags;
      rhs.epoch = epoch;
      CMTimeSubtract(&time, &lhs, &rhs);
      v43 = time.value;
      v44 = time.timescale;
      v104 = *(_QWORD *)&time.flags;
      v105 = HIDWORD(time.epoch);
LABEL_42:
      lhs.value = v106;
      lhs.timescale = v107;
      lhs.flags = flags;
      lhs.epoch = epoch;
      rhs.value = v43;
      rhs.timescale = v44;
      *(_QWORD *)&rhs.flags = v104;
      HIDWORD(rhs.epoch) = v105;
      CMTimeAdd(&time, &lhs, &rhs);
      flags = time.flags;
      v107 = time.timescale;
      v106 = time.value;
      epoch = time.epoch;
      CMTimeConvertScale(&v83, &time, v42, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      time.value = v41;
      time.timescale = v42;
      *(_QWORD *)&time.flags = v108;
      HIDWORD(time.epoch) = epoch_high;
      if (CMTimeCompare(&v83, &time) < 0)
      {
        time.value = v106;
        time.timescale = v107;
        time.flags = flags;
        time.epoch = epoch;
        v10 = a2;
        lhs = *a2;
        CMTimeSubtract(&v102, &time, &lhs);
        HIBYTE(v101) = 0;
LABEL_55:
        v52 = v81;
        goto LABEL_56;
      }
      v10 = a2;
      goto LABEL_44;
    }
    time1.value = value;
    time1.timescale = timescale;
    time1.flags = flags;
    time1.epoch = epoch;
    v52 = v81;
    PlayableDurationForTrack = fpm_getPlayableDurationForTrack(a1, v81, &time1, &v102, (Boolean *)&v101 + 1, &v94, &v93);
    if ((_DWORD)PlayableDurationForTrack)
    {
LABEL_95:
      v59 = PlayableDurationForTrack;
      goto LABEL_90;
    }
    time1.value = value;
    time1.timescale = timescale;
    time1.flags = flags;
    time1.epoch = epoch;
    time2 = *v10;
    CMTimeSubtract(&v82, &time1, &time2);
    time2 = v102;
    CMTimeAdd(&time1, &time2, &v82);
    v102 = time1;
LABEL_56:
    v21 = v80;
    if (HIBYTE(v101))
    {
      time1.value = v110;
      time1.timescale = v111;
      time1.flags = v78;
      time1.epoch = v77;
      time2 = v102;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v110 = v102.value;
        v78 = v102.flags;
        v111 = v102.timescale;
        v77 = v102.epoch;
      }
    }
    else
    {
      v53 = v73;
      if (v73 >= v94)
        v53 = v94;
      v54 = v74;
      if (v73 > v94)
        v54 = v93;
      v73 = v53;
      v74 = v54;
      if (((_DWORD)v92 == 1986618469 || (_DWORD)v92 == 1936684398)
        && (time1.value = v112,
            time1.timescale = v113,
            time1.flags = v72,
            time1.epoch = v80,
            time2 = v102,
            CMTimeCompare(&time1, &time2) >= 1))
      {
        v112 = v102.value;
        v71 = 0;
        v72 = v102.flags;
        v113 = v102.timescale;
        v21 = v102.epoch;
      }
      else
      {
        v71 = 0;
      }
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v99)
    {
      CFRelease(v99);
      v99 = 0;
    }
    v20 = v52 + 1;
    v55 = *(_QWORD *)(a1 + 80);
  }
  while (v20 < v55);
  v12 = v21;
  v7 = a5;
  v6 = a6;
  v9 = a3;
  v8 = a4;
  v57 = v73;
  v56 = v74;
  v58 = v71;
  v11 = v72;
  v13 = (_OWORD *)MEMORY[0x1E0CA2E68];
  v14 = v65;
  v17 = v66;
  v16 = v63;
  v15 = v64;
  if (!v55)
  {
LABEL_77:
    v112 = v14;
    v113 = v15;
    v11 = v16;
    v12 = v17;
  }
LABEL_78:
  if ((v11 & 0x1D) != 1)
  {
    v112 = v110;
    v113 = v111;
    v11 = v78;
    v12 = v77;
  }
  v60 = v12;
  time1 = *v10;
  *(_OWORD *)&time2.value = *v13;
  time2.epoch = v17;
  if (CMTimeCompare(&time1, &time2))
  {
    v61 = v10->timescale;
    time2.value = v112;
    time2.timescale = v113;
    time2.flags = v11;
    time2.epoch = v60;
    CMTimeConvertScale(&time1, &time2, v61, kCMTimeRoundingMethod_RoundAwayFromZero);
    v112 = time1.value;
    v11 = time1.flags;
    v113 = time1.timescale;
    v60 = time1.epoch;
  }
  if (v9)
  {
    *(_QWORD *)v9 = v112;
    *(_DWORD *)(v9 + 8) = v113;
    *(_DWORD *)(v9 + 12) = v11;
    *(_QWORD *)(v9 + 16) = v60;
  }
  if (v8)
    *v8 = v58;
  if (v7)
    *v7 = v57;
  v59 = 0;
  if (v6)
    *v6 = v56;
LABEL_90:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v99)
    CFRelease(v99);
  return v59;
}

uint64_t fpm_getPlayableDurationForTrack(uint64_t a1, uint64_t a2, CMTime *a3, CMTime *a4, Boolean *a5, CMTimeValue *a6, CMTimeValue *a7)
{
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  CMTimeEpoch v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, CMTime *);
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, CMTime *);
  uint64_t v24;
  uint64_t v25;
  uint64_t FigBaseObject;
  uint64_t (*v27)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  int v28;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *);
  uint64_t v32;
  _BOOL4 v33;
  int v34;
  void (*v35)(uint64_t, CMTime *);
  void (*v36)(uint64_t, CMTime *);
  unsigned int (*v37)(uint64_t, CMTime *);
  CMTimeEpoch epoch;
  __int128 v39;
  CMTimeValue *v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, CMTime *);
  uint64_t v43;
  unsigned int (*v44)(uint64_t, _QWORD, _QWORD, CMTime *, CMTime *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v45;
  void (*v46)(uint64_t, CMTimeValue *, CMTimeValue *, _QWORD, _QWORD);
  uint64_t v47;
  CMTimeValue *v48;
  uint64_t v49;
  __int128 v50;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CFBooleanRef BOOLean;
  CFDictionaryRef dictionaryRepresentation;
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  CMTime time1;

  v49 = *(_QWORD *)(a1 + 8);
  BOOLean = 0;
  dictionaryRepresentation = 0;
  memset(&v55, 0, sizeof(v55));
  memset(&v54, 0, sizeof(v54));
  v13 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  v14 = (__int128 *)MEMORY[0x1E0CA2E10];
  v15 = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
  a4->epoch = v15;
  v50 = *v14;
  *(_OWORD *)&a4->value = *v14;
  ++*(_DWORD *)(a1 + 64);
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 48));
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 56));
  v16 = v12 + 48 * a2;
  v19 = *(_QWORD *)(v16 + 16);
  v18 = (_QWORD *)(v16 + 16);
  v17 = v19;
  v20 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v20)
    goto LABEL_10;
  v48 = a7;
  v21 = v20(v17, &v54);
  if ((_DWORD)v21)
    goto LABEL_11;
  time1 = v54;
  time2 = *a3;
  if (!CMTimeCompare(&time1, &time2))
    goto LABEL_7;
  v22 = *v18;
  time1 = *a3;
  time2 = v54;
  CMTimeSubtract(&v53, &time1, &time2);
  v23 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (!v23)
  {
LABEL_10:
    v21 = 4294954514;
    goto LABEL_11;
  }
  time1 = v53;
  v24 = v23(v22, &time1);
  if ((_DWORD)v24)
  {
    v21 = v24;
    if ((_DWORD)v24 != -12840)
      goto LABEL_11;
  }
LABEL_7:
  v25 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigSampleCursorGetFigBaseObject(*v18);
  v27 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  v47 = v25;
  if (v27)
  {
    v21 = v27(FigBaseObject, CFSTR("CursorPlayableHorizon"), v25, &dictionaryRepresentation);
    if (!(_DWORD)v21)
    {
      CMTimeMakeFromDictionary(&time1, dictionaryRepresentation);
      *a4 = time1;
      CFRelease(dictionaryRepresentation);
      goto LABEL_16;
    }
  }
  else
  {
    v21 = 4294954514;
  }
  *(_BYTE *)(a1 + 8554) = 0;
LABEL_16:
  if (a5)
  {
    v30 = FigSampleCursorGetFigBaseObject(*v18);
    v31 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
    if (v31 && !v31(v30, CFSTR("CursorPlayableThroughEndOfTrack"), v47, &BOOLean))
    {
      *a5 = CFBooleanGetValue(BOOLean);
      CFRelease(BOOLean);
      v34 = *a5;
      goto LABEL_35;
    }
    if ((~a4->flags & 0x11) != 0)
    {
      v32 = *(_QWORD *)(v12 + 48 * a2 + 24);
      *(_OWORD *)&v55.value = v50;
      v55.epoch = v15;
      if (v13 == 1)
      {
        v33 = FigFormatReaderUtilityGetDuration(v49, 0, &v55) == 0;
      }
      else
      {
        memset(&time2, 0, sizeof(time2));
        v35 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
        if (v35)
        {
          time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
          v35(v32, &time1);
        }
        v36 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v36)
          v36(v32, &v55);
        if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56))
        {
          v37 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
          if (v37)
          {
            if (!v37(v32, &time2))
            {
              lhs = v55;
              rhs = time2;
              CMTimeAdd(&time1, &lhs, &rhs);
              v55 = time1;
            }
          }
        }
        v33 = 1;
      }
      if ((v55.flags & 0x1D) == 1 && v33)
      {
        time2 = v55;
        lhs = *a3;
        CMTimeSubtract(&time1, &time2, &lhs);
        v55 = time1;
        epoch = time1.epoch;
        v39 = *(_OWORD *)&time1.value;
        time1 = *a4;
        *(_OWORD *)&time2.value = v39;
        time2.epoch = epoch;
        v34 = CMTimeCompare(&time1, &time2) >= 0;
        *a5 = v34;
LABEL_35:
        v40 = a6;
        if (v34)
          v21 = 0;
        goto LABEL_39;
      }
    }
    *a5 = 0;
  }
  v40 = a6;
LABEL_39:
  if (v40)
  {
    if (v48)
    {
      *v40 = 0x7FFFFFFFFFFFFFFFLL;
      *v48 = 0;
      v41 = *v18;
      time2 = *a4;
      v42 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
      if (!v42 || (time1 = time2, v42(v41, &time1) != -12840))
      {
        time1.value = 0;
        time2.value = 0;
        v43 = *v18;
        v44 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CMTime *, CMTime *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
        if (v44 && !v44(v43, 0, 0, &time1, &time2, 0, 0, 0, 0, 0))
        {
          *v40 = time1.value;
          *v48 = time2.value;
        }
        else
        {
          v45 = *v18;
          v46 = *(void (**)(uint64_t, CMTimeValue *, CMTimeValue *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 144);
          if (v46)
            v46(v45, v40, v48, 0, 0);
        }
      }
    }
  }
LABEL_11:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 56));
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 48));
  v28 = *(_DWORD *)(a1 + 64) - 1;
  *(_DWORD *)(a1 + 64) = v28;
  if (!v28)
    MEMORY[0x19402D920](*(_QWORD *)(a1 + 72));
  return v21;
}

BOOL fpm_shouldUpdateAggressively(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(a1 + 104);
  if (!v1)
    return 1;
  v2 = *(_DWORD *)(a1 + 112);
  if (v2 == 3)
    return v1 != 1 || *(_BYTE *)(a1 + 315);
  if (*(_BYTE *)(a1 + 315))
    return 1;
  if (v1 == 1 || v2 != 0)
    return 0;
  return *(_BYTE *)(a1 + 8555) == 0;
}

uint64_t fpm_deferredTimebaseJumpedCallback()
{
  __CFData *Owner;
  UInt8 *MutableBytePtr;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19402EA0C](*((_QWORD *)MutableBytePtr + 6));
    fpm_ensureUpdatePrimed((uint64_t)MutableBytePtr);
    MEMORY[0x19402EA24](*((_QWORD *)MutableBytePtr + 6));
  }
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

double fpm_durationAhead(uint64_t a1, _OWORD *a2)
{
  CMTime *p_duration;
  __int128 v5;
  double result;
  CMTime v7;
  CMTime duration;
  CMTimeRange time1;
  CMTime v10;
  CMTime time2;

  memset(&v10, 0, sizeof(v10));
  if (a2)
  {
    CMTimebaseGetTime(&time1.start, *(CMTimebaseRef *)(a1 + 24));
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    CMTimeMaximum(&v10, &time1.start, &time2);
    time1.start = v10;
    time2 = *(CMTime *)(a1 + 216);
    if ((CMTimeCompare(&time1.start, &time2) & 0x80000000) == 0
      && (time1.start = v10, time2 = *(CMTime *)(a1 + 240), CMTimeCompare(&time1.start, &time2) < 0))
    {
      *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 240);
      time1.start.epoch = *(_QWORD *)(a1 + 256);
      time2 = v10;
      CMTimeSubtract(&duration, &time1.start, &time2);
      time2 = v10;
      p_duration = &duration;
    }
    else
    {
      CMTimeMake(&v7, 0, 1000000000);
      time2 = v10;
      p_duration = &v7;
    }
    CMTimeRangeMake(&time1, &time2, p_duration);
    v5 = *(_OWORD *)&time1.start.epoch;
    *a2 = *(_OWORD *)&time1.start.value;
    a2[1] = v5;
    result = *(double *)&time1.duration.timescale;
    a2[2] = *(_OWORD *)&time1.duration.timescale;
  }
  return result;
}

_QWORD *fpm_updateStreamBufferDurationAhead(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, const __CFBoolean **);
  int Value;
  uint64_t v7;
  __int128 v8;
  _OWORD v9[3];
  const __CFBoolean *v10;

  v10 = 0;
  if (result[1080])
  {
    v2 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      result = (_QWORD *)CMBaseObjectIsMemberOfClass();
      if ((_DWORD)result)
      {
        CMBaseObject = CMByteStreamGetCMBaseObject();
        result = (_QWORD *)CMBaseObjectGetVTable();
        v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, const __CFBoolean **))(result[1] + 48);
        if (!v5)
          goto LABEL_16;
        result = (_QWORD *)v5(CMBaseObject, *MEMORY[0x1E0CA2078], *MEMORY[0x1E0C9AE00], &v10);
        if ((_DWORD)result)
          goto LABEL_16;
        Value = CFBooleanGetValue(v10);
        if (v10)
          CFRelease(v10);
        result = (_QWORD *)FigNetworkUrgencyMonitorSetStreamFullyAvailable(v2[1080], Value);
        if (!Value)
        {
LABEL_16:
          if ((*(_BYTE *)(a2 + 12) & 1) != 0
            && (*(_BYTE *)(a2 + 36) & 1) != 0
            && !*(_QWORD *)(a2 + 40)
            && (*(_QWORD *)(a2 + 24) & 0x8000000000000000) == 0)
          {
            v7 = v2[1080];
            v8 = *(_OWORD *)(a2 + 16);
            v9[0] = *(_OWORD *)a2;
            v9[1] = v8;
            v9[2] = *(_OWORD *)(a2 + 32);
            return (_QWORD *)FigNetworkUrgencyMonitorSetPlayableRange(v7, v9);
          }
        }
      }
    }
  }
  return result;
}

void fpm_likelyToKeepUpUsingLivePlaybackAlgorithm(uint64_t a1, int a2, double a3)
{
  double Seconds;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  float v14;
  BOOL v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v17;
  unsigned int v18;
  uint64_t CMBaseObject;
  unsigned int (*v20)(uint64_t, _QWORD, uint64_t, CFBooleanRef *);
  uint64_t v21;
  unsigned int (*v22)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  CMTime v33;
  double v34;
  double v35;
  double valuePtr;
  CFNumberRef number;
  CFTypeRef cf;
  CFBooleanRef BOOLean;
  CMTime v40;
  CMTime time2;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v40 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  cf = 0;
  BOOLean = 0;
  valuePtr = 0.0;
  number = 0;
  v34 = 0.0;
  v35 = 0.0;
  if (FigFormatReaderUtilityGetDuration(*(_QWORD *)(a1 + 8), 1, &v40) || (v40.flags & 0x1D) != 1)
    return;
  if (*(_DWORD *)(a1 + 104) != 1)
  {
    CMTimebaseGetTime(&time1, *(CMTimebaseRef *)(a1 + 24));
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    CMTimeMaximum(&v33, &time1, &time2);
    value = v33.value;
    timescale = v33.timescale;
    if ((v33.flags & 0x1D) != 1)
      return;
    time1.value = value;
    time1.timescale = timescale;
    time1.flags = v33.flags;
    time1.epoch = v33.epoch;
    Seconds = CMTimeGetSeconds(&time1);
    time1 = v40;
    v7 = CMTimeGetSeconds(&time1);
    v8 = 0.0;
    if (v7 <= Seconds)
      v9 = 0.0;
    else
      v9 = v7 - Seconds;
    v10 = *MEMORY[0x1E0C9AE00];
    if (*(_DWORD *)(a1 + 104) != 1)
    {
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v20 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v20 && !v20(CMBaseObject, *MEMORY[0x1E0CA2078], v10, &BOOLean))
      {
        v11 = CFBooleanGetValue(BOOLean);
        CFRelease(BOOLean);
      }
      else
      {
        v11 = 0;
      }
      if (v7 <= 0.0 || v11)
      {
LABEL_10:
        v12 = CMByteStreamGetCMBaseObject();
        v13 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
        v14 = 1.0;
        if (v13 && !v13(v12, *MEMORY[0x1E0CA2090], v10, &cf))
        {
          FigCFDictionaryGetDoubleIfPresent();
          FigCFDictionaryGetDoubleIfPresent();
          if (v35 != 0.0)
            v14 = v34 / v35 + 1.0;
          CFRelease(cf);
        }
        if (*(_DWORD *)(a1 + 104) == 1)
          goto LABEL_40;
        if (v11 || v9 - a3 <= 0.1)
          goto LABEL_23;
        v15 = a3 >= 3.33333333;
        if (v8 * 1.5 > v35)
          v15 = 0;
        if (a3 >= 5.0 || v15 || fpm_isLikelyToKeepUp(a1, 0, Seconds, a3, v35, v14))
        {
LABEL_23:
          fpm_createDurationDictionary(a3);
          *(_QWORD *)(a1 + 104) = 0x3F80000000000001;
          if (dword_1EE2A2A08)
          {
            LODWORD(v33.value) = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v17 = v33.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
              v18 = v17;
            else
              v18 = v17 & 0xFFFFFFFE;
            if (v18)
            {
              LODWORD(time2.value) = 136315650;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingLivePlaybackAlgorithm";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2048;
              v42 = a3;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 104) == 2)
          {
LABEL_40:
            if (dword_1EE2A2A08)
            {
              LODWORD(v33.value) = 0;
              v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v24 = v33.value;
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                v25 = v24;
              else
                v25 = v24 & 0xFFFFFFFE;
              if (v25)
              {
                LODWORD(time2.value) = 136316674;
                *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingLivePlaybackAlgorithm";
                LOWORD(time2.flags) = 2048;
                *(_QWORD *)((char *)&time2.flags + 2) = a1;
                HIWORD(time2.epoch) = 2048;
                v42 = v35 * 8.0 / 1000.0;
                v43 = 2048;
                v44 = 0.0;
                v45 = 2048;
                v46 = v14;
                v47 = 2048;
                v48 = v7 - v9;
                v49 = 2048;
                v50 = a3;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            goto LABEL_47;
          }
          *(_QWORD *)(a1 + 104) = 2;
          if (dword_1EE2A2A08)
          {
            LODWORD(v33.value) = 0;
            v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v31 = v33.value;
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              v32 = v31;
            else
              v32 = v31 & 0xFFFFFFFE;
            if (v32)
            {
              LODWORD(time2.value) = 136315906;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingLivePlaybackAlgorithm";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2048;
              v42 = 0.0;
              v43 = 2048;
              v44 = v9;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        FigRetainProxyRetain();
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
        goto LABEL_40;
      }
      v21 = CMByteStreamGetCMBaseObject();
      v22 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v22 && !v22(v21, *MEMORY[0x1E0CA2070], v10, &number))
      {
        CFNumberGetValue(number, kCFNumberFloat64Type, &valuePtr);
        CFRelease(number);
        v11 = 0;
        v8 = valuePtr / v7;
        goto LABEL_10;
      }
    }
    v11 = 0;
    goto LABEL_10;
  }
LABEL_47:
  if (a2)
  {
    if (*(_DWORD *)(a1 + 104) != 1)
    {
      *(_QWORD *)(a1 + 104) = 2;
      v26 = *(_DWORD *)(a1 + 96);
      if (*(_DWORD *)(a1 + 100) != v26)
      {
        *(_DWORD *)(a1 + 100) = v26;
        if (dword_1EE2A2A08)
        {
          LODWORD(v33.value) = 0;
          v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v28 = v33.value;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            v29 = v28;
          else
            v29 = v28 & 0xFFFFFFFE;
          if (v29)
          {
            LODWORD(time2.value) = 136315394;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpm_likelyToKeepUpUsingLivePlaybackAlgorithm";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRetainProxyRetain();
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
      }
    }
  }
}

CFDictionaryRef fpm_createDurationDictionary(double a1)
{
  const __CFAllocator *v1;
  CFDictionaryRef v2;
  CFTypeRef cf;
  double valuePtr;

  valuePtr = a1;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  if (!cf)
    return 0;
  v2 = CFDictionaryCreate(v1, (const void **)&kFigPlayabilityMonitorPayload_Duration, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(cf);
  return v2;
}

uint64_t fpm_isLikelyToKeepUp(uint64_t a1, double *a2, double a3, double a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double Seconds;
  uint64_t v19;
  double v20;
  unint64_t v21;
  double v22;
  int v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  CMTime v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a5 <= 0.0)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    v31 = v11;
    v32 = v10;
    v33 = v9;
    v34 = v8;
    v35 = v6;
    v36 = v7;
    if (!*(_BYTE *)(a1 + 8552) && fpm_prepareDataRateProfile(a1)
      || (v30 = *(CMTime *)(a1 + 8528), Seconds = CMTimeGetSeconds(&v30), Seconds == 0.0))
    {
      LOBYTE(v23) = 0;
    }
    else
    {
      v19 = 0;
      v20 = 0.0;
      do
      {
        v20 = Seconds + v20;
        if (v20 > a3)
          break;
        ++v19;
      }
      while (v19 != 1023);
      v21 = 0;
      v22 = 0.0;
      while (1)
      {
        v22 = Seconds + v22;
        if (v22 > a3 + a4)
          break;
        if (++v21 == 1023)
          goto LABEL_15;
      }
      if (v21 > 0x3FF)
      {
        v24 = 0.0;
        LOBYTE(v23) = 1;
        if (a2)
LABEL_24:
          *a2 = v24;
      }
      else
      {
LABEL_15:
        v24 = 0.0;
        v25 = Seconds * (double)(uint64_t)(v21 - v19) * a5 + 0.0;
        v26 = 8 * v21;
        v23 = 1;
        do
        {
          v27 = *(_QWORD *)(a1 + 336 + v26);
          if (!v27)
            break;
          v28 = (float)((float)v27 * a6);
          if (v23 && v25 > v28)
          {
            v23 = 1;
          }
          else
          {
            v23 = 0;
            if (v25 < v28)
            {
              v24 = v24 + (v28 - v25) / a5;
              v25 = (float)((float)v27 * a6);
            }
          }
          v26 += 8;
          v25 = v25 - ((double)v27 - Seconds * a5);
        }
        while (v26 != 0x2000);
        if (a2)
          goto LABEL_24;
      }
    }
  }
  return v23;
}

uint64_t FigTTMLNodeGetClassID()
{
  MEMORY[0x19402F294](&FigTTMLNodeGetClassID_sRegisterFigTTMLNodeBaseTypeOnce, figTTMLNodeRegisterFigTTMLNodeBaseType);
  return sFigTTMLNodeClassID;
}

uint64_t figTTMLNodeRegisterFigTTMLNodeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigTTMLNodeGetTypeID()
{
  MEMORY[0x19402F294](&FigTTMLNodeGetClassID_sRegisterFigTTMLNodeBaseTypeOnce, figTTMLNodeRegisterFigTTMLNodeBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigTTMLNodeGetParentNode()
{
  return *(_QWORD *)CMBaseObjectGetDerivedStorage();
}

uint64_t FigTTMLNodeGetPrecedingNode()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t FigTTMLNodeGetDocumentOrderIndex()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

const void *FigTTMLNodeGetXMLID()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), CFSTR("http://www.w3.org/XML/1998/namespace id"));
}

uint64_t FigTTMLNodeGetActiveTimeRange(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  CMTimeFlags flags;
  CMTimeValue value;
  CMTimeEpoch epoch;
  CMTimeScale timescale;
  CMTimeFlags v13;
  CMTimeEpoch v14;
  CMTimeScale v15;
  CMTimeValue v16;
  __int128 v17;
  __int128 v18;
  CMTime time1;
  CMTimeRange range;
  CMTimeRange v21;
  CMTimeRange v22;
  CMTimeRange v23;
  CMTimeRange otherRange;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  memset(&v23, 0, sizeof(v23));
  v6 = DerivedStorage + 32;
  if ((*(_BYTE *)(DerivedStorage + 44) & 1) != 0
    && (*(_BYTE *)(DerivedStorage + 68) & 1) != 0
    && !*(_QWORD *)(DerivedStorage + 72)
    && (*(_QWORD *)(DerivedStorage + 56) & 0x8000000000000000) == 0)
  {
    result = 0;
    v17 = *(_OWORD *)v6;
    v18 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a2 + 32) = v18;
    *(_OWORD *)a2 = v17;
    return result;
  }
  result = figTTMLNodeGetUnclippedTimeRange(a1, (uint64_t)&v23);
  if (!(_DWORD)result)
  {
    v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
    if (v8)
    {
      memset(&v22, 0, sizeof(v22));
      result = FigTTMLNodeGetActiveTimeRange(v8, &v22);
      if ((_DWORD)result)
        return result;
      range = v23;
      otherRange = v22;
      CMTimeRangeGetIntersection(&v21, &range, &otherRange);
      otherRange.start.value = v21.start.value;
      flags = v21.start.flags;
      otherRange.start.timescale = v21.start.timescale;
      epoch = v21.start.epoch;
      value = v21.duration.value;
      timescale = v21.duration.timescale;
      v13 = v21.duration.flags;
      v14 = v21.duration.epoch;
      if ((v21.start.flags & 1) != 0
        && (v21.duration.flags & 1) != 0
        && !v21.duration.epoch
        && (v21.duration.value & 0x8000000000000000) == 0)
      {
        v21.start.value = v21.duration.value;
        v21.start.timescale = v21.duration.timescale;
        v21.start.flags = v21.duration.flags;
        v21.start.epoch = 0;
        *(_OWORD *)&range.start.value = *MEMORY[0x1E0CA2E68];
        range.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        if (!CMTimeCompare(&v21.start, &range.start))
        {
          *(_OWORD *)&v21.start.value = *(_OWORD *)&v23.start.value;
          v21.start.epoch = v23.start.epoch;
          *(_OWORD *)&range.start.value = *(_OWORD *)&v22.start.value;
          range.start.epoch = v22.start.epoch;
          if (CMTimeCompare(&v21.start, &range.start) <= 0)
          {
            otherRange.start.value = v22.start.value;
            flags = v22.start.flags;
            otherRange.start.timescale = v22.start.timescale;
            epoch = v22.start.epoch;
          }
          else
          {
            v21 = v22;
            CMTimeRangeGetEnd(&time1, &v21);
            *(_OWORD *)&v21.start.value = *(_OWORD *)&v23.start.value;
            v21.start.epoch = v23.start.epoch;
            if (CMTimeCompare(&time1, &v21.start) < 0)
            {
              v21 = v22;
              CMTimeRangeGetEnd(&range.start, &v21);
              otherRange.start.value = range.start.value;
              flags = range.start.flags;
              otherRange.start.timescale = range.start.timescale;
              epoch = range.start.epoch;
            }
            else
            {
              otherRange.start.value = v23.start.value;
              flags = v23.start.flags;
              otherRange.start.timescale = v23.start.timescale;
              epoch = v23.start.epoch;
            }
          }
        }
      }
    }
    else
    {
      *(_OWORD *)&v21.start.value = *MEMORY[0x1E0CA2E68];
      v21.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      *(_OWORD *)&range.start.value = *MEMORY[0x1E0CA2E10];
      range.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
      CMTimeRangeMake(&v22, &v21.start, &range.start);
      otherRange.start.value = v22.start.value;
      flags = v22.start.flags;
      otherRange.start.timescale = v22.start.timescale;
      epoch = v22.start.epoch;
      value = v22.duration.value;
      timescale = v22.duration.timescale;
      v13 = v22.duration.flags;
      v14 = v22.duration.epoch;
    }
    result = 0;
    v15 = otherRange.start.timescale;
    *(_DWORD *)(v6 + 8) = otherRange.start.timescale;
    v16 = otherRange.start.value;
    *(_QWORD *)v6 = otherRange.start.value;
    *(_DWORD *)(v5 + 44) = flags;
    *(_QWORD *)(v5 + 48) = epoch;
    *(_QWORD *)(v5 + 56) = value;
    *(_DWORD *)(v5 + 64) = timescale;
    *(_DWORD *)(v5 + 68) = v13;
    *(_QWORD *)(v5 + 72) = v14;
    *(_QWORD *)a2 = v16;
    *(_DWORD *)(a2 + 8) = v15;
    *(_DWORD *)(a2 + 12) = flags;
    *(_QWORD *)(a2 + 16) = epoch;
    *(_QWORD *)(a2 + 24) = value;
    *(_DWORD *)(a2 + 32) = timescale;
    *(_DWORD *)(a2 + 36) = v13;
    *(_QWORD *)(a2 + 40) = v14;
  }
  return result;
}

uint64_t figTTMLNodeGetUnclippedTimeRange(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  CMTimeEpoch v11;
  CMTimeEpoch v12;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v15;
  CMTime *p_start;
  CMTimeFlags v17;
  CMTimeEpoch v18;
  CMTimeValue v19;
  CMTimeScale timescale;
  CMTimeFlags v21;
  CMTimeEpoch v22;
  CMTimeEpoch v23;
  uint64_t v24;
  CMTimeScale v25;
  CMTimeValue v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CMTime v31;
  CMTime v32;
  CMTimeRange duration;
  CMTime v34;
  CMTime start;
  CMTimeRange v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  CMTime rhs;
  CMTime v42;
  void *value;
  CMTime lhs;
  CMTime v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  v6 = DerivedStorage + 80;
  if ((*(_BYTE *)(DerivedStorage + 92) & 1) != 0
    && (*(_BYTE *)(DerivedStorage + 116) & 1) != 0
    && !*(_QWORD *)(DerivedStorage + 120)
    && (*(_QWORD *)(DerivedStorage + 104) & 0x8000000000000000) == 0)
  {
    result = 0;
    v27 = *(_OWORD *)v6;
    v28 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a2 + 32) = v28;
    *(_OWORD *)a2 = v27;
    return result;
  }
  v40 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  result = FigTTMLNodeGetParameters(a1, &v40);
  if (!(_DWORD)result)
  {
    v8 = *(const __CFDictionary **)(v5 + 24);
    v9 = v40;
    v10 = MEMORY[0x1E0CA2E68];
    v30 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v36.start.value = *MEMORY[0x1E0CA2E68];
    v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v36.start.epoch = v11;
    v29 = *MEMORY[0x1E0CA2E10];
    *(_OWORD *)&duration.start.value = *MEMORY[0x1E0CA2E10];
    v12 = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
    duration.start.epoch = v12;
    value = 0;
    if (!CFDictionaryGetValueIfPresent(v8, CFSTR("begin"), (const void **)&value)
      || (result = FigTTMLParseTimeExpression(v9, (CFStringRef)value, &v36.start), !(_DWORD)result))
    {
      if (!CFDictionaryGetValueIfPresent(v8, CFSTR("dur"), (const void **)&value)
        || (result = FigTTMLParseTimeExpression(v9, (CFStringRef)value, &duration.start), !(_DWORD)result))
      {
        if (CFDictionaryGetValueIfPresent(v8, CFSTR("end"), (const void **)&value))
        {
          memset(&v42, 0, sizeof(v42));
          result = FigTTMLParseTimeExpression(v9, (CFStringRef)value, &v42);
          if ((_DWORD)result)
            return result;
          lhs = v42;
          rhs = v36.start;
          CMTimeSubtract(&v45, &lhs, &rhs);
          duration.start = v45;
        }
        v42 = v36.start;
        lhs.value = duration.start.value;
        flags = duration.start.flags;
        lhs.timescale = duration.start.timescale;
        epoch = duration.start.epoch;
        v15 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
        if (!v15)
        {
          *(_OWORD *)&duration.start.value = v30;
          duration.start.epoch = v11;
          *(_OWORD *)&v45.value = v29;
          v45.epoch = v12;
          CMTimeRangeMake(&v36, &duration.start, &v45);
          v45.value = v36.start.value;
          v17 = v36.start.flags;
          v45.timescale = v36.start.timescale;
          v18 = v36.start.epoch;
          v19 = v36.duration.value;
          timescale = v36.duration.timescale;
          v21 = v36.duration.flags;
          v23 = v36.duration.epoch;
          goto LABEL_31;
        }
        rhs.value = 0;
        result = figTTMLNodeGetUnclippedTimeRange(v15, &v37);
        if (!(_DWORD)result)
        {
          result = FigTTMLNodeGetTimeContainerSemantics(v15, (const __CFString **)&rhs);
          if (!(_DWORD)result)
          {
            if (CFEqual((CFTypeRef)rhs.value, CFSTR("par")))
            {
              *(_OWORD *)&v36.start.value = v37;
              v36.start.epoch = v38;
              duration.start = v42;
              CMTimeAdd(&start, &v36.start, &duration.start);
              duration.start.value = lhs.value;
              duration.start.timescale = lhs.timescale;
              duration.start.flags = flags;
              duration.start.epoch = epoch;
              p_start = &start;
            }
            else
            {
              v24 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
              if ((~flags & 0x11) == 0)
              {
                lhs.value = *(_QWORD *)v10;
                flags = *(_DWORD *)(v10 + 12);
                lhs.timescale = *(_DWORD *)(v10 + 8);
                epoch = v11;
              }
              if (v24 != v15)
              {
                memset(&v36, 0, sizeof(v36));
                result = figTTMLNodeGetUnclippedTimeRange(v24, &v36);
                if ((_DWORD)result)
                  return result;
                duration = v36;
                CMTimeRangeGetEnd(&v31, &duration);
                duration.start = v42;
                CMTimeAdd(&v32, &v31, &duration.start);
                v45.value = lhs.value;
                v45.timescale = lhs.timescale;
                v45.flags = flags;
                v45.epoch = epoch;
                CMTimeRangeMake(&duration, &v32, &v45);
                v45.value = duration.start.value;
                v17 = duration.start.flags;
                v45.timescale = duration.start.timescale;
                v18 = duration.start.epoch;
                v19 = duration.duration.value;
                timescale = duration.duration.timescale;
                v21 = duration.duration.flags;
                v22 = duration.duration.epoch;
                if ((duration.start.flags & 1) == 0)
                  goto LABEL_30;
LABEL_26:
                if ((v21 & 1) == 0 || v22 || v19 < 0)
                  goto LABEL_30;
                v23 = 0;
LABEL_31:
                result = 0;
                v25 = v45.timescale;
                *(_DWORD *)(v6 + 8) = v45.timescale;
                v26 = v45.value;
                *(_QWORD *)v6 = v45.value;
                *(_DWORD *)(v5 + 92) = v17;
                *(_QWORD *)(v5 + 96) = v18;
                *(_QWORD *)(v5 + 104) = v19;
                *(_DWORD *)(v5 + 112) = timescale;
                *(_DWORD *)(v5 + 116) = v21;
                *(_QWORD *)(v5 + 120) = v23;
                *(_QWORD *)a2 = v26;
                *(_DWORD *)(a2 + 8) = v25;
                *(_DWORD *)(a2 + 12) = v17;
                *(_QWORD *)(a2 + 16) = v18;
                *(_QWORD *)(a2 + 24) = v19;
                *(_DWORD *)(a2 + 32) = timescale;
                *(_DWORD *)(a2 + 36) = v21;
                *(_QWORD *)(a2 + 40) = v23;
                return result;
              }
              *(_OWORD *)&v36.start.value = v37;
              v36.start.epoch = v38;
              duration.start = v42;
              CMTimeAdd(&v34, &v36.start, &duration.start);
              duration.start.value = lhs.value;
              duration.start.timescale = lhs.timescale;
              duration.start.flags = flags;
              duration.start.epoch = epoch;
              p_start = &v34;
            }
            CMTimeRangeMake(&v36, p_start, &duration.start);
            v45.value = v36.start.value;
            v17 = v36.start.flags;
            v45.timescale = v36.start.timescale;
            v18 = v36.start.epoch;
            v19 = v36.duration.value;
            timescale = v36.duration.timescale;
            v21 = v36.duration.flags;
            v22 = v36.duration.epoch;
            if ((v36.start.flags & 1) == 0)
            {
LABEL_30:
              v45.value = v37;
              v17 = HIDWORD(v37);
              v45.timescale = DWORD2(v37);
              v19 = *((_QWORD *)&v38 + 1);
              v18 = v38;
              timescale = v39;
              v21 = DWORD1(v39);
              v23 = *((_QWORD *)&v39 + 1);
              goto LABEL_31;
            }
            goto LABEL_26;
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigTTMLNodeGetTimeContainerSemantics(uint64_t a1, const __CFString **a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const __CFString *v5;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  value = 0;
  result = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(DerivedStorage + 24), CFSTR("timeContainer"), (const void **)&value);
  if ((_DWORD)result)
  {
    if (!CFEqual(value, CFSTR("par")) && !CFEqual(value, CFSTR("seq")))
      return 4294950725;
    result = 0;
    v5 = (const __CFString *)value;
  }
  else
  {
    v5 = CFSTR("par");
  }
  *a2 = v5;
  return result;
}

uint64_t FigTTMLNodeCopyChildNodeArray(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigTTMLNodeGetNodeType(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigTTMLNodeGetRegionAttributeValue(uint64_t a1, void **a2)
{
  uint64_t DerivedStorage;
  void *value;

  value = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(DerivedStorage + 24), CFSTR("region"), (const void **)&value);
  *a2 = value;
  return 0;
}

uint64_t FigTTMLNodeIsAssociatedWithRegionID(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  void *v6;
  uint64_t v7;
  BOOL v8;
  const void *v9;
  uint64_t v10;
  void *value;

  if (CFEqual(&stru_1E2FD85F8, a2))
    return 1;
  value = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(DerivedStorage + 24), CFSTR("region"), (const void **)&value);
  v6 = value;
  if (value)
    return CFEqual(v6, a2);
  if (a1)
  {
    do
    {
      value = 0;
      v7 = CMBaseObjectGetDerivedStorage();
      CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v7 + 24), CFSTR("region"), (const void **)&value);
      v6 = value;
      if (value)
        return CFEqual(v6, a2);
    }
    while (*(_QWORD *)CMBaseObjectGetDerivedStorage());
  }
  v9 = a2;
  v10 = 0;
  if (FigTTMLTreeWalkFromNode(a1, (uint64_t (*)(const void *, uint64_t))figTTMLNodeIsAssociatedWithRegionIDCallback, 0, (uint64_t)&v9))v8 = 1;
  else
    v8 = v10 == 0;
  return !v8;
}

uint64_t figTTMLNodeIsAssociatedWithRegionIDCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t DerivedStorage;
  void *value;

  if (*(_BYTE *)(a2 + 8))
    return 4294950723;
  value = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(DerivedStorage + 24), CFSTR("region"), (const void **)&value);
  result = (uint64_t)value;
  if (value)
  {
    result = CFEqual(value, *(CFTypeRef *)a2);
    if ((_DWORD)result)
    {
      result = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  return result;
}

uint64_t FigTTMLNodeCopyNodeValue(uint64_t a1, _QWORD *a2)
{
  uint64_t (*v4)(uint64_t, int *);
  uint64_t result;
  const void *Designation;
  const void *v7;
  int v8;

  if (!a2)
    return FigSignalErrorAt();
  v4 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v4)
    return 4294954514;
  v8 = 0;
  result = v4(a1, &v8);
  if (!(_DWORD)result)
  {
    if (v8 == 19 || v8 == 18)
    {
      Designation = (const void *)FigTTMLExtensionGetDesignation();
      v7 = Designation;
      if (Designation)
        CFRetain(Designation);
      result = 0;
      *a2 = v7;
    }
    else if (v8 == 14)
    {
      return FigTTMLTextCopyContent(a1, a2);
    }
    else
    {
      result = 0;
      *a2 = 0;
    }
  }
  return result;
}

uint64_t FigTTMLNodeCopyAttributes(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = *(CFTypeRef *)(DerivedStorage + 24);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  return 0;
}

uint64_t FigTTMLNodeCopySkippedElementLocalNames(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = *(CFTypeRef *)(DerivedStorage + 128);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  return 0;
}

CFStringRef figTTMLNode_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLNode %p]"), a1);
}

uint64_t FigTTMLDocumentWriterCreateFrameRateParameterInserter(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    DerivedStorage[1] = CFSTR("nonDrop");
    *a3 = 0;
  }
  return v5;
}

void figTTMLDocumentWriterFrameRateParameterInserter_Finalize(uint64_t a1)
{
  const void *v1;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
    CFRelease(v1);
}

CFStringRef figTTMLDocumentWriterFrameRateParameterInserter_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterFrameRateParameterInserter[%p]"), a1);
}

uint64_t figTTMLDocumentWriterFrameRateParameterInserter_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a4)
    return 4294954512;
  else
    return FigSignalErrorAt();
}

uint64_t figTTMLDocumentWriterFrameRateParameterInserter_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  uint64_t result;
  __int128 v12;
  CMTime v13;
  CMTime v14;
  CMTime time2;
  CMTime time1;
  CMTime v17;
  int v18;
  CMTime v19;
  CMTime v20;
  int v21;
  CMTime v22;
  CMTime v23;
  int v24;
  CMTime v25;
  CMTime v26;
  int v27;
  CMTime v28;
  CMTime v29;
  int v30;
  CMTime v31;
  CMTime v32;
  int v33;
  CMTime v34;
  CMTime v35;
  int v36;
  CMTime v37;
  CMTime v38;
  int v39;
  CMTime v40;
  CMTime v41;
  int v42;
  CMTime v43;
  CMTime v44;
  int v45;
  CMTime v46;
  CMTime v47;
  int v48;
  CMTime v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!CFEqual(CFSTR("timeCodeFrameDuration"), a2))
  {
    if (!CFEqual(CFSTR("useDropFrame"), a2))
      return 4294954512;
    v10 = CFGetTypeID(a3);
    if (v10 == CFBooleanGetTypeID())
    {
      result = CFBooleanGetValue((CFBooleanRef)a3);
      if ((_DWORD)result)
      {
        result = 0;
        *(_QWORD *)(v6 + 8) = CFSTR("dropNTSC");
      }
      return result;
    }
    return FigSignalErrorAt();
  }
  v7 = CFGetTypeID(a3);
  if (v7 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  memset(&v14, 0, sizeof(v14));
  CMTimeMakeFromDictionary(&v14, (CFDictionaryRef)a3);
  v13 = v14;
  CMTimeMake(&v17, 1, 24);
  v18 = 24;
  CMTimeMake(&v19, 1, 1);
  CMTimeMake(&v20, 1, 25);
  v21 = 25;
  CMTimeMake(&v22, 1, 1);
  CMTimeMake(&v23, 1, 30);
  v24 = 30;
  CMTimeMake(&v25, 1, 1);
  CMTimeMake(&v26, 1, 50);
  v27 = 50;
  CMTimeMake(&v28, 1, 1);
  CMTimeMake(&v29, 1, 60);
  v30 = 60;
  CMTimeMake(&v31, 1, 1);
  CMTimeMake(&v32, 1001, 24000);
  v33 = 24;
  CMTimeMake(&v34, 1000, 1001);
  CMTimeMake(&v35, 1001, 30000);
  v36 = 30;
  CMTimeMake(&v37, 1000, 1001);
  CMTimeMake(&v38, 1001, 60000);
  v39 = 60;
  CMTimeMake(&v40, 1000, 1001);
  CMTimeMake(&v41, 1000, 23976);
  v42 = 24;
  CMTimeMake(&v43, 999, 1000);
  CMTimeMake(&v44, 1000, 29970);
  v45 = 30;
  CMTimeMake(&v46, 999, 1000);
  CMTimeMake(&v47, 1000, 59940);
  v48 = 60;
  CMTimeMake(&v49, 999, 1000);
  v8 = 0;
  *(_DWORD *)(v6 + 16) = 0;
  v9 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v6 + 20) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v6 + 36) = *(_QWORD *)(v9 + 16);
  while (1)
  {
    time1 = v13;
    time2 = *(CMTime *)((char *)&v17 + v8);
    if (!CMTimeCompare(&time1, &time2))
      break;
    v8 += 52;
    if (v8 == 572)
      return 0;
  }
  *(_DWORD *)(v6 + 16) = *(_DWORD *)((char *)&v17 + v8 + 24);
  v12 = *(_OWORD *)((char *)&v19.value + v8);
  *(_QWORD *)(v6 + 36) = *(CMTimeEpoch *)((char *)&v19.epoch + v8);
  *(_OWORD *)(v6 + 20) = v12;
  return 0;
}

uint64_t figTTMLDocumentWriterFrameRateParameterInserter_StartElement(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t started;
  uint64_t v6;
  CFNumberRef v7;
  const __CFAllocator *v8;
  CFDictionaryRef v9;
  __CFString *v10;
  CMTime v12;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  started = FigTTMLDocumentWriterStartElement(*(_QWORD *)DerivedStorage, a2);
  v6 = started;
  if ((_DWORD)a2 == 7 && !(_DWORD)started)
  {
    if (!*(_DWORD *)(DerivedStorage + 16))
      goto LABEL_10;
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(DerivedStorage + 16));
    v6 = FigTTMLDocumentWriterSetAttribute(a1, (uint64_t)CFSTR("http://www.w3.org/ns/ttml#parameter frameRate"), (uint64_t)v7);
    if (v7)
      CFRelease(v7);
    if (!(_DWORD)v6)
    {
LABEL_10:
      if ((*(_DWORD *)(DerivedStorage + 32) & 0x1D) != 1)
        goto LABEL_11;
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = *(CMTime *)(DerivedStorage + 20);
      v9 = CMTimeCopyAsDictionary(&v12, v8);
      v6 = FigTTMLDocumentWriterSetAttribute(a1, (uint64_t)CFSTR("http://www.w3.org/ns/ttml#parameter frameRateMultiplier"), (uint64_t)v9);
      if (v9)
        CFRelease(v9);
      if (!(_DWORD)v6)
      {
LABEL_11:
        v10 = *(__CFString **)(DerivedStorage + 8);
        if (v10 == CFSTR("nonDrop"))
          return 0;
        else
          return FigTTMLDocumentWriterSetAttribute(a1, (uint64_t)CFSTR("http://www.w3.org/ns/ttml#parameter dropMode"), (uint64_t)v10);
      }
    }
  }
  return v6;
}

uint64_t figTTMLDocumentWriterFrameRateParameterInserter_EndElement(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterEndElement(*DerivedStorage);
}

uint64_t figTTMLDocumentWriterFrameRateParameterInserter_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, a2);
}

uint64_t figTTMLDocumentWriterFrameRateParameterInserter_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterSetAttribute(*DerivedStorage, a2, a3);
}

uint64_t figTTMLDocumentWriterFrameRateParameterInserter_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t figtimebase_synchronizeToMomentInternal(OpaqueCMTimebase *a1, OpaqueCMTimebase *a2, uint64_t a3)
{
  CMClockOrTimebaseRef v5;
  const void *v6;
  CMClockOrTimebaseRef v7;
  const void *v8;
  double v9;
  CMClockRef HostTimeClock;
  double v11;
  uint64_t v12;
  CMTime *v13;
  CMTimeEpoch v14;
  CMClockRef v15;
  uint64_t v16;
  CMTime time;
  CMTime v19;
  CMTime v20;

  memset(&v20, 0, sizeof(v20));
  if ((*(_BYTE *)(a3 + 52) & 1) == 0 || (*(_BYTE *)(a3 + 28) & 1) == 0)
    return 4294954944;
  v5 = CMTimebaseCopySource(a1);
  v6 = v5;
  if (a2)
  {
    v7 = CMTimebaseCopySource(a2);
    v8 = v7;
  }
  else
  {
    v8 = 0;
    v7 = v5;
  }
  v9 = *(double *)(a3 + 64);
  HostTimeClock = CMClockGetHostTimeClock();
  v11 = v9 * CMSyncGetRelativeRate(HostTimeClock, v7);
  if (!a2 || (v12 = CMTimebaseSetRate(a2, v11), !(_DWORD)v12))
  {
    if ((*(_BYTE *)(a3 + 4) & 8) != 0 && (*(_BYTE *)(a3 + 108) & 1) != 0 && (*(_BYTE *)(a3 + 84) & 1) != 0)
    {
      v13 = (CMTime *)(a3 + 96);
      *(_OWORD *)&v19.value = *(_OWORD *)(a3 + 72);
      v14 = *(_QWORD *)(a3 + 88);
    }
    else
    {
      v13 = (CMTime *)(a3 + 40);
      *(_OWORD *)&v19.value = *(_OWORD *)(a3 + 16);
      v14 = *(_QWORD *)(a3 + 32);
    }
    v19.epoch = v14;
    v15 = CMClockGetHostTimeClock();
    time = *v13;
    CMSyncConvertTime(&v20, &time, v15, v6);
    time = v19;
    v12 = CMTimebaseSetRateAndAnchorTimeWithFlags();
  }
  v16 = v12;
  if (v6)
    CFRelease(v6);
  if (v8)
    CFRelease(v8);
  return v16;
}

uint64_t FigTimebaseGetSyncMoment2(OpaqueCMTimebase *a1, uint64_t a2)
{
  return figtimebase_getSyncMomentInternal(a1, 1, a2);
}

uint64_t figtimebase_getSyncMomentInternal(OpaqueCMTimebase *a1, int a2, uint64_t a3)
{
  CMTimeEpoch v3;
  CMClockRef v7;
  CMClockRef v8;
  OpaqueCMClock *HostTimeClock;
  CMClockRef v10;
  CMClockRef v11;
  CMClockOrTimebaseRef v12;
  const void *v13;
  double v14;
  CMClockRef v15;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  __int128 v19;
  CMTime time1;
  Float64 v21;
  Float64 outRelativeRate;
  CMTime time;
  CMTime v24;
  CMTime outOfClockOrTimebaseAnchorTime;
  CMTime v26;
  CMTime time2;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v26.value = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v26.epoch = v3;
  *(_OWORD *)&outOfClockOrTimebaseAnchorTime.value = *(_OWORD *)&v26.value;
  outOfClockOrTimebaseAnchorTime.epoch = v3;
  if (a1)
  {
    v19 = *(_OWORD *)&v26.value;
    v7 = CMTimebaseCopyUltimateSourceClock(a1);
    if (v7)
    {
      v8 = v7;
      *(_QWORD *)(a3 + 112) = 0;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_DWORD *)a3 = 120;
      *(Float64 *)(a3 + 8) = CMTimebaseGetEffectiveRate(a1);
      *(_DWORD *)(a3 + 4) = 0;
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&v26, HostTimeClock);
      v10 = CMClockGetHostTimeClock();
      time = v26;
      CMSyncConvertTime(&v24, &time, v10, a1);
      *(CMTime *)(a3 + 16) = v24;
      *(CMTime *)(a3 + 40) = v26;
      v11 = CMClockGetHostTimeClock();
      *(Float64 *)(a3 + 64) = CMSyncGetRelativeRate(v8, v11);
      *(_OWORD *)(a3 + 72) = v19;
      *(_QWORD *)(a3 + 88) = v3;
      *(_OWORD *)(a3 + 96) = v19;
      *(_QWORD *)(a3 + 112) = v3;
      if (!a2)
        goto LABEL_15;
      v12 = CMTimebaseCopySource(a1);
      if (!v12)
        goto LABEL_15;
      v13 = v12;
      v21 = 0.0;
      outRelativeRate = 0.0;
      memset(&time, 0, sizeof(time));
      CMSyncGetRelativeRateAndAnchorTime(a1, v8, &outRelativeRate, 0, 0);
      CMSyncGetRelativeRateAndAnchorTime(a1, v13, 0, &outOfClockOrTimebaseAnchorTime, &time);
      CMSyncGetRelativeRateAndAnchorTime(v13, v8, &v21, 0, 0);
      CMSyncGetTime(&v24, v13);
      if (outRelativeRate != 0.0)
      {
        v14 = v21;
        if (v21 > 0.0)
        {
          time1 = time;
          time2 = v24;
          if (CMTimeCompare(&time1, &time2) > 0)
            goto LABEL_11;
          v14 = v21;
        }
        if (v14 < 0.0)
        {
          time1 = time;
          time2 = v24;
          if (CMTimeCompare(&time1, &time2) < 0)
          {
LABEL_11:
            v15 = CMClockGetHostTimeClock();
            time2 = time;
            CMSyncConvertTime(&time1, &time2, v13, v15);
            time2.value = time1.value;
            time2.timescale = time1.timescale;
            if ((outOfClockOrTimebaseAnchorTime.flags & 1) != 0)
            {
              flags = time1.flags;
              if ((time1.flags & 1) != 0)
              {
                epoch = time1.epoch;
                *(CMTime *)(a3 + 72) = outOfClockOrTimebaseAnchorTime;
                *(_QWORD *)(a3 + 96) = time2.value;
                *(_DWORD *)(a3 + 104) = time2.timescale;
                *(_DWORD *)(a3 + 108) = flags;
                *(_QWORD *)(a3 + 112) = epoch;
                *(_DWORD *)(a3 + 4) |= 8u;
              }
            }
          }
        }
      }
      CFRelease(v13);
LABEL_15:
      CFRelease(v8);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

void figSyncMomentSource_UpdateToCurrentTimebaseRate(uint64_t a1)
{
  double EffectiveRate;
  NSObject *v3;
  dispatch_time_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;

  EffectiveRate = CMTimebaseGetEffectiveRate(*(CMTimebaseRef *)(a1 + 64));
  if (EffectiveRate == 0.0 && *(double *)(a1 + 72) != 0.0)
  {
    v3 = *(NSObject **)(a1 + 224);
    v4 = -1;
    v5 = -1;
    v6 = 0;
LABEL_7:
    dispatch_source_set_timer(v3, v4, v5, v6);
    goto LABEL_8;
  }
  if (EffectiveRate != 0.0 && *(double *)(a1 + 72) == 0.0)
  {
    v7 = *(NSObject **)(a1 + 224);
    v4 = dispatch_time(0, 1000000000);
    v3 = v7;
    v5 = 1000000000;
    v6 = 10000000;
    goto LABEL_7;
  }
LABEL_8:
  *(double *)(a1 + 72) = EffectiveRate;
}

__n128 figSyncMomentSource_getSyncMoment(uint64_t a1, int a2, uint64_t a3)
{
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  if (!figtimebase_getSyncMomentInternal(*(OpaqueCMTimebase **)(a1 + 64), 1, (uint64_t)&v9))
  {
    DWORD1(v9) |= *(_DWORD *)(a1 + 232) & a2;
    v7 = v14;
    *(_OWORD *)(a3 + 64) = v13;
    *(_OWORD *)(a3 + 80) = v7;
    *(_OWORD *)(a3 + 96) = v15;
    *(_QWORD *)(a3 + 112) = v16;
    v8 = v12;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a3 + 48) = v8;
    result = v10;
    *(_OWORD *)a3 = v9;
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

uint64_t FigSyncMomentSourceChangeFlagsMask(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  if (!a1)
    return FigSignalErrorAt();
  if (a4)
    *a4 = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a1 + 232) & ~a2 | a3 & a2;
  return 0;
}

uint64_t FigSyncMomentSourceGetTypeID()
{
  MEMORY[0x19402F294](&FigSyncMomentSourceGetTypeID_sRegisterFigSyncMomentSourceOnce, figSyncMomentSource_registerClass);
  return sFigSyncMomentSourceID;
}

uint64_t figSyncMomentSource_registerClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigSyncMomentSourceID = result;
  return result;
}

uint64_t FigSyncMomentSourceCreateWithDispatchQueueAndDestructor(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), const void *a4, NSObject *a5, uint64_t *a6)
{
  return figSyncMomentSource_createInternal(a1, 0, a2, a3, a4, a5, a6);
}

uint64_t figSyncMomentSource_createInternal(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), const void *a5, NSObject *a6, uint64_t *a7)
{
  uint64_t Instance;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;

  Instance = 0;
  if (a1 | a2
    && a5
    && a7
    && a6
    && (MEMORY[0x19402F294](&FigSyncMomentSourceGetTypeID_sRegisterFigSyncMomentSourceOnce, figSyncMomentSource_registerClass), (Instance = _CFRuntimeCreateInstance()) != 0)&& (v15 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*(_QWORD *)(Instance + 16) = v15) != 0)&& (*(_DWORD *)(Instance + 232) = -1, v16 = FigReentrantMutexCreate(), (*(_QWORD *)(Instance + 24) = v16) != 0))
  {
    MEMORY[0x19402EA0C]();
    v17 = *(_QWORD *)(Instance + 24);
    *(_QWORD *)(Instance + 32) = a1;
    *(_QWORD *)(Instance + 40) = a2;
    *(_QWORD *)(Instance + 48) = a3;
    *(_QWORD *)(Instance + 56) = a4;
    *(_QWORD *)(Instance + 80) = FigDispatchQueueCreateWithPriority();
    *(_QWORD *)(Instance + 216) = a6;
    dispatch_retain(a6);
    v18 = *(NSObject **)(Instance + 80);
    if (v18)
    {
      v19 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v18);
      *(_QWORD *)(Instance + 224) = v19;
      if (v19)
      {
        dispatch_source_set_timer(v19, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        dispatch_set_context(*(dispatch_object_t *)(Instance + 224), *(void **)(Instance + 16));
        CFRetain(*(CFTypeRef *)(Instance + 16));
        dispatch_set_finalizer_f(*(dispatch_object_t *)(Instance + 224), (dispatch_function_t)figSyncMomentSource_QueueTimerFinalizer);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(Instance + 224), (dispatch_function_t)figSyncMomentSource_QueueTimerCallback);
        *(_QWORD *)(Instance + 240) = voucher_copy();
        dispatch_resume(*(dispatch_object_t *)(Instance + 224));
        goto LABEL_12;
      }
    }
    v20 = FigSignalErrorAt();
    if (!(_DWORD)v20)
    {
LABEL_12:
      FigSyncMomentSourceSetTimebase((_QWORD *)Instance, a5);
      v21 = 0;
      *a7 = Instance;
      Instance = 0;
      if (!v17)
        goto LABEL_14;
      goto LABEL_13;
    }
    v21 = v20;
    if (v17)
LABEL_13:
      MEMORY[0x19402EA24](v17);
  }
  else
  {
    v21 = FigSignalErrorAt();
    if (a4)
      a4(a3);
  }
LABEL_14:
  if (Instance)
    CFRelease((CFTypeRef)Instance);
  return v21;
}

uint64_t FigSyncMomentSourceCreateWithDispatchQueue(uint64_t a1, uint64_t a2, const void *a3, NSObject *a4, uint64_t *a5)
{
  return figSyncMomentSource_createInternal(a1, 0, a2, 0, a3, a4, a5);
}

uint64_t FigSyncMomentSourceCreateWithDispatchQueueAndDestructor2(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), const void *a4, NSObject *a5, uint64_t *a6)
{
  return figSyncMomentSource_createInternal(0, a1, a2, a3, a4, a5, a6);
}

__n128 figSyncMomentSource_updatePendingMoment(__n128 *a1)
{
  unint64_t v1;
  int v2;
  int v3;
  __n128 result;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;

  v1 = a1->n128_u64[0];
  v2 = a1->n128_i32[3];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v3 = *(unsigned __int8 *)(a1->n128_u64[0] + 208);
  if (*(_BYTE *)(a1->n128_u64[0] + 208))
    v2 |= *(_DWORD *)(v1 + 92);
  *(_DWORD *)(v1 + 88) = a1->n128_u32[2];
  *(_DWORD *)(v1 + 92) = v2;
  *(__n128 *)(v1 + 160) = v9;
  *(__n128 *)(v1 + 176) = v10;
  *(__n128 *)(v1 + 192) = v11;
  *(__n128 *)(v1 + 96) = v5;
  *(__n128 *)(v1 + 112) = v6;
  result = v8;
  *(__n128 *)(v1 + 128) = v7;
  *(__n128 *)(v1 + 144) = v8;
  a1[8].n128_u8[0] = v3 == 0;
  *(_BYTE *)(v1 + 208) = 1;
  return result;
}

void figSyncMomentSource_sendMomentInternal(uint64_t a1)
{
  void (*v2)(_QWORD, __int128 *);
  void (*v3)(_QWORD, _DWORD *);
  _DWORD v4[2];
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t context;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v12 = 0u;
  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 80), &context, (dispatch_function_t)figSyncMomentSource_retrievePendingMoment);
  if (!DWORD2(v18))
  {
    v2 = *(void (**)(_QWORD, __int128 *))(a1 + 40);
    if (v2)
      v2(*(_QWORD *)(a1 + 48), &v12);
    v3 = *(void (**)(_QWORD, _DWORD *))(a1 + 32);
    if (v3)
    {
      v5 = *((_QWORD *)&v12 + 1);
      v4[0] = 72;
      v4[1] = DWORD1(v12) & 0xFFFFFFF7;
      v6 = v13;
      v7 = *(_QWORD *)&v14[0];
      v8 = *(_OWORD *)((char *)v14 + 8);
      v9 = *((_QWORD *)&v14[1] + 1);
      v10 = v15;
      v3(*(_QWORD *)(a1 + 48), v4);
    }
  }
  CFRelease((CFTypeRef)a1);
}

uint64_t figSyncMomentSource_retrievePendingMoment(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v2 = *a1;
  if (*(_BYTE *)(*a1 + 208))
  {
    result = 0;
    v4 = *(_OWORD *)(v2 + 88);
    v5 = *(_OWORD *)(v2 + 104);
    v6 = *(_OWORD *)(v2 + 120);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(v2 + 136);
    *(_OWORD *)(a1 + 5) = v6;
    *(_OWORD *)(a1 + 3) = v5;
    *(_OWORD *)(a1 + 1) = v4;
    v7 = *(_OWORD *)(v2 + 152);
    v8 = *(_OWORD *)(v2 + 168);
    v9 = *(_OWORD *)(v2 + 184);
    a1[15] = *(_QWORD *)(v2 + 200);
    *(_OWORD *)(a1 + 13) = v9;
    *(_OWORD *)(a1 + 11) = v8;
    *(_OWORD *)(a1 + 9) = v7;
    *(_BYTE *)(v2 + 208) = 0;
  }
  else
  {
    result = FigSignalErrorAt();
  }
  *((_DWORD *)a1 + 32) = result;
  return result;
}

double figSyncMomentSource_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t figSyncMomentSource_Finalize(uint64_t a1)
{
  void *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  void (*v7)(_QWORD);
  uint64_t result;

  *(_BYTE *)(a1 + 236) = 1;
  if (*(_QWORD *)(a1 + 64))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFRelease(*(CFTypeRef *)(a1 + 64));
  }
  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 80), v2, (dispatch_function_t)figSyncMomentSource_DestroyPeriodicTimer);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  v4 = *(NSObject **)(a1 + 80);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v5 = *(NSObject **)(a1 + 216);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v6 = *(void **)(a1 + 240);
  if (v6)
  {
    os_release(v6);
    *(_QWORD *)(a1 + 240) = 0;
  }
  v7 = *(void (**)(_QWORD))(a1 + 56);
  if (v7)
    v7(*(_QWORD *)(a1 + 48));
  result = FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

__CFString *figSyncMomentSource_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  const char *v5;
  const char *v6;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = Mutable;
  v5 = "(INVALID) ";
  if (!*(_BYTE *)(a1 + 236))
    v5 = "";
  v6 = "YES";
  if (!*(_BYTE *)(a1 + 208))
    v6 = "NO";
  CFStringAppendFormat(Mutable, 0, CFSTR("FigSyncMomentSource: %p %stimebase: %p timebaseEffectiveRate: %f pendingQueue: %p queueTimer: %p signallingQueue: %p momentPending: %s flagsMask: %x callbacks: %p %p refcon: %p\n"), a1, v5, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 216), v6, *(unsigned int *)(a1 + 232), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return v4;
}

void figSyncMomentSource_DestroyPeriodicTimer(NSObject *a1)
{
  if (a1)
  {
    dispatch_source_cancel(a1);
    dispatch_release(a1);
  }
}

void figSyncMomentSource_QueueTimerCallback()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  _BYTE v20[21];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = v0;
    if (!*(_BYTE *)(v0 + 236))
    {
      v10 = 0;
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v4 = 0u;
      v5 = 0u;
      v3 = 0u;
      os_retain(*(void **)(v0 + 240));
      voucher_adopt();
      v19 = 0u;
      memset(v20, 0, sizeof(v20));
      FigDebugGetAdoptedVoucherProcessIDAndUUIDString();
      MEMORY[0x19402EA0C](*(_QWORD *)(v1 + 24));
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      if (!figtimebase_getSyncMomentInternal(*(OpaqueCMTimebase **)(v1 + 64), 1, (uint64_t)&v11))
      {
        v7 = v15;
        v8 = v16;
        v9 = v17;
        v10 = v18;
        v3 = v11;
        v4 = v12;
        v5 = v13;
        v6 = v14;
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v1 + 24));
      v15 = v7;
      v16 = v8;
      v17 = v9;
      v18 = v10;
      v11 = v3;
      v12 = v4;
      v13 = v5;
      v14 = v6;
      figSyncMomentSource_SendMoment((dispatch_queue_t *)v1, (uint64_t)&v11, 1);
      v2 = (void *)voucher_adopt();
      os_release(v2);
    }
    CFRelease((CFTypeRef)v1);
  }
}

uint64_t registerLayerSynchronizerType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sLayerSynchronizerID = result;
  return result;
}

uint64_t FigLayerSynchronizerCreate(_QWORD *a1)
{
  uint64_t Instance;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
    return FigSignalErrorAt();
  if (FigLayerSynchronizerGetTypeID_sRegisterLayerSynchronizerTypeOnce != -1)
    dispatch_once_f(&FigLayerSynchronizerGetTypeID_sRegisterLayerSynchronizerTypeOnce, 0, (dispatch_function_t)registerLayerSynchronizerType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v3 = (_QWORD *)Instance;
  *(_BYTE *)(Instance + 88) = 1;
  v4 = FigReentrantMutexCreate();
  v3[3] = v4;
  if (v4)
  {
    result = 0;
    *a1 = v3;
  }
  else
  {
    CFRelease(v3);
    return 4294954935;
  }
  return result;
}

uint64_t FigLayerSynchronizerSynchronizeToTimebaseWithDeferredTransaction(const void *a1, const void *a2, int a3, uint64_t a4, const void *a5)
{
  _QWORD *v10;
  uint64_t v11;

  if (!a1 || !a2)
    return 0;
  v10 = malloc_type_calloc(1uLL, 0x60uLL, 0x102004037358F12uLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = (uint64_t)v10;
  *v10 = a1;
  CFRetain(a1);
  *(_QWORD *)(v11 + 8) = a2;
  CFRetain(a2);
  *(_DWORD *)(v11 + 88) = a3;
  return FigDeferredTransactionAppendChangeWithCallback(a5, 1, a4, v11, (uint64_t)figlayersync_disposeSetLayerTimingContext, (uint64_t)figlayersync_copyDescriptionSetLayerTimingContext, (uint64_t)figlayersync_setLayerTimingToMomentContext);
}

void figlayersync_disposeSetLayerTimingContext(const void **a1)
{
  const void *v2;
  const void *v3;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  free(a1);
}

__CFString *figlayersync_copyDescriptionSetLayerTimingContext()
{
  __CFString *Mutable;
  const void *v1;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Set layer timing"));
  v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\nwith: %@"), v1);
  if (v1)
    CFRelease(v1);
  return Mutable;
}

void figlayersync_setLayerTimingToMomentContext(uint64_t a1)
{
  OpaqueCMTimebase *v2;
  int v3;

  v2 = *(OpaqueCMTimebase **)(a1 + 8);
  if (!v2 || (FigTimebaseGetSyncMoment(v2, a1 + 16), !v3))
    figlayersync_synchronizeToMoment(*(_QWORD *)a1, a1 + 16, *(_DWORD *)(a1 + 88));
}

uint64_t FigLayerSynchronizerSynchronizeToMomentWithDeferredTransaction(const void *a1, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (!a1 || !a2)
    return 0;
  v10 = malloc_type_calloc(1uLL, 0x60uLL, 0x102004037358F12uLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = (uint64_t)v10;
  *v10 = a1;
  CFRetain(a1);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v11 + 48) = v13;
  *(_OWORD *)(v11 + 64) = v14;
  *(_OWORD *)(v11 + 32) = v12;
  *(_DWORD *)(v11 + 88) = a3;
  return FigDeferredTransactionAppendChangeWithCallback(a5, 1, a4, v11, (uint64_t)figlayersync_disposeSetLayerTimingContext, (uint64_t)figlayersync_copyDescriptionSetLayerTimingContext, (uint64_t)figlayersync_setLayerTimingToMomentContext);
}

uint64_t FigLayerSynchronizerSetLayerArraysWithDeferredTransaction(uint64_t a1, const __CFArray *a2, const __CFArray *a3, const void *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1ECDC8830)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return figlayersync_setLayerArrays(a1, a2, a3, 0, a4);
}

uint64_t figlayersync_setLayerArrays(uint64_t a1, const __CFArray *a2, const __CFArray *a3, char a4, const void *a5)
{
  void *v10;
  const __CFArray *Mutable;
  double *v12;
  CFIndex Count;
  const __CFArray *v14;
  uint64_t v15;
  const __CFAllocator *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  CFIndex v21;
  CFIndex v22;
  _BYTE *v23;
  CFIndex v24;
  CFIndex v25;
  CFMutableArrayRef MutableCopy;
  const CFArrayCallBacks *v27;
  CFMutableArrayRef v28;
  __CFArray *v29;
  CFIndex v30;
  void *LayerFrom2Arrays;
  CFIndex v32;
  void *v33;
  const void *v34;
  CFIndex v35;
  BOOL v36;
  char v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  CFIndex j;
  void *v43;
  const void *v44;
  CFIndex v45;
  CFIndex i;
  void *ValueAtIndex;
  double v48;
  void *v50;
  const __CFArray *v51;
  _BYTE *v52;
  const void *v53;
  const void *v54;
  __CFArray *theArray;
  CFIndex v56;
  const void *v57;
  uint64_t size;
  uint64_t capacity;
  char v60;
  __int128 v61;
  uint64_t v62;

  if (a1)
  {
    v10 = (void *)MEMORY[0x19403137C]();
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    if (*(_BYTE *)(a1 + 16))
    {
      Mutable = 0;
      v12 = 0;
      Count = 0;
      v14 = 0;
      v15 = 4294954934;
LABEL_82:
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
      if ((a4 & 2) != 0 && v14)
      {
        objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
        if (!pthread_main_np())
          objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
        objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            if (fabs(v12[i]) != INFINITY)
            {
              ValueAtIndex = (void *)CFArrayGetValueAtIndex(v14, i);
              objc_msgSend(ValueAtIndex, "duration");
              if (v48 == v12[i])
                objc_msgSend(ValueAtIndex, "setDuration:", INFINITY);
            }
          }
        }
        CFRelease(v14);
        objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
        if (!Mutable)
          goto LABEL_99;
      }
      else
      {
        if (Mutable && CFArrayGetCount(Mutable))
        {
          v61 = *MEMORY[0x1E0CA2E30];
          v62 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
          FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(a5, &v61, Mutable, (uint64_t)"figlayersync_setLayerArrays");
        }
        FPSupport_AppendDeferredTransactionChangeToRelease(a5, (uint64_t)v14, (uint64_t)"figlayersync_setLayerArrays");
        if (!Mutable)
          goto LABEL_99;
      }
      CFRelease(Mutable);
LABEL_99:
      free(v12);
      objc_autoreleasePoolPop(v10);
      return v15;
    }
    v60 = a4;
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      v12 = 0;
      Count = 0;
      v14 = 0;
      goto LABEL_27;
    }
    v14 = *(const __CFArray **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v14)
      Count = CFArrayGetCount(v14);
    else
      Count = 0;
    v12 = *(double **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 89) = 0;
    v17 = *(void **)(a1 + 40);
    if (v17)
    {
      *(_QWORD *)(a1 + 40) = 0;
      free(v17);
    }
    v18 = *(void **)(a1 + 48);
    if (v18)
    {
      *(_QWORD *)(a1 + 48) = 0;
      free(v18);
    }
    v19 = *(void **)(a1 + 56);
    if (v19)
    {
      *(_QWORD *)(a1 + 56) = 0;
      free(v19);
    }
    v20 = *(void **)(a1 + 80);
    if (v20)
    {
      *(_QWORD *)(a1 + 80) = 0;
      free(v20);
    }
    if (!((unint64_t)a2 | (unint64_t)a3))
      goto LABEL_80;
    v57 = a5;
    if (a2)
    {
      v21 = CFArrayGetCount(a2);
      if (a3)
      {
LABEL_20:
        v22 = CFArrayGetCount(a3);
LABEL_23:
        if (!(v22 + v21))
        {
          v15 = 0;
          a5 = v57;
          goto LABEL_81;
        }
        size = v22 + v21;
        v23 = malloc_type_calloc(1uLL, v22 + v21, 0xC6E25BC7uLL);
        *(_QWORD *)(a1 + 80) = v23;
        a5 = v57;
        v52 = v23;
        if (!v23)
        {
LABEL_27:
          v15 = 4294954935;
LABEL_81:
          a4 = v60;
          goto LABEL_82;
        }
        if (!((unint64_t)a2 | (unint64_t)a3))
        {
          *(_QWORD *)(a1 + 64) = 0;
          goto LABEL_27;
        }
        if (a2)
          v24 = CFArrayGetCount(a2);
        else
          v24 = 0;
        v56 = v24;
        if (a3)
        {
          v25 = CFArrayGetCount(a3);
          v24 = v56;
        }
        else
        {
          v25 = 0;
        }
        if (v25 + v24 == 1)
        {
          if (v24 < 1)
          {
            MutableCopy = CFArrayCreateMutableCopy(v16, 0, a3);
            *v52 = 0;
          }
          else
          {
            MutableCopy = CFArrayCreateMutableCopy(v16, 0, a2);
            *v52 = 1;
          }
          a4 = v60;
        }
        else
        {
          v51 = Mutable;
          v27 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          capacity = v25 + v24;
          theArray = CFArrayCreateMutable(v16, v25 + v24, MEMORY[0x1E0C9B378]);
          v28 = CFArrayCreateMutable(v16, capacity, v27);
          if (capacity >= 1 && theArray)
          {
            v29 = v28;
            v50 = v10;
            v30 = 0;
            v54 = (const void *)*MEMORY[0x1E0C9AE40];
            v53 = (const void *)*MEMORY[0x1E0C9AE50];
            do
            {
              LayerFrom2Arrays = (void *)figlayersync_getLayerFrom2Arrays(a2, a3, v30);
              v32 = 0;
              if (v30)
              {
                do
                {
                  v33 = (void *)figlayersync_getLayerFrom2Arrays(a2, a3, v32);
                  while (1)
                  {
                    v33 = (void *)objc_msgSend(v33, "superlayer");
                    if (!v33)
                      break;
                    if (v33 == LayerFrom2Arrays)
                      goto LABEL_48;
                  }
                  ++v32;
                }
                while (v32 != v30);
                v32 = v30;
              }
LABEL_48:
              CFArrayInsertValueAtIndex(theArray, v32, LayerFrom2Arrays);
              if (v30 >= v56)
                v34 = v54;
              else
                v34 = v53;
              CFArrayInsertValueAtIndex(v29, v32, v34);
              ++v30;
            }
            while (v30 != capacity);
            v35 = 0;
            v10 = v50;
            do
            {
              v36 = v54 == CFArrayGetValueAtIndex(v29, v35);
              v28 = v29;
              v37 = !v36;
              v52[v35++] = v37;
            }
            while (capacity != v35);
          }
          if (v28)
            CFRelease(v28);
          a5 = v57;
          a4 = v60;
          MutableCopy = theArray;
          Mutable = v51;
        }
        *(_QWORD *)(a1 + 64) = MutableCopy;
        if (!MutableCopy)
          goto LABEL_101;
        v38 = malloc_type_calloc(8uLL, size, 0x2C0FA82BuLL);
        *(_QWORD *)(a1 + 40) = v38;
        if (!v38
          || (v39 = malloc_type_calloc(8uLL, size, 0x443F37CAuLL), (*(_QWORD *)(a1 + 48) = v39) == 0)
          || (v40 = malloc_type_calloc(8uLL, size, 0x25C788D4uLL), (*(_QWORD *)(a1 + 56) = v40) == 0)
          || (v41 = malloc_type_calloc(8uLL, size, 0xF316400EuLL), (*(_QWORD *)(a1 + 72) = v41) == 0))
        {
LABEL_101:
          v15 = 4294954935;
          goto LABEL_82;
        }
        if (size >= 1)
          memset_pattern16(v41, &unk_1932F70C0, 8 * size);
        if (Count < 1)
        {
          v15 = 0;
          goto LABEL_82;
        }
        for (j = 0; j != Count; ++j)
        {
          if (fabs(v12[j]) != INFINITY)
          {
            v43 = v10;
            v44 = CFArrayGetValueAtIndex(v14, j);
            if (size < 1)
            {
LABEL_76:
              CFArrayAppendValue(Mutable, v44);
            }
            else
            {
              v45 = 0;
              while (v44 != CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v45))
              {
                if (size == ++v45)
                  goto LABEL_76;
              }
              *(double *)(*(_QWORD *)(a1 + 72) + 8 * v45) = v12[j];
              v12[j] = INFINITY;
            }
            v10 = v43;
            a5 = v57;
          }
        }
LABEL_80:
        v15 = 0;
        goto LABEL_81;
      }
    }
    else
    {
      v21 = 0;
      if (a3)
        goto LABEL_20;
    }
    v22 = 0;
    goto LABEL_23;
  }
  return 4294954936;
}

uint64_t FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(uint64_t a1, const __CFArray *a2, const void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1ECDC8830)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return figlayersync_setLayerArrays(a1, 0, a2, 0, a3);
}

uint64_t FigLayerSynchronizerSetCompensateForDisplayLatency(uint64_t a1, char a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1ECDC8830)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_BYTE *)(a1 + 88) = a2;
  *(_BYTE *)(a1 + 89) = 0;
  return 0;
}

uint64_t FigLayerSynchronizerSetLayerArray(uint64_t a1, const __CFArray *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1ECDC8830)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return figlayersync_setLayerArrays(a1, 0, a2, 2, 0);
}

uint64_t FigLayerSynchronizerSynchronizeToMoment(uint64_t a1, uint64_t a2, char a3)
{
  return figlayersync_synchronizeToMoment(a1, a2, a3 | 2u);
}

uint64_t figlayersync_synchronizeToMoment(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;

  if (!a1)
    return 4294954936;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (void *)MEMORY[0x19403137C]();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_QWORD *)(a1 + 24) == v6)
      MEMORY[0x19402EA24](v6);
    v8 = 4294954934;
  }
  else
  {
    if ((a3 & 2) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      figlayersync_setLayerTimingToMoment(a1, a2);
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
      objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
    }
    else
    {
      figlayersync_setLayerTimingToMoment(a1, a2);
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
    }
    v8 = 0;
  }
  objc_autoreleasePoolPop(v7);
  return v8;
}

uint64_t FigLayerSynchronizerDestroy(const void *a1)
{
  if (a1)
    CFRelease(a1);
  return 0;
}

double LayerSynchronizer_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void LayerSynchronizer_finalize(uint64_t a1)
{
  void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (void *)MEMORY[0x19403137C]();
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    *(_BYTE *)(a1 + 16) = 1;
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
    free(*(void **)(a1 + 40));
    free(*(void **)(a1 + 48));
    free(*(void **)(a1 + 56));
    free(*(void **)(a1 + 72));
    free(*(void **)(a1 + 80));
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      v3 = *(const void **)(a1 + 64);
      if (v3)
        CFRelease(v3);
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    }
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 24) = 0;
    objc_autoreleasePoolPop(v2);
  }
}

__CFString *LayerSynchronizer_CopyDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<LayerSynchronizer %p>"), a1);
  return Mutable;
}

const void *figlayersync_getLayerFrom2Arrays(CFArrayRef theArray, const __CFArray *a2, CFIndex a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFArray *v9;

  if (!theArray)
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(theArray);
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v7 = CFArrayGetCount(a2);
LABEL_6:
  if (!(v7 + Count) || v7 + Count <= a3)
    return 0;
  v8 = a3 - Count;
  if (a3 >= Count)
  {
    v9 = a2;
  }
  else
  {
    v9 = theArray;
    v8 = a3;
  }
  return CFArrayGetValueAtIndex(v9, v8);
}

void figlayersync_setLayerTimingToMoment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  OpaqueCMClock *HostTimeClock;
  Float64 v6;
  int *v7;
  int v8;
  uint64_t v9;
  CFIndex v10;
  double Seconds;
  double v12;
  double v13;
  void *ValueAtIndex;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  double v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  uint64_t v31;
  void *v32;
  float v33;
  double v34;
  uint64_t v35;
  void *v37;
  double v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v48;
  NSObject *v49;
  unsigned int v50;
  unsigned int v51;
  double v52;
  NSObject *v53;
  unsigned int v54;
  unsigned int v55;
  NSObject *v56;
  unsigned int v57;
  unsigned int v58;
  double v59;
  double v60;
  double v61;
  double v62;
  NSObject *v63;
  unsigned int v64;
  unsigned int v65;
  CMTime *p_rhs;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;
  CFIndex Count;
  uint64_t v72;
  int v73;
  CMTime v74;
  CMTime v75;
  os_log_type_t type;
  _BYTE lhs[32];
  __int128 v78;
  __int128 v79;
  CMTime rhs;
  void *v81;
  __int16 v82;
  int v83;
  __int16 v84;
  double v85;
  CMTime v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  double v95;
  CMTime time;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  memset(&v75, 0, sizeof(v75));
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_125;
  v3 = a2;
  if (!*(_BYTE *)(a1 + 89) || (*(_BYTE *)(a2 + 4) & 1) != 0)
  {
    v69 = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    v69 = 1;
  }
  memset(&time, 0, sizeof(time));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&time, HostTimeClock);
  memset(&v86, 0, sizeof(v86));
  *(CMTime *)lhs = time;
  rhs = *(CMTime *)(v3 + 40);
  CMTimeSubtract(&v86, (CMTime *)lhs, &rhs);
  memset(lhs, 0, 24);
  v6 = *(double *)(v3 + 8) * *(double *)(v3 + 64);
  rhs = v86;
  CMTimeMultiplyByFloat64((CMTime *)lhs, &rhs, v6);
  rhs = *(CMTime *)(v3 + 16);
  v74 = *(CMTime *)lhs;
  CMTimeAdd(&v75, &rhs, &v74);
  v7 = (int *)MEMORY[0x1E0CA1FC0];
  v8 = *MEMORY[0x1E0CA1FC0];
  if (v4 && v8 == 1)
  {
    kdebug_trace();
    v8 = *v7;
  }
  if ((*(_BYTE *)(v3 + 4) & 2) != 0 && v8 == 1)
  {
    time = *(CMTime *)(v3 + 16);
    CMTimeGetSeconds(&time);
    kdebug_trace();
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (Count >= 1)
  {
    v9 = 0;
    v10 = 0;
    v70 = v4;
    v68 = v3;
    while (1)
    {
      time = v75;
      Seconds = CMTimeGetSeconds(&time);
      v12 = *(double *)(*(_QWORD *)(a1 + 40) + 8 * v10);
      v13 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * v10);
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v10);
      v73 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + v10);
      objc_msgSend(ValueAtIndex, "convertTime:fromLayer:", 0, CACurrentMediaTime());
      v16 = v15;
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(ValueAtIndex, "setInheritsTiming:", 0);
        v17 = CACurrentMediaTime();
        objc_msgSend(ValueAtIndex, "beginTime");
        v19 = v17 - v18;
        objc_msgSend(ValueAtIndex, "speed");
        v21 = v20;
        objc_msgSend(ValueAtIndex, "timeOffset");
        v16 = v22 + v19 * v21;
      }
      else
      {
        v23 = (void *)objc_msgSend(ValueAtIndex, "superlayer");
        v24 = CACurrentMediaTime();
        v17 = v24;
        if (v23)
        {
          objc_msgSend(v23, "convertTime:fromLayer:", 0, v24);
          v17 = v25;
        }
      }
      if (!v4)
        goto LABEL_47;
      objc_msgSend(ValueAtIndex, "duration");
      v27 = v26;
      v28 = fabs(v26);
      if ((objc_opt_respondsToSelector() & 1) == 0
        || (v29 = 1.0, objc_msgSend(ValueAtIndex, "inheritsTiming")))
      {
        v30 = (void *)objc_msgSend(ValueAtIndex, "superlayer");
        if ((objc_opt_respondsToSelector() & 1) == 0 || (v29 = 1.0, objc_msgSend(v30, "inheritsTiming")))
        {
          v31 = objc_msgSend(v30, "superlayer");
          if (v31)
          {
            v32 = (void *)v31;
            v13 = 1.0;
            v29 = 1.0;
            while (1)
            {
              objc_msgSend(v32, "speed");
              v29 = v29 * v33;
              if (v29 == 0.0)
                break;
              if ((objc_opt_respondsToSelector() & 1) == 0 || objc_msgSend(v32, "inheritsTiming"))
              {
                v32 = (void *)objc_msgSend(v32, "superlayer");
                if (v32)
                  continue;
              }
              goto LABEL_31;
            }
            v12 = 1.0;
LABEL_40:
            v35 = *(_QWORD *)(a1 + 72);
            if (v28 == INFINITY || v27 != *(double *)(v35 + 8 * v10))
              goto LABEL_47;
            *(_QWORD *)(v35 + 8 * v10) = 0x7FF0000000000000;
            v34 = INFINITY;
            goto LABEL_46;
          }
          v29 = 1.0;
        }
      }
LABEL_31:
      v12 = *(double *)(v3 + 8) / v29;
      if (v12 == 0.0)
        v13 = 1.0;
      else
        v13 = 1.0 / v12;
      if (v12 >= 0.0)
        goto LABEL_40;
      if (v28 != INFINITY)
        goto LABEL_47;
      v34 = v16 + 0.1;
      *(double *)(*(_QWORD *)(a1 + 72) + 8 * v10) = v16 + 0.1;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + v10))
        v34 = INFINITY;
LABEL_46:
      objc_msgSend(ValueAtIndex, "setDuration:", v34);
LABEL_47:
      if (!*(_BYTE *)(a1 + 89)
        || (*(_BYTE *)(v3 + 4) & 3) != 0
        || vabdd_f64(Seconds + v12 * *(double *)(*(_QWORD *)(a1 + 56) + 8 * v10), v16) >= 0.005)
      {
        if (*(_BYTE *)(a1 + 88))
        {
          v72 = v9;
          v37 = (void *)objc_msgSend(ValueAtIndex, "context");
          v38 = 0.0;
          if (v37 && (objc_opt_respondsToSelector() & 1) != 0)
          {
            v39 = objc_msgSend(v37, "displayId");
            if (v39)
            {
              v78 = 0u;
              v79 = 0u;
              memset(lhs, 0, sizeof(lhs));
              v40 = (void *)objc_msgSend(MEMORY[0x1E0CD2728], "displays");
              v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", lhs, &time, 16);
              if (v41)
              {
                v42 = v41;
                v43 = **(_QWORD **)&lhs[16];
LABEL_56:
                v44 = 0;
                while (1)
                {
                  if (**(_QWORD **)&lhs[16] != v43)
                    objc_enumerationMutation(v40);
                  v45 = *(void **)(*(_QWORD *)&lhs[8] + 8 * v44);
                  if (objc_msgSend(v45, "displayId") == v39)
                    break;
                  if (v42 == ++v44)
                  {
                    v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", lhs, &time, 16);
                    if (v42)
                      goto LABEL_56;
                    goto LABEL_102;
                  }
                }
                objc_msgSend(v45, "latency");
                if (v59 < 0.0)
                {
LABEL_102:
                  v3 = v68;
                  goto LABEL_64;
                }
                v3 = v68;
                if (v59 <= 1.0)
                  v38 = v59;
              }
            }
          }
          else
          {
            v39 = 0;
          }
LABEL_64:
          if (dword_1ECDC8830)
          {
            LODWORD(v74.value) = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = v74.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
              v48 = value;
            else
              v48 = value & 0xFFFFFFFE;
            if (v48)
            {
              LODWORD(rhs.value) = 136316162;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"figlayersync_getLayerDisplayLatency";
              LOWORD(rhs.flags) = 2048;
              *(_QWORD *)((char *)&rhs.flags + 2) = ValueAtIndex;
              HIWORD(rhs.epoch) = 2048;
              v81 = v37;
              v82 = 1024;
              v83 = v39;
              v84 = 2048;
              v85 = v38;
              LODWORD(v67) = 48;
              p_rhs = &rhs;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v4 = v70;
          v9 = v72;
        }
        else
        {
          v38 = 0.0;
        }
        if (v73)
        {
          if (dword_1ECDC8830)
          {
            *(_DWORD *)lhs = 0;
            LOBYTE(rhs.value) = 0;
            v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v50 = *(_DWORD *)lhs;
            if (os_log_type_enabled(v49, rhs.value))
              v51 = v50;
            else
              v51 = v50 & 0xFFFFFFFE;
            if (v51)
            {
              LODWORD(v86.value) = 136315906;
              *(CMTimeValue *)((char *)&v86.value + 4) = (CMTimeValue)"figlayersync_setLayerTiming";
              LOWORD(v86.flags) = 2048;
              *(_QWORD *)((char *)&v86.flags + 2) = ValueAtIndex;
              HIWORD(v86.epoch) = 2048;
              v87 = v38;
              v88 = 2048;
              v89 = v17;
              LODWORD(v67) = 42;
              p_rhs = &v86;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(ValueAtIndex, "setTimeOffset:", v38, p_rhs, v67);
        }
        else
        {
          if (v12 == 0.0)
          {
            objc_msgSend(ValueAtIndex, "duration");
            if (v52 <= Seconds)
            {
              Seconds = v52 + -0.000001;
            }
            else if (Seconds < 0.0)
            {
              Seconds = 0.0;
            }
            if (dword_1ECDC8830)
            {
              *(_DWORD *)lhs = 0;
              LOBYTE(rhs.value) = 0;
              v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v57 = *(_DWORD *)lhs;
              if (os_log_type_enabled(v56, rhs.value))
                v58 = v57;
              else
                v58 = v57 & 0xFFFFFFFE;
              if (v58)
              {
                LODWORD(v86.value) = 136315906;
                *(CMTimeValue *)((char *)&v86.value + 4) = (CMTimeValue)"figlayersync_setLayerTiming";
                LOWORD(v86.flags) = 2048;
                *(_QWORD *)((char *)&v86.flags + 2) = ValueAtIndex;
                HIWORD(v86.epoch) = 2048;
                v87 = Seconds;
                v88 = 2048;
                v89 = v17;
                LODWORD(v67) = 42;
                p_rhs = &v86;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          else if (v12 <= 0.0)
          {
            objc_msgSend(ValueAtIndex, "duration");
            v61 = v60;
            objc_msgSend(ValueAtIndex, "setBeginTime:", v17 - (Seconds - v60) * v13 - v38);
            Seconds = v61;
          }
          else
          {
            if (dword_1ECDC8830)
            {
              *(_DWORD *)lhs = 0;
              LOBYTE(rhs.value) = 0;
              v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v54 = *(_DWORD *)lhs;
              if (os_log_type_enabled(v53, rhs.value))
                v55 = v54;
              else
                v55 = v54 & 0xFFFFFFFE;
              if (v55)
              {
                LODWORD(v86.value) = 136316674;
                *(CMTimeValue *)((char *)&v86.value + 4) = (CMTimeValue)"figlayersync_setLayerTiming";
                LOWORD(v86.flags) = 2048;
                *(_QWORD *)((char *)&v86.flags + 2) = ValueAtIndex;
                HIWORD(v86.epoch) = 2048;
                v87 = v17 - Seconds * v13 - v38;
                v88 = 2048;
                v89 = v17;
                v90 = 2048;
                v91 = Seconds;
                v92 = 2048;
                v93 = v12;
                v94 = 2048;
                v95 = v38;
                LODWORD(v67) = 72;
                p_rhs = &v86;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            objc_msgSend(ValueAtIndex, "setBeginTime:", v17 - Seconds * v13 - v38, p_rhs, v67);
            Seconds = 0.0;
          }
          objc_msgSend(ValueAtIndex, "setTimeOffset:", Seconds, p_rhs, v67);
          if ((v69 & 1) == 0)
          {
            if (dword_1ECDC8830)
            {
              *(_DWORD *)lhs = 0;
              LOBYTE(rhs.value) = 0;
              v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v64 = *(_DWORD *)lhs;
              if (os_log_type_enabled(v63, rhs.value))
                v65 = v64;
              else
                v65 = v64 & 0xFFFFFFFE;
              if (v65)
              {
                LODWORD(v86.value) = 136315650;
                *(CMTimeValue *)((char *)&v86.value + 4) = (CMTimeValue)"figlayersync_setLayerTiming";
                LOWORD(v86.flags) = 2048;
                *(_QWORD *)((char *)&v86.flags + 2) = ValueAtIndex;
                HIWORD(v86.epoch) = 2048;
                v87 = v12;
                LODWORD(v67) = 32;
                p_rhs = &v86;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(float *)&v62 = v12;
            objc_msgSend(ValueAtIndex, "setSpeed:", v62, p_rhs, v67);
          }
        }
        *(double *)(*(_QWORD *)(a1 + 56) + 8 * v10) = v38;
        ++v9;
        if (v4)
        {
          *(double *)(*(_QWORD *)(a1 + 40) + 8 * v10) = v12;
          *(double *)(*(_QWORD *)(a1 + 48) + 8 * v10) = v13;
        }
      }
      if (++v10 == Count)
        goto LABEL_124;
    }
  }
  v9 = 0;
LABEL_124:
  if (v9 == Count)
LABEL_125:
    *(_BYTE *)(a1 + 89) = 1;
}

uint64_t FigVTTRegionBlockCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  CFMutableDictionaryRef *DerivedStorage;

  if (!a2)
    return FigSignalErrorAt();
  FigVTTNodeGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
    v3 = FigVTTInitializeNodeBaseStorage(DerivedStorage);
    if (!(_DWORD)v3)
      *a2 = 0;
  }
  return v3;
}

void figVTTRegionBlock_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTRegionBlock_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("regionblock: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figVTTRegionBlock_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 4;
  return 0;
}

uint64_t figVTTRegionBlock_copyNodeDocumentSerialization(const void *a1, CFStringRef *a2)
{
  const __CFAllocator *v4;
  const __CFAllocator *v5;
  CFMutableStringRef Mutable;
  __CFString *v7;
  uint64_t v8;
  const void *Value;
  int v10;
  const void *v11;
  uint64_t v12;
  int v13;
  int v14;
  const void *v15;
  CFStringRef v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  const __CFDictionary *v23;

  v4 = CFGetAllocator(a1);
  v23 = 0;
  if (!a2)
    return FigSignalErrorAt();
  v5 = v4;
  *a2 = 0;
  Mutable = CFStringCreateMutable(v4, 0);
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  v8 = FigVTTNodeCopyAttributes((uint64_t)a1, &v23);
  if (!(_DWORD)v8 && FigCFDictionaryGetCount() >= 1)
  {
    Value = CFDictionaryGetValue(v23, CFSTR("id"));
    if (Value)
    {
      CFStringAppendFormat(v7, 0, CFSTR("id:%@"), Value);
      CFStringAppendFormat(v7, 0, CFSTR("\n"));
      v10 = 1;
    }
    else
    {
      v10 = 0;
    }
    v11 = CFDictionaryGetValue(v23, CFSTR("lines"));
    if (v11)
    {
      CFStringAppendFormat(v7, 0, CFSTR("lines:%@"), v11);
      CFStringAppendFormat(v7, 0, CFSTR("\n"));
      ++v10;
    }
    if (CFDictionaryGetValue(v23, CFSTR("width")))
    {
      v12 = FigGeometryDimensionMakeFromDictionary();
      v14 = v13;
      CFStringAppendFormat(v7, 0, CFSTR("%@:"), CFSTR("width"));
      FigVTTStringifyFigGeometryDimensionAndAppend(v7, v12, v14);
      CFStringAppendFormat(v7, 0, CFSTR("\n"));
      ++v10;
    }
    if (CFDictionaryGetValue(v23, CFSTR("regionanchor")))
    {
      v21 = 0u;
      v22 = 0u;
      FigGeometryPointMakeFromDictionary();
      CFStringAppendFormat(v7, 0, CFSTR("%@:"), CFSTR("regionanchor"));
      v19 = 0u;
      v20 = 0u;
      FigVTTStringifyFigGeometryPointAndAppend(v7, (uint64_t *)&v19);
      CFStringAppendFormat(v7, 0, CFSTR("\n"));
      ++v10;
    }
    if (CFDictionaryGetValue(v23, CFSTR("viewportanchor")))
    {
      v21 = 0u;
      v22 = 0u;
      FigGeometryPointMakeFromDictionary();
      CFStringAppendFormat(v7, 0, CFSTR("%@:"), CFSTR("viewportanchor"));
      v19 = v21;
      v20 = v22;
      FigVTTStringifyFigGeometryPointAndAppend(v7, (uint64_t *)&v19);
      CFStringAppendFormat(v7, 0, CFSTR("\n"));
      v10 = 1;
    }
    v15 = CFDictionaryGetValue(v23, CFSTR("scroll"));
    if (v15)
    {
      CFStringAppendFormat(v7, 0, CFSTR("scroll:%@"), v15);
      CFStringAppendFormat(v7, 0, CFSTR("\n"));
    }
    else if (!v10)
    {
      v16 = CFStringCreateWithFormat(v5, 0, &stru_1E2FD85F8, v18);
      goto LABEL_20;
    }
    v16 = CFStringCreateWithFormat(v5, 0, CFSTR("%@\n%@\n"), CFSTR("REGION"), v7);
LABEL_20:
    *a2 = v16;
  }
  CFRelease(v7);
  if (v23)
    CFRelease(v23);
  return v8;
}

uint64_t FigCLCPCaptionGroupConverterToSampleBufferCreate(_OWORD *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  CFTypeRef v8;
  uint64_t ClosedCaptionChannel;
  const __CFDictionary *v10;
  unsigned int v11;
  CFMutableDataRef Mutable;
  __CFData *v13;
  CFDictionaryRef v14;
  uint64_t v15;
  int v16;
  unsigned int v18;
  CFTypeRef v19;
  void *keys;
  UInt8 v21[4];
  UInt8 bytes[4];
  CMFormatDescriptionRef formatDescriptionOut;
  CFTypeRef cf;
  void *values;

  v19 = 0;
  if (a1)
  {
    if (a3)
    {
      FigCaptionGroupConverterToSampleBufferGetClassID();
      v6 = CMDerivedObjectCreate();
      if ((_DWORD)v6)
      {
        v15 = v6;
        FigSignalErrorAt();
        goto LABEL_33;
      }
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a2)
        v8 = CFRetain(a2);
      else
        v8 = 0;
      *(_QWORD *)DerivedStorage = v8;
      *(_OWORD *)(DerivedStorage + 144) = *a1;
      ClosedCaptionChannel = FigCEA608DataGeneratorCreate((uint64_t)clcpcgctsbCEA608DataGeneratorCallback, (uint64_t)v19, (CFAllocatorRef)a2, (_QWORD *)(DerivedStorage + 8));
      if (!(_DWORD)ClosedCaptionChannel)
      {
        v18 = 0;
        ClosedCaptionChannel = FigCEA608DataGeneratorGetClosedCaptionChannel(*(_QWORD *)(DerivedStorage + 8), &v18);
        if (!(_DWORD)ClosedCaptionChannel)
        {
          v10 = 0;
          v11 = v18;
          cf = 0;
          values = 0;
          formatDescriptionOut = 0;
          if (v18 != 1)
          {
            Mutable = CFDataCreateMutable((CFAllocatorRef)a2, 8);
            values = Mutable;
            if (!Mutable)
              goto LABEL_28;
            v13 = Mutable;
            *(_DWORD *)bytes = 942683748;
            CFDataAppendBytes(Mutable, bytes, 4);
            *(_DWORD *)v21 = bswap32(v11);
            CFDataAppendBytes(v13, v21, 4);
            keys = CFSTR("cccc");
            cf = CFDictionaryCreate((CFAllocatorRef)a2, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!cf
              || (v14 = CFDictionaryCreate((CFAllocatorRef)a2, MEMORY[0x1E0CA2240], &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
            {
LABEL_28:
              v15 = FigSignalErrorAt();
              goto LABEL_18;
            }
            v10 = v14;
          }
          v15 = CMFormatDescriptionCreate((CFAllocatorRef)a2, 0x636C6370u, 0x63363038u, v10, &formatDescriptionOut);
          if (!(_DWORD)v15)
            *(_QWORD *)(DerivedStorage + 24) = formatDescriptionOut;
          if (v10)
            CFRelease(v10);
LABEL_18:
          if (cf)
            CFRelease(cf);
          if (values)
            CFRelease(values);
          if (!(_DWORD)v15)
          {
            if (v18 - 3 >= 2)
              v16 = 1667522932;
            else
              v16 = 1667527730;
            *(_DWORD *)(DerivedStorage + 20) = v16;
            *a3 = v19;
            return v15;
          }
LABEL_33:
          if (v19)
            CFRelease(v19);
          return v15;
        }
      }
    }
    else
    {
      ClosedCaptionChannel = FigSignalErrorAt();
    }
    v15 = ClosedCaptionChannel;
    goto LABEL_33;
  }
  return FigSignalErrorAt();
}

uint64_t clcpcgctsbCEA608DataGeneratorCallback(const void *a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t CCData;
  __int128 v6;
  __int128 v7;
  CFTypeRef v8;
  __int128 v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  CCData = clcpcgctsbOutputAndReleaseLastCCData(DerivedStorage, (uint64_t)&v10);
  if (!(_DWORD)CCData)
  {
    v6 = *a2;
    v7 = a2[2];
    *(_OWORD *)(DerivedStorage + 112) = a2[1];
    *(_OWORD *)(DerivedStorage + 128) = v7;
    *(_OWORD *)(DerivedStorage + 96) = v6;
    if (a1)
      v8 = CFRetain(a1);
    else
      v8 = 0;
    *(_QWORD *)(DerivedStorage + 88) = v8;
  }
  return CCData;
}

uint64_t FigCLCPCaptionConversionValidatorCreate(_OWORD *a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t ShouldAdjustOverlappedDataTime;

  if (a1)
  {
    if (!a4)
      return FigSignalErrorAt();
    FigCaptionConversionValidatorGetClassID();
    v7 = CMDerivedObjectCreate();
    if ((_DWORD)v7)
    {
      ShouldAdjustOverlappedDataTime = v7;
      FigSignalErrorAt();
      return ShouldAdjustOverlappedDataTime;
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a3)
      v9 = CFRetain(a3);
    else
      v9 = 0;
    *(_QWORD *)DerivedStorage = v9;
    *(_OWORD *)(DerivedStorage + 104) = *a1;
    v10 = FigCEA608DataGeneratorCreate((uint64_t)clcpccvCEA608DataGeneratorCallback, 0, (CFAllocatorRef)a3, (_QWORD *)(DerivedStorage + 8));
    if (!(_DWORD)v10)
    {
      ShouldAdjustOverlappedDataTime = FigCEA608DataGeneratorSetShouldAdjustOverlappedDataTime(*(_QWORD *)(DerivedStorage + 8), 0);
      if (!(_DWORD)ShouldAdjustOverlappedDataTime)
        *a4 = 0;
      return ShouldAdjustOverlappedDataTime;
    }
    return v10;
  }
  return FigSignalErrorAt();
}

uint64_t clcpccvCEA608DataGeneratorCallback()
{
  return 0;
}

void clcpcgctsb_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCEA608DataGeneratorRelease(*(void **)(DerivedStorage + 8));
  v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 88);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *clcpcgctsb_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCLCPCaptionGroupConverterToSampleBufferf %p>"), a1);
  return Mutable;
}

uint64_t clcpcgctsb_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a4)
    return 4294954512;
  else
    return FigSignalErrorAt();
}

uint64_t clcpcgctsb_SetProperty(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 4294954512;
  else
    return FigSignalErrorAt();
}

uint64_t clcpcgctsb_AddCaptionGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v7;
  uint64_t SliceCount;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  CMTimeEpoch v13;
  const void *CaptionData;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const void *v18;
  __CFArray *Mutable;
  __int128 v20;
  CMTimeRange v21;
  CMTimeRange v22;
  CMTime v23;
  __int128 v24;
  CMTimeEpoch v25;
  __int128 v26;
  CMTimeEpoch v27;
  CMTime rhs;
  CMTimeRange otherRange;
  CMTimeRange time2;
  CMTimeRange time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if ((*(_BYTE *)(a3 + 12) & 1) == 0)
    return FigSignalErrorAt();
  if ((*(_BYTE *)(a3 + 36) & 1) == 0)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a3 + 40))
    return FigSignalErrorAt();
  if ((*(_QWORD *)(a3 + 24) & 0x8000000000000000) != 0)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 16) == 2)
    return FigSignalErrorAt();
  SliceCount = FigCaptionGroupGetSliceCount();
  if (SliceCount >= 1)
  {
    v9 = SliceCount;
    v10 = 0;
    v11 = (_OWORD *)(v7 + 40);
    v12 = (_OWORD *)(v7 + 64);
    v20 = *MEMORY[0x1E0CA2E68];
    v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    do
    {
      v26 = 0uLL;
      v27 = 0;
      FigCaptionGroupGetDurationBeforeSlice();
      *(_OWORD *)&time1.start.value = v26;
      time1.start.epoch = v27;
      *(_OWORD *)&time2.start.value = v20;
      time2.start.epoch = v13;
      if (!CMTimeCompare(&time1.start, &time2.start))
      {
        v24 = 0uLL;
        v25 = 0;
        FigCaptionGroupGetDurationAfterSlice();
        memset(&v23, 0, sizeof(v23));
        *(_OWORD *)&time1.start.value = *(_OWORD *)(a3 + 24);
        time1.start.epoch = *(_QWORD *)(a3 + 40);
        *(_OWORD *)&time2.start.value = v24;
        time2.start.epoch = v25;
        CMTimeAdd(&v23, &time1.start, &time2.start);
        memset(&v22, 0, sizeof(v22));
        *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
        time1.start.epoch = *(_QWORD *)(a3 + 16);
        time2.start = v23;
        CMTimeRangeMake(&v22, &time1.start, &time2.start);
        CaptionData = (const void *)FigCaptionGroupGetCaptionData();
        v21 = v22;
        v15 = *(_OWORD *)(v7 + 56);
        *(_OWORD *)&time1.start.value = *v11;
        *(_OWORD *)&time1.start.epoch = v15;
        *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v7 + 72);
        time2 = v22;
        if (CMTimeRangeEqual(&time1, &time2))
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 32), CaptionData);
        }
        else
        {
          v16 = *(_OWORD *)(v7 + 56);
          *(_OWORD *)&time2.start.value = *v11;
          *(_OWORD *)&time2.start.epoch = v16;
          *(_OWORD *)&time2.duration.timescale = *(_OWORD *)(v7 + 72);
          memset(&time1, 0, sizeof(time1));
          otherRange = v21;
          CMTimeRangeGetIntersection(&time1, &time2, &otherRange);
          v17 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
          *(_OWORD *)&time2.start.value = *MEMORY[0x1E0CA2E50];
          *(_OWORD *)&time2.start.epoch = v17;
          *(_OWORD *)&time2.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
          otherRange = time1;
          if (!CMTimeRangeEqual(&time2, &otherRange))
          {
            *(_OWORD *)&otherRange.start.value = *v12;
            otherRange.start.epoch = *(_QWORD *)(v7 + 80);
            rhs = time1.duration;
            CMTimeSubtract(&time2.start, &otherRange.start, &rhs);
            *v12 = *(_OWORD *)&time2.start.value;
            *(_QWORD *)(v7 + 80) = time2.start.epoch;
          }
          result = clcpcgctsbAddCaptionDataWithSameTimeRange(v7);
          if ((_DWORD)result)
            return result;
          v18 = *(const void **)(v7 + 32);
          if (v18)
          {
            CFRelease(v18);
            *(_QWORD *)(v7 + 32) = 0;
          }
          Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)v7, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(v7 + 32) = Mutable;
          if (Mutable)
          {
            CFArrayAppendValue(Mutable, CaptionData);
            *v11 = *(_OWORD *)&v21.start.value;
            *(_OWORD *)(v7 + 56) = *(_OWORD *)&v21.start.epoch;
            *(_OWORD *)(v7 + 72) = *(_OWORD *)&v21.duration.timescale;
          }
          else
          {
            result = FigSignalErrorAt();
            if ((_DWORD)result)
              return result;
          }
        }
      }
      ++v10;
    }
    while (v9 != v10);
  }
  result = 0;
  *(_DWORD *)(v7 + 16) = 1;
  return result;
}

uint64_t clcpcgctsb_Finish()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = clcpcgctsbAddCaptionDataWithSameTimeRange(DerivedStorage);
  if (!(_DWORD)result)
  {
    result = FigCEA608DataGeneratorFinish(*(_QWORD *)(DerivedStorage + 8));
    if (!(_DWORD)result)
    {
      result = clcpcgctsbOutputAndReleaseLastCCData(DerivedStorage, MEMORY[0x1E0CA2E10]);
      if (!(_DWORD)result)
        *(_DWORD *)(DerivedStorage + 16) = 2;
    }
  }
  return result;
}

uint64_t clcpcgctsbAddCaptionDataWithSameTimeRange(uint64_t a1)
{
  const __CFArray *v1;
  __int128 v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  int v7;
  const void *ValueAtIndex;
  unsigned int v9;
  uint64_t v10;
  const __CFArray *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t FigCEA608DataGeneratorClosedCaptionMode;
  uint64_t v15;
  uint64_t v16;
  CFAttributedStringRef v17;
  uint64_t v18;
  uint64_t v20;
  const __CFAllocator *allocator;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  CFAttributedStringRef aStr;
  void *ptr;
  CFTypeRef cf;
  CFTypeRef v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v20 = *(_QWORD *)(a1 + 8);
  allocator = *(const __CFAllocator **)a1;
  v1 = *(const __CFArray **)(a1 + 32);
  v2 = *(_OWORD *)(a1 + 56);
  v31 = *(_OWORD *)(a1 + 40);
  v32 = v2;
  v33 = *(_OWORD *)(a1 + 72);
  if (!v1)
  {
    cf = 0;
    v30 = 0;
    ptr = 0;
    goto LABEL_27;
  }
  Count = CFArrayGetCount(v1);
  cf = 0;
  v30 = 0;
  aStr = 0;
  ptr = 0;
  if (!Count)
  {
LABEL_27:
    FigCEA608DataGeneratorCaptionInfoRelease(0);
    v18 = 0;
    goto LABEL_30;
  }
  v4 = Count;
  if (Count >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v1, v5);
      v9 = clcpcgctsbDoesCaptioDataHaveText((uint64_t)ValueAtIndex);
      v26 = 0;
      v25 = 0;
      if (v9)
      {
        v10 = clcpcgctsbCopyCaptionAnimationAndRegionInformation((uint64_t)ValueAtIndex, (uint64_t)allocator, &v30, &cf, (_DWORD *)&v26 + 1, &v26, &v25);
        if ((_DWORD)v10)
          goto LABEL_25;
        v11 = v1;
        v13 = cf;
        v12 = v30;
        FigCEA608DataGeneratorClosedCaptionMode = clcpcgctsbGetFigCEA608DataGeneratorClosedCaptionMode();
        v15 = FigCEA608DataGeneratorClosedCaptionMode;
        if ((_DWORD)v6 && (_DWORD)v6 != (_DWORD)FigCEA608DataGeneratorClosedCaptionMode)
        {
          v10 = FigSignalErrorAt();
LABEL_25:
          v18 = v10;
          goto LABEL_29;
        }
        if (!v7)
        {
          v22 = v31;
          v23 = v32;
          v24 = v33;
          v10 = FigCEA608DataGeneratorCaptionInfoCreate(FigCEA608DataGeneratorClosedCaptionMode, v25, &v22, allocator, &ptr);
          if ((_DWORD)v10)
            goto LABEL_25;
          v22 = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)&v23 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          v10 = FigCEA608DataGeneratorBeginCaption(v20, &v22, 0, (uint64_t)ptr);
          if ((_DWORD)v10)
            goto LABEL_25;
        }
        v16 = clcpcgctsbCreateCEA608DataGeneratorAttributedString((uint64_t)ValueAtIndex, allocator, &aStr);
        v17 = aStr;
        if ((_DWORD)v16 || (v16 = FigCEA608DataGeneratorAddCaptionLine(v20, HIDWORD(v26), v26, aStr), (_DWORD)v16))
        {
          v18 = v16;
          FigCEA608DataGeneratorCaptionInfoRelease((const __CFAllocator **)ptr);
          if (v17)
            CFRelease(v17);
          goto LABEL_30;
        }
        if (v17)
        {
          CFRelease(v17);
          aStr = 0;
        }
        if (v13)
        {
          CFRelease(v13);
          cf = 0;
        }
        if (v12)
        {
          CFRelease(v12);
          v30 = 0;
        }
        v7 = 1;
        v1 = v11;
      }
      else
      {
        v15 = v6;
      }
      ++v5;
      v6 = v15;
      if (v4 == v5)
      {
        if (!v7)
          break;
        v10 = FigCEA608DataGeneratorEndCaption(v20, 0, 0, 0);
        goto LABEL_25;
      }
    }
  }
  v18 = 0;
LABEL_29:
  FigCEA608DataGeneratorCaptionInfoRelease((const __CFAllocator **)ptr);
LABEL_30:
  if (cf)
    CFRelease(cf);
  if (v30)
    CFRelease(v30);
  return v18;
}

const __CFString *clcpcgctsbDoesCaptioDataHaveText(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  const __CFString *result;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v2)
  {
    result = &stru_1E2FD85F8;
    return (const __CFString *)(CFStringGetLength(result) != 0);
  }
  result = (const __CFString *)v2(a1);
  if (result)
    return (const __CFString *)(CFStringGetLength(result) != 0);
  return result;
}

uint64_t clcpcgctsbCopyCaptionAnimationAndRegionInformation(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t CMBaseObject;
  uint64_t (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t CellBasedPointFromDictionary;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef v28;
  CFTypeRef v29;
  double v31;
  double v32[3];
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef cf;

  v36 = 0;
  cf = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  *(_OWORD *)v32 = *MEMORY[0x1E0C9D538];
  v31 = 0.0;
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v14 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v14)
    goto LABEL_21;
  CellBasedPointFromDictionary = v14(CMBaseObject, *MEMORY[0x1E0CA3300], a2, &cf);
  if ((_DWORD)CellBasedPointFromDictionary)
    goto LABEL_45;
  v16 = FigCaptionDataGetCMBaseObject();
  v17 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v17)
    goto LABEL_21;
  CellBasedPointFromDictionary = v17(v16, *MEMORY[0x1E0CA3340], a2, &v36);
  if ((_DWORD)CellBasedPointFromDictionary)
    goto LABEL_45;
  if (!v36)
    goto LABEL_16;
  v18 = FigCaptionRegionGetCMBaseObject();
  v19 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v19)
    goto LABEL_21;
  CellBasedPointFromDictionary = v19(v18, *MEMORY[0x1E0CA33E0], a2, &v35);
  if ((_DWORD)CellBasedPointFromDictionary)
  {
LABEL_45:
    v26 = CellBasedPointFromDictionary;
    goto LABEL_34;
  }
  v20 = FigCaptionRegionGetCMBaseObject();
  v21 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v21)
    goto LABEL_21;
  CellBasedPointFromDictionary = v21(v20, *MEMORY[0x1E0CA3490], a2, &v34);
  if ((_DWORD)CellBasedPointFromDictionary)
    goto LABEL_45;
  if (v34)
  {
    FigCaptionDynamicStyleGetInitialValue();
    CellBasedPointFromDictionary = FigCaptionGeometryGetCellBasedPointFromDictionary();
    if ((_DWORD)CellBasedPointFromDictionary)
      goto LABEL_45;
  }
  v22 = FigCaptionRegionGetCMBaseObject();
  v23 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v23)
  {
LABEL_21:
    v26 = 4294954514;
    goto LABEL_34;
  }
  CellBasedPointFromDictionary = v23(v22, *MEMORY[0x1E0CA3428], a2, &v33);
  if ((_DWORD)CellBasedPointFromDictionary)
    goto LABEL_45;
  if (v33)
  {
    FigCaptionDynamicStyleGetInitialValue();
    CellBasedPointFromDictionary = FigCaptionGeometryGetCellBasedDimensionFromDictionary();
    if ((_DWORD)CellBasedPointFromDictionary)
      goto LABEL_45;
  }
LABEL_16:
  v24 = 1.0;
  if (v32[1] < 1.0 || (v24 = 15.0, v32[1] > 15.0))
    v32[1] = v24;
  if (v32[0] >= 1.0)
  {
    v25 = 0x4040000000000000;
    if (v32[0] <= 32.0)
      goto LABEL_24;
  }
  else
  {
    v25 = 0x3FF0000000000000;
  }
  *(_QWORD *)&v32[0] = v25;
LABEL_24:
  if (0.0 < 2.0)
  {
    *(double *)&v27 = 2.0;
LABEL_28:
    v31 = *(double *)&v27;
    goto LABEL_29;
  }
  if (0.0 > 4.0)
  {
    *(double *)&v27 = 4.0;
    goto LABEL_28;
  }
LABEL_29:
  v28 = cf;
  if (cf)
    v28 = CFRetain(cf);
  *a3 = v28;
  v29 = v35;
  if (v35)
    v29 = CFRetain(v35);
  v26 = 0;
  *a4 = v29;
  *a5 = (int)v32[1];
  *a6 = (int)v32[0];
  *a7 = (int)v31;
LABEL_34:
  if (v33)
    CFRelease(v33);
  if (v34)
    CFRelease(v34);
  if (v35)
    CFRelease(v35);
  if (v36)
    CFRelease(v36);
  if (cf)
    CFRelease(cf);
  return v26;
}

uint64_t clcpcgctsbGetFigCEA608DataGeneratorClosedCaptionMode()
{
  if (FigCFEqual())
    return 3;
  if (FigCFEqual())
    return 2;
  return 1;
}

uint64_t clcpcgctsbCreateCEA608DataGeneratorAttributedString(uint64_t a1, const __CFAllocator *a2, __CFAttributedString **a3)
{
  uint64_t (*v6)(uint64_t);
  const __CFString *v7;
  uint64_t Length;
  __CFAttributedString *Mutable;
  __CFAttributedString *v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, _QWORD, const __CFAllocator *, CFArrayRef *);
  uint64_t v13;
  CFIndex v14;
  const void *ValueAtIndex;
  uint64_t Limit;
  uint64_t (*v17)(uint64_t, uint64_t, const void *, const __CFAllocator *, CFTypeRef *, CFIndex *);
  CFTypeRef v18;
  CFIndex v19;
  CFIndex v20;
  CFTypeID v21;
  const void *InitialValue;
  CFTypeID v23;
  const __CFNumber *v24;
  __CFAttributedString *v25;
  CFRange v26;
  const __CFString *v27;
  CFTypeID v28;
  const void *v29;
  CFTypeID v30;
  CFTypeID v31;
  const void *v32;
  CFTypeID v33;
  CGColor *v34;
  const void *SInt32;
  const void *v36;
  const void *v37;
  CFTypeID v38;
  const void *v39;
  CFTypeID v40;
  CGColor *v41;
  const void *v42;
  const void *v43;
  CGColor *v44;
  CGColorSpace *ColorSpace;
  double Alpha;
  const void *v47;
  const void *v48;
  uint64_t v49;
  __CFAttributedString **v51;
  CFIndex Count;
  CFTypeRef value;
  CFIndex v54;
  CFIndex v55;
  CFTypeRef cf;
  CFArrayRef theArray;
  int valuePtr[3];
  CFRange v59;
  CFRange v60;
  CFRange v61;
  CFRange v62;

  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    v7 = (const __CFString *)v6(a1);
  else
    v7 = &stru_1E2FD85F8;
  Length = CFStringGetLength(v7);
  cf = 0;
  theArray = 0;
  Mutable = CFAttributedStringCreateMutable(a2, Length);
  v10 = Mutable;
  if (Mutable)
  {
    CFAttributedStringBeginEditing(Mutable);
    v59.location = 0;
    v59.length = 0;
    CFAttributedStringReplaceString(v10, v59, v7);
    CMBaseObject = FigCaptionDataGetCMBaseObject();
    v12 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v12)
    {
      v51 = a3;
      v13 = v12(CMBaseObject, *MEMORY[0x1E0CA3368], a2, &theArray);
      if ((_DWORD)v13)
      {
LABEL_69:
        v49 = v13;
      }
      else
      {
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v14 = 0;
            value = (CFTypeRef)*MEMORY[0x1E0C9AE50];
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, v14);
              v54 = 0;
              v55 = 0;
              while (FigCFRangeGetLimit() < Length)
              {
                Limit = FigCFRangeGetLimit();
                v17 = *(uint64_t (**)(uint64_t, uint64_t, const void *, const __CFAllocator *, CFTypeRef *, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                if (!v17)
                  goto LABEL_60;
                v13 = v17(a1, Limit, ValueAtIndex, a2, &cf, &v54);
                if ((_DWORD)v13)
                  goto LABEL_69;
                v18 = cf;
                if (cf)
                {
                  v19 = v54;
                  v20 = v55;
                  CFGetAllocator(v10);
                  if (FigCFEqual())
                  {
                    v21 = CFGetTypeID(v18);
                    if (v21 == FigCaptionDynamicStyleGetTypeID())
                    {
                      if (FigCaptionDynamicStyleGetInitialValue())
                      {
                        InitialValue = (const void *)FigCaptionDynamicStyleGetInitialValue();
                        v23 = CFGetTypeID(InitialValue);
                        if (v23 == CFNumberGetTypeID())
                        {
                          valuePtr[0] = 0;
                          v24 = (const __CFNumber *)FigCaptionDynamicStyleGetInitialValue();
                          CFNumberGetValue(v24, kCFNumberSInt32Type, valuePtr);
                          if ((valuePtr[0] & 1) != 0)
                          {
                            v25 = v10;
                            v26.location = v19;
                            v26.length = v20;
                            v27 = CFSTR("Underline");
LABEL_27:
                            CFAttributedStringSetAttribute(v25, v26, v27, value);
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    if (!FigCFEqual())
                    {
                      if (FigCFEqual())
                      {
                        v31 = CFGetTypeID(v18);
                        if (v31 != FigCaptionDynamicStyleGetTypeID())
                          goto LABEL_53;
                        if (!FigCaptionDynamicStyleGetInitialValue())
                          goto LABEL_53;
                        v32 = (const void *)FigCaptionDynamicStyleGetInitialValue();
                        v33 = CFGetTypeID(v32);
                        if (v33 != CGColorGetTypeID())
                          goto LABEL_53;
                        valuePtr[0] = 0;
                        v34 = (CGColor *)FigCaptionDynamicStyleGetInitialValue();
                        if (!clcpcgctsbGetCEA608DataGeneratorColorFromCGColor(v34, valuePtr))
                          goto LABEL_53;
                        SInt32 = (const void *)FigCFNumberCreateSInt32();
                        if (SInt32)
                        {
                          v36 = SInt32;
                          v60.location = v19;
                          v60.length = v20;
                          CFAttributedStringSetAttribute(v10, v60, CFSTR("ForegroundColor"), SInt32);
                          v37 = v36;
LABEL_52:
                          CFRelease(v37);
                          goto LABEL_53;
                        }
                        goto LABEL_56;
                      }
                      if (!FigCFEqual())
                        goto LABEL_53;
                      v38 = CFGetTypeID(v18);
                      if (v38 != FigCaptionDynamicStyleGetTypeID())
                        goto LABEL_53;
                      if (!FigCaptionDynamicStyleGetInitialValue())
                        goto LABEL_53;
                      v39 = (const void *)FigCaptionDynamicStyleGetInitialValue();
                      v40 = CFGetTypeID(v39);
                      if (v40 != CGColorGetTypeID())
                        goto LABEL_53;
                      valuePtr[0] = 0;
                      v41 = (CGColor *)FigCaptionDynamicStyleGetInitialValue();
                      if (clcpcgctsbGetCEA608DataGeneratorColorFromCGColor(v41, valuePtr))
                      {
                        v42 = (const void *)FigCFNumberCreateSInt32();
                        if (!v42)
                        {
LABEL_56:
                          v49 = FigSignalErrorAt();
                          if ((_DWORD)v49)
                            goto LABEL_61;
                          goto LABEL_53;
                        }
                        v43 = v42;
                        v61.location = v19;
                        v61.length = v20;
                        CFAttributedStringSetAttribute(v10, v61, CFSTR("BackgroundColor"), v42);
                        CFRelease(v43);
                      }
                      v44 = (CGColor *)FigCaptionDynamicStyleGetInitialValue();
                      ColorSpace = CGColorGetColorSpace(v44);
                      if (CGColorSpaceGetModel(ColorSpace) != kCGColorSpaceModelRGB
                        || CGColorGetNumberOfComponents(v44) != 4)
                      {
                        goto LABEL_53;
                      }
                      Alpha = CGColorGetAlpha(v44);
                      if ((Alpha < 0.0 || Alpha > 0.25)
                        && (Alpha <= 0.25 || Alpha >= 0.85)
                        && (Alpha < 0.85 || Alpha > 1.0))
                      {
                        goto LABEL_53;
                      }
                      v47 = (const void *)FigCFNumberCreateSInt32();
                      if (v47)
                      {
                        v48 = v47;
                        v62.location = v19;
                        v62.length = v20;
                        CFAttributedStringSetAttribute(v10, v62, CFSTR("BackgroundTransparency"), v47);
                        v37 = v48;
                        goto LABEL_52;
                      }
                      goto LABEL_56;
                    }
                    v28 = CFGetTypeID(v18);
                    if (v28 == FigCaptionDynamicStyleGetTypeID())
                    {
                      if (FigCaptionDynamicStyleGetInitialValue())
                      {
                        v29 = (const void *)FigCaptionDynamicStyleGetInitialValue();
                        v30 = CFGetTypeID(v29);
                        if (v30 == CFStringGetTypeID())
                        {
                          FigCaptionDynamicStyleGetInitialValue();
                          if (FigCFEqual())
                          {
                            v25 = v10;
                            v26.location = v19;
                            v26.length = v20;
                            v27 = CFSTR("Italic");
                            goto LABEL_27;
                          }
                        }
                      }
                    }
                  }
LABEL_53:
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                }
              }
              ++v14;
            }
            while (v14 != Count);
          }
        }
        CFAttributedStringEndEditing(v10);
        v49 = 0;
        *v51 = v10;
        v10 = 0;
      }
    }
    else
    {
LABEL_60:
      v49 = 4294954514;
    }
LABEL_61:
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v49 = FigSignalErrorAt();
  }
  if (theArray)
    CFRelease(theArray);
  if (v10)
    CFRelease(v10);
  return v49;
}

uint64_t clcpcgctsbGetCEA608DataGeneratorColorFromCGColor(CGColor *a1, int *a2)
{
  CGColorSpace *ColorSpace;
  const CGFloat *Components;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  _BOOL4 v13;
  BOOL v15;
  int v16;
  _BOOL4 v19;
  uint64_t result;

  ColorSpace = CGColorGetColorSpace(a1);
  if (CGColorSpaceGetModel(ColorSpace) != kCGColorSpaceModelRGB || CGColorGetNumberOfComponents(a1) != 4)
    return 0;
  Components = CGColorGetComponents(a1);
  v6 = llround(*Components);
  v7 = llround(Components[1]);
  v8 = llround(Components[2]);
  v9 = (v6 | v7) == 0;
  if (v6 | v7)
    v10 = 0;
  else
    v10 = v8 == 0;
  if (v10)
  {
    v11 = 7;
    goto LABEL_58;
  }
  if (v8 != 1)
    v9 = 0;
  if (v9)
  {
    v11 = 2;
LABEL_58:
    *a2 = v11;
    return 1;
  }
  v13 = v6 == 1 && v7 == 0;
  if (v13 && v8 == 0)
  {
    v11 = 4;
    goto LABEL_58;
  }
  if (v8 != 1)
    LOBYTE(v13) = 0;
  if (v13)
  {
    v11 = 6;
    goto LABEL_58;
  }
  if (v6)
    v15 = 0;
  else
    v15 = v7 == 1;
  v16 = v15;
  if (v16 == 1 && v8 == 0)
  {
    v11 = 1;
    goto LABEL_58;
  }
  if (v8 != 1)
    LOBYTE(v16) = 0;
  if ((v16 & 1) != 0)
  {
    v11 = 3;
    goto LABEL_58;
  }
  v19 = v6 == 1 && v7 == 1;
  if (v19 && v8 == 0)
  {
    v11 = 5;
    goto LABEL_58;
  }
  v11 = 0;
  result = 0;
  if (v8 == 1 && v19)
    goto LABEL_58;
  return result;
}

uint64_t clcpcgctsbOutputAndReleaseLastCCData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v4;
  unsigned int v5;
  const opaqueCMFormatDescription *v6;
  const __CFAllocator *v7;
  const UInt8 *BytePtr;
  CFIndex Length;
  size_t v10;
  size_t v11;
  uint64_t v12;
  CMSampleBufferRef v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  const void *v17;
  CMTime rhs;
  CMTime v20;
  CMTime v21;
  CMSampleTimingInfo lhs;
  size_t sampleSizeArray;
  unint64_t sourceBytes;
  CMSampleBufferRef v25;
  CMBlockBufferRef blockBufferOut;

  v2 = *(_QWORD *)(a1 + 88);
  if (!v2)
    return v2;
  v4 = (_OWORD *)(a1 + 96);
  v21 = *(CMTime *)(a1 + 96);
  memset(&v20, 0, sizeof(v20));
  if ((~*(_DWORD *)(a2 + 12) & 0x11) != 0)
  {
    *(_OWORD *)&lhs.duration.value = *(_OWORD *)a2;
    lhs.duration.epoch = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&rhs.value = *v4;
    rhs.epoch = *(_QWORD *)(a1 + 112);
    CMTimeSubtract(&v20, &lhs.duration, &rhs);
    v2 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v20 = *(CMTime *)(a1 + 120);
  }
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(const opaqueCMFormatDescription **)(a1 + 24);
  v7 = *(const __CFAllocator **)a1;
  rhs = v20;
  v25 = 0;
  blockBufferOut = 0;
  sourceBytes = 0;
  BytePtr = CFDataGetBytePtr((CFDataRef)v2);
  Length = CFDataGetLength((CFDataRef)v2);
  v10 = Length + 8;
  sampleSizeArray = Length + 8;
  if ((unint64_t)(Length + 8) >> 32)
  {
    v12 = FigSignalErrorAt();
LABEL_23:
    v2 = v12;
LABEL_24:
    v13 = 0;
    goto LABEL_11;
  }
  v11 = Length;
  v12 = CMBlockBufferCreateWithMemoryBlock(v7, 0, v10, v7, 0, 0, v10, 1u, &blockBufferOut);
  if ((_DWORD)v12)
    goto LABEL_23;
  sourceBytes = _byteswap_uint64(__PAIR64__(v10, v5));
  v12 = CMBlockBufferReplaceDataBytes(&sourceBytes, blockBufferOut, 0, 8uLL);
  if ((_DWORD)v12)
    goto LABEL_23;
  v12 = CMBlockBufferReplaceDataBytes(BytePtr, blockBufferOut, 8uLL, v11);
  if ((_DWORD)v12)
    goto LABEL_23;
  lhs.duration = rhs;
  lhs.presentationTimeStamp = v21;
  lhs.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v2 = CMSampleBufferCreate(v7, blockBufferOut, 1u, 0, 0, v6, 1, 1, &lhs, 1, &sampleSizeArray, &v25);
  v13 = v25;
  if ((_DWORD)v2)
  {
    if (!v25)
      goto LABEL_11;
    CFRelease(v25);
    goto LABEL_24;
  }
  v25 = 0;
LABEL_11:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (!(_DWORD)v2)
  {
    v14 = (*(uint64_t (**)(CMSampleBufferRef, _QWORD))(a1 + 144))(v13, *(_QWORD *)(a1 + 152));
    if ((_DWORD)v14)
    {
      v2 = v14;
      if (!v13)
        return v2;
      goto LABEL_20;
    }
    v15 = MEMORY[0x1E0CA2E40];
    v16 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *v4 = *MEMORY[0x1E0CA2E40];
    v4[1] = v16;
    v4[2] = *(_OWORD *)(v15 + 32);
    v17 = *(const void **)(a1 + 88);
    if (v17)
    {
      CFRelease(v17);
      v2 = 0;
      *(_QWORD *)(a1 + 88) = 0;
      if (!v13)
        return v2;
      goto LABEL_20;
    }
    v2 = 0;
  }
  if (v13)
LABEL_20:
    CFRelease(v13);
  return v2;
}

void clcpccv_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCEA608DataGeneratorRelease(*(void **)(DerivedStorage + 8));
  v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
    CFRelease(v1);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *clcpccv_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCLCPCaptionConversionValidator %p>"), a1);
  return Mutable;
}

uint64_t clcpccv_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  __int128 v9;
  uint64_t TimeLineRange;
  CMTimeRange v12;
  CMTimeRange v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!CFEqual(CFSTR("TimeRange"), a2))
    return 4294954512;
  v9 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v13.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v13.start.epoch = v9;
  *(_OWORD *)&v13.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  TimeLineRange = FigCEA608DataGeneratorGetTimeLineRange(*(_QWORD *)(v8 + 8), &v13);
  if (!(_DWORD)TimeLineRange)
  {
    v12 = v13;
    *a4 = CMTimeRangeCopyAsDictionary(&v12, a3);
  }
  return TimeLineRange;
}

uint64_t clcpccv_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  uint64_t v8;
  CMTimeRange v10;
  CMTimeRange v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!CFEqual(CFSTR("TimeRange"), a2))
    return 4294954512;
  if (!a3)
    return FigSignalErrorAt();
  v7 = CFGetTypeID(a3);
  if (v7 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  memset(&v11, 0, sizeof(v11));
  CMTimeRangeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
  if ((v11.start.flags & 1) == 0
    || (v11.duration.flags & 1) == 0
    || v11.duration.epoch
    || v11.duration.value < 0
    || *(_DWORD *)(v6 + 16) == 1)
  {
    return FigSignalErrorAt();
  }
  v8 = *(_QWORD *)(v6 + 8);
  v10 = v11;
  return FigCEA608DataGeneratorSetTimeLineRange(v8, (__int128 *)&v10.start.value);
}

uint64_t clcpccv_AppendAndValidateCaptionData(uint64_t a1, const void *a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const void *v13;
  __CFArray *Mutable;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CMTimeRange v20;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange range2;
  CMTimeRange range1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if ((*((_BYTE *)a3 + 12) & 1) == 0)
    return FigSignalErrorAt();
  if ((*((_BYTE *)a3 + 36) & 1) == 0)
    return FigSignalErrorAt();
  if (*((_QWORD *)a3 + 5))
    return FigSignalErrorAt();
  if ((*((_QWORD *)a3 + 3) & 0x8000000000000000) != 0)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 16) == 2)
    return FigSignalErrorAt();
  *(_OWORD *)&v20.start.value = *a3;
  *(_OWORD *)&v20.start.epoch = a3[1];
  *(_OWORD *)&v20.duration.timescale = a3[2];
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&range1.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&range1.start.epoch = v8;
  *(_OWORD *)&range1.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  result = FigCEA608DataGeneratorGetTimeLineRange(*(_QWORD *)(DerivedStorage + 8), &range1);
  if (!(_DWORD)result)
  {
    memset(&range2, 0, sizeof(range2));
    range = range1;
    otherRange = v20;
    CMTimeRangeGetIntersection(&range2, &range, &otherRange);
    v18 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
    v19 = *MEMORY[0x1E0CA2E50];
    *(_OWORD *)&range.start.value = *MEMORY[0x1E0CA2E50];
    *(_OWORD *)&range.start.epoch = v18;
    v17 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
    *(_OWORD *)&range.duration.timescale = v17;
    otherRange = range2;
    if (CMTimeRangeEqual(&range, &otherRange))
    {
LABEL_19:
      result = 0;
      ++*(_QWORD *)(v7 + 24);
      *(_DWORD *)(v7 + 16) = 1;
      return result;
    }
    v9 = *(_OWORD *)(v7 + 56);
    *(_OWORD *)&range1.start.value = *(_OWORD *)(v7 + 40);
    *(_OWORD *)&range1.start.epoch = v9;
    *(_OWORD *)&range1.duration.timescale = *(_OWORD *)(v7 + 72);
    v10 = a3[1];
    *(_OWORD *)&range2.start.value = *a3;
    *(_OWORD *)&range2.start.epoch = v10;
    *(_OWORD *)&range2.duration.timescale = a3[2];
    if (CMTimeRangeEqual(&range1, &range2))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 32), a2);
      ++*(_QWORD *)(v7 + 96);
      goto LABEL_19;
    }
    v11 = *(_OWORD *)(v7 + 56);
    *(_OWORD *)&range2.start.value = *(_OWORD *)(v7 + 40);
    *(_OWORD *)&range2.start.epoch = v11;
    *(_OWORD *)&range2.duration.timescale = *(_OWORD *)(v7 + 72);
    memset(&range1, 0, sizeof(range1));
    v12 = a3[1];
    *(_OWORD *)&range.start.value = *a3;
    *(_OWORD *)&range.start.epoch = v12;
    *(_OWORD *)&range.duration.timescale = a3[2];
    CMTimeRangeGetIntersection(&range1, &range2, &range);
    *(_OWORD *)&range2.start.value = v19;
    *(_OWORD *)&range2.start.epoch = v18;
    *(_OWORD *)&range2.duration.timescale = v17;
    range = range1;
    if (!CMTimeRangeEqual(&range2, &range))
    {
      *(_OWORD *)&range.start.value = *(_OWORD *)(v7 + 64);
      range.start.epoch = *(_QWORD *)(v7 + 80);
      otherRange.start = range1.duration;
      CMTimeSubtract(&range2.start, &range.start, &otherRange.start);
      *(_OWORD *)(v7 + 64) = *(_OWORD *)&range2.start.value;
      *(_QWORD *)(v7 + 80) = range2.start.epoch;
    }
    result = cclcpccvAppendCaptionDataWithSameTimeRange(v7);
    if (!(_DWORD)result)
    {
      v13 = *(const void **)(v7 + 32);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(v7 + 32) = 0;
      }
      Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)v7, 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)(v7 + 32) = Mutable;
      if (!Mutable)
        return FigSignalErrorAt();
      CFArrayAppendValue(Mutable, a2);
      v15 = *a3;
      v16 = a3[2];
      *(_OWORD *)(v7 + 56) = a3[1];
      *(_OWORD *)(v7 + 72) = v16;
      *(_OWORD *)(v7 + 40) = v15;
      *(_QWORD *)(v7 + 88) = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 96) = 1;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t clcpccv_Finish()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = cclcpccvAppendCaptionDataWithSameTimeRange(DerivedStorage);
  if (!(_DWORD)result)
  {
    result = FigCEA608DataGeneratorFinish(*(_QWORD *)(DerivedStorage + 8));
    if (!(_DWORD)result)
      *(_DWORD *)(DerivedStorage + 16) = 2;
  }
  return result;
}

uint64_t cclcpccvAppendCaptionDataWithSameTimeRange(uint64_t a1)
{
  const __CFArray *v1;
  __int128 v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  int v7;
  const void *ValueAtIndex;
  unsigned int v9;
  uint64_t v10;
  const __CFArray *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t FigCEA608DataGeneratorClosedCaptionMode;
  uint64_t v15;
  uint64_t v16;
  __CFAttributedString *v17;
  uint64_t v18;
  __int128 v19;
  CMTimeEpoch v20;
  const __CFAllocator *v21;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v23;
  uint64_t v24;
  CFMutableDictionaryRef v25;
  CFMutableDictionaryRef v26;
  uint64_t v27;
  CFMutableDictionaryRef v28;
  uint64_t v29;
  uint64_t v32;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora[2];
  CMTime v35;
  CMTime time2;
  CMTime v37;
  CMTime v38;
  _BYTE time1[32];
  __int128 v40;
  int v41;
  __CFAttributedString *v42;
  const __CFAllocator **v43;
  CFTypeRef v44;
  CFTypeRef v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v32 = *(_QWORD *)(a1 + 8);
  allocator = *(const __CFAllocator **)a1;
  v1 = *(const __CFArray **)(a1 + 32);
  v2 = *(_OWORD *)(a1 + 56);
  v46 = *(_OWORD *)(a1 + 40);
  v47 = v2;
  v48 = *(_OWORD *)(a1 + 72);
  if (!v1)
  {
    v44 = 0;
    v45 = 0;
    v43 = 0;
    goto LABEL_25;
  }
  Count = CFArrayGetCount(v1);
  v44 = 0;
  v45 = 0;
  v42 = 0;
  v43 = 0;
  if (!Count)
  {
LABEL_25:
    FigCEA608DataGeneratorCaptionInfoRelease(0);
    v18 = 0;
    goto LABEL_46;
  }
  v4 = Count;
  if (Count < 1)
  {
    v7 = 0;
LABEL_27:
    v19 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v38.value = v19;
    v20 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v38.epoch = v20;
    *(_OWORD *)&v37.value = v19;
    v37.epoch = v20;
    *(_OWORD *)allocatora = v19;
    if (!v7
      || (v10 = FigCEA608DataGeneratorEndCaption(v32, &v38, &v37, 0), v19 = *(_OWORD *)allocatora, !(_DWORD)v10))
    {
      *(CMTime *)time1 = v38;
      *(_OWORD *)&time2.value = v19;
      time2.epoch = v20;
      if (!CMTimeCompare((CMTime *)time1, &time2)
        && (*(CMTime *)time1 = v37,
            *(_OWORD *)&time2.value = *(_OWORD *)allocatora,
            time2.epoch = v20,
            !CMTimeCompare((CMTime *)time1, &time2))
        || (time2 = v38, v35 = v37, !*(_QWORD *)(a1 + 104)))
      {
        v18 = 0;
        goto LABEL_45;
      }
      v21 = *(const __CFAllocator **)a1;
      Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v23 = Mutable;
        v24 = FigCFDictionarySetInt32();
        if (!(_DWORD)v24)
        {
          v25 = CFDictionaryCreateMutable(v21, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v25)
          {
            v26 = v25;
            v27 = FigCFDictionarySetCFIndex();
            if (!(_DWORD)v27)
            {
              v27 = FigCFDictionarySetCFIndex();
              if (!(_DWORD)v27)
              {
                CFDictionarySetValue(v23, CFSTR("CaptionRange"), v26);
                v28 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v28)
                {
                  v29 = FigCFDictionarySetInt32();
                  if ((_DWORD)v29
                    || (*(CMTime *)time1 = time2, v29 = FigCFDictionarySetCMTime(), (_DWORD)v29)
                    || (*(CMTime *)time1 = v35, v29 = FigCFDictionarySetCMTime(), (_DWORD)v29))
                  {
                    v18 = v29;
                    goto LABEL_42;
                  }
LABEL_41:
                  CFDictionarySetValue(v23, CFSTR("Adjustment"), v28);
                  v18 = (*(uint64_t (**)(__CFDictionary *, _QWORD))(a1 + 104))(v23, *(_QWORD *)(a1 + 112));
                  if (!v28)
                  {
LABEL_43:
                    CFRelease(v26);
LABEL_44:
                    CFRelease(v23);
LABEL_45:
                    FigCEA608DataGeneratorCaptionInfoRelease(v43);
                    goto LABEL_46;
                  }
LABEL_42:
                  CFRelease(v28);
                  goto LABEL_43;
                }
                v27 = FigSignalErrorAt();
                if (!(_DWORD)v27)
                  goto LABEL_41;
              }
            }
            v18 = v27;
            goto LABEL_43;
          }
          v24 = FigSignalErrorAt();
        }
        v18 = v24;
        goto LABEL_44;
      }
LABEL_54:
      v10 = FigSignalErrorAt();
    }
LABEL_55:
    v18 = v10;
    goto LABEL_45;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v1, v5);
    v9 = clcpcgctsbDoesCaptioDataHaveText((uint64_t)ValueAtIndex);
    LODWORD(time2.value) = 0;
    LODWORD(v35.value) = 0;
    v41 = 0;
    if (v9)
      break;
    v15 = v6;
LABEL_22:
    ++v5;
    v6 = v15;
    if (v4 == v5)
      goto LABEL_27;
  }
  v10 = clcpcgctsbCopyCaptionAnimationAndRegionInformation((uint64_t)ValueAtIndex, (uint64_t)allocator, &v45, &v44, &time2, &v35, &v41);
  if ((_DWORD)v10)
    goto LABEL_55;
  v11 = v1;
  v13 = v44;
  v12 = v45;
  FigCEA608DataGeneratorClosedCaptionMode = clcpcgctsbGetFigCEA608DataGeneratorClosedCaptionMode();
  v15 = FigCEA608DataGeneratorClosedCaptionMode;
  if ((_DWORD)v6 && (_DWORD)v6 != (_DWORD)FigCEA608DataGeneratorClosedCaptionMode)
    goto LABEL_54;
  if (!v7)
  {
    *(_OWORD *)time1 = v46;
    *(_OWORD *)&time1[16] = v47;
    v40 = v48;
    v10 = FigCEA608DataGeneratorCaptionInfoCreate(FigCEA608DataGeneratorClosedCaptionMode, v41, (__int128 *)time1, allocator, &v43);
    if ((_DWORD)v10)
      goto LABEL_55;
    *(_OWORD *)time1 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)&time1[16] = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v10 = FigCEA608DataGeneratorBeginCaption(v32, (__int128 *)time1, 0, (uint64_t)v43);
    if ((_DWORD)v10)
      goto LABEL_55;
  }
  v16 = clcpcgctsbCreateCEA608DataGeneratorAttributedString((uint64_t)ValueAtIndex, allocator, &v42);
  v17 = v42;
  if (!(_DWORD)v16)
  {
    v16 = FigCEA608DataGeneratorAddCaptionLine(v32, time2.value, v35.value, v42);
    if (!(_DWORD)v16)
    {
      if (v17)
      {
        CFRelease(v17);
        v42 = 0;
      }
      if (v13)
      {
        CFRelease(v13);
        v44 = 0;
      }
      if (v12)
      {
        CFRelease(v12);
        v45 = 0;
      }
      v7 = 1;
      v1 = v11;
      goto LABEL_22;
    }
  }
  v18 = v16;
  FigCEA608DataGeneratorCaptionInfoRelease(v43);
  if (v17)
    CFRelease(v17);
LABEL_46:
  if (v44)
    CFRelease(v44);
  if (v45)
    CFRelease(v45);
  return v18;
}

uint64_t FigCaptionRendererNodeProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererNodeProtocolGetProtocolID_sRegisterFigCaptionRendererNodeProtocolTypeOnce, RegisterFigCaptionRendererNodeProtocolType);
  return sFigCaptionRendererNodeProtocolID;
}

uint64_t RegisterFigCaptionRendererNodeProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t RTMStartGeneralRecording(int a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = malloc_type_calloc(1uLL, 0x68uLL, 0x1000040ED882C02uLL);
  if (!v4)
    return 4294967188;
  v5 = v4;
  if (a1 && (v6 = TakeGeneralMeasurements((uint64_t)v4), (_DWORD)v6))
  {
    v7 = v6;
    free(v5);
  }
  else
  {
    GetElapsedTime(v5 + 2);
    v7 = 0;
    *a2 = v5;
  }
  return v7;
}

uint64_t TakeGeneralMeasurements(uint64_t a1)
{
  unsigned int *v2;
  task_name_t v3;
  malloc_zone_t *v4;
  uint64_t (*calloc)(void);
  void (__cdecl *free)(_malloc_zone_t *, void *);
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  __int128 v16;
  vm_address_t v17;

  *(_OWORD *)task_info_out = 0u;
  v16 = 0u;
  v2 = (unsigned int *)MEMORY[0x1E0C83DA0];
  v3 = *MEMORY[0x1E0C83DA0];
  if (!gMallocInst_0)
  {
    v4 = malloc_default_zone();
    calloc = (uint64_t (*)(void))v4->calloc;
    gMallocInst_0 = (uint64_t (*)(void))v4->malloc;
    gMallocInst_1 = calloc;
    free = v4->free;
    gMallocInst_2 = (uint64_t (*)(void))v4->valloc;
    gMallocInst_3 = (uint64_t (*)(_QWORD, _QWORD))free;
    gMallocInst_4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v4->realloc;
    v4->malloc = (void *(__cdecl *)(_malloc_zone_t *, size_t))instrum_malloc;
    v4->calloc = (void *(__cdecl *)(_malloc_zone_t *, size_t, size_t))instrum_calloc;
    v4->valloc = (void *(__cdecl *)(_malloc_zone_t *, size_t))instrum_valloc;
    v4->free = (void (__cdecl *)(_malloc_zone_t *, void *))instrum_free;
    v4->realloc = (void *(__cdecl *)(_malloc_zone_t *, void *, size_t))instrum_realloc;
  }
  task_info_outCnt = 8;
  result = task_info(v3, 1u, task_info_out, &task_info_outCnt);
  if (!(_DWORD)result)
  {
    v8 = *(_QWORD *)task_info_out;
    v9 = dword_1EE29F3A4;
    if (!dword_1EE29F3A4)
    {
      mach_timebase_info((mach_timebase_info_t)&AbsoluteToMicroseconds_sTimebaseInfo);
      v9 = dword_1EE29F3A4;
    }
    v10 = AbsoluteToMicroseconds_sTimebaseInfo;
    v11 = v9;
    *(_QWORD *)a1 = v8 * AbsoluteToMicroseconds_sTimebaseInfo / v9 / 1000;
    v12 = *(_QWORD *)&task_info_out[2];
    if (!v9)
    {
      mach_timebase_info((mach_timebase_info_t)&AbsoluteToMicroseconds_sTimebaseInfo);
      v10 = AbsoluteToMicroseconds_sTimebaseInfo;
      v11 = dword_1EE29F3A4;
    }
    *(_QWORD *)(a1 + 8) = v12 * v10 / v11 / 1000;
    GetElapsedTime((_QWORD *)(a1 + 16));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    result = AddTotalForVMObject(*v2, 0, 0, (int64x2_t *)(a1 + 24), &v17);
    if (result <= 1)
    {
      result = 0;
      v13 = gMallocInst_7;
      *(_QWORD *)(a1 + 80) = gMallocInst_5;
      *(_QWORD *)(a1 + 88) = v13;
      *(_QWORD *)(a1 + 96) = gMallocInst_6;
    }
  }
  return result;
}

uint64_t GetElapsedTime(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  result = mach_absolute_time();
  v3 = result;
  v4 = dword_1EE29F3A4;
  if (!dword_1EE29F3A4)
  {
    result = mach_timebase_info((mach_timebase_info_t)&AbsoluteToMicroseconds_sTimebaseInfo);
    v4 = dword_1EE29F3A4;
  }
  v5 = (unsigned __int128)((uint64_t)(v3 * AbsoluteToMicroseconds_sTimebaseInfo)
                         / v4
                         * (__int128)0x20C49BA5E353F7CFLL) >> 64;
  *a1 = (v5 >> 7) + ((unint64_t)v5 >> 63);
  return result;
}

uint64_t RTMCopyGeneralMetrics(int64x2_t *a1, const void *a2, __CFDictionary **a3)
{
  uint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  uint64_t v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  __int128 v21;
  uint64_t v22;

  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = TakeGeneralMeasurements((uint64_t)&v16);
  if ((_DWORD)v6)
    return v6;
  v7 = vsubq_s64(v17, a1[1]);
  v16 = vsubq_s64(v16, *a1);
  v17 = v7;
  v8 = vsubq_s64(v18, a1[2]);
  v9 = vsubq_s64(v19, a1[3]);
  v10 = v22 - a1[6].i64[0];
  *(_QWORD *)&v21 = v21 - a1[5].i64[0];
  v22 = v10;
  v18 = v8;
  v19 = v9;
  v20 = vsubq_s64(v20, a1[4]);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294967188;
  v12 = Mutable;
  if (a2)
    CFDictionarySetValue(Mutable, CFSTR("Label"), a2);
  v13 = FigCFDictionarySetInt64();
  if ((_DWORD)v13
    || (v13 = FigCFDictionarySetInt64(), (_DWORD)v13)
    || (v13 = FigCFDictionarySetInt64(), (_DWORD)v13)
    || (v13 = FigCFDictionarySetInt64(), (_DWORD)v13)
    || (v13 = FigCFDictionarySetInt64(), (_DWORD)v13)
    || (v13 = FigCFDictionarySetInt64(), (_DWORD)v13)
    || (v13 = FigCFDictionarySetInt64(), (_DWORD)v13)
    || (v13 = FigCFDictionarySetInt64(), (_DWORD)v13))
  {
    v14 = v13;
    goto LABEL_17;
  }
  v14 = FigCFDictionarySetInt64();
  if ((_DWORD)v14)
  {
LABEL_17:
    CFRelease(v12);
    return v14;
  }
  *a3 = v12;
  return v14;
}

uint64_t RTMWriteResultsToFile(CFPropertyListRef propertyList, FILE *a2)
{
  const __CFData *Data;
  const __CFData *v4;
  size_t Length;
  const UInt8 *BytePtr;
  char __str[11];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Data = CFPropertyListCreateData(0, propertyList, kCFPropertyListXMLFormat_v1_0, 0, 0);
  if (!Data)
    return 4294967188;
  v4 = Data;
  Length = CFDataGetLength(Data);
  snprintf(__str, 0xAuLL, "0x%8.8lx", Length);
  fwrite(__str, 0xAuLL, 1uLL, a2);
  BytePtr = CFDataGetBytePtr(v4);
  fwrite(BytePtr, Length, 1uLL, a2);
  CFRelease(v4);
  return 0;
}

uint64_t RTMReadResultsFromFile(FILE *a1, _QWORD *a2)
{
  uint64_t v4;
  char v5;
  int v6;
  int64_t v7;
  CFIndex v8;
  UInt8 *v9;
  UInt8 *v10;
  const __CFData *v11;
  const __CFData *v12;
  CFPropertyListRef v13;
  uint64_t v14;
  char __ptr[11];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0C80978];
  do
  {
    while (1)
    {
      v5 = getc(a1);
      v6 = v5;
      if (v5 < 0)
        break;
      if ((*(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000) == 0)
        goto LABEL_6;
    }
  }
  while (__maskrune(v5, 0x4000uLL));
LABEL_6:
  ungetc(v6, a1);
  if (fread(__ptr, 1uLL, 0xAuLL, a1) != 10)
    return 4294967090;
  __ptr[10] = 0;
  v7 = strtol(__ptr, 0, 0);
  if (v7 >= 0x10000)
    return 4294967090;
  v8 = v7;
  v9 = (UInt8 *)malloc_type_malloc(v7, 0x7AEB3013uLL);
  if (!v9)
    return 4294967188;
  v10 = v9;
  if (fread(v9, 1uLL, v8, a1) == v8)
  {
    v11 = CFDataCreateWithBytesNoCopy(0, v10, v8, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v11)
    {
      v12 = v11;
      v13 = CFPropertyListCreateWithData(0, v11, 0, 0, 0);
      *a2 = v13;
      if (v13)
        v14 = 0;
      else
        v14 = 4294967090;
      CFRelease(v12);
    }
    else
    {
      v14 = 4294967188;
    }
  }
  else
  {
    v14 = 4294967090;
  }
  free(v10);
  return v14;
}

uint64_t instrum_malloc(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = gMallocInst_0();
  if (result)
  {
    gMallocInst_5 += a2;
    if (gMallocInst_7 < (unint64_t)gMallocInst_5)
      gMallocInst_7 = gMallocInst_5;
    gMallocInst_6 += a2;
  }
  return result;
}

uint64_t instrum_calloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;

  result = gMallocInst_1();
  if (result)
  {
    v6 = gMallocInst_5 + a3 * a2;
    gMallocInst_5 = v6;
    if (gMallocInst_7 < v6)
      gMallocInst_7 = v6;
    gMallocInst_6 += a3 * a2;
  }
  return result;
}

uint64_t instrum_valloc(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = gMallocInst_2();
  if (result)
  {
    gMallocInst_5 += a2;
    if (gMallocInst_7 < (unint64_t)gMallocInst_5)
      gMallocInst_7 = gMallocInst_5;
    gMallocInst_6 += a2;
  }
  return result;
}

uint64_t instrum_free(uint64_t a1, void *ptr)
{
  size_t v4;
  uint64_t v5;

  if (ptr)
  {
    v4 = malloc_size(ptr);
    v5 = gMallocInst_5 - v4;
    if (gMallocInst_5 < v4)
      v5 = 0;
    gMallocInst_5 = v5;
  }
  return gMallocInst_3(a1, ptr);
}

uint64_t instrum_realloc(uint64_t a1, void *ptr, uint64_t a3)
{
  size_t v6;
  uint64_t result;
  unint64_t v8;

  if (ptr)
    v6 = malloc_size(ptr);
  else
    v6 = 0;
  result = gMallocInst_4(a1, ptr, a3);
  if (result)
  {
    v8 = a3 - v6 + gMallocInst_5;
    if (gMallocInst_5 + a3 <= v6)
      v8 = 0;
    gMallocInst_5 = v8;
    if (gMallocInst_7 < v8)
      gMallocInst_7 = v8;
    gMallocInst_6 += a3;
  }
  return result;
}

uint64_t AddTotalForVMObject(uint64_t a1, vm_address_t a2, natural_t a3, int64x2_t *a4, vm_address_t *a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  vm_size_t v13;
  int64x2_t v14;
  uint64_t v15;
  vm_size_t v16;
  uint64_t v17;
  int64x2_t v19;
  vm_address_t address;
  vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[4];
  __int128 v24;
  __int128 v25;
  _DWORD v26[7];
  natural_t nesting_depth;

  nesting_depth = a3;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  *(_OWORD *)info = 0u;
  v24 = 0u;
  infoCnt = 19;
  address = a2;
  size = 0;
  v19 = vdupq_n_s64(1uLL);
  v9 = (uint64_t *)MEMORY[0x1E0C85AD8];
  while (1)
  {
    v10 = vm_region_recurse_64(a1, &address, &size, &nesting_depth, info, &infoCnt);
    if ((_DWORD)v10)
      break;
    if (nesting_depth < a3)
    {
      v11 = 0;
      *a5 = address;
      return v11;
    }
    if (v26[0])
    {
      v11 = AddTotalForVMObject(a1, address, nesting_depth + 1, a4, &address);
      if ((_DWORD)v11)
        return v11;
    }
    else
    {
      v12 = HIBYTE(v25);
      v13 = size;
      if (HIBYTE(v25) == 3)
        goto LABEL_15;
      v14.i64[1] = v19.i64[1];
      v14.i64[0] = size;
      *a4 = vaddq_s64(*a4, v14);
      v15 = *v9;
      a4[1].i64[0] += *v9 * DWORD2(v24);
      if ((v12 - 4) < 2 || v12 == 1)
      {
        v16 = v15 * HIDWORD(v24);
        v17 = a4[2].i64[0] + v16;
        a4[1].i64[1] = a4[1].i64[1] + v13 - v16;
        a4[2].i64[0] = v17;
        if ((info[0] & 2) == 0)
          goto LABEL_15;
LABEL_14:
        a4[2].i64[1] += v16;
        goto LABEL_15;
      }
      if (v12 == 2)
      {
        a4[2].i64[0] += v13;
        v16 = v13;
        if ((info[0] & 2) != 0)
          goto LABEL_14;
      }
LABEL_15:
      address += v13;
    }
  }
  v11 = v10;
  if ((_DWORD)v10 != 1)
    FigSignalErrorAt();
  return v11;
}

uint64_t FigTextSampleBufferCopyText(opaqueCMSampleBuffer *a1, CFStringRef *a2)
{
  const opaqueCMFormatDescription *FormatDescription;
  CMBlockBufferRef DataBuffer;
  uint64_t DataPointer;
  OpaqueCMBlockBuffer *v7;
  FourCharCode MediaSubType;
  CFStringEncoding v9;
  size_t v10;
  UInt8 *v12;
  UInt8 *v13;
  UInt8 *v14;
  CFStringRef v15;
  UInt8 *bytes;
  _BYTE temporaryBlock[4];

  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  DataBuffer = CMSampleBufferGetDataBuffer(a1);
  DataPointer = 0;
  if (FormatDescription)
  {
    v7 = DataBuffer;
    if (DataBuffer)
    {
      MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
      if (MediaSubType != 1954034535 && MediaSubType != 1952807028)
        return FigSignalErrorAt();
      bytes = 0;
      DataPointer = CMBlockBufferAccessDataBytes(v7, 0, 2uLL, temporaryBlock, (char **)&bytes);
      if (!(_DWORD)DataPointer)
      {
        v9 = 134217984;
        v10 = __rev16(*(unsigned __int16 *)bytes);
        if (v10 >= 3
          && !CMBlockBufferAccessDataBytes(v7, 2uLL, 2uLL, temporaryBlock, (char **)&bytes)
          && *bytes == 254)
        {
          if (bytes[1] == 255)
            v9 = 256;
          else
            v9 = 134217984;
        }
        if (CMBlockBufferGetDataLength(v7) < (v10 + 2))
          return FigSignalErrorAt();
        if (CMBlockBufferIsRangeContiguous(v7, 2uLL, v10))
        {
          DataPointer = CMBlockBufferGetDataPointer(v7, 2uLL, 0, 0, (char **)&bytes);
          if ((_DWORD)DataPointer)
            return DataPointer;
          v12 = 0;
          v13 = bytes;
        }
        else
        {
          v14 = (UInt8 *)malloc_type_malloc(v10, 0xF89627ACuLL);
          if (!v14)
            return FigSignalErrorAt();
          v13 = v14;
          DataPointer = CMBlockBufferCopyDataBytes(v7, 2uLL, v10, v14);
          bytes = v13;
          v12 = v13;
        }
        v15 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13, v10, v9, 1u);
        if (a2)
        {
          *a2 = v15;
        }
        else if (v15)
        {
          CFRelease(v15);
        }
        if (v12)
          free(v12);
      }
    }
  }
  return DataPointer;
}

uint64_t TMCCreateWithQueueAndOptions(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  void (*v16)(_QWORD);
  __int128 v18;
  uint64_t v19;
  CFTypeRef cf;

  cf = 0;
  v13 = FigSampleBufferProviderCreateForBufferQueue(*MEMORY[0x1E0C9AE00], a2, &cf);
  v14 = v13;
  v15 = v13;
  if (!(_DWORD)v13)
  {
    v18 = *(_OWORD *)a3;
    v19 = *(_QWORD *)(a3 + 16);
    v15 = TMCCreateWithCallbacksAndOptions(a1, cf, &v18, (__int128 *)a4, a5, a6, a7);
  }
  if (cf)
    CFRelease(cf);
  if (a4)
  {
    if (v14)
    {
      v16 = *(void (**)(_QWORD))(a4 + 24);
      if (v16)
        v16(*(_QWORD *)(a4 + 8));
    }
  }
  return v15;
}

uint64_t TMCCreateWithCallbacksAndOptions(uint64_t a1, const void *a2, __int128 *a3, __int128 *a4, const void *a5, uint64_t a6, uint64_t *a7)
{
  BOOL v9;
  uint64_t Instance;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(_QWORD);
  char __str[16];
  __int128 v27;
  __int128 v28;
  _WORD v29[11];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v28 = 0u;
  memset(v29, 0, sizeof(v29));
  *(_OWORD *)__str = 0u;
  v27 = 0u;
  if (!a2)
    goto LABEL_19;
  if (a4)
  {
    if (*((_QWORD *)a4 + 2))
      v9 = a5 == 0;
    else
      v9 = 1;
    if (!v9 && (*((_DWORD *)a3 + 3) & 0x1D) == 1 && a7 != 0)
    {
      MEMORY[0x19402F294](&sRegisterTMCTypeOnce, RegisterTMCType);
      Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        v15 = Instance;
        v16 = *a4;
        v17 = a4[1];
        *(_QWORD *)(Instance + 88) = *((_QWORD *)a4 + 4);
        *(_OWORD *)(Instance + 72) = v17;
        *(_OWORD *)(Instance + 56) = v16;
        v18 = *a3;
        *(_QWORD *)(Instance + 112) = *((_QWORD *)a3 + 2);
        *(_OWORD *)(Instance + 96) = v18;
        *(_QWORD *)(Instance + 120) = CFRetain(a5);
        v19 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v15 + 144) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v15 + 160) = *(_QWORD *)(v19 + 16);
        FigCFDictionaryGetBooleanIfPresent();
        *(_BYTE *)(v15 + 188) = 0;
        snprintf(__str, 0x46uLL, "com.apple.coremedia.textmediaconverter.%p", (const void *)v15);
        *(_QWORD *)(v15 + 24) = dispatch_queue_create(__str, 0);
        snprintf(__str, 0x46uLL, "com.apple.coremedia.textmediaconverter.jumpseed.%p", (const void *)v15);
        *(_QWORD *)(v15 + 32) = dispatch_queue_create(__str, 0);
        snprintf(__str, 0x46uLL, "com.apple.coremedia.textmediaconverter.callback.%p", (const void *)v15);
        *(_QWORD *)(v15 + 40) = dispatch_queue_create(__str, 0);
        *(_QWORD *)(v15 + 168) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v15 + 24));
        v20 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
        dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v15 + 168), (dispatch_function_t)tmcSendingTimerCanceled);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v15 + 168), (dispatch_function_t)tmcSendingTimerFired);
        dispatch_set_context(*(dispatch_object_t *)(v15 + 168), v20);
        dispatch_source_set_timer(*(dispatch_source_t *)(v15 + 168), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(_QWORD *)(v15 + 176) = voucher_copy();
        dispatch_resume(*(dispatch_object_t *)(v15 + 168));
        v21 = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v15 + 120), *(dispatch_source_t *)(v15 + 168));
        if ((_DWORD)v21
          || (CMNotificationCenterGetDefaultLocalCenter(), v21 = FigNotificationCenterAddWeakListener(), (_DWORD)v21)
          || (*(_QWORD *)(v15 + 48) = CFRetain(a2),
              CMNotificationCenterGetDefaultLocalCenter(),
              v21 = FigNotificationCenterAddWeakListener(),
              (_DWORD)v21)
          || (CMNotificationCenterGetDefaultLocalCenter(), v21 = FigNotificationCenterAddWeakListener(), (_DWORD)v21))
        {
          v22 = v21;
        }
        else
        {
          CMNotificationCenterGetDefaultLocalCenter();
          v22 = FigNotificationCenterAddWeakListener();
          if (!(_DWORD)v22)
          {
            *a7 = v15;
            return v22;
          }
        }
        CFRelease((CFTypeRef)v15);
        return v22;
      }
    }
LABEL_19:
    v24 = FigSignalErrorAt();
    v22 = v24;
    if (a4)
    {
      if ((_DWORD)v24)
      {
        v25 = (void (*)(_QWORD))*((_QWORD *)a4 + 3);
        if (v25)
          v25(*((_QWORD *)a4 + 1));
      }
    }
    return v22;
  }
  return FigSignalErrorAt();
}

void TMCInvalidate(dispatch_queue_t *a1)
{
  if (a1)
  {
    tmcInvalidateInternal((uint64_t)a1);
    CFRetain(a1);
    dispatch_async_f(a1[3], a1, (dispatch_function_t)tmcReleaseObjectsAndConsumeTMC);
  }
}

void tmcInvalidateInternal(uint64_t a1)
{
  uint64_t FigBaseObject;
  uint64_t v3;
  void (*v4)(uint64_t);
  NSObject *v5;

  if (!*(_BYTE *)(a1 + 16))
  {
    *(_BYTE *)(a1 + 16) = 1;
    if (*(_QWORD *)(a1 + 48))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigBaseObject = FigSampleBufferProviderGetFigBaseObject(*(_QWORD *)(a1 + 48));
      if (FigBaseObject)
      {
        v3 = FigBaseObject;
        v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v4)
          v4(v3);
      }
    }
    v5 = *(NSObject **)(a1 + 168);
    if (v5)
    {
      CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 120), v5);
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 168));
    }
    if (*(_QWORD *)(a1 + 120))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
  }
}

void tmcReleaseObjectsAndConsumeTMC(const void *a1)
{
  tmcReleaseObjects((uint64_t)a1);
  CFRelease(a1);
}

uint64_t RegisterTMCType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sTMCID = result;
  return result;
}

uint64_t tmcTimeJumped(int a1, CFTypeRef cf)
{
  uint64_t result;

  if (!*((_BYTE *)cf + 16))
  {
    CFRetain(cf);
    CFGetAllocator(cf);
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

uint64_t tmcInputDataBecameReady(int a1, CFTypeRef cf)
{
  uint64_t result;

  if (!*((_BYTE *)cf + 16))
  {
    CFRetain(cf);
    CFGetAllocator(cf);
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

void tmcInhibitOutputUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  const void **v7;
  const void **v8;
  const void *v9;
  const void *Value;

  if (!*(_BYTE *)(a2 + 16))
  {
    v7 = (const void **)malloc_type_calloc(1uLL, 0x10uLL, 0xE0040E685C293uLL);
    if (v7)
    {
      v8 = v7;
      *v7 = (const void *)a2;
      v9 = (const void *)a2;
      if (!a5
        || (Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA2748]), v8[1] = Value, (v9 = *v8) != 0))
      {
        CFRetain(v9);
        Value = v8[1];
      }
      if (Value)
        CFRetain(Value);
      dispatch_async_f(*(dispatch_queue_t *)(a2 + 32), v8, (dispatch_function_t)tmcInhibitOutputUntilSerialized);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

void tmcResetOutput(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 16))
  {
    FigAtomicIncrement32();
    CFRetain((CFTypeRef)a2);
    dispatch_async_f(*(dispatch_queue_t *)(a2 + 24), (void *)a2, (dispatch_function_t)tmcResetOutputSerialized);
  }
}

uint64_t TMCGetEndPresentationTimeForDecodedSamples(dispatch_queue_t *cf, uint64_t a2)
{
  dispatch_queue_t *v5;
  __int128 v6;
  uint64_t v7;

  v5 = cf;
  v6 = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!a2 || *((_BYTE *)cf + 16))
    return FigSignalErrorAt();
  CFRetain(cf);
  dispatch_sync_f(cf[3], &v5, (dispatch_function_t)tmcSerializedGetEndPresentationTimeForDecodedSamples);
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return 0;
}

void tmcSerializedGetEndPresentationTimeForDecodedSamples(uint64_t a1)
{
  CMSampleBufferRef *v2;
  uint64_t v3;
  opaqueCMSampleBuffer *v4;
  CMTimeFlags flags;
  _OWORD *v6;
  CMTimeEpoch epoch;
  CMTime rhs;
  CMTime lhs;
  CMTime v10;
  CMTimeValue v11;
  CMTimeScale v12;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(CMSampleBufferRef **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(*(_QWORD *)a1 + 144);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = v2[16];
  if (v4)
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v10, v4);
    value = v10.value;
    flags = v10.flags;
    timescale = v10.timescale;
    if ((v10.flags & 0x1D) == 1)
    {
      v6 = (_OWORD *)(a1 + 8);
      epoch = v10.epoch;
      *(_QWORD *)(a1 + 8) = value;
      *(_DWORD *)(a1 + 16) = timescale;
      *(_DWORD *)(a1 + 20) = flags;
      *(_QWORD *)(a1 + 24) = epoch;
      CMSampleBufferGetOutputDuration(&v10, v2[16]);
      v11 = v10.value;
      v12 = v10.timescale;
      if ((v10.flags & 0x1D) == 1)
      {
        *(_OWORD *)&lhs.value = *v6;
        lhs.epoch = *(_QWORD *)(a1 + 24);
        rhs.value = v11;
        rhs.timescale = v12;
        rhs.flags = v10.flags;
        rhs.epoch = v10.epoch;
        CMTimeAdd(&v10, &lhs, &rhs);
        *v6 = *(_OWORD *)&v10.value;
        *(_QWORD *)(a1 + 24) = v10.epoch;
      }
    }
  }
  CFRelease(v2);
}

void tmcReleaseObjects(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void (__cdecl *v9)(void *);

  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v3 = *(const void **)(a1 + 120);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v4 = *(const void **)(a1 + 128);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v5 = *(const void **)(a1 + 136);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v6 = *(NSObject **)(a1 + 168);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v7 = *(void **)(a1 + 176);
  if (v7)
  {
    os_release(v7);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v8 = *(NSObject **)(a1 + 40);
  if (v8)
  {
    v9 = *(void (__cdecl **)(void *))(a1 + 80);
    if (v9)
    {
      dispatch_async_f(v8, *(void **)(a1 + 64), v9);
      v8 = *(NSObject **)(a1 + 40);
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (!v8)
        return;
    }
    else
    {
      *(_QWORD *)(a1 + 72) = 0;
    }
    dispatch_release(v8);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

double tmcInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void tmcFinalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  tmcInvalidateInternal(a1);
  tmcReleaseObjects(a1);
  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(NSObject **)(a1 + 24);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

CFTypeRef tmcCopyFormattingDesc(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return CFRetain(CFSTR("[TMC (invalidated)]"));
  else
    return CFRetain(CFSTR("[TMC]"));
}

__CFString *tmcCopyDebugDesc(_BYTE *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  const char *v5;
  CFAllocatorRef v6;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  if (a1[16])
    v5 = " (invalidated)";
  else
    v5 = "";
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("TMC %p retainCount: %d%s allocator: %p\n"), a1, v4, v5, v6);
  return Mutable;
}

void tmcSendingTimerCanceled(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void tmcSendingTimerFired()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  const void *v4;
  CMTime rhs;
  CMTime lhs;
  CMTime v7;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = v0;
    os_retain(*(void **)(v0 + 176));
    voucher_adopt();
    if (!*(_BYTE *)(v1 + 16) && *(_QWORD *)(v1 + 128))
    {
      v3 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
      *v3 = CFRetain((CFTypeRef)v1);
      v3[1] = CFRetain(*(CFTypeRef *)(v1 + 128));
      dispatch_async_f(*(dispatch_queue_t *)(v1 + 40), v3, (dispatch_function_t)tmcSendSampleToCallback);
      CMSampleBufferGetOutputPresentationTimeStamp(&v7, *(CMSampleBufferRef *)(v1 + 128));
      *(CMTime *)(v1 + 144) = v7;
      CMSampleBufferGetOutputDuration(&v7, *(CMSampleBufferRef *)(v1 + 128));
      value = v7.value;
      timescale = v7.timescale;
      if ((v7.flags & 0x1D) == 1)
      {
        lhs = *(CMTime *)(v1 + 144);
        rhs.value = value;
        rhs.timescale = timescale;
        rhs.flags = v7.flags;
        rhs.epoch = v7.epoch;
        CMTimeAdd(&v7, &lhs, &rhs);
        *(CMTime *)(v1 + 144) = v7;
      }
      v4 = *(const void **)(v1 + 128);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(v1 + 128) = 0;
      }
    }
    tmcPrepareToSendNextSample(v1);
    CFRelease((CFTypeRef)v1);
    v2 = (void *)voucher_adopt();
    os_release(v2);
  }
}

void tmcPrepareToSendNextSample(uint64_t a1)
{
  const __CFString *v2;
  const __CFString *v3;
  const void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  const void *v7;
  opaqueCMSampleBuffer *v8;
  CMTimeFlags flags;
  opaqueCMSampleBuffer *v10;
  CMTimeEpoch epoch;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const void *v14;
  OpaqueCMTimebase *v15;
  NSObject *v16;
  const __CFString *v17;
  void *key;
  CMTime rhs;
  CMTime lhs;
  CMTime v21;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 16) && FigAtomicCompareAndSwap32() && !*(_QWORD *)(a1 + 128))
  {
    v2 = (const __CFString *)*MEMORY[0x1E0CA26C8];
    v3 = (const __CFString *)*MEMORY[0x1E0CA2678];
    key = (void *)*MEMORY[0x1E0CA25D8];
    v4 = (const void *)*MEMORY[0x1E0C9AE50];
    v17 = (const __CFString *)*MEMORY[0x1E0CA2648];
    while (1)
    {
      do
      {
        v5 = *(_QWORD *)(a1 + 48);
        if (!v5)
          return;
        v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v6)
        {
          *(_QWORD *)(a1 + 128) = 0;
          return;
        }
        v7 = (const void *)v6(v5);
        *(_QWORD *)(a1 + 128) = v7;
        if (!v7)
          return;
        if (CMGetAttachment(v7, v2, 0))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
        dispatch_sync_f(*(dispatch_queue_t *)(a1 + 32), (void *)a1, (dispatch_function_t)tmcHandleIgnoreSamplesUntilThisJumpSeed);
        v8 = *(opaqueCMSampleBuffer **)(a1 + 128);
      }
      while (!v8);
      if (!CMSampleBufferGetDataBuffer(v8)
        && !CMGetAttachment(*(CMAttachmentBearerRef *)(a1 + 128), v3, 0)
        && (!*(_BYTE *)(a1 + 188) || !FigSampleBufferGetCaptionGroup()))
      {
        break;
      }
      CMSampleBufferGetOutputPresentationTimeStamp(&v21, *(CMSampleBufferRef *)(a1 + 128));
      value = v21.value;
      flags = v21.flags;
      timescale = v21.timescale;
      v10 = *(opaqueCMSampleBuffer **)(a1 + 128);
      if ((v21.flags & 0x1D) == 1)
      {
        epoch = v21.epoch;
        if (tmcShouldDisplaySampleImmediately(v10)
          || (SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(a1 + 128), 0)) != 0
          && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) != 0
          && v4 == CFDictionaryGetValue(ValueAtIndex, key)
          || (v14 = *(const void **)(a1 + 128), v4 == CMGetAttachment(v14, v3, 0))
          && v4 == CMGetAttachment(v14, v17, 0))
        {
          if (CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(a1 + 120), *(dispatch_source_t *)(a1 + 168)))
          {
            return;
          }
        }
        else
        {
          memset(&v21, 0, sizeof(v21));
          lhs.value = value;
          lhs.timescale = timescale;
          lhs.flags = flags;
          lhs.epoch = epoch;
          rhs = *(CMTime *)(a1 + 96);
          CMTimeSubtract(&v21, &lhs, &rhs);
          v15 = *(OpaqueCMTimebase **)(a1 + 120);
          v16 = *(NSObject **)(a1 + 168);
          lhs = v21;
          if (CMTimebaseSetTimerDispatchSourceNextFireTime(v15, v16, &lhs, 1u))
            return;
        }
        if (*(_QWORD *)(a1 + 128))
          return;
      }
      else
      {
LABEL_29:
        if (v10)
        {
          CFRelease(v10);
          *(_QWORD *)(a1 + 128) = 0;
        }
      }
    }
    v10 = *(opaqueCMSampleBuffer **)(a1 + 128);
    goto LABEL_29;
  }
}

void tmcSendSampleToCallback(CFTypeRef *a1)
{
  void (**v2)(_QWORD, CFTypeRef);

  v2 = (void (**)(_QWORD, CFTypeRef))*a1;
  if (!*((_BYTE *)*a1 + 16))
  {
    v2[9](v2[8], a1[1]);
    if (*((_BYTE *)v2 + 188))
    {
      if (FigSampleBufferGetCaptionGroup())
        FigCaptionGroupGetSliceCount();
    }
  }
  CFRelease(a1[1]);
  CFRelease(v2);
  free(a1);
}

void tmcHandleIgnoreSamplesUntilThisJumpSeed(uint64_t a1)
{
  CFTypeRef v2;
  const void *v3;
  const void *v4;
  CMTime rhs;
  CMTime lhs;
  CMTime v7;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = CMGetAttachment(*(CMAttachmentBearerRef *)(a1 + 128), (CFStringRef)*MEMORY[0x1E0CA26E0], 0);
    if (FigCFEqual())
    {
      v3 = *(const void **)(a1 + 136);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(a1 + 136) = 0;
      }
    }
    else
    {
      if (!v2)
      {
        CMSampleBufferGetOutputPresentationTimeStamp(&v7, *(CMSampleBufferRef *)(a1 + 128));
        *(CMTime *)(a1 + 144) = v7;
        CMSampleBufferGetOutputDuration(&v7, *(CMSampleBufferRef *)(a1 + 128));
        value = v7.value;
        timescale = v7.timescale;
        if ((v7.flags & 0x1D) == 1)
        {
          lhs = *(CMTime *)(a1 + 144);
          rhs.value = value;
          rhs.timescale = timescale;
          rhs.flags = v7.flags;
          rhs.epoch = v7.epoch;
          CMTimeAdd(&v7, &lhs, &rhs);
          *(CMTime *)(a1 + 144) = v7;
        }
      }
      v4 = *(const void **)(a1 + 128);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(a1 + 128) = 0;
      }
    }
  }
}

const __CFArray *tmcShouldDisplaySampleImmediately(opaqueCMSampleBuffer *a1)
{
  const __CFArray *result;
  const __CFDictionary *ValueAtIndex;

  result = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (result)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(result, 0);
    return (const __CFArray *)(ValueAtIndex
                            && (const void *)*MEMORY[0x1E0C9AE50] == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D0]));
  }
  return result;
}

void tmcDeferredInputDataBecameReady(int a1, _BYTE *cf)
{
  if (!cf[16])
    tmcPrepareToSendNextSample((uint64_t)cf);
  CFRelease(cf);
}

void tmcResetOutputSerialized(_QWORD *cf)
{
  const void *v2;
  uint64_t v3;
  __int128 v4;
  CMTimeEpoch v5;
  OpaqueCMTimebase *v6;
  NSObject *v7;
  void (*v8)(_QWORD);
  CMTime v9;

  if (!*((_BYTE *)cf + 16))
  {
    v2 = (const void *)cf[16];
    if (v2)
    {
      CFRelease(v2);
      cf[16] = 0;
    }
    v3 = MEMORY[0x1E0CA2E18];
    v4 = *MEMORY[0x1E0CA2E18];
    *((_OWORD *)cf + 9) = *MEMORY[0x1E0CA2E18];
    v5 = *(_QWORD *)(v3 + 16);
    cf[20] = v5;
    v6 = (OpaqueCMTimebase *)cf[15];
    v7 = cf[21];
    *(_OWORD *)&v9.value = v4;
    v9.epoch = v5;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v6, v7, &v9, 0);
    v8 = (void (*)(_QWORD))cf[11];
    if (v8)
      v8(cf[8]);
    FigAtomicDecrement32();
    tmcPrepareToSendNextSample((uint64_t)cf);
  }
  CFRelease(cf);
}

void tmcInhibitOutputUntilSerialized(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *a1;
  if (*(_BYTE *)(*a1 + 16))
    goto LABEL_7;
  v3 = *(const void **)(v2 + 136);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(v2 + 136) = 0;
  }
  v4 = (const void *)a1[1];
  if (v4)
    *(_QWORD *)(v2 + 136) = CFRetain(v4);
  CFRetain((CFTypeRef)v2);
  dispatch_async_f(*(dispatch_queue_t *)(v2 + 24), (void *)v2, (dispatch_function_t)tmcPrepareToSendNextSampleAndConsumeTMC);
  v2 = *a1;
  if (*a1)
LABEL_7:
    CFRelease((CFTypeRef)v2);
  v5 = (const void *)a1[1];
  if (v5)
    CFRelease(v5);
  free(a1);
}

void tmcPrepareToSendNextSampleAndConsumeTMC(const void *a1)
{
  tmcPrepareToSendNextSample((uint64_t)a1);
  CFRelease(a1);
}

void tmcDeferredTimeJumped(int a1, CFTypeRef cf)
{
  opaqueCMSampleBuffer *v3;
  CFTypeRef v4;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v7;
  CMTimeEpoch v8;
  double Rate;
  const void *v10;
  CMTime v11;
  CMTime lhs;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTimeValue v16;
  CMTimeScale v17;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(&v15, 0, sizeof(v15));
  memset(&v14, 0, sizeof(v14));
  memset(&v13, 0, sizeof(v13));
  if (*((_BYTE *)cf + 16))
    goto LABEL_2;
  v3 = (opaqueCMSampleBuffer *)*((_QWORD *)cf + 16);
  if (!v3)
    goto LABEL_2;
  if (tmcShouldDisplaySampleImmediately(v3))
    goto LABEL_2;
  v4 = CMGetAttachment(*((CMAttachmentBearerRef *)cf + 16), (CFStringRef)*MEMORY[0x1E0CA2678], 0);
  CMSampleBufferGetOutputPresentationTimeStamp(&lhs, *((CMSampleBufferRef *)cf + 16));
  value = lhs.value;
  flags = lhs.flags;
  timescale = lhs.timescale;
  if ((lhs.flags & 0x1D) != 1)
    goto LABEL_2;
  epoch = lhs.epoch;
  if (!v4
    && (CMSampleBufferGetOutputDuration(&lhs, *((CMSampleBufferRef *)cf + 16)),
        v16 = lhs.value,
        v7 = lhs.flags,
        v17 = lhs.timescale,
        (lhs.flags & 1) != 0))
  {
    v8 = lhs.epoch;
  }
  else
  {
    v16 = *MEMORY[0x1E0CA2E68];
    v7 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
    v17 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  }
  lhs.value = value;
  lhs.timescale = timescale;
  lhs.flags = flags;
  lhs.epoch = epoch;
  v11 = *(CMTime *)((_BYTE *)cf + 4);
  CMTimeSubtract(&v15, &lhs, &v11);
  lhs.value = value;
  lhs.timescale = timescale;
  lhs.flags = flags;
  lhs.epoch = epoch;
  v11.value = v16;
  v11.timescale = v17;
  v11.flags = v7;
  v11.epoch = v8;
  CMTimeAdd(&v14, &lhs, &v11);
  CMTimebaseGetTime(&v13, *((CMTimebaseRef *)cf + 15));
  Rate = CMTimebaseGetRate(*((CMTimebaseRef *)cf + 15));
  lhs = v13;
  v11 = v15;
  if ((CMTimeCompare(&lhs, &v11) & 0x80000000) == 0)
  {
    lhs = v13;
    v11 = v14;
    if (CMTimeCompare(&lhs, &v11) <= 0)
      goto LABEL_18;
  }
  if (Rate > 0.0 && (lhs = v13, v11 = v14, CMTimeCompare(&lhs, &v11) > 0)
    || Rate < 0.0 && (lhs = v13, v11 = v15, CMTimeCompare(&lhs, &v11) < 0))
  {
    if (!v4)
    {
      v10 = (const void *)*((_QWORD *)cf + 16);
      if (v10)
      {
        CFRelease(v10);
        *((_QWORD *)cf + 16) = 0;
      }
    }
LABEL_18:
    if (CMTimebaseSetTimerDispatchSourceToFireImmediately(*((CMTimebaseRef *)cf + 15), *((dispatch_source_t *)cf + 21)))
      FigSignalErrorAt();
  }
LABEL_2:
  CFRelease(cf);
}

uint64_t FigByteStreamServerCreateByteStreamDetails(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  xpc_object_t v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  void (*v15)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  BOOL v16;
  int64_t SInt64;
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  const void *v22;
  uint64_t BlockBuffer;
  uint64_t v24;
  int valuePtr;
  CFTypeRef v27;
  uint64_t value;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef cf;
  CFTypeRef v33;
  CFNumberRef number;

  v33 = 0;
  number = 0;
  v31 = 0;
  cf = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  value = 0;
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    v8(CMBaseObject, *MEMORY[0x1E0CA2098], v6, &v33);
  v9 = CMByteStreamGetCMBaseObject();
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v10)
    v10(v9, *MEMORY[0x1E0CA2078], v6, &cf);
  v11 = CMByteStreamGetCMBaseObject();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
    v12(v11, *MEMORY[0x1E0CA20A0], v6, &v31);
  v13 = CMByteStreamGetCMBaseObject();
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v14)
    v14(v13, *MEMORY[0x1E0CA2070], v6, &v29);
  FigXPCMessageSetCFURL();
  v15 = (void (*)(uint64_t, __CFString *, _QWORD, CFTypeRef *))*MEMORY[0x1E0C9AE50];
  xpc_dictionary_set_BOOL(v5, "Writable", v31 == (CFTypeRef)*MEMORY[0x1E0C9AE50]);
  xpc_dictionary_set_BOOL(v5, "EntireLengthAvailable", cf == v15);
  CMByteStreamGetCMBaseObject();
  FigCRABSGetClassID();
  v16 = CMBaseObjectIsMemberOfClass() != 0;
  xpc_dictionary_set_BOOL(v5, "ReadsMayBlockIndefinitely", v16);
  SInt64 = FigCFNumberGetSInt64();
  xpc_dictionary_set_int64(v5, "EntireLength", SInt64);
  CMByteStreamGetCMBaseObject();
  FigCachedFileByteStreamGetClassID();
  if (CMBaseObjectIsMemberOfClass())
  {
    xpc_dictionary_set_BOOL(v5, "UseFigReadCache", 1);
    v18 = CMByteStreamGetCMBaseObject();
    v19 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v19)
    {
      v19(v18, CFSTR("CFBS_EnableCaching"), v6, &v30);
      v19 = (void (*)(uint64_t, __CFString *, uint64_t, CFTypeRef *))v30;
    }
    xpc_dictionary_set_BOOL(v5, "EnableFigReadCache", v19 == v15);
  }
  v20 = CMByteStreamGetCMBaseObject();
  v21 = *(void (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v21)
  {
    v21(v20, *MEMORY[0x1E0CA2F58], v6, &number);
    if (number)
    {
      valuePtr = -1;
      CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
      xpc_dictionary_set_fd(v5, "FileDescriptor", valuePtr);
      v22 = 0;
      goto LABEL_19;
    }
  }
  v22 = (const void *)FigCopyCommonMemoryPool();
  if (!v22)
  {
    BlockBuffer = FigSignalErrorAt();
LABEL_39:
    v24 = BlockBuffer;
    goto LABEL_21;
  }
  BlockBuffer = FigMemoryPoolCreateBlockBuffer();
  if ((_DWORD)BlockBuffer)
    goto LABEL_39;
  BlockBuffer = FigMemoryOriginSetBlockBufferInXPCMessage();
  if ((_DWORD)BlockBuffer)
    goto LABEL_39;
LABEL_19:
  v24 = FigXPCServerAssociateObjectWithNeighborProcessByPID();
  if (!(_DWORD)v24)
  {
    xpc_dictionary_set_uint64(v5, "ObjectID", value);
    v27 = 0;
    *a4 = v5;
  }
LABEL_21:
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  if (number)
    CFRelease(number);
  if (v22)
    CFRelease(v22);
  if (v27)
    CFRelease(v27);
  if (v33)
    CFRelease(v33);
  FigXPCRelease();
  return v24;
}

void ReadBufferDestructor(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigByteStreamServerStart()
{
  if (FigByteStreamServerStart_sStartByteStreamServerOnce != -1)
    dispatch_once(&FigByteStreamServerStart_sStartByteStreamServerOnce, &__block_literal_global_4);
  return FigByteStreamServerStart_sByteStreamServerStartResult;
}

uint64_t byteStreamServer_HandleMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObjectAndCFTypeRefcon();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t FigByteStreamServerCopyByteStreamForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigSecureStopManagerRemoteCreate(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t uint64;
  uint64_t v6;
  CFTypeRef cf;
  xpc_object_t xdict;
  uint64_t v10;

  xdict = 0;
  v10 = 0;
  cf = 0;
  if (!a2)
    goto LABEL_9;
  *a2 = 0;
  v4 = FigCPERemoteEnsureClientEstablished();
  if ((_DWORD)v4)
    goto LABEL_10;
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4)
    goto LABEL_10;
  v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v4)
    goto LABEL_10;
  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
LABEL_9:
    v4 = FigSignalErrorAt();
LABEL_10:
    v6 = v4;
    goto LABEL_8;
  }
  v6 = fssm_remote_createManagerForID(a1, uint64, &cf);
  if ((_DWORD)v6)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
    cf = 0;
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t fssm_remote_createManagerForID(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  *a3 = 0;
  v3 = FigCPERemoteEnsureClientEstablished();
  if ((_DWORD)v3)
    return v3;
  FigSecureStopManagerGetClassID();
  v4 = CMDerivedObjectCreate();
  if (!(_DWORD)v4)
    return FigSignalErrorAt();
  return v4;
}

uint64_t FigSecureStopManagerRemoteCopyDefaultRuntimeInstance(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;
  xpc_object_t xdict;
  uint64_t v12;

  xdict = 0;
  v12 = 0;
  cf = 0;
  if (!a2)
    goto LABEL_13;
  *a2 = 0;
  v4 = FigCPERemoteEnsureClientEstablished();
  if ((_DWORD)v4)
    goto LABEL_14;
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4)
    goto LABEL_14;
  v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v4)
    goto LABEL_14;
  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
LABEL_13:
    v4 = FigSignalErrorAt();
LABEL_14:
    v7 = v4;
    goto LABEL_10;
  }
  v6 = uint64;
  v7 = FigXPCRemoteClientRetainCopiedObject();
  v8 = cf;
  if ((_DWORD)v7 || !cf && (v7 = fssm_remote_createManagerForID(a1, v6, &cf), v8 = cf, (_DWORD)v7))
  {
    if (v8)
      CFRelease(v8);
  }
  else
  {
    v7 = 0;
    *a2 = v8;
    cf = 0;
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t fssm_remote_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)DerivedStorage && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  return FigXPCRelease();
}

__CFString *fssm_remote_copyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  CFAllocatorRef v5;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSecureStopManager_Remote %p retainCount: %ld allocator: %p, "), a1, v4, v5);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t fssm_remote_initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t ObjectID;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_12:
    v9 = ObjectID;
    goto LABEL_10;
  }
  v7 = DerivedStorage;
  ObjectID = fssm_remote_getObjectID(a1, &v11);
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCMessageSetCFData();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCMessageSetCFURL();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigSandboxRegisterURLWithProcessAndCopyRegistration();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  v9 = FigXPCRemoteClientSendSyncMessage();
  if (!(_DWORD)v9)
    *(_QWORD *)(v7 + 16) = 0;
LABEL_10:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t fssm_remote_copyRecords(uint64_t a1, _QWORD *a2)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (a2)
  {
    *a2 = 0;
    ObjectID = fssm_remote_getObjectID(a1, &v5);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)ObjectID)
          ObjectID = FigXPCMessageCopyCFDictionary();
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v3 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t fssm_remote_removeRecords(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_9;
  }
  ObjectID = fssm_remote_getObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
  {
LABEL_9:
    v4 = ObjectID;
    goto LABEL_6;
  }
  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3 || (v3 = FigXPCMessageSetCFArray(), (_DWORD)v3))
    v4 = v3;
  else
    v4 = FigXPCRemoteClientSendSyncMessage();
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t fssm_remote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || *(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t figCSSTokenWalkerRegisterFigCSSTokenWalker()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCSSTokenWalkerID = result;
  return result;
}

uint64_t FigCSSTokenWalkerCreate(uint64_t a1, const void *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCSSTokenWalkerGetTypeID_sRegisterFigCSSTokenWalkerOnce, figCSSTokenWalkerRegisterFigCSSTokenWalker);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  *(_QWORD *)(Instance + 16) = CFRetain(a2);
  *(_QWORD *)(v7 + 24) = CFArrayGetCount((CFArrayRef)a2);
  *(_QWORD *)(v7 + 32) = -1;
  v8 = FigCSSEOFTokenCreate(a1, (CFTypeRef *)(v7 + 48));
  if ((_DWORD)v8)
    CFRelease((CFTypeRef)v7);
  else
    *a3 = v7;
  return v8;
}

uint64_t FigCSSTokenWalkerConsumeNextInputToken(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t result;
  int v9;
  int v10;

  v10 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(a1 + 40) = 0;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(a1 + 24);
      goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 < v6)
    *(_QWORD *)(a1 + 32) = ++v5;
LABEL_7:
  if (v5 >= v6)
  {
    ValueAtIndex = *(const void **)(a1 + 48);
    if (!a2)
      goto LABEL_12;
    goto LABEL_11;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v5);
  if (a2)
LABEL_11:
    *a2 = ValueAtIndex;
LABEL_12:
  if (!a3)
    return 0;
  if (ValueAtIndex)
  {
    result = FigCSSTokenGetTokenType((uint64_t)ValueAtIndex, &v10);
    if ((_DWORD)result)
      return result;
    v9 = v10;
  }
  else
  {
    v9 = 0;
  }
  result = 0;
  *a3 = v9;
  return result;
}

uint64_t FigCSSTokenWalkerGetCurrentInputToken(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  CFIndex v5;
  const void *ValueAtIndex;
  uint64_t result;
  int v8;
  int v9;

  if (!a1)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 == -1)
  {
    ValueAtIndex = 0;
    if (!a2)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v5 < *(_QWORD *)(a1 + 24))
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v5);
    if (!a2)
      goto LABEL_8;
LABEL_7:
    *a2 = ValueAtIndex;
    goto LABEL_8;
  }
  ValueAtIndex = *(const void **)(a1 + 48);
  if (a2)
    goto LABEL_7;
LABEL_8:
  if (!a3)
    return 0;
  v9 = 0;
  if (ValueAtIndex)
  {
    result = FigCSSTokenGetTokenType((uint64_t)ValueAtIndex, &v9);
    if ((_DWORD)result)
      return result;
    v8 = v9;
  }
  else
  {
    v8 = 0;
  }
  result = 0;
  *a3 = v8;
  return result;
}

uint64_t FigCSSTokenWalkerReconsumeInputToken(uint64_t a1)
{
  if (!a1 || *(_QWORD *)(a1 + 32) == -1)
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 40) = 1;
  return 0;
}

double figCSSTokenWalker_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figCSSTokenWalker_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
}

CFStringRef figCSSTokenWalker_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCSSTokenWalker %p]"), a1);
}

CFStringRef figCSSTokenWalker_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCSSTokenWalker %p]"), a1);
}

uint64_t FigNetworkUrgencyMonitorSetTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t UpTimeNanoseconds;

  if (a1)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
    if (a2)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        FigReadOnlyTimebaseSetTargetTimebase();
      }
      else
      {
        CMTimebaseCreateReadOnlyTimebase();
        if (!*(_QWORD *)(a1 + 16))
          goto LABEL_14;
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
      }
    }
    else
    {
      fnum_releaseReadOnlyTimebase(a1);
    }
    if (*(_QWORD *)(a1 + 40))
    {
      if (*(_BYTE *)(a1 + 120))
      {
        v4 = *(_QWORD *)(a1 + 96);
        UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        fnum_rescheduleBufferDepletionUpdateTimer(a1, v4 - UpTimeNanoseconds);
      }
      else
      {
        fnum_evaluateBufferDepletionUrgencyAndRescheduleTimer(a1);
      }
      goto LABEL_12;
    }
LABEL_14:
    FigSignalErrorAt();
LABEL_12:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
    return 0;
  }
  return 4294954516;
}

uint64_t FigNetworkUrgencyMonitorSetStreamFullyAvailable(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t UpTimeNanoseconds;

  if (!a1)
    return 4294954516;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
  if (*(unsigned __int8 *)(a1 + 121) != a2)
  {
    *(_BYTE *)(a1 + 121) = a2;
    if (a2)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 104));
      *(_QWORD *)(a1 + 112) = 0;
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 104));
      fnum_updateExpectedProgressTargets(a1);
      v4 = *(NSObject **)(a1 + 40);
      if (v4)
        dispatch_source_set_timer(v4, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    else if (*(_BYTE *)(a1 + 120))
    {
      v5 = *(_QWORD *)(a1 + 96);
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      fnum_rescheduleBufferDepletionUpdateTimer(a1, v5 - UpTimeNanoseconds);
    }
    else
    {
      fnum_evaluateBufferDepletionUrgencyAndRescheduleTimer(a1);
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
  return 0;
}

void fnum_updateExpectedProgressTargets(uint64_t a1)
{
  const void *ExpectedProgressTarget;

  ExpectedProgressTarget = (const void *)fnum_createExpectedProgressTarget(a1);
  FigCFWeakReferenceTableApplyFunction();
  if (ExpectedProgressTarget)
    CFRelease(ExpectedProgressTarget);
}

void fnum_rescheduleBufferDepletionUpdateTimer(uint64_t a1, int64_t a2)
{
  NSObject *v4;
  dispatch_time_t v5;
  int v6;
  NSObject *v7;

  *(_QWORD *)(a1 + 96) = FigGetUpTimeNanoseconds() + a2;
  if (*(_BYTE *)(a1 + 121) || !*(_QWORD *)(a1 + 16) || (v6 = *(_DWORD *)(a1 + 136), (~v6 & 5) == 0))
  {
    v4 = *(NSObject **)(a1 + 40);
    if (!v4)
      return;
    goto LABEL_3;
  }
  v7 = *(NSObject **)(a1 + 40);
  if ((~v6 & 0x11) != 0)
  {
    v5 = dispatch_time(0, a2);
    v4 = v7;
    goto LABEL_4;
  }
  if (v7)
  {
    v4 = v7;
LABEL_3:
    v5 = -1;
LABEL_4:
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
}

void fnum_evaluateBufferDepletionUrgencyAndRescheduleTimer(uint64_t a1)
{
  int64_t v2;
  OpaqueCMTimebase *v3;
  double Rate;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeEpoch v7;
  __int128 v8;
  double Seconds;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  _OWORD *v14;
  OpaqueCMClock *HostTimeClock;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  CMTime time2;
  CMTime rhs;
  CMTime v22;
  CMTimeRange time;
  CMTime v24;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = sFigNetworkUrgencyMonitorBufferDepletionUpdatePeriodNanoseconds;
  if (!*(_BYTE *)(a1 + 121))
  {
    v3 = *(OpaqueCMTimebase **)(a1 + 16);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 60) & 1) != 0
        && (*(_BYTE *)(a1 + 84) & 1) != 0
        && !*(_QWORD *)(a1 + 88)
        && (*(_QWORD *)(a1 + 72) & 0x8000000000000000) == 0)
      {
        Rate = CMTimebaseGetRate(v3);
        CMTimebaseGetTime(&time.start, *(CMTimebaseRef *)(a1 + 16));
        value = time.start.value;
        flags = time.start.flags;
        timescale = time.start.timescale;
        if ((time.start.flags & 1) != 0)
        {
          epoch = time.start.epoch;
          v19 = *MEMORY[0x1E0CA2E18];
          *(_OWORD *)&v24.value = *MEMORY[0x1E0CA2E18];
          v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          v24.epoch = v7;
          v8 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&time.start.value = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&time.start.epoch = v8;
          *(_OWORD *)&time.duration.timescale = *(_OWORD *)(a1 + 80);
          CMTimeRangeGetEnd(&v24, &time);
          time.start = v24;
          CMTimeGetSeconds(&time.start);
          time.start.value = value;
          time.start.timescale = timescale;
          time.start.flags = flags;
          time.start.epoch = epoch;
          CMTimeGetSeconds(&time.start);
          time.start = v24;
          rhs.value = value;
          rhs.timescale = timescale;
          rhs.flags = flags;
          rhs.epoch = epoch;
          CMTimeSubtract(&v22, &time.start, &rhs);
          Seconds = CMTimeGetSeconds(&v22);
          v10 = 0;
          if (Rate >= 0.0)
          {
            v11 = *(_DWORD *)(a1 + 136);
            if ((~v11 & 5) != 0 && (*(_DWORD *)(a1 + 136) & 0x11) != 0x11)
            {
              v12 = 1.0;
              if (Rate >= 0.1)
                v12 = Rate;
              v13 = Seconds / v12;
              if ((v11 & 1) != 0)
              {
                v14 = (_OWORD *)(a1 + 124);
                memset(&time, 0, 24);
                HostTimeClock = CMClockGetHostTimeClock();
                CMClockGetTime(&time.start, HostTimeClock);
                rhs = *(CMTime *)(a1 + 124);
                time2 = time.start;
                if (CMTimeCompare(&rhs, &time2) < 0)
                {
                  *v14 = v19;
                  *(_QWORD *)(a1 + 140) = v7;
                }
                else
                {
                  *(_OWORD *)&rhs.value = *v14;
                  rhs.epoch = *(_QWORD *)(a1 + 140);
                  v16 = CMTimeGetSeconds(&rhs);
                  rhs = time.start;
                  v13 = v13 + v16 - CMTimeGetSeconds(&rhs);
                }
              }
              v17 = *(double *)&sFigNetworkUrgencyMonitorBufferDepletionLowWater;
              if (v13 >= *(double *)&sFigNetworkUrgencyMonitorBufferDepletionLowWater)
              {
                v10 = 0;
              }
              else
              {
                v10 = (uint64_t)((double)FigGetContinuousUpTimeNanoseconds() + v13 * 1000000000.0);
                v17 = *(double *)&sFigNetworkUrgencyMonitorBufferDepletionLowWater;
              }
              v18 = v13 - v17;
              if (v18 <= *(double *)&sFigNetworkUrgencyMonitorBufferDepletionUpdatePeriod)
                v18 = *(double *)&sFigNetworkUrgencyMonitorBufferDepletionUpdatePeriod;
              v2 = (uint64_t)(v18 * 1000000000.0);
            }
          }
          MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 104));
          *(_QWORD *)(a1 + 112) = v10;
          MEMORY[0x19402EA24](*(_QWORD *)(a1 + 104));
          fnum_updateExpectedProgressTargets(a1);
        }
      }
    }
  }
  fnum_rescheduleBufferDepletionUpdateTimer(a1, v2);
}

uint64_t FigNetworkUrgencyMonitorSetPlayableRange(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;

  if (!a1)
    return 4294954516;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
  v5 = a2[1];
  v4 = a2[2];
  *(_OWORD *)(a1 + 48) = *a2;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v4;
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
  return 0;
}

uint64_t FigNetworkUrgencyMonitorSetEstimatedStartTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!a1)
    return 4294954516;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 124) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 140) = v4;
  if (!*(_BYTE *)(a1 + 120))
    fnum_evaluateBufferDepletionUrgencyAndRescheduleTimer(a1);
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
  return 0;
}

uint64_t FigNetworkUrgencyAssertDeadline(uint64_t a1, CMTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ContinuousUpTimeNanoseconds;
  _QWORD *v7;
  CMTime v9;

  if (!a1)
    return 0;
  v4 = FigAtomicIncrement64();
  if (!v4)
    v4 = FigAtomicIncrement64();
  v9 = *a2;
  v5 = (uint64_t)(CMTimeGetSeconds(&v9) * 1000000000.0);
  ContinuousUpTimeNanoseconds = FigGetContinuousUpTimeNanoseconds();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
  if (!fnum_scheduleDeadlineCleanup(a1, v5 + 1000000000))
  {
    v7 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040B07D1DCCuLL);
    if (v7)
    {
      v7[1] = v4;
      v7[2] = ContinuousUpTimeNanoseconds + v5;
      *v7 = 0;
      **(_QWORD **)(a1 + 160) = v7;
      *(_QWORD *)(a1 + 160) = v7;
      fnum_updateExpectedProgressTargets(a1);
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
  return v4;
}

uint64_t fnum_scheduleDeadlineCleanup(uint64_t a1, int64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  dispatch_time_t v5;
  NSObject *GlobalNetworkBufferingQueue;
  _QWORD block[5];

  v3 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  v5 = dispatch_time(0, a2);
  GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fnum_scheduleDeadlineCleanup_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  block[4] = v4;
  dispatch_after(v5, GlobalNetworkBufferingQueue, block);
  return 0;
}

uint64_t FigNetworkUrgencyCancelDeadline(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  if (result && a2)
  {
    v3 = result;
    MEMORY[0x19402EA0C](*(_QWORD *)(result + 32));
    v4 = *(_QWORD **)(v3 + 152);
    if (v4)
    {
      while (v4[1] != a2)
      {
        v4 = (_QWORD *)*v4;
        if (!v4)
          goto LABEL_9;
      }
      v4[3] = FigGetContinuousUpTimeNanoseconds();
      fnum_scheduleDeadlineCleanup(v3, 1000000000);
    }
LABEL_9:
    JUMPOUT(0x19402EA24);
  }
  return result;
}

uint64_t FigNetworkUrgencyMonitorCopyExpectedProgressTarget(uint64_t a1)
{
  uint64_t v2;

  if (a1
    && (MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 104)),
        v2 = *(_QWORD *)(a1 + 112),
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 104)),
        v2))
  {
    return FigCFNumberCreateSInt64();
  }
  else
  {
    return 0;
  }
}

uint64_t FigNetworkUrgencyMonitorAddHTTPRequest(uint64_t a1, uint64_t a2)
{
  const void *ExpectedProgressTarget;
  void (*v5)(uint64_t, __CFString *, const void *);

  if (!a1)
    return 4294954516;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
  FigCFWeakReferenceTableAddValueAndGetKey();
  ExpectedProgressTarget = (const void *)fnum_createExpectedProgressTarget(a1);
  v5 = *(void (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v5)
    v5(a2, CFSTR("FHRP_ExpectedProgressTarget"), ExpectedProgressTarget);
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
  if (ExpectedProgressTarget)
    CFRelease(ExpectedProgressTarget);
  return 0;
}

uint64_t fnum_createExpectedProgressTarget(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 152);
  if (v1)
  {
    v2 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      if (v2 >= v1[2])
        v2 = v1[2];
      v1 = (_QWORD *)*v1;
    }
    while (v1);
    if (*(_QWORD *)(a1 + 112))
      return FigCFNumberCreateSInt64();
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 112);
  }
  if (v2)
    return FigCFNumberCreateSInt64();
  return 0;
}

double fnum_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t fnum_Finalize(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  fnum_releaseReadOnlyTimebase((uint64_t)a1);
  v2 = a1[5];
  if (v2)
  {
    dispatch_source_set_timer(v2, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v2 = a1[5];
  }
  dispatch_source_cancel(v2);
  v3 = a1[5];
  if (v3)
  {
    dispatch_release(v3);
    a1[5] = 0;
  }
  v4 = (const void *)a1[3];
  if (v4)
  {
    CFRelease(v4);
    a1[3] = 0;
  }
  v6 = (_QWORD **)(a1 + 19);
  v5 = (_QWORD *)a1[19];
  if (!v5)
    goto LABEL_16;
  while (1)
  {
    v7 = (_QWORD *)*v5;
    v8 = *v6;
    if (*v6 == v5)
      break;
    do
    {
      v9 = v8;
      v8 = (_QWORD *)*v8;
    }
    while (v8 != v5);
    *v9 = v7;
    if (!v7)
      goto LABEL_15;
LABEL_13:
    free(v5);
    v5 = v7;
  }
  *v6 = v7;
  if (v7)
    goto LABEL_13;
  v9 = a1 + 19;
LABEL_15:
  a1[20] = v9;
  free(v5);
LABEL_16:
  if (a1[13])
    FigSimpleMutexDestroy();
  return FigSimpleMutexDestroy();
}

CFStringRef fnum_BaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigNetworkUrgencyMonitor %p]"), a1);
}

CFStringRef fnum_CopyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigNetworkUrgencyMonitor %p]"), a1);
}

uint64_t FigNetworkUrgencyMonitorCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *GlobalNetworkBufferingQueue;
  dispatch_source_t v10;
  void *v11;
  const void *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD handler[5];

  MEMORY[0x19402F294](&sFigPlayerInitializeBufferDurationParameters, fnum_initializeBufferDurationParameters);
  *a2 = 0;
  if (FigNetworkUrgencyMonitorGetClassID_sRegisterFigNetworkUrgencyMonitorTypeOnce != -1)
    dispatch_once(&FigNetworkUrgencyMonitorGetClassID_sRegisterFigNetworkUrgencyMonitorTypeOnce, &__block_literal_global_5);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v4 = Instance;
    v5 = FigReentrantMutexCreate();
    *(_QWORD *)(v4 + 104) = v5;
    if (v5)
    {
      *(_QWORD *)(v4 + 152) = 0;
      *(_QWORD *)(v4 + 96) = 0x7FFFFFFFFFFFFFFFLL;
      v6 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v4 + 124) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(v4 + 140) = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v4 + 160) = v4 + 152;
      v7 = FigCFWeakReferenceTableCreate();
      if ((_DWORD)v7)
      {
        v14 = v7;
LABEL_15:
        CFRelease((CFTypeRef)v4);
        return v14;
      }
      v8 = FigReentrantMutexCreate();
      *(_QWORD *)(v4 + 32) = v8;
      if (v8)
      {
        GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
        v10 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, GlobalNetworkBufferingQueue);
        *(_QWORD *)(v4 + 40) = v10;
        if (v10)
        {
          v11 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
          if (v11)
          {
            v12 = v11;
            dispatch_set_context(*(dispatch_object_t *)(v4 + 40), v11);
            dispatch_source_set_timer(*(dispatch_source_t *)(v4 + 40), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v4 + 40), (dispatch_function_t)fnum_bufferDepletionUpdateTimerProc);
            CFRetain(v12);
            v13 = *(NSObject **)(v4 + 40);
            handler[0] = MEMORY[0x1E0C809B0];
            handler[1] = 0x40000000;
            handler[2] = __FigNetworkUrgencyMonitorCreate_block_invoke;
            handler[3] = &__block_descriptor_tmp_2;
            handler[4] = v12;
            dispatch_source_set_cancel_handler(v13, handler);
            MEMORY[0x19402EA0C](*(_QWORD *)(v4 + 32));
            MEMORY[0x19402EA0C](*(_QWORD *)(v4 + 104));
            *(_QWORD *)(v4 + 112) = 0;
            MEMORY[0x19402EA24](*(_QWORD *)(v4 + 104));
            fnum_updateExpectedProgressTargets(v4);
            *(_BYTE *)(v4 + 120) = 1;
            fnum_rescheduleBufferDepletionUpdateTimer(v4, sFigNetworkUrgencyMonitorBufferDepletionGracePeriodNanoseconds);
            MEMORY[0x19402EA24](*(_QWORD *)(v4 + 32));
            dispatch_resume(*(dispatch_object_t *)(v4 + 40));
            *a2 = v4;
            CFRelease(v12);
            return 0;
          }
        }
      }
    }
    v14 = FigSignalErrorAt();
    if (!(_DWORD)v14)
      return v14;
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

double fnum_initializeBufferDurationParameters()
{
  double v0;
  double v1;
  double v2;
  double v3;
  double result;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigGetCFPreferenceDoubleWithDefault();
  if (v0 != *(double *)&sFigNetworkUrgencyMonitorBufferDepletionLowWater)
    sFigNetworkUrgencyMonitorBufferDepletionLowWater = *(_QWORD *)&v0;
  FigGetCFPreferenceDoubleWithDefault();
  if (v1 != *(double *)&sFigNetworkUrgencyMonitorBufferDepletionUpdatePeriod)
    sFigNetworkUrgencyMonitorBufferDepletionUpdatePeriod = *(_QWORD *)&v1;
  FigGetCFPreferenceDoubleWithDefault();
  v3 = *(double *)&sFigNetworkUrgencyMonitorBufferDepletionGracePeriod;
  if (v2 != *(double *)&sFigNetworkUrgencyMonitorBufferDepletionGracePeriod)
  {
    sFigNetworkUrgencyMonitorBufferDepletionGracePeriod = *(_QWORD *)&v2;
    v3 = v2;
  }
  sFigNetworkUrgencyMonitorBufferDepletionUpdatePeriodNanoseconds = (uint64_t)(*(double *)&sFigNetworkUrgencyMonitorBufferDepletionUpdatePeriod
                                                                            * 1000000000.0);
  result = v3 * 1000000000.0;
  sFigNetworkUrgencyMonitorBufferDepletionGracePeriodNanoseconds = (uint64_t)(v3 * 1000000000.0);
  return result;
}

void fnum_bufferDepletionUpdateTimerProc()
{
  uint64_t v0;
  uint64_t v1;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = v0;
    MEMORY[0x19402EA0C](*(_QWORD *)(v0 + 32));
    *(_BYTE *)(v1 + 120) = 0;
    fnum_evaluateBufferDepletionUrgencyAndRescheduleTimer(v1);
    MEMORY[0x19402EA24](*(_QWORD *)(v1 + 32));
    CFRelease((CFTypeRef)v1);
  }
}

void fnum_timebaseRateChangedCallback(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 32));
  if (!*(_BYTE *)(a2 + 120))
    fnum_evaluateBufferDepletionUrgencyAndRescheduleTimer(a2);
  JUMPOUT(0x19402EA24);
}

void fnum_timebaseJumpedCallback(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 32));
  if (!*(_BYTE *)(a2 + 120))
    fnum_evaluateBufferDepletionUrgencyAndRescheduleTimer(a2);
  JUMPOUT(0x19402EA24);
}

void fnum_releaseReadOnlyTimebase(uint64_t a1)
{
  const void *v2;

  if (*(_QWORD *)(a1 + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

uint64_t fnum_updateExpectedProgressTargetApplierFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v6)(uint64_t, __CFString *, uint64_t);

  result = CMBaseObjectGetVTable();
  v6 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v6)
    return v6(a2, CFSTR("FHRP_ExpectedProgressTarget"), a3);
  return result;
}

void __fnum_scheduleDeadlineCleanup_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t ContinuousUpTimeNanoseconds;
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const void *v14;

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (_QWORD *)v2;
    MEMORY[0x19402EA0C](*(_QWORD *)(v2 + 32));
    ContinuousUpTimeNanoseconds = FigGetContinuousUpTimeNanoseconds();
    v6 = (_QWORD **)(v3 + 19);
    v5 = (_QWORD *)v3[19];
    if (v5)
    {
      v7 = ContinuousUpTimeNanoseconds - 1000000000;
      while (1)
      {
        v8 = (_QWORD *)*v5;
        v9 = v5[3];
        if (v9 && v9 < v7)
          break;
        if (v5[2] < v7)
        {
          v11 = *v6;
          if (*v6 != v5)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11 != v5);
            goto LABEL_14;
          }
LABEL_19:
          *v6 = v8;
          v12 = v3 + 19;
          if (!v8)
            goto LABEL_15;
          goto LABEL_16;
        }
LABEL_17:
        v5 = v8;
        if (!v8)
          goto LABEL_21;
      }
      v13 = *v6;
      if (*v6 == v5)
        goto LABEL_19;
      do
      {
        v12 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13 != v5);
LABEL_14:
      *v12 = v8;
      if (!v8)
LABEL_15:
        v3[20] = v12;
LABEL_16:
      free(v5);
      goto LABEL_17;
    }
LABEL_21:
    fnum_updateExpectedProgressTargets((uint64_t)v3);
    MEMORY[0x19402EA24](v3[4]);
    CFRelease(v3);
  }
  v14 = *(const void **)(a1 + 32);
  if (v14)
    CFRelease(v14);
}

uint64_t OccupancyChangedBlobGetTypeID()
{
  if (sRegisterOccupancyChangedBlobTypeOnce != -1)
    dispatch_once_f(&sRegisterOccupancyChangedBlobTypeOnce, 0, (dispatch_function_t)RegisterVMC2OutputCallbacksType);
  return sOccupancyChangedBlobID;
}

uint64_t RegisterVMC2OutputCallbacksType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sOccupancyChangedBlobID = result;
  return result;
}

uint64_t VMC2MakeOutputCallbacksForImageQueueArray(const __CFArray *a1, const __CFArray *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  CFIndex Count;
  CFIndex v9;
  const __CFAllocator *v11;
  const CFArrayCallBacks *v12;
  __CFArray *Mutable;
  CFMutableArrayRef v14;
  __CFArray *v15;
  CFIndex v16;
  const void *v17;
  const void *v18;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v20;
  CFTypeID v21;
  const void *v22;
  uint64_t v23;
  CFIndex v24;
  uint64_t v25;
  const void *v26;
  CFTypeID v27;
  uint64_t v28;
  _QWORD *v29;
  const __CFArray *cf;
  _QWORD *v31;

  if (!a1 || !a4 || a3 != 96)
    return FigSignalErrorAt();
  v7 = malloc_type_calloc(1uLL, 0x20uLL, 0x700402B80F0C4uLL);
  if (!v7)
  {
    v15 = 0;
    v28 = 4294954510;
    goto LABEL_39;
  }
  Count = CFArrayGetCount(a1);
  if (a2)
    v9 = CFArrayGetCount(a2);
  else
    v9 = 0;
  if (Count != v9)
  {
    v28 = FigSignalErrorAt();
LABEL_48:
    v15 = 0;
    goto LABEL_39;
  }
  cf = a1;
  v31 = a4;
  if (!Count)
  {
    Mutable = 0;
    v15 = 0;
    goto LABEL_25;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  v14 = CFArrayCreateMutable(v11, Count, v12);
  v15 = v14;
  if (!Mutable)
  {
    v28 = FigSignalErrorAt();
    goto LABEL_46;
  }
  if (v14)
  {
    if (Count >= 1)
    {
      v29 = v7;
      v16 = 0;
      v17 = (const void *)*MEMORY[0x1E0C9AE40];
      v18 = (const void *)*MEMORY[0x1E0C9AE50];
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v16);
        if (ValueAtIndex && (v20 = ValueAtIndex, v21 = CFGetTypeID(ValueAtIndex), v21 == CFDictionaryGetTypeID()))
        {
          CFDictionaryGetValue(v20, CFSTR("DestinationPixelBufferAttributes"));
          v22 = CFDictionaryGetValue(v20, CFSTR("EnsureModifiableImageBuffers")) == v18 ? v18 : v17;
        }
        else
        {
          v22 = v17;
        }
        v23 = VTPixelBufferConformerCreateWithAttributes();
        if ((_DWORD)v23)
          goto LABEL_45;
        CFArrayAppendValue(v15, 0);
        CFArrayAppendValue(Mutable, v22);
        if (Count == ++v16)
        {
          v7 = v29;
          break;
        }
      }
    }
LABEL_25:
    v7[1] = Mutable;
    v7[2] = v15;
    v15 = (__CFArray *)malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
    if (!v15)
    {
LABEL_42:
      v28 = FigSignalErrorAt();
      goto LABEL_39;
    }
    if (Count < 1)
    {
      if (Count)
        goto LABEL_38;
    }
    else
    {
      v24 = 0;
      v25 = 0;
      do
      {
        v26 = CFArrayGetValueAtIndex(a2, v24);
        if (v26)
        {
          v27 = CFGetTypeID(v26);
          if (v27 == CFDictionaryGetTypeID())
          {
            if (FigCFDictionaryGetInt32IfPresent())
            {
              *((_DWORD *)v15 + v24) = 0;
              ++v25;
            }
          }
        }
        ++v24;
      }
      while (Count != v24);
      if (v25 != Count)
      {
        if (v25)
          goto LABEL_42;
LABEL_38:
        v28 = 0;
        *v7 = CFRetain(cf);
        *v31 = 0;
        v31[1] = v7;
        v31[2] = vmciqa_setSourceInfo;
        v31[3] = vmciqa_getSafeDisplayDuration;
        v31[4] = vmciqa_installOccupancyChangedCallback;
        v31[5] = vmciqa_removeOccupancyChangedCallback;
        v31[6] = vmciqa_canOutputImage;
        v31[7] = vmciqa_outputImage;
        v31[8] = vmciqa_flushOutput;
        v31[9] = vmciqa_releaseOutput;
        v31[10] = vmciqa_postNotification;
        v31[11] = vmciqa_copyGPURegistryID;
        v7 = 0;
        goto LABEL_39;
      }
    }
    v7[3] = v15;
    v15 = 0;
    goto LABEL_38;
  }
  v29 = v7;
  v23 = FigSignalErrorAt();
LABEL_45:
  v28 = v23;
  CFRelease(Mutable);
  v7 = v29;
LABEL_46:
  if (v15)
  {
    CFRelease(v15);
    goto LABEL_48;
  }
LABEL_39:
  free(v15);
  free(v7);
  return v28;
}

CFIndex vmciqa_setSourceInfo(CFArrayRef *a1, int a2, int a3, __int128 *a4, __int128 *a5)
{
  const __CFArray *v9;
  CFIndex result;
  CFIndex v11;
  uint64_t v12;
  CFIndex v13;
  const void *ValueAtIndex;
  uint64_t (*v15)(const void *, uint64_t, __int128 *, __int128 *);
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v9 = *a1;
  result = CFArrayGetCount(*a1);
  v11 = result;
  if (a2)
  {
    if (a3)
      v12 = 3;
    else
      v12 = 1;
  }
  else if ((*((_DWORD *)a4 + 3) & 0x1D) == 1 && (*((_BYTE *)a5 + 12) & 1) != 0)
  {
    v12 = 2;
  }
  else
  {
    v12 = 0;
  }
  if (result >= 1)
  {
    v13 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v9, v13);
      v18 = *a4;
      v19 = *((_QWORD *)a4 + 2);
      v16 = *a5;
      v17 = *((_QWORD *)a5 + 2);
      result = CMBaseObjectGetVTable();
      v15 = *(uint64_t (**)(const void *, uint64_t, __int128 *, __int128 *))(*(_QWORD *)(result + 16) + 56);
      if (v15)
      {
        v22 = v18;
        v23 = v19;
        v20 = v16;
        v21 = v17;
        result = v15(ValueAtIndex, v12, &v22, &v20);
      }
      ++v13;
    }
    while (v11 != v13);
  }
  return result;
}

uint64_t vmciqa_getSafeDisplayDuration@<X0>(CFArrayRef *a1@<X0>, CMTime *a2@<X8>)
{
  const __CFArray *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  CMTime *v8;
  const void *ValueAtIndex;
  void (*v10)(CMTime *__return_ptr, const void *);
  CMTime v11;
  CMTime time1;
  CMTime v13;

  v3 = *a1;
  result = CFArrayGetCount(*a1);
  v5 = MEMORY[0x1E0CA2E30];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E30];
  a2->epoch = *(_QWORD *)(v5 + 16);
  if (result >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = (CMTime *)MEMORY[0x1E0CA2E18];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, v7);
      memset(&v13, 0, sizeof(v13));
      v10 = *(void (**)(CMTime *__return_ptr, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (v10)
        v10(&v13, ValueAtIndex);
      else
        v13 = *v8;
      time1 = *a2;
      v11 = v13;
      result = (uint64_t)CMTimeMinimum(a2, &time1, &v11);
      ++v7;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t vmciqa_installOccupancyChangedCallback(CFArrayRef *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  const __CFArray *v6;
  CFIndex Count;
  uint64_t Instance;
  uint64_t v9;
  CFIndex i;

  v6 = *a1;
  Count = CFArrayGetCount(*a1);
  if (sRegisterOccupancyChangedBlobTypeOnce != -1)
    dispatch_once_f(&sRegisterOccupancyChangedBlobTypeOnce, 0, (dispatch_function_t)RegisterVMC2OutputCallbacksType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v9 = Instance;
  FigCFWeakReferenceStore();
  *(_QWORD *)(v9 + 24) = a3;
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      CFArrayGetValueAtIndex(v6, i);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
  }
  *a4 = v9;
  return 0;
}

uint64_t vmciqa_removeOccupancyChangedCallback(CFArrayRef *a1, const void *a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t FigBaseObject;
  _QWORD *v9;
  void (*v10)(uint64_t);

  v3 = *a1;
  Count = CFArrayGetCount(*a1);
  if (Count >= 1)
  {
    v5 = Count;
    for (i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
      v9 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v9 >= 2uLL)
      {
        v10 = (void (*)(uint64_t))v9[8];
        if (v10)
          v10(FigBaseObject);
      }
    }
  }
  if (a2)
    CFRelease(a2);
  return 0;
}

uint64_t vmciqa_canOutputImage(CFArrayRef *a1)
{
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;
  uint64_t (*v7)(const void *);
  int v8;

  v1 = *a1;
  Count = CFArrayGetCount(*a1);
  if (Count < 1)
    return 100;
  v3 = Count;
  v4 = 0;
  LODWORD(v5) = 100;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
    v7 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v7)
      v8 = v7(ValueAtIndex);
    else
      v8 = 0;
    if (v8 >= (int)v5)
      v5 = v5;
    else
      v5 = v8;
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t vmciqa_outputImage(const __CFArray **a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, __int128 *a6, unsigned int a7)
{
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  int v10;
  CFIndex v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t (*v21)(const void *, _QWORD, uint64_t, __int128 *, _QWORD);
  int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  const __CFArray *theArray;
  const __CFArray *v33;
  CFIndex v34;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v7 = *a1;
  if (!*a1)
    return 0;
  Count = CFArrayGetCount(*a1);
  v34 = Count - 1;
  if (Count < 1)
    return 0;
  v9 = Count;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  theArray = a1[2];
  v33 = a1[1];
  if (a2)
    v13 = 1;
  else
    v13 = a3 == 0;
  v14 = v13;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v7, v11);
    v16 = a2;
    if ((v14 & 1) != 0 || (v17 = FigTagMakeWithSInt64Value(), (v16 = MEMORY[0x19402F0F0](a3, v17, v18, 0)) != 0))
    {
      CFArrayGetValueAtIndex(theArray, v11);
      CFArrayGetValueAtIndex(v33, v11);
      if (v11 >= v34)
        v19 = a4 & (v10 == 0);
      else
        v19 = 0;
      v20 = VTPixelBufferConformerCopyConformedPixelBuffer();
      if (v20)
      {
        if ((_DWORD)v12)
          v12 = v12;
        else
          v12 = v20;
      }
      else
      {
        if (!v16)
          v10 = 1;
        v37 = *a6;
        v38 = *((_QWORD *)a6 + 2);
        v21 = *(uint64_t (**)(const void *, _QWORD, uint64_t, __int128 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 32);
        if (v21)
        {
          if (v16)
            v22 = 1;
          else
            v22 = v19;
          if (v22)
            v23 = 0x10000;
          else
            v23 = 0;
          v39 = v37;
          v40 = v38;
          v24 = v21(ValueAtIndex, 0, a5, &v39, v23 | a7);
        }
        else
        {
          v24 = -12782;
        }
        if ((_DWORD)v12)
          v25 = 1;
        else
          v25 = v24 == 0;
        if (v25)
          v12 = v12;
        else
          v12 = v24;
      }
    }
    ++v11;
  }
  while (v9 != v11);
  return v12;
}

CFIndex vmciqa_flushOutput(CFArrayRef *a1)
{
  const __CFArray *v1;
  CFIndex result;
  CFIndex v3;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t (*v6)(const void *);

  v1 = *a1;
  result = CFArrayGetCount(*a1);
  if (result >= 1)
  {
    v3 = result;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v1, i);
      result = CMBaseObjectGetVTable();
      v6 = *(uint64_t (**)(const void *))(*(_QWORD *)(result + 16) + 16);
      if (v6)
        result = v6(ValueAtIndex);
    }
  }
  return result;
}

void vmciqa_releaseOutput(void *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)a1 + 1);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)a1 + 2);
  if (v4)
    CFRelease(v4);
  free(*((void **)a1 + 3));
  free(a1);
}

uint64_t vmciqa_postNotification(CFArrayRef *a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;
  const void *ValueAtIndex;
  uint64_t (*v11)(const void *, uint64_t, uint64_t);
  unsigned int v12;
  BOOL v13;

  v5 = *a1;
  Count = CFArrayGetCount(*a1);
  if (Count < 1)
    return 0;
  v7 = Count;
  v8 = 0;
  LODWORD(v9) = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v5, v8);
    v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (v11)
      v12 = v11(ValueAtIndex, a2, a3);
    else
      v12 = -12782;
    if ((_DWORD)v9)
      v13 = 1;
    else
      v13 = v12 == 0;
    if (v13)
      v9 = v9;
    else
      v9 = v12;
    ++v8;
  }
  while (v7 != v8);
  return v9;
}

__CFArray *vmciqa_copyGPURegistryID(CFArrayRef *a1)
{
  const __CFArray *v1;
  CFIndex Count;
  uint64_t v3;
  __CFArray *Mutable;
  BOOL v5;
  CFIndex v6;
  const void *v7;
  const void *ValueAtIndex;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v11;
  CFTypeRef cf;

  v1 = *a1;
  Count = CFArrayGetCount(*a1);
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  if (Mutable)
    v5 = Count < 1;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = 0;
    v7 = (const void *)*MEMORY[0x1E0C9B0D0];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v1, v6);
      cf = 0;
      FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
      v10 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v10)
        v10(FigBaseObject, CFSTR("FigImageQueueProperty_GPURegistryID"), v3, &cf);
      if (cf)
        v11 = cf;
      else
        v11 = v7;
      CFArrayAppendValue(Mutable, v11);
      if (cf)
        CFRelease(cf);
      ++v6;
    }
    while (Count != v6);
  }
  return Mutable;
}

uint64_t InitOccupancyChangedBlob(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void FinalizeOccupancyChangedBlob(uint64_t a1)
{
  id *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = (id *)(a1 + 16);
  if (v2)
    objc_destroyWeak(v1);
}

void vmciqa_OccupancyMonitorCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;

  v3 = MEMORY[0x19402D578](a2 + 16);
  if (v3)
  {
    v4 = (const void *)v3;
    (*(void (**)(void))(a2 + 24))();
    CFRelease(v4);
  }
}

uint64_t FigMetricPlaybackEventInstallDeserializationHandler(uint64_t result)
{
  switch(result)
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      result = FigMetricEventClassInstallEventDeserializeHandler();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FigMetricInstallAllPlaybackDeserializationHandlers()
{
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  FigMetricEventClassInstallEventDeserializeHandler();
  return FigMetricEventClassInstallEventDeserializeHandler();
}

uint64_t FigAudioQueueCreateWithOptions(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, uint64_t a3, int a4, const __CFDictionary *a5, uint64_t *a6)
{
  uint64_t Instance;
  uint64_t v13;
  char *v14;
  CMTimeValue Value;
  NSObject *DispatchQueue;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int CinematicAudioEffectEligibility;
  opaqueCMBufferQueue *v22;
  void *v23;
  CMTimeEpoch v24;
  uint64_t v25;
  opaqueCMBufferQueue *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeRef v32;
  CFDictionaryRef v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  NSObject *v37;
  __int128 v39;
  CFTypeRef v40[2];
  CFStringRef theString;
  CMTime cf;
  char __str[16];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40[0] = 0;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)__str = 0u;
  MEMORY[0x19402F294](&faq_oneTimeInitialization_sInitializationOnce, faq_oneTimeInitializationWork);
  if (a2)
  {
    if (a3)
    {
      if (a6)
      {
        if ((a4 & 0x402) != 0x400)
        {
          MEMORY[0x19402F294](&FigAudioQueueGetTypeID_sRegisterFAQTypeOnce, faq_registerFAQType);
          Instance = _CFRuntimeCreateInstance();
          if (Instance)
          {
            v13 = Instance;
            v14 = (char *)(Instance + 768);
            *(_BYTE *)(Instance + 768) = 0;
            theString = 0;
            cf.value = 0;
            v40[1] = 0;
            Value = FigCFDictionaryGetValue();
            if (FigCFDictionaryGetValueIfPresent())
              *(_QWORD *)(v13 + 264) = cf.value;
            if (FigCFDictionaryGetValueIfPresent())
              CFStringGetCString(theString, v14, 10, 0x600u);
            if (FigCFDictionaryGetValueIfPresent())
            {
              DispatchQueue = FigDispatchQueueHolderGetDispatchQueue();
              *(_QWORD *)(v13 + 32) = DispatchQueue;
              if (DispatchQueue)
                dispatch_retain(DispatchQueue);
            }
            v17 = FigReentrantMutexCreate();
            *(_QWORD *)(v13 + 24) = v17;
            if (!v17)
              goto LABEL_45;
            snprintf(__str, 0x50uLL, "com.apple.coremedia.faq.asyncQueue.%s", v14);
            if (!*(_QWORD *)(v13 + 32))
            {
              v18 = FigDispatchQueueCreateWithPriority();
              *(_QWORD *)(v13 + 32) = v18;
              if (!v18)
                goto LABEL_45;
            }
            snprintf(__str, 0x50uLL, "com.apple.coremedia.faq.deferredAQPropertyHandler.%s", v14);
            v19 = FigDispatchQueueCreateWithPriority();
            *(_QWORD *)(v13 + 40) = v19;
            if (!v19)
              goto LABEL_45;
            v20 = FigCFWeakReferenceHolderCreateWithReferencedObject();
            *(_QWORD *)(v13 + 80) = v20;
            if (!v20)
            {
              v31 = 4294954355;
              goto LABEL_33;
            }
            *(_DWORD *)(v13 + 48) = a4;
            if (CFDictionaryGetValue(a5, CFSTR("DestFormatDescription")))
            {
              theString = 0;
              cf.value = 0;
              CinematicAudioEffectEligibility = FigAudioFormatDescriptionGetCinematicAudioEffectEligibility();
              CMAudioFormatDescriptionGetMostCompatibleFormatAndChannelLayout();
              if (CinematicAudioEffectEligibility)
                *(_DWORD *)(v13 + 48) |= 0x100u;
            }
            *(_QWORD *)(v13 + 64) = FigBufferQueueRetain();
            *(_BYTE *)(v13 + 72) = (*(_BYTE *)(v13 + 48) & 0x40) != 0;
            *(_QWORD *)(v13 + 176) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)(v13 + 184) = 0;
            *(_DWORD *)(v13 + 208) = 1065353216;
            *(_DWORD *)(v13 + 216) = 1065353216;
            *(_DWORD *)(v13 + 224) = 1065353216;
            *(_DWORD *)(v13 + 272) = 1065353216;
            *(_DWORD *)(v13 + 344) = 1953064047;
            *(_QWORD *)(v13 + 664) = faq_scaledEditRateSupportValidator_one32nd_to_32;
            CFRetain(*(CFTypeRef *)(v13 + 80));
            v22 = *(opaqueCMBufferQueue **)(v13 + 64);
            v23 = *(void **)(v13 + 80);
            v39 = *MEMORY[0x1E0CA2E68];
            *(_OWORD *)&cf.value = *MEMORY[0x1E0CA2E68];
            v24 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
            cf.epoch = v24;
            v25 = CMBufferQueueInstallTrigger(v22, (CMBufferQueueTriggerCallback)faq_sourceDataBecameReady, v23, 7, &cf, (CMBufferQueueTriggerToken *)(v13 + 88));
            if ((_DWORD)v25)
              goto LABEL_46;
            if ((*(_BYTE *)(v13 + 48) & 2) != 0)
            {
              v26 = *(opaqueCMBufferQueue **)(v13 + 64);
              v27 = *(void **)(v13 + 80);
              cf = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
              v25 = CMBufferQueueInstallTrigger(v26, (CMBufferQueueTriggerCallback)faq_sourceEndOfDataReached, v27, 8, &cf, (CMBufferQueueTriggerToken *)(v13 + 96));
              if ((_DWORD)v25)
                goto LABEL_46;
            }
            CMNotificationCenterGetDefaultLocalCenter();
            v25 = FigNotificationCenterAddWeakListener();
            if ((_DWORD)v25)
              goto LABEL_46;
            CMNotificationCenterGetDefaultLocalCenter();
            v25 = FigNotificationCenterAddWeakListener();
            if ((_DWORD)v25)
              goto LABEL_46;
            *(_OWORD *)(v13 + 128) = v39;
            *(_QWORD *)(v13 + 144) = v24;
            v28 = FigSemaphoreCreate();
            *(_QWORD *)(v13 + 288) = v28;
            if (!v28)
              goto LABEL_45;
            v29 = (uint64_t *)(v13 + 168);
            v25 = AudioSampleBufferSplitterCreate((_QWORD *)(v13 + 168));
            if ((_DWORD)v25)
              goto LABEL_46;
            v25 = AudioSampleBufferSplitterSetSplitMethod((_DWORD *)*v29, 3);
            if ((_DWORD)v25)
              goto LABEL_46;
            v25 = AudioSampleBufferSplitterSetMaxNumberOfSplitSampleBuffers(*v29, 3);
            if ((_DWORD)v25)
              goto LABEL_46;
            MEMORY[0x19402EA0C](*(_QWORD *)(v13 + 24));
            v30 = FigSubAudioQueueCreate((_BYTE *)v13, a2, Value, MEMORY[0x1E0CA2E68], (uint64_t *)v40);
            if ((_DWORD)v30)
            {
              v31 = v30;
              MEMORY[0x19402EA24](*(_QWORD *)(v13 + 24));
              if (v40[0])
                CFRelease(v40[0]);
              goto LABEL_33;
            }
            v32 = v40[0];
            if (!*(_BYTE *)(v13 + 16))
              CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v13 + 176), 0, v40[0]);
            MEMORY[0x19402EA24](*(_QWORD *)(v13 + 24));
            if (v32)
              CFRelease(v32);
            cf.value = (CMTimeValue)CFSTR("com.apple.coremedia.audioqueue.source");
            v33 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v31 = FigThreadCreate();
            if ((_DWORD)v31)
            {
              FigSignalErrorAt();
              if (!v33)
                goto LABEL_41;
            }
            else if (!v33)
            {
LABEL_41:
              if ((_DWORD)v31)
              {
LABEL_33:
                CFRelease((CFTypeRef)v13);
                return v31;
              }
              *(_QWORD *)(v13 + 416) = v13;
              v34 = MEMORY[0x1E0CA2E18];
              v35 = *MEMORY[0x1E0CA2E18];
              *(_OWORD *)(v13 + 424) = *MEMORY[0x1E0CA2E18];
              v36 = *(_QWORD *)(v34 + 16);
              *(_QWORD *)(v13 + 440) = v36;
              *(_OWORD *)(v13 + 448) = v35;
              *(_QWORD *)(v13 + 464) = v36;
              *(_OWORD *)(v13 + 472) = v35;
              *(_QWORD *)(v13 + 488) = v36;
              *(_QWORD *)(v13 + 512) = v36;
              *(_OWORD *)(v13 + 496) = v35;
              *(_OWORD *)(v13 + 520) = v35;
              *(_QWORD *)(v13 + 536) = v36;
              *(_QWORD *)(v13 + 560) = v36;
              *(_OWORD *)(v13 + 544) = v35;
              *(_QWORD *)(v13 + 328) = v36;
              *(_OWORD *)(v13 + 312) = v35;
              v37 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v13 + 32));
              *(_QWORD *)(v13 + 336) = v37;
              if (v37)
              {
                dispatch_source_set_timer(v37, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
                dispatch_set_context(*(dispatch_object_t *)(v13 + 336), (void *)v13);
                dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v13 + 336), (dispatch_function_t)faq_wakeupToDiscard);
                *(_QWORD *)(v13 + 744) = voucher_copy();
                dispatch_resume(*(dispatch_object_t *)(v13 + 336));
                *(_BYTE *)(v13 + 738) = 1;
                v31 = 0;
                *(_DWORD *)(v13 + 764) = FigAtomicIncrement32();
                *a6 = v13;
                return v31;
              }
LABEL_45:
              v25 = FigSignalErrorAt();
LABEL_46:
              v31 = v25;
              goto LABEL_33;
            }
            CFRelease(v33);
            goto LABEL_41;
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigAudioQueueGetTypeID()
{
  MEMORY[0x19402F294](&FigAudioQueueGetTypeID_sRegisterFAQTypeOnce, faq_registerFAQType);
  return gFAQID;
}

uint64_t FigSubAudioQueueCreate(_BYTE *cf, const opaqueCMFormatDescription *a2, CMTimeValue a3, uint64_t a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v11;
  uint64_t v12;
  uint64_t Key;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __int128 *v21;
  uint64_t v22;
  unsigned int v23;
  int v25;
  UInt32 v26;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const AudioStreamBasicDescription *v28;
  void *v29;
  const __CFString *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  CFMutableStringRef Mutable;
  const __CFDictionary *Extensions;
  const __CFNumber *Value;
  unsigned int *v37;
  unint64_t v38;
  __int128 *v39;
  const void *MagicCookie;
  const __CFDictionary *Extension;
  const __CFDictionary *v42;
  CFTypeID v43;
  int v44;
  void *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  _OWORD *v52;
  CMTimeEpoch epoch;
  __int128 v54;
  __int128 *v55;
  uint64_t v56;
  int Parameter;
  float v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, const __CFString *, _QWORD, CMTime *);
  NSObject *v64;
  UInt32 v65;
  unsigned int v66;
  uint64_t *v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  NSObject *v71;
  dispatch_source_t v72;
  NSObject *v73;
  const void *v74;
  void *v75;
  CMTime v77;
  UInt32 v78;
  os_log_type_t type[4];
  UInt32 v80;
  char __str[16];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE ioPropertyDataSize[12];
  __int16 v87;
  _BYTE *v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  char *v92;
  __int16 v93;
  unsigned int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  unsigned int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  CFMutableStringRef v108;
  CMTime outPropertyData[5];
  uint64_t v110;
  CFRange v111;

  v110 = *MEMORY[0x1E0C80C00];
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  *(_OWORD *)__str = 0u;
  if (cf[16])
    return 0;
  if (FigSubAudioQueueCreate_initValidSubAQSetOnce != -1)
    dispatch_once_f(&FigSubAudioQueueCreate_initValidSubAQSetOnce, 0, (dispatch_function_t)subaq_createValidSubAQSetAndLock);
  CFGetAllocator(cf);
  MEMORY[0x19402F294](&FigSubAudioQueueGetTypeID_sRegisterFSAQTypeOnce, fsaq_registerFSAQType);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v11 = Instance;
    v12 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_QWORD *)(v11 + 24) = v12;
    if (!v12)
    {
      v33 = 4294954355;
      goto LABEL_130;
    }
    Key = FigCFWeakReferenceTableAddValueAndGetKey();
    if ((_DWORD)Key)
      goto LABEL_129;
    FigCFWeakReferenceStore();
    Key = subaq_setupForRichestDecode(v11, a2);
    if ((_DWORD)Key)
      goto LABEL_129;
    LODWORD(outPropertyData[0].value) = 0;
    *(_DWORD *)ioPropertyDataSize = 4;
    if (AudioFormatGetProperty(0x66646570u, 0x28u, *(const void **)(v11 + 64), (UInt32 *)ioPropertyDataSize, outPropertyData))
    {
      v14 = 1;
    }
    else
    {
      v14 = LODWORD(outPropertyData[0].value) == 0;
    }
    v15 = !v14;
    *(_BYTE *)(v11 + 104) = v15;
    v16 = FigSimpleMutexCreate();
    *(_QWORD *)(v11 + 136) = v16;
    if (!v16)
      goto LABEL_128;
    v17 = FigSimpleMutexCreate();
    *(_QWORD *)(v11 + 336) = v17;
    if (!v17)
      goto LABEL_128;
    *(_BYTE *)(v11 + 544) = 1;
    v18 = FigSimpleMutexCreate();
    *(_QWORD *)(v11 + 536) = v18;
    if (!v18)
      goto LABEL_128;
    v19 = FigReadWriteLockCreate();
    *(_QWORD *)(v11 + 648) = v19;
    if (!v19)
      goto LABEL_128;
    FigReadWriteLockLockForWrite();
    CFSetAddValue((CFMutableSetRef)gValidFigSubAudioQueueSet, (const void *)v11);
    FigReadWriteLockUnlockForWrite();
    *(_OWORD *)&v77.value = *(_OWORD *)a4;
    v77.epoch = *(_QWORD *)(a4 + 16);
    v78 = 0;
    v20 = (uint64_t *)(v11 + 40);
    v21 = (__int128 *)MEMORY[0x1E0CA2E18];
    if (*(_QWORD *)(v11 + 40))
    {
      FigSignalErrorAt();
    }
    else if (!cf[16])
    {
      MEMORY[0x19402EA0C](*((_QWORD *)cf + 3));
      if (cf[16])
      {
        FigSignalErrorAt();
        v33 = 0;
        goto LABEL_31;
      }
      v22 = *(_QWORD *)(v11 + 64);
      v23 = *((_DWORD *)cf + 12);
      if ((v23 & 0x10) == 0 && *(_DWORD *)(v22 + 8) == 1633771875)
        v25 = (v23 >> 1) & 0x10;
      else
        v25 = (v23 >> 1) & 0x10 | 4;
      v26 = v25 & 0xFFFFFFFE | (v23 >> 2) & 1;
      *(_DWORD *)(v11 + 100) = (int)(*(double *)v22 + 0.5);
      if (dword_1EE2A2A48)
      {
        v80 = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRetain(*(CFTypeRef *)(v11 + 24));
      v28 = *(const AudioStreamBasicDescription **)(v11 + 64);
      v29 = *(void **)(v11 + 24);
      v30 = (const __CFString *)*MEMORY[0x1E0C9B270];
      v31 = (const void *)*((_QWORD *)cf + 33);
      outPropertyData[0] = v77;
      v32 = FigAudioQueueTimingShimNewOutput(v28, (void (__cdecl *)(void *, AudioQueueRef, AudioQueueBufferRef))subaq_outputBufferBecameReady, v29, 0, v30, v26, v31, (__int128 *)&outPropertyData[0].value, (uint64_t *)(v11 + 40));
      if ((_DWORD)v32)
      {
        v33 = v32;
        FigSignalErrorAt();
        CFRelease(*(CFTypeRef *)(v11 + 24));
LABEL_31:
        MEMORY[0x19402EA24](*((_QWORD *)cf + 3));
        goto LABEL_117;
      }
      outPropertyData[0].value = a3;
      if (cf[16])
      {
        Mutable = 0;
        goto LABEL_74;
      }
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      if (a3)
      {
        FigAudioQueueTimingShimSetProperty(*v20, 0x61716364u, outPropertyData, 8u);
        CFStringAppendFormat(Mutable, 0, CFSTR(", DeviceUID %@"), outPropertyData[0].value);
      }
      Extensions = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(v11 + 56));
      if (Extensions)
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(Extensions, CFSTR("AudibleGroupID"));
        if (Value)
        {
          *(_DWORD *)ioPropertyDataSize = 0;
          CFNumberGetValue(Value, kCFNumberSInt32Type, ioPropertyDataSize);
          FigAudioQueueTimingShimSetProperty(*v20, 0x61676964u, ioPropertyDataSize, 4u);
          CFStringAppendFormat(Mutable, 0, CFSTR(", Audible Group ID %d"), *(unsigned int *)ioPropertyDataSize);
        }
      }
      v37 = *(unsigned int **)(v11 + 80);
      if (v37)
      {
        if (*(_QWORD *)(v11 + 88))
        {
          CFStringAppendFormat(Mutable, 0, CFSTR(", LayoutTag: 0x%08x, Channels: %u"), *v37, *(unsigned int *)(*(_QWORD *)(v11 + 64) + 28));
          v38 = *(_QWORD *)(v11 + 88);
          if (!HIDWORD(v38))
            FigAudioQueueTimingShimSetProperty(*(_QWORD *)(v11 + 40), 0x6171636Cu, *(const void **)(v11 + 80), v38);
        }
      }
      v39 = v21;
      *(_QWORD *)ioPropertyDataSize = 0;
      MagicCookie = CMAudioFormatDescriptionGetMagicCookie(*(CMAudioFormatDescriptionRef *)(v11 + 56), (size_t *)ioPropertyDataSize);
      if (MagicCookie && *(_QWORD *)ioPropertyDataSize)
        FigAudioQueueTimingShimSetProperty(*v20, 0x61716D63u, MagicCookie, *(UInt32 *)ioPropertyDataSize);
      Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(v11 + 56), (CFStringRef)*MEMORY[0x1E0CA2240]);
      *(_QWORD *)ioPropertyDataSize = Extension;
      if (Extension)
      {
        v42 = Extension;
        v43 = CFGetTypeID(Extension);
        if (v43 == CFDictionaryGetTypeID() && CFDictionaryGetCount(v42) >= 1)
          FigAudioQueueTimingShimSetProperty(*v20, 0x69736F65u, ioPropertyDataSize, 8u);
      }
      *(_DWORD *)ioPropertyDataSize = 0;
      FigAudioQueueTimingShimSetProperty(*v20, 0x71726169u, ioPropertyDataSize, 4u);
      if ((*((_WORD *)cf + 24) & 0x4004) != 0)
      {
LABEL_59:
        if (cf[672] || *((float *)cf + 189) != 0.0)
        {
          *(_DWORD *)ioPropertyDataSize = 1;
          CFStringAppendFormat(Mutable, 0, CFSTR(", ScheduledRate2"));
          FigAudioQueueTimingShimSetProperty(*v20, 0x71737232u, ioPropertyDataSize, 4u);
        }
        v21 = v39;
        if (cf[688])
        {
          subaq_setSweepFilterEnable((uint64_t)cf, v11, cf[688]);
          CFStringAppendFormat(Mutable, 0, CFSTR(", SweepFilter"));
        }
        *(_DWORD *)ioPropertyDataSize = (*((_DWORD *)cf + 12) >> 8) & 1;
        FigAudioQueueTimingShimSetProperty(*v20, 0x715F7370u, ioPropertyDataSize, 4u);
        if (*(_DWORD *)ioPropertyDataSize)
          CFStringAppendFormat(Mutable, 0, CFSTR(", Spatialization"));
        if (FigAudioFormatDescriptionGetCinematicAudioEffectEligibility())
          *(_WORD *)(v11 + 720) = 1;
        if ((cf[49] & 8) != 0)
        {
          *(_DWORD *)ioPropertyDataSize = 1;
          FigAudioQueueTimingShimSetProperty(*v20, 0x6369616Fu, ioPropertyDataSize, 4u);
          CFStringAppendFormat(Mutable, 0, CFSTR(", UnaccompaniedByVisuals"));
        }
        *(_DWORD *)ioPropertyDataSize = 1;
        FigAudioQueueTimingShimSetProperty(*v20, 0x24696E73u, ioPropertyDataSize, 4u);
        if ((cf[49] & 2) == 0)
        {
          *(_DWORD *)ioPropertyDataSize = 1;
          FigAudioQueueTimingShimSetProperty(*v20, 0x73747263u, ioPropertyDataSize, 4u);
          CFStringAppendFormat(Mutable, 0, CFSTR(", PauseAfterConfigChange"));
        }
        *(_DWORD *)ioPropertyDataSize = 1;
        FigAudioQueueTimingShimSetProperty(*v20, 0x7066666Cu, ioPropertyDataSize, 4u);
        if (CFStringGetLength(Mutable) >= 3)
        {
          v111.location = 0;
          v111.length = 2;
          CFStringDelete(Mutable, v111);
        }
LABEL_74:
        v47 = subaq_buildAudioProcssingUnits((uint64_t)cf, (uint64_t *)v11);
        if ((_DWORD)v47)
          goto LABEL_137;
        v48 = FigUInt32NearestPowerOfTwo();
        if (v48 >= 0x20000)
          v49 = 0x20000;
        else
          v49 = v48;
        v50 = v49 >> 2;
        if (v49 >> 2 >= 0x4000)
          v50 = 0x4000;
        LODWORD(outPropertyData[0].value) = v49;
        *(_DWORD *)ioPropertyDataSize = v50;
        FigAudioQueueTimingShimSetProperty(*(_QWORD *)(v11 + 40), 0x64636266u, outPropertyData, 4u);
        FigAudioQueueTimingShimSetProperty(*(_QWORD *)(v11 + 40), 0x6463626Cu, ioPropertyDataSize, 4u);
        v51 = *(_DWORD *)(*(_QWORD *)(v11 + 64) + 8);
        if (v51 == 1633772400 || v51 == 1633772392)
        {
          v80 = *(_DWORD *)ioPropertyDataSize >> 1;
          FigAudioQueueTimingShimSetProperty(*v20, 0x646D6663u, &v80, 4u);
        }
        v52 = (_OWORD *)(v11 + 108);
        *(_DWORD *)ioPropertyDataSize = 0;
        v80 = 4;
        if (FigAudioQueueTimingShimGetProperty(*(_QWORD *)(v11 + 40), 0x64636266u, ioPropertyDataSize, &v80))
        {
          *v52 = *v21;
          epoch = *((_QWORD *)v21 + 2);
        }
        else
        {
          CMTimeMake(outPropertyData, *(unsigned int *)ioPropertyDataSize, *(_DWORD *)(v11 + 100));
          *v52 = *(_OWORD *)&outPropertyData[0].value;
          epoch = outPropertyData[0].epoch;
        }
        *(_QWORD *)(v11 + 124) = epoch;
        v47 = subaq_setCPECryptorPropertyOnAudioQueue((uint64_t)cf, v11);
        if ((_DWORD)v47)
        {
LABEL_137:
          v33 = v47;
        }
        else
        {
          v54 = *v21;
          *(_OWORD *)(v11 + 408) = *v21;
          v55 = v21;
          v56 = *((_QWORD *)v21 + 2);
          *(_QWORD *)(v11 + 424) = v56;
          *(_OWORD *)(v11 + 432) = v54;
          *(_QWORD *)(v11 + 448) = v56;
          *(_OWORD *)(v11 + 456) = v54;
          *(_QWORD *)(v11 + 472) = v56;
          LODWORD(outPropertyData[0].value) = 1065353216;
          Parameter = FigAudioQueueTimingShimGetParameter(*(_QWORD *)(v11 + 40), 0x15u, (AudioQueueParameterValue *)outPropertyData);
          v58 = *(float *)&outPropertyData[0].value;
          if (Parameter)
            v58 = 1.0;
          *(float *)(v11 + 532) = v58;
          v59 = *(void **)(v11 + 32);
          v60 = FigAudioQueueTimingShimAddPropertyListener(*(_QWORD *)(v11 + 40), 0x71637665u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v59);
          if ((_DWORD)v60)
            goto LABEL_131;
          v60 = FigAudioQueueTimingShimAddPropertyListener(*v20, 0x61747072u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v59);
          if ((_DWORD)v60)
            goto LABEL_131;
          v60 = FigAudioQueueTimingShimAddPropertyListener(*v20, 0x6171726Eu, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_startStopListener, v59);
          if ((_DWORD)v60)
            goto LABEL_131;
          if (cf[72])
          {
            v60 = FigAudioQueueTimingShimAddPropertyListener(*v20, 0x666C7368u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v59);
            if ((_DWORD)v60)
              goto LABEL_131;
          }
          if ((cf[49] & 2) == 0)
          {
            v60 = FigAudioQueueTimingShimAddPropertyListener(*v20, 0x72746F72u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v59);
            if ((_DWORD)v60)
              goto LABEL_131;
            v60 = FigAudioQueueTimingShimAddPropertyListener(*v20, 0x69737470u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v59);
            if ((_DWORD)v60)
              goto LABEL_131;
          }
          *(_QWORD *)(v11 + 656) = 0;
          v78 = 8;
          FigAudioQueueTimingShimGetProperty(*(_QWORD *)(v11 + 40), 0x71646C73u, (void *)(v11 + 656), &v78);
          *(_QWORD *)(v11 + 664) = *(_QWORD *)(v11 + 656);
          v60 = FigAudioQueueTimingShimAddPropertyListener(*(_QWORD *)(v11 + 40), 0x71646C73u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v59);
          if ((_DWORD)v60
            || (v60 = FigAudioQueueTimingShimAddPropertyListener(*v20, 0x6864666Du, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v59), (_DWORD)v60))
          {
LABEL_131:
            v33 = v60;
          }
          else
          {
            v61 = *((_QWORD *)cf + 33);
            if (!v61)
              goto LABEL_106;
            outPropertyData[0].value = 0;
            v62 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (!v62)
              goto LABEL_106;
            v63 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(v62 + 16);
            if (!v63 || v63(v61, CFSTR("FAS_MXSession"), *MEMORY[0x1E0C9AE00], outPropertyData))
              goto LABEL_106;
            v33 = FigAudioQueueTimingShimSetProperty(*v20, 0x636D7873u, outPropertyData, 8u);
            if (outPropertyData[0].value)
              CFRelease((CFTypeRef)outPropertyData[0].value);
            if (!(_DWORD)v33)
            {
LABEL_106:
              if (dword_1EE2A2A48)
              {
                v80 = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v65 = v80;
                if (os_log_type_enabled(v64, type[0]))
                  v66 = v65;
                else
                  v66 = v65 & 0xFFFFFFFE;
                if (v66)
                {
                  v67 = *(uint64_t **)(v11 + 64);
                  v68 = *((_DWORD *)v67 + 2);
                  v69 = *((_DWORD *)v67 + 5);
                  v70 = *v67;
                  *(_DWORD *)ioPropertyDataSize = 136317954;
                  *(_QWORD *)&ioPropertyDataSize[4] = "subaq_buildCAAudioQueue";
                  v87 = 2048;
                  v88 = cf;
                  v89 = 2048;
                  v90 = v11;
                  v91 = 2082;
                  v92 = cf + 768;
                  v93 = 1024;
                  v94 = HIBYTE(v68);
                  v95 = 1024;
                  v96 = BYTE2(v68);
                  v97 = 1024;
                  v98 = BYTE1(v68);
                  v99 = 1024;
                  v100 = v68;
                  v101 = 1024;
                  v102 = v68;
                  v103 = 1024;
                  v104 = v69;
                  v105 = 2048;
                  v106 = v70;
                  v107 = 2114;
                  v108 = Mutable;
                  _os_log_send_and_compose_impl();
                }
                v21 = v55;
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v33 = 0;
                goto LABEL_115;
              }
              v33 = 0;
            }
          }
          v21 = v55;
        }
LABEL_115:
        MEMORY[0x19402EA24](*((_QWORD *)cf + 3));
        if (Mutable)
          CFRelease(Mutable);
LABEL_117:
        if ((_DWORD)v33)
        {
LABEL_130:
          CFRelease((CFTypeRef)v11);
          return v33;
        }
        goto LABEL_118;
      }
      v44 = *((_DWORD *)cf + 86);
      *(_DWORD *)ioPropertyDataSize = 1;
      *(_DWORD *)type = v44;
      v80 = 0;
      CFStringAppendFormat(Mutable, 0, CFSTR(", TimePitch (Algorithm '%c%c%c%c')"), HIBYTE(v44), BYTE2(v44), BYTE1(v44), v44);
      FigAudioQueueTimingShimSetProperty(*v20, 0x715F7470u, ioPropertyDataSize, 4u);
      v45 = faq_scaledEditRateSupportValidator_one32nd_to_32;
      if (v44 > 1953064046)
      {
        if (v44 != 1953064047)
        {
          v46 = 1987276900;
LABEL_55:
          if (v44 != v46)
            v45 = faq_scaledEditRateSupportValidator_noScaleAllowed;
        }
      }
      else
      {
        if (v44 != 1819376236)
        {
          v46 = 1936745827;
          goto LABEL_55;
        }
        v45 = faq_scaledEditRateSupportValidator_lowQualityZeroLatency;
      }
      *((_QWORD *)cf + 83) = v45;
      FigAudioQueueTimingShimSetProperty(*v20, 0x71747061u, type, 4u);
      FigAudioQueueTimingShimSetProperty(*v20, 0x71747062u, &v80, 4u);
      goto LABEL_59;
    }
LABEL_118:
    if (*((_QWORD *)cf + 89))
    {
      Key = faq_connectToOfflineMixer(cf, v11);
      if ((_DWORD)Key)
        goto LABEL_129;
    }
    Key = (uint64_t)subaq_ensureClock((uint64_t)cf, v11);
    if ((_DWORD)Key)
      goto LABEL_129;
    *(_OWORD *)(v11 + 616) = *v21;
    *(_QWORD *)(v11 + 632) = *((_QWORD *)v21 + 2);
    snprintf(__str, 0x50uLL, "com.apple.coremedia.subAQ.timerQueue.%s", cf + 768);
    v71 = FigDispatchQueueCreateWithPriority();
    *(_QWORD *)(v11 + 672) = v71;
    if (v71)
    {
      *(_BYTE *)(v11 + 688) = 0;
      v72 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v71);
      *(_QWORD *)(v11 + 680) = v72;
      if (v72)
      {
        v73 = v72;
        v74 = *(const void **)(v11 + 24);
        if (v74)
          v75 = (void *)CFRetain(v74);
        else
          v75 = 0;
        dispatch_set_context(v73, v75);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v11 + 680), (dispatch_function_t)subaq_deferredPerformStartupSync);
        dispatch_source_set_timer(*(dispatch_source_t *)(v11 + 680), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
        dispatch_resume(*(dispatch_object_t *)(v11 + 680));
        v33 = 0;
        *a5 = v11;
        return v33;
      }
    }
LABEL_128:
    Key = FigSignalErrorAt();
LABEL_129:
    v33 = Key;
    goto LABEL_130;
  }
  return FigSignalErrorAt();
}

void faq_wakeupToDiscard(uint64_t a1)
{
  void *v1;

  if (a1 && !*(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 288) && (*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 568)))
  {
    os_retain(*(void **)(a1 + 744));
    voucher_adopt();
    FigSemaphoreSignal();
    v1 = (void *)voucher_adopt();
    os_release(v1);
  }
}

uint64_t faq_disconnectFromOfflineMixer(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  const void *v4;

  v2 = *(_QWORD *)(result + 712);
  if (v2)
  {
    if (*(_BYTE *)(a2 + 642))
    {
      v4 = (const void *)result;
      FigAudioQueueTimingShimGetAudioQueue(*(_QWORD *)(a2 + 40));
      result = FigAudioQueueOfflineMixerDisconnectAudioQueue(v2, v4);
      *(_BYTE *)(a2 + 642) = 0;
    }
  }
  return result;
}

uint64_t faq_offlineMixerNeedsMoreInputData(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 298) = 1;
    return FigSemaphoreSignal();
  }
  return result;
}

void faq_destroyTransitionRecord(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[10];
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t faq_removeAudioProcessingTapListeners(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);

  if (*(_QWORD *)(result + 728))
  {
    v1 = result;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v2 = *(_QWORD *)(v1 + 728);
    result = CMBaseObjectGetVTable();
    v3 = *(_QWORD **)(result + 8);
    if (*v3 >= 2uLL)
    {
      v4 = (uint64_t (*)(uint64_t))v3[8];
      if (v4)
        return v4(v2);
    }
  }
  return result;
}

__n128 faq_clearSeamHandlingState(__n128 *a1)
{
  const void *v2;
  const void *v3;
  __n128 *v4;
  __n128 result;

  if (a1)
  {
    v2 = (const void *)a1[7].n128_u64[1];
    if (v2)
    {
      CFRelease(v2);
      a1[7].n128_u64[1] = 0;
    }
    v3 = (const void *)a1[10].n128_u64[0];
    if (v3)
    {
      CFRelease(v3);
      a1[10].n128_u64[0] = 0;
    }
    v4 = (__n128 *)MEMORY[0x1E0CA2E68];
    a1[7].n128_u64[0] = 0;
    result = *v4;
    a1[8] = *v4;
    a1[9].n128_u64[0] = v4[1].n128_u64[0];
    a1[9].n128_u64[1] = 0;
  }
  return result;
}

uint64_t FigAudioQueueRequestTransitionCallback(uint64_t a1, __int128 *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1 || (*((_DWORD *)a2 + 3) & 0x1D) != 1 || !a3 || !a4)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
  {
    v14 = FigSignalErrorAt();
  }
  else
  {
    v10 = (char *)malloc_type_calloc(1uLL, 0x60uLL, 0x10E0040BC008D63uLL);
    if (v10)
    {
      v11 = v10;
      *((_QWORD *)v10 + 1) = a4;
      *((_QWORD *)v10 + 2) = a5;
      v12 = *a2;
      *((_QWORD *)v10 + 5) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(v10 + 24) = v12;
      v13 = MEMORY[0x1E0CA2E18];
      *((_OWORD *)v10 + 3) = *MEMORY[0x1E0CA2E18];
      *((_QWORD *)v10 + 8) = *(_QWORD *)(v13 + 16);
      *((_DWORD *)v10 + 18) = 0;
      *((_QWORD *)v10 + 10) = a3;
      CFRetain(a3);
      v14 = 0;
      v11[88] = 0;
      *(_QWORD *)v11 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v11;
      ++*(_DWORD *)(a1 + 192);
    }
    else
    {
      v14 = 4294954355;
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v14;
}

uint64_t faq_enqueueSourceData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  float v10;
  _BYTE *ValueAtIndex;
  uint64_t v12;
  int v13;
  opaqueCMSampleBuffer *v14;
  opaqueCMSampleBuffer *v15;
  float v16;
  CMTimeEpoch epoch;
  unsigned int v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v20;
  unsigned int v21;
  int v22;
  float v23;
  double v24;
  double v25;
  float v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  Float64 Seconds;
  Float64 v33;
  const void *Decryptor;
  const void *v35;
  const void *v36;
  CFTypeID v37;
  uint64_t TypeID;
  opaqueCMSampleBuffer *v39;
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  const __CFNumber *v44;
  float *v45;
  uint64_t v46;
  CFTypeRef v47;
  const void *v48;
  int v49;
  const void *v50;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  Float64 v55;
  Float64 v56;
  dispatch_time_t v57;
  NSObject *global_queue;
  CFTypeRef v59;
  _QWORD *v60;
  CFTypeRef v61;
  __int128 v62;
  __int128 v63;
  CFTypeRef v64;
  CFTypeRef v65;
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *v67;
  const void *MagicCookie;
  const __CFNumber *v69;
  float v70;
  const __CFDictionary *v71;
  _BOOL4 v72;
  float v73;
  int v74;
  int v75;
  opaqueCMSampleBuffer *v76;
  int v77;
  uint64_t v78;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v80;
  CFIndex v81;
  const __CFDictionary *v82;
  const void *Value;
  const void *v84;
  uint64_t v85;
  NSObject *v86;
  unsigned int v87;
  unsigned int v88;
  int BufferCount;
  Float64 v90;
  uint64_t v91;
  int v92;
  int v93;
  double v94;
  uint64_t v95;
  const __CFDictionary *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  char v102;
  int v103;
  CFIndex v104;
  char v105;
  const __CFArray *v106;
  size_t v107;
  uint64_t v108;
  CFIndex v109;
  _QWORD *v110;
  opaqueCMSampleBuffer *v111;
  opaqueCMSampleBuffer *v112;
  OpaqueCMBlockBuffer *DataBuffer;
  OSStatus DataPointer;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  CFTypeRef v119;
  OSStatus BufferWithMemory;
  char v121;
  AudioQueueBuffer *v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  BOOL v127;
  UInt32 v128;
  AudioQueueBuffer **v129;
  uint64_t v130;
  OpaqueCMBlockBuffer *v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  opaqueCMSampleBuffer *v136;
  int v137;
  uint64_t v138;
  _BOOL8 v139;
  CMItemIndex v140;
  uint64_t v141;
  int32_t v142;
  int32_t v143;
  int64_t v144;
  __int128 v145;
  __int128 v146;
  CMItemCount NumSamples;
  AudioStreamPacketDescription *v148;
  CMTimeValue v149;
  const __CFAllocator *v150;
  AudioStreamPacketDescription *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  CMTimeFlags flags;
  CMTimeEpoch v158;
  uint64_t v159;
  int32_t v160;
  int v161;
  double *v162;
  CFTypeRef v163;
  CMTimeEpoch v164;
  uint64_t v165;
  CMTimeFlags v166;
  uint64_t v167;
  NSObject *v168;
  unsigned int v169;
  unsigned int v170;
  Float64 v171;
  Float64 v172;
  Float64 v173;
  int32_t v174;
  int32_t v175;
  BOOL v176;
  int v177;
  float v178;
  double v179;
  double v180;
  float v181;
  int v182;
  CMTimeEpoch v183;
  const __CFDictionary *v184;
  const __CFDictionary *v185;
  uint64_t v186;
  uint64_t v187;
  _BOOL4 v188;
  int v189;
  int32_t v190;
  char v191;
  uint64_t v192;
  CMTimeEpoch v193;
  _BOOL4 v194;
  NSObject *v195;
  unsigned int v196;
  unsigned int v197;
  Float64 v198;
  int v199;
  int v200;
  double v201;
  char v202;
  __int128 v203;
  CMTimeFlags v204;
  CMTimeEpoch v205;
  unsigned int v206;
  int v207;
  float v208;
  double v209;
  float v210;
  int v211;
  NSObject *v212;
  unsigned int v213;
  unsigned int v214;
  double v215;
  double v216;
  Float64 v217;
  Float64 v218;
  double v219;
  int v220;
  int v221;
  double v222;
  int v223;
  const __CFAllocator *v224;
  uint64_t v225;
  double v226;
  int v227;
  uint64_t v228;
  int v229;
  double v230;
  _QWORD *v231;
  uint64_t v232;
  AudioQueueBuffer **v233;
  _BYTE *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  AudioQueueBuffer *v239;
  const void *v240;
  uint64_t v241;
  uint64_t v242;
  int32_t v243;
  NSObject *v244;
  unsigned int v245;
  unsigned int v246;
  OpaqueCMClock *HostTimeClock;
  uint64_t v248;
  NSObject *v249;
  unsigned int v250;
  unsigned int v251;
  Float64 v252;
  Float64 v253;
  Float64 v254;
  OpaqueCMClock *v255;
  NSObject *v256;
  unsigned int v257;
  unsigned int v258;
  __int128 *v259;
  _BYTE *v260;
  const void *v261;
  _QWORD *v262;
  _QWORD *i;
  __int128 v264;
  NSObject *v265;
  unsigned int v266;
  unsigned int v267;
  Float64 v268;
  __int128 v269;
  const char *v270;
  int32_t v271;
  NSObject *v272;
  unsigned int v273;
  unsigned int v274;
  _BYTE *v275;
  NSObject *v276;
  unsigned int v277;
  unsigned int v278;
  const void *v279;
  OSStatus v280;
  uint64_t v281;
  uint64_t result;
  CMTimeValue v283;
  CMTimeScale v284;
  uint64_t CountOfSequentialSamplesWithSeamIdentifier;
  CFTypeRef v286;
  uint64_t v287;
  _OWORD *v288;
  _OWORD *v289;
  _BYTE *v290;
  char v291;
  int v292;
  _OWORD *v293;
  uint64_t count;
  size_t counta;
  BOOL v296;
  void *v297;
  const __CFString *v298;
  const __CFAllocator *allocator;
  CMTimeFlags v300;
  _OWORD *v301;
  _QWORD *v302;
  void *v303;
  const __CFString *v304;
  CMTimeFlags v305;
  const __CFString *v306;
  _OWORD *v307;
  CFTypeRef v308;
  const __CFString *v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  const __CFString *v314;
  const __CFString *v315;
  const __CFString *v316;
  _OWORD *v317;
  const __CFString *v318;
  const __CFString *v319;
  CMTimeValue *v320;
  _OWORD *v321;
  uint64_t v322;
  const __CFString *v323;
  const __CFString *key;
  uint64_t v325;
  int v326;
  int v327;
  unint64_t v328;
  int v329;
  uint64_t hostTime;
  UInt32 v331;
  int v332;
  const __CFString *v333;
  const __CFString *v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  CMTimeEpoch v339;
  _OWORD *v340;
  _OWORD *v341;
  CMTimeEpoch v342;
  _OWORD *v343;
  int *v344;
  CMTimeEpoch v345;
  _QWORD *v346;
  _QWORD *v347;
  CMTimeFlags v348;
  _QWORD *v349;
  CMTimeValue v350;
  uint64_t v351;
  int v352;
  CMTimeValue v353;
  int v354;
  __int128 v355;
  __int128 v356;
  opaqueCMSampleBuffer *target;
  int v358;
  CMTimeEpoch v359;
  CMTime v360;
  CMTime v361;
  CMTime v362;
  CMTime v363;
  CMTime v364;
  CMTime time;
  CMTime v366;
  CMTime v367;
  CFArrayRef theArray;
  int v369;
  void *values;
  CFTypeRef cf;
  CMTime v372;
  CMTime v373;
  CMTime v374;
  CMTime duration;
  CMTime start;
  _BYTE rhs[32];
  __int128 v378;
  __int128 v379;
  _BYTE lhs[32];
  __int128 v381;
  __int128 v382;
  AudioStreamPacketDescription *packetDescriptionsPointerOut;
  CMTime v384;
  CMTime packetDescriptionsSizeOut;
  CMTime v386;
  CMTime v387;
  CMTime presentationTimeStamp;
  CMTime type;
  _BYTE time2[32];
  _BYTE v391[22];
  _BYTE v392[14];
  __int16 v393;
  Float64 v394;
  __int16 v395;
  double v396;
  __int16 v397;
  double v398;
  __int16 v399;
  double v400;
  __int16 v401;
  double v402;
  CMTimeValue v403;
  CMTimeScale timescale;
  CMTime end;
  CMTime v406;
  CMSampleTimingInfo time1;
  uint64_t v408;

  v408 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16) || !*(_QWORD *)(a1 + 64) || !*(_BYTE *)(a1 + 297))
    JUMPOUT(0x19402EA24);
  v358 = 0;
  LODWORD(v4) = 0;
  v5 = 0;
  v6 = 0.2;
  v7 = -0.2;
  v8 = 0x40000000;
  v9 = 1.0;
  v10 = 1.0;
  key = (const __CFString *)*MEMORY[0x1E0CA4E40];
  v323 = (const __CFString *)*MEMORY[0x1E0CA2678];
  v318 = (const __CFString *)*MEMORY[0x1E0CA26E0];
  v319 = (const __CFString *)*MEMORY[0x1E0CA26D8];
  v314 = (const __CFString *)*MEMORY[0x1E0CA4E50];
  v315 = (const __CFString *)*MEMORY[0x1E0CA2658];
  v316 = (const __CFString *)*MEMORY[0x1E0CA2718];
  v306 = (const __CFString *)*MEMORY[0x1E0CA4E60];
  v304 = (const __CFString *)*MEMORY[0x1E0CA2708];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v297 = (void *)*MEMORY[0x1E0CA4E28];
  v298 = (const __CFString *)*MEMORY[0x1E0CA26C8];
  v334 = (const __CFString *)*MEMORY[0x1E0CA2728];
  v333 = (const __CFString *)*MEMORY[0x1E0CA2720];
  v308 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v309 = (const __CFString *)*MEMORY[0x1E0CA2698];
  v344 = (int *)(a1 + 300);
  v307 = (_OWORD *)(a1 + 448);
  v346 = (_QWORD *)(a1 + 184);
  v321 = (_OWORD *)(a1 + 128);
  v322 = a1 + 416;
  v343 = (_OWORD *)(a1 + 544);
  v341 = (_OWORD *)(a1 + 520);
  v340 = (_OWORD *)(a1 + 472);
  v317 = (_OWORD *)(a1 + 352);
  v320 = (CMTimeValue *)(a1 + 312);
  v300 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v345 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v305 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
  v359 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  do
  {
    if (*(_BYTE *)(a1 + 16))
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
    if (!ValueAtIndex)
      break;
    v12 = (uint64_t)ValueAtIndex;
    if (ValueAtIndex[641])
      break;
    if ((_DWORD)a2)
    {
      if (!ValueAtIndex[104])
      {
        v5 = *(unsigned __int8 *)(a1 + 304);
        if (FigAtomicCompareAndSwap32())
        {
          if (!(_DWORD)v5)
            *(_BYTE *)(v12 + 545) = 1;
        }
      }
    }
    if (*(_BYTE *)(a1 + 16))
    {
      v13 = 0;
      continue;
    }
    if (!*(_BYTE *)(a1 + 298)
      && (*v344 > 7 || *v344 >= 2 && !*(_BYTE *)(a1 + 348) && *(_DWORD *)(v12 + 480) >= *(_DWORD *)(v12 + 100)))
    {
      v13 = 0;
      v22 = 0;
      v15 = 0;
      goto LABEL_78;
    }
    v14 = (opaqueCMSampleBuffer *)CMBufferQueueCopyHead(*(CMBufferQueueRef *)(a1 + 64));
    v15 = v14;
    if (!v14 || (*(_BYTE *)(a1 + 48) & 2) != 0 && !CMSampleBufferDataIsReady(v14))
    {
      if ((*(_BYTE *)(a1 + 48) & 2) != 0 && CMBufferQueueIsAtEndOfData(*(CMBufferQueueRef *)(a1 + 64)))
      {
        if (dword_1EE2A2A48)
        {
          *(_DWORD *)lhs = 0;
          rhs[0] = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v20 = *(_DWORD *)lhs;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)rhs[0]))
            v21 = v20;
          else
            v21 = v20 & 0xFFFFFFFE;
          if (v21)
          {
            *(_DWORD *)time2 = 136315650;
            *(_QWORD *)&time2[4] = "subaq_enqueueOneSourceSBuf";
            *(_WORD *)&time2[12] = 2048;
            *(_QWORD *)&time2[14] = a1;
            *(_WORD *)&time2[22] = 2048;
            *(_QWORD *)&time2[24] = v12;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        faq_stopAllAudioQueues(a1, 0);
        v13 = 0;
        v43 = 0;
        v22 = 1;
        goto LABEL_79;
      }
      goto LABEL_76;
    }
    v356 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v406.value = *MEMORY[0x1E0CA2E68];
    v406.epoch = v359;
    if (!*(_BYTE *)(a1 + 16))
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&time1.duration, v15);
      CMSampleBufferGetOutputDuration((CMTime *)rhs, v15);
      *(_OWORD *)lhs = *(_OWORD *)&time1.duration.value;
      *(_QWORD *)&lhs[16] = time1.duration.epoch;
      CMTimeAdd((CMTime *)time2, (CMTime *)lhs, (CMTime *)rhs);
      subaq_getCurrentQueueTime(v12, &type);
      subaq_convertAQTimeToMediaTime((CMTime *)a1, &type, (uint64_t)lhs);
      if ((*(_BYTE *)(a1 + 48) & 2) != 0 || (v16 = *(float *)(a1 + 408), v16 > 0.0))
      {
        presentationTimeStamp = *(CMTime *)time2;
        *(_OWORD *)&v387.value = *(_OWORD *)lhs;
        epoch = *(_QWORD *)&lhs[16];
      }
      else
      {
        if (v16 >= 0.0)
        {
          *(_OWORD *)&v406.value = v356;
          v406.epoch = v359;
          goto LABEL_24;
        }
        presentationTimeStamp = *(CMTime *)lhs;
        *(_OWORD *)&v387.value = *(_OWORD *)&time1.duration.value;
        epoch = time1.duration.epoch;
      }
      v387.epoch = epoch;
      CMTimeSubtract(&v406, &presentationTimeStamp, &v387);
    }
LABEL_24:
    v367 = v406;
    if (*(_BYTE *)(a1 + 16) || (*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      v18 = 0;
    }
    else
    {
      time1.duration = v367;
      *(_OWORD *)time2 = v356;
      *(_QWORD *)&time2[16] = v359;
      v18 = CMTimeCompare(&time1.duration, (CMTime *)time2) >> 31;
    }
    if (!CMSampleBufferDataIsReady(v15) && !v18)
    {
      if ((*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 568)) && FigAtomicCompareAndSwap32())
      {
        memset(lhs, 0, 24);
        v23 = *(float *)(a1 + 408);
        v24 = 1.0;
        if (v23 == 0.0)
          v25 = 1.0;
        else
          v25 = v23;
        if (*(_BYTE *)(a1 + 236))
        {
          v26 = *(float *)(a1 + 232);
          v127 = v26 == 0.0;
          v24 = v26;
          if (v127)
            v24 = v9;
        }
        time1.duration = v367;
        CMTimeMultiplyByFloat64(&time, &time1.duration, v25 / v24);
        CMTimeAbsoluteValue(&v366, &time);
        CMTimeMake(&v364, 5, 1);
        CMTimeMinimum((CMTime *)lhs, &v366, &v364);
        if (dword_1EE2A2A48)
        {
          v335 = v4;
          *(_DWORD *)rhs = 0;
          LOBYTE(type.value) = 0;
          v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v28 = *(_DWORD *)rhs;
          if (os_log_type_enabled(v27, type.value))
            v29 = v28;
          else
            v29 = v28 & 0xFFFFFFFE;
          if (v29)
          {
            v30 = *(unsigned __int8 *)(a1 + 73);
            v31 = *(unsigned __int8 *)(a1 + 568);
            time1.duration = v367;
            Seconds = CMTimeGetSeconds(&time1.duration);
            *(_OWORD *)&time1.duration.value = *(_OWORD *)lhs;
            time1.duration.epoch = *(_QWORD *)&lhs[16];
            v33 = CMTimeGetSeconds(&time1.duration);
            *(_DWORD *)time2 = 136316674;
            *(_QWORD *)&time2[4] = "subaq_enqueueOneSourceSBuf";
            *(_WORD *)&time2[12] = 2048;
            *(_QWORD *)&time2[14] = a1;
            *(_WORD *)&time2[22] = 2048;
            *(_QWORD *)&time2[24] = v12;
            *(_WORD *)v391 = 1024;
            *(_DWORD *)&v391[2] = v30;
            *(_WORD *)&v391[6] = 1024;
            *(_DWORD *)&v391[8] = v31;
            *(_WORD *)&v391[12] = 2048;
            *(Float64 *)&v391[14] = Seconds;
            *(_WORD *)v392 = 2048;
            *(Float64 *)&v392[2] = v33;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          LODWORD(v4) = v335;
        }
        CFRetain((CFTypeRef)a1);
        *(_OWORD *)&time1.duration.value = *(_OWORD *)lhs;
        time1.duration.epoch = *(_QWORD *)&lhs[16];
        v56 = CMTimeGetSeconds(&time1.duration);
        v57 = dispatch_time(0, (uint64_t)(v56 * 1000000000.0));
        global_queue = dispatch_get_global_queue(0, 0);
        dispatch_after_f(v57, global_queue, (void *)a1, (dispatch_function_t)faq_scheduledWakeupRetainedToDiscard);
        v13 = 0;
        v22 = 0;
        v43 = 0;
        v5 = v5;
        goto LABEL_79;
      }
LABEL_76:
      v13 = 0;
LABEL_77:
      v22 = 0;
      goto LABEL_78;
    }
    if (!CMSampleBufferDataIsReady(v15) && *(_BYTE *)(a1 + 196))
    {
      if (dword_1EE2A2A48)
      {
        v337 = a2;
        v39 = v15;
        *(_DWORD *)lhs = 0;
        rhs[0] = 0;
        v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v41 = *(_DWORD *)lhs;
        if (os_log_type_enabled(v40, (os_log_type_t)rhs[0]))
          v42 = v41;
        else
          v42 = v41 & 0xFFFFFFFE;
        if (v42)
        {
          *(_DWORD *)time2 = 136315906;
          *(_QWORD *)&time2[4] = "subaq_enqueueOneSourceSBuf";
          *(_WORD *)&time2[12] = 2048;
          *(_QWORD *)&time2[14] = a1;
          *(_WORD *)&time2[22] = 2048;
          *(_QWORD *)&time2[24] = v12;
          *(_WORD *)v391 = 2048;
          *(_QWORD *)&v391[2] = v39;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v13 = 0;
        v22 = 0;
        v43 = 0;
        v15 = v39;
        a2 = v337;
        goto LABEL_79;
      }
      goto LABEL_76;
    }
    target = v15;
    if (!*(_BYTE *)(a1 + 16))
    {
      Decryptor = (const void *)FigSampleBufferGetDecryptor();
      v35 = *(const void **)(a1 + 56);
      if (Decryptor != v35)
      {
        v36 = Decryptor;
        if (Decryptor
          && (v37 = CFGetTypeID(Decryptor),
              TypeID = FigCPECryptorGetTypeID(),
              v35 = *(const void **)(a1 + 56),
              v37 == TypeID))
        {
          *(_QWORD *)(a1 + 56) = v36;
          CFRetain(v36);
          if (!v35)
            goto LABEL_93;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = 0;
          if (!v35)
          {
LABEL_93:
            subaq_setCPECryptorPropertyOnAudioQueue(a1, v12);
            goto LABEL_94;
          }
        }
        CFRelease(v35);
        goto LABEL_93;
      }
    }
LABEL_94:
    v15 = target;
    v44 = (const __CFNumber *)CMGetAttachment(target, key, 0);
    if (v44)
      FigAudioQueueSetProperty(a1, CFSTR("LoudnessInfo"), v44);
    if (CMGetAttachment(target, v323, 0))
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
      if (!*(_BYTE *)(a1 + 16))
      {
        v45 = (float *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
        if (v45[133] != v10)
        {
          v46 = (uint64_t)v45;
          memset(&time1, 0, 24);
          CMSampleBufferGetOutputPresentationTimeStamp(&time1.duration, target);
          memset(time2, 0, 24);
          *(_OWORD *)lhs = *(_OWORD *)&time1.duration.value;
          *(_QWORD *)&lhs[16] = time1.duration.epoch;
          subaq_convertMediaTimeToAQTime((CMTime *)a1, (CMTime *)lhs, (uint64_t)time2);
          *(_OWORD *)lhs = *(_OWORD *)time2;
          *(_QWORD *)&lhs[16] = *(_QWORD *)&time2[16];
          subaq_schedulePlayRate2ValueForTime(a1, v46, (CMTime *)lhs, 1.0);
          *(_DWORD *)(v46 + 532) = 1065353216;
        }
      }
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
      v15 = target;
    }
    if (*(_QWORD *)(a1 + 104))
    {
      v47 = CMGetAttachment(v15, v318, 0);
      v48 = *(const void **)(a1 + 104);
      if (v47)
      {
        v49 = CFEqual(v47, v48);
        v48 = *(const void **)(a1 + 104);
        if (v49)
        {
          if (v48)
          {
            CFRelease(*(CFTypeRef *)(a1 + 104));
            *(_QWORD *)(a1 + 104) = 0;
          }
          if (!*(_BYTE *)(a1 + 640))
            goto LABEL_127;
          MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
          if (!*(_BYTE *)(a1 + 16))
          {
            v50 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
            *(_BYTE *)(a1 + 568) = 1;
            if (dword_1EE2A2A48)
            {
              v310 = v5;
              *(_DWORD *)lhs = 0;
              rhs[0] = 0;
              v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v52 = *(_DWORD *)lhs;
              if (os_log_type_enabled(v51, (os_log_type_t)rhs[0]))
                v53 = v52;
              else
                v53 = v52 & 0xFFFFFFFE;
              if (v53)
              {
                v54 = *((_QWORD *)v50 + 5);
                *(_OWORD *)&time1.duration.value = *v307;
                time1.duration.epoch = *(_QWORD *)(a1 + 464);
                v55 = CMTimeGetSeconds(&time1.duration);
                *(_DWORD *)time2 = 136316418;
                *(_QWORD *)&time2[4] = "faq_restartIfPausedDueToReset";
                *(_WORD *)&time2[12] = 2048;
                *(_QWORD *)&time2[14] = a1;
                *(_WORD *)&time2[22] = 2048;
                *(_QWORD *)&time2[24] = v50;
                *(_WORD *)v391 = 2048;
                *(_QWORD *)&v391[2] = v54;
                *(_WORD *)&v391[10] = 2082;
                *(_QWORD *)&v391[12] = a1 + 768;
                *(_WORD *)&v391[20] = 2048;
                *(Float64 *)v392 = v55;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v5 = v310;
            }
            CFRetain(*((CFTypeRef *)v50 + 3));
            if (FigAudioQueueTimingShimStartAsync(*((_QWORD *)v50 + 5), 0, 0, (uint64_t)subaq_audioQueueStartupCompleted, *((_QWORD *)v50 + 3)))
            {
              CFRelease(*((CFTypeRef *)v50 + 3));
              MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
              v22 = 0;
              v43 = 0;
              v13 = 1;
LABEL_178:
              v15 = target;
              goto LABEL_79;
            }
            subaq_startListener(a1, (uint64_t)v50);
            *(_BYTE *)(a1 + 640) = 0;
            *(_BYTE *)(a1 + 571) = 0;
          }
          MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
          v48 = *(const void **)(a1 + 104);
          v15 = target;
        }
      }
      if (v48)
      {
        faq_dequeueFromSourceQueueAndDiscard();
        goto LABEL_126;
      }
    }
LABEL_127:
    v336 = v4;
    if (!*(_BYTE *)(a1 + 16) && CMGetAttachment(v15, v319, 0) && !*(_BYTE *)(a1 + 569))
      subaq_flushAudioQueue(a1, v12);
    v352 = *(_DWORD *)(a1 + 192);
    if (v352 >= 1)
    {
      v59 = CMGetAttachment(target, v316, 0);
      if (v59)
      {
        v60 = (_QWORD *)*v346;
        if (*v346)
        {
          v61 = v59;
          do
          {
            if (v61 == (CFTypeRef)v60[10])
            {
              if (*(_BYTE *)(a1 + 568) || !*(_BYTE *)(a1 + 641))
              {
                v13 = 0;
                v22 = 0;
                v43 = 0;
                goto LABEL_178;
              }
              *((_BYTE *)v60 + 88) = 1;
              *(_BYTE *)(a1 + 196) = 1;
              if ((*(_BYTE *)(a1 + 140) & 1) != 0)
              {
                *(_OWORD *)&time1.duration.value = *v321;
                time1.duration.epoch = *(_QWORD *)(a1 + 144);
                *(_OWORD *)time2 = v356;
                *(_QWORD *)&time2[16] = v359;
                if (CMTimeCompare(&time1.duration, (CMTime *)time2) >= 1)
                {
                  *(_OWORD *)time2 = *(_OWORD *)(v60 + 3);
                  *(_QWORD *)&time2[16] = v60[5];
                  *(_OWORD *)lhs = *v321;
                  *(_QWORD *)&lhs[16] = *(_QWORD *)(a1 + 144);
                  CMTimeSubtract(&time1.duration, (CMTime *)time2, (CMTime *)lhs);
                  *(_OWORD *)(v60 + 3) = *(_OWORD *)&time1.duration.value;
                  v60[5] = time1.duration.epoch;
                  *v321 = v356;
                  *(_QWORD *)(a1 + 144) = v359;
                }
              }
              v62 = *(_OWORD *)(v60 + 3);
              *(_QWORD *)(a1 + 560) = v60[5];
              *v343 = v62;
              v63 = *(_OWORD *)(v60 + 3);
              *(_QWORD *)(a1 + 536) = v60[5];
              *v341 = v63;
              *v340 = *MEMORY[0x1E0CA2E18];
              *(_QWORD *)(a1 + 488) = v345;
            }
            v60 = (_QWORD *)*v60;
          }
          while (v60);
        }
      }
    }
    v15 = target;
    if (*(_BYTE *)(a1 + 72))
    {
      v64 = CMGetAttachment(target, v314, 0);
      if (!CMSampleBufferGetDataBuffer(target))
      {
        if (v64)
        {
          if (subaq_doesAudioQueueHaveBuffersToFlush(v12) || *(_DWORD *)(v12 + 612))
          {
            subaq_flushAudioQueue(a1, v12);
            v43 = 0;
            *(_BYTE *)(v12 + 640) = 1;
          }
          else
          {
            v43 = 1;
          }
          faq_dequeueFromSourceQueueAndDiscard();
          v13 = 0;
          v22 = 0;
          goto LABEL_79;
        }
      }
    }
    v65 = CMGetAttachment(target, v315, 0);
    if (!CMSampleBufferGetDataBuffer(target))
    {
      if (v65 && !*(_BYTE *)(a1 + 569))
        subaq_flushAudioQueue(a1, v12);
      LODWORD(v4) = v336;
      if (!*(_BYTE *)(a1 + 16)
        && (v71 = (const __CFDictionary *)CMGetAttachment(target, v306, 0),
            CMTimeRangeMakeFromDictionary((CMTimeRange *)&time1, v71),
            (time1.duration.flags & 1) != 0))
      {
        v22 = 0;
        v13 = 1;
        if ((time1.presentationTimeStamp.flags & 1) != 0
          && !time1.presentationTimeStamp.epoch
          && (time1.presentationTimeStamp.value & 0x8000000000000000) == 0)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if ((*(_BYTE *)(a1 + 48) & 2) != 0)
          {
            faq_stopAllAudioQueues(a1, 0);
            v13 = 0;
            v22 = 1;
          }
          else
          {
            v22 = 0;
          }
        }
      }
      else
      {
        v22 = 0;
        v13 = 1;
      }
      faq_dequeueFromSourceQueueAndDiscard();
      goto LABEL_78;
    }
    *(_DWORD *)rhs = 0;
    if (*(_BYTE *)(a1 + 16))
      goto LABEL_158;
    if (CMSampleBufferGetNumSamples(target) < 1)
      goto LABEL_158;
    FormatDescription = CMSampleBufferGetFormatDescription(target);
    if (!FormatDescription)
      goto LABEL_158;
    v67 = FormatDescription;
    if (CMAudioFormatDescriptionEqual(FormatDescription, *(CMAudioFormatDescriptionRef *)(v12 + 56), 0xFu, (CMAudioFormatDescriptionMask *)rhs))
    {
      goto LABEL_158;
    }
    if ((~*(_DWORD *)rhs & 5) == 0)
    {
      if ((rhs[0] & 2) == 0)
      {
        time1.duration.value = 0;
        MagicCookie = CMAudioFormatDescriptionGetMagicCookie(v67, (size_t *)&time1);
        subaq_flushAudioQueue(a1, v12);
        FigAudioQueueTimingShimSetProperty(*(_QWORD *)(v12 + 40), 0x61716D63u, MagicCookie, time1.duration.value);
        subaq_setupForRichestDecode(v12, v67);
      }
      goto LABEL_158;
    }
    *(_QWORD *)lhs = 0;
    LODWORD(type.value) = 8;
    v311 = v5;
    if (*(_BYTE *)(a1 + 72) == 1 && (subaq_doesAudioQueueHaveBuffersToFlush(v12) || *(int *)(v12 + 612) >= 1))
      v72 = (*(_BYTE *)(a1 + 48) & 2) == 0 || *(_BYTE *)(a1 + 298) == 0;
    else
      v72 = 0;
    if (FigAudioQueueTimingShimGetProperty(*(_QWORD *)(v12 + 40), 0x61716364u, lhs, (UInt32 *)&type))
      *(_QWORD *)lhs = 0;
    v91 = *(_QWORD *)(v12 + 592);
    if (v91)
    {
      if (*(_BYTE *)(v12 + 48))
      {
        v92 = 1;
        FigAudioQueueTimingShimStop(*(_QWORD *)(v12 + 40), 1u);
        *(_BYTE *)(v12 + 48) = 0;
      }
      else
      {
        v92 = 0;
      }
      subaq_setProperty(a1, v12, CFSTR("AudioProcessingTap"), 0);
    }
    else
    {
      v92 = 0;
    }
    *(_OWORD *)&time1.duration.value = *v307;
    time1.duration.epoch = *(_QWORD *)(a1 + 464);
    *(_QWORD *)time2 = 0;
    v93 = FigSubAudioQueueCreate((CFTypeRef)a1);
    v95 = *(_QWORD *)time2;
    if (v93)
    {
      v98 = 0;
      if (!*(_QWORD *)time2)
        goto LABEL_238;
      goto LABEL_237;
    }
    if (*(_BYTE *)(a1 + 16))
    {
      *(_BYTE *)(*(_QWORD *)time2 + 546) = 1;
      *(_QWORD *)(v95 + 552) = 0;
    }
    else
    {
      v96 = *(const __CFDictionary **)(a1 + 240);
      if (v96)
      {
        time1.duration.epoch = 1;
        time1.duration.value = a1;
        *(_QWORD *)&time1.duration.timescale = *(_QWORD *)time2;
        CFDictionaryApplyFunction(v96, (CFDictionaryApplierFunction)subaq_applyOneCachedProperty, &time1);
      }
      if (*(_BYTE *)(a1 + 236))
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v95 + 40), 2u, *(AudioQueueParameterValue *)(a1 + 232));
      if (*(_BYTE *)(a1 + 204))
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v95 + 40), 1u, *(AudioQueueParameterValue *)(a1 + 200));
      if (*(_BYTE *)(a1 + 212))
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v95 + 40), 5u, *(AudioQueueParameterValue *)(a1 + 208));
      if (*(_BYTE *)(a1 + 220))
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v95 + 40), 9u, *(AudioQueueParameterValue *)(a1 + 216));
      if (*(_BYTE *)(a1 + 228))
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v95 + 40), 0xEu, *(AudioQueueParameterValue *)(a1 + 224));
      if (*(_BYTE *)(a1 + 708))
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v95 + 40), 0x16u, *(AudioQueueParameterValue *)(a1 + 704));
      v97 = *(unsigned __int8 *)(a1 + 16);
      *(_BYTE *)(v95 + 546) = 1;
      v98 = v95;
      *(_QWORD *)(v95 + 552) = 0;
      if (v97)
        goto LABEL_237;
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 176), 0, (const void *)v95);
    }
    v98 = v95;
LABEL_237:
    CFRelease((CFTypeRef)v95);
LABEL_238:
    if (*(_QWORD *)lhs)
      CFRelease(*(CFTypeRef *)lhs);
    v15 = target;
    if (v98)
    {
      LODWORD(v4) = v336;
      if (v91)
      {
        *(_BYTE *)(a1 + 736) = 0;
        subaq_setProperty(a1, v98, CFSTR("AudioProcessingTap"), *(const __CFString **)(a1 + 728));
        v99 = *(_QWORD *)(v98 + 592);
        if (v99)
        {
          v100 = *(_QWORD *)(v98 + 600);
          v101 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v101)
            v101(v99, v100);
        }
        v15 = target;
        if (v92)
          FigAudioQueueTimingShimStart(*(_QWORD *)(v12 + 40), 0, 0);
      }
      if (v72)
      {
        *(_BYTE *)(v98 + 641) = 1;
        subaq_flushAudioQueue(a1, v12);
        *(_BYTE *)(v12 + 640) = 1;
      }
      else if (*(_BYTE *)(a1 + 73) || (*(_BYTE *)(a1 + 48) & 2) != 0)
      {
        subaq_startSlavedAudioQueue(a1, v98);
        subaq_stopAudioQueue(a1, v12, 0);
      }
      v5 = v311;
      if (!*(_BYTE *)(a1 + 570))
      {
        v22 = 0;
        v43 = 0;
        v13 = 1;
        goto LABEL_79;
      }
      if ((*(_BYTE *)(v12 + 496) & 1) != 0)
        faq_reset(a1, v94);
LABEL_126:
      v22 = 0;
      v43 = 0;
      v13 = 1;
      goto LABEL_79;
    }
    v5 = v311;
LABEL_158:
    LODWORD(time1.duration.value) = 1065353216;
    v69 = (const __CFNumber *)CMGetAttachment(target, v304, 0);
    v287 = v8;
    if (v69)
    {
      CFNumberGetValue(v69, kCFNumberFloat32Type, &time1);
      v70 = *(float *)&time1.duration.value;
    }
    else
    {
      v70 = 1.0;
    }
    if (*(float *)(a1 + 756) == 0.0)
      v73 = v70;
    else
      v73 = *(float *)(a1 + 756);
    v74 = (*(uint64_t (**)(uint64_t, double))(a1 + 664))(a1, v73);
    v75 = v74;
    if (!v74)
      *(_BYTE *)(v12 + 546) = 1;
    v286 = v65;
    if (!*(_BYTE *)(v12 + 104) && ((_DWORD)v5 || !v74 || v18))
    {
      if (!*(_BYTE *)(a1 + 196))
      {
        memset(&time1, 0, 24);
        subaq_getCurrentQueueTime(v12, &v363);
        subaq_convertAQTimeToMediaTime((CMTime *)a1, &v363, (uint64_t)&time1);
        memset(time2, 0, 24);
        CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)time2, target);
        memset(lhs, 0, 24);
        CMSampleBufferGetOutputDuration(&v362, target);
        *(_OWORD *)rhs = *(_OWORD *)time2;
        *(_QWORD *)&rhs[16] = *(_QWORD *)&time2[16];
        CMTimeAdd((CMTime *)lhs, (CMTime *)rhs, &v362);
        if (v352 > 0 || v18 || !v75)
        {
          v15 = target;
          faq_dequeueFromSourceQueueAndDiscard();
          if ((*(_BYTE *)(a1 + 48) & 2) != 0 || *(float *)(a1 + 408) > 0.0)
            v275 = lhs;
          else
            v275 = time2;
          LODWORD(v4) = v336;
          *(_OWORD *)v320 = *(_OWORD *)v275;
          *(_QWORD *)(a1 + 328) = *((_QWORD *)v275 + 2);
          v13 = 1;
          *(_BYTE *)(v12 + 545) = 1;
        }
        else
        {
          v13 = 0;
          LODWORD(v4) = v336;
          v15 = target;
        }
        goto LABEL_77;
      }
      v291 = 0;
    }
    else
    {
      v291 = 1;
    }
    v4 = v336;
    if (!*(_QWORD *)(a1 + 120))
    {
      SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(target, 0);
      if (SampleAttachmentsArray)
      {
        v80 = SampleAttachmentsArray;
        if (CFArrayGetCount(SampleAttachmentsArray) >= 1)
        {
          v81 = CFArrayGetCount(v80);
          v82 = (const __CFDictionary *)CFArrayGetValueAtIndex(v80, v81 - 1);
          Value = CFDictionaryGetValue(v82, v297);
          if (Value)
          {
            v84 = Value;
            if (!FigCFEqual())
            {
              if (dword_1EE2A2A48)
              {
                v85 = v5;
                *(_DWORD *)rhs = 0;
                LOBYTE(type.value) = 0;
                v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v87 = *(_DWORD *)rhs;
                if (os_log_type_enabled(v86, type.value))
                  v88 = v87;
                else
                  v88 = v87 & 0xFFFFFFFE;
                if (v88)
                {
                  BufferCount = CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(a1 + 64));
                  CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)lhs, target);
                  v90 = CMTimeGetSeconds((CMTime *)lhs);
                  *(_DWORD *)time2 = 136316162;
                  *(_QWORD *)&time2[4] = "faq_handleSampleAttachmentsIfPresent_SeamIdentifier";
                  *(_WORD *)&time2[12] = 2048;
                  *(_QWORD *)&time2[14] = a1;
                  *(_WORD *)&time2[22] = 2112;
                  *(_QWORD *)&time2[24] = v84;
                  *(_WORD *)v391 = 1024;
                  *(_DWORD *)&v391[2] = BufferCount;
                  *(_WORD *)&v391[6] = 2048;
                  *(Float64 *)&v391[8] = v90;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v4 = v336;
                v5 = v85;
              }
              *(_OWORD *)rhs = v356;
              *(_QWORD *)&rhs[16] = v359;
              presentationTimeStamp.value = 0;
              v270 = "Samples with matching seam ID not found";
              switch(FigValidateSampleSeamInSampleBufferQueue(*(opaqueCMBufferQueue **)(a1 + 64), (uint64_t)v84, (unint64_t)v316, &presentationTimeStamp, (uint64_t)rhs))
              {
                case 0u:
                  memset(&type, 0, sizeof(type));
                  v271 = *(_DWORD *)(v12 + 100);
                  *(_OWORD *)&time1.duration.value = *(_OWORD *)rhs;
                  time1.duration.epoch = *(_QWORD *)&rhs[16];
                  CMTimeConvertScale(&type, &time1.duration, v271, kCMTimeRoundingMethod_RoundTowardZero);
                  if (dword_1EE2A2A48)
                  {
                    LODWORD(v387.value) = 0;
                    LOBYTE(v406.value) = 0;
                    v272 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v273 = v387.value;
                    if (os_log_type_enabled(v272, v406.value))
                      v274 = v273;
                    else
                      v274 = v273 & 0xFFFFFFFE;
                    if (v274)
                    {
                      *(_DWORD *)time2 = 136316162;
                      *(_QWORD *)&time2[4] = "faq_handleSampleAttachmentsIfPresent_SeamIdentifier";
                      *(_WORD *)&time2[12] = 2048;
                      *(_QWORD *)&time2[14] = a1;
                      *(_WORD *)&time2[22] = 2112;
                      *(_QWORD *)&time2[24] = v84;
                      *(_WORD *)v391 = 1024;
                      *(_DWORD *)&v391[2] = presentationTimeStamp.value;
                      *(_WORD *)&v391[6] = 2048;
                      *(_QWORD *)&v391[8] = type.value;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v4 = v336;
                  }
                  *(_QWORD *)(a1 + 112) = presentationTimeStamp.value;
                  *(_QWORD *)(a1 + 120) = CFRetain(v84);
                  *v321 = *(_OWORD *)rhs;
                  *(_QWORD *)(a1 + 144) = *(_QWORD *)&rhs[16];
                  v279 = *(const void **)(a1 + 160);
                  *(_QWORD *)(a1 + 152) = presentationTimeStamp.value;
                  *(_QWORD *)(a1 + 160) = v84;
                  CFRetain(v84);
                  if (v279)
                    CFRelease(v279);
                  break;
                case 1u:
                  goto LABEL_621;
                case 2u:
                  v270 = "No samples are present before transition";
                  goto LABEL_621;
                case 3u:
                  v270 = "More than one transitions found";
                  goto LABEL_621;
                case 4u:
                  v270 = "Seam samples do not extend till the start of transition";
                  goto LABEL_621;
                case 5u:
                  v270 = "Specified start trim is too long before transition";
                  goto LABEL_621;
                case 6u:
                  v270 = "Specified end trim is too long before transition";
                  goto LABEL_621;
                case 7u:
                  v270 = "Specified start trim is too long after transition";
                  goto LABEL_621;
                case 8u:
                  v270 = "Specified end trim is too long after transition";
                  goto LABEL_621;
                case 9u:
                  v270 = "Not enough seam samples present after transition";
                  goto LABEL_621;
                case 0xAu:
                  v270 = "Trim duration is not equal on both sides of transition";
                  goto LABEL_621;
                default:
                  v270 = "Unknown";
LABEL_621:
                  if (dword_1EE2A2A48)
                  {
                    LODWORD(type.value) = 0;
                    LOBYTE(v387.value) = 0;
                    v276 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v277 = type.value;
                    if (os_log_type_enabled(v276, v387.value))
                      v278 = v277;
                    else
                      v278 = v277 & 0xFFFFFFFE;
                    if (v278)
                    {
                      *(_DWORD *)time2 = 136315906;
                      *(_QWORD *)&time2[4] = "faq_handleSampleAttachmentsIfPresent_SeamIdentifier";
                      *(_WORD *)&time2[12] = 2048;
                      *(_QWORD *)&time2[14] = a1;
                      *(_WORD *)&time2[22] = 2112;
                      *(_QWORD *)&time2[24] = v84;
                      *(_WORD *)v391 = 2080;
                      *(_QWORD *)&v391[2] = v270;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v4 = v336;
                  }
                  break;
              }
            }
          }
        }
      }
    }
    cf = 0;
    v76 = target;
    values = target;
    v369 = 0;
    theArray = 0;
    v77 = *(unsigned __int8 *)(v12 + 544);
    v78 = *(_QWORD *)(a1 + 120);
    if (v78)
    {
      CountOfSequentialSamplesWithSeamIdentifier = FigGetCountOfSequentialSamplesWithSeamIdentifier(target, v78, 0, 0);
      if (CountOfSequentialSamplesWithSeamIdentifier <= *(_QWORD *)(a1 + 112))
      {
        if (FigCreateReplacementSBufByOmittingTrailingSeamSamples(target, *(_QWORD *)(a1 + 120), (CMSampleBufferRef *)&cf))
        {
          v76 = (opaqueCMSampleBuffer *)cf;
          values = (void *)cf;
        }
        else
        {
          faq_clearSeamHandlingState((__n128 *)a1);
          v76 = (opaqueCMSampleBuffer *)values;
        }
      }
      else
      {
        faq_clearSeamHandlingState((__n128 *)a1);
      }
    }
    else
    {
      CountOfSequentialSamplesWithSeamIdentifier = 0;
    }
    if (!v76)
    {
LABEL_275:
      v106 = theArray;
      goto LABEL_280;
    }
    v102 = *(_BYTE *)(v12 + 544);
    if (v102)
    {
      LODWORD(v76) = AudioSampleBufferSplitterCreateSplitSampleBufferArray(*(_QWORD *)(a1 + 168), v76, &v369, &theArray);
      if ((_DWORD)v76)
      {
        v102 = 1;
      }
      else
      {
        v104 = (CFIndex)theArray;
        if (theArray)
          v104 = CFArrayGetCount(theArray);
        v102 = v104 == 0;
      }
      v105 = v369;
      if ((v369 & 1) != 0)
      {
        *(_BYTE *)(v12 + 544) = 0;
        v103 = 1;
      }
      else
      {
        v103 = 0;
      }
      if ((v105 & 2) != 0)
      {
        *(_BYTE *)(v12 + 544) = 0;
        goto LABEL_277;
      }
    }
    else
    {
      v103 = 0;
      LODWORD(v76) = 0;
    }
    if (v77 && (v102 & 1) == 0 && !v103)
      goto LABEL_275;
LABEL_277:
    if (theArray)
      CFRelease(theArray);
    v106 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    LODWORD(v76) = 0;
    theArray = v106;
LABEL_280:
    v338 = a2;
    if (!v106 || CFArrayGetCount(v106) < 1)
    {
      v108 = 0;
      v302 = 0;
      v290 = 0;
      goto LABEL_334;
    }
    v107 = (size_t)theArray;
    if (theArray)
      v107 = CFArrayGetCount(theArray);
    count = v107;
    v302 = malloc_type_calloc(v107, 8uLL, 0x2004093837F09uLL);
    v108 = count;
    v290 = malloc_type_calloc(count, 1uLL, 0x100004077774924uLL);
    if (count < 1)
    {
LABEL_334:
      faq_dequeueFromSourceQueueAndDiscard();
      v13 = 1;
      v132 = 0.0;
      v133 = v108;
      if (v108 < 1 || (_DWORD)v76)
      {
        hostTime = 0;
        LOBYTE(v332) = 0;
        v292 = 0;
        v230 = 0.5;
        v135 = v302;
        goto LABEL_521;
      }
      v313 = v5;
      hostTime = 0;
      v332 = 0;
      v134 = 0;
      v292 = 0;
      v301 = (_OWORD *)(v12 + 408);
      v288 = (_OWORD *)(v12 + 456);
      v289 = (_OWORD *)(v12 + 432);
      v293 = (_OWORD *)(v12 + 484);
      counta = v108;
      v135 = v302;
      while (1)
      {
        v325 = v135[v134];
        v136 = **(opaqueCMSampleBuffer ***)(v325 + 24);
        v403 = *MEMORY[0x1E0CA2E40];
        timescale = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 8);
        v381 = 0u;
        v382 = 0u;
        memset(lhs, 0, sizeof(lhs));
        v378 = 0u;
        v379 = 0u;
        memset(rhs, 0, sizeof(rhs));
        v137 = *(unsigned __int8 *)(v12 + 546);
        if (*(_BYTE *)(v12 + 546))
        {
          v138 = *(_QWORD *)(v12 + 64);
          if (*(_DWORD *)(v138 + 20))
            v139 = 0;
          else
            v139 = *(_DWORD *)(v138 + 8) == 1987015266;
          *(_QWORD *)(v12 + 552) = v139;
        }
        packetDescriptionsSizeOut.value = 0;
        packetDescriptionsPointerOut = 0;
        memset(time2, 0, 24);
        if (faq_getFigTimeAttachment(v136, v334, (CMTime *)time2))
        {
          if (*(uint64_t *)(v12 + 552) < 1)
          {
            v140 = 0;
          }
          else
          {
            v140 = 0;
            do
            {
              memset(&time1, 0, sizeof(time1));
              if (CMSampleBufferGetSampleTimingInfo(v136, v140, &time1))
                break;
              type = *(CMTime *)time2;
              presentationTimeStamp = time1.duration;
              if (CMTimeCompare(&type, &presentationTimeStamp) < 0)
              {
                *(_QWORD *)(v12 + 552) = 0;
                break;
              }
              type = *(CMTime *)time2;
              presentationTimeStamp = time1.duration;
              CMTimeSubtract((CMTime *)time2, &type, &presentationTimeStamp);
              v141 = *(_QWORD *)(v12 + 552);
              ++v140;
              *(_QWORD *)(v12 + 552) = v141 - 1;
            }
            while (v141 > 1);
          }
          v142 = *(_DWORD *)(v12 + 100);
          *(_OWORD *)&time1.duration.value = *(_OWORD *)time2;
          time1.duration.epoch = *(_QWORD *)&time2[16];
          CMTimeConvertScale(&type, &time1.duration, v142, kCMTimeRoundingMethod_RoundTowardZero);
          v331 = type.value;
        }
        else
        {
          v331 = 0;
          v140 = 0;
        }
        memset(time2, 0, 24);
        memset(&presentationTimeStamp, 0, sizeof(presentationTimeStamp));
        if (faq_getFigTimeAttachment(v136, v333, (CMTime *)time2))
        {
          v143 = *(_DWORD *)(v12 + 100);
          *(_OWORD *)&time1.duration.value = *(_OWORD *)time2;
          time1.duration.epoch = *(_QWORD *)&time2[16];
          CMTimeConvertScale(&v387, &time1.duration, v143, kCMTimeRoundingMethod_RoundTowardZero);
          v329 = v387.value;
        }
        else
        {
          v329 = 0;
        }
        if (!*(_BYTE *)(v12 + 544))
          goto LABEL_361;
        v144 = *(unsigned int *)(*(_QWORD *)(v12 + 64) + 20);
        if (!(_DWORD)v144)
          goto LABEL_361;
        memset(&v406, 0, sizeof(v406));
        CMTimeMake(&v406, v144, *(_DWORD *)(v12 + 100));
        v145 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
        *(_OWORD *)&time1.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
        *(_OWORD *)&time1.decodeTimeStamp.value = v145;
        time1.decodeTimeStamp.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
        v146 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
        *(_OWORD *)&time1.duration.value = *MEMORY[0x1E0CA2E90];
        *(_OWORD *)&time1.duration.epoch = v146;
        NumSamples = CMSampleBufferGetNumSamples(v136);
        if (CMSampleBufferGetSampleTimingInfo(v136, NumSamples - 1, &time1))
          goto LABEL_361;
        if ((time1.duration.flags & 0x1D) == 1 && (v386 = time1.duration, end = v406, CMTimeCompare(&v386, &end) < 0))
        {
          v386 = v406;
          end = time1.duration;
          CMTimeSubtract(&presentationTimeStamp, &v386, &end);
          v174 = *(_DWORD *)(v12 + 100);
          end = presentationTimeStamp;
          CMTimeConvertScale(&v386, &end, v174, kCMTimeRoundingMethod_RoundTowardZero);
          v327 = v386.value;
        }
        else
        {
LABEL_361:
          v327 = 0;
        }
        if (CMSampleBufferGetAudioStreamPacketDescriptionsPtr(v136, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, (size_t *)&packetDescriptionsSizeOut))
        {
          LODWORD(v148) = 0;
          LODWORD(v328) = 0;
          packetDescriptionsPointerOut = 0;
        }
        else
        {
          v328 = (unint64_t)packetDescriptionsSizeOut.value >> 4;
          if (v140 < 1)
          {
            LODWORD(v148) = 0;
          }
          else
          {
            v149 = packetDescriptionsSizeOut.value & 0xFFFFFFFF0;
            v150 = CFGetAllocator((CFTypeRef)v12);
            v151 = (AudioStreamPacketDescription *)CFAllocatorAllocate(v150, v149, 0);
            v148 = v151;
            if (v151)
            {
              memcpy(v151, packetDescriptionsPointerOut, v149);
              v152 = 8;
              do
              {
                *(_DWORD *)((char *)&v148->mStartOffset + v152) = 0;
                v152 += 16;
                --v140;
              }
              while (v140);
              packetDescriptionsPointerOut = v148;
              LODWORD(v148) = 1;
            }
          }
        }
        v153 = *(_QWORD *)(a1 + 160);
        if (v153 && !*(_QWORD *)(a1 + 112))
        {
          v154 = FigGetCountOfSequentialSamplesWithSeamIdentifier(v136, v153, 1, 0);
          if (!v154
            || ((v331 = 0, v155 = *(_QWORD *)(a1 + 152), v154 >= v155) ? (v156 = *(_QWORD *)(a1 + 152)) : (v156 = v154),
                *(_QWORD *)(a1 + 152) = v155 - v156,
                v155 <= v154))
          {
            faq_clearSeamHandlingState((__n128 *)a1);
          }
        }
        CMSampleBufferGetOutputPresentationTimeStamp(&start, v136);
        CMSampleBufferGetOutputDuration(&duration, v136);
        CMTimeRangeMake((CMTimeRange *)&time1, &start, &duration);
        v403 = time1.duration.value;
        flags = time1.duration.flags;
        timescale = time1.duration.timescale;
        v158 = time1.duration.epoch;
        v350 = time1.presentationTimeStamp.value;
        v159 = *(_QWORD *)&time1.presentationTimeStamp.timescale;
        v342 = time1.presentationTimeStamp.epoch;
        v348 = time1.duration.flags;
        v326 = (int)v148;
        v339 = time1.duration.epoch;
        if (*(_BYTE *)(v12 + 546))
        {
          memset(&time1, 0, 24);
          *(_QWORD *)time2 = v403;
          *(_DWORD *)&time2[8] = timescale;
          *(_DWORD *)&time2[12] = flags;
          *(_QWORD *)&time2[16] = v158;
          subaq_convertMediaTimeToAQTime((CMTime *)a1, (CMTime *)time2, (uint64_t)&time1);
          memset(lhs, 0, sizeof(lhs));
          v381 = 0u;
          v382 = 0u;
          v160 = *(_DWORD *)(v12 + 100);
          *(_OWORD *)time2 = *(_OWORD *)&time1.duration.value;
          *(_QWORD *)&time2[16] = time1.duration.epoch;
          CMTimeConvertScale(&v374, (CMTime *)time2, v160, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v161 = 0;
          *(double *)lhs = (double)v374.value;
          DWORD2(v382) = 1;
          *(_BYTE *)(v12 + 546) = 0;
          v162 = (double *)lhs;
          goto LABEL_411;
        }
        if (*(_BYTE *)(a1 + 16))
          goto LABEL_386;
        if ((*(_BYTE *)(v12 + 420) & 1) == 0)
          goto LABEL_383;
        v163 = CMGetAttachment(v136, v309, 0);
        v158 = v339;
        if (v163 == v308 || *(_BYTE *)(v12 + 545))
        {
LABEL_386:
          v406.value = v403;
          v406.timescale = timescale;
          if ((v291 & 1) != 0)
          {
            time1.duration.value = v403;
            time1.duration.timescale = timescale;
            time1.duration.flags = flags;
            time1.duration.epoch = v158;
            *(_OWORD *)time2 = *v301;
            *(_QWORD *)&time2[16] = *(_QWORD *)(v12 + 424);
            v164 = v158;
            CMTimeCompare(&time1.duration, (CMTime *)time2);
            v165 = v12 + 408;
            v166 = flags;
            goto LABEL_390;
          }
          v166 = *(_DWORD *)(a1 + 324);
        }
        else
        {
          if ((v291 & 1) != 0)
          {
LABEL_383:
            v162 = 0;
            v161 = 0;
            goto LABEL_411;
          }
          v166 = *(_DWORD *)(a1 + 324);
          if ((v166 & 1) == 0)
          {
            v162 = 0;
            v161 = 0;
            goto LABEL_411;
          }
        }
        v165 = v12 + 408;
        v406.value = *v320;
        v406.timescale = *(_DWORD *)(a1 + 320);
        v164 = *(_QWORD *)(a1 + 328);
LABEL_390:
        time1.duration.value = v406.value;
        time1.duration.timescale = v406.timescale;
        time1.duration.flags = v166;
        time1.duration.epoch = v164;
        *(_OWORD *)time2 = *(_OWORD *)v165;
        *(_QWORD *)&time2[16] = *(_QWORD *)(v165 + 16);
        v167 = v165;
        if (!CMTimeCompare(&time1.duration, (CMTime *)time2))
          goto LABEL_392;
        memset(&type, 0, sizeof(type));
        CMTimeMake(&type, 2, *(_DWORD *)(v12 + 100));
        memset(&presentationTimeStamp, 0, sizeof(presentationTimeStamp));
        time1.duration.value = v406.value;
        time1.duration.timescale = v406.timescale;
        time1.duration.flags = v166;
        time1.duration.epoch = v164;
        *(_OWORD *)time2 = *(_OWORD *)v167;
        *(_QWORD *)&time2[16] = *(_QWORD *)(v167 + 16);
        CMTimeSubtract(&v374, &time1.duration, (CMTime *)time2);
        CMTimeAbsoluteValue(&presentationTimeStamp, &v374);
        time1.duration = type;
        *(CMTime *)time2 = presentationTimeStamp;
        if (CMTimeCompare(&time1.duration, (CMTime *)time2) < 0)
        {
          memset(&v387, 0, sizeof(v387));
          *(_OWORD *)&time1.duration.value = *v289;
          time1.duration.epoch = *(_QWORD *)(v12 + 448);
          *(_OWORD *)time2 = *v288;
          *(_QWORD *)&time2[16] = *(_QWORD *)(v12 + 472);
          CMTimeAdd(&v373, &time1.duration, (CMTime *)time2);
          time1.duration = presentationTimeStamp;
          CMTimeAdd(&v387, &v373, &time1.duration);
          if (dword_1EE2A2A48)
          {
            LODWORD(v386.value) = 0;
            LOBYTE(end.value) = 0;
            v168 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v169 = v386.value;
            if (os_log_type_enabled(v168, end.value))
              v170 = v169;
            else
              v170 = v169 & 0xFFFFFFFE;
            if (v170)
            {
              v283 = presentationTimeStamp.value;
              v284 = presentationTimeStamp.timescale;
              time1.duration = presentationTimeStamp;
              v171 = CMTimeGetSeconds(&time1.duration);
              time1.duration.value = v406.value;
              time1.duration.timescale = v406.timescale;
              time1.duration.flags = v166;
              time1.duration.epoch = v164;
              v172 = CMTimeGetSeconds(&time1.duration);
              *(_OWORD *)&time1.duration.value = *v301;
              time1.duration.epoch = *(_QWORD *)(v12 + 424);
              v173 = CMTimeGetSeconds(&time1.duration);
              *(_DWORD *)time2 = 136317186;
              *(_QWORD *)&time2[4] = "subaq_enqueueAQBufferIntoAudioQueue";
              *(_WORD *)&time2[12] = 2048;
              *(_QWORD *)&time2[14] = a1;
              *(_WORD *)&time2[22] = 2048;
              *(_QWORD *)&time2[24] = v12;
              *(_WORD *)v391 = 2080;
              *(_QWORD *)&v391[2] = a1 + 768;
              *(_WORD *)&v391[10] = 2048;
              *(_QWORD *)&v391[12] = v283;
              *(_WORD *)&v391[20] = 1024;
              *(_DWORD *)v392 = v284;
              *(_WORD *)&v392[4] = 2048;
              *(Float64 *)&v392[6] = v171;
              v393 = 2048;
              v394 = v172;
              v395 = 2048;
              v396 = v173;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          subaq_flushAudioQueue(a1, v12);
          v381 = 0u;
          v382 = 0u;
          memset(lhs, 0, sizeof(lhs));
          v175 = *(_DWORD *)(v12 + 100);
          time1.duration = v387;
          v161 = 1;
          CMTimeConvertScale(&v372, &time1.duration, v175, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          *(double *)lhs = (double)v372.value;
          DWORD2(v382) = 1;
          v162 = (double *)lhs;
        }
        else
        {
LABEL_392:
          v162 = 0;
          v161 = 0;
        }
        flags = v348;
        v176 = 0;
        if ((v348 & 1) != 0 && (v159 & 0x100000000) != 0 && !v342 && (v350 & 0x8000000000000000) == 0)
        {
          time1.duration.value = v350;
          *(_QWORD *)&time1.duration.timescale = v159;
          time1.duration.epoch = 0;
          *(_OWORD *)time2 = v356;
          *(_QWORD *)&time2[16] = v359;
          v176 = CMTimeCompare(&time1.duration, (CMTime *)time2) == 0;
        }
        *(_BYTE *)(v12 + 545) = v176;
LABEL_411:
        if ((flags & 1) == 0 || (v159 & 0x100000000) == 0 || v342 || v350 < 0)
        {
          v296 = v161 != 0;
          a2 = v338;
        }
        else
        {
          time1.duration.value = v350;
          *(_QWORD *)&time1.duration.timescale = v159;
          time1.duration.epoch = 0;
          *(_OWORD *)time2 = v356;
          *(_QWORD *)&time2[16] = v359;
          v296 = v161 != 0;
          if (!(v137 | v161 | CMTimeCompare(&time1.duration, (CMTime *)time2)))
          {
            v189 = 1;
            a2 = v338;
            goto LABEL_444;
          }
          a2 = v338;
          flags = v348;
        }
        v177 = *(unsigned __int8 *)(a1 + 16);
        if (!*(_BYTE *)(a1 + 16))
        {
          if (*(float *)(v12 + 532) == v73)
          {
            v177 = 0;
          }
          else
          {
            memset(&time1, 0, 24);
            if (v162)
            {
              CMTimeMake(&time1.duration, (uint64_t)*v162, *(_DWORD *)(v12 + 100));
            }
            else
            {
              v178 = *(float *)(a1 + 408);
              v179 = 1.0;
              if (v178 == 0.0)
                v180 = 1.0;
              else
                v180 = v178;
              if (*(_BYTE *)(a1 + 236))
              {
                v181 = *(float *)(a1 + 232);
                v127 = v181 == 0.0;
                v179 = v181;
                if (v127)
                  v179 = 1.0;
              }
              *(_QWORD *)time2 = v403;
              *(_DWORD *)&time2[8] = timescale;
              *(_DWORD *)&time2[12] = flags;
              *(_QWORD *)&time2[16] = v339;
              faqTimelineWrangler_convertMediaTimeToAQTime(v322, (CMTime *)time2, (uint64_t)&time1, v180 / v179);
            }
            *(_OWORD *)time2 = *(_OWORD *)&time1.duration.value;
            *(_QWORD *)&time2[16] = time1.duration.epoch;
            v182 = subaq_schedulePlayRate2ValueForTime(a1, v12, (CMTime *)time2, v73);
            if (v182)
            {
              v200 = v182;
              goto LABEL_502;
            }
            v177 = *(unsigned __int8 *)(a1 + 16);
          }
        }
        *(float *)(v12 + 532) = v73;
        memset(&type, 0, sizeof(type));
        memset(&presentationTimeStamp, 0, sizeof(presentationTimeStamp));
        memset(&v387, 0, sizeof(v387));
        memset(&time1, 0, 48);
        if (!v177)
        {
          CMSampleBufferGetOutputPresentationTimeStamp(&type, v136);
          CMSampleBufferGetOutputDuration(&v406, v136);
          *(CMTime *)time2 = type;
          CMTimeAdd(&presentationTimeStamp, (CMTime *)time2, &v406);
          if (v162)
          {
            memset(time2, 0, 24);
            CMTimeMake(&v386, 3, 10);
            end = type;
            CMTimeSubtract((CMTime *)time2, &end, &v386);
            if ((*(_BYTE *)(v12 + 496) & 1) != 0)
            {
              *(_OWORD *)&end.value = *v293;
              v183 = *(_QWORD *)(v12 + 500);
            }
            else
            {
              *(_OWORD *)&end.value = v356;
              v183 = v359;
            }
            end.epoch = v183;
            packetDescriptionsSizeOut = *(CMTime *)time2;
            *(_OWORD *)&v384.value = *(_OWORD *)&end.value;
            v384.epoch = v183;
            CMTimeMaximum(&v387, &packetDescriptionsSizeOut, &v384);
          }
          else
          {
            v387 = type;
          }
          *(CMTime *)time2 = v387;
          end = presentationTimeStamp;
          CMTimeRangeFromTimeToTime((CMTimeRange *)&time1, (CMTime *)time2, &end);
          v184 = *(const __CFDictionary **)(a1 + 648);
          *(_OWORD *)time2 = *(_OWORD *)&time1.duration.value;
          *(_OWORD *)&time2[16] = *(_OWORD *)&time1.duration.epoch;
          *(_OWORD *)v391 = *(_OWORD *)&time1.presentationTimeStamp.timescale;
          subaq_scheduleVolumeCurvesForMediaTimeRange(a1, v12, v184, time2, 1, v162 != 0);
          v185 = *(const __CFDictionary **)(a1 + 656);
          *(_OWORD *)time2 = *(_OWORD *)&time1.duration.value;
          *(_OWORD *)&time2[16] = *(_OWORD *)&time1.duration.epoch;
          *(_OWORD *)v391 = *(_OWORD *)&time1.presentationTimeStamp.timescale;
          subaq_scheduleVolumeCurvesForMediaTimeRange(a1, v12, v185, time2, 0, v162 != 0);
          subaq_scheduleCinematicForMediaTimeRange((const __CFArray *)a1, v12, *(CFDictionaryRef *)(a1 + 648));
          v186 = *(_QWORD *)(a1 + 648);
          *(_OWORD *)time2 = *(_OWORD *)&time1.duration.value;
          *(_OWORD *)&time2[16] = *(_OWORD *)&time1.duration.epoch;
          *(_OWORD *)v391 = *(_OWORD *)&time1.presentationTimeStamp.timescale;
          subaq_scheduleAudioProcessingUnitForMediaTimeRange(a1, v12, v186, (__int128 *)time2, 1, 0);
          v187 = *(_QWORD *)(a1 + 656);
          *(_OWORD *)time2 = *(_OWORD *)&time1.duration.value;
          *(_OWORD *)&time2[16] = *(_OWORD *)&time1.duration.epoch;
          *(_OWORD *)v391 = *(_OWORD *)&time1.presentationTimeStamp.timescale;
          subaq_scheduleAudioProcessingUnitForMediaTimeRange(a1, v12, v187, (__int128 *)time2, 0, 0);
        }
        if ((v348 & 1) == 0)
        {
          v188 = 0;
LABEL_454:
          if ((*(_BYTE *)(a1 + 48) & 2) != 0 || *(float *)(a1 + 408) >= 0.0)
          {
            time1.duration.value = v403;
            time1.duration.timescale = timescale;
            time1.duration.flags = v348;
            time1.duration.epoch = v339;
            time1.presentationTimeStamp.value = v350;
            *(_QWORD *)&time1.presentationTimeStamp.timescale = v159;
            time1.presentationTimeStamp.epoch = v342;
            CMTimeRangeGetEnd((CMTime *)time2, (CMTimeRange *)&time1);
            v192 = v12 + 408;
            *v301 = *(_OWORD *)time2;
            v193 = *(_QWORD *)&time2[16];
          }
          else
          {
            *(_QWORD *)time2 = v403;
            *(_DWORD *)&time2[8] = timescale;
            *(_DWORD *)&time2[12] = v348;
            *(_QWORD *)&time2[16] = v339;
            type.value = v350;
            *(_QWORD *)&type.timescale = v159;
            type.epoch = v342;
            CMTimeSubtract(&time1.duration, (CMTime *)time2, &type);
            v192 = v12 + 408;
            *v301 = *(_OWORD *)&time1.duration.value;
            v193 = time1.duration.epoch;
          }
          *(_QWORD *)(v192 + 16) = v193;
          if (dword_1EE2A2A48)
            v194 = v188;
          else
            v194 = 0;
          if (v194)
          {
            LODWORD(type.value) = 0;
            LOBYTE(presentationTimeStamp.value) = 0;
            v195 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v196 = type.value;
            if (os_log_type_enabled(v195, presentationTimeStamp.value))
              v197 = v196;
            else
              v197 = v196 & 0xFFFFFFFE;
            if (v197)
            {
              *(_OWORD *)&time1.duration.value = *v301;
              time1.duration.epoch = *(_QWORD *)(v12 + 424);
              v198 = CMTimeGetSeconds(&time1.duration);
              *(_DWORD *)time2 = 136315906;
              *(_QWORD *)&time2[4] = "subaq_enqueueAQBufferIntoAudioQueue";
              *(_WORD *)&time2[12] = 2048;
              *(_QWORD *)&time2[14] = a1;
              *(_WORD *)&time2[22] = 2048;
              *(_QWORD *)&time2[24] = v12;
              *(_WORD *)v391 = 2048;
              *(Float64 *)&v391[2] = v198;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a2 = v338;
          }
          goto LABEL_468;
        }
        v189 = BYTE4(v159) & 1;
LABEL_444:
        v188 = 0;
        if (!v189 || v342 || v350 < 0)
          goto LABEL_454;
        time1.duration.value = v350;
        *(_QWORD *)&time1.duration.timescale = v159;
        time1.duration.epoch = 0;
        *(_OWORD *)time2 = v356;
        *(_QWORD *)&time2[16] = v359;
        if (CMTimeCompare(&time1.duration, (CMTime *)time2))
          v188 = 0;
        else
          v188 = (*(_BYTE *)(v12 + 420) & 1) == 0;
        time1.duration.value = v350;
        *(_QWORD *)&time1.duration.timescale = v159;
        time1.duration.epoch = 0;
        *(_OWORD *)time2 = v356;
        *(_QWORD *)&time2[16] = v359;
        v190 = CMTimeCompare(&time1.duration, (CMTime *)time2);
        v191 = v296;
        if (v190)
          v191 = 1;
        if ((v191 & 1) != 0 || v188)
          goto LABEL_454;
LABEL_468:
        CMSampleBufferGetOutputDuration(&v406, v136);
        CMTimeConvertScale(&v386, &v406, *(_DWORD *)(v12 + 100), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v199 = v386.value;
        *(_QWORD *)(a1 + 720) += CMSampleBufferGetNumSamples(v136);
        *(_BYTE *)(a1 + 298) = 0;
        if (FigAudioQueueTimingShimEnqueueBufferWithParameters(*(CMTime **)(v12 + 40), (AudioQueueBuffer *)v325, v328, packetDescriptionsPointerOut, v331, v327 + v329, 0, 0, (uint64_t)v162, rhs))
        {
          FigSignalErrorAt();
          v13 = 0;
          v200 = 1;
LABEL_502:
          v211 = v358;
          goto LABEL_503;
        }
        *(_BYTE *)(a1 + 569) = 0;
        v201 = *(double *)rhs;
        v202 = BYTE8(v379);
        v203 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
        *(_OWORD *)&time1.duration.value = *MEMORY[0x1E0CA2E40];
        *(_OWORD *)&time1.duration.epoch = v203;
        *(_OWORD *)&time1.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
        end.value = *MEMORY[0x1E0CA2E18];
        end.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
        if (!*(_BYTE *)(a1 + 16))
        {
          CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)time2, v136);
          CMSampleBufferGetOutputDuration(&type, v136);
          CMTimeRangeMake((CMTimeRange *)&time1, (CMTime *)time2, &type);
          if ((*(_BYTE *)(a1 + 48) & 2) != 0)
          {
            presentationTimeStamp = time1.presentationTimeStamp;
            *(_OWORD *)&v387.value = v356;
            v387.epoch = v359;
            if (CMTimeCompare(&presentationTimeStamp, &v387)
              || v162
              || (v204 = v300, v205 = v345, (*(_DWORD *)(v12 + 444) & 1) == 0))
            {
              v387 = time1.duration;
              subaq_convertMediaTimeToAQTime((CMTime *)a1, &v387, (uint64_t)&presentationTimeStamp);
              goto LABEL_477;
            }
          }
          else
          {
            if ((v202 & 1) == 0)
            {
              end.value = *MEMORY[0x1E0CA2E68];
              end.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
              v204 = v305;
              v205 = v359;
              goto LABEL_478;
            }
            CMTimeMake(&presentationTimeStamp, (uint64_t)v201, *(_DWORD *)(v12 + 100));
LABEL_477:
            end.value = presentationTimeStamp.value;
            v204 = presentationTimeStamp.flags;
            end.timescale = presentationTimeStamp.timescale;
            v205 = presentationTimeStamp.epoch;
          }
LABEL_478:
          if ((v204 & 1) != 0)
          {
            *(_QWORD *)v289 = end.value;
            *(_DWORD *)(v12 + 440) = end.timescale;
            *(_DWORD *)(v12 + 444) = v204;
            *(_QWORD *)(v12 + 448) = v205;
            *v288 = *(_OWORD *)&time1.presentationTimeStamp.value;
            *(_QWORD *)(v12 + 472) = time1.presentationTimeStamp.epoch;
          }
        }
        time1.duration.value = v403;
        time1.duration.timescale = timescale;
        time1.duration.flags = v348;
        time1.duration.epoch = v339;
        time1.presentationTimeStamp.value = v350;
        *(_QWORD *)&time1.presentationTimeStamp.timescale = v159;
        time1.presentationTimeStamp.epoch = v342;
        CMTimeRangeGetEnd((CMTime *)time2, (CMTimeRange *)&time1);
        *v293 = *(_OWORD *)time2;
        *(_QWORD *)(v12 + 500) = *(_QWORD *)&time2[16];
        *(_OWORD *)v320 = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(a1 + 328) = v345;
        v206 = 1;
        FigAtomicAdd32();
        FigAtomicAdd32();
        v207 = *(_DWORD *)(v12 + 564);
        *(_DWORD *)(v12 + 564) = v207 + 1;
        if (v207 >= 10)
        {
          v208 = (double)v199 / (double)*(int *)(v12 + 100) + *(float *)(v12 + 568);
          *(float *)(v12 + 568) = v208;
          v209 = v208;
          if (v209 >= v6)
          {
            v210 = v209 + v7;
            *(float *)(v12 + 568) = v210;
          }
          else
          {
            v206 = 3;
          }
        }
        if (v206 <= dword_1EE2A2A48)
        {
          LODWORD(presentationTimeStamp.value) = 0;
          LOBYTE(v387.value) = 0;
          v212 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v213 = presentationTimeStamp.value;
          if (os_log_type_enabled(v212, v387.value))
            v214 = v213;
          else
            v214 = v213 & 0xFFFFFFFE;
          if (v214)
          {
            v215 = v6;
            v216 = v7;
            v351 = *(_QWORD *)(v12 + 40);
            v354 = *(_DWORD *)(v12 + 564);
            time1.duration.value = v403;
            time1.duration.timescale = timescale;
            time1.duration.flags = v348;
            time1.duration.epoch = v339;
            v217 = CMTimeGetSeconds(&time1.duration);
            *(_OWORD *)&time1.duration.value = *v293;
            time1.duration.epoch = *(_QWORD *)(v12 + 500);
            v218 = CMTimeGetSeconds(&time1.duration);
            if (v162)
              v219 = *v162 / **(double **)(v12 + 64);
            else
              v219 = NAN;
            v220 = *(_DWORD *)(v12 + 100);
            v221 = *(_DWORD *)(v12 + 480);
            if ((BYTE8(v379) & 2) != 0)
            {
              CMClockMakeHostTimeFromSystemUnits(&type, *(uint64_t *)&rhs[8]);
              v222 = CMTimeGetSeconds(&type);
            }
            else
            {
              v222 = NAN;
            }
            *(_DWORD *)time2 = 136317954;
            *(_QWORD *)&time2[4] = "subaq_enqueueAQBufferIntoAudioQueue";
            *(_WORD *)&time2[12] = 2048;
            *(_QWORD *)&time2[14] = a1;
            *(_WORD *)&time2[22] = 2048;
            *(_QWORD *)&time2[24] = v12;
            *(_WORD *)v391 = 2048;
            *(_QWORD *)&v391[2] = v351;
            *(_WORD *)&v391[10] = 2082;
            *(_QWORD *)&v391[12] = a1 + 768;
            *(_WORD *)&v391[20] = 1024;
            *(_DWORD *)v392 = v354;
            *(_WORD *)&v392[4] = 2048;
            *(Float64 *)&v392[6] = v217;
            v393 = 2048;
            v394 = v218;
            v395 = 2048;
            v396 = (double)v199 / (double)v220;
            v397 = 2048;
            v398 = (double)v221 / (double)v220;
            v399 = 2048;
            v400 = v219;
            v401 = 2048;
            v402 = v222;
            _os_log_send_and_compose_impl();
            a2 = v338;
            v7 = v216;
            v6 = v215;
          }
          else
          {
            a2 = v338;
          }
          v292 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v200 = 0;
          goto LABEL_502;
        }
        v200 = 0;
        v292 = 1;
        v211 = v358;
LABEL_503:
        v223 = v326;
        if (!packetDescriptionsPointerOut)
          v223 = 0;
        if (v223 == 1)
        {
          v224 = CFGetAllocator((CFTypeRef)v12);
          CFAllocatorDeallocate(v224, packetDescriptionsPointerOut);
        }
        v225 = *(_QWORD *)&rhs[8];
        v226 = *(double *)rhs;
        v227 = DWORD2(v379);
        if (v200)
        {
          v227 = 0;
          v225 = 0;
          v226 = 0.0;
        }
        v135 = v302;
        v302[v134] = 0;
        if (!v134)
          v132 = v226;
        v228 = hostTime;
        if (!v134)
          v228 = v225;
        hostTime = v228;
        v229 = v332;
        if (!v134)
          v229 = v227;
        v332 = v229;
        ++v134;
        v133 = counta;
        if (v134 == counta)
        {
          v358 = v211;
          v4 = v336;
          v5 = v313;
          v8 = v287;
          v230 = 0.5;
          goto LABEL_521;
        }
      }
    }
    v109 = 0;
    v110 = (_QWORD *)(v12 + 136);
    v349 = (_QWORD *)(v12 + 336);
    v312 = v5;
    while (1)
    {
      v111 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(theArray, v109);
      *(_QWORD *)time2 = 0;
      *(_QWORD *)lhs = 0;
      *(_QWORD *)rhs = 0;
      type.value = 0;
      if (!*(_BYTE *)(a1 + 16))
        break;
LABEL_330:
      if (++v109 == count)
      {
        LODWORD(v76) = 0;
        v108 = count;
        goto LABEL_334;
      }
    }
    v112 = v111;
    if (!CMSampleBufferDataIsReady(v111))
      goto LABEL_643;
    DataBuffer = CMSampleBufferGetDataBuffer(v112);
    DataPointer = CMBlockBufferGetDataPointer(DataBuffer, 0, (size_t *)&type, (size_t *)rhs, (char **)lhs);
    if (DataPointer)
    {
      v280 = DataPointer;
      v281 = 0;
      goto LABEL_641;
    }
    if (!*(_QWORD *)lhs || (v115 = *(_QWORD *)rhs) == 0)
    {
      FigSignalErrorAt();
      v4 = v336;
      a2 = v338;
      v5 = v312;
      goto LABEL_330;
    }
    v353 = type.value;
    MEMORY[0x19402EEEC](*v110);
    v116 = 0;
    v4 = v336;
    while (1)
    {
      v117 = v12 + v116;
      if (!*(_BYTE *)(v12 + v116 + 160))
        break;
      v116 += 24;
      if (v116 == 192)
      {
        v231 = v110;
        v232 = 0;
        goto LABEL_519;
      }
    }
    *(_BYTE *)(v117 + 160) = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(v12 + 136));
    *(_QWORD *)(v117 + 144) = CFRetain(v112);
    v118 = (_QWORD *)(v117 + 144);
    v119 = CMGetAttachment(v112, v298, 0);
    v118[1] = v119;
    if (v119)
      CFRetain(v119);
    time1.duration.value = MEMORY[0x1E0C809B0];
    *(_QWORD *)&time1.duration.timescale = v8;
    time1.duration.epoch = (CMTimeEpoch)__subaq_acquireAndPrepareAQBuffer_block_invoke;
    time1.presentationTimeStamp.value = (CMTimeValue)&__block_descriptor_tmp_216;
    *(_QWORD *)&time1.presentationTimeStamp.timescale = v12;
    if (subaq_acquireAndPrepareAQBuffer_sAudioQueueCheckPIDOnce != -1)
      dispatch_once(&subaq_acquireAndPrepareAQBuffer_sAudioQueueCheckPIDOnce, &time1);
    v347 = v110;
    if (v353 != v115 || !subaq_acquireAndPrepareAQBuffer_sAudioQueueCanAllocateBufferWithMemory)
    {
      v123 = *(_QWORD *)rhs;
      MEMORY[0x19402EEEC](*v349);
      v124 = 0;
      v125 = -1;
      v126 = -1;
      do
      {
        v122 = *(AudioQueueBuffer **)(v12 + 344 + 8 * v124);
        if (!v122 || v122->mUserData)
          goto LABEL_308;
        if (v123 <= v122->mAudioDataBytesCapacity)
          goto LABEL_323;
        if (v125 == -1)
        {
          v125 = v124;
        }
        else
        {
LABEL_308:
          if (v122)
            v127 = 0;
          else
            v127 = v126 == -1;
          if (v127)
            v126 = v124;
        }
        ++v124;
      }
      while (v124 != 8);
      v128 = (v123 + 4095) & 0xFFFFF000;
      if (v125 == -1)
      {
        if (v126 == -1)
        {
          v232 = v12 + v116 + 144;
          v4 = v336;
          goto LABEL_634;
        }
        v130 = *(_QWORD *)(v12 + 40);
        v129 = (AudioQueueBuffer **)(v12 + 8 * v126 + 344);
      }
      else
      {
        v129 = (AudioQueueBuffer **)(v12 + 8 * v125 + 344);
        FigAudioQueueTimingShimFreeBuffer(*(_QWORD *)(v12 + 40), *v129);
        *v129 = 0;
        v130 = *(_QWORD *)(v12 + 40);
        v128 = (v123 + 4095) & 0xFFFFF000;
      }
      if (FigAudioQueueTimingShimAllocateBuffer(v130, v128, v129))
      {
        FigSignalErrorAt();
        v232 = v12 + v116 + 144;
        v4 = v336;
LABEL_634:
        v231 = (_QWORD *)(v12 + 336);
LABEL_519:
        MEMORY[0x19402EF04](*v231);
        subaq_returnAQBufferInfoPtr(v12, v232);
        hostTime = 0;
        LOBYTE(v332) = 0;
        v13 = 0;
        v292 = 0;
        v132 = 0.0;
        a2 = v338;
        v5 = v312;
        goto LABEL_520;
      }
      v122 = *v129;
LABEL_323:
      v122->mUserData = v118;
      *(_QWORD *)time2 = v122;
      MEMORY[0x19402EF04](*v349);
      if (v353 == v115)
      {
        memcpy(v122->mAudioData, *(const void **)lhs, *(size_t *)rhs);
      }
      else
      {
        v131 = CMSampleBufferGetDataBuffer(v112);
        CMBlockBufferCopyDataBytes(v131, 0, *(size_t *)rhs, v122->mAudioData);
      }
      v4 = v336;
      v5 = v312;
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      v121 = 0;
      *(_BYTE *)(v12 + v116 + 161) = 0;
      goto LABEL_329;
    }
    BufferWithMemory = FigAudioQueueTimingShimAllocateBufferWithMemory(*(_QWORD *)(v12 + 40));
    if (!BufferWithMemory)
    {
      v121 = 1;
      *(_BYTE *)(v12 + v116 + 161) = 1;
      v122 = *(AudioQueueBuffer **)time2;
      v4 = v336;
      v5 = v312;
LABEL_329:
      v122->mAudioDataByteSize = *(_DWORD *)rhs;
      v122->mUserData = v118;
      v302[v109] = v122;
      v290[v109] = v121;
      a2 = v338;
      v110 = v347;
      goto LABEL_330;
    }
    v280 = BufferWithMemory;
    v281 = v12 + v116 + 144;
LABEL_641:
    FigSignalErrorAt();
    subaq_returnAQBufferInfoPtr(v12, v281);
    if (v280 == -12946)
    {
      hostTime = 0;
      LOBYTE(v332) = 0;
      v13 = 0;
      v292 = 0;
    }
    else
    {
LABEL_643:
      faq_dequeueFromSourceQueueAndDiscard();
      hostTime = 0;
      LOBYTE(v332) = 0;
      v292 = 0;
      v13 = 1;
    }
    v132 = 0.0;
    v4 = v336;
    a2 = v338;
    v5 = v312;
LABEL_520:
    v230 = 0.5;
    v135 = v302;
    v133 = count;
LABEL_521:
    v303 = v135;
    v233 = (AudioQueueBuffer **)v135;
    v234 = v290;
    if (v133 >= 1)
    {
      do
      {
        if (*v233)
        {
          v235 = v4;
          v236 = a2;
          v237 = v5;
          v238 = v133;
          subaq_returnAQBufferInfoPtr(v12, (uint64_t)(*v233)->mUserData);
          if (*v234)
          {
            FigAudioQueueTimingShimFreeBuffer(*(_QWORD *)(v12 + 40), *v233);
          }
          else
          {
            v239 = *v233;
            v239->mAudioDataByteSize = 0;
            v239->mUserData = 0;
          }
          v133 = v238;
          v5 = v237;
          a2 = v236;
          v4 = v235;
        }
        ++v234;
        ++v233;
        --v133;
      }
      while (v133);
    }
    v240 = *(const void **)(a1 + 120);
    if (v240)
    {
      v241 = *(_QWORD *)(a1 + 112);
      v242 = CountOfSequentialSamplesWithSeamIdentifier >= v241
           ? *(_QWORD *)(a1 + 112)
           : CountOfSequentialSamplesWithSeamIdentifier;
      *(_QWORD *)(a1 + 112) = v241 - v242;
      if (v241 <= CountOfSequentialSamplesWithSeamIdentifier)
      {
        CFRelease(v240);
        *(_QWORD *)(a1 + 120) = 0;
      }
    }
    v15 = target;
    if (cf)
      CFRelease(cf);
    if (theArray)
      CFRelease(theArray);
    free(v303);
    free(v290);
    if (v286 && !*(_BYTE *)(a1 + 569))
      subaq_flushAudioQueue(a1, v12);
    if (*(_BYTE *)(a1 + 196))
    {
      v243 = *(_DWORD *)(v12 + 100);
      v355 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)lhs = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)&lhs[16] = v345;
      if ((v332 & 2) != 0)
      {
        CMClockMakeHostTimeFromSystemUnits((CMTime *)lhs, hostTime);
        memset(rhs, 0, 24);
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime((CMTime *)rhs, HostTimeClock);
        if (dword_1EE2A2A48)
        {
          v248 = v5;
          LODWORD(presentationTimeStamp.value) = 0;
          LOBYTE(v387.value) = 0;
          v249 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v250 = presentationTimeStamp.value;
          if (os_log_type_enabled(v249, v387.value))
            v251 = v250;
          else
            v251 = v250 & 0xFFFFFFFE;
          if (v251)
          {
            *(_OWORD *)&time1.duration.value = *(_OWORD *)lhs;
            time1.duration.epoch = *(_QWORD *)&lhs[16];
            v252 = CMTimeGetSeconds(&time1.duration);
            *(_OWORD *)&time1.duration.value = *(_OWORD *)rhs;
            time1.duration.epoch = *(_QWORD *)&rhs[16];
            v253 = CMTimeGetSeconds(&time1.duration);
            *(_OWORD *)&time1.duration.value = *(_OWORD *)lhs;
            time1.duration.epoch = *(_QWORD *)&lhs[16];
            a2 = v338;
            *(_OWORD *)time2 = *(_OWORD *)rhs;
            *(_QWORD *)&time2[16] = *(_QWORD *)&rhs[16];
            CMTimeSubtract(&type, &time1.duration, (CMTime *)time2);
            v254 = CMTimeGetSeconds(&type);
            *(_DWORD *)time2 = 136316162;
            *(_QWORD *)&time2[4] = "faq_processTransitions";
            *(_WORD *)&time2[12] = 2048;
            *(_QWORD *)&time2[14] = a1;
            *(_WORD *)&time2[22] = 2048;
            *(Float64 *)&time2[24] = v252;
            *(_WORD *)v391 = 2048;
            *(Float64 *)&v391[2] = v253;
            *(_WORD *)&v391[10] = 2048;
            *(Float64 *)&v391[12] = v254;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          LODWORD(v4) = v336;
          v5 = v248;
        }
      }
      else
      {
        *(_DWORD *)rhs = 0;
        LOBYTE(type.value) = 0;
        v244 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v245 = *(_DWORD *)rhs;
        if (os_log_type_enabled(v244, type.value))
          v246 = v245;
        else
          v246 = v245 & 0xFFFFFFFE;
        if (v246)
        {
          *(_DWORD *)time2 = 136315394;
          *(_QWORD *)&time2[4] = "faq_processTransitions";
          *(_WORD *)&time2[12] = 2048;
          *(_QWORD *)&time2[14] = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v255 = CMClockGetHostTimeClock();
        CMClockGetTime((CMTime *)lhs, v255);
        LODWORD(v4) = v336;
      }
      if ((v332 & 1) != 0)
      {
        v259 = (__int128 *)rhs;
        CMTimeMake((CMTime *)rhs, (uint64_t)(v132 + v230), v243);
      }
      else
      {
        *(_DWORD *)rhs = 0;
        LOBYTE(presentationTimeStamp.value) = 0;
        v256 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v257 = *(_DWORD *)rhs;
        if (os_log_type_enabled(v256, presentationTimeStamp.value))
          v258 = v257;
        else
          v258 = v257 & 0xFFFFFFFE;
        if (v258)
        {
          *(_DWORD *)time2 = 136315394;
          *(_QWORD *)&time2[4] = "faq_processTransitions";
          *(_WORD *)&time2[12] = 2048;
          *(_QWORD *)&time2[14] = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v259 = (__int128 *)MEMORY[0x1E0CA2E68];
      }
      faqTimelineWrangler_setAQTimeInFAQProcessTransitions(v322, v259);
      v260 = (_BYTE *)(a1 + 184);
      while (1)
      {
        v260 = *(_BYTE **)v260;
        if (!v260)
          break;
        if (v260[88])
        {
          if (*(_BYTE *)(a1 + 16))
            v261 = 0;
          else
            v261 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
          v262 = (_QWORD *)(a1 + 184);
          for (i = (_QWORD *)*v346; i != (_QWORD *)v260; i = (_QWORD *)*i)
            v262 = i;
          *v262 = *(_QWORD *)v260;
          --*(_DWORD *)(a1 + 192);
          v264 = *(_OWORD *)(v260 + 24);
          *(_QWORD *)(a1 + 560) = *((_QWORD *)v260 + 5);
          *v343 = v264;
          if (dword_1EE2A2A48)
          {
            LODWORD(presentationTimeStamp.value) = 0;
            LOBYTE(v387.value) = 0;
            v265 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v266 = presentationTimeStamp.value;
            if (os_log_type_enabled(v265, v387.value))
              v267 = v266;
            else
              v267 = v266 & 0xFFFFFFFE;
            if (v267)
            {
              *(_OWORD *)&time1.duration.value = *v343;
              time1.duration.epoch = *(_QWORD *)(a1 + 560);
              v268 = CMTimeGetSeconds(&time1.duration);
              *(_DWORD *)time2 = 136315906;
              *(_QWORD *)&time2[4] = "faq_processTransitions";
              *(_WORD *)&time2[12] = 2048;
              *(_QWORD *)&time2[14] = a1;
              *(_WORD *)&time2[22] = 2048;
              *(_QWORD *)&time2[24] = a1 + 416;
              *(_WORD *)v391 = 2048;
              *(Float64 *)&v391[2] = v268;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            LODWORD(v4) = v336;
            a2 = v338;
          }
          v269 = *(_OWORD *)(v260 + 24);
          *(_QWORD *)(a1 + 536) = *((_QWORD *)v260 + 5);
          *v341 = v269;
          *v340 = v355;
          *(_QWORD *)(a1 + 488) = v345;
          if (v261)
            subaq_setTapTimelineInfo(a1, (uint64_t)v261);
          *((_OWORD *)v260 + 3) = *(_OWORD *)lhs;
          *((_QWORD *)v260 + 8) = *(_QWORD *)&lhs[16];
          *((_DWORD *)v260 + 18) = *(_DWORD *)(a1 + 408);
          dispatch_async_f(*(dispatch_queue_t *)(a1 + 32), v260, (dispatch_function_t)faq_fireTransitionCallback);
          v260 = (_BYTE *)(a1 + 184);
        }
      }
      *(_BYTE *)(a1 + 196) = 0;
      v15 = target;
    }
    if (*(_DWORD *)(*(_QWORD *)(v12 + 64) + 8) == 1819304813)
    {
      memset(&time1, 0, 24);
      CMSampleBufferGetOutputDuration(&time1.duration, v15);
      v9 = 1.0;
      v10 = 1.0;
      v22 = v292;
      if (*(_BYTE *)(a1 + 348))
        goto LABEL_594;
      *(_OWORD *)time2 = *(_OWORD *)&time1.duration.value;
      *(_QWORD *)&time2[16] = time1.duration.epoch;
      *(_OWORD *)lhs = v356;
      *(_QWORD *)&lhs[16] = v359;
      if (CMTimeCompare((CMTime *)time2, (CMTime *)lhs) >= 1
        && (CMTimeMake(&v361, 100, 1000),
            *(_OWORD *)time2 = *(_OWORD *)&time1.duration.value,
            *(_QWORD *)&time2[16] = time1.duration.epoch,
            CMTimeCompare((CMTime *)time2, &v361) < 0))
      {
        *(_BYTE *)(a1 + 348) = 1;
        *v317 = *(_OWORD *)&time1.duration.value;
        *(_QWORD *)(a1 + 368) = time1.duration.epoch;
      }
      else if (*(_BYTE *)(a1 + 348))
      {
LABEL_594:
        *(_OWORD *)time2 = *(_OWORD *)&time1.duration.value;
        *(_QWORD *)&time2[16] = time1.duration.epoch;
        *(_OWORD *)lhs = v356;
        *(_QWORD *)&lhs[16] = v359;
        if (CMTimeCompare((CMTime *)time2, (CMTime *)lhs) >= 1)
        {
          *(_OWORD *)lhs = *v317;
          *(_QWORD *)&lhs[16] = *(_QWORD *)(a1 + 368);
          *(_OWORD *)rhs = *(_OWORD *)&time1.duration.value;
          *(_QWORD *)&rhs[16] = time1.duration.epoch;
          CMTimeAdd((CMTime *)time2, (CMTime *)lhs, (CMTime *)rhs);
          *v317 = *(_OWORD *)time2;
          *(_QWORD *)(a1 + 368) = *(_QWORD *)&time2[16];
          CMTimeMake(&v360, 200, 1000);
          *(_OWORD *)time2 = *v317;
          *(_QWORD *)&time2[16] = *(_QWORD *)(a1 + 368);
          if (CMTimeCompare((CMTime *)time2, &v360) >= 1)
          {
            *(_BYTE *)(a1 + 348) = 0;
            *v317 = v356;
            *(_QWORD *)(a1 + 368) = v359;
          }
        }
      }
LABEL_78:
      v43 = 0;
    }
    else
    {
      v9 = 1.0;
      v10 = 1.0;
      v22 = v292;
      if (!*(_BYTE *)(a1 + 348))
        goto LABEL_78;
      v43 = 0;
      *(_BYTE *)(a1 + 348) = 0;
      *v317 = v356;
      *(_QWORD *)(a1 + 368) = v359;
    }
LABEL_79:
    if (!*(_BYTE *)(a1 + 16))
    {
      if (v15)
        CFRelease(v15);
      if (!v13)
      {
        v13 = 0;
        if (!*(_BYTE *)(a1 + 16))
        {
          *(_BYTE *)(a1 + 348) = 0;
          *v317 = *MEMORY[0x1E0CA2E68];
          *(_QWORD *)(a1 + 368) = v359;
        }
      }
    }
    if (v22)
      LODWORD(v4) = 1;
    if (v43)
      v358 = 1;
  }
  while (v13);
  result = MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  if (v358)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = CMNotificationCenterPostNotification();
  }
  if (*(_QWORD *)(a1 + 712))
  {
    if ((_BYTE)v4)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterPostNotification();
    }
  }
  return result;
}

uint64_t figAudioQueueStartCommon(uint64_t a1, CMTime *a2, CMTime *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, float a9)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex Count;
  CFIndex v20;
  CFIndex i;
  _BYTE *ValueAtIndex;
  uint64_t v23;
  const void *v24;
  int v25;
  BOOL v26;
  _BOOL4 v27;
  __int128 v28;
  CMTime *v29;
  CMTimeEpoch v30;
  BOOL v31;
  CMTime *v32;
  CMTime *v33;
  CMTimeEpoch epoch;
  char v35;
  _BOOL8 v36;
  _BYTE *v37;
  NSObject *v38;
  unsigned int value;
  unsigned int v40;
  uint64_t v41;
  Float64 Seconds;
  uint64_t started;
  uint64_t v44;
  uint64_t v46;
  __int128 v47;
  CMTime v48;
  CMTime v49;
  CMTime v50;
  CMTime v51;
  CMTime v52;
  CMTime v53;
  CMTime lhs;
  CMTime v55;
  CMTime rhs;
  CMTime type;
  CMTime v58;
  CMTime time2;
  _BYTE *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  Float64 v64;
  CMTime time1;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (a1 && (a2->flags & 0x1D) == 1)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    if (*(_BYTE *)(a1 + 16)
      || (*(_BYTE *)(a1 + 48) & 2) != 0
      || a4 && *(_QWORD *)(a1 + 392)
      || a6 && *(_QWORD *)(a1 + 376))
    {
      goto LABEL_67;
    }
    v46 = a5;
    if (((*(_DWORD *)(a1 + 532) & 0x1D) != 1) | a8)
    {
      if (dword_1EE2A2A48)
        goto LABEL_13;
    }
    else if (dword_1EE2A2A48)
    {
LABEL_13:
      LODWORD(v58.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(_BYTE *)(a1 + 16))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
      if (Count >= 1)
      {
        v20 = Count;
        for (i = 0; i != v20; ++i)
          *((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), i) + 560) = 0;
      }
      if (!*(_BYTE *)(a1 + 16))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
        if (ValueAtIndex)
        {
          v23 = (uint64_t)ValueAtIndex;
          if (*((_QWORD *)ValueAtIndex + 5))
          {
            ValueAtIndex[560] = 1;
            if (a4)
            {
              *(_QWORD *)(a1 + 376) = a4;
              *(_QWORD *)(a1 + 384) = v46;
              *(float *)(a1 + 408) = a9;
              *(_BYTE *)(a1 + 568) = 1;
            }
            if (a6)
            {
              *(_QWORD *)(a1 + 392) = a6;
              v24 = *(const void **)(a1 + 400);
              if (v24)
              {
                CFRelease(v24);
                *(_QWORD *)(a1 + 400) = 0;
              }
              if (a7)
                *(_QWORD *)(a1 + 400) = FigCFWeakReferenceHolderCreateWithReferencedObject();
              *(float *)(a1 + 408) = a9;
              *(_BYTE *)(a1 + 568) = 1;
            }
            time1 = *a2;
            v25 = *(_DWORD *)(a1 + 532) & 0x1D;
            v26 = v25 == 1;
            v27 = v25 != 1;
            if (!v26)
            {
              v28 = *(_OWORD *)&a2->value;
              *(_QWORD *)(a1 + 560) = a2->epoch;
              *(_OWORD *)(a1 + 544) = v28;
            }
            v29 = (CMTime *)MEMORY[0x1E0CA2E18];
            if (v27 | a8)
            {
              *(CMTime *)(a1 + 520) = time1;
              *(_OWORD *)(a1 + 472) = *(_OWORD *)&v29->value;
              *(_QWORD *)(a1 + 488) = v29->epoch;
              *(_BYTE *)(v23 + 546) = 1;
              *(_QWORD *)(v23 + 552) = 0;
            }
            *(_OWORD *)(a1 + 608) = 0u;
            *(_OWORD *)(a1 + 624) = 0u;
            *(_OWORD *)(a1 + 576) = 0u;
            *(_OWORD *)(a1 + 592) = 0u;
            time1 = *a2;
            v47 = *MEMORY[0x1E0CA2E68];
            *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
            v30 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
            time2.epoch = v30;
            v31 = CMTimeCompare(&time1, &time2) == 0;
            if ((a3->flags & 0x1D) == 1)
            {
              memset(&v49, 0, sizeof(v49));
              *(_OWORD *)&v48.value = *(_OWORD *)&a2->value;
              v48.epoch = a2->epoch;
              time1 = *v29;
              *(_OWORD *)&time2.value = v47;
              time2.epoch = v30;
              subaq_getAudioQueueLatencyFigTime(a1, v23, &time1);
              if ((time1.flags & 1) == 0)
              {
                *(_OWORD *)&time1.value = v47;
                time1.epoch = v30;
              }
              if (*(_BYTE *)(v23 + 48))
              {
                subaq_getCurrentQueueTime(v23, &v58);
                type = *(CMTime *)(a1 + 448);
                rhs = *(CMTime *)(a1 + 496);
                CMTimeSubtract(&v52, &type, &rhs);
                rhs = v58;
                CMTimeSubtract(&type, &rhs, &v52);
                v32 = *(CMTime **)(v23 + 40);
                v55 = type;
                FigAudioQueueTimingShimConvertTimingShimTimeToAQTime(v32, &v55, &rhs);
                lhs = v48;
                v53 = *(CMTime *)(a1 + 544);
                CMTimeSubtract(&v55, &lhs, &v53);
                v53 = v55;
                v51 = *(CMTime *)(a1 + 496);
                CMTimeAdd(&lhs, &v53, &v51);
                v33 = *(CMTime **)(v23 + 40);
                v51 = lhs;
                FigAudioQueueTimingShimConvertTimingShimTimeToAQTime(v33, &v51, &v53);
                v51 = rhs;
                v50 = v53;
                CMTimeSubtract(&time2, &v51, &v50);
              }
              v58 = time2;
              type = time1;
              CMTimeSubtract(&v49, &v58, &type);
              time2 = *a3;
              v58 = v49;
              CMTimeAdd(&time1, &time2, &v58);
              *(_OWORD *)&a3->value = *(_OWORD *)&time1.value;
              epoch = time1.epoch;
              a3->epoch = time1.epoch;
              *(_OWORD *)&time1.value = *(_OWORD *)&a3->value;
              time1.epoch = epoch;
              *(_QWORD *)(a1 + 584) = CMClockConvertHostTimeToSystemUnits(&time1);
              *(_DWORD *)(a1 + 632) = 2;
              v35 = 1;
            }
            else
            {
              v35 = 0;
            }
            *(_BYTE *)(a1 + 297) = 1;
            v36 = (*(_BYTE *)(a1 + 48) & 4) != 0 && *(_BYTE *)(a1 + 304) && *(float *)(a1 + 272) != 1.0;
            faq_enqueueSourceData(a1, v36);
            if (*(_BYTE *)(a1 + 16))
              v37 = 0;
            else
              v37 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
            v37[560] = 1;
            if (dword_1EE2A2A48)
            {
              LODWORD(v58.value) = 0;
              LOBYTE(type.value) = 0;
              v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              value = v58.value;
              if (os_log_type_enabled(v38, type.value))
                v40 = value;
              else
                v40 = value & 0xFFFFFFFE;
              if (v40)
              {
                v41 = *((_QWORD *)v37 + 5);
                time1 = *a3;
                Seconds = CMTimeGetSeconds(&time1);
                LODWORD(time2.value) = 136316162;
                *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"figAudioQueueStartCommon";
                LOWORD(time2.flags) = 2048;
                *(_QWORD *)((char *)&time2.flags + 2) = a1;
                HIWORD(time2.epoch) = 2048;
                v60 = v37;
                v61 = 2048;
                v62 = v41;
                v63 = 2048;
                v64 = Seconds;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_BYTE *)(a1 + 737) = 1;
            if (!*(_BYTE *)(a1 + 16))
            {
              if (*((_QWORD *)v37 + 75))
              {
                started = subaq_setTapTimelineInfo(a1, (uint64_t)v37);
                if ((_DWORD)started)
                  goto LABEL_68;
                v37[609] = 1;
              }
              *(_BYTE *)(a1 + 572) = v35;
              *(_BYTE *)(a1 + 573) = v31;
            }
            started = subaq_startAudioQueueIfReady(a1, (uint64_t)v37);
            if (!(_DWORD)started)
            {
              if (*(_BYTE *)(a1 + 570) || *(_BYTE *)(a1 + 571))
              {
                if (v37[50])
                  subaq_startListener(a1, (uint64_t)v37);
                *(_WORD *)(a1 + 570) = 0;
              }
              *(_BYTE *)(a1 + 753) = 0;
              *(_BYTE *)(a1 + 641) = 1;
              FigSemaphoreSignal();
              v44 = 0;
              goto LABEL_66;
            }
LABEL_68:
            v44 = started;
LABEL_66:
            MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
            return v44;
          }
        }
      }
    }
LABEL_67:
    started = FigSignalErrorAt();
    goto LABEL_68;
  }
  return FigSignalErrorAt();
}

uint64_t FigAudioQueueStart2(uint64_t a1, CMTime *a2, CMTime *a3, uint64_t a4, uint64_t a5, int a6, float a7)
{
  CMTime v8;
  CMTime v9;

  v9 = *a2;
  v8 = *a3;
  return figAudioQueueStartCommon(a1, &v9, &v8, 0, 0, a4, a5, a6, a7);
}

uint64_t FigAudioQueueStartOffline(uint64_t a1, __int128 *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  _BYTE *ValueAtIndex;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  _BYTE *v16;
  NSObject *v17;
  uint64_t started;
  uint64_t v19;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    if (dword_1EE2A2A48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_BYTE *)(a1 + 16) || (*(_BYTE *)(a1 + 48) & 2) == 0)
    {
      started = FigSignalErrorAt();
    }
    else
    {
      v5 = *a2;
      *(_QWORD *)(a1 + 536) = *((_QWORD *)a2 + 2);
      v6 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(a1 + 520) = v5;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)v6;
      v7 = *(_QWORD *)(v6 + 16);
      v8 = MEMORY[0x1E0CA2E68];
      *(_QWORD *)(a1 + 488) = v7;
      *(_OWORD *)(a1 + 448) = *(_OWORD *)v8;
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(v8 + 16);
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
      if (Count >= 1)
      {
        v10 = Count;
        for (i = 0; i != v10; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), i);
          ValueAtIndex[546] = 1;
          *((_QWORD *)ValueAtIndex + 69) = 0;
        }
      }
      *(_QWORD *)(a1 + 576) = 0;
      *(_DWORD *)(a1 + 632) = 1;
      *(_BYTE *)(a1 + 568) = 1;
      *(_BYTE *)(a1 + 297) = 1;
      faq_enqueueSourceData(a1, 0);
      *(_BYTE *)(a1 + 737) = 1;
      if (*(_BYTE *)(a1 + 16) || (v13 = CFArrayGetCount(*(CFArrayRef *)(a1 + 176)), v13 < 1))
      {
LABEL_25:
        v19 = 0;
        *(_BYTE *)(a1 + 641) = 1;
LABEL_26:
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
        return v19;
      }
      v14 = v13;
      v15 = 0;
      while (1)
      {
        if (*(_BYTE *)(a1 + 16))
          v16 = 0;
        else
          v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v15);
        if (dword_1EE2A2A48)
        {
          v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(_BYTE *)(a1 + 16))
        {
          if (*((_QWORD *)v16 + 75))
          {
            started = subaq_setTapTimelineInfo(a1, (uint64_t)v16);
            if ((_DWORD)started)
              break;
            v16[609] = 1;
          }
          *(_WORD *)(a1 + 572) = 1;
        }
        started = subaq_startAudioQueueIfReady(a1, (uint64_t)v16);
        if ((_DWORD)started)
          break;
        if (v14 == ++v15)
          goto LABEL_25;
      }
    }
    v19 = started;
    goto LABEL_26;
  }
  return FigSignalErrorAt();
}

uint64_t subaq_startAudioQueueIfReady(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _OWORD *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  const void *v11;
  uint64_t v12;
  uint64_t started;
  uint64_t v14;
  const void *v15;
  OpaqueCMClock *HostTimeClock;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex Count;
  CFIndex v19;
  CFIndex v20;
  _BYTE *ValueAtIndex;
  os_log_type_t v23;
  int v24;
  CMTime v25;
  CMTime rhs;
  CMTime type;
  CMTime v28;
  CMTime v29;
  _OWORD v30[3];
  __int128 v31;
  CMTime time2;
  CMTime time1;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_BYTE *)(a1 + 16))
    return 0;
  v4 = *(_DWORD *)(a1 + 48);
  if (*(_QWORD *)(a2 + 600))
  {
    if (!*(_BYTE *)(a1 + 737) || !*(_BYTE *)(a2 + 609) || !*(_BYTE *)(a1 + 736) || !*(_BYTE *)(a2 + 608))
      return 0;
    *(_BYTE *)(a2 + 609) = 0;
  }
  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  memset(&v29, 0, sizeof(v29));
  faqTimelineWrangler_getAQTimePauseOffset(a1 + 416, &v29);
  v5 = *(_DWORD *)(a1 + 48);
  if (!*(_BYTE *)(a1 + 572))
  {
    if ((v5 & 2) == 0 && !*(_BYTE *)(a2 + 49))
    {
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      time2 = v29;
      if (CMTimeCompare(&time1, &time2))
      {
        memset(&v28, 0, sizeof(v28));
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&v28, HostTimeClock);
        memset(&type, 0, sizeof(type));
        CMTimeMake(&rhs, 1, 10);
        time1 = v28;
        CMTimeAdd(&type, &time1, &rhs);
        memset(&v25, 0, sizeof(v25));
        time1 = type;
        time2 = v29;
        CMTimeSubtract(&v25, &time1, &time2);
        time1 = v25;
        *((_QWORD *)&v30[0] + 1) = CMClockConvertHostTimeToSystemUnits(&time1);
        DWORD2(v31) = 2;
        if (!dword_1EE2A2A48)
          goto LABEL_35;
        v24 = 0;
        v23 = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_34:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_35:
        v6 = v30;
        if ((v4 & 2) != 0)
          goto LABEL_36;
        goto LABEL_25;
      }
    }
    if (dword_1EE2A2A48)
    {
      LODWORD(v28.value) = 0;
      LOBYTE(type.value) = 0;
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = 0;
LABEL_24:
    if ((v4 & 2) != 0)
      goto LABEL_36;
    goto LABEL_25;
  }
  if ((v5 & 2) == 0 && !*(_BYTE *)(a2 + 49))
  {
    time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    time2 = v29;
    if (CMTimeCompare(&time1, &time2))
    {
      v9 = *(_QWORD *)(a1 + 584);
      time1 = v29;
      *((_QWORD *)&v30[0] + 1) = v9 - CMClockConvertHostTimeToSystemUnits(&time1);
      DWORD2(v31) = 2;
      if (!dword_1EE2A2A48)
        goto LABEL_35;
      LODWORD(v28.value) = 0;
      LOBYTE(type.value) = 0;
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      goto LABEL_34;
    }
  }
  v6 = (_OWORD *)(a1 + 576);
  if (!dword_1EE2A2A48)
    goto LABEL_24;
  LODWORD(v28.value) = 0;
  LOBYTE(type.value) = 0;
  v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if ((v4 & 2) != 0)
  {
LABEL_36:
    v14 = FigAudioQueueTimingShimStartWithPerfCallback(*(_QWORD *)(a2 + 40), (uint64_t)v6, *(_BYTE *)(a1 + 573), 0, 0);
    if (!(_DWORD)v14)
      goto LABEL_37;
    return v14;
  }
LABEL_25:
  v11 = *(const void **)(a2 + 24);
  if (v11)
  {
    CFRetain(v11);
    v12 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    v12 = 0;
  }
  started = FigAudioQueueTimingShimStartAsyncWithPerfCallback(*(_QWORD *)(a2 + 40), (uint64_t)v6, *(_BYTE *)(a1 + 573), (uint64_t)subaq_audioQueueStartupCompleted, v12, 0, 0);
  if (!(_DWORD)started)
  {
LABEL_37:
    *(_BYTE *)(a2 + 49) = 1;
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      if (*(_BYTE *)(a1 + 16) || (Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176)), Count < 1))
      {
LABEL_45:
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        return 0;
      }
      v19 = Count;
      if (*((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0) + 49))
      {
        v20 = 1;
        while (v19 != v20)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v20++);
          if (!ValueAtIndex[49])
          {
            if (v20 - 1 < v19)
              return 0;
            goto LABEL_45;
          }
        }
        goto LABEL_45;
      }
    }
    return 0;
  }
  v14 = started;
  v15 = *(const void **)(a2 + 24);
  if (v15)
    CFRelease(v15);
  return v14;
}

CMTime *subaq_getCurrentQueueTime@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v4;
  CMTime *result;
  _OWORD v6[3];
  __int128 v7;

  v7 = 0u;
  v4 = MEMORY[0x1E0CA2E68];
  memset(v6, 0, sizeof(v6));
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
  a2->epoch = *(_QWORD *)(v4 + 16);
  result = *(CMTime **)(a1 + 40);
  if (result)
  {
    DWORD2(v7) = 1;
    result = (CMTime *)FigAudioQueueTimingShimGetCurrentTime(result, 0, 0, v6, 0);
    if (!(_DWORD)result && (BYTE8(v7) & 1) != 0)
      return CMTimeMake(a2, (uint64_t)(*(double *)v6 + 0.5), *(_DWORD *)(a1 + 100));
  }
  return result;
}

uint64_t FigAudioQueueStop(uint64_t a1)
{
  return faq_stopAllAudioQueues(a1, 1u);
}

uint64_t faq_stopAllAudioQueues(uint64_t a1, Boolean a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if (a1)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    if (*(_BYTE *)(a1 + 16))
    {
      v8 = FigSignalErrorAt();
    }
    else
    {
      *(_BYTE *)(a1 + 297) = 0;
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
      if (Count < 1)
      {
LABEL_11:
        v9 = 0;
        *(_BYTE *)(a1 + 73) = 0;
        *(_WORD *)(a1 + 570) = 0;
        *(_BYTE *)(a1 + 753) = 0;
        v10 = MEMORY[0x1E0CA2E18];
        v11 = *MEMORY[0x1E0CA2E18];
        *(_OWORD *)(a1 + 520) = *MEMORY[0x1E0CA2E18];
        v12 = *(_QWORD *)(v10 + 16);
        *(_QWORD *)(a1 + 536) = v12;
        *(_OWORD *)(a1 + 472) = v11;
        *(_QWORD *)(a1 + 488) = v12;
        *(_WORD *)(a1 + 640) = 0;
        *(_BYTE *)(a1 + 737) = 0;
LABEL_12:
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
        return v9;
      }
      v5 = Count;
      v6 = 0;
      while (1)
      {
        v7 = *(_BYTE *)(a1 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v6);
        v8 = subaq_stopAudioQueue(a1, (uint64_t)v7, a2);
        if ((_DWORD)v8)
          break;
        v7[48] = 0;
        if (v5 == ++v6)
          goto LABEL_11;
      }
    }
    v9 = v8;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t FigAudioQueueStopOffline(uint64_t a1)
{
  return faq_stopAllAudioQueues(a1, 0);
}

uint64_t FigAudioQueueResetOffline(uint64_t a1)
{
  __n128 v2;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (!*(_BYTE *)(a1 + 16))
    v2.n128_f64[0] = faq_reset(a1, v2.n128_f64[0]);
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24), v2);
  return 0;
}

double faq_reset(uint64_t a1, double result)
{
  CFIndex Count;
  unint64_t v4;
  char *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  AudioQueueParameterValue v7;
  int Parameter;
  float v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  UInt32 v17;
  AudioQueueParameterValue v18[32];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = 1;
  v17 = 4;
  if (!*(_BYTE *)(a1 + 16))
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
    if (Count >= 2)
    {
      v4 = Count + 1;
      do
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 176), v4 - 2);
        --v4;
      }
      while (v4 > 2);
    }
    if (*(_BYTE *)(a1 + 16))
      ValueAtIndex = 0;
    else
      ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
    FigAudioQueueTimingShimGetProperty(*((_QWORD *)ValueAtIndex + 5), 0x6171726Eu, &v16, &v17);
    if (dword_1EE2A2A48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_QWORD *)(a1 + 712) && *(_BYTE *)(a1 + 752))
      faq_disconnectFromOfflineMixer(a1, (uint64_t)ValueAtIndex);
    FigAudioQueueTimingShimReset(*((_QWORD *)ValueAtIndex + 5));
    if (*(_QWORD *)(a1 + 712) && *(_BYTE *)(a1 + 752))
      faq_connectToOfflineMixer((_QWORD *)a1, (uint64_t)ValueAtIndex);
    v7 = 1.0;
    if (*(_BYTE *)(a1 + 236) && *(float *)(a1 + 232) != 0.0)
      v7 = *(float *)(a1 + 232);
    FigAudioQueueTimingShimSetParameter(*((_QWORD *)ValueAtIndex + 5), 2u, v7);
    subaq_restoreParameters(a1, (uint64_t)ValueAtIndex);
    if (v16 && (*(_BYTE *)(a1 + 48) & 2) == 0)
    {
      FigAudioQueueTimingShimPause(*((_QWORD *)ValueAtIndex + 5));
      *(_BYTE *)(a1 + 571) = 1;
      if (*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 568))
      {
        *(_BYTE *)(a1 + 640) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 640) = 0;
        *(_BYTE *)(a1 + 297) = 0;
      }
    }
    v18[0] = 1.0;
    Parameter = FigAudioQueueTimingShimGetParameter(*((_QWORD *)ValueAtIndex + 5), 0x15u, v18);
    v9 = v18[0];
    if (Parameter)
      v9 = 1.0;
    *((float *)ValueAtIndex + 133) = v9;
    v10 = (__int128 *)MEMORY[0x1E0CA2E18];
    if (*(_BYTE *)(a1 + 570))
    {
      *(_BYTE *)(a1 + 570) = 0;
      *(_BYTE *)(a1 + 297) = 0;
      *(_BYTE *)(a1 + 640) = 0;
      v11 = *v10;
      *(_OWORD *)(a1 + 520) = *v10;
      v12 = *((_QWORD *)v10 + 2);
      *(_QWORD *)(a1 + 536) = v12;
      *(_OWORD *)(a1 + 472) = v11;
      *(_QWORD *)(a1 + 488) = v12;
      *(_OWORD *)(ValueAtIndex + 484) = v11;
      *(_QWORD *)(ValueAtIndex + 500) = v12;
    }
    *(_BYTE *)(a1 + 753) = 0;
    v15 = *v10;
    *(_OWORD *)(ValueAtIndex + 408) = *v10;
    v13 = *((_QWORD *)v10 + 2);
    *((_QWORD *)ValueAtIndex + 53) = v13;
    *((_OWORD *)ValueAtIndex + 27) = v15;
    *((_QWORD *)ValueAtIndex + 56) = v13;
    *(_OWORD *)(ValueAtIndex + 456) = v15;
    *((_QWORD *)ValueAtIndex + 59) = v13;
    *(_OWORD *)(ValueAtIndex + 616) = v15;
    *((_QWORD *)ValueAtIndex + 79) = v13;
    MEMORY[0x19402EEEC](*((_QWORD *)ValueAtIndex + 67));
    *(_OWORD *)(ValueAtIndex + 508) = v15;
    *(_QWORD *)(ValueAtIndex + 524) = v13;
    MEMORY[0x19402EF04](*((_QWORD *)ValueAtIndex + 67));
    *(_BYTE *)(a1 + 569) = 1;
    *(_BYTE *)(a1 + 196) = 0;
    *(_BYTE *)(a1 + 348) = 0;
    v14 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)(a1 + 352) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(v14 + 16);
    *(_QWORD *)&result = faq_clearSeamHandlingState((__n128 *)a1).n128_u64[0];
  }
  return result;
}

uint64_t subaq_getAudioQueueLatencyFigTime(uint64_t result, uint64_t a2, CMTime *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (result)
  {
    if (*(_BYTE *)(result + 16))
    {
      return 0;
    }
    else
    {
      result = FigAudioQueueTimingShimGetAudioQueueLatency(*(_QWORD *)(a2 + 40), *(OpaqueCMClock **)(a2 + 576), *(unsigned __int8 *)(result + 738), &v5);
      if (!(_DWORD)result)
      {
        if (dword_1EE2A2A48)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        result = 0;
        *a3 = v5;
      }
    }
  }
  return result;
}

uint64_t subaq_getEQPreset(uint64_t result, uint64_t a2, int *a3)
{
  int v5;
  UInt32 v6;
  int v7;
  float v8;

  v8 = -1.0;
  if (result)
  {
    if (!*(_BYTE *)(result + 16))
    {
      v6 = 4;
      v7 = 0;
      if ((*(_BYTE *)(result + 48) & 4) == 0)
      {
        result = FigAudioQueueTimingShimGetProperty(*(_QWORD *)(a2 + 40), 0x715F6571u, &v7, &v6);
        if (!(_DWORD)result)
        {
          if (v7)
          {
            result = FigAudioQueueTimingShimGetParameter(*(_QWORD *)(a2 + 40), 7u, &v8);
            if ((_DWORD)result)
              return result;
            v5 = (int)v8;
          }
          else
          {
            v5 = -1;
          }
          *a3 = v5;
        }
      }
    }
  }
  return result;
}

uint64_t faq_setAudioCurves(uint64_t a1, unint64_t a2, const __CFDictionary *a3)
{
  _BOOL4 v3;
  const void *Mutable;
  uint64_t value_low;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  _QWORD *v12;
  _OWORD *v13;
  char *v14;
  const __CFArray *Value;
  _QWORD *v16;
  CFMutableArrayRef v17;
  __CFArray *v18;
  __CFDictionary *MutableCopy;
  float v20;
  double v21;
  double v22;
  float v23;
  BOOL v24;
  _OWORD *v25;
  uint64_t v26;
  const void *v27;
  unint64_t v29;
  CFDictionaryRef v30;
  CMTime start;
  CMTime end;
  CMTimeRange theDict;
  CMTime v34;
  CMTimeRange context;

  v3 = a2 == 0;
  if (a2 > 1)
    return 4294954356;
  LODWORD(start.value) = 0;
  theDict.start.value = 0;
  context.start.value = (CMTimeValue)&start;
  *(_QWORD *)&context.start.timescale = a1;
  context.start.epoch = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], &faq_audioProcessingUnitsParametersInspectionResultsDictValueCallbacks);
  context.duration.value = (CMTimeValue)Mutable;
  v30 = a3;
  if (Mutable)
  {
    if (FigCFDictionaryGetValueIfPresent())
    {
      CFDictionaryApplyFunction((CFDictionaryRef)theDict.start.value, (CFDictionaryApplierFunction)faq_inspectAudioProcessingUnitsParametersInNewAudioCurvesApplier, &context);
      Mutable = (const void *)context.duration.value;
    }
    value_low = LODWORD(start.value);
    if (LODWORD(start.value))
      goto LABEL_42;
  }
  else
  {
    value_low = FigSignalErrorAt();
    if ((_DWORD)value_low)
      goto LABEL_42;
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  v29 = a2;
  if (*(_BYTE *)(a1 + 16) || (Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176)), Count < 1))
  {
    value_low = 0;
LABEL_36:
    v26 = a1 + 8 * v29;
    v27 = *(const void **)(v26 + 648);
    *(_QWORD *)(v26 + 648) = v30;
    if (v30)
      CFRetain(v30);
    if (v27)
      CFRelease(v27);
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
    if (value_low)
    {
      CFRelease((CFTypeRef)value_low);
      value_low = 0;
    }
    goto LABEL_42;
  }
  v10 = Count;
  v11 = 0;
  value_low = 0;
  v12 = (_QWORD *)(a1 + 8 * a2 + 648);
  v13 = (_OWORD *)(a1 + 520);
  while (1)
  {
    v14 = *(_BYTE *)(a1 + 16) ? 0 : (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v11);
    memset(&context, 0, sizeof(context));
    if ((v14[496] & 1) != 0)
      break;
LABEL_32:
    if (v10 == ++v11)
      goto LABEL_36;
  }
  if (value_low)
  {
LABEL_22:
    v20 = *(float *)(a1 + 408);
    v21 = 1.0;
    if (v20 == 0.0)
      v22 = 1.0;
    else
      v22 = v20;
    if (*(_BYTE *)(a1 + 236))
    {
      v23 = *(float *)(a1 + 232);
      v24 = v23 == 0.0;
      v21 = v23;
      if (v24)
        v21 = 1.0;
    }
    v25 = v14 + 484;
    if (v22 / v21 >= 0.0)
    {
      *(_OWORD *)&v34.value = *v13;
      v34.epoch = *(_QWORD *)(a1 + 536);
      *(_OWORD *)&theDict.start.value = *v25;
      theDict.start.epoch = *(_QWORD *)(v14 + 500);
      CMTimeRangeFromTimeToTime(&context, &v34, &theDict.start);
    }
    else
    {
      *(_OWORD *)&end.value = *v13;
      end.epoch = *(_QWORD *)(a1 + 536);
      *(_OWORD *)&start.value = *v25;
      start.epoch = *(_QWORD *)(v14 + 500);
      CMTimeRangeFromTimeToTime(&theDict, &start, &end);
      context = theDict;
    }
    theDict = context;
    subaq_scheduleVolumeCurvesForMediaTimeRange(a1, (uint64_t)v14, (CFDictionaryRef)value_low, &theDict, v3, 1);
    subaq_scheduleCinematicForMediaTimeRange((const __CFArray *)a1, (uint64_t)v14, (CFDictionaryRef)value_low);
    theDict = context;
    subaq_scheduleAudioProcessingUnitForMediaTimeRange(a1, (uint64_t)v14, value_low, (__int128 *)&theDict.start.value, v3, (uint64_t)Mutable);
    goto LABEL_32;
  }
  if (!*v12)
  {
    value_low = (uint64_t)v30;
    if (!v30)
    {
      *v12 = 0;
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
      goto LABEL_42;
    }
    goto LABEL_21;
  }
  value_low = (uint64_t)v30;
  if (v30)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v30, CFSTR("AudioCurve_Volume"));
    if (Value)
    {
      if (CFArrayGetCount(Value))
      {
LABEL_21:
        CFRetain((CFTypeRef)value_low);
        goto LABEL_22;
      }
    }
  }
  v16 = v12;
  v17 = CFArrayCreateMutable(0, 3, MEMORY[0x1E0C9B378]);
  if (!v17)
    goto LABEL_47;
  v18 = v17;
  *(_OWORD *)&theDict.start.value = *MEMORY[0x1E0CA2E68];
  theDict.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  FigCFArrayAppendCMTime();
  FigCFArrayAppendDouble();
  CFArrayAppendValue(v18, CFSTR("Linear"));
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    value_low = (uint64_t)MutableCopy;
    CFDictionarySetValue(MutableCopy, CFSTR("AudioCurve_Volume"), v18);
    CFRelease(v18);
    v12 = v16;
    goto LABEL_22;
  }
  CFRelease(v18);
LABEL_47:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  value_low = 4294954355;
LABEL_42:
  if (Mutable)
    CFRelease(Mutable);
  return value_low;
}

CFIndex faq_updateRate2Enable(CFIndex result)
{
  CFIndex v1;
  _BOOL4 v2;
  CFIndex v3;
  CFIndex i;
  _QWORD *ValueAtIndex;
  _BOOL4 v6;

  v1 = result;
  if (*(_BYTE *)(result + 672))
    v2 = 1;
  else
    v2 = *(float *)(result + 756) != 0.0;
  v6 = v2;
  if (!*(_BYTE *)(result + 16))
  {
    result = CFArrayGetCount(*(CFArrayRef *)(result + 176));
    if (result >= 1)
    {
      v3 = result;
      for (i = 0; i != v3; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 176), i);
        result = FigAudioQueueTimingShimSetProperty(ValueAtIndex[5], 0x71737232u, &v6, 4u);
      }
    }
  }
  return result;
}

uint64_t faq_connectToOfflineMixer(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[89];
  if (!v2 || *(_BYTE *)(a2 + 642))
    return 0;
  FigAudioQueueTimingShimGetAudioQueue(*(_QWORD *)(a2 + 40));
  result = FigAudioQueueOfflineMixerConnectAudioQueue(v2, a1);
  if (!(_DWORD)result)
    *(_BYTE *)(a2 + 642) = 1;
  return result;
}

uint64_t faq_setPropertyOnAllSubAudioQueues(uint64_t a1, const void *a2, const __CFString *a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *v9;
  uint64_t result;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
  if (Count < 1)
    return 0;
  v7 = Count;
  v8 = 0;
  while (1)
  {
    v9 = *(_BYTE *)(a1 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v8);
    result = subaq_setProperty(a1, (uint64_t)v9, a2, a3);
    if ((_DWORD)result)
      break;
    if (v7 == ++v8)
      return 0;
  }
  return result;
}

uint64_t faq_addAudioProcessingTapListeners(uint64_t a1)
{
  uint64_t result;

  if (!*(_QWORD *)(a1 + 728))
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  result = FigNotificationCenterAddWeakListener();
  if (!(_DWORD)result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

const void *faq_GetLastSubAudioQueue(uint64_t a1)
{
  CFIndex Count;

  if (!a1)
    return 0;
  if (*(_BYTE *)(a1 + 16))
    return 0;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
  if (*(_BYTE *)(a1 + 16))
    return 0;
  else
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), Count - 1);
}

uint64_t FigAudioQueueGetParameter(uint64_t a1, AudioQueueParameterID a2, _DWORD *a3)
{
  _QWORD *ValueAtIndex;
  uint64_t v7;
  uint64_t Parameter;
  int v10;

  v10 = 0;
  if (!a1 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (!*(_BYTE *)(a1 + 16)
    && (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0)) != 0
    && (v7 = ValueAtIndex[5]) != 0)
  {
    Parameter = FigAudioQueueTimingShimGetParameter(v7, a2, (AudioQueueParameterValue *)&v10);
    if (!(_DWORD)Parameter)
      *a3 = v10;
  }
  else
  {
    Parameter = FigSignalErrorAt();
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return Parameter;
}

uint64_t FigAudioQueueRestoreParameters(uint64_t a1)
{
  _QWORD *ValueAtIndex;
  uint64_t v3;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (!*(_BYTE *)(a1 + 16)
    && (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0)) != 0
    && ValueAtIndex[5])
  {
    subaq_restoreParameters(a1, (uint64_t)ValueAtIndex);
    v3 = 0;
  }
  else
  {
    v3 = FigSignalErrorAt();
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v3;
}

const __CFDictionary *subaq_restoreParameters(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *result;

  if (*(_BYTE *)(a1 + 204))
    FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 1u, *(AudioQueueParameterValue *)(a1 + 200));
  if (*(_BYTE *)(a1 + 212))
    FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 5u, *(AudioQueueParameterValue *)(a1 + 208));
  if (*(_BYTE *)(a1 + 220))
    FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 9u, *(AudioQueueParameterValue *)(a1 + 216));
  if (*(_BYTE *)(a1 + 228))
    FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 0xEu, *(AudioQueueParameterValue *)(a1 + 224));
  result = *(const __CFDictionary **)(a1 + 240);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("LoudnessInfo"));
    if (result)
    {
      if (result != (const __CFDictionary *)*MEMORY[0x1E0C9B0D0])
        return (const __CFDictionary *)subaq_setProperty(a1, a2, CFSTR("LoudnessInfo"), (const __CFString *)result);
    }
  }
  return result;
}

uint64_t FigAudioQueueCopyPerformanceDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  const void *ValueAtIndex;
  _QWORD *v5;
  uint64_t v6;
  int DefaultAudioPrimingFrameCount;
  const __CFAllocator *v8;
  CFIndex v9;
  void **v10;
  CFDictionaryRef v11;
  const void *v12;
  uint64_t v13;
  UInt32 v15;
  uint64_t v16;
  uint64_t valuePtr;
  void *values[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 keys;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  keys = 0u;
  v29 = 0u;
  *(_OWORD *)values = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  valuePtr = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (!*(_BYTE *)(a1 + 16)
    && (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0)) != 0
    && (v5 = ValueAtIndex, *((_QWORD *)ValueAtIndex + 5)))
  {
    v6 = *(_QWORD *)(a1 + 720) * *(unsigned int *)(*((_QWORD *)ValueAtIndex + 8) + 20);
    DefaultAudioPrimingFrameCount = FigGaplessInfoGetDefaultAudioPrimingFrameCount(*((const opaqueCMFormatDescription **)ValueAtIndex
                                                                                   + 7));
    valuePtr = (v6 - DefaultAudioPrimingFrameCount) & ~((v6 - DefaultAudioPrimingFrameCount) >> 63);
    *(_QWORD *)&keys = CFSTR("NumberOfInputPacketsFedToDecoder");
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(a1 + 720));
    *((_QWORD *)&keys + 1) = CFSTR("NumberOfOutputFramesExpected");
    values[1] = CFNumberCreate(v8, kCFNumberSInt64Type, &valuePtr);
    v16 = 0;
    v15 = 8;
    FigAudioQueueTimingShimGetProperty(v5[5], 0x24696E64u, &v16, &v15);
    if (v16)
    {
      *(_QWORD *)&v29 = CFSTR("AudioConverterStatistics");
      *(_QWORD *)&v19 = v16;
      v9 = 3;
    }
    else
    {
      v9 = 2;
    }
    v10 = values;
    v11 = CFDictionaryCreate(v8, (const void **)&keys, (const void **)values, v9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    do
    {
      v12 = *v10++;
      CFRelease(v12);
      --v9;
    }
    while (v9);
    v13 = 0;
    *a2 = v11;
  }
  else
  {
    v13 = FigSignalErrorAt();
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v13;
}

uint64_t faq_registerFAQType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gFAQID = result;
  return result;
}

uint64_t FigAudioQueueIsPassthroughSupported()
{
  return 1;
}

uint64_t faq_oneTimeInitializationWork()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

BOOL faq_scaledEditRateSupportValidator_one32nd_to_32(uint64_t a1, double a2)
{
  double v2;
  float v3;
  double v4;

  v2 = 1.0;
  if (*(_BYTE *)(a1 + 236))
  {
    v3 = *(float *)(a1 + 232);
    if (v3 != 0.0)
      v2 = v3;
  }
  v4 = v2 * a2;
  return v4 <= 32.0 && v4 >= 0.03125;
}

uint64_t faq_scaledEditRateSupportValidator_lowQualityZeroLatency(uint64_t a1, double a2)
{
  float v2;
  BOOL v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;

  if (*(_BYTE *)(a1 + 236))
  {
    v2 = *(float *)(a1 + 232);
    v3 = v2 == 0.0;
    v4 = v2;
    if (v3)
      v4 = 1.0;
  }
  else
  {
    v4 = 1.0;
  }
  v5 = 0;
  v6 = v4 * a2;
  while (1)
  {
    v7 = *(double *)&qword_1932F7150[v5];
    v8 = v7 * 0.98;
    v9 = v7 * 1.02;
    if (v8 < v6 && v6 < v9)
      break;
    if (++v5 == 7)
      return 0;
  }
  return 1;
}

BOOL faq_scaledEditRateSupportValidator_noScaleAllowed(uint64_t a1, double a2)
{
  double v2;
  float v3;

  v2 = 1.0;
  if (*(_BYTE *)(a1 + 236))
  {
    v3 = *(float *)(a1 + 232);
    if (v3 != 0.0)
      v2 = v3;
  }
  return v2 * a2 == 1.0;
}

void faq_sourceDataBecameReady()
{
  uint64_t v0;
  const void *v1;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    if (!*(_BYTE *)(v0 + 16))
      FigSemaphoreSignal();
    CFRelease(v1);
  }
}

void faq_sourceEndOfDataReached()
{
  _BYTE *v0;
  void *v1;
  NSObject *global_queue;

  v0 = (_BYTE *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = v0;
    if (!v0[16])
    {
      CFRetain(v0);
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async_f(global_queue, v1, (dispatch_function_t)faq_deferredAudioQueueEndOfDataReached);
      FigSemaphoreSignal();
    }
    CFRelease(v1);
  }
}

void faq_resetOutput(uint64_t a1, uint64_t a2)
{
  double v3;

  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 24));
  if (!*(_BYTE *)(a2 + 16))
    faq_reset(a2, v3);
  JUMPOUT(0x19402EA24);
}

void faq_inhibitOutputUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  double v7;
  const void *v8;
  const void *Value;

  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 24));
  if (!*(_BYTE *)(a2 + 16))
  {
    v8 = *(const void **)(a2 + 104);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a2 + 104) = 0;
    }
    if (a5)
    {
      Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA2748]);
      if (Value)
      {
        *(_QWORD *)(a2 + 104) = Value;
        CFRetain(Value);
      }
    }
    faq_reset(a2, v7);
  }
  JUMPOUT(0x19402EA24);
}

void faq_deferredAudioQueueEndOfDataReached(_BYTE *cf)
{
  if (!cf[16])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(cf);
}

uint64_t subaq_createValidSubAQSetAndLock()
{
  uint64_t result;
  BOOL v1;

  gValidFigSubAudioQueueSet = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  result = FigReadWriteLockCreate();
  gValidFigSubAudioQueueSetRWLock = result;
  if (gValidFigSubAudioQueueSet)
    v1 = result == 0;
  else
    v1 = 1;
  if (v1)
    return FigSignalErrorAt();
  return result;
}

uint64_t subaq_setupForRichestDecode(uint64_t a1, CMFormatDescriptionRef desc)
{
  uint64_t v3;
  const void *v4;
  uint64_t v6;
  CFIndex size;
  void *ptr;
  uint64_t v9;

  ptr = 0;
  v9 = 0;
  size = 0;
  CMFormatDescriptionGetMediaSubType(desc);
  v3 = MEMORY[0x19402D578](a1 + 16);
  if (!v3)
    return 0;
  v4 = (const void *)v3;
  if (*(_BYTE *)(v3 + 16))
  {
    v6 = 0;
  }
  else
  {
    CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout();
    v6 = FigSignalErrorAt();
  }
  CFRelease(v4);
  return v6;
}

const void **subaq_ensureClock(uint64_t a1, uint64_t a2)
{
  const void **v2;
  CMClockRef *v3;
  CFAllocatorRef v4;
  const __CFString *v5;
  const __CFAllocator *v6;

  v2 = (const void **)a1;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 16))
      return 0;
    if (*(_QWORD *)(a2 + 576))
      return 0;
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
      return 0;
    v3 = (CMClockRef *)(a2 + 576);
    if (FigPreferAudioSessionClock()
      && (v4 = CFGetAllocator(v2), !FigAudioSessionClockCreate((uint64_t)v4, v2[33], 0, v3)))
    {
      return 0;
    }
    else
    {
      v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "VirtualAudioDevice_Default", 0);
      v6 = CFGetAllocator(v2);
      v2 = (const void **)CMAudioDeviceClockCreate(v6, v5, v3);
      if (v5)
        CFRelease(v5);
    }
  }
  return v2;
}

void subaq_deferredPerformStartupSync(const void *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  const void *v5;

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = MEMORY[0x19402D578](v2 + 16);
    if (v4)
    {
      v5 = (const void *)v4;
      if (!*(_BYTE *)(v4 + 16))
        subaq_performStartupSync(v4, (uint64_t)v3);
      CFRelease(v3);
    }
    else
    {
      v5 = v3;
    }
    CFRelease(v5);
  }
  CFRelease(a1);
}

uint64_t fsaq_registerFSAQType()
{
  gFSAQID = _CFRuntimeRegisterClass();
  return FigCFWeakReferenceTableCreate();
}

void fsaq_Init(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x2C8uLL);
}

void fsaq_Finalize(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  AudioQueueBuffer *v13;
  uint64_t i;
  uint64_t v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  const void *v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v23;
  const void *v24;
  const __CFAllocator *v25;
  const __CFAllocator *v26;
  const void *v27;

  v2 = MEMORY[0x19402D578](a1 + 16);
  FigReadWriteLockLockForWrite();
  CFSetRemoveValue((CFMutableSetRef)gValidFigSubAudioQueueSet, (const void *)a1);
  FigReadWriteLockUnlockForWrite();
  if (*(_BYTE *)(a1 + 642))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3 && !*(_BYTE *)(v2 + 16) && *(_QWORD *)(v2 + 712))
    faq_disconnectFromOfflineMixer(v2, a1);
  v4 = *(NSObject **)(a1 + 680);
  if (v4)
  {
    dispatch_source_cancel(v4);
    if (*(_BYTE *)(a1 + 688))
    {
      v5 = *(NSObject **)(a1 + 672);
      if (v5 != dispatch_get_current_queue())
        dispatch_sync_f(v5, 0, (dispatch_function_t)subaq_noop);
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 680));
    *(_QWORD *)(a1 + 680) = 0;
    v6 = *(const void **)(a1 + 24);
    if (v6)
      CFRelease(v6);
  }
  v7 = *(NSObject **)(a1 + 672);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(a1 + 672) = 0;
  }
  v8 = *(const void **)(a1 + 712);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 712) = 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v9 = *(void **)(a1 + 32);
    FigCFWeakReferenceTableRemoveValue();
    FigAudioQueueTimingShimRemovePropertyListener(*(_QWORD *)(a1 + 40), 0x71637665u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v9);
    FigAudioQueueTimingShimRemovePropertyListener(*(_QWORD *)(a1 + 40), 0x61747072u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v9);
    FigAudioQueueTimingShimRemovePropertyListener(*(_QWORD *)(a1 + 40), 0x6171726Eu, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_startStopListener, v9);
    if (!v2)
      goto LABEL_23;
    *(_QWORD *)(v2 + 376) = 0;
    *(_QWORD *)(v2 + 392) = 0;
    v10 = *(const void **)(v2 + 400);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v2 + 400) = 0;
    }
    if (*(_BYTE *)(v2 + 72))
LABEL_23:
      FigAudioQueueTimingShimRemovePropertyListener(*(_QWORD *)(a1 + 40), 0x666C7368u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v9);
    FigAudioQueueTimingShimRemovePropertyListener(*(_QWORD *)(a1 + 40), 0x71646C73u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v9);
    FigAudioQueueTimingShimRemovePropertyListener(*(_QWORD *)(a1 + 40), 0x6864666Du, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v9);
    if (!v2 || (*(_BYTE *)(v2 + 49) & 2) == 0)
    {
      FigAudioQueueTimingShimRemovePropertyListener(*(_QWORD *)(a1 + 40), 0x72746F72u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v9);
      FigAudioQueueTimingShimRemovePropertyListener(*(_QWORD *)(a1 + 40), 0x69737470u, (void (__cdecl *)(void *, AudioQueueRef, AudioQueuePropertyID))subaq_deferringAQPropertyListenerHandler, v9);
    }
    FigReadWriteLockLockForWrite();
    FigReadWriteLockUnlockForWrite();
    FigAudioQueueTimingShimStop(*(_QWORD *)(a1 + 40), 1u);
    v11 = 0;
    v12 = a1 + 344;
    do
    {
      v13 = *(AudioQueueBuffer **)(v12 + v11);
      if (v13)
      {
        FigAudioQueueTimingShimFreeBuffer(*(_QWORD *)(a1 + 40), v13);
        *(_QWORD *)(v12 + v11) = 0;
      }
      v11 += 8;
    }
    while (v11 != 64);
    for (i = 0; i != 192; i += 24)
    {
      v15 = a1 + i;
      if (*(_BYTE *)(a1 + i + 160))
      {
        v16 = *(const void **)(v15 + 144);
        if (v16)
        {
          CFRelease(v16);
          *(_QWORD *)(v15 + 144) = 0;
        }
        v17 = *(const void **)(a1 + i + 152);
        if (v17)
        {
          CFRelease(v17);
          *(_QWORD *)(a1 + i + 152) = 0;
        }
        *(_BYTE *)(v15 + 160) = 0;
      }
    }
    v18 = *(_QWORD *)(a1 + 600);
    if (v18)
    {
      v19 = *(_QWORD *)(a1 + 592);
      v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v20)
        v20(v19, v18);
      v21 = *(const void **)(a1 + 592);
      if (v21)
      {
        CFRelease(v21);
        *(_QWORD *)(a1 + 592) = 0;
      }
      *(_QWORD *)(a1 + 600) = 0;
    }
    if (dword_1EE2A2A48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigAudioQueueTimingShimDispose(*(AudioQueueRef **)(a1 + 40), 1u);
    *(_QWORD *)(a1 + 40) = 0;
    CFRelease(*(CFTypeRef *)(a1 + 24));
  }
  v23 = *(const void **)(a1 + 576);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 576) = 0;
  }
  if (*(_QWORD *)(a1 + 136))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 136) = 0;
  }
  if (*(_QWORD *)(a1 + 336))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 336) = 0;
  }
  if (*(_QWORD *)(a1 + 536))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 536) = 0;
  }
  if (*(_QWORD *)(a1 + 648))
  {
    FigReadWriteLockDestroy();
    *(_QWORD *)(a1 + 648) = 0;
  }
  v24 = *(const void **)(a1 + 56);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v25 = CFGetAllocator((CFTypeRef)a1);
    CFAllocatorDeallocate(v25, *(void **)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    v26 = CFGetAllocator((CFTypeRef)a1);
    CFAllocatorDeallocate(v26, *(void **)(a1 + 80));
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 96) = 0;
  }
  FigCFWeakReferenceStore();
  v27 = *(const void **)(a1 + 24);
  if (v27)
    CFRelease(v27);
  if (v2)
    CFRelease((CFTypeRef)v2);
}

__CFString *fsaq_CopyFormattingDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigSubAudioQueue %p (rc=%d)"), a1, v4);
  return Mutable;
}

__CFString *fsaq_CopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  subaq_appendDebugDesc(Mutable, a1);
  return Mutable;
}

void subaq_deferringAQPropertyListenerHandler(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  dispatch_queue_t *v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = FigCFWeakReferenceTableCopyValue();
  if (v4)
  {
    v5 = (const void *)v4;
    v6 = MEMORY[0x19402D578](v4 + 16);
    if (v6)
    {
      v7 = (dispatch_queue_t *)v6;
      if (!*(_BYTE *)(v6 + 16) && subaq_lockListenerBarrierForValidSubAQ((uint64_t)v5))
      {
        v8 = malloc_type_malloc(0x18uLL, 0x1020040EDCEB4C7uLL);
        if (v8)
        {
          v9 = v8;
          *v8 = CFRetain(v7);
          v9[1] = CFRetain(v5);
          *((_DWORD *)v9 + 4) = a3;
          dispatch_async_f(v7[5], v9, (dispatch_function_t)subaq_deferredAQPropertyListenerHandler);
        }
        FigReadWriteLockUnlockForRead();
      }
      CFRelease(v7);
    }
    CFRelease(v5);
  }
}

void subaq_startStopListener()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  int v6;
  UInt32 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = 4;
  v0 = FigCFWeakReferenceTableCopyValue();
  if (v0)
  {
    v1 = v0;
    v2 = MEMORY[0x19402D578](v0 + 16);
    if (v2)
    {
      v3 = v2;
      if (subaq_lockListenerBarrierForValidSubAQ(v1))
      {
        if (!FigAudioQueueTimingShimGetProperty(*(_QWORD *)(v1 + 40), 0x6171726Eu, &v6, &v7))
        {
          if (v6)
          {
            if (dword_1EE2A2A48)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            subaq_startListener(v3, v1);
          }
          else
          {
            if (dword_1EE2A2A48)
            {
              v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (!*(_BYTE *)(v3 + 16))
            {
              CFRetain(*(CFTypeRef *)(v1 + 24));
              dispatch_async_f(*(dispatch_queue_t *)(v3 + 32), *(void **)(v1 + 24), (dispatch_function_t)subaq_stopListenerInternal);
            }
          }
        }
        FigReadWriteLockUnlockForRead();
      }
      CFRelease((CFTypeRef)v3);
    }
    CFRelease((CFTypeRef)v1);
  }
}

uint64_t subaq_lockListenerBarrierForValidSubAQ(uint64_t a1)
{
  FigReadWriteLockLockForRead();
  if (a1)
  {
    if (CFSetContainsValue((CFSetRef)gValidFigSubAudioQueueSet, (const void *)a1))
    {
      FigReadWriteLockLockForRead();
      a1 = 1;
    }
    else
    {
      a1 = 0;
    }
  }
  FigReadWriteLockUnlockForRead();
  return a1;
}

void subaq_deferredAQPropertyListenerHandler(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  const void *v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  const void *v12;
  CFIndex Count;
  CFIndex v14;
  const void *v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  const void *v19;
  int v20;
  int v21;
  CFIndex v22;
  _BYTE *v23;
  void *v24;
  const __CFAllocator *v25;
  CFDictionaryRef v26;
  UInt32 v27;
  UInt32 valuePtr;
  void *values;

  v3 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 1);
  v4 = *((_DWORD *)a1 + 4);
  if (v4 <= 1769174127)
  {
    if (v4 > 1718383463)
    {
      if (v4 != 1718383464)
      {
        if (v4 == 1751410285)
          goto LABEL_23;
        goto LABEL_93;
      }
      MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 24));
      if (!*(_BYTE *)(v3 + 16))
      {
        Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 176));
        if (Count < 1)
        {
          v15 = 0;
LABEL_57:
          if (v15 != (const void *)v2)
            goto LABEL_92;
        }
        else
        {
          v14 = 0;
          while (1)
          {
            v15 = *(_BYTE *)(v3 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 176), v14);
            if (v15 == (const void *)v2)
              break;
            if (Count == ++v14)
              goto LABEL_57;
          }
        }
        v20 = *(_DWORD *)(v2 + 612);
        if (v20)
        {
          v21 = v20 - 1;
          *(_DWORD *)(v2 + 612) = v21;
          if (*(_BYTE *)(v2 + 640))
          {
            if (!v21)
            {
              *(_BYTE *)(v2 + 640) = 0;
              if (Count < 1)
              {
LABEL_54:
                MEMORY[0x19402EA24](*(_QWORD *)(v3 + 24));
                CMNotificationCenterGetDefaultLocalCenter();
                goto LABEL_55;
              }
              v22 = 0;
              while (1)
              {
                v23 = *(_BYTE *)(v3 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 176), v22);
                if (v23[641] == 1)
                  break;
                if (Count == ++v22)
                  goto LABEL_54;
              }
              v23[641] = 0;
              if (*(_BYTE *)(v3 + 73) || (*(_BYTE *)(v3 + 48) & 2) != 0)
              {
                subaq_startSlavedAudioQueue(v3, (uint64_t)v23);
                subaq_stopAudioQueue(v3, v2, 0);
              }
            }
          }
        }
      }
    }
    else
    {
      if (v4 != 1635020914)
      {
        if (v4 == 1685288048)
          goto LABEL_23;
        goto LABEL_93;
      }
      MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 24));
      if (!*(_BYTE *)(v3 + 16))
      {
        v9 = CFArrayGetCount(*(CFArrayRef *)(v3 + 176));
        if (v9 >= 1)
        {
          v10 = v9;
          v11 = 0;
          while (1)
          {
            v12 = *(_BYTE *)(v3 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 176), v11);
            if (v12 == (const void *)v2)
              goto LABEL_54;
            if (v10 == ++v11)
              goto LABEL_53;
          }
        }
        v12 = 0;
LABEL_53:
        if (v12 == (const void *)v2)
          goto LABEL_54;
      }
    }
LABEL_92:
    MEMORY[0x19402EA24](*(_QWORD *)(v3 + 24));
    goto LABEL_93;
  }
  if (v4 <= 1902406770)
  {
    if (v4 == 1769174128)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 24));
      *(_BYTE *)(v3 + 570) = 1;
      *(_BYTE *)(v3 + 753) = 1;
    }
    else
    {
      if (v4 != 1902343781)
        goto LABEL_93;
      v27 = 4;
      valuePtr = 0;
      MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 24));
      if (!*(_BYTE *)(v3 + 16))
      {
        v5 = CFArrayGetCount(*(CFArrayRef *)(v3 + 176));
        if (v5 >= 1)
        {
          v6 = v5;
          v7 = 0;
          while (1)
          {
            v8 = *(_BYTE *)(v3 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 176), v7);
            if (v8 == (const void *)v2)
              break;
            if (v6 == ++v7)
              goto LABEL_80;
          }
          v8 = (const void *)v2;
LABEL_80:
          if (v8
            && v8 == (const void *)v2
            && !FigAudioQueueTimingShimGetProperty(*(_QWORD *)(v2 + 40), 0x71637665u, &valuePtr, &v27))
          {
            MEMORY[0x19402EA24](*(_QWORD *)(v3 + 24));
            if (valuePtr)
            {
              v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
              v26 = CFDictionaryCreate(v25, (const void **)kFigAudioQueueNotificationParameter_ConverterError, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
              if (values)
                CFRelease(values);
              if (v26)
                CFRelease(v26);
            }
            goto LABEL_93;
          }
        }
      }
    }
    goto LABEL_92;
  }
  if (v4 == 1902406771)
  {
    values = 0;
    valuePtr = 0;
    MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 24));
    if (!*(_BYTE *)(v3 + 16))
    {
      v16 = CFArrayGetCount(*(CFArrayRef *)(v3 + 176));
      if (v16 < 1)
      {
        v19 = 0;
LABEL_70:
        if (v19 != (const void *)v2)
          goto LABEL_92;
      }
      else
      {
        v17 = v16;
        v18 = 0;
        while (1)
        {
          v19 = *(_BYTE *)(v3 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 176), v18);
          if (v19 == (const void *)v2)
            break;
          if (v17 == ++v18)
            goto LABEL_70;
        }
      }
      valuePtr = 8;
      if (!FigAudioQueueTimingShimGetProperty(*(_QWORD *)(v2 + 40), 0x71646C73u, &values, &valuePtr))
      {
        v24 = values;
        *(_QWORD *)(v2 + 664) = values;
        if (*(_BYTE *)(v2 + 49) || (*(_BYTE *)(v3 + 49) & 0x20) != 0)
        {
          if (vabdd_f64(*(double *)(v2 + 656), *(double *)&v24) >= 0.02 || (*(_BYTE *)(v3 + 49) & 0x20) != 0)
          {
            *(_QWORD *)(v2 + 656) = v24;
            if (!*(_BYTE *)(v3 + 753))
            {
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
            }
          }
        }
        else
        {
          *(_QWORD *)(v2 + 656) = v24;
        }
      }
    }
    goto LABEL_92;
  }
  if (v4 == 1920233330)
  {
LABEL_23:
    CMNotificationCenterGetDefaultLocalCenter();
LABEL_55:
    CMNotificationCenterPostNotification();
  }
LABEL_93:
  CFRelease((CFTypeRef)v3);
  CFRelease((CFTypeRef)v2);
  free(a1);
}

uint64_t subaq_startSlavedAudioQueue(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  BOOL v4;

  if (result)
  {
    v2 = (_BYTE *)result;
    if (!*(_BYTE *)(result + 16))
    {
      *(_BYTE *)(a2 + 546) = 1;
      *(_QWORD *)(a2 + 552) = 0;
      faq_enqueueSourceData(result, 0);
      if (((v2[48] & 2) != 0 || (v2[632] & 2) != 0)
        && faq_isSubAudioQueueInList((uint64_t)v2, (const void *)a2))
      {
        v4 = v2[573] != 0;
        if (v2[16])
          return subaq_startAudioQueueIfReady((uint64_t)v2, a2);
        if (!*(_QWORD *)(a2 + 600))
        {
LABEL_10:
          v2[572] = 1;
          v2[573] = v4;
          return subaq_startAudioQueueIfReady((uint64_t)v2, a2);
        }
        result = subaq_setTapTimelineInfo((uint64_t)v2, a2);
        if (!(_DWORD)result)
        {
          *(_BYTE *)(a2 + 609) = 1;
          goto LABEL_10;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

uint64_t subaq_stopAudioQueue(uint64_t result, uint64_t a2, Boolean a3)
{
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (result)
  {
    v3 = result;
    if (*(_BYTE *)(result + 16))
      return 0;
    if (dword_1EE2A2A48)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    result = FigAudioQueueTimingShimStop(*(_QWORD *)(a2 + 40), a3);
    if (!(_DWORD)result)
    {
      if (*(_QWORD *)(v3 + 712))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
      return 0;
    }
  }
  return result;
}

uint64_t faq_isSubAudioQueueInList(uint64_t result, const void *a2)
{
  uint64_t v2;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *v7;

  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 16))
      return 0;
    Count = CFArrayGetCount(*(CFArrayRef *)(result + 176));
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v5 = Count;
      v6 = 0;
      while (1)
      {
        v7 = *(_BYTE *)(v2 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 176), v6);
        if (v7 == a2)
          break;
        if (v5 == ++v6)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

void subaq_startListener(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && !*(_BYTE *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)(a2 + 24));
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 32), *(void **)(a2 + 24), (dispatch_function_t)subaq_startListenerInternal);
  }
}

void subaq_startListenerInternal(const void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  double Seconds;
  double v9;
  float v10;
  BOOL v11;
  double v12;
  NSObject *v13;
  dispatch_time_t v14;
  CMTime v15;
  CMTime v16;

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = v2;
    v4 = MEMORY[0x19402D578](v2 + 16);
    if (v4)
    {
      v5 = v4;
      MEMORY[0x19402EA0C](*(_QWORD *)(v4 + 24));
      if (*(_BYTE *)(v5 + 16))
        goto LABEL_20;
      *(_BYTE *)(v3 + 689) = 1;
      v6 = *(float *)(v3 + 692);
      if (v6 > 0.0)
      {
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v3 + 40), 4u, v6);
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v3 + 40), 1u, *(AudioQueueParameterValue *)(v3 + 696));
        *(_DWORD *)(v3 + 692) = 0;
        *(_DWORD *)(v5 + 200) = *(_DWORD *)(v3 + 696);
        *(_BYTE *)(v5 + 204) = 1;
      }
      v7 = *(float *)(v3 + 700);
      if (v7 > 0.0)
      {
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v3 + 40), 6u, v7);
        FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v3 + 40), 5u, *(AudioQueueParameterValue *)(v3 + 704));
        *(_DWORD *)(v3 + 700) = 0;
        *(_DWORD *)(v5 + 208) = *(_DWORD *)(v3 + 704);
        *(_BYTE *)(v5 + 212) = 1;
      }
      if ((*(_BYTE *)(v5 + 48) & 2) != 0)
      {
LABEL_20:
        MEMORY[0x19402EA24](*(_QWORD *)(v5 + 24));
      }
      else
      {
        MEMORY[0x19402EA24](*(_QWORD *)(v5 + 24));
        if (*(_BYTE *)(v3 + 560))
        {
          v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          subaq_getAudioQueueLatencyFigTime(v5, v3, &v16);
          v15 = v16;
          Seconds = CMTimeGetSeconds(&v15);
          v9 = 1.0;
          if (*(_BYTE *)(v5 + 236))
          {
            v10 = *(float *)(v5 + 232);
            v11 = v10 == 0.0;
            v9 = v10;
            if (v11)
              v9 = 1.0;
          }
          if (Seconds * v9 <= 1.0)
          {
            subaq_performStartupSync(v5, v3);
          }
          else
          {
            v12 = Seconds + -1.0 / v9;
            CFRetain(*(CFTypeRef *)(v3 + 24));
            *(_BYTE *)(v3 + 688) = 1;
            v13 = *(NSObject **)(v3 + 680);
            v14 = dispatch_time(0, (uint64_t)(v12 * 1000000000.0));
            dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0);
          }
        }
        *(_BYTE *)(v3 + 48) = 1;
        *(_BYTE *)(v3 + 50) = 1;
        CFRetain(*(CFTypeRef *)(v3 + 24));
        dispatch_async_f(*(dispatch_queue_t *)(v5 + 32), *(void **)(v3 + 24), (dispatch_function_t)subaq_stopAudioQueueIfObsolete);
      }
      CFRelease((CFTypeRef)v5);
    }
    CFRelease((CFTypeRef)v3);
  }
  CFRelease(a1);
}

void subaq_performStartupSync(uint64_t a1, uint64_t a2)
{
  CMTimeEpoch v2;
  int CurrentTime;
  CMTime *v6;
  int64_t v7;
  OpaqueCMClock *HostTimeClock;
  float v9;
  float v10;
  double v11;
  double v12;
  float v13;
  double v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v17;
  Float64 Seconds;
  Float64 v19;
  Float64 v20;
  void (**v21)(uint64_t, _QWORD, CMTime *, CMTime *, float);
  void (*v22)(uint64_t, _QWORD, CMTime *, CMTime *, float);
  uint64_t v23;
  float v24;
  const void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, CMTime *, CMTime *, float);
  float v30;
  const void *v31;
  __int128 v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  _OWORD v37[3];
  __int128 v38;
  CMTime v39;
  CMTime v40;
  CMTime time;
  CMTime v42;
  CMTime v43;
  CMTime v44;
  CMTime rhs;
  CMTime lhs;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  Float64 v51;
  __int16 v52;
  Float64 v53;
  __int16 v54;
  Float64 v55;
  CMTime hostTime;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  memset(v37, 0, sizeof(v37));
  *(_OWORD *)&v36.value = *MEMORY[0x1E0CA2E18];
  v2 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v36.epoch = v2;
  v32 = *(_OWORD *)&v36.value;
  *(_OWORD *)&v35.value = *(_OWORD *)&v36.value;
  v35.epoch = v2;
  if (!a1
    || *(_BYTE *)(a1 + 16)
    || !*(_BYTE *)(a1 + 568)
    || FigAudioQueueTimingShimWaitForStartup(*(_QWORD *)(a2 + 40)))
  {
    return;
  }
  DWORD2(v38) = 3;
  CurrentTime = FigAudioQueueTimingShimGetCurrentTime(*(CMTime **)(a2 + 40), 0, 1, v37, 0);
  v6 = (CMTime *)MEMORY[0x1E0CA2E68];
  if (!CurrentTime)
  {
    if ((BYTE8(v38) & 1) != 0)
    {
      CMTimeMake(&v36, (uint64_t)(*(double *)v37 + 0.5), *(_DWORD *)(a2 + 100));
      if ((BYTE8(v38) & 2) == 0)
        goto LABEL_11;
    }
    else
    {
      v36 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if ((BYTE8(v38) & 2) == 0)
        goto LABEL_11;
    }
    v7 = FigHostTimeToNanoseconds();
    CMTimeMake(&v35, v7, 1000000000);
    goto LABEL_12;
  }
  DWORD2(v38) = 0;
  v36 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
LABEL_11:
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&hostTime, HostTimeClock);
  v35 = hostTime;
LABEL_12:
  if ((*(_BYTE *)(a1 + 632) & 2) == 0)
  {
    memset(&v44, 0, sizeof(v44));
    lhs = v36;
    v43 = v35;
    rhs = *(CMTime *)(a1 + 424);
    CMTimeSubtract(&hostTime, &lhs, &rhs);
    lhs = v43;
    rhs = hostTime;
    CMTimeSubtract(&v44, &lhs, &rhs);
    hostTime = v44;
    *(_QWORD *)(a1 + 584) = CMClockConvertHostTimeToSystemUnits(&hostTime);
    *(_DWORD *)(a1 + 632) = 2;
  }
  if (!*(_QWORD *)(a1 + 376) && !*(_QWORD *)(a1 + 392))
    goto LABEL_39;
  if (*(_BYTE *)(a1 + 236))
  {
    v9 = *(float *)(a1 + 232);
    v10 = *(float *)(a1 + 408);
    v11 = 1.0;
    if (v10 == 0.0)
      v12 = 1.0;
    else
      v12 = v10;
    if (v9 != 0.0)
      v11 = v9;
  }
  else
  {
    v13 = *(float *)(a1 + 408);
    v11 = 1.0;
    if (v13 == 0.0)
      v12 = 1.0;
    else
      v12 = v13;
  }
  v33 = v36;
  *(_OWORD *)&hostTime.value = v32;
  hostTime.epoch = v2;
  memset(&lhs, 0, sizeof(lhs));
  memset(&rhs, 0, sizeof(rhs));
  memset(&v44, 0, sizeof(v44));
  memset(&v43, 0, sizeof(v43));
  v14 = v12 / v11;
  memset(&v42, 0, sizeof(v42));
  memset(&v34, 0, sizeof(v34));
  subaq_getAudioQueueLatencyFigTime(a1, a2, &hostTime);
  if ((hostTime.flags & 1) == 0)
    hostTime = *v6;
  time = hostTime;
  CMTimeMultiplyByFloat64(&lhs, &time, v11);
  time = v33;
  v40 = lhs;
  CMTimeSubtract(&rhs, &time, &v40);
  time = rhs;
  v40 = *(CMTime *)(a1 + 424);
  CMTimeSubtract(&v44, &time, &v40);
  faqTimelineWrangler_getAQTimePauseOffset(a1 + 416, &time);
  v40 = v44;
  CMTimeAdd(&v43, &v40, &time);
  v40 = v43;
  v39 = *(CMTime *)(a1 + 448);
  CMTimeAdd(&v42, &v40, &v39);
  v40 = v42;
  faqTimelineWrangler_convertAQTimeToMediaTime(a1 + 416, &v40, (uint64_t)&v34, v14);
  if (dword_1EE2A2A48)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(v44.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = rhs.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v44.value))
      v17 = value;
    else
      v17 = value & 0xFFFFFFFE;
    if (v17)
    {
      hostTime = v36;
      Seconds = CMTimeGetSeconds(&hostTime);
      hostTime = v34;
      v19 = CMTimeGetSeconds(&hostTime);
      hostTime = v35;
      v20 = CMTimeGetSeconds(&hostTime);
      LODWORD(lhs.value) = 136316674;
      *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"subaq_performStartupSync";
      LOWORD(lhs.flags) = 2048;
      *(_QWORD *)((char *)&lhs.flags + 2) = a1;
      HIWORD(lhs.epoch) = 2048;
      v47 = a2;
      v48 = 2082;
      v49 = a1 + 768;
      v50 = 2048;
      v51 = Seconds;
      v52 = 2048;
      v53 = v19;
      v54 = 2048;
      v55 = v20;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v21 = (void (**)(uint64_t, _QWORD, CMTime *, CMTime *, float))(a1 + 376);
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    hostTime = v36;
    CMTimeGetSeconds(&hostTime);
    hostTime = v34;
    CMTimeGetSeconds(&hostTime);
    hostTime = v35;
    CMTimeGetSeconds(&hostTime);
    kdebug_trace();
  }
  v22 = *v21;
  if (!*v21)
  {
    if (!*(_QWORD *)(a1 + 392))
      goto LABEL_39;
    v21 = (void (**)(uint64_t, _QWORD, CMTime *, CMTime *, float))(a1 + 400);
    if (*(_QWORD *)(a1 + 400))
    {
      v27 = FigCFWeakReferenceHolderCopyReferencedObject();
      v28 = v27;
      if (*v21 && !v27)
        goto LABEL_53;
    }
    else
    {
      v28 = 0;
    }
    v29 = *(void (**)(uint64_t, _QWORD, CMTime *, CMTime *, float))(a1 + 392);
    v30 = *(float *)(a1 + 408);
    hostTime = v34;
    lhs = v35;
    v29(v28, 0, &hostTime, &lhs, v30);
LABEL_53:
    FigDeferCFRelease();
    *(_QWORD *)(a1 + 392) = 0;
    v31 = *(const void **)(a1 + 400);
    if (!v31)
      goto LABEL_39;
    CFRelease(v31);
    goto LABEL_38;
  }
  v23 = *(_QWORD *)(a1 + 384);
  v24 = *(float *)(a1 + 408);
  hostTime = v34;
  lhs = v35;
  v22(v23, 0, &hostTime, &lhs, v24);
LABEL_38:
  *v21 = 0;
LABEL_39:
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  *(_BYTE *)(a2 + 48) = 1;
  if (*(_BYTE *)(a1 + 568))
  {
    *(_BYTE *)(a1 + 568) = 0;
    *(_BYTE *)(a1 + 73) = 1;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  FigSemaphoreSignal();
  v25 = *(const void **)(a2 + 24);
  if (v25)
  {
    CFRetain(v25);
    v26 = *(void **)(a2 + 24);
  }
  else
  {
    v26 = 0;
  }
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 32), v26, (dispatch_function_t)faq_startObsoleteAudioQueues);
}

void subaq_stopAudioQueueIfObsolete(const void *a1)
{
  uint64_t v2;
  CFArrayRef *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (CFArrayRef *)v2;
    v4 = MEMORY[0x19402D578](v2 + 16);
    if (v4)
    {
      v5 = v4;
      MEMORY[0x19402EA0C](*(_QWORD *)(v4 + 24));
      if (!*(_BYTE *)(v5 + 16) && faq_isSubAudioQueueObsolete((CFArrayRef *)v5, v3))
        subaq_stopAudioQueue(v5, (uint64_t)v3, 0);
      MEMORY[0x19402EA24](*(_QWORD *)(v5 + 24));
      CFRelease((CFTypeRef)v5);
    }
    CFRelease(v3);
  }
  CFRelease(a1);
}

void faq_startObsoleteAudioQueues(const void *a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  _BYTE *ValueAtIndex;

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (_BYTE *)v2;
    v4 = MEMORY[0x19402D578](v2 + 16);
    if (v4)
    {
      v5 = v4;
      MEMORY[0x19402EA0C](*(_QWORD *)(v4 + 24));
      if (!*(_BYTE *)(v5 + 16))
      {
        Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 176));
        if (Count >= 1)
        {
          v7 = Count;
          for (i = 0; i != v7; ++i)
          {
            if (*(_BYTE *)(v5 + 16))
              ValueAtIndex = 0;
            else
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 176), i);
            if (ValueAtIndex != v3 && !ValueAtIndex[641])
              subaq_startSlavedAudioQueue(v5, (uint64_t)ValueAtIndex);
          }
        }
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v5 + 24));
      CFRelease(v3);
    }
    else
    {
      v5 = (uint64_t)v3;
    }
    CFRelease((CFTypeRef)v5);
  }
  CFRelease(a1);
}

__n128 faqTimelineWrangler_getAQTimePauseOffset@<Q0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  __n128 result;
  uint64_t v3;
  CMTime v4;
  CMTime lhs;

  if ((*(_DWORD *)(a1 + 68) & 0x1D) == 1)
  {
    lhs = *(CMTime *)(a1 + 56);
    v4 = *(CMTime *)(a1 + 32);
    CMTimeSubtract(a2, &lhs, &v4);
  }
  else
  {
    v3 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
    a2->epoch = *(_QWORD *)(v3 + 16);
  }
  return result;
}

CMTime *faqTimelineWrangler_convertAQTimeToMediaTime@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CMTime v8;
  CMTime rhs;
  CMTime lhs;
  CMTime v11;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  lhs = *a2;
  rhs = *(CMTime *)(a1 + 32);
  CMTimeSubtract(&v11, &lhs, &rhs);
  rhs = v11;
  CMTimeMultiplyByFloat64(&lhs, &rhs, fabs(a4));
  rhs = *(CMTime *)(a1 + 104);
  v8 = lhs;
  if (a4 <= 0.0)
    return CMTimeSubtract((CMTime *)a3, &rhs, &v8);
  else
    return CMTimeAdd((CMTime *)a3, &rhs, &v8);
}

BOOL faq_isSubAudioQueueObsolete(CFArrayRef *ValueAtIndex, CFArrayRef *a2)
{
  uint64_t v3;

  v3 = (uint64_t)ValueAtIndex;
  if (ValueAtIndex)
  {
    if (*((_BYTE *)ValueAtIndex + 16))
      ValueAtIndex = 0;
    else
      ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(ValueAtIndex[22], 0);
  }
  return ValueAtIndex != a2 && faq_isSubAudioQueueInList(v3, a2) != 0;
}

void subaq_stopListenerInternal(const void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = v2;
    v4 = MEMORY[0x19402D578](v2 + 16);
    if (v4)
    {
      v5 = v4;
      MEMORY[0x19402EA0C](*(_QWORD *)(v4 + 24));
      if (!*(_BYTE *)(v5 + 16))
      {
        *(_BYTE *)(v3 + 689) = 0;
        subaq_removeIfObsolete(v5, (CFArrayRef *)v3);
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v5 + 24));
      CFRelease((CFTypeRef)v5);
    }
    CFRelease((CFTypeRef)v3);
  }
  CFRelease(a1);
}

void subaq_removeIfObsolete(uint64_t a1, CFArrayRef *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  CFArrayRef *v7;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (!*(_BYTE *)(a1 + 16) && faq_isSubAudioQueueObsolete((CFArrayRef *)a1, a2))
  {
    if (a2)
    {
      if (!*(_BYTE *)(a1 + 16))
      {
        Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
        if (Count >= 1)
        {
          v5 = Count;
          v6 = 0;
          while (1)
          {
            v7 = *(_BYTE *)(a1 + 16) ? 0 : (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v6);
            if (v7 == a2)
              break;
            if (v5 == ++v6)
              goto LABEL_15;
          }
          if (!*(_BYTE *)(a1 + 16))
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 176), v6);
        }
      }
    }
  }
LABEL_15:
  JUMPOUT(0x19402EA24);
}

void subaq_appendDebugDesc(__CFString *a1, CFTypeRef cf)
{
  CFIndex v4;
  uint64_t v5;

  v4 = CFGetRetainCount(cf);
  v5 = *((_QWORD *)cf + 8);
  CFStringAppendFormat(a1, 0, CFSTR("(SubAQ %p retainCount:%d -> AQTS %p %.0f Hz '%c%c%c%c')\n"), cf, v4, *((_QWORD *)cf + 5), *(_QWORD *)v5, HIBYTE(*(_DWORD *)(v5 + 8)), BYTE2(*(_DWORD *)(v5 + 8)), BYTE1(*(_DWORD *)(v5 + 8)), *(_DWORD *)(v5 + 8));
}

void subaq_outputBufferBecameReady(uint64_t a1, uint64_t a2, AudioQueueBuffer *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t mUserData;
  const void *v9;
  opaqueCMSampleBuffer *v10;
  int32_t v11;
  CMTime v12;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v16;

  if (a3)
  {
    v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      v5 = v4;
      v6 = MEMORY[0x19402D578](v4 + 16);
      if (v6)
      {
        v7 = (const void *)v6;
        if (!*(_BYTE *)(v6 + 16))
        {
          mUserData = (uint64_t)a3->mUserData;
          if (mUserData)
          {
            if (*(_QWORD *)(mUserData + 8))
            {
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
              v9 = *(const void **)(mUserData + 8);
              if (v9)
              {
                CFRelease(v9);
                *(_QWORD *)(mUserData + 8) = 0;
              }
            }
            v10 = *(opaqueCMSampleBuffer **)mUserData;
            if (*(_QWORD *)mUserData)
            {
              memset(&v16, 0, sizeof(v16));
              CMSampleBufferGetOutputDuration(&v16, v10);
              MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 536));
              CMSampleBufferGetOutputPresentationTimeStamp(&lhs, *(CMSampleBufferRef *)mUserData);
              rhs = v16;
              CMTimeAdd(&time, &lhs, &rhs);
              *(CMTime *)(v5 + 508) = time;
              MEMORY[0x19402EF04](*(_QWORD *)(v5 + 536));
              FigAtomicAdd32();
              v11 = *(_DWORD *)(v5 + 100);
              time = v16;
              CMTimeConvertScale(&v12, &time, v11, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              FigAtomicAdd32();
              if (*(_QWORD *)mUserData)
              {
                CFRelease(*(CFTypeRef *)mUserData);
                *(_QWORD *)mUserData = 0;
              }
            }
            if (*(_BYTE *)(mUserData + 17))
            {
              subaq_returnAQBufferInfoPtr(v5, mUserData);
              FigAudioQueueTimingShimFreeBuffer(*(_QWORD *)(v5 + 40), a3);
            }
            else
            {
              a3->mAudioDataByteSize = 0;
              FigMemoryBarrier();
              a3->mUserData = 0;
              subaq_returnAQBufferInfoPtr(v5, mUserData);
            }
            FigSemaphoreSignal();
          }
        }
        CFRelease(v7);
      }
      CFRelease((CFTypeRef)v5);
    }
  }
}

uint64_t subaq_buildAudioProcssingUnits(uint64_t a1, uint64_t *a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFAllocator *v8;
  const CFDictionaryValueCallBacks *v9;
  const void *ValueAtIndex;
  CFIndex v11;
  uint64_t *v12;
  uint64_t v13;
  __CFDictionary *Mutable;
  uint64_t v15;
  void *value;

  value = 0;
  v3 = *(const __CFArray **)(a1 + 680);
  if (!v3)
  {
LABEL_24:
    v15 = 0;
    goto LABEL_25;
  }
  Count = CFArrayGetCount(v3);
  v6 = Count;
  if ((Count & 1) == 0)
  {
    if (Count >= 1)
    {
      v7 = 0;
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 680), v7);
        v11 = v7 + 1;
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 680), v7 + 1);
        if (FigCFDictionaryGetValueIfPresent())
        {
          if (FigCFDictionaryGetValueIfPresent())
            CFDictionaryApplyFunction(0, (CFDictionaryApplierFunction)subaq_audioProcessingUnitSetPropertyApplier, 0);
        }
        else
        {
          if (*(_BYTE *)(a1 + 16)
            || CFArrayGetCount(*(CFArrayRef *)(a1 + 176)) < 1
            || (*(_BYTE *)(a1 + 16)
              ? (v12 = 0)
              : (v12 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0)),
                v12 == a2 || !FigCFDictionaryGetValueIfPresent()))
          {
            v13 = FigAudioProcessingUnitCreateWithOptions((uint64_t)v8, a1, (uint64_t)a2, a2[5]);
            if ((_DWORD)v13)
              goto LABEL_29;
          }
          else
          {
            v13 = FigAudioProcessingUnitCreateCopy((uint64_t)v8, (const void *)a1, a2, (const void *)a2[5], 0, &value);
            if ((_DWORD)v13)
              goto LABEL_29;
          }
          Mutable = (__CFDictionary *)a2[89];
          if (!Mutable)
          {
            Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], v9);
            a2[89] = (uint64_t)Mutable;
            if (!Mutable)
              goto LABEL_28;
          }
          CFDictionarySetValue(Mutable, ValueAtIndex, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
        v7 += 2;
        if (v11 + 1 >= v6)
          goto LABEL_24;
      }
    }
    goto LABEL_24;
  }
LABEL_28:
  v13 = FigSignalErrorAt();
LABEL_29:
  v15 = v13;
LABEL_25:
  if (value)
    CFRelease(value);
  return v15;
}

uint64_t subaq_setCPECryptorPropertyOnAudioQueue(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 16))
      return 0;
    result = *(_QWORD *)(a2 + 40);
    if (!result)
      return result;
    v3 = *(_QWORD *)(v2 + 56);
    if (!v3)
    {
      return 0;
    }
    else
    {
      v4 = 1668310371;
      v5 = v3;
      return FigAudioQueueTimingShimSetProperty(result, 0x61637064u, &v4, 0xCu);
    }
  }
  return result;
}

uint64_t subaq_returnAQBufferInfoPtr(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  const void *v4;

  if (a2)
  {
    v3 = result;
    if (*(_QWORD *)a2)
    {
      CFRelease(*(CFTypeRef *)a2);
      *(_QWORD *)a2 = 0;
    }
    v4 = *(const void **)(a2 + 8);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a2 + 8) = 0;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 136));
    *(_BYTE *)(a2 + 16) = 0;
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t subaq_setSweepFilterEnable(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  _BOOL4 v6;

  v6 = a3 != 0;
  if (result)
  {
    v3 = result;
    if (*(_BYTE *)(result + 16))
      return 0;
    result = FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x656E7366u, &v6, 4u);
    if (a3 && !(_DWORD)result)
    {
      if (*(_QWORD *)(v3 + 696))
        return subaq_setSweepFilterConfig(v3, a2);
      return 0;
    }
  }
  return result;
}

uint64_t subaq_ensureCinematicAudioEnabled(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;

  if (!a3 && *(_BYTE *)(a2 + 720) && !*(_BYTE *)(a2 + 721))
  {
    v4 = result;
    v5 = 1;
    result = FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x715F6361u, &v5, 4u);
    if (!(_DWORD)result)
    {
      *(_BYTE *)(v4 + 760) = 1;
      *(_BYTE *)(a2 + 721) = 1;
    }
  }
  return result;
}

uint64_t subaq_setSweepFilterConfig(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;

  if (result)
  {
    if (*(_BYTE *)(result + 16))
    {
      return 0;
    }
    else
    {
      result = *(_QWORD *)(result + 696);
      if (result)
      {
        v4 = 0;
        v3 = 0;
        result = FigCFDictionaryGetFloat32IfPresent();
        if (!(_DWORD)result)
        {
          result = FigCFDictionaryGetFloat32IfPresent();
          if (!(_DWORD)result)
          {
            result = FigCFDictionaryGetFloat32IfPresent();
            if (!(_DWORD)result)
              return FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x73666367u, &v3, 0xCu);
          }
        }
      }
    }
  }
  return result;
}

uint64_t subaq_audioProcessingUnitSetPropertyApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(a3, a1, a2);
  return result;
}

uint64_t faq_enqueueSourceDataThread(uint64_t a1)
{
  do
  {
    FigSemaphoreWaitRelative();
    if (*(_BYTE *)(a1 + 296))
      break;
    faq_enqueueSourceData(a1, 1);
  }
  while (!*(_BYTE *)(a1 + 296));
  return 0;
}

void faq_initializeTapCompleted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;

  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 24));
  if (!*(_BYTE *)(a2 + 16))
  {
    MTAudioProcessingTapGetPointerFromCFDictionary(CFSTR("AQTapPointer"), a5);
    *(_BYTE *)(a2 + 736) = 1;
    if (!*(_BYTE *)(a2 + 16))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 176));
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          if (*(_BYTE *)(a2 + 16))
            ValueAtIndex = 0;
          else
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 176), i);
          subaq_startAudioQueueIfReady(a2, (uint64_t)ValueAtIndex);
        }
      }
    }
  }
  JUMPOUT(0x19402EA24);
}

void faq_createAQTapCompleted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  const __CFNumber *PointerFromCFDictionary;
  const __CFNumber *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  _QWORD *ValueAtIndex;

  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 24));
  if (!*(_BYTE *)(a2 + 16))
  {
    PointerFromCFDictionary = MTAudioProcessingTapGetPointerFromCFDictionary(CFSTR("AQTapPointer"), a5);
    if (!*(_BYTE *)(a2 + 16))
    {
      v8 = PointerFromCFDictionary;
      Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 176));
      if (Count >= 1)
      {
        v10 = Count;
        v11 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 176), v11);
          if ((const __CFNumber *)ValueAtIndex[75] == v8)
            break;
          if (v10 == ++v11)
            goto LABEL_9;
        }
        *((_BYTE *)ValueAtIndex + 608) = 1;
        subaq_startAudioQueueIfReady(a2, (uint64_t)ValueAtIndex);
      }
    }
  }
LABEL_9:
  JUMPOUT(0x19402EA24);
}

void faq_scheduledWakeupRetainedToDiscard(_DWORD *a1)
{
  a1[19] = 0;
  faq_wakeupToDiscard((uint64_t)a1);
  CFRelease(a1);
}

void faq_dequeueFromSourceQueueAndDiscard()
{
  const void *v0;

  v0 = (const void *)FigBufferQueueDequeueIfMatchingAndRetain();
  if (v0)
    CFRelease(v0);
}

BOOL subaq_doesAudioQueueHaveBuffersToFlush(uint64_t a1)
{
  CMTime v3;
  CMTime lhs;
  CMTime v5;

  memset(&v5, 0, sizeof(v5));
  if ((*(_BYTE *)(a1 + 444) & 1) == 0)
    return 0;
  if ((*(_BYTE *)(a1 + 628) & 1) == 0)
    return 1;
  lhs = *(CMTime *)(a1 + 432);
  v3 = *(CMTime *)(a1 + 456);
  CMTimeAdd(&v5, &lhs, &v3);
  lhs = *(CMTime *)(a1 + 616);
  v3 = v5;
  return CMTimeCompare(&lhs, &v3) != 0;
}

uint64_t subaq_flushAudioQueue(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  CMTime v4;
  CMTime lhs;
  CMTime v6;

  if (!*(_BYTE *)(result + 16))
  {
    v3 = result;
    result = subaq_doesAudioQueueHaveBuffersToFlush(a2);
    if ((_DWORD)result && !*(_QWORD *)(v3 + 160))
    {
      result = FigAudioQueueTimingShimFlush(*(_QWORD *)(a2 + 40));
      if (!(_DWORD)result)
      {
        lhs = *(CMTime *)(a2 + 432);
        v4 = *(CMTime *)(a2 + 456);
        result = (uint64_t)CMTimeAdd(&v6, &lhs, &v4);
        *(CMTime *)(a2 + 616) = v6;
        ++*(_DWORD *)(a2 + 612);
      }
    }
    *(_BYTE *)(a2 + 544) = 1;
  }
  return result;
}

CMTime *subaq_convertAQTimeToMediaTime@<X0>(CMTime *result@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float v4;
  double v5;
  double v6;
  float v7;
  BOOL v8;
  CMTime v9;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a3 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 16);
  if (!LOBYTE(result->epoch))
  {
    v4 = *(float *)&result[17].value;
    v5 = 1.0;
    if (v4 == 0.0)
      v6 = 1.0;
    else
      v6 = v4;
    if (BYTE4(result[9].epoch))
    {
      v7 = *(float *)&result[9].epoch;
      v8 = v7 == 0.0;
      v5 = v7;
      if (v8)
        v5 = 1.0;
    }
    v9 = *a2;
    return faqTimelineWrangler_convertAQTimeToMediaTime((uint64_t)&result[17].timescale, &v9, a3, v6 / v5);
  }
  return result;
}

CMTime *subaq_convertMediaTimeToAQTime@<X0>(CMTime *result@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float v4;
  double v5;
  double v6;
  float v7;
  BOOL v8;
  CMTime v9;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a3 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 16);
  if (!LOBYTE(result->epoch))
  {
    v4 = *(float *)&result[17].value;
    v5 = 1.0;
    if (v4 == 0.0)
      v6 = 1.0;
    else
      v6 = v4;
    if (BYTE4(result[9].epoch))
    {
      v7 = *(float *)&result[9].epoch;
      v8 = v7 == 0.0;
      v5 = v7;
      if (v8)
        v5 = 1.0;
    }
    v9 = *a2;
    return faqTimelineWrangler_convertMediaTimeToAQTime((uint64_t)&result[17].timescale, &v9, a3, v6 / v5);
  }
  return result;
}

uint64_t subaq_schedulePlayRate2ValueForTime(uint64_t a1, uint64_t a2, CMTime *a3, double a4)
{
  float v4;
  int32_t v6;
  CMTime v8;
  CMTime v9;
  double value;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  float v15;
  unsigned int v16;

  v16 = 21;
  v4 = a4;
  v15 = v4;
  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  if (!*(_QWORD *)(a2 + 40) || *(_BYTE *)(a1 + 16))
    return 0;
  v6 = *(_DWORD *)(a2 + 100);
  v8 = *a3;
  CMTimeConvertScale(&v9, &v8, v6, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  value = (double)v9.value;
  LODWORD(v14) = 1;
  return FigAudioQueueTimingShimScheduleParameters(*(_QWORD *)(a2 + 40), &value, 1u, &v16, &v15);
}

CMTime *faqTimelineWrangler_convertMediaTimeToAQTime@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _OWORD *v7;
  CMTimeEpoch epoch;
  Float64 v9;
  CMTime v11;
  CMTime rhs;
  CMTime lhs;
  CMTime v14;
  CMTime v15;

  memset(&v15, 0, sizeof(v15));
  memset(&v14, 0, sizeof(v14));
  v7 = (_OWORD *)(a1 + 104);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a4 >= 0.0)
  {
    lhs = *a2;
    *(_OWORD *)&rhs.value = *v7;
    epoch = *(_QWORD *)(a1 + 120);
  }
  else
  {
    *(_OWORD *)&lhs.value = *v7;
    lhs.epoch = *(_QWORD *)(a1 + 120);
    *(_OWORD *)&rhs.value = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
  }
  rhs.epoch = epoch;
  CMTimeSubtract(&v15, &lhs, &rhs);
  v9 = fabs(a4);
  lhs = *(CMTime *)(a1 + 32);
  CMTimeMultiplyByFloat64(&v14, &lhs, v9);
  lhs = v15;
  rhs = v15;
  v11 = v14;
  CMTimeAdd(&lhs, &rhs, &v11);
  rhs = lhs;
  return CMTimeMultiplyByFloat64((CMTime *)a3, &rhs, 1.0 / v9);
}

void subaq_audioQueueStartupCompleted(const void *a1, int a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  dispatch_queue_t *v7;
  _QWORD *v8;

  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = MEMORY[0x19402D578](v4 + 16);
    if (v6)
    {
      v7 = (dispatch_queue_t *)v6;
      if (!*(_BYTE *)(v6 + 16) && subaq_lockListenerBarrierForValidSubAQ((uint64_t)v5))
      {
        v8 = malloc_type_malloc(0x18uLL, 0x1020040EDCEB4C7uLL);
        *v8 = CFRetain(v7);
        v8[1] = CFRetain(v5);
        *((_DWORD *)v8 + 4) = a2;
        dispatch_async_f(v7[4], v8, (dispatch_function_t)subaq_deferredAudioQueueStartupCompleted);
      }
      CFRelease(v5);
    }
    else
    {
      v7 = (dispatch_queue_t *)v5;
    }
    CFRelease(v7);
  }
  CFRelease(a1);
}

void subaq_deferredAudioQueueStartupCompleted(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  BOOL v6;
  void (*v7)(uint64_t, uint64_t, __int128 *, __int128 *, float);
  _QWORD *v8;
  uint64_t v9;
  int Property;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v17)(uint64_t, uint64_t, __int128 *, __int128 *, float);
  const void *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v3 = *a1;
  v2 = a1[1];
  v4 = *((unsigned int *)a1 + 4);
  MEMORY[0x19402EA0C](*(_QWORD *)(*a1 + 24));
  if (*(_BYTE *)(v3 + 16))
    v6 = 1;
  else
    v6 = (_DWORD)v4 == 0;
  if (v6)
    goto LABEL_15;
  if (!*(_BYTE *)(v2 + 560))
    subaq_removeIfObsolete(v3, (CFArrayRef *)v2);
  v7 = *(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, float))(v3 + 376);
  if (!v7)
  {
    if (!*(_QWORD *)(v3 + 392))
      goto LABEL_9;
    v8 = (_QWORD *)(v3 + 400);
    if (*(_QWORD *)(v3 + 400))
    {
      v14 = FigCFWeakReferenceHolderCopyReferencedObject();
      v15 = v14;
      if (*v8)
        v16 = v14 == 0;
      else
        v16 = 0;
      if (v16)
        goto LABEL_26;
    }
    else
    {
      v15 = 0;
    }
    v17 = *(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, float))(v3 + 392);
    v21 = *MEMORY[0x1E0CA2E18];
    v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v19 = v21;
    v20 = v22;
    v17(v15, v4, &v21, &v19, NAN);
LABEL_26:
    FigDeferCFRelease();
    *(_QWORD *)(v3 + 392) = 0;
    v18 = *(const void **)(v3 + 400);
    if (!v18)
      goto LABEL_9;
    CFRelease(v18);
    goto LABEL_8;
  }
  v8 = (_QWORD *)(v3 + 376);
  v9 = *(_QWORD *)(v3 + 384);
  v21 = *MEMORY[0x1E0CA2E18];
  v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v19 = v21;
  v20 = v22;
  v7(v9, v4, &v21, &v19, NAN);
LABEL_8:
  *v8 = 0;
LABEL_9:
  *(_BYTE *)(v3 + 297) = 0;
  *(_BYTE *)(v3 + 568) = 0;
  *(_BYTE *)(v3 + 737) = 0;
  if (*(_BYTE *)(v2 + 48))
  {
    LODWORD(v21) = 0;
    LODWORD(v19) = 4;
    Property = FigAudioQueueTimingShimGetProperty(*(_QWORD *)(v2 + 40), 0x6171726Eu, &v21, (UInt32 *)&v19);
    if (!(Property | v21))
    {
      *(_WORD *)(v2 + 48) = 0;
      *(_BYTE *)(v2 + 50) = 0;
      if (*(_BYTE *)(v2 + 560))
      {
        v11 = MEMORY[0x1E0CA2E18];
        v12 = *MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v3 + 520) = *MEMORY[0x1E0CA2E18];
        v13 = *(_QWORD *)(v11 + 16);
        *(_QWORD *)(v3 + 536) = v13;
        *(_OWORD *)(v3 + 472) = v12;
        *(_QWORD *)(v3 + 488) = v13;
        v5.n128_f64[0] = faq_reset(v3, *(double *)&v12);
      }
    }
  }
LABEL_15:
  MEMORY[0x19402EA24](*(_QWORD *)(v3 + 24), v5);
  FigReadWriteLockUnlockForRead();
  CFRelease((CFTypeRef)v3);
  CFRelease((CFTypeRef)v2);
  free(a1);
}

uint64_t subaq_setProperty(uint64_t a1, uint64_t a2, CFTypeRef cf1, const __CFString *a4)
{
  uint64_t v6;
  CFTypeID TypeID;
  int v9;
  int v10;
  CFTypeID v11;
  uint64_t v12;
  UInt32 *p_deviceUID;
  AudioQueuePropertyID v14;
  CFTypeID v15;
  CFTypeID v16;
  UInt32 v17;
  uint64_t Property;
  CFTypeID v20;
  int v21;
  CFTypeID v22;
  const void *v23;
  CFTypeID v24;
  unsigned int v25;
  int v26;
  void *v27;
  int v28;
  CFTypeID v29;
  const __CFString *v30;
  CFTypeID v31;
  CFTypeID v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  const void *v36;
  const void *v37;
  CFTypeRef v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AudioQueue;
  uint64_t (*v42)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t);
  CFTypeID v43;
  const void *v44;
  CFTypeID v45;
  const void *v46;
  CFTypeID v47;
  int Value;
  CFTypeID v49;
  CFTypeRef cf;
  int valuePtr;
  CFStringRef deviceUID;
  UInt32 v53;
  UInt32 v54;

  deviceUID = a4;
  if (!a2)
    return 4294954356;
  if (!a1 || *(_BYTE *)(a1 + 16))
    return 0;
  if (!*(_QWORD *)(a2 + 40))
    return 4294954356;
  v6 = (uint64_t)a4;
  if (CFEqual(cf1, CFSTR("EQPreset")))
  {
    if (v6)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID((CFTypeRef)v6))
      {
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr);
        if (!*(_BYTE *)(a1 + 16))
        {
          v6 = 0;
          v9 = valuePtr;
          LODWORD(cf) = 0;
          v53 = 4;
          v54 = 0;
          if ((*(_BYTE *)(a1 + 48) & 4) != 0)
            return v6;
          if (valuePtr == -1)
          {
            v10 = 0;
          }
          else
          {
            v10 = 1;
            LODWORD(cf) = 1;
          }
          Property = FigAudioQueueTimingShimGetProperty(*(_QWORD *)(a2 + 40), 0x715F6571u, &v54, &v53);
          if (!(_DWORD)Property)
          {
            if (v10 == v54
              || (v6 = FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x715F6571u, &cf, v53), !(_DWORD)v6)
              && (_DWORD)cf)
            {
              v6 = FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 7u, (float)v9);
              if ((_DWORD)v6)
              {
                if ((_DWORD)cf != v54)
                  FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x715F6571u, &v54, v53);
              }
            }
            return v6;
          }
          return Property;
        }
        return 0;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("ClientName")))
  {
    if (v6)
    {
      v11 = CFStringGetTypeID();
      if (v11 == CFGetTypeID((CFTypeRef)v6))
      {
        v12 = *(_QWORD *)(a2 + 40);
        p_deviceUID = (UInt32 *)&deviceUID;
        v14 = 1668639076;
LABEL_25:
        v17 = 8;
        return FigAudioQueueTimingShimSetProperty(v12, v14, p_deviceUID, v17);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("DeviceUID")))
  {
    if (!v6 || (v15 = CFStringGetTypeID(), v15 == CFGetTypeID((CFTypeRef)v6)))
    {
      v6 = FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x61716364u, &deviceUID, 8u);
      if (!(_DWORD)v6)
        CMAudioDeviceClockSetAudioDeviceUID(*(CMClockRef *)(a2 + 576), deviceUID);
      return v6;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("ClockDevice")))
  {
    if (!v6 || (v16 = CFStringGetTypeID(), v16 == CFGetTypeID((CFTypeRef)v6)))
    {
      v12 = *(_QWORD *)(a2 + 40);
      p_deviceUID = (UInt32 *)&deviceUID;
      v14 = 1902340964;
      goto LABEL_25;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("TimePitchAlgorithm")))
  {
    if (!v6)
      return FigSignalErrorAt();
    v20 = CFStringGetTypeID();
    if (v20 != CFGetTypeID((CFTypeRef)v6))
      return FigSignalErrorAt();
    if (CFEqual((CFTypeRef)v6, CFSTR("TimeDomain")))
    {
      v21 = 1953064047;
      goto LABEL_67;
    }
    if (CFEqual((CFTypeRef)v6, CFSTR("Spectral")))
    {
      v21 = 1936745827;
      goto LABEL_67;
    }
    if (CFEqual((CFTypeRef)v6, CFSTR("Varispeed")))
    {
      v21 = 1987276900;
      goto LABEL_67;
    }
    if (CFEqual((CFTypeRef)v6, CFSTR("LowQualityZeroLatency")))
    {
      v21 = 1819376236;
LABEL_67:
      LODWORD(cf) = v21;
      if (*(_DWORD *)(a1 + 344) == v21)
        return 0;
      v25 = FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x71747061u, &cf, 4u);
      if (v25 == -66630)
        v6 = 0;
      else
        v6 = v25;
      v26 = (int)cf;
      *(_DWORD *)(a1 + 344) = (_DWORD)cf;
      v27 = faq_scaledEditRateSupportValidator_one32nd_to_32;
      if (v26 > 1953064046)
      {
        if (v26 != 1953064047)
        {
          v28 = 1987276900;
LABEL_77:
          if (v26 != v28)
            v27 = faq_scaledEditRateSupportValidator_noScaleAllowed;
        }
      }
      else
      {
        if (v26 != 1819376236)
        {
          v28 = 1936745827;
          goto LABEL_77;
        }
        v27 = faq_scaledEditRateSupportValidator_lowQualityZeroLatency;
      }
      *(_QWORD *)(a1 + 664) = v27;
      return v6;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("MATOriginalSourceFormat")))
  {
    if (v6)
    {
      v22 = CFNumberGetTypeID();
      if (v22 == CFGetTypeID((CFTypeRef)v6))
      {
        LODWORD(cf) = 0;
        CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &cf);
        FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x6D6F7366u, &deviceUID, 4u);
        return 0;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("STSLabel")))
  {
    v12 = *(_QWORD *)(a2 + 40);
    p_deviceUID = (UInt32 *)&deviceUID;
    v14 = 1937011564;
    goto LABEL_25;
  }
  if (CFEqual(cf1, CFSTR("MXSession")))
  {
    if (!faq_shouldSetMXSessionOnAudioQueues())
      return 0;
    v23 = *(const void **)(a2 + 576);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(a2 + 576) = 0;
    }
    subaq_ensureClock(a1, a2);
    v12 = *(_QWORD *)(a2 + 40);
    p_deviceUID = (UInt32 *)&deviceUID;
    v14 = 1668118643;
    goto LABEL_25;
  }
  if (CFEqual(cf1, CFSTR("TimePitchBypass")))
  {
    if ((*(_BYTE *)(a1 + 49) & 0x40) != 0)
      return FigSignalErrorAt();
    if (!v6)
      return FigSignalErrorAt();
    v24 = CFBooleanGetTypeID();
    if (v24 != CFGetTypeID((CFTypeRef)v6))
      return FigSignalErrorAt();
    LODWORD(cf) = *MEMORY[0x1E0C9AE50] == v6;
    v12 = *(_QWORD *)(a2 + 40);
    v14 = 1903456354;
    goto LABEL_63;
  }
  if (CFEqual(cf1, CFSTR("EnableTimePitch")))
  {
    if ((*(_BYTE *)(a1 + 49) & 0x40) != 0)
      return FigSignalErrorAt();
    if (!v6)
      return FigSignalErrorAt();
    v29 = CFBooleanGetTypeID();
    if (v29 != CFGetTypeID((CFTypeRef)v6))
      return FigSignalErrorAt();
    v30 = (const __CFString *)*MEMORY[0x1E0C9AE50];
    LODWORD(cf) = *MEMORY[0x1E0C9AE50] == v6;
    v6 = FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x715F7470u, &cf, 4u);
    if ((_DWORD)v6)
      return v6;
    if (deviceUID != v30)
      return 0;
    v54 = *(_DWORD *)(a1 + 344);
    v12 = *(_QWORD *)(a2 + 40);
    p_deviceUID = &v54;
    v14 = 1903456353;
    goto LABEL_64;
  }
  if (CFEqual(cf1, CFSTR("TrackID")))
  {
    if (!v6)
      return v6;
    v31 = CFGetTypeID((CFTypeRef)v6);
    if (v31 == CFNumberGetTypeID())
      CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, (void *)(a2 + 588));
    return 0;
  }
  if (CFEqual(cf1, CFSTR("AudioProcessingTap")))
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      FigAudioQueueTimingShimStop(*(_QWORD *)(a2 + 40), 1u);
      v33 = *(_QWORD *)(a2 + 600);
      if (v33)
      {
        v34 = *(_QWORD *)(a2 + 592);
        v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v35)
          v35(v34, v33);
        v36 = *(const void **)(a2 + 592);
        if (v36)
        {
          CFRelease(v36);
          *(_QWORD *)(a2 + 592) = 0;
        }
        *(_QWORD *)(a2 + 600) = 0;
      }
      *(_WORD *)(a2 + 608) = 0;
      v37 = *(const void **)(a1 + 728);
      if (v37)
      {
        v38 = CFRetain(v37);
        *(_QWORD *)(a2 + 592) = v38;
        v39 = *(unsigned int *)(a2 + 588);
        v40 = *(unsigned int *)(a1 + 764);
        AudioQueue = FigAudioQueueTimingShimGetAudioQueue(*(_QWORD *)(a2 + 40));
        v42 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 16);
        if (v42)
        {
          v6 = v42(v38, v39, v40, AudioQueue, a2 + 600);
          if (!(_DWORD)v6)
            return v6;
        }
        else
        {
          v6 = 4294954514;
        }
        v44 = *(const void **)(a2 + 592);
        if (v44)
        {
          CFRelease(v44);
          *(_QWORD *)(a2 + 592) = 0;
        }
        return v6;
      }
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("CinematicAudioParameters")))
  {
    if (!v6)
      return v6;
    v32 = CFGetTypeID((CFTypeRef)v6);
    if (v32 != CFDataGetTypeID())
      return 0;
    return subaq_setCinematicAudioBulkParameters(a1, a2, (CFDataRef)v6);
  }
  if (CFEqual(cf1, CFSTR("LoudnessInfo")))
  {
    if (v6)
    {
      v43 = CFDictionaryGetTypeID();
      if (v43 != CFGetTypeID((CFTypeRef)v6))
        return FigSignalErrorAt();
      cf = CFRetain((CFTypeRef)v6);
    }
    else
    {
      cf = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!cf)
        return FigSignalErrorAt();
    }
    v6 = FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x716C646Eu, &cf, 8u);
    if (cf)
      CFRelease(cf);
    return v6;
  }
  if (CFEqual(cf1, CFSTR("AudioDynamicRangeCompression")))
  {
    LODWORD(cf) = -1;
    v54 = 4;
    Property = FigAudioQueueTimingShimGetProperty(*(_QWORD *)(a2 + 40), 0x7164796Eu, &cf, &v54);
    if ((_DWORD)Property)
      return Property;
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        if ((_DWORD)cf == 1)
        {
          LODWORD(cf) = 0;
          Property = FigAudioQueueTimingShimSetProperty(*(_QWORD *)(a2 + 40), 0x7164796Eu, &cf, 4u);
          v6 = 0;
          if (!(_DWORD)Property)
            return v6;
          return Property;
        }
        return 0;
      }
      return FigSignalErrorAt();
    }
    if ((_DWORD)cf == 1)
      return 0;
    LODWORD(cf) = 1;
    v12 = *(_QWORD *)(a2 + 40);
    p_deviceUID = (UInt32 *)&cf;
    v14 = 1902410094;
LABEL_64:
    v17 = 4;
    return FigAudioQueueTimingShimSetProperty(v12, v14, p_deviceUID, v17);
  }
  if (CFEqual(cf1, CFSTR("AdjustTargetLevel")))
  {
    LODWORD(cf) = 0;
    CFNumberGetValue((CFNumberRef)v6, kCFNumberFloat32Type, &cf);
    v12 = *(_QWORD *)(a2 + 40);
    v14 = 1584952428;
LABEL_63:
    p_deviceUID = (UInt32 *)&cf;
    goto LABEL_64;
  }
  if (CFEqual(cf1, CFSTR("AdjustCompressionProfile")))
  {
    LODWORD(cf) = 0;
    CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, &cf);
    v12 = *(_QWORD *)(a2 + 40);
    p_deviceUID = (UInt32 *)&cf;
    v14 = 1584948336;
    goto LABEL_64;
  }
  if (CFEqual(cf1, CFSTR("SweepFilterConfiguration")))
  {
    if (!v6)
      return FigSignalErrorAt();
    v45 = CFGetTypeID((CFTypeRef)v6);
    if (v45 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
    v46 = *(const void **)(a1 + 696);
    *(_QWORD *)(a1 + 696) = v6;
    CFRetain((CFTypeRef)v6);
    if (v46)
      CFRelease(v46);
    if (!*(_BYTE *)(a1 + 688))
      return 0;
    return subaq_setSweepFilterConfig(a1, a2);
  }
  else
  {
    if (!CFEqual(cf1, CFSTR("EnableSweepFilter")))
    {
      if (CFEqual(cf1, CFSTR("CodecProgramTargetLevel")))
      {
        LODWORD(cf) = 0;
        CFNumberGetValue((CFNumberRef)v6, kCFNumberFloat32Type, &cf);
        v12 = *(_QWORD *)(a2 + 40);
        p_deviceUID = (UInt32 *)&cf;
        v14 = 1886418028;
      }
      else if (CFEqual(cf1, CFSTR("BestAvailableContentType")))
      {
        LODWORD(cf) = 0;
        CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, &cf);
        v12 = *(_QWORD *)(a2 + 40);
        p_deviceUID = (UInt32 *)&cf;
        v14 = 1650549620;
      }
      else
      {
        if (!CFEqual(cf1, CFSTR("SceneCompositionPreset")))
          return 4294954353;
        LODWORD(cf) = 0;
        if (!v6)
          return FigSignalErrorAt();
        v49 = CFGetTypeID((CFTypeRef)v6);
        if (v49 != CFNumberGetTypeID())
          return FigSignalErrorAt();
        CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, &cf);
        v12 = *(_QWORD *)(a2 + 40);
        p_deviceUID = (UInt32 *)&cf;
        v14 = 1584620400;
      }
      goto LABEL_64;
    }
    if (!v6)
      return FigSignalErrorAt();
    v47 = CFGetTypeID((CFTypeRef)v6);
    if (v47 != CFBooleanGetTypeID())
      return FigSignalErrorAt();
    Value = CFBooleanGetValue((CFBooleanRef)v6);
    *(_BYTE *)(a1 + 688) = Value;
    return subaq_setSweepFilterEnable(a1, a2, Value);
  }
}

BOOL faq_shouldSetMXSessionOnAudioQueues()
{
  if (faq_shouldSetMXSessionOnAudioQueues_onceToken != -1)
    dispatch_once(&faq_shouldSetMXSessionOnAudioQueues_onceToken, &__block_literal_global_6);
  return (faq_shouldSetMXSessionOnAudioQueues_sShouldSetMXSession & 1) == 0;
}

uint64_t subaq_setCinematicAudioBulkParameters(int a1, int a2, CFDataRef theData)
{
  uint64_t v4;
  uint64_t v6;

  CFDataGetLength(theData);
  CFDataGetBytePtr(theData);
  v4 = FigAtomStreamInitWithMemoryBlock();
  if (!(_DWORD)v4)
  {
    FigAtomStreamGetCurrentAtomTypeAndDataLength();
    v4 = FigSignalErrorAt();
  }
  v6 = v4;
  free(0);
  return v6;
}

uint64_t __faq_shouldSetMXSessionOnAudioQueues_block_invoke()
{
  uint64_t result;

  result = FigPreferAudioSessionOverCMSession();
  if ((_DWORD)result || (result = FigGetCFPreferenceNumberWithDefault(), (_DWORD)result != 1))
    faq_shouldSetMXSessionOnAudioQueues_sShouldSetMXSession = 1;
  return result;
}

uint64_t parseCinematicAudioHeaderAtom()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t parseCinematicAudioParametersAtom()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t subaq_applyOneCachedProperty(CFTypeRef cf1, const __CFString *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t result;

  if (*(_BYTE *)(a3 + 16) || (result = CFEqual(cf1, CFSTR("AllowedToUseHardware")), !(_DWORD)result))
  {
    v7 = *(_QWORD *)a3;
    v6 = *(_QWORD *)(a3 + 8);
    if (FigCFEqual())
      v8 = 0;
    else
      v8 = a2;
    return subaq_setProperty(v7, v6, cf1, v8);
  }
  return result;
}

uint64_t __subaq_acquireAndPrepareAQBuffer_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  BOOL v3;
  int v4;
  UInt32 v5;
  int v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  v5 = 4;
  v6 = 0;
  result = FigAudioQueueTimingShimGetProperty(v1, 0x71706964u, &v6, &v5);
  v3 = 0;
  if (!(_DWORD)result)
  {
    v4 = v6;
    result = getpid();
    v3 = v4 == (_DWORD)result;
  }
  subaq_acquireAndPrepareAQBuffer_sAudioQueueCanAllocateBufferWithMemory = v3;
  return result;
}

void subaq_scheduleVolumeCurvesForMediaTimeRange(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, _OWORD *a4, int a5, int a6)
{
  uint64_t v6;
  const __CFArray *Value;
  const __CFArray *v11;
  __int128 v12;
  CFIndex Count;
  void *Mutable;
  uint64_t v15;
  CFIndex v16;
  CFIndex v17;
  int64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  CFIndex v22;
  uint64_t v23;
  uint64_t v24;
  CFIndex v25;
  int v26;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const __CFString *v29;
  double v30;
  const __CFString *v31;
  const __CFString *ValueAtIndex;
  CFTypeID v33;
  const void *v34;
  const void *v35;
  CFIndex v36;
  CFIndex v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  __int128 v42;
  CMTimeEpoch v43;
  CFIndex v44;
  CFIndex v45;
  double v46;
  float v47;
  double v48;
  double v49;
  float v50;
  float v51;
  int32_t v52;
  double v53;
  double v54;
  int32_t v55;
  CFIndex v56;
  double v57;
  BOOL v58;
  int v59;
  CMTimeEpoch v60;
  CFIndex v61;
  uint64_t v62;
  CFIndex v63;
  const void *v64;
  int v65;
  float v66;
  int32_t v67;
  double v68;
  double v69;
  int v70;
  float v71;
  float v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v78;
  int v79;
  CFIndex v80;
  __int128 v81;
  __int128 v82;
  CMTimeRange time;
  CMTimeRange v84;
  CMTimeRange v85;
  CMTime v86;
  CMTimeRange range;
  __int128 v88;
  double v89;
  double v90;
  CMTime v91;
  CMTime time2;
  CMTime time1;
  double v94;
  CMTime v95;
  uint64_t v96;
  AudioQueueParameterID v97;
  uint64_t v98;
  float v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  if (!theDict)
    return;
  v6 = a1;
  if (*(_BYTE *)(a1 + 16))
    return;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("AudioCurve_Volume"));
  if (!Value)
    return;
  v11 = Value;
  v12 = a4[1];
  *(_OWORD *)&time.start.value = *a4;
  *(_OWORD *)&time.start.epoch = v12;
  *(_OWORD *)&time.duration.timescale = a4[2];
  memset(&v86, 0, sizeof(v86));
  Count = CFArrayGetCount(Value);
  v78 = a2;
  if (0xAAAAAAAAAAAAAAABLL * Count + 0x2AAAAAAAAAAAAAAALL >= 0x5555555555555555)
  {
    if (FigSignalErrorAt())
      return;
    goto LABEL_121;
  }
  if (!Count)
  {
    Mutable = (void *)CFRetain(v11);
    goto LABEL_56;
  }
  v80 = Count;
  v79 = a6;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  range = time;
  CMTimeRangeGetEnd(&v86, &range);
  v15 = MEMORY[0x1E0CA2E18];
  v95.value = *MEMORY[0x1E0CA2E18];
  v95.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v16 = CFArrayGetCount(v11);
  v75 = v6;
  if (v16 < 4)
  {
    v22 = 0;
  }
  else
  {
    v17 = v16;
    v18 = 0;
    v19 = 0;
    v20 = (v16 - 1) / 3uLL;
    while (1)
    {
      memset(&range, 0, 24);
      v21 = v18 + v20 < 0 != __OFADD__(v18, v20) ? v18 + v20 + 1 : v18 + v20;
      v22 = (v21 & 0xFFFFFFFFFFFFFFFELL) + (v21 >> 1);
      if (!FigCFArrayGetCMTimeAtIndex())
        break;
      v23 = v21 >> 1;
      time1 = range.start;
      time2 = time.start;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v18 = v23 + 1;
        v19 = v22;
      }
      else
      {
        time1 = range.start;
        time2 = time.start;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          memset(&time1, 0, sizeof(time1));
          if (v17 <= v22 + 3)
          {
LABEL_27:
            v19 = v22;
          }
          else
          {
            v19 = 3 * v23;
            while (FigCFArrayGetCMTimeAtIndex())
            {
              time2 = time.start;
              v91 = time1;
              if (CMTimeCompare(&time2, &v91) < 0)
              {
                v22 = v19;
                goto LABEL_27;
              }
              memset(&time1, 0, sizeof(time1));
              v22 = v19 + 3;
              v24 = v19 + 6;
              v19 += 3;
              if (v17 <= v24)
                goto LABEL_27;
            }
          }
          break;
        }
        v20 = v23 - 1;
        v22 = v19;
      }
      if (v20 < v18)
        goto LABEL_29;
    }
    v22 = v19;
  }
LABEL_29:
  v25 = v22 + 2;
  if (v22 + 2 >= v80)
    goto LABEL_53;
  v26 = 0;
  flags = *(_DWORD *)(v15 + 12);
  epoch = *(_QWORD *)(v15 + 16);
  v29 = CFSTR("Linear");
  v30 = NAN;
  while (1)
  {
    v31 = v29;
    memset(&range, 0, 24);
    v91.value = 0;
    if (!FigCFArrayGetCMTimeAtIndex()
      || !FigCFArrayGetDoubleAtIndex()
      || (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, v25)) == 0
      || (v29 = ValueAtIndex, v33 = CFGetTypeID(ValueAtIndex), v33 != CFStringGetTypeID()))
    {
      v74 = FigSignalErrorAt();
      if (Mutable)
        CFRelease(Mutable);
      a6 = v79;
      v6 = v75;
      if (v74)
        return;
LABEL_121:
      Mutable = 0;
      goto LABEL_56;
    }
    time1 = range.start;
    time2 = time.start;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      break;
    v36 = v22 + 3;
    v26 = 1;
    if (!v79)
      goto LABEL_46;
    v37 = v80;
    if (v36 == v80)
    {
      time1 = time.start;
      FigCFArrayAppendCMTime();
      v38 = CFArrayGetValueAtIndex(v11, v22 + 1);
      CFArrayAppendValue((CFMutableArrayRef)Mutable, v38);
      goto LABEL_52;
    }
LABEL_47:
    v95.value = range.start.value;
    flags = range.start.flags;
    v95.timescale = range.start.timescale;
    epoch = range.start.epoch;
    v30 = *(double *)&v91.value;
    v25 = v22 + 5;
    v22 = v36;
    if (v25 >= v37)
      goto LABEL_53;
  }
  time1 = range.start;
  time2 = time.start;
  if (!CMTimeCompare(&time1, &time2))
    goto LABEL_42;
  if (v26 && (v79 || v30 != *(double *)&v91.value))
  {
    time1.value = v95.value;
    time1.timescale = v95.timescale;
    time1.flags = flags;
    time1.epoch = epoch;
    time2 = range.start;
    CMTimeRangeFromTimeToTime(&v85, &time1, &time2);
    time1 = time.start;
    faq_getLinearlyInterpolatedVolumeAtTimeInRange(&v85.start, &time1, v30, *(double *)&v91.value);
    time1 = time.start;
    FigCFArrayAppendCMTime();
    FigCFArrayAppendDouble();
    CFArrayAppendValue((CFMutableArrayRef)Mutable, v31);
  }
  time1 = range.start;
  time2 = v86;
  if (CMTimeCompare(&time1, &time2) < 1)
  {
LABEL_42:
    v34 = CFArrayGetValueAtIndex(v11, v22);
    CFArrayAppendValue((CFMutableArrayRef)Mutable, v34);
    v35 = CFArrayGetValueAtIndex(v11, v22 + 1);
    CFArrayAppendValue((CFMutableArrayRef)Mutable, v35);
    CFArrayAppendValue((CFMutableArrayRef)Mutable, v29);
    v26 = 0;
    v36 = v22 + 3;
LABEL_46:
    v37 = v80;
    goto LABEL_47;
  }
  if ((flags & 1) != 0 && v30 != *(double *)&v91.value)
  {
    time1.value = v95.value;
    time1.timescale = v95.timescale;
    time1.flags = flags;
    time1.epoch = epoch;
    time2 = range.start;
    CMTimeRangeFromTimeToTime(&v84, &time1, &time2);
    time1 = v86;
    faq_getLinearlyInterpolatedVolumeAtTimeInRange(&v84.start, &time1, v30, *(double *)&v91.value);
    time1 = v86;
    FigCFArrayAppendCMTime();
    FigCFArrayAppendDouble();
LABEL_52:
    CFArrayAppendValue((CFMutableArrayRef)Mutable, v29);
  }
LABEL_53:
  a6 = v79;
  v6 = v75;
  if (v79 && CFArrayGetCount((CFArrayRef)Mutable) >= 4)
  {
    v39 = CFArrayGetValueAtIndex((CFArrayRef)Mutable, 0);
    v40 = CFArrayGetValueAtIndex((CFArrayRef)Mutable, 1);
    v41 = CFArrayGetValueAtIndex((CFArrayRef)Mutable, 2);
    CFArrayInsertValueAtIndex((CFMutableArrayRef)Mutable, 0, v39);
    CFArrayInsertValueAtIndex((CFMutableArrayRef)Mutable, 1, v40);
    CFArrayInsertValueAtIndex((CFMutableArrayRef)Mutable, 2, v41);
  }
LABEL_56:
  v94 = -1.0;
  v42 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v85.start.value = *MEMORY[0x1E0CA2E68];
  v43 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v85.start.epoch = v43;
  if (!Mutable || *(_BYTE *)(v6 + 16))
  {
LABEL_115:
    if (Mutable)
      goto LABEL_116;
  }
  else
  {
    v81 = v42;
    v44 = CFArrayGetCount((CFArrayRef)Mutable);
    if (v44 >= 1)
    {
      v45 = v44;
      if (0xAAAAAAAAAAAAAAABLL * v44 >= 0x5555555555555556)
      {
        FigSignalErrorAt();
      }
      else
      {
        v46 = 1.0;
        if ((*(_BYTE *)(v6 + 48) & 2) != 0)
          goto LABEL_69;
        v47 = *(float *)(v6 + 408);
        v48 = 1.0;
        if (v47 == 0.0)
          v49 = 1.0;
        else
          v49 = v47;
        if (*(_BYTE *)(v6 + 236))
        {
          v50 = *(float *)(v6 + 232);
          v58 = v50 == 0.0;
          v48 = v50;
          if (v58)
            v48 = 1.0;
        }
        v51 = v49 / v48;
        if (v51 != 0.0)
        {
          v46 = v51;
LABEL_69:
          if (*(_BYTE *)(v78 + 48))
          {
            subaq_getCurrentQueueTime(v78, &v85.start);
          }
          else
          {
            *(_OWORD *)&v85.start.value = v81;
            v85.start.epoch = v43;
          }
          v52 = *(_DWORD *)(v78 + 100);
          *(_OWORD *)&range.start.value = *(_OWORD *)&v85.start.value;
          range.start.epoch = v85.start.epoch;
          CMTimeConvertScale(&v84.start, &range.start, v52, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v53 = (double)v84.start.value;
          *(_OWORD *)&time.start.value = *(_OWORD *)(v6 + 520);
          time.start.epoch = *(_QWORD *)(v6 + 536);
          CMTimeConvertScale(&time1, &time.start, *(_DWORD *)(v78 + 100), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v54 = (double)time1.value;
          v55 = *(_DWORD *)(v78 + 100);
          *(_OWORD *)&range.start.value = *(_OWORD *)(v6 + 448);
          range.start.epoch = *(_QWORD *)(v6 + 464);
          CMTimeConvertScale(&time2, &range.start, v55, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v56 = 0;
          v57 = (double)time2.value;
          if (a6)
            v58 = 1;
          else
            v58 = v45 == 3;
          v59 = v58;
          v76 = v59;
          v82 = *MEMORY[0x1E0CA2E18];
          v60 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          v61 = v45;
          while (2)
          {
            *(_OWORD *)&v91.value = v82;
            v91.epoch = v60;
            v89 = 0.0;
            v90 = 0.0;
            v88 = 0u;
            memset(&range, 0, sizeof(range));
            v99 = 0.0;
            v98 = 0;
            v97 = 18;
            v96 = 0xB0000000CLL;
            if (!a5)
            {
              v96 = 0x1A0000001BLL;
              v97 = 28;
            }
            if (v46 <= 0.0)
            {
              v62 = v78;
              if (!FigCFArrayGetCMTimeAtIndex() || !FigCFArrayGetDoubleAtIndex())
                goto LABEL_115;
              v63 = v61 - 1;
            }
            else
            {
              v62 = v78;
              if (!FigCFArrayGetCMTimeAtIndex() || !FigCFArrayGetDoubleAtIndex())
                goto LABEL_115;
              v63 = v56 + 2;
            }
            v64 = CFArrayGetValueAtIndex((CFArrayRef)Mutable, v63);
            if (!v64)
              goto LABEL_115;
            v65 = CFEqual(v64, CFSTR("EqualPower"));
            v66 = 1.0;
            if (!v65)
              v66 = 0.0;
            v99 = v66;
            if (FigAudioQueueTimingShimSetParameter(*(_QWORD *)(v62 + 40), v97, v66))
              goto LABEL_115;
            v67 = *(_DWORD *)(v62 + 100);
            v95 = v91;
            CMTimeConvertScale(&v86, &v95, v67, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            if (v57 + ((double)v86.value - v54) * v46 >= 0.0)
              v68 = v57 + ((double)v86.value - v54) * v46;
            else
              v68 = 0.0;
            v90 = v68;
            v69 = v94;
            if (v68 <= v94)
            {
              subaq_incrementSampleTime(v62, &v90, v94);
              if (v70)
                goto LABEL_115;
              v68 = v90;
            }
            v71 = v89;
            *((float *)&v98 + 1) = v71;
            if (v56)
            {
              if (a6 || v68 >= v53)
              {
                v72 = (v68 - v69) / (double)*(int *)(v62 + 100);
                *(float *)&v98 = v72;
                *(double *)&range.start.value = v69;
LABEL_102:
                DWORD2(v88) = 1;
                if (FigAudioQueueTimingShimScheduleParameters(*(_QWORD *)(v62 + 40), (double *)&range.start.value, 3u, (unsigned int *)&v96, (float *)&v98))goto LABEL_115;
                goto LABEL_103;
              }
            }
            else if (v76)
            {
              LODWORD(v98) = 0;
              if (a6 || v68 >= v53)
              {
                if (!a6 || *(_BYTE *)(v62 + 48) || *(_BYTE *)(v62 + 584))
                {
                  *(double *)&range.start.value = v68;
                  goto LABEL_102;
                }
                *(double *)&range.start.value = v53;
                DWORD2(v88) = 0;
                FigAudioQueueTimingShimScheduleParameters(*(_QWORD *)(v62 + 40), (double *)&range.start.value, 1u, (unsigned int *)&v96 + 1, (float *)&v98 + 1);
LABEL_103:
                *(_BYTE *)(v62 + 584) = 1;
              }
            }
            subaq_incrementSampleTime(v62, &v94, v68);
            if (v73)
              goto LABEL_115;
            v56 += 3;
            v61 -= 3;
            if (v56 >= v45)
              goto LABEL_115;
            continue;
          }
        }
      }
    }
LABEL_116:
    CFRelease(Mutable);
  }
}

const __CFArray *subaq_scheduleCinematicForMediaTimeRange(const __CFArray *result, uint64_t a2, CFDictionaryRef theDict)
{
  uint64_t v4;
  const __CFArray *Value;
  const __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  AudioQueueParameterValue v13;
  AudioQueueParameterValue v14;
  AudioQueueParameterValue v15;
  AudioQueueParameterValue v16;
  AudioQueueParameterValue v17;
  AudioQueueParameterValue v18;
  AudioQueueParameterValue v19;

  if (result)
  {
    if (theDict)
    {
      v4 = (uint64_t)result;
      if (!*((_BYTE *)result + 16))
      {
        Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("AudioCurves_AmbienceLevel"));
        v7 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("AudioCurves_DialogLevel"));
        v8 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("AudioCurves_DialogMixBias"));
        v9 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("AudioCurves_DialogLoudness"));
        v10 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("AudioCurves_AmbienceLoudness"));
        v11 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("AudioCurves_RecordingLoudness"));
        result = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("AudioCurves_RenderingStyle"));
        v12 = result;
        if (Value || v8 || v7 || v9 || v10 || v11 || result)
        {
          result = (const __CFArray *)subaq_ensureCinematicAudioEnabled(v4, a2, 0);
          if (*(_BYTE *)(v4 + 760))
          {
            if (!Value
              || (CFArrayGetValueAtIndex(Value, 1),
                  FigCFNumberGetFloat32(),
                  result = (const __CFArray *)FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 0x20u, v13),
                  !(_DWORD)result))
            {
              if (!v7
                || (CFArrayGetValueAtIndex(v7, 1),
                    FigCFNumberGetFloat32(),
                    result = (const __CFArray *)FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 0x1Fu, v14),
                    !(_DWORD)result))
              {
                if (!v8
                  || (CFArrayGetValueAtIndex(v8, 1),
                      FigCFNumberGetFloat32(),
                      result = (const __CFArray *)FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 0x1Eu, v15),
                      !(_DWORD)result))
                {
                  if (!v9
                    || (CFArrayGetValueAtIndex(v9, 1),
                        FigCFNumberGetFloat32(),
                        result = (const __CFArray *)FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 0x21u, v16), !(_DWORD)result))
                  {
                    if (!v10
                      || (CFArrayGetValueAtIndex(v10, 1),
                          FigCFNumberGetFloat32(),
                          result = (const __CFArray *)FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 0x22u, v17), !(_DWORD)result))
                    {
                      if (!v11
                        || (CFArrayGetValueAtIndex(v11, 1),
                            FigCFNumberGetFloat32(),
                            result = (const __CFArray *)FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 0x23u, v18), !(_DWORD)result))
                      {
                        if (v12)
                        {
                          CFArrayGetValueAtIndex(v12, 1);
                          FigCFNumberGetFloat32();
                          return (const __CFArray *)FigAudioQueueTimingShimSetParameter(*(_QWORD *)(a2 + 40), 0x48u, v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void subaq_scheduleAudioProcessingUnitForMediaTimeRange(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, char a5, uint64_t a6)
{
  __int128 v6;
  float v10;
  double v11;
  double v12;
  float v13;
  BOOL v14;
  float v15;
  __int128 v16;
  CMTime v17;
  CMTimeRange range;
  _QWORD context[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;
  CMTime v26;
  CFDictionaryRef v27;
  int v28;

  *(_OWORD *)&v26.value = *MEMORY[0x1E0CA2E18];
  memset(v23, 0, sizeof(v23));
  v6 = a4[1];
  v20 = *a4;
  v28 = 0;
  v27 = 0;
  v26.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  context[0] = &v28;
  context[1] = a1;
  context[2] = a2;
  v21 = v6;
  v22 = a4[2];
  LOBYTE(v23[0]) = 1;
  memset(&v23[1], 0, 24);
  v24 = 0;
  BYTE1(v24) = a5;
  v25 = a6;
  if (!*(_BYTE *)(a1 + 16) && (*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    v10 = *(float *)(a1 + 408);
    v11 = 1.0;
    if (v10 == 0.0)
      v12 = 1.0;
    else
      v12 = v10;
    if (*(_BYTE *)(a1 + 236))
    {
      v13 = *(float *)(a1 + 232);
      v14 = v13 == 0.0;
      v11 = v13;
      if (v14)
        v11 = 1.0;
    }
    v15 = v12 / v11;
    *((float *)v23 + 1) = v15;
    if (v15 != 0.0)
    {
      if (v15 <= 0.0)
      {
        FigSignalErrorAt();
      }
      else if (FigCFDictionaryGetValueIfPresent())
      {
        if (*(_BYTE *)(a2 + 48))
          subaq_getCurrentQueueTime(a2, &v26);
        else
          v26 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        range.start = v26;
        faqTimelineWrangler_convertAQTimeToMediaTime(a1 + 416, &range.start, (uint64_t)&v23[1], v15);
        v16 = a4[1];
        *(_OWORD *)&range.start.value = *a4;
        *(_OWORD *)&range.start.epoch = v16;
        *(_OWORD *)&range.duration.timescale = a4[2];
        v17 = *(CMTime *)&v23[1];
        LOBYTE(v24) = CMTimeRangeContainsTime(&range, &v17);
        CFDictionaryApplyFunction(v27, (CFDictionaryApplierFunction)subaq_audioProcessingUnitScheduleParametersApplier, context);
      }
    }
  }
}

double faq_getLinearlyInterpolatedVolumeAtTimeInRange(CMTime *a1, CMTime *a2, double a3, double a4)
{
  double Seconds;
  CMTime v9;
  CMTime lhs;
  CMTime v11;

  lhs = *a2;
  v9 = *a1;
  CMTimeSubtract(&v11, &lhs, &v9);
  lhs = v11;
  Seconds = CMTimeGetSeconds(&lhs);
  lhs = a1[1];
  return (a4 - a3) * (Seconds / CMTimeGetSeconds(&lhs)) + a3;
}

double subaq_incrementSampleTime(uint64_t a1, _QWORD *a2, double a3)
{
  double result;
  _OWORD v5[3];
  __int128 v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v10 = 0u;
  v9 = 0u;
  v8 = 0u;
  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  v7 = a3;
  v11 = 1;
  DWORD2(v6) = 1;
  if (!FigAudioQueueTimingShimGetIncrementedSampleTime(*(CMTime **)(a1 + 40), &v7, (double *)v5))
  {
    result = *(double *)v5;
    *a2 = *(_QWORD *)&v5[0];
  }
  return result;
}

void subaq_audioProcessingUnitScheduleParametersApplier(void *key, const __CFArray *a2, uint64_t a3)
{
  uint64_t v3;
  int **v4;
  const __CFDictionary *v7;
  uint64_t v8;
  int v9;
  const __CFAllocator *v10;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  CFIndex v13;
  const __CFAllocator *v14;
  const __CFDictionary *ValueAtIndex;
  __int128 v16;
  double v17;
  const UInt8 *BytePtr;
  const UInt8 *v19;
  unint64_t Length;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  CFMutableDictionaryRef v25;
  __CFDictionary *v26;
  uint64_t v27;
  CFNumberRef v28;
  const UInt8 *v29;
  unint64_t v30;
  const UInt8 *v31;
  CFNumberRef v32;
  CFMutableDictionaryRef v33;
  __CFDictionary *v34;
  __CFDictionary *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, __CFArray *);
  int v41;
  int v42;
  int *v43;
  __CFArray *v44;
  CFDataRef v45;
  CFNumberRef v46;
  CMTime *v47;
  CMTime *v48;
  __CFArray *v49;
  int **v50;
  unint64_t v51;
  unint64_t v52;
  _DWORD **v53;
  const __CFArray *v54;
  uint64_t v55;
  CFIndex Count;
  int v57;
  _DWORD **v58;
  __CFDictionary *theDict;
  CMTime v60;
  CMTime rhs;
  CMTime time;
  CMTime lhs;
  CMTime time2;
  CMTimeRange range;
  CMTime time1;
  _BYTE *v67;
  void *v68;
  void *value;
  CMTime v70;
  CMTime v71;
  uint64_t v72;

  v72 = 0;
  v57 = *(unsigned __int8 *)(a3 + 104);
  v71 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v70 = v71;
  v68 = 0;
  value = 0;
  v67 = 0;
  v3 = *(_QWORD *)(a3 + 8);
  if (**(_DWORD **)a3)
    return;
  v4 = (int **)a3;
  if (!*(_BYTE *)(a3 + 105))
  {
    v7 = *(const __CFDictionary **)(v3 + 648);
    if (v7)
    {
      if (CFDictionaryContainsKey(v7, key))
        return;
    }
  }
  if (!FigCFDictionaryGetValueIfPresent())
    goto LABEL_89;
  if (!FigCFDictionaryGetValueIfPresent() || !*v67)
  {
LABEL_11:
    if (a2)
      Count = CFArrayGetCount(a2);
    else
      Count = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v12 = Mutable;
      if (Count >= 1)
      {
        theDict = 0;
        v13 = 0;
        v58 = v4 + 3;
        v55 = v3 + 416;
        v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
        v53 = v4 + 10;
        v54 = a2;
        v47 = (CMTime *)(v3 + 448);
        v48 = (CMTime *)(v3 + 520);
        v49 = Mutable;
        v50 = v4;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v13);
          if (!FigCFDictionaryGetCMTimeIfPresent())
            goto LABEL_75;
          v16 = *((_OWORD *)v58 + 1);
          *(_OWORD *)&range.start.value = *(_OWORD *)v58;
          *(_OWORD *)&range.start.epoch = v16;
          *(_OWORD *)&range.duration.timescale = *((_OWORD *)v58 + 2);
          CMTimeRangeGetEnd(&time1, &range);
          range.start = v71;
          if (CMTimeCompare(&time1, &range.start) < 0)
            goto LABEL_62;
          v17 = *((float *)v4 + 19);
          range.start = v71;
          faqTimelineWrangler_convertMediaTimeToAQTime(v55, &range.start, (uint64_t)&v70, v17);
          if (!CFDictionaryGetValueIfPresent(ValueAtIndex, CFSTR("params"), (const void **)&value)
            || !CFDictionaryGetValueIfPresent(ValueAtIndex, CFSTR("values"), (const void **)&v68))
          {
LABEL_75:
            v42 = FigSignalErrorAt();
            v45 = 0;
            v46 = 0;
            goto LABEL_76;
          }
          BytePtr = CFDataGetBytePtr((CFDataRef)value);
          v19 = CFDataGetBytePtr((CFDataRef)v68);
          Length = CFDataGetLength((CFDataRef)value);
          v21 = Length / 0xC;
          if (!v13)
          {
            if (!*((_BYTE *)v4 + 72) && !v57)
              goto LABEL_29;
            v29 = CFDataGetBytePtr((CFDataRef)value);
            theDict = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!theDict)
            {
              **v4 = FigSignalErrorAt();
              v44 = v12;
LABEL_85:
              CFRelease(v44);
              return;
            }
            if (Length >= 0xC)
            {
              v51 = Length;
              v52 = Length / 0xC;
              if (v21 <= 1)
                v30 = 1;
              else
                v30 = Length / 0xC;
              v31 = v19;
              while (1)
              {
                v45 = CFDataCreateWithBytesNoCopy(v10, v29, 12, v14);
                v32 = CFNumberCreate(v10, kCFNumberFloat32Type, v31);
                v46 = v32;
                if (!v45 || !v32)
                  break;
                CFDictionarySetValue(theDict, v45, v32);
                CFRelease(v45);
                CFRelease(v46);
                v31 += 4;
                v29 += 12;
                if (!--v30)
                {
                  v12 = v49;
                  v4 = v50;
                  Length = v51;
                  v21 = v52;
                  goto LABEL_22;
                }
              }
              v42 = FigSignalErrorAt();
              v12 = v49;
              v43 = *v50;
              goto LABEL_77;
            }
          }
LABEL_22:
          if (v57)
          {
            *(_OWORD *)&range.start.value = *(_OWORD *)v53;
            range.start.epoch = (CMTimeEpoch)v53[2];
            time2 = v71;
            if (CMTimeCompare(&range.start, &time2) > 0)
              goto LABEL_30;
            v22 = v72;
            v23 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (!*(_QWORD *)(v23 + 8))
            {
              v45 = 0;
              v46 = 0;
              **v4 = -12782;
              goto LABEL_78;
            }
            v24 = (*(uint64_t (**)(uint64_t, __CFDictionary *))(v23 + 16))(v22, theDict);
            **v4 = v24;
            if (v24)
            {
              v45 = 0;
              v46 = 0;
              goto LABEL_78;
            }
          }
LABEL_29:
          v57 = 0;
LABEL_30:
          *(_OWORD *)&range.start.value = *(_OWORD *)v58;
          range.start.epoch = (CMTimeEpoch)v58[2];
          time2 = v71;
          if (CMTimeCompare(&range.start, &time2) < 0)
          {
            if (!CFArrayGetCount(v12))
            {
              if (*((_BYTE *)v4 + 72))
              {
                *(_OWORD *)&range.start.value = *MEMORY[0x1E0CA2E68];
                range.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
                time2 = v71;
                if (CMTimeCompare(&range.start, &time2) < 0)
                {
                  memset(&range, 0, 24);
                  rhs = *v48;
                  time2 = *(CMTime *)v58;
                  CMTimeSubtract(&time, &time2, &rhs);
                  CMTimeMultiplyByFloat64(&lhs, &time, *((float *)v4 + 19));
                  v60 = *v47;
                  CMTimeAdd(&range.start, &lhs, &v60);
                  v33 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (!v33)
                    goto LABEL_75;
                  v34 = v33;
                  time2 = range.start;
                  FigCFDictionarySetCMTime();
                  CFDictionarySetValue(v34, CFSTR("params"), value);
                  CFDictionarySetValue(v34, CFSTR("values"), v68);
                  CFArrayAppendValue(v12, v34);
                  CFRelease(v34);
                }
              }
            }
            v25 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!v25)
              goto LABEL_75;
            v26 = v25;
            range.start = v70;
            FigCFDictionarySetCMTime();
            CFDictionarySetValue(v26, CFSTR("params"), value);
            CFDictionarySetValue(v26, CFSTR("values"), v68);
            CFArrayAppendValue(v12, v26);
            CFRelease(v26);
            if (!v13)
              goto LABEL_45;
          }
          else if (!v13)
          {
            goto LABEL_45;
          }
          range.start = v71;
          time2 = *(CMTime *)v58;
          if (CMTimeCompare(&range.start, &time2) <= 0 && *((_BYTE *)v4 + 72) && Length >= 0xC)
          {
            if (v21 <= 1)
              v27 = 1;
            else
              v27 = v21;
            while (1)
            {
              v45 = CFDataCreateWithBytesNoCopy(v10, BytePtr, 12, v14);
              v28 = CFNumberCreate(v10, kCFNumberFloat32Type, v19);
              v46 = v28;
              if (!v45 || !v28)
                break;
              CFDictionarySetValue(theDict, v45, v28);
              CFRelease(v45);
              CFRelease(v46);
              v19 += 4;
              BytePtr += 12;
              if (!--v27)
                goto LABEL_45;
            }
            v42 = FigSignalErrorAt();
LABEL_76:
            v43 = *v4;
LABEL_77:
            *v43 = v42;
LABEL_78:
            v35 = theDict;
            goto LABEL_79;
          }
LABEL_45:
          ++v13;
          a2 = v54;
          if (v13 == Count)
            goto LABEL_62;
        }
      }
      theDict = 0;
LABEL_62:
      v35 = theDict;
      if (v57)
      {
        v36 = v72;
        v37 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (!*(_QWORD *)(v37 + 8))
        {
          v45 = 0;
          v46 = 0;
          **v4 = -12782;
          goto LABEL_79;
        }
        v38 = (*(uint64_t (**)(uint64_t, __CFDictionary *))(v37 + 16))(v36, theDict);
        **v4 = v38;
        if (v38)
          goto LABEL_90;
      }
      if (CFArrayGetCount(v12) < 1)
      {
LABEL_90:
        v45 = 0;
        v46 = 0;
      }
      else
      {
        v39 = v72;
        v40 = *(uint64_t (**)(uint64_t, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v40)
          v41 = v40(v39, v12);
        else
          v41 = -12782;
        v45 = 0;
        v46 = 0;
        **v4 = v41;
      }
LABEL_79:
      CFRelease(v12);
      if (v35)
        CFRelease(v35);
      if (v45)
        CFRelease(v45);
      if (v46)
      {
        v44 = v46;
        goto LABEL_85;
      }
      return;
    }
LABEL_89:
    **v4 = FigSignalErrorAt();
    return;
  }
  v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!*(_QWORD *)(v8 + 8))
  {
    **v4 = -12782;
    return;
  }
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 24))(v72);
  **v4 = v9;
  if (!v9)
  {
    v57 = 1;
    goto LABEL_11;
  }
}

uint64_t faqTimelineWrangler_setAQTimeInFAQProcessTransitions(uint64_t result, __int128 *a2)
{
  __int128 v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(result + 32) = v2;
  if (dword_1EE2A2A48)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t subaq_setTapTimelineInfo(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  float v4;
  float v5;
  CMTimeValue value;
  int32_t v7;
  CMTimeValue v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AudioQueue;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, CMTimeValue, CMTimeValue, float, float);
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime time;

  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 16) || !*(_QWORD *)(a2 + 600))
      return 0;
    time = *(CMTime *)(result + 520);
    CMTimeConvertScale(&v15, &time, *(_DWORD *)(a2 + 100), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    v4 = 1.0;
    v5 = 1.0;
    if ((*(_BYTE *)(v2 + 48) & 2) == 0)
      v5 = *(float *)(v2 + 408);
    value = v15.value;
    v7 = *(_DWORD *)(a2 + 100);
    v13 = *(CMTime *)(v2 + 448);
    CMTimeConvertScale(&v14, &v13, v7, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    if (*(_BYTE *)(v2 + 236))
    {
      if (*(float *)(v2 + 232) == 0.0)
        v4 = 1.0;
      else
        v4 = *(float *)(v2 + 232);
    }
    v8 = v14.value;
    v9 = *(_QWORD *)(a2 + 592);
    v10 = *(_QWORD *)(a2 + 600);
    AudioQueue = FigAudioQueueTimingShimGetAudioQueue(*(_QWORD *)(a2 + 40));
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMTimeValue, CMTimeValue, float, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v12)
      return 0;
    result = v12(v9, v10, AudioQueue, value, v8, v5, v4);
    if ((_DWORD)result == -12782)
      return 0;
  }
  return result;
}

void faq_fireTransitionCallback(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, __int128 *, __int128 *, float);
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v3 = *(void (**)(uint64_t, _QWORD, __int128 *, __int128 *, float))(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v3(v2, *(_QWORD *)(a1 + 80), &v6, &v4, *(float *)(a1 + 72));
  faq_destroyTransitionRecord((_QWORD *)a1);
}

uint64_t faq_inspectAudioProcessingUnitsParametersInNewAudioCurvesApplier(uint64_t result, CFTypeRef cf, uint64_t a3)
{
  uint64_t v3;
  __CFDictionary *v4;
  CMTimeEpoch epoch;
  const void *v7;
  CFTypeID v8;
  BOOL *v9;
  BOOL *v10;
  CMTimeFlags flags;
  BOOL v12;
  CFIndex v13;
  const void *ValueAtIndex;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  unint64_t Length;
  unint64_t v19;
  CFIndex Count;
  CMTime time2;
  CMTime time1;
  uint64_t v24;
  CFTypeRef v25;
  uint64_t v26;
  CFTypeRef cfa;
  CMTime v28;
  CMTime v29;
  uint64_t v30;
  uint64_t v31;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v31 = 0;
  v3 = MEMORY[0x1E0CA2E18];
  v4 = *(__CFDictionary **)(a3 + 24);
  *(_OWORD *)&v29.value = *MEMORY[0x1E0CA2E18];
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v29.epoch = epoch;
  *(_OWORD *)&v28.value = *(_OWORD *)&v29.value;
  v28.epoch = epoch;
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v26 = 0;
  cfa = 0;
  v24 = 0;
  v25 = 0;
  if (!**(_DWORD **)a3)
  {
    if (cf)
    {
      v7 = (const void *)result;
      v8 = CFGetTypeID(cf);
      if (v8 == CFArrayGetTypeID())
      {
        Count = CFArrayGetCount((CFArrayRef)cf);
        if (Count > 0)
        {
          v9 = (BOOL *)malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
          if (v9)
          {
            v10 = v9;
            flags = *(_DWORD *)(v3 + 12);
            CFDictionarySetValue(v4, v7, v9);
            if (FigCFDictionaryGetValueIfPresent())
            {
              if (FigCFDictionaryGetValueIfPresent())
                v12 = Count != v31;
              else
                v12 = 1;
              *v10 = v12;
            }
            v13 = 0;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v13);
              if (!ValueAtIndex)
                break;
              v15 = CFGetTypeID(ValueAtIndex);
              if (v15 != CFDictionaryGetTypeID()
                || !FigCFDictionaryGetCMTimeIfPresent()
                || (v29.flags & 0x1D) != 1)
              {
                break;
              }
              if ((flags & 1) != 0)
              {
                time1.value = value;
                time1.timescale = timescale;
                time1.flags = flags;
                time1.epoch = epoch;
                time2 = v29;
                if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
                  break;
              }
              else
              {
                time1 = v29;
                time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                if (CMTimeCompare(&time1, &time2))
                  break;
              }
              value = v29.value;
              flags = v29.flags;
              timescale = v29.timescale;
              epoch = v29.epoch;
              if (!FigCFDictionaryGetValueIfPresent())
                break;
              if (!cfa)
                break;
              v16 = CFGetTypeID(cfa);
              if (v16 != CFDataGetTypeID())
                break;
              if (!FigCFDictionaryGetValueIfPresent())
                break;
              if (!v25)
                break;
              v17 = CFGetTypeID(v25);
              if (v17 != CFDataGetTypeID())
                break;
              Length = CFDataGetLength((CFDataRef)cfa);
              v19 = Length / 0xC;
              if (Length % 0xC)
                break;
              result = CFDataGetLength((CFDataRef)v25);
              if (result != 4 * v19)
                break;
              if (!*v10)
              {
                FigCFArrayGetValueAtIndex();
                FigCFDictionaryGetCMTimeIfPresent();
                time1 = v29;
                time2 = v28;
                result = CMTimeCompare(&time1, &time2);
                if ((_DWORD)result
                  || (FigCFDictionaryGetValueIfPresent(), result = FigCFEqual(), !(_DWORD)result)
                  || (FigCFDictionaryGetValueIfPresent(), result = FigCFEqual(), !(_DWORD)result))
                {
                  *v10 = 1;
                }
              }
              if (Count == ++v13)
                return result;
            }
          }
        }
      }
    }
    result = FigSignalErrorAt();
    **(_DWORD **)a3 = result;
  }
  return result;
}

void faq_audioProcessingUnitsParametersInspectionResultsDictValueReleaseCallBack(int a1, void *a2)
{
  free(a2);
}

void faq_Init(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x300uLL);
}

void faq_Finalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;

  FigAudioQueueInvalidate(a1);
  if (*(_QWORD *)(a1 + 24))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (*(_QWORD *)(a1 + 288))
  {
    FigSemaphoreDestroy();
    *(_QWORD *)(a1 + 288) = 0;
  }
  MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 168) = 0;
  v4 = *(const void **)(a1 + 80);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 400);
  if (v5)
    CFRelease(v5);
}

__CFString *faq_CopyFormattingDesc(_BYTE *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigAudioQueue %p (rc=%d)"), a1, v4);
  if (a1[16])
    CFStringAppendFormat(Mutable, 0, CFSTR("invalidated]"));
  else
    CFStringAppendFormat(Mutable, 0, CFSTR("]"));
  return Mutable;
}

__CFString *faq_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  CFIndex Count;
  uint64_t v6;
  CFIndex i;
  const void *ValueAtIndex;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigAudioQueue %p retainCount:%d"), a1, v4);
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 16))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
      if (Count)
      {
        v6 = Count;
        CFStringAppendFormat(Mutable, 0, CFSTR("\n"));
        if (v6 >= 1)
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_BYTE *)(a1 + 16))
              ValueAtIndex = 0;
            else
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), i);
            CFStringAppendFormat(Mutable, 0, CFSTR("  "));
            subaq_appendDebugDesc(Mutable, ValueAtIndex);
          }
        }
      }
    }
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("]\n"));
  return Mutable;
}

uint64_t FigCaptionRendererInputGetClassID()
{
  MEMORY[0x19402F294](&FigCaptionRendererInputGetClassID_sRegisterFigCaptionRendererInputTypeOnce, RegisterFigCaptionRendererInputType);
  return sFigCaptionRendererInputClassID;
}

uint64_t RegisterFigCaptionRendererInputType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigCaptionRendererInputCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionRendererInput %p]"), a1);
}

void vmc2FinishAndDestroyImageEnhancementFilter(uint64_t a1)
{
  NSObject *v1;
  const void *v2;
  const void *v3;
  _QWORD block[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 968);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vmc2FinishAndDestroyImageEnhancementFilter_block_invoke;
  block[3] = &unk_1E2F7CD80;
  block[5] = &v5;
  block[6] = a1;
  block[4] = &v9;
  dispatch_sync(v1, block);
  if (v10[3])
    VTTemporalFilterSessionCompleteFrames();
  v2 = (const void *)v6[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)v10[3];
  if (v3)
    CFRelease(v3);
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v9, 8);
}

uint64_t vmc2PriorImageQueueGaugeSafeDisplayDurationChanged(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!*(_BYTE *)(a2 + 16))
    return vmc2OutputOccupancyChanged(a2);
  return result;
}

void vmc2PriorImageQueueGaugeWasInvalidated(uint64_t a1, uint64_t a2)
{
  const void *v3;

  if (!*(_BYTE *)(a2 + 16))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 1480));
    if (*(_QWORD *)(a2 + 1488))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v3 = *(const void **)(a2 + 1488);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(a2 + 1488) = 0;
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a2 + 1480));
    vmc2OutputOccupancyChanged(a2);
  }
}

void vmc2RemoveDecompressionSession(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 64))
  {
    FigStopForwardingMediaServicesProcessDeathNotification();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(a1 + 64));
    CFRelease(*(CFTypeRef *)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
    ++*(_DWORD *)(a1 + 1144);
  }
  *(_WORD *)(a1 + 1033) = 0;
  *(_BYTE *)(a1 + 1065) = 0;
}

void vmc2UpcomingPTSInfoChanged(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 16))
  {
    if (FigAtomicCompareAndSwap32())
      dispatch_async_f(*(dispatch_queue_t *)(a2 + 448), (void *)a2, (dispatch_function_t)vmc2RecalculateUpcomingImageTimes2);
  }
}

void vmc2DisplayModeChanged(uint64_t a1, uint64_t a2)
{
  int v3;

  if (!*(_BYTE *)(a2 + 16))
  {
    v3 = 0;
    FPSupport_GetCurrentDisplayModeVideoRangeAndSizeAndFrameRate(0, &v3, 0, 0);
    *(_BYTE *)(a2 + 1400) = (v3 - 2) < 3;
  }
}

void vmc2ClearSavedList(uint64_t a1)
{
  _QWORD *v1;
  const void *v2;
  _QWORD *v3;
  const void *v4;
  const void *v5;

  v1 = *(_QWORD **)(a1 + 800);
  *(_QWORD *)(a1 + 800) = 0;
  if (v1)
  {
    do
    {
      v3 = (_QWORD *)*v1;
      v2 = (const void *)v1[1];
      if (v2)
      {
        CFRelease(v2);
        v1[1] = 0;
      }
      v4 = (const void *)v1[3];
      if (v4)
      {
        CFRelease(v4);
        v1[3] = 0;
      }
      v5 = (const void *)v1[4];
      if (v5)
        CFRelease(v5);
      free(v1);
      v1 = v3;
    }
    while (v3);
  }
}

uint64_t VMC2GetTypeID()
{
  MEMORY[0x19402F294](&sRegisterVMCTypeOnce, RegisterVMC2Type);
  return sVMC2ID;
}

uint64_t VMC2CreateWithQueues2(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, const void *a3, const void *a4, const void *a5, const void *a6, uint64_t a7, const __CFArray *a8, const __CFArray *a9, __int128 *a10, uint64_t a11, const void *a12, const void *a13, const __CFDictionary *a14, uint64_t *a15)
{
  CFIndex Count;
  CFIndex v23;
  const __CFAllocator *v24;
  uint64_t OutputCallbacksForImageQueueArray;
  uint64_t v26;
  const __CFArray *Mutable;
  void (*v28)(_QWORD);
  CFIndex v30;
  CFIndex v31;
  CFIndex v32;
  const void *ValueAtIndex;
  CFTypeID v34;
  CFIndex v35;
  int v36;
  uint64_t v37;
  const opaqueCMFormatDescription *v38;
  const void *v39;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  char v46;
  CFTypeRef cf;
  _OWORD v48[4];
  __int128 v49;
  __int128 v50;
  CFTypeRef v51;

  v51 = 0;
  v49 = 0u;
  v50 = 0u;
  memset(v48, 0, sizeof(v48));
  cf = 0;
  v46 = 1;
  v45 = 0;
  fig_note_initialize_category_with_default_work_cf();
  if (a8)
  {
    Count = CFArrayGetCount(a8);
    if (a9)
    {
LABEL_3:
      v23 = CFArrayGetCount(a9);
      goto LABEL_6;
    }
  }
  else
  {
    Count = 0;
    if (a9)
      goto LABEL_3;
  }
  v23 = 0;
LABEL_6:
  if (Count != v23)
  {
    OutputCallbacksForImageQueueArray = FigSignalErrorAt();
LABEL_9:
    v26 = OutputCallbacksForImageQueueArray;
    Mutable = 0;
    goto LABEL_10;
  }
  v38 = a2;
  v39 = a3;
  v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  OutputCallbacksForImageQueueArray = FigSampleBufferProviderCreateForBufferQueue(*MEMORY[0x1E0C9AE00], a6, &v51);
  if ((_DWORD)OutputCallbacksForImageQueueArray)
    goto LABEL_9;
  OutputCallbacksForImageQueueArray = VMC2MakeOutputCallbacksForImageQueueArray(a8, a9, 96, v48);
  if ((_DWORD)OutputCallbacksForImageQueueArray)
    goto LABEL_9;
  if (a9 && (v30 = CFArrayGetCount(a9), v30 >= 1))
  {
    v31 = v30;
    v32 = 0;
    Mutable = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a9, v32);
      if (ValueAtIndex)
      {
        v34 = CFGetTypeID(ValueAtIndex);
        if (v34 == CFDictionaryGetTypeID())
        {
          LODWORD(v43) = 0;
          if (FigCFDictionaryGetInt32IfPresent())
          {
            if (!Mutable)
            {
              Mutable = CFArrayCreateMutable(v24, 0, MEMORY[0x1E0C9B378]);
              if (!Mutable)
              {
                v37 = FigSignalErrorAt();
                goto LABEL_41;
              }
            }
            FigCFArrayAppendInt32();
          }
        }
      }
      ++v32;
    }
    while (v31 != v32);
    if (Mutable)
    {
      v35 = CFArrayGetCount(Mutable);
      if (v35 >= 1 && v35 != v31)
      {
        v26 = 4294954473;
        goto LABEL_10;
      }
    }
  }
  else
  {
    Mutable = 0;
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if (a12)
  {
    v36 = (int)a1;
    v37 = FigActivitySchedulerCreateForCFRunLoop(a1, a12, &cf);
    if (!(_DWORD)v37)
      goto LABEL_42;
LABEL_41:
    v26 = v37;
    goto LABEL_10;
  }
  v36 = (int)a1;
  v37 = FigActivitySchedulerCreateForNewThread((uint64_t)a1, 3, CFSTR("com.apple.coremedia.videomediaconverter"), &cf);
  if ((_DWORD)v37)
    goto LABEL_41;
LABEL_42:
  v43 = *a10;
  v44 = *((_QWORD *)a10 + 2);
  v41 = *(_OWORD *)a11;
  v42 = *(_QWORD *)(a11 + 16);
  v26 = VMC2CreateWithCallbacks(v36, v38, v39, a4, a5, v51, (__int128 *)a7, (uint64_t)v48, Mutable, (uint64_t)&v43, &v41, cf, a13, a14, a15);
  a7 = 0;
  *((_QWORD *)&v49 + 1) = 0;
LABEL_10:
  if (v51)
    CFRelease(v51);
  if (*((_QWORD *)&v49 + 1))
    (*((void (**)(_QWORD))&v49 + 1))(*((_QWORD *)&v48[0] + 1));
  if (a7)
  {
    v28 = *(void (**)(_QWORD))(a7 + 24);
    if (v28)
      v28(*(_QWORD *)(a7 + 8));
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v26;
}

uint64_t vmc2SetVideoFormatDescription(uint64_t result, CMFormatDescriptionRef desc)
{
  uint64_t v3;
  const void *v4;

  if (result && desc)
  {
    v3 = result;
    v4 = *(const void **)(result + 32);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 32) = 0;
    }
    if (CMFormatDescriptionGetMediaType(desc) == 1952606066)
    {
      *(_BYTE *)(v3 + 40) = 1;
      result = FigFormatDescriptionRetain();
      *(_QWORD *)(v3 + 32) = result;
    }
    else
    {
      CMFormatDescriptionGetMediaSubType(desc);
      *(_QWORD *)(v3 + 32) = FigFormatDescriptionRetain();
      result = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      *(_BYTE *)(v3 + 40) = result != 0;
    }
  }
  return result;
}

void vmc2UpdateDisplayMode(uint64_t a1)
{
  int v2;

  v2 = 0;
  FPSupport_GetCurrentDisplayModeVideoRangeAndSizeAndFrameRate(0, &v2, 0, 0);
  *(_BYTE *)(a1 + 1400) = (v2 - 2) < 3;
}

uint64_t FigActivitySchedulerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigActivitySchedulerGetFigBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(FigBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t vmc2BuildDecompressionSession(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  const __CFAllocator **v6;
  int v7;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  uint64_t v11;
  __CFDictionary *v12;
  const void *MutableCopy;
  __CFDictionary *Mutable;
  const void **v15;
  const void *v16;
  const void *v17;
  const void *v18;
  uint64_t started;
  const __CFArray *v20;
  const void *v21;
  const void *v22;
  void *value[3];

  value[0] = 0;
  if (!*(_QWORD *)(a1 + 32) || *(_BYTE *)(a1 + 40))
    return 0;
  value[1] = vmc2OutputFrame;
  value[2] = (void *)a1;
  v4 = *(_QWORD *)(a1 + 264);
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  v6 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (!v5)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_11;
  }
  v7 = v5(v4);
  v8 = *v6;
  if (!v7)
    goto LABEL_11;
  v9 = *(_QWORD *)(a1 + 264);
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (!v10)
  {
    v12 = 0;
    MutableCopy = 0;
    v2 = 4294954514;
    goto LABEL_37;
  }
  v11 = v10(v9, CFSTR("ThreadPriority"), v8, value);
  if (!(_DWORD)v11)
  {
LABEL_11:
    Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = Mutable;
    v15 = (const void **)MEMORY[0x1E0C9AE50];
    if (Mutable)
    {
      if (value[0])
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED468], value[0]);
      v16 = *(const void **)(a1 + 976);
      if (v16)
        CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CED488], v16);
      v17 = *(const void **)(a1 + 984);
      if (v17)
        CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CED458], v17);
      if (*(_DWORD *)(a1 + 840))
        FigCFDictionarySetInt32();
      v18 = *(const void **)(a1 + 848);
      if (v18)
        CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CED480], v18);
      if (*(_BYTE *)(a1 + 859))
        CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CED478], *v15);
      if (*(_BYTE *)(a1 + 860))
        CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CED470], *v15);
    }
    MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
    FigCFDictionarySetUInt32();
    CFGetAllocator((CFTypeRef)a1);
    started = VTDecompressionSessionCreateWithOptions();
    if (!(_DWORD)started)
    {
      ++*(_DWORD *)(a1 + 1140);
      started = FigStartForwardingMediaServicesProcessDeathNotification();
      if (!(_DWORD)started)
      {
        v20 = *(const __CFArray **)(a1 + 256);
        if (!v20
          || CFArrayGetCount(v20) < 1
          || (started = VTSessionSetProperty(*(VTSessionRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CED398], *(CFTypeRef *)(a1 + 256)), !(_DWORD)started)&& (started = VTDecompressionSessionSetMultiImageCallback(*(VTDecompressionSessionRef *)(a1 + 64), (VTDecompressionOutputMultiImageCallback)vmc2OutputMultiImageFrame, (void *)a1), !(_DWORD)started))
        {
          v21 = *(const void **)(a1 + 600);
          if (v21)
          {
            CFRelease(v21);
            *(_QWORD *)(a1 + 600) = 0;
          }
          VTSessionCopyProperty(*(VTSessionRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CED3A0], v8, (void *)(a1 + 600));
          *(_DWORD *)(a1 + 608) = 0;
          vmc2WhileHoldingTimebaseMutexUpdateQualityOfServiceCapability(a1);
        }
      }
    }
    v2 = started;
    goto LABEL_37;
  }
  v2 = v11;
  v12 = 0;
  MutableCopy = 0;
LABEL_37:
  if (*(_QWORD *)(a1 + 64))
  {
    FigStopForwardingMediaServicesProcessDeathNotification();
    VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(a1 + 64));
    v22 = *(const void **)(a1 + 64);
    if (v22)
      CFRelease(v22);
    *(_QWORD *)(a1 + 64) = 0;
    ++*(_DWORD *)(a1 + 1144);
  }
  if (v12)
    CFRelease(v12);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (value[0])
    CFRelease(value[0]);
  return v2;
}

void vmc2UpdateExternalProtectionStatus(uint64_t a1)
{
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, int *);
  int v4;
  const void *UInt32;
  const void *v6;
  void *v7;
  int v8;

  v8 = 0;
  os_retain(*(void **)(a1 + 1392));
  voucher_adopt();
  v2 = *(_QWORD *)(a1 + 808);
  if (v2)
  {
    v3 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v3 && !v3(v2, 7, &v8))
    {
      v4 = v8;
    }
    else
    {
      v4 = 0;
      v8 = 0;
    }
  }
  else
  {
    v4 = 1;
    v8 = 1;
  }
  *(_DWORD *)(a1 + 836) = v4;
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
  v6 = *(const void **)(a1 + 64);
  if (v6)
    VTSessionSetProperty(v6, (CFStringRef)*MEMORY[0x1E0CED328], UInt32);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
  v7 = (void *)voucher_adopt();
  os_release(v7);
  if (UInt32)
    CFRelease(UInt32);
}

uint64_t vmc2InvokeOutputCallback_InstallOccupancyChangedCallback(uint64_t a1)
{
  uint64_t (*v2)(_QWORD, uint64_t, uint64_t (*)(uint64_t), uint64_t);
  uint64_t v3;

  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(a1 + 249))
  {
    v2 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t (*)(uint64_t), uint64_t))(a1 + 176);
    if (v2)
    {
      v3 = v2(*(_QWORD *)(a1 + 152), a1, vmc2OutputOccupancyChanged, a1 + 240);
      if (!(_DWORD)v3)
        *(_BYTE *)(a1 + 248) = 1;
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = FigSignalErrorAt();
  }
  FigReadWriteLockUnlockForRead();
  return v3;
}

uint64_t VMC2SetMinUpcomingPresentationTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 280));
  v5 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 432) = v5;
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 280));
  return vmc2RecalculateUpcomingImageTimes(a1);
}

uint64_t vmc2ResetTroubleMonitorTimers(uint64_t result)
{
  _BYTE *v1;

  if (*(_BYTE *)(result + 626))
  {
    v1 = (_BYTE *)result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 632));
    v1[640] = 0;
    v1[656] = 0;
    v1[672] = 0;
    v1[688] = 0;
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t VMC2WaitUntilPrerolled(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  FigSemaphoreWaitRelative();
  return 0;
}

uint64_t VMC2Reset(uint64_t a1, int a2)
{
  uint64_t v5;

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 280));
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 416) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(v5 + 16);
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 730) = 0;
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 280));
  if (a2)
    vmc2InvokeOutputCallback_FlushOutput(a1);
  return 0;
}

uint64_t vmc2InvokeOutputCallback_FlushOutput(uint64_t a1)
{
  void (*v2)(_QWORD);

  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(a1 + 249))
  {
    v2 = *(void (**)(_QWORD))(a1 + 208);
    if (v2)
      v2(*(_QWORD *)(a1 + 152));
  }
  else
  {
    FigSignalErrorAt();
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t VMC2PretendOutputIsLow(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 440) = 1;
  return 0;
}

uint64_t VMC2RequestDecodeForPreroll(uint64_t a1, const void *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  vmc2PostCompletedDecodeForPrerollIfPreviouslyRequestedAndMaybeRecordNewRequest(a1, 1, a2);
  v4 = *(_QWORD *)(a1 + 264);
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v5)
    v5(v4);
  return 0;
}

void vmc2PostCompletedDecodeForPrerollIfPreviouslyRequestedAndMaybeRecordNewRequest(uint64_t a1, char a2, const void *a3)
{
  int v6;
  void *v7;
  CFTypeRef v8;
  CFDictionaryRef v9;
  void *values;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 704));
  v6 = *(unsigned __int8 *)(a1 + 712);
  v7 = *(void **)(a1 + 720);
  values = v7;
  *(_BYTE *)(a1 + 712) = a2;
  if (a3)
    v8 = CFRetain(a3);
  else
    v8 = 0;
  *(_QWORD *)(a1 + 720) = v8;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 704));
  if (v6)
  {
    if (v7)
      v9 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kVideoMediaConverter2NotificationParameter_RequestID, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    else
      v9 = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    v7 = values;
    if (values)
      goto LABEL_11;
  }
  else
  {
    v9 = 0;
    if (v7)
LABEL_11:
      CFRelease(v7);
  }
  if (v9)
    CFRelease(v9);
}

uint64_t VMC2CopyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  const __CFArray *v6;
  int Count;
  CFIndex v8;
  const void *ValueAtIndex;
  const void *v10;
  CFTypeRef v11;
  const void *v12;
  const void *v13;
  const void *propertyValueOut;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 30, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
  if (*(int *)(a1 + 1092) >= 1)
  {
    v6 = *(const __CFArray **)(a1 + 600);
    if (v6)
    {
      Count = CFArrayGetCount(v6);
      v8 = *(int *)(a1 + 1092);
      if ((int)v8 < Count)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 600), v8);
        CFDictionarySetValue(Mutable, CFSTR("WorstQualityOfServiceTier"), ValueAtIndex);
      }
    }
  }
  v10 = *(const void **)(a1 + 64);
  if (v10 && (v11 = CFRetain(v10)) != 0)
  {
    v12 = v11;
    propertyValueOut = 0;
    VTSessionCopyProperty(v11, (CFStringRef)*MEMORY[0x1E0CED3D0], v4, &propertyValueOut);
    if (propertyValueOut
      && (CFDictionarySetValue(Mutable, CFSTR("UsingHardwareAcceleratedVideoDecoder"), propertyValueOut),
          (v13 = propertyValueOut) != 0)
      || (CFDictionarySetValue(Mutable, CFSTR("UsingHardwareAcceleratedVideoDecoder"), (const void *)*MEMORY[0x1E0C9AE50]), (v13 = propertyValueOut) != 0))
    {
      CFRelease(v13);
      propertyValueOut = 0;
    }
    VTSessionCopyProperty(v12, (CFStringRef)*MEMORY[0x1E0CED3D8], v4, &propertyValueOut);
    if (propertyValueOut)
    {
      CFDictionarySetValue(Mutable, CFSTR("UsingSandboxedVideoDecoder"), propertyValueOut);
      if (propertyValueOut)
        CFRelease(propertyValueOut);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
    *a2 = Mutable;
    CFRelease(v12);
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
    *a2 = Mutable;
  }
  return 0;
}

uint64_t VMC2CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t v4;
  CFTypeRef *v9;
  int v10;
  CFTypeRef v11;
  const void *v13;
  CFTypeRef *v14;
  int v15;
  const __CFArray *v16;
  const void *ValueAtIndex;
  CFMutableDictionaryRef Mutable;
  CMTime v19;

  v4 = 4294954473;
  if (a2 && a4)
  {
    if (CFEqual(CFSTR("ObeyEmptyMediaMarkers"), a2))
    {
      v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v10 = *(unsigned __int8 *)(a1 + 728);
LABEL_7:
      if (!v10)
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      v11 = *v9;
LABEL_10:
      v11 = CFRetain(v11);
LABEL_11:
      v4 = 0;
      *a4 = (CFDictionaryRef)v11;
      return v4;
    }
    if (CFEqual(CFSTR("RenderEmptyMedia"), a2))
    {
      v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v10 = *(unsigned __int8 *)(a1 + 729);
      goto LABEL_7;
    }
    if (CFEqual(CFSTR("OutputPixelBufferPool"), a2))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
      v13 = *(const void **)(a1 + 64);
      if (v13)
        v4 = VTSessionCopyProperty(v13, (CFStringRef)*MEMORY[0x1E0CED360], a3, a4);
      else
        v4 = 0;
LABEL_20:
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
      return v4;
    }
    if (CFEqual(CFSTR("FieldMode"), a2))
    {
      v11 = *(CFTypeRef *)(a1 + 736);
      if (!v11)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (CFEqual(CFSTR("AllowVideoQualityOfServiceAdjustments"), a2))
    {
      v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v15 = *(unsigned __int8 *)(a1 + 624);
    }
    else
    {
      if (CFEqual(CFSTR("DecoderUsage"), a2))
      {
        v11 = *(CFTypeRef *)(a1 + 744);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (CFEqual(CFSTR("DecoderPriority"), a2))
      {
        v11 = *(CFTypeRef *)(a1 + 752);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (CFEqual(CFSTR("QualityOfServiceTier"), a2))
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
        v16 = *(const __CFArray **)(a1 + 600);
        if (v16)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v16, *(int *)(a1 + 608));
          if (ValueAtIndex)
            ValueAtIndex = CFRetain(ValueAtIndex);
          v4 = 0;
          *a4 = (CFDictionaryRef)ValueAtIndex;
        }
        else
        {
          v4 = 4294954470;
        }
        goto LABEL_20;
      }
      if (CFEqual(CFSTR("DecoderThreadCount"), a2))
      {
        v11 = *(CFTypeRef *)(a1 + 760);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (CFEqual(CFSTR("EndPresentationTimeForDecodedSamples"), a2))
      {
        MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 280));
        v19 = *(CMTime *)(a1 + 368);
        *a4 = CMTimeCopyAsDictionary(&v19, a3);
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 280));
        return 0;
      }
      if (CFEqual(CFSTR("ForceFullPowerDecode"), a2))
      {
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        v10 = *(unsigned __int8 *)(a1 + 861);
        goto LABEL_7;
      }
      if (CFEqual(CFSTR("EnableIOFenceDecode"), a2))
      {
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        v10 = *(unsigned __int8 *)(a1 + 862);
        goto LABEL_7;
      }
      if (CFEqual(CFSTR("PropagatePerFrameHDRDisplayMetadata"), a2))
      {
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        v10 = *(unsigned __int8 *)(a1 + 863);
        goto LABEL_7;
      }
      if (CFEqual(CFSTR("DisplayLayerSize"), a2))
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetCGSize();
        v4 = 0;
        *a4 = Mutable;
        return v4;
      }
      if (CFEqual(CFSTR("EnhancementFilterOptions"), a2))
      {
        v11 = *(CFTypeRef *)(a1 + 896);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (CFEqual(CFSTR("ColorPrimaries"), a2))
      {
        v11 = *(CFTypeRef *)(a1 + 1000);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (CFEqual(CFSTR("TransferFunction"), a2))
      {
        v11 = *(CFTypeRef *)(a1 + 1008);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (CFEqual(CFSTR("YCbCrMatrix"), a2))
      {
        v11 = *(CFTypeRef *)(a1 + 1016);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (CFEqual(CFSTR("PreserveSyncFrames"), a2))
      {
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        v10 = *(unsigned __int8 *)(a1 + 731);
        goto LABEL_7;
      }
      if (CFEqual(CFSTR("PlaybackSessionID"), a2))
      {
        v11 = *(CFTypeRef *)(a1 + 1024);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (CFEqual(CFSTR("HDRCrossTalker"), a2))
      {
        v11 = *(CFTypeRef *)(a1 + 1408);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (!CFEqual(CFSTR("IsRunning"), a2))
      {
        if (!CFEqual(CFSTR("CollectionRules"), a2))
          return 4294954470;
        v11 = *(CFTypeRef *)(a1 + 1072);
        if (!v11)
          goto LABEL_11;
        goto LABEL_10;
      }
      v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v15 = *(unsigned __int8 *)(a1 + 288);
    }
    if (!v15)
      v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v11 = *v14;
    if (!*v14)
      goto LABEL_11;
    goto LABEL_10;
  }
  return v4;
}

uint64_t VMC2SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  const void *v4;
  CFTypeID TypeID;
  Boolean Value;
  CFTypeID v9;
  Boolean v10;
  CFTypeID v11;
  uint64_t v12;
  const void *v13;
  const __CFString **v14;
  CFTypeID v15;
  uint64_t v16;
  const __CFString *v17;
  const void *v18;
  uint64_t v19;
  CFTypeID v20;
  const void *v21;
  CFTypeID v22;
  int v23;
  CFTypeID v24;
  const void *v25;
  CFTypeID v26;
  const void *v27;
  CFTypeID v28;
  const void *v29;
  CFTypeID v30;
  uint64_t *v31;
  CFTypeID v32;
  int v33;
  CFNumberRef v34;
  CFNumberRef v35;
  const void *v36;
  CFTypeID v37;
  Boolean v38;
  CFTypeID v39;
  int v40;
  CFTypeID v41;
  int v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t);
  CFTypeID v45;
  CFTypeID v46;
  const void *v47;
  int v48;
  CFTypeID v49;
  const void *v50;
  const void *v51;
  CFStringRef *v52;
  const void *v53;
  CFTypeID v54;
  const void *v55;
  CFTypeID v56;
  const void *v57;
  CFTypeID v58;
  Boolean v59;
  CFTypeID v60;
  const void *v61;
  CFTypeID v62;
  const void *v63;
  CFTypeID v64;
  const void *v65;
  FourCharCode MediaSubType;
  CFTypeID v67;
  CFTypeID v68;
  const void *v69;
  int valuePtr;

  if (!a2)
    return 4294954473;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  v4 = a3;
  if (CFEqual(CFSTR("ObeyEmptyMediaMarkers"), a2))
  {
    if (!v4)
      return FigSignalErrorAt();
    TypeID = CFBooleanGetTypeID();
    if (TypeID != CFGetTypeID(v4))
      return FigSignalErrorAt();
    Value = CFBooleanGetValue((CFBooleanRef)v4);
    v4 = 0;
    *(_BYTE *)(a1 + 728) = Value;
    return (uint64_t)v4;
  }
  if (CFEqual(CFSTR("RenderEmptyMedia"), a2))
  {
    if (!v4)
      return FigSignalErrorAt();
    v9 = CFBooleanGetTypeID();
    if (v9 != CFGetTypeID(v4))
      return FigSignalErrorAt();
    v10 = CFBooleanGetValue((CFBooleanRef)v4);
    v4 = 0;
    *(_BYTE *)(a1 + 729) = v10;
    return (uint64_t)v4;
  }
  if (CFEqual(CFSTR("ClientPID"), a2))
  {
    if (!v4)
      return FigSignalErrorAt();
    v11 = CFNumberGetTypeID();
    if (v11 != CFGetTypeID(v4))
      return FigSignalErrorAt();
    CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, (void *)(a1 + 840));
    v12 = *(_QWORD *)(a1 + 264);
    if (v12)
      FigActivitySchedulerSetProperty(v12, (uint64_t)CFSTR("ClientPID"), (uint64_t)v4);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
    v13 = *(const void **)(a1 + 64);
    if (!v13)
      goto LABEL_30;
    v14 = (const __CFString **)MEMORY[0x1E0CED2E8];
    goto LABEL_28;
  }
  if (CFEqual(CFSTR("ThrottleForBackground"), a2))
  {
    if (!v4)
      return FigSignalErrorAt();
    v15 = CFBooleanGetTypeID();
    if (v15 != CFGetTypeID(v4))
      return FigSignalErrorAt();
    *(_BYTE *)(a1 + 856) = CFBooleanGetValue((CFBooleanRef)v4);
    v16 = *(_QWORD *)(a1 + 264);
    if (v16)
      FigActivitySchedulerSetProperty(v16, (uint64_t)CFSTR("ThrottleForBackground"), (uint64_t)v4);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
    v13 = *(const void **)(a1 + 64);
    if (!v13)
      goto LABEL_30;
    v14 = (const __CFString **)MEMORY[0x1E0CED3B0];
    goto LABEL_28;
  }
  if (CFEqual(CFSTR("FieldMode"), a2))
  {
    if (v4)
    {
      v20 = CFStringGetTypeID();
      if (v20 != CFGetTypeID(v4))
        return FigSignalErrorAt();
    }
    if (FigCFEqual())
      return 0;
    v21 = *(const void **)(a1 + 736);
    *(_QWORD *)(a1 + 736) = v4;
    if (v4)
      CFRetain(v4);
    if (v21)
      CFRelease(v21);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
    v13 = *(const void **)(a1 + 64);
    if (!v13)
      goto LABEL_30;
    v17 = (const __CFString *)*MEMORY[0x1E0CED310];
    v18 = *(const void **)(a1 + 736);
    goto LABEL_29;
  }
  if (!CFEqual(CFSTR("AllowVideoQualityOfServiceAdjustments"), a2))
  {
    if (CFEqual(CFSTR("DecoderUsage"), a2))
    {
      if (!v4)
        return FigSignalErrorAt();
      v24 = CFNumberGetTypeID();
      if (v24 != CFGetTypeID(v4))
        return FigSignalErrorAt();
      if (FigCFEqual())
        return 0;
      v25 = *(const void **)(a1 + 744);
      *(_QWORD *)(a1 + 744) = v4;
      CFRetain(v4);
      if (v25)
        CFRelease(v25);
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
      v13 = *(const void **)(a1 + 64);
      if (!v13)
        goto LABEL_30;
      v17 = (const __CFString *)*MEMORY[0x1E0CED3C8];
      v18 = *(const void **)(a1 + 744);
      goto LABEL_29;
    }
    if (CFEqual(CFSTR("DecoderPriority"), a2))
    {
      if (!v4)
        return FigSignalErrorAt();
      v26 = CFNumberGetTypeID();
      if (v26 != CFGetTypeID(v4))
        return FigSignalErrorAt();
      if (FigCFEqual())
        return 0;
      v27 = *(const void **)(a1 + 752);
      *(_QWORD *)(a1 + 752) = v4;
      CFRetain(v4);
      if (v27)
        CFRelease(v27);
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
      v13 = *(const void **)(a1 + 64);
      if (!v13)
        goto LABEL_30;
      v17 = (const __CFString *)*MEMORY[0x1E0CED378];
      v18 = *(const void **)(a1 + 752);
      goto LABEL_29;
    }
    if (CFEqual(CFSTR("DecoderThreadCount"), a2))
    {
      if (!v4)
        return FigSignalErrorAt();
      v28 = CFNumberGetTypeID();
      if (v28 != CFGetTypeID(v4))
        return FigSignalErrorAt();
      if (FigCFEqual())
        return 0;
      v29 = *(const void **)(a1 + 760);
      *(_QWORD *)(a1 + 760) = v4;
      CFRetain(v4);
      if (v29)
        CFRelease(v29);
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
      v13 = *(const void **)(a1 + 64);
      if (!v13)
        goto LABEL_30;
      v17 = (const __CFString *)*MEMORY[0x1E0CED3A8];
      v18 = *(const void **)(a1 + 760);
      goto LABEL_29;
    }
    if (CFEqual(CFSTR("MaxAgeForOutputPixelBufferPool"), a2))
    {
      if (v4)
      {
        v30 = CFNumberGetTypeID();
        if (v30 != CFGetTypeID(v4))
          return FigSignalErrorAt();
        v31 = (uint64_t *)(a1 + 72);
        MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
        vmc2PreallocatePixelBuffers(a1);
      }
      else
      {
        v31 = (uint64_t *)(a1 + 72);
        MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
        v4 = *(const void **)(a1 + 992);
      }
      v36 = *(const void **)(a1 + 64);
      if (v36 && v4)
        VTSessionSetProperty(v36, (CFStringRef)*MEMORY[0x1E0CED340], v4);
      v19 = *v31;
      goto LABEL_31;
    }
    if (CFEqual(CFSTR("VideoDecoderIsSecondary"), a2))
    {
      if (!v4)
        return FigSignalErrorAt();
      v32 = CFBooleanGetTypeID();
      if (v32 != CFGetTypeID(v4))
        return FigSignalErrorAt();
      if ((const void *)*MEMORY[0x1E0C9AE50] == v4)
        v33 = 34;
      else
        v33 = 3;
      valuePtr = v33;
      v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      if (!v34)
        return FigSignalErrorAt();
      v35 = v34;
      v4 = (const void *)FigActivitySchedulerSetProperty(*(_QWORD *)(a1 + 264), (uint64_t)CFSTR("ThreadPriority"), (uint64_t)v34);
      if (!(_DWORD)v4)
      {
        v43 = *(_QWORD *)(a1 + 264);
        v44 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v44)
        {
          if (v44(v43))
            VTSessionSetProperty(*(VTSessionRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CED318], v35);
        }
      }
      CFRelease(v35);
      return (uint64_t)v4;
    }
    if (CFEqual(CFSTR("ForceFullPowerDecode"), a2))
    {
      if (!v4)
        return FigSignalErrorAt();
      v37 = CFGetTypeID(v4);
      if (v37 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v38 = CFBooleanGetValue((CFBooleanRef)v4);
      v4 = 0;
      *(_BYTE *)(a1 + 861) = v38;
      return (uint64_t)v4;
    }
    if (CFEqual(CFSTR("PropagatePerFrameHDRDisplayMetadata"), a2))
    {
      if (!v4)
        return FigSignalErrorAt();
      v39 = CFGetTypeID(v4);
      if (v39 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v40 = CFBooleanGetValue((CFBooleanRef)v4);
      if (*(unsigned __int8 *)(a1 + 863) == v40)
        return 0;
      *(_BYTE *)(a1 + 863) = v40;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
      v13 = *(const void **)(a1 + 64);
      if (!v13)
        goto LABEL_30;
      v14 = (const __CFString **)MEMORY[0x1E0CED380];
      goto LABEL_28;
    }
    if (CFEqual(CFSTR("EnableIOFenceDecode"), a2))
    {
      if (!v4)
        return FigSignalErrorAt();
      v41 = CFGetTypeID(v4);
      if (v41 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v42 = CFBooleanGetValue((CFBooleanRef)v4);
      if (*(unsigned __int8 *)(a1 + 862) == v42)
        return 0;
      *(_BYTE *)(a1 + 862) = v42;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
      v13 = *(const void **)(a1 + 64);
      if (!v13)
        goto LABEL_30;
      v14 = (const __CFString **)MEMORY[0x1E0CED2F8];
LABEL_28:
      v17 = *v14;
      v18 = v4;
LABEL_29:
      VTSessionSetProperty(v13, v17, v18);
LABEL_30:
      v19 = *(_QWORD *)(a1 + 72);
LABEL_31:
      MEMORY[0x19402EF04](v19);
      return 0;
    }
    if (CFEqual(CFSTR("DisplayLayerSize"), a2))
    {
      if (!v4)
        return FigSignalErrorAt();
      v45 = CFGetTypeID(v4);
      if (v45 != CFDictionaryGetTypeID())
        return FigSignalErrorAt();
      FigCFDictionaryGetCGSizeIfPresent();
      return 0;
    }
    if (!CFEqual(CFSTR("EnhancementFilterOptions"), a2))
    {
      if (CFEqual(CFSTR("ColorPrimaries"), a2))
      {
        if (!v4)
          return FigSignalErrorAt();
        v49 = CFGetTypeID(v4);
        if (v49 != CFStringGetTypeID())
          return FigSignalErrorAt();
        v50 = *(const void **)(a1 + 1000);
        *(_QWORD *)(a1 + 1000) = v4;
        CFRetain(v4);
        if (v50)
          CFRelease(v50);
        v51 = *(const void **)(a1 + 64);
        if (!v51)
          return 0;
        v52 = (CFStringRef *)MEMORY[0x1E0CED2F0];
      }
      else if (CFEqual(CFSTR("TransferFunction"), a2))
      {
        if (!v4)
          return FigSignalErrorAt();
        v54 = CFGetTypeID(v4);
        if (v54 != CFStringGetTypeID())
          return FigSignalErrorAt();
        v55 = *(const void **)(a1 + 1008);
        *(_QWORD *)(a1 + 1008) = v4;
        CFRetain(v4);
        if (v55)
          CFRelease(v55);
        v51 = *(const void **)(a1 + 64);
        if (!v51)
          return 0;
        v52 = (CFStringRef *)MEMORY[0x1E0CED3C0];
      }
      else if (CFEqual(CFSTR("YCbCrMatrix"), a2))
      {
        if (!v4)
          return FigSignalErrorAt();
        v56 = CFGetTypeID(v4);
        if (v56 != CFStringGetTypeID())
          return FigSignalErrorAt();
        v57 = *(const void **)(a1 + 1016);
        *(_QWORD *)(a1 + 1016) = v4;
        CFRetain(v4);
        if (v57)
          CFRelease(v57);
        v51 = *(const void **)(a1 + 64);
        if (!v51)
          return 0;
        v52 = (CFStringRef *)MEMORY[0x1E0CED3E8];
      }
      else
      {
        if (CFEqual(CFSTR("PreserveSyncFrames"), a2))
        {
          if (!v4)
            return FigSignalErrorAt();
          v58 = CFGetTypeID(v4);
          if (v58 != CFBooleanGetTypeID())
            return FigSignalErrorAt();
          v59 = CFBooleanGetValue((CFBooleanRef)v4);
          v4 = 0;
          *(_BYTE *)(a1 + 731) = v59;
          return (uint64_t)v4;
        }
        if (!CFEqual(CFSTR("PlaybackSessionID"), a2))
        {
          if (CFEqual(CFSTR("HDRCrossTalker"), a2))
          {
            if (!v4)
              return FigSignalErrorAt();
            v62 = CFGetTypeID(v4);
            if (v62 != FigCrossTalkerGetTypeID())
              return FigSignalErrorAt();
            v63 = *(const void **)(a1 + 1408);
            *(_QWORD *)(a1 + 1408) = v4;
            CFRetain(v4);
            if (v63)
              CFRelease(v63);
            vmc2BroadcastHDRStatus(a1);
            return 0;
          }
          if (!CFEqual(CFSTR("AV1FilmGrainMode"), a2))
          {
            if (CFEqual(CFSTR("PriorImageQueueGauge"), a2))
            {
              if (!v4)
                return FigSignalErrorAt();
              v67 = CFGetTypeID(v4);
              if (v67 != FigImageQueueGaugeGetTypeID())
                return FigSignalErrorAt();
              MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 1480));
              if (*(_QWORD *)(a1 + 1488))
              {
                v4 = (const void *)FigSignalErrorAt();
              }
              else
              {
                *(_QWORD *)(a1 + 1488) = CFRetain(v4);
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                v4 = 0;
              }
              MEMORY[0x19402EF04](*(_QWORD *)(a1 + 1480));
              vmc2OutputOccupancyChanged(a1);
              return (uint64_t)v4;
            }
            if (!CFEqual(CFSTR("CollectionRules"), a2))
              return 4294954470;
            if (!v4)
              return (uint64_t)v4;
            v68 = CFGetTypeID(v4);
            if (v68 == FigSampleAttachmentCollectionRulesGetTypeID())
            {
              v69 = *(const void **)(a1 + 1072);
              *(_QWORD *)(a1 + 1072) = v4;
              CFRetain(v4);
              if (v69)
                CFRelease(v69);
            }
            return 0;
          }
          if (!v4)
            return FigSignalErrorAt();
          v64 = CFGetTypeID(v4);
          if (v64 != CFStringGetTypeID()
            || !CFEqual((CFTypeRef)*MEMORY[0x1E0CECE68], v4)
            && !CFEqual((CFTypeRef)*MEMORY[0x1E0CECE70], v4)
            && !CFEqual((CFTypeRef)*MEMORY[0x1E0CECE78], v4))
          {
            return FigSignalErrorAt();
          }
          v65 = *(const void **)(a1 + 768);
          *(_QWORD *)(a1 + 768) = v4;
          CFRetain(v4);
          if (v65)
            CFRelease(v65);
          if (!*(_QWORD *)(a1 + 64))
            return 0;
          MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 32));
          if (MediaSubType != 1902212657 && MediaSubType != 1635135537)
            return 0;
          MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
          v13 = *(const void **)(a1 + 64);
          v17 = (const __CFString *)*MEMORY[0x1E0CED2D0];
          v18 = *(const void **)(a1 + 768);
          goto LABEL_29;
        }
        if (!v4)
          return FigSignalErrorAt();
        v60 = CFGetTypeID(v4);
        if (v60 != CFStringGetTypeID())
          return FigSignalErrorAt();
        v61 = *(const void **)(a1 + 1024);
        *(_QWORD *)(a1 + 1024) = v4;
        CFRetain(v4);
        if (v61)
          CFRelease(v61);
        v51 = *(const void **)(a1 + 64);
        if (!v51)
          return 0;
        v52 = (CFStringRef *)MEMORY[0x1E0CED370];
      }
      VTSessionSetProperty(v51, *v52, v4);
      return 0;
    }
    if (v4)
    {
      v46 = CFGetTypeID(v4);
      if (v46 != CFDictionaryGetTypeID())
        return FigSignalErrorAt();
      v47 = *(const void **)(a1 + 896);
      *(_QWORD *)(a1 + 896) = v4;
      CFRetain(v4);
      if (v47)
        CFRelease(v47);
      *(_QWORD *)(a1 + 904) = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 896), CFSTR("UseFilter"));
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 896), CFSTR("ScaleMode"));
      if (FigCFEqual())
      {
        v4 = 0;
        v48 = 1;
LABEL_140:
        *(_DWORD *)(a1 + 912) = v48;
        return (uint64_t)v4;
      }
      v4 = 0;
      if (FigCFEqual())
      {
        v48 = 2;
        goto LABEL_140;
      }
    }
    else
    {
      v53 = *(const void **)(a1 + 896);
      if (v53)
      {
        CFRelease(v53);
        *(_QWORD *)(a1 + 896) = 0;
      }
      v4 = 0;
      *(_QWORD *)(a1 + 904) = 0;
    }
    *(_DWORD *)(a1 + 912) = 0;
    return (uint64_t)v4;
  }
  v22 = CFBooleanGetTypeID();
  if (v22 == CFGetTypeID(v4))
  {
    v23 = *MEMORY[0x1E0C9AE50] == (_QWORD)v4;
    if (*(unsigned __int8 *)(a1 + 624) != v23)
    {
      *(_BYTE *)(a1 + 624) = v23;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
      vmc2WhileHoldingTimebaseMutexUpdateQualityOfServiceCapability(a1);
    }
    return 0;
  }
  return FigSignalErrorAt();
}

void vmc2WhileHoldingTimebaseMutexUpdateQualityOfServiceCapability(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  v2 = *(_QWORD *)(a1 + 584);
  if (v2)
  {
    v2 = *(_QWORD *)(a1 + 600);
    if (v2)
      LOBYTE(v2) = *(_BYTE *)(a1 + 624) != 0;
  }
  *(_BYTE *)(a1 + 625) = v2;
  JUMPOUT(0x19402EF04);
}

double vmc2ResetQualityOfService(uint64_t a1)
{
  const __CFArray *v2;
  const __CFString *v3;
  CFNumberRef v4;
  const void *v5;
  const __CFDictionary *ValueAtIndex;
  double result;
  uint64_t valuePtr;

  v2 = *(const __CFArray **)(a1 + 600);
  if (v2 && *(_DWORD *)(a1 + 608))
  {
    CFArrayGetValueAtIndex(v2, 0);
    v3 = (const __CFString *)*MEMORY[0x1E0CED430];
    if (FigCFEqual())
    {
      valuePtr = 0x3FF0000000000000;
      v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
      VTSessionSetProperty(*(VTSessionRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CED358], (CFTypeRef)*MEMORY[0x1E0CED418]);
      VTSessionSetProperty(*(VTSessionRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CED390], v4);
      if (v4)
        CFRelease(v4);
    }
    else
    {
      v5 = *(const void **)(a1 + 64);
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 600), 0);
      VTSessionSetProperties(v5, ValueAtIndex);
    }
    VTSessionSetProperty(*(VTSessionRef *)(a1 + 64), v3, 0);
    if (*(int *)(a1 + 608) >= 1)
      ++*(_DWORD *)(a1 + 1088);
    result = NAN;
    *(_QWORD *)(a1 + 608) = 0x7FFFFFFF00000000;
  }
  return result;
}

void vmc2PreallocatePixelBuffers(uint64_t a1)
{
  signed int MediaSubType;
  BOOL v3;
  unsigned __int16 v4;
  int v5;
  size_t value;
  const __CFAllocator *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CVPixelBufferRef *v11;
  CVPixelBufferRef *v12;
  size_t v13;
  CVPixelBufferRef *v14;
  uint64_t v15;
  __CVBuffer *v16;
  CMTime v17;
  CMTime v18;
  CFTypeRef propertyValueOut;
  CVPixelBufferPoolRef pixelBufferPool;

  propertyValueOut = 0;
  pixelBufferPool = 0;
  if ((*(_DWORD *)(a1 + 484) & 0x1D) == 1)
  {
    MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 32));
    if (MediaSubType <= 1685481572)
    {
      v3 = MediaSubType == 1667524657 || MediaSubType == 1684895096;
      v5 = 1685481521;
    }
    else
    {
      if (MediaSubType > 1902405732)
      {
        v3 = MediaSubType == 1902405733;
        v4 = 28024;
      }
      else
      {
        v3 = MediaSubType == 1685481573;
        v4 = 26673;
      }
      v5 = v4 | 0x71640000;
    }
    if (!v3 && MediaSubType != v5)
    {
      v17 = *(CMTime *)(a1 + 472);
      CMTimeConvertScale(&v18, &v17, 30, kCMTimeRoundingMethod_RoundAwayFromZero);
      value = v18.value;
      if (v18.value >= 1)
      {
        v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        VTSessionCopyProperty(*(VTSessionRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CED3D8], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &propertyValueOut);
        v9 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
        v10 = propertyValueOut;
        if (propertyValueOut)
          CFRelease(propertyValueOut);
        if (v9 != v10)
        {
          VTSessionCopyProperty(*(VTSessionRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CED360], v8, &pixelBufferPool);
          if (pixelBufferPool)
          {
            v11 = (CVPixelBufferRef *)malloc_type_calloc(value, 8uLL, 0x2004093837F09uLL);
            if (v11)
            {
              v12 = v11;
              MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
              v13 = value;
              v14 = v12;
              do
              {
                CVPixelBufferPoolCreatePixelBuffer(0, pixelBufferPool, v14++);
                --v13;
              }
              while (v13);
              v15 = 0;
              do
              {
                v16 = v12[v15];
                if (v16)
                  CVPixelBufferRelease(v16);
                ++v15;
              }
              while (value != v15);
              free(v12);
              CVPixelBufferPoolRelease(pixelBufferPool);
              MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
            }
            else
            {
              CVPixelBufferPoolRelease(pixelBufferPool);
            }
          }
        }
      }
    }
  }
}

uint64_t vmc2BroadcastHDRStatus(uint64_t a1)
{
  uint64_t result;
  int VideoDynamicRange;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __CFString *, uint64_t);
  uint64_t v7;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (*(_QWORD *)(a1 + 1408))
    {
      VideoDynamicRange = CMVideoFormatDescriptionGetVideoDynamicRange();
      FigBytePumpGetFigBaseObject(*(_QWORD *)(a1 + 1408));
      v5 = v4;
      result = CMBaseObjectGetVTable();
      v6 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
      if (v6)
      {
        if (VideoDynamicRange <= 1)
          v7 = *MEMORY[0x1E0C9AE40];
        else
          v7 = *MEMORY[0x1E0C9AE50];
        return v6(v5, CFSTR("HDRVideoPlaybackActive"), v7);
      }
    }
  }
  return result;
}

uint64_t vmc2HandleSessionTerminatedNotification(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 857))
    *(_BYTE *)(a2 + 1034) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t vmc2UpdateSessionMinAndMaxOutputPTS(uint64_t result)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  int32_t v4;
  CMTime v5;
  CMTime time1;
  CMTime v7;
  CMTime v8;

  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v7 = v8;
  if (*(_QWORD *)(result + 64))
  {
    v1 = result;
    MEMORY[0x19402EA0C](*(_QWORD *)(result + 280));
    v2 = *(_DWORD *)(v1 + 316);
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(v1 + 280));
      VTDecompressionSessionGetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded();
      MEMORY[0x19402EA0C](*(_QWORD *)(v1 + 280));
      v3 = v2 == *(_DWORD *)(v1 + 316);
      v2 = *(_DWORD *)(v1 + 316);
    }
    while (!v3);
    time1 = *(CMTime *)(v1 + 320);
    v5 = v8;
    v4 = CMTimeCompare(&time1, &v5);
    if (v4)
      *(CMTime *)(v1 + 320) = v8;
    time1 = *(CMTime *)(v1 + 344);
    v5 = v7;
    if (CMTimeCompare(&time1, &v5))
    {
      *(CMTime *)(v1 + 344) = v7;
    }
    else if (!v4)
    {
LABEL_11:
      ++*(_DWORD *)(v1 + 316);
      return MEMORY[0x19402EA24](*(_QWORD *)(v1 + 280));
    }
    vmc2RecalculateUpcomingImageTimes(v1);
    goto LABEL_11;
  }
  return result;
}

CFTypeRef vmc2CopyFormattingDesc(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return CFRetain(CFSTR("[VMC2 (invalidated)]"));
  else
    return CFRetain(CFSTR("[VMC2]"));
}

__CFString *vmc2CopyDebugDesc(_BYTE *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  const char *v5;
  CFAllocatorRef v6;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  if (a1[16])
    v5 = " (invalidated)";
  else
    v5 = "";
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("VMC2 %p retainCount: %d%s allocator: %p"), a1, v4, v5, v6);
  return Mutable;
}

void vmc2OutputMultiImageFrame(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, uint64_t a5, CMTime *a6, uint64_t a7)
{
  __int128 v7;
  uint64_t v8;
  CMTime v9;

  v9 = *a6;
  v7 = *(_OWORD *)a7;
  v8 = *(_QWORD *)(a7 + 16);
  vmc2OutputFrameInternal(a1, a2, a3, a4, 0, a5, &v9, &v7, 0);
}

void vmc2OutputFrameInternal(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, CMTime *a7, __int128 *a8, char a9)
{
  int v14;
  int v15;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  const void *v21;
  _QWORD *v22;
  _QWORD *v23;
  CFTypeRef v24;
  __int128 v25;
  __int128 v26;
  int v27;
  int v28;
  const void *v29;
  _OWORD *v30;
  __int128 v31;
  BOOL v32;
  double v33;
  int v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  int v38;
  int v39;
  const void *v40;
  OpaqueCMTimebase *v41;
  OSType PixelFormatType;
  float Rate;
  char *v44;
  CMTimeEpoch v45;
  void (*v46)(uint64_t, uint64_t, CMTime *, void (*)(char *, __CVBuffer *), char *);
  uint64_t v47;
  int v48;
  double v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, CMTime *, CFTypeRef *);
  uint64_t v52;
  size_t Width;
  size_t Height;
  unint64_t v55;
  double v56;
  int ImageEnhancementFilter;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  __CFDictionary *Mutable;
  CFNumberRef v61;
  NSObject *v62;
  OpaqueCMTimebase *v63;
  uint64_t v64;
  void (*v65)(uint64_t, CFTypeRef, uint64_t);
  CMItemCount Count;
  CMItemCount v67;
  uint64_t i;
  __CVBuffer *CVPixelBufferAtIndex;
  _DWORD *v70;
  int v71;
  int v72;
  double Seconds;
  int *v74;
  int v75;
  int v76;
  uint64_t v77;
  double *v78;
  unsigned int v79;
  int v80;
  BOOL v81;
  int v82;
  int v83;
  uint64_t v84;
  Float64 v85;
  Float64 v86;
  __CFString *v87;
  unsigned int v88;
  double v89;
  double v90;
  int v91;
  int v92;
  const char *v93;
  int v94;
  uint64_t v95;
  int v96;
  double v97;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  NSObject *v103;
  unsigned int v104;
  unsigned int v105;
  CFMutableDictionaryRef v106;
  int v107;
  int v108;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora;
  OSType v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  CFTypeRef v115;
  CFTypeRef v116;
  unsigned int v117;
  OpaqueCMTimebase *v118;
  CFTypeRef v119;
  CFTypeRef value;
  CFTypeRef v121;
  CFTypeRef v122;
  __CFDictionary *theDict;
  const void *v124;
  CMTime time;
  CMTime time2;
  CFTypeRef cf;
  CFTypeRef v128;
  CVPixelBufferRef pixelBufferOut;
  Float64 valuePtr;
  CMTime type;
  CMTime v132;
  CMTime rhs;
  _BYTE v134[14];
  __int16 v135;
  Float64 v136;
  __int16 v137;
  int v138;
  __int16 v139;
  unsigned int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  double v144;
  __int16 v145;
  CFAllocatorRef v146;
  __int16 v147;
  double v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  int v152;
  CMTime lhs;
  void *v154;
  CMTime *p_rhs;
  uint64_t v156;
  CFNumberRef v157;
  __CFDictionary *v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v128 = 0;
  pixelBufferOut = 0;
  cf = 0;
  v117 = a4;
  if ((a4 & 8) != 0)
    v14 = 0;
  else
    v14 = -17694;
  if (a3 == -17694)
    v15 = v14;
  else
    v15 = a3;
  if (a2)
  {
    v18 = *a2;
    v17 = a2[1];
    v124 = (const void *)*((_QWORD *)a2 + 1);
    v119 = (CFTypeRef)*((_QWORD *)a2 + 4);
    value = (CFTypeRef)*((_QWORD *)a2 + 2);
    v121 = (CFTypeRef)*((_QWORD *)a2 + 5);
    v122 = (CFTypeRef)*((_QWORD *)a2 + 3);
    v115 = (CFTypeRef)*((_QWORD *)a2 + 6);
    mach_absolute_time();
    v19 = *((unsigned __int8 *)a2 + 72);
    v116 = (CFTypeRef)*((_QWORD *)a2 + 7);
    free(a2);
  }
  else
  {
    LOBYTE(v18) = 0;
    v17 = 0;
    v124 = 0;
    value = 0;
    v121 = 0;
    v122 = 0;
    v119 = 0;
    v115 = 0;
    v19 = 0;
    v116 = 0;
  }
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (theDict)
    v20 = v19 == 0;
  else
    v20 = 1;
  if (!v20 && *(_BYTE *)(a1 + 731))
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CA26A8], (const void *)*MEMORY[0x1E0C9AE50]);
  v21 = v124;
  if (v124)
  {
    v22 = malloc_type_calloc(1uLL, 0x58uLL, 0x10E0040E756AD93uLL);
    if (v22)
    {
      v23 = v22;
      v22[1] = CFRetain(v124);
      *((_DWORD *)v23 + 4) = v15;
      *((_DWORD *)v23 + 5) = v117;
      v117 &= ~4u;
      v23[3] = CVBufferRetain((CVBufferRef)a5);
      if (a6)
        v24 = CFRetain((CFTypeRef)a6);
      else
        v24 = 0;
      v23[4] = v24;
      v25 = *(_OWORD *)&a7->value;
      v23[7] = a7->epoch;
      *(_OWORD *)(v23 + 5) = v25;
      v26 = *a8;
      v23[10] = *((_QWORD *)a8 + 2);
      *((_OWORD *)v23 + 4) = v26;
      *v23 = *(_QWORD *)(a1 + 800);
      *(_QWORD *)(a1 + 800) = v23;
    }
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 776));
  v27 = *(_DWORD *)(a1 + 792);
  if (v17 != v27)
  {
    a6 = 0;
    a5 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 776));
  if (!v15)
  {
    v28 = v18 & 3;
    if (v28 != 1)
      goto LABEL_30;
    ++*(_DWORD *)(a1 + 1096);
LABEL_29:
    vmc2ResetTroubleMonitorTimers(a1);
    a6 = 0;
    a5 = 0;
    v28 = 1;
    v29 = v119;
    goto LABEL_37;
  }
  lhs = *a7;
  vmc2PostDecodeError(a1);
  v28 = v18 & 3;
  if (v28 == 1)
    goto LABEL_29;
LABEL_30:
  v29 = v119;
  if (!(a5 | a6))
  {
    if (v17 == v27)
    {
      ++*(_DWORD *)(a1 + 1100);
      v30 = (_OWORD *)(a1 + 1448);
      if ((*(_BYTE *)(a1 + 1460) & 1) != 0
        && (*(_OWORD *)&lhs.value = *v30,
            lhs.epoch = *(_QWORD *)(a1 + 1464),
            rhs = *(CMTime *)(a1 + 1420),
            CMTimeAdd(&time2, &lhs, &rhs),
            lhs = *a7,
            CMTimeCompare(&lhs, &time2) < 1))
      {
        v38 = *(_DWORD *)(a1 + 1472) + 1;
        *(_DWORD *)(a1 + 1472) = v38;
        if (v38 == *(_DWORD *)(a1 + 1444))
          ++*(_DWORD *)(a1 + 1104);
      }
      else
      {
        v31 = *(_OWORD *)&a7->value;
        *(_QWORD *)(a1 + 1464) = a7->epoch;
        *v30 = v31;
        *(_DWORD *)(a1 + 1472) = 1;
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 1160));
      ++*(_DWORD *)(a1 + 1340);
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 1160));
      a6 = 0;
      a5 = 0;
    }
    else
    {
      vmc2ResetTroubleMonitorTimers(a1);
      a6 = 0;
      a5 = 0;
      ++*(_DWORD *)(a1 + 1124);
    }
  }
LABEL_37:
  v32 = (a6 | a5) == 0;
  if (!(a6 | a5))
  {
    a6 = 0;
    a5 = 0;
    v33 = 0.0;
    goto LABEL_54;
  }
  v34 = *(_DWORD *)(a1 + 836);
  ++*(_DWORD *)(a1 + 1108);
  v33 = (double)FigHostTimeToNanoseconds() * 0.000000001;
  if (v34 != 1 && v34 != 4)
  {
    v35 = CVBufferCopyAttachment((CVBufferRef)a5, CFSTR("IsDRMSubstitute"), 0);
    v36 = v35;
    v37 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    if (v35)
      CFRelease(v35);
    if (v37 != v36)
    {
      VTDecompressionSessionCopyBlackPixelBuffer(*(VTDecompressionSessionRef *)(a1 + 64), &pixelBufferOut);
      if (a5)
      {
        a5 = (uint64_t)pixelBufferOut;
LABEL_53:
        ++*(_DWORD *)(a1 + 1132);
        goto LABEL_54;
      }
      if (a6)
      {
        if (pixelBufferOut)
        {
          vmcCreateTaggedBufferGroupSubstitutingImageBufferInTaggedBufferGroup(pixelBufferOut, (OpaqueCMTaggedBufferGroup *)a6, &v128);
          a5 = 0;
          a6 = (uint64_t)v128;
          goto LABEL_53;
        }
        a6 = 0;
      }
      a5 = 0;
      goto LABEL_53;
    }
  }
LABEL_54:
  if (!(a5 | a6))
    goto LABEL_195;
  v39 = 4 * (v28 == 3);
  if (v28 == 2)
    v39 = 3;
  v113 = v39;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  v40 = *(const void **)(a1 + 584);
  if (v40)
    v41 = (OpaqueCMTimebase *)CFRetain(v40);
  else
    v41 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  if (!v28)
  {
    type = *a7;
    if (v41)
    {
      Rate = CMTimebaseGetRate(v41);
      if (Rate > 0.0)
      {
        memset(&lhs, 0, sizeof(lhs));
        CMTimebaseGetTime(&lhs, v41);
        rhs = lhs;
        v132 = type;
        if (CMTimeCompare(&rhs, &v132) < 1)
          goto LABEL_61;
LABEL_116:
        ++*(_DWORD *)(a1 + 1120);
        goto LABEL_61;
      }
      if (Rate < 0.0)
      {
        memset(&lhs, 0, sizeof(lhs));
        CMTimebaseGetTime(&lhs, v41);
        rhs = lhs;
        v132 = type;
        if (CMTimeCompare(&rhs, &v132) < 0)
          goto LABEL_116;
      }
    }
  }
LABEL_61:
  if (a5)
  {
    if (value)
      CVBufferSetAttachment((CVBufferRef)a5, CFSTR("SourceRect"), value, kCVAttachmentMode_ShouldPropagate);
    if (v122 && v29)
    {
      CVBufferSetAttachment((CVBufferRef)a5, CFSTR("DestRect"), v122, kCVAttachmentMode_ShouldPropagate);
      CVBufferSetAttachment((CVBufferRef)a5, CFSTR("VirtualDisplaySizeForDestRect"), v29, kCVAttachmentMode_ShouldPropagate);
    }
    if (v121)
      CVBufferSetAttachment((CVBufferRef)a5, CFSTR("SymmetricTransform"), v121, kCVAttachmentMode_ShouldPropagate);
    PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a5);
  }
  else
  {
    PixelFormatType = 32;
  }
  if (!*(_BYTE *)(a1 + 888) && (!*(_BYTE *)(a1 + 889) || PixelFormatType != *(_DWORD *)(a1 + 892)) && !a6)
  {
    if ((v111 = PixelFormatType,
          Width = CVPixelBufferGetWidth((CVPixelBufferRef)a5),
          Height = CVPixelBufferGetHeight((CVPixelBufferRef)a5),
          v55 = Height,
          *(_BYTE *)(a1 + 889) = 0,
          v56 = *(double *)(a1 + 872),
          v56 >= (double)Width)
      && *(double *)(a1 + 880) >= (double)Height
      && *MEMORY[0x1E0C9AE40] != *(_QWORD *)(a1 + 904)
      || *MEMORY[0x1E0C9AE50] == *(_QWORD *)(a1 + 904))
    {
      if (Width != *(_QWORD *)(a1 + 920)
        || Height != *(_QWORD *)(a1 + 928)
        || *(_QWORD *)(a1 + 936) != (unint64_t)v56
        || *(_QWORD *)(a1 + 944) != (unint64_t)*(double *)(a1 + 880))
      {
        vmc2FinishAndDestroyImageEnhancementFilter(a1);
      }
      if (*(_QWORD *)(a1 + 952)
        || (ImageEnhancementFilter = vmc2CreateImageEnhancementFilter(a1, Width, v55), *(_QWORD *)(a1 + 952)))
      {
        mach_absolute_time();
        type.value = a7->value;
        flags = a7->flags;
        type.timescale = a7->timescale;
        epoch = a7->epoch;
        if (!*(_QWORD *)(a1 + 952))
        {
          v71 = FigSignalErrorAt();
          if (!v71)
            goto LABEL_131;
LABEL_227:
          lhs.value = type.value;
          lhs.timescale = type.timescale;
          lhs.flags = flags;
          lhs.epoch = epoch;
          vmc2CopyFrameBaggageForPTS(a1, &lhs, 0, 0, 0);
          v29 = v119;
          if (v71 == -12218)
          {
            *(_BYTE *)(a1 + 889) = 1;
            *(_DWORD *)(a1 + 892) = v111;
          }
          goto LABEL_76;
        }
        v132.value = a7->value;
        v132.timescale = a7->timescale;
        rhs.value = 0;
        *(_QWORD *)&rhs.timescale = &rhs;
        rhs.epoch = 0x2000000000;
        *(_DWORD *)v134 = 0;
        if ((flags & 0x1D) == 1)
        {
          if (*(_QWORD *)(a1 + 960))
          {
LABEL_104:
            Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            lhs.value = v132.value;
            lhs.timescale = v132.timescale;
            lhs.flags = flags;
            lhs.epoch = epoch;
            valuePtr = CMTimeGetSeconds(&lhs);
            v61 = CFNumberCreate(allocator, kCFNumberFloat64Type, &valuePtr);
            FigCFDictionarySetInt32();
            FigCFDictionarySetInt32();
            CFDictionarySetValue(Mutable, CFSTR("OriginalFrame"), (const void *)a5);
            v62 = *(NSObject **)(a1 + 968);
            lhs.value = MEMORY[0x1E0C809B0];
            *(_QWORD *)&lhs.timescale = 0x40000000;
            lhs.epoch = (CMTimeEpoch)__vmc2StoreFrameBaggageForPTS_block_invoke;
            v154 = &unk_1E2F7CD30;
            v157 = v61;
            v158 = Mutable;
            p_rhs = &rhs;
            v156 = a1;
            dispatch_sync(v62, &lhs);
            if (Mutable)
              CFRelease(Mutable);
            if (v61)
              CFRelease(v61);
            goto LABEL_129;
          }
          if (*(_BYTE *)(a1 + 16))
          {
            v70 = v134;
          }
          else
          {
            v106 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            *(_QWORD *)(a1 + 960) = v106;
            if (v106)
              goto LABEL_104;
            v70 = (_DWORD *)(*(_QWORD *)&rhs.timescale + 24);
          }
          *v70 = -12824;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)&rhs.timescale + 24) = FigSignalErrorAt();
        }
LABEL_129:
        v71 = *(_DWORD *)(*(_QWORD *)&rhs.timescale + 24);
        _Block_object_dispose(&rhs, 8);
        if (!v71)
        {
          lhs.value = type.value;
          lhs.timescale = type.timescale;
          lhs.flags = flags;
          lhs.epoch = epoch;
          v72 = VTTemporalFilterSessionProcessFrame();
          if (!v72)
          {
LABEL_131:
            mach_absolute_time();
            v49 = (double)FigHostTimeToNanoseconds() * 0.000000001;
            v48 = 1;
            v29 = v119;
            goto LABEL_81;
          }
          v71 = v72;
        }
        FigSignalErrorAt();
        goto LABEL_227;
      }
      if (ImageEnhancementFilter)
        *(_BYTE *)(a1 + 888) = 1;
    }
  }
LABEL_76:
  if (*(_QWORD *)(a1 + 952))
    vmc2FinishAndDestroyImageEnhancementFilter(a1);
  if (!a5 || !*(_QWORD *)(a1 + 128))
  {
    v50 = (v117 >> 2) & 1;
    if (a5 && (v51 = *(void (**)(uint64_t, uint64_t, CMTime *, CFTypeRef *))(a1 + 112)) != 0)
    {
      v52 = *(_QWORD *)(a1 + 104);
      lhs = *a7;
      v51(v52, a5, &lhs, &cf);
      if (cf)
        a5 = (uint64_t)cf;
      v21 = v124;
    }
    else
    {
      v21 = v124;
      if (!a5)
      {
        if (a6)
        {
          v118 = v41;
          Count = CMTaggedBufferGroupGetCount((CMTaggedBufferGroupRef)a6);
          if (Count < 1)
          {
            a5 = 0;
          }
          else
          {
            v67 = Count;
            for (i = 0; i != v67; ++i)
            {
              CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
              if (!a9 && CVPixelBufferAtIndex)
              {
                lhs = *a7;
                vmcAddPresentationTimeAsAttachment(CVPixelBufferAtIndex);
              }
            }
            a5 = 0;
            v21 = v124;
          }
          v41 = v118;
        }
        else
        {
          a5 = 0;
        }
        goto LABEL_134;
      }
    }
    if (!a9)
    {
      v63 = v41;
      lhs = *a7;
      vmcAddPresentationTimeAsAttachment((__CVBuffer *)a5);
      v64 = *(_QWORD *)(a1 + 1072);
      if (v64)
      {
        v65 = *(void (**)(uint64_t, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v65)
          v65(v64, v116, a5);
      }
      v41 = v63;
    }
LABEL_134:
    lhs = *a7;
    vmc2InvokeOutputCallback_OutputImage(a1, a5, a6, v50, (uint64_t)theDict, (__int128 *)&lhs.value, v113);
    v48 = 0;
    v49 = 0.0;
    goto LABEL_135;
  }
  v44 = (char *)malloc_type_calloc(1uLL, 0x28uLL, 0x10200406E8F4065uLL);
  *(_QWORD *)v44 = CFRetain((CFTypeRef)a1);
  v45 = a7->epoch;
  *(_OWORD *)(v44 + 8) = *(_OWORD *)&a7->value;
  *((_QWORD *)v44 + 3) = v45;
  *((_DWORD *)v44 + 8) = v113;
  v46 = *(void (**)(uint64_t, uint64_t, CMTime *, void (*)(char *, __CVBuffer *), char *))(a1 + 128);
  v47 = *(_QWORD *)(a1 + 104);
  lhs = *a7;
  v46(v47, a5, &lhs, vmc2FinishOutputFrame, v44);
  v48 = 0;
  v49 = 0.0;
LABEL_81:
  v21 = v124;
LABEL_135:
  if (*(_BYTE *)(a1 + 441))
    *(_WORD *)(a1 + 440) = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 1160));
  if (!v32)
  {
    if (a5 || a6 && (a5 = FigTaggedBufferGroupGetCVPixelBufferAtIndex()) != 0)
    {
      *(_DWORD *)(a1 + 1188) = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a5);
      *(_DWORD *)(a1 + 1192) = CVPixelBufferGetWidth((CVPixelBufferRef)a5);
      *(_DWORD *)(a1 + 1196) = CVPixelBufferGetHeight((CVPixelBufferRef)a5);
    }
    ++*(_DWORD *)(a1 + 1336);
    *(double *)(a1 + 1344) = v33 + *(double *)(a1 + 1344);
    *(double *)(a1 + 1352) = fmax(*(double *)(a1 + 1352), v33);
  }
  if (v48)
  {
    ++*(_DWORD *)(a1 + 1360);
    *(double *)(a1 + 1368) = v49 + *(double *)(a1 + 1368);
    *(double *)(a1 + 1376) = fmax(*(double *)(a1 + 1376), v49);
  }
  lhs = *a7;
  Seconds = CMTimeGetSeconds(&lhs);
  v74 = (int *)(a1 + 1200);
  v75 = *(_DWORD *)(a1 + 1200);
  v76 = *(_DWORD *)(a1 + 1204);
  if (v76 + v75 <= 0)
    v77 = -(-(v76 + v75) & 3);
  else
    v77 = (v76 + v75) & 3;
  v78 = (double *)&v74[8 * v77];
  v78[1] = Seconds;
  v78[2] = v33;
  *((_BYTE *)v78 + 32) = v48;
  v78[3] = v49;
  v79 = v76 + 1;
  if (v79 > 4)
  {
    v80 = v75 + 1;
    v81 = -v80 < 0;
    v82 = -v80 & 3;
    v83 = v80 & 3;
    if (!v81)
      v83 = -v82;
    *v74 = v83;
  }
  else
  {
    *(_DWORD *)(a1 + 1204) = v79;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 1160));
  v84 = mach_absolute_time();
  if ((unint64_t)FigHostTimeToNanoseconds() >= 0x165A0BC00)
  {
    *(_QWORD *)(a1 + 1168) = v84;
    if (v41)
    {
      CMTimebaseGetTime(&time, v41);
      v85 = CMTimeGetSeconds(&time);
      v86 = CMTimebaseGetRate(v41);
    }
    else
    {
      v85 = 0.0;
      v86 = 0.0;
    }
    v87 = CFStringCreateMutable(allocator, 0);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 1160));
    v88 = *(_DWORD *)(a1 + 1336);
    v89 = *(double *)(a1 + 1344);
    v114 = *(_DWORD *)(a1 + 1360);
    v90 = *(double *)(a1 + 1368);
    allocatora = *(CFAllocatorRef *)(a1 + 1352);
    v112 = *(_QWORD *)(a1 + 1376);
    v107 = *(_DWORD *)(a1 + 1384);
    v108 = *(_DWORD *)(a1 + 1340);
    *(_OWORD *)(a1 + 1336) = 0u;
    *(_OWORD *)(a1 + 1352) = 0u;
    *(_OWORD *)(a1 + 1368) = 0u;
    *(_QWORD *)(a1 + 1384) = 0;
    v91 = *(_DWORD *)(a1 + 1204);
    v92 = *(_DWORD *)(a1 + 1200);
    if (*(_DWORD *)(a1 + 1180))
      CFStringAppendFormat(v87, 0, CFSTR("CodecType: %c%c%c%c"), HIBYTE(*(_DWORD *)(a1 + 1180)), BYTE2(*(_DWORD *)(a1 + 1180)), BYTE1(*(_DWORD *)(a1 + 1180)), *(_DWORD *)(a1 + 1180));
    if (*(_BYTE *)(a1 + 1184))
    {
      if (*(_BYTE *)(a1 + 1185))
        v93 = "HW";
      else
        v93 = "SW";
      CFStringAppendFormat(v87, 0, CFSTR(" (%s decoder)"), v93);
    }
    if (*(_DWORD *)(a1 + 1188))
      CFStringAppendFormat(v87, 0, CFSTR(", DecodedPixelBuffer: %c%c%c%c, %u x %u\n"), HIBYTE(*(_DWORD *)(a1 + 1188)), BYTE2(*(_DWORD *)(a1 + 1188)), BYTE1(*(_DWORD *)(a1 + 1188)), *(_DWORD *)(a1 + 1188), *(unsigned int *)(a1 + 1192), *(unsigned int *)(a1 + 1196));
    CFStringAppendCString(v87, "Last Decoded Frames [\n", 0x600u);
    if (v91 >= 1)
    {
      do
      {
        if (v92 <= 0)
          v94 = -(-v92 & 3);
        else
          v94 = v92 & 3;
        v95 = a1 + 32 * v94;
        v96 = *(unsigned __int8 *)(v95 + 1232);
        v97 = *(double *)(v95 + 1224);
        CFStringAppendFormat(v87, 0, CFSTR("{PTS: %.3f s, decode: %.3f ms"), *(_QWORD *)(v95 + 1208), *(double *)(v95 + 1216) * 1000.0);
        if (v96)
          CFStringAppendFormat(v87, 0, CFSTR(", enhancement blocked: %.3f ms"), v97 * 1000.0);
        CFStringAppend(v87, CFSTR("},\n"));
        ++v92;
        --v91;
      }
      while (v91);
    }
    CFStringAppendCString(v87, "]\n", 0x600u);
    *(_QWORD *)(a1 + 1328) = 0;
    *(_OWORD *)(a1 + 1296) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1264) = 0u;
    *(_OWORD *)(a1 + 1280) = 0u;
    *(_OWORD *)(a1 + 1232) = 0u;
    *(_OWORD *)(a1 + 1248) = 0u;
    *(_OWORD *)v74 = 0u;
    *(_OWORD *)(a1 + 1216) = 0u;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 1160));
    if (v88)
      v89 = v89 / (double)v88;
    v29 = v119;
    if (v114)
      v90 = v90 / (double)v114;
    if (dword_1EE29F468)
    {
      LODWORD(v132.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v99 = v132.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
        v100 = v99;
      else
        v100 = v99 & 0xFFFFFFFE;
      if (v100)
      {
        v101 = *(_DWORD *)(a1 + 1176);
        v102 = *(_DWORD *)(a1 + 608);
        LODWORD(rhs.value) = 136318210;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"vmc2GMFigLogDumpStats";
        LOWORD(rhs.flags) = 2048;
        *(_QWORD *)((char *)&rhs.flags + 2) = a1;
        HIWORD(rhs.epoch) = 1024;
        *(_DWORD *)v134 = v101;
        *(_WORD *)&v134[4] = 2048;
        *(Float64 *)&v134[6] = v85;
        v135 = 2048;
        v136 = v86;
        v137 = 1024;
        v138 = v107;
        v139 = 1024;
        v140 = v88;
        v141 = 1024;
        v142 = v108;
        v143 = 2048;
        v144 = v89;
        v145 = 2048;
        v146 = allocatora;
        v147 = 2048;
        v148 = v90;
        v149 = 2048;
        v150 = v112;
        v151 = 1024;
        v152 = v102;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (dword_1EE29F468)
      {
        LODWORD(v132.value) = 0;
        LOBYTE(type.value) = 0;
        v103 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v104 = v132.value;
        if (os_log_type_enabled(v103, type.value))
          v105 = v104;
        else
          v105 = v104 & 0xFFFFFFFE;
        if (v105)
        {
          LODWORD(rhs.value) = 136315650;
          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"vmc2GMFigLogDumpStats";
          LOWORD(rhs.flags) = 2048;
          *(_QWORD *)((char *)&rhs.flags + 2) = a1;
          HIWORD(rhs.epoch) = 2114;
          *(_QWORD *)v134 = v87;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    v21 = v124;
    if (v87)
      CFRelease(v87);
  }
  if (v41)
    CFRelease(v41);
LABEL_195:
  if (cf)
    CFRelease(cf);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (v128)
    CFRelease(v128);
  if (v21)
    CFRelease(v21);
  if (value)
    CFRelease(value);
  if (v122)
    CFRelease(v122);
  if (v121)
    CFRelease(v121);
  if (v29)
    CFRelease(v29);
  if (v115)
    CFRelease(v115);
  if (theDict)
    CFRelease(theDict);
  if (v116)
    CFRelease(v116);
}

void vmc2PostDecodeError(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  const opaqueCMFormatDescription *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetCMTime();
  v3 = *(const opaqueCMFormatDescription **)(a1 + 32);
  if (v3)
  {
    CMFormatDescriptionGetMediaSubType(v3);
    FigCFDictionarySetInt32();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
    CFRelease(Mutable);
  ++*(_DWORD *)(a1 + 1136);
}

void vmcCreateTaggedBufferGroupSubstitutingImageBufferInTaggedBufferGroup(const void *a1, OpaqueCMTaggedBufferGroup *a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  const CFArrayCallBacks *v7;
  __CFArray *Mutable;
  CFMutableArrayRef v9;
  __CFArray *v10;
  BOOL v11;
  CMItemCount Count;
  CMItemCount v13;
  CFIndex v14;
  CMTagCollectionRef TagCollectionAtIndex;
  CFTypeRef cf;

  cf = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v9 = CFArrayCreateMutable(v6, 0, v7);
  v10 = v9;
  if (Mutable)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
    goto LABEL_18;
  Count = CMTaggedBufferGroupGetCount(a2);
  if (Count >= 1)
  {
    v13 = Count;
    v14 = 0;
    while (1)
    {
      TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(a2, v14);
      if (!TagCollectionAtIndex)
        break;
      CFArrayAppendValue(Mutable, TagCollectionAtIndex);
      CFArrayAppendValue(v10, a1);
      if (v13 == ++v14)
        goto LABEL_9;
    }
LABEL_18:
    FigSignalErrorAt();
    if (!Mutable)
      goto LABEL_13;
LABEL_12:
    CFRelease(Mutable);
    goto LABEL_13;
  }
LABEL_9:
  if (!MEMORY[0x19402F0D8](v6, Mutable, v10, &cf))
  {
    *a3 = cf;
    cf = 0;
  }
  if (Mutable)
    goto LABEL_12;
LABEL_13:
  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
}

uint64_t vmc2CreateImageEnhancementFilter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  const __CFAllocator *v16;
  const CFDictionaryKeyCallBacks *v17;
  const CFDictionaryValueCallBacks *v18;
  __CFDictionary *Mutable;
  __CFDictionary *v20;
  VTSessionRef *v21;
  uint64_t v22;
  CFDictionaryRef v23;
  uint64_t v24;
  const __CFString *v25;
  CFDictionaryRef propertyValue;
  CGSize v27;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  v8 = a1 + 872;
  v9 = 2 * a2;
  v10 = *(double *)(a1 + 872) < (double)(2 * a2) || *(double *)(a1 + 880) < (double)(2 * a3);
  v11 = *(_DWORD *)(a1 + 912);
  if (v11 == 2)
    v10 = 0;
  if (v11 == 1)
    v10 = 1;
  if (v10)
    v9 = a2;
  v12 = a3 << !v10;
  v13 = *MEMORY[0x1E0C9AE50];
  v14 = *(_QWORD *)(a1 + 904);
  if (*MEMORY[0x1E0C9AE50] == v14)
  {
    v15 = 0;
  }
  else
  {
    v3 = 0;
    if (a2 > 0x500 || a3 > 0x2D0)
      return v3;
    v15 = CFSTR("Weak");
    if (a2 == 1280 && a3 >= 0x1F5)
    {
      v15 = CFSTR("StaticWeak");
      if (v9 == 1280 && v12 == a3)
        return 0;
    }
  }
  v25 = v15;
  v27.width = (double)(unint64_t)v9;
  v27.height = (double)v12;
  propertyValue = CGSizeCreateDictionaryRepresentation(v27);
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDBA8], CFSTR("com.apple.videotoolbox.temporalfilter.SRSEnhancementFilter"));
  v20 = CFDictionaryCreateMutable(v16, 0, v17, v18);
  FigCFDictionarySetInt32();
  CFDictionarySetValue(v20, (const void *)*MEMORY[0x1E0CEDBA0], CFSTR("SRS"));
  v21 = (VTSessionRef *)(a1 + 952);
  v22 = VTTemporalFilterSessionCreate();
  if ((_DWORD)v22)
  {
    v3 = v22;
    v23 = propertyValue;
LABEL_40:
    vmc2FinishAndDestroyImageEnhancementFilter(a1);
    if (!v23)
      goto LABEL_33;
    goto LABEL_32;
  }
  *(_QWORD *)(a1 + 920) = a2;
  *(_QWORD *)(a1 + 928) = a3;
  *(uint64x2_t *)(v8 + 64) = vcvtq_u64_f64(*(float64x2_t *)v8);
  v23 = propertyValue;
  if (propertyValue
    && (v24 = VTSessionSetProperty(*v21, (CFStringRef)*MEMORY[0x1E0CEDB80], propertyValue), (_DWORD)v24)
    || (v24 = VTSessionSetProperty(*v21, (CFStringRef)*MEMORY[0x1E0CEDB68], (CFTypeRef)*MEMORY[0x1E0C9AE40]), (_DWORD)v24))
  {
    v3 = v24;
LABEL_38:
    FigSignalErrorAt();
    goto LABEL_40;
  }
  if (v13 == v14)
  {
    v3 = 0;
  }
  else
  {
    v3 = VTSessionSetProperty(*v21, (CFStringRef)*MEMORY[0x1E0CEDB70], v25);
    if ((_DWORD)v3)
      goto LABEL_38;
  }
  if (propertyValue)
LABEL_32:
    CFRelease(v23);
LABEL_33:
  if (Mutable)
    CFRelease(Mutable);
  if (v20)
    CFRelease(v20);
  return v3;
}

void vmc2FinishOutputFrame(char *a1, __CVBuffer *a2)
{
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = *(_BYTE **)a1;
  if (!v3[16])
  {
    v7 = *(_OWORD *)(a1 + 8);
    v8 = *((_QWORD *)a1 + 3);
    vmcAddPresentationTimeAsAttachment(a2);
    v5 = *(_QWORD *)a1;
    v6 = *((unsigned int *)a1 + 8);
    v7 = *(_OWORD *)(a1 + 8);
    v8 = *((_QWORD *)a1 + 3);
    vmc2InvokeOutputCallback_OutputImage(v5, (uint64_t)a2, 0, 1, 0, &v7, v6);
    v3 = *(_BYTE **)a1;
  }
  CFRelease(v3);
  free(a1);
}

void vmcAddPresentationTimeAsAttachment(__CVBuffer *a1)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)CMTimeCopyAsCVBufferTimeDictionary();
  if (v2)
  {
    v3 = v2;
    CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8C58], v2, kCVAttachmentMode_ShouldPropagate);
    CFRelease(v3);
  }
}

uint64_t vmc2InvokeOutputCallback_OutputImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t);
  uint64_t v15;
  __int128 v17;
  uint64_t v18;

  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(a1 + 249))
  {
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t))(a1 + 200);
    if (v14)
    {
      v15 = *(_QWORD *)(a1 + 152);
      v17 = *a6;
      v18 = *((_QWORD *)a6 + 2);
      v14(v15, a2, a3, a4, a5, &v17, a7);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return FigReadWriteLockUnlockForRead();
}

void vmcTemporalFilterOutput(uint64_t a1, int a2, uint64_t a3, CMTime *a4, __CVBuffer *a5)
{
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  CMTime v14;
  CFTypeRef cf;
  unsigned int v16;
  unsigned int v17;

  v17 = 0;
  v16 = 0;
  cf = 0;
  if (!*(_BYTE *)(a1 + 16))
  {
    v14 = *a4;
    vmc2CopyFrameBaggageForPTS(a1, &v14, &v16, &v17, (const __CFDictionary **)&cf);
    if (a2 || !a5)
    {
      if (!cf)
      {
        FigSignalErrorAt();
LABEL_9:
        if (cf)
          CFRelease(cf);
        return;
      }
      v13 = (v16 >> 2) & 1;
      v14 = *a4;
      vmcAddPresentationTimeAsAttachment((__CVBuffer *)cf);
      v11 = cf;
      v9 = v17;
      v14 = *a4;
      v10 = a1;
      v12 = v13;
    }
    else
    {
      v14 = *a4;
      vmcAddPresentationTimeAsAttachment(a5);
      v9 = v17;
      v14 = *a4;
      v10 = a1;
      v11 = a5;
      v12 = 1;
    }
    vmc2InvokeOutputCallback_OutputImage(v10, (uint64_t)v11, 0, v12, 0, (__int128 *)&v14.value, v9);
    goto LABEL_9;
  }
}

void vmc2CopyFrameBaggageForPTS(uint64_t a1, CMTime *a2, _DWORD *a3, _DWORD *a4, const __CFDictionary **a5)
{
  CFNumberRef v9;
  NSObject *v10;
  const __CFDictionary *Value;
  const void *v12;
  int v13;
  _QWORD v14[8];
  CMTime time;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Float64 valuePtr;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;

  v22 = 0;
  v23 = &v22;
  v24 = 0x2000000000;
  v25 = 0;
  valuePtr = 0.0;
  v21 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  if (*(_QWORD *)(a1 + 960) && (a2->flags & 0x1D) == 1)
  {
    time = *a2;
    valuePtr = CMTimeGetSeconds(&time);
    v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, &valuePtr);
    v10 = *(NSObject **)(a1 + 968);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 0x40000000;
    v14[2] = __vmc2CopyFrameBaggageForPTS_block_invoke;
    v14[3] = &unk_1E2F7CD08;
    v14[6] = a1;
    v14[7] = v9;
    v14[4] = &v16;
    v14[5] = &v22;
    dispatch_sync(v10, v14);
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    Value = (const __CFDictionary *)v17[3];
    if (Value)
      Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("OriginalFrame"));
    if (a3)
      goto LABEL_6;
  }
  else
  {
    v13 = FigSignalErrorAt();
    v9 = 0;
    Value = 0;
    *((_DWORD *)v23 + 6) = v13;
    if (a3)
LABEL_6:
      *a3 = v21;
  }
  if (a4)
    *a4 = HIDWORD(v21);
  if (a5)
  {
    if (Value)
      Value = (const __CFDictionary *)CFRetain(Value);
    *a5 = Value;
  }
  if (v9)
    CFRelease(v9);
  v12 = (const void *)v17[3];
  if (v12)
    CFRelease(v12);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v22, 8);
}

void __vmc2CopyFrameBaggageForPTS_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;
  const void *v3;

  v2 = *(const __CFDictionary **)(*(_QWORD *)(a1 + 48) + 960);
  if (v2)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue(v2, *(const void **)(a1 + 56));
  v3 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v3)
  {
    CFRetain(v3);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 48) + 960), *(const void **)(a1 + 56));
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = FigSignalErrorAt();
  }
}

void __vmc2StoreFrameBaggageForPTS_block_invoke(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 960))
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 40) + 960), *(const void **)(a1 + 48), *(const void **)(a1 + 56));
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12824;
}

void vmc2UpdateTroubleMonitor2(uint64_t a1, int a2, int a3, int a4, int a5)
{
  const void *v10;
  void *v11;
  char v12;
  uint64_t UpTimeNanoseconds;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  v10 = *(const void **)(a1 + 584);
  if (!v10)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
    v11 = 0;
    goto LABEL_6;
  }
  v11 = (void *)CFRetain(v10);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  if (!v11)
  {
LABEL_6:
    v12 = 1;
    goto LABEL_7;
  }
  if (CMTimebaseGetRate((CMTimebaseRef)v11) == 0.0)
  {
    vmc2ResetTroubleMonitorTimers(a1);
    vmc2ResetQualityOfService(a1);
LABEL_47:
    CFRelease(v11);
    return;
  }
  v12 = 0;
LABEL_7:
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 632));
  if (!a2 || !a3)
  {
    *(_BYTE *)(a1 + 640) = 0;
LABEL_21:
    *(_BYTE *)(a1 + 672) = 0;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 640))
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a5 && UpTimeNanoseconds >= *(_QWORD *)(a1 + 648))
    {
      ++*(_DWORD *)(a1 + 1080);
      if (*(_BYTE *)(a1 + 625))
        vmc2AdjustQualityOfService(a1, 1);
    }
    else if (*(_BYTE *)(a1 + 640))
    {
      goto LABEL_18;
    }
  }
  *(_BYTE *)(a1 + 640) = 1;
  *(_QWORD *)(a1 + 648) = FigGetUpTimeNanoseconds() + 500000000;
LABEL_18:
  if (*(_BYTE *)(a1 + 672))
  {
    if (FigGetUpTimeNanoseconds() >= *(_QWORD *)(a1 + 680))
    {
      *(_BYTE *)(a1 + 656) = 0;
      goto LABEL_21;
    }
  }
  else if (*(_BYTE *)(a1 + 656))
  {
    *(_BYTE *)(a1 + 672) = 1;
    *(_QWORD *)(a1 + 680) = FigGetUpTimeNanoseconds() + 250000000;
  }
LABEL_22:
  if (*(_BYTE *)(a1 + 656) && a5 && !*(_BYTE *)(a1 + 640) && FigGetUpTimeNanoseconds() >= *(_QWORD *)(a1 + 664))
  {
    if (*(_BYTE *)(a1 + 625))
      vmc2AdjustQualityOfService(a1, -1);
    *(_BYTE *)(a1 + 656) = 0;
  }
  if (a4 && !*(_BYTE *)(a1 + 656) && *(int *)(a1 + 608) >= 1)
  {
    *(_BYTE *)(a1 + 656) = 1;
    *(_QWORD *)(a1 + 664) = FigGetUpTimeNanoseconds() + 2000000000;
  }
  if (a5 && *(_BYTE *)(a1 + 688) && FigGetUpTimeNanoseconds() >= *(_QWORD *)(a1 + 696))
  {
    if (*(_BYTE *)(a1 + 625))
      vmc2AdjustQualityOfService(a1, -1);
    *(_BYTE *)(a1 + 688) = 0;
  }
  if (a2)
  {
    *(_BYTE *)(a1 + 688) = 0;
  }
  else if (!*(_BYTE *)(a1 + 640) && !*(_BYTE *)(a1 + 656) && !*(_BYTE *)(a1 + 688) && *(int *)(a1 + 608) >= 1)
  {
    *(_BYTE *)(a1 + 688) = 1;
    *(_QWORD *)(a1 + 696) = FigGetUpTimeNanoseconds() + 750000000;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 632));
  if ((v12 & 1) == 0)
    goto LABEL_47;
}

void vmc2WhileHoldingSessionVTMutexUpdateTroubleMonitor(unsigned __int8 *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _BOOL4 v5;
  int v6;

  v2 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 16))
  {
    v3 = a1[8];
    MEMORY[0x19402EEEC](*(_QWORD *)(v2 + 72));
    v4 = *(unsigned __int8 *)(v2 + 592);
    if (vmc2GetWaterLevelState(v2))
      v5 = *(_BYTE *)(v2 + 440) != 0;
    else
      v5 = 1;
    v6 = vmc2GetWaterLevelState(v2) == 2 && *(_BYTE *)(v2 + 440) == 0;
    vmc2UpdateTroubleMonitor2(v2, v4, v5, v6, v3);
    MEMORY[0x19402EF04](*(_QWORD *)(v2 + 72));
  }
  CFRelease((CFTypeRef)v2);
  free(a1);
}

void vmc2AdjustQualityOfService(uint64_t a1, int a2)
{
  int v3;
  int v4;
  const __CFArray *v5;
  int v7;
  int v8;
  CFIndex Count;
  _DWORD *v10;
  const __CFString *v11;
  int v12;
  int v13;
  CFIndex v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *v16;
  CFNumberRef v17;
  int v18;
  const void *v19;
  const __CFDictionary *ValueAtIndex;
  const void *v21;
  const __CFDictionary *v22;
  int v23;
  CFNumberRef v24;
  _QWORD v25[18];

  v25[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0)
    v3 = a2;
  else
    v3 = -a2;
  if (v3 == 1)
    v4 = a2;
  else
    v4 = (a2 >> 31) | 1;
  v5 = *(const __CFArray **)(a1 + 600);
  if (v5)
  {
    v7 = *(_DWORD *)(a1 + 608);
    v8 = *(_DWORD *)(a1 + 616) <= *(_DWORD *)(a1 + 620) ? *(_DWORD *)(a1 + 620) : *(_DWORD *)(a1 + 616);
    if ((a2 & 0x80000000) == 0 || v7)
    {
      Count = CFArrayGetCount(v5);
      if (a2 < 0 || Count != v7 + 1)
      {
        v10 = (_DWORD *)(a1 + 612);
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 600), *(int *)(a1 + 608));
        v11 = (const __CFString *)*MEMORY[0x1E0CED430];
        v12 = FigCFEqual();
        if (v8 && v12)
        {
          v13 = *v10 - v4;
          *v10 = v13;
          if (v13 >= v8)
          {
            *(_DWORD *)(a1 + 608) += v4;
            *(_DWORD *)(a1 + 612) = v8;
            v13 = v8;
          }
          if (v13 < 0)
            *(_QWORD *)(a1 + 608) = (*(_DWORD *)(a1 + 608) + v4);
        }
        else
        {
          v14 = *(int *)(a1 + 608) + (uint64_t)v4;
          *(_DWORD *)(a1 + 608) = v14;
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 600), v14);
          if (FigCFEqual())
          {
            if (v8)
            {
              if (a2 < 0)
                *v10 = 0;
              else
                *v10 = v8 - 1;
            }
            else
            {
              *(_DWORD *)(a1 + 608) += v4;
            }
          }
        }
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 600), *(int *)(a1 + 608));
        if (FigCFEqual())
        {
          v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(a1 + 612));
          VTSessionSetProperty(*(VTSessionRef *)(a1 + 64), v11, v17);
          if (v17)
            CFRelease(v17);
          if (a2 < 0)
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 600), v7);
            if (!FigCFEqual())
            {
              v18 = *(_DWORD *)(a1 + 608);
              if (v18 < 1)
              {
                v25[0] = 0x3FF0000000000000;
                v24 = CFNumberCreate(v16, kCFNumberDoubleType, v25);
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CED358], (CFTypeRef)*MEMORY[0x1E0CED418]);
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CED390], v24);
                if (v24)
                  CFRelease(v24);
              }
              else
              {
                v19 = *(const void **)(a1 + 64);
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 600), (v18 - 1));
                VTSessionSetProperties(v19, ValueAtIndex);
              }
            }
LABEL_38:
            ++*(_DWORD *)(a1 + 1088);
LABEL_39:
            v23 = *(_DWORD *)(a1 + 608);
            if (v23 > *(_DWORD *)(a1 + 1092))
              *(_DWORD *)(a1 + 1092) = v23;
            return;
          }
        }
        else
        {
          v21 = *(const void **)(a1 + 64);
          v22 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 600), *(int *)(a1 + 608));
          VTSessionSetProperties(v21, v22);
          if (a2 < 0)
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 600), v7);
            if (FigCFEqual())
              VTSessionSetProperty(*(VTSessionRef *)(a1 + 64), v11, 0);
            goto LABEL_38;
          }
        }
        ++*(_DWORD *)(a1 + 1084);
        goto LABEL_39;
      }
    }
  }
}

uint64_t vmc2GetWaterLevelState(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void (*v4)(CMTime *__return_ptr, _QWORD);
  uint64_t v5;
  unsigned int (*v6)(uint64_t);
  BOOL v7;
  uint64_t v8;
  void (*v9)(CMTime *__return_ptr, uint64_t);
  char v10;
  CMTime v12;
  CMTime rhs;
  CMTime lhs;
  CMTime v15;

  v2 = *(_DWORD *)(a1 + 524);
  if (*(_DWORD *)(a1 + 528) != v2)
  {
    FigMemoryBarrier();
    v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    FigReadWriteLockLockForRead();
    if (*(_BYTE *)(a1 + 249))
    {
      v4 = *(void (**)(CMTime *__return_ptr, _QWORD))(a1 + 168);
      if (v4)
      {
        memset(&v15, 0, sizeof(v15));
        v4(&v15, *(_QWORD *)(a1 + 152));
        v12 = v15;
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 1480));
      v5 = *(_QWORD *)(a1 + 1488);
      if (v5)
      {
        v6 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v6)
          v7 = v6(v5) == 0;
        else
          v7 = 0;
        if ((v12.flags & 0x1D) == 1)
        {
          memset(&v15, 0, sizeof(v15));
          v8 = *(_QWORD *)(a1 + 1488);
          v9 = *(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v9)
            v9(&v15, v8);
          else
            v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          lhs = v12;
          rhs = v15;
          CMTimeAdd(&v12, &lhs, &rhs);
        }
      }
      else
      {
        v7 = 0;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 1480));
      v10 = !v7;
    }
    else
    {
      FigSignalErrorAt();
      v10 = 1;
    }
    FigReadWriteLockUnlockForRead();
    v15 = v12;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 536));
    *(CMTime *)(a1 + 544) = v15;
    if ((v10 & 1) != 0)
    {
      lhs = v15;
      rhs = *(CMTime *)(a1 + 496);
      if (CMTimeCompare(&lhs, &rhs) < 0)
      {
        v3 = 0;
        *(_DWORD *)(a1 + 568) = 0;
        goto LABEL_27;
      }
      lhs = v15;
      rhs = *(CMTime *)(a1 + 472);
      if (CMTimeCompare(&lhs, &rhs) < 0)
      {
        v3 = *(unsigned int *)(a1 + 568);
        if ((_DWORD)v3 == 2)
        {
          v3 = 3;
        }
        else
        {
          if ((_DWORD)v3)
            goto LABEL_27;
          v3 = 1;
        }
        *(_DWORD *)(a1 + 568) = v3;
        goto LABEL_27;
      }
    }
    v3 = 2;
    *(_DWORD *)(a1 + 568) = 2;
    *(_BYTE *)(a1 + 572) = 0;
LABEL_27:
    *(_DWORD *)(a1 + 528) = v2;
    goto LABEL_28;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 536));
  v3 = *(unsigned int *)(a1 + 568);
LABEL_28:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 536));
  return v3;
}

uint64_t vmc2RecalculateUpcomingImageTimes2(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 444) = 0;
  if (!*(_BYTE *)(result + 16))
  {
    v1 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 296));
    vmc2RecalculateUpcomingImageTimes(v1);
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t vmcGetCompressedFrameOutputMode(opaqueCMSampleBuffer *a1)
{
  const __CFArray *SampleAttachmentsArray;
  uint64_t ValueAtIndex;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  CFTypeID TypeID;
  const __CFBoolean *v7;
  const __CFBoolean *v8;
  CFTypeID v9;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
    {
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      if (CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, (const void *)*MEMORY[0x1E0CA4E20]))
        ValueAtIndex = 4;
      else
        ValueAtIndex = 0;
    }
  }
  else
  {
    ValueAtIndex = 0;
  }
  v4 = (const __CFBoolean *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2678], 0);
  if (v4)
  {
    v5 = v4;
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      if (CFBooleanGetValue(v5))
      {
        v7 = (const __CFBoolean *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2648], 0);
        if (v7)
        {
          v8 = v7;
          v9 = CFBooleanGetTypeID();
          if (v9 == CFGetTypeID(v8))
          {
            if (CFBooleanGetValue(v8))
              return 2;
            else
              return ValueAtIndex;
          }
        }
      }
    }
  }
  return ValueAtIndex;
}

void vmc2UpdateCPECryptor(uint64_t *a1)
{
  uint64_t v1;
  uint64_t Decryptor;
  const void *v3;
  const void *v4;
  BOOL v5;

  v1 = *a1;
  Decryptor = FigSampleBufferGetDecryptor();
  v3 = *(const void **)(v1 + 808);
  if ((const void *)Decryptor == v3)
    return;
  v4 = (const void *)Decryptor;
  if (Decryptor)
    v5 = v3 == 0;
  else
    v5 = 0;
  if (v5)
  {
    dispatch_resume(*(dispatch_object_t *)(v1 + 824));
    *(_BYTE *)(v1 + 832) = 1;
    v3 = *(const void **)(v1 + 808);
LABEL_12:
    *(_QWORD *)(v1 + 808) = v4;
    CFRetain(v4);
    if (!v3)
      return;
LABEL_13:
    CFRelease(v3);
    return;
  }
  if (Decryptor)
    goto LABEL_12;
  if (v3)
  {
    dispatch_suspend(*(dispatch_object_t *)(v1 + 824));
    *(_BYTE *)(v1 + 832) = 0;
    v3 = *(const void **)(v1 + 808);
  }
  *(_QWORD *)(v1 + 808) = 0;
  if (v3)
    goto LABEL_13;
}

_DWORD *vmcCreateSourceFrameInfo(int a1, opaqueCMSampleBuffer *a2, int a3)
{
  _DWORD *v6;
  _DWORD *v7;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  const __CFArray *v17;

  v6 = malloc_type_calloc(0x50uLL, 1uLL, 0xB185D5C3uLL);
  v7 = v6;
  if (v6)
  {
    *v6 = a1;
    v6[1] = a3;
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
    if (SampleAttachmentsArray
      && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) != 0)
    {
      Value = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA4E20]);
      v11 = Value;
      if (Value)
        CFRetain(Value);
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)v7 + 1) = v11;
    v12 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA4E78], 0);
    *((_QWORD *)v7 + 2) = v12;
    if (v12)
      CFRetain(v12);
    v13 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA4E30], 0);
    *((_QWORD *)v7 + 3) = v13;
    if (v13)
      CFRetain(v13);
    v14 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA4E98], 0);
    *((_QWORD *)v7 + 4) = v14;
    if (v14)
      CFRetain(v14);
    v15 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA4E90], 0);
    *((_QWORD *)v7 + 5) = v15;
    if (v15)
      CFRetain(v15);
    v16 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2640], 0);
    *((_QWORD *)v7 + 6) = v16;
    if (v16)
      CFRetain(v16);
    *((_QWORD *)v7 + 8) = mach_absolute_time();
    v17 = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
    if (v17)
    {
      v17 = (const __CFArray *)CFArrayGetValueAtIndex(v17, 0);
      if (v17)
        v17 = (const __CFArray *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E0CA2620]);
    }
    *((_BYTE *)v7 + 72) = *MEMORY[0x1E0C9AE50] != (_QWORD)v17;
  }
  return v7;
}

void vmcCreateAttachmentsDictionaryForSourceFrameInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef v7;
  const void *v8;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    if (a2)
    {
      v4 = *(_QWORD *)(a1 + 1072);
      if (v4
        && (v6 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32)) != 0)
      {
        v6(v4, a3, &cf);
        v7 = cf;
        v8 = *(const void **)(a2 + 56);
        *(_QWORD *)(a2 + 56) = cf;
        if (v7)
          CFRetain(v7);
      }
      else
      {
        v8 = *(const void **)(a2 + 56);
        *(_QWORD *)(a2 + 56) = 0;
      }
      if (v8)
        CFRelease(v8);
    }
    else
    {
      FigSignalErrorAt();
    }
    if (cf)
      CFRelease(cf);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t vmc2RebuildDecompressionSession(uint64_t a1)
{
  OpaqueVTDecompressionSession *v2;
  uint64_t v3;

  v2 = *(OpaqueVTDecompressionSession **)(a1 + 64);
  if (v2)
    VTDecompressionSessionWaitForAsynchronousFrames(v2);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
  vmc2RemoveDecompressionSession(a1);
  v3 = vmc2BuildDecompressionSession(a1);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
  return v3;
}

CFTypeRef __vmc2DequeueAndDecodeFrame_block_invoke(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 952);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

_QWORD *__vmc2FinishAndDestroyImageEnhancementFilter_block_invoke(_QWORD *result)
{
  *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = *(_QWORD *)(result[6] + 952);
  *(_QWORD *)(result[6] + 952) = 0;
  *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24) = *(_QWORD *)(result[6] + 960);
  *(_QWORD *)(result[6] + 960) = 0;
  return result;
}

uint64_t FigVisualContextCreateBasic(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  Float64 v7;
  NSObject *v8;
  dispatch_source_t v9;
  void *v10;
  uint64_t v11;
  CMTime v13;
  double v14;
  CFTypeRef cf;
  char __str[100];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 0.0;
  cf = 0;
  v4 = lvcCreateCommon(a1, 0, 0, &cf);
  if (!(_DWORD)v4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 128) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 144) = *(_QWORD *)(v6 + 16);
    if (!FigCFDictionaryGetDoubleIfPresent())
    {
LABEL_12:
      v11 = 0;
      *a3 = cf;
      return v11;
    }
    v7 = v14;
    if (v14 < 0.005)
    {
      v14 = 0.005;
      v7 = 0.005;
    }
    CMTimeMakeWithSeconds(&v13, v7, 1000);
    *(CMTime *)(DerivedStorage + 128) = v13;
    snprintf(__str, 0x64uLL, "com.apple.coremedia.localvisualcontext.autoprune.%p", cf);
    if (sCreateSharedAutoPruneDispatchQueueOnce != -1)
      dispatch_once_f(&sCreateSharedAutoPruneDispatchQueueOnce, 0, (dispatch_function_t)lvcCreateSharedAutoPruneDispatchQueue);
    if (sLVCSharedAutoPruneDispatchQueue)
    {
      v8 = dispatch_queue_create_with_target_V2(__str, 0, (dispatch_queue_t)sLVCSharedAutoPruneDispatchQueue);
      *(_QWORD *)(DerivedStorage + 152) = v8;
      if (v8)
      {
        v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v8);
        *(_QWORD *)(DerivedStorage + 160) = v9;
        if (v9)
        {
          v10 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
          if (v10)
          {
            dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 160), v10);
            *(_QWORD *)(DerivedStorage + 184) = voucher_copy();
            dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 160), (dispatch_function_t)lvcAutoPrune);
            dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(DerivedStorage + 160), (dispatch_function_t)lvcCancelAutoPruneTimer);
            dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 160));
            goto LABEL_12;
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
      *(_QWORD *)(DerivedStorage + 152) = 0;
    }
    v4 = FigSignalErrorAt();
  }
  v11 = v4;
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t lvcCreateCommon(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD);
  uint64_t v11;

  if (a4)
  {
    FigVisualContextGetClassID();
    v7 = CMDerivedObjectCreate();
    if (!(_DWORD)v7)
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      v9 = FigReadWriteLockCreate();
      DerivedStorage[1] = v9;
      if (v9)
      {
        DerivedStorage[21] = a2;
        DerivedStorage[22] = a3;
        if (!a3
          || (v10 = *(uint64_t (**)(uint64_t, _QWORD))(a3 + 8)) == 0
          || (v7 = v10(a2, 0), !(_DWORD)v7))
        {
          v11 = 0;
          *a4 = 0;
          return v11;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v7;
  }
  return FigSignalErrorAt();
}

void lvcAutoPrune(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  OpaqueCMTimebase *v6;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v9;
  void *v10;
  CMTime v11;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = MEMORY[0x1E0CA2E18];
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  if (a1)
  {
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      v3 = (const void *)v2;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)DerivedStorage)
      {
        v5 = DerivedStorage;
        os_retain(*(void **)(DerivedStorage + 184));
        voucher_adopt();
        FigReadWriteLockLockForRead();
        v6 = *(OpaqueCMTimebase **)(v5 + 120);
        if (v6)
        {
          CMTimebaseGetTime(&v11, v6);
          value = v11.value;
          flags = v11.flags;
          timescale = v11.timescale;
          epoch = v11.epoch;
        }
        else
        {
          flags = *(_DWORD *)(v1 + 12);
          epoch = *(_QWORD *)(v1 + 16);
        }
        FigReadWriteLockUnlockForRead();
        if ((flags & 0x1D) == 1)
        {
          v9 = *MEMORY[0x1E0C9AE00];
          v11.value = value;
          v11.timescale = timescale;
          v11.flags = flags;
          v11.epoch = epoch;
          lvcCopyImageForTime((uint64_t)v3, v9, (__int128 *)&v11.value, 5, 0, 0, 0);
        }
        v10 = (void *)voucher_adopt();
        os_release(v10);
      }
      CFRelease(v3);
    }
  }
}

void lvcCancelAutoPruneTimer(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t lvcInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD, uint64_t);
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    v4 = *(_QWORD *)(DerivedStorage + 176);
    if (v4)
    {
      v5 = *(void (**)(_QWORD, uint64_t))(v4 + 16);
      if (v5)
        v5(*(_QWORD *)(DerivedStorage + 168), a1);
    }
    if (*(_QWORD *)(v3 + 120))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    v6 = *(NSObject **)(v3 + 160);
    if (v6)
      dispatch_source_cancel(v6);
    v7 = *(NSObject **)(v3 + 152);
    if (v7)
    {
      dispatch_sync_f(v7, 0, (dispatch_function_t)lvcNoop);
      dispatch_release(*(dispatch_object_t *)(v3 + 152));
      *(_QWORD *)(v3 + 152) = 0;
    }
    FigReadWriteLockLockForWrite();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    v8 = *(const void **)(v3 + 120);
    if (v8)
      CFRelease(v8);
    *(_QWORD *)(v3 + 120) = 0;
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 96) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    v9 = *(const void **)(v3 + 112);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v3 + 112) = 0;
    }
    FigReadWriteLockUnlockForWrite();
  }
  return 0;
}

uint64_t lvcFinalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  lvcInvalidate(a1);
  v3 = *(NSObject **)(DerivedStorage + 160);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v4 = *(void **)(DerivedStorage + 184);
  if (v4)
  {
    os_release(v4);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  return FigReadWriteLockDestroy();
}

__CFString *lvcCopyDebugDesc(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFAllocatorRef v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVisualContext %p [%p]>{imageAvailableImmediate:%p, imageAvailableSequential:%p, noMoreImages:%p, timebase:%p, isNewImageAvailable:%p, copyImageForTime:%p, getEarliestSequentialImageTime:%p}"), a1, v5, DerivedStorage[2], DerivedStorage[4], DerivedStorage[6], DerivedStorage[15], DerivedStorage[10], DerivedStorage[11], DerivedStorage[12]);
  return Mutable;
}

uint64_t lvcCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t UInt64;
  uint64_t result;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  if (!FigCFEqual())
    return 4294954512;
  UInt64 = FigCFNumberCreateUInt64();
  result = 0;
  *a4 = UInt64;
  return result;
}

uint64_t lvcTimebaseRateChanged()
{
  CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  lvcUpdateAutoPruneTimer();
  return FigReadWriteLockUnlockForRead();
}

void lvcUpdateAutoPruneTimer()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  double Rate;
  int64_t v3;
  CMTime v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 160);
  if (v1)
  {
    if (!*(_QWORD *)(DerivedStorage + 120))
    {
LABEL_5:
      dispatch_source_set_timer(v1, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      return;
    }
    Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120));
    if (Rate == 0.0)
    {
      v1 = *(NSObject **)(DerivedStorage + 160);
      goto LABEL_5;
    }
    v4 = *(CMTime *)(DerivedStorage + 128);
    v3 = (uint64_t)(CMTimeGetSeconds(&v4) * 1000000000.0 / fabs(Rate));
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 160), 0, v3, v3 / 10);
  }
}

uint64_t lvcSetImageAvailableImmediateCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  if (a2 && *(_QWORD *)(DerivedStorage + 16))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    v6 = 0;
    *(_QWORD *)(DerivedStorage + 16) = a2;
    *(_QWORD *)(DerivedStorage + 24) = a3;
  }
  FigReadWriteLockUnlockForWrite();
  return v6;
}

uint64_t lvcSetImageAvailableSequentialCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  if (a2 && *(_QWORD *)(DerivedStorage + 32))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    v6 = 0;
    *(_QWORD *)(DerivedStorage + 32) = a2;
    *(_QWORD *)(DerivedStorage + 40) = a3;
  }
  FigReadWriteLockUnlockForWrite();
  return v6;
}

uint64_t lvcSetNoMoreImagesCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  if (a2 && *(_QWORD *)(DerivedStorage + 48))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    v6 = 0;
    *(_QWORD *)(DerivedStorage + 48) = a2;
    *(_QWORD *)(DerivedStorage + 56) = a3;
  }
  FigReadWriteLockUnlockForWrite();
  return v6;
}

uint64_t lvcSetBecameEmptyCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  if (a2 && *(_QWORD *)(DerivedStorage + 64))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    v6 = 0;
    *(_QWORD *)(DerivedStorage + 64) = a2;
    *(_QWORD *)(DerivedStorage + 72) = a3;
  }
  FigReadWriteLockUnlockForWrite();
  return v6;
}

uint64_t lvcIsNewImageAvailable(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t (*v8)(uint64_t, __int128 *, uint64_t);
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*((_DWORD *)a2 + 3) & 0x1D) != 1)
  {
    FigSignalErrorAt();
    return 0;
  }
  v5 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (!*(_QWORD *)(v5 + 80) || !*(_QWORD *)(v5 + 112) || (v6 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
  {
    FigReadWriteLockUnlockForRead();
    return 0;
  }
  v7 = (const void *)v6;
  v8 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(v5 + 80);
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v9 = v8(a1, &v11, v6);
  FigReadWriteLockUnlockForRead();
  CFRelease(v7);
  return v9;
}

uint64_t lvcCopyImageForTime(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, CVBufferRef *a5, CFTypeRef *a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  _QWORD *v15;
  const void *v16;
  uint64_t (*v17)(uint64_t, uint64_t, __int128 *, uint64_t, CVBufferRef *, CFTypeRef *, __int128 *, const void *);
  CVBufferRef *p_buffer;
  CFTypeRef *p_cf;
  __int128 *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, CVBufferRef, CVBufferRef *, CFTypeRef, CFTypeRef *, __int128 *, uint64_t);
  uint64_t v25;
  _BOOL4 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  CFTypeRef cf;
  CVBufferRef buffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  buffer = 0;
  v29 = *MEMORY[0x1E0CA2E18];
  v30 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if ((*((_DWORD *)a3 + 3) & 0x1D) != 1)
    return FigSignalErrorAt();
  v15 = (_QWORD *)DerivedStorage;
  if (a5)
    *a5 = 0;
  FigReadWriteLockLockForRead();
  if (v15[11] && v15[14])
  {
    v16 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v16)
    {
      v17 = (uint64_t (*)(uint64_t, uint64_t, __int128 *, uint64_t, CVBufferRef *, CFTypeRef *, __int128 *, const void *))v15[11];
      if (a5)
        p_buffer = &buffer;
      else
        p_buffer = 0;
      if (a6)
        p_cf = &cf;
      else
        p_cf = 0;
      if (a7)
        v20 = &v29;
      else
        v20 = 0;
      v27 = *a3;
      v28 = *((_QWORD *)a3 + 2);
      v21 = v17(a1, a2, &v27, a4, p_buffer, p_cf, v20, v16);
      if (!a5)
      {
LABEL_26:
        v26 = a7 != 0;
        if (!a5)
        {
          if (!a6)
            goto LABEL_29;
          goto LABEL_28;
        }
LABEL_39:
        *a5 = buffer;
        buffer = 0;
        if (!a6)
        {
LABEL_29:
          if (v26)
          {
            *(_OWORD *)a7 = v29;
            *(_QWORD *)(a7 + 16) = v30;
          }
          goto LABEL_31;
        }
LABEL_28:
        *a6 = cf;
        cf = 0;
        goto LABEL_29;
      }
    }
    else
    {
      v21 = 0;
      if (!a5)
        goto LABEL_26;
    }
  }
  else
  {
    v21 = 0;
    v16 = 0;
    if (!a5)
      goto LABEL_26;
  }
  if ((_DWORD)v21)
    goto LABEL_26;
  v23 = v15[22];
  if (!v23
    || (v24 = *(uint64_t (**)(uint64_t, uint64_t, CVBufferRef, CVBufferRef *, CFTypeRef, CFTypeRef *, __int128 *, uint64_t))(v23 + 24)) == 0)
  {
    v26 = a7 != 0;
    goto LABEL_39;
  }
  v25 = v15[21];
  v27 = v29;
  v28 = v30;
  v21 = v24(v25, a2, buffer, a5, cf, a6, &v27, a7);
LABEL_31:
  FigReadWriteLockUnlockForRead();
  if (v16)
    CFRelease(v16);
  if (buffer)
    CVBufferRelease(buffer);
  if (cf)
    CFRelease(cf);
  return v21;
}

uint64_t lvcConvertHostTimeToImageTime(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  OpaqueCMTimebase *v8;
  CMClockRef HostTimeClock;
  const void *v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v13, 0, sizeof(v13));
  if (!a3)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 64) & 2) == 0)
      return FigSignalErrorAt();
  }
  FigReadWriteLockLockForRead();
  v8 = *(OpaqueCMTimebase **)(v6 + 120);
  if (v8)
  {
    if (a2)
    {
      CMClockMakeHostTimeFromSystemUnits(&v13, *(_QWORD *)(a2 + 16));
      HostTimeClock = CMClockGetHostTimeClock();
      v10 = *(const void **)(v6 + 120);
      v11 = v13;
      CMSyncConvertTime(&v12, &v11, HostTimeClock, v10);
      a2 = 0;
    }
    else
    {
      CMTimebaseGetTime(&v12, v8);
    }
    *a3 = v12;
  }
  else
  {
    a2 = 4294954481;
  }
  FigReadWriteLockUnlockForRead();
  return a2;
}

uint64_t lvcGetEarliestSequentialImageTimeAfterTime(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, _BYTE *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t (*v14)(uint64_t, uint64_t, __int128 *, uint64_t, _BYTE *, uint64_t);
  uint64_t v15;
  __int128 v17;
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    v11 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a4 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v11 + 16);
  }
  if (a5)
    *a5 = 0;
  FigReadWriteLockLockForRead();
  if (!*(_QWORD *)(DerivedStorage + 96) || !*(_QWORD *)(DerivedStorage + 112))
  {
    v15 = 4294954483;
LABEL_11:
    FigReadWriteLockUnlockForRead();
    return v15;
  }
  v12 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v12)
  {
    v15 = 0;
    goto LABEL_11;
  }
  v13 = (const void *)v12;
  v14 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, _BYTE *, uint64_t))(DerivedStorage + 96);
  v17 = *a3;
  v18 = *((_QWORD *)a3 + 2);
  v15 = v14(a1, a2, &v17, a4, a5, v12);
  FigReadWriteLockUnlockForRead();
  CFRelease(v13);
  return v15;
}

uint64_t lvcTask()
{
  uint64_t result;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  result = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(result + 176);
  if (v1)
  {
    v2 = *(uint64_t (**)(_QWORD))(v1 + 32);
    if (v2)
      return v2(*(_QWORD *)(result + 168));
  }
  return result;
}

uint64_t lvcImageAvailableImmediate(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  void (*v8)(uint64_t, __int128 *, uint64_t, uint64_t);
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*((_DWORD *)a2 + 3) & 0x1D) != 1)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  FigReadWriteLockLockForRead();
  v8 = *(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v7 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 24);
    v11 = *a2;
    v12 = *((_QWORD *)a2 + 2);
    v8(a1, &v11, a3, v9);
  }
  FigReadWriteLockUnlockForRead();
  return 0;
}

uint64_t lvcImageAvailableSequential(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  void (*v8)(uint64_t, __int128 *, uint64_t, uint64_t);
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*((_DWORD *)a2 + 3) & 0x1D) != 1)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  FigReadWriteLockLockForRead();
  v8 = *(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v7 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 40);
    v11 = *a2;
    v12 = *((_QWORD *)a2 + 2);
    v8(a1, &v11, a3, v9);
  }
  FigReadWriteLockUnlockForRead();
  return 0;
}

uint64_t lvcNoMoreImages(uint64_t a1)
{
  uint64_t DerivedStorage;
  void (*v3)(uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  v3 = *(void (**)(uint64_t, _QWORD))(DerivedStorage + 48);
  if (v3)
    v3(a1, *(_QWORD *)(DerivedStorage + 56));
  FigReadWriteLockUnlockForRead();
  return 0;
}

uint64_t lvcBecameEmpty(uint64_t a1)
{
  uint64_t DerivedStorage;
  void (*v3)(uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  v3 = *(void (**)(uint64_t, _QWORD))(DerivedStorage + 64);
  if (v3)
    v3(a1, *(_QWORD *)(DerivedStorage + 72));
  FigReadWriteLockUnlockForRead();
  return 0;
}

uint64_t lvcSetProducerCallbacks(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  v12 = *(_QWORD *)(DerivedStorage + 104);
  if (v12)
    v13 = v12 == a6;
  else
    v13 = 1;
  if (v13 || a3 && a4 && a5 || (v14 = 4294954480, !a2) && !a5 && !a4 && !a3 && !a6)
  {
    v15 = *(const void **)(DerivedStorage + 112);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
    if (*(_QWORD *)(DerivedStorage + 120))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v16 = *(const void **)(DerivedStorage + 120);
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)(DerivedStorage + 120) = a2;
    if (a2)
      CFRetain((CFTypeRef)a2);
    if (v16)
      CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 80) = a3;
    *(_QWORD *)(DerivedStorage + 88) = a4;
    if (a2 | a5 | a3 | a4)
      v17 = a6;
    else
      v17 = 0;
    *(_QWORD *)(DerivedStorage + 96) = a5;
    *(_QWORD *)(DerivedStorage + 104) = v17;
    *(_QWORD *)(DerivedStorage + 112) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if ((*(_BYTE *)(DerivedStorage + 140) & 1) != 0)
    {
      if (*(_QWORD *)(DerivedStorage + 120))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
      }
      lvcUpdateAutoPruneTimer();
    }
    v14 = 0;
  }
  FigReadWriteLockUnlockForWrite();
  return v14;
}

uint64_t lvcCreateSharedAutoPruneDispatchQueue()
{
  uint64_t result;

  result = FigDispatchQueueCreateWithPriority();
  sLVCSharedAutoPruneDispatchQueue = result;
  return result;
}

uint64_t FigMediaparserdUtilities_EnsureProcessLaunched()
{
  if ((gNeedToWakeupMediaparserd & 1) == 0)
  {
    if (FigMediaparserdUtilities_EnsureProcessLaunched_utilityQueueSetup != -1)
      dispatch_once(&FigMediaparserdUtilities_EnsureProcessLaunched_utilityQueueSetup, &__block_literal_global_7);
    dispatch_async_f((dispatch_queue_t)gWakeUpQueue, 0, (dispatch_function_t)figMediaParserdUtilities_KickStartProcess);
  }
  return 0;
}

uint64_t figMediaParserdUtilities_KickStartProcess()
{
  if (figMediaParserdUtilities_KickStartProcess_mediaparserdWakeup != -1)
    dispatch_once(&figMediaParserdUtilities_KickStartProcess_mediaparserdWakeup, &__block_literal_global_3);
  if (!figMediaParserdUtilities_KickStartProcess_connectionError
    && !FigXPCCreateBasicMessage()
    && !FigXPCRemoteClientSendAsyncMessage())
  {
    gNeedToWakeupMediaparserd = 1;
  }
  return FigXPCRelease();
}

void FigMediaparserdUtilities_DeadServerConnectionCallback()
{
  gNeedToWakeupMediaparserd = 0;
}

__CFString *convertPresetEnumToUsageModeString(uint64_t a1)
{
  __CFString **v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString *result;

  switch(a1)
  {
    case 0:
      v1 = kFigVirtualDisplayUsage_Uncompressed;
      goto LABEL_12;
    case 1:
      v1 = kFigVirtualDisplayUsage_AirPlayHEVC;
      goto LABEL_12;
    case 2:
      v1 = kFigVirtualDisplayUsage_CarPlay;
      goto LABEL_12;
    case 3:
      v1 = kFigVirtualDisplayUsage_CarPlayHEVC;
      goto LABEL_12;
    case 4:
      v1 = kFigVirtualDisplayUsage_Stevenote;
      goto LABEL_12;
    case 5:
      v1 = kFigVirtualDisplayUsage_Valeria;
      goto LABEL_12;
    case 6:
      v1 = kFigVirtualDisplayUsage_AirPlay;
      goto LABEL_12;
    case 7:
    case 9:
      v1 = kFigVirtualDisplayUsage_UncompressedHDR;
      goto LABEL_12;
    case 8:
    case 10:
      v1 = kFigVirtualDisplayUsage_AirPlayHDR;
LABEL_12:
      result = *v1;
      break;
    default:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      result = 0;
      break;
  }
  return result;
}

void sub_1929B4970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t handleServerDiedNotification(uint64_t a1, void *a2)
{
  uint64_t result;

  objc_msgSend(a2, "delegate");
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return objc_msgSend((id)objc_msgSend(a2, "delegate"), "screenCaptureControllerMediaServicesWereReset:", a2);
  return result;
}

void *conduitPushFrameCallback(void *result, uint64_t a2, unsigned int a3)
{
  if (a2)
    return (void *)objc_msgSend((id)objc_msgSend(result, "delegate"), "screenCaptureController:didReceiveSampleBuffer:transformFlags:", result, a2, a3);
  return result;
}

uint64_t conduitClearScreenCallback(void *a1)
{
  uint64_t result;

  objc_msgSend(a1, "delegate");
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return objc_msgSend((id)objc_msgSend(a1, "delegate"), "screenCaptureControllerDidReceiveClearScreen:", a1);
  return result;
}

uint64_t handleSourceTerminatedNotification(uint64_t a1, void *a2)
{
  uint64_t result;

  objc_msgSend(a2, "delegate");
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return objc_msgSend((id)objc_msgSend(a2, "delegate"), "screenCaptureController:didFailWithStatus:", a2, 4294955218);
  return result;
}

uint64_t FBLSupportAppendDeferredTransactionChangeToSetContentsScaleForFigCALayer(const void *a1, const void *a2, uint64_t a3, float a4)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = malloc_type_malloc(0x10uLL, 0x10800409227ACB4uLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = (uint64_t)v8;
  *v8 = CFRetain(a2);
  *(float *)(v9 + 8) = a4;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v9, (uint64_t)disposeSetContentsScaleContext, (uint64_t)copyDescriptionForSetContentsScaleContext, (uint64_t)setContentsScaleForFigCALayer);
}

void disposeSetContentsScaleContext(id *a1)
{
  if (*a1)

  free(a1);
}

CFStringRef copyDescriptionForSetContentsScaleContext(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("\nset ContentsScale: %f"), *(float *)(a1 + 8));
}

uint64_t setContentsScaleForFigCALayer(uint64_t a1)
{
  objc_msgSend(*(id *)a1, "setContentsScale:", *(float *)(a1 + 8));
  return 0;
}

uint64_t FBLSupportAppendDeferredTransactionChangeToSetAllowsDisplayCompositing(const void *a1, const void *a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = malloc_type_malloc(0x10uLL, 0x1080040C20BADFCuLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = (uint64_t)v8;
  *v8 = CFRetain(a2);
  *(_BYTE *)(v9 + 8) = a3;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v9, (uint64_t)disposeSetAllowsDisplayCompositingContext, (uint64_t)copyDescriptionForSetAllowsDisplayCompositingContext, (uint64_t)setAllowsDisplayCompositingForFigCALayer);
}

void disposeSetAllowsDisplayCompositingContext(id *a1)
{
  if (*a1)

  free(a1);
}

CFStringRef copyDescriptionForSetAllowsDisplayCompositingContext(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("\nset allowsDisplayCompositing: %d"), *(unsigned __int8 *)(a1 + 8));
}

uint64_t setAllowsDisplayCompositingForFigCALayer(uint64_t a1)
{
  objc_msgSend(*(id *)a1, "setAllowsDisplayCompositing:", *(unsigned __int8 *)(a1 + 8));
  return 0;
}

uint64_t FigImageQueueGaugeXPCRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigImageQueueGaugeXPCRemoteRetainCopiedImageQueueGauge(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = FigXPCRemoteClientRetainCopiedObject();
  if (!(_DWORD)v4)
  {
    FigImageQueueGaugeGetClassID();
    v4 = CMDerivedObjectCreate();
    if (!(_DWORD)v4)
    {
      *(_QWORD *)CMBaseObjectGetDerivedStorage() = a1;
      v4 = FigXPCRemoteClientAssociateObject();
      if (!(_DWORD)v4)
      {
        v4 = 0;
        *a2 = 0;
      }
    }
  }
  return v4;
}

uint64_t FigImageQueueGaugeXPCRemoteStartAsSubClient(uint64_t a1)
{
  _QWORD block[5];

  if (gImageQueueGaugeRemoteClient || !a1)
    return FigSignalErrorAt();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigImageQueueGaugeXPCRemoteStartAsSubClient_block_invoke;
  block[3] = &__block_descriptor_tmp_12;
  block[4] = a1;
  if (FigImageQueueGaugeXPCRemoteStartAsSubClient_onceToken != -1)
    dispatch_once(&FigImageQueueGaugeXPCRemoteStartAsSubClient_onceToken, block);
  return 0;
}

uint64_t remoteXPCImageQueueGauge_Finalize()
{
  CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *remoteXPCImageQueueGauge_CopyDebugDesc(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigImageQueueGaugeRemote(XPC) %p retainCount: %ld ObjectID: %016llx>"), a1, v5, *DerivedStorage);
  return Mutable;
}

uint64_t remoteXPCImageQueueGauge_CopyProperty()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = FigXPCSendStdCopyPropertyMessage();
  FigXPCRemoteClientKillServerOnTimeout();
  return v0;
}

uint64_t remoteXPCImageQueueGauge_SetProperty()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = FigXPCSendStdSetPropertyMessage();
  FigXPCRemoteClientKillServerOnTimeout();
  return v0;
}

uint64_t FigReportingModeratorCreateForHLS(uint64_t a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  CFTypeRef v9;
  const void *Value;

  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4)
    return 4294949785;
  FigReportingModeratorGetClassID();
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 8) = 0;
    *(_QWORD *)DerivedStorage = FigGetUpTimeNanoseconds();
    if (a2)
      v9 = CFRetain(a2);
    else
      v9 = 0;
    *(_QWORD *)(DerivedStorage + 168) = v9;
    *(_QWORD *)(DerivedStorage + 176) = 0x1E301B718;
    *(_QWORD *)(DerivedStorage + 64) = -1;
    if (a3)
      Value = CFDictionaryGetValue(a3, CFSTR("FRM_BundleName"));
    else
      Value = 0;
    FigUserExperienceScorerCreate(Value, (_QWORD *)(DerivedStorage + 216));
    v7 = 0;
    *a4 = 0;
  }
  return v7;
}

void streamReportingModeratorFinalize()
{
  uint64_t DerivedStorage;
  _QWORD *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = (_QWORD *)DerivedStorage;
    v2 = *(const void **)(DerivedStorage + 208);
    if (v2)
      CFRelease(v2);
    v3 = (const void *)v1[12];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)v1[11];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)v1[21];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)v1[27];
    if (v6)
      CFRelease(v6);
  }
}

__CFString *streamReportingModeratorCopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigStreamReportingModerator : "));
  return Mutable;
}

uint64_t streamReportingModeratorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t result;
  CFTypeID v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294949785;
  v6 = DerivedStorage;
  result = CFEqual(a2, CFSTR("Timebase"));
  if (!(_DWORD)result)
    return result;
  if (!a3)
    return 4294949785;
  v8 = CFGetTypeID(a3);
  if (v8 != CMTimebaseGetTypeID())
    return 4294949785;
  v9 = *(const void **)(v6 + 208);
  *(_QWORD *)(v6 + 208) = a3;
  CFRetain(a3);
  if (v9)
    CFRelease(v9);
  return 0;
}

uint64_t streamModeratorProcessEventAndCopyKeyArray(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int v9;
  uint64_t UpTimeNanoseconds;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, __CFString *, unint64_t);
  __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, __CFString *, unint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, __CFString *, unint64_t);
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, __CFString *, unint64_t);
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __CFString *v40;
  __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v60;
  unsigned int (*v61)(uint64_t, _QWORD, __CFString *, rusage_info_t *);
  rusage_info_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v69;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, CFMutableDictionaryRef);
  rusage_info_t v74;
  CMTimeValue value;
  int v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, __CFString *, __CFString *, rusage_info_t *);
  uint64_t v79;
  unsigned int (*v80)(uint64_t, __CFString *, __CFString *, CMTime *);
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, __CFString *, uint64_t *);
  uint64_t v83;
  unsigned int (*v84)(uint64_t, __CFString *, __CFString *, uint64_t *);
  CMTimeValue v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, __CFString *, rusage_info_t *);
  uint64_t v93;
  unsigned int (*v94)(uint64_t, __CFString *, __CFString *, CMTime *);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  CMTimeValue v98;
  void (*v99)(uint64_t, uint64_t, __CFString *, char *);
  double Current;
  pid_t v101;
  uint64_t v102;
  double v103;
  double v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, __CFString *, unint64_t);
  void (*v109)(uint64_t, __CFString *, uint64_t);
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  const void *v113;
  uint64_t v114;
  double Seconds;
  void (*v116)(uint64_t, __CFString *, __CFString *, unint64_t);
  uint64_t v117;
  double v118;
  void (*v119)(uint64_t, __CFString *, __CFString *, unint64_t);
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v129;
  void (*v130)(uint64_t, _QWORD, __CFString *, uint64_t *);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, __CFString *, unint64_t);
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v144;
  void (*v145)(uint64_t, _QWORD, __CFString *, uint64_t *);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, uint64_t, __CFString *, unint64_t);
  CFTypeRef v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  CMTime time;
  rusage_info_t buffer[2];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294949785;
  if (!a3 || !DerivedStorage)
    return result;
  v164 = 0;
  v163 = 0;
  v161 = a4;
  v162 = 0;
  v160 = a3;
  if (a2 == 106)
  {
    result = fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(DerivedStorage + 168), 0x1E2FE8558, &v163);
    if ((_DWORD)result)
      return result;
LABEL_5:
    fsrm_updateProcessMemoryAndCPUSession(DerivedStorage);
    goto LABEL_6;
  }
  v9 = 0;
  if (a2 <= 1000)
  {
    if (a2 != 101)
    {
      if (a2 == 105)
      {
        v20 = *(_QWORD *)(DerivedStorage + 168);
        v21 = kFigReportingFrozenKeySetForEvent_LikelyToKeepUp;
      }
      else
      {
        if (a2 != 115)
          goto LABEL_7;
        v20 = *(_QWORD *)(DerivedStorage + 168);
        v21 = kFigReportingFrozenKeySetForEvent_StartupPerformanceMetrics;
      }
      v109 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 200);
      if (v109)
        v109(v20, CFSTR("startupStats"), v21);
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (a2 > 2001)
  {
    if (a2 != 2002)
    {
      if (a2 != 3001)
        goto LABEL_7;
      fsrm_updateExpensiveNetworkStats(DerivedStorage);
      goto LABEL_6;
    }
    v18 = *(_QWORD *)(DerivedStorage + 168);
    v19 = kFigReportingEventKeyArray_DownloadPerfValuesPerAudioSubstreamSegment;
  }
  else
  {
    if (a2 == 1001)
    {
      Current = CFAbsoluteTimeGetCurrent();
      if (Current - *(double *)(DerivedStorage + 184) >= 30.0)
      {
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        v189 = 0u;
        v190 = 0u;
        v187 = 0u;
        v188 = 0u;
        v185 = 0u;
        v186 = 0u;
        v183 = 0u;
        v184 = 0u;
        v181 = 0u;
        v182 = 0u;
        v179 = 0u;
        v180 = 0u;
        v177 = 0u;
        v178 = 0u;
        v175 = 0u;
        v176 = 0u;
        v173 = 0u;
        v174 = 0u;
        v172 = 0u;
        v170 = 0u;
        v171 = 0u;
        *(_OWORD *)buffer = 0u;
        v169 = 0u;
        v101 = getpid();
        if (!proc_pid_rusage(v101, 6, buffer))
        {
          v102 = v169;
          if (mach_absolute_time_to_s_have_tmscale != -1)
            dispatch_once(&mach_absolute_time_to_s_have_tmscale, &__block_literal_global_8);
          v103 = *(double *)&mach_absolute_time_to_s_tmscale * (double)v102 / 1000000000.0;
          v104 = *(double *)(DerivedStorage + 192);
          if (v104 == 0.0 || (v156 = *(double *)(DerivedStorage + 184), v156 == 0.0) || v103 < v104)
          {
            *(double *)(DerivedStorage + 184) = Current;
            *(double *)(DerivedStorage + 192) = v103;
          }
          else
          {
            v157 = *(_QWORD *)(DerivedStorage + 168);
            v158 = *(_QWORD *)(DerivedStorage + 176);
            v159 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 72);
            if (v159)
              v159(v157, v158, CFSTR("ProcCPUUsage"), (unint64_t)((v103 - v104) * 10000.0 / (Current - v156)));
          }
          v105 = *((_QWORD *)&v172 + 1);
          v106 = *(_QWORD *)(DerivedStorage + 168);
          v107 = *(_QWORD *)(DerivedStorage + 176);
          v108 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 72);
          if (v108)
            v108(v106, v107, CFSTR("ProcMem"), v105 >> 10);
          *(double *)(DerivedStorage + 184) = Current;
          *(double *)(DerivedStorage + 192) = v103;
        }
      }
      goto LABEL_6;
    }
    if (a2 != 2001)
      goto LABEL_7;
    v18 = *(_QWORD *)(DerivedStorage + 168);
    v19 = kFigReportingEventKeyArray_DownloadPerfValuesPerMainSubstreamSegment;
  }
  v110 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v110)
    v110(v18, v19);
LABEL_6:
  v9 = v163;
LABEL_7:
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v11 = UpTimeNanoseconds;
  v12 = *(_DWORD *)(DerivedStorage + 8);
  if (*(_QWORD *)DerivedStorage)
  {
    v13 = (UpTimeNanoseconds - *(_QWORD *)DerivedStorage) / 0xF4240uLL;
    switch(v12)
    {
      case 0:
        v14 = *(_QWORD *)(DerivedStorage + 168);
        v15 = *(_QWORD *)(DerivedStorage + 176);
        v16 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 64);
        if (v16)
        {
          v17 = CFSTR("InitTime");
          goto LABEL_37;
        }
        break;
      case 1:
        v14 = *(_QWORD *)(DerivedStorage + 168);
        v15 = *(_QWORD *)(DerivedStorage + 176);
        v16 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 64);
        if (v16)
        {
          v17 = CFSTR("PauseTime");
          goto LABEL_37;
        }
        break;
      case 2:
        LODWORD(v22) = *(_DWORD *)(DerivedStorage + 12);
        if ((int)v22 >= 0)
          v22 = v22;
        else
          v22 = -(int)v22;
        v23 = (((v13 * v22) >> 2) * (unsigned __int128)0x28F5C28F5C28F5C3uLL) >> 64;
        v24 = *(_QWORD *)(DerivedStorage + 168);
        v25 = *(_QWORD *)(DerivedStorage + 176);
        v26 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 64);
        if (v26)
          v26(v24, v25, CFSTR("PlayTimeWC"), v13);
        v27 = v23 >> 2;
        v28 = *(_QWORD *)(DerivedStorage + 168);
        v29 = *(_QWORD *)(DerivedStorage + 176);
        v30 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 64);
        if (v30)
          v30(v28, v29, CFSTR("PlayTime"), v27);
        v31 = *(_QWORD *)(DerivedStorage + 128) + v13;
        *(_QWORD *)(DerivedStorage + 120) += v27;
        *(_QWORD *)(DerivedStorage + 128) = v31;
        v32 = *(_QWORD *)(DerivedStorage + 112) + v13;
        *(_QWORD *)(DerivedStorage + 104) += v27;
        *(_QWORD *)(DerivedStorage + 112) = v32;
        break;
      case 3:
        v33 = *(_QWORD *)(DerivedStorage + 168);
        v34 = *(_QWORD *)(DerivedStorage + 176);
        v35 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 64);
        if (v35)
          v35(v33, v34, CFSTR("StallTime"), v13);
        v14 = *(_QWORD *)(DerivedStorage + 168);
        v15 = *(_QWORD *)(DerivedStorage + 176);
        v16 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 64);
        if (v16)
        {
          v17 = CFSTR("VarStallTime");
LABEL_37:
          v16(v14, v15, v17, v13);
        }
        break;
      default:
        break;
    }
  }
  *(_QWORD *)DerivedStorage = v11;
  v36 = a2 - 101;
  switch(a2)
  {
    case 'e':
      v37 = *(_QWORD *)(DerivedStorage + 168);
      v38 = *(_QWORD *)(DerivedStorage + 176);
      v39 = (uint64_t *)(DerivedStorage + 104);
      v40 = CFSTR("PlayTimeLastSW");
      v41 = CFSTR("PlayTimeWCLastSW");
      goto LABEL_117;
    case 'f':
    case 'h':
    case 'l':
      goto LABEL_118;
    case 'g':
      *(_QWORD *)(DerivedStorage + 32) = v11;
      v12 = 3;
      goto LABEL_118;
    case 'i':
      v45 = *(_QWORD *)(DerivedStorage + 168);
      v46 = *(_QWORD *)(DerivedStorage + 176);
      v47 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 64);
      if (v47)
        v47(v45, v46, CFSTR("EventCounter"), 1);
      if (!*(_QWORD *)(DerivedStorage + 88) && !*(_QWORD *)(DerivedStorage + 96))
        fsrm_copyPlayerIndicatedBitrate(*(_QWORD *)(DerivedStorage + 168), DerivedStorage);
      if (*(_DWORD *)(DerivedStorage + 64) != -1)
        goto LABEL_53;
      LODWORD(buffer[0]) = 0;
      if (!fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(DerivedStorage + 168), 0x1E2FFA0B8, buffer))
      {
        *(_DWORD *)(DerivedStorage + 64) = buffer[0];
LABEL_53:
        if (*(_DWORD *)(DerivedStorage + 68) == -1)
        {
          LODWORD(buffer[0]) = 0;
          if (!fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(DerivedStorage + 168), 0x1E2FFA918, buffer))*(_DWORD *)(DerivedStorage + 68) = buffer[0];
        }
      }
LABEL_118:
      v76 = 0;
      *(_DWORD *)(DerivedStorage + 8) = v12;
      goto LABEL_119;
    case 'j':
      if (v9)
      {
        *(_DWORD *)(DerivedStorage + 12) = v9;
        v48 = (uint64_t *)(DerivedStorage + 16);
        v12 = 2;
      }
      else
      {
        v48 = (uint64_t *)(DerivedStorage + 40);
        v12 = 1;
      }
      *v48 = v11;
      v37 = *(_QWORD *)(DerivedStorage + 168);
      v38 = *(_QWORD *)(DerivedStorage + 176);
      v39 = (uint64_t *)(DerivedStorage + 120);
      v40 = CFSTR("RateChangePlayTime");
      v41 = CFSTR("RateChangePlayTimeWC");
LABEL_117:
      fsrm_updatePlayTimeStatsForEvent(v37, v38, v39, (uint64_t)v40, (uint64_t)v41);
      goto LABEL_118;
    case 'k':
      fsrm_setSessionEndReasonIfFatalError(DerivedStorage, *(_QWORD *)(DerivedStorage + 176), 0, 0x1E301CB78, 0x1E301CBB8, 0x1E301CB98);
      v49 = *(_QWORD *)(DerivedStorage + 168);
      v50 = *(_QWORD *)(DerivedStorage + 176);
      v51 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 64);
      if (v51)
        v51(v49, v50, CFSTR("PlayerErrCount"), 1);
      goto LABEL_118;
    case 'm':
      buffer[0] = 0;
      v52 = *(_QWORD *)(DerivedStorage + 168);
      v53 = *(_QWORD *)(DerivedStorage + 176);
      v54 = *(_QWORD *)(DerivedStorage + 88);
      v55 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 80);
      if (v55)
        v55(v52, v53, CFSTR("LastPlayerIBR"), v54);
      v56 = *(_QWORD *)(DerivedStorage + 168);
      v57 = *(_QWORD *)(DerivedStorage + 176);
      v58 = *(_QWORD *)(DerivedStorage + 96);
      v59 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 80);
      if (v59)
        v59(v56, v57, CFSTR("LastPlayerIABR"), v58);
      v60 = *(_QWORD *)(DerivedStorage + 168);
      v61 = *(unsigned int (**)(uint64_t, _QWORD, __CFString *, rusage_info_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 144);
      if (v61 && !v61(v60, 0, CFSTR("SwFail"), buffer))
      {
        v62 = buffer[0];
        *(_BYTE *)(DerivedStorage + 80) = buffer[0];
        if (!v62)
          goto LABEL_70;
        v63 = *(_QWORD *)(DerivedStorage + 168);
        v64 = *(_QWORD *)(DerivedStorage + 176);
        v65 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 64);
        if (v65)
          v65(v63, v64, CFSTR("FailSwCount"), 1);
        if (!buffer[0])
        {
LABEL_70:
          fsrm_copyPlayerIndicatedBitrate(*(_QWORD *)(DerivedStorage + 168), DerivedStorage);
          v66 = *(_QWORD *)(DerivedStorage + 168);
          v67 = *(_QWORD *)(DerivedStorage + 176);
          v68 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 64);
          if (v68)
            v68(v66, v67, CFSTR("SwCnt"), 1);
          fsrm_calculatePlayTimeAndUpdateTimeWeightedStats(DerivedStorage, DerivedStorage);
        }
      }
      fsrm_updatePlayTimeStatsForEvent(*(_QWORD *)(DerivedStorage + 168), *(_QWORD *)(DerivedStorage + 176), (uint64_t *)(DerivedStorage + 104), 0x1E2FFA5F8, 0x1E2FFA5D8);
      *(_QWORD *)(DerivedStorage + 24) = v11;
      goto LABEL_118;
    case 'n':
      result = fsrm_calculatePlayTimeAndUpdateTimeWeightedStats(DerivedStorage, DerivedStorage);
      *(_DWORD *)(DerivedStorage + 8) = v12;
      if ((_DWORD)result)
        return result;
      v69 = *(_QWORD *)(DerivedStorage + 168);
      buffer[0] = 0;
      time.value = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
        return 4294949786;
      v71 = Mutable;
      v72 = kFigReportingEventKeyArray_PeriodicStatsActivityMonitor;
      v73 = *(void (**)(uint64_t, uint64_t, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 8);
      if (v73)
        v73(v69, v72, v71);
      FigCFDictionaryGetInt64IfPresent();
      FigCFDictionaryGetInt64IfPresent();
      v74 = buffer[0];
      value = time.value;
      CFRelease(v71);
      v76 = 1;
      if ((uint64_t)v74 <= 0 && value < 1)
        return 4294949783;
LABEL_119:
      v111 = FigGetUpTimeNanoseconds();
      *(_OWORD *)buffer = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)&v169 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      if (*(_QWORD *)(DerivedStorage + 208))
      {
        v112 = fsrm_copyEventKeyArray(a2);
        if (v112)
        {
          v113 = (const void *)v112;
          if (FigCFArrayContainsValue())
          {
            CMTimebaseGetTimeClampedAboveAnchorTime();
            v114 = *(_QWORD *)(DerivedStorage + 168);
            *(_OWORD *)&time.value = *(_OWORD *)buffer;
            time.epoch = v169;
            Seconds = CMTimeGetSeconds(&time);
            v116 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 88);
            if (v116)
              v116(v114, CFSTR("playerStats"), CFSTR("LastMediaPlaybackTime"), (unint64_t)Seconds);
            v117 = *(_QWORD *)(DerivedStorage + 168);
            *(_OWORD *)&time.value = *(_OWORD *)buffer;
            time.epoch = v169;
            v118 = CMTimeGetSeconds(&time);
            v119 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 88);
            if (v119)
              v119(v117, CFSTR("playerStats"), CFSTR("LastMediaPlaybackTimeMS"), (unint64_t)(v118 * 1000.0));
          }
          CFRelease(v113);
        }
      }
      if ((a2 & 0xFFFFFFFB) == 0x69)
      {
        LODWORD(buffer[0]) = 0;
        if (!fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(DerivedStorage + 168), 0x1E2FFA918, buffer))FigUserExperienceSetCurrentRank(*(_QWORD **)(DerivedStorage + 216), (int)buffer[0]);
        goto LABEL_130;
      }
      if (a2 <= 105)
      {
        if (a2 == 101)
        {
          FigUserExperienceReportSessionEnd(*(_QWORD **)(DerivedStorage + 216));
          FigUserExperienceCalculateScore(*(_QWORD *)(DerivedStorage + 216));
          v120 = 1;
          goto LABEL_156;
        }
        if (a2 == 103)
        {
          LODWORD(buffer[0]) = 0;
          FigUserExperienceReportStall(*(_QWORD **)(DerivedStorage + 216));
          if (!fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(DerivedStorage + 168), 0x1E2FFA918, buffer))FigUserExperienceSetCurrentRank(*(_QWORD **)(DerivedStorage + 216), (int)buffer[0]);
          v121 = *(_QWORD *)(DerivedStorage + 24);
          if (v121)
          {
            v122 = *(_QWORD *)(DerivedStorage + 168);
            v123 = *(_QWORD *)(DerivedStorage + 176);
            v124 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 88);
            if (v124)
              v124(v122, v123, CFSTR("LastSwitch"), (v111 - v121) / 0xF4240uLL);
          }
          v125 = *(_QWORD *)(DerivedStorage + 16);
          if (v125)
          {
            v126 = *(_QWORD *)(DerivedStorage + 168);
            v127 = *(_QWORD *)(DerivedStorage + 176);
            v128 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 88);
            if (v128)
              v128(v126, v127, CFSTR("LastResume"), (v111 - v125) / 0xF4240uLL);
            *(_QWORD *)(DerivedStorage + 16) = 0;
          }
          v129 = *(_QWORD *)(DerivedStorage + 168);
          v130 = *(void (**)(uint64_t, _QWORD, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 144);
          if (v130)
          {
            v130(v129, 0, CFSTR("LastLowTime"), &v162);
            v131 = v162;
            if (v162)
            {
              v132 = *(_QWORD *)(DerivedStorage + 168);
              v133 = *(_QWORD *)(DerivedStorage + 176);
              v134 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 88);
              if (v134)
                v134(v132, v133, CFSTR("LastLowFromStall"), (v111 - v131) / 0xF4240uLL);
            }
          }
          v120 = 0;
          v135 = 1;
          goto LABEL_162;
        }
LABEL_130:
        v120 = 0;
        if (a2 != 106 || !v163)
        {
LABEL_160:
          if ((a2 | 2) != 0x67 && (a2 != 106 || !v163))
            goto LABEL_167;
          v135 = 0;
LABEL_162:
          v140 = *(_QWORD *)(DerivedStorage + 40);
          if (v140)
          {
            v141 = *(_QWORD *)(DerivedStorage + 168);
            v142 = *(_QWORD *)(DerivedStorage + 176);
            v143 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 88);
            if (v143)
              v143(v141, v142, CFSTR("LastPause"), (v111 - v140) / 0xF4240uLL);
            *(_QWORD *)(DerivedStorage + 40) = 0;
          }
          if ((v135 & 1) != 0)
          {
LABEL_169:
            v144 = *(_QWORD *)(DerivedStorage + 168);
            v145 = *(void (**)(uint64_t, _QWORD, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 152);
            if (v145)
            {
              v145(v144, 0, CFSTR("SwDir"), &v164);
              v146 = v164;
            }
            else
            {
              v146 = 0;
            }
            v147 = *(_QWORD *)(DerivedStorage + 168);
            v148 = *(_QWORD *)(DerivedStorage + 176);
            v149 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 80);
            if (v149)
              v149(v147, v148, CFSTR("LaSwDir"), v146);
            goto LABEL_177;
          }
LABEL_167:
          if (a2 != 106 || !v163)
            goto LABEL_177;
          goto LABEL_169;
        }
LABEL_156:
        v136 = *(_QWORD *)(DerivedStorage + 32);
        if (v136)
        {
          v137 = *(_QWORD *)(DerivedStorage + 168);
          v138 = *(_QWORD *)(DerivedStorage + 176);
          v139 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 88);
          if (v139)
            v139(v137, v138, CFSTR("LastStall"), (v111 - v136) / 0xF4240uLL);
          *(_QWORD *)(DerivedStorage + 32) = 0;
        }
        goto LABEL_160;
      }
      if (a2 != 111)
      {
        if (a2 == 106)
        {
          LODWORD(buffer[0]) = 0;
          LODWORD(time.value) = 0;
          if (!fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(DerivedStorage + 168), 0x1E2FE8558, buffer)&& !fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(DerivedStorage + 168), 0x1E2FFA918, &time))
          {
            FigUserExperienceReportRateChange(*(_QWORD **)(DerivedStorage + 216), time.value, (int)buffer[0]);
          }
        }
        goto LABEL_130;
      }
      LODWORD(buffer[0]) = 0;
      LODWORD(time.value) = 0;
      if (!fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(DerivedStorage + 168), 0x1E2FFA938, buffer)&& !fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(DerivedStorage + 168), 0x1E2FFA798, &time))
      {
        FigUserExperienceReportVariantCompleted(*(_QWORD **)(DerivedStorage + 216), (int)buffer[0], SLODWORD(time.value));
      }
      v120 = 0;
LABEL_177:
      v150 = *(_QWORD *)(DerivedStorage + 72);
      if (v150)
        v151 = (v111 - v150) / 0xF4240uLL;
      else
        v151 = 0;
      v152 = *(_QWORD *)(DerivedStorage + 168);
      v153 = *(_QWORD *)(DerivedStorage + 176);
      v154 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 88);
      if (v154)
      {
        result = v154(v152, v153, CFSTR("PumpErrTime"), v151);
        if (!(_DWORD)result)
        {
          if (((v76 | v120) & 1) != 0)
            fsrm_reportAggregatedTimeWeightedStats(DerivedStorage, v76 ^ 1u);
          *v160 = fsrm_copyEventKeyArray(a2);
          if (v161 && (v36 > 0xC || ((1 << v36) & 0x1801) == 0))
          {
            if (kFigReportingEventKeyArray_FetchKeysFromAggregatedSessionStats)
              v155 = CFRetain((CFTypeRef)kFigReportingEventKeyArray_FetchKeysFromAggregatedSessionStats);
            else
              v155 = 0;
            result = 0;
            *v161 = v155;
          }
          else
          {
            result = 0;
          }
        }
      }
      else
      {
        result = 4294954514;
      }
      break;
    case 'o':
      buffer[0] = 0;
      v166 = 0;
      time.value = 0;
      v165 = 0;
      v77 = *(_QWORD *)(DerivedStorage + 168);
      v78 = *(unsigned int (**)(uint64_t, __CFString *, __CFString *, rusage_info_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 144);
      if (v78)
      {
        if (!v78(v77, CFSTR("playerStats"), CFSTR("VarReHt"), buffer))
        {
          v79 = *(_QWORD *)(DerivedStorage + 168);
          v80 = *(unsigned int (**)(uint64_t, __CFString *, __CFString *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 144);
          if (v80)
          {
            if (!v80(v79, CFSTR("playerStats"), CFSTR("VarReWd"), &time)
              && *(_QWORD *)(DerivedStorage + 144) * *(_QWORD *)(DerivedStorage + 136) < time.value * (uint64_t)buffer[0])
            {
              v81 = *(_QWORD *)(DerivedStorage + 168);
              v82 = *(unsigned int (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 48);
              if (v82)
              {
                if (!v82(v81, 1, CFSTR("PlayTime"), &v166))
                {
                  v83 = *(_QWORD *)(DerivedStorage + 168);
                  v84 = *(unsigned int (**)(uint64_t, __CFString *, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
                  if (v84)
                  {
                    if (!v84(v83, CFSTR("playerStats"), CFSTR("VarPlayTime"), &v165))
                    {
                      v86 = v166;
                      v85 = time.value;
                      *(rusage_info_t *)(DerivedStorage + 136) = buffer[0];
                      *(_QWORD *)(DerivedStorage + 144) = v85;
                      v87 = *(_QWORD *)(DerivedStorage + 168);
                      v88 = *(_QWORD *)(DerivedStorage + 176);
                      v89 = v165;
                      v90 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 88);
                      if (v90)
                        v90(v87, v88, CFSTR("timeToResolution"), v86 - v89);
                    }
                  }
                }
              }
            }
          }
        }
      }
      buffer[0] = 0;
      time.value = 0;
      v91 = *(_QWORD *)(DerivedStorage + 168);
      v92 = *(unsigned int (**)(uint64_t, uint64_t, __CFString *, rusage_info_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 48);
      if (v92)
      {
        if (!v92(v91, 1, CFSTR("PlayTime"), buffer))
        {
          v93 = *(_QWORD *)(DerivedStorage + 168);
          v94 = *(unsigned int (**)(uint64_t, __CFString *, __CFString *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 144);
          if (v94)
          {
            if (!v94(v93, CFSTR("playerStats"), CFSTR("VarPlayTime"), &time))
            {
              v95 = *(_QWORD *)(DerivedStorage + 168);
              v96 = *(_QWORD *)(DerivedStorage + 176);
              v97 = (char *)buffer[0];
              v98 = time.value;
              v99 = *(void (**)(uint64_t, uint64_t, __CFString *, char *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 88);
              if (v99)
                v99(v95, v96, CFSTR("timeToVariant"), &v97[-v98]);
            }
          }
        }
      }
      goto LABEL_118;
    default:
      if (a2 == 202)
      {
        fsrm_setSessionEndReasonIfFatalError(DerivedStorage, *(_QWORD *)(DerivedStorage + 176), 0x1E301C978, 0x1E301C8F8, 0x1E301C938, 0x1E301C918);
        v42 = *(_QWORD *)(DerivedStorage + 168);
        v43 = *(_QWORD *)(DerivedStorage + 176);
        v44 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 64);
        if (v44)
          v44(v42, v43, CFSTR("PumpErrCount"), 1);
        *(_QWORD *)(DerivedStorage + 72) = v11;
      }
      goto LABEL_118;
  }
  return result;
}

uint64_t streamModeratorResetStatsForEvent(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, __CFString *);
  uint64_t v9;
  void (*v10)(uint64_t, __CFString *);
  uint64_t v11;
  void (*v12)(uint64_t, __CFString *);
  uint64_t v13;
  __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, __CFString *);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, __CFString *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, __CFString *);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, __CFString *);
  uint64_t v27;
  void (*v28)(uint64_t, __CFString *);
  uint64_t v29;
  void (*v30)(uint64_t, __CFString *);
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, __CFString *);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, __CFString *);
  __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, __CFString *);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, __CFString *);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, __CFString *);
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, __CFString *);
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, __CFString *);
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, __CFString *);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, __CFString *);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, __CFString *);
  CFIndex v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  CFIndex v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294949785;
  v4 = DerivedStorage;
  result = 0;
  switch(a2)
  {
    case 'g':
      v6 = *(_QWORD *)(v4 + 168);
      v7 = *(_QWORD *)(v4 + 176);
      v8 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v8)
        v8(v6, v7, CFSTR("LastResume"));
      v9 = *(_QWORD *)(v4 + 168);
      v10 = *(void (**)(uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
      if (v10)
        v10(v9, CFSTR("LastResume"));
      v11 = *(_QWORD *)(v4 + 168);
      v12 = *(void (**)(uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
      if (!v12)
        return 0;
      v13 = v11;
      v14 = CFSTR("LastResume");
      goto LABEL_25;
    case 'j':
      v15 = *(_QWORD *)(v4 + 168);
      v16 = *(_QWORD *)(v4 + 176);
      v17 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v17)
        v17(v15, v16, CFSTR("RateChangePlayTime"));
      v18 = *(_QWORD *)(v4 + 168);
      v19 = *(_QWORD *)(v4 + 176);
      v20 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v20)
        v20(v18, v19, CFSTR("RateChangePlayTimeWC"));
      v21 = *(_QWORD *)(v4 + 168);
      v22 = *(_QWORD *)(v4 + 176);
      v23 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v23)
        v23(v21, v22, CFSTR("LastStall"));
      v24 = *(_QWORD *)(v4 + 168);
      v25 = *(_QWORD *)(v4 + 176);
      v26 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v26)
        v26(v24, v25, CFSTR("LastPause"));
      v27 = *(_QWORD *)(v4 + 168);
      v28 = *(void (**)(uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
      if (v28)
        v28(v27, CFSTR("LastStall"));
      v29 = *(_QWORD *)(v4 + 168);
      v30 = *(void (**)(uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
      if (v30)
        v30(v29, CFSTR("LastPause"));
      v31 = *(_QWORD *)(v4 + 168);
      v32 = *(void (**)(uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
      if (v32)
        v32(v31, CFSTR("LastStall"));
      v33 = *(_QWORD *)(v4 + 168);
      v12 = *(void (**)(uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
      if (v12)
      {
        v13 = v33;
        v14 = CFSTR("LastPause");
LABEL_25:
        v12(v13, v14);
      }
      return 0;
    case 'm':
      goto LABEL_28;
    case 'n':
      v34 = *(_QWORD *)(v4 + 168);
      v35 = kFigReportingEventKeyArray_PeriodicEventKeysToReset;
      v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
      if (v36)
        v36(v34, v35);
LABEL_28:
      v37 = *(_QWORD *)(v4 + 168);
      v38 = *(_QWORD *)(v4 + 176);
      v39 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v39)
        v39(v37, v38, CFSTR("PlayTime"));
      v41 = *(_QWORD *)(v4 + 168);
      v40 = *(_QWORD *)(v4 + 176);
      v42 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (!v42)
        return 0;
      v43 = CFSTR("PlayTimeWC");
      break;
    case 'o':
      v44 = *(_QWORD *)(v4 + 168);
      v45 = *(_QWORD *)(v4 + 176);
      v46 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v46)
        v46(v44, v45, CFSTR("ViFrDec"));
      v47 = *(_QWORD *)(v4 + 168);
      v48 = *(_QWORD *)(v4 + 176);
      v49 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v49)
        v49(v47, v48, CFSTR("ViFrDecNoDisp"));
      v50 = *(_QWORD *)(v4 + 168);
      v51 = *(_QWORD *)(v4 + 176);
      v52 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v52)
        v52(v50, v51, CFSTR("ViFrDecLate"));
      v53 = *(_QWORD *)(v4 + 168);
      v54 = *(_QWORD *)(v4 + 176);
      v55 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v55)
        v55(v53, v54, CFSTR("ViFrDropByFlush"));
      v56 = *(_QWORD *)(v4 + 168);
      v57 = *(_QWORD *)(v4 + 176);
      v58 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v58)
        v58(v56, v57, CFSTR("ViFrDropByDec"));
      v59 = *(_QWORD *)(v4 + 168);
      v60 = *(_QWORD *)(v4 + 176);
      v61 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v61)
        v61(v59, v60, CFSTR("ViGrFrDropByDec"));
      v62 = *(_QWORD *)(v4 + 168);
      v63 = *(_QWORD *)(v4 + 176);
      v64 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v64)
        v64(v62, v63, CFSTR("ViDecErrorCount"));
      v65 = *(_QWORD *)(v4 + 168);
      v66 = *(_QWORD *)(v4 + 176);
      v67 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v67)
        v67(v65, v66, CFSTR("timeToResolution"));
      v41 = *(_QWORD *)(v4 + 168);
      v40 = *(_QWORD *)(v4 + 176);
      v42 = *(void (**)(uint64_t, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (!v42)
        return 0;
      v43 = CFSTR("VarStallTime");
      break;
    case 'p':
      if (CFArrayGetCount((CFArrayRef)kFigReportingEventKeyArray_DownloadPerfValuesPerMainSubstreamSegment) >= 1)
      {
        v68 = 0;
        do
        {
          v69 = *(_QWORD *)CFArrayGetValueAtIndex((CFArrayRef)kFigReportingEventKeyArray_DownloadPerfValuesPerMainSubstreamSegment, v68);
          v70 = *(_QWORD *)(v4 + 168);
          v71 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
          if (v71)
            v71(v70, v69);
          ++v68;
        }
        while (v68 < CFArrayGetCount((CFArrayRef)kFigReportingEventKeyArray_DownloadPerfValuesPerMainSubstreamSegment));
      }
      if (CFArrayGetCount((CFArrayRef)kFigReportingEventKeyArray_DownloadPerfValuesPerAudioSubstreamSegment) >= 1)
      {
        v72 = 0;
        do
        {
          v73 = *(_QWORD *)CFArrayGetValueAtIndex((CFArrayRef)kFigReportingEventKeyArray_DownloadPerfValuesPerAudioSubstreamSegment, v72);
          v74 = *(_QWORD *)(v4 + 168);
          v75 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
          if (v75)
            v75(v74, v73);
          ++v72;
        }
        while (v72 < CFArrayGetCount((CFArrayRef)kFigReportingEventKeyArray_DownloadPerfValuesPerAudioSubstreamSegment));
      }
      return 0;
    default:
      return result;
  }
  v42(v41, v40, v43);
  return 0;
}

uint64_t streamModeratorPostProcessPayloadForEvent(int a1, int a2, CFDictionaryRef theDict)
{
  __CFString *ArrayNameFromKey;
  __CFString *v5;
  const __CFArray *Value;
  const __CFArray *v7;
  CFIndex v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex v11;
  const __CFDictionary *Copy;
  const __CFDictionary *v13;

  if (a2 != 112 || !theDict || CFDictionaryGetCount(theDict) < 1)
    return 0;
  ArrayNameFromKey = fsrm_createArrayNameFromKey(CFSTR("SST"));
  v5 = fsrm_createArrayNameFromKey(CFSTR("AudSST"));
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, ArrayNameFromKey);
  v7 = Value;
  if (Value && CFArrayGetCount(Value) >= 1)
  {
    v8 = 0;
    do
    {
      if (FigCFArrayGetInt64AtIndex())
        break;
      ++v8;
    }
    while (v8 < CFArrayGetCount(v7));
  }
  v9 = (const __CFArray *)CFDictionaryGetValue(theDict, v5);
  v10 = v9;
  if (v9)
  {
    if (CFArrayGetCount(v9) < 1)
      goto LABEL_17;
    v11 = 0;
    do
    {
      if (FigCFArrayGetInt64AtIndex())
        break;
      ++v11;
    }
    while (v11 < CFArrayGetCount(v10));
  }
  if ((unint64_t)v7 | (unint64_t)v10)
  {
LABEL_17:
    FigCFDictionarySetInt64();
    fsrm_replaceTimestampWithDelta(theDict, ArrayNameFromKey);
    fsrm_replaceTimestampWithDelta(theDict, v5);
  }
  if (ArrayNameFromKey)
    CFRelease(ArrayNameFromKey);
  if (v5)
    CFRelease(v5);
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
  if (Copy)
  {
    v13 = Copy;
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)fsrm_stringifyArrayFunc, theDict);
    CFRelease(v13);
  }
  return 0;
}

uint64_t streamModeratorGetFollowupEventForEvent(uint64_t a1, int a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t MaxArrayCount;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    if (a4)
    {
      *a3 = 0;
      *a4 = 0;
      if ((a2 - 2001) <= 1)
      {
        v8 = DerivedStorage;
        MaxArrayCount = fsrm_getMaxArrayCount(*(_QWORD *)(DerivedStorage + 168), (CFArrayRef)kFigReportingEventKeyArray_DownloadPerfValuesPerMainSubstreamSegment);
        if (fsrm_getMaxArrayCount(*(_QWORD *)(v8 + 168), (CFArrayRef)kFigReportingEventKeyArray_DownloadPerfValuesPerAudioSubstreamSegment)+ MaxArrayCount >= 50)
        {
          *a3 = 112;
          *a4 = 0;
        }
      }
    }
  }
  return 0;
}

uint64_t fsrm_copyEventKeyArray(int a1)
{
  uint64_t v2;
  uint64_t *v3;

  MEMORY[0x19402F294](&fsrm_copyEventKeyArray_sCreateStaticKeyArrayFromEventKeysOnce, fsrm_createStaticDataStructuresFromEventKeys);
  v2 = 0;
  v3 = &kFigReportingEventKeyArray_AggregatedEvent;
  if (a1 > 200)
  {
    if (a1 <= 801)
    {
      if (a1 > 799)
      {
        if (a1 == 800)
          v3 = &kFigReportingEventKeyArray_IRATStreamingActivityStartEvent;
        else
          v3 = &kFigReportingEventKeyArray_IRATStreamingActivityEndEvent;
      }
      else if (a1 == 201)
      {
        v3 = &kFigReportingEventKeyArray_PumpAlternateSwitchEvent;
      }
      else
      {
        if (a1 != 202)
          return v2;
        v3 = &kFigReportingEventKeyArray_PumpErrorEvent;
      }
    }
    else if (a1 <= 900)
    {
      if (a1 == 802)
      {
        v3 = &kFigReportingEventKeyArray_IRATStallEvent;
      }
      else
      {
        if (a1 != 900)
          return v2;
        v3 = &kFigReportingEventKeyArray_PowerLogEvent;
      }
    }
    else if (a1 != 901)
    {
      if (a1 == 1001)
      {
        v3 = &kFigReportingEventKeyArray_VerboseLoggingPerMainSubstreamSegment;
      }
      else
      {
        if (a1 != 1002)
          return v2;
        v3 = &kFigReportingEventKeyArray_VerboseLoggingPerAudioSubstreamSegment;
      }
    }
LABEL_33:
    v2 = *v3;
    if (*v3)
      CFRetain((CFTypeRef)*v3);
  }
  else
  {
    switch(a1)
    {
      case 'e':
        goto LABEL_33;
      case 'g':
        v3 = &kFigReportingEventKeyArray_StallEvent;
        goto LABEL_33;
      case 'i':
        v3 = &kFigReportingEventKeyArray_LikelyToKeepUpEvent;
        goto LABEL_33;
      case 'j':
        v3 = &kFigReportingEventKeyArray_PlayRateChangedEvent;
        goto LABEL_33;
      case 'k':
        v3 = &kFigReportingEventKeyArray_PlayerErrorEvent;
        goto LABEL_33;
      case 'm':
        v3 = &kFigReportingEventKeyArray_PlayerSwitchCompleteEvent;
        goto LABEL_33;
      case 'n':
        v3 = &kFigReportingEventKeyArray_PeriodicEvent;
        goto LABEL_33;
      case 'o':
        v3 = &kFigReportingEventKeyArray_PlayerVideoVariantEndedEvent;
        goto LABEL_33;
      case 'p':
        v3 = &kFigReportingEventKeyArray_DownloadPerformanceEvent;
        goto LABEL_33;
      case 'q':
        v3 = &kFigReportingEventKeyArray_BandwidthPredictionsPeriodic;
        goto LABEL_33;
      case 'r':
        v3 = &kFigReportingEventKeyArray_PlayerFormatTransition;
        goto LABEL_33;
      case 's':
        v3 = &kFigReportingEventKeyArray_StartupPerformanceMetrics;
        goto LABEL_33;
      default:
        return v2;
    }
  }
  return v2;
}

uint64_t fsrm_getInt32FromAggregatedSessionStats(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v8;

  result = 4294949785;
  if (a1 && a3)
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 40);
    if (v7)
    {
      v8 = 0;
      result = v7(a1, 1, a2, &v8);
      if (!(_DWORD)result)
        *a3 = v8;
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t fsrm_updateProcessMemoryAndCPUSession(uint64_t a1)
{
  pid_t v2;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, __CFString *, unint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __CFString *, unint64_t);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  v2 = getpid();
  result = proc_pid_rusage(v2, 6, (rusage_info_t *)&v16);
  if (!(_DWORD)result)
  {
    v5 = *(_DWORD *)(a1 + 8) > 3u || (*(_DWORD *)(a1 + 8) & 0xF) == 1;
    v6 = v17;
    if (mach_absolute_time_to_s_have_tmscale != -1)
      dispatch_once(&mach_absolute_time_to_s_have_tmscale, &__block_literal_global_8);
    v7 = *(double *)&mach_absolute_time_to_s_tmscale * (double)v6 / 1000000000.0;
    if (!v5)
    {
      v8 = *(double *)(a1 + 200);
      if (v8 != 0.0 && v7 > v8)
      {
        v9 = *(_QWORD *)(a1 + 168);
        v10 = *(_QWORD *)(a1 + 176);
        v11 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 64);
        if (v11)
          v11(v9, v10, CFSTR("ProcCPUTime"), (unint64_t)((v7 - v8) * 1000.0));
      }
    }
    v12 = *((_QWORD *)&v20 + 1);
    v13 = *(_QWORD *)(a1 + 168);
    v14 = *(_QWORD *)(a1 + 176);
    result = CMBaseObjectGetVTable();
    v15 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(result + 16) + 72);
    if (v15)
      result = v15(v13, v14, CFSTR("ProcMem"), v12 >> 10);
    *(double *)(a1 + 200) = v7;
  }
  return result;
}

uint64_t fsrm_updateExpensiveNetworkStats(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, __CFString *, unint64_t);
  __CFString *v25;
  void (*v26)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, _QWORD, __CFString *, uint64_t *);
  uint64_t v41;

  result = FigGetUpTimeNanoseconds();
  v41 = 0;
  if (!a1)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
  {
    v5 = (result - v4) / 0xF4240uLL;
    v6 = *(int *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 168);
    v8 = *(_QWORD *)(a1 + 176);
    if (*(_BYTE *)(a1 + 160))
    {
      v9 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 64);
      if (v9)
        v9(v7, v8, CFSTR("TWIBR_BitsX"), v5 * v6);
      v10 = *(int *)(a1 + 60);
      v11 = *(_QWORD *)(a1 + 168);
      v12 = *(_QWORD *)(a1 + 176);
      v13 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
      if (v13)
        v13(v11, v12, CFSTR("TWIABR_BitsX"), v5 * v10);
      v14 = *(int *)(a1 + 64);
      v15 = *(_QWORD *)(a1 + 168);
      v16 = *(_QWORD *)(a1 + 176);
      v17 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
      if (v17)
        v17(v15, v16, CFSTR("TWVaRk_PlayTimeX"), v5 * v14);
      v18 = *(int *)(a1 + 68);
      v19 = *(_QWORD *)(a1 + 168);
      v20 = *(_QWORD *)(a1 + 176);
      v21 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
      if (v21)
        v21(v19, v20, CFSTR("TWVaBitRk_PlayTimeX"), v5 * v18);
      v22 = *(_QWORD *)(a1 + 168);
      v23 = *(_QWORD *)(a1 + 176);
      v24 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
      if (!v24)
        goto LABEL_25;
      v25 = CFSTR("PlayTimeWCX");
    }
    else
    {
      v26 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
      if (v26)
        v26(v7, v8, CFSTR("TWIBR_BitsI"), v5 * v6);
      v27 = *(int *)(a1 + 60);
      v28 = *(_QWORD *)(a1 + 168);
      v29 = *(_QWORD *)(a1 + 176);
      v30 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
      if (v30)
        v30(v28, v29, CFSTR("TWIABR_BitsI"), v5 * v27);
      v31 = *(int *)(a1 + 64);
      v32 = *(_QWORD *)(a1 + 168);
      v33 = *(_QWORD *)(a1 + 176);
      v34 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
      if (v34)
        v34(v32, v33, CFSTR("TWVaRk_PlayTimeI"), v5 * v31);
      v35 = *(int *)(a1 + 68);
      v36 = *(_QWORD *)(a1 + 168);
      v37 = *(_QWORD *)(a1 + 176);
      v38 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
      if (v38)
        v38(v36, v37, CFSTR("TWVaBitRk_PlayTimeI"), v5 * v35);
      v22 = *(_QWORD *)(a1 + 168);
      v23 = *(_QWORD *)(a1 + 176);
      v24 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
      if (!v24)
        goto LABEL_25;
      v25 = CFSTR("PlayTimeWCI");
    }
    v24(v22, v23, v25, v5);
  }
LABEL_25:
  *(_QWORD *)(a1 + 152) = v3;
  v39 = *(_QWORD *)(a1 + 168);
  result = CMBaseObjectGetVTable();
  v40 = *(uint64_t (**)(uint64_t, _QWORD, __CFString *, uint64_t *))(*(_QWORD *)(result + 16) + 144);
  if (v40)
  {
    result = v40(v39, 0, CFSTR("netX"), &v41);
    LOBYTE(v40) = v41;
  }
  *(_BYTE *)(a1 + 160) = (_BYTE)v40;
  return result;
}

uint64_t fsrm_reportAggregatedTimeWeightedStats(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, __CFString *, uint64_t *);
  void (*v7)(uint64_t, uint64_t, __CFString *, uint64_t *);
  void (*v8)(uint64_t, uint64_t, __CFString *, uint64_t *);
  uint64_t result;
  uint64_t (*v10)(uint64_t, uint64_t, __CFString *, uint64_t *);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = 0;
  v18 = 0;
  fsrm_updateExpensiveNetworkStats(a1);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 48);
  if (v6)
    v6(v4, a2, CFSTR("TWStats_PlayTime"), &v18);
  v7 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 48);
  if (v7)
    v7(v4, a2, CFSTR("ADT"), &v17);
  v19 = 0;
  v20 = 0;
  v8 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 48);
  if (v8)
    v8(v4, a2, CFSTR("PlayTimeWCX"), &v20);
  result = CMBaseObjectGetVTable();
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(result + 16) + 48);
  if (v10)
    result = v10(v4, a2, CFSTR("PlayTimeWCI"), &v19);
  if (v20)
  {
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D378, 0x1E2FFB7F8, v20);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D398, 0x1E2FFB818, v20);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D3B8, 0x1E2FFB838, v20);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D3D8, 0x1E2FFB858, v20);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D3F8, 0x1E2FFB878, v20);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D418, 0x1E2FFB898, v20);
    v11 = v20;
    result = CMBaseObjectGetVTable();
    v12 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(result + 16) + 88);
    if (v12)
      result = v12(v4, v5, CFSTR("PlayTimeWCX"), 1000 * v11);
  }
  if (v19)
  {
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D438, 0x1E2FFB8B8, v19);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D458, 0x1E2FFB8D8, v19);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D478, 0x1E2FFB8F8, v19);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D498, 0x1E2FFB918, v19);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D4B8, 0x1E2FFB938, v19);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D4D8, 0x1E2FFB958, v19);
    v13 = v19;
    result = CMBaseObjectGetVTable();
    v14 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(result + 16) + 88);
    if (v14)
      result = v14(v4, v5, CFSTR("PlayTimeWCI"), 1000 * v13);
  }
  v15 = v17;
  v16 = v18;
  if (v18)
  {
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D298, 0x1E2FF9FD8, v18);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D338, 0x1E2FFA978, v16);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D258, 0x1E301C158, v16);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D278, 0x1E301C178, v16);
    fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D2B8, 0x1E2FF9FF8, v16);
    result = fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D2D8, 0x1E2FFA018, v16);
  }
  if (v15)
    return fsrm_setTimeWeightedValue(v4, v5, a2, 0x1E301D2F8, 0x1E301C138, v15);
  return result;
}

double __mach_absolute_time_to_s_block_invoke()
{
  double result;
  unint64_t v1;
  mach_timebase_info info;

  info = 0;
  if (!mach_timebase_info(&info))
  {
    LODWORD(result) = info.numer;
    LODWORD(v1) = info.denom;
    result = (double)*(unint64_t *)&result / (double)v1;
    mach_absolute_time_to_s_tmscale = *(_QWORD *)&result;
  }
  return result;
}

uint64_t fsrm_updatePlayTimeStatsForEvent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = a3[1];
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v11)
    v11(a1, a2, a5, v10);
  v12 = *a3;
  result = CMBaseObjectGetVTable();
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 88);
  if (v14)
    result = v14(a1, a2, a4, v12);
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t fsrm_calculatePlayTimeAndUpdateTimeWeightedStats(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int (*v5)(uint64_t, _QWORD, __CFString *, uint64_t *);
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, __CFString *, CFNumberRef *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __CFString *, CFNumberRef *);
  uint64_t Int32FromAggregatedSessionStats;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v45;
  uint64_t v47;
  uint64_t valuePtr;
  CFNumberRef number;
  CFNumberRef v50;
  uint64_t v51;
  uint64_t v52;

  v50 = 0;
  v51 = 0;
  valuePtr = 0;
  number = 0;
  v47 = 0;
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(unsigned int (**)(uint64_t, _QWORD, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 160);
  if (!v5 || v5(v4, 0, CFSTR("PlayTimeWC"), &v51))
    v51 = 1;
  v6 = *(_QWORD *)(a1 + 168);
  v7 = *(void (**)(uint64_t, uint64_t, __CFString *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (v7)
    v7(v6, 1, CFSTR("PlayerIABR"), &number);
  if (number)
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
  if (v9)
  {
    Int32FromAggregatedSessionStats = v9(v8, 1, CFSTR("PlayerIBR"), &v50);
    if (!(_DWORD)Int32FromAggregatedSessionStats)
    {
      if (v50)
        CFNumberGetValue(v50, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      if (!HIDWORD(valuePtr))
        goto LABEL_40;
      Int32FromAggregatedSessionStats = fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(a1 + 168), 0x1E2FFA0B8, (_DWORD *)&v47 + 1);
      if (!(_DWORD)Int32FromAggregatedSessionStats)
      {
        Int32FromAggregatedSessionStats = fsrm_getInt32FromAggregatedSessionStats(*(_QWORD *)(a1 + 168), 0x1E2FFA918, &v47);
        if (!(_DWORD)Int32FromAggregatedSessionStats)
        {
          fsrm_updateExpensiveNetworkStats(a1);
          v11 = v51;
          v13 = valuePtr;
          v12 = HIDWORD(valuePtr);
          v15 = v47;
          v14 = HIDWORD(v47);
          v52 = 0;
          if (a2 && v51 >= 1)
          {
            v16 = *(const __CFNumber **)(a2 + 88);
            if (v16)
              CFNumberGetValue(v16, kCFNumberSInt32Type, (char *)&v52 + 4);
            v17 = *(const __CFNumber **)(a2 + 96);
            if (v17)
              CFNumberGetValue(v17, kCFNumberSInt32Type, &v52);
            v18 = *(_DWORD *)(a2 + 56);
            if (!v18)
            {
              *(_DWORD *)(a2 + 56) = v12;
              v18 = v12;
            }
            if (!*(_DWORD *)(a2 + 60))
              *(_DWORD *)(a2 + 60) = v13;
            v19 = *(_QWORD *)(a1 + 168);
            v20 = *(_QWORD *)(a1 + 176);
            v21 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
            if (v21)
              v21(v19, v20, CFSTR("TWIBR_Bits"), v11 * v18);
            v22 = *(int *)(a2 + 60);
            v23 = *(_QWORD *)(a1 + 168);
            v24 = *(_QWORD *)(a1 + 176);
            v25 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
            if (v25)
              v25(v23, v24, CFSTR("TWIABR_Bits"), v11 * v22);
            v26 = *(int *)(a2 + 64);
            v27 = *(_QWORD *)(a1 + 168);
            v28 = *(_QWORD *)(a1 + 176);
            v29 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
            if (v29)
              v29(v27, v28, CFSTR("TWVaRk_PlayTime"), v11 * v26);
            v30 = *(int *)(a2 + 68);
            v31 = *(_QWORD *)(a1 + 168);
            v32 = *(_QWORD *)(a1 + 176);
            v33 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
            if (v33)
              v33(v31, v32, CFSTR("TWVaBitRk_PlayTime"), v11 * v30);
            v34 = SHIDWORD(v52);
            v35 = *(_QWORD *)(a1 + 168);
            v36 = *(_QWORD *)(a1 + 176);
            v37 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
            if (v37)
              v37(v35, v36, CFSTR("PlayerTWIBR_Bits"), v11 * v34);
            v38 = (int)v52;
            v39 = *(_QWORD *)(a1 + 168);
            v40 = *(_QWORD *)(a1 + 176);
            v41 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
            if (v41)
              v41(v39, v40, CFSTR("PlayerTWIABR_Bits"), v11 * v38);
            v43 = *(_QWORD *)(a1 + 168);
            v42 = *(_QWORD *)(a1 + 176);
            v44 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
            if (v44)
              v44(v43, v42, CFSTR("TWStats_PlayTime"), v11);
            *(_QWORD *)(a2 + 48) = v11;
            *(_DWORD *)(a2 + 56) = v12;
            *(_DWORD *)(a2 + 60) = v13;
            *(_DWORD *)(a2 + 64) = v14;
            *(_DWORD *)(a2 + 68) = v15;
          }
LABEL_40:
          v45 = 0;
          goto LABEL_42;
        }
      }
    }
    v45 = Int32FromAggregatedSessionStats;
  }
  else
  {
    v45 = 4294954514;
  }
LABEL_42:
  if (number)
    CFRelease(number);
  if (v50)
    CFRelease(v50);
  return v45;
}

uint64_t fsrm_copyPlayerIndicatedBitrate(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = fsrm_copyCFTypeValueFromAggregatedStats(a1, 0x1E2FFA458, (uint64_t *)(a2 + 88));
  if (!(_DWORD)result)
    return fsrm_copyCFTypeValueFromAggregatedStats(a1, 0x1E2FFA438, (uint64_t *)(a2 + 96));
  return result;
}

uint64_t fsrm_copyCFTypeValueFromAggregatedStats(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 4294949785;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 56);
  if (v6)
  {
    v7 = v6(a1, 1, a2, &cf);
    if ((_DWORD)v7)
    {
      v9 = v7;
    }
    else
    {
      v8 = cf;
      if (!cf)
        return 4294949781;
      v9 = *a3;
      *a3 = (uint64_t)cf;
      CFRetain(v8);
      if (v9)
      {
        CFRelease((CFTypeRef)v9);
        v9 = 0;
      }
    }
  }
  else
  {
    v9 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t fsrm_setSessionEndReasonIfFatalError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, const __CFString **);
  const __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, __CFString *, const __CFString *);
  const __CFString *v33;
  const __CFString *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = 1;
  if (!a3
    || (v12 = *(_QWORD *)(a1 + 168),
        (v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 144)) == 0)
    || (result = v13(v12, a2, a3, &v37), v37 == 1))
  {
    v35 = 0;
    v36 = 0;
    v34 = 0;
    v15 = *(_QWORD *)(a1 + 168);
    result = CMBaseObjectGetVTable();
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(result + 16) + 144);
    if (v16)
    {
      result = v16(v15, a2, a4, &v36);
      if (!(_DWORD)result)
      {
        v17 = *(_QWORD *)(a1 + 168);
        v18 = *(_QWORD *)(a1 + 176);
        v19 = v36;
        v20 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 88);
        if (v20)
          v20(v17, v18, CFSTR("EndErrCode"), v19);
        v21 = *(_QWORD *)(a1 + 168);
        result = CMBaseObjectGetVTable();
        v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(result + 16) + 152);
        if (v22)
        {
          result = v22(v21, a2, a6, &v35);
          if (!(_DWORD)result)
          {
            v23 = *(_QWORD *)(a1 + 168);
            v24 = *(_QWORD *)(a1 + 176);
            v25 = v35;
            result = CMBaseObjectGetVTable();
            v26 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(result + 16) + 80);
            if (v26)
              result = v26(v23, v24, CFSTR("EndErrMsg"), v25);
            if (a5)
            {
              v27 = *(_QWORD *)(a1 + 168);
              v28 = *(void (**)(uint64_t, uint64_t, uint64_t, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 152);
              if (v28)
              {
                v28(v27, a2, a5, &v34);
                v29 = v34;
              }
              else
              {
                v29 = 0;
              }
              v31 = *(_QWORD *)(a1 + 168);
              v30 = *(_QWORD *)(a1 + 176);
              result = CMBaseObjectGetVTable();
              v32 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(result + 16)
                                                                                                 + 80);
              if (v32)
              {
                if (v29)
                  v33 = v29;
                else
                  v33 = CFSTR("CoreMediaErrorDomain");
                return v32(v31, v30, CFSTR("EndErrDomain"), v33);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fsrm_setTimeWeightedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v16 = 0;
  result = CMBaseObjectGetVTable();
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(result + 16) + 48);
  if (v13)
  {
    result = v13(a1, a3, a4, &v16);
    if (!(_DWORD)result)
    {
      if (a6)
      {
        v14 = v16;
        if (v16)
        {
          result = CMBaseObjectGetVTable();
          v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 88);
          if (v15)
            return v15(a1, a2, a5, v14 / a6);
        }
      }
    }
  }
  return result;
}

void *fsrm_createStaticDataStructuresFromEventKeys()
{
  const __CFAllocator *v0;
  void *result;
  _BYTE v2[2968];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  memcpy(v2, &off_1E2F7D110, sizeof(v2));
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v2, 371, 0);
  kFigReportingEventKeyArray_AggregatedEvent = (uint64_t)result;
  if (result)
  {
    memcpy(v2, off_1E2F7DCA8, 0x5C0uLL);
    result = CFArrayCreate(v0, (const void **)v2, 184, 0);
    kFigReportingEventKeyArray_PeriodicEvent = (uint64_t)result;
    if (result)
    {
      memcpy(v2, off_1E2F7E268, 0x2C8uLL);
      result = CFArrayCreate(v0, (const void **)v2, 89, 0);
      kFigReportingEventKeyArray_PlayRateChangedEvent = (uint64_t)result;
      if (result)
      {
        memcpy(v2, off_1E2F7E530, 0x3A8uLL);
        result = CFArrayCreate(v0, (const void **)v2, 117, 0);
        kFigReportingEventKeyArray_PlayerSwitchCompleteEvent = (uint64_t)result;
        if (result)
        {
          memcpy(v2, off_1E2F7E8D8, 0x190uLL);
          result = CFArrayCreate(v0, (const void **)v2, 50, 0);
          kFigReportingEventKeyArray_PumpAlternateSwitchEvent = (uint64_t)result;
          if (result)
          {
            memcpy(v2, &off_1E2F7EA68, 0x5D0uLL);
            result = CFArrayCreate(v0, (const void **)v2, 186, 0);
            kFigReportingEventKeyArray_LikelyToKeepUpEvent = (uint64_t)result;
            if (result)
            {
              memcpy(v2, off_1E2F7F038, 0x3B0uLL);
              result = CFArrayCreate(v0, (const void **)v2, 118, 0);
              kFigReportingEventKeyArray_StallEvent = (uint64_t)result;
              if (result)
              {
                memcpy(v2, off_1E2F7F3E8, 0x288uLL);
                result = CFArrayCreate(v0, (const void **)v2, 81, 0);
                kFigReportingEventKeyArray_PumpErrorEvent = (uint64_t)result;
                if (result)
                {
                  memcpy(v2, off_1E2F7F670, 0x348uLL);
                  result = CFArrayCreate(v0, (const void **)v2, 105, 0);
                  kFigReportingEventKeyArray_PlayerErrorEvent = (uint64_t)result;
                  if (result)
                  {
                    *(_OWORD *)&v2[32] = xmmword_1E2F7F9D8;
                    *(_OWORD *)&v2[48] = *(_OWORD *)&off_1E2F7F9E8;
                    *(_QWORD *)&v2[64] = &kFigReportingEventKey_InterfaceType;
                    *(_OWORD *)v2 = xmmword_1E2F7F9B8;
                    *(_OWORD *)&v2[16] = *(_OWORD *)&off_1E2F7F9C8;
                    result = CFArrayCreate(v0, (const void **)v2, 9, 0);
                    kFigReportingEventKeyArray_PowerLogEvent = (uint64_t)result;
                    if (result)
                    {
                      *(_OWORD *)v2 = xmmword_1E2F7FA00;
                      *(_QWORD *)&v2[16] = 0;
                      result = CFArrayCreate(v0, (const void **)v2, 3, 0);
                      kFigReportingEventKeyArray_IRATStreamingActivityStartEvent = (uint64_t)result;
                      if (result)
                      {
                        *(_OWORD *)v2 = xmmword_1E2F7FA18;
                        *(_OWORD *)&v2[16] = *(_OWORD *)&off_1E2F7FA28;
                        *(_OWORD *)&v2[32] = xmmword_1E2F7FA38;
                        result = CFArrayCreate(v0, (const void **)v2, 6, 0);
                        kFigReportingEventKeyArray_IRATStreamingActivityEndEvent = (uint64_t)result;
                        if (result)
                        {
                          *(_OWORD *)v2 = xmmword_1E2F7FA48;
                          result = CFArrayCreate(v0, (const void **)v2, 2, 0);
                          kFigReportingEventKeyArray_IRATStallEvent = (uint64_t)result;
                          if (result)
                          {
                            memcpy(v2, off_1E2F7FA58, 0x368uLL);
                            result = CFArrayCreate(v0, (const void **)v2, 109, 0);
                            kFigReportingEventKeyArray_VerboseLoggingPerMainSubstreamSegment = (uint64_t)result;
                            if (result)
                            {
                              memcpy(v2, off_1E2F7FDC0, 0x260uLL);
                              result = CFArrayCreate(v0, (const void **)v2, 76, 0);
                              kFigReportingEventKeyArray_VerboseLoggingPerAudioSubstreamSegment = (uint64_t)result;
                              if (result)
                              {
                                *(_OWORD *)&v2[160] = xmmword_1E2F800C0;
                                *(_OWORD *)&v2[176] = *(_OWORD *)off_1E2F800D0;
                                *(_QWORD *)&v2[192] = &kFigReportingEventKey_HasSufficientBandwidthHistory;
                                *(_OWORD *)&v2[96] = xmmword_1E2F80080;
                                *(_OWORD *)&v2[112] = *(_OWORD *)&off_1E2F80090;
                                *(_OWORD *)&v2[128] = xmmword_1E2F800A0;
                                *(_OWORD *)&v2[144] = *(_OWORD *)&off_1E2F800B0;
                                *(_OWORD *)&v2[32] = xmmword_1E2F80040;
                                *(_OWORD *)&v2[48] = *(_OWORD *)&off_1E2F80050;
                                *(_OWORD *)&v2[64] = xmmword_1E2F80060;
                                *(_OWORD *)&v2[80] = *(_OWORD *)&off_1E2F80070;
                                *(_OWORD *)v2 = xmmword_1E2F80020;
                                *(_OWORD *)&v2[16] = *(_OWORD *)&off_1E2F80030;
                                result = CFArrayCreate(v0, (const void **)v2, 25, 0);
                                kFigReportingEventKeyArray_FetchKeysFromAggregatedSessionStats = (uint64_t)result;
                                if (result)
                                {
                                  memcpy(v2, off_1E2F800E8, 0x350uLL);
                                  result = CFArrayCreate(v0, (const void **)v2, 106, 0);
                                  kFigReportingEventKeyArray_PeriodicEventKeysToReset = (uint64_t)result;
                                  if (result)
                                  {
                                    *(_OWORD *)v2 = xmmword_1E2F80438;
                                    result = CFArrayCreate(v0, (const void **)v2, 2, 0);
                                    kFigReportingEventKeyArray_PeriodicStatsActivityMonitor = (uint64_t)result;
                                    if (result)
                                    {
                                      memcpy(v2, off_1E2F80448, 0x2D0uLL);
                                      result = CFArrayCreate(v0, (const void **)v2, 90, 0);
                                      kFigReportingEventKeyArray_PlayerVideoVariantEndedEvent = (uint64_t)result;
                                      if (result)
                                      {
                                        memcpy(v2, off_1E2F80718, 0x220uLL);
                                        result = CFArrayCreate(v0, (const void **)v2, 68, 0);
                                        kFigReportingEventKeyArray_DownloadPerformanceEvent = (uint64_t)result;
                                        if (result)
                                        {
                                          memcpy(v2, off_1E2F80938, 0x358uLL);
                                          result = CFArrayCreate(v0, (const void **)v2, 107, 0);
                                          kFigReportingEventKeyArray_PlayerFormatTransition = (uint64_t)result;
                                          if (result)
                                          {
                                            memcpy(v2, &off_1E2F80C90, 0x280uLL);
                                            result = CFArrayCreate(v0, (const void **)v2, 80, 0);
                                            kFigReportingEventKeyArray_StartupPerformanceMetrics = (uint64_t)result;
                                            if (result)
                                            {
                                              memcpy(v2, off_1E2F80F10, 0x210uLL);
                                              result = CFArrayCreate(v0, (const void **)v2, 66, 0);
                                              kFigReportingEventKeyArray_DownloadPerfValuesPerMainSubstreamSegment = (uint64_t)result;
                                              if (result)
                                              {
                                                memcpy(v2, off_1E2F81120, 0x160uLL);
                                                result = CFArrayCreate(v0, (const void **)v2, 44, 0);
                                                kFigReportingEventKeyArray_DownloadPerfValuesPerAudioSubstreamSegment = (uint64_t)result;
                                                if (result)
                                                {
                                                  memcpy(v2, off_1E2F81280, 0x1E8uLL);
                                                  result = CFArrayCreate(v0, (const void **)v2, 61, 0);
                                                  kFigReportingEventKeyArray_BandwidthPredictionsPeriodic = (uint64_t)result;
                                                  if (result)
                                                  {
                                                    result = fsrm_createStaticKeySetFromEventKeys((const void ***)off_1E2F81468, 0x25uLL);
                                                    kFigReportingFrozenKeySetForEvent_LikelyToKeepUp = (uint64_t)result;
                                                    if (result)
                                                    {
                                                      result = fsrm_createStaticKeySetFromEventKeys((const void ***)off_1E2F81590, 0xAuLL);
                                                      kFigReportingFrozenKeySetForEvent_StartupPerformanceMetrics = (uint64_t)result;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

const void **fsrm_createStaticKeySetFromEventKeys(const void ***a1, size_t count)
{
  int v2;
  CFIndex v4;
  const void **result;
  const void **v6;
  CFIndex v7;
  const void **v8;
  const void **v9;
  CFSetRef v10;

  v2 = count;
  v4 = count;
  result = (const void **)malloc_type_calloc(count, 8uLL, 0x80040B8603338uLL);
  if (result)
  {
    v6 = result;
    if (v2 >= 1)
    {
      v7 = v4;
      v8 = result;
      do
      {
        v9 = *a1++;
        *v8++ = *v9;
        --v7;
      }
      while (v7);
    }
    v10 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], result, v4, MEMORY[0x1E0C9B3B0]);
    free(v6);
    return (const void **)v10;
  }
  return result;
}

__CFString *fsrm_createArrayNameFromKey(CFStringRef theString)
{
  __CFString *MutableCopy;
  __CFString *v2;

  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  v2 = MutableCopy;
  if (MutableCopy)
    CFStringAppend(MutableCopy, CFSTR("_Array"));
  return v2;
}

void fsrm_replaceTimestampWithDelta(const __CFDictionary *a1, const void *a2)
{
  const __CFArray *Value;
  const __CFArray *v5;
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  CFIndex v8;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v5 = Value;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v7 = Mutable;
      if (CFArrayGetCount(v5) >= 1)
      {
        v8 = 0;
        do
        {
          if (FigCFArrayGetInt64AtIndex())
            FigCFArrayAppendInt64();
          else
            CFArrayAppendValue(v7, CFSTR("-"));
          ++v8;
        }
        while (v8 < CFArrayGetCount(v5));
      }
      FigCFDictionarySetValue();
      CFRelease(v7);
    }
  }
  CFDictionaryRemoveValue(a1, a2);
}

void fsrm_stringifyArrayFunc(const void *a1, const __CFArray *a2, __CFDictionary *a3)
{
  CFTypeID TypeID;
  CFMutableStringRef Mutable;
  __CFString *v8;
  CFIndex v9;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v11;
  CFTypeID v12;
  uint64_t valuePtr;

  if (a3)
  {
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      if (Mutable)
      {
        v8 = Mutable;
        if (CFArrayGetCount(a2) >= 1)
        {
          v9 = 0;
          do
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, v9);
            if (ValueAtIndex && (v11 = ValueAtIndex, v12 = CFNumberGetTypeID(), v12 == CFGetTypeID(v11)))
            {
              valuePtr = 0;
              CFNumberGetValue(v11, kCFNumberSInt64Type, &valuePtr);
              CFStringAppendFormat(v8, 0, CFSTR("%lld"), valuePtr);
            }
            else
            {
              CFStringAppend(v8, CFSTR("-"));
            }
            if (++v9 < CFArrayGetCount(a2))
              CFStringAppend(v8, CFSTR(","));
          }
          while (v9 < CFArrayGetCount(a2));
        }
        CFDictionarySetValue(a3, a1, v8);
        CFRelease(v8);
      }
    }
  }
}

uint64_t fsrm_getMaxArrayCount(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v4;
  CFIndex v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t *);
  uint64_t v9;

  if (CFArrayGetCount(theArray) < 1)
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v9 = 0;
    v6 = *(_QWORD *)CFArrayGetValueAtIndex(theArray, v5);
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v7)
      v7(a1, v6, &v9);
    if (v4 <= v9)
      v4 = v9;
    ++v5;
  }
  while (v5 < CFArrayGetCount(theArray));
  return v4;
}

uint64_t PIQCopyPerformanceDictionaryForInstanceStatistics(const __CFAllocator *a1, int *a2, __CFDictionary **a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  int v8;
  int v9;
  CFTypeRef v10;
  int v11;
  int v12;
  int v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  CFMutableArrayRef v17;
  int *v18;
  uint64_t v19;
  CFTypeRef cf;

  cf = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  if (*a2)
  {
    if (*a2 >= 100)
      v8 = 100;
    else
      v8 = *a2;
    v9 = piqCopyArrayOfMilliseconds(a1, v8, a2 + 6, (CFArrayRef *)&cf);
    v10 = cf;
    if (v9)
    {
      if (!cf)
        goto LABEL_8;
      goto LABEL_7;
    }
    CFDictionarySetValue(Mutable, CFSTR("DisplayTimesOfFramesDroppedFromImageQueue"), cf);
    if (v10)
    {
LABEL_7:
      CFRelease(v10);
      cf = 0;
    }
  }
LABEL_8:
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  if (a2[5])
    FigCFDictionarySetDouble();
  if (a2[4])
    FigCFDictionarySetInt32();
  if (a2[224])
    FigCFDictionarySetInt32();
  v11 = a2[4];
  if (v11)
  {
    if (v11 >= 100)
      v12 = 100;
    else
      v12 = a2[4];
    v13 = piqCopyArrayOfMilliseconds(a1, v12, a2 + 106, (CFArrayRef *)&cf);
    v14 = cf;
    if (!v13)
    {
      CFDictionarySetValue(Mutable, CFSTR("DisplayTimesOfFramesConsumedAtLeast16msLate"), cf);
      if (!v14)
        goto LABEL_21;
      goto LABEL_20;
    }
    if (cf)
LABEL_20:
      CFRelease(v14);
  }
LABEL_21:
  v15 = 0;
  LODWORD(v16) = 0;
  do
  {
    if (a2[v15 + 215])
      v16 = (v15 + 2);
    else
      v16 = v16;
    ++v15;
  }
  while (v15 != 9);
  if ((int)v16 >= 2)
  {
    v17 = CFArrayCreateMutable(v6, (v16 - 1), MEMORY[0x1E0C9B378]);
    v18 = a2 + 215;
    v19 = v16 - 1;
    do
    {
      ++v18;
      FigCFArrayAppendInt32();
      --v19;
    }
    while (v19);
    CFDictionarySetValue(Mutable, CFSTR("DisplayCountHistogram"), v17);
    if (v17)
      CFRelease(v17);
  }
  *a3 = Mutable;
  return 0;
}

uint64_t piqCopyArrayOfMilliseconds(const __CFAllocator *a1, int a2, int *a3, CFArrayRef *a4)
{
  CFIndex v8;
  const void **v9;
  const void **v10;
  const __CFAllocator *v11;
  CFNumberRef *v12;
  CFIndex v13;
  int v14;
  CFNumberRef v15;
  CFArrayRef v16;
  uint64_t v17;
  CFTypeRef *v19;
  double valuePtr;

  v8 = a2;
  v9 = (const void **)malloc_type_calloc(8uLL, a2, 0x900D8D76uLL);
  if (!v9)
    return FigSignalErrorAt();
  v10 = v9;
  if (a2 >= 1)
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = (CFNumberRef *)v9;
    v13 = v8;
    do
    {
      v14 = *a3++;
      valuePtr = (double)v14 * 0.001;
      v15 = CFNumberCreate(v11, kCFNumberDoubleType, &valuePtr);
      *v12 = v15;
      if (!v15)
        goto LABEL_9;
      ++v12;
    }
    while (--v13);
  }
  v16 = CFArrayCreate(a1, v10, v8, MEMORY[0x1E0C9B378]);
  *a4 = v16;
  if (!v16)
  {
LABEL_9:
    v17 = FigSignalErrorAt();
    goto LABEL_10;
  }
  v17 = 0;
LABEL_10:
  if (a2 >= 1)
  {
    v19 = v10;
    do
    {
      if (*v19)
        CFRelease(*v19);
      ++v19;
      --v8;
    }
    while (v8);
  }
  free(v10);
  return v17;
}

uint64_t FigMutableCompositionServerStart()
{
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t HandleMutableCompositionMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v7;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  v7 = 0;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  v4 = LookupMutableCompositionByObjectIDForConnection();
  if ((_DWORD)v4)
    return v4;
  else
    return 4294951138;
}

uint64_t LookupMutableCompositionByObjectIDForConnection()
{
  uint64_t result;

  result = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleMutableCompositionCreateMutableCopyMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t (*v6)(_QWORD, uint64_t, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  const void **v12;
  CFTypeRef cf;
  uint64_t value;

  cf = 0;
  value = 0;
  v12 = 0;
  v6 = *(uint64_t (**)(_QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
  {
    v7 = v6(*MEMORY[0x1E0C9AE00], a2, &cf);
    if ((_DWORD)v7)
    {
      v10 = v7;
LABEL_6:
      v9 = 0;
      goto LABEL_8;
    }
    v8 = CreateServedMutableCompositionState(a1, &v12);
    v9 = v12;
    if (!(_DWORD)v8)
    {
      v10 = FigXPCServerAssociateObjectWithConnection();
      if ((_DWORD)v10)
        goto LABEL_8;
      xpc_dictionary_set_uint64(a3, (const char *)*MEMORY[0x1E0CA36A0], value);
      goto LABEL_6;
    }
    v10 = v8;
  }
  else
  {
    v9 = 0;
    v10 = 4294954514;
  }
LABEL_8:
  DisposeServedMutableCompositionState(v9);
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t HandleMutableCompositionCopyFormatReaderMessage(_xpc_connection_s *a1, uint64_t a2, xpc_object_t xdict, void *a4)
{
  _BOOL8 v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _BOOL8, CFTypeRef, CFTypeRef *);
  uint64_t v10;
  CFTypeRef v12;
  CFTypeRef cf;

  v12 = 0;
  cf = 0;
  v7 = xpc_dictionary_get_BOOL(xdict, "MakeImmutableSnapshot");
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
    goto LABEL_12;
  v9 = *(uint64_t (**)(uint64_t, _BOOL8, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 16);
  if (!v9)
  {
    v10 = 4294954514;
    goto LABEL_7;
  }
  v8 = v9(a2, v7, cf, &v12);
  if ((_DWORD)v8)
  {
LABEL_12:
    v10 = v8;
  }
  else
  {
    v10 = FigXPCFormatReaderServerAssociateCopiedNeighborFormatReader(a1, (uint64_t)v12);
    if (!(_DWORD)v10)
      xpc_dictionary_set_uint64(a4, "FormatReader", 0);
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return v10;
}

uint64_t HandleMutableCompositionCopyAssetMessage(_xpc_connection_s *a1, uint64_t a2, xpc_object_t xdict, void *a4)
{
  _BOOL8 v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _BOOL8, CFTypeRef, CFTypeRef *);
  uint64_t v10;
  CFTypeRef cf;
  CFTypeRef v13;

  cf = 0;
  v13 = 0;
  v7 = xpc_dictionary_get_BOOL(xdict, "MakeImmutableSnapshot");
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
    goto LABEL_12;
  v9 = *(uint64_t (**)(uint64_t, _BOOL8, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 208);
  if (!v9)
  {
    v10 = 4294954514;
    goto LABEL_7;
  }
  v8 = v9(a2, v7, v13, &cf);
  if ((_DWORD)v8)
  {
LABEL_12:
    v10 = v8;
  }
  else
  {
    v10 = FigXPCAssetServerAssociateCopiedNeighborAsset(a1);
    if (!(_DWORD)v10)
      xpc_dictionary_set_uint64(a4, "Asset", 0);
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  return v10;
}

uint64_t HandleMutableCompositionGetTrackCompatibleWithAssetTrackMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  int64_t int64;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, int64_t, int64_t *);
  uint64_t v8;
  int64_t value;

  LODWORD(value) = 0;
  int64 = xpc_dictionary_get_int64(xdict, "AssetTrackID");
  v6 = FigXPCMessageCopyCFURL();
  if ((_DWORD)v6)
    return v6;
  v7 = *(uint64_t (**)(uint64_t, _QWORD, int64_t, int64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v7)
    return 4294954514;
  v8 = v7(a1, 0, int64, &value);
  if (!(_DWORD)v8)
    xpc_dictionary_set_int64(a3, "TrackID", (int)value);
  return v8;
}

uint64_t HandleMutableCompositionAddTrackMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  int64_t int64;
  uint64_t uint64;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, int64_t, int64_t *);
  uint64_t v10;
  int64_t value;

  LODWORD(value) = 0;
  int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  uint64 = xpc_dictionary_get_uint64(xdict, "MediaType");
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
    return v8;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, int64_t, int64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 32);
  if (!v9)
    return 4294954514;
  v10 = v9(a1, uint64, 0, int64, &value);
  if (!(_DWORD)v10)
    xpc_dictionary_set_int64(a3, "TrackID", (int)value);
  return v10;
}

uint64_t HandleMutableCompositionDeleteTrackMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  uint64_t (*v4)(uint64_t, int64_t);

  int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  v4 = *(uint64_t (**)(uint64_t, int64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
    return v4(a1, int64);
  else
    return 4294954514;
}

uint64_t HandleMutableCompositionSetTrackEditListMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  int64_t v5;
  const UInt8 *data;
  const UInt8 *v7;
  char *v8;
  char *v9;
  uint64_t EditArrayFromData;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, int64_t, int64_t, char *);
  uint64_t v13;
  const void *v14;
  size_t length;

  length = 0;
  int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  v5 = xpc_dictionary_get_int64(xdict, "EditCount");
  if (v5 < 1)
  {
    v9 = 0;
  }
  else
  {
    data = (const UInt8 *)xpc_dictionary_get_data(xdict, "EditListData", &length);
    if (!data)
      return FigSignalErrorAt();
    if (!length)
      return FigSignalErrorAt();
    v7 = data;
    v8 = (char *)malloc_type_calloc(v5, 0x6CuLL, 0x1060040CB727B4DuLL);
    if (!v8)
      return FigSignalErrorAt();
    v9 = v8;
    EditArrayFromData = FigRemote_CreateEditArrayFromData(v7, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, (uint64_t)v8);
    if ((_DWORD)EditArrayFromData)
    {
      v11 = EditArrayFromData;
      goto LABEL_13;
    }
  }
  v12 = *(uint64_t (**)(uint64_t, int64_t, int64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v12)
  {
    v11 = v12(a1, int64, v5, v9);
    if (!v9)
      return v11;
LABEL_12:
    if (v5 < 1)
    {
LABEL_17:
      free(v9);
      return v11;
    }
LABEL_13:
    v13 = 96;
    do
    {
      v14 = *(const void **)&v9[v13];
      if (v14)
        CFRelease(v14);
      v13 += 108;
      --v5;
    }
    while (v5);
    goto LABEL_17;
  }
  v11 = 4294954514;
  if (v9)
    goto LABEL_12;
  return v11;
}

uint64_t HandleMutableCompositionCopyTrackEditListMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  int64_t int64;
  uint64_t (*v6)(uint64_t, int64_t, size_t *, _QWORD, _QWORD);
  uint64_t v7;
  CFTypeRef *v8;
  CFTypeRef *v9;
  size_t v10;
  uint64_t (*v11)(uint64_t, int64_t, _QWORD, size_t, CFTypeRef *);
  uint64_t v12;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  CFTypeRef *v18;
  CFDataRef theData;
  size_t count;

  theData = 0;
  count = 0;
  int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  v6 = *(uint64_t (**)(uint64_t, int64_t, size_t *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v6)
    return 4294954514;
  v7 = v6(a1, int64, &count, 0, 0);
  if ((_DWORD)v7)
    return v7;
  v8 = (CFTypeRef *)malloc_type_calloc(count, 0x6CuLL, 0x1060040CB727B4DuLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  v10 = count;
  v11 = *(uint64_t (**)(uint64_t, int64_t, _QWORD, size_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 56);
  if (v11)
  {
    v12 = v11(a1, int64, 0, v10, v9);
    if ((_DWORD)v12
      || (v12 = FigRemote_CreateEditArrayData(count, (uint64_t)v9, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &theData),
          (_DWORD)v12))
    {
      v15 = v12;
    }
    else
    {
      if (theData)
      {
        BytePtr = CFDataGetBytePtr(theData);
        Length = CFDataGetLength(theData);
        xpc_dictionary_set_data(a3, "EditListData", BytePtr, Length);
      }
      xpc_dictionary_set_int64(a3, "EditCount", count);
      v15 = 0;
    }
  }
  else
  {
    v15 = 4294954514;
  }
  v16 = count;
  if ((uint64_t)count >= 1)
  {
    v17 = 0;
    v18 = v9 + 12;
    do
    {
      if (*v18)
      {
        CFRelease(*v18);
        v16 = count;
      }
      ++v17;
      v18 = (CFTypeRef *)((char *)v18 + 108);
    }
    while (v16 > v17);
  }
  free(v9);
  if (theData)
    CFRelease(theData);
  return v15;
}

uint64_t HandleMutableCompositionAddFormatReaderForURLMessage(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD);

  xpc_dictionary_get_uint64(xdict, "FormatReader");
  v3 = FigXPCFormatReaderServerCopyFormatReaderForID();
  if (!(_DWORD)v3)
  {
    v3 = FigXPCMessageCopyCFURL();
    if (!(_DWORD)v3)
    {
      v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (!v4)
        return 4294954514;
      return v4(a1, 0, 0);
    }
  }
  return v3;
}

uint64_t HandleMutableCompositionCopyTrackPropertyMessage(int a1, xpc_object_t xdict)
{
  uint64_t result;

  xpc_dictionary_get_int64(xdict, "TrackID");
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleMutableCompositionSetTrackPropertyMessage(int a1, xpc_object_t xdict)
{
  uint64_t result;

  xpc_dictionary_get_int64(xdict, "TrackID");
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleMutableCompositionInsertAssetSegmentIntoTrackMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  int64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, int64_t, _QWORD, int64_t, __int128 *, __int128 *, __int128 *);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v12 = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v11 = *MEMORY[0x1E0CA2E68];
  v10 = *MEMORY[0x1E0CA2E68];
  int64 = xpc_dictionary_get_int64(xdict, "DestTrackID");
  v5 = xpc_dictionary_get_int64(xdict, "AssetTrackID");
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v6 = FigXPCMessageCopyCFURL();
  if (!(_DWORD)v6)
  {
    v7 = *(uint64_t (**)(uint64_t, int64_t, _QWORD, int64_t, __int128 *, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (!v7)
      return 4294954514;
    v18 = v12;
    v19 = v13;
    v16 = v11;
    v17 = v13;
    v14 = v10;
    v15 = v13;
    return v7(a1, int64, 0, v5, &v18, &v16, &v14);
  }
  return v6;
}

uint64_t HandleMutableCompositionInsertAssetSegmentMessage(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD, __int128 *, __int128 *, __int128 *);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v8 = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v7 = *MEMORY[0x1E0CA2E68];
  v6 = *MEMORY[0x1E0CA2E68];
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v2 = FigXPCMessageCopyCFURL();
  if (!(_DWORD)v2)
  {
    v3 = *(uint64_t (**)(uint64_t, _QWORD, __int128 *, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 96);
    if (!v3)
      return 4294954514;
    v14 = v8;
    v15 = v9;
    v12 = v7;
    v13 = v9;
    v10 = v6;
    v11 = v9;
    return v3(a1, 0, &v14, &v12, &v10);
  }
  return v2;
}

uint64_t HandleMutableCompositionInsertEmptyTrackSegmentMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  uint64_t (*v4)(uint64_t, int64_t, __int128 *, __int128 *);
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v7 = *MEMORY[0x1E0CA2E68];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v6 = *MEMORY[0x1E0CA2E68];
  int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v4 = *(uint64_t (**)(uint64_t, int64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 104);
  if (!v4)
    return 4294954514;
  v11 = v7;
  v12 = v8;
  v9 = v6;
  v10 = v8;
  return v4(a1, int64, &v11, &v9);
}

uint64_t HandleMutableCompositionInsertEmptySegmentMessage(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, __int128 *, __int128 *);
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v5 = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v4 = *MEMORY[0x1E0CA2E68];
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v2 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (!v2)
    return 4294954514;
  v9 = v5;
  v10 = v6;
  v7 = v4;
  v8 = v6;
  return v2(a1, &v9, &v7);
}

uint64_t HandleMutableCompositionDeleteTrackSegmentMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  uint64_t (*v4)(uint64_t, int64_t, __int128 *, __int128 *);
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v7 = *MEMORY[0x1E0CA2E68];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v6 = *MEMORY[0x1E0CA2E68];
  int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v4 = *(uint64_t (**)(uint64_t, int64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 120);
  if (!v4)
    return 4294954514;
  v11 = v7;
  v12 = v8;
  v9 = v6;
  v10 = v8;
  return v4(a1, int64, &v11, &v9);
}

uint64_t HandleMutableCompositionDeleteSegmentMessage(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, __int128 *, __int128 *);
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v5 = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v4 = *MEMORY[0x1E0CA2E68];
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v2 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (!v2)
    return 4294954514;
  v9 = v5;
  v10 = v6;
  v7 = v4;
  v8 = v6;
  return v2(a1, &v9, &v7);
}

uint64_t HandleMutableCompositionScaleTrackSegmentMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  uint64_t (*v4)(uint64_t, int64_t, __int128 *, __int128 *, __int128 *);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v8 = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v7 = *MEMORY[0x1E0CA2E68];
  v6 = *MEMORY[0x1E0CA2E68];
  int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v4 = *(uint64_t (**)(uint64_t, int64_t, __int128 *, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 136);
  if (!v4)
    return 4294954514;
  v14 = v8;
  v15 = v9;
  v12 = v7;
  v13 = v9;
  v10 = v6;
  v11 = v9;
  return v4(a1, int64, &v14, &v12, &v10);
}

uint64_t HandleMutableCompositionScaleSegmentMessage(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, __int128 *, __int128 *, __int128 *);
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v6 = *MEMORY[0x1E0CA2E68];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v5 = *MEMORY[0x1E0CA2E68];
  v4 = *MEMORY[0x1E0CA2E68];
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v2 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 144);
  if (!v2)
    return 4294954514;
  v12 = v6;
  v13 = v7;
  v10 = v5;
  v11 = v7;
  v8 = v4;
  v9 = v7;
  return v2(a1, &v12, &v10, &v8);
}

uint64_t HandleMutableCompositionInsertSegmentArrayIntoTrackMessage()
{
  FigXPCMessageGetCMTime();
  FigXPCMessageCopyCFArray();
  return 4294954516;
}

uint64_t HandleMutableCompositionAddAssetForURLMessage(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD);

  FigXPCMessageCopyCFURL();
  xpc_dictionary_get_uint64(a2, "Asset");
  v4 = FigXPCAssetServerCopyAssetForID();
  if (!(_DWORD)v4)
  {
    v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
    if (!v5)
      return 4294954514;
    return v5(a1, 0, 0);
  }
  return v4;
}

uint64_t HandleMutableCompositionGetTrackCompatibleWithMutableCompositionTrackMessage(int a1, uint64_t a2, xpc_object_t xdict, void *a4)
{
  int64_t int64;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, int64_t, _DWORD *);
  uint64_t v10;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  int64 = xpc_dictionary_get_int64(xdict, "AssetTrackID");
  xpc_dictionary_get_uint64(xdict, "SourceCompositionID");
  v8 = LookupMutableCompositionByObjectIDForConnection();
  if ((_DWORD)v8)
    return v8;
  v9 = *(uint64_t (**)(uint64_t, _QWORD, int64_t, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 200);
  if (!v9)
    return 4294954514;
  v10 = v9(a2, 0, int64, value);
  if (!(_DWORD)v10)
    xpc_dictionary_set_int64(a4, "TrackID", value[0]);
  return v10;
}

uint64_t HandleMutableCompositionInsertMutableCompositionSegmentIntoTrackMessage(int a1, uint64_t a2, xpc_object_t xdict)
{
  int64_t int64;
  int64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, int64_t, _QWORD, int64_t, __int128 *, __int128 *, __int128 *);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v13 = *MEMORY[0x1E0CA2E68];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v12 = *MEMORY[0x1E0CA2E68];
  v11 = *MEMORY[0x1E0CA2E68];
  int64 = xpc_dictionary_get_int64(xdict, "AssetTrackID");
  v6 = xpc_dictionary_get_int64(xdict, "DestTrackID");
  xpc_dictionary_get_uint64(xdict, "SourceCompositionID");
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v7 = LookupMutableCompositionByObjectIDForConnection();
  if (!(_DWORD)v7)
  {
    v8 = *(uint64_t (**)(uint64_t, int64_t, _QWORD, int64_t, __int128 *, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184);
    if (!v8)
      return 4294954514;
    v19 = v13;
    v20 = v14;
    v17 = v12;
    v18 = v14;
    v15 = v11;
    v16 = v14;
    return v8(a2, v6, 0, int64, &v19, &v17, &v15);
  }
  return v7;
}

uint64_t HandleMutableCompositionInsertMutableCompositionSegmentMessage(int a1, uint64_t a2, xpc_object_t xdict)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, __int128 *, __int128 *, __int128 *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v10 = *MEMORY[0x1E0CA2E68];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v9 = *MEMORY[0x1E0CA2E68];
  v8 = *MEMORY[0x1E0CA2E68];
  xpc_dictionary_get_uint64(xdict, "SourceCompositionID");
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  FigXPCMessageGetCMTime();
  v4 = LookupMutableCompositionByObjectIDForConnection();
  if (!(_DWORD)v4)
  {
    v5 = *(uint64_t (**)(uint64_t, _QWORD, __int128 *, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 192);
    if (!v5)
      return 4294954514;
    v16 = v10;
    v17 = v11;
    v14 = v9;
    v15 = v11;
    v12 = v8;
    v13 = v11;
    return v5(a2, 0, &v16, &v14, &v12);
  }
  return v4;
}

uint64_t CreateServedMutableCompositionState(uint64_t a1, const void ***a2)
{
  const void **v3;
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t v6;
  uint64_t v7;
  audit_token_t v9[2];

  memset(&v9[1], 0, sizeof(audit_token_t));
  v3 = (const void **)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (!v3)
    goto LABEL_6;
  xpc_connection_get_audit_token();
  v9[0] = v9[1];
  FigServer_GetClientPIDFromAuditToken();
  v4 = FigSandboxAssertionCreateForPID();
  if ((_DWORD)v4)
  {
LABEL_7:
    v7 = v4;
    goto LABEL_5;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9[0] = v9[1];
  v3[1] = SecTaskCreateWithAuditToken(v5, v9);
  v6 = FigOSTransactionCreate();
  v3[2] = (const void *)v6;
  if (!v6)
  {
LABEL_6:
    v4 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v7 = 0;
  *a2 = v3;
  v3 = 0;
LABEL_5:
  DisposeServedMutableCompositionState(v3);
  return v7;
}

void DisposeServedMutableCompositionState(const void **a1)
{
  const void *v2;
  const void *v3;
  void *v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = a1[1];
    if (v3)
    {
      CFRelease(v3);
      a1[1] = 0;
    }
    v4 = (void *)a1[2];
    if (v4)
      os_release(v4);
    free(a1);
  }
}

uint64_t FigPlayerStreamCreateWithOptions()
{
  MEMORY[0x19402F294](&sFigStreamPlayerInitOnce, fig_player_stream_init_once);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FPSupport_CheckPlayerPerformanceTrace();
  FigPlayerGetClassID();
  CMDerivedObjectCreate();
  return FigSignalErrorAt();
}

void fpfs_autoSelectionCriteriaChanged(uint64_t a1, const void *a2)
{
  fpfs_applyAutoSelectionCriteria(a2);
}

uint64_t fpfs_ValeriaEnabled(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t DerivedStorage;

  result = RaEiDSv6c();
  if ((_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    fpfs_LockMutexWithCaller((uint64_t)a2);
    if (!*(_BYTE *)(DerivedStorage + 51))
    {
      *(_BYTE *)(DerivedStorage + 524) = 1;
      fpfs_stopResetDisturbReprepareAndResume(a2, *(const __CFArray **)(DerivedStorage + 80), 0);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(a2);
  }
  return result;
}

void fpfs_HDRBatonAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller(a2);
  if (!*(_BYTE *)(DerivedStorage + 51))
  {
    if (*(_QWORD *)(DerivedStorage + 80))
    {
      CMBaseObjectGetDerivedStorage();
      v4 = CMBaseObjectGetDerivedStorage();
      if (!CelestialShouldLimitHDRConcurrentPlayback() || (*(_DWORD *)(v4 + 808) - 1) >= 2)
        fpfsi_SwitchBetweenHDRAndSDR(*(_QWORD *)(DerivedStorage + 80), 0);
    }
  }
  fpfs_UnlockWithCaller();
}

void fpfs_4kBatonAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller(a2);
  if (!*(_BYTE *)(DerivedStorage + 51))
  {
    if (*(_QWORD *)(DerivedStorage + 80))
    {
      CMBaseObjectGetDerivedStorage();
      v4 = CMBaseObjectGetDerivedStorage();
      if (!CelestialShouldLimit4kConcurrentPlayback() || (*(_DWORD *)(v4 + 808) - 1) >= 2)
        fpfsi_SwitchBetween4kAndHD(*(_QWORD *)(DerivedStorage + 80), 0);
    }
  }
  fpfs_UnlockWithCaller();
}

void fpfs_SpatialAudioPreferencesChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  char v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (!*(_BYTE *)(DerivedStorage + 51))
  {
    if (*(_QWORD *)(DerivedStorage + 80))
    {
      v4 = 0;
      fpfs_PlayQueueCallForEachItem((uint64_t)a2, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_handleAvailableAudioFormatChange_Apply, (uint64_t)&v4);
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
}

void FigCFRelease_0(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigPlayerStreamCreate()
{
  return FigPlayerStreamCreateWithOptions();
}

uint64_t fpfs_LockMutexWithCaller(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  v4 = *(_QWORD *)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = v4 + 1;
  if (!v4)
    return fpfs_getPlaybackState(a1, (int *)(DerivedStorage + 164), (_BYTE *)(DerivedStorage + 168));
  return result;
}

void fpfs_stopResetDisturbReprepareAndResume(const void *a1, const __CFArray *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v14;
  uint64_t v15;
  os_log_type_t type;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v7 = DerivedStorage;
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = *(_QWORD *)(v8 + 1040);
    v10 = *(float *)(v7 + 108) == 0.0 || v9 == 0;
    v11 = !v10;
    if (!v10)
    {
      v19 = *MEMORY[0x1E0CA2E18];
      v20 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v17 = v19;
      v18 = v20;
      fpfs_setRateInternal(a1, a2, &v19, &v17, 0.0);
    }
    if (*(_QWORD *)(v8 + 928))
      fpfsi_ConfigurePumpForPlayerAndRelock();
    v12 = CMBaseObjectGetDerivedStorage();
    fpfs_ClearRenderChains(a2, 255);
    *(_QWORD *)(v12 + 772) = 0;
    if (v9)
    {
      if (a3 == 1)
        fpfs_PrepareForSeek(a2, 255, 1);
      if (*(_BYTE *)(v8 + 593) && !*(_BYTE *)(v8 + 592))
      {
        if (dword_1EE2A2A88)
        {
          LODWORD(v14) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        fpfsi_SetCurrentTimeWithSeekID((uint64_t)a2, MEMORY[0x1E0CA2E30], 0, 0);
      }
      else
      {
        fpfsi_SeekToCurrentTime(a2);
      }
    }
    if (*(const __CFArray **)(v7 + 80) == a2)
    {
      fpfs_enqueuePrerollWasCancelledNotificationIfNeeded(a2);
      if (*(_BYTE *)(v7 + 463) && !*(_BYTE *)(v7 + 462))
        fpfs_UpdateNeroPlaybackActiveStateAndNotifyIfNeeded(a1, (uint64_t)a2, 0);
      if (v11)
      {
        v17 = 0uLL;
        v18 = 0;
        fpfs_GetItemBufferedDuration(a2, &v17, &v19, 0);
        v14 = v17;
        v15 = v18;
        fpfs_CheckIfLikelyToKeepUpAndNotify(a1, a2, &v14, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], &v19);
      }
    }
  }
}

void fpfs_UnlockAndPostNotificationsWithCaller(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(_QWORD *)(DerivedStorage + 8);
  if (v4 >= 1)
    *(_QWORD *)(DerivedStorage + 8) = --v4;
  if (v4
    || (fpfs_CheckIfPlaybackStateChangedAndNotifyBeforeUnlock(a1),
        v5 = (_QWORD *)(v3 + 88),
        (v6 = *(_QWORD **)(v3 + 88)) == 0))
  {
LABEL_22:
    JUMPOUT(0x19402EA24);
  }
  v7 = 0;
  while (1)
  {
    while (1)
    {
      v8 = v6;
      v9 = v6 + 4;
      v6 = (_QWORD *)v6[4];
      v10 = *(v9 - 1);
      if (v10 == MEMORY[0x19402F228]())
        break;
LABEL_15:
      if (!v6)
        goto LABEL_20;
    }
    if (!v7)
    {
      v11 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
      v7 = (_QWORD **)v11;
      if (v11)
      {
        *v11 = 0;
        v11[1] = v11;
      }
    }
    v12 = (_QWORD *)*v5;
    if ((_QWORD *)*v5 == v8)
    {
      v16 = *v9;
      *v5 = *v9;
      v15 = v3 + 88;
      if (v16)
        goto LABEL_13;
    }
    else
    {
      do
      {
        v13 = v12;
        v12 = (_QWORD *)v12[4];
      }
      while (v12 != v8);
      v14 = *v9;
      v13[4] = *v9;
      v15 = (uint64_t)(v13 + 4);
      if (v14)
      {
LABEL_13:
        if (v7)
          goto LABEL_14;
        goto LABEL_19;
      }
    }
    *(_QWORD *)(v3 + 96) = v15;
    if (v7)
    {
LABEL_14:
      v8[4] = 0;
      *v7[1] = v8;
      v7[1] = v9;
      goto LABEL_15;
    }
LABEL_19:
    dispatch_async_f(*(dispatch_queue_t *)(v3 + 24), v8, (dispatch_function_t)fpfs_PostNotificationFromDispatch);
    if (!v6)
    {
LABEL_20:
      if (v7)
        dispatch_async_f(*(dispatch_queue_t *)(v3 + 24), v7, (dispatch_function_t)fpfs_PostNotificationListFromDispatch);
      goto LABEL_22;
    }
  }
}

uint64_t fpfs_getPlaybackState(uint64_t a1, int *a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  OpaqueCMClock *HostTimeClock;
  int v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex Count;
  uint64_t v17;
  int v18;
  float v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v22;
  const char *v23;
  int v24;
  CMTime time1;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  const char *v29;
  CMTime v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 80);
  if (!result)
  {
    if (*(float *)(DerivedStorage + 108) != 0.0)
      goto LABEL_19;
LABEL_20:
    v18 = 0;
    LOBYTE(v13) = 0;
    goto LABEL_22;
  }
  result = CMBaseObjectGetDerivedStorage();
  v24 = 0;
  if (*(float *)(DerivedStorage + 108) == 0.0)
    goto LABEL_20;
  v8 = result;
  if (!result)
  {
LABEL_19:
    LOBYTE(v13) = 0;
    v18 = 3;
    goto LABEL_22;
  }
  v9 = CMBaseObjectGetDerivedStorage();
  v10 = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(v9 + 1452) & 0x1D) == 1)
  {
    v11 = v10;
    fpfs_GetNextTimeToPlay(v9, 0, (uint64_t)&lhs);
    CMTimeMake(&rhs, 1, 1000);
    CMTimeAdd(&v30, &lhs, &rhs);
    time2 = *(CMTime *)(v9 + 1440);
    result = fpfs_TimeIsAtOrAfter(v11, &v30, &time2);
    if ((_DWORD)result)
      goto LABEL_21;
  }
  result = (uint64_t)fpfsi_isAssociatedInterstitialEventActive();
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(v9 + 444) & 1) != 0)
    {
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&time1, HostTimeClock);
      time2 = *(CMTime *)(v9 + 432);
      result = CMTimeCompare(&time1, &time2);
      if ((int)result <= 0)
      {
LABEL_21:
        LOBYTE(v13) = 0;
        v18 = 6;
        goto LABEL_22;
      }
    }
  }
  LOBYTE(v13) = *(_BYTE *)(DerivedStorage + 160);
  if (!(_BYTE)v13)
  {
LABEL_17:
    v18 = 4;
    goto LABEL_22;
  }
  if (*(_BYTE *)(v8 + 530)
    && ((v14 = *(unsigned int *)(DerivedStorage + 632),
         v15 = *(_QWORD *)(DerivedStorage + 80),
         Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72)),
         !v15)
      ? (v17 = Count)
      : (v17 = Count + 1),
        result = FigPlaybackGetEffectiveActionAtEnd(v14, v17),
        (_DWORD)result == 2)
    || *(float *)(v8 + 840) != 0.0)
  {
LABEL_16:
    LOBYTE(v13) = 0;
    goto LABEL_17;
  }
  v13 = *(_DWORD *)(v8 + 524);
  if (!v13)
    goto LABEL_29;
  if (v13 == 1)
  {
    result = fpfsi_waitForVenueDescriptionProcessing(v8);
    if ((_DWORD)result)
    {
      LOBYTE(v13) = 0;
LABEL_29:
      v18 = 1;
      goto LABEL_22;
    }
    v19 = *(float *)(v8 + 840);
    if (v19 == 0.0)
    {
      result = (uint64_t)fpfs_getStartupTaskWaitingStatus(a1, &v24);
      if ((_DWORD)result)
      {
        LOBYTE(v13) = 1;
        v18 = v24;
        goto LABEL_22;
      }
      v19 = *(float *)(v8 + 840);
    }
    if (v19 == 0.0 && *(_QWORD *)(v8 + 2960))
      goto LABEL_16;
    LODWORD(rhs.value) = 0;
    LOBYTE(time2.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = rhs.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, time2.value))
      v22 = value;
    else
      v22 = value & 0xFFFFFFFE;
    if (v22)
    {
      if (a1)
        v23 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v23 = "";
      LODWORD(lhs.value) = 136315650;
      *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfs_getPlaybackState";
      LOWORD(lhs.flags) = 2048;
      *(_QWORD *)((char *)&lhs.flags + 2) = a1;
      HIWORD(lhs.epoch) = 2082;
      v29 = v23;
      _os_log_send_and_compose_impl();
    }
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  LOBYTE(v13) = 0;
  v18 = 2;
LABEL_22:
  if (a3)
    *a3 = v13;
  *a2 = v18;
  return result;
}

BOOL fpfsi_waitForVenueDescriptionProcessing(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  int v4;
  CFNumberRef v5;
  _BOOL8 v6;
  int valuePtr;
  CFNumberRef number;

  number = 0;
  valuePtr = 0;
  if (!*(_QWORD *)(a1 + 736))
    return 0;
  if (fpfsi_waitForVenueDescriptionProcessing_onceToken != -1)
    dispatch_once(&fpfsi_waitForVenueDescriptionProcessing_onceToken, &__block_literal_global_9);
  if (!fpfsi_waitForVenueDescriptionProcessing_checkForVenueDescriptionProcessing)
    return 0;
  v2 = *(_QWORD *)(a1 + 736);
  v3 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v3)
    return 0;
  v4 = v3(v2, CFSTR("SMS_ProcessingStatus"), 0, &number);
  v5 = number;
  if (v4)
  {
    v6 = 0;
    if (!number)
      return v6;
    goto LABEL_8;
  }
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  v6 = valuePtr == 0;
  v5 = number;
  if (number)
LABEL_8:
    CFRelease(v5);
  return v6;
}

const __CFArray *fpfs_getStartupTaskWaitingStatus(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *result;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(const __CFArray **)(DerivedStorage + 888);
  if (result)
  {
    if (CFArrayGetCount(result) < 1)
    {
      return 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 888), 0);
      *a2 = FigPlayerStartupTaskGetWaitingState((uint64_t)ValueAtIndex);
      return (const __CFArray *)1;
    }
  }
  return result;
}

BOOL fpfs_TimeIsAtOrAfter(uint64_t a1, CMTime *a2, CMTime *a3)
{
  CMTime v7;
  CMTime time1;

  time1 = *a2;
  v7 = *a3;
  if (!CMTimeCompare(&time1, &v7))
    return 1;
  time1 = *a2;
  v7 = *a3;
  return fpfs_TimeIsAfter(a1, &time1, &v7);
}

double fpfs_GetNextTimeToPlay@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  CMTimeEpoch epoch;
  __int128 v14;
  CMTime v15;
  CMTime rhs;
  CMTime lhs;
  CMTime v18;

  v6 = MEMORY[0x1E0CA2E18];
  v7 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a3 = *MEMORY[0x1E0CA2E18];
  v8 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(a3 + 16) = v8;
  if ((*(_BYTE *)(a1 + 1500) & 1) != 0)
  {
    v9 = a1 + 1488;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 332) & 1) == 0)
      goto LABEL_6;
    v9 = a1 + 320;
  }
  v10 = *(_OWORD *)v9;
  *(_OWORD *)a3 = *(_OWORD *)v9;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v9 + 16);
LABEL_6:
  v11 = *(_DWORD *)(a3 + 12);
  if ((~v11 & 9) != 0)
  {
    if ((~v11 & 5) != 0)
      goto LABEL_16;
    v14 = v7;
    memset(&v18, 0, sizeof(v18));
    fpfsi_GetPumpMaxTimeAvailable(a1, (uint64_t)&v18);
    if ((v18.flags & 1) == 0)
    {
      *(_QWORD *)&v10 = v14;
      *(_OWORD *)a3 = v14;
      goto LABEL_12;
    }
    rhs = v18;
    v15 = *(CMTime *)(a1 + 1176);
    CMTimeSubtract(&lhs, &rhs, &v15);
    *(_QWORD *)&v10 = lhs.value;
    *(_OWORD *)a3 = *(_OWORD *)&lhs.value;
    epoch = lhs.epoch;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 1356) & 1) == 0)
    {
      *(_OWORD *)a3 = v7;
LABEL_12:
      *(_QWORD *)(a3 + 16) = v8;
      goto LABEL_16;
    }
    lhs = *(CMTime *)(a1 + 1344);
    rhs = *(CMTime *)(a1 + 1176);
    CMTimeSubtract(&v18, &lhs, &rhs);
    *(_QWORD *)&v10 = v18.value;
    *(_OWORD *)a3 = *(_OWORD *)&v18.value;
    epoch = v18.epoch;
  }
  *(_QWORD *)(a3 + 16) = epoch;
LABEL_16:
  if ((*(_DWORD *)(a3 + 12) & 0x1D) != 1)
  {
    if (a2)
      fpfs_GetApproximateTime(a1, (uint64_t)&v18);
    else
      fpfs_GetTime(a1, (uint64_t)&v18);
    *(_QWORD *)&v10 = v18.value;
    *(CMTime *)a3 = v18;
  }
  return *(double *)&v10;
}

const void *fpfsi_isAssociatedInterstitialEventActive()
{
  const void *result;

  result = *(const void **)(CMBaseObjectGetDerivedStorage() + 3200);
  if (result)
    return (const void *)(CFEqual(result, &stru_1E2FD85F8) == 0);
  return result;
}

BOOL fpfs_TimeIsAfter(uint64_t a1, CMTime *a2, CMTime *a3)
{
  CMTime v4;
  CMTime time1;

  if (*(float *)(a1 + 108) >= 0.0)
  {
    time1 = *a2;
    v4 = *a3;
    return CMTimeCompare(&time1, &v4) > 0;
  }
  else
  {
    time1 = *a2;
    v4 = *a3;
    return CMTimeCompare(&time1, &v4) >> 31;
  }
}

void fpfsi_GetPumpMaxTimeAvailable(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *);
  int v8;
  CFDictionaryRef v9;
  BOOL v10;
  CMTime v11;
  CFDictionaryRef dictionaryRepresentation;

  v3 = MEMORY[0x1E0CA2E18];
  dictionaryRepresentation = 0;
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(a1 + 928);
  if (v4)
  {
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBaseObject = FigBytePumpGetFigBaseObject(v4);
    v7 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v7)
    {
      v8 = v7(FigBaseObject, CFSTR("FBP_MaxTime"), AllocatorForMedia, &dictionaryRepresentation);
      v9 = dictionaryRepresentation;
      if (v8)
        v10 = 1;
      else
        v10 = dictionaryRepresentation == 0;
      if (!v10)
      {
        CMTimeMakeFromDictionary(&v11, dictionaryRepresentation);
        *(_OWORD *)a2 = *(_OWORD *)&v11.value;
        v9 = dictionaryRepresentation;
        *(_QWORD *)(a2 + 16) = v11.epoch;
      }
      if (v9)
        CFRelease(v9);
    }
  }
}

void fpfs_GetApproximateTime(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t UpTimeNanoseconds;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if ((*(_BYTE *)(a1 + 3280) & 1) != 0 && UpTimeNanoseconds - *(_QWORD *)(a1 + 3296) < 1000001)
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 3268);
    v6 = *(_QWORD *)(a1 + 3284);
  }
  else
  {
    fpfs_GetTime(a1, (uint64_t)&v7);
    *(_OWORD *)a2 = v7;
    v6 = v8;
  }
  *(_QWORD *)(a2 + 16) = v6;
}

void fpfs_GetTime(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t UpTimeNanoseconds;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_log_type_t type;
  int v7;
  CFTypeRef v8;
  CFTypeRef cf;
  CMTime time2;
  char v11;
  CMTime time1;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  CMTimebaseGetTimeClampedAboveAnchorTime();
  time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  CMTimeMaximum((CMTime *)a2, &time1, &time2);
  *(_OWORD *)(a1 + 3268) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 3284) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 3296) = UpTimeNanoseconds;
  if (v11)
  {
    if (dword_1EE2A2A88 >= 2)
    {
      v8 = 0;
      cf = 0;
      if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(*(_QWORD *)(a1 + 16), &cf, &v8))
      {
        if (dword_1EE2A2A88)
        {
          v7 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFRelease(cf);
        CFRelease(v8);
      }
    }
  }
}

uint64_t FigBytePumpCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBytePumpGetFigBaseObject(a1);
  v8 = v7;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
    return v9(v8, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t fpfsi_CopyPlayerAndItemFromItemRetainProxy(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  const void *Owner;

  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v5 = FigSignalErrorAt();
    DerivedStorage = 0;
  }
  else
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner)
      Owner = CFRetain(Owner);
    *a3 = Owner;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = 0;
  }
  FigRetainProxyUnlockMutex();
  if (a2 && DerivedStorage)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
    if (*(_BYTE *)(DerivedStorage + 24))
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
      v5 = 4294954511;
    }
    else
    {
      *a2 = CFRetain(*(CFTypeRef *)DerivedStorage);
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
      if (!(_DWORD)v5)
        return v5;
    }
    if (*a3)
    {
      CFRelease(*a3);
      *a3 = 0;
    }
  }
  return v5;
}

uint64_t __fpfsi_waitForVenueDescriptionProcessing_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  fpfsi_waitForVenueDescriptionProcessing_checkForVenueDescriptionProcessing = result;
  return result;
}

uint64_t fpfs_setRateInternal(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t DerivedStorage;
  const __CFArray *Next;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  int IsIFrameOnly;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  char v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v43;
  CFTypeRef v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t FigBaseObject;
  void (*v51)(uint64_t, const __CFString *, uint64_t);
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  const char *v55;
  uint64_t RenderingTrackofType;
  NSObject *v57;
  unsigned int v58;
  unsigned int v59;
  const char *v60;
  uint64_t v61;
  uint64_t TimebaseStarterTrack;
  uint64_t *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t UpTimeNanoseconds;
  uint64_t v70;
  int v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const __CFArray *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t AllocatorForMedia;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, const __CFString *, uint64_t, CMTime *);
  int v84;
  const void *v85;
  uint64_t v86;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v89;
  const char *v90;
  uint64_t v91;
  double v92;
  Float64 Seconds;
  double v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  CMTime time;
  CMTime v100;
  CMTime number;
  os_log_type_t type;
  os_log_type_t v103[4];
  float valuePtr;
  CFTypeRef cf;
  CMTime time1;
  const char *v107;
  __int16 v108;
  const __CFString *v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  CMTime time2;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(DerivedStorage, 0);
  if (a2)
    v11 = a2;
  else
    v11 = (const __CFString *)Next;
  if (!v11)
    return (uint64_t)v11;
  v12 = (const __CFString *)Next;
  v13 = CMBaseObjectGetDerivedStorage();
  v14 = *(float *)(v13 + 840);
  if (v14 != a5)
  {
    if (v11 != v12)
      return 4294954436;
    v15 = v13;
    if (!*(_BYTE *)(v13 + 3225))
    {
      v16 = *(_QWORD *)(v13 + 1696);
      if (v16)
      {
        IsIFrameOnly = FigAlternateIsIFrameOnly(v16);
        v18 = IsIFrameOnly != 0;
        v19 = a5 != 0.0;
        if (a5 != 0.0 && IsIFrameOnly)
          return fpfs_setIFrameOnlyRate((uint64_t)v12, a5);
      }
      else
      {
        v18 = 0;
        v19 = a5 != 0.0;
      }
      fpfsi_scheduleFVTTransitionsForItem(v12, 0, 1);
      if (!*(_BYTE *)(v15 + 464))
      {
        fpfsi_setItemRateTimebaseAndAnchor(0.0, (uint64_t)v12, 1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
LABEL_146:
        if (*(float *)(v15 + 840) == 0.0)
        {
          fpfs_GetTime(v15, (uint64_t)&v100);
          time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          if (CMTimeCompare(&v100, &time2) < 0)
            fpfs_JumpToTime((uint64_t)v12, MEMORY[0x1E0CA2E68]);
        }
        fpfsi_updateItemTimePropertiesForRateChange((uint64_t)v12, v14);
        if (dword_1EE2A2A88)
        {
          LODWORD(number.value) = 0;
          LOBYTE(cf) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          value = number.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)cf))
            v89 = value;
          else
            v89 = value & 0xFFFFFFFE;
          if (v89)
          {
            if (a1)
              v90 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v90 = "";
            v91 = CMBaseObjectGetDerivedStorage() + 3072;
            v92 = *(float *)(v15 + 840);
            fpfs_GetTime(v15, (uint64_t)&time);
            Seconds = CMTimeGetSeconds(&time);
            v94 = *(float *)(DerivedStorage + 108);
            LODWORD(time1.value) = 136316930;
            *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"fpfs_setRateInternal";
            LOWORD(time1.flags) = 2048;
            *(_QWORD *)((char *)&time1.flags + 2) = a1;
            HIWORD(time1.epoch) = 2082;
            v107 = v90;
            v108 = 2048;
            v109 = v12;
            v110 = 2082;
            v111 = v91;
            v112 = 2048;
            v113 = v92;
            v114 = 2048;
            v115 = Seconds;
            v116 = 2048;
            v117 = v94;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      LODWORD(v21) = *(unsigned __int8 *)(v15 + 2872);
      v97 = DerivedStorage;
      if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504) || (_DWORD)v21)
      {
LABEL_51:
        v36 = !v19;
        if (!(_DWORD)v21)
          v36 = 1;
        if ((v36 & 1) == 0)
        {
          *(_BYTE *)(v15 + 3225) = 1;
          fpfsi_SeekToCurrentTime((const __CFArray *)v12);
        }
        if (a5 != 0.0
          || (cf = 0, gPlayerStopMode != 1)
          || ((v37 = *(float *)(DerivedStorage + 108), v37 > 2.0) || v37 < 0.0) && !*(_QWORD *)(v15 + 2960)
          || (v38 = fpfs_FirstRenderingTrackofType((uint64_t)v12, 1986618469)) == 0
          || *(_DWORD *)(v38 + 152) != 6)
        {
LABEL_72:
          if (!v18)
          {
            v45 = *(_QWORD *)(v15 + 1040);
            if (v45)
            {
              v46 = (uint64_t *)MEMORY[0x1E0C9AE50];
              if (a5 <= 1.0)
                v46 = (uint64_t *)MEMORY[0x1E0C9AE40];
              v47 = *v46;
              do
              {
                if (*(_DWORD *)(v45 + 32) == 1986618469)
                {
                  v48 = *(_QWORD *)(v45 + 96);
                  if (v48)
                  {
                    v49 = *(_QWORD *)(v48 + 32);
                    if (v49)
                    {
                      FigBaseObject = FigRenderPipelineGetFigBaseObject(v49);
                      v51 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 56);
                      if (v51)
                        v51(FigBaseObject, CFSTR("AllowVideoQualityOfServiceAdjustments"), v47);
                    }
                  }
                }
                v45 = *(_QWORD *)(v45 + 8);
              }
              while (v45);
            }
          }
          if (a5 < 0.0 && fpfsi_isItemPlayedOut((uint64_t)v12))
            *(_BYTE *)(v15 + 3056) = 1;
          if (a5 == 0.0
            || *(_BYTE *)(v15 + 464)
            && ((RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v12, 1986618469)) == 0
             || !*(_BYTE *)(RenderingTrackofType + 104)))
          {
            if (dword_1EE2A2A88)
            {
              LODWORD(number.value) = 0;
              LOBYTE(cf) = 0;
              v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v53 = number.value;
              if (os_log_type_enabled(v52, (os_log_type_t)cf))
                v54 = v53;
              else
                v54 = v53 & 0xFFFFFFFE;
              if (v54)
              {
                if (a1)
                  v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v55 = "";
                v61 = CMBaseObjectGetDerivedStorage();
                LODWORD(time1.value) = 136316418;
                *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"fpfs_setRateInternal";
                LOWORD(time1.flags) = 2048;
                *(_QWORD *)((char *)&time1.flags + 2) = a1;
                HIWORD(time1.epoch) = 2082;
                v107 = v55;
                v108 = 2048;
                v109 = v12;
                v110 = 2082;
                v111 = v61 + 3072;
                v112 = 2048;
                v113 = a5;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (*(_QWORD *)(v15 + 568))
            {
              fpfs_getAnchorTimeForSyncTimebase(a5, a1, (uint64_t)v12, (CMTime *)a3, (CMTime *)a4);
            }
            else if (v19 && (*(_BYTE *)(a3 + 12) & 1) == 0 && (*(_BYTE *)(a4 + 12) & 1) == 0)
            {
              fpfs_getCachedAnchorTimeForItem(a1, (uint64_t)v12, a3, a4);
            }
            TimebaseStarterTrack = fpfsi_getTimebaseStarterTrack((uint64_t)v12);
            if (TimebaseStarterTrack)
            {
              v63 = (uint64_t *)TimebaseStarterTrack;
              if (*MEMORY[0x1E0CA1FC0] == 1 && v19)
              {
                v65 = CMBaseObjectGetDerivedStorage();
                strncpy((char *)&time2, (const char *)(v65 + 3072), 8uLL);
                kdebug_trace();
              }
              time2 = *(CMTime *)a3;
              time1 = *(CMTime *)a4;
              v66 = fpfs_SetRateOnTrack(v63, &time2, &time1, a5);
              if ((_DWORD)v66)
              {
                v11 = (const __CFString *)v66;
                if (*(float *)(v15 + 840) == 0.0)
                {
                  v95 = 0;
                  v96 = 1;
                }
                else
                {
                  v95 = 1;
                  v96 = 0;
                }
                fpfsi_scheduleFVTTransitionsForItem(v12, (uint64_t *)v95, v96);
                return (uint64_t)v11;
              }
              if (!v19)
                goto LABEL_131;
              v67 = MEMORY[0x1E0CA2E18];
              *(_OWORD *)(v15 + 408) = *MEMORY[0x1E0CA2E18];
              *(_QWORD *)(v15 + 424) = *(_QWORD *)(v67 + 16);
              v68 = (uint64_t)v12;
              UpTimeNanoseconds = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              fpfsi_setItemRateTimebaseAndAnchor(0.0, (uint64_t)v12, 1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
              UpTimeNanoseconds = FigGetUpTimeNanoseconds();
              v68 = (uint64_t)v12;
            }
            fpfsi_SetLastTimestampClientDidPauseOnContentSteeringMonitor(v68, UpTimeNanoseconds);
          }
          else if (dword_1EE2A2A88)
          {
            LODWORD(number.value) = 0;
            LOBYTE(cf) = 0;
            v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v58 = number.value;
            if (os_log_type_enabled(v57, (os_log_type_t)cf))
              v59 = v58;
            else
              v59 = v58 & 0xFFFFFFFE;
            if (v59)
            {
              if (a1)
                v60 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v60 = "";
              v70 = CMBaseObjectGetDerivedStorage();
              v71 = *(unsigned __int8 *)(v15 + 464);
              v72 = "first rendering video track is in preroll";
              LODWORD(time1.value) = 136316674;
              *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"fpfs_setRateInternal";
              LOWORD(time1.flags) = 2048;
              *(_QWORD *)((char *)&time1.flags + 2) = a1;
              if (!v71)
                v72 = "item not ready";
              HIWORD(time1.epoch) = 2082;
              v107 = v60;
              v108 = 2048;
              v109 = v12;
              v110 = 2082;
              v111 = v70 + 3072;
              v112 = 2048;
              v113 = a5;
              v114 = 2080;
              v115 = *(double *)&v72;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_131:
          if (fpfs_shouldReleaseRenderChainForPausing((uint64_t)v12))
            fpfsi_ReleaseRenderChainsForPausing(v12);
          time2.value = 0;
          v73 = CMBaseObjectGetDerivedStorage();
          v74 = CMBaseObjectGetDerivedStorage();
          v75 = fpfs_LastRenderingTrackofType((uint64_t)v12, 1936684398, 0);
          v76 = fpfs_getNext(v74, v12);
          if (v75)
            v77 = v19;
          else
            v77 = 1;
          if ((v77 & 1) == 0)
          {
            v78 = (uint64_t)v76;
            if (v76)
            {
              v79 = CMBaseObjectGetDerivedStorage();
              v80 = *(_QWORD *)(*(_QWORD *)(v75 + 96) + 32);
              AllocatorForMedia = FigGetAllocatorForMedia();
              v82 = FigRenderPipelineGetFigBaseObject(v80);
              v83 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
              if (v83)
              {
                v84 = v83(v82, CFSTR("Timebase"), AllocatorForMedia, &time2);
                v85 = (const void *)time2.value;
                if (!v84 && *(_QWORD *)(v73 + 576) != time2.value && time2.value == *(_QWORD *)(v79 + 576))
                {
                  v86 = MEMORY[0x1E0CA2E18];
                  fpfsi_setItemRateTimebaseAndAnchor(0.0, (uint64_t)v12, 1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
                  fpfsi_setItemRateTimebaseAndAnchor(0.0, v78, 1, v86, v86);
                  fpfs_CancelGaplessTransitionThatDependsOnTrack(*(const void **)v73, v75, 1);
                  v85 = (const void *)time2.value;
                }
                if (v85)
                  CFRelease(v85);
              }
            }
          }
          DerivedStorage = v97;
          goto LABEL_146;
        }
        v39 = *(_QWORD *)(*(_QWORD *)(v38 + 96) + 32);
        v40 = FigGetAllocatorForMedia();
        v41 = FigRenderPipelineGetFigBaseObject(v39);
        v42 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
        if (v42)
        {
          v43 = v42(v41, CFSTR("NextNonJerkyStopTime"), v40, &cf);
          v44 = cf;
          if (v43 || !cf)
          {
LABEL_70:
            if (v44)
              CFRelease(v44);
            goto LABEL_72;
          }
          memset(&time2, 0, sizeof(time2));
          CMTimeMakeFromDictionary(&time2, (CFDictionaryRef)cf);
          if ((time2.flags & 0x1D) == 1)
          {
            if ((*(_BYTE *)(a3 + 12) & 1) == 0
              || (time1 = time2, number = *(CMTime *)a3, CMTimeCompare(&time1, &number) >= 1))
            {
              *(CMTime *)a3 = time2;
            }
          }
        }
        v44 = cf;
        goto LABEL_70;
      }
      v22 = CMBaseObjectGetDerivedStorage();
      number.value = 0;
      cf = 0;
      CMBaseObjectGetDerivedStorage();
      v23 = fpfs_FirstRenderingTrackofType((uint64_t)v12, 1936684398);
      if (v23)
      {
        LODWORD(v21) = 0;
        if (v14 > 2.0)
          goto LABEL_47;
        if (v14 < 0.0)
          goto LABEL_47;
        LODWORD(v21) = 0;
        if (a5 > 2.0 || a5 < 0.0)
          goto LABEL_47;
        if (!v19)
          goto LABEL_46;
        v24 = (uint64_t *)v23;
        v21 = *(_QWORD *)(*(_QWORD *)(v23 + 96) + 32);
        if (!v21)
          goto LABEL_47;
        valuePtr = 0.0;
        v25 = FigGetAllocatorForMedia();
        FigRenderPipelineCopyProperty(v21, (uint64_t)CFSTR("Started"), v25, (uint64_t)&cf);
        LODWORD(v21) = 0;
        if (!cf || cf != (CFTypeRef)*MEMORY[0x1E0C9AE50])
          goto LABEL_47;
        v26 = *(_QWORD *)(v24[12] + 32);
        v27 = FigGetAllocatorForMedia();
        FigRenderPipelineCopyProperty(v26, (uint64_t)CFSTR("DecodingRate"), v27, (uint64_t)&number);
        if (number.value)
        {
          CFNumberGetValue((CFNumberRef)number.value, kCFNumberFloat32Type, &valuePtr);
          if (valuePtr != a5)
          {
            if (dword_1EE2A2A88)
            {
              *(_DWORD *)v103 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v29 = *(_DWORD *)v103;
              if (os_log_type_enabled(v28, type))
                v30 = v29;
              else
                v30 = v29 & 0xFFFFFFFE;
              if (v30)
              {
                if (a1)
                  v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v31 = "";
                v33 = CMBaseObjectGetDerivedStorage();
                LODWORD(time1.value) = 136316930;
                *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"fpfs_flushRenderChainForDifferentRateIfNecessary";
                LOWORD(time1.flags) = 2048;
                *(_QWORD *)((char *)&time1.flags + 2) = a1;
                HIWORD(time1.epoch) = 2082;
                v107 = v31;
                v108 = 2048;
                v109 = v12;
                v110 = 2082;
                v111 = v33 + 3072;
                v112 = 2048;
                v113 = v14;
                v114 = 2048;
                v115 = a5;
                v116 = 2048;
                v117 = valuePtr;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 840) = 0;
            fpfsi_updateMaxPlayThroughTime();
            DerivedStorage = v97;
            if (!fpfs_SetRateOnTrack(v24, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0.0))
            {
              fpfsi_ReleaseRenderChainsForPausing(v12);
              v34 = *(_QWORD *)(v22 + 504);
              v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
              LODWORD(v21) = 1;
              if (v35)
                v35(v34, 1);
              goto LABEL_47;
            }
            goto LABEL_46;
          }
        }
      }
      else
      {
        if (!dword_1EE2A2A88)
        {
LABEL_46:
          LODWORD(v21) = 0;
LABEL_47:
          if (number.value)
            CFRelease((CFTypeRef)number.value);
          if (cf)
            CFRelease(cf);
          goto LABEL_51;
        }
        valuePtr = 0.0;
        v103[0] = OS_LOG_TYPE_DEFAULT;
        v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      LODWORD(v21) = 0;
      goto LABEL_47;
    }
  }
  return 0;
}

void fpfsi_ConfigurePumpForPlayerAndRelock()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  uint64_t v3;
  const void **v4;
  const void *v5;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, __CFString *, CFTypeRef);
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, __CFDictionary *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 1832);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(v3 + 462))
    v4 = (const void **)MEMORY[0x1E0C9AE40];
  v5 = *v4;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("FBPSTN_Video"), v5);
  if (*(_BYTE *)(v3 + 462))
    CFDictionarySetValue(Mutable, CFSTR("FBPSTN_NeroTransport"), *(const void **)(v3 + 488));
  if (v2)
  {
    FigBaseObject = FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
    v9 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v9)
      v9(FigBaseObject, CFSTR("FBP_ExternalProtectionMethods"), v2);
  }
  v10 = FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
  v11 = *(void (**)(uint64_t, __CFString *, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v11)
    v11(v10, CFSTR("FBP_SendToNero"), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  if (v2)
    CFRelease(v2);
}

void fpfs_PrepareForSeek(const __CFArray *a1, unsigned int a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t i;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const __CFArray *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFArray *v31;
  __int128 v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  v33 = 0;
  v8 = *(_QWORD *)DerivedStorage;
  v32 = *MEMORY[0x1E0CA2E18];
  v36 = v32;
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v37 = v9;
  v34 = v32;
  v35 = v9;
  fpfs_setRateInternal(v8, a1, &v36, &v34, 0.0);
  CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 848));
  *(_BYTE *)(DerivedStorage + 464) = 0;
  *(_OWORD *)(DerivedStorage + 1512) = v32;
  v30 = v9;
  *(_QWORD *)(DerivedStorage + 1528) = v9;
  *(_DWORD *)(DerivedStorage + 524) = 0;
  fpfsi_setPlaybackMonitorOkayToAttemptSwitchUp(DerivedStorage, 0);
  *(CFAbsoluteTime *)(DerivedStorage + 1968) = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(DerivedStorage + 2016) = CFAbsoluteTimeGetCurrent();
  *(_WORD *)(DerivedStorage + 2075) = 257;
  if (*(float *)(v7 + 108) == 0.0 && *(_BYTE *)(DerivedStorage + 2872) && (*(_BYTE *)(v7 + 760) || dword_1EE2A2A88))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_SetRenderChainsReleasedForPause((uint64_t)a1, 0);
  if (*(_QWORD *)(DerivedStorage + 1760))
    fpfs_CompleteTrialSwitch(a1, 0, &v33);
  if (a3)
  {
    v31 = a1;
    for (i = 0; i != 3; ++i)
    {
      if (((a2 >> i) & 1) != 0)
      {
        StoreCurrentManifold(DerivedStorage, i, 0, 0);
        v12 = DerivedStorage + 8 * i;
        v13 = *(const void **)(v12 + 176);
        if (v13)
        {
          CFRelease(v13);
          *(_QWORD *)(v12 + 176) = 0;
        }
      }
    }
    v14 = *(_QWORD *)(DerivedStorage + 1056);
    v15 = a1;
    if (v14)
    {
      do
      {
        if (!*(_QWORD *)(DerivedStorage + 1056))
          break;
        v16 = *(_QWORD *)(v14 + 8);
        if (((a2 >> *(_BYTE *)(v14 + 180)) & 1) != 0)
        {
          if (dword_1EE2A2A88)
          {
            v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpfs_DeleteTrack(v31, v14);
        }
        v14 = v16;
      }
      while (v16);
    }
    v18 = *(_QWORD *)(DerivedStorage + 1040);
    if (v18)
    {
      do
      {
        if (!*(_QWORD *)(DerivedStorage + 1040))
          break;
        v19 = *(_QWORD *)(v18 + 8);
        if (((a2 >> *(_BYTE *)(v18 + 180)) & 1) != 0)
        {
          if (v19)
            v20 = *(_QWORD *)(v19 + 16);
          else
            v20 = -1;
          if (dword_1EE2A2A88)
          {
            v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpfs_StopFeedingTrack(v18, 0, 0);
          v22 = *(_QWORD *)(v18 + 96);
          if (v22)
            fpfs_FlushPrimaryAndAuxRenderChains(v22, 1);
          fpfs_DeleteTrack(v15, v18);
          if ((v20 & 0x8000000000000000) == 0)
          {
            if (!*(_QWORD *)(DerivedStorage + 1040))
              break;
            v19 = *(_QWORD *)(DerivedStorage + 1040);
            while (*(_QWORD *)(v19 + 16) != v20)
            {
              v19 = *(_QWORD *)(v19 + 8);
              if (!v19)
              {
                v19 = *(_QWORD *)(DerivedStorage + 1040);
                break;
              }
            }
          }
        }
        v18 = v19;
      }
      while (v19);
    }
    v23 = 0;
    v24 = DerivedStorage + 248;
    do
    {
      if (((a2 >> v23) & 1) != 0)
      {
        *(_OWORD *)v24 = v32;
        *(_QWORD *)(v24 + 16) = v30;
      }
      ++v23;
      v24 += 24;
    }
    while (v23 != 3);
    if ((a2 & 2) != 0 || *(_QWORD *)(DerivedStorage + 1096) == 1)
    {
      v25 = *(_QWORD *)(DerivedStorage + 792);
      if (v25)
        fpfs_FlushPrimaryAndAuxRenderChains(v25, 1);
    }
    if ((a2 & 1) != 0)
    {
      v26 = *(_QWORD *)(DerivedStorage + 784);
      if (v26)
        fpfs_FlushPrimaryAndAuxRenderChains(v26, 1);
      v27 = *(_QWORD *)(DerivedStorage + 800);
      if (v27)
        fpfs_FlushPrimaryAndAuxRenderChains(v27, 1);
      v28 = *(_QWORD *)(DerivedStorage + 816);
      if (v28)
        fpfs_FlushPrimaryAndAuxRenderChains(v28, 1);
    }
    if ((a2 & 4) != 0)
    {
      v29 = *(_QWORD *)(DerivedStorage + 808);
      if (v29)
        fpfs_FlushPrimaryAndAuxRenderChains(v29, 1);
    }
  }
}

uint64_t fpfsi_SetCurrentTimeWithSeekID(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *MEMORY[0x1E0CA2E28];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  v6 = *MEMORY[0x1E0CA2E30];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  return fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &v10, a3, &v8, &v6, 0, 0, 0, 16842753, 0, a4);
}

void fpfsi_SeekToCurrentTime(const __CFArray *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime rhs;
  CMTime lhs;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  memset(&v13, 0, sizeof(v13));
  memset(&v12, 0, sizeof(v12));
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v15);
  lhs = v15;
  *(_OWORD *)&rhs.value = kSeekToCurrentFudge;
  rhs.epoch = 0;
  CMTimeAdd(&v14, &lhs, &rhs);
  v3 = *(_QWORD *)(DerivedStorage + 1696);
  if (v3 && FigAlternateIsIFrameOnly(v3))
  {
    CMTimeMake(&v9, 2, 1);
    lhs = v14;
    CMTimeSubtract(&v13, &lhs, &v9);
    CMTimeMake(&v8, 2, 1);
    lhs = v14;
    CMTimeAdd(&v12, &lhs, &v8);
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  else if ((*(_BYTE *)(DerivedStorage + 332) & 1) != 0)
  {
    if ((*(_BYTE *)(DerivedStorage + 1500) & 1) != 0)
    {
      v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v12 = v13;
      v4 = 5;
    }
    else
    {
      v4 = *(_DWORD *)(DerivedStorage + 392);
      v13 = *(CMTime *)(DerivedStorage + 344);
      v12 = *(CMTime *)(DerivedStorage + 368);
    }
    v5 = *(unsigned int *)(DerivedStorage + 2196);
    v6 = *(_DWORD *)(DerivedStorage + 2216);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v12 = v13;
    v4 = 5;
  }
  lhs = v14;
  rhs = v13;
  v7 = v12;
  fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &lhs, v4 | 0xF0, (uint64_t)&rhs, (__int128 *)&v7.value, v5, 0, v6, 1, 0, 0, 0, 0, 0);
}

void fpfs_enqueuePrerollWasCancelledNotificationIfNeeded(const __CFArray *a1)
{
  uint64_t DerivedStorage;
  const void **v3;
  uint64_t v4;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 2200))
  {
    v3 = (const void **)DerivedStorage;
    v4 = CMBaseObjectGetDerivedStorage();
    if (fpfs_getNext(v4, 0) == a1)
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!FigCFDictionarySetInt32())
        fpfs_EnqueueNotification(*v3, CFSTR("PrerollWasCancelled"), *v3, Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t fpfs_UpdateNeroPlaybackActiveStateAndNotifyIfNeeded(const void *a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 463) != a3)
  {
    v6 = result;
    *(_BYTE *)(result + 463) = a3;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = Mutable;
    v10 = (const void *)*MEMORY[0x1E0C9AE50];
    v11 = (const void *)*MEMORY[0x1E0C9AE40];
    if (*(_BYTE *)(v6 + 463))
      v12 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v12 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("CurrentIsNeroPlaybackActive"), v12);
    if (*(_BYTE *)(v6 + 463))
      v13 = v10;
    else
      v13 = v11;
    FigPropertyStorageSetValue(*(_QWORD *)(v6 + 16), CFSTR("IsNeroPlaybackActive"), v13);
    fpfs_EnqueueNotification(a1, CFSTR("IsNeroPlaybackActiveDidChange"), a1, v9);
  }
  return result;
}

uint64_t fpfs_GetItemBufferedDuration(const __CFArray *a1, CMTime *a2, CMTime *a3, unsigned int a4)
{
  uint64_t DerivedStorage;
  float v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 v17;
  int v18;
  char v19;
  _OWORD *v20;
  char v21;
  _OWORD *v22;
  char v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  CMTimeEpoch v36;
  CMTime *v37;
  CMTimeEpoch epoch;
  uint64_t v39;
  unsigned __int8 v40;
  CMTimeEpoch v41;
  CMTimeEpoch v42;
  char v43;
  CMTimeEpoch v44;
  __int128 v45;
  int v46;
  CMTime *v47;
  CMTimeEpoch v48;
  CMTimeEpoch v49;
  uint64_t v50;
  CMTime *v52;
  int v53;
  int v54;
  int v55;
  char v56;
  __int128 v57;
  int v58;
  CMTimeRange v59;
  CMTime v60;
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  CMTime time1;
  CMTime v65;
  CMTime v66;
  CMTime v67;
  CMTime v68;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(float *)(CMBaseObjectGetDerivedStorage() + 108);
  memset(&v65, 0, sizeof(v65));
  v10 = 1;
  fpfs_GetNextTimeToPlay(DerivedStorage, 1, (uint64_t)&v65);
  v68 = v65;
  v67 = v65;
  v66 = v65;
  v11 = *(_DWORD *)(DerivedStorage + 1088);
  if ((v11 & 1) != 0)
  {
    v10 = *(unsigned __int8 *)(DerivedStorage + 471);
    if (*(_BYTE *)(DerivedStorage + 553))
    {
      if (*(_BYTE *)(DerivedStorage + 471) && *(_QWORD *)(DerivedStorage + 1760))
        v10 = *(unsigned __int8 *)(DerivedStorage + 474);
    }
  }
  v52 = a2;
  if ((v11 & 2) != 0)
  {
    v12 = *(unsigned __int8 *)(DerivedStorage + 472);
    if (*(_BYTE *)(DerivedStorage + 553) && *(_BYTE *)(DerivedStorage + 472) && *(_QWORD *)(DerivedStorage + 1760))
      v12 = *(unsigned __int8 *)(DerivedStorage + 475);
  }
  else
  {
    v12 = 1;
  }
  v53 = v12;
  v54 = v10;
  v13 = *(_QWORD *)(DerivedStorage + 1040);
  if (v13)
  {
    v14 = 0;
    v55 = 0;
    v56 = 0;
    v58 = 0;
    while (1)
    {
      v15 = *(_DWORD *)(v13 + 152);
      if (v15 == 7 || v15 == 4)
      {
        time1 = *(CMTime *)(v13 + 192);
        time2 = v65;
        if (CMTimeCompare(&time1, &time2) > 0 || *(_BYTE *)(v13 + 184))
          goto LABEL_63;
      }
      else if (*(_QWORD *)(v13 + 48) == *(_QWORD *)(DerivedStorage + 16 * *(unsigned __int8 *)(v13 + 180) + 1000))
      {
        goto LABEL_63;
      }
      v17 = fpfs_LooksLikeStrandedTrack(a1, *(unsigned __int8 *)(v13 + 180), a4, v13) && *(_BYTE *)(v13 + 184) == 0;
      v18 = *(_DWORD *)(v13 + 32);
      switch(v18)
      {
        case 1935832172:
          v21 = (*(_BYTE *)(v13 + 228) & 1) == 0 || v17;
          if ((v21 & 1) == 0)
          {
            v22 = (_OWORD *)(v13 + 216);
            if (v9 < 0.0)
            {
              time2 = v66;
              *(_OWORD *)&lhs.value = *v22;
              lhs.epoch = *(_QWORD *)(v13 + 232);
              CMTimeMinimum(&time1, &time2, &lhs);
              v66 = time1;
            }
            else
            {
              time1 = v66;
              *(_OWORD *)&time2.value = *v22;
              time2.epoch = *(_QWORD *)(v13 + 232);
              CMTimeMaximum(&v66, &time1, &time2);
            }
          }
          v55 = 1;
          break;
        case 1986618469:
          v23 = (*(_BYTE *)(v13 + 228) & 1) == 0 || v17;
          if ((v23 & 1) == 0)
          {
            v24 = (_OWORD *)(v13 + 216);
            if (v9 < 0.0)
            {
              time2 = v67;
              *(_OWORD *)&lhs.value = *v24;
              lhs.epoch = *(_QWORD *)(v13 + 232);
              CMTimeMinimum(&time1, &time2, &lhs);
              v67 = time1;
            }
            else
            {
              time1 = v67;
              *(_OWORD *)&time2.value = *v24;
              time2.epoch = *(_QWORD *)(v13 + 232);
              CMTimeMaximum(&v67, &time1, &time2);
            }
          }
          v28 = *(_QWORD *)(v13 + 48);
          v29 = DerivedStorage + 16 * *(unsigned __int8 *)(v13 + 180);
          v30 = v28 == *(_QWORD *)(v29 + 992) || v28 == *(_QWORD *)(v29 + 1000);
          if (v30 && !v17)
            v54 = *(unsigned __int8 *)(v13 + 182);
          v58 = 1;
          break;
        case 1936684398:
          v19 = (*(_BYTE *)(v13 + 228) & 1) == 0 || v17;
          if ((v19 & 1) == 0)
          {
            v20 = (_OWORD *)(v13 + 216);
            if (v9 < 0.0)
            {
              time2 = v68;
              *(_OWORD *)&lhs.value = *v20;
              lhs.epoch = *(_QWORD *)(v13 + 232);
              CMTimeMinimum(&time1, &time2, &lhs);
              v68 = time1;
            }
            else
            {
              time1 = v68;
              *(_OWORD *)&time2.value = *v20;
              time2.epoch = *(_QWORD *)(v13 + 232);
              CMTimeMaximum(&v68, &time1, &time2);
            }
          }
          v25 = *(_QWORD *)(v13 + 48);
          v26 = DerivedStorage + 16 * *(unsigned __int8 *)(v13 + 180);
          v27 = v25 == *(_QWORD *)(v26 + 992) || v25 == *(_QWORD *)(v26 + 1000);
          if (v27 && !v17)
            v53 = *(unsigned __int8 *)(v13 + 182);
          v56 = 1;
          break;
      }
LABEL_63:
      if ((*(_BYTE *)(v13 + 228) & 1) != 0)
        goto LABEL_72;
      v31 = *(_DWORD *)(v13 + 32);
      if (v31 != 1986618469 && v31 != 1936684398)
        goto LABEL_72;
      v32 = *(unsigned __int8 *)(v13 + 180);
      v33 = *(unsigned __int8 *)(DerivedStorage + v32 + 471);
      if (!*(_BYTE *)(DerivedStorage + 553))
        goto LABEL_70;
      if (!*(_BYTE *)(DerivedStorage + v32 + 471))
        goto LABEL_71;
      if (*(_QWORD *)(DerivedStorage + 1760))
      {
        v33 = *(unsigned __int8 *)(DerivedStorage + v32 + 474);
LABEL_70:
        if (!v33)
LABEL_71:
          v14 = 1;
      }
LABEL_72:
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
      {
        if (!a3)
          goto LABEL_78;
        goto LABEL_76;
      }
    }
  }
  v55 = 0;
  v56 = 0;
  v58 = 0;
  v14 = 0;
  if (!a3)
    goto LABEL_78;
LABEL_76:
  v34 = 0;
  v35 = *MEMORY[0x1E0CA2E18];
  v36 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  do
  {
    v37 = &a3[v34];
    *(_OWORD *)&v37->value = v35;
    v37->epoch = v36;
    ++v34;
  }
  while (v34 != 3);
LABEL_78:
  if (fpfsi_HasRequiredSubstreamsToIndicateBuffering())
  {
    memset(&time1, 0, sizeof(time1));
    memset(&time2, 0, sizeof(time2));
    if (v9 < 0.0)
    {
      lhs = v65;
      *(_OWORD *)&rhs.value = *(_OWORD *)&v68.value;
      epoch = v68.epoch;
    }
    else
    {
      lhs = v68;
      *(_OWORD *)&rhs.value = *(_OWORD *)&v65.value;
      epoch = v65.epoch;
    }
    rhs.epoch = epoch;
    CMTimeSubtract(&time2, &lhs, &rhs);
    v40 = v56;
    rhs = time2;
    v57 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v60.value = *MEMORY[0x1E0CA2E68];
    v41 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v60.epoch = v41;
    CMTimeMaximum(&lhs, &rhs, &v60);
    v42 = lhs.epoch;
    time2 = lhs;
    if (v58 | v40)
      v43 = v40;
    else
      v43 = 1;
    if (v14)
      v40 = v43;
    *(_OWORD *)&v52->value = *(_OWORD *)&lhs.value;
    v52->epoch = v42;
    if (v58)
    {
      if (v9 < 0.0)
      {
        lhs = v65;
        *(_OWORD *)&rhs.value = *(_OWORD *)&v67.value;
        v44 = v67.epoch;
      }
      else
      {
        lhs = v67;
        *(_OWORD *)&rhs.value = *(_OWORD *)&v65.value;
        v44 = v65.epoch;
      }
      rhs.epoch = v44;
      CMTimeSubtract(&time1, &lhs, &rhs);
      rhs = time1;
      *(_OWORD *)&v60.value = v57;
      v60.epoch = v41;
      CMTimeMaximum(&lhs, &rhs, &v60);
      time1 = lhs;
      if (!v40 || !v54 && v53 == 1)
        goto LABEL_95;
      if (v53 == v54)
      {
        lhs = time1;
        rhs = *v52;
        if (CMTimeCompare(&lhs, &rhs) < 0)
LABEL_95:
          *v52 = time1;
      }
    }
    if (a3)
    {
      if ((*(_BYTE *)(DerivedStorage + 1088) & 2) != 0)
      {
        if (v58)
          *a3 = time1;
        v46 = v55;
        if (v40)
          a3[1] = time2;
      }
      else
      {
        v45 = *(_OWORD *)&v52->value;
        a3->epoch = v52->epoch;
        *(_OWORD *)&a3->value = v45;
        v46 = v55;
      }
      if (v46)
      {
        v47 = a3 + 2;
        if (v9 < 0.0)
        {
          rhs = v65;
          *(_OWORD *)&v60.value = *(_OWORD *)&v66.value;
          v48 = v66.epoch;
        }
        else
        {
          rhs = v66;
          *(_OWORD *)&v60.value = *(_OWORD *)&v65.value;
          v48 = v65.epoch;
        }
        v60.epoch = v48;
        CMTimeSubtract(&lhs, &rhs, &v60);
        *(_OWORD *)&v47->value = *(_OWORD *)&lhs.value;
        v49 = lhs.epoch;
        v47->epoch = lhs.epoch;
        *(_OWORD *)&rhs.value = *(_OWORD *)&v47->value;
        rhs.epoch = v49;
        *(_OWORD *)&v60.value = v57;
        v60.epoch = v41;
        CMTimeMaximum(&lhs, &rhs, &v60);
        *v47 = lhs;
      }
    }
  }
  else
  {
    v39 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
    a2->epoch = *(_QWORD *)(v39 + 16);
  }
  v50 = *(_QWORD *)(DerivedStorage + 3096);
  time1 = v65;
  time2 = *v52;
  CMTimeRangeMake(&v59, &time1, &time2);
  return FigNetworkUrgencyMonitorSetPlayableRange(v50, &v59);
}

uint64_t fpfs_CheckIfLikelyToKeepUpAndNotify(void *a1, const __CFArray *a2, CMTime *a3, int a4, CMTime *a5, CMTime *a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21;
  _BOOL4 v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v24;
  int v25;
  int IsItemReadyToStart;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t AllocatorForMedia;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const __CFString *, uint64_t, CMTime *);
  NSObject *v36;
  unsigned int value;
  unsigned int v38;
  const char *v39;
  void *v40;
  const char *v41;
  Float64 Seconds;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  const char *v51;
  int v52;
  const char *v53;
  uint64_t v54;
  uint64_t RenderingTrackofType;
  int v56;
  const void *v57;
  double Current;
  double v59;
  double v60;
  const __CFAllocator *v61;
  double v62;
  const __CFAllocator *v63;
  uint64_t v64;
  CMTimeValue v65;
  void (*v66)(uint64_t, const __CFArray *, CMTimeValue);
  double v67;
  uint64_t v68;
  void (*v69)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  int v70;
  char v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  uint64_t v77;
  void (*v78)(uint64_t, __CFString *, __CFString *);
  uint64_t v79;
  void (*v80)(uint64_t, __CFString *, __CFString *);
  uint64_t v81;
  void (*v82)(uint64_t, __CFString *, __CFString *);
  uint64_t v83;
  void (*v84)(uint64_t, __CFString *, __CFString *);
  uint64_t v85;
  BOOL v86;
  double v87;
  double v88;
  double v89;
  double v90;
  uint64_t v91;
  void (*v92)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v93;
  void (*v94)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  int IsDisplayModeSwitchInProgress;
  _BOOL4 v96;
  BOOL v97;
  CMTime *v98;
  float v99;
  _BOOL4 v100;
  uint64_t v101;
  NSObject *v102;
  unsigned int v103;
  unsigned int v104;
  const char *v105;
  void *v106;
  NSObject *v107;
  unsigned int v108;
  unsigned int v109;
  const char *v110;
  NSObject *v111;
  unsigned int v112;
  unsigned int v113;
  const char *v114;
  NSObject *v115;
  unsigned int v116;
  unsigned int v117;
  NSObject *v118;
  unsigned int v119;
  unsigned int v120;
  const char *v121;
  NSObject *v122;
  unsigned int v123;
  unsigned int v124;
  const char *v125;
  const char *v126;
  double v127;
  float v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  unsigned int v132;
  unsigned int v133;
  const char *v134;
  const char *v135;
  double v136;
  int v137;
  uint64_t v139;
  CFTypeRef NotificationPayloadForProperties;
  int v141;
  int v142;
  int v143;
  CMTime *v144;
  unsigned int v145;
  int v146;
  CMTime *v147;
  CMTimeEpoch v148;
  __int128 v149;
  uint64_t v150;
  CMTime *v151;
  _BOOL4 v152;
  int v153;
  CMTime v154;
  os_log_type_t v155;
  int v156;
  CFTypeRef cf;
  CMTime type;
  CMTime rhs;
  CMTime v160;
  uint64_t v161;
  CMTime v162;
  CMTime time2;
  const char *v164;
  __int16 v165;
  const __CFArray *v166;
  __int16 v167;
  const char *v168;
  __int16 v169;
  double v170;
  __int16 v171;
  int v172;
  __int16 v173;
  int v174;
  CMTime time1;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v149 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v162.value = *MEMORY[0x1E0CA2E18];
  v15 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v162.epoch = v15;
  v161 = 0;
  CFRetain(a1);
  v16 = CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    v29 = 4294954511;
    goto LABEL_262;
  }
  if (a4)
    v17 = 1;
  else
    v17 = *(_BYTE *)(DerivedStorage + 160) == 0;
  v153 = v17;
  v18 = *(_QWORD *)(v16 + 1696);
  v147 = a5;
  v148 = v15;
  if (v18)
    v19 = FigAlternateIsIFrameOnly(v18) != 0;
  else
    v19 = 0;
  v152 = fpfsi_waitForVenueDescriptionProcessing(v16);
  v150 = a7;
  v151 = a3;
  if (*(float *)(v16 + 840) != 0.0 || (*(float *)(DerivedStorage + 108) != 0.0 ? (v20 = 1) : (v20 = v19), v20 != 1))
  {
    v153 = 0;
    goto LABEL_29;
  }
  if (((v153 ^ 1 | v19) & 1) == 0)
  {
    v21 = a1;
    if (fpfs_FirstRenderingTrackofType((uint64_t)a2, 1936684398))
      v22 = 1;
    else
      v22 = fpfs_FirstRenderingTrackofType((uint64_t)a2, 1986618469) != 0;
    time1 = *a3;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2) && v22)
    {
      if (dword_1EE2A2A88)
      {
        LODWORD(v160.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        v153 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a1 = v21;
        goto LABEL_29;
      }
      v153 = 1;
    }
    else
    {
      if (dword_1EE2A2A88)
      {
        LODWORD(v160.value) = 0;
        LOBYTE(type.value) = 0;
        v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!*(_BYTE *)(DerivedStorage + 160))
        fpfs_stopPlaybackForInternalReason(v21);
      v153 = 0;
    }
    a1 = v21;
  }
LABEL_29:
  v25 = *(_DWORD *)(v16 + 524);
  time1 = *a3;
  IsItemReadyToStart = fpfs_IsItemReadyToStart((uint64_t)a2, &time1, a7, (float *)&v161 + 1, &v162, (uint64_t)&v161);
  if ((v162.flags & 1) == 0)
    goto LABEL_35;
  if (*(float *)(v16 + 840) != 0.0)
    goto LABEL_35;
  memset(&v160, 0, sizeof(v160));
  fpfs_GetTime(v16, (uint64_t)&rhs);
  time1 = v162;
  CMTimeSubtract(&v160, &time1, &rhs);
  memset(&type, 0, sizeof(type));
  time1 = *a3;
  time2 = v160;
  CMTimeSubtract(&type, &time1, &time2);
  v27 = *(unsigned int *)(v16 + 1088);
  time1 = type;
  time2 = v162;
  if (!fpfs_CheckCanKeepUp((uint64_t)a2, (uint64_t)&time1, &time2, v27, 0, 0, 0, 0))
    goto LABEL_35;
  time1 = v162;
  if (fpfsi_TryToSeekWithinBuffer(a2, &time1, 0, 1))
  {
    cf = 0;
    time1 = v162;
    fpfsi_CopyDateForTime((uint64_t)a2, &time1, (CFDateRef *)&cf);
    if (dword_1EE2A2A88)
    {
      v156 = 0;
      v155 = OS_LOG_TYPE_DEFAULT;
      v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
      CFRelease(cf);
    v29 = 4294954433;
  }
  else
  {
LABEL_35:
    v29 = 0;
  }
  if (!(v153 | IsItemReadyToStart))
    goto LABEL_257;
  v146 = v25;
  v144 = a6;
  if (!(*(unsigned __int8 *)(v16 + 464) | v152))
  {
    if (*(_BYTE *)(v16 + 553) == 1)
    {
      v30 = v19;
      time1.value = 0;
      v31 = *(_QWORD *)(v16 + 928);
      AllocatorForMedia = FigGetAllocatorForMedia();
      FigBytePumpGetFigBaseObject(v31);
      v34 = v33;
      v35 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
      if (v35)
        v35(v34, CFSTR("FBP_PrebufferReservation"), AllocatorForMedia, &time1);
      if (time1.value)
        CFRelease((CFTypeRef)time1.value);
      v19 = v30;
    }
    v143 = v19;
    if (dword_1EE2A2A88)
    {
      LODWORD(v160.value) = 0;
      LOBYTE(type.value) = 0;
      v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = v160.value;
      if (os_log_type_enabled(v36, type.value))
        v38 = value;
      else
        v38 = value & 0xFFFFFFFE;
      if (v38)
      {
        if (a1)
          v39 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v39 = "";
        v40 = a1;
        if (a2)
          v41 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v41 = "";
        time1 = *v151;
        Seconds = CMTimeGetSeconds(&time1);
        LODWORD(time2.value) = 136316930;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_CheckIfLikelyToKeepUpAndNotify";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v40;
        HIWORD(time2.epoch) = 2082;
        v164 = v39;
        v165 = 2048;
        v166 = a2;
        v167 = 2082;
        v168 = v41;
        a1 = v40;
        v169 = 2048;
        v170 = Seconds;
        v171 = 1024;
        v172 = v153;
        v173 = 1024;
        v174 = IsItemReadyToStart;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v29 = v29;
      v19 = v143;
    }
    fpfs_UpdateDimensions(a2, 1);
    v43 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(v43 + 464))
    {
      v50 = v43;
      if (!*(_BYTE *)(v43 + 468) && *MEMORY[0x1E0CA1FC0] == 1)
      {
        if (a2)
          v51 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v51 = "";
        strncpy((char *)&time1, v51, 8uLL);
        kdebug_trace();
      }
      *(_BYTE *)(v50 + 464) = 1;
      *(_BYTE *)(v50 + 468) = 1;
      NotificationPayloadForProperties = (CFTypeRef)fpfs_CreateNotificationPayloadForProperties(a1, (uint64_t)a2, v44, v45, v46, v47, v48, v49, CFSTR("CanPlayFastForward"), (uint64_t)CFSTR("CanPlayFastReverse"));
      fpfs_EnqueueNotification(a1, CFSTR("ReadyForPlayback"), a2, NotificationPayloadForProperties);
    }
  }
  v52 = (IsItemReadyToStart == 0) & ~v19;
  if ((v52 & 1) != 0 || *(_DWORD *)(v16 + 524) == 1)
    goto LABEL_103;
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      v53 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
    else
      v53 = "";
    strncpy((char *)&time1, v53, 8uLL);
    kdebug_trace();
  }
  v141 = v52;
  v139 = DerivedStorage;
  fpfs_setPlaythroughPredictionAndNotify(a2, 1);
  v54 = CMBaseObjectGetDerivedStorage();
  time2.value = 0;
  v160.value = 0;
  RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a2, 1986618469);
  if (RenderingTrackofType || (RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a2, 1936684398)) != 0)
  {
    v56 = v19;
    v57 = *(const void **)(RenderingTrackofType + 440);
  }
  else
  {
    v56 = v19;
    v57 = 0;
  }
  if (!fpfsi_copyPlayableTime((uint64_t)a2, (CFTypeRef *)&v160))
  {
    if (*(double *)(v54 + 2016) > 0.0)
    {
      Current = CFAbsoluteTimeGetCurrent();
      v59 = *(double *)(v54 + 2016);
LABEL_85:
      v60 = Current - v59;
      v61 = (const __CFAllocator *)FigGetAllocatorForMedia();
      *(_OWORD *)&time1.value = v149;
      time1.epoch = v148;
      if (FigMetricItemLikelyToKeepUpEventCreate(v61, (__int128 *)&time1.value, 0, 0, v57, (const void *)v160.value, &time2, v60))goto LABEL_90;
LABEL_88:
      v64 = *(_QWORD *)(v54 + 3360);
      v65 = time2.value;
      v66 = *(void (**)(uint64_t, const __CFArray *, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 40);
      if (v66)
        v66(v64, a2, v65);
      goto LABEL_90;
    }
    if (*(_BYTE *)(v54 + 2073))
    {
      if (*(double *)(v54 + 2008) <= 0.0)
        goto LABEL_88;
      Current = CFAbsoluteTimeGetCurrent();
      v59 = *(double *)(v54 + 2008);
      goto LABEL_85;
    }
    v62 = CFAbsoluteTimeGetCurrent() - *(double *)(v54 + 1976);
    v63 = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(_OWORD *)&time1.value = v149;
    time1.epoch = v148;
    if (!FigMetricItemInternalInitialLikelyToKeepUpEventCreate(v63, (__int128 *)&time1.value, 0, 0, v57, (const void *)v160.value, &time2, v62))goto LABEL_88;
  }
LABEL_90:
  if (v160.value)
    CFRelease((CFTypeRef)v160.value);
  v19 = v56;
  v52 = v141;
  if (time2.value)
    CFRelease((CFTypeRef)time2.value);
  DerivedStorage = v139;
  if (*(_BYTE *)(v16 + 2073))
  {
    if (*(_BYTE *)(v16 + 2075))
    {
      v67 = CFAbsoluteTimeGetCurrent() - *(double *)(v16 + 1968);
      *(_BYTE *)(v16 + 2075) = 0;
    }
    else
    {
      if (*(double *)(v16 + 2008) <= 0.0)
        goto LABEL_103;
      v67 = CFAbsoluteTimeGetCurrent() - *(double *)(v16 + 2008);
    }
  }
  else
  {
    *(_BYTE *)(v16 + 2073) = 1;
    v67 = CFAbsoluteTimeGetCurrent() - *(double *)(v16 + 1976);
    *(double *)(v16 + 1960) = v67;
  }
  v68 = *(_QWORD *)(v16 + 2536);
  if (v68)
  {
    v69 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v69)
      v69(v68, CFSTR("playerStats"), CFSTR("StartupTime"), (uint64_t)(v67 * 1000.0), 0);
  }
LABEL_103:
  fpfsi_performCurrentResourceConservationAction(a2, *(_DWORD *)(DerivedStorage + 764));
  *(_QWORD *)(v16 + 2008) = 0;
  if (fpfs_getNext(DerivedStorage, 0) != a2)
    goto LABEL_256;
  v145 = v29;
  v70 = v146;
  v142 = v52;
  if (v146 == 1)
    v71 = 1;
  else
    v71 = v52;
  if ((v71 & 1) == 0)
  {
    time1 = *v151;
    v72 = CMTimeGetSeconds(&time1);
    v73 = CMBaseObjectGetDerivedStorage();
    v74 = CMBaseObjectGetDerivedStorage();
    fpfsi_RTCReportingUpdateCurrentAlternateInfo();
    fpfsi_RTCReportingUpdateBufferDuration(v73, v150, v72);
    v75 = *(_QWORD *)(v73 + 2536);
    if (v75)
    {
      v76 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
      if (v76)
        v76(v75, CFSTR("playerStats"), 105, 0, 0);
      v77 = *(_QWORD *)(v73 + 2536);
      if (v77)
      {
        v78 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 64);
        if (v78)
          v78(v77, CFSTR("playerStats"), CFSTR("CSCnt"));
        v79 = *(_QWORD *)(v73 + 2536);
        if (v79)
        {
          v80 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 64);
          if (v80)
            v80(v79, CFSTR("playerStats"), CFSTR("SeekCnt"));
          v81 = *(_QWORD *)(v73 + 2536);
          if (v81)
          {
            v82 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 64);
            if (v82)
              v82(v81, CFSTR("playerStats"), CFSTR("PSCnt"));
            v83 = *(_QWORD *)(v73 + 2536);
            if (v83)
            {
              v84 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 64);
              if (v84)
                v84(v83, CFSTR("playerStats"), CFSTR("TotalSeekTime"));
            }
          }
        }
      }
    }
    v85 = *(_QWORD *)(v73 + 1696);
    if (v85)
      v86 = FigAlternateIsIFrameOnly(v85) != 0;
    else
      v86 = 0;
    v70 = v146;
    if (!*(_BYTE *)(v73 + 2584) && !v86)
    {
      *(_BYTE *)(v73 + 2584) = 1;
      v87 = CFAbsoluteTimeGetCurrent();
      v88 = *(double *)(v73 + 2976);
      v89 = CFAbsoluteTimeGetCurrent();
      v90 = *(double *)(v73 + 2024);
      *(CFAbsoluteTime *)(v73 + 2984) = CFAbsoluteTimeGetCurrent();
      v91 = *(_QWORD *)(v73 + 2536);
      if (v91)
      {
        v92 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v92)
          v92(v91, CFSTR("playerStats"), CFSTR("MaxBufferTime"), (uint64_t)((v87 - v88) * 1000.0), 0);
        v93 = *(_QWORD *)(v73 + 2536);
        if (v93)
        {
          v94 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v94)
            v94(v93, CFSTR("playerStats"), CFSTR("TimeItemToLTKU"), (uint64_t)((v89 - v90) * 1000.0), 0);
        }
      }
      fpfsi_networkActivitySubmitMetricsForInitialStartupIfAvailable();
      fpfsi_RTCReportingReportDesiredRateChange(*(float *)(v74 + 108));
      v70 = v146;
    }
  }
  if (*(float *)(DerivedStorage + 108) == 0.0)
  {
    v29 = v145;
    if (v70 != 1)
    {
      v52 = v142;
      if (dword_1EE2A2A88)
      {
        LODWORD(v160.value) = 0;
        LOBYTE(type.value) = 0;
        v111 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v112 = v160.value;
        if (os_log_type_enabled(v111, type.value))
          v113 = v112;
        else
          v113 = v112 & 0xFFFFFFFE;
        if (v113)
        {
          if (a1)
            v114 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v114 = "";
          if (a2)
            v121 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v121 = "";
          LODWORD(time2.value) = 136316162;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_CheckIfLikelyToKeepUpAndNotify";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = a1;
          HIWORD(time2.epoch) = 2082;
          v164 = v114;
          v165 = 2048;
          v166 = a2;
          v167 = 2082;
          v168 = v121;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v29 = v145;
        v52 = v142;
      }
      if (fpfs_shouldReleaseRenderChainForPausing((uint64_t)a2))
        fpfsi_ReleaseRenderChainsForPausing(*(const void **)(DerivedStorage + 80));
      goto LABEL_256;
    }
    goto LABEL_164;
  }
  v29 = v145;
  if (*(float *)(v16 + 840) != 0.0)
    goto LABEL_164;
  IsDisplayModeSwitchInProgress = FPSupport_IsDisplayModeSwitchInProgress();
  fpfs_GetNextTimeToPlay(v16, 0, (uint64_t)&v154);
  v96 = fpfsi_atOrAfterTimeToPausePlayback(v16, &v154);
  if (IsDisplayModeSwitchInProgress)
    v97 = v153 == 0;
  else
    v97 = 0;
  if (v97 || v96 || v152)
  {
    if (IsDisplayModeSwitchInProgress)
    {
      if (dword_1EE2A2A88)
      {
        v106 = a1;
        LODWORD(v160.value) = 0;
        LOBYTE(type.value) = 0;
        v107 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v108 = v160.value;
        if (os_log_type_enabled(v107, type.value))
          v109 = v108;
        else
          v109 = v108 & 0xFFFFFFFE;
        if (!v109)
          goto LABEL_255;
        if (a1)
          v110 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v110 = "";
        if (!a2)
        {
          v125 = "";
LABEL_254:
          v136 = *(float *)(DerivedStorage + 108);
          LODWORD(time2.value) = 136316418;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_CheckIfLikelyToKeepUpAndNotify";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v106;
          HIWORD(time2.epoch) = 2082;
          v164 = v110;
          v165 = 2048;
          v166 = a2;
          v167 = 2082;
          v168 = v125;
          v169 = 2048;
          v170 = v136;
          _os_log_send_and_compose_impl();
LABEL_255:
          v52 = v142;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v106;
          v29 = v145;
          goto LABEL_256;
        }
LABEL_252:
        v125 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        goto LABEL_254;
      }
    }
    else
    {
      if (v96)
      {
        if (dword_1EE2A2A88)
        {
          v106 = a1;
          LODWORD(v160.value) = 0;
          LOBYTE(type.value) = 0;
          v118 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v119 = v160.value;
          if (os_log_type_enabled(v118, type.value))
            v120 = v119;
          else
            v120 = v119 & 0xFFFFFFFE;
          if (!v120)
            goto LABEL_255;
          if (a1)
            v110 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v110 = "";
          if (!a2)
          {
            v125 = "";
            goto LABEL_254;
          }
          goto LABEL_252;
        }
      }
      else if (v152 && dword_1EE2A2A88)
      {
        v106 = a1;
        LODWORD(v160.value) = 0;
        LOBYTE(type.value) = 0;
        v122 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v123 = v160.value;
        if (os_log_type_enabled(v122, type.value))
          v124 = v123;
        else
          v124 = v123 & 0xFFFFFFFE;
        if (!v124)
          goto LABEL_255;
        if (a1)
          v110 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v110 = "";
        if (!a2)
        {
          v125 = "";
          goto LABEL_254;
        }
        goto LABEL_252;
      }
      v29 = v145;
    }
LABEL_164:
    v52 = v142;
    goto LABEL_256;
  }
  if (!*(_BYTE *)(DerivedStorage + 168) && *(_BYTE *)(v16 + 464))
    fpfs_notifyExternalStartupTasksOfEvents((uint64_t)a1, 4, 0, 0, MEMORY[0x1E0CA2E18]);
  v98 = v144;
  if (!fpfs_areAllExternalStartupTasksCompleted())
  {
    if (dword_1EE2A2A88)
    {
      v106 = a1;
      LODWORD(v160.value) = 0;
      LOBYTE(type.value) = 0;
      v115 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v116 = v160.value;
      if (os_log_type_enabled(v115, type.value))
        v117 = v116;
      else
        v117 = v116 & 0xFFFFFFFE;
      if (!v117)
        goto LABEL_255;
      if (a1)
        v110 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v110 = "";
      if (!a2)
      {
        v125 = "";
        goto LABEL_254;
      }
      goto LABEL_252;
    }
    goto LABEL_164;
  }
  if (!fpfs_audioOnlyValidAlternateList(v16))
  {
    v99 = *(float *)(DerivedStorage + 108);
    v100 = v99 <= 2.0;
    if (v99 < 0.0)
      v100 = 0;
    if (((v100 | v19) & 1) == 0 && !*(_QWORD *)(v16 + 2960))
      fpfs_EnterBestEffortTrickplayMode((uint64_t)a1, (uint64_t)a2, v99);
  }
  v52 = v142;
  if (!*(_QWORD *)(v16 + 2960))
  {
    v101 = fpfs_FirstRenderingTrackofType((uint64_t)a2, 1986618469);
    if (!v101 || !*(_BYTE *)(v101 + 104))
    {
      if (dword_1EE2A2A88)
      {
        LODWORD(v160.value) = 0;
        LOBYTE(type.value) = 0;
        v102 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v103 = v160.value;
        if (os_log_type_enabled(v102, type.value))
          v104 = v103;
        else
          v104 = v103 & 0xFFFFFFFE;
        if (v104)
        {
          if (a1)
            v105 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v105 = "";
          if (a2)
            v126 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v126 = "";
          v127 = *(float *)(DerivedStorage + 108);
          LODWORD(time2.value) = 136316418;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_CheckIfLikelyToKeepUpAndNotify";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = a1;
          HIWORD(time2.epoch) = 2082;
          v164 = v105;
          v165 = 2048;
          v166 = a2;
          v167 = 2082;
          v168 = v126;
          v169 = 2048;
          v170 = v127;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v98 = v144;
        v52 = v142;
      }
      v128 = *(float *)(DerivedStorage + 108);
      time1 = *v147;
      time2 = *v98;
      v129 = fpfs_SetRateWithFadeInternal(a1, MEMORY[0x1E0CA2E18], &time1, (__int128 *)&time2.value, v128);
      if ((_DWORD)v129)
      {
        v130 = v129;
        LODWORD(v160.value) = 0;
        LOBYTE(type.value) = 0;
        v131 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v132 = v160.value;
        if (os_log_type_enabled(v131, type.value))
          v133 = v132;
        else
          v133 = v132 & 0xFFFFFFFE;
        if (v133)
        {
          if (a1)
            v134 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v134 = "";
          if (a2)
            v135 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v135 = "";
          LODWORD(time2.value) = 136316418;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_CheckIfLikelyToKeepUpAndNotify";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = a1;
          HIWORD(time2.epoch) = 2082;
          v164 = v134;
          v165 = 2048;
          v166 = a2;
          v167 = 2082;
          v168 = v135;
          v169 = 1024;
          LODWORD(v170) = v130;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v29 = v130;
        goto LABEL_164;
      }
      if (*(_DWORD *)(DerivedStorage + 808) != 1 && *(float *)(DerivedStorage + 108) == 1.0)
      {
        fpfs_ReportVideoPlaybackTimeThroughFigLog((uint64_t)a2);
        fpfs_ReportAudioPlaybackThroughFigLog((uint64_t)a2);
      }
      v29 = 0;
    }
  }
LABEL_256:
  if (!v52)
  {
    v137 = *(_DWORD *)(v16 + 524);
    goto LABEL_260;
  }
LABEL_257:
  v137 = *(_DWORD *)(v16 + 524);
  if (!v137)
  {
    fpfs_setPlaythroughPredictionAndNotify(a2, 2);
    goto LABEL_262;
  }
LABEL_260:
  if (v137 == 1)
    fpfsi_setPlaybackMonitorOkayToAttemptSwitchUp(v16, v161);
LABEL_262:
  CFRelease(a1);
  return v29;
}

const __CFArray *fpfs_getNext(uint64_t a1, const void *a2)
{
  const __CFArray *result;
  CFArrayRef *v5;
  CFIndex Count;
  CFIndex v7;
  const __CFArray *v8;
  CFArrayRef *v9;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex FirstIndexOfValue;
  CFRange v13;

  if (a2)
  {
    v5 = (CFArrayRef *)(a1 + 72);
    result = *(const __CFArray **)(a1 + 72);
    if (!result)
    {
      v8 = 0;
      v7 = 0;
      if (*(const void **)(a1 + 80) == a2)
        return result;
LABEL_10:
      v13.location = 0;
      v13.length = v7;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v8, v13, a2);
      result = 0;
      v11 = FirstIndexOfValue + 1;
      if (FirstIndexOfValue + 1 >= v7)
        return result;
      return (const __CFArray *)CFArrayGetValueAtIndex(*v5, v11);
    }
    Count = CFArrayGetCount(result);
    v7 = Count;
    if (*(const void **)(a1 + 80) != a2)
    {
      v8 = *v5;
      goto LABEL_10;
    }
    v11 = 0;
    if (Count > 0)
      return (const __CFArray *)CFArrayGetValueAtIndex(*v5, v11);
    return 0;
  }
  result = *(const __CFArray **)(a1 + 80);
  if (!result)
  {
    v10 = *(const __CFArray **)(a1 + 72);
    v9 = (CFArrayRef *)(a1 + 72);
    result = v10;
    if (v10)
    {
      if (CFArrayGetCount(result) > 0)
      {
        v11 = 0;
        v5 = v9;
        return (const __CFArray *)CFArrayGetValueAtIndex(*v5, v11);
      }
      return 0;
    }
  }
  return result;
}

uint64_t fpfs_setIFrameOnlyRate(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t FigBaseObject;
  void (*v13)(uint64_t, const __CFString *, uint64_t);
  uint64_t v14;
  __int128 v15;
  CMTime v16;
  os_log_type_t type;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 1696);
  if (!v5 || !FigAlternateIsIFrameOnly(v5))
    return FigSignalErrorAt();
  result = 0;
  if (a2 != 0.0 && *(float *)(DerivedStorage + 840) != a2)
  {
    if (dword_1EE2A2A88)
    {
      v18 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v8 = *(_QWORD *)(DerivedStorage + 1040);
    if (v8)
    {
      v9 = *MEMORY[0x1E0C9AE40];
      do
      {
        if (*(_DWORD *)(v8 + 32) == 1986618469)
        {
          v10 = *(_QWORD *)(v8 + 96);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 32);
            if (v11)
            {
              FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
              v13 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
              if (v13)
                v13(FigBaseObject, CFSTR("AllowVideoQualityOfServiceAdjustments"), v9);
            }
          }
        }
        v8 = *(_QWORD *)(v8 + 8);
      }
      while (v8);
    }
    fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v16);
    v14 = MEMORY[0x1E0CA2E18];
    result = fpfs_IssueSeekToPump(a1, &v16, MEMORY[0x1E0CA2E10], 0, 1, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
    if (!(_DWORD)result)
    {
      fpfs_GetTime(DerivedStorage, (uint64_t)&v15);
      result = fpfs_PrepareToReuseLastIFrameTrack(a1, &v15, 1);
      if (!(_DWORD)result)
      {
        *(_DWORD *)(DerivedStorage + 1552) = 1044549468;
        *(_OWORD *)(DerivedStorage + 1512) = *(_OWORD *)v14;
        *(_QWORD *)(DerivedStorage + 1528) = *(_QWORD *)(v14 + 16);
        if (*(double *)(DerivedStorage + 1936) != 0.0)
        {
          *(double *)(DerivedStorage + 1944) = *(double *)(DerivedStorage + 1944)
                                             + (CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 1936))
                                             * fabsf(*(float *)(DerivedStorage + 840));
          *(double *)(DerivedStorage + 1952) = *(double *)(DerivedStorage + 1952)
                                             + CFAbsoluteTimeGetCurrent()
                                             - *(double *)(DerivedStorage + 1936);
          *(_QWORD *)(DerivedStorage + 1936) = 0;
        }
        fpfsi_RTCReportingUpdatePlayingTrackStats(DerivedStorage);
        fpfsi_RTCReportingReportRateChange(DerivedStorage, *(float *)(DerivedStorage + 840));
        return 0;
      }
    }
  }
  return result;
}

uint64_t fpfs_FirstRenderingTrackofType(uint64_t a1, int a2)
{
  uint64_t result;

  for (result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040); result; result = *(_QWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 32) == a2 && *(_QWORD *)(result + 96))
      break;
  }
  return result;
}

uint64_t FigRenderPipelineCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigRenderPipelineSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(FigBaseObject, a2, a3);
  return result;
}

BOOL fpfsi_isItemPlayedOut(uint64_t a1)
{
  uint64_t DerivedStorage;
  int Duration;
  _BOOL8 result;
  CMTime v5;
  CMTime time2;
  CMTime time1;
  CMTime v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  Duration = fpfsi_GetDuration(a1, (__int128 *)&v8.value);
  result = 0;
  if (!Duration && (v8.flags & 0x1D) == 1)
  {
    fpfs_GetTime(DerivedStorage, (uint64_t)&time1);
    v5 = v8;
    CMTimeMultiplyByFloat64(&time2, &v5, 0.95);
    return CMTimeCompare(&time1, &time2) >= 0;
  }
  return result;
}

void fpfs_getAnchorTimeForSyncTimebase(float a1, uint64_t a2, uint64_t a3, CMTime *a4, CMTime *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  OpaqueCMTimebase *v10;
  float Rate;
  float v12;
  NSObject *v14;
  const void *v15;
  CMClockRef HostTimeClock;
  OpaqueCMClock *v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime rhs;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime time;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CMBaseObjectGetDerivedStorage();
  v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v21 = v22;
  v10 = *(OpaqueCMTimebase **)(v9 + 568);
  if (v10)
  {
    Rate = CMTimebaseGetRate(v10);
    v12 = *(float *)(DerivedStorage + 108);
    if (v12 == Rate && v12 == a1)
    {
      fpfs_GetNextTimeToPlay(v9, 0, (uint64_t)&v22);
      v15 = *(const void **)(v9 + 568);
      HostTimeClock = CMClockGetHostTimeClock();
      time = v22;
      CMSyncConvertTime(&v21, &time, v15, HostTimeClock);
      memset(&v20, 0, sizeof(v20));
      v17 = CMClockGetHostTimeClock();
      CMClockGetTime(&rhs, v17);
      time = v21;
      CMTimeSubtract(&v20, &time, &rhs);
      if (!dword_1EE2A2A88)
        goto LABEL_11;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      if (a1 == 0.0)
        goto LABEL_11;
      LODWORD(v20.value) = 0;
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_11:
  if (a4)
    *a4 = v22;
  if (a5)
    *a5 = v21;
}

double fpfs_getCachedAnchorTimeForItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  __int128 v7;
  CMTimeEpoch v8;
  uint64_t v9;
  OpaqueCMClock *HostTimeClock;
  uint64_t v11;
  __int128 v12;
  __int128 v14;
  CMTime time2;
  CMTime time1;
  CMTime v17;
  __int128 v18;
  CMTimeEpoch v19;
  __int128 v20;
  CMTimeEpoch v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v20 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)&v7 = v20;
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v21 = v8;
  v18 = v20;
  v19 = v8;
  v14 = v20;
  *(_OWORD *)&v17.value = v20;
  v17.epoch = v8;
  if ((*(_BYTE *)(DerivedStorage + 148) & 1) == 0)
  {
LABEL_4:
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = DerivedStorage + 112;
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v17, HostTimeClock);
  v12 = *(_OWORD *)(DerivedStorage + 136);
  v11 = DerivedStorage + 136;
  *(_OWORD *)&time1.value = v12;
  time1.epoch = *(_QWORD *)(v11 + 16);
  time2 = v17;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    v20 = *(_OWORD *)v9;
    v21 = *(_QWORD *)(v9 + 16);
    v7 = *(_OWORD *)v11;
    v18 = *(_OWORD *)v11;
    v19 = *(_QWORD *)(v11 + 16);
    goto LABEL_4;
  }
  *(_QWORD *)&v7 = v14;
  *(_OWORD *)v9 = v14;
  *(_QWORD *)(v9 + 16) = v8;
  *(_OWORD *)v11 = v14;
  *(_QWORD *)(v11 + 16) = v8;
  if (a3)
  {
LABEL_5:
    *(_QWORD *)&v7 = v20;
    *(_OWORD *)a3 = v20;
    *(_QWORD *)(a3 + 16) = v21;
  }
LABEL_6:
  if (a4)
  {
    *(_QWORD *)&v7 = v18;
    *(_OWORD *)a4 = v18;
    *(_QWORD *)(a4 + 16) = v19;
  }
  return *(double *)&v7;
}

uint64_t fpfsi_getTimebaseStarterTrack(uint64_t a1)
{
  uint64_t result;

  result = fpfs_FirstRenderingTrackofType(a1, 1936684398);
  if (!result)
  {
    result = fpfs_FirstRenderingTrackofType(a1, 1986618469);
    if (!result)
    {
      result = fpfs_FirstRenderingTrackofType(a1, 1835365473);
      if (!result)
      {
        result = fpfs_FirstRenderingTrackofType(a1, 1935832172);
        if (!result)
          return fpfs_FirstRenderingTrackofType(a1, 1668047728);
      }
    }
  }
  return result;
}

uint64_t fpfs_SetRateOnTrack(uint64_t *a1, CMTime *a2, CMTime *a3, float a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  CFPropertyListRef v9;
  const void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  const void *v15;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t v18;
  int v19;
  CMTimeValue *RichestDecodableFormat;
  CMTimeValue v21;
  double v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, const __CFString *, _QWORD, CMTime *);
  CFTypeID v38;
  CMClockOrTimebaseRef v39;
  const void *v40;
  CMClockRef HostTimeClock;
  CMTime *p_time;
  int v43;
  uint64_t v44;
  float v45;
  CMTime *p_valuePtr;
  CFNumberRef v47;
  NSObject *v48;
  unsigned int v49;
  unsigned int v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, _QWORD, CFNumberRef);
  uint64_t v59;
  NSObject *v60;
  unsigned int value;
  unsigned int v62;
  uint64_t v63;
  const char *v64;
  _OWORD *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t);
  uint64_t v71;
  void (*v72)(uint64_t, _QWORD);
  uint64_t *v73;
  uint64_t v74;
  const opaqueCMFormatDescription *v75;
  signed int MediaSubType;
  int v77;
  int v78;
  int v79;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  int v82;
  int v83;
  const void *v84;
  int v85;
  int v86;
  BOOL v87;
  int v88;
  const void *v89;
  const void **v90;
  const void *v91;
  const void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v97)(uint64_t, const __CFString *, uint64_t, CMTime *);
  const void *v98;
  uint64_t v99;
  CMTime *v100;
  CMTime *v101;
  const char *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  NSObject *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  CFNumberRef v116;
  CFNumberRef v117;
  uint64_t i;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *j;
  uint64_t v137;
  uint64_t UpTimeNanoseconds;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  const char *v144;
  const __CFNumber *v145;
  int v146;
  uint64_t v147;
  CMTime *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  CMTime type;
  CMTime valuePtr;
  os_log_type_t v155;
  unsigned int v156;
  os_log_type_t v157[8];
  int v158;
  uint64_t v159;
  uint64_t v160;
  CMTime time;
  const char *v162;
  __int16 v163;
  uint64_t v164;
  __int16 v165;
  const char *v166;
  __int16 v167;
  _BYTE v168[10];
  __int16 v169;
  int v170;
  __int16 v171;
  int v172;
  CMTime sizeOut[5];
  uint64_t v174;

  v6 = (uint64_t)a1;
  v174 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v151 = CMBaseObjectGetDerivedStorage();
  if ((fpfs_rateModifiedByPref_sCheckedPref & 1) == 0)
  {
    v9 = CFPreferencesCopyValue(CFSTR("streamingDrift"), CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    fpfs_rateModifiedByPref_sCheckedPref = 1;
    if (v9)
    {
      v10 = v9;
      if (CFEqual(v9, CFSTR("playSlightlySlower")))
      {
        fpfs_rateModifiedByPref_sRate = 1065185444;
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "FigPlayer_Stream will play streams slightly slower (%.2f) due to defaults write.\n");
      }
      else if (CFEqual(v10, CFSTR("playSlightlyFaster")))
      {
        fpfs_rateModifiedByPref_sRate = 1065437102;
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "FigPlayer_Stream will play streams slightly faster (%.2f) due to defaults write.\n");
      }
      CFRelease(v10);
    }
  }
  v149 = a2;
  if (a4 == 1.0)
    a4 = *(float *)&fpfs_rateModifiedByPref_sRate;
  if (*(float *)(v151 + 108) == 0.0 && a4 != 0.0)
  {
    LODWORD(valuePtr.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_QWORD *)(v6 + 96))
    return 0;
  v12 = *(_QWORD *)(v6 + 16);
  if (*(_DWORD *)(v6 + 152) != 6)
  {
    LODWORD(valuePtr.value) = 0;
    LOBYTE(type.value) = 0;
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(valuePtr.value) = 0;
    LOBYTE(type.value) = 0;
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(*(_QWORD *)(v6 + 96) + 25))
  {
    v28 = fpfs_SetTimebaseOnTrack(v7, v6);
    if ((_DWORD)v28)
      return v28;
    v29 = *(_QWORD *)(DerivedStorage + 720);
    if (v29)
    {
      v28 = FigImageQueueTableSetTimebase(v29, *(void **)(DerivedStorage + 576));
      if ((_DWORD)v28)
        return v28;
      v30 = *(_QWORD *)(DerivedStorage + 720);
      if (v30)
      {
        v28 = FigImageQueueTableReconnectWithTimebase(v30, *(void **)(DerivedStorage + 576));
        if ((_DWORD)v28)
          return v28;
      }
    }
  }
  if (*(_DWORD *)(v6 + 32) != 1936684398)
  {
    if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8) && !*(_BYTE *)(v151 + 462))
    {
      if (*MEMORY[0x1E0CA1FC0] == 1)
      {
        if (v7)
          v32 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v32 = "";
        strncpy((char *)sizeOut, v32, 8uLL);
        kdebug_trace();
      }
      v52 = *(_QWORD *)(v6 + 96);
      sizeOut[0] = *a2;
      time = *a3;
      v31 = fpfs_setRateOnPrimaryAndAuxRenderPipelines(v52, (__int128 *)&sizeOut[0].value, (__int128 *)&time.value, a4, 1.0);
      if (!(_DWORD)v31)
      {
        *(float *)(CMBaseObjectGetDerivedStorage() + 840) = a4;
        fpfsi_updateMaxPlayThroughTime();
      }
      v43 = 1;
      goto LABEL_278;
    }
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      if (v7)
        v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v27 = "";
      strncpy((char *)sizeOut, v27, 8uLL);
      kdebug_trace();
    }
    if ((a2->flags & 0x1D) != 1)
    {
      p_time = (CMTime *)MEMORY[0x1E0CA2E18];
      v43 = 1;
      v44 = v7;
      v45 = a4;
      p_valuePtr = (CMTime *)MEMORY[0x1E0CA2E18];
LABEL_75:
      v31 = fpfsi_setItemRateTimebaseAndAnchor(v45, v44, 1, (uint64_t)p_time, (uint64_t)p_valuePtr);
LABEL_278:
      if (v43)
      {
        if (a4 != 0.0)
        {
          v137 = CMBaseObjectGetDerivedStorage();
          UpTimeNanoseconds = FigGetUpTimeNanoseconds();
          v139 = *(_QWORD *)(v137 + 2064);
          if (v139)
          {
            v140 = *(_QWORD *)(v137 + 2536);
            if (v140)
            {
              v141 = UpTimeNanoseconds;
              v142 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
              if (v142)
                v142(v140, CFSTR("startupStats"), CFSTR("tfac2SetRate"), (v141 - v139) / 0xF4240uLL, 0);
            }
          }
        }
      }
      return v31;
    }
    memset(sizeOut, 0, 24);
    v39 = CMTimebaseCopySource(*(CMTimebaseRef *)(DerivedStorage + 576));
    v40 = v39;
    if ((a3->flags & 0x1D) == 1)
    {
      HostTimeClock = CMClockGetHostTimeClock();
      time = *a3;
      CMSyncConvertTime(sizeOut, &time, HostTimeClock, v40);
      if (!v40)
        goto LABEL_74;
    }
    else
    {
      CMSyncGetTime(sizeOut, v39);
      if (!v40)
      {
LABEL_74:
        time = *a2;
        valuePtr = sizeOut[0];
        v43 = 1;
        p_time = &time;
        p_valuePtr = &valuePtr;
        v44 = v7;
        v45 = a4;
        goto LABEL_75;
      }
    }
    CFRelease(v40);
    goto LABEL_74;
  }
  v147 = DerivedStorage;
  if (!*(_QWORD *)(v151 + 536) || a4 <= 0.0)
    goto LABEL_131;
  v15 = *(const void **)v6;
  v16 = CMBaseObjectGetDerivedStorage();
  v17 = *(CFTypeRef *)v16;
  v18 = CMBaseObjectGetDerivedStorage();
  valuePtr.value = 0;
  type.value = 0;
  v19 = fpfs_WantAudioHardwarePassthroughForTrack(v6, 0);
  if (*(_QWORD *)(v18 + 504))
  {
LABEL_118:
    v6 = *(_QWORD *)(DerivedStorage + 1040);
    if (!v6)
      return FigSignalErrorAt();
    while (*(_QWORD *)(v6 + 16) != v12)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        return FigSignalErrorAt();
    }
    if (*(float *)(v151 + 108) == 0.0 && a4 != 0.0)
    {
      LODWORD(valuePtr.value) = 0;
      LOBYTE(type.value) = 0;
      v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = valuePtr.value;
      if (os_log_type_enabled(v60, type.value))
        v62 = value;
      else
        v62 = value & 0xFFFFFFFE;
      if (v62)
      {
        v63 = *(_QWORD *)v147;
        if (*(_QWORD *)v147)
          v64 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v64 = "";
        if (v7)
          v144 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v144 = "";
        LODWORD(time.value) = 136316162;
        *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fpfs_SetRateOnTrack";
        LOWORD(time.flags) = 2048;
        *(_QWORD *)((char *)&time.flags + 2) = v63;
        HIWORD(time.epoch) = 2082;
        v162 = v64;
        v163 = 2048;
        v164 = v7;
        v165 = 2082;
        v166 = v144;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954433;
    }
LABEL_131:
    if (a4 != 0.0)
    {
      v65 = (_OWORD *)(v6 + 360);
      if ((a2->flags & 1) != 0)
      {
        v66 = *(_OWORD *)&a2->value;
        *(_QWORD *)(v6 + 376) = a2->epoch;
        *v65 = v66;
      }
      else
      {
        CMTimebaseGetTime(sizeOut, *(CMTimebaseRef *)(v147 + 576));
        *v65 = *(_OWORD *)&sizeOut[0].value;
        *(_QWORD *)(v6 + 376) = sizeOut[0].epoch;
      }
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504) && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 48))
      {
        v67 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
        v68 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 48);
        v69 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v67)
        {
          v70 = *(unsigned int (**)(uint64_t))(v69 + 104);
          if (!v70)
            goto LABEL_144;
        }
        else
        {
          v70 = *(unsigned int (**)(uint64_t))(v69 + 24);
          if (!v70)
            goto LABEL_144;
        }
        if (v70(v68))
        {
          v71 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 32);
          v72 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
          if (v72)
            v72(v71, *MEMORY[0x1E0C9AE50]);
        }
      }
    }
LABEL_144:
    if (a4 <= 0.0)
      goto LABEL_205;
    v73 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    v74 = CMBaseObjectGetDerivedStorage();
    LODWORD(time.value) = 0;
    v75 = *(const opaqueCMFormatDescription **)(v6 + 40);
    MediaSubType = CMFormatDescriptionGetMediaSubType(v75);
    v77 = 1;
    if (MediaSubType > 1885692722)
    {
      if (MediaSubType <= 1902469938)
      {
        if (MediaSubType != 1885692723)
        {
          v78 = 1902324531;
LABEL_160:
          if (MediaSubType != v78)
            goto LABEL_172;
LABEL_173:
          if (*(_DWORD *)(v6 + 32) == 1936684398 && !*(_QWORD *)(v74 + 504))
          {
            v83 = fpfs_WantAudioHardwarePassthroughForTrack(v6, (int *)&time);
            CMBaseObjectGetDerivedStorage();
            v84 = (const void *)*MEMORY[0x1E0D49050];
            v85 = FigCFEqual();
            if (v83 == (v85 != 0))
            {
              if (v85)
                v86 = 1633889587;
              else
                v86 = 0;
              if (v83)
                v87 = LODWORD(time.value) == v86;
              else
                v87 = 1;
              v88 = !v87;
            }
            else
            {
              v88 = 1;
            }
            if (v77)
              v77 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561) != 0;
            v89 = (const void *)*MEMORY[0x1E0D49060];
            v90 = (const void **)MEMORY[0x1E0D49058];
            if (v88 || FigCFEqual() != v77 || !*(_QWORD *)(v74 + 544))
            {
              v91 = *v90;
              if (v83)
                v92 = v84;
              else
                v92 = v91;
              if (!v77)
                v89 = v92;
              if (*(_DWORD *)(v74 + 32) == 2 && *(_QWORD *)(v74 + 536))
                fpfsi_setAudioSessionPreferredAudioHardwareFormat(*v73, *(_QWORD *)v6, (uint64_t)v89);
              v93 = *(const void **)(v74 + 544);
              *(_QWORD *)(v74 + 544) = v89;
              if (v89)
                CFRetain(v89);
              if (v93)
                CFRelease(v93);
            }
            *(_BYTE *)(v74 + 560) = 0;
            if (FigCFEqual())
              fpfs_setPreferredNumberOfAudioOutputChannels(*v73, *(const opaqueCMFormatDescription **)(v6 + 40), 1);
          }
LABEL_205:
          time.value = 0;
          v94 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 32);
          AllocatorForMedia = FigGetAllocatorForMedia();
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v94);
          v97 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
          if (v97)
            v97(FigBaseObject, CFSTR("IsTimebaseStarter"), AllocatorForMedia, &time);
          v98 = (const void *)time.value;
          v99 = *MEMORY[0x1E0C9AE50];
          if (time.value == *MEMORY[0x1E0C9AE50])
          {
            v101 = a3;
            v100 = v149;
            if (*MEMORY[0x1E0CA1FC0] == 1)
            {
              if (v7)
                v102 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v102 = "";
              strncpy((char *)sizeOut, v102, 8uLL);
              kdebug_trace();
              v146 = 1;
              v98 = (const void *)time.value;
            }
            else
            {
              v146 = 1;
            }
          }
          else
          {
            v146 = 0;
            v101 = a3;
            v100 = v149;
          }
          if (v98)
            CFRelease(v98);
          valuePtr = *v100;
          type = *v101;
          v103 = *(_QWORD *)v6;
          v104 = (_QWORD *)CMBaseObjectGetDerivedStorage();
          v105 = CMBaseObjectGetDerivedStorage();
          v159 = 0;
          v160 = 0;
          v106 = *(_QWORD *)(v105 + 708);
          v107 = *(_DWORD *)(v105 + 716);
          v158 = 0;
          *(_QWORD *)v157 = 0;
          v150 = v103;
          fpfsi_DetermineRateSnapping(v103, (uint64_t)&v159);
          if (fpfs_ConfigureRatePlan(v106, v107, v159, v160, (uint64_t)v157, a4, *(float *)(v105 + 108)))
          {
            v152 = v104;
            if (*(float *)&v157[4] != 1.0
              && fpfs_WantAudioHardwarePassthroughForTrack(v6, (int *)&v160 + 1))
            {
              if (dword_1EE2A2A88)
              {
                v156 = 0;
                v155 = OS_LOG_TYPE_DEFAULT;
                v108 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v109 = v156;
                if (os_log_type_enabled(v108, v155))
                  v110 = v109;
                else
                  v110 = v109 & 0xFFFFFFFE;
                if (v110)
                {
                  v111 = *v104;
                  if (v111)
                    v112 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                  else
                    v112 = "";
                  v113 = v150;
                  if (v150)
                  {
                    v114 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                    v113 = v150;
                  }
                  else
                  {
                    v114 = "";
                  }
                  LODWORD(time.value) = 136317186;
                  *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fpfs_DecideAndSetAudioRenderPipelineRate";
                  LOWORD(time.flags) = 2048;
                  *(_QWORD *)((char *)&time.flags + 2) = v111;
                  HIWORD(time.epoch) = 2082;
                  v162 = v112;
                  v163 = 2048;
                  v164 = v113;
                  v165 = 2082;
                  v166 = v114;
                  v167 = 1024;
                  *(_DWORD *)v168 = HIBYTE(HIDWORD(v160));
                  *(_WORD *)&v168[4] = 1024;
                  *(_DWORD *)&v168[6] = BYTE6(v160);
                  v169 = 1024;
                  v170 = BYTE5(v160);
                  v171 = 1024;
                  v172 = BYTE4(v160);
                  _os_log_send_and_compose_impl();
                  v104 = v152;
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(_DWORD *)&v157[4] = 1065353216;
              *(float *)v157 = a4;
              LOBYTE(v158) = 1;
            }
            v115 = v99;
            v116 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &v157[4]);
            if (v116)
            {
              v117 = v116;
              for (i = v104[130]; i; i = *(_QWORD *)(i + 8))
              {
                if (i != v6 && *(_DWORD *)(i + 32) == 1936684398)
                {
                  v119 = *(_QWORD *)(i + 96);
                  if (v119)
                  {
                    v120 = (uint64_t *)MEMORY[0x1E0C9AE50];
                    if (!(_BYTE)v158)
                    {
                      v120 = (uint64_t *)MEMORY[0x1E0C9AE50];
                      if (!*(_BYTE *)(v105 + 521))
                        v120 = (uint64_t *)MEMORY[0x1E0C9AE40];
                    }
                    fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v119, (uint64_t)CFSTR("Muted"), *v120);
                    v121 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(i + 96) + 32));
                    v122 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 56);
                    if (!v122)
                    {
                      v31 = 4294954514;
                      goto LABEL_268;
                    }
                    v123 = v122(v121, CFSTR("PipelineRate"), v117);
                    if ((_DWORD)v123)
                      goto LABEL_296;
                  }
                }
              }
              if ((_BYTE)v158)
              {
                v124 = v115;
                if (dword_1EE2A2A88)
                {
                  v156 = 0;
                  v155 = OS_LOG_TYPE_DEFAULT;
                  v125 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v126 = v156;
                  if (os_log_type_enabled(v125, v155))
                    v127 = v126;
                  else
                    v127 = v126 & 0xFFFFFFFE;
                  if (v127)
                  {
                    v128 = *v152;
                    if (*v152)
                      v129 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                    else
                      v129 = "";
                    v132 = v150;
                    if (v150)
                    {
                      v133 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                      v132 = v150;
                    }
                    else
                    {
                      v133 = "";
                    }
                    LODWORD(time.value) = 136316162;
                    *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fpfs_DecideAndSetAudioRenderPipelineRate";
                    LOWORD(time.flags) = 2048;
                    *(_QWORD *)((char *)&time.flags + 2) = v128;
                    HIWORD(time.epoch) = 2082;
                    v162 = v129;
                    v163 = 2048;
                    v164 = v132;
                    v165 = 2082;
                    v166 = v133;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(v6 + 96), (uint64_t)CFSTR("Muted"), v124);
                *(_BYTE *)(v105 + 522) = 1;
                v134 = *(_QWORD *)(v6 + 96);
                sizeOut[0] = valuePtr;
                time = type;
                v31 = fpfs_setRateOnPrimaryAndAuxRenderPipelines(v134, (__int128 *)&sizeOut[0].value, (__int128 *)&time.value, *(float *)v157, *(float *)&v157[4]);
                v131 = v152;
              }
              else
              {
                v130 = *(_QWORD *)(v6 + 96);
                sizeOut[0] = valuePtr;
                time = type;
                v123 = fpfs_setRateOnPrimaryAndAuxRenderPipelines(v130, (__int128 *)&sizeOut[0].value, (__int128 *)&time.value, *(float *)v157, *(float *)&v157[4]);
                if ((_DWORD)v123)
                {
LABEL_296:
                  v31 = v123;
LABEL_268:
                  v135 = v147;
                  CFRelease(v117);
                  if (!(_DWORD)v31)
                    goto LABEL_269;
LABEL_277:
                  v43 = v146;
                  goto LABEL_278;
                }
                v131 = v152;
                if (!*(_BYTE *)(v105 + 521))
                  fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(v6 + 96), (uint64_t)CFSTR("Muted"), *MEMORY[0x1E0C9AE40]);
                v31 = 0;
                *(_BYTE *)(v105 + 522) = 0;
              }
              *((_DWORD *)v131 + 220) = *(_DWORD *)&v157[4];
              goto LABEL_268;
            }
            FigSignalErrorAt();
            v135 = v147;
          }
          else
          {
            v31 = FigSignalErrorAt();
            v135 = v147;
            if ((_DWORD)v31)
              goto LABEL_277;
          }
LABEL_269:
          *(float *)(CMBaseObjectGetDerivedStorage() + 840) = a4;
          fpfsi_updateMaxPlayThroughTime();
          if (a4 != 0.0)
          {
            fpfs_CheckPrebufferedLevels(v7, 0, -1, 0, (uint64_t)sizeOut);
            for (j = *(_QWORD **)(v135 + 1040); j; j = (_QWORD *)j[1])
            {
              if (j[14])
                fpfs_scheduleForwardEndTimeForTrack(v135, (uint64_t)j, 0);
              if (j[33])
                fpfs_CheckVideoSyncQueue((uint64_t)j, 0);
            }
            v31 = 0;
            goto LABEL_277;
          }
          return 0;
        }
        goto LABEL_162;
      }
      if (MediaSubType == 2053464883)
      {
LABEL_162:
        sizeOut[0].value = 0;
        FormatList = CMAudioFormatDescriptionGetFormatList(v75, (size_t *)sizeOut);
        v77 = 0;
        if (!FormatList || sizeOut[0].value < 0x30uLL)
          goto LABEL_173;
        mFormatID = FormatList->mASBD.mFormatID;
        v77 = 1;
        if (mFormatID <= 1885547314)
        {
          if (mFormatID == 1667574579)
            goto LABEL_173;
          v82 = 1700997939;
        }
        else
        {
          if (mFormatID == 1885547315 || mFormatID == 1902324531)
            goto LABEL_173;
          v82 = 2053319475;
        }
        if (mFormatID == v82)
          goto LABEL_173;
LABEL_172:
        v77 = 0;
        goto LABEL_173;
      }
      if (MediaSubType == 2053319475)
        goto LABEL_173;
      v79 = 1902469939;
    }
    else
    {
      if (MediaSubType > 1700997938)
      {
        if (MediaSubType == 1700997939)
          goto LABEL_173;
        if (MediaSubType != 1700998451)
        {
          v78 = 1885547315;
          goto LABEL_160;
        }
        goto LABEL_162;
      }
      if (MediaSubType == 1667574579)
        goto LABEL_173;
      v79 = 1667575091;
    }
    if (MediaSubType != v79)
      goto LABEL_172;
    goto LABEL_162;
  }
  if (v19)
  {
    sizeOut[0].value = 0;
    RichestDecodableFormat = (CMTimeValue *)CMAudioFormatDescriptionGetFormatList(*(CMAudioFormatDescriptionRef *)(v6 + 40), (size_t *)sizeOut);
    v21 = sizeOut[0].value;
    if (!RichestDecodableFormat)
      goto LABEL_64;
    goto LABEL_25;
  }
  v33 = v7;
  v34 = DerivedStorage;
  v35 = *(_QWORD *)(v16 + 96);
  if (v35)
  {
    v36 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v36)
    {
      if (!v36(v35, CFSTR("AfmfpbProperty_HighestValidDeclaredSampleRate"), *MEMORY[0x1E0C9AE00], &type)
        && type.value != 0)
      {
        v38 = CFGetTypeID((CFTypeRef)type.value);
        if (v38 == CFNumberGetTypeID())
          CFNumberGetValue((CFNumberRef)type.value, kCFNumberDoubleType, &valuePtr);
      }
    }
  }
  v22 = *(double *)&valuePtr.value;
  DerivedStorage = v34;
  if (*(double *)&valuePtr.value == 0.0)
  {
    v7 = v33;
    if ((*(_BYTE *)(v16 + 560) & 0x10) != 0)
    {
      sizeOut[0].value = 0;
      RichestDecodableFormat = (CMTimeValue *)CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(v6 + 40));
      v21 = 48;
      if (!RichestDecodableFormat)
        v21 = 0;
      sizeOut[0].value = v21;
      if (!RichestDecodableFormat)
        goto LABEL_64;
LABEL_25:
      if (v21)
      {
        v22 = *(double *)RichestDecodableFormat;
        valuePtr.value = *RichestDecodableFormat;
        goto LABEL_27;
      }
LABEL_64:
      v31 = FigSignalErrorAt();
      goto LABEL_115;
    }
  }
  else
  {
    v7 = v33;
  }
LABEL_27:
  if (v22 == 0.0)
    goto LABEL_47;
  if (*(_BYTE *)(v18 + 840))
  {
    if (dword_1EE2A2A88)
    {
      LODWORD(v159) = 0;
      v157[0] = OS_LOG_TYPE_DEFAULT;
      v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v24 = v159;
      if (os_log_type_enabled(v23, v157[0]))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if (v25)
      {
        if (v17)
          v26 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v26 = "";
        if (v15)
          v53 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v53 = "";
        LODWORD(time.value) = 136316418;
        *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fpfs_UpdateCMSessionPreferredDeviceSampleRateForTrack";
        LOWORD(time.flags) = 2048;
        *(_QWORD *)((char *)&time.flags + 2) = v17;
        HIWORD(time.epoch) = 2082;
        v162 = v26;
        v163 = 2048;
        v164 = (uint64_t)v15;
        v165 = 2082;
        v166 = v53;
        v167 = 2048;
        *(_QWORD *)v168 = valuePtr.value;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v31 = 0;
      DerivedStorage = v147;
      goto LABEL_115;
    }
LABEL_47:
    v31 = 0;
    goto LABEL_115;
  }
  v47 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, &valuePtr);
  if (dword_1EE2A2A88)
  {
    LODWORD(v159) = 0;
    v157[0] = OS_LOG_TYPE_DEFAULT;
    v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v49 = v159;
    if (os_log_type_enabled(v48, v157[0]))
      v50 = v49;
    else
      v50 = v49 & 0xFFFFFFFE;
    if (v50)
    {
      v145 = v47;
      if (v17)
        v51 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v51 = "";
      if (v15)
        v54 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v54 = "";
      LODWORD(time.value) = 136316418;
      *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fpfs_UpdateCMSessionPreferredDeviceSampleRateForTrack";
      LOWORD(time.flags) = 2048;
      *(_QWORD *)((char *)&time.flags + 2) = v17;
      HIWORD(time.epoch) = 2082;
      v162 = v51;
      v163 = 2048;
      v164 = (uint64_t)v15;
      v165 = 2082;
      v166 = v54;
      v167 = 2048;
      *(_QWORD *)v168 = valuePtr.value;
      _os_log_send_and_compose_impl();
      v47 = v145;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRetain(v15);
  CFRetain(*(CFTypeRef *)v16);
  v55 = fpfs_UnlockMutexCompletelyWithCaller(v17);
  v56 = *(_QWORD *)(v18 + 536);
  if (v56)
  {
    v57 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v57)
    {
      v58 = *(void (**)(uint64_t, _QWORD, CFNumberRef))(v57 + 56);
      if (v58)
        v58(v56, *MEMORY[0x1E0D49A70], v47);
    }
  }
  v59 = CMBaseObjectGetDerivedStorage();
  do
    fpfs_LockMutexWithCaller((uint64_t)v17);
  while (*(_QWORD *)(v59 + 8) < v55);
  if (*(_BYTE *)(v18 + 51) || FigRetainProxyIsInvalidated() || *(const void **)(v18 + 80) != v15)
    v31 = FigSignalErrorAt();
  else
    v31 = 0;
  DerivedStorage = v147;
  CFRelease(*(CFTypeRef *)v16);
  CFRelease(v15);
  if (v47)
    CFRelease(v47);
LABEL_115:
  if (type.value)
    CFRelease((CFTypeRef)type.value);
  if (!(_DWORD)v31)
    goto LABEL_118;
  return v31;
}

uint64_t fpfs_shouldReleaseRenderChainForPausing(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  if (*(float *)(DerivedStorage + 840) != 0.0)
    return 0;
  v4 = v3;
  if (*(float *)(v3 + 108) != 0.0 || *(_BYTE *)(DerivedStorage + 2872))
    return 0;
  if (fpfs_FirstRenderingTrackofType(a1, 1986618469) || (result = fpfs_FirstRenderingTrackofType(a1, 1936684398)) != 0)
  {
    v6 = *(_QWORD *)(DerivedStorage + 1696);
    if (v6 && FigAlternateIsIFrameOnly(v6))
      return 0;
    return *(_BYTE *)(v4 + 760) || *(_BYTE *)(DerivedStorage + 2873) || *(_DWORD *)(v4 + 764) > 1;
  }
  return result;
}

uint64_t fpfsi_ReleaseRenderChainsForPausing(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 2872))
    return FigSignalErrorAt();
  v3 = DerivedStorage;
  if (*(float *)(DerivedStorage + 840) != 0.0)
    return FigSignalErrorAt();
  if ((*(_BYTE *)(DerivedStorage + 332) & 1) == 0)
  {
    fpfs_ClearRenderChains(a1, 231);
    v4 = *(_QWORD *)(v3 + 1040);
    if (v4)
    {
      do
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (*(_QWORD *)(v4 + 96))
        {
          for (i = 0; i != 5; ++i)
          {
            if (kCommonTypes[i] == *(_DWORD *)(v4 + 32))
              break;
          }
          if (((1 << i) & 0xE7) != 0)
          {
            fpfs_ReleaseTrackRenderChain(v4);
            if (*(_DWORD *)(v4 + 32) == 1936684398)
              fpfs_PrepareAndEnqueueSpatialAudioRenderingChangedNotification(*(const void **)v3, *(const void **)v4, v7, v8, v9, v10, v11, v12);
          }
        }
        if (!v5)
          break;
        v4 = v5;
      }
      while (*(_QWORD *)(v3 + 1040));
    }
    *(_BYTE *)(v3 + 528) = 1;
    fpfs_SetRenderChainsReleasedForPause((uint64_t)a1, 1);
    *(_BYTE *)(v3 + 2873) = 0;
    fpfsi_EnqueuePlayableRangeChangedNotification(a1);
  }
  return 0;
}

void fpfs_JumpToTime(uint64_t a1, CMTime *a2)
{
  CMTime v4[5];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  v4[0] = *a2;
  fpfs_SetTime(a1, v4);
  fpfsi_synchronizeLayerToTimebaseWithTransaction(a1, 0);
}

uint64_t sub_1929C4900(uint64_t a1, int a2, int a3, __int16 a4, char a5, os_log_type_t type, int a7, CMTime *a8, CMTime *a9, CMTime *a10, CMTime *rhs, uint64_t a12, __int16 a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, CMTime *lhs, uint64_t a19, uint64_t a20,uint64_t rhsa,uint64_t rhs_8,uint64_t rhs_16,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t lhsa,uint64_t lhs_8,uint64_t lhs_16,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueCMTimebase *v54;
  NSObject *v55;
  CMTime v56;
  CMTime v57;
  CMTime v58;
  CMTime v59[2];
  CMTime v60[10];

  if (v50)
    fpfs_CheckPrebufferedLevels((uint64_t)v48, 0, -1, 0, (uint64_t)v60);
  *(_OWORD *)(v51 + 64) = *(_OWORD *)v49;
  *(_QWORD *)(v51 + 80) = *(_QWORD *)(v49 + 16);
  result = fpfsi_atOrAfterTimeToPausePlayback(v47, v60);
  if ((_DWORD)result)
    fpfs_HandleReachingTimeToPausePlayback(v48);
  if ((*(_BYTE *)(v47 + 1452) & 1) != 0)
  {
    memset(&v58, 0, sizeof(v58));
    *(_OWORD *)(v51 + 64) = *(_OWORD *)(v47 + 1440);
    *(_QWORD *)(v51 + 80) = *(_QWORD *)(v47 + 1456);
    *(_OWORD *)&v59[0].value = kTimeToPausePlaybackAdvanceNotice;
    v59[0].epoch = 0;
    CMTimeSubtract(&v58, v60, v59);
    memset(&v57, 0, sizeof(v57));
    fpfsi_EstimateTimeToPause((uint64_t)v48, &v56);
    *(_OWORD *)(v51 + 64) = *(_OWORD *)(v47 + 1440);
    *(_QWORD *)(v51 + 80) = *(_QWORD *)(v47 + 1456);
    CMTimeSubtract(&v57, v60, &v56);
    *(_OWORD *)(v51 + 64) = *(_OWORD *)v49;
    *(_QWORD *)(v51 + 80) = *(_QWORD *)(v49 + 16);
    v59[0] = v58;
    result = CMTimeCompare(v60, v59);
    if ((int)result >= 1)
    {
      *(_OWORD *)(v51 + 64) = *(_OWORD *)v49;
      *(_QWORD *)(v51 + 80) = *(_QWORD *)(v49 + 16);
      v59[0] = *(CMTime *)(v47 + 1440);
      result = CMTimeCompare(v60, v59);
      if ((result & 0x80000000) != 0)
      {
        if (dword_1EE2A2A88)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v54 = *(OpaqueCMTimebase **)(v47 + 576);
        v55 = *(NSObject **)(v47 + 2328);
        *(CMTime *)(v51 + 64) = v57;
        return CMTimebaseSetTimerDispatchSourceNextFireTime(v54, v55, v60, 0);
      }
    }
  }
  return result;
}

void fpfsi_updateItemTimePropertiesForRateChange(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  float v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  double Current;
  double Seconds;
  uint64_t v12;
  double v13;
  void (*v14)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  double v15;
  uint64_t v16;
  const __CFAllocator *AllocatorForMedia;
  const void *v18;
  uint64_t v19;
  CMTimeValue value;
  void (*v21)(uint64_t, uint64_t, CMTimeValue);
  CMTime v22;
  CMTime time;
  CMTime rhs;
  CMTime lhs;
  CMTime v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(float *)(DerivedStorage + 840);
  if (v5 != a2)
  {
    v6 = DerivedStorage;
    if (v5 != 0.0 && *(_BYTE *)(DerivedStorage + 464) != 0)
    {
      if ((*(_BYTE *)(DerivedStorage + 236) & 1) == 0)
      {
        fpfs_GetTime(DerivedStorage, (uint64_t)&lhs);
        rhs = *(CMTime *)(v6 + 1176);
        CMTimeAdd(&v26, &lhs, &rhs);
        *(CMTime *)(v6 + 224) = v26;
      }
      v8 = *(_QWORD *)(v6 + 1696);
      if ((!v8 || !FigAlternateIsIFrameOnly(v8)) && (*(_BYTE *)(v6 + 3032) & 1) == 0)
      {
        fpfs_GetTime(v6, (uint64_t)&v26);
        *(CMTime *)(v6 + 3020) = v26;
        *(_QWORD *)(v6 + 3048) = FigGetUpTimeNanoseconds();
      }
    }
    v9 = *(_QWORD *)(v6 + 1696);
    if (!v9 || !FigAlternateIsIFrameOnly(v9))
    {
      if (*(double *)(v6 + 1936) != 0.0)
      {
        *(double *)(v6 + 1944) = *(double *)(v6 + 1944)
                               + (CFAbsoluteTimeGetCurrent() - *(double *)(v6 + 1936)) * fabsf(a2);
        *(double *)(v6 + 1952) = *(double *)(v6 + 1952) + CFAbsoluteTimeGetCurrent() - *(double *)(v6 + 1936);
        *(_QWORD *)(v6 + 1936) = 0;
      }
      if (*(float *)(v6 + 840) != 0.0)
      {
        Current = CFAbsoluteTimeGetCurrent();
        *(double *)(v6 + 1936) = Current;
        if (*(double *)(v6 + 1920) == 0.0)
        {
          *(double *)(v6 + 1920) = Current;
          fpfs_GetTime(v6, (uint64_t)&v22);
          v26 = *(CMTime *)(v6 + 1176);
          CMTimeAdd(&time, &v22, &v26);
          Seconds = CMTimeGetSeconds(&time);
          *(double *)(v6 + 1928) = Seconds;
          v12 = *(_QWORD *)(v6 + 2536);
          if (v12)
          {
            v13 = Seconds;
            v14 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v14)
              v14(v12, CFSTR("playerStats"), CFSTR("StNPT"), 1000 * (uint64_t)v13, 0);
          }
        }
      }
      v15 = *(float *)(v6 + 840);
      v16 = CMBaseObjectGetDerivedStorage();
      rhs.value = 0;
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v18 = *(const void **)(v16 + 1696);
      v26 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      if (!FigMetricItemRateChangeEventCreate(AllocatorForMedia, (__int128 *)&v26.value, 0, 0, v18, &rhs, v15, a2))
      {
        v19 = *(_QWORD *)(v16 + 3360);
        value = rhs.value;
        v21 = *(void (**)(uint64_t, uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v21)
          v21(v19, a1, value);
      }
      if (rhs.value)
        CFRelease((CFTypeRef)rhs.value);
    }
    fpfsi_RTCReportingUpdatePlayingTrackStats(v6);
    fpfsi_RTCReportingReportRateChange(v6, *(float *)(v6 + 840));
  }
}

void fpfsi_scheduleFVTTransitionsForItem(const __CFString *a1, uint64_t *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t RenderingTrackofType;
  uint64_t *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  const __CFArray *v18;
  CFIndex v19;
  const void *v20;
  const void *ValueAtIndex;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef v24;
  uint64_t v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v31;
  uint64_t v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v37)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t ConcurrentMetadataTracksInDiscontinuityDomainNeededForVideo;
  CFIndex Count;
  CFTypeRef cf;
  _OWORD v45[2];
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  v46 = 0;
  memset(v45, 0, sizeof(v45));
  if (!DerivedStorage)
    return;
  v7 = DerivedStorage;
  v8 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 432);
  if (!v8)
    return;
  if (CFArrayGetCount(v8) < 1)
    return;
  v9 = CMBaseObjectGetDerivedStorage();
  if (*(const __CFString **)(v9 + 80) != a1)
    return;
  v10 = v9;
  RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
  v12 = (uint64_t *)RenderingTrackofType;
  if ((_DWORD)a2 != 2 && !RenderingTrackofType)
    return;
  if (!RenderingTrackofType)
  {
    CMBaseObjectGetDerivedStorage();
    LODWORD(v17) = 0;
    v15 = 0;
    ConcurrentMetadataTracksInDiscontinuityDomainNeededForVideo = 0;
    goto LABEL_19;
  }
  ConcurrentMetadataTracksInDiscontinuityDomainNeededForVideo = fpfs_FirstConcurrentMetadataTracksInDiscontinuityDomainNeededForVideo((uint64_t)a1, *(_QWORD *)(RenderingTrackofType + 64), (uint64_t)v47);
  if (ConcurrentMetadataTracksInDiscontinuityDomainNeededForVideo < 1)
  {
LABEL_12:
    CMBaseObjectGetDerivedStorage();
    v15 = v12;
    while (1)
    {
      if (v15 != v12 && *((_DWORD *)v15 + 8) == 1986618469)
      {
        v16 = v15[12];
        if (v16)
          break;
      }
      v15 = (uint64_t *)v15[1];
      if (!v15)
      {
        LODWORD(v17) = 0;
        goto LABEL_19;
      }
    }
    v31 = a3;
    v32 = v7;
    v33 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    cf = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v34 = *(_QWORD *)(v16 + 32);
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v34);
    v37 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v37)
    {
      v37(FigBaseObject, CFSTR("Suspended"), AllocatorForMedia, &cf);
      v38 = cf;
    }
    else
    {
      v38 = v33;
    }
    if (v38 == v33)
      v17 = v15;
    else
      v17 = 0;
    v7 = v32;
    a3 = v31;
    if (v38)
      CFRelease(v38);
    if (v17)
    {
      v39 = fpfs_FirstConcurrentMetadataTracksInDiscontinuityDomainNeededForVideo((uint64_t)a1, v17[8], (uint64_t)v45);
      LODWORD(v17) = 1;
LABEL_20:
      v18 = *(const __CFArray **)(v10 + 432);
      if (!v18)
        return;
      Count = CFArrayGetCount(v18);
      if (Count < 1)
        return;
      v19 = 0;
      v20 = (const void *)*MEMORY[0x1E0C9AE40];
      if (a3)
        LODWORD(v17) = 0;
      v41 = v10;
      v40 = (int)v17;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 432), v19);
        v22 = CMBaseObjectGetDerivedStorage();
        cf = v20;
        if (!(_DWORD)a2)
          goto LABEL_29;
        if ((_DWORD)a2 != 2)
          break;
        v24 = v20;
        if (!v12)
          goto LABEL_35;
LABEL_37:
        if (v24)
          CFRelease(v24);
        if ((_DWORD)v17 && *(float *)(v7 + 840) != 0.0 && *((_DWORD *)v15 + 38) == 6)
          fpfsi_scheduleFVTTransitionForFVTAndTrack(a1, (uint64_t)ValueAtIndex, v15, (uint64_t)v45, v39, 0);
        if (Count == ++v19)
          return;
      }
      v23 = v22;
      v24 = v20;
      if ((_DWORD)a2 != 1)
        goto LABEL_37;
      v24 = v20;
      if (*(float *)(v23 + 840) == 0.0)
        goto LABEL_37;
LABEL_29:
      if (!v12)
        goto LABEL_35;
      v25 = v7;
      v17 = a2;
      v26 = a1;
      v27 = *(_QWORD *)(v12[12] + 32);
      v28 = FigGetAllocatorForMedia();
      v29 = FigRenderPipelineGetFigBaseObject(v27);
      v30 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v30)
        v30(v29, CFSTR("Suspended"), v28, &cf);
      a1 = v26;
      a2 = v17;
      v7 = v25;
      v10 = v41;
      LODWORD(v17) = v40;
      if (FigCFEqual())
LABEL_35:
        fpfsi_scheduleFVTTransitionForFVTAndTrack(a1, (uint64_t)ValueAtIndex, v12, (uint64_t)v47, ConcurrentMetadataTracksInDiscontinuityDomainNeededForVideo, 1);
      v24 = cf;
      goto LABEL_37;
    }
    v15 = 0;
LABEL_19:
    v39 = 0;
    goto LABEL_20;
  }
  v13 = v47;
  v14 = ConcurrentMetadataTracksInDiscontinuityDomainNeededForVideo;
  while (*(_QWORD *)(*(_QWORD *)v13 + 96))
  {
    v13 = (_OWORD *)((char *)v13 + 8);
    if (!--v14)
      goto LABEL_12;
  }
}

uint64_t fpfs_IssueSeekToPump(uint64_t a1, CMTime *a2, CMTime *a3, unsigned int a4, int a5, uint64_t a6, __int128 *a7, __int128 *a8, __int128 *a9)
{
  uint64_t DerivedStorage;
  _OWORD *v17;
  CMTimeEpoch v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v20;
  _BOOL4 v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  Float64 Seconds;
  Float64 v27;
  Float64 v28;
  Float64 v29;
  uint64_t v30;
  CMTimeEpoch epoch;
  const void *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, CMTime *, CMTime *, _QWORD, uint64_t, __int128 *, os_log_type_t *, __int128 *, uint64_t, int);
  uint64_t v35;
  uint64_t v36;
  int v38;
  const char *v39;
  const char *v40;
  int v41;
  uint64_t v42;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  CMTime v51;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  __int128 v57;
  uint64_t v58;
  os_log_type_t type[16];
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  CMTime rhs;
  const char *v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  Float64 v70;
  __int16 v71;
  Float64 v72;
  __int16 v73;
  Float64 v74;
  __int16 v75;
  Float64 v76;
  CMTime lhs;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42 = CMBaseObjectGetDerivedStorage();
  memset(&v56, 0, sizeof(v56));
  v17 = (_OWORD *)(DerivedStorage + 1176);
  lhs = *a2;
  rhs = *(CMTime *)(DerivedStorage + 1176);
  CMTimeAdd(&v55, &lhs, &rhs);
  lhs = v55;
  v44 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E68];
  v18 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  rhs.epoch = v18;
  if (CMTimeCompare(&lhs, &rhs) < 0)
  {
    *(_OWORD *)&v55.value = v44;
    v55.epoch = v18;
  }
  lhs = *a3;
  *(_OWORD *)&rhs.value = *v17;
  rhs.epoch = *(_QWORD *)(DerivedStorage + 1192);
  CMTimeAdd(&v56, &lhs, &rhs);
  *(_OWORD *)&lhs.value = *v17;
  lhs.epoch = *(_QWORD *)(DerivedStorage + 1192);
  *(_OWORD *)&rhs.value = v44;
  rhs.epoch = v18;
  if (CMTimeCompare(&lhs, &rhs))
  {
    lhs = *a2;
    *(_OWORD *)&rhs.value = v44;
    rhs.epoch = v18;
    if (!CMTimeCompare(&lhs, &rhs)
      || (lhs = v55, *(_OWORD *)&rhs.value = v44, rhs.epoch = v18, !CMTimeCompare(&lhs, &rhs))
      || (*(_DWORD *)(DerivedStorage + 1356) & 0x1D) == 1
      && (lhs = v55, rhs = *(CMTime *)(DerivedStorage + 1344), CMTimeCompare(&lhs, &rhs) <= 0))
    {
      if (dword_1EE2A2A88)
      {
        v41 = a5;
        LODWORD(v61) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v20 = v61;
        v21 = os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]);
        v22 = v20 & 0xFFFFFFFE;
        if (v21)
          v22 = v20;
        if (v22)
        {
          v23 = *(_QWORD *)DerivedStorage;
          if (*(_QWORD *)DerivedStorage)
            v24 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v24 = "";
          v40 = v24;
          if (a1)
            v25 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v25 = "";
          v39 = v25;
          lhs = *a2;
          Seconds = CMTimeGetSeconds(&lhs);
          lhs = v55;
          v27 = CMTimeGetSeconds(&lhs);
          lhs = *(CMTime *)(DerivedStorage + 1344);
          v28 = CMTimeGetSeconds(&lhs);
          *(_OWORD *)&lhs.value = *v17;
          lhs.epoch = *(_QWORD *)(DerivedStorage + 1192);
          v29 = CMTimeGetSeconds(&lhs);
          LODWORD(rhs.value) = 136317186;
          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_IssueSeekToPump";
          LOWORD(rhs.flags) = 2048;
          *(_QWORD *)((char *)&rhs.flags + 2) = v23;
          HIWORD(rhs.epoch) = 2082;
          v64 = v40;
          v65 = 2048;
          v66 = a1;
          v67 = 2082;
          v68 = v39;
          v69 = 2048;
          v70 = Seconds;
          v71 = 2048;
          v72 = v27;
          v73 = 2048;
          v74 = v28;
          v75 = 2048;
          v76 = v29;
          v38 = 92;
          _os_log_send_and_compose_impl();
          a6 = a6;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a5 = v41;
      }
      *v17 = v44;
      *(_QWORD *)(DerivedStorage + 1192) = v18;
      v30 = *(_QWORD *)(DerivedStorage + 96);
      *(_OWORD *)&lhs.value = v44;
      lhs.epoch = v18;
      FigAlternatePlaybackBitrateMonitorSetPumpOffset(v30, (uint64_t)&lhs);
    }
  }
  if (a5)
  {
    if ((~a3->flags & 0x11) != 0)
      goto LABEL_31;
    if (*(float *)(v42 + 108) >= 0.0)
    {
      CMTimeMake(&v54, 2, 1);
      rhs = v55;
      CMTimeSubtract(&lhs, &rhs, &v54);
    }
    else
    {
      CMTimeMake(&v53, 2, 1);
      rhs = v55;
      CMTimeAdd(&lhs, &rhs, &v53);
    }
    *(_OWORD *)&v56.value = *(_OWORD *)&lhs.value;
    epoch = lhs.epoch;
  }
  else
  {
    if ((*(_BYTE *)(DerivedStorage + 1500) & 1) == 0)
      goto LABEL_31;
    *(_OWORD *)&v56.value = *MEMORY[0x1E0CA2E18];
    epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v56.epoch = epoch;
LABEL_31:
  v32 = *(const void **)(DerivedStorage + 504);
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(DerivedStorage + 504) = 0;
  }
  v33 = *(_QWORD *)(DerivedStorage + 928);
  v52 = v55;
  v51 = v56;
  v49 = *a7;
  v50 = *((_QWORD *)a7 + 2);
  v47 = *a8;
  v48 = *((_QWORD *)a8 + 2);
  v45 = *a9;
  v46 = *((_QWORD *)a9 + 2);
  v34 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, _QWORD, uint64_t, __int128 *, os_log_type_t *, __int128 *, uint64_t, int))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v34)
  {
    v35 = 4294954514;
    goto LABEL_38;
  }
  lhs = v52;
  rhs = v51;
  v61 = v49;
  v62 = v50;
  *(_OWORD *)type = v47;
  v60 = v48;
  v57 = v45;
  v58 = v46;
  v35 = v34(v33, &lhs, &rhs, a4, a6, &v61, type, &v57, DerivedStorage + 944, v38);
  if ((_DWORD)v35)
  {
LABEL_38:
    fpfs_FlowControlPump(DerivedStorage, 0, 0, *(_DWORD *)(DerivedStorage + 1088));
    return v35;
  }
  v36 = CMBaseObjectGetDerivedStorage();
  v35 = 0;
  if (*(_BYTE *)(v36 + 470))
    *(_BYTE *)(v36 + 470) = 0;
  return v35;
}

uint64_t fpfs_PrepareToReuseLastIFrameTrack(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t TrackOfType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t (**)(int, int, int, CMFormatDescriptionRef), uint64_t);
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  TrackOfType = fpfs_LastTrackOfType(a1, 1986618469, 0);
  v8 = *(_QWORD *)DerivedStorage;
  v26 = *MEMORY[0x1E0CA2E18];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v27 = v9;
  v23 = v26;
  v24 = v26;
  v25 = v9;
  fpfs_setRateInternal(v8, a1, &v26, &v24, 0.0);
  if (TrackOfType)
  {
    if (*(_BYTE *)(TrackOfType + 184))
      v10 = TrackOfType;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(DerivedStorage + 1040);
  if (v11)
  {
    do
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v11 != v10)
        fpfs_DeleteTrack(a1);
      if (!v12)
        break;
      v11 = v12;
    }
    while (*(_QWORD *)(DerivedStorage + 1040));
  }
  if (!v10)
    goto LABEL_24;
  if (*(_BYTE *)(v10 + 182))
  {
    v13 = fpfs_AddNewTrack(a1, *(_DWORD *)(v10 + 24), *(const void **)(v10 + 48), *(unsigned __int8 *)(v10 + 180), *(_DWORD *)(v10 + 32), *(_DWORD *)(v10 + 28));
    if (v13)
    {
      v14 = (uint64_t)v13;
      v15 = v13[6];
      v16 = *((unsigned int *)v13 + 6);
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t (**)(int, int, int, CMFormatDescriptionRef), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v17)
        v17(v15, v16, &kManifoldOutputCallbacks, v14);
      fpfs_fmtDescChangeNote(*(const void **)(v14 + 48), *(_DWORD *)(v14 + 24), v14, *(CMFormatDescriptionRef *)(v10 + 40), *(const void **)(v10 + 384));
    }
    fpfs_DeleteTrack(a1);
LABEL_24:
    *(_OWORD *)(DerivedStorage + 1512) = v23;
    *(_QWORD *)(DerivedStorage + 1528) = v9;
    *(_BYTE *)(DerivedStorage + 1557) = 0;
LABEL_25:
    result = 0;
    *(_BYTE *)(DerivedStorage + 528) = 1;
    return result;
  }
  v18 = *a2;
  *(_QWORD *)(v10 + 208) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v10 + 192) = v18;
  v19 = *a2;
  *(_QWORD *)(v10 + 232) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v10 + 216) = v19;
  v20 = *(_QWORD *)(v10 + 96);
  if (v20)
  {
    fpfs_FlushPrimaryAndAuxRenderChains(v20, 1);
  }
  else if (a3)
  {
    fpfs_EnsureRenderChainForTrack(*(_QWORD *)DerivedStorage, (_QWORD *)v10, 0);
    fpfs_SetRenderChainsReleasedForPause(a1, 0);
  }
  v21 = DerivedStorage + 24 * *(unsigned __int8 *)(v10 + 180);
  *(_OWORD *)(v21 + 248) = v23;
  *(_QWORD *)(v21 + 264) = v9;
  CMBufferQueueReset(*(CMBufferQueueRef *)(v10 + 80));
  result = 0;
  *(_QWORD *)(DerivedStorage + 1528) = v9;
  *(_OWORD *)(DerivedStorage + 1512) = v23;
  *(_BYTE *)(DerivedStorage + 1557) = 0;
  if (!*(_QWORD *)(v10 + 96))
    goto LABEL_25;
  return result;
}

uint64_t fpfsi_RTCReportingUpdatePlayingTrackStats(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 1040);
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = v3;
      if (*(_DWORD *)(v1 + 152) == 6)
      {
        v5 = *(_DWORD *)(v1 + 32);
        v6 = v5 == 1936684398 && v2 == 0;
        v3 = v1;
        v7 = v1;
        if (!v6)
        {
          v3 = v4;
          v7 = v2;
          if (v5 == 1986618469)
          {
            v3 = v1;
            return fpfsi_RTCReportingUpdateAlternateIndex(result, *(_QWORD *)(v3 + 432));
          }
        }
      }
      else
      {
        v7 = v2;
      }
      v1 = *(_QWORD *)(v1 + 8);
      v2 = v7;
    }
    while (v1);
    if (!v3)
      return result;
    return fpfsi_RTCReportingUpdateAlternateIndex(result, *(_QWORD *)(v3 + 432));
  }
  return result;
}

void fpfsi_RTCReportingReportRateChange(uint64_t a1, double a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v6;
  void (*v7)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD, _QWORD);
  double Current;
  double v12;
  uint64_t v13;
  double v14;
  void (*v15)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD, _QWORD);

  v4 = *(_QWORD *)(a1 + 2536);
  if (v4)
  {
    v5 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
    if (v5)
      v5(v4, CFSTR("playerStats"), CFSTR("RtReason"), 23, 0);
    v6 = *(_QWORD *)(a1 + 2536);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v7)
        v7(v6, CFSTR("playerStats"), CFSTR("Rate"), (uint64_t)(a2 * 100.0), 0);
      v8 = *(_QWORD *)(a1 + 2536);
      if (v8)
      {
        v9 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 16);
        if (v9)
          v9(v8, CFSTR("playerStats"), 106, 0, 0, 0);
      }
    }
  }
  if (a2 >= 1.0 && *(_BYTE *)(a1 + 2586) == 0)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v12 = *(double *)(a1 + 2984);
    *(_BYTE *)(a1 + 2586) = 1;
    v13 = *(_QWORD *)(a1 + 2536);
    if (v13)
    {
      v14 = Current;
      v15 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v15)
        v15(v13, CFSTR("playerStats"), CFSTR("TimeLTKPToStart"), (uint64_t)((v14 - v12) * 1000.0), 0);
    }
  }
  if (a2 == 0.0)
  {
    v16 = *(_QWORD *)(a1 + 2536);
    if (v16)
    {
      v17 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 16);
      if (v17)
        v17(v16, CFSTR("playerStats"), 901, 0, 0, 0);
    }
  }
}

uint64_t fpfs_FlowControlPump(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  int v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD);
  uint64_t UpTimeNanoseconds;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  void (*v18)(uint64_t, _QWORD, uint64_t);

  if (!*(_QWORD *)(a1 + 928))
    return 0;
  v8 = *(_QWORD *)(a1 + 2536);
  if (v8)
  {
    v9 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 56);
    if (v9)
      v9(v8, CFSTR("playerStats"), CFSTR("PausedSubstreams"), a2, 0);
  }
  v10 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 928);
    if (!v11)
      break;
    if (((1 << v10) & a4) != 0)
    {
      v12 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v12)
        v12(v11, v10);
      if (!*(_BYTE *)(a1 + 2072) && *(_QWORD *)(a1 + 2064) && !*(_BYTE *)(a1 + 2073))
      {
        UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        v14 = *(_QWORD *)(a1 + 2536);
        if (v14)
        {
          v15 = UpTimeNanoseconds;
          v16 = *(_QWORD *)(a1 + 2064);
          v17 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
          if (v17)
            v17(v14, CFSTR("startupStats"), CFSTR("tfac2NWStart"), (v15 - v16) / 0xF4240uLL, 0);
        }
        *(_BYTE *)(a1 + 2072) = 1;
      }
    }
    else if (((1 << v10) & a2) != 0)
    {
      v18 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v18)
        v18(v11, v10, a3);
    }
    if (++v10 == 3)
      return 0;
  }
  return FigSignalErrorAt();
}

uint64_t fpfs_LastTrackOfType(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t result;

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
  v6 = v5 == 0;
  result = 0;
  while (!v6 && v5 != a3)
  {
    if (*(_DWORD *)(v5 + 32) == a2)
      result = v5;
    v5 = *(_QWORD *)(v5 + 8);
    v6 = v5 == 0;
  }
  return result;
}

void fpfs_DeleteTrack(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  int isTrackInLists;
  int v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  int v11;
  const __CFArray *Next;
  uint64_t v13;
  BOOL v15;
  uint64_t i;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  const void *v50;
  const void *v51;
  opaqueCMBufferQueue *v52;
  CMItemCount BufferCount;
  uint64_t v54;
  const void *v55;
  _QWORD *v56;
  uint64_t v57;
  BOOL v58;
  NSObject *v59;
  NSObject *v60;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)DerivedStorage;
  v6 = CMBaseObjectGetDerivedStorage();
  isTrackInLists = fpfsi_isTrackInLists(DerivedStorage, a2, 3u);
  v8 = dword_1EE2A2A88;
  if (!isTrackInLists && dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v8 = dword_1EE2A2A88;
  }
  if (v8)
  {
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_CompleteLogIfLastTrack((uint64_t)a1, a2);
  if (*(_QWORD *)(a2 + 96))
  {
    if (*(_DWORD *)(a2 + 32) != 1986618469)
    {
      v11 = fpfs_itemContainsTrackWithSharedRenderChain((uint64_t)a1, a2);
      Next = fpfs_getNext(v6, *(const void **)(v6 + 80));
      if (!Next || !fpfs_itemContainsTrackWithSharedRenderChain((uint64_t)Next, a2))
      {
        v13 = *(_QWORD *)(v6 + 80);
        if ((const void *)v13 == a1 || v13 == 0)
        {
          v15 = 0;
          if (v11)
            goto LABEL_21;
        }
        else
        {
          v15 = fpfs_itemContainsTrackWithSharedRenderChain(v13, a2) != 0;
          if (v11)
            goto LABEL_21;
        }
        if (!v15)
        {
          fpfs_FlushPrimaryAndAuxRenderChains(*(_QWORD *)(a2 + 96), 1);
          for (i = *(_QWORD *)(a2 + 96); i; i = *(_QWORD *)(i + 88))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
        }
      }
    }
  }
LABEL_21:
  v18 = (uint64_t *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 8);
  if (v17)
  {
    while (*(_DWORD *)(v17 + 32) != *(_DWORD *)(a2 + 32)
         || !*(_QWORD *)(v17 + 40)
         || !fpfsi_canTracksBeSyncPairsIgnoringDiscontinuity(a2, v17))
    {
      v17 = *(_QWORD *)(v17 + 8);
      if (!v17)
        goto LABEL_26;
    }
    v19 = 0;
  }
  else
  {
LABEL_26:
    v19 = 1;
  }
  v20 = fpfs_shouldCheckAndReportVariantEnded(a2);
  fpfs_ReleaseTrackRenderChain(a2);
  if (*(_DWORD *)(a2 + 32) == 1936684398)
    fpfs_PrepareAndEnqueueSpatialAudioRenderingChangedNotification(*(const void **)DerivedStorage, *(const void **)a2, v21, v22, v23, v24, v25, v26);
  v27 = (uint64_t *)(DerivedStorage + 1040);
  v28 = (_QWORD *)(DerivedStorage + 1040);
  do
  {
    v29 = *v28;
    v28 = (_QWORD *)(*v28 + 8);
    if (v29)
      v30 = v29 == a2;
    else
      v30 = 1;
  }
  while (!v30);
  if (v29)
  {
    if (v20)
      fpfsi_RTCReportingReportCheckAndReportVariantEnded(DerivedStorage, a2);
    v31 = *v27;
    if (*v27 == a2)
    {
      v42 = *v18;
      *v27 = *v18;
      if (!v42)
        *(_QWORD *)(DerivedStorage + 1048) = v27;
    }
    else
    {
      do
      {
        v32 = v31;
        v31 = *(_QWORD *)(v31 + 8);
      }
      while (v31 != a2);
      v33 = *v18;
      *(_QWORD *)(v32 + 8) = *v18;
      v34 = v32 + 8;
      if (!v33)
        *(_QWORD *)(DerivedStorage + 1048) = v34;
    }
  }
  else
  {
    v35 = (uint64_t *)(DerivedStorage + 1056);
    v36 = (_QWORD *)(DerivedStorage + 1056);
    do
    {
      v37 = *v36;
      v36 = (_QWORD *)(*v36 + 8);
      if (v37)
        v38 = v37 == a2;
      else
        v38 = 1;
    }
    while (!v38);
    if (v37)
    {
      v39 = *v35;
      if (*v35 == a2)
      {
        v43 = *v18;
        *v35 = *v18;
        if (v43)
          goto LABEL_58;
      }
      else
      {
        do
        {
          v40 = v39;
          v39 = *(_QWORD *)(v39 + 8);
        }
        while (v39 != a2);
        v41 = *v18;
        *(_QWORD *)(v40 + 8) = *v18;
        v35 = (uint64_t *)(v40 + 8);
        if (v41)
          goto LABEL_58;
      }
      *(_QWORD *)(DerivedStorage + 1064) = v35;
    }
  }
LABEL_58:
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(a2 + 112));
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(a2 + 120));
  fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(a2 + 264));
  fpfs_StopFeedingTrack(a2, 0, 0);
  v50 = *(const void **)(a2 + 48);
  if (v50)
  {
    *(_QWORD *)(a2 + 48) = 0;
    CFRelease(v50);
  }
  v51 = *(const void **)(a2 + 72);
  if (v51)
  {
    CFRelease(v51);
    *(_QWORD *)(a2 + 72) = 0;
  }
  v52 = *(opaqueCMBufferQueue **)(a2 + 80);
  if (v52)
  {
    BufferCount = CMBufferQueueGetBufferCount(v52);
    v54 = *(_QWORD *)(a2 + 80);
    if (BufferCount >= 1)
    {
      fpfs_SendBufferQueueToChomper(v6, v54);
LABEL_67:
      *(_QWORD *)(a2 + 80) = 0;
      goto LABEL_68;
    }
    if (v54)
    {
      CFRelease(*(CFTypeRef *)(a2 + 80));
      goto LABEL_67;
    }
  }
LABEL_68:
  if (*(_QWORD *)(a2 + 384))
  {
    fpfsi_RemoveCPECryptorListenersOncePerItem((uint64_t)a1, a2);
    v55 = *(const void **)(a2 + 384);
    if (v55)
    {
      CFRelease(v55);
      *(_QWORD *)(a2 + 384) = 0;
    }
  }
  if ((v19 & 1) != 0)
  {
    fpfs_ChangeTrackState(a2, 8u);
    v56 = (_QWORD *)(DerivedStorage + 1072);
    do
    {
      v57 = *v56;
      v56 = (_QWORD *)(*v56 + 8);
      if (v57)
        v58 = v57 == a2;
      else
        v58 = 1;
    }
    while (!v58);
    if (v57)
    {
      v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
      **(_QWORD **)(DerivedStorage + 1080) = a2;
      *(_QWORD *)(DerivedStorage + 1080) = v18;
    }
  }
  else
  {
    fpfs_PrepareAndEnqueueTracksChangedNotification(v5, a1, v44, v45, v46, v47, v48, v49);
    if (!*(_QWORD *)(v6 + 8) && dword_1EE2A2A88)
    {
      v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_FreeTrack((_QWORD *)a2);
  }
}

_QWORD *fpfs_AddNewTrack(uint64_t a1, int a2, const void *a3, unsigned int a4, int a5, int a6)
{
  uint64_t DerivedStorage;
  _QWORD *v13;
  const __CFAllocator *AllocatorForMedia;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const __CFAllocator *v16;
  const CMBufferCallbacks *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v39;
  _DWORD valuePtr[32];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = malloc_type_calloc(1uLL, 0x220uLL, 0x10E0040EA42D65DuLL);
  if (!v13)
    return v13;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  if (CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)v13 + 9)
    || (v16 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v17 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers(),
        CMBufferQueueCreate(v16, 0, v17, (CMBufferQueueRef *)v13 + 10)))
  {
    free(v13);
    return 0;
  }
  *v13 = a1;
  v18 = *(_QWORD *)(DerivedStorage + 1112) + 1;
  *(_QWORD *)(DerivedStorage + 1112) = v18;
  v13[2] = v18;
  *((_DWORD *)v13 + 6) = a2;
  v19 = MEMORY[0x1E0CA2E18];
  v39 = *MEMORY[0x1E0CA2E18];
  *((_OWORD *)v13 + 8) = *MEMORY[0x1E0CA2E18];
  v20 = *(_QWORD *)(v19 + 16);
  v13[18] = v20;
  *((_OWORD *)v13 + 12) = v39;
  v13[26] = v20;
  v21 = CFRetain(a3);
  v13[6] = v21;
  *((_BYTE *)v13 + 180) = a4;
  v22 = DerivedStorage + 8 * a4;
  v23 = (_QWORD *)(v22 + 1144);
  v24 = (_QWORD *)(v22 + 1120);
  if (v21 == *(CFTypeRef *)(DerivedStorage + 16 * a4 + 1000))
    v25 = v23;
  else
    v25 = v24;
  v13[8] = *v25;
  *(_OWORD *)(v13 + 27) = v39;
  v13[29] = v20;
  *((_OWORD *)v13 + 15) = v39;
  v13[32] = v20;
  *((_OWORD *)v13 + 17) = v39;
  v13[36] = v20;
  v26 = MEMORY[0x1E0CA2E68];
  v27 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)v13 + 396) = *MEMORY[0x1E0CA2E68];
  v28 = *(_QWORD *)(v26 + 16);
  *(_QWORD *)((char *)v13 + 412) = v28;
  v13[42] = v28;
  *((_OWORD *)v13 + 20) = v27;
  v13[53] = -1;
  v13[43] = FigGetUpTimeNanoseconds();
  *(_OWORD *)(v13 + 45) = v39;
  v13[47] = v20;
  fpfsi_SetTrackMediaType(DerivedStorage, (uint64_t)v13, a5);
  v29 = MEMORY[0x1E0CA2E40];
  v30 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *((_OWORD *)v13 + 31) = *MEMORY[0x1E0CA2E40];
  *((_OWORD *)v13 + 32) = v30;
  *((_OWORD *)v13 + 33) = *(_OWORD *)(v29 + 32);
  if (!a6)
    a6 = *((_DWORD *)v13 + 4);
  *((_DWORD *)v13 + 7) = a6;
  v13[1] = 0;
  **(_QWORD **)(DerivedStorage + 1048) = v13;
  *(_QWORD *)(DerivedStorage + 1048) = v13 + 1;
  v31 = *((_DWORD *)v13 + 8);
  if (v31 <= 1935832171)
  {
    if (v31 != 1668047728 && v31 != 1835365473)
      goto LABEL_25;
    goto LABEL_17;
  }
  switch(v31)
  {
    case 1935832172:
LABEL_17:
      *((_BYTE *)v13 + 184) = 1;
      break;
    case 1936684398:
      goto LABEL_18;
    case 1986618469:
      v32 = *(_QWORD *)(DerivedStorage + 1696);
      if (v32)
      {
        v33 = FigAlternateIsIFrameOnly(v32) != 0;
        goto LABEL_19;
      }
LABEL_18:
      v33 = 0;
LABEL_19:
      *((_BYTE *)v13 + 184) = v33;
      fpfs_CreateTrackDryTimer((uint64_t)v13);
      v34 = *(_QWORD *)(DerivedStorage + 1696);
      if (v34)
      {
        valuePtr[0] = FigAlternateGetAlternateIndex(v34);
        v13[54] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
        v35 = 1696;
        if (v13[6] == *(_QWORD *)(DerivedStorage + 16 * *((unsigned __int8 *)v13 + 180) + 1000))
          v35 = 1760;
        v36 = *(CFTypeRef *)(DerivedStorage + v35);
        if (v36)
          v36 = CFRetain(v36);
        v13[55] = v36;
        v13[56] = *(_QWORD *)(DerivedStorage + 1744);
      }
      break;
  }
LABEL_25:
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v13;
}

void fpfs_fmtDescChangeNote(const void *a1, unsigned int a2, uint64_t a3, CMFormatDescriptionRef desc, const void *a5)
{
  CMMediaType MediaType;
  uint64_t DerivedStorage;
  const void *v10;
  uint64_t v11;
  _BOOL4 v12;
  signed int MediaSubType;
  int VideoDynamicRange;
  uint64_t v15;
  int v16;
  int v17;
  const __CFDictionary *v18;
  const __CFArray *Value;
  uint64_t v20;
  const __CFArray *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  __SecTask *v24;
  const void *v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  const void *v29;
  const opaqueCMFormatDescription *v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  int v39;
  const void *v40;
  const void *v41;
  int v42;
  uint64_t AllocatorForMedia;
  unsigned int (*v44)(const void *, _QWORD, const __CFString *, uint64_t, CMTime *);
  const void *v45;
  const void *v46;
  CMTimeValue v47;
  const void *v48;
  char v49;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v52;
  unsigned int (*v53)(const void *, _QWORD, const __CFString *, uint64_t, CFTypeRef *);
  CMTimeValue *v54;
  void (*v55)(const void *, const __CFString *, _QWORD);
  uint64_t (*v56)(const void *, _QWORD, _QWORD, uint64_t);
  uint64_t v57;
  uint64_t j;
  const void *v59;
  uint64_t k;
  uint64_t v61;
  uint64_t m;
  uint64_t v63;
  uint64_t (*v64)(const void *, const __CFString *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t HasStarted;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  CFTypeID v78;
  char v79;
  _BOOL4 v80;
  const void *v81;
  uint64_t v82;
  uint64_t v85;
  CMTime cf;
  CFTypeRef v87;
  CMTimeValue v88;
  CMTimeScale timescale;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  MediaType = CMFormatDescriptionGetMediaType(desc);
  v85 = *(_QWORD *)a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(const void **)DerivedStorage;
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = (*(_BYTE *)(a3 + 228) & 1) == 0 || CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(a3 + 80)) == 0;
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  fpfs_LockMutexWithCaller((uint64_t)v10);
  if (!*(_DWORD *)(v11 + 32) || *(CMFormatDescriptionRef *)(a3 + 40) == desc && *(const void **)(a3 + 384) == a5)
LABEL_171:
    fpfs_UnlockAndPostNotificationsWithCaller(v10);
  v80 = v12;
  if (MediaType != 1986618469)
    goto LABEL_45;
  if (*(_QWORD *)(a3 + 440))
  {
    VideoDynamicRange = CMVideoFormatDescriptionGetVideoDynamicRange();
    if (VideoDynamicRange >= 4
      && VideoDynamicRange != 7
      && FigAlternateGetVideoRange(*(_QWORD *)(a3 + 440)) != 3)
    {
      goto LABEL_165;
    }
  }
  if (!FPSupport_FormatDescriptionIndicatesStereoVideo(desc))
  {
LABEL_43:
    if (!FPSupport_FormatDescriptionIndicatesStereoVideo(desc)
      && CMVideoFormatDescriptionGetVideoDynamicRange() == 10)
    {
      goto LABEL_165;
    }
LABEL_45:
    v18 = *(const __CFDictionary **)(DerivedStorage + 400);
    if (v18)
    {
      Value = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("assetOption_AllowableVideoCodecTypes"));
      v20 = v11;
      v21 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 400), CFSTR("assetOption_AllowableAudioCodecTypes"));
      v22 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 400), CFSTR("assetOption_AllowableCaptionsFormats"));
      v23 = v21;
      v11 = v20;
      if (!FPSupport_IsFormatDescAllowable(desc, Value, v23, v22))
      {
        v15 = 4294954369;
        goto LABEL_170;
      }
    }
    if (MediaType == 1986618469)
    {
      v24 = *(__SecTask **)(v11 + 56);
      if (!v24)
        goto LABEL_59;
      if (MediaSubType == 1667331683 || MediaSubType == 1667790435 || MediaSubType == 1667524657)
      {
        v25 = v10;
        v26 = SecTaskCopyValueForEntitlement(v24, CFSTR("com.apple.coremedia.allow-mpeg4streaming"), 0);
        v27 = v26;
        v28 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
        if (v26)
          CFRelease(v26);
        if (v27 != v28)
        {
          v15 = FigSignalErrorAt();
          v10 = v25;
          goto LABEL_166;
        }
        LOBYTE(v24) = 0;
        v10 = v25;
LABEL_59:
        v29 = (const void *)v85;
        v30 = *(const opaqueCMFormatDescription **)(a3 + 40);
        v81 = v10;
        v82 = v11;
        v79 = (char)v24;
        if (v30)
        {
          if (*(_DWORD *)(a3 + 32) != MediaType)
            goto LABEL_165;
          if (!fpfs_FormatsAreCompatible(v85, desc, v30))
          {
            fpfs_StopFeedingTrack(a3, 0, 1);
            v31 = fpfs_AddNewTrack(v85, a2, a1, *(unsigned __int8 *)(a3 + 180), MediaType, *(_DWORD *)(a3 + 28));
            if (v31)
            {
              v32 = (uint64_t)v31;
              if (v80)
              {
                fpfs_DeleteTrack(v85);
                v33 = 0;
                a3 = v32;
              }
              else
              {
                v33 = 0;
              }
LABEL_67:
              v34 = *(_QWORD *)(v32 + 48);
              v35 = *(unsigned __int8 *)(v32 + 180);
              v36 = *(_QWORD *)(DerivedStorage + 16 * v35 + 1000);
              if (*(_BYTE *)(DerivedStorage + v35 + ((v34 == v36) | (2 * (v34 == v36))) + 512) | (v34 == v36)
                && !*(_QWORD *)(a3 + 40))
              {
                for (i = *(_QWORD *)(DerivedStorage + 1040); i; i = *(_QWORD *)(i + 8))
                {
                  v38 = *(_QWORD *)(i + 48);
                  if (v38 != v34
                    && *(_DWORD *)(i + 152) == 6
                    && *(_QWORD *)(i + 64) == *(_QWORD *)(v32 + 64)
                    && v38 != *(_QWORD *)(DerivedStorage + 16 * *(unsigned __int8 *)(i + 180) + 1000))
                  {
                    goto LABEL_76;
                  }
                }
                if (v34 == v36)
                {
LABEL_76:
                  if (*(_DWORD *)(v32 + 32) != 1986618469 || fpfs_CanRenderVideo(v82, v85))
                  {
                    fpfs_ChangeTrackState(v32, 1u);
                    if (*(_DWORD *)(DerivedStorage + 2784) > *(_DWORD *)(DerivedStorage + 2788))
                    {
                      v39 = *(_DWORD *)(v32 + 32);
                      if (v39 == 1986618469)
                      {
                        *(_BYTE *)(DerivedStorage + 2817) = 1;
                      }
                      else if (v39 == 1936684398)
                      {
                        *(_BYTE *)(DerivedStorage + 2816) = 1;
                      }
                    }
                  }
                }
              }
              v40 = *(const void **)(v32 + 40);
              *(_QWORD *)(v32 + 40) = desc;
              if (desc)
                CFRetain(desc);
              v41 = a1;
              if (v40)
                CFRelease(v40);
              v42 = *(_DWORD *)(v32 + 32);
              if (v42 == 1986618469)
              {
                cf.value = 0;
                AllocatorForMedia = FigGetAllocatorForMedia();
                v44 = *(unsigned int (**)(const void *, _QWORD, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                if (v44 && !v44(a1, a2, CFSTR("FMFD_TrackMatrixArray"), AllocatorForMedia, &cf))
                {
                  v45 = *(const void **)(v32 + 56);
                  v46 = (const void *)cf.value;
                  *(_QWORD *)(v32 + 56) = cf.value;
                  if (v46)
                    CFRetain(v46);
                  if (v45)
                    CFRelease(v45);
                }
                if (cf.value)
                  CFRelease((CFTypeRef)cf.value);
                v42 = *(_DWORD *)(v32 + 32);
              }
              if (v42 != 1936684398)
              {
LABEL_108:
                if ((v33 & 1) != 0)
                  goto LABEL_111;
                v56 = *(uint64_t (**)(const void *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 32);
                if (v56)
                {
                  v57 = v56(v41, a2, &kManifoldOutputCallbacks, v32);
                  if (!(_DWORD)v57)
                  {
LABEL_111:
                    for (j = *(_QWORD *)(DerivedStorage + 1040); j; j = *(_QWORD *)(j + 8))
                    {
                      if (*(_DWORD *)(j + 32) == *(_DWORD *)(v32 + 32) && !*(_QWORD *)(j + 96))
                        break;
                    }
                    v10 = v81;
                    if (j == v32 && (MediaType == 1986618469 || MediaType == 1936684398))
                    {
                      for (k = 0; k != 5; ++k)
                      {
                        if (kCommonTypes[k] == MediaType)
                          break;
                      }
                      v61 = *(_QWORD *)(DerivedStorage + 8 * k + 784);
                      if (v61)
                      {
                        if (!fpfs_FormatsAreCompatible((uint64_t)v29, desc, *(const opaqueCMFormatDescription **)(v61 + 16)))
                        {
                          for (m = 0; m != 5; ++m)
                          {
                            if (kCommonTypes[m] == MediaType)
                              break;
                          }
                          fpfs_ClearRenderChains(v29, (1 << m));
                        }
                      }
                    }
                    if (*(_QWORD *)(v32 + 384))
                    {
                      fpfsi_RemoveCPECryptorListenersOncePerItem((uint64_t)v29, v32);
                      v59 = *(const void **)(v32 + 384);
                    }
                    else
                    {
                      v59 = 0;
                    }
                    *(_QWORD *)(v32 + 384) = a5;
                    if (a5)
                      CFRetain(a5);
                    if (v59)
                      CFRelease(v59);
                    if (!a5)
                    {
LABEL_155:
                      fpfsi_PostExternalProtectionRequiredChangedNotification(v29);
                      fpfs_ExternalProtectionStatusChangedGuts(*(const void **)DerivedStorage, v71, v72, v73, v74, v75, v76, v77);
                    }
                    v63 = *(_QWORD *)(v82 + 672);
                    v64 = *(uint64_t (**)(const void *, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 56);
                    if (!v64)
                    {
                      v15 = 4294954514;
                      goto LABEL_169;
                    }
                    v65 = v64(a5, CFSTR("DisplayList"), v63);
                    if ((_DWORD)v65 == -12785)
                    {
                      v15 = 4294954373;
LABEL_169:
                      v11 = v82;
                      goto LABEL_170;
                    }
                    v15 = v65;
                    if ((_DWORD)v65)
                      goto LABEL_169;
                    v66 = *(_QWORD *)(v32 + 384);
                    v67 = CMBaseObjectGetDerivedStorage();
                    if (v66)
                    {
                      v68 = *(_QWORD *)(v67 + 1040);
                      if (v68)
                      {
                        while (v68 == v32 || *(_QWORD *)(v68 + 384) != v66)
                        {
                          v68 = *(_QWORD *)(v68 + 8);
                          if (!v68)
                            goto LABEL_147;
                        }
                      }
                      else
                      {
LABEL_147:
                        v69 = *(_QWORD *)(v67 + 1056);
                        if (v69)
                        {
                          while (v69 == v32 || *(_QWORD *)(v69 + 384) != v66)
                          {
                            v69 = *(_QWORD *)(v69 + 8);
                            if (!v69)
                              goto LABEL_151;
                          }
                        }
                        else
                        {
LABEL_151:
                          CMNotificationCenterGetDefaultLocalCenter();
                          HasStarted = FigNotificationCenterAddWeakListener();
                          if ((_DWORD)HasStarted)
                            goto LABEL_168;
                          CMNotificationCenterGetDefaultLocalCenter();
                          HasStarted = FigNotificationCenterAddWeakListener();
                          if ((_DWORD)HasStarted)
                            goto LABEL_168;
                        }
                      }
                    }
                    v29 = (const void *)v85;
                    if (!fpfs_isDecryptorReady(v32))
                      goto LABEL_155;
                    HasStarted = fpfs_ensureDecryptorHasStarted(v32);
                    if (!(_DWORD)HasStarted)
                      goto LABEL_155;
LABEL_168:
                    v15 = HasStarted;
                    goto LABEL_169;
                  }
                  v15 = v57;
                }
                else
                {
                  v15 = 4294954514;
                }
                v10 = v81;
                goto LABEL_169;
              }
              v47 = *MEMORY[0x1E0CA2E18];
              v87 = 0;
              v88 = v47;
              timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
              if (*(_QWORD *)(v32 + 40))
              {
                v48 = a5;
                v49 = v33;
                flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
                epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                *(_BYTE *)(v32 + 420) = v79;
                v52 = FigGetAllocatorForMedia();
                v53 = *(unsigned int (**)(const void *, _QWORD, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                if (v53 && !v53(a1, a2, CFSTR("FMFD_TrackAudioPrimingDuration"), v52, &v87) && v87)
                {
                  v78 = CFGetTypeID(v87);
                  if (v78 == CFDictionaryGetTypeID())
                  {
                    CMTimeMakeFromDictionary(&cf, (CFDictionaryRef)v87);
                    v88 = cf.value;
                    flags = cf.flags;
                    timescale = cf.timescale;
                    epoch = cf.epoch;
                  }
                  if (v87)
                    CFRelease(v87);
                }
                v54 = (CMTimeValue *)(v32 + 396);
                if ((flags & 0x1D) == 1)
                {
                  *v54 = v88;
                  *(_DWORD *)(v32 + 404) = timescale;
                  *(_DWORD *)(v32 + 408) = flags;
                  *(_QWORD *)(v32 + 412) = epoch;
                  v41 = a1;
                  v55 = *(void (**)(const void *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 56);
                  v29 = (const void *)v85;
                  v33 = v49;
                  if (v55)
                    v55(a1, CFSTR("FMFD_ProhibitPrimingTrim"), *MEMORY[0x1E0C9AE50]);
                }
                else
                {
                  FigGaplessInfoGetDefaultAudioPrimingDuration(*(const opaqueCMFormatDescription **)(v32 + 40), &cf);
                  *(_OWORD *)v54 = *(_OWORD *)&cf.value;
                  *(_QWORD *)(v32 + 412) = cf.epoch;
                  v41 = a1;
                  v29 = (const void *)v85;
                  v33 = v49;
                }
                a5 = v48;
                goto LABEL_108;
              }
              v15 = FigSignalErrorAt();
              v10 = v81;
              v11 = v82;
LABEL_166:
              if (!(_DWORD)v15)
                goto LABEL_171;
LABEL_170:
              fpfs_StopPlayingItemWithOSStatus(v11, v85, v15);
              goto LABEL_171;
            }
LABEL_165:
            v15 = FigSignalErrorAt();
            goto LABEL_166;
          }
        }
        else
        {
          fpfsi_SetTrackMediaType(DerivedStorage, a3, MediaType);
        }
        v33 = 1;
        v32 = a3;
        goto LABEL_67;
      }
    }
    else if (MediaType == 1936684398)
    {
      LOBYTE(v24) = FigAudioFormatDescriptionEmploysDependentPackets();
      goto LABEL_59;
    }
    LOBYTE(v24) = 0;
    goto LABEL_59;
  }
  v15 = 4294954369;
  if (MediaSubType > 1836415072)
  {
    if (MediaSubType > 1902407031)
    {
      if (MediaSubType > 1902671458)
      {
        if (MediaSubType == 1902671459)
          goto LABEL_40;
        v16 = 1902998904;
        goto LABEL_39;
      }
      if (MediaSubType == 1902407032)
        goto LABEL_33;
      v16 = 1902667126;
    }
    else
    {
      if (MediaSubType > 1902405680)
      {
        if (MediaSubType == 1902405681)
          goto LABEL_33;
        v17 = 1902405733;
        goto LABEL_32;
      }
      if (MediaSubType == 1836415073)
        goto LABEL_40;
      v16 = 1869117027;
    }
  }
  else
  {
    if (MediaSubType <= 1685481572)
    {
      if (MediaSubType <= 1684895095)
      {
        if (MediaSubType != 1667524657)
        {
          v16 = 1667790435;
          goto LABEL_39;
        }
LABEL_33:
        if (CMVideoFormatDescriptionGetVideoDynamicRange() != 10)
          goto LABEL_165;
        goto LABEL_43;
      }
      if (MediaSubType == 1684895096)
        goto LABEL_33;
      v17 = 1685481521;
LABEL_32:
      if (MediaSubType != v17)
        goto LABEL_170;
      goto LABEL_33;
    }
    if (MediaSubType > 1751479856)
    {
      if (MediaSubType == 1751479857)
        goto LABEL_40;
      v16 = 1752589105;
      goto LABEL_39;
    }
    if (MediaSubType == 1685481573)
      goto LABEL_33;
    v16 = 1718908520;
  }
LABEL_39:
  if (MediaSubType != v16)
    goto LABEL_170;
LABEL_40:
  if (*(_BYTE *)(v11 + 873)
    && !FPSupport_FormatDescriptionIndicatesFishEyeProjection(desc)
    && CMVideoFormatDescriptionGetVideoDynamicRange() != 1)
  {
    goto LABEL_165;
  }
  goto LABEL_43;
}

void fpfs_FlushPrimaryAndAuxRenderChains(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD);
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  const void *v10;
  void *v11;
  void *values;

  v3 = a1;
  if (a1)
  {
    v4 = a1;
    do
    {
      v5 = *(_QWORD *)(v4 + 32);
      v6 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (v6)
        v6(v5, 0);
      v4 = *(_QWORD *)(v4 + 88);
    }
    while (v4);
  }
  if (!*(_QWORD *)(v3 + 56))
  {
    ++fpfs_HaltPrimaryAndAuxRenderChains_sResumeTag;
    values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &fpfs_HaltPrimaryAndAuxRenderChains_sResumeTag);
    if (values)
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v8 = CFDictionaryCreate(AllocatorForMedia, MEMORY[0x1E0CA2748], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v8)
      {
        v9 = v8;
        do
        {
          v10 = *(const void **)(v3 + 56);
          v11 = values;
          *(_QWORD *)(v3 + 56) = values;
          if (v11)
            CFRetain(v11);
          if (v10)
            CFRelease(v10);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (a2)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          v3 = *(_QWORD *)(v3 + 88);
        }
        while (v3);
        CFRelease(v9);
      }
      else
      {
        FigSignalErrorAt();
      }
      if (values)
        CFRelease(values);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t fpfs_EnsureRenderChainForTrack(uint64_t a1, _QWORD *a2, int a3)
{
  const __CFArray *v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t HasStarted;
  uint64_t LegibleOutputRenderChainsAndAttachToPrimary;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  const __CFArray *v28;
  uint64_t i;
  void **v30;
  int v31;
  int v32;
  uint64_t v33;
  const __CFArray *v34;
  uint64_t v35;
  const __CFArray *v36;
  CFIndex Count;
  int CanReuseRenderChainForTrack;
  BOOL v39;
  int v40;
  uint64_t OutputDestinationForMetadata;
  const void *v42;
  uint64_t v43;
  const __CFArray *v44;
  const opaqueCMFormatDescription *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t SubtitleRenderPipeline;
  uint64_t v50;
  int v51;
  uint64_t v52;
  CFNumberRef v53;
  int v54;
  uint64_t UpTimeNanoseconds;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  const opaqueCMFormatDescription *v60;
  signed int MediaSubType;
  char v62;
  int v63;
  uint64_t v64;
  const __CFArray *v65;
  const opaqueCMFormatDescription *v66;
  uint64_t v67;
  CFTypeRef *v68;
  const __CFDictionary *v69;
  const __CFDictionary *v70;
  uint64_t OctaviaClosedCaptionsRenderPipeline;
  uint64_t v72;
  uint64_t AllocatorForMedia;
  const void **v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v79;
  const void *v80;
  const __CFArray *v81;
  uint64_t v82;
  uint64_t v83;
  CFIndex v84;
  _QWORD *v85;
  const void *ValueAtIndex;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v93;
  uint64_t v94;
  int v95;
  const void *v96;
  int v97;
  const __CFArray *v98;
  uint64_t v99;
  uint64_t v100;
  CFTypeRef v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v105;
  const __CFAllocator *v106;
  const char *v107;
  const char *v108;
  CFStringRef v109;
  const __CFAllocator *v110;
  __CFDictionary *Mutable;
  __CFDictionary *v112;
  int v113;
  const void *v114;
  const void *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, CFTypeRef *, _QWORD);
  uint64_t VideoRenderPipeline;
  uint64_t v122;
  const __CFAllocator *v123;
  const void *v124;
  uint64_t RenderingTrackofType;
  uint64_t v126;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  int v129;
  uint64_t v130;
  CFStringRef v131;
  const void *v132;
  const void *v133;
  uint64_t v134;
  void (*v135)(uint64_t, const __CFString *, _QWORD);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  CFTypeRef *v140;
  NSObject *v141;
  uint64_t (*v142)(uint64_t, uint64_t, const void *);
  uint64_t v143;
  uint64_t (*v144)(uint64_t, CFTypeRef *, CMTime *);
  _BOOL4 AtmosDecodePolicy;
  uint64_t v146;
  const void *v147;
  char v148;
  const __CFAllocator *v149;
  void *v150;
  uint64_t RenderPipelineOptions;
  _BYTE *v152;
  uint64_t v153;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v155;
  const void *v156;
  const __CFAllocator *v157;
  uint64_t v158;
  __int128 v159;
  const __CFAllocator *v160;
  const __CFDictionary *v161;
  const __CFAllocator *v162;
  const void *v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, __CFString *, uint64_t);
  const void *v167;
  const void *v168;
  NSObject *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (*v178)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  void (*v184)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v185;
  _QWORD *v186;
  const __CFString *v187;
  uint64_t v188;
  void (*v189)(uint64_t, const __CFString *, const __CFString *);
  const __CFString *v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(uint64_t, const __CFString *, uint64_t);
  uint64_t v194;
  void (*v195)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, const __CFString *, uint64_t);
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, const __CFString *, uint64_t);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v206;
  NSObject *v207;
  const void *v208;
  CFTypeRef *v209;
  CFAllocatorRef *v210;
  const __CFDictionary *v211;
  const __CFAllocator *v212;
  CFTypeRef v213;
  CFAllocatorRef *v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(uint64_t, __CFString *, uint64_t);
  CFTypeRef v218;
  const void *value;
  uint64_t SInt32;
  uint64_t v221;
  void (*v222)(uint64_t, const __CFString *, uint64_t);
  const void *v223;
  CFNumberRef v224;
  uint64_t v225;
  void (*v226)(uint64_t, const __CFString *, CFNumberRef);
  int v227;
  CFTypeRef v228;
  uint64_t v229;
  void (*v230)(uint64_t, const __CFString *, CFTypeRef);
  CFTypeRef v231;
  uint64_t v232;
  void (*v233)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v234;
  uint64_t v235;
  void (*v236)(uint64_t, const __CFString *, uint64_t);
  const __CFArray *v237;
  CFIndex v238;
  CFIndex v239;
  CFIndex j;
  CFTypeRef v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t (*v244)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void (*v248)(uint64_t, const __CFString *, uint64_t);
  uint64_t v249;
  uint64_t v250;
  void (*v251)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v252;
  uint64_t v253;
  void (*v254)(uint64_t, const __CFString *, uint64_t);
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  float v258;
  uint64_t v259;
  void (*v260)(uint64_t, const __CFString *, CFTypeRef);
  CFTypeRef v263;
  const void *v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  void (*v268)(uint64_t, const __CFString *, uint64_t);
  uint64_t v269;
  uint64_t (*v270)(uint64_t, const __CFString *, CFTypeRef);
  const __CFArray *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void (*v275)(uint64_t, const __CFString *, uint64_t);
  NSObject *v276;
  unsigned int v277;
  unsigned int v278;
  const char *v279;
  const __CFArray *v280;
  const char *v281;
  uint64_t v282;
  void (*v283)(uint64_t, const __CFString *, uint64_t);
  uint64_t v284;
  void (*v285)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v286;
  void (*v287)(uint64_t, const __CFString *, uint64_t);
  uint64_t v288;
  uint64_t v289;
  void (*v290)(uint64_t, const __CFString *, uint64_t);
  uint64_t v291;
  uint64_t v292;
  void (*v293)(uint64_t, const __CFString *, uint64_t);
  uint64_t v294;
  uint64_t v295;
  void (*v296)(uint64_t, const __CFString *, uint64_t);
  uint64_t v297;
  void (*v298)(uint64_t, const __CFString *, _QWORD);
  const void *v299;
  const __CFArray *v300;
  uint64_t v301;
  uint64_t v302;
  float v303;
  uint64_t v304;
  uint64_t v305;
  NSObject *v306;
  unsigned int v307;
  unsigned int v308;
  const char *v309;
  const __CFArray *v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  uint64_t TrackOfType;
  uint64_t v316;
  const __CFArray *v317;
  uint64_t v318;
  uint64_t *v319;
  NSObject *v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  const char *v324;
  CFNumberRef v325;
  uint64_t v326;
  uint64_t *v327;
  NSObject *v328;
  unsigned int v329;
  unsigned int v330;
  uint64_t v331;
  const char *v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  const __CFArray *v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  const opaqueCMFormatDescription *v340;
  signed int v341;
  int v342;
  int v343;
  int v344;
  const AudioFormatListItem *v345;
  int v346;
  int v347;
  const __CFDictionary *OptionsDictionaryForSelectedMediaType;
  const void *v349;
  uint64_t *v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  const __CFArray *v358;
  uint64_t v359;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  uint64_t AudioInstreamID;
  uint64_t v362;
  uint64_t FigBaseObject;
  void (*v364)(uint64_t, const __CFString *, uint64_t);
  uint64_t v365;
  uint64_t v366;
  CFTypeRef cf;
  CFTypeRef cfa;
  uint64_t v369;
  const void *v370;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora;
  int v373;
  const void *v374;
  CFStringRef NextRenderPipelineIdentifierString;
  CFNumberRef v376;
  __CFString *v377;
  unsigned int ShouldEnableSpatializationForTrack;
  CFTypeRef v379;
  __CFString *v380;
  CFTypeRef *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  const void *v391;
  const __CFString *v392;
  CFTypeRef *v393;
  os_log_type_t v394;
  os_log_type_t v395[4];
  CMTime v396;
  CFTypeRef type[3];
  int valuePtr;
  CFTypeRef v399;
  CFTypeRef v400;
  CMTime keys;
  const char *v402;
  __int16 v403;
  const __CFArray *v404;
  __int16 v405;
  const char *v406;
  __int16 v407;
  _BYTE v408[24];
  CMTime values;
  CMTime sizeOut[5];
  uint64_t v411;

  v411 = *MEMORY[0x1E0C80C00];
  v6 = (const __CFArray *)*a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = v8;
  v393 = 0;
  if (*(_BYTE *)(DerivedStorage + 2872))
  {
    v10 = a3;
    v11 = v8;
    LODWORD(values.value) = 0;
    LOBYTE(type[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v9 = v11;
    a3 = v10;
  }
  if (a2[48])
  {
    if (fpfs_isDecryptorReady((uint64_t)a2))
    {
      HasStarted = fpfs_ensureDecryptorHasStarted((uint64_t)a2);
      if ((_DWORD)HasStarted)
        return HasStarted;
    }
  }
  if (*(_BYTE *)(DerivedStorage + 2440)
    && (_QWORD *)fpfs_FirstTrackWithFormatDescriptionOfType((uint64_t)v6, 1936684398) == a2
    && (v28 = *(const __CFArray **)(v9 + 80), v6 != v28)
    && v6 == fpfs_getNext(v9, v28))
  {
    LegibleOutputRenderChainsAndAttachToPrimary = fpfs_CommitToGaplessTransition(*(_QWORD *)(v9 + 80), (uint64_t)v6);
    if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary || a2[12])
    {
LABEL_588:
      if (*((_DWORD *)a2 + 8) == 1936684398)
      {
        v359 = a2[55];
        CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
        AudioInstreamID = FigAlternateGetAudioInstreamID(v359, CurrentAudioPersistentIDFromMediaOption);
        if (AudioInstreamID)
        {
          v362 = AudioInstreamID;
          FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2[12] + 32));
          v364 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
          if (v364)
            v364(FigBaseObject, CFSTR("SceneCompositionPreset"), v362);
        }
      }
      return LegibleOutputRenderChainsAndAttachToPrimary;
    }
  }
  else
  {
    LegibleOutputRenderChainsAndAttachToPrimary = 0;
  }
  v15 = a2[12];
  if (v15)
  {
    if (fpfsi_CanReuseRenderChainForTrack(v15, (uint64_t)a2))
      goto LABEL_588;
    fpfs_ReleaseTrackRenderChain(a2);
    if (*((_DWORD *)a2 + 8) == 1936684398)
      fpfs_PrepareAndEnqueueSpatialAudioRenderingChangedNotification(*(const void **)DerivedStorage, (const void *)*a2, v16, v17, v18, v19, v20, v21);
  }
  v22 = 0;
  while (kCommonTypes[v22] != *((_DWORD *)a2 + 8))
  {
    if (++v22 == 5)
      return FigSignalErrorAt();
  }
  if (v22 >= 5)
    return FigSignalErrorAt();
  v24 = CMBaseObjectGetDerivedStorage();
  v25 = *((_DWORD *)a2 + 8);
  v392 = (const __CFString *)v6;
  if (v25 == 1835365473)
  {
    v26 = *(_QWORD *)(v24 + 1040);
    if (!v26)
    {
LABEL_26:
      v27 = 0;
      goto LABEL_37;
    }
    while ((_QWORD *)v26 == a2 || !fpfsi_canTracksBeSyncPairsIgnoringDiscontinuity((uint64_t)a2, v26))
    {
      v26 = *(_QWORD *)(v26 + 8);
      if (!v26)
        goto LABEL_26;
    }
    v30 = (void **)(v26 + 96);
  }
  else
  {
    for (i = 0; i != 5; ++i)
    {
      if (kCommonTypes[i] == v25)
        break;
    }
    v30 = (void **)(v24 + 8 * i + 784);
  }
  v27 = *v30;
LABEL_37:
  v391 = (const void *)a1;
  if (a3)
  {
    v31 = *((_DWORD *)a2 + 8);
    goto LABEL_39;
  }
  CanReuseRenderChainForTrack = fpfsi_CanReuseRenderChainForTrack((uint64_t)v27, (uint64_t)a2);
  v31 = *((_DWORD *)a2 + 8);
  if (CanReuseRenderChainForTrack)
  {
    if (v31 == 1986618469 && *v27 == 1)
    {
      HasStarted = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines((uint64_t)v27, (uint64_t)CFSTR("Suspended"), *MEMORY[0x1E0C9AE50]);
      if ((_DWORD)HasStarted)
        v39 = (_DWORD)HasStarted == -12850;
      else
        v39 = 1;
      if (!v39)
        return HasStarted;
      LegibleOutputRenderChainsAndAttachToPrimary = 0;
    }
    a2[12] = v27;
    ++*v27;
    *((_BYTE *)a2 + 185) = 1;
    if (!*(_BYTE *)(v9 + 896) || a2[11])
      goto LABEL_211;
    v40 = *((_DWORD *)a2 + 8);
    if (v40 == 1835365473)
    {
      OutputDestinationForMetadata = fpfsi_createOutputDestinationForMetadata((uint64_t)a2);
    }
    else
    {
      if (v40 != 1986618469)
      {
LABEL_211:
        if (dword_1EE2A2A88)
        {
          LODWORD(values.value) = 0;
          LOBYTE(type[0]) = 0;
          v141 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT);
          v42 = (const void *)a1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          v42 = (const void *)a1;
        }
        goto LABEL_501;
      }
      OutputDestinationForMetadata = fpfsi_createOutputDestinationForVideo((uint64_t)a2);
    }
    LegibleOutputRenderChainsAndAttachToPrimary = OutputDestinationForMetadata;
    if ((_DWORD)OutputDestinationForMetadata)
      return LegibleOutputRenderChainsAndAttachToPrimary;
    goto LABEL_211;
  }
LABEL_39:
  if (v31 <= 1935832171)
  {
    if (v31 != 1668047728)
    {
      if (v31 != 1835365473)
        goto LABEL_93;
      v42 = (const void *)a1;
      if (fpfs_canSendMetadataTrackToVideoTargets(a1, (const opaqueCMFormatDescription *)a2[5])
        && *(_BYTE *)(v9 + 896))
      {
        HasStarted = fpfs_createMetadataRenderChainForDataQueue(a1, (uint64_t)v392, a2[5], &v393);
        if ((_DWORD)HasStarted)
          return HasStarted;
        v27 = v393;
        HasStarted = fpfsi_ensureTrackIsSetupToDeliverMetadataToVideoDestination((uint64_t)a2, (uint64_t)v393);
        if ((_DWORD)HasStarted)
          return HasStarted;
LABEL_465:
        if (v27)
          goto LABEL_466;
        return FigSignalErrorAt();
      }
      v385 = DerivedStorage;
      v27 = malloc_type_calloc(1uLL, 0x90uLL, 0x1060040EF867D01uLL);
      if (v27)
      {
        AllocatorForMedia = FigGetAllocatorForMedia();
        v74 = (const void **)(v27 + 4);
        SubtitleRenderPipeline = FigTimedMetadataRenderPipelineCreate(AllocatorForMedia, (uint64_t)fpfs_TimedDataRenderCallback, a1, (CFTypeRef *)v27 + 4);
        if ((_DWORD)SubtitleRenderPipeline)
          goto LABEL_594;
        v75 = *v74;
        v76 = FigGetAllocatorForMedia();
        v77 = FigRenderPipelineGetFigBaseObject(v75);
        v78 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v78)
        {
          v79 = v78(v77, CFSTR("SourceSampleBufferQueue"), v76, v27 + 5);
          if (!(_DWORD)v79)
          {
            v27[2] = FigFormatDescriptionRetain();
            *v27 = 1;
            v393 = (CFTypeRef *)v27;
            goto LABEL_101;
          }
          LegibleOutputRenderChainsAndAttachToPrimary = v79;
        }
        else
        {
          LegibleOutputRenderChainsAndAttachToPrimary = 4294954514;
        }
        v115 = *v74;
LABEL_206:
        CFRelease(v115);
LABEL_207:
        v140 = (CFTypeRef *)v27;
LABEL_208:
        free(v140);
        return LegibleOutputRenderChainsAndAttachToPrimary;
      }
      HasStarted = FigSignalErrorAt();
      if ((_DWORD)HasStarted)
        return HasStarted;
LABEL_101:
      v80 = (const void *)a2[5];
      v81 = (const __CFArray *)*a2;
      v82 = CMBaseObjectGetDerivedStorage();
      sizeOut[0].value = 0;
      v83 = FPSupport_CreateAndAddMetadataOutputRenderPipelinesForTrackWithID(*(_QWORD *)(v82 + 1872), *((_DWORD *)a2 + 4), sizeOut);
      v387 = v9;
      if ((_DWORD)v83)
      {
        LegibleOutputRenderChainsAndAttachToPrimary = v83;
      }
      else
      {
        if (CFArrayGetCount((CFArrayRef)sizeOut[0].value) >= 1)
        {
          v84 = 0;
          v85 = v27;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sizeOut[0].value, v84);
            v87 = malloc_type_calloc(1uLL, 0x90uLL, 0x1060040EF867D01uLL);
            v88 = v87;
            if (v87)
            {
              ++*v87;
              v87[4] = CFRetain(ValueAtIndex);
              v88[2] = CFRetain(v80);
              v89 = v88[4];
              v90 = FigGetAllocatorForMedia();
              v91 = FigRenderPipelineGetFigBaseObject(v89);
              v92 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
              if (!v92)
              {
                LegibleOutputRenderChainsAndAttachToPrimary = 4294954514;
LABEL_110:
                fpfs_releaseRenderChain(v81);
                goto LABEL_111;
              }
              v93 = v92(v91, CFSTR("SourceSampleBufferQueue"), v90, v88 + 5);
              if ((_DWORD)v93)
              {
                LegibleOutputRenderChainsAndAttachToPrimary = v93;
                goto LABEL_110;
              }
            }
            else
            {
              v94 = FigSignalErrorAt();
              if ((_DWORD)v94)
              {
                LegibleOutputRenderChainsAndAttachToPrimary = v94;
                goto LABEL_111;
              }
            }
            LegibleOutputRenderChainsAndAttachToPrimary = 0;
            v85[11] = v88;
            v85 = v88;
LABEL_111:
            if (++v84 >= CFArrayGetCount((CFArrayRef)sizeOut[0].value))
              goto LABEL_191;
          }
        }
        LegibleOutputRenderChainsAndAttachToPrimary = 0;
      }
LABEL_191:
      if (sizeOut[0].value)
        CFRelease((CFTypeRef)sizeOut[0].value);
      v9 = v387;
      v42 = v391;
      DerivedStorage = v385;
      if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
      {
LABEL_462:
        if (v27)
        {
          fpfs_releaseRenderChain(*a2);
          return LegibleOutputRenderChainsAndAttachToPrimary;
        }
      }
LABEL_464:
      if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
        return LegibleOutputRenderChainsAndAttachToPrimary;
      goto LABEL_465;
    }
    v64 = DerivedStorage;
    v65 = (const __CFArray *)*a2;
    v66 = (const opaqueCMFormatDescription *)a2[5];
    v67 = CMBaseObjectGetDerivedStorage();
    v68 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x90uLL, 0x1060040EF867D01uLL);
    if (!v68)
    {
      LegibleOutputRenderChainsAndAttachToPrimary = FigSignalErrorAt();
      v42 = (const void *)a1;
      DerivedStorage = v64;
      if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
        return LegibleOutputRenderChainsAndAttachToPrimary;
      goto LABEL_138;
    }
    keys.value = (CMTimeValue)CFSTR("SortSampleBufferQueueByOutputPTS");
    *(_QWORD *)&keys.timescale = 0;
    values.value = *MEMORY[0x1E0C9AE50];
    *(_QWORD *)&values.timescale = 0;
    v69 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v69)
    {
      v365 = FigSignalErrorAt();
      if ((_DWORD)v365)
      {
        LegibleOutputRenderChainsAndAttachToPrimary = v365;
        v140 = v68;
        goto LABEL_208;
      }
      v68 = 0;
      v42 = (const void *)a1;
      DerivedStorage = v64;
      goto LABEL_138;
    }
    v70 = v69;
    if (*(_BYTE *)(v67 + 462))
    {
      OctaviaClosedCaptionsRenderPipeline = FigCreateOctaviaClosedCaptionsRenderPipeline(v66, v69, *(const void **)(v67 + 488), v68 + 4);
      if (!(_DWORD)OctaviaClosedCaptionsRenderPipeline)
      {
        v72 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline((uint64_t)v68, *(double *)(v67 + 464), *(double *)(v67 + 472), *(_QWORD *)(v67 + 480), (uint64_t)v65);
        if ((_DWORD)v72)
        {
          LegibleOutputRenderChainsAndAttachToPrimary = v72;
LABEL_135:
          CFRelease(v68[4]);
LABEL_136:
          v42 = v391;
          DerivedStorage = v64;
          free(v68);
          v68 = 0;
LABEL_137:
          CFRelease(v70);
          if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
            return LegibleOutputRenderChainsAndAttachToPrimary;
LABEL_138:
          fpfs_associateCrossTalkerToRenderChain(DerivedStorage, (uint64_t)a2, (uint64_t)v68);
          LegibleOutputRenderChainsAndAttachToPrimary = fpfs_createLegibleOutputRenderChainsAndAttachToPrimary((uint64_t)v42, *a2);
          v27 = v393;
          if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
            goto LABEL_462;
          goto LABEL_464;
        }
LABEL_131:
        fpfs_prepareClosedCaptionRenderPipeline(a1, (uint64_t)v65, (uint64_t)v68[4]);
        v101 = v68[4];
        v102 = FigGetAllocatorForMedia();
        v103 = FigRenderPipelineGetFigBaseObject(v101);
        v104 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
        if (v104)
        {
          LegibleOutputRenderChainsAndAttachToPrimary = v104(v103, CFSTR("SourceSampleBufferQueue"), v102, v68 + 5);
          if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
          {
            v68[2] = (CFTypeRef)FigFormatDescriptionRetain();
            *v68 = (CFTypeRef)1;
            v393 = v68;
            v42 = v391;
            DerivedStorage = v64;
            goto LABEL_137;
          }
        }
        else
        {
          LegibleOutputRenderChainsAndAttachToPrimary = 4294954514;
        }
        goto LABEL_135;
      }
    }
    else
    {
      sizeOut[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      OctaviaClosedCaptionsRenderPipeline = FigCreateClosedCaptionRenderPipeline(v66, (uint64_t)fpfs_postClosedCaptionNotificationIfEnabled, (uint64_t)v65, 0, 0, (__int128 *)&sizeOut[0].value, v69, v68 + 4);
      if (!(_DWORD)OctaviaClosedCaptionsRenderPipeline)
        goto LABEL_131;
    }
    LegibleOutputRenderChainsAndAttachToPrimary = OctaviaClosedCaptionsRenderPipeline;
    goto LABEL_136;
  }
  if (v31 == 1935832172)
  {
    v43 = DerivedStorage;
    v44 = (const __CFArray *)*a2;
    v45 = (const opaqueCMFormatDescription *)a2[5];
    v46 = CMBaseObjectGetDerivedStorage();
    v27 = malloc_type_calloc(1uLL, 0x90uLL, 0x1060040EF867D01uLL);
    if (!v27)
    {
      HasStarted = FigSignalErrorAt();
      v42 = (const void *)a1;
      if ((_DWORD)HasStarted)
        return HasStarted;
LABEL_202:
      fpfs_associateCrossTalkerToRenderChain(DerivedStorage, (uint64_t)a2, (uint64_t)v27);
      LegibleOutputRenderChainsAndAttachToPrimary = fpfs_createLegibleOutputRenderChainsAndAttachToPrimary((uint64_t)v42, *a2);
      if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
        goto LABEL_462;
      goto LABEL_464;
    }
    v47 = CMBaseObjectGetDerivedStorage();
    v48 = v47;
    if (!*(_BYTE *)(v47 + 462))
    {
      v100 = *(_QWORD *)(v46 + 16);
      if (*(_BYTE *)(v47 + 460))
      {
        sizeOut[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        SubtitleRenderPipeline = FigCreateSubtitleRenderPipeline((uint64_t)v45, (uint64_t)fpfs_postSubtitleCallback, v100, 0, 0, 0, 0, 0, (__int128 *)&sizeOut[0].value, 0, (CFTypeRef *)v27 + 4);
        if ((_DWORD)SubtitleRenderPipeline)
          goto LABEL_594;
      }
      else
      {
        sizeOut[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        SubtitleRenderPipeline = FigCreateCaptionRenderPipeline((uint64_t)v45, (uint64_t)fpfs_postCaptionCallback, v100, 0, 0, 0, 0, 0, (__int128 *)&sizeOut[0].value, 0, (CFTypeRef *)v27 + 4);
        if ((_DWORD)SubtitleRenderPipeline)
          goto LABEL_594;
        v134 = v27[4];
        v135 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v135)
          v135(v134, CFSTR("ForedSubtitle"), *MEMORY[0x1E0C9AE50]);
      }
LABEL_198:
      v50 = fpfsi_prepareSubtitleRenderPipeline((uint64_t)v44, v27[4]);
      if ((_DWORD)v50)
        goto LABEL_593;
      v136 = v27[4];
      v137 = FigGetAllocatorForMedia();
      v138 = FigRenderPipelineGetFigBaseObject(v136);
      v139 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      v42 = v391;
      if (!v139)
      {
        LegibleOutputRenderChainsAndAttachToPrimary = 4294954514;
LABEL_205:
        v115 = (const void *)v27[4];
        goto LABEL_206;
      }
      v50 = v139(v138, CFSTR("SourceSampleBufferQueue"), v137, v27 + 5);
      if ((_DWORD)v50)
      {
LABEL_593:
        LegibleOutputRenderChainsAndAttachToPrimary = v50;
        goto LABEL_205;
      }
      v27[2] = FigFormatDescriptionRetain();
      *v27 = 1;
      v393 = (CFTypeRef *)v27;
      DerivedStorage = v43;
      goto LABEL_202;
    }
    SubtitleRenderPipeline = FigCreateOctaviaSubtitleRenderPipeline(v45, 0, *(const void **)(v47 + 488), (CFTypeRef *)v27 + 4);
    if (!(_DWORD)SubtitleRenderPipeline)
    {
      v50 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline((uint64_t)v27, *(double *)(v48 + 464), *(double *)(v48 + 472), *(_QWORD *)(v48 + 480), (uint64_t)v44);
      if ((_DWORD)v50)
        goto LABEL_593;
      goto LABEL_198;
    }
LABEL_594:
    LegibleOutputRenderChainsAndAttachToPrimary = SubtitleRenderPipeline;
    goto LABEL_207;
  }
  if (v31 != 1936684398)
  {
    if (v31 == 1986618469)
    {
      if (*(_BYTE *)(v9 + 896))
      {
        if (!a2[11])
        {
          HasStarted = fpfsi_createOutputDestinationForVideo((uint64_t)a2);
          if ((_DWORD)HasStarted)
            return HasStarted;
        }
      }
      v32 = *(_DWORD *)(v9 + 576);
      v33 = CMBaseObjectGetDerivedStorage();
      v34 = (const __CFArray *)*a2;
      v35 = CMBaseObjectGetDerivedStorage();
      values.value = 0;
      v36 = *(const __CFArray **)(v33 + 384);
      v373 = v32;
      if (v36)
        Count = CFArrayGetCount(v36);
      else
        Count = 0;
      type[0] = 0;
      v396.value = 0;
      v379 = fpfsi_copyPreviousImageQueueGauge(v34);
      v96 = (const void *)*MEMORY[0x1E0C9AE40];
      v399 = 0;
      v400 = v96;
      allocatora = (CFAllocatorRef)a2[48];
      v97 = *((unsigned __int8 *)a2 + 456);
      if (!fpfs_CanRenderVideo(v33, (uint64_t)v34))
      {
        LegibleOutputRenderChainsAndAttachToPrimary = FigSignalErrorAt();
        v42 = v391;
        goto LABEL_398;
      }
      v98 = *(const __CFArray **)(v35 + 856);
      v383 = (uint64_t)v34;
      v366 = Count;
      if (v98)
        v98 = (const __CFArray *)CFArrayGetCount(v98);
      v99 = FPSupport_CopyDestinationPixelBufferAttributesWithIOSurfaceSupport(*(CFDictionaryRef *)(v33 + 584), (uint64_t)v98 > 0, (CFDictionaryRef *)&values);
      if ((_DWORD)v99)
      {
        LegibleOutputRenderChainsAndAttachToPrimary = v99;
        goto LABEL_611;
      }
      if (*(_BYTE *)(v33 + 462))
      {
        fpfs_cleanupAllImageQueues(v34, 0);
        fpfs_releaseTransitionImageQueuesAndSlots();
      }
      else
      {
        v105 = fpfsi_addCAImageQueuesAndSlots(v34, (uint64_t)a2, *(_QWORD *)(v33 + 400) > 0);
        if ((_DWORD)v105)
        {
LABEL_610:
          LegibleOutputRenderChainsAndAttachToPrimary = v105;
          CFRelease((CFTypeRef)values.value);
LABEL_611:
          v132 = v391;
          v133 = v379;
          if (!v379)
            goto LABEL_397;
          goto LABEL_396;
        }
      }
      v381 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x90uLL, 0x1060040EF867D01uLL);
      if (v381)
      {
        v106 = (const __CFAllocator *)FigGetAllocatorForMedia();
        if (v391)
          v107 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v107 = "";
        if (v383)
          v108 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v108 = "";
        v109 = CFStringCreateWithFormat(v106, 0, CFSTR("%s:%s.t%d"), v107, v108, a2[2]);
        v110 = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFDictionaryCreateMutable(v110, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
        {
          LegibleOutputRenderChainsAndAttachToPrimary = FigSignalErrorAt();
          v132 = v391;
          v133 = v379;
          goto LABEL_393;
        }
        v112 = Mutable;
        v113 = *(_DWORD *)(v33 + 592);
        if (v113 == 2)
        {
          v114 = v96;
        }
        else
        {
          if (v113 != 1)
            goto LABEL_156;
          v114 = (const void *)*MEMORY[0x1E0C9AE50];
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCA8], v114);
LABEL_156:
        v377 = (__CFString *)v109;
        if (*(_BYTE *)(v33 + 872))
          CFDictionarySetValue(v112, (const void *)*MEMORY[0x1E0CEDC88], (const void *)*MEMORY[0x1E0C9AE50]);
        v386 = DerivedStorage;
        v388 = v9;
        v116 = *(const void **)(v33 + 600);
        if (v116)
          CFDictionarySetValue(v112, (const void *)*MEMORY[0x1E0CEDCB8], v116);
        v117 = CMBaseObjectGetDerivedStorage();
        v118 = CMBaseObjectGetDerivedStorage();
        sizeOut[0].value = 0;
        v119 = a2[11];
        if (*(_BYTE *)(v118 + 896))
        {
          v120 = *(uint64_t (**)(uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 24);
          if (!v120)
          {
            LegibleOutputRenderChainsAndAttachToPrimary = 4294954514;
            goto LABEL_189;
          }
          v370 = v96;
          VideoRenderPipeline = v120(v119, &v399, 0);
          if ((_DWORD)VideoRenderPipeline)
          {
LABEL_617:
            LegibleOutputRenderChainsAndAttachToPrimary = VideoRenderPipeline;
            goto LABEL_189;
          }
        }
        else
        {
          v122 = *(_QWORD *)(v117 + 720);
          v370 = v96;
          if (!v122)
          {
            v123 = (const __CFAllocator *)FigGetAllocatorForMedia();
            FigImageQueueTableCreate(v123, (_QWORD *)(v117 + 720));
            v122 = *(_QWORD *)(v117 + 720);
            if (!v122)
            {
              LegibleOutputRenderChainsAndAttachToPrimary = FigSignalErrorAt();
              if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
                goto LABEL_189;
LABEL_298:
              if (v97)
                v208 = 0;
              else
                v208 = (const void *)a2[5];
              v209 = v381 + 4;
              VideoRenderPipeline = FPSupport_createVideoRenderPipeline((int)v112, (const void *)values.value, 1, (const __CFArray *)type[0], (const __CFArray *)v396.value, 1, v208, v373, *(_BYTE *)(v33 + 462), *(const void **)(v33 + 488), *(const void **)(v33 + 624), *(_DWORD *)(v33 + 564), 0, v377, v381 + 4);
              if ((_DWORD)VideoRenderPipeline)
                goto LABEL_617;
              NextRenderPipelineIdentifierString = fpfs_createNextRenderPipelineIdentifierString();
              if (!NextRenderPipelineIdentifierString)
              {
                LegibleOutputRenderChainsAndAttachToPrimary = FigSignalErrorAt();
                v9 = v388;
                v132 = v391;
                DerivedStorage = v386;
                v109 = v377;
                v133 = v379;
                v131 = 0;
                if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
                  goto LABEL_385;
                goto LABEL_384;
              }
              v210 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
              if (*(_BYTE *)(v33 + 912))
              {
                sizeOut[0].value = 0;
                v211 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                FigCFDictionarySetValue();
                v212 = (const __CFAllocator *)FigGetAllocatorForMedia();
                v213 = *v209;
                FigGetDefaultLowWaterDurationForSpeedRampRenderPipelines(&keys);
                LegibleOutputRenderChainsAndAttachToPrimary = FigSpeedRampRenderPipelineCreate(v212, v213, &keys, v211, (void **)sizeOut);
                if (sizeOut[0].value)
                {
                  v214 = v210;
                  v215 = *(_QWORD *)(v35 + 3344);
                  v216 = FigRenderPipelineGetFigBaseObject(sizeOut[0].value);
                  v217 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
                  if (v217)
                    v217(v216, CFSTR("SpeedRampData"), v215);
                  v218 = *v209;
                  value = (const void *)sizeOut[0].value;
                  *v209 = (CFTypeRef)sizeOut[0].value;
                  if (value)
                    CFRetain(value);
                  v210 = v214;
                  if (v218)
                    CFRelease(v218);
                  if (sizeOut[0].value)
                    CFRelease((CFTypeRef)sizeOut[0].value);
                }
                if (v211)
                  CFRelease(v211);
                if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
                {
                  v9 = v388;
                  v132 = v391;
                  DerivedStorage = v386;
                  v109 = v377;
                  v133 = v379;
                  v131 = NextRenderPipelineIdentifierString;
                  goto LABEL_384;
                }
              }
              fpfsi_updateFigImageQueueListeners(v383, (uint64_t)a2);
              if (*(int *)(v33 + 564) < 1)
              {
                cfa = 0;
              }
              else
              {
                SInt32 = FigCFNumberCreateSInt32();
                v221 = FigRenderPipelineGetFigBaseObject(*v209);
                v222 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                cfa = (CFTypeRef)SInt32;
                if (v222)
                  v222(v221, CFSTR("ClientPID"), SInt32);
              }
              v223 = (const void *)a2[7];
              if (v223)
              {
                valuePtr = 0;
                FigGetCGAffineTransformFrom3x3MatrixArray(v223, (uint64_t)sizeOut);
                valuePtr = FigGetRotationAngleAndFlipsFromCGAffineTransform((double *)&sizeOut[0].value, 0, 0);
                v224 = CFNumberCreate(*v210, kCFNumberIntType, &valuePtr);
                v225 = FigRenderPipelineGetFigBaseObject(*v209);
                v226 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                if (v226)
                  v226(v225, CFSTR("Rotation"), v224);
                if (v224)
                  CFRelease(v224);
              }
              v227 = *(unsigned __int8 *)(v33 + 408);
              v228 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
              v229 = FigRenderPipelineGetFigBaseObject(*v209);
              v230 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
              if (v230)
              {
                if (v227)
                  v231 = v228;
                else
                  v231 = v370;
                v230(v229, CFSTR("PreventDisplaySleepDuringVideoPlayback"), v231);
              }
              if (v379)
              {
                if (!*((_BYTE *)a2 + 184))
                {
                  v232 = FigRenderPipelineGetFigBaseObject(*v209);
                  v233 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                  if (v233)
                    v233(v232, CFSTR("PriorImageQueueGauge"), v379);
                }
              }
              v234 = *(_QWORD *)(v35 + 704);
              if (v234)
              {
                v235 = FigRenderPipelineGetFigBaseObject(*v209);
                v236 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                if (v236)
                  v236(v235, CFSTR("VideoEnhancementMode"), v234);
              }
              v237 = *(const __CFArray **)(v35 + 656);
              if (v237)
              {
                v238 = CFArrayGetCount(v237);
                if (v238 >= 1)
                {
                  v239 = v238;
                  if (allocatora)
                    FPSupport_IsRunningInAppleVirtualMachine();
                  for (j = 0; j != v239; ++j)
                  {
                    CFArrayGetValueAtIndex(*(CFArrayRef *)(v35 + 656), j);
                    CAImageQueueSetFlags();
                  }
                }
              }
              v241 = *v209;
              v242 = FigGetAllocatorForMedia();
              v243 = FigRenderPipelineGetFigBaseObject(v241);
              v244 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
              if (v244)
              {
                v245 = v244(v243, CFSTR("SourceSampleBufferQueue"), v242, v381 + 5);
                if (!(_DWORD)v245)
                {
                  CMNotificationCenterGetDefaultLocalCenter();
                  FigNotificationCenterAddWeakListener();
                  CMNotificationCenterGetDefaultLocalCenter();
                  FigNotificationCenterAddWeakListener();
                  CMNotificationCenterGetDefaultLocalCenter();
                  FigNotificationCenterAddWeakListener();
                  CMNotificationCenterGetDefaultLocalCenter();
                  FigNotificationCenterAddWeakListener();
                  v133 = v379;
                  if (v366 > 0 || *(_QWORD *)(v35 + 696))
                  {
                    if (v383 == *(_QWORD *)(v33 + 80))
                      fpfs_createOrUpdateLayerSync((uint64_t)v391);
                    if (!*(_QWORD *)(v35 + 688))
                      FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)fpfsi_syncMomentSourceCallback, v383, *(const void **)(v35 + 576), *(NSObject **)(v35 + 600), (uint64_t *)(v35 + 688));
                  }
                  v246 = *(_QWORD *)(v33 + 480);
                  v247 = FigRenderPipelineGetFigBaseObject(*v209);
                  v248 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
                  if (v248)
                    v248(v247, CFSTR("NeroVideoGravity"), v246);
                  if (*(_BYTE *)(v33 + 462))
                    fpfs_UpdateNeroPlaybackActiveStateAndNotifyIfNeeded(v391, v383, 1);
                  v249 = a2[6];
                  v250 = FigGetAllocatorForMedia();
                  v251 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
                  if (v251)
                    v251(v249, CFSTR("FMFD_IsCollectingMetaData"), v250, &v400);
                  if (v400 == v228)
                  {
                    v266 = *(_QWORD *)(v35 + 3384);
                    if (v266)
                    {
                      v267 = FigRenderPipelineGetFigBaseObject(*v209);
                      v268 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 56);
                      if (v268)
                        v268(v267, CFSTR("SampleAttachmentCollectionRules"), v266);
                    }
                  }
                  if (*v209)
                  {
                    v252 = *(_QWORD *)(v35 + 2528);
                    if (v252)
                    {
                      v253 = FigRenderPipelineGetFigBaseObject(*v209);
                      v254 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 56);
                      if (v254)
                        v254(v253, CFSTR("PlaybackSessionID"), v252);
                      v255 = *(_QWORD *)(v35 + 2536);
                      if (v255)
                      {
                        v256 = *(_QWORD *)(v35 + 2528);
                        v257 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                        if (v257)
                          v257(v255, CFSTR("playerStats"), CFSTR("PowerLogID"), v256, 0);
                      }
                    }
                  }
                  v258 = *(float *)(v33 + 108);
                  v259 = FigRenderPipelineGetFigBaseObject(*v209);
                  v260 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                  if (v260)
                  {
                    if (v258 >= 0.0 && v258 <= 2.0 && v258 > 1.0)
                      v263 = v228;
                    else
                      v263 = v370;
                    v260(v259, CFSTR("AllowVideoQualityOfServiceAdjustments"), v263);
                  }
                  LegibleOutputRenderChainsAndAttachToPrimary = 0;
                  v381[2] = (CFTypeRef)FigFormatDescriptionRetain();
                  *v381 = (CFTypeRef)1;
                  ++*(_QWORD *)(v33 + 616);
                  v393 = v381;
                  v9 = v388;
                  v132 = v391;
                  DerivedStorage = v386;
                  v131 = NextRenderPipelineIdentifierString;
                  v109 = v377;
                  v264 = cfa;
                  goto LABEL_381;
                }
                LegibleOutputRenderChainsAndAttachToPrimary = v245;
              }
              else
              {
                LegibleOutputRenderChainsAndAttachToPrimary = 4294954514;
              }
              v132 = v391;
              DerivedStorage = v386;
              v133 = v379;
              v131 = NextRenderPipelineIdentifierString;
              v264 = cfa;
              if (*v209)
                CFRelease(*v209);
              v9 = v388;
              v109 = v377;
LABEL_381:
              if (v264)
                CFRelease(v264);
              if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
                goto LABEL_385;
              goto LABEL_384;
            }
          }
          FigImageQueueTableCopyFigImageQueueArray(v122, (uint64_t *)&v399);
        }
        fpfs_CreateFigImageQueueOutputsArray(*a2, (uint64_t)a2, (CFTypeRef *)sizeOut);
        v124 = (const void *)sizeOut[0].value;
        if (!sizeOut[0].value)
          goto LABEL_298;
        if (v119)
        {
          RenderingTrackofType = fpfs_LastRenderingTrackofType(*a2, 1986618469, (uint64_t)a2);
          if (RenderingTrackofType)
            v126 = *(_QWORD *)(RenderingTrackofType + 88);
          else
            v126 = 0;
          v142 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
          if (v142)
          {
            v143 = v142(v119, v126, v124);
            if ((_DWORD)v143)
            {
LABEL_219:
              LegibleOutputRenderChainsAndAttachToPrimary = v143;
              goto LABEL_297;
            }
            v144 = *(uint64_t (**)(uint64_t, CFTypeRef *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
            if (v144)
            {
              v143 = v144(v119, type, &v396);
              goto LABEL_219;
            }
          }
          LegibleOutputRenderChainsAndAttachToPrimary = 4294954514;
        }
        else
        {
          v130 = *(_QWORD *)(v117 + 720);
          if (v130)
          {
            LegibleOutputRenderChainsAndAttachToPrimary = FigImageQueueTableUpdateToMatchOutputsArray(v130, (const __CFArray *)sizeOut[0].value, 0, 0, 0, 0);
            if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
              FigImageQueueTableCopyFigImageQueueArray(*(_QWORD *)(v117 + 720), (uint64_t *)type);
          }
          else
          {
            LegibleOutputRenderChainsAndAttachToPrimary = 0;
          }
        }
LABEL_297:
        CFRelease(v124);
        if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
          goto LABEL_298;
LABEL_189:
        v131 = 0;
        v9 = v388;
        v132 = v391;
        DerivedStorage = v386;
        v109 = v377;
        v133 = v379;
LABEL_384:
        free(v381);
LABEL_385:
        CFRelease(v112);
        if (type[0])
          CFRelease(type[0]);
        if (v396.value)
          CFRelease((CFTypeRef)v396.value);
        if (v399)
          CFRelease(v399);
        if (v131)
          CFRelease(v131);
LABEL_393:
        CFRelease((CFTypeRef)values.value);
        if (v109)
          CFRelease(v109);
        if (!v133)
          goto LABEL_397;
LABEL_396:
        CFRelease(v133);
LABEL_397:
        v42 = v132;
LABEL_398:
        if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
          return LegibleOutputRenderChainsAndAttachToPrimary;
        v27 = v393;
        fpfs_associateCrossTalkerToRenderChain(DerivedStorage, (uint64_t)a2, (uint64_t)v393);
        v265 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines((uint64_t)v393, (uint64_t)CFSTR("Suspended"), *MEMORY[0x1E0C9AE50]);
        if (v265 == -12850)
          LegibleOutputRenderChainsAndAttachToPrimary = 0;
        else
          LegibleOutputRenderChainsAndAttachToPrimary = v265;
        if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
          goto LABEL_464;
        goto LABEL_462;
      }
      v105 = FigSignalErrorAt();
      goto LABEL_610;
    }
LABEL_93:
    if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
      return LegibleOutputRenderChainsAndAttachToPrimary;
    return FigSignalErrorAt();
  }
  v51 = *(_DWORD *)(v9 + 572);
  cf = *(CFTypeRef *)(DerivedStorage + 1800);
  v369 = *(_QWORD *)(DerivedStorage + 872);
  v384 = DerivedStorage;
  valuePtr = *(_DWORD *)(DerivedStorage + 880);
  v400 = 0;
  v382 = CMBaseObjectGetDerivedStorage();
  v52 = CMBaseObjectGetDerivedStorage();
  v374 = (const void *)a2[5];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v53 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  v54 = *(unsigned __int8 *)(v52 + 771);
  if (*(double *)(v52 + 2048) == 0.0)
    *(CFAbsoluteTime *)(v52 + 2048) = CFAbsoluteTimeGetCurrent();
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v56 = *(_QWORD *)(v52 + 2064);
  if (v56)
  {
    v57 = *(_QWORD *)(v52 + 2536);
    if (v57)
    {
      v58 = UpTimeNanoseconds;
      v59 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 56);
      if (v59)
        v59(v57, CFSTR("startupStats"), CFSTR("tfac2RPCreate"), (v58 - v56) / 0xF4240uLL, 0);
    }
  }
  if (v53)
  {
    v376 = v53;
    v380 = (__CFString *)fpfs_createNextRenderPipelineIdentifierString();
    if (!v380)
    {
      LegibleOutputRenderChainsAndAttachToPrimary = FigSignalErrorAt();
      v27 = 0;
      DerivedStorage = v384;
      goto LABEL_457;
    }
    ShouldEnableSpatializationForTrack = fpfs_ShouldEnableSpatializationForTrack(a2);
    v60 = (const opaqueCMFormatDescription *)a2[5];
    MediaSubType = CMFormatDescriptionGetMediaSubType(v60);
    v62 = 0;
    if (MediaSubType > 1885692722)
    {
      if (MediaSubType <= 1902469938)
      {
        if (MediaSubType != 1885692723)
        {
          v63 = 1902324531;
LABEL_177:
          if (MediaSubType != v63)
          {
LABEL_228:
            CMBaseObjectGetDerivedStorage();
            v146 = CMBaseObjectGetDerivedStorage();
            LODWORD(sizeOut[0].value) = 0;
            if (*((_DWORD *)a2 + 8) == 1936684398)
            {
              v147 = *(const void **)(v146 + 176);
              v148 = fpfs_WantAudioHardwarePassthroughForTrack((uint64_t)a2, (int *)sizeOut);
            }
            else
            {
              v148 = 0;
              v147 = 0;
            }
            v149 = (const __CFAllocator *)FigGetAllocatorForMedia();
            v150 = *(void **)(v382 + 536);
            sizeOut[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
            keys = sizeOut[0];
            RenderPipelineOptions = FPSupport_createRenderPipelineOptions(v149, v374, v51, (uint64_t)sizeOut, (uint64_t)&keys, v147, 0, 0, v148, 1, 0, v62, ShouldEnableSpatializationForTrack, v54 == 0, 0, 0, v150, 0, v380,
                                      (__CFDictionary **)&v400);
            if ((_DWORD)RenderPipelineOptions)
            {
              LegibleOutputRenderChainsAndAttachToPrimary = RenderPipelineOptions;
              v27 = 0;
              DerivedStorage = v384;
LABEL_456:
              CFRelease(v380);
LABEL_457:
              CFRelease(v376);
              goto LABEL_458;
            }
            v27 = malloc_type_calloc(1uLL, 0x90uLL, 0x1060040EF867D01uLL);
            if (!v27)
            {
              LegibleOutputRenderChainsAndAttachToPrimary = FigSignalErrorAt();
              DerivedStorage = v384;
LABEL_454:
              if (v400)
                CFRelease(v400);
              goto LABEL_456;
            }
            v152 = (_BYTE *)v382;
            if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
            {
              v153 = CMBaseObjectGetDerivedStorage();
              sizeOut[0].value = 0;
              FigGetAllocatorForMedia();
              MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
              if (MutableCopy)
              {
                v155 = MutableCopy;
                if (*(_QWORD *)(v153 + 504))
                {
                  v27[4] = 0;
                  v156 = *(const void **)(v153 + 536);
                  if (v156)
                    CFDictionarySetValue(MutableCopy, CFSTR("AudioSession"), v156);
                  v157 = (const __CFAllocator *)FigGetAllocatorForMedia();
                  LegibleOutputRenderChainsAndAttachToPrimary = FigBufferedAirPlayAudioRenderPipelineCreate(v157, *(const void **)(v153 + 504), v155, &sizeOut[0].value);
                  if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
                  {
                    v27[4] = sizeOut[0].value;
                    sizeOut[0].value = 0;
                  }
                }
                else
                {
                  LegibleOutputRenderChainsAndAttachToPrimary = 0;
                }
                CFRelease(v155);
                if (sizeOut[0].value)
                  CFRelease((CFTypeRef)sizeOut[0].value);
              }
              else
              {
                LegibleOutputRenderChainsAndAttachToPrimary = FigSignalErrorAt();
              }
              v158 = MEMORY[0x1E0CA2E50];
              v159 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
              *((_OWORD *)v27 + 6) = *MEMORY[0x1E0CA2E50];
              *((_OWORD *)v27 + 7) = v159;
              *((_OWORD *)v27 + 8) = *(_OWORD *)(v158 + 32);
            }
            else
            {
              v160 = (const __CFAllocator *)FigGetAllocatorForMedia();
              LegibleOutputRenderChainsAndAttachToPrimary = FigAudioQueueRenderPipelineCreate(v160, (const __CFDictionary *)v400, v27 + 4);
            }
            if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
              goto LABEL_592;
            if (*(_BYTE *)(v382 + 912))
            {
              sizeOut[0].value = 0;
              v161 = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              FigCFDictionarySetValue();
              v162 = (const __CFAllocator *)FigGetAllocatorForMedia();
              v163 = (const void *)v27[4];
              FigGetDefaultLowWaterDurationForSpeedRampRenderPipelines(&values);
              LegibleOutputRenderChainsAndAttachToPrimary = FigSpeedRampRenderPipelineCreate(v162, v163, &values, v161, (void **)sizeOut);
              if (sizeOut[0].value)
              {
                v164 = *(_QWORD *)(v52 + 3344);
                v165 = FigRenderPipelineGetFigBaseObject(sizeOut[0].value);
                v166 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
                if (v166)
                  v166(v165, CFSTR("SpeedRampData"), v164);
                v167 = (const void *)v27[4];
                v168 = (const void *)sizeOut[0].value;
                v27[4] = sizeOut[0].value;
                if (v168)
                  CFRetain(v168);
                if (v167)
                  CFRelease(v167);
                if (sizeOut[0].value)
                  CFRelease((CFTypeRef)sizeOut[0].value);
              }
              if (v161)
                CFRelease(v161);
              if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
              {
LABEL_592:
                v186 = 0;
                DerivedStorage = v384;
LABEL_453:
                free(v27);
                v27 = v186;
                goto LABEL_454;
              }
            }
            v389 = v9;
            if (dword_1EE2A2A88)
            {
              LODWORD(type[0]) = 0;
              LOBYTE(v396.value) = 0;
              v169 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v170 = FigGetUpTimeNanoseconds();
            v171 = *(_QWORD *)(v52 + 2064);
            if (v171)
            {
              v172 = *(_QWORD *)(v52 + 2536);
              if (v172)
              {
                v173 = v170;
                v174 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                if (v174)
                  v174(v172, CFSTR("startupStats"), CFSTR("tfac2RPCreateEnd"), (v173 - v171) / 0xF4240uLL, 0);
              }
            }
            v175 = v27[4];
            v176 = FigGetAllocatorForMedia();
            v177 = FigRenderPipelineGetFigBaseObject(v175);
            v178 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
            if (v178)
            {
              v179 = v178(v177, CFSTR("SourceSampleBufferQueue"), v176, v27 + 5);
              if (!(_DWORD)v179)
              {
                v180 = v27[4];
                v181 = FigGetAllocatorForMedia();
                v182 = v27 + 6;
                v183 = FigRenderPipelineGetFigBaseObject(v180);
                v184 = *(void (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
                if (v184)
                  v184(v183, CFSTR("SourceSampleBufferConsumer"), v181, v27 + 6);
                if (!*v182)
                {
                  v185 = v27[5];
                  CMTimeMake((CMTime *)type, 5, 1);
                  CMTimeMake(&v396, 3, 1);
                  if (FigSampleBufferConsumerCreateForBufferQueue(v185, (uint64_t)type, (uint64_t)&v396, v27 + 6)|| !*v182)
                  {
                    FigSignalErrorAt();
                  }
                }
                v187 = *(const __CFString **)(v382 + 184);
                v188 = FigRenderPipelineGetFigBaseObject(v27[4]);
                v189 = *(void (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 56);
                if (v189)
                {
                  if (v187)
                    v190 = v187;
                  else
                    v190 = CFSTR("Unknown figplayer");
                  v189(v188, CFSTR("ClientName"), v190);
                }
                v191 = *(_QWORD *)(v382 + 176);
                if (v191)
                {
                  v192 = FigRenderPipelineGetFigBaseObject(v27[4]);
                  v193 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
                  if (v193)
                    v193(v192, CFSTR("AudioDeviceUID"), v191);
                }
                v194 = FigRenderPipelineGetFigBaseObject(v27[4]);
                v195 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
                if (v195)
                  v195(v194, CFSTR("AudioDeviceChannelMap"), cf);
                v196 = *MEMORY[0x1E0C9AE50];
                v197 = FigRenderPipelineGetFigBaseObject(v27[4]);
                v198 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                if (v198)
                  v198(v197, CFSTR("HandleFormatDescriptionChanges"), v196);
                v199 = *(_QWORD *)(v382 + 192);
                if (v199)
                {
                  v200 = FigRenderPipelineGetFigBaseObject(v27[4]);
                  v201 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
                  if (v201)
                    v201(v200, CFSTR("STSLabel"), v199);
                }
                v202 = *(_QWORD *)(v382 + 536);
                if (!v202)
                  goto LABEL_295;
                v399 = 0;
                v203 = FigGetAllocatorForMedia();
                v204 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                if (v204)
                {
                  v205 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(v204 + 48);
                  if (v205)
                    v205(v202, *MEMORY[0x1E0D494D0], v203, &v399);
                }
                v206 = v399;
                if (v399)
                {
                  if (dword_1EE2A2A88)
                  {
                    *(_DWORD *)v395 = 0;
                    v394 = OS_LOG_TYPE_DEFAULT;
                    v207 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v206 = v399;
                  }
                  v269 = FigRenderPipelineGetFigBaseObject(v27[4]);
                  v270 = *(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 56);
                  if (v270)
                    LegibleOutputRenderChainsAndAttachToPrimary = v270(v269, CFSTR("AllowedToUseHardware"), v206);
                  else
                    LegibleOutputRenderChainsAndAttachToPrimary = 4294954514;
                  if (v399)
                    CFRelease(v399);
                }
                else
                {
LABEL_295:
                  LegibleOutputRenderChainsAndAttachToPrimary = 0;
                }
                v271 = (const __CFArray *)*a2;
                v272 = CMBaseObjectGetDerivedStorage();
                v273 = CMBaseObjectGetDerivedStorage();
                if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
                {
                  if (*(const __CFArray **)(v272 + 80) == v271 && !*(_BYTE *)(v272 + 842) && !*(_QWORD *)(v273 + 3200))
                  {
                    v274 = FigRenderPipelineGetFigBaseObject(v27[4]);
                    v275 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                    if (v275)
                      v275(v274, CFSTR("AllowsPrebuffering"), v196);
                  }
                }
                if (dword_1EE2A2A88)
                {
                  LODWORD(v399) = 0;
                  v395[0] = OS_LOG_TYPE_DEFAULT;
                  v276 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v277 = v399;
                  if (os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT))
                    v278 = v277;
                  else
                    v278 = v277 & 0xFFFFFFFE;
                  if (v278)
                  {
                    if (v391)
                      v279 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                    else
                      v279 = "";
                    v280 = (const __CFArray *)*a2;
                    if (*a2)
                      v281 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                    else
                      v281 = "";
                    LODWORD(keys.value) = 136316674;
                    *(CMTimeValue *)((char *)&keys.value + 4) = (CMTimeValue)"fpfs_createAudioRenderChain";
                    LOWORD(keys.flags) = 2048;
                    *(_QWORD *)((char *)&keys.flags + 2) = v391;
                    HIWORD(keys.epoch) = 2082;
                    v402 = v279;
                    v403 = 2048;
                    v404 = v280;
                    v405 = 2082;
                    v406 = v281;
                    v407 = 2114;
                    *(_QWORD *)v408 = v369;
                    *(_WORD *)&v408[8] = 2114;
                    *(_QWORD *)&v408[10] = v376;
                    _os_log_send_and_compose_impl();
                    v152 = (_BYTE *)v382;
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                v282 = FigRenderPipelineGetFigBaseObject(v27[4]);
                v283 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                if (v283)
                  v283(v282, CFSTR("TimePitchAlgorithm"), v369);
                v284 = FigRenderPipelineGetFigBaseObject(v27[4]);
                v285 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                v9 = v389;
                if (v285)
                  v285(v284, CFSTR("PipelineRate"), v376);
                if (!v152[521] && !v152[522])
                  v196 = *MEMORY[0x1E0C9AE40];
                v286 = FigRenderPipelineGetFigBaseObject(v27[4]);
                v287 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                if (v287)
                  v287(v286, CFSTR("Muted"), v196);
                v288 = *(_QWORD *)(v52 + 3112);
                v289 = FigRenderPipelineGetFigBaseObject(v27[4]);
                v290 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                if (v290)
                  v290(v289, CFSTR("AudioProcessingUnits"), v288);
                v291 = *(_QWORD *)(v52 + 3120);
                v292 = FigRenderPipelineGetFigBaseObject(v27[4]);
                v293 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                if (v293)
                  v293(v292, CFSTR("SecondaryAudioCurves"), v291);
                v294 = *(_QWORD *)(v52 + 3128);
                v295 = FigRenderPipelineGetFigBaseObject(v27[4]);
                v296 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                if (v296)
                  v296(v295, CFSTR("AudioQueueClockDevice"), v294);
                if (v152[462])
                {
                  v297 = FigRenderPipelineGetFigBaseObject(v27[4]);
                  v298 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
                  if (v298)
                    v298(v297, CFSTR("ShouldCompensateForNeroScreenLatency"), *MEMORY[0x1E0C9AE40]);
                }
                fpfsi_RTCReportingUpdateAudioInfo(v52, (uint64_t)a2);
                fpfsi_RTCReportingUpdateAudioSpatialization(v52, ShouldEnableSpatializationForTrack);
                v27[2] = FigFormatDescriptionRetain();
                *v27 = 1;
                v393 = (CFTypeRef *)v27;
                v186 = v27;
                DerivedStorage = v384;
                if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
                  goto LABEL_454;
                goto LABEL_451;
              }
              LegibleOutputRenderChainsAndAttachToPrimary = v179;
              v186 = 0;
            }
            else
            {
              v186 = 0;
              LegibleOutputRenderChainsAndAttachToPrimary = 4294954514;
            }
            DerivedStorage = v384;
LABEL_451:
            v299 = (const void *)v27[4];
            if (v299)
              CFRelease(v299);
            goto LABEL_453;
          }
          goto LABEL_224;
        }
LABEL_179:
        sizeOut[0].value = 0;
        FormatList = CMAudioFormatDescriptionGetFormatList(v60, (size_t *)sizeOut);
        if (!FormatList || sizeOut[0].value <= 0x2FuLL)
          goto LABEL_226;
        mFormatID = FormatList->mASBD.mFormatID;
        if (mFormatID <= 1885547314)
        {
          if (mFormatID == 1667574579)
            goto LABEL_224;
          v129 = 1700997939;
        }
        else
        {
          if (mFormatID == 1885547315 || mFormatID == 1902324531)
            goto LABEL_224;
          v129 = 2053319475;
        }
        if (mFormatID != v129)
        {
LABEL_226:
          v62 = 0;
          goto LABEL_228;
        }
LABEL_224:
        LODWORD(sizeOut[0].value) = ShouldEnableSpatializationForTrack;
        AtmosDecodePolicy = fpfsi_GetAtmosDecodePolicy(*a2, sizeOut);
        v62 = AtmosDecodePolicy;
        if (AtmosDecodePolicy)
          FPSupport_IsDisplayModeSwitchInProgress();
        else
          CMBaseObjectGetDerivedStorage();
        goto LABEL_228;
      }
      if (MediaSubType == 2053464883)
        goto LABEL_179;
      if (MediaSubType == 2053319475)
        goto LABEL_224;
      v95 = 1902469939;
    }
    else
    {
      if (MediaSubType > 1700997938)
      {
        if (MediaSubType == 1700997939)
          goto LABEL_224;
        if (MediaSubType != 1700998451)
        {
          v63 = 1885547315;
          goto LABEL_177;
        }
        goto LABEL_179;
      }
      if (MediaSubType == 1667574579)
        goto LABEL_224;
      v95 = 1667575091;
    }
    if (MediaSubType != v95)
      goto LABEL_228;
    goto LABEL_179;
  }
  LegibleOutputRenderChainsAndAttachToPrimary = FigSignalErrorAt();
  v27 = 0;
  DerivedStorage = v384;
LABEL_458:
  if (*(double *)(v52 + 2040) == 0.0)
    *(CFAbsoluteTime *)(v52 + 2040) = CFAbsoluteTimeGetCurrent();
  if ((_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
  {
    v42 = v391;
    goto LABEL_462;
  }
  v325 = CFNumberCreate(allocator, kCFNumberCFIndexType, a2 + 2);
  fpfsi_EnsureRenderChainListenersAndPropertiesForAudioTrack();
  FigRenderPipelineSetProperty(v27[4], (uint64_t)CFSTR("TrackID"), (uint64_t)v325);
  FigRenderPipelineSetProperty(v27[4], (uint64_t)CFSTR("AudioProcessingTap"), *(_QWORD *)(DerivedStorage + 3104));
  v42 = v391;
  if (v325)
    CFRelease(v325);
LABEL_466:
  fpfs_CacheRenderChain(*a2, v27, *((_DWORD *)a2 + 8));
  a2[12] = v27;
  *((_BYTE *)a2 + 185) = 1;
  *((_BYTE *)a2 + 421) = 0;
  v300 = (const __CFArray *)*a2;
  v301 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
  if (!v301)
    goto LABEL_470;
  while (1)
  {
    v302 = *(_QWORD *)(v301 + 96);
    if (v302)
    {
      if (*(_BYTE *)(v302 + 24))
        break;
    }
    v301 = *(_QWORD *)(v301 + 8);
    if (!v301)
      goto LABEL_470;
  }
  if (CMFormatDescriptionGetMediaType(*(CMFormatDescriptionRef *)(v302 + 16)) != 1936684398
    && CMFormatDescriptionGetMediaType((CMFormatDescriptionRef)v27[2]) == 1936684398)
  {
    *(_BYTE *)(v302 + 24) = 0;
LABEL_470:
    HasStarted = fpfs_EstablishTimebase(v300);
    if ((_DWORD)HasStarted)
      return HasStarted;
  }
  if (*((_DWORD *)a2 + 8) == 1936684398)
  {
    fpfs_applyEQPreset((uint64_t)v42, *a2, (uint64_t)a2);
    if (*(_BYTE *)(v9 + 512))
      fpfs_applySoftwareVolumeToTrack((uint64_t)a2, 2, *(float *)(v9 + 516), 0.0);
    v303 = 0.0;
    if (!*(_BYTE *)(v9 + 520))
      v303 = 1.0;
    fpfs_applySoftwareVolumeToTrack((uint64_t)a2, 5, v303, 0.0);
    fpfs_applySoftwareVolumeToTrack((uint64_t)a2, 1, *(float *)(v9 + 104), 0.0);
    fpfsi_applyLoudnessInfo(DerivedStorage, (uint64_t)a2, 1);
    fpfsi_applyAdjustTargetLevel(DerivedStorage, (uint64_t)a2);
    fpfsi_applyAdjustCompressionProfile(DerivedStorage, (uint64_t)a2);
  }
  else
  {
    HasStarted = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines((uint64_t)v27, (uint64_t)CFSTR("Timebase"), *(_QWORD *)(DerivedStorage + 576));
    if ((_DWORD)HasStarted)
      return HasStarted;
    v304 = *(_QWORD *)(DerivedStorage + 720);
    if (v304)
    {
      HasStarted = FigImageQueueTableSetTimebase(v304, *(void **)(DerivedStorage + 576));
      if ((_DWORD)HasStarted)
        return HasStarted;
      v305 = *(_QWORD *)(DerivedStorage + 720);
      if (v305)
      {
        HasStarted = FigImageQueueTableReconnectWithTimebase(v305, *(void **)(DerivedStorage + 576));
        if ((_DWORD)HasStarted)
          return HasStarted;
      }
    }
    *((_BYTE *)v27 + 25) = 1;
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(values.value) = 0;
    LOBYTE(type[0]) = 0;
    v306 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v307 = values.value;
    if (os_log_type_enabled(v306, (os_log_type_t)type[0]))
      v308 = v307;
    else
      v308 = v307 & 0xFFFFFFFE;
    if (v308)
    {
      if (v42)
        v309 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v309 = "";
      v310 = (const __CFArray *)*a2;
      if (*a2)
        v311 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v311 = "";
      v312 = *(_QWORD *)(DerivedStorage + 160);
      v313 = a2[2];
      LODWORD(keys.value) = 136316930;
      *(CMTimeValue *)((char *)&keys.value + 4) = (CMTimeValue)"fpfs_EnsureRenderChainForTrack";
      LOWORD(keys.flags) = 2048;
      *(_QWORD *)((char *)&keys.flags + 2) = v42;
      HIWORD(keys.epoch) = 2082;
      v402 = v309;
      v403 = 2048;
      v404 = v310;
      v405 = 2082;
      v406 = v311;
      v407 = 1024;
      *(_DWORD *)v408 = v312;
      *(_WORD *)&v408[4] = 2048;
      *(_QWORD *)&v408[6] = v27;
      *(_WORD *)&v408[14] = 2048;
      *(_QWORD *)&v408[16] = v313;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    LegibleOutputRenderChainsAndAttachToPrimary = 0;
  }
  else
  {
    LegibleOutputRenderChainsAndAttachToPrimary = 0;
  }
LABEL_501:
  v314 = *((_DWORD *)a2 + 8);
  if (v314 != 1936684398)
    goto LABEL_570;
  TrackOfType = fpfs_LastTrackOfType(*a2, 1936684398, (uint64_t)a2);
  v316 = DerivedStorage;
  if (fpfs_WantMATAtmosForTrack((uint64_t)a2))
  {
    if (!TrackOfType)
    {
      *((_BYTE *)a2 + 190) = 0;
      fpfs_applySoftwareVolumeToTrack((uint64_t)a2, 1, *(float *)(v9 + 104), 0.0);
      goto LABEL_542;
    }
    *((_BYTE *)a2 + 190) = 1;
    fpfs_applySoftwareVolumeToTrack((uint64_t)a2, 1, *(float *)(v9 + 104), 0.0);
  }
  else if (!TrackOfType)
  {
    goto LABEL_542;
  }
  if (*(_QWORD *)(TrackOfType + 96))
  {
    *((_BYTE *)a2 + 422) = 1;
    v317 = *(const __CFArray **)TrackOfType;
    if (*(_BYTE *)(TrackOfType + 421))
    {
      if (v317)
        CFRetain(v317);
      v318 = CMBaseObjectGetDerivedStorage();
      if (dword_1EE2A2A88)
      {
        v319 = (uint64_t *)v318;
        LODWORD(values.value) = 0;
        LOBYTE(type[0]) = 0;
        v320 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v321 = values.value;
        if (os_log_type_enabled(v320, (os_log_type_t)type[0]))
          v322 = v321;
        else
          v322 = v321 & 0xFFFFFFFE;
        if (v322)
        {
          v323 = *v319;
          if (*v319)
            v324 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v324 = "";
          if (v317)
            v333 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v333 = "";
          v334 = *(_QWORD *)(TrackOfType + 16);
          v335 = a2[2];
          LODWORD(keys.value) = 136316674;
          *(CMTimeValue *)((char *)&keys.value + 4) = (CMTimeValue)"fpfsi_ScheduleNewTrackWhenOldTrackEnds";
          LOWORD(keys.flags) = 2048;
          *(_QWORD *)((char *)&keys.flags + 2) = v323;
          HIWORD(keys.epoch) = 2082;
          v402 = v324;
          v403 = 2048;
          v404 = v317;
          v405 = 2082;
          v406 = v333;
          v407 = 1024;
          *(_DWORD *)v408 = v334;
          *(_WORD *)&v408[4] = 1024;
          *(_DWORD *)&v408[6] = v335;
          _os_log_send_and_compose_impl();
        }
        v318 = fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fpfs_deferredAudioPlayResourceReleased(v318, v317);
    }
    v326 = CMBaseObjectGetDerivedStorage();
    v42 = v391;
    if (dword_1EE2A2A88)
    {
      v327 = (uint64_t *)v326;
      v390 = v9;
      LODWORD(values.value) = 0;
      LOBYTE(type[0]) = 0;
      v328 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v329 = values.value;
      if (os_log_type_enabled(v328, (os_log_type_t)type[0]))
        v330 = v329;
      else
        v330 = v329 & 0xFFFFFFFE;
      if (v330)
      {
        v331 = *v327;
        if (*v327)
          v332 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v332 = "";
        v336 = *(const __CFArray **)TrackOfType;
        if (*(_QWORD *)TrackOfType)
          v337 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v337 = "";
        v338 = a2[2];
        v339 = *(_QWORD *)(TrackOfType + 16);
        LODWORD(keys.value) = 136316674;
        *(CMTimeValue *)((char *)&keys.value + 4) = (CMTimeValue)"fpfsi_ScheduleNewTrackWhenOldTrackEnds";
        LOWORD(keys.flags) = 2048;
        *(_QWORD *)((char *)&keys.flags + 2) = v331;
        HIWORD(keys.epoch) = 2082;
        v402 = v332;
        v403 = 2048;
        v404 = v336;
        v405 = 2082;
        v406 = v337;
        v407 = 1024;
        *(_DWORD *)v408 = v338;
        *(_WORD *)&v408[4] = 1024;
        *(_DWORD *)&v408[6] = v339;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v9 = v390;
      v42 = v391;
    }
  }
LABEL_542:
  v340 = (const opaqueCMFormatDescription *)a2[5];
  v341 = CMFormatDescriptionGetMediaSubType(v340);
  v342 = 1;
  if (v341 <= 1885692722)
  {
    DerivedStorage = v316;
    if (v341 > 1700997938)
    {
      if (v341 == 1700997939)
        goto LABEL_569;
      if (v341 != 1700998451)
      {
        v343 = 1885547315;
        goto LABEL_557;
      }
      goto LABEL_559;
    }
    if (v341 == 1667574579)
      goto LABEL_569;
    v344 = 1667575091;
LABEL_553:
    if (v341 != v344)
      goto LABEL_568;
    goto LABEL_559;
  }
  DerivedStorage = v316;
  if (v341 > 1902469938)
  {
    if (v341 != 2053464883)
    {
      if (v341 == 2053319475)
        goto LABEL_569;
      v344 = 1902469939;
      goto LABEL_553;
    }
LABEL_559:
    sizeOut[0].value = 0;
    v345 = CMAudioFormatDescriptionGetFormatList(v340, (size_t *)sizeOut);
    v342 = 0;
    if (!v345 || sizeOut[0].value < 0x30uLL)
      goto LABEL_569;
    v346 = v345->mASBD.mFormatID;
    v342 = 1;
    if (v346 <= 1885547314)
    {
      if (v346 == 1667574579)
        goto LABEL_569;
      v347 = 1700997939;
    }
    else
    {
      if (v346 == 1885547315 || v346 == 1902324531)
        goto LABEL_569;
      v347 = 2053319475;
    }
    if (v346 == v347)
      goto LABEL_569;
LABEL_568:
    v342 = 0;
    goto LABEL_569;
  }
  if (v341 == 1885692723)
    goto LABEL_559;
  v343 = 1902324531;
LABEL_557:
  if (v341 != v343)
    goto LABEL_568;
LABEL_569:
  fpfsi_RTCReportingUpdateATMOSMetricVar(DerivedStorage, (_BYTE *)(DerivedStorage + 2571), (_BYTE *)(DerivedStorage + 2567), v342, 0, 0);
  v314 = *((_DWORD *)a2 + 8);
LABEL_570:
  if (v314 == 1986618469)
  {
    if (!*(_BYTE *)(DerivedStorage + 528))
    {
LABEL_579:
      fpfs_SetFeederTrack(a2[12], (uint64_t)a2);
      v357 = *((_DWORD *)a2 + 8);
      if (v357 == 1936684398)
      {
        fpfs_PrepareAndEnqueueSpatialAudioRenderingChangedNotification(*(const void **)DerivedStorage, (const void *)*a2, v351, v352, v353, v354, v355, v356);
        v357 = *((_DWORD *)a2 + 8);
      }
      if (v357 == 1835365473 && a2[11])
      {
        fpfsi_scheduleFVTTransitionsForItem(v392, 0, 1);
        LegibleOutputRenderChainsAndAttachToPrimary = 0;
      }
      if (!*(_BYTE *)(DerivedStorage + 469))
      {
        v358 = (const __CFArray *)*a2;
        if (v358 == fpfs_getNext(v9, 0))
        {
          *(_BYTE *)(DerivedStorage + 469) = 1;
          fpfs_EnqueueNotification(v42, CFSTR("TimebaseChanged"), (const void *)*a2, 0);
        }
      }
      fpfs_updateCaptionOrSubtitleHintOnVideoPipeline();
      goto LABEL_588;
    }
    fpfs_FlushPrimaryAndAuxRenderChains((uint64_t)v27, 1);
    *(_BYTE *)(DerivedStorage + 528) = 0;
    v314 = *((_DWORD *)a2 + 8);
  }
  if (v314 != 1935832172)
    goto LABEL_579;
  OptionsDictionaryForSelectedMediaType = fpfs_GetOptionsDictionaryForSelectedMediaType(DerivedStorage);
  if (!OptionsDictionaryForSelectedMediaType)
    goto LABEL_579;
  v349 = CFDictionaryGetValue(OptionsDictionaryForSelectedMediaType, CFSTR("MediaSelectionOptionsExtendedLanguageTag"));
  if (!v349)
    goto LABEL_579;
  v350 = &kFigCaptionRenderPipelineProperty_ExtendedLanguageTagString;
  if (*(_BYTE *)(v9 + 460))
    v350 = (uint64_t *)&kFigSubtitleRenderPipelineProperty_ExtendedLanguageTagString;
  LegibleOutputRenderChainsAndAttachToPrimary = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines((uint64_t)v27, *v350, (uint64_t)v349);
  if (!(_DWORD)LegibleOutputRenderChainsAndAttachToPrimary)
    goto LABEL_579;
  return LegibleOutputRenderChainsAndAttachToPrimary;
}

uint64_t fpfs_SetRenderChainsReleasedForPause(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  const void **v5;

  result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 2872) != a2)
  {
    v4 = result;
    *(_BYTE *)(result + 2872) = a2;
    result = *(_QWORD *)(result + 40);
    if (result)
    {
      if (!a2)
      {
        v5 = (const void **)MEMORY[0x1E0C9AE40];
        return FigAlternateSelectionBossSetProperty((const void *)result, (uint64_t)CFSTR("Paused"), *v5);
      }
      if (*(_QWORD *)(v4 + 1696))
      {
        v5 = (const void **)MEMORY[0x1E0C9AE50];
        return FigAlternateSelectionBossSetProperty((const void *)result, (uint64_t)CFSTR("Paused"), *v5);
      }
    }
  }
  return result;
}

uint64_t fpfsi_isTrackInLists(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  v5[0] = result + 1040;
  v5[1] = result + 1056;
  v5[2] = result + 1072;
  if (result)
  {
    v3 = 0;
    while (1)
    {
      if (((a3 >> v3) & 1) != 0)
      {
        v4 = *(_QWORD *)v5[v3];
        if (v4)
          break;
      }
LABEL_7:
      if (++v3 == 3)
        return 0;
    }
    while (v4 != a2)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        goto LABEL_7;
    }
    return 1;
  }
  return result;
}

void fpfs_CompleteLogIfLastTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFIndex v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(a2 + 424);
  if (v5 != -1)
  {
    v6 = *(_QWORD *)(DerivedStorage + 1040);
    if (v6)
    {
      while (v6 == a2
           || *(_QWORD *)(v6 + 424) != v5
           || *(_QWORD *)(DerivedStorage + 1104) != *(unsigned __int8 *)(v6 + 180))
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      fpfs_MarkAccessLogEntryComplete(a1, v5);
    }
    *(_QWORD *)(a2 + 424) = -1;
  }
}

uint64_t fpfs_itemContainsTrackWithSharedRenderChain(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a2 + 96);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v5)
    return 0;
  while (v5 == a2 || *(_QWORD *)(v5 + 96) != v4)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (!v5)
      return 0;
  }
  return 1;
}

BOOL fpfsi_canTracksBeSyncPairsIgnoringDiscontinuity(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  CMBaseObjectGetDerivedStorage();
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a2 + 32);
  if (v4 != 1835365473 || v5 != 1835365473)
    return v4 == v5;
  if (*(unsigned __int8 *)(a1 + 180) == *(unsigned __int8 *)(a2 + 180))
    return fpfsi_canMetadataFormatsSync(*(const opaqueCMFormatDescription **)(a1 + 40), *(const opaqueCMFormatDescription **)(a2 + 40)) != 0;
  return 0;
}

uint64_t fpfs_shouldCheckAndReportVariantEnded(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t DerivedStorage;
  CMTime v4;
  CMTime time2;

  if (result)
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 32);
    if (v2 == 1986618469)
      goto LABEL_8;
    if (v2 == 1936684398)
    {
      result = *(_QWORD *)(result + 440);
      if (!result)
        return result;
      if (!FigAlternateHasVideo(result))
      {
LABEL_8:
        if (!*(_BYTE *)(v1 + 184)
          && !*(_BYTE *)(v1 + 456)
          && fpfs_FirstTrackWithFormatDescriptionOfType(*(_QWORD *)v1, *(_DWORD *)(v1 + 32)) == v1)
        {
          DerivedStorage = CMBaseObjectGetDerivedStorage();
          fpfs_GetTime(DerivedStorage, (uint64_t)&time2);
          v4 = *(CMTime *)(v1 + 192);
          return CMTimeCompare(&v4, &time2) < 1;
        }
      }
    }
    return 0;
  }
  return result;
}

void fpfs_ReleaseTrackRenderChain(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 IsPlayerPerformanceTraceEnabled;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v17)(uint64_t, const __CFString *, const void *, CFTypeRef *);
  CFTypeRef v18;
  BOOL v19;
  uint64_t v20;
  void (*v21)(uint64_t, __CFString *, __CFString *, _QWORD);
  uint64_t v22;
  void (*v23)(uint64_t, __CFString *, __CFString *, _QWORD);
  uint64_t v24;
  void (*v25)(uint64_t, __CFString *, __CFString *, _QWORD);
  uint64_t v26;
  void (*v27)(uint64_t, __CFString *, __CFString *, _QWORD);
  uint64_t v28;
  void (*v29)(uint64_t, __CFString *, __CFString *, _QWORD);
  uint64_t v30;
  void (*v31)(uint64_t, __CFString *, __CFString *, _QWORD);
  uint64_t v32;
  void (*v33)(uint64_t, __CFString *, __CFString *, _QWORD);
  uint64_t v34;
  int v35;
  uint64_t RenderingTrackofType;
  uint64_t v37;
  NSObject *v38;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  const void *v45;
  const char *v46;
  const char *v47;
  int v48;
  CFArrayRef *v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  NSObject *v53;
  const void *v54;
  uint64_t v55;
  CFTypeRef cf;
  CMTime time1;
  const char *v58;
  __int16 v59;
  const void *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _QWORD *v68;
  CMTime time2;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD **)(a1 + 96);
  if (!v4)
    goto LABEL_90;
  v5 = *(_QWORD *)(a1 + 96);
  if (*(_BYTE *)(a1 + 181))
  {
    fpfs_SetFeederTrack(*(_QWORD *)(a1 + 96), 0);
    v5 = *(_QWORD *)(a1 + 96);
  }
  if (*(_QWORD *)(v5 + 64))
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      while (1)
      {
        if (*(_DWORD *)(v6 + 32) == *(_DWORD *)(a1 + 32))
        {
          v7 = *(_QWORD *)(v6 + 96);
          if (v7)
            break;
        }
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          goto LABEL_9;
      }
      if (v7 != v5 && *(_DWORD *)(v6 + 152) == 6)
      {
        if (dword_1EE2A2A88)
        {
          LODWORD(cf) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v7 = *(_QWORD *)(v6 + 96);
        }
        fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v7, (uint64_t)CFSTR("Suspended"), *MEMORY[0x1E0C9AE40]);
        v54 = *(const void **)(*(_QWORD *)(a1 + 96) + 64);
        if (v54)
        {
          CFRelease(v54);
          *(_QWORD *)(*(_QWORD *)(a1 + 96) + 64) = 0;
        }
      }
    }
  }
LABEL_9:
  if (*(_DWORD *)(a1 + 32) == 1936684398 && !*(_BYTE *)(a1 + 421))
  {
    RenderingTrackofType = fpfs_LastRenderingTrackofType((uint64_t)v2, 1936684398, a1);
    if (!*(_BYTE *)(DerivedStorage + 530) && (!RenderingTrackofType || *(_BYTE *)(RenderingTrackofType + 421)))
    {
      if (v2)
        RenderingTrackofType = (uint64_t)CFRetain(v2);
      if (dword_1EE2A2A88)
      {
        LODWORD(cf) = 0;
        v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
        RenderingTrackofType = fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fpfs_deferredAudioPlayResourceReleased(RenderingTrackofType, (uint64_t)v2, v37, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
    }
    if (dword_1EE2A2A88 >= 2)
    {
      LODWORD(cf) = 0;
      v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v8 = CMBaseObjectGetDerivedStorage();
  IsPlayerPerformanceTraceEnabled = FPSupport_IsPlayerPerformanceTraceEnabled();
  v10 = *(_DWORD *)(a1 + 32);
  if (v10 == 1986618469 || v10 == 1936684398)
  {
    v11 = CMBaseObjectGetDerivedStorage();
    if (!(*(unsigned __int8 *)(v11 + 656) | IsPlayerPerformanceTraceEnabled))
    {
      v35 = *(_DWORD *)(a1 + 32);
      if (v35 != 1986618469)
        goto LABEL_68;
      if (*(_BYTE *)(a1 + 184))
        goto LABEL_67;
    }
    v12 = CMBaseObjectGetDerivedStorage();
    cf = 0;
    v13 = *(_QWORD *)(a1 + 96);
    if (!v13)
    {
LABEL_67:
      v35 = *(_DWORD *)(a1 + 32);
LABEL_68:
      if (v35 == 1936684398)
        fpfs_CancelGaplessTransitionThatDependsOnTrack(*(const void **)DerivedStorage, a1, 0);
      goto LABEL_70;
    }
    v55 = v12;
    v14 = *(_QWORD *)(v13 + 32);
    if (v14)
    {
      AllocatorForMedia = (const void *)FigGetAllocatorForMedia();
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v14);
      v17 = *(uint64_t (**)(uint64_t, const __CFString *, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v17)
      {
        LODWORD(AllocatorForMedia) = v17(FigBaseObject, CFSTR("PerformanceDictionary"), AllocatorForMedia, &cf);
        v18 = cf;
        if ((_DWORD)AllocatorForMedia)
          v19 = 1;
        else
          v19 = cf == 0;
        if (v19)
        {
LABEL_64:
          if (v18)
            CFRelease(v18);
          if (!(_DWORD)AllocatorForMedia
            && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 72)
            && *(unsigned __int8 *)(v11 + 656) | IsPlayerPerformanceTraceEnabled)
          {
            v48 = *(_DWORD *)(a1 + 32);
            if (v48 == 1936684398)
            {
              v49 = (CFArrayRef *)(v8 + 1896);
            }
            else
            {
              if (v48 != 1986618469)
                goto LABEL_70;
              v49 = (CFArrayRef *)(v8 + 1888);
            }
            fpfsi_StoreTrackPerformanceDictionaries(a1, v49);
          }
          goto LABEL_67;
        }
        if (*(_DWORD *)(a1 + 32) == 1986618469)
        {
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
          if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 72))
          {
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
          }
          fpfs_GetTime(v55, (uint64_t)&time2);
          time1 = *(CMTime *)(a1 + 192);
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            v20 = *(_QWORD *)(v55 + 2536);
            if (v20)
            {
              v21 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 32);
              if (v21)
                v21(v20, CFSTR("playerStats"), CFSTR("ViFrDec"), 0);
              v22 = *(_QWORD *)(v55 + 2536);
              if (v22)
              {
                v23 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 32);
                if (v23)
                  v23(v22, CFSTR("playerStats"), CFSTR("ViFrDecLate"), 0);
                v24 = *(_QWORD *)(v55 + 2536);
                if (v24)
                {
                  v25 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 32);
                  if (v25)
                    v25(v24, CFSTR("playerStats"), CFSTR("ViFrDropByDec"), 0);
                  v26 = *(_QWORD *)(v55 + 2536);
                  if (v26)
                  {
                    v27 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
                    if (v27)
                      v27(v26, CFSTR("playerStats"), CFSTR("ViGrFrDropByDec"), 0);
                    v28 = *(_QWORD *)(v55 + 2536);
                    if (v28)
                    {
                      v29 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 32);
                      if (v29)
                        v29(v28, CFSTR("playerStats"), CFSTR("ViFrDecNoDisp"), 0);
                      v30 = *(_QWORD *)(v55 + 2536);
                      if (v30)
                      {
                        v31 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 32);
                        if (v31)
                          v31(v30, CFSTR("playerStats"), CFSTR("ViFrDropByFlush"), 0);
                        v32 = *(_QWORD *)(v55 + 2536);
                        if (v32)
                        {
                          v33 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
                          if (v33)
                            v33(v32, CFSTR("playerStats"), CFSTR("ViDecErrorCount"), 0);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v18 = cf;
          v34 = *(_QWORD *)(a1 + 96);
          AllocatorForMedia = *(const void **)(v34 + 72);
          *(_QWORD *)(v34 + 72) = cf;
          if (!v18)
            goto LABEL_61;
        }
        else
        {
          v40 = *(_QWORD *)(a1 + 96);
          AllocatorForMedia = *(const void **)(v40 + 72);
          *(_QWORD *)(v40 + 72) = cf;
        }
        CFRetain(v18);
LABEL_61:
        if (AllocatorForMedia)
        {
          CFRelease(AllocatorForMedia);
          LODWORD(AllocatorForMedia) = 0;
        }
        goto LABEL_63;
      }
      LODWORD(AllocatorForMedia) = -12782;
    }
    else
    {
      LODWORD(AllocatorForMedia) = -12860;
    }
LABEL_63:
    v18 = cf;
    goto LABEL_64;
  }
LABEL_70:
  if (*(_QWORD **)(a1 + 96) == v4)
  {
    *(_QWORD *)(a1 + 96) = 0;
    fpfs_releaseRenderChain((const __CFArray *)v2, v4);
  }
  else if (dword_1EE2A2A88)
  {
    LODWORD(cf) = 0;
    v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v42 = cf;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      v43 = v42;
    else
      v43 = v42 & 0xFFFFFFFE;
    if (!v43)
      goto LABEL_89;
    v44 = DerivedStorage;
    v45 = *(const void **)DerivedStorage;
    if (*(_QWORD *)DerivedStorage)
    {
      v46 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      if (v2)
      {
LABEL_78:
        v47 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
LABEL_88:
        v50 = *(_QWORD *)(v44 + 160);
        v51 = *(_QWORD *)(a1 + 96);
        LODWORD(time1.value) = 136316930;
        *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"fpfs_ReleaseTrackRenderChain";
        LOWORD(time1.flags) = 2048;
        *(_QWORD *)((char *)&time1.flags + 2) = v45;
        HIWORD(time1.epoch) = 2082;
        v58 = v46;
        v59 = 2048;
        v60 = v2;
        v61 = 2082;
        v62 = v47;
        v63 = 1024;
        v64 = v50;
        v65 = 2048;
        v66 = v51;
        v67 = 2048;
        v68 = v4;
        _os_log_send_and_compose_impl();
LABEL_89:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_90;
      }
    }
    else
    {
      v46 = "";
      if (v2)
        goto LABEL_78;
    }
    v47 = "";
    goto LABEL_88;
  }
LABEL_90:
  if (*(_QWORD *)(a1 + 88))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v52 = *(const void **)(a1 + 88);
    if (v52)
    {
      CFRelease(v52);
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 421) = 1;
  *(_BYTE *)(a1 + 423) = 0;
}

const void *fpfs_PrepareAndEnqueueSpatialAudioRenderingChangedNotification(const void *a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  const void *result;

  result = (const void *)fpfs_CreateNotificationPayloadForProperties(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, CFSTR("IsRenderingSpatialAudio"), 0);
  if (result)
    fpfs_EnqueueNotification(a1, CFSTR("SpatialAudioRenderingChanged"), a2, result);
  return result;
}

uint64_t fpfsi_RTCReportingReportCheckAndReportVariantEnded(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  double Seconds;
  double v9;
  uint64_t UpTimeNanoseconds;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v17;
  double v18;
  double v19;
  void (*v20)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v23;
  void (*v24)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v25;
  _BOOL4 v26;
  int HasAudio;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  const __CFAllocator *v33;
  CFNumberRef v34;
  uint64_t v35;
  void (*v36)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD);
  int PeakBitRate;
  uint64_t v38;
  int v39;
  void (*v40)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  int AverageBitRate;
  uint64_t v42;
  int v43;
  void (*v44)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  int VariantBitrateRank;
  uint64_t v46;
  int v47;
  void (*v48)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t CodecString;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  int v53;
  __CFString *HDCPString;
  const __CFString *VideoRangeString;
  double Resolution;
  double v57;
  double v58;
  CFNumberRef v59;
  int VideoQualityIndex;
  uint64_t v61;
  void (*v62)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  uint64_t v63;
  void (*v64)(uint64_t, __CFString *, __CFString *);
  uint64_t v65;
  void (*v66)(uint64_t, __CFString *, __CFString *);
  uint64_t v67;
  void (*v68)(uint64_t, __CFString *, __CFString *);
  uint64_t v69;
  void (*v70)(uint64_t, __CFString *, __CFString *);
  uint64_t v71;
  void (*v72)(uint64_t, __CFString *, __CFString *);
  uint64_t v73;
  void (*v74)(uint64_t, __CFString *, __CFString *);
  uint64_t v75;
  void (*v76)(uint64_t, __CFString *, __CFString *);
  CMTime v77;
  CMTime time1;
  CMTime v79;

  if (a2)
  {
    if (!*(_BYTE *)(a2 + 184))
    {
      v3 = result;
      v4 = *(_DWORD *)(a2 + 32);
      if (v4 == 1986618469
        || v4 == 1936684398
        && (result = *(_QWORD *)(a2 + 440)) != 0
        && (result = FigAlternateHasVideo(result), !(_DWORD)result))
      {
        v5 = *(_QWORD *)(v3 + 1040);
        if (!v5)
          goto LABEL_11;
        while (*(_DWORD *)(v5 + 32) != *(_DWORD *)(a2 + 32) || *(_QWORD *)(v5 + 16) <= *(_QWORD *)(a2 + 16))
        {
          v5 = *(_QWORD *)(v5 + 8);
          if (!v5)
            goto LABEL_11;
        }
        result = FigCFEqual();
        if (!(_DWORD)result)
        {
LABEL_11:
          memset(&v79, 0, sizeof(v79));
          fpfs_GetTime(v3, (uint64_t)&v79);
          v6 = (_OWORD *)(v3 + 3020);
          if ((*(_BYTE *)(v3 + 3032) & 1) == 0)
          {
            v7 = *(_OWORD *)(a2 + 192);
            *(_QWORD *)(v3 + 3036) = *(_QWORD *)(a2 + 208);
            *v6 = v7;
          }
          time1 = *(CMTime *)(a2 + 216);
          v77 = v79;
          if (CMTimeCompare(&time1, &v77) < 0)
            v79 = *(CMTime *)(a2 + 216);
          time1 = v79;
          Seconds = CMTimeGetSeconds(&time1);
          *(_OWORD *)&time1.value = *v6;
          time1.epoch = *(_QWORD *)(v3 + 3036);
          v9 = Seconds - CMTimeGetSeconds(&time1);
          UpTimeNanoseconds = FigGetUpTimeNanoseconds();
          if (v9 > 0.0)
          {
            v11 = UpTimeNanoseconds;
            v12 = *(_QWORD *)(v3 + 3048);
            v13 = *(_QWORD *)(v3 + 2536);
            *(_OWORD *)&time1.value = *v6;
            time1.epoch = *(_QWORD *)(v3 + 3036);
            v14 = CMTimeGetSeconds(&time1);
            if (v13)
            {
              v15 = v14;
              v16 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v16)
                v16(v13, CFSTR("playerStats"), CFSTR("VarSTTime"), (uint64_t)(v15 * 1000.0), 0);
            }
            v17 = *(_QWORD *)(v3 + 2536);
            time1 = v79;
            v18 = CMTimeGetSeconds(&time1);
            if (v17)
            {
              v19 = v18;
              v20 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v20)
                v20(v17, CFSTR("playerStats"), CFSTR("VarEndTime"), (uint64_t)(v19 * 1000.0), 0);
            }
            v21 = *(_QWORD *)(v3 + 2536);
            if (v21)
            {
              v22 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v22)
                v22(v21, CFSTR("playerStats"), CFSTR("VarPlayTime"), (uint64_t)(v9 * 1000.0), 0);
              v23 = *(_QWORD *)(v3 + 2536);
              if (v23)
              {
                v24 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 56);
                if (v24)
                  v24(v23, CFSTR("playerStats"), CFSTR("VarPlayWCTime"), (uint64_t)((double)(v11 - v12) / 1000000.0), 0);
              }
            }
            v25 = *(_QWORD *)(a2 + 440);
            if (v25)
            {
              v26 = 0;
              LODWORD(v77.value) = 0;
              if (*(_DWORD *)(a2 + 32) == 1936684398
                || (HasAudio = FigAlternateHasAudio(v25), v26 = *(_DWORD *)(a2 + 32) == 1986618469, HasAudio))
              {
                v28 = 0;
                v29 = 1;
              }
              else
              {
                v29 = 0;
                v28 = 2;
              }
              if (v26)
                v30 = v28;
              else
                v30 = v29;
              v31 = *(_QWORD *)(v3 + 2536);
              if (v31)
              {
                v32 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 56);
                if (v32)
                  v32(v31, CFSTR("playerStats"), CFSTR("VarType"), v30, 0);
              }
              LODWORD(v77.value) = FigAlternateGetAlternateIndex(*(_QWORD *)(a2 + 440));
              v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v77);
              v35 = *(_QWORD *)(v3 + 2536);
              if (v35)
              {
                v36 = *(void (**)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                if (v36)
                  v36(v35, CFSTR("playerStats"), CFSTR("VarAltIndex"), v34, 0);
              }
              PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)(a2 + 440));
              v38 = *(_QWORD *)(v3 + 2536);
              if (v38)
              {
                v39 = PeakBitRate;
                v40 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 56);
                if (v40)
                  v40(v38, CFSTR("playerStats"), CFSTR("VarPeakBitrate"), v39, 0);
              }
              AverageBitRate = FigAlternateGetAverageBitRate(*(_QWORD *)(a2 + 440));
              v42 = *(_QWORD *)(v3 + 2536);
              if (v42)
              {
                v43 = AverageBitRate;
                v44 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 56);
                if (v44)
                  v44(v42, CFSTR("playerStats"), CFSTR("VarAvgBitrate"), v43, 0);
              }
              VariantBitrateRank = FigAlternateGetVariantBitrateRank(*(_QWORD *)(a2 + 440), *(_DWORD *)(v3 + 2868));
              v46 = *(_QWORD *)(v3 + 2536);
              if (v46)
              {
                v47 = VariantBitrateRank;
                v48 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 56);
                if (v48)
                  v48(v46, CFSTR("playerStats"), CFSTR("VarBitRk"), v47, 0);
              }
              CodecString = FigAlternateGetCodecString(*(_QWORD *)(a2 + 440));
              v50 = *(_QWORD *)(v3 + 2536);
              if (v50)
              {
                v51 = CodecString;
                v52 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 48);
                if (v52)
                  v52(v50, CFSTR("playerStats"), CFSTR("VarCodec"), v51, 0);
              }
              v53 = *(_DWORD *)(a2 + 32);
              if (v53 == 1936684398)
              {
                fpfsi_RTCReportingUpdateAudioInfoForVariantEnd(v3, a2);
              }
              else if (v53 == 1986618469)
              {
                HDCPString = FigAlternateGetHDCPString(*(_QWORD *)(a2 + 440));
                VideoRangeString = FigAlternateGetVideoRangeString(*(const __CFString **)(a2 + 440));
                time1.value = 0;
                Resolution = FigAlternateGetResolution(*(_QWORD *)(a2 + 440));
                if (v57 > 0.0 && Resolution > 0.0)
                {
                  v58 = v57;
                  FigReportingAgentStatsSetIntValue(*(_QWORD *)(v3 + 2536), 0x1E301B638, 0x1E2FFA718, (uint64_t)Resolution);
                  FigReportingAgentStatsSetIntValue(*(_QWORD *)(v3 + 2536), 0x1E301B638, 0x1E2FFA738, (uint64_t)v58);
                }
                time1.value = FigAlternateGetFrameRate(*(_QWORD *)(a2 + 440));
                v59 = CFNumberCreate(v33, kCFNumberDoubleType, &time1);
                FigReportingAgentStatsSetCFTypeValue(*(_QWORD *)(v3 + 2536), 0x1E301B638, 0x1E2FFA6D8, (uint64_t)v59);
                FigReportingAgentStatsSetCFTypeValue(*(_QWORD *)(v3 + 2536), 0x1E301B638, 0x1E2FFA658, (uint64_t)HDCPString);
                FigReportingAgentStatsSetCFTypeValue(*(_QWORD *)(v3 + 2536), 0x1E301B638, 0x1E2FFA758, (uint64_t)VideoRangeString);
                VideoQualityIndex = FigAlternateGetVideoQualityIndex(*(_QWORD *)(a2 + 440));
                FigReportingAgentStatsSetIntValue(*(_QWORD *)(v3 + 2536), 0x1E301B638, 0x1E2FFAEB8, VideoQualityIndex);
                if (v59)
                  CFRelease(v59);
              }
              if (v34)
                CFRelease(v34);
            }
            v61 = *(_QWORD *)(v3 + 2536);
            if (v61)
            {
              v62 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
              if (v62)
                v62(v61, CFSTR("playerStats"), 111, 0, 0);
            }
          }
          v63 = *(_QWORD *)(v3 + 2536);
          if (v63)
          {
            v64 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 64);
            if (v64)
              v64(v63, CFSTR("playerStats"), CFSTR("ViFrDec"));
            v65 = *(_QWORD *)(v3 + 2536);
            if (v65)
            {
              v66 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 64);
              if (v66)
                v66(v65, CFSTR("playerStats"), CFSTR("ViGrFrDropByDec"));
              v67 = *(_QWORD *)(v3 + 2536);
              if (v67)
              {
                v68 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
                if (v68)
                  v68(v67, CFSTR("playerStats"), CFSTR("ViFrDecNoDisp"));
                v69 = *(_QWORD *)(v3 + 2536);
                if (v69)
                {
                  v70 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 64);
                  if (v70)
                    v70(v69, CFSTR("playerStats"), CFSTR("ViFrDecLate"));
                  v71 = *(_QWORD *)(v3 + 2536);
                  if (v71)
                  {
                    v72 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 64);
                    if (v72)
                      v72(v71, CFSTR("playerStats"), CFSTR("ViFrDropByFlush"));
                    v73 = *(_QWORD *)(v3 + 2536);
                    if (v73)
                    {
                      v74 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 64);
                      if (v74)
                        v74(v73, CFSTR("playerStats"), CFSTR("ViFrDropByDec"));
                      v75 = *(_QWORD *)(v3 + 2536);
                      if (v75)
                      {
                        v76 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 64);
                        if (v76)
                          v76(v75, CFSTR("playerStats"), CFSTR("ViDecErrorCount"));
                      }
                    }
                  }
                }
              }
            }
          }
          *v6 = *(_OWORD *)&v79.value;
          *(_QWORD *)(v3 + 3036) = v79.epoch;
          result = FigGetUpTimeNanoseconds();
          *(_QWORD *)(v3 + 3048) = result;
        }
      }
    }
  }
  return result;
}

void fpfs_ReleaseAndClearTimebaseTimer(OpaqueCMTimebase *a1, dispatch_object_t *a2)
{
  NSObject *v3;

  if (a2)
  {
    if (a1)
    {
      v3 = *a2;
      if (*a2)
        CMTimebaseRemoveTimerDispatchSource(a1, v3);
    }
  }
  fpfs_ReleaseAndClearDispatchSource(a2);
}

uint64_t fpfs_StopFeedingTrack(uint64_t a1, uint64_t a2, int a3)
{
  const void *v6;
  uint64_t *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  const __CFAllocator *AllocatorForMedia;
  const void *v13;
  int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  const __CFAllocator *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t i;
  __int128 v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  const void *v29;
  const char *v30;
  uint64_t v31;
  CMTime end;
  CMTime rhs;
  CMAttachmentBearerRef target;
  CMTime time2;
  const char *v37;
  __int16 v38;
  const void *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;
  CMTimeRange lhs[2];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = *(const void **)a1;
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(a1 + 182))
  {
    v9 = *(_QWORD *)(a1 + 48);
    if (v9)
    {
      v10 = *(unsigned int *)(a1 + 24);
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v11)
        v11(v9, v10, 0, 0);
    }
    *(_BYTE *)(a1 + 182) = 1;
  }
  if (*(_BYTE *)(a1 + 181))
  {
    target = 0;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    a2 = CMSampleBufferCreate(AllocatorForMedia, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
    if (!(_DWORD)a2)
    {
      v13 = (const void *)*MEMORY[0x1E0C9AE50];
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2658], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
      fpfs_RenderBuffer(a1, (void *)target);
      if (target)
        CFRelease(target);
      v14 = *(_DWORD *)(a1 + 32);
      if (v14 == 1986618469)
      {
        if (fpfsi_AllTracksForMediaTypeArePlaying((uint64_t)v6, 1986618469))
          fpfs_SignalImageQueueGaugeEnqueueingCompleteAfterDecoding(a1);
      }
      else if (v14 == 1936684398)
      {
        v15 = fpfsi_AllTracksForMediaTypeArePlaying((uint64_t)v6, 1936684398);
        if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
        {
          memset(&time2, 0, sizeof(time2));
          *(_OWORD *)&lhs[0].start.value = *(_OWORD *)(a1 + 216);
          lhs[0].start.epoch = *(_QWORD *)(a1 + 232);
          rhs = *(CMTime *)(a1 + 192);
          CMTimeSubtract(&time2, &lhs[0].start, &rhs);
          v16 = *(_QWORD *)(a1 + 96);
          *(_OWORD *)&lhs[0].start.value = *(_OWORD *)(v16 + 120);
          lhs[0].start.epoch = *(_QWORD *)(v16 + 136);
          rhs = time2;
          CMTimeAdd(&end, &lhs[0].start, &rhs);
          rhs = *(CMTime *)(v16 + 96);
          CMTimeRangeFromTimeToTime(lhs, &rhs, &end);
          v17 = *(_OWORD *)&lhs[0].start.epoch;
          v18 = *(_OWORD *)&lhs[0].duration.timescale;
          *(_OWORD *)(v16 + 96) = *(_OWORD *)&lhs[0].start.value;
          *(_OWORD *)(v16 + 112) = v17;
          *(_OWORD *)(v16 + 128) = v18;
        }
        if (!v15)
        {
          a2 = fpfs_EnqueueReleaseAfterDecoding(a1);
          goto LABEL_23;
        }
        if (!fpfs_getNext(v8, v6))
        {
          CMBaseObjectGetDerivedStorage();
          if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
          {
            lhs[0].start.value = 0;
            v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
            a2 = CMSampleBufferCreate(v19, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)lhs);
            if (!(_DWORD)a2)
            {
              CMSetAttachment((CMAttachmentBearerRef)lhs[0].start.value, (CFStringRef)*MEMORY[0x1E0CA4E48], v13, 1u);
              a2 = fpfs_RenderBuffer(a1, (void *)lhs[0].start.value);
              if (lhs[0].start.value)
                CFRelease((CFTypeRef)lhs[0].start.value);
            }
            goto LABEL_23;
          }
        }
      }
      a2 = 0;
    }
LABEL_23:
    fpfs_SetFeederTrack(*(_QWORD *)(a1 + 96), 0);
  }
  if (a3 && *(_DWORD *)(v8 + 32))
  {
    if ((*(_BYTE *)(a1 + 228) & 1) == 0 && (~*(_DWORD *)(a1 + 140) & 0x11) != 0)
    {
      v20 = MEMORY[0x1E0CA2E28];
      v21 = (_OWORD *)(a1 + 216);
      *(_OWORD *)(a1 + 216) = *MEMORY[0x1E0CA2E28];
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(v20 + 16);
      for (i = DerivedStorage[130]; i; i = *(_QWORD *)(i + 8))
      {
        if (*(_QWORD *)(i + 64) <= *(_QWORD *)(a1 + 64) && (*(_BYTE *)(i + 228) & 1) != 0)
        {
          *(_OWORD *)&lhs[0].start.value = *v21;
          lhs[0].start.epoch = *(_QWORD *)(a1 + 232);
          time2 = *(CMTime *)(i + 216);
          if (CMTimeCompare(&lhs[0].start, &time2) < 0)
          {
            v23 = *(_OWORD *)(i + 216);
            *(_QWORD *)(a1 + 232) = *(_QWORD *)(i + 232);
            *v21 = v23;
          }
        }
      }
      if ((*(_DWORD *)(a1 + 228) & 0x1D) != 1)
      {
        fpfs_GetNextTimeToPlay((uint64_t)DerivedStorage, 0, (uint64_t)lhs);
        *v21 = *(_OWORD *)&lhs[0].start.value;
        *(_QWORD *)(a1 + 232) = lhs[0].start.epoch;
      }
    }
    if (!(_DWORD)a2)
    {
      if (!*(_QWORD *)(a1 + 112) && (*(_BYTE *)(a1 + 228) & 1) != 0)
        fpfs_EnsureEndTimerProcForTrack(a1);
      return a2;
    }
LABEL_55:
    fpfs_StopPlayingItemWithOSStatus(v8, v6, a2);
    return a2;
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(target) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = rhs.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)target))
      v26 = value;
    else
      v26 = value & 0xFFFFFFFE;
    if (v26)
    {
      v27 = *DerivedStorage;
      if (v27)
        v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v28 = "";
      v29 = *(const void **)a1;
      if (*(_QWORD *)a1)
        v30 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v30 = "";
      v31 = *(_QWORD *)(a1 + 16);
      LODWORD(time2.value) = 136316418;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_StopFeedingTrack";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = v27;
      HIWORD(time2.epoch) = 2082;
      v37 = v28;
      v38 = 2048;
      v39 = v29;
      v40 = 2082;
      v41 = v30;
      v42 = 1024;
      v43 = v31;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((_DWORD)a2)
    goto LABEL_55;
  return a2;
}

void fpfs_SendBufferQueueToChomper(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *global_queue;

  v3 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  if (v3)
  {
    v4 = v3;
    *v3 = a2;
    v5 = FigOSTransactionCreate();
    v4[1] = v5;
    if (v5)
    {
      global_queue = dispatch_get_global_queue(-2, 0);
      dispatch_async_f(global_queue, v4, (dispatch_function_t)fpfs_BufferChomper);
      return;
    }
    FigSignalErrorAt();
    free(v4);
  }
  else
  {
    FigSignalErrorAt();
  }
  FigBufferQueueRelease();
}

uint64_t fpfsi_RemoveCPECryptorListenersOncePerItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 384);
  result = CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    v5 = *(_QWORD *)(result + 1040);
    if (v5)
    {
      while (v5 == a2 || *(_QWORD *)(v5 + 384) != v3)
      {
        v5 = *(_QWORD *)(v5 + 8);
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      v6 = *(_QWORD *)(result + 1056);
      if (v6)
      {
        while (v6 == a2 || *(_QWORD *)(v6 + 384) != v3)
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            goto LABEL_10;
        }
      }
      else
      {
LABEL_10:
        CMNotificationCenterGetDefaultLocalCenter();
        result = FigNotificationCenterRemoveWeakListener();
        if (!(_DWORD)result)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          return FigNotificationCenterRemoveWeakListener();
        }
      }
    }
  }
  return result;
}

const void *fpfs_PrepareAndEnqueueTracksChangedNotification(const void *a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  const void *result;

  result = (const void *)fpfs_CreateNotificationPayloadForProperties(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, CFSTR("TrackIDArray"), (uint64_t)CFSTR("CurrentStableVariantID"));
  if (result)
    fpfs_EnqueueNotification(a1, CFSTR("TracksChanged"), a2, result);
  return result;
}

void fpfs_FreeTrack(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  CMBaseObjectGetDerivedStorage();
  FigFormatDescriptionRelease();
  v2 = (const void *)a1[54];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[55];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[58];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[7];
  if (v5)
    CFRelease(v5);
  if (a1[11])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v6 = (const void *)a1[11];
    if (v6)
      CFRelease(v6);
  }
  memset(a1, 3, 0x220uLL);
  free(a1);
}

uint64_t fpfs_ChangeTrackState(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  int v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;

  result = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(a1 + 152);
  if (v5 == a2)
    goto LABEL_13;
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = *(_DWORD *)(a1 + 152);
  }
  if ((*(_DWORD *)(a1 + 140) & 1) != 0 || a2 <= 8 && ((1 << a2) & 0x103) != 0)
  {
    v7 = v5;
  }
  else
  {
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    a2 = 0;
    v7 = *(_DWORD *)(a1 + 152);
  }
  if (v7 == 8)
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 152) = a2;
  if (v5 == 1)
  {
    result = fpfs_ResolveAllWaitingTracks(*(const __CFArray **)a1);
    if ((_DWORD)result)
    {
LABEL_13:
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void fpfs_MarkAccessLogEntryComplete(uint64_t a1, CFIndex a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v7;
  const __CFNumber *Value;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, __CFString *, __CFString *, uint64_t);
  CFNumberRef v26;
  CFNumberRef v27;
  uint64_t v28;
  CFIndex v29;
  uint64_t v30;
  uint64_t valuePtr;
  int v32;
  uint64_t v33;
  CFDictionaryRef theDict;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a2 & 0x8000000000000000) == 0)
  {
    v5 = DerivedStorage;
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 1904)) <= a2)
    {
      FigSignalErrorAt();
    }
    else
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 1904), a2);
      if (ValueAtIndex)
      {
        v7 = ValueAtIndex;
        if (CFDictionaryContainsKey(ValueAtIndex, CFSTR("c-provisional-entry")))
        {
          fpfs_UpdateCurrentAccessLogEntryPlayTimes(v5);
          valuePtr = 0;
          Value = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("c-frames-dropped"));
          if (Value)
            CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
          v9 = CMBaseObjectGetDerivedStorage();
          theDict = 0;
          v10 = fpfsi_copyCurrentVideoDestination(a1);
          if (v10)
          {
            AllocatorForMedia = FigGetAllocatorForMedia();
            CMBaseObject = FigAggregateVideoDestinationGetCMBaseObject(v10);
            v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
            if (v13)
              v13(CMBaseObject, CFSTR("PerformanceDictionary"), AllocatorForMedia, &theDict);
          }
          else
          {
            v14 = *(_QWORD *)(v9 + 720);
            if (v14)
              FigImageQueueTableCopyPerformanceDictionary(v14, &theDict);
          }
          if (theDict
            && (v33 = 0,
                v32 = 0,
                CFDictionaryGetValue(theDict, CFSTR("imagequeue-0")),
                FigCFDictionaryGetInt32IfPresent(),
                FigCFDictionaryGetInt32IfPresent(),
                FigCFDictionaryGetInt32IfPresent()))
          {
            v15 = SHIDWORD(v33);
            if (*(_BYTE *)(v9 + 3016))
            {
              v16 = (int)v33;
              v30 = v32;
              *(_BYTE *)(v9 + 3016) = 0;
            }
            else
            {
              v15 = SHIDWORD(v33) - *(_QWORD *)(v9 + 2096);
              v16 = (int)v33 - *(_QWORD *)(v9 + 2104);
              v30 = v32 - *(_QWORD *)(v9 + 2112);
            }
            if (v15 >= 1)
            {
              v17 = *(_QWORD *)(v9 + 2536);
              if (v17)
              {
                v18 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 32);
                if (v18)
                  v18(v17, CFSTR("playerStats"), CFSTR("ViFrDr"), v15);
              }
              *(_QWORD *)(v9 + 2096) += v15;
            }
            if (v16 >= 1)
            {
              v19 = *(_QWORD *)(v9 + 2536);
              if (v19)
              {
                v20 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 32);
                if (v20)
                  v20(v19, CFSTR("playerStats"), CFSTR("ViFrDrImQ"), v16);
              }
              *(_QWORD *)(v9 + 2104) += v16;
            }
            v21 = (HIDWORD(v33) - v33);
            if ((int)v21 >= 1)
            {
              v22 = *(_QWORD *)(v9 + 2536);
              if (v22)
              {
                v23 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 32);
                if (v23)
                  v23(v22, CFSTR("playerStats"), CFSTR("ViFrDropDirImQ"), v21);
              }
            }
            if (v30 >= 1)
            {
              v24 = *(_QWORD *)(v9 + 2536);
              if (v24)
              {
                v25 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 32);
                if (v25)
                  v25(v24, CFSTR("playerStats"), CFSTR("ViGrFrDrAtImQ"), v30);
              }
              *(_QWORD *)(v9 + 2112) += v30;
            }
          }
          else
          {
            v15 = 0;
          }
          if (v10)
            CFRelease(v10);
          if (theDict)
            CFRelease(theDict);
          valuePtr += v15;
          v26 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
          if (v26)
          {
            v27 = v26;
            CFDictionarySetValue(v7, CFSTR("c-frames-dropped"), v26);
            CFRelease(v27);
          }
          else
          {
            FigSignalErrorAt();
          }
          CFDictionaryRemoveValue(v7, CFSTR("c-provisional-entry"));
        }
      }
      if (*(_QWORD *)(v5 + 2616) == a2)
      {
        *(_QWORD *)(v5 + 2616) = -1;
        v28 = *(_QWORD *)(v5 + 1040);
        if (v28)
        {
          while (1)
          {
            v29 = *(_QWORD *)(v28 + 424);
            if (v29 > a2 && *(_QWORD *)(v5 + 1104) == *(unsigned __int8 *)(v28 + 180) && *(_DWORD *)(v28 + 152) == 6)
              break;
            v28 = *(_QWORD *)(v28 + 8);
            if (!v28)
              return;
          }
          *(_QWORD *)(v5 + 2616) = v29;
        }
      }
    }
  }
}

uint64_t fpfs_UpdateCurrentAccessLogEntryPlayTimes(uint64_t result)
{
  uint64_t v1;
  CFIndex v2;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v4;
  const __CFAllocator *AllocatorForMedia;
  CFDateRef v6;
  CFDateRef v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CMTime v15;
  CMTime lhs;
  CMTime time;

  v1 = result;
  if ((*(_QWORD *)(result + 2616) & 0x8000000000000000) == 0)
  {
LABEL_2:
    CMBaseObjectGetDerivedStorage();
    v2 = *(_QWORD *)(v1 + 2616);
    if ((v2 & 0x8000000000000000) == 0 && v2 < CFArrayGetCount(*(CFArrayRef *)(v1 + 1904)))
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 1904), v2);
      if (!ValueAtIndex)
      {
LABEL_38:
        FigSignalErrorAt();
        goto LABEL_24;
      }
      v4 = ValueAtIndex;
      if (CFDictionaryContainsKey(ValueAtIndex, CFSTR("c-provisional-entry")))
      {
        if (CFDictionaryContainsKey(v4, CFSTR("date")) || *(double *)(v1 + 1936) <= 0.0)
        {
LABEL_10:
          if (!fpfs_UpdateAccessLogEntryPlayTimeForKey(v4, CFSTR("c-duration-watched"), *(double *)(v1 + 1944), *(double *)(v1 + 1936), fabsf(*(float *)(v1 + 840)))&& !fpfs_UpdateAccessLogEntryPlayTimeForKey(v4, CFSTR("c-wall-clock-duration-watched"), *(double *)(v1 + 1952), *(double *)(v1 + 1936), 1.0))
          {
            if (*(float *)(v1 + 840) == 0.0)
            {
              *(_QWORD *)(v1 + 1936) = 0;
              v8 = 0;
            }
            else
            {
              *(CFAbsoluteTime *)(v1 + 1936) = CFAbsoluteTimeGetCurrent();
              fpfs_GetTime(v1, (uint64_t)&lhs);
              v15 = *(CMTime *)(v1 + 1176);
              CMTimeAdd(&time, &lhs, &v15);
              *(Float64 *)(v1 + 1928) = CMTimeGetSeconds(&time);
              v8 = *(_QWORD *)(v1 + 1936);
            }
            *(_QWORD *)(v1 + 1944) = 0;
            *(_QWORD *)(v1 + 1952) = 0;
            *(_QWORD *)(v1 + 1920) = v8;
          }
          goto LABEL_24;
        }
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        v6 = CFDateCreate(AllocatorForMedia, *(CFAbsoluteTime *)(v1 + 1936));
        if (v6)
        {
          v7 = v6;
          CFDictionarySetValue(v4, CFSTR("date"), v6);
          CFRelease(v7);
          goto LABEL_10;
        }
        goto LABEL_38;
      }
    }
LABEL_24:
    result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 1904), *(_QWORD *)(v1 + 2616));
    if (result)
    {
      result = CFDictionaryContainsKey((CFDictionaryRef)result, CFSTR("c-total-audio-channels"));
      if (!(_DWORD)result)
      {
        v12 = *(_QWORD *)(v1 + 1040);
        if (v12)
        {
          v13 = 0;
          do
          {
            if (*(_DWORD *)(v12 + 152) == 6 && *(_DWORD *)(v12 + 32) == 1936684398)
            {
              result = fpfs_GetAudioChannelCount(*(const opaqueCMFormatDescription **)(v12 + 40));
              if (v13 <= (int)result)
              {
                result = fpfs_GetAudioChannelCount(*(const opaqueCMFormatDescription **)(v12 + 40));
                v13 = (int)result;
              }
            }
            v12 = *(_QWORD *)(v12 + 8);
          }
          while (v12);
          if (v13 >= 1)
            return FigCFDictionarySetInt64();
        }
      }
    }
    return result;
  }
  v9 = *(_QWORD *)(result + 1040);
  if (v9)
  {
    while (1)
    {
      if (*(_DWORD *)(v9 + 152) == 6)
      {
        v10 = *(_QWORD *)(v9 + 424);
        if ((v10 & 0x8000000000000000) == 0 && *(_QWORD *)(v1 + 1104) == *(unsigned __int8 *)(v9 + 180))
        {
          v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 1904), v10);
          result = CFDictionaryContainsKey(v11, CFSTR("c-provisional-entry"));
          if ((_DWORD)result)
            break;
        }
      }
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
      {
        if ((*(_QWORD *)(v1 + 2616) & 0x8000000000000000) == 0)
          goto LABEL_2;
        return result;
      }
    }
    v14 = *(_QWORD *)(v9 + 424);
    *(_QWORD *)(v1 + 2616) = v14;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_2;
  }
  return result;
}

uint64_t fpfs_GetAudioChannelCount(const opaqueCMFormatDescription *a1)
{
  const AudioFormatListItem *RichestDecodableFormat;

  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(a1);
  if (RichestDecodableFormat)
    return RichestDecodableFormat->mASBD.mChannelsPerFrame;
  else
    return CMAudioFormatDescriptionGetChannelCount();
}

uint64_t fpfs_UpdateAccessLogEntryPlayTimeForKey(const __CFDictionary *a1, const void *a2, double a3, double a4, double a5)
{
  const __CFNumber *Value;
  double v9;
  double valuePtr;

  valuePtr = 0.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
    v9 = valuePtr;
  }
  else
  {
    v9 = 0.0;
  }
  valuePtr = v9 + a3;
  if (a4 != 0.0)
    valuePtr = valuePtr + (CFAbsoluteTimeGetCurrent() - a4) * a5;
  return FigCFDictionarySetDouble();
}

CFTypeRef fpfsi_copyCurrentVideoDestination(uint64_t a1)
{
  uint64_t RenderingTrackofType;
  const void *v2;

  RenderingTrackofType = fpfs_FirstRenderingTrackofType(a1, 1986618469);
  if (RenderingTrackofType && (v2 = *(const void **)(RenderingTrackofType + 88)) != 0)
    return CFRetain(v2);
  else
    return 0;
}

uint64_t fpfsi_canMetadataFormatsSync(const opaqueCMFormatDescription *a1, const opaqueCMFormatDescription *a2)
{
  FourCharCode MediaSubType;
  uint64_t result;

  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  if (MediaSubType != CMFormatDescriptionGetMediaSubType(a2))
    return 0;
  result = 0;
  if (a1 && a2)
  {
    if (MediaSubType == 1835360888)
    {
      return CMFormatDescriptionEqual(a1, a2);
    }
    else if (MediaSubType == 1701671783)
    {
      CMFormatDescriptionGetExtensions(a1);
      CMFormatDescriptionGetExtensions(a2);
      return FigCFEqual();
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t fpfs_FirstTrackWithFormatDescriptionOfType(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    for (result = *(_QWORD *)(result + 1040); result; result = *(_QWORD *)(result + 8))
    {
      if (*(_DWORD *)(result + 32) == a2 && *(_QWORD *)(result + 40))
        break;
    }
  }
  return result;
}

uint64_t fpfs_SetFeederTrack(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  v2 = *(_QWORD *)(result + 8);
  if (v2 != a2)
  {
    v4 = result;
    if (v2)
    {
      *(_BYTE *)(v2 + 181) = 0;
      result = CMBaseObjectGetDerivedStorage();
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_QWORD *)(v4 + 8) = 0;
      for (i = *(_QWORD *)(v4 + 88); i; i = *(_QWORD *)(i + 88))
        *(_QWORD *)(i + 8) = 0;
    }
    if (a2)
    {
      *(_QWORD *)(v4 + 8) = a2;
      v7 = *(_QWORD *)(v4 + 88);
      v8 = a2;
      if (v7)
      {
        do
        {
          *(_QWORD *)(v7 + 8) = a2;
          v7 = *(_QWORD *)(v7 + 88);
        }
        while (v7);
        v8 = *(_QWORD *)(v4 + 8);
      }
      *(_BYTE *)(v8 + 181) = 1;
      result = CMBaseObjectGetDerivedStorage();
      if (dword_1EE2A2A88)
      {
        v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        return fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return result;
}

uint64_t fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a1 + 88);
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a1 + 32));
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v7)
    return 4294954514;
  result = v7(FigBaseObject, a2, a3);
  if ((_DWORD)result)
    v9 = 1;
  else
    v9 = v5 == 0;
  if (!v9)
  {
    do
    {
      v10 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v5 + 32));
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v11)
        v11(v10, a2, a3);
      v5 = *(_QWORD *)(v5 + 88);
    }
    while (v5);
    return 0;
  }
  return result;
}

uint64_t fpfs_LastRenderingTrackofType(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t result;

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
  v6 = v5 == 0;
  result = 0;
  while (!v6 && v5 != a3)
  {
    if (*(_DWORD *)(v5 + 32) == a2)
    {
      if (*(_QWORD *)(v5 + 96))
        result = v5;
    }
    v5 = *(_QWORD *)(v5 + 8);
    v6 = v5 == 0;
  }
  return result;
}

void fpfs_deferredAudioPlayResourceReleased(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int HaveSamePassthroughFormat;
  int AudioChannelCount;
  uint64_t v16;
  unsigned int (*v17)(uint64_t);
  CMTime rhs;
  CMTime type;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)DerivedStorage;
  v8 = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)v7);
  if (!FigRetainProxyIsInvalidated() && !*(_BYTE *)(v8 + 51))
  {
    v9 = *(_QWORD *)(DerivedStorage + 1040);
    if (v9)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        if (!v11)
        {
          if (*(_DWORD *)(v9 + 32) == 1936684398 && *(_QWORD *)(v9 + 96))
          {
            if (*(_BYTE *)(v9 + 422))
              v11 = v9;
            else
              v11 = 0;
          }
          else
          {
            v11 = 0;
          }
        }
        v12 = *(_QWORD *)(v9 + 96);
        if (v12 && *(_QWORD *)(v12 + 32) == a4)
        {
          *(_BYTE *)(v9 + 421) = 1;
          v10 = v9;
        }
        v9 = *(_QWORD *)(v9 + 8);
      }
      while (v9);
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    if (dword_1EE2A2A88)
    {
      LODWORD(v20.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v11 && *(_QWORD *)(v11 + 96) && !*(_BYTE *)(v11 + 456) && v10)
    {
      if (*(_QWORD *)(v11 + 64) == *(_QWORD *)(v10 + 64))
      {
        HaveSamePassthroughFormat = fpfs_DoTracksHaveSamePassthroughFormat(v11, v10, 0);
      }
      else
      {
        LOBYTE(v22.value) = 0;
        HaveSamePassthroughFormat = fpfs_DoTracksHaveSamePassthroughFormat(v11, v10, &v22);
        if (LOBYTE(v22.value))
        {
          AudioChannelCount = fpfs_GetAudioChannelCount(*(const opaqueCMFormatDescription **)(v11 + 40));
          HaveSamePassthroughFormat = AudioChannelCount == fpfs_GetAudioChannelCount(*(const opaqueCMFormatDescription **)(v10 + 40));
        }
      }
      if (HaveSamePassthroughFormat
        && (*(_BYTE *)(*(_QWORD *)(v11 + 96) + 25) || !fpfs_SetTimebaseOnTrack(a2, v11)))
      {
        if (*(_BYTE *)(v10 + 456))
        {
          if (fpfs_SetRateOnTrack((uint64_t *)v11, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], *(float *)(DerivedStorage + 840)))goto LABEL_42;
LABEL_41:
          *(_BYTE *)(v11 + 422) = 0;
          goto LABEL_42;
        }
        if (gFSPIsCrossfadeOn == 1)
        {
          memset(&v21, 0, sizeof(v21));
          CMBaseObjectGetDerivedStorage();
          v22 = *(CMTime *)(v11 + 192);
          type = *(CMTime *)(v10 + 216);
          rhs = *(CMTime *)(v11 + 192);
          CMTimeSubtract(&v20, &type, &rhs);
          type = v20;
          rhs = *(CMTime *)gFSPAudioCrossfadeDuration;
          if (CMTimeCompare(&type, &rhs) >= 1)
            v20 = *(CMTime *)gFSPAudioCrossfadeDuration;
          type = v20;
          rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          if (CMTimeCompare(&type, &rhs) >= 1)
          {
            type = v22;
            rhs = v20;
            CMTimeAdd(&v21, &type, &rhs);
            type = v22;
            rhs = v21;
            fpfs_scheduleVolumeRamping(v11, &type, &rhs, (const void *)gFSPAudioCurveRampStyle, 0.0, 1.0);
            type = v22;
            rhs = v21;
            fpfs_scheduleVolumeRamping(v10, &type, &rhs, (const void *)gFSPAudioCurveRampStyle, 1.0, 0.0);
          }
        }
        v16 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 32);
        v17 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v17 && !v17(v16))
          goto LABEL_41;
      }
    }
  }
LABEL_42:
  fpfs_UnlockAndPostNotificationsWithCaller(v7);
}

void sub_1929CEC20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  const void *v62;

  if (v62)
    CFRelease(v62);
}

void fpfs_CancelGaplessTransitionThatDependsOnTrack(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  const __CFArray *Next;
  const __CFArray *v8;
  const __CFArray *v9;
  uint64_t v11;
  uint64_t RenderingTrackofType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFNumberRef v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, CFNumberRef);
  int v21;
  CMTime v22;
  CMTime time1;
  CMTime v24;

  v24 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(DerivedStorage, 0);
  v8 = fpfs_getNext(DerivedStorage, Next);
  if (v8)
  {
    v9 = v8;
    if ((*(const __CFArray **)a2 == Next || *(_QWORD *)a2 == (_QWORD)v8) && *(_DWORD *)(a2 + 32) == 1936684398)
    {
      v11 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 2440) == 1)
      {
        RenderingTrackofType = fpfs_LastRenderingTrackofType((uint64_t)Next, 1936684398, 0);
        v13 = fpfs_FirstRenderingTrackofType((uint64_t)v9, 1936684398);
        if (RenderingTrackofType)
        {
          v14 = v13;
          if (v13)
          {
            if (RenderingTrackofType == a2 || v13 == a2)
            {
              fpfs_GetTime(v11, (uint64_t)&v24);
              v15 = *(_QWORD *)(a2 + 96);
              if (v15 == *(_QWORD *)(RenderingTrackofType + 96) && v15 == *(_QWORD *)(v14 + 96))
              {
                time1 = v24;
                v22 = *(CMTime *)(v11 + 480);
                if (CMTimeCompare(&time1, &v22) < 0 && !fpfsi_PlaybackHasTraversedForwardEndTime())
                {
                  fpfs_CancelGaplessAttempt(a1, v9, *(_QWORD *)a2 == (_QWORD)Next);
                  if (a3 || *(const __CFArray **)a2 == v9)
                  {
                    v16 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
                    v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, (const void *)(v11 + 160));
                    v18 = 0;
                    if (v17 && v16)
                    {
                      v19 = *(_QWORD *)(*(_QWORD *)(RenderingTrackofType + 96) + 32);
                      v20 = *(uint64_t (**)(uint64_t, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 80);
                      if (!v20)
                        goto LABEL_24;
                      v18 = v20(v19, v17) != 0;
                    }
                    if (v16 && !v18)
                    {
LABEL_28:
                      if (v17)
                        CFRelease(v17);
                      return;
                    }
LABEL_24:
                    LOBYTE(time1.value) = 0;
                    v21 = fpfs_StealBuffersAfterTransitionMarker(*(opaqueCMBufferQueue **)(*(_QWORD *)(RenderingTrackofType + 96) + 40), 0, 0, (char *)&time1);
                    if ((!LOBYTE(time1.value) || v21) && (*(_BYTE *)(v11 + 332) & 1) == 0)
                      fpfs_stopResetDisturbReprepareAndResume(a1, Next, 0);
                    goto LABEL_28;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void fpfs_releaseRenderChain(const __CFArray *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v7;
  const opaqueCMFormatDescription *v8;
  CMMediaType MediaType;
  _BOOL4 v10;
  int v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t FigBaseObject;
  _QWORD *v16;
  void (*v17)(uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *AllocatorForMedia;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  const void *v26;
  const void *v27;
  const void *v28;
  CMBufferQueueRef queueOut[29];

  queueOut[27] = *(CMBufferQueueRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  if ((*a2)-- == 1)
  {
    v7 = v5;
    if (*((_BYTE *)a2 + 24))
      fpfs_EstablishTimebase(a1);
    v8 = (const opaqueCMFormatDescription *)a2[2];
    if (v8)
    {
      MediaType = CMFormatDescriptionGetMediaType(v8);
      if (MediaType == 1668047728)
        FPSupport_resetClosedCaptionLayer(v7 + 208);
      if (MediaType == 1936684398)
      {
        v10 = 0;
        v11 = 1;
      }
      else
      {
        v11 = 0;
        v10 = MediaType == 1986618469;
      }
      FigFormatDescriptionRelease();
      a2[2] = 0;
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    v12 = (const void *)a2[6];
    if (v12)
    {
      CFRelease(v12);
      a2[6] = 0;
    }
    v13 = a2[4];
    if (v13)
    {
      queueOut[0] = 0;
      FPSupport_ForgetAboutMetadataOutputRenderPipeline(*(_QWORD *)(DerivedStorage + 1872), v13);
      v14 = *(_QWORD *)(DerivedStorage + 1856);
      if (v14)
        FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipeline(v14, a2[4]);
      if (v10)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      else if (v11)
      {
        fpfsi_RemoveAudioRenderChainListeners();
      }
      FigBaseObject = FigRenderPipelineGetFigBaseObject(a2[4]);
      v16 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v16 >= 2uLL)
      {
        v17 = (void (*)(uint64_t))v16[8];
        if (v17)
          v17(FigBaseObject);
      }
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a2[5]
        && (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers(),
            !CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, queueOut)))
      {
        MEMORY[0x19402B01C](a2[5], fpfs_StealBuffer, queueOut[0]);
        fpfs_SendBufferQueueToChomper(v7, (uint64_t)queueOut[0]);
      }
      else
      {
        v21 = a2[4];
        v22 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
        if (v22)
          v22(v21, 0);
      }
      v23 = FigRenderPipelineGetFigBaseObject(a2[4]);
      if (v23)
      {
        v24 = v23;
        v25 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v25)
          v25(v24);
      }
      CFRelease((CFTypeRef)a2[4]);
      a2[4] = 0;
    }
    if (a2[5])
    {
      FigBufferQueueRelease();
      a2[5] = 0;
    }
    v26 = (const void *)a2[7];
    if (v26)
    {
      CFRelease(v26);
      a2[7] = 0;
    }
    v27 = (const void *)a2[8];
    if (v27)
    {
      CFRelease(v27);
      a2[8] = 0;
    }
    v28 = (const void *)a2[9];
    if (v28)
    {
      CFRelease(v28);
      a2[9] = 0;
    }
    if (v10)
      --*(_QWORD *)(v7 + 616);
    if (a2[11])
      fpfs_releaseRenderChain(a1);
    free(a2);
  }
}

uint64_t fpfsi_FirstImageEnqueued(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  CFTypeRef v8;
  CFTypeRef v9[27];

  v9[25] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v8 = 0;
  v9[0] = 0;
  result = fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, v9, &v8);
  if ((_DWORD)result)
  {
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (dword_1EE2A2A88)
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

uint64_t fpfs_DoTracksHaveSamePassthroughFormat(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v5 = fpfs_WantAudioHardwarePassthroughForTrack(a1, (int *)&v8 + 1);
  if (v5 == fpfs_WantAudioHardwarePassthroughForTrack(a2, (int *)&v8)
    && (!v5 || HIDWORD(v8) == (_DWORD)v8))
  {
    result = 1;
    if (!a3)
      return result;
  }
  else
  {
    result = 0;
    if (!a3)
      return result;
  }
  if (v5)
    v7 = 0;
  else
    v7 = result;
  *a3 = v7;
  return result;
}

uint64_t fpfs_SetTimebaseOnTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(a2 + 96), (uint64_t)CFSTR("Timebase"), *(_QWORD *)(DerivedStorage + 576));
  if (!(_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(a2 + 96) + 25) = 1;
    return fpfs_GetRelativeRateAndSetRate2OnRenderPipelines(a1, a2);
  }
  return result;
}

uint64_t fpfs_WantAudioHardwarePassthroughForTrack(uint64_t a1, int *a2)
{
  uint64_t result;
  int v5;
  int AudioDeviceMaxPhysicalOutputChannelCount;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 32) != 1936684398)
    goto LABEL_13;
  if (!*(_QWORD *)(a1 + 40))
  {
    FigSignalErrorAt();
LABEL_13:
    v5 = 0;
    goto LABEL_14;
  }
  result = FigAudioQueueRenderPipelineIsPassthroughSupported();
  if ((_DWORD)result)
  {
    result = fpfs_passthroughFormatForAudioFormat(*(const opaqueCMFormatDescription **)(a1 + 40));
    v5 = result;
    if (!(_DWORD)result)
      goto LABEL_15;
    AudioDeviceMaxPhysicalOutputChannelCount = fpfs_GetAudioDeviceMaxPhysicalOutputChannelCount(*(_QWORD *)a1, 0, 0);
    v7 = fpfs_GetAudioDeviceMaxPhysicalOutputChannelCount(*(_QWORD *)a1, 1, v5);
    if (v7 >= 1)
    {
      v8 = v7;
      CMBaseObjectGetDerivedStorage();
      CMBaseObjectGetDerivedStorage();
      if (FigCFEqual()
        || (CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 40)),
            v8 > AudioDeviceMaxPhysicalOutputChannelCount))
      {
        result = 1;
        if (!a2)
          return result;
      }
      else
      {
        result = FigAudioCodecTypeIsDecodable() == 0;
        if (!a2)
          return result;
      }
      goto LABEL_16;
    }
LABEL_14:
    result = 0;
LABEL_15:
    if (!a2)
      return result;
    goto LABEL_16;
  }
  v5 = 0;
  if (!a2)
    return result;
LABEL_16:
  *a2 = v5;
  return result;
}

uint64_t fpfs_passthroughFormatForAudioFormat(const opaqueCMFormatDescription *a1)
{
  uint64_t v2;
  signed int MediaSubType;
  int v4;
  int v5;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  int v8;
  uint64_t v9;
  signed int v10;
  int v11;
  int v12;
  size_t sizeOut;

  v2 = 1700997939;
  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  if (MediaSubType <= 1885692722)
  {
    if (MediaSubType > 1700997938)
    {
      if (MediaSubType == 1700997939)
        return v2;
      if (MediaSubType != 1700998451)
      {
        v4 = 1885547315;
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    if (MediaSubType == 1667574579)
      return v2;
    v5 = 1667575091;
LABEL_12:
    if (MediaSubType != v5)
      goto LABEL_27;
    goto LABEL_18;
  }
  if (MediaSubType > 1902469938)
  {
    if (MediaSubType == 2053464883)
      goto LABEL_18;
    if (MediaSubType == 2053319475)
      return v2;
    v5 = 1902469939;
    goto LABEL_12;
  }
  if (MediaSubType != 1885692723)
  {
    v4 = 1902324531;
LABEL_16:
    if (MediaSubType == v4)
      return v2;
    goto LABEL_27;
  }
LABEL_18:
  sizeOut = 0;
  FormatList = CMAudioFormatDescriptionGetFormatList(a1, &sizeOut);
  if (FormatList && sizeOut > 0x2F)
  {
    mFormatID = FormatList->mASBD.mFormatID;
    if (mFormatID <= 1885547314)
    {
      if (mFormatID == 1667574579)
        return v2;
      v8 = 1700997939;
    }
    else
    {
      if (mFormatID == 1885547315 || mFormatID == 1902324531)
        return v2;
      v8 = 2053319475;
    }
    if (mFormatID == v8)
      return v2;
  }
LABEL_27:
  v9 = 1633889587;
  v10 = CMFormatDescriptionGetMediaSubType(a1);
  v2 = 1700998451;
  if (v10 > 1885430578)
  {
    if (v10 <= 1902469938)
    {
      if (v10 == 1885430579)
        return v9;
      if (v10 != 1885692723)
      {
        v11 = 1902207795;
LABEL_43:
        if (v10 != v11)
          return 0;
        return v9;
      }
      return v2;
    }
    if (v10 == 1902469939)
      return v2;
    if (v10 == 2053202739)
      return v9;
    v12 = 2053464883;
LABEL_39:
    if (v10 != v12)
      return 0;
    return v2;
  }
  if (v10 <= 1667326770)
  {
    if (v10 == 1633889587)
      return v9;
    v11 = 1667312947;
    goto LABEL_43;
  }
  if (v10 == 1667326771)
    return v9;
  if (v10 != 1667575091)
  {
    v12 = 1700998451;
    goto LABEL_39;
  }
  return v2;
}

uint64_t fpfs_GetAudioDeviceMaxPhysicalOutputChannelCount(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  unsigned int (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFNumberRef number;
  CFTypeRef cf;
  unsigned int valuePtr;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a3)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      result = 0;
      if (a3 == 1633889587 && *(_QWORD *)(DerivedStorage + 536))
      {
        if (*(_BYTE *)(DerivedStorage + 562))
          return 6;
        else
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v7 = CMBaseObjectGetDerivedStorage();
    if (FigCFEqual())
    {
      return 2;
    }
    else if (*(_QWORD *)(v7 + 504))
    {
      valuePtr = 2;
      v8 = CMBaseObjectGetDerivedStorage();
      number = 0;
      cf = 0;
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
      {
        v9 = *(_QWORD *)(v8 + 504);
        AllocatorForMedia = FigGetAllocatorForMedia();
        CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v9);
        v12 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
        if (v12 && !v12(CMBaseObject, CFSTR("AtmosIsSupported"), AllocatorForMedia, &cf))
        {
          if (FigCFEqual())
          {
            valuePtr = 16;
          }
          else
          {
            v13 = *(_QWORD *)(v8 + 504);
            v14 = FigGetAllocatorForMedia();
            v15 = FigBufferedAirPlayOutputGetCMBaseObject(v13);
            v16 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v16 && !v16(v15, CFSTR("MaximumNumberOfOutputChannels"), v14, &number))
              CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
          }
        }
      }
      else
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (cf)
        CFRelease(cf);
      if (number)
        CFRelease(number);
      return valuePtr;
    }
    else
    {
      return fpfs_GetAudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession();
    }
  }
  return result;
}

uint64_t CMAudioFormatDescriptionIsAtmos(const opaqueCMFormatDescription *a1)
{
  signed int MediaSubType;
  uint64_t result;
  int v4;
  int v5;
  const AudioFormatListItem *FormatList;
  size_t sizeOut;

  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  result = 1;
  if (MediaSubType <= 1885692722)
  {
    if (MediaSubType > 1700997938)
    {
      if (MediaSubType == 1700997939)
        return result;
      if (MediaSubType != 1700998451)
      {
        v4 = 1885547315;
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (MediaSubType == 1667574579)
      return result;
    v5 = 1667575091;
LABEL_12:
    if (MediaSubType != v5)
      return 0;
    goto LABEL_16;
  }
  if (MediaSubType > 1902469938)
  {
    if (MediaSubType == 2053464883)
      goto LABEL_16;
    if (MediaSubType == 2053319475)
      return result;
    v5 = 1902469939;
    goto LABEL_12;
  }
  if (MediaSubType != 1885692723)
  {
    v4 = 1902324531;
    goto LABEL_24;
  }
LABEL_16:
  sizeOut = 0;
  FormatList = CMAudioFormatDescriptionGetFormatList(a1, &sizeOut);
  result = 0;
  if (FormatList && sizeOut >= 0x30)
  {
    MediaSubType = FormatList->mASBD.mFormatID;
    result = 1;
    if (MediaSubType <= 1885547314)
    {
      if (MediaSubType == 1667574579)
        return result;
      v4 = 1700997939;
LABEL_24:
      if (MediaSubType == v4)
        return result;
      return 0;
    }
    if (MediaSubType != 1885547315 && MediaSubType != 1902324531)
    {
      v4 = 2053319475;
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t fpfs_GetAudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession()
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v2;
  int AudioSessionOutputChannelCount;
  unsigned int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 2;
  v4 = 2;
  v2 = *(_QWORD *)(DerivedStorage + 536);
  if (v2)
  {
    AudioSessionOutputChannelCount = FPSupport_GetAudioSessionOutputChannelCount(v2, (int *)&v4);
    result = v4;
    if (!AudioSessionOutputChannelCount && v4 == 32)
    {
      if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561))
        return 16;
      else
        return v4;
    }
  }
  return result;
}

uint64_t fpfs_GetRelativeRateAndSetRate2OnRenderPipelines(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t, CMClockOrTimebaseRef *);
  uint64_t v8;
  const void *Clock;
  float RelativeRate;
  CFNumberRef v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v14;
  float valuePtr;
  CMClockOrTimebaseRef relativeToClockOrTimebase;

  relativeToClockOrTimebase = 0;
  valuePtr = 0.0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 3160)
    || *(_DWORD *)(a2 + 32) != 1936684398
    || (v3 = *(_QWORD *)(a2 + 96)) == 0)
  {
    v14 = 0;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v3 + 32);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMClockOrTimebaseRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (!v7)
  {
    v14 = 4294954514;
    goto LABEL_10;
  }
  v8 = v7(FigBaseObject, CFSTR("PreferredClock"), AllocatorForMedia, &relativeToClockOrTimebase);
  if ((_DWORD)v8)
  {
    v14 = v8;
    goto LABEL_10;
  }
  Clock = (const void *)FigRateMinderGetClock();
  RelativeRate = CMSyncGetRelativeRate(Clock, relativeToClockOrTimebase);
  valuePtr = RelativeRate;
  v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  v12 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(a2 + 96) + 32));
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (!v13)
  {
    v14 = 4294954514;
    if (!v11)
      goto LABEL_10;
    goto LABEL_15;
  }
  v14 = v13(v12, CFSTR("FAQRate2"), v11);
  if (v11)
LABEL_15:
    CFRelease(v11);
LABEL_10:
  if (relativeToClockOrTimebase)
    CFRelease(relativeToClockOrTimebase);
  return v14;
}

void fpfs_scheduleVolumeRamping(uint64_t a1, CMTime *a2, CMTime *a3, const void *a4, float a5, float a6)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  const __CFAllocator *v13;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  const __CFAllocator *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  const __CFAllocator *v19;
  CFDictionaryRef v20;
  CFDictionaryRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  const __CFAllocator *v24;
  CFDictionaryRef v25;
  CFDictionaryRef v26;
  CMTime v27;
  void *values;
  float v29;
  float valuePtr;

  v29 = a6;
  valuePtr = a5;
  if (*(_QWORD *)(a1 + 96))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    values = Mutable;
    if (Mutable)
    {
      v12 = Mutable;
      v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v27 = *a2;
      v14 = CMTimeCopyAsDictionary(&v27, v13);
      if (v14)
      {
        v15 = v14;
        CFArrayAppendValue(v12, v14);
        CFRelease(v15);
        v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
        if (v17)
        {
          v18 = v17;
          CFArrayAppendValue(v12, v17);
          CFRelease(v18);
          CFArrayAppendValue(v12, a4);
          v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
          v27 = *a3;
          v20 = CMTimeCopyAsDictionary(&v27, v19);
          if (v20)
          {
            v21 = v20;
            CFArrayAppendValue(v12, v20);
            CFRelease(v21);
            v22 = CFNumberCreate(v16, kCFNumberFloatType, &v29);
            if (v22)
            {
              v23 = v22;
              CFArrayAppendValue(v12, v22);
              CFRelease(v23);
              CFArrayAppendValue(v12, a4);
              v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
              v25 = CFDictionaryCreate(v24, (const void **)kFigPlaybackItemAudioCurve_Volume, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v25)
              {
                v26 = v25;
                fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(a1 + 96), (uint64_t)CFSTR("AudioCurves"), (uint64_t)v25);
                CFRelease(v26);
              }
            }
          }
        }
      }
      if (values)
        CFRelease(values);
    }
  }
}

void fpfsi_StoreTrackPerformanceDictionaries(uint64_t a1, CFArrayRef *a2)
{
  const __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v6;
  CFIndex Count;
  CFIndex v8;

  Mutable = *a2;
  if (!*a2)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *a2 = Mutable;
  }
  v6 = *(_QWORD *)(a1 + 96);
  if (*(_BYTE *)(v6 + 80))
  {
    Count = CFArrayGetCount(Mutable);
    Mutable = *a2;
    if (Count > 0)
    {
      v8 = CFArrayGetCount(*a2) - 1;
      CFArraySetValueAtIndex(Mutable, v8, *(const void **)(*(_QWORD *)(a1 + 96) + 72));
      return;
    }
    v6 = *(_QWORD *)(a1 + 96);
  }
  CFArrayAppendValue(Mutable, *(const void **)(v6 + 72));
  *(_BYTE *)(*(_QWORD *)(a1 + 96) + 80) = 1;
}

uint64_t fpfsi_PlaybackHasTraversedForwardEndTime()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  CMTime v3;
  CMTime time1;
  CMTime v5;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v1 = result;
    result = CMBaseObjectGetDerivedStorage();
    if (result)
    {
      v2 = result;
      memset(&v5, 0, sizeof(v5));
      fpfs_GetTime(v1, (uint64_t)&v5);
      if ((*(_DWORD *)(v1 + 1380) & 0x1D) != 1)
        return 0;
      time1 = v5;
      v3 = *(CMTime *)(v1 + 1368);
      return (CMTimeCompare(&time1, &v3) & 0x80000000) == 0 && *(float *)(v2 + 108) >= 0.0;
    }
  }
  return result;
}

void fpfs_CancelGaplessAttempt(const void *a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t RenderingTrackofType;
  BOOL v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a2, 1936684398);
  if (*(_BYTE *)(DerivedStorage + 2440))
    v8 = RenderingTrackofType == 0;
  else
    v8 = 1;
  if (!v8 && *(_BYTE *)(RenderingTrackofType + 423))
  {
    if (*(_BYTE *)(DerivedStorage + 2441))
      fpfs_EnqueueNotification(a1, CFSTR("CancelNextItemTransitionTimer"), a2, 0);
    *(_BYTE *)(DerivedStorage + 2440) = 0;
    *(_BYTE *)(RenderingTrackofType + 423) = 0;
    if (a3)
      fpfs_stopResetDisturbReprepareAndResume(a1, (const __CFArray *)a2, 0);
  }
}

uint64_t fpfs_StealBuffersAfterTransitionMarker(opaqueCMBufferQueue *a1, int a2, opaqueCMBufferQueue *a3, char *a4)
{
  const __CFAllocator *AllocatorForMedia;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v10;
  const __CFAllocator *v11;
  const CMBufferCallbacks *v12;
  char v13;
  uint64_t v14;
  CMBufferRef v16;
  void *v17;
  int v18;
  const __CFString *v19;
  opaqueCMBufferQueue *v20;
  int v21;
  CFTypeRef cf;
  CMBufferQueueRef queueOut;

  cf = 0;
  queueOut = 0;
  if (!a1)
  {
    v10 = FigSignalErrorAt();
LABEL_31:
    v14 = v10;
    goto LABEL_8;
  }
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v10 = CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
  if ((_DWORD)v10)
    goto LABEL_31;
  v11 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v12 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v10 = CMBufferQueueCreate(v11, 0, v12, (CMBufferQueueRef *)&cf);
  if ((_DWORD)v10)
    goto LABEL_31;
  MEMORY[0x19402B01C](a1, fpfs_StealBuffer, queueOut);
  if (CMBufferQueueIsEmpty(queueOut) || (v16 = CMBufferQueueDequeueAndRetain(queueOut)) == 0)
  {
LABEL_5:
    MEMORY[0x19402B01C](cf, fpfs_StealBuffer, a3);
    v13 = 0;
    goto LABEL_6;
  }
  v17 = (void *)v16;
  v18 = 0;
  v19 = (const __CFString *)*MEMORY[0x1E0CA2718];
  do
  {
    if (v18)
    {
      if (!a3)
      {
        CFRelease(v17);
        goto LABEL_29;
      }
      v20 = a3;
      goto LABEL_18;
    }
    if (fpfs_IsMarkerSampleContainingAttachment((opaqueCMSampleBuffer *)v17, v19))
    {
      MEMORY[0x19402B01C](cf, fpfs_StealBuffer, a1);
      if (!a2)
        goto LABEL_19;
      v20 = a1;
LABEL_18:
      CMBufferQueueEnqueue(v20, v17);
LABEL_19:
      v21 = 0;
      v18 = 1;
      goto LABEL_20;
    }
    CMBufferQueueEnqueue((CMBufferQueueRef)cf, v17);
    v18 = 0;
    v21 = 1;
LABEL_20:
    CFRelease(v17);
    v17 = (void *)CMBufferQueueDequeueAndRetain(queueOut);
  }
  while (v17);
  if (v21)
    goto LABEL_5;
LABEL_29:
  v13 = 1;
LABEL_6:
  v14 = 0;
  if (a4)
    *a4 = v13;
LABEL_8:
  if (queueOut)
    CFRelease(queueOut);
  if (cf)
    CFRelease(cf);
  return v14;
}

void fpfs_EnqueueNotification(const void *a1, const void *a2, const void *a3, const void *a4)
{
  fpfs_LockMutexWithCaller((uint64_t)a1);
  fpfs_EnqueueNotificationWithoutLocking((uint64_t)a1, a2, a3, a4);
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

uint64_t sub_1929D0790()
{
  uint64_t v0;

  return v0;
}

uint64_t fpfs_EnqueueNotificationWithoutLocking(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const void *v19;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage;
  v9 = (_QWORD *)(DerivedStorage + 88);
  if (*(_QWORD *)(DerivedStorage + 88))
  {
    v10 = *(_QWORD *)(DerivedStorage + 96);
    if (*(const void **)(v10 - 24) == a3 && *(const void **)(v10 - 16) == a4 && CFEqual(*(CFTypeRef *)(v10 - 32), a2))
      return 0;
  }
  v11 = malloc_type_malloc(0x28uLL, 0xE0040CDB25F8DuLL);
  if (v11)
  {
    v12 = v11;
    if (CFEqual(a2, CFSTR("StreamLikelyToKeepUp")))
    {
      v13 = *v9;
      while (v13)
      {
        while (1)
        {
          v14 = v13;
          v13 = *(_QWORD *)(v13 + 32);
          if (CFEqual(*(CFTypeRef *)v14, CFSTR("StreamUnlikelyToKeepUp")))
          {
            if (*(const void **)(v14 + 8) == a3)
              break;
          }
          if (!v13)
            goto LABEL_23;
        }
        v15 = *v9;
        if (*v9 == v14)
        {
          v20 = *(_QWORD *)(v14 + 32);
          *v9 = v20;
          v18 = v9;
          if (v20)
            goto LABEL_15;
        }
        else
        {
          do
          {
            v16 = v15;
            v15 = *(_QWORD *)(v15 + 32);
          }
          while (v15 != v14);
          v17 = *(_QWORD *)(v14 + 32);
          *(_QWORD *)(v16 + 32) = v17;
          v18 = (_QWORD *)(v16 + 32);
          if (v17)
            goto LABEL_15;
        }
        *(_QWORD *)(v8 + 96) = v18;
LABEL_15:
        if (a3)
          CFRelease(a3);
        v19 = *(const void **)(v14 + 16);
        if (v19)
          CFRelease(v19);
        free((void *)v14);
      }
    }
LABEL_23:
    *v12 = a2;
    if (a3)
      v21 = CFRetain(a3);
    else
      v21 = 0;
    v12[1] = v21;
    if (a4)
      v22 = CFRetain(a4);
    else
      v22 = 0;
    v12[2] = v22;
    v12[3] = MEMORY[0x19402F228]();
    v12[4] = 0;
    **(_QWORD **)(v8 + 96) = v12;
    *(_QWORD *)(v8 + 96) = v12 + 4;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t fpfs_StealBuffer(CMBufferRef buf, CMBufferQueueRef queue)
{
  return CMBufferQueueEnqueue(queue, buf);
}

BOOL fpfs_IsMarkerSampleContainingAttachment(opaqueCMSampleBuffer *a1, const __CFString *a2)
{
  _BOOL8 result;

  result = fpfs_IsMarkerOnly(a1);
  if (result)
    return CMGetAttachment(a1, a2, 0) != 0;
  return result;
}

BOOL fpfs_IsMarkerOnly(opaqueCMSampleBuffer *a1)
{
  CMTime v3;

  if (CMSampleBufferGetNumSamples(a1))
    return 0;
  CMSampleBufferGetOutputPresentationTimeStamp(&v3, a1);
  return (v3.flags & 1) == 0;
}

uint64_t fpfs_EstablishTimebase(const __CFArray *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *Clock;
  OpaqueCMClock *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t FigBaseObject;
  unsigned int (*v15)(uint64_t, const __CFString *, uint64_t, CMClockRef *);
  uint64_t v16;
  uint64_t v17;
  uint64_t AllocatorForMedia;
  int v19;
  const __CFAllocator *v20;
  const __CFString *v21;
  const __CFAllocator *v22;
  CMClockRef v23;
  OpaqueCMClock *HostTimeClock;
  OpaqueCMTimebase *v25;
  OpaqueCMClock *v26;
  uint64_t v27;
  uint64_t v28;
  CMTimebaseRef *v29;
  const __CFAllocator *v30;
  _QWORD *v31;
  CMTime *v32;
  uint64_t *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v37;
  unsigned int v38;
  const void *v39;
  const char *v40;
  const char *v41;
  const __CFArray *v42;
  uint64_t v43;
  Float64 Seconds;
  uint64_t v45;
  Float64 v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, const __CFString *, uint64_t);
  uint64_t v53;
  unsigned int v54;
  const char *v55;
  const char *v56;
  CMClockRef clockOut;
  CMTime v58;
  os_log_type_t type;
  unsigned int v60;
  CMTime v61;
  int v62;
  const char *v63;
  __int16 v64;
  const void *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const __CFArray *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  Float64 v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  Float64 v79;
  __int16 v80;
  double v81;
  CMTime time;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (DerivedStorage)
    v4 = *(_QWORD *)(DerivedStorage + 792);
  else
    v4 = 0;
  clockOut = 0;
  v5 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_14;
  }
  v6 = 0;
  while (!*(_QWORD *)(v5 + 96))
  {
LABEL_10:
    v5 = *(_QWORD *)(v5 + 8);
    if (!v5)
      goto LABEL_14;
  }
  if (*(_DWORD *)(v5 + 32) != 1936684398)
  {
    if (!v6)
      v6 = *(_QWORD *)(v5 + 96);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v5 + 96);
LABEL_14:
  if (v4)
    v7 = v4;
  else
    v7 = v6;
  if (!*(_BYTE *)(DerivedStorage + 553))
  {
    v11 = 0;
    if (v7)
      goto LABEL_26;
LABEL_30:
    if (FigPreferAudioSessionClock())
    {
      v16 = CMBaseObjectGetDerivedStorage();
      if (!*(_QWORD *)(v16 + 536))
      {
LABEL_36:
        v23 = clockOut;
        HostTimeClock = CMClockGetHostTimeClock();
        clockOut = HostTimeClock;
        if (HostTimeClock)
          CFRetain(HostTimeClock);
        if (v23)
          CFRelease(v23);
        goto LABEL_40;
      }
      v17 = v16;
      AllocatorForMedia = FigGetAllocatorForMedia();
      v19 = FigAudioSessionClockCreate(AllocatorForMedia, *(const void **)(v17 + 536), 0, &clockOut);
    }
    else
    {
      v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v21 = CFStringCreateWithCString(v20, "VirtualAudioDevice_Default", 0);
      v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v19 = CMAudioDeviceClockCreate(v22, v21, &clockOut);
      if (v21)
        CFRelease(v21);
    }
    if (!v19)
      goto LABEL_40;
    goto LABEL_36;
  }
  if (!*(_QWORD *)(DerivedStorage + 3160))
  {
    v8 = *(_QWORD *)DerivedStorage;
    v9 = FigGetAllocatorForMedia();
    FigRateMinderCreate(v9, 0, v8, CFSTR("PlaylistVsHostTime"), 1, (CFTypeRef *)(v3 + 3160));
  }
  Clock = (const void *)FigRateMinderGetClock();
  if (Clock)
    v11 = (OpaqueCMClock *)CFRetain(Clock);
  else
    v11 = 0;
  clockOut = v11;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (!v7)
    goto LABEL_30;
LABEL_26:
  v12 = *(_QWORD *)(v7 + 32);
  if (!v12)
    goto LABEL_30;
  if (!v11)
  {
    v13 = FigGetAllocatorForMedia();
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v12);
    v15 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMClockRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
    if (!v15 || v15(FigBaseObject, CFSTR("PreferredClock"), v13, &clockOut))
      goto LABEL_30;
  }
LABEL_40:
  v25 = *(OpaqueCMTimebase **)(v3 + 576);
  v26 = clockOut;
  if (v25)
  {
    v27 = CMTimebaseSetSourceClock(v25, clockOut);
  }
  else
  {
    v28 = CMBaseObjectGetDerivedStorage();
    v29 = (CMTimebaseRef *)(v28 + 576);
    *(_QWORD *)(v28 + 576) = 0;
    v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v54 = CMTimebaseCreateWithSourceClock(v30, v26, (CMTimebaseRef *)(v28 + 576));
    if (!v54)
    {
      v53 = v7;
      FigNetworkUrgencyMonitorSetTimebase(*(_QWORD *)(v28 + 3096), *(_QWORD *)(v28 + 576));
      v31 = *(_QWORD **)(v28 + 1040);
      if (v31)
      {
        v32 = (CMTime *)MEMORY[0x1E0CA2E18];
        v33 = &sFigCDSNodeProtocolID;
        do
        {
          v34 = v31[15];
          if (v34)
            CMTimebaseAddTimerDispatchSource(*v29, v34);
          v35 = v31[14];
          if (v35)
          {
            v61 = *v32;
            CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v28 + 576), v35);
            fpfs_scheduleForwardEndTimeForTrack(v28, (uint64_t)v31, (uint64_t)&v61);
            if (*((_DWORD *)v33 + 674))
            {
              v60 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v37 = v60;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                v38 = v37;
              else
                v38 = v37 & 0xFFFFFFFE;
              if (v38)
              {
                v39 = *(const void **)v28;
                if (*(_QWORD *)v28)
                  v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v40 = "";
                v56 = v40;
                if (a1)
                  v41 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                else
                  v41 = "";
                v55 = v41;
                v42 = a1;
                v43 = v31[2];
                time = v61;
                Seconds = CMTimeGetSeconds(&time);
                v45 = v31[14];
                fpfs_GetTime(v28, (uint64_t)&v58);
                v46 = CMTimeGetSeconds(&v58);
                v47 = *(float *)(v28 + 840);
                v62 = 136317442;
                v63 = "fpfs_CreateItemTimebase";
                v64 = 2048;
                v65 = v39;
                v66 = 2082;
                v67 = v56;
                v68 = 2048;
                v69 = v42;
                v70 = 2082;
                v71 = v55;
                v72 = 2048;
                v73 = v43;
                v74 = 2048;
                v75 = Seconds;
                v76 = 2048;
                v77 = v45;
                v78 = 2048;
                v79 = v46;
                v80 = 2048;
                v81 = v47;
                _os_log_send_and_compose_impl();
                a1 = v42;
                v29 = (CMTimebaseRef *)(v28 + 576);
                v32 = (CMTime *)MEMORY[0x1E0CA2E18];
                v33 = &sFigCDSNodeProtocolID;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          v31 = (_QWORD *)v31[1];
        }
        while (v31);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      v48 = CMBaseObjectGetDerivedStorage();
      if (fpfs_getNext(v48, 0) == a1)
      {
        *(_BYTE *)(v28 + 469) = 1;
        fpfs_EnqueueNotification(*(const void **)v28, CFSTR("TimebaseChanged"), a1, 0);
      }
      fpfs_CheckPrebufferedLevels(&time, a1, 0, -1, 0);
      v7 = v53;
    }
    v49 = *(_QWORD *)(v28 + 96);
    if (v49)
    {
      v50 = *(_QWORD *)(v28 + 576);
      v51 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v51)
        v51(v49, CFSTR("AfmfpbProperty_Timebase"), v50);
    }
    fpfsi_setupCMCDHeaderVendor();
    v27 = v54;
  }
  if (clockOut)
    CFRelease(clockOut);
  if (!(_DWORD)v27 && v7 && *(_QWORD *)(v7 + 32))
    *(_BYTE *)(v7 + 24) = 1;
  return v27;
}

uint64_t fpfs_SynchronousFrameEnqueued(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 51) != 1)
  {
    result = FigAtomicIncrement32();
    if ((int)result <= 1)
    {
      fpfs_PostNotificationWhenUnlocked(a2, CFSTR("SynchronousFrameEnqueued"), a2, 0);
      CFRetain(a2);
      CMNotificationCenterGetDefaultLocalCenter();
      dispatch_get_global_queue(0, 0);
      FigGetAllocatorForMedia();
      return FigDeferNotificationToDispatchQueue();
    }
  }
  return result;
}

void fpfsi_completedDecodeForPreroll(int a1, uint64_t a2, int a3, int a4, CFTypeRef cf)
{
  CFTypeID v6;
  CFTypeRef cfa;
  CFTypeRef v8;

  cfa = 0;
  v8 = 0;
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
    {
      if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &v8, &cfa))
      {
        CMBaseObjectGetDerivedStorage();
        FigRetainProxyRetain();
        CMNotificationCenterGetDefaultLocalCenter();
        FigGetAllocatorForMedia();
        FigDeferNotificationToDispatchQueue();
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    if (cfa)
      CFRelease(cfa);
  }
  else
  {
    FigSignalErrorAt();
  }
  if (v8)
    CFRelease(v8);
}

uint64_t fpfsi_markerBufferConsumed(int a1, int a2, int a3, const void *a4, CFTypeRef cf)
{
  CFTypeID v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!cf)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRetainProxyRetain();
  if (a4)
    CFRetain(a4);
  CMNotificationCenterGetDefaultLocalCenter();
  dispatch_get_global_queue(2, 0);
  FigGetAllocatorForMedia();
  return FigDeferNotificationToDispatchQueue();
}

void fpfs_RenderPipelineLostDecoderState(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf)
      CFRelease(cf);
    if (v5)
      CFRelease(v5);
  }
}

uint64_t fpfsi_RemoveAudioRenderChainListeners()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

void fps_HandleRateDelta(int a1, CFTypeRef cf)
{
  CFTypeRef cfa;
  CFTypeRef v4;

  cfa = 0;
  v4 = 0;
  if (cf)
    CFRetain(cf);
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy((uint64_t)cf, &v4, &cfa))
  {
    FigRetainProxyRelease();
  }
  else
  {
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cfa)
      CFRelease(cfa);
    if (v4)
      CFRelease(v4);
  }
}

void fpfsi_deferredHandleRateDelta(uint64_t a1, const void *a2)
{
  CFTypeRef v3;
  uint64_t i;
  CFTypeRef cf;
  CFTypeRef v6;

  cf = 0;
  v6 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer((uint64_t)a2, &cf, &v6))
  {
    v3 = v6;
    for (i = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040); i; i = *(_QWORD *)(i + 8))
      fpfs_GetRelativeRateAndSetRate2OnRenderPipelines((uint64_t)v3, i);
    fpfs_UnlockAndPostNotificationsWithCaller(cf);
  }
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  if (a2)
    CFRelease(a2);
}

uint64_t fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  CFTypeRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;

  v5 = fpfsi_CopyPlayerAndItemFromItemRetainProxy(a1, 0, a3);
  if ((_DWORD)v5)
    return v5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)(DerivedStorage + 24))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
    v9 = 4294954511;
    if (*a3)
    {
      CFRelease(*a3);
      *a3 = 0;
    }
  }
  else
  {
    v7 = CFRetain(*(CFTypeRef *)DerivedStorage);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
    fpfs_LockMutexWithCaller((uint64_t)v7);
    if (v7 != *(CFTypeRef *)DerivedStorage)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      fpfs_UnlockWithCaller();
    }
    *a2 = v7;
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 51) || FigRetainProxyIsInvalidated())
    {
      if (*a3)
      {
        CFRelease(*a3);
        *a3 = 0;
      }
      fpfs_UnlockWithCaller();
    }
    return 0;
  }
  return v9;
}

void fpfs_UnlockWithCaller()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 8);
  v3 = __OFSUB__(v1, 1);
  v2 = v1 - 1 < 0;
  v4 = v1 - 1;
  if (v2 == v3)
    *(_QWORD *)(DerivedStorage + 8) = v4;
  JUMPOUT(0x19402EA24);
}

uint64_t fpfs_scheduleForwardEndTimeForTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  dispatch_object_t *v5;
  CMTimeValue *v8;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  OpaqueCMTimebase *v11;
  NSObject *v12;
  OpaqueCMTimebase *v13;
  NSObject *v14;
  uint64_t result;
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_log_type_t type;
  int v20;
  CMTime time2;
  CMTime time1;
  CMTimeValue v23;
  CMTimeScale v24;
  uint64_t v25;

  v3 = MEMORY[0x1E0CA2E18];
  v25 = *MEMORY[0x1E0C80C00];
  v23 = *MEMORY[0x1E0CA2E18];
  v24 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  if (!*(_QWORD *)(a1 + 576))
    return FigSignalErrorAt();
  v5 = (dispatch_object_t *)(a2 + 112);
  if (!*(_QWORD *)(a2 + 112))
    return FigSignalErrorAt();
  if ((*(_DWORD *)(a1 + 1380) & 0x1D) == 1
    && (v8 = (CMTimeValue *)(a1 + 1368),
        time1 = *(CMTime *)(a1 + 1368),
        time2 = *(CMTime *)(a2 + 216),
        CMTimeCompare(&time1, &time2) <= 0))
  {
    v23 = *v8;
    v24 = *(_DWORD *)(a1 + 1376);
    v9 = *(_DWORD *)(a1 + 1380);
    v10 = *(_QWORD *)(a1 + 1384);
    v13 = *(OpaqueCMTimebase **)(a1 + 576);
    v14 = *v5;
    time1.value = *v8;
    time1.timescale = *(_DWORD *)(a1 + 1376);
    time1.flags = v9;
    time1.epoch = v10;
    result = CMTimebaseSetTimerDispatchSourceNextFireTime(v13, v14, &time1, 1u);
    if ((_DWORD)result)
      return result;
  }
  else if (*(_BYTE *)(a2 + 182))
  {
    v23 = *(_QWORD *)(a2 + 216);
    v9 = *(_DWORD *)(a2 + 228);
    v24 = *(_DWORD *)(a2 + 224);
    v10 = *(_QWORD *)(a2 + 232);
    v11 = *(OpaqueCMTimebase **)(a1 + 576);
    v12 = *(NSObject **)(a2 + 112);
    time1.value = *(_QWORD *)(a2 + 216);
    time1.timescale = *(_DWORD *)(a2 + 224);
    time1.flags = v9;
    time1.epoch = v10;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v11, v12, &time1, 1u);
  }
  else
  {
    v9 = *(_DWORD *)(v3 + 12);
    v10 = *(_QWORD *)(v3 + 16);
    fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(a1 + 576), v5);
  }
  if ((v9 & 1) != 0)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    time1.value = v23;
    time1.timescale = v24;
    time1.flags = v9;
    time1.epoch = v10;
    v17 = CMTimeCopyDescription(AllocatorForMedia, &time1);
    if (dword_1EE2A2A88)
    {
      v20 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v17)
      CFRelease(v17);
  }
  result = 0;
  if (a3)
  {
    *(_QWORD *)a3 = v23;
    *(_DWORD *)(a3 + 8) = v24;
    *(_DWORD *)(a3 + 12) = v9;
    *(_QWORD *)(a3 + 16) = v10;
  }
  return result;
}

uint64_t fpfsi_HandleTimebaseEffectiveRateChanged(uint64_t a1, const void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
    CFRetain(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetAllocatorForMedia();
  return FigDeferNotificationToDispatchQueue();
}

void fpfs_CheckPrebufferedLevels(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int IsIFrameOnly;
  int v16;
  int v17;
  int v18;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v21;
  CMTimeEpoch v22;
  int v23;
  uint64_t v24;
  CMTime *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  CMTime *v36;
  int v37;
  int v38;
  NSObject *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  const char *v43;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  Float64 v50;
  Float64 v51;
  const char *v52;
  Float64 v53;
  Float64 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  opaqueCMBufferQueue *v64;
  opaqueCMBufferQueue *v65;
  CMTimeFlags v66;
  CMTimeEpoch v67;
  int v68;
  uint64_t v69;
  double v70;
  int32_t v71;
  size_t TotalSize;
  double v73;
  CMTime *p_time;
  int32_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  double v82;
  CMTime *v83;
  uint64_t v84;
  unint64_t v85;
  double v86;
  uint64_t v87;
  CMTime *v88;
  double v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  NSObject *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  const char *v98;
  const char *v99;
  double v100;
  const char *v101;
  const char *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  CMTimeFlags v109;
  CMTimeEpoch v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  CMTimeFlags v123;
  int v124;
  int v125;
  void (*v126)(uint64_t, __CFString *, _QWORD);
  NSObject *v127;
  unsigned int v128;
  unsigned int v129;
  void *v130;
  const char *v131;
  double v132;
  double Seconds;
  int v134;
  float v135;
  const char *v136;
  Float64 v137;
  uint64_t v138;
  void (*v139)(uint64_t, __CFString *, _QWORD);
  uint64_t v140;
  int v141;
  CMTime *v142;
  int v143;
  int v144;
  uint64_t v145;
  CMTime *v146;
  uint64_t v147;
  CMTimeEpoch v148;
  void *v149;
  NSObject *v150;
  unsigned int v151;
  unsigned int v152;
  void *v153;
  const char *v154;
  Float64 v155;
  Float64 v156;
  Float64 v157;
  uint64_t v158;
  NSObject *v159;
  unsigned int v160;
  unsigned int v161;
  void *v162;
  const char *v163;
  int v164;
  Float64 v165;
  Float64 v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  _OWORD *v173;
  OpaqueCMTimebase *v174;
  NSObject *v175;
  uint64_t v176;
  NSObject *v177;
  unsigned int v178;
  unsigned int v179;
  void *v180;
  const char *v181;
  int v182;
  Float64 v183;
  Float64 v184;
  unsigned __int8 v185;
  uint64_t i;
  _OWORD *v187;
  _OWORD *v188;
  __int128 v189;
  CMTimeEpoch v190;
  OpaqueCMTimebase *v191;
  NSObject *v192;
  uint64_t v193;
  CMTime *v194;
  _BOOL4 v195;
  uint64_t RenderingTrackofType;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  const void *v200;
  char HasEndedOrBufferedBeyondFwdEnd;
  uint64_t v202;
  uint64_t AllocatorForMedia;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  int v207;
  uint64_t v208;
  const void *v209;
  CMTimeFlags v211;
  int v212;
  uint64_t v213;
  int v214;
  const char *v215;
  char v216;
  uint64_t *v217;
  unint64_t v218;
  int v219;
  int v220;
  int v221;
  int v222;
  CMTimeEpoch v224;
  const void *v225;
  uint64_t v226;
  int v227;
  CMTime v228;
  CMTime v229;
  CMTime lhs;
  CMTime v231;
  CMTime v232;
  CMTime v233;
  CMTime v234;
  CMTime v235;
  CMTime v236;
  CMTime v237;
  uint64_t v238;
  CMTime v239;
  CMTime v240;
  CMTime v241;
  CMTime v242;
  CMTime v243;
  CMTime v244;
  CMTime v245;
  CMTimeValue value;
  CMTimeScale timescale;
  _OWORD v248[4];
  uint64_t v249;
  _BYTE time2[32];
  _BYTE v251[20];
  __int16 v252;
  _BYTE v253[34];
  __int16 v254;
  unint64_t v255;
  __int16 v256;
  const char *v257;
  __int16 v258;
  unint64_t v259;
  CMTime time1[5];
  CFTypeRef cf;
  CMTimeScale v262;
  CMTimeValue v263;
  CMTimeScale v264;
  _BYTE rhs[32];
  __int128 v266;
  CMTime duration;
  CMTime time;
  CMTime v269;
  uint64_t v270;

  v270 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v209 = *(const void **)DerivedStorage;
  v9 = CMBaseObjectGetDerivedStorage();
  memset(&v244, 0, sizeof(v244));
  memset(&v243, 0, sizeof(v243));
  memset(&v242, 0, sizeof(v242));
  memset(&v241, 0, sizeof(v241));
  v249 = 0;
  memset(v248, 0, sizeof(v248));
  value = *MEMORY[0x1E0CA2E30];
  v10 = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 12);
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  *(_OWORD *)&v240.value = *MEMORY[0x1E0CA2E30];
  v224 = v11;
  v240.epoch = v11;
  v226 = DerivedStorage;
  v12 = *(_QWORD *)(DerivedStorage + 1696);
  v13 = MEMORY[0x1E0CA2E68];
  v14 = MEMORY[0x1E0CA2E18];
  v213 = v9;
  if (!v12)
  {
    *(_OWORD *)a5 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a5 + 16) = *(_QWORD *)(v13 + 16);
LABEL_5:
    v16 = *(_DWORD *)(v226 + 2232);
    v17 = *(_DWORD *)(v226 + 2240);
    v18 = *(_DWORD *)(v226 + 2260);
    if (v18 >= 1 && *(_BYTE *)(v226 + 2256))
    {
      if (*(double *)(v226 + 2264) <= 0.0)
      {
        if (v16 <= v18)
          v16 = *(_DWORD *)(v226 + 2260);
      }
      else
      {
        v269.value = *(_QWORD *)v14;
        v269.timescale = *(_DWORD *)(v14 + 8);
        time.value = v269.value;
        time.timescale = v269.timescale;
        if ((*(_BYTE *)(v226 + 236) & 1) != 0)
        {
          fpfs_GetNextTimeToPlay(v226, 0, (uint64_t)time1);
          v269.value = time1[0].value;
          flags = time1[0].flags;
          v269.timescale = time1[0].timescale;
          epoch = time1[0].epoch;
          time.value = *(_QWORD *)(v226 + 224);
          v21 = *(_DWORD *)(v226 + 236);
          time.timescale = *(_DWORD *)(v226 + 232);
          v22 = *(_QWORD *)(v226 + 240);
        }
        else
        {
          flags = *(_DWORD *)(v14 + 12);
          epoch = *(_QWORD *)(v14 + 16);
          v21 = flags;
          v22 = epoch;
        }
        if ((flags & 1) != 0 && (v21 & 1) != 0)
        {
          time1[0].value = v269.value;
          *(_QWORD *)&time1[0].timescale = __PAIR64__(flags, v269.timescale);
          time1[0].epoch = epoch;
          *(_QWORD *)time2 = time.value;
          *(_DWORD *)&time2[8] = time.timescale;
          *(_DWORD *)&time2[12] = v21;
          *(_QWORD *)&time2[16] = v22;
          if (CMTimeCompare(time1, (CMTime *)time2) >= 1)
          {
            v132 = *(double *)(v226 + 2264);
            *(_QWORD *)time2 = v269.value;
            *(_DWORD *)&time2[8] = v269.timescale;
            *(_DWORD *)&time2[12] = flags;
            *(_QWORD *)&time2[16] = epoch;
            *(_QWORD *)rhs = time.value;
            *(_QWORD *)&rhs[8] = __PAIR64__(v21, time.timescale);
            *(_QWORD *)&rhs[16] = v22;
            CMTimeSubtract(time1, (CMTime *)time2, (CMTime *)rhs);
            Seconds = CMTimeGetSeconds(time1);
            v134 = *(_DWORD *)(v226 + 2260);
            if (v16 < v134)
            {
              v135 = v132 * Seconds;
              if (v134 >= (int)(float)((float)v16 + v135))
                v16 = (int)(float)((float)v16 + v135);
              else
                v16 = *(_DWORD *)(v226 + 2260);
            }
          }
        }
      }
    }
    else if (*(_DWORD *)(v9 + 752))
    {
      if (v16 >= 120)
        v17 = 120;
      else
        v17 = *(_DWORD *)(v226 + 2232);
    }
    else
    {
      if (v16 >= 120)
        v23 = 120;
      else
        v23 = *(_DWORD *)(v226 + 2232);
      if (*(_DWORD *)(v226 + 2236))
        v17 = v23;
    }
    v212 = 1;
    CMTimeMake(time1, v17, 1);
    v244 = time1[0];
    CMTimeMake(time1, v16, 1);
    v243 = time1[0];
    goto LABEL_22;
  }
  IsIFrameOnly = FigAlternateIsIFrameOnly(v12);
  *(_OWORD *)a5 = *(_OWORD *)v13;
  *(_QWORD *)(a5 + 16) = *(_QWORD *)(v13 + 16);
  if (!IsIFrameOnly)
    goto LABEL_5;
  CMTimeMake(&v244, (uint64_t)(fabsf(*(float *)(v9 + 108)) * 5.0), 1);
  CMTimeMake(&v243, (uint64_t)(fabsf(*(float *)(v9 + 108)) * 10.0), 1);
  v212 = 0;
LABEL_22:
  v24 = 0;
  v227 = 0;
  v25 = (CMTime *)v248;
  do
  {
    if (fpfs_SubstreamNeedsFlowControl(v226, v24))
    {
      fpfs_CurrentSubStreamBufferedDuration(v24, (uint64_t)time1);
      *v25 = time1[0];
      if (a3 == v24)
      {
        *(_OWORD *)a5 = *(_OWORD *)&v25->value;
        *(_QWORD *)(a5 + 16) = v25->epoch;
      }
      time1[0] = v240;
      *(_OWORD *)time2 = *(_OWORD *)&v25->value;
      *(_QWORD *)&time2[16] = v25->epoch;
      if (CMTimeCompare(time1, (CMTime *)time2) >= 1)
        v240 = *v25;
      v227 |= 1 << v24;
      time1[0] = *v25;
      *(CMTime *)time2 = v244;
      if ((CMTimeCompare(time1, (CMTime *)time2) & 0x80000000) == 0)
      {
        time1[0].value = value;
        *(_QWORD *)&time1[0].timescale = __PAIR64__(v10, timescale);
        time1[0].epoch = v224;
        *(_OWORD *)time2 = *(_OWORD *)&v25->value;
        *(_QWORD *)&time2[16] = v25->epoch;
        if (CMTimeCompare(time1, (CMTime *)time2) >= 1)
        {
          value = v25->value;
          v10 = v25->flags;
          timescale = v25->timescale;
          v224 = v25->epoch;
        }
      }
    }
    ++v24;
    ++v25;
  }
  while (v24 != 3);
  v26 = *(_DWORD *)(v213 + 752);
  v27 = *(_DWORD *)(v226 + 2236);
  if (v26 >= v27)
    v28 = *(_DWORD *)(v226 + 2236);
  else
    v28 = *(_DWORD *)(v213 + 752);
  if (v27)
    v29 = *(_DWORD *)(v226 + 2236);
  else
    v29 = 50;
  if (!v27)
    v28 = *(_DWORD *)(v213 + 752);
  if (!v26)
    v28 = v29;
  if (v27 | v26)
    v30 = v28 <= 50;
  else
    v30 = 0;
  v31 = v212;
  if (v30)
    v31 = 0;
  LOBYTE(v32) = 1;
  if (v31 == 1)
  {
    v33 = *(_QWORD *)(v226 + 1040);
    if (v33)
    {
      while (1)
      {
        v32 = *(_DWORD *)(v33 + 152);
        if (v32 == 1)
          break;
        v33 = *(_QWORD *)(v33 + 8);
        if (!v33)
          goto LABEL_51;
      }
    }
    else
    {
LABEL_51:
      memset(time1, 0, 24);
      CMTimeMake(time1, 10, 1);
      if (*(int *)(v226 + 2260) < 1 || !*(_BYTE *)(v226 + 2256))
      {
        *(_QWORD *)time2 = value;
        *(_DWORD *)&time2[8] = timescale;
        *(_DWORD *)&time2[12] = v10;
        *(_QWORD *)&time2[16] = v224;
        *(CMTime *)rhs = time1[0];
        CMTimeSubtract(&v239, (CMTime *)time2, (CMTime *)rhs);
        *(CMTime *)time2 = v244;
        if (CMTimeCompare((CMTime *)time2, &v239) < 0)
        {
          *(_QWORD *)rhs = value;
          *(_QWORD *)&rhs[8] = __PAIR64__(v10, timescale);
          *(_QWORD *)&rhs[16] = v224;
          v269 = time1[0];
          CMTimeSubtract((CMTime *)time2, (CMTime *)rhs, &v269);
          v244 = *(CMTime *)time2;
        }
      }
      LOBYTE(v32) = 0;
    }
  }
  v216 = v32;
  v34 = 0;
  v219 = 0;
  v35 = 0;
  v36 = (CMTime *)v248;
  v225 = (const void *)a1;
  v211 = v10;
  v37 = v227;
  do
  {
    v38 = 1 << v34;
    if (((1 << v34) & v37) != 0)
    {
      time1[0] = *v36;
      *(CMTime *)time2 = v244;
      if (CMTimeCompare(time1, (CMTime *)time2) < 0)
      {
        if (a4 && dword_1EE2A2A88)
        {
          *(_DWORD *)rhs = 0;
          LOBYTE(v269.value) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v45 = *(_DWORD *)rhs;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v269.value))
            v46 = v45;
          else
            v46 = v45 & 0xFFFFFFFE;
          if (v46)
          {
            v47 = *(_QWORD *)v226;
            if (*(_QWORD *)v226)
              v48 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v48 = "";
            if (v225)
              v52 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v52 = "";
            time1[0] = *v36;
            v53 = CMTimeGetSeconds(time1);
            time1[0] = v244;
            v54 = CMTimeGetSeconds(time1);
            *(_DWORD *)time2 = 136316930;
            *(_QWORD *)&time2[4] = "fpfs_CheckPrebufferedLevels";
            *(_WORD *)&time2[12] = 2048;
            *(_QWORD *)&time2[14] = v47;
            *(_WORD *)&time2[22] = 2082;
            *(_QWORD *)&time2[24] = v48;
            *(_WORD *)v251 = 2048;
            *(_QWORD *)&v251[2] = v225;
            *(_WORD *)&v251[10] = 2082;
            *(_QWORD *)&v251[12] = v52;
            v252 = 1024;
            *(_DWORD *)v253 = v34;
            *(_WORD *)&v253[4] = 2048;
            *(Float64 *)&v253[6] = v53;
            *(_WORD *)&v253[14] = 2048;
            *(Float64 *)&v253[16] = v54;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = (uint64_t)v225;
          v37 = v227;
        }
        v219 |= v38;
      }
      else
      {
        time1[0] = *v36;
        *(CMTime *)time2 = v243;
        if ((CMTimeCompare(time1, (CMTime *)time2) & 0x80000000) == 0)
        {
          if (a4 && dword_1EE2A2A88)
          {
            *(_DWORD *)rhs = 0;
            LOBYTE(v269.value) = 0;
            v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v40 = *(_DWORD *)rhs;
            if (os_log_type_enabled(v39, v269.value))
              v41 = v40;
            else
              v41 = v40 & 0xFFFFFFFE;
            if (v41)
            {
              v42 = *(_QWORD *)v226;
              if (*(_QWORD *)v226)
                v43 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v43 = "";
              if (v225)
                v49 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v49 = "";
              time1[0] = *v36;
              v50 = CMTimeGetSeconds(time1);
              time1[0] = v243;
              v51 = CMTimeGetSeconds(time1);
              *(_DWORD *)time2 = 136316930;
              *(_QWORD *)&time2[4] = "fpfs_CheckPrebufferedLevels";
              *(_WORD *)&time2[12] = 2048;
              *(_QWORD *)&time2[14] = v42;
              *(_WORD *)&time2[22] = 2082;
              *(_QWORD *)&time2[24] = v43;
              *(_WORD *)v251 = 2048;
              *(_QWORD *)&v251[2] = v225;
              *(_WORD *)&v251[10] = 2082;
              *(_QWORD *)&v251[12] = v49;
              v252 = 1024;
              *(_DWORD *)v253 = v34;
              *(_WORD *)&v253[4] = 2048;
              *(Float64 *)&v253[6] = v50;
              *(_WORD *)&v253[14] = 2048;
              *(Float64 *)&v253[16] = v51;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a1 = (uint64_t)v225;
            v37 = v227;
          }
          v35 |= v38;
        }
      }
    }
    ++v34;
    ++v36;
  }
  while (v34 != 3);
  if ((v216 & 1) != 0)
  {
    v55 = v226;
    v56 = MEMORY[0x1E0CA2E18];
    goto LABEL_181;
  }
  v57 = CMBaseObjectGetDerivedStorage();
  v58 = 0;
  v59 = 0;
  v214 = 0;
  v208 = *(_QWORD *)(v57 + 544);
  v238 = 0;
  v220 = v35;
  v217 = (uint64_t *)v57;
  do
  {
    if ((*(_DWORD *)(v57 + 1088) & (1 << v58)) == 0)
      goto LABEL_127;
    v218 = v59;
    v60 = CMBaseObjectGetDerivedStorage();
    v61 = CMBaseObjectGetDerivedStorage();
    fpfs_GetNextTimeToPlay(v60, 1, (uint64_t)time1);
    v62 = *(_QWORD *)(v60 + 1040);
    if (!v62)
    {
      *(&duration.value + v58) = 0;
      goto LABEL_125;
    }
    v63 = 0;
    do
    {
      if (v58 == *(unsigned __int8 *)(v62 + 180))
      {
        v64 = *(opaqueCMBufferQueue **)(v62 + 80);
        if (v64)
        {
          if (CMBufferQueueGetHead(v64))
          {
            v65 = *(opaqueCMBufferQueue **)(v62 + 80);
            if (v65)
            {
              CMBufferQueueGetMinPresentationTimeStamp((CMTime *)time2, v65);
            }
            else
            {
              *(_OWORD *)time2 = *MEMORY[0x1E0CA2E18];
              *(_QWORD *)&time2[16] = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
            }
            cf = *(CFTypeRef *)time2;
            v66 = *(_DWORD *)&time2[12];
            v262 = *(_DWORD *)&time2[8];
            v67 = *(_QWORD *)&time2[16];
            v263 = *(_QWORD *)(v62 + 216);
            v264 = *(_DWORD *)(v62 + 224);
            if ((*(_DWORD *)(v62 + 140) & 0x1D) != 1
              || (time2[12] & 0x1D) != 1
              || (v68 = *(_DWORD *)(v62 + 228), (v68 & 0x1D) != 1))
            {
              TotalSize = CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(v62 + 80));
LABEL_113:
              v63 += TotalSize;
              goto LABEL_114;
            }
            v69 = *(_QWORD *)(v62 + 232);
            *(_QWORD *)time2 = *(_QWORD *)(v62 + 216);
            *(_DWORD *)&time2[8] = *(_DWORD *)(v62 + 224);
            *(_DWORD *)&time2[12] = v68;
            *(_QWORD *)&time2[16] = v69;
            v269.value = (CMTimeValue)cf;
            v269.timescale = v262;
            v269.flags = v66;
            v269.epoch = v67;
            CMTimeSubtract((CMTime *)rhs, (CMTime *)time2, &v269);
            v70 = CMTimeGetSeconds((CMTime *)rhs);
            if (*(float *)(v61 + 108) >= 0.0)
            {
              *(_QWORD *)time2 = v263;
              *(_DWORD *)&time2[8] = v264;
              *(_DWORD *)&time2[12] = v68;
              *(_QWORD *)&time2[16] = v69;
              v269 = time1[0];
              if (CMTimeCompare((CMTime *)time2, &v269) >= 1 && v70 > 0.0)
              {
                *(_QWORD *)time2 = cf;
                *(_DWORD *)&time2[8] = v262;
                *(_DWORD *)&time2[12] = v66;
                *(_QWORD *)&time2[16] = v67;
                v269 = time1[0];
                v75 = CMTimeCompare((CMTime *)time2, &v269);
                TotalSize = CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(v62 + 80));
                if ((v75 & 0x80000000) == 0)
                  goto LABEL_113;
                v73 = (double)TotalSize;
                *(_QWORD *)time2 = v263;
                *(_DWORD *)&time2[8] = v264;
                *(_DWORD *)&time2[12] = v68;
                *(_QWORD *)&time2[16] = v69;
                v269 = time1[0];
                CMTimeSubtract(&time, (CMTime *)time2, &v269);
                p_time = &time;
                goto LABEL_120;
              }
            }
            else
            {
              *(_QWORD *)time2 = v263;
              *(_DWORD *)&time2[8] = v264;
              *(_DWORD *)&time2[12] = v68;
              *(_QWORD *)&time2[16] = v69;
              v269 = time1[0];
              if (CMTimeCompare((CMTime *)time2, &v269) < 0 && v70 > 0.0)
              {
                *(_QWORD *)time2 = cf;
                *(_DWORD *)&time2[8] = v262;
                *(_DWORD *)&time2[12] = v66;
                *(_QWORD *)&time2[16] = v67;
                v269 = time1[0];
                v71 = CMTimeCompare((CMTime *)time2, &v269);
                TotalSize = CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(v62 + 80));
                if (v71 < 1)
                  goto LABEL_113;
                v73 = (double)TotalSize;
                *(_QWORD *)time2 = v263;
                *(_DWORD *)&time2[8] = v264;
                *(_DWORD *)&time2[12] = v68;
                *(_QWORD *)&time2[16] = v69;
                v269 = time1[0];
                CMTimeSubtract(&v245, (CMTime *)time2, &v269);
                p_time = &v245;
LABEL_120:
                v63 = (unint64_t)(CMTimeGetSeconds(p_time) * v73 / v70 + (double)v63);
              }
            }
          }
        }
      }
LABEL_114:
      v62 = *(_QWORD *)(v62 + 8);
    }
    while (v62);
    *(&duration.value + v58) = v63;
    if (v63)
    {
      v214 |= 1 << v58;
      goto LABEL_126;
    }
LABEL_125:
    v63 = 0;
LABEL_126:
    v35 = v220;
    v57 = (uint64_t)v217;
    v59 = v63 + v218;
LABEL_127:
    ++v58;
  }
  while (v58 != 3);
  v55 = v226;
  v76 = v213;
  if (((*(_DWORD *)(v57 + 1088) ^ v214) & 7) == 0)
  {
    v80 = v59 >= *(_QWORD *)(v57 + 536) && v208 == 0;
    a1 = (uint64_t)v225;
    v79 = v227;
    if (v80)
    {
      v77 = 0;
      v78 = 0;
      goto LABEL_172;
    }
    v81 = 0;
    v82 = 0.0;
    v83 = (CMTime *)v248;
    v84 = (uint64_t)v217;
    do
    {
      if (fpfs_SubstreamNeedsFlowControl((uint64_t)v217, v81))
      {
        v85 = *(&duration.value + v81);
        if (v85)
        {
          time1[0] = *v83;
          v86 = (double)v85 * 8.0 / CMTimeGetSeconds(time1);
        }
        else
        {
          v86 = 0.0;
        }
        *(double *)&rhs[8 * v81] = v86;
        v82 = v82 + v86;
      }
      ++v81;
      ++v83;
    }
    while (v81 != 3);
    v87 = 0;
    v88 = (CMTime *)v248;
    while (1)
    {
      if (fpfs_SubstreamNeedsFlowControl(v84, v87))
      {
        CMTimeMake(&v269, 900, 1);
        time1[0] = *v88;
        if (CMTimeCompare(time1, &v269) < 0)
          break;
      }
LABEL_169:
      ++v87;
      ++v88;
      v84 = (uint64_t)v217;
      if (v87 == 3)
      {
        v78 = HIDWORD(v238);
        v77 = v238;
        v55 = v226;
        v76 = v213;
        v35 = v220;
        goto LABEL_172;
      }
    }
    v89 = *(double *)&rhs[8 * v87];
    v90 = (unint64_t)(v89 * (double)(unint64_t)v217[67] / v82);
    v91 = (unint64_t)(v89 * (double)(unint64_t)v217[68] / v82);
    v92 = *(&duration.value + v87);
    if (v92 >= v90)
    {
      if (!v208 || v92 <= v91)
      {
LABEL_150:
        if (dword_1EE2A2A88 >= 3)
        {
          LODWORD(time.value) = 0;
          LOBYTE(v245.value) = 0;
          v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v95 = time.value;
          if (os_log_type_enabled(v94, v245.value))
            v96 = v95;
          else
            v96 = v95 & 0xFFFFFFFE;
          if (v96)
          {
            v97 = *v217;
            if (*v217)
              v98 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v98 = "";
            v215 = v98;
            if (v225)
              v99 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v99 = "";
            time1[0] = *v88;
            v100 = CMTimeGetSeconds(time1);
            *(_DWORD *)time2 = 136317954;
            v101 = "Above";
            if (v92 >= v90)
              v102 = "Above";
            else
              v102 = "Below";
            *(_QWORD *)&time2[4] = "fpfs_AdjustBufferingForMemoryLimits";
            if (v92 < v91)
              v101 = "Below";
            *(_WORD *)&time2[12] = 2048;
            *(_QWORD *)&time2[14] = v97;
            *(_WORD *)&time2[22] = 2082;
            *(_QWORD *)&time2[24] = v215;
            *(_WORD *)v251 = 2048;
            *(_QWORD *)&v251[2] = v225;
            *(_WORD *)&v251[10] = 2082;
            *(_QWORD *)&v251[12] = v99;
            v252 = 1024;
            *(_DWORD *)v253 = v87;
            *(_WORD *)&v253[4] = 2048;
            *(double *)&v253[6] = v100;
            *(_WORD *)&v253[14] = 2048;
            *(_QWORD *)&v253[16] = v92;
            *(_WORD *)&v253[24] = 2080;
            *(_QWORD *)&v253[26] = v102;
            v254 = 2048;
            v255 = v90;
            v256 = 2080;
            v257 = v101;
            v258 = 2048;
            v259 = v91;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = (uint64_t)v225;
          v79 = v227;
        }
        goto LABEL_169;
      }
      v93 = &v238;
    }
    else
    {
      v93 = (uint64_t *)((char *)&v238 + 4);
    }
    *(_DWORD *)v93 |= 1 << v87;
    goto LABEL_150;
  }
  v77 = 0;
  v78 = 0;
  a1 = (uint64_t)v225;
  v79 = v227;
LABEL_172:
  v103 = v77 & ~v219 | v35;
  v56 = MEMORY[0x1E0CA2E18];
  if (*(_DWORD *)(v76 + 752) || (v104 = v78, *(_DWORD *)(v55 + 2236)))
    v104 = v78 & ~v103;
  v105 = v78 | v35;
  v106 = v103 & ~v104;
  if (*(int *)(v55 + 2260) <= 0)
  {
    v108 = v79 & ~(v219 | v105);
  }
  else
  {
    v107 = v79 & ~(v219 | v105);
    if (*(_BYTE *)(v55 + 2256))
      v108 = 0;
    else
      v108 = v107;
  }
  v35 = v108 | v106;
LABEL_181:
  v263 = *(_QWORD *)v56;
  v264 = *(_DWORD *)(v56 + 8);
  if (fpfsi_PlaybackHasBufferedBeyondForwardEndTime(a1))
  {
    fpfsi_MapEndTimeFromTargetToSource(v55, (uint64_t)time1);
    goto LABEL_183;
  }
  v109 = *(_DWORD *)(v56 + 12);
  v110 = *(_QWORD *)(v56 + 16);
  if (fpfsi_PlaybackHasBufferedBeyondTimeToPauseBuffering(a1) && *(_BYTE *)(v55 + 464))
  {
    *(_OWORD *)time2 = *(_OWORD *)(v55 + 1416);
    *(_QWORD *)&time2[16] = *(_QWORD *)(v55 + 1432);
    *(_OWORD *)rhs = kGaplessTransitionDeadlineInterval;
    *(_QWORD *)&rhs[16] = 0;
    CMTimeAdd(time1, (CMTime *)time2, (CMTime *)rhs);
LABEL_183:
    v263 = time1[0].value;
    v109 = time1[0].flags;
    v264 = time1[0].timescale;
    v110 = time1[0].epoch;
  }
  v221 = v35;
  if ((v109 & 1) == 0)
  {
    v111 = 0;
    goto LABEL_205;
  }
  fpfsi_MapEndTimeFromTargetToSource(v55, (uint64_t)&v237);
  time1[0].value = v263;
  *(_QWORD *)&time1[0].timescale = __PAIR64__(v109, v264);
  time1[0].epoch = v110;
  v112 = CMTimeCompare(time1, &v237);
  fpfs_GetNextTimeToPlay(v55, 0, (uint64_t)&v242);
  v113 = 0;
  v111 = 0;
  while (2)
  {
    if (fpfs_SubstreamNeedsFlowControl(v55, v113))
    {
      v114 = (char *)v248 + 24 * v113;
      *(CMTime *)time2 = v242;
      *(_OWORD *)rhs = *(_OWORD *)v114;
      *(_QWORD *)&rhs[16] = *((_QWORD *)v114 + 2);
      CMTimeAdd(time1, (CMTime *)time2, (CMTime *)rhs);
      *(_QWORD *)rhs = time1[0].value;
      *(_DWORD *)&rhs[8] = time1[0].timescale;
      if ((time1[0].flags & 0x1D) == 1)
      {
        time1[0].value = *(_QWORD *)rhs;
        time1[0].timescale = *(_DWORD *)&rhs[8];
        *(_QWORD *)time2 = v263;
        *(_DWORD *)&time2[8] = v264;
        *(_DWORD *)&time2[12] = v109;
        *(_QWORD *)&time2[16] = v110;
        if ((CMTimeCompare(time1, (CMTime *)time2) & 0x80000000) == 0)
        {
          v221 |= 1 << v113;
          v111 |= 1 << v113;
          v219 &= ~(1 << v113);
          if (!(_DWORD)v112)
          {
            v115 = v112;
            v116 = *(_QWORD *)(v55 + 1040);
            if (v116)
            {
              while (1)
              {
                v117 = *(_QWORD *)(v116 + 48);
                v118 = *(unsigned __int8 *)(v116 + 180);
                v119 = v55 + 16 * v118;
                if (v117 != *(_QWORD *)(v119 + 992))
                  break;
                if (v113 == v118)
                  goto LABEL_199;
LABEL_202:
                v116 = *(_QWORD *)(v116 + 8);
                if (!v116)
                  goto LABEL_203;
              }
              v120 = *(_QWORD *)(v119 + 1000);
              if (v113 != v118 || v117 != v120)
                goto LABEL_202;
LABEL_199:
              if (*(_QWORD *)(v116 + 112))
                fpfs_scheduleForwardEndTimeForTrack(v55, v116, 0);
              else
                fpfs_EnsureEndTimerProcForTrack(v116);
              goto LABEL_202;
            }
LABEL_203:
            v112 = v115;
          }
        }
      }
    }
    if (++v113 != 3)
      continue;
    break;
  }
LABEL_205:
  if (v219)
  {
    *(_DWORD *)(v55 + 1880) = 0;
    v122 = *(_QWORD *)(v55 + 2248);
    v123 = v211;
    v124 = v227;
    v125 = v221;
    if (v122)
    {
      v126 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v126)
        v126(v122, CFSTR("FNCM_BufferingInProgress"), *MEMORY[0x1E0C9AE50]);
    }
  }
  else
  {
    v124 = v227;
    v125 = v221;
    v123 = v211;
    if (v221 == v227)
    {
      if (*(_DWORD *)(v55 + 1880) != 1)
      {
        if (a4 && dword_1EE2A2A88)
        {
          *(_DWORD *)rhs = 0;
          LOBYTE(v269.value) = 0;
          v127 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v128 = *(_DWORD *)rhs;
          if (os_log_type_enabled(v127, v269.value))
            v129 = v128;
          else
            v129 = v128 & 0xFFFFFFFE;
          if (v129)
          {
            v130 = *(void **)v55;
            if (*(_QWORD *)v55)
              v131 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v131 = "";
            if (v225)
              v136 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v136 = "";
            time1[0].value = value;
            *(_QWORD *)&time1[0].timescale = __PAIR64__(v211, timescale);
            time1[0].epoch = v224;
            v137 = CMTimeGetSeconds(time1);
            *(_DWORD *)time2 = 136316418;
            *(_QWORD *)&time2[4] = "fpfs_CheckPrebufferedLevels";
            *(_WORD *)&time2[12] = 2048;
            *(_QWORD *)&time2[14] = v130;
            *(_WORD *)&time2[22] = 2082;
            *(_QWORD *)&time2[24] = v131;
            *(_WORD *)v251 = 2048;
            *(_QWORD *)&v251[2] = v225;
            *(_WORD *)&v251[10] = 2082;
            *(_QWORD *)&v251[12] = v136;
            v252 = 2048;
            *(Float64 *)v253 = v137;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_DWORD *)(v55 + 1880) = 1;
        v138 = *(_QWORD *)(v55 + 2248);
        if (v138)
        {
          v139 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v139)
            v139(v138, CFSTR("FNCM_BufferingInProgress"), *MEMORY[0x1E0C9AE40]);
        }
        fpfs_EnqueueNotification(v209, CFSTR("StreamBufferFull"), v225, 0);
      }
      if (fpfsi_PlaybackHasBufferedBeyondTimeToPauseBuffering((uint64_t)v225))
        fpfsi_EnqueuePlayableRangeChangedNotification(v225);
    }
  }
  v140 = 0;
  v141 = 0;
  v142 = (CMTime *)v248;
  do
  {
    if (((1 << v140) & v124) != 0)
    {
      if (((1 << v140) & v125) != 0)
      {
        time1[0] = *v142;
        if (fpfs_CheckCanKeepUp((uint64_t)v225, (uint64_t)time1, MEMORY[0x1E0CA2E18], (1 << v140), (uint64_t)v248, 0, 0, 0))v143 = 1 << v140;
        else
          v143 = 0;
        v111 |= v143;
      }
      else
      {
        if (*(_DWORD *)(v55 + 1880))
          v144 = 0;
        else
          v144 = 1 << v140;
        v141 |= v144;
      }
    }
    ++v140;
    ++v142;
  }
  while (v140 != 3);
  v145 = 0;
  v146 = (CMTime *)v248;
  LODWORD(v147) = v111;
  v148 = v224;
  v149 = (void *)v225;
  while (2)
  {
    if (fpfs_SubstreamNeedsFlowControl(v55, v145))
    {
      CMTimeMake(&v235, 15, 1);
      time1[0] = v240;
      CMTimeAdd(&v236, time1, &v235);
      time1[0] = *v146;
      if (CMTimeCompare(time1, &v236) >= 1)
      {
        memset(rhs, 0, 24);
        CMTimeMake(&v234, 15, 2);
        time1[0] = *v146;
        CMTimeSubtract((CMTime *)rhs, time1, &v234);
        time1[0].value = value;
        *(_QWORD *)&time1[0].timescale = __PAIR64__(v123, timescale);
        time1[0].epoch = v148;
        *(CMTime *)time2 = v244;
        CMTimeSubtract(&v233, time1, (CMTime *)time2);
        time1[0] = *v146;
        *(_OWORD *)time2 = *(_OWORD *)rhs;
        *(_QWORD *)&time2[16] = *(_QWORD *)&rhs[16];
        CMTimeSubtract(&v232, time1, (CMTime *)time2);
        if ((CMTimeCompare(&v233, &v232) & 0x80000000) == 0)
        {
          value = v146->value;
          v123 = v146->flags;
          timescale = v146->timescale;
          v148 = v146->epoch;
          v244 = *(CMTime *)rhs;
        }
        if (a4 && dword_1EE2A2A88)
        {
          LODWORD(v269.value) = 0;
          LOBYTE(time.value) = 0;
          v150 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v151 = v269.value;
          if (os_log_type_enabled(v150, time.value))
            v152 = v151;
          else
            v152 = v151 & 0xFFFFFFFE;
          if (v152)
          {
            v222 = v147;
            v153 = *(void **)v55;
            if (*(_QWORD *)v55)
            {
              v147 = CMBaseObjectGetDerivedStorage() + 824;
              if (v225)
                goto LABEL_268;
LABEL_271:
              v154 = "";
            }
            else
            {
              v147 = (uint64_t)"";
              if (!v225)
                goto LABEL_271;
LABEL_268:
              v154 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            }
            time1[0] = *v146;
            v155 = CMTimeGetSeconds(time1);
            time1[0] = v240;
            v156 = CMTimeGetSeconds(time1);
            time1[0] = *(CMTime *)rhs;
            v157 = CMTimeGetSeconds(time1);
            *(_DWORD *)time2 = 136317186;
            *(_QWORD *)&time2[4] = "fpfs_CheckPrebufferedLevels";
            *(_WORD *)&time2[12] = 2048;
            *(_QWORD *)&time2[14] = v153;
            *(_WORD *)&time2[22] = 2082;
            *(_QWORD *)&time2[24] = v147;
            *(_WORD *)v251 = 2048;
            *(_QWORD *)&v251[2] = v225;
            *(_WORD *)&v251[10] = 2082;
            *(_QWORD *)&v251[12] = v154;
            v252 = 1024;
            *(_DWORD *)v253 = v145;
            *(_WORD *)&v253[4] = 2048;
            *(Float64 *)&v253[6] = v155;
            *(_WORD *)&v253[14] = 2048;
            *(Float64 *)&v253[16] = v156;
            *(_WORD *)&v253[24] = 2048;
            *(Float64 *)&v253[26] = v157;
            _os_log_send_and_compose_impl();
            v55 = v226;
            LODWORD(v147) = v222;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        LODWORD(v147) = v147 | (1 << v145);
        v141 &= ~(1 << v145);
      }
    }
    ++v145;
    ++v146;
    if (v145 != 3)
      continue;
    break;
  }
  if ((v212 & 1) != 0)
  {
    v158 = v213;
    if ((v123 & 0x1D) != 1)
      goto LABEL_311;
LABEL_283:
    memset(&time, 0, sizeof(time));
    time1[0].value = value;
    *(_QWORD *)&time1[0].timescale = __PAIR64__(v123, timescale);
    time1[0].epoch = v148;
    *(CMTime *)time2 = v244;
    CMTimeSubtract(&time, time1, (CMTime *)time2);
    if (*(float *)(v158 + 108) >= 0.0)
    {
      fpfs_GetApproximateTime(v55, (uint64_t)&v231);
      *(CMTime *)time2 = time;
      CMTimeAdd(time1, &v231, (CMTime *)time2);
    }
    else
    {
      fpfs_GetApproximateTime(v55, (uint64_t)&lhs);
      *(CMTime *)time2 = time;
      CMTimeSubtract(time1, &lhs, (CMTime *)time2);
    }
    time = time1[0];
    if (!*(_QWORD *)(v55 + 1624) && dword_1EE2A2A88)
    {
      *(_DWORD *)rhs = 0;
      LOBYTE(v269.value) = 0;
      v159 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v160 = *(_DWORD *)rhs;
      if (os_log_type_enabled(v159, v269.value))
        v161 = v160;
      else
        v161 = v160 & 0xFFFFFFFE;
      if (v161)
      {
        v162 = *(void **)v55;
        if (*(_QWORD *)v55)
          v163 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v163 = "";
        v164 = v147;
        if (v225)
          v147 = CMBaseObjectGetDerivedStorage() + 3072;
        else
          v147 = (uint64_t)"";
        fpfs_GetTime(v55, (uint64_t)&v229);
        v165 = CMTimeGetSeconds(&v229);
        time1[0] = time;
        v166 = CMTimeGetSeconds(time1);
        *(_DWORD *)time2 = 136316674;
        *(_QWORD *)&time2[4] = "fpfs_CheckPrebufferedLevels";
        *(_WORD *)&time2[12] = 2048;
        *(_QWORD *)&time2[14] = v162;
        *(_WORD *)&time2[22] = 2082;
        *(_QWORD *)&time2[24] = v163;
        *(_WORD *)v251 = 2048;
        *(_QWORD *)&v251[2] = v225;
        *(_WORD *)&v251[10] = 2082;
        *(_QWORD *)&v251[12] = v147;
        v252 = 2048;
        *(Float64 *)v253 = v165;
        *(_WORD *)&v253[8] = 2048;
        *(Float64 *)&v253[10] = v166;
        _os_log_send_and_compose_impl();
        v158 = v213;
        LODWORD(v147) = v164;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v149 = (void *)v225;
    }
    v245 = time;
    v167 = CMBaseObjectGetDerivedStorage();
    v168 = v167;
    if (!*(_QWORD *)(v55 + 1624))
    {
      v169 = fpfs_TimerDispatchSourceCreate(*(dispatch_queue_t *)(v167 + 600), *(void **)(v167 + 16), 0xFFFFFFFFFFFFFFFFLL, (void (__cdecl *)(void *))fpfs_needsMoreTimerProc, 0);
      *(_QWORD *)(v55 + 1624) = v169;
      if (v169)
        CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v168 + 576), v169);
      v170 = MEMORY[0x1E0CA2E18];
      v171 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v55 + 1632) = *MEMORY[0x1E0CA2E18];
      v172 = *(_QWORD *)(v170 + 16);
      *(_QWORD *)(v55 + 1648) = v172;
      *(_OWORD *)(v55 + 1656) = v171;
      *(_QWORD *)(v55 + 1672) = v172;
    }
    v173 = (_OWORD *)(v55 + 1632);
    if ((*(_BYTE *)(v55 + 1644) & 1) == 0
      || (*(CMTime *)time2 = v245,
          *(_OWORD *)rhs = kTimerScheduleTime,
          *(_QWORD *)&rhs[16] = 0,
          CMTimeAdd(time1, (CMTime *)time2, (CMTime *)rhs),
          *(_OWORD *)time2 = *v173,
          *(_QWORD *)&time2[16] = *(_QWORD *)(v55 + 1648),
          CMTimeCompare(time1, (CMTime *)time2) < 0))
    {
      v174 = *(OpaqueCMTimebase **)(v168 + 576);
      v175 = *(NSObject **)(v55 + 1624);
      *(CMTime *)time2 = v245;
      CMTimebaseSetTimerDispatchSourceNextFireTime(v174, v175, (CMTime *)time2, 1u);
      *v173 = *(_OWORD *)&v245.value;
      *(_QWORD *)(v55 + 1648) = v245.epoch;
      v176 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v55 + 1656) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(v55 + 1672) = *(_QWORD *)(v176 + 16);
    }
    else
    {
      *(_OWORD *)rhs = *v173;
      *(_QWORD *)&rhs[16] = *(_QWORD *)(v55 + 1648);
      *(_OWORD *)&v269.value = kTimerScheduleTime;
      v269.epoch = 0;
      CMTimeAdd((CMTime *)time2, (CMTime *)rhs, &v269);
      *(CMTime *)rhs = v245;
      if (CMTimeCompare((CMTime *)rhs, (CMTime *)time2) >= 1)
      {
        *(CMTime *)rhs = v245;
        v269 = *(CMTime *)(v55 + 1656);
        if (CMTimeCompare((CMTime *)rhs, &v269) < 0)
          *(CMTime *)(v55 + 1656) = v245;
      }
    }
  }
  else
  {
    v158 = v213;
    if (((v147 >> *(_DWORD *)(v55 + 1104)) & 1) != 0)
      *(_BYTE *)(v55 + 1557) = 1;
    if ((v123 & 0x1D) == 1 && *(_BYTE *)(v55 + 1557))
      goto LABEL_283;
  }
LABEL_311:
  if (*(float *)(v158 + 108) == 0.0 && *(int *)(v158 + 764) > 0)
  {
    v141 = 0;
    LODWORD(v147) = 0;
  }
  if (!(v147 | v141)
    || (CMBaseObjectGetDerivedStorage(), !fpfs_FlowControlPump(v55, v147, 1, v141)))
  {
    if (a4 && dword_1EE2A2A88)
    {
      *(_DWORD *)rhs = 0;
      LOBYTE(v269.value) = 0;
      v177 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v178 = *(_DWORD *)rhs;
      if (os_log_type_enabled(v177, v269.value))
        v179 = v178;
      else
        v179 = v178 & 0xFFFFFFFE;
      if (v179)
      {
        v180 = *(void **)v55;
        if (*(_QWORD *)v55)
          v181 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v181 = "";
        v182 = v147;
        if (v149)
          v147 = CMBaseObjectGetDerivedStorage() + 3072;
        else
          v147 = (uint64_t)"";
        v183 = -1.0;
        if (*(_QWORD *)(v55 + 1624))
        {
          time1[0] = *(CMTime *)(v55 + 1632);
          v184 = CMTimeGetSeconds(time1);
          if (*(_QWORD *)(v55 + 1624))
          {
            time1[0] = *(CMTime *)(v55 + 1656);
            v183 = CMTimeGetSeconds(time1);
          }
        }
        else
        {
          v184 = -1.0;
        }
        *(_DWORD *)time2 = 136317186;
        *(_QWORD *)&time2[4] = "fpfs_CheckPrebufferedLevels";
        *(_WORD *)&time2[12] = 2048;
        *(_QWORD *)&time2[14] = v180;
        *(_WORD *)&time2[22] = 2082;
        *(_QWORD *)&time2[24] = v181;
        *(_WORD *)v251 = 2048;
        *(_QWORD *)&v251[2] = v149;
        *(_WORD *)&v251[10] = 2082;
        *(_QWORD *)&v251[12] = v147;
        v252 = 1024;
        LOBYTE(v147) = v182;
        *(_DWORD *)v253 = v182;
        *(_WORD *)&v253[4] = 1024;
        *(_DWORD *)&v253[6] = v141;
        *(_WORD *)&v253[10] = 2048;
        *(Float64 *)&v253[12] = v184;
        *(_WORD *)&v253[20] = 2048;
        *(Float64 *)&v253[22] = v183;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v185 = v147;
    fpfs_GetNextTimeToPlay(v55, 1, (uint64_t)&v242);
    for (i = *(_QWORD *)(v55 + 1040); i; i = *(_QWORD *)(i + 8))
    {
      if (*(_QWORD *)(i + 120))
      {
        if (!*(_BYTE *)(i + 182) && *(_DWORD *)(i + 152) == 6 && (*(_BYTE *)(i + 228) & 1) != 0)
        {
          v187 = (_OWORD *)(i + 216);
          if ((*(_BYTE *)(v55 + 1380) & 1) == 0
            || (*(_OWORD *)&time1[0].value = *v187,
                time1[0].epoch = *(_QWORD *)(i + 232),
                *(_OWORD *)time2 = *(_OWORD *)(v55 + 1368),
                *(_QWORD *)&time2[16] = *(_QWORD *)(v55 + 1384),
                CMTimeCompare(time1, (CMTime *)time2) < 0))
          {
            *(_OWORD *)&time1[0].value = *v187;
            time1[0].epoch = *(_QWORD *)(i + 232);
            if (!fpfsi_atOrAfterTimeToPausePlayback(v55, time1) && !*(_BYTE *)(i + 184))
            {
              memset(&v269, 0, sizeof(v269));
              *(_OWORD *)&time1[0].value = *v187;
              time1[0].epoch = *(_QWORD *)(i + 232);
              *(_OWORD *)time2 = kGaplessTransitionDeadlineInterval;
              *(_QWORD *)&time2[16] = 0;
              CMTimeSubtract(&v269, time1, (CMTime *)time2);
              *(CMTime *)time2 = v269;
              *(_OWORD *)rhs = kTimerVariability;
              *(_QWORD *)&rhs[16] = 0;
              CMTimeAdd(time1, (CMTime *)time2, (CMTime *)rhs);
              v269 = time1[0];
              time1[0] = v242;
              *(_OWORD *)time2 = kTimerScheduleTime;
              *(_QWORD *)&time2[16] = 0;
              CMTimeAdd(&v228, time1, (CMTime *)time2);
              time1[0] = v269;
              if (CMTimeCompare(time1, &v228) < 1)
              {
                if (*(float *)(v55 + 840) != 0.0)
                {
                  v193 = MEMORY[0x1E0CA2E18];
                  *(_OWORD *)(i + 156) = *MEMORY[0x1E0CA2E18];
                  *(_QWORD *)(i + 172) = *(_QWORD *)(v193 + 16);
                  fpfs_CallDispatchHandlerWithItemAndTrack(v149, i, (void (*)(void))fpfs_ranDryTimerProc);
                }
              }
              else
              {
                time = v269;
                v188 = (_OWORD *)(i + 156);
                if ((*(_BYTE *)(i + 168) & 1) == 0
                  || (CMTimeMake((CMTime *)time2, 1, 100),
                      *(CMTime *)rhs = time,
                      CMTimeAdd(time1, (CMTime *)rhs, (CMTime *)time2),
                      *(_OWORD *)rhs = *v188,
                      *(_QWORD *)&rhs[16] = *(_QWORD *)(i + 172),
                      CMTimeCompare(time1, (CMTime *)rhs) < 0))
                {
                  v189 = *(_OWORD *)&time.value;
                  *v188 = *(_OWORD *)&time.value;
                  v190 = time.epoch;
                  *(_QWORD *)(i + 172) = time.epoch;
                  v191 = *(OpaqueCMTimebase **)(v55 + 576);
                  v192 = *(NSObject **)(i + 120);
                  *(_OWORD *)rhs = v189;
                  *(_QWORD *)&rhs[16] = v190;
                  CMTimebaseSetTimerDispatchSourceNextFireTime(v191, v192, (CMTime *)rhs, 1u);
                }
                else
                {
                  *v188 = *(_OWORD *)&time.value;
                  *(_QWORD *)(i + 172) = time.epoch;
                }
              }
            }
          }
        }
      }
    }
    fpfs_GetItemBufferedDuration((const __CFArray *)v149, &v241, 0, 0);
    v194 = (CMTime *)MEMORY[0x1E0CA2E68];
    if (a2)
    {
      if (*(_BYTE *)(v55 + 470) || ((*(_DWORD *)(v55 + 1088) ^ v185) & 3) == 0)
      {
        RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v149, 1986618469);
        if (RenderingTrackofType)
          v195 = *(_BYTE *)(RenderingTrackofType + 104) == 0;
        else
          v195 = 1;
      }
      else
      {
        v195 = 0;
      }
      v197 = *(void **)v55;
      time1[0] = v241;
      fpfs_CheckIfLikelyToKeepUpAndNotify(v197, (const __CFArray *)v149, time1, v195, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], (uint64_t)v248);
    }
    v198 = CMBaseObjectGetDerivedStorage();
    v199 = CMBaseObjectGetDerivedStorage();
    cf = 0;
    memset(time1, 0, 72);
    memset(&v269, 0, sizeof(v269));
    fpfs_GetTime(v198, (uint64_t)&v269);
    time = *v194;
    memset(&v245, 0, sizeof(v245));
    fpfs_GetNextTimeToPlay(v198, 1, (uint64_t)&v245);
    if (!*(_QWORD *)(v198 + 96))
      goto LABEL_371;
    fpfs_GetItemBufferedDuration((const __CFArray *)v149, &time, time1, 0);
    if (*(float *)(v199 + 108) >= 0.0)
    {
      *(CMTime *)time2 = v245;
      *(CMTime *)rhs = time;
      CMTimeAdd(&v245, (CMTime *)time2, (CMTime *)rhs);
    }
    else
    {
      *(CMTime *)time2 = v245;
      *(CMTime *)rhs = time;
      CMTimeSubtract(&v245, (CMTime *)time2, (CMTime *)rhs);
    }
    v200 = *(const void **)(v198 + 96);
    HasEndedOrBufferedBeyondFwdEnd = fpfsi_PumpHasEndedOrBufferedBeyondFwdEnd((uint64_t)v149);
    *(CMTime *)time2 = v245;
    FigAlternatePlaybackBitrateMonitorSetStreamDuration(v200, (CMTime *)time2, HasEndedOrBufferedBeyondFwdEnd);
    v202 = *(_QWORD *)(v198 + 928);
    if (!v202)
      goto LABEL_371;
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBytePumpGetFigBaseObject(v202);
    v205 = v204;
    v206 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v206)
    {
      v206(v205, CFSTR("FBP_CMCDHeaderVendor"), AllocatorForMedia, &cf);
      if (cf)
      {
        v207 = *(_DWORD *)(v198 + 1088);
        if ((v207 & 1) == 0)
        {
          if ((v207 & 2) == 0)
            goto LABEL_369;
LABEL_375:
          *(_OWORD *)v251 = 0u;
          memset(time2, 0, sizeof(time2));
          *(CMTime *)rhs = v269;
          duration = time1[1];
          CMTimeRangeMake((CMTimeRange *)time2, (CMTime *)rhs, &duration);
          *(_OWORD *)rhs = *(_OWORD *)time2;
          *(_OWORD *)&rhs[16] = *(_OWORD *)&time2[16];
          v266 = *(_OWORD *)v251;
          FigCMCDHeaderVendorSetLoadedTimeRange((uint64_t)cf, 2, (__int128 *)rhs);
          if ((*(_DWORD *)(v198 + 1088) & 4) == 0)
            goto LABEL_371;
LABEL_370:
          *(_OWORD *)v251 = 0u;
          memset(time2, 0, sizeof(time2));
          *(CMTime *)rhs = v269;
          duration = time1[2];
          CMTimeRangeMake((CMTimeRange *)time2, (CMTime *)rhs, &duration);
          *(_OWORD *)rhs = *(_OWORD *)time2;
          *(_OWORD *)&rhs[16] = *(_OWORD *)&time2[16];
          v266 = *(_OWORD *)v251;
          FigCMCDHeaderVendorSetLoadedTimeRange((uint64_t)cf, 6, (__int128 *)rhs);
          goto LABEL_371;
        }
        *(_OWORD *)v251 = 0u;
        memset(time2, 0, sizeof(time2));
        *(CMTime *)rhs = v269;
        duration = time1[0];
        CMTimeRangeMake((CMTimeRange *)time2, (CMTime *)rhs, &duration);
        *(_OWORD *)rhs = *(_OWORD *)time2;
        *(_OWORD *)&rhs[16] = *(_OWORD *)&time2[16];
        v266 = *(_OWORD *)v251;
        FigCMCDHeaderVendorSetLoadedTimeRange((uint64_t)cf, 4, (__int128 *)rhs);
        v207 = *(_DWORD *)(v198 + 1088);
        if ((v207 & 2) != 0)
          goto LABEL_375;
LABEL_369:
        if ((v207 & 4) != 0)
          goto LABEL_370;
LABEL_371:
        if (cf)
          CFRelease(cf);
      }
    }
  }
}

uint64_t fpfsi_setPlaybackRateMonitorProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a1 + 96);
  if (!v3)
    return 0;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(v3, a2, a3);
  else
    return 4294954514;
}

void fpfsi_setupCMCDHeaderVendor()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 928);
  if (v1)
  {
    v2 = DerivedStorage;
    cf = 0;
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBaseObject = FigBytePumpGetFigBaseObject(v1);
    v5 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v5)
    {
      v5(FigBaseObject, CFSTR("FBP_CMCDHeaderVendor"), AllocatorForMedia, &cf);
      if (cf)
      {
        FigCMCDHeaderVendorSetIsLikelyToKeepUp((uint64_t)cf, *(_DWORD *)(v2 + 524) == 1);
        FigCMCDHeaderVendorSetTimebase((uint64_t)cf, *(const void **)(v2 + 576));
        CFRelease(cf);
      }
    }
  }
}

void fpfsi_DeferredHandleTimebaseEffectiveRateChanged(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  CMTimeEpoch v6;
  double Rate;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  CMTime *v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, __CFString *, _QWORD);
  uint64_t TimebaseStarterTrack;
  uint64_t v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime *v19;
  const void *v20;
  CMClockRef HostTimeClock;
  const void *v22;
  CMClockRef v23;
  const void *v24;
  CMClockRef v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v30)(uint64_t, const __CFString *, uint64_t, CMTime *);
  NSObject *v31;
  NSObject *v32;
  CMTimeEpoch epoch;
  uint64_t v34;
  double Seconds;
  double v36;
  void (*v37)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v38;
  double Current;
  double v40;
  double v41;
  void (*v42)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v43;
  uint64_t UpTimeNanoseconds;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  CMTime lhs;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  CMTime type;
  CMTime v58;
  CMTime v59;
  CMTime v60;
  CMTime time2;
  CMTime time;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)DerivedStorage;
  v5 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v60.value = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v60.epoch = v6;
  v51 = *(_OWORD *)&v60.value;
  *(_OWORD *)&v59.value = *(_OWORD *)&v60.value;
  v59.epoch = v6;
  fpfs_LockMutexWithCaller((uint64_t)v4);
  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 576));
  CMTimebaseGetTime(&v59, *(CMTimebaseRef *)(DerivedStorage + 576));
  FigCFDictionaryGetCMTimeIfPresent();
  if ((v60.flags & 1) == 0)
    v60 = v59;
  v8 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (Rate == 0.0)
  {
    if (dword_1EE2A2A88)
    {
LABEL_13:
      LODWORD(v58.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v8 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    }
  }
  else
  {
    v9 = CMBaseObjectGetDerivedStorage();
    if ((*(_BYTE *)(v9 + 3324) & 1) != 0)
    {
      v10 = v9;
      v11 = (CMTime *)(v9 + 3312);
      v12 = (double)(FigGetUpTimeNanoseconds() - *(_QWORD *)(v9 + 3304));
      time = *v11;
      v13 = (uint64_t)(v12 + CMTimeGetSeconds(&time) * -1000000000.0) / 0xF4240uLL;
      if ((int)v13 >= 1)
      {
        v14 = *(_QWORD *)(v10 + 2536);
        if (v14)
        {
          v15 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 40);
          if (v15)
            v15(v14, CFSTR("playerStats"), CFSTR("TmLstTrans"), v13);
        }
      }
      *(_QWORD *)(v10 + 3304) = 0;
      *(_OWORD *)&v11->value = v51;
      v11->epoch = v6;
      v8 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    }
    TimebaseStarterTrack = fpfsi_getTimebaseStarterTrack((uint64_t)a2);
    if (!TimebaseStarterTrack || (v17 = TimebaseStarterTrack, (*(_BYTE *)(TimebaseStarterTrack + 372) & 1) == 0))
    {
      if (!dword_1EE2A2A88)
        goto LABEL_45;
      goto LABEL_13;
    }
    v50 = v5;
    v19 = (CMTime *)(TimebaseStarterTrack + 360);
    memset(&v58, 0, sizeof(v58));
    v20 = *(const void **)(DerivedStorage + 576);
    HostTimeClock = CMClockGetHostTimeClock();
    time = v59;
    CMSyncConvertTime(&v58, &time, v20, HostTimeClock);
    memset(&type, 0, sizeof(type));
    v22 = *(const void **)(DerivedStorage + 576);
    v23 = CMClockGetHostTimeClock();
    time = *v19;
    CMSyncConvertTime(&type, &time, v22, v23);
    memset(&v56, 0, sizeof(v56));
    v24 = *(const void **)(DerivedStorage + 576);
    v25 = CMClockGetHostTimeClock();
    time = v60;
    CMSyncConvertTime(&v56, &time, v24, v25);
    *(_OWORD *)&v55.value = v51;
    v55.epoch = v6;
    time = v56;
    time2 = type;
    if (CMTimeCompare(&time, &time2) < 0)
    {
      memset(&v54, 0, sizeof(v54));
      time = type;
      time2 = v58;
      CMTimeSubtract(&v54, &time, &time2);
      if (dword_1EE2A2A88)
      {
        LODWORD(v53.value) = 0;
        v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      }
      *(_OWORD *)&v55.value = *(_OWORD *)&v54.value;
      epoch = v54.epoch;
    }
    else
    {
      v54 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v26 = *(_QWORD *)(v17 + 96);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 32);
        if (v27)
        {
          time.value = 0;
          AllocatorForMedia = FigGetAllocatorForMedia();
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v27);
          v30 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
          if (v30)
            v30(FigBaseObject, CFSTR("UnpauseLatencyEstimate"), AllocatorForMedia, &time);
          if (time.value)
          {
            CMTimeMakeFromDictionary(&v54, (CFDictionaryRef)time.value);
            CFRelease((CFTypeRef)time.value);
          }
        }
      }
      memset(&v53, 0, sizeof(v53));
      time = v56;
      time2 = v54;
      CMTimeAdd(&lhs, &time, &time2);
      time = v58;
      CMTimeSubtract(&v53, &lhs, &time);
      if (dword_1EE2A2A88)
      {
        v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      }
      *(_OWORD *)&v55.value = *(_OWORD *)&v53.value;
      epoch = v53.epoch;
    }
    v55.epoch = epoch;
    v5 = v50;
    if (!*(_BYTE *)(DerivedStorage + 2587))
    {
      *(_BYTE *)(DerivedStorage + 2587) = 1;
      v34 = *(_QWORD *)(DerivedStorage + 2536);
      time = v55;
      Seconds = CMTimeGetSeconds(&time);
      if (v34)
      {
        v36 = Seconds;
        v37 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v37)
          v37(v34, CFSTR("playerStats"), CFSTR("TimeUntilOutputStart"), (uint64_t)(v36 * 1000.0), 0);
      }
      v38 = *(_QWORD *)(DerivedStorage + 2536);
      Current = CFAbsoluteTimeGetCurrent();
      if (v38)
      {
        v40 = Current;
        v41 = *(double *)(DerivedStorage + 2984);
        v42 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v42)
          v42(v38, CFSTR("playerStats"), CFSTR("TimeLTKUToSTimebaseChange"), (uint64_t)((v40 - v41) * 1000.0), 0);
      }
      v43 = CMBaseObjectGetDerivedStorage();
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v45 = *(_QWORD *)(v43 + 2064);
      if (v45)
      {
        v46 = *(_QWORD *)(v43 + 2536);
        if (v46)
        {
          v47 = UpTimeNanoseconds;
          v48 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
          if (v48)
            v48(v46, CFSTR("startupStats"), CFSTR("tfac2SetRateEnd"), (v47 - v45) / 0xF4240uLL, 0);
        }
      }
      if (!*(_BYTE *)(v43 + 2589))
      {
        *(_BYTE *)(v43 + 2589) = 1;
        fpfsi_RTCReportingReportStartupPerformanceMetrics();
      }
    }
    if (*v8 == 1)
    {
      strncpy((char *)&time, (const char *)(DerivedStorage + 3072), 8uLL);
      time = v59;
      CMTimeGetSeconds(&time);
      time = v55;
      CMTimeGetSeconds(&time);
      kdebug_trace();
    }
    fpfsi_scheduleFVTTransitionsForItem(a2, (uint64_t *)3, 0);
  }
LABEL_45:
  if (*v8 == 1)
  {
    time = v59;
    CMTimeGetSeconds(&time);
    kdebug_trace();
  }
  if (!*(_BYTE *)(v5 + 51) && !FigRetainProxyIsInvalidated())
  {
    v49 = *(_QWORD *)(DerivedStorage + 720);
    if (v49)
      FigImageQueueTableRespondToTimebaseRateChange(v49, *(OpaqueCMTimebase **)(DerivedStorage + 576));
    if (fpfs_EnsureScanningBoundaryTimer((uint64_t)a2) == -12863)
      fpfs_HandleScanningBoundaryTimerEnd((const __CFArray *)a2);
  }
  if (*v8 == 1)
  {
    time = v59;
    CMTimeGetSeconds(&time);
    kdebug_trace();
  }
  fpfs_UnlockAndPostNotificationsWithCaller(v4);
}

void sub_1929D576C()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

uint64_t fpfs_EnsureScanningBoundaryTimer(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  CMTimeValue v5;
  uint64_t v6;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  float v9;
  float v10;
  CMTime *v11;
  NSObject *v12;
  NSObject *v13;
  OpaqueCMTimebase *v14;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime v19;
  CMTime v20;
  CMTime fireTime[2];
  CMTime v22;
  __int128 v23;
  uint64_t v24;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = MEMORY[0x1E0CA2E18];
  v5 = *MEMORY[0x1E0CA2E18];
  v24 = 0;
  value = v5;
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v23 = 0uLL;
  v6 = 0;
  if (fpfsi_GetDuration(a1, &v23) || (BYTE12(v23) & 0x11) != 0x11)
    return v6;
  flags = *(_DWORD *)(v4 + 12);
  epoch = *(_QWORD *)(v4 + 16);
  v9 = *(float *)(v3 + 108);
  if (v9 <= 1.0 && v9 >= 0.0)
  {
    v6 = 0;
    goto LABEL_15;
  }
  memset(&v22, 0, sizeof(v22));
  CMTimeMake(&v22, 2, 1);
  memset(fireTime, 0, sizeof(fireTime));
  fpfsi_getSeekableTimeRange(a1, fireTime);
  memset(&v20, 0, sizeof(v20));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v20);
  memset(&v19, 0, sizeof(v19));
  lhs = fireTime[0];
  rhs = fireTime[1];
  CMTimeAdd(&v19, &lhs, &rhs);
  v10 = *(float *)(v3 + 108);
  if (v10 > 1.0)
  {
    lhs = v19;
    rhs = v22;
    CMTimeSubtract(&time2, &lhs, &rhs);
    lhs = v20;
    if (CMTimeCompare(&lhs, &time2) < 0)
    {
      v11 = &v19;
      goto LABEL_14;
    }
    v10 = *(float *)(v3 + 108);
  }
  if (v10 >= 0.0 || (lhs = v20, rhs = fireTime[0], CMTimeCompare(&lhs, &rhs) < 1))
  {
    v6 = 4294954433;
    goto LABEL_15;
  }
  v11 = fireTime;
LABEL_14:
  v6 = 0;
  value = v11->value;
  flags = v11->flags;
  timescale = v11->timescale;
  epoch = v11->epoch;
LABEL_15:
  v12 = *(NSObject **)(DerivedStorage + 2296);
  if ((flags & 1) != 0)
  {
    if (!v12)
    {
      v13 = fpfs_TimerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 600), *(void **)(DerivedStorage + 16), 0xFFFFFFFFFFFFFFFFLL, (void (__cdecl *)(void *))fpfs_ScanningBoundaryTimerProc, 0);
      *(_QWORD *)(DerivedStorage + 2296) = v13;
      if (!v13)
        return FigSignalErrorAt();
      CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 576), v13);
      v12 = *(NSObject **)(DerivedStorage + 2296);
    }
    v14 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
    fireTime[0].value = value;
    *(_QWORD *)&fireTime[0].timescale = __PAIR64__(flags, timescale);
    fireTime[0].epoch = epoch;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v14, v12, fireTime, 0);
  }
  else if (v12)
  {
    fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 2296));
  }
  return v6;
}

void fpfs_HandleScanningBoundaryTimerEnd(const __CFArray *a1)
{
  void **DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFIndex Count;
  uint64_t v7;

  DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(unsigned int *)(v3 + 632);
  v5 = *(_QWORD *)(v3 + 80);
  Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 72));
  if (v5)
    v7 = Count + 1;
  else
    v7 = Count;
  if (FigPlaybackGetEffectiveActionAtEnd(v4, v7) == 2)
    fpfs_SetRateWithFade(*DerivedStorage, 1.0);
  fpfs_StopPlayingItem(v3, a1, 0);
}

void fpfsi_RTCReportingReportStartupPerformanceMetrics()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, __CFString *, uint64_t, _QWORD, CFTypeRef *);
  int v4;
  CFTypeRef v5;
  const void *v6;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!*(_QWORD *)(DerivedStorage + 2576))
  {
    v1 = DerivedStorage;
    v2 = *(_QWORD *)(DerivedStorage + 2536);
    if (v2)
    {
      v3 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 8);
      if (v3)
      {
        v4 = v3(v2, CFSTR("playerStats"), 115, 0, &cf);
        v5 = cf;
        if (!v4)
        {
          v6 = *(const void **)(v1 + 2576);
          *(_QWORD *)(v1 + 2576) = cf;
          if (v5)
            CFRetain(v5);
          if (v6)
            CFRelease(v6);
          fpfsi_UpdateAccessLogStartupPerformanceMetrics();
          v5 = cf;
        }
        if (v5)
          CFRelease(v5);
      }
    }
  }
}

void fpfsi_UpdateAccessLogStartupPerformanceMetrics()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  __CFDictionary *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 1904);
  if (v1 && CFArrayGetCount(v1) >= 1)
  {
    if (*(_QWORD *)(DerivedStorage + 2576))
    {
      ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1904), 0);
      CFDictionarySetValue(ValueAtIndex, CFSTR("c-startup_perf"), *(const void **)(DerivedStorage + 2576));
    }
  }
}

uint64_t fpfsi_GetDuration(uint64_t a1, __int128 *a2)
{
  const void **DerivedStorage;
  const void **v4;
  const void *v5;
  uint64_t v6;
  const void *v7;
  const void **v8;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  int v12;
  __int128 v14;
  CFDictionaryRef v15;
  __int128 v16;
  CMTimeFlags v17;
  CMTimeEpoch v18;
  const void *i;
  CMTime v20;
  CMTime time1;
  CFDictionaryRef dictionaryRepresentation;
  CMTimeValue v23;
  CMTimeScale v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = DerivedStorage;
    v5 = *DerivedStorage;
    dictionaryRepresentation = 0;
    v6 = MEMORY[0x1E0CA2E10];
    *a2 = *MEMORY[0x1E0CA2E10];
    *((_QWORD *)a2 + 2) = *(_QWORD *)(v6 + 16);
    fpfs_LockMutexWithCaller((uint64_t)v5);
    if (!FigRetainProxyIsInvalidated() || !FigSignalErrorAt())
    {
      v7 = v4[116];
      if (v7)
      {
        v8 = v4 + 165;
        if ((*((_BYTE *)v4 + 1332) & 1) != 0)
        {
          v14 = *(_OWORD *)v8;
          *((_QWORD *)a2 + 2) = v4[167];
          *a2 = v14;
        }
        else
        {
          AllocatorForMedia = FigGetAllocatorForMedia();
          FigBaseObject = FigBytePumpGetFigBaseObject(v7);
          v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
          if (v11)
          {
            v12 = v11(FigBaseObject, CFSTR("FBP_Duration"), AllocatorForMedia, &dictionaryRepresentation);
            if (v12)
            {
              if ((v12 & 0xFFFFFFFD) != 0xFFFFCE10)
                goto LABEL_26;
            }
            else
            {
              CMTimeMakeFromDictionary(&time1, dictionaryRepresentation);
              *a2 = *(_OWORD *)&time1.value;
              v15 = dictionaryRepresentation;
              *((_QWORD *)a2 + 2) = time1.epoch;
              CFRelease(v15);
            }
          }
          v16 = *a2;
          v4[167] = (const void *)*((_QWORD *)a2 + 2);
          *(_OWORD *)v8 = v16;
        }
        if ((*((_DWORD *)a2 + 3) & 0x1D) == 1)
        {
          v23 = *MEMORY[0x1E0CA2E68];
          v17 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
          v24 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
          v18 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          for (i = v4[130]; i; i = (const void *)*((_QWORD *)i + 1))
          {
            if (!*((_BYTE *)i + 184) && *((_DWORD *)i + 38) == 6 && (*((_BYTE *)i + 228) & 1) != 0)
            {
              time1.timescale = v24;
              time1.flags = v17;
              time1.epoch = v18;
              v20 = *(CMTime *)((_BYTE *)i + 9);
              time1.value = v23;
              if (CMTimeCompare(&time1, &v20) < 0)
              {
                v23 = *((_QWORD *)i + 27);
                v24 = *((_DWORD *)i + 56);
                v17 = *((_DWORD *)i + 57);
                v18 = *((_QWORD *)i + 29);
              }
            }
          }
          if ((v17 & 0x1D) == 1)
          {
            time1.timescale = v24;
            time1.flags = v17;
            time1.epoch = v18;
            v20 = *(CMTime *)a2;
            time1.value = v23;
            if (CMTimeCompare(&time1, &v20) >= 1)
            {
              *(_QWORD *)a2 = v23;
              *((_DWORD *)a2 + 2) = v24;
              *((_DWORD *)a2 + 3) = v17;
              *((_QWORD *)a2 + 2) = v18;
              *(_OWORD *)v8 = *a2;
              v8[2] = (const void *)v18;
            }
          }
        }
      }
    }
LABEL_26:
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
  }
  return FigSignalErrorAt();
}

uint64_t fpfsi_getSeekableTimeRange@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  CMTime *DerivedStorage;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[3];
  __int128 v14;
  __int128 v15;
  __int128 v16;

  DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  v5 = MEMORY[0x1E0CA2E40];
  v6 = *MEMORY[0x1E0CA2E40];
  v7 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *a2 = *MEMORY[0x1E0CA2E40];
  a2[1] = v7;
  v8 = *(_OWORD *)(v5 + 32);
  a2[2] = v8;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  result = fpfsi_getPumpAvailableTimeRange(DerivedStorage, &v14);
  if ((_DWORD)result
    || (BYTE12(v14) & 1) == 0
    || (BYTE4(v16) & 1) == 0
    || *((_QWORD *)&v16 + 1)
    || (*((_QWORD *)&v15 + 1) & 0x8000000000000000) != 0)
  {
    result = fpfsi_TotalTimeRangeInBuffer(a1, (uint64_t)v13);
    v12 = v13[1];
    *a2 = v13[0];
    a2[1] = v12;
    v11 = v13[2];
  }
  else
  {
    v10 = v15;
    *a2 = v14;
    a2[1] = v10;
    v11 = v16;
  }
  a2[2] = v11;
  return result;
}

NSObject *fpfs_TimerDispatchSourceCreate(dispatch_queue_t queue, void *a2, dispatch_time_t a3, void (__cdecl *a4)(void *), void (__cdecl *a5)(void *))
{
  NSObject *v9;

  v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, queue);
  if (v9)
  {
    if (a2)
      CFRetain(a2);
    dispatch_set_context(v9, a2);
    dispatch_source_set_timer(v9, a3, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler_f(v9, a4);
    dispatch_source_set_cancel_handler_f(v9, a5);
    dispatch_set_finalizer_f(v9, (dispatch_function_t)FigCFRelease_0);
    dispatch_resume(v9);
  }
  return v9;
}

void fpfs_ScanningBoundaryTimerProc(uint64_t a1)
{
  CFTypeRef v1;
  id v2;
  const __CFArray *v3;
  CFTypeRef cf;
  CFTypeRef v5;

  cf = 0;
  v5 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &v5, &cf))
  {
    v1 = v5;
    v2 = *(id *)(CMBaseObjectGetDerivedStorage() + 776);
    voucher_adopt();
    v3 = (const __CFArray *)cf;
    if (fpfs_EnsureScanningBoundaryTimer(cf) == -12863)
      fpfs_HandleScanningBoundaryTimerEnd(v3);

    fpfs_UnlockAndPostNotificationsWithCaller(v1);
  }
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
}

uint64_t fpfsi_getPumpAvailableTimeRange(CMTime *a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  CMTimeEpoch epoch;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t result;
  CMTime *v11;
  CMTimeFlags flags;
  CMTimeEpoch v13;
  CMTimeEpoch v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *);
  CMTimeFlags v18;
  CMTimeEpoch v19;
  __int128 v20;
  CMTimeRange v21;
  CMTime rhs;
  CMTime lhs;
  CFDictionaryRef dictionaryRepresentation;
  CMTimeValue v25;
  CMTimeScale v26;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  dictionaryRepresentation = 0;
  v2 = MEMORY[0x1E0CA2E40];
  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *a2 = *MEMORY[0x1E0CA2E40];
  a2[1] = v3;
  a2[2] = *(_OWORD *)(v2 + 32);
  epoch = a1[38].epoch;
  if (!epoch)
    return 4294954436;
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBaseObject = FigBytePumpGetFigBaseObject(epoch);
  v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v9)
    return 4294954514;
  result = v9(FigBaseObject, CFSTR("FBP_MinTime"), AllocatorForMedia, &dictionaryRepresentation);
  if ((_DWORD)result)
    return result;
  CMTimeMakeFromDictionary(&v21.start, dictionaryRepresentation);
  timescale = v21.start.timescale;
  value = v21.start.value;
  v11 = a1 + 49;
  lhs.epoch = v21.start.epoch;
  rhs = a1[49];
  *(_OWORD *)&lhs.value = *(_OWORD *)&v21.start.value;
  CMTimeSubtract(&v21.start, &lhs, &rhs);
  value = v21.start.value;
  flags = v21.start.flags;
  timescale = v21.start.timescale;
  v13 = v21.start.epoch;
  CFRelease(dictionaryRepresentation);
  v14 = a1[38].epoch;
  v15 = FigGetAllocatorForMedia();
  v16 = FigBytePumpGetFigBaseObject(v14);
  v17 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v17)
    return 4294954514;
  result = v17(v16, CFSTR("FBP_MaxTime"), v15, &dictionaryRepresentation);
  if (!(_DWORD)result)
  {
    CMTimeMakeFromDictionary(&v21.start, dictionaryRepresentation);
    v26 = v21.start.timescale;
    v25 = v21.start.value;
    lhs.epoch = v21.start.epoch;
    rhs = *v11;
    *(_OWORD *)&lhs.value = *(_OWORD *)&v21.start.value;
    CMTimeSubtract(&v21.start, &lhs, &rhs);
    v25 = v21.start.value;
    v18 = v21.start.flags;
    v26 = v21.start.timescale;
    v19 = v21.start.epoch;
    CFRelease(dictionaryRepresentation);
    result = 0;
    if ((flags & 1) != 0 && (v18 & 1) != 0)
    {
      rhs.epoch = v19;
      lhs.value = value;
      lhs.timescale = timescale;
      lhs.flags = flags;
      lhs.epoch = v13;
      rhs.value = v25;
      rhs.timescale = v26;
      rhs.flags = v18;
      CMTimeRangeFromTimeToTime(&v21, &lhs, &rhs);
      result = 0;
      v20 = *(_OWORD *)&v21.start.epoch;
      *a2 = *(_OWORD *)&v21.start.value;
      a2[1] = v20;
      a2[2] = *(_OWORD *)&v21.duration.timescale;
    }
  }
  return result;
}

uint64_t fpfsi_TotalTimeRangeInBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  CMTime *p_duration;
  _BYTE *v15;
  _BYTE *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  Float64 Seconds;
  __int128 v49;
  Float64 v50;
  CMTime *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  CMTime v55;
  CMTimeRange v56;
  CMTime v57;
  CMTime time;
  CMTime v59;
  CMTime rhs;
  CMTime time2;
  CMTime v62;
  CMTimeRange v63;
  CMTime time1;
  CMTimeRange v65;
  CMTimeRange v66;
  CMTimeRange v67;
  CMTimeRange v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  _BYTE otherRange[52];
  __int16 v74;
  Float64 v75;
  __int16 v76;
  Float64 v77;
  CMTimeRange range;
  _BYTE v79[288];
  _BYTE v80[288];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v5 = MEMORY[0x1E0CA2E40];
  v53 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v54 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)(a2 + 16) = v53;
  v52 = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(a2 + 32) = v52;
  result = fpfsi_HasRequiredSubstreamsToIndicateBuffering();
  if (!(_DWORD)result)
    return result;
  v7 = 0;
  v72 = 0;
  v71 = 0;
  v69 = 0;
  v70 = 0;
  do
  {
    v8 = &v80[v7];
    *v8 = v54;
    v8[1] = v53;
    v8[2] = v52;
    v9 = &v79[v7];
    *v9 = v54;
    v9[1] = v53;
    v7 += 48;
    v9[2] = v52;
  }
  while (v7 != 288);
  v10 = &v71;
  fpfsi_TotalTimeRangeInBufferForTrackList((opaqueCMBufferQueue *)(DerivedStorage + 130), (uint64_t)v80, (uint64_t)&v71);
  v11 = (unsigned __int8 *)&v69;
  result = (uint64_t)fpfsi_TotalTimeRangeInBufferForTrackList((opaqueCMBufferQueue *)(DerivedStorage + 132), (uint64_t)v79, (uint64_t)&v69);
  v12 = 0;
  p_duration = &v63.duration;
  do
  {
    if (*v11++)
    {
      v15 = &v79[v12];
      if ((v79[v12 + 12] & 1) != 0
        && (v15[36] & 1) != 0
        && !*(_QWORD *)&v79[v12 + 40]
        && (*((_QWORD *)v15 + 3) & 0x8000000000000000) == 0)
      {
        if (*(_BYTE *)v10
          && (v16 = &v80[v12], (v80[v12 + 12] & 1) != 0)
          && (v16[36] & 1) != 0
          && !*(_QWORD *)&v80[v12 + 40]
          && (*((_QWORD *)v16 + 3) & 0x8000000000000000) == 0)
        {
          v51 = p_duration;
          v19 = *((_OWORD *)v15 + 1);
          *(_OWORD *)&range.start.value = *(_OWORD *)v15;
          *(_OWORD *)&range.start.epoch = v19;
          *(_OWORD *)&range.duration.timescale = *((_OWORD *)v15 + 2);
          v20 = *((_OWORD *)v16 + 1);
          *(_OWORD *)otherRange = *(_OWORD *)v16;
          *(_OWORD *)&otherRange[16] = v20;
          *(_OWORD *)&otherRange[32] = *((_OWORD *)v16 + 2);
          CMTimeRangeGetIntersection(&v68, &range, (CMTimeRange *)otherRange);
          if ((v68.start.flags & 1) != 0)
          {
            v21 = *((_OWORD *)v15 + 1);
            *(_OWORD *)&range.start.value = *(_OWORD *)v15;
            *(_OWORD *)&range.start.epoch = v21;
            *(_OWORD *)&range.duration.timescale = *((_OWORD *)v15 + 2);
            v22 = *((_OWORD *)v16 + 1);
            *(_OWORD *)otherRange = *(_OWORD *)v16;
            *(_OWORD *)&otherRange[16] = v22;
            *(_OWORD *)&otherRange[32] = *((_OWORD *)v16 + 2);
            CMTimeRangeGetIntersection(&v67, &range, (CMTimeRange *)otherRange);
            if ((v67.duration.flags & 1) != 0)
            {
              v23 = *((_OWORD *)v15 + 1);
              *(_OWORD *)&range.start.value = *(_OWORD *)v15;
              *(_OWORD *)&range.start.epoch = v23;
              *(_OWORD *)&range.duration.timescale = *((_OWORD *)v15 + 2);
              v24 = *((_OWORD *)v16 + 1);
              *(_OWORD *)otherRange = *(_OWORD *)v16;
              *(_OWORD *)&otherRange[16] = v24;
              *(_OWORD *)&otherRange[32] = *((_OWORD *)v16 + 2);
              CMTimeRangeGetIntersection(&v66, &range, (CMTimeRange *)otherRange);
              if (!v66.duration.epoch)
              {
                v28 = *((_OWORD *)v15 + 1);
                *(_OWORD *)&range.start.value = *(_OWORD *)v15;
                *(_OWORD *)&range.start.epoch = v28;
                *(_OWORD *)&range.duration.timescale = *((_OWORD *)v15 + 2);
                v29 = *((_OWORD *)v16 + 1);
                *(_OWORD *)otherRange = *(_OWORD *)v16;
                *(_OWORD *)&otherRange[16] = v29;
                *(_OWORD *)&otherRange[32] = *((_OWORD *)v16 + 2);
                CMTimeRangeGetIntersection(&v65, &range, (CMTimeRange *)otherRange);
                if ((v65.duration.value & 0x8000000000000000) == 0)
                {
                  v30 = *((_OWORD *)v15 + 1);
                  *(_OWORD *)&range.start.value = *(_OWORD *)v15;
                  *(_OWORD *)&range.start.epoch = v30;
                  *(_OWORD *)&range.duration.timescale = *((_OWORD *)v15 + 2);
                  v31 = *((_OWORD *)v16 + 1);
                  *(_OWORD *)otherRange = *(_OWORD *)v16;
                  *(_OWORD *)&otherRange[16] = v31;
                  *(_OWORD *)&otherRange[32] = *((_OWORD *)v16 + 2);
                  CMTimeRangeGetIntersection(&v63, &range, (CMTimeRange *)otherRange);
                  time1 = *v51;
                  *(_OWORD *)&range.start.value = *MEMORY[0x1E0CA2E68];
                  range.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
                  if (!CMTimeCompare(&time1, &range.start))
                  {
                    memset(otherRange, 0, 24);
                    *(_OWORD *)&range.start.value = *(_OWORD *)v15;
                    range.start.epoch = *((_QWORD *)v15 + 2);
                    *(_OWORD *)&v56.start.value = *(_OWORD *)v16;
                    v56.start.epoch = *((_QWORD *)v16 + 2);
                    CMTimeMaximum((CMTime *)otherRange, &range.start, &v56.start);
                    memset(&v56, 0, 24);
                    v32 = *((_OWORD *)v15 + 1);
                    *(_OWORD *)&range.start.value = *(_OWORD *)v15;
                    *(_OWORD *)&range.start.epoch = v32;
                    *(_OWORD *)&range.duration.timescale = *((_OWORD *)v15 + 2);
                    CMTimeRangeGetEnd(&v62, &range);
                    v33 = *((_OWORD *)v16 + 1);
                    *(_OWORD *)&range.start.value = *(_OWORD *)v16;
                    *(_OWORD *)&range.start.epoch = v33;
                    *(_OWORD *)&range.duration.timescale = *((_OWORD *)v16 + 2);
                    CMTimeRangeGetEnd(&time2, &range);
                    CMTimeMinimum(&v56.start, &v62, &time2);
                    *(_OWORD *)&range.start.value = *(_OWORD *)&v56.start.value;
                    range.start.epoch = v56.start.epoch;
                    rhs = *(CMTime *)otherRange;
                    if (CMTimeCompare(&range.start, &rhs))
                    {
                      *(_OWORD *)&range.start.value = *(_OWORD *)&v56.start.value;
                      range.start.epoch = v56.start.epoch;
                      rhs = *(CMTime *)otherRange;
                      CMTimeSubtract(&time, &range.start, &rhs);
                      CMTimeAbsoluteValue(&v59, &time);
                      CMTimeMakeWithSeconds(&v57, 5.0, 1);
                      CMTimeCompare(&v59, &v57);
                    }
                  }
                }
              }
            }
          }
          v25 = *((_OWORD *)v16 + 1);
          *(_OWORD *)otherRange = *(_OWORD *)v16;
          *(_OWORD *)&otherRange[16] = v25;
          *(_OWORD *)&otherRange[32] = *((_OWORD *)v16 + 2);
          v26 = *((_OWORD *)v15 + 1);
          *(_OWORD *)&v56.start.value = *(_OWORD *)v15;
          *(_OWORD *)&v56.start.epoch = v26;
          *(_OWORD *)&v56.duration.timescale = *((_OWORD *)v15 + 2);
          result = (uint64_t)CMTimeRangeGetUnion(&range, (CMTimeRange *)otherRange, &v56);
          v27 = *(_OWORD *)&range.start.epoch;
          *(_OWORD *)v16 = *(_OWORD *)&range.start.value;
          *((_OWORD *)v16 + 1) = v27;
          *((_OWORD *)v16 + 2) = *(_OWORD *)&range.duration.timescale;
          p_duration = v51;
        }
        else
        {
          *(_BYTE *)v10 = 1;
          v17 = &v80[v12];
          v18 = *((_OWORD *)v15 + 1);
          *v17 = *(_OWORD *)v15;
          v17[1] = v18;
          v17[2] = *((_OWORD *)v15 + 2);
        }
      }
    }
    v12 += 48;
    v10 = (int *)((char *)v10 + 1);
  }
  while (v12 != 240);
  v34 = 0;
  v35 = v80;
  v36 = v54;
  while (!*((_BYTE *)&v71 + v34))
  {
LABEL_38:
    ++v34;
    v35 += 48;
    if (v34 == 5)
      goto LABEL_41;
  }
  if ((v35[12] & 1) != 0
    && (v35[36] & 1) != 0
    && !*((_QWORD *)v35 + 5)
    && (*((_QWORD *)v35 + 3) & 0x8000000000000000) == 0)
  {
    if ((*(_BYTE *)(a2 + 12) & 1) == 0
      || (*(_BYTE *)(a2 + 36) & 1) == 0
      || *(_QWORD *)(a2 + 40)
      || (*(_QWORD *)(a2 + 24) & 0x8000000000000000) != 0)
    {
      v37 = *((_OWORD *)v35 + 1);
      *(_OWORD *)a2 = *(_OWORD *)v35;
      *(_OWORD *)(a2 + 16) = v37;
      v38 = *((_OWORD *)v35 + 2);
    }
    else
    {
      v39 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)otherRange = *(_OWORD *)a2;
      *(_OWORD *)&otherRange[16] = v39;
      *(_OWORD *)&otherRange[32] = *(_OWORD *)(a2 + 32);
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)&v56.start.value = *(_OWORD *)v35;
      *(_OWORD *)&v56.start.epoch = v40;
      *(_OWORD *)&v56.duration.timescale = *((_OWORD *)v35 + 2);
      result = (uint64_t)CMTimeRangeGetIntersection(&range, (CMTimeRange *)otherRange, &v56);
      v36 = v54;
      v41 = *(_OWORD *)&range.start.epoch;
      *(_OWORD *)a2 = *(_OWORD *)&range.start.value;
      *(_OWORD *)(a2 + 16) = v41;
      v38 = *(_OWORD *)&range.duration.timescale;
    }
    *(_OWORD *)(a2 + 32) = v38;
    goto LABEL_38;
  }
  *(_OWORD *)a2 = v36;
  *(_OWORD *)(a2 + 16) = v53;
  *(_OWORD *)(a2 + 32) = v52;
LABEL_41:
  if (dword_1EE2A2A88 >= 5)
  {
    LODWORD(v56.start.value) = 0;
    LOBYTE(rhs.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = v56.start.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value))
      v44 = value;
    else
      v44 = value & 0xFFFFFFFE;
    if (v44)
    {
      v45 = *DerivedStorage;
      if (v45)
      {
        v46 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        if (a1)
          goto LABEL_48;
LABEL_51:
        v47 = "";
      }
      else
      {
        v46 = "";
        if (!a1)
          goto LABEL_51;
LABEL_48:
        v47 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      }
      *(_OWORD *)&range.start.value = *(_OWORD *)a2;
      range.start.epoch = *(_QWORD *)(a2 + 16);
      Seconds = CMTimeGetSeconds(&range.start);
      v49 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&range.start.value = *(_OWORD *)a2;
      *(_OWORD *)&range.start.epoch = v49;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a2 + 32);
      CMTimeRangeGetEnd(&v55, &range);
      v50 = CMTimeGetSeconds(&v55);
      *(_DWORD *)otherRange = 136316674;
      *(_QWORD *)&otherRange[4] = "fpfsi_TotalTimeRangeInBuffer";
      *(_WORD *)&otherRange[12] = 2048;
      *(_QWORD *)&otherRange[14] = v45;
      *(_WORD *)&otherRange[22] = 2082;
      *(_QWORD *)&otherRange[24] = v46;
      *(_WORD *)&otherRange[32] = 2048;
      *(_QWORD *)&otherRange[34] = a1;
      *(_WORD *)&otherRange[42] = 2082;
      *(_QWORD *)&otherRange[44] = v47;
      v74 = 2048;
      v75 = Seconds;
      v76 = 2048;
      v77 = v50;
      _os_log_send_and_compose_impl();
    }
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

BOOL fpfsi_HasRequiredSubstreamsToIndicateBuffering()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  int v6;
  int v7;
  int v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 1040);
  if (v1)
  {
    v2 = 0;
    do
    {
      if ((*(_BYTE *)(v1 + 228) & 1) != 0)
      {
        v3 = *(_DWORD *)(v1 + 32);
        v4 = v3 == 1935832172 || v3 == 1986618469;
        if (v4 || v3 == 1936684398)
          v2 |= 1 << *(_BYTE *)(v1 + 180);
      }
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
  }
  else
  {
    v2 = 0;
  }
  v6 = *(unsigned __int8 *)(DerivedStorage + 471);
  if (*(_BYTE *)(DerivedStorage + 553))
  {
    if (!*(_BYTE *)(DerivedStorage + 471))
      goto LABEL_22;
    if (!*(_QWORD *)(DerivedStorage + 1760))
    {
      v2 |= 1u;
      if (!*(_BYTE *)(DerivedStorage + 472))
        goto LABEL_28;
      goto LABEL_24;
    }
    v6 = *(unsigned __int8 *)(DerivedStorage + 474);
  }
  if (v6)
    v2 |= 1u;
LABEL_22:
  v7 = *(unsigned __int8 *)(DerivedStorage + 472);
  if (*(_BYTE *)(DerivedStorage + 553))
  {
    if (!*(_BYTE *)(DerivedStorage + 472))
      goto LABEL_28;
LABEL_24:
    if (!*(_QWORD *)(DerivedStorage + 1760))
    {
      v2 |= 2u;
      if (!*(_BYTE *)(DerivedStorage + 473))
        return (*(_DWORD *)(DerivedStorage + 1088) & ~v2 & 3) == 0;
LABEL_30:
      if (!*(_QWORD *)(DerivedStorage + 1760))
      {
LABEL_33:
        v2 |= 4u;
        return (*(_DWORD *)(DerivedStorage + 1088) & ~v2 & 3) == 0;
      }
      v8 = *(unsigned __int8 *)(DerivedStorage + 476);
      goto LABEL_32;
    }
    v7 = *(unsigned __int8 *)(DerivedStorage + 475);
  }
  if (v7)
    v2 |= 2u;
LABEL_28:
  v8 = *(unsigned __int8 *)(DerivedStorage + 473);
  if (*(_BYTE *)(DerivedStorage + 553))
  {
    if (!*(_BYTE *)(DerivedStorage + 473))
      return (*(_DWORD *)(DerivedStorage + 1088) & ~v2 & 3) == 0;
    goto LABEL_30;
  }
LABEL_32:
  if (v8)
    goto LABEL_33;
  return (*(_DWORD *)(DerivedStorage + 1088) & ~v2 & 3) == 0;
}

opaqueCMBufferQueue *fpfsi_TotalTimeRangeInBufferForTrackList(opaqueCMBufferQueue *result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CMTimeRange v14;
  CMTimeRange time2;
  CMTime end;
  CMTimeRange time1;
  CMTimeRange v18;
  CMTime v19;
  CMTime start;

  for (i = *(_QWORD *)result; i; i = *(_QWORD *)(i + 8))
  {
    if (!*(_BYTE *)(i + 184) || *(_DWORD *)(i + 32) == 1986618469)
    {
      result = *(opaqueCMBufferQueue **)(i + 80);
      if (result)
      {
        memset(&start, 0, sizeof(start));
        CMBufferQueueGetMinPresentationTimeStamp(&start, result);
        memset(&v19, 0, sizeof(v19));
        result = (opaqueCMBufferQueue *)CMBufferQueueGetDuration(&v19, *(CMBufferQueueRef *)(i + 80));
        for (j = 0; j != 5; ++j)
        {
          if (kCommonTypes[j] == *(_DWORD *)(i + 32))
            break;
        }
        *(_BYTE *)(a3 + (int)j) = 1;
        if ((start.flags & 0x1D) == 1 && (v19.flags & 0x1D) == 1)
        {
          memset(&v18, 0, sizeof(v18));
          time1.start = start;
          *(_OWORD *)&time2.start.value = *(_OWORD *)(i + 216);
          time2.start.epoch = *(_QWORD *)(i + 232);
          if (CMTimeCompare(&time1.start, &time2.start) >= 1)
          {
            time2.start = start;
            v14.start = v19;
            CMTimeSubtract(&time1.start, &time2.start, &v14.start);
            start = time1.start;
          }
          if (*(_BYTE *)(i + 184))
          {
            CMBufferQueueGetEndPresentationTimeStamp(&end, *(CMBufferQueueRef *)(i + 80));
            time2.start = start;
            CMTimeRangeFromTimeToTime(&time1, &time2.start, &end);
            v18 = time1;
          }
          else
          {
            time1.start = start;
            time2.start = v19;
            CMTimeRangeMake(&v18, &time1.start, &time2.start);
          }
          v7 = j;
          result = (opaqueCMBufferQueue *)CMBaseObjectGetDerivedStorage();
          v8 = a2 + 48 * (int)j;
          if ((*(_BYTE *)(v8 + 12) & 1) == 0
            || (v9 = a2 + 48 * v7, (*(_BYTE *)(v9 + 36) & 1) == 0)
            || *(_QWORD *)(a2 + 48 * v7 + 40)
            || (*(_QWORD *)(v9 + 24) & 0x8000000000000000) != 0)
          {
            v10 = *(_OWORD *)&v18.start.epoch;
            *(_OWORD *)v8 = *(_OWORD *)&v18.start.value;
            *(_OWORD *)(v8 + 16) = v10;
            v11 = *(_OWORD *)&v18.duration.timescale;
          }
          else
          {
            v12 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)&time2.start.value = *(_OWORD *)v8;
            *(_OWORD *)&time2.start.epoch = v12;
            *(_OWORD *)&time2.duration.timescale = *(_OWORD *)(v8 + 32);
            v14 = v18;
            result = (opaqueCMBufferQueue *)CMTimeRangeGetUnion(&time1, &time2, &v14);
            v13 = *(_OWORD *)&time1.start.epoch;
            *(_OWORD *)v8 = *(_OWORD *)&time1.start.value;
            *(_OWORD *)(v8 + 16) = v13;
            v11 = *(_OWORD *)&time1.duration.timescale;
          }
          *(_OWORD *)(v8 + 32) = v11;
        }
      }
    }
  }
  return result;
}

void fpfs_SetRateWithFade(void *a1, float a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetCMTime();
  fpfs_SetRateWithOptionsGuts(a1, (uint64_t)Mutable, 1, a2);
}

void fpfs_StopPlayingItem(uint64_t a1, const __CFArray *a2, __CFError *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  const __CFArray *v8;
  uint64_t v9;
  CFIndex Count;
  uint64_t v11;
  int EffectiveActionAtEnd;
  uint64_t v13;
  __int128 v14;
  CMTimeEpoch v15;
  int v16;
  int v17;
  int Code;
  const void *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v24;
  __CFString **v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, __CFString *, uint64_t, CMTime *);
  const void **v38;
  const __CFAllocator *v39;
  CFAbsoluteTime Current;
  CFDateRef v41;
  CFDateRef v42;
  __CFError *v43;
  int v44;
  const void *value;
  const void *v46;
  uint64_t v47;
  int v48;
  int PlayedDateForAssetAtURL;
  const __CFArray *v50;
  const void *v51;
  uint64_t v52;
  _BOOL4 IsPlayerPerformanceTraceEnabled;
  _BOOL4 v54;
  const __CFAllocator *v55;
  CFMutableArrayRef v56;
  const __CFAllocator *v57;
  int v58;
  void *v59;
  BOOL v60;
  const __CFArray *v61;
  int v62;
  CFMutableDictionaryRef v63;
  const __CFArray *v64;
  NSObject *v65;
  const __CFArray *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float Rate;
  NSObject *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  const char *v76;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v78;
  unsigned int v79;
  const char *v80;
  const char *v81;
  uint64_t v82;
  void (*v83)(uint64_t);
  uint64_t v84;
  const void *v85;
  const __CFArray *Next;
  const __CFArray *v87;
  uint64_t v88;
  NSObject *v89;
  unsigned int v90;
  unsigned int v91;
  const char *v92;
  uint64_t v93;
  const __CFAllocator *v94;
  uint64_t v95;
  CFTypeRef v96;
  void (*v97)(uint64_t, const __CFArray *, CFTypeRef);
  _BOOL4 v98;
  uint64_t v99;
  const void *v100;
  const __CFArray *v101;
  CMTimeEpoch v102;
  __int128 v103;
  CMTime time2;
  CFTypeRef cf;
  CFTypeRef v106;
  CFMutableDictionaryRef v107;
  CMTime time1;
  CMTime v109;
  const char *v110;
  __int16 v111;
  const __CFArray *v112;
  __int16 v113;
  const char *v114;
  __int16 v115;
  __CFError *v116;
  CMTime valuePtr[5];
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)DerivedStorage;
  v107 = 0;
  v8 = *(const __CFArray **)(a1 + 80);
  v98 = v8 == a2;
  v9 = *(unsigned int *)(a1 + 632);
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  v101 = v8;
  if (v8)
    v11 = Count + 1;
  else
    v11 = Count;
  EffectiveActionAtEnd = FigPlaybackGetEffectiveActionAtEnd(v9, v11);
  cf = 0;
  v106 = 0;
  CFRetain(a2);
  if (!a3)
    a3 = *(__CFError **)(DerivedStorage + 504);
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 1624));
  v13 = MEMORY[0x1E0CA2E18];
  v14 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 1632) = *MEMORY[0x1E0CA2E18];
  v15 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(DerivedStorage + 1648) = v15;
  v103 = v14;
  *(_OWORD *)(DerivedStorage + 1656) = v14;
  v102 = v15;
  *(_QWORD *)(DerivedStorage + 1672) = v15;
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 2296));
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 2328));
  if ((*(_BYTE *)(DerivedStorage + 332) & 1) != 0)
  {
    if (a3 && CFErrorGetCode(a3) != -15697)
    {
      v17 = *(_DWORD *)(DerivedStorage + 2192);
      if (!v17)
        v17 = *(_DWORD *)(DerivedStorage + 2196);
      Code = CFErrorGetCode(a3);
      fpfs_SeekDidFail(v7, a2, v17, Code);
    }
    else
    {
      memset(valuePtr, 0, 24);
      fpfsi_GetPumpMaxTimeAvailable(DerivedStorage, (uint64_t)valuePtr);
      memset(&v109, 0, sizeof(v109));
      fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&time2);
      time1 = valuePtr[0];
      CMTimeMinimum(&v109, &time1, &time2);
      time1 = v109;
      fpfs_SetTime((uint64_t)a2, &time1);
      fpfsi_setLastSeekTimeSet(DerivedStorage, v13);
      *(_OWORD *)(DerivedStorage + 1488) = v103;
      *(_QWORD *)(DerivedStorage + 1504) = v102;
      v16 = *(_DWORD *)(DerivedStorage + 2192);
      if (!v16)
        v16 = *(_DWORD *)(DerivedStorage + 2196);
      time1 = v109;
      fpfs_SeekDidComplete(v7, a2, v16, 0, 0, &time1);
    }
  }
  v100 = v7;
  if (!*(_BYTE *)(DerivedStorage + 530))
  {
    v19 = *(const void **)(a1 + 640);
    *(_QWORD *)(a1 + 640) = a3;
    if (a3)
      CFRetain(a3);
    if (v19)
      CFRelease(v19);
    if (a3)
    {
      LODWORD(valuePtr[0].value) = CFErrorGetCode(a3);
      v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
      if (v20)
      {
        v21 = v20;
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v24 = Mutable;
        if (Mutable)
        {
          CFDictionarySetValue(Mutable, CFSTR("Result"), v21);
          if (LODWORD(valuePtr[0].value))
            CFDictionarySetValue(v24, CFSTR("CFError"), a3);
        }
        CFRelease(v21);
      }
      else
      {
        v24 = 0;
      }
      *(_QWORD *)(a1 + 648) = CFSTR("ReasonAdvanceDueToError");
      if (*(_BYTE *)(DerivedStorage + 460))
      {
        if (*(_BYTE *)(DerivedStorage + 468))
          v25 = kFigPlaybackItemNotification_FailedToPlayToEnd;
        else
          v25 = kFigPlaybackItemNotification_FailedToBecomeReadyForPlayback;
      }
      else
      {
        v25 = kFigPlaybackItemNotification_FailedToBecomeReadyForInspection;
      }
      fpfs_EnqueueNotification(v7, *v25, a2, v24);
    }
    fpfs_EnqueueNotification(v7, CFSTR("DidPlayToTheEnd"), a2, 0);
  }
  v26 = *(_QWORD *)(DerivedStorage + 1040);
  if (v26)
  {
    v27 = (__int128 *)MEMORY[0x1E0CA2E18];
    do
    {
      v28 = *(_QWORD *)(v26 + 8);
      if (*(_DWORD *)(v26 + 152) == 6)
      {
        fpfsi_MoveTrackToPlayedOut(DerivedStorage, v26, v27);
        if (!v28)
          break;
      }
      else
      {
        fpfs_DeleteTrack(a2);
        if (!v28)
          break;
      }
      v26 = v28;
    }
    while (*(_QWORD *)(DerivedStorage + 1040));
  }
  v29 = CMBaseObjectGetDerivedStorage();
  fpfs_ClearRenderChains(a2, 255);
  *(_QWORD *)(v29 + 772) = 0;
  v30 = CMBaseObjectGetDerivedStorage();
  v31 = CMBaseObjectGetDerivedStorage();
  v109.value = 0;
  v32 = *(_QWORD *)(v30 + 928);
  if (v32)
  {
    if (!*(_BYTE *)(v30 + 3057))
    {
      v33 = v31;
      v34 = FigGetAllocatorForMedia();
      FigBytePumpGetFigBaseObject(v32);
      v36 = v35;
      v37 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
      if (!v37)
        goto LABEL_59;
      v37(v36, CFSTR("FBP_DownloadDestinationURL"), v34, &v109);
      if (!v109.value)
        goto LABEL_59;
      v38 = (const void **)(v33 + 528);
      if (*(_QWORD *)(v33 + 528)
        || (FigAssetDownloadCoordinatorCopyClientBundleIdentifierForAsset(*(_QWORD *)(v30 + 32), (_QWORD *)(v33 + 528)),
            *v38))
      {
        v39 = (const __CFAllocator *)FigGetAllocatorForMedia();
        Current = CFAbsoluteTimeGetCurrent();
        v41 = CFDateCreate(v39, Current);
        if (v41)
        {
          v42 = v41;
          v99 = a1;
          v43 = a3;
          v44 = EffectiveActionAtEnd;
          value = (const void *)v109.value;
          v46 = *v38;
          v47 = CMBaseObjectGetDerivedStorage();
          v48 = 0;
          valuePtr[0].value = 0;
          if (value && v46)
          {
            if (*(_BYTE *)(v47 + 3056) || fpfsi_isItemPlayedOut((uint64_t)a2))
            {
              v48 = 1;
            }
            else
            {
              if (FigAssetDownloadStorageManagementCopyLastPlayedOutDateForAssetAtURL(value, v46, valuePtr))v60 = 1;
              else
                v60 = valuePtr[0].value == 0;
              v48 = !v60;
              if (valuePtr[0].value)
                CFRelease((CFTypeRef)valuePtr[0].value);
            }
          }
          PlayedDateForAssetAtURL = FigAssetDownloadStorageManagementSetLastPlayedDateForAssetAtURL((const __CFURL *)v109.value, *v38, (uint64_t)v42, v48);
          if (v48 && !PlayedDateForAssetAtURL)
            *(_BYTE *)(v30 + 3057) = 1;
          CFRelease(v42);
          EffectiveActionAtEnd = v44;
          a3 = v43;
          a1 = v99;
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
    if (v109.value)
      CFRelease((CFTypeRef)v109.value);
  }
LABEL_59:
  fpfsi_RTCReportingReportStartupPerformanceMetrics();
  if ((EffectiveActionAtEnd - 1) <= 1)
  {
    v50 = v101;
    if (v101 != a2)
      goto LABEL_135;
    if (EffectiveActionAtEnd == 1)
      fpfs_stopPlaybackForInternalReason(v100);
    *(_OWORD *)&valuePtr[0].value = v103;
    valuePtr[0].epoch = v102;
    *(_OWORD *)&v109.value = v103;
    v109.epoch = v102;
    fpfs_setRateInternal(v100, a2, valuePtr, &v109, 0.0);
    if (!dword_1EE2A2A88)
      goto LABEL_135;
    LODWORD(time1.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v78 = time1.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v79 = v78;
    else
      v79 = v78 & 0xFFFFFFFE;
    if (!v79)
    {
LABEL_134:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v50 = v101;
LABEL_135:
      if (a3)
      {
        fpfs_haltStream();
        fpfsi_ResetPlaybackItem(a2, 0);
      }
      if (v50 == a2 && !fpfs_FirstRenderingTrackofType((uint64_t)a2, 1936684398))
      {
        fpfs_ClearRenderChains(a2, 2);
        fpfs_ResetAudioHardwareFormat(*(_QWORD *)DerivedStorage);
      }
      v82 = *(_QWORD *)(DerivedStorage + 832);
      if (v82)
      {
        v83 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
        if (v83)
          v83(v82);
      }
      if (v50 == a2)
      {
        Next = fpfs_getNext(a1, 0);
        if (Next)
        {
          v87 = Next;
          if (Next != a2)
          {
            v88 = CMBaseObjectGetDerivedStorage();
            if (!*(_BYTE *)(v88 + 2441) && dword_1EE2A2A88)
            {
              LODWORD(time1.value) = 0;
              v89 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v90 = time1.value;
              if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
                v91 = v90;
              else
                v91 = v90 & 0xFFFFFFFE;
              if (v91)
              {
                if (v100)
                  v92 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v92 = "";
                v93 = CMBaseObjectGetDerivedStorage();
                LODWORD(v109.value) = 136316162;
                *(CMTimeValue *)((char *)&v109.value + 4) = (CMTimeValue)"fpfs_StopPlayingItem";
                LOWORD(v109.flags) = 2048;
                *(_QWORD *)((char *)&v109.flags + 2) = v100;
                HIWORD(v109.epoch) = 2082;
                v110 = v92;
                v111 = 2048;
                v112 = v87;
                v113 = 2082;
                v114 = (const char *)(v93 + 3072);
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_BYTE *)(v88 + 469) = 1;
            fpfs_EnqueueNotification(*(const void **)DerivedStorage, CFSTR("TimebaseChanged"), v87, 0);
          }
        }
      }
      goto LABEL_172;
    }
    if (v100)
    {
      v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      if (a2)
      {
LABEL_129:
        v81 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
LABEL_133:
        LODWORD(v109.value) = 136316418;
        *(CMTimeValue *)((char *)&v109.value + 4) = (CMTimeValue)"fpfs_StopPlayingItem";
        LOWORD(v109.flags) = 2048;
        *(_QWORD *)((char *)&v109.flags + 2) = v100;
        HIWORD(v109.epoch) = 2082;
        v110 = v80;
        v111 = 2048;
        v112 = a2;
        v113 = 2082;
        v114 = v81;
        v115 = 2112;
        v116 = a3;
        _os_log_send_and_compose_impl();
        goto LABEL_134;
      }
    }
    else
    {
      v80 = "";
      if (a2)
        goto LABEL_129;
    }
    v81 = "";
    goto LABEL_133;
  }
  v51 = v100;
  v52 = CMBaseObjectGetDerivedStorage();
  valuePtr[0].value = 0;
  IsPlayerPerformanceTraceEnabled = FPSupport_IsPlayerPerformanceTraceEnabled();
  if (*(unsigned __int8 *)(v52 + 656) | IsPlayerPerformanceTraceEnabled)
  {
    v54 = IsPlayerPerformanceTraceEnabled;
    if (!*(_BYTE *)(v52 + 656)
      || *(_QWORD *)(v52 + 664)
      || (v55 = CFGetAllocator(v100),
          v56 = CFArrayCreateMutable(v55, 0, MEMORY[0x1E0C9B378]),
          (*(_QWORD *)(v52 + 664) = v56) != 0))
    {
      v57 = CFGetAllocator(v100);
      v58 = fpfsi_copyPerformanceDictionary((uint64_t)a2, v57, valuePtr);
      v59 = (void *)valuePtr[0].value;
      if (v58 || !valuePtr[0].value)
      {
        if (!valuePtr[0].value)
          goto LABEL_83;
      }
      else
      {
        if (*(_BYTE *)(v52 + 656))
          CFArrayAppendValue(*(CFMutableArrayRef *)(v52 + 664), (const void *)valuePtr[0].value);
        if (v54)
          FPSupport_TracePlayerPerformanceDictionary((uint64_t)"Stream", v59);
      }
      CFRelease(v59);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
LABEL_83:
  if (*(_BYTE *)(DerivedStorage + 468))
  {
    v61 = v101;
    if (*(float *)(a1 + 108) == 0.0 || *(float *)(DerivedStorage + 840) != 0.0)
    {
      CMBaseObjectGetDerivedStorage();
      if (!*(_DWORD *)(DerivedStorage + 2284))
      {
        v62 = 6;
        goto LABEL_92;
      }
    }
    else
    {
      CMBaseObjectGetDerivedStorage();
      if (!*(_DWORD *)(DerivedStorage + 2284))
      {
        v62 = 10;
LABEL_92:
        *(_DWORD *)(DerivedStorage + 2284) = v62;
      }
    }
  }
  else
  {
    CMBaseObjectGetDerivedStorage();
    v61 = v101;
    if (!*(_DWORD *)(DerivedStorage + 2284))
    {
      v62 = 11;
      goto LABEL_92;
    }
  }
  if (!fpfs_CreateAccessLogEntryWithUnlock((uint64_t)a2, &v107))
  {
    v63 = v107;
    fpfs_CommitAccessLogEntry(a2, v107);
    if (v63)
      CFRelease(v63);
    if (*(_BYTE *)(DerivedStorage + 25))
    {
      v64 = *(const __CFArray **)(DerivedStorage + 1904);
      if (v64)
      {
        time1.value = 0;
        if (!FigPlaybackItemLogCreateW3CLogData(v64, (__CFString **)&time1))
        {
          if (dword_1EE2A2A88)
          {
            v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v61 = v101;
          }
          CFRelease((CFTypeRef)time1.value);
        }
      }
    }
  }
  if (v61 == a2)
  {
    v66 = fpfs_getNext(a1, a2);
    if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504) || *(float *)(DerivedStorage + 840) == 0.0 || v66)
    {
      if (v66)
      {
        v67 = CMBaseObjectGetDerivedStorage();
        v68 = CMBaseObjectGetDerivedStorage();
        v69 = CMBaseObjectGetDerivedStorage();
        if (*(_BYTE *)(v68 + 2440))
        {
          *(_OWORD *)&v109.value = v103;
          v109.epoch = v102;
          if (*(const __CFArray **)(v69 + 80) == v66)
            fpfs_StopPlayingItem_cold_1();
          v70 = *(float *)(v68 + 840);
          fpfs_GetItemBufferedDuration(v66, &v109, valuePtr, 0);
          time1 = v109;
          fpfs_CheckIfLikelyToKeepUpAndNotify(v100, v66, &time1, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], valuePtr);
          Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v68 + 576));
          *(float *)(CMBaseObjectGetDerivedStorage() + 840) = Rate;
          fpfsi_updateMaxPlayThroughTime();
          fpfsi_updateItemTimePropertiesForRateChange((uint64_t)v66, v70);
          if (*(float *)(v68 + 840) == 0.0)
            fpfs_CancelGaplessAttempt(v100, v66, 1);
        }
        if (*(_QWORD *)(v67 + 928) && *(_BYTE *)(v67 + 462) && *(_BYTE *)(v67 + 593))
        {
          if (dword_1EE2A2A88)
          {
            LODWORD(time1.value) = 0;
            v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v73 = time1.value;
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
              v74 = v73;
            else
              v74 = v73 & 0xFFFFFFFE;
            if (v74)
            {
              v75 = *(_QWORD *)v67;
              if (*(_QWORD *)v67)
                v76 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v76 = "";
              v84 = CMBaseObjectGetDerivedStorage();
              LODWORD(v109.value) = 136316162;
              *(CMTimeValue *)((char *)&v109.value + 4) = (CMTimeValue)"fpfs_StopPlayingItem";
              LOWORD(v109.flags) = 2048;
              *(_QWORD *)((char *)&v109.flags + 2) = v75;
              HIWORD(v109.epoch) = 2082;
              v110 = v76;
              v111 = 2048;
              v112 = v66;
              v113 = 2082;
              v114 = (const char *)(v84 + 3072);
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v51 = v100;
          }
          fpfsi_SetCurrentTimeWithSeekID((uint64_t)v66, MEMORY[0x1E0CA2E30], 0, 0);
        }
      }
    }
    else
    {
      *(_OWORD *)&valuePtr[0].value = v103;
      valuePtr[0].epoch = v102;
      *(_OWORD *)&v109.value = v103;
      v109.epoch = v102;
      fpfs_setRateInternal(v100, a2, valuePtr, &v109, 0.0);
    }
    v85 = *(const void **)(a1 + 80);
    if (v85)
    {
      CFRelease(v85);
      *(_QWORD *)(a1 + 80) = 0;
    }
    if (v66)
    {
      if (*(_BYTE *)(a1 + 49))
      {
        valuePtr[0].value = 0;
        fpfs_ensureTransaction((uint64_t)v51, &valuePtr[0].value);
        fpfsi_removeLayerSync();
        fpfs_commitTransaction((uint64_t)v51, valuePtr[0].value);
        if (valuePtr[0].value)
          CFRelease((CFTypeRef)valuePtr[0].value);
      }
    }
    fpfs_cleanupAllImageQueues(a2, 1);
    fpfs_tearDownManifoldsAndStream();
    fpfs_PullNextItem(v51);
    fpfs_EnqueueNotification(v51, CFSTR("ItemStoppedBeingCurrent"), a2, 0);
  }
  fpfsi_ResetPlaybackItem(a2, v98);
LABEL_172:
  if (*(_QWORD *)(DerivedStorage + 3360))
  {
    v94 = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(_OWORD *)&valuePtr[0].value = v103;
    valuePtr[0].epoch = v102;
    FigMetricItemPlaybackEndEventCreate(v94, (__int128 *)&valuePtr[0].value, 0, 0, &v106);
    v95 = *(_QWORD *)(DerivedStorage + 3360);
    v96 = v106;
    v97 = *(void (**)(uint64_t, const __CFArray *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v97)
      v97(v95, a2, v96);
  }
  if (cf)
    CFRelease(cf);
  if (v106)
    CFRelease(v106);
  CFRelease(a2);
}

void fpfs_SetRateWithOptionsGuts(void *a1, uint64_t a2, int a3, float a4)
{
  CMTime v8;
  CMTime v9;
  int v10;
  CMTime v11;
  CMTime v12;

  v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v11 = v12;
  v10 = 0;
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  v9 = v12;
  v8 = v12;
  fpfs_SetRateWithOptionsAndAnchorTime(a1, a4, a2, &v9, &v8, 0, a3);
}

void fpfs_SetRateWithOptionsAndAnchorTime(void *a1, float a2, uint64_t a3, CMTime *a4, CMTime *a5, char a6, int a7)
{
  uint64_t DerivedStorage;
  char v14;
  float v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  const __CFArray *Next;
  uint64_t v23;
  BOOL v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const char *v27;
  const char *v28;
  _BOOL4 v29;
  int v30;
  uint64_t RenderingTrackofType;
  uint64_t v32;
  BOOL v33;
  char v34;
  CMTimeFlags flags;
  uint64_t v36;
  void (*v37)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  int v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void (*v42)(uint64_t, const __CFString *, CFNumberRef);
  float v43;
  const __CFAllocator *v44;
  CFMutableDictionaryRef Mutable;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int updated;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, const __CFString *, uint64_t);
  const void *ValueAtIndex;
  int IsIFrameOnly;
  _BOOL4 v60;
  NSObject *v61;
  const void *NotificationPayloadForProperties;
  uint64_t v63;
  uint64_t v64;
  uint64_t AllocatorForMedia;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, __CFString *, uint64_t, CMTime *);
  int v69;
  unsigned int value;
  int v71;
  uint64_t v72;
  float v73;
  uint64_t (*v74)(uint64_t, float);
  CMTime *v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  float v79;
  _BOOL4 v81;
  _BOOL4 v82;
  uint64_t i;
  int IsDisplayModeSwitchInProgress;
  float v85;
  NSObject *v86;
  unsigned int v87;
  unsigned int v88;
  const char *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  double v93;
  _BOOL4 v94;
  uint64_t v95;
  char v96;
  int v97;
  int v98;
  CMTime *v99;
  CMTime *v100;
  char cf;
  CFNumberRef cfa;
  CMTimeEpoch v103;
  __int128 v104;
  float *valuePtr;
  CMTime v106;
  CMTime v107;
  CMTime v108;
  CMTime type;
  CMTime theArray;
  int v111;
  int v112;
  char v113;
  __int16 v114;
  CMTime v115;
  CMTime v116;
  const char *v117;
  __int16 v118;
  const __CFArray *v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  double v123;
  CMTime v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v104 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v115.value = *MEMORY[0x1E0CA2E18];
  v103 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v115.epoch = v103;
  v114 = 0;
  v113 = 0;
  v112 = 0;
  v111 = 0;
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(_BYTE *)(DerivedStorage + 51))
  {
    FigSignalErrorAt();
    v15 = 0.0;
    goto LABEL_121;
  }
  v14 = a6;
  v15 = *(float *)(DerivedStorage + 108);
  valuePtr = (float *)(DerivedStorage + 108);
  Next = fpfs_getNext(DerivedStorage, 0);
  v99 = a5;
  v100 = a4;
  v96 = a6;
  v97 = a7;
  if (Next)
  {
    v23 = CMBaseObjectGetDerivedStorage();
    v25 = *(float *)(v23 + 840) != a2 && HIBYTE(v114) != 0;
    cf = v25;
    fpfs_enqueuePrerollWasCancelledNotificationIfNeeded(Next);
    if ((v14 & 2) != 0)
      fpfsi_applyTimeToPausePlayback(Next, MEMORY[0x1E0CA2E18], 0, 0);
  }
  else
  {
    cf = 0;
    v23 = 0;
    *valuePtr = a2;
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(theArray.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (Next)
      v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
    else
      v27 = "";
    strncpy((char *)&v124, v27, 8uLL);
    if (a1)
      v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
    else
      v28 = "";
    strncpy((char *)&v124, v28, 8uLL);
    kdebug_trace();
  }
  if (Next || !v113)
  {
    if (!Next)
      goto LABEL_121;
    v29 = v15 == 0.0 && a2 != 0.0;
    if (v29 || HIBYTE(v114) && *(_DWORD *)(DerivedStorage + 164) != 4)
      LOBYTE(v114) = 1;
    if (v15 != a2)
      fpfsi_RTCReportingReportDesiredRateChange(*valuePtr);
    if (a2 == 0.0 || !(_BYTE)v114)
    {
      LOBYTE(v114) = 0;
    }
    else
    {
      if (*(_BYTE *)(v23 + 464))
        v30 = 5;
      else
        v30 = 1;
      fpfs_notifyExternalStartupTasksOfEvents((uint64_t)a1, v30, HIBYTE(v114), 0, MEMORY[0x1E0CA2E18]);
      if (!fpfs_areAllExternalStartupTasksCompleted() && *(float *)(v23 + 840) != 0.0)
        fpfs_SetRateWithFadeInternal(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0.0);
    }
    if (a2 > 0.0)
    {
      RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)Next, 1936684398);
      if (RenderingTrackofType)
      {
        v32 = RenderingTrackofType;
        if (fpfs_WantMATAtmosForTrack(RenderingTrackofType))
        {
          *(_BYTE *)(v32 + 190) = a5->flags & ((v96 & 4) >> 2);
          fpfs_applySoftwareVolumeToTrack(v32, 1, *(float *)(DerivedStorage + 104), 0.0);
        }
      }
    }
    v33 = *valuePtr == a2 && v114 == 0;
    v34 = cf;
    if (!v33)
      v34 = 1;
    if ((v14 & 2) == 0 && (v34 & 1) == 0 && v112 != 7)
    {
LABEL_121:
      if (*(float *)(DerivedStorage + 108) != v15)
      {
        NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(a1, 0, v16, v17, v18, v19, v20, v21, CFSTR("CurrentRate"), 0);
        FigCFDictionarySetInt32();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        fpfs_EnqueueNotification(a1, CFSTR("RateDidChange"), a1, NotificationPayloadForProperties);
      }
      if (*(_BYTE *)(DerivedStorage + 842) && v112 == 37)
        fpfs_PostNotificationWhenUnlocked(a1, CFSTR("InterstitialStarted"), a1, 0);
      fpfs_UnlockAndPostNotificationsWithCaller(a1);
    }
    flags = a4->flags;
    if ((flags & 1) == 0 || a2 <= 2.0 && a2 >= 0.0)
    {
      if (*valuePtr != a2 || ((a5->flags | flags) & 1) != 0)
      {
        v124.value = 0;
        *(_QWORD *)&v124.timescale = 0;
        fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_clearCoordinatedPlaybackSynchronizationTimebaseForPlayQueueItemsApply, (uint64_t)&v124);
      }
      *(_WORD *)(v23 + 518) = 0;
      *(_BYTE *)(v23 + 520) = 0;
      v36 = *(_QWORD *)(v23 + 2536);
      if (v36)
      {
        v37 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v37)
          v37(v36, CFSTR("playerStats"), CFSTR("ForcePlay"), HIBYTE(v114), 0);
      }
      if (v113)
      {
        v124 = *a4;
        v116 = *a5;
        FPSupport_SetTransientTimebaseForCoordinatedPlaybackSynchronization((uint64_t)Next, (uint64_t)&v124, (uint64_t)&v116, a2);
      }
      if (a2 == 0.0)
      {
        *valuePtr = a2;
        v38 = 0;
        if (v97)
        {
          *(_OWORD *)(DerivedStorage + 112) = v104;
          *(_QWORD *)(DerivedStorage + 128) = v103;
          *(_OWORD *)(DerivedStorage + 136) = v104;
          *(_QWORD *)(DerivedStorage + 152) = v103;
        }
      }
      else
      {
        if (*(float *)(v23 + 840) == 0.0 && *(_QWORD *)(v23 + 928) && !*(_BYTE *)(v23 + 470))
        {
          v38 = 0;
          if (a2 <= 2.0 && a2 >= 0.0)
          {
            v63 = CMBaseObjectGetDerivedStorage();
            v124.value = 0;
            LODWORD(v116.value) = 7;
            v64 = *(_QWORD *)(v63 + 928);
            AllocatorForMedia = FigGetAllocatorForMedia();
            FigBytePumpGetFigBaseObject(v64);
            v67 = v66;
            v68 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
            if (v68)
            {
              v69 = v68(v67, CFSTR("FBP_CanContinueWithoutGapBitField"), AllocatorForMedia, &v124);
              if (v124.value)
                CFNumberGetValue((CFNumberRef)v124.value, kCFNumberSInt32Type, &v116);
              a4 = v100;
              if (v69 || (value = v116.value, LODWORD(v116.value) == 7))
              {
                v38 = 0;
              }
              else
              {
                for (i = 0; i != 3; ++i)
                  *(_BYTE *)(v63 + 518 + i) = ((value >> i) & 1) == 0;
                v38 = 1;
              }
            }
            else
            {
              v38 = 0;
              a4 = v100;
            }
            if (v124.value)
              CFRelease((CFTypeRef)v124.value);
          }
        }
        else
        {
          v38 = 0;
        }
        *valuePtr = a2;
        if (v97)
        {
          v39 = *(_OWORD *)&a4->value;
          *(_QWORD *)(DerivedStorage + 128) = a4->epoch;
          *(_OWORD *)(DerivedStorage + 112) = v39;
          v40 = *(_OWORD *)&a5->value;
          *(_QWORD *)(DerivedStorage + 152) = a5->epoch;
          *(_OWORD *)(DerivedStorage + 136) = v40;
          if ((a5->flags & 1) != 0 && (a4->flags & 1) == 0)
          {
            fpfs_GetNextTimeToPlay(v23, 0, (uint64_t)&v124);
            *(CMTime *)(DerivedStorage + 112) = v124;
          }
        }
      }
      *(_BYTE *)(DerivedStorage + 522) = 0;
      cfa = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, valuePtr);
      v41 = *(_QWORD *)(v23 + 96);
      if (v41)
      {
        v42 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
        if (v42)
          v42(v41, CFSTR("AfmfpbProperty_PlayerRate"), cfa);
      }
      if (v29 && *(int *)(DerivedStorage + 764) >= 3)
        fpfsi_SeekToCurrentTime(Next);
      if (fpfs_ShouldTryToGrabHDRPlaybackBaton((uint64_t)a1, (uint64_t)Next)
        && !fpfs_GrabPlayerHDRPlaybackBaton())
      {
        fpfsi_SwitchBetweenHDRAndSDR((uint64_t)Next, 1);
      }
      v98 = v38;
      if (fpfs_ShouldTryToGrab4kPlaybackBaton((uint64_t)a1, (uint64_t)Next)
        && !fpfs_GrabPlayer4kPlaybackBaton(a1))
      {
        fpfsi_SwitchBetween4kAndHD((uint64_t)Next, 1);
      }
      if (fpfs_EnsureScanningBoundaryTimer(Next))
        goto LABEL_90;
      v46 = *valuePtr;
      v47 = CMBaseObjectGetDerivedStorage();
      v95 = *(_QWORD *)v47;
      v48 = CMBaseObjectGetDerivedStorage();
      theArray.value = 0;
      if (!*(_QWORD *)(v47 + 928))
      {
        v71 = 0;
        v75 = v99;
        goto LABEL_155;
      }
      v49 = v48;
      v50 = CMBaseObjectGetDerivedStorage();
      if (*(_QWORD *)(v50 + 40) && *(_BYTE *)(v50 + 48) && *(_BYTE *)(v50 + 49))
      {
        updated = fpfsi_ConfigureAlternateSelectionBossForPlayRate((uint64_t)Next, v46);
        if (updated)
          goto LABEL_151;
        if (*(_BYTE *)(v47 + 2872))
        {
          if (v46 > 2.0
            || v46 < 0.0
            || (v52 = *(_QWORD *)(v47 + 1696)) != 0 && FigAlternateIsIFrameOnly(v52))
          {
            updated = FigAlternateSelectionBossSetProperty(*(const void **)(v47 + 40), (uint64_t)CFSTR("Paused"), (const void *)*MEMORY[0x1E0C9AE40]);
            if (updated)
              goto LABEL_151;
          }
        }
        updated = FigAlternateSelectionBossApplyFilters(*(const void **)(v47 + 40));
        if (updated)
          goto LABEL_151;
        v53 = *(_QWORD *)(v47 + 40);
        v54 = FigGetAllocatorForMedia();
        updated = FigAlternateSelectionBossCopyProperty(v53, CFSTR("FilteredAlternateList"), v54, (const __CFArray **)&theArray);
        if (updated)
          goto LABEL_151;
        if (!theArray.value || CFArrayGetCount((CFArrayRef)theArray.value) <= 0)
        {
          updated = FigSignalErrorAt();
          goto LABEL_151;
        }
        updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)Next, (const __CFArray *)theArray.value, 0);
        if (updated)
        {
LABEL_151:
          v71 = updated;
          goto LABEL_152;
        }
        v55 = *(_QWORD *)(v47 + 1696);
        v56 = *(_QWORD *)(v47 + 96);
        if (v56)
        {
          v57 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v57)
            v57(v56, CFSTR("AfmfpbProperty_CurrentAlternate"), v55);
          v55 = *(_QWORD *)(v47 + 1696);
        }
        if (v55)
          LODWORD(v55) = FigAlternateIsIFrameOnly(v55) != 0;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v47 + 1680), 0);
        IsIFrameOnly = FigAlternateIsIFrameOnly((uint64_t)ValueAtIndex);
        if (*(_QWORD *)(v47 + 1696))
        {
          v60 = FigCFArrayContainsValue() == 0;
          goto LABEL_119;
        }
      }
      else
      {
        LODWORD(v55) = 0;
        IsIFrameOnly = 0;
      }
      v60 = 0;
LABEL_119:
      if (dword_1EE2A2A88)
      {
        v94 = v60;
        LODWORD(type.value) = 0;
        LOBYTE(v108.value) = 0;
        v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a4 = v100;
        v60 = v94;
      }
      if (v60 || IsIFrameOnly || fpfs_audioOnlyValidAlternateList(v47) || v46 <= 2.0 && v46 >= 0.0)
      {
        if (*(_QWORD *)(v47 + 2960))
          fpfsi_EndBestEffortSeekTrickplayMode(v47);
        updated = fpfsi_handleIFrameOnlyRateTransition(Next, v55, IsIFrameOnly, *(const __CFArray **)(v47 + 1680), 0, v15);
        if (!updated)
        {
          if (!*(_BYTE *)(v47 + 470))
          {
            v72 = *(_QWORD *)(v47 + 928);
            if (v72)
            {
              v73 = *(float *)(v49 + 108);
              v74 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
              v75 = v99;
              if (v74)
                v71 = v74(v72, v73);
              else
                v71 = -12782;
LABEL_153:
              if (theArray.value)
                CFRelease((CFTypeRef)theArray.value);
LABEL_155:
              v76 = *(_QWORD *)(v23 + 1696);
              if (v76 && FigAlternateIsIFrameOnly(v76))
              {
                v77 = 1;
                if (v71)
                  goto LABEL_90;
              }
              else
              {
                v77 = *(_QWORD *)(v23 + 2960) != 0;
                if (v71)
                  goto LABEL_90;
              }
              if (v98)
              {
                if ((*(_BYTE *)(v23 + 332) & 1) == 0)
                {
                  v78 = fpfsi_SetCurrentTimeWithSeekID((uint64_t)Next, MEMORY[0x1E0CA2E30], 0, 0);
                  goto LABEL_209;
                }
LABEL_208:
                v78 = 0;
                goto LABEL_209;
              }
              if (a2 == 0.0)
                goto LABEL_174;
              v79 = *(float *)(v23 + 840);
              if (v79 != 0.0 || HIBYTE(v114) == 0)
                v77 = 1;
              if (!v77)
              {
                memset(&v116, 0, sizeof(v116));
                fpfs_GetItemBufferedDuration(Next, &v116, &v124, 0);
                theArray = v116;
                type = *a4;
                v108 = *v75;
                fpfs_CheckIfLikelyToKeepUpAndNotify(a1, Next, &theArray, 1, &type, &v108, (uint64_t)&v124);
                goto LABEL_208;
              }
              if (v79 != 0.0)
              {
LABEL_174:
                v82 = 0;
                v81 = 0;
              }
              else
              {
                if (*(_BYTE *)(v23 + 464))
                {
                  fpfs_notifyExternalStartupTasksOfEvents((uint64_t)a1, 4, 0, 0, MEMORY[0x1E0CA2E18]);
                  v81 = !fpfs_areAllExternalStartupTasksCompleted();
                }
                else
                {
                  v81 = 0;
                }
                fpfs_GetNextTimeToPlay(v23, 0, (uint64_t)&v107);
                v82 = fpfsi_atOrAfterTimeToPausePlayback(v23, &v107);
              }
              v78 = 0;
              if (*(_QWORD *)(v23 + 2960) || v81 || v82)
              {
LABEL_209:
                if (!v78 && HIBYTE(v114) && *(float *)(v23 + 840) != a2 && !*(_BYTE *)(DerivedStorage + 160))
                {
                  v43 = 0.0;
                  goto LABEL_91;
                }
                goto LABEL_213;
              }
              IsDisplayModeSwitchInProgress = FPSupport_IsDisplayModeSwitchInProgress();
              v85 = *valuePtr;
              if (IsDisplayModeSwitchInProgress && v85 != 0.0)
              {
                if (dword_1EE2A2A88)
                {
                  LODWORD(theArray.value) = 0;
                  LOBYTE(type.value) = 0;
                  v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v87 = theArray.value;
                  if (os_log_type_enabled(v86, type.value))
                    v88 = v87;
                  else
                    v88 = v87 & 0xFFFFFFFE;
                  if (v88)
                  {
                    if (a1)
                      v89 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                    else
                      v89 = "";
                    v92 = CMBaseObjectGetDerivedStorage();
                    v93 = *valuePtr;
                    LODWORD(v116.value) = 136316418;
                    *(CMTimeValue *)((char *)&v116.value + 4) = (CMTimeValue)"fpfs_SetRateWithOptionsAndAnchorTime";
                    LOWORD(v116.flags) = 2048;
                    *(_QWORD *)((char *)&v116.flags + 2) = a1;
                    HIWORD(v116.epoch) = 2082;
                    v117 = v89;
                    v118 = 2048;
                    v119 = Next;
                    v120 = 2082;
                    v121 = v92 + 3072;
                    v122 = 2048;
                    v123 = v93;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                goto LABEL_208;
              }
              if (!*(_BYTE *)(v23 + 464) && v85 != 0.0)
              {
                fpfs_CheckPrebufferedLevels(&v124, Next, 1, -1, 0);
                goto LABEL_208;
              }
              v124 = v115;
              v116 = *a4;
              theArray = *v75;
              v78 = fpfs_SetRateWithFadeInternal(a1, &v124, &v116, (__int128 *)&theArray.value, v85);
              if (!v78)
                goto LABEL_209;
              v90 = *(_QWORD *)(v23 + 1696);
              if (v90 && FigAlternateIsIFrameOnly(v90))
              {
                v91 = fpfs_SetRateWithFade(a1, MEMORY[0x1E0CA2E68], 1.0);
                v43 = v15;
                if (v91)
                  goto LABEL_91;
LABEL_213:
                if (*valuePtr != 0.0 && *(float *)(v23 + 840) == 0.0)
                {
                  fpfs_GetNextTimeToPlay(v23, 0, (uint64_t)&v106);
                  fpfsi_PrepareToStartWhenLikelyToKeepUp((uint64_t)Next, &v106);
                }
LABEL_92:
                v44 = (const __CFAllocator *)FigGetAllocatorForMedia();
                Mutable = CFDictionaryCreateMutable(v44, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                FigCFDictionarySetFloat32();
                fpfs_EnqueueNotification(a1, CFSTR("Remote_RateWillChangeTo"), a1, Mutable);
              }
LABEL_90:
              v43 = v15;
LABEL_91:
              *(float *)(DerivedStorage + 108) = v43;
              *(_OWORD *)(DerivedStorage + 112) = v104;
              *(_QWORD *)(DerivedStorage + 128) = v103;
              *(_OWORD *)(DerivedStorage + 136) = v104;
              *(_QWORD *)(DerivedStorage + 152) = v103;
              *(_WORD *)(v23 + 518) = 0;
              *(_BYTE *)(v23 + 520) = 0;
              goto LABEL_92;
            }
          }
          v71 = 0;
LABEL_152:
          v75 = v99;
          goto LABEL_153;
        }
      }
      else
      {
        updated = fpfs_EnterBestEffortTrickplayMode(v95, (uint64_t)Next, *(float *)(v49 + 108));
      }
      goto LABEL_151;
    }
  }
  FigSignalErrorAt();
  goto LABEL_121;
}

_QWORD *fpfsi_applyTimeToPausePlayback(const void *a1, __int128 *a2, int a3, int a4)
{
  uint64_t DerivedStorage;
  const AudioFormatListItem *v9;
  _QWORD *result;
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime *v14;
  __int128 v15;
  uint64_t v16;
  CMTimeEpoch v17;
  uint64_t v18;
  CMTimeFlags v19;
  CMTime *v20;
  uint64_t v21;
  int v22;
  CMTime *p_fireTime;
  __int16 *v24;
  BOOL *v25;
  int v26;
  BOOL v27;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  CMTimeFlags v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  __int16 v43;
  __int16 v44;
  CMTime lhs;
  CMTime type;
  CMTime fireTime;
  CMTime time2;
  CMTime time1;
  __int128 v50;
  CMTimeEpoch v51;
  __int128 v52;
  CMTimeEpoch v53;
  __int128 v54;
  CMTimeEpoch v55;
  __int128 v56;
  CMTimeEpoch v57;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v37 = a4;
  if (a4 && (*((_BYTE *)a2 + 12) & 1) == 0)
  {
    v9 = (const AudioFormatListItem *)CMBaseObjectGetDerivedStorage();
    fpfs_UnmuteNextAtmosAudioTrack(v9, DerivedStorage, 0);
  }
  if (!a3)
  {
    time1 = *(CMTime *)(DerivedStorage + 1440);
    time2 = *(CMTime *)a2;
    result = (_QWORD *)CMTimeCompare(&time1, &time2);
    if (!(_DWORD)result)
      return result;
  }
  v41 = *(CMTime *)(DerivedStorage + 1440);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  time1 = *(CMTime *)a2;
  v12 = CMTimeCopyDescription(AllocatorForMedia, &time1);
  v38 = DerivedStorage;
  if (dword_1EE2A2A88)
  {
    LODWORD(fireTime.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v14 = (CMTime *)(DerivedStorage + 1440);
  if (v12)
    CFRelease(v12);
  v15 = *a2;
  *(_QWORD *)(DerivedStorage + 1456) = *((_QWORD *)a2 + 2);
  *(_OWORD *)&v14->value = v15;
  v16 = CMBaseObjectGetDerivedStorage();
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E18];
  time2.epoch = v17;
  v39 = *(_OWORD *)&time2.value;
  *(_OWORD *)&fireTime.value = *(_OWORD *)&time2.value;
  fireTime.epoch = v17;
  v44 = 0;
  v43 = 0;
  if ((*(_BYTE *)(v16 + 1452) & 1) == 0)
    goto LABEL_35;
  v18 = v16;
  if (!*(_BYTE *)(v16 + 466))
    goto LABEL_35;
  v19 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v20 = (CMTime *)(v16 + 1440);
  v21 = *(_QWORD *)(v16 + 1040);
  if (!v21)
    goto LABEL_23;
  v35 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v36 = v16;
  do
  {
    if (*(_BYTE *)(v21 + 184))
      goto LABEL_20;
    time1 = *v20;
    v50 = v39;
    v51 = v17;
    v52 = v39;
    v53 = v17;
    v54 = v39;
    v55 = v17;
    v56 = v39;
    v57 = v17;
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v21 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetClosestSegmentBoundary, &time1);
    v22 = *(_DWORD *)(v21 + 32);
    if (v22 == 1986618469)
    {
      p_fireTime = &fireTime;
      v24 = &v44;
      v25 = (BOOL *)&v43;
    }
    else
    {
      if (v22 != 1936684398)
        goto LABEL_20;
      p_fireTime = &time2;
      v24 = (__int16 *)((char *)&v44 + 1);
      v25 = (BOOL *)&v43 + 1;
    }
    fpfsi_UpdateTimeIfCloser((uint64_t)&time1, (uint64_t)p_fireTime, v24, v25);
LABEL_20:
    v21 = *(_QWORD *)(v21 + 8);
  }
  while (v21);
  v14 = (CMTime *)(DerivedStorage + 1440);
  v18 = v36;
  v19 = v35;
  if (HIBYTE(v44))
  {
    v26 = 1;
    goto LABEL_24;
  }
LABEL_23:
  v26 = (*(_DWORD *)(v18 + 1088) >> 1) & 1;
  if (v26)
  {
LABEL_24:
    if (HIBYTE(v43))
      goto LABEL_25;
  }
  else
  {
LABEL_25:
    if ((_BYTE)v44)
      v27 = 1;
    else
      v27 = v26 == 0;
    if (!v27 || v43 != 0)
    {
      type = time2;
      lhs = fireTime;
      CMTimeMinimum(&time1, &type, &lhs);
      value = time1.value;
      flags = time1.flags;
      timescale = time1.timescale;
      epoch = time1.epoch;
      CMTimeMake(&type, 5, 10000);
      lhs.value = value;
      lhs.timescale = timescale;
      lhs.flags = flags;
      lhs.epoch = epoch;
      DerivedStorage = v38;
      CMTimeSubtract(&time1, &lhs, &type);
      timescale = time1.timescale;
      value = time1.value;
      lhs = time1;
      v42 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      CMTimeMaximum(&time1, &lhs, &v42);
      value = time1.value;
      v19 = time1.flags;
      timescale = time1.timescale;
      v17 = time1.epoch;
    }
  }
  if ((v19 & 1) != 0)
  {
    v20->value = value;
    v20->timescale = timescale;
    *(_DWORD *)(v18 + 1452) = v19;
    *(_QWORD *)(v18 + 1456) = v17;
    fpfs_EnqueueNotification(*(const void **)v18, CFSTR("SnappedTimeToPausePlayback"), a1, 0);
  }
LABEL_35:
  if ((*(_BYTE *)(DerivedStorage + 1452) & 1) != 0 || (*(_BYTE *)(DerivedStorage + 1476) & 1) != 0)
  {
    time1 = v41;
    time2 = *v14;
    fpfsi_ClampVideoToTime(a1, &time1, (__int128 *)&time2.value);
    if ((*(_BYTE *)(DerivedStorage + 1452) & 1) != 0 && (*(_BYTE *)(DerivedStorage + 1428) & 1) != 0)
    {
      time1 = *(CMTime *)(DerivedStorage + 1416);
      time2 = *v14;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        time1 = *v14;
        fpfsi_applyTimeToPauseBuffering((uint64_t)a1, (__int128 *)&time1.value);
      }
    }
  }
  v31 = CMBaseObjectGetDerivedStorage();
  v32 = v31;
  v33 = *(_QWORD *)(v31 + 2328);
  if ((*(_BYTE *)(v31 + 1452) & 1) != 0)
  {
    if (!v33)
    {
      v34 = fpfs_TimerDispatchSourceCreate(*(dispatch_queue_t *)(v31 + 600), *(void **)(v31 + 16), 0xFFFFFFFFFFFFFFFFLL, (void (__cdecl *)(void *))fpfs_TimeToPausePlaybackTimerProc, 0);
      *(_QWORD *)(v32 + 2328) = v34;
      if (!v34)
      {
        FigSignalErrorAt();
        goto LABEL_48;
      }
      CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v32 + 576), v34);
    }
    memset(&time1, 0, sizeof(time1));
    fpfsi_EstimateTimeToPause((uint64_t)a1, &time1);
    memset(&time2, 0, sizeof(time2));
    fireTime = *(CMTime *)(v32 + 1440);
    type = time1;
    CMTimeSubtract(&time2, &fireTime, &type);
    type = *(CMTime *)(v32 + 1440);
    *(_OWORD *)&lhs.value = kTimeToPausePlaybackAdvanceNotice;
    lhs.epoch = 0;
    CMTimeSubtract(&fireTime, &type, &lhs);
    time2 = fireTime;
    CMTimebaseSetTimerDispatchSourceNextFireTime(*(CMTimebaseRef *)(v32 + 576), *(dispatch_source_t *)(v32 + 2328), &fireTime, 0);
    goto LABEL_48;
  }
  if (v33)
    fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(v31 + 576), (dispatch_object_t *)(v31 + 2328));
LABEL_48:
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v40);
  result = (_QWORD *)fpfsi_atOrAfterTimeToPausePlayback(DerivedStorage, &v40);
  if ((_DWORD)result)
    fpfs_HandleReachingTimeToPausePlayback(a1);
  if (v37)
    return fpfs_CheckPrebufferedLevels(&time1, a1, 1, -1, 0);
  return result;
}

void fpfsi_RTCReportingReportDesiredRateChange(double a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  double Current;
  double v6;
  uint64_t v7;
  double v8;
  void (*v9)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 2536);
  if (v3)
  {
    v4 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
    if (v4)
      v4(v3, CFSTR("playerStats"), CFSTR("ReqRate"), (uint64_t)(a1 * 100.0), 0);
  }
  if (a1 != 0.0 && !*(_BYTE *)(DerivedStorage + 2585))
  {
    if (*(_BYTE *)(DerivedStorage + 2584))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v6 = *(double *)(DerivedStorage + 2984);
      *(_BYTE *)(DerivedStorage + 2585) = 1;
      v7 = *(_QWORD *)(DerivedStorage + 2536);
      if (v7)
      {
        v8 = Current;
        v9 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v9)
          v9(v7, CFSTR("playerStats"), CFSTR("TimeLTKUToDesiredRate"), (uint64_t)((v8 - v6) * 1000.0), 0);
      }
    }
  }
}

void fpfs_notifyExternalStartupTasksOfEvents(uint64_t a1, int a2, uint64_t a3, int a4, __int128 *a5)
{
  uint64_t DerivedStorage;
  const __CFArray *v8;
  CFIndex v9;
  const void *ValueAtIndex;
  __CFDictionary *NotificationPayloadForProperties;
  int v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v14;
  CFIndex FirstIndexOfValue;
  NSObject *v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex Count;
  const __CFArray *Next;
  _BYTE v25[24];
  CFTypeRef cf;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  CFRange v31;

  v30 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(DerivedStorage, 0);
  v20 = CMBaseObjectGetDerivedStorage();
  v8 = *(const __CFArray **)(DerivedStorage + 880);
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    if (Next)
    {
      if (Count >= 1)
      {
        v9 = 0;
        v19 = DerivedStorage;
        v18 = a4;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 880), v9);
          v27 = 0;
          cf = 0;
          if (FigPlayerStartupTaskCopyRequiredParameters((uint64_t)ValueAtIndex, (__CFArray **)&cf))
            break;
          NotificationPayloadForProperties = FPSupport_CreateNotificationPayloadForProperties(a1, (uint64_t)Next, (CFArrayRef)cf);
          v12 = FigCFArrayContainsValue();
          if (a4 && v12)
            FigCFDictionarySetInt32();
          if (FigCFArrayContainsValue() && (*((_BYTE *)a5 + 12) & 1) != 0)
          {
            v28 = *a5;
            v29 = *((_QWORD *)a5 + 2);
            FigCFDictionarySetCMTime();
          }
          if (FigCFArrayContainsValue())
            FigCFDictionarySetFloat32();
          if (FigCFArrayContainsValue())
            FigCFDictionarySetValue();
          if (FigCFArrayContainsValue())
          {
            fpfs_GetNextTimeToPlay(v20, 0, (uint64_t)v25);
            FigCFDictionarySetCMTime();
          }
          if (FigPlayerStartupTaskNotifyOfEvents((uint64_t)ValueAtIndex, a2, (uint64_t)NotificationPayloadForProperties, (BOOL *)&v27))
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v27 = 1;
            a4 = v18;
            DerivedStorage = v19;
          }
          if (NotificationPayloadForProperties)
            CFRelease(NotificationPayloadForProperties);
          if (cf)
            CFRelease(cf);
          v14 = *(const __CFArray **)(DerivedStorage + 888);
          v31.length = CFArrayGetCount(v14);
          v31.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v14, v31, ValueAtIndex);
          if (v27)
          {
            if (FirstIndexOfValue != -1)
            {
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 888), FirstIndexOfValue);
              if (dword_1EE2A2A88)
              {
                v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
          }
          else if (FirstIndexOfValue == -1)
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 888), ValueAtIndex);
            if (dword_1EE2A2A88)
            {
              v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          ++v9;
        }
        while (Count != v9);
      }
    }
  }
}

BOOL fpfs_areAllExternalStartupTasksCompleted()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;
  _BOOL8 result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 888);
  if (!v1)
    return 1;
  Count = CFArrayGetCount(v1);
  if (Count < 1)
    return 1;
  v3 = Count;
  v4 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 888), v4);
    result = FigPlayerStartupTaskDoesAllowStartup((uint64_t)ValueAtIndex);
    if (!result)
      break;
    if (v3 == ++v4)
      return 1;
  }
  return result;
}

uint64_t fpfs_SetRateWithFadeInternal(void *a1, CMTime *a2, CMTime *a3, __int128 *a4, float a5)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *Next;
  float v13;
  float Seconds;
  CMTimeEpoch v15;
  uint64_t result;
  float v17;
  uint64_t v18;
  __int128 v19;
  CMTimeEpoch v20;
  CMTime time;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a5 != 0.0 && !*(_QWORD *)(DerivedStorage + 80))
    fpfs_PullNextItem(a1);
  Next = fpfs_getNext(DerivedStorage, 0);
  if (Next)
    v13 = *(float *)(CMBaseObjectGetDerivedStorage() + 840);
  else
    v13 = 0.0;
  if (v13 == a5)
    return 0;
  if (a5 == 0.0)
  {
    Seconds = 0.0;
    if ((a2->flags & 0x1D) == 1)
    {
      time = *a2;
      Seconds = CMTimeGetSeconds(&time);
    }
    fpfs_applySoftwareVolume(0.0, Seconds, (uint64_t)a1, 1);
    *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E18];
    v15 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    time.epoch = v15;
    v19 = *(_OWORD *)&time.value;
    goto LABEL_14;
  }
  if (v13 != 0.0)
  {
    time = *a3;
    v19 = *a4;
    v15 = *((_QWORD *)a4 + 2);
LABEL_14:
    v20 = v15;
    return fpfs_setRateInternal(a1, 0, &time, &v19, a5);
  }
  v17 = 0.0;
  if ((a2->flags & 0x1D) == 1)
  {
    time = *a2;
    v17 = CMTimeGetSeconds(&time);
  }
  fpfs_applySoftwareVolume(0.0, 0.0, (uint64_t)a1, 1);
  if (Next)
  {
    v18 = CMBaseObjectGetDerivedStorage();
    fpfsi_applySoftwareVolume(*(float *)(v18 + 1824), 0.0, (uint64_t)Next, 3);
  }
  time = *a3;
  v19 = *a4;
  v20 = *((_QWORD *)a4 + 2);
  result = fpfs_setRateInternal(a1, 0, &time, &v19, a5);
  if (!(_DWORD)result)
  {
    fpfs_applySoftwareVolume(*(float *)(DerivedStorage + 104), v17, (uint64_t)a1, 0);
    return 0;
  }
  return result;
}

BOOL fpfs_WantMATAtmosForTrack(uint64_t a1)
{
  const opaqueCMFormatDescription *v2;
  signed int MediaSubType;
  _BOOL8 result;
  int v5;
  int v6;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  BOOL v9;
  int v10;
  size_t sizeOut;

  CMBaseObjectGetDerivedStorage();
  v2 = *(const opaqueCMFormatDescription **)(a1 + 40);
  MediaSubType = CMFormatDescriptionGetMediaSubType(v2);
  result = 0;
  if (MediaSubType <= 1885692722)
  {
    if (MediaSubType > 1700997938)
    {
      if (MediaSubType == 1700997939)
        return *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561) != 0;
      if (MediaSubType != 1700998451)
      {
        v5 = 1885547315;
        goto LABEL_16;
      }
LABEL_18:
      sizeOut = 0;
      FormatList = CMAudioFormatDescriptionGetFormatList(v2, &sizeOut);
      if (!FormatList || sizeOut <= 0x2F)
        return 0;
      mFormatID = FormatList->mASBD.mFormatID;
      if (mFormatID <= 1885547314)
      {
        v9 = mFormatID == 1667574579;
        v10 = 1700997939;
      }
      else
      {
        v9 = mFormatID == 1885547315 || mFormatID == 1902324531;
        v10 = 2053319475;
      }
      if (!v9 && mFormatID != v10)
        return 0;
      return *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561) != 0;
    }
    if (MediaSubType == 1667574579)
      return *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561) != 0;
    v6 = 1667575091;
LABEL_12:
    if (MediaSubType != v6)
      return result;
    goto LABEL_18;
  }
  if (MediaSubType > 1902469938)
  {
    if (MediaSubType == 2053464883)
      goto LABEL_18;
    if (MediaSubType == 2053319475)
      return *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561) != 0;
    v6 = 1902469939;
    goto LABEL_12;
  }
  if (MediaSubType == 1885692723)
    goto LABEL_18;
  v5 = 1902324531;
LABEL_16:
  if (MediaSubType == v5)
    return *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561) != 0;
  return result;
}

uint64_t fpfs_ShouldTryToGrabHDRPlaybackBaton(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  result = CelestialShouldLimitHDRConcurrentPlayback();
  if ((_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(float *)(DerivedStorage + 108) == 0.0)
      return 0;
    result = fpfs_CanRenderVideo(DerivedStorage, 0);
    if (!(_DWORD)result)
      return result;
    v5 = CMBaseObjectGetDerivedStorage();
    v6 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v5 + 80) != a2)
      return 0;
    result = *(_QWORD *)(v6 + 1696);
    if (result)
    {
      if (FigAlternateGetVideoRange(result) >= 2)
        return *(_QWORD *)(v5 + 792) == 0;
      return 0;
    }
  }
  return result;
}

CFStringRef fpfs_GrabPlayerHDRPlaybackBaton()
{
  uint64_t DerivedStorage;
  CFStringRef result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(CFStringRef *)(DerivedStorage + 792);
  if (!result)
  {
    result = FPSupport_AcquireHDRVideoDisplayAssertion(*(const void **)(DerivedStorage + 856));
    *(_QWORD *)(DerivedStorage + 792) = result;
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return *(CFStringRef *)(DerivedStorage + 792);
    }
  }
  return result;
}

uint64_t fpfsi_SwitchBetweenHDRAndSDR(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  const void *SInt32;
  uint64_t (*v7)(uint64_t, const __CFString *, const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v5 = *(_QWORD *)(DerivedStorage + 64);
  if (v5)
  {
    if (a2)
    {
      SInt32 = (const void *)FigCFNumberCreateSInt32();
      v5 = *(_QWORD *)(DerivedStorage + 64);
    }
    else
    {
      SInt32 = 0;
    }
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
    if (v7)
    {
      v5 = v7(v5, CFSTR("AlternateFilterMonitorProperty_PreferredVideoRange"), SInt32);
      if (!SInt32)
        goto LABEL_12;
    }
    else
    {
      v5 = 4294954514;
      if (!SInt32)
      {
LABEL_12:
        if (!(_DWORD)v5)
          FigAlternateSelectionBossApplyFilters(*(const void **)(DerivedStorage + 40));
        return v5;
      }
    }
    CFRelease(SInt32);
    goto LABEL_12;
  }
  return v5;
}

uint64_t fpfs_ShouldTryToGrab4kPlaybackBaton(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 841) || *(_QWORD *)(DerivedStorage + 80) != a2 || !*(_QWORD *)(v4 + 1696))
    return 0;
  result = CelestialShouldLimit4kConcurrentPlayback();
  if (!(_DWORD)result)
    return result;
  v6 = CMBaseObjectGetDerivedStorage();
  if (*(float *)(v6 + 108) == 0.0)
    return 0;
  result = fpfs_CanRenderVideo(v6, 0);
  if ((_DWORD)result)
  {
    result = fpfsi_isPlaying4k();
    if ((_DWORD)result)
      return *(_QWORD *)(DerivedStorage + 800) == 0;
  }
  return result;
}

CFStringRef fpfs_GrabPlayer4kPlaybackBaton(const void *a1)
{
  uint64_t DerivedStorage;
  CFStringRef result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(CFStringRef *)(DerivedStorage + 800);
  if (!result)
  {
    result = FPSupport_Acquire4kVideoDisplayAssertion(a1);
    *(_QWORD *)(DerivedStorage + 800) = result;
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return *(CFStringRef *)(DerivedStorage + 800);
    }
  }
  return result;
}

uint64_t fpfsi_SwitchBetween4kAndHD(uint64_t a1, int a2)
{
  const void **DerivedStorage;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 841) || !DerivedStorage[5])
    return 0;
  if (a2)
  {
    result = fpfsi_addHDResolutionCap();
    if ((_DWORD)result)
      return result;
    goto LABEL_11;
  }
  if (!CelestialShouldLimit4kConcurrentPlayback()
    || (v5 = CMBaseObjectGetDerivedStorage(), *(float *)(v5 + 108) == 0.0)
    || !fpfs_CanRenderVideo(v5, 0)
    || !fpfs_GrabPlayer4kPlaybackBaton(*DerivedStorage)
    || (v6 = CMBaseObjectGetDerivedStorage(),
        result = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(v6 + 40), (uint64_t)CFSTR("ResolutionCapFor4kBaton")),
        !(_DWORD)result))
  {
LABEL_11:
    FigAlternateSelectionBossApplyFilters(DerivedStorage[5]);
    return 0;
  }
  return result;
}

BOOL fpfsi_atOrAfterTimeToPausePlayback(uint64_t a1, CMTime *a2)
{
  CMTime v3;
  CMTime time1;

  if ((*(_BYTE *)(a1 + 1452) & 1) == 0)
    return 0;
  time1 = *a2;
  v3 = *(CMTime *)(a1 + 1440);
  return CMTimeCompare(&time1, &v3) >= 0;
}

double fpfsi_PrepareToStartWhenLikelyToKeepUp(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  double result;
  CMTimeEpoch v6;
  CMTime *v7;
  __int128 v8;
  CMTime rhs;
  CMTime lhs;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LODWORD(result) = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 108);
  if (*(float *)&result != 0.0)
  {
    LODWORD(result) = *(_DWORD *)(DerivedStorage + 840);
    if (*(float *)&result == 0.0)
    {
      if (*(_BYTE *)(DerivedStorage + 465))
      {
        *(_OWORD *)&v13.value = *MEMORY[0x1E0CA2E18];
        v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v13.epoch = v6;
        v8 = *(_OWORD *)&v13.value;
        *(_OWORD *)&v14.value = *(_OWORD *)&v13.value;
        v14.epoch = v6;
        v7 = (CMTime *)MEMORY[0x1E0CA2E68];
        fpfs_CheckCanKeepUp(a1, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E18], *(unsigned int *)(DerivedStorage + 1088), 0, 0, (uint64_t)&v13, 0);
        if ((v13.flags & 1) != 0 && (v14.flags & 1) != 0 && !v14.epoch && (v14.value & 0x8000000000000000) == 0)
        {
          *(_OWORD *)&v12.value = v8;
          v12.epoch = v6;
          if ((~a2->flags & 5) != 0)
          {
            lhs = v13;
            rhs = v14;
            CMTimeAdd(&v11, &lhs, &rhs);
            lhs = *a2;
            CMTimeSubtract(&v12, &v11, &lhs);
          }
          else
          {
            v12 = *v7;
          }
          *(_QWORD *)(DerivedStorage + 424) = v12.epoch;
          result = *(double *)&v12.value;
          *(_OWORD *)(DerivedStorage + 408) = *(_OWORD *)&v12.value;
        }
      }
    }
  }
  return result;
}

uint64_t fpfs_CreateNotificationPayloadForProperties(const void *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *value, uint64_t a10)
{
  const __CFAllocator *AllocatorForMedia;
  __CFArray *Mutable;
  const void *v14;
  const void **v15;
  const void **v17;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  v17 = (const void **)&a10;
  v14 = value;
  if (value)
  {
    do
    {
      CFArrayAppendValue(Mutable, v14);
      v15 = v17++;
      v14 = *v15;
    }
    while (*v15);
  }
  if (!a1 && a2)
    a1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    fpfs_LockMutexWithCaller((uint64_t)a1);
    FPSupport_CreateNotificationPayloadForProperties((uint64_t)a1, a2, Mutable);
    fpfs_UnlockAndPostNotificationsWithCaller(a1);
  }
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t fpfs_ReleasePlayerHDRPlaybackBaton()
{
  uint64_t result;
  const void *v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(result + 792);
  if (v1)
  {
    v2 = result;
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v1 = *(const void **)(v2 + 792);
    }
    result = FPSupport_ReleaseHDRVideoDisplayAssertion(*(const void **)(v2 + 856), v1);
    *(_QWORD *)(v2 + 792) = 0;
  }
  return result;
}

uint64_t fpfs_ReleasePlayer4kPlaybackBaton(const void *a1)
{
  uint64_t result;
  const void *v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)(result + 800);
  if (v3)
  {
    v4 = result;
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v3 = *(const void **)(v4 + 800);
    }
    result = FPSupport_Release4kVideoDisplayAssertion(a1, v3);
    *(_QWORD *)(v4 + 800) = 0;
  }
  return result;
}

uint64_t fpfsi_performCurrentResourceConservationAction(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CMBaseObjectGetDerivedStorage();
  v6 = result;
  v7 = *(_DWORD *)(result + 764);
  if (v7 >= a2)
  {
    if (v7 >= 1 && *(float *)(result + 108) == 0.0)
    {
      v8 = *(_QWORD *)(DerivedStorage + 1696);
      if (!v8 || (result = FigAlternateIsIFrameOnly(v8), !(_DWORD)result))
      {
        if (dword_1EE2A2A88)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (*(int *)(v6 + 764) >= 1 && *(_BYTE *)(DerivedStorage + 464))
          fpfs_FlowControlPump(DerivedStorage, 0xFFu, 1, 0);
        result = fpfs_shouldReleaseRenderChainForPausing((uint64_t)a1);
        if ((_DWORD)result && *(_BYTE *)(DerivedStorage + 464))
          result = fpfsi_ReleaseRenderChainsForPausing(a1);
        if (*(int *)(v6 + 764) >= 3)
          return fpfs_PrepareForSeek(a1, 255, 1);
      }
    }
  }
  else if (a2 >= 3 && v7 <= 2 && *(float *)(result + 108) == 0.0)
  {
    return fpfsi_SeekToCurrentTime(a1);
  }
  return result;
}

void fpfs_ReportVideoPlaybackTimeThroughFigLog(uint64_t a1)
{
  uint64_t RenderingNonGapTrackofType;
  uint64_t DerivedStorage;
  const void *DescriptionString;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v5;
  CMTime time2;
  CMTime time1;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  RenderingNonGapTrackofType = fpfs_FirstRenderingNonGapTrackofType(a1, 1986618469);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (RenderingNonGapTrackofType)
  {
    if (*(_QWORD *)(RenderingNonGapTrackofType + 440))
    {
      if (!*(_BYTE *)(RenderingNonGapTrackofType + 184) && !*(_BYTE *)(RenderingNonGapTrackofType + 456))
      {
        memset(&v5, 0, sizeof(v5));
        fpfs_GetTime(DerivedStorage, (uint64_t)&v5);
        time1 = *(CMTime *)(RenderingNonGapTrackofType + 216);
        time2 = v5;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          DescriptionString = (const void *)FigAlternateCreateDescriptionString(*(_QWORD *)(RenderingNonGapTrackofType
                                                                                          + 440));
          if (dword_1EE2A2A88)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (DescriptionString)
            CFRelease(DescriptionString);
        }
      }
    }
  }
}

void fpfs_ReportAudioPlaybackThroughFigLog(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t RenderingNonGapTrackofType;
  uint64_t v4;
  const opaqueCMFormatDescription *v5;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  int ImmersiveAudioCapability;
  int v8;
  int v9;
  CFIndex i;
  CFIndex Count;
  int v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  CFArrayRef theArray;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  theArray = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  RenderingNonGapTrackofType = fpfs_FirstRenderingNonGapTrackofType(a1, 1936684398);
  if (RenderingNonGapTrackofType)
  {
    v4 = RenderingNonGapTrackofType;
    v5 = *(const opaqueCMFormatDescription **)(RenderingNonGapTrackofType + 40);
    v14 = 0;
    fpfsi_GetSpatializationConfiguration(a1);
    CMAudioFormatDescriptionGetStreamBasicDescription(v5);
    CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
    ImmersiveAudioCapability = FigAlternateGetImmersiveAudioCapability(*(_QWORD *)(v4 + 440), (uint64_t)CurrentAudioPersistentIDFromMediaOption);
    FPSupport_GetAudioFormatDescriptionSpatializationEligibility((uint64_t)v5, &v14);
    if (*(_BYTE *)(DerivedStorage + 771))
      v8 = 1836019574;
    else
      v8 = 1936684398;
    fpfsi_CreateAudioSpatialSourcesArray(a1, v8, &theArray, 0, 0);
    v9 = 0;
    for (i = 0; ; ++i)
    {
      Count = (CFIndex)theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (i >= Count)
        break;
      v16 = 1064530531;
      FigCFArrayGetInt32AtIndex();
      if (v16 == 1836020596)
        v12 = 1;
      else
        v12 = v9;
      if (v16 != 1835824233)
        v9 = v12;
    }
    if (ImmersiveAudioCapability != 1)
      FigAlternateGetStringFromImmersiveAudioCapability(ImmersiveAudioCapability);
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (theArray)
      CFRelease(theArray);
  }
}

void fpfs_PostNotificationWhenUnlocked(const void *a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  CFTypeRef v13;
  CFTypeRef v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CMBaseObjectGetDerivedStorage();
  if (FigReentrantMutexTryLock())
  {
    v10 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)(v9 + 8) = v10 + 1;
    if (!v10)
      fpfs_getPlaybackState((uint64_t)a1, (int *)(v9 + 164), (_BYTE *)(v9 + 168));
    fpfs_EnqueueNotification(a1, a2, a3, a4);
  }
  v11 = malloc_type_malloc(0x28uLL, 0xE0040CDB25F8DuLL);
  if (v11)
  {
    v12 = v11;
    *v11 = a2;
    if (a3)
      v13 = CFRetain(a3);
    else
      v13 = 0;
    v12[1] = v13;
    if (a4)
      v14 = CFRetain(a4);
    else
      v14 = 0;
    v12[2] = v14;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 24), v12, (dispatch_function_t)fpfs_PostNotificationFromDispatch);
  }
}

const AudioFormatListItem *fpfs_UnmuteNextAtmosAudioTrack(const AudioFormatListItem *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  const AudioFormatListItem *v5;
  const opaqueCMFormatDescription *v6;
  int v8;
  int mFormatID;
  BOOL v10;
  int v11;
  size_t sizeOut;

  v3 = (uint64_t *)(a3 + 8);
  if (!a3)
    v3 = (uint64_t *)(a2 + 1040);
  v4 = *v3;
  if (*v3)
  {
    v5 = result;
    do
    {
      if (*(_DWORD *)(v4 + 32) != 1936684398)
        goto LABEL_36;
      v6 = *(const opaqueCMFormatDescription **)(v4 + 40);
      result = (const AudioFormatListItem *)CMFormatDescriptionGetMediaSubType(v6);
      if ((int)result <= 1885692722)
      {
        if ((int)result <= 1700997938)
        {
          if ((_DWORD)result != 1667575091)
          {
            v8 = 1667574579;
            goto LABEL_35;
          }
        }
        else if ((_DWORD)result != 1700998451)
        {
          if ((_DWORD)result == 1700997939)
            goto LABEL_38;
          v8 = 1885547315;
LABEL_35:
          if ((_DWORD)result == v8)
            goto LABEL_38;
          goto LABEL_36;
        }
      }
      else if ((int)result <= 1902469938)
      {
        if ((_DWORD)result != 1885692723)
        {
          v8 = 1902324531;
          goto LABEL_35;
        }
      }
      else if ((_DWORD)result != 1902469939 && (_DWORD)result != 2053464883)
      {
        v8 = 2053319475;
        goto LABEL_35;
      }
      sizeOut = 0;
      result = CMAudioFormatDescriptionGetFormatList(v6, &sizeOut);
      if (result && sizeOut > 0x2F)
      {
        mFormatID = result->mASBD.mFormatID;
        if (mFormatID <= 1885547314)
        {
          v10 = mFormatID == 1667574579;
          v11 = 1700997939;
        }
        else
        {
          v10 = mFormatID == 1885547315 || mFormatID == 1902324531;
          v11 = 2053319475;
        }
        if (v10 || mFormatID == v11)
        {
LABEL_38:
          *(_BYTE *)(v4 + 190) = 0;
          return (const AudioFormatListItem *)fpfs_applySoftwareVolumeToTrack(v4, 1, *(float *)&v5[2].mASBD.mFormatID, 0.0);
        }
      }
LABEL_36:
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  return result;
}

void fpfsi_ClampVideoToTime(const void *a1, CMTime *a2, __int128 *a3)
{
  const __CFAllocator *AllocatorForMedia;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  const void *v11;
  const char *v12;
  Float64 Seconds;
  Float64 v14;
  __int128 v15;
  uint64_t v16;
  CMTimeFlags v17;
  CMTimeEpoch v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t FigBaseObject;
  uint64_t (*v24)(uint64_t, const __CFString *, uint64_t, CMTime *);
  CMTimeEpoch epoch;
  CMTimeFlags flags;
  int v27;
  const void *v28;
  uint64_t v29;
  opaqueCMSampleBuffer *Head;
  uint64_t v31;
  CMTimeValue v32;
  CMTimeFlags v33;
  opaqueCMBufferQueue *v34;
  _BOOL4 v35;
  int v36;
  const __CFAllocator *v37;
  const CMBufferCallbacks *v38;
  OSStatus v39;
  _BOOL4 v40;
  const __CFAllocator *v41;
  const CMBufferCallbacks *v42;
  opaqueCMSampleBuffer *v43;
  opaqueCMSampleBuffer *v44;
  uint64_t v45;
  int v46;
  opaqueCMSampleBuffer *v47;
  opaqueCMSampleBuffer *v48;
  uint64_t v49;
  const void *v50;
  void (*v51)(const void *, uint64_t);
  CMTimeEpoch v52;
  CMTimeFlags v53;
  CMTime *v55;
  uint64_t DerivedStorage;
  CMTimeEpoch v58;
  CMTime v59;
  CMTime v60;
  CMTime v61;
  CMBufferQueueRef queueOut;
  CMTime v63;
  CMTime v64;
  CMTime v65;
  CMTime type;
  CMTime lhs;
  CMBufferQueueRef v68;
  CMBufferQueueRef queue;
  CMTimeValue v70;
  CMTimeScale v71;
  CMTimeValue v72;
  CMTimeScale v73;
  CMTimeValue v74;
  CMTimeScale timescale;
  CMTimeValue v76;
  CMTimeScale v77;
  CMTime time2;
  const char *v79;
  __int16 v80;
  const void *v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  Float64 v85;
  __int16 v86;
  Float64 v87;
  CMTime time1;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  queueOut = 0;
  time1 = *(CMTime *)a3;
  time2 = *a2;
  v55 = a2;
  if (CMTimeCompare(&time1, &time2))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    if (!CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, &queueOut))
    {
      if (dword_1EE2A2A88)
      {
        LODWORD(lhs.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = lhs.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
          v8 = value;
        else
          v8 = value & 0xFFFFFFFE;
        if (v8)
        {
          v9 = *(_QWORD *)DerivedStorage;
          if (*(_QWORD *)DerivedStorage)
            v10 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v10 = "";
          if (a1)
          {
            v11 = a1;
            v12 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          }
          else
          {
            v12 = "";
            v11 = 0;
          }
          time1 = *(CMTime *)(DerivedStorage + 1464);
          Seconds = CMTimeGetSeconds(&time1);
          time1 = *(CMTime *)a3;
          v14 = CMTimeGetSeconds(&time1);
          LODWORD(time2.value) = 136316674;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_ClampVideoToTime";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v9;
          HIWORD(time2.epoch) = 2082;
          v79 = v10;
          v80 = 2048;
          v81 = v11;
          v82 = 2082;
          v83 = v12;
          v84 = 2048;
          v85 = Seconds;
          v86 = 2048;
          v87 = v14;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v15 = *a3;
      *(_QWORD *)(DerivedStorage + 1480) = *((_QWORD *)a3 + 2);
      *(_OWORD *)(DerivedStorage + 1464) = v15;
      v16 = *(_QWORD *)(DerivedStorage + 1040);
      if (v16)
      {
        v17 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
        v18 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v53 = v17;
        v52 = v18;
        do
        {
          if (*(_DWORD *)(v16 + 32) != 1986618469)
            goto LABEL_21;
          if (*(_BYTE *)(v16 + 184))
            goto LABEL_21;
          v19 = *(_QWORD *)(v16 + 96);
          if (!v19)
            goto LABEL_21;
          v20 = v16;
          while (1)
          {
            v20 = *(_QWORD *)(v20 + 8);
            if (!v20)
              break;
            if (*(_QWORD *)(v20 + 96) == v19)
              goto LABEL_21;
          }
          v76 = *MEMORY[0x1E0CA2E18];
          v77 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
          v74 = v76;
          timescale = v77;
          time2.value = 0;
          v21 = *(_QWORD *)(v19 + 32);
          v22 = FigGetAllocatorForMedia();
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v21);
          v24 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
          epoch = v18;
          flags = v17;
          if (v24)
          {
            v27 = v24(FigBaseObject, CFSTR("EndPresentationTimeForDecodedSamples"), v22, &time2);
            v28 = (const void *)time2.value;
            if (!v27)
            {
              CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)time2.value);
              v74 = time1.value;
              flags = time1.flags;
              timescale = time1.timescale;
              epoch = time1.epoch;
              v28 = (const void *)time2.value;
              if (!time2.value)
                goto LABEL_32;
LABEL_31:
              CFRelease(v28);
              goto LABEL_32;
            }
            epoch = v18;
            flags = v17;
            if (time2.value)
              goto LABEL_31;
          }
LABEL_32:
          v29 = *(_QWORD *)(v16 + 96);
          *(_BYTE *)(v29 + 26) = 0;
          MEMORY[0x19402B01C](*(_QWORD *)(v29 + 40), fpfs_StealBuffer, queueOut);
          Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(queueOut);
          if (Head)
          {
            CMSampleBufferGetOutputDecodeTimeStamp(&time1, Head);
            v76 = time1.value;
            v17 = time1.flags;
            v77 = time1.timescale;
            v18 = time1.epoch;
          }
          if (queueOut)
          {
            CFRelease(queueOut);
            queueOut = 0;
          }
          if ((flags & 1) != 0)
          {
            time1.value = v74;
            time1.timescale = timescale;
            time1.flags = flags;
            time1.epoch = epoch;
            time2 = *(CMTime *)a3;
            if (CMTimeCompare(&time1, &time2) >= 1)
            {
              fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v61);
              time1 = *(CMTime *)(DerivedStorage + 1464);
              if ((CMTimeCompare(&v61, &time1) & 0x80000000) == 0)
                fpfs_FlushPrimaryAndAuxRenderChains(*(_QWORD *)(v16 + 96), 1);
            }
          }
          v31 = *(_QWORD *)(DerivedStorage + 1040);
          if (v31)
          {
            while (1)
            {
              if (*(_QWORD *)(v31 + 96) != *(_QWORD *)(v16 + 96))
                goto LABEL_90;
              fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v60);
              v72 = v76;
              v73 = v77;
              *(_OWORD *)&v59.value = *a3;
              v59.epoch = *((_QWORD *)a3 + 2);
              v32 = v55->value;
              queue = 0;
              v70 = v32;
              v33 = v55->flags;
              v71 = v55->timescale;
              v58 = v55->epoch;
              v34 = *(opaqueCMBufferQueue **)(v31 + 80);
              v68 = 0;
              memset(&time1, 0, sizeof(time1));
              CMTimeMake(&time2, 1, 1);
              lhs = v60;
              CMTimeAdd(&time1, &lhs, &time2);
              v35 = 0;
              if ((v33 & 1) != 0)
              {
                lhs.value = v70;
                lhs.timescale = v71;
                lhs.flags = v33;
                lhs.epoch = v58;
                type = time1;
                v35 = CMTimeCompare(&lhs, &type) < 1;
              }
              v36 = (v17 & 1) == 0 || v35;
              if (v36 != 1)
                goto LABEL_50;
              v37 = (const __CFAllocator *)FigGetAllocatorForMedia();
              v38 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
              v39 = CMBufferQueueCreate(v37, 0, v38, &v68);
              if (!v39)
                break;
LABEL_92:
              v46 = v39;
LABEL_84:
              if (queue)
                CFRelease(queue);
              if (v68)
                CFRelease(v68);
              if (v46)
                goto LABEL_102;
              v76 = *(_QWORD *)(v31 + 216);
              v17 = *(_DWORD *)(v31 + 228);
              v77 = *(_DWORD *)(v31 + 224);
              v18 = *(_QWORD *)(v31 + 232);
LABEL_90:
              v31 = *(_QWORD *)(v31 + 8);
              if (!v31)
                goto LABEL_93;
            }
            if ((v33 & 1) != 0)
            {
              lhs = v60;
              type.value = v70;
              type.timescale = v71;
              type.flags = v33;
              type.epoch = v58;
              v40 = CMTimeCompare(&lhs, &type) >= 0;
            }
            else
            {
LABEL_50:
              v40 = 0;
            }
            v41 = (const __CFAllocator *)FigGetAllocatorForMedia();
            v42 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            v39 = CMBufferQueueCreate(v41, 0, v42, &queue);
            if (!v39)
            {
              MEMORY[0x19402B01C](v34, fpfs_StealBuffer, queue);
              while (1)
              {
                v43 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(queue);
                if (!v43)
                {
                  v46 = 0;
                  goto LABEL_84;
                }
                v44 = v43;
                memset(&lhs, 0, sizeof(lhs));
                fpfs_GetEndOutputPresentationTimeStamp(v43, &lhs);
                if (v36)
                {
                  type = lhs;
                  v65 = v60;
                  if (CMTimeCompare(&type, &v65) <= 0)
                    goto LABEL_60;
                }
                else
                {
                  CMSampleBufferGetOutputDecodeTimeStamp(&v64, v44);
                  type.value = v72;
                  type.timescale = v73;
                  type.flags = v17;
                  type.epoch = v18;
                  if (CMTimeCompare(&v64, &type) < 0)
                    goto LABEL_60;
                }
                v45 = *(_QWORD *)v31;
                type = v59;
                if (fpfsi_ProcessVideoSampleForClamping(v45, v44, (uint64_t)&type))
                {
LABEL_60:
                  v46 = 0;
                  goto LABEL_76;
                }
                if (v68 && !fpfs_IsMarkerOnly(v44))
                {
                  if (v40)
                  {
                    fpfs_FlushPrimaryAndAuxRenderChains(*(_QWORD *)(v31 + 96), 1);
                    if (*(_BYTE *)(v31 + 104))
                      fpfs_PrerollRenderPipeline(*(_QWORD *)(*(_QWORD *)(v31 + 96) + 32), *(_DWORD *)(v31 + 16));
                  }
                  if (!fpfs_IsVideoSync(v44))
                  {
                    v47 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(v68);
                    if (v47)
                    {
                      v48 = v47;
                      do
                      {
                        fpfs_DoNotDisplay(v48);
                        fpfs_RenderBuffer(v31, v48);
                        CFRelease(v48);
                        v48 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(v68);
                      }
                      while (v48);
                    }
                  }
                  if (v68)
                  {
                    CFRelease(v68);
                    v68 = 0;
                  }
                }
                if (v40)
                {
                  CMSampleBufferGetOutputPresentationTimeStamp(&v63, v44);
                  type.value = v70;
                  type.timescale = v71;
                  type.flags = v33;
                  type.epoch = v58;
                  if (CMTimeCompare(&v63, &type) <= 0)
                    fpfs_DoNotDisplay(v44);
                }
                v46 = fpfs_RenderBuffer(v31, v44);
LABEL_76:
                CMBufferQueueEnqueue(v34, v44);
                if (v68)
                {
                  if (fpfs_IsVideoSync(v44))
                  {
                    CMBufferQueueReset(v68);
                  }
                  else if (CMBufferQueueIsEmpty(v68))
                  {
                    goto LABEL_81;
                  }
                  CMBufferQueueEnqueue(v68, v44);
                }
LABEL_81:
                CFRelease(v44);
                if (v46)
                  goto LABEL_84;
              }
            }
            goto LABEL_92;
          }
LABEL_93:
          v17 = v53;
          v18 = v52;
LABEL_21:
          v16 = *(_QWORD *)(v16 + 8);
        }
        while (v16);
      }
      if ((*((_BYTE *)a3 + 12) & 1) != 0)
      {
        fpfs_SignalImageQueueGaugeEnqueueingCompleteAfterClampTime();
      }
      else
      {
        v49 = fpfsi_copyImageQueueGauge(a1);
        if (v49)
        {
          v50 = (const void *)v49;
          v51 = *(void (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (v51)
            v51(v50, 1);
          CFRelease(v50);
        }
      }
    }
  }
LABEL_102:
  if (queueOut)
    CFRelease(queueOut);
}

_QWORD *fpfsi_applyTimeToPauseBuffering(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _QWORD *result;
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime *v10;
  __int128 v11;
  __int128 v12;
  os_log_type_t type;
  int v14;
  CMTime time2;
  CMTime time1;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage + 1416;
  time1 = *(CMTime *)(DerivedStorage + 1416);
  time2 = *(CMTime *)a2;
  result = (_QWORD *)CMTimeCompare(&time1, &time2);
  if ((_DWORD)result)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    time1 = *(CMTime *)a2;
    v8 = CMTimeCopyDescription(AllocatorForMedia, &time1);
    if (dword_1EE2A2A88)
    {
      v14 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v8)
      CFRelease(v8);
    if ((*((_BYTE *)a2 + 12) & 1) != 0 && (*(_BYTE *)(DerivedStorage + 1452) & 1) != 0)
    {
      v10 = (CMTime *)(DerivedStorage + 1440);
      time1 = *v10;
      time2 = *(CMTime *)a2;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        v11 = *(_OWORD *)&v10->value;
        *((_QWORD *)a2 + 2) = v10->epoch;
        *a2 = v11;
      }
    }
    v12 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v12;
    return fpfs_CheckPrebufferedLevels(&time1, a1, 1, -1, 0);
  }
  return result;
}

void fpfs_HandleReachingTimeToPausePlayback(const void *a1)
{
  CMTime *DerivedStorage;
  CMTimeEpoch v3;
  uint64_t value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  __int128 v8;
  CMTime v9;
  CMTime v10;
  CMTime time2;
  CMTime time1;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  memset(&v10, 0, sizeof(v10));
  fpfs_GetNextTimeToPlay((uint64_t)DerivedStorage, 0, (uint64_t)&v10);
  v8 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v9.value = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v9.epoch = v3;
  if (DerivedStorage[23].epoch)
  {
    fpfsi_clearCoordinatedPlaybackSynchronizationTimebase();
    fpfs_PlayQueueCallForEachItem(DerivedStorage->value, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_clearCoordinatedPlaybackSynchronizationTimebaseForPlayQueueItemsApply, (uint64_t)a1);
  }
  time1 = v10;
  time2 = DerivedStorage[60];
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    *(_OWORD *)&v9.value = *(_OWORD *)&DerivedStorage[60].value;
    v9.epoch = DerivedStorage[60].epoch;
  }
  value = DerivedStorage->value;
  time1 = v9;
  *(_OWORD *)&time2.value = v8;
  time2.epoch = v3;
  fpfs_setRateInternal(value, a1, &time1, &time2, 0.0);
  fpfs_GetNextTimeToPlay((uint64_t)DerivedStorage, 0, (uint64_t)&v10);
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!DerivedStorage[137].epoch)
    DerivedStorage[137].epoch = FigGetUpTimeNanoseconds();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  time1 = v10;
  FigCFDictionarySetCMTime();
  fpfs_EnqueueNotification((const void *)DerivedStorage->value, CFSTR("ReachedTimeToPausePlayback"), a1, Mutable);
}

void sub_1929DDBF8()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

uint64_t fpfs_GetClosestSegmentBoundary(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  CFTypeRef v4;
  _OWORD *v5;
  int v6;
  _OWORD *v8;
  CMTime v10;
  CMTime lhs;
  CMTime time;
  CMTime time2;
  CMTime time1;
  CMTime v15;

  memset(&v15, 0, sizeof(v15));
  fpfs_GetEndOutputPresentationTimeStamp(a1, &v15);
  v4 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2700], 0);
  v5 = (_OWORD *)(a2 + 72);
  v6 = *(_DWORD *)(a2 + 84);
  if ((v15.flags & 1) != 0)
  {
    if ((v6 & 1) == 0
      || (*(_OWORD *)&time1.value = *v5,
          time1.epoch = *(_QWORD *)(a2 + 88),
          time2 = v15,
          CMTimeCompare(&time1, &time2) < 0))
    {
      *v5 = *(_OWORD *)&v15.value;
      *(_QWORD *)(a2 + 88) = v15.epoch;
    }
  }
  if ((*(_BYTE *)(a2 + 84) & 1) != 0 && (v4 || (v6 & 1) == 0))
  {
    memset(&time1, 0, sizeof(time1));
    if ((v6 & 1) != 0)
    {
      *(_OWORD *)&time1.value = *v5;
      time1.epoch = *(_QWORD *)(a2 + 88);
    }
    else
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&time1, a1);
    }
    memset(&time2, 0, sizeof(time2));
    lhs = time1;
    v10 = *(CMTime *)a2;
    CMTimeSubtract(&time, &lhs, &v10);
    CMTimeAbsoluteValue(&time2, &time);
    *(CMTime *)(a2 + 48) = time1;
    v8 = (_OWORD *)(a2 + 96);
    if ((*(_BYTE *)(a2 + 108) & 1) == 0
      || (lhs = time2, *(_OWORD *)&v10.value = *v8, v10.epoch = *(_QWORD *)(a2 + 112), CMTimeCompare(&lhs, &v10) < 0))
    {
      *(CMTime *)(a2 + 24) = time1;
      *v8 = *(_OWORD *)&time2.value;
      *(_QWORD *)(a2 + 112) = time2.epoch;
    }
    else
    {
      lhs = time2;
      *(_OWORD *)&v10.value = *v8;
      v10.epoch = *(_QWORD *)(a2 + 112);
      if (CMTimeCompare(&lhs, &v10) > 0)
        return 4294954433;
    }
  }
  return 0;
}

__n128 fpfsi_UpdateTimeIfCloser(uint64_t a1, uint64_t a2, _BYTE *a3, BOOL *a4)
{
  int v7;
  BOOL v8;
  __n128 result;
  CMTime v10;
  CMTime time;
  CMTime time2;
  CMTime time1;

  v7 = *(_DWORD *)(a1 + 60);
  *a3 = v7 & 1;
  if ((v7 & 1) != 0)
  {
    time1 = *(CMTime *)(a1 + 48);
    time2 = *(CMTime *)a1;
    v8 = CMTimeCompare(&time1, &time2) >= 0;
  }
  else
  {
    v8 = 0;
  }
  *a4 = v8;
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    memset(&time1, 0, sizeof(time1));
    time2 = *(CMTime *)a2;
    v10 = *(CMTime *)a1;
    CMTimeSubtract(&time, &time2, &v10);
    CMTimeAbsoluteValue(&time1, &time);
    if ((*(_BYTE *)(a2 + 12) & 1) == 0 || (time2 = *(CMTime *)(a1 + 96), v10 = time1, CMTimeCompare(&time2, &v10) < 0))
    {
      result = *(__n128 *)(a1 + 24);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 40);
      *(__n128 *)a2 = result;
    }
  }
  return result;
}

CMTime *fpfs_GetEndOutputPresentationTimeStamp@<X0>(opaqueCMSampleBuffer *a1@<X0>, CMTime *a2@<X8>)
{
  CMTime *result;
  CMTime v5;
  CMTime lhs;
  CMTime v7;
  CMTime v8;

  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetOutputPresentationTimeStamp(&v8, a1);
  memset(&v7, 0, sizeof(v7));
  result = CMSampleBufferGetOutputDuration(&v7, a1);
  if ((v7.flags & 1) != 0)
  {
    lhs = v8;
    v5 = v7;
    return CMTimeAdd(a2, &lhs, &v5);
  }
  else
  {
    *a2 = v8;
  }
  return result;
}

void fpfs_SignalImageQueueGaugeEnqueueingCompleteAfterClampTime()
{
  uint64_t DerivedStorage;
  CMTime *v1;
  uint64_t v2;
  uint64_t v3;
  CMTime v4;
  CMTime time2;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(DerivedStorage + 1476) & 1) != 0)
  {
    v1 = (CMTime *)(DerivedStorage + 1464);
    v2 = *(_QWORD *)(DerivedStorage + 1040);
    if (v2)
    {
      while (1)
      {
        if (*(_DWORD *)(v2 + 32) == 1986618469)
        {
          if (*(_QWORD *)(v2 + 96))
          {
            time1 = *(CMTime *)(v2 + 192);
            time2 = *v1;
            if (CMTimeCompare(&time1, &time2) <= 0)
            {
              time1 = *(CMTime *)(v2 + 216);
              time2 = *v1;
              if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
                break;
            }
          }
        }
        v2 = *(_QWORD *)(v2 + 8);
        if (!v2)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      *(_OWORD *)&v4.value = *(_OWORD *)&v1->value;
      v4.epoch = v1->epoch;
      v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
      if (!v2)
        return;
      while (1)
      {
        if (*(_DWORD *)(v2 + 32) == 1986618469)
        {
          if (*(_QWORD *)(v2 + 96))
          {
            time1 = *(CMTime *)(v2 + 216);
            time2 = v4;
            if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
              break;
          }
        }
        v2 = *(_QWORD *)(v2 + 8);
        if (!v2)
          return;
      }
    }
    v3 = *(_QWORD *)(v2 + 96);
    if (!*(_BYTE *)(v3 + 26))
    {
      *(_BYTE *)(v3 + 26) = 1;
      fpfs_SignalImageQueueGaugeEnqueueingCompleteAfterDecoding(v2);
    }
  }
}

uint64_t fpfsi_copyImageQueueGauge(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  const void *v8;
  uint64_t TrackWithFormatDescriptionOfType;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  uint64_t FigBaseObject;
  void (*v18)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  const void *v19;
  uint64_t v20;

  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = fpfsi_copyCurrentVideoDestination((uint64_t)a1);
  if (v4
    || (TrackWithFormatDescriptionOfType = fpfs_FirstTrackWithFormatDescriptionOfType((uint64_t)a1, 1986618469)) != 0
    && (v11 = TrackWithFormatDescriptionOfType,
        fpfsi_addCAImageQueuesAndSlots(a1, TrackWithFormatDescriptionOfType, *(_QWORD *)(v3 + 400) > 0),
        fpfsi_createOutputDestinationForVideo(v11),
        (v12 = *(const void **)(v11 + 88)) != 0)
    && (v4 = CFRetain(v12)) != 0)
  {
    AllocatorForMedia = FigGetAllocatorForMedia();
    CMBaseObject = FigAggregateVideoDestinationGetCMBaseObject(v4);
    v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v7)
      v7(CMBaseObject, CFSTR("ImageQueueGauge"), AllocatorForMedia, &v20);
    v8 = v4;
    goto LABEL_5;
  }
  v13 = *(_QWORD *)(DerivedStorage + 720);
  if (v13)
  {
    v19 = 0;
    FigImageQueueTableCopyFigImageQueueArray(v13, (uint64_t *)&v19);
    ValueAtIndex = FigCFArrayGetValueAtIndex();
    if (ValueAtIndex)
    {
      v15 = ValueAtIndex;
      v16 = FigGetAllocatorForMedia();
      FigBaseObject = FigImageQueueGetFigBaseObject(v15);
      v18 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v18)
        v18(FigBaseObject, CFSTR("ImageQueueGauge"), v16, &v20);
    }
    v8 = v19;
    if (v19)
LABEL_5:
      CFRelease(v8);
  }
  return v20;
}

BOOL fpfsi_ProcessVideoSampleForClamping(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3)
{
  _BOOL8 v5;
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;
  const void *v8;
  int32_t v10;
  int v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CMTime v14;
  CMTime time1;
  CMTime v16;
  CMTime v17;

  CMBaseObjectGetDerivedStorage();
  memset(&v17, 0, sizeof(v17));
  CMSampleBufferGetOutputDecodeTimeStamp(&v17, a2);
  memset(&v16, 0, sizeof(v16));
  CMSampleBufferGetOutputPresentationTimeStamp(&v16, a2);
  if ((*(_BYTE *)(a3 + 12) & 1) == 0 || (v17.flags & 1) == 0)
  {
    v5 = 0;
LABEL_4:
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
    if (SampleAttachmentsArray)
      ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    else
      ValueAtIndex = 0;
    v8 = (const void *)*MEMORY[0x1E0CA2650];
    if (FigCFDictionaryGetValue())
    {
      fpfs_RemoveDoNotDisplay(a2);
      CFDictionaryRemoveValue(ValueAtIndex, v8);
    }
    return v5;
  }
  time1 = v16;
  v14 = *(CMTime *)a3;
  v10 = CMTimeCompare(&time1, &v14);
  time1 = v17;
  v14 = *(CMTime *)a3;
  v11 = v10 | CMTimeCompare(&time1, &v14);
  if ((v11 & 0x80000000) == 0 || v10 < 0)
  {
    v5 = v11 >= 0;
    if ((v10 & 0x80000000) == 0)
      return v5;
    goto LABEL_4;
  }
  v12 = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
  if (v12)
    CFArrayGetValueAtIndex(v12, 0);
  if (FigCFDictionaryGetValue() != *MEMORY[0x1E0C9AE50])
  {
    v13 = CMSampleBufferGetSampleAttachmentsArray(a2, 1u);
    if (v13)
      CFArrayGetValueAtIndex(v13, 0);
    FigCFDictionarySetValue();
    fpfs_DoNotDisplay(a2);
  }
  return 0;
}

uint64_t fpfs_PrerollRenderPipeline(uint64_t a1, int a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  uint64_t (*v5)(uint64_t, CFNumberRef);
  uint64_t v6;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v3)
    return 4294954434;
  v4 = v3;
  v5 = *(uint64_t (**)(uint64_t, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v5)
    v6 = v5(a1, v4);
  else
    v6 = 4294954514;
  CFRelease(v4);
  return v6;
}

CMItemCount fpfs_IsVideoSync(opaqueCMSampleBuffer *a1)
{
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v4;
  const void *v5;
  CMItemCount result;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
    {
      v4 = ValueAtIndex;
      v5 = (const void *)*MEMORY[0x1E0CA2620];
      if (CFDictionaryContainsKey(ValueAtIndex, (const void *)*MEMORY[0x1E0CA2620]))
        return CFDictionaryGetValue(v4, v5) == (const void *)*MEMORY[0x1E0C9AE40];
    }
  }
  else
  {
    result = CMSampleBufferGetNumSamples(a1);
    if (!result)
      return result;
  }
  return 1;
}

void fpfs_DoNotDisplay(opaqueCMSampleBuffer *a1)
{
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 1u);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
      CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D8], (const void *)*MEMORY[0x1E0C9AE50]);
  }
}

uint64_t fpfs_RenderBuffer(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  Float64 Seconds;
  float v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFTypeRef *v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  Float64 v29;
  CFNumberRef v30;
  uint64_t i;
  const __CFString *v33;
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v35;
  CFDictionaryRef v36;
  uint64_t v37;
  uint64_t v38;
  CMTime v39;
  CMTime v40;
  CMTime time;
  CMTime v42;
  CMTime v43;
  CMTime v44;
  CMTime v45;
  CMTime rhs;
  CMTime type;
  CMTime v48;
  CMTime time2;
  const char *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  Float64 v56;
  __int16 v57;
  Float64 v58;
  CMTime time1;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(a1 + 96))
    return 0;
  v6 = v5;
  memset(&v45, 0, sizeof(v45));
  fpfsi_MapEndTimeFromTargetToSource(DerivedStorage, (uint64_t)&v45);
  if (*(_DWORD *)(a1 + 32) == 1936684398)
    fpfsi_UpdateAudioActiveSamples(*(_QWORD *)a1, a2);
  if (*(_BYTE *)(v6 + 49))
  {
    if ((v45.flags & 1) != 0)
    {
      memset(&v44, 0, sizeof(v44));
      fpfs_GetEndOutputPresentationTimeStamp((opaqueCMSampleBuffer *)a2, &v44);
      if ((v44.flags & 1) != 0)
      {
        time1 = v44;
        time2 = v45;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          memset(&v43, 0, sizeof(v43));
          CMSampleBufferGetOutputPresentationTimeStamp(&v43, (CMSampleBufferRef)a2);
          memset(&v42, 0, sizeof(v42));
          CMSampleBufferGetOutputDecodeTimeStamp(&v42, (CMSampleBufferRef)a2);
          time1 = v43;
          time2 = v45;
          if (CMTimeCompare(&time1, &time2) >= 1)
          {
            time1 = v42;
            time2 = v45;
            if (CMTimeCompare(&time1, &time2) > 0)
              return 0;
          }
          time1 = v43;
          time2 = v45;
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            memset(&time1, 0, sizeof(time1));
            CMSampleBufferGetOutputPresentationTimeStamp(&time1, (CMSampleBufferRef)a2);
            memset(&time2, 0, sizeof(time2));
            memset(&v48, 0, sizeof(v48));
            type = v45;
            rhs = time1;
            if (CMTimeCompare(&type, &rhs) >= 1)
            {
              v33 = (const __CFString *)*MEMORY[0x1E0CA2720];
              CMRemoveAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2720]);
              fpfs_GetEndOutputPresentationTimeStamp((opaqueCMSampleBuffer *)a2, &time2);
              type = time2;
              rhs = v45;
              if ((CMTimeCompare(&type, &rhs) & 0x80000000) == 0)
              {
                type = time2;
                rhs = v45;
                CMTimeSubtract(&v48, &type, &rhs);
                type = v48;
                rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                if (CMTimeCompare(&type, &rhs) >= 1)
                {
                  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
                  type = v48;
                  v35 = CMTimeCopyAsDictionary(&type, AllocatorForMedia);
                  if (v35)
                  {
                    v36 = v35;
                    CMSetAttachment(a2, v33, v35, 1u);
                    CFRelease(v36);
                  }
                }
              }
            }
          }
          else
          {
            fpfs_DoNotDisplay((opaqueCMSampleBuffer *)a2);
          }
        }
      }
    }
  }
  v7 = *(const void **)(*(_QWORD *)(a1 + 96) + 56);
  if (!v7)
    goto LABEL_33;
  if (dword_1EE2A2A88)
  {
    LODWORD(v48.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = v48.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
      v10 = value;
    else
      v10 = value & 0xFFFFFFFE;
    if (v10)
    {
      v11 = *(_QWORD *)DerivedStorage;
      if (*(_QWORD *)DerivedStorage)
        v12 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v12 = "";
      v37 = v6;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v14 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v14 = "";
      CMSampleBufferGetOutputPresentationTimeStamp(&time, (CMSampleBufferRef)a2);
      Seconds = CMTimeGetSeconds(&time);
      LODWORD(time2.value) = 136316674;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_RenderBuffer";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = v11;
      HIWORD(time2.epoch) = 2082;
      v50 = v12;
      v51 = 2048;
      v52 = v13;
      v53 = 2082;
      v54 = v14;
      v55 = 2048;
      v56 = *(double *)&a2;
      v57 = 2048;
      v58 = Seconds;
      _os_log_send_and_compose_impl();
      v6 = v37;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = *(const void **)(*(_QWORD *)(a1 + 96) + 56);
  }
  CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA26E0], v7, 1u);
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 96) + 56));
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 56) = 0;
  if (*(_DWORD *)(a1 + 32) == 1986618469)
  {
    if (*(float *)(v6 + 108) >= 0.0 || *(_QWORD *)(DerivedStorage + 2960))
      v16 = 1.0;
    else
      v16 = -1.0;
    *(float *)&time1.value = v16;
    v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &time1);
    if (v17)
    {
      v18 = v17;
      fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(a1 + 96), (uint64_t)CFSTR("PrerollRate"), (uint64_t)v17);
      CFRelease(v18);
    }
LABEL_33:
    if (*(_DWORD *)(a1 + 32) == 1986618469)
    {
      if (*(_BYTE *)(a1 + 184)
        && (*(_BYTE *)(DerivedStorage + 332) & 1) != 0
        && !*(_BYTE *)(a1 + 104)
        && fpfs_FirstRenderingTrackofType(*(_QWORD *)a1, 1986618469) == a1)
      {
        fpfs_UnsuspendVideoRenderingForTrack(a1, 0);
        fpfs_PrerollTrack(a1);
      }
      if (*(_DWORD *)(a1 + 32) == 1986618469)
      {
        if (*(_BYTE *)(a1 + 104))
        {
          if (!*(_BYTE *)(a1 + 184))
          {
            fpfs_GetEndOutputPresentationTimeStamp((opaqueCMSampleBuffer *)a2, &v40);
            time1 = *(CMTime *)(a1 + 192);
            if (CMTimeCompare(&v40, &time1) < 0)
              fpfs_DoNotDisplay((opaqueCMSampleBuffer *)a2);
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(DerivedStorage + 1476) & 1) != 0 && *(_DWORD *)(a1 + 32) == 1986618469 && !*(_BYTE *)(a1 + 184))
  {
    v25 = *(_QWORD *)a1;
    time1 = *(CMTime *)(DerivedStorage + 1464);
    if (fpfsi_ProcessVideoSampleForClamping(v25, (opaqueCMSampleBuffer *)a2, (uint64_t)&time1))
      return 0;
  }
  v19 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (*(_BYTE *)(a1 + 185))
  {
    if (dword_1EE2A2A88)
    {
      LODWORD(v48.value) = 0;
      LOBYTE(type.value) = 0;
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v21 = v48.value;
      if (os_log_type_enabled(v20, type.value))
        v22 = v21;
      else
        v22 = v21 & 0xFFFFFFFE;
      if (v22)
      {
        v23 = *(_QWORD *)DerivedStorage;
        if (v23)
          v24 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v24 = "";
        v38 = v6;
        v27 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v28 = "";
        CMSampleBufferGetOutputPresentationTimeStamp(&v39, (CMSampleBufferRef)a2);
        v29 = CMTimeGetSeconds(&v39);
        LODWORD(time2.value) = 136316418;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_RenderBuffer";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v23;
        HIWORD(time2.epoch) = 2082;
        v50 = v24;
        v51 = 2048;
        v52 = v27;
        v53 = 2082;
        v54 = v28;
        v55 = 2048;
        v56 = v29;
        _os_log_send_and_compose_impl();
        v6 = v38;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA26D8], *v19, 1u);
    *(_BYTE *)(a1 + 185) = 0;
  }
  if (*(float *)(v6 + 108) < 0.0)
    CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA26E8], *v19, 1u);
  if (*(_DWORD *)(a1 + 32) == 1835365473)
  {
    LODWORD(time1.value) = *(_QWORD *)(a1 + 16);
    v30 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &time1);
    CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA4E80], v30, 0);
    if (v30)
      CFRelease(v30);
  }
  v26 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(*(_QWORD *)(a1 + 96) + 40), a2);
  for (i = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 88); i; i = *(_QWORD *)(i + 88))
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(i + 40), a2);
  return v26;
}

void fpfs_RemoveDoNotDisplay(opaqueCMSampleBuffer *a1)
{
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
      CFDictionaryRemoveValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D8]);
  }
}

double fpfsi_MapEndTimeFromTargetToSource@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  const __CFData *v5;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 1384);
  v4 = *(_OWORD *)(a1 + 1368);
  *(_OWORD *)a2 = v4;
  v5 = *(const __CFData **)(a1 + 3344);
  if (v5)
  {
    CFDataGetLength(v5);
    CFDataGetBytePtr(*(CFDataRef *)(a1 + 3344));
    CMSpeedRampMapTimeFromTargetToSource();
    *(_QWORD *)&v4 = v7;
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
  }
  return *(double *)&v4;
}

opaqueCMSampleBuffer *fpfsi_UpdateAudioActiveSamples(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  opaqueCMSampleBuffer *result;
  CMBufferRef v5;
  CMTime v6;
  CMTime time1;
  CMTime v8;
  CMTime v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v9, 0, sizeof(v9));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v9);
  if (a2 && !fpfs_IsMarkerOnly((opaqueCMSampleBuffer *)a2))
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 848), a2);
  while (1)
  {
    result = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(DerivedStorage + 848));
    if (!result)
      break;
    memset(&v8, 0, sizeof(v8));
    fpfs_GetEndOutputPresentationTimeStamp(result, &v8);
    time1 = v9;
    v6 = v8;
    result = (opaqueCMSampleBuffer *)CMTimeCompare(&time1, &v6);
    if ((result & 0x80000000) != 0)
      break;
    v5 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(DerivedStorage + 848));
    if (v5)
      CFRelease(v5);
  }
  return result;
}

uint64_t fpfs_UnsuspendVideoRenderingForTrack(uint64_t a1, char *a2)
{
  uint64_t RenderingTrackofType;
  uint64_t v5;
  uint64_t v6;
  const __CFDictionary *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  BOOL v11;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v13;
  uint64_t v14;
  char v15;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32) != 1986618469 || !*(_QWORD *)(a1 + 96))
    goto LABEL_21;
  RenderingTrackofType = fpfs_LastRenderingTrackofType(*(_QWORD *)a1, 1986618469, a1);
  if (!RenderingTrackofType)
  {
    fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(a1 + 96), (uint64_t)CFSTR("Suspended"), *MEMORY[0x1E0C9AE40]);
    v15 = 1;
    fpfsi_scheduleFVTTransitionsForItem(*(const __CFString **)a1, 0, 1);
    fpfsi_RTCReportingReportFormatTransition(*(_QWORD *)a1, 0, a1);
LABEL_22:
    v14 = 0;
    if (a2)
      *a2 = v15;
    return v14;
  }
  v5 = RenderingTrackofType;
  v6 = *(_QWORD *)(RenderingTrackofType + 96);
  if (v6)
  {
    v7 = *(const __CFDictionary **)(v6 + 64);
    if (v7)
    {
      if (CFDictionaryGetValue(v7, CFSTR("renderPipelineToStart")))
      {
        v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        if (v8)
        {
          if (FigCFEqual())
            goto LABEL_12;
        }
        v9 = *(const void **)(*(_QWORD *)(v5 + 96) + 64);
        if (v9)
        {
          CFRelease(v9);
          *(_QWORD *)(*(_QWORD *)(v5 + 96) + 64) = 0;
        }
        if (v8)
LABEL_12:
          CFRelease(v8);
      }
    }
  }
  v10 = *(_QWORD *)(v5 + 96);
  v11 = !v10 || v10 == *(_QWORD *)(a1 + 96);
  if (v11 || *(_QWORD *)(v10 + 64))
  {
LABEL_21:
    v15 = 0;
    goto LABEL_22;
  }
  cf = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v13 = CMSampleBufferCreate(AllocatorForMedia, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&cf);
  if ((_DWORD)v13)
    return v13;
  v14 = fpfs_RenderWithEndSignal(v5, cf, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
  CFRelease(cf);
  if (!(_DWORD)v14)
  {
    fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(a1 + 96), (uint64_t)CFSTR("Suspended"), *MEMORY[0x1E0C9AE50]);
    goto LABEL_21;
  }
  return v14;
}

uint64_t fpfs_PrerollTrack(uint64_t result)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)(result + 32) == 1986618469 && *(_QWORD *)(result + 96) && !*(_BYTE *)(result + 104))
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v1 + 32) == 1986618469)
      {
        v3 = DerivedStorage;
        if ((int)CMVideoFormatDescriptionGetVideoDynamicRange() >= 2 && !*(_BYTE *)(v1 + 184))
        {
          v4 = *(_QWORD *)(v3 + 1040);
          if (v4)
          {
            while (v4 != v1)
            {
              if (*(_DWORD *)(v4 + 32) != 1986618469 || (int)CMVideoFormatDescriptionGetVideoDynamicRange() <= 1)
              {
                v4 = *(_QWORD *)(v4 + 8);
                if (v4)
                  continue;
              }
              goto LABEL_8;
            }
            CelestialPreallocateSurfaceMemoryForHDRVideo();
          }
        }
      }
LABEL_8:
      result = fpfs_PrerollRenderPipeline(*(_QWORD *)(*(_QWORD *)(v1 + 96) + 32), *(_DWORD *)(v1 + 16));
      *(_BYTE *)(v1 + 104) = (_DWORD)result == 0;
    }
  }
  return result;
}

void fpfsi_RTCReportingReportFormatTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  FourCharCode MediaSubType;
  const __CFString *TrackVideoContentTypeDescription;
  const __CFString *v9;
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  const __CFAllocator *AllocatorForMedia;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  CFStringRef v17;
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v20;
  void (*v21)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  const __CFAllocator *v22;
  CFStringRef v23;
  uint64_t v24;
  void (*v25)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD);
  uint64_t v26;
  double Seconds;
  double v28;
  void (*v29)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v33;
  void (*v34)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3 || *(_DWORD *)(a3 + 32) != 1986618469)
    return;
  v6 = DerivedStorage;
  MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a3 + 40));
  TrackVideoContentTypeDescription = fpfsi_getTrackVideoContentTypeDescription(a3);
  if (!a2)
    goto LABEL_13;
  if (*(_DWORD *)(a2 + 32) == 1986618469)
  {
    v9 = fpfsi_getTrackVideoContentTypeDescription(a2);
    if (!FigCFEqual())
    {
      v10 = *(_QWORD *)(v6 + 2536);
      if (v10)
      {
        v11 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v11)
          v11(v10, CFSTR("playerStats"), CFSTR("VidTypeF"), v9, 0);
      }
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v13 = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a2 + 40)) >> 24;
      v14 = (CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a2 + 40)) >> 16);
      v15 = ((unsigned __int16)CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a2 + 40)) >> 8);
      v16 = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a2 + 40));
      v17 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%c%c%c%c"), v13, v14, v15, v16);
      if (v17)
      {
        a2 = (uint64_t)v17;
        v18 = *(_QWORD *)(v6 + 2536);
        if (v18)
        {
          v19 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 48);
          if (v19)
            v19(v18, CFSTR("playerStats"), CFSTR("FromFmt"), a2, 0);
        }
LABEL_13:
        v20 = *(_QWORD *)(v6 + 2536);
        if (v20)
        {
          v21 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
          if (v21)
            v21(v20, CFSTR("playerStats"), CFSTR("VidTypeT"), TrackVideoContentTypeDescription, 0);
        }
        v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v23 = CFStringCreateWithFormat(v22, 0, CFSTR("%c%c%c%c"), HIBYTE(MediaSubType), BYTE2(MediaSubType), BYTE1(MediaSubType), MediaSubType);
        if (v23)
        {
          v24 = *(_QWORD *)(v6 + 2536);
          if (v24)
          {
            v25 = *(void (**)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 48);
            if (v25)
              v25(v24, CFSTR("playerStats"), CFSTR("ToFmt"), v23, 0);
          }
          if ((*(_BYTE *)(a3 + 484) & 1) != 0)
          {
            v26 = *(_QWORD *)(v6 + 2536);
            time = *(CMTime *)(a3 + 472);
            Seconds = CMTimeGetSeconds(&time);
            if (v26)
            {
              v28 = Seconds;
              v29 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v29)
                v29(v26, CFSTR("playerStats"), CFSTR("FmtTranTime"), (uint64_t)v28, 0);
            }
          }
          v30 = *(_QWORD *)(v6 + 2536);
          if (v30)
          {
            v31 = *(_QWORD *)(a3 + 64);
            v32 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v32)
              v32(v30, CFSTR("playerStats"), CFSTR("FmtTranDisc"), v31, 0);
            v33 = *(_QWORD *)(v6 + 2536);
            if (v33)
            {
              v34 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
              if (v34)
                v34(v33, CFSTR("playerStats"), 114, 0, 0);
            }
          }
        }
        if (a2)
          CFRelease((CFTypeRef)a2);
        if (v23)
          CFRelease(v23);
      }
    }
  }
}

uint64_t fpfs_RenderWithEndSignal(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v8;
  const void *v9;
  const __CFAllocator *v11;
  void *values;

  v3 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(v3 + 64))
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    values = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (values)
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v8 = CFDictionaryCreate(AllocatorForMedia, (const void **)&kFigPlaybackItemParameter_RenderPipelineToStart, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (values)
        CFRelease(values);
      if (v8)
        goto LABEL_7;
    }
LABEL_10:
    *(_QWORD *)(v3 + 64) = 0;
    return 4294954434;
  }
  v11 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v8 = CFDictionaryCreate(v11, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v8)
    goto LABEL_10;
LABEL_7:
  v9 = (const void *)*MEMORY[0x1E0C9AE50];
  CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2658], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
  CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA26C8], v8, 1u);
  *(_QWORD *)(v3 + 64) = v8;
  CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA4E50], v9, 1u);
  if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 72)))
    return fpfs_RenderBuffer(a1, a2);
  else
    return CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a1 + 72), a2);
}

const __CFString *fpfsi_getTrackVideoContentTypeDescription(uint64_t a1)
{
  if (fpfsi_copyTrackFigTags(a1))
    return 0;
  else
    return FigAlternateGetVideoContentTypeStringFromCollection(0);
}

uint64_t FigReportingAgentStatsSetCFTypeValue(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  if (result)
  {
    v7 = result;
    result = CMBaseObjectGetVTable();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 48);
    if (v8)
      return v8(v7, a2, a3, a4, 0);
  }
  return result;
}

uint64_t fpfsi_copyTrackFigTags(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DefaultTagCollectionForVideo;
  CFTypeRef v4;
  CFArrayRef tagCollectionsOut;
  CFTypeRef cf;
  CMMutableTagCollectionRef tagCollection;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  cf = 0;
  tagCollection = 0;
  tagCollectionsOut = 0;
  FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(*(const opaqueCMFormatDescription **)(a1 + 40), &cf);
  if (cf)
    goto LABEL_6;
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DefaultTagCollectionForVideo = FPSupport_CreateDefaultTagCollectionForVideo((CMTagCollectionRef *)&cf);
  v4 = cf;
  if (!(_DWORD)DefaultTagCollectionForVideo)
  {
    if (cf)
    {
LABEL_6:
      FigGetAllocatorForMedia();
      FigTagCollectionCreateMutableCopy();
      if (tagCollection)
      {
        CMVideoFormatDescriptionCopyTagCollectionArray(*(CMVideoFormatDescriptionRef *)(a1 + 40), &tagCollectionsOut);
        if (tagCollectionsOut && CFArrayGetCount(tagCollectionsOut) >= 2)
        {
          CMTagCollectionRemoveAllTagsOfCategory(tagCollection, kCMTagCategory_StereoView);
          CMTagCollectionAddTag(tagCollection, *MEMORY[0x1E0CA5278]);
          CMTagCollectionRemoveAllTagsOfCategory(tagCollection, kCMTagCategory_PackingType);
          CMTagCollectionAddTag(tagCollection, *MEMORY[0x1E0CA5230]);
        }
        FigTagCollectionCreateCopy();
      }
      DefaultTagCollectionForVideo = 0;
      v4 = cf;
    }
  }
  if (v4)
    CFRelease(v4);
  if (tagCollection)
    CFRelease(tagCollection);
  if (tagCollectionsOut)
    CFRelease(tagCollectionsOut);
  return DefaultTagCollectionForVideo;
}

void fpfs_SignalImageQueueGaugeEnqueueingCompleteAfterDecoding(uint64_t a1)
{
  const void *v2;
  const __CFAllocator *AllocatorForMedia;
  OSStatus v4;
  CMSampleBufferRef v5;
  CMSampleBufferRef v6;

  v6 = 0;
  CMBaseObjectGetDerivedStorage();
  v2 = (const void *)fpfsi_copyImageQueueGauge(*(const void **)a1);
  if (*(_DWORD *)(a1 + 32) != 1986618469)
    goto LABEL_5;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v4 = CMSampleBufferCreate(AllocatorForMedia, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, &v6);
  v5 = v6;
  if (v4)
  {
    if (!v6)
      goto LABEL_5;
    goto LABEL_4;
  }
  CMSetAttachment(v6, (CFStringRef)*MEMORY[0x1E0CA4E50], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
  if (v2)
    CMSetAttachment(v6, (CFStringRef)*MEMORY[0x1E0CA4E70], v2, 1u);
  fpfs_RenderBuffer(a1, v6);
  v5 = v6;
  if (v6)
LABEL_4:
    CFRelease(v5);
LABEL_5:
  if (v2)
    CFRelease(v2);
}

uint64_t fpfsi_addCAImageQueuesAndSlots(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFArray *Count;
  CFIndex v9;
  const __CFAllocator *v10;
  CFMutableArrayRef v11;
  const __CFArray *Mutable;
  const __CFAllocator *v13;
  CFIndex v14;
  const __CFArray *v15;
  CFIndex v16;
  unint64_t Dimensions;
  int32_t v19;
  unint64_t v20;
  int *v21;
  const __CFAllocator *AllocatorForMedia;
  CFArrayRef Copy;
  int v25;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  Count = *(const __CFArray **)(v7 + 376);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if (!a2)
    return 0;
  v9 = (CFIndex)Count + *(_QWORD *)(v7 + 400);
  if (*(_QWORD *)(DerivedStorage + 656)
    || (v10 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v11 = CFArrayCreateMutable(v10, v9, MEMORY[0x1E0C9B378]),
        (*(_QWORD *)(DerivedStorage + 656) = v11) != 0))
  {
    Mutable = *(const __CFArray **)(DerivedStorage + 664);
    if (Mutable
      || (v13 = (const __CFAllocator *)FigGetAllocatorForMedia(),
          Mutable = CFArrayCreateMutable(v13, *(_QWORD *)(v7 + 400), MEMORY[0x1E0C9B378]),
          (*(_QWORD *)(DerivedStorage + 664) = Mutable) != 0))
    {
      v14 = CFArrayGetCount(Mutable);
      v15 = *(const __CFArray **)(DerivedStorage + 656);
      if (v15)
        v16 = CFArrayGetCount(v15);
      else
        v16 = 0;
      if (v16 >= v9 || v14 >= v9)
        return 0;
      Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a2 + 40));
      v19 = Dimensions;
      v20 = HIDWORD(Dimensions);
      if (a3)
        v21 = &v25;
      else
        v21 = 0;
      do
      {
        value = 0;
        v25 = 0;
        FPSupport_EnsureCAImageQueue((CFTypeRef *)&value, v21, v19, v20);
        if (value)
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 656), value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
        if (a3)
          FigCFArrayAppendInt32();
        --v9;
      }
      while (v16 != v9);
      if (v16)
      {
        if (!a3)
          goto LABEL_29;
      }
      else
      {
        *(_BYTE *)(DerivedStorage + 3016) = 1;
        if (!a3)
LABEL_29:
          fpfs_EnqueueNotification(*(const void **)DerivedStorage, CFSTR("DidPrepareImageQueue"), a1, 0);
      }
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Copy = CFArrayCreateCopy(AllocatorForMedia, *(CFArrayRef *)(DerivedStorage + 664));
      FigPropertyStorageSetValue(*(_QWORD *)(DerivedStorage + 168), CFSTR("VideoSlotArray"), Copy);
      goto LABEL_29;
    }
  }
  return FigSignalErrorAt();
}

uint64_t fpfsi_createOutputDestinationForVideo(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t RenderingTrackofType;
  uint64_t v4;
  const __CFArray *v5;
  const __CFAllocator *AllocatorForMedia;
  uint64_t *v7;
  const __CFAllocator **v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFStringRef v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, CFStringRef);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, CFTypeRef *, _QWORD);
  uint64_t v17;
  const __CFAllocator *v18;
  const void *v19;
  const void *v20;
  CFTypeRef cf;
  const __CFArray *v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v23 = 0;
  RenderingTrackofType = fpfs_LastRenderingTrackofType(*(_QWORD *)a1, 1986618469, a1);
  if (*(_DWORD *)(a1 + 32) != 1986618469 || *(_QWORD *)(a1 + 88))
  {
    v5 = 0;
    goto LABEL_30;
  }
  v4 = RenderingTrackofType;
  fpfs_CreateFigImageQueueOutputsArray(*(_QWORD *)a1, a1, (CFTypeRef *)&v23);
  v5 = v23;
  if (!v23)
  {
LABEL_30:
    v17 = 0;
    goto LABEL_24;
  }
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v7 = (uint64_t *)(DerivedStorage + 832);
  if (v4)
    v8 = (const __CFAllocator **)(v4 + 88);
  else
    v8 = (const __CFAllocator **)(DerivedStorage + 832);
  v9 = FigAggregateVideoDestinationCreate(AllocatorForMedia, v5, *(const void **)(DerivedStorage + 576), *(CMFormatDescriptionRef *)(a1 + 40), *v8, (_QWORD *)(a1 + 88));
  if ((_DWORD)v9)
  {
    v17 = v9;
    goto LABEL_24;
  }
  v10 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v11 = CFStringCreateWithFormat(v10, 0, CFSTR("V.%d"), *(_QWORD *)(a1 + 16));
  if (v11)
  {
    CMBaseObject = FigAggregateVideoDestinationGetCMBaseObject(*(_QWORD *)(a1 + 88));
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
    if (v13)
    {
      v14 = v13(CMBaseObject, CFSTR("VideoConfigID"), v11);
      if (!(_DWORD)v14)
        goto LABEL_11;
      v17 = v14;
    }
    else
    {
      v17 = 4294954514;
    }
LABEL_23:
    CFRelease(v11);
    goto LABEL_24;
  }
LABEL_11:
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (v4)
  {
    v15 = *(_QWORD *)(v4 + 88);
  }
  else
  {
    v15 = *v7;
    if (!*v7)
    {
      v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
      cf = CFArrayCreate(v18, 0, 0, MEMORY[0x1E0C9B378]);
      goto LABEL_18;
    }
  }
  v16 = *(void (**)(uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v16)
    v16(v15, &cf, 0);
LABEL_18:
  fpfsi_updateFigImageQueueListeners(*(_QWORD *)a1, a1);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v19 = *(const void **)(DerivedStorage + 832);
  v20 = *(const void **)(a1 + 88);
  *(_QWORD *)(DerivedStorage + 832) = v20;
  if (v20)
    CFRetain(v20);
  if (v19)
    CFRelease(v19);
  v17 = 0;
  if (v11)
    goto LABEL_23;
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return v17;
}

void fpfs_CreateFigImageQueueOutputsArray(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFArray *v7;
  CFTypeRef v8;
  const void *v9;
  const void *ConcatenationOfTwoArrays;
  uint64_t v11;
  const __CFAllocator *AllocatorForMedia;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v7 = *(const __CFArray **)(DerivedStorage + 856);
    if (*(_BYTE *)(v6 + 462))
    {
      if (v7)
      {
        v8 = CFRetain(*(CFTypeRef *)(DerivedStorage + 856));
        if (v8)
        {
          v9 = v8;
          ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
LABEL_12:
          CFRelease(v9);
LABEL_13:
          if (ConcatenationOfTwoArrays)
          {
            *a3 = CFRetain(ConcatenationOfTwoArrays);
            CFRelease(ConcatenationOfTwoArrays);
          }
          else
          {
            *a3 = 0;
          }
          return;
        }
      }
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v11 = (uint64_t)CFArrayCreate(AllocatorForMedia, 0, 0, MEMORY[0x1E0C9B378]);
    }
    else
    {
      if (v7 && CFArrayGetCount(v7) >= 1)
        fpfsi_VideoOutputAllowedWithPermissivePolicy(a2);
      v11 = FigCFArrayCreateConcatenationOfTwoArrays();
    }
    v9 = (const void *)v11;
    ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
    if (!v9)
      goto LABEL_13;
    goto LABEL_12;
  }
}

void fpfsi_updateFigImageQueueListeners(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t, CFArrayRef *, _QWORD);
  CFArrayRef theArray;

  theArray = 0;
  if (a2 && (v2 = *(_QWORD *)(a2 + 88)) != 0)
  {
    v3 = *(void (**)(uint64_t, CFArrayRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v3)
      v3(v2, &theArray, 0);
  }
  else
  {
    fpfsi_copyCurrentImageQueueArrayAndOptions(a1, (uint64_t *)&theArray);
  }
  if (theArray)
  {
    CFArrayGetCount(theArray);
    if (theArray)
      CFRelease(theArray);
  }
}

void fpfsi_displaySizeChanged(int a1, uint64_t a2, int a3, int a4, CFTypeRef cf)
{
  CFTypeID v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v8;
  uint64_t DerivedStorage;
  CFTypeRef cfa;
  CFTypeRef v11[21];

  v11[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cfa = 0;
  v11[0] = 0;
  if (!cf || (v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()) || FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
    goto LABEL_13;
  }
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, v11, &cfa))
  {
    v8 = cfa;
    if (!cfa)
      goto LABEL_13;
LABEL_12:
    CFRelease(v8);
    goto LABEL_13;
  }
  CMBaseObjectGetDerivedStorage();
  v8 = cfa;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 760));
  if (!*(_BYTE *)(DerivedStorage + 768))
  {
    *(_BYTE *)(DerivedStorage + 768) = 1;
    FigRetainProxyRetain();
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 760));
  if (v8)
    goto LABEL_12;
LABEL_13:
  if (v11[0])
    CFRelease(v11[0]);
}

uint64_t fpfsi_VideoOutputAllowedWithPermissivePolicy(uint64_t a1)
{
  uint64_t v1;
  uint64_t AllocatorForMedia;
  uint64_t (*v3)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v4;
  BOOL v5;
  CFTypeRef v6;
  _BOOL8 v7;
  uint64_t result;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 1;
  if (*(_DWORD *)(a1 + 32) == 1986618469)
  {
    v1 = *(_QWORD *)(a1 + 384);
    if (!v1)
      return 1;
    AllocatorForMedia = FigGetAllocatorForMedia();
    v3 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v3)
    {
      v4 = v3(v1, CFSTR("AllowsVideoOutput"), AllocatorForMedia, &cf);
      if (v4)
        v5 = v4 == -12784;
      else
        v5 = 1;
      if (!v5)
      {
        v7 = 0;
        result = 0;
        v6 = cf;
        if (!cf)
          return result;
        goto LABEL_14;
      }
      v6 = cf;
      if (cf)
      {
        v7 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
LABEL_14:
        CFRelease(v6);
        return v7;
      }
      return 1;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

void fpfsi_copyCurrentImageQueueArrayAndOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v5;
  const void *v6;
  void (*v7)(const void *, uint64_t *, _QWORD);
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = fpfsi_copyCurrentVideoDestination(a1);
  if (v5)
  {
    v6 = v5;
    v7 = *(void (**)(const void *, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v7)
      v7(v6, a2, 0);
    CFRelease(v6);
  }
  else
  {
    v8 = *(_QWORD *)(DerivedStorage + 720);
    if (v8)
      FigImageQueueTableCopyFigImageQueueArray(v8, a2);
  }
}

uint64_t fpfsi_deferredDisplaySizeChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t DerivedStorage;
  double *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v8;
  __int128 v9;
  CFTypeRef v10;
  CFTypeRef cf[27];

  cf[26] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v10 = 0;
  cf[0] = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, cf, &v10))
  {
    v3 = v10;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = (double *)MEMORY[0x1E0C9D820];
    v9 = *MEMORY[0x1E0C9D820];
    v8 = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 760));
    *(_BYTE *)(DerivedStorage + 768) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 760));
    fpfsi_copyCurrentImageQueueArrayAndOptions((uint64_t)v3, (uint64_t *)&v8);
    if (!FPSupport_GetMaxDisplaySizeFromImageQueues((const __CFArray *)v8, (double *)&v9)
      && (*(double *)&v9 != *v5 || *((double *)&v9 + 1) != v5[1]))
    {
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_OWORD *)(DerivedStorage + 744) = v9;
      fpfsi_HandleResolutionCapOrDisplaySizeChange((uint64_t)v3);
    }
    if (v8)
      CFRelease(v8);
    fpfs_UnlockAndPostNotificationsWithCaller(cf[0]);
  }
  if (cf[0])
    CFRelease(cf[0]);
  if (v10)
    CFRelease(v10);
  return FigRetainProxyRelease();
}

uint64_t fpfsi_HandleResolutionCapOrDisplaySizeChange(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v3 = DerivedStorage;
  v4 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v4 + 40) || !*(_BYTE *)(v4 + 48) || !*(_BYTE *)(v4 + 49))
    return 0;
  result = fpfsi_UpdateResourceSpecifierOnResourceArbiter(a1);
  if (!(_DWORD)result)
  {
    result = fpfsi_SetupResolutionCapFilter(a1);
    if (!(_DWORD)result)
    {
      result = fpfsi_CreateAndAddCombinedAudioPreferenceFilter(a1);
      if (!(_DWORD)result)
        return FigAlternateSelectionBossApplyFilters(*(const void **)(v3 + 40));
    }
  }
  return result;
}

uint64_t fpfsi_UpdateResourceSpecifierOnResourceArbiter(uint64_t a1)
{
  uint64_t GlobalSingleton;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double ResolutionCapForFilter;
  double v8;
  uint64_t v9;
  uint64_t AllocatorForMedia;
  char v11;
  uint64_t v12;
  int v13;
  __CFString **v14;
  __CFString *v15;
  _QWORD *v17;
  CFTypeRef v18;
  __int128 v19;
  CFTypeRef cf;

  cf = 0;
  v19 = *MEMORY[0x1E0C9D820];
  v17 = 0;
  v18 = 0;
  GlobalSingleton = FigPlayerResourceArbiterGetGlobalSingleton(&v17);
  if (!(_DWORD)GlobalSingleton)
  {
    if (!a1
      || (DerivedStorage = CMBaseObjectGetDerivedStorage(),
          v4 = CMBaseObjectGetDerivedStorage(),
          *(_QWORD *)(v4 + 80) != a1)
      || (v5 = v4, v6 = CMBaseObjectGetDerivedStorage(), !*(_QWORD *)(v6 + 40))
      || !*(_BYTE *)(v6 + 48)
      || !*(_BYTE *)(v6 + 49))
    {
      v12 = 0;
      goto LABEL_24;
    }
    GlobalSingleton = FigPlayerResourceArbiterPlayerSpecifierCreate((uint64_t *)&v18);
    if (!(_DWORD)GlobalSingleton)
    {
      ResolutionCapForFilter = fpfsi_GetResolutionCapForFilter(a1, 0);
      GlobalSingleton = FigPlayerResourceArbiterPlayerSpecifierSetDisplaySize((uint64_t)v18, ResolutionCapForFilter, v8);
      if (!(_DWORD)GlobalSingleton)
      {
        v9 = *(_QWORD *)(DerivedStorage + 40);
        AllocatorForMedia = FigGetAllocatorForMedia();
        GlobalSingleton = FigAlternateSelectionBossCopyProperty(v9, CFSTR("AlternateList"), AllocatorForMedia, (const __CFArray **)&cf);
        if (!(_DWORD)GlobalSingleton)
        {
          if (!FigStreamAlternateCopyMaximumVideoResolution((CFArrayRef)cf, (double *)&v19)
            || (GlobalSingleton = FigPlayerResourceArbiterPlayerSpecifierSetResolutionCeiling((uint64_t)v18, *(double *)&v19, *((double *)&v19 + 1)), !(_DWORD)GlobalSingleton))
          {
            if (*(_BYTE *)(v5 + 521))
              v11 = 1;
            else
              v11 = *(_BYTE *)(v5 + 522) != 0;
            FigPlayerResourceArbiterPlayerSpecifierSetIsMuted((uint64_t)v18, v11);
            v13 = *(_DWORD *)(v5 + 808);
            if (v13 == 2)
            {
              v14 = kFigPlayerRole_PIP;
            }
            else
            {
              if (v13 != 1)
              {
                v15 = 0;
                goto LABEL_22;
              }
              v14 = kFigPlayerRole_Scanning;
            }
            v15 = *v14;
LABEL_22:
            FigPlayerResourceArbiterPlayerSpecifierSetPlayerRole((uint64_t)v18, v15);
            FigPlayerResourceArbiterPlayerSpecifierSetIsFullyActive((uint64_t)v18, *(_DWORD *)(v5 + 32) == 2);
            GlobalSingleton = FigPlayerResourceArbiterSetSpecifierForConsumer(v17, v18);
          }
        }
      }
    }
  }
  v12 = GlobalSingleton;
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  return v12;
}

uint64_t fpfsi_SetupResolutionCapFilter(uint64_t a1)
{
  uint64_t DerivedStorage;
  double ResolutionCapForFilter;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t GlobalSingleton;
  BOOL v11;
  double v12;
  double v13;
  float v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  double v21;
  double v22;
  _BOOL4 v23;
  uint64_t v24;
  _BOOL4 v26;
  const __CFAllocator *v27;
  uint64_t v28;
  CFTypeRef v29;
  uint64_t v30;
  CFTypeRef cf;
  char v33;
  os_log_type_t type;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  const char *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v33 = 0;
  ResolutionCapForFilter = fpfsi_GetResolutionCapForFilter(a1, &v33);
  v5 = v4;
  v6 = *(double *)(DerivedStorage + 2496);
  v7 = *(double *)(DerivedStorage + 2504);
  cf = 0;
  v37 = 0;
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = CMBaseObjectGetDerivedStorage();
  v36 = 0;
  GlobalSingleton = FigPlayerResourceArbiterGetGlobalSingleton(&v36);
  if ((_DWORD)GlobalSingleton || !v36)
    goto LABEL_9;
  if (*(float *)(v8 + 3172) != 0.0)
  {
    GlobalSingleton = FigPlayerResourceArbiterGetBudgetForConsumer(v36, *(_QWORD *)(v9 + 864), &v37);
    if ((_DWORD)GlobalSingleton)
      v11 = 1;
    else
      v11 = v37 == 0;
    if (!v11)
    {
      if (v37 == (unint64_t)(ResolutionCapForFilter * v5))
        goto LABEL_12;
      v14 = *(float *)(v8 + 3172);
      v12 = sqrtf(v14 * (float)v37);
      v13 = sqrtf((float)v37 / v14);
      if (!dword_1EE2A2A88)
        goto LABEL_26;
      v35 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v16 = v35;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if (!v17)
      {
LABEL_25:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_26;
      }
      v18 = *(_QWORD *)v8;
      if (v18)
      {
        v19 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        if (a1)
        {
LABEL_20:
          v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
LABEL_24:
          v38 = 136317186;
          v39 = "fpfsi_UpdateResolutionCapWithBudgetFromArbiter";
          v40 = 2048;
          v41 = v18;
          v42 = 2082;
          v43 = v19;
          v44 = 2048;
          v45 = a1;
          v46 = 2082;
          v47 = v20;
          v48 = 2048;
          v49 = ResolutionCapForFilter;
          v50 = 2048;
          v51 = v5;
          v52 = 2048;
          v53 = v12;
          v54 = 2048;
          v55 = v13;
          _os_log_send_and_compose_impl();
          goto LABEL_25;
        }
      }
      else
      {
        v19 = "";
        if (a1)
          goto LABEL_20;
      }
      v20 = "";
      goto LABEL_24;
    }
LABEL_9:
    if ((_DWORD)GlobalSingleton)
      return GlobalSingleton;
    goto LABEL_27;
  }
LABEL_12:
  v12 = ResolutionCapForFilter;
  v13 = v5;
LABEL_26:
  v5 = v13;
  ResolutionCapForFilter = v12;
LABEL_27:
  v22 = *MEMORY[0x1E0C9D820];
  v21 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v23 = v5 == v21 && ResolutionCapForFilter == *MEMORY[0x1E0C9D820];
  if (!v23 && !v33)
    goto LABEL_37;
  v24 = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("DisplaySize"));
  if ((_DWORD)v24)
    return v24;
  if (!v33 || v23)
  {
LABEL_37:
    v24 = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("ResolutionCap"));
    if (!(_DWORD)v24)
      goto LABEL_38;
    return v24;
  }
LABEL_38:
  v26 = v7 == v21 && v6 == v22;
  if (v26)
  {
    v24 = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("ResolutionFloor"));
    if ((_DWORD)v24)
      return v24;
  }
  if (v23)
  {
    GlobalSingleton = 0;
  }
  else
  {
    v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v33)
      v28 = FigAlternateResolutionCapFilterCreate(v27, CFSTR("ResolutionCap"), 700, &cf, ResolutionCapForFilter, v5);
    else
      v28 = FigAlternateDisplaySizeFilterCreate(v27, &cf, ResolutionCapForFilter, v5);
    GlobalSingleton = v28;
    v29 = cf;
    if ((_DWORD)v28)
      goto LABEL_54;
    GlobalSingleton = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  if (v26)
    return GlobalSingleton;
  v30 = FigAlternateResolutionFloorFilterCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &cf, v6, v7);
  v29 = cf;
  if ((_DWORD)v30)
  {
    GlobalSingleton = v30;
    if (!cf)
      return GlobalSingleton;
    goto LABEL_55;
  }
  GlobalSingleton = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf);
  v29 = cf;
LABEL_54:
  if (v29)
LABEL_55:
    CFRelease(v29);
  return GlobalSingleton;
}

uint64_t fpfsi_CreateAndAddCombinedAudioPreferenceFilter(uint64_t a1)
{
  uint64_t DerivedStorage;
  int v3;
  uint64_t v4;
  BOOL v5;
  CFTypeRef v6;
  uint64_t v7;
  double *v8;
  double ResolutionCapForFilter;
  double v10;
  double v11;
  double width;
  double height;
  uint64_t v14;
  uint64_t AllocatorForMedia;
  double v16;
  double v17;
  BOOL v18;
  int v19;
  CGFloat v20;
  uint64_t v21;
  const __CFAllocator *v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  int v26;
  const void *v27;
  const __CFArray *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, BOOL, _QWORD);
  CFNumberRef v33;
  uint64_t v34;
  void (*v35)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD, uint64_t, CGSize *);
  CGSize size;
  double v45;
  CFTypeRef v46;
  char v47;
  __int16 v48;
  char v49;
  CFTypeRef v50;
  CFTypeRef cf;
  CFTypeRef v52;
  const void *v53;
  int AudioDeviceMaxPhysicalOutputChannelCount;
  CFDictionaryRef dict;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  AudioDeviceMaxPhysicalOutputChannelCount = 0;
  v52 = 0;
  v53 = 0;
  v50 = 0;
  cf = 0;
  v49 = 0;
  v48 = 0;
  if (*(_BYTE *)(DerivedStorage + 771))
    v3 = 1836019574;
  else
    v3 = 1936684398;
  v47 = 0;
  if (!*(_QWORD *)(DerivedStorage + 40))
  {
    v39 = 0;
LABEL_70:
    v20 = 0.0;
    goto LABEL_53;
  }
  v4 = fpfsi_CreateAudioSpatialSourcesArray(a1, v3, (__CFArray **)&v50, &AudioDeviceMaxPhysicalOutputChannelCount, (uint64_t)&v47);
  if ((_DWORD)v4)
  {
    v39 = v4;
    goto LABEL_70;
  }
  if (FigCFArrayContainsInt32())
    v5 = 1;
  else
    v5 = FigCFArrayContainsInt32() != 0;
  v6 = v50;
  v7 = CMBaseObjectGetDerivedStorage();
  dict = 0;
  v8 = (double *)MEMORY[0x1E0C9D820];
  size = (CGSize)*MEMORY[0x1E0C9D820];
  ResolutionCapForFilter = fpfsi_GetResolutionCapForFilter(a1, 0);
  v11 = v10;
  if (fpfsi_ResolveSpatialAudioResolutionCutoffSize_onceToken != -1)
    dispatch_once(&fpfsi_ResolveSpatialAudioResolutionCutoffSize_onceToken, &__block_literal_global_54);
  width = *(double *)&fpfsi_ResolveSpatialAudioResolutionCutoffSize_defaultSpatialAudioResolutionCutoffSize_0;
  height = *(double *)&fpfsi_ResolveSpatialAudioResolutionCutoffSize_defaultSpatialAudioResolutionCutoffSize_1;
  v14 = *(_QWORD *)(v7 + 40);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigAlternateSelectionBossCopyProperty(v14, CFSTR("HighestVideoResolutionAlternateWithMultiChannelAudio"), AllocatorForMedia, &dict);
  if (CGSizeMakeWithDictionaryRepresentation(dict, &size) && size.width < width && size.height < height)
  {
    height = size.height;
    width = size.width;
  }
  v17 = *v8;
  v16 = v8[1];
  if (dict)
    CFRelease(dict);
  v18 = v17 != ResolutionCapForFilter;
  if (v16 != v11)
    v18 = 1;
  if (ResolutionCapForFilter >= width)
    v18 = 0;
  if (!v18 || v11 >= height)
  {
    ResolutionCapForFilter = width;
    v11 = height;
  }
  if (!AudioDeviceMaxPhysicalOutputChannelCount)
    AudioDeviceMaxPhysicalOutputChannelCount = fpfs_GetAudioDeviceMaxPhysicalOutputChannelCount(a1, 0, 0);
  v19 = *(_DWORD *)(DerivedStorage + 560);
  if (v47)
  {
    if ((v19 & 2) != 0)
      goto LABEL_29;
LABEL_28:
    v20 = 0.0;
    goto LABEL_30;
  }
  v47 = v19 & 1;
  if ((v19 & 2) == 0)
    goto LABEL_28;
LABEL_29:
  size.width = 0.0;
  v21 = CMBaseObjectGetDerivedStorage();
  v20 = 0.0;
  if (*(_QWORD *)(v21 + 504))
    goto LABEL_30;
  v20 = *(double *)(v21 + 536);
  if (v20 == 0.0)
    goto LABEL_30;
  v41 = FigGetAllocatorForMedia();
  v42 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v42)
    goto LABEL_28;
  v43 = *(void (**)(_QWORD, _QWORD, uint64_t, CGSize *))(v42 + 48);
  if (!v43)
    goto LABEL_28;
  v43(*(_QWORD *)&v20, *MEMORY[0x1E0D49560], v41, &size);
  v20 = size.width;
LABEL_30:
  v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
  FPSupport_CreateMaxSampleRateDictonary(v22, AudioDeviceMaxPhysicalOutputChannelCount, *(const __CFData **)&v20, (CFMutableDictionaryRef *)&v52, *(double *)(DerivedStorage + 2512));
  v23 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v23 + 536))
    v24 = *(_BYTE *)(v23 + 562) != 0;
  else
    v24 = 0;
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v25 = FigCFEqual();
  fpfsi_CopyCacheRefFromPump(a1, &v53);
  v26 = FigGetAllocatorForMedia();
  v27 = v53;
  v28 = *(const __CFArray **)(DerivedStorage + 1784);
  LOBYTE(size.width) = v5;
  *(_WORD *)((char *)&size.width + 1) = v48;
  BYTE3(size.width) = v49;
  HIDWORD(size.width) = v3;
  size.height = ResolutionCapForFilter;
  v45 = v11;
  v46 = v6;
  v29 = FigAlternateCombinedAudioPreferenceFilterCreate(v26, 0, AudioDeviceMaxPhysicalOutputChannelCount, v52, (uint64_t)&size, v24 | (v25 << 24), v47, (uint64_t)v53, v28, &cf);
  if ((_DWORD)v29 || (v29 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf), (_DWORD)v29))
  {
    v39 = v29;
    if (v27)
LABEL_52:
      CFRelease(v27);
  }
  else
  {
    v30 = *(_DWORD *)(DerivedStorage + 560);
    v31 = *(_QWORD *)(DerivedStorage + 2536);
    if (v31)
    {
      v32 = *(void (**)(uint64_t, __CFString *, __CFString *, BOOL, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
      if (v32)
        v32(v31, CFSTR("playerStats"), CFSTR("AuScaleToLLS"), (v30 & 1) == 0, 0);
    }
    if ((v30 & 1) != 0)
    {
      v33 = 0;
    }
    else
    {
      v33 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, (const void *)(DerivedStorage + 2512));
      v34 = *(_QWORD *)(DerivedStorage + 2536);
      if (v34)
      {
        v35 = *(void (**)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 48);
        if (v35)
          v35(v34, CFSTR("playerStats"), CFSTR("AuClientMaxSR"), v33, 0);
      }
    }
    if (*(_BYTE *)(DerivedStorage + 886))
      v36 = (4 * (*(_BYTE *)(DerivedStorage + 885) != 0)) | 3u;
    else
      v36 = 4 * (*(_BYTE *)(DerivedStorage + 885) != 0);
    v37 = *(_QWORD *)(DerivedStorage + 2536);
    if (v37)
    {
      v38 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v38)
        v38(v37, CFSTR("playerStats"), CFSTR("AuSpatialFormats"), v36, 0);
    }
    if (v33)
      CFRelease(v33);
    v39 = 0;
    if (v27)
      goto LABEL_52;
  }
LABEL_53:
  if (cf)
    CFRelease(cf);
  if (v20 != 0.0)
    CFRelease(*(CFTypeRef *)&v20);
  if (v52)
    CFRelease(v52);
  if (v50)
    CFRelease(v50);
  return v39;
}

double fpfsi_GetResolutionCapForFilter(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _OWORD *v4;
  double v5;
  double v6;
  _BOOL8 v7;
  double v8;
  double v9;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  double *v18;
  double *v19;
  BOOL v20;
  uint64_t *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  CFIndex v33;
  int v34;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  uint64_t (*v39)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  int v40;
  CFNumberRef v41;
  float v43;
  double v44;
  double v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  void (*v49)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v50;
  void (*v51)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v52;
  void (*v53)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v54;
  void (*v55)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v56;
  void (*v57)(uint64_t, __CFString *, __CFString *, _BOOL8, _QWORD);
  double v59;
  double v60;
  uint64_t valuePtr;
  CFNumberRef number[16];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = (_OWORD *)MEMORY[0x1E0C9D820];
  v5 = *MEMORY[0x1E0C9D820];
  v6 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v7 = *(double *)(DerivedStorage + 2488) != v6 || *(double *)(DerivedStorage + 2480) != *MEMORY[0x1E0C9D820];
  if (v7)
    v8 = *(double *)(DerivedStorage + 2488);
  else
    v8 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  if (v7)
    v9 = *(double *)(DerivedStorage + 2480);
  else
    v9 = *MEMORY[0x1E0C9D820];
  if (v9 != v5 || v8 != v6)
  {
    v59 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    v60 = *MEMORY[0x1E0C9D820];
    goto LABEL_91;
  }
  v11 = v3;
  v12 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v13 = *MEMORY[0x1E0C9D820];
  if (!CelestialIsAppleTV())
  {
    v12 = v6;
    v13 = v5;
    if (!fpfs_isExternalVideoOutput())
    {
      *(_OWORD *)number = *v4;
      valuePtr = 0;
      CelestialGetModelSpecificResolutionCap();
      v13 = *(double *)number;
      v12 = *(double *)&number[1];
      v14 = *(_QWORD *)(DerivedStorage + 2536);
      if (v14)
      {
        v15 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v15)
          v15(v14, CFSTR("playerStats"), CFSTR("DesReWd"), (uint64_t)*(double *)number, 0);
        v16 = *(_QWORD *)(DerivedStorage + 2536);
        if (v16)
        {
          v17 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v17)
            v17(v16, CFSTR("playerStats"), CFSTR("DesReHt"), (uint64_t)*(double *)&number[1], 0);
        }
      }
    }
  }
  v18 = (double *)(DerivedStorage + 744);
  v19 = (double *)(DerivedStorage + 752);
  if (*(_BYTE *)(v11 + 462))
  {
    v19 = (double *)(v11 + 472);
    v18 = (double *)(v11 + 464);
  }
  v60 = *v18;
  v59 = *v19;
  v20 = *v18 == v5 && v59 == v6;
  v21 = &sFigCDSNodeProtocolID;
  if (!v20)
  {
    v22 = v13 != v5;
    if (v12 != v6)
      v22 = 1;
    if (v60 <= v13)
      v22 = 0;
    v23 = v59 > v12;
    if (v22 && v23)
      v8 = v12;
    else
      v8 = v59;
    if (v22 && v23)
      v9 = v13;
    else
      v9 = v60;
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v21 = &sFigCDSNodeProtocolID;
    }
  }
  if (v9 == v5 && v8 == v6)
  {
    if (*(double *)(v11 + 440) == v5 && *(double *)(v11 + 448) == v6)
    {
      v27 = *(const __CFArray **)(v11 + 432);
      if (!v27 || !CFArrayGetCount(v27))
        goto LABEL_89;
    }
    v28 = CMBaseObjectGetDerivedStorage();
    v29 = CMBaseObjectGetDerivedStorage();
    v30 = v6;
    v31 = v5;
    if (!*(_QWORD *)(v29 + 40))
      goto LABEL_74;
    v30 = v6;
    v31 = v5;
    if (!*(_BYTE *)(v29 + 48))
      goto LABEL_74;
    v30 = v6;
    v31 = v5;
    if (!*(_BYTE *)(v29 + 49))
      goto LABEL_74;
    v30 = v6;
    v31 = v5;
    if (*(float *)(v28 + 3172) == 0.0)
      goto LABEL_74;
    v32 = CMBaseObjectGetDerivedStorage();
    v33 = 0;
    v34 = 0;
    LODWORD(valuePtr) = 0;
    while (1)
    {
      Count = *(const __CFArray **)(v32 + 432);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (v33 >= (uint64_t)Count)
      {
        v30 = v6;
        v31 = v5;
        v21 = &sFigCDSNodeProtocolID;
        if (v34)
        {
          v43 = *(float *)(v28 + 3172);
          v31 = sqrtf(v43 * (float)v34);
          v30 = sqrtf((float)v34 / v43);
        }
LABEL_74:
        v44 = *(double *)(v11 + 440);
        v45 = *(double *)(v11 + 448);
        if (v30 * v31 > v44 * v45)
          v8 = v30;
        else
          v8 = *(double *)(v11 + 448);
        if (v30 * v31 > v44 * v45)
          v9 = v31;
        else
          v9 = *(double *)(v11 + 440);
        if ((v13 != v5 || v12 != v6) && v9 * v8 > v12 * v13)
        {
          v8 = v12;
          v9 = v13;
        }
        v46 = *((_DWORD *)v21 + 674);
        if (v30 * v31 > v44 * v45)
        {
          if (v46)
            goto LABEL_88;
        }
        else if (v46)
        {
LABEL_88:
          v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_89:
        if (v9 == v5 && v8 == v6)
        {
          v8 = v12;
          v9 = v13;
        }
        goto LABEL_91;
      }
      number[0] = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v32 + 432), v33);
      AllocatorForMedia = FigGetAllocatorForMedia();
      CMBaseObject = FigVideoTargetGetCMBaseObject(ValueAtIndex);
      v39 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
      if (!v39)
        goto LABEL_68;
      v40 = v39(CMBaseObject, CFSTR("DesiredPixelCount"), AllocatorForMedia, number);
      v41 = number[0];
      if (!v40 && number[0] != 0)
        break;
LABEL_69:
      if (v41)
        CFRelease(v41);
      ++v33;
    }
    CFNumberGetValue(number[0], kCFNumberSInt32Type, &valuePtr);
    if ((int)valuePtr > v34)
      v34 = valuePtr;
LABEL_68:
    v41 = number[0];
    goto LABEL_69;
  }
LABEL_91:
  if (a2)
    *a2 = v7;
  v48 = *(_QWORD *)(DerivedStorage + 2536);
  if (v48)
  {
    v49 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v49)
      v49(v48, CFSTR("playerStats"), CFSTR("DisReHt"), (uint64_t)v59, 0);
    v50 = *(_QWORD *)(DerivedStorage + 2536);
    if (v50)
    {
      v51 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v51)
        v51(v50, CFSTR("playerStats"), CFSTR("DisReWd"), (uint64_t)v60, 0);
      v52 = *(_QWORD *)(DerivedStorage + 2536);
      if (v52)
      {
        v53 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v53)
          v53(v52, CFSTR("playerStats"), CFSTR("CapReHt"), (uint64_t)v8, 0);
        v54 = *(_QWORD *)(DerivedStorage + 2536);
        if (v54)
        {
          v55 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v55)
            v55(v54, CFSTR("playerStats"), CFSTR("CapReWd"), (uint64_t)v9, 0);
          v56 = *(_QWORD *)(DerivedStorage + 2536);
          if (v56)
          {
            v57 = *(void (**)(uint64_t, __CFString *, __CFString *, _BOOL8, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 56);
            if (v57)
              v57(v56, CFSTR("playerStats"), CFSTR("ReCapEnforced"), v7, 0);
          }
        }
      }
    }
  }
  return v9;
}

BOOL fpfs_shouldApplyResolutionCapForBuiltinDisplay()
{
  return !CelestialIsAppleTV() && fpfs_isExternalVideoOutput() == 0;
}

uint64_t fpfs_isExternalVideoOutput()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  CFIndex v2;
  const void *ValueAtIndex;
  const __CFArray *v4;
  uint64_t IsExternalDisplay;
  CFStringRef v6;
  CFStringRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 672);
  if (!v1)
  {
    IsExternalDisplay = 0;
    goto LABEL_12;
  }
  if (CFArrayGetCount(v1) < 1)
  {
    IsExternalDisplay = 0;
LABEL_12:
    v6 = FPSupport_CopyMainDisplayCAName();
    if (v6)
    {
      v7 = v6;
      IsExternalDisplay = FPSupport_IsExternalDisplay(v6);
      CFRelease(v7);
    }
    goto LABEL_14;
  }
  v2 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 672), v2);
    if (FPSupport_IsExternalDisplay(ValueAtIndex))
      break;
    v4 = *(const __CFArray **)(DerivedStorage + 672);
    if (v4)
    {
      if (CFArrayGetCount(v4) > ++v2)
        continue;
    }
    IsExternalDisplay = 0;
    goto LABEL_11;
  }
  IsExternalDisplay = 1;
LABEL_11:
  if (!ValueAtIndex)
    goto LABEL_12;
LABEL_14:
  if (!(_DWORD)IsExternalDisplay)
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 462);
  return IsExternalDisplay;
}

uint64_t fpfsi_CreateAudioSpatialSourcesArray(uint64_t a1, int a2, __CFArray **a3, int *a4, uint64_t a5)
{
  _BYTE *DerivedStorage;
  uint64_t v10;
  const __CFArray *Value;
  const __CFArray *v12;
  CFTypeID v13;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  __CFArray *v16;
  _BOOL4 v17;
  uint64_t v18;
  CFIndex v19;
  int v20;
  const __CFNumber *ValueAtIndex;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int *v31;
  const void *v32;
  int valuePtr;
  CFDictionaryRef theDict;
  unsigned __int8 v35;
  int v36;
  CFTypeRef cf;

  v36 = 0;
  v35 = 0;
  theDict = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
    goto LABEL_56;
  v10 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 536);
  if (!v10)
    return 0;
  if (FPSupport_CreateAudioSessionSpatializationCapabilities(v10, a2, (CFTypeRef *)&theDict))
  {
LABEL_56:
    v18 = 0;
    goto LABEL_57;
  }
  if (!theDict)
    return 0;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SpatialCapabilitiesKey_spatialAudioSources"));
  if (!Value)
    goto LABEL_56;
  v12 = Value;
  v13 = CFGetTypeID(Value);
  if (v13 != CFArrayGetTypeID())
    goto LABEL_56;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v16 = Mutable;
    FigCFDictionaryGetBooleanIfPresent();
    v31 = a4;
    if (DerivedStorage[885] | v35)
    {
      CMBaseObjectGetDerivedStorage();
      v17 = FigCFEqual() || FigCFEqual() || FigCFEqual() != 0;
    }
    else
    {
      v17 = 0;
    }
    if (CFArrayGetCount(v12) >= 1)
    {
      v19 = 0;
      v20 = 0;
      v32 = (const void *)*MEMORY[0x1E0C9AE40];
      do
      {
        valuePtr = 1064530531;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v12, v19);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr <= 1835824232)
        {
          if (valuePtr != 1064530531)
          {
            if (valuePtr == 1651076712 && v17)
              CFArrayAppendValue(v16, ValueAtIndex);
            goto LABEL_49;
          }
          if ((DerivedStorage[560] & 8) != 0)
          {
            v28 = CMBaseObjectGetDerivedStorage();
            if (!*(_QWORD *)(v28 + 536))
            {
              FigCFArrayAppendInt32();
LABEL_48:
              FigCFArrayAppendInt32();
              v36 = 16;
              goto LABEL_49;
            }
            v29 = *(unsigned __int8 *)(v28 + 562);
            FigCFArrayAppendInt32();
            if (!v29)
              goto LABEL_48;
          }
        }
        else if (valuePtr == 1836020596)
        {
          if (!v20)
          {
            if (!(DerivedStorage[886] | v35))
              goto LABEL_46;
            CFArrayAppendValue(v16, ValueAtIndex);
LABEL_41:
            v20 = 1;
          }
        }
        else
        {
          if (valuePtr != 1836020523)
          {
            if (valuePtr == 1835824233 && v17)
            {
              CFArrayAppendValue(v16, ValueAtIndex);
              FigCFDictionaryGetInt32IfPresent();
            }
            goto LABEL_49;
          }
          if (v20)
            v23 = 0;
          else
            v23 = v17;
          if (v23)
          {
            v24 = CMBaseObjectGetDerivedStorage();
            cf = v32;
            v25 = *(_QWORD *)(v24 + 40);
            if (!v25)
              goto LABEL_46;
            v26 = FigGetAllocatorForMedia();
            if (FigAlternateSelectionBossCopyProperty(v25, CFSTR("HasPlayableMultiChannelAudio"), v26, (const __CFArray **)&cf))goto LABEL_46;
            v27 = FigCFEqual();
            if (cf)
              CFRelease(cf);
            if (!v27)
            {
LABEL_46:
              v20 = 0;
              goto LABEL_49;
            }
            FigCFArrayAppendInt32();
            goto LABEL_41;
          }
        }
LABEL_49:
        ++v19;
      }
      while (v19 < CFArrayGetCount(v12));
    }
    if (v31)
      *v31 = v36;
    if (a5)
      FigCFDictionaryGetBooleanIfPresent();
    if (a3)
    {
      v18 = 0;
      *a3 = v16;
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  v18 = FigSignalErrorAt();
LABEL_57:
  if (theDict)
    CFRelease(theDict);
  return v18;
}

uint64_t fpfsi_CopyCacheRefFromPump(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, __CFString *, uint64_t, uint64_t *);
  BOOL v8;
  uint64_t v9;

  v9 = 0;
  result = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(result + 928);
  if (v4)
  {
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBaseObject = FigBytePumpGetFigBaseObject(v4);
    result = CMBaseObjectGetVTable();
    v7 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(result + 8) + 48);
    if (v7)
    {
      result = v7(FigBaseObject, CFSTR("FBP_SegmentCache"), AllocatorForMedia, &v9);
      if (v9)
      {
        if ((_DWORD)result)
          v8 = (_DWORD)result == -12783;
        else
          v8 = 1;
        if (v8)
          *a2 = v9;
      }
    }
  }
  return result;
}

void fpfs_TimeToPausePlaybackTimerProc(uint64_t a1)
{
  CFTypeRef v1;
  id v2;
  CFTypeRef v3;
  uint64_t DerivedStorage;
  CMTime *v5;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  CMTime v8;
  CMTime time2;
  CMTime lhs;
  CMTime rhs;
  CMTime fireTime;
  CMTime v13;
  CFTypeRef v14;
  CFTypeRef v15;

  v14 = 0;
  v15 = 0;
  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &v15, &v14))
  {
    v1 = v15;
    v2 = *(id *)(CMBaseObjectGetDerivedStorage() + 776);
    voucher_adopt();
    v3 = v14;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if ((*(_BYTE *)(DerivedStorage + 1452) & 1) != 0)
    {
      v5 = (CMTime *)(DerivedStorage + 1440);
      memset(&fireTime, 0, sizeof(fireTime));
      fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&fireTime);
      fpfsi_EstimateTimeToPause((uint64_t)v3, &rhs);
      lhs = *v5;
      CMTimeSubtract(&v13, &lhs, &rhs);
      lhs = v13;
      *(_OWORD *)&v8.value = kTimerVariability;
      v8.epoch = 0;
      CMTimeSubtract(&time2, &lhs, &v8);
      lhs = fireTime;
      if (CMTimeCompare(&lhs, &time2) < 0)
      {
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        fireTime = *v5;
        FigCFDictionarySetCMTime();
        fpfs_EnqueueNotification(v1, CFSTR("AlmostReachedTimeToPausePlayback"), v3, Mutable);
      }
    }
    fpfs_HandleReachingTimeToPausePlayback(v3);
  }
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
}

CMTime *fpfsi_EstimateTimeToPause@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t RenderingTrackofType;
  uint64_t v6;
  uint64_t v7;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  const __CFDictionary *v11;
  uint64_t v12;
  const opaqueCMFormatDescription *v13;
  const AudioStreamBasicDescription *StreamBasicDescription;
  CMTime v16;
  CMTime time;
  CMTime lhs;
  CMTime rhs;
  CMTime time1;
  CFTypeRef cf;
  CMTime v22;
  CMTime v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v23, 0, sizeof(v23));
  CMTimeMake(&v23, 48, 1000);
  v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  RenderingTrackofType = fpfs_FirstRenderingTrackofType(a1, 1986618469);
  if (RenderingTrackofType)
  {
    v6 = *(_QWORD *)(RenderingTrackofType + 96);
    if (v6)
    {
      cf = 0;
      v7 = *(_QWORD *)(v6 + 32);
      AllocatorForMedia = FigGetAllocatorForMedia();
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
      v10 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v10)
      {
        v10(FigBaseObject, CFSTR("NextNonJerkyStopTime"), AllocatorForMedia, &cf);
        v11 = (const __CFDictionary *)cf;
      }
      else
      {
        v11 = 0;
      }
      memset(&time1, 0, sizeof(time1));
      CMTimeMakeFromDictionary(&time1, v11);
      if (cf)
        CFRelease(cf);
      if ((time1.flags & 0x1D) == 1)
      {
        fpfs_GetTime(DerivedStorage, (uint64_t)&rhs);
        lhs = time1;
        CMTimeSubtract(&v22, &lhs, &rhs);
        time = v22;
        CMTimeMultiply(&lhs, &time, 2);
        v22 = lhs;
      }
    }
  }
  v12 = fpfs_FirstRenderingTrackofType(a1, 1936684398);
  if (v12)
  {
    v13 = *(const opaqueCMFormatDescription **)(v12 + 40);
    if (v13)
    {
      StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(v13);
      if (StreamBasicDescription)
      {
        CMTimeMake(&time1, StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
        v23 = time1;
        CMTimeMake(&v16, 25, 1000);
        lhs = v23;
        CMTimeAdd(&time1, &lhs, &v16);
        v23 = time1;
      }
    }
  }
  time1 = v23;
  lhs = v22;
  return CMTimeMaximum(a2, &time1, &lhs);
}

void fpfsi_clearCoordinatedPlaybackSynchronizationTimebase()
{
  uint64_t DerivedStorage;
  const void *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 568);
  if (v1)
  {
    if (!dword_1EE2A2A88
      || (os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT),
          fig_log_call_emit_and_clean_up_after_send_and_compose(),
          (v1 = *(const void **)(DerivedStorage + 568)) != 0))
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 568) = 0;
    }
  }
}

uint64_t fpfs_PlayQueueCallForEachItem(uint64_t a1, uint64_t (*a2)(const __CFArray *, uint64_t), uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFArray *Next;
  const __CFArray *v8;
  uint64_t v9;
  const __CFArray *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294954436;
  v6 = DerivedStorage;
  Next = fpfs_getNext(DerivedStorage, 0);
  if (!Next)
    return 0;
  v8 = Next;
  do
  {
    v9 = a2(v8, a3);
    v10 = fpfs_getNext(v6, v8);
    if ((_DWORD)v9)
      break;
    v8 = v10;
  }
  while (v10);
  return v9;
}

uint64_t fpfs_clearCoordinatedPlaybackSynchronizationTimebaseForPlayQueueItemsApply(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a2 && !*(_BYTE *)(a2 + 8))
  {
    if (*(_QWORD *)a2 == a1)
      *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    fpfsi_clearCoordinatedPlaybackSynchronizationTimebase();
  }
  return 0;
}

void fpfs_PullNextItem(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 24), a1, (dispatch_function_t)fpfs_PullNextCallback);
}

uint64_t fpfs_applySoftwareVolume(float a1, float a2, uint64_t a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (uint64_t)fpfs_getNext(DerivedStorage, 0);
  if (result)
  {
    result = fpfs_FirstRenderingTrackofType(result, 1936684398);
    if (result)
    {
      result = fpfs_applySoftwareVolumeToTrack(result, 1, a1, a2);
      if (a2 > 0.0)
      {
        if (a4)
        {
          if (!(_DWORD)result)
            return usleep((a2 * 1000.0 * 1000.0));
        }
      }
    }
  }
  return result;
}

uint64_t fpfsi_applySoftwareVolume(float a1, float a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
  if (!v7)
    return 0;
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 96);
    if (v8 && *(_DWORD *)(v7 + 32) == 1936684398)
    {
      v9 = v7;
      while (1)
      {
        v9 = *(_QWORD *)(v9 + 8);
        if (!v9)
          break;
        if (*(_QWORD *)(v9 + 96) == v8)
          goto LABEL_9;
      }
      result = fpfs_applySoftwareVolumeToTrack(v7, a4, a1, a2);
      if ((_DWORD)result)
        return result;
    }
LABEL_9:
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      return 0;
  }
}

void fpfs_PullNextCallback(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *ValueAtIndex;
  uint64_t v6;
  double Current;
  uint64_t v8;
  double v9;
  double v10;
  void (*v11)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t UpTimeNanoseconds;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v17;
  const __CFArray *v18;
  uint64_t GlobalSingleton;
  _QWORD *v20;
  char v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (!*(_BYTE *)(DerivedStorage + 51))
  {
    v21 = 0;
    v3 = CMBaseObjectGetDerivedStorage();
    v20 = 0;
    if (!*(_QWORD *)(v3 + 80))
    {
      v4 = v3;
      if (*(_DWORD *)(v3 + 32) && CFArrayGetCount(*(CFArrayRef *)(v3 + 72)) >= 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 72), 0);
        v6 = CMBaseObjectGetDerivedStorage();
        *(_QWORD *)(v4 + 80) = CFRetain(ValueAtIndex);
        Current = CFAbsoluteTimeGetCurrent();
        v8 = *(_QWORD *)(v6 + 2536);
        if (v8)
        {
          v9 = Current;
          v10 = *(double *)(v6 + 2024);
          v11 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v11)
            v11(v8, CFSTR("playerStats"), CFSTR("TimeItemToCurrent"), (uint64_t)((v9 - v10) * 1000.0), 0);
        }
        if (*(_QWORD *)(v6 + 2064))
        {
          if (!*(_BYTE *)(v6 + 2073))
          {
            UpTimeNanoseconds = FigGetUpTimeNanoseconds();
            v13 = *(_QWORD *)(v6 + 2536);
            if (v13)
            {
              v14 = UpTimeNanoseconds;
              v15 = *(_QWORD *)(v6 + 2064);
              v16 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
              if (v16)
                v16(v13, CFSTR("startupStats"), CFSTR("tfac2ICurrent"), (v14 - v15) / 0xF4240uLL, 0);
            }
          }
        }
        fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(v6, *(unsigned __int8 *)(v4 + 160));
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v4 + 72), 0);
        fpfs_EnqueueNotification(a1, CFSTR("ItemBecameCurrent"), ValueAtIndex, 0);
      }
      if (*(_QWORD *)(v4 + 80))
      {
        v17 = 0;
      }
      else
      {
        GlobalSingleton = FigPlayerResourceArbiterGetGlobalSingleton(&v20);
        if (!(_DWORD)GlobalSingleton)
          GlobalSingleton = FigPlayerResourceArbiterSetSpecifierForConsumer(v20, 0);
        v17 = GlobalSingleton;
      }
      if ((_DWORD)v17)
      {
        v18 = *(const __CFArray **)(DerivedStorage + 80);
        if (v18)
          fpfs_StopPlayingItemWithOSStatus(DerivedStorage, v18, v17);
      }
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

void fpfs_StopPlayingItemWithOSStatus(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  CFTypeRef cf;

  cf = 0;
  FigCreateErrorForOSStatus(a3, (CFErrorRef *)&cf);
  fpfs_StopPlayingItem(a1, a2, (__CFError *)cf);
  if (cf)
    CFRelease(cf);
}

uint64_t fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);

  v2 = *(_QWORD *)(result + 2536);
  if (v2)
  {
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 56);
    if (v4)
      return v4(v2, CFSTR("playerStats"), CFSTR("WaitToMinStall"), a2, 0);
  }
  return result;
}

uint64_t fpfs_updateClosedCaptionsDisplay(const void *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void **v11;
  const void *v12;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(unsigned __int8 *)(DerivedStorage + 209);
  result = FigRenderedLegibleOutputManagerIsSupported();
  if (!(_DWORD)result)
    return result;
  result = *(_QWORD *)(DerivedStorage + 80);
  if (result)
  {
    v7 = CMBaseObjectGetDerivedStorage();
    v8 = v7;
    if (*(_BYTE *)(DerivedStorage + 209) && !*(_BYTE *)(v7 + 531))
    {
      v5 = 1;
    }
    else
    {
      v5 = fpfs_IsClosedCaptioningSelected(v7, a2) != 0;
      if (!v8)
      {
LABEL_13:
        result = FigLegibleOutputManagerSetNonForcedEnabledForMediaType(*(dispatch_queue_t **)(v8 + 1856), 1668047728, v5);
        goto LABEL_14;
      }
    }
    v9 = *(_QWORD *)(v8 + 816);
    if (v9 && *(_QWORD *)(v9 + 32))
    {
      v10 = (uint64_t *)MEMORY[0x1E0C9AE40];
      if (v5)
        v10 = (uint64_t *)MEMORY[0x1E0C9AE50];
      fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v9, (uint64_t)CFSTR("DisplayClosedCaptions"), *v10);
    }
    goto LABEL_13;
  }
LABEL_14:
  if (v5 != *(unsigned __int8 *)(DerivedStorage + 210))
  {
    *(_BYTE *)(DerivedStorage + 210) = v5;
    v11 = (const void **)MEMORY[0x1E0C9AE40];
    if (v5)
      v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = *v11;
    FigPropertyStorageSetValue(*(_QWORD *)(DerivedStorage + 16), CFSTR("DisplayingClosedCaptions"), *v11);
    FPSupport_updateClosedCaptionLayer(DerivedStorage + 208, *(const __CFArray **)(DerivedStorage + 200));
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("CurrentDisplayingClosedCaptions"), v12);
    fpfs_EnqueueNotification(a1, CFSTR("DisplayingClosedCaptionsChanged"), a1, Mutable);
  }
  return result;
}

void fpfsi_MakeReadyForInspection(uint64_t a1, const __CFArray *a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  int v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef MutableCopy;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, _QWORD, uint64_t);
  CFRange v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(const void **)DerivedStorage;
  fpfs_LockMutexWithCaller(*(_QWORD *)DerivedStorage);
  if (!FigRetainProxyIsInvalidated())
  {
    v7 = *(unsigned __int8 *)(DerivedStorage + 460);
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v7)
      goto LABEL_5;
    if (!a2)
      goto LABEL_17;
    if (*(_QWORD *)(DerivedStorage + 2224))
    {
      Count = CFArrayGetCount(a2);
      if (Count >= 1)
      {
        v10 = Count;
        for (i = 0; i != v10; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
          v19.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 2224));
          v19.location = 0;
          if (CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 2224), v19, ValueAtIndex) < 0)
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 2224), ValueAtIndex);
        }
      }
      goto LABEL_17;
    }
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, a2);
    *(_QWORD *)(DerivedStorage + 2224) = MutableCopy;
    if (MutableCopy)
    {
LABEL_17:
      v15 = *(_DWORD *)(DerivedStorage + 456);
      if (v15 == 2)
        goto LABEL_21;
      if (v15)
        goto LABEL_5;
      FigRetainProxyRetain();
      v16 = *(_QWORD *)(DerivedStorage + 32);
      v17 = *(_QWORD *)(DerivedStorage + 16);
      v18 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (v18 && !v18(v16, fpfs_PumpTransferCallback, v17))
LABEL_21:
        *(_DWORD *)(DerivedStorage + 456) = 1;
      else
        FigRetainProxyRelease();
LABEL_5:
      if (a3)
        *a3 = v7;
LABEL_7:
      fpfs_UnlockAndPostNotificationsWithCaller(v6);
    }
  }
  FigSignalErrorAt();
  goto LABEL_7;
}

void fpfsi_NowReadyForInspection(const __CFArray *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const void *NotificationPayloadForProperties;
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v12;
  CFDictionaryRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFArray *Next;
  uint64_t v18;
  const __CFArray *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, __CFString *, _QWORD, CFNumberRef *);
  Float64 v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t (*v30)(uint64_t, float);
  uint64_t v31;
  CMTimeEpoch v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, CMTimeRange *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  CMTimeRange v42;
  os_log_type_t type;
  int v44;
  double valuePtr;
  CFNumberRef number;
  __int128 v47;
  CMTimeEpoch v48;
  CFTypeRef cf;
  CMTime duration;
  CMTimeRange start[2];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CFRetain(a1);
  if (!*(_BYTE *)(DerivedStorage + 460))
  {
    *(_BYTE *)(DerivedStorage + 460) = 1;
    NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(*(const void **)DerivedStorage, (uint64_t)a1, v4, v5, v6, v7, v8, v9, CFSTR("CurrentDuration"), 0);
    fpfs_PostNotificationWhenUnlocked(*(const void **)DerivedStorage, CFSTR("ReadyForInspection"), a1, NotificationPayloadForProperties);
    if (NotificationPayloadForProperties)
      CFRelease(NotificationPayloadForProperties);
    if (*(double *)(DerivedStorage + 2032) == 0.0)
      *(CFAbsoluteTime *)(DerivedStorage + 2032) = CFAbsoluteTimeGetCurrent();
    if (*(_QWORD *)(DerivedStorage + 2224))
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v12 = CFDictionaryCreate(AllocatorForMedia, (const void **)kFigPlaybackItemParameter_Properties, (const void **)(DerivedStorage + 2224), 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v12)
      {
        v13 = v12;
        fpfs_PostNotificationWhenUnlocked(*(const void **)DerivedStorage, CFSTR("ReadyForInspection"), a1, v12);
        CFRelease(v13);
      }
    }
    if (*(_BYTE *)(DerivedStorage + 461))
    {
      *(_BYTE *)(DerivedStorage + 461) = 0;
      fpfsi_postSelectedMediaOptionsDidChangeNotification(a1);
    }
  }
  v14 = CMBaseObjectGetDerivedStorage();
  v15 = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(v14 + 1848))
  {
    v16 = v15;
    Next = fpfs_getNext(v15, 0);
    if (Next)
    {
      v18 = 0;
      do
      {
        v19 = Next;
        if (Next != a1)
          v18 = (uint64_t)Next;
        Next = fpfs_getNext(v16, Next);
      }
      while (Next && v19 != a1);
      if (v19 == a1 && (!v18 || fpfsi_PumpHasEndedOrBufferedBeyondFwdEnd(v18)) && !*(_BYTE *)(v14 + 462))
      {
        v47 = *(_OWORD *)(DerivedStorage + 224);
        v48 = *(_QWORD *)(DerivedStorage + 240);
        if ((*(_BYTE *)(DerivedStorage + 332) & 1) != 0)
          v20 = 0;
        else
          v20 = *(_QWORD *)(DerivedStorage + 1592);
        if (*(_QWORD *)(DerivedStorage + 1592)
          || *(_QWORD *)(DerivedStorage + 1600)
          || (*(_BYTE *)(DerivedStorage + 236) & 1) != 0)
        {
          goto LABEL_39;
        }
        valuePtr = 0.0;
        number = 0;
        FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
        v22 = v21;
        v23 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
        if (v23)
        {
          if (!v23(v22, CFSTR("FBP_SpecifiedPreciseStartTime"), 0, &number) && number != 0)
          {
            CFNumberGetValue(number, kCFNumberDoubleType, &valuePtr);
            v25 = valuePtr;
            if (valuePtr >= 0.0)
            {
              if (dword_1EE2A2A88)
              {
                v44 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v25 = valuePtr;
              }
              CMTimeMakeWithSeconds(&start[0].start, v25, 1000);
              *(_OWORD *)(DerivedStorage + 1488) = *(_OWORD *)&start[0].start.value;
              *(_QWORD *)(DerivedStorage + 1504) = start[0].start.epoch;
            }
            CFRelease(number);
          }
        }
        if ((*(_BYTE *)(DerivedStorage + 1500) & 1) == 0)
        {
LABEL_39:
          v27 = 0;
        }
        else
        {
          v47 = *(_OWORD *)(DerivedStorage + 1488);
          v48 = *(_QWORD *)(DerivedStorage + 1504);
          *(_OWORD *)&start[0].start.value = *(_OWORD *)(DerivedStorage + 1488);
          start[0].start.epoch = *(_QWORD *)(DerivedStorage + 1504);
          fpfsi_setLastSeekTimeSet(DerivedStorage, (uint64_t)start);
          v39 = *(_OWORD *)(DerivedStorage + 1488);
          *(_OWORD *)(DerivedStorage + 344) = v39;
          v40 = *(_QWORD *)(DerivedStorage + 1504);
          *(_QWORD *)(DerivedStorage + 360) = v40;
          *(_OWORD *)(DerivedStorage + 368) = v39;
          *(_QWORD *)(DerivedStorage + 384) = v40;
          v27 = 1;
        }
        v28 = *(_QWORD *)(DerivedStorage + 928);
        if (v28)
        {
          v29 = *(float *)(v3 + 108);
          v30 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
          if (!v30)
            goto LABEL_63;
          v31 = v30(v28, v29);
          if ((_DWORD)v31)
            goto LABEL_64;
          v28 = *(_QWORD *)(DerivedStorage + 928);
        }
        *(_OWORD *)&start[0].start.value = v47;
        start[0].start.epoch = v48;
        v41 = *MEMORY[0x1E0CA2E18];
        *(_OWORD *)&duration.value = *MEMORY[0x1E0CA2E18];
        v32 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        duration.epoch = v32;
        CMTimeRangeMake(&v42, &start[0].start, &duration);
        v33 = *(_QWORD *)(DerivedStorage + 1600);
        v34 = *(uint64_t (**)(uint64_t, CMTimeRange *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
        if (v34)
        {
          start[0] = v42;
          v31 = v34(v28, start, v20, v33, v27, DerivedStorage + 944, DerivedStorage + 593);
          if (!(_DWORD)v31)
          {
            v35 = *(_QWORD *)(DerivedStorage + 1696);
            if (v35 && FigAlternateIsIFrameOnly(v35))
            {
              v36 = CMBaseObjectGetDerivedStorage();
              v37 = *(_QWORD *)(v36 + 1696);
              if (!v37 || !FigAlternateIsIFrameOnly(v37) || (*(_BYTE *)(v36 + 332) & 1) == 0)
                goto LABEL_54;
              if ((*(_BYTE *)(v36 + 1500) & 1) != 0)
              {
                *(_OWORD *)(v36 + 1488) = v41;
                *(_QWORD *)(v36 + 1504) = v32;
              }
              v38 = *(_DWORD *)(v36 + 2196);
              CMTimeMakeWithSeconds(&start[0].start, *(Float64 *)(v36 + 1544), 1000);
              duration = *(CMTime *)(v36 + 320);
              if (!fpfs_IssueSeekToPump((uint64_t)a1, &duration, MEMORY[0x1E0CA2E10], v38, 1, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], (__int128 *)&start[0].start.value))LABEL_54:fpfs_setIFrameOnlyRate((uint64_t)a1, *(float *)(v3 + 108));
            }
            *(_BYTE *)(DerivedStorage + 462) = 1;
            if (*(double *)(DerivedStorage + 2464) > 0.0
              && !*(_QWORD *)(DerivedStorage + 2472)
              && *(_QWORD *)(DerivedStorage + 40))
            {
              fpfsi_SetupIFramePrefetch((uint64_t)a1);
            }
            if (*(const __CFArray **)(v3 + 80) == a1)
              fpfsi_checkCoordinatedPlaybackCapability(a1);
            v31 = fpfsi_EnsureVenueDescriptionMetadataSupplierIfNecessary((uint64_t)a1);
            if (!(_DWORD)v31)
              goto LABEL_66;
          }
LABEL_64:
          FigCreateErrorForOSStatus(v31, (CFErrorRef *)&cf);
          fpfsi_NotReadyForInspection(a1, (uint64_t)cf);
          if (cf)
            CFRelease(cf);
          goto LABEL_66;
        }
LABEL_63:
        v31 = 4294954514;
        goto LABEL_64;
      }
    }
  }
LABEL_66:
  CFRelease(a1);
}

uint64_t fpfsi_ResumeAllWaitingVideoTracks(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  CMTime v8;
  opaqueCMSampleBuffer *refcon;
  CMTime time1;
  CMTime v11;

  result = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(result + 1040);
  if (v3)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(v3 + 8);
      if (*(_DWORD *)(v3 + 32) == 1986618469 && *(_DWORD *)(v3 + 152) == 5)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v7 = CMBaseObjectGetDerivedStorage();
        memset(&v11, 0, sizeof(v11));
        fpfs_GetTime(v7, (uint64_t)&v11);
        refcon = 0;
        result = fpfs_CanRenderVideo(DerivedStorage, a1);
        if ((_DWORD)result)
        {
          if (*(_DWORD *)(v3 + 32) == 1986618469 && *(_DWORD *)(v3 + 152) == 5)
          {
            if (*(float *)(DerivedStorage + 108) >= 0.0
              && *(_BYTE *)(v3 + 182)
              && (*(_BYTE *)(v3 + 228) & 1) != 0
              && (time1 = v11, v8 = *(CMTime *)(v3 + 216), CMTimeCompare(&time1, &v8) >= 1))
            {
              result = fpfs_DeleteTrack(a1);
            }
            else
            {
              v8 = v11;
              fpfsi_PrepareTrackForReplay(v3, (__int128 *)&v8.value, (uint64_t)&time1);
              CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v3 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetFirstNonMarkerSBuf, &refcon);
              result = (uint64_t)refcon;
              if (refcon)
              {
                result = fpfs_IsVideoSync(refcon);
                if ((_DWORD)result)
                {
                  CMSampleBufferGetOutputPresentationTimeStamp(&v8, refcon);
                  *(CMTime *)(v3 + 272) = v8;
                  if (!*(_QWORD *)(v3 + 96))
                    fpfs_PreallocateVideoRendering((uint64_t *)v3);
                  result = fpfs_CheckVideoSyncQueue(v3, 0);
                  if ((_DWORD)result)
                    result = fpfs_FinishVideoSync((const __CFArray **)v3);
                }
              }
            }
          }
        }
      }
      if (!v5)
        break;
      v3 = v5;
    }
    while (*(_QWORD *)(v4 + 1040));
  }
  return result;
}

uint64_t fpfs_ResolveAllWaitingTracks(const __CFArray *a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  CMTimeEpoch v15;
  uint64_t v16;
  opaqueCMSampleBuffer *Head;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v19;
  unsigned int v20;
  const char *v21;
  const __CFArray *v22;
  const char *v23;
  uint64_t v24;
  Float64 Seconds;
  Float64 v26;
  CMTimeEpoch v27;
  uint64_t v28;
  CMTimeFlags v29;
  CMTimeFlags v30;
  CMTimeEpoch v31;
  uint64_t v32;
  opaqueCMSampleBuffer *v33;
  uint64_t v34;
  _OWORD *v35;
  NSObject *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  Float64 v42;
  Float64 v43;
  uint64_t v44;
  CMTimeFlags v45;
  CMTimeEpoch v46;
  CMTimeValue v47;
  __int128 v48;
  int v49;
  CMTimeEpoch v51;
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  const char *v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  opaqueCMSampleBuffer *v59;
  CMTimeValue v60;
  CMTimeEpoch v61;
  CMTimeFlags v62;
  int v63;
  NSObject *v64;
  unsigned int v65;
  unsigned int v66;
  const void *v67;
  const char *v68;
  uint64_t v69;
  Float64 v70;
  Float64 v71;
  int v72;
  CMTimeEpoch v73;
  CMTimeEpoch v74;
  CMTimeFlags v75;
  CMTimeFlags v76;
  CMTimeEpoch v77;
  int32_t v78;
  CMTimeScale v79;
  CMTimeValue v80;
  CMTimeEpoch v81;
  CMTimeFlags v82;
  uint64_t v83;
  int32_t v84;
  char v85;
  CMTimeFlags v86;
  NSObject *v87;
  unsigned int v88;
  unsigned int v89;
  const char *v90;
  const char *v91;
  Float64 v92;
  Float64 v93;
  __int128 v94;
  int v95;
  CMTimeValue v96;
  CMTimeScale v97;
  CMTimeFlags v98;
  int32_t v99;
  CMTimeScale v100;
  uint64_t v101;
  CMTime *v102;
  NSObject *v103;
  unsigned int v104;
  unsigned int v105;
  const char *v106;
  const char *v107;
  Float64 v108;
  Float64 v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  unsigned int v116;
  unsigned int v117;
  const char *v118;
  int32_t v119;
  char v120;
  NSObject *v121;
  unsigned int v122;
  unsigned int v123;
  const char *v124;
  const char *v125;
  Float64 v126;
  Float64 v127;
  Float64 v128;
  const __CFArray *v129;
  Float64 v130;
  Float64 v131;
  _BOOL4 v132;
  int v133;
  CMTimeEpoch v134;
  CMTimeEpoch v135;
  CMTimeFlags v136;
  CMTimeScale v137;
  CMTimeEpoch v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  CMTimeEpoch v149;
  CMTimeFlags v150;
  CMTimeScale v151;
  CMTimeValue v152;
  int v153;
  BOOL v154;
  uint64_t RenderingTrackofType;
  NSObject *v156;
  unsigned int v157;
  unsigned int v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD *v162;
  NSObject *v163;
  unsigned int v164;
  unsigned int v165;
  const char *v166;
  CMTimeEpoch v167;
  NSObject *v168;
  unsigned int v169;
  unsigned int v170;
  const char *v171;
  NSObject *v172;
  unsigned int v173;
  unsigned int v174;
  const char *v175;
  const char *v176;
  Float64 v177;
  NSObject *v178;
  unsigned int v179;
  unsigned int v180;
  const char *v181;
  const char *v182;
  const __CFArray *v183;
  const char *v184;
  Float64 v185;
  const char *v186;
  Float64 v187;
  uint64_t v188;
  const char *v189;
  Float64 v190;
  const char *v191;
  Float64 v192;
  Float64 v193;
  Float64 v194;
  Float64 v195;
  NSObject *v196;
  unsigned int v197;
  unsigned int v198;
  const char *v199;
  const char *v200;
  uint64_t result;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  const char *v205;
  unsigned int v206;
  CMTimeValue v207;
  const char *v208;
  CMTimeFlags v209;
  CMTimeFlags v210;
  CMTimeScale v211;
  CMTimeValue v212;
  _BOOL4 v213;
  CMTimeFlags v214;
  CMTimeFlags v215;
  CMTimeFlags v216;
  CMTimeFlags v217;
  CMTimeFlags v218;
  CMTimeEpoch v219;
  CMTimeValue v220;
  CMTimeEpoch v221;
  CMTimeScale v222;
  uint64_t v223;
  uint64_t v224;
  CMTimeFlags v225;
  CMTimeFlags v226;
  const char *v227;
  CMTimeEpoch v228;
  CMTimeEpoch v229;
  const char *v230;
  int v231;
  CMTimeEpoch v232;
  CMTimeEpoch v233;
  uint64_t v234;
  const char *v235;
  uint64_t *v236;
  CMTimeValue v237;
  uint64_t v238;
  CMTimeEpoch v239;
  CMTimeEpoch epoch;
  CMTimeEpoch v241;
  CMTimeEpoch v242;
  __int128 v243;
  CMTimeValue v244;
  CMTimeFlags flags;
  CMTimeFlags v246;
  CMTimeScale timescale;
  CMTimeValue value;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  CMTime v253;
  CMTime v254;
  uint64_t v255;
  char v256;
  CMTime v257;
  CMTime v258;
  CMTime v259;
  uint64_t v260;
  CMTime rhs;
  os_log_type_t type;
  CMTime time2;
  const char *v264;
  __int16 v265;
  const __CFArray *v266;
  __int16 v267;
  const char *v268;
  __int16 v269;
  _QWORD v270[7];
  CMTime time;
  CMTimeValue v272;
  CMTimeScale v273;
  CMTimeValue v274;
  CMTimeScale v275;
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v2)
    return 0;
  v3 = DerivedStorage;
  v4 = 0x7FFFFFFFLL;
  v207 = *MEMORY[0x1E0CA2E28];
  v206 = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 8);
  v233 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  v212 = *MEMORY[0x1E0CA2E18];
  v210 = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 12);
  v211 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v214 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v242 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v202 = DerivedStorage;
  while (1)
  {
    if (*(_DWORD *)(v2 + 152) != 3 || v4 <= *(_QWORD *)(v2 + 64))
    {
      v2 = *(_QWORD *)(v2 + 8);
      goto LABEL_9;
    }
    v5 = fpfs_AreTracksReadyToPlay(a1);
    v4 = *(_QWORD *)(v2 + 64);
    v6 = v4;
    if (v5)
      goto LABEL_6;
    if (*(_BYTE *)(v3 + 470))
    {
      v8 = CMBaseObjectGetDerivedStorage();
      if (fpfs_getNext(v8, 0) == a1)
        break;
    }
LABEL_9:
    if (!v2)
      return 0;
  }
  v6 = *(_QWORD *)(v2 + 64);
LABEL_6:
  v7 = CMBaseObjectGetDerivedStorage();
  v234 = *(_QWORD *)v7;
  v223 = CMBaseObjectGetDerivedStorage();
  memset(&v259, 0, sizeof(v259));
  v243 = *MEMORY[0x1E0CA2E28];
  *(_OWORD *)&v258.value = *MEMORY[0x1E0CA2E28];
  v258.epoch = v233;
  memset(&v257, 0, sizeof(v257));
  fpfs_GetTime(v7, (uint64_t)&v257);
  value = v257.value;
  flags = v257.flags;
  timescale = v257.timescale;
  epoch = v257.epoch;
  v203 = v4;
  if ((*(_BYTE *)(v7 + 332) & 1) != 0)
  {
    v9 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
    for (i = 0x7FFFFFFFFFFFFFFFLL; v9; v9 = *(_QWORD *)(v9 + 8))
    {
      if (*(_DWORD *)(v9 + 152) == 6)
      {
        v11 = *(_DWORD *)(v9 + 32);
        v12 = v11 == 1986618469 || v11 == 1936684398;
        if (v12 && *(_QWORD *)(v9 + 64) < i)
          i = *(_QWORD *)(v9 + 64);
      }
    }
    v213 = i >= v6;
  }
  else
  {
    v213 = 0;
  }
  v256 = 0;
  v255 = 0;
  v260 = 0;
  v252 = (uint64_t *)(v7 + 1040);
  v250 = v7;
  v251 = v6;
  while (fpfsi_IterateMutableTrackList(v252, &v260, &v255))
  {
    v13 = v260;
    if (*(_QWORD *)(v260 + 64) == v6 && (~*(_DWORD *)(v260 + 140) & 0x11) == 0)
    {
      fpfs_FindTrackStartTime(v7, v6, (uint64_t)&time);
      *(CMTime *)(v13 + 192) = time;
      v14 = *(_QWORD *)(v7 + 1040);
      if (v14)
      {
        while (*(_QWORD *)(v14 + 64) != v6 || *(_BYTE *)(v14 + 456) || (*(_DWORD *)(v14 + 140) & 0x1D) != 1)
        {
          v14 = *(_QWORD *)(v14 + 8);
          if (!v14)
            goto LABEL_33;
        }
        *(_OWORD *)&time.value = *(_OWORD *)(v14 + 128);
        v15 = *(_QWORD *)(v14 + 144);
      }
      else
      {
LABEL_33:
        *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E18];
        v15 = v242;
      }
      time.epoch = v15;
      *(_OWORD *)(v13 + 128) = *(_OWORD *)&time.value;
      *(_QWORD *)(v13 + 144) = v15;
      v16 = MEMORY[0x1E0CA2E68];
      *(_OWORD *)(v13 + 216) = *MEMORY[0x1E0CA2E68];
      *(_QWORD *)(v13 + 232) = *(_QWORD *)(v16 + 16);
      if (*(_BYTE *)(v13 + 180) == 2 && ((*(_BYTE *)(v13 + 204) & 1) == 0 || (*(_BYTE *)(v13 + 140) & 1) == 0))
      {
        Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v13 + 72));
        fpfs_SetTrackStartTimeAndTimeOffset(v13, Head, 0);
      }
      CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v13 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_AdjustTime, (void *)v13);
      if (dword_1EE2A2A88)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(v274) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v19 = rhs.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)v274))
          v20 = v19;
        else
          v20 = v19 & 0xFFFFFFFE;
        if (v20)
        {
          if (v234)
            v21 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v21 = "";
          v235 = v21;
          if (a1)
          {
            v22 = a1;
            v23 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          }
          else
          {
            v23 = "";
            v22 = 0;
          }
          v24 = *(_QWORD *)(v13 + 16);
          time = *(CMTime *)(v13 + 128);
          Seconds = CMTimeGetSeconds(&time);
          time = *(CMTime *)(v13 + 192);
          v26 = CMTimeGetSeconds(&time);
          LODWORD(time2.value) = 136316930;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v234;
          HIWORD(time2.epoch) = 2082;
          v264 = v235;
          v265 = 2048;
          v266 = v22;
          v267 = 2082;
          v268 = v23;
          v269 = 1024;
          LODWORD(v270[0]) = v24;
          WORD2(v270[0]) = 2048;
          *(Float64 *)((char *)v270 + 6) = Seconds;
          HIWORD(v270[1]) = 2048;
          *(Float64 *)&v270[2] = v26;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v7 = v250;
      v6 = v251;
      if (*(_BYTE *)(v13 + 182))
        fpfs_StopFeedingTrack(v13, 0, 1);
    }
  }
  if (*(_BYTE *)(v7 + 2440))
  {
    v27 = v233;
    if ((*(_BYTE *)(v7 + 2404) & 1) != 0)
    {
      *(_QWORD *)(v250 + 1504) = *(_QWORD *)(v250 + 2408);
      *(_OWORD *)(v250 + 1488) = *(_OWORD *)(v250 + 2392);
      v213 = 1;
    }
  }
  else
  {
    v27 = v233;
  }
  v28 = CMBaseObjectGetDerivedStorage();
  v274 = v207;
  v275 = v206;
  v272 = v212;
  v29 = v210;
  v273 = v211;
  v30 = v214;
  v31 = v242;
  v236 = (uint64_t *)v28;
  v32 = *(_QWORD *)(v28 + 1040);
  if (v32)
  {
    v29 = v210;
    v31 = v242;
    v30 = v214;
    v27 = v233;
    do
    {
      if (*(_QWORD *)(v32 + 64) == v6 - 1
        && (*(_BYTE *)(v32 + 228) & 1) != 0
        && (time.value = v274,
            time.timescale = v275,
            time.flags = v29,
            time.epoch = v27,
            time2 = *(CMTime *)(v32 + 216),
            CMTimeCompare(&time, &time2) < 0))
      {
        v274 = *(_QWORD *)(v32 + 216);
        v275 = *(_DWORD *)(v32 + 224);
        v29 = *(_DWORD *)(v32 + 228);
        v27 = *(_QWORD *)(v32 + 232);
        if ((v30 & 1) == 0)
        {
LABEL_67:
          if (*(_QWORD *)(v32 + 64) == v6 && *(_DWORD *)(v32 + 32) == 1986618469)
          {
            v33 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v32 + 72));
            if (v33)
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&time, v33);
              v272 = time.value;
              v30 = time.flags;
              v273 = time.timescale;
              v31 = time.epoch;
            }
            else
            {
              v272 = v212;
              v273 = v211;
              v30 = v214;
              v31 = v242;
            }
          }
        }
      }
      else if ((v30 & 1) == 0)
      {
        goto LABEL_67;
      }
      v32 = *(_QWORD *)(v32 + 8);
    }
    while (v32);
  }
  if ((v29 & 0x1D) == 1)
  {
    v34 = v236[130];
    if (v34)
    {
      v221 = v31;
      do
      {
        if (*(_QWORD *)(v34 + 64) == v6 && (*(_BYTE *)(v34 + 204) & 1) != 0)
        {
          v35 = (_OWORD *)(v34 + 192);
          time.value = v274;
          time.timescale = v275;
          time.flags = v29;
          time.epoch = v27;
          time2 = *(CMTime *)(v34 + 192);
          if (CMTimeCompare(&time, &time2) >= 1)
          {
            if (dword_1EE2A2A88)
            {
              LODWORD(rhs.value) = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v37 = rhs.value;
              if (os_log_type_enabled(v36, type))
                v38 = v37;
              else
                v38 = v37 & 0xFFFFFFFE;
              if (v38)
              {
                v39 = *v236;
                if (*v236)
                  v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v40 = "";
                v230 = v40;
                if (a1)
                  v41 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                else
                  v41 = "";
                v227 = v41;
                v224 = *(_QWORD *)(v34 + 16);
                *(_OWORD *)&time.value = *v35;
                time.epoch = *(_QWORD *)(v34 + 208);
                v42 = CMTimeGetSeconds(&time);
                time.value = v274;
                time.timescale = v275;
                time.flags = v29;
                time.epoch = v27;
                v43 = CMTimeGetSeconds(&time);
                LODWORD(time2.value) = 136316930;
                *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_RealignTrackStartTime";
                LOWORD(time2.flags) = 2048;
                *(_QWORD *)((char *)&time2.flags + 2) = v39;
                HIWORD(time2.epoch) = 2082;
                v264 = v230;
                v265 = 2048;
                v266 = a1;
                v267 = 2082;
                v268 = v227;
                v269 = 1024;
                LODWORD(v270[0]) = v224;
                WORD2(v270[0]) = 2048;
                *(Float64 *)((char *)v270 + 6) = v42;
                HIWORD(v270[1]) = 2048;
                *(Float64 *)&v270[2] = v43;
                _os_log_send_and_compose_impl();
                v31 = v221;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v6 = v251;
            }
            *(_QWORD *)v35 = v274;
            *(_DWORD *)(v34 + 200) = v275;
            *(_DWORD *)(v34 + 204) = v29;
            *(_QWORD *)(v34 + 208) = v27;
          }
        }
        v34 = *(_QWORD *)(v34 + 8);
      }
      while (v34);
    }
    if ((v30 & 0x1D) == 1)
    {
      time.value = v272;
      time.timescale = v273;
      time.flags = v30;
      time.epoch = v31;
      time2.value = v274;
      time2.timescale = v275;
      time2.flags = v29;
      time2.epoch = v27;
      if (CMTimeCompare(&time, &time2) < 0)
      {
        time2.value = v274;
        time2.timescale = v275;
        time2.flags = v29;
        time2.epoch = v27;
        rhs.value = v272;
        rhs.timescale = v273;
        rhs.flags = v30;
        rhs.epoch = v31;
        CMTimeSubtract(&time, &time2, &rhs);
        fpfs_TimeShiftDiscontinuityDomain((uint64_t)v236, v6, &time);
      }
    }
  }
  v260 = *v252;
  v44 = v260;
  if (v260)
  {
    v231 = 1;
    v45 = v210;
    v232 = v233;
    v225 = v210;
    v228 = v233;
    v220 = v207;
    v46 = v206;
    v222 = v206;
    v47 = v207;
    v48 = v243;
    while (1)
    {
      if (*(_QWORD *)(v44 + 64) == v6 && *(_QWORD *)(v44 + 40))
      {
        v49 = *(_DWORD *)(v44 + 32);
        if (v49 == 1986618469 || v49 == 1936684398)
          break;
      }
LABEL_152:
      if ((*(_DWORD *)(v44 + 204) & 0x1D) == 1 && *(_QWORD *)(v44 + 64) == v6)
      {
        value = *(_QWORD *)(v44 + 192);
        timescale = *(_DWORD *)(v44 + 200);
        flags = *(_DWORD *)(v44 + 204);
        epoch = *(_QWORD *)(v44 + 208);
      }
      v44 = *(_QWORD *)(v44 + 8);
      if (!v44)
      {
        v260 = 0;
        v73 = v233;
        v74 = v228;
        v75 = v225;
        goto LABEL_158;
      }
    }
    if (dword_1EE2A2A88)
    {
      v51 = v46;
      LODWORD(rhs.value) = 0;
      LOBYTE(v274) = 0;
      v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v53 = rhs.value;
      if (os_log_type_enabled(v52, (os_log_type_t)v274))
        v54 = v53;
      else
        v54 = v53 & 0xFFFFFFFE;
      if (v54)
      {
        if (v234)
        {
          v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          if (a1)
            goto LABEL_116;
LABEL_119:
          v56 = "";
        }
        else
        {
          v55 = "";
          if (!a1)
            goto LABEL_119;
LABEL_116:
          v56 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        }
        v57 = "audio";
        if (*(_DWORD *)(v44 + 32) == 1986618469)
          v57 = "video";
        v58 = *(_QWORD *)(v44 + 16);
        LODWORD(time2.value) = 136316674;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v234;
        HIWORD(time2.epoch) = 2082;
        v264 = v55;
        v265 = 2048;
        v266 = a1;
        v267 = 2082;
        v268 = v56;
        v269 = 2082;
        v270[0] = v57;
        LOWORD(v270[1]) = 2048;
        *(_QWORD *)((char *)&v270[1] + 2) = v58;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = v251;
      v46 = v51;
    }
    v59 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v44 + 72));
    if (v59)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&time, v59);
      v60 = time.value;
      v61 = time.timescale;
      v62 = time.flags;
      v219 = time.epoch;
      v63 = *(_DWORD *)(v44 + 32);
      if (v63 == 1986618469)
      {
        time.value = v220;
        time.timescale = v222;
        time.flags = v45;
        time.epoch = v232;
        *(_OWORD *)&time2.value = v243;
        time2.epoch = v233;
        if (!CMTimeCompare(&time, &time2))
        {
          v222 = v61;
          v220 = v60;
          v232 = v219;
          v45 = v62;
        }
        v63 = *(_DWORD *)(v44 + 32);
      }
      if (v63 == 1936684398)
      {
        time.value = v47;
        time.timescale = v46;
        time.flags = v225;
        time.epoch = v228;
        *(_OWORD *)&time2.value = v243;
        time2.epoch = v233;
        if (!CMTimeCompare(&time, &time2))
        {
          v46 = v61;
          v47 = v60;
          v228 = v219;
          v225 = v62;
        }
      }
      if (dword_1EE2A2A88)
      {
        v209 = v62;
        v215 = v45;
        LODWORD(rhs.value) = 0;
        LOBYTE(v274) = 0;
        v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v65 = rhs.value;
        if (os_log_type_enabled(v64, (os_log_type_t)v274))
          v66 = v65;
        else
          v66 = v65 & 0xFFFFFFFE;
        if (v66)
        {
          v67 = *(const void **)v250;
          if (*(_QWORD *)v250)
            v68 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v68 = "";
          if (a1)
            v204 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v204 = "";
          v69 = *(_QWORD *)(v44 + 16);
          time.value = v60;
          time.timescale = v61;
          time.flags = v209;
          time.epoch = v219;
          v70 = CMTimeGetSeconds(&time);
          time = *(CMTime *)(v44 + 216);
          v71 = CMTimeGetSeconds(&time);
          LODWORD(time2.value) = 136317442;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v67;
          HIWORD(time2.epoch) = 2082;
          v264 = v68;
          v265 = 2048;
          v266 = a1;
          v267 = 2082;
          v268 = v204;
          v269 = 2048;
          v270[0] = v69;
          LOWORD(v270[1]) = 2048;
          *(_QWORD *)((char *)&v270[1] + 2) = v60;
          WORD1(v270[2]) = 1024;
          HIDWORD(v270[2]) = v61;
          LOWORD(v270[3]) = 2048;
          *(Float64 *)((char *)&v270[3] + 2) = v70;
          WORD1(v270[4]) = 2048;
          *(Float64 *)((char *)&v270[4] + 4) = v71;
          _os_log_send_and_compose_impl();
          v6 = v251;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v45 = v215;
        v46 = v46;
      }
      time = v258;
      time2 = *(CMTime *)(v44 + 216);
      if (CMTimeCompare(&time, &time2) < 0)
        v258 = *(CMTime *)(v44 + 216);
      v72 = v231;
      if (!*(_BYTE *)(v44 + 182))
        v72 = 0;
      v231 = v72;
    }
    v48 = v243;
    goto LABEL_152;
  }
  LOBYTE(v231) = 1;
  LODWORD(v46) = v206;
  v47 = v207;
  v222 = v206;
  v220 = v207;
  v73 = v233;
  v74 = v233;
  v45 = v210;
  v75 = v210;
  v232 = v233;
  v48 = v243;
LABEL_158:
  time.value = v47;
  time.timescale = v46;
  time.flags = v75;
  v226 = v75;
  v229 = v74;
  time.epoch = v74;
  *(_OWORD *)&time2.value = v48;
  time2.epoch = v73;
  if (CMTimeCompare(&time, &time2))
  {
    time.value = v220;
    time.timescale = v222;
    time.flags = v45;
    time.epoch = v232;
    *(_OWORD *)&time2.value = v243;
    time2.epoch = v73;
    if (CMTimeCompare(&time, &time2))
    {
      time.value = v220;
      time.timescale = v222;
      time.flags = v45;
      time.epoch = v232;
      time2.value = v47;
      v76 = v226;
      time2.timescale = v46;
      time2.flags = v226;
      v77 = v229;
      time2.epoch = v229;
      v78 = CMTimeCompare(&time, &time2);
      if (v78 <= 0)
        v79 = v222;
      else
        v79 = v46;
      if (v78 <= 0)
        v80 = v220;
      else
        v80 = v47;
      if (v78 <= 0)
        v81 = v229;
      else
        v81 = v232;
      if (v78 <= 0)
        v82 = v226;
      else
        v82 = v45;
      if (v78 <= 0)
        v77 = v232;
      v229 = v77;
      if (v78 <= 0)
        v76 = v45;
      v226 = v76;
      if (v78 > 0)
      {
        LODWORD(v46) = v222;
        v47 = v220;
      }
      v222 = v79;
      v220 = v80;
      v232 = v81;
      v45 = v82;
    }
    else
    {
      v222 = v46;
      v220 = v47;
      v232 = v229;
      v45 = v226;
    }
  }
  else
  {
    v229 = v232;
    v226 = v45;
    LODWORD(v46) = v222;
    v47 = v220;
  }
  v83 = v250;
  time.value = value;
  time.timescale = timescale;
  time.flags = flags;
  time.epoch = epoch;
  time2 = v257;
  v84 = CMTimeCompare(&time, &time2);
  v85 = v213;
  if (v84 >= 0)
    v85 = 1;
  if ((v85 & 1) != 0)
  {
    v86 = flags;
  }
  else
  {
    if (dword_1EE2A2A88)
    {
      v216 = v45;
      LODWORD(rhs.value) = 0;
      LOBYTE(v274) = 0;
      v87 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v88 = rhs.value;
      if (os_log_type_enabled(v87, (os_log_type_t)v274))
        v89 = v88;
      else
        v89 = v88 & 0xFFFFFFFE;
      if (v89)
      {
        if (v234)
          v90 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v90 = "";
        if (a1)
          v91 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v91 = "";
        time = v257;
        v92 = CMTimeGetSeconds(&time);
        time.value = value;
        time.timescale = timescale;
        time.flags = flags;
        time.epoch = epoch;
        v93 = CMTimeGetSeconds(&time);
        LODWORD(time2.value) = 136316674;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v234;
        HIWORD(time2.epoch) = 2082;
        v264 = v90;
        v265 = 2048;
        v266 = a1;
        v267 = 2082;
        v268 = v91;
        v269 = 2048;
        *(Float64 *)v270 = v92;
        LOWORD(v270[1]) = 2048;
        *(Float64 *)((char *)&v270[1] + 2) = v93;
        _os_log_send_and_compose_impl();
        v83 = v250;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = v251;
      v45 = v216;
    }
    if (*(float *)(v83 + 840) != 0.0)
      fpfs_setUnlikelyToKeepUpAndRanDry(a1);
    fpfs_GetTime(v83, (uint64_t)&time);
    value = time.value;
    timescale = time.timescale;
    v86 = time.flags;
    epoch = time.epoch;
  }
  v94 = v243;
  v95 = v45 & 0x1D;
  if (v95 == 1)
  {
    time.value = v47;
    time.timescale = v46;
    time.flags = v45;
    time.epoch = v232;
    v96 = value;
    time2.value = value;
    time2.timescale = timescale;
    time2.flags = v86;
    v237 = v47;
    v97 = v46;
    v46 = epoch;
    time2.epoch = epoch;
    v98 = v45;
    v45 = v86;
    v99 = CMTimeCompare(&time, &time2);
    if (v99 < 0)
    {
      v100 = timescale;
    }
    else
    {
      v46 = v232;
      v45 = v98;
      v100 = v97;
    }
    if (v99 >= 0)
      v96 = v237;
    epoch = v46;
    v232 = v46;
    v246 = v45;
    timescale = v100;
    LODWORD(v46) = v100;
    value = v96;
    v47 = v96;
    v101 = v83;
    if ((*(_BYTE *)(v83 + 1500) & 1) != 0)
    {
      v102 = (CMTime *)(v83 + 1488);
      time.value = v96;
      time.timescale = timescale;
      time.flags = v45;
      time.epoch = epoch;
      time2 = *v102;
      if (CMTimeCompare(&time, &time2) < 1)
      {
        time.value = v96;
        time.timescale = timescale;
        time.flags = v45;
        time.epoch = epoch;
        time2 = *v102;
        v232 = epoch;
        LODWORD(v46) = timescale;
        v47 = v96;
        v101 = v250;
        v6 = v251;
        if (CMTimeCompare(&time, &time2) <= 0)
        {
          time = *v102;
          time2 = v258;
          v232 = v233;
          v45 = v210;
          LODWORD(v46) = v206;
          v47 = v207;
          if (CMTimeCompare(&time, &time2) >= 1)
          {
            v232 = epoch;
            v45 = v246;
            LODWORD(v46) = timescale;
            v47 = v96;
            if (*(_BYTE *)(v250 + 470))
              return 4294950069;
          }
        }
      }
      else
      {
        if (dword_1EE2A2A88)
        {
          LODWORD(rhs.value) = 0;
          LOBYTE(v274) = 0;
          v103 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v104 = rhs.value;
          if (os_log_type_enabled(v103, (os_log_type_t)v274))
            v105 = v104;
          else
            v105 = v104 & 0xFFFFFFFE;
          if (v105)
          {
            if (v234)
              v106 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v106 = "";
            if (a1)
              v107 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v107 = "";
            time.value = value;
            time.timescale = timescale;
            time.flags = v246;
            time.epoch = epoch;
            v108 = CMTimeGetSeconds(&time);
            time = *v102;
            v109 = CMTimeGetSeconds(&time);
            LODWORD(time2.value) = 136316674;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v234;
            HIWORD(time2.epoch) = 2082;
            v264 = v106;
            v265 = 2048;
            v266 = a1;
            v267 = 2082;
            v268 = v107;
            v269 = 2048;
            *(Float64 *)v270 = v108;
            LOWORD(v270[1]) = 2048;
            *(Float64 *)((char *)&v270[1] + 2) = v109;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_OWORD *)&v102->value = *MEMORY[0x1E0CA2E18];
        v102->epoch = v242;
        v232 = epoch;
        v45 = v246;
        LODWORD(v46) = timescale;
        v47 = value;
        v101 = v250;
        v6 = v251;
      }
    }
    v94 = v243;
    if ((*(_BYTE *)(v101 + 1500) & 1) != 0)
    {
      v95 = 1;
    }
    else
    {
      v260 = *v252;
      v110 = v260;
      v95 = 1;
      if (v260)
      {
        do
        {
          if (*(_QWORD *)(v110 + 64) == v6 && *(_QWORD *)(v110 + 40) && *(_DWORD *)(v110 + 32) == 1986618469)
          {
            CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v110 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_RemoveDoNotDisplayFromBuffer, 0);
            v94 = v243;
          }
          v110 = *(_QWORD *)(v110 + 8);
        }
        while (v110);
        v260 = 0;
      }
    }
  }
  else
  {
    v246 = v86;
  }
  v111 = v45 & 0x1D;
  if (v111 == 1)
  {
    *(_OWORD *)&v259.value = v94;
    v112 = *v252;
    v259.epoch = v233;
    v260 = v112;
    v113 = 0;
    if (v112)
    {
      do
      {
        v114 = *(_QWORD *)(v112 + 64);
        if ((v114 < v6 || v114 == v6 && *(_BYTE *)(v112 + 456)) && (*(_BYTE *)(v112 + 228) & 1) != 0)
        {
          time = v259;
          time2 = *(CMTime *)(v112 + 216);
          if (CMTimeCompare(&time, &time2) < 0)
          {
            v259 = *(CMTime *)(v112 + 216);
            v113 = v112;
          }
        }
        v112 = *(_QWORD *)(v112 + 8);
      }
      while (v112);
      v260 = 0;
    }
    time.value = v47;
    time.timescale = v46;
    time.flags = v45;
    time.epoch = v232;
    time2.value = v220;
    time2.timescale = v222;
    time2.flags = v226;
    time2.epoch = v229;
    if (CMTimeCompare(&time, &time2) <= 0)
    {
      if (!v113)
      {
        time.value = v47;
        time.timescale = v46;
        time.flags = v45;
        time.epoch = v232;
        time2 = v257;
        v119 = CMTimeCompare(&time, &time2);
        v120 = v213;
        if (v119 < 1)
          v120 = 1;
        if ((v120 & 1) == 0)
        {
LABEL_265:
          if (dword_1EE2A2A88)
          {
            v218 = v45;
            LODWORD(rhs.value) = 0;
            LOBYTE(v274) = 0;
            v121 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v122 = rhs.value;
            if (os_log_type_enabled(v121, (os_log_type_t)v274))
              v123 = v122;
            else
              v123 = v122 & 0xFFFFFFFE;
            if (v123)
            {
              if (v234)
                v124 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v124 = "";
              if (a1)
                v125 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v125 = "";
              time = v257;
              v126 = CMTimeGetSeconds(&time);
              time.value = v47;
              time.timescale = v46;
              time.flags = v218;
              time.epoch = v232;
              v127 = CMTimeGetSeconds(&time);
              time.value = v47;
              time.timescale = v46;
              time.flags = v218;
              time.epoch = v232;
              time2.value = v220;
              time2.timescale = v222;
              time2.flags = v226;
              time2.epoch = v229;
              CMTimeSubtract(&v253, &time, &time2);
              v128 = CMTimeGetSeconds(&v253);
              LODWORD(time2.value) = 136316930;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = v234;
              HIWORD(time2.epoch) = 2082;
              v264 = v124;
              v265 = 2048;
              v266 = a1;
              v267 = 2082;
              v268 = v125;
              v269 = 2048;
              *(Float64 *)v270 = v126;
              LOWORD(v270[1]) = 2048;
              *(Float64 *)((char *)&v270[1] + 2) = v127;
              WORD1(v270[2]) = 2048;
              *(Float64 *)((char *)&v270[2] + 4) = v128;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v45 = v218;
          }
          time.value = v47;
          time.timescale = v46;
          time.flags = v45;
          time.epoch = v232;
          fpfs_JumpToTime((uint64_t)a1, &time);
        }
      }
    }
    else if (v113)
    {
      time = v259;
      time2.value = v47;
      time2.timescale = v46;
      time2.flags = v45;
      time2.epoch = v232;
      if (CMTimeCompare(&time, &time2) < 0)
      {
        if (dword_1EE2A2A88)
        {
          v217 = v45;
          LODWORD(rhs.value) = 0;
          LOBYTE(v274) = 0;
          v115 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v116 = rhs.value;
          if (os_log_type_enabled(v115, (os_log_type_t)v274))
            v117 = v116;
          else
            v117 = v116 & 0xFFFFFFFE;
          if (v117)
          {
            if (v234)
              v118 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v118 = "";
            v208 = v118;
            if (a1)
            {
              v129 = a1;
              v205 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            }
            else
            {
              v129 = 0;
              v205 = "";
            }
            v238 = *(_QWORD *)(v113 + 16);
            time.value = v47;
            time.timescale = v46;
            time.flags = v217;
            time.epoch = v232;
            v130 = CMTimeGetSeconds(&time);
            time.value = v47;
            time.timescale = v46;
            time.flags = v217;
            time.epoch = v232;
            time2.value = v220;
            time2.timescale = v222;
            time2.flags = v226;
            time2.epoch = v229;
            CMTimeSubtract(&v254, &time, &time2);
            v131 = CMTimeGetSeconds(&v254);
            LODWORD(time2.value) = 136316930;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v234;
            HIWORD(time2.epoch) = 2082;
            v264 = v208;
            v265 = 2048;
            v266 = v129;
            v267 = 2082;
            v268 = v205;
            v269 = 2048;
            v270[0] = v238;
            LOWORD(v270[1]) = 2048;
            *(Float64 *)((char *)&v270[1] + 2) = v130;
            WORD1(v270[2]) = 2048;
            *(Float64 *)((char *)&v270[2] + 4) = v131;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v45 = v217;
        }
        *(_QWORD *)(v113 + 240) = v47;
        *(_DWORD *)(v113 + 248) = v46;
        *(_DWORD *)(v113 + 252) = v45;
        *(_QWORD *)(v113 + 256) = v232;
      }
    }
    else if (!v213)
    {
      goto LABEL_265;
    }
  }
  v132 = v213;
  if (v95 != 1)
    v132 = 0;
  if (!v132)
  {
    v133 = 0;
LABEL_294:
    v135 = epoch;
    v134 = v242;
    goto LABEL_295;
  }
  if (*(_QWORD *)(v250 + 1592))
  {
    v133 = 1;
    goto LABEL_294;
  }
  v160 = v250 + 1488;
  if ((*(_DWORD *)(v250 + 1500) & 1) != 0)
  {
    value = *(_QWORD *)(v250 + 1488);
    timescale = *(_DWORD *)(v250 + 1496);
    v246 = *(_DWORD *)(v250 + 1500);
    v135 = *(_QWORD *)(v250 + 1504);
  }
  else
  {
    v161 = *(_QWORD *)(v250 + 1696);
    if (v161 && FigAlternateIsIFrameOnly(v161))
      goto LABEL_361;
    if ((*(_BYTE *)(v250 + 356) & 1) == 0)
      goto LABEL_361;
    v162 = (_OWORD *)(v250 + 344);
    time.value = value;
    time.timescale = timescale;
    time.flags = v246;
    time.epoch = epoch;
    time2 = *(CMTime *)(v250 + 344);
    if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0
      || v111 == 1
      && (time = *(CMTime *)(v250 + 320),
          time2.value = v47,
          time2.timescale = v46,
          time2.flags = v45,
          time2.epoch = v232,
          CMTimeCompare(&time, &time2) < 0))
    {
LABEL_361:
      v135 = epoch;
    }
    else
    {
      if (dword_1EE2A2A88)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(v274) = 0;
        v178 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v179 = rhs.value;
        if (os_log_type_enabled(v178, (os_log_type_t)v274))
          v180 = v179;
        else
          v180 = v179 & 0xFFFFFFFE;
        if (v180)
        {
          if (v234)
            v181 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v181 = "";
          if (a1)
            v191 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v191 = "";
          *(_OWORD *)&time.value = *v162;
          time.epoch = *(_QWORD *)(v250 + 360);
          v192 = CMTimeGetSeconds(&time);
          time = *(CMTime *)(v250 + 368);
          v193 = CMTimeGetSeconds(&time);
          time.value = value;
          time.timescale = timescale;
          time.flags = v246;
          time.epoch = epoch;
          v194 = CMTimeGetSeconds(&time);
          *(_OWORD *)&time.value = *v162;
          time.epoch = *(_QWORD *)(v250 + 360);
          v195 = CMTimeGetSeconds(&time);
          LODWORD(time2.value) = 136317186;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v234;
          HIWORD(time2.epoch) = 2082;
          v264 = v181;
          v265 = 2048;
          v266 = a1;
          v267 = 2082;
          v268 = v191;
          v269 = 2048;
          *(Float64 *)v270 = v192;
          LOWORD(v270[1]) = 2048;
          *(Float64 *)((char *)&v270[1] + 2) = v193;
          WORD1(v270[2]) = 2048;
          *(Float64 *)((char *)&v270[2] + 4) = v194;
          WORD2(v270[3]) = 2048;
          *(Float64 *)((char *)&v270[3] + 6) = v195;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      value = *(_QWORD *)(v250 + 344);
      timescale = *(_DWORD *)(v250 + 352);
      v246 = *(_DWORD *)(v250 + 356);
      v135 = *(_QWORD *)(v250 + 360);
      *(_OWORD *)v160 = *v162;
      *(_QWORD *)(v250 + 1504) = *(_QWORD *)(v250 + 360);
      if (!fpfs_AreTracksReadyToPlay(a1))
      {
        v3 = v202;
        v4 = v203;
        if (dword_1EE2A2A88)
        {
          LODWORD(rhs.value) = 0;
          LOBYTE(v274) = 0;
          v196 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v197 = rhs.value;
          if (os_log_type_enabled(v196, (os_log_type_t)v274))
            v198 = v197;
          else
            v198 = v197 & 0xFFFFFFFE;
          if (v198)
          {
            if (v234)
              v199 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v199 = "";
            if (a1)
              v200 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v200 = "";
            LODWORD(time2.value) = 136316162;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v234;
            HIWORD(time2.epoch) = 2082;
            v264 = v199;
            v265 = 2048;
            v266 = a1;
            v267 = 2082;
            v268 = v200;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v3 = v202;
          v4 = v203;
        }
        goto LABEL_431;
      }
    }
    *(_QWORD *)(v250 + 1488) = value;
    *(_DWORD *)(v250 + 1496) = timescale;
    *(_DWORD *)(v250 + 1500) = v246;
    *(_QWORD *)(v250 + 1504) = v135;
  }
  if ((_BYTE)v231)
  {
    time.value = value;
    time.timescale = timescale;
    time.flags = v246;
    time.epoch = v135;
    time2 = v258;
    if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
    {
      if (dword_1EE2A2A88)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(v274) = 0;
        v163 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v164 = rhs.value;
        if (os_log_type_enabled(v163, (os_log_type_t)v274))
          v165 = v164;
        else
          v165 = v164 & 0xFFFFFFFE;
        if (v165)
        {
          if (v234)
            v166 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v166 = "";
          v241 = v135;
          if (a1)
            v176 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v176 = "";
          time = v258;
          v177 = CMTimeGetSeconds(&time);
          LODWORD(time2.value) = 136316418;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v234;
          HIWORD(time2.epoch) = 2082;
          v264 = v166;
          v265 = 2048;
          v266 = a1;
          v267 = 2082;
          v268 = v176;
          v269 = 2048;
          *(Float64 *)v270 = v177;
          _os_log_send_and_compose_impl();
          v135 = v241;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      time = v258;
      fpfs_SetTime((uint64_t)a1, &time);
      v133 = 1;
      v134 = v242;
      goto LABEL_295;
    }
  }
  time.value = value;
  v137 = timescale;
  v136 = v246;
  time.timescale = timescale;
  time.flags = v246;
  time.epoch = v135;
  time2 = v257;
  if (CMTimeCompare(&time, &time2) <= 0)
  {
    v167 = v135;
    if (dword_1EE2A2A88)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(v274) = 0;
      v168 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v169 = rhs.value;
      if (os_log_type_enabled(v168, (os_log_type_t)v274))
        v170 = v169;
      else
        v170 = v169 & 0xFFFFFFFE;
      if (v170)
      {
        if (v234)
          v171 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v171 = "";
        if (a1)
        {
          v182 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          v183 = a1;
        }
        else
        {
          v182 = "";
          v183 = 0;
        }
        if ((*(_DWORD *)(v250 + 1500) & 1) != 0)
          v184 = "preciseSeekTime";
        else
          v184 = "seek time";
        time.value = value;
        time.timescale = timescale;
        time.flags = v246;
        time.epoch = v167;
        v185 = CMTimeGetSeconds(&time);
        LODWORD(time2.value) = 136316674;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v234;
        HIWORD(time2.epoch) = 2082;
        v264 = v171;
        v265 = 2048;
        v266 = v183;
        v267 = 2082;
        v268 = v182;
        v269 = 2082;
        v270[0] = v184;
        LOWORD(v270[1]) = 2048;
        *(Float64 *)((char *)&v270[1] + 2) = v185;
        _os_log_send_and_compose_impl();
        v160 = v250 + 1488;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    time.value = value;
    time.timescale = timescale;
    time.flags = v246;
    v135 = v167;
    time.epoch = v167;
    fpfs_SetTime((uint64_t)a1, &time);
    v133 = 1;
    *(_OWORD *)v160 = *MEMORY[0x1E0CA2E18];
    v134 = v242;
    *(_QWORD *)(v160 + 16) = v242;
LABEL_295:
    v239 = v134;
    v136 = v214;
    v137 = v211;
    v244 = v212;
    goto LABEL_296;
  }
  v133 = 1;
  v239 = v135;
  v244 = value;
LABEL_296:
  v260 = 0;
  if (!fpfsi_IterateMutableTrackList(v252, &v260, &v255))
    goto LABEL_355;
  v138 = v135;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  while (2)
  {
    v142 = v260;
    if (*(_QWORD *)(v260 + 64) == v251)
    {
      if (!*(_QWORD *)(v260 + 40))
        goto LABEL_312;
      v143 = *(_DWORD *)(v260 + 32);
      if (v143 == 1936684398)
      {
        if (*(_BYTE *)(v223 + 523))
          goto LABEL_312;
        v148 = *(_QWORD *)(v223 + 536);
        if (!v148 || !FPSupport_IsAnAudioDeviceAvailable(v148))
          goto LABEL_312;
      }
      else if (v143 == 1986618469)
      {
        if (!fpfs_CanRenderVideo(v223, *(_QWORD *)v260))
          goto LABEL_312;
        v144 = *v252;
        if (*v252 != v142)
        {
          v145 = 1;
          do
          {
            if (*(_DWORD *)(v144 + 32) == 1986618469 && (*(_DWORD *)(v144 + 152) | 4) == 5)
              v145 = 0;
            v144 = *(_QWORD *)(v144 + 8);
          }
          while (v144 != v142);
          if (!v145)
          {
LABEL_312:
            if ((*(_DWORD *)(v142 + 152) & 0xFFFFFFFE) == 2)
            {
              if (*(_DWORD *)(v142 + 32) == 1986618469 && !*(_BYTE *)(v142 + 184))
              {
                v146 = v142;
                v147 = 5;
              }
              else
              {
                v146 = v142;
                v147 = 4;
              }
              fpfs_ChangeTrackState(v146, v147);
            }
            goto LABEL_338;
          }
        }
      }
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504) && (_os_feature_enabled_impl() & 1) != 0
        || *(_QWORD *)(v142 + 96))
      {
LABEL_324:
        v149 = v135;
        v150 = v246;
        v151 = timescale;
        v152 = value;
        if (*(_DWORD *)(v142 + 32) != 1936684398)
          goto LABEL_325;
      }
      else
      {
        if (*(_DWORD *)(v142 + 32) == 1936684398)
        {
          fpfs_ClearRenderChains(a1, 2);
          goto LABEL_324;
        }
LABEL_325:
        v149 = v135;
        v150 = v246;
        v151 = timescale;
        v152 = value;
        if ((*(_BYTE *)(v250 + 2428) & 1) != 0)
        {
          time2.value = value;
          time2.timescale = timescale;
          time2.flags = v246;
          time2.epoch = v135;
          rhs = *(CMTime *)(v250 + 2416);
          CMTimeSubtract(&time, &time2, &rhs);
          v152 = time.value;
          v151 = time.timescale;
          v150 = time.flags;
          v149 = time.epoch;
        }
      }
      time.value = v152;
      time.timescale = v151;
      time.flags = v150;
      time.epoch = v149;
      *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E18];
      time2.epoch = v242;
      result = fpfs_StartTrackPlaying((const void **)v250, v142, &time, MEMORY[0x1E0CA2E28], &time2);
      if ((_DWORD)result != -16042)
      {
        if ((_DWORD)result)
          return result;
        v153 = *(_DWORD *)(v142 + 32);
        if (v153 != 1986618469 || v141)
        {
          if (v140)
            v154 = 0;
          else
            v154 = v153 == 1936684398;
          if (v154)
            v140 = v142;
          v139 = 1;
        }
        else
        {
          v139 = 1;
          v141 = v142;
        }
      }
    }
LABEL_338:
    if (fpfsi_IterateMutableTrackList(v252, &v260, &v255))
      continue;
    break;
  }
  if (!v139)
  {
LABEL_355:
    v3 = v202;
    v4 = v203;
    goto LABEL_431;
  }
  result = fpfs_setTimebaseStarter((uint64_t)a1, v140, v141);
  if (!(_DWORD)result)
  {
    v3 = v202;
    v4 = v203;
    if (*(_QWORD *)(v250 + 1592))
      goto LABEL_431;
    if (!v133)
      goto LABEL_428;
    if ((v136 & 1) != 0)
    {
      RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
      if (RenderingTrackofType && *(_BYTE *)(RenderingTrackofType + 104))
      {
        if (dword_1EE2A2A88)
        {
          LODWORD(rhs.value) = 0;
          LOBYTE(v274) = 0;
          v156 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v157 = rhs.value;
          if (os_log_type_enabled(v156, (os_log_type_t)v274))
            v158 = v157;
          else
            v158 = v157 & 0xFFFFFFFE;
          if (v158)
          {
            if (v234)
              v159 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v159 = "";
            if (a1)
              v189 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v189 = "";
            time.value = value;
            time.timescale = timescale;
            time.flags = v246;
            time.epoch = v138;
            v190 = CMTimeGetSeconds(&time);
            LODWORD(time2.value) = 136316418;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v234;
            HIWORD(time2.epoch) = 2082;
            v264 = v159;
            v265 = 2048;
            v266 = a1;
            v267 = 2082;
            v268 = v189;
            v269 = 2048;
            *(Float64 *)v270 = v190;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v3 = v202;
          v4 = v203;
        }
LABEL_428:
        fpfs_UpdateDimensions(a1, 1);
        if ((*(_BYTE *)(v250 + 620) & 1) == 0)
        {
          fpfs_GetTime(v250, (uint64_t)&time);
          *(CMTime *)(v250 + 608) = time;
        }
        *(_OWORD *)(v250 + 2392) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v250 + 2408) = v242;
        goto LABEL_431;
      }
      if (dword_1EE2A2A88)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(v274) = 0;
        v172 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v173 = rhs.value;
        if (os_log_type_enabled(v172, (os_log_type_t)v274))
          v174 = v173;
        else
          v174 = v173 & 0xFFFFFFFE;
        if (v174)
        {
          if (v234)
            v175 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v175 = "";
          if (a1)
            v186 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v186 = "";
          time.value = v244;
          time.timescale = v137;
          time.flags = v136;
          time.epoch = v239;
          v187 = CMTimeGetSeconds(&time);
          LODWORD(time2.value) = 136316418;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v234;
          HIWORD(time2.epoch) = 2082;
          v264 = v175;
          v265 = 2048;
          v266 = a1;
          v267 = 2082;
          v268 = v186;
          v269 = 2048;
          *(Float64 *)v270 = v187;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v3 = v202;
        v4 = v203;
      }
      time.value = v244;
      time.timescale = v137;
      time.flags = v136;
      time.epoch = v239;
      fpfs_SetTime((uint64_t)a1, &time);
    }
    v188 = *(unsigned int *)(v250 + 2192);
    time.value = value;
    time.timescale = timescale;
    time.flags = v246;
    time.epoch = v138;
    result = fpfs_SeekDidComplete(v234, a1, v188, 0, &v256, &time);
    *(_DWORD *)(v250 + 2192) = 0;
    if (!(_DWORD)result)
    {
      if (!v256)
        goto LABEL_428;
      result = FigSignalErrorAt();
      if (!(_DWORD)result)
      {
LABEL_431:
        v2 = *(_QWORD *)(v3 + 1040);
        goto LABEL_9;
      }
    }
  }
  return result;
}

const void **fpfs_EnqueueCurrentItemDidChangeNotification(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void **result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  const char *v12;
  const __CFString *v13;
  __CFDictionary *v14;
  char __dst[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (const void **)CMBaseObjectGetDerivedStorage();
  if (*result == a1)
  {
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      if (a1)
        v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v11 = "";
      strncpy(__dst, v11, 8uLL);
      if (a2)
        v12 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v12 = "";
      strncpy(__dst, v12, 8uLL);
      kdebug_trace();
    }
    v13 = *(const __CFString **)(DerivedStorage + 648);
    if (!v13)
      v13 = CFSTR("ReasonAdvanceAtEnd");
    v14 = fpfs_CreateCurrentItemDidChangeNotificationPayloadWithProperties(a1, a2, v13, v6, v7, v8, v9, v10);
    fpfs_EnqueueNotification(a1, CFSTR("CurrentItemDidChange"), a1, v14);
  }
  return result;
}

void fpfsi_checkCoordinatedPlaybackCapability(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  uint64_t v4;
  const __CFAllocator *AllocatorForMedia;
  CFAbsoluteTime Current;
  CFDateRef v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, CFDateRef, _QWORD *, _QWORD *);
  _BOOL4 v10;
  int v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  const void **v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD v18[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(unsigned __int8 *)(DerivedStorage + 3224);
  v15 = *MEMORY[0x1E0CA2E10];
  v16 = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
  if (*(_QWORD *)(DerivedStorage + 928))
  {
    v4 = DerivedStorage;
    memset(v18, 0, sizeof(v18));
    memset(v17, 0, sizeof(v17));
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Current = CFAbsoluteTimeGetCurrent();
    v7 = CFDateCreate(AllocatorForMedia, Current);
    v8 = *(_QWORD *)(v4 + 928);
    v9 = *(uint64_t (**)(uint64_t, CFDateRef, _QWORD *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 40);
    if (v9)
      v10 = v9(v8, v7, v18, v17) != -12649;
    else
      v10 = 1;
    fpfsi_GetDuration((uint64_t)a1, &v15);
    v11 = (BYTE12(v15) & 0x1D) == 1 || v10;
    *(_BYTE *)(v4 + 3224) = v11;
    if (v3 != v11)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v13 = Mutable;
        v14 = (const void **)MEMORY[0x1E0C9AE50];
        if (!*(_BYTE *)(v4 + 3224))
          v14 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(Mutable, CFSTR("IsCoordinatedPlaybackSupported"), *v14);
        fpfs_EnqueueNotification(*(const void **)v4, CFSTR("CoordinatePlaybackSupportChanged"), a1, v13);
      }
    }
    if (v7)
      CFRelease(v7);
  }
}

uint64_t fpfs_disassociatePlayerVideoLayer(uint64_t a1, char a2)
{
  uint64_t result;
  const __CFArray *v4;

  result = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFArray **)(result + 384);
  if (v4)
    return FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(*(const void **)(result + 816), v4, a2, (uint64_t)"fpfs_disassociatePlayerVideoLayer");
  return result;
}

void fpfs_releaseTransitionImageQueuesAndSlots()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 424);
  if (v1)
  {
    FPSupport_DeleteCASlotsInArray(v1);
    v2 = *(const void **)(DerivedStorage + 424);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 424) = 0;
    }
  }
  v3 = *(const void **)(DerivedStorage + 416);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 416) = 0;
  }
}

void fpfsi_UpdateSourceFormatInfoIfNecessary(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AllocatorForMedia;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t);
  CFTypeRef cf;
  CFTypeRef v16;

  cf = 0;
  v16 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v3 + 80) == a1)
  {
    v4 = *(_QWORD *)(DerivedStorage + 40);
    if (v4)
    {
      v5 = v3;
      AllocatorForMedia = FigGetAllocatorForMedia();
      FigAlternateSelectionBossCopyProperty(v4, CFSTR("HasMultiChannelAudio"), AllocatorForMedia, (const __CFArray **)&v16);
      v7 = *(_QWORD *)(DerivedStorage + 40);
      v8 = FigGetAllocatorForMedia();
      FigAlternateSelectionBossCopyProperty(v7, CFSTR("HasAtmosAlternates"), v8, (const __CFArray **)&cf);
      if (*(_QWORD *)(v5 + 536))
      {
        if (FigCFEqual())
        {
          v9 = FigCFEqual();
          v10 = (uint64_t *)MEMORY[0x1E0D49F10];
          if (!v9)
            v10 = (uint64_t *)MEMORY[0x1E0D49F18];
        }
        else
        {
          v10 = (uint64_t *)MEMORY[0x1E0D49F20];
        }
        v11 = *(_QWORD *)(v5 + 536);
        if (v11)
        {
          v12 = *v10;
          v13 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v13)
          {
            v14 = *(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 56);
            if (v14)
              v14(v11, *MEMORY[0x1E0D49588], v12);
          }
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
}

void fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *Next;
  uint64_t v5;
  uint64_t v6;
  char v7;
  CFTypeRef v8;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(v3, a1);
  v5 = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  cf = 0;
  if (Next)
  {
    v6 = v5;
    if (fpfsi_PumpHasEndedOrBufferedBeyondFwdEnd((uint64_t)a1))
    {
      v7 = 0;
      if (!FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(_QWORD *)(DerivedStorage + 32), &cf)
        && !FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(_QWORD *)(v6 + 32), &v8))
      {
        if (cf)
        {
          if (FigCFEqual())
            fpfsi_InvalidatePumpForItem(a1);
        }
        fpfsi_MakeReadyForInspection((uint64_t)Next, 0, &v7);
      }
      if (cf)
        CFRelease(cf);
      if (v8)
        CFRelease(v8);
    }
  }
}

const __CFDictionary *fpfs_IsClosedCaptioningSelected(uint64_t a1, const __CFArray *a2)
{
  const __CFArray *v2;
  uint64_t CFStringForOSTypeValue;
  const __CFDictionary *result;
  const __CFArray *v6;
  uint64_t v7;
  const __CFDictionary *MediaTypeInMediaArray;
  const __CFArray *Value;
  CFIndex v10;
  const __CFDictionary *ValueAtIndex;

  v2 = a2;
  if (!a2)
    v2 = *(const __CFArray **)(a1 + 1784);
  CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  result = fpfs_FindMediaTypeInMediaArray(v2, CFStringForOSTypeValue, 0);
  if (!result)
    return result;
  result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("MediaSelectionOptionsPersistentID"));
  if (!result)
    return result;
  v6 = *(const __CFArray **)(a1 + 1688);
  if (!v6)
    return 0;
  v7 = FigGetCFStringForOSTypeValue();
  MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v6, v7, 0);
  if (!MediaTypeInMediaArray)
  {
    FigSignalErrorAt();
    return 0;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(MediaTypeInMediaArray, CFSTR("MediaSelectionGroupOptions"));
  if (CFArrayGetCount(Value) < 1)
    return 0;
  v10 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v10);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
    if (FigCFEqual())
    {
      CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsMediaType"));
      FigGetCFStringForOSTypeValue();
      if (FigCFEqual())
        break;
    }
    if (++v10 >= CFArrayGetCount(Value))
      return 0;
  }
  return (const __CFDictionary *)1;
}

const __CFDictionary *fpfs_FindMediaTypeInMediaArray(const __CFArray *a1, uint64_t a2, CFIndex *a3)
{
  const __CFDictionary *ValueAtIndex;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;

  ValueAtIndex = 0;
  if (a1 && a2)
  {
    Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v7 = Count;
      v8 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v8);
        CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
        if (FigCFEqual())
          break;
        if (v7 == ++v8)
          return 0;
      }
      if (a3)
        *a3 = v8;
    }
  }
  return ValueAtIndex;
}

uint64_t fpfs_PumpTransferCallback(uint64_t a1, const void *a2, const void *a3)
{
  int v5;
  CFTypeRef v6;
  uint64_t DerivedStorage;
  CFTypeRef v8;
  int v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t AllocatorForMedia;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, __CFString *, uint64_t, uint64_t);
  const __CFAllocator *v29;
  const char *v30;
  CFStringRef v31;
  uint64_t v32;
  void (*v33)(uint64_t, const __CFString *, CFStringRef);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, __CFString *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, __CFString *, uint64_t);
  CFTypeRef cf;
  CFTypeRef v46[25];

  v46[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf = 0;
  v46[0] = 0;
  v5 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, v46, &cf);
  v6 = cf;
  if (!v5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = v46[0];
    CMBaseObjectGetDerivedStorage();
    v9 = *(_DWORD *)(DerivedStorage + 456);
    if (v9 == 1)
    {
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_QWORD *)(DerivedStorage + 928) = FigBytePumpRetain(a2);
      *(_DWORD *)(DerivedStorage + 456) = 3;
      v11 = *(const void **)(DerivedStorage + 936);
      *(_QWORD *)(DerivedStorage + 936) = a3;
      if (a3)
        CFRetain(a3);
      if (v11)
        CFRelease(v11);
      v12 = *(const void **)(DerivedStorage + 3096);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(DerivedStorage + 3096) = 0;
      }
      v13 = *(_QWORD *)(DerivedStorage + 928);
      if (v13)
      {
        AllocatorForMedia = FigGetAllocatorForMedia();
        FigBytePumpGetFigBaseObject(v13);
        v16 = v15;
        v17 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
        if (v17)
          v17(v16, CFSTR("FBP_ClientNetworkActivity"), AllocatorForMedia, DerivedStorage + 3232);
        v18 = *(_QWORD *)(DerivedStorage + 928);
        v19 = FigGetAllocatorForMedia();
        FigBytePumpGetFigBaseObject(v18);
        v21 = v20;
        v22 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
        if (v22)
          v22(v21, CFSTR("FBP_NetworkUrgencyMonitor"), v19, DerivedStorage + 3096);
        FigNetworkUrgencyMonitorSetTimebase(*(_QWORD *)(DerivedStorage + 3096), *(_QWORD *)(DerivedStorage + 576));
        fpfsi_StopGearSwitchReleaseAndCleanPlaybackMonitor(DerivedStorage);
        v23 = *(_QWORD *)(DerivedStorage + 928);
        v24 = FigGetAllocatorForMedia();
        v25 = (uint64_t *)(DerivedStorage + 96);
        FigBytePumpGetFigBaseObject(v23);
        v27 = v26;
        v28 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
        if (v28)
          v28(v27, CFSTR("FBP_PlaybackRateMonitor"), v24, DerivedStorage + 96);
        v29 = (const __CFAllocator *)FigGetAllocatorForMedia();
        if (v6)
          v30 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v30 = "";
        v31 = CFStringCreateWithCString(v29, v30, 0x8000100u);
        v32 = *v25;
        if (*v25)
        {
          v33 = *(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (v33)
            v33(v32, CFSTR("AfmfpbProperty_LoggingID"), v31);
        }
        FigStartForwardingMediaServicesProcessDeathNotification();
      }
      FigRetainProxyRetain();
      FigRetainProxyRetainOwner();
      CMNotificationCenterGetDefaultLocalCenter();
      FigGetAllocatorForMedia();
      FigDeferNotificationToDispatchQueue();
      v34 = *(_QWORD *)(DerivedStorage + 928);
      if (v34)
      {
        v35 = *(_QWORD *)(DerivedStorage + 2536);
        if (v35)
        {
          FigBytePumpGetFigBaseObject(v34);
          v37 = v36;
          v38 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v38)
            v38(v37, CFSTR("FBP_ReportingAgent"), v35);
        }
        v39 = *(_QWORD *)(DerivedStorage + 928);
        if (v39)
        {
          v40 = *(_QWORD *)(DerivedStorage + 3360);
          if (v40)
          {
            FigBytePumpGetFigBaseObject(v39);
            v42 = v41;
            v43 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
            if (v43)
              v43(v42, CFSTR("FBP_MetricEventTimeline"), v40);
          }
        }
      }
      v9 = *(_DWORD *)(DerivedStorage + 456);
    }
    if (v9 == 2)
      *(_DWORD *)(DerivedStorage + 456) = 0;
    fpfs_UnlockAndPostNotificationsWithCaller(v8);
  }
  if (cf)
    CFRelease(cf);
  if (v46[0])
    CFRelease(v46[0]);
  return FigRetainProxyRelease();
}

void fpfsi_StopGearSwitchReleaseAndCleanPlaybackMonitor(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t, const __CFString *, _QWORD);
  const void *v4;

  v1 = *(_QWORD *)(a1 + 96);
  if (v1)
  {
    v3 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v3)
      v3(v1, CFSTR("AfmfpbProperty_SwitchesQualityGearAutomatically"), *MEMORY[0x1E0C9AE40]);
    v4 = *(const void **)(a1 + 96);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 96) = 0;
    }
  }
}

uint64_t fpfs_DeferredPumpTransferCompleted(uint64_t a1, uint64_t a2)
{
  int v2;
  CFTypeRef v3;
  uint64_t DerivedStorage;
  const void *v5;
  void *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  int Code;
  uint64_t v14;
  uint64_t v15;
  const __CFAllocator *AllocatorForMedia;
  const char *v17;
  CFStringRef v18;
  const __CFAllocator *v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, __CFString *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  const __CFDictionary *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, __CFString *, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, __CFString *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, __CFString *, const __CFString *);
  int v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, __CFString *, uint64_t);
  uint64_t v48;
  const __CFAllocator *v49;
  CFDictionaryRef v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, __CFString *, uint64_t, CMTime *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, __CFString *, uint64_t, CMTime *);
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, __CFString *, uint64_t, CMTime *);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, __CFString *, uint64_t, uint64_t);
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t GlobalNetworkBufferingQueue;
  void (*v90)(uint64_t, uint64_t, CMTime *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, __CFString *, uint64_t);
  uint64_t v94;
  int v95;
  void (*v96)(uint64_t, __CFString *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  _BOOL4 v99;
  void (*v100)(uint64_t, __CFString *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, __CFString *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, __CFString *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t CMBaseObject;
  unsigned int (*v113)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int (*v117)(uint64_t, const __CFString *, uint64_t, CMTime *);
  const __CFAllocator *v118;
  __CFDictionary *Mutable;
  const void *URLValue;
  const __CFAllocator *v121;
  uint64_t v122;
  CMTimeValue v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, __CFString *, CMTimeValue);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  CMTimeEpoch v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, __CFString *, uint64_t, os_log_type_t *);
  int v138;
  CFDictionaryRef v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  const void *v146;
  const __CFAllocator *v147;
  CFMutableDictionaryRef v148;
  __CFDictionary *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, __CFString *, uint64_t, CMTime *);
  int v155;
  const void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, void (*)(uint64_t, uint64_t, OpaqueCMBlockBuffer *, unsigned int, int, int, uint64_t, CMTime *, const void *, int, uint64_t, CFErrorRef, CMTime *, uint64_t), void (*)(uint64_t, uint64_t, int, uint64_t, uint64_t), uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(uint64_t);
  uint64_t v164;
  uint64_t v165;
  const void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t, __CFString *, uint64_t, uint64_t);
  uint64_t v172;
  uint64_t v173;
  const __CFAllocator *v174;
  __CFArray *v175;
  __CFArray *v176;
  const __CFArray *v177;
  uint64_t v178;
  uint64_t (*v179)(uint64_t, __CFArray *, _QWORD, _QWORD);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int (*v185)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  const void *NotificationPayloadForProperties;
  CFTypeRef v193;
  uint64_t v195;
  __int128 v196;
  CFTypeRef v197;
  CFTypeRef v198;
  CFTypeRef v199;
  __int128 v200;
  uint64_t v201;
  CFTypeRef v202;
  CFTypeRef v203;
  CMTime cf;
  CFTypeRef v205;
  CFTypeRef v206;
  os_log_type_t type[8];
  CMTime v208;
  const char *v209;
  __int16 v210;
  CFTypeRef v211;
  __int16 v212;
  const char *v213;
  __int16 v214;
  uint64_t v215;
  __int16 v216;
  void *v217;
  __int16 v218;
  int v219;
  CMTime time;
  uint64_t v221;
  CFRange v222;

  v221 = *MEMORY[0x1E0C80C00];
  v202 = 0;
  v203 = 0;
  v2 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v203, &v202);
  v3 = v202;
  if (!v2)
  {
    v200 = *MEMORY[0x1E0CA2E18];
    v201 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v197 = v203;
    v195 = CMBaseObjectGetDerivedStorage();
    v199 = 0;
    v5 = *(const void **)(DerivedStorage + 936);
    if (v5)
      v6 = (void *)CFRetain(v5);
    else
      v6 = 0;
    v198 = v6;
    if (dword_1EE2A2A88)
    {
      LODWORD(cf.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = cf.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
        v9 = value;
      else
        v9 = value & 0xFFFFFFFE;
      if (v9)
      {
        if (v197)
          v10 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v10 = "";
        if (v3)
          v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v11 = "";
        v12 = *(_QWORD *)(DerivedStorage + 928);
        if (v6)
          Code = CFErrorGetCode((CFErrorRef)v6);
        else
          Code = 0;
        LODWORD(v208.value) = 136316931;
        *(CMTimeValue *)((char *)&v208.value + 4) = (CMTimeValue)"fpfs_DeferredPumpTransferCompleted";
        LOWORD(v208.flags) = 2048;
        *(_QWORD *)((char *)&v208.flags + 2) = v197;
        HIWORD(v208.epoch) = 2082;
        v209 = v10;
        v210 = 2048;
        v211 = v3;
        v212 = 2082;
        v213 = v11;
        v214 = 2048;
        v215 = v12;
        v216 = 2113;
        v217 = v6;
        v218 = 1024;
        v219 = Code;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v6)
    {
LABEL_208:
      fpfsi_NotReadyForInspection(v3, (uint64_t)v6);
      v193 = v203;
      goto LABEL_209;
    }
    if (!*(_QWORD *)(DerivedStorage + 928))
      goto LABEL_220;
    v14 = CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(v14 + 928))
    {
      v28 = FigSignalErrorAt();
      if ((_DWORD)v28)
        goto LABEL_207;
      goto LABEL_42;
    }
    v15 = v14;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    if (v3)
      v17 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
    else
      v17 = "";
    v18 = CFStringCreateWithCString(AllocatorForMedia, v17, 0x600u);
    v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v20 = FigAlternateSelectionBossCreate(v19, (_QWORD *)(v15 + 40));
    if (!(_DWORD)v20)
    {
      v21 = *(const void **)(v15 + 40);
      v22 = *(_QWORD *)(v15 + 16);
      *(_OWORD *)&time.value = fpfsi_AlternateSelectionBossSetup_callbacks;
      time.epoch = 0;
      v20 = FigAlternateSelectionBossAddDelegate(v21, v22, (__int128 *)&time.value, 0);
      if (!(_DWORD)v20)
      {
        v20 = FigAlternateSelectionBossSetProperty(*(const void **)(v15 + 40), (uint64_t)CFSTR("loggingID"), v18);
        if (!(_DWORD)v20)
        {
          *(_WORD *)(v15 + 48) = 0;
          v23 = *(_QWORD *)(v15 + 40);
          FigBytePumpGetFigBaseObject(*(_QWORD *)(v15 + 928));
          v25 = v24;
          v26 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v26)
            v26(v25, CFSTR("FBP_AlternateSelectionBoss"), v23);
          v27 = *(_QWORD *)(v15 + 2384);
          if (v27)
            v28 = fpfsi_setPreferredBitrateForExpensiveNetworks(v3, v27);
          else
            v28 = 0;
          v29 = *(const __CFDictionary **)(v15 + 2520);
          if (!v29)
          {
LABEL_39:
            if (v18)
              CFRelease(v18);
            if ((_DWORD)v28)
              goto LABEL_207;
LABEL_42:
            v30 = *(_QWORD *)(DerivedStorage + 2344);
            if (v30)
            {
              FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
              v32 = v31;
              v33 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
              if (v33)
                v33(v32, CFSTR("FBP_ClientAuditToken"), v30);
            }
            v34 = *(unsigned __int8 *)(DerivedStorage + 532);
            v35 = *MEMORY[0x1E0C9AE50];
            v36 = *MEMORY[0x1E0C9AE40];
            FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
            v38 = v37;
            v39 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
            if (v39)
            {
              if (v34)
                v40 = v35;
              else
                v40 = v36;
              v39(v38, CFSTR("FBP_MinimizeNetworkingWhilePaused"), v40);
            }
            FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
            v42 = v41;
            v43 = *(void (**)(uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
            if (v43)
              v43(v42, CFSTR("FBP_PumpClientName"), CFSTR("StreamPlayer"));
            v44 = *(unsigned __int8 *)(DerivedStorage + 3169);
            FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
            v46 = v45;
            v47 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
            if (v47)
            {
              if (v44)
                v48 = v35;
              else
                v48 = v36;
              v47(v46, CFSTR("FBP_CacheMediaSegmentsToDisk"), v48);
            }
            if ((*(_BYTE *)(DerivedStorage + 644) & 1) != 0)
            {
              v49 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              time = *(CMTime *)(DerivedStorage + 632);
              v50 = CMTimeCopyAsDictionary(&time, v49);
              FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
              v52 = v51;
              v53 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 56);
              if (v53)
                v53(v52, CFSTR("FBP_PrebufferReservation"), v50);
              if (v50)
                CFRelease(v50);
            }
            if (!*(_DWORD *)(DerivedStorage + 2236) && !*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24))
              *(_DWORD *)(DerivedStorage + 2236) = 50;
            time.value = 0;
            v54 = CMBaseObjectGetDerivedStorage();
            if (v54)
            {
              v55 = (_BYTE *)v54;
              v56 = *(_QWORD *)(v54 + 928);
              if (v56)
              {
                v57 = FigGetAllocatorForMedia();
                FigBytePumpGetFigBaseObject(v56);
                v59 = v58;
                v60 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
                if (v60)
                {
                  v60(v59, CFSTR("FBP_SessionConfiguration"), v57, &time);
                  if (time.value)
                  {
                    v55[552] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, CFSTR("allowDownloadPerfReports"));
                    v55[554] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, CFSTR("allowProgressiveSwitchUp"));
                    v55[555] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, CFSTR("allowProgressiveStartup"));
                    v55[556] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, CFSTR("allowProgressiveResume"));
                    v55[557] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, CFSTR("suppressUnknownCodecVariants"));
                  }
                }
              }
              fpfsi_RTCReportingUpdateProgressive((uint64_t)v55, 0x1E2FFA178, v55[554]);
              fpfsi_RTCReportingUpdateProgressive((uint64_t)v55, 0x1E2FFA198, v55[555]);
              fpfsi_RTCReportingUpdateProgressive((uint64_t)v55, 0x1E2FFA1B8, v55[556]);
              if (time.value)
                CFRelease((CFTypeRef)time.value);
            }
            time.value = 0;
            if (!v3)
            {
LABEL_86:
              time.value = 0;
              v71 = CMBaseObjectGetDerivedStorage();
              if (v71)
              {
                v72 = v71;
                if (*(_QWORD *)(v71 + 928))
                {
                  if (CelestialIs1GBAudioAccessory())
                  {
                    v73 = *(_QWORD *)(v72 + 928);
                    v74 = FigGetAllocatorForMedia();
                    FigBytePumpGetFigBaseObject(v73);
                    v76 = v75;
                    v77 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
                    if (v77)
                    {
                      v77(v76, CFSTR("FBP_SessionConfiguration"), v74, &time);
                      if (time.value)
                      {
                        *(_QWORD *)(v72 + 536) = (int)(FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, CFSTR("cacheSize1GBAudioAccessoryMB")) << 20);
                        if (time.value)
                          CFRelease((CFTypeRef)time.value);
                      }
                    }
                  }
                }
              }
              v78 = CMBaseObjectGetDerivedStorage();
              *(_OWORD *)&time.value = xmmword_1E2F81880;
              fpfsi_cleanupNetworkCostMonitor();
              v79 = *(_QWORD *)(v78 + 2536);
              if (v79)
              {
                v80 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
                if (v80)
                  v80(v79, CFSTR("playerStats"), 3001, 0, 0);
              }
              v81 = *(_QWORD *)(v78 + 928);
              v82 = FigGetAllocatorForMedia();
              FigBytePumpGetFigBaseObject(v81);
              v84 = v83;
              v85 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
              if (v85)
              {
                v86 = (uint64_t *)(v78 + 2248);
                if (!v85(v84, CFSTR("FBP_NetworkCostMonitor"), v82, v78 + 2248))
                {
                  v87 = *v86;
                  if (*v86)
                  {
                    v88 = *(_QWORD *)(v78 + 16);
                    GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
                    v90 = *(void (**)(uint64_t, uint64_t, CMTime *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 8);
                    if (v90)
                      v90(v87, v88, &time, GlobalNetworkBufferingQueue);
                    v91 = *(_QWORD *)(v78 + 2248);
                    v92 = *(_QWORD *)(v78 + 2528);
                    v93 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
                    if (v93)
                      v93(v91, CFSTR("FNCM_PlaybackSessionId"), v92);
                    v94 = *(_QWORD *)(v78 + 2248);
                    v95 = *(_DWORD *)(v78 + 1880);
                    v96 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
                    if (v96)
                    {
                      if (v95)
                        v97 = v36;
                      else
                        v97 = v35;
                      v96(v94, CFSTR("FNCM_BufferingInProgress"), v97);
                    }
                    v98 = *(_QWORD *)(v78 + 2248);
                    v99 = *(int *)(v78 + 2260) < 1 || *(_BYTE *)(v78 + 2256) == 0;
                    v100 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
                    if (v100)
                    {
                      if (v99)
                        v101 = v36;
                      else
                        v101 = v35;
                      v100(v98, CFSTR("FNCM_FullThrottleDutyCycleRequested"), v101);
                    }
                    fpfsi_updateNetworkCostMonitorMaximumMediaBitrate();
                  }
                }
              }
              fpfsi_setupCMCDHeaderVendor();
              if (*(_DWORD *)(v195 + 808) == 1)
              {
                FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
                v103 = v102;
                v104 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
                if (v104)
                  v104(v103, CFSTR("FBP_NetworkReadsAreOpportunistic"), v35);
                FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
                v106 = v105;
                v107 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
                if (v107)
                  v107(v106, CFSTR("FBP_NetworkReadsContributeToGlobalHistory"), v36);
              }
              v108 = CMBaseObjectGetDerivedStorage();
              time.value = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v208.value = 0;
              cf.value = 0;
              if (*(_QWORD *)(v108 + 928))
              {
                v109 = v108;
                v110 = *(_QWORD *)(v108 + 32);
                v111 = FigGetAllocatorForMedia();
                CMBaseObject = FigAssetGetCMBaseObject(v110);
                v113 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v113)
                {
                  if (!v113(CMBaseObject, CFSTR("assetProperty_CreationOptionsDictionary"), v111, &time))
                  {
                    v114 = *(_QWORD *)(v109 + 32);
                    v115 = FigGetAllocatorForMedia();
                    v116 = FigAssetGetCMBaseObject(v114);
                    v117 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v117)
                    {
                      if (!v117(v116, CFSTR("assetProperty_OriginalNetworkContentURL"), v115, &v208))
                      {
                        v118 = (const __CFAllocator *)FigGetAllocatorForMedia();
                        Mutable = CFDictionaryCreateMutable(v118, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                        if (Mutable)
                        {
                          if (time.value)
                          {
                            URLValue = (const void *)FigCFDictionaryGetURLValue();
                            FigCFDictionaryGetBooleanIfPresent();
                            if (type[0])
                            {
                              if (URLValue)
                              {
                                CFDictionarySetValue(Mutable, CFSTR("FSC_DiskCacheRepositoryURL"), URLValue);
                                CFDictionarySetValue(Mutable, CFSTR("FSC_Backing"), CFSTR("FSC_DiskBacking"));
                                CFDictionarySetValue(Mutable, CFSTR("FSC_ClientName"), CFSTR("player"));
                                FigCFDictionarySetValueFromKeyInDict();
                                FigCFDictionarySetValueFromKeyInDict();
                                v121 = (const __CFAllocator *)FigGetAllocatorForMedia();
                                if (!FigStreamingCacheCreate(v121, (const __CFURL *)v208.value, Mutable, &cf.value))
                                {
                                  v122 = *(_QWORD *)(v109 + 928);
                                  v123 = cf.value;
                                  FigBytePumpGetFigBaseObject(v122);
                                  v125 = v124;
                                  v126 = *(void (**)(uint64_t, __CFString *, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                                  if (v126)
                                    v126(v125, CFSTR("FBP_SegmentCache"), v123);
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          FigSignalErrorAt();
                        }
LABEL_140:
                        if (cf.value)
                          CFRelease((CFTypeRef)cf.value);
                        if (Mutable)
                          CFRelease(Mutable);
                        if (v208.value)
                          CFRelease((CFTypeRef)v208.value);
                        if (time.value)
                          CFRelease((CFTypeRef)time.value);
                        v127 = fpfsi_CoordinateWithAssetDownloader();
                        if ((_DWORD)v127
                          || (CMBaseObjectGetDerivedStorage(),
                              CMNotificationCenterGetDefaultLocalCenter(),
                              v127 = FigNotificationCenterAddWeakListener(),
                              (_DWORD)v127))
                        {
                          v28 = v127;
                          goto LABEL_207;
                        }
                        fpfsi_ConfigurePumpForPlayerAndRelock();
                        if (FigRetainProxyIsInvalidated())
                          fpfs_UnlockAndPostNotificationsWithCaller(v197);
                        v128 = CMBaseObjectGetDerivedStorage();
                        v129 = CMBaseObjectGetDerivedStorage();
                        v130 = *MEMORY[0x1E0CA2E68];
                        *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E68];
                        v131 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
                        time.epoch = v131;
                        v206 = 0;
                        *(_QWORD *)type = 0;
                        v205 = 0;
                        if (!*(_QWORD *)(v128 + 928))
                        {
                          v28 = 0;
                          goto LABEL_189;
                        }
                        v132 = v129;
                        v196 = v130;
                        *(CFAbsoluteTime *)(v128 + 1976) = CFAbsoluteTimeGetCurrent();
                        *(CFAbsoluteTime *)(v128 + 2976) = CFAbsoluteTimeGetCurrent();
                        *(_WORD *)(v128 + 2073) = 0;
                        if (*(_BYTE *)(v132 + 458))
                        {
                          CMNotificationCenterGetDefaultLocalCenter();
                          FigNotificationCenterAddWeakListener();
                        }
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        v133 = *(_QWORD *)(v128 + 928);
                        v134 = FigGetAllocatorForMedia();
                        FigBytePumpGetFigBaseObject(v133);
                        v136 = v135;
                        v137 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                        if (v137)
                        {
                          v138 = v137(v136, CFSTR("FBP_MaxTime"), v134, type);
                          v139 = *(CFDictionaryRef *)type;
                          if (v138 || !*(_QWORD *)type)
                          {
LABEL_161:
                            if (v139)
                              CFRelease(v139);
                            v208.value = 0;
                            if (!*(_QWORD *)(v128 + 3064))
                            {
                              if (*(_QWORD *)(v128 + 928)
                                && (v147 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                                    (v148 = CFDictionaryCreateMutable(v147, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0))
                              {
                                v149 = v148;
                                v150 = *(_QWORD *)(v128 + 928);
                                v151 = FigGetAllocatorForMedia();
                                FigBytePumpGetFigBaseObject(v150);
                                v153 = v152;
                                v154 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                if (v154)
                                {
                                  v155 = v154(v153, CFSTR("FBP_SessionConfiguration"), v151, &v208);
                                  v156 = (const void *)v208.value;
                                  if (!v155)
                                  {
                                    CFDictionarySetValue(v149, CFSTR("FBP_StoreBagConfiguration"), (const void *)v208.value);
                                    v157 = FigGetAllocatorForMedia();
                                    FigBandwidthPredictorCreate(v157, v149, (CFTypeRef *)(v128 + 3064));
                                    v156 = (const void *)v208.value;
                                  }
                                  if (v156)
                                    CFRelease(v156);
                                }
                                CFRelease(v149);
                              }
                              else
                              {
                                FigSignalErrorAt();
                              }
                            }
                            v158 = *(_QWORD *)(v128 + 928);
                            v159 = *(_QWORD *)(v128 + 16);
                            v160 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t, OpaqueCMBlockBuffer *, unsigned int, int, int, uint64_t, CMTime *, const void *, int, uint64_t, CFErrorRef, CMTime *, uint64_t), void (*)(uint64_t, uint64_t, int, uint64_t, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
                            if (v160)
                            {
                              v161 = v160(v158, fpfs_BytePumpFn, fpfsi_DateMappingCallback, v159);
                              if ((_DWORD)v161)
                                goto LABEL_227;
                              v162 = *(_QWORD *)(v128 + 928);
                              v163 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
                              if (v163)
                              {
                                v161 = v163(v162);
                                if (!(_DWORD)v161)
                                {
                                  v164 = *(_QWORD *)(v128 + 40);
                                  v165 = FigGetAllocatorForMedia();
                                  v28 = FigAlternateSelectionBossCopyProperty(v164, CFSTR("MediaSelectionArray"), v165, (const __CFArray **)&v205);
                                  v166 = *(const void **)(v128 + 120);
                                  if (v166)
                                  {
                                    CFRelease(v166);
                                    *(_QWORD *)(v128 + 120) = 0;
                                  }
                                  v167 = *(_QWORD *)(v128 + 928);
                                  v168 = FigGetAllocatorForMedia();
                                  FigBytePumpGetFigBaseObject(v167);
                                  v170 = v169;
                                  v171 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                  if (v171)
                                    v171(v170, CFSTR("FBP_ContentSteeringMonitor"), v168, v128 + 120);
                                  if ((_DWORD)v28
                                    || (fpfsi_MediaSelectionArrayChangedCallback(*(_QWORD *)(v128 + 40), *(_QWORD *)(v128 + 16), v205), v172 = *(_QWORD *)(v128 + 40), v173 = FigGetAllocatorForMedia(), v28 = FigAlternateSelectionBossCopyProperty(v172, CFSTR("FilteredAlternateList"), v173, (const __CFArray **)&v206), (_DWORD)v28))
                                  {
                                    if ((_DWORD)v28 != -15514)
                                      goto LABEL_187;
                                  }
                                  else if (v206 && CFArrayGetCount((CFArrayRef)v206))
                                  {
                                    fpfsi_AlternateListChangedCallback(*(_QWORD *)(v128 + 40), *(_QWORD *)(v128 + 16), (const __CFArray *)v206, 0);
                                  }
                                  fpfsi_RTCReportingReportIRATEventIfNeeded(v128, 800);
                                  if (*(_QWORD *)(v128 + 928))
                                    v28 = 0;
                                  else
                                    v28 = 4294954371;
LABEL_187:
                                  if (v205)
                                    CFRelease(v205);
LABEL_189:
                                  if (v206)
                                    CFRelease(v206);
                                  if (!(_DWORD)v28)
                                  {
                                    v174 = (const __CFAllocator *)FigGetAllocatorForMedia();
                                    v175 = CFArrayCreateMutable(v174, 0, MEMORY[0x1E0C9B378]);
                                    v176 = v175;
                                    if (v175)
                                    {
                                      CFArrayAppendValue(v175, CFSTR("Duration"));
                                      v177 = *(const __CFArray **)(DerivedStorage + 144);
                                      if (v177)
                                      {
                                        v222.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 144));
                                        v222.location = 0;
                                        CFArrayAppendArray(v176, v177, v222);
                                      }
                                      v178 = *(_QWORD *)(DerivedStorage + 32);
                                      v179 = *(uint64_t (**)(uint64_t, __CFArray *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                                      if (v179)
                                      {
                                        v180 = v179(v178, v176, 0, 0);
                                        if (!(_DWORD)v180)
                                        {
                                          if (!fpfsi_GetDuration((uint64_t)v3, &v200))
                                            fpfsi_NowReadyForInspection((const __CFArray *)v3);
                                          if (*(_QWORD *)(DerivedStorage + 928))
                                          {
                                            fpfsi_UpdatePrefersConcurrentSwitching((const __CFArray *)v3);
                                            v181 = *(_QWORD *)(DerivedStorage + 928);
                                            v182 = FigGetAllocatorForMedia();
                                            FigBytePumpGetFigBaseObject(v181);
                                            v184 = v183;
                                            v185 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                            if (v185
                                              && !v185(v184, CFSTR("FBP_RecommendedPrebufferReservation"), v182, &v199))
                                            {
                                              NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(v197, (uint64_t)v3, v186, v187, v188, v189, v190, v191, CFSTR("RecommendedTimeOffsetFromLive"), (uint64_t)CFSTR("TimeOffsetFromLive"));
                                              fpfs_EnqueueNotification(v197, CFSTR("NewRecommendedTimeOffsetFromLive"), v3, NotificationPayloadForProperties);
                                            }
                                            if (v199)
                                              CFRelease(v199);
                                            fpfs_UnlockAndPostNotificationsWithCaller(v197);
                                          }
LABEL_220:
                                          v28 = FigSignalErrorAt();
                                          if (!(_DWORD)v28)
                                          {
                                            v193 = v197;
LABEL_209:
                                            fpfs_UnlockAndPostNotificationsWithCaller(v193);
                                          }
                                          goto LABEL_207;
                                        }
                                        v28 = v180;
                                      }
                                      else
                                      {
                                        v28 = 4294954514;
                                      }
                                    }
                                    else
                                    {
                                      v28 = 4294954510;
                                    }
                                  }
LABEL_207:
                                  FigCreateErrorForOSStatus(v28, (CFErrorRef *)&v198);
                                  v193 = v197;
                                  v6 = (void *)v198;
                                  if (!v198)
                                    goto LABEL_209;
                                  goto LABEL_208;
                                }
LABEL_227:
                                v28 = v161;
                                goto LABEL_187;
                              }
                            }
                            v28 = 4294954514;
                            goto LABEL_187;
                          }
                          CMTimeMakeFromDictionary(&time, *(CFDictionaryRef *)type);
                          *(_OWORD *)&v208.value = v196;
                          v208.epoch = v131;
                          cf = time;
                          if (CMTimeCompare(&v208, &cf))
                          {
                            v146 = (const void *)fpfs_CreateNotificationPayloadForProperties(*(const void **)v128, (uint64_t)v3, v140, v141, v142, v143, v144, v145, CFSTR("SeekableTimeIntervals"), 0);
                            fpfs_PostNotificationWhenUnlocked(*(const void **)v128, CFSTR("SeekableRangeChanged"), v3, v146);
                            if (v146)
                              CFRelease(v146);
                          }
                        }
                        v139 = *(CFDictionaryRef *)type;
                        goto LABEL_161;
                      }
                    }
                  }
                }
              }
              else
              {
                FigSignalErrorAt();
              }
              Mutable = 0;
              goto LABEL_140;
            }
            v61 = CMBaseObjectGetDerivedStorage();
            *(_DWORD *)(v61 + 2260) = 110;
            *(_QWORD *)(v61 + 2264) = 0x3FF8000000000000;
            *(_QWORD *)(v61 + 544) = 0x8000000;
            v62 = *(_QWORD *)(v61 + 928);
            if (!v62)
              goto LABEL_81;
            v63 = FigGetAllocatorForMedia();
            FigBytePumpGetFigBaseObject(v62);
            v65 = v64;
            v66 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
            if (!v66)
              goto LABEL_81;
            v66(v65, CFSTR("FBP_SessionConfiguration"), v63, &time);
            if (!time.value)
              goto LABEL_81;
            v67 = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, CFSTR("synchronizedWatermarksHighWaterMaxSecs"));
            if ((v67 - 1) >= 0x31)
              *(_DWORD *)(v61 + 2260) = v67;
            *(double *)(v61 + 2264) = FigRCLGetDoubleWithDefault((const __CFDictionary *)time.value, CFSTR("synchronizedWatermarksHighWaterScaleFactor"));
            v68 = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, CFSTR("bufferAheadMaxMB"));
            if ((v68 & 0x80000000) == 0)
            {
              v69 = v68 << 20;
              *(_QWORD *)(v61 + 544) = v69;
              if (!(v68 << 20))
              {
LABEL_84:
                if (time.value)
                  CFRelease((CFTypeRef)time.value);
                goto LABEL_86;
              }
            }
            else
            {
LABEL_81:
              v69 = *(_QWORD *)(v61 + 544);
              if (!v69)
                goto LABEL_84;
            }
            v70 = *(_QWORD *)(v61 + 536);
            if (v69 < v70)
              *(_QWORD *)(v61 + 544) = v70;
            goto LABEL_84;
          }
          v20 = fpfsi_setResolutionCapForExpensiveNetworks(v3, v29);
        }
      }
    }
    v28 = v20;
    goto LABEL_39;
  }
  if (v202)
    CFRelease(v202);
  if (v203)
    CFRelease(v203);
  FigRetainProxyReleaseOwner();
  return FigRetainProxyRelease();
}

uint64_t FigBytePumpSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigBytePumpGetFigBaseObject(a1);
  v6 = v5;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t fpfsi_CoordinateWithAssetDownloader()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  CFTypeRef v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef cf;
  CFTypeRef v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  cf = 0;
  v11 = 0;
  if (!*(_QWORD *)(DerivedStorage + 928))
  {
    v2 = FigSignalErrorAt();
LABEL_24:
    v4 = v2;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(DerivedStorage + 2865))
  {
    v2 = FigAssetDownloadCoordinatorMarkAssetForInteractivity(*(_QWORD *)(DerivedStorage + 32));
    if (!(_DWORD)v2)
    {
      v2 = FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(_QWORD *)(v1 + 32), &v11);
      if (!(_DWORD)v2)
      {
        v3 = v11;
        if (v11)
          goto LABEL_6;
        v6 = *(_QWORD *)(v1 + 32);
        AllocatorForMedia = FigGetAllocatorForMedia();
        CMBaseObject = FigAssetGetCMBaseObject(v6);
        v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (!v9)
        {
          v4 = 4294954514;
          goto LABEL_8;
        }
        v2 = v9(CMBaseObject, CFSTR("assetProperty_CreationURL"), AllocatorForMedia, &cf);
        if (!(_DWORD)v2)
        {
          if (FigCFURLIsLocalResource())
          {
            v3 = cf;
            cf = 0;
            v11 = v3;
            if (!v3)
              goto LABEL_7;
          }
          else
          {
            v3 = v11;
            if (!v11)
              goto LABEL_7;
          }
LABEL_6:
          fpfsi_StartDownloadingToURL(v1, v3);
LABEL_7:
          v4 = 0;
          *(_BYTE *)(v1 + 2865) = 1;
          goto LABEL_8;
        }
      }
    }
    goto LABEL_24;
  }
  v4 = 0;
LABEL_8:
  if (!*(_BYTE *)(v1 + 2865))
    FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(v1 + 32));
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  return v4;
}

uint64_t fpfsi_UpdatePrefersConcurrentSwitching(const __CFArray *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t AllocatorForMedia;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, uint64_t, CFBooleanRef *);
  int v9;
  uint64_t v10;
  uint64_t v11;
  CFBooleanRef v12;
  uint64_t (*v13)(uint64_t, const __CFString *, CFBooleanRef);
  CFBooleanRef BOOLean;

  result = CMBaseObjectGetDerivedStorage();
  BOOLean = 0;
  v3 = *(_QWORD *)(result + 928);
  if (v3)
  {
    v4 = result;
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBytePumpGetFigBaseObject(v3);
    v7 = v6;
    result = CMBaseObjectGetVTable();
    v8 = *(void (**)(uint64_t, __CFString *, uint64_t, CFBooleanRef *))(*(_QWORD *)(result + 8) + 48);
    if (v8)
    {
      v8(v7, CFSTR("FBP_PrefersConcurrentSwitch"), AllocatorForMedia, &BOOLean);
      result = (uint64_t)BOOLean;
      if (BOOLean)
      {
        v9 = *(unsigned __int8 *)(v4 + 553);
        result = CFBooleanGetValue(BOOLean);
        if (v9 != (_DWORD)result)
        {
          result = CFBooleanGetValue(BOOLean);
          *(_BYTE *)(v4 + 553) = result;
          if ((_DWORD)result)
          {
            fpfsi_setTimePitchAlgorithm(a1, CFSTR("Varispeed"));
            result = fpfs_EstablishTimebase(a1);
          }
          else
          {
            if (*(float *)(v4 + 840) != 0.0)
            {
              result = fpfs_StopPlaybackByStalledTrack(*(_QWORD *)(v4 + 1040));
              if ((_DWORD)result)
                return result;
              v10 = MEMORY[0x1E0CA2E18];
              *(_OWORD *)(v4 + 408) = *MEMORY[0x1E0CA2E18];
              *(_QWORD *)(v4 + 424) = *(_QWORD *)(v10 + 16);
            }
            if (*(_QWORD *)(v4 + 1760))
              result = fpfs_CancelTrialSwitch((uint64_t)a1);
          }
          v11 = *(_QWORD *)(v4 + 96);
          if (v11)
          {
            v12 = BOOLean;
            result = CMBaseObjectGetVTable();
            v13 = *(uint64_t (**)(uint64_t, const __CFString *, CFBooleanRef))(*(_QWORD *)(result + 8) + 56);
            if (v13)
              return v13(v11, CFSTR("AfmfpbProperty_PrefersConcurrentSwitch"), v12);
          }
        }
      }
    }
  }
  return result;
}

void fpfsi_NotReadyForInspection(const void *a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t AllocatorForMedia;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  const void *v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef cf;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  v6 = DerivedStorage[116];
  if (v6)
  {
    cf = 0;
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBytePumpGetFigBaseObject(v6);
    v9 = v8;
    v10 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v10)
      v10(v9, CFSTR("FBP_ErrorLog"), AllocatorForMedia, &cf);
    if (!FigRetainProxyIsInvalidated())
    {
      v11 = (const void *)DerivedStorage[239];
      v12 = cf;
      DerivedStorage[239] = cf;
      if (v12)
        CFRetain(v12);
      if (v11)
        CFRelease(v11);
    }
    if (cf)
      CFRelease(cf);
  }
  fpfs_StopPlayingItem(v5, a1, a2);
  v13 = (const void *)DerivedStorage[278];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[278] = 0;
  }
  CFRelease(a1);
}

void fpfsi_AlternateListChangedCallback(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFDictionary *a4)
{
  const __CFArray *v6;
  uint64_t DerivedStorage;
  CFTypeRef v8;
  uint64_t v9;
  const void *Value;
  uint64_t v11;
  _BOOL4 HasOnlyAudioOnly;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  uint64_t v24;
  void (*v25)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v26;
  void (*v27)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v28;
  void (*v29)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v30;
  void (*v31)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  CFIndex v32;
  CFIndex Count;
  const void *ValueAtIndex;
  double Resolution;
  double v36;
  float v37;
  uint64_t v38;
  _BOOL8 v39;
  void (*v40)(uint64_t, __CFString *, __CFString *, _BOOL8, _QWORD);
  uint64_t v41;
  uint64_t updated;
  uint64_t v43;
  void (*v44)(uint64_t, __CFString *, __CFString *, const void *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  __CFArray *VideoLayoutTags;
  __CFString *VideoLayoutLoggingStringFromCollectionArray;
  uint64_t AllocatorForMedia;
  uint64_t v50;
  CFTypeRef v51;
  CFTypeRef v52;
  CFTypeRef v53;
  int v54;
  int v55;
  __int16 v56;
  CFTypeRef v57;
  CFTypeRef v58;
  CFTypeRef v59;
  CFTypeRef cf;
  CFTypeRef v61;

  v52 = 0;
  v53 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v53, &v52))
  {
    v6 = (const __CFArray *)v52;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = v53;
    v9 = CMBaseObjectGetDerivedStorage();
    if (!FigCFEqual())
      goto LABEL_77;
    if (*(_BYTE *)(DerivedStorage + 49))
    {
      if (!a3)
        goto LABEL_64;
      if (CFArrayGetCount(a3) > 1)
        goto LABEL_77;
      if (!CFArrayGetCount(a3))
      {
LABEL_64:
        if (a4)
        {
          Value = CFDictionaryGetValue(a4, CFSTR("FASBFIK_StoppedAtFilterName"));
          a4 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FASBFIK_StoppedFilterError"));
        }
        else
        {
          Value = 0;
        }
        if (FigCFEqual() || FigCFEqual())
          fpfsi_RTCReportingUpdateAvailableAlternateHDCPLevels(DerivedStorage, 0, -2, 0, -2, 1u);
        v43 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 2536);
        if (v43)
        {
          v44 = *(void (**)(uint64_t, __CFString *, __CFString *, const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 48);
          if (v44)
            v44(v43, CFSTR("playerStats"), CFSTR("StoppingFilterName"), Value, 0);
        }
        if (a4)
        {
          fpfs_StopPlayingItem(v9, v6, a4);
          goto LABEL_77;
        }
      }
      if (*(_DWORD *)(v9 + 32))
      {
        updated = fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList(v6, a3);
        if (!(_DWORD)updated)
          goto LABEL_67;
      }
      else
      {
        updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)v6, a3, 0);
        if (!(_DWORD)updated)
        {
LABEL_67:
          fpfsi_updateNetworkCostMonitorMaximumMediaBitrate();
          v45 = CMBaseObjectGetDerivedStorage();
          v61 = 0;
          if (*(_QWORD *)(v45 + 1696))
          {
            v46 = v45;
            if (!FigAlternateSelectionBossHasFilter(*(_QWORD *)(v45 + 40), (uint64_t)CFSTR("VideoLayoutPinning")))
            {
              VideoLayoutTags = FigAlternateGetVideoLayoutTags(*(__CFArray **)(v46 + 1696));
              VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(VideoLayoutTags);
              if (VideoLayoutLoggingStringFromCollectionArray)
                CFRelease(VideoLayoutLoggingStringFromCollectionArray);
              AllocatorForMedia = FigGetAllocatorForMedia();
              v50 = FigAlternateVideoLayoutPinningFilterCreate(AllocatorForMedia, VideoLayoutTags, &v61);
              v51 = v61;
              if (!(_DWORD)v50)
              {
                FigAlternateSelectionBossAddFilter(*(_QWORD *)(v46 + 40), v61);
                v51 = v61;
              }
              if (v51)
                CFRelease(v51);
              if ((_DWORD)v50)
                goto LABEL_76;
            }
          }
LABEL_77:
          fpfs_UnlockAndPostNotificationsWithCaller(v8);
        }
      }
    }
    else
    {
      v11 = CMBaseObjectGetDerivedStorage();
      v56 = 0;
      v54 = -2;
      v55 = -2;
      HasOnlyAudioOnly = FigAlternateSelectionUtility_AlternateListHasOnlyAudioOnly(a3);
      FigAlternateSelectionUtility_GetLowestRequiredHDCPLevel(a3, (char *)&v56 + 1, &v55, (char *)&v56, &v54);
      *(_BYTE *)(v11 + 1729) = v56;
      if (!HasOnlyAudioOnly)
      {
        fpfsi_setHasDiscoveredVideoAndNotify(*(const void **)v11, v6);
        fpfsi_setStereoAudioSpatializationByDefaultForVideoItem(v6);
      }
      cf = 0;
      v61 = 0;
      v58 = 0;
      v59 = 0;
      v57 = 0;
      v13 = *(_QWORD *)(v11 + 40);
      if (v13)
      {
        v14 = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v13, CFSTR("HasHDRAlternates"), v14, (const __CFArray **)&cf);
        v15 = *(_QWORD *)(v11 + 40);
        v16 = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v15, CFSTR("HasAtmosAlternates"), v16, (const __CFArray **)&v61);
        v17 = *(_QWORD *)(v11 + 40);
        v18 = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v17, CFSTR("HasMultiChannelAudio"), v18, (const __CFArray **)&v59);
        v19 = *(_QWORD *)(v11 + 40);
        v20 = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v19, CFSTR("HasLosslessAudio"), v20, (const __CFArray **)&v58);
        v21 = *(_QWORD *)(v11 + 40);
        v22 = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v21, CFSTR("HasBinauralAudio"), v22, (const __CFArray **)&v57);
        v23 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
        if (v61 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
          fpfsi_RTCReportingUpdateATMOSMetricVar(v11, (_BYTE *)(v11 + 2568), (_BYTE *)(v11 + 2564), 1, 1, 1);
        if (cf == v23)
        {
          v24 = *(_QWORD *)(v11 + 2536);
          if (v24)
          {
            v25 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v25)
              v25(v24, CFSTR("playerStats"), CFSTR("HDRAvail"), 1, 0);
          }
        }
        if (v59 == v23)
        {
          v26 = *(_QWORD *)(v11 + 2536);
          if (v26)
          {
            v27 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v27)
              v27(v26, CFSTR("playerStats"), CFSTR("MCAvail"), 1, 0);
          }
        }
        if (v58 == v23)
        {
          v28 = *(_QWORD *)(v11 + 2536);
          if (v28)
          {
            v29 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v29)
              v29(v28, CFSTR("playerStats"), CFSTR("LLSAvail"), 1, 0);
          }
        }
        if (v57 == v23)
        {
          v30 = *(_QWORD *)(v11 + 2536);
          if (v30)
          {
            v31 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v31)
              v31(v30, CFSTR("playerStats"), CFSTR("BnrlAvail"), 1, 0);
          }
        }
      }
      if (cf)
        CFRelease(cf);
      if (v61)
        CFRelease(v61);
      if (v59)
        CFRelease(v59);
      if (v58)
        CFRelease(v58);
      if (v57)
        CFRelease(v57);
      fpfsi_RTCReportingUpdateAvailableAlternateHDCPLevels(v11, HIBYTE(v56), v55, v56, v54, 0);
      v32 = 0;
      do
      {
        if (a3)
          Count = CFArrayGetCount(a3);
        else
          Count = 0;
        if (v32 >= Count)
        {
          v37 = 0.0;
          goto LABEL_49;
        }
        ValueAtIndex = CFArrayGetValueAtIndex(a3, v32);
        Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
        ++v32;
      }
      while (Resolution == 0.0 || v36 == 0.0);
      v37 = Resolution / v36;
LABEL_49:
      *(float *)(v11 + 3172) = v37;
      v38 = *(_QWORD *)(v11 + 2536);
      v39 = *(_BYTE *)(v11 + 771) == 0;
      if (v38)
      {
        v40 = *(void (**)(uint64_t, __CFString *, __CFString *, _BOOL8, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v40)
          v40(v38, CFSTR("playerStats"), CFSTR("SessAuOn"), v39, 0);
      }
      *(_BYTE *)(DerivedStorage + 49) = 1;
      v41 = CMBaseObjectGetDerivedStorage();
      if (!*(_QWORD *)(v41 + 40)
        || !*(_BYTE *)(v41 + 48)
        || !*(_BYTE *)(v41 + 49)
        || (updated = fpfsi_InitialConfigureAlernateSelectionBoss(v6), !(_DWORD)updated))
      {
        fpfsi_UpdateSourceFormatInfoIfNecessary((uint64_t)v6);
        goto LABEL_77;
      }
    }
    v50 = updated;
LABEL_76:
    fpfs_StopPlayingItemWithOSStatus(v9, v6, v50);
    goto LABEL_77;
  }
  if (v53)
    CFRelease(v53);
  if (v52)
    CFRelease(v52);
}

void fpfsi_MediaSelectionArrayChangedCallback(uint64_t a1, uint64_t a2, const void *a3)
{
  const __CFArray *v4;
  uint64_t DerivedStorage;
  CFTypeRef v6;
  const void *v7;
  const void *v8;
  uint64_t AppliedMediaArray;
  CFArrayRef v10;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef MutableCopy;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  int v18;
  const __CFArray *v19;
  CFIndex v20;
  CFIndex v21;
  CFIndex i;
  const __CFDictionary *v23;
  const __CFBoolean *v24;
  const __CFBoolean *v25;
  const __CFDictionary *v26;
  const __CFBoolean *v27;
  const __CFDictionary *v28;
  const __CFAllocator *v29;
  CFDictionaryRef v30;
  CFDictionaryRef v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFArray *v35;
  CFTypeRef v36;
  CFIndex v37;
  CFTypeRef v38;
  CFTypeRef cf;
  CFArrayRef theArray;
  void *values;
  const void *v42;
  void *keys;
  const __CFString *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v38))
  {
    v4 = (const __CFArray *)v38;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = cf;
    v34 = CMBaseObjectGetDerivedStorage();
    if (!FigCFEqual())
      goto LABEL_45;
    if (!a3)
      goto LABEL_44;
    v7 = *(const void **)(DerivedStorage + 1688);
    *(_QWORD *)(DerivedStorage + 1688) = a3;
    CFRetain(a3);
    if (v7)
      CFRelease(v7);
    theArray = 0;
    if (!*(_QWORD *)(DerivedStorage + 1688))
      goto LABEL_44;
    v8 = *(const void **)(DerivedStorage + 1784);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 1784) = 0;
    }
    AppliedMediaArray = fpfs_CreateAppliedMediaArray(DerivedStorage, (CFTypeRef *)&theArray);
    if ((_DWORD)AppliedMediaArray)
    {
LABEL_56:
      v33 = AppliedMediaArray;
    }
    else
    {
      v10 = theArray;
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      if (v10)
      {
        MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, theArray);
        *(_QWORD *)(DerivedStorage + 1784) = MutableCopy;
        if (theArray)
        {
          CFRelease(theArray);
          theArray = 0;
          MutableCopy = *(CFMutableArrayRef *)(DerivedStorage + 1784);
        }
      }
      else
      {
        MutableCopy = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)(DerivedStorage + 1784) = MutableCopy;
      }
      if (MutableCopy)
      {
        v35 = v4;
        v36 = v6;
        Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 1688));
        if (Count < 1)
        {
LABEL_43:
          fpfs_FindAndSetForcedSubtitle(DerivedStorage);
          v4 = v35;
          v6 = v36;
          goto LABEL_44;
        }
        v14 = Count;
        v15 = 0;
        v37 = Count;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1688), v15);
          Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
          if (!fpfs_FindMediaTypeInMediaArray(*(const __CFArray **)(DerivedStorage + 1784), (uint64_t)Value, 0))
          {
            FigGetCFStringForOSTypeValue();
            v18 = FigCFEqual();
            v19 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupOptions"));
            keys = 0;
            v44 = 0;
            values = 0;
            v42 = 0;
            v20 = CFArrayGetCount(v19);
            if (v20 < 1)
            {
              if (v18)
                goto LABEL_42;
              i = 0;
            }
            else
            {
              v21 = v20;
              for (i = 0; i != v21; ++i)
              {
                v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, i);
                v24 = (const __CFBoolean *)CFDictionaryGetValue(v23, CFSTR("MediaSelectionOptionsIsDefault"));
                if (v24)
                {
                  if (CFBooleanGetValue(v24))
                  {
                    if (!v18)
                      goto LABEL_35;
                    v25 = (const __CFBoolean *)CFDictionaryGetValue(v23, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"));
                    if (v25)
                    {
                      if (!CFBooleanGetValue(v25))
                      {
                        CFDictionaryGetValue(v23, CFSTR("MediaSelectionOptionsMediaType"));
                        if (FigCFEqual())
                          goto LABEL_35;
                      }
                    }
                  }
                }
              }
              i = 0;
              if (v18)
              {
                v14 = v37;
                while (1)
                {
                  v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, i);
                  v27 = (const __CFBoolean *)CFDictionaryGetValue(v26, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"));
                  if (v27)
                  {
                    if (!CFBooleanGetValue(v27))
                      break;
                  }
                  if (v21 == ++i)
                    goto LABEL_42;
                }
              }
              else
              {
LABEL_35:
                v14 = v37;
              }
            }
            v28 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, i);
            values = (void *)CFDictionaryGetValue(v28, CFSTR("MediaSelectionOptionsPersistentID"));
            if (values)
            {
              keys = CFSTR("MediaSelectionOptionsPersistentID");
            }
            else
            {
              keys = CFSTR("MediaSelectionOptionsUniqueOutOfBandID");
              values = (void *)CFDictionaryGetValue(v28, CFSTR("MediaSelectionOptionsUniqueOutOfBandID"));
              if (!values)
                goto LABEL_55;
            }
            v44 = CFSTR("MediaSelectionGroupMediaType");
            v42 = Value;
            v29 = (const __CFAllocator *)FigGetAllocatorForMedia();
            v30 = CFDictionaryCreate(v29, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!v30)
            {
LABEL_55:
              AppliedMediaArray = FigSignalErrorAt();
              v4 = v35;
              v6 = v36;
              if ((_DWORD)AppliedMediaArray)
                goto LABEL_56;
LABEL_44:
              if (!*(_BYTE *)(DerivedStorage + 48))
              {
                *(_BYTE *)(DerivedStorage + 48) = 1;
                v32 = CMBaseObjectGetDerivedStorage();
                if (*(_QWORD *)(v32 + 40))
                {
                  if (*(_BYTE *)(v32 + 48))
                  {
                    if (*(_BYTE *)(v32 + 49))
                    {
                      v33 = fpfsi_InitialConfigureAlernateSelectionBoss(v4);
                      if ((_DWORD)v33)
LABEL_54:
                        fpfs_StopPlayingItemWithOSStatus(v34, v4, v33);
                    }
                  }
                }
              }
LABEL_45:
              fpfs_UnlockAndPostNotificationsWithCaller(v6);
            }
            v31 = v30;
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 1784), v30);
            CFRelease(v31);
          }
LABEL_42:
          if (++v15 == v14)
            goto LABEL_43;
        }
      }
      v33 = 4294954510;
    }
    FigSignalErrorAt();
    goto LABEL_54;
  }
  if (cf)
    CFRelease(cf);
  if (v38)
    CFRelease(v38);
}

uint64_t fpfsi_setPreferredBitrateForExpensiveNetworks(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeRef *v6;
  const void *v7;
  CFTypeRef v8;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v10;
  uint64_t (*v11)(CFTypeRef, const __CFString *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int SInt32;
  int v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  unsigned int v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v5 = DerivedStorage;
  v6 = (CFTypeRef *)(DerivedStorage + 104);
  v7 = *(const void **)(DerivedStorage + 104);
  v8 = v7;
  if (!v7)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v10 = FigAlternateFilterMonitorCreateForExpensiveNetwork(AllocatorForMedia, a1, v6);
    if ((_DWORD)v10)
      return v10;
    v8 = *v6;
    if (!*v6)
      return 4294954434;
  }
  v11 = *(uint64_t (**)(CFTypeRef, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
  if (v11)
    v12 = v11(v8, CFSTR("AlternateFilterMonitorProperty_PreferredPeakBitrateForExpensiveNetwork"), a2);
  else
    v12 = 4294954514;
  v13 = *(_QWORD *)(v5 + 2536);
  SInt32 = FigCFNumberGetSInt32();
  if (v13)
  {
    v15 = SInt32;
    v16 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
    if (v16)
      v16(v13, CFSTR("playerStats"), CFSTR("BcapX"), v15, 0);
  }
  if (!v7)
  {
    v17 = FigAlternateSelectionBossAddMonitor(*(const void **)(v5 + 40), *(const void **)(v5 + 104));
    if (v17)
      return v17;
    else
      return v12;
  }
  return v12;
}

uint64_t fpfsi_setResolutionCapForExpensiveNetworks(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeRef *v6;
  const void *v7;
  CFTypeRef v8;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v10;
  uint64_t (*v11)(CFTypeRef, const __CFString *, const __CFDictionary *);
  uint64_t v12;
  uint64_t v13;
  double width;
  void (*v15)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v16;
  double height;
  void (*v18)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  unsigned int v19;
  CGSize v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v5 = DerivedStorage;
  v6 = (CFTypeRef *)(DerivedStorage + 112);
  v7 = *(const void **)(DerivedStorage + 112);
  v8 = v7;
  if (!v7)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v10 = FigAlternateFilterMonitorCreateForExpensiveNetwork(AllocatorForMedia, a1, v6);
    if ((_DWORD)v10)
      return v10;
    v8 = *v6;
    if (!*v6)
      return 4294954434;
  }
  v11 = *(uint64_t (**)(CFTypeRef, const __CFString *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 56);
  if (v11)
    v12 = v11(v8, CFSTR("AlternateFilterMonitorProperty_PreferredMaximumResolutionForExpensiveNetwork"), a2);
  else
    v12 = 4294954514;
  v21 = (CGSize)*MEMORY[0x1E0C9D820];
  CGSizeMakeWithDictionaryRepresentation(a2, &v21);
  v13 = *(_QWORD *)(v5 + 2536);
  if (v13)
  {
    width = v21.width;
    v15 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v15)
      v15(v13, CFSTR("playerStats"), CFSTR("CapReWdX"), (uint64_t)width, 0);
  }
  v16 = *(_QWORD *)(v5 + 2536);
  if (v16)
  {
    height = v21.height;
    v18 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v18)
      v18(v16, CFSTR("playerStats"), CFSTR("CapReHtX"), (uint64_t)height, 0);
  }
  if (!v7)
  {
    v19 = FigAlternateSelectionBossAddMonitor(*(const void **)(v5 + 40), *(const void **)(v5 + 112));
    if (v19)
      return v19;
    else
      return v12;
  }
  return v12;
}

uint64_t fpfsi_InitialConfigureAlernateSelectionBoss(const __CFArray *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AllocatorForMedia;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFAllocator *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ArrayValue;
  uint64_t v31;
  const __CFArray *v32;
  const __CFAllocator *v33;
  uint64_t v34;
  CFTypeRef v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const __CFAllocator *v44;
  uint64_t updated;
  uint64_t *v46;
  const __CFAllocator *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, const __CFString *, uint64_t);
  const __CFAllocator *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, const __CFString *, uint64_t);
  const __CFAllocator *v55;
  const __CFAllocator *v56;
  CFTypeRef v57;
  uint64_t v58;
  uint64_t (*v59)(CFTypeRef, const __CFString *, uint64_t);
  const __CFAllocator *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, const __CFString *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, __CFString *, uint64_t, const void **);
  const void *v69;
  const __CFAllocator *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, const __CFString *, uint64_t);
  uint64_t v74;
  uint64_t (*v75)(uint64_t, const __CFString *, const void *);
  uint64_t v76;
  uint64_t v77;
  CFNumberRef v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v81;
  const __CFAllocator *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  const __CFDictionary *v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, const __CFString *, const __CFDictionary *);
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, const __CFString *, uint64_t);
  int v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, const __CFString *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, const __CFString *, uint64_t);
  uint64_t v100;
  uint64_t (*v101)(uint64_t, const __CFString *, _QWORD);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  CFArrayRef v105;
  CFIndex Count;
  CFTypeRef v108;
  CFTypeRef v109;
  CFArrayRef theArray;
  CFTypeRef v111;
  CFTypeRef cf[2];
  __int128 v113;
  CFTypeRef v114;
  CFTypeRef v115;
  CFTypeRef v116;
  const void *v117;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v109 = 0;
  theArray = 0;
  v108 = 0;
  if (!*(_QWORD *)(DerivedStorage + 40))
    goto LABEL_171;
  v4 = v3;
  v5 = fpfsi_SetupAlternateSelectionBossWithPreferPlaybackFromCache((uint64_t)a1);
  if ((_DWORD)v5)
  {
LABEL_178:
    v10 = v5;
    goto LABEL_166;
  }
  CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 872))
  {
    v6 = CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    if (*(_QWORD *)(v6 + 40))
    {
      v7 = v6;
      AllocatorForMedia = FigGetAllocatorForMedia();
      v9 = FigAlternateSuppressVP9FilterCreate(AllocatorForMedia, cf);
      if (!(_DWORD)v9)
        v9 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v7 + 40), cf[0]);
      v10 = v9;
      if (cf[0])
        CFRelease(cf[0]);
      if ((_DWORD)v10)
        goto LABEL_166;
    }
  }
  v115 = (CFTypeRef)-1;
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = CMBaseObjectGetDerivedStorage();
  v114 = 0;
  v111 = 0;
  if (!*(_QWORD *)(v11 + 40))
    goto LABEL_180;
  v13 = v12;
  if (!PKDGetSystemCPC(&v115))
  {
    v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v15 = FigAlternateAllowedCPCFilterCreate(v14, (uint64_t)v115, &v114);
    if ((_DWORD)v15)
      goto LABEL_179;
    v15 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v11 + 40), v114);
    if ((_DWORD)v15)
      goto LABEL_179;
  }
  v16 = FigGetAllocatorForMedia();
  v15 = FigAlternateMediaValidationFilterCreate(v16, *(_BYTE *)(v11 + 557) == 0, &v111);
  if ((_DWORD)v15
    || (v15 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v11 + 40), v111), (_DWORD)v15)
    || (v15 = fpfsi_SetupSupportedAudioFormatFilter((uint64_t)a1), (_DWORD)v15)
    || (v15 = fpfsi_ConfigureAlternateSelectionBossForHighestAtmosFiltering(), (_DWORD)v15)
    || (v15 = fpfsi_ConfigureAlternateSelectionBossPreferExclusiveAudioPassthroughFiltering(), (_DWORD)v15)
    || (v15 = fpfsi_ConfigureAlternateSelectionBossForNeroSupportedVideoFormat(v11, *(unsigned __int8 *)(v13 + 462)),
        (_DWORD)v15)
    || (v15 = fpfsi_setUpVideoLayoutFilters((uint64_t)a1), (_DWORD)v15))
  {
LABEL_179:
    v10 = v15;
    goto LABEL_42;
  }
  v17 = CMBaseObjectGetDerivedStorage();
  v18 = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  v117 = 0;
  v116 = 0;
  if (*(_QWORD *)(v17 + 40))
  {
    v19 = v18;
    v20 = FigGetAllocatorForMedia();
    v21 = FigAlternateSuppressDoVi5StereoFilterCreate(v20, cf);
    if (!(_DWORD)v21)
    {
      v21 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v17 + 40), cf[0]);
      if (!(_DWORD)v21)
      {
        if (!*(_BYTE *)(v19 + 873)
          || (v22 = FigGetAllocatorForMedia(),
              v21 = FigAlternateMediaValidationForStereoVideoFilterCreate(v22, &v116),
              !(_DWORD)v21)
          && (v21 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v17 + 40), v116), !(_DWORD)v21))
        {
          v23 = FigGetAllocatorForMedia();
          v21 = FigAlternateSuppressDoVi20MonoFilterCreate(v23, &v117);
          if (!(_DWORD)v21)
            v21 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v17 + 40), v117);
        }
      }
    }
    v10 = v21;
  }
  else
  {
    v10 = 0;
  }
  if (cf[0])
    CFRelease(cf[0]);
  if (v117)
    CFRelease(v117);
  if (v116)
    CFRelease(v116);
  if (!(_DWORD)v10)
  {
    v24 = CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    if (*(_QWORD *)(v24 + 40))
    {
      v25 = v24;
      v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v27 = FigAlternatePreferVideoCodecsWithHardwareDecodeFilterCreate(v26, cf);
      if (!(_DWORD)v27)
        v27 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
      v10 = v27;
      if (cf[0])
        CFRelease(cf[0]);
      goto LABEL_42;
    }
LABEL_180:
    v10 = 0;
  }
LABEL_42:
  if (v114)
    CFRelease(v114);
  if (v111)
    CFRelease(v111);
  if ((_DWORD)v10)
    goto LABEL_166;
  cf[0] = 0;
  v28 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v28 + 40))
  {
    v29 = v28;
    if (*(_QWORD *)(v28 + 400))
    {
      ArrayValue = FigCFDictionaryGetArrayValue();
      v31 = FigCFDictionaryGetArrayValue();
      if (ArrayValue | v31)
      {
        v32 = (const __CFArray *)v31;
        v33 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v34 = FigAlternateAllowableMediaSubtypeFilterCreate(v33, (const __CFArray *)ArrayValue, v32, cf);
        v35 = cf[0];
        if ((_DWORD)v34)
        {
          v10 = v34;
          if (!cf[0])
          {
LABEL_53:
            if ((_DWORD)v10)
              goto LABEL_166;
            goto LABEL_54;
          }
        }
        else
        {
          v10 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v29 + 40), cf[0]);
          v35 = cf[0];
          if (!cf[0])
            goto LABEL_53;
        }
        CFRelease(v35);
        goto LABEL_53;
      }
    }
  }
LABEL_54:
  v5 = fpfsi_ConfigureAlternateSelectionBossForScanningRole();
  if ((_DWORD)v5)
    goto LABEL_178;
  v5 = fpfsi_ConfigureAlternateSelectionBossForSuppressAudioOnly();
  if ((_DWORD)v5)
    goto LABEL_178;
  v5 = fpfsi_ConfigureAlternateSelectionBossForPlayRate((uint64_t)a1, *(float *)(v4 + 108));
  if ((_DWORD)v5)
    goto LABEL_178;
  v5 = fpfsi_CreateAndAddCombinedAudioPreferenceFilter((uint64_t)a1);
  if ((_DWORD)v5)
    goto LABEL_178;
  v5 = fpfsi_ConfigurePlaybackMonitorForBandwidthCap((uint64_t)a1, *(_DWORD *)(DerivedStorage + 2376));
  if ((_DWORD)v5)
    goto LABEL_178;
  v36 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v36 + 96))
  {
    v37 = v36;
    v38 = *(_QWORD *)(v36 + 40);
    if (v38)
    {
      v39 = *(const void **)(v37 + 128);
      if (!v39)
      {
        v40 = FigGetAllocatorForMedia();
        v5 = FigAlternatePassthroughFilterCreate(v40, CFSTR("PlayerPassThroughFilter"), 625, (_QWORD *)(v37 + 128));
        if ((_DWORD)v5)
          goto LABEL_178;
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        *(_BYTE *)(v37 + 136) = 1;
        v38 = *(_QWORD *)(v37 + 40);
        v39 = *(const void **)(v37 + 128);
      }
      v5 = FigAlternateSelectionBossAddFilter(v38, v39);
      if ((_DWORD)v5)
        goto LABEL_178;
    }
  }
  v41 = FigGetAllocatorForMedia();
  v5 = FigAlternateMediaSelectionAudibleFilterCreate(v41, *(const void **)(DerivedStorage + 1784), &v108);
  if ((_DWORD)v5)
    goto LABEL_178;
  v5 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), v108);
  if ((_DWORD)v5)
    goto LABEL_178;
  v117 = 0;
  v42 = CMBaseObjectGetDerivedStorage();
  v43 = CMBaseObjectGetDerivedStorage();
  v115 = 0;
  v116 = 0;
  v114 = 0;
  if (!*(_QWORD *)(v42 + 56))
  {
    v44 = (const __CFAllocator *)FigGetAllocatorForMedia();
    updated = FigAlternateFilterMonitorCreateForHDCP(v44, 0, 0, (CFTypeRef *)(v42 + 56));
    if ((_DWORD)updated)
      goto LABEL_105;
    updated = fpfsi_updateDisplayListForHDCPMonitor();
    if ((_DWORD)updated)
      goto LABEL_105;
    FigAlternateFilterMonitorForHDCPNeedsNewExternalProtectionMonitorIfNecessary(*(void **)(v42 + 56), *(unsigned __int8 *)(v43 + 462), *(const void **)(v43 + 488));
    updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 56));
    if ((_DWORD)updated)
      goto LABEL_105;
  }
  v46 = (uint64_t *)(v42 + 64);
  if (*(_QWORD *)(v42 + 64))
    goto LABEL_72;
  v60 = (const __CFAllocator *)FigGetAllocatorForMedia();
  updated = FigAlternateFilterMonitorCreateForPreferredVideoFormat(v60, (CFTypeRef *)(v42 + 64));
  if ((_DWORD)updated)
    goto LABEL_105;
  v61 = *v46;
  v62 = *(_QWORD *)(v43 + 672);
  v63 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v63)
    goto LABEL_115;
  updated = v63(v61, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v62);
  if ((_DWORD)updated)
    goto LABEL_105;
  v64 = *(_QWORD *)(v42 + 928);
  if (v64)
  {
    v65 = FigGetAllocatorForMedia();
    FigBytePumpGetFigBaseObject(v64);
    v67 = v66;
    v68 = *(void (**)(uint64_t, __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v68)
    {
      v68(v67, CFSTR("FBP_NominalVideoFramerate"), v65, &v117);
      v69 = v117;
    }
    else
    {
      v69 = 0;
    }
    v74 = *v46;
    v75 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (!v75)
      goto LABEL_115;
    updated = v75(v74, CFSTR("AlternateFilterMonitorProperty_MaxContentFrameRate"), v69);
    if ((_DWORD)updated)
      goto LABEL_105;
  }
  v76 = CMBaseObjectGetDerivedStorage();
  v77 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v76 + 888)
    || (*(_DWORD *)(v77 + 808) - 1) <= 1 && CelestialShouldLimitHDRConcurrentPlayback())
  {
    LODWORD(cf[0]) = 1;
    v78 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, cf);
    v79 = *v46;
    v80 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
    if (v80)
    {
      v10 = v80(v79, CFSTR("AlternateFilterMonitorProperty_PreferredVideoRange"), v78);
      if (!v78)
        goto LABEL_113;
    }
    else
    {
      v10 = 4294954514;
      if (!v78)
      {
LABEL_113:
        if ((_DWORD)v10)
          goto LABEL_116;
        goto LABEL_174;
      }
    }
    CFRelease(v78);
    goto LABEL_113;
  }
LABEL_174:
  updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 64));
  if ((_DWORD)updated)
    goto LABEL_105;
LABEL_72:
  if (!*(_QWORD *)(v42 + 72))
  {
    v47 = (const __CFAllocator *)FigGetAllocatorForMedia();
    updated = FigAlternateFilterMonitorCreateForSupportedFramerateBucketCap(v47, (CFTypeRef *)(v42 + 72));
    if ((_DWORD)updated)
      goto LABEL_105;
    v48 = *(_QWORD *)(v42 + 72);
    v49 = *(_QWORD *)(v43 + 672);
    v50 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (!v50)
      goto LABEL_115;
    updated = v50(v48, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v49);
    if ((_DWORD)updated)
      goto LABEL_105;
    updated = fpfsi_updateSupportedFramerateBucketCapMonitorFromFVT();
    if ((_DWORD)updated)
      goto LABEL_105;
    updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 72));
    if ((_DWORD)updated)
      goto LABEL_105;
  }
  if (*(_QWORD *)(v42 + 80))
  {
LABEL_83:
    updated = fpfsi_setOverrideDisplaysSupportedVideoRange();
    if ((_DWORD)updated)
      goto LABEL_105;
    v55 = (const __CFAllocator *)FigGetAllocatorForMedia();
    updated = FigAlternateFilterMonitorCreateForLowPowerMode(v55, &v116);
    if ((_DWORD)updated)
      goto LABEL_105;
    updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), v116);
    if ((_DWORD)updated)
      goto LABEL_105;
    if (v116)
      CFRelease(v116);
    v56 = (const __CFAllocator *)FigGetAllocatorForMedia();
    updated = FigAlternateFilterMonitorCreateForStreamingRestrictions(v56);
    if ((_DWORD)updated)
      goto LABEL_105;
    v57 = v115;
    v58 = *(_QWORD *)(v42 + 2536);
    v59 = *(uint64_t (**)(CFTypeRef, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
    if (v59)
    {
      updated = v59(v57, CFSTR("AlternateFilterMonitorProperty_ReportingAgent"), v58);
      if ((_DWORD)updated)
        goto LABEL_105;
      updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), v115);
      if ((_DWORD)updated)
        goto LABEL_105;
      if (!CelestialShouldLimitHDRFrameRateForPlayback() || *(_QWORD *)(v42 + 88))
      {
        v10 = 0;
        goto LABEL_116;
      }
      v70 = (const __CFAllocator *)FigGetAllocatorForMedia();
      *(_OWORD *)cf = xmmword_1932F74B8;
      v113 = unk_1932F74C8;
      updated = FigAlternateFilterMonitorCreateForVideoRangeFramerateCap(v70, (uint64_t)cf, (CFTypeRef *)(v42 + 88));
      if ((_DWORD)updated)
        goto LABEL_105;
      v71 = *(_QWORD *)(v42 + 88);
      v72 = *(_QWORD *)(v43 + 672);
      v73 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (v73)
      {
        updated = v73(v71, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v72);
        if (!(_DWORD)updated)
          updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 88));
        goto LABEL_105;
      }
    }
    goto LABEL_115;
  }
  v51 = (const __CFAllocator *)FigGetAllocatorForMedia();
  updated = FigAlternateFilterMonitorCreateForSupportedVideoRange(v51, (CFTypeRef *)(v42 + 80));
  if ((_DWORD)updated)
  {
LABEL_105:
    v10 = updated;
    goto LABEL_116;
  }
  v52 = *(_QWORD *)(v42 + 80);
  v53 = *(_QWORD *)(v43 + 672);
  v54 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v54)
  {
    updated = v54(v52, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v53);
    if (!(_DWORD)updated)
    {
      updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 80));
      if (!(_DWORD)updated)
        goto LABEL_83;
    }
    goto LABEL_105;
  }
LABEL_115:
  v10 = 4294954514;
LABEL_116:
  if (v115)
    CFRelease(v115);
  if (v117)
    CFRelease(v117);
  if (!(_DWORD)v10)
  {
    v5 = fpfsi_UpdateResourceSpecifierOnResourceArbiter((uint64_t)a1);
    if ((_DWORD)v5)
      goto LABEL_178;
    v5 = fpfsi_SetupResolutionCapFilter((uint64_t)a1);
    if ((_DWORD)v5)
      goto LABEL_178;
    if (*(_BYTE *)(v4 + 841))
    {
      if (CelestialShouldLimit4kConcurrentPlayback())
      {
        v81 = CMBaseObjectGetDerivedStorage();
        if (*(float *)(v81 + 108) != 0.0
          && fpfs_CanRenderVideo(v81, 0)
          && !fpfs_GrabPlayer4kPlaybackBaton(*(const void **)DerivedStorage))
        {
          v5 = fpfsi_addHDResolutionCap();
          if ((_DWORD)v5)
            goto LABEL_178;
        }
      }
    }
    v82 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v5 = FigAlternatePreferBestFormatForVideoRangeFilterCreate(v82, 1, &v109);
    if ((_DWORD)v5)
      goto LABEL_178;
    v5 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), v109);
    if ((_DWORD)v5)
      goto LABEL_178;
    v83 = CMBaseObjectGetDerivedStorage();
    v84 = CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(v83 + 40))
      goto LABEL_158;
    if (!*(_QWORD *)(v83 + 96))
    {
      v102 = FigSignalErrorAt();
LABEL_157:
      v10 = v102;
      if ((_DWORD)v102)
        goto LABEL_166;
LABEL_158:
      v5 = FigAlternateSelectionBossApplyFilters(*(const void **)(DerivedStorage + 40));
      if (!(_DWORD)v5)
      {
        v103 = *(_QWORD *)(DerivedStorage + 40);
        v104 = FigGetAllocatorForMedia();
        v10 = FigAlternateSelectionBossCopyProperty(v103, CFSTR("FilteredAlternateList"), v104, &theArray);
        v105 = theArray;
        if ((_DWORD)v10)
        {
LABEL_163:
          if (v105)
            CFRelease(v105);
          goto LABEL_166;
        }
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          v105 = theArray;
          if (Count >= 1)
          {
            fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList(a1, theArray);
            v105 = theArray;
          }
          goto LABEL_163;
        }
LABEL_171:
        v10 = 0;
        goto LABEL_166;
      }
      goto LABEL_178;
    }
    v85 = v84;
    CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
    if (CurrentAudioPersistentIDFromMediaOption)
    {
      v87 = CurrentAudioPersistentIDFromMediaOption;
      v88 = *(_QWORD *)(v83 + 96);
      v89 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 56);
      if (!v89)
        goto LABEL_165;
      v5 = v89(v88, CFSTR("AfmfpbProperty_AudibleMediaSelectionOptionPersistentID"), v87);
      if ((_DWORD)v5)
        goto LABEL_178;
    }
    if (a1
      && *(_QWORD *)(v83 + 2448)
      && ((*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 560) & 4) != 0
       || FigGetCFPreferenceNumberWithDefault()))
    {
      v90 = *(_QWORD *)(v83 + 96);
      v91 = *(_QWORD *)(v83 + 2448);
      v92 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (!v92)
        goto LABEL_165;
      v5 = v92(v90, CFSTR("AfmfpbProperty_TransitionAttributes"), v91);
      if ((_DWORD)v5)
        goto LABEL_178;
    }
    v5 = FigAlternateSelectionBossAddMonitor(*(const void **)(v83 + 40), *(const void **)(v83 + 96));
    if ((_DWORD)v5)
      goto LABEL_178;
    v5 = fpfsi_setPlaybackMonitorAutoSwitchStreamQuality();
    if ((_DWORD)v5)
      goto LABEL_178;
    v93 = *(_DWORD *)(v83 + 2860);
    if (v93 != -1)
    {
      v94 = *(_QWORD *)(v83 + 96);
      v95 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (!v95)
        goto LABEL_165;
      if (v93 == 1)
        v96 = *MEMORY[0x1E0C9AE50];
      else
        v96 = *MEMORY[0x1E0C9AE40];
      v5 = v95(v94, CFSTR("AfmfpbProperty_StartsOnFirstEligibleVariant"), v96);
      if ((_DWORD)v5)
        goto LABEL_178;
    }
    v97 = *(_QWORD *)(v83 + 576);
    if (v97)
    {
      v98 = *(_QWORD *)(v83 + 96);
      v99 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (!v99)
        goto LABEL_165;
      v5 = v99(v98, CFSTR("AfmfpbProperty_Timebase"), v97);
      if ((_DWORD)v5)
        goto LABEL_178;
    }
    if (!*(_BYTE *)(v83 + 137))
    {
LABEL_156:
      fpfsi_setAndPerformResourceConservation(a1, (int *)(v85 + 764));
      v102 = FigAlternateFilterMonitorForPlaybackBitrateStartup(*(const void **)(v83 + 96));
      goto LABEL_157;
    }
    v100 = *(_QWORD *)(v83 + 96);
    v101 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v101)
    {
      v5 = v101(v100, CFSTR("AfmfpbProperty_DisableTrialSwitchUpTimer"), *MEMORY[0x1E0C9AE50]);
      if ((_DWORD)v5)
        goto LABEL_178;
      goto LABEL_156;
    }
LABEL_165:
    v10 = 4294954514;
  }
LABEL_166:
  if (v109)
    CFRelease(v109);
  if (v108)
    CFRelease(v108);
  return v10;
}

uint64_t fpfsi_RTCReportingUpdateAvailableAlternateHDCPLevels(uint64_t result, int a2, int a3, int a4, int a5, unsigned int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v15;
  uint64_t (*v16)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);

  v9 = result;
  if (a2)
  {
    v10 = *(_QWORD *)(result + 2536);
    if (v10)
    {
      result = CMBaseObjectGetVTable();
      v12 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16)
                                                                                          + 56);
      if (v12)
        result = v12(v10, CFSTR("playerStats"), CFSTR("MinReqHDCP"), a3, 0);
    }
  }
  if (a4)
  {
    v13 = *(_QWORD *)(v9 + 2536);
    if (v13)
    {
      result = CMBaseObjectGetVTable();
      v14 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16)
                                                                                          + 56);
      if (v14)
        result = v14(v13, CFSTR("playerStats"), CFSTR("MinReqIfHDCP"), a5, 0);
    }
  }
  v15 = *(_QWORD *)(v9 + 2536);
  if (v15)
  {
    result = CMBaseObjectGetVTable();
    v16 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 56);
    if (v16)
      return v16(v15, CFSTR("playerStats"), CFSTR("HDCPReqNotMet"), a6, 0);
  }
  return result;
}

uint64_t fpfsi_UpdateValidAlternateListAndSuggestAnAlternate(uint64_t a1, const __CFArray *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  const __CFAllocator *AllocatorForMedia;
  const __CFArray *v9;
  const void *ValueAtIndex;
  uint64_t v11;
  const __CFArray *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  const __CFArray *Count;
  uint64_t v17;
  CFMutableStringRef Mutable;
  CFIndex v19;
  uint64_t v20;
  const void *v21;
  int PeakBitRate;
  int AverageBitRate;
  int HasVideo;
  int HasAudio;
  int v26;
  const __CFAllocator *v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int CFPreferenceNumberWithDefault;
  const __CFAllocator *v40;
  __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, __CFString *, __CFString *, CFMutableStringRef, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t type[4];
  unsigned int v62;
  unsigned int v63;
  CFArrayRef theArray[18];

  theArray[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  if (a2)
  {
    v7 = *(const void **)(DerivedStorage + 1680);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v6 + 1680) = 0;
    }
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(_QWORD *)(v6 + 1680) = CFArrayCreateMutableCopy(AllocatorForMedia, 0, a2);
  }
  if (*(_BYTE *)(v6 + 49))
  {
    v9 = *(const __CFArray **)(v6 + 1680);
    if (!v9)
    {
      v11 = FigSignalErrorAt();
      goto LABEL_10;
    }
    if (CFArrayGetCount(v9) < 1)
    {
      v11 = 4294954371;
      goto LABEL_10;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 1680), 0);
    *(_BYTE *)(v6 + 1728) = fpfs_audioOnlyValidAlternateList(v6);
    if (a3)
    {
      v11 = 0;
      *a3 = ValueAtIndex;
      goto LABEL_10;
    }
  }
  else if (dword_1EE2A2A88)
  {
    v62 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = 0;
LABEL_10:
  theArray[0] = 0;
  if (!*(_BYTE *)(v6 + 552))
    return v11;
  v12 = *(const __CFArray **)(v6 + 1680);
  if (!v12 || CFArrayGetCount(v12) < 1)
    return v11;
  v63 = -1;
  v62 = -1;
  *(_DWORD *)type = -1;
  v13 = *(_QWORD *)(v6 + 128);
  if (!v13)
    goto LABEL_102;
  v14 = FigGetAllocatorForMedia();
  v15 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v15)
    goto LABEL_102;
  v15(v13, CFSTR("FAFProperty_AlternateList"), v14, theArray);
  Count = theArray[0];
  if (!theArray[0])
    return v11;
  v58 = 0;
  v59 = 0;
  v53 = 0;
  v54 = 0;
  v17 = 0;
  v55 = 0;
  v56 = 0;
  v60 = 0;
  Mutable = 0;
  v19 = 0;
  v20 = 0xFFFFFFFFLL;
  v51 = 0;
  v52 = 0xFFFFFFFFLL;
  v57 = 0xFFFFFFFFLL;
LABEL_17:
  Count = (const __CFArray *)CFArrayGetCount(Count);
  while (v19 < (uint64_t)Count)
  {
    v21 = CFArrayGetValueAtIndex(theArray[0], v19);
    PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v21);
    AverageBitRate = FigAlternateGetAverageBitRate((uint64_t)v21);
    HasVideo = FigAlternateHasVideo((uint64_t)v21);
    HasAudio = FigAlternateHasAudio(v21);
    if (PeakBitRate < 1)
      goto LABEL_71;
    v26 = HasAudio;
    if (!Mutable)
    {
      v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
      Mutable = CFStringCreateMutable(v27, 0);
      if (!Mutable)
        goto LABEL_71;
    }
    if (CFStringGetLength(Mutable) >= 1)
      CFStringAppend(Mutable, CFSTR(", "));
    v28 = PeakBitRate / 0x3E8uLL;
    if (AverageBitRate < 1)
      CFStringAppendFormat(Mutable, 0, CFSTR("%d"), v28, v48);
    else
      CFStringAppendFormat(Mutable, 0, CFSTR("%d:%d"), v28, AverageBitRate / 0x3E8uLL);
    if (HasVideo && v26)
    {
      v60 = (v60 + 1);
      if (v17 <= v28)
        v17 = v28;
      else
        v17 = v17;
      if (v20 >= v28)
        v20 = v28;
      else
        v20 = v20;
      if (AverageBitRate >= 1)
      {
        v29 = AverageBitRate / 0x3E8u;
        if (v56 <= AverageBitRate / 0x3E8u)
          v30 = v29;
        else
          v30 = v56;
        v56 = v30;
        v31 = &v63;
        v32 = CFSTR(":m");
        goto LABEL_64;
      }
      v32 = CFSTR(":m");
LABEL_70:
      CFStringAppend(Mutable, v32);
      goto LABEL_71;
    }
    if (v26)
    {
      if (v58 <= v28)
        v33 = v28;
      else
        v33 = v58;
      v58 = v33;
      v59 = (v59 + 1);
      if (v57 >= v28)
        v34 = v28;
      else
        v34 = v57;
      v57 = v34;
      if (AverageBitRate < 1)
      {
        v32 = CFSTR(":a");
        goto LABEL_70;
      }
      v29 = AverageBitRate / 0x3E8u;
      if (v55 <= AverageBitRate / 0x3E8u)
        v35 = v29;
      else
        v35 = v55;
      v55 = v35;
      v31 = (unsigned int *)type;
      v32 = CFSTR(":a");
LABEL_64:
      if (*v31 < v29)
        v29 = *v31;
      *v31 = v29;
      goto LABEL_70;
    }
    if (HasVideo)
    {
      if (v53 <= v28)
        v36 = v28;
      else
        v36 = v53;
      v53 = v36;
      v54 = (v54 + 1);
      if (v52 >= v28)
        v37 = v28;
      else
        v37 = v52;
      v52 = v37;
      if (AverageBitRate < 1)
      {
        v32 = CFSTR(":v");
        goto LABEL_70;
      }
      v29 = AverageBitRate / 0x3E8u;
      if (v51 <= AverageBitRate / 0x3E8u)
        v38 = v29;
      else
        v38 = v51;
      v51 = v38;
      v31 = &v62;
      v32 = CFSTR(":v");
      goto LABEL_64;
    }
LABEL_71:
    ++v19;
    Count = theArray[0];
    if (theArray[0])
      goto LABEL_17;
  }
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (Mutable
    && CFStringGetLength(Mutable) > CFPreferenceNumberWithDefault
    && (CFRelease(Mutable),
        v40 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v41 = CFStringCreateMutable(v40, 0),
        (Mutable = v41) != 0))
  {
    CFStringAppend(v41, CFSTR("TOOBIG:"));
    if ((_DWORD)v60)
    {
      v42 = v59;
      if (v63)
        CFStringAppendFormat(Mutable, 0, CFSTR("m[%d]:%d:%d...%d:%d"), v60, v20, v63, v17, v56);
      else
        CFStringAppendFormat(Mutable, 0, CFSTR("m[%d]:%d...%d"), v60, v20, v17);
      v11 = v11;
      v43 = v54;
      if ((_DWORD)v54)
      {
        CFStringAppend(Mutable, CFSTR(","));
LABEL_86:
        if (v62)
          CFStringAppendFormat(Mutable, 0, CFSTR("v[%d]:%d:%d...%d:%d"), v43, v52, v62, v53, v51);
        else
          CFStringAppendFormat(Mutable, 0, CFSTR("v[%d]:%d...%d"), v43, v52, v53, v49, v50);
        if ((_DWORD)v42)
        {
          if ((_DWORD)v60)
LABEL_93:
            CFStringAppend(Mutable, CFSTR(","));
LABEL_94:
          if (*(_DWORD *)type)
            CFStringAppendFormat(Mutable, 0, CFSTR("v[%d]:%d:%d...%d:%d"), v42, v57, *(unsigned int *)type, v58, v55);
          else
            CFStringAppendFormat(Mutable, 0, CFSTR("v[%d]:%d...%d"), v42, v57, v58, v49, v50);
        }
      }
      else if ((_DWORD)v59)
      {
        goto LABEL_93;
      }
    }
    else
    {
      v11 = v11;
      v42 = v59;
      v43 = v54;
      if ((_DWORD)v54)
        goto LABEL_86;
      if ((_DWORD)v59)
        goto LABEL_94;
    }
  }
  else
  {
    v11 = v11;
  }
  v44 = *(_QWORD *)(v6 + 2536);
  if (v44)
  {
    v45 = *(void (**)(uint64_t, __CFString *, __CFString *, CFMutableStringRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 48);
    if (v45)
      v45(v44, CFSTR("playerStats"), CFSTR("variantList"), Mutable, 0);
  }
  if (Mutable)
    CFRelease(Mutable);
LABEL_102:
  if (theArray[0])
    CFRelease(theArray[0]);
  return v11;
}

uint64_t fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList(const __CFArray *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  const __CFDictionary *v6;
  const __CFArray *v7;
  const __CFAllocator *AllocatorForMedia;
  const __CFArray *MutableCopy;
  uint64_t updated;
  int CurrentDisplayVideoRangeFromMonitor;
  const __CFString *VideoRangeStringFromFPSupportVideoRange;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  const void *v17;
  CFTypeRef v18;
  const void *v19;
  char v20;
  const void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, const __CFString *, uint64_t, _BYTE *);
  int v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  const __CFString *v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int VideoRange;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int ShouldLimitHDRConcurrentPlayback;
  int HDCPLevel;
  int v53;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, const __CFString *, uint64_t, _BYTE *);
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v64;
  void (*v65)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  CMTimeEpoch v66;
  uint64_t v67;
  _BOOL4 v68;
  int PeakBitRate;
  uint64_t v70;
  uint64_t v71;
  uint64_t i;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  const char *v80;
  NSObject *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  NSObject *v87;
  unsigned int v88;
  unsigned int v89;
  NSObject *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  NSObject *v96;
  unsigned int v97;
  unsigned int v98;
  const __CFArray *v99;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v102;
  const void *v103;
  const char *v104;
  NSObject *v105;
  unsigned int v106;
  unsigned int v107;
  NSObject *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  const char *v112;
  NSObject *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  const char *v117;
  const char *v118;
  const char *v119;
  int v120;
  const char *v121;
  NSObject *v122;
  unsigned int v123;
  unsigned int v124;
  const char *v125;
  uint64_t v126;
  int v127;
  const char *v128;
  NSObject *v129;
  NSObject *v130;
  unsigned int v131;
  unsigned int v132;
  const void *v133;
  _BOOL4 v134;
  int AudioChannelCount;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, const __CFString *, uint64_t, _BYTE *);
  const __CFArray *v139;
  CFIndex v140;
  CFIndex Count;
  const void *ValueAtIndex;
  int MaxAudioChannelCount;
  uint64_t v144;
  uint64_t v145;
  const __CFDictionary *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const __CFDictionary *v150;
  const __CFNumber *v151;
  int v152;
  int AudioChannelCounts;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  CMTimeEpoch v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int (*v169)(uint64_t, const __CFString *, uint64_t, CMTime *);
  NSObject *v171;
  void *v172;
  dispatch_time_t v173;
  const __CFAllocator *v174;
  int v175;
  const void *v176;
  const __CFArray *v177;
  CFIndex v178;
  CFIndex v179;
  CFIndex v180;
  const void *v181;
  double RankingScore;
  _BOOL4 v183;
  int v185;
  int v186;
  int v187;
  int v188;
  CFIndex v189;
  CFIndex v190;
  int v191;
  double v192;
  CMTimeValue v193;
  const void *v194;
  int v195;
  double v196;
  NSObject *v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  const char *v201;
  const char *v202;
  const char *v203;
  const void *v204;
  uint64_t v205;
  const void *v206;
  uint64_t v207;
  _BOOL4 v208;
  const void *v210;
  _BOOL4 v211;
  unsigned int SwitchOptions;
  CMTimeEpoch epoch;
  CMTimeFlags flags;
  _BOOL4 v215;
  _BOOL4 v216;
  CMTimeEpoch v217;
  uint64_t v218;
  __int128 v219;
  const __CFArray *v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  CMTime v224;
  CMTime v225;
  CMTime rhs;
  CMTime lhs;
  CMTimeValue v228;
  CMTimeScale timescale;
  CMTime valuePtr;
  const char *v231;
  __int16 v232;
  const __CFArray *v233;
  __int16 v234;
  const char *v235;
  __int16 v236;
  _BYTE v237[10];
  const void *v238;
  _BYTE time1[32];
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;

  v243 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v221 = CMBaseObjectGetDerivedStorage();
  v223 = 0;
  CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
  if (*(_BYTE *)(DerivedStorage + 49))
  {
    v6 = CurrentAudioPersistentIDFromMediaOption;
    v7 = *(const __CFArray **)(DerivedStorage + 1680);
    if (v7 && CFArrayGetCount(v7))
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, *(CFArrayRef *)(DerivedStorage + 1680));
    }
    else
    {
      MutableCopy = 0;
    }
    updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, a2, &v223);
    if ((_DWORD)updated)
      goto LABEL_27;
    if (!*(_QWORD *)(DerivedStorage + 1696))
    {
      CurrentDisplayVideoRangeFromMonitor = fpfsi_GetCurrentDisplayVideoRangeFromMonitor();
      VideoRangeStringFromFPSupportVideoRange = fpfs_getVideoRangeStringFromFPSupportVideoRange(CurrentDisplayVideoRangeFromMonitor);
      fpfs_RTCReportingSetDisplayVideoRange(DerivedStorage, (uint64_t)VideoRangeStringFromFPSupportVideoRange);
    }
    v13 = v223;
    v14 = CMBaseObjectGetDerivedStorage();
    v15 = *(_QWORD *)(v14 + 1760);
    if (*(_QWORD *)(v14 + 96))
    {
      if (v15)
      {
        v16 = FigCFEqual() != 0;
        FigAlternateGetPeakBitRate(*(_QWORD *)(v14 + 1760));
        FigAlternateGetPeakBitRate(v13);
LABEL_15:
        v17 = *(const void **)(v14 + 1760);
        if (v17)
        {
          v18 = CFRetain(v17);
          v19 = v18;
          if (v15)
            v20 = v16;
          else
            v20 = 1;
          if ((v20 & 1) != 0)
          {
            v21 = v18;
            if (v18)
              goto LABEL_33;
          }
          else
          {
            v24 = fpfs_CancelTrialSwitch((uint64_t)a1);
            if ((_DWORD)v24)
            {
              v23 = v24;
              v21 = v19;
              if (!MutableCopy)
                goto LABEL_327;
              goto LABEL_326;
            }
            if (v19)
              CFRelease(v19);
          }
LABEL_32:
          v21 = 0;
          v19 = *(const void **)(DerivedStorage + 1696);
          if (!v19)
          {
            v220 = MutableCopy;
            v222 = 0;
            v19 = 0;
            goto LABEL_37;
          }
LABEL_33:
          if (!FigCFEqual())
          {
            v41 = v223;
            v42 = CMBaseObjectGetDerivedStorage();
            VideoRange = FigAlternateGetVideoRange(*(_QWORD *)(v42 + 1696));
            v44 = FigAlternateGetVideoRange(v41);
            if (VideoRange <= 1 && v44 >= 2)
            {
              if (CelestialShouldLimitHDRConcurrentPlayback())
              {
                v45 = CMBaseObjectGetDerivedStorage();
                if (*(float *)(v45 + 108) != 0.0 && fpfs_CanRenderVideo(v45, 0) && !fpfs_GrabPlayerHDRPlaybackBaton())
                {
                  if (dword_1EE2A2A88)
                  {
                    v99 = MutableCopy;
                    LODWORD(lhs.value) = 0;
                    LOBYTE(rhs.value) = 0;
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    value = lhs.value;
                    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value))
                      v102 = value;
                    else
                      v102 = value & 0xFFFFFFFE;
                    if (v102)
                    {
                      v103 = *(const void **)DerivedStorage;
                      if (v103)
                        v104 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                      else
                        v104 = "";
                      if (a1)
                        v121 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                      else
                        v121 = "";
                      LODWORD(valuePtr.value) = 136316162;
                      *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_UpdateValidAlternateListAndEval"
                                                                                   "uateCurrentAlternateAgaintValidAlternateList";
                      LOWORD(valuePtr.flags) = 2048;
                      *(_QWORD *)((char *)&valuePtr.flags + 2) = v103;
                      HIWORD(valuePtr.epoch) = 2082;
                      v231 = v104;
                      v232 = 2048;
                      v233 = a1;
                      v234 = 2082;
                      v235 = v121;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    MutableCopy = v99;
                  }
                  v23 = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, MutableCopy, 0);
                  if (!(_DWORD)v23)
                  {
                    fpfsi_SwitchBetweenHDRAndSDR((uint64_t)a1, 1);
                    if (!MutableCopy)
                      goto LABEL_327;
                    goto LABEL_326;
                  }
                  goto LABEL_325;
                }
              }
            }
            v46 = v223;
            v47 = CMBaseObjectGetDerivedStorage();
            if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 841))
            {
              v48 = FigAlternateIs4k(*(_QWORD *)(v47 + 1696));
              v49 = FigAlternateIs4k(v46);
              if (v48 != v49)
              {
                if (v49)
                {
                  if (CelestialShouldLimit4kConcurrentPlayback())
                  {
                    v50 = CMBaseObjectGetDerivedStorage();
                    if (*(float *)(v50 + 108) != 0.0
                      && fpfs_CanRenderVideo(v50, 0)
                      && !fpfs_GrabPlayer4kPlaybackBaton(*(const void **)DerivedStorage))
                    {
                      v23 = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, MutableCopy, 0);
                      if (!(_DWORD)v23)
                      {
                        fpfsi_SwitchBetween4kAndHD((uint64_t)a1, 1);
                        if (!MutableCopy)
                          goto LABEL_327;
                        goto LABEL_326;
                      }
                      goto LABEL_325;
                    }
                  }
                }
              }
            }
          }
          if (FigCFEqual())
            goto LABEL_324;
          v220 = MutableCopy;
          v222 = 1;
LABEL_37:
          v25 = CMBaseObjectGetDerivedStorage();
          v26 = -2;
          LODWORD(valuePtr.value) = -2;
          v27 = *(_QWORD *)(v25 + 56);
          if (v27)
          {
            *(_QWORD *)time1 = 0;
            v28 = FigGetAllocatorForMedia();
            v29 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
            if (v29)
            {
              v30 = v29(v27, CFSTR("AlternateFilterMonitorProperty_MaxProtectedAlternateHDCPLevel"), v28, time1);
              v31 = *(const void **)time1;
              if (!v30 && *(_QWORD *)time1)
              {
                CFNumberGetValue(*(CFNumberRef *)time1, kCFNumberSInt32Type, &valuePtr);
                v31 = *(const void **)time1;
              }
              if (v31)
                CFRelease(v31);
            }
            v26 = valuePtr.value;
          }
          v218 = (uint64_t)v6;
          v32 = v223;
          v33 = CMBaseObjectGetDerivedStorage();
          v34 = CMBaseObjectGetDerivedStorage();
          v35 = *(_QWORD *)(v33 + 1696);
          if (!v35)
          {
            v40 = 0;
            goto LABEL_78;
          }
          v36 = FigAlternateGetVideoRange(v35);
          v37 = FigAlternateGetVideoRange(v32);
          if (v36 >= 2 && v37 <= 1)
          {
            v38 = fpfsi_GetCurrentDisplayVideoRangeFromMonitor();
            v39 = fpfs_getVideoRangeStringFromFPSupportVideoRange(v38);
            fpfs_RTCReportingSetDisplayVideoRange(v33, (uint64_t)v39);
            if (*(_DWORD *)(v34 + 808) == 2)
            {
              if (v38 == 1)
              {
                v40 = 1;
                goto LABEL_78;
              }
            }
            else
            {
              ShouldLimitHDRConcurrentPlayback = CelestialShouldLimitHDRConcurrentPlayback();
              v40 = 1;
              if (v38 == 1 || ShouldLimitHDRConcurrentPlayback)
                goto LABEL_78;
            }
          }
          HDCPLevel = FigAlternateGetHDCPLevel(*(_QWORD *)(v33 + 1696));
          v53 = FigAlternateGetHDCPLevel(v32);
          v40 = HDCPLevel >= 0 && HDCPLevel != v53 && HDCPLevel > v26;
LABEL_78:
          v216 = v40;
          v56 = (__int128 *)MEMORY[0x1E0CA2E18];
          v228 = *MEMORY[0x1E0CA2E18];
          timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
          SwitchOptions = GetSwitchOptions(DerivedStorage, 1);
          LODWORD(valuePtr.value) = 0;
          *(_QWORD *)time1 = 0;
          v57 = *(_QWORD *)(DerivedStorage + 56);
          if (v57)
          {
            v58 = FigGetAllocatorForMedia();
            v59 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
            if (v59 && !v59(v57, CFSTR("AlternateFilterMonitorProperty_HDCPErrorCount"), v58, time1))
            {
              if (!*(_QWORD *)time1)
                goto LABEL_91;
              CFNumberGetValue(*(CFNumberRef *)time1, kCFNumberSInt32Type, &valuePtr);
              if (LODWORD(valuePtr.value))
              {
                v60 = *(_DWORD *)(DerivedStorage + 52);
                v61 = LODWORD(valuePtr.value) - v60;
                if (LODWORD(valuePtr.value) != v60)
                {
                  if (LODWORD(valuePtr.value) > v60)
                  {
                    v62 = *(_QWORD *)(DerivedStorage + 2536);
                    if (v62)
                    {
                      v63 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 32);
                      if (v63)
                        v63(v62, CFSTR("playerStats"), CFSTR("HDCPErrCount"), v61);
                    }
                  }
                  *(_DWORD *)(DerivedStorage + 52) = valuePtr.value;
                }
              }
            }
            if (*(_QWORD *)time1)
              CFRelease(*(CFTypeRef *)time1);
          }
LABEL_91:
          v64 = *(_QWORD *)(DerivedStorage + 2536);
          if (v64)
          {
            v65 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 56);
            if (v65)
              v65(v64, CFSTR("playerStats"), CFSTR("DevHDCP"), v26, 0);
          }
          v66 = *((_QWORD *)v56 + 2);
          if (v222)
          {
            memset(time1, 0, 24);
            fpfs_GetNextTimeToPlayIfEstablished((uint64_t)a1, (uint64_t)time1);
            lhs = *(CMTime *)time1;
            rhs = *(CMTime *)(DerivedStorage + 1176);
            CMTimeAdd(&valuePtr, &lhs, &rhs);
            v228 = valuePtr.value;
            flags = valuePtr.flags;
            timescale = valuePtr.timescale;
            epoch = valuePtr.epoch;
          }
          else
          {
            flags = *((_DWORD *)v56 + 3);
            epoch = *((_QWORD *)v56 + 2);
          }
          v67 = *(_QWORD *)(DerivedStorage + 96);
          v68 = !v67
             || !*(_BYTE *)(v221 + 458)
             || FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(v67, (uint64_t)v19) == 0;
          if (v222)
          {
            PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v19);
            v215 = PeakBitRate < (int)FigAlternateGetPeakBitRate(v223);
          }
          else
          {
            v215 = 0;
          }
          v217 = v66;
          v211 = v68;
          if (v68)
            goto LABEL_273;
          v70 = CMBaseObjectGetDerivedStorage();
          v71 = *(_QWORD *)(v70 + 1696);
          if (v71 && fpfs_isAlternateValid((uint64_t)a1, v71))
          {
            if (v215)
            {
              if (*(_DWORD *)(v70 + 524) != 1)
              {
                if (!dword_1EE2A2A88)
                  goto LABEL_268;
                LODWORD(lhs.value) = 0;
                LOBYTE(rhs.value) = 0;
                v90 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v91 = lhs.value;
                if (os_log_type_enabled(v90, rhs.value))
                  v92 = v91;
                else
                  v92 = v91 & 0xFFFFFFFE;
                if (!v92)
                  goto LABEL_267;
                v93 = *(_QWORD *)v70;
                if (*(_QWORD *)v70)
                  v94 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v94 = "";
                if (a1)
                  v119 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                else
                  v119 = "";
                v120 = *(_DWORD *)(v70 + 524);
                LODWORD(valuePtr.value) = 136316418;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
                LOWORD(valuePtr.flags) = 2048;
                *(_QWORD *)((char *)&valuePtr.flags + 2) = v93;
                HIWORD(valuePtr.epoch) = 2082;
                v231 = v94;
                v232 = 2048;
                v233 = a1;
                v234 = 2082;
                v235 = v119;
                v236 = 1024;
                *(_DWORD *)v237 = v120;
LABEL_266:
                _os_log_send_and_compose_impl();
                goto LABEL_267;
              }
              for (i = *(_QWORD *)(v70 + 1040); i; i = *(_QWORD *)(i + 8))
              {
                v73 = *(_DWORD *)(i + 152);
                if (v73 < 2)
                {
                  if (!*(_BYTE *)(i + 184))
                  {
LABEL_180:
                    if (dword_1EE2A2A88)
                    {
                      LODWORD(lhs.value) = 0;
                      LOBYTE(rhs.value) = 0;
                      v108 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v109 = lhs.value;
                      if (os_log_type_enabled(v108, rhs.value))
                        v110 = v109;
                      else
                        v110 = v109 & 0xFFFFFFFE;
                      if (v110)
                      {
                        v111 = *(_QWORD *)v70;
                        if (*(_QWORD *)v70)
                          v112 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                        else
                          v112 = "";
                        if (a1)
                          v125 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                        else
                          v125 = "";
                        v126 = *(_QWORD *)(i + 16);
                        v127 = *(_DWORD *)(i + 152);
                        LODWORD(valuePtr.value) = 136316674;
                        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
                        LOWORD(valuePtr.flags) = 2048;
                        *(_QWORD *)((char *)&valuePtr.flags + 2) = v111;
                        HIWORD(valuePtr.epoch) = 2082;
                        v231 = v112;
                        v232 = 2048;
                        v233 = a1;
                        v234 = 2082;
                        v235 = v125;
                        v236 = 1024;
                        *(_DWORD *)v237 = v126;
                        *(_WORD *)&v237[4] = 1024;
                        *(_DWORD *)&v237[6] = v127;
                        _os_log_send_and_compose_impl();
                      }
                      goto LABEL_267;
                    }
LABEL_268:
                    if ((v222 & 1) != 0)
                    {
LABEL_269:
                      v23 = 0;
                      goto LABEL_270;
                    }
LABEL_273:
                    AudioChannelCount = FigAlternateGetAudioChannelCount(v223, v218, 0);
                    *(_QWORD *)time1 = 0;
                    v136 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 128);
                    if (!v136
                      || (v137 = FigGetAllocatorForMedia(),
                          (v138 = *(void (**)(uint64_t, const __CFString *, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) == 0)
                      || (v138(v136, CFSTR("FAFProperty_AlternateList"), v137, time1),
                          (v139 = *(const __CFArray **)time1) == 0))
                    {
LABEL_290:
                      v148 = v223;
                      lhs.value = 0;
                      LODWORD(rhs.value) = 0;
                      v149 = CMBaseObjectGetDerivedStorage();
                      v150 = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
                      if (*(_QWORD *)(v149 + 1696))
                      {
                        v151 = v150;
                        if (CMTimebaseGetRate(*(CMTimebaseRef *)(v149 + 576)) != 0.0)
                        {
                          CMTimebaseGetTime((CMTime *)time1, *(CMTimebaseRef *)(v149 + 576));
                          valuePtr = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                          if ((CMTimeCompare((CMTime *)time1, &valuePtr) & 0x80000000) == 0)
                          {
                            if (*(_BYTE *)(v149 + 3082))
                            {
                              v152 = FigAlternateGetPeakBitRate(v148);
                              if (v152 > (int)FigAlternateGetPeakBitRate(*(_QWORD *)(v149 + 1696)))
                              {
                                if (fpfsi_IsSpatializationAllowed((uint64_t)a1))
                                {
                                  AudioChannelCounts = FigAlternateGetAudioChannelCounts(v148, (uint64_t)v151, &rhs, 0);
                                  if (AudioChannelCounts - LODWORD(rhs.value) >= 3 && !*(_QWORD *)(v149 + 3088))
                                  {
                                    if (fpfsi_AttemptToSetupInhibitMultichannelTimer_onceToken != -1)
                                      dispatch_once(&fpfsi_AttemptToSetupInhibitMultichannelTimer_onceToken, &__block_literal_global_145);
                                    v171 = *(NSObject **)(v149 + 600);
                                    v172 = *(void **)(v149 + 16);
                                    v173 = dispatch_time(0, 1000000000* fpfsi_AttemptToSetupInhibitMultichannelTimer_inhibitMultichannelPeriodSeconds);
                                    *(_QWORD *)(v149 + 3088) = fpfs_TimerDispatchSourceCreate(v171, v172, v173, (void (__cdecl *)(void *))fpfsi_MultichannelUninhibitedCallback, 0);
                                    if (*(_QWORD *)(v149 + 40))
                                    {
                                      v174 = (const __CFAllocator *)FigGetAllocatorForMedia();
                                      v175 = FigAlternateMultichannelAudioFilterCreate(v174, v151, 0, 0, &lhs);
                                      v176 = (const void *)lhs.value;
                                      if (!v175)
                                      {
                                        FigAlternateSelectionBossAddFilter(*(_QWORD *)(v149 + 40), (const void *)lhs.value);
                                        v176 = (const void *)lhs.value;
                                      }
                                      if (v176)
                                        CFRelease(v176);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      v56 = (__int128 *)MEMORY[0x1E0CA2E18];
                      if (!*(_BYTE *)(DerivedStorage + 3082) || AudioChannelCount <= 2)
                        goto LABEL_300;
                      v23 = 0;
                      goto LABEL_397;
                    }
                    v140 = 0;
                    do
                    {
                      if (v139)
                      {
                        Count = CFArrayGetCount(v139);
                        v139 = *(const __CFArray **)time1;
                      }
                      else
                      {
                        Count = 0;
                      }
                      if (v140 >= Count)
                      {
                        CFRelease(v139);
                        goto LABEL_290;
                      }
                      ValueAtIndex = CFArrayGetValueAtIndex(v139, v140);
                      MaxAudioChannelCount = FigAlternateGetMaxAudioChannelCount(ValueAtIndex);
                      v139 = *(const __CFArray **)time1;
                      ++v140;
                    }
                    while (MaxAudioChannelCount < 3);
                    CFRelease(*(CFTypeRef *)time1);
                    if (AudioChannelCount > 2)
                      goto LABEL_290;
                    v144 = v223;
                    v145 = CMBaseObjectGetDerivedStorage();
                    LODWORD(lhs.value) = 0;
                    LODWORD(rhs.value) = 0;
                    v146 = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
                    if (*(_QWORD *)(v145 + 1696))
                    {
                      v147 = (uint64_t)v146;
                      if (CMTimebaseGetRate(*(CMTimebaseRef *)(v145 + 576)) != 0.0)
                      {
                        CMTimebaseGetTime((CMTime *)time1, *(CMTimebaseRef *)(v145 + 576));
                        valuePtr = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                        if ((CMTimeCompare((CMTime *)time1, &valuePtr) & 0x80000000) == 0)
                        {
                          if (*(_BYTE *)(v145 + 3082))
                          {
                            if (!fpfs_isAlternateValid((uint64_t)a1, *(_QWORD *)(v145 + 1696)))
                              fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();
                          }
                          else
                          {
                            v185 = FigAlternateGetPeakBitRate(v144);
                            if (v185 < (int)FigAlternateGetPeakBitRate(*(_QWORD *)(v145 + 1696)))
                            {
                              if (fpfsi_IsSpatializationAllowed((uint64_t)a1))
                              {
                                v186 = FigAlternateGetAudioChannelCounts(*(_QWORD *)(v145 + 1696), v147, &lhs, 0);
                                v187 = FigAlternateGetAudioChannelCounts(v144, v147, &rhs, 0);
                                if (v187 - LODWORD(rhs.value) <= 2)
                                {
                                  v188 = v186 - LODWORD(lhs.value);
                                  fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v145 + 3088));
                                  if (v188 >= 3)
                                    *(_BYTE *)(v145 + 3082) = 1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_300:
                    v154 = v223;
                    v155 = CMBaseObjectGetDerivedStorage();
                    if (*(_QWORD *)(v155 + 1720)
                      && FigCFEqual()
                      && fpfs_ScheduleRecoverySwitch((uint64_t)a1, v154, 0))
                    {
                      memset(&lhs, 0, sizeof(lhs));
                      fpfs_GetNextTimeToPlay(v155, 0, (uint64_t)&rhs);
                      *(_OWORD *)time1 = *(_OWORD *)(v155 + 1176);
                      *(_QWORD *)&time1[16] = *(_QWORD *)(v155 + 1192);
                      CMTimeAdd(&lhs, &rhs, (CMTime *)time1);
                      v156 = *(_QWORD *)v155;
                      *(CMTime *)time1 = lhs;
                      *(_OWORD *)&valuePtr.value = *v56;
                      v157 = v217;
                      valuePtr.epoch = v217;
                      if (!fpfs_SetAlternateWithContext(v156, a1, v154, 33)
                        && fpfs_InitiateSwitchRecovery(v155, 0)
                        && fpfs_InitiateSwitchRecovery(v155, 1u))
                      {
                        v23 = 0;
                        goto LABEL_312;
                      }
                    }
                    else
                    {
                      v157 = v217;
                    }
                    v158 = v223;
                    v159 = CMBaseObjectGetDerivedStorage();
                    v219 = *v56;
                    *(_OWORD *)&rhs.value = *v56;
                    rhs.epoch = v157;
                    v242 = 0;
                    v240 = 0u;
                    v241 = 0u;
                    memset(time1, 0, sizeof(time1));
                    if (*(_QWORD *)(v159 + 1696))
                    {
                      v160 = v159;
                      if (*(_BYTE *)(v159 + 553))
                      {
                        v161 = FigAlternateGetPeakBitRate(v158);
                        if (v161 < (int)FigAlternateGetPeakBitRate(*(_QWORD *)(v160 + 1696)))
                        {
                          fpfs_CancelTrialSwitch((uint64_t)a1);
                          fpfs_GetItemBufferedDuration(a1, &rhs, time1, 0);
                          v162 = *(_QWORD *)v160;
                          v163 = GetSwitchOptions(v160, 1);
                          fpfs_GetNextTimeToPlay(v160, 0, (uint64_t)&v224);
                          valuePtr = *(CMTime *)(v160 + 1176);
                          CMTimeAdd(&v225, &v224, &valuePtr);
                          lhs = rhs;
                          valuePtr = v225;
                          v164 = fpfs_SetAlternateWithContext(v162, a1, v158, v163);
                          v23 = 0;
                          if (!(_DWORD)v164)
                            goto LABEL_312;
                          v23 = v164;
LABEL_397:
                          MutableCopy = v220;
                          if (!v220)
                          {
LABEL_327:
                            if (v21)
                              CFRelease(v21);
                            return v23;
                          }
LABEL_326:
                          CFRelease(MutableCopy);
                          goto LABEL_327;
                        }
                      }
                    }
                    *(_OWORD *)&rhs.value = v219;
                    rhs.epoch = v157;
                    v242 = 0;
                    v240 = 0u;
                    v241 = 0u;
                    memset(time1, 0, sizeof(time1));
                    v205 = GetSwitchOptions(DerivedStorage, 0);
                    fpfs_GetItemBufferedDuration(a1, &rhs, time1, 0);
                    if ((v222 & flags) == 1)
                    {
                      v206 = *(const void **)DerivedStorage;
                      valuePtr.value = v228;
                      lhs = rhs;
                      valuePtr.timescale = timescale;
                      valuePtr.flags = flags;
                      valuePtr.epoch = epoch;
                      v207 = fpfs_SetAlternateWithContext(v206, a1, v223, v205);
                      v208 = v211;
                      if (!(_DWORD)v207)
                        v208 = 0;
                      if ((_DWORD)v207 == -12644)
                      {
                        if (v215 && *(_BYTE *)(v221 + 458) && !v208)
                          goto LABEL_269;
                        goto LABEL_394;
                      }
                      if (v208)
                        goto LABEL_394;
                      v23 = v207;
                      if (!(_DWORD)v207)
                      {
LABEL_312:
                        lhs.value = 0;
                        v165 = CMBaseObjectGetDerivedStorage();
                        if (v165)
                        {
                          v166 = (uint64_t *)v165;
                          v167 = *(_QWORD *)(v165 + 96);
                          if (!v167)
                            goto LABEL_316;
                          v168 = FigGetAllocatorForMedia();
                          v169 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                          if (!v169
                            || v169(v167, CFSTR("AfmfpbProperty_CandidateAlternatesForAdaptiveBitrateSwitching"), v168, &lhs))
                          {
                            goto LABEL_316;
                          }
                          if (lhs.value)
                          {
                            if (CFArrayGetCount((CFArrayRef)lhs.value) >= 1)
                            {
                              v177 = (const __CFArray *)lhs.value;
                              if (lhs.value
                                && (v178 = CFArrayGetCount((CFArrayRef)lhs.value), v179 = v178 - 1, v178 >= 1))
                              {
                                v180 = 0;
                                do
                                {
                                  v181 = CFArrayGetValueAtIndex(v177, v180);
                                  RankingScore = FigAlternateGetRankingScore((uint64_t)v181);
                                  v183 = RankingScore == -1.0;
                                }
                                while (RankingScore != -1.0 && v179 != v180++);
                              }
                              else
                              {
                                v183 = 0;
                              }
                              v189 = 0;
                              v190 = 0;
                              v191 = 0;
                              v192 = 0.0;
                              while (1)
                              {
                                v193 = lhs.value;
                                if (lhs.value)
                                  v193 = CFArrayGetCount((CFArrayRef)lhs.value);
                                if (v189 >= v193)
                                  break;
                                v194 = CFArrayGetValueAtIndex((CFArrayRef)lhs.value, v189);
                                if (v183)
                                {
                                  v195 = FigAlternateGetPeakBitRate((uint64_t)v194);
                                  if (v195 > v191)
                                  {
                                    v190 = v189;
                                    v191 = v195;
                                  }
                                }
                                else
                                {
                                  v196 = FigAlternateGetRankingScore((uint64_t)v194);
                                  if (v196 > v192)
                                  {
                                    v190 = v189;
                                    v192 = v196;
                                  }
                                }
                                ++v189;
                              }
                              if (dword_1EE2A2A88)
                              {
                                LODWORD(rhs.value) = 0;
                                LOBYTE(v225.value) = 0;
                                v197 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                v198 = rhs.value;
                                if (os_log_type_enabled(v197, v225.value))
                                  v199 = v198;
                                else
                                  v199 = v198 & 0xFFFFFFFE;
                                if (v199)
                                {
                                  v200 = *v166;
                                  if (v200)
                                    v201 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                                  else
                                    v201 = "";
                                  if (a1)
                                    v202 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                                  else
                                    v202 = "";
                                  if (v183)
                                    v203 = "peak bitrate";
                                  else
                                    v203 = "score";
                                  v204 = CFArrayGetValueAtIndex((CFArrayRef)lhs.value, v190);
                                  LODWORD(valuePtr.value) = 136316674;
                                  *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_logHighestEligibleAlternate";
                                  LOWORD(valuePtr.flags) = 2048;
                                  *(_QWORD *)((char *)&valuePtr.flags + 2) = v200;
                                  HIWORD(valuePtr.epoch) = 2082;
                                  v231 = v201;
                                  v232 = 2048;
                                  v233 = a1;
                                  v234 = 2082;
                                  v235 = v202;
                                  v236 = 2080;
                                  *(_QWORD *)v237 = v203;
                                  *(_WORD *)&v237[8] = 2112;
                                  v238 = v204;
                                  _os_log_send_and_compose_impl();
                                }
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                              }
                            }
LABEL_316:
                            if (lhs.value)
                              CFRelease((CFTypeRef)lhs.value);
                          }
                        }
                        fpfsi_SetupSkipBitrateRangeFilter((uint64_t)a1);
                        MutableCopy = v220;
                        v134 = v216;
LABEL_319:
                        if (!(_DWORD)v23)
                        {
                          if (v134)
                            fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, a1, 1);
                          if (*(double *)(DerivedStorage + 2464) > 0.0)
                            fpfsi_SetupIFramePrefetch((uint64_t)a1);
LABEL_324:
                          v23 = 0;
                        }
LABEL_325:
                        if (!MutableCopy)
                          goto LABEL_327;
                        goto LABEL_326;
                      }
                    }
                    else
                    {
LABEL_394:
                      v210 = *(const void **)DerivedStorage;
                      valuePtr.value = v228;
                      lhs = rhs;
                      valuePtr.timescale = timescale;
                      valuePtr.flags = flags;
                      valuePtr.epoch = epoch;
                      v23 = 0;
                      if (!fpfs_SetAlternateWithContext(v210, a1, v223, SwitchOptions))
                        goto LABEL_312;
                    }
LABEL_270:
                    v133 = *(const void **)(DerivedStorage + 96);
                    if (v133)
                      FigAlternatePlaybackBitrateMonitorRejectSwitch(v133, *(const void **)(DerivedStorage + 1696));
                    v134 = 0;
                    MutableCopy = v220;
                    goto LABEL_319;
                  }
                }
                else if (v73 == 5)
                {
                  goto LABEL_180;
                }
              }
              v74 = 0;
              v75 = 992;
              do
              {
                if ((((*(_DWORD *)(v70 + 1088) & 3u) >> v74) & 1) != 0 && !*(_QWORD *)(v70 + v75))
                {
                  if (!dword_1EE2A2A88)
                    goto LABEL_268;
                  LODWORD(lhs.value) = 0;
                  LOBYTE(rhs.value) = 0;
                  v113 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v114 = lhs.value;
                  if (os_log_type_enabled(v113, rhs.value))
                    v115 = v114;
                  else
                    v115 = v114 & 0xFFFFFFFE;
                  if (v115)
                  {
                    v116 = *(_QWORD *)v70;
                    if (*(_QWORD *)v70)
                      v117 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                    else
                      v117 = "";
                    if (a1)
                      v128 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                    else
                      v128 = "";
                    LODWORD(valuePtr.value) = 136316418;
                    *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
                    LOWORD(valuePtr.flags) = 2048;
                    *(_QWORD *)((char *)&valuePtr.flags + 2) = v116;
                    HIWORD(valuePtr.epoch) = 2082;
                    v231 = v117;
                    v232 = 2048;
                    v233 = a1;
                    v234 = 2082;
                    v235 = v128;
                    v236 = 1024;
                    *(_DWORD *)v237 = v74;
                    _os_log_send_and_compose_impl();
                  }
                  goto LABEL_267;
                }
                ++v74;
                v75 += 16;
              }
              while (v74 != 3);
              *(_OWORD *)time1 = *v56;
              *(_QWORD *)&time1[16] = v66;
              fpfs_GetItemBufferedDuration(a1, time1, 0, 0);
              if ((time1[12] & 1) == 0)
                goto LABEL_268;
              valuePtr = *(CMTime *)time1;
              lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
              if (CMTimeCompare(&valuePtr, &lhs) <= 0)
                goto LABEL_268;
              if (*(_QWORD *)(v70 + 1752))
              {
                if (!dword_1EE2A2A88)
                  goto LABEL_268;
                LODWORD(lhs.value) = 0;
                LOBYTE(rhs.value) = 0;
                v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v77 = lhs.value;
                if (os_log_type_enabled(v76, rhs.value))
                  v78 = v77;
                else
                  v78 = v77 & 0xFFFFFFFE;
                if (!v78)
                  goto LABEL_267;
                v79 = *(_QWORD *)v70;
                if (*(_QWORD *)v70)
                  v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v80 = "";
                if (!a1)
                {
                  v118 = "";
                  goto LABEL_265;
                }
              }
              else if (*(_QWORD *)(v70 + 1760))
              {
                if (!dword_1EE2A2A88)
                  goto LABEL_268;
                LODWORD(lhs.value) = 0;
                LOBYTE(rhs.value) = 0;
                v122 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v123 = lhs.value;
                if (os_log_type_enabled(v122, rhs.value))
                  v124 = v123;
                else
                  v124 = v123 & 0xFFFFFFFE;
                if (!v124)
                {
LABEL_267:
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  v56 = (__int128 *)MEMORY[0x1E0CA2E18];
                  goto LABEL_268;
                }
                v79 = *(_QWORD *)v70;
                if (*(_QWORD *)v70)
                  v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v80 = "";
                if (!a1)
                {
                  v118 = "";
                  goto LABEL_265;
                }
              }
              else
              {
                if (*(_BYTE *)(v70 + 2872) != 1)
                  goto LABEL_273;
                if (!dword_1EE2A2A88)
                  goto LABEL_268;
                LODWORD(lhs.value) = 0;
                LOBYTE(rhs.value) = 0;
                v130 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v131 = lhs.value;
                if (os_log_type_enabled(v130, rhs.value))
                  v132 = v131;
                else
                  v132 = v131 & 0xFFFFFFFE;
                if (!v132)
                  goto LABEL_267;
                v79 = *(_QWORD *)v70;
                if (*(_QWORD *)v70)
                  v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v80 = "";
                if (!a1)
                {
                  v118 = "";
                  goto LABEL_265;
                }
              }
              goto LABEL_263;
            }
            if (fpfsi_TrialSwitchDownInProgress(v70))
            {
              if (!dword_1EE2A2A88)
                goto LABEL_268;
              LODWORD(lhs.value) = 0;
              LOBYTE(rhs.value) = 0;
              v87 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v88 = lhs.value;
              if (os_log_type_enabled(v87, rhs.value))
                v89 = v88;
              else
                v89 = v88 & 0xFFFFFFFE;
              if (!v89)
                goto LABEL_267;
              v79 = *(_QWORD *)v70;
              if (*(_QWORD *)v70)
                v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v80 = "";
              if (!a1)
              {
                v118 = "";
LABEL_265:
                LODWORD(valuePtr.value) = 136316162;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
                LOWORD(valuePtr.flags) = 2048;
                *(_QWORD *)((char *)&valuePtr.flags + 2) = v79;
                HIWORD(valuePtr.epoch) = 2082;
                v231 = v80;
                v232 = 2048;
                v233 = a1;
                v234 = 2082;
                v235 = v118;
                goto LABEL_266;
              }
            }
            else if (*(_BYTE *)(v70 + 2872) == 1)
            {
              if (!dword_1EE2A2A88)
                goto LABEL_268;
              LODWORD(lhs.value) = 0;
              LOBYTE(rhs.value) = 0;
              v96 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v97 = lhs.value;
              if (os_log_type_enabled(v96, rhs.value))
                v98 = v97;
              else
                v98 = v97 & 0xFFFFFFFE;
              if (!v98)
                goto LABEL_267;
              v79 = *(_QWORD *)v70;
              if (*(_QWORD *)v70)
                v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v80 = "";
              if (!a1)
              {
                v118 = "";
                goto LABEL_265;
              }
            }
            else
            {
              if (!*(_BYTE *)(v70 + 470))
                goto LABEL_273;
              if (!dword_1EE2A2A88)
                goto LABEL_268;
              LODWORD(lhs.value) = 0;
              LOBYTE(rhs.value) = 0;
              v105 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v106 = lhs.value;
              if (os_log_type_enabled(v105, rhs.value))
                v107 = v106;
              else
                v107 = v106 & 0xFFFFFFFE;
              if (!v107)
                goto LABEL_267;
              v79 = *(_QWORD *)v70;
              if (*(_QWORD *)v70)
                v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v80 = "";
              if (!a1)
              {
                v118 = "";
                goto LABEL_265;
              }
            }
LABEL_263:
            v118 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            goto LABEL_265;
          }
          if (!dword_1EE2A2A88)
            goto LABEL_273;
          LODWORD(lhs.value) = 0;
          LOBYTE(rhs.value) = 0;
          v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v82 = lhs.value;
          if (os_log_type_enabled(v81, rhs.value))
            v83 = v82;
          else
            v83 = v82 & 0xFFFFFFFE;
          if (!v83)
          {
LABEL_156:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v56 = (__int128 *)MEMORY[0x1E0CA2E18];
            goto LABEL_273;
          }
          v84 = *(_QWORD *)v70;
          if (*(_QWORD *)v70)
          {
            v85 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            if (a1)
            {
LABEL_136:
              v86 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
LABEL_155:
              v95 = *(_QWORD *)(v70 + 1696);
              LODWORD(valuePtr.value) = 136316418;
              *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
              LOWORD(valuePtr.flags) = 2048;
              *(_QWORD *)((char *)&valuePtr.flags + 2) = v84;
              HIWORD(valuePtr.epoch) = 2082;
              v231 = v85;
              v232 = 2048;
              v233 = a1;
              v234 = 2082;
              v235 = v86;
              v236 = 2112;
              *(_QWORD *)v237 = v95;
              _os_log_send_and_compose_impl();
              goto LABEL_156;
            }
          }
          else
          {
            v85 = "";
            if (a1)
              goto LABEL_136;
          }
          v86 = "";
          goto LABEL_155;
        }
        if (v15)
          v22 = v16;
        else
          v22 = 1;
        if ((v22 & 1) != 0)
          goto LABEL_32;
        updated = fpfs_CancelTrialSwitch((uint64_t)a1);
        if (!(_DWORD)updated)
          goto LABEL_32;
LABEL_27:
        v23 = updated;
        v21 = 0;
        if (!MutableCopy)
          goto LABEL_327;
        goto LABEL_326;
      }
    }
    else if (v15)
    {
      v16 = FigCFArrayContainsValue() != 0;
      goto LABEL_15;
    }
    v16 = 0;
    goto LABEL_15;
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(lhs.value) = 0;
    LOBYTE(rhs.value) = 0;
    v129 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

void fpfsi_updateNetworkCostMonitorMaximumMediaBitrate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  uint64_t SInt32;
  const void *v6;
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, const void *);
  CFNumberRef number;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 2248))
  {
    v1 = DerivedStorage;
    valuePtr = 0;
    number = 0;
    v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 96);
    if (v2)
    {
      v3 = *MEMORY[0x1E0C9AE00];
      v4 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
      if (v4 && !v4(v2, CFSTR("AfmfpbProperty_HighestValidPeakBitrate"), v3, &number))
      {
        if (number)
          CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
        else
          FigSignalErrorAt();
      }
      if (number)
        CFRelease(number);
    }
    SInt32 = FigCFNumberCreateSInt32();
    if (SInt32)
    {
      v6 = (const void *)SInt32;
      v7 = *(_QWORD *)(v1 + 2248);
      v8 = *(void (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v8)
        v8(v7, CFSTR("FNCM_MaximumMediaBitrate"), v6);
      CFRelease(v6);
    }
  }
}

uint64_t fpfsi_setHasDiscoveredVideoAndNotify(const void *a1, const void *a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 771))
    fpfs_EnqueueNotification(a1, CFSTR("HasDiscoveredVideo"), a2, 0);
  return result;
}

const void **fpfsi_setStereoAudioSpatializationByDefaultForVideoItem(const void *a1)
{
  const void **result;
  const void **v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = (const void **)CMBaseObjectGetDerivedStorage();
  if (!*((_BYTE *)result + 886))
  {
    v3 = result;
    if (!*((_BYTE *)result + 887))
    {
      if (*((_BYTE *)result + 771))
      {
        *((_BYTE *)result + 886) = 1;
        if (dword_1EE2A2A88)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        fpfs_EnqueueNotification(*v3, CFSTR("AllowedSpatializationChanged"), a1, 0);
      }
    }
  }
  return result;
}

uint64_t fpfsi_RTCReportingUpdateATMOSMetricVar(uint64_t result, _BYTE *a2, _BYTE *a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  if (*a2 != a4 && (a4 == 1 || a5 == 1))
  {
    if (!a4 && a6 == 1)
      *(_QWORD *)(result + 2564) = 0;
    *a2 = a4;
    if (*a3)
      goto LABEL_11;
  }
  else if (*a3)
  {
    return result;
  }
  *a3 = 1;
LABEL_11:
  v6 = *(unsigned __int8 *)(result + 2571);
  if (*(_BYTE *)(result + 2571)
    || *(_BYTE *)(result + 2564) && *(_BYTE *)(result + 2565) && *(_BYTE *)(result + 2566) && *(_BYTE *)(result + 2567))
  {
    v7 = *(_QWORD *)(result + 2536);
    if (v7)
    {
      v8 = *(unsigned __int8 *)(result + 2568);
      v9 = *(unsigned __int8 *)(result + 2569);
      v10 = *(unsigned __int8 *)(result + 2570);
      result = CMBaseObjectGetVTable();
      v11 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(result + 16)
                                                                                           + 56);
      if (v11)
        return v11(v7, CFSTR("playerStats"), CFSTR("ATMOS"), (16 * v6) | (2 * v8) | (4 * v9) | (8 * v10) | 1, 0);
    }
  }
  return result;
}

uint64_t fpfsi_SetupAlternateSelectionBossWithPreferPlaybackFromCache(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  void *AllocatorForMedia;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef cf;
  CFTypeRef v10;

  v10 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  fpfsi_CopyCacheRefFromPump(a1, &v10);
  v3 = *(_QWORD *)(DerivedStorage + 40);
  if (v3)
  {
    if (*(_BYTE *)(DerivedStorage + 3168))
    {
      v4 = (uint64_t)v10;
      if (!v10)
        return v4;
      AllocatorForMedia = (void *)FigGetAllocatorForMedia();
      v6 = FigAlternateOfflinePlayableForMediaSelectionFilterCreate(AllocatorForMedia, v4, *(const __CFArray **)(DerivedStorage + 1784), 0, &cf);
      v7 = cf;
      if (!(_DWORD)v6)
      {
        v4 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf);
        v7 = cf;
        if (!cf)
          goto LABEL_8;
        goto LABEL_6;
      }
      v4 = v6;
      if (cf)
LABEL_6:
        CFRelease(v7);
    }
    else
    {
      v4 = FigAlternateSelectionBossRemoveFilter(v3, (uint64_t)CFSTR("OfflinePlayable"));
    }
  }
  else
  {
    v4 = 0;
  }
LABEL_8:
  if (v10)
    CFRelease(v10);
  return v4;
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForScanningRole()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v5;
  const __CFAllocator *v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf[27];

  cf[26] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  cf[0] = 0;
  v10 = 0;
  v2 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v2 + 40) || !*(_BYTE *)(v2 + 48) || !*(_BYTE *)(v2 + 49))
    goto LABEL_15;
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(v1 + 808) != 1)
  {
    v5 = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("IFramesOnly"));
    if (!(_DWORD)v5)
    {
      v5 = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("ResolutionClosestHeight"));
      if (!(_DWORD)v5)
        v5 = FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("LowestPeakBitRate"));
    }
    goto LABEL_19;
  }
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v5 = FigAlternateIFramesOnlyFilterCreate(AllocatorForMedia, cf);
  if (!(_DWORD)v5)
  {
    v5 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf[0]);
    if (!(_DWORD)v5)
    {
      if (*(double *)(DerivedStorage + 2464) != 0.0 && *(double *)(DerivedStorage + 2456) != 0.0)
      {
        v6 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v5 = FigAlternateResolutionClosestHeightFilterCreate(v6, &v11, *(double *)(DerivedStorage + 2456), *(double *)(DerivedStorage + 2464));
        if (!(_DWORD)v5)
        {
          v5 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), v11);
          if (!(_DWORD)v5)
          {
            v7 = FigGetAllocatorForMedia();
            v5 = FigAlternateLowestPeakBitRateFilterCreate(v7, &v10);
            if (!(_DWORD)v5)
              v5 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), v10);
          }
        }
        goto LABEL_19;
      }
LABEL_15:
      v8 = 0;
      goto LABEL_20;
    }
  }
LABEL_19:
  v8 = v5;
LABEL_20:
  if (cf[0])
    CFRelease(cf[0]);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  return v8;
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForSuppressAudioOnly()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v1 = *(_QWORD *)(DerivedStorage + 40);
  if (!v1)
    return 0;
  if (*(_BYTE *)(DerivedStorage + 558))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v3 = FigAlternateSuppressAudioOnlyFilterCreate(AllocatorForMedia, &cf);
    v4 = cf;
    if ((_DWORD)v3)
    {
      v5 = v3;
      if (!cf)
        return v5;
    }
    else
    {
      v5 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf);
      v4 = cf;
      if (!cf)
        return v5;
    }
    CFRelease(v4);
    return v5;
  }
  return FigAlternateSelectionBossRemoveFilter(v1, (uint64_t)CFSTR("SuppressAudioOnly"));
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForPlayRate(uint64_t a1, float a2)
{
  UInt8 v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  v4 = a2 < 0.0 || a2 > 2.0;
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return fpfsi_CreateAndAddScanningModeFilterToBoss(a1, v4);
}

uint64_t fpfsi_ConfigurePlaybackMonitorForBandwidthCap(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFNumberRef v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  int valuePtr;

  valuePtr = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 2376) = a2;
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v4 = DerivedStorage;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v6 = *(_QWORD *)(v4 + 96);
  if (v6)
  {
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
    if (!v7)
    {
      v6 = 4294954514;
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
    v6 = v7(v6, CFSTR("AfmfpbProperty_BandwidthCap"), v5);
  }
  if (v5)
LABEL_6:
    CFRelease(v5);
LABEL_7:
  v8 = *(_QWORD *)(v4 + 2536);
  if (v8)
  {
    v9 = valuePtr;
    v10 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v10)
      v10(v8, CFSTR("playerStats"), CFSTR("Bcap"), v9, 0);
  }
  return v6;
}

uint64_t fpfsi_addHDResolutionCap()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v1 = FigAlternateResolutionCapFilterCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], CFSTR("ResolutionCapFor4kBaton"), 700, &cf, 1920.0, 1080.0);
  if (!(_DWORD)v1)
    v1 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf);
  if (cf)
    CFRelease(cf);
  return v1;
}

uint64_t fpfsi_SetupSupportedAudioFormatFilter(uint64_t a1)
{
  uint64_t DerivedStorage;
  unsigned int IsDecodable;
  uint64_t v4;
  uint64_t AtmosDecodePolicy;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  int v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v14 = 0;
  IsDecodable = FigAudioCodecTypeIsDecodable();
  v4 = FigAudioCodecTypeIsDecodable();
  AtmosDecodePolicy = fpfsi_GetAtmosDecodePolicy(a1, &v14);
  v6 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v6 + 536))
    v7 = *(_BYTE *)(v6 + 562) != 0;
  else
    v7 = 0;
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v8 = (int)FigStreamAlternateGetAudioMaximumDecodeChannelCount(0x6F707573u) > 2;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v10 = FigAlternateSupportedAudioFormatFilterCreate(AllocatorForMedia, (AtmosDecodePolicy << 40) | (v8 << 48) | (v4 << 32) | ((unint64_t)IsDecodable << 24) | v7, &cf);
  if ((_DWORD)v10 || (v10 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf), (_DWORD)v10))
  {
    v12 = v10;
  }
  else
  {
    v11 = 1;
    fpfsi_RTCReportingUpdateATMOSMetricVar(DerivedStorage, (_BYTE *)(DerivedStorage + 2569), (_BYTE *)(DerivedStorage + 2565), BYTE2(v14), 1, 1);
    if (!(v14 | BYTE1(v14)))
      v11 = HIBYTE(v14) != 0;
    fpfsi_RTCReportingUpdateATMOSMetricVar(DerivedStorage, (_BYTE *)(DerivedStorage + 2570), (_BYTE *)(DerivedStorage + 2566), v11, 1, 1);
    v12 = 0;
  }
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForHighestAtmosFiltering()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v1 = DerivedStorage;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561) || !*(_BYTE *)(v1 + 564))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v3 = FigAlternateHighestAtmosBitrateFilterCreate(AllocatorForMedia, &cf);
    v4 = cf;
    if ((_DWORD)v3)
    {
      v5 = v3;
      if (!cf)
        return v5;
    }
    else
    {
      v5 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v1 + 40), cf);
      v4 = cf;
      if (!cf)
        return v5;
    }
    CFRelease(v4);
    return v5;
  }
  return FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(v1 + 40), (uint64_t)CFSTR("HighestAtmosBitrateFilter"));
}

uint64_t fpfsi_ConfigureAlternateSelectionBossPreferExclusiveAudioPassthroughFiltering()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v3;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v1 = DerivedStorage;
  v2 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v2 + 536))
    v3 = *(_BYTE *)(v2 + 562) != 0;
  else
    v3 = 0;
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v5 = FigAlternatePreferExclusiveAudioPassthroughFilterCreate(AllocatorForMedia, v3, &cf);
  v6 = cf;
  if ((_DWORD)v5)
  {
    v7 = v5;
    if (!cf)
      return v7;
    goto LABEL_7;
  }
  v7 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v1 + 40), cf);
  v6 = cf;
  if (cf)
LABEL_7:
    CFRelease(v6);
  return v7;
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForNeroSupportedVideoFormat(uint64_t a1, int a2)
{
  const __CFAllocator *AllocatorForMedia;
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (a2)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v4 = FigAlternateNeroSupportedVideoFormatFilterCreate(AllocatorForMedia, &cf);
    v5 = cf;
    if ((_DWORD)v4)
    {
      v6 = v4;
      if (!cf)
        return v6;
    }
    else
    {
      v6 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(a1 + 40), cf);
      v5 = cf;
      if (!cf)
        return v6;
    }
    CFRelease(v5);
    return v6;
  }
  return FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(a1 + 40), (uint64_t)CFSTR("NeroSupportedVideoFormat"));
}

uint64_t fpfsi_setUpVideoLayoutFilters(uint64_t a1)
{
  uint64_t v1;
  const __CFArray *v2;
  CFIndex v3;
  uint64_t v4;
  CMTagValue v5;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t AllocatorForMedia;
  uint64_t (*v9)(const void *, uint64_t, CFArrayRef *);
  uint64_t v10;
  const __CFArray *v11;
  const __CFAllocator *v12;
  CFIndex v13;
  const __CFArray *v14;
  const void *v15;
  CFIndex CountOfDataChannels;
  CFIndex v17;
  CFIndex v18;
  const OpaqueCMTagCollection *DataChannelByIndex;
  CFTypeRef v20;
  __CFArray *v21;
  const __CFAllocator *v22;
  uint64_t v23;
  const __CFAllocator *v24;
  int DefaultTagCollectionForVideo;
  CFTypeRef v26;
  const __CFArray *v27;
  void *v28;
  uint64_t v30;
  uint64_t DerivedStorage;
  uint64_t v33;
  CFIndex v34;
  const __CFArray *v35;
  __CFArray *Mutable;
  CFIndex v37;
  CFArrayRef theArray;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef cf;
  CMTag v42;
  CMTag v43;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = 0;
  v3 = 0;
  v39 = 0;
  v40 = 0;
  v4 = *MEMORY[0x1E0CA5228];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA5228] + 8);
  v33 = v1;
  while (1)
  {
    Count = *(const __CFArray **)(v1 + 432);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v3 >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 432), v3);
    theArray = 0;
    AllocatorForMedia = FigGetAllocatorForMedia();
    v9 = *(uint64_t (**)(const void *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v9)
    {
      v21 = 0;
      v30 = 4294954514;
      goto LABEL_60;
    }
    v10 = v9(ValueAtIndex, AllocatorForMedia, &theArray);
    if ((_DWORD)v10)
      goto LABEL_59;
    if (theArray)
    {
      if (CFArrayGetCount(theArray))
      {
        v34 = v3;
        v35 = v2;
        v11 = theArray;
        if (theArray)
          v37 = CFArrayGetCount(theArray);
        else
          v37 = 0;
        v12 = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
        if (Mutable && v37 >= 1)
        {
          v13 = 0;
          while (1)
          {
            v14 = v11;
            v15 = CFArrayGetValueAtIndex(v11, v13);
            cf = 0;
            CountOfDataChannels = FigDataChannelGroupGetCountOfDataChannels((uint64_t)v15);
            if (CountOfDataChannels >= 1)
              break;
LABEL_22:
            v20 = cf;
            v11 = v14;
            if (cf)
              goto LABEL_28;
LABEL_30:
            if (++v13 == v37)
              goto LABEL_31;
          }
          v17 = CountOfDataChannels;
          v18 = 0;
          while (1)
          {
            DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)v15, v18);
            *(_QWORD *)&v42.category = 0x40000005706C7972;
            v42.value = 1634630006;
            if (CMTagCollectionContainsTag(DataChannelByIndex, v42))
            {
              FPSupport_CreateDefaultTagCollectionForVideo((CMTagCollectionRef *)&cf);
              goto LABEL_22;
            }
            *(_QWORD *)&v43.category = v4;
            v43.value = v5;
            if (CMTagCollectionContainsTag(DataChannelByIndex, v43))
              break;
            if (v17 == ++v18)
              goto LABEL_22;
          }
          if (DataChannelByIndex)
            v20 = CFRetain(DataChannelByIndex);
          else
            v20 = 0;
          v11 = v14;
          cf = v20;
          if (!v20)
            goto LABEL_30;
LABEL_28:
          CFArrayAppendValue(Mutable, v20);
          if (cf)
            CFRelease(cf);
          goto LABEL_30;
        }
LABEL_31:
        v21 = Mutable;
        if (Mutable)
        {
          CFArrayGetCount(Mutable);
          v3 = v34;
          v2 = v35;
          v1 = v33;
          if (v35)
          {
            if (CFArrayGetCount(Mutable) && !FigCFEqual())
            {
              v30 = FigSignalErrorAt();
LABEL_60:
              if (!(_DWORD)v30)
                goto LABEL_62;
LABEL_61:
              fpfs_StopPlayingItemWithOSStatus(v1, a1, v30);
              goto LABEL_62;
            }
          }
          else
          {
            v2 = (const __CFArray *)CFRetain(Mutable);
          }
          CFRelease(Mutable);
        }
        else
        {
          v3 = v34;
          v2 = v35;
          v1 = v33;
        }
      }
      if (theArray)
        CFRelease(theArray);
    }
    ++v3;
  }
  FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("VideoLayoutPinning"));
  if (v2 && CFArrayGetCount(v2))
  {
    v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v23 = FigAlternateVideoLayoutCapabilityFilterCreate(v22, v2, &v40);
    if ((_DWORD)v23 || (v23 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), v40), (_DWORD)v23))
    {
LABEL_71:
      v30 = v23;
      v21 = 0;
      goto LABEL_61;
    }
LABEL_57:
    v28 = (void *)FigGetAllocatorForMedia();
    v23 = FigAlternateVideoLayoutPreferenceFilterCreate(v28, v2, &v39);
    if (!(_DWORD)v23)
    {
      v10 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), v39);
LABEL_59:
      v30 = v10;
      v21 = 0;
      goto LABEL_60;
    }
    goto LABEL_71;
  }
  cf = 0;
  v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v2 = CFArrayCreateMutable(v24, 0, MEMORY[0x1E0C9B378]);
  if (v2)
  {
    DefaultTagCollectionForVideo = FPSupport_CreateDefaultTagCollectionForVideo((CMTagCollectionRef *)&cf);
    v26 = cf;
    if (DefaultTagCollectionForVideo)
    {
      v27 = v2;
      v2 = 0;
      if (cf)
LABEL_52:
        CFRelease(v26);
    }
    else
    {
      if (!cf)
      {
        v27 = v2;
        v2 = 0;
LABEL_54:
        CFRelease(v27);
LABEL_55:
        if (v2)
        {
          FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("VideoLayoutCapability"));
          FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("VideoLayoutPreference"));
          goto LABEL_57;
        }
        goto LABEL_75;
      }
      CFArrayAppendValue(v2, cf);
      v27 = 0;
      v26 = cf;
      if (cf)
        goto LABEL_52;
    }
    if (!v27)
      goto LABEL_55;
    goto LABEL_54;
  }
LABEL_75:
  v30 = 0;
  v21 = 0;
LABEL_62:
  if (v40)
    CFRelease(v40);
  if (v39)
    CFRelease(v39);
  if (v2)
    CFRelease(v2);
  if (v21)
    CFRelease(v21);
  return v30;
}

BOOL fpfsi_GetAtmosDecodePolicy(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  BOOL v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v13;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  if (!*a2)
    *a2 = fpfsi_IsSpatializationAllowed(a1);
  if (!a2[1])
  {
    v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504);
    if (v4)
    {
      cf = 0;
      AllocatorForMedia = FigGetAllocatorForMedia();
      CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v4);
      v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v7)
      {
        v7(CMBaseObject, CFSTR("AtmosIsSupported"), AllocatorForMedia, &cf);
        v8 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
        if (cf)
          CFRelease(cf);
      }
      else
      {
        v8 = *MEMORY[0x1E0C9AE50] == 0;
      }
    }
    else
    {
      v8 = 0;
    }
    a2[1] = v8;
  }
  if (!a2[2])
    a2[2] = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
  v9 = a2[3];
  if (!a2[3])
  {
    v13 = 0;
    v10 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 536);
    if (v10)
    {
      if (FPSupport_GetAudioSessionOutputChannelCount(v10, &v13))
        v11 = 0;
      else
        v11 = v13 == 16;
      v9 = v11;
    }
    else
    {
      v9 = 0;
    }
    a2[3] = v9;
  }
  return *a2 || a2[1] || (a2[2] | v9) != 0;
}

uint64_t fpfsi_IsSpatializationAllowed(uint64_t a1)
{
  int v2;
  int v3;
  const __CFArray *Count;
  BOOL v5;
  uint64_t v6;
  CFArrayRef theArray;

  theArray = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 771))
    v2 = 1836019574;
  else
    v2 = 1936684398;
  v3 = fpfsi_CreateAudioSpatialSourcesArray(a1, v2, &theArray, 0, 0);
  Count = theArray;
  if (v3)
    v5 = 1;
  else
    v5 = theArray == 0;
  if (v5)
  {
    if (!theArray)
      return 0;
    goto LABEL_17;
  }
  v6 = 0;
  if (!theArray)
    goto LABEL_13;
LABEL_12:
  Count = (const __CFArray *)CFArrayGetCount(Count);
LABEL_13:
  while (v6 < (uint64_t)Count)
  {
    FigCFArrayGetInt32AtIndex();
    ++v6;
    Count = theArray;
    if (theArray)
      goto LABEL_12;
  }
  Count = theArray;
  if (theArray)
LABEL_17:
    CFRelease(Count);
  return 0;
}

uint64_t fpfsi_CreateAndAddScanningModeFilterToBoss(uint64_t a1, UInt8 a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v5 = FigAlternateScanModePreferenceFilterCreate(AllocatorForMedia, a2, &cf);
  if (!(_DWORD)v5)
    v5 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf);
  v6 = v5;
  if (cf)
    CFRelease(cf);
  return v6;
}

void fpfsi_validAlternatesHaveChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  CFTypeRef cf;
  const void *v13;

  v13 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v13, &cf))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v3 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 136))
    {
      *(_BYTE *)(DerivedStorage + 136) = 0;
    }
    else if (*(_QWORD *)(DerivedStorage + 40))
    {
      v4 = *(_QWORD *)(DerivedStorage + 96);
      if (v4)
      {
        v11 = *MEMORY[0x1E0C9D820];
        FigAlternatePlaybackBitrateMonitorGetMaxResolutionAndBitrate(*(double *)&v11, *((double *)&v11 + 1), v4, (double *)&v11, (int *)(v3 + 2868), 0);
        v5 = *(_QWORD *)(v3 + 1696);
        if (v5)
        {
          v9 = 0;
          v10 = -1;
          fpfs_DetermineRanksOfVariant(v3, v5, (int *)&v10, &v9);
          v7 = v9;
          v6 = v10;
          if (v10 != *(_DWORD *)(v3 + 1744) || v9 != *(_DWORD *)(v3 + 1748))
          {
            *(_DWORD *)(v3 + 1744) = v10;
            *(_DWORD *)(v3 + 1748) = v7;
            fpfsi_RTCReportingUpdateVariantRank(v3, v6, v7);
          }
        }
        if (!FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(*(_QWORD *)(v3 + 96), *(_QWORD *)(v3 + 1720))&& !FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(v3 + 40), (uint64_t)CFSTR("RecoveryAlternateSkipBitrateRange")))
        {
          v8 = *(const void **)(v3 + 1720);
          if (v8)
          {
            CFRelease(v8);
            *(_QWORD *)(v3 + 1720) = 0;
          }
        }
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v13);
  }
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
}

uint64_t fpfs_DetermineRanksOfVariant(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  uint64_t result;
  int AlternateRank;

  if (!a2)
  {
    result = 0;
LABEL_6:
    AlternateRank = -1;
    if (!a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  result = *(_QWORD *)(a1 + 96);
  if (!result)
    goto LABEL_6;
  AlternateRank = FigAlternatePlaybackBitrateMonitorGetAlternateRank(result, *(_QWORD *)(a1 + 1696));
  result = FigAlternateGetVariantBitrateRank(a2, *(_DWORD *)(a1 + 2868));
  if (a3)
LABEL_7:
    *a3 = AlternateRank;
LABEL_8:
  if (a4)
    *a4 = result;
  return result;
}

uint64_t fpfsi_RTCReportingUpdateVariantRank(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);

  v4 = result;
  if ((a2 & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(result + 2536);
    if (v5)
    {
      result = CMBaseObjectGetVTable();
      v7 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16)
                                                                                         + 56);
      if (v7)
        result = v7(v5, CFSTR("playerStats"), CFSTR("VaRk"), a2, 0);
    }
  }
  if ((a3 & 0x80000000) == 0)
  {
    v8 = *(_QWORD *)(v4 + 2536);
    if (v8)
    {
      result = CMBaseObjectGetVTable();
      v9 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16)
                                                                                         + 56);
      if (v9)
        return v9(v8, CFSTR("playerStats"), CFSTR("BitRk"), a3, 0);
    }
  }
  return result;
}

uint64_t fpfsi_updateDisplayListForHDCPMonitor()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const __CFArray *v3;
  const __CFAllocator *v4;
  CFMutableArrayRef MutableCopy;
  CFStringRef v6;
  CFStringRef v7;
  const __CFAllocator *AllocatorForMedia;
  __CFArray *Mutable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, CFMutableArrayRef);
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 56))
    return 0;
  v2 = v1;
  v3 = *(const __CFArray **)(v1 + 672);
  if (!v3
    || CFArrayGetCount(v3) < 1
    || (v4 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (MutableCopy = CFArrayCreateMutableCopy(v4, 0, *(CFArrayRef *)(v2 + 672))) == 0))
  {
    v6 = FPSupport_CopyMainDisplayCAName();
    if (v6)
    {
      v7 = v6;
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
      MutableCopy = Mutable;
      if (Mutable)
        CFArrayAppendValue(Mutable, v7);
      CFRelease(v7);
    }
    else
    {
      MutableCopy = 0;
    }
  }
  v10 = *(_QWORD *)(DerivedStorage + 56);
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, CFMutableArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
  if (v11)
  {
    v12 = v11(v10, CFSTR("AlternateFilterMonitorProperty_DisplayList"), MutableCopy);
    if (!MutableCopy)
      return v12;
    goto LABEL_14;
  }
  v12 = 4294954514;
  if (MutableCopy)
LABEL_14:
    CFRelease(MutableCopy);
  return v12;
}

uint64_t fpfsi_updateSupportedFramerateBucketCapMonitorFromFVT()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  CFIndex v3;
  uint64_t v4;
  double v5;
  CMTime *v6;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v12;
  BOOL v13;
  CFNumberRef v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, const __CFString *, CFNumberRef);
  CMTime v18;
  CMTime time1;
  CFTypeRef cf;
  CMTime v21;
  CMTime v22;
  double valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  valuePtr = 0.0;
  v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v2 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v2 + 40) || !*(_BYTE *)(v2 + 48) || !*(_BYTE *)(v2 + 49))
    return 0;
  v3 = 0;
  v4 = 0;
  memset(&v22, 0, sizeof(v22));
  v5 = 0.0;
  v6 = (CMTime *)MEMORY[0x1E0CA2E68];
  while (1)
  {
    Count = *(const __CFArray **)(v1 + 432);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v3 >= (uint64_t)Count)
      break;
    cf = 0;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 432), v3);
    AllocatorForMedia = FigGetAllocatorForMedia();
    CMBaseObject = FigVideoTargetGetCMBaseObject(ValueAtIndex);
    v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v11)
    {
      v4 = v11(CMBaseObject, CFSTR("RefreshRate"), AllocatorForMedia, &cf);
      v12 = cf;
      if ((_DWORD)v4)
        v13 = 1;
      else
        v13 = cf == 0;
      if (v13)
        goto LABEL_18;
      FigCFDictionaryGetCMTimeIfPresent();
      time1 = v22;
      v18 = *v6;
      if (CMTimeCompare(&time1, &v18) < 1)
      {
        v4 = 0;
        goto LABEL_20;
      }
      time1 = v22;
      v18 = v21;
      if (CMTimeCompare(&time1, &v18) < 0)
      {
        v21 = v22;
        time1 = v22;
        v4 = 0;
        v5 = 1.0 / CMTimeGetSeconds(&time1);
        valuePtr = v5;
      }
      else
      {
        v4 = 0;
      }
    }
    else
    {
      v4 = 4294954514;
    }
    v12 = cf;
LABEL_18:
    if (v12)
      CFRelease(v12);
LABEL_20:
    ++v3;
  }
  if (v5 != 0.0)
  {
    v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
    v15 = *(_QWORD *)(DerivedStorage + 72);
    v16 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
    if (v16)
    {
      v4 = v16(v15, CFSTR("AlternateFilterMonitorProperty_PreferredFrameRate"), v14);
      if (v14)
        goto LABEL_27;
    }
    else
    {
      v4 = 4294954514;
      if (v14)
LABEL_27:
        CFRelease(v14);
    }
  }
  return v4;
}

uint64_t fpfsi_setOverrideDisplaysSupportedVideoRange()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  CFNumberRef v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(v1 + 680));
  v3 = *(_QWORD *)(DerivedStorage + 80);
  if (v3)
  {
    v4 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
    if (!v4)
      goto LABEL_9;
    v5 = v4(v3, CFSTR("AlternateFilterMonitorProperty_OverrideVideoRange"), v2);
    if ((_DWORD)v5)
      goto LABEL_7;
  }
  v6 = *(_QWORD *)(DerivedStorage + 64);
  if (!v6)
  {
    v8 = 0;
    if (!v2)
      return v8;
    goto LABEL_10;
  }
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
  if (v7)
  {
    v5 = v7(v6, CFSTR("AlternateFilterMonitorProperty_OverrideVideoRange"), v2);
LABEL_7:
    v8 = v5;
    if (!v2)
      return v8;
    goto LABEL_10;
  }
LABEL_9:
  v8 = 4294954514;
  if (v2)
LABEL_10:
    CFRelease(v2);
  return v8;
}

BOOL fpfs_CanRenderVideo(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  unsigned int (*v8)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  BOOL v9;
  char v10;
  const __CFArray *v11;
  uint64_t TrackWithFormatDescriptionOfType;
  uint64_t v13;
  uint64_t v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFTypeRef cf;

  if (*(_QWORD *)(a1 + 80))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(a1 + 524))
    {
      if (*(_QWORD *)(DerivedStorage + 928))
      {
        if (*(_QWORD *)(DerivedStorage + 400))
          FigCFDictionaryGetBooleanIfPresent();
        cf = 0;
        v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 928);
        if (!v5)
          return 0;
        AllocatorForMedia = FigGetAllocatorForMedia();
        FigBaseObject = FigBytePumpGetFigBaseObject(v5);
        v8 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (!v8)
          return 0;
        if (v8(FigBaseObject, CFSTR("FBP_HasKeyContent"), AllocatorForMedia, &cf))
          v9 = 1;
        else
          v9 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
        v10 = v9;
        if (cf)
          CFRelease(cf);
        if ((v10 & 1) != 0)
          return 0;
      }
    }
  }
  if (a2
    && (v11 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 856),
        TrackWithFormatDescriptionOfType = fpfs_FirstTrackWithFormatDescriptionOfType(a2, 1986618469),
        v11)
    && (v13 = TrackWithFormatDescriptionOfType, CFArrayGetCount(v11) >= 1))
  {
    v14 = fpfsi_VideoOutputAllowedWithPermissivePolicy(v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(const __CFArray **)(a1 + 376);
  if (v15 && CFArrayGetCount(v15) > 0 || *(uint64_t *)(a1 + 400) >= 1)
    v14 = 1;
  v16 = *(const __CFArray **)(a1 + 432);
  if (v16)
  {
    if (CFArrayGetCount(v16) > 0)
      v14 = 1;
    else
      v14 = v14;
  }
  if (*(_BYTE *)(a1 + 462))
  {
    if (!a2)
      return 1;
    if (*(_BYTE *)(a1 + 496))
      return *(_QWORD *)(a1 + 80) == a2;
    return 0;
  }
  return v14;
}

const __CFDictionary *fpfsi_GetCurrentAudioPersistentIDFromMediaOption()
{
  const __CFArray *v0;
  uint64_t CFStringForOSTypeValue;
  const __CFDictionary *result;

  v0 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 1784);
  CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  result = fpfs_FindMediaTypeInMediaArray(v0, CFStringForOSTypeValue, 0);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("MediaSelectionOptionsPersistentID"));
  return result;
}

uint64_t fpfsi_setPlaybackMonitorAutoSwitchStreamQuality()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t (*v4)(uint64_t, const __CFString *, uint64_t);
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 96);
  if (!v2)
    return 0;
  v3 = *(unsigned __int8 *)(v1 + 458);
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v4)
    return 4294954514;
  if (v3)
    v5 = *MEMORY[0x1E0C9AE50];
  else
    v5 = *MEMORY[0x1E0C9AE40];
  return v4(v2, CFSTR("AfmfpbProperty_SwitchesQualityGearAutomatically"), v5);
}

uint64_t fpfsi_setAndPerformResourceConservation(const void *a1, int *a2)
{
  int v3;
  uint64_t DerivedStorage;
  const void *SInt32;
  uint64_t v6;
  void (*v7)(uint64_t, const __CFString *, const void *);

  v3 = *a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 96))
  {
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    v6 = *(_QWORD *)(DerivedStorage + 96);
    v7 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
    if (v7)
      v7(v6, CFSTR("AfmfpbProperty_ResourceConservationLevelWhenPaused"), SInt32);
    fpfsi_performCurrentResourceConservationAction(a1, v3);
    if (SInt32)
      CFRelease(SInt32);
  }
  else
  {
    fpfsi_performCurrentResourceConservationAction(a1, v3);
  }
  return 0;
}

BOOL fpfs_audioOnlyValidAlternateList(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, const __CFString *, _QWORD, _QWORD);
  void (*v4)(uint64_t, const __CFString *, _QWORD, _QWORD);

  v1 = *(_QWORD *)(a1 + 96);
  if (!v1)
    return 0;
  v4 = 0;
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (v2)
  {
    v2(v1, CFSTR("AfmfpbProperty_HasAudioOnlyAlternates"), *MEMORY[0x1E0C9AE00], &v4);
    v2 = v4;
  }
  return v2 == (void (*)(uint64_t, const __CFString *, _QWORD, _QWORD))*MEMORY[0x1E0C9AE50];
}

CFNumberRef fpfsi_GetCurrentDisplayVideoRangeFromMonitor()
{
  uint64_t v0;
  uint64_t AllocatorForMedia;
  void (*v2)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  CFNumberRef result;
  unsigned int valuePtr;
  CFNumberRef number;

  number = 0;
  valuePtr = 0;
  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  if (!v0)
    return 0;
  AllocatorForMedia = FigGetAllocatorForMedia();
  v2 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v2)
    return 0;
  v2(v0, CFSTR("AlternateFilterMonitorProperty_CurrentDisplayVideoRange"), AllocatorForMedia, &number);
  result = number;
  if (number)
  {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    CFRelease(number);
    return (CFNumberRef)valuePtr;
  }
  return result;
}

uint64_t fpfs_RTCReportingSetDisplayVideoRange(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  v2 = *(_QWORD *)(result + 2536);
  if (v2)
  {
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 48);
    if (v4)
      return v4(v2, CFSTR("playerStats"), CFSTR("DisplayVideoRange"), a2, 0);
  }
  return result;
}

const __CFString *fpfs_getVideoRangeStringFromFPSupportVideoRange(int a1)
{
  const __CFString *result;
  __CFString **v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CFSTR("Internal (HDR OK)");
  switch(a1)
  {
    case 0:
      goto LABEL_7;
    case 1:
      v3 = kFigAlternateVideoRangeString_SDR;
      return *v3;
    case 2:
      v3 = kFigAlternateVideoRangeString_HLG;
      return *v3;
    case 3:
      v3 = kFigAlternateVideoRangeString_HDR10;
      return *v3;
    case 4:
      v3 = kFigAlternateVideoRangeString_DoVi;
      return *v3;
    case 5:
      return result;
    default:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_7:
      v3 = kFigAlternateVideoRangeString_Unknown;
      return *v3;
  }
}

uint64_t fpfs_CancelTrialSwitch(uint64_t a1)
{
  _QWORD *DerivedStorage;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const void *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  result = DerivedStorage[220];
  if (result)
  {
    if (DerivedStorage[212])
    {
      FigAlternateGetPeakBitRate(result);
      FigAlternateGetPeakBitRate(DerivedStorage[212]);
      result = fpfs_SetAlternateWithContext(*DerivedStorage, a1, DerivedStorage[212], 1);
      if (!(_DWORD)result)
      {
        v4 = DerivedStorage[130];
        if (v4)
        {
          do
          {
            v5 = *(_QWORD *)(v4 + 8);
            if (*(_QWORD *)(v4 + 48) == DerivedStorage[2 * *(unsigned __int8 *)(v4 + 180) + 125])
              fpfs_DeleteTrack(a1);
            v4 = v5;
          }
          while (v5);
        }
        v6 = 0;
        v7 = 125;
        do
        {
          if (DerivedStorage[v7])
            StoreCurrentManifold((uint64_t)DerivedStorage, v6, 1u, 0);
          v8 = &DerivedStorage[v6];
          v9 = (const void *)v8[25];
          if (v9)
          {
            CFRelease(v9);
            v8[25] = 0;
          }
          *((_DWORD *)DerivedStorage + v6 + 239) = 0;
          *((_BYTE *)DerivedStorage + v6 + 3061) = 0;
          v8[143] = 0;
          ++v6;
          v7 += 2;
        }
        while (v6 != 3);
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t GetSwitchOptions(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (a2 != 0) | (2 * (*(float *)(a1 + 840) == 0.0));
  if (*(_BYTE *)(a1 + 553))
  {
    v4 = *(_QWORD *)(a1 + 1696);
    if (v4)
    {
      if ((v5 = *(_QWORD *)(a1 + 96)) != 0
        && FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(v5, v4)
        || FigCFArrayContainsValue())
      {
        v6 = *(_QWORD *)(a1 + 1040);
        if (v6)
        {
          while (*(_DWORD *)(v6 + 152) != 6)
          {
            v6 = *(_QWORD *)(v6 + 8);
            if (!v6)
              return v2;
          }
          return v2 | 4;
        }
      }
    }
  }
  return v2;
}

double fpfs_GetNextTimeToPlayIfEstablished@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __int128 v6;
  __int128 v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0uLL;
  v9 = 0;
  if (fpfsi_GetDuration(a1, &v8)
    || (BYTE12(v8) & 0x11) != 0x11
    || *(_BYTE *)(DerivedStorage + 592)
    || (*(_BYTE *)(DerivedStorage + 332) & 1) != 0)
  {
    return fpfs_GetNextTimeToPlay(DerivedStorage, 0, a2);
  }
  v5 = MEMORY[0x1E0CA2E18];
  v6 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  return *(double *)&v6;
}

void fpfsi_SetupSkipBitrateRangeFilter(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AllocatorForMedia;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, __CFString *, uint64_t, uint64_t *);
  int v10;
  int v11;
  const void *v12;
  uint64_t v13;
  int ExpectedAverageBitrate;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, const __CFString *, uint64_t);
  uint64_t v19;
  unsigned int (*v20)(uint64_t, const __CFString *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  cf = 0;
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 928);
  if (!v4)
    goto LABEL_25;
  v5 = *(_QWORD *)(DerivedStorage + 1720);
  if (!*(_BYTE *)(v3 + 458))
  {
    if (v5)
    {
      CFRelease(*(CFTypeRef *)(DerivedStorage + 1720));
      *(_QWORD *)(DerivedStorage + 1720) = 0;
    }
    goto LABEL_25;
  }
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBytePumpGetFigBaseObject(v4);
  v8 = v7;
  v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v9)
    v10 = v9(v8, CFSTR("FBP_RecoveryAlternate"), AllocatorForMedia, &v22);
  else
    v10 = -12782;
  v11 = FigCFEqual();
  v12 = *(const void **)(DerivedStorage + 1720);
  if (v11)
  {
    if (!v12)
      goto LABEL_9;
  }
  else
  {
    if (!v12)
      goto LABEL_9;
    v21 = *(_QWORD *)(DerivedStorage + 1040);
    if (v21)
    {
      do
      {
        if (*(_DWORD *)(v21 + 152) == 6 && !*(_BYTE *)(v21 + 184) && FigCFEqual())
          *(_BYTE *)(v21 + 189) = 1;
        v21 = *(_QWORD *)(v21 + 8);
      }
      while (v21);
      v12 = *(const void **)(DerivedStorage + 1720);
      if (!v12)
        goto LABEL_9;
    }
  }
  CFRelease(v12);
LABEL_9:
  v13 = v22;
  *(_QWORD *)(DerivedStorage + 1720) = v22;
  if (!v10)
  {
    if (v13)
    {
      ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(_QWORD *)(DerivedStorage + 1696));
      if (ExpectedAverageBitrate > (int)FigAlternateGetExpectedAverageBitrate(*(_QWORD *)(DerivedStorage + 1720)))
      {
        if (fpfs_ScheduleRecoverySwitch(a1, *(_QWORD *)(DerivedStorage + 1720), 1))
        {
          v15 = (void *)FigGetAllocatorForMedia();
          if (FigAlternateSkipBitrateRangeFilterCreate(v15, *(const void **)(DerivedStorage + 1720), *(const void **)(DerivedStorage + 1696), CFSTR("RecoveryAlternateSkipBitrateRange"), 605, &cf))goto LABEL_25;
          if (FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf))
            goto LABEL_25;
          v16 = *(_QWORD *)(DerivedStorage + 96);
          if (v16)
          {
            v17 = *(_QWORD *)(DerivedStorage + 1720);
            v18 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
            if (!v18 || v18(v16, CFSTR("AfmfpbProperty_RecoveryAlternate"), v17))
              goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
    }
  }
  if (v5)
  {
    v19 = *(_QWORD *)(DerivedStorage + 96);
    if ((!v19
       || (v20 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56)) != 0
       && !v20(v19, CFSTR("AfmfpbProperty_RecoveryAlternate"), 0))
      && !FigAlternateSelectionBossRemoveFilter(*(_QWORD *)(DerivedStorage + 40), (uint64_t)CFSTR("RecoveryAlternateSkipBitrateRange")))
    {
LABEL_24:
      FigAlternateSelectionBossApplyFilters(*(const void **)(DerivedStorage + 40));
    }
  }
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void fpfsi_SetupIFramePrefetch(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFTypeRef v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, __CFString *, _QWORD);
  double v11;
  uint64_t v12;
  uint64_t AllocatorForMedia;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  int v23;
  const __CFArray *v24;
  const void *ValueAtIndex;
  const void *v26;
  int AverageBitRate;
  int v28;
  int v29;
  CFNumberRef v30;
  CFNumberRef v31;
  const __CFAllocator *v32;
  const __CFDictionary *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t CMBaseObject;
  unsigned int (*v37)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  const __CFAllocator *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, __CFString *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, __CFString *, CFTypeRef);
  CFTypeRef v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, __CFString *, CFTypeRef);
  uint64_t v49;
  CFTypeRef v50;
  CFTypeRef v51;
  int valuePtr;
  CMTime v53;
  CFTypeRef cf;
  CMTime time;
  void *values;
  CFNumberRef v57;
  uint64_t v58;
  void *keys[6];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  memset(&v53, 0, sizeof(v53));
  valuePtr = 0;
  keys[1] = CFSTR("FSC_MemoryCacheSizeLimit");
  keys[2] = CFSTR("FSC_AddToDonorPool");
  values = CFSTR("FSC_MemoryBacking");
  v57 = 0;
  v3 = *MEMORY[0x1E0C9AE50];
  v58 = *MEMORY[0x1E0C9AE50];
  keys[0] = CFSTR("FSC_Backing");
  v51 = 0;
  v4 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v50 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  fpfsi_RTCReportingUpdatePlayerType(DerivedStorage, (uint64_t)CFSTR("scrub"));
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = (CFTypeRef *)(DerivedStorage + 2472);
  if (*(_QWORD *)(DerivedStorage + 2472))
  {
    v7 = *(_QWORD *)(DerivedStorage + 928);
    if (v7)
    {
      FigBytePumpGetFigBaseObject(v7);
      v9 = v8;
      v10 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v10)
        v10(v9, CFSTR("FBP_SegmentCache"), 0);
    }
    if (*v6)
    {
      CFRelease(*v6);
      *v6 = 0;
    }
  }
  v11 = *(double *)(DerivedStorage + 2464);
  if (v11 == 0.0 && *(double *)(DerivedStorage + 2456) == 0.0)
    goto LABEL_49;
  if (v11 <= 0.0 || *(double *)(DerivedStorage + 2456) <= 0.0)
    goto LABEL_48;
  if (!*(_QWORD *)(DerivedStorage + 928) || fpfsi_GetDuration(a1, (__int128 *)&v53.value))
    goto LABEL_49;
  if ((v53.flags & 0x1D) != 1)
    goto LABEL_48;
  v12 = *(_QWORD *)(DerivedStorage + 928);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBytePumpGetFigBaseObject(v12);
  v15 = v14;
  v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
  if (!v16)
    goto LABEL_49;
  v17 = v16(v15, CFSTR("FBP_DidTransitionFromLiveToVOD"), AllocatorForMedia, &v50);
  if (v17)
  {
    if (v17 != -12783)
      goto LABEL_49;
  }
  if (v50 != v4)
    goto LABEL_48;
  v18 = *(_QWORD *)(DerivedStorage + 928);
  v19 = FigGetAllocatorForMedia();
  FigBytePumpGetFigBaseObject(v18);
  v21 = v20;
  v22 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
  if (!v22)
    goto LABEL_49;
  v23 = v22(v21, CFSTR("FBP_SegmentCache"), v19, &cf);
  if (v23)
  {
    if (v23 != -12783)
      goto LABEL_49;
  }
  if (cf
    || (v24 = *(const __CFArray **)(DerivedStorage + 1680)) == 0
    || !CFArrayGetCount(v24)
    || (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1680), 0)) == 0)
  {
LABEL_48:
    FigSignalErrorAt();
LABEL_49:
    v31 = 0;
LABEL_50:
    v33 = 0;
    goto LABEL_51;
  }
  v26 = ValueAtIndex;
  AverageBitRate = FigAlternateGetAverageBitRate((uint64_t)ValueAtIndex);
  if (!AverageBitRate)
    AverageBitRate = FigAlternateGetPeakBitRate((uint64_t)v26);
  if (AverageBitRate >= 1000000)
    v28 = 1000000;
  else
    v28 = AverageBitRate;
  time = v53;
  v29 = (int)(CMTimeGetSeconds(&time) * (double)v28 * 0.125 * 0.5);
  if (v29 >= 419430400)
    v29 = 419430400;
  valuePtr = v29;
  v30 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v31 = v30;
  if (!v30)
  {
    FigSignalErrorAt();
    goto LABEL_50;
  }
  v57 = v30;
  v32 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v33 = CFDictionaryCreate(v32, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v33
    && (v34 = *(_QWORD *)(DerivedStorage + 32),
        v35 = FigGetAllocatorForMedia(),
        CMBaseObject = FigAssetGetCMBaseObject(v34),
        (v37 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48)) != 0)
    && !v37(CMBaseObject, CFSTR("assetProperty_ResolvedURL"), v35, &v51)
    && v51)
  {
    v38 = (const __CFAllocator *)FigGetAllocatorForMedia();
    if (!FigStreamingCacheCreate(v38, (const __CFURL *)v51, v33, (uint64_t *)&cf))
    {
      FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
      v40 = v39;
      v41 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (v41)
      {
        if (!v41(v40, CFSTR("FBP_CacheIFrames"), v3))
        {
          FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
          v43 = v42;
          v44 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v44)
            v44(v43, CFSTR("FBP_CacheNonIFrames"), v4);
          v45 = cf;
          FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
          v47 = v46;
          v48 = *(unsigned int (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (v48)
          {
            if (!v48(v47, CFSTR("FBP_SegmentCache"), v45))
            {
              v49 = FigGetAllocatorForMedia();
              if (!FigFramePrefetcherCreate(v49, *(_QWORD *)(DerivedStorage + 32), cf, v26, (_QWORD *)(DerivedStorage + 2472)))FigFramePrefetcherActivate((uint64_t)*v6);
            }
          }
        }
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_51:
  if (cf)
    CFRelease(cf);
  if (v51)
    CFRelease(v51);
  if (v33)
    CFRelease(v33);
  if (v31)
    CFRelease(v31);
  if (v50)
    CFRelease(v50);
}

uint64_t fpfs_SetAlternateWithContext(uint64_t a1, const void *a2, const void *a3, unsigned int a4, CMTime *a5, uint64_t a6, uint64_t a7, _DWORD *a8, uint64_t a9, unsigned int a10)
{
  uint64_t DerivedStorage;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const __CFString *, _QWORD);
  int v25;
  const void *v26;
  int IsIFrameOnly;
  const __CFAllocator *AllocatorForMedia;
  CFIndex Count;
  const __CFArray *MutableCopy;
  uint64_t CFStringForOSTypeValue;
  const void *v32;
  const void *v33;
  unsigned int v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, const void *, const __CFArray *, uint64_t, _QWORD, _QWORD, CMTime *, CMTime *, uint64_t, char *, uint64_t *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, const __CFString *, const void *);
  uint64_t v45;
  uint64_t (*v46)(uint64_t, const __CFString *, const __CFArray *);
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, __CFString *, _QWORD);
  int v50;
  const void *v51;
  const __CFAllocator *v52;
  uint64_t v53;
  CFTypeRef v54;
  void (*v55)(uint64_t, const void *, CFTypeRef);
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int isExternalVideoOutput;
  uint64_t v66;
  const void *v67;
  uint64_t v68;
  void (*v69)(uint64_t, const __CFString *, const void *);
  const __CFArray *v70;
  uint64_t v71;
  const __CFDictionary *MediaTypeInMediaArray;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  void (*v80)(uint64_t, const __CFString *, const void *);
  const void *v81;
  const void *v82;
  const void *v83;
  const void *NotificationPayloadForProperties;
  unsigned int IsAudioOnly;
  unsigned int v87;
  const __CFArray *v88;
  __int128 v90;
  CFTypeRef v91;
  CFTypeRef cf;
  uint64_t v93;
  CFTypeRef v94;
  CMTime rhs;
  CMTime time;
  CMTime lhs;
  CMTime v98[5];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = DerivedStorage;
  v93 = 0;
  v94 = 0;
  v91 = 0;
  cf = 0;
  v17 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (!*(_QWORD *)(DerivedStorage + 928))
  {
    v63 = 0;
    MutableCopy = 0;
    goto LABEL_72;
  }
  fpfsi_SetSwitchReasonCode(DerivedStorage, a10);
  if (*(_DWORD *)(v16 + 2788) != *(_DWORD *)(v16 + 2784))
  {
    *(_BYTE *)(v16 + 2288) = 1;
    fpfsi_RTCReportingReportVariantSwitchComplete((uint64_t)a2, 1u);
  }
  v87 = a4;
  v18 = (a4 >> 2) & 1;
  v19 = *(const void **)(v16 + 1752);
  if (v19)
  {
    if (!CFEqual(a3, v19))
    {
      v20 = *(const void **)(v16 + 1752);
      if (v20)
      {
        CFRelease(v20);
        *(_QWORD *)(v16 + 1752) = 0;
      }
    }
  }
  v21 = *(const void **)(v16 + 1760);
  if (v21 && v21 != a3)
  {
    fpfsi_RTCReportingReportTrialSwitchData((uint64_t)a2, 1);
    v22 = *(const void **)(v16 + 1760);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(v16 + 1760) = 0;
    }
    v23 = *(_QWORD *)(v16 + 96);
    if (v23)
    {
      v24 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v24)
        v24(v23, CFSTR("AfmfpbProperty_TrialAlternate"), 0);
    }
  }
  v25 = (a4 >> 2) & 1;
  if (!v18)
  {
    v26 = *(const void **)(v16 + 1696);
    if (v26)
    {
      if (v26 != a3)
        fpfs_CreateAccessLogEntryWithUnlock((uint64_t)a2, (CFMutableDictionaryRef *)&cf);
    }
  }
  IsIFrameOnly = FigAlternateIsIFrameOnly((uint64_t)a3);
  if (!fpfs_IsClosedCaptioningSelected(v16, 0))
  {
    v33 = *(const void **)(v16 + 1784);
    if (!v33)
    {
      MutableCopy = 0;
      if (!IsIFrameOnly)
        goto LABEL_23;
      goto LABEL_27;
    }
    MutableCopy = (const __CFArray *)CFRetain(v33);
    goto LABEL_26;
  }
  v98[0].value = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Count = CFArrayGetCount(*(CFArrayRef *)(v16 + 1784));
  MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, Count, *(CFArrayRef *)(v16 + 1784));
  if (!MutableCopy
    || (CFStringForOSTypeValue = FigGetCFStringForOSTypeValue(),
        fpfs_FindMediaTypeInMediaArray(MutableCopy, CFStringForOSTypeValue, &v98[0].value),
        CFArrayRemoveValueAtIndex(MutableCopy, v98[0].value),
        (v32 = *(const void **)(v16 + 1792)) == 0))
  {
LABEL_26:
    if (!IsIFrameOnly)
      goto LABEL_23;
    goto LABEL_27;
  }
  CFArrayAppendValue(MutableCopy, v32);
  if (!IsIFrameOnly)
  {
LABEL_23:
    IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)a3);
    goto LABEL_28;
  }
LABEL_27:
  IsAudioOnly = 0;
LABEL_28:
  v88 = MutableCopy;
  v34 = v25;
  if (*v17 == 1)
  {
    FigAlternateGetPeakBitRate((uint64_t)a3);
    if (!FigAlternateGetAverageBitRate((uint64_t)a3))
      FigAlternateGetPeakBitRate((uint64_t)a3);
    kdebug_trace();
  }
  if ((*(_BYTE *)(a6 + 12) & 1) != 0)
  {
    v98[0] = *(CMTime *)a6;
    v35 = CMBaseObjectGetDerivedStorage();
    v36 = v17;
    v37 = FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(_QWORD *)(v35 + 1696), (uint64_t)a3, *(const __CFArray **)(v35 + 1784), 1) == 0;
    if (!FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(_QWORD *)(v35 + 1696), (uint64_t)a3, *(const __CFArray **)(v35 + 1784), 2))v37 |= 2u;
    if (FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(_QWORD *)(v35 + 1696), (uint64_t)a3, *(const __CFArray **)(v35 + 1784), 4))v38 = v37;
    else
      v38 = v37 | 4;
    v17 = v36;
    MutableCopy = v88;
    fpfs_GetItemBufferedDuration(a2, a6, a7, v38);
    v34 = v25;
    lhs = v98[0];
    rhs = *(CMTime *)a6;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&lhs, &time);
    CMTimeMake(&rhs, 50, 1000);
    CMTimeCompare(&lhs, &rhs);
  }
  v39 = *(const void **)(v16 + 504);
  if (v39)
  {
    CFRelease(v39);
    *(_QWORD *)(v16 + 504) = 0;
  }
  v40 = *(_QWORD *)(v16 + 928);
  time = *a5;
  rhs = *(CMTime *)a6;
  v41 = *(uint64_t (**)(uint64_t, const void *, const __CFArray *, uint64_t, _QWORD, _QWORD, CMTime *, CMTime *, uint64_t, char *, uint64_t *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v41)
    goto LABEL_70;
  v98[0] = time;
  lhs = rhs;
  v42 = v41(v40, a3, MutableCopy, a9, IsAudioOnly, v87, v98, &lhs, a7, (char *)&v93 + 4, &v93, v16 + 12 * v34 + 944);
  if ((_DWORD)v42)
    goto LABEL_117;
  v43 = *(_QWORD *)(v16 + 120);
  if (v43)
  {
    v44 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (v44)
    {
      v42 = v44(v43, CFSTR("AlternateFilterMonitorProperty_SelectedAlternate"), a3);
      if ((_DWORD)v42)
        goto LABEL_117;
      v45 = *(_QWORD *)(v16 + 120);
      v46 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
      if (v46)
      {
        v42 = v46(v45, CFSTR("AlternateFilterMonitorProperty_SelectedMediaArray"), MutableCopy);
        if (!(_DWORD)v42)
          goto LABEL_48;
LABEL_117:
        v63 = v42;
        goto LABEL_71;
      }
    }
LABEL_70:
    v63 = 4294954514;
LABEL_71:
    *(_DWORD *)(v16 + 2284) = 0;
    goto LABEL_72;
  }
LABEL_48:
  if (!a3 || !FigAlternateGetLastKnownValueForIsFullyCached())
    goto LABEL_52;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v16 + 928));
  v48 = v47;
  v49 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v49)
    goto LABEL_70;
  v42 = v49(v48, CFSTR("FBP_EnableSuggestedAlternate"), *MEMORY[0x1E0C9AE40]);
  if ((_DWORD)v42)
    goto LABEL_117;
LABEL_52:
  v50 = (v87 >> 3) & 1;
  if (v50)
  {
    v51 = *(const void **)(v16 + 1760);
    if (v51)
    {
      CFRelease(v51);
      *(_QWORD *)(v16 + 1760) = 0;
    }
    HIDWORD(v93) = *(_DWORD *)(v16 + 1768) | *(_DWORD *)(v16 + 1088);
  }
  if (!v34 && cf)
    fpfs_CommitAccessLogEntry(a2, (__CFDictionary *)cf);
  if (a8)
    *a8 = v93;
  if (*(_QWORD *)(v16 + 1696))
  {
    if (!v34)
      goto LABEL_63;
  }
  else
  {
    v66 = *(_QWORD *)(v16 + 96);
    if (v66)
    {
      *(_OWORD *)&v98[0].value = *MEMORY[0x1E0C9D820];
      FigAlternatePlaybackBitrateMonitorGetMaxResolutionAndBitrate(*(double *)&v98[0].value, *(double *)&v98[0].timescale, v66, (double *)&v98[0].value, (int *)(v16 + 2868), 0);
    }
    fpfs_DetermineRanksOfVariant(v16, (uint64_t)a3, (int *)(v16 + 1744), (_DWORD *)(v16 + 1748));
    *(_DWORD *)(v16 + 2792) = *(_DWORD *)(v16 + 1744);
    *(_DWORD *)(v16 + 2820) = *(_DWORD *)(v16 + 1748);
    *(_DWORD *)(v16 + 2828) = FigAlternateGetVideoQualityIndex((uint64_t)a3);
    *(_DWORD *)(v16 + 2796) = *(_DWORD *)(v16 + 1744);
    *(_DWORD *)(v16 + 2824) = *(_DWORD *)(v16 + 1748);
    *(_DWORD *)(v16 + 2832) = FigAlternateGetVideoQualityIndex((uint64_t)a3);
    *(_DWORD *)(v16 + 2852) = *(_DWORD *)(v16 + 1744);
    *(_DWORD *)(v16 + 2856) = FigAlternateGetAverageBitRate((uint64_t)a3);
    fpfsi_RTCReportingUpdateInitialVariantRank(v16);
    if (!v34)
    {
LABEL_63:
      if (!FigCFEqual())
      {
        fpfsi_copyPlayableTime((uint64_t)a2, &v94);
        v52 = (const __CFAllocator *)FigGetAllocatorForMedia();
        fpfs_GetTime(v16, (uint64_t)&v90);
        FigMetricItemVariantChangeStartEventCreate(v52, &v90, 0, *(const void **)(v16 + 2528), a3, *(const void **)(v16 + 1696), v94, &v91);
        v53 = *(_QWORD *)(v16 + 3360);
        v54 = v91;
        v55 = *(void (**)(uint64_t, const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v55)
          v55(v53, a2, v54);
      }
      fpfs_ReportVariantSwitchStart((uint64_t)a2, (uint64_t)a3, a10, 0, v50);
      v56 = BYTE4(v93);
      v57 = CMBaseObjectGetDerivedStorage();
      v58 = v57;
      v59 = (v56 & 3) - 1;
      if (v59 <= 2)
      {
        v60 = qword_1932F7568[v59];
        v61 = qword_1932F7580[v59];
        *(_QWORD *)(v57 + 1096) = v60;
        *(_QWORD *)(v57 + 1104) = v61;
      }
      if ((v56 & 4) != 0)
      {
        v62 = !fpfs_IsClosedCaptioningSelected(v57, 0)
           && (v70 = *(const __CFArray **)(v58 + 1784),
               v71 = FigGetCFStringForOSTypeValue(),
               (MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v70, v71, 0)) != 0)
           && CFDictionaryGetValue(MediaTypeInMediaArray, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles")) == (const void *)*MEMORY[0x1E0C9AE50];
        ++*(_QWORD *)(v58 + 1096);
      }
      else
      {
        v62 = 0;
      }
      fpfsi_setNonForcedSubtitlesEnabled(a2, v62);
      v79 = *(_QWORD *)(v58 + 96);
      if (v79)
      {
        v80 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
        if (v80)
          v80(v79, CFSTR("AfmfpbProperty_CurrentAlternate"), a3);
      }
      v81 = *(const void **)(v58 + 2840);
      v82 = *(const void **)(v58 + 1696);
      *(_QWORD *)(v58 + 2840) = v82;
      if (v82)
        CFRetain(v82);
      if (v81)
        CFRelease(v81);
      v83 = *(const void **)(v58 + 1696);
      *(_QWORD *)(v58 + 1696) = a3;
      if (a3)
        CFRetain(a3);
      if (v83)
        CFRelease(v83);
      NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(*(const void **)v58, (uint64_t)a2, v73, v74, v75, v76, v77, v78, CFSTR("SupportsFrameStepping"), (uint64_t)CFSTR("CanPlayFastForward"));
      fpfs_EnqueueNotification(*(const void **)v58, CFSTR("AlternateStreamChanged"), a2, NotificationPayloadForProperties);
    }
  }
  v67 = *(const void **)(v16 + 1760);
  *(_QWORD *)(v16 + 1760) = a3;
  if (a3)
    CFRetain(a3);
  if (v67)
    CFRelease(v67);
  *(_DWORD *)(v16 + 1768) = v93;
  fpfs_ReportVariantSwitchStart((uint64_t)a2, (uint64_t)a3, a10, 1, 0);
  v68 = *(_QWORD *)(v16 + 96);
  if (v68)
  {
    v69 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
    if (v69)
      v69(v68, CFSTR("AfmfpbProperty_TrialAlternate"), a3);
  }
  v63 = 0;
  *(_DWORD *)(v16 + 2812) = v93;
LABEL_72:
  isExternalVideoOutput = fpfs_isExternalVideoOutput();
  if ((_DWORD)v63 == -16835 && isExternalVideoOutput)
    v63 = FigSignalErrorAt();
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (cf)
    CFRelease(cf);
  if (v94)
    CFRelease(v94);
  if (v91)
    CFRelease(v91);
  if (*v17 == 1)
    kdebug_trace();
  return v63;
}

uint64_t GetCurrentManifold(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 < 3)
    return *(_QWORD *)(a1 + 16 * a2 + 8 * a3 + 992);
  FigSignalErrorAt();
  return -1;
}

void StoreCurrentManifold(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4)
{
  const void **v8;
  const void *v9;
  CFTypeRef v10;
  CFTypeRef cf;

  cf = 0;
  if (a2 >= 3)
  {
    FigSignalErrorAt();
  }
  else if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(*(_QWORD *)(a1 + 16), 0, &cf))
  {
    v10 = cf;
    if (cf)
LABEL_13:
      CFRelease(v10);
  }
  else
  {
    v8 = (const void **)(a1 + 16 * a2 + 8 * a3 + 992);
    if (*v8)
    {
      FigStopForwardingMediaServicesProcessDeathNotification();
      v9 = *v8;
    }
    else
    {
      v9 = 0;
    }
    *v8 = a4;
    if (a4)
      CFRetain(a4);
    if (v9)
      CFRelease(v9);
    v10 = cf;
    if (a4)
      FigStartForwardingMediaServicesProcessDeathNotification();
    if (v10)
      goto LABEL_13;
  }
}

void fpfsi_SetSwitchReasonCode(uint64_t a1, unsigned int a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(a1 + 2284))
    *(_DWORD *)(a1 + 2284) = a2;
  if (a2 <= 0x10 && ((1 << a2) & 0x1800C) != 0)
    *(CFAbsoluteTime *)(a1 + 2000) = CFAbsoluteTimeGetCurrent();
}

void fpfsi_RTCReportingReportVariantSwitchComplete(uint64_t a1, unsigned int a2)
{
  uint64_t DerivedStorage;
  uint64_t UpTimeNanoseconds;
  uint64_t v5;
  double Seconds;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  const __CFString *v13;
  const __CFString *v14;
  unint64_t v15;
  double v16;
  double v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v40;
  double v41;
  void (*v42)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v43;
  double v44;
  void (*v45)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v46;
  void (*v47)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v48;
  void (*v49)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v50;
  void (*v51)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  uint64_t v52;
  void (*v53)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  uint64_t v54;
  void (*v55)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v56;
  void (*v57)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  uint64_t v58;
  void (*v59)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v60;
  void (*v61)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v62;
  double v63;
  void (*v64)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v68;
  void (*v69)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  int v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  CMTime v77;
  CMTime time;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfsi_RTCReportingUpdateCurrentAlternateInfo();
  if (a2 || *(int *)(DerivedStorage + 2784) >= 1)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    *(_QWORD *)(DerivedStorage + 2656) = UpTimeNanoseconds;
    v5 = *(_QWORD *)(DerivedStorage + 2624);
    time = *(CMTime *)(DerivedStorage + 2696);
    Seconds = CMTimeGetSeconds(&time);
    time = *(CMTime *)(DerivedStorage + 2672);
    v7 = CMTimeGetSeconds(&time);
    time = *(CMTime *)(DerivedStorage + 2744);
    v8 = CMTimeGetSeconds(&time);
    time = *(CMTime *)(DerivedStorage + 2720);
    v9 = CMTimeGetSeconds(&time);
    v10 = *(double *)(DerivedStorage + 2648);
    fpfs_GetTime(DerivedStorage, (uint64_t)&v77);
    v11 = CMTimeGetSeconds(&v77);
    v12 = *(_DWORD *)(DerivedStorage + 2836);
    v13 = CFSTR("Up");
    if (v12 == 2)
    {
      v14 = CFSTR("Up");
    }
    else
    {
      v14 = CFSTR("Down");
      if (v12 != 3 && v12 != 15 && *(_DWORD *)(DerivedStorage + 2792) <= *(_DWORD *)(DerivedStorage + 2796))
        v14 = CFSTR("Up");
      v13 = CFSTR("None");
      switch(v12)
      {
        case 0:
          break;
        case 1:
          v13 = CFSTR("Seek");
          break;
        case 3:
          v13 = CFSTR("DownBW");
          break;
        case 4:
          v13 = CFSTR("DownStall");
          break;
        case 5:
          v13 = CFSTR("Deactivate");
          break;
        case 6:
          v13 = CFSTR("Stop");
          break;
        case 7:
          v13 = CFSTR("AltChanged");
          break;
        case 8:
          v13 = CFSTR("IFrameOnly");
          break;
        case 9:
          v13 = CFSTR("MediaSel");
          break;
        case 10:
          v13 = CFSTR("StopWhileStall");
          break;
        case 11:
          v13 = CFSTR("StopBeforeStart");
          break;
        case 12:
          v13 = CFSTR("SeekInCache");
          break;
        case 13:
          v13 = CFSTR("AltHadGapErr");
          break;
        case 14:
          v13 = CFSTR("Relabel");
          break;
        case 15:
          v13 = CFSTR("LLDown");
          break;
        case 16:
          v13 = CFSTR("VideoFrmtChg");
          break;
        default:
          v13 = CFSTR("Unknown");
          break;
      }
    }
    v15 = UpTimeNanoseconds - v5;
    v16 = v8 - v9;
    v17 = v10 - v11;
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_BYTE *)(DerivedStorage + 2816))
      v19 = CFSTR("Aud");
    else
      v19 = 0;
    v20 = CFSTR("AuVd");
    if (!*(_BYTE *)(DerivedStorage + 2816))
      v20 = CFSTR("Vid");
    if (*(_BYTE *)(DerivedStorage + 2817))
      v21 = v20;
    else
      v21 = v19;
    v22 = *(_QWORD *)(DerivedStorage + 2536);
    if (v22)
    {
      v23 = *(int *)(DerivedStorage + 2796);
      v24 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v24)
        v24(v22, CFSTR("playerStats"), CFSTR("ToVaRnk"), v23, 0);
    }
    v25 = *(_QWORD *)(DerivedStorage + 2536);
    if (v25)
    {
      v26 = *(int *)(DerivedStorage + 2792);
      v27 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v27)
        v27(v25, CFSTR("playerStats"), CFSTR("FrVaRnk"), v26, 0);
    }
    v28 = *(_QWORD *)(DerivedStorage + 2536);
    if (v28)
    {
      v29 = *(int *)(DerivedStorage + 2820);
      v30 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v30)
        v30(v28, CFSTR("playerStats"), CFSTR("FrBitRnk"), v29, 0);
    }
    v31 = *(_QWORD *)(DerivedStorage + 2536);
    if (v31)
    {
      v32 = *(int *)(DerivedStorage + 2824);
      v33 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v33)
        v33(v31, CFSTR("playerStats"), CFSTR("ToBitRnk"), v32, 0);
    }
    v34 = *(_QWORD *)(DerivedStorage + 2536);
    if (v34)
    {
      v35 = *(int *)(DerivedStorage + 2828);
      v36 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v36)
        v36(v34, CFSTR("playerStats"), CFSTR("FrVaQltyIndx"), v35, 0);
    }
    v37 = *(_QWORD *)(DerivedStorage + 2536);
    if (v37)
    {
      v38 = *(int *)(DerivedStorage + 2832);
      v39 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v39)
        v39(v37, CFSTR("playerStats"), CFSTR("ToVaQltyIndx"), v38, 0);
    }
    v40 = *(_QWORD *)(DerivedStorage + 2536);
    if (v40)
    {
      v41 = *(double *)(DerivedStorage + 2632);
      v42 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v42)
        v42(v40, CFSTR("playerStats"), CFSTR("NWFetchTime"), (uint64_t)(v41 * 1000.0), 0);
    }
    v43 = *(_QWORD *)(DerivedStorage + 2536);
    if (v43)
    {
      v44 = *(double *)(DerivedStorage + 2640);
      v45 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v45)
        v45(v43, CFSTR("playerStats"), CFSTR("TrackSyncTime"), (uint64_t)(v44 * 1000.0), 0);
    }
    v46 = *(_QWORD *)(DerivedStorage + 2536);
    if (v46)
    {
      v47 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v47)
        v47(v46, CFSTR("playerStats"), CFSTR("TrackStartTime"), (uint64_t)(v17 * 1000.0), 0);
      v48 = *(_QWORD *)(DerivedStorage + 2536);
      if (v48)
      {
        v49 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
        if (v49)
          v49(v48, CFSTR("playerStats"), CFSTR("SwTime"), v15 / 0xF4240, 0);
        v50 = *(_QWORD *)(DerivedStorage + 2536);
        if (v50)
        {
          v51 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
          if (v51)
            v51(v50, CFSTR("playerStats"), CFSTR("SwDir"), v14, 0);
          v52 = *(_QWORD *)(DerivedStorage + 2536);
          if (v52)
          {
            v53 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (v53)
              v53(v52, CFSTR("playerStats"), CFSTR("SwReason"), v13, 0);
            v54 = *(_QWORD *)(DerivedStorage + 2536);
            if (v54)
            {
              v55 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 56);
              if (v55)
                v55(v54, CFSTR("playerStats"), CFSTR("SwFail"), a2, 0);
              v56 = *(_QWORD *)(DerivedStorage + 2536);
              if (v56)
              {
                v57 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                if (v57)
                  v57(v56, CFSTR("playerStats"), CFSTR("MediaType"), v21, 0);
                v58 = *(_QWORD *)(DerivedStorage + 2536);
                if (v58)
                {
                  v59 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                  if (v59)
                    v59(v58, CFSTR("playerStats"), CFSTR("AudioOverlap"), (uint64_t)((Seconds - v7) * 1000.0), 0);
                  v60 = *(_QWORD *)(DerivedStorage + 2536);
                  if (v60)
                  {
                    v61 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                    if (v61)
                      v61(v60, CFSTR("playerStats"), CFSTR("VideoOverlap"), (uint64_t)(v16 * 1000.0), 0);
                    v62 = *(_QWORD *)(DerivedStorage + 2536);
                    if (v62)
                    {
                      v63 = *(double *)(DerivedStorage + 2768);
                      v64 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                      if (v64)
                        v64(v62, CFSTR("playerStats"), CFSTR("IgnoredVideoOverlap"), (uint64_t)(v63 * 1000.0), 0);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v65 = *(_QWORD *)(DerivedStorage + 2536);
    if (v65)
    {
      v66 = *(unsigned __int8 *)(DerivedStorage + 2808);
      v67 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v67)
        v67(v65, CFSTR("playerStats"), CFSTR("BadSw"), v66, 0);
    }
    v68 = *(_QWORD *)(DerivedStorage + 2536);
    if (v68)
    {
      v69 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
      if (v69)
        v69(v68, CFSTR("playerStats"), 109, 0, 0);
    }
    if (a2)
    {
      v70 = *(_DWORD *)(DerivedStorage + 2792);
      if (v70 >= 1)
      {
        *(_DWORD *)(DerivedStorage + 1744) = v70;
        *(_DWORD *)(DerivedStorage + 1748) = *(_DWORD *)(DerivedStorage + 2820);
      }
    }
    *(_QWORD *)(DerivedStorage + 2768) = 0;
    *(_OWORD *)(DerivedStorage + 2624) = 0u;
    *(_OWORD *)(DerivedStorage + 2640) = 0u;
    *(_QWORD *)(DerivedStorage + 2656) = 0;
    v71 = MEMORY[0x1E0CA2E18];
    v72 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 2672) = *MEMORY[0x1E0CA2E18];
    v73 = *(_QWORD *)(v71 + 16);
    *(_QWORD *)(DerivedStorage + 2688) = v73;
    v74 = MEMORY[0x1E0CA2E28];
    v75 = *MEMORY[0x1E0CA2E28];
    *(_OWORD *)(DerivedStorage + 2696) = *MEMORY[0x1E0CA2E28];
    v76 = *(_QWORD *)(v74 + 16);
    *(_QWORD *)(DerivedStorage + 2712) = v76;
    *(_QWORD *)(DerivedStorage + 2736) = v73;
    *(_OWORD *)(DerivedStorage + 2720) = v72;
    *(_OWORD *)(DerivedStorage + 2744) = v75;
    *(_QWORD *)(DerivedStorage + 2760) = v76;
    *(_DWORD *)(DerivedStorage + 2796) = -1;
    *(_DWORD *)(DerivedStorage + 2824) = -1;
    *(_BYTE *)(DerivedStorage + 2800) = 0;
    *(_BYTE *)(DerivedStorage + 2808) = 0;
    *(_DWORD *)(DerivedStorage + 2812) = 0;
    *(_WORD *)(DerivedStorage + 2816) = 0;
    *(_QWORD *)(DerivedStorage + 2776) = 0;
    *(_DWORD *)(DerivedStorage + 2792) = *(_DWORD *)(DerivedStorage + 1744);
    *(_DWORD *)(DerivedStorage + 2788) = *(_DWORD *)(DerivedStorage + 2784);
    *(_DWORD *)(DerivedStorage + 2820) = *(_DWORD *)(DerivedStorage + 1748);
    if (!a2)
      *(_DWORD *)(DerivedStorage + 2828) = FigAlternateGetVideoQualityIndex(*(_QWORD *)(DerivedStorage + 1696));
  }
}

uint64_t fpfsi_RTCReportingReportTrialSwitchData(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, __CFString *, __CFString *, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  v4 = result;
  if (!a2 && *(uint64_t *)(result + 2624) > 0)
  {
    result = FigGetUpTimeNanoseconds();
    v5 = *(_QWORD *)(v4 + 2536);
    if (v5)
    {
      v6 = result;
      v7 = *(_QWORD *)(v4 + 2624);
      result = CMBaseObjectGetVTable();
      v8 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(result + 16) + 56);
      if (v8)
        result = v8(v5, CFSTR("playerStats"), CFSTR("TrlSwTime"), (v6 - v7) / 0xF4240uLL, 0);
    }
  }
  *(_QWORD *)(v4 + 2624) = 0;
  v9 = *(_QWORD *)(v4 + 2536);
  if (v9)
  {
    result = CMBaseObjectGetVTable();
    v10 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(result + 16) + 32);
    if (v10)
      result = v10(v9, CFSTR("playerStats"), CFSTR("TrlSwCnt"), 1);
  }
  if (a2)
  {
    v11 = *(_QWORD *)(v4 + 2536);
    if (v11)
    {
      result = CMBaseObjectGetVTable();
      v12 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(result + 16) + 32);
      if (v12)
        return v12(v11, CFSTR("playerStats"), CFSTR("TrlSwCancelCnt"), 1);
    }
  }
  return result;
}

uint64_t fpfs_CreateAccessLogEntryWithUnlock(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, __CFString *, uint64_t, CFMutableDictionaryRef *);
  const __CFAllocator *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  double v13;
  const __CFAllocator *v14;
  CFDateRef v15;
  CFDateRef v16;
  double v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  double v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  const void *v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  double valuePtr;
  CFMutableDictionaryRef theDict;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theDict = 0;
  if (!*(_QWORD *)(DerivedStorage + 928))
    return 4294954436;
  v4 = DerivedStorage;
  if (fpfs_PlayingVideoOnly())
  {
    result = 0;
    *a2 = 0;
    return result;
  }
  v6 = *(_QWORD *)(v4 + 928);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBaseObject = FigBytePumpGetFigBaseObject(v6);
  v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFMutableDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (!v9)
    return 4294954514;
  v36 = 0;
  valuePtr = 0.0;
  result = v9(FigBaseObject, CFSTR("FBP_AccessLog"), AllocatorForMedia, &theDict);
  if (!(_DWORD)result)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v4 + 1744));
    if (v11)
    {
      v12 = v11;
      CFDictionarySetValue(theDict, CFSTR("c-variant-rank"), v11);
      CFRelease(v12);
      v13 = *(double *)(v4 + 1920);
      if (v13 > 0.0)
      {
        v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v15 = CFDateCreate(v14, v13);
        if (!v15)
          goto LABEL_40;
        v16 = v15;
        CFDictionarySetValue(theDict, CFSTR("date"), v15);
        CFRelease(v16);
      }
      if ((*(_QWORD *)(v4 + 2616) & 0x8000000000000000) != 0)
      {
        v17 = *(double *)(v4 + 1944);
        valuePtr = v17;
        if (*(double *)(v4 + 1936) != 0.0)
          valuePtr = v17 + (CFAbsoluteTimeGetCurrent() - *(double *)(v4 + 1936)) * fabsf(*(float *)(v4 + 840));
      }
      else
      {
        valuePtr = 0.0;
      }
      v18 = CFNumberCreate(v10, kCFNumberDoubleType, &valuePtr);
      if (v18)
      {
        v19 = v18;
        CFDictionarySetValue(theDict, CFSTR("c-duration-watched"), v18);
        CFRelease(v19);
        if ((*(_QWORD *)(v4 + 2616) & 0x8000000000000000) != 0)
        {
          valuePtr = *(double *)(v4 + 1952);
          if (*(double *)(v4 + 1936) != 0.0)
            valuePtr = valuePtr + CFAbsoluteTimeGetCurrent() - *(double *)(v4 + 1936);
        }
        else
        {
          valuePtr = 0.0;
        }
        v20 = CFNumberCreate(v10, kCFNumberDoubleType, &valuePtr);
        if (v20)
        {
          v21 = v20;
          CFDictionarySetValue(theDict, CFSTR("c-wall-clock-duration-watched"), v20);
          CFRelease(v21);
          valuePtr = *(double *)(v4 + 1928);
          v22 = CFNumberCreate(v10, kCFNumberDoubleType, &valuePtr);
          if (v22)
          {
            v23 = v22;
            CFDictionarySetValue(theDict, CFSTR("c-start-time"), v22);
            CFRelease(v23);
            if (!*(_BYTE *)(v4 + 2074))
            {
LABEL_28:
              v36 = 0;
              v27 = CFNumberCreate(v10, kCFNumberCFIndexType, &v36);
              if (v27)
              {
                v28 = v27;
                CFDictionarySetValue(theDict, CFSTR("c-frames-dropped"), v27);
                CFRelease(v28);
                v29 = CFNumberCreate(v10, kCFNumberCFIndexType, (const void *)(v4 + 2088));
                if (v29)
                {
                  v30 = v29;
                  CFDictionarySetValue(theDict, CFSTR("c-stalls"), v29);
                  CFRelease(v30);
                  if (!*(_DWORD *)(v4 + 2284))
                  {
LABEL_33:
                    v33 = *(const void **)(v4 + 2352);
                    if (v33)
                      CFDictionarySetValue(theDict, CFSTR("c-service-identifier"), v33);
                    v34 = (const void *)*MEMORY[0x1E0C9AE50];
                    if (*(_BYTE *)(v4 + 2288))
                      v35 = (const void *)*MEMORY[0x1E0C9AE50];
                    else
                      v35 = (const void *)*MEMORY[0x1E0C9AE40];
                    CFDictionarySetValue(theDict, CFSTR("c-switch-failure"), v35);
                    *(_BYTE *)(v4 + 2288) = 0;
                    CFDictionarySetValue(theDict, CFSTR("c-provisional-entry"), v34);
                    result = 0;
                    *a2 = theDict;
                    return result;
                  }
                  v31 = CFNumberCreate(v10, kCFNumberIntType, (const void *)(v4 + 2284));
                  if (v31)
                  {
                    v32 = v31;
                    CFDictionarySetValue(theDict, CFSTR("c-reason"), v31);
                    CFRelease(v32);
                    *(_DWORD *)(v4 + 2284) = 0;
                    goto LABEL_33;
                  }
                }
              }
              goto LABEL_40;
            }
            v24 = *(double *)(v4 + 1992);
            if (v24 <= 0.0)
              v24 = *(double *)(v4 + 1984);
            valuePtr = v24;
            v25 = CFNumberCreate(v10, kCFNumberDoubleType, &valuePtr);
            if (v25)
            {
              v26 = v25;
              CFDictionarySetValue(theDict, CFSTR("c-startup-time"), v25);
              CFRelease(v26);
              goto LABEL_28;
            }
          }
        }
      }
    }
LABEL_40:
    if (theDict)
      CFRelease(theDict);
    return 4294954434;
  }
  return result;
}

void fpfs_CommitAccessLogEntry(const void *a1, __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  double Resolution;
  double v8;
  const void *CodecString;
  const __CFString *VideoRangeString;
  CFIndex Count;
  uint64_t v12;
  UInt32 mChannelsPerFrame;
  int v14;
  const AudioStreamBasicDescription *StreamBasicDescription;
  CMTime v16;
  CMTime lhs;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    if (!fpfs_PlayingVideoOnly())
    {
      v6 = *(_QWORD *)(v5 + 1696);
      if (v6)
      {
        Resolution = FigAlternateGetResolution(v6);
        if (v8 > 0.0 && Resolution > 0.0)
        {
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
        }
        CodecString = (const void *)FigAlternateGetCodecString(*(_QWORD *)(v5 + 1696));
        if (CodecString)
          CFDictionarySetValue(a2, CFSTR("c-codec-names"), CodecString);
        VideoRangeString = FigAlternateGetVideoRangeString(*(const __CFString **)(v5 + 1696));
        if (VideoRangeString)
          CFDictionarySetValue(a2, CFSTR("c-video-range"), VideoRangeString);
      }
      Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 1904));
      CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 1904), a2);
      if (!Count)
        fpfsi_UpdateAccessLogStartupPerformanceMetrics();
      if (!*(_BYTE *)(v5 + 2120))
        fpfs_EnqueueNotification(*(const void **)v5, CFSTR("NewAccessLogEntry"), a1, 0);
      if (*(float *)(v5 + 840) == 0.0)
      {
        *(_QWORD *)(v5 + 1936) = 0;
      }
      else
      {
        *(CFAbsoluteTime *)(v5 + 1936) = CFAbsoluteTimeGetCurrent();
        fpfs_GetTime(v5, (uint64_t)&lhs);
        v16 = *(CMTime *)(v5 + 1176);
        CMTimeAdd(&time, &lhs, &v16);
        *(Float64 *)(v5 + 1928) = CMTimeGetSeconds(&time);
      }
      v12 = *(_QWORD *)(v5 + 1040);
      if (v12)
      {
        mChannelsPerFrame = 0;
        v14 = 0;
        do
        {
          if ((*(_QWORD *)(v12 + 424) & 0x8000000000000000) != 0
            && *(_QWORD *)(v5 + 1104) == *(unsigned __int8 *)(v12 + 180))
          {
            *(_QWORD *)(v12 + 424) = Count;
            if (*(_DWORD *)(v12 + 152) == 6)
            {
              if ((*(_QWORD *)(v5 + 2616) & 0x8000000000000000) != 0)
                *(_QWORD *)(v5 + 2616) = Count;
              v14 = 1;
            }
          }
          if (*(_DWORD *)(v12 + 32) == 1936684398)
          {
            StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v12 + 40));
            if (StreamBasicDescription)
            {
              if ((*(_DWORD *)(v12 + 152) == 6 || *(_QWORD *)(v12 + 424) == Count)
                && StreamBasicDescription->mChannelsPerFrame > mChannelsPerFrame)
              {
                mChannelsPerFrame = StreamBasicDescription->mChannelsPerFrame;
              }
            }
          }
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
        if (mChannelsPerFrame)
          FigCFDictionarySetInt32();
      }
      else
      {
        v14 = 0;
      }
      *(_QWORD *)(v5 + 1920) = *(_QWORD *)(v5 + 1936);
      *(_QWORD *)(v5 + 2088) = 0;
      *(_BYTE *)(v5 + 2120) = 0;
      *(_OWORD *)(v5 + 1944) = 0u;
      if (!v14)
        fpfs_MarkAccessLogEntryComplete((uint64_t)a1, Count);
    }
  }
}

uint64_t fpfsi_RTCReportingUpdateInitialVariantRank(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  v1 = result;
  v2 = *(_QWORD *)(result + 2536);
  if (v2)
  {
    v3 = *(int *)(result + 2852);
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 56);
    if (v4)
      result = v4(v2, CFSTR("playerStats"), CFSTR("InVaRk"), v3, 0);
  }
  v5 = *(_QWORD *)(v1 + 2536);
  if (v5)
  {
    v6 = *(int *)(v1 + 2856);
    result = CMBaseObjectGetVTable();
    v7 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 56);
    if (v7)
      return v7(v5, CFSTR("playerStats"), CFSTR("InVaBR"), v6, 0);
  }
  return result;
}

uint64_t fpfs_ReportVariantSwitchStart(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage;
  int PeakBitRate;
  int v12;
  const void *DescriptionString;
  const void *v14;
  const __CFAllocator *AllocatorForMedia;
  const char *v16;
  const char *v17;
  const char *v18;
  CFStringRef v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v27;
  double v28;
  void (*v29)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v30;
  double v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v36;
  uint64_t HDCPLevel;
  uint64_t v38;
  void (*v39)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t result;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  os_log_type_t type;
  int v49;
  int v50;
  double v51[16];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v46 = 0;
  v47 = -1;
  PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)(DerivedStorage + 1696));
  v12 = FigAlternateGetPeakBitRate(a2);
  DescriptionString = (const void *)FigAlternateCreateDescriptionString(*(_QWORD *)(DerivedStorage + 1696));
  v14 = (const void *)FigAlternateCreateDescriptionString(a2);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v16 = "completing";
  v45 = a5;
  if (!a5)
    v16 = "starting";
  v17 = " trial";
  if (!a4)
    v17 = "";
  v18 = "down";
  if (v12 > PeakBitRate)
    v18 = "up";
  v19 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[%p]: <%p>: (%d): %s%s switch %s from [%@] to [%@]"), *(_QWORD *)DerivedStorage, a1, *(_QWORD *)(DerivedStorage + 160), v16, v17, v18, DescriptionString, v14);
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 808) == 1 || *(_BYTE *)(DerivedStorage + 1728))
  {
    if (!dword_1EE2A2A88)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (dword_1EE2A2A88)
  {
LABEL_10:
    v49 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_11:
  if (DescriptionString)
    CFRelease(DescriptionString);
  if (v14)
    CFRelease(v14);
  if (v19)
    CFRelease(v19);
  v21 = CMBaseObjectGetDerivedStorage();
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)(v21 + 96);
    if (v23)
    {
      v50 = 0;
      *(_OWORD *)v51 = 0uLL;
      FigAlternatePlaybackBitrateMonitorGetMaxResolutionAndBitrate(*(double *)(v22 + 2544), *(double *)(v22 + 2552), v23, v51, (int *)(v22 + 2868), &v50);
      if (v51[0] == 0.0 || v51[1] == 0.0)
      {
LABEL_30:
        v33 = *(_QWORD *)(v22 + 2536);
        if (v33)
        {
          v34 = *(int *)(v22 + 2868);
          v35 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v35)
            v35(v33, CFSTR("playerStats"), CFSTR("MaxPlayerNormIBR"), v34, 0);
        }
        goto LABEL_33;
      }
      *(_OWORD *)(v22 + 2544) = *(_OWORD *)v51;
      v24 = *(_QWORD *)(v22 + 2536);
      if (v24)
      {
        v25 = v50;
        v26 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v26)
          v26(v24, CFSTR("playerStats"), CFSTR("MaxVideoQltyIndex"), v25, 0);
        v27 = *(_QWORD *)(v22 + 2536);
        if (v27)
        {
          v28 = *(double *)(v22 + 2544);
          v29 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v29)
            v29(v27, CFSTR("playerStats"), CFSTR("MaxReWd"), (uint64_t)v28, 0);
          v30 = *(_QWORD *)(v22 + 2536);
          if (v30)
          {
            v31 = *(double *)(v22 + 2552);
            v32 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v32)
              v32(v30, CFSTR("playerStats"), CFSTR("MaxReHt"), (uint64_t)v31, 0);
            goto LABEL_30;
          }
        }
      }
    }
  }
LABEL_33:
  v36 = *(_QWORD *)(DerivedStorage + 1696);
  if (v36)
    HDCPLevel = (int)FigAlternateGetHDCPLevel(v36);
  else
    HDCPLevel = -2;
  v38 = *(_QWORD *)(DerivedStorage + 2536);
  if (v38)
  {
    v39 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v39)
      v39(v38, CFSTR("playerStats"), CFSTR("CurrHDCP"), HDCPLevel, 0);
  }
  fpfs_DetermineRanksOfVariant(DerivedStorage, a2, &v47, &v46);
  if (a4)
  {
    *(_QWORD *)(DerivedStorage + 2624) = FigGetUpTimeNanoseconds();
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 1744) = v47;
    *(_DWORD *)(DerivedStorage + 1748) = v46;
  }
  if (v45)
    fpfsi_RTCReportingReportTrialSwitchData(a1, 0);
  result = FigAlternateIsIFrameOnly(a2);
  if (!(_DWORD)result)
  {
    v41 = (a3 & 0xFFFFFFFE) == 2 || a3 == 16;
    v42 = v41 || (a3 & 0xFFFFFFF7) == 7;
    if (v42 && v47 != -1)
    {
      if (*(_QWORD *)(DerivedStorage + 2624))
      {
        if (a4)
        {
LABEL_56:
          *(_DWORD *)(DerivedStorage + 2796) = v47;
          *(_DWORD *)(DerivedStorage + 2824) = v46;
          *(_DWORD *)(DerivedStorage + 2832) = FigAlternateGetVideoQualityIndex(a2);
          v43 = *(_QWORD *)(DerivedStorage + 2664);
          v44 = *(_QWORD *)(DerivedStorage + 2624);
          if (v43)
          {
            if (v44 - v43 <= 0x2540BE3FFLL && *(_DWORD *)(DerivedStorage + 2836) != a3)
              *(_BYTE *)(DerivedStorage + 2808) = 1;
          }
          else
          {
            *(_QWORD *)(DerivedStorage + 2664) = v44;
          }
          *(_DWORD *)(DerivedStorage + 2836) = a3;
          result = FigAlternateGetPeakBitRate(*(_QWORD *)(DerivedStorage + 1696));
          *(double *)(DerivedStorage + 2776) = (double)(int)result;
          return result;
        }
      }
      else
      {
        *(_QWORD *)(DerivedStorage + 2624) = FigGetUpTimeNanoseconds();
        if (a4)
          goto LABEL_56;
      }
      ++*(_DWORD *)(DerivedStorage + 2784);
      goto LABEL_56;
    }
  }
  return result;
}

uint64_t fpfsi_copyPlayableTime(uint64_t a1, CFTypeRef *a2)
{
  CMTime *DerivedStorage;
  __int128 v5;
  uint64_t epoch;
  BOOL v7;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v10;
  CMTimeFlags flags;
  CMTimeEpoch v12;
  CMTimeValue v13;
  CMTimeScale v14;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  char v17;
  uint64_t v18;
  uint64_t FigBaseObject;
  void (*v20)(uint64_t, __CFString *, uint64_t, const __CFArray **);
  CMTimeFlags v21;
  CFIndex v22;
  const __CFDictionary *ValueAtIndex;
  CMTimeValue v24;
  CMTimeScale v25;
  CMTimeFlags v26;
  CMTimeEpoch v27;
  CMTimeFlags v28;
  CMTimeEpoch v29;
  __CFDictionary *PlayableTimeEntryFromTimeRange;
  __CFDictionary *v31;
  __CFDictionary *v32;
  __CFDictionary *v33;
  uint64_t v34;
  CFTypeRef *v36;
  CFIndex idx;
  int v38;
  CMTimeScale v39;
  CMTimeEpoch v40;
  CMTimeEpoch v41;
  CMTime *v42;
  __CFArray *theArray;
  CMTimeRange rhs;
  CMTimeRange v45;
  CMTime duration;
  CMTimeRange v47;
  CMTimeRange v48;
  CMTimeRange v49;
  CMTimeRange time2;
  CMTimeRange v51;
  CMTime end;
  CMTimeRange time1;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  const __CFArray *v57;
  CMTimeValue v58;
  CMTimeScale v59;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  v57 = 0;
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v54 = *MEMORY[0x1E0CA2E40];
  v55 = v5;
  v56 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  epoch = DerivedStorage[70].epoch;
  if (epoch)
    v7 = FigAlternateIsIFrameOnly(epoch) != 0;
  else
    v7 = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  v10 = Mutable;
  if (Mutable)
  {
    theArray = Mutable;
    fpfsi_TotalTimeRangeInBuffer(a1, (uint64_t)&time1);
    value = time1.start.value;
    flags = time1.start.flags;
    timescale = time1.start.timescale;
    v12 = time1.start.epoch;
    v13 = time1.duration.value;
    v14 = time1.duration.timescale;
    v15 = time1.duration.flags;
    v41 = time1.duration.epoch;
    v16 = DerivedStorage[38].epoch;
    if (v16)
      v17 = v7;
    else
      v17 = 1;
    if ((v17 & 1) == 0)
    {
      v18 = FigGetAllocatorForMedia();
      FigBaseObject = FigBytePumpGetFigBaseObject(v16);
      v20 = *(void (**)(uint64_t, __CFString *, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v20)
        v20(FigBaseObject, CFSTR("FBP_CachedTimeRanges"), v18, &v57);
    }
    fpfsi_getPumpAvailableTimeRange(DerivedStorage, &v54);
    if ((flags & 1) == 0)
    {
      v21 = v15;
      goto LABEL_22;
    }
    v21 = v15;
    if ((v15 & 1) != 0 && !v41 && (v13 & 0x8000000000000000) == 0)
    {
      if ((BYTE12(v54) & 1) == 0)
      {
LABEL_21:
        v41 = 0;
        goto LABEL_22;
      }
      v41 = 0;
      if ((BYTE4(v56) & 1) != 0 && !*((_QWORD *)&v56 + 1) && (*((_QWORD *)&v55 + 1) & 0x8000000000000000) == 0)
      {
        time1.start.value = value;
        time1.start.timescale = timescale;
        time1.start.flags = flags;
        time1.start.epoch = v12;
        *(_OWORD *)&time2.start.value = v54;
        time2.start.epoch = v55;
        if (CMTimeCompare(&time1.start, &time2.start) < 0)
        {
          time1.start.value = value;
          time1.start.timescale = timescale;
          time1.start.flags = flags;
          time1.start.epoch = v12;
          time1.duration.value = v13;
          time1.duration.timescale = v14;
          time1.duration.flags = v15;
          time1.duration.epoch = 0;
          CMTimeRangeGetEnd(&end, &time1);
          *(_OWORD *)&time2.start.value = v54;
          time2.start.epoch = v55;
          CMTimeRangeFromTimeToTime(&time1, &time2.start, &end);
          value = time1.start.value;
          flags = time1.start.flags;
          timescale = time1.start.timescale;
          v12 = time1.start.epoch;
          v13 = time1.duration.value;
          v14 = time1.duration.timescale;
          v21 = time1.duration.flags;
          v41 = time1.duration.epoch;
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
LABEL_22:
    if (v57 && CFArrayGetCount(v57) > 0)
    {
      v38 = 0;
      v39 = v14;
      v40 = v12;
      v36 = a2;
      idx = 0;
      v22 = 0;
      v42 = DerivedStorage + 49;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v57, v22);
        CMTimeRangeMakeFromDictionary(&time1, ValueAtIndex);
        v59 = time1.start.timescale;
        v58 = time1.start.value;
        v24 = time1.duration.value;
        v25 = time1.duration.timescale;
        v26 = time1.duration.flags;
        v27 = time1.duration.epoch;
        time2.start.value = time1.start.value;
        time2.start.timescale = time1.start.timescale;
        time2.start.flags = time1.start.flags;
        time2.start.epoch = time1.start.epoch;
        *(_OWORD *)&rhs.start.value = *(_OWORD *)&v42->value;
        rhs.start.epoch = v42->epoch;
        CMTimeSubtract(&time1.start, &time2.start, &rhs.start);
        v58 = time1.start.value;
        v28 = time1.start.flags;
        v59 = time1.start.timescale;
        v29 = time1.start.epoch;
        if ((flags & 1) != 0 && (v21 & 1) != 0 && !v41 && (v13 & 0x8000000000000000) == 0)
        {
          time1.start.value = v58;
          time1.start.timescale = v59;
          time1.duration.value = v24;
          time1.duration.timescale = v25;
          time1.duration.flags = v26;
          time1.duration.epoch = v27;
          time2.start.value = value;
          time2.start.timescale = timescale;
          time2.start.flags = flags;
          time2.start.epoch = v40;
          time2.duration.value = v13;
          time2.duration.timescale = v39;
          time2.duration.flags = v21;
          time2.duration.epoch = 0;
          CMTimeRangeGetIntersection(&v51, &time1, &time2);
          if ((v51.start.flags & 1) == 0)
            goto LABEL_32;
          time1.start.value = v58;
          time1.start.timescale = v59;
          time1.start.flags = v28;
          time1.start.epoch = v29;
          time1.duration.value = v24;
          time1.duration.timescale = v25;
          time1.duration.flags = v26;
          time1.duration.epoch = v27;
          time2.start.value = value;
          time2.start.timescale = timescale;
          time2.start.flags = flags;
          time2.start.epoch = v40;
          time2.duration.value = v13;
          time2.duration.timescale = v39;
          time2.duration.flags = v21;
          time2.duration.epoch = 0;
          CMTimeRangeGetIntersection(&v49, &time1, &time2);
          if ((v49.duration.flags & 1) == 0)
            goto LABEL_32;
          time1.start.value = v58;
          time1.start.timescale = v59;
          time1.start.flags = v28;
          time1.start.epoch = v29;
          time1.duration.value = v24;
          time1.duration.timescale = v25;
          time1.duration.flags = v26;
          time1.duration.epoch = v27;
          time2.start.value = value;
          time2.start.timescale = timescale;
          time2.start.flags = flags;
          time2.start.epoch = v40;
          time2.duration.value = v13;
          time2.duration.timescale = v39;
          time2.duration.flags = v21;
          time2.duration.epoch = 0;
          CMTimeRangeGetIntersection(&v48, &time1, &time2);
          if (v48.duration.epoch)
            goto LABEL_32;
          time1.start.value = v58;
          time1.start.timescale = v59;
          time1.start.flags = v28;
          time1.start.epoch = v29;
          time1.duration.value = v24;
          time1.duration.timescale = v25;
          time1.duration.flags = v26;
          time1.duration.epoch = v27;
          time2.start.value = value;
          time2.start.timescale = timescale;
          time2.start.flags = flags;
          time2.start.epoch = v40;
          time2.duration.value = v13;
          time2.duration.timescale = v39;
          time2.duration.flags = v21;
          time2.duration.epoch = 0;
          CMTimeRangeGetIntersection(&v47, &time1, &time2);
          if (v47.duration.value < 0)
            goto LABEL_32;
          time1.start.value = v58;
          time1.start.timescale = v59;
          time1.start.flags = v28;
          time1.start.epoch = v29;
          time1.duration.value = v24;
          time1.duration.timescale = v25;
          time1.duration.flags = v26;
          time1.duration.epoch = v27;
          time2.start.value = value;
          time2.start.timescale = timescale;
          time2.start.flags = flags;
          time2.start.epoch = v40;
          time2.duration.value = v13;
          time2.duration.timescale = v39;
          time2.duration.flags = v21;
          time2.duration.epoch = 0;
          CMTimeRangeGetIntersection(&v45, &time1, &time2);
          duration = v45.duration;
          *(_OWORD *)&time1.start.value = *MEMORY[0x1E0CA2E68];
          time1.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          if (CMTimeCompare(&duration, &time1.start))
          {
LABEL_32:
            time2.start.value = v58;
            time2.start.timescale = v59;
            time2.start.flags = v28;
            time2.start.epoch = v29;
            time2.duration.value = v24;
            time2.duration.timescale = v25;
            time2.duration.flags = v26;
            time2.duration.epoch = v27;
            rhs.start.value = value;
            rhs.start.timescale = timescale;
            rhs.start.flags = flags;
            rhs.start.epoch = v40;
            rhs.duration.value = v13;
            rhs.duration.timescale = v39;
            rhs.duration.flags = v21;
            rhs.duration.epoch = 0;
            CMTimeRangeGetUnion(&time1, &time2, &rhs);
            v28 = time1.start.flags;
            timescale = time1.start.timescale;
            value = time1.start.value;
            v29 = time1.start.epoch;
            v24 = time1.duration.value;
            v25 = time1.duration.timescale;
            v26 = time1.duration.flags;
            v27 = time1.duration.epoch;
            v58 = time1.start.value;
            v59 = time1.start.timescale;
            if (v38)
              CFArrayRemoveValueAtIndex(theArray, idx);
            idx = CFArrayGetCount(theArray);
            v38 = 1;
            v39 = v25;
            flags = v28;
            v40 = v29;
            v13 = v24;
            v21 = v26;
            v41 = v27;
          }
          else
          {
            v41 = 0;
          }
        }
        time1.start.value = v58;
        time1.start.timescale = v59;
        time1.start.flags = v28;
        time1.start.epoch = v29;
        time1.duration.value = v24;
        time1.duration.timescale = v25;
        time1.duration.flags = v26;
        time1.duration.epoch = v27;
        PlayableTimeEntryFromTimeRange = fpfsi_CreatePlayableTimeEntryFromTimeRange((uint64_t)&time1);
        if (!PlayableTimeEntryFromTimeRange)
          goto LABEL_56;
        v31 = PlayableTimeEntryFromTimeRange;
        CFArrayAppendValue(theArray, PlayableTimeEntryFromTimeRange);
        CFRelease(v31);
        if (++v22 >= CFArrayGetCount(v57))
        {
          a2 = v36;
          v12 = v40;
          v14 = v39;
          if (v38)
            goto LABEL_49;
          break;
        }
      }
    }
    if ((flags & 1) != 0 && (v21 & 1) != 0 && !v41 && (v13 & 0x8000000000000000) == 0)
    {
      time1.start.value = v13;
      time1.start.timescale = v14;
      time1.start.flags = v21;
      time1.start.epoch = 0;
      *(_OWORD *)&time2.start.value = *MEMORY[0x1E0CA2E68];
      time2.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      if (CMTimeCompare(&time1.start, &time2.start))
      {
        time1.start.value = value;
        time1.start.timescale = timescale;
        time1.start.flags = flags;
        time1.start.epoch = v12;
        time1.duration.value = v13;
        time1.duration.timescale = v14;
        time1.duration.flags = v21;
        time1.duration.epoch = 0;
        v32 = fpfsi_CreatePlayableTimeEntryFromTimeRange((uint64_t)&time1);
        if (!v32)
        {
LABEL_56:
          v34 = FigSignalErrorAt();
          v10 = theArray;
          goto LABEL_50;
        }
        v33 = v32;
        CFArrayAppendValue(theArray, v32);
        CFRelease(v33);
      }
    }
LABEL_49:
    v10 = theArray;
    v34 = 0;
    *a2 = CFRetain(theArray);
    goto LABEL_50;
  }
  v34 = FigSignalErrorAt();
LABEL_50:
  if (v57)
    CFRelease(v57);
  if (v10)
    CFRelease(v10);
  return v34;
}

uint64_t fpfs_WeakStreamEnd(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;

  v3 = result;
  if (a2 < 3)
  {
    v4 = *(_QWORD *)(result + 16 * a2 + 8 * a3 + 992);
    if (!v4)
      return result;
  }
  else
  {
    FigSignalErrorAt();
    v4 = -1;
  }
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v5)
    v5(v4);
  result = *(_QWORD *)(v3 + 1040);
  if (result)
  {
    do
    {
      v6 = *(_QWORD *)(result + 8);
      if (*(_QWORD *)(result + 48) == v4)
        result = fpfs_StopFeedingTrack(result, 0, 1);
      if (!v6)
        break;
      result = v6;
    }
    while (*(_QWORD *)(v3 + 1040));
  }
  return result;
}

uint64_t fpfs_DeleteStrandedTracksUponSwitch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;

  result = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(result + 1040);
  if (v6)
  {
    v7 = result;
    do
    {
      if (!*(_QWORD *)(v7 + 1040))
        break;
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
        v9 = *(_QWORD *)(v8 + 16);
      else
        v9 = -1;
      result = fpfs_LooksLikeStrandedTrack(a1, a2, 0, v6);
      if ((_DWORD)result)
      {
        if (v6 == a3)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        result = fpfs_DeleteTrack(a1);
      }
      if ((v9 & 0x8000000000000000) == 0)
      {
        if (!*(_QWORD *)(v7 + 1040))
          return result;
        v8 = *(_QWORD *)(v7 + 1040);
        while (*(_QWORD *)(v8 + 16) != v9)
        {
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
          {
            v8 = *(_QWORD *)(v7 + 1040);
            break;
          }
        }
      }
      v6 = v8;
    }
    while (v8);
  }
  return result;
}

void fpfsi_RTCReportingUpdateCurrentAlternateInfo()
{
  uint64_t DerivedStorage;
  const __CFString *VideoRangeString;
  uint64_t v2;
  unsigned int IsAudioOnly;
  double Resolution;
  double v5;
  double v6;
  int MaxAudioChannelCount;
  uint64_t v8;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  int AudioChannelCounts;
  uint64_t v11;
  int v12;
  void (*v13)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v20;
  void (*v21)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v22;
  void (*v23)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t CodecString;
  __CFString *VideoLayoutString;
  __CFString *VideoContentTypeString;
  int VideoQualityIndex;
  uint64_t v28;
  int v29;
  void (*v30)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  const __CFAllocator *v31;
  CFNumberRef v32;
  uint64_t v33;
  void (*v34)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD);
  CFNumberRef v35;
  uint64_t v36;
  void (*v37)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD);
  uint64_t v38;
  void (*v39)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v40;
  void (*v41)(uint64_t, __CFString *, __CFString *, __CFString *, _QWORD);
  uint64_t v42;
  void (*v43)(uint64_t, __CFString *, __CFString *, __CFString *, _QWORD);
  uint64_t v44;
  void (*v45)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v46;
  void (*v47)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  int valuePtr;
  int PeakBitRate;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  VideoRangeString = FigAlternateGetVideoRangeString(*(const __CFString **)(DerivedStorage + 1696));
  fpfsi_RTCReportingUpdateVariantRank(DerivedStorage, *(_DWORD *)(DerivedStorage + 1744), *(_DWORD *)(DerivedStorage + 1748));
  v2 = *(_QWORD *)(DerivedStorage + 1696);
  if (!v2)
    return;
  IsAudioOnly = FigAlternateIsAudioOnly(v2);
  Resolution = FigAlternateGetResolution(*(_QWORD *)(DerivedStorage + 1696));
  v6 = v5;
  MaxAudioChannelCount = FigAlternateGetMaxAudioChannelCount(*(const void **)(DerivedStorage + 1696));
  v8 = *(_QWORD *)(DerivedStorage + 1696);
  CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
  AudioChannelCounts = FigAlternateGetAudioChannelCounts(v8, (uint64_t)CurrentAudioPersistentIDFromMediaOption, 0, 0);
  v11 = *(_QWORD *)(DerivedStorage + 2536);
  if (v11)
  {
    v12 = AudioChannelCounts;
    v13 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
    if (v13)
      v13(v11, CFSTR("playerStats"), CFSTR("AuChAvail"), MaxAudioChannelCount, 0);
    v14 = *(_QWORD *)(DerivedStorage + 2536);
    if (v14)
    {
      v15 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v15)
        v15(v14, CFSTR("playerStats"), CFSTR("AuChPlay"), v12, 0);
    }
  }
  if (v6 > 0.0 && Resolution > 0.0)
  {
    v16 = *(_QWORD *)(DerivedStorage + 2536);
    if (v16)
    {
      v17 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v17)
        v17(v16, CFSTR("playerStats"), CFSTR("ReWd"), (uint64_t)Resolution, 0);
      v18 = *(_QWORD *)(DerivedStorage + 2536);
      if (!v18)
        goto LABEL_22;
      v19 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v19)
        v19(v18, CFSTR("playerStats"), CFSTR("ReHt"), (uint64_t)v6, 0);
    }
    v20 = *(_QWORD *)(DerivedStorage + 2536);
    if (v20)
    {
      v21 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v21)
        v21(v20, CFSTR("playerStats"), CFSTR("VarReWd"), (uint64_t)Resolution, 0);
      v22 = *(_QWORD *)(DerivedStorage + 2536);
      if (v22)
      {
        v23 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v23)
          v23(v22, CFSTR("playerStats"), CFSTR("VarReHt"), (uint64_t)v6, 0);
      }
    }
  }
LABEL_22:
  PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)(DerivedStorage + 1696));
  valuePtr = FigAlternateGetAverageBitRate(*(_QWORD *)(DerivedStorage + 1696));
  CodecString = FigAlternateGetCodecString(*(_QWORD *)(DerivedStorage + 1696));
  VideoLayoutString = FigAlternateGetVideoLayoutString(*(_QWORD *)(DerivedStorage + 1696));
  VideoContentTypeString = FigAlternateGetVideoContentTypeString(*(_QWORD *)(DerivedStorage + 1696));
  VideoQualityIndex = FigAlternateGetVideoQualityIndex(*(_QWORD *)(DerivedStorage + 1696));
  v28 = *(_QWORD *)(DerivedStorage + 2536);
  if (v28)
  {
    v29 = VideoQualityIndex;
    v30 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
    if (v30)
      v30(v28, CFSTR("playerStats"), CFSTR("VideoQltyIndex"), v29, 0);
  }
  v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v33 = *(_QWORD *)(DerivedStorage + 2536);
  if (v33)
  {
    v34 = *(void (**)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 48);
    if (v34)
      v34(v33, CFSTR("playerStats"), CFSTR("PlayerIABR"), v32, 0);
  }
  v35 = CFNumberCreate(v31, kCFNumberIntType, &PeakBitRate);
  v36 = *(_QWORD *)(DerivedStorage + 2536);
  if (v36)
  {
    v37 = *(void (**)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 48);
    if (v37)
      v37(v36, CFSTR("playerStats"), CFSTR("PlayerIBR"), v35, 0);
    v38 = *(_QWORD *)(DerivedStorage + 2536);
    if (v38)
    {
      v39 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 48);
      if (v39)
        v39(v38, CFSTR("playerStats"), CFSTR("Codecs"), CodecString, 0);
      v40 = *(_QWORD *)(DerivedStorage + 2536);
      if (v40)
      {
        v41 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 48);
        if (v41)
          v41(v40, CFSTR("playerStats"), CFSTR("VidImTag"), VideoLayoutString, 0);
        v42 = *(_QWORD *)(DerivedStorage + 2536);
        if (v42)
        {
          v43 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 48);
          if (v43)
            v43(v42, CFSTR("playerStats"), CFSTR("VidType"), VideoContentTypeString, 0);
          v44 = *(_QWORD *)(DerivedStorage + 2536);
          if (v44)
          {
            v45 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 56);
            if (v45)
              v45(v44, CFSTR("playerStats"), CFSTR("AuOn"), IsAudioOnly, 0);
            v46 = *(_QWORD *)(DerivedStorage + 2536);
            if (v46)
            {
              v47 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v47)
                v47(v46, CFSTR("playerStats"), CFSTR("VarVRange"), VideoRangeString, 0);
            }
          }
        }
      }
    }
  }
  if (v32)
    CFRelease(v32);
  if (v35)
    CFRelease(v35);
}

uint64_t fpfs_PlayingVideoOnly()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  float v2;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (*(float *)(DerivedStorage + 840) == 0.0)
  {
    result = *(_QWORD *)(DerivedStorage + 1696);
    if (result)
      return FigAlternateIsIFrameOnly(result) != 0;
  }
  else
  {
    v2 = *(float *)(v1 + 108);
    return v2 > 2.0 || v2 < 0.0 || *(_QWORD *)(DerivedStorage + 2960);
  }
  return result;
}

__CFDictionary *fpfsi_CreatePlayableTimeEntryFromTimeRange(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  __int128 v6;
  const __CFAllocator *v7;
  CFDictionaryRef v8;
  const __CFAllocator *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CMTimeRange v14;
  CMTime v15;
  Float64 Seconds;
  Float64 valuePtr;

  memset(&v15, 0, sizeof(v15));
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    return Mutable;
  }
  Seconds = 0.0;
  valuePtr = 0.0;
  v4 = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(_OWORD *)&v14.start.value = *(_OWORD *)a1;
  v14.start.epoch = *(_QWORD *)(a1 + 16);
  v5 = CMTimeCopyAsDictionary(&v14.start, v4);
  if (!v5)
  {
    v8 = 0;
    goto LABEL_15;
  }
  CFDictionarySetValue(Mutable, CFSTR("startTime"), v5);
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v14.start.value = *(_OWORD *)a1;
  *(_OWORD *)&v14.start.epoch = v6;
  *(_OWORD *)&v14.duration.timescale = *(_OWORD *)(a1 + 32);
  CMTimeRangeGetEnd(&v15, &v14);
  v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v14.start = v15;
  v8 = CMTimeCopyAsDictionary(&v14.start, v7);
  if (!v8)
  {
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  CFDictionarySetValue(Mutable, CFSTR("endTime"), v8);
  *(_OWORD *)&v14.start.value = *(_OWORD *)a1;
  v14.start.epoch = *(_QWORD *)(a1 + 16);
  valuePtr = CMTimeGetSeconds(&v14.start);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  if (!v10
    || (CFDictionarySetValue(Mutable, CFSTR("start"), v10),
        v14.start = v15,
        Seconds = CMTimeGetSeconds(&v14.start),
        (v11 = CFNumberCreate(v9, kCFNumberDoubleType, &Seconds)) == 0))
  {
LABEL_16:
    if (FigSignalErrorAt())
    {
      CFRelease(Mutable);
      Mutable = 0;
    }
    if (!v10)
      goto LABEL_8;
    goto LABEL_7;
  }
  v12 = v11;
  CFDictionarySetValue(Mutable, CFSTR("end"), v11);
  CFRelease(v12);
LABEL_7:
  CFRelease(v10);
LABEL_8:
  if (v8)
    CFRelease(v8);
  if (v5)
    CFRelease(v5);
  return Mutable;
}

dispatch_queue_t *fpfsi_setNonForcedSubtitlesEnabled(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  dispatch_queue_t *result;
  const void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const void *NotificationPayloadForProperties;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(dispatch_queue_t **)(DerivedStorage + 1856);
  if (result)
  {
    if (*(unsigned __int8 *)(DerivedStorage + 531) != a2)
    {
      v6 = *(const void **)DerivedStorage;
      *(_BYTE *)(DerivedStorage + 531) = a2;
      FigLegibleOutputManagerSetNonForcedEnabledForMediaType(result, 1935832172, a2);
      NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(v6, (uint64_t)a1, v7, v8, v9, v10, v11, v12, CFSTR("DisplayNonForcedSubtitles"), (uint64_t)CFSTR("SelectedMediaArray"));
      fpfs_EnqueueNotification(v6, CFSTR("DisplayNonForcedSubtitlesChanged"), a1, NotificationPayloadForProperties);
    }
  }
  return result;
}

uint64_t sub_1929F45D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  const void **v18;
  const void *v19;

  if (v19)
    CFRelease(v19);
  return fpfs_updateClosedCaptionsDisplay(*v18, 0);
}

BOOL fpfs_LooksLikeStrandedTrack(const __CFArray *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  char v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(unsigned __int8 *)(a4 + 180);
  if ((_DWORD)v9 == a2)
  {
LABEL_14:
    v14 = *(_DWORD *)(a4 + 152);
    if (v14 != 6)
    {
      if ((v16 = *(_QWORD *)(a4 + 48), v17 = DerivedStorage + 16 * v9, v16 != *(_QWORD *)(v17 + 992))
        && v16 != *(_QWORD *)(v17 + 1000)
        || ((a3 >> v9) & 1) != 0)
      {
        if (v14 != 3)
          return 1;
        v19 = 0;
        return fpfs_AreTracksReadyToPlay(a1, *(_QWORD *)(a4 + 64), &v19) || v19 == 0;
      }
    }
    return 0;
  }
  v10 = 0;
  v11 = *(_DWORD *)(a4 + 32);
  if (v11 > 1935832171)
  {
    if (v11 == 1935832172)
    {
      v12 = 4;
    }
    else
    {
      v12 = 1;
      if (v11 != 1986618469)
      {
        if (v11 != 1936684398)
          return v10;
        v12 = 2;
      }
    }
LABEL_13:
    if (1 << a2 != v12)
      return 0;
    goto LABEL_14;
  }
  v13 = v11 == 1668047728 || v11 == 1835365473;
  v12 = 1;
  if (v13)
    goto LABEL_13;
  return v10;
}

uint64_t fpfs_AreTracksReadyToPlay(const __CFArray *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const __CFArray *v14;
  uint64_t v15;
  int v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t i;
  int v25;
  uint64_t j;
  uint64_t v27;
  CMTime *v28;
  _BYTE *v30;
  uint64_t v31;
  CMTime v32;
  os_log_type_t type;
  int v34;
  CMTime time2;
  CMTime time1;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  if (a3)
    *a3 = 0;
  v8 = *(_QWORD *)(DerivedStorage + 1040);
  v9 = 1;
  if (!v8)
  {
    v22 = 0;
    LOBYTE(v10) = 0;
LABEL_57:
    if (*(uint64_t *)(DerivedStorage + 1096) < 2)
      goto LABEL_94;
    v23 = *(_DWORD *)(DerivedStorage + 1088);
    if (((v23 ^ v10) & 7) == 0)
      goto LABEL_94;
    for (i = 0; i != 3; ++i)
    {
      if (*(_BYTE *)(DerivedStorage + 471 + i))
        v25 = 1 << i;
      else
        LOBYTE(v25) = 0;
      LOBYTE(v10) = v25 | v10;
    }
    if (((v10 ^ v23) & 7) == 0)
    {
LABEL_94:
      if ((v9 & 1) != 0)
        goto LABEL_74;
      for (j = *(_QWORD *)(DerivedStorage + 1040); j; j = *(_QWORD *)(j + 8))
      {
        if (!*(_BYTE *)(j + 184) && *(_QWORD *)(j + 64) == a2)
        {
          memset(&time1, 0, sizeof(time1));
          time2 = *(CMTime *)(j + 192);
          fpfs_GetTrackStartupQueueDuration(j, &time2, (uint64_t)&time1);
          CMTimeMake(&v32, 10, 1);
          time2 = time1;
          if ((CMTimeCompare(&time2, &v32) & 0x80000000) == 0)
            goto LABEL_73;
        }
      }
      if (!v22)
      {
LABEL_74:
        if ((*(_BYTE *)(DerivedStorage + 1500) & 1) != 0)
        {
          v27 = *(_QWORD *)(DerivedStorage + 1040);
          if (v27)
          {
            v28 = (CMTime *)(DerivedStorage + 1488);
            do
            {
              if (!*(_BYTE *)(v27 + 184) && *(_QWORD *)(v27 + 64) == a2 && !*(_BYTE *)(v27 + 182))
              {
                if ((*(_BYTE *)(v27 + 228) & 1) == 0
                  || (time1 = *(CMTime *)(v27 + 216), time2 = *v28, CMTimeCompare(&time1, &time2) < 0))
                {
                  v9 = 0;
                }
              }
              v27 = *(_QWORD *)(v27 + 8);
            }
            while (v27);
          }
        }
        return v9;
      }
      if (*(_BYTE *)(DerivedStorage + 470))
      {
LABEL_73:
        v9 = 1;
        goto LABEL_74;
      }
    }
    return 0;
  }
  v30 = a3;
  v10 = 0;
  v11 = *MEMORY[0x1E0D49050];
  while (1)
  {
    v12 = *(_QWORD *)(v8 + 64);
    if (v12 <= a2 && *(_QWORD *)(v8 + 384))
    {
      if (!fpfs_isDecryptorReady(v8))
        return 0;
      v12 = *(_QWORD *)(v8 + 64);
    }
    if (v12 < a2)
    {
      if ((*(_DWORD *)(v8 + 152) | 2) == 3)
        return 0;
      goto LABEL_54;
    }
    if (v12 != a2)
    {
      v16 = 1 << *(_BYTE *)(v8 + 180);
      if ((v16 & v10) == 0)
      {
        if (dword_1EE2A2A88 >= 3)
        {
          v31 = v11;
          v34 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v16 = 1 << *(_BYTE *)(v8 + 180);
          v11 = v31;
        }
        v10 |= v16;
      }
      goto LABEL_54;
    }
    if ((*(_BYTE *)(v8 + 140) & 1) != 0 || *(_BYTE *)(v8 + 182) || *(_BYTE *)(v8 + 180) == 2)
      v10 |= 1 << *(_BYTE *)(v8 + 180);
    if (!*(_BYTE *)(v8 + 184))
      break;
LABEL_54:
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
    {
      v22 = 0;
      v9 = 1;
      goto LABEL_57;
    }
  }
  v13 = *(_DWORD *)(v8 + 32);
  if (v13 == 1936684398)
  {
    if (*(_QWORD *)(v8 + 40))
      goto LABEL_33;
LABEL_34:
    if (*(const __CFArray **)(v7 + 80) != a1 && *(_DWORD *)(v8 + 32) == 1936684398)
    {
      LODWORD(time1.value) = 0;
      CMBaseObjectGetDerivedStorage();
      v18 = FigCFEqual();
      if (fpfs_WantAudioHardwarePassthroughForTrack(v8, (int *)&time1) != (v18 != 0))
        return 0;
      v19 = v18 ? 1633889587 : 0;
      if (v18 && v19 != LODWORD(time1.value))
        return 0;
    }
    if (!*(_BYTE *)(v8 + 182))
    {
      if (!*(_QWORD *)(v8 + 40) || (v20 = *(_DWORD *)(v8 + 152)) == 0)
      {
LABEL_85:
        v9 = 0;
        v22 = 1;
        goto LABEL_57;
      }
      v21 = *(_DWORD *)(v8 + 32);
      if (v21 == 1986618469)
      {
        if (v20 != 3 && fpfs_CanRenderVideo(v7, *(_QWORD *)v8))
          goto LABEL_85;
      }
      else if (!v21)
      {
        goto LABEL_85;
      }
      if ((*(_BYTE *)(v8 + 228) & 1) == 0)
        goto LABEL_85;
      time1 = *(CMTime *)(v8 + 216);
      time2 = *(CMTime *)(v8 + 192);
      if (CMTimeCompare(&time1, &time2) < 1)
        goto LABEL_85;
    }
    goto LABEL_54;
  }
  if (v13 != 1986618469 || !*(_QWORD *)(v8 + 40))
    goto LABEL_34;
  v14 = *(const __CFArray **)(v7 + 80);
  if (v14 != a1
    && v14
    && (fpfs_getNext(v7, v14) != a1 || !fpfsi_PumpHasEndedOrBufferedBeyondFwdEnd(*(_QWORD *)(v7 + 80))))
  {
    return 0;
  }
  if (*(uint64_t *)(v7 + 616) < 4
    || (v15 = *(_QWORD *)(DerivedStorage + 784)) != 0
    && fpfs_FormatsAreCompatible((uint64_t)a1, *(const opaqueCMFormatDescription **)(v15 + 16), *(const opaqueCMFormatDescription **)(v8 + 40)))
  {
LABEL_33:
    if (*(_BYTE *)(DerivedStorage + 2872))
    {
      if (!v30)
        return 0;
      v9 = 0;
      *v30 = 1;
      return v9;
    }
    goto LABEL_34;
  }
  fpfs_ClearRenderChains(a1, 1u);
  if (!v30)
    return 0;
  v9 = 0;
  *v30 = 1;
  return v9;
}

uint64_t fpfs_isDecryptorReady(uint64_t a1)
{
  uint64_t v1;
  uint64_t AllocatorForMedia;
  unsigned int (*v3)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  _BOOL8 v4;
  CFTypeRef cf;

  cf = 0;
  v1 = *(_QWORD *)(a1 + 384);
  AllocatorForMedia = FigGetAllocatorForMedia();
  v3 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (!v3 || v3(v1, *MEMORY[0x1E0CA3218], AllocatorForMedia, &cf))
    return 1;
  v4 = *MEMORY[0x1E0C9AE50] == (_QWORD)cf;
  CFRelease(cf);
  return v4;
}

uint64_t fpfsi_PumpHasEndedOrBufferedBeyondFwdEnd(uint64_t a1)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
    return *(_BYTE *)(result + 470) || fpfsi_PlaybackHasBufferedBeyondForwardEndTime(a1) != 0;
  return result;
}

uint64_t fpfs_FormatsAreCompatible(uint64_t a1, const opaqueCMFormatDescription *a2, const opaqueCMFormatDescription *a3)
{
  CMMediaType MediaType;
  uint64_t result;
  FourCharCode v7;
  int v8;
  int v9;
  signed int MediaSubType;
  int v11;
  int v12;
  int v13;
  uint64_t DerivedStorage;
  uint64_t v15;
  int v16;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  int v19;
  signed int v20;
  int v21;
  int v22;
  int v23;
  const AudioFormatListItem *v24;
  int v25;
  int v26;
  size_t sizeOut;

  CMBaseObjectGetDerivedStorage();
  MediaType = CMFormatDescriptionGetMediaType(a2);
  if (MediaType != CMFormatDescriptionGetMediaType(a3))
    return 0;
  if (MediaType != 1986618469)
  {
    if (MediaType != 1936684398)
    {
      if (MediaType == 1835365473)
        return fpfsi_canMetadataFormatsSync(a2, a3);
      goto LABEL_7;
    }
    v8 = fpfs_passthroughFormatForAudioFormat(a2);
    v9 = fpfs_passthroughFormatForAudioFormat(a3);
    if (v8 == v9
      || ((v13 = v9, !v8)
       || (DerivedStorage = CMBaseObjectGetDerivedStorage(), v8 != 1633889587)
       || !*(_QWORD *)(DerivedStorage + 536)
       || !*(_BYTE *)(DerivedStorage + 562))
      && (!v13
       || (v15 = CMBaseObjectGetDerivedStorage(), v13 != 1633889587)
       || !*(_QWORD *)(v15 + 536)
       || !*(_BYTE *)(v15 + 562)))
    {
      MediaSubType = CMFormatDescriptionGetMediaSubType(a2);
      v11 = 1;
      if (MediaSubType > 1885692722)
      {
        if (MediaSubType <= 1902469938)
        {
          if (MediaSubType != 1885692723)
          {
            v12 = 1902324531;
LABEL_33:
            if (MediaSubType == v12)
              goto LABEL_45;
            goto LABEL_44;
          }
LABEL_35:
          sizeOut = 0;
          FormatList = CMAudioFormatDescriptionGetFormatList(a2, &sizeOut);
          v11 = 0;
          if (FormatList && sizeOut >= 0x30)
          {
            mFormatID = FormatList->mASBD.mFormatID;
            v11 = 1;
            if (mFormatID <= 1885547314)
            {
              if (mFormatID == 1667574579)
                goto LABEL_45;
              v19 = 1700997939;
LABEL_43:
              if (mFormatID == v19)
                goto LABEL_45;
              goto LABEL_44;
            }
            if (mFormatID != 1885547315 && mFormatID != 1902324531)
            {
              v19 = 2053319475;
              goto LABEL_43;
            }
          }
LABEL_45:
          v20 = CMFormatDescriptionGetMediaSubType(a3);
          v21 = 1;
          if (v20 > 1885692722)
          {
            if (v20 <= 1902469938)
            {
              if (v20 != 1885692723)
              {
                v22 = 1902324531;
LABEL_60:
                if (v20 != v22)
                  goto LABEL_71;
                return v11 == v21 || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
              }
              goto LABEL_62;
            }
            if (v20 == 2053464883)
            {
LABEL_62:
              sizeOut = 0;
              v24 = CMAudioFormatDescriptionGetFormatList(a3, &sizeOut);
              v21 = 0;
              if (!v24 || sizeOut < 0x30)
                return v11 == v21 || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
              v25 = v24->mASBD.mFormatID;
              v21 = 1;
              if (v25 <= 1885547314)
              {
                if (v25 == 1667574579)
                  return v11 == v21 || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
                v26 = 1700997939;
              }
              else
              {
                if (v25 == 1885547315 || v25 == 1902324531)
                  return v11 == v21 || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
                v26 = 2053319475;
              }
              if (v25 == v26)
                return v11 == v21 || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
LABEL_71:
              v21 = 0;
              return v11 == v21 || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
            }
            if (v20 == 2053319475)
              return v11 == v21 || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
            v23 = 1902469939;
          }
          else
          {
            if (v20 > 1700997938)
            {
              if (v20 == 1700997939)
                return v11 == v21 || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
              if (v20 != 1700998451)
              {
                v22 = 1885547315;
                goto LABEL_60;
              }
              goto LABEL_62;
            }
            if (v20 == 1667574579)
              return v11 == v21 || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561);
            v23 = 1667575091;
          }
          if (v20 != v23)
            goto LABEL_71;
          goto LABEL_62;
        }
        if (MediaSubType == 2053464883)
          goto LABEL_35;
        if (MediaSubType == 2053319475)
          goto LABEL_45;
        v16 = 1902469939;
      }
      else
      {
        if (MediaSubType > 1700997938)
        {
          if (MediaSubType == 1700997939)
            goto LABEL_45;
          if (MediaSubType != 1700998451)
          {
            v12 = 1885547315;
            goto LABEL_33;
          }
          goto LABEL_35;
        }
        if (MediaSubType == 1667574579)
          goto LABEL_45;
        v16 = 1667575091;
      }
      if (MediaSubType != v16)
      {
LABEL_44:
        v11 = 0;
        goto LABEL_45;
      }
      goto LABEL_35;
    }
    return 0;
  }
  result = FPSupport_CanFormatsShareVideoRenderPipeline(a2, a3);
  if ((_DWORD)result)
  {
LABEL_7:
    v7 = CMFormatDescriptionGetMediaSubType(a2);
    return v7 == CMFormatDescriptionGetMediaSubType(a3);
  }
  return result;
}

void fpfs_ClearRenderChains(const __CFArray *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = 0;
  v5 = CMBaseObjectGetDerivedStorage() + 784;
  do
  {
    if (((a2 >> v4) & 1) != 0)
    {
      v6 = *(_QWORD **)(v5 + 8 * v4);
      if (v6)
      {
        fpfs_releaseRenderChain(a1, v6);
        *(_QWORD *)(v5 + 8 * v4) = 0;
      }
    }
    ++v4;
  }
  while (v4 != 5);
}

double fpfs_GetTrackStartupQueueDuration@<D0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  CMTimeEpoch epoch;
  __int128 v8;
  CMTime v9;
  CMTime lhs;
  CMSampleBufferRef refcon;
  CMTime time2;
  CMTime time1;
  CMTime v14;

  memset(&v14, 0, sizeof(v14));
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  CMBufferQueueGetDuration((CMTime *)a3, *(CMBufferQueueRef *)(a1 + 72));
  time1 = *(CMTime *)a3;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    refcon = 0;
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetMinSampleInStartupQueue, &refcon);
    if (refcon)
    {
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetPresentationTimeStamp(&time1, refcon);
      lhs = time1;
      v9 = *(CMTime *)(a1 + 128);
      CMTimeAdd(&time2, &lhs, &v9);
      epoch = time2.epoch;
      time1 = time2;
      v8 = *(_OWORD *)&time2.value;
      time2 = *a2;
      *(_OWORD *)&lhs.value = v8;
      lhs.epoch = epoch;
      CMTimeSubtract(&v14, &time2, &lhs);
      lhs = *(CMTime *)a3;
      v9 = v14;
      CMTimeSubtract(&time2, &lhs, &v9);
      result = *(double *)&time2.value;
      *(CMTime *)a3 = time2;
    }
  }
  return result;
}

uint64_t fpfsi_PlaybackHasBufferedBeyondForwardEndTime(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[24];

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    fpfsi_MapEndTimeFromTargetToSource(result, (uint64_t)v3);
    return fpfsi_PlaybackHasBufferedBeyondTime(a1, (uint64_t)v3) != 0;
  }
  return result;
}

uint64_t fpfsi_PlaybackHasBufferedBeyondTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  CMTime v8;
  CMTime lhs;
  CMTime time1;
  CMTime v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
    return 0;
  v5 = DerivedStorage;
  result = CMBaseObjectGetDerivedStorage();
  if (!result)
    return result;
  v7 = result;
  fpfs_GetItemBufferedDuration(a1, &v11, 0, 0);
  fpfs_GetNextTimeToPlay(v5, 0, (uint64_t)&lhs);
  v8 = v11;
  CMTimeAdd(&time1, &lhs, &v8);
  v8 = *(CMTime *)a2;
  return (CMTimeCompare(&time1, &v8) & 0x80000000) == 0 && *(float *)(v7 + 108) >= 0.0;
}

uint64_t fpfs_GetMinSampleInStartupQueue(opaqueCMSampleBuffer *a1, CMSampleBufferRef *a2)
{
  CMTime v5;
  CMTime time2;
  CMTime v7;
  CMTime v8;

  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetPresentationTimeStamp(&v8, a1);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetDecodeTimeStamp(&v7, a1);
  if (fpfs_IsMarkerOnly(a1))
    return 0;
  if ((v7.flags & 1) != 0)
  {
    if (!*a2 || (CMSampleBufferGetPresentationTimeStamp(&time2, *a2), v5 = v8, CMTimeCompare(&v5, &time2) < 0))
      *a2 = a1;
    if (fpfs_IsVideoSync(a1))
      return 4294954433;
    else
      return 0;
  }
  else
  {
    *a2 = a1;
    return 4294954433;
  }
}

uint64_t fpfs_isAlternateValid(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 96);
  if (result)
    return FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(result, a2);
  return result;
}

uint64_t fpfsi_TrialSwitchDownInProgress(uint64_t a1)
{
  uint64_t result;
  int PeakBitRate;

  if (!*(_QWORD *)(a1 + 1696))
    return 0;
  result = *(_QWORD *)(a1 + 1760);
  if (result)
  {
    PeakBitRate = FigAlternateGetPeakBitRate(result);
    return PeakBitRate < (int)FigAlternateGetPeakBitRate(*(_QWORD *)(a1 + 1696));
  }
  return result;
}

uint64_t fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  *(_BYTE *)(DerivedStorage + 3082) = 0;
  if (*(_QWORD *)(DerivedStorage + 3088))
    fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(DerivedStorage + 3088));
  result = *(_QWORD *)(v1 + 40);
  if (result)
  {
    FigAlternateSelectionBossRemoveFilter(result, (uint64_t)CFSTR("MultichannelAudio"));
    return FigAlternateSelectionBossApplyFilters(*(const void **)(v1 + 40));
  }
  return result;
}

void fpfs_ReleaseAndClearDispatchSource(dispatch_object_t *a1)
{
  NSObject *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      dispatch_source_cancel(v2);
      dispatch_release(*a1);
    }
    *a1 = 0;
  }
}

void fpfsi_MultichannelUninhibitedCallback(uint64_t a1)
{
  CFTypeRef v1;
  uint64_t DerivedStorage;
  id v3;
  CFTypeRef cf;
  CFTypeRef v5;

  cf = 0;
  v5 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &v5, &cf))
  {
    v1 = v5;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 928))
    {
      v3 = *(id *)(DerivedStorage + 776);
      voucher_adopt();
      fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();

    }
    fpfs_UnlockAndPostNotificationsWithCaller(v1);
  }
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
}

uint64_t fpfs_ScheduleRecoverySwitch(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v23;
  NSObject *v24;
  int v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v7 = FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(_QWORD *)(DerivedStorage + 1696), a2, *(const __CFArray **)(DerivedStorage + 1784), 1) == 0;
  if (!FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(_QWORD *)(DerivedStorage + 1696), a2, *(const __CFArray **)(DerivedStorage + 1784), 2))v7 |= 2u;
  if (FigAlternateIsIFrameOnly(a2) || (result = fpfs_isAlternateValid(a1, a2), (_DWORD)result))
  {
    v9 = *(_QWORD *)(DerivedStorage + 1040);
    if (!v9)
      return 0;
    v10 = 0;
    v11 = 0;
    do
    {
      *(_BYTE *)(v9 + 187) = 0;
      if (*(_DWORD *)(v9 + 152) == 6 && !*(_BYTE *)(v9 + 184))
      {
        v12 = *(_DWORD *)(v9 + 32);
        if (v12 == 1936684398)
          v13 = v9;
        else
          v13 = v11;
        if (v12 == 1986618469)
          v10 = v9;
        else
          v11 = v13;
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
    if (v10)
    {
      if (FigCFEqual() && ((1 << *(_BYTE *)(v10 + 180)) & v7) != 0)
      {
        if (*(_BYTE *)(v10 + 189))
          v14 = 0;
        else
          v14 = 1 << *(_BYTE *)(v10 + 180);
        if (*(_BYTE *)(v10 + 189))
          v15 = 0;
        else
          v15 = v10;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = v10;
    }
    else
    {
      v16 = 0;
      v14 = 0;
      v15 = 0;
    }
    v25 = v7;
    if (v11)
    {
      if (FigCFEqual() && (v17 = 1 << *(_BYTE *)(v11 + 180), (v17 & v7) != 0))
      {
        if (*(_BYTE *)(v11 + 189))
          v17 = 0;
        v14 |= v17;
        if (*(_BYTE *)(v11 + 189))
          v18 = 0;
        else
          v18 = v11;
      }
      else
      {
        v18 = 0;
      }
      v19 = v11;
      if (!v10)
      {
LABEL_43:
        if (v11 && !v18)
          v14 &= ~(1 << *(_BYTE *)(v19 + 180));
        v20 = &sFigCDSNodeProtocolID;
        if (v15)
        {
          v21 = v15;
          if (((v14 >> *(_BYTE *)(v15 + 180)) & 1) != 0)
          {
            v21 = v15;
            if (dword_1EE2A2A88)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v21 = v15;
              v20 = &sFigCDSNodeProtocolID;
              if (!v18)
                goto LABEL_56;
              goto LABEL_52;
            }
          }
        }
        else
        {
          v21 = 0;
        }
        if (!v18)
        {
LABEL_56:
          v23 = 0;
LABEL_57:
          result = 0;
          if (v14 && v14 == v25)
          {
            if (!a3 && v15)
              *(_BYTE *)(v21 + 187) = 1;
            result = 1;
            if (!a3)
            {
              if (v18)
                *(_BYTE *)(v23 + 187) = 1;
            }
          }
          return result;
        }
LABEL_52:
        v23 = v18;
        if (((v14 >> *(_BYTE *)(v18 + 180)) & 1) != 0)
        {
          v23 = v18;
          if (*((_DWORD *)v20 + 674))
          {
            v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v23 = v18;
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      v19 = 0;
      v18 = 0;
      if (!v10)
        goto LABEL_43;
    }
    if (!v15)
      v14 &= ~(1 << *(_BYTE *)(v16 + 180));
    goto LABEL_43;
  }
  return result;
}

uint64_t fpfs_InitiateSwitchRecovery(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  const __CFAllocator *AllocatorForMedia;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  int v10;
  CMBufferRef v11;
  void *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t (**)(int, int, int, CMFormatDescriptionRef), uint64_t);
  NSObject *v18;
  uint64_t result;
  __int128 v20;
  NSObject *v21;
  _QWORD *v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  _QWORD *v25;
  const __CFString *key;
  uint64_t v27;
  CMBufferQueueRef queueOut[18];

  queueOut[16] = *(CMBufferQueueRef *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 1040);
  if (v2)
  {
    v24 = 0;
    v5 = a2;
    v25 = (_QWORD *)(a1 + 16 * a2 + 992);
    key = (const __CFString *)*MEMORY[0x1E0CA4E50];
    v27 = a1 + 1120;
    v6 = &sFigCDSNodeProtocolID;
    while (1)
    {
      if (!*(_BYTE *)(v2 + 187) || *(unsigned __int8 *)(v2 + 180) != a2)
        goto LABEL_38;
      *(_BYTE *)(v2 + 187) = 0;
      v7 = *(_QWORD *)(v2 + 96);
      if (v7 && *(_DWORD *)(v2 + 32) == 1936684398)
      {
        queueOut[0] = 0;
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
        if (CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, queueOut))
        {
          v10 = 0;
        }
        else
        {
          MEMORY[0x19402B01C](*(_QWORD *)(v7 + 40), fpfs_StealBuffer, queueOut[0]);
          if (CMBufferQueueIsEmpty(queueOut[0]))
          {
            v10 = 0;
          }
          else
          {
            v11 = CMBufferQueueDequeueAndRetain(queueOut[0]);
            if (v11)
            {
              v12 = (void *)v11;
              do
              {
                if (!fpfs_IsMarkerOnly((opaqueCMSampleBuffer *)v12) || !CMGetAttachment(v12, key, 0))
                  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v7 + 40), v12);
                CFRelease(v12);
                v12 = (void *)CMBufferQueueDequeueAndRetain(queueOut[0]);
              }
              while (v12);
            }
            v10 = 1;
          }
          FigBufferQueueRelease();
        }
        if (*((_DWORD *)v6 + 674))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        v10 = 1;
      }
      if (a2 < 3)
      {
        if (*v25)
        {
          if (!v10)
            goto LABEL_34;
        }
        else
        {
          StoreCurrentManifold(a1, a2, 0, *(const void **)(v2 + 48));
          v24 = *(_QWORD *)(v2 + 48);
          if (!v10)
          {
LABEL_34:
            result = fpfs_cloneTrackAndAddToTrackList((uint64_t *)v2, 1);
            if (!result)
              return result;
            v20 = *(_OWORD *)(v2 + 216);
            *(_QWORD *)(result + 208) = *(_QWORD *)(v2 + 232);
            *(_OWORD *)(result + 192) = v20;
            fpfs_ChangeTrackState(result, 4u);
            if (*((_DWORD *)v6 + 674))
            {
              v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v6 = &sFigCDSNodeProtocolID;
            }
            goto LABEL_37;
          }
        }
      }
      else
      {
        FigSignalErrorAt();
        if (!v10)
          goto LABEL_34;
      }
      *(_BYTE *)(v2 + 182) = 0;
      v14 = *(_QWORD *)(v2 + 96);
      if (v14)
        fpfs_SetFeederTrack(v14, v2);
      fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(a1 + 576), (dispatch_object_t *)(v2 + 112));
      v15 = *(_QWORD *)(v2 + 48);
      v16 = *(unsigned int *)(v2 + 24);
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t (**)(int, int, int, CMFormatDescriptionRef), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v17)
        v17(v15, v16, &kManifoldOutputCallbacks, v2);
      if (*((_DWORD *)v6 + 674))
      {
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_37:
      *(_QWORD *)(v27 + 8 * v5) = *(_QWORD *)(v2 + 64);
LABEL_38:
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
      {
        if (v24)
        {
          v22 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v22 >= 2uLL)
          {
            v23 = (void (*)(uint64_t))v22[7];
            if (v23)
              v23(v24);
          }
        }
        return 1;
      }
    }
  }
  return 1;
}

uint64_t fpfs_cloneTrackAndAddToTrackList(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  __int128 v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  unsigned int (*v15)(uint64_t, uint64_t, _QWORD, uint64_t);

  v4 = a1[6];
  v5 = *a1;
  v6 = *((unsigned int *)a1 + 6);
  v7 = fpfs_AddNewTrack(*a1, v6, v4, *((unsigned __int8 *)a1 + 180), *((unsigned int *)a1 + 8), *((unsigned int *)a1 + 7));
  if (v7)
  {
    *(_QWORD *)(v7 + 40) = FigFormatDescriptionRetain();
    v8 = (CFTypeRef)a1[48];
    if (v8)
      v8 = CFRetain(v8);
    *(_QWORD *)(v7 + 384) = v8;
    v9 = *((_OWORD *)a1 + 8);
    *(_QWORD *)(v7 + 144) = a1[18];
    *(_OWORD *)(v7 + 128) = v9;
    *(_QWORD *)(v7 + 64) = a1[8];
    v10 = *(_OWORD *)((char *)a1 + 396);
    *(_QWORD *)(v7 + 412) = *(uint64_t *)((char *)a1 + 412);
    *(_OWORD *)(v7 + 396) = v10;
    *(_BYTE *)(v7 + 420) = *((_BYTE *)a1 + 420);
    v11 = *(const void **)(v7 + 440);
    v12 = (const void *)a1[55];
    *(_QWORD *)(v7 + 440) = v12;
    if (v12)
      CFRetain(v12);
    if (v11)
      CFRelease(v11);
    v13 = *(const void **)(v7 + 464);
    v14 = (const void *)a1[58];
    *(_QWORD *)(v7 + 464) = v14;
    if (v14)
      CFRetain(v14);
    if (v13)
      CFRelease(v13);
    if (a2)
    {
      v15 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
      if (!v15 || v15(v4, v6, &kManifoldOutputCallbacks, v7))
      {
        fpfs_DeleteTrack(v5);
        return 0;
      }
    }
  }
  return v7;
}

uint64_t fpfsi_RTCReportingUpdatePlayerType(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  if (a2)
  {
    v2 = *(_QWORD *)(result + 2536);
    if (v2)
    {
      result = CMBaseObjectGetVTable();
      v4 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(result + 16)
                                                                                          + 48);
      if (v4)
        return v4(v2, CFSTR("playerStats"), CFSTR("PlayerType"), a2, 0);
    }
  }
  return result;
}

uint64_t fpfs_CreateAppliedMediaArray(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __CFArray *v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t CFStringForOSTypeValue;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a2)
    return 0;
  v5 = DerivedStorage;
  *a2 = 0;
  if (*(_BYTE *)(DerivedStorage + 705))
  {
    v6 = fpfs_CopyMediaSelectionArrayAndMarkOptionsAvailableOffline(a1);
    v7 = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria((uint64_t)v6, *(const __CFArray **)(a1 + 1776), *(const __CFDictionary **)(v5 + 688), *(const __CFDictionary **)(v5 + 696), *(unsigned __int8 *)(v5 + 704), *(unsigned __int8 *)(a1 + 1828), &cf);
    if (v6)
      CFRelease(v6);
    v8 = cf;
    if ((_DWORD)v7)
    {
      if (cf)
        CFRelease(cf);
      return v7;
    }
  }
  else
  {
    v8 = *(CFTypeRef *)(a1 + 1776);
    cf = v8;
    if (v8)
      CFRetain(v8);
  }
  CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  if (fpfs_FindMediaTypeInMediaArray((const __CFArray *)v8, CFStringForOSTypeValue, 0))
    fpfs_updateClosedCaptionsDisplay(*(const void **)a1, (const __CFArray *)cf);
  v7 = 0;
  *a2 = cf;
  return v7;
}

void fpfs_FindAndSetForcedSubtitle(uint64_t a1)
{
  const void *v2;
  __CFArray *v3;
  uint64_t CFStringForOSTypeValue;
  const __CFDictionary *MediaTypeInMediaArray;
  uint64_t v6;

  v2 = *(const void **)(a1 + 1792);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 1792) = 0;
  }
  if (fpfs_IsClosedCaptioningSelected(a1, 0))
  {
    v3 = fpfs_CopyMediaSelectionArrayAndMarkOptionsAvailableOffline(a1);
    CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
    MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v3, CFStringForOSTypeValue, 0);
    v6 = FigGetCFStringForOSTypeValue();
    fpfs_FindMediaTypeInMediaArray(v3, v6, 0);
    *(_QWORD *)(a1 + 1792) = FigAutomaticMediaSelectionCreateSecondaryForcedSubtitlesSelectedMediaDictionary(*(const __CFArray **)(a1 + 1784), MediaTypeInMediaArray);
    if (v3)
      CFRelease(v3);
  }
}

__CFArray *fpfs_CopyMediaSelectionArrayAndMarkOptionsAvailableOffline(uint64_t a1)
{
  uint64_t v2;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  __CFArray *v6;
  const void *v7;
  CFTypeRef cf;

  if (!a1)
    goto LABEL_11;
  if (!*(_QWORD *)(a1 + 1688))
    goto LABEL_11;
  if (!*(_BYTE *)(a1 + 1828))
    goto LABEL_11;
  if (!*(_QWORD *)(a1 + 928))
    goto LABEL_11;
  if (!CMBaseObjectGetDerivedStorage())
    goto LABEL_11;
  cf = 0;
  v2 = *(_QWORD *)(a1 + 928);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBaseObject = FigBytePumpGetFigBaseObject(v2);
  v5 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (!v5)
    goto LABEL_11;
  v5(FigBaseObject, CFSTR("FBP_SegmentCache"), AllocatorForMedia, &cf);
  if (!cf)
    goto LABEL_11;
  v6 = FigCopyMediaSelectionArrayAndMarkOptionsAvailableOffline(*(const void **)(a1 + 1688), *(const void **)(a1 + 32), (uint64_t)cf);
  if (cf)
    CFRelease(cf);
  if (!v6)
  {
LABEL_11:
    v7 = *(const void **)(a1 + 1688);
    if (v7)
      return (__CFArray *)CFRetain(v7);
    else
      return 0;
  }
  return v6;
}

uint64_t fpfsi_RTCReportingUpdateProgressive(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t (*v6)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);

  v3 = *(_QWORD *)(result + 2536);
  if (v3)
  {
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 56);
    if (v6)
      return v6(v3, CFSTR("playerStats"), a2, a3, 0);
  }
  return result;
}

void fpfsi_highSpeedHighPowerTransportChangedCallback(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t, __CFString *, uint64_t);
  uint64_t v9;
  CFTypeRef cf;
  CFTypeRef v11;

  cf = 0;
  v11 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v11))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(DerivedStorage + 2256) = a3;
    v5 = *(_QWORD *)(DerivedStorage + 2248);
    if (v5)
    {
      v6 = *(_DWORD *)(DerivedStorage + 2260);
      v7 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v7)
      {
        if (v6 < 1 || a3 == 0)
          v9 = *MEMORY[0x1E0C9AE40];
        else
          v9 = *MEMORY[0x1E0C9AE50];
        v7(v5, CFSTR("FNCM_FullThrottleDutyCycleRequested"), v9);
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(cf);
  }
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
}

void fpfsi_expensiveNetworkChangedCallback(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  const __CFDictionary *v7;
  const void **v8;
  const __CFAllocator *v9;
  CFDictionaryRef Copy;
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  CFTypeRef cf;
  CFTypeRef v18;

  cf = 0;
  v18 = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  v8 = (const void **)MEMORY[0x1E0C9AE40];
  if (a3)
    v8 = (const void **)MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, CFSTR("NetworkIsExpensive"), *v8);
  v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Copy = CFDictionaryCreateCopy(v9, v7);
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v18))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v12 = *(_QWORD *)(DerivedStorage + 2536);
    if (v12)
    {
      v13 = DerivedStorage;
      v14 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v14)
        v14(v12, CFSTR("playerStats"), CFSTR("netX"), a3, 0);
      v15 = *(_QWORD *)(v13 + 2536);
      if (v15)
      {
        v16 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
        if (v16)
          v16(v15, CFSTR("playerStats"), 3001, 0, 0);
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (Copy)
    CFRelease(Copy);
  if (v7)
    CFRelease(v7);
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
}

void fpfsi_cleanupNetworkCostMonitor()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t GlobalNetworkBufferingQueue;
  void (*v5)(uint64_t, uint64_t, _QWORD, uint64_t);
  const void *SInt32;
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, const void *);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, uint64_t);
  const void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 2248);
  if (v1)
  {
    v2 = DerivedStorage;
    v3 = *(_QWORD *)(DerivedStorage + 16);
    GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
    v5 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v5)
      v5(v1, v3, 0, GlobalNetworkBufferingQueue);
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    if (SInt32)
    {
      v7 = *(_QWORD *)(v2 + 2248);
      v8 = *(void (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v8)
        v8(v7, CFSTR("FNCM_MaximumMediaBitrate"), SInt32);
    }
    v9 = *(_QWORD *)(v2 + 2248);
    v10 = *MEMORY[0x1E0C9AE40];
    v11 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v11)
      v11(v9, CFSTR("FNCM_BufferingInProgress"), v10);
    v12 = *(_QWORD *)(v2 + 2248);
    v13 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v13)
      v13(v12, CFSTR("FNCM_FullThrottleDutyCycleRequested"), v10);
    if (SInt32)
      CFRelease(SInt32);
    v14 = *(const void **)(v2 + 2248);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v2 + 2248) = 0;
    }
  }
}

void fpfsi_StartDownloadingToURL(uint64_t a1, const void *a2)
{
  CFTypeRef v4;
  uint64_t FigBaseObject;
  unsigned int (*v6)(uint64_t, __CFString *, CFTypeRef);
  uint64_t v7;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  unsigned int (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  const __CFAllocator *v15;
  __CFDictionary *Mutable;
  const __CFDictionary *v17;
  const __CFAllocator *v18;
  CFTypeRef v19;
  uint64_t v20;
  void (*v21)(uint64_t, __CFString *, CFTypeRef);
  CFTypeRef cf;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;

  v24 = 0;
  v25 = 0;
  cf = 0;
  v23 = 0;
  if (!*(_QWORD *)(a1 + 928))
    goto LABEL_19;
  if (FigAssetDownloadCoordinatorCopyClientBundleIdentifierForAsset(*(_QWORD *)(a1 + 32), &v25))
    goto LABEL_20;
  v4 = v25;
  if (v25)
  {
    FigBaseObject = FigBytePumpGetFigBaseObject(*(_QWORD *)(a1 + 928));
    v6 = *(unsigned int (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (!v6 || v6(FigBaseObject, CFSTR("FBP_ClientBundleIdentifier"), v4))
      goto LABEL_20;
  }
  v7 = *(_QWORD *)(a1 + 32);
  AllocatorForMedia = FigGetAllocatorForMedia();
  CMBaseObject = FigAssetGetCMBaseObject(v7);
  v10 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
  if (!v10 || v10(CMBaseObject, CFSTR("assetProperty_OriginalNetworkContentURL"), AllocatorForMedia, &v24))
    goto LABEL_20;
  if (!v24)
  {
LABEL_19:
    FigSignalErrorAt();
LABEL_20:
    v17 = 0;
    goto LABEL_21;
  }
  v11 = *(_QWORD *)(a1 + 928);
  v12 = FigGetAllocatorForMedia();
  v13 = FigBytePumpGetFigBaseObject(v11);
  v14 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v14)
    v14(v13, CFSTR("FBP_DownloadDestinationURL"), v12, &cf);
  if (FigCFEqual())
    goto LABEL_20;
  v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = Mutable;
  if (!Mutable)
    goto LABEL_18;
  CFDictionarySetValue(Mutable, CFSTR("FSC_DownloadDestinationURL"), a2);
  v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (FigStreamingCacheCreate(v18, (const __CFURL *)v24, v17, (uint64_t *)&v23))
    goto LABEL_21;
  v19 = v23;
  if (v23)
  {
    v20 = FigBytePumpGetFigBaseObject(*(_QWORD *)(a1 + 928));
    v21 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v21)
      v21(v20, CFSTR("FBP_SegmentCache"), v19);
  }
  else
  {
LABEL_18:
    FigSignalErrorAt();
  }
LABEL_21:
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (v17)
    CFRelease(v17);
  if (v23)
    CFRelease(v23);
  if (v24)
    CFRelease(v24);
}

uint64_t fpfsi_AssetBecameEligibleForDownload()
{
  FigRetainProxyRetain();
  CMNotificationCenterGetDefaultLocalCenter();
  dispatch_get_global_queue(0, 0);
  FigGetAllocatorForMedia();
  return FigDeferNotificationToDispatchQueue();
}

uint64_t fpfsi_DeferredAssetBecameEligibleForDownload(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  BOOL v7;
  CFTypeRef cf;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;

  v11 = 0;
  v12 = 0;
  cf = 0;
  v10 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v12, &v11))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v3 = *(_QWORD *)(DerivedStorage + 32);
    AllocatorForMedia = FigGetAllocatorForMedia();
    CMBaseObject = FigAssetGetCMBaseObject(v3);
    v6 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v6
      && !v6(CMBaseObject, CFSTR("assetProperty_CreationURL"), AllocatorForMedia, &cf)
      && !FigCFURLIsLocalResource())
    {
      if (FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(_QWORD *)(DerivedStorage + 32), &v10))
        v7 = 1;
      else
        v7 = v10 == 0;
      if (!v7)
        fpfsi_StartDownloadingToURL(DerivedStorage, v10);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v12);
  }
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  return FigRetainProxyRelease();
}

void fpfs_SuggestedAlternateNote(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v8;
  int v9;
  CFTypeRef v10;
  CMTime *DerivedStorage;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AllocatorForMedia;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, __CFString *, uint64_t, CMTime *);
  int v25;
  CFTypeID v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int PeakBitRate;
  int v32;
  unsigned int v33;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v35;
  CFTypeRef v36;
  CMTime v37;
  CMTime v38;
  CFTypeRef v39;
  CFTypeRef cf;
  CMTime rhs;
  CMTime time;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  cf = 0;
  memset(&v38, 0, sizeof(v38));
  memset(&v37, 0, sizeof(v37));
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("FBP_AlternateValue"));
    if (Value)
    {
      v8 = Value;
      v9 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v39, &cf);
      v10 = cf;
      if (!v9)
      {
        DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
        v12 = v39;
        v13 = CMBaseObjectGetDerivedStorage();
        if (!DerivedStorage[38].epoch)
          goto LABEL_48;
        v14 = v13;
        v15 = DerivedStorage[4].value;
        if (!v15
          || !FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(v15, (uint64_t)v8)
          || FigCFEqual()
          || !*(_BYTE *)(v14 + 458))
        {
          goto LABEL_48;
        }
        v16 = CMBaseObjectGetDerivedStorage();
        v17 = CMBaseObjectGetDerivedStorage();
        v18 = *(_QWORD *)(v16 + 928);
        CMBaseObjectGetDerivedStorage();
        v36 = v12;
        if (!v10 || !v18)
        {
          v28 = 0;
          if (FigSignalErrorAt())
            goto LABEL_40;
          goto LABEL_38;
        }
        v19 = CMBaseObjectGetDerivedStorage();
        time.value = 0;
        LODWORD(rhs.value) = 0;
        if (CFEqual(CFSTR("FBP_MaximumRecommendedCellularBitrate"), CFSTR("FBP_InitialBandwidthTargetForNetwork"))
          || CFEqual(CFSTR("FBP_MaximumRecommendedCellularBitrate"), CFSTR("FBP_MaximumRecommendedCellularBitrate")))
        {
          v20 = *(_QWORD *)(v19 + 928);
          AllocatorForMedia = FigGetAllocatorForMedia();
          FigBytePumpGetFigBaseObject(v20);
          v23 = v22;
          v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
          if (v24)
          {
            v25 = v24(v23, CFSTR("FBP_MaximumRecommendedCellularBitrate"), AllocatorForMedia, &time);
            if (v25 == -12783 || !v25)
            {
              if (!time.value)
              {
                v12 = v36;
                goto LABEL_38;
              }
              v26 = CFGetTypeID((CFTypeRef)time.value);
              v12 = v36;
              if (v26 == CFDictionaryGetTypeID())
              {
                if (FigCFDictionaryGetInt32IfPresent()
                  && FigCFDictionaryGetBooleanIfPresent())
                {
                  v27 = rhs.value;
                  goto LABEL_28;
                }
              }
              else
              {
                FigSignalErrorAt();
              }
              v27 = 0;
LABEL_28:
              if (time.value)
                CFRelease((CFTypeRef)time.value);
              if (*(_BYTE *)(v17 + 768) && v27 > 0)
              {
                v29 = *(_DWORD *)(v16 + 2376);
                if (v29 >= v27)
                  v30 = v27;
                else
                  v30 = *(_DWORD *)(v16 + 2376);
                if (v29 <= 0)
                  v28 = v27;
                else
                  v28 = v30;
LABEL_40:
                PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v8);
                v32 = PeakBitRate;
                if (!v28 || PeakBitRate < v28)
                {
                  fpfs_GetNextTimeToPlay((uint64_t)DerivedStorage, 0, (uint64_t)&v38);
                  if (v32 >= (int)FigAlternateGetPeakBitRate(DerivedStorage[70].epoch))
                    v33 = 2;
                  else
                    v33 = 3;
                  if (dword_1EE2A2A88)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v12 = v36;
                  }
                  time = v38;
                  rhs = DerivedStorage[49];
                  CMTimeAdd(&v37, &time, &rhs);
                  v35 = CFDictionaryGetValue(theDict, CFSTR("FBP_CacheContext"));
                  time = v37;
                  rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
                  fpfs_SetAlternateWithContext((uint64_t)v12, v10, v8, 1u, &time, (uint64_t)&rhs, 0, 0, (uint64_t)v35, v33);
                }
LABEL_48:
                fpfs_UnlockAndPostNotificationsWithCaller(v12);
              }
LABEL_38:
              v28 = *(_DWORD *)(v16 + 2376);
              if (v28 <= 0)
                v28 = 0;
              goto LABEL_40;
            }
          }
          FigSignalErrorAt();
        }
        v27 = 0;
        v12 = v36;
        goto LABEL_28;
      }
      if (cf)
        CFRelease(cf);
      if (v39)
        CFRelease(v39);
    }
  }
}

void fpfs_SeekableTimeRangeChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2;
  uint64_t DerivedStorage;
  CFTypeRef v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  CMTime *v12;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  double Seconds;
  CMTimeEpoch v16;
  double v17;
  void (*v18)(CMTimeEpoch, __CFString *, __CFString *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  uint64_t v22;
  uint64_t AllocatorForMedia;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, __CFString *, uint64_t, void **);
  __CFDictionary *NotificationPayloadForProperties;
  __CFDictionary *v28;
  uint64_t v29;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v31;
  unsigned int v32;
  const char *v33;
  const char *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  CMTime *v41;
  void *value;
  CFTypeRef cf;
  CFTypeRef v44;
  CFTypeRef v45;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  const char *v49;
  __int16 v50;
  CFTypeRef v51;
  __int16 v52;
  const char *v53;
  CMTime time1;
  CMTimeValue v55;
  CMTimeScale timescale;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v45 = 0;
  value = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v45, &v44))
  {
    v2 = v44;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = v45;
    CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(DerivedStorage + 928))
      goto LABEL_17;
    memset(&time1, 0, sizeof(time1));
    if (!fpfsi_GetDuration((uint64_t)v2, (__int128 *)&time1.value) && (time1.flags & 0x11) == 0x11)
    {
      memset(&time1, 0, sizeof(time1));
      v11 = CMBaseObjectGetDerivedStorage();
      if (*(float *)(v11 + 840) > 0.0)
      {
        v12 = (CMTime *)v11;
        fpfsi_GetPumpMaxTimeAvailable(v11, (uint64_t)&time);
        v55 = time.value;
        flags = time.flags;
        timescale = time.timescale;
        epoch = time.epoch;
        fpfsi_GetCurrentTime((uint64_t)v2, (uint64_t)&time1);
        if ((flags & 0x1D) == 1 && (time1.flags & 0x1D) == 1)
        {
          lhs.timescale = timescale;
          lhs.flags = flags;
          lhs.epoch = epoch;
          rhs = v12[49];
          lhs.value = v55;
          CMTimeSubtract(&time, &lhs, &rhs);
          timescale = time.timescale;
          v55 = time.value;
          lhs = time;
          rhs = time1;
          CMTimeSubtract(&time, &lhs, &rhs);
          Seconds = CMTimeGetSeconds(&time);
          v16 = v12[105].epoch;
          if (v16)
          {
            v17 = Seconds;
            v18 = *(void (**)(CMTimeEpoch, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 40);
            if (v18)
              v18(v16, CFSTR("playerStats"), CFSTR("DistanceFromLiveEdge"), (uint64_t)(v17 * 1000.0));
          }
        }
      }
    }
    FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 928));
    v20 = v19;
    v21 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (!v21 || v21(v20, CFSTR("FBP_MinTime"), 0, &cf))
    {
LABEL_13:
      v22 = *(_QWORD *)(DerivedStorage + 928);
      AllocatorForMedia = FigGetAllocatorForMedia();
      FigBytePumpGetFigBaseObject(v22);
      v25 = v24;
      v26 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
      if (v26)
        v26(v25, CFSTR("FBP_TimeAvailableModDate"), AllocatorForMedia, &value);
      if (fpfs_EnsureScanningBoundaryTimer(v2) == -12863)
        fpfs_HandleScanningBoundaryTimerEnd(v2);
LABEL_17:
      NotificationPayloadForProperties = (__CFDictionary *)fpfs_CreateNotificationPayloadForProperties(v4, (uint64_t)v2, v5, v6, v7, v8, v9, v10, CFSTR("SeekableTimeIntervals"), 0);
      v28 = NotificationPayloadForProperties;
      if (value)
        CFDictionarySetValue(NotificationPayloadForProperties, CFSTR("updateDate"), value);
      fpfs_EnqueueNotification(v4, CFSTR("SeekableRangeChanged"), v2, v28);
    }
    CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)cf);
    *(CMTime *)(DerivedStorage + 1344) = time1;
    if ((*(_BYTE *)(DerivedStorage + 1356) & 1) != 0)
    {
LABEL_44:
      v37 = *(_QWORD **)(DerivedStorage + 1608);
      if (v37)
      {
        v38 = 0;
        v39 = *(_QWORD *)(DerivedStorage + 1608);
        do
        {
          if ((*(_BYTE *)(v39 + 84) & 1) != 0)
            v38 = (uint64_t *)v39;
          v39 = *(_QWORD *)v39;
        }
        while (v39);
        if (*v37)
        {
          while (1)
          {
            v40 = *(uint64_t **)(DerivedStorage + 1608);
            if (!v40)
              break;
            if (v40 == v38)
              break;
            v41 = (CMTime *)*v40;
            if (!*v40)
              break;
            time1 = *(CMTime *)(DerivedStorage + 1344);
            time = v41[1];
            if (CMTimeCompare(&time1, &time) < 0)
              break;
            fpfsi_RemoveDateEntry(DerivedStorage, v40);
          }
        }
      }
      goto LABEL_13;
    }
    if (*(float *)(DerivedStorage + 840) != 0.0)
    {
      v29 = *(_QWORD *)(DerivedStorage + 1040);
      if (v29)
      {
        if (fpfs_StopPlaybackByStalledTrack(v29))
          goto LABEL_17;
      }
    }
    if (!dword_1EE2A2A88)
    {
LABEL_42:
      fpfs_PrepareForSeek(v2, 255, 1);
      v35 = *(uint64_t **)(DerivedStorage + 1608);
      if (v35)
      {
        do
        {
          v36 = *v35;
          fpfsi_RemoveDateEntry(DerivedStorage, v35);
          v35 = (uint64_t *)v36;
        }
        while (v36);
      }
      goto LABEL_44;
    }
    LODWORD(lhs.value) = 0;
    LOBYTE(rhs.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v31 = lhs.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value))
      v32 = v31;
    else
      v32 = v31 & 0xFFFFFFFE;
    if (!v32)
    {
LABEL_41:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_42;
    }
    if (v4)
    {
      v33 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      if (v2)
      {
LABEL_36:
        v34 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
LABEL_40:
        LODWORD(time.value) = 136316162;
        *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fpfs_SeekableTimeRangeChanged";
        LOWORD(time.flags) = 2048;
        *(_QWORD *)((char *)&time.flags + 2) = v4;
        HIWORD(time.epoch) = 2082;
        v49 = v33;
        v50 = 2048;
        v51 = v2;
        v52 = 2082;
        v53 = v34;
        _os_log_send_and_compose_impl();
        goto LABEL_41;
      }
    }
    else
    {
      v33 = "";
      if (v2)
        goto LABEL_36;
    }
    v34 = "";
    goto LABEL_40;
  }
  if (v44)
    CFRelease(v44);
  if (v45)
    CFRelease(v45);
}

void fpfs_DurationChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  CFTypeRef v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const void *NotificationPayloadForProperties;
  CFTypeRef v13;
  CFTypeRef cf;

  v13 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v13))
  {
    v2 = v13;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    v4 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 1320) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 1336) = *(_QWORD *)(v4 + 16);
    v5 = cf;
    NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(cf, (uint64_t)v2, v6, v7, v8, v9, v10, v11, CFSTR("CurrentDuration"), 0);
    fpfs_EnqueueNotification(v5, CFSTR("DurationChanged"), v2, NotificationPayloadForProperties);
  }
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
}

void fpfs_bytePumpNewErrorEntry(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v3 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v3))
  {
    v2 = v3;
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 928))
      fpfs_EnqueueNotification(cf, CFSTR("NewErrorLogEntry"), v2, 0);
    fpfs_UnlockAndPostNotificationsWithCaller(cf);
  }
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
}

void fpfsi_TaggedRangeMetadataChanged(uint64_t a1, uint64_t a2)
{
  int v2;
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v4 = 0;
  cf = 0;
  v2 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v4);
  v3 = cf;
  if (!v2)
  {
    fpfsi_UpdateTaggedRangeMetadataFromPumpAndNotifyIfNeeded(cf, v4, 1, 1);
    fpfs_UnlockAndPostNotificationsWithCaller(v3);
  }
  if (cf)
    CFRelease(cf);
  if (v4)
    CFRelease(v4);
}

void fpfsi_PrefersConcurrentSwitchChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2;
  CFTypeRef cf;

  v2 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v2))
  {
    fpfsi_UpdatePrefersConcurrentSwitching((const __CFArray *)v2);
    fpfs_UnlockAndPostNotificationsWithCaller(cf);
  }
  if (cf)
    CFRelease(cf);
  if (v2)
    CFRelease(v2);
}

void fpfs_RecommendedPrebufferReservationNote(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2;
  uint64_t DerivedStorage;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  CFTypeRef v10;
  const void *NotificationPayloadForProperties;
  CFTypeRef v12;
  CFTypeRef cf;

  v12 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v12))
  {
    v2 = v12;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v10 = cf;
    if (*(_QWORD *)(DerivedStorage + 928))
    {
      NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(cf, (uint64_t)v2, v4, v5, v6, v7, v8, v9, CFSTR("RecommendedTimeOffsetFromLive"), (uint64_t)CFSTR("TimeOffsetFromLive"));
      if (NotificationPayloadForProperties)
        fpfs_EnqueueNotification(v10, CFSTR("NewRecommendedTimeOffsetFromLive"), v2, NotificationPayloadForProperties);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v10);
  }
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
}

void fpfsi_deltaUpdateNote(int a1, CFTypeRef cf)
{
  CFTypeRef cfa;
  CFTypeRef v4;

  cfa = 0;
  v4 = 0;
  if (cf)
    CFRetain(cf);
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy((uint64_t)cf, &v4, &cfa))
  {
    FigRetainProxyRelease();
  }
  else
  {
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cfa)
      CFRelease(cfa);
    if (v4)
      CFRelease(v4);
  }
}

void fpfs_BytePumpFn(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, unsigned int a4, int a5, int a6, uint64_t a7, CMTime *a8, const void *a9, int a10, uint64_t a11, CFErrorRef err, CMTime *a13, uint64_t a14)
{
  uint64_t v17;
  CFIndex Code;
  void *v23;
  uint64_t DerivedStorage;
  const __CFArray *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  uint64_t AllocatorForMedia;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, __CFString *, uint64_t, CMTime *);
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  OpaqueCMBlockBuffer *v42;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v45;
  const char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, __CFString *, __CFString *, uint64_t);
  _BOOL4 v49;
  float v50;
  uint64_t j;
  uint64_t i;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int IsEmpty;
  BOOL v57;
  int v58;
  uint64_t v59;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  const char *v63;
  const char *v64;
  Float64 Seconds;
  uint64_t v66;
  uint64_t v67;
  int v68;
  NSObject *v69;
  unsigned int v70;
  unsigned int v71;
  const char *v72;
  uint64_t v73;
  char v74;
  const void *v75;
  CMTimeEpoch epoch;
  const void *v77;
  CFTypeRef v78;
  NSObject *v79;
  unsigned int v80;
  unsigned int v81;
  const char *v82;
  unsigned int v83;
  NSObject *v84;
  unsigned int v85;
  unsigned int v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  const char *v98;
  uint64_t IFrameTrack;
  const char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  NSObject *v111;
  unsigned int v112;
  unsigned int v113;
  CFTypeRef v114;
  const char *v115;
  CFTypeRef v116;
  const char *v117;
  Float64 v118;
  OpaqueCMTimebase *v119;
  CFTypeRef v120;
  CFTypeRef v121;
  OpaqueCMBlockBuffer *v122;
  CMTime *v123;
  CMTimeEpoch v124;
  NSObject *v125;
  unsigned int v126;
  unsigned int v127;
  CFTypeRef v128;
  const char *v129;
  CFTypeRef v130;
  const char *v131;
  const char *v132;
  Float64 v133;
  Float64 v134;
  CFTypeRef v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  size_t DataLength;
  uint64_t updated;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  CFTypeRef v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  NSObject *v150;
  unsigned int v151;
  unsigned int v152;
  const char *v153;
  CMTime *v154;
  uint64_t v155;
  CMTimeValue v156;
  int v157;
  CMTimeScale v158;
  uint64_t v159;
  OpaqueCMBlockBuffer *v160;
  const void **v161;
  OpaqueCMBlockBuffer *v162;
  CFIndex appended;
  uint64_t *v164;
  uint64_t v165;
  CFTypeRef v166;
  int32_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  CFIndex Count;
  uint64_t v172;
  uint64_t v173;
  CMTimeEpoch v174;
  uint64_t v175;
  CMTimeFlags v176;
  CMTimeEpoch v177;
  uint64_t v178;
  CMTimeEpoch v179;
  uint64_t v180;
  int v181;
  int v182;
  BOOL v183;
  CFTypeRef v184;
  OpaqueCMBlockBuffer *v185;
  _QWORD *v186;
  const __CFArray *ArrayValue;
  const void *v188;
  BOOL v189;
  const __CFAllocator *v190;
  CFDictionaryRef v191;
  CFDictionaryRef v192;
  void (*v193)(const void *, const __CFString *, CFDictionaryRef);
  uint64_t v194;
  uint64_t v195;
  const void *v196;
  uint64_t (*v197)(uint64_t, _QWORD, _QWORD, const void *);
  size_t v198;
  unint64_t v199;
  CMTimeValue v200;
  void (*v201)(CMTimeValue, const __CFString *, _QWORD, CMTime *);
  CMTimeValue v202;
  uint64_t v203;
  void (*v204)(uint64_t, __CFString *, __CFString *, CMTimeValue, _QWORD);
  __CFString *v205;
  uint64_t v206;
  OpaqueCMBlockBuffer *v207;
  uint64_t v208;
  uint64_t (*v209)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *);
  uint64_t v210;
  int v211;
  NSObject *v212;
  unsigned int v213;
  unsigned int v214;
  CFTypeRef v215;
  NSObject *v216;
  unsigned int v217;
  unsigned int v218;
  CFTypeRef v219;
  uint64_t v220;
  const void *v221;
  _QWORD *v222;
  const void *v223;
  NSObject *v224;
  unsigned int v225;
  unsigned int v226;
  CFTypeRef v227;
  CFTypeRef v228;
  const char *v229;
  const char *v230;
  uint64_t v231;
  void (*v232)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v233;
  uint64_t v234;
  _BOOL4 v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(uint64_t);
  uint64_t UpTimeNanoseconds;
  uint64_t v240;
  _BOOL4 v241;
  NSObject *v242;
  unsigned int v243;
  unsigned int v244;
  const char *v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  const void *NotificationPayloadForProperties;
  const char *v253;
  uint64_t v254;
  const char *v255;
  Float64 v256;
  Float64 v257;
  int v258;
  const void *v259;
  uint64_t v260;
  int v261;
  void (*v262)(uint64_t, const __CFString *, uint64_t);
  uint64_t v264;
  NSObject *v265;
  unsigned int v266;
  unsigned int v267;
  const char *v268;
  const char *v269;
  Float64 v270;
  Float64 v271;
  uint64_t CurrentManifold;
  void (*v273)(uint64_t);
  uint64_t v274;
  const __CFString *v275;
  const void *v276;
  const __CFAllocator *v277;
  uint64_t v278;
  CFTypeRef v279;
  uint64_t v280;
  uint64_t v281;
  const void *v282;
  NSObject *v283;
  unsigned int v284;
  unsigned int v285;
  uint64_t SwitchOptions;
  NSObject *v287;
  unsigned int v288;
  unsigned int v289;
  const char *v290;
  CFTypeRef v291;
  const char *v292;
  const char *v293;
  Float64 v294;
  Float64 v295;
  CFTypeRef v296;
  const char *v297;
  uint64_t v298;
  void (*v299)(uint64_t, __CFString *, __CFString *, size_t);
  const void *v300;
  const char *v301;
  uint64_t v302;
  const void *v303;
  NSObject *v304;
  unsigned int v305;
  unsigned int v306;
  CFIndex v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  _BOOL4 v312;
  CMTimeEpoch v313;
  int v314;
  CMTimeFlags flags;
  CFTypeRef v316;
  int v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  __int128 v324;
  const char *v325;
  size_t v326;
  CMTime *v327;
  const void **v328;
  const char *v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  OpaqueCMBlockBuffer *theBuffer;
  unsigned int theBuffera;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  CFTypeRef v338;
  CMTime v339;
  CMTime v340;
  CMTime v341;
  CMTime v342;
  CMTime v343;
  CMTime v344;
  CMTime time2;
  CMTime v346;
  CMTime time1;
  CMTime v348;
  CMTime v349;
  CMTime time;
  CMTime v351;
  CFTypeRef v352;
  CFTypeRef v353;
  CMTime type;
  CMTime v355;
  CMTime rhs;
  uint64_t v357;
  _BYTE v358[10];
  __int16 v359;
  const char *v360;
  __int16 v361;
  _BYTE v362[30];
  Float64 v363;
  __int16 v364;
  int v365;
  CMTimeValue v366;
  CMTimeScale timescale;
  CMTimeValue v368;
  CMTimeScale v369;
  CMTimeValue v370;
  CMTimeScale v371;
  CMTimeValue v372;
  CMTimeScale v373;
  CMTimeValue v374;
  CMTimeScale v375;
  os_log_type_t v376[8];
  CMTimeScale v377;
  CMTime lhs;
  uint64_t v379;

  LODWORD(v17) = a5;
  v379 = *MEMORY[0x1E0C80C00];
  if (err)
    Code = CFErrorGetCode(err);
  else
    Code = 0;
  v353 = 0;
  v352 = 0;
  memset(&v351, 0, sizeof(v351));
  if (v17 <= 2)
  {
    if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v352, &v353))
    {
      v327 = a8;
      theBuffer = a3;
      v23 = (void *)v352;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v25 = (const __CFArray *)v353;
      v26 = CMBaseObjectGetDerivedStorage();
      v27 = v26;
      if (!*(_QWORD *)(v26 + 928))
        goto LABEL_649;
      v320 = v26 + 16 * v17;
      v322 = *(_QWORD *)(v320 + 1000);
      v335 = DerivedStorage;
      if (*(_DWORD *)(DerivedStorage + 32))
      {
        if (*(_BYTE *)(v26 + 462))
          v28 = 1;
        else
          v28 = (_DWORD)Code == 0;
        if (v28)
          goto LABEL_20;
      }
      else if (!(_DWORD)Code)
      {
        goto LABEL_649;
      }
      v29 = a4;
      lhs.value = 0;
      AllocatorForMedia = FigGetAllocatorForMedia();
      FigBytePumpGetFigBaseObject(a1);
      v32 = v31;
      v33 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v33)
      {
        v34 = v33(v32, CFSTR("FBP_AlternateInfo"), AllocatorForMedia, &lhs);
        if (lhs.value)
          CFRelease((CFTypeRef)lhs.value);
        a4 = v29;
        if (!v34)
        {
          DerivedStorage = v335;
          if (!*(_DWORD *)(v335 + 32))
            goto LABEL_675;
LABEL_20:
          v35 = v17;
          if ((a4 & 0x1000) != 0)
          {
            v36 = (a4 >> 12) & 1;
            if (!*(_QWORD *)(v27 + 1760) && !*(_QWORD *)(v27 + 16 * v17 + 8 * v36 + 992))
              v36 = 0;
          }
          else
          {
            v36 = 0;
          }
          if (*(_DWORD *)(v27 + 12 * v36 + 4 * v17 + 944) != a6)
            goto LABEL_649;
          v330 = v36;
          v323 = v36;
          *(_DWORD *)(v27 + 12 * v36 + 4 * v17 + 968) = a6;
          *(CFAbsoluteTime *)(v27 + 8 * v17 + 2992) = CFAbsoluteTimeGetCurrent();
          if ((a4 & 0x10000) != 0)
          {
            lhs.value = 0;
            v38 = *(_QWORD *)(v27 + 40);
            v39 = FigGetAllocatorForMedia();
            if (!FigAlternateSelectionBossCopyProperty(v38, CFSTR("FilteredAlternateList"), v39, (const __CFArray **)&lhs))fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList(v25, (const __CFArray *)lhs.value);
            if (lhs.value)
              CFRelease((CFTypeRef)lhs.value);
            goto LABEL_649;
          }
          if ((a4 & 8) != 0)
            *(_BYTE *)(v27 + (v323 | (2 * v323)) + v17 + 3058) = 0;
          v337 = v17;
          v336 = v27;
          v319 = v17;
          if ((a4 & 0x800) != 0)
          {
            v41 = v27 + (v323 | (2 * v323)) + v17;
            a4 |= *(_BYTE *)(v41 + 3058) == 0;
            *(_BYTE *)(v41 + 3058) = 1;
            v42 = theBuffer;
            if (v17 > 1)
              v42 = 0;
            theBuffer = v42;
            if (dword_1EE2A2A88)
            {
              v308 = a7;
              LODWORD(v355.value) = 0;
              LOBYTE(type.value) = 0;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              value = v355.value;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
                v45 = value;
              else
                v45 = value & 0xFFFFFFFE;
              if (v45)
              {
                if (v23)
                  v17 = CMBaseObjectGetDerivedStorage() + 824;
                else
                  v17 = (uint64_t)"";
                if (v25)
                  v46 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                else
                  v46 = "";
                LODWORD(rhs.value) = 136316418;
                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                LOWORD(rhs.flags) = 2048;
                *(_QWORD *)((char *)&rhs.flags + 2) = v23;
                HIWORD(rhs.epoch) = 2082;
                v357 = v17;
                *(_WORD *)v358 = 2048;
                *(_QWORD *)&v358[2] = v25;
                v359 = 2082;
                v360 = v46;
                v361 = 2114;
                *(_QWORD *)v362 = a9;
                _os_log_send_and_compose_impl();
                LODWORD(v17) = v337;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              DerivedStorage = v335;
              a7 = v308;
            }
            v47 = *(_QWORD *)(v27 + 2536);
            if (v47)
            {
              v48 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 32);
              if (v48)
                v48(v47, CFSTR("playerStats"), CFSTR("Gap"), 1);
            }
            v35 = v319;
          }
          else if (theBuffer)
          {
            v37 = v27 + (v323 | (2 * v323)) + v17;
            a4 |= *(_BYTE *)(v37 + 3058) != 0;
            *(_BYTE *)(v37 + 3058) = 0;
          }
          else
          {
            theBuffer = 0;
          }
          v49 = *(_QWORD *)(v27 + 24 * v323 + 8 * v35 + 1120) != a11;
          if ((v49 & ((a4 & 4) >> 2)) != 0)
            a4 ^= 4u;
          v314 = v49 | a4;
          if (*(_BYTE *)(v27 + v35 + 518))
          {
            *(_BYTE *)(v27 + v35 + 518) = 0;
            if (!((((v49 | a4) & 1) == 0) | (a4 >> 2) & 1) || (a4 & 8) != 0)
            {
              for (i = 0; i != 3; ++i)
              {
                v53 = (1 << i);
                if ((*(_DWORD *)(v27 + 1088) & v53) != 0 && *(_BYTE *)(v27 + 518 + i))
                  fpfs_PrepareForSeek(v25, v53, 1);
              }
              a4 |= 8u;
              LODWORD(v17) = v337;
              DerivedStorage = v335;
            }
            else
            {
              v50 = *(float *)(DerivedStorage + 108);
              if (v50 <= 2.0 && v50 >= 0.0 || *(_QWORD *)(v27 + 2960))
              {
                for (j = 518; j != 521; ++j)
                {
                  if (*(_BYTE *)(v27 + j))
                    goto LABEL_78;
                }
                fpfs_SetRateWithFadeInternal(*(_QWORD *)v27, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v50);
              }
            }
          }
LABEL_78:
          v54 = *(_QWORD *)(v27 + 1696);
          if (v54)
            v312 = FigAlternateIsIFrameOnly(v54) != 0;
          else
            v312 = 0;
          v55 = v330;
          if ((a4 & 0x10) != 0 || (_DWORD)Code && (a4 & 0x20) != 0)
            *(_BYTE *)(v27 + 1556) = 0;
          v317 = a4 & 0x20;
          if ((a4 & 0x20) == 0)
            goto LABEL_98;
          if ((_DWORD)Code)
          {
            if ((_DWORD)Code == -12648)
            {
              fpfs_FrameStepHitEnd(v25);
              goto LABEL_96;
            }
            if (!v312)
            {
LABEL_98:
              v318 = a4;
              if ((a4 & 2) == 0)
                goto LABEL_143;
              if (dword_1EE2A2A88)
              {
                v59 = a7;
                LODWORD(v355.value) = 0;
                LOBYTE(type.value) = 0;
                v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v61 = v355.value;
                if (os_log_type_enabled(v60, type.value))
                  v62 = v61;
                else
                  v62 = v61 & 0xFFFFFFFE;
                if (v62)
                {
                  if (v23)
                    v63 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                  else
                    v63 = "";
                  if (v25)
                    v64 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                  else
                    v64 = "";
                  fpfs_CurrentSubStreamBufferedDuration(v337, (uint64_t)&time);
                  Seconds = CMTimeGetSeconds(&time);
                  LODWORD(rhs.value) = 136316930;
                  *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                  LOWORD(rhs.flags) = 2048;
                  *(_QWORD *)((char *)&rhs.flags + 2) = v23;
                  HIWORD(rhs.epoch) = 2082;
                  v357 = (uint64_t)v63;
                  *(_WORD *)v358 = 2048;
                  *(_QWORD *)&v358[2] = v25;
                  v359 = 2082;
                  v360 = v64;
                  v361 = 1024;
                  *(_DWORD *)v362 = v337;
                  *(_WORD *)&v362[4] = 2048;
                  *(Float64 *)&v362[6] = Seconds;
                  *(_WORD *)&v362[14] = 2112;
                  *(_QWORD *)&v362[16] = err;
                  _os_log_send_and_compose_impl();
                  v27 = v336;
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                a4 = v318;
                v35 = v319;
                a7 = v59;
                v55 = v330;
              }
              v66 = 0;
              v67 = 0;
              *(_BYTE *)(v27 + (v323 | (2 * v323)) + v35 + 471) = 1;
              while (1)
              {
                v68 = *(unsigned __int8 *)(v27 + v67 + 471);
                if (*(_BYTE *)(v27 + 553))
                {
                  if (!*(_BYTE *)(v27 + v67 + 471))
                    goto LABEL_120;
                  if (!*(_QWORD *)(v27 + 1760))
                    goto LABEL_119;
                  v68 = *(unsigned __int8 *)(v27 + v67 + 474);
                }
                if (v68)
LABEL_119:
                  ++v66;
LABEL_120:
                if (++v67 == 3)
                {
                  LODWORD(v17) = v337;
                  if (!(_DWORD)v55 && *(_QWORD *)(v27 + 1104) == v35)
                  {
                    fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(v27 + 576), (dispatch_object_t *)(v27 + 2296));
                    v55 = v330;
                  }
                  v28 = *(_QWORD *)(v27 + 1096) == v66;
                  DerivedStorage = v335;
                  if (v28)
                  {
                    if (dword_1EE2A2A88)
                    {
                      v309 = a7;
                      LODWORD(v355.value) = 0;
                      LOBYTE(type.value) = 0;
                      v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v70 = v355.value;
                      if (os_log_type_enabled(v69, type.value))
                        v71 = v70;
                      else
                        v71 = v70 & 0xFFFFFFFE;
                      if (v71)
                      {
                        if (v23)
                          v17 = CMBaseObjectGetDerivedStorage() + 824;
                        else
                          v17 = (uint64_t)"";
                        if (v25)
                          v72 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                        else
                          v72 = "";
                        LODWORD(rhs.value) = 136316674;
                        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                        LOWORD(rhs.flags) = 2048;
                        *(_QWORD *)((char *)&rhs.flags + 2) = v23;
                        HIWORD(rhs.epoch) = 2082;
                        v357 = v17;
                        *(_WORD *)v358 = 2048;
                        *(_QWORD *)&v358[2] = v25;
                        v359 = 2082;
                        v360 = v72;
                        v361 = 1024;
                        *(_DWORD *)v362 = Code;
                        *(_WORD *)&v362[4] = 2082;
                        *(_QWORD *)&v362[6] = "Yes";
                        _os_log_send_and_compose_impl();
                        LODWORD(v17) = v337;
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      a4 = v318;
                      DerivedStorage = v335;
                      v35 = v319;
                      a7 = v309;
                    }
                    v73 = CMBaseObjectGetDerivedStorage();
                    if (*(_BYTE *)(v73 + 470) != 1)
                      *(_BYTE *)(v73 + 470) = 1;
                    fpfs_AssessItemTransition(v23);
                    v55 = v330;
                  }
LABEL_143:
                  if ((_DWORD)Code)
                  {
                    v326 = 0;
                    goto LABEL_597;
                  }
                  v74 = v314;
                  if (v314 & 1 | ((a4 & 0xC) != 0))
                    *(_BYTE *)(v27 + (v323 | (2 * v323)) + v35 + 512) = (a4 & 0x14) == 4;
                  if (a9 && *(_QWORD *)(v27 + 1104) == v35 && (v327->flags & 0x1D) == 1)
                  {
                    v75 = *(const void **)(v27 + 1584);
                    if (v75)
                      CFRelease(v75);
                    *(_QWORD *)(v27 + 1584) = CFRetain(a9);
                    epoch = v327->epoch;
                    *(_OWORD *)(v27 + 1560) = *(_OWORD *)&v327->value;
                    *(_QWORD *)(v27 + 1576) = epoch;
                    v55 = v330;
                  }
                  if (*(_QWORD *)(v27 + 1592)
                    && *(_QWORD *)(v27 + 1104) == v35
                    && (v77 = *(const void **)(v27 + 1584)) != 0)
                  {
                    v78 = CFRetain(v77);
                    v55 = v330;
                    v316 = v78;
                  }
                  else
                  {
                    v316 = 0;
                  }
                  if ((a4 & 0x14) == 4)
                  {
                    if (dword_1EE2A2A88)
                    {
                      LODWORD(v355.value) = 0;
                      LOBYTE(type.value) = 0;
                      v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v80 = v355.value;
                      if (os_log_type_enabled(v79, type.value))
                        v81 = v80;
                      else
                        v81 = v80 & 0xFFFFFFFE;
                      if (v81)
                      {
                        if (v23)
                          v82 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                        else
                          v82 = "";
                        if (v25)
                          v88 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                        else
                          v88 = "";
                        LODWORD(rhs.value) = 136316674;
                        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                        LOWORD(rhs.flags) = 2048;
                        *(_QWORD *)((char *)&rhs.flags + 2) = v23;
                        HIWORD(rhs.epoch) = 2082;
                        v357 = (uint64_t)v82;
                        *(_WORD *)v358 = 2048;
                        *(_QWORD *)&v358[2] = v25;
                        v359 = 2082;
                        v360 = v88;
                        v361 = 1024;
                        *(_DWORD *)v362 = v337;
                        *(_WORD *)&v362[4] = 1024;
                        *(_DWORD *)&v362[6] = v330;
                        _os_log_send_and_compose_impl();
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      a4 = v318;
                      v35 = v319;
                      v55 = v330;
                    }
                    if (!(_DWORD)v55)
                    {
                      if ((a4 & 0x200) == 0)
                      {
                        fpfs_WeakStreamEnd(v27, v337, 0);
                        StoreCurrentManifold(v27, v337, 0, 0);
                      }
                      fpfs_DeleteStrandedTracksUponSwitch((uint64_t)v25, v337, 0);
                      v55 = v330;
                    }
                    goto LABEL_242;
                  }
                  if (((v314 | (a4 >> 3)) & 1) == 0)
                    goto LABEL_242;
                  v83 = a4;
                  if (dword_1EE2A2A88)
                  {
                    LODWORD(v355.value) = 0;
                    LOBYTE(type.value) = 0;
                    v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v85 = v355.value;
                    if (os_log_type_enabled(v84, type.value))
                      v86 = v85;
                    else
                      v86 = v85 & 0xFFFFFFFE;
                    if (v86)
                    {
                      if (v23)
                        v87 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                      else
                        v87 = "";
                      if (v25)
                        v89 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                      else
                        v89 = "";
                      v90 = "TimeJumped - ";
                      LODWORD(rhs.value) = 136317442;
                      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                      LOWORD(rhs.flags) = 2048;
                      *(_QWORD *)((char *)&rhs.flags + 2) = v23;
                      if (((v83 >> 3) & 1) == 0)
                        v90 = "";
                      v357 = (uint64_t)v87;
                      v91 = "discontinuity - ";
                      HIWORD(rhs.epoch) = 2082;
                      if (((v83 >> 3) & 1) != 0)
                        v91 = "";
                      *(_WORD *)v358 = 2048;
                      *(_QWORD *)&v358[2] = v25;
                      v359 = 2082;
                      v360 = v89;
                      v361 = 2082;
                      *(_QWORD *)v362 = v90;
                      *(_WORD *)&v362[8] = 2082;
                      *(_QWORD *)&v362[10] = v91;
                      *(_WORD *)&v362[18] = 1024;
                      *(_DWORD *)&v362[20] = v337;
                      *(_WORD *)&v362[24] = 1024;
                      *(_DWORD *)&v362[26] = v330;
                      LOWORD(v363) = 1024;
                      *(_DWORD *)((char *)&v363 + 2) = a11;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    a4 = v318;
                    v27 = v336;
                    v35 = v319;
                    v55 = v330;
                    v74 = v314;
                  }
                  if ((v83 & 8) != 0)
                  {
                    if (v74 & 1 | !v312)
                    {
                      LODWORD(v17) = v337;
                      fpfs_PrepareForSeek(v25, (1 << v337), 1);
                      v55 = v330;
                    }
                    else
                    {
                      LODWORD(v17) = v337;
                      if (!v337 && (v327->flags & 0x1D) == 1)
                      {
                        lhs = *v327;
                        rhs = *(CMTime *)(v27 + 1176);
                        CMTimeSubtract(&v349, &lhs, &rhs);
                        IFrameTrack = fpfs_PrepareToReuseLastIFrameTrack((uint64_t)v25, (__int128 *)&v349.value, 1);
                        v55 = v330;
                        if ((_DWORD)IFrameTrack)
                        {
                          Code = IFrameTrack;
                          v40 = 0;
                          DerivedStorage = v335;
                          goto LABEL_644;
                        }
                      }
                    }
                    if ((_DWORD)v17 != 2 && a10 && *(_QWORD *)(v27 + 1104) == v35)
                      *(_DWORD *)(v27 + 2192) = a10;
                  }
                  if ((v74 & 1) != 0)
                  {
                    v92 = CMBaseObjectGetDerivedStorage();
                    v93 = v337;
                    if (dword_1EE2A2A88)
                    {
                      LODWORD(v355.value) = 0;
                      LOBYTE(type.value) = 0;
                      v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v95 = v355.value;
                      if (os_log_type_enabled(v94, type.value))
                        v96 = v95;
                      else
                        v96 = v95 & 0xFFFFFFFE;
                      if (v96)
                      {
                        v97 = *(_QWORD *)v92;
                        if (*(_QWORD *)v92)
                          v98 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                        else
                          v98 = "";
                        if (v25)
                          v100 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                        else
                          v100 = "";
                        LODWORD(rhs.value) = 136316930;
                        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_StartNewDiscontinuity";
                        LOWORD(rhs.flags) = 2048;
                        *(_QWORD *)((char *)&rhs.flags + 2) = v97;
                        HIWORD(rhs.epoch) = 2082;
                        v357 = (uint64_t)v98;
                        *(_WORD *)v358 = 2048;
                        *(_QWORD *)&v358[2] = v25;
                        v359 = 2082;
                        v360 = v100;
                        v361 = 2048;
                        *(_QWORD *)v362 = a11;
                        *(_WORD *)&v362[8] = 1024;
                        v93 = v337;
                        *(_DWORD *)&v362[10] = v337;
                        *(_WORD *)&v362[14] = 1024;
                        *(_DWORD *)&v362[16] = v330;
                        _os_log_send_and_compose_impl();
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      a4 = v318;
                      v35 = v319;
                    }
                    fpfs_EndCurrentDiscontinuity(v25, v93, v330, 0);
                    v101 = MEMORY[0x1E0CA2E18];
                    v102 = *MEMORY[0x1E0CA2E18];
                    *(_OWORD *)(v92 + 1512) = *MEMORY[0x1E0CA2E18];
                    v103 = *(_QWORD *)(v101 + 16);
                    *(_QWORD *)(v92 + 1528) = v103;
                    v104 = v92 + 24 * v35;
                    *(_QWORD *)(v104 + 264) = v103;
                    *(_OWORD *)(v104 + 248) = v102;
                    *(_QWORD *)(v92 + 24 * v323 + 8 * v35 + 1120) = a11;
                    CMBufferQueueReset(*(CMBufferQueueRef *)(v92 + 848));
                    if (*(_QWORD *)(v92 + 16 * v35 + 8 * v323 + 992))
                      StoreCurrentManifold(v92, v93, v330, 0);
                    v105 = *(_QWORD *)(v92 + 1040);
                    v55 = v330;
                    if (v105)
                    {
                      do
                      {
                        v106 = *(_QWORD *)(v105 + 8);
                        if (v106)
                          v107 = *(_QWORD *)(v106 + 16);
                        else
                          v107 = -1;
                        v108 = *(unsigned __int8 *)(v105 + 180);
                        if (*(_QWORD *)(v105 + 48) == *(_QWORD *)(v92 + 16 * v108 + 1000)
                          && (_DWORD)v108 == v337
                          && *(_QWORD *)(v105 + 64) < a11)
                        {
                          fpfs_DeleteTrack(v25);
                          v55 = v330;
                        }
                        if ((v107 & 0x8000000000000000) == 0)
                        {
                          v110 = *(_QWORD *)(v92 + 1040);
                          if (!v110)
                            break;
                          v106 = *(_QWORD *)(v92 + 1040);
                          do
                          {
                            if (*(_QWORD *)(v106 + 16) == v107)
                              goto LABEL_241;
                            v106 = *(_QWORD *)(v106 + 8);
                          }
                          while (v106);
                          v106 = *(_QWORD *)(v92 + 1040);
                        }
                        if (!v106)
                          break;
                        v110 = *(_QWORD *)(v92 + 1040);
LABEL_241:
                        v105 = v106;
                      }
                      while (v110);
                    }
                  }
LABEL_242:
                  v17 = v337;
                  DerivedStorage = v335;
                  if (!*(_BYTE *)(v27 + 592) && v337 != 2 && (v327->flags & 0x1D) == 1)
                  {
                    if (dword_1EE2A2A88)
                    {
                      LODWORD(v355.value) = 0;
                      LOBYTE(type.value) = 0;
                      v111 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v112 = v355.value;
                      if (os_log_type_enabled(v111, type.value))
                        v113 = v112;
                      else
                        v113 = v112 & 0xFFFFFFFE;
                      if (v113)
                      {
                        v114 = v352;
                        if (v352)
                          v115 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                        else
                          v115 = "";
                        v116 = v353;
                        if (v353)
                          v117 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                        else
                          v117 = "";
                        lhs = *v327;
                        v118 = CMTimeGetSeconds(&lhs);
                        LODWORD(rhs.value) = 136316418;
                        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                        LOWORD(rhs.flags) = 2048;
                        *(_QWORD *)((char *)&rhs.flags + 2) = v114;
                        HIWORD(rhs.epoch) = 2082;
                        v357 = (uint64_t)v115;
                        *(_WORD *)v358 = 2048;
                        *(_QWORD *)&v358[2] = v116;
                        v359 = 2082;
                        v360 = v117;
                        v361 = 2048;
                        *(Float64 *)v362 = v118;
                        _os_log_send_and_compose_impl();
                        v17 = v337;
                        v27 = v336;
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      a4 = v318;
                      DerivedStorage = v335;
                      v35 = v319;
                    }
                    v119 = *(OpaqueCMTimebase **)(v27 + 576);
                    lhs = *v327;
                    CMTimebaseSetTime(v119, &lhs);
                    v120 = v352;
                    v121 = v353;
                    lhs = *v327;
                    rhs = *(CMTime *)(v27 + 1176);
                    CMTimeSubtract(&v348, &lhs, &rhs);
                    fpfs_CancelSeekIfNeeded(v120, v121);
                    *(_BYTE *)(v27 + 592) = 1;
                    v55 = v330;
                  }
                  v122 = theBuffer;
                  if (!(_DWORD)v55 && (v327->flags & 0x1D) == 1)
                  {
                    if ((a4 & 8) != 0 && (_DWORD)v17 != 2 && a10)
                    {
                      memset(&v355, 0, sizeof(v355));
                      v123 = (CMTime *)(v27 + 1176);
                      lhs = *v327;
                      rhs = *(CMTime *)(v27 + 1176);
                      CMTimeSubtract(&v355, &lhs, &rhs);
                      lhs = v355;
                      v324 = *MEMORY[0x1E0CA2E68];
                      *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E68];
                      v124 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
                      rhs.epoch = v124;
                      if (CMTimeCompare(&lhs, &rhs) < 0)
                      {
                        *(_OWORD *)&v355.value = v324;
                        v355.epoch = v124;
                      }
                      DerivedStorage = v335;
                      if ((*(_BYTE *)(v27 + 332) & 1) == 0)
                        goto LABEL_268;
                      lhs = *(CMTime *)(v27 + 320);
                      rhs = v355;
                      CMTimeSubtract(&v346, &lhs, &rhs);
                      CMTimeAbsoluteValue(&time1, &v346);
                      CMTimeMake(&time2, 1, 1);
                      if (CMTimeCompare(&time1, &time2) >= 1 && (*(_DWORD *)(v27 + 392) & 0xF) != 5)
                      {
                        if ((*(_BYTE *)(v27 + 356) & 1) == 0
                          || (lhs = v355, rhs = *(CMTime *)(v27 + 344), (CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0))
                        {
                          if ((*(_BYTE *)(v27 + 380) & 1) == 0
                            || (lhs = v355, rhs = *(CMTime *)(v27 + 368), CMTimeCompare(&lhs, &rhs) <= 0))
                          {
LABEL_268:
                            if (dword_1EE2A2A88)
                            {
                              LODWORD(type.value) = 0;
                              LOBYTE(v343.value) = 0;
                              v125 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              v126 = type.value;
                              if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
                                v127 = v126;
                              else
                                v127 = v126 & 0xFFFFFFFE;
                              if (v127)
                              {
                                v128 = v352;
                                if (v352)
                                  v129 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                                else
                                  v129 = "";
                                v325 = v129;
                                v130 = v353;
                                v310 = a7;
                                if (v353)
                                  v131 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                                else
                                  v131 = "";
                                v27 = v336;
                                if ((*(_DWORD *)(v336 + 332) & 1) != 0)
                                  v132 = "New time differs the seek request more than 1s.";
                                else
                                  v132 = "TimeJump while no seek request.";
                                lhs = v355;
                                v133 = CMTimeGetSeconds(&lhs);
                                lhs = *v123;
                                v134 = CMTimeGetSeconds(&lhs);
                                LODWORD(rhs.value) = 136316930;
                                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                                LOWORD(rhs.flags) = 2048;
                                *(_QWORD *)((char *)&rhs.flags + 2) = v128;
                                HIWORD(rhs.epoch) = 2082;
                                v357 = (uint64_t)v325;
                                *(_WORD *)v358 = 2048;
                                *(_QWORD *)&v358[2] = v130;
                                v359 = 2082;
                                v360 = v131;
                                v361 = 2082;
                                *(_QWORD *)v362 = v132;
                                *(_WORD *)&v362[8] = 2048;
                                *(Float64 *)&v362[10] = v133;
                                *(_WORD *)&v362[18] = 2048;
                                *(Float64 *)&v362[20] = v134;
                                _os_log_send_and_compose_impl();
                                a4 = v318;
                                DerivedStorage = v335;
                                a7 = v310;
                              }
                              fig_log_call_emit_and_clean_up_after_send_and_compose();
                              v17 = v337;
                              v35 = v319;
                              v122 = theBuffer;
                            }
                            lhs = v355;
                            fpfsi_setLastSeekTimeSet(v27, (uint64_t)&lhs);
                          }
                        }
                      }
                      v135 = v353;
                      fpfs_GetNextTimeToPlay(v27, 0, (uint64_t)&v344);
                      fpfsi_PrepareToStartWhenLikelyToKeepUp((uint64_t)v135, &v344);
                    }
                    if ((a4 & 0x4000) != 0
                      && *(_QWORD *)(v27 + 1104) == v35
                      && (*(_BYTE *)(v27 + 465) || *(_BYTE *)(v27 + 593) && *(_BYTE *)(v27 + 553)))
                    {
                      v136 = MEMORY[0x1E0CA2E68];
                      *(_OWORD *)(v27 + 408) = *MEMORY[0x1E0CA2E68];
                      *(_QWORD *)(v27 + 424) = *(_QWORD *)(v136 + 16);
                    }
                    v137 = *(_OWORD *)&v327->value;
                    v138 = v27 + 24 * v35;
                    *(_QWORD *)(v138 + 1216) = v327->epoch;
                    *(_OWORD *)(v138 + 1200) = v137;
                    memset(&lhs, 0, sizeof(lhs));
                    fpfs_GetTime(v27, (uint64_t)&lhs);
                    v55 = v330;
                  }
                  if (v122)
                  {
                    DataLength = CMBlockBufferGetDataLength(v122);
                    v55 = v330;
                    v326 = DataLength;
                  }
                  else
                  {
                    v326 = 0;
                  }
                  updated = fpfs_UpdateSubStreamRoleInPumpFunc(v27, v322, v17, v55);
                  v141 = updated;
                  v142 = v27 + 16 * v35 + 8 * updated;
                  if (*(_QWORD *)(v142 + 992))
                  {
                    if (v122 || a4)
                    {
                      v143 = (a4 >> 6) & 4 | ((a4 & 0x10) >> 4) | (a4 >> 5) & 2;
                      if (v122 || (_DWORD)v143)
                      {
                        v164 = (uint64_t *)(v142 + 992);
                        v165 = *(_QWORD *)(v27 + 1040);
                        if (v165)
                        {
                          while (*(unsigned __int8 *)(v165 + 180) != (_DWORD)v17
                               || *(_QWORD *)(v165 + 48) != *(_QWORD *)(v27 + 16 * v35 + 992))
                          {
                            v165 = *(_QWORD *)(v165 + 8);
                            if (!v165)
                              goto LABEL_412;
                          }
                          if ((a4 & 0x8100) == 0x100)
                            *(_BYTE *)(v165 + 188) = 0;
                        }
LABEL_412:
                        v206 = updated;
                        fpfs_prepareDataForInject(v122);
                        v207 = v122;
                        v208 = *v164;
                        v209 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                        if (v209)
                        {
                          Code = v209(v208, a7, v143, v207);
                          v210 = fpfs_UpdateSubStreamRoleInPumpFunc(v27, v322, v17, v206);
                          DerivedStorage = v335;
                          if (!(_DWORD)Code)
                          {
                            v141 = v210;
                            goto LABEL_307;
                          }
                        }
                        else
                        {
                          LODWORD(v210) = fpfs_UpdateSubStreamRoleInPumpFunc(v27, v322, v17, v206);
                          Code = 4294954514;
                        }
                        v40 = v326;
                        v211 = v210;
                        if (*(_QWORD *)(v27 + 16 * v35 + 8 * v210 + 992))
                        {
                          LODWORD(v355.value) = 0;
                          LOBYTE(type.value) = 0;
                          v212 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          v213 = v355.value;
                          if (os_log_type_enabled(v212, type.value))
                            v214 = v213;
                          else
                            v214 = v213 & 0xFFFFFFFE;
                          if (v214)
                          {
                            v215 = v352;
                            if (v352)
                              v17 = CMBaseObjectGetDerivedStorage() + 824;
                            else
                              v17 = (uint64_t)"";
                            v228 = v353;
                            if (v353)
                              v229 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                            else
                              v229 = "";
                            LODWORD(rhs.value) = 136316930;
                            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                            LOWORD(rhs.flags) = 2048;
                            *(_QWORD *)((char *)&rhs.flags + 2) = v215;
                            HIWORD(rhs.epoch) = 2082;
                            v357 = v17;
                            *(_WORD *)v358 = 2048;
                            *(_QWORD *)&v358[2] = v228;
                            v359 = 2082;
                            v360 = v229;
                            v361 = 1024;
                            *(_DWORD *)v362 = Code;
                            *(_WORD *)&v362[4] = 1024;
                            LODWORD(v17) = v337;
                            *(_DWORD *)&v362[6] = v337;
                            *(_WORD *)&v362[10] = 1024;
                            *(_DWORD *)&v362[12] = v211;
                            _os_log_send_and_compose_impl();
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          LOBYTE(a4) = v318;
                          DerivedStorage = v335;
                          goto LABEL_452;
                        }
                        if (dword_1EE2A2A88)
                        {
                          LODWORD(v355.value) = 0;
                          LOBYTE(type.value) = 0;
                          v216 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          v217 = v355.value;
                          if (os_log_type_enabled(v216, type.value))
                            v218 = v217;
                          else
                            v218 = v217 & 0xFFFFFFFE;
                          if (v218)
                          {
                            v219 = v352;
                            if (v352)
                              v17 = CMBaseObjectGetDerivedStorage() + 824;
                            else
                              v17 = (uint64_t)"";
                            v291 = v353;
                            if (v353)
                              v292 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                            else
                              v292 = "";
                            LODWORD(rhs.value) = 136316930;
                            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                            LOWORD(rhs.flags) = 2048;
                            *(_QWORD *)((char *)&rhs.flags + 2) = v219;
                            HIWORD(rhs.epoch) = 2082;
                            v357 = v17;
                            *(_WORD *)v358 = 2048;
                            *(_QWORD *)&v358[2] = v291;
                            v359 = 2082;
                            v360 = v292;
                            v361 = 1024;
                            *(_DWORD *)v362 = Code;
                            *(_WORD *)&v362[4] = 1024;
                            LODWORD(v17) = v337;
                            *(_DWORD *)&v362[6] = v337;
                            *(_WORD *)&v362[10] = 1024;
                            *(_DWORD *)&v362[12] = v211;
                            _os_log_send_and_compose_impl();
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          LODWORD(Code) = 0;
                          LOBYTE(a4) = v318;
                          v40 = v326;
                        }
                        else
                        {
                          LODWORD(Code) = 0;
                        }
                        goto LABEL_645;
                      }
                    }
LABEL_307:
                    v144 = v353;
                    v338 = v352;
                    v145 = CMBaseObjectGetDerivedStorage();
                    v146 = v145;
                    v147 = *(_QWORD *)(v145 + 1040);
                    if (v147)
                    {
                      while (*(unsigned __int8 *)(v147 + 180) != (_DWORD)v17
                           || *(_QWORD *)(v147 + 48) != *(_QWORD *)(v145 + 16 * v35 + 992))
                      {
                        v147 = *(_QWORD *)(v147 + 8);
                        if (!v147)
                          goto LABEL_311;
                      }
                      v148 = 1;
                      if ((a4 & 0x8000) != 0)
                        *(_BYTE *)(v147 + 188) = 1;
                    }
                    else
                    {
LABEL_311:
                      v148 = 0;
                    }
                    v331 = v141;
                    if ((a4 & 0x840) == 0x40)
                    {
                      v149 = v148 ^ 1;
                      if (*(_QWORD *)(v145 + 1104) != v35)
                        v149 = 1;
                      if ((v149 & 1) == 0 && !*(_BYTE *)(v147 + 188))
                      {
                        if (dword_1EE2A2A88)
                        {
                          LODWORD(v355.value) = 0;
                          LOBYTE(type.value) = 0;
                          v150 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          v151 = v355.value;
                          if (os_log_type_enabled(v150, type.value))
                            v152 = v151;
                          else
                            v152 = v151 & 0xFFFFFFFE;
                          if (v152)
                          {
                            if (v338)
                              v153 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                            else
                              v153 = "";
                            if (v144)
                              v230 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                            else
                              v230 = "";
                            LODWORD(rhs.value) = 136316418;
                            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfsi_checkIfActiveSubstreamSegmentProduceSample";
                            LOWORD(rhs.flags) = 2048;
                            *(_QWORD *)((char *)&rhs.flags + 2) = v338;
                            HIWORD(rhs.epoch) = 2082;
                            v357 = (uint64_t)v153;
                            *(_WORD *)v358 = 2048;
                            *(_QWORD *)&v358[2] = v144;
                            v359 = 2082;
                            v360 = v230;
                            v361 = 2114;
                            *(_QWORD *)v362 = a9;
                            _os_log_send_and_compose_impl();
                            v17 = v337;
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          a4 = v318;
                          DerivedStorage = v335;
                          v141 = v331;
                        }
                        v231 = *(_QWORD *)(v146 + 2536);
                        if (v231)
                        {
                          v232 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
                          if (v232)
                            v232(v231, CFSTR("playerStats"), CFSTR("MediaNoSamp"), 1);
                        }
                      }
                    }
                    if (theBuffer)
                    {
                      v233 = *(_QWORD *)(v27 + 1168);
                      if (!v233)
                        goto LABEL_482;
                      v234 = *(_QWORD *)(v27 + 1040);
                      if (!v234)
                        goto LABEL_482;
                      while (*(_QWORD *)(v234 + 16) != v233)
                      {
                        v234 = *(_QWORD *)(v234 + 8);
                        if (!v234)
                          goto LABEL_482;
                      }
                      v235 = *(_QWORD *)(v234 + 48) == *(_QWORD *)(v27 + 16 * *(unsigned __int8 *)(v234 + 180) + 1000)
                          && fpfs_IsTrialReadyToComplete(v27, v234);
                      if (!fpfs_CheckVideoSyncQueue(v234, v235)
                        || (v236 = fpfs_FinishVideoSync((const __CFArray **)v234), !(_DWORD)v236))
                      {
LABEL_482:
                        *(_QWORD *)(v27 + 1168) = 0;
                        DerivedStorage = v335;
                        v141 = v331;
                        goto LABEL_483;
                      }
                      Code = v236;
                      LODWORD(v355.value) = 0;
                      LOBYTE(type.value) = 0;
                      v304 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v305 = v355.value;
                      if (os_log_type_enabled(v304, type.value))
                        v306 = v305;
                      else
                        v306 = v305 & 0xFFFFFFFE;
                      if (v306)
                      {
                        LODWORD(rhs.value) = 136316162;
                        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                        LOWORD(rhs.flags) = 1024;
                        *(CMTimeFlags *)((char *)&rhs.flags + 2) = Code;
                        WORD1(rhs.epoch) = 1024;
                        HIDWORD(rhs.epoch) = v233;
                        LOWORD(v357) = 1024;
                        *(_DWORD *)((char *)&v357 + 2) = v337;
                        HIWORD(v357) = 1024;
                        *(_DWORD *)v358 = v331;
                        _os_log_send_and_compose_impl();
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      LODWORD(v17) = v337;
                      LOBYTE(a4) = v318;
                      DerivedStorage = v335;
                      v27 = v336;
LABEL_452:
                      v40 = v326;
LABEL_644:
                      fpfs_StopPlayingItemWithOSStatus(DerivedStorage, v353, Code);
LABEL_645:
                      if (v40)
                      {
                        v298 = *(_QWORD *)(v27 + 2536);
                        if (v298)
                        {
                          v299 = *(void (**)(uint64_t, __CFString *, __CFString *, size_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
                          if (v299)
                            v299(v298, CFSTR("playerStats"), CFSTR("PlayerBytesUsed"), v40);
                        }
                      }
LABEL_649:
                      if (!(_DWORD)Code && (a4 & 0x40) != 0 && (!(_DWORD)v17 || (*(_BYTE *)(v27 + 1088) & 1) == 0))
                      {
                        v300 = *(const void **)(v27 + 96);
                        if (v300)
                        {
                          CFRetain(v300);
                          fpfs_UnlockAndPostNotificationsWithCaller(v352);
                        }
                      }
LABEL_675:
                      fpfs_UnlockAndPostNotificationsWithCaller(v352);
                    }
LABEL_483:
                    if (v317)
                    {
                      v237 = *(_QWORD *)(v27 + 16 * v35 + 8 * v141 + 992);
                      if (v237)
                      {
                        v238 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
                        if (v238)
                          v238(v237);
                      }
                    }
                    if ((_DWORD)v17 != 2 && (a4 & 8) != 0)
                      fpfs_EnqueueNotification(v338, CFSTR("TimeJumped"), v144, 0);
                    memset(&lhs, 0, sizeof(lhs));
                    rhs = *(CMTime *)(v27 + 1320);
                    if (!fpfsi_GetDuration((uint64_t)v144, (__int128 *)&lhs.value))
                    {
                      v355 = rhs;
                      type = lhs;
                      if (CMTimeCompare(&v355, &type))
                      {
                        NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(v338, (uint64_t)v144, v246, v247, v248, v249, v250, v251, CFSTR("CurrentDuration"), 0);
                        fpfs_EnqueueNotification(v338, CFSTR("DurationChanged"), v144, NotificationPayloadForProperties);
                      }
                    }
                    if (theBuffer)
                    {
                      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
                      if ((a4 & 0x40) != 0 || UpTimeNanoseconds - *(_QWORD *)(v27 + 2336) >= 500000001)
                        fpfsi_EnqueuePlayableRangeChangedNotification(v144);
                    }
                    if ((a4 & 2) != 0)
                    {
                      fpfs_EndCurrentDiscontinuity((const __CFArray *)v144, v17, v141, 1);
                      if (*(_BYTE *)(v27 + 470))
                      {
                        memset(&lhs, 0, sizeof(lhs));
                        fpfsi_LastNonSparseSampleEnd((uint64_t)v144, (uint64_t)&lhs);
                        if ((lhs.flags & 1) != 0)
                        {
                          *(CMTime *)(v27 + 480) = lhs;
                          fpfsi_EnqueueEndTimeChangedNotification(v144);
                        }
                        if ((*(_BYTE *)(v27 + 332) & 1) != 0)
                        {
                          if (!*(_QWORD *)(v27 + 1040)
                            || (*(_BYTE *)(v27 + 1500) & 1) != 0
                            && (rhs = *(CMTime *)(v27 + 1488),
                                v355 = *(CMTime *)(v27 + 480),
                                CMTimeCompare(&rhs, &v355) > 0))
                          {
                            fpfs_StopPlayingItem(DerivedStorage, v144, 0);
LABEL_504:
                            LODWORD(Code) = 0;
                            goto LABEL_649;
                          }
                        }
                      }
                    }
                    fpfsi_TrimCachedSamplesFromItem((uint64_t)v144);
                    if ((a4 & 0x40) != 0)
                    {
                      lhs = *(CMTime *)(v27 + 1464);
                      if (fpfsi_PlaybackHasBufferedBeyondTime((uint64_t)v144, (uint64_t)&lhs))
                        fpfs_SignalImageQueueGaugeEnqueueingCompleteAfterClampTime();
                    }
                    v240 = *(_QWORD *)(v27 + 1592);
                    if (v240 && (*(_BYTE *)(v27 + 1500) & 1) == 0 && v316 && !*(_QWORD *)(v27 + 1584))
                    {
                      v355 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
                      LODWORD(type.value) = 0;
                      v241 = fpsi_TryDateSeekWithSeekID((uint64_t)v144, v240, (int *)&type, (uint64_t)&v355, *(unsigned int *)(v27 + 2192), *(unsigned int *)(v27 + 2216), 0);
                      if (dword_1EE2A2A88)
                      {
                        LODWORD(v343.value) = 0;
                        v376[0] = OS_LOG_TYPE_DEFAULT;
                        v242 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        v243 = v343.value;
                        if (os_log_type_enabled(v242, v376[0]))
                          v244 = v243;
                        else
                          v244 = v243 & 0xFFFFFFFE;
                        if (v244)
                        {
                          if (v338)
                            v245 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                          else
                            v245 = "";
                          v329 = v245;
                          if (v144)
                            v253 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                          else
                            v253 = "";
                          v27 = v336;
                          v254 = *(_QWORD *)(v336 + 1592);
                          if (v241)
                            v255 = "proceeding";
                          else
                            v255 = "failed";
                          lhs = v355;
                          v256 = CMTimeGetSeconds(&lhs);
                          lhs = *(CMTime *)(v336 + 1560);
                          v257 = CMTimeGetSeconds(&lhs);
                          LODWORD(rhs.value) = 136317442;
                          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                          LOWORD(rhs.flags) = 2048;
                          *(_QWORD *)((char *)&rhs.flags + 2) = v338;
                          HIWORD(rhs.epoch) = 2082;
                          v357 = (uint64_t)v329;
                          *(_WORD *)v358 = 2048;
                          *(_QWORD *)&v358[2] = v144;
                          v359 = 2082;
                          v360 = v253;
                          v361 = 2114;
                          *(_QWORD *)v362 = v254;
                          *(_WORD *)&v362[8] = 2080;
                          *(_QWORD *)&v362[10] = v255;
                          *(_WORD *)&v362[18] = 2048;
                          *(Float64 *)&v362[20] = v256;
                          *(_WORD *)&v362[28] = 2048;
                          v363 = v257;
                          v364 = 1024;
                          v365 = type.value;
                          _os_log_send_and_compose_impl();
                          LODWORD(v17) = v337;
                          DerivedStorage = v335;
                          v35 = v319;
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        a4 = v318;
                        LODWORD(v141) = v331;
                      }
                      if (!v241)
                      {
                        if (LODWORD(type.value))
                        {
                          v258 = *(_DWORD *)(v27 + 2192);
                          if (v258)
                            fpfs_SeekDidFail(v338, v144, v258, type.value);
                        }
                        v259 = *(const void **)(v27 + 1592);
                        if (v259)
                        {
                          CFRelease(v259);
                          *(_QWORD *)(v27 + 1592) = 0;
                        }
                      }
                    }
                    fpfs_CheckPrebufferedLevels(&v351, v144, 1, v35, 0);
                    if (!v317
                      || *(float *)(DerivedStorage + 108) == 0.0
                      || !*(_QWORD *)(v27 + 16 * v35 + 8 * v141 + 992)
                      || *(_BYTE *)(v27 + 1556))
                    {
                      goto LABEL_545;
                    }
                    memset(&v355, 0, sizeof(v355));
                    lhs = *(CMTime *)(v27 + 1200);
                    rhs = *(CMTime *)(v27 + 1176);
                    CMTimeSubtract(&v355, &lhs, &rhs);
                    memset(&type, 0, sizeof(type));
                    if ((v355.flags & 1) != 0)
                    {
                      type = v355;
                    }
                    else
                    {
                      fpfs_GetTime(v27, (uint64_t)&v342);
                      lhs = v351;
                      fpfs_TimeAfterPlayback(DerivedStorage, &v342, &lhs, &type);
                    }
                    if ((type.flags & 1) != 0)
                    {
                      if (dword_1EE2A2A88)
                      {
                        LODWORD(v343.value) = 0;
                        v376[0] = OS_LOG_TYPE_DEFAULT;
                        v283 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        v284 = v343.value;
                        if (os_log_type_enabled(v283, v376[0]))
                          v285 = v284;
                        else
                          v285 = v284 & 0xFFFFFFFE;
                        if (v285)
                        {
                          if (v338)
                            v17 = CMBaseObjectGetDerivedStorage() + 824;
                          else
                            v17 = (uint64_t)"";
                          if (v144)
                            v293 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                          else
                            v293 = "";
                          lhs = type;
                          v294 = CMTimeGetSeconds(&lhs);
                          lhs = v351;
                          v295 = CMTimeGetSeconds(&lhs);
                          LODWORD(rhs.value) = 136316674;
                          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                          LOWORD(rhs.flags) = 2048;
                          *(_QWORD *)((char *)&rhs.flags + 2) = v338;
                          HIWORD(rhs.epoch) = 2082;
                          v357 = v17;
                          *(_WORD *)v358 = 2048;
                          *(_QWORD *)&v358[2] = v144;
                          v359 = 2082;
                          v360 = v293;
                          v361 = 2048;
                          *(Float64 *)v362 = v294;
                          *(_WORD *)&v362[8] = 2048;
                          *(Float64 *)&v362[10] = v295;
                          _os_log_send_and_compose_impl();
                          LODWORD(v17) = v337;
                          v27 = v336;
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        a4 = v318;
                      }
                      lhs = type;
                      rhs = v351;
                      Code = fpfs_RequestNextIFrameStepUnlocked(v144, &lhs, &rhs);
                    }
                    else
                    {
LABEL_545:
                      Code = 0;
                    }
                    v260 = *(_QWORD *)(v27 + 96);
                    if (v260)
                    {
                      v261 = *(_DWORD *)(v27 + 1880);
                      v262 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 56);
                      if (v262)
                      {
                        if ((~a4 & 0xC0) == 0 || v261 == 1)
                          v264 = *MEMORY[0x1E0C9AE50];
                        else
                          v264 = *MEMORY[0x1E0C9AE40];
                        v262(v260, CFSTR("AfmfpbProperty_IsBufferFull"), v264);
                      }
                    }
                    if ((a4 & 0x40) != 0)
                    {
                      if (!*(_BYTE *)(v27 + 2120))
                      {
                        *(_BYTE *)(v27 + 2120) = 1;
                        fpfs_EnqueueNotification(v338, CFSTR("NewAccessLogEntry"), v144, 0);
                      }
                      if (dword_1EE2A2A88)
                      {
                        LODWORD(v355.value) = 0;
                        LOBYTE(type.value) = 0;
                        v265 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        v266 = v355.value;
                        if (os_log_type_enabled(v265, type.value))
                          v267 = v266;
                        else
                          v267 = v266 & 0xFFFFFFFE;
                        if (v267)
                        {
                          if (v338)
                            v268 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                          else
                            v268 = "";
                          if (v144)
                            v269 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                          else
                            v269 = "";
                          lhs = v351;
                          v270 = CMTimeGetSeconds(&lhs);
                          v27 = v336;
                          fpfs_GetTime(v336, (uint64_t)&v341);
                          v271 = CMTimeGetSeconds(&v341);
                          LODWORD(rhs.value) = 136316930;
                          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                          LOWORD(rhs.flags) = 2048;
                          *(_QWORD *)((char *)&rhs.flags + 2) = v338;
                          HIWORD(rhs.epoch) = 2082;
                          v357 = (uint64_t)v268;
                          *(_WORD *)v358 = 2048;
                          *(_QWORD *)&v358[2] = v144;
                          v359 = 2082;
                          v360 = v269;
                          v361 = 1024;
                          *(_DWORD *)v362 = v337;
                          *(_WORD *)&v362[4] = 2048;
                          *(Float64 *)&v362[6] = v270;
                          *(_WORD *)&v362[14] = 2048;
                          *(Float64 *)&v362[16] = v271;
                          _os_log_send_and_compose_impl();
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      if ((*(_BYTE *)(v27 + 1452) & 1) != 0)
                      {
                        if (*(_BYTE *)(v27 + 466))
                        {
                          if (GetCurrentManifold(v27, v337, v331))
                          {
                            CurrentManifold = GetCurrentManifold(v27, v337, v331);
                            v273 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
                            if (v273)
                              v273(CurrentManifold);
                          }
                        }
                      }
                      v274 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
                      if (v274)
                      {
                        v275 = (const __CFString *)*MEMORY[0x1E0CA2700];
                        v276 = (const void *)*MEMORY[0x1E0C9AE50];
                        do
                        {
                          if (!*(_BYTE *)(v274 + 182)
                            && *(unsigned __int8 *)(v274 + 180) == v337
                            && !*(_BYTE *)(v274 + 184))
                          {
                            lhs.value = 0;
                            v277 = (const __CFAllocator *)FigGetAllocatorForMedia();
                            if (!CMSampleBufferCreate(v277, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&lhs))
                            {
                              CMSetAttachment((CMAttachmentBearerRef)lhs.value, v275, v276, 0);
                              CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v274 + 80), (CMBufferRef)lhs.value);
                              CFRelease((CFTypeRef)lhs.value);
                            }
                          }
                          v274 = *(_QWORD *)(v274 + 8);
                        }
                        while (v274);
                      }
                      v27 = v336;
                      if ((*(_BYTE *)(v336 + 1452) & 1) != 0 && *(_BYTE *)(v336 + 466))
                      {
                        lhs = *(CMTime *)(v336 + 1440);
                        fpfsi_applyTimeToPausePlayback(v144, (__int128 *)&lhs.value, 1, 1);
                      }
                      fpfsi_RTCReportingUpdateItemStats((uint64_t)v144);
                      LODWORD(v17) = v337;
                      LOBYTE(a4) = v318;
                      if (*(_QWORD *)(v336 + 1752))
                      {
                        v278 = *(_QWORD *)(v336 + 1040);
                        if (v278)
                        {
                          while (*(_DWORD *)(v278 + 32) != 1986618469
                               || *(_QWORD *)(v278 + 48) != *(_QWORD *)(v336
                                                                      + 16 * *(unsigned __int8 *)(v278 + 180)
                                                                      + 992)
                               || *(_DWORD *)(v278 + 152) != 6)
                          {
                            v278 = *(_QWORD *)(v278 + 8);
                            if (!v278)
                              goto LABEL_594;
                          }
                          SwitchOptions = GetSwitchOptions(v336, 0);
                          memset(&type, 0, sizeof(type));
                          memset(&v343, 0, sizeof(v343));
                          fpfs_GetNextTimeToPlay(v336, 0, (uint64_t)&v340);
                          lhs = *(CMTime *)(v336 + 1176);
                          CMTimeAdd(&v343, &v340, &lhs);
                          if (dword_1EE2A2A88)
                          {
                            theBuffera = SwitchOptions;
                            LODWORD(v355.value) = 0;
                            v376[0] = OS_LOG_TYPE_DEFAULT;
                            v287 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            v288 = v355.value;
                            if (os_log_type_enabled(v287, v376[0]))
                              v289 = v288;
                            else
                              v289 = v288 & 0xFFFFFFFE;
                            if (v289)
                            {
                              if (v338)
                                v290 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                              else
                                v290 = "";
                              if (v144)
                                v301 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                              else
                                v301 = "";
                              LODWORD(rhs.value) = 136316162;
                              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                              LOWORD(rhs.flags) = 2048;
                              *(_QWORD *)((char *)&rhs.flags + 2) = v338;
                              HIWORD(rhs.epoch) = 2082;
                              v357 = (uint64_t)v290;
                              *(_WORD *)v358 = 2048;
                              *(_QWORD *)&v358[2] = v144;
                              v359 = 2082;
                              v360 = v301;
                              _os_log_send_and_compose_impl();
                              v27 = v336;
                            }
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                            LODWORD(v17) = v337;
                            LOBYTE(a4) = v318;
                            SwitchOptions = theBuffera;
                          }
                          fpfs_GetItemBufferedDuration(v144, &type, &lhs, 0);
                          v302 = *(_QWORD *)(v27 + 1752);
                          rhs = v343;
                          v355 = type;
                          if (!fpfs_SetAlternateWithContext(v338, v144, v302, SwitchOptions))
                          {
                            v303 = *(const void **)(v27 + 1752);
                            if (v303)
                            {
                              CFRelease(v303);
                              *(_QWORD *)(v27 + 1752) = 0;
                            }
                          }
                        }
                      }
LABEL_594:
                      if (a13)
                      {
                        fpfs_GetTime(v27, (uint64_t)&v339);
                        rhs = *(CMTime *)(v27 + 1176);
                        CMTimeAdd(&lhs, &v339, &rhs);
                        *a13 = lhs;
                      }
                    }
                    fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(v144);
                    DerivedStorage = v335;
LABEL_597:
                    if (err)
                    {
                      v279 = v353;
                      v280 = CMBaseObjectGetDerivedStorage();
                      v281 = CMBaseObjectGetDerivedStorage();
                      memset(&lhs, 0, sizeof(lhs));
                      fpfs_GetItemBufferedDuration(v279, &lhs, 0, 0);
                      if (*(float *)(v280 + 840) == 0.0 || (rhs = lhs, CMTimeGetSeconds(&rhs) <= 0.0))
                      {
                        fpfs_StopPlayingItem(v281, v279, err);
                        v40 = v326;
                      }
                      else
                      {
                        v282 = *(const void **)(v280 + 504);
                        *(_QWORD *)(v280 + 504) = err;
                        CFRetain(err);
                        v40 = v326;
                        if (v282)
                          CFRelease(v282);
                      }
                      LODWORD(Code) = 0;
                      goto LABEL_645;
                    }
LABEL_642:
                    v40 = v326;
LABEL_643:
                    if ((_DWORD)Code)
                      goto LABEL_644;
                    goto LABEL_645;
                  }
                  if (!v122)
                  {
                    if ((a4 & 2) == 0 || *(_QWORD *)(v27 + 1104) != v35)
                      goto LABEL_307;
                    lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
                    v166 = v353;
                    fpfs_GetItemBufferedDuration(v353, &lhs, 0, 0);
                    rhs = lhs;
                    v355 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                    v167 = CMTimeCompare(&rhs, &v355);
                    v168 = *(unsigned int *)(DerivedStorage + 632);
                    v169 = DerivedStorage;
                    v170 = *(_QWORD *)(DerivedStorage + 80);
                    Count = CFArrayGetCount(*(CFArrayRef *)(v169 + 72));
                    if (v170)
                      v172 = Count + 1;
                    else
                      v172 = Count;
                    if (FigPlaybackGetEffectiveActionAtEnd(v168, v172) || v167 >= 1)
                    {
                      DerivedStorage = v335;
                      v35 = v319;
                      goto LABEL_307;
                    }
                    fpfs_StopPlayingItemWithOSStatus(v335, v166, 0);
                    goto LABEL_504;
                  }
                  v311 = a4 & 0x10;
                  v154 = (CMTime *)v27;
                  v155 = MEMORY[0x1E0CA2E18];
                  v156 = *MEMORY[0x1E0CA2E18];
                  v332 = updated;
                  v157 = updated;
                  v370 = v156;
                  v158 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
                  v371 = v158;
                  v368 = v156;
                  v369 = v158;
                  memset(&v343, 0, sizeof(v343));
                  lhs = *v327;
                  rhs = v154[49];
                  CMTimeSubtract(&v343, &lhs, &rhs);
                  v159 = (uint64_t)&v154[v157] + 8 * v35;
                  v162 = *(OpaqueCMBlockBuffer **)(v159 + 176);
                  v161 = (const void **)(v159 + 176);
                  v160 = v162;
                  v328 = v161;
                  if (v162)
                  {
                    if (CMBlockBufferGetDataLength(theBuffer))
                    {
                      appended = CMBlockBufferAppendBufferReference(v160, theBuffer, 0, 0, 0);
                      if ((_DWORD)appended)
                      {
                        Code = appended;
                        LODWORD(v17) = v337;
                        LOBYTE(a4) = v318;
                        v27 = v336;
LABEL_641:
                        DerivedStorage = v335;
                        goto LABEL_642;
                      }
                    }
                  }
                  else
                  {
                    *v161 = CFRetain(theBuffer);
                  }
                  v173 = 0;
                  v321 = (uint64_t *)(v320 + 1000);
                  v366 = v343.value;
                  timescale = v343.timescale;
                  v174 = v343.epoch;
                  *(_QWORD *)v376 = v343.value;
                  v377 = v343.timescale;
                  v374 = v156;
                  v375 = v158;
                  v175 = *(unsigned int *)(v155 + 12);
                  lhs.value = v336 + 1040;
                  *(_QWORD *)&lhs.timescale = v336 + 1056;
                  lhs.epoch = v336 + 1072;
                  v313 = v343.epoch;
                  flags = v343.flags;
                  v176 = v343.flags;
                  v177 = *(_QWORD *)(v155 + 16);
                  do
                  {
                    v178 = **((_QWORD **)&lhs.value + v173);
                    if (v178)
                    {
                      v179 = v177;
                      v180 = v175;
                      do
                      {
                        if (*(_QWORD *)(v178 + 64) != a11)
                          goto LABEL_359;
                        v355 = *(CMTime *)(v178 + 216);
                        type = *(CMTime *)(v178 + 128);
                        CMTimeSubtract(&rhs, &v355, &type);
                        v372 = rhs.value;
                        v175 = rhs.flags;
                        v373 = rhs.timescale;
                        if ((rhs.flags & 0x1D) != 1)
                          goto LABEL_359;
                        v177 = rhs.epoch;
                        if ((v176 & 1) == 0
                          || (rhs.value = v372,
                              rhs.timescale = v373,
                              v355.value = *(_QWORD *)v376,
                              v355.timescale = v377,
                              v355.flags = v176,
                              v355.epoch = v174,
                              CMTimeCompare(&rhs, &v355) >= 1))
                        {
                          *(_QWORD *)v376 = v372;
                          v377 = v373;
                          v176 = v175;
                          v174 = v177;
                        }
                        v181 = *(_DWORD *)(v178 + 32);
                        if (v181 != 1986618469 && v181 != 1936684398)
                          goto LABEL_359;
                        if ((v180 & 1) != 0)
                        {
                          rhs.value = v372;
                          rhs.timescale = v373;
                          rhs.flags = v175;
                          rhs.epoch = v177;
                          v355.value = v374;
                          v355.timescale = v375;
                          v355.flags = v180;
                          v355.epoch = v179;
                          if (CMTimeCompare(&rhs, &v355) < 1)
                            goto LABEL_359;
                        }
                        if (*(unsigned __int8 *)(v178 + 180) == v337)
                        {
                          v374 = v372;
                          v375 = v373;
                        }
                        else
                        {
LABEL_359:
                          v175 = v180;
                          v177 = v179;
                        }
                        v178 = *(_QWORD *)(v178 + 8);
                        v179 = v177;
                        v180 = v175;
                      }
                      while (v178);
                    }
                    v182 = v175 & 0x1D;
                    v183 = (v176 & 0x1D) == 1;
                    if ((v176 & 0x1D) == 1 && v182 == 1)
                    {
                      v183 = 1;
                      goto LABEL_367;
                    }
                    ++v173;
                  }
                  while (v173 != 3);
                  if (v182 != 1)
                  {
                    v374 = v366;
                    v375 = timescale;
                    LODWORD(v175) = flags;
                    v177 = v313;
                  }
LABEL_367:
                  v370 = *(_QWORD *)v376;
                  v371 = v377;
                  v368 = v374;
                  v369 = v375;
                  v184 = v353;
                  v185 = (OpaqueCMBlockBuffer *)*v328;
                  v186 = (_QWORD *)CMBaseObjectGetDerivedStorage();
                  rhs.value = 0;
                  v355.value = 0;
                  ArrayValue = (const __CFArray *)v186[50];
                  if (ArrayValue)
                    ArrayValue = (const __CFArray *)FigCFDictionaryGetArrayValue();
                  lhs.value = v368;
                  lhs.timescale = v369;
                  lhs.flags = v175;
                  lhs.epoch = v177;
                  Code = FigManifoldFactoryCreateManifold(0, v185, 1u, &lhs, v337 == 1, (uint64_t)fpfs_NewTrackNote, (uint64_t)fpfs_MPEG2ManifoldErrorCallback, 0, ArrayValue, 31, (uint64_t)v184, &rhs);
                  v188 = (const void *)rhs.value;
                  if ((_DWORD)Code)
                  {
                    a4 = v318;
                    v27 = v336;
                    v35 = v319;
                    v40 = v326;
                  }
                  else
                  {
                    a4 = v318;
                    v35 = v319;
                    v40 = v326;
                    if (rhs.value)
                    {
                      v189 = !v183;
                      v27 = v336;
                      if (!v189)
                      {
                        v190 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                        lhs.value = v370;
                        lhs.timescale = v371;
                        lhs.flags = v176;
                        lhs.epoch = v174;
                        v191 = CMTimeCopyAsDictionary(&lhs, v190);
                        v188 = (const void *)rhs.value;
                        if (v191)
                        {
                          v192 = v191;
                          v193 = *(void (**)(const void *, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                          if (v193)
                            v193(v188, CFSTR("FMFD_HintForStartTime"), v192);
                          CFRelease(v192);
                          v188 = (const void *)rhs.value;
                        }
                        v35 = v319;
                      }
                    }
                    else
                    {
                      v27 = v336;
                    }
                  }
                  if ((_DWORD)Code || !v188)
                    goto LABEL_384;
                  if (_os_feature_enabled_impl()
                    && !v186[423]
                    && (v194 = FigSampleAttachmentCollectionRulesCopyForManifold(*MEMORY[0x1E0C9AE00], 0, v186 + 423),
                        (_DWORD)v194))
                  {
                    v307 = v194;
                    FigSignalErrorAt();
                    Code = v307;
                    v17 = v337;
                    v35 = v319;
                    v40 = v326;
                  }
                  else
                  {
                    if (!v332)
                    {
                      v200 = rhs.value;
                      v201 = *(void (**)(CMTimeValue, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                      if (v201)
                      {
                        v201(v200, CFSTR("FMFD_Type"), *MEMORY[0x1E0C9AE00], &v355);
                        v202 = v355.value;
                        if (v337 || !v355.value)
                        {
                          if (v337 == 1)
                          {
                            if (v355.value)
                            {
                              v203 = v186[317];
                              if (v203)
                              {
                                v204 = *(void (**)(uint64_t, __CFString *, __CFString *, CMTimeValue, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                                if (v204)
                                {
                                  v205 = CFSTR("AuContentType");
LABEL_460:
                                  v204(v203, CFSTR("playerStats"), v205, v202, 0);
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          v203 = v186[317];
                          if (v203)
                          {
                            v204 = *(void (**)(uint64_t, __CFString *, __CFString *, CMTimeValue, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                            if (v204)
                            {
                              v205 = CFSTR("VidContentType");
                              goto LABEL_460;
                            }
                          }
                        }
                      }
                    }
                    StoreCurrentManifold((uint64_t)v186, v337, v332, (const void *)rhs.value);
                    v188 = (const void *)rhs.value;
                    v35 = v319;
                    v40 = v326;
LABEL_384:
                    if (v188)
                      CFRelease(v188);
                    if (v355.value)
                      CFRelease((CFTypeRef)v355.value);
                    v17 = v337;
                  }
                  if (v332)
                    v322 = *v321;
                  if ((_DWORD)Code != -16048 && (_DWORD)Code != -16044)
                  {
                    if (!(_DWORD)Code)
                    {
                      fpfs_prepareDataForInject(*v328);
                      v195 = GetCurrentManifold(v27, v17, v332);
                      v196 = *v328;
                      v197 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 8);
                      if (v197)
                        Code = v197(v195, 0, (a4 >> 6) & 4 | (v311 >> 4) | (a4 >> 5) & 2, v196);
                      else
                        Code = 4294954514;
                      v332 = fpfs_UpdateSubStreamRoleInPumpFunc(v27, v322, v17, v332);
                      v220 = v27 + 24 * v332 + 8 * v35;
                      v223 = *(const void **)(v220 + 176);
                      v222 = (_QWORD *)(v220 + 176);
                      v221 = v223;
                      v40 = v326;
                      if (v223)
                      {
                        CFRelease(v221);
                        *v222 = 0;
                      }
                      if (GetCurrentManifold(v27, v17, v332))
                      {
                        DerivedStorage = v335;
                        if ((_DWORD)Code)
                          goto LABEL_643;
                        goto LABEL_438;
                      }
                      if (dword_1EE2A2A88)
                      {
                        LODWORD(v355.value) = 0;
                        LOBYTE(type.value) = 0;
                        v224 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        v225 = v355.value;
                        if (os_log_type_enabled(v224, type.value))
                          v226 = v225;
                        else
                          v226 = v225 & 0xFFFFFFFE;
                        if (v226)
                        {
                          v227 = v352;
                          if (v352)
                            v17 = CMBaseObjectGetDerivedStorage() + 824;
                          else
                            v17 = (uint64_t)"";
                          v296 = v353;
                          if (v353)
                            v297 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                          else
                            v297 = "";
                          LODWORD(rhs.value) = 136316930;
                          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                          LOWORD(rhs.flags) = 2048;
                          *(_QWORD *)((char *)&rhs.flags + 2) = v227;
                          HIWORD(rhs.epoch) = 2082;
                          v357 = v17;
                          *(_WORD *)v358 = 2048;
                          *(_QWORD *)&v358[2] = v296;
                          v359 = 2082;
                          v360 = v297;
                          v361 = 1024;
                          *(_DWORD *)v362 = Code;
                          *(_WORD *)&v362[4] = 1024;
                          LODWORD(v17) = v337;
                          *(_DWORD *)&v362[6] = v337;
                          *(_WORD *)&v362[10] = 1024;
                          *(_DWORD *)&v362[12] = v332;
                          _os_log_send_and_compose_impl();
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        Code = 0;
                        LOBYTE(a4) = v318;
                        goto LABEL_641;
                      }
                      Code = 0;
                    }
                    DerivedStorage = v335;
                    goto LABEL_643;
                  }
                  v198 = CMBlockBufferGetDataLength((CMBlockBufferRef)*v328);
                  v199 = 0x20000;
                  if ((_DWORD)Code == -16048)
                    v199 = 0x200000;
                  DerivedStorage = v335;
                  if (v198 > v199)
                    goto LABEL_643;
LABEL_438:
                  v141 = v332;
                  goto LABEL_307;
                }
              }
            }
          }
          else
          {
            IsEmpty = CMBlockBufferIsEmpty(theBuffer);
            v55 = v330;
            v57 = v312;
            if (IsEmpty != 1)
              v57 = 0;
            if (!v57)
              goto LABEL_97;
          }
          v58 = *(_DWORD *)(v27 + 2196);
          if (!v58)
          {
LABEL_97:
            Code = 0;
            goto LABEL_98;
          }
          fpfs_SeekDidFail(v23, v25, v58, 0);
LABEL_96:
          v55 = v330;
          goto LABEL_97;
        }
        v40 = 0;
      }
      else
      {
        v40 = 0;
        LOBYTE(a4) = v29;
      }
      DerivedStorage = v335;
      goto LABEL_644;
    }
    if (v353)
      CFRelease(v353);
    if (v352)
      CFRelease(v352);
  }
}

void fpfsi_DateMappingCallback(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v8;
  CFTypeRef v9;
  uint64_t DerivedStorage;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef cf;
  CFTypeRef v27;

  v27 = 0;
  v25 = 0;
  cf = 0;
  v8 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v27, &cf);
  v9 = cf;
  if (!v8)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v11 = v27;
    v12 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(DerivedStorage + 928))
    {
      v13 = v12;
      v14 = *(_QWORD *)(DerivedStorage + 1608);
      if (!a3)
        fpfsi_RemoveDateEntryQueue(DerivedStorage, 1);
      if (a4 < 1)
      {
LABEL_9:
        if (!v14)
          fpfsi_UpdateTaggedRangeMetadataFromPumpAndNotifyIfNeeded(v11, v9, 0, 1);
      }
      else
      {
        v15 = DerivedStorage + 1176;
        v16 = (uint64_t *)(a5 + 32);
        v17 = (__int128 *)MEMORY[0x1E0CA2E18];
        while (1)
        {
          v18 = (const void *)*(v16 - 1);
          v19 = *v16;
          v23 = *((_OWORD *)v16 - 2);
          v24 = *(v16 - 2);
          v21 = *(_OWORD *)v15;
          v22 = *(_QWORD *)(v15 + 16);
          v20 = fpfsi_AddDateToQueue((uint64_t)v9, v18, (uint64_t)&v23, &v21, v17, (uint64_t)v17, v19, &v25, 0);
          if ((_DWORD)v20)
            break;
          v16 += 5;
          if (!--a4)
            goto LABEL_9;
        }
        fpfs_StopPlayingItemWithOSStatus(v13, v9, v20);
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v11);
  }
  if (cf)
    CFRelease(cf);
  if (v27)
    CFRelease(v27);
}

void fpfsi_RTCReportingReportIRATEventIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t AllocatorForMedia;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v11;
  unsigned int (*v12)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  v4 = *(_QWORD *)(a1 + 928);
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 2560);
    if ((_DWORD)a2 == 800)
      v6 = 1;
    else
      v6 = 2;
    if ((_DWORD)a2 == 800)
    {
      if (v5)
      {
        if (v5 == 1)
        {
LABEL_17:
          if (cf)
            CFRelease(cf);
          return;
        }
      }
      else
      {
        AllocatorForMedia = FigGetAllocatorForMedia();
        FigBytePumpGetFigBaseObject(v4);
        v9 = v8;
        v10 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
        if (!v10 || v10(v9, CFSTR("FBP_Duration"), AllocatorForMedia, &cf))
          goto LABEL_17;
      }
    }
    else if ((v5 & 0xFFFFFFFD) == 0)
    {
      goto LABEL_17;
    }
    v11 = *(_QWORD *)(a1 + 2536);
    if (v11)
    {
      v12 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
      if (v12)
      {
        if (!v12(v11, CFSTR("playerStats"), a2, 0, 0))
          *(_DWORD *)(a1 + 2560) = v6;
      }
    }
    goto LABEL_17;
  }
}

uint64_t fpfs_StopPlaybackByStalledTrack(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  __CFError *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  os_log_type_t type[16];
  uint64_t v14;
  CMTime lhs;
  CMTime time2;
  CMTime time1;
  CMTime number;
  CMTime valuePtr;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)DerivedStorage;
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = *(__CFError **)(DerivedStorage + 504);
  if (!v6)
    goto LABEL_6;
  if (FigCFErrorIsEqualToOSStatus(v6, (uint64_t)CFSTR("CoreMediaErrorDomain"), -12465))
  {
    v10 = 4294954433;
LABEL_14:
    fpfs_StopPlayingItem(v5, v2, *(_QWORD *)(DerivedStorage + 504));
    return v10;
  }
  v7 = CMBaseObjectGetDerivedStorage();
  memset(&number, 0, sizeof(number));
  memset(&valuePtr, 0, sizeof(valuePtr));
  fpfs_GetItemBufferedDuration(v2, &number, 0, 0);
  if (*(_QWORD *)(v7 + 504))
  {
    time1 = number;
    *(_OWORD *)&time2.value = kGaplessTransitionDeadlineInterval;
    time2.epoch = 0;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      fpfs_GetTime(v7, (uint64_t)&lhs);
      *(_OWORD *)&time1.value = kGaplessTransitionDeadlineInterval;
      time1.epoch = 0;
      CMTimeAdd(&valuePtr, &lhs, &time1);
      v8 = *(_QWORD *)(v7 + 2960) != 0;
      time1 = valuePtr;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
      *(_OWORD *)type = *MEMORY[0x1E0CA2E30];
      v14 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
      HIWORD(v12) = 257;
      BYTE1(v12) = v8;
      LOBYTE(v12) = 1;
      v9 = fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(v2, &time1, 0, &time2, type, 0, 0, 0, v12, 0, 0);
      if ((_DWORD)v9)
      {
        v10 = v9;
        goto LABEL_14;
      }
    }
  }
LABEL_6:
  if (!*(_BYTE *)(v5 + 160))
    fpfs_stopPlaybackForInternalReason(v4);
  fpfs_SetRateWithFadeInternal(v4, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0.0);
  if (!*(_BYTE *)(a1 + 184))
  {
    time2.value = 0;
    ++*(_QWORD *)(DerivedStorage + 2088);
    *(_BYTE *)(DerivedStorage + 464) = 0;
    *(CFAbsoluteTime *)(DerivedStorage + 2008) = CFAbsoluteTimeGetCurrent();
    fpfs_setUnlikelyToKeepUpAndRanDry(v2);
  }
  return 0;
}

void fpfsi_RemoveDateEntry(uint64_t a1, uint64_t *a2)
{
  const void *v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = (const void *)a2[2];
  if (v4)
    CFRelease(v4);
  v5 = *a2;
  v6 = (_QWORD *)a2[1];
  if (*a2)
  {
    *(_QWORD *)(v5 + 8) = v6;
    v6 = (_QWORD *)a2[1];
  }
  else
  {
    *(_QWORD *)(a1 + 1616) = v6;
  }
  *v6 = v5;
  free(a2);
}

uint64_t fpfsi_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  const void *v5;
  __int128 v7;
  uint64_t v8;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = (uint64_t)DerivedStorage;
    v5 = (const void *)*DerivedStorage;
    fpfs_LockMutexWithCaller(*DerivedStorage);
    if (FigRetainProxyIsInvalidated())
    {
      FigSignalErrorAt();
    }
    else
    {
      fpfs_GetNextTimeToPlay(v4, 0, (uint64_t)&v7);
      *(_OWORD *)a2 = v7;
      *(_QWORD *)(a2 + 16) = v8;
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
  }
  return FigSignalErrorAt();
}

void fpfs_stopPlaybackForInternalReason(const void *a1)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;

  CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetFloat32();
  fpfs_EnqueueNotification(a1, CFSTR("Remote_RateWillChangeTo"), a1, Mutable);
}

void sub_1929FC9FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *value, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  const void *v22;
  const void *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  const void *NotificationPayloadForProperties;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  *(_DWORD *)(v25 + 108) = 0;
  v35 = *MEMORY[0x1E0CA2E18];
  v36 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v33 = v35;
  v34 = v36;
  if (!fpfs_setRateInternal((uint64_t)v23, 0, (uint64_t)&v35, (uint64_t)&v33, 0.0))
  {
    if (v24)
    {
      NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(v23, 0, v26, v27, v28, v29, v30, v31, CFSTR("CurrentRate"), 0);
      FigCFDictionarySetInt32();
      fpfs_EnqueueNotification(v23, CFSTR("RateDidChange"), v23, NotificationPayloadForProperties);
    }
    fpfs_EnqueueNotification(v23, CFSTR("RateDidChange"), v23, 0);
  }
  if (v22)
    CFRelease(v22);
}

void sub_1929FCAD8()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1929FCAA8);
  JUMPOUT(0x1929FCAA0);
}

void fpfs_setUnlikelyToKeepUpAndRanDry(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_setPlaythroughPredictionAndNotify(a1, 2);
  fpfsi_setPlaybackMonitorOkayToAttemptSwitchUp(DerivedStorage, 0);
  fpfs_setRanDry(a1);
}

const __CFDictionary *fpfs_GetOptionsDictionaryForSelectedMediaType(uint64_t a1)
{
  uint64_t CFStringForOSTypeValue;
  const __CFDictionary *MediaTypeInMediaArray;
  const __CFDictionary *v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFDictionary *ValueAtIndex;

  CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(*(const __CFArray **)(a1 + 1784), CFStringForOSTypeValue, 0);
  if (!MediaTypeInMediaArray)
    return 0;
  CFDictionaryGetValue(MediaTypeInMediaArray, CFSTR("MediaSelectionOptionsPersistentID"));
  v4 = fpfs_FindMediaTypeInMediaArray(*(const __CFArray **)(a1 + 1688), CFStringForOSTypeValue, 0);
  if (!v4)
    return 0;
  Value = (const __CFArray *)CFDictionaryGetValue(v4, CFSTR("MediaSelectionGroupOptions"));
  if (!Value)
    return 0;
  v6 = Value;
  Count = CFArrayGetCount(Value);
  if (Count < 1)
    return 0;
  v8 = Count;
  v9 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
    if (FigCFEqual())
      break;
    if (v8 == ++v9)
      return 0;
  }
  return ValueAtIndex;
}

void fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(const __CFArray *a1, CMTime *a2, unsigned int a3, uint64_t a4, __int128 *a5, uint64_t a6, const void *a7, int a8, char a9, unsigned __int8 a10, char a11, char a12, char *a13, char a14)
{
  uint64_t DerivedStorage;
  const void *v19;
  char v20;
  int v21;
  CMTimeFlags flags;
  const void *v23;
  int v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, __int128 *, uint64_t, CMTime *, CMTime *);
  uint64_t v29;
  unsigned int (*v30)(uint64_t, __int128 *, uint64_t, CMTime *, CMTime *);
  int v31;
  __int128 *v32;
  CMTime *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  CMTimeEpoch v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  float v41;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v44;
  const char *v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, __int128 *, uint64_t, CMTime *, CMTime *);
  Float64 Seconds;
  const char *Description;
  CMTimeEpoch v50;
  int v51;
  int v52;
  uint64_t v53;
  int IsIFrameOnly;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t AllocatorForMedia;
  const void *ValueAtIndex;
  char v60;
  NSObject *v61;
  unsigned int v62;
  unsigned int v63;
  const void *v64;
  const char *v65;
  int v66;
  _BOOL4 v67;
  const char *v68;
  Float64 v69;
  unsigned int v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  __int128 v74;
  int32_t v75;
  const void *v76;
  const __CFAllocator *v77;
  const void *v78;
  double v79;
  uint64_t v80;
  CFTypeRef v81;
  void (*v82)(uint64_t, const __CFArray *, CFTypeRef);
  int v83;
  NSObject *v84;
  unsigned int v85;
  unsigned int v86;
  const char *v87;
  Float64 v88;
  Float64 v89;
  Float64 v90;
  const char *v91;
  Float64 v92;
  int v93;
  OpaqueCMTimebase *v94;
  uint64_t *v95;
  CMTimeFlags v96;
  char v97;
  CMTimeEpoch v98;
  NSObject *v99;
  unsigned int v100;
  unsigned int v101;
  const char *v102;
  NSObject *v103;
  unsigned int v104;
  unsigned int v105;
  const char *v106;
  const char *v107;
  CMTimeFlags v108;
  int v109;
  int v110;
  CMTimeEpoch v111;
  int v112;
  char v113;
  int v114;
  CMTimeFlags v115;
  CMTimeFlags v116;
  CMTimeEpoch v117;
  _BOOL4 v118;
  char v119;
  Float64 v120;
  int v121;
  __int128 v122;
  OpaqueCMTimebase *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  __int128 *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  NSObject *v133;
  unsigned int v134;
  unsigned int v135;
  const char *v136;
  uint64_t v137;
  CMTime *p_theArray;
  __int128 v139;
  CMTimeEpoch v140;
  const char *v141;
  const char *v142;
  float v143;
  const char *v144;
  const char *v145;
  char v146;
  const void *v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  _BOOL4 v152;
  _BOOL4 v155;
  __int16 v156;
  CMTimeEpoch epoch;
  uint64_t v158;
  __int128 v159;
  const __CFArray *v162;
  CMTime v163;
  CMTime v164;
  CMTime v165;
  CMTime lhs;
  CMTime v167;
  CMTime time;
  CMTime v169;
  CMTime v170;
  CMTime v171;
  CMTime type;
  CMTime theArray;
  CFTypeRef v174;
  CFTypeRef cf;
  CMTime v176;
  CMTime v177;
  CMTime v178;
  CMTime time2;
  const char *v180;
  __int16 v181;
  Float64 v182;
  __int16 v183;
  _BYTE v184[18];
  __int16 v185;
  Float64 v186;
  __int16 v187;
  Float64 v188;
  __int16 v189;
  const char *v190;
  __int16 v191;
  Float64 v192;
  __int16 v193;
  int v194;
  CMTime rhs;
  CMTimeValue v196;
  CMTimeScale timescale;
  __int128 time1;
  _QWORD time1_16[18];

  time1_16[15] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = *(const void **)DerivedStorage;
  v158 = CMBaseObjectGetDerivedStorage();
  memset(&v178, 0, sizeof(v178));
  v148 = *(_DWORD *)(DerivedStorage + 332);
  v20 = *(_BYTE *)(DerivedStorage + 530);
  v21 = (a3 >> 6) & 1;
  v177 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v159 = *(_OWORD *)&v177.value;
  v176 = v177;
  epoch = v177.epoch;
  v196 = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v174 = 0;
  cf = 0;
  v162 = a1;
  CFRetain(a1);
  fpfs_LockMutexWithCaller((uint64_t)v19);
  if (FigRetainProxyIsInvalidated()
    || (flags = a2->flags, (~flags & 0x11) == 0)
    || (flags & 1) == 0
    || (*(_BYTE *)(a4 + 12) & 1) != 0
    && (time1 = *(_OWORD *)a4,
        time1_16[0] = *(_QWORD *)(a4 + 16),
        time2 = *a2,
        CMTimeCompare((CMTime *)&time1, &time2) >= 1)
    || (*((_BYTE *)a5 + 12) & 1) != 0
    && (time1 = *(_OWORD *)&a2->value,
        time1_16[0] = a2->epoch,
        time2 = *(CMTime *)a5,
        CMTimeCompare((CMTime *)&time1, &time2) >= 1))
  {
    v124 = FigSignalErrorAt();
    v51 = 0;
    v26 = v19;
    v50 = v177.epoch;
LABEL_332:
    if (!v124)
      goto LABEL_250;
    if (v124 == -16836)
    {
      v143 = *(float *)(v158 + 108);
      if (v143 > 2.0 || v143 < 0.0)
      {
        fpfs_StopPlayingItem(v158, v162, 0);
        goto LABEL_250;
      }
    }
    fpfs_SeekDidFail(v26, v162, a6, v124);
LABEL_253:
    if (cf)
      CFRelease(cf);
    if (v174)
      CFRelease(v174);
    fpfs_UnlockAndPostNotificationsWithCaller(v26);
  }
  if (!(_DWORD)a6 && a11)
  {
    a6 = *(unsigned int *)(DerivedStorage + 3176);
    *(_DWORD *)(DerivedStorage + 3176) = FPSupport_IncrementSeekID(*(_DWORD *)(DerivedStorage + 3176));
  }
  v146 = v20;
  v152 = v21
      && (*(_BYTE *)(DerivedStorage + 1452) & 1) != 0
      && fpfsi_isAssociatedInterstitialEventActive() != 0;
  v23 = *(const void **)(DerivedStorage + 2208);
  *(_QWORD *)(DerivedStorage + 2208) = a7;
  if (a7)
    CFRetain(a7);
  if (v23)
    CFRelease(v23);
  v156 = a3;
  v24 = a3 & 0xF;
  v25 = *(_DWORD *)(DerivedStorage + 2196);
  v26 = v19;
  if (v25 && v25 != (_DWORD)a6)
    fpfs_SeekDidFail(v19, a1, v25, 0);
  fpfsi_GetDuration((uint64_t)a1, (__int128 *)&v177.value);
  if (!*(_DWORD *)(v158 + 32))
    goto LABEL_38;
  v27 = *(_QWORD *)(DerivedStorage + 928);
  if (!v27 || !*(_BYTE *)(DerivedStorage + 462))
    goto LABEL_38;
  *(_OWORD *)&time2.value = v159;
  time2.epoch = epoch;
  *(_OWORD *)&theArray.value = v159;
  theArray.epoch = epoch;
  if ((~a2->flags & 5) != 0
    || (v177.flags & 0x1D) == 1
    || (rhs = *a2,
        (v28 = *(unsigned int (**)(uint64_t, __int128 *, uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 144)) == 0)
    || (time1 = *(_OWORD *)&rhs.value, time1_16[0] = rhs.epoch, v28(v27, &time1, 3, &time2, &theArray))
    || (time2.flags & 1) == 0)
  {
    if (v24 != 7)
    {
      if (v24 == 6)
      {
        v29 = *(_QWORD *)(DerivedStorage + 928);
        rhs = *a2;
        v30 = *(unsigned int (**)(uint64_t, __int128 *, uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 144);
        if (v30)
        {
          time1 = *(_OWORD *)&rhs.value;
          time1_16[0] = rhs.epoch;
          if (!v30(v29, &time1, 3, &time2, &theArray) && (time2.flags & 1) != 0)
          {
            memset(time1_16, 0, 32);
            time1 = 0u;
            fpfsi_TotalTimeRangeInBuffer((uint64_t)a1, (uint64_t)&time1);
            v137 = *(_QWORD *)(DerivedStorage + 1696);
            if (v137 && FigAlternateIsIFrameOnly(v137))
              p_theArray = &theArray;
            else
              p_theArray = &time2;
            *(_OWORD *)&a2->value = *(_OWORD *)&p_theArray->value;
            a2->epoch = p_theArray->epoch;
            if ((BYTE12(time1) & 1) != 0
              && (time1_16[2] & 0x100000000) != 0
              && !time1_16[3]
              && (time1_16[1] & 0x8000000000000000) == 0
              && (*(_DWORD *)(DerivedStorage + 392) & 0xF) == 6)
            {
              rhs = *a2;
              *(_OWORD *)&type.value = time1;
              type.epoch = time1_16[0];
              if (CMTimeCompare(&rhs, &type) < 0)
              {
                rhs = theArray;
                *(_OWORD *)&type.value = time1;
                type.epoch = time1_16[0];
                if ((CMTimeCompare(&rhs, &type) & 0x80000000) == 0)
                {
                  *(_OWORD *)&a2->value = time1;
                  a2->epoch = time1_16[0];
                }
              }
            }
            v24 = 5;
            v31 = 6;
LABEL_39:
            time1 = *(_OWORD *)&a2->value;
            time1_16[0] = a2->epoch;
            fpfsi_setLastSeekTimeSet(DerivedStorage, (uint64_t)&time1);
            v32 = (__int128 *)(DerivedStorage + 344);
            if (v24 == 5)
            {
              if ((*(_DWORD *)(a4 + 12) & 1) != 0)
                v33 = (CMTime *)a4;
              else
                v33 = a2;
              v34 = *(_OWORD *)&v33->value;
              *(_QWORD *)(DerivedStorage + 360) = v33->epoch;
              *v32 = v34;
              v35 = DerivedStorage + 368;
              if ((*((_BYTE *)a5 + 12) & 1) == 0)
              {
                v36 = *(_OWORD *)&a2->value;
                v37 = a2->epoch;
                goto LABEL_47;
              }
            }
            else
            {
              v38 = *(_OWORD *)a4;
              *(_QWORD *)(DerivedStorage + 360) = *(_QWORD *)(a4 + 16);
              *v32 = v38;
              v35 = DerivedStorage + 368;
            }
            v36 = *a5;
            v37 = *((_QWORD *)a5 + 2);
LABEL_47:
            *(_QWORD *)(v35 + 16) = v37;
            *(_OWORD *)v35 = v36;
            if (v31 == -1)
              v39 = v24;
            else
              v39 = v31;
            *(_DWORD *)(DerivedStorage + 392) = v39;
            *(_QWORD *)(DerivedStorage + 3152) = FigGetUpTimeNanoseconds();
            if ((v156 & 0x20) == 0 && a12)
            {
              fpfsi_clearCoordinatedPlaybackSynchronizationTimebase();
              fpfs_PlayQueueCallForEachItem((uint64_t)v19, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_clearCoordinatedPlaybackSynchronizationTimebaseForPlayQueueItemsApply, (uint64_t)a1);
              theArray = *a2;
              v40 = CMBaseObjectGetDerivedStorage();
              CMBaseObjectGetDerivedStorage();
              if (*(const __CFArray **)(v40 + 80) == a1 && *(_DWORD *)(v40 + 164) != 6)
              {
                v41 = *(float *)(v40 + 108);
                if (v41 <= 2.0 && v41 >= 0.0)
                {
                  time1 = *(_OWORD *)&theArray.value;
                  time1_16[0] = theArray.epoch;
                  fpfs_notifyExternalStartupTasksOfEvents((uint64_t)v19, 2, 0, a6, &time1);
                  if (!fpfs_areAllExternalStartupTasksCompleted())
                  {
                    if (dword_1EE2A2A88)
                    {
                      LODWORD(rhs.value) = 0;
                      LOBYTE(type.value) = 0;
                      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      value = rhs.value;
                      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
                        v44 = value;
                      else
                        v44 = value & 0xFFFFFFFE;
                      if (v44)
                      {
                        if (v19)
                          v45 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                        else
                          v45 = "";
                        time1 = *(_OWORD *)&theArray.value;
                        time1_16[0] = theArray.epoch;
                        Seconds = CMTimeGetSeconds((CMTime *)&time1);
                        Description = FigPlayerPlaybackStateGetDescription(*(_DWORD *)(v40 + 164));
                        LODWORD(time2.value) = 136316418;
                        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_triggerStartupTasksForSeekIfNecessary";
                        LOWORD(time2.flags) = 2048;
                        *(_QWORD *)((char *)&time2.flags + 2) = v19;
                        HIWORD(time2.epoch) = 2082;
                        v180 = v45;
                        v181 = 2048;
                        v182 = Seconds;
                        v183 = 1024;
                        *(_DWORD *)v184 = a6;
                        *(_WORD *)&v184[4] = 2080;
                        *(_QWORD *)&v184[6] = Description;
                        _os_log_send_and_compose_impl();
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                  }
                }
              }
              v26 = v19;
            }
            if ((*(_DWORD *)(a4 + 12) & 0x1D) == 1)
            {
              time1 = *(_OWORD *)a4;
              time1_16[0] = *(_QWORD *)(a4 + 16);
              time2 = *(CMTime *)a5;
              if (!CMTimeCompare((CMTime *)&time1, &time2))
                v24 = 5;
            }
            v50 = epoch;
            *(_DWORD *)(DerivedStorage + 2196) = a6;
            *(_DWORD *)(DerivedStorage + 2216) = a8;
            *(_OWORD *)(DerivedStorage + 1488) = v159;
            *(_QWORD *)(DerivedStorage + 1504) = epoch;
            time1 = *(_OWORD *)&a2->value;
            time1_16[0] = a2->epoch;
            time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
            if (!CMTimeCompare((CMTime *)&time1, &time2) && (*(_BYTE *)(DerivedStorage + 236) & 1) == 0)
            {
              fpfs_GetTime(DerivedStorage, (uint64_t)&v170);
              fpfs_SeekDidComplete(v26, v162, a6, 0, 0, &v170);
              v51 = 1;
LABEL_188:
              v21 = v152;
              goto LABEL_250;
            }
            if (*(_BYTE *)(DerivedStorage + 593))
            {
              v52 = FPSupport_SeekIDGetSource(a6);
              if ((_DWORD)a6)
              {
                if (v52 != 1)
                  *(_BYTE *)(DerivedStorage + 593) = 0;
              }
            }
            fpfs_GetTime(DerivedStorage, (uint64_t)&v178);
            v53 = *(_QWORD *)(DerivedStorage + 1696);
            if (!v53)
            {
              v155 = 0;
              goto LABEL_118;
            }
            IsIFrameOnly = FigAlternateIsIFrameOnly(v53);
            v155 = IsIFrameOnly != 0;
            if (v24 != 5 || !IsIFrameOnly)
              goto LABEL_118;
            v55 = CMBaseObjectGetDerivedStorage();
            theArray.value = 0;
            v56 = CMBaseObjectGetDerivedStorage();
            if (*(_QWORD *)(v56 + 40))
            {
              if (!*(_BYTE *)(v56 + 48)
                || !*(_BYTE *)(v56 + 49)
                || fpfsi_CreateAndAddScanningModeFilterToBoss((uint64_t)v162, 0)
                || *(_BYTE *)(v55 + 2872)
                && FigAlternateSelectionBossSetProperty(*(const void **)(v55 + 40), (uint64_t)CFSTR("Paused"), (const void *)*MEMORY[0x1E0C9AE40]))
              {
                goto LABEL_97;
              }
              if (FigAlternateSelectionBossApplyFilters(*(const void **)(v55 + 40)))
                goto LABEL_97;
              v57 = *(_QWORD *)(v55 + 40);
              AllocatorForMedia = FigGetAllocatorForMedia();
              if (FigAlternateSelectionBossCopyProperty(v57, CFSTR("FilteredAlternateList"), AllocatorForMedia, (const __CFArray **)&theArray))goto LABEL_97;
              if (theArray.value)
              {
                if (CFArrayGetCount((CFArrayRef)theArray.value) >= 1)
                {
                  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.value, 0);
                  if (!FigAlternateIsIFrameOnly((uint64_t)ValueAtIndex)
                    && !fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)v162, (const __CFArray *)theArray.value, 0))
                  {
                    if (dword_1EE2A2A88)
                    {
                      LODWORD(rhs.value) = 0;
                      LOBYTE(type.value) = 0;
                      v133 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v134 = rhs.value;
                      if (os_log_type_enabled(v133, type.value))
                        v135 = v134;
                      else
                        v135 = v134 & 0xFFFFFFFE;
                      if (v135)
                      {
                        if (v26)
                          v136 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                        else
                          v136 = "";
                        if (v162)
                          v142 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                        else
                          v142 = "";
                        LODWORD(time2.value) = 136316162;
                        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_LeaveIFrameModeIfPossible";
                        LOWORD(time2.flags) = 2048;
                        *(_QWORD *)((char *)&time2.flags + 2) = v26;
                        HIWORD(time2.epoch) = 2082;
                        v180 = v136;
                        v181 = 2048;
                        v182 = *(double *)&v162;
                        v183 = 2082;
                        *(_QWORD *)v184 = v142;
                        _os_log_send_and_compose_impl();
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      v60 = 0;
                      v50 = epoch;
                    }
                    else
                    {
                      v60 = 0;
                    }
                    goto LABEL_98;
                  }
                }
LABEL_97:
                v60 = 1;
LABEL_98:
                if (theArray.value)
                  CFRelease((CFTypeRef)theArray.value);
                if ((v60 & 1) != 0)
                  goto LABEL_101;
                v66 = fpfsi_handleIFrameOnlyRateTransition(v162, 1, 0, *(const __CFArray **)(DerivedStorage + 1680), 1, 0.0);
                v67 = v155;
                if (!v66)
                  v67 = 0;
                v155 = v67;
                v24 = 5;
LABEL_118:
                v150 = v24;
                if ((v177.flags & 0x1D) == 1)
                {
                  time1 = *(_OWORD *)&v177.value;
                  time1_16[0] = v177.epoch;
                  CMTimeMultiplyByFloat64(&v176, (CMTime *)&time1, 0.95);
                  time1 = *(_OWORD *)&v178.value;
                  time1_16[0] = v178.epoch;
                  time2 = v176;
                  if (CMTimeCompare((CMTime *)&time1, &time2) < 0)
                  {
                    LOBYTE(v70) = 0;
                  }
                  else
                  {
                    time1 = *(_OWORD *)&a2->value;
                    time1_16[0] = a2->epoch;
                    time2 = v176;
                    v70 = CMTimeCompare((CMTime *)&time1, &time2) >> 31;
                  }
                  *(_BYTE *)(DerivedStorage + 3056) |= v70;
                }
                v71 = DerivedStorage + 1488;
                if (v24 != 5 && v24)
                {
                  v149 = 0;
                  v72 = v156;
                }
                else
                {
                  time1 = *(_OWORD *)&a2->value;
                  time1_16[0] = a2->epoch;
                  time2 = v178;
                  v72 = v156;
                  if (!(CMTimeCompare((CMTime *)&time1, &time2) | v156 & 0x100 | v148 & 1))
                  {
                    time1 = *(_OWORD *)&a2->value;
                    time1_16[0] = a2->epoch;
                    v51 = 1;
                    fpfs_SeekDidComplete(v26, v162, a6, 1, 0, (CMTime *)&time1);
                    if (!*(_BYTE *)(DerivedStorage + 462))
                    {
                      v73 = *(_OWORD *)&a2->value;
                      if (v24 == 5)
                      {
                        *(_QWORD *)(DerivedStorage + 1504) = a2->epoch;
                        *(_OWORD *)v71 = v73;
                      }
                      else
                      {
                        *(_QWORD *)(DerivedStorage + 240) = a2->epoch;
                        *(_OWORD *)(DerivedStorage + 224) = v73;
                      }
                    }
                    goto LABEL_188;
                  }
                  if (v24 == 5 && (a2->flags & 0x1D) == 1)
                  {
                    if (v155)
                    {
                      v124 = FigSignalErrorAt();
                      v51 = 0;
LABEL_340:
                      v21 = v152;
                      goto LABEL_332;
                    }
                    v74 = *(_OWORD *)&a2->value;
                    *(_QWORD *)(DerivedStorage + 1504) = a2->epoch;
                    *(_OWORD *)v71 = v74;
                    v149 = 1;
                  }
                  else
                  {
                    v149 = 0;
                  }
                }
                time1 = *(_OWORD *)&a2->value;
                time1_16[0] = a2->epoch;
                time2 = v178;
                CMTimeSubtract(&time, (CMTime *)&time1, &time2);
                CMTimeAbsoluteValue(&v169, &time);
                time1 = kSeekToCurrentFudge;
                time1_16[0] = 0;
                CMTimeMultiply(&v167, (CMTime *)&time1, 2);
                v75 = CMTimeCompare(&v169, &v167);
                if ((v72 & 0x80) == 0 && v75 >= 1)
                {
                  time1 = v159;
                  time1_16[0] = v50;
                  fpfsi_applyTimeToPauseBuffering((uint64_t)v162, &time1);
                }
                if ((v72 & 0x10) != 0)
                {
                  time1 = *(_OWORD *)&v178.value;
                  time1_16[0] = v178.epoch;
                  if (fpfsi_atOrAfterTimeToPausePlayback(DerivedStorage, (CMTime *)&time1))
                  {
                    time1 = *(_OWORD *)&a2->value;
                    time1_16[0] = a2->epoch;
                    time2 = *(CMTime *)(DerivedStorage + 1440);
                    if (CMTimeCompare((CMTime *)&time1, &time2) < 0)
                    {
                      time1 = *(_OWORD *)&a2->value;
                      time1_16[0] = a2->epoch;
                      fpfsi_applyTimeToPausePlayback(v162, &time1, 0, 0);
                    }
                  }
                }
                if (*(_DWORD *)(v158 + 32) && *MEMORY[0x1E0CA1FC0] == 1)
                  kdebug_trace();
                if (fpfs_getNext(v158, 0) == v162)
                {
                  v76 = v26;
                  if (a14)
                  {
                    *(_OWORD *)(v158 + 112) = v159;
                    *(_QWORD *)(v158 + 128) = v50;
                    *(_OWORD *)(v158 + 136) = v159;
                    *(_QWORD *)(v158 + 152) = v50;
                    v77 = (const __CFAllocator *)FigGetAllocatorForMedia();
                    v78 = *(const void **)(DerivedStorage + 1696);
                    v79 = *(float *)(DerivedStorage + 840);
                    time1 = v159;
                    time1_16[0] = v50;
                    FigMetricItemSeekEventCreate(v77, &time1, 0, 0, v78, &v174, 0.0, v79);
                    v80 = *(_QWORD *)(DerivedStorage + 3360);
                    v81 = v174;
                    v82 = *(void (**)(uint64_t, const __CFArray *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 40);
                    if (v82)
                      v82(v80, v162, v81);
                  }
                  fpfs_enqueuePrerollWasCancelledNotificationIfNeeded(v162);
                  v26 = v76;
                }
                v83 = a10;
                if (dword_1EE2A2A88)
                {
                  LODWORD(theArray.value) = 0;
                  LOBYTE(rhs.value) = 0;
                  v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v85 = theArray.value;
                  if (os_log_type_enabled(v84, rhs.value))
                    v86 = v85;
                  else
                    v86 = v85 & 0xFFFFFFFE;
                  if (v86)
                  {
                    if (v26)
                      v87 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                    else
                      v87 = "";
                    v145 = v87;
                    if (v162)
                      v144 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                    else
                      v144 = "";
                    time1 = *(_OWORD *)&a2->value;
                    time1_16[0] = a2->epoch;
                    v88 = CMTimeGetSeconds((CMTime *)&time1);
                    time1 = *(_OWORD *)&v178.value;
                    time1_16[0] = v178.epoch;
                    v89 = CMTimeGetSeconds((CMTime *)&time1);
                    time1 = *(_OWORD *)(DerivedStorage + 1176);
                    time1_16[0] = *(_QWORD *)(DerivedStorage + 1192);
                    v90 = CMTimeGetSeconds((CMTime *)&time1);
                    if ((*(_DWORD *)(DerivedStorage + 1500) & 1) != 0)
                      v91 = "- preciseSeek is ";
                    else
                      v91 = "";
                    time1 = *(_OWORD *)(DerivedStorage + 1488);
                    time1_16[0] = *(_QWORD *)(DerivedStorage + 1504);
                    v92 = CMTimeGetSeconds((CMTime *)&time1);
                    v93 = *(_DWORD *)(DerivedStorage + 2196);
                    LODWORD(time2.value) = 136317698;
                    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts";
                    LOWORD(time2.flags) = 2048;
                    *(_QWORD *)((char *)&time2.flags + 2) = v26;
                    HIWORD(time2.epoch) = 2082;
                    v180 = v145;
                    v181 = 2048;
                    v182 = *(double *)&v162;
                    v183 = 2082;
                    *(_QWORD *)v184 = v144;
                    *(_WORD *)&v184[8] = 2048;
                    *(Float64 *)&v184[10] = v88;
                    v185 = 2048;
                    v186 = v89;
                    v187 = 2048;
                    v188 = v90;
                    v189 = 2082;
                    v190 = v91;
                    v71 = DerivedStorage + 1488;
                    v191 = 2048;
                    v192 = v92;
                    v193 = 1024;
                    v194 = v93;
                    _os_log_send_and_compose_impl();
                    v50 = epoch;
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  v83 = a10;
                }
                if (!v83)
                {
                  v94 = *(OpaqueCMTimebase **)(DerivedStorage + 2960);
                  if (v94)
                  {
                    v95 = *(uint64_t **)(DerivedStorage + 2880);
                    if (v95)
                    {
                      do
                      {
                        fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(DerivedStorage, v95);
                        v95 = *(uint64_t **)(DerivedStorage + 2880);
                      }
                      while (v95);
                      v94 = *(OpaqueCMTimebase **)(DerivedStorage + 2960);
                    }
                    time1 = *(_OWORD *)&a2->value;
                    time1_16[0] = a2->epoch;
                    CMTimebaseSetTime(v94, (CMTime *)&time1);
                    *(_OWORD *)(DerivedStorage + 608) = v159;
                    *(_QWORD *)(DerivedStorage + 624) = v50;
                    goto LABEL_253;
                  }
                }
                v96 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
                v147 = v26;
                if (v155
                  || !fpfsi_EnterIFrameModeForSeekWithNonzeroToleranceIfPossible((uint64_t)v26, (uint64_t)v162))
                {
                  if (!fpfsi_EnterIFrameModeForSeekWithNonzeroToleranceIfPossible((uint64_t)v26, (uint64_t)v162))
                  {
                    v97 = 1;
                    goto LABEL_204;
                  }
                  v97 = 1;
                  if (!*(_QWORD *)(DerivedStorage + 1696) && dword_1EE2A2A88)
                  {
                    v98 = v50;
                    LODWORD(theArray.value) = 0;
                    LOBYTE(rhs.value) = 0;
                    v99 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v100 = theArray.value;
                    if (os_log_type_enabled(v99, rhs.value))
                      v101 = v100;
                    else
                      v101 = v100 & 0xFFFFFFFE;
                    if (v101)
                    {
                      if (v147)
                        v102 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                      else
                        v102 = "";
                      if (v162)
                        v107 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                      else
                        v107 = "";
                      LODWORD(time2.value) = 136316162;
                      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts";
                      LOWORD(time2.flags) = 2048;
                      *(_QWORD *)((char *)&time2.flags + 2) = v147;
                      HIWORD(time2.epoch) = 2082;
                      v180 = v102;
                      v181 = 2048;
                      v182 = *(double *)&v162;
                      v183 = 2082;
                      *(_QWORD *)v184 = v107;
                      _os_log_send_and_compose_impl();
                    }
                    v97 = 1;
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    goto LABEL_203;
                  }
                }
                else
                {
                  v97 = 1;
                  if (fpfsi_handleIFrameOnlyRateTransition(v162, 0, 1, *(const __CFArray **)(DerivedStorage + 1680), 1, 1.0))
                  {
                    v155 = 0;
                    goto LABEL_204;
                  }
                  if (dword_1EE2A2A88)
                  {
                    v98 = v50;
                    LODWORD(theArray.value) = 0;
                    LOBYTE(rhs.value) = 0;
                    v103 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v104 = theArray.value;
                    if (os_log_type_enabled(v103, rhs.value))
                      v105 = v104;
                    else
                      v105 = v104 & 0xFFFFFFFE;
                    if (v105)
                    {
                      if (v147)
                        v106 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                      else
                        v106 = "";
                      if (v162)
                        v141 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                      else
                        v141 = "";
                      LODWORD(time2.value) = 136316162;
                      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts";
                      LOWORD(time2.flags) = 2048;
                      *(_QWORD *)((char *)&time2.flags + 2) = v147;
                      HIWORD(time2.epoch) = 2082;
                      v180 = v106;
                      v181 = 2048;
                      v182 = *(double *)&v162;
                      v183 = 2082;
                      *(_QWORD *)v184 = v141;
                      _os_log_send_and_compose_impl();
                    }
                    v155 = 1;
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v97 = 0;
LABEL_203:
                    v50 = v98;
                    goto LABEL_204;
                  }
                  v97 = 0;
                  v155 = 1;
                }
LABEL_204:
                v108 = a2->flags;
                if ((~v108 & 5) == 0)
                {
                  time1 = *(_OWORD *)&v178.value;
                  time1_16[0] = v178.epoch;
                  if (fpfsi_TimeInTotalTimeRangeInBuffer((uint64_t)v162, (CMTime *)&time1))
                  {
                    memset(time1_16, 0, 32);
                    time1 = 0u;
                    if (!fpfsi_getPumpAvailableTimeRange((CMTime *)DerivedStorage, &time1))
                    {
                      v109 = v155;
                      v51 = 0;
                      if ((BYTE12(time1) & 1) != 0)
                      {
                        v110 = 1;
                        if ((time1_16[2] & 0x100000000) != 0
                          && !time1_16[3]
                          && (time1_16[1] & 0x8000000000000000) == 0)
                        {
                          memset(&time2, 0, sizeof(time2));
                          fpfs_GetTime(DerivedStorage, (uint64_t)&time2);
                          memset(&theArray, 0, sizeof(theArray));
                          *(_OWORD *)&rhs.value = time1;
                          rhs.epoch = time1_16[0];
                          type = *(CMTime *)&time1_16[1];
                          CMTimeAdd(&lhs, &rhs, &type);
                          rhs = *(CMTime *)(DerivedStorage + 1176);
                          CMTimeAdd(&theArray, &lhs, &rhs);
                          rhs = time2;
                          type = theArray;
                          if (CMTimeCompare(&rhs, &type) < 0)
                          {
                            v51 = 0;
                            v196 = theArray.value;
                            v96 = theArray.flags;
                            timescale = theArray.timescale;
                            v110 = 1;
                            v111 = theArray.epoch;
                          }
                          else
                          {
                            rhs = time2;
                            v51 = 1;
                            v132 = fpfs_SeekDidComplete(v147, v162, a6, 1, 0, &rhs);
                            if (v132)
                            {
                              v124 = v132;
                              v51 = 0;
                              v21 = v152;
                              v26 = v147;
                              goto LABEL_332;
                            }
                            v110 = 0;
                            v111 = v50;
                          }
                          v109 = v155;
                          goto LABEL_215;
                        }
                      }
                      else
                      {
                        v110 = 1;
                      }
                      v111 = v50;
LABEL_215:
                      v112 = *(_DWORD *)(DerivedStorage + 524);
                      if (!v109 && v110)
                        *(_DWORD *)(DerivedStorage + 524) = 0;
                      v113 = 0;
                      v114 = *(_DWORD *)(v158 + 32);
                      if (v110 && !v109 && a9 && v114)
                      {
                        rhs.value = a2->value;
                        rhs.timescale = a2->timescale;
                        v115 = *(_DWORD *)(DerivedStorage + 1500);
                        if ((v115 & 1) != 0)
                        {
                          rhs.value = *(_QWORD *)v71;
                          rhs.timescale = *(_DWORD *)(v71 + 8);
                          v111 = *(_QWORD *)(DerivedStorage + 1504);
                          v96 = v115;
                          v118 = v152;
                        }
                        else
                        {
                          v116 = a2->flags;
                          v117 = a2->epoch;
                          v118 = v152;
                          if ((~v116 & 5) != 0 || (v96 & 1) == 0)
                          {
                            if (v150 == 7)
                            {
                              time2.value = a2->value;
                              time2.timescale = a2->timescale;
                              time2.flags = v116;
                              time2.epoch = v117;
                              *(_OWORD *)&theArray.value = kInBufferSeekTimeRequired;
                              theArray.epoch = 0;
                              CMTimeAdd((CMTime *)&time1, &time2, &theArray);
                              rhs.value = time1;
                              v96 = HIDWORD(time1);
                              rhs.timescale = DWORD2(time1);
                              v111 = time1_16[0];
                            }
                            else
                            {
                              v96 = a2->flags;
                              v111 = a2->epoch;
                            }
                          }
                          else
                          {
                            rhs.value = v196;
                            rhs.timescale = timescale;
                          }
                        }
                        *(_QWORD *)&time1 = rhs.value;
                        *((_QWORD *)&time1 + 1) = __PAIR64__(v96, rhs.timescale);
                        time1_16[0] = v111;
                        if (fpfsi_TryToSeekWithinBuffer(v162, (CMTime *)&time1, a6, !v118))
                        {
                          v110 = 0;
                          *(_BYTE *)(DerivedStorage + 530) = 0;
                          v51 = 1;
                          v113 = 1;
                        }
                        else
                        {
                          v113 = 0;
                          v110 = 1;
                        }
                        v109 = v155;
                        v114 = *(_DWORD *)(v158 + 32);
                      }
                      if (!v114 || !*(_QWORD *)(DerivedStorage + 928) || !v110 || !*(_BYTE *)(DerivedStorage + 462))
                      {
                        v26 = v147;
                        goto LABEL_240;
                      }
                      v151 = v112;
                      *(_BYTE *)(DerivedStorage + 530) = 0;
                      fpfs_CancelTrialSwitch((uint64_t)v162);
                      fpfs_CreateAccessLogEntryWithUnlock((uint64_t)v162, (CFMutableDictionaryRef *)&cf);
                      v119 = v97 ^ 1;
                      v120 = *(double *)(DerivedStorage + 1544);
                      if (!v109)
                        v119 = 1;
                      if ((v119 & 1) != 0)
                      {
                        CMTimeMakeWithSeconds(&v164, v120, 1000);
                        time1 = *(_OWORD *)&a2->value;
                        time1_16[0] = a2->epoch;
                        time2 = v178;
                        theArray = *(CMTime *)a4;
                        rhs = *(CMTime *)a5;
                        v121 = fpfs_IssueSeekToPump((uint64_t)v162, (CMTime *)&time1, &time2, a6, v109, v149, (__int128 *)&theArray.value, (__int128 *)&rhs.value, (__int128 *)&v164.value);
                      }
                      else
                      {
                        CMTimeMakeWithSeconds(&v165, v120, 1000);
                        time1 = *(_OWORD *)&a2->value;
                        time1_16[0] = a2->epoch;
                        v121 = fpfs_IssueSeekToPump((uint64_t)v162, (CMTime *)&time1, MEMORY[0x1E0CA2E10], a6, v109, v149, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], (__int128 *)&v165.value);
                      }
                      v124 = v121;
                      v26 = v147;
                      if (v121 == -16838)
                      {
                        fpfs_GetTime(DerivedStorage, (uint64_t)&v163);
                        fpfs_SeekDidComplete(v147, v162, a6, 1, 0, &v163);
                        goto LABEL_249;
                      }
                      if (!v121)
                      {
                        v125 = 0;
                        v126 = 944;
                        while (1)
                        {
                          if (*(_DWORD *)(DerivedStorage + v126) > *(_DWORD *)(DerivedStorage + v126 + 24))
                          {
                            if (!v155 || v125)
                            {
                              if (!v155)
                                fpfs_ClearRenderChains(v162, 0xFFu);
                              fpfs_PrepareForSeek(v162, 1 << v125, 1);
                            }
                            else
                            {
                              time1 = *(_OWORD *)&a2->value;
                              time1_16[0] = a2->epoch;
                              v127 = fpfs_PrepareToReuseLastIFrameTrack((uint64_t)v162, &time1, 1);
                              if (v127)
                              {
                                v124 = v127;
                                v26 = v147;
                                break;
                              }
                            }
                            *(_BYTE *)(DerivedStorage + v125 + 471) = 0;
                          }
                          ++v125;
                          v126 += 4;
                          if (v125 == 3)
                          {
                            if (cf)
                            {
                              fpfs_CommitAccessLogEntry(v162, (__CFDictionary *)cf);
                              if (*(_BYTE *)(DerivedStorage + 464))
                                *(_BYTE *)(DerivedStorage + 2120) = 1;
                            }
                            *(_OWORD *)(DerivedStorage + 3020) = v159;
                            *(_QWORD *)(DerivedStorage + 3036) = epoch;
                            *(_DWORD *)(DerivedStorage + 2848) = 0;
                            v128 = *(_DWORD *)(DerivedStorage + 1744);
                            *(_DWORD *)(DerivedStorage + 2852) = v128;
                            *(_OWORD *)(DerivedStorage + 2624) = 0u;
                            *(_OWORD *)(DerivedStorage + 2640) = 0u;
                            *(_QWORD *)(DerivedStorage + 2656) = 0;
                            *(_OWORD *)(DerivedStorage + 2672) = v159;
                            *(_QWORD *)(DerivedStorage + 2688) = epoch;
                            v129 = (__int128 *)MEMORY[0x1E0CA2E28];
                            v130 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
                            *(_QWORD *)(DerivedStorage + 2712) = v130;
                            v131 = *v129;
                            *(_OWORD *)(DerivedStorage + 2696) = *v129;
                            *(_OWORD *)(DerivedStorage + 2720) = v159;
                            *(_QWORD *)(DerivedStorage + 2736) = epoch;
                            *(_OWORD *)(DerivedStorage + 2744) = v131;
                            *(_QWORD *)(DerivedStorage + 2760) = v130;
                            *(_DWORD *)(DerivedStorage + 2796) = -1;
                            *(_DWORD *)(DerivedStorage + 2824) = -1;
                            *(_BYTE *)(DerivedStorage + 2800) = 0;
                            *(_BYTE *)(DerivedStorage + 2808) = 0;
                            *(_DWORD *)(DerivedStorage + 2812) = 0;
                            *(_WORD *)(DerivedStorage + 2816) = 0;
                            *(_QWORD *)(DerivedStorage + 2768) = 0;
                            *(_QWORD *)(DerivedStorage + 2776) = 0;
                            *(_BYTE *)(DerivedStorage + 2864) = 0;
                            *(_DWORD *)(DerivedStorage + 2788) = *(_DWORD *)(DerivedStorage + 2784);
                            *(_DWORD *)(DerivedStorage + 2792) = v128;
                            *(_DWORD *)(DerivedStorage + 2820) = *(_DWORD *)(DerivedStorage + 1748);
                            *(_DWORD *)(DerivedStorage + 2828) = FigAlternateGetVideoQualityIndex(*(_QWORD *)(DerivedStorage + 1696));
                            fpfsi_RTCReportingUpdateInitialVariantRank(DerivedStorage);
                            v26 = v147;
                            if (v155)
                            {
                              v51 = 1;
                            }
                            else
                            {
                              CMBaseObjectGetDerivedStorage();
                              v51 = 1;
                              if (!*(_DWORD *)(DerivedStorage + 2284))
                                *(_DWORD *)(DerivedStorage + 2284) = 1;
                            }
LABEL_240:
                            v122 = *(_OWORD *)&a2->value;
                            *(_QWORD *)(DerivedStorage + 240) = a2->epoch;
                            *(_OWORD *)(DerivedStorage + 224) = v122;
                            if (*(_DWORD *)(DerivedStorage + 524) != 1)
                              fpfs_setRanDry(v162);
                            *(_QWORD *)(DerivedStorage + 2336) = 0;
                            time1 = *(_OWORD *)(DerivedStorage + 320);
                            time1_16[0] = *(_QWORD *)(DerivedStorage + 336);
                            fpfsi_setPlaybackRateMonitorPendingSeekTime(DerivedStorage, (CMTime *)&time1);
                            if ((a2->flags & 0x1D) == 1
                              && (!*(_BYTE *)(DerivedStorage + 462) || !*(_DWORD *)(v158 + 32)))
                            {
                              v123 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
                              time1 = *(_OWORD *)&a2->value;
                              time1_16[0] = a2->epoch;
                              CMTimebaseSetTime(v123, (CMTime *)&time1);
                              if (!*(_DWORD *)(v158 + 32))
                                fpfs_EnqueueNotification(v26, CFSTR("TimeJumped"), v162, 0);
                              fpfsi_updateMaxPlayThroughTime();
                            }
                            if (a13)
                              *a13 = v113;
LABEL_249:
                            v21 = v152;
                            v50 = epoch;
LABEL_250:
                            *(_OWORD *)(DerivedStorage + 608) = v159;
                            *(_QWORD *)(DerivedStorage + 624) = v50;
                            if (v51 && v21)
                            {
                              time1 = *(_OWORD *)(DerivedStorage + 1440);
                              time1_16[0] = *(_QWORD *)(DerivedStorage + 1456);
                              fpfsi_ClampVideoToTime(v162, (CMTime *)&time1, MEMORY[0x1E0CA2E18]);
                            }
                            goto LABEL_253;
                          }
                        }
                      }
                      *(_DWORD *)(DerivedStorage + 524) = v151;
                      fpfsi_setLastSeekTimeSet(DerivedStorage, MEMORY[0x1E0CA2E18]);
                      v50 = epoch;
                      *(_OWORD *)v71 = v159;
                      *(_QWORD *)(v71 + 16) = epoch;
                      *(_BYTE *)(DerivedStorage + 530) = v146;
                      goto LABEL_340;
                    }
                    goto LABEL_213;
                  }
                  v108 = a2->flags;
                }
                if ((~v108 & 5) == 0)
                {
                  v51 = 0;
                  *(_OWORD *)&v178.value = v159;
                  v178.epoch = v50;
LABEL_214:
                  v110 = 1;
                  v111 = v50;
                  v109 = v155;
                  goto LABEL_215;
                }
LABEL_213:
                v51 = 0;
                goto LABEL_214;
              }
            }
LABEL_101:
            LODWORD(theArray.value) = 0;
            LOBYTE(rhs.value) = 0;
            v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v62 = theArray.value;
            if (os_log_type_enabled(v61, rhs.value))
              v63 = v62;
            else
              v63 = v62 & 0xFFFFFFFE;
            if (v63)
            {
              v64 = *(const void **)DerivedStorage;
              if (*(_QWORD *)DerivedStorage)
                v65 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v65 = "";
              if (v162)
                v68 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v68 = "";
              time1 = *(_OWORD *)&a2->value;
              time1_16[0] = a2->epoch;
              v69 = CMTimeGetSeconds((CMTime *)&time1);
              LODWORD(time2.value) = 136316418;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = v64;
              HIWORD(time2.epoch) = 2082;
              v180 = v65;
              v181 = 2048;
              v182 = *(double *)&v162;
              v183 = 2082;
              *(_QWORD *)v184 = v68;
              *(_WORD *)&v184[8] = 2048;
              *(Float64 *)&v184[10] = v69;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v24 = 0;
            v50 = epoch;
            goto LABEL_118;
          }
        }
        v24 = 6;
      }
LABEL_38:
      v31 = -1;
      goto LABEL_39;
    }
    time1 = *(_OWORD *)&a2->value;
    time1_16[0] = a2->epoch;
    *(_OWORD *)&rhs.value = kInBufferSeekTimeRequired;
    rhs.epoch = 0;
    CMTimeAdd(&v171, (CMTime *)&time1, &rhs);
    if (fpfsi_TimeInTotalTimeRangeInBuffer((uint64_t)a1, &v171)
      || (v46 = *(_QWORD *)(DerivedStorage + 928),
          rhs = *a2,
          (v47 = *(unsigned int (**)(uint64_t, __int128 *, uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 144)) == 0)
      || (time1 = *(_OWORD *)&rhs.value, time1_16[0] = rhs.epoch, v47(v46, &time1, 4, &time2, &theArray))
      || (time2.flags & 1) == 0)
    {
      v24 = 7;
      goto LABEL_38;
    }
    *a2 = time2;
  }
  else
  {
    v139 = *(_OWORD *)&time2.value;
    *(_OWORD *)&a2->value = *(_OWORD *)&time2.value;
    v140 = time2.epoch;
    a2->epoch = time2.epoch;
    *(_OWORD *)a4 = v139;
    *(_QWORD *)(a4 + 16) = v140;
    *a5 = v139;
    *((_QWORD *)a5 + 2) = v140;
  }
  v24 = 5;
  goto LABEL_38;
}

