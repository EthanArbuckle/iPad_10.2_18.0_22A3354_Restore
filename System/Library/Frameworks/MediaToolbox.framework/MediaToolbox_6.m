uint64_t playerModeratorResetStatsForEvent()
{
  return 0;
}

uint64_t fprm_setSessionEndReasonIfFatalError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __CFString *, const __CFString *);
  uint64_t v24;
  uint64_t v25;

  v24 = 1;
  if (!a3
    || (v12 = *(_QWORD *)(a1 + 80),
        (v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 144)) == 0)
    || (result = v13(v12, a2, a3, &v24), v24 == 1))
  {
    v25 = 0;
    if (a2)
    {
      if (a4)
      {
        v15 = *(_QWORD *)(a1 + 80);
        v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 144);
        if (v16)
        {
          if (!v16(v15, a2, a4, &v25))
          {
            v17 = *(_QWORD *)(a1 + 80);
            v18 = *(_QWORD *)(a1 + 88);
            v19 = v25;
            v20 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 88);
            if (v20)
              v20(v17, v18, CFSTR("EndErrCode"), v19);
          }
        }
      }
    }
    fprm_setCFTypeFromKeyInStats(a1, a2, a6, 0x1E301CC98);
    if (a5)
    {
      return fprm_setCFTypeFromKeyInStats(a1, a2, a5, 0x1E301CCB8);
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 88);
      result = CMBaseObjectGetVTable();
      v23 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(result + 16)
                                                                                         + 80);
      if (v23)
        return v23(v21, v22, CFSTR("EndErrDomain"), CFSTR("CoreMediaErrorDomain"));
    }
  }
  return result;
}

uint64_t fprm_setCFTypeFromKeyInStats(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v14 = 0;
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        v7 = result;
        v8 = *(_QWORD *)(result + 80);
        result = CMBaseObjectGetVTable();
        v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(result + 16) + 152);
        if (v9)
        {
          result = v9(v8, a2, a3, &v14);
          if (!(_DWORD)result)
          {
            v10 = *(_QWORD *)(v7 + 80);
            v11 = *(_QWORD *)(v7 + 88);
            v12 = v14;
            result = CMBaseObjectGetVTable();
            v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 80);
            if (v13)
              return v13(v10, v11, a4, v12);
          }
        }
      }
    }
  }
  return result;
}

CFArrayRef fprm_createStaticKeyArrayFromEventKeys()
{
  const __CFAllocator *v0;
  CFArrayRef result;
  _OWORD v2[83];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  memcpy(v2, off_1E2F95EB8, sizeof(v2));
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v2, 166, 0);
  kFigReportingEventKeyArray_AggregatedEvent_0 = (uint64_t)result;
  if (result)
  {
    memcpy(v2, off_1E2F963E8, 0x1D0uLL);
    result = CFArrayCreate(v0, (const void **)v2, 58, 0);
    kFigReportingEventKeyArray_PlayRateChangedEvent_0 = (uint64_t)result;
    if (result)
    {
      memcpy(v2, off_1E2F965B8, 0x1E8uLL);
      result = CFArrayCreate(v0, (const void **)v2, 61, 0);
      kFigReportingEventKeyArray_UnlikelyToKeepUpEvent = (uint64_t)result;
      if (result)
      {
        memcpy(v2, off_1E2F967A0, 0x240uLL);
        result = CFArrayCreate(v0, (const void **)v2, 72, 0);
        kFigReportingEventKeyArray_LikelyToKeepUpEvent_0 = (uint64_t)result;
        if (result)
        {
          memcpy(v2, off_1E2F969E0, 0x260uLL);
          result = CFArrayCreate(v0, (const void **)v2, 76, 0);
          kFigReportingEventKeyArray_StallEvent_0 = (uint64_t)result;
          if (result)
          {
            memcpy(v2, off_1E2F96C40, 0x1E8uLL);
            result = CFArrayCreate(v0, (const void **)v2, 61, 0);
            kFigReportingEventKeyArray_CRABSDoneBufferingEvent = (uint64_t)result;
            if (result)
            {
              memcpy(v2, off_1E2F96E28, 0x270uLL);
              result = CFArrayCreate(v0, (const void **)v2, 78, 0);
              kFigReportingEventKeyArray_CRABSErrorEvent = (uint64_t)result;
              if (result)
              {
                memcpy(v2, off_1E2F97098, 0x260uLL);
                result = CFArrayCreate(v0, (const void **)v2, 76, 0);
                kFigReportingEventKeyArray_FlumeErrorEvent = (uint64_t)result;
                if (result)
                {
                  memcpy(v2, off_1E2F972F8, 0x2A0uLL);
                  result = CFArrayCreate(v0, (const void **)v2, 84, 0);
                  kFigReportingEventKeyArray_PlayerErrorEvent_0 = (uint64_t)result;
                  if (result)
                  {
                    v2[0] = xmmword_1E2F97598;
                    v2[1] = *(_OWORD *)&off_1E2F975A8;
                    v2[2] = xmmword_1E2F975B8;
                    v2[3] = *(_OWORD *)&off_1E2F975C8;
                    result = CFArrayCreate(v0, (const void **)v2, 8, 0);
                    kFigReportingEventKeyArray_PowerLogEvent_0 = (uint64_t)result;
                    if (result)
                    {
                      v2[0] = xmmword_1E2F975D8;
                      *(_QWORD *)&v2[1] = 0;
                      result = CFArrayCreate(v0, (const void **)v2, 3, 0);
                      kFigReportingEventKeyArray_IRATStreamingActivityStartEvent_0 = (uint64_t)result;
                      if (result)
                      {
                        v2[0] = xmmword_1E2F975F0;
                        v2[1] = *(_OWORD *)&off_1E2F97600;
                        v2[2] = xmmword_1E2F97610;
                        result = CFArrayCreate(v0, (const void **)v2, 6, 0);
                        kFigReportingEventKeyArray_IRATStreamingActivityEndEvent_0 = (uint64_t)result;
                        if (result)
                        {
                          v2[0] = xmmword_1E2F97620;
                          result = CFArrayCreate(v0, (const void **)v2, 2, 0);
                          kFigReportingEventKeyArray_IRATStallEvent_0 = (uint64_t)result;
                          if (result)
                          {
                            v2[6] = xmmword_1E2F97690;
                            v2[7] = *(_OWORD *)off_1E2F976A0;
                            *(_QWORD *)&v2[8] = 0;
                            v2[2] = xmmword_1E2F97650;
                            v2[3] = *(_OWORD *)&off_1E2F97660;
                            v2[4] = xmmword_1E2F97670;
                            v2[5] = *(_OWORD *)&off_1E2F97680;
                            v2[0] = xmmword_1E2F97630;
                            v2[1] = *(_OWORD *)&off_1E2F97640;
                            result = CFArrayCreate(v0, (const void **)v2, 17, 0);
                            kFigReportingEventKeyArray_FetchKeysFromAggregatedSessionStats_0 = (uint64_t)result;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AddPesToList(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (result)
  {
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = a3;
    if (a2)
    {
      *(_QWORD *)(result + 16) = 0;
      v3 = *(_QWORD **)(a2 + 32);
      *(_QWORD *)(result + 24) = v3;
      *v3 = result;
      *(_QWORD *)(a2 + 32) = result + 16;
    }
    v4 = *(_QWORD *)(a3 + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(a3 + 32);
      v6 = *(unsigned __int16 *)(result + 448);
      if (*(unsigned __int16 *)(**(_QWORD **)(v5 + 8) + 448) >= v6)
      {
        do
        {
          if (*(unsigned __int16 *)(v4 + 448) >= v6)
            break;
          v4 = *(_QWORD *)(v4 + 32);
        }
        while (v4);
        *(_QWORD *)(result + 40) = *(_QWORD *)(v4 + 40);
        *(_QWORD *)(result + 32) = v4;
        **(_QWORD **)(v4 + 40) = result;
        *(_QWORD *)(v4 + 40) = result + 32;
      }
      else
      {
        *(_QWORD *)(result + 32) = 0;
        *(_QWORD *)(result + 40) = v5;
        *(_QWORD *)v5 = result;
        *(_QWORD *)(a3 + 32) = result + 32;
      }
    }
    else
    {
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(a3 + 24) = result;
      *(_QWORD *)(a3 + 32) = result + 32;
      *(_QWORD *)(result + 40) = a3 + 24;
    }
  }
  return result;
}

uint64_t AddPes(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int a7, __int16 a8, char a9, _QWORD *a10)
{
  _BYTE *v18;
  _BYTE *v19;
  int v21;
  int v22;
  uint64_t v23;
  void (*v24)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t);

  v18 = malloc_type_calloc(1uLL, 0x368uLL, 0x10B00407B0020A8uLL);
  if (v18)
  {
    v19 = v18;
    v18[120] = 0;
    *(_QWORD *)v18 = a2;
    *((_QWORD *)v18 + 1) = a1;
    *((_DWORD *)v18 + 16) = a7;
    if (!a5)
    {
      a6 = *(_DWORD *)(a1 + 184);
      *(_DWORD *)(a1 + 184) = a6 + 1;
    }
    *((_DWORD *)v18 + 15) = a6;
    *((_WORD *)v18 + 224) = a8;
    *((_QWORD *)v18 + 102) = -1;
    AddPesToList((uint64_t)v18, a2, a1);
    *((_QWORD *)v19 + 91) = 0;
    *((_QWORD *)v19 + 92) = v19 + 728;
    *((_QWORD *)v19 + 98) = 0;
    *((_QWORD *)v19 + 99) = v19 + 784;
    *((_QWORD *)v19 + 65) = 0;
    *((_QWORD *)v19 + 66) = v19 + 520;
    *((_DWORD *)v19 + 163) = 2;
    if (a3)
      goto LABEL_5;
    *((_DWORD *)v19 + 14) = a4;
    if ((int)a4 > 1748121139)
    {
      if ((int)a4 <= 1836476771)
      {
        if ((int)a4 > 1819304812)
        {
          if ((_DWORD)a4 != 1819304813)
          {
            if ((_DWORD)a4 != 1835103588)
            {
              v21 = 1836070006;
              goto LABEL_39;
            }
            goto LABEL_33;
          }
LABEL_36:
          v23 = 4096;
          goto LABEL_41;
        }
        if ((_DWORD)a4 != 1748121140)
        {
          if ((_DWORD)a4 == 1768174368)
            goto LABEL_42;
          goto LABEL_5;
        }
        goto LABEL_40;
      }
      if ((int)a4 <= 1886614577)
      {
        if ((_DWORD)a4 != 1836476772)
        {
          if ((_DWORD)a4 != 1886612592)
            goto LABEL_5;
          goto LABEL_36;
        }
LABEL_40:
        v23 = 0x4000;
        goto LABEL_41;
      }
      if ((_DWORD)a4 == 1886614578)
      {
        *((_QWORD *)v19 + 80) = 1024;
        v19[121] = 1;
LABEL_42:
        *a10 = v19;
        v19[657] = 1;
        if (a9)
        {
          v24 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(a1 + 56);
          if (v24)
            v24(*(_QWORD *)a1, *(_QWORD *)(a1 + 72), *(unsigned int *)(a2 + 40), *((unsigned int *)v19 + 15), a4);
        }
        else
        {
          v19[657] = 0;
        }
        return 0;
      }
      if ((_DWORD)a4 == 1970170734)
        goto LABEL_42;
      v21 = 2053207651;
LABEL_39:
      if ((_DWORD)a4 == v21)
        goto LABEL_40;
LABEL_5:
      *a10 = v19;
      v19[657] = 1;
      return 0;
    }
    if ((int)a4 <= 1700880738)
    {
      if ((int)a4 > 1635017570)
      {
        if ((_DWORD)a4 == 1635017571)
          goto LABEL_42;
        v21 = 1685353248;
        goto LABEL_39;
      }
      if ((_DWORD)a4 == 1633891104)
        goto LABEL_32;
      if ((_DWORD)a4 != 1633973363)
        goto LABEL_5;
    }
    else
    {
      if ((int)a4 > 1700886114)
      {
        if ((_DWORD)a4 == 1700886115)
          goto LABEL_40;
        if ((_DWORD)a4 != 1700998451)
        {
          v22 = 1701143347;
          goto LABEL_31;
        }
LABEL_32:
        v23 = 2048;
LABEL_41:
        *((_QWORD *)v19 + 80) = v23;
        goto LABEL_42;
      }
      if ((_DWORD)a4 != 1700880739)
      {
        v22 = 1700881203;
LABEL_31:
        if ((_DWORD)a4 != v22)
          goto LABEL_5;
        goto LABEL_32;
      }
    }
LABEL_33:
    v23 = 1024;
    goto LABEL_41;
  }
  return FigSignalErrorAt();
}

uint64_t FrameQueueEntryInit(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 64) = 0;
  result = a1 + 64;
  *(_QWORD *)(result + 8) = result;
  return result;
}

uint64_t CheckPesHeaderLength(CMBlockBufferRef theSourceBuffer, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, BOOL *a6)
{
  unsigned __int8 v12;
  uint64_t result;
  unsigned __int8 *p_destination;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 destination;

  *a6 = 0;
  *a5 = 0;
  if (a4 < 8)
    return 0;
  destination = 0;
  if (a3)
  {
    v12 = *(_BYTE *)(a3 + 6);
    destination = v12;
  }
  else
  {
    result = CMBlockBufferCopyDataBytes(theSourceBuffer, a2 + 6, 1uLL, &destination);
    if ((_DWORD)result)
      return result;
    v12 = destination;
  }
  if ((v12 & 0xC0) != 0x80)
  {
    v15 = 7;
    do
    {
      if (6 - a4 + v15 == 7)
        return 0;
      if (a3)
      {
        destination = *(_BYTE *)(a3 + 6 + v15 - 7);
      }
      else
      {
        result = CMBlockBufferCopyDataBytes(theSourceBuffer, a2 + v15 - 1, 1uLL, &destination);
        if ((_DWORD)result)
          return result;
      }
      if (v15 == 24)
        return FigSignalErrorAt();
      v16 = destination;
      ++v15;
    }
    while (destination == 255);
    if ((destination & 0xC0) == 0x40)
    {
      if (v15 >= a4)
        return 0;
      if (a3)
      {
        v16 = *(unsigned __int8 *)(a3 + v15);
        destination = *(_BYTE *)(a3 + v15);
      }
      else
      {
        result = CMBlockBufferCopyDataBytes(theSourceBuffer, a2 + v15, 1uLL, &destination);
        if ((_DWORD)result)
          return result;
        v16 = destination;
      }
    }
    else
    {
      v15 -= 2;
    }
    if ((v16 & 0xF0) == 0x20)
    {
      v18 = 5;
    }
    else if ((v16 & 0xF0) == 0x30)
    {
      v18 = 10;
    }
    else
    {
      if (v16 != 15)
        return FigSignalErrorAt();
      v18 = 1;
    }
    result = 0;
    v19 = v15 + v18;
    *a6 = v19 < a4;
    *a5 = v19;
    return result;
  }
  if (a4 < 9)
    return 0;
  if (a3)
  {
    p_destination = (unsigned __int8 *)(a3 + 8);
    goto LABEL_23;
  }
  p_destination = &destination;
  result = CMBlockBufferCopyDataBytes(theSourceBuffer, a2 + 8, 1uLL, &destination);
  if (!(_DWORD)result)
  {
LABEL_23:
    v17 = *p_destination + 9;
    *a5 = v17;
    if (v17 < a4)
    {
      result = 0;
      *a6 = 1;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t ReadTimestampFromPesHeader(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  __int16 v14;

  if ((a2[6] & 0xC0) == 0x80)
  {
    *(_BYTE *)(a3 + 27) = 0;
    v9 = a2[7];
    if (a4 >= 0x13 && v9 >= 0xC0)
    {
      if (!ReadPTSorDTSWithVerify(a2 + 9, (unint64_t *)a3, 49))
        return FigSignalErrorAt();
      v10 = a2 + 14;
      goto LABEL_22;
    }
    if (a4 >= 0xE && (v9 & 0x80) != 0)
    {
      if (ReadPTSorDTSWithVerify(a2 + 9, (unint64_t *)a3, 33))
      {
        *(_BYTE *)(a3 + 25) = 1;
        if (a6 == 192 || a6 == 1)
        {
          *(_WORD *)(a3 + 26) = 257;
          *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
        }
        else
        {
          *(_BYTE *)(a3 + 26) = 0;
        }
        return 0;
      }
      return FigSignalErrorAt();
    }
    goto LABEL_29;
  }
  v11 = 6;
  if (a4 >= 7)
  {
    while (1)
    {
      v12 = a2[v11];
      if (v12 != 255)
        break;
      if (a4 == ++v11)
      {
        v11 = a4;
        goto LABEL_18;
      }
    }
    if ((v12 & 0xC0) == 0x40)
      v11 += 2;
  }
LABEL_18:
  if (v11 + 10 <= a4)
  {
    v13 = &a2[v11];
    if ((a2[v11] & 0xF0) == 0x30)
    {
      if (!ReadPTSorDTSWithVerify(&a2[v11], (unint64_t *)a3, 49))
        return FigSignalErrorAt();
      v10 = v13 + 5;
LABEL_22:
      if (ReadPTSorDTSWithVerify(v10, (unint64_t *)(a3 + 8), 17))
      {
        v14 = 257;
LABEL_28:
        *(_WORD *)(a3 + 25) = v14;
        return 0;
      }
      return FigSignalErrorAt();
    }
  }
  if (v11 + 5 > a4 || a2[v11] < 0x20u)
  {
LABEL_29:
    *(_WORD *)(a3 + 25) = 0;
    return 0;
  }
  if (ReadPTSorDTSWithVerify(&a2[v11], (unint64_t *)a3, 33))
  {
    v14 = 1;
    goto LABEL_28;
  }
  return FigSignalErrorAt();
}

uint64_t ReadPTSorDTSWithVerify(unsigned __int8 *a1, unint64_t *a2, int a3)
{
  unsigned int v3;
  int v4;
  unint64_t v5;

  v3 = *a1;
  if ((v3 & 0xFFFFFFF1) != a3)
    return 0;
  v4 = a1[2];
  if ((v4 & 1) == 0)
    return 0;
  v5 = a1[4];
  if ((v5 & 1) == 0)
    return 0;
  *a2 = (v5 >> 1) | ((unint64_t)((v4 << 7) & 0x7F00 | ((a1[1] | (((v3 >> 1) & 7) << 8)) << 15) | a1[3]) << 7);
  return 1;
}

uint64_t ProcessPesData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, unint64_t a5, int a6, uint64_t a7, size_t *a8, _BYTE *a9)
{
  size_t v11;
  char *v12;
  size_t v13;
  uint64_t TimestampFromPesHeader;
  size_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t (*v26)(uint64_t, OpaqueCMBlockBuffer *, size_t, char *, size_t, __int128 *);
  size_t v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  size_t v39;
  char *v40;
  size_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  BOOL v45;
  __int128 v46;
  __int128 v47;
  size_t length;
  char *returnedPointerOut;

  *a9 = 0;
  *a8 = 0;
  if (!a5)
    return 0;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  length = 0;
  returnedPointerOut = 0;
  v46 = 0u;
  v47 = 0u;
  v45 = 0;
  if (a6)
  {
    *(_BYTE *)(a1 + 122) = 1;
    *(_QWORD *)(a1 + 128) = a7;
    TimestampFromPesHeader = CheckPesHeaderLength(a2, a3, (uint64_t)a4, a5, &length, &v45);
    if (!(_DWORD)TimestampFromPesHeader)
    {
      if (!v45)
      {
        v24 = CopyBytesAtOffset(a2, v13, v12, (void *)(a1 + 152), v11);
        if (!(_DWORD)v24)
        {
          v25 = length;
          *(_QWORD *)(a1 + 424) = v11;
          *(_QWORD *)(a1 + 432) = v25;
LABEL_62:
          *a8 = v11;
          return v24;
        }
LABEL_61:
        PesErrorHandling(a1, v24);
        goto LABEL_62;
      }
      if (!a2)
      {
        returnedPointerOut = v12;
        v17 = length;
        v18 = v12;
        v12 += length;
        goto LABEL_22;
      }
      v17 = length;
      TimestampFromPesHeader = CMBlockBufferAccessDataBytes(a2, v13, length, (void *)(a1 + 152), &returnedPointerOut);
      if (!(_DWORD)TimestampFromPesHeader)
      {
        v13 += v17;
        v18 = returnedPointerOut;
LABEL_22:
        v11 -= v17;
        *a8 = v17;
        goto LABEL_52;
      }
    }
LABEL_60:
    v24 = TimestampFromPesHeader;
    goto LABEL_61;
  }
  v19 = *(_QWORD *)(a1 + 424);
  if (!v19)
  {
    if (*(_BYTE *)(a1 + 122))
    {
      BYTE8(v47) = 0;
      goto LABEL_25;
    }
    goto LABEL_72;
  }
  v20 = (_QWORD *)(a1 + 424);
  v21 = *(_QWORD *)(a1 + 432);
  if (!v21)
  {
    v44 = (_QWORD *)(a1 + 424);
    v29 = 25;
    if (v19 < 9)
      v29 = 9;
    v30 = v29 - v19;
    v42 = v30;
    if (v30 >= a5)
      v31 = a5;
    else
      v31 = v30;
    v43 = a1 + 152;
    TimestampFromPesHeader = CopyBytesAtOffset(a2, a3, a4, (void *)(a1 + 152 + v19), v31);
    if ((_DWORD)TimestampFromPesHeader)
      goto LABEL_60;
    TimestampFromPesHeader = CheckPesHeaderLength(0, 0, v43, *v44 + v31, (unint64_t *)(a1 + 432), &v45);
    if ((_DWORD)TimestampFromPesHeader)
      goto LABEL_60;
    if (v45)
    {
      v20 = v44;
      v32 = *(_QWORD *)(a1 + 432) - *v44;
      if (a2)
        v33 = 0;
      else
        v33 = *(_QWORD *)(a1 + 432) - *v44;
      v12 += v33;
      if (a2)
        v34 = *(_QWORD *)(a1 + 432) - *v44;
      else
        v34 = 0;
      v13 += v34;
      v11 -= v32;
      *a8 += v32;
      goto LABEL_51;
    }
    *v44 += v31;
    if (v42 < v11)
    {
      if (a2)
        v39 = 0;
      else
        v39 = v31;
      v40 = &v12[v39];
      if (a2)
        v41 = v31;
      else
        v41 = 0;
      v24 = ProcessPesData(a1, a2, v41 + v13, v40, v11 - v31, 0, a7, a8, a9);
      v11 = *a8 + v31;
      goto LABEL_62;
    }
LABEL_72:
    v24 = 0;
    goto LABEL_62;
  }
  v22 = v21 - v19;
  if (!v22)
  {
LABEL_51:
    v18 = (char *)(a1 + 152);
    v17 = *(_QWORD *)(a1 + 432);
    length = v17;
    returnedPointerOut = (char *)(a1 + 152);
    *v20 = 0;
    v20[1] = 0;
LABEL_52:
    BYTE8(v47) = 1;
    *(_QWORD *)&v47 = *(_QWORD *)(a1 + 128);
    if (*v18 || v18[1] || v18[2] != 1)
      goto LABEL_59;
    v35 = __rev16(*((unsigned __int16 *)v18 + 2));
    *(_QWORD *)(a1 + 136) = v35;
    *(_QWORD *)(a1 + 144) = 0;
    *(_BYTE *)(a1 + 123) = (_DWORD)v35 == 0;
    if ((_DWORD)v35)
    {
      v36 = v35 >= v17 - 6;
      v37 = v35 - (v17 - 6);
      if (!v36)
      {
LABEL_59:
        TimestampFromPesHeader = FigSignalErrorAt();
        goto LABEL_60;
      }
      *(_QWORD *)(a1 + 136) = v37;
    }
    else if (!*(_BYTE *)(a1 + 120))
    {
      goto LABEL_59;
    }
    TimestampFromPesHeader = ReadTimestampFromPesHeader(0, v18, (uint64_t)&v46, v17, 0, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48));
    if ((_DWORD)TimestampFromPesHeader)
      goto LABEL_60;
LABEL_25:
    if (!*(_BYTE *)(a1 + 123) && v11 >= *(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 144))
      v11 = *(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 144);
    if (v11
      && (v26 = *(uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, size_t, char *, size_t, __int128 *))(a1 + 840)) != 0)
    {
      v24 = v26(a1, a2, v13, v12, v11, &v46);
    }
    else
    {
      v24 = 0;
    }
    v27 = *(_QWORD *)(a1 + 136);
    v28 = *(_QWORD *)(a1 + 144) + v11;
    *(_QWORD *)(a1 + 144) = v28;
    if (v28 >= v27 && !*(_BYTE *)(a1 + 123))
    {
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
      *a9 = 1;
    }
    v11 += *a8;
    goto LABEL_62;
  }
  if (v22 >= a5)
    v23 = a5;
  else
    v23 = v22;
  CopyBytesAtOffset(a2, a3, a4, (void *)(a1 + v19 + 152), v23);
  *(_QWORD *)(a1 + 424) += v23;
  *a8 = v23;
  v11 -= v23;
  if (v11)
  {
    if (a2)
      v13 += v23;
    else
      v12 += v23;
    goto LABEL_51;
  }
  return 0;
}

uint64_t CopyBytesAtOffset(OpaqueCMBlockBuffer *a1, size_t a2, void *__src, void *__dst, size_t __n)
{
  if (a1)
    return CMBlockBufferCopyDataBytes(a1, a2, __n, __dst);
  memcpy(__dst, __src, __n);
  return 0;
}

uint64_t *PesErrorHandling(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t);

  FigMPEG2VideoFrameFlush(a1);
  result = PesCleanOutData(a1);
  if ((_DWORD)a2)
  {
    v5 = *(_QWORD **)(a1 + 8);
    v6 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))v5[8];
    if (v6)
      return (uint64_t *)v6(*v5, v5[9], *(unsigned int *)(*(_QWORD *)a1 + 40), *(unsigned int *)(a1 + 60), a2);
  }
  return result;
}

void PesPacketListClean(uint64_t a1)
{
  _QWORD *i;
  const void *v3;

  *(_QWORD *)(a1 + 8) = 0;
  for (i = *(_QWORD **)a1; *(_QWORD *)a1; i = *(_QWORD **)a1)
  {
    v3 = (const void *)i[1];
    *(_QWORD *)a1 = *i;
    if (v3)
      CFRelease(v3);
    free(i);
  }
}

uint64_t PesPacketListSaveChunk(_QWORD *a1, CMBlockBufferRef targetBBuf, size_t offsetToData, const void *a4, size_t dataLength, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD **v14;
  _QWORD *v15;
  uint64_t result;
  __int128 v17;
  CMBlockBufferRef *v18;
  OpaqueCMBlockBuffer *v19;
  const __CFAllocator *v20;
  void *v21;
  void *v22;

  if (*(_BYTE *)(a6 + 24))
  {
    v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x1020040586F8431uLL);
    if (!v12)
      return FigSignalErrorAt();
    v13 = v12;
    v14 = (_QWORD **)(a1 + 1);
    if (*a1)
    {
      v15 = *v14;
    }
    else
    {
      v15 = a1 + 1;
      v14 = (_QWORD **)a1;
    }
    *v15 = v12;
    *v14 = v12;
    v17 = *(_OWORD *)(a6 + 16);
    *((_OWORD *)v12 + 1) = *(_OWORD *)a6;
    *((_OWORD *)v12 + 2) = v17;
  }
  else
  {
    v13 = (_QWORD *)a1[1];
    if (!v13)
      return 0;
  }
  v19 = (OpaqueCMBlockBuffer *)v13[1];
  v18 = (CMBlockBufferRef *)(v13 + 1);
  result = (uint64_t)v19;
  if (v19
    || (result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4u, 0, v18), !(_DWORD)result)
    && (result = (uint64_t)*v18) != 0)
  {
    if (targetBBuf)
      return CMBlockBufferAppendBufferReference((CMBlockBufferRef)result, targetBBuf, offsetToData, dataLength, 0);
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
    v21 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE10], dataLength, 0);
    if (v21)
    {
      v22 = v21;
      memcpy(v21, a4, dataLength);
      return CMBlockBufferAppendMemoryBlock(*v18, v22, dataLength, v20, 0, 0, dataLength, 0);
    }
    return FigSignalErrorAt();
  }
  return result;
}

__n128 FrameQueueMove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;

  v4 = a1 + 88;
  PesFrameHeaderDestroy((_QWORD *)(a1 + 88));
  ClosedCaptionQueueClean(a1 + 64);
  while (1)
  {
    v5 = *(uint64_t **)(a2 + 64);
    if (!v5)
      break;
    v6 = *v5;
    v7 = (_QWORD *)v5[1];
    if (*v5)
    {
      *(_QWORD *)(v6 + 8) = v7;
      v7 = (_QWORD *)v5[1];
    }
    else
    {
      *(_QWORD *)(a2 + 72) = v7;
    }
    *v7 = v6;
    v8 = *(uint64_t ***)(a1 + 72);
    *v5 = 0;
    v5[1] = (uint64_t)v8;
    *v8 = v5;
    *(_QWORD *)(a1 + 72) = v5;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(__n128 *)(a2 + 88);
  v11 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 120);
  *(__n128 *)v4 = result;
  *(_OWORD *)(v4 + 16) = v11;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v12 = *(_QWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 132) = v12;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return result;
}

void PesFrameHeaderDestroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[3];
  if (v2)
  {
    free(v2);
    a1[3] = 0;
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    free(v3);
    a1[2] = 0;
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    free(v4);
    a1[4] = 0;
  }
}

void ClosedCaptionQueueClean(uint64_t a1)
{
  uint64_t *i;
  uint64_t v3;
  _QWORD *v4;
  const void *v5;

  for (i = *(uint64_t **)a1; *(_QWORD *)a1; i = *(uint64_t **)a1)
  {
    v3 = *i;
    v4 = (_QWORD *)i[1];
    if (*i)
    {
      *(_QWORD *)(v3 + 8) = v4;
      v4 = (_QWORD *)i[1];
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v4;
    }
    *v4 = v3;
    v5 = (const void *)i[2];
    if (v5)
      CFRelease(v5);
    free(i);
  }
}

uint64_t FrameQueueEntryMakeRetainable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = a2;
  if (!*(_BYTE *)(a2 + 145))
  {
    v3 = malloc_type_calloc(1uLL, 0x98uLL, 0x10B0040949082C0uLL);
    if (v3)
    {
      v4 = v3;
      v3[8] = 0;
      v3[9] = v3 + 8;
      FrameQueueMove((uint64_t)v3, v2);
      *((_BYTE *)v4 + 145) = 1;
      return (uint64_t)v4;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void FrameQueueEntryClean(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 56) = 0;
  ClosedCaptionQueueClean(a1 + 64);
  *(_WORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 146) = 0;
  *(_DWORD *)(a1 + 148) = 0;
}

void FrameQueueEntryDestroy(uint64_t a1)
{
  FrameQueueEntryClean(a1);
  PesFrameHeaderDestroy((_QWORD *)(a1 + 88));
  if (*(_BYTE *)(a1 + 145))
    free((void *)a1);
}

uint64_t *FrameQueueClean(uint64_t a1)
{
  uint64_t *result;
  uint64_t v3;
  _QWORD *v4;

  result = *(uint64_t **)a1;
  if (result)
  {
    do
    {
      v3 = *result;
      v4 = (_QWORD *)result[1];
      if (*result)
      {
        *(_QWORD *)(v3 + 8) = v4;
        v4 = (_QWORD *)result[1];
      }
      else
      {
        *(_QWORD *)(a1 + 8) = v4;
      }
      *v4 = v3;
      FrameQueueEntryDestroy((uint64_t)result);
      result = *(uint64_t **)a1;
    }
    while (*(_QWORD *)a1);
  }
  return result;
}

uint64_t CloseCaptionQueueAdd(uint64_t a1, const void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;
  uint64_t result;
  _QWORD *v8;

  v4 = malloc_type_calloc(1uLL, 0x18uLL, 0xA0040A8488062uLL);
  if (!v4)
    return 4294954510;
  v5 = v4;
  if (a2)
    v6 = CFRetain(a2);
  else
    v6 = 0;
  result = 0;
  v5[2] = v6;
  v8 = *(_QWORD **)(a1 + 8);
  *v5 = 0;
  v5[1] = v8;
  *v8 = v5;
  *(_QWORD *)(a1 + 8) = v5;
  return result;
}

void PesCleanAfterFrameEmit(uint64_t a1)
{
  void *v2;
  unsigned int v3;

  FrameQueueEntryClean(a1 + 456);
  v2 = *(void **)(a1 + 608);
  if (v2)
  {
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE10], v2);
    *(_QWORD *)(a1 + 608) = 0;
  }
  *(_BYTE *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  v3 = *(_DWORD *)(a1 + 648);
  if (v3 > *(_DWORD *)(a1 + 652))
  {
    if (v3 >= 0x18)
      v3 = 24;
    *(_DWORD *)(a1 + 652) = v3;
  }
  *(_DWORD *)(a1 + 648) = 0;
}

uint64_t *PesCleanOutData(uint64_t a1)
{
  uint64_t *result;
  uint64_t (*v3)(uint64_t);

  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  FigMPEG2VideoFrameDiscard(a1);
  PesCleanAfterFrameEmit(a1);
  result = FrameQueueClean(a1 + 728);
  *(_DWORD *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 451) = 0;
  *(_BYTE *)(a1 + 122) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  v3 = *(uint64_t (**)(uint64_t))(a1 + 848);
  if (v3)
    result = (uint64_t *)v3(a1);
  *(_QWORD *)(a1 + 816) = -1;
  return result;
}

uint64_t *PesReinitialize(uint64_t a1)
{
  uint64_t *result;

  result = PesCleanOutData(a1);
  *(_BYTE *)(a1 + 658) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  return result;
}

uint64_t FindPesFromStreamID(uint64_t a1, int a2)
{
  uint64_t result;

  for (result = *(_QWORD *)(a1 + 24); result; result = *(_QWORD *)(result + 32))
  {
    if (*(_DWORD *)(result + 64) == a2)
      break;
  }
  return result;
}

uint64_t PesCreateBlockBufferFromFrameMemory(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  const __CFAllocator *v5;

  if (*(_QWORD *)(a1 + 512))
    return 0;
  v3 = a1 + 608;
  v4 = *(void **)(a1 + 608);
  if (v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
    v1 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), v4, *(_QWORD *)(a1 + 632), (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, *(_QWORD *)(a1 + 616), 0, (CMBlockBufferRef *)(a1 + 512));
    if ((_DWORD)v1)
      CFAllocatorDeallocate(v5, *(void **)v3);
  }
  else
  {
    v1 = 0;
  }
  *(_BYTE *)(a1 + 656) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  return v1;
}

uint64_t PesAddMemoryToFrameMemory(uint64_t a1, const void *a2, unint64_t a3, unint64_t a4, size_t *a5, char *a6)
{
  size_t v9;
  uint64_t result;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  void *v21;
  size_t v22;
  char v24;
  uint64_t v25;

  v9 = a3;
  if (*(_QWORD *)(a1 + 512))
    return PesAddMemoryToFrameBlockBuffer(a1, a2, a3, a4, a5, a6);
  if (*(_BYTE *)(a1 + 656))
  {
    v13 = *(_QWORD *)(a1 + 624);
  }
  else
  {
    *(_BYTE *)(a1 + 656) = 1;
    *(_QWORD *)(a1 + 624) = a4;
    v13 = a4;
  }
  v14 = *(void **)(a1 + 608);
  if (!v14)
  {
    if (v13)
    {
      if (*(_BYTE *)(a1 + 119))
        v19 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      else
        v19 = v13;
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 640);
      if (v19 < a3)
      {
        v19 = (a3 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
        *(_QWORD *)(a1 + 640) = v19;
        if (v19 > *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104))
          goto LABEL_15;
      }
    }
    v21 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE10], v19, 0);
    *(_QWORD *)(a1 + 608) = v21;
    if (!v21)
    {
LABEL_38:
      v25 = FigSignalErrorAt();
      PesCleanAfterFrameEmit(a1);
      return v25;
    }
    *(_QWORD *)(a1 + 632) = v19;
    *(_QWORD *)(a1 + 616) = 0;
    v22 = *(_QWORD *)(a1 + 624);
    if (v22 < v9 && v22 != 0)
      v9 = *(_QWORD *)(a1 + 624);
    goto LABEL_29;
  }
  v15 = *(_QWORD *)(a1 + 616);
  v16 = v13 - v15;
  if (v13 - v15 >= a3)
    v16 = a3;
  if (v13)
    v9 = v16;
  v17 = v9 + v15;
  if (*(_BYTE *)(a1 + 119))
    v17 = (v9 + v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v17 <= *(_QWORD *)(a1 + 632))
    goto LABEL_29;
  v18 = (v17 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
  *(_QWORD *)(a1 + 640) = v18;
  if (v18 <= *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104))
  {
    v20 = (char *)CFAllocatorReallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE10], v14, v18, 0);
    *(_QWORD *)(a1 + 608) = v20;
    *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 640);
    goto LABEL_30;
  }
LABEL_15:
  PesErrorHandling(a1, 4294954325);
  v9 = 0;
LABEL_29:
  v20 = *(char **)(a1 + 608);
LABEL_30:
  if (!v20)
    goto LABEL_38;
  if (a2)
    memcpy(&v20[*(_QWORD *)(a1 + 616)], a2, v9);
  *(_QWORD *)(a1 + 616) += v9;
  *a5 = v9;
  if (a4 && *(_QWORD *)(a1 + 616) >= a4)
  {
    result = PesCreateBlockBufferFromFrameMemory(a1);
    v24 = 1;
  }
  else
  {
    v24 = 0;
    result = 0;
  }
  *a6 = v24;
  return result;
}

uint64_t PesAddMemoryToFrameBlockBuffer(uint64_t a1, const void *a2, unint64_t size, unint64_t a4, size_t *a5, _BYTE *a6)
{
  const __CFAllocator *v12;
  void *v13;
  void *v14;
  OpaqueCMBlockBuffer *v15;
  uint64_t Empty;
  unint64_t v17;
  uint64_t v18;

  if (!size)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 116))
  {
    if (size > a4 || *(_BYTE *)(a1 + 119) || (a2 & 3) != 0 && *(_BYTE *)(a1 + 117))
      return PesAddMemoryToFrameMemory(a1, a2);
    if (*(_BYTE *)(a1 + 118) && (a2 & 0xF) != 0)
      return PesAddMemoryToFrameMemory(a1, a2);
  }
  if (*(_QWORD *)(a1 + 608))
    return PesAddMemoryToFrameMemory(a1, a2);
  if (*(_BYTE *)(a1 + 656))
  {
    a4 = *(_QWORD *)(a1 + 624);
    if (!a4)
      goto LABEL_18;
  }
  else
  {
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 624) = a4;
    *(_BYTE *)(a1 + 656) = 1;
    if (!a4)
      goto LABEL_18;
  }
  if (a4 - *(_QWORD *)(a1 + 616) < size)
    size = a4 - *(_QWORD *)(a1 + 616);
LABEL_18:
  *a5 = size;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
  v13 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE10], size, 0);
  v14 = v13;
  if (a2)
  {
    if (v13)
    {
      memcpy(v13, a2, *a5);
      goto LABEL_24;
    }
  }
  else
  {
    bzero(v13, *a5);
    if (v14)
    {
LABEL_24:
      v15 = *(OpaqueCMBlockBuffer **)(a1 + 512);
      if (!v15)
      {
        Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), *(_DWORD *)(a1 + 652), 0, (CMBlockBufferRef *)(a1 + 512));
        if ((_DWORD)Empty)
          goto LABEL_32;
        v15 = *(OpaqueCMBlockBuffer **)(a1 + 512);
      }
      Empty = CMBlockBufferAppendMemoryBlock(v15, v14, *a5, v12, 0, 0, *a5, 0);
      if (!(_DWORD)Empty)
      {
        ++*(_DWORD *)(a1 + 648);
        v17 = *(_QWORD *)(a1 + 616) + *a5;
        *(_QWORD *)(a1 + 616) = v17;
        v18 = 0;
        if (*(_QWORD *)(a1 + 624) - 1 < v17)
          *a6 = 1;
        return v18;
      }
LABEL_32:
      v18 = Empty;
      CFAllocatorDeallocate(v12, v14);
      return v18;
    }
  }
  return FigSignalErrorAt();
}

uint64_t PesAddBlockBufferToFrameMemory(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, size_t a4, unint64_t a5, _QWORD *a6, char *a7)
{
  size_t v10;
  uint64_t result;
  unint64_t v15;
  size_t v16;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;

  *a6 = 0;
  if (!a4)
    return 0;
  v10 = a4;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  v16 = 0;
  while (1)
  {
    result = CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &dataPointerOut);
    if ((_DWORD)result)
      break;
    v15 = v10 >= lengthAtOffsetOut ? lengthAtOffsetOut : v10;
    result = PesAddMemoryToFrameMemory(a1, dataPointerOut, v15, a5, &v16, a7);
    if ((_DWORD)result)
      break;
    *a6 += v16;
    offset += v15;
    v10 -= v15;
    if (!v10)
      return 0;
  }
  return result;
}

uint64_t PesAddBlockBufferToFrameBlockBuffer(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, size_t dataLength, unint64_t a5, size_t *a6, char *a7)
{
  size_t v7;
  uint64_t result;
  unint64_t v15;
  OpaqueCMBlockBuffer *v16;
  unint64_t v17;
  char *v18;
  size_t lengthAtOffsetOut;

  if (!theBuffer)
    return FigSignalErrorAt();
  v7 = dataLength;
  if (!dataLength)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 608))
    return PesAddBlockBufferToFrameMemory(a1, theBuffer, offset, dataLength, a5, a6, a7);
  if (*(_BYTE *)(a1 + 116) && !*(_QWORD *)(a1 + 512))
  {
    if (dataLength < a5)
      return PesAddBlockBufferToFrameMemory(a1, theBuffer, offset, v7, a5, a6, a7);
    v18 = 0;
    lengthAtOffsetOut = 0;
    if (CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &v18))
      return 4294954593;
    if (lengthAtOffsetOut < v7
      || *(_BYTE *)(a1 + 117) && (v18 & 3) != 0
      || *(_BYTE *)(a1 + 118) && (v18 & 0xF) != 0)
    {
      return PesAddBlockBufferToFrameMemory(a1, theBuffer, offset, v7, a5, a6, a7);
    }
  }
  if (*(_BYTE *)(a1 + 656))
  {
    v15 = *(_QWORD *)(a1 + 624);
    if (v15)
      goto LABEL_9;
  }
  else
  {
    *(_BYTE *)(a1 + 656) = 1;
    *(_QWORD *)(a1 + 624) = a5;
    *(_QWORD *)(a1 + 616) = 0;
    v15 = a5;
    if (a5)
    {
LABEL_9:
      if (v15 - *(_QWORD *)(a1 + 616) < v7)
        v7 = v15 - *(_QWORD *)(a1 + 616);
    }
  }
  v16 = *(OpaqueCMBlockBuffer **)(a1 + 512);
  if (v16)
  {
    if (v15 != a5)
      return FigSignalErrorAt();
    goto LABEL_18;
  }
  result = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), *(_DWORD *)(a1 + 652), 0, (CMBlockBufferRef *)(a1 + 512));
  if (!(_DWORD)result)
  {
    v16 = *(OpaqueCMBlockBuffer **)(a1 + 512);
LABEL_18:
    result = CMBlockBufferAppendBufferReference(v16, theBuffer, offset, v7, 0);
    ++*(_DWORD *)(a1 + 648);
    *a6 = v7;
    v17 = *(_QWORD *)(a1 + 616) + v7;
    *(_QWORD *)(a1 + 616) = v17;
    *a7 = a5 - 1 < v17;
  }
  return result;
}

void *PesFrameHeadersInit(uint64_t a1, size_t a2)
{
  size_t v4;
  void *result;
  size_t v6;

  v4 = 8 * a2;
  *(_QWORD *)(a1 + 16) = malloc_type_realloc(*(void **)(a1 + 16), 8 * a2, 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 24) = malloc_type_realloc(*(void **)(a1 + 24), v4, 0x100004000313F17uLL);
  result = malloc_type_realloc(*(void **)(a1 + 32), a2, 0x100004077774924uLL);
  *(_QWORD *)(a1 + 32) = result;
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >= a2)
    v6 = a2;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

BOOL PesFrameHeaderAddOffset(_BOOL8 result, uint64_t a2, char a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v5 = (uint64_t *)result;
    result = PesFrameHeaderCheckSize((_QWORD *)result, 1uLL);
    if (result)
    {
      *(_QWORD *)(v5[2] + 8 * *v5) = a2;
      *(_BYTE *)(v5[4] + *v5) = a3;
      v6 = v5[3];
      *(_QWORD *)(v6 + 8 * *v5) = 0;
      if (*v5)
      {
        *(_QWORD *)(v6 + 8 * *v5 - 8) = a2 - *(_QWORD *)(v5[2] + 8 * *v5 - 8);
        v7 = *v5 + 1;
      }
      else
      {
        v7 = 1;
      }
      *v5 = v7;
    }
  }
  return result;
}

BOOL PesFrameHeaderCheckSize(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1[2] && a1[3] && a1[4] && a1[1] > *a1 + a2)
    return 1;
  v3 = a1[1];
  v4 = 8;
  if (a2 < 8)
    v4 = a2;
  if (__CFADD__(v3, a2))
    v4 = 0;
  PesFrameHeadersInit((uint64_t)a1, v4 + v3);
  return a1[2] && a1[3] && a1[4];
}

_QWORD *PesFrameHeaderFinalizeFrame(_QWORD *result, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t i;
  unsigned int v6;
  uint64_t v7;
  unsigned int sourceBytes;

  if (result)
  {
    v2 = result;
    v3 = result[68];
    if (v3)
    {
      *(_QWORD *)(result[71] + 8 * v3 - 8) = result[77] - *(_QWORD *)(result[70] + 8 * v3 - 8);
      if (a2)
      {
        v4 = result[68];
        if (v4)
        {
          for (i = 0; i < v4; ++i)
          {
            v6 = bswap32(*(_QWORD *)(v2[71] + 8 * i) - 4);
            sourceBytes = v6;
            v7 = v2[76];
            if (v7)
            {
              *(_DWORD *)(v7 + *(_QWORD *)(v2[70] + 8 * i)) = v6;
            }
            else
            {
              result = (_QWORD *)CMBlockBufferReplaceDataBytes(&sourceBytes, (CMBlockBufferRef)v2[64], *(_QWORD *)(v2[70] + 8 * i), 4uLL);
              if ((_DWORD)result)
                return result;
              v4 = v2[68];
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL PesFrameHeaderAppendList(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  _BOOL8 result;
  unint64_t v7;

  result = PesFrameHeaderCheckSize(a1, *a2);
  if (result && *a2)
  {
    v7 = 0;
    do
    {
      result = PesFrameHeaderAddOffset((_BOOL8)a1, *(_QWORD *)(a2[2] + 8 * v7) + a3, *(_BYTE *)(a2[4] + v7));
      ++v7;
    }
    while (v7 < *a2);
  }
  return result;
}

uint64_t FigMPEG2ParserSetAudioCharacteristics(uint64_t result, int a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 658))
  {
    v2 = *(_QWORD *)(result + 776);
    if (v2)
    {
      *(_QWORD *)(result + 680) += 90000 * v2 / *(unsigned int *)(result + 768);
      *(_QWORD *)(result + 776) = 0;
    }
  }
  *(_DWORD *)(result + 768) = a2;
  return result;
}

uint64_t FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *Retainable;
  _QWORD *v11;
  uint64_t v12;
  CMTimeValue v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CMTimeValue v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CMTime v41;
  CMTime v42;
  CMTime v43;

  memset(&v43, 0, sizeof(v43));
  if (*(_BYTE *)(a2 + 48) && *(_BYTE *)(a2 + 49))
    *(_DWORD *)(a2 + 80) |= 0x1000u;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 100);
  if (v5 == 1)
  {
    if (*(_BYTE *)(a1 + 658))
    {
      v7 = *(_QWORD *)(a1 + 776);
      v6 = *(_QWORD *)(a1 + 680) + 90000 * v7 / *(unsigned int *)(a1 + 768);
    }
    else
    {
      v7 = 0;
      *(_BYTE *)(a1 + 658) = 1;
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 680) = v6;
    }
    v20 = *(unsigned int *)(a2 + 128);
    *(_DWORD *)(a1 + 772) = v20;
    *(_QWORD *)(a1 + 776) = v7 + v20;
    *(_QWORD *)(a1 + 688) = v6;
    goto LABEL_54;
  }
  if (!v5)
  {
    *(_BYTE *)(a1 + 658) = 1;
    if (!*(_BYTE *)(a2 + 49))
    {
      v43 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
LABEL_55:
      v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 84);
      if (v32)
      {
        v33 = **(_QWORD **)(a1 + 8);
        v34 = *(unsigned int *)(a1 + 60);
        v35 = *(_QWORD *)(a1 + 104);
        v36 = *(_QWORD *)(a2 + 56);
        v37 = *(unsigned int *)(a2 + 80);
        v38 = *(_QWORD *)(a2 + 40);
        v42 = v43;
        v41 = v43;
        v26 = v32(v33, v34, v35, v36, &v42, &v41, v37, v38, 0, 0, 0, 0);
      }
      else
      {
        v26 = 0;
      }
      FrameQueueEntryDestroy(a2);
      return v26;
    }
    v6 = *(_QWORD *)(a2 + 24);
LABEL_54:
    CMTimeMake(&v43, v6, 90000);
    goto LABEL_55;
  }
  v8 = *(unsigned __int8 *)(a2 + 49);
  *(_BYTE *)(a2 + 50) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 32) = v9;
  if (!*(_QWORD *)(a1 + 728))
  {
    if (!v8)
    {
      v27 = *(_QWORD *)(a1 + 776);
      v6 = *(_QWORD *)(a1 + 680) + 90000 * v27 / *(unsigned int *)(a1 + 768);
      goto LABEL_53;
    }
    v21 = *(_QWORD *)(a1 + 712);
    if (!*(_BYTE *)(a1 + 658))
    {
      v29 = *(_QWORD *)(*(_QWORD *)a1 + 64);
      if ((v9 & 0x100000000) != 0 && !v29)
      {
        v29 = 0;
        if (0x200000000 - v9 < *(_QWORD *)(v4 + 160))
        {
          v21 -= 0x200000000;
          *(_QWORD *)(a1 + 712) = v21;
        }
      }
      v27 = 0;
      *(_QWORD *)(a1 + 664) = v9;
      v6 = v29 + v9 + v21;
      *(_QWORD *)(a1 + 672) = v9;
      *(_QWORD *)(a1 + 680) = v6;
      *(_QWORD *)(a1 + 760) = v9;
      *(_BYTE *)(a1 + 658) = 1;
      goto LABEL_53;
    }
    v22 = *(_QWORD *)(a1 + 712);
    if ((v9 & 0x100000000) == 0)
    {
      v22 = *(_QWORD *)(a1 + 712);
      if ((*(_QWORD *)(a1 + 672) & 0x100000000) != 0)
      {
        v22 = v21 + 0x200000000;
        *(_QWORD *)(a1 + 712) = v21 + 0x200000000;
      }
    }
    v23 = v22 + v9;
    v24 = *(_QWORD *)a1;
    v6 = v23 + *(_QWORD *)(*(_QWORD *)a1 + 64);
    if (v6 < *(_QWORD *)(a1 + 680) && *(_BYTE *)(v4 + 448))
    {
LABEL_29:
      *(_QWORD *)(a1 + 712) = v21;
      *(_DWORD *)(a2 + 80) |= 1u;
      if (*(_DWORD *)(v24 + 72) >= 2u)
      {
        v19 = AddAudioFrameToAdjustmentQueue(a1, a2);
        if (!(_DWORD)v19)
          return ProgramCheckPesForTimestampChanges(*(_QWORD *)a1);
        return v19;
      }
      v27 = 0;
      *(_QWORD *)(a1 + 712) = 0;
      v6 = *(_QWORD *)(a1 + 688) + (90000 * *(_DWORD *)(a1 + 772)) / *(_DWORD *)(a1 + 768);
      *(_QWORD *)(v24 + 64) = v6 - v9;
      *(_QWORD *)(a1 + 688) = v6;
      *(_QWORD *)(a1 + 680) = v6;
      *(_QWORD *)(a1 + 664) = v9;
      *(_QWORD *)(a1 + 672) = v9;
LABEL_53:
      *(_QWORD *)(a1 + 688) = v6;
      ++*(_DWORD *)(a1 + 752);
      v31 = *(unsigned int *)(a2 + 128);
      *(_DWORD *)(a1 + 772) = v31;
      *(_QWORD *)(a1 + 776) = v27 + v31;
      goto LABEL_54;
    }
    if (!*(_BYTE *)(a2 + 146))
    {
      v28 = v6 - (*(_QWORD *)(a1 + 688) + (90000 * *(_DWORD *)(a1 + 772)) / *(_DWORD *)(a1 + 768));
      if (v28)
      {
        v39 = *(_QWORD *)(v4 + 160);
        if (v28 < -2 || v28 > v39)
          goto LABEL_29;
        if ((unint64_t)(v28 - 3) < 0xFFFFFFFFFFFFFFFBLL)
        {
          v27 = 0;
          *(_QWORD *)(a1 + 664) = v9;
          *(_QWORD *)(a1 + 672) = v9;
          *(_QWORD *)(a1 + 680) = v6;
          *(_DWORD *)(a2 + 80) |= 1u;
          goto LABEL_53;
        }
      }
    }
    v27 = 0;
    *(_QWORD *)(a1 + 664) = v9;
    *(_QWORD *)(a1 + 672) = v9;
    *(_QWORD *)(a1 + 680) = v6;
    goto LABEL_53;
  }
  Retainable = (_QWORD *)FrameQueueEntryMakeRetainable(a1, a2);
  Retainable[2] = a1;
  *Retainable = 0;
  v11 = *(_QWORD **)(a1 + 736);
  Retainable[1] = v11;
  *v11 = Retainable;
  *(_QWORD *)(a1 + 736) = Retainable;
  LODWORD(v11) = *(_DWORD *)(a1 + 744) + 1;
  *(_DWORD *)(a1 + 744) = (_DWORD)v11;
  if (v11 >= 0x10)
  {
    *(_OWORD *)&v42.value = 0uLL;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 728);
    if (*(_BYTE *)(v12 + 448))
    {
      if (v13)
      {
        v14 = *(_QWORD *)(a1 + 712);
        v15 = *(_QWORD *)(a1 + 688) + (90000 * *(_DWORD *)(a1 + 772)) / *(_DWORD *)(a1 + 768);
        v16 = *(_QWORD *)(v13 + 24);
        v17 = v14;
        if ((v16 & 0x100000000) == 0)
        {
          v17 = *(_QWORD *)(a1 + 712);
          if ((*(_QWORD *)(a1 + 672) & 0x100000000) != 0)
          {
            v17 = v14 + 0x200000000;
            *(_QWORD *)(a1 + 712) = v14 + 0x200000000;
          }
        }
        v18 = v17 + v16 + *(_QWORD *)(*(_QWORD *)a1 + 64);
        if (v18 > *(_QWORD *)(v12 + 160) + v15)
        {
          *(_QWORD *)(a1 + 712) = v14;
          return FigSignalErrorAt();
        }
        if (v18 < v15)
        {
          *(_QWORD *)(a1 + 712) = v14;
LABEL_45:
          v30 = v13;
          do
          {
            *(_WORD *)(v30 + 49) = 0;
            v30 = *(_QWORD *)v30;
          }
          while (v30);
          *(_QWORD *)(v13 + 8) = &v42;
          v42.value = v13;
          *(_QWORD *)&v42.timescale = Retainable;
          *(_QWORD *)(a1 + 728) = 0;
          *(_QWORD *)(a1 + 736) = a1 + 728;
          return FigMPEG2ParseFromQueue(&v42);
        }
        *(_BYTE *)(v13 + 146) = 1;
        v42.value = 0;
        *(_QWORD *)&v42.timescale = &v42;
        FigMPEG2MoveAdjustmentQueue(a1, (uint64_t)&v42);
        return FigMPEG2ParseFromQueue(&v42);
      }
    }
    else if (v13)
    {
      goto LABEL_45;
    }
    *(_QWORD *)&v42.timescale = &v42;
    return FigMPEG2ParseFromQueue(&v42);
  }
  return 0;
}

uint64_t AddAudioFrameToAdjustmentQueue(uint64_t a1, uint64_t a2)
{
  _QWORD *Retainable;
  _QWORD *v4;

  Retainable = (_QWORD *)FrameQueueEntryMakeRetainable(a1, a2);
  Retainable[2] = a1;
  v4 = *(_QWORD **)(a1 + 736);
  *Retainable = 0;
  Retainable[1] = v4;
  *v4 = Retainable;
  *(_QWORD *)(a1 + 736) = Retainable;
  ++*(_DWORD *)(a1 + 744);
  return 0;
}

uint64_t ProgramCheckPesForTimestampChanges(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t MinimumPTSFromAdjustmentQueue;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;

  if (*(_DWORD *)(a1 + 72) < 2u)
    return 0;
  v22 = 0;
  v23 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 24);
    do
    {
      if (*(_BYTE *)(v5 + 80))
      {
        if (!*(_QWORD *)(v5 + 728))
          return 0;
        v6 = GetMinimumPTSFromAdjustmentQueue(v5) & 0x180000000;
        v4 |= v6 == 0x180000000;
        v3 |= v6 == 0;
      }
      v5 = *(_QWORD *)(v5 + 16);
    }
    while (v5);
    if (v4)
      v7 = v3 != 0;
    else
      v7 = 0;
    v8 = 0;
    v9 = 1;
    do
    {
      if (*(_BYTE *)(v2 + 80))
      {
        v10 = *(_DWORD *)(v2 + 768);
        if (v10)
          v11 = *(_QWORD *)(v2 + 688) + 90000 * *(_DWORD *)(v2 + 772) / v10;
        else
          v11 = *(_QWORD *)(v2 + 704);
        MinimumPTSFromAdjustmentQueue = GetMinimumPTSFromAdjustmentQueue(v2);
        v13 = (MinimumPTSFromAdjustmentQueue & 0x100000000) == 0;
        if (v7 && v13)
          v14 = 0x200000000;
        else
          v14 = 0;
        if (v7 && v13)
          v15 = MinimumPTSFromAdjustmentQueue + 0x200000000;
        else
          v15 = MinimumPTSFromAdjustmentQueue;
        *(_QWORD *)(v2 + 712) = v14;
        if (v9)
        {
          v9 = 0;
          v8 = v11 - v15;
        }
        else
        {
          v16 = v15 + v8;
          v17 = v11 - v15;
          if (v16 < v11)
            v8 = v17;
        }
      }
      else
      {
        *(_QWORD *)(v2 + 712) = 0;
      }
      v2 = *(_QWORD *)(v2 + 16);
    }
    while (v2);
    v18 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 64) = v8;
    v22 = 0;
    v23 = &v22;
    if (v18)
    {
      v19 = &v22;
      do
      {
        v20 = *(_QWORD *)(v18 + 728);
        if (v20)
        {
          *(_DWORD *)(v20 + 80) |= 1u;
          *v19 = v20;
          *(_QWORD *)(*(_QWORD *)(v18 + 728) + 8) = v23;
          v19 = *(uint64_t **)(v18 + 736);
          v23 = v19;
          *(_QWORD *)(v18 + 728) = 0;
          *(_QWORD *)(v18 + 736) = v18 + 728;
        }
        *(_BYTE *)(v18 + 658) = 0;
        *(_QWORD *)(v18 + 776) = 0;
        *(_QWORD *)(v18 + 744) = 0;
        *(_BYTE *)(v18 + 800) = 0;
        v18 = *(_QWORD *)(v18 + 16);
      }
      while (v18);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    v23 = &v22;
  }
  return FigMPEG2ParseFromQueue(&v22);
}

uint64_t GetMinimumPTSFromAdjustmentQueue(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(uint64_t **)(a1 + 728);
  if (*(_DWORD *)(a1 + 768))
    return v1[4];
  v4 = v1[3];
  result = v1[4];
  v5 = v1 + 3;
  if (result != v4)
  {
    v6 = *v1;
    if (v6)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v8 = (_QWORD *)(v6 + 24);
      v7 = v9;
      v10 = v9 ^ v4;
      v11 = v4 + 0x200000000;
      if ((v4 & 0x100000000) != 0)
        v11 = v4 - 0x200000000;
      if ((v10 & 0x100000000) != 0)
        v4 = v11;
      if (v4 - v7 <= 0)
        v12 = v5;
      else
        v12 = v8;
      return *v12;
    }
    else
    {
      v13 = 90000 * (unint64_t)*(unsigned int *)(a1 + 808) / *(unsigned int *)(a1 + 804) + result;
      v14 = v13 & 0x1FFFFFFFFLL;
      v15 = v13 ^ v4;
      v16 = v4 + 0x200000000;
      if ((v4 & 0x100000000) != 0)
        v16 = v4 - 0x200000000;
      if ((v15 & 0x100000000) != 0)
        v17 = v16;
      else
        v17 = v4;
      if (v17 - v14 <= 0)
        return v4;
      else
        return v14;
    }
  }
  return result;
}

double FigMPEG2MoveAdjustmentQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 728);
  if (v2)
  {
    *(_DWORD *)(v2 + 80) |= 1u;
    **(_QWORD **)(a2 + 8) = v2;
    *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 736);
    *(_QWORD *)(a1 + 728) = 0;
    *(_QWORD *)(a1 + 736) = a1 + 728;
  }
  *(_BYTE *)(a1 + 658) = 0;
  *(_QWORD *)(a1 + 776) = 0;
  result = 0.0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  return result;
}

uint64_t FigMPEG2ParseFromQueue(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(uint64_t **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  while (1)
  {
    v3 = *v1;
    v4 = (_QWORD *)v1[1];
    if (*v1)
    {
      *(_QWORD *)(v3 + 8) = v4;
      v4 = (_QWORD *)v1[1];
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v4;
    }
    *v4 = v3;
    v5 = v1[2];
    if (!*(_DWORD *)(v5 + 768))
      break;
    v6 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(v5, (uint64_t)v1);
    if ((_DWORD)v6)
      goto LABEL_12;
LABEL_9:
    v1 = *(uint64_t **)a1;
    if (!*(_QWORD *)a1)
      return 0;
  }
  v6 = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(v5, (uint64_t)v1);
  if (!(_DWORD)v6)
    goto LABEL_9;
LABEL_12:
  v7 = v6;
  while (1)
  {
    v9 = *(uint64_t **)a1;
    if (!*(_QWORD *)a1)
      break;
    v10 = *v9;
    v11 = (_QWORD *)v9[1];
    if (*v9)
    {
      *(_QWORD *)(v10 + 8) = v11;
      v11 = (_QWORD *)v9[1];
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v11;
    }
    *v11 = v10;
    FrameQueueEntryDestroy((uint64_t)v9);
  }
  return v7;
}

uint64_t CreatePesPrivateForDolby(uint64_t a1)
{
  int v2;
  void (*v3)(uint64_t);
  _BYTE *v4;
  _BYTE *v5;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48))
  {
    v3 = *(void (**)(uint64_t))(a1 + 856);
    if (v3)
      v3(a1);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v4 = malloc_type_calloc(1uLL, 0x1E0uLL, 0x10B0040413C3907uLL);
  if (!v4)
    return 12;
  v5 = v4;
  FrameQueueEntryInit((uint64_t)(v4 + 320));
  v5[465] = 0;
  if (v2 == 1701143347 || v2 == 1700998451)
  {
    *((_QWORD *)v5 + 3) = 10;
    *((_QWORD *)v5 + 9) = DolbyDoneWithFrame;
    *(_QWORD *)(a1 + 864) = DolbyFlushFrames;
  }
  else
  {
    *((_QWORD *)v5 + 3) = 8;
  }
  result = 0;
  *(_QWORD *)v5 = v5 + 296;
  *((_QWORD *)v5 + 2) = v5 + 306;
  *((_QWORD *)v5 + 4) = DolbyCheckHeader;
  *((_QWORD *)v5 + 5) = DolbyCompareHeaders;
  *((_QWORD *)v5 + 6) = DolbyGetSamplesPerFrame;
  *((_QWORD *)v5 + 7) = DolbyGetSampleFrequency;
  *((_QWORD *)v5 + 8) = DolbyGetFrameSize;
  *(_QWORD *)(a1 + 840) = PesDolbyProcessData;
  *(_QWORD *)(a1 + 848) = PesDolbyCleanPrivateData;
  *(_QWORD *)(a1 + 856) = PesDolbyDeletePrivateData;
  *(_QWORD *)(a1 + 48) = v5;
  return result;
}

uint64_t DolbyDoneWithFrame(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t AudioBlockCountForSyncFrame;
  uint64_t v7;
  OpaqueCMBlockBuffer *v8;
  int v9;
  __int16 v10;
  char *returnedPointerOut;
  _BYTE temporaryBlock[10];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  returnedPointerOut = 0;
  v10 = 0;
  result = CMBlockBufferAccessDataBytes(*(CMBlockBufferRef *)(a2 + 56), 0, 0xAuLL, temporaryBlock, &returnedPointerOut);
  if ((_DWORD)result)
    return result;
  v5 = *(_QWORD *)(a1 + 48);
  if (DolbyGetFormatID((uint64_t)returnedPointerOut) != 1633889587)
  {
    result = DDPlusGetSyncFrameInfo((uint64_t)returnedPointerOut, (_BYTE *)&v10 + 1, &v10);
    if ((_DWORD)result)
      return result;
    if ((v10 & 0xFD00u) != 0 || (_BYTE)v10)
    {
      result = *(_QWORD *)(v5 + 376);
      if (!result)
        return result;
      CMBlockBufferAppendBufferReference((CMBlockBufferRef)result, *(CMBlockBufferRef *)(a2 + 56), 0, 0, 0);
      return 0;
    }
    AudioBlockCountForSyncFrame = DDPlusGetAudioBlockCountForSyncFrame((uint64_t)returnedPointerOut);
    if (!*(_QWORD *)(v5 + 376))
      goto LABEL_26;
    v7 = *(_QWORD *)(v5 + 472);
    if (*(_BYTE *)(a2 + 48))
    {
      if (v7 < 6)
      {
        FrameQueueEntryClean(v5 + 320);
        *(_QWORD *)(v5 + 472) = 0;
        v8 = *(OpaqueCMBlockBuffer **)(v5 + 376);
        if (!v8)
          goto LABEL_26;
        goto LABEL_24;
      }
    }
    else if (v7 < 6)
    {
      v9 = 1;
      goto LABEL_23;
    }
    *(_QWORD *)(v5 + 472) = 0;
    result = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, v5 + 320);
    if ((_DWORD)result)
      return result;
    FrameQueueEntryClean(v5 + 320);
    v9 = 0;
LABEL_23:
    v8 = *(OpaqueCMBlockBuffer **)(v5 + 376);
    if (!v8)
    {
      if (!v9)
      {
LABEL_27:
        FrameQueueMove(v5 + 320, a2);
        goto LABEL_28;
      }
LABEL_26:
      if (!*(_BYTE *)(a2 + 48))
        return 0;
      goto LABEL_27;
    }
LABEL_24:
    CMBlockBufferAppendBufferReference(v8, *(CMBlockBufferRef *)(a2 + 56), 0, 0, 0);
LABEL_28:
    result = 0;
    *(_QWORD *)(v5 + 472) += AudioBlockCountForSyncFrame;
    return result;
  }
  if (!*(_QWORD *)(v5 + 376))
    return FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
  *(_QWORD *)(v5 + 472) = 0;
  result = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, v5 + 320);
  if (!(_DWORD)result)
  {
    FrameQueueEntryClean(v5 + 320);
    return FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
  }
  return result;
}

void DolbyFlushFrames(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(v1 + 376)
    && *(uint64_t *)(v1 + 472) >= 6
    && !FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, v1 + 320))
  {
    FrameQueueEntryClean(v1 + 320);
  }
  *(_QWORD *)(v1 + 472) = 0;
}

uint64_t DolbyCheckHeader(_BYTE *a1)
{
  uint64_t result;

  if (*(_WORD *)a1 != 30475)
    return 0;
  result = DolbyGetFrameSize(a1);
  if ((_DWORD)result)
    return DolbyGetSampleFrequency((uint64_t)a1) != 0;
  return result;
}

uint64_t DolbyCompareHeaders(OpaqueCMBlockBuffer *a1, unsigned __int8 *a2)
{
  char *returnedPointerOut;
  _BYTE temporaryBlock[8];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  returnedPointerOut = 0;
  if (CMBlockBufferAccessDataBytes(a1, 0, 8uLL, temporaryBlock, &returnedPointerOut))
    return 0;
  if (DolbyGetFormatID((uint64_t)returnedPointerOut) == 1633889587)
  {
    if ((a2[4] ^ returnedPointerOut[4]) <= 0x3F
      && returnedPointerOut[5] == a2[5]
      && (a2[6] ^ returnedPointerOut[6]) < 0x20)
    {
      return 1;
    }
  }
  else if ((a2[5] ^ returnedPointerOut[5]) <= 7)
  {
    return 1;
  }
  return 0;
}

uint64_t PesDolbyProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, size_t a5, uint64_t a6)
{
  return MPEGAudioProcessData(a1, *(_QWORD **)(a1 + 48), a2, a3, a4, a5, a6);
}

void PesDolbyCleanPrivateData(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  MPEGAudioCleanPrivateData(v1);
  FrameQueueEntryClean(v1 + 320);
  *(_QWORD *)(v1 + 472) = 0;
}

void PesDolbyDeletePrivateData(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  MPEGAudioCleanPrivateData(v2);
  FrameQueueEntryClean(v2 + 320);
  *(_QWORD *)(v2 + 472) = 0;
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t FigSampleBufferConsumerCreateForSampleBufferConsumer(const char *a1, _QWORD *a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  if (!a2)
    return 4294954535;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigSampleBufferConsumerGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    return v5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigReentrantMutexCreate();
  *(_QWORD *)DerivedStorage = v7;
  if (!v7)
    return 4294954536;
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v5 = CMBufferQueueCreate(v4, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 16));
  if ((_DWORD)v5)
    return v5;
  Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 8) = Mutable;
  if (!Mutable)
    return 4294954536;
  v10 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 24) = v10;
  if (!v10)
    return 4294954536;
  v11 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 48) = v11;
  if (!v11)
    return 4294954536;
  v12 = MEMORY[0x1E0CA2E18];
  v13 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 64) = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(DerivedStorage + 80) = v14;
  *(_OWORD *)(DerivedStorage + 88) = v13;
  *(_QWORD *)(DerivedStorage + 104) = v14;
  v15 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 32) = v15;
  if (!v15)
    return 4294954536;
  if (a1)
    v16 = a1;
  else
    v16 = "-";
  v17 = 0;
  *(_QWORD *)(DerivedStorage + 112) = CFStringCreateWithCString(v4, v16, 0x8000100u);
  *a2 = 0;
  return v17;
}

uint64_t sbcsbc_finalize()
{
  _QWORD *DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  sbcsbc_detachFromDownstreamConsumer();
  v1 = DerivedStorage[4];
  if (v1)
    dispatch_release(v1);
  v2 = (const void *)DerivedStorage[6];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[6] = 0;
  }
  v3 = (const void *)DerivedStorage[1];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[1] = 0;
  }
  v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
  v5 = (const void *)DerivedStorage[3];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[3] = 0;
  }
  v6 = (const void *)DerivedStorage[14];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[14] = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *sbcsbc_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferConsumerForSampleBufferConsumer %p>"), a1);
  return Mutable;
}

uint64_t sbcsbc_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  CFTypeRef v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (CFEqual(a2, CFSTR("DownstreamConsumer")))
  {
    v7 = (CFTypeRef)DerivedStorage[5];
    if (v7)
      v7 = CFRetain(v7);
    *a4 = v7;
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return 0;
}

uint64_t sbcsbc_setProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void (*)(), uint64_t, uint64_t);
  uint64_t v14;
  CFTypeID v15;
  CMTimeEpoch epoch;
  CFTypeID v17;
  CMTimeEpoch v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const void *, uint64_t);
  uint64_t v23;
  CMTime v25;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (!a3)
      {
        v19 = MEMORY[0x1E0CA2E18];
        *((_OWORD *)DerivedStorage + 4) = *MEMORY[0x1E0CA2E18];
        epoch = *(_QWORD *)(v19 + 16);
        goto LABEL_22;
      }
      v15 = CFGetTypeID((CFTypeRef)a3);
      if (v15 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&v25, (CFDictionaryRef)a3);
        a3 = 0;
        *((_OWORD *)DerivedStorage + 4) = *(_OWORD *)&v25.value;
        epoch = v25.epoch;
LABEL_22:
        DerivedStorage[10] = epoch;
        goto LABEL_33;
      }
LABEL_34:
      a3 = 4294954516;
      goto LABEL_33;
    }
    if (!FigCFEqual())
    {
      if (a3)
        v20 = (const __CFString *)a3;
      else
        v20 = CFSTR("sbcsbc_ItWasNull");
      CFDictionarySetValue((CFMutableDictionaryRef)DerivedStorage[3], a2, v20);
      v21 = DerivedStorage[5];
      if (!v21)
        goto LABEL_12;
      v22 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v22)
      {
        v14 = v22(v21, a2, a3);
        goto LABEL_29;
      }
LABEL_30:
      a3 = 4294954514;
      goto LABEL_33;
    }
    if (a3)
    {
      v17 = CFGetTypeID((CFTypeRef)a3);
      if (v17 != CFDictionaryGetTypeID())
        goto LABEL_34;
      CMTimeMakeFromDictionary(&v25, (CFDictionaryRef)a3);
      a3 = 0;
      *(_OWORD *)(DerivedStorage + 11) = *(_OWORD *)&v25.value;
      v18 = v25.epoch;
    }
    else
    {
      v23 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 11) = *MEMORY[0x1E0CA2E18];
      v18 = *(_QWORD *)(v23 + 16);
    }
    DerivedStorage[13] = v18;
    goto LABEL_33;
  }
  if (a3)
  {
    v6 = CFGetTypeID((CFTypeRef)a3);
    if (v6 != FigSampleBufferConsumerGetTypeID())
      goto LABEL_34;
  }
  sbcsbc_detachFromDownstreamConsumer();
  v7 = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v8 = v7;
    *(_QWORD *)(v7 + 40) = a3;
    CFRetain((CFTypeRef)a3);
    if (!*(_QWORD *)(v8 + 120))
    {
LABEL_11:
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v8 + 24), (CFDictionaryApplierFunction)sbcsbc_applyPendingPropertiesDictionaryApplier, *(void **)(v8 + 40));
      FigCFArrayApplyFunction();
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v8 + 8));
      CMBufferQueueReset(*(CMBufferQueueRef *)(v8 + 16));
LABEL_12:
      a3 = 0;
      goto LABEL_33;
    }
    v9 = *(_QWORD *)(v8 + 40);
    v10 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v10 && v10(v9))
      sbcsbc_downstreamTriggerCallback();
    v12 = *(_QWORD *)(v8 + 40);
    v11 = *(_QWORD *)(v8 + 48);
    v13 = *(uint64_t (**)(uint64_t, void (*)(), uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 32);
    if (v13)
    {
      v14 = v13(v12, sbcsbc_downstreamTriggerCallback, v11, v8 + 56);
      if (!(_DWORD)v14)
        goto LABEL_11;
LABEL_29:
      a3 = v14;
      goto LABEL_33;
    }
    goto LABEL_30;
  }
LABEL_33:
  MEMORY[0x19402EA24](*DerivedStorage);
  return a3;
}

void sbcsbc_detachFromDownstreamConsumer()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(const void *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    v2 = DerivedStorage;
    v3 = *(_QWORD *)(DerivedStorage + 56);
    if (!v3)
      goto LABEL_6;
    v4 = *(void (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v4)
      v4(v1, v3);
    *(_QWORD *)(v2 + 56) = 0;
    v1 = *(const void **)(v2 + 40);
    if (v1)
    {
LABEL_6:
      CFRelease(v1);
      *(_QWORD *)(v2 + 40) = 0;
    }
  }
}

void sbcsbc_downstreamTriggerCallback()
{
  uint64_t v0;
  void *v1;
  uint64_t DerivedStorage;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (void *)v0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 32), v1, (dispatch_function_t)sbcsbc_downstreamTriggerCallbackAsync);
  }
}

uint64_t sbcsbc_applyPendingPropertiesDictionaryApplier(uint64_t a1, const void *a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t, uint64_t, const void *);
  const void *v9;

  v6 = CFEqual(CFSTR("sbcsbc_ItWasNull"), a2);
  result = CMBaseObjectGetVTable();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)(result + 8) + 56);
  if (v8)
  {
    if (v6)
      v9 = 0;
    else
      v9 = a2;
    return v8(a3, a1, v9);
  }
  return result;
}

uint64_t sbcsbc_applyPendingDeliveryArrayApplier(const __CFDictionary *a1, uint64_t a2)
{
  const void *Value;
  uint64_t result;
  uint64_t (*v6)(uint64_t, const void *);
  const void *v7;
  const void *v8;
  uint64_t (*v9)(uint64_t, const void *, const void *, _QWORD);

  CFDictionaryGetValue(a1, CFSTR("type"));
  if (FigCFEqual())
  {
    Value = CFDictionaryGetValue(a1, CFSTR("buffer"));
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(result + 16) + 8);
    if (v6)
      return v6(a2, Value);
  }
  else
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      FigCFDictionaryGetInt32IfPresent();
      v7 = CFDictionaryGetValue(a1, CFSTR("notificationName"));
      v8 = CFDictionaryGetValue(a1, CFSTR("notificationPayload"));
      result = CMBaseObjectGetVTable();
      v9 = *(uint64_t (**)(uint64_t, const void *, const void *, _QWORD))(*(_QWORD *)(result + 16) + 64);
      if (v9)
        return v9(a2, v7, v8, 0);
    }
  }
  return result;
}

void sbcsbc_downstreamTriggerCallbackAsync(const void *a1)
{
  _QWORD *DerivedStorage;
  void (*v3)(_QWORD);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v3 = (void (*)(_QWORD))DerivedStorage[15];
  if (v3)
    v3(DerivedStorage[16]);
  MEMORY[0x19402EA24](*DerivedStorage);
  if (a1)
    CFRelease(a1);
}

uint64_t sbcsbc_SendSampleBuffer(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, const void *);
  uint64_t v6;
  uint64_t v7;
  __CFDictionary *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  FigEndpointStreamAudioEngineSbufTracerDebugPrint(a2);
  v4 = DerivedStorage[5];
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v5)
      v6 = v5(v4, a2);
    else
      v6 = 4294954514;
  }
  else
  {
    v7 = CMBaseObjectGetDerivedStorage();
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("typeBuffer"));
    CFDictionarySetValue(Mutable, CFSTR("buffer"), a2);
    CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 8), Mutable);
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v7 + 16), a2);
    if (Mutable)
      CFRelease(Mutable);
    v6 = 0;
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return v6;
}

uint64_t sbcsbc_IsQueueAtOrAboveHighWater()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  CMTime v5;
  CMTime time1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v1 = DerivedStorage[5];
  if (v1)
  {
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v2)
      v3 = v2(v1);
    else
      v3 = 0;
  }
  else if ((*((_BYTE *)DerivedStorage + 76) & 1) != 0)
  {
    CMBufferQueueGetDuration(&time1, (CMBufferQueueRef)DerivedStorage[2]);
    v5 = *(CMTime *)(DerivedStorage + 8);
    v3 = CMTimeCompare(&time1, &v5) >= 0;
  }
  else
  {
    v3 = 1;
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return v3;
}

uint64_t sbcsbc_IsQueueBelowLowWater()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  CMTime v5;
  CMTime time1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v1 = DerivedStorage[5];
  if (!v1)
  {
    if ((*((_BYTE *)DerivedStorage + 100) & 1) != 0)
    {
      CMBufferQueueGetDuration(&time1, (CMBufferQueueRef)DerivedStorage[2]);
      v5 = *(CMTime *)(DerivedStorage + 11);
      v3 = CMTimeCompare(&time1, &v5) < 1;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v2)
  {
LABEL_5:
    v3 = 0;
    goto LABEL_7;
  }
  v3 = v2(v1);
LABEL_7:
  MEMORY[0x19402EA24](*DerivedStorage);
  return v3;
}

uint64_t sbcsbc_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, void (*)(), uint64_t, _QWORD *);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (DerivedStorage[15] || !a2)
  {
    v8 = FigSignalErrorAt();
  }
  else
  {
    DerivedStorage[15] = a2;
    DerivedStorage[16] = a3;
    *a4 = DerivedStorage + 15;
    v8 = DerivedStorage[5];
    if (v8)
    {
      v9 = DerivedStorage[6];
      v10 = *(void (**)(uint64_t, void (*)(), uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 32);
      if (v10)
        v10(v8, sbcsbc_downstreamTriggerCallback, v9, DerivedStorage + 7);
      v8 = 0;
    }
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return v8;
}

uint64_t sbcsbc_RemoveLowWaterTrigger(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (DerivedStorage + 15 == a2)
  {
    *a2 = 0;
    DerivedStorage[16] = 0;
    v4 = DerivedStorage[5];
    if (v4)
    {
      v5 = DerivedStorage[7];
      if (v5)
      {
        v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v6)
          v6(v4, v5);
        v4 = 0;
        DerivedStorage[7] = 0;
      }
      else
      {
        v4 = 0;
      }
    }
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return v4;
}

CMItemCount sbcsbc_GetPendingSampleBufferCount()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  CMItemCount BufferCount;
  CMItemCount v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v1 = DerivedStorage[5];
  if (v1)
  {
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v2)
    {
      v4 = 0;
      goto LABEL_7;
    }
    BufferCount = v2(v1);
  }
  else
  {
    BufferCount = CMBufferQueueGetBufferCount((CMBufferQueueRef)DerivedStorage[2]);
  }
  v4 = BufferCount;
LABEL_7:
  MEMORY[0x19402EA24](*DerivedStorage);
  return v4;
}

uint64_t sbcsbc_PostNotification(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  uint64_t (*v9)(uint64_t, const void *, const void *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  __CFDictionary *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (DerivedStorage[5])
  {
    v9 = *(uint64_t (**)(uint64_t, const void *, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 64);
    if (v9)
      v10 = v9(a1, a2, a3, a4);
    else
      v10 = 4294954514;
  }
  else
  {
    v11 = CMBaseObjectGetDerivedStorage();
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("typeNotification"));
    CFDictionarySetValue(Mutable, CFSTR("notificationName"), a2);
    if (a3)
      CFDictionarySetValue(Mutable, CFSTR("notificationPayload"), a3);
    FigCFDictionarySetInt32();
    CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 8), Mutable);
    if (Mutable)
      CFRelease(Mutable);
    v10 = 0;
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return v10;
}

uint64_t sbcsbc_Flush()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v1 = DerivedStorage[5];
  if (v1)
  {
    v2 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v2)
      v2(v1);
  }
  else
  {
    CFArrayRemoveAllValues((CFMutableArrayRef)DerivedStorage[1]);
    CMBufferQueueReset((CMBufferQueueRef)DerivedStorage[2]);
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return 0;
}

uint64_t FigStreamingAssetProgressMarkDownloadComplete(const void *a1)
{
  uint64_t DerivedStorage;
  dispatch_queue_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 111)
    || (v3 = (dispatch_queue_t *)DerivedStorage, (v4 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    v5 = v4;
    if (a1)
      v6 = CFRetain(a1);
    else
      v6 = 0;
    *v5 = v6;
    dispatch_async_f(*v3, v5, (dispatch_function_t)dwpm_markDownloadCompleteDispatch);
  }
  return 0;
}

void dwpm_markDownloadCompleteDispatch(const void **a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 108) = 1;
  *(_QWORD *)(DerivedStorage + 56) = *(_QWORD *)(DerivedStorage + 64);
  dwpm_sendProgressNotification(*a1);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t FigStreamingAssetProgressMarkAlternateAndMediaSelectionComplete(const void *a1, const void *a2, const void *a3, uint64_t a4, __int128 *a5)
{
  uint64_t DerivedStorage;
  dispatch_queue_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  __int128 v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 111)
    || (v11 = (dispatch_queue_t *)DerivedStorage, (v12 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    v13 = v12;
    if (a1)
      v14 = CFRetain(a1);
    else
      v14 = 0;
    *v13 = v14;
    if (a2)
      v15 = CFRetain(a2);
    else
      v15 = 0;
    v13[2] = v15;
    if (a3)
      v16 = CFRetain(a3);
    else
      v16 = 0;
    v13[3] = v16;
    v13[7] = a4;
    v17 = *a5;
    v13[10] = *((_QWORD *)a5 + 2);
    *((_OWORD *)v13 + 4) = v17;
    dispatch_async_f(*v11, v13, (dispatch_function_t)dwpm_markAlternateAndMediaSelectionCompleteDispatch);
  }
  return 0;
}

void dwpm_markAlternateAndMediaSelectionCompleteDispatch(uint64_t a1)
{
  CFTypeRef v2;
  const __CFArray *v3;
  int64_t v4;
  uint64_t DerivedStorage;
  double Seconds;
  double v7;
  int64x2_t *DownloadProgressItemForAlternateAndSelectedMediaArray;
  int64x2_t v9;
  __CFString *v10;
  const void *v11;
  const void *v12;
  CMTime v13;

  v2 = *(CFTypeRef *)a1;
  v3 = *(const __CFArray **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 56);
  v13 = *(CMTime *)(a1 + 64);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Seconds = CMTimeGetSeconds(&v13);
  if (*(_BYTE *)(DerivedStorage + 111))
    goto LABEL_14;
  if (v4 < 1 || *(_BYTE *)(DerivedStorage + 108))
    goto LABEL_7;
  v7 = Seconds;
  DownloadProgressItemForAlternateAndSelectedMediaArray = (int64x2_t *)dwpm_findDownloadProgressItemForAlternateAndSelectedMediaArray();
  if (!DownloadProgressItemForAlternateAndSelectedMediaArray)
  {
LABEL_14:
    FigSignalErrorAt();
    goto LABEL_7;
  }
  v9 = DownloadProgressItemForAlternateAndSelectedMediaArray[4];
  DownloadProgressItemForAlternateAndSelectedMediaArray[4].i64[1] = v4;
  DownloadProgressItemForAlternateAndSelectedMediaArray[5].i64[0] = (uint64_t)v7;
  *(int64x2_t *)(DerivedStorage + 56) = vaddq_s64(vsubq_s64(vdupq_n_s64(v4), v9), *(int64x2_t *)(DerivedStorage + 56));
  DownloadProgressItemForAlternateAndSelectedMediaArray[5].i8[8] = 1;
  v10 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(DerivedStorage + 8), v3);
  dwpm_sendProgressNotification(v2);
  if (v10)
    CFRelease(v10);
LABEL_7:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v11 = *(const void **)(a1 + 16);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 24);
  if (v12)
    CFRelease(v12);
  free((void *)a1);
}

uint64_t FigStreamingAssetProgressMonitorUpdateMediaDownloadedTimeAndBytes(const void *a1, const void *a2, const void *a3, uint64_t a4, __int128 *a5)
{
  uint64_t DerivedStorage;
  dispatch_queue_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  __int128 v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 111)
    || (v11 = (dispatch_queue_t *)DerivedStorage, (v12 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    v13 = v12;
    if (a1)
      v14 = CFRetain(a1);
    else
      v14 = 0;
    *v13 = v14;
    if (a2)
      v15 = CFRetain(a2);
    else
      v15 = 0;
    v13[2] = v15;
    if (a3)
      v16 = CFRetain(a3);
    else
      v16 = 0;
    v13[3] = v16;
    v13[7] = a4;
    v17 = *a5;
    v13[10] = *((_QWORD *)a5 + 2);
    *((_OWORD *)v13 + 4) = v17;
    dispatch_async_f(*v11, v13, (dispatch_function_t)dwpm_upadateMediaDownloadedTimeAndBytesDispatch);
  }
  return 0;
}

void dwpm_upadateMediaDownloadedTimeAndBytesDispatch(uint64_t a1)
{
  CFTypeRef v2;
  const __CFArray *v3;
  uint64_t v4;
  uint64_t DerivedStorage;
  double Seconds;
  uint64_t v7;
  _QWORD *DownloadProgressItemForAlternateAndSelectedMediaArray;
  __CFString *v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  Float64 v17;
  __CFString *v18;
  const void *v19;
  const void *v20;
  CMTime v21;

  v2 = *(CFTypeRef *)a1;
  v3 = *(const __CFArray **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 56);
  v21 = *(CMTime *)(a1 + 64);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Seconds = CMTimeGetSeconds(&v21);
  if (!*(_BYTE *)(DerivedStorage + 108))
  {
    if (*(_BYTE *)(DerivedStorage + 111))
      goto LABEL_23;
    if (v4 < 1)
      goto LABEL_16;
    v7 = (uint64_t)Seconds;
    if ((uint64_t)Seconds < 1)
      goto LABEL_16;
    DownloadProgressItemForAlternateAndSelectedMediaArray = dwpm_findDownloadProgressItemForAlternateAndSelectedMediaArray();
    if (!DownloadProgressItemForAlternateAndSelectedMediaArray)
    {
LABEL_23:
      FigSignalErrorAt();
      goto LABEL_16;
    }
    DownloadProgressItemForAlternateAndSelectedMediaArray[10] = v7;
    *(_QWORD *)(DerivedStorage + 64) += v4 - DownloadProgressItemForAlternateAndSelectedMediaArray[9];
    DownloadProgressItemForAlternateAndSelectedMediaArray[9] = v4;
    v9 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(DerivedStorage + 8), v3);
    v10 = CMBaseObjectGetDerivedStorage();
    if (FigGetUpTimeNanoseconds() - *(_QWORD *)(v10 + 88) >= 5000000000)
    {
      *(_QWORD *)(v10 + 88) = FigGetUpTimeNanoseconds();
      for (i = *(uint64_t **)(v10 + 72); i; i = (uint64_t *)*i)
      {
        v12 = CMBaseObjectGetDerivedStorage();
        if (!*((_BYTE *)i + 88))
        {
          v13 = i[10];
          if (v13 >= 300 && !*((_BYTE *)i + 56))
          {
            v14 = v12;
            v15 = i[8];
            v16 = (float)((float)i[9] / (float)v13);
            v21 = *(CMTime *)(i + 4);
            v17 = CMTimeGetSeconds(&v21) * v16;
            i[8] = (uint64_t)v17;
            *(_QWORD *)(v14 + 56) += (uint64_t)v17 - v15;
            v18 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v14 + 8), (const __CFArray *)i[3]);
            if (v18)
              CFRelease(v18);
          }
        }
      }
    }
    dwpm_sendProgressNotification(v2);
    if (v9)
      CFRelease(v9);
  }
LABEL_16:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v19 = *(const void **)(a1 + 16);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(a1 + 24);
  if (v20)
    CFRelease(v20);
  free((void *)a1);
}

uint64_t FigStreamingAssetProgressMonitorMarkInitialEstimationOfExpectedBytesAsComplete(const void *a1)
{
  uint64_t DerivedStorage;
  dispatch_queue_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 111)
    || (v3 = (dispatch_queue_t *)DerivedStorage, (v4 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    v5 = v4;
    if (a1)
      v6 = CFRetain(a1);
    else
      v6 = 0;
    *v5 = v6;
    dispatch_async_f(*v3, v5, (dispatch_function_t)dwpm_markInitialEstimationOfExpectedBytesAsCompleteDispatch);
  }
  return 0;
}

void dwpm_markInitialEstimationOfExpectedBytesAsCompleteDispatch(const void **a1)
{
  dwpm_sendProgressNotification(*a1);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t FigStreamingAssetProgressMonitorUpdateExpectedMediaBytesToDownload(const void *a1, const void *a2, const void *a3, __int128 *a4, uint64_t a5, char a6)
{
  uint64_t DerivedStorage;
  dispatch_queue_t *v13;
  char *v14;
  char *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  __int128 v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 111)
    || (v13 = (dispatch_queue_t *)DerivedStorage,
        (v14 = (char *)malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    v15 = v14;
    if (a1)
      v16 = CFRetain(a1);
    else
      v16 = 0;
    *(_QWORD *)v15 = v16;
    if (a2)
      v17 = CFRetain(a2);
    else
      v17 = 0;
    *((_QWORD *)v15 + 2) = v17;
    if (a3)
      v18 = CFRetain(a3);
    else
      v18 = 0;
    *((_QWORD *)v15 + 3) = v18;
    *((_QWORD *)v15 + 12) = a5;
    v19 = *a4;
    *((_QWORD *)v15 + 15) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(v15 + 104) = v19;
    v15[128] = a6;
    dispatch_async_f(*v13, v15, (dispatch_function_t)dwpm_updateExpectedMediaBytesToDownloadDispatch);
  }
  return 0;
}

void dwpm_updateExpectedMediaBytesToDownloadDispatch(uint64_t a1)
{
  const __CFArray *v2;
  uint64_t v3;
  char v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  _QWORD *DownloadProgressItemForAlternateAndSelectedMediaArray;
  __CFString *v8;
  const void *v9;
  const void *v10;
  __int128 v11;
  uint64_t v12;

  v2 = *(const __CFArray **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_BYTE *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 120);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 111))
    goto LABEL_15;
  if (v3 < 1)
    goto LABEL_8;
  v6 = DerivedStorage;
  DownloadProgressItemForAlternateAndSelectedMediaArray = dwpm_findDownloadProgressItemForAlternateAndSelectedMediaArray();
  if (!DownloadProgressItemForAlternateAndSelectedMediaArray)
  {
LABEL_15:
    FigSignalErrorAt();
  }
  else
  {
    *(_QWORD *)(v6 + 56) += v3;
    DownloadProgressItemForAlternateAndSelectedMediaArray[8] += v3;
    *((_OWORD *)DownloadProgressItemForAlternateAndSelectedMediaArray + 2) = v11;
    DownloadProgressItemForAlternateAndSelectedMediaArray[6] = v12;
    if (*((_BYTE *)DownloadProgressItemForAlternateAndSelectedMediaArray + 56))
      *((_BYTE *)DownloadProgressItemForAlternateAndSelectedMediaArray + 56) = v4;
    v8 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v6 + 8), v2);
    if (v8)
      CFRelease(v8);
  }
LABEL_8:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v9 = *(const void **)(a1 + 16);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 24);
  if (v10)
    CFRelease(v10);
  free((void *)a1);
}

uint64_t FigStreamingAssetProgressMonitorRegisterAlternateAndMediaSelections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t context;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  if (*(_BYTE *)(DerivedStorage + 111))
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    context = a1;
    *((_QWORD *)&v9 + 1) = a2;
    *(_QWORD *)&v10 = a3;
    dispatch_sync_f(*(dispatch_queue_t *)DerivedStorage, &context, (dispatch_function_t)dwpm_registerAlternateAndMediaSelectionsDispatch);
    return v9;
  }
}

const void *dwpm_registerAlternateAndMediaSelectionsDispatch(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t DerivedStorage;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;
  const void *result;
  _QWORD *v9;

  v3 = *(const void **)(a1 + 16);
  v2 = *(const void **)(a1 + 24);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 111) || (v3 ? (v5 = v2 == 0) : (v5 = 1), v5))
  {
    result = (const void *)FigSignalErrorAt();
  }
  else
  {
    v6 = DerivedStorage;
    v7 = malloc_type_calloc(1uLL, 0x60uLL, 0x10E0040A2CCCE02uLL);
    if (v7)
    {
      v7[2] = CFRetain(v3);
      v7[3] = CFRetain(v2);
      *((_BYTE *)v7 + 56) = 1;
    }
    else
    {
      result = (const void *)FigSignalErrorAt();
      if ((_DWORD)result)
        goto LABEL_10;
    }
    result = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v6 + 8), (const __CFArray *)v2);
    v9 = *(_QWORD **)(v6 + 80);
    *v7 = 0;
    v7[1] = v9;
    *v9 = v7;
    *(_QWORD *)(v6 + 80) = v7;
    if (result)
    {
      CFRelease(result);
      result = 0;
    }
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = (_DWORD)result;
  return result;
}

uint64_t FigStreamingAssetDownloadProgressMonitorGetTypeID()
{
  MEMORY[0x19402F294](&FigStreamingAssetDownloadProgressMonitorGetClassID_sRegisterFigStreamingAssetProgressMonitorBaseTypeOnce, RegisterFigStreamingAssetProgressMonitorBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigStreamingAssetDownloadProgressMonitorCreate(const void *a1, const void *a2, const __CFDictionary *a3, uint64_t a4, NSObject *a5, _QWORD *a6, _QWORD *a7)
{
  CFTypeID v12;
  uint64_t v13;
  uint64_t DerivedStorage;
  CFTypeRef v15;
  BOOL v16;
  uint64_t v17;
  const void *Value;
  dispatch_queue_t v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2)
    return FigSignalErrorAt();
  v12 = CFGetTypeID(a2);
  if (v12 != FigAssetGetTypeID() || !a7)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigStreamingAssetDownloadProgressMonitorGetClassID_sRegisterFigStreamingAssetProgressMonitorBaseTypeOnce, RegisterFigStreamingAssetProgressMonitorBaseType);
  v13 = CMDerivedObjectCreate();
  if ((_DWORD)v13)
    return v13;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = a1 ? CFRetain(a1) : 0;
  *(_QWORD *)(DerivedStorage + 8) = v15;
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a2);
  v16 = FigIsItOKToLogURLs() && FPSupport_GetAssetDoNotLogURLs((uint64_t)a2) == 0;
  *(_BYTE *)(DerivedStorage + 110) = v16;
  if (a4)
  {
    if (a5)
    {
      if (a6)
      {
        dispatch_retain(a5);
        *(_QWORD *)(DerivedStorage + 48) = a5;
        *(_QWORD *)(DerivedStorage + 40) = *a6;
        v17 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        *(_QWORD *)(DerivedStorage + 32) = v17;
        if (!v17)
          return FigSignalErrorAt();
      }
    }
  }
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("AssetDownloaderCreateOption_DebugIdentifier"));
    if (Value)
      Value = CFRetain(Value);
    *(_QWORD *)(DerivedStorage + 24) = Value;
  }
  *(_QWORD *)(DerivedStorage + 72) = 0;
  *(_QWORD *)(DerivedStorage + 80) = DerivedStorage + 72;
  v19 = dispatch_queue_create("com.apple.coremedia.figstreamingassetdownloadprogressmonitor.state", 0);
  *(_QWORD *)DerivedStorage = v19;
  if (!v19)
    return FigSignalErrorAt();
  if (dword_1EE2A2F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v13 = 0;
  *a7 = 0;
  return v13;
}

void dwpm_sendProgressNotification(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t UpTimeNanoseconds;
  float v4;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (*(_BYTE *)(DerivedStorage + 108) && !*(_BYTE *)(DerivedStorage + 109)
    || UpTimeNanoseconds - *(_QWORD *)(DerivedStorage + 96) >= 1000000000)
  {
    *(_QWORD *)(DerivedStorage + 96) = FigGetUpTimeNanoseconds();
    if (!*(_BYTE *)(DerivedStorage + 109))
    {
      v4 = (float)((float)*(uint64_t *)(DerivedStorage + 64) / (float)*(uint64_t *)(DerivedStorage + 56)) * 100.0;
      if (v4 > *(float *)(DerivedStorage + 104))
      {
        *(float *)(DerivedStorage + 104) = v4;
        if (v4 <= 95.0 || *(_BYTE *)(DerivedStorage + 108) != 0)
        {
          v6 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v6)
          {
            v7 = (const void *)v6;
            v8 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL);
            if (v8)
            {
              v9 = v8;
              if (a1)
                v10 = CFRetain(a1);
              else
                v10 = 0;
              *v9 = v10;
              v11 = *(_QWORD *)(DerivedStorage + 56);
              v12 = *(_QWORD *)(DerivedStorage + 64);
              v9[11] = v7;
              v9[12] = v11;
              v9[7] = v12;
              if (*(_BYTE *)(DerivedStorage + 108))
                *(_BYTE *)(DerivedStorage + 109) = 1;
              dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 48), v9, (dispatch_function_t)dworch_sendProgressNotificationOnCallbackQueue);
            }
            else if (FigSignalErrorAt())
            {
              CFRelease(v7);
            }
          }
        }
      }
    }
  }
}

void dworch_sendProgressNotificationOnCallbackQueue(_QWORD *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, _QWORD, _QWORD, _QWORD);
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 111))
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(DerivedStorage + 40);
    if (v3)
      v3(a1[11], *a1, a1[12], a1[7]);
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[11];
  if (v4)
    CFRelease(v4);
  free(a1);
}

_QWORD *dwpm_findDownloadProgressItemForAlternateAndSelectedMediaArray()
{
  _QWORD *i;

  for (i = *(_QWORD **)(CMBaseObjectGetDerivedStorage() + 72); i; i = (_QWORD *)*i)
  {
    if (FigCFEqual() && FigCFEqual())
      break;
  }
  return i;
}

uint64_t RegisterFigStreamingAssetProgressMonitorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigStreamingAssetProgressMonitorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigStreamingAssetDownloadProgressMonitor %p]"), a1);
}

uint64_t dwpm_invalidate(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t context;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  context = a1;
  dispatch_sync_f(*DerivedStorage, &context, (dispatch_function_t)dwpm_invalidateDispatch);
  return v5;
}

void dwpm_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dwpm_invalidateGutsOnQueue();
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

CFStringRef dwpm_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(*(CFAllocatorRef *)(DerivedStorage + 8), 0, CFSTR("[FigStreamingAssetDownloadProgressMonitor %p debugIdentifier:%@ asset %p asset %@ %0.2fMB / %0.2fMB]"), a1, *(_QWORD *)(DerivedStorage + 24), *(_QWORD *)(DerivedStorage + 16), *(_QWORD *)(DerivedStorage + 16), (float)((float)*(uint64_t *)(DerivedStorage + 64) * 0.00000095367), (float)((float)*(uint64_t *)(DerivedStorage + 56) * 0.00000095367));
}

uint64_t dwpm_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t result;
  _QWORD context[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v12 = 0;
  context[0] = a1;
  context[1] = a2;
  v13 = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)dwpm_copyPropertyDispatch);
  result = v12;
  if (!(_DWORD)v12)
    *a4 = v11;
  return result;
}

void dwpm_invalidateDispatch(uint64_t a1)
{
  dwpm_invalidateGutsOnQueue();
  *(_DWORD *)(a1 + 8) = 0;
}

void dwpm_invalidateGutsOnQueue()
{
  uint64_t DerivedStorage;
  _QWORD *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v10;
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 111))
  {
    v1 = (_QWORD *)DerivedStorage;
    *(_BYTE *)(DerivedStorage + 111) = 1;
    if (dword_1EE2A2F20)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v3 = (const void *)v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
    v4 = (const void *)v1[2];
    if (v4)
    {
      CFRelease(v4);
      v1[2] = 0;
    }
    v5 = (const void *)v1[4];
    if (v5)
    {
      CFRelease(v5);
      v1[4] = 0;
    }
    v6 = v1[6];
    if (v6)
    {
      dispatch_release(v6);
      v1[6] = 0;
    }
    v7 = (_QWORD *)v1[9];
    if (v7)
    {
      do
      {
        v9 = (_QWORD *)*v7;
        v8 = (_QWORD *)v7[1];
        if (*v7)
        {
          v9[1] = v8;
          v8 = (_QWORD *)v7[1];
        }
        else
        {
          v1[10] = v8;
        }
        *v8 = v9;
        v10 = (const void *)v7[2];
        if (v10)
          CFRelease(v10);
        v11 = (const void *)v7[3];
        if (v11)
          CFRelease(v11);
        free(v7);
        v7 = v9;
      }
      while (v9);
    }
  }
}

CFNumberRef dwpm_copyPropertyDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  CFNumberRef result;
  int v6;

  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 111))
    goto LABEL_7;
  v4 = DerivedStorage;
  if (!CFEqual(CFSTR("AssetDownloaderProperty_DownloadedBytes"), v2))
  {
    result = 0;
    v6 = -12784;
    goto LABEL_6;
  }
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(v4 + 64));
  if (!result)
  {
LABEL_7:
    v6 = FigSignalErrorAt();
    result = 0;
    goto LABEL_6;
  }
  v6 = 0;
LABEL_6:
  *(_DWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t FigVTTSpanCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  CFMutableDictionaryRef *DerivedStorage;

  if (!a2)
    return FigSignalErrorAt();
  FigVTTNodeGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
    v3 = FigVTTInitializeNodeBaseStorage(DerivedStorage);
    if (!(_DWORD)v3)
      *a2 = 0;
  }
  return v3;
}

uint64_t FigVTTSpanCreateCopyWithValueRange(const void *a1, CFIndex a2, CFIndex a3, CFTypeRef *a4)
{
  CFTypeID v8;
  uint64_t NodeType;
  const __CFAllocator *v10;
  CFIndex Length;
  CFStringRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  __CFString *v18;
  CFTypeRef context;
  uint64_t v21;
  int v22;
  CFStringRef theString;
  CFTypeRef cf;
  CFDictionaryRef v25;
  CFTypeRef v26;
  CFRange v27;

  v25 = 0;
  v26 = 0;
  theString = 0;
  cf = 0;
  v22 = 0;
  if (!a1)
    goto LABEL_26;
  v8 = CFGetTypeID(a1);
  if (v8 != FigVTTNodeGetTypeID())
    goto LABEL_26;
  NodeType = FigVTTNodeGetNodeType((uint64_t)a1, (uint64_t)&v22);
  if ((_DWORD)NodeType)
  {
LABEL_27:
    v14 = NodeType;
    goto LABEL_28;
  }
  if (v22 != 5 || !a4)
  {
LABEL_26:
    NodeType = FigSignalErrorAt();
    goto LABEL_27;
  }
  v10 = CFGetAllocator(a1);
  NodeType = FigVTTSpanCreate((uint64_t)v10, &v26);
  if ((_DWORD)NodeType)
    goto LABEL_27;
  NodeType = FigVTTNodeCopyValue((uint64_t)a1, &theString);
  if ((_DWORD)NodeType)
    goto LABEL_27;
  if (theString)
  {
    Length = CFStringGetLength(theString);
    if ((a2 & 0x8000000000000000) == 0 && a2 + a3 <= Length)
    {
      v27.location = a2;
      v27.length = a3;
      v12 = CFStringCreateWithSubstring(v10, theString, v27);
      v13 = FigVTTNodeSetValue((uint64_t)v26, v12);
      if ((_DWORD)v13)
        goto LABEL_35;
      goto LABEL_14;
    }
    goto LABEL_26;
  }
  v12 = 0;
LABEL_14:
  v13 = FigVTTNodeCopyAttributes((uint64_t)a1, &v25);
  if (!(_DWORD)v13)
  {
    context = v26;
    v21 = 0;
    CFDictionaryApplyFunction(v25, (CFDictionaryApplierFunction)figSpan_copyOneAttributeToNode, &context);
    v14 = v21;
    if ((_DWORD)v21)
    {
LABEL_24:
      if (!v12)
        goto LABEL_28;
      goto LABEL_25;
    }
    v15 = 0;
    v16 = 1;
    while (1)
    {
      v17 = v16;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v18 = off_1E2F97898[v15];
      v13 = FigVTTNodeCopyProperty((uint64_t)a1, (uint64_t)v18, (uint64_t)v10, (uint64_t)&cf);
      if ((_DWORD)v13)
        break;
      if (cf)
      {
        v13 = FigVTTNodeSetProperty((uint64_t)v26, (uint64_t)v18, (uint64_t)cf);
        if ((_DWORD)v13)
          break;
      }
      v16 = 0;
      v15 = 1;
      if ((v17 & 1) == 0)
      {
        v14 = 0;
        *a4 = v26;
        v26 = 0;
        goto LABEL_24;
      }
    }
  }
LABEL_35:
  v14 = v13;
  if (v12)
LABEL_25:
    CFRelease(v12);
LABEL_28:
  if (theString)
    CFRelease(theString);
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
  return v14;
}

uint64_t figSpan_copyOneAttributeToNode(uint64_t cf, const void *a2, uint64_t a3)
{
  const void *v4;
  CFTypeID v6;

  if (!*(_DWORD *)(a3 + 8))
  {
    v4 = (const void *)cf;
    if (cf && (v6 = CFGetTypeID((CFTypeRef)cf), v6 == CFStringGetTypeID()))
    {
      cf = FigVTTNodeSetAttribute(*(_QWORD *)a3, v4, a2);
      if (!(_DWORD)cf)
        return cf;
    }
    else
    {
      cf = 4294949406;
    }
    *(_DWORD *)(a3 + 8) = cf;
  }
  return cf;
}

void figVTTSpan_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTSpan_CopyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const __CFAllocator *v4;
  const __CFString *v5;
  CFStringRef v6;
  CFStringRef v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFCopyCompactDescription();
  cf = 0;
  FigVTTNodeCopyValue(a1, &cf);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = *(const __CFString **)(DerivedStorage + 24);
  if (!v5)
    v5 = &stru_1E2FD85F8;
  if (cf)
    v6 = CFStringCreateWithFormat(v4, 0, CFSTR("span: %@ %@ text=%@"), v5, v3, cf);
  else
    v6 = CFStringCreateWithFormat(v4, 0, CFSTR("span: %@ %@"), v5, v3);
  v7 = v6;
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  return v7;
}

uint64_t figVTTSpan_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (CFEqual(CFSTR("WebVTTSpanNode_StyleReferences"), a2))
  {
    v8 = *(const void **)(v7 + 16);
    if (v8)
    {
LABEL_5:
      v9 = CFRetain(v8);
LABEL_9:
      result = 0;
      *a4 = v9;
      return result;
    }
LABEL_8:
    v9 = 0;
    goto LABEL_9;
  }
  if (CFEqual(CFSTR("WebVTTSpanNode_MarkupElement"), a2))
  {
    v8 = *(const void **)(v7 + 24);
    if (v8)
      goto LABEL_5;
    goto LABEL_8;
  }
  return 4294954512;
}

uint64_t figVTTSpan_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  const void *v8;
  CFTypeID v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    v6 = DerivedStorage;
    if (CFEqual(CFSTR("WebVTTSpanNode_StyleReferences"), a2))
    {
      if (a3)
      {
        v7 = CFGetTypeID(a3);
        if (v7 == CFArrayGetTypeID())
        {
          v8 = *(const void **)(v6 + 16);
          *(_QWORD *)(v6 + 16) = a3;
          goto LABEL_7;
        }
      }
    }
    else if (CFEqual(CFSTR("WebVTTSpanNode_MarkupElement"), a2))
    {
      if (!a3)
      {
        v8 = *(const void **)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        if (!v8)
          return 0;
        goto LABEL_8;
      }
      v10 = CFGetTypeID(a3);
      if (v10 == CFStringGetTypeID())
      {
        v8 = *(const void **)(v6 + 24);
        *(_QWORD *)(v6 + 24) = a3;
LABEL_7:
        CFRetain(a3);
        if (!v8)
          return 0;
LABEL_8:
        CFRelease(v8);
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t figVTTSpan_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 5;
  return 0;
}

uint64_t figVTTSpan_copyNodeDocumentSerialization(uint64_t a1, CFStringRef *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 0;
  v4 = *(const void **)(DerivedStorage + 8);
  if (!v4)
    return FigSignalErrorAt();
  v5 = CFRetain(v4);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  *a2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@\n"), v5);
  CFRelease(v6);
  return 0;
}

uint64_t FigCDSOutputGetClassID()
{
  MEMORY[0x19402F294](&FigCDSOutputGetClassID_sRegisterFigCDSOutputTypeOnce, RegisterFigCDSOutputType);
  return sFigCDSOutputClassID;
}

uint64_t RegisterFigCDSOutputType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigCDSOutputCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCDSOutput %p]"), a1);
}

uint64_t FigAggregateVideoDestinationGetClassID()
{
  MEMORY[0x19402F294](&FigAggregateVideoDestinationGetClassID_sRegisterFigAggregateVideoDestinationTypeOnce, RegisterFigAggregateVideoDestinationType);
  return sFigAggregateVideoDestinationClassID;
}

uint64_t RegisterFigAggregateVideoDestinationType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAggregateVideoDestinationCreate(const __CFAllocator *a1, const __CFArray *a2, const void *a3, CMFormatDescriptionRef desc, const __CFAllocator *a5, _QWORD *a6)
{
  uint64_t updated;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v15;

  if (a6)
  {
    if (!a3 || !desc || CMFormatDescriptionGetMediaType(desc) != 1986618469)
      return FigSignalErrorAt();
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    MEMORY[0x19402F294](&FigAggregateVideoDestinationGetClassID_sRegisterFigAggregateVideoDestinationTypeOnce, RegisterFigAggregateVideoDestinationType);
    updated = CMDerivedObjectCreate();
    if (!(_DWORD)updated)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)DerivedStorage = FigSimpleMutexCreate();
      *(_QWORD *)(DerivedStorage + 48) = CFRetain(a3);
      *(_DWORD *)(DerivedStorage + 20) = 1;
      *(_QWORD *)(DerivedStorage + 24) = FigFormatDescriptionRetain();
      if (VTIsStereoMVHEVCDecodeSupported())
        CMVideoFormatDescriptionCopyTagCollectionArray(desc, (CFArrayRef *)(DerivedStorage + 32));
      Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(DerivedStorage + 40) = Mutable;
      if (!Mutable)
        return 4294948255;
      if (!a2
        || !CFArrayGetCount(a2)
        || (updated = favd_UpdateImageQueuesToMatchOutputsArray(0, a5, a2), !(_DWORD)updated))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        if (dword_1EE2A2F60)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v15 = 0;
        *a6 = 0;
        return v15;
      }
    }
    return updated;
  }
  return FigSignalErrorAt();
}

uint64_t favd_UpdateImageQueuesToMatchOutputsArray(uint64_t a1, const __CFAllocator *a2, const __CFArray *a3)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator **v8;
  const __CFArray *v9;
  uint64_t v10;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *Value;
  CFMutableArrayRef MutableCopy;
  CFMutableArrayRef v18;
  uint64_t v19;
  CFIndex j;
  CFIndex Count;
  NSObject *v22;
  CFIndex v23;
  NSObject *v24;
  CFIndex v25;
  CFIndex k;
  const void *v27;
  __CFDictionary *v28;
  CFMutableArrayRef v29;
  CFMutableArrayRef v30;
  CFTypeID v31;
  uint64_t v32;
  const __CFArray *v33;
  const __CFArray *v34;
  CFIndex v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  uint64_t v39;
  NSObject *v40;
  const __CFArray *v41;
  __CFArray *v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  uint64_t v46;
  const __CFArray *v48;
  _QWORD *v49;
  const __CFAllocator *allocator;
  const __CFArray *v51;
  CFAllocatorRef v52;
  const __CFAllocator *v53;
  CFIndex v54;
  CFArrayRef theArray;
  uint64_t v56;
  uint64_t v57;
  CFArrayCallBacks callBacks;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2F60)
  {
    LODWORD(theArray) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v8 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  v48 = a3;
  v49 = DerivedStorage;
  if (a2 && a3 && CFArrayGetCount(a3))
  {
    v9 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    if (favd_areOutputsEqual(v9, a3))
    {
      if (FigCFEqual())
      {
        v52 = a2;
        favd_cleanupOldOutputs(a1);
        v10 = 0;
        v11 = 0;
        allocator = *v8;
        v51 = v9;
        if (!v9)
          goto LABEL_10;
LABEL_9:
        for (i = CFArrayGetCount(v9); ; i = 0)
        {
          if (v11 >= i)
            goto LABEL_35;
          v54 = v11;
          ValueAtIndex = CFArrayGetValueAtIndex(v9, v11);
          v14 = CMBaseObjectGetDerivedStorage();
          v15 = CMBaseObjectGetDerivedStorage();
          Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v15 + 40), ValueAtIndex);
          theArray = 0;
          MutableCopy = CFArrayCreateMutableCopy(allocator, 0, Value);
          if (!MutableCopy)
          {
            v10 = 4294948255;
            v9 = v51;
            v23 = v54;
            goto LABEL_26;
          }
          v18 = MutableCopy;
          v19 = favd_copyImageQueuesForOutput((uint64_t)v52, ValueAtIndex, (CFTypeRef *)&theArray);
          if ((_DWORD)v19)
            break;
          for (j = 0; ; ++j)
          {
            Count = (CFIndex)theArray;
            if (theArray)
              Count = CFArrayGetCount(theArray);
            if (j >= Count)
              break;
            CFArrayGetValueAtIndex(theArray, j);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
          }
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v14 + 40), ValueAtIndex, v18);
          if (!dword_1EE2A2F60)
          {
            v10 = 0;
LABEL_22:
            v23 = v54;
            goto LABEL_23;
          }
          v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          v23 = v54;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v10 = 0;
LABEL_23:
          CFRelease(v18);
          if (theArray)
            CFRelease(theArray);
          v9 = v51;
LABEL_26:
          v11 = v23 + 1;
          if (v9)
            goto LABEL_9;
LABEL_10:
          ;
        }
        v10 = v19;
        goto LABEL_22;
      }
      if (!dword_1EE2A2F60)
        goto LABEL_34;
    }
    else if (!dword_1EE2A2F60)
    {
      goto LABEL_34;
    }
    LODWORD(theArray) = 0;
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_34:
    v10 = 0;
LABEL_35:
    if (v9)
      CFRelease(v9);
    DerivedStorage = v49;
    v8 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
    if ((_DWORD)v10)
      goto LABEL_71;
  }
  v25 = 0;
  v53 = *v8;
  if (!a3)
    goto LABEL_40;
LABEL_39:
  for (k = CFArrayGetCount(a3); ; k = 0)
  {
    if (v25 >= k)
    {
      favd_cleanupOldOutputs(a1);
      v46 = CMBaseObjectGetDerivedStorage();
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v46 + 40), (CFDictionaryApplierFunction)favd_reconnectVisualContextToTimebaseApplierFn, *(void **)(v46 + 48));
      v10 = 0;
      goto LABEL_71;
    }
    v27 = CFArrayGetValueAtIndex(a3, v25);
    v28 = (__CFDictionary *)DerivedStorage[5];
    if (!CFDictionaryGetValue(v28, v27))
    {
      *(_OWORD *)&callBacks.version = xmmword_1E2F97AD8;
      *(_OWORD *)&callBacks.release = *(_OWORD *)off_1E2F97AE8;
      callBacks.equal = (CFArrayEqualCallBack)favd_imageQueueInfoEqualCallBack;
      v29 = CFArrayCreateMutable(v53, 0, &callBacks);
      if (!v29)
      {
        v10 = 4294948255;
        goto LABEL_71;
      }
      v30 = v29;
      CFDictionarySetValue(v28, v27, v29);
      CFRelease(v30);
    }
    v31 = CFGetTypeID(v27);
    if (v31 == FigVideoTargetGetTypeID())
      break;
    v41 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[5], v27);
    v42 = v41;
    theArray = 0;
    v56 = 0;
    v57 = 0;
    if (!v41 || !CFArrayGetCount(v41))
    {
      v43 = favd_populateVideoDestination(a1, v27, 0, (uint64_t)&theArray);
      if ((_DWORD)v43)
        goto LABEL_69;
      CFArrayAppendValue(v42, &theArray);
      if (dword_1EE2A2F60)
      {
        v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      favd_cleanupVideoDestination((uint64_t)&theArray);
    }
LABEL_66:
    ++v25;
    if (a3)
      goto LABEL_39;
LABEL_40:
    ;
  }
  v32 = CMBaseObjectGetDerivedStorage();
  v33 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v32 + 40), v27);
  theArray = 0;
  v56 = 0;
  v57 = 0;
  v34 = *(const __CFArray **)(v32 + 32);
  if (!v34 || (v35 = CFArrayGetCount(v34)) == 0)
    v35 = 1;
  if (!v33)
  {
    v43 = FigSignalErrorAt();
    if ((_DWORD)v43)
    {
LABEL_69:
      v10 = v43;
      goto LABEL_71;
    }
    goto LABEL_66;
  }
  v36 = CFArrayGetCount(v33);
  v37 = CFArrayGetCount(v33);
  v38 = v37;
  if (v36 >= v35)
  {
    if (v37 > v35)
    {
      v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_65;
  }
  if (v37 >= v35)
  {
LABEL_65:
    a3 = v48;
    DerivedStorage = v49;
    goto LABEL_66;
  }
  while (1)
  {
    v39 = favd_populateVideoDestination(a1, v27, v38, (uint64_t)&theArray);
    if ((_DWORD)v39)
      break;
    if (dword_1EE2A2F60)
    {
      v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFArrayAppendValue(v33, &theArray);
    favd_cleanupVideoDestination((uint64_t)&theArray);
    if (v35 == ++v38)
      goto LABEL_65;
  }
  v10 = v39;
  DerivedStorage = v49;
LABEL_71:
  MEMORY[0x19402EF04](*DerivedStorage);
  return v10;
}

void favd_handleTimebaseEffectiveRateChanged(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v5;
  CFArrayRef Count;
  const void *ValueAtIndex;
  CFArrayRef theArray[23];

  theArray[22] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  CMTimebaseGetRate((CMTimebaseRef)DerivedStorage[6]);
  theArray[0] = 0;
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (!favd_copyAllImageQueuesAndOptions(a2, theArray, 0))
  {
    if (dword_1EE2A2F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v5 = 0;
    do
    {
      Count = theArray[0];
      if (theArray[0])
        Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
      if (v5 >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v5++);
    }
    while (!favd_setupImageQueue((uint64_t)ValueAtIndex, (CMTimebaseRef)DerivedStorage[6]));
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  if (theArray[0])
    CFRelease(theArray[0]);
}

uint64_t FigAggregateVideoDestinationForDataQueueCreate(const __CFAllocator *a1, const __CFArray *a2, const void *a3, CMFormatDescriptionRef desc, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  __CFArray *v15;
  CFIndex v16;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v22;

  if (!a3 || !a6 || !desc || CMFormatDescriptionGetMediaType(desc) != 1835365473)
    return FigSignalErrorAt();
  v22 = a5;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19402F294](&FigAggregateVideoDestinationGetClassID_sRegisterFigAggregateVideoDestinationTypeOnce, RegisterFigAggregateVideoDestinationType);
  v12 = CMDerivedObjectCreate();
  if (!(_DWORD)v12)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 8) = CFRetain(a3);
    *(_DWORD *)(DerivedStorage + 16) = 1;
    *(_QWORD *)(DerivedStorage + 24) = FigFormatDescriptionRetain();
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(DerivedStorage + 32) = Mutable;
    if (Mutable)
    {
      v15 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      v16 = 0;
      if (!a2)
        goto LABEL_9;
LABEL_8:
      for (i = CFArrayGetCount(a2); v16 < i; i = 0)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v16);
        v19 = CFGetTypeID(ValueAtIndex);
        if (v19 == FigVideoTargetGetTypeID())
        {
          if (FPSupport_fvtSupportsMetadataTrack((uint64_t)ValueAtIndex, desc))
            CFArrayAppendValue(v15, ValueAtIndex);
        }
        ++v16;
        if (a2)
          goto LABEL_8;
LABEL_9:
        ;
      }
      if (v15 && CFArrayGetCount(v15))
        favddq_UpdateDataQueuesToMatchOutputsArray(0, v22, v15);
      if (dword_1EE2A2F60)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *a6 = 0;
      if (v15)
        CFRelease(v15);
      return 0;
    }
    else
    {
      return 4294948255;
    }
  }
  return v12;
}

uint64_t favddq_UpdateDataQueuesToMatchOutputsArray(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  _QWORD *DerivedStorage;
  double DataQueueWaterLevels;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v16;
  CFIndex j;
  const void *v18;
  CFTypeID v19;
  uint64_t (*v20)(const void *, _QWORD, CMTime *, CMTime *, void **);
  uint64_t v21;
  uint64_t v22;
  uint64_t CMBaseObject;
  uint64_t (*v24)(uint64_t, const __CFString *, uint64_t);
  uint64_t v25;
  const __CFArray *v26;
  const __CFArray *v27;
  CFIndex v28;
  const void *v29;
  uint64_t v30;
  CMTime type;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  void *value;
  CMTime v37;
  CMTime v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  value = 0;
  v35 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v34 = v35;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DataQueueWaterLevels = FPSupport_getDataQueueWaterLevels(&v35, &v34);
  MEMORY[0x19402EEEC](*DerivedStorage, DataQueueWaterLevels);
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a3)
    {
      v9 = v8;
      if (CFArrayGetCount(a3))
      {
        v10 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        if (favd_areOutputsEqual(v10, a3))
        {
          if (CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)(v7 + 24), *(CMFormatDescriptionRef *)(v9 + 24)))
          {
            v11 = 0;
            if (!v10)
              goto LABEL_8;
LABEL_7:
            for (i = CFArrayGetCount(v10); v11 < i; i = 0)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v10, v11);
              v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), ValueAtIndex);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 32), ValueAtIndex, v14);
              ++v11;
              if (v10)
                goto LABEL_7;
LABEL_8:
              ;
            }
            goto LABEL_16;
          }
          if (!dword_1EE2A2F60)
          {
LABEL_16:
            if (v10)
              CFRelease(v10);
            goto LABEL_18;
          }
        }
        else if (!dword_1EE2A2F60)
        {
          goto LABEL_16;
        }
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_16;
      }
    }
  }
LABEL_18:
  v16 = 0;
  if (!a3)
    goto LABEL_20;
LABEL_19:
  for (j = CFArrayGetCount(a3); v16 < j; j = 0)
  {
    v18 = CFArrayGetValueAtIndex(a3, v16);
    v19 = CFGetTypeID(v18);
    if (v19 == FigVideoTargetGetTypeID()
      && FPSupport_fvtSupportsMetadataTrack((uint64_t)v18, (const opaqueCMFormatDescription *)DerivedStorage[3]))
    {
      value = (void *)CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[4], v18);
      if (value)
        goto LABEL_31;
      v33 = v34;
      type = v35;
      v20 = *(uint64_t (**)(const void *, _QWORD, CMTime *, CMTime *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 32);
      if (!v20)
        goto LABEL_45;
      v38 = v33;
      v37 = type;
      v21 = v20(v18, 0, &v38, &v37, &value);
      if ((_DWORD)v21)
        goto LABEL_46;
      v22 = DerivedStorage[1];
      CMBaseObject = FigDataQueueGetCMBaseObject(value);
      v24 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (!v24)
      {
LABEL_45:
        v30 = 4294954514;
        goto LABEL_42;
      }
      v21 = v24(CMBaseObject, CFSTR("ControlTimebase"), v22);
      if ((_DWORD)v21)
      {
LABEL_46:
        v30 = v21;
        goto LABEL_42;
      }
      CFDictionarySetValue((CFMutableDictionaryRef)DerivedStorage[4], v18, value);
      if (value)
      {
        CFRelease(value);
LABEL_31:
        value = 0;
      }
    }
    ++v16;
    if (a3)
      goto LABEL_19;
LABEL_20:
    ;
  }
  v25 = CMBaseObjectGetDerivedStorage();
  v26 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v26)
  {
    v27 = v26;
    if (CFArrayGetCount(v26) >= 1)
    {
      v28 = 0;
      do
      {
        v29 = CFArrayGetValueAtIndex(v27, v28);
        if (!FigCFArrayContainsValue())
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v25 + 32), v29);
        ++v28;
      }
      while (v28 < CFArrayGetCount(v27));
    }
    CFRelease(v27);
  }
  v30 = 0;
LABEL_42:
  if (value)
    CFRelease(value);
  MEMORY[0x19402EF04](*DerivedStorage);
  return v30;
}

__CFString *favd_createDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex v7;
  const void *ValueAtIndex;
  CFTypeID v9;
  CFIndex i;
  CFIndex Count;
  const void *v12;
  CFTypeID v13;
  CFIndex v14;
  CFTypeID v15;
  CFIndex v16;
  CFArrayRef theArray;

  CMBaseObjectGetDerivedStorage();
  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAggregateVideoDestination %p retainCount: %ld "), a1, v4);
  v5 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v5)
  {
    v6 = v5;
    if (CFArrayGetCount(v5) >= 1)
    {
      v7 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, v7);
        theArray = 0;
        favd_copyImageQueuesForOutput((uint64_t)a1, ValueAtIndex, (CFTypeRef *)&theArray);
        v9 = CFGetTypeID(ValueAtIndex);
        if (v9 == FigVideoTargetGetTypeID())
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("FVT:%p FIQ:"), ValueAtIndex);
          for (i = 0; ; ++i)
          {
            Count = (CFIndex)theArray;
            if (theArray)
              Count = CFArrayGetCount(theArray);
            if (i >= Count)
              break;
            v12 = CFArrayGetValueAtIndex(theArray, i);
            CFStringAppendFormat(Mutable, 0, CFSTR("%p "), v12);
          }
        }
        else
        {
          v13 = CFGetTypeID(ValueAtIndex);
          if (v13 == FigVisualContextGetTypeID())
          {
            v14 = (CFIndex)theArray;
            if (theArray)
            {
              v14 = CFArrayGetCount(theArray);
              if (v14)
                v14 = (CFIndex)CFArrayGetValueAtIndex(theArray, 0);
            }
            CFStringAppendFormat(Mutable, 0, CFSTR("FVC:%p FIQ:%p "), ValueAtIndex, v14);
          }
          else
          {
            v15 = CFGetTypeID(ValueAtIndex);
            if (v15 == CAImageQueueGetTypeID())
            {
              v16 = (CFIndex)theArray;
              if (theArray)
              {
                v16 = CFArrayGetCount(theArray);
                if (v16)
                  v16 = (CFIndex)CFArrayGetValueAtIndex(theArray, 0);
              }
              CFStringAppendFormat(Mutable, 0, CFSTR("CA:%p FIQ:%p "), ValueAtIndex, v16);
            }
          }
        }
        if (theArray)
          CFRelease(theArray);
        ++v7;
      }
      while (v7 < CFArrayGetCount(v6));
    }
    CFStringAppendFormat(Mutable, 0, CFSTR(">"));
    CFRelease(v6);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  }
  return Mutable;
}

uint64_t favd_copyImageQueuesForOutput(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  const __CFArray *Value;
  uint64_t v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a3)
    return FigSignalErrorAt();
  Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), a2);
  v7 = favd_copyImageQueuesFromDestination(Value, (__CFArray **)&cf, 0);
  if ((_DWORD)v7)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a3 = cf;
  }
  return v7;
}

uint64_t favd_copyImageQueuesFromDestination(const __CFArray *a1, __CFArray **a2, __CFArray **a3)
{
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  __CFArray *v9;
  uint64_t v10;
  CFIndex v11;
  CFIndex i;
  const void **ValueAtIndex;
  const void *v14;
  uint64_t v15;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294948255;
  v8 = Mutable;
  if (!a3)
  {
    v9 = 0;
LABEL_6:
    v11 = 0;
    if (!a1)
      goto LABEL_8;
LABEL_7:
    for (i = CFArrayGetCount(a1); v11 < i; i = 0)
    {
      ValueAtIndex = (const void **)CFArrayGetValueAtIndex(a1, v11);
      CFArrayAppendValue(v8, *ValueAtIndex);
      if (v9)
      {
        v14 = ValueAtIndex[1];
        if (v14)
          CFArrayAppendValue(v9, v14);
      }
      ++v11;
      if (a1)
        goto LABEL_7;
LABEL_8:
      ;
    }
    if (a2)
    {
      *a2 = v8;
      v8 = 0;
    }
    if (a3)
    {
      *a3 = v9;
      v9 = 0;
    }
    v10 = 0;
    v15 = 0;
    if (!v8)
      goto LABEL_21;
    goto LABEL_20;
  }
  v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (v9)
    goto LABEL_6;
  v10 = 4294948255;
LABEL_20:
  CFRelease(v8);
  v15 = v10;
LABEL_21:
  if (v9)
    CFRelease(v9);
  return v15;
}

void favd_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  favd_cleanupOldOutputs(a1);
  FigSimpleMutexDestroy();
  FigFormatDescriptionRelease();
  DerivedStorage[3] = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  v5 = (const void *)DerivedStorage[5];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[5] = 0;
  }
  v6 = (const void *)DerivedStorage[4];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[4] = 0;
  }
}

uint64_t favd_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v8;
  uint64_t v9;
  uint64_t Count;
  const void *ValueAtIndex;
  void (*v12)(const void *, __CFDictionary **);
  uint64_t v13;
  const __CFArray *v14;
  CFMutableArrayRef v15;
  __CFArray *v16;
  CFIndex v17;
  CFIndex i;
  const void *v19;
  CFTypeID v20;
  const __CFAllocator *v21;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v23;
  CFIndex v24;
  CFStringRef v25;
  CFStringRef v26;
  const void *v27;
  void (*v28)(const void *, void **);
  CFArrayRef v29;
  __CFDictionary *v31;
  const void *v32;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v35)(uint64_t, const __CFString *, uint64_t, void **);
  void *value;
  CFArrayRef theArray;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    v8 = DerivedStorage;
    MEMORY[0x19402EEEC](*DerivedStorage);
    if (CFEqual(a2, CFSTR("PerformanceDictionary")))
    {
      theArray = 0;
      v9 = favd_copyAllImageQueuesAndOptions(a1, &theArray, 0);
      if (!(_DWORD)v9)
      {
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count == 1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            v12 = *(void (**)(const void *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 72);
            if (v12)
              v12(ValueAtIndex, a4);
            v13 = 0;
            goto LABEL_33;
          }
        }
        else
        {
          Count = 0;
        }
        v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v23 = Mutable;
          if (Count < 1)
          {
LABEL_32:
            v13 = 0;
            *a4 = v23;
            goto LABEL_33;
          }
          v24 = 0;
          while (1)
          {
            value = 0;
            v25 = CFStringCreateWithFormat(v21, 0, CFSTR("imagequeue-%d"), v24);
            if (!v25)
              break;
            v26 = v25;
            v27 = CFArrayGetValueAtIndex(theArray, v24);
            v28 = *(void (**)(const void *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
            if (v28)
              v28(v27, &value);
            if (value)
              CFDictionarySetValue(v23, v26, value);
            CFRelease(v26);
            if (value)
              CFRelease(value);
            if (Count == ++v24)
              goto LABEL_32;
          }
          CFRelease(v23);
        }
        v13 = 4294948255;
LABEL_33:
        v29 = theArray;
        if (!theArray)
          goto LABEL_38;
        goto LABEL_37;
      }
    }
    else
    {
      if (CFEqual(a2, CFSTR("VideoTargets")))
      {
        CMBaseObjectGetDerivedStorage();
        v14 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        v15 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        if (v15)
        {
          v16 = v15;
          v17 = 0;
          if (!v14)
            goto LABEL_14;
LABEL_13:
          for (i = CFArrayGetCount(v14); v17 < i; i = 0)
          {
            v19 = CFArrayGetValueAtIndex(v14, v17);
            v20 = CFGetTypeID(v19);
            if (v20 == FigVideoTargetGetTypeID())
              CFArrayAppendValue(v16, v19);
            ++v17;
            if (v14)
              goto LABEL_13;
LABEL_14:
            ;
          }
          v13 = 0;
          *a4 = v16;
          if (!v14)
            goto LABEL_38;
        }
        else
        {
          v13 = 4294948255;
          if (!v14)
            goto LABEL_38;
        }
        v29 = v14;
LABEL_37:
        CFRelease(v29);
LABEL_38:
        MEMORY[0x19402EF04](*v8);
        return v13;
      }
      if (!CFEqual(a2, CFSTR("ImageQueueGauge")))
      {
        v13 = 4294954509;
        goto LABEL_38;
      }
      value = 0;
      theArray = 0;
      CMBaseObjectGetDerivedStorage();
      v9 = favd_copyAllImageQueuesAndOptions(a1, &theArray, 0);
      if (!(_DWORD)v9)
      {
        v31 = theArray;
        if (theArray)
        {
          if (CFArrayGetCount(theArray) < 1)
          {
            v31 = 0;
          }
          else
          {
            v32 = CFArrayGetValueAtIndex(theArray, 0);
            AllocatorForMedia = FigGetAllocatorForMedia();
            FigBaseObject = FigImageQueueGetFigBaseObject(v32);
            v35 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
            if (!v35)
            {
              v13 = 4294954514;
              goto LABEL_33;
            }
            v13 = v35(FigBaseObject, CFSTR("ImageQueueGauge"), AllocatorForMedia, &value);
            v31 = (__CFDictionary *)value;
            if ((_DWORD)v13)
            {
              if (value)
                CFRelease(value);
              goto LABEL_33;
            }
          }
        }
        v13 = 0;
        *a4 = v31;
        value = 0;
        goto LABEL_33;
      }
    }
    v13 = v9;
    goto LABEL_33;
  }
  return FigSignalErrorAt();
}

uint64_t favd_SetProperty(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _QWORD *v8;
  CFTypeID v9;
  char *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  v8 = (_QWORD *)DerivedStorage;
  v9 = CFGetTypeID(a1);
  MEMORY[0x19402F294](&FigAggregateVideoDestinationGetClassID_sRegisterFigAggregateVideoDestinationTypeOnce, RegisterFigAggregateVideoDestinationType);
  if (v9 != CMBaseClassGetCFTypeID() || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*v8);
  if (CFEqual(a2, CFSTR("VideoConfigID")))
  {
    *((_BYTE *)v8 + 8) = 0;
    v10 = (char *)(v8 + 1);
    if (a3)
    {
      CFStringGetCString((CFStringRef)a3, v10, 10, 0x600u);
      a3 = 0;
    }
  }
  else
  {
    a3 = 4294954509;
  }
  MEMORY[0x19402EF04](*v8, v10);
  return a3;
}

void favd_cleanupOldOutputs(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  const void *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex i;
  CFArrayRef Count;
  const __CFArray *v9;
  uint64_t DerivedStorage;
  CFArrayRef theArray[23];

  theArray[21] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      v4 = 0;
      v9 = v3;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, v4);
        if (!FigCFArrayContainsValue())
        {
          theArray[0] = 0;
          if (dword_1EE2A2F60)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          favd_copyImageQueuesForOutput(a1, ValueAtIndex, (CFTypeRef *)theArray);
          for (i = 0; ; ++i)
          {
            Count = theArray[0];
            if (theArray[0])
              Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
            if (i >= (uint64_t)Count)
              break;
            CFArrayGetValueAtIndex(theArray[0], i);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 40), ValueAtIndex);
          if (theArray[0])
            CFRelease(theArray[0]);
          v3 = v9;
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
}

void favd_handleFirstFrameEnqueued(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v6;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("OriginatingFigImageQueue"), a4);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v6);
  }
}

void favd_handleDisplaySizeChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  double *v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  __int128 v9;

  v5 = (double *)MEMORY[0x1E0C9D820];
  v9 = *MEMORY[0x1E0C9D820];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("OriginatingFigImageQueue"), a4);
    FigCFDictionaryGetCGSizeIfPresent();
    if (*(double *)&v9 != *v5 || *((double *)&v9 + 1) != v5[1])
      FigCFDictionarySetCGSize();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v7);
  }
}

uint64_t favd_copyAllImageQueuesAndOptions(uint64_t a1, __CFArray **a2, __CFArray **a3)
{
  uint64_t DerivedStorage;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFAllocator *v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  __CFArray *v12;
  CFIndex v13;
  const __CFArray *ValueAtIndex;
  uint64_t v15;
  const __CFArray *v16;
  const __CFArray *v17;
  CFIndex v18;
  uint64_t v19;
  CFArrayRef v21;
  CFArrayRef theArray;
  CFRange v23;
  CFRange v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (!v6)
    return 4294948255;
  v7 = v6;
  Count = CFArrayGetCount(v6);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v11 = Mutable;
    v12 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (!v12)
    {
      v19 = 4294948255;
      goto LABEL_28;
    }
    if (Count >= 1)
    {
      v13 = 0;
      do
      {
        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v7, v13);
        v21 = 0;
        theArray = 0;
        v15 = favd_copyImageQueuesFromDestination(ValueAtIndex, &theArray, &v21);
        if ((_DWORD)v15)
          goto LABEL_24;
        v16 = theArray;
        v23.length = CFArrayGetCount(theArray);
        v23.location = 0;
        CFArrayAppendArray(v11, v16, v23);
        v17 = v21;
        if (v21)
        {
          v24.length = CFArrayGetCount(v21);
          v24.location = 0;
          CFArrayAppendArray(v12, v17, v24);
        }
        if (theArray)
          CFRelease(theArray);
        if (v21)
          CFRelease(v21);
      }
      while (Count != ++v13);
    }
    if (*(_QWORD *)(DerivedStorage + 32))
    {
      v18 = CFArrayGetCount(v11);
      if (v18 == CFArrayGetCount(v12))
        goto LABEL_16;
    }
    else if (!CFArrayGetCount(v12))
    {
LABEL_16:
      if (a2)
      {
        *a2 = v11;
        v11 = 0;
      }
      if (a3)
      {
        v19 = 0;
        if (!CFArrayGetCount(v12))
        {
          *a3 = 0;
          if (!v11)
            goto LABEL_29;
          goto LABEL_28;
        }
        *a3 = v12;
        v12 = 0;
        if (v11)
LABEL_28:
          CFRelease(v11);
      }
      else
      {
        v19 = 0;
        if (v11)
          goto LABEL_28;
      }
LABEL_29:
      if (v12)
        CFRelease(v12);
      goto LABEL_31;
    }
    v15 = FigSignalErrorAt();
LABEL_24:
    v19 = v15;
    goto LABEL_28;
  }
  v19 = 4294948255;
LABEL_31:
  CFRelease(v7);
  return v19;
}

uint64_t favd_ImageQueueArraySetPropertyForOutputs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  const __CFArray *MappedArray;
  CFIndex v6;
  CFIndex i;
  const __CFArray *ValueAtIndex;
  uint64_t v9;
  uint64_t v10;
  CFArrayRef theArray;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  theArray = 0;
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (a3)
  {
    MappedArray = (const __CFArray *)FigCFDictionaryCreateMappedArray();
    v6 = 0;
    if (!MappedArray)
      goto LABEL_4;
LABEL_3:
    for (i = CFArrayGetCount(MappedArray); ; i = 0)
    {
      if (v6 >= i)
      {
        v10 = 0;
        goto LABEL_15;
      }
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(MappedArray, v6);
      v9 = favd_copyImageQueuesFromDestination(ValueAtIndex, &theArray, 0);
      if ((_DWORD)v9)
        break;
      if (theArray)
      {
        if (CFArrayGetCount(theArray))
          FigImageQueueArraySetProperty();
        if (theArray)
        {
          CFRelease(theArray);
          theArray = 0;
        }
      }
      ++v6;
      if (MappedArray)
        goto LABEL_3;
LABEL_4:
      ;
    }
    v10 = v9;
LABEL_15:
    MEMORY[0x19402EF04](*DerivedStorage);
    if (MappedArray)
      CFRelease(MappedArray);
  }
  else
  {
    v10 = FigSignalErrorAt();
    MEMORY[0x19402EF04](*DerivedStorage);
  }
  if (theArray)
    CFRelease(theArray);
  return v10;
}

uint64_t favd_CopyFigImageQueueArrayAndOptions(uint64_t a1, __CFArray **a2, __CFArray **a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (a2)
  {
    v7 = favd_copyAllImageQueuesAndOptions(a1, a2, a3);
    if (!(_DWORD)v7 && dword_1EE2A2F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v7 = 0;
    }
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return v7;
}

uint64_t favd_UpdateDataChannelConfigForVideoTarget(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v11;
  uint64_t MutableCopy;
  uint64_t v13;
  const __CFAllocator *AllocatorForMedia;
  __CFArray *Mutable;
  const __CFArray *v16;
  const __CFArray *Value;
  const __CFArray *v18;
  CFIndex v19;
  const void **ValueAtIndex;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  CMTagValue v24;
  CMTagValue v25;
  _QWORD *DerivedStorage;
  CMTag v28;
  CMTag v29;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (dword_1EE2A2F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = 0;
  if (!a2 || !a6)
    goto LABEL_30;
  if (a4)
    MutableCopy = FigTagCollectionCreateMutableCopy();
  else
    MutableCopy = FigTagCollectionCreateMutable();
  v13 = MutableCopy;
  if ((_DWORD)MutableCopy)
  {
    v11 = 0;
    goto LABEL_26;
  }
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  v11 = Mutable;
  if (!Mutable)
    goto LABEL_30;
  CFArrayAppendValue(Mutable, (const void *)DerivedStorage[3]);
  v16 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 32);
  if (v16 && CFArrayGetCount(v16))
  {
    MEMORY[0x19402F048](0, 1702454643);
    FigTagCollectionGetTagsWithCategory();
    *(_QWORD *)&v28.category = 0;
    v28.value = 0;
    CMTagCollectionRemoveTag(0, v28);
  }
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[5], a2);
  if (Value)
  {
    v18 = Value;
    if (CFArrayGetCount(Value) < 1)
    {
      v13 = 0;
    }
    else
    {
      v19 = 0;
      do
      {
        ValueAtIndex = (const void **)CFArrayGetValueAtIndex(v18, v19);
        v21 = ValueAtIndex[2];
        v22 = FigTagCollectionCreateMutableCopy();
        if ((_DWORD)v22)
        {
          v13 = v22;
        }
        else if (v21)
        {
          FigTagCollectionGetTagsWithCategory();
          v13 = 4294948254;
        }
        else
        {
          v23 = FigTagMakeWithSInt64Value();
          v25 = v24;
          *(_QWORD *)&v29.category = v23;
          v29.value = v25;
          CMTagCollectionAddTag(0, v29);
          v13 = 0;
        }
        if (*ValueAtIndex)
        {
          v13 = FigDataChannelConfigurationAddFigImageQueue(a6, *ValueAtIndex, 0, a5, v11);
          if ((_DWORD)v13)
            break;
        }
        ++v19;
      }
      while (v19 < CFArrayGetCount(v18));
    }
  }
  else
  {
LABEL_30:
    v13 = FigSignalErrorAt();
  }
LABEL_26:
  MEMORY[0x19402EF04](*DerivedStorage);
  if (v11)
    CFRelease(v11);
  return v13;
}

uint64_t favd_createDataChannelConfigID(uint64_t a1, CFStringRef *a2)
{
  _QWORD *DerivedStorage;
  CFStringRef v4;
  uint64_t v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (a2)
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("C/%s.%d"), DerivedStorage + 1, *((unsigned int *)DerivedStorage + 5));
    if (v4)
    {
      v5 = 0;
      ++*((_DWORD *)DerivedStorage + 5);
      *a2 = v4;
    }
    else
    {
      v5 = 4294948255;
    }
  }
  else
  {
    v5 = 4294948256;
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return v5;
}

uint64_t favd_CopyFigImageQueueForCAImageQueue(uint64_t a1, const void *a2, _QWORD *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  const void *ValueAtIndex;
  uint64_t v9;
  CFArrayRef theArray;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  theArray = 0;
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (!a2 || !a3)
    goto LABEL_11;
  v7 = favd_copyImageQueuesForOutput(a1, a2, (CFTypeRef *)&theArray);
  if ((_DWORD)v7)
  {
LABEL_12:
    v9 = v7;
    goto LABEL_13;
  }
  if (!theArray || !CFArrayGetCount(theArray) || !theArray || CFArrayGetCount(theArray) != 1)
  {
LABEL_11:
    v7 = FigSignalErrorAt();
    goto LABEL_12;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (ValueAtIndex)
    ValueAtIndex = CFRetain(ValueAtIndex);
  v9 = 0;
  *a3 = ValueAtIndex;
LABEL_13:
  MEMORY[0x19402EF04](*DerivedStorage);
  if (theArray)
    CFRelease(theArray);
  return v9;
}

uint64_t favd_CopyFigImageQueueForVisualContext(uint64_t a1, const void *a2, _QWORD *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  const void *ValueAtIndex;
  uint64_t v9;
  CFArrayRef theArray;

  theArray = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (!a2 || !a3)
    goto LABEL_11;
  v7 = favd_copyImageQueuesForOutput(a1, a2, (CFTypeRef *)&theArray);
  if ((_DWORD)v7)
  {
LABEL_12:
    v9 = v7;
    goto LABEL_13;
  }
  if (!theArray || !CFArrayGetCount(theArray) || !theArray || CFArrayGetCount(theArray) != 1)
  {
LABEL_11:
    v7 = FigSignalErrorAt();
    goto LABEL_12;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (ValueAtIndex)
    ValueAtIndex = CFRetain(ValueAtIndex);
  v9 = 0;
  *a3 = ValueAtIndex;
LABEL_13:
  MEMORY[0x19402EF04](*DerivedStorage);
  if (theArray)
    CFRelease(theArray);
  return v9;
}

uint64_t favd_IsAnyOutputReadyToRender()
{
  _QWORD *DerivedStorage;
  unsigned __int8 context;

  context = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  CFDictionaryApplyFunction((CFDictionaryRef)DerivedStorage[5], (CFDictionaryApplierFunction)favd_isAnyOutputReadyToRenderApplierFn, &context);
  MEMORY[0x19402EF04](*DerivedStorage);
  return context;
}

uint64_t favd_flushFramesFollowingCurrentFrame(uint64_t a1)
{
  _QWORD *DerivedStorage;
  uint64_t v3;
  CFIndex v4;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t (*v7)(const void *);
  uint64_t v8;
  CFArrayRef theArray;

  theArray = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v3 = favd_copyAllImageQueuesAndOptions(a1, &theArray, 0);
  if ((_DWORD)v3)
  {
LABEL_8:
    v8 = v3;
  }
  else
  {
    v4 = 0;
    while (1)
    {
      Count = (CFIndex)theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (v4 >= Count)
      {
        v8 = 0;
        goto LABEL_11;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
      v7 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
      if (!v7)
        break;
      v3 = v7(ValueAtIndex);
      ++v4;
      if ((_DWORD)v3)
        goto LABEL_8;
    }
    v8 = 4294954514;
  }
LABEL_11:
  MEMORY[0x19402EF04](*DerivedStorage);
  if (theArray)
    CFRelease(theArray);
  return v8;
}

void favd_isAnyOutputReadyToRenderApplierFn(int a1, CFArrayRef theArray, _BYTE *a3)
{
  CFIndex v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  CFIndex i;
  _QWORD *ValueAtIndex;
  uint64_t FigBaseObject;
  void (*v12)(uint64_t, const __CFString *, uint64_t, const void **);
  const void *v13;

  if (!*a3)
  {
    v5 = 0;
    v6 = (const void *)*MEMORY[0x1E0C9AE40];
    v7 = *MEMORY[0x1E0C9AE00];
    v8 = (const void *)*MEMORY[0x1E0C9AE50];
    if (!theArray)
      goto LABEL_4;
LABEL_3:
    for (i = CFArrayGetCount(theArray); v5 < i; i = 0)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
      v13 = v6;
      FigBaseObject = FigImageQueueGetFigBaseObject(*ValueAtIndex);
      v12 = *(void (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v12)
        v12(FigBaseObject, CFSTR("FigImageQueueProperty_FirstImageEnqueued"), v7, &v13);
      if (v13 != v8)
        return;
      if (v8)
        CFRelease(v8);
      ++v5;
      if (theArray)
        goto LABEL_3;
LABEL_4:
      ;
    }
    *a3 = 1;
  }
}

uint64_t favd_populateVideoDestination(uint64_t a1, const void *a2, CFIndex a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v8;
  OpaqueCMTimebase *v9;
  CFTypeID v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, const void *, CFTypeRef *);
  CFTypeRef v14;
  const void *v15;
  CFTypeRef *v16;
  CFTypeID v17;
  uint64_t v18;
  CFTypeID v19;
  uint64_t v20;
  uint64_t FigBaseObject;
  void (*v22)(uint64_t, const __CFString *, OpaqueCMTimebase *);
  uint64_t v23;
  void (*v24)(uint64_t, const __CFString *, _QWORD);
  uint64_t v25;
  CMTagValue v26;
  CMTagValue v27;
  CFIndex v28;
  const __CFArray *Count;
  const OpaqueCMTagCollection *ValueAtIndex;
  CFTypeRef cf[2];
  CMTag v33;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(const __CFArray **)(DerivedStorage + 32);
  if (v8)
  {
    if (CFArrayGetCount(v8) <= a3)
      return FigSignalErrorAt();
  }
  else if (a3)
  {
    return FigSignalErrorAt();
  }
  if (a4)
  {
    v9 = *(OpaqueCMTimebase **)(DerivedStorage + 48);
    cf[0] = 0;
    v10 = CFGetTypeID(a2);
    if (v10 == FigVisualContextGetTypeID())
    {
      v11 = FigImageQueueCreateForCoreVideo(0, cf);
      if (!(_DWORD)v11)
      {
        v12 = cf[0];
        v13 = *(uint64_t (**)(CFTypeRef, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
        if (v13)
        {
          v14 = v12;
          v15 = a2;
          v16 = (CFTypeRef *)v9;
LABEL_15:
          v18 = v13(v14, v15, v16);
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v17 = CFGetTypeID(a2);
      if (v17 == CAImageQueueGetTypeID())
      {
        v18 = FigImageQueueCreateForCoreAnimation(0, a2, cf);
LABEL_16:
        v20 = v18;
        if ((_DWORD)v18)
          goto LABEL_27;
        if (!cf[0])
          return 4294948253;
        v11 = favd_setupImageQueue((uint64_t)cf[0], v9);
        if (!(_DWORD)v11)
        {
          FigBaseObject = FigImageQueueGetFigBaseObject(cf[0]);
          v22 = *(void (**)(uint64_t, const __CFString *, OpaqueCMTimebase *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
          if (v22)
            v22(FigBaseObject, CFSTR("FigImageQueueProperty_Timebase"), v9);
          v23 = FigImageQueueGetFigBaseObject(cf[0]);
          v24 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
          if (v24)
            v24(v23, CFSTR("EnableImageQueueTiming"), *MEMORY[0x1E0C9AE50]);
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          *(CFTypeRef *)a4 = cf[0];
LABEL_30:
          if (*(_QWORD *)(DerivedStorage + 32))
          {
            v25 = FigTagMakeWithSInt64Value();
            v27 = v26;
            v28 = 0;
            do
            {
              Count = *(const __CFArray **)(DerivedStorage + 32);
              if (Count)
                Count = (const __CFArray *)CFArrayGetCount(Count);
              if (v28 >= (uint64_t)Count)
                return FigSignalErrorAt();
              ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 32), v28);
              *(_QWORD *)&v33.category = v25;
              v33.value = v27;
              ++v28;
            }
            while (!CMTagCollectionContainsTag(ValueAtIndex, v33));
            if (ValueAtIndex)
            {
              *(_QWORD *)(a4 + 16) = CFRetain(ValueAtIndex);
              cf[0] = 0;
              cf[1] = 0;
              FigTagCollectionGetTagsWithCategory();
              return 4294948254;
            }
            *(_QWORD *)(a4 + 16) = 0;
          }
          v20 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          return v20;
        }
        goto LABEL_26;
      }
      v19 = CFGetTypeID(a2);
      if (v19 == FigVideoTargetGetTypeID())
      {
        v13 = *(uint64_t (**)(CFTypeRef, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
        if (v13)
        {
          v16 = cf;
          v14 = a2;
          v15 = 0;
          goto LABEL_15;
        }
LABEL_24:
        v20 = 4294954514;
        goto LABEL_27;
      }
      v11 = FigSignalErrorAt();
    }
LABEL_26:
    v20 = v11;
LABEL_27:
    if (cf[0])
      CFRelease(cf[0]);
    if (!(_DWORD)v20)
      goto LABEL_30;
    return v20;
  }
  return FigSignalErrorAt();
}

void favd_cleanupVideoDestination(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t favd_areOutputsEqual(CFArrayRef theArray, const __CFArray *a2)
{
  uint64_t Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t result;
  CFRange v9;

  if (!theArray)
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(theArray);
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v5 = CFArrayGetCount(a2);
LABEL_6:
  if (theArray == a2)
    return 1;
  if (Count != v5)
    return 0;
  if (Count < 1)
    return 1;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
    v9.location = 0;
    v9.length = Count;
    result = CFArrayContainsValue(a2, v9, ValueAtIndex);
    if (!(_DWORD)result)
      break;
    if (Count == ++v6)
      return 1;
  }
  return result;
}

_QWORD *favd_imageQueueInfoRetainCallBack(const __CFAllocator *a1, uint64_t a2)
{
  _QWORD *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;

  v3 = CFAllocatorAllocate(a1, 24, 0);
  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    v4 = CFRetain(v4);
  *v3 = v4;
  v5 = *(CFTypeRef *)(a2 + 16);
  if (v5)
    v5 = CFRetain(v5);
  v3[2] = v5;
  v6 = *(CFTypeRef *)(a2 + 8);
  if (v6)
    v6 = CFRetain(v6);
  v3[1] = v6;
  return v3;
}

void favd_imageQueueInfoReleaseCallBack(const __CFAllocator *a1, void *a2)
{
  favd_cleanupVideoDestination((uint64_t)a2);
  CFAllocatorDeallocate(a1, a2);
}

__CFString *favd_imageQueueInfoCopyDescriptionCallBack(uint64_t a1)
{
  __CFString *Mutable;
  const void *v3;
  const void *v4;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = (const void *)FigCFCopyCompactDescription();
  v4 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("<VideoDestination: %p FIQ: %@ collection: %@>"), a1, v3, v4);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  return Mutable;
}

uint64_t favd_imageQueueInfoEqualCallBack()
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
  {
    result = FigCFEqual();
    if ((_DWORD)result)
      return FigCFEqual() != 0;
  }
  return result;
}

uint64_t favd_setupImageQueue(uint64_t a1, CMTimebaseRef timebase)
{
  double Rate;
  uint64_t (*v4)(uint64_t, BOOL);
  float v5;
  uint64_t result;
  uint64_t (*v7)(uint64_t, float);

  Rate = CMTimebaseGetRate(timebase);
  v4 = *(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v4)
    return 4294954514;
  v5 = Rate;
  result = v4(a1, v5 != 0.0);
  if ((_DWORD)result)
    return result;
  v7 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v7)
    return v7(a1, v5);
  else
    return 4294954514;
}

uint64_t favd_reconnectVisualContextToTimebaseApplierFn(const void *a1, const __CFArray *a2, uint64_t a3)
{
  CFTypeID v6;
  uint64_t result;
  CFIndex v8;
  uint64_t *ValueAtIndex;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, _QWORD);
  uint64_t v12;
  void (*v13)(uint64_t, const void *, uint64_t);

  v6 = CFGetTypeID(a1);
  result = FigVisualContextGetTypeID();
  if (v6 == result)
  {
    v8 = 0;
    if (!a2)
      goto LABEL_4;
LABEL_3:
    for (result = CFArrayGetCount(a2); v8 < result; result = 0)
    {
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(a2, v8);
      v10 = *ValueAtIndex;
      v11 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v11)
        v11(v10, 0, 0);
      v12 = *ValueAtIndex;
      v13 = *(void (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v13)
        v13(v12, a1, a3);
      ++v8;
      if (a2)
        goto LABEL_3;
LABEL_4:
      ;
    }
  }
  return result;
}

void favddq_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  FigFormatDescriptionRelease();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
}

__CFString *favddq_createDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAggregateVideoDestination [%p|%s] %@>"), a1, DerivedStorage + 40, v5);
  if (v5)
    CFRelease(v5);
  return Mutable;
}

uint64_t favddq_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, __CFArray **a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v7;
  uint64_t v8;
  const __CFArray *v9;
  const __CFArray *v10;
  uint64_t Count;
  uint64_t v12;
  uint64_t v13;
  __CFArray *Mutable;
  CFIndex v15;
  const void *ValueAtIndex;
  const void *v17;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, uint64_t, void **);
  uint64_t v20;
  void *value;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (CFEqual(a2, CFSTR("SampleBufferConsumersForDataQueues")))
  {
    value = 0;
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    v10 = v9;
    if (v9)
      Count = CFArrayGetCount(v9);
    else
      Count = 0;
    v13 = *MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      if (Count < 1)
      {
LABEL_17:
        v12 = 0;
        *a4 = Mutable;
        Mutable = 0;
        if (v10)
          goto LABEL_20;
        goto LABEL_21;
      }
      v15 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v10, v15);
        v17 = CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 32), ValueAtIndex);
        if (v17)
        {
          CMBaseObject = FigDataQueueGetCMBaseObject(v17);
          v19 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
          if (!v19)
          {
            v12 = 4294954514;
            if (v10)
              goto LABEL_20;
            goto LABEL_21;
          }
          v20 = v19(CMBaseObject, CFSTR("SampleBufferConsumer"), v13, &value);
          if ((_DWORD)v20)
            goto LABEL_26;
          CFArrayAppendValue(Mutable, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
        if (Count == ++v15)
          goto LABEL_17;
      }
    }
    v20 = FigSignalErrorAt();
LABEL_26:
    v12 = v20;
    if (v10)
LABEL_20:
      CFRelease(v10);
LABEL_21:
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v12 = 4294954509;
  }
  MEMORY[0x19402EF04](*v7);
  return v12;
}

uint64_t favddq_SetProperty(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _QWORD *v8;
  CFTypeID v9;
  char *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  v8 = (_QWORD *)DerivedStorage;
  v9 = CFGetTypeID(a1);
  MEMORY[0x19402F294](&FigAggregateVideoDestinationGetClassID_sRegisterFigAggregateVideoDestinationTypeOnce, RegisterFigAggregateVideoDestinationType);
  if (v9 != CMBaseClassGetCFTypeID() || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*v8);
  if (CFEqual(a2, CFSTR("VideoConfigID")))
  {
    *((_BYTE *)v8 + 40) = 0;
    v10 = (char *)(v8 + 5);
    if (a3)
    {
      CFStringGetCString((CFStringRef)a3, v10, 10, 0x600u);
      a3 = 0;
    }
  }
  else
  {
    a3 = 4294954509;
  }
  MEMORY[0x19402EF04](*v8, v10);
  return a3;
}

uint64_t favddq_UpdateDataChannelConfigForVideoTarget(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *DerivedStorage;
  uint64_t MutableCopy;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *AllocatorForMedia;
  __CFArray *Mutable;
  const __CFArray *v15;
  _QWORD *v16;
  const void *Value;
  const void *v18;
  uint64_t v19;
  CMTagValue v20;
  CMTagValue v21;
  uint64_t v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v24;
  uint64_t v26;
  CMTag v27;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (!a2 || !a6)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v26 = a6;
  if (a4)
    MutableCopy = FigTagCollectionCreateMutableCopy();
  else
    MutableCopy = FigTagCollectionCreateMutable();
  v11 = MutableCopy;
  if (!(_DWORD)MutableCopy)
  {
    v12 = CMBaseObjectGetDerivedStorage();
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      v11 = FigSignalErrorAt();
      if ((_DWORD)v11)
        goto LABEL_17;
      goto LABEL_15;
    }
    v15 = Mutable;
    v16 = DerivedStorage;
    CFArrayAppendValue(Mutable, *(const void **)(v12 + 24));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 32), a2);
    if (Value)
    {
      v18 = Value;
      v19 = FigTagMakeWithSInt64Value();
      v21 = v20;
      *(_QWORD *)&v27.category = v19;
      v27.value = v21;
      v22 = CMTagCollectionAddTag(0, v27);
      if ((_DWORD)v22 || (v22 = CMTagCollectionAddTag(0, *MEMORY[0x1E0CA5220]), (_DWORD)v22))
      {
        v11 = v22;
      }
      else
      {
        v11 = FigDataChannelConfigurationAddFigDataQueue(v26, v18, 0, 0, v15);
        if (!(_DWORD)v11 && dword_1EE2A2F60)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v11 = 0;
        }
      }
    }
    else
    {
      v11 = 0;
    }
    CFRelease(v15);
    DerivedStorage = v16;
    if (!(_DWORD)v11)
    {
LABEL_15:
      if (dword_1EE2A2F60)
      {
        v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v11 = 0;
      }
    }
  }
LABEL_17:
  MEMORY[0x19402EF04](*DerivedStorage);
  return v11;
}

uint64_t favddq_createDataChannelConfigID(uint64_t a1, CFStringRef *a2)
{
  _QWORD *DerivedStorage;
  CFStringRef v4;
  uint64_t v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (a2)
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s.%d"), DerivedStorage + 5, *((unsigned int *)DerivedStorage + 4));
    if (v4)
    {
      v5 = 0;
      ++*((_DWORD *)DerivedStorage + 4);
      *a2 = v4;
    }
    else
    {
      v5 = 4294948255;
    }
  }
  else
  {
    v5 = 4294948256;
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return v5;
}

uint64_t FigCaptionGroupConverterFromSampleBufferStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigCaptionGroupConverterFromSampleBufferStartServer_block_invoke;
  block[3] = &unk_1E2F97BE8;
  block[4] = &v3;
  if (FigCaptionGroupConverterFromSampleBufferStartServer_sFigCaptionGroupConverterServerSetupOnce != -1)
    dispatch_once(&FigCaptionGroupConverterFromSampleBufferStartServer_sFigCaptionGroupConverterServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t serverXPCFigCaptionGroupConverter_replyingMessageHandler()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t serverXPCFigCaptionGroupConverter_Callback(uint64_t a1, uint64_t a2, xpc_connection_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v4)
  {
    v4 = FigXPCServerLookupAndRetainAssociatedObject();
    if (!(_DWORD)v4)
      v4 = FigSignalErrorAt();
  }
  v5 = v4;
  xpc_connection_send_message(*a3, 0);
  FigXPCRelease();
  return v5;
}

double FigCaptionGroupConverterFromSampleBufferServerInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigCaptionGroupConverterFromSampleBufferServerFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  FigXPCRelease();
  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
}

__CFString *FigCaptionGroupConverterFromSampleBufferServerCopyDebugDesc(_QWORD *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionGroupConverterFromSampleBufferServerRef %p %@> OID: %lld, Serializer: %@, Converter: %@"), a1, a1[4], a1[3], a1[5], a1[6]);
  return Mutable;
}

uint64_t FigSteeringManifestCreateInProcess(CFAllocatorRef blockAllocator, OpaqueCMBlockBuffer *a2, const __CFURL *a3, int a4, char a5, __CFArray *a6, const __CFDictionary **a7)
{
  uint64_t DataPointer;
  CFDataRef v12;
  uint64_t TypeID;
  CFTypeID v14;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  const __CFString *Value;
  const __CFString *v18;
  CFTypeID v19;
  const __CFDictionary *Copy;
  const __CFDictionary *v21;
  uint64_t IsFloatType;
  const __CFNumber *v23;
  CFTypeID v24;
  CFTypeID v25;
  const void *v26;
  CFTypeID v27;
  const void *v28;
  CFTypeID v29;
  const __CFArray *v30;
  CFAllocatorRef *v31;
  const __CFArray *v32;
  CFTypeID v33;
  CFTypeID v34;
  CFMutableSetRef Mutable;
  const __CFSet *v36;
  CFIndex v37;
  CFIndex v38;
  CFIndex v39;
  uint64_t v40;
  const __CFString *ValueAtIndex;
  const __CFString *v42;
  CFTypeID v43;
  uint64_t Length;
  uint64_t v45;
  const void *v46;
  const void *v47;
  const __CFAllocator *v48;
  CFMutableSetRef v49;
  __CFSet *v50;
  CFMutableSetRef v51;
  const __CFSet *v52;
  CFTypeID v53;
  CFTypeID v54;
  CFIndex v55;
  CFIndex v56;
  CFIndex v57;
  const __CFDictionary *v58;
  const __CFDictionary *v59;
  CFTypeID v60;
  CFTypeID v61;
  const void *v62;
  const void *v63;
  CFTypeID v64;
  CFTypeID v65;
  const void *v66;
  const void *v67;
  CFTypeID v68;
  CFTypeID v69;
  uint64_t v70;
  uint64_t v71;
  const __CFDictionary *v72;
  const __CFDictionary *v73;
  CFTypeID v74;
  CFTypeID v75;
  const void *v76;
  CFTypeID v77;
  CFTypeID v78;
  const void *v79;
  const void *v80;
  const void *v81;
  const __CFDictionary **v82;
  const __CFString *v84;
  const __CFString *v85;
  uint64_t v86;
  const __CFString *v87;
  uint64_t v88;
  const __CFData *v89;
  int v90;
  __CFDictionary *v91;
  const __CFString *v92;
  const __CFDictionary **v93;
  CFDictionaryRef theDict;
  CFMutableArrayRef v95;
  uint64_t v96;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  uint64_t valuePtr;

  cf = 0;
  blockBufferOut = 0;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  v95 = a6;
  v96 = 0;
  BYTE1(v96) = a4;
  LOBYTE(v96) = a5;
  DataPointer = CMBlockBufferCreateContiguous(blockAllocator, a2, blockAllocator, 0, 0, 0, 0, &blockBufferOut);
  if ((_DWORD)DataPointer)
    goto LABEL_114;
  DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_114;
  if (!dataPointerOut || !lengthAtOffsetOut)
  {
    DataPointer = FigSignalErrorAt();
LABEL_114:
    v40 = DataPointer;
    v12 = 0;
LABEL_116:
    MutableCopy = 0;
LABEL_117:
    v21 = 0;
    v18 = 0;
    goto LABEL_88;
  }
  v12 = CFDataCreate(blockAllocator, (const UInt8 *)dataPointerOut, lengthAtOffsetOut);
  if (!v12)
  {
    v40 = FigSignalErrorAt();
    goto LABEL_116;
  }
  TypeID = FigJSONObjectCreateWithData();
  if ((_DWORD)TypeID)
  {
    v85 = CFSTR("failed to parse manifest JSON format");
LABEL_120:
    v86 = 4294951543;
LABEL_122:
    _SteeringLogError(TypeID, v86, &v95, v85);
    MutableCopy = 0;
    v21 = 0;
    v18 = 0;
    v40 = 4294951544;
    goto LABEL_88;
  }
  TypeID = (uint64_t)cf;
  if (!cf)
  {
    v85 = CFSTR("manifest JSON parser returned NULL");
    goto LABEL_120;
  }
  v14 = CFGetTypeID(cf);
  TypeID = CFDictionaryGetTypeID();
  if (v14 != TypeID)
  {
    v85 = CFSTR("Steering Manifest: manifest JSON object not dictionary");
    v86 = 4294951542;
    goto LABEL_122;
  }
  Count = CFDictionaryGetCount((CFDictionaryRef)cf);
  MutableCopy = CFDictionaryCreateMutableCopy(blockAllocator, Count, (CFDictionaryRef)cf);
  if (!MutableCopy)
  {
    v40 = FigSignalErrorAt();
    goto LABEL_117;
  }
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("RELOAD-URI"));
  v18 = Value;
  if (Value)
  {
    v19 = CFGetTypeID(Value);
    if (v19 == CFStringGetTypeID())
    {
      v18 = (const __CFString *)CFURLCreateWithString(blockAllocator, v18, a3);
      if (!v18)
      {
        v40 = FigSignalErrorAt();
        goto LABEL_87;
      }
      CFDictionarySetValue(MutableCopy, CFSTR("RELOAD-URI"), v18);
    }
    else
    {
      v18 = 0;
    }
  }
  Copy = CFDictionaryCreateCopy(blockAllocator, MutableCopy);
  v21 = Copy;
  if (!Copy)
  {
    v40 = FigSignalErrorAt();
    goto LABEL_88;
  }
  v90 = a4;
  valuePtr = 0;
  IsFloatType = (uint64_t)CFDictionaryGetValue(Copy, CFSTR("VERSION"));
  v91 = MutableCopy;
  v92 = v18;
  v93 = a7;
  if (!IsFloatType)
  {
    v87 = CFSTR("Steering Manifest: missing VERSION");
LABEL_130:
    v88 = 4294951541;
LABEL_146:
    _SteeringLogError(IsFloatType, v88, &v95, v87);
    v40 = 4294951544;
    goto LABEL_82;
  }
  v23 = (const __CFNumber *)IsFloatType;
  v24 = CFGetTypeID((CFTypeRef)IsFloatType);
  IsFloatType = CFNumberGetTypeID();
  if (v24 != IsFloatType)
  {
    v87 = CFSTR("Steering Manifest: invalid VERSION data type");
LABEL_145:
    v88 = 4294951542;
    goto LABEL_146;
  }
  IsFloatType = CFNumberIsFloatType(v23);
  if ((_DWORD)IsFloatType)
  {
    v87 = CFSTR("Steering Manifest: VERSION is not an integer number");
    goto LABEL_145;
  }
  IsFloatType = CFNumberGetValue(v23, kCFNumberCFIndexType, &valuePtr);
  if (valuePtr != 1)
  {
    v87 = CFSTR("Steering Manifest: VERSION number must be 1");
    goto LABEL_145;
  }
  IsFloatType = (uint64_t)CFDictionaryGetValue(v21, CFSTR("TTL"));
  if (!IsFloatType)
  {
    v87 = CFSTR("Steering Manifest: missing TTL");
    goto LABEL_130;
  }
  v25 = CFGetTypeID((CFTypeRef)IsFloatType);
  IsFloatType = CFNumberGetTypeID();
  if (v25 != IsFloatType)
  {
    v87 = CFSTR("Steering Manifest: invalid TTL data type");
    goto LABEL_145;
  }
  v26 = CFDictionaryGetValue(v21, CFSTR("RELOAD-URI"));
  if (v26)
  {
    v27 = CFGetTypeID(v26);
    IsFloatType = CFURLGetTypeID();
    if (v27 != IsFloatType)
    {
      v87 = CFSTR("Steering Manifest: invalid RELOAD-URI data type");
      goto LABEL_145;
    }
  }
  v28 = CFDictionaryGetValue(v21, CFSTR("UNIVERSAL"));
  if (v28)
  {
    v29 = CFGetTypeID(v28);
    IsFloatType = CFBooleanGetTypeID();
    if (v29 != IsFloatType)
    {
      v87 = CFSTR("Steering Manifest: invalid UNIVERSAL data type");
      goto LABEL_145;
    }
  }
  v30 = (const __CFArray *)CFDictionaryGetValue(v21, CFSTR("PATHWAY-PRIORITY"));
  v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  theDict = v21;
  if (!v30)
  {
    _SteeringLogError(0, 4294951541, &v95, CFSTR("Steering Manifest: missing PATHWAY-PRIORITY"));
LABEL_134:
    v40 = 4294951544;
    goto LABEL_40;
  }
  v32 = v30;
  v33 = CFGetTypeID(v30);
  v34 = CFArrayGetTypeID();
  if (v33 != v34)
  {
    _SteeringLogError(v34, 4294951542, &v95, CFSTR("Steering Manifest: invalid PATHWAY-PRIORITY data type"));
    goto LABEL_134;
  }
  Mutable = CFSetCreateMutable(*v31, 0, MEMORY[0x1E0C9B3B0]);
  if (!Mutable)
  {
    v40 = FigSignalErrorAt();
    if ((_DWORD)v40)
      goto LABEL_40;
    goto LABEL_41;
  }
  v36 = Mutable;
  v37 = CFArrayGetCount(v32);
  if (v37 < 1)
  {
    _SteeringLogError(v37, 4294951541, &v95, CFSTR("Steering Manifest: PATHWAY-PRIORITY MUST contain at least one Pathway ID"));
    goto LABEL_107;
  }
  v38 = v37;
  v39 = 0;
  v40 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v32, v39);
    if (!ValueAtIndex)
    {
      v40 = FigSignalErrorAt();
      goto LABEL_39;
    }
    v42 = ValueAtIndex;
    v43 = CFGetTypeID(ValueAtIndex);
    Length = CFStringGetTypeID();
    if (v43 != Length)
    {
      v84 = CFSTR("Steering Pathway: invalid Pathway ID data type in PATHWAY-PRIORITY");
      goto LABEL_106;
    }
    Length = CFStringGetLength(v42);
    if (Length <= 0)
      break;
    v45 = CFSetContainsValue(v36, v42);
    if ((_DWORD)v45)
    {
      _SteeringLogError(v45, 4294951542, &v95, CFSTR("Steering Manifest: duplicated Pathway IDs in PATHWAY-PRIORITY"));
      v40 = 4294951544;
LABEL_37:
      if (!BYTE1(v96))
        goto LABEL_39;
      goto LABEL_38;
    }
    CFSetAddValue(v36, v42);
    if ((_DWORD)v40)
      goto LABEL_37;
LABEL_38:
    if (v38 == ++v39)
      goto LABEL_39;
  }
  v84 = CFSTR("Steering Pathway: empty Pathway ID in PATHWAY-PRIORITY");
LABEL_106:
  _SteeringLogError(Length, 4294951542, &v95, v84);
LABEL_107:
  v40 = 4294951544;
LABEL_39:
  CFRelease(v36);
  v21 = theDict;
  if (!(_DWORD)v40)
  {
LABEL_41:
    v89 = v12;
    v46 = CFDictionaryGetValue(v21, CFSTR("PATHWAY-CLONES"));
    if (!v46)
    {
      v40 = 0;
      v18 = v92;
      v82 = v93;
      goto LABEL_86;
    }
    v47 = v46;
    v48 = *v31;
    v49 = CFSetCreateMutable(*v31, 0, MEMORY[0x1E0C9B3B0]);
    if (v49)
    {
      v50 = v49;
      v51 = CFSetCreateMutable(v48, 0, MEMORY[0x1E0C9B3B0]);
      if (v51)
      {
        v52 = v51;
        v53 = CFGetTypeID(v47);
        v54 = CFArrayGetTypeID();
        if (v53 == v54)
        {
          v55 = CFArrayGetCount((CFArrayRef)v47);
          if (v55 >= 1)
          {
            v56 = v55;
            v57 = 0;
            v40 = 0;
            while (1)
            {
              v58 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v47, v57);
              if (!v58)
              {
                v40 = FigSignalErrorAt();
                goto LABEL_81;
              }
              v59 = v58;
              v60 = CFGetTypeID(v58);
              v61 = CFDictionaryGetTypeID();
              if (v60 != v61)
              {
                _SteeringLogError(v61, 4294951542, &v95, CFSTR("Steering Pathway: invalid Pathway Clone data type in PATHWAY-CLONES"));
                goto LABEL_112;
              }
              v62 = CFDictionaryGetValue(v59, CFSTR("BASE-ID"));
              if (v62)
              {
                v63 = v62;
                v64 = CFGetTypeID(v62);
                v65 = CFStringGetTypeID();
                if (v64 != v65)
                {
                  _SteeringLogError(v65, 4294951542, &v95, CFSTR("Steering Pathway: invalid BASE-ID data type in Pathway Clone"));
                  goto LABEL_112;
                }
                CFSetAddValue(v50, v63);
              }
              else
              {
                v40 = FigSignalErrorAt();
                if (!BYTE1(v96))
                  goto LABEL_81;
              }
              v66 = CFDictionaryGetValue(v59, CFSTR("ID"));
              if (v66)
                break;
              v40 = FigSignalErrorAt();
              if (!BYTE1(v96))
                goto LABEL_81;
LABEL_63:
              v72 = (const __CFDictionary *)CFDictionaryGetValue(v59, CFSTR("URI-REPLACEMENT"));
              if (!v72)
              {
                v40 = FigSignalErrorAt();
LABEL_77:
                if (!BYTE1(v96))
                  goto LABEL_81;
                goto LABEL_78;
              }
              v73 = v72;
              v74 = CFGetTypeID(v72);
              v75 = CFDictionaryGetTypeID();
              if (v74 != v75)
              {
                _SteeringLogError(v75, 4294951542, &v95, CFSTR("Steering Pathway: invalid URI-REPLACEMENT data type in Pathway Clone"));
                goto LABEL_112;
              }
              v76 = CFDictionaryGetValue(v73, CFSTR("HOST"));
              if (v76)
              {
                v77 = CFGetTypeID(v76);
                v78 = CFStringGetTypeID();
                if (v77 != v78)
                {
                  _SteeringLogError(v78, 4294951542, &v95, CFSTR("Steering Pathway: invalid HOST data type in URI-REPLACEMENT"));
                  goto LABEL_112;
                }
              }
              v79 = CFDictionaryGetValue(v73, CFSTR("PARAMS"));
              if (v79)
              {
                v40 = validateStringToStringDictionary(v79, (uint64_t)"Pathway Clone PARAMS", &v95);
                if ((_DWORD)v40)
                {
                  if (!BYTE1(v96))
                    goto LABEL_81;
                }
              }
              v80 = CFDictionaryGetValue(v73, CFSTR("PER-VARIANT-URIS"));
              if (v80)
              {
                v40 = validateStringToStringDictionary(v80, (uint64_t)"Pathway Clone PER-VARIANT-URIS", &v95);
                if ((_DWORD)v40)
                {
                  if (!BYTE1(v96))
                    goto LABEL_81;
                }
              }
              v81 = CFDictionaryGetValue(v73, CFSTR("PER-RENDITION-URIS"));
              if (v81)
              {
                v40 = validateStringToStringDictionary(v81, (uint64_t)"Pathway Clone PER-RENDITION-URIS", &v95);
                if ((_DWORD)v40)
                  goto LABEL_77;
              }
LABEL_78:
              if (v56 == ++v57)
                goto LABEL_81;
            }
            v67 = v66;
            v68 = CFGetTypeID(v66);
            v69 = CFStringGetTypeID();
            if (v68 != v69)
            {
              _SteeringLogError(v69, 4294951542, &v95, CFSTR("Steering Pathway: invalid ID data type in Pathway Clone"));
              goto LABEL_112;
            }
            v70 = CFSetContainsValue(v52, v67);
            if ((_DWORD)v70)
            {
              _SteeringLogError(v70, 4294951542, &v95, CFSTR("Steering Manifest: duplicated IDs in Pathway Clone"));
            }
            else
            {
              v71 = CFSetContainsValue(v50, v67);
              if (!(_DWORD)v71)
              {
LABEL_62:
                CFSetAddValue(v52, v67);
                goto LABEL_63;
              }
              _SteeringLogError(v71, 4294951542, &v95, CFSTR("Steering Manifest: Pathway Clone ID defined after use"));
            }
            v40 = 4294951544;
            if (!BYTE1(v96))
              goto LABEL_81;
            goto LABEL_62;
          }
          v40 = 0;
        }
        else
        {
          _SteeringLogError(v54, 4294951542, &v95, CFSTR("Steering Manifest: invalid PATHWAY-CLONES data type"));
LABEL_112:
          v40 = 4294951544;
        }
LABEL_81:
        CFRelease(v50);
        CFRelease(v52);
        v12 = v89;
        v21 = theDict;
        goto LABEL_82;
      }
      v40 = FigSignalErrorAt();
      CFRelease(v50);
    }
    else
    {
      v40 = FigSignalErrorAt();
    }
    v12 = v89;
    goto LABEL_82;
  }
LABEL_40:
  if (BYTE1(v96))
    goto LABEL_41;
LABEL_82:
  v18 = v92;
  v82 = v93;
  if (v90)
  {
    MutableCopy = v91;
    goto LABEL_86;
  }
  MutableCopy = v91;
  if (!(_DWORD)v40)
  {
LABEL_86:
    *v82 = v21;
LABEL_87:
    v21 = 0;
  }
LABEL_88:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (v12)
    CFRelease(v12);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v21)
    CFRelease(v21);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v40;
}

void _SteeringLogError(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3, CFStringRef format, ...)
{
  const __CFAllocator *v5;
  CFStringRef v6;
  CFStringRef v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  CFAbsoluteTime Current;
  CFDateRef v11;
  CFDateRef v12;
  va_list va;

  va_start(va, format);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (format)
    v6 = CFStringCreateWithFormatAndArguments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, format, va);
  else
    v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "Format Error", 0x8000100u);
  v7 = v6;
  FigSignalErrorAt();
  if (*a3)
  {
    Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v9 = Mutable;
      Current = CFAbsoluteTimeGetCurrent();
      v11 = CFDateCreate(v5, Current);
      if (v11)
      {
        v12 = v11;
        CFDictionarySetValue(v9, CFSTR("date"), v11);
        CFRelease(v12);
      }
      CFDictionarySetValue(v9, CFSTR("domain"), CFSTR("CoreMediaErrorDomain"));
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (v7)
        CFDictionarySetValue(v9, CFSTR("comment"), v7);
      if (*a3)
        CFArrayAppendValue(*a3, v9);
      CFRelease(v9);
    }
  }
  if (v7)
    CFRelease(v7);
}

const __CFNumber *FigSteeringManifestGetVersion()
{
  const __CFNumber *result;
  uint64_t valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)FigCFDictionaryGetValue();
  if (result)
  {
    CFNumberGetValue(result, kCFNumberCFIndexType, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

const __CFArray *FigSteeringManifestGetPathwayCount()
{
  const __CFArray *result;

  result = (const __CFArray *)FigCFDictionaryGetValue();
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

double FigSteeringManifestGetTTL()
{
  const __CFNumber *Value;
  double valuePtr;

  valuePtr = 0.0;
  Value = (const __CFNumber *)FigCFDictionaryGetValue();
  if (!Value)
    return 0.0;
  CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  return valuePtr;
}

uint64_t FigSteeringManifestGetReloadURI()
{
  return FigCFDictionaryGetValue();
}

const __CFBoolean *FigSteeringManifestIsUniversal()
{
  const __CFBoolean *result;

  result = (const __CFBoolean *)FigCFDictionaryGetValue();
  if (result)
    return (const __CFBoolean *)CFBooleanGetValue(result);
  return result;
}

uint64_t FigSteeringManifestGetPathwayPriorityList()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigSteeringManifestGetPathwayClones()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetBaseID()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetID()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetURIReplacementHost()
{
  FigCFDictionaryGetValue();
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetURIReplacementParams()
{
  FigCFDictionaryGetValue();
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetURIReplacementPerVariantURIs()
{
  FigCFDictionaryGetValue();
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetURIReplacementPerRenditionURIs()
{
  FigCFDictionaryGetValue();
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneEquals()
{
  uint64_t result;

  FigCFDictionaryGetValue();
  FigCFDictionaryGetValue();
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    FigCFDictionaryGetValue();
    FigCFDictionaryGetValue();
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      FigCFDictionaryGetValue();
      FigCFDictionaryGetValue();
      FigCFDictionaryGetValue();
      FigCFDictionaryGetValue();
      result = FigCFEqual();
      if ((_DWORD)result)
      {
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        result = FigCFEqual();
        if ((_DWORD)result)
        {
          FigCFDictionaryGetValue();
          FigCFDictionaryGetValue();
          FigCFDictionaryGetValue();
          FigCFDictionaryGetValue();
          result = FigCFEqual();
          if ((_DWORD)result)
          {
            FigCFDictionaryGetValue();
            FigCFDictionaryGetValue();
            FigCFDictionaryGetValue();
            FigCFDictionaryGetValue();
            return FigCFEqual() != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigSteeringManifestCreate(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, const __CFURL *a3, int a4, char a5, __CFArray *a6, const __CFDictionary **a7)
{
  if (_os_feature_enabled_impl())
    return FigSteeringManifestCreateRemote();
  else
    return FigSteeringManifestCreateInProcess(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t validateStringToStringDictionary(const void *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  CFTypeID v6;
  CFTypeID TypeID;
  _QWORD context[3];
  unsigned int v10;

  v10 = 0;
  context[0] = &v10;
  context[1] = a2;
  context[2] = a3;
  v6 = CFGetTypeID(a1);
  TypeID = CFDictionaryGetTypeID();
  if (v6 == TypeID)
  {
    CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)validateStringToStringDictionary_callback, context);
    return v10;
  }
  else
  {
    _SteeringLogError(TypeID, 4294951542, a3, CFSTR("%s: invalid data type"), a2);
    return 4294951544;
  }
}

void validateStringToStringDictionary_callback(const void *a1, const void *a2, uint64_t a3)
{
  CFTypeID v5;
  CFTypeID TypeID;
  CFTypeID v7;
  CFTypeID v8;

  if (!**(_DWORD **)a3)
  {
    v5 = CFGetTypeID(a1);
    TypeID = CFStringGetTypeID();
    if (v5 == TypeID)
    {
      v7 = CFGetTypeID(a2);
      v8 = CFStringGetTypeID();
      if (v7 == v8)
        return;
      _SteeringLogError(v8, 4294951542, *(CFMutableArrayRef **)(a3 + 16), CFSTR("%s: invalid dictionary value data type"), *(_QWORD *)(a3 + 8));
    }
    else
    {
      _SteeringLogError(TypeID, 4294951542, *(CFMutableArrayRef **)(a3 + 16), CFSTR("%s: invalid dictionary key data type"), *(_QWORD *)(a3 + 8));
    }
    **(_DWORD **)a3 = -15752;
  }
}

uint64_t FigWebVTTCaptionGroupConverterFromSampleBufferCreate(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;

  if (!a3 || !a1 || !*a1 || !a1[1])
    return FigSignalErrorAt();
  FigCaptionGroupConverterFromSampleBufferGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)DerivedStorage = *(_OWORD *)a1;
    v5 = WebVTTSampleBufferParserCreate((_QWORD *)(DerivedStorage + 16));
    if (!(_DWORD)v5)
      *a3 = 0;
  }
  return v5;
}

void fcgcfs_webvtt_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  WebVTTSampleBufferParserDestroy(*(_QWORD **)(DerivedStorage + 16));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

__CFString *fcgcfs_webvtt_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigWebVTTCaptionGroupConverterFromSampleBufferf %p>"), a1);
  return Mutable;
}

uint64_t fcgcfs_webvtt_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  CFTypeRef v8;
  uint64_t result;

  if (!a4)
    return FigSignalErrorAt();
  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!FigCFEqual())
    return 4294954512;
  v7 = *(const void **)(v6 + 24);
  if (!v7)
    return 4294954513;
  v8 = CFRetain(v7);
  result = 0;
  *a4 = v8;
  return result;
}

uint64_t fcgcfs_webvtt_setProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeID v6;
  const void *v7;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v5 = DerivedStorage;
      if (!FigCFEqual())
        return 4294954512;
      if (!a3)
      {
        v7 = *(const void **)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        if (!v7)
          return 0;
        goto LABEL_7;
      }
      v6 = CFGetTypeID(a3);
      if (v6 == CFArrayGetTypeID())
      {
        v7 = *(const void **)(v5 + 24);
        *(_QWORD *)(v5 + 24) = a3;
        CFRetain(a3);
        if (!v7)
          return 0;
LABEL_7:
        CFRelease(v7);
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t fcgcfs_webvtt_addSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  __int128 v3;
  uint64_t DerivedStorage;
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *Mutable;
  FourCharCode MediaSubType;
  uint64_t v8;
  const __CFAllocator *v9;
  __CFData *v10;
  __CFData *v11;
  CFIndex v12;
  const void *v13;
  const __CFAttributedString *ValueAtIndex;
  CFIndex Length;
  CFIndex v16;
  uint64_t v17;
  CFTypeRef v18;
  CFStringRef String;
  uint64_t (*v20)(CFTypeRef, CFStringRef);
  const __CFDictionary *Attributes;
  uint64_t v22;
  CMTimeValue value;
  uint64_t CMBaseObject;
  uint64_t (*v25)(uint64_t, uint64_t, CMTimeValue);
  uint64_t v26;
  CFTypeRef v27;
  const __CFDictionary *v28;
  uint64_t v29;
  CMTime *v30;
  const void *CGColorSRGB;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, _QWORD);
  CFTypeRef v36;
  const __CFDictionary *v37;
  const __CFDictionary *v38;
  const __CFString *v39;
  const __CFString *v40;
  uint64_t v41;
  CMTimeValue v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, CMTimeValue);
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  const __CFDictionary *v48;
  CFTypeRef v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, CFTypeRef);
  uint64_t v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  CFComparisonResult v58;
  CFStringRef *v59;
  uint64_t v60;
  CFComparisonResult v61;
  const __CFNumber *v62;
  const __CFNumber *v63;
  const __CFString *v64;
  char v65;
  uint64_t v66;
  const void *v67;
  int v68;
  CMTimeValue v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, CMTimeValue);
  int v72;
  uint64_t v73;
  const void *v74;
  int v75;
  CMTimeValue v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, CMTimeValue);
  int v79;
  uint64_t v80;
  uint64_t v81;
  CFTypeRef v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, CFTypeRef);
  CFIndex v85;
  const __CFDictionary *v86;
  CFIndex v87;
  CFTypeRef v88;
  CFIndex location;
  uint64_t v90;
  const __CFAttributedString *v91;
  double v92;
  CFStringRef v93;
  uint64_t (*v94)(_QWORD, CFStringRef);
  const __CFDictionary *v95;
  double v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t, _QWORD);
  double v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, _QWORD);
  double v102;
  uint64_t (*v103)(CFTypeRef, uint64_t, _QWORD, CFIndex, CFIndex);
  const UInt8 *v104;
  uint64_t v105;
  uint64_t Empty;
  uint64_t v107;
  void (*v108)(CFTypeRef, CFRange *, uint64_t);
  const __CFString *v110;
  uint64_t v111;
  const __CFString *v112;
  uint64_t v113;
  uint64_t v114;
  const __CFString *v115;
  const __CFString *v116;
  const __CFString *v117;
  const __CFString *v118;
  const __CFString *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  const __CFString *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const __CFString *theString2;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  const __CFString *v139;
  void *key;
  __CFData *v141;
  __CFData *v142;
  const opaqueCMFormatDescription *v143;
  CFIndex Count;
  uint64_t v145;
  CFIndex v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  const __CFString *v150;
  void *v151;
  CFRange effectiveRange;
  __int128 v153;
  __int128 v154;
  CMTime v155;
  CMTime v156;
  CMTimeRange v157;
  __CFArray *v158;
  CFTypeRef v159;
  CFRange v160;
  CFTypeRef v161;
  CFTypeRef v162;
  CFTypeRef v163;
  int v164;
  double v165;
  double v166;
  double valuePtr;
  CMTime v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v158 = 0;
  v159 = 0;
  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v157.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v157.start.epoch = v3;
  *(_OWORD *)&v157.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2)
    goto LABEL_214;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  Mutable = FormatDescription;
  if (!FormatDescription)
  {
LABEL_232:
    v26 = FigSignalErrorAt();
    goto LABEL_217;
  }
  if (CMFormatDescriptionGetMediaType(FormatDescription) != 1952807028
    && CMFormatDescriptionGetMediaType(Mutable) != 1935832172
    || (MediaSubType = CMFormatDescriptionGetMediaSubType(Mutable), MediaSubType != 1937142900)
    && MediaSubType != 2004251764
    && MediaSubType != 2021028980
    || !*(_QWORD *)DerivedStorage
    || !*(_QWORD *)(DerivedStorage + 8))
  {
LABEL_214:
    v8 = FigSignalErrorAt();
    goto LABEL_215;
  }
  if (!CMSampleBufferGetNumSamples(a2))
  {
LABEL_231:
    v26 = 0;
    goto LABEL_216;
  }
  memset(&v156, 0, sizeof(v156));
  CMSampleBufferGetOutputPresentationTimeStamp(&v156, a2);
  memset(&v155, 0, sizeof(v155));
  CMSampleBufferGetOutputDuration(&v155, a2);
  v8 = WebVTTCreateAttributedStringArrayFromSampleBuffer(*(unint64_t **)(DerivedStorage + 16), a2, *(const __CFArray **)(DerivedStorage + 24), &v158);
  if ((_DWORD)v8)
  {
LABEL_215:
    v26 = v8;
LABEL_216:
    Mutable = 0;
LABEL_217:
    v10 = 0;
LABEL_218:
    v11 = 0;
    goto LABEL_219;
  }
  if (!v158)
  {
    effectiveRange = *(CFRange *)&v155.value;
    *(_QWORD *)&v153 = v155.epoch;
    v168 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare((CMTime *)&effectiveRange, &v168))
    {
      Empty = FigCaptionGroupCreateEmpty();
      Mutable = 0;
      if ((_DWORD)Empty)
      {
        v26 = Empty;
        v10 = 0;
        v11 = 0;
      }
      else
      {
        v10 = 0;
        v11 = 0;
LABEL_213:
        effectiveRange = *(CFRange *)&v156.value;
        *(_QWORD *)&v153 = v156.epoch;
        v168 = v155;
        CMTimeRangeMake(&v157, (CMTime *)&effectiveRange, &v168);
        v26 = 0;
      }
      goto LABEL_219;
    }
    goto LABEL_231;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    goto LABEL_232;
  v10 = CFDataCreateMutable(v9, 0);
  if (!v10)
  {
    v26 = FigSignalErrorAt();
    goto LABEL_218;
  }
  v11 = CFDataCreateMutable(v9, 0);
  if (!v11)
  {
    v26 = FigSignalErrorAt();
    goto LABEL_219;
  }
  v113 = DerivedStorage;
  Count = CFArrayGetCount(v158);
  if (!Count)
    goto LABEL_208;
  v12 = 0;
  key = (void *)*MEMORY[0x1E0CA2958];
  v139 = (const __CFString *)*MEMORY[0x1E0CA2948];
  v130 = (const __CFString *)*MEMORY[0x1E0CA2938];
  v117 = (const __CFString *)*MEMORY[0x1E0CA2930];
  v110 = (const __CFString *)*MEMORY[0x1E0CA2940];
  v136 = *MEMORY[0x1E0CA3378];
  v137 = (void *)*MEMORY[0x1E0CA2968];
  v135 = *MEMORY[0x1E0CA3308];
  theString2 = (const __CFString *)*MEMORY[0x1E0CA2D20];
  v150 = (const __CFString *)*MEMORY[0x1E0CA2D18];
  v131 = *MEMORY[0x1E0CA3358];
  v132 = *MEMORY[0x1E0CA3468];
  v133 = *MEMORY[0x1E0CA3438];
  v138 = (void *)*MEMORY[0x1E0CA2B40];
  v128 = (void *)*MEMORY[0x1E0CA2B48];
  v129 = *MEMORY[0x1E0CA34B8];
  v126 = (void *)*MEMORY[0x1E0CA29E0];
  v127 = (void *)*MEMORY[0x1E0CA2B20];
  v119 = (const __CFString *)*MEMORY[0x1E0CA2BB0];
  v116 = (const __CFString *)*MEMORY[0x1E0CA2BA8];
  v124 = (void *)*MEMORY[0x1E0CA2A80];
  v125 = (void *)*MEMORY[0x1E0CA2A88];
  v123 = (void *)*MEMORY[0x1E0CA29D8];
  v118 = (const __CFString *)*MEMORY[0x1E0CA2B98];
  v115 = (const __CFString *)*MEMORY[0x1E0CA2B90];
  v112 = (const __CFString *)*MEMORY[0x1E0CA2B88];
  v114 = *MEMORY[0x1E0CA3428];
  v122 = *MEMORY[0x1E0CA3490];
  v121 = *MEMORY[0x1E0CA33D8];
  v111 = *MEMORY[0x1E0CA34B0];
  v120 = *MEMORY[0x1E0CA3340];
  v13 = (const void *)*MEMORY[0x1E0CA2AD8];
  v151 = (void *)*MEMORY[0x1E0CA2AE0];
  v149 = *MEMORY[0x1E0CA3348];
  v148 = (void *)*MEMORY[0x1E0CA2AF0];
  v147 = *MEMORY[0x1E0CA3350];
  v145 = *MEMORY[0x1E0CA35E0];
  v142 = v10;
  v143 = Mutable;
  v141 = v11;
  do
  {
    v146 = v12;
    ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v158, v12);
    v160.length = 0;
    v161 = 0;
    v160.location = 0;
    Length = CFAttributedStringGetLength(ValueAtIndex);
    if (!ValueAtIndex)
    {
      v17 = FigSignalErrorAt();
LABEL_199:
      v26 = v17;
LABEL_35:
      if (v161)
        CFRelease(v161);
      v10 = v142;
      Mutable = v143;
      v11 = v141;
      if (!(_DWORD)v26)
      {
        v27 = 0;
        goto LABEL_190;
      }
      goto LABEL_236;
    }
    v16 = Length;
    if (Length < 1)
    {
      v26 = 0;
      goto LABEL_35;
    }
    v17 = FigCaptionDataCreateMutable();
    if ((_DWORD)v17)
      goto LABEL_199;
    v18 = v161;
    String = CFAttributedStringGetString(ValueAtIndex);
    v20 = *(uint64_t (**)(CFTypeRef, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v20)
    {
      v26 = 4294954514;
      goto LABEL_35;
    }
    v17 = v20(v18, String);
    if ((_DWORD)v17)
      goto LABEL_199;
    v168.value = 0;
    effectiveRange.length = 0;
    effectiveRange.location = 0;
    if (!v161)
    {
      v22 = FigSignalErrorAt();
      goto LABEL_33;
    }
    Attributes = CFAttributedStringGetAttributes(ValueAtIndex, 0, &effectiveRange);
    CFDictionaryGetValue(Attributes, key);
    if (!FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual())
    {
      FigCFEqual();
    }
    v22 = FigCaptionDynamicStyleCreate();
    if ((_DWORD)v22)
      goto LABEL_33;
    value = v168.value;
    CMBaseObject = FigCaptionDataGetCMBaseObject();
    v25 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v25)
    {
      v22 = v25(CMBaseObject, v136, value);
LABEL_33:
      v26 = v22;
      goto LABEL_40;
    }
    v26 = 4294954514;
LABEL_40:
    if (v168.value)
      CFRelease((CFTypeRef)v168.value);
    if ((_DWORD)v26)
      goto LABEL_35;
    valuePtr = 0.0;
    effectiveRange.length = 0;
    effectiveRange.location = 0;
    if (!v161)
    {
      v26 = FigSignalErrorAt();
LABEL_204:
      CGColorSRGB = 0;
      goto LABEL_52;
    }
    v28 = CFAttributedStringGetAttributes(ValueAtIndex, 0, &effectiveRange);
    v26 = (uint64_t)CFDictionaryGetValue(v28, v137);
    if (!v26)
      goto LABEL_204;
    v29 = 0;
    v168.value = 0;
    *(_QWORD *)&v168.timescale = 0;
    v30 = &v168;
    do
    {
      FigCFArrayGetFloatAtIndex();
      ++v29;
      v30 = (CMTime *)((char *)v30 + 4);
    }
    while (v29 != 4);
    CGColorSRGB = (const void *)FigCreateCGColorSRGB();
    v32 = FigCaptionDynamicStyleCreate();
    if ((_DWORD)v32)
      goto LABEL_50;
    v33 = valuePtr;
    v34 = FigCaptionDataGetCMBaseObject();
    v35 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v35)
    {
      v32 = v35(v34, v135, *(_QWORD *)&v33);
LABEL_50:
      v26 = v32;
      goto LABEL_52;
    }
    v26 = 4294954514;
LABEL_52:
    if (valuePtr != 0.0)
      CFRelease(*(CFTypeRef *)&valuePtr);
    if (CGColorSRGB)
      CFRelease(CGColorSRGB);
    if ((_DWORD)v26)
      goto LABEL_35;
    v36 = v161;
    valuePtr = 0.0;
    v168.value = 0;
    effectiveRange.length = 0;
    effectiveRange.location = 0;
    FigGeometryDimensionMake();
    if (!v36)
    {
      v41 = FigSignalErrorAt();
      goto LABEL_68;
    }
    v37 = CFAttributedStringGetAttributes(ValueAtIndex, 0, &effectiveRange);
    v38 = (const __CFDictionary *)CFDictionaryGetValue(v37, (const void *)*MEMORY[0x1E0CA2AF8]);
    if (v38)
    {
      v39 = (const __CFString *)CFDictionaryGetValue(v38, (const void *)*MEMORY[0x1E0CA2D38]);
      if (v39)
      {
        v40 = v39;
        if (CFStringCompare(v39, theString2, 0))
        {
          if (CFStringCompare(v40, v150, 0) && CFStringCompare(v40, (CFStringRef)*MEMORY[0x1E0CA2D30], 0))
            CFStringCompare(v40, (CFStringRef)*MEMORY[0x1E0CA2D28], 0);
        }
      }
      v41 = FigCaptionRubyReserveCreate();
      if ((_DWORD)v41)
        goto LABEL_68;
      v41 = FigCaptionDynamicStyleCreate();
      if ((_DWORD)v41)
        goto LABEL_68;
      v42 = v168.value;
      v43 = FigCaptionDataGetCMBaseObject();
      v44 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v44)
      {
        v41 = v44(v43, v131, v42);
LABEL_68:
        v26 = v41;
        goto LABEL_70;
      }
      v26 = 4294954514;
    }
    else
    {
      v26 = 0;
    }
LABEL_70:
    if (v168.value)
      CFRelease((CFTypeRef)v168.value);
    if (valuePtr != 0.0)
      CFRelease(*(CFTypeRef *)&valuePtr);
    if ((_DWORD)v26)
      goto LABEL_35;
    v162 = 0;
    v163 = 0;
    if (v161)
    {
      v45 = FigCaptionRegionCreateMutable();
      if ((_DWORD)v45)
        goto LABEL_147;
      v46 = FigCaptionRegionGetCMBaseObject();
      v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v47)
        goto LABEL_148;
      v45 = v47(v46, v133, v132);
      if ((_DWORD)v45)
        goto LABEL_147;
      effectiveRange.length = 0;
      effectiveRange.location = 0;
      v48 = CFAttributedStringGetAttributes(ValueAtIndex, 0, &effectiveRange);
      CFDictionaryGetValue(v48, v138);
      if (!FigCFEqual())
        FigCFEqual();
      v45 = FigCaptionDynamicStyleCreate();
      if ((_DWORD)v45)
        goto LABEL_147;
      v49 = v162;
      v50 = FigCaptionRegionGetCMBaseObject();
      v51 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v51)
        goto LABEL_148;
      v45 = v51(v50, v129, v49);
      if ((_DWORD)v45)
      {
LABEL_147:
        v26 = v45;
        goto LABEL_149;
      }
      v166 = 50.0;
      valuePtr = 100.0;
      v165 = 100.0;
      v164 = 0;
      if (!v163)
        goto LABEL_201;
      v52 = (uint64_t)v163;
      v53 = (const __CFNumber *)CFDictionaryGetValue(v48, v128);
      if (v53)
      {
        CFNumberGetValue(v53, kCFNumberCGFloatType, &valuePtr);
        if (valuePtr < 0.0)
          goto LABEL_201;
      }
      v54 = (const __CFNumber *)CFDictionaryGetValue(v48, v127);
      v55 = (const __CFString *)CFDictionaryGetValue(v48, key);
      v56 = (const __CFString *)CFDictionaryGetValue(v48, v126);
      v57 = v56;
      if (v54)
      {
        CFNumberGetValue(v54, kCFNumberCGFloatType, &v166);
        if (v166 < 0.0)
          goto LABEL_201;
      }
      else
      {
        if (!v55)
        {
          if (!v56)
            goto LABEL_106;
          goto LABEL_90;
        }
        if (CFStringCompare(v55, v117, 0))
        {
          if (CFStringCompare(v55, v130, 0))
          {
            if (CFStringCompare(v55, v110, 0))
              goto LABEL_89;
            *(double *)&v60 = 100.0;
          }
          else
          {
            *(double *)&v60 = 50.0;
          }
          v166 = *(double *)&v60;
        }
        else
        {
          v166 = 0.0;
        }
      }
LABEL_89:
      if (!v57)
      {
        if (!v55)
          goto LABEL_106;
        if (CFStringCompare(v55, v117, 0) == kCFCompareEqualTo)
          goto LABEL_106;
        if (CFStringCompare(v55, v130, 0) == kCFCompareEqualTo)
          goto LABEL_106;
        if (CFStringCompare(v55, v110, 0) == kCFCompareEqualTo)
          goto LABEL_106;
        v61 = CFStringCompare(v55, v139, 0);
        v59 = (CFStringRef *)MEMORY[0x1E0CA2928];
        v57 = v55;
        if (v61 == kCFCompareEqualTo)
          goto LABEL_106;
LABEL_92:
        CFStringCompare(v57, *v59, 0);
LABEL_106:
        v62 = (const __CFNumber *)CFDictionaryGetValue(v48, v125);
        v63 = (const __CFNumber *)CFDictionaryGetValue(v48, v124);
        v64 = (const __CFString *)CFDictionaryGetValue(v48, v123);
        if (!v62)
        {
          if (v63)
          {
            CFNumberGetValue(v63, kCFNumberIntType, &v164);
            v65 = 0;
            goto LABEL_111;
          }
LABEL_108:
          v65 = 1;
LABEL_111:
          if (v64 && CFStringCompare(v64, v118, 0) && CFStringCompare(v64, v115, 0))
            CFStringCompare(v64, v112, 0);
          FigGeometryDimensionMake();
          FigGeometryDimensionMake();
          FigGeometryDimensionMake();
          if ((v65 & 1) == 0 && v164 < 0)
            FigGeometryDimensionMakeReversed();
          else
            FigGeometryDimensionMake();
          FigGeometryDimensionMake();
          if (CFDictionaryGetValue(v48, v138))
          {
            if (FigCFEqual())
            {
              FigGeometryDimensionMakeMirrored();
              FigGeometryDimensionMakeMirrored();
            }
            v168.value = 0;
            v66 = FigGeometryDimensionCopyAsDictionary();
            if (!v66)
              goto LABEL_135;
            v67 = (const void *)v66;
            v68 = FigCaptionDynamicStyleCreate();
            if (!v68)
            {
              v69 = v168.value;
              v70 = FigCaptionRegionGetCMBaseObject();
              v71 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
              if (!v71)
              {
                v72 = -12782;
LABEL_132:
                if (v168.value)
                  CFRelease((CFTypeRef)v168.value);
                CFRelease(v67);
                if (!v72)
                {
LABEL_135:
                  if (FigCaptionRegionSetProperty_Point(v52, v122))
                    goto LABEL_145;
                  v80 = v52;
                  v81 = v121;
LABEL_144:
                  FigCaptionRegionSetProperty_Point(v80, v81);
                }
LABEL_145:
                v82 = v163;
                v83 = FigCaptionDataGetCMBaseObject();
                v84 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
                if (v84)
                {
                  v45 = v84(v83, v120, v82);
                  goto LABEL_147;
                }
LABEL_148:
                v26 = 4294954514;
LABEL_149:
                if (v162)
                  CFRelease(v162);
                goto LABEL_151;
              }
              v68 = v71(v70, v114, v69);
            }
            v72 = v68;
            goto LABEL_132;
          }
          v168.value = 0;
          v73 = FigGeometryDimensionCopyAsDictionary();
          if (!v73)
          {
LABEL_142:
            if (FigCaptionRegionSetProperty_Point(v52, v122))
              goto LABEL_145;
            v80 = v52;
            v81 = v121;
            goto LABEL_144;
          }
          v74 = (const void *)v73;
          v75 = FigCaptionDynamicStyleCreate();
          if (!v75)
          {
            v76 = v168.value;
            v77 = FigCaptionRegionGetCMBaseObject();
            v78 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
            if (!v78)
            {
              v79 = -12782;
LABEL_139:
              if (v168.value)
                CFRelease((CFTypeRef)v168.value);
              CFRelease(v74);
              if (v79)
                goto LABEL_145;
              goto LABEL_142;
            }
            v75 = v78(v77, v111, v76);
          }
          v79 = v75;
          goto LABEL_139;
        }
        CFNumberGetValue(v62, kCFNumberCGFloatType, &v165);
        if (v165 >= 0.0)
          goto LABEL_108;
LABEL_201:
        FigSignalErrorAt();
        goto LABEL_145;
      }
LABEL_90:
      if (CFStringCompare(v57, v119, 0) == kCFCompareEqualTo)
        goto LABEL_106;
      v58 = CFStringCompare(v57, v116, 0);
      v59 = (CFStringRef *)MEMORY[0x1E0CA2BA0];
      if (v58 == kCFCompareEqualTo)
        goto LABEL_106;
      goto LABEL_92;
    }
    v26 = FigSignalErrorAt();
LABEL_151:
    if (v163)
      CFRelease(v163);
    if ((_DWORD)v26)
      goto LABEL_35;
    v85 = 0;
    v160.location = 0;
    v160.length = 0;
    do
    {
      v86 = CFAttributedStringGetAttributes(ValueAtIndex, v85, &v160);
      if (FigCFDictionaryGetCount() < 1)
        goto LABEL_186;
      effectiveRange = v160;
      v153 = (unint64_t)v161;
      CFDictionaryApplyFunction(v86, (CFDictionaryApplierFunction)fcgcfs_webvtt_attribute_applier, &effectiveRange);
      v26 = DWORD2(v153);
      if (DWORD2(v153))
        goto LABEL_35;
      v87 = v160.length;
      v88 = v161;
      location = v160.location;
      v166 = 0.0;
      valuePtr = 0.0;
      if (!v161)
      {
        v26 = FigSignalErrorAt();
        goto LABEL_183;
      }
      if (CFDictionaryContainsKey(v86, v13))
      {
        v90 = FigCaptionDataCreateMutable();
        if ((_DWORD)v90)
          goto LABEL_179;
        v91 = (const __CFAttributedString *)CFDictionaryGetValue(v86, v13);
        v92 = valuePtr;
        v93 = CFAttributedStringGetString(v91);
        v94 = *(uint64_t (**)(_QWORD, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v94)
        {
          v90 = v94(*(_QWORD *)&v92, v93);
          if ((_DWORD)v90)
            goto LABEL_179;
          v168.value = 0;
          *(_QWORD *)&v168.timescale = 0;
          v95 = CFAttributedStringGetAttributes(v91, 0, (CFRange *)&v168);
          CFDictionaryGetValue(v95, v151);
          if (!FigCFEqual()
            && !FigCFEqual()
            && !FigCFEqual()
            && !FigCFEqual())
          {
            FigCFEqual();
          }
          v90 = FigCaptionDynamicStyleCreate();
          if ((_DWORD)v90)
            goto LABEL_179;
          v96 = v166;
          v97 = FigCaptionDataGetCMBaseObject();
          v98 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v98)
          {
            v90 = v98(v97, v149, *(_QWORD *)&v96);
            if ((_DWORD)v90)
              goto LABEL_179;
            CFDictionaryGetValue(v95, v148);
            if (!FigCFEqual())
              FigCFEqual();
            if (v166 != 0.0)
            {
              CFRelease(*(CFTypeRef *)&v166);
              v166 = 0.0;
            }
            v90 = FigCaptionDynamicStyleCreate();
            if ((_DWORD)v90)
              goto LABEL_179;
            v99 = v166;
            v100 = FigCaptionDataGetCMBaseObject();
            v101 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
            if (v101)
            {
              v90 = v101(v100, v147, *(_QWORD *)&v99);
              if ((_DWORD)v90)
                goto LABEL_179;
              v102 = valuePtr;
              v103 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, CFIndex, CFIndex))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
              if (v103)
              {
                v90 = v103(v88, v145, *(_QWORD *)&v102, location, v87);
LABEL_179:
                v26 = v90;
                goto LABEL_181;
              }
            }
          }
        }
        v26 = 4294954514;
      }
      else
      {
        v26 = 0;
      }
LABEL_181:
      if (v166 != 0.0)
        CFRelease(*(CFTypeRef *)&v166);
LABEL_183:
      if (valuePtr != 0.0)
        CFRelease(*(CFTypeRef *)&valuePtr);
      if ((_DWORD)v26)
        goto LABEL_35;
LABEL_186:
      v85 = v160.length + v160.location;
    }
    while (v160.length + v160.location < v16);
    v27 = v161;
    v10 = v142;
    Mutable = v143;
    v11 = v141;
LABEL_190:
    CFArrayAppendValue(Mutable, v27);
    v104 = (const UInt8 *)MEMORY[0x1E0CA2E68];
    CFDataAppendBytes(v10, MEMORY[0x1E0CA2E68], 24);
    CFDataAppendBytes(v11, v104, 24);
    if (v27)
      CFRelease(v27);
    v12 = v146 + 1;
  }
  while (v146 + 1 != Count);
LABEL_208:
  CFDataGetMutableBytePtr(v10);
  CFDataGetMutableBytePtr(v11);
  v105 = FigCaptionGroupCreate();
  if (!(_DWORD)v105)
  {
    DerivedStorage = v113;
    goto LABEL_213;
  }
  v26 = v105;
LABEL_236:
  DerivedStorage = v113;
LABEL_219:
  v108 = *(void (**)(CFTypeRef, CFRange *, uint64_t))DerivedStorage;
  v107 = *(_QWORD *)(DerivedStorage + 8);
  effectiveRange = *(CFRange *)&v157.start.value;
  v153 = *(_OWORD *)&v157.start.epoch;
  v154 = *(_OWORD *)&v157.duration.timescale;
  v108(v159, &effectiveRange, v107);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  if (Mutable)
    CFRelease(Mutable);
  if (v158)
    CFRelease(v158);
  if (v159)
    CFRelease(v159);
  return v26;
}

uint64_t fcgcfs_webvtt_finish()
{
  return 0;
}

void fcgcfs_webvtt_attribute_applier(uint64_t a1, const __CFString *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *p_valuePtr;
  int FloatAtIndex;
  uint64_t v9;
  __int128 *v10;
  const void *CGColorSRGB;
  CFTypeID v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t);
  CFTypeID v19;
  uint64_t *v20;
  CFTypeID v21;
  int Value;
  CFTypeRef *v23;
  CFTypeRef *v24;
  CFTypeID v25;
  CFTypeID v26;
  const void *v27;
  CFTypeID v28;
  CFTypeID v29;
  CFTypeID v30;
  uint64_t *v31;
  CFTypeID v32;
  CFTypeID v33;
  CFTypeID v34;
  CFTypeID v35;
  CFTypeRef *v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  CFTypeRef cf;
  CFTypeRef v45;
  __int128 valuePtr;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v45 = 0;
  if (*((_DWORD *)a3 + 6))
    goto LABEL_24;
  if (FigCFEqual())
  {
    v5 = 0;
    v6 = *MEMORY[0x1E0CA35E8];
    valuePtr = 0uLL;
    p_valuePtr = &valuePtr;
    while (1)
    {
      FloatAtIndex = FigCFArrayGetFloatAtIndex();
      if (!FloatAtIndex)
        goto LABEL_18;
      ++v5;
      p_valuePtr = (__int128 *)((char *)p_valuePtr + 4);
      if (v5 == 4)
        goto LABEL_11;
    }
  }
  if (FigCFEqual())
  {
    v9 = 0;
    v6 = *MEMORY[0x1E0CA3558];
    valuePtr = 0uLL;
    v10 = &valuePtr;
    while (1)
    {
      FloatAtIndex = FigCFArrayGetFloatAtIndex();
      if (!FloatAtIndex)
        goto LABEL_18;
      ++v9;
      v10 = (__int128 *)((char *)v10 + 4);
      if (v9 == 4)
      {
LABEL_11:
        CGColorSRGB = (const void *)FigCreateCGColorSRGB();
        cf = CGColorSRGB;
        if (!CGColorSRGB)
          goto LABEL_86;
        v12 = CFGetTypeID(CGColorSRGB);
        if (v12 != CGColorGetTypeID())
          goto LABEL_86;
        goto LABEL_13;
      }
    }
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (!a2)
        goto LABEL_86;
      v21 = CFGetTypeID(a2);
      if (v21 != CFBooleanGetTypeID())
        goto LABEL_86;
      v6 = *MEMORY[0x1E0CA3580];
      Value = CFBooleanGetValue((CFBooleanRef)a2);
      v23 = (CFTypeRef *)MEMORY[0x1E0CA3588];
      v24 = (CFTypeRef *)MEMORY[0x1E0CA3590];
      goto LABEL_41;
    }
    if (FigCFEqual())
    {
      if (!a2)
        goto LABEL_86;
      v25 = CFGetTypeID(a2);
      if (v25 != CFBooleanGetTypeID())
        goto LABEL_86;
      v6 = *MEMORY[0x1E0CA35A0];
      Value = CFBooleanGetValue((CFBooleanRef)a2);
      v23 = (CFTypeRef *)MEMORY[0x1E0CA35A8];
      v24 = (CFTypeRef *)MEMORY[0x1E0CA35B0];
LABEL_41:
      if (!Value)
        v23 = v24;
      v13 = *v23;
      cf = *v23;
LABEL_14:
      if (!v13)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (FigCFEqual())
    {
      *(_QWORD *)&valuePtr = 0;
      if (!a2)
        goto LABEL_86;
      v26 = CFGetTypeID(a2);
      if (v26 != CFNumberGetTypeID())
        goto LABEL_86;
      v6 = *MEMORY[0x1E0CA3578];
      CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &valuePtr);
      v27 = (const void *)FigCaptionGeometryCopyCellBasedSizeAsDictionary();
      goto LABEL_57;
    }
    if (FigCFEqual())
    {
      LODWORD(v41) = 0;
      if (!a2)
        goto LABEL_86;
      v28 = CFGetTypeID(a2);
      if (v28 != CFNumberGetTypeID())
        goto LABEL_86;
      v6 = *MEMORY[0x1E0CA3578];
      CFNumberGetValue((CFNumberRef)a2, kCFNumberIntType, &v41);
      goto LABEL_56;
    }
    if (FigCFEqual())
    {
      v41 = 0;
      if (!a2)
        goto LABEL_86;
      v29 = CFGetTypeID(a2);
      if (v29 != CFNumberGetTypeID())
        goto LABEL_86;
      v6 = *MEMORY[0x1E0CA3578];
      CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &v41);
LABEL_56:
      FigGeometryDimensionMake();
      valuePtr = 0u;
      v47 = 0u;
      FigGeometrySizeMake();
      v42 = valuePtr;
      v43 = v47;
      v27 = (const void *)FigGeometrySizeCopyAsDictionary();
LABEL_57:
      v13 = v27;
      cf = v27;
      goto LABEL_14;
    }
    if (FigCFEqual())
    {
      if (!a2)
        goto LABEL_86;
      v30 = CFGetTypeID(a2);
      if (v30 != CFStringGetTypeID() || !fcgcfs_webvtt_getGenericFontFamilyNameFromGenericWebVTTFontName(a2))
        goto LABEL_86;
      FloatAtIndex = FigCaptionFontFamilyNameListCreateMutable();
      if (FloatAtIndex)
        goto LABEL_21;
      FloatAtIndex = FigCaptionFontFamilyNameListAppend();
      if (FloatAtIndex)
        goto LABEL_21;
      v31 = (uint64_t *)MEMORY[0x1E0CA3570];
      goto LABEL_65;
    }
    if (FigCFEqual())
    {
      if (a2)
      {
        v32 = CFGetTypeID(a2);
        if (v32 == CFStringGetTypeID())
        {
          FloatAtIndex = FigCaptionFontFamilyNameListCreateMutable();
          if (FloatAtIndex)
            goto LABEL_21;
          FloatAtIndex = FigCaptionFontFamilyNameListAppend();
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (FigCFEqual())
      {
        *(_QWORD *)&valuePtr = 0;
        if (!a2)
          goto LABEL_86;
        v33 = CFGetTypeID(a2);
        if (v33 != CFNumberGetTypeID())
          goto LABEL_86;
        v6 = *MEMORY[0x1E0CA3640];
        CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &valuePtr);
        FigGeometryDimensionMake();
        v27 = (const void *)FigGeometryDimensionCopyAsDictionary();
        goto LABEL_57;
      }
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          LODWORD(valuePtr) = 1;
          if (!a2)
            goto LABEL_86;
          v35 = CFGetTypeID(a2);
          if (v35 != CFNumberGetTypeID())
            goto LABEL_86;
          v6 = *MEMORY[0x1E0CA35F0];
          CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr);
          switch((int)valuePtr)
          {
            case -1:
              v36 = (CFTypeRef *)MEMORY[0x1E0CA35F8];
              goto LABEL_97;
            case 1:
              v36 = (CFTypeRef *)MEMORY[0x1E0CA3610];
              goto LABEL_97;
            case 2:
              v36 = (CFTypeRef *)MEMORY[0x1E0CA3620];
              goto LABEL_97;
            case 3:
              v36 = (CFTypeRef *)MEMORY[0x1E0CA3618];
              goto LABEL_97;
            case 4:
              v36 = (CFTypeRef *)MEMORY[0x1E0CA3600];
LABEL_97:
              cf = CFRetain(*v36);
              break;
            default:
              goto LABEL_13;
          }
          goto LABEL_13;
        }
        if (!FigCFEqual())
        {
          v6 = 0;
          goto LABEL_13;
        }
        v37 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)*MEMORY[0x1E0CA2D90]);
        v38 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)*MEMORY[0x1E0CA2D70]);
        v39 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)*MEMORY[0x1E0CA2D50]);
        v40 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)*MEMORY[0x1E0CA2D88]);
        if (v37
          && CFStringCompare(v37, (CFStringRef)*MEMORY[0x1E0CA2D98], 0)
          && CFStringCompare(v37, (CFStringRef)*MEMORY[0x1E0CA2DA8], 0))
        {
          CFStringCompare(v37, (CFStringRef)*MEMORY[0x1E0CA2DA0], 0);
        }
        if (v38 && CFStringCompare(v38, (CFStringRef)*MEMORY[0x1E0CA2D78], 0))
          CFStringCompare(v38, (CFStringRef)*MEMORY[0x1E0CA2D80], 0);
        if (v39
          && CFStringCompare(v39, (CFStringRef)*MEMORY[0x1E0CA2D58], 0)
          && CFStringCompare(v39, (CFStringRef)*MEMORY[0x1E0CA2D60], 0))
        {
          CFStringCompare(v39, (CFStringRef)*MEMORY[0x1E0CA2D68], 0);
        }
        if (v40 && CFStringCompare(v40, (CFStringRef)*MEMORY[0x1E0CA2D18], 0))
          CFStringCompare(v40, (CFStringRef)*MEMORY[0x1E0CA2D30], 0);
        FloatAtIndex = FigCaptionTextEmphasisCreate();
        if (FloatAtIndex)
          goto LABEL_21;
        v31 = (uint64_t *)MEMORY[0x1E0CA3628];
LABEL_65:
        v6 = *v31;
LABEL_13:
        v13 = cf;
        goto LABEL_14;
      }
      if (a2)
      {
        v34 = CFGetTypeID(a2);
        if (v34 == CFStringGetTypeID())
        {
          cf = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
          if (cf)
          {
            v20 = (uint64_t *)MEMORY[0x1E0CA3568];
            goto LABEL_32;
          }
        }
      }
    }
LABEL_86:
    FloatAtIndex = FigSignalErrorAt();
    goto LABEL_18;
  }
  if (!a2)
    goto LABEL_86;
  v19 = CFGetTypeID(a2);
  if (v19 != CFBooleanGetTypeID())
    goto LABEL_86;
  LODWORD(valuePtr) = CFBooleanGetValue((CFBooleanRef)a2) != 0;
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!cf)
    goto LABEL_86;
  v20 = (uint64_t *)MEMORY[0x1E0CA3560];
LABEL_32:
  v6 = *v20;
LABEL_15:
  FloatAtIndex = FigCaptionDynamicStyleCreate();
  if (FloatAtIndex)
  {
LABEL_21:
    *((_DWORD *)a3 + 6) = FloatAtIndex;
    goto LABEL_22;
  }
  v14 = a3[1];
  v15 = a3[2];
  v16 = v45;
  v17 = *a3;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 32);
  if (!v18)
  {
    FloatAtIndex = -12782;
    goto LABEL_21;
  }
  FloatAtIndex = v18(v15, v6, v16, v17, v14);
LABEL_18:
  if (FloatAtIndex)
    goto LABEL_21;
LABEL_22:
  if (cf)
    CFRelease(cf);
LABEL_24:
  if (v45)
    CFRelease(v45);
}

uint64_t FigCaptionRegionSetProperty_Point(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD);
  uint64_t v7;

  FigGeometryPointMake();
  v3 = (const void *)FigGeometryPointCopyAsDictionary();
  if (v3)
  {
    v4 = FigCaptionDynamicStyleCreate();
    if ((_DWORD)v4)
    {
LABEL_5:
      v7 = v4;
      goto LABEL_7;
    }
    CMBaseObject = FigCaptionRegionGetCMBaseObject();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v6)
    {
      v4 = v6(CMBaseObject, a2, 0);
      goto LABEL_5;
    }
    v7 = 4294954514;
  }
  else
  {
    v7 = 0;
  }
LABEL_7:
  if (v3)
    CFRelease(v3);
  return v7;
}

uint64_t fcgcfs_webvtt_getGenericFontFamilyNameFromGenericWebVTTFontName(const __CFString *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2C20], 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32D0];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2C18], 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32C8];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2C10], 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32C0];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2C08], 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32B8];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2C00], 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32B0];
    return *(_QWORD *)v4;
  }
  v2 = *MEMORY[0x1E0CA2BF8];
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2BF8], 1uLL) == kCFCompareEqualTo)
    return v2;
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2BD0], 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA3280];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2BD8], 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA3288];
    return *(_QWORD *)v4;
  }
  v2 = *MEMORY[0x1E0CA2BE8];
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2BE8], 1uLL))
  {
    v3 = *MEMORY[0x1E0CA3290];
    v2 = *MEMORY[0x1E0CA2C28];
    if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2C28], 1uLL))
      return v3;
  }
  return v2;
}

uint64_t FigVirtualDisplaySourceConduitCreate(uint64_t a1, uint64_t a2, const __CFString *a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  CFTypeRef v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  unsigned int v16;
  unsigned int v17;
  const __CFString *v18;
  uint64_t v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD handler[5];
  os_log_type_t type;
  unsigned int v29;
  CFTypeRef cf;
  int v31;
  const char *v32;
  __int16 v33;
  _BYTE v34[10];
  CFTypeRef v35;
  __int16 v36;
  const __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!a2 || *(_QWORD *)a2 != 1 || !*(_QWORD *)(a2 + 8))
  {
    v29 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v19 = 4294955226;
    goto LABEL_28;
  }
  FigVirtualDisplaySourceGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v19 = v7;
    v29 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a3)
      v9 = CFRetain(a3);
    else
      v9 = 0;
    *(_QWORD *)DerivedStorage = v9;
    *(_DWORD *)(DerivedStorage + 136) = 0;
    *(_OWORD *)(DerivedStorage + 72) = *(_OWORD *)(a2 + 16);
    v10 = (*(uint64_t (**)(void))(a2 + 8))();
    *(_QWORD *)(DerivedStorage + 64) = v10;
    if (!v10)
    {
      v29 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v19 = 4294955225;
      goto LABEL_28;
    }
    v11 = FigDispatchQueueCreateWithPriority();
    *(_QWORD *)(DerivedStorage + 16) = v11;
    v12 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, v11);
    v13 = MEMORY[0x1E0C809B0];
    *(_QWORD *)(DerivedStorage + 88) = v12;
    handler[0] = v13;
    handler[1] = 0x40000000;
    handler[2] = __FigVirtualDisplaySourceConduitCreate_block_invoke;
    handler[3] = &__block_descriptor_tmp_48;
    handler[4] = DerivedStorage;
    dispatch_source_set_event_handler(v12, handler);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 88), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 88));
    v14 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (VTPixelTransferSessionRef *)(DerivedStorage + 56));
    if (!(_DWORD)v14)
    {
      v29 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v16 = v29;
      if (os_log_type_enabled(v15, type))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if (v17)
      {
        v18 = CFSTR("no name");
        if (a3)
          v18 = a3;
        v31 = 136315906;
        v32 = "FigVirtualDisplaySourceConduitCreate";
        v33 = 2048;
        *(_QWORD *)v34 = DerivedStorage;
        *(_WORD *)&v34[8] = 2048;
        v35 = cf;
        v36 = 2112;
        v37 = v18;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v19 = 0;
      *a4 = cf;
      return v19;
    }
    v19 = v14;
    v29 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v25 = v29;
    if (os_log_type_enabled(v24, type))
      v26 = v25;
    else
      v26 = v25 & 0xFFFFFFFE;
    if (v26)
    {
      v31 = 136315650;
      v32 = "FigVirtualDisplaySourceConduitCreate";
      v33 = 1024;
      *(_DWORD *)v34 = 620;
      *(_WORD *)&v34[4] = 1024;
      *(_DWORD *)&v34[6] = v19;
      _os_log_send_and_compose_impl();
    }
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_28:
  if (cf)
    CFRelease(cf);
  return v19;
}

void fvdsrcconduit_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  _QWORD block[6];
  os_log_type_t type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvdsrcconduit_finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_5_3;
    block[4] = DerivedStorage;
    block[5] = a1;
    dispatch_sync(v4, block);
  }
  v5 = *(NSObject **)(DerivedStorage + 88);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 88));
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v6 = *(const void **)(DerivedStorage + 56);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v8 = *(NSObject **)(DerivedStorage + 16);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

uint64_t fvdsrcconduit_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  const __CFString **DerivedStorage;
  const __CFString *v7;
  CFTypeRef v8;
  uint64_t result;

  DerivedStorage = (const __CFString **)CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("sourceType")))
  {
    v7 = CFSTR("Conduit");
LABEL_3:
    v8 = CFRetain(v7);
    result = 0;
    *a4 = v8;
    return result;
  }
  if (CFEqual(a2, CFSTR("sourceName")))
  {
    v7 = *DerivedStorage;
    if (*DerivedStorage)
      goto LABEL_3;
  }
  return 4294954512;
}

uint64_t fvdsrcconduit_setProperty()
{
  return 4294954512;
}

uint64_t __fvdsrcconduit_finalize_block_invoke(uint64_t result)
{
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v1 + 136) || *(_QWORD *)(v1 + 8))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    __break(1u);
  }
  return result;
}

uint64_t fvdsrcconduit_plugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v10;
  unsigned int v11;
  _QWORD block[7];
  os_log_type_t type;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvdsrcconduit_plugProcessor_block_invoke;
    block[3] = &unk_1E2F97E48;
    block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v15;
    dispatch_sync(v4, block);
    v5 = *((_DWORD *)v16 + 6);
    if (v5)
    {
      v14 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v10 = v14;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if (v11)
      {
        v19 = 136315650;
        v20 = "fvdsrcconduit_plugProcessor";
        v21 = 1024;
        v22 = 441;
        v23 = 1024;
        v24 = v5;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = *((unsigned int *)v16 + 6);
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v14 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = 4294955226;
    *((_DWORD *)v16 + 6) = -12070;
  }
  _Block_object_dispose(&v15, 8);
  return v6;
}

uint64_t fvdsrcconduit_unplugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v10;
  unsigned int v11;
  _QWORD block[7];
  os_log_type_t type;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvdsrcconduit_unplugProcessor_block_invoke;
    block[3] = &unk_1E2F97E70;
    block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v15;
    dispatch_sync(v4, block);
    v5 = *((_DWORD *)v16 + 6);
    if (v5)
    {
      v14 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v10 = v14;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if (v11)
      {
        v19 = 136315650;
        v20 = "fvdsrcconduit_unplugProcessor";
        v21 = 1024;
        v22 = 461;
        v23 = 1024;
        v24 = v5;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = *((unsigned int *)v16 + 6);
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v14 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = 4294955226;
    *((_DWORD *)v16 + 6) = -12070;
  }
  _Block_object_dispose(&v15, 8);
  return v6;
}

uint64_t fvdsrcconduit_start(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdsrcconduit_start_block_invoke;
  block[3] = &unk_1E2F97E98;
  block[4] = &v10;
  block[5] = DerivedStorage;
  block[6] = a2;
  block[7] = a1;
  dispatch_sync(v5, block);
  v6 = 0;
  if (*((_DWORD *)v11 + 6))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t fvdsrcconduit_stop()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdsrcconduit_stop_block_invoke;
  block[3] = &__block_descriptor_tmp_34_1;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
  return 0;
}

uint64_t fvdsrcconduit_suspend()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __fvdsrcconduit_suspend_block_invoke;
  v4[3] = &unk_1E2F97F00;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t fvdsrcconduit_resume()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __fvdsrcconduit_resume_block_invoke;
  v4[3] = &unk_1E2F97F28;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

CFTypeRef *__fvdsrcconduit_plugProcessor_block_invoke(CFTypeRef *result)
{
  CFTypeRef *v1;
  _DWORD *v2;

  v1 = result;
  v2 = result[5];
  if (v2[34] || *((_QWORD *)v2 + 1))
  {
    *(_DWORD *)(*((_QWORD *)result[4] + 1) + 24) = -12073;
  }
  else
  {
    result = (CFTypeRef *)CFRetain(result[6]);
    *((_QWORD *)v1[5] + 1) = v1[6];
  }
  return result;
}

void __fvdsrcconduit_unplugProcessor_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = a1[5];
  if (!*(_DWORD *)(v2 + 136) && (v3 = *(const void **)(v2 + 8), v3 == (const void *)a1[6]))
  {
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1[5] + 8) = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -12070;
  }
}

void __fvdsrcconduit_start_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFTypeRef *, CFTypeRef *);
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  int v10;
  int DimensionsFromTimingMode;
  double v12;
  NSObject *v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  __CFDictionary *Mutable;
  const void *Value;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  __int128 v31;
  unsigned int v32;
  CFTypeRef v33;
  CFTypeRef cf;
  int v35;
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  __CFDictionary *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  if (*(_DWORD *)(v2 + 136) || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -12070;
    return;
  }
  v33 = 0;
  cf = 0;
  v32 = 0;
  v31 = xmmword_1932F7320;
  v30 = 0;
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v4)
  {
    v16 = -12782;
LABEL_15:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_20;
  }
  v5 = v4(v3, &cf, &v33);
  if (v5)
  {
    v16 = v5;
    goto LABEL_15;
  }
  v6 = FigDisplayModes_LookupTimingModeIDByIndex((const __CFArray *)v33, 0, (int *)&v32);
  if (v6)
  {
    v16 = v6;
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    goto LABEL_20;
  }
  v7 = v32;
  v8 = *(_QWORD *)(v2 + 8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v9)
  {
    v16 = -12782;
LABEL_17:
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    goto LABEL_20;
  }
  v10 = v9(v8, v7, v7);
  if (v10)
  {
    v16 = v10;
    goto LABEL_17;
  }
  DimensionsFromTimingMode = FigDisplayModes_ExtractDimensionsFromTimingMode((const __CFArray *)v33, v32, (double *)&v31);
  if (!DimensionsFromTimingMode)
  {
    FigDisplayModes_ExtractOverscanInfoFromTimingMode((const __CFArray *)v33, v32, &v30);
    *(_DWORD *)(v2 + 48) = 60;
    FigDisplayModes_ExtractVSyncRateFromTimingMode((const __CFArray *)v33, v32, (int *)(v2 + 48));
    *(_OWORD *)(v2 + 24) = v31;
    v12 = 0.06;
    if (!v30)
      v12 = 0.0;
    *(double *)(v2 + 40) = v12;
    *(_BYTE *)(v2 + 140) = 0;
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v16 = 0;
    goto LABEL_21;
  }
  v16 = DimensionsFromTimingMode;
  v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
LABEL_20:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_21:
  if (cf)
    CFRelease(cf);
  if (v33)
    CFRelease(v33);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v16;
  if (!*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v24 = a1[5];
    if (*(_QWORD *)(v24 + 72))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      LODWORD(v31) = 0;
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      Value = (const void *)FigCFDictionaryGetValue();
      if (Value)
      {
        CFDictionarySetValue(Mutable, CFSTR("SceneID"), Value);
        *(_BYTE *)(v24 + 140) = 1;
      }
      LODWORD(cf) = 0;
      LOBYTE(v33) = 0;
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v28 = cf;
      if (os_log_type_enabled(v27, (os_log_type_t)v33))
        v29 = v28;
      else
        v29 = v28 & 0xFFFFFFFE;
      if (v29)
      {
        v35 = 136315650;
        v36 = "srcconduit_createFrameSourceStartOptions";
        v37 = 2048;
        v38 = v24;
        v39 = 2112;
        v40 = Mutable;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(uint64_t (**)(_QWORD, __CFDictionary *, _QWORD, uint64_t (*)(), _QWORD))(a1[5] + 72))(*(_QWORD *)(a1[5] + 64), Mutable, fvdsrcconduit_submitFrame, fvdsrcconduit_postError, a1[7]);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
  if (!*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    LOBYTE(cf) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if ((_BYTE)cf)
      v19 = 1;
    else
      v19 = 2;
    *(_DWORD *)(a1[5] + 136) = v19;
    LODWORD(v31) = 0;
    LOBYTE(v33) = 0;
    v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v21 = v31;
    if (os_log_type_enabled(v20, (os_log_type_t)v33))
      v22 = v21;
    else
      v22 = v21 & 0xFFFFFFFE;
    if (v22)
    {
      v23 = a1[5];
      v35 = 136315394;
      v36 = "fvdsrcconduit_start_block_invoke";
      v37 = 2048;
      v38 = v23;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void fvdsrcconduit_submitFrame(uint64_t a1, const void *a2, uint64_t a3, int a4, const void *a5)
{
  uint64_t DerivedStorage;
  NSObject *v10;
  _QWORD block[8];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  if (a5)
    CFRetain(a5);
  v10 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdsrcconduit_submitFrame_block_invoke;
  block[3] = &__block_descriptor_tmp_27_1;
  block[4] = DerivedStorage;
  block[5] = a2;
  v12 = a4;
  block[6] = a3;
  block[7] = a5;
  dispatch_async(v10, block);
}

uint64_t fvdsrcconduit_postError()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void __fvdsrcconduit_submitFrame_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  srcconduit_submitPixelBuffer(*(_QWORD *)(a1 + 32), *(CVPixelBufferRef *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(const void **)(a1 + 56));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    CFRelease(v3);
}

void srcconduit_submitPixelBuffer(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3, uint64_t a4, const void *a5)
{
  int v10;
  uint64_t v11;
  size_t Width;
  size_t Height;
  unsigned int (*v14)(uint64_t, _QWORD, uint64_t, CVPixelBufferRef *, double, double);
  __CVBuffer *v15;
  double v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFTypeRef v19;
  const void *v20;
  CFTypeRef v21;
  const void *v22;
  double v23;
  size_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  CVPixelBufferRef v35;
  double v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, CVPixelBufferRef, uint64_t, uint64_t, _QWORD, double, double, double, double, double, double, double, double);
  NSObject *v39;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v41;
  dispatch_time_t v42;
  const void *v43;
  const void *v44;
  CVPixelBufferRef destinationBuffer;
  double valuePtr[17];

  valuePtr[16] = *(double *)MEMORY[0x1E0C80C00];
  destinationBuffer = 0;
  v10 = *(_DWORD *)(a1 + 136);
  if (v10 == 2)
  {
    if (pixelBuffer)
    {
      v11 = *(_QWORD *)(a1 + 8);
      Width = CVPixelBufferGetWidth(pixelBuffer);
      Height = CVPixelBufferGetHeight(pixelBuffer);
      v14 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CVPixelBufferRef *, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
      if (!v14
        || v14(v11, 0, 1, &destinationBuffer, (double)Width, (double)Height)
        || VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(a1 + 56), pixelBuffer, destinationBuffer))
      {
LABEL_25:
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_26;
      }
      v15 = destinationBuffer;
      if (*(_BYTE *)(a1 + 140))
      {
        v16 = (double)CVPixelBufferGetWidth(destinationBuffer);
        valuePtr[0] = v16 / (double)CVPixelBufferGetWidth(pixelBuffer);
        v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, valuePtr);
        if (v17)
        {
          v18 = v17;
          CVBufferSetAttachment(v15, CFSTR("FVDPixelScaleFactor"), v17, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v18);
        }
        v19 = CVBufferCopyAttachment(pixelBuffer, CFSTR("FVDWindowRectangles"), 0);
        if (v19)
        {
          v20 = v19;
          CVBufferSetAttachment(v15, CFSTR("FVDWindowRectangles"), v19, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v20);
        }
        v21 = CVBufferCopyAttachment(pixelBuffer, CFSTR("FVDWindowScaleFactor"), 0);
        if (v21)
        {
          v22 = v21;
          CVBufferSetAttachment(v15, CFSTR("FVDWindowScaleFactor"), v21, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v22);
        }
        v15 = destinationBuffer;
      }
      v23 = (double)CVPixelBufferGetWidth(v15);
      v24 = CVPixelBufferGetHeight(destinationBuffer);
      v25 = (double)v24;
      v26 = *(double *)(a1 + 24);
      v27 = *(double *)(a1 + 32);
      v28 = v26 / v23;
      if (v26 / v23 >= v27 / (double)v24)
        v28 = v27 / (double)v24;
      v29 = (1.0 - *(double *)(a1 + 40)) * v28;
      v30 = v29 * v23;
      v31 = v29 * v25;
      v32 = (v26 - v29 * v23) * 0.5;
      v33 = (v27 - v29 * v25) * 0.5;
      v34 = 0.0;
      v35 = destinationBuffer;
      v36 = 0.0;
    }
    else
    {
      v35 = 0;
      v30 = *(double *)(MEMORY[0x1E0C9D648] + 16);
      v31 = *(double *)(MEMORY[0x1E0C9D648] + 24);
      v32 = *MEMORY[0x1E0C9D648];
      v33 = *(double *)(MEMORY[0x1E0C9D648] + 8);
      v25 = v31;
      v23 = v30;
      v34 = v33;
      v36 = *MEMORY[0x1E0C9D648];
    }
    v37 = *(_QWORD *)(a1 + 8);
    v38 = *(unsigned int (**)(uint64_t, CVPixelBufferRef, uint64_t, uint64_t, _QWORD, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (v38 && !v38(v37, v35, a3, a4, 0, v36, v34, v23, v25, v32, v33, v30, v31))
      goto LABEL_20;
    goto LABEL_25;
  }
  if (!v10)
  {
    v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_20:
    srcconduit_stopRetrying(a1);
    goto LABEL_35;
  }
LABEL_26:
  v41 = *(NSObject **)(a1 + 88);
  v42 = dispatch_time(0, 50000000);
  dispatch_source_set_timer(v41, v42, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
  v43 = *(const void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = pixelBuffer;
  if (pixelBuffer)
    CFRetain(pixelBuffer);
  if (v43)
    CFRelease(v43);
  v44 = *(const void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = a5;
  if (a5)
    CFRetain(a5);
  if (v44)
    CFRelease(v44);
  *(_QWORD *)(a1 + 120) = a3;
  *(_DWORD *)(a1 + 128) = a4;
  *(_BYTE *)(a1 + 96) = 1;
LABEL_35:
  if (destinationBuffer)
    CFRelease(destinationBuffer);
}

void srcconduit_stopRetrying(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_BYTE *)(a1 + 96))
  {
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 88), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    v2 = *(const void **)(a1 + 104);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v3 = *(const void **)(a1 + 112);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 112) = 0;
    }
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 96) = 0;
  }
}

uint64_t __fvdsrcconduit_stop_block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  void (*v4)(_QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(result + 136))
  {
    srcconduit_stopRetrying(result);
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v3 + 136) = 0;
    v4 = *(void (**)(_QWORD))(v3 + 80);
    if (v4)
      v4(*(_QWORD *)(v3 + 64));
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t __fvdsrcconduit_suspend_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = *(_QWORD *)(result + 40);
  if (*(_DWORD *)(v1 + 136))
  {
    *(_DWORD *)(v1 + 136) = 1;
  }
  else
  {
    v2 = result;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = -12070;
  }
  return result;
}

uint64_t __fvdsrcconduit_resume_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = *(_QWORD *)(result + 40);
  if (*(_DWORD *)(v1 + 136) == 1)
  {
    *(_DWORD *)(v1 + 136) = 2;
  }
  else
  {
    v2 = result;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = -12070;
  }
  return result;
}

CMTimebaseRef createTimebaseWithMasterClock(uint64_t a1, OpaqueCMClock *HostTimeClock)
{
  const __CFAllocator *v3;
  CMTimebaseRef result;
  CMTimebaseRef timebaseOut;

  timebaseOut = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!HostTimeClock)
    HostTimeClock = CMClockGetHostTimeClock();
  result = (CMTimebaseRef)CMTimebaseCreateWithSourceClock(v3, HostTimeClock, &timebaseOut);
  if (!(_DWORD)result)
  {
    if (timebaseOut)
    {
      cdsTrigger_setTimebase(a1, timebaseOut);
      *(_BYTE *)(a1 + 88) = 0;
      result = timebaseOut;
      if (!timebaseOut)
        return result;
      CFRelease(timebaseOut);
    }
    return 0;
  }
  return result;
}

uint64_t FigCDSTriggerSetTimebase(uint64_t a1, const void *a2)
{
  if (!a1)
    return FigSignalErrorAt();
  if (a2)
  {
    cdsTrigger_setTimebase(a1, a2);
    *(_BYTE *)(a1 + 88) = 1;
  }
  return 0;
}

void cdsTrigger_setTimebase(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v2;
  const void *v5;

  v2 = *(CFTypeRef *)(a1 + 80);
  if (v2 != cf)
  {
    if (v2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v5 = *(const void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = cf;
      CFRetain(cf);
      if (v5)
        CFRelease(v5);
    }
    else
    {
      *(_QWORD *)(a1 + 80) = cf;
      CFRetain(cf);
    }
    if (*(_QWORD *)(a1 + 80))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
  }
}

CMTime *FigCDSTriggerGetCurrentTime@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2;
  OpaqueCMTimebase *v3;

  v2 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
  a2->epoch = *(_QWORD *)(v2 + 16);
  if (a1 && (v3 = *(OpaqueCMTimebase **)(a1 + 80)) != 0)
    return CMTimebaseGetTime(a2, v3);
  else
    return (CMTime *)FigSignalErrorAt();
}

uint64_t FigCDSTriggerSetCurrentTime(uint64_t a1, CMTime *a2)
{
  OpaqueCMTimebase *v3;
  CMTime v5;

  if (!a1)
    return FigSignalErrorAt();
  v3 = *(OpaqueCMTimebase **)(a1 + 80);
  if (!v3)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 88))
    return 0;
  v5 = *a2;
  return CMTimebaseSetTime(v3, &v5);
}

uint64_t FigCDSTriggerSetRate(uint64_t a1, Float64 a2)
{
  OpaqueCMTimebase *v3;

  if (!a1)
    return FigSignalErrorAt();
  v3 = *(OpaqueCMTimebase **)(a1 + 80);
  if (!v3)
    return FigSignalErrorAt();
  if (!*(_BYTE *)(a1 + 88))
    CMTimebaseSetRate(v3, a2);
  return 0;
}

double FigCDSTriggerGetRate(uint64_t a1)
{
  OpaqueCMTimebase *v1;

  if (a1)
  {
    v1 = *(OpaqueCMTimebase **)(a1 + 80);
    if (v1)
      return CMTimebaseGetRate(v1);
  }
  FigSignalErrorAt();
  return 0.0;
}

uint64_t FigCDSTriggerStart(uint64_t a1)
{
  OpaqueCMTimebase *v2;
  uint64_t v3;
  __int128 v4;
  CMTimeEpoch v5;
  CMTime v7;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *(OpaqueCMTimebase **)(a1 + 80);
  if (!v2)
    return FigSignalErrorAt();
  if (!*(_BYTE *)(a1 + 88))
  {
    v3 = MEMORY[0x1E0CA2E68];
    v4 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)(a1 + 52) = *MEMORY[0x1E0CA2E68];
    v5 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(a1 + 68) = v5;
    *(_OWORD *)&v7.value = v4;
    v7.epoch = v5;
    CMTimebaseSetTime(v2, &v7);
  }
  return 0;
}

uint64_t FigCDSTriggerResume(uint64_t a1)
{
  OpaqueCMTimebase *v2;
  CMTime v4;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *(OpaqueCMTimebase **)(a1 + 80);
  if (!v2 || !*(_BYTE *)(a1 + 90))
    return FigSignalErrorAt();
  if (!*(_BYTE *)(a1 + 88))
  {
    v4 = *(CMTime *)(a1 + 52);
    CMTimebaseSetTime(v2, &v4);
    CMTimebaseSetRate(*(CMTimebaseRef *)(a1 + 80), 1.0);
  }
  *(_BYTE *)(a1 + 90) = 0;
  return 0;
}

uint64_t FigCDSTriggerPause(uint64_t a1)
{
  OpaqueCMTimebase *v2;
  CMTime v4;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *(OpaqueCMTimebase **)(a1 + 80);
  if (!v2 || *(_BYTE *)(a1 + 90))
    return FigSignalErrorAt();
  if (!*(_BYTE *)(a1 + 88))
  {
    CMTimebaseSetRate(v2, 0.0);
    CMTimebaseGetTime(&v4, *(CMTimebaseRef *)(a1 + 80));
    *(CMTime *)(a1 + 52) = v4;
  }
  *(_BYTE *)(a1 + 90) = 1;
  return 0;
}

uint64_t FigCDSTriggerStop(uint64_t a1)
{
  CMTime v3;

  if (!a1)
    return FigSignalErrorAt();
  if (FigCDSTimerIsOn(*(_QWORD *)(a1 + 40)))
    FigCDSTimerStop(*(_QWORD *)(a1 + 40));
  if (!*(_QWORD *)(a1 + 80))
    return FigSignalErrorAt();
  if (!*(_BYTE *)(a1 + 88))
  {
    CMTimeMake(&v3, 0, 1);
    *(CMTime *)(a1 + 52) = v3;
    CMTimebaseSetRate(*(CMTimebaseRef *)(a1 + 80), 0.0);
  }
  return 0;
}

uint64_t FigCDSTriggerManualTrigger(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  void (*v4)(_QWORD, CMTime *, const void *);
  CMTime v6;

  if (!a1 || !*(_QWORD *)(a1 + 80))
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 24))
  {
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      v3 = (const void *)v2;
      v4 = *(void (**)(_QWORD, CMTime *, const void *))(a1 + 24);
      CMTimebaseGetTime(&v6, *(CMTimebaseRef *)(a1 + 80));
      v4(0, &v6, v3);
      CFRelease(v3);
    }
  }
  return 0;
}

NSObject *FigCDSTriggerScheduleEvent(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *result;
  _QWORD context[2];
  __int128 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v9 = 0;
  if (!a1)
    return FigSignalErrorAt();
  result = *(NSObject **)(a1 + 104);
  if (result)
  {
    context[0] = a1;
    context[1] = a2;
    v6 = *a3;
    v7 = *((_QWORD *)a3 + 2);
    v8 = &v9;
    dispatch_sync_f(result, context, (dispatch_function_t)scheduleEventDo);
    return v9;
  }
  return result;
}

uint64_t scheduleEventDo(uint64_t *a1)
{
  uint64_t v2;
  OpaqueCMTimebase *v3;
  double Seconds;
  CFNumberRef v5;
  uint64_t result;
  _DWORD *v7;
  double v8;
  CMTime v9;
  CMTime time;
  CMTime v11;

  v2 = *a1;
  v11 = *(CMTime *)(a1 + 2);
  v3 = *(OpaqueCMTimebase **)(v2 + 80);
  if (v3)
  {
    if (CMTimebaseGetRate(v3) != 0.0 && !FigCDSTimerIsOn(*(_QWORD *)(v2 + 40)))
      FigCDSTimerStart(*(_QWORD *)(v2 + 40));
    time = v11;
    Seconds = CMTimeGetSeconds(&time);
    memset(&v9, 0, sizeof(v9));
    CMTimebaseGetTime(&v9, *(CMTimebaseRef *)(v2 + 80));
    time = v9;
    v8 = Seconds - CMTimeGetSeconds(&time);
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, &v8);
    CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 96), v5);
    CFRelease(v5);
    result = 0;
  }
  else
  {
    result = FigSignalErrorAt();
  }
  v7 = (_DWORD *)a1[5];
  if (v7)
    *v7 = result;
  return result;
}

uint64_t FigCDSTriggerCreate(OpaqueCMClock *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  const __CFAllocator *v12;
  uint64_t Instance;
  uint64_t v14;
  CFMutableArrayRef Mutable;
  uint64_t v16;
  CMTime v18;
  char label[256];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *a6 = 0;
  if (a2 < 1)
    return 4294950096;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCDSTriggerLocalGetTypeID_sRegisterFigCDSTriggerOnce, RegisterFigCDSTriggerClass);
  Instance = _CFRuntimeCreateInstance();
  *(_WORD *)(Instance + 88) = 0;
  *(_BYTE *)(Instance + 90) = 0;
  CMTimeMake(&v18, 0, 1);
  *(CMTime *)(Instance + 52) = v18;
  if (a3 | a4)
  {
    if (a5)
    {
      *(_QWORD *)(Instance + 24) = a3;
      *(_QWORD *)(Instance + 32) = a4;
      v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(_QWORD *)(Instance + 16) = v14;
      if (!v14)
      {
        v16 = FigSignalErrorAt();
        goto LABEL_9;
      }
    }
  }
  Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(Instance + 96) = Mutable;
  if (!Mutable)
  {
    v16 = 0;
    goto LABEL_9;
  }
  createTimebaseWithMasterClock(Instance, a1);
  __sprintf_chk(label, 0, 0x100uLL, "com.apple.cktrigger._jobQueue<%p>", (const void *)Instance);
  *(_QWORD *)(Instance + 104) = dispatch_queue_create(label, 0);
  *(_DWORD *)(Instance + 48) = a2;
  v16 = FigCDSTimerCreate(a2, (uint64_t)onTimerTimeout, Instance, (uint64_t *)(Instance + 40));
  if ((_DWORD)v16)
  {
LABEL_9:
    CFRelease((CFTypeRef)Instance);
    return v16;
  }
  *a6 = Instance;
  return v16;
}

void onTimerTimeout(uint64_t a1)
{
  _QWORD *v2;
  OpaqueCMTimebase *v3;
  uint64_t v4;
  const void *v5;
  void (*v6)(CMTime *, uint64_t);
  CMTime v7;
  CMTime v8;

  if (*(_QWORD *)(a1 + 104))
  {
    v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (!v2)
      return;
    *v2 = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 104), v2, (dispatch_function_t)onTimerTimeoutDo);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = *(OpaqueCMTimebase **)(a1 + 80);
    if (v3)
    {
      memset(&v8, 0, sizeof(v8));
      CMTimebaseGetTime(&v8, v3);
      v4 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v4)
      {
        v5 = (const void *)v4;
        v6 = *(void (**)(CMTime *, uint64_t))(a1 + 32);
        v7 = v8;
        v6(&v7, v4);
        CFRelease(v5);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t RegisterFigCDSTriggerClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCDSTriggerID = result;
  return result;
}

double FigCDSTriggerInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigCDSTrigger_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  dispatch_release(*(dispatch_object_t *)(a1 + 104));
  v2 = *(const void **)(a1 + 96);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (!*(_BYTE *)(a1 + 88))
      CMTimebaseSetRate(*(CMTimebaseRef *)(a1 + 80), 0.0);
    v4 = *(const void **)(a1 + 80);
    if (v4)
      CFRelease(v4);
  }
  v5 = *(const void **)(a1 + 16);
  if (v5)
    CFRelease(v5);
}

__CFString *FigCDSTriggerCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSTrigger %p>"), a1);
  return Mutable;
}

void cdsTrigger_timebaseRateChanged(uint64_t a1, uint64_t a2)
{
  float Rate;

  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a2 + 80));
  if (Rate == 0.0 && !*(_BYTE *)(a2 + 90))
  {
    FigCDSTriggerPause(a2);
  }
  else if (Rate != 0.0)
  {
    if (*(_BYTE *)(a2 + 90))
      FigCDSTriggerResume(a2);
  }
}

void onTimerTimeoutDo(uint64_t *a1)
{
  uint64_t v2;
  CFIndex v3;
  int v4;
  int v5;
  const __CFAllocator *v6;
  const __CFNumber *ValueAtIndex;
  CFNumberRef v8;
  OpaqueCMTimebase *v9;
  uint64_t v10;
  const void *v11;
  void (*v12)(_QWORD, CMTime *, uint64_t);
  CMTime v13;
  CMTime valuePtr;

  v2 = *a1;
  if (!*(_BYTE *)(*a1 + 90))
  {
    if (!CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) && FigCDSTimerIsOn(*(_QWORD *)(v2 + 40)))
      FigCDSTimerStop(*(_QWORD *)(v2 + 40));
    if (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) >= 1)
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 96), v3);
        valuePtr.value = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
        *(double *)&valuePtr.value = *(double *)&valuePtr.value + (double)*(int *)(v2 + 48) / -1000.0;
        if (*(double *)&valuePtr.value <= 0.0)
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), v3);
          --v4;
          v5 = 1;
        }
        else
        {
          v8 = CFNumberCreate(v6, kCFNumberCGFloatType, &valuePtr);
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), v3, v8);
          CFRelease(v8);
        }
        v3 = ++v4;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) > v4);
      if (v5 && *(_QWORD *)(v2 + 24))
      {
        v9 = *(OpaqueCMTimebase **)(v2 + 80);
        if (v9)
        {
          memset(&valuePtr, 0, sizeof(valuePtr));
          CMTimebaseGetTime(&valuePtr, v9);
          v10 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v10)
          {
            v11 = (const void *)v10;
            v12 = *(void (**)(_QWORD, CMTime *, uint64_t))(v2 + 24);
            v13 = valuePtr;
            v12(0, &v13, v10);
            CFRelease(v11);
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
  free(a1);
}

uint64_t FigTTMLDocumentWriterCreateRegionStyleOptimizer(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterRegionStyleOptimizer_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
}

CFStringRef figTTMLDocumentWriterRegionStyleOptimizer_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterRegionStyleOptimizer[%p]"), a1);
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_StartElement(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E0C9AE00], a2, *(_QWORD *)(DerivedStorage + 16), (uint64_t *)&cf);
  if ((_DWORD)v4)
  {
    v7 = cf;
    if (!cf)
      return v4;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (v5)
  {
    FigTTMLDocumentWriterElementAddChildElement(v5, cf);
  }
  else
  {
    if (cf)
      v6 = CFRetain(cf);
    else
      v6 = 0;
    *(_QWORD *)(DerivedStorage + 8) = v6;
  }
  v7 = cf;
  *(_QWORD *)(DerivedStorage + 16) = cf;
  if (v7)
LABEL_9:
    CFRelease(v7);
  return v4;
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_EndElement(uint64_t a1)
{
  uint64_t DerivedStorage;
  void *v2;
  CFMutableDictionaryRef Mutable;
  const __CFArray *v4;
  uint64_t result;
  uint64_t ParentElement;
  CFArrayRef theArray;
  __int128 context;
  CFTypeRef cf[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  CFRange v13;

  v12 = *MEMORY[0x1E0C80C00];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(void **)(DerivedStorage + 16);
  if (v2 != *(void **)(DerivedStorage + 8))
    goto LABEL_10;
  v10 = 0;
  context = 0u;
  *(_OWORD *)cf = 0u;
  theArray = 0;
  v11 = xmmword_1932FBB00;
  if (!FigTTMLDocumentWriterElementCopyElementsAtPath((CFArrayRef *)v2, (uint64_t)&v11, 4, &theArray))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
    cf[0] = v2;
    cf[1] = Mutable;
    *((_QWORD *)&context + 1) = CFSTR("http://www.w3.org/ns/ttml#styling textAlign");
    v4 = theArray;
    v13.length = CFArrayGetCount(theArray);
    v13.location = 0;
    CFArrayApplyFunction(v4, v13, (CFArrayApplierFunction)optimizeRegionStyleAttributesAux, &context);
  }
  if (theArray)
    CFRelease(theArray);
  if (cf[1])
    CFRelease(cf[1]);
  result = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(DerivedStorage + 8), *(_QWORD *)DerivedStorage);
  if (!(_DWORD)result)
  {
    v2 = *(void **)(DerivedStorage + 16);
LABEL_10:
    ParentElement = FigTTMLDocumentWriterElementGetParentElement((uint64_t)v2);
    result = 0;
    *(_QWORD *)(DerivedStorage + 16) = ParentElement;
  }
  return result;
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_AddCaptionData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementAddChildElement(*(_QWORD *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(_QWORD *)(DerivedStorage + 16), a2, a3);
  return 0;
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2])
    return 4294950721;
  else
    return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

void optimizeRegionStyleAttributesAux(uint64_t a1, uint64_t a2)
{
  const void *Attribute;
  CFTypeID v5;
  const void *v6;
  const void *v7[2];

  Attribute = FigTTMLDocumentWriterElementGetAttribute(a1, CFSTR("http://www.w3.org/XML/1998/namespace id"));
  *(_QWORD *)a2 = Attribute;
  if (Attribute)
  {
    v5 = CFGetTypeID(Attribute);
    if (v5 == CFStringGetTypeID() && !FigTTMLDocumentWriterElementGetAttribute(a1, *(const void **)(a2 + 8)))
    {
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a2 + 24));
      FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(a2 + 16), (uint64_t (*)(CFArrayRef *, uint64_t))accumulateAttributeValueCount, 0, 0, a2);
      v7[0] = *(const void **)MEMORY[0x1E0C9B0D0];
      v6 = v7[0];
      v7[1] = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a2 + 24), (CFDictionaryApplierFunction)findMostCommonStyleValue_0, v7);
      if (v7[0] != v6)
      {
        FigTTMLDocumentWriterElementSetAttribute(a1, *(const void **)(a2 + 8), v7[0]);
        *(const void **)(a2 + 32) = v7[0];
        FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(a2 + 16), (uint64_t (*)(CFArrayRef *, uint64_t))removeUnnecesaryAttribute, 0, 0, a2);
      }
    }
  }
}

uint64_t accumulateAttributeValueCount(uint64_t a1, uint64_t a2)
{
  const void *Attribute;
  const __CFDictionary *v5;
  uint64_t v6;
  const void *v7;

  FigTTMLDocumentWriterElementGetAttribute(a1, CFSTR("region"));
  if (FigCFEqual() && FigTTMLDocumentWriterElementGetElementType(a1) == 4)
  {
    Attribute = FigTTMLDocumentWriterElementGetAttribute(a1, *(const void **)(a2 + 8));
    v5 = *(const __CFDictionary **)(a2 + 24);
    if (Attribute)
    {
      v6 = (uint64_t)CFDictionaryGetValue(v5, Attribute) + 1;
      v5 = *(const __CFDictionary **)(a2 + 24);
      v7 = Attribute;
    }
    else
    {
      v7 = (const void *)*MEMORY[0x1E0C9B0D0];
      v6 = 0x7FFFFFFFLL;
    }
    CFDictionarySetValue(v5, v7, (const void *)v6);
  }
  return 0;
}

uint64_t findMostCommonStyleValue_0(uint64_t result, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 8) < a2)
  {
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t removeUnnecesaryAttribute(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterElementGetAttribute(a1, CFSTR("region"));
  if (FigCFEqual())
  {
    FigTTMLDocumentWriterElementGetAttribute(a1, *(const void **)(a2 + 8));
    if (FigCFEqual())
      FigTTMLDocumentWriterElementRemoveAttribute(a1, *(const void **)(a2 + 8));
  }
  return 0;
}

uint64_t FigAttributePartitionGeneratorGetTypeID()
{
  MEMORY[0x19402F294](&FigAttributePartitionGeneratorGetTypeID_sRegisterFigAttributePartitionGeneratorOnce, fapg_Register);
  return sFigAttributePartitionGeneratorID;
}

uint64_t fapg_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAttributePartitionGeneratorID = result;
  return result;
}

uint64_t FigAttributePartitionGeneratorAddElement(CFMutableArrayRef *a1, const void *a2, uint64_t a3)
{
  uint64_t Instance;
  _QWORD *v6;
  uint64_t MutableCopy;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;

  if (a1 && a3 && !CFDictionaryGetValue(a1[3], a2))
  {
    CFGetAllocator(a1);
    MEMORY[0x19402F294](&FigAttributePartitionElementGetTypeID_sRegisterFigAttributePartitionElementOnce, partitionElement_Register);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v6 = (_QWORD *)Instance;
      MutableCopy = FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        v8 = MutableCopy;
        if (a2)
          v9 = CFRetain(a2);
        else
          v9 = 0;
        v6[2] = v9;
        v6[3] = v8;
        goto LABEL_10;
      }
      v10 = FigSignalErrorAt();
      CFRelease(v6);
    }
    else
    {
      v10 = FigSignalErrorAt();
    }
    if ((_DWORD)v10)
      return v10;
    v6 = 0;
LABEL_10:
    CFArrayAppendValue(a1[2], v6);
    CFDictionarySetValue(a1[3], a2, v6);
    if (v6)
      CFRelease(v6);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigAttributePartitionGeneratorPerformPartitioning(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  _QWORD context[2];
  uint64_t v10;

  if (!a1)
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 32) = 1;
  FigCFArrayApplyFunction();
  context[1] = 0;
  v10 = 0;
  context[0] = a1;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 64), (CFDictionaryApplierFunction)fapg_eachUniquenesEntry, context);
  v4 = v10;
  if (!(_DWORD)v10)
  {
    FigCFArrayApplyFunction();
    v5 = CFGetAllocator((CFTypeRef)a1);
    Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      FigCFArrayApplyFunction();
      v4 = 0;
      *a2 = v7;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v4;
}

void fapg_applyElementPassOne(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const __CFDictionary *v6;
  const void *MutableCopy;
  const void *v8;
  const void *v9;
  int v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef Mutable;
  int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  _QWORD context[2];
  uint64_t v18;

  if (!*(_DWORD *)(a2 + 8))
  {
    v4 = *(const void **)a2;
    if (a1)
    {
      v5 = (const void *)a1[3];
      if (v5)
      {
        v6 = (const __CFDictionary *)CFRetain(v5);
        if (v6)
        {
          CFGetAllocator(a1);
          MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
          if (MutableCopy)
          {
            v8 = MutableCopy;
            v9 = (const void *)a1[4];
            a1[4] = MutableCopy;
            CFRetain(MutableCopy);
            if (v9)
              CFRelease(v9);
            CFRelease(v8);
            goto LABEL_11;
          }
        }
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v13 = FigSignalErrorAt();
      v6 = 0;
      Mutable = 0;
      if (v13)
        goto LABEL_24;
    }
    v10 = FigSignalErrorAt();
    if (v10)
    {
      v13 = v10;
      goto LABEL_23;
    }
LABEL_11:
    v11 = CFGetAllocator(v4);
    Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    context[1] = Mutable;
    v18 = 0;
    context[0] = v4;
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)fapg_buildUniquenessMapApplierFunction, context);
    v13 = v18;
    if (!(_DWORD)v18)
    {
      if (a1)
      {
        if (Mutable)
        {
          CFGetAllocator(a1);
          v14 = (const void *)FigCFDictionaryCreateMutableCopy();
          if (v14)
          {
            v15 = v14;
            v16 = (const void *)a1[5];
            a1[5] = v14;
            CFRetain(v14);
            if (v16)
              CFRelease(v16);
            CFRelease(v15);
            goto LABEL_18;
          }
        }
      }
      v13 = FigSignalErrorAt();
      if (!v13)
      {
LABEL_25:
        if (!Mutable)
        {
LABEL_19:
          if (v6)
            CFRelease(v6);
          return;
        }
LABEL_18:
        CFRelease(Mutable);
        goto LABEL_19;
      }
LABEL_24:
      *(_DWORD *)(a2 + 8) = v13;
      goto LABEL_25;
    }
    if (Mutable)
      CFRelease(Mutable);
LABEL_23:
    Mutable = 0;
    goto LABEL_24;
  }
}

void fapg_applyElementPassTwo(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  CFTypeRef v6;
  const void *v7;
  const __CFDictionary *v8;
  const __CFAllocator *v9;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v11;
  int v12;
  const void *v13;
  _QWORD context[2];
  uint64_t v15;

  if (*((_DWORD *)a2 + 2))
    return;
  v4 = *a2;
  if (a1)
  {
    v5 = (const void *)a1[4];
    if (v5)
      v6 = CFRetain(v5);
    else
      v6 = 0;
    v7 = (const void *)a1[5];
    if (v7)
      v8 = (const __CFDictionary *)CFRetain(v7);
    else
      v8 = 0;
  }
  else
  {
    v12 = FigSignalErrorAt();
    if (v12)
    {
      v11 = 0;
      v8 = 0;
      v6 = 0;
      goto LABEL_23;
    }
    v12 = FigSignalErrorAt();
    v8 = 0;
    v6 = 0;
    v11 = 0;
    if (v12)
      goto LABEL_23;
  }
  v9 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
  v11 = Mutable;
  if (!Mutable)
    goto LABEL_22;
  context[1] = Mutable;
  v15 = 0;
  context[0] = v4;
  CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)fapg_updateEachReference, context);
  v12 = v15;
  if ((_DWORD)v15)
  {
LABEL_23:
    *((_DWORD *)a2 + 2) = v12;
LABEL_24:
    if (!v11)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (!a1)
  {
LABEL_22:
    v12 = FigSignalErrorAt();
    if (!v12)
      goto LABEL_24;
    goto LABEL_23;
  }
  v13 = (const void *)a1[6];
  a1[6] = v11;
  CFRetain(v11);
  if (v13)
    CFRelease(v13);
LABEL_14:
  CFRelease(v11);
LABEL_15:
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
}

void fapg_buildPartitionCollection(_QWORD *cf, uint64_t a2)
{
  CFTypeID v4;
  const void *v5;
  CFTypeRef v6;
  const void *v7;
  CFTypeID v8;
  const void *v9;
  CFTypeRef v10;
  int v11;

  if (!*(_DWORD *)(a2 + 16))
  {
    if (cf
      && (v4 = CFGetTypeID(cf),
          MEMORY[0x19402F294](&FigAttributePartitionGetTypeID_sRegisterFigAttributePartitionOnce, partition_Register),
          v4 == sFigAttributePartitionID)
      && (v5 = (const void *)cf[2]) != 0)
    {
      v6 = CFRetain(v5);
      v7 = v6;
      if (v6)
      {
        v8 = CFGetTypeID(v6);
        if (v8 == CFStringGetTypeID())
        {
          v9 = (const void *)cf[3];
          if (v9)
          {
            v10 = CFRetain(v9);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 8), v7, v10);
            if (v10)
              CFRelease(v10);
          }
          else
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 8), v7, 0);
          }
LABEL_16:
          CFRelease(v7);
          return;
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v11 = FigSignalErrorAt();
    if (v11)
      *(_DWORD *)(a2 + 16) = v11;
    if (v7)
      goto LABEL_16;
  }
}

uint64_t FigAttributePartitionGeneratorCopyPartitionReferences(uint64_t a1, const void *a2, _QWORD *a3)
{
  _QWORD *Value;
  CFTypeRef v5;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if (!*(_BYTE *)(a1 + 32))
    return FigSignalErrorAt();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  if (!Value)
    return FigSignalErrorAt();
  v5 = (CFTypeRef)Value[6];
  if (v5)
    v5 = CFRetain(v5);
  *a3 = v5;
  return 0;
}

uint64_t FigAttributePartitionGeneratorCreate(uint64_t a1, uint64_t *a2)
{
  const __CFAllocator *v3;
  uint64_t Instance;
  uint64_t v5;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  CFMutableDictionaryRef v12;
  CFMutableDictionaryRef v13;
  uint64_t v14;
  CFMutableDictionaryRef v16;

  if (a2)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MEMORY[0x19402F294](&FigAttributePartitionGeneratorGetTypeID_sRegisterFigAttributePartitionGeneratorOnce, fapg_Register);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v5 = Instance;
      Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v7 = Mutable;
        v8 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
        if (v8)
        {
          v9 = v8;
          v10 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v10)
          {
            v11 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v11)
            {
              v12 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v12)
              {
                v13 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v13)
                {
                  v14 = 0;
                  *(_BYTE *)(v5 + 32) = 0;
                  *(_QWORD *)(v5 + 40) = v9;
                  *(_QWORD *)(v5 + 16) = v7;
                  *(_QWORD *)(v5 + 24) = v10;
                  *(_QWORD *)(v5 + 56) = v11;
                  *(_QWORD *)(v5 + 64) = v12;
                  *(_QWORD *)(v5 + 72) = v13;
                  *a2 = v5;
                  return v14;
                }
              }
              goto LABEL_17;
            }
          }
          else
          {
            v11 = 0;
          }
          v12 = 0;
LABEL_17:
          v14 = FigSignalErrorAt();
          CFRelease(v7);
          CFRelease(v9);
          if (v10)
            CFRelease(v10);
          CFRelease((CFTypeRef)v5);
          if (v11)
            CFRelease(v11);
          if (!v12)
            return v14;
          v16 = v12;
          goto LABEL_23;
        }
        v14 = FigSignalErrorAt();
        CFRelease(v7);
      }
      else
      {
        v14 = FigSignalErrorAt();
      }
      v16 = (CFMutableDictionaryRef)v5;
LABEL_23:
      CFRelease(v16);
      return v14;
    }
  }
  return FigSignalErrorAt();
}

double fapg_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void fapg_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[8];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[7];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[9];
  if (v7)
    CFRelease(v7);
}

__CFString *fapg_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigAttributePartitionGenerator(%p) elements=%p partitions=%p]"), a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40));
  return Mutable;
}

uint64_t partitionElement_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAttributePartitionElementID = result;
  return result;
}

double partitionElement_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void partitionElement_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[4];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[5];
  if (v6)
    CFRelease(v6);
}

CFStringRef partitionElement_CopyFormattingDesc(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  const __CFAllocator *v4;
  CFIndex v5;
  __CFString *Mutable;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFString *v9;
  CFStringRef v10;

  v2 = *(const __CFArray **)(a1 + 48);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (Count < 1)
    {
      Mutable = 0;
    }
    else
    {
      v5 = Count;
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), i);
        CFStringAppend(Mutable, ValueAtIndex);
        CFStringAppend(Mutable, CFSTR(" "));
      }
    }
  }
  else
  {
    Mutable = 0;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  v9 = CFSTR("<no-refs>");
  if (Mutable)
    v9 = Mutable;
  v10 = CFStringCreateWithFormat(v4, 0, CFSTR("[FigAttributePartitionElement %p]  owner = <%p>\nattributes = %p\nreferences = %@"), a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v9);
  if (Mutable)
    CFRelease(Mutable);
  return v10;
}

void fapg_buildUniquenessMapApplierFunction(CFTypeRef cf, const void *a2, uint64_t a3)
{
  _QWORD *v6;
  CFTypeID v7;
  __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFArray *Value;
  const __CFArray *Mutable;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v16;
  const __CFAllocator *v17;
  const __CFAllocator *v18;
  __CFDictionary *v19;
  const void *UInt64;
  const __CFAllocator *v21;
  __CFDictionary *v22;
  int v23;
  const void *v24;
  int v25;

  if (*(_DWORD *)(a3 + 16))
    return;
  if (!cf || (v6 = *(_QWORD **)a3, v7 = CFGetTypeID(cf), v7 != CFStringGetTypeID()))
  {
    v23 = FigSignalErrorAt();
    UInt64 = 0;
    if (!v23)
      goto LABEL_23;
LABEL_28:
    *(_DWORD *)(a3 + 16) = v23;
    if (UInt64)
      goto LABEL_24;
    return;
  }
  v9 = (const __CFDictionary *)v6[7];
  v8 = (__CFDictionary *)v6[8];
  Value = (const __CFArray *)CFDictionaryGetValue(v9, cf);
  if (Value)
  {
    Mutable = Value;
    CFRetain(Value);
    Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      v13 = Count;
      v14 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v14);
        if (ValueAtIndex)
        {
          v16 = ValueAtIndex;
          CFDictionaryGetValue(ValueAtIndex, CFSTR("value"));
          if (FigCFEqual())
            break;
        }
        if (v13 == ++v14)
          goto LABEL_12;
      }
      v24 = CFDictionaryGetValue(v16, CFSTR("uniqueID"));
      if (v24)
      {
        UInt64 = v24;
        CFRetain(v24);
        v19 = 0;
        goto LABEL_15;
      }
    }
  }
  else
  {
    v17 = CFGetAllocator(v6);
    Mutable = CFArrayCreateMutable(v17, 0, MEMORY[0x1E0C9B378]);
    CFDictionarySetValue(v9, cf, Mutable);
  }
LABEL_12:
  v18 = CFGetAllocator(v6);
  v19 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v6)
  {
    ++v6[6];
    UInt64 = (const void *)FigCFNumberCreateUInt64();
LABEL_14:
    CFDictionarySetValue(v19, CFSTR("value"), a2);
    CFDictionarySetValue(v19, CFSTR("uniqueID"), UInt64);
    CFArrayAppendValue(Mutable, v19);
LABEL_15:
    if (!CFDictionaryContainsKey(v8, UInt64))
    {
      v21 = CFGetAllocator(v6);
      v22 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v22, cf, a2);
      CFDictionarySetValue(v8, UInt64, v22);
      if (v22)
        CFRelease(v22);
    }
    v23 = 0;
    if (v19)
      goto LABEL_19;
    goto LABEL_20;
  }
  v25 = FigSignalErrorAt();
  UInt64 = 0;
  if (!v25)
    goto LABEL_14;
  v23 = v25;
  if (v19)
LABEL_19:
    CFRelease(v19);
LABEL_20:
  if (Mutable)
    CFRelease(Mutable);
  if (v23)
    goto LABEL_28;
LABEL_23:
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), cf, UInt64);
  if (UInt64)
LABEL_24:
    CFRelease(UInt64);
}

void fapg_eachUniquenesEntry(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  CFMutableArrayRef *v6;
  _QWORD *Instance;
  _QWORD *v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v11;
  const void *v12;
  const __CFAllocator *v13;
  CFStringRef v14;
  CFStringRef v15;
  const void *v16;
  int v17;
  int v18;

  if (!*(_DWORD *)(a3 + 16))
  {
    v6 = *(CFMutableArrayRef **)a3;
    CFGetAllocator(*(CFTypeRef *)a3);
    MEMORY[0x19402F294](&FigAttributePartitionGetTypeID_sRegisterFigAttributePartitionOnce, partition_Register);
    Instance = (_QWORD *)_CFRuntimeCreateInstance();
    v8 = Instance;
    if (Instance)
    {
      Instance[3] = 0;
      if (a2)
      {
        v9 = CFGetAllocator(Instance);
        MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, a2);
        v11 = MutableCopy;
        v12 = (const void *)v8[3];
        v8[3] = MutableCopy;
        if (MutableCopy)
          CFRetain(MutableCopy);
        if (v12)
          CFRelease(v12);
        if (v11)
          CFRelease(v11);
      }
    }
    else
    {
      v17 = FigSignalErrorAt();
      if (v17)
        goto LABEL_23;
      v17 = FigSignalErrorAt();
      if (v17)
        goto LABEL_23;
    }
    v13 = CFGetAllocator(v6);
    v14 = CFStringCreateWithFormat(v13, 0, CFSTR("style_%ld"), *(_QWORD *)(a3 + 8) + 1);
    if (v14)
    {
      v15 = v14;
      if (v8)
      {
        v16 = (const void *)v8[2];
        v8[2] = v14;
        CFRetain(v14);
        if (v16)
          CFRelease(v16);
      }
      else
      {
        v18 = FigSignalErrorAt();
        if (v18)
        {
          *(_DWORD *)(a3 + 16) = v18;
          goto LABEL_15;
        }
      }
      CFDictionarySetValue(v6[9], a1, v15);
      CFArrayAppendValue(v6[5], v8);
      ++*(_QWORD *)(a3 + 8);
LABEL_15:
      CFRelease(v15);
      goto LABEL_16;
    }
    v17 = FigSignalErrorAt();
    if (!v17)
    {
LABEL_16:
      if (v8)
        CFRelease(v8);
      return;
    }
LABEL_23:
    *(_DWORD *)(a3 + 16) = v17;
    goto LABEL_16;
  }
}

uint64_t partition_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAttributePartitionID = result;
  return result;
}

uint64_t partition_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void partition_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
}

CFStringRef partition_CopyFormattingDesc(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("<NULL>");
  if (*(_QWORD *)(a1 + 16))
    v1 = *(const __CFString **)(a1 + 16);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAttributePartition %p] name = %@\nattributes = %p"), a1, v1, *(_QWORD *)(a1 + 24));
}

CFStringRef partition_CopyDebugDesc(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("<NULL>");
  if (*(_QWORD *)(a1 + 16))
    v1 = *(const __CFString **)(a1 + 16);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAttributePartition %p] name = %@\nattributes = %p"), a1, v1, *(_QWORD *)(a1 + 24));
}

void fapg_updateEachReference(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *Value;

  if (!*(_DWORD *)(a3 + 16))
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)a3 + 72), a2);
    if (Value)
      CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 8), Value);
  }
}

CFTypeRef xmlCopyMediaPlaylistLocalPath(uint64_t a1)
{
  return xmlCopyMediaPlaylistPath(a1, CFSTR("PathToRehosted"));
}

CFTypeRef xmlCopyMediaPlaylistPath(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  CFStringRef *Child;
  CFStringRef *v7;
  const void *ContentAsCFString;

  v3 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  v4 = FigCFEqual();
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    FigSignalErrorAt();
  }
  else
  {
    Child = FigXMLNodeGetChild(v3, CFSTR("MediaPlaylist"));
    if (Child)
    {
      v7 = FigXMLNodeGetChild((uint64_t)Child, a2);
      ContentAsCFString = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v7);
      if (ContentAsCFString)
        return CFRetain(ContentAsCFString);
    }
  }
  return 0;
}

uint64_t FigHLSPersistentStreamInfoGetClassID()
{
  MEMORY[0x19402F294](&FigHLSPersistentStreamInfoGetClassID_sRegisterFigHLSPersistentStreamInfoBaseTypeOnce, RegisterFigHLSPersistentStreamInfoBaseType);
  return sFigHLSPersistentStreamInfoClassID;
}

uint64_t RegisterFigHLSPersistentStreamInfoBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigHLSPersistentStreamInfoGetTypeID()
{
  MEMORY[0x19402F294](&FigHLSPersistentStreamInfoGetClassID_sRegisterFigHLSPersistentStreamInfoBaseTypeOnce, RegisterFigHLSPersistentStreamInfoBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigHLSPersistentStreamInfoCreate(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  CFTypeRef *v8;
  uint64_t BlockBufferWithCFString;
  uint64_t DerivedStorage;
  const void *Value;
  const __CFData *v14;
  const __CFData *v15;
  __int128 v16;
  const void *v17;
  const void *v18;
  const __CFAllocator *AllocatorForMedia;
  const __CFAllocator *v20;
  CFURLRef v21;
  const __CFURL *v22;
  const __CFAllocator *v23;
  uint64_t v24;
  const __CFAllocator *v25;
  const __CFURL *v26;
  uint64_t v27;
  const __CFAllocator *v28;
  CFURLRef v29;
  CFURLRef v30;
  uint64_t v31;
  uint64_t IsWithinParentDirectory;
  uint64_t v33;
  int v34;
  CFStringRef *Child;
  const __CFString *ContentAsCFString;
  const __CFAllocator *v37;
  CFURLRef v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  const __CFAllocator *v42;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v44;
  CFMutableArrayRef v45;
  CFStringRef *MediaSegments;
  uint64_t v47;
  CFIndex v48;
  const __CFAllocator *v49;
  const void *ChildAtIndex;
  const __CFAllocator *v51;
  uint64_t v52;
  CFStringRef v53;
  int AttributeAsInt64;
  CFNumberRef v55;
  uint64_t v56;
  const __CFAllocator *v57;
  CFMutableDictionaryRef v58;
  uint64_t v59;
  CFStringRef *MediaInitializationSegments;
  uint64_t v61;
  CFIndex v62;
  const __CFAllocator *v63;
  const void *v64;
  const __CFString *v65;
  const __CFAllocator *v66;
  const void *v67;
  int v68;
  const __CFAllocator *v69;
  uint64_t v70;
  int v71;
  CFNumberRef v72;
  uint64_t v73;
  __CFDictionary *DictionaryForInitializationSegmentEntry;
  __CFDictionary *v75;
  uint64_t v76;
  CFStringRef *v77;
  uint64_t IntValue;
  uint64_t v79;
  const __CFURL *v81;
  __CFDictionary *DictionaryForSegmentEntry;
  uint64_t *v83;
  CFTypeRef *v84;
  const __CFURL *v85;
  UInt8 buffer[16];
  __int128 v87;
  CFTypeRef v88;
  CFTypeRef cf;
  char v90;
  char v91;
  CFTypeRef v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t valuePtr;
  CFTypeRef v98[2];
  CFRange v99;

  v92 = 0;
  v91 = 1;
  v90 = 0;
  v88 = 0;
  cf = 0;
  if (!a6 || !a4 || !a2)
    goto LABEL_165;
  v8 = a6;
  MEMORY[0x19402F294](&FigHLSPersistentStreamInfoGetClassID_sRegisterFigHLSPersistentStreamInfoBaseTypeOnce, RegisterFigHLSPersistentStreamInfoBaseType);
  BlockBufferWithCFString = CMDerivedObjectCreate();
  if ((_DWORD)BlockBufferWithCFString)
    goto LABEL_166;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 32) = FigReadWriteLockCreate();
  *(_QWORD *)DerivedStorage = a1;
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(a2);
  *(int64x2_t *)(DerivedStorage + 128) = vdupq_n_s64(1uLL);
  *(_QWORD *)(DerivedStorage + 120) = 0;
  if (a5)
  {
    Value = CFDictionaryGetValue(a5, CFSTR("StreamInfoClientAuditToken"));
    if (Value)
    {
      v14 = (const __CFData *)CFRetain(Value);
      *(_QWORD *)(DerivedStorage + 144) = v14;
      if (v14)
      {
        *(_OWORD *)buffer = 0u;
        v87 = 0u;
        if (CFDataGetLength(v14) != 32)
        {
LABEL_165:
          BlockBufferWithCFString = FigSignalErrorAt();
          goto LABEL_166;
        }
        v15 = *(const __CFData **)(DerivedStorage + 144);
        v99.length = CFDataGetLength(v15);
        v99.location = 0;
        CFDataGetBytes(v15, v99, buffer);
        v16 = v87;
        *(_OWORD *)(DerivedStorage + 152) = *(_OWORD *)buffer;
        *(_OWORD *)(DerivedStorage + 168) = v16;
      }
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 144) = 0;
    }
    v17 = CFDictionaryGetValue(a5, CFSTR("StreamInfoClientBundleIdentifier"));
    if (v17)
      v17 = CFRetain(v17);
    *(_QWORD *)(DerivedStorage + 184) = v17;
    v18 = CFDictionaryGetValue(a5, CFSTR("StreamInfoMemoryPool"));
    *(_QWORD *)(DerivedStorage + 200) = v18;
    if (v18)
      CFRetain(v18);
  }
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a4);
  *(_BYTE *)(DerivedStorage + 8) = 0;
  *(_BYTE *)(DerivedStorage + 112) = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(_QWORD *)(DerivedStorage + 24) = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 16), *(CFStringRef *)(DerivedStorage + 40), 1u);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if (!FigCFURLDoesDirectoryExist())
    goto LABEL_165;
  v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v21 = CFURLCreateCopyAppendingPathComponent(v20, *(CFURLRef *)(DerivedStorage + 24), CFSTR("StreamInfoRoot.xml"), 0);
  *(_QWORD *)(DerivedStorage + 104) = v21;
  if (!v21)
    goto LABEL_165;
  if (FigFileDoesFileExist())
  {
    BlockBufferWithCFString = lockLockFile(DerivedStorage);
    if (!(_DWORD)BlockBufferWithCFString)
    {
      v22 = 0;
      v85 = 0;
      *(_BYTE *)(DerivedStorage + 112) = v90;
      goto LABEL_28;
    }
    goto LABEL_166;
  }
  FigGetAllocatorForMedia();
  BlockBufferWithCFString = FigCreateBlockBufferWithCFString();
  if ((_DWORD)BlockBufferWithCFString)
  {
LABEL_166:
    v39 = BlockBufferWithCFString;
    v22 = 0;
LABEL_176:
    v81 = 0;
    goto LABEL_177;
  }
  v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v22 = CFURLCreateCopyAppendingPathComponent(v23, *(CFURLRef *)(DerivedStorage + 24), CFSTR("StreamInfoRoot.xml"), 0);
  if (!v22 || FigXMLNodeWriteXMLFileFromBlockBufferAtURL((OpaqueCMBlockBuffer *)v88, 0x1E2FEB7B8, v22))
    goto LABEL_174;
  v24 = lockLockFile(DerivedStorage);
  if ((_DWORD)v24)
    goto LABEL_175;
  *(_BYTE *)(DerivedStorage + 112) = 1;
  FigGetAllocatorForMedia();
  v24 = FigCreateBlockBufferWithCFString();
  if ((_DWORD)v24)
    goto LABEL_175;
  v25 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v26 = CFURLCreateCopyAppendingPathComponent(v25, *(CFURLRef *)(DerivedStorage + 24), CFSTR("StreamInfoBoot.xml"), 0);
  if (!v26)
  {
LABEL_174:
    v24 = FigSignalErrorAt();
LABEL_175:
    v39 = v24;
    goto LABEL_176;
  }
  v85 = v26;
  v27 = FigXMLNodeWriteXMLFileFromBlockBufferAtURL((OpaqueCMBlockBuffer *)cf, 0x1E2FEB7B8, v26);
  if ((_DWORD)v27)
    goto LABEL_159;
  *(_BYTE *)(DerivedStorage + 72) = 1;
LABEL_28:
  v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v29 = CFURLCreateCopyAppendingPathComponent(v28, *(CFURLRef *)(DerivedStorage + 24), CFSTR("StreamInfoRoot.xml"), 0);
  if (v29)
  {
    v30 = v29;
    v31 = FigGetAllocatorForMedia();
    IsWithinParentDirectory = FigXMLNodeCreateFromURL(v31, (uint64_t)v30, (CFTypeRef *)(DerivedStorage + 88));
    if (!(_DWORD)IsWithinParentDirectory)
    {
      v33 = *(_QWORD *)(DerivedStorage + 88);
      FigXMLNodeGetTag(v33);
      v34 = FigCFEqual();
      if (!v33 || !v34)
      {
LABEL_169:
        IsWithinParentDirectory = FigSignalErrorAt();
        goto LABEL_170;
      }
      Child = FigXMLNodeGetChild(v33, CFSTR("BootImage"));
      ContentAsCFString = (const __CFString *)FigXMLNodeGetContentAsCFString((uint64_t)Child);
      IsWithinParentDirectory = FigFileValidateFileNameIsWithinParentDirectory();
      if (!(_DWORD)IsWithinParentDirectory)
      {
        v37 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v38 = CFURLCreateCopyAppendingPathComponent(v37, *(CFURLRef *)(DerivedStorage + 24), ContentAsCFString, 0);
        if (v38)
        {
          v39 = 0;
          *(_QWORD *)(DerivedStorage + 96) = v38;
          goto LABEL_35;
        }
        goto LABEL_169;
      }
    }
LABEL_170:
    v39 = IsWithinParentDirectory;
LABEL_35:
    CFRelease(v30);
    if ((_DWORD)v39)
      goto LABEL_160;
    goto LABEL_36;
  }
  v39 = FigSignalErrorAt();
  if ((_DWORD)v39)
    goto LABEL_160;
LABEL_36:
  v40 = FigGetAllocatorForMedia();
  v41 = (uint64_t *)(DerivedStorage + 80);
  v27 = FigXMLNodeCreateFromURL(v40, *(_QWORD *)(DerivedStorage + 96), (CFTypeRef *)(DerivedStorage + 80));
  if ((_DWORD)v27)
    goto LABEL_159;
  v42 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(v42, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 48) = Mutable;
  if (!Mutable
    || (v44 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v45 = CFArrayCreateMutable(v44, 0, MEMORY[0x1E0C9B378]),
        (*(_QWORD *)(DerivedStorage + 56) = v45) == 0))
  {
LABEL_158:
    v27 = FigSignalErrorAt();
    goto LABEL_159;
  }
  *(_QWORD *)buffer = 0;
  valuePtr = -1;
  v98[0] = 0;
  if (!*v41)
  {
    v39 = FigSignalErrorAt();
    goto LABEL_70;
  }
  MediaSegments = xmlGetMediaSegments(*v41);
  if (!MediaSegments
    || (v47 = (uint64_t)MediaSegments, !FigXMLNodeGetCountOfChildren((uint64_t)MediaSegments))
    || (uint64_t)FigXMLNodeGetCountOfChildren(v47) < 1)
  {
    v39 = 0;
LABEL_70:
    v53 = 0;
    DictionaryForSegmentEntry = 0;
    v55 = 0;
    goto LABEL_76;
  }
  v84 = v8;
  v48 = 0;
  v49 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    ChildAtIndex = FigXMLNodeGetChildAtIndex(v47, v48);
    FigXMLNodeGetTag((uint64_t)ChildAtIndex);
    if (!FigCFEqual())
      goto LABEL_67;
    v95 = 0;
    v96 = 0;
    v93 = 0;
    v94 = 0;
    if (FigXMLNodeCopyAttributeAsCFString((uint64_t)ChildAtIndex, (uint64_t)CFSTR("URL"), (CFTypeRef *)buffer))
    {
      v53 = 0;
LABEL_73:
      DictionaryForSegmentEntry = 0;
      v55 = 0;
LABEL_74:
      v39 = FigSignalErrorAt();
      goto LABEL_75;
    }
    v51 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v52 = *(_QWORD *)(DerivedStorage + 128);
    *(_QWORD *)(DerivedStorage + 128) = v52 + 1;
    v53 = CFStringCreateWithFormat(v51, 0, CFSTR("%ld"), v52);
    if (!v53)
    {
      DictionaryForSegmentEntry = 0;
      v55 = 0;
      goto LABEL_74;
    }
    if (FigXMLNodeGetAttributeAsDouble((uint64_t)ChildAtIndex, (uint64_t)CFSTR("Tim"), (double *)&v96)
      || FigXMLNodeGetAttributeAsDouble((uint64_t)ChildAtIndex, (uint64_t)CFSTR("Dur"), (double *)&v95)
      || FigXMLNodeGetAttributeAsInt64((uint64_t)ChildAtIndex, (uint64_t)CFSTR("Off"), &v93))
    {
      goto LABEL_73;
    }
    AttributeAsInt64 = FigXMLNodeGetAttributeAsInt64((uint64_t)ChildAtIndex, (uint64_t)CFSTR("SeqNum"), &valuePtr);
    if (valuePtr == -1)
    {
      v55 = 0;
    }
    else
    {
      if (AttributeAsInt64)
        goto LABEL_73;
      v55 = CFNumberCreate(v49, kCFNumberSInt64Type, &valuePtr);
      if (!v55)
      {
        DictionaryForSegmentEntry = 0;
        goto LABEL_74;
      }
    }
    if (FigXMLNodeGetAttributeAsInt64((uint64_t)ChildAtIndex, (uint64_t)CFSTR("Len"), &v94)
      || FigXMLNodeCopyAttributeAsCFString((uint64_t)ChildAtIndex, (uint64_t)CFSTR("PATH"), v98))
    {
      DictionaryForSegmentEntry = 0;
      goto LABEL_74;
    }
    v56 = FigFileValidateFileNameIsWithinParentDirectory();
    if ((_DWORD)v56)
      break;
    DictionaryForSegmentEntry = createDictionaryForSegmentEntry(*(const void **)buffer, v93, (uint64_t)v55, v94, v98[0]);
    if (!DictionaryForSegmentEntry || CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 48), v53))
      goto LABEL_74;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 48), v53, DictionaryForSegmentEntry);
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 56), v53);
    if (*(_QWORD *)buffer)
    {
      CFRelease(*(CFTypeRef *)buffer);
      *(_QWORD *)buffer = 0;
    }
    CFRelease(DictionaryForSegmentEntry);
    CFRelease(v53);
    if (v98[0])
    {
      CFRelease(v98[0]);
      v98[0] = 0;
    }
    if (v55)
      CFRelease(v55);
    valuePtr = -1;
LABEL_67:
    if (++v48 >= (uint64_t)FigXMLNodeGetCountOfChildren(v47))
    {
      v39 = 0;
      v53 = 0;
      DictionaryForSegmentEntry = 0;
      v55 = 0;
      goto LABEL_75;
    }
  }
  v39 = v56;
  DictionaryForSegmentEntry = 0;
LABEL_75:
  v8 = v84;
  v41 = (uint64_t *)(DerivedStorage + 80);
LABEL_76:
  if (*(_QWORD *)buffer)
    CFRelease(*(CFTypeRef *)buffer);
  if (DictionaryForSegmentEntry)
    CFRelease(DictionaryForSegmentEntry);
  if (v53)
    CFRelease(v53);
  if (v98[0])
    CFRelease(v98[0]);
  if (v55)
    CFRelease(v55);
  if ((_DWORD)v39)
    goto LABEL_160;
  v57 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v58 = CFDictionaryCreateMutable(v57, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 64) = v58;
  if (!v58)
    goto LABEL_158;
  v59 = *v41;
  *(_QWORD *)buffer = 0;
  valuePtr = -1;
  v98[0] = 0;
  MediaInitializationSegments = xmlGetMediaInitializationSegments(v59);
  if (!MediaInitializationSegments)
  {
    v39 = 0;
    v72 = 0;
    goto LABEL_126;
  }
  v61 = (uint64_t)MediaInitializationSegments;
  if (!FigXMLNodeGetCountOfChildren((uint64_t)MediaInitializationSegments)
    || (uint64_t)FigXMLNodeGetCountOfChildren(v61) < 1)
  {
    v39 = 0;
    v67 = 0;
    v72 = 0;
    goto LABEL_122;
  }
  v83 = v41;
  v62 = 0;
  v63 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (2)
  {
    v64 = FigXMLNodeGetChildAtIndex(v61, v62);
    FigXMLNodeGetTag((uint64_t)v64);
    if (!FigCFEqual())
    {
LABEL_114:
      if (++v62 < (uint64_t)FigXMLNodeGetCountOfChildren(v61))
        continue;
LABEL_115:
      v39 = 0;
      goto LABEL_116;
    }
    break;
  }
  v95 = 0;
  v96 = 0;
  if (FigXMLNodeCopyAttributeAsCFString((uint64_t)v64, (uint64_t)CFSTR("URL"), v98))
  {
    v39 = FigSignalErrorAt();
LABEL_116:
    v67 = 0;
LABEL_120:
    v72 = 0;
    goto LABEL_121;
  }
  v65 = (const __CFString *)v98[0];
  v66 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v67 = CFURLCreateWithString(v66, v65, 0);
  if (!v67)
  {
    FigSignalErrorAt();
    v39 = 0;
    goto LABEL_120;
  }
  v68 = FigCFURLIsLocalResource();
  CFRelease(v67);
  if (v68)
    goto LABEL_115;
  v69 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v70 = *(_QWORD *)(DerivedStorage + 136);
  *(_QWORD *)(DerivedStorage + 136) = v70 + 1;
  v67 = CFStringCreateWithFormat(v69, 0, CFSTR("%ld"), v70);
  if (!v67 || FigXMLNodeGetAttributeAsInt64((uint64_t)v64, (uint64_t)CFSTR("Off"), &v95))
  {
LABEL_119:
    v39 = FigSignalErrorAt();
    goto LABEL_120;
  }
  v71 = FigXMLNodeGetAttributeAsInt64((uint64_t)v64, (uint64_t)CFSTR("SeqNum"), &valuePtr);
  if (valuePtr == -1)
  {
    v72 = 0;
  }
  else
  {
    if (v71)
      goto LABEL_119;
    v72 = CFNumberCreate(v63, kCFNumberSInt64Type, &valuePtr);
    if (!v72)
      goto LABEL_151;
  }
  if (!FigXMLNodeGetAttributeAsInt64((uint64_t)v64, (uint64_t)CFSTR("Len"), &v96)
    && !FigXMLNodeCopyAttributeAsCFString((uint64_t)v64, (uint64_t)CFSTR("PATH"), (CFTypeRef *)buffer))
  {
    v73 = FigFileValidateFileNameIsWithinParentDirectory();
    if ((_DWORD)v73)
      goto LABEL_152;
    DictionaryForInitializationSegmentEntry = createDictionaryForInitializationSegmentEntry(v98[0], v95, (uint64_t)v72, v96, *(const void **)buffer);
    if (DictionaryForInitializationSegmentEntry)
    {
      v75 = DictionaryForInitializationSegmentEntry;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 64), v67, DictionaryForInitializationSegmentEntry);
      if (v98[0])
      {
        CFRelease(v98[0]);
        v98[0] = 0;
      }
      CFRelease(v67);
      CFRelease(v75);
      if (*(_QWORD *)buffer)
      {
        CFRelease(*(CFTypeRef *)buffer);
        *(_QWORD *)buffer = 0;
      }
      if (v72)
        CFRelease(v72);
      valuePtr = -1;
      goto LABEL_114;
    }
  }
LABEL_151:
  v73 = FigSignalErrorAt();
LABEL_152:
  v39 = v73;
LABEL_121:
  v41 = v83;
LABEL_122:
  if (v98[0])
    CFRelease(v98[0]);
  if (v67)
    CFRelease(v67);
LABEL_126:
  if (*(_QWORD *)buffer)
    CFRelease(*(CFTypeRef *)buffer);
  if (v72)
    CFRelease(v72);
  if ((_DWORD)v39)
    goto LABEL_160;
  v76 = *v41;
  if (!v76 || (FigXMLNodeGetTag(v76), !FigCFEqual()))
  {
    v27 = FigSignalErrorAt();
    if (!(_DWORD)v27)
    {
LABEL_141:
      v39 = 0;
      *v8 = v92;
      v92 = 0;
      goto LABEL_142;
    }
LABEL_159:
    v39 = v27;
    goto LABEL_160;
  }
  *(_QWORD *)buffer = 0;
  v77 = FigXMLNodeGetChild(v76, CFSTR("MediaBytesStored"));
  if (!v77)
  {
    IntValue = 0;
LABEL_137:
    v39 = 0;
    v79 = IntValue & ~(IntValue >> 63);
    if (!v77)
      goto LABEL_139;
LABEL_138:
    CFRelease(v77);
    goto LABEL_139;
  }
  v39 = FigXMLNodeCopyContentAsCFString((uint64_t)v77, buffer);
  v77 = *(CFStringRef **)buffer;
  if (!(_DWORD)v39)
  {
    IntValue = CFStringGetIntValue(*(CFStringRef *)buffer);
    v77 = *(CFStringRef **)buffer;
    goto LABEL_137;
  }
  v79 = 0;
  if (*(_QWORD *)buffer)
    goto LABEL_138;
LABEL_139:
  if (!(_DWORD)v39)
  {
    *(_QWORD *)(DerivedStorage + 192) = v79;
    goto LABEL_141;
  }
LABEL_160:
  v81 = v85;
LABEL_177:
  v85 = v81;
  if (v92)
    CFRelease(v92);
LABEL_142:
  if (cf)
    CFRelease(cf);
  if (v88)
    CFRelease(v88);
  if (v22)
    CFRelease(v22);
  if (v85)
    CFRelease(v85);
  return v39;
}

uint64_t lockLockFile(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;
  CFURLRef v3;
  uint64_t v4;
  unsigned int v5;

  if (*(_QWORD *)(a1 + 120))
    goto LABEL_5;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v3 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(a1 + 24), CFSTR("StreamInfoRoot.xml"), 0);
  v4 = FigFileForkOpenMainByCFURL();
  if (v3)
    CFRelease(v3);
  if (!(_DWORD)v4)
  {
LABEL_5:
    v5 = FigFileLock();
    if (v5 == -12206)
      return 4294950362;
    else
      return v5;
  }
  return v4;
}

uint64_t xmlGetStreamInfo(uint64_t a1)
{
  FigXMLNodeGetTag(a1);
  if (FigCFEqual())
    return a1;
  else
    return 0;
}

CFStringRef FigHLSPersistentStreamInfoCopyFormattingDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigHLSPersistentStreamInfo %p]"), a1);
}

uint64_t HLSPersistentStreamInfo_Invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
    return streamInfo_Invalidate(DerivedStorage);
  else
    return FigSignalErrorAt();
}

uint64_t HLSPersistentStreamInfo_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v1 = DerivedStorage;
  streamInfo_Invalidate(DerivedStorage);
  result = FigReadWriteLockDestroy();
  *(_QWORD *)(v1 + 32) = 0;
  return result;
}

CFStringRef HLSPersistentStreamInfo_CopyDebugDescription()
{
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigHLSPersistentStreamInfo]{%@}"), *(_QWORD *)(DerivedStorage + 40));
}

uint64_t HLSPersistentStreamInfo_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *AllocatorForMedia;
  const __CFDictionary *v11;
  uint64_t Copy;
  const __CFAllocator *v13;
  const __CFString *v15;
  uint64_t StreamInfo;
  _BOOL4 IsCompressible;
  uint64_t v18;
  CFTypeRef *v19;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v7 = DerivedStorage;
    v8 = FigReadWriteLockLockForRead();
    if ((_DWORD)v8)
    {
LABEL_30:
      v9 = v8;
      goto LABEL_19;
    }
    if (a2 && a4)
    {
      if (*(_BYTE *)(v7 + 8))
      {
        v9 = 4294954511;
LABEL_19:
        FigReadWriteLockUnlockForRead();
        return v9;
      }
      if (CFEqual(a2, CFSTR("StreamInfoMediaSegmentList")))
      {
        if (*(_QWORD *)(v7 + 48))
        {
          AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          v11 = *(const __CFDictionary **)(v7 + 48);
LABEL_10:
          Copy = (uint64_t)CFDictionaryCreateCopy(AllocatorForMedia, v11);
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      if (CFEqual(a2, CFSTR("StreamInfoMediaSegmentIDList")))
      {
        if (*(_QWORD *)(v7 + 56))
        {
          v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
          Copy = (uint64_t)CFArrayCreateCopy(v13, *(CFArrayRef *)(v7 + 56));
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      if (CFEqual(a2, CFSTR("StreamInfoMediaInitializationSegmentList")))
      {
        if (*(_QWORD *)(v7 + 64))
        {
          AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          v11 = *(const __CFDictionary **)(v7 + 64);
          goto LABEL_10;
        }
LABEL_17:
        Copy = 0;
        goto LABEL_18;
      }
      if (CFEqual(CFSTR("StreamInfoMediaPlaylistNetworkURL"), a2))
      {
        Copy = (uint64_t)xmlCopyMediaPlaylistURL(v7);
        if (Copy)
          goto LABEL_18;
LABEL_22:
        v9 = 4294950360;
        goto LABEL_19;
      }
      if (CFEqual(CFSTR("StreamInfoMediaTypeList"), a2))
      {
        valuePtr = 0;
        ps_xmlCopyMediaTypeList(v7, (CFMutableArrayRef *)&valuePtr);
        v9 = 0;
        *a4 = valuePtr;
        goto LABEL_19;
      }
      if (CFEqual(CFSTR("StreamInfoStreamType"), a2))
      {
        Copy = (uint64_t)xmlCopyStreamType(v7);
        goto LABEL_18;
      }
      if (CFEqual(CFSTR("StreamInfoPeakBandwidth"), a2))
      {
        v15 = CFSTR("PeakBandwidth");
      }
      else
      {
        if (!CFEqual(CFSTR("StreamInfoAverageBandwidth"), a2))
        {
          if (CFEqual(CFSTR("StreamInfoVersion"), a2))
          {
            Copy = xmlCopyStreamInfoVersion(v7);
            if (Copy)
              goto LABEL_18;
            goto LABEL_22;
          }
          if (CFEqual(CFSTR("StreamInfoEvictionPolicy"), a2))
          {
            Copy = (uint64_t)xmlCopyEvictionPolicy(v7);
            if (Copy)
              goto LABEL_18;
            goto LABEL_22;
          }
          if (CFEqual(CFSTR("StreamInfoCompressable"), a2))
          {
            StreamInfo = xmlGetStreamInfo(*(_QWORD *)(v7 + 80));
            IsCompressible = xmlIsCompressible(StreamInfo);
          }
          else
          {
            if (!CFEqual(CFSTR("StreamInfoCompleteState"), a2))
            {
              if (!CFEqual(CFSTR("StreamInfoMediaBytesStored"), a2))
              {
                if (!CFEqual(CFSTR("StreamInfoUniqueIdentifier"), a2))
                {
                  v9 = 0;
                  goto LABEL_19;
                }
                Copy = (uint64_t)xmlCopyUniqueIdentifier(v7);
                goto LABEL_18;
              }
              valuePtr = *(_QWORD *)(v7 + 192);
              Copy = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
              if (Copy)
              {
LABEL_18:
                v9 = 0;
                *a4 = Copy;
                goto LABEL_19;
              }
              goto LABEL_29;
            }
            v18 = xmlGetStreamInfo(*(_QWORD *)(v7 + 80));
            IsCompressible = ps_xmlIsComplete(v18);
          }
          v19 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
          if (IsCompressible)
            v19 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
          Copy = (uint64_t)CFRetain(*v19);
          goto LABEL_18;
        }
        v15 = CFSTR("AverageBandwidth");
      }
      Copy = (uint64_t)xmlCopyStreamBandwidth(v7, v15);
      if (Copy)
        goto LABEL_18;
    }
LABEL_29:
    v8 = FigSignalErrorAt();
    goto LABEL_30;
  }
  return FigSignalErrorAt();
}

uint64_t HLSPersistentStreamInfo_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v8;
  int Value;
  uint64_t v10;
  int v11;
  CFStringRef *Child;
  CFTypeRef v13;
  CFTypeID v14;
  uint64_t v15;
  uint64_t AllocatorForMedia;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeID v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  CFIndex Count;
  CFIndex v25;
  uint64_t CFStringForOSTypeValue;
  uint64_t v27;
  uint64_t v28;
  CFTypeID v29;
  const __CFString *v30;
  CFTypeID v31;
  const __CFString *v32;
  CFTypeID v33;
  CFTypeID v34;
  CFTypeID v35;
  CFTypeRef v37;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v6 = DerivedStorage;
    v7 = FigReadWriteLockLockForWrite();
    if ((_DWORD)v7)
      return v7;
    if (!a2 || *(_BYTE *)(v6 + 8) || *(_BYTE *)(v6 + 112) != 1)
      goto LABEL_78;
    if (CFEqual(CFSTR("StreamInfoCompleteState"), a2))
    {
      if (a3)
      {
        v8 = CFGetTypeID(a3);
        if (v8 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue((CFBooleanRef)a3);
          v10 = *(_QWORD *)(v6 + 80);
          FigXMLNodeGetTag(v10);
          v11 = FigCFEqual();
          if (!v10 || !v11)
          {
            v19 = FigSignalErrorAt();
            goto LABEL_28;
          }
          Child = FigXMLNodeGetChild(v10, CFSTR("Complete"));
          if (Child)
          {
            v13 = CFRetain(Child);
            cf = v13;
            if (v13)
            {
LABEL_21:
              if (Value == 1)
                v17 = CFSTR("YES");
              else
                v17 = CFSTR("NO");
              v18 = FigXMLNodeContentSetCFString((uint64_t)v13, v17);
              goto LABEL_25;
            }
          }
          else
          {
            cf = 0;
          }
          AllocatorForMedia = FigGetAllocatorForMedia();
          FigXMLNodeCreateChildNode(AllocatorForMedia, v10, CFSTR("Complete"), &cf);
          v13 = cf;
          goto LABEL_21;
        }
      }
      goto LABEL_78;
    }
    if (CFEqual(CFSTR("StreamInfoMediaPlaylistNetworkURL"), a2))
    {
      if (a3)
      {
        v14 = CFGetTypeID(a3);
        if (v14 == CFStringGetTypeID())
        {
          v15 = xmlSetMediaPlaylist(*(_QWORD *)(v6 + 80), a3, CFSTR("NetworkURL"));
          if (!(_DWORD)v15)
            goto LABEL_29;
          goto LABEL_79;
        }
      }
    }
    else
    {
      if (CFEqual(CFSTR("StreamInfoMediaTypeList"), a2))
      {
        if (a3)
        {
          v20 = CFGetTypeID(a3);
          if (v20 == CFArrayGetTypeID())
          {
            v37 = 0;
            cf = 0;
            v21 = *(_QWORD *)(v6 + 80);
            FigXMLNodeGetTag(v21);
            v22 = FigCFEqual();
            if (v21 && v22)
            {
              cf = FigXMLNodeGetChild(v21, CFSTR("MediaTypeList"));
              if (cf)
                FigXMLNodeRemoveAndClearChild(v21, &cf);
              v23 = FigGetAllocatorForMedia();
              v18 = FigXMLNodeCreateChildNode(v23, v21, CFSTR("MediaTypeList"), &cf);
              if (!(_DWORD)v18)
              {
                Count = CFArrayGetCount((CFArrayRef)a3);
                if (Count < 1)
                {
LABEL_45:
                  v19 = 0;
                }
                else
                {
                  v25 = Count + 1;
                  while (1)
                  {
                    FigCFArrayGetInt32AtIndex();
                    CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
                    v27 = FigGetAllocatorForMedia();
                    v28 = FigXMLNodeCreateChildNode(v27, (uint64_t)cf, CFSTR("MediaType"), &v37);
                    if ((_DWORD)v28)
                      break;
                    v28 = FigXMLNodeAttributeSetCFString((uint64_t)v37, (uint64_t)CFSTR("type"), CFStringForOSTypeValue);
                    if ((_DWORD)v28)
                      break;
                    if (v37)
                    {
                      CFRelease(v37);
                      v37 = 0;
                    }
                    if ((unint64_t)--v25 <= 1)
                      goto LABEL_45;
                  }
                  v19 = v28;
                  if (v37)
                    CFRelease(v37);
                }
                goto LABEL_26;
              }
            }
            else
            {
              v18 = FigSignalErrorAt();
            }
LABEL_25:
            v19 = v18;
LABEL_26:
            if (cf)
              CFRelease(cf);
LABEL_28:
            if ((_DWORD)v19)
            {
LABEL_80:
              FigReadWriteLockUnlockForWrite();
              return v19;
            }
            goto LABEL_29;
          }
        }
        goto LABEL_78;
      }
      if (!CFEqual(CFSTR("StreamInfoStreamType"), a2))
      {
        if (CFEqual(CFSTR("StreamInfoPeakBandwidth"), a2))
        {
          if (!a3)
            goto LABEL_78;
          v31 = CFGetTypeID(a3);
          if (v31 != CFNumberGetTypeID())
            goto LABEL_78;
          v32 = CFSTR("PeakBandwidth");
        }
        else
        {
          if (!CFEqual(CFSTR("StreamInfoAverageBandwidth"), a2))
          {
            if (CFEqual(CFSTR("StreamInfoEvictionPolicy"), a2))
            {
              if (a3)
              {
                v34 = CFGetTypeID(a3);
                if (v34 == CFStringGetTypeID())
                {
                  v15 = xmlSetEvictionPolicy(v6, a3);
                  if (!(_DWORD)v15)
                    goto LABEL_29;
                  goto LABEL_79;
                }
              }
            }
            else
            {
              if (!CFEqual(CFSTR("StreamInfoUniqueIdentifier"), a2))
                goto LABEL_29;
              if (a3)
              {
                v35 = CFGetTypeID(a3);
                if (v35 == CFStringGetTypeID())
                {
                  v15 = xmlSetUniqueIdentifier(v6, a3);
                  if (!(_DWORD)v15)
                    goto LABEL_29;
                  goto LABEL_79;
                }
              }
            }
            goto LABEL_78;
          }
          if (!a3)
            goto LABEL_78;
          v33 = CFGetTypeID(a3);
          if (v33 != CFNumberGetTypeID())
            goto LABEL_78;
          v32 = CFSTR("AverageBandwidth");
        }
        v15 = xmlSetStreamBandwidth(v6, (const __CFNumber *)a3, v32);
        if (!(_DWORD)v15)
          goto LABEL_29;
        goto LABEL_79;
      }
      if (a3)
      {
        v29 = CFGetTypeID(a3);
        if (v29 == CFStringGetTypeID())
        {
          if (CFEqual(a3, CFSTR("StreamInfoMainStream")))
          {
            v30 = CFSTR("Main");
          }
          else
          {
            if (!CFEqual(a3, CFSTR("StreamInfoSupplementalStream")))
            {
              FigSignalErrorAt();
              goto LABEL_29;
            }
            v30 = CFSTR("Supplemental");
          }
          v15 = xmlSetStreamType(v6, v30);
          if (!(_DWORD)v15)
          {
LABEL_29:
            v19 = 0;
            *(_BYTE *)(v6 + 72) = 1;
            goto LABEL_80;
          }
LABEL_79:
          v19 = v15;
          goto LABEL_80;
        }
      }
    }
LABEL_78:
    v15 = FigSignalErrorAt();
    goto LABEL_79;
  }
  return FigSignalErrorAt();
}

uint64_t streamInfo_Invalidate(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  v2 = FigReadWriteLockLockForWrite();
  if (!(_DWORD)v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      *(_BYTE *)(a1 + 8) = 1;
      if (*(_QWORD *)(a1 + 120))
      {
        FigFileUnlock();
        FigFileForkClose();
        *(_QWORD *)(a1 + 120) = 0;
      }
      v3 = *(const void **)(a1 + 48);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(a1 + 48) = 0;
      }
      v4 = *(const void **)(a1 + 56);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(a1 + 56) = 0;
      }
      v5 = *(const void **)(a1 + 40);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(a1 + 40) = 0;
      }
      v6 = *(const void **)(a1 + 24);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(a1 + 24) = 0;
      }
      v7 = *(const void **)(a1 + 64);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(a1 + 64) = 0;
      }
      v8 = *(const void **)(a1 + 96);
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(a1 + 96) = 0;
      }
      v9 = *(const void **)(a1 + 16);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(a1 + 16) = 0;
      }
      v10 = *(const void **)(a1 + 104);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(a1 + 104) = 0;
      }
      v11 = *(const void **)(a1 + 200);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(a1 + 200) = 0;
      }
      v12 = *(const void **)(a1 + 88);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(a1 + 88) = 0;
      }
      v13 = *(const void **)(a1 + 80);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    FigReadWriteLockUnlockForWrite();
  }
  return v2;
}

CFTypeRef xmlCopyMediaPlaylistURL(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  CFStringRef *Child;
  CFStringRef *v5;
  const void *ContentAsCFString;

  v1 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  v2 = FigCFEqual();
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    FigSignalErrorAt();
  }
  else
  {
    Child = FigXMLNodeGetChild(v1, CFSTR("MediaPlaylist"));
    if (Child)
    {
      v5 = FigXMLNodeGetChild((uint64_t)Child, CFSTR("NetworkURL"));
      ContentAsCFString = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v5);
      if (ContentAsCFString)
        return CFRetain(ContentAsCFString);
    }
  }
  return 0;
}

void ps_xmlCopyMediaTypeList(uint64_t a1, CFMutableArrayRef *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  CFStringRef *Child;
  uint64_t v7;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  CFIndex v10;
  const void *ChildAtIndex;

  v3 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  v4 = FigCFEqual();
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    FigSignalErrorAt();
    return;
  }
  Child = FigXMLNodeGetChild(v3, CFSTR("MediaTypeList"));
  if (!Child)
  {
    if (!a2)
      return;
    Mutable = 0;
    goto LABEL_16;
  }
  v7 = (uint64_t)Child;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if ((uint64_t)FigXMLNodeGetCountOfChildren(v7) >= 1)
  {
    v10 = 0;
    do
    {
      ChildAtIndex = FigXMLNodeGetChildAtIndex(v7, v10);
      FigXMLNodeGetTag((uint64_t)ChildAtIndex);
      if (FigCFEqual())
      {
        FigXMLNodeGetAttribute();
        FigCFStringGetOSTypeValue();
        FigCFArrayAppendInt32();
      }
      ++v10;
    }
    while (v10 < (uint64_t)FigXMLNodeGetCountOfChildren(v7));
  }
  if (a2)
  {
LABEL_16:
    *a2 = Mutable;
    return;
  }
  if (Mutable)
    CFRelease(Mutable);
}

CFTypeRef xmlCopyStreamType(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  CFStringRef *Child;
  const __CFString *v5;

  v1 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  v2 = FigCFEqual();
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    FigSignalErrorAt();
  }
  else
  {
    Child = FigXMLNodeGetChild(v1, CFSTR("Type"));
    if (FigXMLNodeGetContentAsCFString((uint64_t)Child))
    {
      if (FigCFEqual())
      {
        v5 = CFSTR("StreamInfoMainStream");
        return CFRetain(v5);
      }
      if (FigCFEqual())
      {
        v5 = CFSTR("StreamInfoSupplementalStream");
        return CFRetain(v5);
      }
    }
  }
  return 0;
}

uint64_t xmlCopyStreamInfoVersion(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  CFStringRef *Child;

  v1 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  v2 = FigCFEqual();
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    Child = FigXMLNodeGetChild(v1, CFSTR("Version"));
    return FigXMLNodeGetContentAsCFString((uint64_t)Child);
  }
}

CFTypeRef xmlCopyEvictionPolicy(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  CFStringRef *Child;
  const void *ContentAsCFString;

  v1 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  v2 = FigCFEqual();
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    FigSignalErrorAt();
  }
  else
  {
    Child = FigXMLNodeGetChild(v1, CFSTR("EvictionPolicy"));
    ContentAsCFString = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)Child);
    if (ContentAsCFString)
      return CFRetain(ContentAsCFString);
  }
  return 0;
}

BOOL xmlIsCompressible(uint64_t a1)
{
  CFStringRef *Child;
  int v2;
  _BOOL8 v3;
  CFTypeRef v4;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  Child = FigXMLNodeGetChild(a1, CFSTR("Compressable"));
  if (!Child)
    return 0;
  v2 = FigXMLNodeCopyContentAsCFString((uint64_t)Child, &cf);
  v3 = 0;
  v4 = cf;
  if (!v2 && cf)
  {
    v3 = FigCFEqual() != 0;
    v4 = cf;
  }
  if (v4)
    CFRelease(v4);
  return v3;
}

BOOL ps_xmlIsComplete(uint64_t a1)
{
  CFStringRef *Child;

  if (a1)
  {
    Child = FigXMLNodeGetChild(a1, CFSTR("Complete"));
    FigXMLNodeGetContentAsCFString((uint64_t)Child);
    return FigCFEqual() != 0;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

CFStringRef *xmlCopyUniqueIdentifier(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  CFStringRef *result;
  uint64_t v5;

  v5 = 0;
  v1 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  v2 = FigCFEqual();
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    result = FigXMLNodeGetChild(v1, CFSTR("UniqueIdentifier"));
    if (result)
    {
      FigXMLNodeCopyContentAsCFString((uint64_t)result, &v5);
      return (CFStringRef *)v5;
    }
  }
  return result;
}

CFNumberRef xmlCopyStreamBandwidth(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  CFStringRef *Child;
  uint64_t v7;
  const void *ChildAtIndex;
  uint64_t valuePtr;

  valuePtr = 0;
  v3 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  v4 = FigCFEqual();
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    FigSignalErrorAt();
    return 0;
  }
  Child = FigXMLNodeGetChild(v3, a2);
  if (Child)
  {
    v7 = (uint64_t)Child;
    if (FigXMLNodeGetCountOfChildren((uint64_t)Child))
    {
      ChildAtIndex = FigXMLNodeGetChildAtIndex(v7, 0);
      if (FigXMLNodeGetContentAsInt64((uint64_t)ChildAtIndex, &valuePtr))
        return 0;
    }
  }
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
}

uint64_t xmlSetStreamType(uint64_t a1, const void *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t AllocatorForMedia;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  v4 = FigCFEqual();
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return FigSignalErrorAt();
  cf = FigXMLNodeGetChild(v3, CFSTR("Type"));
  if (cf)
    FigXMLNodeRemoveAndClearChild(v3, &cf);
  AllocatorForMedia = FigGetAllocatorForMedia();
  v7 = FigXMLNodeCreateChildNode(AllocatorForMedia, v3, CFSTR("Type"), &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    FigXMLNodeContentSetCFString((uint64_t)cf, a2);
    v8 = cf;
  }
  if (v8)
    CFRelease(v8);
  return v7;
}

uint64_t xmlSetEvictionPolicy(uint64_t a1, const void *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t AllocatorForMedia;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  v4 = FigCFEqual();
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return FigSignalErrorAt();
  cf = FigXMLNodeGetChild(v3, CFSTR("EvictionPolicy"));
  if (cf)
    FigXMLNodeRemoveAndClearChild(v3, &cf);
  AllocatorForMedia = FigGetAllocatorForMedia();
  v7 = FigXMLNodeCreateChildNode(AllocatorForMedia, v3, CFSTR("EvictionPolicy"), &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    v7 = FigXMLNodeContentSetCFString((uint64_t)cf, a2);
    v8 = cf;
  }
  if (v8)
    CFRelease(v8);
  return v7;
}

uint64_t xmlSetUniqueIdentifier(uint64_t a1, const void *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t AllocatorForMedia;
  uint64_t v7;
  CFStringRef *Child;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v3 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  v4 = FigCFEqual();
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    cf = FigXMLNodeGetChild(v3, CFSTR("UniqueIdentifier"));
    if (cf)
      FigXMLNodeRemoveAndClearChild(v3, &cf);
    AllocatorForMedia = FigGetAllocatorForMedia();
    v7 = FigXMLNodeCreateChildNode(AllocatorForMedia, v3, CFSTR("UniqueIdentifier"), &cf);
    if (!(_DWORD)v7)
    {
      Child = FigXMLNodeGetChild(v3, CFSTR("UniqueIdentifier"));
      v7 = FigXMLNodeContentSetCFString((uint64_t)Child, a2);
    }
  }
  v9 = v7;
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t xmlSetMediaPlaylist(uint64_t a1, const void *a2, const __CFString *a3)
{
  int v6;
  CFStringRef *Child;
  CFTypeRef v8;
  uint64_t AllocatorForMedia;
  uint64_t v10;
  CFStringRef *v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  CFTypeRef v16;
  CFTypeRef cf;

  v16 = 0;
  FigXMLNodeGetTag(a1);
  v6 = FigCFEqual();
  if (!a1 || !v6)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_11;
  }
  Child = FigXMLNodeGetChild(a1, CFSTR("MediaPlaylist"));
  if (Child)
  {
    v8 = CFRetain(Child);
    v16 = v8;
    if (v8)
      goto LABEL_9;
  }
  else
  {
    v16 = 0;
  }
  AllocatorForMedia = FigGetAllocatorForMedia();
  v10 = FigXMLNodeCreateChildNode(AllocatorForMedia, a1, CFSTR("MediaPlaylist"), &v16);
  if ((_DWORD)v10)
  {
LABEL_11:
    v12 = v10;
    goto LABEL_16;
  }
  v8 = v16;
LABEL_9:
  v11 = FigXMLNodeGetChild((uint64_t)v8, a3);
  if (v11)
  {
    v10 = FigXMLNodeContentSetCFString((uint64_t)v11, a2);
    goto LABEL_11;
  }
  v13 = v16;
  cf = 0;
  v14 = FigGetAllocatorForMedia();
  v12 = FigXMLNodeCreateChildNode(v14, (uint64_t)v13, a3, &cf);
  if (!(_DWORD)v12)
    FigXMLNodeContentSetCFString((uint64_t)cf, a2);
  if (cf)
    CFRelease(cf);
LABEL_16:
  if (v16)
    CFRelease(v16);
  return v12;
}

uint64_t xmlSetStreamBandwidth(uint64_t a1, const __CFNumber *a2, const __CFString *a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  CFStringRef *Child;
  CFTypeRef v9;
  uint64_t AllocatorForMedia;
  uint64_t v11;
  uint64_t v13;
  CFTypeRef cf;

  v13 = 0;
  v5 = *(_QWORD *)(a1 + 80);
  FigXMLNodeGetTag(v5);
  v6 = FigCFEqual();
  CFNumberGetValue(a2, kCFNumberSInt64Type, &v13);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return FigSignalErrorAt();
  Child = FigXMLNodeGetChild(v5, a3);
  if (!Child)
  {
    cf = 0;
    goto LABEL_9;
  }
  v9 = CFRetain(Child);
  cf = v9;
  if (!v9)
  {
LABEL_9:
    AllocatorForMedia = FigGetAllocatorForMedia();
    v11 = FigXMLNodeCreateChildNode(AllocatorForMedia, v5, a3, &cf);
    v9 = cf;
    if ((_DWORD)v11)
      goto LABEL_11;
  }
  v11 = FigXMLNodeContentSetInt64((uint64_t)v9, v13);
  v9 = cf;
LABEL_11:
  if (v9)
    CFRelease(v9);
  return v11;
}

uint64_t HLSPersistentStreamInfo_setMediaPlaylist(uint64_t a1, uint64_t a2, const __CFString *a3, OpaqueCMBlockBuffer *a4)
{
  uint64_t DerivedStorage;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t TempFileAtURL;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = FigCFEqual();
  v9 = FigCFEqual();
  if (DerivedStorage)
  {
    if (!a2)
      goto LABEL_28;
    if (!a4)
      goto LABEL_30;
    if (!a3)
      goto LABEL_28;
    v10 = v9;
    if (!(v8 | v9))
      goto LABEL_28;
    v11 = FigReadWriteLockLockForWrite();
    if (!(_DWORD)v11)
    {
      if (!*(_BYTE *)(DerivedStorage + 8) && *(_BYTE *)(DerivedStorage + 112) == 1)
      {
        TempFileAtURL = FigFileCreateTempFileAtURL();
        if (!(_DWORD)TempFileAtURL)
        {
          FigGetAllocatorForMedia();
          TempFileAtURL = FigByteStreamCreateFromOpenFile();
          if (!(_DWORD)TempFileAtURL)
          {
            CMBlockBufferGetDataLength(a4);
            TempFileAtURL = CMByteStreamWriteBlockBuffer();
            if (!(_DWORD)TempFileAtURL)
            {
              FigFileForkClose();
              AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
              a4 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 24), a3, 0);
              if (a4)
              {
                v14 = FigFileRename();
                if (!(_DWORD)v14)
                {
                  if (v10)
                  {
                    v15 = *(_QWORD *)(DerivedStorage + 80);
                    v16 = CFSTR("PathToLocalCopy");
                  }
                  else
                  {
                    if (!v8)
                    {
LABEL_19:
                      v17 = 0;
                      *(_BYTE *)(DerivedStorage + 72) = 1;
LABEL_20:
                      FigReadWriteLockUnlockForWrite();
                      goto LABEL_21;
                    }
                    v15 = *(_QWORD *)(DerivedStorage + 80);
                    v16 = CFSTR("PathToOffline");
                  }
                  v14 = xmlSetMediaPlaylist(v15, a3, v16);
                  if (!(_DWORD)v14)
                    goto LABEL_19;
                }
LABEL_31:
                v17 = v14;
                goto LABEL_20;
              }
LABEL_30:
              v14 = FigSignalErrorAt();
              goto LABEL_31;
            }
          }
        }
LABEL_29:
        v17 = TempFileAtURL;
        a4 = 0;
        goto LABEL_20;
      }
LABEL_28:
      TempFileAtURL = FigSignalErrorAt();
      goto LABEL_29;
    }
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  v17 = v11;
  a4 = 0;
LABEL_21:
  FigFileForkClose();
  if (a4)
    CFRelease(a4);
  return v17;
}

uint64_t HLSPersistentStreamInfo_CopyMediaPlaylist(uint64_t a1, uint64_t a2, _QWORD *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  const __CFString *v12;
  CFTypeRef v13;
  const void *v14;
  uint64_t v15;
  uint64_t AllocatorForMedia;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t (*v20)(CFTypeRef, _QWORD, uint64_t *);
  uint64_t v21;
  uint64_t v23;
  CFTypeRef cf;
  CFTypeRef v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = FigCFEqual();
  v9 = FigCFEqual();
  if (DerivedStorage)
  {
    v10 = v9;
    v11 = FigReadWriteLockLockForRead();
    if (!(_DWORD)v11)
    {
      if (!*(_BYTE *)(DerivedStorage + 8) && a2 && v8 | v10)
      {
        v12 = v10 ? CFSTR("PathToLocalCopy") : CFSTR("PathToOffline");
        v13 = xmlCopyMediaPlaylistPath(DerivedStorage, v12);
        if (v13)
        {
          v14 = v13;
          if (!a4
            || (v15 = *(_QWORD *)(DerivedStorage + 24),
                cf = 0,
                v25 = 0,
                v23 = 0,
                AllocatorForMedia = FigGetAllocatorForMedia(),
                (v17 = MEMORY[0x19402A59C](AllocatorForMedia, v14, 0, 0, v15)) == 0))
          {
            v21 = 0;
LABEL_23:
            if (!a3 || (_DWORD)v21)
            {
              FigReadWriteLockUnlockForRead();
              CFRelease(v14);
              return v21;
            }
            *a3 = v14;
LABEL_26:
            FigReadWriteLockUnlockForRead();
            return v21;
          }
          v18 = (const void *)v17;
          FigGetAllocatorForMedia();
          v19 = CMByteStreamCreateForFileURL();
          if (!(_DWORD)v19)
          {
            v20 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
            if (!v20)
            {
              v21 = 4294954514;
              goto LABEL_21;
            }
            v19 = v20(cf, 0, &v23);
            if (!(_DWORD)v19)
            {
              FigGetAllocatorForMedia();
              v21 = CMCreateContiguousBlockBufferFromStream();
              if ((_DWORD)v21)
              {
                if (v25)
                  CFRelease(v25);
              }
              else
              {
                *a4 = v25;
                v25 = 0;
              }
              goto LABEL_21;
            }
          }
          v21 = v19;
LABEL_21:
          CFRelease(v18);
          if (cf)
            CFRelease(cf);
          goto LABEL_23;
        }
      }
      v11 = FigSignalErrorAt();
    }
    v21 = v11;
    goto LABEL_26;
  }
  return FigSignalErrorAt();
}

uint64_t HLSPersistentStreamInfo_writeMediaSegment(double a1, double a2, uint64_t a3, OpaqueCMBlockBuffer *a4, const void *a5, uint64_t a6, uint64_t a7, CFTypeRef *a8)
{
  uint64_t DerivedStorage;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v16 = DerivedStorage;
  v17 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v17)
    return v17;
  if (*(_BYTE *)(v16 + 8) || *(_BYTE *)(v16 + 112) != 1)
    v18 = FigSignalErrorAt();
  else
    v18 = writeMediaSegment(v16, a4, a5, a6, a7, 1, a8, a1, a2);
  v19 = v18;
  FigReadWriteLockUnlockForWrite();
  return v19;
}

uint64_t HLSPersistentStreamInfo_writeMediaInitializationSegment(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v12 = DerivedStorage;
  v13 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v13)
    return v13;
  if (*(_BYTE *)(v12 + 112) != 1 || *(_BYTE *)(v12 + 8))
    v14 = FigSignalErrorAt();
  else
    v14 = writeMediaSegment(v12, a2, a3, a4, a5, 0, a6, 0.0, 0.0);
  v15 = v14;
  FigReadWriteLockUnlockForWrite();
  return v15;
}

uint64_t HLSPersistentStreamInfo_removeMediaInitializationSegment(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const __CFDictionary *Value;
  const __CFString *v7;
  const __CFString *v8;
  const __CFAllocator *AllocatorForMedia;
  const __CFURL *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  UInt8 buffer[1024];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v5)
    return v5;
  if (!a2
    || *(_BYTE *)(v4 + 8)
    || (Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 64), a2)) == 0
    || (v7 = (const __CFString *)CFDictionaryGetValue(Value, CFSTR("PATH"))) == 0)
  {
    v14 = FigSignalErrorAt();
    FigReadWriteLockUnlockForWrite();
    return v14;
  }
  v8 = v7;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v10 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(v4 + 24), v8, 0);
  CFURLGetFileSystemRepresentation(v10, 0, buffer, 1024);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v4 + 64), a2);
  v11 = xmlSetMediaInitializationSegmentArray(*(_QWORD *)(v4 + 80), *(const __CFDictionary **)(v4 + 64));
  if (!(_DWORD)v11)
  {
    *(_BYTE *)(v4 + 72) = 1;
    v11 = commitStreamInfo(v4);
    if (!(_DWORD)v11)
      v11 = removefile((const char *)buffer, 0, 0);
  }
  v12 = v11;
  FigReadWriteLockUnlockForWrite();
  if (v10)
    CFRelease(v10);
  return v12;
}

uint64_t HLSPersistentStreamInfo_removeMediaSegment(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const __CFDictionary *Value;
  const __CFString *v7;
  const __CFString *v8;
  const __CFAllocator *AllocatorForMedia;
  const __CFURL *v10;
  const __CFArray *v11;
  CFIndex FirstIndexOfValue;
  uint64_t v13;
  const __CFDictionary *v14;
  const __CFArray *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex v21;
  const void *ValueAtIndex;
  const __CFDictionary *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  CFTypeRef cf;
  UInt8 buffer[1024];
  uint64_t v31;
  CFRange v32;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = FigReadWriteLockLockForWrite();
  if (!(_DWORD)v5)
  {
    if (*(_BYTE *)(v4 + 112) != 1
      || *(_BYTE *)(v4 + 8)
      || !a2
      || (Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 48), a2)) == 0
      || (v7 = (const __CFString *)CFDictionaryGetValue(Value, CFSTR("PATH"))) == 0)
    {
      v28 = FigSignalErrorAt();
      FigReadWriteLockUnlockForWrite();
      return v28;
    }
    v8 = v7;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v10 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(v4 + 24), v8, 0);
    CFURLGetFileSystemRepresentation(v10, 0, buffer, 1024);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v4 + 48), a2);
    v11 = *(const __CFArray **)(v4 + 56);
    v32.length = CFArrayGetCount(v11);
    v32.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v11, v32, a2);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v4 + 56), FirstIndexOfValue);
    v13 = *(_QWORD *)(v4 + 80);
    v14 = *(const __CFDictionary **)(v4 + 48);
    v15 = *(const __CFArray **)(v4 + 56);
    cf = xmlGetMediaSegments(v13);
    if (cf)
      FigXMLNodeRemoveAndClearChild(v13, &cf);
    v16 = FigGetAllocatorForMedia();
    FigXMLNodeGetTag(v13);
    if (FigCFEqual())
      v17 = v13;
    else
      v17 = 0;
    v18 = FigXMLNodeCreateChildNode(v16, v17, CFSTR("MediaSegments"), &cf);
    if (!(_DWORD)v18)
    {
      if (!v15 || (Count = CFArrayGetCount(v15), Count < 1))
      {
LABEL_20:
        v24 = 0;
LABEL_21:
        if (cf)
          CFRelease(cf);
        if (!(_DWORD)v24)
        {
          *(_BYTE *)(v4 + 72) = 1;
          v25 = commitStreamInfo(v4);
          if (!(_DWORD)v25)
          {
            v25 = FigCFURLGetFileStats();
            if (!(_DWORD)v25)
            {
              v25 = removefile((const char *)buffer, 0, 0);
              if (!(_DWORD)v25)
              {
                v26 = *(_QWORD *)(v4 + 192);
                *(_QWORD *)(v4 + 192) = v26;
                v25 = xmlSetMediaBytesStored(*(_QWORD *)(v4 + 80), v26);
              }
            }
          }
          v24 = v25;
        }
        FigReadWriteLockUnlockForWrite();
        if (v10)
          CFRelease(v10);
        return v24;
      }
      v20 = Count;
      v21 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v15, v21);
        v23 = (const __CFDictionary *)CFDictionaryGetValue(v14, ValueAtIndex);
        if (!v23)
          break;
        v18 = addNodeToMediaSegmentList(v23, (uint64_t)cf);
        if ((_DWORD)v18)
          goto LABEL_34;
        if (v20 == ++v21)
          goto LABEL_20;
      }
      v18 = FigSignalErrorAt();
    }
LABEL_34:
    v24 = v18;
    goto LABEL_21;
  }
  return v5;
}

uint64_t HLSPersistentStreamInfo_upgradeForWriting()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v1 = DerivedStorage;
  v2 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v2)
    return v2;
  if (*(_BYTE *)(v1 + 8))
  {
    v3 = FigSignalErrorAt();
  }
  else if (*(_BYTE *)(v1 + 112))
  {
    v3 = 0;
  }
  else
  {
    v3 = lockLockFile(v1);
    if (!(_DWORD)v3)
      *(_BYTE *)(v1 + 112) = 1;
  }
  FigReadWriteLockUnlockForWrite();
  return v3;
}

uint64_t HLSPersistentStreamInfo_downgradeForReading()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = FigReadWriteLockLockForWrite();
    if ((_DWORD)v2)
      return v2;
    if (*(_BYTE *)(v1 + 8))
    {
      v3 = FigSignalErrorAt();
    }
    else
    {
      if (*(_BYTE *)(v1 + 112) != 1)
      {
        v4 = 0;
        goto LABEL_7;
      }
      *(_BYTE *)(v1 + 112) = 0;
      v3 = lockLockFile(v1);
    }
    v4 = v3;
LABEL_7:
    FigReadWriteLockUnlockForWrite();
    return v4;
  }
  return FigSignalErrorAt();
}

uint64_t HLSPersistentStreamInfo_commitStreamInfo()
{
  uint64_t DerivedStorage;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v1 = (_BYTE *)DerivedStorage;
  v2 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v2)
    return v2;
  if (v1[72] == 1)
  {
    if (v1[112] != 1 || v1[8])
      v3 = FigSignalErrorAt();
    else
      v3 = commitStreamInfo((uint64_t)v1);
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  FigReadWriteLockUnlockForWrite();
  return v4;
}

uint64_t HLSPersistentStreamInfo_CopyMediaSegment(uint64_t a1, void *a2, CMBlockBufferRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  v7 = FigReadWriteLockLockForRead();
  if (!(_DWORD)v7)
    v7 = copyMediaSegment(v6, *(CFDictionaryRef *)(v6 + 48), a2, a3);
  v8 = v7;
  FigReadWriteLockUnlockForRead();
  return v8;
}

uint64_t HLSPersistentStreamInfo_CopyMediaInitializationSegment(uint64_t a1, void *a2, CMBlockBufferRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  v7 = FigReadWriteLockLockForRead();
  if (!(_DWORD)v7)
    v7 = copyMediaSegment(v6, *(CFDictionaryRef *)(v6 + 64), a2, a3);
  v8 = v7;
  FigReadWriteLockUnlockForRead();
  return v8;
}

uint64_t writeMediaSegment(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3, uint64_t a4, uint64_t a5, int a6, CFTypeRef *a7, double a8, double a9)
{
  const __CFAllocator *AllocatorForMedia;
  const __CFString *v19;
  uint64_t v20;
  uint64_t BytesFromCFString;
  void *v22;
  const __CFAllocator *v23;
  const __CFAllocator *v24;
  CFURLRef v25;
  CFURLRef v26;
  uint64_t v27;
  size_t DataLength;
  uint64_t v29;
  const __CFAllocator *v30;
  _QWORD *v31;
  CFStringRef v32;
  size_t v33;
  __CFDictionary *DictionaryForSegmentEntry;
  __CFDictionary *v35;
  uint64_t v36;
  CFStringRef *MediaSegments;
  CFTypeRef v38;
  size_t v39;
  __CFDictionary *DictionaryForInitializationSegmentEntry;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ChildNode;
  uint64_t v45;
  uint64_t v47;
  CFTypeRef *v48;
  const __CFURL *v49;
  CFTypeRef cf[2];
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v19 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("(%g)_(%lld)_(%g).frag"), *(_QWORD *)&a9, a4, *(_QWORD *)&a8);
    if (v19)
    {
      v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v25 = CFURLCreateCopyAppendingPathComponent(v24, *(CFURLRef *)(a1 + 24), v19, 0);
      if (v25)
      {
        v26 = v25;
        FigGetAllocatorForMedia();
        v27 = CMByteStreamCreateForFileURL();
        if ((_DWORD)v27)
        {
          v47 = v27;
          v32 = 0;
          goto LABEL_34;
        }
        v49 = v26;
        DataLength = CMBlockBufferGetDataLength(a2);
        v29 = CMByteStreamWriteBlockBuffer();
        if ((_DWORD)v29)
        {
          v47 = v29;
          v32 = 0;
          goto LABEL_33;
        }
        v48 = a7;
        v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
        if (a6)
        {
          v31 = (_QWORD *)(a1 + 128);
          v32 = CFStringCreateWithFormat(v30, 0, CFSTR("%ld"), *(_QWORD *)(a1 + 128));
          if (v32)
          {
            v33 = CMBlockBufferGetDataLength(a2);
            DictionaryForSegmentEntry = createDictionaryForSegmentEntry(a3, a4, a5, v33, v19);
            if (DictionaryForSegmentEntry)
            {
              v35 = DictionaryForSegmentEntry;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v32, DictionaryForSegmentEntry);
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v32);
              v36 = *(_QWORD *)(a1 + 80);
              MediaSegments = xmlGetMediaSegments(v36);
              if (MediaSegments)
              {
                v38 = CFRetain(MediaSegments);
                cf[0] = v38;
                if (v38)
                  goto LABEL_25;
              }
              else
              {
                cf[0] = 0;
              }
              v42 = FigGetAllocatorForMedia();
              FigXMLNodeGetTag(v36);
              if (FigCFEqual())
                v43 = v36;
              else
                v43 = 0;
              ChildNode = FigXMLNodeCreateChildNode(v42, v43, CFSTR("MediaSegments"), cf);
              v38 = cf[0];
              if ((_DWORD)ChildNode)
              {
                v47 = ChildNode;
                if (!cf[0])
                {
LABEL_27:
                  if ((_DWORD)v47)
                  {
LABEL_32:
                    CFRelease(v35);
LABEL_33:
                    v26 = v49;
LABEL_34:
                    CFRelease(v26);
                    goto LABEL_35;
                  }
                  goto LABEL_28;
                }
LABEL_26:
                CFRelease(v38);
                goto LABEL_27;
              }
LABEL_25:
              v47 = addNodeToMediaSegmentList(v35, (uint64_t)v38);
              v38 = cf[0];
              if (!cf[0])
                goto LABEL_27;
              goto LABEL_26;
            }
          }
        }
        else
        {
          v31 = (_QWORD *)(a1 + 136);
          v32 = CFStringCreateWithFormat(v30, 0, CFSTR("%ld"), *(_QWORD *)(a1 + 136));
          if (v32)
          {
            v39 = CMBlockBufferGetDataLength(a2);
            DictionaryForInitializationSegmentEntry = createDictionaryForInitializationSegmentEntry(a3, a4, a5, v39, v19);
            if (DictionaryForInitializationSegmentEntry)
            {
              v35 = DictionaryForInitializationSegmentEntry;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v32, DictionaryForInitializationSegmentEntry);
              v41 = xmlSetMediaInitializationSegmentArray(*(_QWORD *)(a1 + 80), *(const __CFDictionary **)(a1 + 64));
              if ((_DWORD)v41)
              {
LABEL_31:
                v47 = v41;
                goto LABEL_32;
              }
LABEL_28:
              ++*v31;
              if (v48)
                *v48 = CFRetain(v32);
              *(_BYTE *)(a1 + 72) = 1;
              v45 = *(_QWORD *)(a1 + 192) + DataLength;
              *(_QWORD *)(a1 + 192) = v45;
              v41 = xmlSetMediaBytesStored(*(_QWORD *)(a1 + 80), v45);
              goto LABEL_31;
            }
          }
        }
        v47 = FigSignalErrorAt();
        goto LABEL_33;
      }
    }
    v47 = FigSignalErrorAt();
  }
  else
  {
    cf[0] = 0;
    cf[1] = 0;
    v51 = 0;
    v20 = FigDigestSHA1Create();
    FigGetAllocatorForMedia();
    BytesFromCFString = FigCreateBytesFromCFString();
    if (BytesFromCFString)
    {
      v22 = (void *)BytesFromCFString;
      MEMORY[0x19402DD34](v20, BytesFromCFString, 0);
      FigDigestSHA1GetDigest();
      FigGetAllocatorForMedia();
      FigCreateBase32EncodedStringFromBytes();
      v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFAllocatorDeallocate(v23, v22);
    }
    MEMORY[0x19402DD4C](v20);
    v47 = FigSignalErrorAt();
    v19 = 0;
  }
  v32 = 0;
LABEL_35:
  if (v19)
    CFRelease(v19);
  if (v32)
    CFRelease(v32);
  return v47;
}

__CFDictionary *createDictionaryForSegmentEntry(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v9;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, CFSTR("URL"), a1);
    CFDictionaryAddValue(v9, CFSTR("PATH"), a5);
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
    FigCFDictionarySetInt64();
    FigCFDictionarySetInt64();
    FigCFDictionarySetValue();
  }
  return v9;
}

__CFDictionary *createDictionaryForInitializationSegmentEntry(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v9;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, CFSTR("URL"), a1);
    CFDictionaryAddValue(v9, CFSTR("PATH"), a5);
    FigCFDictionarySetInt64();
    FigCFDictionarySetInt64();
    FigCFDictionarySetValue();
  }
  return v9;
}

uint64_t xmlSetMediaInitializationSegmentArray(uint64_t a1, const __CFDictionary *a2)
{
  void *MediaInitializationSegments;
  int v5;
  uint64_t AllocatorForMedia;
  uint64_t ChildNode;
  void *context;

  MediaInitializationSegments = xmlGetMediaInitializationSegments(a1);
  context = MediaInitializationSegments;
  FigXMLNodeGetTag(a1);
  v5 = FigCFEqual();
  if (!a1 || !v5)
  {
    ChildNode = FigSignalErrorAt();
    if (!MediaInitializationSegments)
      return ChildNode;
    goto LABEL_8;
  }
  if (MediaInitializationSegments)
    FigXMLNodeRemoveAndClearChild(a1, (const void **)&context);
  AllocatorForMedia = FigGetAllocatorForMedia();
  ChildNode = FigXMLNodeCreateChildNode(AllocatorForMedia, a1, CFSTR("MediaInitializationSegments"), (CFTypeRef *)&context);
  MediaInitializationSegments = context;
  if (!(_DWORD)ChildNode)
  {
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)applierAddNodeToMediaInitializationSegmentList, context);
    MediaInitializationSegments = context;
  }
  if (MediaInitializationSegments)
LABEL_8:
    CFRelease(MediaInitializationSegments);
  return ChildNode;
}

uint64_t xmlSetMediaBytesStored(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t AllocatorForMedia;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef cf;

  FigXMLNodeGetTag(a1);
  v4 = FigCFEqual();
  if (a1 && v4)
  {
    cf = FigXMLNodeGetChild(a1, CFSTR("MediaBytesStored"));
    if (cf)
      FigXMLNodeRemoveAndClearChild(a1, &cf);
    AllocatorForMedia = FigGetAllocatorForMedia();
    v6 = FigXMLNodeCreateChildNode(AllocatorForMedia, a1, CFSTR("MediaBytesStored"), &cf);
    v7 = cf;
    if (!(_DWORD)v6)
    {
      v6 = FigXMLNodeContentSetInt64((uint64_t)cf, a2 & ~(a2 >> 63));
      v7 = cf;
    }
    if (v7)
      CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v6;
}

CFStringRef *xmlGetMediaSegments(uint64_t a1)
{
  int v2;

  FigXMLNodeGetTag(a1);
  v2 = FigCFEqual();
  if (a1 && v2)
    return FigXMLNodeGetChild(a1, CFSTR("MediaSegments"));
  FigSignalErrorAt();
  return 0;
}

uint64_t addNodeToMediaSegmentList(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t AllocatorForMedia;
  uint64_t v5;
  const void *Value;
  const void *v7;
  uint64_t v8;
  CFTypeRef cf;
  uint64_t v11;
  double v12;

  v11 = 0;
  v12 = 0.0;
  cf = 0;
  AllocatorForMedia = FigGetAllocatorForMedia();
  v5 = FigXMLNodeCreateChildNode(AllocatorForMedia, a2, CFSTR("SEG"), &cf);
  if (!(_DWORD)v5)
  {
    Value = CFDictionaryGetValue(a1, CFSTR("URL"));
    if (!Value
      || (v5 = FigXMLNodeAttributeSetCFString((uint64_t)cf, (uint64_t)CFSTR("URL"), (uint64_t)Value), !(_DWORD)v5))
    {
      v7 = CFDictionaryGetValue(a1, CFSTR("PATH"));
      if (!v7 || (v5 = FigXMLNodeAttributeSetCFString((uint64_t)cf, (uint64_t)CFSTR("PATH"), (uint64_t)v7), !(_DWORD)v5))
      {
        if (!FigCFDictionaryGetInt64IfPresent()
          || (v5 = FigXMLNodeAttributeSetInt64((uint64_t)cf, (uint64_t)CFSTR("SeqNum"), v11), !(_DWORD)v5))
        {
          FigCFDictionaryGetDoubleIfPresent();
          v5 = FigXMLNodeAttributeSetDouble((uint64_t)cf, (uint64_t)CFSTR("Tim"), v12);
          if (!(_DWORD)v5)
          {
            FigCFDictionaryGetDoubleIfPresent();
            v5 = FigXMLNodeAttributeSetDouble((uint64_t)cf, (uint64_t)CFSTR("Dur"), v12);
            if (!(_DWORD)v5)
            {
              FigCFDictionaryGetInt64IfPresent();
              v5 = FigXMLNodeAttributeSetInt64((uint64_t)cf, (uint64_t)CFSTR("Off"), v11);
              if (!(_DWORD)v5)
              {
                FigCFDictionaryGetInt64IfPresent();
                v5 = FigXMLNodeAttributeSetInt64((uint64_t)cf, (uint64_t)CFSTR("Len"), v11);
              }
            }
          }
        }
      }
    }
  }
  v8 = v5;
  if (cf)
    CFRelease(cf);
  return v8;
}

CFStringRef *xmlGetMediaInitializationSegments(uint64_t a1)
{
  int v2;

  FigXMLNodeGetTag(a1);
  v2 = FigCFEqual();
  if (a1 && v2)
    return FigXMLNodeGetChild(a1, CFSTR("MediaInitializationSegments"));
  FigSignalErrorAt();
  return 0;
}

void applierAddNodeToMediaInitializationSegmentList(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t AllocatorForMedia;
  const void *Value;
  const void *v7;
  CFTypeRef cf;
  uint64_t v9;

  cf = 0;
  v9 = 0;
  AllocatorForMedia = FigGetAllocatorForMedia();
  if (!FigXMLNodeCreateChildNode(AllocatorForMedia, a3, CFSTR("ISEG"), &cf))
  {
    Value = CFDictionaryGetValue(a2, CFSTR("URL"));
    if (!Value || !FigXMLNodeAttributeSetCFString((uint64_t)cf, (uint64_t)CFSTR("URL"), (uint64_t)Value))
    {
      v7 = CFDictionaryGetValue(a2, CFSTR("PATH"));
      if ((!v7 || !FigXMLNodeAttributeSetCFString((uint64_t)cf, (uint64_t)CFSTR("PATH"), (uint64_t)v7))
        && (!FigCFDictionaryGetInt64IfPresent()
         || !FigXMLNodeAttributeSetInt64((uint64_t)cf, (uint64_t)CFSTR("SeqNum"), v9)))
      {
        FigCFDictionaryGetInt64IfPresent();
        if (!FigXMLNodeAttributeSetInt64((uint64_t)cf, (uint64_t)CFSTR("Off"), v9))
        {
          FigCFDictionaryGetInt64IfPresent();
          FigXMLNodeAttributeSetInt64((uint64_t)cf, (uint64_t)CFSTR("Len"), v9);
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
}

uint64_t commitStreamInfo(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;
  const __CFURL *v3;
  const __CFURL *v4;
  uint64_t v5;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v3 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(a1 + 24), CFSTR("StreamInfoBoot.xml"), 0);
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  if (*(_BYTE *)(a1 + 72) != 1 || (v5 = FigXMLNodeWriteToFilePath(*(_QWORD *)(a1 + 80), v3), !(_DWORD)v5))
  {
    v5 = 0;
    *(_BYTE *)(a1 + 72) = 0;
  }
  CFRelease(v4);
  return v5;
}

uint64_t copyMediaSegment(uint64_t a1, CFDictionaryRef theDict, void *key, CMBlockBufferRef *a4)
{
  uint64_t v4;
  const __CFDictionary *Value;
  CFURLRef v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFAllocator *AllocatorForMedia;
  uint64_t BlockBuffer;
  const __CFAllocator *v13;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  const __CFAllocator *v16;
  CFStringRef v17;
  CFStringRef v18;
  CMMemoryPoolRef v19;
  __CFDictionary *v20;
  CFTypeRef v21;
  char *v22;
  uint64_t (*v23)(CFTypeRef, uint64_t, _QWORD, char *, uint64_t *);
  CMBlockBufferRef v24;
  uint64_t v26;
  uint64_t v27;
  size_t lengthAtOffsetOut;
  size_t totalLengthOut;
  CMBlockBufferRef theBuffer;
  char *dataPointerOut;
  CFTypeRef cf;

  v4 = 0;
  dataPointerOut = 0;
  cf = 0;
  totalLengthOut = 0;
  theBuffer = 0;
  lengthAtOffsetOut = 0;
  if (!key || !a4)
    goto LABEL_27;
  if (*(_BYTE *)(a1 + 8))
  {
    v4 = FigSignalErrorAt();
    goto LABEL_27;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
  v8 = Value;
  if (!Value)
  {
    v24 = 0;
    goto LABEL_23;
  }
  v26 = 0;
  v27 = 0;
  v9 = (const __CFString *)CFDictionaryGetValue(Value, CFSTR("PATH"));
  if (!v9)
  {
    v4 = FigSignalErrorAt();
    v8 = 0;
    goto LABEL_25;
  }
  v10 = v9;
  FigCFDictionaryGetInt64IfPresent();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v8 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(a1 + 24), v10, 0);
  if (!v8)
  {
LABEL_39:
    BlockBuffer = FigSignalErrorAt();
    goto LABEL_40;
  }
  FigGetAllocatorForMedia();
  BlockBuffer = CMByteStreamCreateForFileURL();
  if ((_DWORD)BlockBuffer)
  {
LABEL_40:
    v4 = BlockBuffer;
    goto LABEL_25;
  }
  if (*(_QWORD *)(a1 + 200))
    goto LABEL_15;
  v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v4 = FigSignalErrorAt();
    if ((_DWORD)v4)
      goto LABEL_25;
LABEL_15:
    BlockBuffer = FigMemoryPoolCreateBlockBuffer();
    if ((_DWORD)BlockBuffer)
      goto LABEL_40;
    BlockBuffer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if ((_DWORD)BlockBuffer)
      goto LABEL_40;
    if (lengthAtOffsetOut == totalLengthOut)
    {
      v22 = dataPointerOut;
      v21 = cf;
      v23 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
      if (!v23)
      {
        v4 = 4294954514;
        goto LABEL_25;
      }
      BlockBuffer = v23(v21, v27, 0, v22, &v26);
      if ((_DWORD)BlockBuffer)
        goto LABEL_40;
      if (v27 == v26)
      {
        v24 = theBuffer;
LABEL_23:
        v4 = 0;
        *a4 = v24;
        theBuffer = 0;
        goto LABEL_25;
      }
    }
    goto LABEL_39;
  }
  v15 = Mutable;
  v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v17 = CFStringCreateWithFormat(v16, 0, CFSTR("[FigHLSPersistentInfoStore %p]"), a1);
  if (v17)
  {
    v18 = v17;
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CA4BA0], v17);
    v19 = CMMemoryPoolCreate(v15);
    *(_QWORD *)(a1 + 200) = v19;
    if (v19)
      v4 = 0;
    else
      v4 = FigSignalErrorAt();
    CFRelease(v15);
    v20 = (__CFDictionary *)v18;
  }
  else
  {
    v4 = FigSignalErrorAt();
    v20 = v15;
  }
  CFRelease(v20);
  if (!(_DWORD)v4)
    goto LABEL_15;
LABEL_25:
  if (v8)
    CFRelease(v8);
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (theBuffer)
    CFRelease(theBuffer);
  return v4;
}

uint64_t FigMediaProcessorCreateForTemporalMetadataFilter(const __CFAllocator *a1, const void *a2, uint64_t a3, __int128 *a4, __int128 *a5, const void *a6, const void *a7, int a8, uint64_t *a9)
{
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef cf;
  CFTypeRef v26;

  cf = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v16 = FigSampleBufferProcessorCreateForTemporalMetadataFilter((uint64_t)a1, a6, &v26);
  if (!(_DWORD)v16)
  {
    v16 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)a1, a2, &cf);
    if (!(_DWORD)v16)
    {
      v21 = *a4;
      v22 = *((_QWORD *)a4 + 2);
      v19 = *a5;
      v20 = *((_QWORD *)a5 + 2);
      v16 = FigSampleBufferConsumerCreateForBufferQueue(a3, (uint64_t)&v21, (uint64_t)&v19, &v24);
      if (!(_DWORD)v16)
      {
        if (!a7)
        {
          v16 = FigActivitySchedulerCreateForNewThread((uint64_t)a1, a8, CFSTR("com.apple.coremedia.mediaprocessor.temporalmetadatafilter"), &v23);
          if ((_DWORD)v16)
            goto LABEL_9;
          goto LABEL_8;
        }
        v16 = FigActivitySchedulerCreateForCFRunLoop(a1, a7, &v23);
        if (!(_DWORD)v16)
LABEL_8:
          v16 = FigMediaProcessorCreate((uint64_t)a1, v26, cf, v24, v23, a9);
      }
    }
  }
LABEL_9:
  v17 = v16;
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  if (v26)
    CFRelease(v26);
  if (v24)
    CFRelease(v24);
  return v17;
}

uint64_t CreatePesPrivateForDTS(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  void *v3;
  void *v4;
  uint64_t result;

  if (a1[6])
  {
    v2 = (void (*)(_QWORD *))a1[107];
    if (v2)
      v2(a1);
    a1[6] = 0;
  }
  v3 = malloc_type_calloc(1uLL, 0x40uLL, 0x1000040CE3128F8uLL);
  if (!v3)
    return 12;
  v4 = v3;
  result = 0;
  a1[105] = PesDTSProcessData;
  a1[106] = PesDTSCleanPrivateData;
  a1[107] = PesDTSDeletePrivateData;
  a1[6] = v4;
  return result;
}

uint64_t PesDTSProcessData(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, char *__src, size_t dataLength, uint64_t a6)
{
  OpaqueCMBlockBuffer *v9;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int128 v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v27;
  char v28;
  size_t v29;
  _BYTE temporaryBlock[4];
  char *returnedPointerOut[3];

  v9 = theBuffer;
  returnedPointerOut[2] = *(char **)MEMORY[0x1E0C80C00];
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(v11 + 48);
  if (v12)
  {
    v25 = a6;
    v13 = (_QWORD *)(v11 + 33);
    while (1)
    {
      v14 = dataLength >= 12 - v12 ? 12 - v12 : dataLength;
      if (__src)
      {
        memcpy((char *)v13 + v12, __src, v14);
        __src += v14;
      }
      else
      {
        v15 = CMBlockBufferCopyDataBytes(theBuffer, offset, v14, (char *)v13 + v12);
        if ((_DWORD)v15)
          goto LABEL_62;
        __src = 0;
        offset += v14;
      }
      v16 = *(_QWORD *)(v11 + 48) + v14;
      *(_QWORD *)(v11 + 48) = v16;
      if (v16 < 0xC)
        return 0;
      dataLength -= v14;
      if (*(_DWORD *)v13 != 25230975)
      {
        v12 = v16 - 1;
        *(_QWORD *)(v11 + 48) = v16 - 1;
        v17 = *(_QWORD *)(v11 + 34);
        v18 = *(_WORD *)(v11 + 42);
        *(_BYTE *)(v11 + 43) = *(_BYTE *)(v11 + 44);
        *(_WORD *)(v11 + 41) = v18;
        *v13 = v17;
        if (v16 < 0xD)
          continue;
      }
      *(_QWORD *)(v11 + 48) = 0;
      SetUpFrame(a1, v11, v11 + 33);
      v15 = PesAddMemoryToFrameMemory(a1, (const void *)(v11 + 33), 0xCuLL, *(_QWORD *)(a1 + 624), &v29, &v28);
      a6 = v25;
      v9 = theBuffer;
      if ((_DWORD)v15)
        goto LABEL_62;
      break;
    }
  }
  if (*(_BYTE *)(a6 + 24))
  {
    v19 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)v11 = *(_OWORD *)a6;
    *(_OWORD *)(v11 + 16) = v19;
  }
  if (dataLength > 0xB || *(_BYTE *)(v11 + 32))
  {
    if (!*(_BYTE *)(v11 + 32))
      goto LABEL_25;
LABEL_22:
    if (__src)
    {
LABEL_28:
      v15 = PesAddMemoryToFrameMemory(a1, __src, dataLength, *(_QWORD *)(a1 + 624), &v29, &v28);
      if ((_DWORD)v15)
        goto LABEL_62;
      v20 = v29;
      __src += v29;
    }
    else
    {
LABEL_23:
      v15 = PesAddBlockBufferToFrameBlockBuffer(a1, v9, offset, dataLength, *(_QWORD *)(a1 + 624), &v29, &v28);
      if ((_DWORD)v15)
        goto LABEL_62;
      __src = 0;
      v20 = v29;
      offset += v29;
    }
    dataLength -= v20;
    if (!v28)
      goto LABEL_48;
    ++*(_DWORD *)(v11 + 60);
    *(_BYTE *)(v11 + 32) = 0;
    if (*(_BYTE *)(a1 + 658) || *(_BYTE *)(a1 + 505))
    {
      v15 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
      if ((_DWORD)v15)
        goto LABEL_62;
    }
    PesCleanAfterFrameEmit(a1);
LABEL_48:
    while (dataLength > 0xB)
    {
      if (*(_BYTE *)(v11 + 32))
        goto LABEL_22;
LABEL_25:
      if (__src && *(_DWORD *)__src == 25230975)
        goto LABEL_27;
      if (v9)
      {
        returnedPointerOut[0] = 0;
        if (!CMBlockBufferAccessDataBytes(v9, offset, 4uLL, temporaryBlock, returnedPointerOut)
          && *(_DWORD *)returnedPointerOut[0] == 25230975)
        {
          if (*(_BYTE *)(v11 + 32))
            goto LABEL_22;
          if (__src)
          {
LABEL_27:
            SetUpFrame(a1, v11, (uint64_t)__src);
            goto LABEL_28;
          }
          v15 = CMBlockBufferAccessDataBytes(v9, offset, 0xCuLL, (void *)(v11 + 33), &v27);
          if (!(_DWORD)v15)
          {
            SetUpFrame(a1, v11, (uint64_t)v27);
            goto LABEL_23;
          }
          goto LABEL_62;
        }
      }
      if (*(_BYTE *)(v11 + 56))
        *(_BYTE *)(v11 + 56) = 0;
      if (__src)
      {
        ++__src;
      }
      else
      {
        ++offset;
        __src = 0;
      }
      --dataLength;
    }
  }
  if (dataLength)
  {
    if (__src)
    {
      v27 = __src;
      goto LABEL_53;
    }
    v15 = CMBlockBufferAccessDataBytes(v9, offset, dataLength, returnedPointerOut, &v27);
    if (!(_DWORD)v15)
    {
      __src = v27;
LABEL_53:
      v21 = 0;
      while (__src[v21] != 127)
      {
        v27 = &__src[++v21];
        if (dataLength == v21)
          return 0;
      }
      *(_BYTE *)(v11 + 33) = 127;
      v22 = dataLength - v21;
      if (dataLength - 1 != v21)
        memcpy((void *)(v11 + 34), &__src[v21 + 1], ~v21 + dataLength);
      *(_QWORD *)(v11 + 48) = v22;
      return 0;
    }
LABEL_62:
    v23 = v15;
    PesErrorHandling(a1, v15);
    return v23;
  }
  return 0;
}

uint64_t PesDTSCleanPrivateData(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 48);
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 60) = 0;
  return result;
}

void PesDTSDeletePrivateData(uint64_t a1)
{
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

__n128 SetUpFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  __n128 result;
  __int128 v7;

  *(_QWORD *)(a1 + 624) = (bswap32(*(_DWORD *)(a3 + 4)) >> 4) & 0x3FFF;
  *(_DWORD *)(a1 + 584) = ((bswap32(*(_DWORD *)(a3 + 4)) >> 13) & 0xFE0) + 32;
  v5 = DTSAudioSampleFrequencies[((unint64_t)*(unsigned int *)(a3 + 8) >> 2) & 0xF];
  if (*(_DWORD *)(a1 + 768) != v5)
    FigMPEG2ParserSetAudioCharacteristics(a1, v5);
  *(_BYTE *)(a2 + 32) = 1;
  *(_BYTE *)(a2 + 56) = 1;
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 496) = v7;
  *(_WORD *)(a2 + 24) = 0;
  return result;
}

uint64_t CreatePesPrivateForH264(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t result;

  if (a1[6])
  {
    v2 = (void (*)(_QWORD *))a1[107];
    if (v2)
      v2(a1);
    a1[6] = 0;
  }
  v3 = malloc_type_zone_calloc((malloc_zone_t *)gFigMPEG2ParserZone, 1uLL, 0x190uLL, 0x10B0040336C4AE3uLL);
  if (!v3)
    return 12;
  v4 = v3;
  H264InitializeSPS_PPS_List(v3);
  a1[105] = H264ProcessData;
  a1[106] = H264CleanPrivateData;
  a1[107] = H264DeletePrivateData;
  a1[108] = H264FlushFrames;
  PesFrameHeadersInit((uint64_t)(a1 + 68), 8uLL);
  a1[6] = v4;
  *(_QWORD *)((char *)a1 + 804) = 0x3E900007530;
  FrameQueueEntryInit((uint64_t)(v4 + 10));
  *((_DWORD *)v4 + 8) = -1;
  *((_DWORD *)v4 + 76) = 5;
  *((_DWORD *)v4 + 61) = 1065353216;
  v4[31] = 0;
  v5 = malloc_type_zone_calloc((malloc_zone_t *)gFigMPEG2ParserZone, 1uLL, 0x300uLL, 0x1010040113C0ABBuLL);
  result = 0;
  v4[42] = v5;
  *((_DWORD *)v4 + 87) = 32;
  return result;
}

uint64_t H264ProcessData(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, unsigned __int8 *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t DataPointer;
  unint64_t v16;
  size_t v17;
  char *dataPointerOut;

  if (a4)
    return H264ProcessDataMemory(a1, a4, a5, (__int128 *)a6);
  v10 = 0;
  if (theBuffer && a5)
  {
    v11 = offset;
    v12 = a5 + offset;
    if (*(_BYTE *)(a6 + 24))
    {
      v13 = *(_QWORD *)(a1 + 48);
      v14 = *(_OWORD *)a6;
      *(_OWORD *)(v13 + 56) = *(_OWORD *)(a6 + 16);
      *(_OWORD *)(v13 + 40) = v14;
    }
    if (v12 <= offset)
    {
      return 0;
    }
    else
    {
      dataPointerOut = 0;
      while (1)
      {
        v17 = 0;
        DataPointer = CMBlockBufferGetDataPointer(theBuffer, v11, &v17, 0, &dataPointerOut);
        if ((_DWORD)DataPointer)
          break;
        v16 = v17;
        if (v12 < v17 + v11)
        {
          v16 = v12 - v11;
          v17 = v12 - v11;
        }
        DataPointer = H264ProcessDataMemory(a1, (unsigned __int8 *)dataPointerOut, v16, (__int128 *)a6);
        if ((_DWORD)DataPointer)
          break;
        v11 += v17;
        if (v11 >= v12)
          return 0;
      }
      v10 = DataPointer;
      PesErrorHandling(a1, DataPointer);
    }
  }
  return v10;
}

uint64_t *H264CleanPrivateData(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 48);
  if (*(int *)(v2 + 344) >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 336);
    do
    {
      CFAllocatorDeallocate(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), *(void **)(v5 + v3));
      v5 = *(_QWORD *)(v2 + 336);
      *(_QWORD *)(v5 + v3) = 0;
      ++v4;
      v3 += 24;
    }
    while (v4 < *(int *)(v2 + 344));
  }
  *(_DWORD *)(v2 + 344) = 0;
  *(_QWORD *)(v2 + 352) = 0;
  *(_DWORD *)(v2 + 32) = -1;
  *(_WORD *)(v2 + 72) = 0;
  v6 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v2 + 260) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v2 + 276) = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_DWORD *)(v2 + 304) = 5;
  v7 = *(void **)(v2 + 312);
  if (v7)
  {
    CFAllocatorDeallocate(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), v7);
    *(_QWORD *)(v2 + 312) = 0;
  }
  *(_QWORD *)(v2 + 320) = 0;
  FrameQueueEntryClean(v2 + 80);
  *(_BYTE *)(v2 + 376) = 0;
  malloc_zone_free((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(v2 + 384));
  *(_QWORD *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  FrameQueueEntryClean(v2 + 80);
  FrameQueueEntryClean(a1 + 456);
  FrameQueueClean(a1 + 728);
  return FrameQueueClean(a1 + 784);
}

void H264DeletePrivateData(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  H264DestroySPS_PPS_List(v2);
  PesFrameHeaderDestroy((_QWORD *)(v2 + 168));
  PesFrameHeaderDestroy((_QWORD *)(a1 + 544));
  H264CleanPrivateData(a1);
  malloc_zone_free((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(v2 + 336));
  malloc_zone_free((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t *H264FlushFrames(uint64_t a1)
{
  H264AddAllocatedBufferToFrame(a1, 0, 1);
  H264EmitBuffer(a1);
  return H264CleanPrivateData(a1);
}

uint64_t H264ProcessDataMemory(uint64_t a1, unsigned __int8 *a2, unint64_t a3, __int128 *a4)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  int v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int v42;
  _OWORD *v43;
  uint64_t v44;
  unint64_t v45;

  v5 = a3;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 312);
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 320);
    v11 = *(_QWORD *)(v8 + 328) - v10;
    v12 = (_BYTE *)(v9 + v10);
    if (!a3)
    {
LABEL_116:
      v39 = 0;
      if (*((_BYTE *)a4 + 24))
      {
        v40 = *a4;
        *(_OWORD *)(v8 + 56) = a4[1];
        *(_OWORD *)(v8 + 40) = v40;
      }
      return v39;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    if (!a3)
      goto LABEL_116;
  }
  v42 = 0;
  v43 = (_OWORD *)(a1 + 480);
  v44 = a1 + 544;
  v13 = a3;
  while (2)
  {
    switch(*(_DWORD *)(v8 + 304))
    {
      case 0:
        v14 = v5;
        v15 = a4;
        v16 = v13 - 3;
        if (v13 <= 3)
        {
          v18 = *a2;
        }
        else
        {
          v17 = *(_DWORD *)a2;
          v18 = *(_DWORD *)a2;
          if (*(_DWORD *)a2 >> 25 && (v17 & 0xFFFFFF) != 0x10000)
          {
            if (v11 <= 3)
            {
              v19 = v13 - 3;
              v20 = VendNewBuffer(a1, (_QWORD *)v8);
              if ((_DWORD)v20)
                goto LABEL_119;
              v11 = *(_QWORD *)(v8 + 328);
              v12 = *(_BYTE **)(v8 + 312);
              v16 = v19;
            }
            *(_DWORD *)v12 = v17;
            v12 += 4;
            v11 -= 4;
            *(_QWORD *)(v8 + 320) += 4;
            a2 += 3;
            v13 = v16;
            goto LABEL_83;
          }
        }
        if (!v18)
        {
          *(_DWORD *)(v8 + 304) = 1;
LABEL_83:
          a4 = v15;
          v5 = v14;
          goto LABEL_113;
        }
        a4 = v15;
        v5 = v14;
        if (!v11)
        {
          v20 = VendNewBuffer(a1, (_QWORD *)v8);
          if ((_DWORD)v20)
            goto LABEL_119;
          v11 = *(_QWORD *)(v8 + 328);
          v12 = *(_BYTE **)(v8 + 312);
          LOBYTE(v18) = *a2;
        }
        *v12++ = v18;
        goto LABEL_73;
      case 1:
        if (!*a2)
        {
          v22 = 2;
          goto LABEL_81;
        }
        if (v11 <= 1)
        {
          v20 = VendNewBuffer(a1, (_QWORD *)v8);
          if ((_DWORD)v20)
            goto LABEL_119;
          v11 = *(_QWORD *)(v8 + 328);
          v12 = *(_BYTE **)(v8 + 312);
        }
        *v12 = 0;
        v12[1] = *a2;
        v12 += 2;
        v11 -= 2;
        v21 = *(_QWORD *)(v8 + 320) + 2;
        goto LABEL_78;
      case 2:
        if (*a2 == 1)
          goto LABEL_24;
        if (!*a2)
        {
          *(_DWORD *)(v8 + 304) = 3;
          goto LABEL_113;
        }
        if (v11 <= 2)
        {
          v20 = VendNewBuffer(a1, (_QWORD *)v8);
          if ((_DWORD)v20)
            goto LABEL_119;
          v11 = *(_QWORD *)(v8 + 328);
          v12 = *(_BYTE **)(v8 + 312);
        }
        *(_WORD *)v12 = 0;
        v12[2] = *a2;
        v12 += 3;
        v11 -= 3;
        v21 = *(_QWORD *)(v8 + 320) + 3;
        goto LABEL_78;
      case 3:
        if (*a2)
        {
          if (*a2 == 1)
          {
LABEL_24:
            v22 = 4;
LABEL_81:
            *(_DWORD *)(v8 + 304) = v22;
          }
          else
          {
            if (v11 <= 3)
            {
              v20 = VendNewBuffer(a1, (_QWORD *)v8);
              if ((_DWORD)v20)
              {
LABEL_119:
                v39 = v20;
                PesErrorHandling(a1, v20);
                return v39;
              }
              v11 = *(_QWORD *)(v8 + 328);
              v12 = *(_BYTE **)(v8 + 312);
            }
            *(_WORD *)v12 = 0;
            v12[2] = 0;
            v12[3] = *a2;
            v12 += 4;
            v11 -= 4;
            v21 = *(_QWORD *)(v8 + 320) + 4;
LABEL_78:
            *(_QWORD *)(v8 + 320) = v21;
            *(_DWORD *)(v8 + 304) = 0;
          }
        }
        else
        {
          if (!v11)
          {
            v20 = VendNewBuffer(a1, (_QWORD *)v8);
            if ((_DWORD)v20)
              goto LABEL_119;
            v11 = *(_QWORD *)(v8 + 328);
            v12 = *(_BYTE **)(v8 + 312);
          }
          *v12++ = 0;
LABEL_73:
          --v11;
          ++*(_QWORD *)(v8 + 320);
        }
LABEL_113:
        ++a2;
        if (--v13)
          continue;
        if (!v42)
          goto LABEL_116;
        v39 = 0;
        *(_BYTE *)(v8 + 64) = 0;
        break;
      case 4:
        v23 = *a2;
        if (*(_BYTE *)(v8 + 376))
        {
          v24 = *(_QWORD *)(v8 + 312);
          if (v24)
          {
            v25 = *(_QWORD *)(v8 + 320);
            if (v25)
            {
              if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 352) + v25 - *(_QWORD *)(v8 + 368)) >= 0x31)
              {
                v26 = *(_QWORD *)(v8 + 360);
                v45 = v25 - v26;
                H264RemoveEmulation3Byte((_DWORD *)(v24 + v26), &v45);
                v27 = v45 + *(_QWORD *)(v8 + 360);
                *(_QWORD *)(v8 + 320) = v27;
                v12 = (_BYTE *)(*(_QWORD *)(v8 + 312) + v27);
              }
            }
          }
          *(_BYTE *)(v8 + 376) = 0;
        }
        v28 = v23 & 0x1F;
        switch(v28)
        {
          case 1:
            goto LABEL_85;
          case 5:
            *(_DWORD *)(a1 + 536) |= 0x10u;
LABEL_85:
            if ((*a2 & 0x60) != 0)
              *(_DWORD *)(a1 + 536) |= 0x100u;
            v33 = *(_DWORD *)(a1 + 56);
            if (v33 != 2053207651 && v33 != 1700886115)
              goto LABEL_107;
            if (v11 > 0x30)
              goto LABEL_92;
            v20 = VendNewBuffer(a1, (_QWORD *)v8);
            if ((_DWORD)v20)
              goto LABEL_119;
            v11 = *(_QWORD *)(v8 + 328);
            v12 = *(_BYTE **)(v8 + 312);
LABEL_92:
            *(_BYTE *)(v8 + 376) = 1;
            goto LABEL_107;
          case 6:
            *(_BYTE *)(v8 + 73) = 1;
            goto LABEL_107;
          case 7:
          case 8:
            *(_DWORD *)(a1 + 536) |= 2u;
            goto LABEL_107;
          case 9:
            if (*(_QWORD *)(v8 + 352) || *(_QWORD *)(v8 + 320))
            {
              H264AddAllocatedBufferToFrame(a1, 0, 1);
              v20 = H264EmitBuffer(a1);
              v11 = 0;
              if ((_DWORD)v20)
                goto LABEL_119;
            }
            v34 = 3;
            if (*(_BYTE *)(v8 + 72))
              v34 = 4;
            if (v5 - v13 >= v34 && *((_BYTE *)a4 + 24) && *((_BYTE *)a4 + 25))
            {
              if (v42)
                goto LABEL_106;
              v42 = 1;
              v35 = a4;
            }
            else
            {
              v35 = (_OWORD *)(v8 + 40);
              if (!*(_BYTE *)(v8 + 64))
                goto LABEL_106;
            }
            v36 = v35[1];
            *v43 = *v35;
            v43[1] = v36;
LABEL_106:
            *(_WORD *)(v8 + 64) = 0;
            *(_BYTE *)(v8 + 66) = 0;
LABEL_107:
            if (v11 > 4)
              goto LABEL_110;
            v20 = VendNewBuffer(a1, (_QWORD *)v8);
            if ((_DWORD)v20)
              goto LABEL_119;
            v11 = *(_QWORD *)(v8 + 328);
            v12 = *(_BYTE **)(v8 + 312);
LABEL_110:
            v37 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 352) + *(_QWORD *)(v8 + 320);
            PesFrameHeaderAddOffset(v44, v37, v28);
            v38 = *(_QWORD *)(v8 + 320) + 4;
            *(_QWORD *)(v8 + 320) = v38;
            if (*(_BYTE *)(v8 + 376))
            {
              *(_QWORD *)(v8 + 360) = v38;
              *(_QWORD *)(v8 + 368) = v37 + 4;
            }
            v12[4] = *a2;
            v12 += 5;
            ++*(_QWORD *)(v8 + 320);
            v11 -= 5;
            *(_DWORD *)(v8 + 304) = 0;
            break;
          default:
            goto LABEL_107;
        }
        goto LABEL_113;
      case 5:
        if (*a2)
          goto LABEL_113;
        v22 = 6;
        goto LABEL_81;
      case 6:
        if (*a2)
          goto LABEL_57;
        v22 = 7;
        goto LABEL_81;
      case 7:
        if (*a2 == 1)
        {
          *(_BYTE *)(v8 + 72) = 0;
LABEL_80:
          v22 = 9;
        }
        else
        {
          if (*a2)
            goto LABEL_57;
          v22 = 8;
        }
        goto LABEL_81;
      case 8:
        if (!*a2)
          goto LABEL_113;
        if (*a2 != 1)
          goto LABEL_57;
        *(_BYTE *)(v8 + 72) = 1;
        goto LABEL_80;
      case 9:
        v29 = *a2;
        v30 = 3;
        if (*(_BYTE *)(v8 + 72))
          v30 = 4;
        if (v5 - v13 >= v30 && *((_BYTE *)a4 + 24) && *((_BYTE *)a4 + 25))
        {
          if (v42)
            goto LABEL_52;
          v42 = 1;
          v31 = a4;
        }
        else
        {
          v31 = (_OWORD *)(v8 + 40);
          if (!*(_BYTE *)(v8 + 64))
            goto LABEL_52;
        }
        v32 = v31[1];
        *v43 = *v31;
        v43[1] = v32;
LABEL_52:
        *(_WORD *)(v8 + 64) = 0;
        *(_BYTE *)(v8 + 66) = 0;
        if ((v29 & 0x1F) != 9)
        {
LABEL_57:
          v22 = 5;
          goto LABEL_81;
        }
        if (v11 <= 4)
        {
          v20 = VendNewBuffer(a1, (_QWORD *)v8);
          if ((_DWORD)v20)
            goto LABEL_119;
          v11 = *(_QWORD *)(v8 + 328);
          v12 = *(_BYTE **)(v8 + 312);
        }
        PesFrameHeaderAddOffset(v44, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 352) + *(_QWORD *)(v8 + 320), 9);
        v12[4] = *a2;
        v12 += 5;
        v11 -= 5;
        v21 = *(_QWORD *)(v8 + 320) + 5;
        goto LABEL_78;
      default:
        goto LABEL_113;
    }
    return v39;
  }
}

uint64_t VendNewBuffer(uint64_t a1, _QWORD *a2)
{
  void *v4;
  size_t v5;
  uint64_t result;
  size_t v7;

  v7 = 0;
  H264AddAllocatedBufferToFrame(a1, (uint64_t *)&v7, 0);
  v4 = CFAllocatorAllocate(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), 4096, 0);
  a2[39] = v4;
  if (!v4)
    return FigSignalErrorAt();
  v5 = v7;
  a2[40] = v7;
  bzero(v4, v5);
  result = 0;
  a2[41] = 4096;
  a2[45] = 0;
  return result;
}

_DWORD *H264RemoveEmulation3Byte(_DWORD *result, unint64_t *a2)
{
  unint64_t v2;
  _DWORD *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  char *v14;

  v2 = *a2;
  if (*a2 >= 4)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = *a2;
    do
    {
      if ((*v4 & 0xFFFFFF) == 0x30000)
      {
        v8 = (char *)v4 + 2;
        if (v5)
        {
          v9 = &v8[~(unint64_t)v5];
          if (v6)
            v10 = v6;
          else
            v10 = v5;
          result = memmove(v10, v5 + 1, (size_t)&v8[~(unint64_t)v5]);
          v6 = &v9[(_QWORD)v10];
          v2 = *a2;
        }
        v4 = (_DWORD *)((char *)v4 + 3);
        *a2 = --v2;
        v11 = -3;
        v5 = v8;
      }
      else
      {
        v12 = *v4 >> 26;
        v13 = v12 == 0;
        if (v12)
          v11 = -4;
        else
          v11 = -1;
        if (v13)
          v4 = (_DWORD *)((char *)v4 + 1);
        else
          ++v4;
      }
      v7 += v11;
    }
    while (v7 > 3);
    if (v5)
    {
      if (v6)
        v14 = v6;
      else
        v14 = v5;
      return memmove(v14, v5 + 1, (size_t)v4 + v7 + ~(unint64_t)v5);
    }
  }
  return result;
}

void H264AddAllocatedBufferToFrame(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const double *v16;
  uint64_t v17;
  float64x2_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 312);
  if (!v5 || (v6 = *(_QWORD *)(v4 + 320)) == 0)
  {
    v10 = 0;
    if (!a2)
      return;
    goto LABEL_10;
  }
  if (*(_BYTE *)(v4 + 376))
  {
    v9 = v6 - 1;
    if (*(_BYTE *)(v5 + v6 - 1))
    {
      if (*(_BYTE *)(v5 + v6 - 1) != 3 || *(_BYTE *)(v6 + v5 - 2) || *(_BYTE *)(v6 + v5 - 3))
      {
        v10 = 0;
      }
      else
      {
        v10 = 0;
        *(_QWORD *)(v4 + 320) = v9;
        --v6;
      }
    }
    else
    {
      *(_QWORD *)(v4 + 320) = v9;
      v11 = *(unsigned __int8 *)(v5 + v6 - 2);
      if (*(_BYTE *)(v5 + v6 - 2))
        --v6;
      else
        v6 -= 2;
      *(_QWORD *)(v4 + 320) = v6;
      if (v11)
        v10 = 1;
      else
        v10 = 2;
    }
    v12 = *(_QWORD *)(v4 + 360);
    v22 = v6 - v12;
    H264RemoveEmulation3Byte((_DWORD *)(v5 + v12), &v22);
    v6 = v22 + *(_QWORD *)(v4 + 360);
    *(_QWORD *)(v4 + 320) = v6;
  }
  else
  {
    v10 = 0;
  }
  v13 = *(int *)(v4 + 348);
  if (*(_DWORD *)(v4 + 344) >= (int)v13)
  {
    v14 = v13 + 4;
    *(_DWORD *)(v4 + 348) = v14;
    *(_QWORD *)(v4 + 336) = malloc_type_zone_realloc((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(v4 + 336), 24 * v14, 0x1010040113C0ABBuLL);
    v6 = *(_QWORD *)(v4 + 320);
  }
  if (a3 && v6 <= 0x800)
  {
    v15 = CFAllocatorAllocate(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), v6, 0);
    memcpy(v15, *(const void **)(v4 + 312), *(_QWORD *)(v4 + 320));
    v17 = *(_QWORD *)(v4 + 336) + 24 * *(int *)(v4 + 344);
    *(_QWORD *)v17 = v15;
    v16 = (const double *)(v4 + 320);
    v18 = vld1q_dup_f64(v16);
    *(float64x2_t *)(v17 + 8) = v18;
    CFAllocatorDeallocate(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), *(void **)(v4 + 312));
    v6 = *(_QWORD *)(v4 + 320);
    v19 = *(_DWORD *)(v4 + 344);
  }
  else
  {
    v19 = *(_DWORD *)(v4 + 344);
    v20 = *(_QWORD *)(v4 + 328);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 336) + 24 * v19);
    *v21 = *(_QWORD *)(v4 + 312);
    v21[1] = v6;
    v21[2] = v20;
  }
  *(_QWORD *)(v4 + 352) += v6;
  *(_DWORD *)(v4 + 344) = v19 + 1;
  *(_QWORD *)(v4 + 312) = 0;
  *(_QWORD *)(v4 + 320) = 0;
  if (a2)
LABEL_10:
    *a2 = v10;
}

uint64_t H264EmitBuffer(uint64_t a1)
{
  uint64_t v2;
  signed int v3;
  uint64_t Empty;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  void *v27;
  void *v28;
  char *v29;
  void *v30;
  uint64_t v31;
  unsigned int SPS_VUI_Framerate;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  CMTimeValue v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  CMTimeValue v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  CMTimeValue value;
  CMTimeValue v69;
  uint64_t v70;
  uint64_t SPSIsInterlaced;
  void *v73;
  void *__src;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  CMTimeValue v78;
  int v79;
  int v80;
  const __CFAllocator *v81;
  const __CFAllocator *allocator;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  CMBlockBufferRef *v92;
  uint64_t v93;
  unsigned __int8 v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  unsigned __int8 v99;
  __int16 v100;
  int v101;
  char *returnedPointerOut;
  CMTime temporaryBlock;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v101 = 0;
  v100 = 0;
  v99 = 0;
  v98 = 0;
  v3 = *(_DWORD *)(v2 + 344);
  if (v3 < 1)
    goto LABEL_187;
  v92 = (CMBlockBufferRef *)(a1 + 512);
  Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), v3, 0, (CMBlockBufferRef *)(a1 + 512));
  if ((_DWORD)Empty)
    goto LABEL_209;
  if (*(int *)(v2 + 344) >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v2 + 336);
    while (1)
    {
      Empty = CMBlockBufferAppendMemoryBlock(*(CMBlockBufferRef *)(a1 + 512), *(void **)(v7 + v5), *(_QWORD *)(v7 + v5 + 16), *(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), 0, 0, *(_QWORD *)(v7 + v5 + 8), 0);
      if ((_DWORD)Empty)
        break;
      v7 = *(_QWORD *)(v2 + 336);
      *(_QWORD *)(v7 + v5) = 0;
      ++v6;
      v5 += 24;
      if (v6 >= *(int *)(v2 + 344))
        goto LABEL_7;
    }
LABEL_209:
    SPSIsInterlaced = Empty;
    goto LABEL_205;
  }
LABEL_7:
  *(_DWORD *)(v2 + 344) = 0;
  *(_QWORD *)(v2 + 352) = 0;
  *(_QWORD *)(a1 + 616) = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 512));
  Empty = (uint64_t)PesFrameHeaderFinalizeFrame((_QWORD *)a1, 1);
  if ((_DWORD)Empty)
    goto LABEL_209;
  Empty = PesCreateBlockBufferFromFrameMemory(a1);
  if ((_DWORD)Empty)
    goto LABEL_209;
  v84 = a1 + 456;
  if (!*(_BYTE *)(a1 + 504))
    *(_WORD *)(a1 + 505) = 0;
  v91 = 0;
  v90 = 0;
  v87 = 0;
  v8 = 0;
  v85 = v2 + 80;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
  v83 = (uint64_t *)(a1 + 72);
  v81 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v86 = -1;
  while (2)
  {
    if (v8 >= *(_QWORD *)(a1 + 544))
    {
LABEL_179:
      if ((_BYTE)v91)
        *(_DWORD *)(a1 + 536) |= 8u;
      if (v87)
      {
        FigMPEG2VideoCombineFields(a1, v85, v84);
        H264CalculateFrameRate((CMTime *)a1, v2, v85);
        SPSIsInterlaced = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, v85);
        FrameQueueEntryClean(v85);
        goto LABEL_205;
      }
      if (!(_BYTE)v90)
      {
        v66 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48) == 192 && v86 == 2;
        if (v66 && (*(_BYTE *)(a1 + 507) || !*(_BYTE *)(a1 + 506)) && *(_QWORD *)(v2 + 248))
        {
          memset(&temporaryBlock, 0, sizeof(temporaryBlock));
          CMTimeMakeWithSeconds(&temporaryBlock, *(float *)(v2 + 244) / *(float *)(v2 + 236), 90000);
          v67 = *(_QWORD *)(v2 + 248);
          value = temporaryBlock.value;
          v69 = temporaryBlock.value + v67;
          *(_QWORD *)(a1 + 488) = temporaryBlock.value + v67;
          *(_BYTE *)(a1 + 506) = 1;
          if (!*(_BYTE *)(a1 + 505) || (v70 = *(_QWORD *)(a1 + 480), v69 == v70) || v67 >= v70 || v69 <= v70 - value)
            *(_BYTE *)(a1 + 504) = 0;
          else
            *(_QWORD *)(a1 + 488) = v70;
        }
        H264CalculateFrameRate((CMTime *)a1, v2, v84);
        *(_BYTE *)(a1 + 600) = 0;
        SPSIsInterlaced = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, v84);
        *(_QWORD *)(v2 + 248) = *(_QWORD *)(a1 + 488);
        goto LABEL_205;
      }
      FrameQueueMove(v85, v84);
LABEL_187:
      SPSIsInterlaced = 0;
      goto LABEL_205;
    }
    v9 = 0;
    v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 576) + v8);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v8);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * v8);
    v13 = v12 - 4;
    switch(*(_BYTE *)(*(_QWORD *)(a1 + 576) + v8))
    {
      case 1:
        goto LABEL_15;
      case 5:
        v9 = 1;
LABEL_15:
        returnedPointerOut = 0;
        if (v13 >= 0x20)
          v13 = 32;
        v97 = 0;
        if (v10 == 1 && HIDWORD(v91) == 0)
          v15 = 1;
        else
          v15 = v91;
        if (HIDWORD(v91) || !*(_BYTE *)(v2 + 232))
        {
          if (v10 != 1)
            goto LABEL_169;
          Empty = CMBlockBufferAccessDataBytes(*v92, v11 + 4, v13, &temporaryBlock, &returnedPointerOut);
          if ((_DWORD)Empty)
            goto LABEL_209;
          Empty = FigH264Bridge_GetPPSSequenceIDFromSlice();
          if ((_DWORD)Empty)
            goto LABEL_209;
          goto LABEL_163;
        }
        v96 = 0;
        v95 = 0;
        v94 = 0;
        v93 = 0;
        Empty = CMBlockBufferAccessDataBytes(*v92, v11 + 4, v13, &temporaryBlock, &returnedPointerOut);
        if ((_DWORD)Empty)
          goto LABEL_209;
        Empty = FigH264Bridge_GetPPSSequenceIDFromSlice();
        if ((_DWORD)Empty)
          goto LABEL_209;
        Empty = H264GetSPSFromPPSId((uint64_t *)v2, SHIDWORD(v96), &v93, 0);
        if ((_DWORD)Empty)
          goto LABEL_209;
        Empty = FigH264Bridge_GetInterlaceTypeFromSlice();
        if ((_DWORD)Empty)
          goto LABEL_209;
        v16 = v96;
        if ((_DWORD)v96 == 3)
        {
LABEL_208:
          Empty = FigSignalErrorAt();
          goto LABEL_209;
        }
        v17 = v95;
        *(_DWORD *)(a1 + 592) = v95;
        *(_DWORD *)(a1 + 588) = v16;
        v18 = v94;
        *(_BYTE *)(a1 + 596) = v94;
        v19 = *(_DWORD *)(a1 + 536) & 0xFFFFF9FF;
        *(_DWORD *)(a1 + 536) = v19;
        switch(v16)
        {
          case 0:
            if (*(_QWORD *)(v2 + 136))
              FrameQueueEntryClean(v85);
            goto LABEL_162;
          case 1:
            v20 = 512;
            break;
          case 2:
            v20 = 1024;
            break;
          default:
            goto LABEL_154;
        }
        *(_DWORD *)(a1 + 536) = v19 | v20;
LABEL_154:
        if (*(_QWORD *)(v2 + 136))
        {
          if (*(unsigned __int8 *)(v2 + 220) == v18 && *(_DWORD *)(v2 + 216) == v17 && *(_DWORD *)(v2 + 212) != v16)
          {
            v87 = 1;
            goto LABEL_162;
          }
          FrameQueueEntryClean(v85);
        }
        v64 = v90;
        if (!v87)
          v64 = 1;
        v90 = v64;
LABEL_162:
        if (v10 != 1)
          goto LABEL_169;
LABEL_163:
        if (v97 == 2)
        {
          LODWORD(v91) = v15;
        }
        else
        {
          LODWORD(v91) = v97 == 7 && HIDWORD(v91) == 0;
          v9 = 1;
        }
LABEL_169:
        HIDWORD(v91) = 1;
        goto LABEL_178;
      case 6:
        v21 = v100;
        v22 = v99;
        v23 = v98;
        v24 = *(_QWORD *)(a1 + 48);
        v25 = v12 - 5;
        temporaryBlock.value = v12 - 5;
        if ((unint64_t)(v12 - 5) < 2)
          goto LABEL_183;
        if (v25 <= *(_QWORD *)(v24 + 392))
        {
          v28 = *(void **)(v24 + 384);
        }
        else
        {
          if (v25 <= 0x200)
            v26 = 512;
          else
            v26 = v12 - 5;
          *(_QWORD *)(v24 + 392) = v26;
          v27 = malloc_type_zone_realloc((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(v24 + 384), v26, 0x23295E69uLL);
          v28 = v27;
          *(_QWORD *)(v24 + 384) = v27;
          if (!v27)
          {
            SPSIsInterlaced = 4294954510;
            goto LABEL_184;
          }
        }
        v88 = v24;
        v89 = v21;
        v33 = CMBlockBufferCopyDataBytes(*v92, v11 + 5, v25, v28);
        if ((_DWORD)v33)
        {
LABEL_206:
          SPSIsInterlaced = v33;
          v27 = 0;
          goto LABEL_184;
        }
        H264RemoveEmulation3Byte(*(_DWORD **)(v24 + 384), (unint64_t *)&temporaryBlock);
        v34 = temporaryBlock.value;
        v35 = v89;
        if (temporaryBlock.value < 3uLL)
        {
LABEL_149:
          v9 = 0;
LABEL_178:
          ++v8;
          if (v9)
            goto LABEL_179;
          continue;
        }
        v36 = 0;
        v37 = *(_QWORD *)(v24 + 384);
        v38 = v23 + 7;
        if (v23 >= 0)
          v38 = v23;
        v39 = 255 * LODWORD(temporaryBlock.value);
        v40 = 255 * LODWORD(temporaryBlock.value) - 255;
        v41 = temporaryBlock.value - 1;
        if (v22)
          v42 = v23 - (v38 & 0xFFFFFFF8);
        else
          v42 = 0;
        v43 = (uint64_t)v38 >> 3;
        if (v22)
          v44 = v43;
        else
          v44 = 0;
        v45 = 8 - v42;
        v46 = temporaryBlock.value - 2;
        while (1)
        {
          if (v36 >= v34)
          {
            v48 = 0;
          }
          else
          {
            v47 = 0;
            v48 = -255 * v36 + v39;
            while (1)
            {
              v49 = *(unsigned __int8 *)(v37 + v36);
              if (v49 != 255)
                break;
              ++v36;
              v47 -= 255;
              if (v34 == v36)
              {
                v36 = v34;
                goto LABEL_80;
              }
            }
            v48 = v49 - v47;
          }
LABEL_80:
          if (v36 + 1 >= v34)
          {
            v52 = 0;
          }
          else
          {
            v50 = *(unsigned __int8 *)(v37 + v36 + 1);
            if (v50 == 255)
            {
              v51 = 0;
              v52 = v40 - 255 * v36;
              while (v46 != v36)
              {
                v51 += 255;
                v50 = *(unsigned __int8 *)(v37 + 2 + v36++);
                if (v50 != 255)
                  goto LABEL_88;
              }
              v36 = v41;
            }
            else
            {
              v51 = 0;
LABEL_88:
              v52 = v51 + v50;
            }
          }
          v53 = v36 + 2;
          v54 = v36 + 2 + v52;
          if (v54 >= v34)
          {
LABEL_183:
            v27 = 0;
            SPSIsInterlaced = 4294954325;
            goto LABEL_184;
          }
          if (v48 != 1)
            break;
          if (!v35 || v53 + v44 + 3 > v34)
            goto LABEL_146;
          v61 = ((*(unsigned __int8 *)(v53 + v44 + v37 + 2) >> v42) | (*(unsigned __int8 *)(v53 + v44 + v37 + 1) << v45)) & 0xF;
          if (v61 == 8)
          {
            v62 = 1077936128;
            goto LABEL_145;
          }
          if (v61 == 7)
          {
            v62 = 0x40000000;
LABEL_145:
            *(_DWORD *)(v24 + 244) = v62;
          }
LABEL_146:
          v36 = v54;
          if (v34 <= v54 + 2)
            goto LABEL_149;
        }
        if (v48 == 5)
        {
          if (v52 >= 0x15
            && *(_BYTE *)(v37 + v53) == 23
            && *(unsigned __int8 *)(v36 + v37 + 3) == 238
            && *(unsigned __int8 *)(v36 + v37 + 4) == 140
            && *(_BYTE *)(v36 + v37 + 5) == 96
            && *(unsigned __int8 *)(v36 + v37 + 6) == 248
            && *(_BYTE *)(v36 + v37 + 7) == 77
            && *(_BYTE *)(v36 + v37 + 8) == 17
            && *(unsigned __int8 *)(v36 + v37 + 9) == 217
            && *(unsigned __int8 *)(v36 + v37 + 10) == 140
            && *(unsigned __int8 *)(v36 + v37 + 11) == 214
            && *(_BYTE *)(v36 + v37 + 12) == 8
            && !*(_BYTE *)(v36 + v37 + 13)
            && *(_BYTE *)(v36 + v37 + 14) == 32
            && *(_BYTE *)(v36 + v37 + 15) == 12
            && *(unsigned __int8 *)(v36 + v37 + 16) == 154
            && *(_BYTE *)(v36 + v37 + 17) == 102
            && *(_BYTE *)(v36 + v37 + 18) == 77
            && *(_BYTE *)(v36 + v37 + 19) == 68
            && *(_BYTE *)(v36 + v37 + 20) == 80
            && *(_BYTE *)(v36 + v37 + 21) == 77)
          {
            v63 = *(unsigned __int8 *)(v36 + v37 + 22);
            if (*(_BYTE *)(v36 + v37 + 22))
            {
              while (1)
              {
                if (v36 + 28 > v34)
                  goto LABEL_149;
                if (*(_BYTE *)(v37 + v36 + 23) == 19)
                  break;
                v36 += 5;
                --v63;
                v35 = v89;
                v24 = v88;
                if (!v63)
                  goto LABEL_146;
              }
              *(_DWORD *)(a1 + 604) = bswap32(*(_DWORD *)(v37 + v36 + 24));
              *(_DWORD *)(a1 + 536) |= 0x2000u;
              v35 = v89;
              v24 = v88;
            }
          }
          goto LABEL_146;
        }
        if (v48 != 4)
          goto LABEL_146;
        if (v52 < 0xA)
          goto LABEL_146;
        if (*(unsigned __int8 *)(v37 + v53) != 181)
          goto LABEL_146;
        if (*(_BYTE *)(v36 + v37 + 3))
          goto LABEL_146;
        if (*(_BYTE *)(v36 + v37 + 4) != 49)
          goto LABEL_146;
        v55 = (_BYTE *)(v36 + v37 + 5);
        if (*v55 != 71
          || *(_BYTE *)(v36 + v37 + 6) != 65
          || *(_BYTE *)(v36 + v37 + 7) != 57
          || *(_BYTE *)(v36 + v37 + 8) != 52
          || *(_BYTE *)(v36 + v37 + 9) != 3)
        {
          goto LABEL_146;
        }
        v56 = *v83;
        v79 = v40;
        v80 = v39;
        v78 = v41;
        v77 = v42;
        v76 = v44;
        v75 = v45;
        __src = v55;
        if (!*v83)
        {
          v33 = AddPes(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, 0, 1635017571, 0, 0, *(_DWORD *)(a1 + 64) << 8, 0xFFFF, 1, v83);
          if ((_DWORD)v33)
            goto LABEL_206;
          v56 = *v83;
          v35 = v89;
          v24 = v88;
          v40 = v79;
          v39 = v80;
          v41 = v78;
          v42 = v77;
          v44 = v76;
          v45 = v75;
          if (!*v83)
            goto LABEL_146;
        }
        if (!*(_QWORD *)(v56 + 84))
          goto LABEL_146;
        returnedPointerOut = 0;
        v57 = v52 - 3;
        v58 = CFAllocatorAllocate(allocator, v57, 0);
        v73 = v58;
        if (!v58)
        {
          SPSIsInterlaced = 4294954510;
          goto LABEL_213;
        }
        v59 = v58;
        memcpy(v58, __src, v57);
        v60 = CMBlockBufferCreateWithMemoryBlock(v81, v59, v57, allocator, 0, 0, v57, 0, (CMBlockBufferRef *)&returnedPointerOut);
        if (!(_DWORD)v60)
        {
          SPSIsInterlaced = CloseCaptionQueueAdd(a1 + 520, returnedPointerOut);
          if (returnedPointerOut)
            CFRelease(returnedPointerOut);
          if ((_DWORD)SPSIsInterlaced)
            goto LABEL_213;
          v35 = v89;
          v24 = v88;
          v40 = v79;
          v39 = v80;
          v41 = v78;
          v42 = v77;
          v44 = v76;
          v45 = v75;
          goto LABEL_146;
        }
        SPSIsInterlaced = v60;
LABEL_213:
        v27 = v73;
LABEL_184:
        free(v27);
LABEL_205:
        PesCleanAfterFrameEmit(a1);
        return SPSIsInterlaced;
      case 7:
        if (*(_BYTE *)(v2 + 232))
          goto LABEL_176;
        LOBYTE(v93) = 0;
        returnedPointerOut = 0;
        temporaryBlock.value = 0;
        Empty = CMBlockBufferGetDataPointer(*v92, v11 + 4, (size_t *)&returnedPointerOut, 0, (char **)&temporaryBlock);
        if ((_DWORD)Empty)
          goto LABEL_209;
        v29 = returnedPointerOut;
        if ((unint64_t)returnedPointerOut >= v13)
          goto LABEL_46;
        v30 = malloc_type_malloc(v13, 0xA4C921E8uLL);
        temporaryBlock.value = (CMTimeValue)v30;
        if (!v30)
          goto LABEL_208;
        v31 = CMBlockBufferCopyDataBytes(*v92, v11 + 4, v13, v30);
        if ((_DWORD)v31)
        {
          SPSIsInterlaced = v31;
          v27 = (void *)temporaryBlock.value;
          goto LABEL_184;
        }
LABEL_46:
        SPSIsInterlaced = FigH264Bridge_GetSPSIsInterlaced();
        if (!(_DWORD)SPSIsInterlaced)
        {
          SPS_VUI_Framerate = FigH264Bridge_GetSPS_VUI_Framerate();
          if (SPS_VUI_Framerate)
          {
            if (SPS_VUI_Framerate == -12712)
              SPSIsInterlaced = 0;
            else
              SPSIsInterlaced = SPS_VUI_Framerate;
          }
          else
          {
            SPSIsInterlaced = 0;
            *(_DWORD *)(v2 + 236) = v101;
            *(_BYTE *)(v2 + 240) = HIBYTE(v100);
          }
        }
        if ((unint64_t)v29 < v13)
          free((void *)temporaryBlock.value);
        if ((_DWORD)SPSIsInterlaced)
          goto LABEL_205;
        v65 = v93;
        *(_BYTE *)(v2 + 232) = v93;
        if (!v65)
          goto LABEL_177;
LABEL_176:
        Empty = H264ParamSetAddSPS(v2, *v92, v11 + 4, v13, 0, 0);
        if ((_DWORD)Empty)
          goto LABEL_209;
LABEL_177:
        v9 = 0;
        goto LABEL_178;
      case 8:
        if (*(_BYTE *)(v2 + 232))
        {
          Empty = H264ParamSetAddPPS(v2, *v92, v11 + 4, v13, 0);
          if ((_DWORD)Empty)
            goto LABEL_209;
        }
        goto LABEL_177;
      case 9:
        LOBYTE(temporaryBlock.value) = 0;
        if (v13 < 2)
        {
          SPSIsInterlaced = 4294954320;
          goto LABEL_205;
        }
        Empty = CMBlockBufferCopyDataBytes(*v92, v11 + 5, 1uLL, &temporaryBlock);
        if ((_DWORD)Empty)
          goto LABEL_209;
        v9 = 0;
        v86 = LOBYTE(temporaryBlock.value) >> 5;
        goto LABEL_178;
      default:
        goto LABEL_178;
    }
  }
}

CMTime *H264CalculateFrameRate(CMTime *result, uint64_t a2, uint64_t a3)
{
  CMTime *v4;
  uint64_t v5;
  _OWORD *v6;
  CMTimeValue value;
  uint64_t v8;
  CMTime v9;
  CMTime lhs;
  CMTime v11;
  CMTime v12;

  memset(&v12, 0, sizeof(v12));
  if (*(_WORD *)(a3 + 49))
  {
    v4 = result;
    v5 = 32;
    if (!*(_BYTE *)(a3 + 50))
      v5 = 24;
    result = CMTimeMake(&v12, *(_QWORD *)(a3 + v5), 90000);
    v6 = (_OWORD *)(a2 + 260);
    if ((*(_BYTE *)(a2 + 272) & 1) != 0)
    {
      memset(&v11, 0, sizeof(v11));
      lhs = v12;
      *(_OWORD *)&v9.value = *v6;
      v9.epoch = *(_QWORD *)(a2 + 276);
      result = CMTimeSubtract(&v11, &lhs, &v9);
      value = v11.value;
      if ((unint64_t)(v11.value - 1) > 0x2BF1F)
      {
        *(_QWORD *)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 288) += v11.value;
        if (!*(_BYTE *)(a2 + 256))
        {
          v8 = value / *(_QWORD *)(a2 + 296);
          LODWORD(v4[33].epoch) = v8;
          v4[33].flags = 90000;
          if ((_DWORD)v8)
            *(_BYTE *)(a2 + 256) = 1;
        }
      }
    }
    *v6 = *(_OWORD *)&v12.value;
    *(_QWORD *)(a2 + 276) = v12.epoch;
  }
  ++*(_QWORD *)(a2 + 296);
  return result;
}

uint64_t figImageQueueTable_RegisterFigImageQueueTable()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigImageQueueTableID = result;
  return result;
}

uint64_t FigImageQueueTableCreate(const __CFAllocator *a1, _QWORD *a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t Instance;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2 || (Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_6;
  }
  v4 = Mutable;
  MEMORY[0x19402F294](&FigImageQueueTableGetTypeID_sRegisterFigImageQueueTableOnce, figImageQueueTable_RegisterFigImageQueueTable);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v8 = FigSignalErrorAt();
    FigSimpleMutexDestroy();
LABEL_11:
    CFRelease(v4);
    return v8;
  }
  v6 = (_QWORD *)Instance;
  v7 = FigSimpleMutexCreate();
  if (!v7)
  {
    v8 = FigSignalErrorAt();
    FigSimpleMutexDestroy();
    CFRelease(v6);
    goto LABEL_11;
  }
  v8 = 0;
  v6[2] = v7;
  v6[3] = v4;
  *a2 = v6;
LABEL_6:
  FigSimpleMutexDestroy();
  return v8;
}

uint64_t FigImageQueueTableRemoveAllValues(uint64_t a1)
{
  if (!a1)
    return 4294954516;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 24));
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return 0;
}

uint64_t FigImageQueueTableUpdateToMatchOutputsArray(uint64_t a1, const __CFArray *a2, void *a3, void (*a4)(void *, uint64_t), void (*a5)(const void *, uint64_t), uint64_t a6)
{
  uint64_t v12;
  CFIndex v13;
  uint64_t v14;
  const void *ValueAtIndex;
  CFTypeID v16;
  uint64_t v17;
  void *v18;
  uint64_t (*v19)(void *, const void *, void *);
  CFTypeID v20;
  uint64_t v21;
  CFTypeID v22;
  uint64_t (*v23)(const void *, _QWORD, void **);
  CFIndex Count;
  const void **v25;
  const void **v26;
  const void *v27;
  void *value;
  CFRange v30;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v12 = MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  if ((_DWORD)v12)
    return v12;
  if (CFArrayGetCount(a2) < 1)
  {
    v14 = 0;
LABEL_27:
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 24));
    v25 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 24), v25, 0);
    if (Count >= 1)
    {
      v26 = v25;
      do
      {
        v30.length = CFArrayGetCount(a2);
        v30.location = 0;
        if (!CFArrayContainsValue(a2, v30, *v26))
        {
          if (a5)
          {
            v27 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), *v26);
            a5(v27, a6);
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), *v26);
        }
        ++v26;
        --Count;
      }
      while (Count);
    }
    if (a3)
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)figImageQueueTable_reconnectApply2, a3);
    goto LABEL_40;
  }
  v13 = 0;
  v14 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a2, v13);
    value = 0;
    value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), ValueAtIndex);
    if (!value)
      break;
LABEL_22:
    if (CFArrayGetCount(a2) <= ++v13)
      goto LABEL_27;
  }
  v16 = CFGetTypeID(ValueAtIndex);
  if (v16 == FigVisualContextGetTypeID())
  {
    v17 = FigImageQueueCreateForCoreVideo(0, &value);
    if ((_DWORD)v17)
      goto LABEL_37;
    v18 = value;
    v19 = *(uint64_t (**)(void *, const void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v19)
    {
      v14 = v19(v18, ValueAtIndex, a3);
      if (!a4)
        goto LABEL_20;
    }
    else
    {
      v14 = 4294954514;
      if (!a4)
      {
LABEL_20:
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), ValueAtIndex, value);
        if (value)
          CFRelease(value);
        goto LABEL_22;
      }
    }
LABEL_19:
    a4(value, a6);
    goto LABEL_20;
  }
  v20 = CFGetTypeID(ValueAtIndex);
  if (v20 == CAImageQueueGetTypeID())
  {
    v21 = FigImageQueueCreateForCoreAnimation(0, ValueAtIndex, &value);
    goto LABEL_17;
  }
  v22 = CFGetTypeID(ValueAtIndex);
  if (v22 != FigVideoTargetGetTypeID())
  {
    v17 = FigSignalErrorAt();
LABEL_37:
    v14 = v17;
    goto LABEL_39;
  }
  v23 = *(uint64_t (**)(const void *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v23)
  {
    v21 = v23(ValueAtIndex, 0, &value);
LABEL_17:
    v14 = v21;
    if ((_DWORD)v21)
      goto LABEL_39;
    if (!a4)
      goto LABEL_20;
    goto LABEL_19;
  }
  v14 = 4294954514;
LABEL_39:
  v25 = 0;
LABEL_40:
  free(v25);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v14;
}

uint64_t FigImageQueueTableReconnectWithTimebase(uint64_t result, void *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    result = MEMORY[0x19402EEEC](*(_QWORD *)(result + 16));
    if (!(_DWORD)result)
    {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 24), (CFDictionaryApplierFunction)figImageQueueTable_reconnectApply2, a2);
      MEMORY[0x19402EF04](*(_QWORD *)(v3 + 16));
      return 0;
    }
  }
  return result;
}

uint64_t FigImageQueueTableSetTimebase(uint64_t result, void *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    result = MEMORY[0x19402EEEC](*(_QWORD *)(result + 16));
    if (!(_DWORD)result)
    {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 24), (CFDictionaryApplierFunction)figImageQueueTable_setTimebaseApply, a2);
      MEMORY[0x19402EF04](*(_QWORD *)(v3 + 16));
      return 0;
    }
  }
  return result;
}

uint64_t figImageQueueTable_setTimebaseApply(int a1, uint64_t a2, CMTimebaseRef timebase)
{
  float Rate;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v9)(uint64_t, const __CFString *, CMTimebaseRef);
  float v10;

  Rate = CMTimebaseGetRate(timebase);
  v10 = Rate;
  figImageQueueTable_respondToTimebaseRateChangeApply(v6, a2, &v10);
  FigBaseObject = FigImageQueueGetFigBaseObject(a2);
  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, CMTimebaseRef))(*(_QWORD *)(result + 8) + 56);
  if (v9)
    return v9(FigBaseObject, CFSTR("FigImageQueueProperty_Timebase"), timebase);
  return result;
}

uint64_t FigImageQueueTableRespondToTimebaseRateChange(uint64_t a1, OpaqueCMTimebase *a2)
{
  float Rate;
  float context;

  if (a1 && !MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16)))
  {
    Rate = CMTimebaseGetRate(a2);
    context = Rate;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)figImageQueueTable_respondToTimebaseRateChangeApply, &context);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  }
  return 0;
}

uint64_t figImageQueueTable_respondToTimebaseRateChangeApply(uint64_t a1, uint64_t a2, float *a3)
{
  float v4;
  void (*v5)(uint64_t, BOOL);
  uint64_t result;
  uint64_t (*v7)(uint64_t, float);

  v4 = *a3;
  v5 = *(void (**)(uint64_t, BOOL))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v5)
    v5(a2, v4 != 0.0);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(result + 16) + 48);
  if (v7)
    return v7(a2, v4);
  return result;
}

uint64_t FigImageQueueTableCopyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  const void *v4;
  CFTypeID v5;
  uint64_t Count;
  const void *v7;
  void (*v8)(const void *, __CFDictionary **);
  uint64_t v9;
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  CFIndex v12;
  const void *ValueAtIndex;
  CFStringRef v14;
  void (*v15)(const void *, void **);
  void *v16;
  void *value;

  if (!a1)
    return 0;
  if (!a2)
    return 0;
  *a2 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v4 = (const void *)FigCFDictionaryCopyArrayOfValues();
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (!v4)
    return 0;
  v5 = CFGetTypeID(v4);
  if (v5 != CFArrayGetTypeID())
    goto LABEL_21;
  Count = CFArrayGetCount((CFArrayRef)v4);
  if (Count != 1)
  {
    v9 = Count;
    if (Count < 2)
      goto LABEL_21;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v4, v12);
      v14 = CFStringCreateWithFormat(v10, 0, CFSTR("imagequeue-%d"), v12);
      value = 0;
      v15 = *(void (**)(const void *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (v15)
        v15(ValueAtIndex, &value);
      v16 = value;
      if (v14)
      {
        if (value)
          break;
      }
      if (v14)
        goto LABEL_16;
LABEL_17:
      if (v16)
        CFRelease(v16);
      if (v9 == ++v12)
      {
        *a2 = Mutable;
        goto LABEL_21;
      }
    }
    CFDictionarySetValue(Mutable, v14, value);
LABEL_16:
    CFRelease(v14);
    v16 = value;
    goto LABEL_17;
  }
  v7 = CFArrayGetValueAtIndex((CFArrayRef)v4, 0);
  v8 = *(void (**)(const void *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v8)
    v8(v7, a2);
LABEL_21:
  CFRelease(v4);
  return 0;
}

uint64_t FigImageQueueTableCopyMappedImageQueueArray(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t MappedArray;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  MappedArray = FigCFDictionaryCreateMappedArray();
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  *a3 = MappedArray;
  return 0;
}

uint64_t FigImageQueueTableCopyFigImageQueueArray(uint64_t a1, uint64_t *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  *a2 = FigCFDictionaryCopyArrayOfValues();
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return 0;
}

const void *FigImageQueueTableCopyFigImageQueueForVisualContext(uint64_t a1, const void *a2)
{
  const void *Value;
  const void *v5;

  if (a1)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
    v5 = Value;
    if (Value)
      CFRetain(Value);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v5;
}

const void *FigImageQueueTableCopyFigImageQueueForVideoTarget(uint64_t a1, const void *a2)
{
  const void *Value;
  const void *v5;

  if (a1)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
    v5 = Value;
    if (Value)
      CFRetain(Value);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v5;
}

uint64_t FigImageQueueTableCopyVideoTargets(uint64_t a1, __CFArray **a2)
{
  uint64_t Count;
  const void **v5;
  __CFArray *Mutable;
  CFTypeRef *v7;
  CFTypeID v8;
  uint64_t v9;

  if (a1 && a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    Count = FigCFDictionaryGetCount();
    v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 24), v5, 0);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Count >= 1)
    {
      v7 = v5;
      do
      {
        if (*v7)
        {
          v8 = CFGetTypeID(*v7);
          if (v8 == FigVideoTargetGetTypeID())
            CFArrayAppendValue(Mutable, *v7);
        }
        ++v7;
        --Count;
      }
      while (Count);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
    v9 = 0;
    *a2 = Mutable;
  }
  else
  {
    v9 = FigSignalErrorAt();
    v5 = 0;
  }
  free(v5);
  return v9;
}

uint64_t FigImageQueueTableWasFirstImageEnqueued(uint64_t a1)
{
  CFIndex Count;
  CFIndex v2;
  CFIndex v3;
  uint64_t v4;
  CFTypeRef v5;
  const void *ValueAtIndex;
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v9;
  uint64_t v10;
  CFTypeRef cf;
  CFArrayRef theArray;

  theArray = 0;
  if (!a1)
    return 0;
  FigImageQueueTableCopyFigImageQueueArray(a1, (uint64_t *)&theArray);
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_11:
    v10 = 0;
  }
  else
  {
    v2 = Count;
    v3 = 0;
    v4 = *MEMORY[0x1E0C9AE00];
    v5 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
      cf = 0;
      FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
      v8 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v8)
        v8(FigBaseObject, CFSTR("FigImageQueueProperty_FirstImageEnqueued"), v4, &cf);
      v9 = cf;
      if (cf)
        CFRelease(cf);
      if (v5 == v9)
        break;
      if (v2 == ++v3)
        goto LABEL_11;
    }
    v10 = 1;
  }
  if (theArray)
    CFRelease(theArray);
  return v10;
}

uint64_t figImageQueueTable_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t figImageQueueTable_Finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
  return FigSimpleMutexDestroy();
}

CFStringRef figImageQueueTable_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigImageQueueTable %p] %@"), a1, *(_QWORD *)(a1 + 24));
}

CFStringRef figImageQueueTable_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigImageQueueTable %p] %@"), a1, *(_QWORD *)(a1 + 24));
}

uint64_t figImageQueueTable_reconnectApply2(const void *a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6;
  uint64_t result;
  void (*v8)(uint64_t, _QWORD, _QWORD);
  uint64_t (*v9)(uint64_t, const void *, uint64_t);

  v6 = CFGetTypeID(a1);
  result = FigVisualContextGetTypeID();
  if (v6 == result)
  {
    v8 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v8)
      v8(a2, 0, 0);
    result = CMBaseObjectGetVTable();
    v9 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(result + 16) + 8);
    if (v9)
      return v9(a2, a1, a3);
  }
  return result;
}

uint64_t RegisterMovieSampleGroupType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t MovieSampleGroupCreate(const __CFAllocator *a1, unint64_t a2, int a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v9;

  if (!(_DWORD)a2 || !a4)
    return FigSignalErrorAt();
  if (MovieSampleGroupGetTypeID_sRegisterMovieSampleGroupTypeOnce != -1)
    dispatch_once_f(&MovieSampleGroupGetTypeID_sRegisterMovieSampleGroupTypeOnce, &MovieSampleGroupGetTypeID_sMovieSampleGroupID, (dispatch_function_t)RegisterMovieSampleGroupType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v9 = Instance;
  *(_QWORD *)(Instance + 128) = a2;
  *(_DWORD *)(Instance + 136) = a3;
  *(_QWORD *)(Instance + 120) = MovieSampleGroupCreateGroupingTypeKey(a1, a2, a3);
  *a4 = v9;
  return 0;
}

CFStringRef MovieSampleGroupCreateGroupingTypeKey(const __CFAllocator *a1, unint64_t a2, char a3)
{
  if (a3)
    return CFStringCreateWithFormat(a1, 0, CFSTR("%c%c%c%c:%08X"), BYTE3(a2), BYTE2(a2), BYTE1(a2), a2, HIDWORD(a2));
  else
    return CFStringCreateWithFormat(a1, 0, CFSTR("%c%c%c%c"), BYTE3(a2), BYTE2(a2), BYTE1(a2), a2);
}

uint64_t MovieSampleGroupCreateCompact(const __CFAllocator *a1, unint64_t a2, int a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  CFTypeRef cf;

  cf = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v5 = MovieSampleGroupCreate(a1, a2, a3, (uint64_t *)&cf);
  if ((_DWORD)v5)
  {
    v6 = v5;
  }
  else
  {
    LOBYTE(v10) = 0;
    HIDWORD(v9) = 4;
    v6 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)cf, &v8, 0, 0);
    if (!(_DWORD)v6)
    {
      *a4 = cf;
      return v6;
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t MovieSampleGroupSet_csgp(CMBlockBufferRef *blockBufferOut, _DWORD *a2, CMBlockBufferRef theBuffer, OpaqueCMBlockBuffer *a4)
{
  CMBlockBufferRef *v5;
  uint64_t result;
  __int128 v10;
  unint64_t v11;
  uint64_t (*v12)(uint64_t, int);

  if (!blockBufferOut)
    return FigSignalErrorAt();
  if (blockBufferOut[4])
    return FigSignalErrorAt();
  v5 = blockBufferOut + 9;
  if (blockBufferOut[9])
    return FigSignalErrorAt();
  if (*a2)
  {
    if (theBuffer && a4)
    {
      *v5 = (CMBlockBufferRef)CFRetain(theBuffer);
      goto LABEL_14;
    }
    return FigSignalErrorAt();
  }
  if (theBuffer)
  {
    if (CMBlockBufferGetDataLength(theBuffer))
      return FigSignalErrorAt();
    *v5 = (CMBlockBufferRef)CFRetain(theBuffer);
  }
  else
  {
    result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4u, 0, blockBufferOut + 9);
    if ((_DWORD)result)
      return result;
  }
  if (!a4)
  {
    result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4u, 0, blockBufferOut + 10);
    if ((_DWORD)result)
      return result;
    goto LABEL_15;
  }
  if (CMBlockBufferGetDataLength(a4))
    return FigSignalErrorAt();
LABEL_14:
  blockBufferOut[10] = (CMBlockBufferRef)CFRetain(a4);
LABEL_15:
  v10 = *(_OWORD *)a2;
  *((_DWORD *)blockBufferOut + 16) = a2[4];
  *((_OWORD *)blockBufferOut + 3) = v10;
  HIDWORD(v11) = *((_DWORD *)blockBufferOut + 15);
  LODWORD(v11) = HIDWORD(v11) - 4;
  switch((v11 >> 2))
  {
    case 0u:
      result = 0;
      v12 = GetDescriptionIndex_csgp_4;
      break;
    case 1u:
      result = 0;
      v12 = GetDescriptionIndex_csgp_8;
      break;
    case 3u:
      result = 0;
      v12 = GetDescriptionIndex_csgp_16;
      break;
    case 7u:
      result = 0;
      v12 = GetDescriptionIndex_csgp_32;
      break;
    default:
      return FigSignalErrorAt();
  }
  blockBufferOut[11] = (CMBlockBufferRef)v12;
  return result;
}

uint64_t MovieSampleGroupCreateForFragment(const __CFAllocator *a1, unint64_t a2, char a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _BOOL4 v9;
  uint64_t v11;
  _QWORD *v12;
  CFTypeRef v13;
  CFTypeRef cf;

  cf = 0;
  if (!(_DWORD)a2 || !a5)
    return FigSignalErrorAt();
  if (a4)
  {
    v7 = *(_QWORD *)(a4 + 128);
    v9 = (_DWORD)a2 == (_DWORD)v7 && a3 == *(_BYTE *)(a4 + 136);
    if (!v9 || a3 == 0)
    {
      if (!v9)
        return FigSignalErrorAt();
    }
    else if (HIDWORD(a2) != HIDWORD(v7))
    {
      return FigSignalErrorAt();
    }
    if (!*(_QWORD *)(a4 + 112))
      goto LABEL_17;
    return FigSignalErrorAt();
  }
LABEL_17:
  v11 = MovieSampleGroupCreate(a1, a2, a3, (uint64_t *)&cf);
  v12 = cf;
  if ((_DWORD)v11)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *((_BYTE *)cf + 140) = 1;
    if (a4)
    {
      v13 = CFRetain((CFTypeRef)a4);
      v12 = cf;
    }
    else
    {
      v13 = 0;
    }
    v11 = 0;
    v12[14] = v13;
    *a5 = v12;
  }
  return v11;
}

uint64_t MovieSampleGroupCreateCompactForFragment(const __CFAllocator *a1, unint64_t a2, char a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  CFTypeRef cf;

  cf = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v6 = MovieSampleGroupCreateForFragment(a1, a2, a3, a4, &cf);
  if ((_DWORD)v6)
  {
    v7 = v6;
  }
  else
  {
    LOBYTE(v11) = 1;
    HIDWORD(v10) = 4;
    v7 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)cf, &v9, 0, 0);
    if (!(_DWORD)v7)
    {
      *a5 = cf;
      return v7;
    }
  }
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t MovieSampleGroupSetDescriptionArray(uint64_t a1, _DWORD *cf)
{
  if (!a1 || !cf || *(_QWORD *)(a1 + 16) || *(_DWORD *)(a1 + 128) != cf[9])
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 16) = CFRetain(cf);
  return 0;
}

uint64_t MovieSampleGroupCreateDeepCopy(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  OpaqueCMBlockBuffer *v7;
  OpaqueCMBlockBuffer *v8;
  uint64_t v9;
  CFTypeRef cf;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v14;

  blockBufferOut = 0;
  v14 = 0;
  cf = 0;
  theBuffer = 0;
  if (!a2 || !a3 || *(_BYTE *)(a2 + 140))
  {
    v6 = FigSignalErrorAt();
    goto LABEL_32;
  }
  v6 = MovieSampleGroupCreate(a1, *(_QWORD *)(a2 + 128), *(_DWORD *)(a2 + 136), (uint64_t *)&v14);
  if ((_DWORD)v6)
    goto LABEL_32;
  v7 = *(OpaqueCMBlockBuffer **)(a2 + 32);
  if (!v7)
  {
    v8 = *(OpaqueCMBlockBuffer **)(a2 + 72);
    if (!v8)
      goto LABEL_19;
    if (CMBlockBufferIsEmpty(v8))
    {
      v6 = CMBlockBufferCreateEmpty(a1, 0, 0, &theBuffer);
      if ((_DWORD)v6)
        goto LABEL_32;
    }
    else
    {
      v6 = CMBlockBufferCreateContiguous(a1, *(CMBlockBufferRef *)(a2 + 72), a1, 0, 0, 0, 2u, &theBuffer);
      if ((_DWORD)v6)
        goto LABEL_32;
    }
    if (CMBlockBufferIsEmpty(*(CMBlockBufferRef *)(a2 + 80)))
    {
      v6 = CMBlockBufferCreateEmpty(a1, 0, 0, &blockBufferOut);
      if ((_DWORD)v6)
        goto LABEL_32;
    }
    else
    {
      v6 = CMBlockBufferCreateContiguous(a1, *(CMBlockBufferRef *)(a2 + 80), a1, 0, 0, 0, 2u, &blockBufferOut);
      if ((_DWORD)v6)
        goto LABEL_32;
    }
    v6 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)v14, (_DWORD *)(a2 + 48), theBuffer, blockBufferOut);
    if (!(_DWORD)v6)
      goto LABEL_19;
LABEL_32:
    v9 = v6;
    goto LABEL_22;
  }
  v6 = CMBlockBufferCreateContiguous(a1, v7, a1, 0, 0, 0, 2u, &blockBufferOut);
  if ((_DWORD)v6)
    goto LABEL_32;
  v6 = MovieSampleGroupSet_sbgp((uint64_t)v14, *(_DWORD *)(a2 + 28), blockBufferOut);
  if ((_DWORD)v6)
    goto LABEL_32;
LABEL_19:
  v6 = MovieSampleGroupCreateDescriptionArrayDeepCopy(a1, *(_QWORD *)(a2 + 16), &cf);
  if ((_DWORD)v6)
    goto LABEL_32;
  v9 = MovieSampleGroupSetDescriptionArray((uint64_t)v14, cf);
  if (!(_DWORD)v9)
  {
    *a3 = v14;
    v14 = 0;
  }
LABEL_22:
  if (theBuffer)
    CFRelease(theBuffer);
  if (cf)
    CFRelease(cf);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v14)
    CFRelease(v14);
  return v9;
}

uint64_t MovieSampleGroupSet_sbgp(uint64_t a1, int a2, CMBlockBufferRef theBuffer)
{
  const void *v6;
  int v7;
  uint64_t result;
  int v9;
  int v10;

  if (!a1
    || *(_QWORD *)(a1 + 32)
    || *(_QWORD *)(a1 + 72)
    || !theBuffer
    || CMBlockBufferGetDataLength(theBuffer) != 8 * a2)
  {
    return FigSignalErrorAt();
  }
  *(_DWORD *)(a1 + 28) = a2;
  v6 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = theBuffer;
  CFRetain(theBuffer);
  if (v6)
    CFRelease(v6);
  *(_DWORD *)(a1 + 24) = 0;
  if (a2 < 1)
    return 0;
  v7 = 0;
  while (1)
  {
    v10 = 0;
    result = MovieSampleGroupGetEntry(a1, v7, &v10, 0);
    if ((_DWORD)result || !v10)
      break;
    if (v10 < 1)
      return FigSignalErrorAt();
    v9 = *(_DWORD *)(a1 + 24) + v10;
    if (v9 < 0)
      return FigSignalErrorAt();
    *(_DWORD *)(a1 + 24) = v9;
    if (a2 == ++v7)
      return 0;
  }
  return result;
}

uint64_t MovieSampleGroupCreateDescriptionArrayDeepCopy(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFData *ValueAtIndex;
  CFDataRef Copy;
  CFDataRef v12;
  uint64_t v13;
  _DWORD *v14;
  CFTypeRef cf;

  cf = 0;
  v6 = MovieSampleGroupDescriptionArrayCreate(a1, *(_DWORD *)(a2 + 36), (uint64_t *)&cf);
  if (!(_DWORD)v6)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
    if (Count < 1)
    {
LABEL_6:
      v13 = 0;
      v14 = cf;
      *((_QWORD *)cf + 3) = *(_QWORD *)(a2 + 24);
      v14[8] = *(_DWORD *)(a2 + 32);
      *a3 = v14;
      return v13;
    }
    v8 = Count;
    v9 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v9);
      Copy = CFDataCreateCopy(a1, ValueAtIndex);
      if (!Copy)
        break;
      v12 = Copy;
      CFArrayAppendValue(*((CFMutableArrayRef *)cf + 2), Copy);
      CFRelease(v12);
      if (v8 == ++v9)
        goto LABEL_6;
    }
    v6 = FigSignalErrorAt();
  }
  v13 = v6;
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t MovieSampleGroupGetEntry(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  OpaqueCMBlockBuffer *v4;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t destination;

  destination = 0;
  if (!a1)
    return FigSignalErrorAt();
  v4 = *(OpaqueCMBlockBuffer **)(a1 + 32);
  if (!v4 || a2 < 0)
    return FigSignalErrorAt();
  if (CMBlockBufferCopyDataBytes(v4, 8 * a2, 8uLL, &destination))
    return FigSignalErrorAt();
  if (a3)
    *a3 = bswap32(destination);
  result = 0;
  if (a4)
  {
    v8 = bswap32(HIDWORD(destination));
    v9 = (v8 & 0x10000) >> 16;
    if ((v8 & 0x10000) != 0)
      v8 = (unsigned __int16)v8;
    *(_BYTE *)(a4 + 4) = v9;
    *(_DWORD *)a4 = v8;
  }
  return result;
}

uint64_t GetDescriptionIndex_csgp_4(uint64_t a1, int a2)
{
  char v2;
  int v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  unsigned __int8 destination;

  v2 = a2;
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = a2 + 1;
  destination = 0;
  if (CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 80), (uint64_t)v4 >> 1, 1uLL, &destination))
    return 0;
  LODWORD(v5) = destination >> 4;
  if ((v2 & 1) != 0)
    LODWORD(v5) = destination & 0xF;
  if (*(_BYTE *)(a1 + 64))
    v6 = v5 >= 8;
  else
    v6 = 0;
  v7 = !v6;
  v8 = v7 == 0;
  if (v7)
    v5 = v5;
  else
    v5 &= 7u;
  v9 = 0x100000000;
  if (!v8)
    v9 = 0;
  return v9 | v5;
}

uint64_t GetDescriptionIndex_csgp_8(uint64_t a1, int a2)
{
  BOOL v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 destination;

  destination = 0;
  if (CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 80), a2, 1uLL, &destination))
    return 0;
  if (*(_BYTE *)(a1 + 64))
    v3 = (destination & 0x80u) != 0;
  else
    v3 = 0;
  v4 = !v3;
  v5 = v4 == 0;
  if (v4)
    v6 = destination;
  else
    v6 = destination & 0x7F;
  v7 = 0x100000000;
  if (!v5)
    v7 = 0;
  return v7 | v6;
}

uint64_t GetDescriptionIndex_csgp_16(uint64_t a1, int a2)
{
  int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 destination;

  destination = 0;
  if (CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 80), 2 * a2, 2uLL, &destination))
    return 0;
  v3 = bswap32(destination);
  v4 = HIWORD(v3);
  if (*(_BYTE *)(a1 + 64))
    v5 = v3 >> 16 < 0;
  else
    v5 = 0;
  v6 = !v5;
  LODWORD(v7) = HIWORD(v3) & 0x7FFF;
  if (v6)
    v7 = v4;
  else
    v7 = v7;
  v8 = 0x100000000;
  if (v6)
    v8 = 0;
  return v8 | v7;
}

uint64_t GetDescriptionIndex_csgp_32(uint64_t a1, int a2)
{
  uint64_t v3;
  BOOL v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  unsigned int destination;

  destination = 0;
  if (CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 80), 4 * a2, 4uLL, &destination))
    return 0;
  LODWORD(v3) = bswap32(destination);
  if (*(_BYTE *)(a1 + 64))
    v4 = (int)v3 < 0;
  else
    v4 = 0;
  v5 = !v4;
  v6 = v5 == 0;
  if (v5)
    v3 = v3;
  else
    v3 &= 0x7FFFFFFFu;
  v7 = 0x100000000;
  if (!v6)
    v7 = 0;
  return v7 | v3;
}

uint64_t MovieSampleGroupTypeSpecMakeBasic(uint64_t result)
{
  return result;
}

unint64_t MovieSampleGroupTypeSpecMakeWithParameter(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t MovieSampleGroupCollectionCreate(const __CFAllocator *a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v5;

  if (!a2)
    return FigSignalErrorAt();
  if (MovieSampleGroupCollectionGetTypeID_sRegisterMovieSampleGroupCollectionTypeOnce != -1)
    dispatch_once_f(&MovieSampleGroupCollectionGetTypeID_sRegisterMovieSampleGroupCollectionTypeOnce, &MovieSampleGroupCollectionGetTypeID_sMovieSampleGroupCollectionID, (dispatch_function_t)RegisterMovieSampleGroupCollectionType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v5 = Instance;
  *(_QWORD *)(Instance + 16) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *a2 = v5;
  return 0;
}

uint64_t MovieSampleGroupCollectionAddSampleGroup(uint64_t a1, uint64_t a2)
{
  const __CFArray *v4;
  uint64_t v6;
  int v7;
  int v8;
  CFRange v9;

  v8 = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(a2 + 128);
  v7 = *(_DWORD *)(a2 + 136);
  v4 = *(const __CFArray **)(a1 + 16);
  v9.length = CFArrayGetCount(v4);
  v9.location = 0;
  CFArrayApplyFunction(v4, v9, (CFArrayApplierFunction)DuplicationScanApplierFunction, &v6);
  if (v8)
    return FigSignalErrorAt();
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), (const void *)a2);
  return 0;
}

uint64_t MovieSampleGroupGetInfo(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, BOOL *a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (!a1)
    return FigSignalErrorAt();
  v8 = *(_QWORD *)(a1 + 72);
  if (a2)
  {
    v9 = *(_QWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 136);
    *(_QWORD *)a2 = v9;
  }
  if (a3)
    MovieSampleGroupDescriptionArrayCopyInfo(*(_QWORD *)(a1 + 16), 0, 0, a3, 0, 0);
  if (a4)
  {
    if (v8)
      v10 = 0;
    else
      v10 = *(_DWORD *)(a1 + 28);
    *a4 = v10;
  }
  if (a5)
    *a5 = v8 != 0;
  return 0;
}

uint64_t DuplicationScanApplierFunction(uint64_t result, uint64_t *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  _BOOL4 v9;

  if (result)
  {
    v3 = *(_DWORD *)(result + 128);
    v4 = *(_DWORD *)(result + 132);
    v5 = *(unsigned __int8 *)(result + 136);
  }
  else
  {
    result = FigSignalErrorAt();
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
  v6 = *a2;
  v7 = *((unsigned __int8 *)a2 + 8);
  v9 = v3 == *a2 && v5 == v7;
  if (!v9 || v5 == 0)
  {
    if (!v9)
      goto LABEL_17;
LABEL_21:
    ++*((_DWORD *)a2 + 3);
    return result;
  }
  if (v4 == HIDWORD(v6))
    goto LABEL_21;
LABEL_17:
  if (v3 == (_DWORD)v6 && v7 != v5)
    goto LABEL_21;
  return result;
}

BOOL MovieSampleGroupCollectionHasSampleGroup(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const __CFArray *v3;
  _QWORD context[2];
  uint64_t v6;
  CFRange v7;

  v6 = 0;
  context[0] = a2;
  context[1] = a3;
  if (a1)
  {
    v3 = *(const __CFArray **)(a1 + 16);
    v7.length = CFArrayGetCount(v3);
    v7.location = 0;
    CFArrayApplyFunction(v3, v7, (CFArrayApplierFunction)SampleGroupTypeSpecLookupApplierFunction, context);
    return v6 != 0;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t SampleGroupTypeSpecLookupApplierFunction(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v7;

  v3 = result;
  if (result)
  {
    v4 = *(_QWORD *)(result + 128);
    v5 = *(unsigned __int8 *)(result + 136);
  }
  else
  {
    result = FigSignalErrorAt();
    v4 = 0;
    v5 = 0;
  }
  v7 = (_DWORD)v4 == *(_QWORD *)a2 && v5 == *(unsigned __int8 *)(a2 + 8);
  if (!v7 || v5 == 0)
  {
    if (!v7)
      return result;
    goto LABEL_15;
  }
  if (HIDWORD(v4) == HIDWORD(*(_QWORD *)a2))
LABEL_15:
    *(_QWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t MovieSampleGroupCollectionRemoveAllGroupsWithGroupingType(uint64_t a1, int a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  _DWORD *ValueAtIndex;
  int v8;

  if (a1)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    if (Count >= 1)
    {
      v5 = Count;
      v6 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v6);
        if (ValueAtIndex)
        {
          v8 = ValueAtIndex[32];
        }
        else
        {
          FigSignalErrorAt();
          v8 = 0;
        }
        if (v8 == a2)
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), v6);
          --v5;
        }
        else
        {
          ++v6;
        }
      }
      while (v6 < v5);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

CFIndex MovieSampleGroupCollectionGetCount(CFIndex result)
{
  if (result)
    return CFArrayGetCount(*(CFArrayRef *)(result + 16));
  return result;
}

CFTypeRef MovieSampleGroupCollectionLookupAndRetainSampleGroup(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const __CFArray *v3;
  CFTypeRef result;
  _QWORD context[2];
  CFTypeRef cf;
  CFRange v7;

  cf = 0;
  context[0] = a2;
  context[1] = a3;
  if (a1)
  {
    v3 = *(const __CFArray **)(a1 + 16);
    v7.length = CFArrayGetCount(v3);
    v7.location = 0;
    CFArrayApplyFunction(v3, v7, (CFArrayApplierFunction)SampleGroupTypeSpecLookupApplierFunction, context);
    result = cf;
    if (cf)
      return CFRetain(cf);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return result;
}

CFArrayRef MovieSampleGroupCollectionCopySampleGroupArray(const __CFAllocator *a1, uint64_t a2)
{
  if (a2)
    return CFArrayCreateCopy(a1, *(CFArrayRef *)(a2 + 16));
  FigSignalErrorAt();
  return 0;
}

void MovieSampleGroupCollectionApplyFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v3;
  _QWORD v4[2];
  CFRange v5;

  v4[0] = a2;
  v4[1] = a3;
  if (a1 && a2)
  {
    v3 = *(const __CFArray **)(a1 + 16);
    v5.length = CFArrayGetCount(v3);
    v5.location = 0;
    CFArrayApplyFunction(v3, v5, (CFArrayApplierFunction)ClientApplicationApplierFunction, v4);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t ClientApplicationApplierFunction(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))a2)(a1, *(_QWORD *)(a2 + 8));
}

uint64_t MovieSampleGroupDescriptionArrayAppendDescriptionUniquely(uint64_t a1, size_t a2, const void *a3, _DWORD *a4)
{
  int MatchingDescriptionIndexValue;

  MatchingDescriptionIndexValue = FindMatchingDescriptionIndexValue(a1, a2, a3);
  if (MatchingDescriptionIndexValue == -1)
    return MovieSampleGroupDescriptionArrayAppendNewDescription(a1, a2, (const UInt8 *)a3, a4);
  if (a4)
    *a4 = MatchingDescriptionIndexValue;
  return 0;
}

uint64_t FindMatchingDescriptionIndexValue(uint64_t a1, size_t a2, const void *a3)
{
  const __CFArray *v4;
  int Count;
  CFIndex v8;
  uint64_t v9;
  const __CFData *ValueAtIndex;
  CFIndex Length;
  const UInt8 *BytePtr;

  v4 = *(const __CFArray **)(a1 + 16);
  if (!v4)
    return 0xFFFFFFFFLL;
  Count = CFArrayGetCount(v4);
  if (Count < 1)
    return 0xFFFFFFFFLL;
  v8 = 0;
  v9 = Count;
  while (1)
  {
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v8);
    Length = CFDataGetLength(ValueAtIndex);
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    if (Length == a2 && (!a2 || !memcmp(BytePtr, a3, a2)))
      break;
    if (v9 == ++v8)
      return 0xFFFFFFFFLL;
  }
  return (v8 + 1);
}

uint64_t MovieSampleGroupDescriptionArrayAppendNewDescription(uint64_t a1, CFIndex a2, const UInt8 *a3, _DWORD *a4)
{
  const __CFArray *v8;
  CFIndex v9;
  CFIndex Count;
  const __CFAllocator *v11;
  CFDataRef v12;
  CFDataRef v13;

  v8 = *(const __CFArray **)(a1 + 16);
  v9 = a2;
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    v9 = a2;
    if (Count)
    {
      if (*(_QWORD *)(a1 + 24) == a2)
        goto LABEL_6;
      v9 = 0;
    }
  }
  *(_QWORD *)(a1 + 24) = v9;
LABEL_6:
  v11 = CFGetAllocator((CFTypeRef)a1);
  v12 = CFDataCreate(v11, a3, a2);
  if (!v12)
    return FigSignalErrorAt();
  v13 = v12;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), v12);
  if (a4)
    *a4 = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  CFRelease(v13);
  return 0;
}

uint64_t MovieSampleGroupDescriptionArrayAppendParsedDescription(uint64_t a1, CFIndex a2, const UInt8 *a3)
{
  if (a1 && (a2 == 0) == (a3 == 0))
    return MovieSampleGroupDescriptionArrayAppendNewDescription(a1, a2, a3, 0);
  else
    return FigSignalErrorAt();
}

uint64_t MovieSampleGroupDescriptionArraySetDefaultDescriptionIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  const __CFArray *Count;

  if ((a2 & 0x80000000) != 0)
    return FigSignalErrorAt();
  v4 = a2;
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count < v4)
    return FigSignalErrorAt();
  *(_DWORD *)(a1 + 32) = a2;
  return 0;
}

uint64_t MovieSampleGroupDescriptionArrayCopyInfo(uint64_t a1, _DWORD *a2, _QWORD *a3, _DWORD *a4, _QWORD *a5, _DWORD *a6)
{
  CFTypeRef v11;
  const __CFArray *v12;

  if (!a1)
    return FigSignalErrorAt();
  if (a2)
    *a2 = *(_DWORD *)(a1 + 36);
  if (a3)
  {
    v11 = *(CFTypeRef *)(a1 + 16);
    if (v11)
      v11 = CFRetain(v11);
    *a3 = v11;
  }
  if (a4)
  {
    v12 = *(const __CFArray **)(a1 + 16);
    if (v12)
      LODWORD(v12) = CFArrayGetCount(v12);
    *a4 = (_DWORD)v12;
  }
  if (a5)
    *a5 = *(_QWORD *)(a1 + 24);
  if (a6)
    *a6 = *(_DWORD *)(a1 + 32);
  return 0;
}

uint64_t MovieSampleGroupDescriptionArrayCopyDescriptionForIndex(uint64_t a1, int a2, _QWORD *a3)
{
  CFIndex v4;
  uint64_t v6;
  const __CFArray *Count;
  const void *ValueAtIndex;

  if (!a1)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v4 = (a2 - 1);
  if (a2 < 1)
    return FigSignalErrorAt();
  v6 = a2;
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count < v6)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v4);
  if (ValueAtIndex)
    ValueAtIndex = CFRetain(ValueAtIndex);
  *a3 = ValueAtIndex;
  return 0;
}

uint64_t MovieSampleGroupDescriptionArrayCreate(const __CFAllocator *a1, int a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  if (MovieSampleGroupDescriptionArrayGetTypeID_sRegisterMovieSampleGroupDescriptionArrayTypeOnce != -1)
    dispatch_once_f(&MovieSampleGroupDescriptionArrayGetTypeID_sRegisterMovieSampleGroupDescriptionArrayTypeOnce, &MovieSampleGroupDescriptionArrayGetTypeID_sMovieSampleGroupDescriptionArrayID, (dispatch_function_t)RegisterMovieSampleGroupDescriptionArrayType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  *(_QWORD *)(Instance + 16) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_DWORD *)(v7 + 36) = a2;
  *a3 = v7;
  return 0;
}

uint64_t MovieSampleGroupGetPatternEntry(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  OpaqueCMBlockBuffer *v4;
  uint64_t result;
  uint64_t destination;

  destination = 0;
  if (!a1)
    return FigSignalErrorAt();
  v4 = *(OpaqueCMBlockBuffer **)(a1 + 72);
  if (!v4 || a2 < 0)
    return FigSignalErrorAt();
  if (CMBlockBufferCopyDataBytes(v4, 8 * a2, 8uLL, &destination))
    return FigSignalErrorAt();
  if (a3)
    *a3 = bswap32(destination);
  result = 0;
  if (a4)
    *a4 = bswap32(HIDWORD(destination));
  return result;
}

uint64_t MovieSampleGroupGetSampleToGroupTable(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 32);
  FigSignalErrorAt();
  return 0;
}

uint64_t MovieSampleGroupGetNumSampleToGroupTableEntries(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 28);
  FigSignalErrorAt();
  return 0;
}

uint64_t MovieSampleGroupCopyCompactAtomComponents(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  __int128 v7;
  CFTypeRef v8;
  CFTypeRef v9;

  if (!a1 || !*(_QWORD *)(a1 + 72))
    return FigSignalErrorAt();
  if (a2)
  {
    v7 = *(_OWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 64);
    *(_OWORD *)a2 = v7;
  }
  if (a3)
  {
    v8 = *(CFTypeRef *)(a1 + 72);
    if (v8)
      v8 = CFRetain(v8);
    *a3 = v8;
  }
  if (a4)
  {
    v9 = *(CFTypeRef *)(a1 + 80);
    if (v9)
      v9 = CFRetain(v9);
    *a4 = v9;
  }
  return 0;
}

uint64_t MovieSampleGroupCopyDescriptionForIndex(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    if (a3)
    {
      if (!(_DWORD)a2)
        goto LABEL_9;
      if (!*(_BYTE *)(a1 + 140) || (a2 & 0xFF00000000) != 0)
      {
        v4 = MovieSampleGroupDescriptionArrayCopyDescriptionForIndex(*(_QWORD *)(a1 + 16), a2, &cf);
        if ((_DWORD)v4)
        {
LABEL_13:
          v5 = v4;
          if (cf)
            CFRelease(cf);
          return v5;
        }
LABEL_9:
        v5 = 0;
        *a3 = cf;
        return v5;
      }
      if (!MovieSampleGroupCopyDescriptionForIndex(*(_QWORD *)(a1 + 112)))
        goto LABEL_9;
    }
    v4 = FigSignalErrorAt();
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t MovieSampleGroupCopyGroupTypeKeyString(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 120);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t GetCompactDescriptionIndexForSample(uint64_t a1, int a2, uint64_t a3)
{
  size_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  uint64_t destination;

  if (*(_DWORD *)(a1 + 48))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 1;
    while (1)
    {
      destination = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 72), v6, 8uLL, &destination);
      v10 = bswap32(destination);
      v11 = bswap32(HIDWORD(destination)) + v9;
      if (a2 >= v9 && v11 > a2)
        break;
      v8 += v10;
      ++v7;
      v6 += 8;
      v9 = v11;
      if (v7 >= *(unsigned int *)(a1 + 48))
        goto LABEL_6;
    }
    *(_QWORD *)a3 = (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 88))(a1, (a2 - v9) % v10 + v8);
    return 1;
  }
  else
  {
LABEL_6:
    result = 0;
    *(_BYTE *)(a3 + 4) = 0;
    *(_DWORD *)a3 = 0;
  }
  return result;
}

uint64_t MovieSampleGroupAccessorCreate(_QWORD *a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t PatternEntry;
  uint64_t v9;

  CFGetAllocator(a1);
  if (MovieSampleGroupAccessorGetTypeID_sRegisterMovieSampleGroupAccessorTypeOnce != -1)
    dispatch_once_f(&MovieSampleGroupAccessorGetTypeID_sRegisterMovieSampleGroupAccessorTypeOnce, &MovieSampleGroupAccessorGetTypeID_sMovieSampleGroupAccessorID, (dispatch_function_t)RegisterMovieSampleGroupAccessorType);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v5 = Instance;
    if (a1)
    {
      v6 = CFRetain(a1);
      *(_QWORD *)(v5 + 16) = v6;
      v7 = a1[9];
      *(_DWORD *)(v5 + 24) = 0;
      if (v7)
      {
        *(_QWORD *)(v5 + 36) = 1;
        *(_QWORD *)(v5 + 48) = CompactSampleGroupAccessorGetDescriptionIndexForSample;
        PatternEntry = MovieSampleGroupGetPatternEntry((uint64_t)v6, 0, (_DWORD *)(v5 + 28), (_DWORD *)(v5 + 32));
        if ((_DWORD)PatternEntry)
        {
          v9 = PatternEntry;
          CFRelease((CFTypeRef)v5);
          return v9;
        }
      }
      else
      {
        *(_DWORD *)(v5 + 28) = 1;
        *(_QWORD *)(v5 + 48) = RegularSampleGroupAccessorGetDescriptionIndexForSample;
      }
    }
    v9 = 0;
    *a2 = v5;
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t MovieSampleGroupAccessorCopy(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v5;
  const void *v6;
  __int128 v7;

  if (!a1)
    return FigSignalErrorAt();
  CFGetAllocator((CFTypeRef)a1);
  if (MovieSampleGroupAccessorGetTypeID_sRegisterMovieSampleGroupAccessorTypeOnce != -1)
    dispatch_once_f(&MovieSampleGroupAccessorGetTypeID_sRegisterMovieSampleGroupAccessorTypeOnce, &MovieSampleGroupAccessorGetTypeID_sMovieSampleGroupAccessorID, (dispatch_function_t)RegisterMovieSampleGroupAccessorType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v5 = Instance;
  v6 = *(const void **)(a1 + 16);
  if (v6)
  {
    *(_QWORD *)(v5 + 16) = CFRetain(v6);
    v7 = *(_OWORD *)(a1 + 24);
    *(_DWORD *)(v5 + 40) = *(_DWORD *)(a1 + 40);
    *(_OWORD *)(v5 + 24) = v7;
    *(_QWORD *)(v5 + 48) = *(_QWORD *)(a1 + 48);
  }
  *a2 = v5;
  return 0;
}

uint64_t MovieSampleGroupAccessorCopyDescriptionForSample(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = 0;
    v5 = 0;
    goto LABEL_10;
  }
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a1 + 48))(a1, a2, &v10);
  v6 = *(_QWORD *)(a1 + 16);
  if (!(_DWORD)v10)
  {
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      LODWORD(v10) = *(_DWORD *)(v7 + 32);
      if ((_DWORD)v10)
      {
LABEL_5:
        v6 = *(_QWORD *)(a1 + 16);
        goto LABEL_6;
      }
    }
    else
    {
      FigSignalErrorAt();
      if ((_DWORD)v10)
        goto LABEL_5;
    }
    v8 = 0;
    goto LABEL_10;
  }
LABEL_6:
  v5 = MovieSampleGroupCopyDescriptionForIndex(v6, v10, &cf);
  v8 = cf;
  if (!(_DWORD)v5)
  {
LABEL_10:
    *a3 = v8;
    return v5;
  }
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t MovieSampleGroupAddDescription(uint64_t a1, size_t a2, const void *a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;
  int MatchingDescriptionIndexValue;

  if (!a1 || (a2 == 0) != (a3 == 0))
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 140))
  {
    v10 = *(_QWORD *)(a1 + 112);
    if (v10)
    {
      MatchingDescriptionIndexValue = FindMatchingDescriptionIndexValue(*(_QWORD *)(v10 + 16), a2, a3);
      if (MatchingDescriptionIndexValue != -1)
      {
        v11 = 0;
        v12 = 0;
        if (!a4)
          goto LABEL_14;
LABEL_13:
        *(_DWORD *)a4 = MatchingDescriptionIndexValue;
        *(_BYTE *)(a4 + 4) = v11;
        goto LABEL_14;
      }
    }
  }
  MatchingDescriptionIndexValue = FindMatchingDescriptionIndexValue(*(_QWORD *)(a1 + 16), a2, a3);
  if (MatchingDescriptionIndexValue == -1)
  {
    result = MovieSampleGroupDescriptionArrayAppendNewDescription(*(_QWORD *)(a1 + 16), a2, (const UInt8 *)a3, &MatchingDescriptionIndexValue);
    if ((_DWORD)result)
      return result;
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  v11 = *(_BYTE *)(a1 + 140) != 0;
  if (a4)
    goto LABEL_13;
LABEL_14:
  result = 0;
  if (a5)
    *a5 = v12;
  return result;
}

uint64_t UpgradeCompactSampleGroupFieldSize(uint64_t a1, int a2)
{
  uint64_t WritableForBlockBuffer;
  uint64_t v5;
  const void *v6;
  CMBlockBufferRef v7;
  const void *v8;
  uint64_t (*v9)(uint64_t, int);
  uint64_t v10;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  WritableForBlockBuffer = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8u, 0, &blockBufferOut);
  if ((_DWORD)WritableForBlockBuffer
    || (WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer(), (_DWORD)WritableForBlockBuffer))
  {
LABEL_20:
    v10 = WritableForBlockBuffer;
    goto LABEL_25;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    v5 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a1 + 88))(a1, v5);
      if (a2 == 32 || a2 == 16 || a2 == 8)
      {
        WritableForBlockBuffer = CMByteStreamAppend();
        if ((_DWORD)WritableForBlockBuffer)
          goto LABEL_20;
      }
      v5 = (v5 + 1);
    }
    while (v5 < *(_DWORD *)(a1 + 56));
  }
  v6 = *(const void **)(a1 + 80);
  v7 = blockBufferOut;
  *(_QWORD *)(a1 + 80) = blockBufferOut;
  if (v7)
    CFRetain(v7);
  if (v6)
    CFRelease(v6);
  v8 = *(const void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v8)
    CFRelease(v8);
  *(_DWORD *)(a1 + 60) = a2;
  switch(a2)
  {
    case 8:
      v9 = GetDescriptionIndex_csgp_8;
      goto LABEL_23;
    case 32:
      v9 = GetDescriptionIndex_csgp_32;
      goto LABEL_23;
    case 16:
      v9 = GetDescriptionIndex_csgp_16;
LABEL_23:
      v10 = 0;
      *(_QWORD *)(a1 + 88) = v9;
      goto LABEL_25;
  }
  v10 = 0;
LABEL_25:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v10;
}

uint64_t MovieSampleGroupAppendSamplesWithDescriptionIndex(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  if (!*(_QWORD *)(a1 + 72))
    return AppendSamplesWithDescriptionIndexToRegularGroup(a1, a2, a3);
  v15 = 0;
  result = MakeReadyToWrite_csgp(a1);
  if (!(_DWORD)result)
  {
    v7 = *(_DWORD *)(a1 + 48);
    if (!v7)
      goto LABEL_19;
    v14 = 0;
    v8 = 8 * (v7 - 1);
    MovieSampleGroupGetPatternEntry(a1, v7 - 1, (_DWORD *)&v15 + 1, &v15);
    v9 = HIDWORD(v15);
    if (HIDWORD(v15) == 1)
    {
      v16 = 0;
      GetCompactDescriptionIndexForSample(a1, *(_DWORD *)(a1 + 52), (uint64_t)&v16);
      if ((_DWORD)v16 == (_DWORD)a3 && BYTE4(v16) == BYTE4(a3))
      {
        v14 = _byteswap_uint64(__PAIR64__(HIDWORD(v15), v15 + a2));
        v10 = *(_QWORD *)(a1 + 96);
        v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 16);
        if (v11)
        {
          result = v11(v10, 8, v8, &v14, 0);
          if (!(_DWORD)result)
            *(_DWORD *)(a1 + 52) += a2;
          return result;
        }
        return 4294954514;
      }
      v9 = HIDWORD(v15);
    }
    if (a2 == 1 && v9 == (_DWORD)v15)
    {
      LODWORD(v14) = bswap32(v9 + 1);
      HIDWORD(v14) = v14;
      v12 = *(_QWORD *)(a1 + 96);
      v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 16);
      if (!v13)
        return 4294954514;
      result = v13(v12, 8, v8, &v14, 0);
      if ((_DWORD)result)
        return result;
      ++*(_DWORD *)(a1 + 52);
    }
    else
    {
LABEL_19:
      result = AppendNewPattern(a1, 1, a2);
      if ((_DWORD)result)
        return result;
    }
    return AppendDescriptionIndexToCompactGroup(a1, a3);
  }
  return result;
}

uint64_t AppendSamplesWithDescriptionIndexToRegularGroup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t WritableForBlockBuffer;
  OpaqueCMBlockBuffer *v8;
  int v9;
  size_t v10;
  const void *v11;
  CMBlockBufferRef v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t destination;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;

  v6 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  cf = 0;
  blockBufferOut = 0;
  if (*(_QWORD *)(a1 + 40))
    goto LABEL_17;
  WritableForBlockBuffer = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x10u, 0, &blockBufferOut);
  if (!(_DWORD)WritableForBlockBuffer)
  {
    v8 = *(OpaqueCMBlockBuffer **)(a1 + 32);
    if (v8 && (v9 = *(_DWORD *)(a1 + 28)) != 0)
    {
      v26 = 0;
      destination = 0;
      v10 = 8 * (v9 - 1);
      CMBlockBufferCopyDataBytes(v8, v10, 8uLL, &destination);
      if (*(int *)(a1 + 28) >= 2)
        CMBlockBufferAppendBufferReference(blockBufferOut, *(CMBlockBufferRef *)(a1 + 32), 0, v10, 0);
      WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
      if (!(_DWORD)WritableForBlockBuffer)
      {
        CMByteStreamAppend();
LABEL_10:
        v11 = *(const void **)(a1 + 32);
        v12 = blockBufferOut;
        *(_QWORD *)(a1 + 32) = blockBufferOut;
        if (v12)
          CFRetain(v12);
        if (v11)
          CFRelease(v11);
        v6 = 0;
        *(_QWORD *)(a1 + 40) = CFRetain(cf);
        goto LABEL_15;
      }
    }
    else
    {
      WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
      if (!(_DWORD)WritableForBlockBuffer)
        goto LABEL_10;
    }
  }
  v6 = WritableForBlockBuffer;
LABEL_15:
  if (cf)
    CFRelease(cf);
LABEL_17:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if ((_DWORD)v6)
    return v6;
  v13 = *(_DWORD *)(a1 + 28);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_27;
  }
  v14 = v13 - 1;
  MovieSampleGroupGetEntry(a1, v13 - 1, &v25, (uint64_t)&v22);
  if (!*(_DWORD *)(a1 + 28))
  {
LABEL_27:
    v25 = a2;
    LODWORD(v22) = a3;
    BYTE4(v22) = BYTE4(a3);
    *(_WORD *)((char *)&v22 + 5) = HIDWORD(a3) >> 8;
    v17 = HIBYTE(a3);
    goto LABEL_31;
  }
  v15 = v25;
  if ((_DWORD)v22 != (_DWORD)a3 || BYTE4(v22) != BYTE4(a3))
  {
    v25 = a2;
    if (v15)
      v14 = v13;
    LODWORD(v22) = a3;
    BYTE4(v22) = BYTE4(a3);
    *(_WORD *)((char *)&v22 + 5) = HIDWORD(a3) >> 8;
    v17 = HIBYTE(a3);
LABEL_31:
    HIBYTE(v22) = v17;
    v16 = a2;
    if (!a2)
    {
LABEL_36:
      v6 = 0;
      *(_DWORD *)(a1 + 24) += a2;
      *(_DWORD *)(a1 + 28) = v14 + 1;
      return v6;
    }
    goto LABEL_32;
  }
  v16 = v25 + a2;
  v25 = v16;
  if (!v16)
    goto LABEL_36;
LABEL_32:
  v18 = a3 | 0x10000;
  if (!BYTE4(a3))
    v18 = a3;
  v23 = _byteswap_uint64(__PAIR64__(v16, v18));
  v19 = *(_QWORD *)(a1 + 40);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 16);
  if (!v20)
    return 4294954514;
  v6 = v20(v19, 8, 8 * v14, &v23, &v24);
  if (!(_DWORD)v6)
    goto LABEL_36;
  return v6;
}

uint64_t MovieSampleGroupIntegrateSampleGroup(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t Entry;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  const UInt8 *v15;
  uint64_t appended;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  size_t Length;
  const UInt8 *BytePtr;
  uint64_t v25;
  uint64_t v26;
  CFDataRef theData;

  if (a2 && a3 && a2 != a3)
  {
    if (!*(_QWORD *)(a3 + 72))
    {
      theData = 0;
      v17 = *(_DWORD *)(a3 + 24) + *(_DWORD *)(a2 + 24);
      if (v17 > a1)
        return FigSignalErrorAt();
      if (v17 < a1)
      {
        v18 = *(_QWORD *)(a2 + 16);
        if (v18)
        {
          v19 = *(unsigned int *)(v18 + 32);
        }
        else
        {
          FigSignalErrorAt();
          v19 = 0;
          v17 = *(_DWORD *)(a3 + 24) + *(_DWORD *)(a2 + 24);
        }
        appended = MovieSampleGroupAppendSamplesWithDescriptionIndex(a2, a1 - v17, v19);
        if ((_DWORD)appended)
          return appended;
      }
      v20 = *(_DWORD *)(a3 + 28);
      if (v20 >= 1)
      {
        v21 = 0;
        while (1)
        {
          v26 = 0;
          HIDWORD(v25) = 0;
          Entry = MovieSampleGroupGetEntry(a3, v21, (_DWORD *)&v25 + 1, (uint64_t)&v26);
          if ((_DWORD)Entry)
            break;
          if ((_DWORD)v26 && (BYTE4(v26) || *(_QWORD *)(a3 + 112) != a2))
          {
            Entry = MovieSampleGroupCopyDescriptionForIndex(a3, v26, (CFTypeRef *)&theData);
            if ((_DWORD)Entry)
              break;
            if (theData)
            {
              Length = CFDataGetLength(theData);
              BytePtr = CFDataGetBytePtr(theData);
              Entry = MovieSampleGroupAddDescription(a2, Length, BytePtr, (uint64_t)&v26, 0);
              if ((_DWORD)Entry)
                break;
            }
          }
          Entry = MovieSampleGroupAppendSamplesWithDescriptionIndex(a2, HIDWORD(v25), v26);
          if ((_DWORD)Entry)
            break;
          if (theData)
          {
            CFRelease(theData);
            theData = 0;
          }
          if (v20 == ++v21)
            return 0;
        }
        goto LABEL_59;
      }
      return 0;
    }
    if (!*(_QWORD *)(a2 + 32))
    {
      theData = 0;
      if (*(_DWORD *)(a3 + 48))
      {
        if (*(_DWORD *)(a3 + 52) + *(_DWORD *)(a2 + 52) > a1)
        {
          Entry = FigSignalErrorAt();
          goto LABEL_59;
        }
        Entry = MakeReadyToWrite_csgp(a2);
        if (!(_DWORD)Entry)
        {
          v7 = *(_DWORD *)(a3 + 52) + *(_DWORD *)(a2 + 52);
          if (a1 > v7)
          {
            Entry = AppendNewPattern(a2, 1, a1 - v7);
            if ((_DWORD)Entry)
              goto LABEL_59;
            v8 = *(_QWORD *)(a2 + 16);
            if (v8)
            {
              v9 = *(unsigned int *)(v8 + 32);
            }
            else
            {
              FigSignalErrorAt();
              v9 = 0;
            }
            AppendDescriptionIndexToCompactGroup(a2, v9);
          }
          if (!*(_DWORD *)(a3 + 48))
          {
LABEL_34:
            appended = 0;
            goto LABEL_35;
          }
          v10 = 0;
          v11 = 0;
          while (1)
          {
            v25 = 0;
            v26 = 0;
            Entry = MovieSampleGroupGetPatternEntry(a3, v11, (_DWORD *)&v25 + 1, &v25);
            if ((_DWORD)Entry)
              break;
            Entry = AppendNewPattern(a2, HIDWORD(v25), v25);
            if ((_DWORD)Entry)
              break;
            if (SHIDWORD(v25) >= 1)
            {
              v12 = 0;
              do
              {
                v13 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 88))(a3, (v10 + v12));
                if ((_DWORD)v13 && ((v13 & 0xFF00000000) != 0 || *(_QWORD *)(a3 + 112) != a2))
                {
                  Entry = MovieSampleGroupCopyDescriptionForIndex(a3, v13, (CFTypeRef *)&theData);
                  if ((_DWORD)Entry)
                    goto LABEL_59;
                  if (theData)
                  {
                    v14 = CFDataGetLength(theData);
                    v15 = CFDataGetBytePtr(theData);
                    Entry = MovieSampleGroupAddDescription(a2, v14, v15, (uint64_t)&v26, 0);
                    if ((_DWORD)Entry)
                      goto LABEL_59;
                  }
                  else
                  {
                    LODWORD(v26) = 0;
                  }
                }
                else
                {
                  LODWORD(v26) = v13;
                  BYTE4(v26) = BYTE4(v13);
                  *(_WORD *)((char *)&v26 + 5) = HIDWORD(v13) >> 8;
                  HIBYTE(v26) = HIBYTE(v13);
                }
                AppendDescriptionIndexToCompactGroup(a2, v26);
                if (theData)
                {
                  CFRelease(theData);
                  theData = 0;
                }
                ++v12;
              }
              while (v12 < SHIDWORD(v25));
              v10 += v12;
            }
            if (++v11 >= *(_DWORD *)(a3 + 48))
              goto LABEL_34;
          }
        }
LABEL_59:
        appended = Entry;
LABEL_35:
        if (theData)
          CFRelease(theData);
        return appended;
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t MovieSampleGroupCreateOptimizedCopy(int *cf, CFTypeRef *a2)
{
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  int32x4_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  const __CFAllocator *v28;
  uint64_t v29;
  _DWORD *v30;
  CFTypeRef v32[2];
  CFTypeRef v33[2];
  CFTypeRef cfa[2];
  _OWORD v35[17];
  _DWORD *v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v37 = 0uLL;
  v38 = 0;
  v36 = 0;
  *(_OWORD *)cfa = 0u;
  memset(v35, 0, sizeof(v35));
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)v33 = 0u;
  LODWORD(v33[1]) = 1;
  if (!cf || !a2)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_55;
  }
  if (*((_BYTE *)cf + 140))
  {
    v4 = 0;
    *a2 = CFRetain(cf);
    return v4;
  }
  v5 = CFGetAllocator(cf);
  v6 = MovieSampleGroupCreate(v5, *((_QWORD *)cf + 16), cf[34], (uint64_t *)cfa);
  if ((_DWORD)v6)
    goto LABEL_55;
  v7 = *((_QWORD *)cf + 9);
  v8 = 13;
  if (!v7)
    v8 = 6;
  v9 = cf[v8];
  *(_QWORD *)((char *)&v37 + 4) = 0;
  v10 = 4;
  HIDWORD(v37) = 4;
  if (v7)
  {
    v10 = cf[15];
    HIDWORD(v37) = v10;
  }
  LOBYTE(v38) = 0;
  v6 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)cfa[0], &v37, 0, 0);
  if ((_DWORD)v6)
    goto LABEL_55;
  v6 = MakeReadyToWrite_csgp((uint64_t)cfa[0]);
  if ((_DWORD)v6)
    goto LABEL_55;
  v6 = MovieSampleGroupAccessorCreate(cf, (uint64_t *)v32);
  if ((_DWORD)v6)
    goto LABEL_55;
  v6 = MovieSampleGroupAccessorCreate(cf, (uint64_t *)v33);
  if ((_DWORD)v6)
    goto LABEL_55;
  memset_pattern16((char *)&v35[8] + 12, &unk_1932FBB80, 0x80uLL);
  LODWORD(cfa[1]) = v10;
  LODWORD(v32[1]) = 1;
  if (v9 <= 0)
  {
    v12 = HIDWORD(cfa[1]);
LABEL_38:
    if (v12 < 1)
    {
      v6 = OutputTrailingNonPatternRunThroughSampleNumber((uint64_t)v32, v9);
      if ((_DWORD)v6)
        goto LABEL_55;
    }
    else
    {
      v6 = OutputTrailingPatternRunThroughSampleNumber((uint64_t)v32, v9);
      if ((_DWORD)v6)
        goto LABEL_55;
    }
    v28 = CFGetAllocator(cf);
    v29 = MovieSampleGroupCreateDescriptionArrayDeepCopy(v28, *((_QWORD *)cf + 2), &v36);
    v30 = v36;
    if ((_DWORD)v29)
    {
      v4 = v29;
      if (!v36)
        goto LABEL_47;
    }
    else
    {
      v4 = MovieSampleGroupSetDescriptionArray((uint64_t)cfa[0], v36);
      if (!(_DWORD)v4)
      {
        *a2 = cfa[0];
        cfa[0] = 0;
      }
      if (!v30)
        goto LABEL_47;
    }
    CFRelease(v30);
    goto LABEL_47;
  }
  v11 = 1;
  while (1)
  {
    v39 = 0;
    v6 = (*((uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))v32[0] + 6))(v32[0], v11, &v39);
    if ((_DWORD)v6)
      goto LABEL_55;
    *((_DWORD *)v35 + SLODWORD(v32[1]) % 33 + 1) = v39;
    v12 = HIDWORD(cfa[1]);
    v13 = (int)v32[1];
    v14 = (_DWORD *)v35 + SLODWORD(v32[1]) % 33 + 1;
    if ((uint64_t)cfa[1] <= 0)
      break;
    if (*v14 == *((_DWORD *)v35 + (LODWORD(v32[1]) - HIDWORD(cfa[1])) % 33 + 1))
      goto LABEL_35;
    v6 = OutputTrailingPatternRunThroughSampleNumber((uint64_t)v32, LODWORD(v32[1]) - 1);
    if ((_DWORD)v6)
      goto LABEL_55;
    v15 = 0;
    HIDWORD(cfa[1]) = 0;
    v13 = (int)v32[1];
    v16 = vdupq_n_s32(v32[1]);
    do
    {
      *(int32x4_t *)((char *)&v35[v15 + 8] + 12) = v16;
      ++v15;
    }
    while (v15 != 8);
    v12 = 0;
LABEL_35:
    v11 = (v13 + 1);
    LODWORD(v32[1]) = v13 + 1;
    if (v13 >= v9)
      goto LABEL_38;
  }
  v17 = 0;
  v18 = LODWORD(v32[1]) + 1;
  v19 = (int)cfa[1];
  v20 = LODWORD(cfa[1]) + 7;
  v21 = LODWORD(v32[1]) - 1;
  v22 = 47;
  while (1)
  {
    v23 = *((_DWORD *)v32 + v22);
    if ((int)v22 + v23 - 46 <= v13)
      break;
LABEL_31:
    --v17;
    v20 += v19;
    ++v22;
    if (v17 == -32)
      goto LABEL_35;
  }
  if (*v14 != *((_DWORD *)v35 + (v21 + (int)v17) % 33 + 1))
  {
    *((_DWORD *)v32 + v22) = v13 + v17;
    goto LABEL_31;
  }
  v24 = v19 * (v18 - v23);
  v26 = v24 + 7;
  v25 = v24 < -7;
  v27 = v24 + 14;
  if (!v25)
    v27 = v26;
  if (v20 / 8 + 8 >= v27 >> 3)
    goto LABEL_31;
  v6 = OutputTrailingNonPatternRunThroughSampleNumber((uint64_t)v32, v23 - 1);
  if (!(_DWORD)v6)
  {
    v12 = 1 - v17;
    HIDWORD(cfa[1]) = 1 - v17;
    LODWORD(v35[0]) = *((_DWORD *)v32 + v22);
    v13 = (int)v32[1];
    goto LABEL_35;
  }
LABEL_55:
  v4 = v6;
LABEL_47:
  if (cfa[0])
    CFRelease(cfa[0]);
  if (v32[0])
    CFRelease(v32[0]);
  if (v33[0])
    CFRelease(v33[0]);
  return v4;
}

uint64_t MakeReadyToWrite_csgp(uint64_t a1)
{
  uint64_t v1;
  const __CFAllocator *v3;
  uint64_t WritableForBlockBuffer;
  OpaqueCMBlockBuffer *v5;
  int v6;
  size_t v7;
  OpaqueCMBlockBuffer *v8;
  int v9;
  size_t v10;
  unint64_t v11;
  int v12;
  size_t v13;
  const void *v14;
  CMBlockBufferRef v15;
  const void *v16;
  CMBlockBufferRef v17;
  uint64_t v19;
  uint64_t destination;
  CFTypeRef v21;
  CFTypeRef cf;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef blockBufferOut;

  theBuffer = 0;
  blockBufferOut = 0;
  v21 = 0;
  cf = 0;
  if (*(_QWORD *)(a1 + 96))
  {
    v1 = 0;
    goto LABEL_40;
  }
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  WritableForBlockBuffer = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8u, 0, &blockBufferOut);
  if ((_DWORD)WritableForBlockBuffer)
    goto LABEL_47;
  v5 = *(OpaqueCMBlockBuffer **)(a1 + 72);
  if (v5 && (v6 = *(_DWORD *)(a1 + 48)) != 0)
  {
    v19 = 0;
    destination = 0;
    v7 = 8 * (v6 - 1);
    CMBlockBufferCopyDataBytes(v5, v7, 8uLL, &destination);
    if (*(_DWORD *)(a1 + 48) >= 2u)
      CMBlockBufferAppendBufferReference(blockBufferOut, *(CMBlockBufferRef *)(a1 + 72), 0, v7, 0);
    WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
    if ((_DWORD)WritableForBlockBuffer)
      goto LABEL_47;
    CMByteStreamAppend();
  }
  else
  {
    WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
    if ((_DWORD)WritableForBlockBuffer)
      goto LABEL_47;
  }
  WritableForBlockBuffer = CMBlockBufferCreateEmpty(v3, 8u, 0, &theBuffer);
  if ((_DWORD)WritableForBlockBuffer)
    goto LABEL_47;
  v8 = *(OpaqueCMBlockBuffer **)(a1 + 80);
  if (v8)
  {
    v9 = *(_DWORD *)(a1 + 56);
    if (v9)
    {
      v10 = 0;
      destination = 0;
      HIDWORD(v11) = *(_DWORD *)(a1 + 60);
      LODWORD(v11) = HIDWORD(v11) - 4;
      v12 = v9 - 1;
      v13 = 0;
      switch((v11 >> 2))
      {
        case 0u:
          v13 = (uint64_t)(v12 + (v12 < 0)) >> 1;
          goto LABEL_20;
        case 1u:
          v13 = v12;
LABEL_20:
          v10 = 1;
          break;
        case 2u:
        case 4u:
        case 5u:
        case 6u:
          break;
        case 3u:
          v13 = 2 * v12;
          v10 = 2;
          break;
        case 7u:
          v13 = 4 * v12;
          v10 = 4;
          break;
        default:
          v13 = 0;
          break;
      }
      CMBlockBufferCopyDataBytes(v8, v13, v10, &v19);
      if (v13 && *(_DWORD *)(a1 + 56) >= 2u)
        CMBlockBufferAppendBufferReference(theBuffer, *(CMBlockBufferRef *)(a1 + 80), 0, v13, 0);
      WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
      if (!(_DWORD)WritableForBlockBuffer)
      {
        CMByteStreamAppend();
        goto LABEL_29;
      }
      goto LABEL_47;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 60) = 4;
    *(_QWORD *)(a1 + 88) = GetDescriptionIndex_csgp_4;
  }
  WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
  if (!(_DWORD)WritableForBlockBuffer)
  {
LABEL_29:
    v14 = *(const void **)(a1 + 72);
    v15 = blockBufferOut;
    *(_QWORD *)(a1 + 72) = blockBufferOut;
    if (v15)
      CFRetain(v15);
    if (v14)
      CFRelease(v14);
    v16 = *(const void **)(a1 + 80);
    v17 = theBuffer;
    *(_QWORD *)(a1 + 80) = theBuffer;
    if (v17)
      CFRetain(v17);
    if (v16)
      CFRelease(v16);
    *(_QWORD *)(a1 + 96) = CFRetain(cf);
    v1 = 0;
    *(_QWORD *)(a1 + 104) = CFRetain(v21);
    goto LABEL_38;
  }
LABEL_47:
  v1 = WritableForBlockBuffer;
LABEL_38:
  if (v21)
    CFRelease(v21);
LABEL_40:
  if (cf)
    CFRelease(cf);
  if (theBuffer)
    CFRelease(theBuffer);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v1;
}

uint64_t OutputTrailingPatternRunThroughSampleNumber(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;

  v3 = a2 - *(_DWORD *)(a1 + 24) + 1;
  result = AppendNewPattern(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 44), v3);
  if (!(_DWORD)result)
  {
    if (*(int *)(a1 + 44) < 1)
    {
LABEL_7:
      result = 0;
      *(_DWORD *)(a1 + 24) += v3;
    }
    else
    {
      v5 = 0;
      while (1)
      {
        v6 = 0;
        result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 48))();
        if ((_DWORD)result)
          break;
        result = AppendDescriptionIndexToCompactGroup(*(_QWORD *)(a1 + 32), v6);
        if ((_DWORD)result)
          break;
        if (++v5 >= *(_DWORD *)(a1 + 44))
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t OutputTrailingNonPatternRunThroughSampleNumber(uint64_t a1, int a2)
{
  int v2;
  BOOL v3;
  int v4;
  uint64_t result;
  int v8;
  uint64_t v9;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  if (v4 < 0 != v3)
    return 0;
  result = AppendNewPattern(*(_QWORD *)(a1 + 32), (v4 + 1), v4 + 1);
  if ((_DWORD)result)
    return result;
  if (*(_DWORD *)(a1 + 24) > a2)
    return 0;
  while (1)
  {
    v9 = 0;
    result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 48))();
    if ((_DWORD)result)
      break;
    result = AppendDescriptionIndexToCompactGroup(*(_QWORD *)(a1 + 32), v9);
    if ((_DWORD)result)
      break;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8 + 1;
    if (v8 >= a2)
      return 0;
  }
  return result;
}

uint64_t MovieSampleGroupCreateNonCompactCopy(uint64_t a1, CFTypeRef *a2)
{
  const __CFAllocator *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t appended;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)(CFTypeRef, _QWORD, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef cf;

  v4 = CFGetAllocator((CFTypeRef)a1);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  v23 = 0;
  cf = 0;
  v22 = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    v7 = 0;
    *a2 = CFRetain((CFTypeRef)a1);
    return v7;
  }
  v8 = v4;
  if (*(_BYTE *)(a1 + 140))
  {
    appended = MovieSampleGroupCreateForFragment(v4, v5, v6, *(_QWORD *)(a1 + 112), &v23);
    if ((_DWORD)appended)
      goto LABEL_33;
  }
  else
  {
    appended = MovieSampleGroupCreate(v4, v5, v6, (uint64_t *)&v23);
    if ((_DWORD)appended)
    {
LABEL_33:
      v7 = appended;
      goto LABEL_28;
    }
  }
  appended = MovieSampleGroupAccessorCreate((_QWORD *)a1, (uint64_t *)&cf);
  if ((_DWORD)appended)
    goto LABEL_33;
  v10 = 52;
  if (!*(_QWORD *)(a1 + 72))
    v10 = 24;
  v11 = *(_DWORD *)(a1 + v10);
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = (uint64_t (**)(CFTypeRef, _QWORD, uint64_t *))cf;
    while (1)
    {
      v21 = 0;
      appended = v16[6](v16, (v12 + 1), &v21);
      if ((_DWORD)appended)
        goto LABEL_33;
      v17 = v21;
      if (v12 && v15 == v21)
      {
        ++v13;
      }
      else
      {
        if (v13)
        {
          appended = AppendSamplesWithDescriptionIndexToRegularGroup((uint64_t)v23, v13, v15 | (v14 << 32));
          if ((_DWORD)appended)
            goto LABEL_33;
          v17 = v21;
        }
        v14 = HIDWORD(v21);
        v13 = 1;
        v15 = v17;
      }
      if (v11 == ++v12)
      {
        if (v13)
        {
          appended = AppendSamplesWithDescriptionIndexToRegularGroup((uint64_t)v23, v13, v15 | (v14 << 32));
          if ((_DWORD)appended)
            goto LABEL_33;
        }
        break;
      }
    }
  }
  v18 = MovieSampleGroupCreateDescriptionArrayDeepCopy(v8, *(_QWORD *)(a1 + 16), &v22);
  v19 = v22;
  if ((_DWORD)v18)
  {
    v7 = v18;
    if (!v22)
      goto LABEL_28;
  }
  else
  {
    v7 = MovieSampleGroupSetDescriptionArray((uint64_t)v23, v22);
    if (!(_DWORD)v7)
    {
      *a2 = v23;
      v23 = 0;
    }
    if (!v19)
      goto LABEL_28;
  }
  CFRelease(v19);
LABEL_28:
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  return v7;
}

double movieSampleGroup_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void movieSampleGroup_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
    a1[9] = 0;
  }
  v6 = (const void *)a1[12];
  if (v6)
  {
    CFRelease(v6);
    a1[12] = 0;
  }
  v7 = (const void *)a1[10];
  if (v7)
  {
    CFRelease(v7);
    a1[10] = 0;
  }
  v8 = (const void *)a1[13];
  if (v8)
  {
    CFRelease(v8);
    a1[13] = 0;
  }
  v9 = (const void *)a1[14];
  if (v9)
  {
    CFRelease(v9);
    a1[14] = 0;
  }
  v10 = (const void *)a1[15];
  if (v10)
  {
    CFRelease(v10);
    a1[15] = 0;
  }
}

__CFString *movieSampleGroup_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  const char *v3;
  uint64_t v5;
  uint64_t v6;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("MovieSampleGroup '%c%c%c%c' "), HIBYTE(*(_DWORD *)(a1 + 128)), BYTE2(*(_DWORD *)(a1 + 128)), BYTE1(*(_DWORD *)(a1 + 128)), *(_DWORD *)(a1 + 128));
  if (*(_BYTE *)(a1 + 136))
    CFStringAppendFormat(Mutable, 0, CFSTR("typeParameter %x "), *(unsigned int *)(a1 + 132));
  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 64))
      v3 = ", some fragment-local";
    else
      v3 = "";
    CFStringAppendFormat(Mutable, 0, CFSTR("csgp: %d patterns, %d samples, %d %d-bit description indexes%s"), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), v3);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("sbgp: %d entries, %d samples"), *(unsigned int *)(a1 + 28), *(unsigned int *)(a1 + 24), v5, v6);
  }
  if (*(_BYTE *)(a1 + 140))
    CFStringAppendFormat(Mutable, 0, CFSTR(" FragmentSampleGroup parent: %p"), *(_QWORD *)(a1 + 112));
  return Mutable;
}

uint64_t RegisterMovieSampleGroupCollectionType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t movieSampleGroupCollection_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void movieSampleGroupCollection_Finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

__CFString *movieSampleGroupCollection_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  const __CFArray *Count;

  Mutable = CFStringCreateMutable(0, 0);
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  CFStringAppendFormat(Mutable, 0, CFSTR("MovieSampleGroupCollection %d sampleGroups "), Count);
  return Mutable;
}

uint64_t RegisterMovieSampleGroupDescriptionArrayType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

_QWORD *movieSampleGroupDescriptionArray_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void movieSampleGroupDescriptionArray_Finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

__CFString *movieSampleGroupDescriptionArray_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  unsigned int v3;
  const __CFArray *Count;

  Mutable = CFStringCreateMutable(0, 0);
  v3 = *(_DWORD *)(a1 + 36);
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  CFStringAppendFormat(Mutable, 0, CFSTR("MovieSampleGroupDescriptionArray '%c%c%c%c' %d descriptions "), HIBYTE(v3), BYTE2(v3), BYTE1(v3), v3, Count);
  return Mutable;
}

uint64_t RegisterMovieSampleGroupAccessorType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double movieSampleGroupAccessor_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void movieSampleGroupAccessor_Finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

__CFString *movieSampleGroupAccessor_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("MovieSampleGroupAccessor '%@' group %p"), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120), *(_QWORD *)(a1 + 16));
  return Mutable;
}

uint64_t CompactSampleGroupAccessorGetDescriptionIndexForSample(uint64_t a1, int a2, uint64_t *a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int32x2_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_DWORD *)(a1 + 36);
  v7 = v6;
  while (a2 < v7 || *(_DWORD *)(a1 + 32) + v7 <= a2)
  {
    if (v6 <= a2)
    {
      v20 = 0;
      v14 = *(_DWORD *)(a1 + 24) + 1;
      v15 = *(_QWORD *)(a1 + 16);
      if (v14 >= *(_DWORD *)(v15 + 48))
      {
LABEL_11:
        result = 0;
LABEL_12:
        v19 = 0;
        goto LABEL_14;
      }
      result = MovieSampleGroupGetPatternEntry(v15, v14, &v20, (_DWORD *)&v20 + 1);
      if ((_DWORD)result)
        goto LABEL_12;
      v16 = *(_DWORD *)(a1 + 24) + 1;
      v17 = vadd_s32(*(int32x2_t *)(a1 + 36), vrev64_s32(*(int32x2_t *)(a1 + 28)));
      *(int32x2_t *)(a1 + 36) = v17;
      v18 = v20;
      *(_DWORD *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 28) = __PAIR64__(HIDWORD(v20), v18);
      v7 = v17.i32[0];
    }
    else
    {
      v20 = 0;
      v8 = *(_DWORD *)(a1 + 24);
      if (v8 < 1)
        goto LABEL_11;
      result = MovieSampleGroupGetPatternEntry(*(_QWORD *)(a1 + 16), v8 - 1, &v20, (_DWORD *)&v20 + 1);
      if ((_DWORD)result)
        goto LABEL_12;
      v10 = *(_DWORD *)(a1 + 24) - 1;
      v12 = v20;
      v11 = HIDWORD(v20);
      v7 = *(_DWORD *)(a1 + 36) - HIDWORD(v20);
      v13 = *(_DWORD *)(a1 + 40) - v20;
      *(_DWORD *)(a1 + 36) = v7;
      *(_DWORD *)(a1 + 40) = v13;
      *(_DWORD *)(a1 + 24) = v10;
      *(_DWORD *)(a1 + 28) = v12;
      *(_DWORD *)(a1 + 32) = v11;
    }
  }
  v19 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 88))();
  result = 0;
LABEL_14:
  *a3 = v19;
  return result;
}

uint64_t RegularSampleGroupAccessorGetDescriptionIndexForSample(uint64_t a1, int a2, _QWORD *a3)
{
  int v6;
  uint64_t Entry;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  int v19;

  v19 = 0;
  v6 = *(_DWORD *)(a1 + 28);
  while (1)
  {
    v18 = 0;
    Entry = MovieSampleGroupGetEntry(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24), &v19, (uint64_t)&v18);
    if ((_DWORD)Entry)
      goto LABEL_15;
    v8 = *(_DWORD *)(a1 + 28);
    if (v8 <= a2 && v19 + v8 > a2)
      break;
    if (v6 <= a2)
    {
      v13 = *(_DWORD *)(a1 + 24) + 1;
      if (v13 >= (int)MovieSampleGroupGetNumSampleToGroupTableEntries(*(_QWORD *)(a1 + 16)))
        goto LABEL_15;
      v14 = *(_DWORD *)(a1 + 28) + v19;
      ++*(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 28) = v14;
    }
    else
    {
      v17 = 0;
      v9 = *(_DWORD *)(a1 + 24);
      v10 = v9 - 1;
      if (v9 < 1)
      {
        Entry = 0;
        goto LABEL_15;
      }
      *(_DWORD *)(a1 + 24) = v10;
      v11 = MovieSampleGroupGetEntry(*(_QWORD *)(a1 + 16), v10, &v17, 0);
      if ((_DWORD)v11)
        goto LABEL_14;
      v12 = *(_DWORD *)(a1 + 28);
      if (v12 <= v17)
      {
        v11 = FigSignalErrorAt();
LABEL_14:
        Entry = v11;
LABEL_15:
        v15 = 0;
        goto LABEL_16;
      }
      *(_DWORD *)(a1 + 28) = v12 - v17;
    }
  }
  v15 = v18;
LABEL_16:
  *a3 = v15;
  return Entry;
}

uint64_t AppendNewPattern(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v6;

  result = CMByteStreamAppend();
  if (!(_DWORD)result)
  {
    v6 = *(_DWORD *)(a1 + 52) + a3;
    ++*(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 52) = v6;
  }
  return result;
}

uint64_t AppendDescriptionIndexToCompactGroup(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, unint64_t, _BYTE *, _QWORD);
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, unint64_t, _BYTE *, _QWORD);
  _BYTE v20[2];

  if (a2 >= 0x10000)
    v4 = 32;
  else
    v4 = 16;
  if (a2 >= 0x100)
    v5 = v4;
  else
    v5 = 8;
  if ((int)a2 >= 16)
    v6 = v5;
  else
    v6 = 4;
  if (a2 >= 0x8000)
    v7 = 32;
  else
    v7 = 16;
  if (a2 < 0x80)
    v7 = 8;
  if ((int)a2 >= 8)
    v8 = v7;
  else
    v8 = 4;
  if (*(_BYTE *)(a1 + 64))
    v9 = v8;
  else
    v9 = v6;
  v10 = *(_DWORD *)(a1 + 60);
  if (v9 > v10)
  {
    result = UpgradeCompactSampleGroupFieldSize(a1, v9);
    if ((_DWORD)result)
      return result;
    v10 = *(_DWORD *)(a1 + 60);
  }
  HIDWORD(v12) = v10;
  LODWORD(v12) = v10 - 4;
  switch((v12 >> 2))
  {
    case 0u:
      if (BYTE4(a2))
        v13 = a2 | 8;
      else
        v13 = a2;
      v14 = *(unsigned int *)(a1 + 56);
      if ((v14 & 1) == 0)
      {
        v20[1] = 16 * v13;
        goto LABEL_30;
      }
      v20[0] = 0;
      v15 = *(_QWORD *)(a1 + 104);
      v16 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, _BYTE *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
      if (!v16)
        return 4294954514;
      v17 = v14 >> 1;
      result = v16(v15, 1, v17, v20, 0);
      if (!(_DWORD)result)
      {
        v20[0] |= v13 & 0xF;
        v18 = *(_QWORD *)(a1 + 104);
        v19 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, _BYTE *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 16);
        if (!v19)
          return 4294954514;
        result = v19(v18, 1, v17, v20, 0);
        if (!(_DWORD)result)
          goto LABEL_31;
      }
      break;
    case 1u:
    case 3u:
    case 7u:
LABEL_30:
      result = CMByteStreamAppend();
      if (!(_DWORD)result)
        goto LABEL_31;
      return result;
    default:
LABEL_31:
      result = 0;
      ++*(_DWORD *)(a1 + 56);
      return result;
  }
  return result;
}

uint64_t FigAssetCacheInspectorGetClassID()
{
  MEMORY[0x19402F294](&FigAssetCacheInspectorGetClassID_sRegisterFigAssetCacheInspectorBaseTypeOnce, RegisterFigAssetCacheInspectorBaseType);
  return sFigAssetCacheInspectorClassID;
}

uint64_t RegisterFigAssetCacheInspectorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAssetCacheInspectorGetTypeID()
{
  MEMORY[0x19402F294](&FigAssetCacheInspectorGetClassID_sRegisterFigAssetCacheInspectorBaseTypeOnce, RegisterFigAssetCacheInspectorBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetCacheInspectorCreate(const void *a1, CFTypeRef cf, CFTypeRef *a3)
{
  CFTypeID v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFURLRef *);
  uint64_t v9;
  CFStringRef v10;
  uint64_t v11;
  uint64_t File;
  CFURLRef url;

  url = 0;
  if (!cf || (v6 = CFGetTypeID(cf), v6 != FigAssetGetTypeID()) || !a3)
  {
    v9 = FigSignalErrorAt();
LABEL_20:
    v11 = v9;
    goto LABEL_16;
  }
  CMBaseObject = FigAssetGetCMBaseObject(cf);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v8)
  {
    v11 = 4294954514;
    goto LABEL_16;
  }
  v9 = v8(CMBaseObject, CFSTR("assetProperty_CreationURL"), *MEMORY[0x1E0C9AE00], &url);
  if ((_DWORD)v9)
    goto LABEL_20;
  if (url)
    v10 = CFURLCopyPathExtension(url);
  else
    v10 = 0;
  if (FigCFURLIsLocalResource() && !FigCFEqual())
    File = FigAssetCacheInspectorCreate_File(a1, cf, a3);
  else
    File = FigAssetCacheInspectorCreate_Streaming(a1, cf, a3);
  v11 = File;
  if (v10)
    CFRelease(v10);
LABEL_16:
  if (url)
    CFRelease(url);
  return v11;
}

CFStringRef FigAssetCacheInspectorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetCacheInspector %p]"), a1);
}

uint64_t FigSecureStopArchivistCopyInstance(const __CFAllocator *a1, const __CFData *a2, const __CFURL *a3, _QWORD *a4)
{
  uint64_t CFData;
  __CFDictionary *v9;
  const void *v10;
  uint64_t Key;
  uint64_t v12;
  _QWORD *DerivedStorage;
  dispatch_queue_t v14;
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t v17;
  int DarwinFileDesc;
  int v19;
  const __CFAllocator *v20;
  CFMutableDictionaryRef Mutable;
  uint64_t v22;
  CFPropertyListRef v23;
  CFTypeID v24;
  int v25;
  CFTypeRef v26;
  uint64_t v27;
  const void *v28;
  CFTypeRef v29;
  const void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  CFMutableDictionaryRef block;
  uint64_t v37;
  void (*v38)(uint64_t);
  void *v39;
  uint64_t *v40;
  __CFData *v41;
  CFTypeRef cf;
  CFTypeRef v43;
  CFErrorRef error;
  __CFData *v45;

  if (a4)
  {
    *a4 = 0;
    v32 = 0;
    v33 = &v32;
    v34 = 0x2000000000;
    v35 = 0;
    v45 = 0;
    fssa_ensureArchivistSingletonContext((uint64_t)a1);
    CFData = fssa_createKey(a1, a2, a3, &v45);
    v9 = (__CFDictionary *)MEMORY[0x1E0C809B0];
    if ((_DWORD)CFData)
    {
      v31 = (const void *)v33[3];
      if (v31)
        CFRelease(v31);
      v10 = 0;
    }
    else
    {
      block = (CFMutableDictionaryRef)MEMORY[0x1E0C809B0];
      v37 = 0x40000000;
      v38 = __fssa_copyArchivistGuts_block_invoke;
      v39 = &unk_1E2F98570;
      v40 = &v32;
      v41 = v45;
      dispatch_sync((dispatch_queue_t)sArchivistSingletonContext_1, &block);
      v10 = (const void *)v33[3];
      v33[3] = 0;
    }
    if (v45)
      CFRelease(v45);
    _Block_object_dispose(&v32, 8);
    if ((_DWORD)CFData)
      goto LABEL_49;
    if (v10)
    {
LABEL_47:
      CFData = 0;
      *a4 = v10;
      return CFData;
    }
    cf = 0;
    fssa_ensureArchivistSingletonContext((uint64_t)a1);
    Key = fssa_createKey(a1, a2, a3, (__CFData **)&cf);
    if ((_DWORD)Key)
    {
      CFData = Key;
      v10 = 0;
      goto LABEL_44;
    }
    v43 = 0;
    FigSecureStopManagerGetClassID();
    v12 = CMDerivedObjectCreate();
    if (!(_DWORD)v12)
    {
      if (v43)
      {
        DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
        v14 = dispatch_queue_create("com.apple.coremedia.securestoparchivist", 0);
        *DerivedStorage = v14;
        if (v14)
        {
          if (a2)
            v15 = CFRetain(a2);
          else
            v15 = 0;
          DerivedStorage[2] = v15;
          if (a3)
            v16 = CFRetain(a3);
          else
            v16 = 0;
          DerivedStorage[3] = v16;
          v32 = 0;
          v45 = 0;
          error = 0;
          block = 0;
          v37 = 0;
          v38 = 0;
          v17 = FigFileForkOpenMainByCFURL();
          if ((_DWORD)v17)
          {
            CFData = v17;
          }
          else
          {
            DarwinFileDesc = FigFileGetDarwinFileDesc();
            flock(DarwinFileDesc, 1);
            CFData = FigFileReadURLAndCreateCFData();
            v19 = FigFileGetDarwinFileDesc();
            flock(v19, 8);
            if (!(_DWORD)CFData)
            {
              v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!Mutable)
              {
                CFData = FigSignalErrorAt();
                v23 = 0;
                goto LABEL_31;
              }
              if (CFDataGetLength(v45) > 0)
              {
                v22 = DerivedStorage[2];
                block = Mutable;
                v37 = v22;
                LOBYTE(v38) = 0;
                v23 = CFPropertyListCreateWithData(v20, v45, 1uLL, 0, &error);
                if (!error || (CFData = CFErrorGetCode(error), !(_DWORD)CFData))
                {
                  if (v23)
                  {
                    v24 = CFGetTypeID(v23);
                    if (v24 == CFDictionaryGetTypeID())
                    {
                      CFDictionaryApplyFunction((CFDictionaryRef)v23, (CFDictionaryApplierFunction)fssa_createRecordAndAddToInMemoryDatabase, &block);
                      v25 = v38;
                      DerivedStorage[1] = Mutable;
                      if (v25)
                        CFData = fssa_synchronizeInMemoryDatabaseToDisk((uint64_t)DerivedStorage);
                      else
                        CFData = 0;
                      goto LABEL_30;
                    }
                  }
                  CFData = FigSignalErrorAt();
                }
LABEL_31:
                FigFileForkClose();
                if (v45)
                  CFRelease(v45);
                if (error)
                  CFRelease(error);
                if (v23)
                  CFRelease(v23);
                if (Mutable)
                  CFRelease(Mutable);
                if (!(_DWORD)CFData)
                {
                  v26 = v43;
LABEL_41:
                  v27 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                  if (v27)
                  {
                    v28 = (const void *)v27;
                    block = v9;
                    v37 = 0x40000000;
                    v38 = __fssa_createArchivist_block_invoke;
                    v39 = &__block_descriptor_tmp_3_5;
                    v40 = (uint64_t *)cf;
                    v41 = (__CFData *)v27;
                    dispatch_sync((dispatch_queue_t)sArchivistSingletonContext_1, &block);
                    CFData = 0;
                    v29 = v26;
                    v26 = v28;
LABEL_43:
                    CFRelease(v26);
                    v10 = v29;
                    goto LABEL_44;
                  }
                  CFData = FigSignalErrorAt();
                  v29 = 0;
                  v10 = 0;
                  if (v26)
                    goto LABEL_43;
LABEL_44:
                  if (cf)
                    CFRelease(cf);
                  if (!(_DWORD)CFData)
                    goto LABEL_47;
LABEL_49:
                  if (v10)
                    CFRelease(v10);
                  return CFData;
                }
LABEL_57:
                if (v43)
                  CFRelease(v43);
                v26 = 0;
                v10 = 0;
                if ((_DWORD)CFData)
                  goto LABEL_44;
                goto LABEL_41;
              }
              CFData = 0;
              v23 = 0;
              DerivedStorage[1] = Mutable;
LABEL_30:
              Mutable = 0;
              goto LABEL_31;
            }
          }
          v23 = 0;
          goto LABEL_30;
        }
      }
      v12 = FigSignalErrorAt();
    }
    CFData = v12;
    goto LABEL_57;
  }
  return FigSignalErrorAt();
}

uint64_t fssr_createRecordFromSerializedData(CFDataRef data, _QWORD *a2)
{
  CFPropertyListRef v3;
  uint64_t Code;
  CFTypeID v5;
  const void *v6;
  const void *v7;
  CFErrorRef err;
  const void *v10;

  err = 0;
  v10 = 0;
  v3 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], data, 1uLL, 0, &err);
  if (err && (Code = CFErrorGetCode(err), (_DWORD)Code))
  {
    if (v3)
      goto LABEL_7;
  }
  else if (v3)
  {
    v5 = CFGetTypeID(v3);
    if (v5 != CFDictionaryGetTypeID())
    {
      Code = FigSignalErrorAt();
      goto LABEL_7;
    }
    Code = fssr_createSecureStopRecordFromDictionary((const __CFDictionary *)v3, &v10);
    v6 = v10;
    if (!(_DWORD)Code)
    {
      *a2 = v10;
LABEL_7:
      v7 = v3;
LABEL_8:
      CFRelease(v7);
      goto LABEL_9;
    }
    CFRelease(v3);
    if (v6)
    {
      v7 = v6;
      goto LABEL_8;
    }
  }
  else
  {
    Code = FigSignalErrorAt();
  }
LABEL_9:
  if (err)
    CFRelease(err);
  return Code;
}

void fssa_ensureArchivistSingletonContext(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fssa_ensureArchivistSingletonContext_block_invoke;
  block[3] = &__block_descriptor_tmp_2_2;
  block[4] = a1;
  if (fssa_ensureArchivistSingletonContext_once != -1)
    dispatch_once(&fssa_ensureArchivistSingletonContext_once, block);
}

uint64_t fssa_createKey(const __CFAllocator *a1, CFDataRef theData, const __CFURL *a3, __CFData **a4)
{
  CFMutableDataRef MutableCopy;
  __CFData *v8;
  const __CFData *v9;
  const __CFData *v10;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v14;

  MutableCopy = CFDataCreateMutableCopy(a1, 0, theData);
  if (!MutableCopy)
    return FigSignalErrorAt();
  v8 = MutableCopy;
  v9 = CFURLCreateData(a1, a3, 0x8000100u, 1u);
  if (v9)
  {
    v10 = v9;
    BytePtr = CFDataGetBytePtr(v9);
    Length = CFDataGetLength(v10);
    CFDataAppendBytes(v8, BytePtr, Length);
    *a4 = v8;
    CFRelease(v10);
    return 0;
  }
  else
  {
    v14 = FigSignalErrorAt();
    CFRelease(v8);
    return v14;
  }
}

void __fssa_copyArchivistGuts_block_invoke(uint64_t a1)
{
  if (CFDictionaryGetValue((CFDictionaryRef)sArchivistSingletonContext_0, *(const void **)(a1 + 40)))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      CFDictionaryRemoveValue((CFMutableDictionaryRef)sArchivistSingletonContext_0, *(const void **)(a1 + 40));
  }
}

dispatch_queue_t __fssa_ensureArchivistSingletonContext_block_invoke(uint64_t a1)
{
  dispatch_queue_t result;

  sArchivistSingletonContext_0 = (uint64_t)CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 32), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!sArchivistSingletonContext_0)
    return (dispatch_queue_t)FigSignalErrorAt();
  result = dispatch_queue_create("com.apple.coremedia.securestoparchivist.singletoncontext", 0);
  sArchivistSingletonContext_1 = (uint64_t)result;
  if (!result)
    return (dispatch_queue_t)FigSignalErrorAt();
  return result;
}

void __fssa_createArchivist_block_invoke(uint64_t a1)
{
  CFDictionarySetValue((CFMutableDictionaryRef)sArchivistSingletonContext_0, *(const void **)(a1 + 32), *(const void **)(a1 + 40));
}

void fssa_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  dispatch_release(*(dispatch_object_t *)DerivedStorage);
}

__CFString *fssa_copyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  CFAllocatorRef v5;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSecureStopArchivist %p retainCount: %ld allocator: %p>"), a1, v4, v5);
  return Mutable;
}

uint64_t fssa_fbo_copyRecords(uint64_t a1, _QWORD *a2)
{
  NSObject **DerivedStorage;
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  const void *v7;
  uint64_t v8;
  int v10;
  _QWORD block[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *a2 = 0;
    v4 = *DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fssa_fbo_copyRecords_block_invoke;
    block[3] = &unk_1E2F98680;
    block[4] = &v12;
    block[5] = &v16;
    block[6] = DerivedStorage;
    dispatch_sync(v4, block);
    v5 = v17;
    v6 = v13;
    if (!*((_DWORD *)v17 + 6))
    {
      *a2 = v13[3];
      v6[3] = 0;
    }
  }
  else
  {
    v10 = FigSignalErrorAt();
    v5 = v17;
    *((_DWORD *)v17 + 6) = v10;
    v6 = v13;
  }
  v7 = (const void *)v6[3];
  if (v7)
  {
    CFRelease(v7);
    v5 = v17;
  }
  v8 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v8;
}

uint64_t fssa_fbo_removeRecords(uint64_t a1, uint64_t a2)
{
  NSObject **DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fssa_fbo_removeRecords_block_invoke;
    block[3] = &unk_1E2F986A8;
    block[4] = &v8;
    block[5] = a2;
    block[6] = DerivedStorage;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    v5 = FigSignalErrorAt();
    *((_DWORD *)v9 + 6) = v5;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t fssa_fbo_updateRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t DerivedStorage;
  NSObject **v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD v19[12];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;

  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 | a4 && a8)
  {
    v15 = (NSObject **)DerivedStorage;
    if (FigCFEqual())
    {
      v16 = *v15;
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = __fssa_fbo_updateRecord_block_invoke;
      v19[3] = &unk_1E2F986D0;
      v19[4] = &v20;
      v19[5] = v15;
      v19[6] = a3;
      v19[7] = a4;
      v19[8] = a5;
      v19[9] = a6;
      v19[10] = a7;
      v19[11] = a8;
      dispatch_sync(v16, v19);
    }
  }
  else
  {
    *((_DWORD *)v21 + 6) = FigSignalErrorAt();
  }
  v17 = *((unsigned int *)v21 + 6);
  _Block_object_dispose(&v20, 8);
  return v17;
}

uint64_t fssa_fbo_finalizeRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  NSObject **v13;
  NSObject *v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  _QWORD v19[11];
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;

  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 | a4 && a6 && a4 | a7)
  {
    v13 = (NSObject **)DerivedStorage;
    if (FigCFEqual())
    {
      v14 = *v13;
      if (a4)
        v15 = a7 == 0;
      else
        v15 = 0;
      v16 = v15;
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = __fssa_fbo_finalizeRecord_block_invoke;
      v19[3] = &unk_1E2F98768;
      v19[4] = &v21;
      v19[5] = v13;
      v19[6] = a3;
      v19[7] = a4;
      v19[8] = a5;
      v19[9] = a6;
      v19[10] = a7;
      v20 = v16;
      dispatch_sync(v14, v19);
    }
  }
  else
  {
    *((_DWORD *)v22 + 6) = FigSignalErrorAt();
  }
  v17 = *((unsigned int *)v22 + 6);
  _Block_object_dispose(&v21, 8);
  return v17;
}

void __fssa_fbo_copyRecords_block_invoke(_QWORD *a1)
{
  void *v2;

  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v2 = *(void **)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v2)
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1[6] + 8), (CFDictionaryApplierFunction)fssa_serializeRecordAndAddToOutputDictionary, v2);
  else
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = FigSignalErrorAt();
}

void fssa_serializeRecordAndAddToOutputDictionary(const void *a1, _QWORD *a2, __CFDictionary *a3)
{
  int DictionaryFromSecureStopRecord;
  CFPropertyListRef v6;
  CFDataRef v7;
  int Code;
  CFDataRef v9;
  CFErrorRef err;
  CFPropertyListRef propertyList;

  if (!a2[3])
    return;
  err = 0;
  propertyList = 0;
  DictionaryFromSecureStopRecord = fssr_createDictionaryFromSecureStopRecord(a2, 1, (__CFDictionary **)&propertyList);
  v6 = propertyList;
  if (!DictionaryFromSecureStopRecord)
  {
    v7 = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], propertyList, kCFPropertyListXMLFormat_v1_0, 0, &err);
    if (!err || (Code = CFErrorGetCode(err)) == 0)
    {
      if (v7)
      {
        Code = 0;
        v9 = v7;
        goto LABEL_7;
      }
      Code = FigSignalErrorAt();
    }
    v9 = 0;
    if (!v6)
      goto LABEL_9;
    goto LABEL_8;
  }
  Code = DictionaryFromSecureStopRecord;
  v9 = 0;
LABEL_7:
  v7 = 0;
  if (v6)
LABEL_8:
    CFRelease(v6);
LABEL_9:
  if (v7)
    CFRelease(v7);
  if (err)
    CFRelease(err);
  if (!Code)
    CFDictionarySetValue(a3, a1, v9);
  if (v9)
    CFRelease(v9);
}

uint64_t fssr_createDictionaryFromSecureStopRecord(_QWORD *a1, int a2, __CFDictionary **a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  v8 = (const void *)a1[2];
  if (v8)
    CFDictionarySetValue(Mutable, CFSTR("SessionLifespanSPC"), v8);
  v9 = (const void *)a1[3];
  if (v9)
    CFDictionarySetValue(v7, CFSTR("SecureStopSPC"), v9);
  v10 = (const void *)a1[6];
  if (v10)
    CFDictionarySetValue(v7, CFSTR("PlaybackSessionID"), v10);
  v11 = (const void *)a1[7];
  if (v11)
    CFDictionarySetValue(v7, CFSTR("AirPlayPlaybackSessionID"), v11);
  v12 = (const void *)a1[10];
  if (v12)
    CFDictionarySetValue(v7, CFSTR("AbnormallyTerminated"), v12);
  if (a2)
  {
    if (!a1[6])
      FigCFDictionarySetValue();
  }
  else
  {
    v13 = (const void *)a1[4];
    if (v13)
      CFDictionarySetValue(v7, CFSTR("ModifiedDate"), v13);
    v14 = (const void *)a1[5];
    if (v14)
      CFDictionarySetValue(v7, CFSTR("VersionList"), v14);
    v15 = (const void *)a1[8];
    if (v15)
      CFDictionarySetValue(v7, CFSTR("APIProviderID"), v15);
    v16 = (const void *)a1[9];
    if (v16)
      CFDictionarySetValue(v7, CFSTR("AssetID"), v16);
  }
  *a3 = v7;
  return 0;
}

void __fssa_fbo_removeRecords_block_invoke(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const __CFData *ValueAtIndex;
  const void **v7;
  const void *Value;
  const void **v9;

  v2 = *(const __CFArray **)(a1 + 40);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      v5 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v5);
        v9 = 0;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = fssr_createRecordFromSerializedData(ValueAtIndex, &v9);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          break;
        v7 = v9;
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 48) + 8), v9[6]);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 48) + 8), v7[6]);
        CFRelease(v7);
        if (v4 == ++v5)
        {
          if (Value)
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = fssa_synchronizeInMemoryDatabaseToDisk(*(_QWORD *)(a1 + 48));
          return;
        }
      }
    }
  }
}

uint64_t fssa_synchronizeInMemoryDatabaseToDisk(uint64_t a1)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  int64_t Count;
  size_t v5;
  const void **v6;
  const void **v7;
  const __CFArray *v8;
  __CFArray *MutableCopy;
  const __CFArray *v10;
  CFIndex v11;
  size_t v12;
  _QWORD *ValueAtIndex;
  const void *v14;
  uint64_t Code;
  uint64_t v16;
  const __CFData *Data;
  int DarwinFileDesc;
  uint64_t v19;
  int v20;
  CFErrorRef err[2];
  CFRange v23;

  err[0] = 0;
  err[1] = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
LABEL_38:
    v16 = FigSignalErrorAt();
    goto LABEL_39;
  }
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
  if (Count < 33)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v10 = 0;
LABEL_11:
    Code = 0;
    goto LABEL_12;
  }
  v5 = Count;
  v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_34;
  }
  v7 = (const void **)malloc_type_calloc(v5, 8uLL, 0x2004093837F09uLL);
  if (!v7)
  {
LABEL_34:
    v8 = 0;
    goto LABEL_35;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 8), v6, v7);
  v8 = CFArrayCreate(v2, v7, v5, MEMORY[0x1E0C9B378]);
  if (v8)
  {
    MutableCopy = CFArrayCreateMutableCopy(v2, 0, v8);
    if (MutableCopy)
    {
      v10 = MutableCopy;
      v23.location = 0;
      v23.length = v5;
      CFArraySortValues(MutableCopy, v23, (CFComparatorFunction)fssa_compareModifiedDate, 0);
      v11 = 0;
      v12 = v5 - 32;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v10, v11);
        v14 = (const void *)ValueAtIndex[6];
        if (!v14)
          v14 = (const void *)ValueAtIndex[7];
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 8), v14);
        ++v11;
      }
      while (v12 != v11);
      goto LABEL_11;
    }
  }
LABEL_35:
  Code = FigSignalErrorAt();
  v10 = 0;
LABEL_12:
  free(v6);
  free(v7);
  if (v8)
    CFRelease(v8);
  if (v10)
    CFRelease(v10);
  if ((_DWORD)Code)
    goto LABEL_40;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)fssa_createRecordDictionaryAndAddToOutputDictionary, Mutable);
  v16 = FigFileForkOpenMainByCFURL();
  if ((_DWORD)v16)
  {
LABEL_39:
    Code = v16;
LABEL_40:
    FigFileForkClose();
    goto LABEL_26;
  }
  Data = CFPropertyListCreateData(v2, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, err);
  if (!err[0] || (Code = CFErrorGetCode(err[0]), !(_DWORD)Code))
  {
    if (Data)
    {
      DarwinFileDesc = FigFileGetDarwinFileDesc();
      flock(DarwinFileDesc, 2);
      CFDataGetBytePtr(Data);
      CFDataGetLength(Data);
      v19 = FigFileForkWrite();
      if ((_DWORD)v19)
      {
        Code = v19;
      }
      else
      {
        CFDataGetLength(Data);
        Code = FigFileForkTruncate();
        if (!(_DWORD)Code)
        {
          v20 = FigFileGetDarwinFileDesc();
          flock(v20, 8);
        }
      }
      FigFileForkClose();
      goto LABEL_25;
    }
    goto LABEL_38;
  }
  FigFileForkClose();
  if (Data)
LABEL_25:
    CFRelease(Data);
LABEL_26:
  if (err[0])
    CFRelease(err[0]);
  if (Mutable)
    CFRelease(Mutable);
  return Code;
}

void fssa_createRecordDictionaryAndAddToOutputDictionary(const void *a1, _QWORD *a2, __CFDictionary *a3)
{
  int DictionaryFromSecureStopRecord;
  void *v6;
  void *value;

  value = 0;
  DictionaryFromSecureStopRecord = fssr_createDictionaryFromSecureStopRecord(a2, 0, (__CFDictionary **)&value);
  v6 = value;
  if (!DictionaryFromSecureStopRecord)
    CFDictionarySetValue(a3, a1, value);
  if (v6)
    CFRelease(v6);
}

CFComparisonResult fssa_compareModifiedDate(uint64_t a1, uint64_t a2)
{
  return CFDateCompare(*(CFDateRef *)(a1 + 32), *(CFDateRef *)(a2 + 32), 0);
}

uint64_t __fssa_fbo_updateRecord_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = fssa_updateRecordGuts(*(_QWORD *)(a1 + 40), *(const void **)(a1 + 48), *(const void **)(a1 + 56), *(const void **)(a1 + 64), *(const void **)(a1 + 72), *(const void **)(a1 + 80), *(const void **)(a1 + 88), 0, 0);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t fssa_updateRecordGuts(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, char a9)
{
  const void *v9;
  const void *v16;
  void *v17;
  _QWORD *v18;
  const __CFAllocator *v19;
  uint64_t SecureStopRecord;
  CFAbsoluteTime Current;
  CFDateRef v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *value;

  if (a3)
    v9 = a3;
  else
    v9 = a2;
  if (a1)
  {
    v16 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v9);
    if (v16)
    {
      v17 = (void *)CFRetain(v16);
      value = v17;
      if (v17)
      {
        v18 = v17;
        v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        goto LABEL_11;
      }
    }
    else
    {
      value = 0;
    }
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    SecureStopRecord = fssr_createSecureStopRecord(*MEMORY[0x1E0C9AE00], (uint64_t *)&value);
    v18 = value;
    if ((_DWORD)SecureStopRecord)
    {
      v34 = SecureStopRecord;
      if (!value)
        return v34;
      v35 = value;
      goto LABEL_55;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), v9, value);
LABEL_11:
    Current = CFAbsoluteTimeGetCurrent();
    v22 = CFDateCreate(v19, Current);
    v23 = (const void *)v18[2];
    v18[2] = a7;
    if (a7)
      CFRetain(a7);
    if (v23)
      CFRelease(v23);
    v24 = (const void *)v18[3];
    v18[3] = a8;
    if (a8)
      CFRetain(a8);
    if (v24)
      CFRelease(v24);
    v25 = (const void *)v18[4];
    v18[4] = v22;
    if (v22)
      CFRetain(v22);
    if (v25)
      CFRelease(v25);
    v26 = (const void *)v18[5];
    v18[5] = a5;
    if (a5)
      CFRetain(a5);
    if (v26)
      CFRelease(v26);
    v27 = (const void *)v18[6];
    v18[6] = a2;
    if (a2)
      CFRetain(a2);
    if (v27)
      CFRelease(v27);
    v28 = (const void *)v18[7];
    v18[7] = a3;
    if (a3)
      CFRetain(a3);
    if (v28)
      CFRelease(v28);
    v29 = (const void *)v18[8];
    v18[8] = a6;
    if (a6)
      CFRetain(a6);
    if (v29)
      CFRelease(v29);
    v30 = (const void *)v18[9];
    v18[9] = a4;
    if (a4)
      CFRetain(a4);
    if (v30)
      CFRelease(v30);
    if (a9)
    {
      v31 = (const void *)v18[10];
      v32 = (const void *)*MEMORY[0x1E0C9AE50];
      v18[10] = *MEMORY[0x1E0C9AE50];
      if (v32)
        CFRetain(v32);
      if (v31)
        CFRelease(v31);
    }
    if (a3 && a8)
    {
      if (!a2)
      {
        v33 = FigSignalErrorAt();
        goto LABEL_53;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), a2, v18);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 8), a3);
    }
    v33 = fssa_synchronizeInMemoryDatabaseToDisk(a1);
LABEL_53:
    v34 = v33;
    CFRelease(v18);
    if (!v22)
      return v34;
    v35 = v22;
LABEL_55:
    CFRelease(v35);
    return v34;
  }
  return FigSignalErrorAt();
}

uint64_t fssr_createSecureStopRecord(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;
  uint64_t result;
  __int128 v6;

  v6 = xmmword_1E2F98750;
  if (FigSecureStopRecordGetTypeID_once != -1)
    dispatch_once_f(&FigSecureStopRecordGetTypeID_once, &v6, (dispatch_function_t)FigSecureStopRecordClassRegisterOnce);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294949555;
  v4 = Instance;
  result = 0;
  *a2 = v4;
  return result;
}

double FigSecureStopRecordInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigSecureStopRecordFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
  v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0;
  }
  v8 = (const void *)a1[8];
  if (v8)
  {
    CFRelease(v8);
    a1[8] = 0;
  }
  v9 = (const void *)a1[9];
  if (v9)
  {
    CFRelease(v9);
    a1[9] = 0;
  }
  v10 = (const void *)a1[10];
  if (v10)
  {
    CFRelease(v10);
    a1[10] = 0;
  }
}

uint64_t FigSecureStopRecordClassRegisterOnce(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t __fssa_fbo_finalizeRecord_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = fssa_updateRecordGuts(*(_QWORD *)(a1 + 40), *(const void **)(a1 + 48), *(const void **)(a1 + 56), 0, 0, *(const void **)(a1 + 64), *(const void **)(a1 + 72), *(const void **)(a1 + 80), *(_BYTE *)(a1 + 88));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void fssa_createRecordAndAddToInMemoryDatabase(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  __CFDictionary *v5;
  const __CFData *v6;
  int v7;
  void *v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFAbsoluteTime Current;
  const __CFDate *v12;
  double TimeIntervalSinceDate;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  BOOL v20;
  void *value;

  v5 = *(__CFDictionary **)a3;
  v6 = *(const __CFData **)(a3 + 8);
  value = 0;
  v7 = fssr_createSecureStopRecordFromDictionary(a2, &value);
  v8 = value;
  if (!v7)
  {
    if (*((_QWORD *)value + 3))
    {
LABEL_28:
      CFDictionarySetValue(v5, a1, v8);
      v20 = *(_BYTE *)(a3 + 16) != 0;
      goto LABEL_25;
    }
    if (!*((_QWORD *)value + 6))
    {
      if (!*((_QWORD *)value + 7))
        goto LABEL_24;
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Current = CFAbsoluteTimeGetCurrent();
      v12 = CFDateCreate(v10, Current);
      TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v12, *((CFDateRef *)v8 + 4));
      if (v12)
        CFRelease(v12);
      if (TimeIntervalSinceDate <= 1296000.0)
        goto LABEL_24;
      v14 = (const void *)*((_QWORD *)v8 + 10);
      v15 = (const void *)*MEMORY[0x1E0C9AE50];
      *((_QWORD *)v8 + 10) = *MEMORY[0x1E0C9AE50];
      if (v15)
        CFRetain(v15);
      if (!v14)
        goto LABEL_24;
      v16 = v14;
LABEL_23:
      CFRelease(v16);
LABEL_24:
      CFDictionarySetValue(v5, a1, v8);
      v20 = 1;
LABEL_25:
      *(_BYTE *)(a3 + 16) = v20;
LABEL_26:
      CFRelease(v8);
      return;
    }
    if (FigCFEqual())
    {
      v9 = PKDKeyManagerCreateForMSE(*MEMORY[0x1E0C9AE00], 0);
    }
    else
    {
      if (!FigCFEqual())
      {
LABEL_27:
        if (FigSignalErrorAt())
          goto LABEL_26;
        goto LABEL_28;
      }
      v9 = PKDKeyManagerCreateForPastis(*MEMORY[0x1E0C9AE00], 0);
    }
    v17 = (const void *)v9;
    if (v9)
    {
      if (KeyManagerCreateStopSPC(v9, v6, *((const __CFArray **)v8 + 5), *((const void **)v8 + 9), *((CFStringRef *)v8 + 6), (_QWORD *)v8 + 3))
      {
        CFRelease(v17);
        goto LABEL_26;
      }
      v18 = (const void *)*((_QWORD *)v8 + 5);
      if (v18)
      {
        CFRelease(v18);
        *((_QWORD *)v8 + 5) = 0;
      }
      v19 = (const void *)*((_QWORD *)v8 + 9);
      if (v19)
      {
        CFRelease(v19);
        *((_QWORD *)v8 + 9) = 0;
      }
      v16 = v17;
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  if (value)
    goto LABEL_26;
}

uint64_t fssr_createSecureStopRecordFromDictionary(const __CFDictionary *a1, _QWORD *a2)
{
  uint64_t SecureStopRecord;
  _QWORD *v5;
  const void *Value;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  CFTypeRef cf;

  cf = 0;
  SecureStopRecord = fssr_createSecureStopRecord(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
  v5 = cf;
  if ((_DWORD)SecureStopRecord)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    Value = CFDictionaryGetValue(a1, CFSTR("SessionLifespanSPC"));
    if (Value)
      Value = CFRetain(Value);
    v5[2] = Value;
    v7 = CFDictionaryGetValue(a1, CFSTR("SecureStopSPC"));
    if (v7)
      v7 = CFRetain(v7);
    v5[3] = v7;
    v8 = CFDictionaryGetValue(a1, CFSTR("ModifiedDate"));
    if (v8)
      v8 = CFRetain(v8);
    v5[4] = v8;
    v9 = CFDictionaryGetValue(a1, CFSTR("VersionList"));
    if (v9)
      v9 = CFRetain(v9);
    v5[5] = v9;
    v10 = CFDictionaryGetValue(a1, CFSTR("PlaybackSessionID"));
    if (v10)
      v10 = CFRetain(v10);
    v5[6] = v10;
    v11 = CFDictionaryGetValue(a1, CFSTR("AirPlayPlaybackSessionID"));
    if (v11)
      v11 = CFRetain(v11);
    v5[7] = v11;
    v12 = CFDictionaryGetValue(a1, CFSTR("APIProviderID"));
    if (v12)
      v12 = CFRetain(v12);
    v5[8] = v12;
    v13 = CFDictionaryGetValue(a1, CFSTR("AssetID"));
    if (v13)
      v13 = CFRetain(v13);
    v5[9] = v13;
    v14 = CFDictionaryGetValue(a1, CFSTR("AbnormallyTerminated"));
    if (v14)
      v14 = CFRetain(v14);
    v5[10] = v14;
    *a2 = v5;
  }
  return SecureStopRecord;
}

uint64_t FigMetadataReaderCreateForBoxedMetadata(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;

  if (!a2 || !a4)
    return FigSignalErrorAt();
  FigMetadataReaderGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    CMBaseObjectGetDerivedStorage();
    v5 = FigBoxedMetadataCreateFromBlockBuffer();
    if (!(_DWORD)v5)
    {
      v5 = 0;
      *a4 = 0;
    }
  }
  return v5;
}

void boxedreader_Finalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

CFStringRef boxedreader_CopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR(" FigBoxedMetadataReader %p\n  BoxedMetadata = %@\n"), a1, *DerivedStorage);
}

uint64_t boxedreader_CopyValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *);
  uint64_t v19;
  CFTypeRef v20;
  CFTypeRef v21;
  uint64_t v22;
  CFTypeRef v24;
  CFTypeRef cf;

  v24 = 0;
  cf = 0;
  if (a2 && a3)
  {
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v14 && (v15 = v14(a1, a2, a3), v15 >= 1))
    {
      v16 = v15;
      v17 = 0;
      while (1)
      {
        v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v18)
          break;
        v19 = v18(a1, a2, a3, v17, a5, &cf, &v24);
        if ((_DWORD)v19)
          goto LABEL_31;
        if (a4 && CFGetTypeID(cf) != a4)
        {
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (v24)
          {
            CFRelease(v24);
            v24 = 0;
          }
          if (v16 != ++v17)
            continue;
        }
        goto LABEL_15;
      }
      v22 = 4294954514;
    }
    else
    {
LABEL_15:
      if (a6)
      {
        v20 = cf;
        if (cf)
          v20 = CFRetain(cf);
        *a6 = v20;
      }
      if (a7)
      {
        v21 = v24;
        if (v24)
          v21 = CFRetain(v24);
        v22 = 0;
        *a7 = v21;
      }
      else
      {
        v22 = 0;
      }
    }
  }
  else
  {
    v19 = FigSignalErrorAt();
LABEL_31:
    v22 = v19;
  }
  if (cf)
    CFRelease(cf);
  if (v24)
    CFRelease(v24);
  return v22;
}

uint64_t boxedreader_HasKey(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFArrayRef Identifiers;
  const __CFArray *v6;
  uint64_t v7;
  CFStringRef identifierOut;
  CFRange v10;

  Identifiers = boxedreader_getIdentifiers();
  identifierOut = 0;
  if (!a2)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a3)
  {
    v6 = Identifiers;
    if (!CMMetadataCreateIdentifierForKeyAndKeySpace((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, a2, &identifierOut))
    {
      v10.length = CFArrayGetCount(v6);
      v10.location = 0;
      v7 = CFArrayContainsValue(v6, v10, identifierOut);
      goto LABEL_5;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  v7 = 0;
LABEL_5:
  if (identifierOut)
    CFRelease(identifierOut);
  return v7;
}

CFIndex boxedreader_GetKeyCount(int a1, CFTypeRef cf1)
{
  const __CFArray *Identifiers;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;

  if (cf1 && CFEqual(cf1, CFSTR("comn")))
  {
    FigSignalErrorAt();
  }
  else
  {
    Identifiers = boxedreader_getIdentifiers();
    v4 = boxedreader_copyUniqueKeysWithKeySpaceFromIdentifiers((const __CFAllocator *)*MEMORY[0x1E0C9AE00], Identifiers, cf1);
    if (v4)
    {
      v5 = v4;
      Count = CFArrayGetCount(v4);
      CFRelease(v5);
      return Count;
    }
  }
  return 0;
}

uint64_t boxedReader_CopyKeyAtIndex(int a1, CFTypeRef cf1, CFIndex a3, const __CFAllocator *a4, _QWORD *a5)
{
  const __CFArray *Identifiers;
  const __CFArray *v10;
  const void *ValueAtIndex;
  uint64_t v12;

  if ((a3 & 0x8000000000000000) == 0 && a5 && (!cf1 || !CFEqual(cf1, CFSTR("comn"))))
  {
    Identifiers = boxedreader_getIdentifiers();
    v10 = boxedreader_copyUniqueKeysWithKeySpaceFromIdentifiers(a4, Identifiers, cf1);
    if (CFArrayGetCount(v10) <= a3)
    {
      v12 = FigSignalErrorAt();
      if (!v10)
        return v12;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v10, a3);
      if (ValueAtIndex)
        ValueAtIndex = CFRetain(ValueAtIndex);
      v12 = 0;
      *a5 = ValueAtIndex;
      if (!v10)
        return v12;
    }
    CFRelease(v10);
    return v12;
  }
  return FigSignalErrorAt();
}

CFIndex boxedreader_GetItemCount(uint64_t a1, const __CFString *cf1, const void *a3)
{
  int v6;
  CFIndex Count;
  const __CFArray *ItemIndexesMatchingKeyAndKeySpace;

  if (cf1)
  {
    v6 = CFEqual(cf1, CFSTR("comn"));
    if (!a3 && v6)
      goto LABEL_4;
  }
  else if (a3)
  {
LABEL_4:
    FigSignalErrorAt();
    return 0;
  }
  ItemIndexesMatchingKeyAndKeySpace = boxedreader_createItemIndexesMatchingKeyAndKeySpace(a1, cf1, a3);
  Count = CFArrayGetCount(ItemIndexesMatchingKeyAndKeySpace);
  if (ItemIndexesMatchingKeyAndKeySpace)
    CFRelease(ItemIndexesMatchingKeyAndKeySpace);
  return Count;
}

uint64_t boxedreader_CopyItemWithKeyAndIndex(uint64_t a1, const __CFString *cf1, const void *a3, CFIndex a4, const __CFAllocator *a5, _QWORD *a6, _QWORD *a7)
{
  int v14;
  const __CFArray *ItemIndexesMatchingKeyAndKeySpace;
  const __CFNumber *ValueAtIndex;
  __CFDictionary *Mutable;
  const __CFString *IdentifierForLocalID;
  const __CFString *LanguageTagForLocalID;
  const void *DataTypeForLocalID;
  const void *ConformingDataTypesForLocalID;
  CFNumberRef v23;
  uint64_t v24;
  CFLocaleRef v25;
  const __CFLocale *v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int valuePtr;
  uint64_t SizeOfItemAtIndex;
  CFTypeRef keyOut;
  CFStringRef keySpaceOut;
  CFTypeRef cf;

  valuePtr = 0;
  if (a4 < 0)
    return FigSignalErrorAt();
  if (cf1)
  {
    v14 = CFEqual(cf1, CFSTR("comn"));
    if (!a3 && v14)
      return FigSignalErrorAt();
  }
  else if (a3)
  {
    return FigSignalErrorAt();
  }
  ItemIndexesMatchingKeyAndKeySpace = boxedreader_createItemIndexesMatchingKeyAndKeySpace(a1, cf1, a3);
  if (CFArrayGetCount(ItemIndexesMatchingKeyAndKeySpace) <= a4)
  {
    v31 = FigSignalErrorAt();
    if (!ItemIndexesMatchingKeyAndKeySpace)
      return v31;
    goto LABEL_41;
  }
  v32 = a6;
  v33 = a7;
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(ItemIndexesMatchingKeyAndKeySpace, a4);
  CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
  cf = 0;
  Mutable = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  CMBaseObjectGetDerivedStorage();
  FigBoxedMetadataGetFormatDescription();
  FigBoxedMetadataGetLocalIDOfItemAtIndex();
  IdentifierForLocalID = (const __CFString *)FigMetadataFormatDescriptionGetIdentifierForLocalID();
  LanguageTagForLocalID = (const __CFString *)FigMetadataFormatDescriptionGetLanguageTagForLocalID();
  DataTypeForLocalID = (const void *)FigMetadataFormatDescriptionGetDataTypeForLocalID();
  ConformingDataTypesForLocalID = (const void *)FigMetadataFormatDescriptionGetConformingDataTypesForLocalID();
  keyOut = 0;
  keySpaceOut = 0;
  SizeOfItemAtIndex = FigBoxedMetadataGetSizeOfItemAtIndex();
  v23 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &SizeOfItemAtIndex);
  v24 = FigBoxedMetadataCopyValueOfItemAtIndexAsCFType();
  if ((_DWORD)v24
    || (v24 = CMMetadataCreateKeySpaceFromIdentifier(a5, IdentifierForLocalID, &keySpaceOut), (_DWORD)v24)
    || (CFDictionarySetValue(Mutable, CFSTR("keyspace"), keySpaceOut),
        v24 = CMMetadataCreateKeyFromIdentifier(a5, IdentifierForLocalID, &keyOut),
        (_DWORD)v24))
  {
    v31 = v24;
    if (!v23)
      goto LABEL_32;
LABEL_31:
    CFRelease(v23);
    goto LABEL_32;
  }
  CFDictionarySetValue(Mutable, CFSTR("key"), keyOut);
  CFDictionarySetValue(Mutable, CFSTR("dataLength"), v23);
  if (DataTypeForLocalID)
  {
    CFDictionarySetValue(Mutable, CFSTR("dataType"), DataTypeForLocalID);
    CFDictionarySetValue(Mutable, CFSTR("dataTypeNamespace"), CFSTR("com.apple.coremedia"));
  }
  if (ConformingDataTypesForLocalID)
    CFDictionarySetValue(Mutable, CFSTR("conformingDataTypes"), ConformingDataTypesForLocalID);
  if (LanguageTagForLocalID)
  {
    CFDictionarySetValue(Mutable, CFSTR("extendedLanguageTag"), LanguageTagForLocalID);
    v25 = CFLocaleCreate(a5, LanguageTagForLocalID);
    if (v25)
    {
      v26 = v25;
      CFDictionarySetValue(Mutable, CFSTR("locale"), v25);
      v27 = FigMetadataCopyLangCodeFromLocale(v26);
      if (v27)
      {
        v28 = v27;
        CFDictionarySetValue(Mutable, CFSTR("languageCode"), v27);
        CFRelease(v28);
      }
      CFRelease(v26);
    }
  }
  if (v32)
  {
    v29 = cf;
    if (cf)
      v29 = CFRetain(cf);
    *v32 = v29;
  }
  if (!v33)
  {
    v31 = 0;
    if (!v23)
      goto LABEL_32;
    goto LABEL_31;
  }
  if (Mutable)
    v30 = CFRetain(Mutable);
  else
    v30 = 0;
  v31 = 0;
  *v33 = v30;
  if (v23)
    goto LABEL_31;
LABEL_32:
  if (keySpaceOut)
    CFRelease(keySpaceOut);
  if (keyOut)
    CFRelease(keyOut);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (!ItemIndexesMatchingKeyAndKeySpace)
    return v31;
LABEL_41:
  CFRelease(ItemIndexesMatchingKeyAndKeySpace);
  return v31;
}

CFArrayRef boxedreader_getIdentifiers()
{
  const opaqueCMFormatDescription *FormatDescription;

  CMBaseObjectGetDerivedStorage();
  FormatDescription = (const opaqueCMFormatDescription *)FigBoxedMetadataGetFormatDescription();
  return CMMetadataFormatDescriptionGetIdentifiers(FormatDescription);
}

const __CFArray *boxedreader_copyUniqueKeysWithKeySpaceFromIdentifiers(const __CFAllocator *a1, const __CFArray *a2, const void *a3)
{
  const __CFArray *Mutable;
  CFIndex v7;
  const __CFString *ValueAtIndex;
  CFTypeRef keyOut;
  CFRange v11;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (CFArrayGetCount(a2) >= 1)
  {
    v7 = 0;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v7);
      if (boxedreader_identifierMatchesKeySpace(ValueAtIndex, a3))
      {
        keyOut = 0;
        if (!CMMetadataCreateKeyFromIdentifier(a1, ValueAtIndex, &keyOut))
        {
          v11.length = CFArrayGetCount(Mutable);
          v11.location = 0;
          if (!CFArrayContainsValue(Mutable, v11, keyOut))
            CFArrayAppendValue(Mutable, keyOut);
        }
        if (keyOut)
          CFRelease(keyOut);
      }
      ++v7;
    }
    while (v7 < CFArrayGetCount(a2));
  }
  return Mutable;
}

uint64_t boxedreader_identifierMatchesKeySpace(CFStringRef identifier, const void *a2)
{
  uint64_t v3;
  CFStringRef keySpaceOut;

  keySpaceOut = 0;
  if (!a2)
    return 1;
  if (CMMetadataCreateKeySpaceFromIdentifier((CFAllocatorRef)*MEMORY[0x1E0C9AE00], identifier, &keySpaceOut))
    v3 = 0;
  else
    v3 = CFEqual(keySpaceOut, a2);
  if (keySpaceOut)
    CFRelease(keySpaceOut);
  return v3;
}

CFMutableArrayRef boxedreader_createItemIndexesMatchingKeyAndKeySpace(uint64_t a1, const __CFString *a2, const void *a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t NumberOfItems;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  const __CFString *IdentifierForLocalID;
  OSStatus v13;
  CFStringRef v14;
  int v15;
  CFStringRef identifierOut;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CMBaseObjectGetDerivedStorage();
  NumberOfItems = FigBoxedMetadataGetNumberOfItems();
  if (NumberOfItems >= 1)
  {
    v8 = NumberOfItems;
    v9 = 0;
    if (a2)
      v10 = 1;
    else
      v10 = a3 == 0;
    v11 = v10;
    while (1)
    {
      if (!FigBoxedMetadataGetLocalIDOfItemAtIndex())
        goto LABEL_17;
      FigBoxedMetadataGetFormatDescription();
      IdentifierForLocalID = (const __CFString *)FigMetadataFormatDescriptionGetIdentifierForLocalID();
      if (!boxedreader_identifierMatchesKeySpace(IdentifierForLocalID, a2))
        goto LABEL_17;
      identifierOut = 0;
      if ((v11 & 1) == 0)
      {
        FigSignalErrorAt();
        goto LABEL_17;
      }
      if (!a3)
      {
LABEL_16:
        FigCFArrayAppendInt32();
        goto LABEL_17;
      }
      v13 = CMMetadataCreateIdentifierForKeyAndKeySpace(v5, a3, a2, &identifierOut);
      v14 = identifierOut;
      if (!v13)
        break;
      v15 = 0;
      if (identifierOut)
        goto LABEL_14;
LABEL_15:
      if (v15)
        goto LABEL_16;
LABEL_17:
      if (v8 == ++v9)
        return Mutable;
    }
    v15 = CFEqual(IdentifierForLocalID, identifierOut);
    v14 = identifierOut;
    if (!identifierOut)
      goto LABEL_15;
LABEL_14:
    CFRelease(v14);
    goto LABEL_15;
  }
  return Mutable;
}

uint64_t CreatePesPrivateForMP3(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  if (a1[6])
  {
    v2 = (void (*)(_QWORD *))a1[107];
    if (v2)
      v2(a1);
    a1[6] = 0;
  }
  v3 = malloc_type_calloc(1uLL, 0x130uLL, 0x10B0040DDD21EB6uLL);
  if (!v3)
    return 12;
  v4 = v3;
  result = 0;
  *v4 = v4 + 37;
  v4[2] = (char *)v4 + 300;
  v4[3] = 4;
  v4[4] = MP3CheckHeader;
  v4[5] = MP3CompareHeaders;
  v4[6] = MP3GetSamplesPerFrame;
  v4[7] = MP3GetSampleFrequency;
  v4[8] = MP3GetFrameSize;
  a1[105] = PesMP3ProcessData;
  a1[106] = PesMP3CleanPrivateData;
  a1[107] = PesMP3DeletePrivateData;
  a1[6] = v4;
  return result;
}

BOOL MP3CheckHeader(unsigned int *a1)
{
  _BOOL8 result;
  unsigned int v3;
  int v4;
  _BOOL4 v5;

  result = 0;
  v3 = bswap32(*a1);
  if ((v3 & 0x60000) != 0 && v3 >= 0xFFE00000 && (v3 & 0x180000) != 0x80000)
  {
    v4 = v3 & 0xF000;
    if ((v3 & 0xF000) != 0)
    {
      v5 = (~v3 & 0xC00) != 0;
      return v4 != 61440 && v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL MP3CompareHeaders(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  char *v4;
  _BYTE temporaryBlock[4];

  v4 = 0;
  return !CMBlockBufferAccessDataBytes(a1, 0, 4uLL, temporaryBlock, &v4) && ((*a2 ^ *(_DWORD *)v4) & 0xCF8FF) == 0;
}

uint64_t PesMP3ProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, size_t a5, uint64_t a6)
{
  return MPEGAudioProcessData(a1, *(_QWORD **)(a1 + 48), a2, a3, a4, a5, a6);
}

void PesMP3CleanPrivateData(uint64_t a1)
{
  MPEGAudioCleanPrivateData(*(_QWORD *)(a1 + 48));
}

void PesMP3DeletePrivateData(uint64_t a1)
{
  MPEGAudioCleanPrivateData(*(_QWORD *)(a1 + 48));
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t FigCaptionRendererRegionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererRegionProtocolGetProtocolID_sRegisterFigCaptionRendererRegionProtocolTypeOnce, RegisterFigCaptionRendererRegionProtocolType);
  return sFigCaptionRendererRegionProtocolID;
}

uint64_t RegisterFigCaptionRendererRegionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigTTMLCaptionWriterGetClassID()
{
  MEMORY[0x19402F294](&FigTTMLCaptionWriterGetClassID_sRegisterFigTTMLCaptionWriterBaseTypeOnce, figTTMLCaptionWriter_RegisterFigTTMLCaptionWriterBaseType);
  return sFigTTMLCaptionWriterClassID;
}

uint64_t figTTMLCaptionWriter_RegisterFigTTMLCaptionWriterBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigTTMLCaptionWriterGetTypeID()
{
  MEMORY[0x19402F294](&FigTTMLCaptionWriterGetClassID_sRegisterFigTTMLCaptionWriterBaseTypeOnce, figTTMLCaptionWriter_RegisterFigTTMLCaptionWriterBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigTTMLCaptionWriterAddCaption(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, _OWORD *);
  __int128 v7;
  _OWORD v9[3];

  v6 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v6)
    return 4294954514;
  v7 = a3[1];
  v9[0] = *a3;
  v9[1] = v7;
  v9[2] = a3[2];
  return v6(a1, a2, v9);
}

uint64_t FigTTMLCaptionWriterFinish(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigTTMLCaptionWriterInvalidate(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  if (!a1)
    return 4294954516;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

CFStringRef figTTMLCaptionWriter_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLCaptionWriter %p]"), a1);
}

uint64_t FigVideoTargetGetClassID()
{
  MEMORY[0x19402F294](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType);
  return sFigVideoTargetClassID;
}

uint64_t RegisterFigVideoTargetType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVideoTargetGetTypeID()
{
  MEMORY[0x19402F294](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigVideoTargetCreateLocalWithVideoReceiverEndpointID(const __CFAllocator *a1, void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  if (a4 && a2)
  {
    FigCFDictionaryGetBooleanIfPresent();
    v7 = FigVideoReceiverCreateRemote((uint64_t)a1, a2, 0, &cf);
    v8 = cf;
    if ((_DWORD)v7)
    {
      v9 = v7;
      if (!cf)
        return v9;
    }
    else
    {
      v9 = videotarget_createWithReceiver(a1, cf, a4);
      v8 = cf;
      if (!cf)
        return v9;
    }
    CFRelease(v8);
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t videotarget_createWithReceiver(const __CFAllocator *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  CFTypeRef v8;
  dispatch_queue_t v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  CFTypeRef v16;
  const void *Value;
  const void *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  const __CFString **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v25;
  uint64_t (*v26)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFString *v27;
  CFRange v28;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef cf;
  UInt8 buffer[8];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19402F294](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType);
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    goto LABEL_50;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v8 = CFRetain(a2);
  else
    v8 = 0;
  *(_QWORD *)(DerivedStorage + 8) = v8;
  v9 = dispatch_queue_create("com.apple.coremedia.videotarget.notification", 0);
  *(_QWORD *)(DerivedStorage + 16) = v9;
  if (!v9)
    goto LABEL_49;
  *(_BYTE *)(DerivedStorage + 88) = 0;
  v10 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 80) = v10;
  if (!v10)
    goto LABEL_49;
  v6 = FigCFWeakReferenceTableCreate();
  if ((_DWORD)v6)
    goto LABEL_50;
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  cf = 0;
  CMBaseObject = FigVideoReceiverGetCMBaseObject(a2);
  v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
  v13 = v12 != 0;
  if (!v12)
  {
    v14 = 4294954514;
LABEL_18:
    v16 = cf;
    v15 = v13;
    goto LABEL_19;
  }
  v14 = v12(CMBaseObject, CFSTR("PlaybackStartupPreventionAssertionInfo"), a1, &cf);
  v15 = v14 == 0;
  v16 = cf;
  if (!(_DWORD)v14 && cf)
  {
    buffer[0] = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if (buffer[0])
    {
      *(_BYTE *)(DerivedStorage + 88) = buffer[0];
      Value = (const void *)FigCFDictionaryGetValue();
      v18 = *(const void **)(DerivedStorage + 96);
      *(_QWORD *)(DerivedStorage + 96) = Value;
      if (Value)
        CFRetain(Value);
      if (v18)
        CFRelease(v18);
    }
    v14 = 0;
    goto LABEL_18;
  }
LABEL_19:
  if (v16)
    CFRelease(v16);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 80));
  if (v15)
  {
    v19 = FigVideoReceiverGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v20 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (!v20)
      goto LABEL_35;
    v21 = (const __CFString **)(DerivedStorage + 24);
    v6 = v20(v19, CFSTR("LoggingIdentifier"), a1, DerivedStorage + 24);
    if ((_DWORD)v6)
      goto LABEL_50;
    *(_BYTE *)(DerivedStorage + 32) = 1;
    v22 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 40) = v22;
    if (v22)
    {
      v23 = FigVideoReceiverGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
      v24 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
      if (v24)
      {
        v6 = v24(v23, CFSTR("ClientPreferredDataChannelGroups"), a1, &v32);
        if ((_DWORD)v6)
          goto LABEL_50;
        v6 = FigDataChannelGroupsArrayCreateFromDictionary(a1, (CFDictionaryRef)v32, (__CFArray **)&v31);
        if ((_DWORD)v6)
          goto LABEL_50;
        *(_QWORD *)(DerivedStorage + 56) = v31;
        v31 = 0;
        v25 = FigVideoReceiverGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
        v26 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
        if (v26)
        {
          v6 = v26(v25, CFSTR("ClientDataChannelSettings"), a1, &v30);
          if (!(_DWORD)v6)
          {
            v6 = (uint64_t)videoTarget_deserializeAndSaveDataChannelSettings((uint64_t)v33, (const __CFArray *)v30);
            if (!(_DWORD)v6)
            {
              if (*MEMORY[0x1E0CA1FC0] == 1)
              {
                v27 = *v21;
                *(_QWORD *)buffer = 0;
                if (v27)
                {
                  if (CFStringGetLength(v27) <= 8)
                    v28.length = CFStringGetLength(v27);
                  else
                    v28.length = 8;
                  v28.location = 0;
                  CFStringGetBytes(v27, v28, 0, 0x3Fu, 0, buffer, 8, 0);
                }
                strncpy((char *)&cf, (const char *)buffer, 8uLL);
                kdebug_trace();
              }
              v14 = 0;
              *a3 = v33;
              v33 = 0;
              goto LABEL_40;
            }
          }
LABEL_50:
          v14 = v6;
          goto LABEL_40;
        }
      }
LABEL_35:
      v14 = 4294954514;
      goto LABEL_40;
    }
LABEL_49:
    v6 = FigSignalErrorAt();
    goto LABEL_50;
  }
LABEL_40:
  if (v30)
    CFRelease(v30);
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  return v14;
}

uint64_t FigVideoTargetCreateLocalWithVideoReceiver(const __CFAllocator *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  if (a4 && a2)
    return videotarget_createWithReceiver(a1, a2, a4);
  else
    return FigSignalErrorAt();
}

CFStringRef FigVideoTargetCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVideoTarget %p]"), a1);
}

const void *videoTarget_deserializeAndSaveDataChannelSettings(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  const void *v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  cf = 0;
  if (!a2)
  {
    v7 = *(const void **)(DerivedStorage + 64);
    *(_QWORD *)(DerivedStorage + 64) = 0;
    if (!v7)
      goto LABEL_9;
    goto LABEL_8;
  }
  v5 = FigVideoReceiverDataChannelSettingsCopyDeserialized(a2, (__CFArray **)&cf);
  if ((_DWORD)v5)
  {
    v7 = (const void *)v5;
    goto LABEL_9;
  }
  v6 = cf;
  v7 = *(const void **)(v4 + 64);
  *(_QWORD *)(v4 + 64) = cf;
  if (v6)
    CFRetain(v6);
  if (v7)
  {
LABEL_8:
    CFRelease(v7);
    v7 = 0;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v7;
}

void videoTarget_Finalize()
{
  _QWORD *DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v1 = DerivedStorage[2];
  if (v1)
    dispatch_release(v1);
  v2 = (const void *)DerivedStorage[7];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[7] = 0;
  }
  v3 = (const void *)DerivedStorage[8];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[8] = 0;
  }
  v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  FigSimpleMutexDestroy();
  v5 = (const void *)DerivedStorage[13];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[13] = 0;
  }
  v6 = (const void *)DerivedStorage[12];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[12] = 0;
  }
  FigSimpleMutexDestroy();
  v7 = (const void *)DerivedStorage[1];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[1] = 0;
  }
  v8 = (const void *)DerivedStorage[3];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[3] = 0;
  }
}

__CFString *videoTarget_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  uint64_t v5;
  CFIndex v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = *(_QWORD *)(DerivedStorage + 24);
  v6 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoTarget [%p|%@] retainCount: %ld>"), a1, v5, v6);
  return Mutable;
}

uint64_t videoTarget_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const __CFString *v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD *);
  uint64_t result;
  void *Copy;
  void *v12;
  const void *v13;

  if (!a2 || !a4)
    return FigSignalErrorAt();
  *a4 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CFSTR("RefreshRate");
  if (!FigCFEqual())
  {
    v7 = CFSTR("DesiredPixelCount");
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        Copy = (void *)CFStringCreateCopy(a3, *(CFStringRef *)(DerivedStorage + 24));
        if (!Copy)
        {
          FigSignalErrorAt();
          return 0;
        }
      }
      else
      {
        if (!FigCFEqual())
          return 4294954509;
        v13 = *(const void **)(DerivedStorage + 8);
        if (!v13)
          return 4294951734;
        Copy = (void *)CFRetain(v13);
      }
      v12 = Copy;
      result = 0;
      *a4 = v12;
      return result;
    }
  }
  CMBaseObject = FigVideoReceiverGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (v9)
    return v9(CMBaseObject, v7, a3, a4);
  else
    return 4294954514;
}

uint64_t videoTarget_SetProperty(const void *a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6;
  BOOL v7;
  BOOL v8;

  if (a1
    && ((v6 = CFGetTypeID(a1),
         MEMORY[0x19402F294](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType),
         v6 == CMBaseClassGetCFTypeID())
      ? (v7 = a2 == 0)
      : (v7 = 1),
        !v7 ? (v8 = a3 == 0) : (v8 = 1),
        !v8 && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8)))
  {
    return 4294954509;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void videoTarget_reflectReceiverNotification(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  __CFDictionary *v9;
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  const __CFDictionary *Value;
  const __CFDictionary *v13;
  CFTypeRef v14;
  const void *v15;
  const __CFArray *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a3, CFSTR("ClientRenderOptionChanged")))
  {
    v9 = 0;
    goto LABEL_21;
  }
  if (CFEqual(a3, CFSTR("PreferredDataChannelGroupsChanged")))
  {
    if (a5)
    {
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      Value = (const __CFDictionary *)CFDictionaryGetValue(a5, CFSTR("PreferredDataChannelGroups"));
      if (Value)
      {
        v13 = Value;
        CFDictionaryAddValue(Mutable, CFSTR("PreferredDataChannelGroups"), Value);
        cf = 0;
        FigDataChannelGroupsArrayCreateFromDictionary(v10, v13, (__CFArray **)&cf);
        v14 = cf;
        if (cf)
        {
          v15 = *(const void **)(DerivedStorage + 56);
          *(_QWORD *)(DerivedStorage + 56) = cf;
          CFRetain(v14);
          if (v15)
            CFRelease(v15);
          if (cf)
            CFRelease(cf);
        }
      }
      LODWORD(cf) = 0;
      FigCFDictionaryGetInt32IfPresent();
      if ((int)cf >= 1)
      {
        *(_DWORD *)(DerivedStorage + 72) = (_DWORD)cf;
        FigCFDictionarySetInt32();
      }
LABEL_19:
      v9 = Mutable;
      goto LABEL_21;
    }
  }
  else
  {
    if (!CFEqual(a3, CFSTR("DataChannelSettingsChanged")))
    {
      if (CFEqual(a3, CFSTR("PlaybackStartupPreventionAssertionAcquired")))
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
        v18 = (const void *)FigCFDictionaryGetValue();
        v19 = *(const void **)(DerivedStorage + 96);
        *(_QWORD *)(DerivedStorage + 96) = v18;
        if (v18)
          CFRetain(v18);
        if (v19)
          CFRelease(v19);
        *(_BYTE *)(DerivedStorage + 88) = 1;
      }
      else
      {
        if (!CFEqual(a3, CFSTR("PlaybackStartupPreventionAssertionReleased")))
          return;
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
        v20 = *(const void **)(DerivedStorage + 96);
        if (v20)
        {
          CFRelease(v20);
          *(_QWORD *)(DerivedStorage + 96) = 0;
        }
        *(_BYTE *)(DerivedStorage + 88) = 0;
      }
      FigCFWeakReferenceTableApplyFunction();
      JUMPOUT(0x19402EF04);
    }
    if (a5)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v16 = (const __CFArray *)CFDictionaryGetValue(a5, CFSTR("DataChannelSettings"));
      if (!videoTarget_deserializeAndSaveDataChannelSettings(a2, v16))
      {
        v17 = *(const void **)(DerivedStorage + 64);
        if (v17)
          CFDictionaryAddValue(Mutable, CFSTR("DataChannelSettings"), v17);
      }
      LODWORD(cf) = 0;
      FigCFDictionaryGetInt32IfPresent();
      goto LABEL_19;
    }
  }
  v9 = 0;
LABEL_21:
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v9)
    CFRelease(v9);
}

void fvt_playbackStartupPreventionAssertionStateChangedWhileHoldingMutex(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, CFMutableDictionaryRef);

  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    FigCFDictionarySetBoolean();
    FigCFDictionarySetValue();
    FigBaseObject = FigImageQueueGetFigBaseObject(a2);
    v6 = *(void (**)(uint64_t, const __CFString *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
    if (v6)
      v6(FigBaseObject, CFSTR("RendererPreparationInfo"), v4);
    CFRelease(v4);
  }
}

uint64_t videoTarget_createFigImageQueue(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t Key;
  uint64_t v7;
  CFTypeID v8;
  const __CFAllocator *v9;
  uint64_t v10;
  CFAllocatorRef *v11;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v13;
  uint64_t UInt32;
  const void *v15;
  unint64_t v16;
  const void *UInt64;
  uint64_t v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t FigBaseObject;
  uint64_t (*v23)(uint64_t, const __CFString *, _QWORD);
  CFMutableDictionaryRef v24;
  CFMutableDictionaryRef v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, const __CFString *, CFMutableDictionaryRef);
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1
    || (v7 = DerivedStorage,
        v8 = CFGetTypeID(a1),
        MEMORY[0x19402F294](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType),
        v8 != CMBaseClassGetCFTypeID())
    || !a3)
  {
    Key = FigSignalErrorAt();
    goto LABEL_31;
  }
  v9 = CFGetAllocator(a1);
  v10 = CMBaseObjectGetDerivedStorage();
  v11 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!v10 || (Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
  {
    Key = FigSignalErrorAt();
    goto LABEL_37;
  }
  v13 = Mutable;
  UInt32 = FigCFNumberCreateUInt32();
  if (!UInt32)
  {
    Key = FigSignalErrorAt();
    CFRelease(v13);
LABEL_37:
    v20 = 0;
    if ((_DWORD)Key)
      goto LABEL_29;
    goto LABEL_17;
  }
  v15 = (const void *)UInt32;
  do
    v16 = __ldaxr(&videoTarget_createCAImageQueue_uniqueCounter);
  while (__stlxr(v16 + 1, &videoTarget_createCAImageQueue_uniqueCounter));
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  if (!UInt64
    || (CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E0CD2FC0], v15),
        CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E0CD2FC8], UInt64),
        (v18 = FigCFWeakReferenceHolderCreateWithReferencedObject()) == 0))
  {
    Key = FigSignalErrorAt();
    v20 = 0;
LABEL_14:
    CFRelease(v13);
    CFRelease(v15);
    if (!UInt64)
      goto LABEL_16;
    goto LABEL_15;
  }
  v19 = (const void *)v18;
  v20 = (const void *)CAXPCImageQueueCreate();
  if (v20)
  {
    CAImageQueueSetFlags();
    Key = 0;
    goto LABEL_14;
  }
  Key = FigSignalErrorAt();
  CFRelease(v19);
  CFRelease(v13);
  CFRelease(v15);
LABEL_15:
  CFRelease(UInt64);
LABEL_16:
  if ((_DWORD)Key)
    goto LABEL_29;
LABEL_17:
  v21 = FigImageQueueCreateForCoreAnimation((uint64_t)v9, v20, &cf);
  if (!(_DWORD)v21)
  {
    FigBaseObject = FigImageQueueGetFigBaseObject(cf);
    v23 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v23)
    {
      Key = 4294954514;
      goto LABEL_29;
    }
    v21 = v23(FigBaseObject, CFSTR("EnableImageQueueTiming"), *MEMORY[0x1E0C9AE50]);
    if (!(_DWORD)v21)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 80));
      if (!*(_BYTE *)(v7 + 88))
        goto LABEL_24;
      v24 = CFDictionaryCreateMutable(*v11, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v24)
      {
        v25 = v24;
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        v26 = FigImageQueueGetFigBaseObject(cf);
        v27 = *(uint64_t (**)(uint64_t, const __CFString *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 56);
        if (v27)
        {
          Key = v27(v26, CFSTR("RendererPreparationInfo"), v25);
          CFRelease(v25);
          if (!(_DWORD)Key)
          {
LABEL_24:
            Key = FigCFWeakReferenceTableAddValueAndGetKey();
            if (!(_DWORD)Key)
            {
              MEMORY[0x19402EF04](*(_QWORD *)(v7 + 80));
              *a3 = cf;
              cf = 0;
              goto LABEL_29;
            }
          }
        }
        else
        {
          CFRelease(v25);
          Key = 4294954514;
        }
      }
      else
      {
        Key = FigSignalErrorAt();
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v7 + 80));
      goto LABEL_29;
    }
  }
  Key = v21;
LABEL_29:
  if (v20)
    CFRelease(v20);
LABEL_31:
  if (cf)
    CFRelease(cf);
  return Key;
}

uint64_t videoTarget_beginTransitionToImageQueueConfigurationAtHostTime()
{
  return 4294951630;
}

uint64_t videoTarget_beginTransitionToImageQueueConfigurationImmediately()
{
  return 4294951630;
}

uint64_t videoTarget_createFigDataQueue(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v9 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  if (!v9)
    return FigSignalErrorAt();
  v14 = *a3;
  v15 = *((_QWORD *)a3 + 2);
  v12 = *a4;
  v13 = *((_QWORD *)a4 + 2);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 48);
  if (!v10)
    return 4294954514;
  v18 = v14;
  v19 = v15;
  v16 = v12;
  v17 = v13;
  return v10(v9, a2, &v18, &v16, a5);
}

uint64_t videoTarget_createFigDataChannelResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t videoTarget_copyPreferredDataChannelGroups(uint64_t a1, const __CFAllocator *a2, CFArrayRef *a3)
{
  const __CFArray *v5;
  CFArrayRef Copy;

  if (!a3)
    return FigSignalErrorAt();
  v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 56);
  if (!v5)
    return FigSignalErrorAt();
  Copy = CFArrayCreateCopy(a2, v5);
  if (!Copy)
    return FigSignalErrorAt();
  *a3 = Copy;
  return 0;
}

uint64_t videoTarget_copyDataChannelSettings(uint64_t a1, const __CFAllocator *a2, CFArrayRef *a3)
{
  const __CFArray *v5;
  CFArrayRef Copy;

  if (a3)
  {
    v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 64);
    if (v5)
    {
      Copy = CFArrayCreateCopy(a2, v5);
      if (Copy)
      {
LABEL_4:
        *a3 = Copy;
        return 0;
      }
    }
    else
    {
      Copy = CFArrayCreate(a2, 0, 0, MEMORY[0x1E0C9B378]);
      if (Copy)
        goto LABEL_4;
    }
  }
  return FigSignalErrorAt();
}

uint64_t videoTarget_beginTransitionToDataChannelConfigurationAtHostTime(uint64_t a1, const void *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  if (!a2 || (*(_BYTE *)(a3 + 12) & 1) == 0)
    return FigSignalErrorAt();
  v4 = *(_OWORD *)a3;
  v5 = *(_QWORD *)(a3 + 16);
  return videoTarget_beginTransitionToDataChannelConfigurationInternal(a1, a2, 0, &v4);
}

uint64_t videoTarget_beginTransitionToDataChannelConfigurationImmediately(uint64_t a1, const void *a2)
{
  if (a2)
    return videoTarget_beginTransitionToDataChannelConfigurationInternal(a1, a2, 1, MEMORY[0x1E0CA2E18]);
  else
    return FigSignalErrorAt();
}

uint64_t videoTarget_setActive(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v6;
  uint64_t v7;
  void (*v8)(uint64_t, const void *, uint64_t, __int128 *);
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
    if (*(unsigned __int8 *)(v4 + 32) == a2)
    {
LABEL_15:
      MEMORY[0x19402EF04](*(_QWORD *)(v4 + 40));
      return 0;
    }
    if (dword_1EE2A2F80)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = *(const void **)(v4 + 48);
    if (a2)
    {
      if (!v6)
      {
        LOBYTE(a2) = 1;
LABEL_14:
        *(_BYTE *)(v4 + 32) = a2;
        goto LABEL_15;
      }
      v7 = *(_QWORD *)(v4 + 8);
      if (v7)
      {
        v8 = *(void (**)(uint64_t, const void *, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
        if (v8)
        {
          v10 = *MEMORY[0x1E0CA2E18];
          v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          v8(v7, v6, 1, &v10);
        }
      }
      v6 = *(const void **)(v4 + 48);
      LOBYTE(a2) = 1;
    }
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v4 + 48) = 0;
    }
    goto LABEL_14;
  }
  return FigSignalErrorAt();
}

void videoTarget_sendImageQueueMessageToReceiver(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *v6;
  const void *v7;
  CFTypeID v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t Identifier;
  int v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    v7 = v6;
    v8 = CFGetTypeID(v6);
    MEMORY[0x19402F294](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType);
    if (v8 == CMBaseClassGetCFTypeID()
      && a1
      && a2
      && (DerivedStorage = CMBaseObjectGetDerivedStorage(), *(_QWORD *)(DerivedStorage + 8)))
    {
      v10 = DerivedStorage;
      Identifier = CAImageQueueGetIdentifier();
      v12 = CAXPCImageQueueCommandForMessage();
      if (v12 == 4)
      {
        if (a3)
          CFRelease(a3);
        v15 = *(_QWORD *)(v10 + 8);
        v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v16)
          v16(v15, Identifier);
      }
      else if (v12 == 1)
      {
        v13 = *(_QWORD *)(v10 + 8);
        v14 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v14)
          v14(v13, Identifier, 0, a2);
      }
      else
      {
        v17 = *(_QWORD *)(v10 + 8);
        v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v18)
          v18(v17, Identifier, a2);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t videoTarget_beginTransitionToDataChannelConfigurationInternal(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const void *, uint64_t, __int128 *);
  uint64_t v11;
  const void *v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)(v8 + 32))
  {
    v9 = *(_QWORD *)(v8 + 8);
    v14 = *a4;
    v15 = *((_QWORD *)a4 + 2);
    v10 = *(uint64_t (**)(uint64_t, const void *, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
    if (v10)
    {
      v16 = v14;
      v17 = v15;
      v11 = v10(v9, a2, a3, &v16);
    }
    else
    {
      v11 = 4294954514;
    }
  }
  else
  {
    if ((_DWORD)a3)
    {
      v12 = *(const void **)(v8 + 48);
      *(_QWORD *)(v8 + 48) = a2;
      if (a2)
        CFRetain(a2);
      if (v12)
        CFRelease(v12);
    }
    v11 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v8 + 40));
  return v11;
}

uint64_t MTFinishUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t MTBeginUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t MTEnsureReadyToCollectIncrementalCoverageData()
{
  return 4294949395;
}

uint64_t MTSetCodeCoverageFilePathPattern()
{
  return 4294949395;
}

uint64_t CreatePesPrivateForMPEG2Video(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  _QWORD *v3;
  _QWORD *v4;

  if (a1[6])
  {
    v2 = (void (*)(_QWORD *))a1[107];
    if (v2)
      v2(a1);
    a1[6] = 0;
  }
  v3 = malloc_type_calloc(1uLL, 0x130uLL, 0x10B004003C638B1uLL);
  if (!v3)
    return 12;
  v4 = v3;
  a1[6] = v3;
  a1[105] = MPEG2VideoProcessData;
  a1[106] = MPEG2VideoCleanPrivateData;
  a1[107] = MPEG2VideoDeletePrivateData;
  a1[108] = MPEG2VideoFlushFrames;
  PesFrameHeadersInit((uint64_t)(a1 + 68), 8uLL);
  MPEG2VideoCleanPrivateData((uint64_t)a1);
  v4[16] = 0;
  v4 += 16;
  v4[1] = v4;
  FrameQueueEntryInit((uint64_t)(v4 + 2));
  return 0;
}

uint64_t MPEG2VideoProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  return MPEG2VideoProcessWork(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t *MPEG2VideoCleanPrivateData(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)v1 = -1;
  *(_DWORD *)(v1 + 80) = 0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_QWORD *)(v1 + 72) = 0;
  v2 = *(const void **)(v1 + 88);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(v1 + 88) = 0;
  }
  *(_WORD *)(v1 + 113) = 0;
  *(_BYTE *)(v1 + 296) = 0;
  *(_DWORD *)(v1 + 300) = 0;
  FrameQueueEntryClean(v1 + 144);
  return FrameQueueClean(v1 + 128);
}

void MPEG2VideoDeletePrivateData(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  MPEG2VideoCleanPrivateData(a1);
  PesFrameHeaderDestroy((_QWORD *)(v2 + 232));
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t *MPEG2VideoFlushFrames(_QWORD *a1)
{
  _QWORD *v2;
  OpaqueCMBlockBuffer *v3;
  const void *v4;
  char v6;
  size_t v7;

  v2 = (_QWORD *)a1[6];
  v7 = 0;
  v6 = 0;
  v3 = (OpaqueCMBlockBuffer *)v2[11];
  if (v3)
  {
    PesAddBlockBufferToFrameBlockBuffer((uint64_t)a1, v3, v2[12], v2[13], 0, &v7, &v6);
    v4 = (const void *)v2[11];
    if (v4)
    {
      CFRelease(v4);
      v2[11] = 0;
    }
  }
  if (a1[77] || a1[64])
    MPEG2VideoEmitBuffer((uint64_t)a1, (uint64_t)v2);
  FigMPEG2VideoFrameFlush((uint64_t)a1);
  return MPEG2VideoCleanPrivateData((uint64_t)a1);
}

uint64_t MPEG2VideoSniff(OpaqueCMBlockBuffer *a1)
{
  size_t DataLength;
  size_t v3;
  int v4;
  int v5;
  int v6;
  char v7;
  unsigned int v8;
  size_t v9;
  uint64_t result;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  int v16;
  char *v17;
  _BYTE temporaryBlock[10];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DataLength = CMBlockBufferGetDataLength(a1);
  v3 = DataLength - 4;
  if (DataLength == 4)
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v5 = 0;
    v4 = 0;
LABEL_26:
    if (v5)
      v14 = v6 == 0;
    else
      v14 = 1;
    v16 = !v14 && v4 != 0;
    result = 4294954325;
    if (v7 || v16)
    {
      if (((v8 > 4) & v16) != 0)
        return 0;
      else
        return 4294954325;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v17 = 0;
    while (1)
    {
      result = CMBlockBufferAccessDataBytes(a1, v9, 4uLL, temporaryBlock, &v17);
      if ((_DWORD)result)
        break;
      if (*v17 || v17[1] || v17[2] != 1)
      {
        v13 = 1;
      }
      else
      {
        if (!v9)
          v7 = 1;
        v11 = v17[3];
        v12 = v11 - 176 > 6 || ((1 << (v11 + 80)) & 0x43) == 0;
        if (!v12 || v11 > 0xB8)
          return 4294954325;
        ++v8;
        if (v11 == 184)
        {
          v6 = 1;
        }
        else if (v11 == 179)
        {
          v5 = 1;
        }
        else if (!v17[3])
        {
          v4 = 1;
        }
        v13 = 4;
      }
      v9 += v13;
      if (v9 >= v3)
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t MPEG2VideoInitialize(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v5;

  a1[21] = MPEG2VideoInject;
  a1[22] = MPEG2VideoReset;
  v2 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040A345989DuLL);
  if (!v2)
    return 12;
  *(_QWORD *)v2 = a1;
  v2[10] = 1;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = v2 + 6;
  v3 = a1[2];
  *((_QWORD *)v2 + 1) = v3;
  if (v3)
    *(_QWORD *)(v3 + 16) = v2 + 2;
  v5 = 0;
  a1[2] = v2;
  *((_QWORD *)v2 + 2) = a1 + 2;
  return AddPes((uint64_t)a1, (uint64_t)v2, 0, 1836476772, 0, 1, 1, 1, 1, &v5);
}

uint64_t MPEG2VideoInject(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  size_t DataLength;
  __int128 v8;
  __int128 v9;

  v8 = 0u;
  v9 = 0u;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 451))
  {
    v5 = 0;
  }
  else
  {
    *(_QWORD *)&v8 = 10000;
    v5 = 1;
    BYTE8(v9) = 1;
    *(_BYTE *)(v4 + 451) = 1;
  }
  *(_WORD *)((char *)&v9 + 9) = v5;
  *(_QWORD *)&v9 = a3;
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  return MPEG2VideoProcessWork(v4, theBuffer, 0, 0, DataLength, (uint64_t)&v8, 1);
}

uint64_t MPEG2VideoReset(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
    *(_BYTE *)(v1 + 451) = 0;
  return result;
}

uint64_t MPEG2VideoProcessWork(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, uint64_t a5, uint64_t a6, int a7)
{
  char *v7;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  __int128 v12;
  size_t v13;
  size_t v14;
  uint64_t DataPointer;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  unint64_t v22;
  void *v23;
  CFIndex v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  _BYTE *v31;
  void *v32;
  int v33;
  size_t v34;
  OpaqueCMBlockBuffer *v35;
  size_t v36;
  unint64_t v37;
  size_t v38;
  const void *v39;
  uint64_t v40;
  BOOL v41;
  char v42;
  int v43;
  uint64_t v44;
  OpaqueCMBlockBuffer *v45;
  const void *v46;
  size_t v47;
  const __CFAllocator *blockAllocator;
  size_t v50;
  size_t v51;
  const __CFAllocator *allocator;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  CMBlockBufferRef lengthAtOffsetOut;
  char v62;
  size_t v63;
  char *dataPointerOut;

  v57 = a5;
  v7 = a4;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 616);
  if (*(_QWORD *)(v9 + 88))
    v10 = v10 + *(_QWORD *)(v9 + 104) - 4;
  if (a2)
    v11 = a3;
  else
    v11 = 0;
  if (*(_BYTE *)(a6 + 24))
  {
    *(_QWORD *)(v9 + 72) = 0;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v9 + 56);
    v12 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)a6;
    *(_OWORD *)(v9 + 56) = v12;
  }
  v63 = 0;
  dataPointerOut = 0;
  v62 = 0;
  v13 = v11 + a5;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
  v58 = v11;
  v59 = a1 + 544;
  blockAllocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v50 = v11 + a5;
  while (1)
  {
    if (v7)
    {
      dataPointerOut = v7;
      v14 = v13;
    }
    else
    {
      lengthAtOffsetOut = 0;
      DataPointer = CMBlockBufferGetDataPointer(a2, v11, (size_t *)&lengthAtOffsetOut, 0, &dataPointerOut);
      v14 = (size_t)lengthAtOffsetOut + v11;
      if (v13 < (unint64_t)lengthAtOffsetOut + v11)
        v14 = v13;
      if ((_DWORD)DataPointer)
      {
LABEL_122:
        v44 = DataPointer;
        goto LABEL_123;
      }
    }
    if (v11 < v14)
      break;
LABEL_114:
    if (v11 >= v13)
    {
      if (!a2 || !*(_DWORD *)(v9 + 80) || !*(_BYTE *)(v9 + 112))
        return 0;
      v45 = *(OpaqueCMBlockBuffer **)(v9 + 88);
      if (v45)
      {
        v44 = PesAddBlockBufferToFrameBlockBuffer(a1, v45, *(_QWORD *)(v9 + 96), *(_QWORD *)(v9 + 104), 0, &v63, &v62);
        v46 = *(const void **)(v9 + 88);
        v47 = v58;
        if (v46)
          CFRelease(v46);
      }
      else
      {
        v44 = 0;
        v47 = v58;
      }
      *(_QWORD *)(v9 + 88) = CFRetain(a2);
      *(_QWORD *)(v9 + 96) = v47;
      *(_QWORD *)(v9 + 104) = v57;
      return v44;
    }
  }
  v16 = 3 - v11;
  v17 = v11 - 3;
  v51 = v14;
  v60 = -(uint64_t)v14;
  while (1)
  {
    v18 = *(_DWORD *)v9;
    v19 = v18 << 8;
    *(_DWORD *)v9 <<= 8;
    v20 = dataPointerOut;
    v21 = *dataPointerOut | (v18 << 8);
    *(_DWORD *)v9 = v21;
    dataPointerOut = v20 + 1;
    v22 = v17 + 4;
    ++*(_QWORD *)(v9 + 72);
    if (*(_DWORD *)(v9 + 80))
      break;
    if (v19 == 256)
    {
      if (v21 == 256)
      {
        *(_DWORD *)(v9 + 80) = 2;
        *(_QWORD *)(v9 + 120) = 0;
        MPEG2SetLoadingFramePesHeader(a1, v9);
        if (*(_DWORD *)(v9 + 80))
          goto LABEL_39;
      }
      else if (v21 == 440 || v21 == 435)
      {
        *(_DWORD *)(v9 + 80) = 1;
        if (v21 == 435)
          *(_DWORD *)(a1 + 536) |= 2u;
LABEL_39:
        if (a7)
        {
          *(_QWORD *)(a1 + 496) = v17 + *(_QWORD *)(a6 + 16);
          *(_BYTE *)(a1 + 504) = 1;
        }
        else
        {
          v28 = 56;
          if (*(_QWORD *)(v9 + 72) < 4uLL)
            v28 = 24;
          *(_QWORD *)(a1 + 496) = *(_QWORD *)(v9 + v28);
        }
        PesFrameHeaderAddOffset(v59, 0, *(_BYTE *)v9);
        if (v22 >= v58 + 4)
        {
          v10 = 0;
          if (a4)
            v29 = 0;
          else
            v29 = *(_BYTE *)(a1 + 116) == 0;
          v30 = v29;
          *(_BYTE *)(v9 + 112) = v30;
          v57 += v16 + v58;
          v58 = v17;
        }
        else
        {
          v10 = 0;
          *(_BYTE *)(v9 + 112) = 0;
        }
      }
    }
LABEL_112:
    --v16;
    ++v17;
    ++v11;
    if (v60 + v17 == -3)
    {
      v13 = v50;
      v11 = v51;
      v7 = a4;
      goto LABEL_114;
    }
  }
  if (*(_BYTE *)(v9 + 112))
  {
LABEL_61:
    ++v10;
    if (v19 == 256)
    {
      lengthAtOffsetOut = 0;
      v33 = *(_DWORD *)v9;
      if (*(_DWORD *)(v9 + 80) == 1)
      {
        if (v33 == 256)
        {
          v34 = 0;
          *(_DWORD *)(v9 + 80) = 2;
          goto LABEL_100;
        }
LABEL_74:
        v34 = 0;
      }
      else
      {
        if (((v33 - 435) > 5 || ((1 << (v33 + 77)) & 0x31) == 0) && v33 != 256)
          goto LABEL_74;
        if (*(_BYTE *)(v9 + 112))
        {
          v35 = *(OpaqueCMBlockBuffer **)(v9 + 88);
          v36 = v58;
          v37 = v58 + 4;
          if (v35)
          {
            if (v22 >= v37)
            {
              DataPointer = PesAddBlockBufferToFrameBlockBuffer(a1, v35, *(_QWORD *)(v9 + 96), *(_QWORD *)(v9 + 104), 0, &v63, &v62);
              if ((_DWORD)DataPointer)
                goto LABEL_122;
              v39 = *(const void **)(v9 + 88);
              if (v39)
                CFRelease(v39);
              v34 = 0;
              *(_QWORD *)(v9 + 88) = 0;
            }
            else
            {
              v38 = *(_QWORD *)(v9 + 104);
              if (v38 <= v58 + v16)
              {
                v34 = v16 + v58 - v38;
                *(_QWORD *)(a1 + 616) = v17 + v38 + *(_QWORD *)(a1 + 616) - v58;
                DataPointer = CMBlockBufferCreateWithMemoryBlock(blockAllocator, 0, v34, blockAllocator, 0, 0, v34, 1u, &lengthAtOffsetOut);
                if ((_DWORD)DataPointer)
                  goto LABEL_122;
                DataPointer = CMBlockBufferFillDataBytes(0, lengthAtOffsetOut, 0, v34);
                if ((_DWORD)DataPointer)
                  goto LABEL_122;
              }
              else
              {
                DataPointer = PesAddBlockBufferToFrameBlockBuffer(a1, v35, *(_QWORD *)(v9 + 96), v17 + v38 - v58, 0, &v63, &v62);
                if ((_DWORD)DataPointer)
                  goto LABEL_122;
                v34 = 0;
                *(_QWORD *)(v9 + 96) = v17 + *(_QWORD *)(v9 + 104) + *(_QWORD *)(v9 + 96) - v58;
                *(_QWORD *)(v9 + 104) = v58 + v16;
              }
            }
          }
          else
          {
            v34 = 0;
          }
          if (v17 + 3 >= v37)
          {
            DataPointer = PesAddBlockBufferToFrameBlockBuffer(a1, a2, v58, v17 - v58, 0, &v63, &v62);
            if ((_DWORD)DataPointer)
              goto LABEL_122;
            v57 -= v11 - 3 - v58;
            v36 = v11 - 3;
          }
        }
        else
        {
          v34 = 0;
          v57 += v16 + v58;
          v36 = v17;
        }
        DataPointer = MPEG2VideoEmitBuffer(a1, v9);
        if ((_DWORD)DataPointer)
          goto LABEL_122;
        if (a7)
        {
          *(_QWORD *)(a1 + 496) = v17 + *(_QWORD *)(a6 + 16);
          *(_BYTE *)(a1 + 504) = 1;
        }
        else
        {
          v40 = 56;
          if (*(_QWORD *)(v9 + 72) < 4uLL)
            v40 = 24;
          *(_QWORD *)(a1 + 496) = *(_QWORD *)(v9 + v40);
        }
        v58 = v36;
        if (a4)
          v41 = 0;
        else
          v41 = *(_BYTE *)(a1 + 116) == 0;
        v42 = v41;
        *(_BYTE *)(v9 + 112) = v42;
        v33 = *(_DWORD *)v9;
        if (*(_DWORD *)v9 == 256)
        {
          v10 = 0;
LABEL_100:
          *(_QWORD *)(v9 + 120) = v10;
          MPEG2SetLoadingFramePesHeader(a1, v9);
          v33 = *(_DWORD *)v9;
        }
        else
        {
          v10 = 0;
          *(_DWORD *)(v9 + 80) = 1;
        }
      }
      PesFrameHeaderAddOffset(v59, v10, v33);
      switch(*(_DWORD *)v9)
      {
        case 0x1B2:
          *(_BYTE *)(v9 + 114) = 1;
          break;
        case 0x1B3:
          v43 = *(_DWORD *)(a1 + 536) | 2;
          goto LABEL_106;
        case 0x1B7:
          v43 = *(_DWORD *)(a1 + 536) | 0x800;
LABEL_106:
          *(_DWORD *)(a1 + 536) = v43;
          break;
        case 0x1B8:
          *(_BYTE *)(v9 + 113) = 1;
          break;
        default:
          break;
      }
      if (lengthAtOffsetOut)
      {
        v44 = PesAddBlockBufferToFrameBlockBuffer(a1, lengthAtOffsetOut, 0, v34, 0, &v63, &v62);
        if (lengthAtOffsetOut)
          CFRelease(lengthAtOffsetOut);
        if ((_DWORD)v44)
          goto LABEL_123;
      }
      goto LABEL_112;
    }
    goto LABEL_112;
  }
  v23 = *(void **)(a1 + 608);
  v24 = *(_QWORD *)(a1 + 624);
  if (!v23)
  {
    if (v24)
    {
      if (*(_BYTE *)(a1 + 119))
        v24 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    else
    {
      v24 = *(_QWORD *)(a1 + 640);
      if (!v24)
      {
        *(_QWORD *)(a1 + 640) = 0x2000;
        v24 = 0x2000;
        if (!(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 104) >> 13))
          goto LABEL_28;
      }
    }
    v32 = CFAllocatorAllocate(allocator, v24, 0);
    *(_QWORD *)(a1 + 608) = v32;
    if (!v32)
      goto LABEL_127;
    *(_QWORD *)(a1 + 632) = v24;
    *(_QWORD *)(a1 + 616) = 0;
    goto LABEL_58;
  }
  v25 = *(_QWORD *)(a1 + 616);
  if (v24)
    v26 = v24 == v25;
  else
    v26 = 0;
  if (!v26)
    ++v25;
  if (*(_BYTE *)(a1 + 119))
    v25 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v25 <= *(_QWORD *)(a1 + 632))
    goto LABEL_58;
  v27 = (v25 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
  *(_QWORD *)(a1 + 640) = v27;
  if (v27 <= *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104))
  {
    v31 = CFAllocatorReallocate(allocator, v23, v27, 0);
    *(_QWORD *)(a1 + 608) = v31;
    *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 640);
    goto LABEL_59;
  }
LABEL_28:
  PesErrorHandling(a1, 4294954325);
LABEL_58:
  v31 = *(_BYTE **)(a1 + 608);
LABEL_59:
  if (v31)
  {
    v31[(*(_QWORD *)(a1 + 616))++] = HIBYTE(v18);
    goto LABEL_61;
  }
LABEL_127:
  v44 = 0;
LABEL_123:
  PesErrorHandling(a1, v44);
  return v44;
}

uint64_t MPEG2SetLoadingFramePesHeader(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  _BYTE *v3;
  char *v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a2 + 72) > 3uLL)
  {
    v2 = (uint64_t *)(a2 + 40);
    *(_WORD *)(result + 504) = *(_WORD *)(a2 + 64);
    v3 = (_BYTE *)(a2 + 65);
    v4 = (char *)(a2 + 66);
    v5 = (uint64_t *)(a2 + 48);
  }
  else
  {
    v2 = (uint64_t *)(a2 + 8);
    *(_WORD *)(result + 504) = *(_WORD *)(a2 + 32);
    v3 = (_BYTE *)(a2 + 33);
    v4 = (char *)(a2 + 34);
    v5 = (uint64_t *)(a2 + 16);
  }
  v6 = *v4;
  v7 = *v2;
  v8 = *v5;
  *v3 = 0;
  *v4 = 0;
  *(_BYTE *)(result + 506) = v6;
  *(_QWORD *)(result + 480) = v7;
  *(_QWORD *)(result + 488) = v8;
  return result;
}

uint64_t MPEG2VideoEmitBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t BlockBufferFromFrameMemory;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  char v33;
  int v34;
  _QWORD *Retainable;
  _QWORD *v36;
  int v37;
  int v38;
  CMBlockBufferRef blockBufferOut;
  char *returnedPointerOut;
  _BYTE temporaryBlock[5];
  char v42;
  unsigned __int8 v43;
  char v44;
  unsigned __int16 v45;
  unsigned __int8 destination;
  __int16 v47;

  v47 = 0;
  destination = 0;
  v45 = 0;
  BlockBufferFromFrameMemory = (uint64_t)PesFrameHeaderFinalizeFrame((_QWORD *)a1, 0);
  if ((_DWORD)BlockBufferFromFrameMemory)
    goto LABEL_81;
  BlockBufferFromFrameMemory = PesCreateBlockBufferFromFrameMemory(a1);
  if ((_DWORD)BlockBufferFromFrameMemory)
    goto LABEL_81;
  if (CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 512)) < 8)
  {
    v5 = 4294954320;
    goto LABEL_82;
  }
  if ((*(_BYTE *)(a1 + 536) & 2) == 0 && !*(_BYTE *)(a2 + 114) && !*(_BYTE *)(a2 + 115) || !*(_QWORD *)(a1 + 544))
  {
    v6 = 0;
    goto LABEL_53;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (uint64_t *)(a1 + 72);
  do
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 576) + v10);
    switch(v12)
    {
      case 178:
        if (*(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * v10) < 0xBuLL)
        {
LABEL_32:
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 576) + v10))
            v7 = 1;
          break;
        }
        returnedPointerOut = 0;
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v10) + 4;
        BlockBufferFromFrameMemory = CMBlockBufferAccessDataBytes(*(CMBlockBufferRef *)(a1 + 512), v13, 5uLL, temporaryBlock, &returnedPointerOut);
        if ((_DWORD)BlockBufferFromFrameMemory)
          goto LABEL_81;
        if (*returnedPointerOut == 71
          && returnedPointerOut[1] == 65
          && returnedPointerOut[2] == 57
          && returnedPointerOut[3] == 52
          && returnedPointerOut[4] == 3)
        {
          v14 = *v11;
          if (*v11)
            goto LABEL_118;
          BlockBufferFromFrameMemory = AddPes(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, 0, 1635017571, 0, 0, *(_DWORD *)(a1 + 64) << 8, 0xFFFF, 1, (_QWORD *)(a1 + 72));
          if ((_DWORD)BlockBufferFromFrameMemory)
            goto LABEL_81;
          v14 = *v11;
          if (*v11)
          {
LABEL_118:
            if (*(_QWORD *)(v14 + 84))
            {
              blockBufferOut = 0;
              BlockBufferFromFrameMemory = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), *(CMBlockBufferRef *)(a1 + 512), v13, *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * v10) - 4, 0, &blockBufferOut);
              if ((_DWORD)BlockBufferFromFrameMemory)
                goto LABEL_81;
              v5 = CloseCaptionQueueAdd(a1 + 520, blockBufferOut);
              if (blockBufferOut)
                CFRelease(blockBufferOut);
              if ((_DWORD)v5)
                goto LABEL_82;
            }
          }
        }
        break;
      case 181:
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v10);
        BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), v15 + 4, 1uLL, (char *)&v47 + 1);
        if ((_DWORD)BlockBufferFromFrameMemory)
          goto LABEL_81;
        v16 = HIBYTE(v47) & 0xF0;
        if (v7)
        {
          if (v16 == 128)
          {
            BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), v15 + 6, 3uLL, &v42);
            if ((_DWORD)BlockBufferFromFrameMemory)
              goto LABEL_81;
            v6 = 1;
          }
        }
        else
        {
          if (v16 == 16)
          {
            BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), v15 + 6, 1uLL, (char *)&v47 + 1);
            if ((_DWORD)BlockBufferFromFrameMemory)
              goto LABEL_81;
            v9 = 1;
            *(_BYTE *)(a2 + 115) = ((HIBYTE(v47) >> 3) & 1) == 0;
            BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), v15 + 8, 1uLL, &v47);
            if ((_DWORD)BlockBufferFromFrameMemory)
              goto LABEL_81;
          }
          v7 = 0;
        }
        break;
      case 179:
        if (!v8)
        {
          BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v10) + 7, 1uLL, &destination);
          if ((_DWORD)BlockBufferFromFrameMemory)
            goto LABEL_81;
          destination &= 0xFu;
          v8 = 1;
        }
        break;
      default:
        goto LABEL_32;
    }
    ++v10;
  }
  while (v10 < *(_QWORD *)(a1 + 544));
  if (v8)
  {
    v17 = destination;
    if (destination >= 9uLL)
      goto LABEL_114;
    v18 = mpeg2FrameRatesNum[destination];
    *(_DWORD *)(a1 + 804) = v18;
    v19 = mpeg2FrameRatesDen[v17];
    *(_DWORD *)(a1 + 808) = v19;
    if (v9 && (v47 & 0x7F) != 0)
    {
      v20 = HIBYTE(v47);
      v18 *= (HIBYTE(v47) >> 5) & 4;
      *(_DWORD *)(a1 + 804) = v18;
      *(_DWORD *)(a1 + 808) = v19 + v19 * (v20 & 0x1F);
    }
    if (!v18)
    {
LABEL_114:
      BlockBufferFromFrameMemory = FigSignalErrorAt();
      goto LABEL_81;
    }
  }
LABEL_53:
  if (!*(_DWORD *)(a1 + 808))
    *(_WORD *)(a1 + 505) = 0;
  BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), *(_QWORD *)(a2 + 120) + 4, 2uLL, &v45);
  if (!(_DWORD)BlockBufferFromFrameMemory)
  {
    v21 = bswap32(v45);
    v22 = HIWORD(v21);
    v45 = HIWORD(v21);
    v23 = (v21 >> 19) & 7;
    *(_BYTE *)(a1 + 590) = v23;
    *(_BYTE *)(a1 + 600) = v23 == 3;
    if (v23 == 3)
    {
      v24 = 4;
      goto LABEL_66;
    }
    if (*(_BYTE *)(a1 + 506) && *(_BYTE *)(a1 + 505) && *(_QWORD *)(a1 + 480) == *(_QWORD *)(a1 + 488))
      *(_BYTE *)(a1 + 506) = 0;
    if (v23 == 1)
    {
      v24 = 16;
LABEL_66:
      *(_DWORD *)(a1 + 536) |= v24;
    }
    else if (v23 == 2)
    {
      v24 = 8;
      goto LABEL_66;
    }
    if (*(_BYTE *)(a2 + 113))
      *(_DWORD *)(a1 + 536) |= 0x20u;
    if (!*(_BYTE *)(a2 + 115))
    {
LABEL_80:
      BlockBufferFromFrameMemory = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
      goto LABEL_81;
    }
    if (!v6)
      goto LABEL_114;
    v25 = v42 & 3;
    if (v25 == 3 || (v42 & 3) == 0)
    {
      *(_BYTE *)(a2 + 296) = 0;
      if (*(_QWORD *)(a2 + 200))
        FrameQueueEntryClean(a2 + 144);
      FrameQueueClean(a2 + 128);
      if ((v44 & 0x80000000) == 0)
      {
        v26 = (char)v43;
        *(_BYTE *)(a1 + 591) = v43 >> 7;
        *(_WORD *)(a1 + 588) = v45 >> 6;
        if (v26 >= 0)
          v27 = 1024;
        else
          v27 = 512;
        *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFFF9FF | v27;
      }
      goto LABEL_80;
    }
    v29 = v25 == 1;
    v30 = v25 == 1;
    *(_BYTE *)(a1 + 591) = v30;
    *(_WORD *)(a1 + 588) = v22 >> 6;
    if (v29)
      v31 = 512;
    else
      v31 = 1024;
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFFF9FF | v31;
    if (*(_BYTE *)(a2 + 296))
    {
      if (*(_QWORD *)(a2 + 200))
      {
        if (*(unsigned __int8 *)(a2 + 279) != v30)
        {
          v34 = *(unsigned __int8 *)(a2 + 278);
          if (v34 == v23 || v34 == 1 && v23 == 2)
          {
            v5 = MPEG2VideoCombine2Fields(a1, a2 + 144, a1 + 456);
            FrameQueueEntryClean(a2 + 144);
            goto LABEL_82;
          }
        }
        FrameQueueEntryClean(a2 + 144);
        *(_BYTE *)(a2 + 296) = 0;
      }
LABEL_108:
      FrameQueueMove(a2 + 144, a1 + 456);
LABEL_109:
      v5 = 0;
      goto LABEL_82;
    }
    v32 = v23 | (16 * *(_DWORD *)(a2 + 300));
    *(_DWORD *)(a2 + 300) = v32;
    if (*(_QWORD *)(a2 + 200)
      && *(unsigned __int16 *)(a2 + 276) == *(unsigned __int16 *)(a1 + 588)
      && *(unsigned __int8 *)(a2 + 279) != *(unsigned __int8 *)(a1 + 591)
      && ((v37 = *(unsigned __int8 *)(a2 + 278), v38 = *(unsigned __int8 *)(a1 + 590), v37 == v38)
       || v37 == 1 && v38 == 2)
      || (v32 & 0xFF7u) - 529 <= 1)
    {
      v33 = 1;
      BlockBufferFromFrameMemory = MPEG2VideoCombineFieldQueue(a1, a2, 1);
      if ((_DWORD)BlockBufferFromFrameMemory)
        goto LABEL_81;
LABEL_103:
      *(_BYTE *)(a2 + 296) = 1;
    }
    else
    {
      v33 = 0;
      if (v32 <= 0x32u && ((1 << v32) & 0x6000800080000) != 0)
      {
        BlockBufferFromFrameMemory = MPEG2VideoCombineFieldQueue(a1, a2, 0);
        v33 = 0;
        if ((_DWORD)BlockBufferFromFrameMemory)
          goto LABEL_81;
        goto LABEL_103;
      }
    }
    if (*(_QWORD *)(a2 + 200))
    {
      Retainable = (_QWORD *)FrameQueueEntryMakeRetainable(a1, a2 + 144);
      if (!Retainable)
      {
        v5 = 12;
        goto LABEL_82;
      }
      *Retainable = 0;
      v36 = *(_QWORD **)(a2 + 136);
      Retainable[1] = v36;
      *v36 = Retainable;
      *(_QWORD *)(a2 + 136) = Retainable;
    }
    if ((v33 & 1) == 0)
      goto LABEL_108;
    goto LABEL_109;
  }
LABEL_81:
  v5 = BlockBufferFromFrameMemory;
LABEL_82:
  PesCleanAfterFrameEmit(a1);
  *(_WORD *)(a2 + 113) = 0;
  return v5;
}

uint64_t MPEG2VideoCombine2Fields(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = FigMPEG2VideoCombineFields(a1, a2, a3);
  if (!(_DWORD)result)
    return FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, a2);
  return result;
}

uint64_t MPEG2VideoCombineFieldQueue(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t **v6;
  int v7;
  _QWORD *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = (uint64_t **)(a2 + 128);
  v7 = -1;
  v8 = (_QWORD *)(a2 + 128);
  do
  {
    v8 = (_QWORD *)*v8;
    ++v7;
  }
  while (v8);
  if (v7)
  {
    v9 = v7 & 1;
    if (!a3)
      v9 = v9 == 0;
    if (v9)
    {
      v10 = *v6;
      v11 = **v6;
      v12 = (_QWORD *)(*v6)[1];
      if (v11)
      {
        *(_QWORD *)(v11 + 8) = v12;
        v12 = (_QWORD *)v10[1];
      }
      else
      {
        *(_QWORD *)(a2 + 136) = v12;
      }
      *v12 = v11;
      FrameQueueEntryDestroy((uint64_t)v10);
    }
    while (1)
    {
      v13 = *v6;
      if (!*v6)
        break;
      v14 = *v13;
      v15 = (_QWORD *)v13[1];
      if (*v13)
      {
        *(_QWORD *)(v14 + 8) = v15;
        v15 = (_QWORD *)v13[1];
      }
      else
      {
        *(_QWORD *)(a2 + 136) = v15;
      }
      *v15 = v14;
      v16 = *v6;
      if (!*v6)
      {
        if (a3)
          return 4294954325;
        v22 = a2 + 144;
        v24 = a1;
        v23 = v22;
        goto LABEL_27;
      }
      if (*((unsigned __int8 *)v13 + 135) == *((unsigned __int8 *)v16 + 135))
        return 4294954325;
      v17 = *((unsigned __int8 *)v13 + 134);
      v18 = *((unsigned __int8 *)v16 + 134);
      if (v17 != v18 && (v17 != 1 || v18 != 2))
        return 4294954325;
      v20 = MPEG2VideoCombine2Fields(a1, (uint64_t)v13, (uint64_t)v16);
      if ((_DWORD)v20)
        return v20;
    }
  }
  if (!a3)
    return 0;
  v22 = a2 + 144;
  v23 = a1 + 456;
  v24 = a1;
  v13 = (uint64_t *)v22;
LABEL_27:
  v21 = MPEG2VideoCombine2Fields(v24, (uint64_t)v13, v23);
  FrameQueueEntryClean(v22);
  return v21;
}

uint64_t FigSampleBufferRenderSynchronizerGetClassID()
{
  MEMORY[0x19402F294](&FigSampleBufferRenderSynchronizerGetClassID_sRegisterFigSampleBufferRenderSynchronizerTypeOnce, RegisterFigSampleBufferRenderSynchronizerType);
  return sFigSampleBufferRenderSynchronizerClassID;
}

uint64_t RegisterFigSampleBufferRenderSynchronizerType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigSampleBufferRenderSynchronizerGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleBufferRenderSynchronizerGetClassID_sRegisterFigSampleBufferRenderSynchronizerTypeOnce, RegisterFigSampleBufferRenderSynchronizerType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleBufferRenderSynchronizerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleBufferRenderSynchronizer %p]"), a1);
}

uint64_t CreatePesPrivateForPrivateStream(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  if (a1[6])
  {
    v2 = (void (*)(_QWORD *))a1[107];
    if (v2)
      v2(a1);
    a1[6] = 0;
  }
  v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
  if (!v3)
    return 12;
  v4 = v3;
  result = 0;
  a1[6] = v4;
  *v4 = 0;
  v4[1] = 0;
  a1[105] = PesPriProcessData;
  a1[106] = PesPriCleanPrivateData;
  a1[107] = PesPriDeletePrivateData;
  return result;
}

uint64_t PesPriProcessData(uint64_t *a1, CMBlockBufferRef theBuffer, size_t offset, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t PesFromStreamID;
  unsigned int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  int v22;
  char *returnedPointerOut;
  char temporaryBlock;

  v7 = (uint64_t *)a1[6];
  if (!*(_BYTE *)(a6 + 24))
  {
    v15 = v7[1];
    if (v15)
    {
      v16 = v15 >= a5 ? a5 : v7[1];
      v7[1] = v15 - v16;
      if (v15 > a5)
        return 0;
    }
    goto LABEL_27;
  }
  temporaryBlock = 0;
  returnedPointerOut = 0;
  v9 = CMBlockBufferAccessDataBytes(theBuffer, offset, 1uLL, &temporaryBlock, &returnedPointerOut);
  if (!(_DWORD)v9)
  {
    v10 = *returnedPointerOut;
    PesFromStreamID = FindPesFromStreamID(a1[1], v10 | 0xBD00);
    if (PesFromStreamID)
    {
      *v7 = PesFromStreamID;
    }
    else
    {
      v17 = v10 & 0xF8;
      if (v17 == 128)
      {
        v19 = 1633891104;
      }
      else if (v17 == 160)
      {
        v22 = *(_DWORD *)(a1[1] + 48);
        if ((v22 - 2) < 2)
        {
          v19 = 1886612592;
        }
        else
        {
          v19 = 1819304813;
          if (v22 != 1 && v22 != 192)
            v19 = 1970170734;
        }
      }
      else
      {
        if (v10 >= 0x20)
          v18 = 1937072720;
        else
          v18 = 1970170734;
        if (v17 == 136)
          v19 = 1685353248;
        else
          v19 = v18;
      }
      v21 = AddPes(a1[1], *a1, 0, v19, 1, v10 | 0xBD00, v10 | 0xBD00, 0xFFFF, 1, v7);
      if ((_DWORD)v21)
        return v21;
      PesFromStreamID = *v7;
    }
    v12 = *(_DWORD *)(PesFromStreamID + 60) & 0xFFFF00F8;
    v13 = 4;
    if (v12 == 128 || v12 == 136 || v12 == 160 && ((v14 = *(_DWORD *)(a1[1] + 48), v13 = 7, v14 == 192) || v14 == 1))
    {
      if (v13 > a5)
      {
        v7[1] = v13 - a5;
        return v9;
      }
    }
    v7[1] = 0;
LABEL_27:
    v20 = *(uint64_t (**)(void))(*v7 + 840);
    if (v20)
      return v20();
    return 0;
  }
  return v9;
}

uint64_t PesPriCleanPrivateData(uint64_t result)
{
  **(_QWORD **)(result + 48) = 0;
  return result;
}

void PesPriDeletePrivateData(uint64_t a1)
{
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t CreatePesPrivateForRawPes(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  void *v3;
  void *v4;
  uint64_t result;

  if (a1[6])
  {
    v2 = (void (*)(_QWORD *))a1[107];
    if (v2)
      v2(a1);
    a1[6] = 0;
  }
  v3 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040F6D918ACuLL);
  if (!v3)
    return 12;
  v4 = v3;
  result = 0;
  a1[105] = PesRawProcessData;
  a1[106] = PesRawCleanPrivateData;
  a1[107] = PesRawDeletePrivateData;
  a1[6] = v4;
  return result;
}

uint64_t PesRawProcessData(_QWORD *a1, CMBlockBufferRef theBuffer, size_t offset, const void *a4, size_t dataLength, uint64_t a6)
{
  _OWORD *v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  size_t v18;
  char v19;

  v11 = (_OWORD *)a1[6];
  v19 = 0;
  v18 = 0;
  if (*(_BYTE *)(a6 + 24))
  {
    if (!a1[17] && (a1[76] || a1[64]))
    {
      v13 = PesRawEmitData((uint64_t)a1, (uint64_t)v11);
      if ((_DWORD)v13)
      {
        v16 = v13;
LABEL_16:
        PesErrorHandling((uint64_t)a1, v16);
        return v16;
      }
    }
    v14 = *(_OWORD *)(a6 + 16);
    *v11 = *(_OWORD *)a6;
    v11[1] = v14;
  }
  if (theBuffer)
    v15 = PesAddBlockBufferToFrameBlockBuffer((uint64_t)a1, theBuffer, offset, dataLength, a1[17], &v18, &v19);
  else
    v15 = PesAddMemoryToFrameMemory((uint64_t)a1, a4, dataLength, a1[17], &v18, &v19);
  v16 = v15;
  if ((_DWORD)v15)
    goto LABEL_16;
  if (v19)
    PesRawEmitData((uint64_t)a1, (uint64_t)v11);
  return 0;
}

uint64_t PesRawCleanPrivateData(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 48) + 24) = 0;
  return result;
}

void PesRawDeletePrivateData(uint64_t a1)
{
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t PesRawEmitData(uint64_t a1, uint64_t a2)
{
  uint64_t BlockBufferFromFrameMemory;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, CMTime *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;

  memset(&v16, 0, sizeof(v16));
  memset(&v15, 0, sizeof(v15));
  BlockBufferFromFrameMemory = PesCreateBlockBufferFromFrameMemory(a1);
  if ((_DWORD)BlockBufferFromFrameMemory)
    return BlockBufferFromFrameMemory;
  if (!*(_QWORD *)(a1 + 512))
    goto LABEL_11;
  if (*(_BYTE *)(a2 + 25))
    CMTimeMake(&v16, *(_QWORD *)a2, 90000);
  else
    v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (*(_BYTE *)(a2 + 26))
    CMTimeMake(&v15, *(_QWORD *)(a2 + 8), 90000);
  else
    v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, CMTime *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 84);
  if (v5)
  {
    v6 = **(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 60);
    v8 = *(_QWORD *)(a1 + 104);
    v9 = *(_QWORD *)(a1 + 512);
    v10 = *(_QWORD *)(a2 + 16);
    v14 = v16;
    v13 = v15;
    v11 = v5(v6, v7, v8, v9, &v14, &v13, 0, v10, 0, 0, 0, 0);
  }
  else
  {
LABEL_11:
    v11 = 0;
  }
  PesCleanAfterFrameEmit(a1);
  return v11;
}

uint64_t FigSecureStopManagerServerHandleMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294949552;
}

uint64_t FigSecureStopManagerServerHandleNoReplyMessage()
{
  uint64_t result;

  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return 4294949552;
  return result;
}

uint64_t fssm_server_copyManagerByObjectIDForConnection(int a1, xpc_object_t xdict)
{
  uint64_t v2;

  if (!xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]))
    return 4294949556;
  v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v2)
    return FigSignalErrorAt();
  return v2;
}

const __CFString *figCreateCFError(const __CFString *domain, CFIndex code, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFIndex v8;
  _OWORD v9[3];
  void *userInfoKeys[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)userInfoKeys = 0u;
  memset(v9, 0, sizeof(v9));
  if (!domain)
    return domain;
  if (!a3)
  {
    v8 = 0;
    if (!a4)
      goto LABEL_5;
    goto LABEL_4;
  }
  userInfoKeys[0] = *(void **)MEMORY[0x1E0C9AFB0];
  *(_QWORD *)&v9[0] = a3;
  v8 = 1;
  if (a4)
  {
LABEL_4:
    *(_QWORD *)((unint64_t)userInfoKeys | (8 * v8)) = *MEMORY[0x1E0C9AFE8];
    *(_QWORD *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7 | (8 * (v8++ & 1))) = a4;
  }
LABEL_5:
  if (a5)
  {
    userInfoKeys[v8] = (void *)*MEMORY[0x1E0C9AFF0];
    *((_QWORD *)v9 + v8++) = a5;
  }
  if (a6)
  {
    userInfoKeys[v8] = (void *)*MEMORY[0x1E0C9AFF8];
    *((_QWORD *)v9 + v8++) = a6;
  }
  if (a7)
  {
    userInfoKeys[v8] = (void *)*MEMORY[0x1E0C9B000];
    *((_QWORD *)v9 + v8++) = a7;
  }
  return (const __CFString *)CFErrorCreateWithUserInfoKeysAndValues((CFAllocatorRef)*MEMORY[0x1E0C9AE00], domain, code, (const void *const *)userInfoKeys, (const void *const *)v9, v8);
}

uint64_t FigCreateErrorForOSStatus(uint64_t result, CFErrorRef *a2)
{
  CFErrorRef v3;
  CFErrorRef v4;
  _OWORD v5[3];
  void *userInfoKeys[2];
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)result)
  {
    v7 = 0u;
    v8 = 0u;
    *(_OWORD *)userInfoKeys = 0u;
    memset(v5, 0, sizeof(v5));
    v3 = CFErrorCreateWithUserInfoKeysAndValues((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("CoreMediaErrorDomain"), (int)result, (const void *const *)userInfoKeys, (const void *const *)v5, 0);
    if (v3)
    {
      v4 = v3;
      result = 0;
      *a2 = v4;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

const __CFString *FigCreateCFErrorFromFigErrorLog(const __CFString *result, int a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;
  const void *v9;

  if (result)
  {
    v3 = (const __CFArray *)result;
    Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v5 = Count + 1;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v5 - 2);
        if (FigCFDictionaryGetInt32IfPresent() && a2 == 0)
          break;
        if ((unint64_t)--v5 <= 1)
          return 0;
      }
      FigCFDictionaryGetInt32IfPresent();
      CFDictionaryGetValue(ValueAtIndex, CFSTR("c-user-info"));
      Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("domain"));
      v9 = CFDictionaryGetValue(ValueAtIndex, CFSTR("comment"));
      return figCreateCFError(Value, 0, (uint64_t)v9, 0, 0, 0, 0);
    }
  }
  return result;
}

uint64_t FigCFErrorIsEqualToOSStatus(__CFError *a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (a1)
  {
    CFErrorGetDomain(a1);
    result = FigCFEqual();
    if (!(_DWORD)result)
      return result;
    return CFErrorGetCode(a1) == a3;
  }
  else
  {
    return a3 == 0;
  }
}

const __CFString *FigErrorLogGetStringFromInterfaceType(int a1)
{
  const __CFString *result;
  const __CFString *v2;
  const __CFString *v3;

  if (a1 > 100)
  {
    v2 = CFSTR("wwan-bridged");
    v3 = CFSTR("bluetooth-bridged");
    if (a1 != 103)
      v3 = 0;
    if (a1 != 102)
      v2 = v3;
    if (a1 == 101)
      return CFSTR("wifi-bridged");
    else
      return v2;
  }
  else
  {
    switch(a1)
    {
      case 0:
        result = CFSTR("unknown");
        break;
      case 1:
        result = CFSTR("loopback");
        break;
      case 2:
        result = CFSTR("wired");
        break;
      case 3:
        result = CFSTR("wifi-infra");
        break;
      case 4:
        result = CFSTR("wifi-AWDL");
        break;
      case 5:
        result = CFSTR("wwan");
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

void FigErrorLogSetSeverity(int a1, CFMutableDictionaryRef theDict, int a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  if (theDict)
  {
    if (a3)
    {
      v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      if (v4)
      {
        v5 = v4;
        CFDictionarySetValue(theDict, CFSTR("c-severity"), v4);
        CFRelease(v5);
      }
    }
    else
    {
      CFDictionaryRemoveValue(theDict, CFSTR("c-severity"));
    }
  }
}

__CFDictionary *FigErrorLogCreateEntry(const __CFAllocator *a1, uint64_t a2, const __CFURL *a3, const void *a4, int a5, const void *a6, const void *a7, const void *a8, void *value, CFDictionaryRef theDict, int a11, int a12, void *a13)
{
  __CFDictionary *Mutable;
  CFAbsoluteTime Current;
  CFDateRef v22;
  CFDateRef v23;
  CFTypeRef v24;
  const void *v25;
  unsigned int (*v26)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFData *v27;
  const __CFData *v28;
  CFTypeRef cf;
  void *v31;

  v31 = 0;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v22 = CFDateCreate(a1, Current);
    if (v22)
    {
      v23 = v22;
      CFDictionarySetValue(Mutable, CFSTR("date"), v22);
      CFRelease(v23);
    }
    if (a3)
    {
      v24 = FigCFHTTPCreateURLString(a3);
      if (v24)
      {
        v25 = v24;
        CFDictionarySetValue(Mutable, CFSTR("uri"), v24);
        CFRelease(v25);
      }
    }
    if (a2)
    {
      cf = 0;
      v26 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v26)
      {
        if (!v26(a2, CFSTR("FHRP_RemoteIPAddress"), a1, &cf))
        {
          v27 = FigCFHTTPCreateAddressString((const __CFData *)cf);
          if (v27)
          {
            v28 = v27;
            CFDictionarySetValue(Mutable, CFSTR("s-ip"), v27);
            CFRelease(v28);
          }
          CFRelease(cf);
        }
      }
    }
    if (a4)
      CFDictionarySetValue(Mutable, CFSTR("cs-guid"), a4);
    FigCFDictionarySetInt32();
    if (a6)
      CFDictionarySetValue(Mutable, CFSTR("domain"), a6);
    if (a7)
      CFDictionarySetValue(Mutable, CFSTR("comment"), a7);
    if (value)
      CFDictionarySetValue(Mutable, CFSTR("cs-iftype"), value);
    if (theDict)
    {
      if (CFDictionaryGetValueIfPresent(theDict, CFSTR("freq"), (const void **)&v31))
        CFDictionarySetValue(Mutable, CFSTR("c-iffreq"), v31);
      if (CFDictionaryGetValueIfPresent(theDict, CFSTR("rssi"), (const void **)&v31))
        CFDictionarySetValue(Mutable, CFSTR("c-rssi"), v31);
      if (CFDictionaryGetValueIfPresent(theDict, CFSTR("rsmn"), (const void **)&v31))
        CFDictionarySetValue(Mutable, CFSTR("c-rssi-min"), v31);
      if (CFDictionaryGetValueIfPresent(theDict, CFSTR("rsmx"), (const void **)&v31))
        CFDictionarySetValue(Mutable, CFSTR("c-rssi-max"), v31);
      if (CFDictionaryGetValueIfPresent(theDict, CFSTR("rsav"), (const void **)&v31))
        CFDictionarySetValue(Mutable, CFSTR("c-rssi-avg"), v31);
    }
    if (a11)
      FigCFDictionarySetInt32();
    if (a12)
      FigCFDictionarySetInt32();
    if (a13)
      CFDictionarySetValue(Mutable, CFSTR("http-response-headers"), a13);
    if (a8)
      CFDictionarySetValue(Mutable, CFSTR("c-user-info"), a8);
  }
  return Mutable;
}

CFMutableArrayRef FigErrorLogCreatePublicCopy(const __CFAllocator *a1, const __CFArray *a2)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v5;
  _QWORD v7[2];
  CFRange v8;

  if (!a2)
    return 0;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v5 = Mutable;
  if (Mutable)
  {
    v7[0] = a1;
    v7[1] = Mutable;
    v8.length = CFArrayGetCount(a2);
    v8.location = 0;
    CFArrayApplyFunction(a2, v8, (CFArrayApplierFunction)figErrorLogApplierFunction, v7);
  }
  return v5;
}

void figErrorLogApplierFunction(CFDictionaryRef theDict, CFAllocatorRef *a2)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;

  if (theDict)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(*a2, 0, theDict);
    if (MutableCopy)
    {
      v4 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, CFSTR("c-user-info"));
      CFArrayAppendValue(a2[1], v4);
      CFRelease(v4);
    }
  }
}

uint64_t *FigMPEG2VideoFrameDiscard(uint64_t a1)
{
  uint64_t *result;

  result = FrameQueueClean(a1 + 784);
  *(_DWORD *)(a1 + 812) = 0;
  *(_DWORD *)(a1 + 748) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  return result;
}

uint64_t *FigMPEG2VideoFrameFlush(uint64_t a1)
{
  uint64_t *result;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 448))
    VideoFrameCheckAdjustmentQueue(a1);
  VideoFrameQueueFlush(a1);
  result = FrameQueueClean(a1 + 784);
  *(_DWORD *)(a1 + 812) = 0;
  *(_DWORD *)(a1 + 748) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  return result;
}

uint64_t VideoFrameCheckAdjustmentQueue(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t *v16;

  v15 = 0;
  v16 = 0;
  *(_DWORD *)(a1 + 744) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 448))
  {
    v2 = *(uint64_t **)(a1 + 728);
    if (v2)
    {
      v3 = 4294954325;
      do
      {
        v4 = v2[4];
        v5 = *(_QWORD *)(a1 + 688);
        v6 = *(_QWORD *)(a1 + 712);
        if ((v4 & 0x100000000) == 0 && (v5 & 0x100000000) != 0)
        {
          v6 += 0x200000000;
          *(_QWORD *)(a1 + 712) = v6;
        }
        v7 = v6 + v4 + *(_QWORD *)(*(_QWORD *)a1 + 64);
        if (v7 >= v5 && v7 <= *(_QWORD *)(*(_QWORD *)(a1 + 8) + 160) + v5)
        {
          v15 = 0;
          v16 = &v15;
          FigMPEG2MoveAdjustmentQueue(a1, (uint64_t)&v15);
          v3 = FigMPEG2ParseFromQueue((uint64_t)&v15);
        }
        else
        {
          v8 = *v2;
          v9 = (_QWORD *)v2[1];
          if (*v2)
          {
            *(_QWORD *)(v8 + 8) = v9;
            v9 = (_QWORD *)v2[1];
          }
          else
          {
            *(_QWORD *)(a1 + 736) = v9;
          }
          *v9 = v8;
          FrameQueueEntryDestroy((uint64_t)v2);
        }
        v2 = *(uint64_t **)(a1 + 728);
      }
      while (v2);
    }
    else
    {
      return 4294954325;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 728);
    if (v10)
    {
      v3 = 0;
      *(_QWORD *)(v10 + 8) = &v15;
      v11 = *(uint64_t **)(a1 + 736);
      v15 = v10;
      v16 = v11;
      *(_QWORD *)(a1 + 728) = 0;
      *(_QWORD *)(a1 + 736) = a1 + 728;
      do
      {
        v12 = *(_QWORD *)v10;
        v13 = *(_QWORD **)(v10 + 8);
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)(v12 + 8) = v13;
          v13 = *(_QWORD **)(v10 + 8);
        }
        else
        {
          v16 = *(uint64_t **)(v10 + 8);
        }
        *v13 = v12;
        *(_WORD *)(v10 + 49) = 0;
        if ((_DWORD)v3)
          FrameQueueEntryDestroy(v10);
        else
          v3 = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, v10);
        v10 = v15;
      }
      while (v15);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t VideoFrameQueueFlush(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(result + 784);
  if (v1 && *(_BYTE *)(result + 800))
  {
    v2 = *(unsigned int *)(result + 804);
    if ((_DWORD)v2)
    {
      *(_QWORD *)(v1 + 24) = *(_QWORD *)(v1 + 32)
                           + *(unsigned int *)(result + 808)
                           * (unint64_t)(90000 * *(_DWORD *)(result + 812))
                           / v2;
      *(_BYTE *)(v1 + 49) = 1;
      return FigMPEG2FrameQueueEmit(result);
    }
  }
  return result;
}

uint64_t FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v4 = (_QWORD *)(a2 + 24);
  v5 = (_QWORD *)(a2 + 32);
  while (1)
  {
    if (*(_BYTE *)(a2 + 48))
    {
      if (*(_BYTE *)(a2 + 49))
      {
        v6 = *(_QWORD *)(a2 + 40);
        if (v6 != *(_QWORD *)(a1 + 816))
        {
          *(_DWORD *)(a2 + 80) |= 0x1000u;
          *(_QWORD *)(a1 + 816) = v6;
        }
      }
    }
    v7 = *(_QWORD *)(a1 + 8);
    if (!*(_DWORD *)(v7 + 100))
      return FigMPEG2VideoFrameEmit(a1, a2);
    v8 = *(unsigned __int8 *)(a2 + 144);
    if (*(_BYTE *)(a2 + 144) && *(_BYTE *)(a2 + 49))
    {
      *(_BYTE *)(a2 + 50) = 1;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 24);
    }
    if (!*(_BYTE *)(a1 + 800))
      break;
LABEL_14:
    *(_BYTE *)(a1 + 800) = 1;
    if (*(_QWORD *)(a1 + 728))
      return VideoFrameAddToAdjustmentQueue(a1, a2);
    if (*(_BYTE *)(a2 + 49))
      v10 = *(_QWORD *)(a1 + 712) + *v4 + *(_QWORD *)(*(_QWORD *)a1 + 64);
    else
      v10 = 0;
    if (*(_BYTE *)(a2 + 50))
    {
      v11 = *v5;
      v12 = HIDWORD(*v5) & 1;
      if ((*(_BYTE *)(a1 + 676) & 1) == 0)
        LODWORD(v12) = 1;
      if ((_DWORD)v12)
        v13 = *v5;
      else
        v13 = v11 + 0x200000000;
      v14 = *(_QWORD *)(a1 + 712);
      v15 = *(_QWORD *)(*(_QWORD *)a1 + 64) + v14 + v13;
      if (*(_BYTE *)(a1 + 658))
      {
        v16 = *(_QWORD *)(a1 + 688);
        if (v15 <= v16 || v15 >= *(_QWORD *)(v7 + 160) + v16)
        {
          result = VideoFrameAddToAdjustmentQueue(a1, a2);
          if (!(_DWORD)result)
            return ProgramCheckPesForTimestampChanges(*(_QWORD *)a1);
          return result;
        }
      }
      *(_QWORD *)(a1 + 672) = v11;
      *(_DWORD *)(a1 + 748) = 0;
      if ((v12 & 1) == 0)
        *(_QWORD *)(a1 + 712) = v14 + 0x200000000;
    }
    else
    {
      v17 = *(unsigned int *)(a1 + 804);
      if (!(_DWORD)v17)
        return VideoFrameAddToAdjustmentQueue(a1, a2);
      v18 = *(_DWORD *)(a1 + 748) + 1;
      v19 = 90000 * *(unsigned int *)(a1 + 808) * (unint64_t)v18 / v17;
      v20 = *(_QWORD *)(a1 + 672);
      v21 = v20 + *(_QWORD *)(a1 + 712) + *(_QWORD *)(*(_QWORD *)a1 + 64);
      v15 = v21 + v19;
      if (v8)
        v22 = v21 + v19;
      else
        v22 = v10;
      if (!v8)
      {
        if (*(_BYTE *)(a2 + 49))
        {
          v22 = v10 + 0x200000000;
          if (((v20 & 0x100000000) == 0) | *((_BYTE *)v4 + 4) & 1)
            v22 = v10;
        }
      }
      *(_DWORD *)(a1 + 748) = v18;
      v10 = v22;
    }
    v23 = *(_QWORD *)(a1 + 784);
    if (!v23)
      goto LABEL_43;
    if (v8)
      goto LABEL_57;
    *(_BYTE *)(v23 + 49) = 1;
    *(_QWORD *)(v23 + 24) = v15;
    FigMPEG2FrameQueueEmit(a1);
    v8 = *(unsigned __int8 *)(a2 + 144);
    if (*(_QWORD *)(a1 + 784))
    {
      if (*(_BYTE *)(a2 + 144))
      {
LABEL_57:
        *(_QWORD *)(a2 + 32) = v15;
        *(_WORD *)(a2 + 49) = 257;
        goto LABEL_65;
      }
    }
    else
    {
LABEL_43:
      if (v8)
        goto LABEL_45;
    }
    if (!*(_BYTE *)(a2 + 49))
    {
      *(_BYTE *)(a2 + 50) = 1;
      v4 = v5;
LABEL_65:
      *v4 = v15;
      *(_QWORD *)(a1 + 688) = v15;
      return FigMPEG2VideoFrameEnqueue(a1, a2);
    }
LABEL_45:
    v24 = v15 - v10;
    if (v15 == v10)
    {
      v10 = v15;
LABEL_60:
      *(_WORD *)(a2 + 49) = 257;
      *(_QWORD *)(a2 + 24) = v10;
      *(_QWORD *)(a2 + 32) = v15;
      return FigMPEG2VideoFrameEmit(a1, a2);
    }
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 160);
    if (v25 >= 0)
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 160);
    else
      v26 = v25 + 1;
    v27 = v26 >> 1;
    if (v25 >= 360000)
      v27 = 180000;
    v28 = -v27;
    if (v24 <= v27 && v24 >= v28)
      goto LABEL_60;
    v29 = v24 - 0x200000000;
    if (v29 <= v27 && v29 >= v28)
    {
      v10 += 0x200000000;
      goto LABEL_60;
    }
    *(_WORD *)(a2 + 49) = 0;
  }
  v9 = *(_QWORD *)(a1 + 784);
  if (!v9)
  {
    if (!*(_BYTE *)(a2 + 50))
      return FigMPEG2VideoFrameEnqueue(a1, a2);
    if (!*(_DWORD *)(a1 + 804))
      goto LABEL_71;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a2 + 50) && *(_DWORD *)(a1 + 804))
  {
    v31 = *(unsigned __int8 *)(a2 + 145);
    result = FigMPEG2ParserVideoFrameWorkBackward(a1, a2);
    *(_BYTE *)(a1 + 800) = 1;
    if (!v31)
      *(_QWORD *)(a1 + 672) = *v5;
    return result;
  }
LABEL_71:
  if (!v8)
  {
    if (v9)
      goto LABEL_76;
    goto LABEL_81;
  }
  result = 0;
  if (!v9 || !*(_BYTE *)(a2 + 49))
  {
LABEL_82:
    if (*(_BYTE *)(a2 + 50))
      return result;
    return FigMPEG2VideoFrameEnqueue(a1, a2);
  }
LABEL_76:
  if (!*(_DWORD *)(a1 + 804) || (v32 = **(_QWORD **)(*(_QWORD *)(a1 + 792) + 8)) == 0)
  {
LABEL_81:
    result = 0;
    goto LABEL_82;
  }
  while (1)
  {
    v33 = **(_QWORD **)(*(_QWORD *)(v32 + 8) + 8);
    if (!*(_BYTE *)(v32 + 144))
    {
      if (*(_BYTE *)(v32 + 49))
        break;
    }
    v32 = **(_QWORD **)(*(_QWORD *)(v32 + 8) + 8);
    if (!v33)
      goto LABEL_81;
  }
  *(_BYTE *)(a2 + 50) = 1;
  v34 = *(_QWORD *)(v32 + 24);
  *(_QWORD *)(a2 + 32) = v34;
  *(_QWORD *)(a1 + 672) = v34;
  v35 = *(unsigned __int8 *)(a2 + 145);
  result = FigMPEG2ParserVideoFrameWorkBackward(a1, a2);
  *(_BYTE *)(a1 + 800) = 1;
  if (!v35 && !*(_BYTE *)(a2 + 50))
    return FigMPEG2VideoFrameEnqueue(a1, a2);
  return result;
}

uint64_t FigMPEG2VideoFrameEmit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  OpaqueCMBlockBuffer *v23;
  OpaqueCMBlockBuffer *v24;
  size_t DataLength;
  uint64_t appended;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, CMTime *, CMTime *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;

  memset(&v37, 0, sizeof(v37));
  memset(&v36, 0, sizeof(v36));
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 100);
  if (!v5)
  {
    if (!*(_BYTE *)(a2 + 49))
    {
      v36 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v37 = v36;
      goto LABEL_20;
    }
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a2 + 49))
  {
    appended = FigSignalErrorAt();
LABEL_36:
    v21 = appended;
    goto LABEL_32;
  }
  if (v5 < 2)
  {
LABEL_7:
    CMTimeMake(&v37, *(_QWORD *)(a2 + 24), 90000);
    if (*(_BYTE *)(a2 + 50))
      CMTimeMake(&v36, *(_QWORD *)(a2 + 32), 90000);
    else
      v36 = v37;
    goto LABEL_20;
  }
  if (*(_BYTE *)(a1 + 658))
  {
    v6 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 32);
    if ((v6 & 0x100000000) != 0 && !*(_QWORD *)(*(_QWORD *)a1 + 64) && 0x200000000 - v6 < *(_QWORD *)(v4 + 160))
    {
      *(_QWORD *)(a1 + 712) -= 0x200000000;
      v6 -= 0x200000000;
      *(_QWORD *)(a2 + 24) -= 0x200000000;
      *(_QWORD *)(a2 + 32) = v6;
    }
  }
  *(_BYTE *)(a1 + 658) = 1;
  *(_QWORD *)(a1 + 688) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 696) = v7;
  CMTimeMake(&v37, v7, 90000);
  v8 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a2 + 24) == v8)
    v36 = v37;
  else
    CMTimeMake(&v36, v8, 90000);
  v9 = *(_QWORD *)(a1 + 696);
  if (*(_QWORD *)(a1 + 704) < v9)
    *(_QWORD *)(a1 + 704) = v9;
LABEL_20:
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 84);
  if (!v10)
    goto LABEL_22;
  v11 = **(_QWORD **)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 60);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(unsigned int *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a2 + 120);
  v35 = v37;
  v34 = v36;
  v21 = v10(v11, v12, v13, v14, &v35, &v34, v15, v16, v17, v18, v19, v20);
  if (!(_DWORD)v21)
  {
LABEL_22:
    v22 = *(uint64_t ***)(a2 + 64);
    if (!v22)
      goto LABEL_31;
    v23 = 0;
    do
    {
      v24 = (OpaqueCMBlockBuffer *)v22[2];
      if (v23)
      {
        DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)v22[2]);
        appended = CMBlockBufferAppendBufferReference(v23, v24, 0, DataLength, 0);
        if ((_DWORD)appended)
          goto LABEL_36;
      }
      else
      {
        v23 = (OpaqueCMBlockBuffer *)v22[2];
      }
      v22 = (uint64_t **)*v22;
    }
    while (v22);
    if (!v23)
      goto LABEL_31;
    v27 = *(_QWORD *)(a1 + 72);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, CMTime *, CMTime *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 84);
    v29 = **(_QWORD **)(a1 + 8);
    v30 = *(unsigned int *)(v27 + 60);
    v31 = *(_QWORD *)(v27 + 104);
    v32 = *(_QWORD *)(a2 + 40);
    v35 = v37;
    v34 = v36;
    appended = v28(v29, v30, v31, v23, &v35, &v34, 0, v32, 0, 0, 0, 0);
    if (!(_DWORD)appended)
    {
LABEL_31:
      v21 = 0;
      goto LABEL_32;
    }
    goto LABEL_36;
  }
LABEL_32:
  if (*(_BYTE *)(a2 + 145))
    FrameQueueEntryDestroy(a2);
  return v21;
}

uint64_t FigMPEG2ParserVideoFrameWorkBackward(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(unsigned __int8 *)(a2 + 144);
  if (*(_BYTE *)(a2 + 144))
    v5 = 0;
  else
    v5 = *(_BYTE *)(a2 + 50) != 0;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 64) + *(_QWORD *)(a1 + 712);
  v7 = v6 + *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v7;
  if (v4)
    v8 = 1;
  else
    v8 = *(_BYTE *)(a2 + 49) == 0;
  if (!v8)
    *(_QWORD *)(a2 + 24) += v6;
  v9 = **(_QWORD **)(*(_QWORD *)(a1 + 792) + 8);
  if (v9)
  {
    v10 = *(_DWORD *)(a1 + 808);
    v11 = *(unsigned int *)(a1 + 804);
    v12 = 90000;
    v13 = v7;
    do
    {
      v14 = v9;
      v9 = **(_QWORD **)(*(_QWORD *)(v9 + 8) + 8);
      v15 = v7 - v10 * (unint64_t)v12 / v11;
      *(_BYTE *)(v14 + 50) = 1;
      *(_QWORD *)(v14 + 32) = v15;
      if (*(_BYTE *)(v14 + 144))
      {
        *(_BYTE *)(v14 + 49) = 1;
        *(_QWORD *)(v14 + 24) = v15;
      }
      else
      {
        if (v5)
        {
          v5 = 1;
          *(_BYTE *)(v14 + 49) = 1;
          *(_QWORD *)(v14 + 24) = v13;
        }
        else
        {
          *(_BYTE *)(v14 + 49) = 0;
          v5 = 1;
        }
        v13 = v7 - v10 * (unint64_t)v12 / v11;
      }
      v12 += 90000;
    }
    while (v9);
  }
  FigMPEG2FrameQueueEmit(a1);
  if (!*(_QWORD *)(a1 + 784) && *(_BYTE *)(a2 + 49) && *(_BYTE *)(a2 + 50))
    return FigMPEG2VideoFrameEmit(a1, a2);
  else
    return FigMPEG2VideoFrameEnqueue(a1, a2);
}

uint64_t FigMPEG2VideoFrameEnqueue(uint64_t a1, uint64_t a2)
{
  _QWORD *Retainable;
  _QWORD *v4;

  Retainable = (_QWORD *)FrameQueueEntryMakeRetainable(a1, a2);
  if (!Retainable)
    return 12;
  v4 = *(_QWORD **)(a1 + 792);
  *Retainable = 0;
  Retainable[1] = v4;
  *v4 = Retainable;
  *(_QWORD *)(a1 + 792) = Retainable;
  LODWORD(v4) = *(_DWORD *)(a1 + 812) + 1;
  *(_DWORD *)(a1 + 812) = (_DWORD)v4;
  if (v4 < 0x41)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t VideoFrameAddToAdjustmentQueue(uint64_t a1, uint64_t a2)
{
  _QWORD *Retainable;
  unsigned int v5;
  _QWORD *v6;

  VideoFrameQueueFlush(a1);
  Retainable = (_QWORD *)FrameQueueEntryMakeRetainable(a1, a2);
  Retainable[2] = a1;
  v5 = *(_DWORD *)(a1 + 744) + 1;
  *(_DWORD *)(a1 + 744) = v5;
  v6 = *(_QWORD **)(a1 + 736);
  *Retainable = 0;
  Retainable[1] = v6;
  *v6 = Retainable;
  *(_QWORD *)(a1 + 736) = Retainable;
  if (*(_DWORD *)(*(_QWORD *)a1 + 72) == 1 || v5 >= 0x10)
    return VideoFrameCheckAdjustmentQueue(a1);
  else
    return 0;
}

uint64_t FigMPEG2FrameQueueEmit(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(result + 784);
  if (v1)
  {
    v2 = result;
    do
    {
      if (!*(_BYTE *)(v1 + 50) || !*(_BYTE *)(v1 + 49))
        break;
      v3 = *(_QWORD *)v1;
      v4 = *(_QWORD **)(v1 + 8);
      if (*(_QWORD *)v1)
      {
        *(_QWORD *)(v3 + 8) = v4;
        v4 = *(_QWORD **)(v1 + 8);
      }
      else
      {
        *(_QWORD *)(v2 + 792) = v4;
      }
      *v4 = v3;
      result = FigMPEG2VideoFrameEmit(v2, v1);
      --*(_DWORD *)(v2 + 812);
      v1 = *(_QWORD *)(v2 + 784);
    }
    while (v1);
  }
  return result;
}

uint64_t FigMPEG2VideoCombineFields(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t appended;
  CFNumberRef v6;
  CFNumberRef v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int valuePtr;

  valuePtr = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a2 + 56));
  PesFrameHeaderAppendList((_QWORD *)(a2 + 88), (unint64_t *)(a3 + 88), valuePtr);
  appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a2 + 56), *(CMBlockBufferRef *)(a3 + 56), 0, 0, 0);
  if (!(_DWORD)appended)
  {
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CMSetAttachment(*(CMAttachmentBearerRef *)(a2 + 56), CFSTR("ByteOffsetToSecondField"), v6, 1u);
      CFRelease(v7);
    }
    if (!*(_QWORD *)(a2 + 64))
    {
      while (1)
      {
        v11 = *(uint64_t **)(a3 + 64);
        if (!v11)
          break;
        v8 = *v11;
        v9 = (_QWORD *)v11[1];
        if (*v11)
        {
          *(_QWORD *)(v8 + 8) = v9;
          v9 = (_QWORD *)v11[1];
        }
        else
        {
          *(_QWORD *)(a3 + 72) = v9;
        }
        *v9 = v8;
        v10 = *(uint64_t ***)(a2 + 72);
        *v11 = 0;
        v11[1] = (uint64_t)v10;
        *v10 = v11;
        *(_QWORD *)(a2 + 72) = v11;
      }
    }
    v12 = *(_DWORD *)(a2 + 80);
    v13 = *(_DWORD *)(a3 + 80);
    if (v12 != v13)
    {
      v14 = v13 | v12;
      if ((v14 & 8) != 0)
        v15 = -1541;
      else
        v15 = -1537;
      v16 = v15 & v14;
      if ((v14 & 0x10) != 0)
        v17 = v14 & 0xFFFFF9F3;
      else
        v17 = v16;
      *(_DWORD *)(a2 + 80) = v17 | *(_DWORD *)(a2 + 80) & 0x600;
    }
    v18 = *(_DWORD *)(a2 + 148);
    if (v18)
      *(_DWORD *)(a3 + 148) = v18;
  }
  return appended;
}

uint64_t FigPlayerAirPlayCreateWithOptions(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t DerivedStorage;
  CFTypeRef v13;
  uint64_t v14;
  __CFDictionary *v15;
  const void *v16;
  CFMutableDictionaryRef Mutable;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  CFMutableArrayRef v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  const __CFDictionary *v33;
  const void *v34;
  uint64_t v35;
  NSObject *v36;
  void *DispatchSourceBlock;
  const __CFString *v38;
  uint64_t v39;
  const void *v40;
  CFMutableDictionaryRef v41;
  void *v42;
  void *v43;
  void *v44;
  int v45;
  int v46;
  dispatch_queue_t v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  CFNumberRef v51;
  const void *v52;
  const void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  const void *v58;
  NSObject *v59;
  void *v60;
  NSObject *v61;
  const void *v62;
  uint64_t v63;
  CFMutableArrayRef v64;
  CFMutableBagRef v65;
  CFTypeRef v66;
  uint64_t FigBaseObject;
  void (*v68)(uint64_t, const __CFString *, CFTypeRef);
  NSObject *v69;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v71;
  void *context;
  void *v73;
  CFTypeRef v74;
  CFNumberRef number;
  void *value;
  CFTypeRef cf;
  int valuePtr;
  void *handler;
  uint64_t v80;
  void (*v81)(uint64_t, int);
  void *v82;
  NSObject *v83;
  void *v84;
  void *v85;
  void *v86;
  _OWORD __str[5];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  value = 0;
  cf = 0;
  v74 = 0;
  number = 0;
  v73 = 0;
  memset(__str, 0, sizeof(__str));
  context = (void *)MEMORY[0x19403137C]();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a4)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_8;
  }
  if (FigPlayerAirPlayCreateWithOptions_initOnceCheck != -1)
    dispatch_once(&FigPlayerAirPlayCreateWithOptions_initOnceCheck, &__block_literal_global_34);
  FigPlayerGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
  {
    v9 = v8;
    FigSignalErrorAt();
    goto LABEL_9;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_WORD *)DerivedStorage = 256;
  *(_BYTE *)(DerivedStorage + 450) = 0;
  if (a3)
  {
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("LoggingIdentifier"), (const void **)&value))
      CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 450), 10, 0x600u);
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("PlayerName"), &v74))
    {
      *(_QWORD *)(DerivedStorage + 376) = CFRetain(v74);
      v13 = v74;
      if (pap_GetPAPRegistryMutexAndList_initOnceCheck != -1)
        dispatch_once(&pap_GetPAPRegistryMutexAndList_initOnceCheck, &__block_literal_global_157);
      v14 = pap_GetPAPRegistryMutexAndList_sListLock;
      v15 = (__CFDictionary *)pap_GetPAPRegistryMutexAndList_sList;
      MEMORY[0x19402EEEC](pap_GetPAPRegistryMutexAndList_sListLock);
      v16 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
      CFDictionarySetValue(v15, v13, v16);
      if (v16)
        CFRelease(v16);
      MEMORY[0x19402EF04](v14);
    }
  }
  Mutable = CFDictionaryCreateMutable(a1, 0, 0, 0);
  *(_QWORD *)(DerivedStorage + 16) = Mutable;
  if (!Mutable)
    goto LABEL_107;
  v18 = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 24) = v18;
  if (!v18)
    goto LABEL_107;
  v19 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 64) = v19;
  if (!v19)
    goto LABEL_107;
  v20 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004062D53EE8uLL);
  v21 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *v20 = v21;
  if (!v21 || (v22 = FigSimpleMutexCreate(), (v20[1] = v22) == 0))
    FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 32) = v20;
  *(_QWORD *)(DerivedStorage + 8) = a2;
  CFRetain(a2);
  v23 = cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 450) : "";
  snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.playerairplay_serialize.%s", v23);
  v24 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 80) = v24;
  if (!v24)
    goto LABEL_107;
  v25 = cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 450) : "";
  snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.playerairplay_postnotification.%s", v25);
  v26 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 88) = v26;
  if (!v26)
    goto LABEL_107;
  v27 = cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 450) : "";
  snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.playerairplay_playqueuehelper.%s", v27);
  v28 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 96) = v28;
  if (!v28
    || (!cf ? (v29 = "") : (v29 = (const char *)(CMBaseObjectGetDerivedStorage() + 450)),
        snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.playerairplay_playqueue.%s", v29),
        v30 = FigDispatchQueueCreateWithPriority(),
        (*(_QWORD *)(DerivedStorage + 104) = v30) == 0))
  {
LABEL_107:
    v9 = FigSignalErrorAt();
    goto LABEL_8;
  }
  if (a3 && CFDictionaryGetValueIfPresent(a3, CFSTR("InterstitialPrimaryPlayerName"), (const void **)&v73))
  {
    v31 = v73;
    if (pap_GetPAPRegistryMutexAndList_initOnceCheck != -1)
      dispatch_once(&pap_GetPAPRegistryMutexAndList_initOnceCheck, &__block_literal_global_157);
    v32 = pap_GetPAPRegistryMutexAndList_sListLock;
    v33 = (const __CFDictionary *)pap_GetPAPRegistryMutexAndList_sList;
    MEMORY[0x19402EEEC](pap_GetPAPRegistryMutexAndList_sListLock);
    if (CFDictionaryGetValue(v33, v31))
    {
      v34 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      MEMORY[0x19402EF04](v32);
      if (v34)
      {
        v35 = CMBaseObjectGetDerivedStorage();
        *(_QWORD *)(DerivedStorage + 368) = FigCFWeakReferenceHolderCreateWithReferencedObject();
        dispatch_set_target_queue(*(dispatch_object_t *)(DerivedStorage + 104), *(dispatch_queue_t *)(v35 + 104));
      }
      goto LABEL_53;
    }
    MEMORY[0x19402EF04](v32);
  }
  v34 = 0;
LABEL_53:
  v36 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 104));
  *(_QWORD *)(DerivedStorage + 112) = v36;
  if (!v36)
    goto LABEL_104;
  dispatch_source_set_timer(v36, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  DispatchSourceBlock = (void *)FigDispatchCreateDispatchSourceBlock();
  dispatch_source_set_event_handler(*(dispatch_source_t *)(DerivedStorage + 112), DispatchSourceBlock);
  _Block_release(DispatchSourceBlock);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 112));
  v38 = (const __CFString *)value;
  v39 = CMBaseObjectGetDerivedStorage();
  v40 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_BYTE *)(v39 + 400) = 1;
  v81 = (void (*)(uint64_t, int))&__block_literal_global_176;
  v82 = &__block_literal_global_180;
  handler = &__block_literal_global_182;
  v80 = (uint64_t)&__block_literal_global_183;
  v85 = &__block_literal_global_186;
  v86 = &__block_literal_global_188;
  v83 = &__block_literal_global_189;
  v84 = &__block_literal_global_184;
  *(_QWORD *)(v39 + 224) = FigPlayerAirPlayRoute_Create((uint64_t)a1, v40, (const void **)&handler, 0, v38);
  if (_CFMZEnabled())
    FigPlayerAirPlayRoute_ResetRoutingContextIfNeeded(*(NSObject ***)(v39 + 224));
  if (v40)
    CFRelease(v40);
  if (!*(_QWORD *)(DerivedStorage + 224))
    goto LABEL_104;
  v41 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 440) = v41;
  if (!v41)
    goto LABEL_104;
  *(_BYTE *)(DerivedStorage + 40) = 1;
  *(_DWORD *)(DerivedStorage + 232) = 0;
  *(_BYTE *)(DerivedStorage + 216) = 0;
  *(_WORD *)(DerivedStorage + 43) = 0;
  v42 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "persistentDomainForName:", CFSTR("com.apple.coremedia"));
  v43 = (void *)objc_msgSend(v42, "objectForKey:", CFSTR("disableAirPlayScreenDuringPlayback"));
  if (v43)
    *(_BYTE *)(DerivedStorage + 43) = objc_msgSend(v43, "BOOLValue");
  v44 = (void *)objc_msgSend(v42, "objectForKey:", CFSTR("allowAirPlayVideoDuringAirPlayScreen"));
  if (v44)
  {
    v45 = objc_msgSend(v44, "BOOLValue");
    v46 = v45 ^ 1;
    *(_BYTE *)(DerivedStorage + 44) = v45 ^ 1;
  }
  else
  {
    v46 = *(unsigned __int8 *)(DerivedStorage + 44);
  }
  if (v46 == 1 && *(_BYTE *)(DerivedStorage + 43) == 1)
    *(_BYTE *)(DerivedStorage + 43) = 0;
  v47 = dispatch_queue_create("com.apple.coremedia.playerairplay_scrubbing", 0);
  *(_QWORD *)(DerivedStorage + 176) = v47;
  if (!v47 || (v48 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 184) = v48) == 0))
  {
LABEL_104:
    v9 = FigSignalErrorAt();
    goto LABEL_105;
  }
  v49 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 192) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 208) = *(_QWORD *)(v49 + 16);
  *(_DWORD *)(DerivedStorage + 396) = 45;
  *(_BYTE *)(DerivedStorage + 72) = 1;
  *(_DWORD *)(DerivedStorage + 76) = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForSelectionCriteriaChanged();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (a3 && CFDictionaryGetValueIfPresent(a3, CFSTR("ClientPID"), (const void **)&number))
  {
    valuePtr = 0;
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    FigPlayerAirPlayRoute_SetProperty(*(_QWORD *)(DerivedStorage + 224), CFSTR("ClientPID"), number);
    v50 = *(const void **)(DerivedStorage + 424);
    v51 = number;
    *(_QWORD *)(DerivedStorage + 424) = number;
    if (v51)
      CFRetain(v51);
    if (v50)
      CFRelease(v50);
    handler = 0;
    FigServer_CopyProcessName();
    v52 = handler;
    v53 = *(const void **)(DerivedStorage + 408);
    *(_QWORD *)(DerivedStorage + 408) = handler;
    if (v52)
      CFRetain(v52);
    if (v53)
      CFRelease(v53);
    v54 = (const void *)FigCFDictionaryGetValue();
    *(_QWORD *)(DerivedStorage + 416) = v54;
    if (v54)
      CFRetain(v54);
    if (v52)
      CFRelease(v52);
  }
  v55 = CMBaseObjectGetDerivedStorage();
  v71 = v34;
  if (!*(_QWORD *)(v55 + 104))
    goto LABEL_88;
  v56 = v55;
  *(_DWORD *)(v55 + 392) = -1;
  v57 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v57)
  {
    v9 = 4294954510;
    goto LABEL_105;
  }
  v58 = v57;
  v59 = *(NSObject **)(v56 + 104);
  v60 = (void *)CFRetain(v57);
  dispatch_set_context(v59, v60);
  dispatch_set_finalizer_f(*(dispatch_object_t *)(v56 + 104), (dispatch_function_t)playerairplay_playQueueWorkQueueFinalizer);
  v61 = *(NSObject **)(v56 + 104);
  handler = (void *)MEMORY[0x1E0C809B0];
  v80 = 3221225472;
  v81 = __playerairplay_initializeVolumeFadeOutNotification_block_invoke;
  v82 = &unk_1E2F7CF80;
  v83 = v61;
  if (!notify_register_dispatch("com.apple.mediaexperience.fadeoutappliedforplaybackhandoff", (int *)(v56 + 392), v61, &handler))
  {
    CFRelease(v58);
    v34 = v71;
    goto LABEL_88;
  }
  v9 = FigSignalErrorAt();
  CFRelease(v58);
  v34 = v71;
  if (!(_DWORD)v9)
  {
LABEL_88:
    v62 = (const void *)FigCFDictionaryGetValue();
    if (v62)
      v62 = CFRetain(v62);
    *(_QWORD *)(DerivedStorage + 432) = v62;
    v63 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 472) = v63;
    if (v63)
    {
      v64 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)(DerivedStorage + 464) = v64;
      if (v64)
      {
        v65 = CFBagCreateMutable(a1, 0, MEMORY[0x1E0C9B388]);
        *(_QWORD *)(DerivedStorage + 288) = v65;
        if (v65)
        {
          if (!v34)
          {
LABEL_98:
            if (dword_1EE2A2FA0)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v9 = 0;
            v10 = context;
            if (a4)
              goto LABEL_12;
            goto LABEL_13;
          }
          v66 = cf;
          FigBaseObject = FigPlayerGetFigBaseObject(v34);
          v68 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
          if (v68)
            v68(FigBaseObject, CFSTR("InterstitialAirPlayPlayer"), v66);
          if (dword_1EE2A2FA0)
          {
            v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v9 = 0;
          goto LABEL_103;
        }
      }
    }
    goto LABEL_104;
  }
LABEL_105:
  if (v34)
LABEL_103:
    CFRelease(v34);
LABEL_8:
  if (!(_DWORD)v9)
    goto LABEL_98;
LABEL_9:
  v10 = context;
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (a4)
LABEL_12:
    *a4 = cf;
LABEL_13:
  objc_autoreleasePoolPop(v10);
  return v9;
}

void playerairplay_checkIfAirPlayVideoSessionNeedsToStop(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 32);
  MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 16);
  MEMORY[0x19402EF04](*(_QWORD *)(v3 + 8));
  v5 = *(_QWORD *)(DerivedStorage + 32);
  MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 8));
  v6 = *(_DWORD *)(v5 + 20);
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 8));
  if (!*(_BYTE *)DerivedStorage)
  {
    if (!(v4 | v6) && pap_AirPlayState(a1) - 14 <= 2)
    {
      if (dword_1EE2A2FA0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playerairplay_savePlaybackInfoAndStopAPV(a1, 0, 0);
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 112), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  }
}

void playerairplay_reflectSubPlayerNotification(uint64_t a1, const void *a2, const void *a3)
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return;
  if (!pap_InAirPlayTransitionMode(a2))
  {
    if (pap_AirPlayState(a2) - 14 < 3)
      goto LABEL_8;
LABEL_7:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    goto LABEL_8;
  }
  if (CFEqual(a3, CFSTR("SubtitleChanged")) || CFEqual(a3, CFSTR("IsNeroPlaybackActiveDidChange")))
    goto LABEL_7;
LABEL_8:
  if (CFEqual(a3, CFSTR("RateDidChange")) || CFEqual(a3, CFSTR("CurrentItemDidChange")))
    playerairplay_updateRoutingRegistry(a2);
}

_BYTE *playerairplay_autoMediaSelectionCriteriaChanged(uint64_t a1, const void *a2)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (!*result)
    {
      CFRetain(a2);
      return (_BYTE *)FigDeferNotificationToDispatchQueue();
    }
  }
  return result;
}

void playerairplay_hijackedByOtherPlayer(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *Value;
  BOOL v10;
  const void *v11;
  const void *v12;
  BOOL v13;
  char v14;
  BOOL v15;
  char v16;
  NSObject *v17;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(a5, CFSTR("HijackingPlayer"));
  v10 = Value != a4 || Value == a2;
  if (!v10 && !*(_BYTE *)DerivedStorage)
  {
    v11 = (const void *)pap_CopyInterstitialPlayer();
    v12 = (const void *)pap_copyPrimaryPlayer();
    if (v11)
      v13 = v11 == a4;
    else
      v13 = 0;
    v14 = v13;
    if (v11)
      CFRelease(v11);
    if (v12)
    {
      CFRelease(v12);
      v15 = v12 == a4;
    }
    else
    {
      v15 = 0;
    }
    if (v15)
      v16 = 1;
    else
      v16 = v14;
    if ((v16 & 1) == 0)
    {
      if (a2)
        CFRetain(a2);
      v17 = *(NSObject **)(DerivedStorage + 104);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __playerairplay_hijackedByOtherPlayer_block_invoke;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = DerivedStorage;
      block[5] = a2;
      block[6] = a4;
      dispatch_async(v17, block);
    }
  }
}

void FigCFRelease_3(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigPlayerAirPlayCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  return FigPlayerAirPlayCreateWithOptions(a1, a2, 0, a4);
}

uint64_t playerairplay_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t Shared;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  const __CFArray *i;
  uint64_t FigBaseObject;
  _QWORD *v9;
  void (*v10)(uint64_t);
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  const void *v20;
  void (*v21)(uint64_t, _QWORD, const void *);
  NSObject *v22;
  const void *v23;
  const __CFAllocator *v24;
  const __CFDictionary *Copy;
  const __CFDictionary *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  const void *v31;
  uint64_t v32;
  __CFDictionary *v33;
  const void *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  _QWORD v41[5];
  _QWORD v42[5];
  _QWORD block[5];
  os_log_type_t type;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Shared = FigShareAndAirPlayHelperGetShared();
  if (dword_1EE2A2FA0)
  {
    v45 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)DerivedStorage && *(_QWORD *)(DerivedStorage + 104))
  {
    *(_BYTE *)DerivedStorage = 1;
    v6 = *(_QWORD *)(DerivedStorage + 472);
    if (v6)
    {
      MEMORY[0x19402EEEC](v6, v3);
      for (i = *(const __CFArray **)(DerivedStorage + 464); i; i = *(const __CFArray **)(DerivedStorage + 464))
      {
        if (CFArrayGetCount(i) < 1)
          break;
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), 0);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 464), 0);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 472));
    }
    notify_cancel(*(_DWORD *)(DerivedStorage + 392));
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetNotifyingObjectForSelectionCriteriaChanged();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetNotifyingObjectForSelectionCriteriaChanged();
    CMNotificationCenterBarrier();
    if (*(_QWORD *)(DerivedStorage + 8))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
      v9 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v9 >= 2uLL)
      {
        v10 = (void (*)(uint64_t))v9[8];
        if (v10)
          v10(FigBaseObject);
      }
    }
    if (*(_QWORD *)(DerivedStorage + 296))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v11 = *(NSObject **)(DerivedStorage + 104);
    v12 = MEMORY[0x1E0C809B0];
    if (v11)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __playerairplay_Invalidate_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_sync(v11, block);
    }
    v13 = *(NSObject **)(DerivedStorage + 176);
    if (v13)
      dispatch_sync(v13, &__block_literal_global_22_0);
    v14 = *(NSObject **)(DerivedStorage + 112);
    if (v14)
      dispatch_source_cancel(v14);
    v15 = *(NSObject **)(DerivedStorage + 80);
    if (v15)
      dispatch_sync(v15, &__block_literal_global_23);
    v16 = *(NSObject **)(DerivedStorage + 88);
    if (v16)
      dispatch_sync(v16, &__block_literal_global_24);
    v17 = *(NSObject **)(DerivedStorage + 96);
    if (v17)
      dispatch_sync(v17, &__block_literal_global_25);
    v18 = *(NSObject **)(DerivedStorage + 104);
    if (v18)
    {
      v42[0] = v12;
      v42[1] = 3221225472;
      v42[2] = __playerairplay_Invalidate_block_invoke_6;
      v42[3] = &__block_descriptor_40_e5_v8__0l;
      v42[4] = a1;
      dispatch_sync(v18, v42);
    }
    v19 = pap_AirPlayState(a1);
    if (v19 && v19 != 10 && *(_BYTE *)(DerivedStorage + 45))
      FigPlayerAirPlayRoute_ResumeAirPlayScreen(*(_QWORD *)(DerivedStorage + 224));
    v20 = *(const void **)(DerivedStorage + 296);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(DerivedStorage + 296) = 0;
    }
    *(_BYTE *)(DerivedStorage + 304) = 0;
    if (Shared)
    {
      v21 = *(void (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v21)
        v21(Shared, 0, a1);
    }
    v22 = *(NSObject **)(DerivedStorage + 104);
    if (v22)
    {
      v41[0] = v12;
      v41[1] = 3221225472;
      v41[2] = __playerairplay_Invalidate_block_invoke_7;
      v41[3] = &__block_descriptor_40_e5_v8__0l;
      v41[4] = a1;
      dispatch_sync(v22, v41);
    }
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
    v23 = *(const void **)(DerivedStorage + 16);
    if (v23)
    {
      v24 = CFGetAllocator(v23);
      Copy = CFDictionaryCreateCopy(v24, *(CFDictionaryRef *)(DerivedStorage + 16));
      if (Copy)
      {
        v26 = Copy;
        CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)playerairplay_InvalidateItem, 0);
        CFRelease(v26);
      }
    }
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
    v27 = *(_QWORD *)(DerivedStorage + 8);
    if (v27)
    {
      v28 = FigPlayerGetFigBaseObject(v27);
      if (v28)
      {
        v29 = v28;
        v30 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v30)
          v30(v29);
      }
    }
    FigPlayerAirPlayRoute_SetProperty(*(_QWORD *)(DerivedStorage + 224), CFSTR("FigAudioSession"), 0);
    v31 = *(const void **)(DerivedStorage + 376);
    if (v31)
    {
      if (pap_GetPAPRegistryMutexAndList_initOnceCheck != -1)
        dispatch_once(&pap_GetPAPRegistryMutexAndList_initOnceCheck, &__block_literal_global_157);
      v32 = pap_GetPAPRegistryMutexAndList_sListLock;
      v33 = (__CFDictionary *)pap_GetPAPRegistryMutexAndList_sList;
      MEMORY[0x19402EEEC](pap_GetPAPRegistryMutexAndList_sListLock);
      CFDictionaryRemoveValue(v33, v31);
      MEMORY[0x19402EF04](v32);
      CFRelease(*(CFTypeRef *)(DerivedStorage + 376));
    }
    v34 = *(const void **)(DerivedStorage + 384);
    if (v34)
    {
      CFRelease(v34);
      *(_QWORD *)(DerivedStorage + 384) = 0;
    }
    playerairplay_cleanUpScrubLayerAndContext();
    v35 = *(NSObject **)(DerivedStorage + 176);
    if (v35)
      dispatch_sync(v35, &__block_literal_global_26);
    v36 = *(NSObject **)(DerivedStorage + 80);
    if (v36)
      dispatch_sync(v36, &__block_literal_global_27);
    v37 = *(NSObject **)(DerivedStorage + 88);
    if (v37)
      dispatch_sync(v37, &__block_literal_global_28);
    v38 = *(NSObject **)(DerivedStorage + 104);
    if (v38)
      dispatch_sync(v38, &__block_literal_global_29_0);
    v39 = *(NSObject **)(DerivedStorage + 96);
    if (v39)
      dispatch_sync(v39, &__block_literal_global_30_1);
    playqueue_clearPlayQueue(*(_QWORD *)(DerivedStorage + 32));
  }
  return 0;
}

void playerairplay_Finalize(const void *a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  CFTypeRef *v21;
  const void *v22;
  const void *v23;
  const void *v24;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  playerairplay_Invalidate(a1);
  v3 = DerivedStorage[22];
  if (v3)
  {
    dispatch_release(v3);
    DerivedStorage[22] = 0;
  }
  if (DerivedStorage[23])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[23] = 0;
  }
  v4 = DerivedStorage[14];
  if (v4)
  {
    dispatch_release(v4);
    DerivedStorage[14] = 0;
  }
  v5 = DerivedStorage[10];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[10] = 0;
  }
  v6 = DerivedStorage[11];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[11] = 0;
  }
  v7 = DerivedStorage[13];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[13] = 0;
  }
  v8 = DerivedStorage[12];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[12] = 0;
  }
  v9 = (const void *)DerivedStorage[1];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[1] = 0;
  }
  v10 = (const void *)DerivedStorage[28];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[28] = 0;
  }
  v11 = (const void *)DerivedStorage[15];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[15] = 0;
  }
  v12 = (const void *)DerivedStorage[17];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[17] = 0;
  }
  v13 = (const void *)DerivedStorage[18];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[18] = 0;
  }
  v14 = (const void *)DerivedStorage[55];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[55] = 0;
  }
  v15 = (const void *)DerivedStorage[46];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[46] = 0;
  }
  v16 = (const void *)DerivedStorage[45];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[45] = 0;
  }
  v17 = (const void *)DerivedStorage[52];
  if (v17)
    CFRelease(v17);
  v18 = (const void *)DerivedStorage[51];
  if (v18)
    CFRelease(v18);
  v19 = (const void *)DerivedStorage[53];
  if (v19)
    CFRelease(v19);
  v20 = (const void *)DerivedStorage[54];
  if (v20)
    CFRelease(v20);
  v21 = (CFTypeRef *)DerivedStorage[4];
  if (v21)
  {
    if (*v21)
      CFRelease(*v21);
    FigSimpleMutexDestroy();
    free(v21);
  }
  FigSimpleMutexDestroy();
  DerivedStorage[3] = 0;
  v22 = (const void *)DerivedStorage[2];
  if (v22)
  {
    CFRelease(v22);
    DerivedStorage[2] = 0;
  }
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  v23 = (const void *)DerivedStorage[58];
  if (v23)
  {
    CFRelease(v23);
    DerivedStorage[58] = 0;
  }
  v24 = (const void *)DerivedStorage[36];
  if (v24)
    CFRelease(v24);
}

uint64_t playerairplay_CopyProperty(const void *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v10;
  const void **v11;
  int v12;
  const void **v13;
  BOOL v14;
  const void *SInt32;
  uint64_t v16;
  _BOOL4 IsAirplayVideoActive;
  uint64_t v18;
  uint64_t FigBaseObject;
  uint64_t (*v20)(uint64_t, const void *, uint64_t, _QWORD *);
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  CFTypeRef *v27;
  int v28;
  CFBooleanRef BOOLean;
  int valuePtr;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !a4)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (CFEqual(a2, CFSTR("IsValid")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_14:
    SInt32 = *v11;
LABEL_15:
    SInt32 = CFRetain(SInt32);
LABEL_16:
    v16 = 0;
    *a4 = SInt32;
    return v16;
  }
  if (CFEqual(a2, CFSTR("AllowsAirPlayVideo")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = v10[40];
LABEL_11:
    v13 = (const void **)MEMORY[0x1E0C9AE40];
    v14 = v12 == 0;
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("ParticipatingInCoordinatedPlayback")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = v10[448];
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("IsAirPlayVideoActive")))
  {
    IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    if (!IsAirplayVideoActive)
      v11 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_14;
  }
  if (CFEqual(a2, CFSTR("IsIntegratedTimelineSupportedByExternalPlayback")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = v10[250];
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("UseAirPlayVideoAudioOnlyMode")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = v10[42];
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("EnableBufferedAirPlayLocalPlayback"))
    || CFEqual(a2, CFSTR("BufferedAirPlayLocalPlaybackVolume")))
  {
    FigSignalErrorAt();
    goto LABEL_29;
  }
  if (CFEqual(a2, CFSTR("UsesAirPlayVideoWhileAirPlayScreenIsActive")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = v10[43];
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("PickerContextUUID")))
  {
    pap_AirPlayRoute_CopyProperty(a1, CFSTR("PickerContextUUID"), a3, a4);
    return 0;
  }
  if (CFEqual(a2, CFSTR("AirPlayVideoScrubbingCAContextID")))
  {
    v21 = (void *)MEMORY[0x19403137C]();
    v22 = (void *)*((_QWORD *)v10 + 20);
    if (v22)
      goto LABEL_41;
    v23 = *MEMORY[0x1E0C9AE50];
    v24 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("FigPlayerAirPlay_Scrub_CAContext"), *MEMORY[0x1E0CD2A20], *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD2A40], 0);
    v25 = (const void *)objc_msgSend(MEMORY[0x1E0CD28E0], "contextWithOptions:", v24);
    *((_QWORD *)v10 + 20) = v25;
    if (!v25)
      goto LABEL_52;
    CFRetain(v25);
    if (!*((_QWORD *)v10 + 21))
    {
      v26 = (const void *)objc_msgSend(MEMORY[0x1E0CD27A8], "layer");
      *((_QWORD *)v10 + 21) = v26;
      if (v26)
        CFRetain(v26);
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", v23, *MEMORY[0x1E0CD3160]);
    objc_msgSend(*((id *)v10 + 20), "setLayer:", *((_QWORD *)v10 + 21));
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    v22 = (void *)*((_QWORD *)v10 + 20);
    if (v22)
    {
LABEL_41:
      valuePtr = objc_msgSend(v22, "contextId");
      v16 = 0;
      *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    }
    else
    {
LABEL_52:
      v16 = FigSignalErrorAt();
    }
    objc_autoreleasePoolPop(v21);
    return v16;
  }
  if (CFEqual(a2, CFSTR("PlayerName")))
  {
    SInt32 = (const void *)*((_QWORD *)v10 + 47);
    if (!SInt32)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (CFEqual(a2, CFSTR("IsSetupForAirPlayVideo")))
  {
    BOOLean = 0;
    pap_AirPlayRoute_CopyProperty(a1, CFSTR("IsSetupForAirPlayVideo"), *MEMORY[0x1E0C9AE00], &BOOLean);
    if (BOOLean && CFBooleanGetValue(BOOLean))
      v27 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    else
      v27 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    *a4 = CFRetain(*v27);
    if (BOOLean)
      CFRelease(BOOLean);
    return 0;
  }
  v28 = pap_AirPlayState(a1);
  if (v28 && v28 != 10)
  {
    if (CFEqual(a2, CFSTR("ActionAtEnd")))
    {
      SInt32 = (const void *)*((_QWORD *)v10 + 15);
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("PlaybackState")))
    {
      SInt32 = (const void *)FigCFNumberCreateSInt32();
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("ExternalProtectionStatus")))
    {
      SInt32 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlayerExternalProtectionStatusKey_Video, (const void **)kFigPlayerExternalProtectionStatus_Protected, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      goto LABEL_16;
    }
  }
  else
  {
    if (CFEqual(a2, CFSTR("ExternalPlaybackCapabilities")))
    {
      SInt32 = (const void *)*((_QWORD *)v10 + 33);
      if (!SInt32)
        goto LABEL_16;
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("IsBufferedAirPlayActive")))
    {
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      v13 = (const void **)MEMORY[0x1E0C9AE40];
      v14 = *((_QWORD *)v10 + 37) == 0;
LABEL_12:
      if (v14)
        v11 = v13;
      goto LABEL_14;
    }
  }
LABEL_29:
  v18 = *((_QWORD *)v10 + 1);
  if (!v18)
    return FigSignalErrorAt();
  FigBaseObject = FigPlayerGetFigBaseObject(v18);
  v20 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v20)
    return 4294954514;
  return v20(FigBaseObject, a2, a3, a4);
}

uint64_t playerairplay_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v13;
  char v15;
  CFTypeRef v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  cf = 0;
  v15 = 0;
  v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playerairplay_handleSetProperty, &v15, &cf, &v16);
  if ((_DWORD)v7)
    goto LABEL_6;
  if (v15)
  {
    v13 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(DerivedStorage + 8);
    if (!v8)
    {
      v7 = FigSignalErrorAt();
      goto LABEL_6;
    }
    v10 = v16;
    v9 = cf;
    FigBaseObject = FigPlayerGetFigBaseObject(v8);
    v12 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v12)
    {
      v7 = v12(FigBaseObject, v9, v10);
LABEL_6:
      v13 = v7;
      goto LABEL_8;
    }
    v13 = 4294954514;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v13;
}

void playerairplay_externalStartupTaskCompleted(uint64_t a1, const void *a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v4;
  NSObject *v5;
  _QWORD block[6];
  int v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v7 = 0;
  if (!*DerivedStorage)
  {
    v4 = DerivedStorage;
    if (FigCFDictionaryGetInt32IfPresent())
    {
      if (a2)
        CFRetain(a2);
      v5 = *((_QWORD *)v4 + 13);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __playerairplay_externalStartupTaskCompleted_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = v4;
      block[5] = a2;
      dispatch_async(v5, block);
    }
  }
}

uint64_t playerairplay_removeFigAudioSessionNotificationHandlers()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 384))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void playerairplay_resetAirPlayRouteInformation(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  playerairplay_updateAirPlayRouteInformationAndEndpoint(a1, 0, 0);
  pap_invalidateEndpointPlaybackSession(a1);
  v3 = *(const void **)(DerivedStorage + 256);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 256) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 264);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 264) = 0;
    *(_BYTE *)(DerivedStorage + 272) = 0;
    if (!*(_BYTE *)DerivedStorage)
      playerairplay_postPlayerNotification(a1, CFSTR("ExternalPlaybackCapabilitiesChanged"), 0);
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 272) = 0;
  }
}

uint64_t pap_setAirPlayState(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  int v5;
  int v7;
  _BOOL4 IsAirplayVideoActive;
  uint64_t result;
  int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = pap_AirPlayState(a1);
  v7 = v5 == 16 || (v5 & 0xFFFFFFFE) == 14;
  IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  *(_DWORD *)(DerivedStorage + 232) = a2;
  playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, IsAirplayVideoActive);
  result = pap_AirPlayState(a1);
  v11 = (_DWORD)result == 16 || (result & 0xFFFFFFFE) == 14;
  if (v7 != v11)
    return playerairplay_updateShareAndAirPlayEchoMitigation(a1);
  return result;
}

void playerairplay_removeAndCleanupQueuedItemsOnAirPlayController()
{
  uint64_t DerivedStorage;
  const __CFArray *PlayQueueSnapshot;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(_QWORD *)(DerivedStorage + 32), 0);
  if (PlayQueueSnapshot)
  {
    v2 = PlayQueueSnapshot;
    if (!*(_BYTE *)DerivedStorage)
    {
      Count = CFArrayGetCount(PlayQueueSnapshot);
      if (Count >= 1)
      {
        v4 = Count;
        for (i = 0; i != v4; ++i)
        {
          if (*(_BYTE *)DerivedStorage)
            break;
          ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
          if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 733))
          {
            itemairplay_removeQueuedItemOnAirPlayController((uint64_t)ValueAtIndex);
            playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(_QWORD *)(DerivedStorage + 32), ValueAtIndex, 0, 1);
          }
        }
      }
    }
    CFRelease(v2);
  }
}

uint64_t playerairplay_InvalidateItem(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  result = FigPlaybackItemGetFigBaseObject(a2);
  if (result)
  {
    v3 = result;
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v4)
      return v4(v3);
  }
  return result;
}

void playerairplay_cleanUpScrubLayerAndContext()
{
  uint64_t DerivedStorage;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (void *)MEMORY[0x19403137C]();
  if (DerivedStorage && (*(_QWORD *)(DerivedStorage + 160) || *(_QWORD *)(DerivedStorage + 168)))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 184));
    v2 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 192) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 208) = *(_QWORD *)(v2 + 16);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 184));
    v3 = *(NSObject **)(DerivedStorage + 176);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __playerairplay_cleanUpScrubLayerAndContext_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = DerivedStorage;
    dispatch_sync(v3, block);
  }
  objc_autoreleasePoolPop(v1);
}

void playqueue_clearPlayQueue(uint64_t a1)
{
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)a1);
  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x19402EF04);
}

void __playerairplay_externalStartupTaskCompleted_block_invoke(uint64_t a1)
{
  int v2;
  const void *v4;

  if (!**(_BYTE **)(a1 + 32))
  {
    v2 = pap_AirPlayState(*(const void **)(a1 + 40));
    if (v2 && v2 != 10)
      playerairplay_setRateAirPlay(*(const void **)(a1 + 40), 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
}

void playerairplay_setRateAirPlay(const void *a1, int a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *Mutable;
  float v15;
  int v16;
  CFTypeRef v17;
  float v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = DerivedStorage;
  cf = 0;
  if (*(float *)(DerivedStorage + 48) != 0.0 && *(_QWORD *)(DerivedStorage + 168))
    pap_clearLayerContents(a1);
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v11 + 32), 0, (unint64_t)&cf);
  v12 = CMBaseObjectGetDerivedStorage();
  if (cf)
  {
    v13 = v12;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetFloat32();
    if (a2)
    {
      v21 = *(_OWORD *)a3;
      v22 = *(_QWORD *)(a3 + 16);
      FigCFDictionarySetCMTime();
      v21 = *(_OWORD *)a4;
      v22 = *(_QWORD *)(a4 + 16);
      FigCFDictionarySetCMTime();
    }
    if (a5)
      CFDictionarySetValue(Mutable, CFSTR("SetRateOptions"), a5);
    itemairplay_NotifyReachedTimeToPauseBufferingIfFF(a1, cf);
    LOBYTE(v21) = 0;
    LOBYTE(v19) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    v15 = *(float *)(v11 + 48);
    if (v15 == 0.0 || *(_BYTE *)(v11 + 480))
    {
      v16 = 1;
    }
    else
    {
      playerairplay_notifyStartupTasksOfEvents(a1, cf, 5, 0, MEMORY[0x1E0CA2E18], &v21, v15);
      v16 = v21;
      *(_BYTE *)(v11 + 480) = 1;
      if (!v16)
      {
LABEL_20:
        playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, cf != 0);
        if ((*(_DWORD *)(v11 + 76) == 4 || *(float *)(v11 + 48) == 0.0) && v16)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v13 + 344));
          FigCFDictionarySetValue();
          MEMORY[0x19402EF04](*(_QWORD *)(v13 + 344));
          playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
        }
        goto LABEL_28;
      }
      v15 = *(float *)(v11 + 48);
    }
    if (v15 != 0.0 && *(_BYTE *)(v11 + 56))
      v16 = 0;
    goto LABEL_20;
  }
  if (!playerairplay_deferMediaControlPlaylistForInterstitials(a1))
  {
    v17 = a1 ? CFRetain(a1) : 0;
    v18 = *(float *)(v11 + 48);
    v21 = *(_OWORD *)a3;
    v22 = *(_QWORD *)(a3 + 16);
    v19 = *(_OWORD *)a4;
    v20 = *(_QWORD *)(a4 + 16);
    pap_PlaybackSessionSetRate(v17, a1, a2, &v21, &v19, a5, 1, v18);
    if (v17)
      CFRelease(v17);
  }
  playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, cf != 0);
  Mutable = 0;
LABEL_28:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

void pap_clearLayerContents(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 184));
  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 192) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 208) = *(_QWORD *)(v3 + 16);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 184));
  CFRetain(a1);
  v4 = *(NSObject **)(DerivedStorage + 176);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __pap_clearLayerContents_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  dispatch_async(v4, v5);
}

uint64_t playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(uint64_t result, unint64_t a2, unint64_t a3)
{
  CFArrayRef *v5;
  CFIndex CurrentClientPlayQueueItemIndexInternal;
  const void *ValueAtIndex;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *v11;
  _BYTE *DerivedStorage;
  CFTypeRef v13;

  if (a2 | a3)
  {
    v5 = (CFArrayRef *)result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 8));
    if (a2)
    {
      CurrentClientPlayQueueItemIndexInternal = playqueue_getCurrentClientPlayQueueItemIndexInternal(v5);
      if (CurrentClientPlayQueueItemIndexInternal != -1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*v5, CurrentClientPlayQueueItemIndexInternal);
        if (ValueAtIndex)
          ValueAtIndex = CFRetain(ValueAtIndex);
        *(_QWORD *)a2 = ValueAtIndex;
      }
    }
    if (a3)
    {
      Count = CFArrayGetCount(*v5);
      if (Count >= 1)
      {
        v9 = Count;
        v10 = 0;
        while (1)
        {
          v11 = CFArrayGetValueAtIndex(*v5, v10);
          DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
          if (!DerivedStorage[72] && DerivedStorage[733] && DerivedStorage[739] != 2)
            break;
          if (v9 == ++v10)
            goto LABEL_20;
        }
        if (v11)
          v13 = CFRetain(v11);
        else
          v13 = 0;
        *(_QWORD *)a3 = v13;
      }
    }
LABEL_20:
    JUMPOUT(0x19402EF04);
  }
  return result;
}

void itemairplay_NotifyReachedTimeToPauseBufferingIfFF(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = pap_AirPlayState(a1);
  if (v6
    && v6 != 10
    && !*(_BYTE *)(DerivedStorage + 249)
    && *(float *)(DerivedStorage + 48) > 1.0
    && (*(_BYTE *)(v5 + 508) & 1) != 0)
  {
    itemairplay_postItemNotification(a2, CFSTR("ReachedTimeToPauseBuffering"), 0);
  }
}

const __CFArray *playerairplay_notifyStartupTasksOfEvents(const void *a1, const void *a2, int a3, int a4, uint64_t a5, _BYTE *a6, float a7)
{
  uint64_t DerivedStorage;
  uint64_t v15;
  int v16;
  const __CFArray *Copy;
  CFIndex v19;
  const __CFArray *v20;
  const void *ValueAtIndex;
  uint64_t v22;
  __CFDictionary *NotificationPayloadForProperties;
  int v24;
  uint64_t v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v27;
  _BYTE *v28;
  const void *v29;
  const __CFArray *v30;
  uint64_t v31;
  int v32;
  CFIndex Count;
  BOOL v34;
  CFTypeRef cf;
  CMTime v36;
  CMTime v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v34 = 0;
  *a6 = 1;
  if (!a2)
    return 0;
  v15 = DerivedStorage;
  v16 = pap_AirPlayState(a1);
  Copy = 0;
  if (a7 != 0.0)
  {
    if (v16)
    {
      if (v16 != 10)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v15 + 472));
        Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(v15 + 464));
        MEMORY[0x19402EF04](*(_QWORD *)(v15 + 472));
        if (Copy)
        {
          Count = CFArrayGetCount(Copy);
          if (Count < 1)
          {
LABEL_34:
            v20 = Copy;
            NotificationPayloadForProperties = 0;
            Copy = 0;
          }
          else
          {
            v28 = a6;
            v19 = 0;
            v32 = a4;
            v30 = Copy;
            v31 = a5;
            v29 = a2;
            while (1)
            {
              v20 = Copy;
              ValueAtIndex = CFArrayGetValueAtIndex(Copy, v19);
              v22 = FigPlayerStartupTaskCopyRequiredParameters((uint64_t)ValueAtIndex, (__CFArray **)&cf);
              if ((_DWORD)v22)
              {
                Copy = (const __CFArray *)v22;
                NotificationPayloadForProperties = 0;
                goto LABEL_35;
              }
              NotificationPayloadForProperties = FPSupport_CreateNotificationPayloadForProperties((uint64_t)a1, (uint64_t)a2, (CFArrayRef)cf);
              if (FigCFArrayContainsValue())
                FigCFDictionarySetFloat32();
              if (FigCFArrayContainsValue())
                FigCFDictionarySetValue();
              v24 = FigCFArrayContainsValue();
              if (a4 && v24)
                FigCFDictionarySetInt32();
              if (FigCFArrayContainsValue() && (*(_BYTE *)(a5 + 12) & 1) != 0)
              {
                v37 = *(CMTime *)a5;
                FigCFDictionarySetCMTime();
              }
              if (FigCFArrayContainsValue())
              {
                v37 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
                itemairplay_GetCurrentTime(a2, &v37);
                v36 = v37;
                FigCFDictionarySetCMTime();
              }
              v25 = FigPlayerStartupTaskNotifyOfEvents((uint64_t)ValueAtIndex, a3, (uint64_t)NotificationPayloadForProperties, &v34);
              if ((_DWORD)v25)
                break;
              if (dword_1EE2A2FA0)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                Copy = v30;
                a5 = v31;
                a4 = v32;
                a2 = v29;
              }
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              if (NotificationPayloadForProperties)
                CFRelease(NotificationPayloadForProperties);
              if (!v34)
                *v28 = 0;
              if (Count == ++v19)
                goto LABEL_34;
            }
            Copy = (const __CFArray *)v25;
            v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_35:
          CFRelease(v20);
          if (NotificationPayloadForProperties)
            CFRelease(NotificationPayloadForProperties);
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  return Copy;
}

void playerairplay_inferPlaybackStateFromAirPlayPlayer(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  int WaitingState;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  CFMutableDictionaryRef Mutable;

  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(float *)(DerivedStorage + 48) == 0.0)
  {
    WaitingState = 0;
    goto LABEL_16;
  }
  if (!a2)
  {
    WaitingState = 3;
    goto LABEL_16;
  }
  v6 = DerivedStorage;
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = pap_AirPlayState(a1);
  if (!v8 || v8 == 10)
    goto LABEL_12;
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 472));
  v9 = *(const __CFArray **)(v7 + 464);
  if (!v9 || (Count = CFArrayGetCount(v9), Count < 1))
  {
LABEL_11:
    MEMORY[0x19402EF04](*(_QWORD *)(v7 + 472));
LABEL_12:
    if (*(_BYTE *)(v6 + 56))
      WaitingState = 6;
    else
      WaitingState = 4;
    goto LABEL_16;
  }
  v11 = Count;
  v12 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 464), v12);
    if (!FigPlayerStartupTaskDoesAllowStartup((uint64_t)ValueAtIndex))
      break;
    if (v11 == ++v12)
      goto LABEL_11;
  }
  WaitingState = FigPlayerStartupTaskGetWaitingState((uint64_t)ValueAtIndex);
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 472));
LABEL_16:
  v14 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v14 + 76) != WaitingState)
  {
    v15 = v14;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    *(_DWORD *)(v15 + 76) = WaitingState;
    playerairplay_postPlayerNotification(a1, CFSTR("PlaybackStateDidChange"), Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(const void *a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  NSObject *v4;
  _QWORD v5[6];

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v3 = DerivedStorage;
    if (a1)
      CFRetain(a1);
    v4 = *((_QWORD *)v3 + 13);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1;
    dispatch_async(v4, v5);
  }
}

BOOL playerairplay_deferMediaControlPlaylistForInterstitials(const void *a1)
{
  uint64_t v3;
  const void *v4;
  _BOOL8 v5;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 249) || pap_AirPlayState(a1) - 14 > 2)
    return 0;
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360))
    return playerairplay_interstitialEventActive();
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
    return 0;
  v3 = pap_copyPrimaryPlayer();
  if (!v3)
    return 0;
  v4 = (const void *)v3;
  v5 = !playerairplay_interstitialEventActive();
  CFRelease(v4);
  return v5;
}

void pap_PlaybackSessionSetRate(const void *a1, const void *a2, char a3, __int128 *a4, __int128 *a5, const void *a6, int a7, float a8)
{
  _QWORD v8[7];
  float v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  if (a1)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __pap_PlaybackSessionSetRate_block_invoke;
    v8[3] = &__block_descriptor_109_e5_v8__0l;
    v8[4] = a1;
    v8[5] = a2;
    v9 = a8;
    v8[6] = a6;
    v14 = a3;
    v10 = *a4;
    v11 = *((_QWORD *)a4 + 2);
    v12 = *a5;
    v13 = *((_QWORD *)a5 + 2);
    pap_DispatchHelper(a1, a2, (uint64_t)v8, a7, 0, a6, 0, 0);
  }
}

void __pap_clearLayerContents_block_invoke(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 168))
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "setContents:", 0);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t playqueue_getCurrentClientPlayQueueItemIndexInternal(CFArrayRef *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  _BYTE *DerivedStorage;

  Count = CFArrayGetCount(*a1);
  if (Count < 1)
    return -1;
  v3 = Count;
  v4 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*a1, v4);
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage[72] && DerivedStorage[732] && DerivedStorage[739] != 2)
      break;
    if (v3 == ++v4)
      return -1;
  }
  return v4;
}

void itemairplay_postItemNotification(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  _BYTE *v9;
  _BYTE *v10;
  NSObject *v11;
  _QWORD v12[10];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v7 = DerivedStorage;
    v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v9 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (v9)
    {
      v10 = v9;
      if (!*v9)
      {
        if (a1)
          CFRetain(a1);
        if (a2)
          CFRetain(a2);
        if (a3)
          CFRetain(a3);
        if (v8)
          CFRetain(v8);
        v11 = *((_QWORD *)v10 + 11);
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 3221225472;
        v12[2] = __itemairplay_postItemNotification_block_invoke;
        v12[3] = &__block_descriptor_80_e5_v8__0l;
        v12[4] = v7;
        v12[5] = v10;
        v12[6] = a2;
        v12[7] = a1;
        v12[8] = a3;
        v12[9] = v8;
        dispatch_async(v11, v12);
      }
    }
    if (v8)
      CFRelease(v8);
  }
}

void __itemairplay_postItemNotification_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 72) && !**(_BYTE **)(a1 + 40))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  FigReadWriteLockUnlockForRead();
  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 64);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 72);
  if (v5)
    CFRelease(v5);
}

uint64_t itemairplay_GetCurrentTime(CFTypeRef a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, CMTime *);
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  OpaqueCMTimebase *v14;
  CMTime v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    v12 = FigSignalErrorAt();
    v6 = 0;
  }
  else
  {
    v5 = DerivedStorage;
    v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v7 = CMBaseObjectGetDerivedStorage();
    if (!v7 || *(_BYTE *)v7)
    {
      v11 = FigSignalErrorAt();
      goto LABEL_8;
    }
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v7 + 32), 0, (unint64_t)&cf);
    v8 = pap_AirPlayState(v6);
    if (v8 && v8 != 10)
    {
      if (a2)
      {
        if (cf == a1 && (v14 = *(OpaqueCMTimebase **)(v5 + 576)) != 0)
        {
          CMTimebaseGetTime(&v16, v14);
          v12 = 0;
          *a2 = v16;
        }
        else
        {
          v12 = 0;
          v13 = *(_OWORD *)(v5 + 160);
          a2->epoch = *(_QWORD *)(v5 + 176);
          *(_OWORD *)&a2->value = v13;
        }
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v9 = *(_QWORD *)(v5 + 8);
      v10 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v10)
      {
        v11 = v10(v9, a2);
LABEL_8:
        v12 = v11;
        goto LABEL_16;
      }
      v12 = 4294954514;
    }
  }
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  return v12;
}

void playerairplay_postPlayerNotification(const void *a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  NSObject *v8;
  _QWORD v9[8];

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v7 = DerivedStorage;
    if (a1)
      CFRetain(a1);
    if (a2)
      CFRetain(a2);
    if (a3)
      CFRetain(a3);
    v8 = *((_QWORD *)v7 + 11);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __playerairplay_postPlayerNotification_block_invoke;
    v9[3] = &__block_descriptor_64_e5_v8__0l;
    v9[4] = v7;
    v9[5] = a2;
    v9[6] = a1;
    v9[7] = a3;
    dispatch_async(v8, v9);
  }
}

void __playerairplay_postPlayerNotification_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (!**(_BYTE **)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
}

void __playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  if (!**(_BYTE **)(a1 + 32))
  {
    playerairplay_checkAndUpdatePlayQueueItems(*(void **)(a1 + 40));
    v2 = pap_CopyInterstitialPlayer();
    if (v2)
    {
      v3 = (const void *)v2;
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v2);
      CFRelease(v3);
    }
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
}

void playerairplay_checkAndUpdatePlayQueueItems(void *a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  uint64_t v4;
  const __CFArray *PlayQueueSnapshot;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  void *ValueAtIndex;
  CFTypeRef cf;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v3 = DerivedStorage;
    if (pap_AirPlayState(a1) - 14 <= 2)
    {
      cf = 0;
      playerairplay_synchronizePlayQueueItems(a1);
      playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*((_QWORD *)v3 + 4), 0, (unint64_t)&cf);
      if (cf)
      {
        if (!playerairplay_deferMediaControlPlaylistForInterstitials(a1))
        {
          if (v3[248])
          {
            v4 = CMBaseObjectGetDerivedStorage();
            PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(_QWORD *)(v4 + 32), 0);
            if (PlayQueueSnapshot)
            {
              v6 = PlayQueueSnapshot;
              Count = CFArrayGetCount(PlayQueueSnapshot);
              if (Count >= 1)
              {
                v8 = Count;
                for (i = 0; i != v8; ++i)
                {
                  ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, i);
                  itemairplay_applyCachedPropertiesOnMediaControlItem(ValueAtIndex);
                }
              }
              CFRelease(v6);
            }
          }
          else
          {
            if (!cf)
              return;
            itemairplay_applyCachedPropertiesOnMediaControlItem((void *)cf);
          }
        }
        if (cf)
          CFRelease(cf);
      }
    }
  }
}

uint64_t pap_CopyInterstitialPlayer()
{
  CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360))
    return FigCFWeakReferenceHolderCopyReferencedObject();
  else
    return 0;
}

void playerairplay_synchronizePlayQueueItems(void *a1)
{
  uint64_t DerivedStorage;
  const __CFArray *PlayQueueSnapshot;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  __CFDictionary *v7;
  CFIndex v8;
  void *ValueAtIndex;
  uint64_t v10;
  int v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BYTE *v13;
  NSObject *v14;
  NSObject *v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  const void *v21;
  char v22;
  char v23;
  uint64_t v24;
  const void *v25;
  int v26;
  NSObject *v27;
  void (*v28)(void *, __int128 *);
  int v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  BOOL v34;
  NSObject *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  const void *v39;
  CFArrayRef v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, CFArrayRef, _DWORD *, uint64_t);
  int v43;
  char v44;
  uint64_t v45;
  const void *v46;
  int v47;
  char v48;
  uint64_t v49;
  const void *v50;
  int v51;
  char v52;
  CFArrayRef Copy;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, CFArrayRef, __int128 *, uint64_t);
  int v56;
  CFArrayRef v57;
  CFArrayRef v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, _QWORD, CFArrayRef, __int128 *, uint64_t);
  int v61;
  CFArrayRef v62;
  NSObject *v63;
  uint64_t v64;
  unint64_t v65;
  NSObject *v66;
  NSObject *v67;
  NSObject *v68;
  const __CFString *v69;
  const void *v70;
  uint64_t v71;
  const void *v72;
  _BYTE *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  int v77;
  NSObject *v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  NSObject *v82;
  const void *v83;
  const __CFAllocator *allocator;
  _BOOL4 v85;
  CFIndex v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  const __CFString *v90;
  _DWORD v91[3];
  __int128 values;
  const __CFString *v93;
  const __CFString *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v88 = a1;
  v85 = playerairplay_deferMediaControlPlaylistForInterstitials(a1);
  v87 = DerivedStorage;
  PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(_QWORD *)(DerivedStorage + 32), 0);
  if (PlayQueueSnapshot)
  {
    v4 = PlayQueueSnapshot;
    Count = CFArrayGetCount(PlayQueueSnapshot);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      v8 = 0;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v86 = Count;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, v8);
        v10 = CMBaseObjectGetDerivedStorage();
        FigReadWriteLockLockForRead();
        if (*(_BYTE *)(v10 + 72))
        {
          ValueAtIndex = v7;
          goto LABEL_27;
        }
        v11 = *(unsigned __int8 *)(v10 + 739);
        if (v11 == 2)
        {
          if (dword_1EE2A2FA0)
          {
            LODWORD(v89) = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          itemairplay_doCleanupAtEndOfPlayback();
          itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 1);
          v24 = *(_QWORD *)(v87 + 32);
          v25 = ValueAtIndex;
          v26 = 1;
          goto LABEL_26;
        }
        if (!*(_BYTE *)(v10 + 732))
        {
          if (*(_BYTE *)(v10 + 733))
          {
            if (dword_1EE2A2FA0)
            {
              LODWORD(v89) = 0;
              v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (!v7)
            {
              v33 = pap_AirPlayState(v88);
              v34 = (v33 & 0xFFFFFFFE) == 0xE || v33 == 12;
              if (v34 && dword_1EE2A2FA0)
              {
                LODWORD(v89) = 0;
                v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            if (v11 == 1)
            {
              *(_BYTE *)(v10 + 739) = 2;
              itemairplay_doCleanupAtEndOfPlayback();
              itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 1);
              playerairplay_removeQueuedItemUUIDStringOnAirPlayController(v88, *(const void **)(v10 + 80));
              playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(_QWORD *)(v87 + 32), ValueAtIndex, 0, 1);
            }
            itemairplay_doCleanupAtEndOfPlayback();
            itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 1);
            playerairplay_removeQueuedItemUUIDStringOnAirPlayController(v88, *(const void **)(v10 + 80));
            playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(_QWORD *)(v87 + 32), ValueAtIndex, 0, 1);
          }
          if (dword_1EE2A2FA0)
          {
            LODWORD(v89) = 0;
            v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          itemairplay_doCleanupAtEndOfPlayback();
          itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 0);
LABEL_134:
          v24 = *(_QWORD *)(v87 + 32);
          v25 = ValueAtIndex;
          v26 = 0;
LABEL_26:
          playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(v24, v25, v26, 1);
        }
        v13 = (_BYTE *)CMBaseObjectGetDerivedStorage();
        if (*(_BYTE *)(v10 + 733))
        {
          if (v85)
          {
            v89 = *MEMORY[0x1E0CA2E18];
            v90 = *(const __CFString **)(MEMORY[0x1E0CA2E18] + 16);
            if (dword_1EE2A2FA0)
            {
              v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CMTimebaseSetRate(*(CMTimebaseRef *)(v10 + 576), 0.0);
            v28 = *(void (**)(void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            if (v28)
              v28(ValueAtIndex, &v89);
            values = v89;
            v93 = v90;
            itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)ValueAtIndex, (uint64_t)&values);
            itemairplay_controlPlaybackActivityTimer((uint64_t)ValueAtIndex, 0);
            playerairplay_removeQueuedItemUUIDStringOnAirPlayController(v88, *(const void **)(v10 + 80));
            playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(_QWORD *)(v87 + 32), ValueAtIndex, 0, 1);
          }
        }
        else
        {
          v16 = *(unsigned __int8 *)(v10 + 736);
          v17 = v16 > 5;
          v18 = (1 << v16) & 0x23;
          if (v17 || v18 == 0)
          {
            v20 = CMBaseObjectGetDerivedStorage();
            v21 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
            v22 = 0;
            v23 = 1;
            switch(*(_BYTE *)(v20 + 735))
            {
              case 0:
                if (dword_1EE2A2FA0)
                {
                  LODWORD(v89) = 0;
                  v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                v83 = v21;
                v71 = CMBaseObjectGetDerivedStorage();
                FigReadWriteLockLockForRead();
                if (*(_BYTE *)(v71 + 72))
                {
                  FigReadWriteLockUnlockForRead();
                  goto LABEL_164;
                }
                v72 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                v73 = (_BYTE *)CMBaseObjectGetDerivedStorage();
                if (!v73 || *v73 || itemairplay_assureItemForAirPlay())
                {
                  v75 = 0;
                  v74 = v72;
                }
                else
                {
                  LOBYTE(values) = 0;
                  LOBYTE(v91[0]) = 0;
                  LOBYTE(v89) = 0;
                  FigCFDictionaryGetBooleanIfPresent();
                  FigCFDictionaryGetBooleanIfPresent();
                  v74 = v72;
                  if (!LOBYTE(v91[0]) && !*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
                  {
                    v76 = (const void *)itemairplay_createCPEProtectorIfAvailable((uint64_t)ValueAtIndex, 1, &values);
                    if (v76)
                    {
                      v75 = v76;
                      *(_BYTE *)(v71 + 735) = 2;
                      v77 = playerairplay_performQueuedItemVodkaExchange(v72, ValueAtIndex, v76, values);
                      v21 = v83;
                      if (!v77 && *(_BYTE *)(v71 + 735) == 2)
                        itemairplay_controlPlaybackActivityTimer((uint64_t)ValueAtIndex, 3);
                      goto LABEL_160;
                    }
                  }
                  *(_BYTE *)(v71 + 735) = 1;
                  playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v72);
                  v75 = 0;
                }
                v21 = v83;
LABEL_160:
                if (v74)
                  CFRelease(v74);
                FigReadWriteLockUnlockForRead();
                if (v75)
                  CFRelease(v75);
                goto LABEL_164;
              case 1:
              case 3:
                goto LABEL_171;
              case 2:
                v64 = CMBaseObjectGetDerivedStorage();
                if (v64)
                  v65 = 1000000000 * *(unsigned int *)(v64 + 396);
                else
                  v65 = 45000000000;
                if (FigGetUpTimeNanoseconds() - *(_QWORD *)(v20 + 768) < v65)
                  goto LABEL_164;
                if (dword_1EE2A2FA0)
                {
LABEL_113:
                  LODWORD(v89) = 0;
                  v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
LABEL_169:
                itemairplay_doCleanupAtEndOfPlayback();
                itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 0);
                v23 = 0;
                goto LABEL_170;
              case 4:
                if (dword_1EE2A2FA0)
                  goto LABEL_113;
                goto LABEL_169;
              default:
                if (dword_1EE2A2FA0)
                {
                  LODWORD(v89) = 0;
                  v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
                  v23 = 1;
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                else
                {
LABEL_164:
                  v23 = 1;
                }
LABEL_170:
                v22 = 1;
LABEL_171:
                if (v21)
                  CFRelease(v21);
                if ((v22 & 1) != 0)
                {
                  if ((v23 & 1) == 0)
                    playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(_QWORD *)(v87 + 32), ValueAtIndex, 1, 1);
                }
                else if (v85)
                {
                  if (dword_1EE2A2FA0)
                  {
                    LODWORD(v89) = 0;
                    v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                }
                else
                {
                  if (v13 && !v13[733] && (!v7 || v13[732]))
                  {
                    if (dword_1EE2A2FA0)
                    {
                      LODWORD(v89) = 0;
                      v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
LABEL_35:
                    if (v13[739] != 1)
                      goto LABEL_94;
                    goto LABEL_36;
                  }
                  if (dword_1EE2A2FA0)
                  {
                    LODWORD(v89) = 0;
                    v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  if (v7 || pap_AirPlayState(v88) != 14)
                  {
                    if (*(_BYTE *)(v87 + 248) || !v13 || FigCFEqual())
                      itemairplay_insertItemOnMediaControl(ValueAtIndex, v7);
                    else
                      *(_BYTE *)(v10 + 734) = 1;
                  }
                  else
                  {
                    playerairplay_playItemOnMediaControl(v88, ValueAtIndex);
                  }
                  itemairplay_controlPlaybackActivityTimer((uint64_t)ValueAtIndex, 0);
                }
                return;
            }
          }
        }
        if (v13)
          goto LABEL_35;
LABEL_36:
        if (*(_BYTE *)(v10 + 741) && *(_BYTE *)(v10 + 742) && *(_BYTE *)(v10 + 760))
        {
          v29 = *(unsigned __int8 *)(v10 + 736);
          if (v29 == 4)
          {
            v6 = v86;
          }
          else
          {
            v6 = v86;
            if (dword_1EE2A2FA0)
            {
              LODWORD(v89) = 0;
              v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v29 = 4;
            *(_BYTE *)(v10 + 736) = 4;
          }
        }
        else
        {
          v29 = *(unsigned __int8 *)(v10 + 736);
          if (v29 == 2)
          {
            if (dword_1EE2A2FA0)
            {
              LODWORD(v89) = 0;
              v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v36 = CMBaseObjectGetDerivedStorage();
            v37 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
            CMBaseObjectGetDerivedStorage();
            if (!*(_QWORD *)(v36 + 16))
            {
              *(_BYTE *)(v36 + 736) = 4;
              *(_BYTE *)(v36 + 760) = 1;
              goto LABEL_92;
            }
            LOBYTE(v91[0]) = 0;
            v38 = CMBaseObjectGetDerivedStorage();
            v39 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
            CMBaseObjectGetDerivedStorage();
            if (CFEqual(*(CFTypeRef *)(v38 + 24), CFSTR("com.apple.coremedia.assettype.file")))
            {
              v40 = (CFArrayRef)playerairplay_getPrerequisiteAssetPropertiesArrayForFile_sPrerequisiteAssetFilePropertyArray;
              if (!playerairplay_getPrerequisiteAssetPropertiesArrayForFile_sPrerequisiteAssetFilePropertyArray)
              {
                *(_QWORD *)&values = CFSTR("assetProperty_ContentByteStream");
                *((_QWORD *)&values + 1) = CFSTR("assetProperty_FormatReader");
                v93 = CFSTR("assetProperty_Tracks");
                v94 = CFSTR("MediaSelectionArray");
                v40 = CFArrayCreate(allocator, (const void **)&values, 4, MEMORY[0x1E0C9B378]);
                playerairplay_getPrerequisiteAssetPropertiesArrayForFile_sPrerequisiteAssetFilePropertyArray = (uint64_t)v40;
              }
            }
            else
            {
              v40 = (CFArrayRef)playerairplay_getPrerequisiteAssetPropertiesArrayForStream_sPrerequisiteAssetStreamPropertyArray;
              if (!playerairplay_getPrerequisiteAssetPropertiesArrayForStream_sPrerequisiteAssetStreamPropertyArray)
              {
                *(_QWORD *)&values = CFSTR("Duration");
                *((_QWORD *)&values + 1) = CFSTR("MediaSelectionArray");
                v40 = CFArrayCreate(allocator, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
                playerairplay_getPrerequisiteAssetPropertiesArrayForStream_sPrerequisiteAssetStreamPropertyArray = (uint64_t)v40;
              }
            }
            v41 = *(_QWORD *)(v38 + 16);
            v42 = *(uint64_t (**)(uint64_t, CFArrayRef, _DWORD *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 16);
            if (v42)
            {
              v43 = v42(v41, v40, v91, v38 + 704);
              if (!v43)
              {
                if (LOBYTE(v91[0]))
                {
                  itemairplay_postItemNotification(ValueAtIndex, CFSTR("ReadyForInspection"), 0);
                  v43 = 0;
                  v44 = 1;
                  goto LABEL_72;
                }
                v43 = 0;
                if (!v39)
                {
LABEL_74:
                  if (v43)
                    goto LABEL_92;
                  LOBYTE(values) = 0;
                  v45 = CMBaseObjectGetDerivedStorage();
                  v46 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                  CMBaseObjectGetDerivedStorage();
                  if (*(_BYTE *)(v45 + 741) || !*(_QWORD *)(v45 + 680) || *(_DWORD *)(v45 + 696))
                    goto LABEL_76;
                  MEMORY[0x19402EEEC](*(_QWORD *)(v45 + 672));
                  Copy = CFArrayCreateCopy(allocator, *(CFArrayRef *)(v45 + 680));
                  MEMORY[0x19402EF04](*(_QWORD *)(v45 + 672));
                  if (Copy)
                  {
                    v54 = *(_QWORD *)(v45 + 16);
                    v55 = *(uint64_t (**)(uint64_t, CFArrayRef, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 16);
                    if (v55)
                    {
                      v56 = v55(v54, Copy, &values, v45 + 696);
                      v57 = Copy;
                      v47 = v56;
                    }
                    else
                    {
                      v57 = Copy;
                      v47 = -12782;
                    }
                    CFRelease(v57);
                    if (v47 || !(_BYTE)values)
                    {
                      if (v47)
                        goto LABEL_146;
LABEL_78:
                      if (v46)
                        CFRelease(v46);
                      if (v47)
                        goto LABEL_92;
                      LOBYTE(values) = 0;
                      v49 = CMBaseObjectGetDerivedStorage();
                      v50 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                      CMBaseObjectGetDerivedStorage();
                      if (*(_BYTE *)(v49 + 742) || !*(_QWORD *)(v49 + 688) || *(_DWORD *)(v49 + 700))
                        goto LABEL_82;
                      MEMORY[0x19402EEEC](*(_QWORD *)(v49 + 672));
                      v58 = CFArrayCreateCopy(allocator, *(CFArrayRef *)(v49 + 688));
                      MEMORY[0x19402EF04](*(_QWORD *)(v49 + 672));
                      if (v58)
                      {
                        v59 = *(_QWORD *)(v49 + 16);
                        v60 = *(uint64_t (**)(uint64_t, _QWORD, CFArrayRef, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
                        if (v60)
                        {
                          v61 = v60(v59, 0, v58, &values, v49 + 700);
                          v62 = v58;
                          v51 = v61;
                        }
                        else
                        {
                          v62 = v58;
                          v51 = -12782;
                        }
                        CFRelease(v62);
                        if (v51 || !(_BYTE)values)
                        {
                          if (v51)
                            goto LABEL_151;
LABEL_84:
                          if (v50)
                            CFRelease(v50);
                          if (!v51)
                          {
                            if (*(_BYTE *)(v36 + 741) && *(_BYTE *)(v36 + 742) && *(_BYTE *)(v36 + 760))
                              *(_BYTE *)(v36 + 736) = 4;
                            else
                              *(_BYTE *)(v36 + 736) = 3;
                          }
LABEL_92:
                          if (v37)
                          {
                            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v37);
                            CFRelease(v37);
                          }
LABEL_94:
                          v6 = v86;
                          goto LABEL_27;
                        }
LABEL_82:
                        v51 = 0;
                        v52 = 1;
                      }
                      else
                      {
                        v51 = -12786;
LABEL_151:
                        v52 = 0;
                        *(_BYTE *)(v49 + 736) = 5;
                      }
                      *(_BYTE *)(v49 + 742) = v52;
                      goto LABEL_84;
                    }
LABEL_76:
                    v47 = 0;
                    v48 = 1;
                  }
                  else
                  {
                    v47 = -12786;
LABEL_146:
                    v48 = 0;
                    *(_BYTE *)(v45 + 736) = 5;
                  }
                  *(_BYTE *)(v45 + 741) = v48;
                  goto LABEL_78;
                }
LABEL_73:
                CFRelease(v39);
                goto LABEL_74;
              }
            }
            else
            {
              v43 = -12782;
            }
            v44 = 0;
            *(_BYTE *)(v38 + 736) = 5;
LABEL_72:
            *(_BYTE *)(v38 + 760) = v44;
            if (!v39)
              goto LABEL_74;
            goto LABEL_73;
          }
          v6 = v86;
          if (!*(_BYTE *)(v10 + 736))
          {
            *(_BYTE *)(v10 + 736) = 1;
            if (dword_1EE2A2FA0)
            {
              LODWORD(v89) = 0;
              v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            itemairplay_startAssetTypeLoadAsync(ValueAtIndex);
            goto LABEL_27;
          }
        }
        if (!*(_BYTE *)(v10 + 737) && v29 == 4 && *(_BYTE *)(v10 + 738))
        {
          if (dword_1EE2A2FA0)
          {
            LODWORD(v89) = 0;
            v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          itemairplay_postItemNotification(ValueAtIndex, CFSTR("ReadyForPlayback"), 0);
          *(_BYTE *)(v10 + 737) = 1;
        }
        else
        {
          if (v29 == 5)
          {
            if (dword_1EE2A2FA0)
            {
              LODWORD(v89) = 0;
              v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (*(_BYTE *)(v10 + 733))
            {
              itemairplay_removeQueuedItemOnAirPlayController((uint64_t)ValueAtIndex);
            }
            else
            {
              itemairplay_doCleanupAtEndOfPlayback();
              itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 0);
            }
            if (*(_BYTE *)(v10 + 760))
              v69 = CFSTR("FailedToBecomeReadyForPlayback");
            else
              v69 = CFSTR("FailedToBecomeReadyForInspection");
            itemairplay_postItemNotification(ValueAtIndex, v69, *(const void **)(v10 + 712));
            v70 = *(const void **)(v10 + 712);
            if (v70)
            {
              CFRelease(v70);
              *(_QWORD *)(v10 + 712) = 0;
            }
            goto LABEL_134;
          }
          if (!*(_BYTE *)(v10 + 738) && dword_1EE2A2FA0)
          {
            LODWORD(v89) = 0;
            v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
LABEL_27:
        FigReadWriteLockUnlockForRead();
        ++v8;
        v7 = (__CFDictionary *)ValueAtIndex;
      }
      while (v6 != v8);
    }
    CFRelease(v4);
  }
}

void itemairplay_applyCachedPropertiesOnMediaControlItem(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  const __CFDictionary *Copy;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v3 = DerivedStorage;
    v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    CMBaseObjectGetDerivedStorage();
    if (v4)
      CFRelease(v4);
    if (*(_BYTE *)(v3 + 732))
    {
      if (*(_BYTE *)(v3 + 733))
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 344));
        Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(v3 + 336));
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 336));
        MEMORY[0x19402EF04](*(_QWORD *)(v3 + 344));
        if (Copy)
        {
          if (CFDictionaryGetCount(Copy) >= 1)
            CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)pap_applyCachedPropertiesOnMediaControl, a1);
          CFRelease(Copy);
        }
      }
    }
  }
}

uint64_t pap_AirPlayState(const void *a1)
{
  CFTypeRef v1;
  uint64_t v2;

  if (a1)
    v1 = CFRetain(a1);
  else
    v1 = 0;
  v2 = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 232);
  CFRelease(v1);
  return v2;
}

CFArrayRef playqueue_createPlayQueueSnapshot(uint64_t a1, uint64_t *a2)
{
  CFArrayRef Copy;
  CFStringRef v5;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  if (*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 20))
  {
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)a1);
    v5 = playqueue_copyPlayQueueSummary(a1);
    if (!a2)
      goto LABEL_5;
    goto LABEL_4;
  }
  Copy = 0;
  v5 = 0;
  if (a2)
LABEL_4:
    *a2 = playqueue_getCurrentClientPlayQueueItemIndexInternal((CFArrayRef *)a1);
LABEL_5:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 8));
  if (v5)
    CFRelease(v5);
  return Copy;
}

void itemairplay_doCleanupAtEndOfPlayback()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(uint64_t);
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *(_QWORD *)(DerivedStorage + 664);
    if (v2)
    {
      v3 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v3)
      {
        v4 = (void (*)(uint64_t))v3[12];
        if (v4)
          v4(v2);
      }
      v5 = *(const void **)(v1 + 664);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v1 + 664) = 0;
      }
    }
    v6 = *(const void **)(v1 + 440);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v1 + 440) = 0;
    }
    *(_BYTE *)(v1 + 735) = 0;
  }
  else
  {
    FigSignalErrorAt();
  }
}

void itemairplay_cleanupItemForAirPlay(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  OpaqueCMTimebase *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  uint64_t v9;
  NSObject *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = DerivedStorage;
    v5 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
    if (v5)
    {
      CMTimebaseSetRate(v5, 0.0);
      v6 = *(const void **)(v4 + 576);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v4 + 576) = 0;
      }
    }
    v7 = *(NSObject **)(v4 + 600);
    if (v7)
    {
      dispatch_source_cancel(v7);
      if (a2)
      {
        v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        v9 = CMBaseObjectGetDerivedStorage();
        if (v9)
        {
          if (!*(_BYTE *)v9)
          {
            v10 = *(NSObject **)(v9 + 80);
            if (v10)
              dispatch_sync(v10, &__block_literal_global_54_0);
          }
        }
      }
      else
      {
        v8 = 0;
      }
      dispatch_release(*(dispatch_object_t *)(v4 + 600));
      *(_QWORD *)(v4 + 600) = 0;
    }
    else
    {
      v8 = 0;
    }
    StopAndReleaseTimer((dispatch_object_t *)(v4 + 328));
    *(_DWORD *)(v4 + 632) = 0;
    *(_BYTE *)(v4 + 744) = 0;
    if (v8)
      CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(uint64_t a1, const void *a2, int a3, int a4)
{
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  playqueue_removeItemFromClientQueueAndFromMediaControlPlaylistInternal(a1, a2, a3, a4);
  JUMPOUT(0x19402EF04);
}

void playerairplay_removeQueuedItemUUIDStringOnAirPlayController(const void *a1, const void *a2)
{
  CFTypeRef v4;
  const void *v5;
  _QWORD v6[7];

  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage() && a1)
  {
    v4 = CFRetain(a1);
    if (v4)
    {
      v5 = v4;
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __pap_PlaybackSessionRemovePlayQueueItem_block_invoke;
      v6[3] = &__block_descriptor_56_e5_v8__0l;
      v6[4] = v4;
      v6[5] = a2;
      v6[6] = a1;
      pap_DispatchHelper(v4, a1, (uint64_t)v6, 0, 0, a2, 0, 0);
      CFRelease(v5);
    }
  }
}

void itemairplay_setRememberedTimeAndDefaultFlag(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator **v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  CMTime v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = MEMORY[0x1E0CA2E68];
  if ((*(_DWORD *)(a2 + 12) & 1) != 0)
    v4 = a2;
  v5 = *(_QWORD *)(v4 + 16);
  *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)v4;
  *(_QWORD *)(DerivedStorage + 176) = v5;
  v6 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  *(_BYTE *)(DerivedStorage + 184) = (*(_DWORD *)(a2 + 12) & 1) == 0;
  v7 = *v6;
  v9 = *(CMTime *)(DerivedStorage + 160);
  v8 = CMTimeCopyDescription(v7, &v9);
  if (v8)
    CFRelease(v8);
}

uint64_t itemairplay_controlPlaybackActivityTimer(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  const void *v5;
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v4 = result;
    FigReadWriteLockLockForRead();
    if (!*(_BYTE *)(v4 + 72))
    {
      v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v7 = *(NSObject **)(v4 + 600);
      if (v7)
      {
        switch(a2)
        {
          case 0:
            dispatch_source_set_timer(v7, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
            *(_BYTE *)(v4 + 608) = 0;
            break;
          case 1:
            goto LABEL_8;
          case 2:
            if (*(_BYTE *)(v4 + 608))
            {
LABEL_8:
              if (*(_BYTE *)(DerivedStorage + 216) && *(_BYTE *)(v4 + 611))
                v8 = 30000000000;
              else
                v8 = 1000000000;
              dispatch_source_set_timer(v7, 0, v8, 0x4C4B40uLL);
              *(_BYTE *)(v4 + 608) = 1;
            }
            break;
          case 3:
            dispatch_source_set_timer(v7, 0, 1000000000 * *(unsigned int *)(DerivedStorage + 396), 0x4C4B40uLL);
            break;
          default:
            break;
        }
      }
      if (v5)
        CFRelease(v5);
    }
    return FigReadWriteLockUnlockForRead();
  }
  return result;
}

void playerairplay_playItemOnMediaControl(void *a1, const void *a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v5;
  uint64_t v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  const void **v9;
  _QWORD *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  CFDictionaryRef v13;
  uint64_t v14;
  void (*v15)(uint64_t, __CFDictionary *, void (*)(int, uint64_t), _QWORD *);
  OpaqueCMTimebase *v16;
  CFTypeRef cf;
  void *values;
  CMTime time;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  values = a1;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (DerivedStorage)
  {
    v5 = DerivedStorage;
    if (!*DerivedStorage)
    {
      v6 = CMBaseObjectGetDerivedStorage();
      if (v6)
      {
        FigReadWriteLockLockForRead();
        if (!*(_BYTE *)(v6 + 72) && !*(_BYTE *)(v6 + 733) && *((_QWORD *)v5 + 35))
        {
          v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          FigCFDictionarySetFloat32();
          v9 = (const void **)MEMORY[0x1E0C9AE50];
          if (v5[42])
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3FB0], (const void *)*MEMORY[0x1E0C9AE50]);
          if (v5[129])
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA4000], *v9);
          if (pap_ShouldUseInterstitialQueuing())
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3D70], *v9);
          if (!itemairplay_setUpPlayParamDictionary(a2, Mutable, *(const __CFDictionary **)(v6 + 440)))
          {
            v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
            *v10 = a1;
            if (a1)
              CFRetain(a1);
            v10[1] = a2;
            if (a2)
              CFRetain(a2);
            playqueue_addItemToMediaControlPlaylist(*((_QWORD *)v5 + 4));
            if (dword_1EE2A2FA0)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            pap_setAirPlayState(a1, 15);
            CMBaseObjectGetDerivedStorage();
            LOBYTE(time.value) = 0;
            FigCFDictionaryGetBooleanIfPresent();
            pap_AirPlayRoute_CopyProperty(a1, CFSTR("BufferedAudioStream"), (uint64_t)v7, &cf);
            if (cf)
            {
              if (dword_1EE2A2FA0)
              {
                v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigEndpointStreamSuspend();
            }
            v13 = CFDictionaryCreate(v7, (const void **)&kFigPlayerAirPlayNotificationPayloadKey_HijackingPlayer, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            playerairplay_postPlayerNotification(values, CFSTR("HijackedByOtherPlayer"), v13);
            if (v13)
              CFRelease(v13);
            v14 = *((_QWORD *)v5 + 35);
            v15 = *(void (**)(uint64_t, __CFDictionary *, void (*)(int, uint64_t), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (v15)
              v15(v14, Mutable, pap_playbackSessionPlayCompletion, v10);
            FigCAStatsReportingSubmitData();
            playerairplay_postPlayerNotification(values, CFSTR("IsAirPlayVideoActiveDidChange"), 0);
            v16 = *(OpaqueCMTimebase **)(v6 + 576);
            time = *(CMTime *)(v6 + 160);
            CMTimebaseSetTime(v16, &time);
            itemairplay_postItemNotification(a2, CFSTR("TimebaseChanged"), 0);
          }
          if (Mutable)
            CFRelease(Mutable);
        }
      }
      if (cf)
        CFRelease(cf);
      if (v6)
        FigReadWriteLockUnlockForRead();
    }
  }
}

void itemairplay_insertItemOnMediaControl(const void *a1, __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  _BYTE *v6;
  _BYTE *v7;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFArray *MutableCopy;
  uint64_t CMBaseObject;
  unsigned int (*v14)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFArray *v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  uint64_t v19;
  const void *v20;
  _QWORD *v21;
  CFTypeRef cf;
  CFTypeRef v23[8];

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(DerivedStorage + 72) || *(_BYTE *)(DerivedStorage + 733) || !*(_BYTE *)(DerivedStorage + 732))
  {
    FigReadWriteLockUnlockForRead();
    goto LABEL_4;
  }
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v6 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v6 || (v7 = v6, *v6))
  {
    a2 = 0;
    Mutable = 0;
  }
  else
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (itemairplay_setUpPlayParamDictionary(a1, Mutable, *(const __CFDictionary **)(DerivedStorage + 440)))
    {
      a2 = 0;
    }
    else
    {
      FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
      v11 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v11)
      {
        v11(FigBaseObject, CFSTR("SelectedMediaArray"), v8, &cf);
        if (cf)
        {
          v23[0] = 0;
          MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
          CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
          v14 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v14 && !v14(CMBaseObject, CFSTR("MediaSelectionArray"), v8, v23))
          {
            v15 = (const __CFArray *)v23[0];
          }
          else
          {
            v15 = 0;
            v23[0] = 0;
          }
          FigMediaSelectionGroupsAddCrossDeviceInfoToSelectedMediaArray(MutableCopy, v15);
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 336), (const void *)*MEMORY[0x1E0CA4020], MutableCopy);
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 344));
          if (MutableCopy)
            CFRelease(MutableCopy);
          if (v23[0])
            CFRelease(v23[0]);
        }
      }
      if (a2)
      {
        v16 = CMBaseObjectGetDerivedStorage();
        if (*(_QWORD *)(v16 + 80))
        {
          v17 = v16;
          a2 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3EA8], *(const void **)(v17 + 80));
        }
        else
        {
          a2 = 0;
        }
      }
      playqueue_addItemToMediaControlPlaylist(*((_QWORD *)v7 + 4));
      if (v5)
      {
        v18 = CFRetain(v5);
        CMBaseObjectGetDerivedStorage();
        if (v18)
        {
          v19 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v19)
          {
            v20 = (const void *)v19;
            if (pap_ShouldUseInterstitialQueuing())
              CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3D70], (const void *)*MEMORY[0x1E0C9AE50]);
            v21 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
            *v21 = v20;
            CFRetain(v20);
            v21[1] = a1;
            if (a1)
              CFRetain(a1);
            v23[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
            v23[1] = (CFTypeRef)3221225472;
            v23[2] = __pap_PlaybackSessionInsertPlayQueueItem_block_invoke;
            v23[3] = &__block_descriptor_64_e5_v8__0l;
            v23[4] = v18;
            v23[5] = Mutable;
            v23[6] = a2;
            v23[7] = v21;
            pap_DispatchHelper(v18, v20, (uint64_t)v23, 0, 0, Mutable, a2, 0);
            CFRelease(v20);
          }
          CFRelease(v18);
          goto LABEL_36;
        }
      }
      else
      {
        CMBaseObjectGetDerivedStorage();
      }
    }
  }
  if (v5)
LABEL_36:
    CFRelease(v5);
  FigReadWriteLockUnlockForRead();
  if (Mutable)
    CFRelease(Mutable);
  if (a2)
    CFRelease(a2);
LABEL_4:
  if (cf)
    CFRelease(cf);
}

void itemairplay_startAssetTypeLoadAsync(const void *a1)
{
  uint64_t DerivedStorage;
  void *v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, const __CFString *, char *);
  uint64_t CMBaseObject;
  unsigned int (*v8)(uint64_t, const __CFString *, _QWORD, uint64_t);
  char v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 1;
  v3 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v4 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v4 || *v4)
  {
    FigSignalErrorAt();
  }
  else if (*(_BYTE *)(DerivedStorage + 736) == 1)
  {
    v5 = *(_QWORD *)(DerivedStorage + 16);
    v6 = *(unsigned int (**)(uint64_t, const __CFString *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
    if (v6 && !v6(v5, CFSTR("assetProperty_AssetType"), &v9))
    {
      if (v9)
      {
        if (!*(_QWORD *)(DerivedStorage + 24))
        {
          CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
          v8 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
          if (v8)
          {
            if (!v8(CMBaseObject, CFSTR("assetProperty_AssetType"), *MEMORY[0x1E0C9AE00], DerivedStorage + 24))
            {
              *(_BYTE *)(DerivedStorage + 736) = 2;
              if (*(_BYTE *)(DerivedStorage + 744))
              {
                *(_BYTE *)(DerivedStorage + 744) = 0;
                playerairplay_startAirPlayWithItem(v3, a1);
              }
              playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v3);
            }
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(DerivedStorage + 736) = 5;
    }
  }
  if (v3)
    CFRelease(v3);
}

uint64_t itemairplay_removeQueuedItemOnAirPlayController(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  _BYTE *v4;
  _BYTE *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v4 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v4 || (v5 = v4, *v4))
  {
    FigSignalErrorAt();
    if (!v3)
      return FigReadWriteLockUnlockForRead();
    goto LABEL_7;
  }
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(DerivedStorage + 72) && !*v5)
  {
    itemairplay_doCleanupAtEndOfPlayback();
    itemairplay_cleanupItemForAirPlay(a1, 1);
    playerairplay_removeQueuedItemUUIDStringOnAirPlayController(v3, *(const void **)(DerivedStorage + 80));
  }
  if (v3)
LABEL_7:
    CFRelease(v3);
  return FigReadWriteLockUnlockForRead();
}

CFStringRef playqueue_copyPlayQueueSummary(uint64_t a1)
{
  __CFString *Mutable;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t DerivedStorage;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  CFStringRef v11;
  const __CFAllocator *alloc;

  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Count = CFArrayGetCount(*(CFArrayRef *)a1);
  if (Count >= 1)
  {
    v4 = Count;
    for (i = 0; i != v4; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (i)
        CFStringAppend(Mutable, CFSTR(", "));
      if (ValueAtIndex)
        v8 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
      else
        v8 = "";
      if (*(_BYTE *)(DerivedStorage + 733))
        v9 = 89;
      else
        v9 = 78;
      if (*(_BYTE *)(DerivedStorage + 732))
        v10 = 89;
      else
        v10 = 78;
      CFStringAppendFormat(Mutable, 0, CFSTR("item %p %s [Client:%c,MC:%c](subitem %p) uuid %@"), ValueAtIndex, v8, v10, v9, *(_QWORD *)(DerivedStorage + 8), *(_QWORD *)(DerivedStorage + 80));
    }
  }
  v11 = CFStringCreateWithFormat(alloc, 0, CFSTR("[%p] play queue now[CPQ:%d,MC:%d]: [%@]"), a1, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v11;
}

void playqueue_removeItemFromClientQueueAndFromMediaControlPlaylistInternal(uint64_t a1, const void *a2, int a3, int a4)
{
  uint64_t Count;
  CFIndex FirstIndexOfValue;
  CFIndex v10;
  _BYTE *DerivedStorage;
  CFStringRef v12;
  const void *v13;
  const void *v14;
  int v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFRange v17;

  CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)a1);
  if (Count >= 1)
  {
    v17.length = Count;
    v17.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)a1, v17, a2);
    if (FirstIndexOfValue != -1)
    {
      v10 = FirstIndexOfValue;
      DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
      if (a3 && DerivedStorage[732])
      {
        --*(_DWORD *)(a1 + 16);
        DerivedStorage[732] = 0;
        DerivedStorage[734] = 0;
      }
      if (a4 && DerivedStorage[733])
      {
        --*(_DWORD *)(a1 + 20);
        DerivedStorage[733] = 0;
      }
      if (!DerivedStorage[732] && !DerivedStorage[733])
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)a1, v10);
    }
  }
  v12 = playqueue_copyPlayQueueSummary(a1);
  v13 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v13)
  {
    v14 = v13;
    if (dword_1EE2A2FA0)
    {
      v15 = pap_AirPlayState(v13);
      if (dword_1EE2A2FA0)
      {
        if (v15 && v15 != 10)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    CFRelease(v14);
  }
  if (v12)
    CFRelease(v12);
}

BOOL pap_ShouldUseInterstitialQueuing()
{
  return *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 249) && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368) != 0;
}

void pap_DispatchHelper(const void *a1, const void *a2, uint64_t a3, int a4, NSObject *a5, const void *a6, const void *a7, const void *a8)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;
  NSObject *v20;
  _QWORD block[13];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = DerivedStorage;
  if (a2 == a1 && !a4)
  {
    if (*(_BYTE *)DerivedStorage || !*(_QWORD *)(DerivedStorage + 280))
    {
      if (a5)
        dispatch_semaphore_signal(a5);
    }
    else
    {
      (*(void (**)(uint64_t))(a3 + 16))(a3);
    }
    return;
  }
  v18 = *(const void **)(DerivedStorage + 280);
  if (!v18)
  {
    v19 = 0;
    if (!a1)
      goto LABEL_9;
    goto LABEL_8;
  }
  v19 = CFRetain(v18);
  if (a1)
LABEL_8:
    CFRetain(a1);
LABEL_9:
  if (a2)
    CFRetain(a2);
  if (a5)
    dispatch_retain(a5);
  if (a6)
    CFRetain(a6);
  if (a7)
    CFRetain(a7);
  if (a8)
    CFRetain(a8);
  v20 = *(NSObject **)(v17 + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __pap_DispatchHelper_block_invoke;
  block[3] = &unk_1E2F98DF0;
  block[6] = v17;
  block[7] = v19;
  block[4] = a5;
  block[5] = a3;
  block[8] = a1;
  block[9] = a2;
  block[10] = a6;
  block[11] = a7;
  block[12] = a8;
  dispatch_async(v20, block);
}

uint64_t itemairplay_assureItemForAirPlay()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFAllocator *v3;
  OpaqueCMClock *HostTimeClock;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  NSObject *v9;
  void *DispatchSourceBlock;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v1 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 72))
    return FigSignalErrorAt();
  if (!*(_QWORD *)(DerivedStorage + 576))
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    HostTimeClock = CMClockGetHostTimeClock();
    v5 = CMTimebaseCreateWithSourceClock(v3, HostTimeClock, (CMTimebaseRef *)(v1 + 576));
    if ((_DWORD)v5)
      return v5;
  }
  if (!*(_QWORD *)(v1 + 600))
  {
    v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v8 = CMBaseObjectGetDerivedStorage();
    if (!v8 || *(_BYTE *)v8)
    {
      v6 = FigSignalErrorAt();
      if (!v7)
        return v6;
    }
    else
    {
      v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v8 + 80));
      *(_QWORD *)(v1 + 600) = v9;
      if (v9)
      {
        dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
        DispatchSourceBlock = (void *)FigDispatchCreateDispatchSourceBlock();
        dispatch_source_set_event_handler(*(dispatch_source_t *)(v1 + 600), DispatchSourceBlock);
        _Block_release(DispatchSourceBlock);
        dispatch_resume(*(dispatch_object_t *)(v1 + 600));
        v6 = 0;
        if (!v7)
          return v6;
      }
      else
      {
        v6 = 4294954434;
        if (!v7)
          return v6;
      }
    }
    CFRelease(v7);
    return v6;
  }
  return 0;
}

uint64_t itemairplay_createCPEProtectorIfAvailable(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  _BYTE *v7;
  CFTypeRef v8;
  _BOOL4 BooleanPropertySync;
  const void *v10;
  const void *Value;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  _BOOL4 isLocalFileURL;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  uint64_t valuePtr;
  uint64_t v19;

  v19 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemairplay_getiTunesStoreContentType();
  valuePtr = 0;
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v7 || *v7)
    goto LABEL_25;
  if (v6)
  {
    v8 = CFRetain(v6);
    BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v8, (uint64_t)v6, *MEMORY[0x1E0CA3F80]);
    if (v8)
      CFRelease(v8);
    if (BooleanPropertySync)
      goto LABEL_7;
  }
  else if (pap_PlaybackSessionGetBooleanPropertySync(0, 0, *MEMORY[0x1E0CA3F80]))
  {
LABEL_7:
    v10 = 0;
    Value = (const void *)*MEMORY[0x1E0C9B208];
    goto LABEL_10;
  }
  v10 = itemairplay_copyiTunesStoreAlternateContentID();
  Value = (const void *)*MEMORY[0x1E0C9B208];
  if (FigCFEqual())
  {
LABEL_10:
    v12 = (const __CFDictionary *)itemairplay_copyiTunesStoreContentInfo();
    v13 = v12;
    if (v12)
      Value = CFDictionaryGetValue(v12, CFSTR("assetOption_iTunesStoreContentID"));
    if (Value)
      CFRetain(Value);
    if (v13)
      CFRelease(v13);
    if (!Value)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v10)
  {
    Value = CFRetain(v10);
    if (Value)
LABEL_17:
      CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, &valuePtr);
  }
  else
  {
    Value = 0;
  }
LABEL_18:
  *a3 = 0;
  isLocalFileURL = pap_isLocalFileURL(*(const __CFURL **)(DerivedStorage + 88), 0);
  FigCFDictionaryGetBooleanIfPresent();
  if (isLocalFileURL)
  {
    FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
    v16 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v16)
      v16(FigBaseObject, CFSTR("CPEProtector"), *MEMORY[0x1E0C9AE00], &v19);
  }
  if (Value)
    CFRelease(Value);
  if (v10)
    CFRelease(v10);
LABEL_25:
  if (v6)
    CFRelease(v6);
  return v19;
}

uint64_t playerairplay_performQueuedItemVodkaExchange(const void *a1, const void *a2, const void *a3, int a4)
{
  void *v8;
  _QWORD *DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(const void *, uint64_t, uint64_t, _QWORD *);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t);
  const void *v19;
  uint64_t v20;
  const void *v21;
  char v23;
  _QWORD v24[7];
  char v25;

  v8 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v10 = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  *(_QWORD *)(v10 + 768) = FigGetUpTimeNanoseconds();
  v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", DerivedStorage[30], CFSTR("RouteInfo"), DerivedStorage[35], CFSTR("EndpointPlaybackSession"), *(_QWORD *)(v10 + 80), CFSTR("MediaControlUUID"), 0);
  v12 = DerivedStorage[10];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __playerairplay_performQueuedItemVodkaExchange_block_invoke;
  v24[3] = &__block_descriptor_57_e25_v16__0____CFDictionary__8l;
  v24[4] = a1;
  v24[5] = a2;
  v25 = a4;
  v24[6] = a3;
  v13 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v13 && (v14 = (uint64_t (*)(const void *, uint64_t, uint64_t, _QWORD *))v13[11]) != 0)
  {
    v15 = v14(a3, v11, v12, v24);
    if (!(_DWORD)v15)
    {
      v16 = *(_QWORD *)(v10 + 664);
      if (v16)
      {
        v17 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        if (*v17)
        {
          v18 = (void (*)(uint64_t))v17[12];
          if (v18)
            v18(v16);
        }
        v19 = *(const void **)(v10 + 664);
        if (v19)
        {
          CFRelease(v19);
          *(_QWORD *)(v10 + 664) = 0;
        }
      }
      CFRetain(a3);
      v15 = 0;
      *(_QWORD *)(v10 + 664) = a3;
      goto LABEL_28;
    }
  }
  else
  {
    v15 = 4294954514;
  }
  if (a4 && pap_isLocalFileURL(*(const __CFURL **)(v10 + 88), 0))
  {
    v20 = itemairplay_createCPEProtectorIfAvailable((uint64_t)a2, 0, &v23);
    if (!v20)
    {
      *(_BYTE *)(v10 + 735) = 1;
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
      if (!a1)
        goto LABEL_24;
      goto LABEL_23;
    }
    v21 = (const void *)v20;
    v15 = playerairplay_performQueuedItemVodkaExchange(a1, a2, v20, 0);
    CFRelease(v21);
  }
  if (a1)
LABEL_23:
    CFRelease(a1);
LABEL_24:
  if (a3)
    CFRelease(a3);
  if (a2)
    CFRelease(a2);
LABEL_28:
  objc_autoreleasePoolPop(v8);
  return v15;
}

void __itemairplay_assureItemForAirPlay_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 735) == 2)
  {
    v1 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v1)
    {
      v2 = (const void *)v1;
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v1);
      CFRelease(v2);
    }
  }
  else
  {
    itemairplay_requestAirPlayPlaybackInfo(*(const void **)(a1 + 40), 0, 0, 0);
  }
}

uint64_t itemairplay_requestAirPlayPlaybackInfo(const void *a1, _QWORD *a2, int a3, char a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  const void *v10;
  CFTypeRef v11;
  const void *v12;
  _QWORD v14[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v9)
    {
      v10 = v9;
      if (!playerairplay_deferMediaControlPlaylistForInterstitials(v9))
      {
        if (!a2)
        {
          a2 = malloc_type_calloc(1uLL, 0x40uLL, 0x10600403C78B70CuLL);
          *a2 = v10;
          CFRetain(v10);
          a2[1] = a1;
          if (a1)
            CFRetain(a1);
        }
        *((_BYTE *)a2 + 29) = a3;
        *((_BYTE *)a2 + 30) = a4;
        if (a3)
        {
          *(_OWORD *)(DerivedStorage + 252) = *(_OWORD *)(DerivedStorage + 160);
          *(_QWORD *)(DerivedStorage + 268) = *(_QWORD *)(DerivedStorage + 176);
        }
        v11 = CFRetain(v10);
        if (v11)
        {
          v12 = v11;
          v14[0] = MEMORY[0x1E0C809B0];
          v14[1] = 3221225472;
          v14[2] = __pap_PlaybackSessionGetPlaybackInfo_block_invoke;
          v14[3] = &__block_descriptor_56_e5_v8__0l;
          v14[4] = v11;
          v14[5] = pap_playbackSessionGetPlaybackInfoCompletion;
          v14[6] = a2;
          pap_DispatchHelper(v11, v10, (uint64_t)v14, 1, 0, 0, 0, 0);
          CFRelease(v12);
        }
      }
      CFRelease(v10);
    }
  }
  return FigReadWriteLockUnlockForRead();
}

void pap_playbackSessionGetPlaybackInfoCompletion(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[8];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(a3 + 8);
  if (a1)
    CFRetain(a1);
  v8 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionGetPlaybackInfoCompletion_block_invoke;
  block[3] = &__block_descriptor_68_e5_v8__0l;
  block[4] = DerivedStorage;
  block[5] = a3;
  block[6] = a1;
  block[7] = v7;
  v10 = a2;
  dispatch_async(v8, block);
}

void __pap_playbackSessionGetPlaybackInfoCompletion_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const void *v4;
  _BOOL4 ShouldUseInterstitialQueuing;
  const __CFDictionary *Value;
  const void *v7;

  if (!**(_BYTE **)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(unsigned __int8 *)(v2 + 29);
    v4 = *(const void **)v2;
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
    {
      ShouldUseInterstitialQueuing = pap_ShouldUseInterstitialQueuing();
      Value = *(const __CFDictionary **)(a1 + 48);
      if (Value && ShouldUseInterstitialQueuing)
        Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), (const void *)*MEMORY[0x1E0CA3F08]);
    }
    else
    {
      Value = *(const __CFDictionary **)(a1 + 48);
    }
    itemairplay_getPlaybackInfoCompletionHandler(*(const void **)(a1 + 56), v4, Value, *(_DWORD *)(a1 + 64), v3, 0, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 30), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56));
  }
  v7 = *(const void **)(a1 + 48);
  if (v7)
    CFRelease(v7);
  pap_PlaybackSessionFreeSeekCompletionContext(*(CFTypeRef **)(a1 + 40));
}

uint64_t itemairplay_getPlaybackInfoCompletionHandler(const void *a1, const void *a2, const __CFDictionary *a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t DerivedStorage;
  float *v15;
  float *v16;
  const __CFDictionary *Value;
  const void *v18;
  int v19;
  float Rate;
  CMTimeEpoch v21;
  CFTypeID v22;
  uint64_t *v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTimeFlags flags;
  const void *v26;
  OpaqueCMTimebase *v27;
  CMTimeEpoch epoch;
  int v29;
  float v30;
  CMTimeFlags v31;
  int v32;
  NSObject *v33;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  Float64 Seconds;
  double v38;
  const char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  CMClockOrTimebaseRef v44;
  int v45;
  _BOOL4 v46;
  const void *v47;
  char v48;
  const void *v49;
  const void *v50;
  _OWORD *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const __CFAllocator *v55;
  CFDictionaryRef v56;
  NSObject *v57;
  unsigned int v58;
  unsigned int v59;
  const void *v60;
  const char *v61;
  Float64 v62;
  int v63;
  int v64;
  const void *v65;
  const void *v66;
  CFIndex Count;
  CFIndex v68;
  const void *v69;
  const void *v70;
  uint64_t v71;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v73;
  const __CFDictionary *v74;
  const __CFDictionary *v75;
  const __CFDictionary *v76;
  _BOOL4 v77;
  const __CFArray *v78;
  const __CFArray *v79;
  const void *v80;
  int v81;
  CFIndex v82;
  uint64_t v83;
  BOOL v84;
  _BOOL4 v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  CMTimeValue v89;
  CMTimeScale v90;
  float v91;
  double v92;
  uint64_t v93;
  uint64_t UpTimeNanoseconds;
  uint64_t v95;
  double v96;
  uint64_t v97;
  _BOOL4 v98;
  uint64_t v99;
  const __CFArray *v100;
  CFIndex v101;
  CFIndex v102;
  const void *v103;
  CFIndex v104;
  CMTimeEpoch v105;
  CMTimeFlags v106;
  const __CFDictionary *v107;
  unsigned __int8 Restrictions;
  CFTypeRef v109;
  CFTypeRef v110;
  CFTypeRef *v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  const void *v115;
  const void *v116;
  int isInterstitialEventIDRestrictedForSkip;
  CMTimeFlags v118;
  uint64_t v119;
  int v121;
  CMTimeEpoch v122;
  CMTimeEpoch v123;
  uint64_t v124;
  CMTimeFlags v125;
  int v126;
  _BOOL4 v127;
  __int128 v128;
  const void *v129;
  const void *v130;
  CMTimeFlags v132;
  _OWORD *v134;
  CMTime v135;
  char v136;
  CMTime v137;
  CMTime v138;
  float v139;
  int v140;
  __int16 v141;
  CMTime v142;
  CMTime v143;
  CMTime time2;
  CMTime v145;
  CMTime type;
  CMTime rhs;
  CFTypeRef cf;
  CMTimeValue v149;
  CMTimeScale v150;
  CMTime time;
  const char *v152;
  __int16 v153;
  Float64 v154;
  __int16 v155;
  _BYTE v156[10];
  const char *v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  CMTime time1;
  CMTimeValue v169;
  CMTimeScale v170;
  CMTimeValue v171;
  CMTimeScale v172;
  CMTimeValue v173;
  CMTimeScale v174;
  CMTime lhs;
  CMTimeValue v176;
  CMTimeScale timescale;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(DerivedStorage + 72))
    return FigReadWriteLockUnlockForRead();
  v15 = (float *)CMBaseObjectGetDerivedStorage();
  if (!v15)
    return FigReadWriteLockUnlockForRead();
  v16 = v15;
  if (*(_BYTE *)v15)
    return FigReadWriteLockUnlockForRead();
  if (!a3)
    goto LABEL_16;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("item"));
  if (!Value)
    Value = a3;
  v18 = CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CA3EA8]);
  if (v18)
  {
    v19 = CFEqual(v18, *(CFTypeRef *)(DerivedStorage + 80));
    if (a4)
    {
LABEL_16:
      if (a4 == -6722)
        playerairplay_shutdownAirPlayVideoPlaybackDueToServer(a2);
      return FigReadWriteLockUnlockForRead();
    }
  }
  else
  {
    v19 = 1;
    if (a4)
      goto LABEL_16;
  }
  if (!v19)
    goto LABEL_16;
  v124 = a8;
  v141 = 0;
  v140 = 0;
  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 576));
  v139 = Rate;
  v169 = *(_QWORD *)(DerivedStorage + 160);
  v125 = *(_DWORD *)(DerivedStorage + 172);
  v170 = *(_DWORD *)(DerivedStorage + 168);
  v122 = *(_QWORD *)(DerivedStorage + 176);
  *(_OWORD *)&v138.value = *MEMORY[0x1E0CA2E18];
  v21 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v138.epoch = v21;
  v128 = *(_OWORD *)&v138.value;
  *(_OWORD *)&v137.value = *(_OWORD *)&v138.value;
  v137.epoch = v21;
  v136 = 0;
  v22 = CFGetTypeID(a3);
  if (v22 != CFDictionaryGetTypeID())
    return FigReadWriteLockUnlockForRead();
  v126 = a7;
  FigCFDictionaryGetValue();
  FigCFDictionaryGetBooleanIfPresent();
  v23 = &sFigCDSNodeProtocolID;
  v129 = a1;
  v130 = a2;
  v123 = v21;
  if (FigCFEqual())
  {
    if (dword_1EE2A2FA0)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(lhs.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v23 = &sFigCDSNodeProtocolID;
    }
    CMTimebaseSetRate(*(CMTimebaseRef *)(DerivedStorage + 576), 0.0);
  }
  else
  {
    FigCFDictionaryGetFloat32IfPresent();
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a3, (const void *)*MEMORY[0x1E0CA3F40], (_BYTE *)&v141 + 1)&& HIBYTE(v141)&& !*(_BYTE *)(DerivedStorage + 738))
  {
    *(_BYTE *)(DerivedStorage + 738) = 1;
    playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a2);
  }
  if (*((_BYTE *)v16 + 448))
  {
    *(_OWORD *)&time1.value = v128;
    time1.epoch = v21;
    lhs.value = *MEMORY[0x1E0CA2E18];
    flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    lhs.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 592));
    v26 = *(const void **)(DerivedStorage + 584);
    if (v26)
    {
      v27 = (OpaqueCMTimebase *)CFRetain(v26);
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 592));
      epoch = v21;
      if (v27)
      {
        CMTimebaseGetTime(&time, v27);
        lhs.value = time.value;
        flags = time.flags;
        lhs.timescale = time.timescale;
        epoch = time.epoch;
        CFRelease(v27);
      }
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 592));
      epoch = v21;
    }
    FigCFDictionaryGetCMTimeIfPresent();
    if ((time1.flags & 0x1D) == 1)
    {
      time = time1;
      CMTimeGetSeconds(&time);
    }
    if ((flags & 0x1D) == 1)
    {
      time.value = lhs.value;
      time.timescale = lhs.timescale;
      time.flags = flags;
      time.epoch = epoch;
      CMTimeGetSeconds(&time);
      if ((time1.flags & 0x1D) == 1)
      {
        time.value = lhs.value;
        time.timescale = lhs.timescale;
        time.flags = flags;
        time.epoch = epoch;
        rhs = time1;
        CMTimeSubtract(&v135, &time, &rhs);
        CMTimeGetSeconds(&v135);
      }
    }
    v23 = &sFigCDSNodeProtocolID;
  }
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  v29 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360)
     && *(_DWORD *)(DerivedStorage + 144)
     && *((_BYTE *)v16 + 249) == 0;
  if (!(v126 | a5) && Rate == 0.0 && (v30 = v139, ((v139 == Rate) & ~v29) != 0))
  {
    v121 = 0;
  }
  else
  {
    if (a5)
    {
      v31 = *(_DWORD *)(DerivedStorage + 264);
      if ((v31 & 1) != 0)
      {
        v169 = *(_QWORD *)(DerivedStorage + 252);
        v170 = *(_DWORD *)(DerivedStorage + 260);
        v122 = *(_QWORD *)(DerivedStorage + 268);
        *(_QWORD *)(DerivedStorage + 268) = v21;
        *(_OWORD *)(DerivedStorage + 252) = v128;
        v125 = v31;
      }
    }
    if (*((_DWORD *)v23 + 1000))
    {
      v32 = pap_AirPlayState(a2);
      if (*((_DWORD *)v23 + 1000))
      {
        if (v32 && v32 != 10)
        {
          LODWORD(rhs.value) = 0;
          LOBYTE(lhs.value) = 0;
          v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v34 = rhs.value;
          if (os_log_type_enabled(v33, lhs.value))
            v35 = v34;
          else
            v35 = v34 & 0xFFFFFFFE;
          if (v35)
          {
            if (v129)
              v36 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
            else
              v36 = "";
            time1 = v138;
            Seconds = CMTimeGetSeconds(&time1);
            time1 = v137;
            v38 = CMTimeGetSeconds(&time1);
            v39 = "NO";
            v40 = *(_DWORD *)(DerivedStorage + 144);
            v41 = *(_DWORD *)(DerivedStorage + 148);
            LODWORD(time.value) = 136317698;
            *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"itemairplay_getPlaybackInfoCompletionHandler";
            if (a5)
              v39 = "YES";
            LOWORD(time.flags) = 2048;
            *(_QWORD *)((char *)&time.flags + 2) = v129;
            HIWORD(time.epoch) = 2082;
            v152 = v36;
            v153 = 2048;
            v154 = Seconds;
            v155 = 2048;
            *(double *)v156 = v38;
            *(_WORD *)&v156[8] = 2082;
            v157 = v39;
            v158 = 1024;
            v159 = v126;
            v160 = 1024;
            v161 = a6;
            v162 = 1024;
            v163 = v40;
            v164 = 1024;
            v165 = v41;
            v166 = 1024;
            v167 = v29;
            _os_log_send_and_compose_impl();
            a2 = v130;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v129;
        }
      }
    }
    if ((v138.flags & 1) != 0)
    {
      v121 = *(_DWORD *)(DerivedStorage + 132) & 1;
      if (v121 && *(_BYTE *)(DerivedStorage + 157) && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360))
      {
        v42 = *(unsigned int *)(DerivedStorage + 144);
        time1 = *(CMTime *)(DerivedStorage + 120);
        itemairplay_airplaySetCurrentTime(a1, &time1, 245, v42 != 0, v42, 0);
        *(_BYTE *)(DerivedStorage + 157) = 0;
      }
      time1 = v137;
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CMTimeCompare(&time1, &time)
        || CFEqual(*(CFTypeRef *)(DerivedStorage + 24), CFSTR("com.apple.coremedia.assettype.streaming")) | a5)
      {
        rhs = v138;
        v43 = CMBaseObjectGetDerivedStorage();
        v44 = CMTimebaseCopySource(*(CMTimebaseRef *)(v43 + 576));
        CMTimebaseGetRate(*(CMTimebaseRef *)(v43 + 576));
        CMSyncGetTime(&time1, v44);
        time = rhs;
        CMTimebaseSetRateAndAnchorTimeWithFlags();
        time = rhs;
        itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)a1, (uint64_t)&time);
        if (v44)
          CFRelease(v44);
        v45 = *(_DWORD *)(DerivedStorage + 148);
        if (v45)
        {
          a2 = v130;
          if (v45 == *(_DWORD *)(DerivedStorage + 144))
            *(_BYTE *)(DerivedStorage + 156) = 1;
        }
        else
        {
          a2 = v130;
        }
      }
    }
    else
    {
      v121 = 0;
    }
    v30 = v139;
  }
  if (a6 == 1 && v30 != Rate && v30 != 0.0 && v16[12] == 0.0)
  {
    time1 = v138;
    playerairplay_notifyStartupTasksOfEvents(a2, a1, 5, 0, (uint64_t)&time1, &time, v30);
    time1.value = 0;
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 39, (CFMutableDictionaryRef *)&time1);
    playerairplay_updatePlayerRateToMatch(a2, time1.value, v139);
    if (time1.value)
      CFRelease((CFTypeRef)time1.value);
    v30 = v139;
  }
  if (v30 != Rate)
  {
    v46 = playerairplay_ignoreRemoteRateUpdate(a2, (uint64_t)a1, v30);
    if ((v139 != 0.0 || !*((_BYTE *)v16 + 249) || (*(_BYTE *)(DerivedStorage + 532) & 1) == 0)
      && !v46
      && (a6 == 1
       || Rate != 0.0
       || !playerairplay_isAPVSupportedForCoordinatedPlayback()
       || !*((_BYTE *)v16 + 448)))
    {
      time1.value = 0;
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 39, (CFMutableDictionaryRef *)&time1);
      CFDictionaryAddValue((CFMutableDictionaryRef)time1.value, CFSTR("PauseAffectsCoordinatedPlayback"), (const void *)*MEMORY[0x1E0C9AE50]);
      playerairplay_updatePlayerRateToMatch(a2, time1.value, v139);
      if (time1.value)
        CFRelease((CFTypeRef)time1.value);
    }
    if (v139 != 0.0 && !*((_BYTE *)v16 + 249) && pap_HasAirPlayReachedTimeToPausePlayback(a2))
    {
      *((_BYTE *)v16 + 56) = 0;
      pap_HandleAirPlayReachedTimeToPausePlayback(a2, a1);
    }
  }
  if (FigCFDictionaryGetDoubleIfPresent())
  {
    v47 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0.0);
    if (v47)
    {
      v48 = 0;
      v49 = v47;
LABEL_105:
      v50 = *(const void **)(DerivedStorage + 192);
      *(_QWORD *)(DerivedStorage + 192) = v47;
      CFRetain(v47);
      if (v50)
        CFRelease(v50);
      *(_BYTE *)(DerivedStorage + 224) = 0;
      v51 = (_OWORD *)(DerivedStorage + 200);
      *(_OWORD *)(DerivedStorage + 200) = v128;
      *(_QWORD *)(DerivedStorage + 216) = v21;
      FigCFDictionaryGetCMTimeIfPresent();
      if (!*((_BYTE *)v16 + 248))
      {
        *(_OWORD *)&time.value = *v51;
        time.epoch = *(_QWORD *)(DerivedStorage + 216);
        CMTimeConvertScale(&time1, &time, 1, kCMTimeRoundingMethod_RoundTowardZero);
        *v51 = *(_OWORD *)&time1.value;
        *(_QWORD *)(DerivedStorage + 216) = time1.epoch;
      }
      if ((v48 & 1) == 0)
        CFRelease(v49);
      goto LABEL_115;
    }
  }
  v47 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3EF0]);
  if (v47)
  {
    v49 = 0;
    v48 = 1;
    goto LABEL_105;
  }
  v52 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3F00]);
  if (v52)
  {
    v53 = *(const void **)(DerivedStorage + 192);
    *(_QWORD *)(DerivedStorage + 192) = v52;
    CFRetain(v52);
    if (v53)
      CFRelease(v53);
    *(_BYTE *)(DerivedStorage + 224) = 1;
  }
LABEL_115:
  v54 = v130;
  if ((v137.flags & 1) != 0)
  {
    time1 = *(CMTime *)(DerivedStorage + 228);
    time = v137;
    if (CMTimeCompare(&time1, &time))
    {
      rhs.value = 0;
      v55 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      time1 = v137;
      rhs.value = (CMTimeValue)CMTimeCopyAsDictionary(&time1, v55);
      if (rhs.value)
        v56 = CFDictionaryCreate(v55, (const void **)kFigPlaybackItemParameter_CurrentDuration, (const void **)&rhs, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      else
        v56 = 0;
      *(CMTime *)(DerivedStorage + 228) = v137;
      if (dword_1EE2A2FA0)
      {
        LODWORD(lhs.value) = 0;
        LOBYTE(type.value) = 0;
        v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v58 = lhs.value;
        if (os_log_type_enabled(v57, type.value))
          v59 = v58;
        else
          v59 = v58 & 0xFFFFFFFE;
        if (v59)
        {
          if (v130)
          {
            v60 = v130;
            v61 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          }
          else
          {
            v60 = 0;
            v61 = "";
          }
          time1 = v137;
          v62 = CMTimeGetSeconds(&time1);
          LODWORD(time.value) = 136316418;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"itemairplay_getPlaybackInfoCompletionHandler";
          LOWORD(time.flags) = 2048;
          *(_QWORD *)((char *)&time.flags + 2) = v60;
          HIWORD(time.epoch) = 2082;
          v152 = v61;
          v153 = 2048;
          v154 = v62;
          v155 = 1024;
          *(_DWORD *)v156 = (v137.flags & 1) == 0;
          *(_WORD *)&v156[4] = 1024;
          *(_DWORD *)&v156[6] = (~v137.flags & 0x11) == 0;
          _os_log_send_and_compose_impl();
          v54 = v60;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a1 = v129;
      }
      itemairplay_postItemNotification(a1, CFSTR("DurationChanged"), v56);
      if (rhs.value)
        CFRelease((CFTypeRef)rhs.value);
      if (v56)
        CFRelease(v56);
    }
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a3, (const void *)*MEMORY[0x1E0CA3F18], (_BYTE *)&v141 + 1))
  {
    v63 = HIBYTE(v141);
    if (*(unsigned __int8 *)(DerivedStorage + 609) != HIBYTE(v141))
    {
      *(_BYTE *)(DerivedStorage + 609) = HIBYTE(v141);
      if (v63)
        itemairplay_postItemNotification(a1, CFSTR("StreamRanDry"), 0);
    }
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a3, (const void *)*MEMORY[0x1E0CA3F20], (_BYTE *)&v141 + 1))
  {
    v64 = HIBYTE(v141);
    if (*(unsigned __int8 *)(DerivedStorage + 610) != HIBYTE(v141))
    {
      *(_BYTE *)(DerivedStorage + 610) = HIBYTE(v141);
      if (v64)
        itemairplay_postItemNotification(a1, CFSTR("StreamBufferFull"), 0);
    }
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a3, (const void *)*MEMORY[0x1E0CA3F28], &v141))
    playerairplay_mediaControlHandlePlaybackLikelyToKeepUp(v54, a1, v141);
  v65 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3F10]);
  if (v65
    && itemairplay_isRangeArraysDifferent(*(CFArrayRef *)(DerivedStorage + 616), (const __CFArray *)v65))
  {
    v66 = *(const void **)(DerivedStorage + 616);
    *(_QWORD *)(DerivedStorage + 616) = v65;
    CFRetain(v65);
    if (v66)
      CFRelease(v66);
    itemairplay_postItemNotification(a1, CFSTR("PlayableRangeChanged"), 0);
    if ((*(_BYTE *)(DerivedStorage + 508) & 1) != 0)
    {
      v145 = *(CMTime *)(DerivedStorage + 496);
      Count = CFArrayGetCount((CFArrayRef)v65);
      if (Count < 1)
      {
LABEL_162:
        a1 = v129;
        v54 = v130;
      }
      else
      {
        v68 = Count;
        v69 = (const void *)*MEMORY[0x1E0CA4058];
        v70 = (const void *)*MEMORY[0x1E0CA4050];
        v71 = 1;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v65, v71 - 1);
          if (!ValueAtIndex)
            goto LABEL_157;
          v73 = ValueAtIndex;
          v74 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v69);
          v75 = (const __CFDictionary *)CFDictionaryGetValue(v73, v70);
          if (!v74)
            goto LABEL_162;
          v76 = v75;
          if (!v75)
            goto LABEL_162;
          memset(&time1, 0, sizeof(time1));
          CMTimeMakeFromDictionary(&time1, v74);
          memset(&time, 0, sizeof(time));
          CMTimeMakeFromDictionary(&time, v76);
          memset(&rhs, 0, sizeof(rhs));
          lhs = time1;
          type = time;
          CMTimeAdd(&rhs, &lhs, &type);
          lhs = v145;
          type = time1;
          if (CMTimeCompare(&lhs, &type) < 0)
          {
LABEL_157:
            v77 = 0;
          }
          else
          {
            lhs = v145;
            type = rhs;
            v77 = CMTimeCompare(&lhs, &type) < 1;
          }
          if (v71 >= v68)
            break;
          ++v71;
        }
        while (!v77);
        a1 = v129;
        v54 = v130;
        if (v77)
          itemairplay_postItemNotification(v129, CFSTR("ReachedTimeToPauseBuffering"), 0);
      }
    }
  }
  v78 = (const __CFArray *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3F48]);
  if (v78)
  {
    v79 = v78;
    if (itemairplay_isRangeArraysDifferent(*(CFArrayRef *)(DerivedStorage + 624), v78))
    {
      v80 = *(const void **)(DerivedStorage + 624);
      *(_QWORD *)(DerivedStorage + 624) = v79;
      CFRetain(v79);
      if (v80)
        CFRelease(v80);
      itemairplay_postItemNotification(a1, CFSTR("SeekableRangeChanged"), 0);
    }
  }
  if (FigCFDictionaryGetInt32IfPresent())
    playerairplay_mediaControlHandleStallCountChanged((uint64_t)v54, a1, v140);
  v81 = *(_DWORD *)(DerivedStorage + 148);
  if (v81 && v81 == *(_DWORD *)(DerivedStorage + 144) && *(_BYTE *)(DerivedStorage + 156))
  {
    v82 = v65 ? CFArrayGetCount((CFArrayRef)v65) : 0;
    if ((a6 == 2 || v82 > 0 || (_BYTE)v141) && (v138.flags & 1) != 0)
    {
      v83 = *(unsigned int *)(DerivedStorage + 148);
      time1 = v138;
      itemairplay_setPositionCompletionHandler(a1, 0, 1, v83, v124);
      *(_QWORD *)(DerivedStorage + 144) = 0;
      *(_BYTE *)(DerivedStorage + 156) = 0;
    }
  }
  if ((*(_BYTE *)(DerivedStorage + 532) & 1) != 0)
  {
    if (v126 && (v138.flags & 1) != 0)
    {
      time1 = v138;
      pap_UpdateAirPlayReachedTimeToPausePlayback(a1, &time1);
    }
    else if (*((_BYTE *)v16 + 249) || !pap_HasAirPlayReachedTimeToPausePlayback(v54))
    {
      goto LABEL_190;
    }
    if (!*((_BYTE *)v16 + 56))
      pap_HandleAirPlayReachedTimeToPausePlayback(v54, a1);
  }
LABEL_190:
  if ((v138.flags & 1) == 0)
    return FigReadWriteLockUnlockForRead();
  v84 = !a5 || v121 == 0;
  v85 = !v84;
  v127 = v85;
  v86 = v139;
  v149 = v169;
  v150 = v170;
  v87 = CMBaseObjectGetDerivedStorage();
  v88 = CMBaseObjectGetDerivedStorage();
  v89 = *MEMORY[0x1E0CA2E18];
  v173 = *MEMORY[0x1E0CA2E18];
  v90 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v174 = v90;
  v91 = *(float *)(v88 + 48);
  v92 = v91 <= 0.0 ? 1.5 : v91 * 1.5;
  if (*(_BYTE *)(v88 + 249))
    return FigReadWriteLockUnlockForRead();
  v93 = v88;
  v132 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v95 = *(_QWORD *)(v87 + 280);
  time1 = *(CMTime *)(v87 + 160);
  time.value = v169;
  time.timescale = v170;
  time.flags = v125;
  time.epoch = v122;
  CMTimeSubtract(&v143, &time1, &time);
  v96 = CMTimeGetSeconds(&v143);
  if (v96 <= 1.0)
  {
    v97 = UpTimeNanoseconds;
    v98 = 0;
  }
  else
  {
    v97 = UpTimeNanoseconds;
    if (a5)
      v98 = 1;
    else
      v98 = v96 > v92 * ((double)(UpTimeNanoseconds - v95) / 1000000000.0);
  }
  v134 = (_OWORD *)(v87 + 160);
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360))
  {
    time1.value = 0;
    if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
      goto LABEL_255;
    v112 = (const void *)pap_copyPrimaryPlayer();
    if (!v112)
      goto LABEL_242;
    v113 = CMBaseObjectGetDerivedStorage();
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v113 + 32), (unint64_t)&time1, 0);
    if (!time1.value)
    {
      v116 = 0;
LABEL_246:
      CFRelease(v112);
LABEL_247:
      if (v116)
      {
        isInterstitialEventIDRestrictedForSkip = playerairplay_isInterstitialEventIDRestrictedForSkip((int)v130, v116);
        CFRelease(v116);
        v118 = v132;
        if (isInterstitialEventIDRestrictedForSkip)
        {
          a1 = v129;
          if (v127 || !v98 || (v125 & 1) == 0)
          {
            v99 = v97;
          }
          else
          {
            v99 = v97;
            if ((*(_BYTE *)(v87 + 172) & 1) != 0)
            {
              time1.value = v149;
              time1.timescale = v150;
              time1.flags = v125;
              time1.epoch = v122;
              *(_OWORD *)&time.value = *v134;
              time.epoch = *(_QWORD *)(v87 + 176);
              if (CMTimeCompare(&time1, &time) < 0)
              {
                v173 = v149;
                v174 = v150;
                v118 = v125;
                v123 = v122;
              }
            }
          }
          if (v86 != Rate && *(float *)(v93 + 48) > 1.0)
          {
            time1.value = 0;
            v173 = v149;
            v174 = v150;
            *(_DWORD *)(v93 + 48) = 1065353216;
            FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 40, (CFMutableDictionaryRef *)&time1);
            playerairplay_postPlayerRateDidChangeNotification(v130, time1.value);
            playerairplay_setRateAirPlay(v130, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], (const void *)time1.value);
            if (time1.value)
              CFRelease((CFTypeRef)time1.value);
            v118 = v125;
            v123 = v122;
          }
        }
        else
        {
          a1 = v129;
          v99 = v97;
        }
        goto LABEL_257;
      }
      a1 = v129;
      goto LABEL_255;
    }
    v114 = CMBaseObjectGetDerivedStorage();
    v115 = *(const void **)(v114 + 784);
    if (v115 && !CFEqual(v115, &stru_1E2FD85F8))
    {
      v116 = *(const void **)(v114 + 784);
      if (v116)
        CFRetain(*(CFTypeRef *)(v114 + 784));
    }
    else
    {
LABEL_242:
      v116 = 0;
    }
    if (time1.value)
      CFRelease((CFTypeRef)time1.value);
    if (!v112)
      goto LABEL_247;
    goto LABEL_246;
  }
  if (v127 || !v98)
  {
LABEL_255:
    v99 = v97;
    goto LABEL_256;
  }
  v99 = v97;
  if ((v125 & 1) != 0 && (*(_BYTE *)(v87 + 172) & 1) != 0)
  {
    time1.value = v169;
    time1.timescale = v170;
    time1.flags = v125;
    time1.epoch = v122;
    *(_OWORD *)&time.value = *v134;
    time.epoch = *(_QWORD *)(v87 + 176);
    if (CMTimeCompare(&time1, &time) < 0)
    {
      v171 = v169;
      v172 = v170;
      *(_OWORD *)&v142.value = *v134;
      v142.epoch = *(_QWORD *)(v87 + 176);
      v100 = *(const __CFArray **)(v87 + 808);
      if (v100)
      {
        v101 = CFArrayGetCount(v100);
        *(_OWORD *)&time1.value = v128;
        time1.epoch = v123;
        v176 = v89;
        timescale = v90;
        if (v101 >= 1)
        {
          v102 = v101;
          v103 = 0;
          v104 = 0;
          v105 = v123;
          v106 = v132;
          do
          {
            v107 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v87 + 808), v104);
            cf = 0;
            if (!FigPlayerInterstitialEventCreateFromDictionary(0, v107, (uint64_t *)&cf))
            {
              Restrictions = FigPlayerInterstitialEventGetRestrictions((uint64_t)cf);
              v109 = cf;
              if ((Restrictions & 1) != 0)
              {
                memset(&time, 0, sizeof(time));
                itemairplay_getInterstitialEventTimeForItem(v87, (uint64_t)cf, (uint64_t)&time);
                rhs.value = v171;
                rhs.timescale = v172;
                rhs.flags = v125;
                rhs.epoch = v122;
                lhs = time;
                if (CMTimeCompare(&rhs, &lhs) <= 0
                  && (rhs = time, lhs = v142, CMTimeCompare(&rhs, &lhs) < 0)
                  && (rhs = time, lhs = time1, CMTimeCompare(&rhs, &lhs)))
                {
                  v110 = cf;
                  if (cf)
                    CFRetain(cf);
                  if (v103)
                    CFRelease(v103);
                  time1 = time;
                }
                else
                {
                  v110 = v103;
                }
                v109 = cf;
                v103 = v110;
              }
              v111 = FigPlayerInterstitialEventCopyIdentifier((uint64_t)v109);
              if (FigCFEqual())
              {
                itemairplay_getInterstitialEventTimeForItem(v87, (uint64_t)cf, (uint64_t)&time);
                v176 = time.value;
                v106 = time.flags;
                timescale = time.timescale;
                v105 = time.epoch;
              }
              if (cf)
                CFRelease(cf);
              if (v111)
                CFRelease(v111);
              a1 = v129;
            }
            ++v104;
          }
          while (v102 != v104);
          if (v103)
          {
            if ((v106 & 1) == 0)
              goto LABEL_274;
            time.value = v176;
            time.timescale = timescale;
            time.flags = v106;
            time.epoch = v105;
            rhs = time1;
            CMTimeSubtract(&v145, &time, &rhs);
            CMTimeAbsoluteValue(&type, &v145);
            CMTimeMake(&time2, 1, 1000);
            if ((CMTimeCompare(&type, &time2) & 0x80000000) == 0)
            {
LABEL_274:
              memset(&time1, 0, sizeof(time1));
              itemairplay_getInterstitialEventTimeForItem(v87, (uint64_t)v103, (uint64_t)&time1);
              CMTimeMake(&rhs, 2, 1);
              lhs = time1;
              CMTimeSubtract(&time, &lhs, &rhs);
              v173 = time.value;
              v118 = time.flags;
              v174 = time.timescale;
              v123 = time.epoch;
              CFRelease(v103);
              goto LABEL_257;
            }
            CFRelease(v103);
          }
        }
      }
    }
  }
LABEL_256:
  v118 = v132;
LABEL_257:
  if ((v118 & 1) != 0)
  {
    time1.value = v173;
    time1.timescale = v174;
    time1.flags = v118;
    time1.epoch = v123;
    itemairplay_airplaySetCurrentTime(a1, &time1, 240, 0, 0, 0);
  }
  if (v96 >= 0.0)
    v119 = v99;
  else
    v119 = 0;
  *(_QWORD *)(v87 + 280) = v119;
  return FigReadWriteLockUnlockForRead();
}

void pap_PlaybackSessionFreeSeekCompletionContext(CFTypeRef *a1)
{
  CFTypeRef v2;
  CFTypeRef v3;
  CFTypeRef v4;

  v2 = a1[7];
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  if (v4)
    CFRelease(v4);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t pap_FigCFDictionaryGetBooleanIfPresent(uint64_t result, const void *a2, _BYTE *a3)
{
  const __CFDictionary *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  CFTypeID v8;
  uint64_t v9;
  void *value;

  value = 0;
  if (result)
  {
    v5 = (const __CFDictionary *)result;
    v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFDictionaryGetTypeID() && a2 && a3)
    {
      result = CFDictionaryGetValueIfPresent(v5, a2, (const void **)&value);
      if (!(_DWORD)result)
        return result;
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(value))
      {
        *a3 = CFBooleanGetValue((CFBooleanRef)value);
        return 1;
      }
      v8 = CFNumberGetTypeID();
      if (v8 == CFGetTypeID(value) && !CFNumberIsFloatType((CFNumberRef)value))
      {
        v9 = 0;
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v9);
        *a3 = v9 != 0;
        return 1;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    return 0;
  }
  return result;
}

uint64_t itemairplay_airplaySetCurrentTime(const void *a1, CMTime *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  const void *v10;
  _BYTE *v11;
  _BYTE *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  uint64_t v15;
  CFMutableDictionaryRef Mutable;
  const void *MutableCopy;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  CMTimeEpoch epoch;
  NSObject *v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  const char *v27;
  const char *v28;
  __int128 v29;
  NSObject *v30;
  uint64_t v31;
  const __CFURL *v33;
  uint64_t FigBaseObject;
  void (*v35)(uint64_t, const __CFString *, uint64_t, CMTime *);
  CMTimeValue value;
  void (*v37)(CMTimeValue, const __CFString *, uint64_t, _BYTE *);
  int v38;
  _QWORD block[7];
  os_log_type_t type;
  unsigned int v44;
  _BYTE BOOLean[12];
  __int16 v46;
  const void *v47;
  __int16 v48;
  const void *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  uint64_t v55;
  CMTime time;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v11 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v11 || (v12 = v11, *v11))
  {
    v31 = FigSignalErrorAt();
    if (!v10)
      return v31;
    goto LABEL_50;
  }
  if (dword_1EE2A2FA0)
  {
    v44 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v14 = *(unsigned int *)(DerivedStorage + 144);
  if ((_DWORD)v14 && (_DWORD)v14 != (_DWORD)a5)
  {
    time = *a2;
    itemairplay_sendSeekToTimeNotification(a1, v14, 0, 1);
    *(_DWORD *)(DerivedStorage + 144) = 0;
  }
  if (!(_DWORD)a5)
  {
    a5 = *(unsigned int *)(DerivedStorage + 864);
    *(_DWORD *)(DerivedStorage + 864) = FPSupport_IncrementSeekID(*(_DWORD *)(DerivedStorage + 864));
  }
  if (pap_AirPlayState(v10) - 14 <= 2)
  {
    v15 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
    FigReadWriteLockLockForRead();
    *(_DWORD *)(DerivedStorage + 144) = a5;
    if (!*(_BYTE *)(DerivedStorage + 72)
      && !*(_BYTE *)(DerivedStorage + 733)
      && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360))
    {
      v18 = *(_OWORD *)&a2->value;
      *(_QWORD *)(DerivedStorage + 136) = a2->epoch;
      *(_OWORD *)(DerivedStorage + 120) = v18;
      *(_BYTE *)(DerivedStorage + 157) = 1;
      time = *a2;
      itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)a1, (uint64_t)&time);
      LODWORD(a5) = 0;
    }
    FigReadWriteLockUnlockForRead();
    time = *a2;
    FigCFDictionarySetCMTime();
    FigCFDictionarySetValue();
    FigCFDictionarySetInt32();
    if (a3)
      FigCFDictionarySetInt32();
    FigCFDictionarySetValue();
    if (Mutable)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 344));
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 336), CFSTR("SetPosition"), Mutable);
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 344));
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v10);
      CFRelease(Mutable);
    }
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (*((float *)v12 + 12) != 0.0 || !*((_QWORD *)v12 + 21))
    {
LABEL_32:
      if (!dword_1EE2A2FA0)
        goto LABEL_49;
      v44 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v24 = v44;
      if (os_log_type_enabled(v23, type))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if (!v25)
        goto LABEL_46;
      v26 = a5;
      if (v10)
      {
        v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        if (a1)
        {
LABEL_39:
          v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_45:
          *(_DWORD *)BOOLean = 136316418;
          *(_QWORD *)&BOOLean[4] = "itemairplay_airplaySetCurrentTime";
          v46 = 2048;
          v47 = v10;
          v48 = 2048;
          v49 = a1;
          v50 = 2082;
          v51 = v27;
          v52 = 2082;
          v53 = v28;
          v54 = 1024;
          LODWORD(v55) = v26;
          _os_log_send_and_compose_impl();
LABEL_46:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_49;
        }
      }
      else
      {
        v27 = "";
        if (a1)
          goto LABEL_39;
      }
      v28 = "";
      goto LABEL_45;
    }
    time.value = 0;
    v19 = CMBaseObjectGetDerivedStorage();
    if (v19)
    {
      v20 = v19;
      FigReadWriteLockLockForRead();
      if (!*(_BYTE *)(v20 + 72))
      {
        v33 = *(const __CFURL **)(v20 + 88);
        if (v33)
        {
          if (pap_isLocalFileURL(v33, 0))
          {
            FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
            v35 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
            if (v35)
            {
              v35(FigBaseObject, CFSTR("CPEProtector"), v15, &time);
              value = time.value;
              if (time.value)
              {
                *(_QWORD *)BOOLean = 0;
                v37 = *(void (**)(CMTimeValue, const __CFString *, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
                if (v37)
                {
                  v37(value, CFSTR("IsRental"), v15, BOOLean);
                  if (*(_QWORD *)BOOLean)
                  {
                    v38 = CFBooleanGetValue(*(CFBooleanRef *)BOOLean);
                    CFRelease(*(CFTypeRef *)BOOLean);
                    CFRelease((CFTypeRef)time.value);
                    FigReadWriteLockUnlockForRead();
                    if (v38)
                      goto LABEL_32;
                    goto LABEL_26;
                  }
                }
                CFRelease((CFTypeRef)time.value);
              }
            }
          }
        }
      }
      FigReadWriteLockUnlockForRead();
    }
LABEL_26:
    if (!v12[42])
    {
      MEMORY[0x19402EEEC](*((_QWORD *)v12 + 23));
      epoch = a2->epoch;
      *((_OWORD *)v12 + 12) = *(_OWORD *)&a2->value;
      *((_QWORD *)v12 + 26) = epoch;
      MEMORY[0x19402EF04](*((_QWORD *)v12 + 23));
      if (v10)
        CFRetain(v10);
      if (a1)
        CFRetain(a1);
      v22 = *((_QWORD *)v12 + 22);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __itemairplay_airplaySetCurrentTime_block_invoke;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = v12;
      block[5] = a1;
      block[6] = v10;
      dispatch_async(v22, block);
    }
    goto LABEL_32;
  }
  v29 = *(_OWORD *)&a2->value;
  *(_QWORD *)(DerivedStorage + 136) = a2->epoch;
  *(_OWORD *)(DerivedStorage + 120) = v29;
  *(_DWORD *)(DerivedStorage + 144) = a5;
  *(_BYTE *)(DerivedStorage + 157) = 0;
  time = *a2;
  itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)a1, (uint64_t)&time);
  *(_DWORD *)(DerivedStorage + 188) = a3 & 0xF;
  itemairplay_postItemNotification(a1, CFSTR("TimeJumped"), 0);
  if (dword_1EE2A2FA0)
  {
    v44 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
    time = *a2;
    itemairplay_sendSeekToTimeNotification(a1, a5, a6, 0);
  }
LABEL_49:
  v31 = 0;
  if (v10)
LABEL_50:
    CFRelease(v10);
  return v31;
}

void playerairplay_updatePlayerRateToMatch(const void *a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  float v8;
  CFMutableDictionaryRef Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v11;
  uint64_t v12;
  uint64_t v13;
  OpaqueCMTimebase *v14;
  double v15;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v7 = DerivedStorage;
    v8 = *(float *)(DerivedStorage + 48);
    if (v8 == a3)
    {
      Mutable = 0;
    }
    else
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetFloat32();
      playerairplay_postPlayerNotification(a1, CFSTR("Remote_RateWillChangeTo"), Mutable);
      if (*(_BYTE *)(v7 + 216) && a3 != 0.0)
      {
        if (dword_1EE2A2FA0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigPlayerAirPlayRoute_SetProperty(*(_QWORD *)(v7 + 224), CFSTR("AllowBackgroundClientProcessToBeUnsuspended"), (const void *)*MEMORY[0x1E0C9AE50]);
      }
      *(float *)(v7 + 48) = a3;
      playerairplay_postPlayerRateDidChangeNotification(a1, a2);
      if (a3 != 0.0)
        pap_clearLayerContents(a1);
    }
    v11 = pap_AirPlayState(a1);
    if (v11 && v11 != 10)
    {
      cf[0] = 0;
      playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v7 + 32), 0, (unint64_t)cf);
      CMBaseObjectGetDerivedStorage();
      if (v8 != a3)
        playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, cf[0] != 0);
      if (cf[0])
      {
        v12 = CMBaseObjectGetDerivedStorage();
        v13 = CMBaseObjectGetDerivedStorage();
        FigReadWriteLockLockForRead();
        if (!*(_BYTE *)(v13 + 72))
        {
          v14 = *(OpaqueCMTimebase **)(v13 + 576);
          if (v14)
          {
            v15 = 0.0;
            if (*(_DWORD *)(v12 + 76) == 4)
              v15 = *(float *)(v12 + 48);
            CMTimebaseSetRate(v14, v15);
          }
        }
        FigReadWriteLockUnlockForRead();
        itemairplay_NotifyReachedTimeToPauseBufferingIfFF(a1, cf[0]);
        if (cf[0])
          CFRelease(cf[0]);
      }
    }
    if (Mutable)
      CFRelease(Mutable);
  }
}

BOOL playerairplay_ignoreRemoteRateUpdate(const void *a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage;
  _BOOL4 HasAirPlayReachedTimeToPausePlayback;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    HasAirPlayReachedTimeToPausePlayback = pap_HasAirPlayReachedTimeToPausePlayback(a1);
  else
    HasAirPlayReachedTimeToPausePlayback = 0;
  if (*(_BYTE *)(DerivedStorage + 56))
    HasAirPlayReachedTimeToPausePlayback = 1;
  return a3 == 0.0 && HasAirPlayReachedTimeToPausePlayback;
}

uint64_t playerairplay_isAPVSupportedForCoordinatedPlayback()
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    FigCFDictionaryGetBooleanIfPresent();
    return 0;
  }
  return result;
}

BOOL pap_HasAirPlayReachedTimeToPausePlayback(const void *a1)
{
  uint64_t DerivedStorage;
  _BOOL8 result;
  uint64_t v4;
  CMTime v5;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(DerivedStorage + 532) & 1) == 0)
    return 0;
  v4 = DerivedStorage;
  result = playerairplay_getIsAirplayVideoActive(a1);
  if (result)
  {
    CMTimebaseGetTime(&time1, *(CMTimebaseRef *)(v4 + 576));
    v5 = *(CMTime *)(v4 + 520);
    return CMTimeCompare(&time1, &v5) >= 0;
  }
  return result;
}

void pap_HandleAirPlayReachedTimeToPausePlayback(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  CMTime *v8;
  int v9;
  CFMutableDictionaryRef Mutable;
  OpaqueCMTimebase *v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime time;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = CMBaseObjectGetDerivedStorage();
    v6 = v5;
    if (!*(_BYTE *)(DerivedStorage + 56) && (*(_BYTE *)(v5 + 532) & 1) != 0)
    {
      v8 = (CMTime *)(v5 + 520);
      v9 = *(_DWORD *)(DerivedStorage + 48);
      *(_DWORD *)(DerivedStorage + 48) = 0;
      *(_BYTE *)(DerivedStorage + 56) = 1;
      playerairplay_setRateAirPlay(a1, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
      *(_DWORD *)(DerivedStorage + 48) = v9;
      playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, 1);
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      time = *v8;
      FigCFDictionarySetCMTime();
      itemairplay_postItemNotification(a2, CFSTR("ReachedTimeToPausePlayback"), Mutable);
      CMTimebaseSetRate(*(CMTimebaseRef *)(v6 + 576), 0.0);
      v11 = *(OpaqueCMTimebase **)(v6 + 576);
      time = *v8;
      CMTimebaseSetTime(v11, &time);
      if (dword_1EE2A2FA0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (Mutable)
        CFRelease(Mutable);
    }
    else if (dword_1EE2A2FA0)
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t playerairplay_mediaControlHandlePlaybackLikelyToKeepUp(const void *a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  const void *v10;
  OpaqueCMTimebase *v11;
  float Rate;
  CMClockRef HostTimeClock;
  CFTypeRef cf;
  os_log_type_t type;
  CMTime time;
  CMTime v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(v7 + 72) && *(unsigned __int8 *)(v7 + 611) != a3)
  {
    *(_BYTE *)(v7 + 611) = a3;
    if (a3)
    {
      itemairplay_postItemNotification(a2, CFSTR("StreamLikelyToKeepUp"), 0);
      if (dword_1EE2A2FA0)
      {
        LODWORD(cf) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_BYTE *)(DerivedStorage + 356))
      {
        cf = 0;
        MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 592));
        v10 = *(const void **)(v7 + 584);
        if (v10)
          v11 = (OpaqueCMTimebase *)CFRetain(v10);
        else
          v11 = 0;
        MEMORY[0x19402EF04](*(_QWORD *)(v7 + 592));
        FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 20, (CFMutableDictionaryRef *)&cf);
        *(_BYTE *)(DerivedStorage + 356) = 0;
        if (v11 && *(_BYTE *)(DerivedStorage + 448))
        {
          Rate = CMTimebaseGetRate(v11);
          *(float *)(DerivedStorage + 48) = Rate;
          CMTimebaseGetTime(&v18, v11);
          *(CMTime *)(DerivedStorage + 332) = v18;
          HostTimeClock = CMClockGetHostTimeClock();
          time = *(CMTime *)(DerivedStorage + 332);
          CMSyncConvertTime(&v18, &time, v11, HostTimeClock);
          *(CMTime *)(DerivedStorage + 308) = v18;
        }
        playerairplay_postPlayerRateDidChangeNotification(a1, (uint64_t)cf);
        v18 = *(CMTime *)(DerivedStorage + 332);
        time = *(CMTime *)(DerivedStorage + 308);
        playerairplay_setRateAirPlay(a1, 1, (uint64_t)&v18, (uint64_t)&time, cf);
        if (cf)
          CFRelease(cf);
        if (v11)
          CFRelease(v11);
      }
    }
    else
    {
      itemairplay_postItemNotification(a2, CFSTR("StreamUnlikelyToKeepUp"), 0);
      if (dword_1EE2A2FA0)
      {
        LODWORD(cf) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    itemairplay_controlPlaybackActivityTimer((uint64_t)a2, 2);
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_isRangeArraysDifferent(CFArrayRef theArray, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex v5;
  uint64_t result;
  CFIndex v7;
  const void *v8;
  const void *v9;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const __CFDictionary *Value;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  CMTime v17;
  CMTime v18;
  CMTime time2;
  CMTime time1;

  if (!theArray)
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(theArray);
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v5 = CFArrayGetCount(a2);
LABEL_6:
  if (theArray == a2)
    return 0;
  result = 1;
  if (!theArray || !a2 || Count != v5)
    return result;
  if (Count < 1)
    return 0;
  v7 = 0;
  v8 = (const void *)*MEMORY[0x1E0CA4058];
  v9 = (const void *)*MEMORY[0x1E0CA4050];
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v7);
    if (Count == v7)
      break;
    v11 = ValueAtIndex;
    v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v7);
    result = 1;
    if (!v11)
      return result;
    if (!v12)
      return result;
    Value = (const __CFDictionary *)CFDictionaryGetValue(v11, v8);
    v14 = (const __CFDictionary *)CFDictionaryGetValue(v12, v8);
    result = 1;
    if (!Value || !v14)
      return result;
    CMTimeMakeFromDictionary(&time1, Value);
    CMTimeMakeFromDictionary(&time2, v14);
    if (CMTimeCompare(&time1, &time2))
      break;
    v15 = (const __CFDictionary *)CFDictionaryGetValue(v11, v9);
    v16 = (const __CFDictionary *)CFDictionaryGetValue(v12, v9);
    result = 1;
    if (!v15 || !v16)
      return result;
    CMTimeMakeFromDictionary(&v18, v15);
    CMTimeMakeFromDictionary(&v17, v16);
    if (CMTimeCompare(&v18, &v17))
      break;
    if (Count == ++v7)
      return 0;
  }
  return 1;
}

uint64_t playerairplay_mediaControlHandleStallCountChanged(uint64_t a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(DerivedStorage + 72) && *(_DWORD *)(DerivedStorage + 632) < a3)
  {
    *(_DWORD *)(DerivedStorage + 632) = a3;
    itemairplay_postItemNotification(a2, CFSTR("PlaybackStalled"), 0);
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_setPositionCompletionHandler(const void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v11 = result;
    FigReadWriteLockLockForRead();
    if (!*(_BYTE *)(v11 + 72))
    {
      if (!a2)
        itemairplay_postItemNotification(a1, CFSTR("TimeJumped"), 0);
      if (a3)
        itemairplay_sendSeekToTimeNotification(a1, a4, a5, 0);
    }
    return FigReadWriteLockUnlockForRead();
  }
  return result;
}

void pap_UpdateAirPlayReachedTimeToPausePlayback(const void *a1, CMTime *a2)
{
  CMTime *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v6;
  CMTime time2;
  CMTime time1;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = (CMTime *)(CMBaseObjectGetDerivedStorage() + 520);
  time1 = *a2;
  time2 = *v4;
  if (CMTimeCompare(&time1, &time2))
  {
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = *(_OWORD *)&a2->value;
    v4->epoch = a2->epoch;
    *(_OWORD *)&v4->value = v6;
    itemairplay_postItemNotification(a1, CFSTR("SnappedTimeToPausePlayback"), 0);
  }
}

void playerairplay_shutdownAirPlayVideoPlaybackDueToServer(const void *a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  void (*v8)(CFTypeRef, CFTypeRef *);
  __int128 v9;
  uint64_t v10;
  CFTypeRef cf[2];
  uint64_t v12;
  CFTypeRef v13;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v13 = 0;
  if (!*DerivedStorage)
  {
    v3 = DerivedStorage;
    v4 = pap_AirPlayState(a1);
    if (v4)
    {
      if (v4 != 10)
      {
        cf[0] = 0;
        FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 27, (CFMutableDictionaryRef *)cf);
        playerairplay_updatePlayerRateToMatch(a1, (uint64_t)cf[0], 0.0);
        if (cf[0])
          CFRelease(cf[0]);
        if (pap_AirPlayState(a1) - 14 <= 2)
        {
          playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*((_QWORD *)v3 + 4), 0, (unint64_t)&v13);
          v5 = CMBaseObjectGetDerivedStorage();
          if (v13)
          {
            v6 = v5;
            FigReadWriteLockLockForRead();
            if (!*(_BYTE *)(v6 + 72))
            {
              *(_OWORD *)cf = *MEMORY[0x1E0CA2E18];
              v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
              v7 = v13;
              v8 = *(void (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
              if (v8)
                v8(v7, cf);
              v9 = *(_OWORD *)cf;
              v10 = v12;
              itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v13, (uint64_t)&v9);
              itemairplay_controlPlaybackActivityTimer((uint64_t)v13, 0);
              CMTimebaseSetRate(*(CMTimebaseRef *)(v6 + 576), 0.0);
            }
            FigReadWriteLockUnlockForRead();
          }
          playerairplay_removeAndCleanupQueuedItemsOnAirPlayController();
          pap_invalidateEndpointPlaybackSession(a1);
        }
        playerairplay_resetAirPlayVideoState(a1);
        playerairplay_updateAirPlayVideoIsActiveProperty(a1);
        playerairplay_postPlayerNotification(a1, CFSTR("IsAirPlayVideoActiveDidChange"), 0);
        if (v3[45])
          FigPlayerAirPlayRoute_ResumeAirPlayScreen(*((_QWORD *)v3 + 28));
        if (v13)
          CFRelease(v13);
      }
    }
  }
}

void itemairplay_sendSeekToTimeNotification(const void *a1, uint64_t a2, uint64_t a3, int a4)
{
  CFMutableDictionaryRef Mutable;
  __CFString **v7;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetCMTime();
  v7 = kFigPlaybackItemNotification_SeekWasCanceled;
  if (!a4)
    v7 = kFigPlaybackItemNotification_SeekDidComplete;
  itemairplay_postItemNotification(a1, *v7, Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void __itemairplay_airplaySetCurrentTime_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  CMTimeFlags v7;
  CMTimeEpoch v8;
  CFTypeRef *v9;
  CFAllocatorRef v10;
  CFMutableDictionaryRef Mutable;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  CFAllocatorRef v15;
  uint64_t (*v16)(CFTypeRef, CMTime *, CFTypeRef, CFAllocatorRef, CGImageRef *, _QWORD);
  int v17;
  double Width;
  double Height;
  const void *v20;
  const void *v21;
  CMTime v22;
  CGImageRef image;
  CMTime time1;
  CMTimeValue v25;
  CMTimeScale v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (**(_BYTE **)(a1 + 32))
    goto LABEL_38;
  v2 = *(const void **)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  image = 0;
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v5 = CMBaseObjectGetDerivedStorage();
    if (v5)
    {
      v6 = v5;
      if (!*(_BYTE *)v5 && *(float *)(v5 + 48) == 0.0)
      {
        if (*(_QWORD *)(v5 + 168))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 184));
          v25 = *(_QWORD *)(v6 + 192);
          v7 = *(_DWORD *)(v6 + 204);
          v26 = *(_DWORD *)(v6 + 200);
          v8 = *(_QWORD *)(v6 + 208);
          MEMORY[0x19402EF04](*(_QWORD *)(v6 + 184));
          if ((v7 & 1) != 0)
          {
            v9 = (CFTypeRef *)(DerivedStorage + 32);
            if (*(_QWORD *)(DerivedStorage + 32)
              || (v10 = CFGetAllocator(v2),
                  !FigAssetImageGeneratorCreateFromAsset((uint64_t)v10, *(const void **)(DerivedStorage + 16), (_QWORD *)(DerivedStorage + 32))))
            {
              if (!*(_QWORD *)(DerivedStorage + 40))
              {
                Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                *(_QWORD *)(DerivedStorage + 40) = Mutable;
                if (!Mutable)
                {
                  FigSignalErrorAt();
                  if (!v4)
                    goto LABEL_35;
                  goto LABEL_34;
                }
                FigCFDictionarySetInt32();
              }
              if (*v9)
                v12 = CFRetain(*v9);
              else
                v12 = 0;
              v13 = *(const void **)(DerivedStorage + 40);
              if (v13)
                v14 = CFRetain(v13);
              else
                v14 = 0;
              FigReadWriteLockUnlockForRead();
              v15 = CFGetAllocator(v2);
              v16 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef, CFAllocatorRef, CGImageRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (v16)
              {
                time1.value = v25;
                time1.timescale = v26;
                time1.flags = v7;
                time1.epoch = v8;
                v17 = v16(v12, &time1, v14, v15, &image, 0);
              }
              else
              {
                v17 = -12782;
              }
              FigReadWriteLockLockForRead();
              if (v12)
                CFRelease(v12);
              if (v14)
                CFRelease(v14);
              if (!v17 && !*(_BYTE *)v6)
              {
                if (image)
                {
                  time1.value = v25;
                  time1.timescale = v26;
                  time1.flags = v7;
                  time1.epoch = v8;
                  v22 = *(CMTime *)(v6 + 192);
                  if (!CMTimeCompare(&time1, &v22))
                  {
                    Width = (double)CGImageGetWidth(image);
                    Height = (double)CGImageGetHeight(image);
                    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
                    if (!pthread_main_np())
                      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
                    objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
                    objc_msgSend(*(id *)(v6 + 168), "setBounds:", 0.0, 0.0, Width, Height);
                    objc_msgSend(*(id *)(v6 + 168), "setPosition:", Width * 0.5, Height * 0.5);
                    objc_msgSend(*(id *)(v6 + 168), "setContents:", image);
                    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v4)
LABEL_34:
      CFRelease(v4);
  }
LABEL_35:
  if (image)
    CFRelease(image);
  FigReadWriteLockUnlockForRead();
LABEL_38:
  v20 = *(const void **)(a1 + 40);
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(a1 + 48);
  if (v21)
    CFRelease(v21);
}

BOOL pap_isLocalFileURL(const __CFURL *a1, BOOL *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  _BOOL8 v5;
  int IsPersistentURL;
  BOOL v7;

  if (!a1)
    return 0;
  v3 = CFURLCopyScheme(a1);
  v4 = v3;
  if (!v3 || (v5 = 1, CFStringCompare(v3, CFSTR("file"), 1uLL)))
  {
    IsPersistentURL = FigIsPersistentURL();
    v5 = IsPersistentURL != 0;
    v7 = IsPersistentURL != 0;
    if (!a2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if (a2)
LABEL_5:
    *a2 = v7;
LABEL_6:
  if (v4)
    CFRelease(v4);
  return v5;
}

void playerairplay_postPlayerRateDidChangeNotification(const void *a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetFloat32();
  if (a2)
  {
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  playerairplay_postPlayerNotification(a1, CFSTR("RateDidChange"), Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

BOOL playerairplay_getIsAirplayVideoActive(const void *a1)
{
  uint64_t DerivedStorage;
  _BOOL8 result;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (pap_AirPlayState(a1) - 14 < 3)
    return 1;
  v4 = pap_AirPlayState(a1);
  result = 0;
  if (v4 && v4 != 10)
    return *(_BYTE *)(DerivedStorage + 449) && playerairplay_isAPVAllowedByClient() != 0;
  return result;
}

uint64_t playerairplay_isAPVAllowedByClient()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 40))
    return 0;
  if (!*(_BYTE *)(DerivedStorage + 448))
    return 1;
  result = playerairplay_isAPVSupportedForCoordinatedPlayback();
  if ((_DWORD)result)
    return 1;
  return result;
}

void itemairplay_getInterstitialEventTimeForItem(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CFTypeRef *started;
  double v7;
  double v8;
  CMTimeEpoch epoch;
  CMTime v10;
  CMTime lhs;
  CMTime v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  FigPlayerInterstitialEventGetStartTime(a2, a3);
  started = FigPlayerInterstitialEventCopyStartDate(a2);
  if ((*(_BYTE *)(a3 + 12) & 1) == 0 && *(_QWORD *)(a1 + 192) && (*(_BYTE *)(a1 + 172) & 1) != 0)
  {
    v7 = MEMORY[0x194029D14]();
    v8 = MEMORY[0x194029D14](started);
    CMTimeMakeWithSeconds(&v12, v8 - v7, 1000000);
    *(_OWORD *)a3 = *(_OWORD *)&v12.value;
    epoch = v12.epoch;
    *(_QWORD *)(a3 + 16) = v12.epoch;
    *(_OWORD *)&lhs.value = *(_OWORD *)a3;
    lhs.epoch = epoch;
    v10 = *(CMTime *)(a1 + 160);
    CMTimeAdd(&v12, &lhs, &v10);
    *(CMTime *)a3 = v12;
  }
  if (started)
    CFRelease(started);
}

uint64_t playerairplay_isInterstitialEventIDRestrictedForSkip(int a1, CFTypeRef cf1)
{
  uint64_t v3;
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const __CFDictionary *ValueAtIndex;
  CFTypeRef *v12;
  CFTypeRef v13;
  uint64_t v14;
  CFTypeRef cf;
  CFTypeRef v17;

  if (!cf1)
    return 0;
  if (CFEqual(cf1, &stru_1E2FD85F8))
    return 0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
    return 0;
  v3 = pap_copyPrimaryPlayer();
  if (!v3)
    return 0;
  v4 = (const void *)v3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (CFEqual(cf1, &stru_1E2FD85F8))
    goto LABEL_23;
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(DerivedStorage + 32), (unint64_t)&v17, 0);
  if (!v17)
    goto LABEL_23;
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = *(const __CFArray **)(v6 + 808);
  if (v7 && (Count = CFArrayGetCount(v7), Count >= 1))
  {
    v9 = Count;
    v10 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 808), v10);
      cf = 0;
      v12 = 0;
      if (!FigPlayerInterstitialEventCreateFromDictionary(0, ValueAtIndex, (uint64_t *)&cf))
      {
        v12 = FigPlayerInterstitialEventCopyIdentifier((uint64_t)cf);
        if (FigCFEqual())
          break;
      }
      if (cf)
        CFRelease(cf);
      if (v12)
        CFRelease(v12);
      if (v9 == ++v10)
        goto LABEL_17;
    }
    v13 = cf;
    if (v12)
      CFRelease(v12);
  }
  else
  {
LABEL_17:
    v13 = 0;
  }
  if (v17)
    CFRelease(v17);
  if (v13)
  {
    v14 = (FigPlayerInterstitialEventGetRestrictions((uint64_t)v13) >> 2) & 1;
    CFRelease(v13);
  }
  else
  {
LABEL_23:
    v14 = 0;
  }
  CFRelease(v4);
  return v14;
}

uint64_t pap_copyPrimaryPlayer()
{
  CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
    return FigCFWeakReferenceHolderCopyReferencedObject();
  else
    return 0;
}

void pap_invalidateEndpointPlaybackSession(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  uint64_t v10;
  void (*v11)(uint64_t);
  const void *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 488));
  playerairplay_updateShareAndAirPlayEchoMitigation(a1);
  if (*(_QWORD *)(DerivedStorage + 280))
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
    {
      v3 = (const void *)pap_copyPrimaryPlayer();
      v4 = CMBaseObjectGetDerivedStorage();
      if (!v3)
        goto LABEL_7;
      v5 = v4;
      CFBagRemoveValue(*(CFMutableBagRef *)(v4 + 288), *(const void **)(DerivedStorage + 280));
      v6 = MEMORY[0x194029AE0](*(_QWORD *)(v5 + 288), *(_QWORD *)(DerivedStorage + 280));
      CFRelease(v3);
    }
    else
    {
      CFBagRemoveValue(*(CFMutableBagRef *)(DerivedStorage + 288), *(const void **)(DerivedStorage + 280));
      v6 = MEMORY[0x194029AE0](*(_QWORD *)(DerivedStorage + 288), *(_QWORD *)(DerivedStorage + 280));
    }
    if (v6 > 0)
    {
LABEL_12:
      v12 = *(const void **)(DerivedStorage + 280);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(DerivedStorage + 280) = 0;
      }
      return;
    }
LABEL_7:
    v7 = *(_QWORD *)(DerivedStorage + 280);
    v8 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v8)
      v8(v7, 0, 0, 0);
    CMBaseObject = FigEndpointPlaybackSessionGetCMBaseObject();
    if (CMBaseObject)
    {
      v10 = CMBaseObject;
      v11 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v11)
        v11(v10);
    }
    goto LABEL_12;
  }
}

uint64_t playerairplay_resetAirPlayVideoState(const void *a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  int v5;
  NSObject *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  int v9;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v3 = result;
    if (!*(_QWORD *)(result + 240))
    {
      if (dword_1EE2A2FA0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v9 = 0;
      return pap_setAirPlayState(a1, v9);
    }
    if (pap_DoesCurrentRouteUseScreen(a1))
    {
      if (*(_BYTE *)(v3 + 400))
        v4 = 1;
      else
        v4 = gIsiOSDeviceWithMedusaSupport == 0;
      v5 = v4;
      if (*(_BYTE *)(v3 + 45) && v5)
      {
        if (!dword_1EE2A2FA0)
        {
LABEL_24:
          v9 = 11;
          return pap_setAirPlayState(a1, v9);
        }
LABEL_13:
        v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_24;
      }
      if (dword_1EE2A2FA0)
      {
LABEL_20:
        v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (playerairplay_isAPVAllowedByClient())
      {
        if (!dword_1EE2A2FA0)
          goto LABEL_24;
        goto LABEL_13;
      }
      if (dword_1EE2A2FA0)
        goto LABEL_20;
    }
    v9 = 10;
    return pap_setAirPlayState(a1, v9);
  }
  return result;
}

_BYTE *playerairplay_updateAirPlayVideoIsActiveProperty(const void *a1)
{
  _BYTE *result;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  const void *v9;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v3 = result;
    if (!*result)
    {
      if (pap_AirPlayState(a1) - 14 > 2)
      {
        v8 = *((_QWORD *)v3 + 28);
        v5 = (uint64_t *)(v3 + 224);
        v9 = (const void *)*MEMORY[0x1E0C9AE40];
        FigPlayerAirPlayRoute_SetProperty(v8, CFSTR("AirPlayVideoActive"), (const void *)*MEMORY[0x1E0C9AE40]);
      }
      else
      {
        v6 = *((_QWORD *)v3 + 28);
        v5 = (uint64_t *)(v3 + 224);
        v4 = v6;
        if (*((_BYTE *)v5 - 182))
        {
          FigPlayerAirPlayRoute_SetProperty(v4, CFSTR("AirPlayVideoActive"), (const void *)*MEMORY[0x1E0C9AE40]);
          v7 = (const void **)MEMORY[0x1E0C9AE50];
        }
        else
        {
          FigPlayerAirPlayRoute_SetProperty(v4, CFSTR("AirPlayVideoActive"), (const void *)*MEMORY[0x1E0C9AE50]);
          v7 = (const void **)MEMORY[0x1E0C9AE40];
        }
        v9 = *v7;
      }
      return (_BYTE *)FigPlayerAirPlayRoute_SetProperty(*v5, CFSTR("VideoForMusicActive"), v9);
    }
  }
  return result;
}

uint64_t playerairplay_updateShareAndAirPlayEchoMitigation(const void *a1)
{
  uint64_t result;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t (*v5)(uint64_t, _BOOL8, const void *);

  result = FigShareAndAirPlayHelperGetShared();
  if (result)
  {
    v3 = result;
    result = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)result)
    {
      if (*(_BYTE *)(result + 448))
        v4 = pap_AirPlayState(a1) - 14 < 3 || *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296) != 0;
      else
        v4 = 0;
      result = CMBaseObjectGetVTable();
      v5 = *(uint64_t (**)(uint64_t, _BOOL8, const void *))(*(_QWORD *)(result + 16) + 8);
      if (v5)
        return v5(v3, v4, a1);
    }
  }
  return result;
}

const char *pap_getDescriptionForAirPlayState(unsigned int a1)
{
  if (a1 > 0x11)
    return "Unknown";
  else
    return off_1E2F99528[a1];
}

uint64_t pap_DoesCurrentRouteUseScreen(const void *a1)
{
  CFTypeRef v1;
  uint64_t DerivedStorage;
  uint64_t DoesCurrentRouteUseScreen;

  if (a1)
    v1 = CFRetain(a1);
  else
    v1 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  DoesCurrentRouteUseScreen = FigPlayerAirPlayRoute_DoesCurrentRouteUseScreen(*(_QWORD *)(DerivedStorage + 224));
  CFRelease(v1);
  return DoesCurrentRouteUseScreen;
}

const void *itemairplay_getiTunesStoreContentType()
{
  const void *result;
  const void *v1;
  uint64_t v2;

  result = itemairplay_copyiTunesStoreContentInfo();
  if (result)
  {
    v1 = result;
    v2 = itemairplay_getiTunesStoreContentTypeFromInfo(result);
    CFRelease(v1);
    return (const void *)v2;
  }
  return result;
}

BOOL pap_PlaybackSessionGetBooleanPropertySync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _BOOL8 v8;
  _QWORD v10[5];
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __pap_PlaybackSessionGetBooleanPropertySync_block_invoke;
    v11[3] = &unk_1E2F81FC0;
    v11[5] = DerivedStorage;
    v11[6] = a3;
    v11[4] = &v12;
    if (a2 == a1)
    {
      __pap_PlaybackSessionGetBooleanPropertySync_block_invoke(v11);
    }
    else
    {
      v7 = *(NSObject **)(DerivedStorage + 104);
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __pap_PlaybackSessionGetBooleanPropertySync_block_invoke_2;
      v10[3] = &unk_1E2F98E38;
      v10[4] = v11;
      dispatch_sync(v7, v10);
    }
  }
  v8 = v13[3] == *MEMORY[0x1E0C9AE50];
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_192C704F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

const void *itemairplay_copyiTunesStoreAlternateContentID()
{
  const void *v0;
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  const __CFDictionary *Value;

  v0 = (const void *)*MEMORY[0x1E0C9B208];
  v1 = (const __CFDictionary *)itemairplay_copyiTunesStoreContentInfo();
  v2 = v1;
  if (v1)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("assetOption_iTunesStoreAlternateContentInfo"));
    if (Value)
      v0 = CFDictionaryGetValue(Value, CFSTR("assetOption_iTunesStoreContentID"));
  }
  if (v0)
    CFRetain(v0);
  if (v2)
    CFRelease(v2);
  return v0;
}

const void *itemairplay_copyiTunesStoreContentInfo()
{
  uint64_t v0;
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *DictionaryValue;
  const void *v4;
  CFTypeRef cf;

  cf = 0;
  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v0)
    return 0;
  CMBaseObject = FigAssetGetCMBaseObject(v0);
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v2)
    return 0;
  v2(CMBaseObject, CFSTR("assetProperty_CreationOptionsDictionary"), *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  DictionaryValue = (const void *)FigCFDictionaryGetDictionaryValue();
  v4 = DictionaryValue;
  if (DictionaryValue)
    CFRetain(DictionaryValue);
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t itemairplay_getiTunesStoreContentTypeFromInfo(const void *a1)
{
  CFTypeID TypeID;
  uint64_t result;
  const void *v4;

  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1))
    return 0;
  result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentType"));
  if (result)
  {
    v4 = (const void *)result;
    if (CFEqual((CFTypeRef)result, CFSTR("match")))
      return 2;
    else
      return CFEqual(v4, CFSTR("purchaseHistory")) != 0;
  }
  return result;
}

uint64_t FigAssetCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigAssetGetCMBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 48);
  if (v9)
    return v9(CMBaseObject, a2, a3, a4);
  return result;
}

void __playerairplay_performQueuedItemVodkaExchange_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  char v20;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 56);
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v9 = v8;
    v10 = FigReadWriteLockLockForRead();
    if (!*(_BYTE *)(v9 + 72))
    {
      v11 = (void *)MEMORY[0x19403137C](v10);
      v12 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("Error"));
      if (v12 && objc_msgSend(v12, "code"))
      {
        if (v6 && pap_isLocalFileURL(*(const __CFURL **)(v9 + 88), 0))
        {
          v13 = itemairplay_createCPEProtectorIfAvailable(v5, 0, &v20);
          if (v13)
          {
            v14 = (const void *)v13;
            playerairplay_performQueuedItemVodkaExchange(v4, v5, v13, 0);
            CFRelease(v14);
          }
          else
          {
            *(_BYTE *)(v9 + 735) = 1;
          }
        }
        else
        {
          *(_BYTE *)(v9 + 735) = 4;
          *(_BYTE *)(v9 + 739) = 2;
        }
      }
      else
      {
        *(_BYTE *)(v9 + 735) = 3;
        v15 = *(const void **)(v9 + 440);
        if (v15)
        {
          CFRelease(v15);
          *(_QWORD *)(v9 + 440) = 0;
        }
        v16 = (const void *)objc_msgSend(a2, "objectForKey:", CFSTR("AirPlayParams"));
        *(_QWORD *)(v9 + 440) = v16;
        if (v16)
          CFRetain(v16);
      }
      objc_autoreleasePoolPop(v11);
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v4);
    }
    FigReadWriteLockUnlockForRead();
  }
  v17 = *(const void **)(a1 + 32);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(a1 + 48);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(a1 + 40);
  if (v19)
    CFRelease(v19);
}

uint64_t itemairplay_setUpPlayParamDictionary(const void *a1, __CFDictionary *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  _BYTE *v8;
  _BYTE *v9;
  CFTypeRef v10;
  const __CFURL **v11;
  _BOOL4 v13;
  const __CFURL *v14;
  const __CFString *v15;
  const __CFString *v16;
  uint64_t v17;
  const void *v18;
  _BYTE *v19;
  uint64_t *v20;
  int v21;
  CFTypeRef v22;
  _BOOL4 BooleanPropertySync;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t CMBaseObject;
  void (*v30)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  CFStringRef v31;
  CFStringRef v32;
  const void *v33;
  int v34;
  const __CFAllocator *v35;
  CFStringRef v36;
  float Seconds;
  unsigned int (*v38)(const void *, CMTime *);
  int64_t Count;
  const void **v40;
  const void **v41;
  const void *Value;
  const void *v43;
  const void *v44;
  const __CFURL *v45;
  const __CFURL *SecurityScopedFileURLForPersistentURL;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  const char *v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  uint64_t v53;
  uint64_t (*v54)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  _BOOL4 v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, CFTypeRef *);
  uint64_t v63;
  unsigned int (*v64)(uint64_t, const __CFString *, void *, os_log_type_t *);
  uint64_t v65;
  unsigned int (*v66)(uint64_t, const __CFString *, void *, CFTypeRef *);
  const __CFAllocator *v67;
  NSObject *v68;
  CFTypeRef v69;
  CFTypeRef v70;
  unsigned int (*v71)(CFTypeRef, CFTypeRef, CFArrayRef *);
  CFIndex v72;
  const __CFURL *v73;
  CFStringRef v74;
  uint64_t v75;
  CFTypeRef v76;
  const void *v77;
  uint64_t v78;
  BOOL v79;
  const void *DictionaryValue;
  const __CFString *v81;
  CFURLRef v82;
  const __CFURL *v83;
  uint64_t StringValue;
  CFTypeRef v85;
  const __CFURL *v86;
  const __CFURL *v87;
  BOOL v88;
  CFStringRef v89;
  const void *v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v93;
  CFTypeRef v94;
  unsigned int (*v95)(CFTypeRef, __CFString *, uint64_t, CFTypeRef *);
  const void *v96;
  const __CFURL *v97;
  const __CFURL *v98;
  const void *v99;
  uint64_t v100;
  CFTypeRef v101;
  CFTypeRef *v102;
  uint64_t v103;
  uint64_t FigBaseObject;
  unsigned int (*v105)(uint64_t, const __CFString *, uint64_t, CMTime *);
  NSObject *v106;
  unsigned int v107;
  unsigned int v108;
  const char *v109;
  uint64_t v110;
  const void *v111;
  const char *v112;
  const __CFURL *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t VTable;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, const __CFString *, _QWORD, CMTime *);
  int v119;
  const void *v120;
  const void *ArrayValue;
  const void *v122;
  BOOL v123;
  const void *v124;
  const __CFDictionary *v125;
  const void *v126;
  CFTypeID TypeID;
  const void *v128;
  int v129;
  _BOOL4 v130;
  NSObject *v131;
  unsigned int v132;
  unsigned int v133;
  const char *v134;
  NSObject *v135;
  unsigned int v136;
  unsigned int v137;
  const char *v138;
  const char *v139;
  const void *v140;
  const void *v141;
  const void **v142;
  const void *v143;
  uint64_t v144;
  void (*v145)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v146;
  void (*v147)(uint64_t, const __CFString *, uint64_t, CMTime *);
  const void *v148;
  uint64_t v149;
  void (*v150)(uint64_t, const __CFString *, uint64_t, CMTime *);
  const void *v151;
  const void *v152;
  const void *v153;
  uint64_t v154;
  NSObject *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  NSObject *v161;
  unsigned int v162;
  unsigned int v163;
  const char *v164;
  const char *v165;
  uint64_t v166;
  const void *v167;
  const void *v168;
  const char *v170;
  uint64_t v171;
  const __CFURL *v172;
  _BOOL4 v173;
  _BOOL4 v174;
  int v175;
  _BOOL4 v176;
  CFStringRef v177;
  _QWORD *v178;
  const __CFURL *v179;
  CFTypeRef cf;
  CFURLRef cfa;
  CFTypeRef v182;
  CFTypeRef v183;
  CFTypeRef v184;
  CMTime v185;
  CFTypeRef v186;
  CFNumberRef number;
  char v188;
  CFTypeRef v189;
  CFTypeRef v190;
  BOOL v191;
  CFDictionaryRef theDict;
  const __CFURL *v193;
  CFTypeRef v194;
  CFTypeRef v195;
  CFTypeRef v196;
  CFTypeRef v197;
  CFArrayRef theArray;
  os_log_type_t type[8];
  CFTypeRef v200;
  CMTime valuePtr;
  const char *v202;
  __int16 v203;
  const void *v204;
  __int16 v205;
  const char *v206;
  __int16 v207;
  uint64_t v208;
  CMTime time;
  void *v210;
  CMTime *p_valuePtr;
  uint64_t v212;
  const __CFString *v213;
  _QWORD v214[4];

  v214[1] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theDict = 0;
  v191 = 0;
  v189 = 0;
  v190 = 0;
  v188 = 0;
  number = 0;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(DerivedStorage + 72) || !a2)
  {
    v27 = FigSignalErrorAt();
    v97 = 0;
    v98 = 0;
    v74 = 0;
    v99 = 0;
    v183 = 0;
    v184 = 0;
    goto LABEL_194;
  }
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v184 = v7;
  if (!v8 || (v9 = v8, *v8))
  {
    v27 = FigSignalErrorAt();
    v97 = 0;
    v98 = 0;
    v74 = 0;
    v99 = 0;
    v183 = 0;
    goto LABEL_194;
  }
  if (v7)
    v10 = CFRetain(v7);
  else
    v10 = 0;
  v183 = v10;
  if (!*(_QWORD *)(DerivedStorage + 88))
  {
    if (dword_1EE2A2FA0)
    {
      LODWORD(v200) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    itemairplay_postFailNotificationWithError(a1, -17226);
    cfa = 0;
    v182 = 0;
    v74 = 0;
    v177 = 0;
    v179 = 0;
    goto LABEL_350;
  }
  v175 = CFEqual(*(CFTypeRef *)(DerivedStorage + 24), CFSTR("com.apple.coremedia.assettype.streaming"));
  v11 = (const __CFURL **)(DerivedStorage + 88);
  v13 = pap_isLocalFileURL(*(const __CFURL **)(DerivedStorage + 88), &v191) && v175 == 0;
  v173 = v13;
  v14 = *v11;
  if (*v11 && FigCFURLIsLocalResource() && (v15 = CFURLCopyPathExtension(v14), (v16 = v15) != 0))
  {
    v176 = CFStringCompare(v15, CFSTR("movpkg"), 1uLL) == kCFCompareEqualTo;
    CFRelease(v16);
  }
  else
  {
    v176 = 0;
  }
  v17 = CMBaseObjectGetDerivedStorage();
  v18 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v19 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v20 = (uint64_t *)MEMORY[0x1E0CA3F80];
  if (v19 && !*v19)
  {
    v21 = CFEqual(*(CFTypeRef *)(v17 + 24), CFSTR("com.apple.coremedia.assettype.streaming"));
    if (v18)
    {
      v22 = CFRetain(v18);
      BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v22, (uint64_t)v18, *v20);
      if (v22)
        CFRelease(v22);
    }
    else
    {
      time.value = 0;
      *(_QWORD *)&time.timescale = &time;
      time.epoch = 0x2020000000;
      v210 = 0;
      BooleanPropertySync = *MEMORY[0x1E0C9AE50] == 0;
      _Block_object_dispose(&time, 8);
    }
    v25 = itemairplay_copyiTunesStoreContentRentalID();
    v26 = v25;
    if (!BooleanPropertySync && v25 && v21)
    {
      itemairplay_postFailNotificationWithError(a1, -17220);
      v27 = 4294950076;
    }
    else
    {
      v27 = 0;
      if (!v25)
        goto LABEL_34;
    }
    CFRelease(v26);
LABEL_34:
    if (!v18)
      goto LABEL_36;
    goto LABEL_35;
  }
  v27 = FigSignalErrorAt();
  if (v18)
LABEL_35:
    CFRelease(v18);
LABEL_36:
  if ((_DWORD)v27)
  {
    cfa = 0;
    v182 = 0;
    v74 = 0;
    v177 = 0;
    v179 = 0;
    goto LABEL_351;
  }
  if (pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v183, (uint64_t)v184, *v20))
  {
    v174 = 0;
    v182 = 0;
  }
  else
  {
    v182 = itemairplay_copyiTunesStoreAlternateContentID();
    v174 = FigCFEqual() == 0;
  }
  v28 = *(_QWORD *)(DerivedStorage + 16);
  if (v28)
  {
    CMBaseObject = FigAssetGetCMBaseObject(v28);
    v30 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v30)
      v30(CMBaseObject, CFSTR("assetProperty_CreationOptionsDictionary"), *MEMORY[0x1E0C9AE00], &theDict);
  }
  CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3EA8], *(const void **)(DerivedStorage + 80));
  if (v9[450])
  {
    v31 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9 + 450, 0x8000100u);
    FigCFDictionarySetValue();
    if (v31)
      CFRelease(v31);
  }
  if (*(_BYTE *)(DerivedStorage + 868))
  {
    v32 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)(DerivedStorage + 868), 0x8000100u);
    FigCFDictionarySetValue();
    if (v32)
      CFRelease(v32);
  }
  v33 = *(const void **)(DerivedStorage + 192);
  if (v33)
  {
    if (*(_BYTE *)(DerivedStorage + 224))
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3E68], v33);
    else
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3E60], v33);
  }
  else
  {
    v34 = *(unsigned __int8 *)(DerivedStorage + 184);
    if (!*(_BYTE *)(DerivedStorage + 184))
    {
      time = *(CMTime *)(DerivedStorage + 160);
      FigCFDictionarySetCMTime();
      v35 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      time = *(CMTime *)(DerivedStorage + 160);
      v36 = CMTimeCopyDescription(v35, &time);
      if (v36)
        CFRelease(v36);
    }
    if (pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v183, (uint64_t)v184, *MEMORY[0x1E0CA3F78]))
    {
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      valuePtr = *(CMTime *)(DerivedStorage + 160);
      Seconds = CMTimeGetSeconds(&valuePtr);
      if (Seconds > 0.0)
      {
        v38 = *(unsigned int (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v38)
        {
          if (!v38(a1, &time))
          {
            valuePtr = time;
            CMTimeGetSeconds(&valuePtr);
          }
        }
      }
      if (!v34)
        FigCFDictionarySetFloat32();
    }
  }
  if (a3)
  {
    Count = CFDictionaryGetCount(a3);
    v40 = (const void **)malloc_type_calloc(8uLL, Count, 0x12B742E4uLL);
    CFDictionaryGetKeysAndValues(a3, v40, 0);
    if (Count >= 1)
    {
      v41 = v40;
      do
      {
        Value = CFDictionaryGetValue(a3, *v41);
        CFDictionaryAddValue(a2, *v41++, Value);
        --Count;
      }
      while (Count);
    }
    free(v40);
  }
  if (itemairplay_getiTunesStoreContentType() && !v174)
  {
    v43 = CFDictionaryGetValue(theDict, CFSTR("assetOption_iTunesStoreContentInfo"));
    itemairplay_addiTunesStoreContentInfo(v43, a2);
  }
  if (!*(_QWORD *)(DerivedStorage + 720))
    playerairplay_isInterstitialEventIDRestrictedForSkip((int)v184, *(CFTypeRef *)(DerivedStorage + 792));
  FigCFDictionarySetInt64();
  v44 = *(const void **)(DerivedStorage + 776);
  if (v44)
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3E80], v44);
  FigCFDictionaryGetBooleanIfPresent();
  if (!v173)
  {
    v186 = 0;
    v27 = itemairplay_ensureCustomURLLoader();
    if ((_DWORD)v27)
      goto LABEL_193;
    v51 = *(_QWORD *)(DerivedStorage + 640);
    if (v51)
    {
      v52 = *(void (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
      if (v52)
        v52(v51, *MEMORY[0x1E0CA36F8], *MEMORY[0x1E0C9AE00], &number);
      if (number)
      {
        CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(DerivedStorage + 104));
        FigCFDictionarySetInt64();
      }
    }
    if (!v175)
    {
      v76 = *(CFTypeRef *)(DerivedStorage + 88);
      if (v76)
        v76 = CFRetain(v76);
      v45 = 0;
      v186 = v76;
      goto LABEL_153;
    }
    v53 = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
    v54 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (!v54)
    {
      v27 = 4294954514;
      goto LABEL_193;
    }
    v55 = (void *)*MEMORY[0x1E0C9AE00];
    v27 = v54(v53, CFSTR("assetProperty_OriginalNetworkContentURL"), *MEMORY[0x1E0C9AE00], &v186);
    if ((_DWORD)v27)
    {
LABEL_193:
      v97 = 0;
      v98 = 0;
      v74 = 0;
      v99 = v182;
      goto LABEL_194;
    }
    if (!v186)
      goto LABEL_192;
    v45 = 0;
    if (v176 || !v188)
    {
LABEL_153:
      if (v174 && FigCFDictionaryGetDictionaryValue())
      {
        DictionaryValue = (const void *)FigCFDictionaryGetDictionaryValue();
        itemairplay_addiTunesStoreContentInfo(DictionaryValue, a2);
        v81 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)DictionaryValue, CFSTR("assetOption_iTunesStoreAlternateContentInfoAssetURLString"));
        v82 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v81, 0);
        if (v186)
          CFRelease(v186);
        v186 = v82;
      }
      v83 = (const __CFURL *)v186;
      if (!v186)
        goto LABEL_169;
      if (!theDict)
        goto LABEL_169;
      StringValue = FigCFDictionaryGetStringValue();
      v83 = (const __CFURL *)v186;
      if (!StringValue)
        goto LABEL_169;
      time.value = 0;
      v27 = FigCFHTTPCreateURLWithQueryParam((const __CFURL *)v186, CFSTR("_HLS_primary_id="), StringValue, &time);
      if (!(_DWORD)v27)
      {
        v85 = v186;
        v186 = (CFTypeRef)time.value;
        if (time.value)
          CFRetain((CFTypeRef)time.value);
        if (v85)
          CFRelease(v85);
        if (time.value)
          CFRelease((CFTypeRef)time.value);
        v83 = (const __CFURL *)v186;
LABEL_169:
        if (v83)
        {
          v86 = CFURLCopyAbsoluteURL(v83);
          v87 = v86;
          v88 = v86 == 0;
          if (!v86)
            v86 = (const __CFURL *)v186;
          v89 = CFURLGetString(v86);
          CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3D48], v89);
          if (!v88)
            CFRelease(v87);
        }
        if (v186)
        {
          CFRelease(v186);
          v186 = 0;
        }
        *(_BYTE *)(DerivedStorage + 848) = 0;
        v90 = *(const void **)(DerivedStorage + 856);
        if (v90)
        {
          CFRelease(v90);
          *(_QWORD *)(DerivedStorage + 856) = 0;
        }
        if (!pap_EndpointSupportsSecureStop(v184))
        {
LABEL_185:
          if (!v176 && !v45)
          {
            v179 = 0;
            cfa = 0;
LABEL_188:
            v177 = 0;
            v74 = 0;
            goto LABEL_227;
          }
          if (v191)
            goto LABEL_78;
          if (v45)
            cfa = CFURLCopyAbsoluteURL(v45);
          else
            cfa = CFURLCopyAbsoluteURL(*(CFURLRef *)(DerivedStorage + 88));
          if (!v188)
          {
            if (dword_1EE2A2FA0)
            {
              LODWORD(v200) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v106 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v107 = v200;
              if (os_log_type_enabled(v106, type[0]))
                v108 = v107;
              else
                v108 = v107 & 0xFFFFFFFE;
              if (v108)
              {
                if (v184)
                  v109 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                else
                  v109 = "";
                if (a1)
                  v170 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                else
                  v170 = "";
                v171 = *(_QWORD *)(DerivedStorage + 80);
                LODWORD(valuePtr.value) = 136316418;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
                LOWORD(valuePtr.flags) = 2048;
                *(_QWORD *)((char *)&valuePtr.flags + 2) = v184;
                HIWORD(valuePtr.epoch) = 2082;
                v202 = v109;
                v203 = 2048;
                v204 = a1;
                v205 = 2082;
                v206 = v170;
                v207 = 2114;
                v208 = v171;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
LABEL_414:
            v179 = 0;
            goto LABEL_188;
          }
          time.value = 0;
          v100 = CMBaseObjectGetDerivedStorage();
          v102 = (CFTypeRef *)(v100 + 48);
          v101 = *(CFTypeRef *)(v100 + 48);
          v103 = *MEMORY[0x1E0C9AE00];
          if (!v101)
          {
            if (FigStreamingAssetDownloadCacheTranslatorCreate(*MEMORY[0x1E0C9AE00], cfa, *(_BYTE *)(v100 + 57), v102))
            {
              if (!FigSignalErrorAt())
              {
LABEL_403:
                if (time.value)
                  CFRelease((CFTypeRef)time.value);
                v179 = 0;
LABEL_406:
                if (v176 && !v179)
                {
LABEL_395:
                  v75 = FigSignalErrorAt();
LABEL_396:
                  v27 = v75;
                  v97 = 0;
                  v74 = 0;
                  v98 = cfa;
                  v99 = v182;
                  goto LABEL_194;
                }
                if (v179)
                {
                  v74 = CFURLCopyFileSystemPath(v179, kCFURLPOSIXPathStyle);
                  if (v74)
                  {
                    v172 = cfa;
                    if (!cfa)
                      v172 = *(const __CFURL **)(DerivedStorage + 88);
                    v177 = CFURLCopyFileSystemPath(v172, kCFURLPOSIXPathStyle);
                    if (v177)
                    {
                      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3DF0], v177);
                      goto LABEL_226;
                    }
                    v27 = FigSignalErrorAt();
                  }
                  else
                  {
                    v27 = FigSignalErrorAt();
                    v74 = 0;
                  }
                  v98 = cfa;
                  v99 = v182;
                  v97 = v179;
LABEL_194:
                  v179 = v97;
                  cfa = v98;
                  v177 = 0;
                  if (!(_DWORD)v27)
                    goto LABEL_356;
                  v182 = v99;
                  goto LABEL_351;
                }
                goto LABEL_414;
              }
LABEL_401:
              if (*v102)
              {
                CFRelease(*v102);
                *v102 = 0;
              }
              goto LABEL_403;
            }
            v101 = *v102;
          }
          FigBaseObject = FigStreamingAssetDownloadCacheTranslatorGetFigBaseObject(v101);
          v105 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
          if (v105 && !v105(FigBaseObject, CFSTR("FSADCT_MultiVariantPlaylist"), v103, &time))
          {
            if (*(_BYTE *)(v100 + 57))
              CFURLGetString((CFURLRef)time.value);
            v179 = (const __CFURL *)time.value;
            goto LABEL_406;
          }
          goto LABEL_401;
        }
        v91 = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
        v92 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v92)
        {
          v93 = *MEMORY[0x1E0C9AE00];
          if (!v92(v91, CFSTR("assetProperty_DefaultContentKeySession"), *MEMORY[0x1E0C9AE00], &v190))
          {
            v94 = v190;
            v95 = *(unsigned int (**)(CFTypeRef, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
            if (v95)
            {
              if (!v95(v94, CFSTR("kFigCKSPropertyKey_ShouldProvideFPSSecureStop"), v93, &v189))
              {
                v96 = (const void *)*MEMORY[0x1E0C9AE50];
                if (FigCFEqual())
                {
                  *(_BYTE *)(DerivedStorage + 848) = 1;
                  FigAirPlaySecureStopRouterCreateSecureStopUUID(*(CFStringRef *)(DerivedStorage + 80), (__CFString **)(DerivedStorage + 856));
                  CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0CA3710], v96);
                }
                goto LABEL_185;
              }
            }
          }
        }
LABEL_192:
        v27 = FigSignalErrorAt();
        goto LABEL_193;
      }
      goto LABEL_193;
    }
    v193 = 0;
    v56 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v56 + 56))
    {
LABEL_398:
      v45 = 0;
      goto LABEL_153;
    }
    *(_QWORD *)type = 0;
    v200 = 0;
    v197 = 0;
    theArray = 0;
    v195 = 0;
    v196 = 0;
    v194 = 0;
    v57 = CMBaseObjectGetDerivedStorage();
    v178 = (_QWORD *)v56;
    valuePtr.value = 0;
    *(_QWORD *)&valuePtr.timescale = &valuePtr;
    valuePtr.epoch = 0x2020000000;
    v202 = 0;
    cf = (CFTypeRef)FigCFWeakReferenceHolderCopyReferencedObject();
    v58 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    v59 = v58;
    if (v58 && !*v58)
    {
      v60 = 0;
      if (FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(_QWORD *)(v57 + 16), &v200) || !v200)
        goto LABEL_128;
      v61 = *(_QWORD *)(v57 + 8);
      v62 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
      if (v62)
      {
        if (!v62(v61, &v194))
        {
          v63 = FigAssetGetCMBaseObject(v194);
          v64 = *(unsigned int (**)(uint64_t, const __CFString *, void *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v64)
          {
            if (!v64(v63, CFSTR("assetProperty_OriginalNetworkContentURL"), v55, type))
            {
              v65 = FigAssetGetCMBaseObject(v194);
              v66 = *(unsigned int (**)(uint64_t, const __CFString *, void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v66)
              {
                v60 = 0;
                if (v66(v65, CFSTR("assetProperty_HLSAlternates"), v55, &v197) || !v197)
                  goto LABEL_128;
                v67 = CFGetAllocator(a1);
                v213 = CFSTR("FSC_DownloadDestinationURL");
                v214[0] = v200;
                if (!FigStreamingCacheCreate(v67, *(const __CFURL **)type, (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v214, &v213, 1), (uint64_t *)&v196))
                {
                  v68 = *((_QWORD *)v59 + 12);
                  time.value = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&time.timescale = 3221225472;
                  time.epoch = (CMTimeEpoch)__itemairplay_doesHLSAssetHaveACompletelyDownloadedAlternate_block_invoke;
                  v210 = &unk_1E2F87F08;
                  p_valuePtr = &valuePtr;
                  v212 = v57;
                  dispatch_sync(v68, &time);
                  if (!FigAlternateOfflinePlayableForMediaSelectionFilterCreate(v55, (uint64_t)v196, *(const __CFArray **)(*(_QWORD *)&valuePtr.timescale + 24), 1, &v195))
                  {
                    v69 = v195;
                    v70 = v197;
                    v71 = *(unsigned int (**)(CFTypeRef, CFTypeRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 24);
                    if (v71)
                    {
                      if (!v71(v69, v70, &theArray))
                      {
                        v72 = (CFIndex)theArray;
                        if (theArray)
                          v72 = CFArrayGetCount(theArray);
                        v60 = v72 > 0;
LABEL_128:
                        v77 = *(const void **)(*(_QWORD *)&valuePtr.timescale + 24);
                        if (v77)
                          CFRelease(v77);
                        if (cf)
                          CFRelease(cf);
                        if (v200)
                          CFRelease(v200);
                        if (*(_QWORD *)type)
                          CFRelease(*(CFTypeRef *)type);
                        if (theArray)
                          CFRelease(theArray);
                        if (v196)
                          CFRelease(v196);
                        if (v195)
                          CFRelease(v195);
                        if (v197)
                          CFRelease(v197);
                        if (v194)
                          CFRelease(v194);
                        _Block_object_dispose(&valuePtr, 8);
                        if (v60)
                        {
                          v27 = FigAssetDownloadCoordinatorMarkAssetForInteractivity(v178[2]);
                          if ((_DWORD)v27)
                            goto LABEL_193;
                          v78 = FigAssetDownloadCoordinatorCopyDestinationURLForAsset(v178[2], &v193);
                          v27 = v78;
                          if ((_DWORD)v78 || (v45 = v193) == 0)
                          {
                            v79 = (_DWORD)v78 == 0;
                            FigAssetDownloadCoordinatorUnmarkAssetForInteractivity((const void *)v178[2]);
                            if (!v79)
                              goto LABEL_193;
                            v45 = v193;
                          }
                          else
                          {
                            *((_BYTE *)v178 + 56) = 1;
                          }
                          goto LABEL_153;
                        }
                        goto LABEL_398;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v60 = 0;
    goto LABEL_128;
  }
  if (!v191)
  {
    v73 = CFURLCopyAbsoluteURL(*(CFURLRef *)(DerivedStorage + 88));
    cfa = v73;
    if (!v73)
      v73 = *(const __CFURL **)(DerivedStorage + 88);
    v74 = CFURLCopyFileSystemPath(v73, kCFURLPOSIXPathStyle);
    if (v74)
      goto LABEL_225;
    v75 = FigSignalErrorAt();
    goto LABEL_396;
  }
  v45 = 0;
LABEL_78:
  if (*(_QWORD *)(DerivedStorage + 96))
    goto LABEL_219;
  SecurityScopedFileURLForPersistentURL = (const __CFURL *)FigCreateSecurityScopedFileURLForPersistentURL();
  *(_QWORD *)(DerivedStorage + 96) = SecurityScopedFileURLForPersistentURL;
  if (!SecurityScopedFileURLForPersistentURL)
    goto LABEL_192;
  if (!CFURLStartAccessingSecurityScopedResource(SecurityScopedFileURLForPersistentURL))
  {
    LODWORD(v200) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v48 = v200;
    if (os_log_type_enabled(v47, type[0]))
      v49 = v48;
    else
      v49 = v48 & 0xFFFFFFFE;
    if (v49)
    {
      if (a1)
        v50 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
      else
        v50 = "";
      v110 = 88;
      if (!*(_BYTE *)(DerivedStorage + 57))
        v110 = 112;
      v111 = *(const void **)(DerivedStorage + v110);
      v112 = *(const char **)(DerivedStorage + 96);
      LODWORD(valuePtr.value) = 136316163;
      *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
      LOWORD(valuePtr.flags) = 2048;
      *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
      HIWORD(valuePtr.epoch) = 2082;
      v202 = v50;
      v203 = 2113;
      v204 = v111;
      v205 = 2113;
      v206 = v112;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_219:
  if (v45)
    cfa = CFURLCopyAbsoluteURL(v45);
  else
    cfa = CFURLCopyAbsoluteURL(*(CFURLRef *)(DerivedStorage + 96));
  v113 = cfa;
  if (!cfa)
    v113 = *(const __CFURL **)(DerivedStorage + 96);
  v74 = CFURLCopyFileSystemPath(v113, kCFURLPOSIXPathStyle);
  if (!v74)
    goto LABEL_395;
LABEL_225:
  v177 = 0;
  v179 = 0;
LABEL_226:
  CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3E08], v74);
LABEL_227:
  time.value = 0;
  valuePtr.value = 0;
  v114 = CMBaseObjectGetDerivedStorage();
  v115 = FigAssetGetCMBaseObject(*(_QWORD *)(v114 + 16));
  VTable = CMBaseObjectGetVTable();
  v117 = *MEMORY[0x1E0C9AE00];
  v118 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(VTable + 8) + 48);
  if (v118)
  {
    v119 = v118(v115, CFSTR("assetProperty_CreationFlags"), *MEMORY[0x1E0C9AE00], &time);
    v120 = (const void *)time.value;
    if (!v119 && time.value)
    {
      CFNumberGetValue((CFNumberRef)time.value, kCFNumberSInt64Type, &valuePtr);
      v120 = (const void *)time.value;
    }
    if (v120)
      CFRelease(v120);
  }
  FigCFDictionarySetInt32();
  if (theDict)
  {
    ArrayValue = (const void *)FigCFDictionaryGetArrayValue();
    if (ArrayValue)
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3E00], ArrayValue);
    v122 = CFDictionaryGetValue(theDict, CFSTR("assetOption_InheritURIQueryComponentFromReferencingURI"));
    if (v122)
      v123 = v174;
    else
      v123 = 1;
    if (!v123)
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3D88], v122);
    FigCFDictionarySetValueFromKeyInDict();
  }
  v124 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3DE0], (const void *)*MEMORY[0x1E0C9AE50]);
  v125 = theDict;
  CMBaseObjectGetDerivedStorage();
  if (v125
    && (v126 = CFDictionaryGetValue(v125, CFSTR("assetOption_iTunesStoreContentInfo"))) != 0
    && (TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v126))
    && (v128 = CFDictionaryGetValue((CFDictionaryRef)v126, CFSTR("assetOption_iTunesStoreAssetHLSAssetURLString"))) != 0)
  {
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3D78], v128);
    v129 = 0;
  }
  else
  {
    v129 = 1;
  }
  if (!v9[448] || playerairplay_isAPVSupportedForCoordinatedPlayback())
  {
    if (v129)
    {
      LOBYTE(theArray) = 0;
      LOBYTE(v197) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      v130 = v173;
      if (!(_BYTE)theArray)
        v130 = 0;
      if (v130)
      {
        if (!dword_1EE2A2FA0)
        {
LABEL_349:
          itemairplay_postFailNotificationWithError(a1, -17226);
LABEL_350:
          v27 = 4294950070;
          goto LABEL_351;
        }
        LODWORD(v200) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v131 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v132 = v200;
        if (os_log_type_enabled(v131, type[0]))
          v133 = v132;
        else
          v133 = v132 & 0xFFFFFFFE;
        if (!v133)
          goto LABEL_334;
        if (v184)
          v134 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        else
          v134 = "";
        if (!a1)
        {
          v159 = "";
          goto LABEL_333;
        }
LABEL_331:
        v159 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_333:
        v160 = *(_QWORD *)(DerivedStorage + 80);
        LODWORD(valuePtr.value) = 136316418;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
        LOWORD(valuePtr.flags) = 2048;
        *(_QWORD *)((char *)&valuePtr.flags + 2) = v184;
        HIWORD(valuePtr.epoch) = 2082;
        v202 = v134;
        v203 = 2048;
        v204 = a1;
        v205 = 2082;
        v206 = v159;
        v207 = 2114;
        v208 = v160;
        _os_log_send_and_compose_impl();
        goto LABEL_334;
      }
      if (!v175)
      {
        v200 = 0;
        v154 = *(_QWORD *)(DerivedStorage + 16);
        if (v154)
        {
          FigAssetCopyProperty(v154, (uint64_t)CFSTR("assetProperty_ProtectedStatus"), v117, (uint64_t)&v200);
          if (v200)
          {
            if (CFBooleanGetValue((CFBooleanRef)v200) && (_BYTE)v197)
            {
              if (!dword_1EE2A2FA0)
                goto LABEL_335;
              *(_DWORD *)type = 0;
              LOBYTE(v196) = 0;
              v155 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v156 = *(_DWORD *)type;
              if (os_log_type_enabled(v155, (os_log_type_t)v196))
                v157 = v156;
              else
                v157 = v156 & 0xFFFFFFFE;
              if (!v157)
              {
LABEL_334:
                fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_335:
                if (dword_1EE2A2FA0)
                {
                  LODWORD(v200) = 0;
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  v161 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v162 = v200;
                  if (os_log_type_enabled(v161, type[0]))
                    v163 = v162;
                  else
                    v163 = v162 & 0xFFFFFFFE;
                  if (v163)
                  {
                    if (v184)
                      v164 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                    else
                      v164 = "";
                    if (a1)
                      v165 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                    else
                      v165 = "";
                    v166 = *(_QWORD *)(DerivedStorage + 80);
                    LODWORD(valuePtr.value) = 136316418;
                    *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
                    LOWORD(valuePtr.flags) = 2048;
                    *(_QWORD *)((char *)&valuePtr.flags + 2) = v184;
                    HIWORD(valuePtr.epoch) = 2082;
                    v202 = v164;
                    v203 = 2048;
                    v204 = a1;
                    v205 = 2082;
                    v206 = v165;
                    v207 = 2114;
                    v208 = v166;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                goto LABEL_349;
              }
              if (v184)
                v134 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
              else
                v134 = "";
              if (!a1)
              {
                v159 = "";
                goto LABEL_333;
              }
              goto LABEL_331;
            }
          }
        }
      }
    }
    v140 = (const void *)*((_QWORD *)v9 + 51);
    if (v140)
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3D40], v140);
    v141 = (const void *)*((_QWORD *)v9 + 52);
    if (v141)
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3D38], v141);
    if (FigCFEqual())
    {
      v142 = (const void **)MEMORY[0x1E0CA3EC0];
    }
    else
    {
      if (!FigCFEqual())
      {
        if (FigCFEqual())
          v143 = (const void *)*MEMORY[0x1E0CA3ED0];
        else
          v143 = (const void *)*MEMORY[0x1E0CA3ED8];
        goto LABEL_279;
      }
      v142 = (const void **)MEMORY[0x1E0CA3EC8];
    }
    v143 = *v142;
LABEL_279:
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3DD8], v143);
    time.value = 0;
    if (v9[249])
    {
      v144 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
      v145 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v145)
        v145(v144, CFSTR("TimeToPauseBuffering"), v117, &time);
      if (time.value)
      {
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3E88], (const void *)time.value);
        if (time.value)
        {
          CFRelease((CFTypeRef)time.value);
          time.value = 0;
        }
      }
      v146 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
      v147 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v147)
        v147(v146, CFSTR("TimeToPausePlayback"), v117, &time);
      if (time.value)
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3E90], (const void *)time.value);
      if (*(_BYTE *)(DerivedStorage + 158))
        v148 = v124;
      else
        v148 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3E58], v148);
      if (time.value)
      {
        CFRelease((CFTypeRef)time.value);
        time.value = 0;
      }
      v149 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
      v150 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v150)
        v150(v149, CFSTR("timeToSwapPlayback"), v117, &time);
      if (time.value)
      {
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3E98], (const void *)time.value);
        if (time.value)
        {
          CFRelease((CFTypeRef)time.value);
          time.value = 0;
        }
      }
    }
    v151 = *(const void **)(DerivedStorage + 808);
    if (v151)
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3D98], v151);
    v152 = *(const void **)(DerivedStorage + 784);
    if (v152)
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3D50], v152);
    v153 = *(const void **)(DerivedStorage + 792);
    if (v153)
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3D90], v153);
    if ((*(_BYTE *)(DerivedStorage + 556) & 1) != 0)
    {
      itemairplay_getCurrentInterstitialLiveHorizon(DerivedStorage, &v185);
      FigCFDictionarySetCMTime();
    }
    v27 = 0;
    goto LABEL_355;
  }
  if (dword_1EE2A2FA0)
  {
    LODWORD(v200) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v135 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v136 = v200;
    if (os_log_type_enabled(v135, type[0]))
      v137 = v136;
    else
      v137 = v136 & 0xFFFFFFFE;
    if (!v137)
      goto LABEL_327;
    if (v184)
    {
      v138 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
      if (a1)
      {
LABEL_268:
        v139 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_326:
        v158 = *(_QWORD *)(DerivedStorage + 80);
        LODWORD(valuePtr.value) = 136316418;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
        LOWORD(valuePtr.flags) = 2048;
        *(_QWORD *)((char *)&valuePtr.flags + 2) = v184;
        HIWORD(valuePtr.epoch) = 2082;
        v202 = v138;
        v203 = 2048;
        v204 = a1;
        v205 = 2082;
        v206 = v139;
        v207 = 2114;
        v208 = v158;
        _os_log_send_and_compose_impl();
LABEL_327:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_328;
      }
    }
    else
    {
      v138 = "";
      if (a1)
        goto LABEL_268;
    }
    v139 = "";
    goto LABEL_326;
  }
LABEL_328:
  itemairplay_postFailNotificationWithError(a1, -15694);
  v27 = 4294951602;
LABEL_351:
  if (*(_BYTE *)(DerivedStorage + 56))
  {
    FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(DerivedStorage + 16));
    *(_BYTE *)(DerivedStorage + 56) = 0;
  }
  v167 = *(const void **)(DerivedStorage + 48);
  if (v167)
  {
    CFRelease(v167);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
LABEL_355:
  v99 = v182;
LABEL_356:
  if (theDict)
  {
    v168 = v99;
    CFRelease(theDict);
    v99 = v168;
  }
  if (v99)
    CFRelease(v99);
  if (v190)
    CFRelease(v190);
  if (v189)
    CFRelease(v189);
  if (v183)
    CFRelease(v183);
  if (v184)
    CFRelease(v184);
  if (v177)
    CFRelease(v177);
  if (v179)
    CFRelease(v179);
  if (cfa)
    CFRelease(cfa);
  if (v74)
    CFRelease(v74);
  if (number)
    CFRelease(number);
  FigReadWriteLockUnlockForRead();
  return v27;
}

void sub_192C729F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void playqueue_addItemToMediaControlPlaylist(uint64_t a1)
{
  CFStringRef v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 733) = 1;
  ++*(_DWORD *)(a1 + 20);
  v2 = playqueue_copyPlayQueueSummary(a1);
  if (dword_1EE2A2FA0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 8));
  if (v2)
    CFRelease(v2);
}

uint64_t pap_AirPlayRoute_CopyProperty(const void *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v7;
  uint64_t DerivedStorage;
  uint64_t v9;

  if (a1)
    v7 = CFRetain(a1);
  else
    v7 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = FigPlayerAirPlayRoute_CopyProperty(*(_QWORD *)(DerivedStorage + 224), a2, a3, a4);
  CFRelease(v7);
  return v9;
}

void pap_playbackSessionPlayCompletion(int a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  v4 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 104);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __pap_playbackSessionPlayCompletion_block_invoke;
  v5[3] = &__block_descriptor_44_e5_v8__0l;
  v5[4] = a2;
  v6 = a1;
  dispatch_async(v4, v5);
}

void itemairplay_postFailNotificationWithError(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  __CFDictionary *ErrorPayload;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString **v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ErrorPayload = pap_createErrorPayload(a2, 1);
  if (DerivedStorage)
  {
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v7 = kFigPlaybackItemNotification_FailedToBecomeReadyForPlayback;
    if (*(_BYTE *)(DerivedStorage + 737))
      v7 = kFigPlaybackItemNotification_FailedToPlayToEnd;
    itemairplay_postItemNotification(a1, *v7, ErrorPayload);
  }
  if (ErrorPayload)
    CFRelease(ErrorPayload);
}

void itemairplay_addiTunesStoreContentInfo(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  int v5;
  int v6;
  const void *Value;
  const void **v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFDictionaryGetTypeID())
    {
      v5 = itemairplay_getiTunesStoreContentTypeFromInfo(a1);
      if (v5)
      {
        v6 = v5;
        Value = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentID"));
        v8 = (const void **)MEMORY[0x1E0CA3D08];
        if (v6 == 2)
          v8 = (const void **)MEMORY[0x1E0CA3D00];
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3DC8], *v8);
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CA3DB8], Value);
        if (CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentUserAgent")))
        {
          v9 = (const void *)*MEMORY[0x1E0CA3EB0];
          v10 = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentUserAgent"));
          CFDictionaryAddValue(a2, v9, v10);
        }
        if (CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentDownloadParameters")))
        {
          v11 = (const void *)*MEMORY[0x1E0CA3D30];
          v12 = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentDownloadParameters"));
          CFDictionaryAddValue(a2, v11, v12);
        }
        if (CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentDSID")))
        {
          v13 = (const void *)*MEMORY[0x1E0CA3D58];
          v14 = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentDSID"));
          CFDictionaryAddValue(a2, v13, v14);
        }
        if (CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentPurchasedMediaKind")))
        {
          v15 = (const void *)*MEMORY[0x1E0CA3E30];
          v16 = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("assetOption_iTunesStoreContentPurchasedMediaKind"));
          CFDictionaryAddValue(a2, v15, v16);
        }
      }
    }
  }
}

uint64_t itemairplay_ensureCustomURLLoader()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t CMBaseObject;
  unsigned int (*v3)(uint64_t, const __CFString *, _QWORD, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 640))
    return 0;
  v1 = DerivedStorage;
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v3 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v3 && !v3(CMBaseObject, CFSTR("assetProperty_CustomURLLoader"), *MEMORY[0x1E0C9AE00], v1 + 640))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t pap_EndpointSupportsSecureStop(const void *a1)
{
  CFTypeRef v1;
  uint64_t v2;

  if (a1)
    v1 = CFRetain(a1);
  else
    v1 = 0;
  v2 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 272);
  CFRelease(v1);
  return v2;
}

CMTime *itemairplay_getCurrentInterstitialLiveHorizon@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t UpTimeNanoseconds;
  CMTime v6;
  CMTime rhs;

  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  CMTimeMake(&rhs, UpTimeNanoseconds - *(_QWORD *)(a1 + 568), 1000000000);
  v6 = *(CMTime *)(a1 + 544);
  return CMTimeAdd(a2, &v6, &rhs);
}

__CFDictionary *pap_createErrorPayload(int a1, int a2)
{
  const __CFAllocator *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  int valuePtr;

  valuePtr = a1;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v4)
    return 0;
  v5 = v4;
  Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, CFSTR("Result"), v5);
    if (a2)
      CFDictionarySetValue(v7, CFSTR("ResultIsFatal"), (const void *)*MEMORY[0x1E0C9AE50]);
  }
  CFRelease(v5);
  return v7;
}

const void *itemairplay_copyiTunesStoreContentRentalID()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *Value;
  const void *v3;

  v0 = (const __CFDictionary *)itemairplay_copyiTunesStoreContentInfo();
  if (!v0)
    return 0;
  v1 = v0;
  Value = CFDictionaryGetValue(v0, CFSTR("assetOption_iTunesStoreContentRentalID"));
  v3 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v1);
  return v3;
}

CFPropertyListRef __itemairplay_doesHLSAssetHaveACompletelyDownloadedAlternate_block_invoke(uint64_t a1)
{
  CFPropertyListRef result;

  result = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFPropertyListRef *)(*(_QWORD *)(a1 + 40) + 352), 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __pap_playbackSessionPlayCompletion_block_invoke(uint64_t a1)
{
  CFTypeRef *v2;

  itemairplay_playMediaCompletionHandler(*(void **)(*(_QWORD *)(a1 + 32) + 8), **(const void ***)(a1 + 32), *(_DWORD *)(a1 + 40));
  v2 = *(CFTypeRef **)(a1 + 32);
  if (v2[1])
  {
    CFRelease(v2[1]);
    v2 = *(CFTypeRef **)(a1 + 32);
  }
  if (*v2)
  {
    CFRelease(*v2);
    v2 = *(CFTypeRef **)(a1 + 32);
  }
  free(v2);
}

void itemairplay_playMediaCompletionHandler(void *a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  unsigned int v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  _QWORD block[8];
  os_log_type_t type;
  int v13;
  CFTypeRef cf;
  CMTime v15;
  CMTime v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = pap_AirPlayState(a2);
  if (v8 <= 0xF && ((1 << v8) & 0xD000) != 0 && !*(_BYTE *)v7)
  {
    if (a3)
    {
      pap_invalidateEndpointPlaybackSession(a2);
      playerairplay_resetAirPlayVideoState(a2);
      if (*(_BYTE *)(DerivedStorage + 735) != 4)
      {
        playerairplay_postPlayerNotification(a2, CFSTR("IsAirPlayVideoActiveDidChange"), 0);
        playerairplay_updateAirPlayVideoIsActiveProperty(a2);
      }
    }
    else
    {
      cf = 0;
      if (dword_1EE2A2FA0)
      {
        v13 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      pap_setAirPlayState(a2, 16);
      playerairplay_setActionAtEndOnAirPlayController(a2);
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 20, (CFMutableDictionaryRef *)&cf);
      if (*(_BYTE *)(v7 + 448))
      {
        *(_BYTE *)(v7 + 356) = 1;
      }
      else
      {
        playerairplay_postPlayerRateDidChangeNotification(a2, (uint64_t)cf);
        playerairplay_setRateAirPlay(a2, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], cf);
      }
      FigPlayerAirPlayRoute_SuspendAirPlayScreen(*(_QWORD *)(v7 + 224));
      if (cf)
        CFRelease(cf);
    }
    if (a1)
    {
      FigReadWriteLockLockForRead();
      if (!*(_BYTE *)(DerivedStorage + 72))
      {
        if (a3)
        {
          CFRetain(a2);
          CFRetain(a1);
          v10 = *(NSObject **)(v7 + 104);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __itemairplay_playMediaCompletionHandler_block_invoke;
          block[3] = &__block_descriptor_64_e5_v8__0l;
          block[4] = v7;
          block[5] = DerivedStorage;
          block[6] = a2;
          block[7] = a1;
          dispatch_async(v10, block);
          itemairplay_postFailNotificationWithError(a1, a3);
        }
        else
        {
          itemairplay_postItemNotification(a1, CFSTR("TimeJumped"), 0);
          *(_WORD *)(DerivedStorage + 738) = 257;
          itemairplay_controlPlaybackActivityTimer((uint64_t)a1, 1);
          v16 = *(CMTime *)(DerivedStorage + 448);
          v15 = *(CMTime *)(DerivedStorage + 472);
          playerairplay_setPlaybackEndTimes(a2, (CFMutableDictionaryRef)a1, &v16, 1, &v15, 1);
          playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a2);
        }
      }
      FigReadWriteLockUnlockForRead();
    }
  }
}

void playerairplay_setActionAtEndOnAirPlayController(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  int v4;
  CFNumberRef v5;
  CFTypeRef v6;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = pap_AirPlayState(a1);
  if (v3 && v3 != 10 && !playerairplay_deferMediaControlPlaylistForInterstitials(a1))
  {
    if (FigCFEqual())
    {
      valuePtr = 0;
    }
    else
    {
      if (FigCFEqual())
      {
        v4 = 1;
      }
      else if (FigCFEqual())
      {
        if (*(_BYTE *)(DerivedStorage + 252) == 1)
          v4 = 3;
        else
          v4 = 0;
      }
      else
      {
        v4 = 2;
      }
      valuePtr = v4;
    }
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (a1)
    {
      v6 = CFRetain(a1);
      pap_playbackSessionSetProxiedProperty(v6, a1, (const void *)*MEMORY[0x1E0CA3FA8], v5, 0, 0);
      if (v6)
        CFRelease(v6);
    }
    else
    {
      pap_playbackSessionSetProxiedProperty(0, 0, (const void *)*MEMORY[0x1E0CA3FA8], v5, 0, 0);
    }
    if (v5)
      CFRelease(v5);
  }
}

void __itemairplay_playMediaCompletionHandler_block_invoke(uint64_t a1)
{
  if (!**(_BYTE **)(a1 + 32))
    CMTimebaseSetRate(*(CMTimebaseRef *)(*(_QWORD *)(a1 + 40) + 576), 0.0);
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

void playerairplay_setPlaybackEndTimes(CFTypeRef cf, CFMutableDictionaryRef ProxiedPropertyParams, CMTime *a3, int a4, CMTime *a5, int a6)
{
  CFTypeRef v12;
  const __CFAllocator **v13;
  const __CFAllocator *v14;
  CFDictionaryRef v15;
  CFDictionaryRef v16;
  CFMutableDictionaryRef v17;
  const __CFAllocator *v18;
  CFDictionaryRef v19;
  CFDictionaryRef v20;
  CMTime v21;

  if (cf)
    v12 = CFRetain(cf);
  else
    v12 = 0;
  v13 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (a4)
  {
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v21 = *a3;
    v15 = CMTimeCopyAsDictionary(&v21, v14);
    if (v15)
    {
      v16 = v15;
      v17 = ProxiedPropertyParams ? itemairplay_createProxiedPropertyParams() : 0;
      pap_playbackSessionSetProxiedProperty(v12, cf, (const void *)*MEMORY[0x1E0CA3FD8], v16, v17, 1);
      CFRelease(v16);
      if (v17)
        CFRelease(v17);
    }
  }
  if (a6)
  {
    v18 = *v13;
    v21 = *a5;
    v19 = CMTimeCopyAsDictionary(&v21, v18);
    if (v19)
    {
      v20 = v19;
      if (ProxiedPropertyParams)
        ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
      pap_playbackSessionSetProxiedProperty(v12, cf, (const void *)*MEMORY[0x1E0CA4018], v20, ProxiedPropertyParams, 1);
      CFRelease(v20);
      if (ProxiedPropertyParams)
        CFRelease(ProxiedPropertyParams);
    }
  }
  if (v12)
    CFRelease(v12);
}

void pap_playbackSessionSetProxiedProperty(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6)
{
  uint64_t DerivedStorage;
  _QWORD v13[10];

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __pap_playbackSessionSetProxiedProperty_block_invoke;
    v13[3] = &__block_descriptor_80_e5_v8__0l;
    v13[4] = a5;
    v13[5] = a1;
    v13[6] = a2;
    v13[7] = DerivedStorage;
    v13[8] = a3;
    v13[9] = a4;
    pap_DispatchHelper(a1, a2, (uint64_t)v13, a6, 0, a4, a3, a5);
  }
}

void __pap_playbackSessionSetProxiedProperty_block_invoke(_QWORD *a1)
{
  const void *v2;
  __CFDictionary *Mutable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, __CFDictionary *, uint64_t);

  v2 = (const void *)a1[4];
  if (v2)
    Mutable = (__CFDictionary *)CFRetain(v2);
  else
    Mutable = 0;
  if (pap_ShouldUseInterstitialQueuing())
  {
    if (!Mutable)
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3D70], (const void *)*MEMORY[0x1E0C9AE50]);
  }
  v4 = a1[8];
  v5 = *(_QWORD *)(a1[7] + 280);
  v6 = a1[9];
  v7 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 96);
  if (v7)
    v7(v5, v4, Mutable, v6);
  if (Mutable)
    CFRelease(Mutable);
}

CFMutableDictionaryRef itemairplay_createProxiedPropertyParams()
{
  CFMutableDictionaryRef Mutable;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  return Mutable;
}

CFMutableDictionaryRef itemairplay_createProxiedPropertyParamsWithItemUUID()
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  return Mutable;
}

void pap_playbackSessionInsertPlayQueueItemCompletion(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD block[5];

  v3 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionInsertPlayQueueItemCompletion_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(v3, block);
}

void __pap_playbackSessionInsertPlayQueueItemCompletion_block_invoke(uint64_t a1)
{
  CFTypeRef *v2;

  v2 = *(CFTypeRef **)(a1 + 32);
  if (v2[1])
  {
    CFRelease(v2[1]);
    v2 = *(CFTypeRef **)(a1 + 32);
  }
  if (*v2)
  {
    CFRelease(*v2);
    v2 = *(CFTypeRef **)(a1 + 32);
  }
  free(v2);
}

uint64_t playerairplay_startAirPlayWithItem(void *a1, const void *a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  CFTypeRef v7;
  _BOOL4 BooleanPropertySync;
  NSObject *v9;
  NSObject *v10;
  const void *v11;
  const void *v12;
  int v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v15;
  os_log_type_t type;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = result;
    result = pap_AirPlayState(a1);
    if ((result - 14) >= 3)
    {
      result = CMBaseObjectGetDerivedStorage();
      if (result)
      {
        v6 = (_BYTE *)result;
        FigReadWriteLockLockForRead();
        if (v6[72])
          return FigReadWriteLockUnlockForRead();
        v6[744] = 0;
        if (v6[736] <= 1u)
        {
          if (dword_1EE2A2FA0 >= 4)
          {
            v17 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          return FigReadWriteLockUnlockForRead();
        }
        if (pap_ensureEndpointPlaybackSession(a1))
          return FigReadWriteLockUnlockForRead();
        if (a1)
          v7 = CFRetain(a1);
        else
          v7 = 0;
        BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v7, (uint64_t)a1, *MEMORY[0x1E0CA3F98]);
        if (*(float *)(v5 + 48) != 0.0 || !*(_BYTE *)(v5 + 42) || BooleanPropertySync)
        {
          if (!itemairplay_assureItemForAirPlay())
          {
            if (dword_1EE2A2FA0)
            {
              v17 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            pap_setAirPlayState(a1, 14);
            playerairplay_updateAirPlayVideoIsActiveProperty(a1);
            v15 = 0;
            FigCFDictionaryGetBooleanIfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            v11 = (const void *)itemairplay_createCPEProtectorIfAvailable((uint64_t)a2, 1, &v15);
            if (v11)
            {
              v12 = v11;
              v13 = playerairplay_performAirPlayVodkaExchange(a1, a2, v11, v15);
              CFRelease(v12);
              if (v13)
              {
                playerairplay_resetAirPlayVideoState(a1);
                playerairplay_updateAirPlayVideoIsActiveProperty(a1);
              }
            }
            else
            {
              v6[735] = 1;
            }
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
            if (!v7)
              return FigReadWriteLockUnlockForRead();
LABEL_24:
            CFRelease(v7);
            return FigReadWriteLockUnlockForRead();
          }
          if (dword_1EE2A2FA0)
          {
            v17 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          pap_setAirPlayState(a1, 11);
        }
        if (!v7)
          return FigReadWriteLockUnlockForRead();
        goto LABEL_24;
      }
    }
  }
  return result;
}

uint64_t pap_ensureEndpointPlaybackSession(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, void **);
  uint64_t v11;
  NSObject *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t (*v18)(void *, _QWORD, _QWORD, const void *);
  uint64_t v19;
  NSObject *v21;
  void *value[27];

  value[25] = *(void **)MEMORY[0x1E0C80C00];
  value[0] = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 280))
    return 0;
  v4 = DerivedStorage;
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
  {
    v5 = (const void *)pap_copyPrimaryPlayer();
    v6 = CMBaseObjectGetDerivedStorage();
    if (v5)
    {
      v7 = v6;
      v8 = *(const void **)(v6 + 280);
      if (v8)
        v3 = (uint64_t)CFRetain(v8);
      else
        v3 = 0;
      value[0] = (void *)v3;
      if (dword_1EE2A2FA0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!v3)
        goto LABEL_33;
      CFBagAddValue(*(CFMutableBagRef *)(v7 + 288), (const void *)v3);
      v14 = 0;
LABEL_17:
      *(_QWORD *)(v4 + 280) = v3;
      value[0] = 0;
      *(_BYTE *)(v4 + 248) = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)a1, (uint64_t)a1, *MEMORY[0x1E0CA3F90]);
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v4 + 440), (CFDictionaryApplierFunction)playerairplay_applyCachedPropertiesOnBaoAndPlaybackSession, a1);
      v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(v4 + 448))
        v15 = (uint64_t *)MEMORY[0x1E0C9AE40];
      pap_PlaybackSessionSetPropertySync((uint64_t)a1, (uint64_t)a1, *MEMORY[0x1E0CA3F68], *v15);
      if (*(_BYTE *)(v4 + 448))
        playerairplay_createAndResumeVideoSyncTimer();
      v3 = 0;
      if (!v14)
        goto LABEL_33;
      goto LABEL_32;
    }
    if (dword_1EE2A2FA0)
    {
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v3 = 0;
LABEL_42:
    v5 = 0;
    goto LABEL_33;
  }
  v9 = *(_QWORD *)(v4 + 256);
  v10 = *(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v10)
  {
    v11 = v10(v9, value);
    if ((_DWORD)v11)
    {
      v3 = v11;
      goto LABEL_42;
    }
    if (dword_1EE2A2FA0)
    {
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v16 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (!v16)
    {
      v5 = 0;
      v3 = 4294954510;
      goto LABEL_33;
    }
    v14 = (const void *)v16;
    v17 = value[0];
    v18 = *(uint64_t (**)(void *, _QWORD, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 120);
    if (v18)
    {
      v19 = v18(v17, pap_handlePlaybackSessionEvent, 0, v14);
      if ((_DWORD)v19)
      {
        v3 = v19;
      }
      else
      {
        if (value[0])
        {
          CFBagAddValue(*(CFMutableBagRef *)(v4 + 288), value[0]);
          v5 = 0;
          v3 = (uint64_t)value[0];
          if (value[0])
            goto LABEL_17;
LABEL_32:
          CFRelease(v14);
          goto LABEL_33;
        }
        v3 = 0;
      }
      v5 = 0;
      goto LABEL_32;
    }
    v5 = 0;
    v3 = 4294954514;
    goto LABEL_32;
  }
  v5 = 0;
  v3 = 4294954514;
LABEL_33:
  if (value[0])
    CFRelease(value[0]);
  if (v5)
    CFRelease(v5);
  return v3;
}

uint64_t playerairplay_performAirPlayVodkaExchange(const void *a1, const void *a2, const void *a3, int a4)
{
  void *v8;
  uint64_t DerivedStorage;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(const void *, uint64_t, uint64_t, _QWORD *);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(uint64_t);
  const void *v21;
  CFTypeRef v22;
  uint64_t v23;
  const void *v24;
  char v26;
  _QWORD v27[9];
  char v28;

  v8 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage
    || (v10 = (_QWORD *)DerivedStorage, !*(_QWORD *)(DerivedStorage + 280))
    || (v11 = CMBaseObjectGetDerivedStorage()) == 0)
  {
    objc_autoreleasePoolPop(v8);
    return 0;
  }
  v12 = v11;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v12 + 72))
    goto LABEL_31;
  CFRetain(a1);
  CFRetain(a2);
  CFRetain(a3);
  *(_QWORD *)(v12 + 768) = FigGetUpTimeNanoseconds();
  v13 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v10[30], CFSTR("RouteInfo"), v10[35], CFSTR("EndpointPlaybackSession"), *(_QWORD *)(v12 + 80), CFSTR("MediaControlUUID"), 0);
  v14 = v10[10];
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __playerairplay_performAirPlayVodkaExchange_block_invoke;
  v27[3] = &__block_descriptor_73_e25_v16__0____CFDictionary__8l;
  v27[4] = v10;
  v27[5] = v12;
  v28 = a4;
  v27[6] = a2;
  v27[7] = a1;
  v27[8] = a3;
  v15 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (!*v15 || (v16 = (uint64_t (*)(const void *, uint64_t, uint64_t, _QWORD *))v15[11]) == 0)
  {
    v17 = 4294954514;
    goto LABEL_17;
  }
  v17 = v16(a3, v13, v14, v27);
  if ((_DWORD)v17)
  {
LABEL_17:
    if (a4 && pap_isLocalFileURL(*(const __CFURL **)(v12 + 88), 0))
    {
      v23 = itemairplay_createCPEProtectorIfAvailable((uint64_t)a2, 0, &v26);
      if (!v23)
      {
        *(_BYTE *)(v12 + 735) = 1;
        playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
        if (!a3)
          goto LABEL_23;
        goto LABEL_22;
      }
      v24 = (const void *)v23;
      v17 = playerairplay_performAirPlayVodkaExchange(a1, a2, v23, 0);
      CFRelease(v24);
    }
    if (!a3)
    {
LABEL_23:
      if (a2)
        CFRelease(a2);
      if (a1)
        CFRelease(a1);
      goto LABEL_32;
    }
LABEL_22:
    CFRelease(a3);
    goto LABEL_23;
  }
  v18 = *(_QWORD *)(v12 + 664);
  if (v18)
  {
    v19 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v19)
    {
      v20 = (void (*)(uint64_t))v19[12];
      if (v20)
        v20(v18);
    }
    v21 = *(const void **)(v12 + 664);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v12 + 664) = 0;
    }
  }
  if (a3)
    v22 = CFRetain(a3);
  else
    v22 = 0;
  *(_QWORD *)(v12 + 664) = v22;
  *(_BYTE *)(v12 + 735) = 2;
  itemairplay_controlPlaybackActivityTimer((uint64_t)a2, 3);
LABEL_31:
  v17 = 0;
LABEL_32:
  objc_autoreleasePoolPop(v8);
  FigReadWriteLockUnlockForRead();
  return v17;
}

void pap_handlePlaybackSessionEvent(CFTypeRef cf, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  const void *v5;
  uint64_t DerivedStorage;
  const void *v8;
  const void *Value;
  const void *v10;
  uint64_t v11;
  const void *v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  const __CFDictionary *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  _BYTE *v25;
  _BYTE *v26;
  NSObject *v27;
  uint64_t v28;
  _QWORD block[7];
  CMTime lhs;
  CMTime type;
  CMTime time2;
  CFTypeRef cfa;
  CMTime v34;
  uint64_t v35;
  __int16 v36;
  const __CFDictionary *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  const char *v41;
  CMTime v42[5];
  uint64_t v43;

  v5 = 0;
  v43 = *MEMORY[0x1E0C80C00];
  if (a2 && a4)
  {
    if (cf)
      CFRetain(cf);
    v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360))
        goto LABEL_40;
      if (*(_BYTE *)(DerivedStorage + 249))
      {
        if (CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C68]) != (const void *)*MEMORY[0x1E0C9AE50])
          goto LABEL_40;
      }
      else
      {
        v8 = (const void *)*MEMORY[0x1E0CA3EA8];
        Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
        if (Value
          || (v20 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3DB0])) != 0
          && (Value = CFDictionaryGetValue(v20, v8)) != 0)
        {
          v10 = playqueue_copyItemForUUID(*(_QWORD *)(DerivedStorage + 32), (uint64_t)Value);
          if (v10)
          {
            CFRelease(v10);
            goto LABEL_40;
          }
        }
        v11 = pap_CopyInterstitialPlayer();
        if (!v11
          || (v12 = (const void *)v11,
              v13 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 232) - 18,
              CFRelease(v12),
              v13 <= 0xFFFFFFFD))
        {
          CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C78]);
          if (!FigCFEqual())
            goto LABEL_40;
          CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C70]);
          if (!FigCFEqual())
            goto LABEL_40;
        }
        if (!playerairplay_interstitialEventActive())
        {
          CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C78]);
          if (!FigCFEqual())
            goto LABEL_40;
          CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C70]);
          if (!FigCFEqual())
            goto LABEL_40;
          v21 = (const void *)pap_CopyInterstitialPlayer();
          v22 = CMBaseObjectGetDerivedStorage();
          if (!v21)
            goto LABEL_40;
          v23 = v22;
          if (playqueue_getNumItemsInClientPlayQueue(*(_QWORD *)(DerivedStorage + 32))
            && !playqueue_getNumItemsInClientPlayQueue(*(_QWORD *)(v23 + 32))
            && (cfa = 0,
                playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(DerivedStorage + 32), (unint64_t)&cfa, 0), cfa))
          {
            v28 = CMBaseObjectGetDerivedStorage();
            memset(v42, 0, 24);
            pap_expectedEndTime((uint64_t)v42);
            memset(&v34, 0, sizeof(v34));
            CMTimebaseGetTime(&v34, *(CMTimebaseRef *)(v28 + 576));
            if ((v42[0].flags & 1) != 0)
            {
              CMTimeMake(&type, 5, 1);
              lhs = v42[0];
              CMTimeSubtract(&time2, &lhs, &type);
              lhs = v34;
              v24 = CMTimeCompare(&lhs, &time2) < 1;
            }
            else
            {
              v24 = 0;
            }
            CFRelease(cfa);
          }
          else
          {
            v24 = 0;
          }
          CFRelease(v21);
          if (!v24)
          {
LABEL_40:
            v25 = (_BYTE *)CMBaseObjectGetDerivedStorage();
            if (!*v25)
            {
              v26 = v25;
              CFRetain(v5);
              CFRetain(a2);
              if (cf)
                CFRetain(cf);
              v27 = *((_QWORD *)v26 + 13);
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 3221225472;
              block[2] = __pap_handlePlaybackSessionEvent_block_invoke;
              block[3] = &__block_descriptor_56_e5_v8__0l;
              block[4] = v5;
              block[5] = cf;
              block[6] = a2;
              dispatch_async(v27, block);
            }
            goto LABEL_44;
          }
        }
      }
      v14 = pap_CopyInterstitialPlayer();
      if (dword_1EE2A2FA0)
      {
        LODWORD(time2.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v16 = time2.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if (v17)
        {
          v18 = CMBaseObjectGetDerivedStorage() + 450;
          if (v14)
            v19 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          else
            v19 = "";
          LODWORD(v34.value) = 136316418;
          *(CMTimeValue *)((char *)&v34.value + 4) = (CMTimeValue)"pap_handlePlaybackSessionEvent";
          LOWORD(v34.flags) = 2048;
          *(_QWORD *)((char *)&v34.flags + 2) = v5;
          HIWORD(v34.epoch) = 2082;
          v35 = v18;
          v36 = 2048;
          v37 = a2;
          v38 = 2048;
          v39 = v14;
          v40 = 2082;
          v41 = v19;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRelease(v5);
      v5 = (const void *)v14;
      if (v14)
        goto LABEL_40;
    }
  }
LABEL_44:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
}

void playerairplay_applyCachedPropertiesOnBaoAndPlaybackSession(const void *a1, uint64_t a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (CFEqual(a1, CFSTR("AudioMode")))
    playerairplay_setAndCacheAudioMode(a3, a2, 0);
}

uint64_t pap_PlaybackSessionSetPropertySync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  _QWORD v14[8];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  if (!a1)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_5;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __pap_PlaybackSessionSetPropertySync_block_invoke;
  v14[3] = &unk_1E2F990B8;
  v14[4] = &v15;
  v14[5] = DerivedStorage;
  v14[6] = a3;
  v14[7] = a4;
  if (a2 == a1)
  {
    v11 = __pap_PlaybackSessionSetPropertySync_block_invoke(v14);
LABEL_5:
    v10 = v11;
    *((_DWORD *)v16 + 6) = v11;
    goto LABEL_6;
  }
  v9 = *(NSObject **)(DerivedStorage + 104);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __pap_PlaybackSessionSetPropertySync_block_invoke_2;
  v13[3] = &unk_1E2F990E0;
  v13[4] = v14;
  v13[5] = &v15;
  dispatch_sync(v9, v13);
  v10 = *((unsigned int *)v16 + 6);
LABEL_6:
  _Block_object_dispose(&v15, 8);
  return v10;
}

void sub_192C75240(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void playerairplay_createAndResumeVideoSyncTimer()
{
  uint64_t DerivedStorage;
  dispatch_source_t v1;
  NSObject *v2;
  void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 104));
  *(_QWORD *)(DerivedStorage + 488) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    dispatch_set_context(v2, v3);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(DerivedStorage + 488), (dispatch_function_t)FigCFRelease_3);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 488), (dispatch_function_t)pap_videoSyncTimerEventHandler);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 488), 0, 0x12A05F200uLL, 0x4C4B40uLL);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 488));
  }
  else
  {
    FigSignalErrorAt();
  }
}

void __pap_handlePlaybackSessionEvent_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (pap_PlaybackSessionIsActive(*(CFTypeRef *)(a1 + 32), *(_QWORD *)(a1 + 40)))
    playerairplay_mediaControlServerEventHandler(*(const void **)(a1 + 32), *(const __CFDictionary **)(a1 + 48));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

uint64_t pap_PlaybackSessionIsActive(CFTypeRef a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  uint64_t v5;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*DerivedStorage)
    {
      return 0;
    }
    else
    {
      if (a1)
        a1 = CFRetain(a1);
      v5 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)v5)
        a2 = 0;
      else
        a2 = *(_QWORD *)(v5 + 280) == a2;
      CFRelease(a1);
    }
  }
  return a2;
}

void playerairplay_mediaControlServerEventHandler(const void *a1, const __CFDictionary *a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v5;
  int v6;
  void *Value;
  const void *v8;
  const __CFDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  CFTypeID v15;
  int v16;
  int v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFDictionary *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  CFTypeRef v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  int v27;
  CFURLRef v28;
  uint64_t v29;
  const void *v30;
  void *v31;
  char v32;
  const __CFString *v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  const char *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  __int128 *v42;
  __int128 v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, const __CFString *, uint64_t, CMTime *);
  int v51;
  CMTimeValue v52;
  uint64_t (*v53)(CMTimeValue, __CFString *, uint64_t, CMTime *);
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t CMBaseObject;
  void (*v59)(uint64_t, const __CFString *, uint64_t, CMTime *);
  const void *DataValue;
  const void *v61;
  const void *v62;
  uint64_t v63;
  _BYTE *v64;
  __CFString **v65;
  char v66;
  const void *v67;
  uint64_t v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, const __CFString *, uint64_t, uint64_t);
  int v73;
  uint64_t v74;
  const void *v75;
  _QWORD *v76;
  _QWORD *v77;
  NSObject *v78;
  _QWORD *v79;
  _QWORD *v80;
  CFTypeRef v81;
  NSObject *v82;
  unsigned int v83;
  unsigned int v84;
  const char *v85;
  uint64_t v86;
  const __CFDictionary *v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  OpaqueCMTimebase *v92;
  NSObject *v93;
  unsigned int v94;
  unsigned int v95;
  const char *v96;
  uint64_t v97;
  __CFString **v98;
  NSObject *v99;
  unsigned int v100;
  unsigned int v101;
  const char *v102;
  const void *v103;
  CMTimeValue v104;
  float v105;
  const __CFDictionary *v106;
  const void *v107;
  const void *v108;
  const void *v109;
  NSObject *v110;
  unsigned int v111;
  unsigned int v112;
  const char *v113;
  const char *v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  const void *v118;
  const void *ProxiedPropertyParamsWithItemUUID;
  CFTypeRef v120;
  NSObject *v121;
  const void *v122;
  uint64_t v123;
  void *v124;
  const void *v125;
  const __CFDictionary *v126;
  const void *v127;
  uint64_t v128;
  const __CFDictionary *v129;
  const __CFDictionary *v130;
  const __CFDictionary *v131;
  const void *v132;
  uint64_t v133;
  uint64_t v134;
  const __CFDictionary *v135;
  const __CFDictionary *v136;
  const void *v137;
  NSObject *v138;
  const void *v139;
  const void *v140;
  uint64_t v141;
  uint64_t v142;
  const void *v143;
  const void *v144;
  const __CFString *v145;
  char v146;
  CFTypeRef v147;
  uint64_t v148;
  const void *v149;
  const __CFURL *v150;
  const void *v151;
  CMTime v152;
  CMTime v153;
  CMTime v154;
  CMTime time2;
  CMTime v156;
  CMTime time;
  CMTime time1;
  os_log_type_t v159;
  os_log_type_t v160[8];
  os_log_type_t type[8];
  CMTime cf;
  const char *v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  int v167;
  CMTime block;
  const char *v169;
  _BYTE v170[24];
  uint64_t v171;
  const void *v172;
  CFTypeRef v173;
  CFTypeRef v174;
  const void *v175;
  char v176;
  os_log_type_t v177;
  CMTime valuePtr[5];
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return;
  v5 = DerivedStorage;
  v6 = pap_AirPlayState(a1);
  if (!v6)
    return;
  if (v6 == 10)
    return;
  Value = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C80]);
  v8 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C78]);
  if (CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C58]))
  {
    if (!FigCFEqual())
      return;
  }
  if (CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C50])
    && !FigCFEqual()
    && !FigCFEqual()
    && !FigCFEqual())
  {
    FigCFEqual();
  }
  v9 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C60]);
  v10 = CMBaseObjectGetDerivedStorage();
  if (v9)
  {
    v11 = v10;
    CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E0CA3C48]);
    v12 = CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E0CA3C40]);
    cf.value = 0;
    v13 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
    v14 = *(_QWORD *)(v11 + 32);
    if (!v13)
    {
      playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(v14, 0, (unint64_t)&cf);
      if (!v12)
        goto LABEL_23;
LABEL_18:
      v15 = CFGetTypeID(v12);
      if (v15 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr[0].value) = 0;
        CFNumberGetValue((CFNumberRef)v12, kCFNumberSInt32Type, valuePtr);
        v16 = FigCFEqual();
        v17 = valuePtr[0].value;
        if (v16 && LODWORD(valuePtr[0].value) == -1009)
        {
          v17 = -12929;
          LODWORD(valuePtr[0].value) = -12929;
        }
        itemairplay_postFailNotificationWithError((const void *)cf.value, v17);
        goto LABEL_25;
      }
LABEL_23:
      if (dword_1EE2A2FA0)
      {
        LODWORD(v156.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_25:
      if (cf.value)
        CFRelease((CFTypeRef)cf.value);
      goto LABEL_27;
    }
    cf.value = (CMTimeValue)playqueue_copyItemForUUID(v14, (uint64_t)v13);
    if (cf.value)
    {
      if (!v12)
        goto LABEL_23;
      goto LABEL_18;
    }
    if (dword_1EE2A2FA0)
    {
      LODWORD(v156.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v121 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_27:
  if (!Value)
    goto LABEL_167;
  if (FigCFEqual())
  {
    v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4090]);
    *(_QWORD *)type = 0;
    v20 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)v160 = 0;
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v20 + 32), 0, (unint64_t)type);
    v21 = pap_AirPlayState(a1);
    v22 = (v21 & 0xFFFFFFFE) == 0xE || v21 == 16;
    v23 = *(CFTypeRef *)type;
    if (!v22 || !*(_QWORD *)type)
    {
LABEL_163:
      if (v23)
        goto LABEL_164;
LABEL_165:
      Value = 0;
      goto LABEL_166;
    }
    v24 = CMBaseObjectGetDerivedStorage();
    if (!v24)
    {
LABEL_162:
      v23 = *(CFTypeRef *)type;
      goto LABEL_163;
    }
    v25 = v24;
    FigReadWriteLockLockForRead();
    if (*(_BYTE *)(v25 + 72))
    {
      v26 = v8;
      v27 = FigSignalErrorAt();
      v28 = 0;
LABEL_149:
      FigReadWriteLockUnlockForRead();
      if (v27)
      {
        LODWORD(v156.value) = 0;
        v159 = OS_LOG_TYPE_DEFAULT;
        v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v83 = v156.value;
        if (os_log_type_enabled(v82, v159))
          v84 = v83;
        else
          v84 = v83 & 0xFFFFFFFE;
        if (v84)
        {
          if (a1)
            v85 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          else
            v85 = "";
          LODWORD(cf.value) = 136316162;
          *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"playerairplay_mediaControlHandleTypeUnhandledURLRequest";
          LOWORD(cf.flags) = 2048;
          *(_QWORD *)((char *)&cf.flags + 2) = a1;
          HIWORD(cf.epoch) = 2082;
          v163 = v85;
          v164 = 2048;
          v165 = *(_QWORD *)v160;
          v166 = 1024;
          v167 = v27;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v8 = v26;
      if (v28)
        CFRelease(v28);
      goto LABEL_162;
    }
    v159 = OS_LOG_TYPE_DEFAULT;
    v32 = pap_EndpointSupportsSecureStop(a1);
    v33 = (const __CFString *)CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CA2EE0]);
    v147 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CA2EC8]);
    if (!v33)
    {
      v27 = FigSignalErrorAt();
      v28 = 0;
      goto LABEL_148;
    }
    v148 = *MEMORY[0x1E0C9AE00];
    v28 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v33, 0);
    if (!v28 || (v145 = v33, v146 = v32, !FigCFDictionaryGetInt64IfPresent()))
    {
LABEL_288:
      v73 = FigSignalErrorAt();
      goto LABEL_289;
    }
    v150 = v28;
    if (dword_1EE2A2FA0)
    {
      LODWORD(cf.value) = 0;
      LOBYTE(v156.value) = 0;
      v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v35 = cf.value;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        v36 = v35;
      else
        v36 = v35 & 0xFFFFFFFE;
      if (v36)
      {
        if (a1)
          v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        else
          v37 = "";
        LODWORD(block.value) = 136315906;
        *(CMTimeValue *)((char *)&block.value + 4) = (CMTimeValue)"playerairplay_mediaControlHandleTypeUnhandledURLRequest";
        LOWORD(block.flags) = 2048;
        *(_QWORD *)((char *)&block.flags + 2) = a1;
        HIWORD(block.epoch) = 2082;
        v169 = v37;
        *(_WORD *)v170 = 2048;
        *(_QWORD *)&v170[2] = *(_QWORD *)v160;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v149 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CA2EB0]);
    if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)v19, (const void *)*MEMORY[0x1E0CA2EB8], &v159)
      && v159 == OS_LOG_TYPE_DEFAULT)
    {
      goto LABEL_123;
    }
    v47 = CMBaseObjectGetDerivedStorage();
    v48 = v47;
    cf.value = 0;
    v156.value = 0;
    if (!*(_BYTE *)(v47 + 848))
    {
LABEL_80:
      if (*(_QWORD *)(v48 + 840))
        goto LABEL_103;
      valuePtr[0].value = 0;
      v54 = CMBaseObjectGetDerivedStorage();
      block.value = 0;
      *(_QWORD *)(v48 + 840) = 0;
      FigCPECryptorGetClassID();
      v55 = CMDerivedObjectCreate();
      if (!v55)
      {
        if (valuePtr[0].value)
        {
          v56 = CMBaseObjectGetDerivedStorage();
          v57 = FigSimpleMutexCreate();
          *(_QWORD *)(v56 + 8) = v57;
          if (v57)
          {
            FigCFWeakReferenceStore();
            CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v54 + 16));
            v59 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
            if (!v59)
            {
LABEL_88:
              v61 = (const void *)block.value;
              *(_QWORD *)(v48 + 840) = valuePtr[0].value;
              valuePtr[0].value = 0;
              if (v61)
                CFRelease(v61);
              goto LABEL_103;
            }
            v59(CMBaseObject, CFSTR("assetProperty_CreationOptionsDictionary"), v148, &block);
            if (block.value)
            {
              DataValue = (const void *)FigCFDictionaryGetDataValue();
              *(_QWORD *)(v56 + 80) = DataValue;
              if (DataValue)
                CFRetain(DataValue);
              goto LABEL_88;
            }
            *(_QWORD *)(v48 + 840) = valuePtr[0].value;
LABEL_103:
            v151 = v8;
            v66 = *(_BYTE *)(v48 + 848);
            v67 = *(const void **)(v48 + 856);
            v68 = CMBaseObjectGetDerivedStorage();
            MEMORY[0x19402EEEC](*(_QWORD *)(v68 + 8));
            *(_BYTE *)(v68 + 32) = v66;
            v69 = *(const void **)(v68 + 24);
            *(_QWORD *)(v68 + 24) = v67;
            if (v67)
              CFRetain(v67);
            if (v69)
              CFRelease(v69);
            MEMORY[0x19402EF04](*(_QWORD *)(v68 + 8));
            v27 = 0;
            v8 = v151;
            goto LABEL_108;
          }
        }
        v55 = FigSignalErrorAt();
      }
      v27 = v55;
      if (valuePtr[0].value)
        CFRelease((CFTypeRef)valuePtr[0].value);
      if (v27)
      {
LABEL_108:
        if (cf.value)
          CFRelease((CFTypeRef)cf.value);
        v28 = v150;
        if (v156.value)
          CFRelease((CFTypeRef)v156.value);
        if (v27)
          goto LABEL_148;
        if (v159)
        {
          v70 = CMBaseObjectGetDerivedStorage();
          if (PKDIsContentKeyBossEnabled())
          {
            if (!*(_QWORD *)(v70 + 880) && _os_feature_enabled_impl())
            {
              v71 = FigAssetGetCMBaseObject(*(_QWORD *)(v70 + 16));
              v72 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
              if (!v72)
              {
                v27 = -12782;
                goto LABEL_148;
              }
              v73 = v72(v71, CFSTR("assetProperty_ContentKeyBoss"), v148, v70 + 880);
              if (v73)
                goto LABEL_289;
            }
          }
        }
        if (v147)
        {
          v74 = CMBaseObjectGetDerivedStorage();
          MEMORY[0x19402EEEC](*(_QWORD *)(v74 + 8));
          v75 = *(const void **)(v74 + 104);
          *(_QWORD *)(v74 + 104) = v147;
          CFRetain(v147);
          if (v75)
            CFRelease(v75);
          MEMORY[0x19402EF04](*(_QWORD *)(v74 + 8));
        }
LABEL_123:
        v73 = itemairplay_ensureCustomURLLoader();
        if (!v73)
        {
          if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 880) && v159)
          {
            v76 = malloc_type_calloc(1uLL, 0x20uLL, 0x10600402A5BA684uLL);
            if (v76)
            {
              v77 = v76;
              v76[1] = *(_QWORD *)v160;
              v76[3] = CFRetain(v28);
              *v77 = *(_QWORD *)(v25 + 656);
              *(_QWORD *)(v25 + 656) = v77;
              CFRetain(v145);
              if (v149)
                CFRetain(v149);
              if (*(_QWORD *)type)
                CFRetain(*(CFTypeRef *)type);
              if (a1)
                CFRetain(a1);
              v78 = *(NSObject **)(v20 + 80);
              block.value = MEMORY[0x1E0C809B0];
              *(_QWORD *)&block.timescale = 3221225472;
              block.epoch = (CMTimeEpoch)__playerairplay_mediaControlHandleTypeUnhandledURLRequest_block_invoke;
              v169 = (const char *)&__block_descriptor_96_e5_v8__0l;
              *(_QWORD *)v170 = v25;
              *(_QWORD *)&v170[8] = v145;
              *(_QWORD *)&v170[16] = *(_QWORD *)v160;
              v171 = v20;
              v172 = v149;
              v173 = *(CFTypeRef *)type;
              v174 = v77;
LABEL_147:
              v175 = a1;
              dispatch_async(v78, &block);
              v27 = 0;
LABEL_148:
              v26 = v8;
              goto LABEL_149;
            }
          }
          else
          {
            v79 = malloc_type_calloc(1uLL, 0x30uLL, 0x106004072379B5EuLL);
            if (v79)
            {
              v80 = v79;
              if (v19)
                v81 = CFRetain(v19);
              else
                v81 = 0;
              v80[2] = *(_QWORD *)v160;
              v80[3] = v81;
              *v80 = *(_QWORD *)(v25 + 648);
              *(_QWORD *)(v25 + 648) = v80;
              if (*(_QWORD *)type)
                CFRetain(*(CFTypeRef *)type);
              if (a1)
                CFRetain(a1);
              if (v149)
                CFRetain(v149);
              if (v19)
                CFRetain(v19);
              CFRetain(v28);
              v78 = *(NSObject **)(v20 + 80);
              block.value = MEMORY[0x1E0C809B0];
              *(_QWORD *)&block.timescale = 3221225472;
              block.epoch = (CMTimeEpoch)__playerairplay_mediaControlHandleTypeUnhandledURLRequest_block_invoke_2;
              v169 = (const char *)&__block_descriptor_98_e5_v8__0l;
              *(_QWORD *)v170 = v25;
              *(_QWORD *)&v170[8] = v20;
              *(_QWORD *)&v170[16] = v80;
              v171 = (uint64_t)v28;
              v176 = v146;
              v177 = v159;
              v172 = v149;
              v173 = v19;
              v174 = *(CFTypeRef *)type;
              goto LABEL_147;
            }
          }
          goto LABEL_288;
        }
LABEL_289:
        v27 = v73;
        goto LABEL_148;
      }
      goto LABEL_103;
    }
    v49 = FigAssetGetCMBaseObject(*(_QWORD *)(v47 + 16));
    v50 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v50)
    {
      v51 = v50(v49, CFSTR("assetProperty_DefaultContentKeySession"), v148, &cf);
      if (v51)
        goto LABEL_309;
      v52 = cf.value;
      v53 = *(uint64_t (**)(CMTimeValue, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v53)
      {
        v51 = v53(v52, CFSTR("kFigCKSPropertyKey_SecureStopManager"), v148, &v156);
        if (!v51)
        {
          v51 = FigAirPlaySecureStopRouterRegisterSecureStopManager(*(_QWORD *)(v48 + 856), v156.value);
          if (!v51)
            goto LABEL_80;
        }
LABEL_309:
        v27 = v51;
        goto LABEL_108;
      }
    }
    v27 = -12782;
    goto LABEL_108;
  }
  if (FigCFEqual())
  {
    v29 = CMBaseObjectGetDerivedStorage();
    Value = 0;
    if (!a1)
      goto LABEL_166;
    if (!*(_BYTE *)(v29 + 128))
      goto LABEL_166;
    CFRetain(a1);
    Value = (void *)CFRetain(a1);
    pap_playbackSessionGetProxiedProperty(Value, a1, 0, 0, (const void *)*MEMORY[0x1E0CA4048], 0, (uint64_t)pap_playbackSessionGetTimedMetadataCompletion, (uint64_t)a1);
    if (!Value)
      goto LABEL_166;
    goto LABEL_61;
  }
  if (FigCFEqual())
  {
    v30 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
    v31 = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v30);
    Value = v31;
    if (v31)
    {
      itemairplay_postItemNotification(v31, CFSTR("NewAccessLogEntry"), 0);
LABEL_61:
      v23 = Value;
LABEL_164:
      CFRelease(v23);
      goto LABEL_165;
    }
    goto LABEL_166;
  }
  if (FigCFEqual())
  {
    v38 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
    Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v38);
    if (Value)
    {
      v39 = CMBaseObjectGetDerivedStorage();
      if ((*(_BYTE *)(v39 + 532) & 1) != 0)
      {
        v40 = v39;
        v41 = v8;
        v42 = (__int128 *)(v39 + 520);
        MEMORY[0x19402EEEC](*(_QWORD *)(v39 + 344));
        v43 = *v42;
        v8 = v41;
        *(_OWORD *)&valuePtr[0].value = v43;
        valuePtr[0].epoch = *(_QWORD *)(v40 + 536);
        FigCFDictionarySetCMTime();
        MEMORY[0x19402EF04](*(_QWORD *)(v40 + 344));
        playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
      }
      itemairplay_postItemNotification(Value, CFSTR("TimeJumped"), 0);
      itemairplay_requestAirPlayPlaybackInfo(Value, 0, 1, 0);
      goto LABEL_61;
    }
    goto LABEL_166;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      playerairplay_mediaControlHandleTypeCurrentItemChanged(a1, a2);
      goto LABEL_165;
    }
    if (FigCFEqual())
    {
      v62 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
      Value = (void *)playqueue_copyItemForUUID(*((_QWORD *)v5 + 4), (uint64_t)v62);
      v63 = CMBaseObjectGetDerivedStorage();
      if (Value)
      {
        v64 = (_BYTE *)v63;
        if (playqueue_getIndexOfAirPlayItem(*((_QWORD *)v5 + 4), Value) != -1)
        {
          if (!v64[740])
          {
            v65 = kFigPlaybackItemNotification_FailedToBecomeReadyForPlayback;
            if (v64[737])
              v65 = kFigPlaybackItemNotification_DidPlayToTheEnd;
            itemairplay_postItemNotification(Value, *v65, 0);
          }
          if (!v64[72])
            v64[740] = 1;
        }
        goto LABEL_61;
      }
      goto LABEL_166;
    }
    if (FigCFEqual())
    {
      v115 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
      Value = (void *)playqueue_copyItemForUUID(*((_QWORD *)v5 + 4), (uint64_t)v115);
      v116 = CMBaseObjectGetDerivedStorage();
      if (!Value)
        goto LABEL_166;
      v117 = v116;
      FigReadWriteLockLockForRead();
      if (!*(_BYTE *)(v117 + 72))
        itemairplay_postItemNotification(Value, CFSTR("ItemWasRemovedFromPlayQueue"), 0);
      FigReadWriteLockUnlockForRead();
    }
    else
    {
      if (FigCFEqual())
      {
        ProxiedPropertyParamsWithItemUUID = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
        if (a1)
        {
          CFRetain(a1);
          v120 = CFRetain(a1);
        }
        else
        {
          v120 = 0;
        }
        if (ProxiedPropertyParamsWithItemUUID)
          ProxiedPropertyParamsWithItemUUID = itemairplay_createProxiedPropertyParamsWithItemUUID();
        pap_playbackSessionGetProxiedProperty(v120, a1, 0, 0, (const void *)*MEMORY[0x1E0CA4020], ProxiedPropertyParamsWithItemUUID, (uint64_t)pap_playbackSessionGetMediaSelectionCompletion, (uint64_t)a1);
        if (v120)
          CFRelease(v120);
        if (!ProxiedPropertyParamsWithItemUUID)
          goto LABEL_274;
        v118 = ProxiedPropertyParamsWithItemUUID;
LABEL_273:
        CFRelease(v118);
LABEL_274:
        Value = 0;
        goto LABEL_166;
      }
      if (FigCFEqual())
      {
        v122 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
        if (!v122)
          return;
        Value = (void *)playqueue_copyItemForUUID(*((_QWORD *)v5 + 4), (uint64_t)v122);
        if (!Value)
          goto LABEL_166;
        v123 = CMBaseObjectGetDerivedStorage();
        v124 = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3D60]);
        FigReadWriteLockLockForRead();
        if (!*(_BYTE *)(v123 + 72))
        {
          v125 = *(const void **)(v123 + 832);
          *(_QWORD *)(v123 + 832) = v124;
          if (v124)
            CFRetain(v124);
          if (v125)
            CFRelease(v125);
        }
        FigReadWriteLockUnlockForRead();
        if (v124)
          itemairplay_postTaggedRangeMetadataChangedNotificationIfNeeded(Value, v124);
      }
      else
      {
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            v131 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3BD8]);
            if (!v131)
              v131 = a2;
            v132 = CFDictionaryGetValue(v131, (const void *)*MEMORY[0x1E0CA3EA8]);
            if (!v132)
              return;
            Value = (void *)playqueue_copyItemForUUID(*((_QWORD *)v5 + 4), (uint64_t)v132);
            if (!Value)
              goto LABEL_166;
            v133 = CMBaseObjectGetDerivedStorage();
            if ((*(_BYTE *)(v133 + 532) & 1) == 0)
              goto LABEL_166;
            v134 = v133;
            memset(valuePtr, 0, 24);
            v135 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3E28]);
            CMTimeMakeFromDictionary(valuePtr, v135);
            memset(&block, 0, sizeof(block));
            v136 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3E90]);
            CMTimeMakeFromDictionary(&block, v136);
            if ((valuePtr[0].flags & 0x1D) == 1 && (block.flags & 0x1D) == 1)
            {
              cf = *(CMTime *)(v134 + 520);
              v156 = valuePtr[0];
              CMTimeSubtract(&v153, &cf, &v156);
              CMTimeAbsoluteValue(&v154, &v153);
              CMTimeMake(&v152, 1, 10000);
              if ((CMTimeCompare(&v154, &v152) & 0x80000000) == 0)
                goto LABEL_166;
            }
            else if (*((float *)v5 + 12) <= 0.0)
            {
              goto LABEL_166;
            }
            if (!v5[56])
            {
              if ((block.flags & 1) != 0)
              {
                cf = block;
                pap_UpdateAirPlayReachedTimeToPausePlayback(Value, &cf);
              }
              pap_HandleAirPlayReachedTimeToPausePlayback(a1, Value);
              itemairplay_requestAirPlayPlaybackInfo(Value, 0, 0, 0);
            }
            goto LABEL_166;
          }
          if (FigCFEqual())
          {
            v137 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
            Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v137);
            LOBYTE(valuePtr[0].value) = 0;
            if (Value
              && pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a2, (const void *)*MEMORY[0x1E0CA3EB8], valuePtr))
            {
              playerairplay_mediaControlHandlePlaybackLikelyToKeepUp(a1, Value, LOBYTE(valuePtr[0].value));
            }
            goto LABEL_166;
          }
          if (FigCFEqual())
          {
            v139 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
            Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v139);
            LODWORD(valuePtr[0].value) = 0;
            if (Value && FigCFDictionaryGetInt32IfPresent())
              playerairplay_mediaControlHandleStallCountChanged((uint64_t)a1, Value, valuePtr[0].value);
            goto LABEL_166;
          }
          if (FigCFEqual())
          {
            v140 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
            valuePtr[0].value = 0;
            if (!v140)
            {
              Value = 0;
              goto LABEL_240;
            }
            Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v140);
            if (Value && FigCFDictionaryGetValueIfPresent())
            {
              v141 = CMBaseObjectGetDerivedStorage();
              if (!v141)
                goto LABEL_240;
              v142 = v141;
              if (*(_BYTE *)(v141 + 72))
                goto LABEL_240;
              if (itemairplay_isRangeArraysDifferent(*(CFArrayRef *)(v141 + 616), (const __CFArray *)valuePtr[0].value))
              {
                v143 = *(const void **)(v142 + 616);
                v144 = (const void *)valuePtr[0].value;
                *(_QWORD *)(v142 + 616) = valuePtr[0].value;
                if (v144)
                  CFRetain(v144);
                if (v143)
                  CFRelease(v143);
                itemairplay_postItemNotification(Value, CFSTR("PlayableRangeChanged"), 0);
              }
            }
            goto LABEL_166;
          }
          goto LABEL_274;
        }
        v126 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3BD8]);
        if (!v126)
          v126 = a2;
        v127 = CFDictionaryGetValue(v126, (const void *)*MEMORY[0x1E0CA3EA8]);
        if (!v127)
          return;
        Value = (void *)playqueue_copyItemForUUID(*((_QWORD *)v5 + 4), (uint64_t)v127);
        if (!Value)
          goto LABEL_166;
        v128 = CMBaseObjectGetDerivedStorage();
        memset(valuePtr, 0, 24);
        v129 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3E28]);
        CMTimeMakeFromDictionary(valuePtr, v129);
        memset(&block, 0, sizeof(block));
        v130 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3E88]);
        CMTimeMakeFromDictionary(&block, v130);
        if ((valuePtr[0].flags & 0x1D) == 1 && (block.flags & 0x1D) == 1)
        {
          cf = *(CMTime *)(v128 + 496);
          v156 = valuePtr[0];
          CMTimeSubtract(&time, &cf, &v156);
          CMTimeAbsoluteValue(&time1, &time);
          CMTimeMake(&time2, 1, 10000);
          if (CMTimeCompare(&time1, &time2) < 0)
            *(CMTime *)(v128 + 496) = block;
        }
        itemairplay_postItemNotification(Value, CFSTR("ReachedTimeToPauseBuffering"), 0);
        itemairplay_requestAirPlayPlaybackInfo(Value, 0, 0, 0);
      }
    }
    v118 = Value;
    goto LABEL_273;
  }
  v44 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
  Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v44);
  if (Value)
  {
    cf = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v45 = CMBaseObjectGetDerivedStorage();
    LODWORD(v156.value) = 0;
    v46 = *(unsigned int *)(v45 + 864);
    *(_DWORD *)(v45 + 864) = FPSupport_IncrementSeekID(*(_DWORD *)(v45 + 864));
    if (FigCFDictionaryGetCMTimeIfPresent())
    {
      if ((cf.flags & 1) != 0)
      {
        if (FigCFDictionaryGetFloat32IfPresent())
        {
          itemairplay_clearCoordinatedPlaybackSynchronizationTimebase();
          playerairplay_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem((uint64_t)a1, (char *)Value);
          valuePtr[0] = cf;
          playerairplay_notifyStartupTasksOfSeek(a1, Value, v46, (__int128 *)&valuePtr[0].value, *(float *)&v156.value);
          valuePtr[0] = cf;
          itemairplay_sendSeekToTimeNotification(Value, v46, 0, 0);
          goto LABEL_166;
        }
        if (!dword_1EE2A2FA0)
          goto LABEL_241;
      }
      else if (!dword_1EE2A2FA0)
      {
        goto LABEL_241;
      }
    }
    else if (!dword_1EE2A2FA0)
    {
      goto LABEL_241;
    }
    *(_DWORD *)type = 0;
    v160[0] = OS_LOG_TYPE_DEFAULT;
    v138 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_241;
  }
LABEL_166:
  playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
LABEL_167:
  if (!v8)
    goto LABEL_240;
  if (FigCFEqual())
  {
    v86 = CMBaseObjectGetDerivedStorage();
    cf.value = 0;
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v86 + 32), 0, (unint64_t)&cf);
    if (a2)
      CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3C70]);
    if (FigCFEqual())
    {
      if (cf.value)
      {
        v97 = CMBaseObjectGetDerivedStorage();
        if (!*(_BYTE *)(v97 + 740))
        {
          if (*(_BYTE *)(v97 + 737))
            v98 = kFigPlaybackItemNotification_DidPlayToTheEnd;
          else
            v98 = kFigPlaybackItemNotification_FailedToBecomeReadyForPlayback;
          itemairplay_postItemNotification((const void *)cf.value, *v98, 0);
        }
        *(_BYTE *)(v97 + 740) = 1;
      }
      if (FigCFEqual())
      {
        v156.value = 0;
        FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 1, (CFMutableDictionaryRef *)&v156);
        if (dword_1EE2A2FA0)
        {
          *(_DWORD *)type = 0;
          v160[0] = OS_LOG_TYPE_DEFAULT;
          v99 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v100 = *(_DWORD *)type;
          if (os_log_type_enabled(v99, v160[0]))
            v101 = v100;
          else
            v101 = v100 & 0xFFFFFFFE;
          if (v101)
          {
            if (a1)
              v102 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
            else
              v102 = "";
            LODWORD(block.value) = 136315650;
            *(CMTimeValue *)((char *)&block.value + 4) = (CMTimeValue)"playerairplay_mediaControlHandleStateStopped";
            LOWORD(block.flags) = 2048;
            *(_QWORD *)((char *)&block.flags + 2) = a1;
            HIWORD(block.epoch) = 2082;
            v169 = v102;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        playerairplay_updatePlayerRateToMatch(a1, v156.value, 0.0);
        if (v156.value)
          CFRelease((CFTypeRef)v156.value);
      }
    }
    else
    {
      playerairplay_shutdownAirPlayVideoPlaybackDueToServer(a1);
    }
    v109 = (const void *)cf.value;
    if (!cf.value)
      goto LABEL_240;
LABEL_239:
    CFRelease(v109);
    goto LABEL_240;
  }
  if (FigCFEqual())
  {
    v87 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3BD8]);
    if (!v87)
      goto LABEL_240;
    v88 = CFDictionaryGetValue(v87, (const void *)*MEMORY[0x1E0CA3EA8]);
    v89 = pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v88);
    v90 = CMBaseObjectGetDerivedStorage();
    if (v90)
    {
      v91 = v90;
      FigReadWriteLockLockForRead();
      if (!*(_BYTE *)(v91 + 72))
      {
        v92 = *(OpaqueCMTimebase **)(v91 + 576);
        if (v92)
        {
          if (dword_1EE2A2FA0)
          {
            LODWORD(cf.value) = 0;
            LOBYTE(v156.value) = 0;
            v93 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v94 = cf.value;
            if (os_log_type_enabled(v93, v156.value))
              v95 = v94;
            else
              v95 = v94 & 0xFFFFFFFE;
            if (v95)
            {
              if (a1)
                v96 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
              else
                v96 = "";
              if (v89)
                v114 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
              else
                v114 = "";
              LODWORD(block.value) = 136316162;
              *(CMTimeValue *)((char *)&block.value + 4) = (CMTimeValue)"playerairplay_mediaControlServerEventHandler";
              LOWORD(block.flags) = 2048;
              *(_QWORD *)((char *)&block.flags + 2) = a1;
              HIWORD(block.epoch) = 2082;
              v169 = v96;
              *(_WORD *)v170 = 2048;
              *(_QWORD *)&v170[2] = v89;
              *(_WORD *)&v170[10] = 2082;
              *(_QWORD *)&v170[12] = v114;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v92 = *(OpaqueCMTimebase **)(v91 + 576);
          }
          CMTimebaseSetRate(v92, 0.0);
        }
      }
      FigReadWriteLockUnlockForRead();
    }
LABEL_237:
    if (!v89)
      goto LABEL_240;
    goto LABEL_238;
  }
  if (FigCFEqual())
  {
    v103 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
    v89 = pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v103);
    if (playerairplay_ignoreRemoteRateUpdate(a1, v89, 0.0))
      goto LABEL_237;
    valuePtr[0].value = 0;
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 39, (CFMutableDictionaryRef *)valuePtr);
    CFDictionaryAddValue((CFMutableDictionaryRef)valuePtr[0].value, CFSTR("PauseAffectsCoordinatedPlayback"), (const void *)*MEMORY[0x1E0C9AE50]);
    v104 = valuePtr[0].value;
    v105 = 0.0;
    goto LABEL_224;
  }
  if (FigCFEqual())
  {
    v106 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3BD8]);
    v107 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
    v108 = (const void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v107);
    v89 = (uint64_t)v108;
    if (v106 && v108)
    {
      itemairplay_getPlaybackInfoCompletionHandler(v108, a1, v106, 0, 0, 1, 0, 0);
LABEL_238:
      v109 = (const void *)v89;
      goto LABEL_239;
    }
    valuePtr[0].value = 0;
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 39, (CFMutableDictionaryRef *)valuePtr);
    v104 = valuePtr[0].value;
    v105 = 1.0;
LABEL_224:
    playerairplay_updatePlayerRateToMatch(a1, v104, v105);
    if (valuePtr[0].value)
      CFRelease((CFTypeRef)valuePtr[0].value);
    goto LABEL_237;
  }
  if (FigCFEqual() && dword_1EE2A2FA0)
  {
    LODWORD(cf.value) = 0;
    LOBYTE(v156.value) = 0;
    v110 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v111 = cf.value;
    if (os_log_type_enabled(v110, v156.value))
      v112 = v111;
    else
      v112 = v111 & 0xFFFFFFFE;
    if (v112)
    {
      if (a1)
        v113 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
      else
        v113 = "";
      LODWORD(block.value) = 136315650;
      *(CMTimeValue *)((char *)&block.value + 4) = (CMTimeValue)"playerairplay_mediaControlServerEventHandler";
      LOWORD(block.flags) = 2048;
      *(_QWORD *)((char *)&block.flags + 2) = a1;
      HIWORD(block.epoch) = 2082;
      v169 = v113;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_240:
  if (Value)
LABEL_241:
    CFRelease(Value);
}

const void *playqueue_copyItemForUUID(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;
  int v7;

  if (!a2)
    return 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  Count = CFArrayGetCount(*(CFArrayRef *)a1);
  if (Count < 1)
    goto LABEL_9;
  v4 = Count;
  v5 = 1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a1, v5 - 1);
    CMBaseObjectGetDerivedStorage();
    v7 = FigCFEqual();
    if (v5 >= v4)
      break;
    ++v5;
  }
  while (!v7);
  if (v7)
  {
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
  }
  else
  {
LABEL_9:
    ValueAtIndex = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 8));
  return ValueAtIndex;
}

BOOL playerairplay_interstitialEventActive()
{
  uint64_t DerivedStorage;
  const void *v1;
  _BOOL8 v2;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(DerivedStorage + 32), (unint64_t)&cf, 0);
  if (!cf)
    return 0;
  v1 = *(const void **)(CMBaseObjectGetDerivedStorage() + 784);
  if (v1)
    v2 = CFEqual(v1, &stru_1E2FD85F8) == 0;
  else
    v2 = 0;
  CFRelease(cf);
  return v2;
}

uint64_t playqueue_getNumItemsInClientPlayQueue(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  v2 = *(unsigned int *)(a1 + 16);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t pap_expectedEndTime@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  const __CFArray *v5;
  CFIndex Count;
  const __CFDictionary *v7;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  CMTimeEpoch epoch;
  CMTime v12;
  CMTime lhs;
  CMTime v14;
  CMTime v15;
  CMTime v16;

  result = CMBaseObjectGetDerivedStorage();
  v3 = result;
  v4 = MEMORY[0x1E0CA2E10];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E10];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 16);
  if ((*(_BYTE *)(result + 460) & 1) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)(result + 448);
    epoch = *(_QWORD *)(result + 464);
    goto LABEL_11;
  }
  result = *(_QWORD *)(result + 624);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v5 = *(const __CFArray **)(v3 + 624);
      Count = CFArrayGetCount(v5);
      result = (uint64_t)CFArrayGetValueAtIndex(v5, Count - 1);
      if (result)
      {
        v7 = (const __CFDictionary *)result;
        Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x1E0CA4058]);
        result = (uint64_t)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0CA4050]);
        if (Value && result != 0)
        {
          v10 = (const __CFDictionary *)result;
          memset(&v16, 0, sizeof(v16));
          CMTimeMakeFromDictionary(&v16, Value);
          memset(&v15, 0, sizeof(v15));
          CMTimeMakeFromDictionary(&v15, v10);
          lhs = v16;
          v12 = v15;
          result = (uint64_t)CMTimeAdd(&v14, &lhs, &v12);
          *(_OWORD *)a1 = *(_OWORD *)&v14.value;
          epoch = v14.epoch;
LABEL_11:
          *(_QWORD *)(a1 + 16) = epoch;
        }
      }
    }
  }
  return result;
}

uint64_t pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v4 = result;
    if (*(_BYTE *)result)
    {
      return 0;
    }
    else if (!a2 || (result = (uint64_t)playqueue_copyItemForUUID(*(_QWORD *)(result + 32), a2), (v5 = result) == 0))
    {
      playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v4 + 32), 0, (unint64_t)&v5);
      return v5;
    }
  }
  return result;
}

uint64_t itemairplay_clearCoordinatedPlaybackSynchronizationTimebase()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 592));
    v1 = *(const void **)(DerivedStorage + 584);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 584) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 592));
  }
  return FigReadWriteLockUnlockForRead();
}

void playerairplay_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem(uint64_t a1, char *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *PlayQueueSnapshot;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  CFRange v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(_QWORD *)(DerivedStorage + 32), 0);
  if (PlayQueueSnapshot)
  {
    v5 = PlayQueueSnapshot;
    Count = CFArrayGetCount(PlayQueueSnapshot);
    if (a2)
    {
      v8.length = CFArrayGetCount(v5);
      v8.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v8, a2);
      if (FirstIndexOfValue == -1)
      {
LABEL_7:
        CFRelease(v5);
        return;
      }
      a2 = (char *)(FirstIndexOfValue + 1);
    }
    if ((uint64_t)a2 < Count)
    {
      do
      {
        CFArrayGetValueAtIndex(v5, (CFIndex)a2);
        itemairplay_clearCoordinatedPlaybackSynchronizationTimebase();
        ++a2;
      }
      while ((char *)Count != a2);
    }
    goto LABEL_7;
  }
}

const __CFArray *playerairplay_notifyStartupTasksOfSeek(const void *a1, const void *a2, int a3, __int128 *a4, float a5)
{
  const __CFArray *result;
  __int128 v11;
  uint64_t v12;
  char v13;

  result = (const __CFArray *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    result = (const __CFArray *)pap_AirPlayState(a1);
    if ((_DWORD)result)
    {
      if ((_DWORD)result != 10)
      {
        v11 = *a4;
        v12 = *((_QWORD *)a4 + 2);
        return playerairplay_notifyStartupTasksOfEvents(a1, a2, 2, a3, (uint64_t)&v11, &v13, a5);
      }
    }
  }
  return result;
}

void playerairplay_mediaControlHandleTypeCurrentItemChanged(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *Value;
  CFTypeRef v5;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFDictionary *v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  CFIndex IndexOfAirPlayItemInternal;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  const void *ValueAtIndex;
  const void *v25;
  OpaqueCMTimebase *v26;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  NSObject *v30;
  OpaqueCMTimebase *v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  dispatch_time_t v35;
  CFTypeRef cf;
  CMTime time;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
  if (Value)
  {
    v5 = playqueue_copyItemForUUID(*(_QWORD *)(DerivedStorage + 32), (uint64_t)Value);
    v6 = CMBaseObjectGetDerivedStorage();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (dword_1EE2A2FA0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    v8 = 0;
    goto LABEL_82;
  }
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(DerivedStorage + 32), 0, (unint64_t)&cf);
  if (!cf
    || (Value ? (v9 = v5 == 0) : (v9 = 1), !v9 ? (v10 = v5 == cf) : (v10 = 1), !v10 ? (v11 = v6 == 0) : (v11 = 1), v11))
  {
    if (!v5)
    {
      v12 = *(_QWORD *)(DerivedStorage + 32);
      MEMORY[0x19402EEEC](*(_QWORD *)(v12 + 8));
      v13 = *(_DWORD *)(v12 + 20);
      MEMORY[0x19402EF04](*(_QWORD *)(v12 + 8));
      if (Value)
        v14 = 1;
      else
        v14 = v13 == 0;
      if (!v14)
      {
        v23 = *(_QWORD *)(DerivedStorage + 32);
        MEMORY[0x19402EEEC](*(_QWORD *)(v23 + 8));
        if (CFArrayGetCount(*(CFArrayRef *)v23) < 1)
        {
          v25 = 0;
        }
        else
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v23, 0);
          v25 = ValueAtIndex;
          if (ValueAtIndex)
            CFRetain(ValueAtIndex);
        }
        MEMORY[0x19402EF04](*(_QWORD *)(v23 + 8));
        v28 = (_BYTE *)CMBaseObjectGetDerivedStorage();
        if (v25)
        {
          v29 = v28;
          if (v28[733] && v28[740])
          {
            FigReadWriteLockLockForRead();
            if (!v29[72])
            {
              v29[739] = 2;
              itemairplay_doCleanupAtEndOfPlayback();
              itemairplay_cleanupItemForAirPlay((uint64_t)v25, 1);
              itemairplay_postItemNotification(v25, CFSTR("ItemWasRemovedFromPlayQueue"), 0);
              itemairplay_postItemNotification(v25, CFSTR("ItemStoppedBeingCurrent"), 0);
              playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(_QWORD *)(DerivedStorage + 32), v25, 1, 1);
            }
            FigReadWriteLockUnlockForRead();
          }
          else if (v28[734])
          {
            pap_stopAirPlayVideoPlayback(a1);
            v29[734] = 0;
            playerairplay_startAirPlayWithItem(a1, v25);
          }
          CFRelease(v25);
        }
        else if (dword_1EE2A2FA0)
        {
          v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      v8 = playerairplay_createItemDidChangeNotificationPayload(a2);
      playerairplay_postPlayerNotification(a1, CFSTR("CurrentItemDidChange"), v8);
      v32 = *(_QWORD *)(DerivedStorage + 32);
      MEMORY[0x19402EEEC](*(_QWORD *)(v32 + 8));
      v33 = *(_DWORD *)(v32 + 16);
      MEMORY[0x19402EF04](*(_QWORD *)(v32 + 8));
      if (!v33)
      {
        if (*(_BYTE *)(DerivedStorage + 42))
        {
          v34 = *(NSObject **)(DerivedStorage + 112);
          v35 = dispatch_time(0, 10000000000);
          dispatch_source_set_timer(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 0x4C4B40uLL);
        }
        else
        {
          playerairplay_checkIfAirPlayVideoSessionNeedsToStop(a1);
        }
      }
      v27 = 0;
      goto LABEL_78;
    }
  }
  else if (*(_BYTE *)(v6 + 732) && *(_BYTE *)(v6 + 733))
  {
    v15 = CMBaseObjectGetDerivedStorage();
    FigReadWriteLockLockForRead();
    if (!*(_BYTE *)(v15 + 72) && *(_BYTE *)(v15 + 733))
    {
      v31 = *(OpaqueCMTimebase **)(v15 + 576);
      if (v31)
        CMTimebaseSetRate(v31, 0.0);
      itemairplay_controlPlaybackActivityTimer((uint64_t)cf, 0);
      if (!*(_BYTE *)(v15 + 737))
        itemairplay_postItemNotification(cf, CFSTR("FailedToBecomeReadyForPlayback"), 0);
      *(_BYTE *)(v15 + 739) = 2;
      itemairplay_doCleanupAtEndOfPlayback();
      itemairplay_cleanupItemForAirPlay((uint64_t)cf, 1);
      playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(_QWORD *)(DerivedStorage + 32), cf, 1, 1);
    }
    FigReadWriteLockUnlockForRead();
    if (!cf && playqueue_getNumItemsInClientPlayQueue(*(_QWORD *)(DerivedStorage + 32)))
      playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(DerivedStorage + 32), 0, (unint64_t)&cf);
  }
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v6 + 72))
  {
    v8 = 0;
    v16 = 0;
  }
  else
  {
    v17 = *(unsigned __int8 *)(v6 + 739);
    if (v5 == cf)
    {
      v16 = 0;
    }
    else
    {
      v18 = *(_QWORD *)(DerivedStorage + 32);
      MEMORY[0x19402EEEC](*(_QWORD *)(v18 + 8));
      IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)v18, v5);
      if (IndexOfAirPlayItemInternal >= 1)
      {
        v20 = IndexOfAirPlayItemInternal + 1;
        do
        {
          v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)v18, 0);
          v22 = CMBaseObjectGetDerivedStorage();
          if (*(_BYTE *)(v22 + 733))
          {
            *(_BYTE *)(v22 + 739) = 2;
            itemairplay_doCleanupAtEndOfPlayback();
            itemairplay_cleanupItemForAirPlay((uint64_t)v21, 1);
            playqueue_removeItemFromClientQueueAndFromMediaControlPlaylistInternal(v18, v21, 1, 1);
          }
          --v20;
        }
        while (v20 > 1);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v18 + 8));
      v16 = 1;
    }
    *(_BYTE *)(v6 + 739) = 1;
    if (v17 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = playerairplay_createItemDidChangeNotificationPayload(a2);
      playerairplay_postPlayerNotification(a1, CFSTR("CurrentItemDidChange"), v8);
    }
    itemairplay_postItemNotification(v5, CFSTR("TimebaseChanged"), 0);
    itemairplay_controlPlaybackActivityTimer((uint64_t)v5, 1);
    v26 = *(OpaqueCMTimebase **)(v6 + 576);
    time = *(CMTime *)(v6 + 160);
    CMTimebaseSetTime(v26, &time);
    itemairplay_postItemNotification(v5, CFSTR("TimeJumped"), 0);
    itemairplay_controlPlaybackActivityTimer((uint64_t)v5, 2);
  }
  FigReadWriteLockUnlockForRead();
  v27 = 1;
  if (v16 && cf)
    itemairplay_postItemNotification(cf, CFSTR("ItemStoppedBeingCurrent"), 0);
LABEL_78:
  playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, v27);
  if (!*(_BYTE *)(DerivedStorage + 249)
    && (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368) || *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360)))
  {
    playerairplay_setActionAtEndOnAirPlayController(a1);
  }
LABEL_82:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (v8)
    CFRelease(v8);
}

uint64_t playqueue_getIndexOfAirPlayItem(uint64_t a1, const void *a2)
{
  CFIndex IndexOfAirPlayItemInternal;

  if (!a2)
    return -1;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)a1, a2);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 8));
  return IndexOfAirPlayItemInternal;
}

void pap_playbackSessionGetProxiedProperty(const void *a1, const void *a2, int a3, NSObject *a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t DerivedStorage;
  _QWORD v17[11];

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __pap_playbackSessionGetProxiedProperty_block_invoke;
    v17[3] = &__block_descriptor_88_e5_v8__0l;
    v17[4] = a6;
    v17[5] = a1;
    v17[6] = a2;
    v17[7] = DerivedStorage;
    v17[8] = a5;
    v17[9] = a7;
    v17[10] = a8;
    pap_DispatchHelper(a1, a2, (uint64_t)v17, a3, a4, a6, a5, 0);
  }
}

void pap_playbackSessionGetMediaSelectionCompletion(uint64_t a1, const void *a2, int a3, const void *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  CFTypeID v9;
  NSObject *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[7];
  os_log_type_t type;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (a3 || (v8 = DerivedStorage, *DerivedStorage))
  {
LABEL_12:
    if (!a4)
      return;
    goto LABEL_9;
  }
  if (!a2)
  {
    if (!a4)
      return;
    goto LABEL_8;
  }
  v9 = CFGetTypeID(a2);
  if (v9 != CFArrayGetTypeID())
  {
    v14 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_12;
  }
  if (!a4)
    return;
  CFRetain(a2);
LABEL_8:
  CFRetain(a4);
  v10 = *((_QWORD *)v8 + 13);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionGetMediaSelectionCompletion_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = v8;
  block[5] = a2;
  block[6] = a4;
  dispatch_async(v10, block);
LABEL_9:
  CFRelease(a4);
}

uint64_t itemairplay_postTaggedRangeMetadataChangedNotificationIfNeeded(const void *a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  CFDictionaryRef v6;
  void *values;

  values = a2;
  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = result;
    FigReadWriteLockLockForRead();
    if (!*(_BYTE *)(v5 + 72) && *(uint64_t *)(v5 + 824) >= 1)
    {
      v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackItemParameter_CurrentTaggedRangeMetadataArray, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      itemairplay_postItemNotification(a1, CFSTR("TaggedRangeMetadataChanged"), v6);
      if (v6)
        CFRelease(v6);
    }
    return FigReadWriteLockUnlockForRead();
  }
  return result;
}

void __playerairplay_mediaControlHandleTypeUnhandledURLRequest_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, CFTypeRef, uint64_t, _QWORD, __CFDictionary *, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t);
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  __int16 v17;
  __int128 v18;
  void (*v19)(const void *, uint64_t, uint64_t, uint64_t, __CFError *);
  CFTypeRef v20;
  CFTypeRef cf;

  v20 = 0;
  cf = 0;
  v18 = xmmword_1E2F98E80;
  v19 = playerairplay_contentKeyRequestDidFail;
  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  if (Mutable)
  {
    v5 = *(const void **)(*(_QWORD *)(a1 + 32) + 640);
    if (v5)
      CFDictionarySetValue(Mutable, CFSTR("FHRP_CustomURLLoader"), v5);
    if (!FigContentKeySpecifierCreate(1, *(const void **)(a1 + 40), 0, 0, (uint64_t *)&cf))
    {
      v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 251);
      if (!FigContentKeyRequestParamsCreate(v2, cf, 0, 2, 2, 0, 0, *(const void **)(*(_QWORD *)(a1 + 32) + 840), *(_QWORD *)(a1 + 48), v17, SHIBYTE(v17), 0, (uint64_t *)&v20))
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 880);
        v7 = v20;
        v8 = *(_QWORD *)(a1 + 64);
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80);
        v10 = *(_QWORD *)(a1 + 72);
        v11 = *(_QWORD *)(a1 + 80);
        v12 = *(void (**)(uint64_t, CFTypeRef, uint64_t, _QWORD, __CFDictionary *, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v12)
          v12(v6, v7, 5, 0, v4, v8, &v18, v10, v9, v11 + 16);
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v4)
    CFRelease(v4);
  v13 = *(const void **)(a1 + 40);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 64);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(a1 + 72);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 88);
  if (v16)
    CFRelease(v16);
}

void playerairplay_contentKeyRequestDidSucceed(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  playerairplay_ContentKeyDataCallback(a1, a4, a5, 0);
}

void playerairplay_contentKeyRequestDidFail(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFError *a5)
{
  playerairplay_ContentKeyDataCallback(a1, a4, 0, a5);
}

void __playerairplay_mediaControlHandleTypeUnhandledURLRequest_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __CFArray *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const __CFAllocator *v11;
  int Mutable;
  __CFArray *v13;
  int IsRenewalRequest;
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, uint64_t);
  char v22;
  CFTypeRef cf;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v22 = 0;
  FigReadWriteLockLockForRead();
  if (**(_BYTE **)(a1 + 40)
    || (v2 = *(_QWORD *)(a1 + 32), *(_BYTE *)(v2 + 72))
    || !*(_QWORD *)(v2 + 640)
    || !*(_QWORD *)(a1 + 48))
  {
    v3 = 0;
LABEL_4:
    v4 = 0;
    goto LABEL_5;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = FigCustomURLRequestInfoCreateMutable();
  if (Mutable
    || (Mutable = FigCustomURLRequestInfoSetHTTPHeaders()) != 0
    || (Mutable = FigCustomURLRequestInfoSetCryptor()) != 0
    || (Mutable = FigCustomURLRequestInfoSetIsSecureStopSupported()) != 0)
  {
    v3 = Mutable;
    goto LABEL_4;
  }
  if (*(_BYTE *)(a1 + 97))
  {
    v13 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
    v4 = v13;
    if (!v13)
    {
      IsRenewalRequest = FigSignalErrorAt();
      goto LABEL_43;
    }
    CFArrayAppendValue(v13, CFSTR("com.apple.streamingkeydelivery.contentkey"));
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 251))
      CFArrayAppendValue(v4, CFSTR("com.apple.streamingkeydelivery.persistentcontentkey"));
    IsRenewalRequest = FigCustomURLRequestInfoSetAllowedUniversalTypeIdentifiers();
    if (IsRenewalRequest)
      goto LABEL_43;
  }
  else
  {
    v4 = 0;
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent(*(_QWORD *)(a1 + 72), (const void *)*MEMORY[0x1E0CA2EC0], &v22))
  {
    if (v22)
    {
      IsRenewalRequest = FigCustomURLRequestInfoSetIsRenewalRequest();
      if (IsRenewalRequest)
        goto LABEL_43;
    }
  }
  v15 = cf;
  if (cf)
  {
    v15 = CFRetain(cf);
    v16 = cf;
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) = v15;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 640);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 24);
  if (v21)
  {
    IsRenewalRequest = v21(v17, v16, v18, v19, playerairplay_customURLLoaderDataCallback, v20 + 8);
LABEL_43:
    v3 = IsRenewalRequest;
    goto LABEL_5;
  }
  v3 = -12782;
LABEL_5:
  FigReadWriteLockUnlockForRead();
  if (v3)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = *(const void **)(a1 + 56);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 64);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 80);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 88);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 72);
  if (v10)
    CFRelease(v10);
  if (v4)
    CFRelease(v4);
  if (cf)
    CFRelease(cf);
}

uint64_t playerairplay_customURLLoaderDataCallback(const void *a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, __CFError *a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  NSObject *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueCMBlockBuffer *v16;
  CFTypeRef APCustomURLResponseFromLocalCustomURLResponse;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  _BYTE *v22;
  _BYTE *v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  NSObject *v27;
  _QWORD block[9];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = CMBaseObjectGetDerivedStorage() + 648;
  do
  {
    v13 = *(_QWORD *)v13;
    if (!v13)
    {
      if (dword_1EE2A2FA0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      itemairplay_postFailNotificationWithError(a1, -17227);
      return FigReadWriteLockUnlockForRead();
    }
  }
  while (*(_QWORD *)(v13 + 8) != a2);
  FigReadWriteLockLockForRead();
  if (dword_1EE2A2FA0)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(DerivedStorage + 72) || *(_BYTE *)(DerivedStorage + 732))
  {
    if (a4)
    {
      v16 = *(OpaqueCMBlockBuffer **)(v13 + 40);
      if (v16)
        CMBlockBufferAppendBufferReference(v16, a4, 0, 0, 0);
      else
        *(_QWORD *)(v13 + 40) = CFRetain(a4);
    }
    if ((a5 & 3) != 0)
    {
      APCustomURLResponseFromLocalCustomURLResponse = createAPCustomURLResponseFromLocalCustomURLResponse(v13, a3, (uint64_t)a1, a6);
      if (APCustomURLResponseFromLocalCustomURLResponse)
      {
        v18 = APCustomURLResponseFromLocalCustomURLResponse;
        v19 = CMBaseObjectGetDerivedStorage();
        v20 = *(_QWORD *)(v13 + 16);
        v21 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        v22 = (_BYTE *)CMBaseObjectGetDerivedStorage();
        if (!v22 || (v23 = v22, *v22))
        {
          FigSignalErrorAt();
          if (v21)
            goto LABEL_28;
        }
        else
        {
          CFDictionaryGetValue(*(CFDictionaryRef *)(v13 + 24), (const void *)*MEMORY[0x1E0CA2EB8]);
          v24 = FigCFEqual();
          v25 = *(_QWORD **)(v19 + 648);
          if (v25 == (_QWORD *)v13)
          {
            v26 = (_QWORD *)(v19 + 648);
          }
          else
          {
            do
            {
              v26 = v25;
              v25 = (_QWORD *)*v25;
            }
            while (v25 != (_QWORD *)v13);
          }
          *v26 = *(_QWORD *)v13;
          playerairplay_freeCustomURLRequestListEntry((_QWORD *)v13);
          if (a1)
            CFRetain(a1);
          if (v21)
            CFRetain(v21);
          CFRetain(v18);
          v27 = *((_QWORD *)v23 + 13);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __playerairplay_customURLResponseHandlerCommon_block_invoke;
          block[3] = &__block_descriptor_73_e5_v8__0l;
          block[4] = v19;
          block[5] = v21;
          v30 = v24;
          block[6] = v18;
          block[7] = v20;
          block[8] = a1;
          dispatch_async(v27, block);
          if (v21)
LABEL_28:
            CFRelease(v21);
        }
        CFRelease(v18);
      }
    }
  }
  return FigReadWriteLockUnlockForRead();
}

void airplayCryptor_invalidate()
{
  airplayCryptor_invalidate_guts();
}

uint64_t sub_192C7916C()
{
  return 0;
}

void airplayCryptor_finalize()
{
  CMBaseObjectGetDerivedStorage();
  airplayCryptor_invalidate_guts();
}

uint64_t sub_192C79198()
{
  return FigSimpleMutexDestroy();
}

__CFString *airplayCryptor_copyDebugDescription(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<AirPlayCryptor %p retainCount: %ld%s allocator: %p, "), a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t airplayCryptor_setProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  Boolean Value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294954516;
  v7 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v7)
  {
    v8 = 4294954511;
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3238]))
  {
    Value = CFBooleanGetValue(a3);
    v8 = 0;
    *(_BYTE *)(v7 + 48) = Value;
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F0]))
  {
    v8 = airplayCryptor_setPackagedAndRawPersistentKey(a1, a3);
  }
  else
  {
    v8 = 4294954512;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 8));
  return v8;
}

void airplayCryptor_invalidate_guts()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  *(_BYTE *)DerivedStorage = 1;
  objc_destroyWeak((id *)(DerivedStorage + 16));
  *(_QWORD *)(DerivedStorage + 16) = 0;
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 72);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 80);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 88);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 104);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  JUMPOUT(0x19402EF04);
}

uint64_t airplayCryptor_setPackagedAndRawPersistentKey(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  const __CFDictionary *v6;
  const __CFDictionary *v8;
  CFTypeID v9;
  const void *Value;
  uint64_t v11;
  const void *v12;
  CFTypeID v13;
  const void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294954516;
  v4 = DerivedStorage;
  v5 = *(const void **)(DerivedStorage + 64);
  *(_QWORD *)(DerivedStorage + 64) = a2;
  CFRetain(a2);
  if (v5)
    CFRelease(v5);
  v6 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDataRef *)(v4 + 64), 0, 0, 0);
  if (!v6)
    return FigSignalErrorAt();
  v8 = v6;
  v9 = CFGetTypeID(v6);
  if (v9 == CFDictionaryGetTypeID()
    && (Value = CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E0CA4D40])) != 0
    && (v12 = Value, v13 = CFGetTypeID(Value), v13 == CFDataGetTypeID()))
  {
    v14 = *(const void **)(v4 + 56);
    *(_QWORD *)(v4 + 56) = v12;
    CFRetain(v12);
    if (v14)
      CFRelease(v14);
    v11 = 0;
    *(_BYTE *)(v4 + 48) = 1;
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  CFRelease(v8);
  return v11;
}

uint64_t airplayCryptor_CreateKeyRequest(uint64_t a1, const __CFDictionary *a2, const __CFAllocator *a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  __CFDictionary *Mutable;
  const void *v10;
  const void *v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  unint64_t v16;
  const void *v17;
  CFTypeRef v18;
  const void *v19;
  CFTypeID v20;
  int v21;
  uint64_t v22;
  const void *v23;
  _BYTE *v24;
  int v25;
  uint64_t updated;
  dispatch_semaphore_t v27;
  NSObject *v28;
  __CFData *v29;
  __CFData *v30;
  int Int64IfPresent;
  _QWORD *v32;
  void *APCustomURLResponseFromContentKeyResponse;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  const __CFDictionary *v37;
  const __CFDictionary *v38;
  const void *v39;
  const void *v40;
  __CFDictionary *v41;
  __CFData *v42;
  CFMutableDictionaryRef v43;
  __CFDictionary *v44;
  CFMutableDictionaryRef v45;
  const __CFDictionary *v46;
  const void *v47;
  CFTypeRef v48;
  const void *v49;
  __CFDictionary *v50;
  CFTypeRef v51;
  dispatch_time_t v52;
  const __CFData *v53;
  const UInt8 *BytePtr;
  int v55;
  uint64_t *v57;
  const void *v58;
  UInt8 *MutableBytePtr;
  int v60;
  int v61;
  __CFData *cf;
  CFTypeRef v63;
  NSObject *object;
  const __CFAllocator *allocator;
  CFMutableDictionaryRef theDict;
  const void *v67;
  void *v68;
  void *value;
  _DWORD length[3];
  uint64_t v71;
  const UInt8 *v72;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  *a4 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v8)
  {
    Mutable = 0;
    v10 = 0;
    v18 = 0;
LABEL_110:
    updated = FigSignalErrorAt();
    goto LABEL_111;
  }
  Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v10 = 0;
    v18 = 0;
    goto LABEL_110;
  }
  v10 = (const void *)MEMORY[0x19402D578](v8 + 16);
  if (!v10
    || (value = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D10])) == 0
    || (v68 = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D18])) == 0)
  {
    v18 = 0;
    goto LABEL_110;
  }
  v11 = (const void *)*MEMORY[0x1E0CA4D20];
  v12 = (unint64_t)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D20]);
  if (!v12)
    v12 = (unint64_t)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA2ED0]);
  v13 = (const void *)*MEMORY[0x1E0CA4D08];
  v14 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D08]);
  if (v14)
  {
    v15 = v14;
    if (v12)
      CFDictionarySetValue(Mutable, v11, (const void *)v12);
LABEL_17:
    CFDictionarySetValue(Mutable, v13, v15);
    goto LABEL_18;
  }
  v16 = (unint64_t)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D30]);
  if (!(v12 | v16))
  {
    v18 = 0;
    updated = 4294954516;
LABEL_111:
    MEMORY[0x19402EF04](*(_QWORD *)(v8 + 8));
    if (!Mutable)
      goto LABEL_100;
    goto LABEL_99;
  }
  v15 = (const void *)v16;
  if (v12)
    CFDictionarySetValue(Mutable, v11, (const void *)v12);
  if (v15)
    goto LABEL_17;
LABEL_18:
  v17 = *(const void **)(v8 + 24);
  if (v17)
  {
    v18 = CFRetain(v17);
    if (v18)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4D00], v18);
  }
  else
  {
    v18 = 0;
  }
  v19 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D58]);
  if (v19)
  {
    v20 = CFGetTypeID(v19);
    if (v20 != CFDataGetTypeID())
      goto LABEL_110;
  }
  CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D40]);
  v67 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D60]);
  CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D28]);
  v21 = *(unsigned __int8 *)(v8 + 32);
  MEMORY[0x19402EF04](*(_QWORD *)(v8 + 8));
  v22 = CMBaseObjectGetDerivedStorage();
  v71 = 0;
  *(_QWORD *)&length[1] = 0;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v22 + 72))
  {
    v23 = 0;
LABEL_114:
    updated = 4294954511;
    goto LABEL_29;
  }
  v23 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v24 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v24 || *v24)
    goto LABEL_114;
  v25 = pap_AirPlayState(v23);
  updated = 0;
  if (!v25 || v25 == 10)
    goto LABEL_29;
  v27 = dispatch_semaphore_create(0);
  if (v27)
  {
    v28 = v27;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v29 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 32);
    object = v28;
    if (!v29)
    {
      v63 = 0;
      v41 = 0;
      theDict = 0;
      v35 = 0;
      updated = 4294954510;
      goto LABEL_86;
    }
    v30 = v29;
    CFDataSetLength(v29, 32);
    cf = v30;
    MutableBytePtr = CFDataGetMutableBytePtr(v30);
    if (!MutableBytePtr)
    {
      v35 = 0;
      theDict = 0;
      v41 = 0;
      v63 = 0;
      updated = 4294954510;
LABEL_51:
      v42 = cf;
LABEL_85:
      CFRelease(v42);
LABEL_86:
      dispatch_release(object);
      FigReadWriteLockUnlockForRead();
      if (v63)
        CFRelease(v63);
      if (theDict)
        CFRelease(theDict);
      if (v35)
        CFRelease(v35);
      if (v41)
        CFRelease(v41);
      goto LABEL_94;
    }
    v60 = v21;
    Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
    if (!(Int64IfPresent | FigCFDictionaryGetInt64IfPresent()))
    {
LABEL_49:
      v35 = 0;
      theDict = 0;
      v41 = 0;
      v63 = 0;
      updated = 4294954516;
LABEL_50:
      v21 = v60;
      goto LABEL_51;
    }
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 880))
    {
      v32 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 656);
      while (1)
      {
        v32 = (_QWORD *)*v32;
        if (!v32)
          goto LABEL_49;
        if (v32[1] == *(_QWORD *)&length[1])
        {
          APCustomURLResponseFromContentKeyResponse = createAPCustomURLResponseFromContentKeyResponse((uint64_t)v32, 0, 0);
          goto LABEL_43;
        }
      }
    }
    v34 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 648);
    do
    {
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_49;
    }
    while (v34[1] != v71);
    APCustomURLResponseFromContentKeyResponse = (void *)createAPCustomURLResponseFromLocalCustomURLResponse((uint64_t)v34, 0, (uint64_t)v10, 0);
LABEL_43:
    v35 = APCustomURLResponseFromContentKeyResponse;
    if (!APCustomURLResponseFromContentKeyResponse
      || (theDict = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
    {
      theDict = 0;
      v41 = 0;
      v63 = 0;
      goto LABEL_120;
    }
    v58 = v35;
    v36 = itemairplay_copyiTunesStoreContentRentalID();
    v37 = (const __CFDictionary *)itemairplay_copyiTunesStoreContentInfo();
    v57 = a4;
    if (v37)
    {
      v38 = v37;
      v39 = CFDictionaryGetValue(v37, CFSTR("assetOption_iTunesStoreContentDSID"));
      v40 = v39;
      if (v39)
        CFRetain(v39);
      CFRelease(v38);
    }
    else
    {
      v40 = 0;
    }
    v72 = 0;
    v43 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v43)
    {
      v44 = v43;
      v45 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v45)
      {
        v46 = v45;
        FigCFDictionarySetInt32();
        if (v36)
          CFDictionarySetValue(v44, CFSTR("lK1"), v36);
        if (v40)
          CFDictionarySetValue(v44, CFSTR("DhpWkh3rnR"), v40);
        CFDictionarySetValue(v44, CFSTR("Y7bdIsnh7"), value);
        if (nS1Q9ljw9esy9((uint64_t)v44, (uint64_t)v46))
        {
          v61 = 0;
        }
        else
        {
          FigCFDictionaryGetInt64IfPresent();
          v61 = (int)v72;
          v47 = CFDictionaryGetValue(v46, CFSTR("xNJu5eepP"));
          if (v47)
          {
            v48 = CFRetain(v47);
            if (v48)
            {
              v63 = v48;
              updated = 0;
              goto LABEL_64;
            }
          }
        }
        updated = FigSignalErrorAt();
        v63 = 0;
LABEL_64:
        CFRelease(v44);
        CFRelease(v46);
        if (!v36)
        {
LABEL_66:
          a4 = v57;
          if (v40)
            CFRelease(v40);
          if ((_DWORD)updated)
          {
            v41 = 0;
            v21 = v60;
            v42 = cf;
            v35 = v58;
            goto LABEL_85;
          }
          v49 = (const void *)*MEMORY[0x1E0C9AE50];
          CFDictionaryAddValue(theDict, CFSTR("CSKRO_RemoteContext"), v63);
          FigCFDictionarySetValueFromKeyInDict();
          v35 = v58;
          if (v67 == v49)
          {
            CFDictionaryAddValue(theDict, CFSTR("StreamingContentKeyRequiresiTunesProvisioningKey"), v49);
            CFDictionaryAddValue(theDict, CFSTR("StreamingContentKeyIsForAirPlayKey"), v49);
          }
          v50 = CFDictionaryCreateMutable(allocator, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v41 = v50;
          if (v50)
          {
            CFDictionaryAddValue(v50, (const void *)*MEMORY[0x1E0CA3E48], v58);
            CFDictionaryAddValue(v41, (const void *)*MEMORY[0x1E0CA3D20], value);
            CFDictionaryAddValue(v41, (const void *)*MEMORY[0x1E0CA3D28], v68);
            CFDictionaryAddValue(v41, (const void *)*MEMORY[0x1E0CA3DF8], theDict);
            *((_QWORD *)MutableBytePtr + 1) = object;
            dispatch_retain(object);
            *(_QWORD *)MutableBytePtr = v23;
            if (v23)
            {
              CFRetain(v23);
              CFRetain(cf);
              v51 = CFRetain(v23);
              v35 = v58;
              pap_PlaybackSessionPerformRemoteAction(v51, v23, 1, object, (const void *)*MEMORY[0x1E0CA3C00], v41, (uint64_t)pap_playbackSessionRequestForStreamingKeyCompletion, cf);
              if (v51)
                CFRelease(v51);
            }
            else
            {
              CFRetain(cf);
            }
            v52 = dispatch_time(0, 8000000000);
            if (dispatch_semaphore_wait(object, v52))
            {
              updated = FigSignalErrorAt();
              v53 = 0;
            }
            else
            {
              updated = *((unsigned int *)MutableBytePtr + 6);
              v53 = (const __CFData *)*((_QWORD *)MutableBytePtr + 2);
              if (!(_DWORD)updated && v53)
              {
                v72 = 0;
                length[0] = 0;
                BytePtr = CFDataGetBytePtr(v53);
                v55 = CFDataGetLength(v53);
                LODWORD(BytePtr) = f5zGmdURga6BZ(v61, (uint64_t)BytePtr, v55, (uint64_t)&v72, (uint64_t)length);
                CFRelease(v53);
                if ((_DWORD)BytePtr)
                {
                  updated = FigSignalErrorAt();
                  v53 = 0;
                }
                else
                {
                  v53 = CFDataCreate(allocator, v72, length[0]);
                  Ud5PNQt99i((uint64_t)v72);
                  updated = 0;
                }
                a4 = v57;
              }
            }
            v42 = cf;
            *a4 = (uint64_t)v53;
            v21 = v60;
            goto LABEL_85;
          }
LABEL_120:
          updated = 4294954510;
          goto LABEL_50;
        }
LABEL_65:
        CFRelease(v36);
        goto LABEL_66;
      }
      updated = FigSignalErrorAt();
      CFRelease(v44);
    }
    else
    {
      updated = FigSignalErrorAt();
    }
    v63 = 0;
    v61 = 0;
    if (!v36)
      goto LABEL_66;
    goto LABEL_65;
  }
  updated = 4294954510;
LABEL_29:
  FigReadWriteLockUnlockForRead();
LABEL_94:
  if (v23)
    CFRelease(v23);
  if (!(_DWORD)updated && v21)
    updated = FigAirPlaySecureStopRouterUpdateRecord((uint64_t)v18, (uint64_t)value, (uint64_t)v68, *a4);
LABEL_99:
  CFRelease(Mutable);
LABEL_100:
  if (v10)
    CFRelease(v10);
  if (v18)
    CFRelease(v18);
  return updated;
}

uint64_t airplayCryptor_SetKeyRequestResponse(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v6;
  const void *Value;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = (_QWORD *)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA4D70]);
    v8 = (const void *)v6[9];
    v6[9] = Value;
    if (Value)
      CFRetain(Value);
    if (v8)
      CFRelease(v8);
  }
  v9 = (const void *)v6[7];
  v6[7] = a2;
  CFRetain(a2);
  if (v9)
    CFRelease(v9);
  MEMORY[0x19402EF04](v6[1]);
  return 0;
}

uint64_t airplayCryptor_StartKeyExchangeForAirPlay(uint64_t a1, UInt8 **a2, CFDataRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const __CFData *v8;
  uint64_t v9;
  CFDataRef v10;
  UInt8 *v11;
  UInt8 *bytes[2];
  CFIndex length[2];
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  *(_OWORD *)bytes = 0u;
  *(_OWORD *)length = 0u;
  v6 = 4294955146;
  if (a3)
  {
    if (a2)
    {
      v7 = DerivedStorage;
      if (DerivedStorage)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
        v8 = *(const __CFData **)(v7 + 104);
        if (v8)
        {
          LODWORD(v15) = CFDataGetLength(v8);
          length[1] = (CFIndex)CFDataGetBytePtr(*(CFDataRef *)(v7 + 104));
        }
        v9 = hYNpsn7dXgySzQR((uint64_t)bytes);
        if ((_DWORD)v9)
        {
          v6 = v9;
        }
        else
        {
          v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes[1], LODWORD(length[0]));
          if (v10)
          {
            v6 = 0;
            v11 = bytes[0];
            *(UInt8 **)(v7 + 40) = bytes[0];
            *a2 = v11;
            *a3 = v10;
          }
          else
          {
            v6 = 4294955145;
          }
        }
        MEMORY[0x19402EF04](*(_QWORD *)(v7 + 8));
      }
    }
  }
  return v6;
}

uint64_t airplayCryptor_CreateKeyResponseForAirPlay(uint64_t a1, uint64_t a2, const __CFData *a3, CFDataRef *a4)
{
  _QWORD *DerivedStorage;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  const __CFArray *v11;
  unsigned int Count;
  int v13;
  uint64_t v14;
  CFIndex v15;
  char *v16;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v18;
  CFTypeID v19;
  const UInt8 *BytePtr;
  int v21;
  uint64_t v22;
  CFDataRef v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  CFIndex length[2];
  __int128 v31;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = 0;
  *(_OWORD *)length = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v9 = 4294955146;
  v25 = 0;
  if (!a3)
    goto LABEL_23;
  if (!a2)
    goto LABEL_23;
  if (!a4)
    goto LABEL_23;
  v10 = DerivedStorage;
  if (!DerivedStorage)
    goto LABEL_23;
  if (!DerivedStorage[10] || !DerivedStorage[11] || !DerivedStorage[12])
  {
    v9 = FigSignalErrorAt();
    v8 = 0;
    goto LABEL_23;
  }
  MEMORY[0x19402EEEC](DerivedStorage[1]);
  *((_QWORD *)&v27 + 1) = v10[5];
  *(_QWORD *)&v28 = CFDataGetBytePtr(a3);
  if (!(_QWORD)v28 || (DWORD2(v28) = CFDataGetLength(a3)) == 0)
  {
    v8 = 0;
    v9 = 4294955136;
    goto LABEL_22;
  }
  *(_QWORD *)&v29 = CFDataGetBytePtr((CFDataRef)v10[7]);
  DWORD2(v29) = CFDataGetLength((CFDataRef)v10[7]);
  *((_QWORD *)&v26 + 1) = CFDataGetBytePtr((CFDataRef)v10[10]);
  LODWORD(v27) = CFDataGetLength((CFDataRef)v10[10]);
  v11 = (const __CFArray *)v10[11];
  if (!v11 || (Count = CFArrayGetCount(v11), (v13 = Count) == 0))
  {
    v9 = FigSignalErrorAt();
    v8 = 0;
    goto LABEL_22;
  }
  v14 = Count;
  v8 = (char *)malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  v15 = 0;
  v16 = v8;
  do
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v10[11], v15);
    if (!ValueAtIndex
      || (v18 = ValueAtIndex, v19 = CFGetTypeID(ValueAtIndex), v19 != CFNumberGetTypeID())
      || !CFNumberGetValue(v18, kCFNumberSInt32Type, v16))
    {
      v22 = FigSignalErrorAt();
LABEL_25:
      v9 = v22;
      goto LABEL_22;
    }
    ++v15;
    v16 += 4;
  }
  while (v14 != v15);
  BytePtr = CFDataGetBytePtr((CFDataRef)v10[12]);
  v21 = CFDataGetLength((CFDataRef)v10[12]);
  v22 = V2qUlL4PZ5VKVXDsUHg5z((uint64_t)BytePtr, v21, (uint64_t)v8, v13, (uint64_t)&v25);
  if ((_DWORD)v22)
    goto LABEL_25;
  *(_QWORD *)&v26 = v25;
  tgrNklBQEZq9N92((uint64_t)&v26);
  if ((_DWORD)v22)
    goto LABEL_25;
  v23 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)length[0], LODWORD(length[1]));
  if (v23)
  {
    v9 = 0;
    *a4 = v23;
  }
  else
  {
    v9 = 4294955145;
  }
LABEL_22:
  MEMORY[0x19402EF04](v10[1]);
LABEL_23:
  free(v8);
  return v9;
}

CFMutableDictionaryRef createAPCustomURLResponseFromContentKeyResponse(uint64_t a1, uint64_t a2, __CFError *a3)
{
  CFTypeRef v5;
  const void *v6;
  CFMutableDictionaryRef Mutable;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  CFTypeRef v12;
  double v13;
  CFAbsoluteTime Current;
  CMTime v16;
  CFTypeRef v17;

  v17 = 0;
  v5 = FigCFHTTPCreateURLString(*(const __CFURL **)(a1 + 24));
  if (!v5)
    return 0;
  v6 = v5;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_19;
  if (a3)
    CFErrorGetCode(a3);
  FigCFDictionarySetInt64();
  FigCFDictionarySetValue();
  FigCFDictionarySetCFIndex();
  if (!a2)
    goto LABEL_19;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    v10 = MEMORY[0x19402D578](DerivedStorage + 16);
    if (v10)
    {
      v11 = (const void *)v10;
      itemairplay_StartKeyExchangeAndCreateKeyResponseForAirPlay(v10, Mutable, &v17);
      v12 = v17;
      if (v17)
      {
        FigCFDictionarySetValue();
        goto LABEL_11;
      }
      FigSignalErrorAt();
      CFRelease(v6);
LABEL_20:
      CFRelease(v11);
      return Mutable;
    }
    FigSignalErrorAt();
LABEL_19:
    v11 = v6;
    goto LABEL_20;
  }
  FigCFDictionarySetValue();
  v12 = 0;
  v11 = 0;
LABEL_11:
  FigCFDictionarySetValue();
  if (*(_QWORD *)(v9 + 72))
  {
    v13 = MEMORY[0x194029D14]();
    Current = CFAbsoluteTimeGetCurrent();
    memset(&v16, 0, sizeof(v16));
    CMTimeMakeWithSeconds(&v16, v13 - Current, 1000);
    FigCFDictionarySetCMTime();
  }
  CFRelease(v6);
  if (v12)
    CFRelease(v12);
  if (v11)
    goto LABEL_20;
  return Mutable;
}

CFTypeRef createAPCustomURLResponseFromLocalCustomURLResponse(uint64_t a1, uint64_t a2, uint64_t a3, __CFError *a4)
{
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  CFTypeRef v10;
  int v11;
  OpaqueCMBlockBuffer *v12;
  uint64_t DerivedStorage;
  double v14;
  CFAbsoluteTime Current;
  __CFDictionary *v16;
  CMTime v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef cf;
  CFIndex Code;
  const void *v26;

  v26 = 0;
  cf = 0;
  Code = 0;
  v22 = 0;
  v23 = 0;
  v20 = 0;
  blockBufferOut = 0;
  v19 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable && !FigCustomURLRequestInfoCopyURL())
  {
    v10 = FigCFHTTPCreateURLString((const __CFURL *)cf);
    if (!v10)
      goto LABEL_22;
    if (a2)
    {
      FigCustomURLResponseInfoCopyHTTPHeaders();
      FigCustomURLResponseInfoCopyContentRenewalDate();
      v11 = FigCustomURLResponseInfoCopyUniversalTypeIdentifier();
      if (v11 != -17360 && v11)
        goto LABEL_19;
      if (!a4)
      {
        FigCustomURLResponseInfoGetHTTPStatusCode();
        goto LABEL_11;
      }
    }
    else if (!a4)
    {
      goto LABEL_11;
    }
    Code = CFErrorGetCode(a4);
LABEL_11:
    v12 = *(OpaqueCMBlockBuffer **)(a1 + 40);
    if (v12
      && (CMBlockBufferCreateContiguous(v8, v12, v8, 0, 0, 0, 0, &blockBufferOut)
       || FigCreateCFDataWithBlockBufferNoCopy()))
    {
      goto LABEL_20;
    }
    FigCFDictionarySetInt64();
    FigCFDictionarySetValue();
    FigCFDictionarySetCFIndex();
    if (!FigCFEqual()
      || (DerivedStorage = CMBaseObjectGetDerivedStorage(),
          airplayCryptor_setPackagedAndRawPersistentKey(*(_QWORD *)(DerivedStorage + 840), v26),
          itemairplay_StartKeyExchangeAndCreateKeyResponseForAirPlay(a3, Mutable, &v19),
          v19))
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (v22)
      {
        v14 = MEMORY[0x194029D14]();
        Current = CFAbsoluteTimeGetCurrent();
        memset(&v18, 0, sizeof(v18));
        CMTimeMakeWithSeconds(&v18, v14 - Current, 1000);
        FigCFDictionarySetCMTime();
      }
      v16 = 0;
      goto LABEL_21;
    }
LABEL_19:
    FigSignalErrorAt();
LABEL_20:
    v16 = Mutable;
    Mutable = 0;
LABEL_21:
    CFRelease(v10);
    v10 = Mutable;
    Mutable = v16;
    goto LABEL_22;
  }
  v10 = 0;
LABEL_22:
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
  if (v26)
    CFRelease(v26);
  if (Mutable)
    CFRelease(Mutable);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  return v10;
}

void pap_PlaybackSessionPerformRemoteAction(const void *a1, const void *a2, int a3, NSObject *a4, const void *a5, const void *a6, uint64_t a7, const void *a8)
{
  _QWORD v8[10];

  if (a1)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __pap_PlaybackSessionPerformRemoteAction_block_invoke;
    v8[3] = &__block_descriptor_80_e5_v8__0l;
    v8[4] = a1;
    v8[5] = a2;
    v8[6] = a6;
    v8[7] = a5;
    v8[8] = a7;
    v8[9] = a8;
    pap_DispatchHelper(a1, a2, (uint64_t)v8, a3, a4, a5, a6, a8);
  }
}

void pap_playbackSessionRequestForStreamingKeyCompletion(int a1, const void *a2, CFMutableDataRef theData)
{
  UInt8 *MutableBytePtr;
  UInt8 *v7;
  uint64_t DerivedStorage;
  NSObject *v9;
  _QWORD v10[7];
  int v11;

  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  if (MutableBytePtr)
  {
    v7 = MutableBytePtr;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a2)
      CFRetain(a2);
    v9 = *(NSObject **)(DerivedStorage + 104);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __pap_playbackSessionRequestForStreamingKeyCompletion_block_invoke;
    v10[3] = &__block_descriptor_60_e5_v8__0l;
    v11 = a1;
    v10[4] = a2;
    v10[5] = v7;
    v10[6] = theData;
    dispatch_async(v9, v10);
  }
}

uint64_t itemairplay_StartKeyExchangeAndCreateKeyResponseForAirPlay(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  _BYTE *v7;
  CFDataRef *v8;
  CFDataRef *v9;
  int v10;
  uint64_t v11;
  __CFDictionary *v12;
  __CFDictionary *v13;
  const __CFAllocator *v14;
  __CFData *Mutable;
  __CFData *v16;
  UInt8 *MutableBytePtr;
  UInt8 *v18;
  uint64_t started;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  NSObject *v22;
  CFTypeID v23;
  const void *v24;
  const void *v25;
  const __CFData *v26;
  CFTypeRef v27;
  dispatch_time_t v28;
  const __CFData *v30;
  int KeyResponseForAirPlay;
  CFTypeRef *v32;
  NSObject *object;
  CFTypeRef cf;
  void *value;
  UInt8 *v36;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v36 = 0;
  cf = 0;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    v6 = 0;
    goto LABEL_46;
  }
  if (!a2)
  {
    v6 = 0;
    v11 = 4294954516;
    goto LABEL_8;
  }
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v7 || *v7 || (v8 = (CFDataRef *)CMBaseObjectGetDerivedStorage(), *(_BYTE *)v8))
  {
LABEL_46:
    v11 = 4294954511;
LABEL_8:
    FigReadWriteLockUnlockForRead();
    v12 = 0;
    v13 = 0;
    goto LABEL_30;
  }
  v9 = v8;
  v10 = pap_AirPlayState(v6);
  v11 = 0;
  if (!v10 || v10 == 10)
    goto LABEL_8;
  object = dispatch_semaphore_create(0);
  if (!object)
  {
    v11 = 4294954510;
    goto LABEL_8;
  }
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 32);
  if (Mutable)
  {
    v16 = Mutable;
    CFDataSetLength(Mutable, 32);
    MutableBytePtr = CFDataGetMutableBytePtr(v16);
    if (MutableBytePtr)
    {
      v18 = MutableBytePtr;
      v12 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v12)
      {
        started = airplayCryptor_StartKeyExchangeForAirPlay(*(_QWORD *)(DerivedStorage + 840), &v36, (CFDataRef *)&value);
        if ((_DWORD)started)
        {
          v11 = started;
          FigSignalErrorAt();
          v21 = 0;
          v13 = 0;
          goto LABEL_17;
        }
        v32 = a3;
        CFDictionaryAddValue(v12, CFSTR("CSKRO_RemoteContext"), value);
        FigCFDictionarySetInt64();
        v13 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v13)
        {
          v20 = (const __CFDictionary *)CFPropertyListCreateWithData(v14, v9[8], 0, 0, 0);
          v21 = v20;
          if (!v20)
            goto LABEL_16;
          v23 = CFGetTypeID(v20);
          if (v23 != CFDictionaryGetTypeID())
            goto LABEL_16;
          v24 = CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E0CA4D10]);
          if (!v24)
            goto LABEL_16;
          v25 = v24;
          v9[12] = (CFDataRef)CFRetain(v24);
          v26 = (const __CFData *)CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E0CA4D48]);
          v9[11] = v26;
          if (!v26)
            goto LABEL_16;
          CFRetain(v26);
          CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0CA3E48], a2);
          CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0CA3DF8], v12);
          CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0CA3D20], v25);
          CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0CA3DA8], (const void *)*MEMORY[0x1E0C9AE50]);
          v22 = object;
          *((_QWORD *)v18 + 1) = object;
          dispatch_retain(object);
          *(_QWORD *)v18 = v6;
          if (v6)
          {
            CFRetain(v6);
            CFRetain(v16);
            v27 = CFRetain(v6);
            pap_PlaybackSessionPerformRemoteAction(v27, v6, 1, object, (const void *)*MEMORY[0x1E0CA3C00], v13, (uint64_t)pap_playbackSessionRequestForStreamingKeyCompletion, v16);
            if (v27)
              CFRelease(v27);
          }
          else
          {
            CFRetain(v16);
            pap_PlaybackSessionPerformRemoteAction(0, 0, 1, object, (const void *)*MEMORY[0x1E0CA3C00], v13, (uint64_t)pap_playbackSessionRequestForStreamingKeyCompletion, v16);
          }
          v28 = dispatch_time(0, 8000000000);
          if (dispatch_semaphore_wait(object, v28))
          {
            v11 = FigSignalErrorAt();
            goto LABEL_27;
          }
          v11 = *((unsigned int *)v18 + 6);
          v30 = (const __CFData *)*((_QWORD *)v18 + 2);
          *((_QWORD *)v18 + 2) = 0;
          if ((_DWORD)v11 || !v30)
            goto LABEL_27;
          KeyResponseForAirPlay = airplayCryptor_CreateKeyResponseForAirPlay(*(_QWORD *)(DerivedStorage + 840), (uint64_t)v36, v30, (CFDataRef *)&cf);
          CFRelease(v30);
          if (!KeyResponseForAirPlay)
          {
            v11 = 0;
            *v32 = cf;
            cf = 0;
          }
          else
          {
LABEL_16:
            v11 = FigSignalErrorAt();
          }
LABEL_17:
          v22 = object;
LABEL_27:
          CFRelease(v16);
          goto LABEL_28;
        }
        v21 = 0;
      }
      else
      {
        v21 = 0;
        v13 = 0;
      }
    }
    else
    {
      v21 = 0;
      v13 = 0;
      v12 = 0;
    }
    v11 = 4294954510;
    goto LABEL_17;
  }
  v12 = 0;
  v13 = 0;
  v21 = 0;
  v11 = 4294954510;
  v22 = object;
LABEL_28:
  dispatch_release(v22);
  FigReadWriteLockUnlockForRead();
  if (v21)
    CFRelease(v21);
LABEL_30:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (v6)
    CFRelease(v6);
  return v11;
}

void __pap_playbackSessionRequestForStreamingKeyCompletion_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  const __CFDictionary *v6;
  const __CFDictionary *Value;
  const __CFNumber *v8;
  const void *v9;
  int valuePtr;

  valuePtr = 0;
  v2 = *(_DWORD *)(a1 + 56);
  if (v2)
    goto LABEL_2;
  v6 = *(const __CFDictionary **)(a1 + 32);
  if (!v6)
  {
    v2 = -12860;
LABEL_2:
    valuePtr = v2;
    goto LABEL_3;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA3D68]);
  if (!Value
    || (v8 = (const __CFNumber *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CA3C38])) == 0
    || (CFNumberGetValue(v8, kCFNumberIntType, &valuePtr), (v2 = valuePtr) == 0))
  {
    v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E0CA3EB8]);
    if (v9)
      v9 = CFRetain(v9);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) = v9;
    v2 = valuePtr;
  }
LABEL_3:
  v3 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 24) = v2;
  v4 = *(NSObject **)(v3 + 8);
  if (v4)
  {
    dispatch_semaphore_signal(v4);
    dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 40) + 8));
    v3 = *(_QWORD *)(a1 + 40);
  }
  if (*(_QWORD *)v3)
    CFRelease(*(CFTypeRef *)v3);
  CFRelease(*(CFTypeRef *)(a1 + 48));
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
}

void playerairplay_ContentKeyDataCallback(const void *a1, uint64_t a2, uint64_t a3, __CFError *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v9;
  CFMutableDictionaryRef APCustomURLResponseFromContentKeyResponse;
  CFMutableDictionaryRef v11;
  const void *v12;
  _BYTE *v13;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v17;
  _QWORD block[9];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 656);
  do
  {
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_10;
  }
  while (v9[2] != a2);
  APCustomURLResponseFromContentKeyResponse = createAPCustomURLResponseFromContentKeyResponse((uint64_t)v9, a3, a4);
  if (!APCustomURLResponseFromContentKeyResponse)
  {
LABEL_10:
    playerairplay_freeContentKeyRequestListEntry(v9);
    return;
  }
  v11 = APCustomURLResponseFromContentKeyResponse;
  v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v13 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v13 || (v14 = v13, *v13))
  {
    FigSignalErrorAt();
  }
  else
  {
    v15 = *(_QWORD **)(DerivedStorage + 656);
    if (v15 == v9)
    {
      v16 = (_QWORD *)(DerivedStorage + 656);
    }
    else
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15 != v9);
    }
    *v16 = *v9;
    if (a1)
      CFRetain(a1);
    if (v12)
      CFRetain(v12);
    CFRetain(v11);
    v17 = *((_QWORD *)v14 + 13);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __playerairplay_ContentKeyDataCallback_block_invoke;
    block[3] = &__block_descriptor_72_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = v12;
    block[6] = v11;
    block[7] = v9;
    block[8] = a1;
    dispatch_async(v17, block);
  }
  playerairplay_freeContentKeyRequestListEntry(v9);
  CFRelease(v11);
  if (v12)
    CFRelease(v12);
}

void playerairplay_freeContentKeyRequestListEntry(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  free(a1);
}

void playerairplay_freeCustomURLRequestListEntry(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  free(a1);
}

void __playerairplay_customURLResponseHandlerCommon_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  CFTypeRef v7;
  uint64_t v8;
  _BOOL4 BooleanPropertySync;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;

  FigReadWriteLockLockForRead();
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 72) && *(_BYTE *)(v2 + 732))
  {
    v6 = *(const void **)(a1 + 40);
    if (v6)
    {
      v7 = CFRetain(v6);
      v8 = *(_QWORD *)(a1 + 40);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v7, v8, *MEMORY[0x1E0CA3F88]);
    if (*(_BYTE *)(a1 + 72))
    {
      v10 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v10 + 848))
        FigAirPlaySecureStopRouterCommitToDisk(*(_QWORD *)(v10 + 856));
    }
    if (BooleanPropertySync
      || !CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 48), (const void *)*MEMORY[0x1E0CA2E98]))
    {
      if (dword_1EE2A2FA0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      pap_PlaybackSessionPerformRemoteAction(v7, *(const void **)(a1 + 40), 0, 0, (const void *)*MEMORY[0x1E0CA3C08], *(const void **)(a1 + 48), 0, 0);
      if (v7)
        goto LABEL_24;
    }
    else
    {
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      itemairplay_postFailNotificationWithError(*(const void **)(a1 + 64), -17224);
      if (v7)
LABEL_24:
        CFRelease(v7);
    }
  }
  FigReadWriteLockUnlockForRead();
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 64);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
}

void pap_playbackSessionGetTimedMetadataCompletion(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  v7 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionGetTimedMetadataCompletion_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = DerivedStorage;
  block[5] = a2;
  block[6] = a4;
  dispatch_async(v7, block);
}

void __pap_playbackSessionGetTimedMetadataCompletion_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2;
  const void *v3;
  const void *v4;
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  const __CFArray *v8;
  const __CFAllocator *v9;
  CFMutableArrayRef Mutable;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *MutableCopy;
  const __CFString *Value;
  CFLocaleRef v17;
  CFLocaleRef v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *values[17];

  values[16] = *(void **)MEMORY[0x1E0C80C00];
  if (**(_BYTE **)(a1 + 32) || (v5 = *(const void **)(a1 + 40)) == 0)
  {
LABEL_2:
    v2 = 0;
    goto LABEL_3;
  }
  v6 = CFGetTypeID(v5);
  TypeID = CFArrayGetTypeID();
  v8 = *(const __CFArray **)(a1 + 40);
  if (v6 != TypeID)
  {
    if (v8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_2;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  values[0] = Mutable;
  Count = CFArrayGetCount(v8);
  if (Count >= 1)
  {
    v12 = Count;
    for (i = 0; i != v12; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
      if (CFDictionaryGetValue(ValueAtIndex, CFSTR("locale")))
      {
        MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, ValueAtIndex);
        Value = (const __CFString *)CFDictionaryGetValue(MutableCopy, CFSTR("locale"));
        if (Value)
        {
          v17 = CFLocaleCreate(v9, Value);
          if (v17)
          {
            v18 = v17;
            CFDictionaryAddValue(MutableCopy, CFSTR("locale"), v17);
            CFRelease(v18);
          }
        }
        CFArrayAppendValue(Mutable, MutableCopy);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
      else
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  v2 = CFDictionaryCreate(v9, (const void **)kFigPlayerTimedMetadataNotificationKey_ValueArray, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v2)
    playerairplay_postPlayerNotification(*(const void **)(a1 + 48), CFSTR("TimedMetadata"), v2);
  if (values[0])
    CFRelease(values[0]);
LABEL_3:
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
}

const __CFDictionary *playerairplay_createItemDidChangeNotificationPayload(const __CFDictionary *result)
{
  void *values;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("ReasonForCurrentItemDidChange"));
    values = result;
    if (result)
      return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlayerParameter_ReasonForCurrentItemDidChange, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  return result;
}

uint64_t playqueue_getNumItemsInMediaControlPlaylist(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  v2 = *(unsigned int *)(a1 + 20);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 8));
  return v2;
}

void pap_stopAirPlayVideoPlayback(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  void (*v7)(CFTypeRef, __int128 *);
  const void *v8;
  const void *v9;
  const void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v12;
  dispatch_semaphore_t v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  void (*v17)(const void *, void (*)(uint64_t, uint64_t), _QWORD *);
  dispatch_time_t v18;
  const __CFArray *PlayQueueSnapshot;
  const __CFArray *v20;
  const void *ValueAtIndex;
  CFTypeRef cf;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368);
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(DerivedStorage + 32), 0, (unint64_t)&cf);
  v4 = CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    v5 = v4;
    v25 = *MEMORY[0x1E0CA2E18];
    v26 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    FigReadWriteLockLockForRead();
    if (!*(_BYTE *)(v5 + 72))
      itemairplay_controlPlaybackActivityTimer((uint64_t)cf, 0);
    v6 = cf;
    v7 = *(void (**)(CFTypeRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v7)
      v7(v6, &v25);
    v23 = v25;
    v24 = v26;
    itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)cf, (uint64_t)&v23);
    v8 = *(const void **)(v5 + 840);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v5 + 840) = 0;
    }
    v9 = *(const void **)(v5 + 856);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v5 + 856) = 0;
    }
    v10 = *(const void **)(v5 + 48);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v5 + 48) = 0;
    }
    if (*(_BYTE *)(v5 + 56))
    {
      FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(v5 + 16));
      *(_BYTE *)(v5 + 56) = 0;
    }
    FigReadWriteLockUnlockForRead();
  }
  if (dword_1EE2A2FA0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  pap_setAirPlayState(a1, 17);
  if (!v3)
  {
    v12 = *(const void **)(DerivedStorage + 280);
    if (v12)
    {
      if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
      {
        v13 = dispatch_semaphore_create(0);
        if (v13)
        {
          v14 = v13;
          v15 = malloc_type_calloc(1uLL, 0x18uLL, 0xA0040E93CF5C4uLL);
          if (v15)
          {
            v16 = v15;
            *v15 = a1;
            if (a1)
              CFRetain(a1);
            v16[1] = v12;
            CFRetain(v12);
            v16[2] = v14;
            dispatch_retain(v14);
            v17 = *(void (**)(const void *, void (*)(uint64_t, uint64_t), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (v17)
              v17(v12, pap_playbackSessionStopCompletion, v16);
            v18 = dispatch_time(0, 100000000);
            dispatch_semaphore_wait(v14, v18);
          }
          else
          {
            FigSignalErrorAt();
          }
          dispatch_release(v14);
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
  PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(_QWORD *)(DerivedStorage + 32), 0);
  v20 = PlayQueueSnapshot;
  if (PlayQueueSnapshot && CFArrayGetCount(PlayQueueSnapshot) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v20, 0);
    CMBaseObjectGetDerivedStorage();
    FigReadWriteLockLockForRead();
    itemairplay_doCleanupAtEndOfPlayback();
    itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 1);
    playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(_QWORD *)(DerivedStorage + 32), ValueAtIndex, 0, 1);
  }
  playerairplay_resetAirPlayVideoState(a1);
  playerairplay_updateAirPlayVideoIsActiveProperty(a1);
  if (*(_QWORD *)(DerivedStorage + 280))
    pap_invalidateEndpointPlaybackSession(a1);
  playerairplay_postPlayerNotification(a1, CFSTR("IsAirPlayVideoActiveDidChange"), 0);
  playerairplay_cleanUpScrubLayerAndContext();
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
}

CFIndex playqueue_getIndexOfAirPlayItemInternal(CFArrayRef *a1, const void *a2)
{
  uint64_t Count;
  CFRange v6;

  Count = CFArrayGetCount(*a1);
  if (Count < 1)
    return -1;
  v6.length = Count;
  v6.location = 0;
  return CFArrayGetFirstIndexOfValue(*a1, v6, a2);
}

void pap_playbackSessionStopCompletion(uint64_t a1, uint64_t a2)
{
  NSObject *global_queue;
  _QWORD block[5];

  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionStopCompletion_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(global_queue, block);
}

void __pap_playbackSessionStopCompletion_block_invoke(uint64_t a1)
{
  CFTypeRef *v2;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 16));
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 16));
  v2 = *(CFTypeRef **)(a1 + 32);
  if (*v2)
  {
    CFRelease(*v2);
    v2 = *(CFTypeRef **)(a1 + 32);
  }
  if (v2[1])
  {
    CFRelease(v2[1]);
    v2 = *(CFTypeRef **)(a1 + 32);
  }
  free(v2);
}

void __pap_playbackSessionGetProxiedProperty_block_invoke(_QWORD *a1)
{
  const void *v2;
  __CFDictionary *Mutable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, __CFDictionary *, uint64_t, uint64_t);

  v2 = (const void *)a1[4];
  if (v2)
    Mutable = (__CFDictionary *)CFRetain(v2);
  else
    Mutable = 0;
  if (pap_ShouldUseInterstitialQueuing())
  {
    if (!Mutable)
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3D70], (const void *)*MEMORY[0x1E0C9AE50]);
  }
  v4 = a1[8];
  v5 = *(_QWORD *)(a1[7] + 280);
  v7 = a1[9];
  v6 = a1[10];
  v8 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 88);
  if (v8)
    v8(v5, v4, Mutable, v7, v6);
  if (Mutable)
    CFRelease(Mutable);
}

void __pap_playbackSessionGetMediaSelectionCompletion_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  CFTypeRef v7;
  NSObject *v8;
  _QWORD v9[5];
  __int128 v10;
  CFTypeRef v11;

  v11 = 0;
  v2 = a1[4];
  if (!*(_BYTE *)v2)
  {
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v2 + 32), 0, (unint64_t)&v11);
    if (v11)
    {
      v5 = (const void *)a1[5];
      if (v5)
        CFRetain(v5);
      v6 = (const void *)a1[6];
      if (v6)
        CFRetain(v6);
      if (v11)
      {
        CFRetain(v11);
        v7 = v11;
      }
      else
      {
        v7 = 0;
      }
      v8 = *(NSObject **)(a1[4] + 96);
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __pap_playbackSessionGetMediaSelectionCompletion_block_invoke_2;
      v9[3] = &__block_descriptor_56_e5_v8__0l;
      v9[4] = v7;
      v10 = *(_OWORD *)(a1 + 5);
      dispatch_async(v8, v9);
      if (v11)
        CFRelease(v11);
    }
  }
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

void __pap_playbackSessionGetMediaSelectionCompletion_block_invoke_2(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  const __CFArray *MutableCopy;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFArray *v7;
  const void *v8;
  __CFDictionary *Mutable;
  const void *v10;
  const void *v11;
  const void *v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v6 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6 && !v6(CMBaseObject, CFSTR("MediaSelectionArray"), v3, &cf))
  {
    v7 = (const __CFArray *)cf;
  }
  else
  {
    v7 = 0;
    cf = 0;
  }
  FigMediaSelectionGroupsMatchToMediaSelectionArray(MutableCopy, v7);
  v8 = *(const void **)(DerivedStorage + 368);
  *(_QWORD *)(DerivedStorage + 368) = MutableCopy;
  if (MutableCopy)
    CFRetain(MutableCopy);
  if (v8)
    CFRelease(v8);
  FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(*(const __CFArray **)(DerivedStorage + 352), *(CFArrayRef *)(DerivedStorage + 368), 1);
  if (*(_QWORD *)(DerivedStorage + 368))
  {
    Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("CurrentSelectedMediaArray"), *(const void **)(DerivedStorage + 368));
  }
  else
  {
    Mutable = 0;
  }
  itemairplay_postItemNotification(*(const void **)(a1 + 32), CFSTR("SelectedMediaOptionsDidChange"), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  v10 = *(const void **)(a1 + 32);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 48);
  if (v11)
    CFRelease(v11);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (cf)
    CFRelease(cf);
  v12 = *(const void **)(a1 + 40);
  if (v12)
    CFRelease(v12);
}

void playerairplay_setAndCacheAudioMode(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t CMBaseObject;
  unsigned int (*v10)(uint64_t, const __CFString *, const __CFString *);
  CFTypeRef v11;
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v6 = CFSTR("AudioMode_MoviePlayback");
    v7 = *MEMORY[0x1E0CA3C18];
  }
  else
  {
    v6 = CFSTR("AudioMode_Default");
    v7 = *MEMORY[0x1E0CA3C10];
    if (FigCFEqual())
      v6 = CFSTR("AudioMode_SpokenAudio");
  }
  v8 = *(_QWORD *)(DerivedStorage + 296);
  if (!v8
    || (CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v8),
        (v10 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 56)) != 0)
    && !v10(CMBaseObject, CFSTR("AudioMode"), v6))
  {
    if (a1)
    {
      v11 = CFRetain(a1);
      v12 = pap_PlaybackSessionSetPropertySync((uint64_t)v11, (uint64_t)a1, *MEMORY[0x1E0CA3F58], v7);
      if (v11)
        CFRelease(v11);
      if (!a3)
        return;
    }
    else
    {
      v12 = pap_PlaybackSessionSetPropertySync(0, 0, *MEMORY[0x1E0CA3F58], v7);
      if (!a3)
        return;
    }
    if (!v12)
    {
      CMBaseObjectGetDerivedStorage();
      FigCFDictionarySetValue();
    }
  }
}

void pap_videoSyncTimerEventHandler()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;
  CMTimeEpoch v3;
  uint64_t v4;
  uint64_t v5;
  OpaqueCMTimebase *v6;
  const __CFAllocator *v7;
  CFDictionaryRef v8;
  __int128 v9;
  CMTime v10;
  CMTime time;
  CMTime rhs;
  CMTime v13;
  CFTypeRef v14;
  CMTime lhs;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v14 = 0;
    v9 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&v13.value = *MEMORY[0x1E0CA2E18];
    v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v13.epoch = v3;
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(DerivedStorage + 32), 0, (unint64_t)&v14);
    v4 = CMBaseObjectGetDerivedStorage();
    if (v14)
    {
      v5 = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&lhs.value = v9;
      lhs.epoch = v3;
      MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 592));
      v6 = *(OpaqueCMTimebase **)(v5 + 584);
      if (v6)
        CMTimebaseGetTime(&lhs, v6);
      MEMORY[0x19402EF04](*(_QWORD *)(v5 + 592));
      CMTimebaseGetTime(&rhs, *(CMTimebaseRef *)(v4 + 576));
      CMTimeSubtract(&v13, &lhs, &rhs);
      if (v14)
        CFRelease(v14);
    }
    time = v13;
    CMTimeAbsoluteValue(&v10, &time);
    lhs.value = v10.value;
    lhs.timescale = v10.timescale;
    if ((v10.flags & 1) != 0)
    {
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v13.value = lhs.value;
      v13.timescale = lhs.timescale;
      v13.flags = v10.flags;
      v13.epoch = v10.epoch;
      v8 = CMTimeCopyAsDictionary(&v13, v7);
      pap_PlaybackSessionSetPropertySync((uint64_t)v1, (uint64_t)v1, *MEMORY[0x1E0CA3FA0], (uint64_t)v8);
      if (v8)
        CFRelease(v8);
    }
    CFRelease(v1);
  }
}

void __playerairplay_performAirPlayVodkaExchange_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  _QWORD *v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  char v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  const void *v23;
  _QWORD v24[5];
  __int128 v25;
  uint64_t v26;
  _QWORD block[8];
  char v28;

  v4 = objc_msgSend(a2, "objectForKey:", CFSTR("Error"));
  if (!**(_BYTE **)(a1 + 32))
  {
    v5 = (void *)v4;
    FigReadWriteLockLockForRead();
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(v6 + 72))
    {
LABEL_29:
      FigReadWriteLockUnlockForRead();
      goto LABEL_30;
    }
    if (v5)
    {
      if (objc_msgSend(v5, "code"))
      {
        if (!*(_BYTE *)(a1 + 72) || !pap_isLocalFileURL(*(const __CFURL **)(*(_QWORD *)(a1 + 40) + 88), 0))
        {
          v12 = *(const void **)(a1 + 48);
          if (v12)
            CFRetain(v12);
          v13 = *(const void **)(a1 + 56);
          if (v13)
            CFRetain(v13);
          CFRetain(v5);
          v14 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 104);
          v24[0] = MEMORY[0x1E0C809B0];
          v24[1] = 3221225472;
          v24[2] = __playerairplay_performAirPlayVodkaExchange_block_invoke_3;
          v24[3] = &unk_1E2F99108;
          v25 = *(_OWORD *)(a1 + 40);
          v26 = *(_QWORD *)(a1 + 56);
          v24[4] = v5;
          v15 = v24;
          goto LABEL_27;
        }
        v7 = itemairplay_createCPEProtectorIfAvailable(*(_QWORD *)(a1 + 48), 0, &v28);
        if (v7)
        {
          v8 = v7;
          v9 = *(const void **)(a1 + 48);
          if (v9)
            CFRetain(v9);
          v10 = *(const void **)(a1 + 56);
          if (v10)
          {
            CFRetain(v10);
            v11 = *(_QWORD *)(a1 + 56);
          }
          else
          {
            v11 = 0;
          }
          v20 = *(_QWORD *)(a1 + 32);
          v14 = *(NSObject **)(v20 + 104);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __playerairplay_performAirPlayVodkaExchange_block_invoke_2;
          block[3] = &__block_descriptor_64_e5_v8__0l;
          block[4] = v20;
          block[5] = v11;
          block[6] = *(_QWORD *)(a1 + 48);
          block[7] = v8;
          v15 = block;
LABEL_27:
          dispatch_async(v14, v15);
          goto LABEL_28;
        }
        v17 = *(_QWORD *)(a1 + 40);
        v19 = 1;
LABEL_23:
        *(_BYTE *)(v17 + 735) = v19;
LABEL_28:
        playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(*(_QWORD *)(a1 + 56));
        goto LABEL_29;
      }
      v6 = *(_QWORD *)(a1 + 40);
    }
    v16 = *(const void **)(v6 + 440);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 440) = 0;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 440) = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("AirPlayParams"));
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(const void **)(v17 + 440);
    if (v18)
    {
      CFRetain(v18);
      v17 = *(_QWORD *)(a1 + 40);
    }
    v19 = 3;
    goto LABEL_23;
  }
LABEL_30:
  v21 = *(const void **)(a1 + 64);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(a1 + 48);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(a1 + 56);
  if (v23)
    CFRelease(v23);
}

void __playerairplay_performAirPlayVodkaExchange_block_invoke_2(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (!**(_BYTE **)(a1 + 32))
    playerairplay_performAirPlayVodkaExchange(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0);
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
}

void __playerairplay_performAirPlayVodkaExchange_block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (void *)MEMORY[0x19403137C]();
  v3 = *(void **)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 735) = 4;
  itemairplay_playMediaCompletionHandler(v3, *(const void **)(a1 + 56), objc_msgSend(*(id *)(a1 + 32), "code"));
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 56);
  if (v6)
    CFRelease(v6);
  objc_autoreleasePoolPop(v2);
}

uint64_t pap_applyCachedPropertiesOnMediaControl(uint64_t result, const void *a2, void *a3)
{
  const void *v5;
  uint64_t v6;
  const void *v7;
  _BYTE *DerivedStorage;
  _BYTE *v9;
  CFTypeRef v10;
  const void *v11;
  CFMutableDictionaryRef ProxiedPropertyParams;
  const void *v13;
  const void *Value;
  const void *v15;
  const __CFNumber *v16;
  CFNumberRef v17;
  double v18;
  double v19;
  CFDateRef v20;
  const __CFDictionary *v21;
  const __CFBoolean *v22;
  int v23;
  char v24;
  const __CFNumber *v25;
  int v26;
  uint64_t v27;
  const __CFNumber *v28;
  CFTypeRef v29;
  const void *v30;
  const void *v31;
  CFMutableDictionaryRef v32;
  const void *v33;
  CMClockRef HostTimeClock;
  CMTime *v35;
  CMTime *p_lhs;
  const void *v37;
  __CFDictionary *v38;
  int v39;
  int v40;
  CMTime v41;
  float v42;
  CMTime rhs;
  CMTime valuePtr;
  CMTime v45;
  CFMutableDictionaryRef v46;
  CMTime lhs;
  void *v48;
  CFTypeRef v49;
  uint64_t v50;
  const __CFNumber *v51;
  void *v52;
  const void *v53;
  int v54;

  v46 = 0;
  if (result)
  {
    if (a2)
    {
      v5 = (const void *)result;
      result = CMBaseObjectGetDerivedStorage();
      if (result)
      {
        v6 = result;
        FigReadWriteLockLockForRead();
        if (*(_BYTE *)(v6 + 72))
          return FigReadWriteLockUnlockForRead();
        v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
        if (!DerivedStorage || (v9 = DerivedStorage, *DerivedStorage))
        {
          v10 = 0;
          goto LABEL_36;
        }
        if (v7)
          v10 = CFRetain(v7);
        else
          v10 = 0;
        v11 = (const void *)*MEMORY[0x1E0CA4020];
        if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA4020]))
        {
          ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
          pap_playbackSessionSetProxiedProperty(v10, v7, v11, a2, ProxiedPropertyParams, 0);
          v13 = *(const void **)(v6 + 360);
          *(_QWORD *)(v6 + 360) = a2;
          CFRetain(a2);
          if (v13)
          {
            CFRelease(v13);
            if (!v7)
              goto LABEL_39;
            goto LABEL_38;
          }
          goto LABEL_37;
        }
        if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA3FC0]))
        {
          Value = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("Date"));
          if (Value)
          {
            v15 = Value;
            v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("SeekID"));
            LODWORD(v41.value) = 0;
            if (v16)
              CFNumberGetValue(v16, kCFNumberSInt32Type, &v41);
            if (v9[448] || FigGetCFPreferenceBooleanWithDefault())
            {
              valuePtr = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
              itemairplay_copyCurrentDateAndTime(a3, &v46);
              v17 = v46;
              if (v46)
              {
                FigDateTimeMakeFromDictionary(v46, (uint64_t)&lhs);
                v45 = lhs;
                if (BYTE1(v49))
                {
                  if ((_BYTE)v49)
                  {
                    v18 = *(double *)&v48;
                    v19 = MEMORY[0x194029D14](v15);
                    CMTimeMakeWithSeconds(&rhs, v19 - v18, 1000);
                    lhs = v45;
                    CMTimeAdd(&valuePtr, &lhs, &rhs);
                    v20 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18);
                    lhs = valuePtr;
                    pap_PlaybackSessionSeekToTime(v10, a3, (__int128 *)&lhs.value, LODWORD(v41.value) != 0, v41.value, 0);
                    if (v20)
                      CFRelease(v20);
                  }
                }
                goto LABEL_35;
              }
            }
            else
            {
              v26 = v41.value;
              v27 = CMBaseObjectGetDerivedStorage();
              v28 = (const __CFNumber *)FigCFWeakReferenceHolderCopyReferencedObject();
              if (v28)
              {
                v17 = v28;
                lhs.value = MEMORY[0x1E0C809B0];
                *(_QWORD *)&lhs.timescale = 3221225472;
                lhs.epoch = (CMTimeEpoch)__pap_PlaybackSessionSeekToDate_block_invoke;
                v48 = &__block_descriptor_76_e5_v8__0l;
                v49 = v10;
                v50 = v27;
                v51 = v28;
                v52 = a3;
                v54 = v26;
                v53 = v15;
                pap_DispatchHelper(v10, v28, (uint64_t)&lhs, 0, 0, a3, v15, 0);
LABEL_35:
                CFRelease(v17);
              }
            }
          }
LABEL_36:
          ProxiedPropertyParams = 0;
LABEL_37:
          if (!v7)
          {
LABEL_39:
            if (v10)
              CFRelease(v10);
            if (ProxiedPropertyParams)
              CFRelease(ProxiedPropertyParams);
            return FigReadWriteLockUnlockForRead();
          }
LABEL_38:
          CFRelease(v7);
          goto LABEL_39;
        }
        if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA3FD0]))
        {
          CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)pap_applyEnabledTrackPropertyOnMediaControl, a3);
          goto LABEL_36;
        }
        if (CFEqual(v5, CFSTR("SetPosition")))
        {
          v21 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("Time"));
          if (v21)
          {
            LODWORD(valuePtr.value) = 0;
            CMTimeMakeFromDictionary(&lhs, v21);
            v22 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("SendSeekNotification"));
            if (v22)
            {
              v23 = CFBooleanGetValue(v22);
              v24 = v23;
              if (v23)
              {
                v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("SeekID"));
                if (v25)
                  CFNumberGetValue(v25, kCFNumberSInt32Type, &valuePtr);
              }
            }
            else
            {
              v24 = 0;
            }
            v31 = (const void *)FigCFDictionaryGetValue();
            v45 = lhs;
            pap_PlaybackSessionSeekToTime(v10, a3, (__int128 *)&v45.value, v24, valuePtr.value, v31);
            if (*(_BYTE *)(v6 + 157))
              itemairplay_requestAirPlayPlaybackInfo(a3, 0, 1, 0);
          }
          goto LABEL_36;
        }
        if (CFEqual(v5, CFSTR("SetRate")))
        {
          v42 = 0.0;
          lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          v45 = lhs;
          FigCFDictionaryGetFloat32IfPresent();
          LODWORD(v29) = FigCFDictionaryGetCMTimeIfPresent();
          FigCFDictionaryGetCMTimeIfPresent();
          v30 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("SetRateOptions"));
          if (!(_DWORD)v29 && v9[448] && v42 != 0.0)
          {
            MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 592), v42);
            v33 = *(const void **)(v6 + 584);
            if (v33)
            {
              v29 = CFRetain(v33);
              MEMORY[0x19402EF04](*(_QWORD *)(v6 + 592));
              if (v29)
              {
                itemairplay_GetCurrentTime(a3, &v45);
                HostTimeClock = CMClockGetHostTimeClock();
                v41 = v45;
                CMSyncConvertTime(&valuePtr, &v41, v29, HostTimeClock);
                lhs = valuePtr;
                CFRelease(v29);
                LOBYTE(v29) = 1;
              }
            }
            else
            {
              MEMORY[0x19402EF04](*(_QWORD *)(v6 + 592));
              LOBYTE(v29) = 0;
            }
          }
          valuePtr = v45;
          v41 = lhs;
          pap_PlaybackSessionSetRate(v10, v7, (char)v29, (__int128 *)&valuePtr.value, (__int128 *)&v41.value, v30, 0, v42);
          goto LABEL_36;
        }
        if (CFEqual(v5, CFSTR("PlaybackRestrictions")))
        {
          v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(v6 + 720));
          v32 = itemairplay_createProxiedPropertyParams();
          pap_playbackSessionSetProxiedProperty(v10, v7, (const void *)*MEMORY[0x1E0CA3E10], v17, v32, 0);
          if (v32)
            CFRelease(v32);
          if (!v17)
            goto LABEL_36;
          goto LABEL_35;
        }
        if (CFEqual(v5, CFSTR("SetEndTime")))
        {
          lhs = *(CMTime *)(v6 + 448);
          v35 = (CMTime *)MEMORY[0x1E0CA2E18];
          p_lhs = &lhs;
          v37 = v7;
          v38 = (__CFDictionary *)a3;
          v39 = 1;
          v40 = 0;
        }
        else
        {
          if (!CFEqual(v5, CFSTR("ReverseEndTime")))
          {
            if (CFEqual(v5, CFSTR("TextMarkupArray")))
            {
              itemairplay_setItemTextMarkupArray((uint64_t)a3, a2);
              goto LABEL_36;
            }
            if (!CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA3FF0])
              && !CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA3FB8])
              && !CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA3FE0]))
            {
              if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA4038]) || CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA4040]))
              {
                if (!v9[249])
                  goto LABEL_36;
                memset(&lhs, 0, sizeof(lhs));
                CMTimeMakeFromDictionary(&lhs, (CFDictionaryRef)a2);
              }
              else
              {
                if (!CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA4028]))
                {
                  if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA3FC8]))
                    pap_playbackSessionSetProxiedProperty(v10, v7, v5, a2, 0, 0);
                  goto LABEL_36;
                }
                if (!v9[249])
                  goto LABEL_36;
              }
            }
            ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
            pap_playbackSessionSetProxiedProperty(v10, v7, v5, a2, ProxiedPropertyParams, 0);
            if (!v7)
              goto LABEL_39;
            goto LABEL_38;
          }
          lhs = *(CMTime *)(v6 + 472);
          p_lhs = (CMTime *)MEMORY[0x1E0CA2E18];
          v35 = &lhs;
          v37 = v7;
          v38 = (__CFDictionary *)a3;
          v39 = 0;
          v40 = 1;
        }
        playerairplay_setPlaybackEndTimes(v37, v38, p_lhs, v39, v35, v40);
        goto LABEL_36;
      }
    }
  }
  return result;
}

uint64_t itemairplay_copyCurrentDateAndTime(const void *a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  char v6;
  double v7;
  double v8;
  double v9;
  const __CFAllocator *v10;
  double v11;
  Float64 Seconds;
  CFMutableDictionaryRef v13;
  CMTime v14;
  double v15;
  __int16 v16;
  int v17;
  __int16 v18;
  CMTime rhs;
  CMTime time;
  CMTime v21;
  CMTime v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  itemairplay_GetCurrentTime(a1, &v21);
  if (*(_QWORD *)(DerivedStorage + 192)
    && !*(_BYTE *)(DerivedStorage + 224)
    && (*(_BYTE *)(DerivedStorage + 212) & 1) != 0)
  {
    v22 = v21;
    v11 = MEMORY[0x194029D14]();
    v14 = v21;
    rhs = *(CMTime *)(DerivedStorage + 200);
    CMTimeSubtract(&time, &v14, &rhs);
    Seconds = CMTimeGetSeconds(&time);
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = v22;
    v15 = v11 + Seconds;
    v16 = 257;
  }
  else
  {
    if ((*(_BYTE *)(DerivedStorage + 172) & 1) == 0)
      return 4294954513;
    v22 = v21;
    v6 = *(_BYTE *)(DerivedStorage + 320);
    v7 = 0.0;
    if (v6)
    {
      v6 = *(_BYTE *)(DerivedStorage + 321);
      if (v6)
      {
        v8 = *(double *)(DerivedStorage + 312);
        v14 = v21;
        v9 = v8 + CMTimeGetSeconds(&v14);
        v14 = *(CMTime *)(DerivedStorage + 288);
        v7 = v9 - CMTimeGetSeconds(&v14);
        v6 = 1;
      }
    }
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = v22;
    v15 = v7;
    LOBYTE(v16) = 1;
    HIBYTE(v16) = v6;
  }
  v17 = 0;
  v18 = 0;
  v13 = FigDateTimeMomentCopyAsDictionary((uint64_t)&v14, v10);
  result = 0;
  *a2 = v13;
  return result;
}

void pap_PlaybackSessionSeekToTime(const void *a1, const void *a2, __int128 *a3, char a4, int a5, const void *a6)
{
  uint64_t DerivedStorage;
  const void *v13;
  const void *v14;
  _QWORD v15[9];
  int v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v13)
  {
    v14 = v13;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __pap_PlaybackSessionSeekToTime_block_invoke;
    v15[3] = &__block_descriptor_101_e5_v8__0l;
    v15[4] = a1;
    v15[5] = a2;
    v16 = a5;
    v17 = *a3;
    v18 = *((_QWORD *)a3 + 2);
    v15[6] = DerivedStorage;
    v15[7] = v13;
    v15[8] = a6;
    v19 = a4;
    pap_DispatchHelper(a1, v13, (uint64_t)v15, 0, 0, a2, a6, 0);
    CFRelease(v14);
  }
}

void pap_applyEnabledTrackPropertyOnMediaControl(const __CFString *a1, const void *a2)
{
  const void *v4;
  CFTypeRef v5;
  CFMutableDictionaryRef ProxiedPropertyParams;

  CMBaseObjectGetDerivedStorage();
  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  CFStringGetIntValue(a1);
  if (v4)
    v5 = CFRetain(v4);
  else
    v5 = 0;
  ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
  FigCFDictionarySetInt32();
  pap_playbackSessionSetProxiedProperty(v5, v4, (const void *)*MEMORY[0x1E0CA3FD0], a2, ProxiedPropertyParams, 0);
  if (v5)
    CFRelease(v5);
  if (ProxiedPropertyParams)
    CFRelease(ProxiedPropertyParams);
  if (v4)
    CFRelease(v4);
}

uint64_t itemairplay_setItemTextMarkupArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _BYTE *v5;
  CFTypeRef v6;
  CFMutableDictionaryRef ProxiedPropertyParams;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(DerivedStorage + 72))
    return FigReadWriteLockUnlockForRead();
  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v5 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (v5 && !*v5)
  {
    if (v4)
      v6 = CFRetain(v4);
    else
      v6 = 0;
    ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
    pap_playbackSessionSetProxiedProperty(v6, v4, (const void *)*MEMORY[0x1E0CA4030], a2, ProxiedPropertyParams, 0);
    if (v6)
      CFRelease(v6);
    if (!v4)
      goto LABEL_11;
    goto LABEL_10;
  }
  ProxiedPropertyParams = 0;
  if (v4)
LABEL_10:
    CFRelease(v4);
LABEL_11:
  if (ProxiedPropertyParams)
    CFRelease(ProxiedPropertyParams);
  return FigReadWriteLockUnlockForRead();
}

void pap_playbackSessionSeekCompletion(const void *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD block[8];
  int v10;

  v6 = *a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v8 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionSeekCompletion_block_invoke;
  block[3] = &__block_descriptor_68_e5_v8__0l;
  block[4] = a3;
  block[5] = DerivedStorage;
  block[6] = a1;
  block[7] = v6;
  v10 = a2;
  dispatch_async(v8, block);
}

void __pap_playbackSessionSeekCompletion_block_invoke(uint64_t a1)
{
  uint64_t DerivedStorage;
  int CMTimeIfPresent;
  const void *v4;
  int v5;
  uint64_t v6;
  int v7;
  const __CFDictionary *Mutable;
  __int128 v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *MEMORY[0x1E0CA2E18];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 253))
    CMTimeIfPresent = FigCFDictionaryGetCMTimeIfPresent();
  else
    CMTimeIfPresent = 0;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(DerivedStorage + 72)
    || !pap_PlaybackSessionIsActive(*(CFTypeRef *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16)))
  {
    goto LABEL_5;
  }
  if (!*(_BYTE *)(DerivedStorage + 157))
  {
    v5 = *(_DWORD *)(a1 + 64);
    v6 = *(_QWORD *)(a1 + 32);
    if (!v5 && *(_BYTE *)(v6 + 28) && (v7 = *(_DWORD *)(v6 + 24), v7 == *(_DWORD *)(DerivedStorage + 144)))
    {
      *(_DWORD *)(DerivedStorage + 148) = v7;
      *(_BYTE *)(DerivedStorage + 156) = 0;
      if (!CMTimeIfPresent)
      {
        itemairplay_requestAirPlayPlaybackInfo(*(const void **)(v6 + 8), (_QWORD *)v6, 1, *(_BYTE *)(v6 + 30));
        goto LABEL_11;
      }
      if ((BYTE12(v9) & 1) != 0)
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetCMTime();
        itemairplay_getPlaybackInfoCompletionHandler(*(const void **)(*(_QWORD *)(a1 + 32) + 8), *(const void **)(a1 + 56), Mutable, *(_DWORD *)(a1 + 64), 1, 2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 30), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
        if (Mutable)
          CFRelease(Mutable);
      }
    }
    else
    {
      itemairplay_setPositionCompletionHandler(*(const void **)(v6 + 8), v5, *(unsigned __int8 *)(v6 + 28), *(unsigned int *)(v6 + 24), *(_QWORD *)(v6 + 56));
      itemairplay_requestAirPlayPlaybackInfo(*(const void **)(*(_QWORD *)(a1 + 32) + 8), 0, 1, *(_BYTE *)(*(_QWORD *)(a1 + 32) + 30));
    }
LABEL_5:
    FigReadWriteLockUnlockForRead();
    pap_PlaybackSessionFreeSeekCompletionContext(*(CFTypeRef **)(a1 + 32));
    goto LABEL_6;
  }
LABEL_11:
  FigReadWriteLockUnlockForRead();
LABEL_6:
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
}

void pap_playbackSessionSetRateCompletion(int a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  NSObject *v6;
  _QWORD block[8];
  int v8;

  v4 = *a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionSetRateCompletion_block_invoke;
  block[3] = &__block_descriptor_68_e5_v8__0l;
  block[4] = DerivedStorage;
  block[5] = v4;
  v8 = a1;
  block[6] = a2;
  block[7] = a2;
  dispatch_async(v6, block);
}

void __pap_playbackSessionSetRateCompletion_block_invoke(uint64_t a1)
{
  const void *v2;
  int v3;
  uint64_t v4;
  uint64_t DerivedStorage;
  float v6;
  int v7;
  BOOL v8;
  BOOL v9;
  float v10;
  CFTypeRef *v11;

  if (!**(_BYTE **)(a1 + 32)
    && pap_PlaybackSessionIsActive(*(CFTypeRef *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)))
  {
    v2 = *(const void **)(a1 + 40);
    v3 = *(_DWORD *)(a1 + 64);
    v4 = *(_QWORD *)(a1 + 56);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = *(float *)(v4 + 16);
    v7 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 56);
    v8 = v6 != 0.0 || v7 == 0;
    v9 = !v8;
    if (!v3 && *(_DWORD *)(v4 + 32) == *(_DWORD *)(DerivedStorage + 52) - 1 && !v9)
    {
      v10 = *(float *)(v4 + 16);
      if (v10 != *(float *)(DerivedStorage + 48))
        playerairplay_updatePlayerRateToMatch(v2, *(_QWORD *)(v4 + 24), v10);
    }
  }
  v11 = *(CFTypeRef **)(a1 + 48);
  if (v11[1])
  {
    CFRelease(v11[1]);
    v11 = *(CFTypeRef **)(a1 + 48);
  }
  if (*v11)
  {
    CFRelease(*v11);
    v11 = *(CFTypeRef **)(a1 + 48);
  }
  if (v11[3])
  {
    CFRelease(v11[3]);
    v11 = *(CFTypeRef **)(a1 + 48);
  }
  free(v11);
}

_BYTE *playerairplay_bufferedAirPlayOutputEndpointPreemptedNotificationListener()
{
  _BYTE *result;
  BOOL v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*result)
    v1 = 1;
  else
    v1 = dword_1EE2A2FA0 == 0;
  if (!v1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return (_BYTE *)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

_QWORD *playerairplay_bufferedAirPlayOutputActiveConfigurationDidBecomeInvalid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD);

  result = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (result[37] == a4)
  {
    v6 = result[1];
    if (v6)
    {
      result = (_QWORD *)CMBaseObjectGetVTable();
      v7 = *(uint64_t (**)(uint64_t, _QWORD))(result[2] + 120);
      if (v7)
        return (_QWORD *)v7(v6, 0);
    }
    else
    {
      return (_QWORD *)FigSignalErrorAt();
    }
  }
  return result;
}

_QWORD *playerairplay_audioSessionMutedDidChangeNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t);

  result = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (result[37])
  {
    v6 = result;
    if (result[48] == a4)
    {
      FigCFDictionaryGetBooleanIfPresent();
      v7 = *MEMORY[0x1E0C9AE40];
      FigPlayerAirPlayRoute_SetProperty(v6[28], CFSTR("IsPIPMuted"), (const void *)*MEMORY[0x1E0C9AE40]);
      CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v6[37]);
      result = (_QWORD *)CMBaseObjectGetVTable();
      v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(result[1] + 56);
      if (v9)
        return (_QWORD *)v9(CMBaseObject, CFSTR("IsPiPMuted"), v7);
    }
  }
  return result;
}

void playerairplay_updateAirPlayRouteInformationAndEndpoint(const void *a1, const __CFDictionary *a2, CFMutableDictionaryRef Mutable)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  const __CFAllocator *v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const void **v11;
  const void *v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  BOOL v15;
  CFBooleanRef v16;
  CFTypeRef v17;
  CFBooleanRef BOOLean;
  unsigned __int8 v19;
  CFTypeRef cf;

  playerairplay_updateAirPlayRouteInformation(a1, a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v19 = 0;
  if (!*(_BYTE *)DerivedStorage)
  {
    v6 = DerivedStorage;
    *(_BYTE *)(DerivedStorage + 272) = 0;
    v7 = *(const void **)(DerivedStorage + 256);
    *(_QWORD *)(DerivedStorage + 256) = Mutable;
    if (Mutable)
      CFRetain(Mutable);
    if (v7)
      CFRelease(v7);
    if (Mutable)
    {
      BOOLean = 0;
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      CMBaseObject = FigEndpointGetCMBaseObject();
      v10 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (!v10 || (v10(CMBaseObject, *MEMORY[0x1E0CA41E0], v8, &cf), !cf))
        cf = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_BYTE *)(v6 + 249) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      *(_BYTE *)(v6 + 250) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      if (*(unsigned __int8 *)(v6 + 250) == v19)
      {
        Mutable = 0;
      }
      else
      {
        *(_BYTE *)(v6 + 250) = v19;
        Mutable = CFDictionaryCreateMutable(v8, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetBoolean();
        playerairplay_postPlayerNotification(a1, CFSTR("IsIntegratedTimelineSupportedByExternalPlaybackDidChange"), Mutable);
      }
      *(_BYTE *)(v6 + 252) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      *(_BYTE *)(v6 + 251) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      *(_BYTE *)(v6 + 253) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      v13 = FigEndpointGetCMBaseObject();
      v14 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
      if (v14 && (v14(v13, *MEMORY[0x1E0CA4408], v8, &BOOLean), BOOLean))
      {
        v15 = CFBooleanGetValue(BOOLean) != 0;
        v16 = BOOLean;
        *(_BYTE *)(v6 + 272) = v15;
        if (v16)
          CFRelease(v16);
      }
      else
      {
        *(_BYTE *)(v6 + 272) = 0;
      }
      v17 = cf;
      v11 = (const void **)(v6 + 264);
      v12 = *(const void **)(v6 + 264);
      *(_QWORD *)(v6 + 264) = cf;
      if (v17)
        CFRetain(v17);
    }
    else
    {
      v11 = (const void **)(v6 + 264);
      v12 = *(const void **)(v6 + 264);
      *(_QWORD *)(v6 + 264) = 0;
    }
    if (v12)
      CFRelease(v12);
    if (*v11 != v12)
      playerairplay_postPlayerNotification(a1, CFSTR("ExternalPlaybackCapabilitiesChanged"), 0);
    if (Mutable)
      CFRelease(Mutable);
    if (cf)
      CFRelease(cf);
  }
}

void playerairplay_updateAirPlayRouteInformation(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  _BOOL4 IsAirplayVideoActive;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v11[7];
  char v12;
  __int16 v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFDictionaryGetValue(a2, CFSTR("NewRouteName"));
    v13 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    CFDictionaryGetValue(a2, CFSTR("AirPlayPlayQueueSupported"));
    IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
    v6 = *(const void **)(DerivedStorage + 240);
    *(_QWORD *)(DerivedStorage + 240) = a2;
    CFRetain(a2);
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v13 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  v6 = *(const void **)(DerivedStorage + 240);
  *(_QWORD *)(DerivedStorage + 240) = 0;
  if (v6)
LABEL_3:
    CFRelease(v6);
LABEL_4:
  playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, IsAirplayVideoActive);
  *(_BYTE *)(DerivedStorage + 254) = v13;
  v7 = pap_CopyInterstitialPlayer();
  if (v7)
  {
    v8 = v7;
    v9 = CMBaseObjectGetDerivedStorage();
    if (a2)
      CFRetain(a2);
    v10 = *(NSObject **)(v9 + 104);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __playerairplay_updateAirPlayRouteInformation_block_invoke;
    v11[3] = &__block_descriptor_57_e5_v8__0l;
    v11[4] = v9;
    v11[5] = a2;
    v12 = v13;
    v11[6] = v8;
    dispatch_async(v10, v11);
  }
}

void playerairplay_notifyIfIsAirPlayVideoActiveChanged(const void *a1, int a2)
{
  int IsAirplayVideoActive;
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  if (IsAirplayVideoActive != a2)
  {
    if (IsAirplayVideoActive)
    {
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360))
      {
        v5 = pap_CopyInterstitialPlayer();
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (v5)
        {
          v7 = DerivedStorage;
          v8 = *(_QWORD *)(DerivedStorage + 8);
          v9 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (v9)
            v9(v8, 0);
          playqueue_clearPlayQueue(*(_QWORD *)(v7 + 32));
        }
      }
    }
    playerairplay_postPlayerNotification(a1, CFSTR("IsAirPlayVideoActiveDidChange"), 0);
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void __playerairplay_updateAirPlayRouteInformation_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)v2)
  {
    v3 = *(const void **)(v2 + 240);
    v4 = *(const void **)(a1 + 40);
    *(_QWORD *)(v2 + 240) = v4;
    if (v4)
      CFRetain(v4);
    if (v3)
      CFRelease(v3);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 254) = *(_BYTE *)(a1 + 56);
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

uint64_t __playerairplay_cleanUpScrubLayerAndContext_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const void *v4;
  const void *v5;

  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 168);
  if (v3)
  {
    objc_msgSend(v3, "setContents:", 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "removeFromSuperlayer");
    v2 = *(_QWORD *)(a1 + 32);
    v4 = *(const void **)(v2 + 168);
    if (v4)
    {
      CFRelease(v4);
      v2 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(v2 + 168) = 0;
    }
  }
  v5 = *(const void **)(v2 + 160);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160) = 0;
  }
  return objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
}

uint64_t playerairplay_handleSetProperty(const void *a1, uint64_t a2, const void *a3, const __CFBoolean *a4, _BYTE *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  CFTypeID TypeID;
  int Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v19;
  CFTypeID v20;
  int v21;
  NSObject *v22;
  CFTypeID v23;
  CFTypeID v24;
  const void *v25;
  int v26;
  CFTypeRef v27;
  _BOOL4 v28;
  BOOL v29;
  NSObject *v30;
  _QWORD *v31;
  BOOL IsAirplayVideoActive;
  char v33;
  NSObject *v34;
  uint64_t v35;
  const void *v36;
  uint64_t FigBaseObject;
  void (*v38)(uint64_t, const void *, const __CFBoolean *);
  CFTypeID v39;
  BOOL v40;
  int v41;
  NSObject *v42;
  CFTypeRef v43;
  CFTypeID v44;
  BOOL v45;
  int v46;
  int DoesCurrentRouteUseScreen;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  int v51;
  CFTypeID v52;
  CFTypeID v53;
  CFTypeID v54;
  int v55;
  int v56;
  CFTypeID v57;
  Boolean v58;
  NSObject *v59;
  CFTypeID v60;
  NSObject *v61;
  _QWORD *v62;
  CFTypeID v63;
  CFTypeID v64;
  CFTypeID v65;
  int v66;
  NSObject *v67;
  _QWORD *v68;
  CFTypeID v69;
  NSObject *v70;
  _QWORD v71[7];
  _QWORD v72[7];
  _QWORD v73[7];
  _QWORD v74[7];
  _QWORD v75[7];
  _QWORD v76[8];
  _QWORD v77[6];
  Boolean v78;
  _QWORD v79[6];
  _QWORD v80[6];
  BOOL v81;
  _QWORD v82[6];
  _QWORD v83[6];
  BOOL v84;
  _QWORD block[6];
  BOOL v86;
  _QWORD v87[6];
  BOOL v88;
  os_log_type_t type;
  int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v91 = 0;
  v92 = &v91;
  v93 = 0x2020000000;
  v94 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_2;
  if (CFEqual(a3, CFSTR("AllowsAirPlayVideo")))
  {
    if (a4)
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a4))
      {
        Value = CFBooleanGetValue(a4);
        if (dword_1EE2A2FA0)
        {
          v90 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (Value == *(unsigned __int8 *)(DerivedStorage + 40))
          goto LABEL_44;
        IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
        *(_BYTE *)(DerivedStorage + 40) = Value;
        if (Value)
        {
          if (!*(_BYTE *)(DerivedStorage + 43))
          {
LABEL_41:
            if (a1)
              CFRetain(a1);
            v34 = *(NSObject **)(DerivedStorage + 104);
            v87[0] = MEMORY[0x1E0C809B0];
            v87[1] = 3221225472;
            v87[2] = __playerairplay_handleSetProperty_block_invoke;
            v87[3] = &__block_descriptor_49_e5_v8__0l;
            v87[4] = DerivedStorage;
            v87[5] = a1;
            v88 = IsAirplayVideoActive;
            dispatch_async(v34, v87);
            goto LABEL_44;
          }
          v33 = 1;
        }
        else
        {
          v33 = 0;
        }
        *(_BYTE *)(DerivedStorage + 45) = v33;
        goto LABEL_41;
      }
    }
LABEL_9:
    v19 = 0;
    *((_DWORD *)v92 + 6) = FigSignalErrorAt();
    goto LABEL_45;
  }
  if (CFEqual(a3, CFSTR("ParticipatingInCoordinatedPlayback")))
  {
    if (!a4 || (v20 = CFBooleanGetTypeID(), v20 != CFGetTypeID(a4)))
    {
LABEL_2:
      *((_DWORD *)v92 + 6) = FigSignalErrorAt();
      goto LABEL_3;
    }
    v21 = CFBooleanGetValue(a4);
    if (dword_1EE2A2FA0)
    {
      v90 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v21 == *(unsigned __int8 *)(DerivedStorage + 448))
      goto LABEL_34;
    v28 = playerairplay_getIsAirplayVideoActive(a1);
    v29 = v28;
    *(_BYTE *)(DerivedStorage + 448) = v21;
    playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, v28);
    if (a1)
      CFRetain(a1);
    v30 = *(NSObject **)(DerivedStorage + 104);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __playerairplay_handleSetProperty_block_invoke_165;
    block[3] = &__block_descriptor_49_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = a1;
    v86 = v29;
    v31 = block;
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("PickerContextUUID")))
  {
    if (!a4 || (v23 = CFGetTypeID(a4), v23 == CFStringGetTypeID()))
      FigPlayerAirPlayRoute_SetProperty(*(_QWORD *)(DerivedStorage + 224), CFSTR("PickerContextUUID"), a4);
    goto LABEL_34;
  }
  if (CFEqual(a3, CFSTR("ActionAtEnd")))
  {
    if (a4)
    {
      v24 = CFGetTypeID(a4);
      if (v24 == CFStringGetTypeID())
      {
        v25 = *(const void **)(DerivedStorage + 120);
        *(_QWORD *)(DerivedStorage + 120) = a4;
        CFRetain(a4);
        if (v25)
          CFRelease(v25);
        if (pap_AirPlayState(a1) - 14 <= 2)
          playerairplay_setActionAtEndOnAirPlayController(a1);
      }
    }
    goto LABEL_26;
  }
  if (CFEqual(a3, CFSTR("UsesAirPlayVideoWhileAirPlayScreenIsActive")))
  {
    if (!a4)
      goto LABEL_9;
    v39 = CFBooleanGetTypeID();
    if (v39 != CFGetTypeID(a4))
      goto LABEL_9;
    v40 = playerairplay_getIsAirplayVideoActive(a1);
    v41 = CFBooleanGetValue(a4);
    if (dword_1EE2A2FA0)
    {
      v90 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v41 == 1)
      v41 = *(unsigned __int8 *)(DerivedStorage + 44) != 1;
    if (v41 == *(unsigned __int8 *)(DerivedStorage + 43))
    {
LABEL_34:
      v19 = 0;
      goto LABEL_45;
    }
    *(_BYTE *)(DerivedStorage + 43) = v41;
    if (*(_BYTE *)(DerivedStorage + 40))
      *(_BYTE *)(DerivedStorage + 45) = v41;
    if (a1)
      CFRetain(a1);
    v30 = *(NSObject **)(DerivedStorage + 104);
    v83[0] = MEMORY[0x1E0C809B0];
    v83[1] = 3221225472;
    v83[2] = __playerairplay_handleSetProperty_block_invoke_166;
    v83[3] = &__block_descriptor_49_e5_v8__0l;
    v83[4] = DerivedStorage;
    v83[5] = a1;
    v84 = v40;
    v31 = v83;
LABEL_33:
    dispatch_async(v30, v31);
    goto LABEL_34;
  }
  if (!CFEqual(a3, CFSTR("ClientInBackground")))
  {
    if (CFEqual(a3, CFSTR("DisplayTimedMetadata")))
    {
      if (a4)
      {
        v52 = CFBooleanGetTypeID();
        if (v52 == CFGetTypeID(a4))
          *(_BYTE *)(DerivedStorage + 128) = CFBooleanGetValue(a4);
      }
      goto LABEL_85;
    }
    if (CFEqual(a3, CFSTR("UseAirPlayVideoAudioOnlyMode")))
    {
      if (a4)
      {
        v53 = CFBooleanGetTypeID();
        if (v53 == CFGetTypeID(a4))
        {
          *(_BYTE *)(DerivedStorage + 42) = CFBooleanGetValue(a4);
LABEL_44:
          v19 = 1;
          goto LABEL_45;
        }
      }
LABEL_103:
      *((_DWORD *)v92 + 6) = FigSignalErrorAt();
      goto LABEL_44;
    }
    if (CFEqual(a3, CFSTR("EnableBufferedAirPlayLocalPlayback"))
      || CFEqual(a3, CFSTR("BufferedAirPlayLocalPlaybackVolume")))
    {
      goto LABEL_103;
    }
    if (CFEqual(a3, CFSTR("PlayerMuted")))
    {
      if (a4)
      {
        v54 = CFGetTypeID(a4);
        if (v54 == CFBooleanGetTypeID())
        {
          v55 = CFBooleanGetValue(a4);
          if (v55 != *(unsigned __int8 *)(DerivedStorage + 129))
          {
            *(_BYTE *)(DerivedStorage + 129) = v55;
            v56 = pap_AirPlayState(a1);
            v26 = 1;
            if (v56 && v56 != 10)
              playerairplay_setMutedOnAirPlayController(a1);
LABEL_27:
            *a5 = 0;
            if (a3)
              v27 = CFRetain(a3);
            else
              v27 = 0;
            *a6 = v27;
            if (a4)
              v43 = CFRetain(a4);
            else
              v43 = 0;
            *a7 = v43;
            if (!v26)
              goto LABEL_3;
            goto LABEL_46;
          }
LABEL_118:
          v26 = 1;
          goto LABEL_27;
        }
      }
      goto LABEL_120;
    }
    if (CFEqual(a3, CFSTR("AppliesMediaSelectionCriteriaAutomatically")))
    {
      if (a4)
      {
        v57 = CFGetTypeID(a4);
        if (v57 == CFBooleanGetTypeID())
        {
          v58 = CFBooleanGetValue(a4);
          if (a1)
            CFRetain(a1);
          v59 = *(NSObject **)(DerivedStorage + 96);
          v77[0] = MEMORY[0x1E0C809B0];
          v77[1] = 3221225472;
          v77[2] = __playerairplay_handleSetProperty_block_invoke_5;
          v77[3] = &__block_descriptor_49_e5_v8__0l;
          v78 = v58;
          v77[4] = DerivedStorage;
          v77[5] = a1;
          dispatch_async(v59, v77);
          goto LABEL_118;
        }
      }
LABEL_120:
      v26 = 0;
      *((_DWORD *)v92 + 6) = FigSignalErrorAt();
      goto LABEL_27;
    }
    if (CFEqual(a3, CFSTR("MediaSelectionCriteria")))
    {
      if (a4)
      {
        v60 = CFGetTypeID(a4);
        if (v60 != CFDictionaryGetTypeID())
          goto LABEL_120;
      }
      if (a1)
        CFRetain(a1);
      if (a4)
        CFRetain(a4);
      v61 = *(NSObject **)(DerivedStorage + 96);
      v76[0] = MEMORY[0x1E0C809B0];
      v76[1] = 3221225472;
      v76[2] = __playerairplay_handleSetProperty_block_invoke_6;
      v76[3] = &unk_1E2F991F0;
      v76[6] = a4;
      v76[7] = a1;
      v76[4] = &v91;
      v76[5] = DerivedStorage;
      v62 = v76;
LABEL_137:
      dispatch_async(v61, v62);
LABEL_85:
      v26 = 1;
      goto LABEL_27;
    }
    if (CFEqual(a3, CFSTR("LegibleFallbackMediaSelectionCriteria")))
    {
      if (a4)
      {
        v63 = CFGetTypeID(a4);
        if (v63 != CFDictionaryGetTypeID())
          goto LABEL_120;
      }
      if (a1)
        CFRetain(a1);
      if (a4)
        CFRetain(a4);
      v61 = *(NSObject **)(DerivedStorage + 96);
      v75[0] = MEMORY[0x1E0C809B0];
      v75[1] = 3221225472;
      v75[2] = __playerairplay_handleSetProperty_block_invoke_7;
      v75[3] = &__block_descriptor_56_e5_v8__0l;
      v75[4] = DerivedStorage;
      v75[5] = a4;
      v75[6] = a1;
      v62 = v75;
      goto LABEL_137;
    }
    if (CFEqual(a3, CFSTR("AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections")))
    {
      if (a4)
      {
        v64 = CFGetTypeID(a4);
        if (v64 == CFBooleanGetTypeID())
        {
          if (a1)
            CFRetain(a1);
          CFRetain(a4);
          v61 = *(NSObject **)(DerivedStorage + 96);
          v74[0] = MEMORY[0x1E0C809B0];
          v74[1] = 3221225472;
          v74[2] = __playerairplay_handleSetProperty_block_invoke_8;
          v74[3] = &__block_descriptor_56_e5_v8__0l;
          v74[4] = a4;
          v74[5] = DerivedStorage;
          v74[6] = a1;
          v62 = v74;
          goto LABEL_137;
        }
      }
      goto LABEL_172;
    }
    if (CFEqual(a3, CFSTR("AutomaticallyWaitsToMinimizeStalling")))
    {
      if (a4)
      {
        v65 = CFGetTypeID(a4);
        if (v65 == CFBooleanGetTypeID())
        {
          v66 = CFBooleanGetValue(a4);
          if (v66 != *(unsigned __int8 *)(DerivedStorage + 72))
          {
            v26 = 0;
            *(_BYTE *)(DerivedStorage + 72) = v66;
            goto LABEL_27;
          }
        }
      }
      goto LABEL_172;
    }
    if (CFEqual(a3, CFSTR("FigAudioSession")))
    {
      FigPlayerAirPlayRoute_SetProperty(*(_QWORD *)(DerivedStorage + 224), CFSTR("FigAudioSession"), a4);
      if (a4)
        playerairplay_updateAirPlayVideoIsActiveProperty(a1);
      if (a1)
        CFRetain(a1);
      if (a4)
        CFRetain(a4);
      v67 = *(NSObject **)(DerivedStorage + 104);
      v73[0] = MEMORY[0x1E0C809B0];
      v73[1] = 3221225472;
      v73[2] = __playerairplay_handleSetProperty_block_invoke_9;
      v73[3] = &__block_descriptor_56_e5_v8__0l;
      v73[4] = a4;
      v73[5] = DerivedStorage;
      v73[6] = a1;
      v68 = v73;
    }
    else
    {
      if (!CFEqual(a3, CFSTR("AudioModeIsMoviePlayback")))
      {
        if (CFEqual(a3, CFSTR("InterstitialAirPlayPlayer")))
        {
          if (a1)
            CFRetain(a1);
          if (a4)
            CFRetain(a4);
          v70 = *(NSObject **)(DerivedStorage + 104);
          v71[0] = MEMORY[0x1E0C809B0];
          v71[1] = 3221225472;
          v71[2] = __playerairplay_handleSetProperty_block_invoke_11;
          v71[3] = &__block_descriptor_56_e5_v8__0l;
          v71[4] = DerivedStorage;
          v71[5] = a4;
          v71[6] = a1;
          dispatch_async(v70, v71);
          v19 = 0;
          goto LABEL_45;
        }
        goto LABEL_172;
      }
      if (!a4 || (v69 = CFGetTypeID(a4), v69 != CFBooleanGetTypeID()))
      {
LABEL_172:
        v26 = 0;
        goto LABEL_27;
      }
      if (a1)
        CFRetain(a1);
      CFRetain(a4);
      v67 = *(NSObject **)(DerivedStorage + 104);
      v72[0] = MEMORY[0x1E0C809B0];
      v72[1] = 3221225472;
      v72[2] = __playerairplay_handleSetProperty_block_invoke_10;
      v72[3] = &__block_descriptor_56_e5_v8__0l;
      v72[4] = DerivedStorage;
      v72[5] = a1;
      v72[6] = a4;
      v68 = v72;
    }
    dispatch_async(v67, v68);
LABEL_26:
    v26 = 0;
    goto LABEL_27;
  }
  if (!a4)
    goto LABEL_9;
  v44 = CFBooleanGetTypeID();
  if (v44 != CFGetTypeID(a4))
    goto LABEL_9;
  v45 = playerairplay_getIsAirplayVideoActive(a1);
  v46 = CFBooleanGetValue(a4);
  DoesCurrentRouteUseScreen = pap_DoesCurrentRouteUseScreen(a1);
  *(_BYTE *)(DerivedStorage + 216) = v46;
  if (v46 && *(_BYTE *)(DerivedStorage + 45) && DoesCurrentRouteUseScreen && pap_isDeviceUnlocked())
  {
    if (a1)
      CFRetain(a1);
    v48 = *(NSObject **)(DerivedStorage + 104);
    v82[0] = MEMORY[0x1E0C809B0];
    v82[1] = 3221225472;
    v82[2] = __playerairplay_handleSetProperty_block_invoke_2;
    v82[3] = &__block_descriptor_48_e5_v8__0l;
    v82[4] = DerivedStorage;
    v82[5] = a1;
    dispatch_async(v48, v82);
  }
  if (a1)
    CFRetain(a1);
  v49 = *(NSObject **)(DerivedStorage + 104);
  v50 = MEMORY[0x1E0C809B0];
  v80[0] = MEMORY[0x1E0C809B0];
  v80[1] = 3221225472;
  v80[2] = __playerairplay_handleSetProperty_block_invoke_3;
  v80[3] = &__block_descriptor_49_e5_v8__0l;
  v80[4] = DerivedStorage;
  v80[5] = a1;
  v81 = v45;
  dispatch_async(v49, v80);
  v51 = pap_AirPlayState(a1);
  v19 = 0;
  if (v51 && v51 != 10)
  {
    if (!playqueue_getNumItemsInMediaControlPlaylist(*(_QWORD *)(DerivedStorage + 32)))
      goto LABEL_34;
    if (a1)
      CFRetain(a1);
    v30 = *(NSObject **)(DerivedStorage + 104);
    v79[0] = v50;
    v79[1] = 3221225472;
    v79[2] = __playerairplay_handleSetProperty_block_invoke_4;
    v79[3] = &__block_descriptor_48_e5_v8__0l;
    v79[4] = DerivedStorage;
    v79[5] = a1;
    v31 = v79;
    goto LABEL_33;
  }
LABEL_45:
  *a5 = 1;
  if (!v19)
    goto LABEL_3;
LABEL_46:
  v35 = pap_CopyInterstitialPlayer();
  v36 = (const void *)v35;
  if (v35)
  {
    FigBaseObject = FigPlayerGetFigBaseObject(v35);
    v38 = *(void (**)(uint64_t, const void *, const __CFBoolean *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
    if (v38)
      v38(FigBaseObject, a3, a4);
    CFRelease(v36);
  }
LABEL_3:
  v14 = *((unsigned int *)v92 + 6);
  _Block_object_dispose(&v91, 8);
  return v14;
}

void sub_192C7FECC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2F0], 8);
  _Unwind_Resume(a1);
}

void __playerairplay_handleSetProperty_block_invoke(uint64_t a1)
{
  const void *v2;

  if (!**(_BYTE **)(a1 + 32))
    playerairplay_checkStartStopAirPlay(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void playerairplay_checkStartStopAirPlay(void *a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  if (*(_BYTE *)(DerivedStorage + 449) && !playerairplay_isAPVAllowedByClient())
  {
    *(_BYTE *)(DerivedStorage + 449) = 0;
    playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, a2);
  }
  playerairplay_switchFromBufferedAirPlayToLocal(a1);
  playerairplay_switchFromAirPlayVideoToLocal(a1, 1);
}

void __playerairplay_handleSetProperty_block_invoke_165(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 IsAirplayVideoActive;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  const void *v7;
  uint64_t DerivedStorage;
  CFTypeRef v9;
  const void **v10;
  const void *v11;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)v2)
  {
    StopAndReleaseTimer((dispatch_object_t *)(v2 + 488));
    playerairplay_checkStartStopAirPlay(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
    IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(*(const void **)(a1 + 40));
    v4 = MEMORY[0x1E0C9AE50];
    v5 = MEMORY[0x1E0C9AE40];
    if (IsAirplayVideoActive)
    {
      v6 = (uint64_t *)(*(_BYTE *)(*(_QWORD *)(a1 + 32) + 448) ? MEMORY[0x1E0C9AE50] : MEMORY[0x1E0C9AE40]);
      pap_PlaybackSessionSetPropertySync(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 40), *MEMORY[0x1E0CA3F68], *v6);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 448))
        playerairplay_createAndResumeVideoSyncTimer();
    }
    playerairplay_updateShareAndAirPlayEchoMitigation(*(const void **)(a1 + 40));
    v7 = *(const void **)(a1 + 40);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (pap_AirPlayState(v7) - 14 <= 2)
    {
      v9 = v7 ? CFRetain(v7) : 0;
      v10 = (const void **)(*(_BYTE *)(DerivedStorage + 448) ? v4 : v5);
      pap_playbackSessionSetProxiedProperty(v9, v7, (const void *)*MEMORY[0x1E0CA3FC8], *v10, 0, 0);
      if (v9)
        CFRelease(v9);
    }
  }
  v11 = *(const void **)(a1 + 40);
  if (v11)
    CFRelease(v11);
}

void __playerairplay_handleSetProperty_block_invoke_166(uint64_t a1)
{
  const void *v2;

  if (!**(_BYTE **)(a1 + 32))
    playerairplay_checkStartStopAirPlay(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

BOOL pap_isDeviceUnlocked()
{
  if (gFigPlayerAirPlayDeviceLockedStateNotifyTokenIsValid != 1)
    return 1;
  usleep(0x124F8u);
  return SBSGetScreenLockStatus() == 0;
}

void __playerairplay_handleSetProperty_block_invoke_2(uint64_t a1)
{
  const void *v2;
  CFTypeRef cf;

  cf = 0;
  if (!**(_BYTE **)(a1 + 32))
  {
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 27, (CFMutableDictionaryRef *)&cf);
    playerairplay_updatePlayerRateToMatch(*(const void **)(a1 + 40), (uint64_t)cf, 0.0);
    if (cf)
      CFRelease(cf);
  }
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __playerairplay_handleSetProperty_block_invoke_3(uint64_t a1)
{
  const void *v2;

  if (!**(_BYTE **)(a1 + 32))
    playerairplay_checkStartStopAirPlay(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __playerairplay_handleSetProperty_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  _BYTE *DerivedStorage;
  int v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)v2)
  {
    v4 = *(_QWORD *)(v2 + 32);
    MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 8));
    Count = CFArrayGetCount(*(CFArrayRef *)v4);
    if (Count < 1)
    {
LABEL_10:
      ValueAtIndex = 0;
    }
    else
    {
      v6 = Count;
      v7 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v4, v7);
        DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
        if (!DerivedStorage[72] && DerivedStorage[733] && DerivedStorage[739] != 2)
          break;
        if (v6 == ++v7)
          goto LABEL_10;
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 8));
    v10 = pap_AirPlayState(*(const void **)(a1 + 40));
    if (ValueAtIndex && v10 && v10 != 10)
      itemairplay_controlPlaybackActivityTimer((uint64_t)ValueAtIndex, 2);
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void playerairplay_setMutedOnAirPlayController(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFTypeRef v4;
  const void **v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v3 = DerivedStorage;
    if (a1)
      v4 = CFRetain(a1);
    else
      v4 = 0;
    v5 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(v3 + 129))
      v5 = (const void **)MEMORY[0x1E0C9AE40];
    pap_playbackSessionSetProxiedProperty(v4, a1, (const void *)*MEMORY[0x1E0CA4000], *v5, 0, 0);
    if (v4)
      CFRelease(v4);
  }
}

void __playerairplay_handleSetProperty_block_invoke_5(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  int v4;
  const void *v6;

  v2 = *(_BYTE **)(a1 + 32);
  if (!*v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 48);
    if (v3 != v2[130])
    {
      v2[130] = v3;
      v4 = pap_AirPlayState(*(const void **)(a1 + 40));
      if (v4 && v4 != 10)
        playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 40));
    }
  }
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
}

uint64_t playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(const void *a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  const void *MutableCopy;
  uint64_t *v14;
  CFTypeRef v15;
  _BOOL4 BooleanPropertySync;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex v20;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  CFIndex v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  CFTypeID v26;
  const __CFArray *v27;
  const __CFArray *v28;
  CFIndex v29;
  const __CFDictionary *v30;
  const __CFDictionary *v31;
  CFTypeID v32;
  const __CFArray *v33;
  const __CFArray *v34;
  uint64_t v35;
  __CFDictionary *v36;
  const void *v37;
  CFTypeRef v39;
  const void *v40;
  CFMutableArrayRef v41;
  const void *v42;
  CFIndex v43;
  const __CFArray *v44;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef v47;

  v47 = 0;
  cf = 0;
  theArray = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (v3 = DerivedStorage, *DerivedStorage))
  {
    FigSignalErrorAt();
  }
  else if (pap_AirPlayState(a1) - 14 <= 2)
  {
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*((_QWORD *)v3 + 4), 0, (unint64_t)&v47);
    v4 = CMBaseObjectGetDerivedStorage();
    if (v4)
    {
      v5 = v4;
      FigReadWriteLockLockForRead();
      if (!*(_BYTE *)(v5 + 72))
      {
        v6 = *(_QWORD *)(v5 + 16);
        if (v6)
        {
          CMBaseObject = FigAssetGetCMBaseObject(v6);
          v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
          if (!v8)
          {
            v11 = 0;
            v12 = 4294954514;
LABEL_57:
            FigReadWriteLockUnlockForRead();
            goto LABEL_60;
          }
          v9 = v8(CMBaseObject, CFSTR("MediaSelectionArray"), *MEMORY[0x1E0C9AE00], &theArray);
          if ((_DWORD)v9)
          {
            v12 = v9;
            v11 = 0;
            goto LABEL_57;
          }
          if (!v3[130])
          {
            v11 = itemairplay_copySelectedMediaArray();
            MutableCopy = (const void *)FigCFArrayCreateMutableCopy();
            cf = MutableCopy;
            if (MutableCopy)
            {
              v10 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays((const __CFArray *)MutableCopy, *(CFArrayRef *)(v5 + 352), 1);
              if (!(_DWORD)v10)
                goto LABEL_16;
            }
            else
            {
              v10 = FigSignalErrorAt();
            }
LABEL_71:
            v12 = v10;
            goto LABEL_57;
          }
          if (theArray)
          {
            v10 = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria((uint64_t)theArray, *(const __CFArray **)(v5 + 352), *((const __CFDictionary **)v3 + 17), *((const __CFDictionary **)v3 + 18), v3[152], 0, &cf);
            v11 = 0;
            if ((_DWORD)v10)
              goto LABEL_71;
LABEL_16:
            FigMediaSelectionGroupsMatchToMediaSelectionArray((const __CFArray *)cf, theArray);
            v14 = (uint64_t *)MEMORY[0x1E0CA3F70];
            if (a1)
            {
              v15 = CFRetain(a1);
              BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v15, (uint64_t)a1, *v14);
              if (v15)
                CFRelease(v15);
              if (!BooleanPropertySync)
                goto LABEL_55;
            }
            else if (!pap_PlaybackSessionGetBooleanPropertySync(0, 0, *MEMORY[0x1E0CA3F70]))
            {
LABEL_55:
              MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 344));
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v5 + 336), (const void *)*MEMORY[0x1E0CA4020], cf);
              MEMORY[0x19402EF04](*(_QWORD *)(v5 + 344));
              playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
LABEL_56:
              v12 = 0;
              goto LABEL_57;
            }
            if (*(__CFString **)(v5 + 24) == CFSTR("com.apple.coremedia.assettype.file"))
            {
              v17 = theArray;
              if (theArray)
              {
                v18 = (const __CFArray *)cf;
                if (cf)
                {
                  v39 = v11;
                  v40 = a1;
                  Count = CFArrayGetCount(theArray);
                  v41 = (CFMutableArrayRef)FigCFArrayCreateMutableCopy();
                  if (!v41)
                  {
                    FigSignalErrorAt();
                    goto LABEL_54;
                  }
                  if (CFArrayGetCount(v18) >= 1)
                  {
                    v20 = 0;
                    v42 = (const void *)*MEMORY[0x1E0C9B0D0];
                    v44 = v18;
                    do
                    {
                      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v20);
                      if (CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupID")))
                      {
                        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
                        if (Value)
                        {
                          if (Value != v42 && Count >= 1)
                          {
                            v23 = 0;
                            while (1)
                            {
                              v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v23);
                              if (v24)
                              {
                                v25 = v24;
                                v26 = CFGetTypeID(v24);
                                if (v26 == CFDictionaryGetTypeID())
                                {
                                  CFDictionaryGetValue(v25, CFSTR("MediaSelectionGroupID"));
                                  if (FigCFEqual())
                                    break;
                                }
                              }
                              if (Count == ++v23)
                                goto LABEL_37;
                            }
                            v27 = (const __CFArray *)CFDictionaryGetValue(v25, CFSTR("MediaSelectionGroupOptions"));
                            if (v27)
                            {
                              v28 = v27;
                              v43 = CFArrayGetCount(v27);
                              if (v43 >= 1)
                              {
                                v29 = 0;
                                while (1)
                                {
                                  v30 = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, v29);
                                  if (v30)
                                  {
                                    v31 = v30;
                                    v32 = CFGetTypeID(v30);
                                    if (v32 == CFDictionaryGetTypeID())
                                    {
                                      CFDictionaryGetValue(v31, CFSTR("MediaSelectionOptionsPersistentID"));
                                      if (FigCFEqual())
                                        break;
                                    }
                                  }
                                  if (v43 == ++v29)
                                    goto LABEL_37;
                                }
                                v33 = (const __CFArray *)CFDictionaryGetValue(v31, CFSTR("MediaSelectionOptionsFallbackIDs"));
                                if (v33)
                                {
                                  v34 = v33;
                                  if (CFArrayGetCount(v33) >= 1)
                                  {
                                    v35 = FigCFDictionaryCreateMutableCopy();
                                    if (!v35)
                                    {
                                      FigSignalErrorAt();
                                      CFRelease(v41);
                                      goto LABEL_54;
                                    }
                                    v36 = (__CFDictionary *)v35;
                                    v37 = CFArrayGetValueAtIndex(v34, 0);
                                    CFDictionarySetValue(v36, CFSTR("MediaSelectionOptionsPersistentID"), v37);
                                    CFArraySetValueAtIndex(v41, v20, v36);
                                    CFRelease(v36);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
LABEL_37:
                      ++v20;
                      v18 = v44;
                    }
                    while (v20 < CFArrayGetCount(v44));
                  }
                  if (cf)
                    CFRelease(cf);
                  cf = v41;
LABEL_54:
                  a1 = v40;
                  v11 = v39;
                }
              }
            }
            goto LABEL_55;
          }
        }
      }
      v11 = 0;
      goto LABEL_56;
    }
  }
  v12 = 0;
  v11 = 0;
LABEL_60:
  if (theArray)
    CFRelease(theArray);
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  if (v47)
    CFRelease(v47);
  return v12;
}

void __playerairplay_handleSetProperty_block_invoke_6(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  int v7;

  if (!**(_BYTE **)(a1 + 40) && !FigCFEqual())
  {
    v5 = *(_QWORD *)(a1 + 40);
    v4 = *(const void **)(a1 + 48);
    v6 = *(const void **)(v5 + 136);
    *(_QWORD *)(v5 + 136) = v4;
    if (v4)
      CFRetain(v4);
    if (v6)
      CFRelease(v6);
    v7 = pap_AirPlayState(*(const void **)(a1 + 56));
    if (v7 && v7 != 10)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 56));
  }
  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
}

void __playerairplay_handleSetProperty_block_invoke_7(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  int v7;

  if (!**(_BYTE **)(a1 + 32) && !FigCFEqual())
  {
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(const void **)(a1 + 40);
    v6 = *(const void **)(v5 + 144);
    *(_QWORD *)(v5 + 144) = v4;
    if (v4)
      CFRetain(v4);
    if (v6)
      CFRelease(v6);
    v7 = pap_AirPlayState(*(const void **)(a1 + 48));
    if (v7 && v7 != 10)
      playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 48));
  }
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void __playerairplay_handleSetProperty_block_invoke_8(uint64_t a1)
{
  int Value;
  _BYTE *v3;
  int v4;
  const void *v6;
  const void *v7;

  Value = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 32));
  v3 = *(_BYTE **)(a1 + 40);
  if (!*v3 && Value != v3[152])
  {
    v3[152] = Value;
    v4 = pap_AirPlayState(*(const void **)(a1 + 48));
    if (v4 && v4 != 10)
      playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 48));
  }
  v6 = *(const void **)(a1 + 48);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 32);
  if (v7)
    CFRelease(v7);
}

void __playerairplay_handleSetProperty_block_invoke_9(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (a1[4] != *(_QWORD *)(a1[5] + 384))
  {
    playerairplay_removeFigAudioSessionNotificationHandlers();
    v2 = (const void *)a1[4];
    v3 = a1[5];
    v4 = *(const void **)(v3 + 384);
    *(_QWORD *)(v3 + 384) = v2;
    if (v2)
      CFRetain(v2);
    if (v4)
      CFRelease(v4);
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 384))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    playerairplay_setFigAudioSessionInfoOnBAO();
  }
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[4];
  if (v6)
    CFRelease(v6);
}

void playerairplay_setFigAudioSessionInfoOnBAO()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFBooleanRef *);
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t);
  int Value;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, uint64_t);
  CFBooleanRef BOOLean;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOLean = 0;
  if (!*(_QWORD *)(DerivedStorage + 296))
    return;
  v1 = DerivedStorage;
  v2 = *(_QWORD *)(DerivedStorage + 384);
  if (v2)
  {
    v3 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v3)
    {
      v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFBooleanRef *))(v3 + 48);
      if (v4)
        v4(v2, *MEMORY[0x1E0D498F8], *MEMORY[0x1E0C9AE00], &BOOLean);
    }
    v5 = *(_QWORD *)(v1 + 384);
    CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*(_QWORD *)(v1 + 296));
    v7 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v7)
      v7(CMBaseObject, CFSTR("FigAudioSession"), v5);
  }
  if (!BOOLean)
  {
    v9 = *(_QWORD *)(v1 + 296);
    goto LABEL_12;
  }
  Value = CFBooleanGetValue(BOOLean);
  v9 = *(_QWORD *)(v1 + 296);
  if (!Value)
  {
LABEL_12:
    v10 = (uint64_t *)MEMORY[0x1E0C9AE40];
    goto LABEL_13;
  }
  v10 = (uint64_t *)MEMORY[0x1E0C9AE50];
LABEL_13:
  v11 = *v10;
  v12 = FigBufferedAirPlayOutputGetCMBaseObject(v9);
  v13 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v13)
    v13(v12, CFSTR("IsPiPMuted"), v11);
  if (BOOLean)
    CFRelease(BOOLean);
}

void __playerairplay_handleSetProperty_block_invoke_10(uint64_t a1)
{
  const void *v2;
  int Value;
  uint64_t *v4;
  const void *v5;
  const void *v6;

  if (!**(_BYTE **)(a1 + 32))
  {
    v2 = *(const void **)(a1 + 40);
    Value = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
    v4 = (uint64_t *)MEMORY[0x1E0D49108];
    if (!Value)
      v4 = (uint64_t *)MEMORY[0x1E0D49090];
    playerairplay_setAndCacheAudioMode(v2, *v4, 1);
  }
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
}

void __playerairplay_handleSetProperty_block_invoke_11(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (!*(_BYTE *)a1[4])
  {
    v2 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    v3 = v2;
    v4 = a1[4];
    v5 = *(const void **)(v4 + 360);
    *(_QWORD *)(v4 + 360) = v2;
    if (v2)
      CFRetain(v2);
    if (v5)
      CFRelease(v5);
    if (v3)
      CFRelease(v3);
  }
  v6 = (const void *)a1[5];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[6];
  if (v7)
    CFRelease(v7);
}

void playerairplay_switchFromBufferedAirPlayToLocal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD);
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 296))
  {
    v3 = DerivedStorage;
    FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v5 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v5)
      v5(FigBaseObject, CFSTR("BufferedAirPlayOutput"), 0);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
    v6 = *(const void **)(v3 + 296);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v3 + 296) = 0;
    }
    *(_BYTE *)(v3 + 304) = 0;
    playerairplay_updateShareAndAirPlayEchoMitigation(a1);
    playerairplay_postIsBufferedAirPlayActiveDidChangeNotification(a1);
  }
}

void playerairplay_switchFromAirPlayVideoToLocal(void *a1, int a2)
{
  uint64_t DerivedStorage;
  int v5;
  float v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  _BOOL4 IsAirplayVideoActive;
  const __CFArray *v13;
  const __CFAllocator **v14;
  uint64_t v15;
  CFTypeRef v16;
  void (*v17)(uint64_t, CFTypeRef, float);
  uint64_t FigBaseObject;
  void (*v19)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  const __CFAllocator *v20;
  CFDictionaryRef v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD block[5];
  os_log_type_t type;
  int v30;
  CFTypeRef v31;
  void *values;
  CFTypeRef v33;
  CFTypeRef cf[23];
  CFRange v35;

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v33 = 0;
  cf[0] = 0;
  v31 = 0;
  values = 0;
  v5 = pap_AirPlayState(a1);
  if (v5 && v5 != 10)
  {
    v6 = *(float *)(DerivedStorage + 48);
    if (dword_1EE2A2FA0)
    {
      v30 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(DerivedStorage + 32), (unint64_t)cf, (unint64_t)&v33);
    *(_BYTE *)(DerivedStorage + 41) = 1;
    v8 = *(_QWORD *)(DerivedStorage + 8);
    v9 = *(unsigned __int8 *)(DerivedStorage + 1);
    v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
    if (v10)
    {
      v11 = *(void (**)(uint64_t, uint64_t))(v10 + 24);
      if (v11)
        v11(v8, v9);
    }
    playerairplay_savePlaybackInfoAndStopAPV(a1, (uint64_t)cf[0], (uint64_t)v33);
    if (a2 == 1)
      playerairplay_resetAirPlayRouteInformation(a1);
    playerairplay_resetAirPlayVideoState(a1);
    playerairplay_updateSubPlayerPlayQueue();
    *(_BYTE *)(DerivedStorage + 41) = 0;
    if (*(_BYTE *)(DerivedStorage + 449))
    {
      IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
      *(_BYTE *)(DerivedStorage + 449) = 0;
      playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, IsAirplayVideoActive);
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 472));
    v13 = *(const __CFArray **)(DerivedStorage + 464);
    v35.length = CFArrayGetCount(v13);
    v35.location = 0;
    CFArrayApplyFunction(v13, v35, (CFArrayApplierFunction)playerairplay_forwardStartupTasksToSubPlayerApply, a1);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 472));
    v14 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
    if (v6 != 0.0)
    {
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 21, (CFMutableDictionaryRef *)&v31);
      if (*(_BYTE *)(DerivedStorage + 216) && !*(_BYTE *)(DerivedStorage + 42))
      {
        playerairplay_updatePlayerRateToMatch(a1, (uint64_t)v31, 0.0);
      }
      else
      {
        v15 = *(_QWORD *)(DerivedStorage + 8);
        v16 = v31;
        v17 = *(void (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
        if (v17)
          v17(v15, v16, v6);
      }
    }
    if (cf[0])
      CFRelease(cf[0]);
    if (v33)
      CFRelease(v33);
    FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v19 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (v19 && (v20 = *v14, v19(FigBaseObject, CFSTR("ExternalProtectionStatus"), *v14, &values), values))
      v21 = CFDictionaryCreate(v20, (const void **)kFigPlayerParameter_CurrentExternalProtectionStatus, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    else
      v21 = 0;
    playerairplay_postPlayerNotification(a1, CFSTR("ExternalProtectionStatusChanged"), v21);
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360))
    {
      v22 = pap_CopyInterstitialPlayer();
      if (v22)
      {
        v23 = v22;
        v24 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 104);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __playerairplay_switchFromAirPlayVideoToLocal_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = v23;
        dispatch_async(v24, block);
      }
    }
    v25 = MEMORY[0x1E0CA2E18];
    v26 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 308) = *MEMORY[0x1E0CA2E18];
    v27 = *(_QWORD *)(v25 + 16);
    *(_QWORD *)(DerivedStorage + 324) = v27;
    *(_OWORD *)(DerivedStorage + 332) = v26;
    *(_QWORD *)(DerivedStorage + 348) = v27;
    *(_BYTE *)(DerivedStorage + 356) = 0;
    if (values)
      CFRelease(values);
    if (v21)
      CFRelease(v21);
    if (v31)
      CFRelease(v31);
  }
  *(_BYTE *)(DerivedStorage + 41) = 0;
}

uint64_t playerairplay_checkStartAPV(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char v7;
  BOOL v8;
  char v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 32);
  MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 16);
  MEMORY[0x19402EF04](*(_QWORD *)(v3 + 8));
  result = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(result + 296))
  {
    result = pap_AirPlayState(a1);
    if ((result - 14) >= 3)
    {
      if (pap_AirPlayState(a1) == 12
        || (result = pap_AirPlayState(a1), result > 0xF)
        || ((1 << result) & 0xD000) == 0)
      {
        result = pap_DoesCurrentRouteUseScreen(a1);
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(DerivedStorage + 400))
            v6 = 1;
          else
            v6 = gIsiOSDeviceWithMedusaSupport == 0;
          v7 = !v6;
          if (*(_BYTE *)(DerivedStorage + 45))
          {
            if (*(_BYTE *)(DerivedStorage + 448))
            {
              result = playerairplay_isAPVSupportedForCoordinatedPlayback();
              if ((_DWORD)result)
                v8 = v4 == 0;
              else
                v8 = 1;
            }
            else
            {
              v8 = v4 == 0;
            }
            if (v8)
              v9 = 1;
            else
              v9 = v7;
            if ((v9 & 1) == 0)
            {
              if (*(_BYTE *)(DerivedStorage + 1))
              {
                if (!*(_BYTE *)(DerivedStorage + 216))
                  return playerairplay_switchFromLocalToAirPlayVideo(a1);
                result = pap_isDeviceUnlocked();
                if (!(_DWORD)result)
                  return playerairplay_switchFromLocalToAirPlayVideo(a1);
              }
            }
          }
        }
        else if (*(_BYTE *)(DerivedStorage + 1))
        {
          CMBaseObjectGetDerivedStorage();
          result = FigCFDictionaryGetBooleanIfPresent();
          if (*(_BYTE *)(DerivedStorage + 254))
            return playerairplay_switchToBufferedAirPlay(a1);
        }
      }
    }
  }
  return result;
}

void playerairplay_checkStopAPV()
{
  uint64_t v0;

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 32);
  MEMORY[0x19402EEEC](*(_QWORD *)(v0 + 8));
  MEMORY[0x19402EF04](*(_QWORD *)(v0 + 8));
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
  }
}

void playerairplay_postIsBufferedAirPlayActiveDidChangeNotification(const void *a1)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void **v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_QWORD *)(DerivedStorage + 296))
      v5 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("CurrentIsBufferedAirPlayActive"), *v5);
    playerairplay_postPlayerNotification(a1, CFSTR("IsBufferedAirPlayActiveDidChange"), v4);
    CFRelease(v4);
  }
  else
  {
    playerairplay_postPlayerNotification(a1, CFSTR("IsBufferedAirPlayActiveDidChange"), 0);
  }
}

uint64_t playerairplay_savePlaybackInfoAndStopAPV(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  void (*v8)(uint64_t, __int128 *);
  const __CFDictionary *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  if (pap_AirPlayState(a1) - 14 <= 2)
  {
    if (a2 && a2 == a3)
    {
      FigReadWriteLockLockForRead();
      if (!*(_BYTE *)(v7 + 72) && !*(_QWORD *)(v7 + 192))
      {
        v13 = *MEMORY[0x1E0CA2E18];
        v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v8 = *(void (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v8)
          v8(a2, &v13);
        v11 = v13;
        v12 = v14;
        itemairplay_setRememberedTimeAndDefaultFlag(a2, (uint64_t)&v11);
      }
      FigReadWriteLockUnlockForRead();
    }
    playerairplay_removeAndCleanupQueuedItemsOnAirPlayController();
    pap_stopAirPlayVideoPlayback(a1);
    if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
      FigPlayerAirPlayRoute_ResumeAirPlayScreen(DerivedStorage[28]);
  }
  MEMORY[0x19402EA0C](DerivedStorage[3]);
  v9 = (const __CFDictionary *)DerivedStorage[2];
  if (v9)
    CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)itemairplay_releaseCPEProtector, 0);
  return MEMORY[0x19402EA24](DerivedStorage[3]);
}

void playerairplay_updateSubPlayerPlayQueue()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);
  const __CFArray *v3;
  const __CFArray *v4;
  const void *ValueAtIndex;
  CFTypeRef v6;
  CFIndex Count;
  CFIndex v8;
  CFTypeRef v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const __CFString *, uint64_t);
  const __CFString *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  const void *v21;
  CFMutableDictionaryRef Mutable;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, CMTime *, CFMutableDictionaryRef);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, CMTime *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t FigBaseObject;
  void (*v32)(uint64_t, const __CFString *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const __CFString *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, const __CFString *, uint64_t);
  NSObject *v39;
  const __CFArray *MutableCopy;
  uint64_t CMBaseObject;
  unsigned int (*v42)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  const __CFArray *value;
  uint64_t v44;
  void (*v45)(uint64_t, const __CFString *, const __CFArray *);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, _QWORD);
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  const __CFAllocator *allocator;
  _QWORD block[6];
  CMTime v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  CFIndex v59;
  CMTime v60;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v58 = 0;
  v59 = -1;
  v55 = 0;
  v56 = &v55;
  v57 = 0x2020000000;
  v1 = DerivedStorage[1];
  v2 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v2)
    v2(v1, 0);
  v3 = playqueue_createPlayQueueSnapshot(DerivedStorage[4], &v59);
  v4 = v3;
  if (v59 == -1 || (ValueAtIndex = CFArrayGetValueAtIndex(v3, v59)) == 0)
  {
    v6 = 0;
    if (!v4)
      goto LABEL_61;
    goto LABEL_8;
  }
  v6 = CFRetain(ValueAtIndex);
  if (v4)
  {
LABEL_8:
    Count = CFArrayGetCount(v4);
    if (Count < 1)
      goto LABEL_61;
    v8 = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v51 = *MEMORY[0x1E0C9AE50];
    v50 = *MEMORY[0x1E0C9AE40];
    while (1)
    {
      v9 = CFArrayGetValueAtIndex(v4, v8);
      v10 = CMBaseObjectGetDerivedStorage();
      FigReadWriteLockLockForRead();
      if (!*(_BYTE *)(v10 + 72))
      {
        if (*(_BYTE *)(v10 + 732))
          break;
      }
LABEL_11:
      FigReadWriteLockUnlockForRead();
      if (Count == ++v8)
        goto LABEL_61;
    }
    if (v9 == v6)
    {
      v11 = *(_DWORD *)(v10 + 864);
      *(_DWORD *)(v10 + 152) = v11;
      *(_DWORD *)(v10 + 864) = FPSupport_IncrementSeekID(v11);
    }
    v12 = *(_QWORD *)(v10 + 192);
    if (!v12)
    {
LABEL_29:
      if (*(_DWORD *)(v10 + 152))
      {
        Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetInt32();
        v23 = *(_QWORD *)(v10 + 8);
        v54 = *(CMTime *)(v10 + 160);
        v24 = *(unsigned int (**)(uint64_t, CMTime *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 176);
        if (!v24 || (v60 = v54, v24(v23, &v60, Mutable)))
          *(_DWORD *)(v10 + 152) = 0;
        if (Mutable)
          CFRelease(Mutable);
      }
      else
      {
        v25 = *(_QWORD *)(v10 + 8);
        v26 = *(unsigned int *)(v10 + 188);
        v54 = *(CMTime *)(v10 + 160);
        v27 = *(void (**)(uint64_t, CMTime *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v27)
        {
          v60 = v54;
          v27(v25, &v60, v26);
        }
      }
LABEL_37:
      v28 = *(_QWORD *)(v10 + 8);
      v60 = *(CMTime *)(v10 + 496);
      itemairplay_setItemPropertyAsTime(v28, (uint64_t)CFSTR("TimeToPauseBuffering"), &v60);
      v29 = *(_QWORD *)(v10 + 8);
      v60 = *(CMTime *)(v10 + 520);
      itemairplay_setItemPropertyAsTime(v29, (uint64_t)CFSTR("TimeToPausePlayback"), &v60);
      if (*(_BYTE *)(v10 + 158))
        v30 = v51;
      else
        v30 = v50;
      FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v10 + 8));
      v32 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v32)
        v32(FigBaseObject, CFSTR("SnapTimeToPausePlayback"), v30);
      v33 = *(_QWORD *)(v10 + 808);
      v34 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v10 + 8));
      v35 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v35)
        v35(v34, CFSTR("interstitialEvents"), v33);
      v36 = *(_QWORD *)(v10 + 784);
      v37 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v10 + 8));
      v38 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v38)
        v38(v37, CFSTR("currentInterstitialEvent"), v36);
      v39 = DerivedStorage[12];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __playerairplay_updateSubPlayerPlayQueue_block_invoke;
      block[3] = &unk_1E2F87F08;
      block[4] = &v55;
      block[5] = v9;
      dispatch_sync(v39, block);
      if (v56[3])
      {
        v60.value = 0;
        MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
        CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v10 + 16));
        v42 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v42 && !v42(CMBaseObject, CFSTR("MediaSelectionArray"), allocator, &v60))
        {
          value = (const __CFArray *)v60.value;
        }
        else
        {
          value = 0;
          v60.value = 0;
        }
        FigMediaSelectionGroupsMatchToMediaSelectionArray(MutableCopy, value);
        v44 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v10 + 8));
        v45 = *(void (**)(uint64_t, const __CFString *, const __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
        if (v45)
          v45(v44, CFSTR("SelectedMediaArray"), MutableCopy);
        if (MutableCopy)
          CFRelease(MutableCopy);
        if (v60.value)
          CFRelease((CFTypeRef)v60.value);
      }
      v46 = DerivedStorage[1];
      v47 = *(_QWORD *)(v10 + 8);
      v48 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v48)
        v48(v46, v47, 0);
      goto LABEL_11;
    }
    if (*(_BYTE *)(v10 + 224))
    {
      v13 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v10 + 8));
      v14 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      v15 = CFSTR("estimatedCurrentDate");
      if (!v14)
        goto LABEL_24;
    }
    else
    {
      v17 = *(unsigned int *)(v10 + 152);
      v18 = *(_QWORD *)(v10 + 8);
      if ((_DWORD)v17)
      {
        v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
        if (!v19)
          goto LABEL_24;
        v16 = v19(v18, v12, v17);
        goto LABEL_23;
      }
      v13 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v10 + 8));
      v14 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      v15 = CFSTR("currentDate");
      if (!v14)
        goto LABEL_24;
    }
    v16 = v14(v13, v15, v12);
LABEL_23:
    if (!v16)
    {
      v20 = 0;
LABEL_26:
      v21 = *(const void **)(v10 + 192);
      if (v21)
      {
        CFRelease(v21);
        *(_QWORD *)(v10 + 192) = 0;
      }
      if (!v20)
        goto LABEL_37;
      goto LABEL_29;
    }
LABEL_24:
    *(_DWORD *)(v10 + 152) = 0;
    v20 = 1;
    goto LABEL_26;
  }
LABEL_61:
  if (v6)
    CFRelease(v6);
  if (v4)
    CFRelease(v4);
  v49 = (const void *)v56[3];
  if (v49)
    CFRelease(v49);
  _Block_object_dispose(&v55, 8);
}

void sub_192C821F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t playerairplay_forwardStartupTasksToSubPlayerApply(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 128);
  if (v4)
    return v4(v2, a1);
  return result;
}

void __playerairplay_switchFromAirPlayVideoToLocal_block_invoke(uint64_t a1)
{
  playerairplay_switchFromAirPlayVideoToLocal(*(_QWORD *)(a1 + 32), 0);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t itemairplay_releaseCPEProtector()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(uint64_t);
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v1 = *(const void **)(DerivedStorage + 440);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 440) = 0;
    }
    v2 = *(_QWORD *)(DerivedStorage + 664);
    if (v2)
    {
      v3 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v3)
      {
        v4 = (void (*)(uint64_t))v3[12];
        if (v4)
          v4(v2);
      }
      v5 = *(const void **)(DerivedStorage + 664);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(DerivedStorage + 664) = 0;
      }
    }
    *(_BYTE *)(DerivedStorage + 735) = 0;
  }
  return FigReadWriteLockUnlockForRead();
}

void itemairplay_setItemPropertyAsTime(uint64_t a1, uint64_t a2, CMTime *a3)
{
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, uint64_t, CFDictionaryRef);
  CMTime v9;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = *a3;
  v6 = CMTimeCopyAsDictionary(&v9, v5);
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  v8 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v8)
    v8(FigBaseObject, a2, v6);
  if (v6)
    CFRelease(v6);
}

CFTypeRef __playerairplay_updateSubPlayerPlayQueue_block_invoke(uint64_t a1)
{
  CFTypeRef result;

  result = itemairplay_copySelectedMediaArray();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFTypeRef itemairplay_copySelectedMediaArray()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  CFMutableDictionaryRef ProxiedPropertyParams;
  CFTypeID v4;
  CFTypeRef v5;
  const void *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v8;
  CFTypeRef cf[23];

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  v2 = *(const void **)(DerivedStorage + 368);
  if (v2)
  {
    cf[0] = CFRetain(v2);
    goto LABEL_20;
  }
  ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
  if (!playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(v1, (const void *)*MEMORY[0x1E0CA4020], ProxiedPropertyParams, 500000000, cf)&& !*(_BYTE *)(DerivedStorage + 72))
  {
    if (cf[0])
    {
      v4 = CFGetTypeID(cf[0]);
      if (v4 != CFArrayGetTypeID())
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_13;
      }
      v5 = cf[0];
      v6 = *(const void **)(DerivedStorage + 360);
      *(CFTypeRef *)(DerivedStorage + 360) = cf[0];
      if (v5)
        CFRetain(v5);
    }
    else
    {
      v6 = *(const void **)(DerivedStorage + 360);
      *(_QWORD *)(DerivedStorage + 360) = 0;
    }
    if (v6)
      CFRelease(v6);
  }
LABEL_13:
  if (cf[0])
    goto LABEL_18;
  v8 = *(const void **)(DerivedStorage + 360);
  if (!v8)
  {
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 352)) < 1)
      goto LABEL_18;
    v8 = *(const void **)(DerivedStorage + 352);
  }
  cf[0] = CFRetain(v8);
LABEL_18:
  if (ProxiedPropertyParams)
    CFRelease(ProxiedPropertyParams);
LABEL_20:
  if (v1)
    CFRelease(v1);
  return cf[0];
}

uint64_t playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(const void *a1, const void *a2, const void *a3, int64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  dispatch_semaphore_t v11;
  NSObject *v12;
  __CFData *Mutable;
  __CFData *v14;
  UInt8 *MutableBytePtr;
  UInt8 *v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_time_t v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    v19 = 0;
    v18 = 4294954511;
    if (!a5)
      return v18;
    goto LABEL_23;
  }
  if (!*(_QWORD *)(DerivedStorage + 280) || (v11 = dispatch_semaphore_create(0)) == 0)
  {
LABEL_14:
    v18 = 0;
    v19 = 0;
    if (!a5)
      return v18;
    goto LABEL_23;
  }
  v12 = v11;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 40);
  if (!Mutable)
  {
    dispatch_release(v12);
    goto LABEL_14;
  }
  v14 = Mutable;
  CFDataSetLength(Mutable, 40);
  MutableBytePtr = CFDataGetMutableBytePtr(v14);
  if (MutableBytePtr)
  {
    v16 = MutableBytePtr;
    *(_QWORD *)MutableBytePtr = a1;
    if (a1)
      CFRetain(a1);
    *((_QWORD *)v16 + 3) = a2;
    if (a2)
      CFRetain(a2);
    *((_QWORD *)v16 + 1) = v12;
    dispatch_retain(v12);
    CFRetain(v14);
    if (a1)
    {
      v17 = CFRetain(a1);
      pap_playbackSessionGetProxiedProperty(v17, a1, 1, v12, a2, a3, (uint64_t)pap_playbackSessionGetProxiedPropertyCompletion, (uint64_t)v14);
      if (v17)
        CFRelease(v17);
    }
    else
    {
      pap_playbackSessionGetProxiedProperty(0, 0, 1, v12, a2, a3, (uint64_t)pap_playbackSessionGetProxiedPropertyCompletion, (uint64_t)v14);
    }
    v20 = dispatch_time(0, a4);
    if (!dispatch_semaphore_wait(v12, v20))
    {
      v19 = *((_QWORD *)v16 + 2);
      v18 = *((unsigned int *)v16 + 8);
      *((_QWORD *)v16 + 2) = 0;
      goto LABEL_22;
    }
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v18 = 0;
  v19 = 0;
LABEL_22:
  dispatch_release(v12);
  CFRelease(v14);
  if (a5)
LABEL_23:
    *a5 = v19;
  return v18;
}

void pap_playbackSessionGetProxiedPropertyCompletion(int a1, const void *a2, int a3, CFMutableDataRef theData)
{
  UInt8 *MutableBytePtr;
  UInt8 *v8;
  CFTypeRef v9;
  NSObject *global_queue;
  _QWORD v11[6];

  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  if (MutableBytePtr)
  {
    v8 = MutableBytePtr;
    if (a2)
      v9 = CFRetain(a2);
    else
      v9 = 0;
    *((_QWORD *)v8 + 2) = v9;
    *((_DWORD *)v8 + 8) = a3;
    global_queue = dispatch_get_global_queue(0, 0);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __pap_playbackSessionGetProxiedPropertyCompletion_block_invoke;
    v11[3] = &__block_descriptor_48_e5_v8__0l;
    v11[4] = v8;
    v11[5] = theData;
    dispatch_async(global_queue, v11);
  }
}

void __pap_playbackSessionGetProxiedPropertyCompletion_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  intptr_t v4;
  const void *v5;
  const void *v6;
  NSObject *v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 8);
  if (v3)
  {
    v4 = dispatch_semaphore_signal(v3);
    v2 = *(_QWORD *)(a1 + 32);
    if (!v4)
    {
      v5 = *(const void **)(v2 + 16);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = 0;
        v2 = *(_QWORD *)(a1 + 32);
      }
    }
  }
  if (*(_QWORD *)v2)
  {
    CFRelease(*(CFTypeRef *)v2);
    v2 = *(_QWORD *)(a1 + 32);
  }
  v6 = *(const void **)(v2 + 24);
  if (v6)
  {
    CFRelease(v6);
    v2 = *(_QWORD *)(a1 + 32);
  }
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void playerairplay_switchFromLocalToBufferedAirPlay(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, const __CFString *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, uint64_t);
  uint64_t FigBaseObject;
  unsigned int (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  NSObject *v16;
  CFTypeRef v17;
  uint64_t v18;
  void (*v19)(uint64_t, const __CFString *, CFTypeRef);
  CFStringRef v20;
  CFStringRef v21;
  uint64_t v22;
  void (*v23)(uint64_t, const __CFString *, CFStringRef);
  NSObject *v24;
  CFTypeRef v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, const __CFString *, CFTypeRef);
  const void *v28;
  NSObject *v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, CFTypeRef *);
  CFTypeRef v32;
  void (*v33)(CFTypeRef, CFTypeRef *);
  uint64_t v34;
  void (*v35)(uint64_t, const __CFString *, const __CFAllocator *, CFURLRef *);
  CFStringRef v36;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v38;
  NSObject *v39;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[5];
  os_log_type_t type;
  int v43;
  CFTypeRef cf;
  CFURLRef url;
  CFTypeRef v46;
  CFTypeRef v47;
  CFTypeRef v48;
  CFTypeRef v49;
  uint8_t buf[4];
  CFStringRef v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  url = 0;
  if (playerairplay_GetGreenTeaLogger_once != -1)
    dispatch_once(&playerairplay_GetGreenTeaLogger_once, &__block_literal_global_167);
  v3 = playerairplay_GetGreenTeaLogger_greenTeaLogger;
  cf = 0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (!pap_AirPlayRoute_CopyProperty(a1, CFSTR("BufferedAudioStream"), *MEMORY[0x1E0C9AE00], &v48))
    {
      if (FigBufferedAirPlayOutputCreate(v4, *(const void **)(DerivedStorage + 256), v48, &v49))
      {
        v43 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        v5 = *(_QWORD *)(DerivedStorage + 416);
        CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v49);
        v7 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v7)
          v7(CMBaseObject, CFSTR("ClientID"), v5);
        v8 = *(_QWORD *)(DerivedStorage + 424);
        v9 = FigBufferedAirPlayOutputGetCMBaseObject(v49);
        v10 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v10)
          v10(v9, CFSTR("ClientPID"), v8);
        v11 = *(_QWORD *)(DerivedStorage + 432);
        v12 = FigBufferedAirPlayOutputGetCMBaseObject(v49);
        v13 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v13)
          v13(v12, CFSTR("ClientAuditToken"), v11);
        FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
        v15 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v15 && !v15(FigBaseObject, CFSTR("FigAudioSession"), v4, &cf))
        {
          v17 = cf;
          v18 = FigBufferedAirPlayOutputGetCMBaseObject(v49);
          v19 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
          if (v19)
            v19(v18, CFSTR("FigAudioSession"), v17);
        }
        else
        {
          v43 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (cf)
          CFRelease(cf);
        v20 = CFStringCreateWithCString(v4, (const char *)(DerivedStorage + 450), 0x8000100u);
        if (v20)
        {
          v21 = v20;
          v22 = FigBufferedAirPlayOutputGetCMBaseObject(v49);
          v23 = *(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (v23)
            v23(v22, CFSTR("LoggingID"), v21);
          if (dword_1EE2A2FA0)
          {
            v43 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v25 = v49;
          v26 = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
          v27 = *(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
          if (!v27 || v27(v26, CFSTR("BufferedAirPlayOutput"), v25))
          {
            v43 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            if (*(_QWORD *)(DerivedStorage + 296))
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterRemoveWeakListeners();
              v28 = *(const void **)(DerivedStorage + 296);
              if (v28)
              {
                CFRelease(v28);
                *(_QWORD *)(DerivedStorage + 296) = 0;
              }
            }
            *(_QWORD *)(DerivedStorage + 296) = CFRetain(v49);
            *(_BYTE *)(DerivedStorage + 304) = 0;
            CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 440), (CFDictionaryApplierFunction)playerairplay_applyCachedPropertiesOnBaoAndPlaybackSession, a1);
            playerairplay_updateShareAndAirPlayEchoMitigation(a1);
            if (a1)
              CFRetain(a1);
            v29 = *(NSObject **)(DerivedStorage + 104);
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = __playerairplay_switchFromLocalToBufferedAirPlay_block_invoke;
            block[3] = &__block_descriptor_40_e5_v8__0l;
            block[4] = a1;
            dispatch_async(v29, block);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListeners();
            if (!v3)
              goto LABEL_43;
            v30 = *(_QWORD *)(DerivedStorage + 8);
            v31 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            if (v31)
            {
              v31(v30, 0, &v47);
              v32 = v47;
              if (v47)
              {
                v33 = *(void (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
                if (v33)
                {
                  v33(v32, &v46);
                  if (v46)
                  {
                    v34 = FigAssetGetCMBaseObject(v46);
                    v35 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v35)
                    {
                      v35(v34, CFSTR("assetProperty_CreationURL"), v4, &url);
                      if (url)
                      {
                        if (pap_isLocalFileURL(url, 0))
                        {
                          v36 = CFURLCopyPathExtension(url);
                          CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
                          if (CTGreenTeaOsLogHandle)
                          {
                            v38 = CTGreenTeaOsLogHandle;
                            if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)buf = 138412290;
                              v51 = v36;
                              _os_log_impl(&dword_1928EC000, v38, OS_LOG_TYPE_INFO, "Transmitting some media data (%@)", buf, 0xCu);
                            }
                          }
                          goto LABEL_44;
                        }
LABEL_43:
                        v36 = 0;
LABEL_44:
                        playerairplay_postIsBufferedAirPlayActiveDidChangeNotification(a1);
LABEL_46:
                        CFRelease(v21);
                        goto LABEL_47;
                      }
                    }
                  }
                }
              }
            }
          }
          v36 = 0;
          goto LABEL_46;
        }
        FigSignalErrorAt();
      }
    }
  }
  v36 = 0;
LABEL_47:
  if (v49)
    CFRelease(v49);
  if (v48)
    CFRelease(v48);
  if (v47)
    CFRelease(v47);
  if (v46)
    CFRelease(v46);
  if (url)
    CFRelease(url);
  if (v36)
    CFRelease(v36);
}

uint64_t playerairplay_updateBasedOnAirPlayVideoCapableRouteSelected(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = playerairplay_getIsAirplayVideoActive(a1);
  if (!*(_BYTE *)DerivedStorage)
  {
    if (*(_QWORD *)(DerivedStorage + 240))
    {
      CMBaseObjectGetDerivedStorage();
      return FigCFDictionaryGetBooleanIfPresent();
    }
  }
  return result;
}

void __playerairplay_switchFromLocalToBufferedAirPlay_block_invoke(uint64_t a1)
{
  const void *v2;

  playerairplay_setFigAudioSessionInfoOnBAO();
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t playerairplay_switchFromLocalToAirPlayVideo(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  float v6;
  _BOOL4 v7;
  const __CFArray *v8;
  const __CFAllocator *v9;
  uint64_t v10;
  CFTypeRef v11;
  void (*v12)(uint64_t, CFTypeRef, float);
  OpaqueCMClock *HostTimeClock;
  uint64_t v14;
  CFTypeRef v15;
  uint64_t v16;
  const void *v17;
  void (*v18)(const void *, CMTime *);
  CMTimeValue v19;
  void (*v20)(CMTimeValue, uint64_t, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(uint64_t, const void *, CMTime *);
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CMTimeEpoch v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, CMTime *);
  CFTypeRef *v30;
  double v31;
  Float64 Seconds;
  CFDateRef v33;
  CFDateRef v34;
  const void *v35;
  CFTypeRef v36;
  CFStringRef v37;
  CFDictionaryRef v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  CFAllocatorRef v42;
  uint64_t FigBaseObject;
  unsigned int (*v44)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  uint64_t v45;
  CFAllocatorRef v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  uint64_t v49;
  uint64_t (*v50)(uint64_t, CMTime *);
  int v51;
  uint64_t v52;
  void (*v53)(uint64_t, const __CFString *, const __CFAllocator *, os_log_type_t *);
  _BOOL4 IsAirplayVideoActive;
  __int128 v55;
  const void *v56;
  uint64_t v57;
  void (*v58)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  NSObject *v59;
  unsigned int v60;
  unsigned int v61;
  const char *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  void (*v66)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFArray *MutableCopy;
  uint64_t CMBaseObject;
  unsigned int (*v69)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  const __CFArray *value;
  const void **v71;
  uint64_t v72;
  void (*v73)(uint64_t, _QWORD);
  NSObject *v74;
  unsigned int v75;
  unsigned int v76;
  const char *v77;
  unsigned int v78;
  const char *DescriptionForAirPlayState;
  CFTypeRef v80;
  NSObject *v81;
  unsigned int v82;
  unsigned int v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const CFDictionaryKeyCallBacks *v87;
  const CFDictionaryValueCallBacks *v88;
  NSObject *CTGreenTeaOsLogHandle;
  BOOL v90;
  int v91;
  uint64_t v92;
  void (*v93)(uint64_t, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v96;
  NSObject *v97;
  void *v98;
  os_log_type_t type[8];
  CMTime v100;
  CFTypeRef v101;
  void *values;
  CFTypeRef v103;
  CFTypeRef cf;
  CFTypeRef v105;
  CMTime time2;
  const char *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  const char *v111;
  CMTime time;
  uint64_t v113;
  CFRange v114;

  v113 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v105 = 0;
  values = 0;
  v103 = 0;
  v101 = 0;
  if (playerairplay_GetGreenTeaLogger_once != -1)
    dispatch_once(&playerairplay_GetGreenTeaLogger_once, &__block_literal_global_167);
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_69;
  v3 = playerairplay_GetGreenTeaLogger_greenTeaLogger;
  if (!playerairplay_isAPVAllowedByClient())
  {
    if (dword_1EE2A2FA0)
    {
      LODWORD(v100.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_69;
  }
  if (*(float *)(DerivedStorage + 48) == 0.0)
  {
    CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360)
      || (v4 = pap_CopyInterstitialPlayer()) == 0
      || (v5 = (const void *)v4, v6 = *(float *)(CMBaseObjectGetDerivedStorage() + 48), CFRelease(v5), v6 == 0.0))
    {
      if (!playerairplay_isPrimaryForNativeInterstitialsInAPVPlayback())
      {
        if (dword_1EE2A2FA0)
        {
          LODWORD(v100.value) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(_BYTE *)(DerivedStorage + 449))
        {
          IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
          *(_BYTE *)(DerivedStorage + 449) = 1;
          playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, IsAirplayVideoActive);
        }
LABEL_69:
        v37 = 0;
        v38 = 0;
        v39 = 0;
LABEL_166:
        *(_BYTE *)(DerivedStorage + 41) = 0;
        goto LABEL_167;
      }
    }
  }
  v7 = playerairplay_getIsAirplayVideoActive(a1);
  *(_BYTE *)(DerivedStorage + 449) = 0;
  playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, v7);
  *(_BYTE *)(DerivedStorage + 41) = 1;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 472));
  v8 = *(const __CFArray **)(DerivedStorage + 464);
  v114.length = CFArrayGetCount(v8);
  v114.location = 0;
  CFArrayApplyFunction(v8, v114, (CFArrayApplierFunction)playerairplay_removeStartupTasksFromSubPlayerApply, a1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 472));
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 20, (CFMutableDictionaryRef *)&v101);
  v10 = *(_QWORD *)(DerivedStorage + 8);
  v11 = v101;
  v12 = *(void (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v12)
    v12(v10, v11, 0.0);
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&time, HostTimeClock);
  *(CMTime *)(DerivedStorage + 308) = time;
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(DerivedStorage + 32), (unint64_t)&cf, 0);
  if (playerairplay_getPreloadAssetPropertiesArray_once != -1)
    dispatch_once(&playerairplay_getPreloadAssetPropertiesArray_once, &__block_literal_global_169);
  v14 = playerairplay_getPreloadAssetPropertiesArray_sPreloadAssetPropertiesArray;
  playerairplay_copyPlayQueueAirPlayItemFromSubPlayer((uint64_t)a1, 0, &v105);
  v15 = v105;
  if (!v105)
  {
    v36 = cf;
    if (cf)
      v36 = CFRetain(cf);
    LODWORD(v23) = 0;
    v105 = v36;
    if (v36)
    {
LABEL_28:
      v24 = CMBaseObjectGetDerivedStorage();
      v25 = v24;
      v98 = a1;
      if (!*(_QWORD *)(v24 + 8))
        goto LABEL_114;
      v26 = MEMORY[0x1E0CA2E18];
      v96 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v24 + 200) = *MEMORY[0x1E0CA2E18];
      v27 = *(_QWORD *)(v26 + 16);
      *(_QWORD *)(v24 + 216) = v27;
      *(_OWORD *)(v24 + 252) = v96;
      *(_QWORD *)(v24 + 268) = v27;
      itemairplay_updateDateTimePivot(v24);
      *(_OWORD *)&time.value = v96;
      time.epoch = v27;
      v28 = *(_QWORD *)(v25 + 8);
      v29 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v29 && !v29(v28, &time))
        *(CMTime *)(v25 + 228) = time;
      v30 = (CFTypeRef *)(v25 + 192);
      if (*(_QWORD *)(v25 + 192))
        goto LABEL_33;
      v41 = *(_QWORD *)(v25 + 8);
      v42 = CFGetAllocator(v105);
      FigBaseObject = FigPlaybackItemGetFigBaseObject(v41);
      v44 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
      if (v44 && !v44(FigBaseObject, CFSTR("currentDate"), v42, v25 + 192))
      {
        if (*v30)
        {
LABEL_33:
          *(_BYTE *)(v25 + 224) = 0;
          if ((*(_BYTE *)(v25 + 132) & 1) != 0)
          {
            v31 = MEMORY[0x194029D14]();
            time = *(CMTime *)(v25 + 120);
            Seconds = CMTimeGetSeconds(&time);
            v33 = CFDateCreate(v9, v31 + Seconds);
            v34 = v33;
            v35 = *(const void **)(v25 + 192);
            *(_QWORD *)(v25 + 192) = v33;
            if (v33)
              CFRetain(v33);
            if (v35)
              CFRelease(v35);
            if (v34)
              CFRelease(v34);
          }
          goto LABEL_54;
        }
      }
      else if (*v30)
      {
        CFRelease(*v30);
        *v30 = 0;
      }
      v45 = *(_QWORD *)(v25 + 8);
      v46 = CFGetAllocator(v105);
      v47 = FigPlaybackItemGetFigBaseObject(v45);
      v48 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
      if (v48 && !v48(v47, CFSTR("estimatedCurrentDate"), v46, v25 + 192) && *v30)
        *(_BYTE *)(v25 + 224) = 1;
LABEL_54:
      if ((*(_BYTE *)(v25 + 132) & 1) != 0)
      {
        time = *(CMTime *)(v25 + 120);
        itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v105, (uint64_t)&time);
        v51 = 0;
        *(_OWORD *)(v25 + 120) = v96;
        *(_QWORD *)(v25 + 136) = v27;
        *(_DWORD *)(v25 + 144) = 0;
        a1 = v98;
      }
      else
      {
        *(_OWORD *)&v100.value = v96;
        v100.epoch = v27;
        v49 = *(_QWORD *)(v25 + 8);
        v50 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v50)
          v51 = v50(v49, &v100);
        else
          v51 = -12782;
        a1 = v98;
        time = v100;
        itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v105, (uint64_t)&time);
        time = v100;
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (!CMTimeCompare(&time, &time2))
        {
          *(_QWORD *)type = 0;
          v52 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v25 + 8));
          v53 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v53)
            v53(v52, CFSTR("IsReadyForPlayback"), v9, type);
          if (!FigGetBooleanFromCFTypeWithDefault())
          {
            if (dword_1EE2A2FA0)
            {
              v97 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              a1 = v98;
            }
            itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v105, MEMORY[0x1E0CA2E18]);
          }
          if (*(_QWORD *)type)
            CFRelease(*(CFTypeRef *)type);
        }
      }
      v55 = *(_OWORD *)(v25 + 160);
      *(_QWORD *)(DerivedStorage + 348) = *(_QWORD *)(v25 + 176);
      *(_OWORD *)(DerivedStorage + 332) = v55;
      MEMORY[0x19402EEEC](*(_QWORD *)(v25 + 592));
      v56 = *(const void **)(v25 + 584);
      if (v56)
      {
        CFRelease(v56);
        *(_QWORD *)(v25 + 584) = 0;
      }
      v57 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v25 + 8));
      v58 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
      if (v58)
        v58(v57, CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization"), v9, v25 + 584);
      MEMORY[0x19402EF04](*(_QWORD *)(v25 + 592));
      if (!v51)
      {
        *(_OWORD *)(v25 + 200) = *(_OWORD *)(v25 + 160);
        *(_QWORD *)(v25 + 216) = *(_QWORD *)(v25 + 176);
LABEL_93:
        v65 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v25 + 8));
        v66 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v66)
          v66(v65, CFSTR("SelectedMediaArray"), v9, &v103);
        if (v103)
        {
          time.value = 0;
          MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
          CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v25 + 16));
          v69 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v69 && !v69(CMBaseObject, CFSTR("MediaSelectionArray"), v9, &time))
          {
            value = (const __CFArray *)time.value;
          }
          else
          {
            value = 0;
            time.value = 0;
          }
          FigMediaSelectionGroupsAddCrossDeviceInfoToSelectedMediaArray(MutableCopy, value);
          MEMORY[0x19402EEEC](*(_QWORD *)(v25 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v25 + 336), (const void *)*MEMORY[0x1E0CA4020], MutableCopy);
          MEMORY[0x19402EF04](*(_QWORD *)(v25 + 344));
          if (time.value)
            CFRelease((CFTypeRef)time.value);
          if (MutableCopy)
            CFRelease(MutableCopy);
          if (v103)
          {
            CFRelease(v103);
            v103 = 0;
          }
        }
        v71 = (const void **)MEMORY[0x1E0C9AE50];
        if (*(uint64_t *)(v25 + 824) >= 1)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v25 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v25 + 336), (const void *)*MEMORY[0x1E0CA3FF0], *v71);
          MEMORY[0x19402EF04](*(_QWORD *)(v25 + 344));
        }
        if (*(_QWORD *)(v25 + 808))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v25 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v25 + 336), (const void *)*MEMORY[0x1E0CA3FE0], *(const void **)(v25 + 808));
          MEMORY[0x19402EF04](*(_QWORD *)(v25 + 344));
        }
        if (*(_QWORD *)(v25 + 784))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v25 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v25 + 336), (const void *)*MEMORY[0x1E0CA3FB8], *(const void **)(v25 + 784));
          MEMORY[0x19402EF04](*(_QWORD *)(v25 + 344));
        }
        if (*(_BYTE *)(DerivedStorage + 448))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v25 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v25 + 336), (const void *)*MEMORY[0x1E0CA3FC8], *v71);
          MEMORY[0x19402EF04](*(_QWORD *)(v25 + 344));
        }
LABEL_114:
        if (v15)
        {
          v72 = *(_QWORD *)(DerivedStorage + 8);
          v73 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (v73)
            v73(v72, 0);
        }
        if (dword_1EE2A2FA0)
        {
          LODWORD(v100.value) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v75 = v100.value;
          if (os_log_type_enabled(v74, type[0]))
            v76 = v75;
          else
            v76 = v75 & 0xFFFFFFFE;
          if (v76)
          {
            if (a1)
              v77 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
            else
              v77 = "";
            v78 = pap_AirPlayState(a1);
            DescriptionForAirPlayState = pap_getDescriptionForAirPlayState(v78);
            LODWORD(time2.value) = 136316162;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playerairplay_switchFromLocalToAirPlayVideo";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = a1;
            HIWORD(time2.epoch) = 2082;
            v107 = v77;
            v108 = 2082;
            v109 = DescriptionForAirPlayState;
            v110 = 2082;
            v111 = "StoppedLocalPlayback";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        pap_setAirPlayState(a1, 12);
        v80 = v105;
        if (!v105)
        {
          v39 = 0;
          v23 = v3;
          goto LABEL_149;
        }
        v23 = v3;
        if (*(_BYTE *)(v25 + 736))
        {
          playerairplay_startAirPlayWithItem(a1, v105);
LABEL_146:
          if (*(_BYTE *)(DerivedStorage + 249))
            itemairplay_resetTimeToPausePlayback(a1);
          v39 = 1;
LABEL_149:
          *(_BYTE *)(DerivedStorage + 41) = 0;
          v87 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
          v88 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
          values = CFDictionaryCreate(v9, (const void **)kFigPlayerExternalProtectionStatusKey_Video, (const void **)kFigPlayerExternalProtectionStatus_Protected, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v38 = CFDictionaryCreate(v9, (const void **)kFigPlayerParameter_CurrentExternalProtectionStatus, (const void **)&values, 1, v87, v88);
          playerairplay_postPlayerNotification(a1, CFSTR("ExternalProtectionStatusChanged"), v38);
          if (v23)
          {
            if (pap_isLocalFileURL(*(const __CFURL **)(v25 + 88), 0))
            {
              v37 = CFURLCopyPathExtension(*(CFURLRef *)(v25 + 88));
              CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
              v23 = CTGreenTeaOsLogHandle;
              if (!CTGreenTeaOsLogHandle)
                goto LABEL_157;
              if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
              {
                LODWORD(time.value) = 138412290;
                *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)v37;
                _os_log_impl(&dword_1928EC000, v23, OS_LOG_TYPE_INFO, "Transmitting some media data (%@)", (uint8_t *)&time, 0xCu);
              }
            }
            else
            {
              v37 = 0;
            }
            LODWORD(v23) = 0;
          }
          else
          {
            v37 = 0;
          }
LABEL_157:
          if ((_DWORD)v39)
            v90 = v105 == 0;
          else
            v90 = 1;
          v91 = !v90;
          playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, v91);
          if ((_DWORD)v23)
          {
            v92 = *(_QWORD *)(DerivedStorage + 8);
            v93 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (v93)
              v93(v92, 0);
          }
          goto LABEL_166;
        }
        *(_BYTE *)(v25 + 736) = 1;
        *(_BYTE *)(v25 + 744) = 1;
        if (!dword_1EE2A2FA0)
        {
LABEL_145:
          itemairplay_startAssetTypeLoadAsync(v80);
          goto LABEL_146;
        }
        LODWORD(v100.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v82 = v100.value;
        if (os_log_type_enabled(v81, type[0]))
          v83 = v82;
        else
          v83 = v82 & 0xFFFFFFFE;
        if (!v83)
        {
LABEL_144:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v80 = v105;
          v23 = v3;
          goto LABEL_145;
        }
        v84 = (const char *)v105;
        if (a1)
        {
          v85 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          if (v105)
          {
LABEL_139:
            v86 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_143:
            LODWORD(time2.value) = 136316162;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playerairplay_switchFromLocalToAirPlayVideo";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v98;
            HIWORD(time2.epoch) = 2048;
            v107 = v84;
            v108 = 2082;
            v109 = v85;
            a1 = v98;
            v110 = 2082;
            v111 = v86;
            _os_log_send_and_compose_impl();
            goto LABEL_144;
          }
        }
        else
        {
          v85 = "";
          if (v105)
            goto LABEL_139;
        }
        v86 = "";
        goto LABEL_143;
      }
      if (!dword_1EE2A2FA0)
      {
LABEL_92:
        itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v105, MEMORY[0x1E0CA2E18]);
        goto LABEL_93;
      }
      LODWORD(v100.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v60 = v100.value;
      if (os_log_type_enabled(v59, type[0]))
        v61 = v60;
      else
        v61 = v60 & 0xFFFFFFFE;
      if (!v61)
      {
LABEL_91:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a1 = v98;
        goto LABEL_92;
      }
      v62 = (const char *)v105;
      if (v98)
      {
        v63 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        if (v105)
        {
LABEL_85:
          v64 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_90:
          LODWORD(time2.value) = 136316162;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playerairplay_switchFromLocalToAirPlayVideo";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v98;
          HIWORD(time2.epoch) = 2048;
          v107 = v62;
          v108 = 2082;
          v109 = v63;
          v110 = 2082;
          v111 = v64;
          _os_log_send_and_compose_impl();
          goto LABEL_91;
        }
      }
      else
      {
        v63 = "";
        if (v105)
          goto LABEL_85;
      }
      v64 = "";
      goto LABEL_90;
    }
LABEL_43:
    v37 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_157;
  }
  v16 = CMBaseObjectGetDerivedStorage();
  v17 = *(const void **)(v16 + 8);
  if (!v17)
  {
LABEL_27:
    LODWORD(v23) = 1;
    if (v105)
      goto LABEL_28;
    goto LABEL_43;
  }
  CFRetain(*(CFTypeRef *)(v16 + 8));
  while (1)
  {
    time.value = 0;
    time2.value = 0;
    v18 = *(void (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
    if (v18)
      v18(v17, &time);
    v19 = time.value;
    if (!time.value)
      break;
    v20 = *(void (**)(CMTimeValue, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v20)
      v20(v19, v14, 0, 0);
    v21 = *(_QWORD *)(DerivedStorage + 8);
    v22 = *(void (**)(uint64_t, const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v22)
      v22(v21, v17, &time2);
    if (time.value)
      CFRelease((CFTypeRef)time.value);
    CFRelease(v17);
    v17 = (const void *)time2.value;
    if (!time2.value)
      goto LABEL_27;
  }
  *(_BYTE *)(DerivedStorage + 41) = 0;
  CFRelease(v17);
  v37 = 0;
  v38 = 0;
  v39 = 0;
LABEL_167:
  if (v105)
    CFRelease(v105);
  if (values)
    CFRelease(values);
  if (v38)
    CFRelease(v38);
  if (v101)
    CFRelease(v101);
  if (cf)
    CFRelease(cf);
  if (v37)
    CFRelease(v37);
  return v39;
}

uint64_t playerairplay_switchToBufferedAirPlay(void *a1)
{
  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 254))
    return 0;
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  playerairplay_bufferedAudioRouteSelected(a1);
  return 1;
}

BOOL playerairplay_isPrimaryForNativeInterstitialsInAPVPlayback()
{
  _BYTE *DerivedStorage;
  const void *v1;
  const void *v2;
  int v3;
  _BOOL8 v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !DerivedStorage[249] || !*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 368))
    return 0;
  v1 = (const void *)pap_copyPrimaryPlayer();
  v2 = v1;
  if (v1)
  {
    v3 = pap_AirPlayState(v1);
    v5 = v3 == 16 || (v3 & 0xFFFFFFFE) == 14;
  }
  else
  {
    v5 = 0;
  }
  if (dword_1EE2A2FA0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v2)
    CFRelease(v2);
  return v5;
}

uint64_t playerairplay_removeStartupTasksFromSubPlayerApply(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 136);
  if (v4)
    return v4(v2, a1);
  return result;
}

uint64_t playerairplay_copyPlayQueueAirPlayItemFromSubPlayer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, void **);
  const void *Value;
  const void *v10;
  uint64_t v11;
  void *key;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  key = 0;
  if (*DerivedStorage)
    return 4294954511;
  v6 = DerivedStorage;
  if (a2)
    a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v7 = *((_QWORD *)v6 + 1);
  v8 = *(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8 && (v8(v7, a2, &key), key))
  {
    MEMORY[0x19402EA0C](*((_QWORD *)v6 + 3));
    Value = CFDictionaryGetValue(*((CFDictionaryRef *)v6 + 2), key);
    v10 = Value;
    if (Value)
    {
      CFRetain(Value);
      v11 = 0;
    }
    else
    {
      v11 = 4294954511;
    }
    MEMORY[0x19402EA24](*((_QWORD *)v6 + 3));
    if (a3)
    {
LABEL_10:
      if (!(_DWORD)v11)
      {
        *a3 = v10;
        v10 = 0;
      }
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
    if (a3)
      goto LABEL_10;
  }
  if (key)
    CFRelease(key);
  if (v10)
    CFRelease(v10);
  return v11;
}

void itemairplay_updateDateTimePivot(uint64_t a1)
{
  uint64_t v2;
  uint64_t FigBaseObject;
  unsigned int (*v4)(uint64_t, const __CFString *, _QWORD, const void **);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  const void *v9;

  v9 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v2);
    v4 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v4)
    {
      if (!v4(FigBaseObject, CFSTR("currentDateAndTime"), *MEMORY[0x1E0C9AE00], &v9))
      {
        v8 = 0;
        v6 = 0u;
        v7 = 0u;
        FigDateTimeMakeFromDictionary(v9, (uint64_t)&v6);
        if ((_BYTE)v8 && BYTE1(v8))
        {
          v5 = v7;
          *(_OWORD *)(a1 + 288) = v6;
          *(_OWORD *)(a1 + 304) = v5;
          *(_QWORD *)(a1 + 320) = v8;
        }
        if (v9)
          CFRelease(v9);
      }
    }
  }
}

void itemairplay_resetTimeToPausePlayback(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  float v7;
  NSObject *v8;
  _QWORD v9[6];
  float v10;
  CMTime v11;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = v3;
  if (v3 && !*(_BYTE *)(DerivedStorage + 249))
  {
    v5 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v3 + 520) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v3 + 536) = *(_QWORD *)(v5 + 16);
    StopAndReleaseTimer((dispatch_object_t *)(v3 + 328));
  }
  if (*(_BYTE *)(DerivedStorage + 56))
  {
    *(_BYTE *)(DerivedStorage + 56) = 0;
    v6 = pap_AirPlayState(a1);
    if (v6)
    {
      if (v6 != 10)
      {
        v7 = *(float *)(DerivedStorage + 48);
        if (v7 != 0.0)
        {
          memset(&v12, 0, sizeof(v12));
          if (v4)
          {
            CMTimebaseGetTime(&v12, *(CMTimebaseRef *)(v4 + 576));
            v7 = *(float *)(DerivedStorage + 48);
          }
          else
          {
            v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          }
          CFRetain(a1);
          v8 = *(NSObject **)(DerivedStorage + 104);
          v9[0] = MEMORY[0x1E0C809B0];
          v9[1] = 3221225472;
          v9[2] = __itemairplay_resetTimeToPausePlayback_block_invoke;
          v9[3] = &__block_descriptor_76_e5_v8__0l;
          v10 = v7;
          v9[4] = DerivedStorage;
          v9[5] = a1;
          v11 = v12;
          dispatch_async(v8, v9);
        }
      }
    }
  }
}

CFArrayRef __playerairplay_getPreloadAssetPropertiesArray_block_invoke()
{
  CFArrayRef result;
  void *values[5];

  values[4] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("Duration");
  values[1] = CFSTR("MediaSelectionArray");
  values[2] = CFSTR("assetProperty_OriginalNetworkContentURL");
  values[3] = CFSTR("assetProperty_ProtectedStatus");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 4, MEMORY[0x1E0C9B378]);
  playerairplay_getPreloadAssetPropertiesArray_sPreloadAssetPropertiesArray = (uint64_t)result;
  return result;
}

void __itemairplay_resetTimeToPausePlayback_block_invoke(uint64_t a1)
{
  const void *v2;
  __int128 v3;
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 36, (CFMutableDictionaryRef *)&cf);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 48) = *(_DWORD *)(a1 + 48);
  playerairplay_postPlayerRateDidChangeNotification(*(const void **)(a1 + 40), (uint64_t)cf);
  v2 = *(const void **)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 52);
  v4 = *(_QWORD *)(a1 + 68);
  playerairplay_setRateAirPlay(v2, 0, (uint64_t)&v3, MEMORY[0x1E0CA2E18], cf);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  if (cf)
    CFRelease(cf);
}

void playerairplay_bufferedAudioRouteSelected(void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  NSObject *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = pap_AirPlayState(a1);
  if ((v3 == 10 || !v3) && !*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_QWORD *)(DerivedStorage + 240))
    {
      pap_invalidateEndpointPlaybackSession(a1);
      pap_AirPlayState(a1);
      CMBaseObjectGetDerivedStorage();
      FigCFDictionaryGetBooleanIfPresent();
      pap_setAirPlayState(a1, 0);
      if (dword_1EE2A2FA0)
      {
        v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (dword_1EE2A2FA0)
        {
          v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      playerairplay_switchFromLocalToBufferedAirPlay(a1);
    }
  }
}

uint64_t playerairplay_AddToPlayQueue(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  _QWORD block[8];
  os_log_type_t type;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  if (a3)
    v8 = CMBaseObjectGetDerivedStorage();
  else
    v8 = 0;
  if (dword_1EE2A2FA0)
    pap_AirPlayState(a1);
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)(v7 + 72) || v8 && *(_BYTE *)(v8 + 72))
    return FigSignalErrorAt();
  FigAtomicIncrement32();
  *(_BYTE *)(v7 + 740) = 0;
  v10 = pap_AirPlayState(a1);
  if (!v10
    || v10 == 10
    || *(_DWORD *)(DerivedStorage + 232) == 11
    && *(float *)(DerivedStorage + 48) == 0.0
    && !playerairplay_isPrimaryForNativeInterstitialsInAPVPlayback())
  {
    return playerairplay_addItemToSubPlayerPlayQueue(a1, a2, a3);
  }
  if (dword_1EE2A2FA0)
  {
    v11 = pap_AirPlayState(a1);
    if (dword_1EE2A2FA0)
    {
      if (v11 && v11 != 10)
      {
        v16 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  if (!pap_InAirPlayTransitionMode(a1))
    return playerairplay_addItemToLocalPlayQueue(a1, a2, a3);
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v13 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __playerairplay_AddToPlayQueue_block_invoke;
  block[3] = &__block_descriptor_64_e5_v8__0l;
  block[4] = DerivedStorage;
  block[5] = a1;
  block[6] = a2;
  block[7] = a3;
  dispatch_async(v13, block);
  return 0;
}

uint64_t playerairplay_RemoveFromPlayQueue(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v7;
  int v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  _QWORD block[7];
  os_log_type_t type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v5 = CMBaseObjectGetDerivedStorage();
  else
    v5 = 0;
  if (dword_1EE2A2FA0)
    pap_AirPlayState(a1);
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (v5)
  {
    if (*(_BYTE *)(v5 + 72))
      return FigSignalErrorAt();
    FigAtomicIncrement32();
  }
  v7 = pap_AirPlayState(a1);
  if (!v7 || v7 == 10)
    return playerairplay_removeItemFromSubPlayerPlayQueue((uint64_t)a1, a2);
  if (dword_1EE2A2FA0)
  {
    v8 = pap_AirPlayState(a1);
    if (dword_1EE2A2FA0)
    {
      if (v8 && v8 != 10)
      {
        v13 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  if (pap_InAirPlayTransitionMode(a1))
  {
    if (a1)
      CFRetain(a1);
    if (a2)
      CFRetain(a2);
    v10 = *(NSObject **)(DerivedStorage + 104);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __playerairplay_RemoveFromPlayQueue_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = a1;
    block[6] = a2;
    dispatch_async(v10, block);
  }
  else
  {
    playerairplay_removeItemFromLocalPlayQueue(a1, a2);
    playerairplay_removeItemFromSubPlayerPlayQueue((uint64_t)a1, a2);
  }
  return 0;
}

const void *playerairplay_CopyPlayQueueItem(const void *a1, const void *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex IndexOfAirPlayItemInternal;
  const void *ValueAtIndex;
  uint64_t v16;
  NSObject *v17;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v7 = CMBaseObjectGetDerivedStorage();
  else
    v7 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  if (!*(_BYTE *)DerivedStorage && (!v7 || !*(_BYTE *)(v7 + 72)) && a3)
  {
    v9 = pap_AirPlayState(a1);
    if (v9 && v9 != 10)
    {
      v10 = *(_QWORD *)(DerivedStorage + 32);
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 8));
      v11 = *(_DWORD *)(v10 + 16);
      MEMORY[0x19402EF04](*(_QWORD *)(v10 + 8));
      if (v11)
      {
        if (a2)
        {
          v12 = *(_QWORD *)(DerivedStorage + 32);
          v13 = CMBaseObjectGetDerivedStorage();
          MEMORY[0x19402EEEC](*(_QWORD *)(v12 + 8));
          IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)v12, a2);
          if (IndexOfAirPlayItemInternal == -1 || !*(_BYTE *)(v13 + 732))
          {
            FigSignalErrorAt();
            v16 = 0;
          }
          else if (IndexOfAirPlayItemInternal + 1 >= CFArrayGetCount(*(CFArrayRef *)v12))
          {
            v16 = 0;
          }
          else
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v12, IndexOfAirPlayItemInternal + 1);
            v16 = (uint64_t)ValueAtIndex;
            if (ValueAtIndex)
              CFRetain(ValueAtIndex);
          }
          MEMORY[0x19402EF04](*(_QWORD *)(v12 + 8));
          a2 = 0;
          v20[3] = v16;
        }
        else
        {
          v17 = *(NSObject **)(DerivedStorage + 104);
          v18[0] = MEMORY[0x1E0C809B0];
          v18[1] = 3221225472;
          v18[2] = __playerairplay_CopyPlayQueueItem_block_invoke;
          v18[3] = &unk_1E2F87F08;
          v18[4] = &v19;
          v18[5] = DerivedStorage;
          dispatch_sync(v17, v18);
        }
      }
      else
      {
        a2 = 0;
      }
      goto LABEL_27;
    }
    if (*(_QWORD *)(DerivedStorage + 8))
    {
      a2 = (const void *)playerairplay_copyPlayQueueAirPlayItemFromSubPlayer((uint64_t)a1, (uint64_t)a2, v20 + 3);
LABEL_27:
      *a3 = v20[3];
      goto LABEL_6;
    }
  }
  a2 = (const void *)FigSignalErrorAt();
LABEL_6:
  _Block_object_dispose(&v19, 8);
  return a2;
}

void sub_192C85BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t playerairplay_SetRate(const void *a1, float a2)
{
  return playerairplay_setRateCommon(a1, 0, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0, a2);
}

uint64_t playerairplay_GetRate(const void *a1, _DWORD *a2)
{
  _BYTE *DerivedStorage;
  uint64_t result;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _DWORD *);

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  v7 = pap_AirPlayState(a1);
  if (v7 && v7 != 10)
  {
    result = 0;
    if (a2)
      *a2 = *((_DWORD *)v6 + 12);
  }
  else
  {
    v8 = *((_QWORD *)v6 + 1);
    if (!v8)
      return FigSignalErrorAt();
    v9 = *(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v9)
      return v9(v8, a2);
    else
      return 4294954514;
  }
  return result;
}

uint64_t playerairplay_SetRateWithFade(uint64_t a1, float a2)
{
  CFMutableDictionaryRef Mutable;
  uint64_t (*v5)(uint64_t, CFMutableDictionaryRef, float);
  uint64_t v6;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetCMTime();
  v5 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 104);
  if (!v5)
  {
    v6 = 4294954514;
    if (!Mutable)
      return v6;
    goto LABEL_3;
  }
  v6 = v5(a1, Mutable, a2);
  if (Mutable)
LABEL_3:
    CFRelease(Mutable);
  return v6;
}

uint64_t playerairplay_StartPreroll(const void *a1, uint64_t a2, float a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, float);

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  v9 = pap_AirPlayState(a1);
  if (v9 != 10 && v9)
    return 4294954514;
  v10 = *((_QWORD *)v8 + 1);
  if (!v10)
    return FigSignalErrorAt();
  v11 = *(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v11)
    return v11(v10, a2, a3);
  else
    return 4294954514;
}

uint64_t playerairplay_StepByCount(const void *a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  v7 = pap_AirPlayState(a1);
  if (v7 != 10 && v7)
    return 4294954514;
  v8 = *((_QWORD *)v6 + 1);
  if (!v8)
    return FigSignalErrorAt();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v9)
    return v9(v8, a2);
  else
    return 4294954514;
}

uint64_t playerairplay_SetRateAndAnchorTime(const void *a1, __int128 *a2, __int128 *a3, uint64_t a4, float a5)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  return playerairplay_setRateCommon(a1, 0, 1, (uint64_t)&v8, (uint64_t)&v6, a4, a5);
}

uint64_t playerairplay_CreatePlaybackItemFromAsset(CFTypeRef cf, const void *a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v10;
  CFAllocatorRef v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, CFAllocatorRef, CFURLRef *);
  uint64_t v14;
  const __CFURL *v15;
  uint64_t DerivedStorage;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  CFUUIDRef v23;
  CFStringRef v24;
  const void *v25;
  CFTypeRef v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, const void *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v32;
  CFAllocatorRef *v34;
  const __CFString *v35;
  const __CFString *v36;
  __CFString *Mutable;
  CFTypeRef v38;
  const __CFAllocator *v39;
  CFStringRef v40;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v43;
  const char *v44;
  CFTypeRef v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  CFMutableDictionaryRef v56;
  uint64_t v57;
  CFMutableArrayRef v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  OpaqueCMClock *HostTimeClock;
  OpaqueCMClock *v66;
  CFURLRef url;
  CMTime type;
  CMTime rhs;
  CFTypeRef cfa;
  CFStringRef theString;
  CFTypeRef v72;
  CMTime lhs;
  const char *v74;
  __int16 v75;
  CFTypeRef v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  CMTime buf[5];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  url = 0;
  if (playerairplay_GetGreenTeaLogger_once != -1)
    dispatch_once(&playerairplay_GetGreenTeaLogger_once, &__block_literal_global_167);
  v10 = playerairplay_GetGreenTeaLogger_greenTeaLogger;
  v11 = CFGetAllocator(cf);
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (!v13)
  {
    v24 = 0;
    v18 = 4294954514;
    goto LABEL_44;
  }
  v14 = v13(CMBaseObject, CFSTR("assetProperty_CreationURL"), v11, &url);
  if ((_DWORD)v14)
  {
    v18 = v14;
    goto LABEL_43;
  }
  v15 = url;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theString = 0;
  v72 = 0;
  cfa = 0;
  if (!a5 || (v17 = DerivedStorage, !*(_QWORD *)(DerivedStorage + 8)))
  {
    v18 = FigSignalErrorAt();
    v23 = 0;
    goto LABEL_28;
  }
  CFGetAllocator(cf);
  FigPlaybackItemGetClassID();
  v18 = CMDerivedObjectCreate();
  if (!v72)
  {
    FigSignalErrorAt();
    goto LABEL_26;
  }
  v19 = CMBaseObjectGetDerivedStorage();
  v20 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)v19 = v20;
  if (!v20)
  {
    v29 = FigSignalErrorAt();
    goto LABEL_25;
  }
  v21 = FigReadWriteLockCreate();
  *(_QWORD *)(v19 + 64) = v21;
  if (!v21)
  {
LABEL_26:
    v23 = 0;
    goto LABEL_28;
  }
  *(_DWORD *)(v19 + 816) = a3;
  *(_BYTE *)(v19 + 868) = 0;
  if (FigIsItOKToLogURLs())
    v22 = FPSupport_GetAssetDoNotLogURLs((uint64_t)a2) == 0;
  else
    v22 = 0;
  *(_BYTE *)(v19 + 57) = v22;
  if (FigCFDictionaryGetValueIfPresent())
    CFStringGetCString(theString, (char *)(v19 + 868), 10, 0x600u);
  if (FigCFDictionaryGetValueIfPresent())
  {
    v25 = *(const void **)(v19 + 792);
    v26 = cfa;
    *(_QWORD *)(v19 + 792) = cfa;
    if (v26)
      CFRetain(v26);
    if (v25)
      CFRelease(v25);
  }
  v27 = *(_QWORD *)(v17 + 8);
  v28 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 96);
  if (!v28)
  {
    v23 = 0;
    v18 = 4294954514;
    goto LABEL_28;
  }
  v29 = v28(v27, a2, a3, a4, v19 + 8);
  if ((_DWORD)v29)
  {
LABEL_25:
    v18 = v29;
    goto LABEL_26;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  MEMORY[0x19402EA0C](*(_QWORD *)(v17 + 24));
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v17 + 16), *(const void **)(v19 + 8), v72);
  MEMORY[0x19402EA24](*(_QWORD *)(v17 + 24));
  v34 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v15)
  {
    if (!*(_BYTE *)(v19 + 57))
    {
      v35 = CFURLCopyScheme(v15);
      v36 = CFURLCopyPathExtension(v15);
      Mutable = CFStringCreateMutable(*v34, 0);
      *(_QWORD *)(v19 + 112) = Mutable;
      if (v35)
      {
        CFStringAppend(Mutable, v35);
        Mutable = *(__CFString **)(v19 + 112);
      }
      CFStringAppend(Mutable, CFSTR("://<redacted>"));
      if (v36)
        CFStringAppend(*(CFMutableStringRef *)(v19 + 112), v36);
      if (v35)
        CFRelease(v35);
      if (v36)
        CFRelease(v36);
    }
    v38 = CFRetain(v15);
  }
  else
  {
    v38 = 0;
  }
  *(_QWORD *)(v19 + 88) = v38;
  v39 = *v34;
  v23 = CFUUIDCreate(*v34);
  if (v23 && (v40 = CFUUIDCreateString(v39, v23), (*(_QWORD *)(v19 + 80) = v40) != 0))
  {
    if (dword_1EE2A2FA0)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = rhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
        v43 = value;
      else
        v43 = value & 0xFFFFFFFE;
      if (v43)
      {
        if (cf)
          v44 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        else
          v44 = "";
        v45 = v72;
        if (v72)
        {
          v46 = v44;
          v47 = CMBaseObjectGetDerivedStorage();
          v44 = v46;
          v48 = (const char *)(v47 + 868);
        }
        else
        {
          v48 = "";
        }
        v49 = *(_QWORD *)(v19 + 80);
        v50 = *(_QWORD *)(v17 + 8);
        v51 = *(_QWORD *)(v19 + 8);
        LODWORD(lhs.value) = 136316930;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"playerairplay_CreatePlaybackItem";
        LOWORD(lhs.flags) = 2048;
        *(_QWORD *)((char *)&lhs.flags + 2) = cf;
        HIWORD(lhs.epoch) = 2082;
        v74 = v44;
        v75 = 2048;
        v76 = v45;
        v77 = 2082;
        v78 = v48;
        v79 = 2114;
        v80 = v49;
        v81 = 2048;
        v82 = v50;
        v83 = 2048;
        v84 = v51;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v52 = MEMORY[0x1E0CA2E18];
    v53 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v19 + 120) = *MEMORY[0x1E0CA2E18];
    v54 = *(_QWORD *)(v52 + 16);
    *(_QWORD *)(v19 + 136) = v54;
    *(_DWORD *)(v19 + 144) = 0;
    *(_BYTE *)(v19 + 157) = 0;
    v55 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)(v19 + 160) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(v19 + 176) = *(_QWORD *)(v55 + 16);
    *(_BYTE *)(v19 + 184) = 1;
    *(_DWORD *)(v19 + 188) = 0;
    *(_QWORD *)(v19 + 192) = 0;
    *(_QWORD *)(v19 + 216) = v54;
    *(_OWORD *)(v19 + 200) = v53;
    *(_BYTE *)(v19 + 224) = 0;
    *(_OWORD *)(v19 + 228) = v53;
    *(_QWORD *)(v19 + 244) = v54;
    *(_OWORD *)(v19 + 252) = v53;
    *(_QWORD *)(v19 + 268) = v54;
    v56 = CFDictionaryCreateMutable(v39, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(v19 + 336) = v56;
    if (!v56
      || (v57 = FigSimpleMutexCreate(), (*(_QWORD *)(v19 + 344) = v57) == 0)
      || (v58 = CFArrayCreateMutable(v39, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v19 + 352) = v58) == 0)
      || (v59 = FigSimpleMutexCreate(), (*(_QWORD *)(v19 + 592) = v59) == 0))
    {
LABEL_92:
      v18 = 4294954510;
      goto LABEL_28;
    }
    v60 = pap_AirPlayState(cf);
    if (!v60 || v60 == 10 || (v61 = itemairplay_assureItemForAirPlay(), !(_DWORD)v61))
    {
      *(_QWORD *)(v19 + 16) = a2;
      if (a2)
      {
        CFRetain(a2);
      }
      else
      {
        v62 = *(_QWORD *)(v19 + 8);
        v63 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
        if (v63)
          v63(v62, v19 + 16);
      }
      if (*(_QWORD *)(v19 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
      }
      v64 = FigSimpleMutexCreate();
      *(_QWORD *)(v19 + 672) = v64;
      if (v64)
      {
        *(_DWORD *)(v19 + 864) = FPSupport_InitialSeekIDForSource(1);
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&lhs, HostTimeClock);
        *(_OWORD *)&rhs.value = gLogRequestInterval;
        rhs.epoch = 0;
        CMTimeSubtract(buf, &lhs, &rhs);
        *(CMTime *)(v19 + 416) = buf[0];
        v66 = CMClockGetHostTimeClock();
        CMClockGetTime(&rhs, v66);
        *(_OWORD *)&type.value = gLogRequestInterval;
        type.epoch = 0;
        CMTimeSubtract(buf, &rhs, &type);
        v18 = 0;
        *(CMTime *)(v19 + 392) = buf[0];
        *a5 = v72;
        v72 = 0;
LABEL_31:
        CFRelease(v23);
        goto LABEL_32;
      }
      goto LABEL_92;
    }
  }
  else
  {
    v61 = FigSignalErrorAt();
  }
  v18 = v61;
LABEL_28:
  if (v72)
  {
    CFRelease(v72);
    *a5 = 0;
  }
  if (v23)
    goto LABEL_31;
LABEL_32:
  v24 = 0;
  if ((_DWORD)v18 || !v10)
    goto LABEL_44;
  v30 = pap_AirPlayState(cf);
  if ((v30 == 10 || !v30) && !*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296) || !pap_isLocalFileURL(url, 0))
  {
    v18 = 0;
LABEL_43:
    v24 = 0;
    goto LABEL_44;
  }
  v24 = CFURLCopyPathExtension(url);
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
  if (CTGreenTeaOsLogHandle)
  {
    v32 = CTGreenTeaOsLogHandle;
    if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0].value) = 138412290;
      *(CMTimeValue *)((char *)&buf[0].value + 4) = (CMTimeValue)v24;
      _os_log_impl(&dword_1928EC000, v32, OS_LOG_TYPE_INFO, "Transmitting some media data (%@)", (uint8_t *)buf, 0xCu);
    }
  }
  v18 = 0;
LABEL_44:
  if (url)
    CFRelease(url);
  if (v24)
    CFRelease(v24);
  return v18;
}

uint64_t playerairplay_SetRateWithOptions(const void *a1, uint64_t a2, float a3)
{
  const void *v6;
  uint64_t v7;

  v6 = (const void *)FigCFCopyCompactDescription();
  v7 = playerairplay_setRateCommon(a1, a2, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0, a3);
  if (v6)
    CFRelease(v6);
  return v7;
}

uint64_t playerairplay_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v16;
  CFTypeRef v17;
  BOOL v18;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v16 = 0;
  v17 = 0;
  if (!a2)
    goto LABEL_21;
  v7 = DerivedStorage;
  v8 = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)playerairplay_handleSetProperty, &v18, &cf, &v17);
  if ((_DWORD)v8)
  {
LABEL_10:
    v13 = v8;
    goto LABEL_12;
  }
  if (v18)
  {
    v14 = 0;
LABEL_9:
    v8 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v17, v14, a3);
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9)
  {
LABEL_21:
    v12 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v10 = cf;
  v11 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v11)
  {
    v12 = v11(v9, v10, &v16);
LABEL_7:
    v13 = v12;
    if ((_DWORD)v12)
      goto LABEL_12;
    v14 = v16;
    goto LABEL_9;
  }
  v13 = 4294954514;
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  return v13;
}

uint64_t playerairplay_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_12;
  v5 = DerivedStorage;
  v6 = *(_QWORD *)(DerivedStorage + 224);
  if (!v6)
    goto LABEL_6;
  if (!*(_QWORD *)(v5 + 104))
    goto LABEL_6;
  FigPlayerAirPlayRoute_ReevaluateCurrentRoute(v6);
  v7 = *(NSObject **)(v5 + 104);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __playerairplay_ReevaluateRouteConfiguration_block_invoke;
  v13[3] = &unk_1E2F87F08;
  v13[4] = &v14;
  v13[5] = a1;
  dispatch_sync(v7, v13);
  if (!*((_BYTE *)v15 + 24))
  {
LABEL_6:
    v9 = *(_QWORD *)(v5 + 8);
    if (v9)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
      if (!v10)
      {
        v8 = 4294954514;
        goto LABEL_11;
      }
      v11 = v10(v9, a2);
      goto LABEL_9;
    }
LABEL_12:
    v11 = FigSignalErrorAt();
LABEL_9:
    v8 = v11;
    goto LABEL_11;
  }
  v8 = 0;
LABEL_11:
  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_192C86B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t playerairplay_AddExternalStartupTask(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const __CFArray *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const void *);
  CFRange v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (a2)
  {
    v4 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 472));
    v5 = *(const __CFArray **)(v4 + 464);
    v9.length = CFArrayGetCount(v5);
    v9.location = 0;
    if (CFArrayGetFirstIndexOfValue(v5, v9, a2) == -1)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v4 + 464), a2);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 472));
  }
  v6 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  if (!v6)
    return FigSignalErrorAt();
  v7 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v7)
    return v7(v6, a2);
  else
    return 4294954514;
}

uint64_t playerairplay_RemoveExternalStartupTask(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const __CFArray *v5;
  CFIndex FirstIndexOfValue;
  CFIndex v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const void *);
  CFRange v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 472));
  v5 = *(const __CFArray **)(v4 + 464);
  v11.length = CFArrayGetCount(v5);
  v11.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v11, a2);
  if (FirstIndexOfValue != -1)
  {
    v7 = FirstIndexOfValue;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v4 + 464), v7);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 472));
  v8 = *(_QWORD *)(v4 + 8);
  if (!v8)
    return FigSignalErrorAt();
  v9 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
  if (v9)
    return v9(v8, a2);
  else
    return 4294954514;
}

uint64_t pap_InAirPlayTransitionMode(const void *a1)
{
  CFTypeRef v1;
  uint64_t v2;

  if (a1)
    v1 = CFRetain(a1);
  else
    v1 = 0;
  v2 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 41);
  CFRelease(v1);
  return v2;
}

uint64_t playerairplay_addItemToLocalPlayQueue(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  BOOL IsAirplayVideoActive;
  uint64_t v8;
  uint64_t v9;
  CFIndex IndexOfAirPlayItemInternal;
  CFStringRef v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v14;
  _QWORD block[7];
  BOOL v16;
  os_log_type_t type;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 112), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  v8 = *(_QWORD *)(DerivedStorage + 32);
  v9 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 8));
  if (a3 && *(_DWORD *)(v8 + 16))
  {
    IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)v8, a3);
    if (IndexOfAirPlayItemInternal == -1)
    {
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 8));
      return 4294954516;
    }
    if (!*(_BYTE *)(v9 + 732))
    {
      if (!*(_BYTE *)(v9 + 733))
        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)v8, IndexOfAirPlayItemInternal + 1, a2);
LABEL_11:
      ++*(_DWORD *)(v8 + 16);
      *(_BYTE *)(v9 + 732) = 1;
      *(_WORD *)(v9 + 737) = 0;
      v11 = playqueue_copyPlayQueueSummary(v8);
      if (dword_1EE2A2FA0)
      {
        v18 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 8));
      if (v11)
        CFRelease(v11);
      goto LABEL_16;
    }
  }
  else if (!*(_BYTE *)(v9 + 732))
  {
    if (!*(_BYTE *)(v9 + 733))
      CFArrayAppendValue(*(CFMutableArrayRef *)v8, a2);
    goto LABEL_11;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v8 + 8));
LABEL_16:
  if (a1)
    CFRetain(a1);
  v14 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __playerairplay_addItemToLocalPlayQueue_block_invoke;
  block[3] = &__block_descriptor_57_e5_v8__0l;
  block[4] = DerivedStorage;
  block[5] = a1;
  v16 = IsAirplayVideoActive;
  block[6] = a2;
  dispatch_async(v14, block);
  return 0;
}

uint64_t playerairplay_addItemToSubPlayerPlayQueue(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  void (*v15)(uint64_t, float *);
  uint64_t v16;
  CFTypeRef v17;
  void (*v18)(uint64_t, CFTypeRef, float);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  CFIndex IndexOfAirPlayItemInternal;
  uint64_t v26;
  float v27;
  CFTypeRef v28;
  void (*v29)(uint64_t, CFTypeRef, float);
  CFStringRef v30;
  const void *v31;
  const void *v32;
  int v33;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v35;
  unsigned int v36;
  float v38;
  CFTypeRef cf;
  os_log_type_t type;
  unsigned int v41;
  int v42;
  const char *v43;
  __int16 v44;
  CFStringRef v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  if (a3)
    v8 = CMBaseObjectGetDerivedStorage();
  else
    v8 = 0;
  cf = 0;
  v38 = 0.0;
  if (!*(_QWORD *)(DerivedStorage + 8))
  {
    v19 = FigSignalErrorAt();
    goto LABEL_18;
  }
  v9 = 4294954516;
  if (!a2 || !v7)
    goto LABEL_56;
  if (*(_BYTE *)(DerivedStorage + 45))
  {
    v10 = CMBaseObjectGetDerivedStorage();
    v11 = *(_QWORD *)(v10 + 32);
    MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 8));
    v12 = *(_DWORD *)(v11 + 16);
    MEMORY[0x19402EF04](*(_QWORD *)(v11 + 8));
    v13 = 1;
    if (*(float *)(v10 + 48) != 0.0
      && !v12
      && pap_DoesCurrentRouteUseScreen(a1)
      && !*(_BYTE *)(DerivedStorage + 216))
    {
      v14 = *(_QWORD *)(DerivedStorage + 8);
      v15 = *(void (**)(uint64_t, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v15)
        v15(v14, &v38);
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 19, (CFMutableDictionaryRef *)&cf);
      v16 = *(_QWORD *)(DerivedStorage + 8);
      v17 = cf;
      v18 = *(void (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v18)
        v18(v16, v17, 0.0);
      v13 = 0;
    }
  }
  else
  {
    v13 = 1;
  }
  v20 = *(_QWORD *)(DerivedStorage + 8);
  if (v8)
    v8 = *(_QWORD *)(v8 + 8);
  v21 = *(_QWORD *)(v7 + 8);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v22)
  {
    v9 = 4294954514;
    goto LABEL_56;
  }
  v19 = v22(v20, v21, v8);
  if ((_DWORD)v19)
  {
LABEL_18:
    v9 = v19;
    goto LABEL_56;
  }
  v23 = *(_QWORD *)(DerivedStorage + 32);
  v24 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v23 + 8));
  if (a3 && *(_DWORD *)(v23 + 16))
  {
    IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)v23, a3);
    if (IndexOfAirPlayItemInternal == -1)
    {
      v9 = 4294954516;
LABEL_33:
      MEMORY[0x19402EF04](*(_QWORD *)(v23 + 8));
      if ((v13 & 1) != 0)
        goto LABEL_56;
      goto LABEL_34;
    }
    if (!*(_BYTE *)(v24 + 732) && !*(_BYTE *)(v24 + 733))
    {
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)v23, IndexOfAirPlayItemInternal + 1, a2);
      goto LABEL_41;
    }
LABEL_32:
    v9 = 0;
    goto LABEL_33;
  }
  if (*(_BYTE *)(v24 + 732) || *(_BYTE *)(v24 + 733))
    goto LABEL_32;
  CFArrayAppendValue(*(CFMutableArrayRef *)v23, a2);
LABEL_41:
  ++*(_DWORD *)(v23 + 16);
  *(_BYTE *)(v24 + 732) = 1;
  *(_WORD *)(v24 + 737) = 0;
  v30 = playqueue_copyPlayQueueSummary(v23);
  v31 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v31)
  {
    v32 = v31;
    if (dword_1EE2A2FA0)
    {
      v33 = pap_AirPlayState(v31);
      if (dword_1EE2A2FA0)
      {
        if (v33 && v33 != 10)
        {
          v41 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v35 = v41;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
            v36 = v35;
          else
            v36 = v35 & 0xFFFFFFFE;
          if (v36)
          {
            v42 = 136315394;
            v43 = "playqueue_addItemToSubPlayerPlayQueue";
            v44 = 2114;
            v45 = v30;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    CFRelease(v32);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v23 + 8));
  if (v30)
    CFRelease(v30);
  v9 = 0;
  if ((v13 & 1) == 0)
  {
LABEL_34:
    if ((_DWORD)v9)
    {
      v26 = *(_QWORD *)(DerivedStorage + 8);
      v27 = v38;
      v28 = cf;
      v29 = *(void (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v29)
        v29(v26, v28, v27);
    }
    else
    {
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
    }
  }
LABEL_56:
  if (cf)
    CFRelease(cf);
  return v9;
}

void __playerairplay_addItemToLocalPlayQueue_block_invoke(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  unsigned int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v7;

  if (!**(_BYTE **)(a1 + 32))
  {
    v2 = pap_AirPlayState(*(const void **)(a1 + 40)) - 14;
    v3 = *(void **)(a1 + 40);
    if (v2 >= 3)
    {
      playerairplay_checkStartStopAirPlay(v3, *(unsigned __int8 *)(a1 + 56));
      v4 = pap_AirPlayState(*(const void **)(a1 + 40));
      if (v4 > 0xF || ((1 << v4) & 0xD000) == 0)
      {
        if (dword_1EE2A2FA0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        pap_setAirPlayState(*(const void **)(a1 + 40), 12);
      }
    }
    else
    {
      playerairplay_checkAndUpdatePlayQueueItems(v3);
    }
  }
  v7 = *(const void **)(a1 + 40);
  if (v7)
    CFRelease(v7);
}

void playerairplay_removeItemFromLocalPlayQueue(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  void *v5;
  int v6;
  NSObject *v7;
  void (*v8)(const void *, __int128 *);
  NSObject *v9;
  _QWORD v10[6];
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (void *)MEMORY[0x19403137C]();
  v6 = pap_AirPlayState(a1);
  if (a2)
  {
    if (playqueue_getIndexOfAirPlayItem(*(_QWORD *)(DerivedStorage + 32), a2) != -1)
      playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(_QWORD *)(DerivedStorage + 32), a2, 1, 0);
    if (!*(_BYTE *)(DerivedStorage + 42))
    {
      if (a1)
        CFRetain(a1);
      v7 = *(NSObject **)(DerivedStorage + 104);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __playerairplay_removeItemFromLocalPlayQueue_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = DerivedStorage;
      block[5] = a1;
      dispatch_async(v7, block);
    }
    playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
    v13 = *MEMORY[0x1E0CA2E18];
    v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v8 = *(void (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v8)
      v8(a2, &v13);
    v11 = v13;
    v12 = v14;
    itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)a2, (uint64_t)&v11);
  }
  else
  {
    if (a1)
      CFRetain(a1);
    v9 = *(NSObject **)(DerivedStorage + 104);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __playerairplay_removeItemFromLocalPlayQueue_block_invoke_2;
    v10[3] = &__block_descriptor_48_e5_v8__0l;
    v10[4] = DerivedStorage;
    v10[5] = a1;
    dispatch_async(v9, v10);
  }
  if (v6 == 16 && pap_AirPlayState(a1) == 11)
  {
    if (*(_QWORD *)(DerivedStorage + 168))
      pap_clearLayerContents(a1);
    if (*(_BYTE *)(DerivedStorage + 45))
      FigPlayerAirPlayRoute_ResumeAirPlayScreen(*(_QWORD *)(DerivedStorage + 224));
  }
  objc_autoreleasePoolPop(v5);
}

uint64_t playerairplay_removeItemFromSubPlayerPlayQueue(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (!a2)
  {
    v6 = *(_QWORD *)(DerivedStorage + 8);
    if (v6)
      goto LABEL_6;
    return FigSignalErrorAt();
  }
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(v4 + 8);
  if (!v6)
    return FigSignalErrorAt();
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    goto LABEL_7;
  }
LABEL_6:
  v7 = 0;
LABEL_7:
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v8)
    return 4294954514;
  result = v8(v6, v7);
  if (!(_DWORD)result)
  {
    v10 = *(_QWORD *)(v4 + 32);
    if (a2)
      playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(v10, a2, 1, 0);
    playqueue_clearPlayQueue(v10);
  }
  return result;
}

void __playerairplay_removeItemFromLocalPlayQueue_block_invoke(uint64_t a1)
{
  const void *v2;

  if (!**(_BYTE **)(a1 + 32))
    playerairplay_checkIfAirPlayVideoSessionNeedsToStop(*(const void **)(a1 + 40));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __playerairplay_removeItemFromLocalPlayQueue_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  CFTypeRef cf;
  CFTypeRef v5;

  cf = 0;
  v5 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)v2)
  {
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v2 + 32), (unint64_t)&cf, (unint64_t)&v5);
    playerairplay_savePlaybackInfoAndStopAPV(*(const void **)(a1 + 40), (uint64_t)cf, (uint64_t)v5);
    playqueue_clearPlayQueue(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t playerairplay_setRateCommon(const void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t DerivedStorage;
  BOOL IsAirplayVideoActive;
  uint64_t v16;
  BOOL v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v25)(uint64_t, uint64_t, float);
  uint64_t (*v26)(uint64_t, float);
  _QWORD block[11];
  float v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  char v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v49 = 0;
  v50 = &v49;
  v51 = 0x2020000000;
  v52 = 0;
  v45 = 0;
  v46 = &v45;
  v47 = 0x2020000000;
  v48 = 0;
  v41 = 0;
  v42 = &v41;
  v43 = 0x2020000000;
  v44 = 1;
  v37 = 0;
  v38 = &v37;
  v39 = 0x2020000000;
  v40 = 0;
  v36 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_2;
  v17 = IsAirplayVideoActive;
  FigCFDictionaryGetInt32IfPresent();
  v18 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __playerairplay_setRateCommon_block_invoke;
  block[3] = &unk_1E2F99258;
  block[8] = a1;
  block[9] = DerivedStorage;
  v28 = a7;
  block[10] = a2;
  v29 = *(_OWORD *)a4;
  v30 = *(_QWORD *)(a4 + 16);
  v31 = *(_OWORD *)a5;
  v32 = *(_QWORD *)(a5 + 16);
  v34 = a3;
  v33 = v36;
  block[4] = &v49;
  block[5] = &v45;
  v35 = v17;
  block[6] = &v41;
  block[7] = &v37;
  dispatch_sync(v18, block);
  if (*((_BYTE *)v50 + 24))
    goto LABEL_4;
  v20 = *(_QWORD *)(DerivedStorage + 8);
  if (!v20)
  {
LABEL_2:
    v16 = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (*((_BYTE *)v46 + 24))
  {
LABEL_4:
    v16 = 0;
  }
  else
  {
    if (!*((_BYTE *)v42 + 24) && a7 != 0.0 && !*((_BYTE *)v38 + 24))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetFloat();
      FigCFDictionarySetInt32();
      playerairplay_postPlayerNotification(a1, CFSTR("SetRateFailed"), Mutable);
      if (Mutable)
        CFRelease(Mutable);
      goto LABEL_2;
    }
    if (a3)
    {
      v55 = *(_OWORD *)a4;
      v56 = *(_QWORD *)(a4 + 16);
      v53 = *(_OWORD *)a5;
      v54 = *(_QWORD *)(a5 + 16);
      v21 = FigPlayerSetRateAndAnchorTime(v20, &v55, &v53, a6, a7);
      goto LABEL_12;
    }
    if (a2)
    {
      v25 = *(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v25)
      {
        v21 = v25(v20, a2, a7);
        goto LABEL_12;
      }
    }
    else
    {
      v26 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v26)
      {
        v21 = v26(v20, a7);
LABEL_12:
        v16 = v21;
        if (!(_DWORD)v21)
        {
          if (dword_1EE2A2FA0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v16 = 0;
          *(float *)(DerivedStorage + 48) = a7;
        }
        goto LABEL_5;
      }
    }
    v16 = 4294954514;
  }
LABEL_5:
  if (dword_1EE2A2FA0 >= 2)
  {
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  *(_BYTE *)(DerivedStorage + 57) = 0;
  *(_DWORD *)(DerivedStorage + 60) = 0;
  if (!(_DWORD)v16)
  {
    if (a7 == 0.0 && v36 == 18)
      *(_BYTE *)(DerivedStorage + 57) = 1;
    *(float *)(DerivedStorage + 60) = a7;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  playerairplay_updateRoutingRegistry(a1);
LABEL_22:
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(&v45, 8);
  _Block_object_dispose(&v49, 8);
  return v16;
}

void sub_192C881DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

uint64_t __playerairplay_setRateCommon_block_invoke(uint64_t a1)
{
  int v2;
  BOOL v3;
  char v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const void *v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  CMTime time;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = pap_AirPlayState(*(const void **)(a1 + 64));
  if (v2)
    v3 = v2 == 10;
  else
    v3 = 1;
  v4 = !v3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = *(float *)(a1 + 88);
    if (v6 != 0.0)
    {
      v7 = *(_QWORD *)(a1 + 72);
      if (*(float *)(v7 + 48) == 0.0)
        *(_BYTE *)(v7 + 480) = 0;
    }
    if (v6 > 1.0 && !*(_BYTE *)(*(_QWORD *)(a1 + 72) + 249))
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v6 = 1.0;
      if (!*(_QWORD *)(DerivedStorage + 368))
        v6 = *(float *)(a1 + 88);
    }
    *(float *)(*(_QWORD *)(a1 + 72) + 48) = v6;
    playerairplay_postPlayerRateDidChangeNotification(*(const void **)(a1 + 64), *(_QWORD *)(a1 + 80));
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    if (dword_1EE2A2FA0)
    {
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v10 = pap_AirPlayState(*(const void **)(a1 + 64));
    if (v10 > 0x11 || ((1 << v10) & 0x21800) == 0 || *(float *)(*(_QWORD *)(a1 + 72) + 48) == 0.0)
    {
      if (pap_AirPlayState(*(const void **)(a1 + 64)) == 16)
      {
        v12 = *(const void **)(a1 + 64);
        v13 = *(unsigned __int8 *)(a1 + 144);
        v14 = *(const void **)(a1 + 80);
        time = *(CMTime *)(a1 + 92);
        v16 = *(_OWORD *)(a1 + 116);
        v17 = *(_QWORD *)(a1 + 132);
        playerairplay_setRateAirPlay(v12, v13, (uint64_t)&time, (uint64_t)&v16, v14);
      }
    }
    else
    {
      if (!pap_DoesCurrentRouteUseScreen(*(const void **)(a1 + 64))
        || (v11 = *(_QWORD *)(a1 + 72), *(_BYTE *)(v11 + 45)) && !*(_BYTE *)(v11 + 216))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      }
      playerairplay_checkStartStopAirPlay(*(void **)(a1 + 64), *(unsigned __int8 *)(a1 + 145));
    }
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = playerairplay_isLocalPlaybackCapableRouteSelected();
  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(_QWORD *)(result + 296) != 0;
  return result;
}

uint64_t playerairplay_isLocalPlaybackCapableRouteSelected()
{
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  return 1;
}

void playerairplay_updateRoutingRegistry(const void *a1)
{
  uint64_t DerivedStorage;
  float v3;
  int v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  int Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void **v11;
  CFBooleanRef BOOLean;
  CFTypeRef cf[29];

  cf[27] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOLean = 0;
  cf[0] = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  v3 = *(float *)(DerivedStorage + 60);
  v4 = *(unsigned __int8 *)(DerivedStorage + 57);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  playerairplay_CopyPlayQueueItem(a1, 0, cf);
  if (cf[0]
    && (FigBaseObject = FigPlaybackItemGetFigBaseObject(cf[0]),
        (v6 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48)) != 0)
    && (v6(FigBaseObject, CFSTR("HasEnabledAudio"), *MEMORY[0x1E0C9AE00], &BOOLean), BOOLean))
  {
    Value = CFBooleanGetValue(BOOLean);
  }
  else
  {
    Value = 0;
  }
  if (dword_1EE2A2FA0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3 == 0.0 || cf[0] == 0 || Value == 0)
  {
    if (v4)
      goto LABEL_19;
    v11 = (const void **)MEMORY[0x1E0C9AE40];
  }
  else
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
  }
  FigPlayerAirPlayRoute_SetProperty(*(_QWORD *)(DerivedStorage + 224), CFSTR("PlaybackActive"), *v11);
LABEL_19:
  if (cf[0])
    CFRelease(cf[0]);
  if (BOOLean)
    CFRelease(BOOLean);
}

void itemairplay_reflectSubItemNotification(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  uint64_t *v11;
  uint64_t *v12;
  const void *v13;
  _BOOL4 v14;
  int v15;
  NSObject *v16;
  int v17;
  CFTypeRef cf;
  char v19;
  _QWORD block[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v9 = DerivedStorage;
    v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v11 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    if (!v11 || (v12 = v11, *(_BYTE *)v11))
    {
LABEL_22:
      if (v10)
        CFRelease(v10);
      return;
    }
    if (CFEqual(a3, CFSTR("ItemWasRemovedFromPlayQueue")))
    {
      if (!a5 || (v13 = (const void *)*MEMORY[0x1E0C9AE50], v13 != CFDictionaryGetValue(a5, CFSTR("AsRequested"))))
        playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(v12[4], a2, 1, 0);
      goto LABEL_10;
    }
    if (CFEqual(a3, CFSTR("ReadyForInspection")))
    {
      itemairplay_updateDateTimePivot(v9);
      goto LABEL_10;
    }
    if (CFEqual(a3, CFSTR("ReadyForPlayback")))
    {
      v14 = 1;
      *(_BYTE *)(v9 + 737) = 1;
    }
    else
    {
      if (CFEqual(a3, CFSTR("HasMultipleEnabledAudioTracks")))
      {
        FigPlayerAirPlayRoute_SetProperty(v12[28], CFSTR("DisableBufferedAudio"), (const void *)*MEMORY[0x1E0C9AE50]);
        v16 = v12[13];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __itemairplay_reflectSubItemNotification_block_invoke;
        block[3] = &__block_descriptor_64_e5_v8__0l;
        block[4] = v10;
        block[5] = a2;
        block[6] = v9;
        block[7] = v12;
        dispatch_sync(v16, block);
        goto LABEL_10;
      }
      if (CFEqual(a3, CFSTR("HasEnabledAudioChanged")))
      {
        v19 = 0;
        if (FigCFDictionaryGetBooleanIfPresent())
          *(_BYTE *)(v9 + 888) = 0;
        playerairplay_updateRoutingRegistry(v10);
        goto LABEL_10;
      }
      if (CFEqual(a3, CFSTR("ItemBecameCurrent")))
      {
        if (*(_BYTE *)(v9 + 888))
          playerairplay_setBAOConnectionActiveIfNeeded(v10);
        goto LABEL_10;
      }
      if (CFEqual(a3, CFSTR("SeekDidComplete")) || CFEqual(a3, CFSTR("SeekWasCanceled")))
      {
        LODWORD(cf) = 0;
        if (FigCFDictionaryGetInt32IfPresent())
        {
          v17 = *(_DWORD *)(v9 + 152);
          v14 = 1;
          if (v17 && (_DWORD)cf == v17)
          {
            itemairplay_postItemNotification(a2, CFSTR("TimebaseChanged"), 0);
            v14 = 0;
            *(_DWORD *)(v9 + 152) = 0;
          }
          goto LABEL_11;
        }
        goto LABEL_10;
      }
      if (!CFEqual(a3, CFSTR("TimebaseChanged")))
      {
LABEL_10:
        v14 = 1;
        goto LABEL_11;
      }
      v14 = *(_DWORD *)(v9 + 152) == 0;
    }
LABEL_11:
    if ((!pap_InAirPlayTransitionMode(v10) && ((v15 = pap_AirPlayState(v10)) == 0 || v15 == 10)
       || !CFEqual(a3, CFSTR("ItemWasRemovedFromPlayQueue"))
       && !CFEqual(a3, CFSTR("ItemStoppedBeingCurrent"))
       && !CFEqual(a3, CFSTR("FailedToPlayToEnd"))
       && !CFEqual(a3, CFSTR("FailedToBecomeReadyForPlayback"))
       && !CFEqual(a3, CFSTR("TracksChanged")))
      && v14)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    goto LABEL_22;
  }
}

uint64_t itemairplay_assetPropertyLoaded(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *v8;
  _BYTE *v9;
  _BYTE *v10;
  const void *Value;
  NSObject *v12;
  _QWORD v14[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v9 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (v9)
    {
      if (a5)
      {
        v10 = v9;
        if (!*v9)
        {
          Value = CFDictionaryGetValue(a5, CFSTR("assetPayload_Property"));
          if (CFEqual(Value, CFSTR("assetProperty_AssetType")))
          {
            if (v8)
              CFRetain(v8);
            if (a2)
              CFRetain(a2);
            v12 = *((_QWORD *)v10 + 13);
            v14[0] = MEMORY[0x1E0C809B0];
            v14[1] = 3221225472;
            v14[2] = __itemairplay_assetPropertyLoaded_block_invoke;
            v14[3] = &__block_descriptor_64_e5_v8__0l;
            v14[4] = v10;
            v14[5] = DerivedStorage;
            v14[6] = a2;
            v14[7] = v8;
            dispatch_async(v12, v14);
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v8);
          }
        }
      }
    }
    if (v8)
      CFRelease(v8);
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_assetPropertyFailedToLoad(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *v8;
  _BYTE *v9;
  _BYTE *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v12;
  NSObject *v13;
  _QWORD block[8];
  os_log_type_t type;
  int v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v9 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (v9)
    {
      if (a5)
      {
        v10 = v9;
        if (!*v9)
        {
          v18 = 0;
          FigCFDictionaryGetInt32IfPresent();
          if (dword_1EE2A2FA0)
          {
            v17 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFDictionaryGetValue(a5, CFSTR("assetPayload_Property"));
          if (FigCFEqual() && *(_BYTE *)(DerivedStorage + 736) == 1)
          {
            v12 = *(const void **)(DerivedStorage + 712);
            *(_QWORD *)(DerivedStorage + 712) = 0;
            if (v12)
              CFRelease(v12);
            if (v8)
              CFRetain(v8);
            if (a2)
              CFRetain(a2);
            v13 = *((_QWORD *)v10 + 13);
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = __itemairplay_assetPropertyFailedToLoad_block_invoke;
            block[3] = &__block_descriptor_64_e5_v8__0l;
            block[4] = v10;
            block[5] = DerivedStorage;
            block[6] = v8;
            block[7] = a2;
            dispatch_async(v13, block);
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v8);
          }
        }
      }
    }
    if (v8)
      CFRelease(v8);
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_assetPropertyBatchLoaded(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *v8;
  _BYTE *v9;
  const __CFNumber *Value;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v9 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (v9)
    {
      if (a5)
      {
        if (!*v9)
        {
          Value = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("assetPayload_BatchID"));
          if (Value)
          {
            CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
            if (valuePtr)
            {
              if (valuePtr == *(_DWORD *)(DerivedStorage + 704) && !*(_BYTE *)(DerivedStorage + 760))
              {
                itemairplay_postItemNotification(a2, CFSTR("ReadyForInspection"), 0);
                *(_BYTE *)(DerivedStorage + 760) = 1;
              }
              else if (valuePtr == *(_DWORD *)(DerivedStorage + 696) && !*(_BYTE *)(DerivedStorage + 741))
              {
                *(_BYTE *)(DerivedStorage + 741) = 1;
              }
              else if (valuePtr == *(_DWORD *)(DerivedStorage + 700) && *(_BYTE *)(DerivedStorage + 742))
              {
                *(_BYTE *)(DerivedStorage + 742) = 1;
              }
            }
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v8);
          }
        }
      }
    }
    if (v8)
      CFRelease(v8);
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  int v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v8;
  BOOL v9;
  int v10;
  uint64_t *v11;
  CFTypeRef v12;
  NSObject *v13;
  uint64_t FigBaseObject;
  uint64_t v15;
  void (*v16)(uint64_t);
  _QWORD block[7];
  os_log_type_t type;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v3 = DerivedStorage;
    v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v5 = CMBaseObjectGetDerivedStorage();
    if (v4)
    {
      if (dword_1EE2A2FA0)
      {
        v6 = pap_AirPlayState(v4);
        if (dword_1EE2A2FA0)
        {
          if (v6 && v6 != 10)
          {
            v20 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      v8 = pap_AirPlayState(v4);
      if (v8)
        v9 = v8 == 10;
      else
        v9 = 1;
      if (v9)
      {
        v10 = 0;
        v11 = (uint64_t *)(v5 + 32);
        goto LABEL_18;
      }
      v11 = (uint64_t *)(v5 + 32);
      if (playqueue_getIndexOfAirPlayItem(*(_QWORD *)(v5 + 32), a1) != -1)
      {
        if (*(_BYTE *)(v3 + 733))
        {
          v12 = CFRetain(*(CFTypeRef *)(v3 + 80));
          CFRetain(v4);
          v13 = *(NSObject **)(v5 + 104);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __itemairplay_Invalidate_block_invoke;
          block[3] = &__block_descriptor_56_e5_v8__0l;
          block[4] = v5;
          block[5] = v4;
          block[6] = v12;
          dispatch_async(v13, block);
        }
        v10 = 1;
LABEL_18:
        playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*v11, a1, 1, v10);
      }
    }
    *(_BYTE *)(v3 + 72) = 1;
    FigReadWriteLockLockForWrite();
    FigReadWriteLockUnlockForWrite();
    *(_DWORD *)(v3 + 728) = -1;
    if (v5)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(v5 + 24));
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 16), *(const void **)(v3 + 8));
      MEMORY[0x19402EA24](*(_QWORD *)(v5 + 24));
    }
    if (*(_QWORD *)(v3 + 16))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(_QWORD *)(v3 + 8))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v3 + 8));
      if (FigBaseObject)
      {
        v15 = FigBaseObject;
        v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v16)
          v16(v15);
      }
    }
    if (v4)
      CFRelease(v4);
  }
  return 0;
}

uint64_t itemairplay_Finalize(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemairplay_Invalidate(a1);
  v3 = *(const void **)(DerivedStorage + 680);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 680) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 688);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 688) = 0;
  }
  FigSimpleMutexDestroy();
  v5 = *(const void **)(DerivedStorage + 712);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 712) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 776);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 776) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 16);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 8);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v9 = *(const void **)(DerivedStorage + 32);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 40);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  itemairplay_doCleanupAtEndOfPlayback();
  itemairplay_cleanupItemForAirPlay((uint64_t)a1, 0);
  v11 = *(const void **)(DerivedStorage + 752);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 752) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 24);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 88);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 112);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 96))
  {
    MEMORY[0x19402A650]();
    v15 = *(const void **)(DerivedStorage + 96);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
  }
  v16 = *(const void **)(DerivedStorage + 80);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 336);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 336) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 344))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 344) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 352);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 352) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 360);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 360) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 368);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 368) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 440);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 440) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 784);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 784) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 792);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 792) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 800);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 800) = 0;
  }
  v25 = *(const void **)(DerivedStorage + 808);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 808) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 376);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 376) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 384);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 384) = 0;
  }
  v28 = *(const void **)(DerivedStorage + 616);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(DerivedStorage + 616) = 0;
  }
  v29 = *(const void **)(DerivedStorage + 624);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(DerivedStorage + 624) = 0;
  }
  v30 = *(const void **)(DerivedStorage + 192);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  v31 = *(const void **)(DerivedStorage + 640);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(DerivedStorage + 640) = 0;
  }
  v32 = *(const void **)(DerivedStorage + 880);
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(DerivedStorage + 880) = 0;
  }
  v33 = *(const void **)(DerivedStorage + 832);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(DerivedStorage + 832) = 0;
  }
  v34 = *(const void **)(DerivedStorage + 840);
  if (v34)
  {
    CFRelease(v34);
    *(_QWORD *)(DerivedStorage + 840) = 0;
  }
  v35 = *(const void **)(DerivedStorage + 856);
  if (v35)
  {
    CFRelease(v35);
    *(_QWORD *)(DerivedStorage + 856) = 0;
  }
  v36 = *(const void **)(DerivedStorage + 48);
  if (v36)
  {
    CFRelease(v36);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v37 = *(const void **)(DerivedStorage + 584);
  if (v37)
  {
    CFRelease(v37);
    *(_QWORD *)(DerivedStorage + 584) = 0;
  }
  FigSimpleMutexDestroy();
  while (1)
  {
    v38 = *(_QWORD **)(DerivedStorage + 648);
    if (!v38)
      break;
    *(_QWORD *)(DerivedStorage + 648) = *v38;
    playerairplay_freeCustomURLRequestListEntry(v38);
  }
  while (1)
  {
    v39 = *(_QWORD **)(DerivedStorage + 656);
    if (!v39)
      break;
    *(_QWORD *)(DerivedStorage + 656) = *v39;
    playerairplay_freeContentKeyRequestListEntry(v39);
  }
  result = *(_QWORD *)(DerivedStorage + 64);
  if (result)
  {
    result = FigReadWriteLockDestroy();
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  return result;
}

uint64_t itemairplay_CopyProperty(CFTypeRef a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  int v17;
  NSObject *v18;
  __CFString **v19;
  int v20;
  __CFString **v21;
  __CFString *v22;
  __CFArray *v23;
  NSObject *v24;
  const __CFArray *v25;
  const void *v26;
  NSObject *v27;
  uint64_t v28;
  const __CFArray *v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  const __CFArray *v33;
  CFMutableArrayRef Mutable;
  const void *v35;
  CMTimeEpoch v36;
  _OWORD *v37;
  CMTimeEpoch v38;
  NSObject *v39;
  int v40;
  NSObject *v41;
  __CFArray *v42;
  int v43;
  int isAPVSupportedForCoordinatedPlayback;
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[8];
  _QWORD v48[6];
  CMTime time;
  uint64_t v50;
  _QWORD block[6];
  CFTypeRef v52;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v52 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 72) && a4)
  {
    v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v13 = CMBaseObjectGetDerivedStorage();
    if (!v13 || (v14 = v13, *(_BYTE *)v13))
    {
      v15 = FigSignalErrorAt();
LABEL_9:
      v10 = v15;
      goto LABEL_10;
    }
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v13 + 32), 0, (unint64_t)&v52);
    v16 = CFSTR("AccessLog");
    if (CFEqual(a2, CFSTR("AccessLog")) || (v16 = CFSTR("ErrorLog"), CFEqual(a2, CFSTR("ErrorLog"))))
    {
      if (v52 == a1 && pap_AirPlayState(v11) == 16)
      {
        v15 = itemairplay_copyLogs(v11, (uint64_t)a1, (uint64_t)v16, a4);
        goto LABEL_9;
      }
LABEL_23:
      v15 = FigPlaybackItemCopyProperty(*(_QWORD *)(v9 + 8), (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
      goto LABEL_9;
    }
    v17 = pap_AirPlayState(v11);
    if (!v17 || v17 == 10)
      goto LABEL_23;
    if (CFEqual(a2, CFSTR("Timebase")))
    {
      v18 = *(NSObject **)(v14 + 104);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __itemairplay_CopyProperty_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = v9;
      block[5] = a4;
      dispatch_sync(v18, block);
      goto LABEL_26;
    }
    if (CFEqual(a2, CFSTR("BufferState")))
    {
      v19 = kFigPlaybackItemBufferState_Filling;
      v20 = *(unsigned __int8 *)(v9 + 610);
      v21 = kFigPlaybackItemBufferState_Full;
      goto LABEL_31;
    }
    if (CFEqual(a2, CFSTR("WillKeepUpPrediction")))
    {
      v19 = kFigPlaybackItemWillKeepUpPrediction_UnlikelyToKeepUp;
      v20 = *(unsigned __int8 *)(v9 + 611);
      v21 = kFigPlaybackItemWillKeepUpPrediction_LikelyToKeepUp;
LABEL_31:
      if (v20)
        v19 = v21;
LABEL_33:
      v22 = *v19;
LABEL_34:
      v23 = (__CFArray *)CFRetain(v22);
      goto LABEL_35;
    }
    if (CFEqual(a2, CFSTR("SeekableTimeIntervals")))
    {
      time.value = 0;
      *(_QWORD *)&time.timescale = &time;
      time.epoch = 0x2020000000;
      v50 = 0;
      v24 = *(NSObject **)(v14 + 104);
      v48[0] = MEMORY[0x1E0C809B0];
      v48[1] = 3221225472;
      v48[2] = __itemairplay_CopyProperty_block_invoke_2;
      v48[3] = &unk_1E2F87F08;
      v48[4] = &time;
      v48[5] = v9;
      dispatch_sync(v24, v48);
      v25 = *(const __CFArray **)(*(_QWORD *)&time.timescale + 24);
      if (v25)
      {
        v10 = itemairplay_convertTimeRangesToTimeIntervals(a3, v25, 0, a4);
        v26 = *(const void **)(*(_QWORD *)&time.timescale + 24);
        if (v26)
          CFRelease(v26);
        goto LABEL_90;
      }
      goto LABEL_89;
    }
    if (CFEqual(a2, CFSTR("PlayableTimeIntervals")))
    {
      time.value = 0;
      *(_QWORD *)&time.timescale = &time;
      time.epoch = 0x2020000000;
      v50 = 0;
      v27 = *(NSObject **)(v14 + 104);
      v47[0] = MEMORY[0x1E0C809B0];
      v47[1] = 3221225472;
      v47[2] = __itemairplay_CopyProperty_block_invoke_3;
      v47[3] = &unk_1E2F991F0;
      v47[6] = v14;
      v47[7] = v9;
      v47[4] = &time;
      v47[5] = v11;
      dispatch_sync(v27, v47);
      v28 = *(_QWORD *)&time.timescale;
      if (*(_BYTE *)(v14 + 249))
      {
        v29 = *(const __CFArray **)(*(_QWORD *)&time.timescale + 24);
        if (v29 && CFArrayGetCount(v29) >= 1)
        {
          v28 = *(_QWORD *)&time.timescale;
        }
        else
        {
          v30 = CMBaseObjectGetDerivedStorage();
          v28 = *(_QWORD *)&time.timescale;
          if (*(_QWORD *)(v30 + 368))
          {
            v31 = *(const void **)(*(_QWORD *)&time.timescale + 24);
            if (v31)
              CFRelease(v31);
            v32 = itemairplay_copyLoadedTimeRanges();
            v28 = *(_QWORD *)&time.timescale;
            *(_QWORD *)(*(_QWORD *)&time.timescale + 24) = v32;
          }
        }
      }
      v33 = *(const __CFArray **)(v28 + 24);
      if (v33)
      {
        v10 = itemairplay_convertTimeRangesToTimeIntervals(a3, v33, 1, a4);
      }
      else
      {
        Mutable = CFArrayCreateMutable(a3, 1, MEMORY[0x1E0C9B378]);
        v10 = 0;
        *a4 = Mutable;
      }
      v35 = *(const void **)(*(_QWORD *)&time.timescale + 24);
      if (v35)
        CFRelease(v35);
      goto LABEL_90;
    }
    if (CFEqual(a2, CFSTR("currentDate")))
    {
      v22 = *(__CFString **)(v9 + 192);
      if (v22 && !*(_BYTE *)(v9 + 224))
        goto LABEL_34;
LABEL_61:
      v10 = 4294954513;
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("estimatedCurrentDate")))
    {
      v22 = *(__CFString **)(v9 + 192);
      if (v22 && *(_BYTE *)(v9 + 224))
        goto LABEL_34;
      goto LABEL_61;
    }
    if (CFEqual(a2, CFSTR("currentDateAndTime")))
    {
      v15 = itemairplay_copyCurrentDateAndTime(a1, a4);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("EndTime")))
    {
      if ((*(_DWORD *)(v9 + 460) & 0x1D) == 1)
      {
        *(_OWORD *)&time.value = *(_OWORD *)(v9 + 448);
        v36 = *(_QWORD *)(v9 + 464);
LABEL_67:
        time.epoch = v36;
LABEL_72:
        v23 = CMTimeCopyAsDictionary(&time, a3);
        goto LABEL_35;
      }
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("ReverseEndTime")))
    {
      if ((*(_DWORD *)(v9 + 484) & 0x1D) != 1)
        goto LABEL_79;
      v37 = (_OWORD *)(v9 + 472);
      v38 = *(_QWORD *)(v9 + 488);
    }
    else
    {
      if (CFEqual(a2, CFSTR("TimeToPauseBuffering")))
      {
        if ((*(_DWORD *)(v9 + 508) & 0x1D) == 1)
        {
          *(_OWORD *)&time.value = *(_OWORD *)(v9 + 496);
          v36 = *(_QWORD *)(v9 + 512);
          goto LABEL_67;
        }
LABEL_79:
        v23 = 0;
        goto LABEL_35;
      }
      if (!CFEqual(a2, CFSTR("TimeToPausePlayback")))
      {
        if (CFEqual(a2, CFSTR("SelectedMediaArray")))
        {
          if (v52 != a1 || pap_AirPlayState(v11) != 16)
            goto LABEL_23;
          time.value = 0;
          *(_QWORD *)&time.timescale = &time;
          time.epoch = 0x2020000000;
          v50 = 0;
          v39 = *(NSObject **)(v14 + 96);
          v46[0] = MEMORY[0x1E0C809B0];
          v46[1] = 3221225472;
          v46[2] = __itemairplay_CopyProperty_block_invoke_4;
          v46[3] = &unk_1E2F87F08;
          v46[4] = &time;
          v46[5] = a1;
          dispatch_sync(v39, v46);
          *a4 = *(__CFArray **)(*(_QWORD *)&time.timescale + 24);
          _Block_object_dispose(&time, 8);
LABEL_26:
          v10 = 0;
          goto LABEL_10;
        }
        if (!CFEqual(a2, CFSTR("TaggedRangeMetadataArray")))
        {
          if (CFEqual(a2, CFSTR("CountOfTaggedRangeMetadataArrayListeners")))
          {
            v43 = pap_AirPlayState(v11);
            if (!v43 || v43 == 10)
              goto LABEL_23;
            v23 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, (const void *)(v9 + 824));
            if (!v23)
            {
              v10 = 4294954510;
              goto LABEL_10;
            }
LABEL_35:
            v10 = 0;
            *a4 = v23;
            goto LABEL_10;
          }
          if (CFEqual(a2, CFSTR("IsCoordinatedPlaybackSupported")))
          {
            isAPVSupportedForCoordinatedPlayback = playerairplay_isAPVSupportedForCoordinatedPlayback();
            v19 = (__CFString **)MEMORY[0x1E0C9AE50];
            if (!isAPVSupportedForCoordinatedPlayback)
              v19 = (__CFString **)MEMORY[0x1E0C9AE40];
          }
          else
          {
            if (!CFEqual(a2, CFSTR("IsReadyForPlayback")))
              goto LABEL_23;
            v19 = (__CFString **)MEMORY[0x1E0C9AE50];
            if (!*(_BYTE *)(v9 + 737))
              v19 = (__CFString **)MEMORY[0x1E0C9AE40];
          }
          goto LABEL_33;
        }
        v40 = pap_AirPlayState(v11);
        if (!v40 || v40 == 10)
          goto LABEL_23;
        time.value = 0;
        *(_QWORD *)&time.timescale = &time;
        time.epoch = 0x2020000000;
        v50 = 0;
        v41 = *(NSObject **)(v14 + 104);
        v45[0] = MEMORY[0x1E0C809B0];
        v45[1] = 3221225472;
        v45[2] = __itemairplay_CopyProperty_block_invoke_5;
        v45[3] = &unk_1E2F87F08;
        v45[4] = &time;
        v45[5] = v9;
        dispatch_sync(v41, v45);
        v42 = *(__CFArray **)(*(_QWORD *)&time.timescale + 24);
        if (v42)
        {
          v10 = 0;
          *a4 = v42;
LABEL_90:
          _Block_object_dispose(&time, 8);
          goto LABEL_10;
        }
LABEL_89:
        v10 = 4294954513;
        goto LABEL_90;
      }
      if ((*(_DWORD *)(v9 + 532) & 0x1D) != 1)
        goto LABEL_79;
      v37 = (_OWORD *)(v9 + 520);
      v38 = *(_QWORD *)(v9 + 536);
    }
    time.epoch = v38;
    *(_OWORD *)&time.value = *v37;
    goto LABEL_72;
  }
  v10 = FigSignalErrorAt();
  v11 = 0;
LABEL_10:
  if (v52)
    CFRelease(v52);
  if (v11)
    CFRelease(v11);
  return v10;
}

void sub_192C8A2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t itemairplay_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t FigBaseObject;
  uint64_t (*v15)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v16;
  char v18;
  CFTypeRef v19;
  CFTypeRef cf;

  v19 = 0;
  cf = 0;
  v18 = 0;
  if (!a1)
  {
    v16 = FigSignalErrorAt();
LABEL_23:
    v8 = 0;
    goto LABEL_12;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    FigSignalErrorAt();
    v16 = 0;
    goto LABEL_23;
  }
  v7 = DerivedStorage;
  v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v9 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v9 || *v9)
  {
    FigSignalErrorAt();
LABEL_20:
    v16 = 0;
    goto LABEL_12;
  }
  v10 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemairplay_handleSetProperty, &v18, &cf, &v19);
  if ((_DWORD)v10)
  {
LABEL_10:
    v16 = v10;
    goto LABEL_12;
  }
  if (v18)
    goto LABEL_20;
  v11 = *(_QWORD *)(v7 + 8);
  if (!v11)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_10;
  }
  v13 = v19;
  v12 = cf;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(v11);
  v15 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v15)
  {
    v10 = v15(FigBaseObject, v12, v13);
    goto LABEL_10;
  }
  v16 = 4294954514;
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (v8)
    CFRelease(v8);
  return v16;
}

uint64_t itemairplay_copyLogs(const void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  uint64_t v8;
  const void *v9;
  CFTypeRef v10;
  OpaqueCMClock *v11;
  const void *v12;
  CFTypeRef v13;
  CMTime *v14;
  OpaqueCMClock *v15;
  CFTypeRef v16;
  CFTypeID v17;
  uint64_t v18;
  CMTime v20;
  CMTime lhs;
  CMTime v22;
  CMTime v23;
  CFTypeRef v24;

  v24 = 0;
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v23, 0, sizeof(v23));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v23, HostTimeClock);
  if (FigCFEqual())
  {
    memset(&v22, 0, sizeof(v22));
    lhs = v23;
    v20 = *(CMTime *)(DerivedStorage + 392);
    CMTimeSubtract(&v22, &lhs, &v20);
    lhs = v22;
    *(_OWORD *)&v20.value = gLogRequestInterval;
    v20.epoch = 0;
    if ((CMTimeCompare(&lhs, &v20) & 0x80000000) == 0)
    {
      v8 = playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(a1, (const void *)*MEMORY[0x1E0CA4008], 0, 500000000, &v24);
      if (!(_DWORD)v8)
      {
        v9 = *(const void **)(DerivedStorage + 376);
        v10 = v24;
        *(_QWORD *)(DerivedStorage + 376) = v24;
        if (v10)
          CFRetain(v10);
        if (v9)
          CFRelease(v9);
        v11 = CMClockGetHostTimeClock();
        CMClockGetTime(&lhs, v11);
        *(CMTime *)(DerivedStorage + 392) = lhs;
        goto LABEL_20;
      }
LABEL_30:
      v18 = v8;
      goto LABEL_25;
    }
    v16 = *(CFTypeRef *)(DerivedStorage + 376);
    if (!v16)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (!FigCFEqual())
    goto LABEL_20;
  memset(&v22, 0, sizeof(v22));
  lhs = v23;
  v20 = *(CMTime *)(DerivedStorage + 416);
  CMTimeSubtract(&v22, &lhs, &v20);
  lhs = v22;
  *(_OWORD *)&v20.value = gLogRequestInterval;
  v20.epoch = 0;
  if ((CMTimeCompare(&lhs, &v20) & 0x80000000) == 0)
  {
    v8 = playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(a1, (const void *)*MEMORY[0x1E0CA4010], 0, 500000000, &v24);
    if (!(_DWORD)v8)
    {
      v12 = *(const void **)(DerivedStorage + 384);
      v13 = v24;
      *(_QWORD *)(DerivedStorage + 384) = v24;
      if (v13)
        CFRetain(v13);
      v14 = (CMTime *)(DerivedStorage + 416);
      if (v12)
        CFRelease(v12);
      v15 = CMClockGetHostTimeClock();
      CMClockGetTime(&lhs, v15);
      *v14 = lhs;
      goto LABEL_20;
    }
    goto LABEL_30;
  }
  v16 = *(CFTypeRef *)(DerivedStorage + 384);
  if (v16)
LABEL_18:
    v16 = CFRetain(v16);
LABEL_19:
  v24 = v16;
LABEL_20:
  if (v24)
  {
    v17 = CFGetTypeID(v24);
    if (v17 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)v24) >= 1)
    {
      v18 = 0;
      *a4 = v24;
      return v18;
    }
  }
  v18 = 0;
  *a4 = 0;
LABEL_25:
  if (v24)
    CFRelease(v24);
  return v18;
}

uint64_t itemairplay_convertTimeRangesToTimeIntervals(const __CFAllocator *a1, CFArrayRef theArray, uint64_t a3, __CFArray **a4)
{
  uint64_t Count;
  uint64_t v8;
  CFMutableArrayRef Mutable;
  __CFArray *v10;
  CFIndex v11;
  const __CFAllocator *v12;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v14;
  const __CFDictionary *Value;
  const __CFDictionary *v16;
  uint64_t v17;
  const __CFDictionary *v18;
  CFDictionaryRef v19;
  __CFArray **v21;
  void *v22;
  void *key;
  CMTime rhs;
  CMTime lhs;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  Float64 Seconds;
  Float64 valuePtr;
  void *values[2];
  __int128 v32;
  void *keys[2];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return 4294954513;
  v8 = Count;
  Mutable = CFArrayCreateMutable(a1, Count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294954510;
  v10 = Mutable;
  v21 = a4;
  v11 = 0;
  v22 = (void *)*MEMORY[0x1E0CA4050];
  key = (void *)*MEMORY[0x1E0CA4058];
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v11);
    if (ValueAtIndex)
      break;
LABEL_17:
    if (v8 == ++v11)
    {
      v17 = 0;
      *v21 = v10;
      return v17;
    }
  }
  v14 = ValueAtIndex;
  *(_OWORD *)keys = 0u;
  v34 = 0u;
  *(_OWORD *)values = 0u;
  v32 = 0u;
  Seconds = 0.0;
  valuePtr = 0.0;
  v28 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v27 = v28;
  v26 = v28;
  Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, key);
  v16 = (const __CFDictionary *)CFDictionaryGetValue(v14, v22);
  v17 = 4294954513;
  if (!Value)
    goto LABEL_22;
  v18 = v16;
  if (!v16)
    goto LABEL_22;
  CMTimeMakeFromDictionary(&v28, Value);
  CMTimeMakeFromDictionary(&v26, v18);
  lhs = v28;
  rhs = v26;
  CMTimeAdd(&v27, &lhs, &rhs);
  lhs = v28;
  valuePtr = CMTimeGetSeconds(&lhs);
  lhs = v27;
  Seconds = CMTimeGetSeconds(&lhs);
  keys[0] = CFSTR("start");
  keys[1] = CFSTR("end");
  *(_QWORD *)&v34 = CFSTR("startTime");
  *((_QWORD *)&v34 + 1) = CFSTR("endTime");
  values[0] = CFNumberCreate(v12, kCFNumberFloat64Type, &valuePtr);
  values[1] = CFNumberCreate(v12, kCFNumberFloat64Type, &Seconds);
  lhs = v28;
  *(_QWORD *)&v32 = CMTimeCopyAsDictionary(&lhs, a1);
  lhs = v27;
  *((_QWORD *)&v32 + 1) = CMTimeCopyAsDictionary(&lhs, a1);
  v19 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (values[0])
    CFRelease(values[0]);
  if (values[1])
    CFRelease(values[1]);
  if ((_QWORD)v32)
    CFRelease((CFTypeRef)v32);
  if (*((_QWORD *)&v32 + 1))
    CFRelease(*((CFTypeRef *)&v32 + 1));
  if (v19)
  {
    CFArrayAppendValue(v10, v19);
    CFRelease(v19);
    goto LABEL_17;
  }
  v17 = 4294954510;
LABEL_22:
  CFRelease(v10);
  return v17;
}

uint64_t itemairplay_copyLoadedTimeRanges()
{
  const void *v0;
  CFMutableDictionaryRef ProxiedPropertyParams;
  uint64_t v3;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  v3 = 0;
  ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
  playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(v0, (const void *)*MEMORY[0x1E0CA3FF8], ProxiedPropertyParams, 500000000, &v3);
  if (ProxiedPropertyParams)
    CFRelease(ProxiedPropertyParams);
  if (v0)
    CFRelease(v0);
  return v3;
}

uint64_t itemairplay_handleSetProperty(const void *a1, uint64_t a2, const __CFString *a3, const __CFDictionary *a4, _BYTE *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  const void *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  __CFDictionary *v20;
  const __CFString *v21;
  int v22;
  uint64_t v23;
  CFTypeRef v24;
  CFTypeRef v25;
  int v27;
  uint64_t v28;
  int v29;
  CFTypeID v30;
  NSObject *v31;
  const void *v32;
  CFTypeID TypeID;
  int v34;
  const void *v35;
  uint64_t v36;
  const void *v37;
  int v38;
  CFTypeID v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  const void **v43;
  NSObject *v44;
  void *v45;
  const void *v46;
  int v47;
  const __CFAllocator *v48;
  CFDictionaryRef v49;
  __CFDictionary *v50;
  const void *v51;
  CFDictionaryRef v52;
  int v53;
  int v54;
  const __CFAllocator *v55;
  NSObject *v56;
  int v57;
  const __CFAllocator *v58;
  CFDictionaryRef v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const __CFDictionary *v63;
  int v64;
  const void *v65;
  uint64_t v66;
  _QWORD v67[8];
  CMTime v68;
  _QWORD v69[6];
  CMTime valuePtr;
  uint64_t v71;
  _QWORD block[10];

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(DerivedStorage + 72))
    {
      FigSignalErrorAt();
      return 0;
    }
    v14 = DerivedStorage;
    v15 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v16 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!v16 || (v17 = v16, *v16))
    {
      FigSignalErrorAt();
      goto LABEL_73;
    }
    if (CFEqual(a3, CFSTR("EndTime")))
    {
      v18 = v14 + 448;
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr, a4);
        *(_OWORD *)v18 = *(_OWORD *)&valuePtr.value;
        *(_QWORD *)(v14 + 464) = valuePtr.epoch;
        v19 = pap_AirPlayState(v15);
        if (v19 && v19 != 10)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
          v20 = *(__CFDictionary **)(v14 + 336);
          v21 = CFSTR("SetEndTime");
LABEL_15:
          CFDictionarySetValue(v20, v21, a4);
LABEL_16:
          MEMORY[0x19402EF04](*(_QWORD *)(v14 + 344));
LABEL_17:
          playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v15);
          goto LABEL_19;
        }
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    if (CFEqual(a3, CFSTR("ReverseEndTime")))
    {
      v18 = v14 + 472;
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr, a4);
        *(_OWORD *)v18 = *(_OWORD *)&valuePtr.value;
        *(_QWORD *)(v14 + 488) = valuePtr.epoch;
        v22 = pap_AirPlayState(v15);
        if (v22 && v22 != 10)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
          v20 = *(__CFDictionary **)(v14 + 336);
          v21 = CFSTR("ReverseEndTime");
          goto LABEL_15;
        }
LABEL_19:
        *a5 = 0;
        if (a3)
          v24 = CFRetain(a3);
        else
          v24 = 0;
        *a6 = v24;
        if (a4)
          v25 = CFRetain(a4);
        else
          v25 = 0;
        a4 = 0;
        *a7 = v25;
        goto LABEL_26;
      }
LABEL_18:
      v23 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)v18 = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v23 + 16);
      goto LABEL_19;
    }
    if (CFEqual(a3, CFSTR("currentDate")))
    {
      v27 = pap_AirPlayState(v15);
      if (!v27 || v27 == 10)
        goto LABEL_19;
      v28 = itemairplay_SeekToDateWithID((uint64_t)a1, a4, 0);
      goto LABEL_33;
    }
    if (CFEqual(a3, CFSTR("estimatedCurrentDate")))
    {
      v29 = pap_AirPlayState(v15);
      if (!v29 || v29 == 10)
        goto LABEL_19;
      if (pap_AirPlayState(v15) != 16 || !*(_BYTE *)(v14 + 733))
      {
        v32 = *(const void **)(v14 + 192);
        *(_QWORD *)(v14 + 192) = a4;
        if (a4)
          CFRetain(a4);
        if (v32)
          CFRelease(v32);
        a4 = 0;
        *(_BYTE *)(v14 + 224) = 1;
        goto LABEL_34;
      }
      goto LABEL_61;
    }
    if (CFEqual(a3, CFSTR("SelectedMediaArray")))
    {
      if (a4)
      {
        v30 = CFGetTypeID(a4);
        if (v30 == CFArrayGetTypeID())
        {
          if (v15)
            CFRetain(v15);
          CFRetain(a1);
          CFRetain(a4);
          v31 = *((_QWORD *)v17 + 12);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __itemairplay_handleSetProperty_block_invoke;
          block[3] = &__block_descriptor_72_e5_v8__0l;
          block[4] = v14;
          block[5] = v17;
          block[6] = a4;
          block[7] = v15;
          block[8] = a1;
          dispatch_async(v31, block);
        }
      }
      goto LABEL_19;
    }
    if (CFEqual(a3, CFSTR("Restrictions")))
    {
      if (!a4 || (TypeID = CFNumberGetTypeID(), TypeID != CFGetTypeID(a4)))
      {
LABEL_61:
        v28 = FigSignalErrorAt();
LABEL_33:
        a4 = (const __CFDictionary *)v28;
LABEL_34:
        *a5 = 1;
        goto LABEL_26;
      }
      valuePtr.value = 0;
      CFNumberGetValue(a4, kCFNumberSInt64Type, &valuePtr);
      if (*(_QWORD *)(v14 + 720) == valuePtr.value
        || (*(_QWORD *)(v14 + 720) = valuePtr.value, (v34 = pap_AirPlayState(v15)) == 0)
        || v34 == 10)
      {
LABEL_60:
        a4 = 0;
        goto LABEL_34;
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v14 + 336), CFSTR("PlaybackRestrictions"), a4);
      MEMORY[0x19402EF04](*(_QWORD *)(v14 + 344));
LABEL_59:
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v15);
      goto LABEL_60;
    }
    if (CFEqual(a3, CFSTR("AutomaticallyLoadedAssetProperties")))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 672));
      v35 = *(const void **)(v14 + 680);
      *(_QWORD *)(v14 + 680) = a4;
      if (!a4)
      {
LABEL_65:
        if (v35)
          CFRelease(v35);
        v36 = *(_QWORD *)(v14 + 672);
LABEL_68:
        MEMORY[0x19402EF04](v36);
        goto LABEL_19;
      }
LABEL_64:
      CFRetain(a4);
      goto LABEL_65;
    }
    if (CFEqual(a3, CFSTR("AutomaticallyLoadedAssetTrackProperties")))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 672));
      v35 = *(const void **)(v14 + 688);
      *(_QWORD *)(v14 + 688) = a4;
      if (!a4)
        goto LABEL_65;
      goto LABEL_64;
    }
    if (CFEqual(a3, CFSTR("TextMarkupArray")))
    {
      v37 = *(const void **)(v14 + 776);
      *(_QWORD *)(v14 + 776) = a4;
      if (a4)
        CFRetain(a4);
      if (v37)
        CFRelease(v37);
      if (!a4)
        goto LABEL_19;
      v38 = pap_AirPlayState(v15);
      if (!v38 || v38 == 10)
        goto LABEL_19;
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
      v20 = *(__CFDictionary **)(v14 + 336);
      v21 = CFSTR("TextMarkupArray");
      goto LABEL_15;
    }
    if (CFEqual(a3, CFSTR("CountOfTaggedRangeMetadataArrayListeners")))
    {
      if (!a4)
      {
LABEL_26:
        if (v15)
          CFRelease(v15);
        return (uint64_t)a4;
      }
      v39 = CFGetTypeID(a4);
      if (v39 == CFNumberGetTypeID())
      {
        v40 = (uint64_t *)(v14 + 824);
        v66 = *(_QWORD *)(v14 + 824);
        CFNumberGetValue(a4, kCFNumberCFIndexType, (void *)(v14 + 824));
        v41 = pap_AirPlayState(v15);
        if (!v41 || v41 == 10)
          goto LABEL_19;
        if (v66)
        {
          v42 = *v40;
          if (v66 >= 1 && !v42)
            goto LABEL_93;
        }
        else
        {
          v42 = *v40;
          if (*v40 > 0)
          {
LABEL_93:
            MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
            v43 = (const void **)MEMORY[0x1E0C9AE50];
            if (v66 >= *(_QWORD *)(v14 + 824))
              v43 = (const void **)MEMORY[0x1E0C9AE40];
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v14 + 336), (const void *)*MEMORY[0x1E0CA3FF0], *v43);
            MEMORY[0x19402EF04](*(_QWORD *)(v14 + 344));
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v15);
            v42 = *(_QWORD *)(v14 + 824);
          }
        }
        if (v66 < v42)
        {
          valuePtr.value = 0;
          *(_QWORD *)&valuePtr.timescale = &valuePtr;
          valuePtr.epoch = 0x2020000000;
          v71 = 0;
          v44 = *((_QWORD *)v17 + 13);
          v69[0] = MEMORY[0x1E0C809B0];
          v69[1] = 3221225472;
          v69[2] = __itemairplay_handleSetProperty_block_invoke_2;
          v69[3] = &unk_1E2F87F08;
          v69[4] = &valuePtr;
          v69[5] = v14;
          dispatch_sync(v44, v69);
          v45 = *(void **)(*(_QWORD *)&valuePtr.timescale + 24);
          if (v45)
          {
            itemairplay_postTaggedRangeMetadataChangedNotificationIfNeeded(a1, v45);
            v46 = *(const void **)(*(_QWORD *)&valuePtr.timescale + 24);
            if (v46)
              CFRelease(v46);
          }
          _Block_object_dispose(&valuePtr, 8);
        }
        goto LABEL_19;
      }
LABEL_73:
      a4 = 0;
      goto LABEL_26;
    }
    if (CFEqual(a3, CFSTR("TimeToPauseBuffering")))
    {
      CMTimeMakeFromDictionary(&valuePtr, a4);
      *(CMTime *)(v14 + 496) = valuePtr;
      v47 = pap_AirPlayState(v15);
      if (!v47 || v47 == 10)
        goto LABEL_19;
      if (v17[249] != 1)
      {
        itemairplay_NotifyReachedTimeToPauseBufferingIfFF(v15, a1);
        goto LABEL_17;
      }
      v48 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      valuePtr = *(CMTime *)(v14 + 496);
      v49 = CMTimeCopyAsDictionary(&valuePtr, v48);
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
      v50 = *(__CFDictionary **)(v14 + 336);
      v51 = (const void *)*MEMORY[0x1E0CA4038];
      v52 = v49;
      goto LABEL_116;
    }
    if (CFEqual(a3, CFSTR("TimeToPausePlayback")))
    {
      memset(&valuePtr, 0, sizeof(valuePtr));
      CMTimeMakeFromDictionary(&valuePtr, a4);
      v53 = pap_AirPlayState(v15);
      if (!v53 || v53 == 10)
      {
        *(CMTime *)(v14 + 520) = valuePtr;
        goto LABEL_19;
      }
      v56 = *((_QWORD *)v17 + 13);
      v67[0] = MEMORY[0x1E0C809B0];
      v67[1] = 3221225472;
      v67[2] = __itemairplay_handleSetProperty_block_invoke_3;
      v67[3] = &__block_descriptor_88_e5_v8__0l;
      v68 = valuePtr;
      v67[4] = v14;
      v67[5] = v17;
      v67[6] = a1;
      v67[7] = v15;
      dispatch_sync(v56, v67);
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
      FigCFDictionarySetCMTime();
      goto LABEL_16;
    }
    if (CFEqual(a3, CFSTR("SnapTimeToPausePlayback")))
    {
      *(_BYTE *)(v14 + 158) = FigCFEqual();
      v54 = pap_AirPlayState(v15);
      if (!v54 || v54 == 10)
        goto LABEL_19;
      v55 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      valuePtr = *(CMTime *)(v14 + 520);
      v49 = CMTimeCopyAsDictionary(&valuePtr, v55);
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
      v50 = *(__CFDictionary **)(v14 + 336);
      v51 = (const void *)*MEMORY[0x1E0CA4028];
      v52 = a4;
LABEL_116:
      CFDictionarySetValue(v50, v51, v52);
      MEMORY[0x19402EF04](*(_QWORD *)(v14 + 344));
      if (v49)
        CFRelease(v49);
      goto LABEL_17;
    }
    if (CFEqual(a3, CFSTR("interstitialLiveHorizon")))
    {
      CMTimeMakeFromDictionary(&valuePtr, a4);
      *(CMTime *)(v14 + 544) = valuePtr;
      *(_QWORD *)(v14 + 568) = FigGetUpTimeNanoseconds();
      v57 = pap_AirPlayState(v15);
      a4 = 0;
      if (!v57 || v57 == 10)
        goto LABEL_34;
      v58 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      valuePtr = *(CMTime *)(v14 + 544);
      v59 = CMTimeCopyAsDictionary(&valuePtr, v58);
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v14 + 336), (const void *)*MEMORY[0x1E0CA3FE8], v59);
      MEMORY[0x19402EF04](*(_QWORD *)(v14 + 344));
      if (v59)
        CFRelease(v59);
      goto LABEL_59;
    }
    if (!CFEqual(a3, CFSTR("currentInterstitialEvent"))
      && !CFEqual(a3, CFSTR("interstitialEvents"))
      && !CFEqual(a3, CFSTR("timeToSwapPlayback")))
    {
      if (!CFEqual(a3, CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization")))
        goto LABEL_19;
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 592));
      v65 = *(const void **)(v14 + 584);
      *(_QWORD *)(v14 + 584) = a4;
      if (a4)
        CFRetain(a4);
      if (v65)
        CFRelease(v65);
      v36 = *(_QWORD *)(v14 + 592);
      goto LABEL_68;
    }
    if (CFEqual(a3, CFSTR("currentInterstitialEvent")))
    {
      v60 = *(const void **)(v14 + 784);
      *(_QWORD *)(v14 + 784) = a4;
      if (a4)
        CFRetain(a4);
      if (v60)
        CFRelease(v60);
      v61 = *(const void **)(v14 + 784);
      if (!v61 || CFEqual(v61, &stru_1E2FD85F8))
      {
LABEL_143:
        if (a4)
        {
          v64 = pap_AirPlayState(v15);
          if (v64)
          {
            if (v64 != 10)
            {
              MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 344));
              v20 = *(__CFDictionary **)(v14 + 336);
              v21 = a3;
              goto LABEL_15;
            }
          }
        }
        goto LABEL_19;
      }
      v62 = *(const void **)(v14 + 800);
      v63 = *(const __CFDictionary **)(v14 + 784);
      *(_QWORD *)(v14 + 800) = v63;
      if (!v63)
      {
LABEL_141:
        if (v62)
          CFRelease(v62);
        goto LABEL_143;
      }
    }
    else
    {
      if (!CFEqual(a3, CFSTR("interstitialEvents")))
        goto LABEL_143;
      v62 = *(const void **)(v14 + 808);
      *(_QWORD *)(v14 + 808) = a4;
      if (!a4)
        goto LABEL_141;
      v63 = a4;
    }
    CFRetain(v63);
    goto LABEL_141;
  }
  return FigSignalErrorAt();
}

void sub_192C8B830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t itemairplay_SeekToDateWithID(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  CFDictionaryRef v15;
  const void *v17;
  int valuePtr;
  void *values;
  CFTypeRef cf;
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 72))
    {
      v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      v8 = (_BYTE *)CMBaseObjectGetDerivedStorage();
      if (v8 && !*v8)
      {
        v9 = pap_AirPlayState(v7);
        if (v9 && v9 != 10)
        {
          if (pap_AirPlayState(v7) - 14 > 2)
          {
            v17 = *(const void **)(v6 + 192);
            *(_QWORD *)(v6 + 192) = a2;
            CFRetain(a2);
            if (v17)
              CFRelease(v17);
            v13 = 0;
            *(_BYTE *)(v6 + 224) = 0;
            if (!v7)
              return v13;
          }
          else
          {
            keys[0] = CFSTR("Date");
            keys[1] = CFSTR("SeekID");
            values = a2;
            v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
            v15 = CFDictionaryCreate(v14, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (cf)
              CFRelease(cf);
            if (v15)
            {
              MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 344));
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 336), (const void *)*MEMORY[0x1E0CA3FC0], v15);
              MEMORY[0x19402EF04](*(_QWORD *)(v6 + 344));
              playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v7);
              CFRelease(v15);
            }
            v13 = 0;
            if (!v7)
              return v13;
          }
        }
        else
        {
          v10 = *(_QWORD *)(v6 + 8);
          v11 = *(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
          if (v11)
          {
            v12 = v11(v10, a2, a3);
            goto LABEL_9;
          }
          v13 = 4294954514;
          if (!v7)
            return v13;
        }
LABEL_19:
        CFRelease(v7);
        return v13;
      }
      v12 = FigSignalErrorAt();
LABEL_9:
      v13 = v12;
      if (!v7)
        return v13;
      goto LABEL_19;
    }
  }
  return FigSignalErrorAt();
}

void __itemairplay_handleSetProperty_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const __CFArray *MutableCopy;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  const __CFArray *v6;
  int v7;
  const void *v8;
  const void *v9;
  const void *v10;
  CFTypeRef cf;

  cf = 0;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 72) && !**(_BYTE **)(a1 + 40))
  {
    FigReadWriteLockLockForRead();
    v2 = *MEMORY[0x1E0C9AE00];
    MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
    CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
    v5 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v5 && !v5(CMBaseObject, CFSTR("MediaSelectionArray"), v2, &cf))
    {
      v6 = (const __CFArray *)cf;
    }
    else
    {
      v6 = 0;
      cf = 0;
    }
    FigMediaSelectionGroupsAddCrossDeviceInfoToSelectedMediaArray(MutableCopy, v6);
    FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(*(const __CFArray **)(*(_QWORD *)(a1 + 32) + 352), MutableCopy, 1);
    v7 = pap_AirPlayState(*(const void **)(a1 + 56));
    if (v7 && v7 != 10)
      playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 56));
    FigReadWriteLockUnlockForRead();
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  if (cf)
    CFRelease(cf);
  v8 = *(const void **)(a1 + 56);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 64);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 48);
  if (v10)
    CFRelease(v10);
}

CFTypeRef __itemairplay_handleSetProperty_block_invoke_2(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 832);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __itemairplay_handleSetProperty_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  const void *v9;
  uint64_t v10;
  dispatch_source_t v11;
  NSObject *v12;
  void *v13;
  OpaqueCMTimebase *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v16;
  unsigned int v17;
  Float64 Seconds;
  Float64 v19;
  CMTime v20;
  CMTime time2;
  CMTime time;
  CMTime time1;
  CMTime v24;
  os_log_type_t type;
  unsigned int v26;
  CMTime rhs;
  Float64 v28;
  __int16 v29;
  Float64 v30;
  CMTime lhs;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  lhs = *(CMTime *)(a1 + 64);
  rhs = *(CMTime *)(v2 + 520);
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeAbsoluteValue(&time1, &time);
  CMTimeMake(&time2, 10, 1000);
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 32) + 520;
    if ((*(_BYTE *)(a1 + 76) & 1) == 0)
    {
      v4 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)v3 = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(v4 + 16);
      itemairplay_resetTimeToPausePlayback(*(const void **)(a1 + 56));
      return;
    }
    v5 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 536) = *(_QWORD *)(a1 + 80);
    *(_OWORD *)v3 = v5;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 249))
    {
      v6 = *(_QWORD *)(a1 + 48);
      v7 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)&v20.value = *(_OWORD *)(v7 + 520);
      v20.epoch = *(_QWORD *)(v7 + 536);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      v10 = CMBaseObjectGetDerivedStorage();
      v11 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, *(dispatch_queue_t *)(v10 + 104));
      if (v11)
      {
        v12 = v11;
        v13 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
        dispatch_set_context(v12, v13);
        dispatch_source_set_timer(v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
        dispatch_source_set_event_handler_f(v12, (dispatch_function_t)pap_EmulateTimeToPausePlaybackTimerProc);
        dispatch_source_set_cancel_handler_f(v12, 0);
        dispatch_set_finalizer_f(v12, (dispatch_function_t)FigCFRelease_3);
        dispatch_resume(v12);
        if (!CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 576), v12))
        {
          v14 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
          lhs = v20;
          if (!CMTimebaseSetTimerDispatchSourceNextFireTime(v14, v12, &lhs, 1u))
          {
            if (dword_1EE2A2FA0)
            {
              v26 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v16 = v26;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                v17 = v16;
              else
                v17 = v16 & 0xFFFFFFFE;
              if (v17)
              {
                lhs = v20;
                Seconds = CMTimeGetSeconds(&lhs);
                CMTimebaseGetTime(&v24, *(CMTimebaseRef *)(DerivedStorage + 576));
                v19 = CMTimeGetSeconds(&v24);
                LODWORD(rhs.value) = 136315906;
                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"pap_CreateAndPrimeAirPlayTimer";
                LOWORD(rhs.flags) = 2048;
                *(_QWORD *)((char *)&rhs.flags + 2) = v6;
                HIWORD(rhs.epoch) = 2048;
                v28 = Seconds;
                v29 = 2048;
                v30 = v19;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_QWORD *)(v7 + 328) = v12;
            if (!v9)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
        CFRelease(v12);
        if (!v9)
        {
LABEL_19:
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 249)
            && pap_HasAirPlayReachedTimeToPausePlayback(*(const void **)(a1 + 56)))
          {
            pap_HandleAirPlayReachedTimeToPausePlayback(*(const void **)(a1 + 56), *(const void **)(a1 + 48));
          }
          return;
        }
      }
      else
      {
        FigSignalErrorAt();
        if (!v9)
          goto LABEL_19;
      }
LABEL_18:
      CFRelease(v9);
      goto LABEL_19;
    }
  }
}

void pap_EmulateTimeToPausePlaybackTimerProc()
{
  uint64_t v0;
  const void *v1;
  const void *v2;
  const void *v3;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    CMBaseObjectGetDerivedStorage();
    v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      v3 = v2;
      if (pap_HasAirPlayReachedTimeToPausePlayback(v2))
        pap_HandleAirPlayReachedTimeToPausePlayback(v3, v1);
      CFRelease(v1);
    }
    else
    {
      v3 = v1;
    }
    CFRelease(v3);
  }
}

uint64_t itemairplay_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v6 = DerivedStorage;
    v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v8 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!v8 || *v8)
    {
      v11 = FigSignalErrorAt();
    }
    else
    {
      v9 = *(_QWORD *)(v6 + 8);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v10)
      {
        v12 = 4294954514;
        if (!v7)
          return v12;
        goto LABEL_7;
      }
      v11 = v10(v9, a2, a3);
    }
    v12 = v11;
    if (!v7)
      return v12;
LABEL_7:
    CFRelease(v7);
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t itemairplay_GetDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  _BYTE *v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, CMTime *);
  uint64_t v11;
  CMTime *v12;
  CMTime *v13;
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, char *);
  uint64_t CMBaseObject;
  uint64_t (*v18)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  CFDictionaryRef v19;
  CMTime v21;
  CFDictionaryRef dictionaryRepresentation;
  char v23;
  CMTime v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v24 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    v11 = FigSignalErrorAt();
    v5 = 0;
    goto LABEL_31;
  }
  v4 = DerivedStorage;
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v6 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v6 || *v6)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_31;
  }
  v7 = pap_AirPlayState(v5);
  if (v7)
    v8 = v7 == 10;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_QWORD *)(v4 + 8);
    v10 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v10)
    {
      v11 = v10(v9, &v24);
      if (!(_DWORD)v11)
      {
        v12 = (CMTime *)(v4 + 228);
        v13 = &v24;
LABEL_17:
        v11 = 0;
        *(_OWORD *)&v12->value = *(_OWORD *)&v13->value;
        v12->epoch = v13->epoch;
        goto LABEL_18;
      }
    }
    else
    {
      v11 = 4294954514;
    }
    if ((*(_BYTE *)(v4 + 240) & 1) == 0)
      goto LABEL_18;
LABEL_16:
    v13 = (CMTime *)(v4 + 228);
    v12 = &v24;
    goto LABEL_17;
  }
  if ((*(_BYTE *)(v4 + 240) & 1) != 0)
    goto LABEL_16;
  v11 = 0;
LABEL_18:
  if ((v24.flags & 1) == 0)
  {
    v14 = pap_AirPlayState(v5);
    if (v14)
    {
      if (v14 != 10)
      {
        v15 = *(_QWORD *)(v4 + 16);
        if (v15)
        {
          v23 = 0;
          v16 = *(void (**)(uint64_t, const __CFString *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 24);
          if (v16)
          {
            v16(v15, CFSTR("Duration"), &v23);
            if (v23)
            {
              dictionaryRepresentation = 0;
              CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v4 + 16));
              v18 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v18)
              {
                v11 = v18(CMBaseObject, CFSTR("Duration"), *MEMORY[0x1E0C9AE00], &dictionaryRepresentation);
                v19 = dictionaryRepresentation;
                if (!(_DWORD)v11 && dictionaryRepresentation)
                {
                  CMTimeMakeFromDictionary(&v21, dictionaryRepresentation);
                  v24 = v21;
                  v19 = dictionaryRepresentation;
                }
                if (v19)
                  CFRelease(v19);
              }
              else
              {
                v11 = 4294954514;
              }
            }
          }
        }
      }
    }
  }
LABEL_31:
  if (!(_DWORD)v11)
    *a2 = v24;
  if (v5)
    CFRelease(v5);
  return v11;
}

uint64_t itemairplay_SetCurrentTime(const void *a1, CMTime *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, CMTime *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  CMTime v16;
  CMTime v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v7 = DerivedStorage;
    v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v9 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!v9 || *v9)
    {
      v13 = FigSignalErrorAt();
    }
    else
    {
      v16 = *a2;
      itemairplay_filterSetCurrentTime(&v16, (uint64_t)&v17);
      *a2 = v17;
      v10 = pap_AirPlayState(v8);
      if (v10 && v10 != 10)
      {
        v17 = *a2;
        v13 = itemairplay_airplaySetCurrentTime(a1, &v17, a3, 0, 0, 0);
      }
      else
      {
        v11 = *(_QWORD *)(v7 + 8);
        v16 = *a2;
        v12 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v12)
        {
          v14 = 4294954514;
          if (!v8)
            return v14;
          goto LABEL_10;
        }
        v17 = v16;
        v13 = v12(v11, &v17, a3);
      }
    }
    v14 = v13;
    if (!v8)
      return v14;
LABEL_10:
    CFRelease(v8);
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t itemairplay_CopyTrackProperty(CFTypeRef a1, uint64_t a2, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const void *v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, const void *, uint64_t, CFTypeRef *);
  uint64_t v19;
  CFMutableDictionaryRef ProxiedPropertyParams;
  CFTypeID v21;
  CFTypeRef *v22;
  CFTypeID v23;
  CFTypeID TypeID;
  CFTypeRef v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int valuePtr;
  CFTypeRef v28;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (*(_BYTE *)(DerivedStorage + 72) || !a5)
  {
    v11 = FigSignalErrorAt();
    v12 = 0;
    goto LABEL_3;
  }
  v14 = DerivedStorage;
  v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v15 = CMBaseObjectGetDerivedStorage();
  if (!v15 || *(_BYTE *)v15)
  {
    v19 = FigSignalErrorAt();
    goto LABEL_15;
  }
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(v15 + 32), 0, (unint64_t)cf);
  v16 = pap_AirPlayState(v12);
  if (!v16 || v16 == 10 || !CFEqual(a3, CFSTR("Enabled")) || cf[0] != a1 || pap_AirPlayState(v12) != 16)
  {
    v17 = *(_QWORD *)(v14 + 8);
    v18 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 40);
    if (!v18)
    {
      v11 = 4294954514;
      goto LABEL_3;
    }
    v19 = v18(v17, a2, a3, a4, a5);
LABEL_15:
    v11 = v19;
    goto LABEL_3;
  }
  v28 = 0;
  valuePtr = 0;
  ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
  FigCFDictionarySetInt32();
  playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(v12, (const void *)*MEMORY[0x1E0CA3FD0], ProxiedPropertyParams, 100000000, &v28);
  if (!v28)
    goto LABEL_29;
  v21 = CFGetTypeID(v28);
  if (v21 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)v28, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr)
    {
      v22 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_30:
      v25 = *v22;
      goto LABEL_31;
    }
LABEL_29:
    v22 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_30;
  }
  if (!v28)
    goto LABEL_29;
  v23 = CFGetTypeID(v28);
  TypeID = CFBooleanGetTypeID();
  v25 = v28;
  if (v23 != TypeID)
  {
    if (v28)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_29;
  }
LABEL_31:
  *a5 = CFRetain(v25);
  if (v28)
    CFRelease(v28);
  if (ProxiedPropertyParams)
    CFRelease(ProxiedPropertyParams);
  v11 = 0;
LABEL_3:
  if (cf[0])
    CFRelease(cf[0]);
  if (v12)
    CFRelease(v12);
  return v11;
}

uint64_t itemairplay_MakeReadyForInspection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t itemairplay_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v8 = DerivedStorage;
    v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v10 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!v10 || *v10)
    {
      v13 = FigSignalErrorAt();
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 8);
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 64);
      if (!v12)
      {
        v14 = 4294954514;
        if (!v9)
          return v14;
        goto LABEL_7;
      }
      v13 = v12(v11, a2, a3, a4);
    }
    v14 = v13;
    if (!v9)
      return v14;
LABEL_7:
    CFRelease(v9);
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t itemairplay_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v8 = DerivedStorage;
    v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v10 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!v10 || *v10)
    {
      v13 = FigSignalErrorAt();
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 8);
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 72);
      if (!v12)
      {
        v14 = 4294954514;
        if (!v9)
          return v14;
        goto LABEL_7;
      }
      v13 = v12(v11, a2, a3, a4);
    }
    v14 = v13;
    if (!v9)
      return v14;
LABEL_7:
    CFRelease(v9);
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t itemairplay_GetNextThumbnailTime(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, __int128 *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v8 = DerivedStorage;
    v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v10 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!v10 || *v10)
    {
      v13 = FigSignalErrorAt();
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 8);
      v16 = *a2;
      v17 = *((_QWORD *)a2 + 2);
      v12 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 80);
      if (!v12)
      {
        v14 = 4294954514;
        if (!v9)
          return v14;
        goto LABEL_7;
      }
      v18 = v16;
      v19 = v17;
      v13 = v12(v11, &v18, a3, a4);
    }
    v14 = v13;
    if (!v9)
      return v14;
LABEL_7:
    CFRelease(v9);
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t itemairplay_SetCurrentTimeWithRange(const void *a1, CMTime *a2, uint64_t a3, CMTime *a4, CMTime *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const void *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, CMTime *, uint64_t, CMTime *, __int128 *);
  uint64_t v17;
  uint64_t v18;
  CFMutableDictionaryRef Mutable;
  __int128 v21;
  CMTimeEpoch epoch;
  CMTime v23;
  CMTime v24;
  __int128 v25;
  CMTimeEpoch v26;
  CMTime v27;
  CMTime v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v11 = DerivedStorage;
    v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v13 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (v13 && !*v13)
    {
      v27 = *a2;
      itemairplay_filterSetCurrentTime(&v27, (uint64_t)&v28);
      *a2 = v28;
      v14 = pap_AirPlayState(v12);
      if (v14 && v14 != 10)
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v28 = *a4;
        FigCFDictionarySetCMTime();
        v28 = *a5;
        FigCFDictionarySetCMTime();
        v28 = *a2;
        v18 = itemairplay_airplaySetCurrentTime(a1, &v28, a3, 0, 0, (uint64_t)Mutable);
        if (Mutable)
          CFRelease(Mutable);
        if (!v12)
          return v18;
      }
      else
      {
        v15 = *(_QWORD *)(v11 + 8);
        *(_OWORD *)&v24.value = *(_OWORD *)&a2->value;
        v24.epoch = a2->epoch;
        *(_OWORD *)&v23.value = *(_OWORD *)&a4->value;
        v23.epoch = a4->epoch;
        v21 = *(_OWORD *)&a5->value;
        epoch = a5->epoch;
        v16 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 104);
        if (v16)
        {
          v28 = v24;
          v27 = v23;
          v25 = v21;
          v26 = epoch;
          v17 = v16(v15, &v28, a3, &v27, &v25);
          goto LABEL_8;
        }
        v18 = 4294954514;
        if (!v12)
          return v18;
      }
LABEL_13:
      CFRelease(v12);
      return v18;
    }
    v17 = FigSignalErrorAt();
LABEL_8:
    v18 = v17;
    if (!v12)
      return v18;
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t itemairplay_SetTrackProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  _BYTE *v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, const void *, const void *);
  uint64_t v16;
  uint64_t v17;
  int v18;
  CFTypeID v19;
  const void *v20;
  __CFDictionary *Value;
  __CFDictionary *v22;
  const __CFAllocator *v23;
  CFMutableDictionaryRef Mutable;
  CFStringRef v25;
  CFStringRef v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v11 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v11 || *v11)
  {
    v16 = FigSignalErrorAt();
  }
  else
  {
    v12 = pap_AirPlayState(v10);
    if (v12)
      v13 = v12 == 10;
    else
      v13 = 1;
    if (!v13)
    {
      v18 = CFEqual(a3, CFSTR("Enabled"));
      if (a4)
      {
        if (v18)
        {
          v19 = CFGetTypeID(a4);
          if (v19 == CFBooleanGetTypeID() && pap_AirPlayState(v10) - 14 <= 2)
          {
            MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 344));
            v20 = (const void *)*MEMORY[0x1E0CA3FD0];
            Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 336), (const void *)*MEMORY[0x1E0CA3FD0]);
            if (Value)
            {
              v22 = Value;
              CFRetain(Value);
              v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            }
            else
            {
              v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!Mutable)
                goto LABEL_29;
              v22 = Mutable;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 336), v20, Mutable);
            }
            v25 = CFStringCreateWithFormat(v23, 0, CFSTR("%d"), a2);
            if (v25)
            {
              v26 = v25;
              CFDictionarySetValue(v22, v25, a4);
              MEMORY[0x19402EF04](*(_QWORD *)(v9 + 344));
              playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v10);
              CFRelease(v26);
              CFRelease(v22);
              v17 = 0;
              goto LABEL_14;
            }
            CFRelease(v22);
LABEL_29:
            v17 = FigSignalErrorAt();
            MEMORY[0x19402EF04](*(_QWORD *)(v9 + 344));
            goto LABEL_14;
          }
        }
      }
    }
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 112);
    if (!v15)
    {
      v17 = 4294954514;
      goto LABEL_14;
    }
    v16 = v15(v14, a2, a3, a4);
  }
  v17 = v16;
LABEL_14:
  if (v10)
    CFRelease(v10);
  return v17;
}

uint64_t itemairplay_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v7 || *v7)
  {
    v10 = FigSignalErrorAt();
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 8);
    v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (!v9)
    {
      v11 = 4294954514;
      if (!v6)
        return v11;
      goto LABEL_8;
    }
    v10 = v9(v8, a2);
  }
  v11 = v10;
  if (v6)
LABEL_8:
    CFRelease(v6);
  return v11;
}

uint64_t itemairplay_SetCurrentTimeWithRangeAndID(const void *a1, CMTime *a2, uint64_t a3, CMTime *a4, CMTime *a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  const void *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CMTime *, uint64_t, CMTime *, __int128 *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  CFMutableDictionaryRef Mutable;
  __int128 v23;
  CMTimeEpoch epoch;
  CMTime v25;
  CMTime v26;
  __int128 v27;
  CMTimeEpoch v28;
  CMTime v29;
  CMTime v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v13 = DerivedStorage;
    v14 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v15 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (v15 && !*v15)
    {
      v29 = *a2;
      itemairplay_filterSetCurrentTime(&v29, (uint64_t)&v30);
      *a2 = v30;
      v16 = pap_AirPlayState(v14);
      if (v16 && v16 != 10)
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v30 = *a4;
        FigCFDictionarySetCMTime();
        v30 = *a5;
        FigCFDictionarySetCMTime();
        v30 = *a2;
        v20 = itemairplay_airplaySetCurrentTime(a1, &v30, a3, 1, a6, (uint64_t)Mutable);
        if (Mutable)
          CFRelease(Mutable);
        if (!v14)
          return v20;
      }
      else
      {
        v17 = *(_QWORD *)(v13 + 8);
        *(_OWORD *)&v26.value = *(_OWORD *)&a2->value;
        v26.epoch = a2->epoch;
        *(_OWORD *)&v25.value = *(_OWORD *)&a4->value;
        v25.epoch = a4->epoch;
        v23 = *(_OWORD *)&a5->value;
        epoch = a5->epoch;
        v18 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 144);
        if (v18)
        {
          v30 = v26;
          v29 = v25;
          v27 = v23;
          v28 = epoch;
          v19 = v18(v17, &v30, a3, &v29, &v27, a6);
          goto LABEL_8;
        }
        v20 = 4294954514;
        if (!v14)
          return v20;
      }
LABEL_13:
      CFRelease(v14);
      return v20;
    }
    v19 = FigSignalErrorAt();
LABEL_8:
    v20 = v19;
    if (!v14)
      return v20;
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t itemairplay_CopyAsset(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  _BYTE *v7;
  CFTypeRef v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v7 || *v7)
  {
    v9 = FigSignalErrorAt();
    if (!v6)
      return v9;
  }
  else
  {
    v8 = *(CFTypeRef *)(v5 + 16);
    if (v8)
      v8 = CFRetain(v8);
    v9 = 0;
    *a2 = v8;
    if (!v6)
      return v9;
  }
  CFRelease(v6);
  return v9;
}

uint64_t itemairplay_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  CFTypeRef v18;
  CFTypeRef v19;
  BOOL v20;
  CFTypeRef cf;

  cf = 0;
  v20 = 0;
  v18 = 0;
  v19 = 0;
  if (!a1)
  {
    v15 = FigSignalErrorAt();
    v8 = 0;
    if (!(_DWORD)v15)
    {
LABEL_11:
      v16 = v18;
LABEL_12:
      v10 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v19, v16, a3);
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    FigSignalErrorAt();
    v16 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v7 = DerivedStorage;
  v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v9 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v9 || *v9)
  {
    FigSignalErrorAt();
LABEL_25:
    v16 = 0;
    goto LABEL_12;
  }
  v10 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemairplay_handleSetProperty, &v20, &cf, &v19);
  if ((_DWORD)v10)
  {
LABEL_13:
    v15 = v10;
    goto LABEL_15;
  }
  if (v20)
    goto LABEL_25;
  v11 = *(_QWORD *)(v7 + 8);
  if (!v11)
  {
    v14 = FigSignalErrorAt();
LABEL_10:
    v15 = v14;
    if ((_DWORD)v14)
      goto LABEL_15;
    goto LABEL_11;
  }
  v12 = cf;
  v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
  if (v13)
  {
    v14 = v13(v11, v12, &v18);
    goto LABEL_10;
  }
  v15 = 4294954514;
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
  if (v8)
    CFRelease(v8);
  return v15;
}

uint64_t itemairplay_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  _BYTE *v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v11 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (v11 && !*v11 && ((v12 = pap_AirPlayState(v10)) != 0 ? (v13 = v12 == 10) : (v13 = 1), v13))
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                       + 168);
    if (!v15)
    {
      v17 = 4294954514;
      if (!v10)
        return v17;
      goto LABEL_14;
    }
    v16 = v15(v14, a2, a3, a4);
  }
  else
  {
    v16 = FigSignalErrorAt();
  }
  v17 = v16;
  if (v10)
LABEL_14:
    CFRelease(v10);
  return v17;
}

uint64_t itemairplay_SetCurrentTimeWithOptions(const void *a1, CMTime *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, CMTime *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  CMTime time2;
  CMTime time1;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v7 = DerivedStorage;
    v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v9 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!v9 || *v9)
    {
      v13 = FigSignalErrorAt();
    }
    else
    {
      time2 = *a2;
      itemairplay_filterSetCurrentTime(&time2, (uint64_t)&time1);
      *a2 = time1;
      v10 = pap_AirPlayState(v8);
      if (v10 && v10 != 10)
      {
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetBooleanIfPresent();
        time1 = *a2;
        v13 = itemairplay_airplaySetCurrentTime(a1, &time1, 0, 0, 0, a3);
      }
      else
      {
        v11 = *(_QWORD *)(v7 + 8);
        time2 = *a2;
        v12 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
        if (!v12)
        {
          v14 = 4294954514;
          if (!v8)
            return v14;
LABEL_12:
          CFRelease(v8);
          return v14;
        }
        time1 = time2;
        v13 = v12(v11, &time1, a3);
      }
    }
    v14 = v13;
    if (!v8)
      return v14;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

__n128 itemairplay_filterSetCurrentTime@<Q0>(CMTime *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage;
  __n128 result;
  CMTime v6;
  CMTime time1;
  CMTime v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(DerivedStorage + 556) & 1) != 0)
  {
    memset(&v8, 0, sizeof(v8));
    itemairplay_getCurrentInterstitialLiveHorizon(DerivedStorage, &v8);
    time1 = *a1;
    v6 = v8;
    if (CMTimeCompare(&time1, &v6) >= 1)
      *a1 = v8;
  }
  result = *(__n128 *)&a1->value;
  *(_OWORD *)a2 = *(_OWORD *)&a1->value;
  *(_QWORD *)(a2 + 16) = a1->epoch;
  return result;
}

void __itemairplay_reflectSubItemNotification_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    playerairplay_switchFromBufferedAirPlayToLocal(*(const void **)(a1 + 32));
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + 254) = 0;
  }
}

void playerairplay_setBAOConnectionActiveIfNeeded(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD v4[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296)
    && *(_BYTE *)(DerivedStorage + 1)
    && !*(_BYTE *)(DerivedStorage + 304))
  {
    if (a1)
      CFRetain(a1);
    v3 = *(NSObject **)(DerivedStorage + 104);
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __playerairplay_setBAOConnectionActiveIfNeeded_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = a1;
    v4[5] = DerivedStorage;
    dispatch_async(v3, v4);
  }
}

void __playerairplay_setBAOConnectionActiveIfNeeded_block_invoke(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, CFTypeRef);
  const void *v6;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(v2 + 1))
    {
      if (!*(_BYTE *)(v2 + 304))
      {
        v3 = playerairplay_copyPredictedFormatDescriptionForBAO(*(_QWORD *)(a1 + 32));
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 296);
        v5 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 40);
        if (v5)
          v5(v4, 1, 1, v3);
        *(_BYTE *)(*(_QWORD *)(a1 + 40) + 304) = 1;
        if (v3)
          CFRelease(v3);
      }
    }
  }
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
}

CFTypeRef playerairplay_copyPredictedFormatDescriptionForBAO(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;
  unsigned int (*v4)(CFTypeRef, CFTypeRef *);
  uint64_t v5;
  CFTypeRef v6;
  unsigned int (*v7)(CFTypeRef, uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, CFTypeRef, char *);
  uint64_t v10;
  CFTypeRef v11;
  unsigned int (*v12)(uint64_t, CFTypeRef, CFTypeRef *);
  CFTypeRef v14;
  CFTypeRef v15;
  char v16;
  CFTypeRef v17;
  CFTypeRef v18;
  unsigned int v19;
  CFTypeRef cf;
  CFTypeRef v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  cf = 0;
  v19 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v15 = 0;
  mach_absolute_time();
  if (*(_QWORD *)(DerivedStorage + 296)
    && !playerairplay_copyPlayQueueAirPlayItemFromSubPlayer(a1, 0, &v21))
  {
    v3 = v21;
    if (!v21)
      goto LABEL_20;
    v4 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v4)
    {
      if (!v4(v3, &cf))
      {
        if (cf)
        {
          if (!FPSupport_GetFirstEnabledTrackIDForMediaType((uint64_t)cf, 1936684398, (uint64_t)&v19))
          {
            v5 = v19;
            if (v19)
            {
              v6 = v21;
              v7 = *(unsigned int (**)(CFTypeRef, uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
              if (v7)
              {
                if (!v7(v6, v5, CFSTR("FormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &v18)
                  && FigCFArrayGetValueAtIndex()
                  && !FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription())
                {
                  v8 = *(_QWORD *)(DerivedStorage + 296);
                  v9 = *(void (**)(uint64_t, CFTypeRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 80);
                  if (v9 && (v9(v8, v17, &v16), v16))
                  {
                    v14 = v17;
                    if (v17)
                      v14 = CFRetain(v17);
                    v15 = v14;
                  }
                  else
                  {
                    v10 = *(_QWORD *)(DerivedStorage + 296);
                    v11 = v17;
                    v12 = *(unsigned int (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 72);
                    if (!v12 || v12(v10, v11, &v15))
                      v15 = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v21)
    CFRelease(v21);
LABEL_20:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  return v15;
}

void __itemairplay_assetPropertyLoaded_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  uint64_t CMBaseObject;
  unsigned int (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);
  uint64_t v8;
  int ReadyForInspection;
  const void *v10;

  if (!**(_BYTE **)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(v2 + 72))
    {
      v3 = v2 + 24;
      if (!*(_QWORD *)(v2 + 24))
      {
        CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v2 + 16));
        v7 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v7)
        {
          if (!v7(CMBaseObject, CFSTR("assetProperty_AssetType"), *MEMORY[0x1E0C9AE00], v3))
          {
            v8 = *(_QWORD *)(a1 + 40);
            *(_BYTE *)(v8 + 736) = 2;
            if (*(_BYTE *)(v8 + 743))
            {
              ReadyForInspection = itemairplay_MakeReadyForInspection(*(_QWORD *)(a1 + 48), *(_QWORD *)(v8 + 752), 0);
              v8 = *(_QWORD *)(a1 + 40);
              if (!ReadyForInspection)
              {
                v10 = *(const void **)(v8 + 752);
                if (v10)
                {
                  CFRelease(v10);
                  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 752) = 0;
                  v8 = *(_QWORD *)(a1 + 40);
                }
                *(_BYTE *)(v8 + 743) = 0;
              }
            }
            if (*(_BYTE *)(v8 + 744))
            {
              *(_BYTE *)(v8 + 744) = 0;
              playerairplay_startAirPlayWithItem(*(void **)(a1 + 56), *(const void **)(a1 + 48));
            }
          }
        }
      }
    }
  }
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 56);
  if (v5)
    CFRelease(v5);
}

void __itemairplay_assetPropertyFailedToLoad_block_invoke(uint64_t a1)
{
  _BYTE *v2;
  const void *v3;
  const void *v4;

  if (!**(_BYTE **)(a1 + 32))
  {
    v2 = *(_BYTE **)(a1 + 40);
    if (!v2[72])
    {
      v2[736] = 5;
      if (v2[744])
      {
        v2[744] = 0;
        playerairplay_startAirPlayWithItem(*(void **)(a1 + 48), *(const void **)(a1 + 56));
      }
    }
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
}

uint64_t playerairplay_SetConnectionActive(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  BOOL IsAirplayVideoActive;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  int v13;
  NSObject *v14;
  _QWORD *v15;
  NSObject *v16;
  _QWORD block[6];
  char v18;
  _QWORD v19[6];
  _QWORD v20[5];
  BOOL v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = IsAirplayVideoActive;
  v8 = pap_AirPlayState(a1);
  if (v8 && v8 != 10)
  {
    *(_BYTE *)(DerivedStorage + 1) = a2;
    v13 = pap_AirPlayState(a1);
    if ((_DWORD)a2)
    {
      if (v13 == 11)
      {
        v14 = *(NSObject **)(DerivedStorage + 104);
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 3221225472;
        v20[2] = __playerairplay_SetConnectionActive_block_invoke;
        v20[3] = &__block_descriptor_41_e5_v8__0l;
        v20[4] = a1;
        v21 = v7;
        v15 = v20;
LABEL_18:
        dispatch_sync(v14, v15);
      }
    }
    else if ((v13 - 14) <= 2)
    {
      v14 = *(NSObject **)(DerivedStorage + 104);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __playerairplay_SetConnectionActive_block_invoke_2;
      v19[3] = &__block_descriptor_48_e5_v8__0l;
      v19[4] = DerivedStorage;
      v19[5] = a1;
      v15 = v19;
      goto LABEL_18;
    }
    return 0;
  }
  v9 = *(_QWORD *)(DerivedStorage + 8);
  if (!v9)
    return FigSignalErrorAt();
  v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v10 && (v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 24)) != 0)
  {
    v12 = v11(v9, a2);
    if (!(_DWORD)v12)
      *(_BYTE *)(DerivedStorage + 1) = a2;
  }
  else
  {
    v12 = 4294954514;
  }
  v16 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __playerairplay_SetConnectionActive_block_invoke_3;
  block[3] = &__block_descriptor_49_e5_v8__0l;
  v18 = a2;
  block[4] = a1;
  block[5] = DerivedStorage;
  dispatch_sync(v16, block);
  return v12;
}

uint64_t playerairplay_DuckVolume(const void *a1, uint64_t a2, float a3, float a4)
{
  uint64_t DerivedStorage;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, float, float);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = pap_AirPlayState(a1);
  if (v9 != 10 && v9)
    return 0;
  v10 = *(_QWORD *)(DerivedStorage + 8);
  if (!v10)
    return 0;
  v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (v11 && (v12 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v11 + 8)) != 0)
    return v12(v10, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t playerairplay_SilentMute(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = pap_AirPlayState(a1);
  if (v5 != 10 && v5)
    return 0;
  v6 = *(_QWORD *)(DerivedStorage + 8);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (v7 && (v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16)) != 0)
    return v8(v6, a2);
  else
    return 4294954514;
}

void __playerairplay_hijackedByOtherPlayer_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!**(_BYTE **)(a1 + 32) && pap_AirPlayState(*(const void **)(a1 + 40)) - 14 <= 2)
  {
    cf[0] = 0;
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 27, (CFMutableDictionaryRef *)cf);
    playerairplay_updatePlayerRateToMatch(*(const void **)(a1 + 40), (uint64_t)cf[0], 0.0);
    playerairplay_switchFromAirPlayVideoToLocal(*(void **)(a1 + 40), 0);
    if (cf[0])
      CFRelease(cf[0]);
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void __playerairplay_initializeCallbacks_block_invoke(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v6;
  const void *v7;
  _BYTE *DerivedStorage;
  _BYTE *v9;
  NSObject *v10;
  _QWORD v11[8];

  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    v7 = (const void *)v6;
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v9 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v7);
        if (a3)
          CFRetain(a3);
        if (a4)
          CFRetain(a4);
        v10 = *((_QWORD *)v9 + 13);
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 3221225472;
        v11[2] = __playerairplay_initializeCallbacks_block_invoke_2;
        v11[3] = &__block_descriptor_64_e5_v8__0l;
        v11[4] = v7;
        v11[5] = a4;
        v11[6] = a3;
        v11[7] = v9;
        dispatch_async(v10, v11);
      }
    }
    CFRelease(v7);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  int isLocalPlaybackCapableRouteSelected;
  _BOOL4 v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, float *);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, float);
  NSObject *v23;
  float v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  _BOOL4 v31;
  float v32;
  _BYTE v33[12];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  const char *v37;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    v5 = 0;
  }
  else
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
    CMBaseObjectGetDerivedStorage();
    LOBYTE(cf[0]) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    isLocalPlaybackCapableRouteSelected = playerairplay_isLocalPlaybackCapableRouteSelected();
    if (*(_QWORD *)(DerivedStorage + 256) == v2)
    {
      if (*(_BYTE *)(DerivedStorage + 40))
        CMBaseObjectGetDerivedStorage();
      v5 = isLocalPlaybackCapableRouteSelected != 1;
    }
    else
    {
      v5 = 1;
    }
  }
  if (dword_1EE2A2FA0)
  {
    v31 = v5;
    v32 = 0.0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = v31;
  }
  if (!v5)
  {
    playerairplay_updateAirPlayRouteInformation(*(const void **)(a1 + 32), *(const __CFDictionary **)(a1 + 48));
    goto LABEL_58;
  }
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    if (dword_1EE2A2FA0)
    {
      v32 = 0.0;
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    playerairplay_switchFromBufferedAirPlayToLocal(*(const void **)(a1 + 32));
  }
  CMBaseObjectGetDerivedStorage();
  LOBYTE(cf[0]) = 0;
  FigCFDictionaryGetBooleanIfPresent();
  playerairplay_resetAirPlayRouteInformation(*(const void **)(a1 + 32));
  playerairplay_updateAirPlayRouteInformationAndEndpoint(*(const void **)(a1 + 32), *(const __CFDictionary **)(a1 + 48), *(CFMutableDictionaryRef *)(a1 + 40));
  if (dword_1EE2A2FA0)
  {
    v32 = 0.0;
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (playerairplay_isAPVAllowedByClient())
  {
    CMBaseObjectGetDerivedStorage();
    LOBYTE(cf[0]) = 0;
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 254))
  {
    if (dword_1EE2A2FA0)
    {
      v32 = 0.0;
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v11 = pap_AirPlayState(*(const void **)(a1 + 32));
    if (v11 && v11 != 10)
    {
      if (dword_1EE2A2FA0)
      {
        v32 = 0.0;
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playerairplay_switchFromAirPlayVideoToLocal(*(void **)(a1 + 32), 0);
    }
    playerairplay_bufferedAudioRouteSelected(*(void **)(a1 + 32));
    if (!dword_1EE2A2FA0)
      goto LABEL_57;
    v32 = 0.0;
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    if (!playerairplay_isLocalPlaybackCapableRouteSelected())
    {
      if (dword_1EE2A2FA0)
      {
        v32 = 0.0;
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v14 = pap_AirPlayState(*(const void **)(a1 + 32));
      if (v14 && v14 != 10)
        playerairplay_switchFromAirPlayVideoToLocal(*(void **)(a1 + 32), 0);
      if (dword_1EE2A2FA0)
      {
        v32 = 0.0;
        v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v16 = *(_QWORD *)(a1 + 32);
      v17 = CMBaseObjectGetDerivedStorage();
      cf[0] = 0;
      *(_QWORD *)v33 = 0;
      v32 = 0.0;
      v18 = *(_QWORD *)(v17 + 8);
      v19 = *(void (**)(uint64_t, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v19)
      {
        v19(v18, &v32);
        if (v32 != 0.0)
        {
          FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 3, (CFMutableDictionaryRef *)v33);
          v20 = *(_QWORD *)(v17 + 8);
          v21 = *(_QWORD *)v33;
          v22 = *(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
          if (v22)
            v22(v20, v21, 0.0);
          playerairplay_copyPlayQueueAirPlayItemFromSubPlayer(v16, 0, cf);
          if (cf[0])
          {
            itemairplay_postFailNotificationWithError(cf[0], -15690);
            if (cf[0])
              CFRelease(cf[0]);
          }
        }
      }
      if (*(_QWORD *)v33)
        CFRelease(*(CFTypeRef *)v33);
    }
    if (!dword_1EE2A2FA0)
      goto LABEL_57;
    v32 = 0.0;
    v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v24 = v32;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      v25 = LODWORD(v24);
    else
      v25 = LODWORD(v24) & 0xFFFFFFFE;
    if (v25)
    {
      v26 = *(_QWORD *)(a1 + 32);
      if (v26)
        v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
      else
        v27 = "";
      *(_DWORD *)v33 = 136315650;
      *(_QWORD *)&v33[4] = "playerairplay_initializeCallbacks_block_invoke";
      v34 = 2048;
      v35 = v26;
      v36 = 2082;
      v37 = v27;
      _os_log_send_and_compose_impl();
    }
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_57:
  playerairplay_checkAndUpdatePlayQueueItems(*(void **)(a1 + 32));
LABEL_58:
  v28 = *(const void **)(a1 + 40);
  if (v28)
    CFRelease(v28);
  v29 = *(const void **)(a1 + 48);
  if (v29)
    CFRelease(v29);
  v30 = *(const void **)(a1 + 32);
  if (v30)
    CFRelease(v30);
}

_BYTE *playerairplay_updateBasedOnAirPlayVideoRouteDeselected()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (!*result)
    {
      CMBaseObjectGetDerivedStorage();
      return (_BYTE *)FigCFDictionaryGetBooleanIfPresent();
    }
  }
  return result;
}

void __playerairplay_initializeCallbacks_block_invoke_178()
{
  uint64_t v0;
  const void *v1;
  _BYTE *DerivedStorage;
  _BYTE *v3;
  NSObject *v4;
  _QWORD v5[6];

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v3 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v1);
        v4 = *((_QWORD *)v3 + 13);
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = __playerairplay_initializeCallbacks_block_invoke_2_181;
        v5[3] = &__block_descriptor_48_e5_v8__0l;
        v5[4] = v3;
        v5[5] = v1;
        dispatch_async(v4, v5);
      }
    }
    CFRelease(v1);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_2_181(uint64_t a1)
{
  const void *v2;

  if (!**(_BYTE **)(a1 + 32))
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296))
      playerairplay_switchFromBufferedAirPlayToLocal(*(const void **)(a1 + 40));
    CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
    playerairplay_resetAirPlayRouteInformation(*(const void **)(a1 + 40));
  }
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __playerairplay_initializeCallbacks_block_invoke_5()
{
  uint64_t v0;
  const void *v1;
  _BYTE *DerivedStorage;
  _BYTE *v3;
  _BYTE *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v9[6];
  _QWORD block[6];

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      if (!*DerivedStorage)
      {
        v3 = (_BYTE *)CMBaseObjectGetDerivedStorage();
        if (v3)
        {
          v4 = v3;
          if (!*v3)
          {
            v5 = pap_AirPlayState(v1);
            if (v5)
            {
              if (v5 != 10)
              {
                v6 = *((_QWORD *)v4 + 13);
                v7 = MEMORY[0x1E0C809B0];
                block[0] = MEMORY[0x1E0C809B0];
                block[1] = 3221225472;
                block[2] = __playerairplay_playbackWillBeInterruptedNotificationCallback_block_invoke;
                block[3] = &__block_descriptor_48_e5_v8__0l;
                block[4] = v4;
                block[5] = v1;
                dispatch_sync(v6, block);
                CFRetain(v1);
                v8 = *((_QWORD *)v4 + 13);
                v9[0] = v7;
                v9[1] = 3221225472;
                v9[2] = __playerairplay_playbackWillBeInterruptedNotificationCallback_block_invoke_2;
                v9[3] = &__block_descriptor_48_e5_v8__0l;
                v9[4] = v4;
                v9[5] = v1;
                dispatch_async(v8, v9);
              }
            }
          }
        }
      }
    }
    CFRelease(v1);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_6(uint64_t a1, uint64_t a2, char a3, const void *a4)
{
  uint64_t v6;
  const void *v7;
  _BYTE *DerivedStorage;
  _BYTE *v9;
  NSObject *v10;
  _QWORD v11[7];
  char v12;

  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    v7 = (const void *)v6;
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v9 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v7);
        if (a4)
          CFRetain(a4);
        v10 = *((_QWORD *)v9 + 13);
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 3221225472;
        v11[2] = __playerairplay_initializeCallbacks_block_invoke_7;
        v11[3] = &__block_descriptor_57_e5_v8__0l;
        v12 = a3;
        v11[4] = v9;
        v11[5] = v7;
        v11[6] = a4;
        dispatch_async(v10, v11);
      }
    }
    CFRelease(v7);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_7(uint64_t a1)
{
  _BYTE *v2;
  _BOOL4 IsAirplayVideoActive;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = *(_BYTE **)(a1 + 32);
  if (!*v2 && v2[400] != *(_BYTE *)(a1 + 56))
  {
    IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(*(const void **)(a1 + 40));
    v4 = *(void **)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 400) = *(_BYTE *)(a1 + 56);
    playerairplay_checkStartStopAirPlay(v4, IsAirplayVideoActive);
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 48);
  if (v6)
    CFRelease(v6);
}

void __playerairplay_initializeCallbacks_block_invoke_8(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4;
  const void *v5;
  _BYTE *DerivedStorage;
  _BYTE *v7;
  NSObject *v8;
  _QWORD block[7];

  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = (const void *)v4;
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v7 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v5);
        if (a3)
          CFRetain(a3);
        v8 = *((_QWORD *)v7 + 13);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __playerairplay_initializeCallbacks_block_invoke_9;
        block[3] = &__block_descriptor_56_e5_v8__0l;
        block[4] = v7;
        block[5] = v5;
        block[6] = a3;
        dispatch_async(v8, block);
      }
    }
    CFRelease(v5);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_9(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (!**(_BYTE **)(a1 + 32))
    playerairplay_setAndCacheAudioMode(*(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), 1);
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void __playerairplay_initializeCallbacks_block_invoke_10()
{
  uint64_t v0;
  const void *v1;
  _BYTE *DerivedStorage;
  _BYTE *v3;
  NSObject *v4;
  _QWORD v5[6];

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v3 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v1);
        v4 = *((_QWORD *)v3 + 13);
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = __playerairplay_initializeCallbacks_block_invoke_11;
        v5[3] = &__block_descriptor_48_e5_v8__0l;
        v5[4] = v3;
        v5[5] = v1;
        dispatch_async(v4, v5);
      }
    }
    CFRelease(v1);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_11(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  CFTypeRef v4;
  void (*v5)(uint64_t, CFTypeRef, float);
  CFTypeRef v6;
  const void *v7;
  CFTypeRef cf[23];

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!**(_BYTE **)(a1 + 32) && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    cf[0] = 0;
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 32, (CFMutableDictionaryRef *)cf);
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v4 = cf[0];
    v5 = *(void (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
    if (v5)
      v5(v3, v4, 0.0);
    if (cf[0])
    {
      CFRelease(cf[0]);
      v6 = cf[0];
    }
    else
    {
      v6 = 0;
    }
    playerairplay_updatePlayerRateToMatch(*(const void **)(a1 + 40), (uint64_t)v6, 0.0);
  }
  v7 = *(const void **)(a1 + 40);
  if (v7)
    CFRelease(v7);
}

void __playerairplay_playbackWillBeInterruptedNotificationCallback_block_invoke(uint64_t a1)
{
  CFTypeRef v2;
  CFTypeRef cf;

  if (!**(_BYTE **)(a1 + 32) && pap_AirPlayState(*(const void **)(a1 + 40)) - 14 <= 2)
  {
    v2 = 0;
    cf = 0;
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (unint64_t)&cf, (unint64_t)&v2);
    playerairplay_savePlaybackInfoAndStopAPV(*(const void **)(a1 + 40), (uint64_t)cf, (uint64_t)v2);
    if (cf)
      CFRelease(cf);
    if (v2)
      CFRelease(v2);
  }
}

void __playerairplay_playbackWillBeInterruptedNotificationCallback_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  void (*v4)(uint64_t, CFTypeRef, float);
  const void *v5;
  CFTypeRef cf;

  if (!**(_BYTE **)(a1 + 32))
  {
    cf = 0;
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 27, (CFMutableDictionaryRef *)&cf);
    playerairplay_updatePlayerRateToMatch(*(const void **)(a1 + 40), (uint64_t)cf, 0.0);
    playerairplay_updateSubPlayerPlayQueue();
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v3 = cf;
    v4 = *(void (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
    if (v4)
      v4(v2, v3, 0.0);
    if (cf)
      CFRelease(cf);
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
}

void playerairplay_deferredAutoMediaSelectionCriteriaChanged(uint64_t a1, const void *a2)
{
  _BYTE *DerivedStorage;
  int v4;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (!*DerivedStorage)
    {
      v4 = pap_AirPlayState(a2);
      if (v4)
      {
        if (v4 != 10)
          playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(a2);
      }
    }
    CFRelease(a2);
  }
}

void playerairplay_playQueueWorkQueueFinalizer(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void __playerairplay_initializeVolumeFadeOutNotification_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, CMTime *);
  uint64_t state64;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  state64 = 0;
  dispatch_get_context(*(dispatch_object_t *)(a1 + 32));
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    notify_get_state(a2, &state64);
    v5 = state64;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    memset(&v11, 0, sizeof(v11));
    CMTimeMake(&v11, v5, 1000);
    if (!*(_BYTE *)DerivedStorage)
    {
      v7 = *(_QWORD *)(DerivedStorage + 296);
      if (v7)
      {
        v10 = v11;
        v8 = *(void (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
        if (v8)
        {
          v12 = v10;
          v8(v7, 2, &v12);
        }
      }
    }
    CFRelease(v4);
  }
}

uint64_t FigCDSInputGetClassID()
{
  MEMORY[0x19402F294](&FigCDSInputGetClassID_sRegisterFigCDSInputTypeOnce, RegisterFigCDSInputType);
  return sFigCDSInputClassID;
}

uint64_t RegisterFigCDSInputType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigCDSInputCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCDSInput %p]"), a1);
}

uint64_t FigPlayerCoordinatorCreateWithOptions(uint64_t a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t DerivedStorage;
  BOOL v10;
  const void *v11;
  uint64_t v12;
  void *v14;
  void *value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  v14 = 0;
  if (a4 && a2)
  {
    FigPlayerGetClassID();
    v7 = CMDerivedObjectCreate();
    v8 = cf;
    if (!(_DWORD)v7)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_BYTE *)DerivedStorage = 0;
      if (a3)
      {
        if (CFDictionaryGetValueIfPresent(a3, CFSTR("LoggingIdentifier"), (const void **)&value))
          CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 41), 10, 0x8000100u);
        CFDictionaryGetValueIfPresent(a3, CFSTR("InterstitialPrimaryPlayerName"), (const void **)&v14);
        v10 = v14 != 0;
      }
      else
      {
        v10 = 0;
      }
      *(_BYTE *)(DerivedStorage + 40) = v10;
      v11 = (const void *)FigCFDictionaryGetValue();
      if (v11)
        v11 = CFRetain(v11);
      *(_QWORD *)(DerivedStorage + 24) = v11;
      v12 = FigCFWeakReferenceTableCreate();
      if ((_DWORD)v12)
      {
        v7 = v12;
        v8 = cf;
      }
      else
      {
        *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2);
        CMNotificationCenterGetDefaultLocalCenter();
        v7 = FigNotificationCenterAddWeakListener();
        v8 = cf;
        if (!(_DWORD)v7)
        {
          *a4 = cf;
          return v7;
        }
      }
    }
    if (v8)
      CFRelease(v8);
    return v7;
  }
  return FigSignalErrorAt();
}

uint64_t playercoordinator_reflectSubPlayerNotification()
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t playercoordinator_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t FigBaseObject;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  v1 = DerivedStorage;
  *(_BYTE *)DerivedStorage = 1;
  if (*(_QWORD *)(DerivedStorage + 16))
    FigCFWeakReferenceTableApplyFunction();
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(v1 + 8));
  if (!FigBaseObject)
    return 4294954516;
  v3 = FigBaseObject;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v4)
    return v4(v3);
  else
    return 4294954514;
}

void playercoordinator_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  const void *v7;
  void (*v8)(const void *);
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  if (FigBaseObject)
  {
    v4 = FigBaseObject;
    v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v5)
      v5(v4);
  }
  if (DerivedStorage[4])
  {
    v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v6)
    {
      v7 = (const void *)v6;
      v8 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
      if (v8)
        v8(v7);
      CFRelease(v7);
    }
  }
  v9 = (const void *)DerivedStorage[1];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[1] = 0;
  }
  v10 = (const void *)DerivedStorage[2];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[2] = 0;
  }
  v11 = (const void *)DerivedStorage[4];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[4] = 0;
  }
  v12 = (const void *)DerivedStorage[3];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[3] = 0;
  }
}

uint64_t playercoordinator_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  const void **v13;
  uint64_t v14;
  const void *v15;
  uint64_t FigBaseObject;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, _QWORD *);
  const void *v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage || !*(_QWORD *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  if (FigCFEqual())
  {
    v10 = *(const void **)(v9 + 24);
    if (v10)
      v10 = CFRetain(v10);
LABEL_19:
    v14 = 0;
    *a4 = v10;
    return v14;
  }
  if (FigCFEqual())
  {
    v19 = 0;
    if (!*(_QWORD *)(v9 + 32)
      || (v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject(), (v19 = v10) == 0))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v12 = Mutable;
      if (*(_BYTE *)(v9 + 40))
        v13 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v13 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(Mutable, CFSTR("IsInterstitialPlaybackCoordinator"), *v13);
      v14 = FigPlaybackCoordinatorCreate();
      if (v12)
        CFRelease(v12);
      if ((_DWORD)v14)
        return v14;
      v15 = *(const void **)(v9 + 32);
      if (v15)
        CFRelease(v15);
      *(_QWORD *)(v9 + 32) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      v10 = v19;
    }
    goto LABEL_19;
  }
  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(v9 + 8));
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v18)
    return 4294954514;
  return v18(FigBaseObject, a2, a3, a4);
}

uint64_t playercoordinator_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(_BYTE *)DerivedStorage && (v7 = *(_QWORD *)(DerivedStorage + 8)) != 0)
    return FPSupport_HandlePlayerSetPropertyAndForwardToSubPlayer(a1, v7, a2, a3, 0, (uint64_t)playercoordinator_handleSetProperty);
  else
    return FigSignalErrorAt();
}

uint64_t playercoordinator_invalidateItemsApply(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  result = FigPlaybackItemGetFigBaseObject(a2);
  if (result)
  {
    v3 = result;
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v4)
      return v4(v3);
  }
  return result;
}

uint64_t playercoordinator_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, _BYTE *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  const void *v13;
  CFTypeRef v14;
  CFTypeRef v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v13 = *(const void **)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = a4;
    if (a4)
      CFRetain(a4);
    if (v13)
      CFRelease(v13);
  }
  *a5 = 0;
  if (a3)
    v14 = CFRetain(a3);
  else
    v14 = 0;
  *a6 = v14;
  if (a4)
    v15 = CFRetain(a4);
  else
    v15 = 0;
  *a7 = v15;
  return 0;
}

uint64_t playercoordinator_AddToPlayQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(_QWORD *)(v6 + 8);
  if (a3)
  {
    a3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
    v7 = *(_QWORD *)(DerivedStorage + 8);
  }
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v9)
    return v9(v7, v8, a3);
  else
    return 4294954514;
}

uint64_t playercoordinator_RemoveFromPlayQueue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  if (!v6)
    return FigSignalErrorAt();
  if (a2)
  {
    a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
    v6 = *(_QWORD *)(v5 + 8);
  }
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v7)
    return v7(v6, a2);
  else
    return 4294954514;
}

uint64_t playercoordinator_CopyPlayQueueItem(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a1)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_10;
  v8 = *(_QWORD *)(DerivedStorage + 8);
  if (!v8)
    goto LABEL_10;
  if (a2)
  {
    a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
    v8 = *(_QWORD *)(v7 + 8);
  }
  v9 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v9)
  {
    v12 = 4294954514;
    goto LABEL_15;
  }
  v10 = v9(v8, a2, &cf);
  if (!(_DWORD)v10)
  {
    if (cf)
    {
      v11 = FigCFWeakReferenceTableCopyValue();
      if (!v11)
      {
LABEL_10:
        v10 = FigSignalErrorAt();
        goto LABEL_11;
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = 0;
    *a3 = v11;
    goto LABEL_15;
  }
LABEL_11:
  v12 = v10;
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t playercoordinator_SetRate(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, float);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t playercoordinator_GetRate(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t playercoordinator_SetRateWithFade(uint64_t a1, __int128 *a2, float a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, float);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (!v7)
    return FigSignalErrorAt();
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v8)
    return 4294954514;
  v12 = v10;
  v13 = v11;
  return v8(v7, &v12, a3);
}

uint64_t playercoordinator_StartPreroll(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, float);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v8)
    return v8(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t playercoordinator_StepByCount(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t playercoordinator_SetRateAndAnchorTime(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, float a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, __int128 *, __int128 *, uint64_t, float);
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v11 = *(_QWORD *)(DerivedStorage + 8);
  if (!v11)
    return FigSignalErrorAt();
  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v14 = *a3;
  v15 = *((_QWORD *)a3 + 2);
  v12 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 88);
  if (!v12)
    return 4294954514;
  v20 = v16;
  v21 = v17;
  v18 = v14;
  v19 = v15;
  return v12(v11, &v20, &v18, a4, a5);
}

uint64_t playercoordinator_CreatePlaybackItemFromAsset(const void *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, CFTypeRef *);
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t v18;
  void *value;
  CFTypeRef v21;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  cf = 0;
  value = 0;
  if (!a1 || *(_BYTE *)DerivedStorage || (v11 = *(_QWORD *)(DerivedStorage + 8)) == 0)
  {
    v13 = FigSignalErrorAt();
LABEL_20:
    v14 = v13;
    goto LABEL_16;
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 96);
  if (!v12)
  {
    v14 = 4294954514;
    goto LABEL_16;
  }
  v13 = v12(v11, a2, a3, a4, &cf);
  if ((_DWORD)v13)
    goto LABEL_20;
  CFGetAllocator(a1);
  FigPlaybackItemGetClassID();
  v14 = CMDerivedObjectCreate();
  v15 = v21;
  if (!(_DWORD)v14)
  {
    v16 = CMBaseObjectGetDerivedStorage();
    v17 = cf;
    if (cf)
      v17 = CFRetain(cf);
    *(_QWORD *)(v16 + 8) = v17;
    *(_QWORD *)(v16 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (a4 && CFDictionaryGetValueIfPresent(a4, CFSTR("LoggingIdentifier"), (const void **)&value))
      CFStringGetCString((CFStringRef)value, (char *)(v16 + 40), 10, 0x8000100u);
    v18 = FigCFWeakReferenceTableAddValueAssociatedWithKey();
    if ((_DWORD)v18)
    {
      v14 = v18;
      v15 = v21;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      v14 = FigNotificationCenterAddWeakListener();
      v15 = v21;
      if (!(_DWORD)v14)
      {
        *a5 = v21;
        v21 = 0;
        goto LABEL_16;
      }
    }
  }
  if (v15)
    CFRelease(v15);
LABEL_16:
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t playercoordinator_SetRateWithOptions(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, float);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v8)
    return v8(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t playercoordinator_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(_BYTE *)DerivedStorage && (v7 = *(_QWORD *)(DerivedStorage + 8)) != 0)
    return FPSupport_HandlePlayerSetPropertiesAndForwardToSubPlayer(a1, v7, 0, (uint64_t)playercoordinator_handleSetProperty, a2, a3);
  else
    return FigSignalErrorAt();
}

uint64_t playercoordinator_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t playercoordinator_AddExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t playercoordinator_RemoveExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t itemcoordinator_reflectSubItemNotification()
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t itemcoordinator_Invalidate()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t FigBaseObject;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 8))
  {
    v5 = 0;
    if (!v1)
      return v5;
    goto LABEL_11;
  }
  if (v1)
    FigCFWeakReferenceTableRemoveValue();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
  if (FigBaseObject)
  {
    v3 = FigBaseObject;
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v4)
    {
      v5 = v4(v3);
      if (!v1)
        return v5;
    }
    else
    {
      v5 = 4294954514;
      if (!v1)
        return v5;
    }
    goto LABEL_11;
  }
  v5 = 4294954516;
  if (v1)
LABEL_11:
    CFRelease(v1);
  return v5;
}

void itemcoordinator_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  if (FigBaseObject)
  {
    v4 = FigBaseObject;
    v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v5)
      v5(v4);
  }
  v6 = (const void *)DerivedStorage[3];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[3] = 0;
  }
  v7 = (const void *)DerivedStorage[4];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[4] = 0;
  }
  v8 = (const void *)DerivedStorage[2];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[2] = 0;
  }
  v9 = (const void *)DerivedStorage[1];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[1] = 0;
  }
}

uint64_t itemcoordinator_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v9;
  const void *v10;
  CFTypeRef v11;
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const void *, uint64_t, _QWORD *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  v9 = (_QWORD *)DerivedStorage;
  if (*(_BYTE *)DerivedStorage || !*(_QWORD *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("InterstitialTimeRanges")))
  {
    v10 = (const void *)v9[3];
    if (v10)
    {
LABEL_6:
      v11 = CFRetain(v10);
LABEL_10:
      result = 0;
      *a4 = v11;
      return result;
    }
LABEL_9:
    v11 = 0;
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("IntegratedTimelineTimeOffsets")))
  {
    v10 = (const void *)v9[4];
    if (v10)
      goto LABEL_6;
    goto LABEL_9;
  }
  FigBaseObject = FigPlaybackItemGetFigBaseObject(v9[1]);
  v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v14)
    return v14(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcoordinator_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(_BYTE *)DerivedStorage && (v7 = *(_QWORD *)(DerivedStorage + 8)) != 0)
    return FPSupport_HandlePlaybackItemSetPropertyAndForwardToSubItem(a1, v7, a2, a3, 0, (uint64_t)itemcoordinator_handleSetProperty);
  else
    return FigSignalErrorAt();
}

const void *itemcoordinator_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, char *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  CFTypeID v13;
  const void *v14;
  CFTypeID v15;
  const void *v16;
  char v17;
  CFTypeRef v18;
  CFTypeRef v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a3, CFSTR("InterstitialTimeRanges")))
  {
    if (!CFEqual(a3, CFSTR("IntegratedTimelineTimeOffsets")))
    {
      v17 = 0;
      v14 = 0;
      goto LABEL_20;
    }
    if (a4)
    {
      v15 = CFGetTypeID(a4);
      if (v15 != CFArrayGetTypeID())
      {
LABEL_11:
        v14 = (const void *)FigSignalErrorAt();
        goto LABEL_19;
      }
      v16 = *(const void **)(DerivedStorage + 32);
      *(_QWORD *)(DerivedStorage + 32) = a4;
      CFRetain(a4);
      if (!v16)
      {
LABEL_17:
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        goto LABEL_18;
      }
    }
    else
    {
      v16 = *(const void **)(DerivedStorage + 32);
      *(_QWORD *)(DerivedStorage + 32) = 0;
      if (!v16)
        goto LABEL_17;
    }
    CFRelease(v16);
    goto LABEL_17;
  }
  if (a4)
  {
    v13 = CFGetTypeID(a4);
    if (v13 == CFArrayGetTypeID())
    {
      v14 = *(const void **)(DerivedStorage + 24);
      *(_QWORD *)(DerivedStorage + 24) = a4;
      CFRetain(a4);
      if (!v14)
        goto LABEL_19;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  v14 = *(const void **)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = 0;
  if (v14)
  {
LABEL_13:
    CFRelease(v14);
LABEL_18:
    v14 = 0;
  }
LABEL_19:
  v17 = 1;
LABEL_20:
  *a5 = v17;
  if (a3)
    v18 = CFRetain(a3);
  else
    v18 = 0;
  *a6 = v18;
  if (a4)
    v19 = CFRetain(a4);
  else
    v19 = 0;
  *a7 = v19;
  return v14;
}

uint64_t itemcoordinator_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v8)
    return v8(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t itemcoordinator_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t itemcoordinator_SetCurrentTime(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, uint64_t);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (!v7)
    return FigSignalErrorAt();
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v8)
    return 4294954514;
  v12 = v10;
  v13 = v11;
  return v8(v7, &v12, a3);
}

uint64_t itemcoordinator_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t itemcoordinator_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v11 = *(_QWORD *)(DerivedStorage + 8);
  if (!v11)
    return FigSignalErrorAt();
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 40);
  if (v12)
    return v12(v11, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t itemcoordinator_MakeReadyForInspection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v8)
    return v8(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t itemcoordinator_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(DerivedStorage + 8);
  if (!v9)
    return FigSignalErrorAt();
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v10)
    return v10(v9, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcoordinator_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(DerivedStorage + 8);
  if (!v9)
    return FigSignalErrorAt();
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v10)
    return v10(v9, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcoordinator_GetNextThumbnailTime(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, __int128 *, uint64_t, uint64_t);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(DerivedStorage + 8);
  if (!v9)
    return FigSignalErrorAt();
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v10 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 80);
  if (!v10)
    return 4294954514;
  v14 = v12;
  v15 = v13;
  return v10(v9, &v14, a3, a4);
}

uint64_t itemcoordinator_SetCurrentTimeWithRange(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *);
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v11 = *(_QWORD *)(DerivedStorage + 8);
  if (!v11)
    return FigSignalErrorAt();
  v18 = *a2;
  v19 = *((_QWORD *)a2 + 2);
  v16 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v14 = *a5;
  v15 = *((_QWORD *)a5 + 2);
  v12 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 104);
  if (!v12)
    return 4294954514;
  v24 = v18;
  v25 = v19;
  v22 = v16;
  v23 = v17;
  v20 = v14;
  v21 = v15;
  return v12(v11, &v24, a3, &v22, &v20);
}

uint64_t itemcoordinator_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(DerivedStorage + 8);
  if (!v9)
    return FigSignalErrorAt();
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v10)
    return v10(v9, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcoordinator_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t itemcoordinator_SeekToDateWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v8)
    return v8(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t itemcoordinator_SetCurrentTimeWithRangeAndID(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t);
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v13 = *(_QWORD *)(DerivedStorage + 8);
  if (!v13)
    return FigSignalErrorAt();
  v20 = *a2;
  v21 = *((_QWORD *)a2 + 2);
  v18 = *a4;
  v19 = *((_QWORD *)a4 + 2);
  v16 = *a5;
  v17 = *((_QWORD *)a5 + 2);
  v14 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 144);
  if (!v14)
    return 4294954514;
  v26 = v20;
  v27 = v21;
  v24 = v18;
  v25 = v19;
  v22 = v16;
  v23 = v17;
  return v14(v13, &v26, a3, &v24, &v22, a6);
}

uint64_t itemcoordinator_CopyAsset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t itemcoordinator_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(_BYTE *)DerivedStorage && (v7 = *(_QWORD *)(DerivedStorage + 8)) != 0)
    return FPSupport_HandlePlaybackItemSetPropertiesAndForwardToSubItem(a1, v7, 0, (uint64_t)itemcoordinator_handleSetProperty, a2, a3);
  else
    return FigSignalErrorAt();
}

uint64_t itemcoordinator_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(DerivedStorage + 8);
  if (!v9)
    return FigSignalErrorAt();
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v10)
    return v10(v9, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcoordinator_SetCurrentTimeWithOptions(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, uint64_t);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (!v7)
    return FigSignalErrorAt();
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v8)
    return 4294954514;
  v12 = v10;
  v13 = v11;
  return v8(v7, &v12, a3);
}

uint64_t playercoordinator_BeginInterruption(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(DerivedStorage + 8);
  if (!v3)
    return FigSignalErrorAt();
  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v4 && (v5 = *(uint64_t (**)(uint64_t))(v4 + 8)) != 0)
    return v5(v3);
  else
    return 4294954514;
}

uint64_t playercoordinator_EndInterruption(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v6 && (v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16)) != 0)
    return v7(v5, a2);
  else
    return 4294954514;
}

uint64_t playercoordinator_SetConnectionActive(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v6 && (v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 24)) != 0)
    return v7(v5, a2);
  else
    return 4294954514;
}

uint64_t FigMediaRequestCreate(int a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5, const void *a6, const void *a7, const void *a8, CFTypeRef a9, int a10, uint64_t a11, const void *a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  uint64_t v21;
  uint64_t DerivedStorage;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  NSObject *v33;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v35;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a17)
    return FigSignalErrorAt();
  if (sRegisterFigMediaRequestClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigMediaRequestClassIDOnce, 0, (dispatch_function_t)RegisterFigMediaRequestSource);
  v21 = CMDerivedObjectCreate();
  if ((_DWORD)v21)
    return v21;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v23 = CFRetain(a2);
  else
    v23 = 0;
  *(_QWORD *)(DerivedStorage + 16) = v23;
  if (a5)
    v24 = CFRetain(a5);
  else
    v24 = 0;
  *(_QWORD *)(DerivedStorage + 24) = v24;
  if (a6)
    v25 = CFRetain(a6);
  else
    v25 = 0;
  *(_QWORD *)(DerivedStorage + 32) = v25;
  if (a7)
    v26 = CFRetain(a7);
  else
    v26 = 0;
  *(_QWORD *)(DerivedStorage + 40) = v26;
  v27 = a8;
  if (a8)
    v27 = CFRetain(a8);
  *(_QWORD *)(DerivedStorage + 56) = v27;
  v28 = a9 ? CFRetain(a9) : 0;
  *(_QWORD *)(DerivedStorage + 64) = v28;
  v29 = a12 ? CFRetain(a12) : 0;
  *(_QWORD *)(DerivedStorage + 72) = v29;
  *(_QWORD *)(DerivedStorage + 80) = a3;
  *(_QWORD *)(DerivedStorage + 88) = a4;
  v30 = a14 ? CFRetain(a14) : 0;
  *(_QWORD *)(DerivedStorage + 96) = v30;
  *(_QWORD *)(DerivedStorage + 112) = a16;
  *(_DWORD *)(DerivedStorage + 48) = a10;
  *(_QWORD *)(DerivedStorage + 160) = a11;
  *(_QWORD *)(DerivedStorage + 184) = a13;
  *(_QWORD *)DerivedStorage = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 104) = a15;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 120) = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v21 = FigRetainProxyCreate();
  if ((_DWORD)v21)
    return v21;
  v33 = FigHTTPSchedulerRetain(0);
  *(_QWORD *)(DerivedStorage + 8) = v33;
  if (!v33)
    return FigSignalErrorAt();
  if (dword_1EE2A2FC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v35 = 0;
  *a17 = 0;
  return v35;
}

uint64_t FigMediaRequestDeliverOnceWithCacheCreate(int a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, uint64_t a7, const void *a8, int a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13, uint64_t a14, NSObject *a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, _QWORD *a20)
{
  uint64_t v23;
  _QWORD *DerivedStorage;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  uint64_t v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a20)
    return FigSignalErrorAt();
  if (sRegisterFigMediaRequestClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigMediaRequestClassIDOnce, 0, (dispatch_function_t)RegisterFigMediaRequestSource);
  v23 = CMDerivedObjectCreate();
  if (!(_DWORD)v23)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a2)
      v25 = CFRetain(a2);
    else
      v25 = 0;
    DerivedStorage[1] = v25;
    if (a3)
      v26 = CFRetain(a3);
    else
      v26 = 0;
    DerivedStorage[2] = v26;
    DerivedStorage[7] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    DerivedStorage[8] = a14;
    DerivedStorage[9] = a15;
    if (a15)
      dispatch_retain(a15);
    *DerivedStorage = FigSimpleMutexCreate();
    v27 = a19;
    if (a19)
      v27 = CFRetain(a19);
    DerivedStorage[6] = v27;
    v28 = FigMediaRequestCreate(a1, a2, 0, 0x1FFFFFFFFFFFFFLL, a4, a5, a6, 0, a8, a9, 0, a11, 3, a12, a17, a16, DerivedStorage + 3);
    if ((_DWORD)v28)
    {
      return v28;
    }
    else
    {
      if (dword_1EE2A2FC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v23 = 0;
      *a20 = 0;
    }
  }
  return v23;
}

uint64_t FigMediaRequestCreateForPlaylist(int a1, const void *a2, const void *a3, int a4, const void *a5, const void *a6, const void *a7, uint64_t a8, const void *a9, int a10, uint64_t a11, const void *a12, const void *a13, uint64_t a14, uint64_t a15, NSObject *a16, _QWORD *a17)
{
  uint64_t v18;
  const void **v19;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v22;
  uint64_t v23;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a17)
    return FigSignalErrorAt();
  v19 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a4)
    v19 = (const void **)MEMORY[0x1E0C9AE40];
  result = FigMediaRequestDeliverOnceWithCacheCreate(a1, a2, a3, a5, a6, a7, v18, a9, a10, v22, a12, a13, a14, a15, a16, 30000000000, (uint64_t)mr_shouldRetryRequestForPlaylistOrSessionData, v23, *v19,
             a17);
  if (!(_DWORD)result)
  {
    if (dword_1EE2A2FC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
  }
  return result;
}

BOOL mr_shouldRetryRequestForPlaylistOrSessionData(int a1, int a2, int a3, int a4, char a5, uint64_t a6, CFErrorRef err)
{
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  CFErrorRef v12;

  result = 0;
  v11 = 0;
  v12 = err;
  v10 = 0;
  if (a6 <= 1 && err)
  {
    CFErrorGetCode(err);
    return !FigStreamingNetworkErrorGetRecommendedAction(err, &v11, &v10)
        && ((a5 & 2) == 0
         || v11 != 1
         || !FigCFHTTPCreateCFErrorFromHTTPStatusCode(-12938, &v12)
         && !FigStreamingNetworkErrorGetRecommendedAction(v12, &v11, &v10));
  }
  return result;
}

uint64_t FigMediaRequestCreateForSessionData(int a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6, uint64_t a7, const void *a8, int a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13, uint64_t a14, NSObject *a15, _QWORD *a16)
{
  const void *URL;
  uint64_t v18;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v21;
  uint64_t v22;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a16)
    return FigSignalErrorAt();
  URL = (const void *)FigSessionDataSpecifierGetURL(a2);
  result = FigMediaRequestDeliverOnceWithCacheCreate(a1, URL, a3, a4, a5, a6, v18, a8, a9, v21, a11, a12, a13, a14, a15, 30000000000, (uint64_t)mr_shouldRetryRequestForPlaylistOrSessionData, v22, 0,
             a16);
  if (!(_DWORD)result)
  {
    if (dword_1EE2A2FC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
  }
  return result;
}

void mr_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  NSObject *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyInvalidate();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 32);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 56);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 120);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(DerivedStorage + 200);
  if (v7)
    CFRelease(v7);
  v8 = *(_QWORD *)(DerivedStorage + 192);
  if (v8)
  {
    v9 = *(_QWORD *)(DerivedStorage + 72);
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v10)
      v10(v9, v8);
  }
  v11 = *(const void **)(DerivedStorage + 72);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(DerivedStorage + 216);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(DerivedStorage + 96);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(DerivedStorage + 64);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(DerivedStorage + 168);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(DerivedStorage + 176);
  if (v16)
    CFRelease(v16);
  ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 128));
  v17 = *(const void **)(DerivedStorage + 224);
  if (v17)
    CFRelease(v17);
  FigSimpleMutexDestroy();
  v18 = *(NSObject **)(DerivedStorage + 8);
  if (v18)
    dispatch_release(v18);
}

CFStringRef mr_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigMediaRequest %p]"), a1);
}

uint64_t mr_start(const void *a1)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  uint64_t Mutable;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, const void *, OpaqueCMBlockBuffer *, char, uint64_t, const void *), uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const void *v16;
  _QWORD *v17;
  uint64_t v18;
  CFAllocatorRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, CFAllocatorRef, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD *), void (*)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, char, int), uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  NSObject *v31;
  void *v32;
  dispatch_source_t v33;
  NSObject *v34;
  dispatch_time_t v35;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  _QWORD *v44;
  CFTypeRef cf[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (FigCFHTTPIsHTTPBasedURL((const __CFURL *)DerivedStorage[2]) && (DerivedStorage[23] & 1) != 0)
  {
    v13 = CMBaseObjectGetDerivedStorage();
    v14 = v13;
    v15 = &sFigCDSNodeProtocolID;
    if (!a1)
    {
      v37 = FigSignalErrorAt();
      goto LABEL_48;
    }
    v44 = DerivedStorage;
    v17 = (_QWORD *)(v13 + 200);
    v16 = *(const void **)(v13 + 200);
    *(_DWORD *)(v14 + 136) = 1;
    *(_QWORD *)(v14 + 144) |= 1uLL;
    if (v16)
    {
      CFRelease(v16);
      *v17 = 0;
    }
    v18 = *(_QWORD *)(v14 + 24);
    v43 = a1;
    v19 = CFGetAllocator(a1);
    v20 = *(_QWORD *)(v14 + 56);
    v21 = *(_QWORD *)(v14 + 16);
    v41 = *(_QWORD *)(v14 + 32);
    v42 = *(_QWORD *)(v14 + 40);
    v22 = *(unsigned int *)(v14 + 48);
    v23 = *(_QWORD *)(v14 + 80);
    v24 = *(_QWORD *)(v14 + 88);
    v25 = *(_QWORD *)(v14 + 224);
    v26 = *(uint64_t (**)(uint64_t, CFAllocatorRef, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD *), void (*)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, char, int), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v26)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)cf = 0u;
      v27 = v26(v18, v19, v20, v21, 0, v42, v41, v22, cf, v23, v24, mr_memoryRequestCallback, mr_httpReadCallback, v25, v14 + 200, v14 + 208);
      if (!(_DWORD)v27)
      {
        a1 = v43;
        DerivedStorage = v44;
        v15 = &sFigCDSNodeProtocolID;
        if (*(uint64_t *)(v14 + 112) >= 1)
        {
          v28 = CMBaseObjectGetDerivedStorage();
          ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(v28 + 128));
          v29 = FigCFWeakReferenceHolderCreateWithReferencedObject();
          v30 = *(_QWORD *)(v28 + 112);
          v31 = *(NSObject **)(v28 + 8);
          cf[0] = 0;
          if (v31)
          {
            v32 = (void *)v29;
            v33 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v31);
            cf[0] = v33;
            if (v33)
            {
              v34 = v33;
              if (v32)
                dispatch_set_context(v33, v32);
              dispatch_source_set_event_handler_f(v34, (dispatch_function_t)mr_timerEventHandler);
              dispatch_set_finalizer_f(v34, (dispatch_function_t)mr_timerFinalizer);
              v35 = dispatch_time(0, v30);
              dispatch_source_set_timer(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
              dispatch_resume(v34);
              *(_QWORD *)(v28 + 128) = v34;
              goto LABEL_34;
            }
          }
          if (!FigSignalErrorAt())
          {
LABEL_34:
            if (!dword_1EE2A2FC0)
              goto LABEL_53;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_47;
          }
          ckbutil_cancelAndReleaseTimer((dispatch_object_t *)cf);
        }
LABEL_47:
        v37 = 0;
        goto LABEL_48;
      }
      v37 = v27;
    }
    else
    {
      v37 = 4294954514;
    }
    a1 = v43;
    DerivedStorage = v44;
    v15 = &sFigCDSNodeProtocolID;
LABEL_48:
    if (*((_DWORD *)v15 + 1008))
    {
      v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if ((_DWORD)v37)
    {
      cf[0] = 0;
      FigCreateErrorForOSStatus(v37, (CFErrorRef *)cf);
      mr_transitionToFailedState(a1, cf[0]);
      if (cf[0])
        CFRelease(cf[0]);
    }
    goto LABEL_53;
  }
  if ((DerivedStorage[23] & 2) == 0)
    goto LABEL_53;
  v4 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v4 + 136) = 2;
  *(_QWORD *)(v4 + 144) |= 2uLL;
  FigGetAllocatorForMedia();
  Mutable = FigCustomURLRequestInfoCreateMutable();
  if ((_DWORD)Mutable
    || (Mutable = FigCustomURLRequestInfoSetHTTPHeaders(), (_DWORD)Mutable)
    || (Mutable = FigCustomURLRequestInfoSetNetworkHistory(), (_DWORD)Mutable)
    || (Mutable = FigCustomURLRequestInfoSetExpectedToBlock(), (_DWORD)Mutable)
    || (*(_BYTE *)(v4 + 49) & 4) != 0
    && *(_QWORD *)(v4 + 160)
    && (Mutable = FigCustomURLRequestInfoSetDefaultLatency(), (_DWORD)Mutable))
  {
    v12 = Mutable;
    v6 = 0;
    goto LABEL_39;
  }
  v6 = FigCFHTTPCreateUserAgent();
  v7 = FigCustomURLRequestInfoSetUserAgent();
  if (!(_DWORD)v7)
  {
    if ((*(_BYTE *)(v4 + 48) & 4) == 0 || (v7 = FigCustomURLRequestInfoSetAcceptEncoding(), !(_DWORD)v7))
    {
      if (*(uint64_t *)(v4 + 80) <= 0 && *(uint64_t *)(v4 + 88) < 1
        || (v7 = FigCustomURLRequestInfoSetByteRange(), !(_DWORD)v7))
      {
        v8 = *(_QWORD *)(v4 + 72);
        v9 = *(_QWORD *)(v4 + 224);
        v10 = *(_QWORD *)(v4 + 8);
        v11 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, const void *, OpaqueCMBlockBuffer *, char, uint64_t, const void *), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v11)
        {
          v12 = 4294954514;
          goto LABEL_39;
        }
        v7 = v11(v8, 0, v9, v10, mr_customURLReadCallback, v4 + 192);
      }
    }
  }
  v12 = v7;
LABEL_39:
  if (dword_1EE2A2FC0)
  {
    v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((_DWORD)v12)
  {
    cf[0] = 0;
    FigCreateErrorForOSStatus(v12, (CFErrorRef *)cf);
    mr_transitionToFailedState(a1, cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
  }
  if (v6)
    CFRelease(v6);
LABEL_53:
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t mr_subscribeToOutput(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  _QWORD *DerivedStorage;
  _QWORD *Instance;
  uint64_t v13;
  OpaqueCMBlockBuffer *v14;
  size_t DataLength;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  FigGetAllocatorForMedia();
  v19 = xmmword_1E2F99950;
  if (mr_outputCallbackDataGetTypeID_once != -1)
    dispatch_once_f(&mr_outputCallbackDataGetTypeID_once, &v19, (dispatch_function_t)mrutil_registerClass);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    Instance[2] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    Instance[3] = a5;
    Instance[4] = a6;
    Instance[5] = a2;
    Instance[6] = a3;
    if (a6)
      dispatch_retain(a6);
  }
  else
  {
    v18 = FigSignalErrorAt();
    if ((_DWORD)v18)
    {
      v16 = v18;
      MEMORY[0x19402EF04](*DerivedStorage);
      return v16;
    }
  }
  v13 = CMBaseObjectGetDerivedStorage();
  LOBYTE(v19) = 0;
  v14 = *(OpaqueCMBlockBuffer **)(v13 + 216);
  if (!v14
    || !CMBlockBufferGetDataLength(v14)
    || (DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v13 + 216)),
        mr_issueDataOutputCallbackGuts(a1, 0, DataLength, (uint64_t)Instance, (BOOL *)&v19),
        !(_BYTE)v19))
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v13 + 120), Instance);
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  if (Instance)
    CFRelease(Instance);
  return 0;
}

uint64_t mr_memoryRequestCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v8;
  _QWORD *DerivedStorage;
  uint64_t v10;
  uint64_t BlockBuffer;
  uint64_t v12;
  CFTypeRef v14;

  v14 = 0;
  v8 = mr_copyRequestFromRetainProxy(a1, &v14);
  if (!(_DWORD)v8)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*DerivedStorage);
    if (DerivedStorage[12] || (v10 = FigCopyCommonMemoryPool(), (DerivedStorage[12] = v10) != 0))
    {
      BlockBuffer = FigMemoryPoolCreateBlockBuffer();
      if (!(_DWORD)BlockBuffer)
      {
        v12 = 0;
        *a5 = 0;
        *a6 = 0;
LABEL_6:
        MEMORY[0x19402EF04](*DerivedStorage);
        goto LABEL_7;
      }
    }
    else
    {
      BlockBuffer = FigSignalErrorAt();
    }
    v12 = BlockBuffer;
    goto LABEL_6;
  }
  v12 = v8;
LABEL_7:
  if (v14)
    CFRelease(v14);
  return v12;
}

void mr_httpReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, char a7, int a8)
{
  _QWORD *DerivedStorage;
  uint64_t Empty;
  OpaqueCMBlockBuffer *v15;
  CMBlockBufferRef *v16;
  const __CFAllocator *AllocatorForMedia;
  size_t DataLength;
  CFTypeRef v19;
  CFTypeRef cf;
  CFTypeRef v21;

  cf = 0;
  v21 = 0;
  if (mr_copyRequestFromRetainProxy(a3, &v21))
    goto LABEL_18;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (a8)
  {
    Empty = FigCFHTTPCreateCFErrorFromHTTPStatusCode(a8, (CFErrorRef *)&cf);
    if (!(_DWORD)Empty)
    {
      mr_transitionToFailedState(v21, cf);
      goto LABEL_16;
    }
LABEL_22:
    if ((_DWORD)Empty)
    {
      if (v21)
      {
        v19 = 0;
        FigCreateErrorForOSStatus(Empty, (CFErrorRef *)&v19);
        mr_transitionToFailedState(v21, v19);
        if (v19)
          CFRelease(v19);
      }
    }
    goto LABEL_16;
  }
  if (!a4)
  {
    DataLength = 0;
    if ((a7 & 2) == 0)
      goto LABEL_11;
LABEL_14:
    *((_DWORD *)DerivedStorage + 34) = 3;
    *((_DWORD *)DerivedStorage + 52) = 0;
    if (!DerivedStorage[27])
    {
      Empty = FigSignalErrorAt();
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  v16 = (CMBlockBufferRef *)(DerivedStorage + 27);
  v15 = (OpaqueCMBlockBuffer *)DerivedStorage[27];
  if (!v15)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Empty = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)DerivedStorage + 27);
    if ((_DWORD)Empty)
      goto LABEL_22;
    v15 = *v16;
  }
  DataLength = CMBlockBufferGetDataLength(v15);
  Empty = CMBlockBufferAppendBufferReference(*v16, a4, a5, a6, 0);
  if ((_DWORD)Empty)
    goto LABEL_22;
  if ((a7 & 2) != 0)
    goto LABEL_14;
LABEL_11:
  if (a6)
LABEL_15:
    mr_issueDataOutputCallback(v21, DataLength, a6);
LABEL_16:
  MEMORY[0x19402EF04](*DerivedStorage);
  if (cf)
    CFRelease(cf);
LABEL_18:
  if (v21)
    CFRelease(v21);
}

void mr_transitionToFailedState(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  unsigned int (*v6)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, const void *);
  uint64_t v7;
  const void *v8;
  size_t DataLength;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFArray *v13;
  const void *ValueAtIndex;
  const void *v15;
  NSObject *v16;
  _QWORD *v17;
  BOOL v18;
  malloc_zone_t *MallocZoneForMedia;
  _QWORD *v20;
  _QWORD *v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  int v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  v6 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, const void *))(DerivedStorage + 104);
  if (!v6
    || !v6(*(_QWORD *)(DerivedStorage + 16), *(_QWORD *)(DerivedStorage + 80), *(_QWORD *)(DerivedStorage + 88), *(unsigned __int8 *)(DerivedStorage + 140), *(_QWORD *)(DerivedStorage + 144), *(_QWORD *)(DerivedStorage + 152), a2))
  {
    *(_DWORD *)(v5 + 136) = 4;
    v12 = CMBaseObjectGetDerivedStorage();
    v13 = *(const __CFArray **)(v12 + 120);
    if (!v13)
      return;
    while (1)
    {
      if (CFArrayGetCount(v13) < 1)
        return;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 120), 0);
      v15 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      v17 = (_QWORD *)*((_QWORD *)ValueAtIndex + 3);
      v16 = *((_QWORD *)ValueAtIndex + 4);
      if (v16)
        dispatch_retain(v16);
      if (v17
        && (v16 ? (v18 = *v17 == 0) : (v18 = 1),
            !v18
         && (MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia(),
             (v20 = malloc_type_zone_calloc(MallocZoneForMedia, 1uLL, 0x48uLL, 0x10E00402181BA19uLL)) != 0)))
      {
        v21 = v20;
        v20[3] = v17;
        if (a1)
          v22 = CFRetain(a1);
        else
          v22 = 0;
        *v21 = v22;
        if (v15)
          v23 = CFRetain(v15);
        else
          v23 = 0;
        v21[1] = v23;
        if (a2)
          v24 = CFRetain(a2);
        else
          v24 = 0;
        v21[5] = v24;
        dispatch_async_f(v16, v21, (dispatch_function_t)mr_issueDidFailCallbackOnCallbackQueue);
        v25 = 0;
        if (!v15)
          goto LABEL_29;
      }
      else
      {
        v25 = FigSignalErrorAt();
        if (!v15)
          goto LABEL_29;
      }
      CFRelease(v15);
LABEL_29:
      if (v16)
        dispatch_release(v16);
      if (!v25)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v12 + 120), 0);
        v13 = *(const __CFArray **)(v12 + 120);
        if (v13)
          continue;
      }
      return;
    }
  }
  ++*(_QWORD *)(v5 + 152);
  v7 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v7 + 208) = 0;
  v8 = *(const void **)(v7 + 200);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(v7 + 200) = 0;
  }
  *(_QWORD *)(v7 + 192) = 0;
  *(_DWORD *)(v7 + 136) = 0;
  DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v7 + 216));
  v10 = CMBaseObjectGetDerivedStorage();
  v11 = *(_QWORD *)(v10 + 88);
  if (v11 != 0x1FFFFFFFFFFFFFLL)
    v11 -= DataLength;
  *(_QWORD *)(v10 + 88) = v11;
  mr_start(a1);
}

uint64_t mr_copyRequestFromRetainProxy(uint64_t a1, _QWORD *a2)
{
  const void *Owner;
  uint64_t v4;

  if (a1 && a2 && (FigRetainProxyLockMutex(), !FigRetainProxyIsInvalidated()))
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner)
      Owner = CFRetain(Owner);
    v4 = 0;
    *a2 = Owner;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  FigRetainProxyUnlockMutex();
  return v4;
}

const __CFArray *mr_issueDataOutputCallback(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  CFIndex v7;
  const __CFArray *result;
  const void *ValueAtIndex;
  BOOL v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v10 = 0;
  while (1)
  {
    result = *(const __CFArray **)(DerivedStorage + 120);
    if (result)
      result = (const __CFArray *)CFArrayGetCount(result);
    if (v7 >= (uint64_t)result)
      break;
    v10 = 0;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 120), v7);
    result = (const __CFArray *)mr_issueDataOutputCallbackGuts(a1, a2, a3, (uint64_t)ValueAtIndex, &v10);
    if ((_DWORD)result)
      break;
    if (v10)
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 120), v7--);
    ++v7;
  }
  return result;
}

uint64_t mr_issueDataOutputCallbackGuts(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  uint64_t DerivedStorage;
  const void *v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  BOOL v19;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v21;
  malloc_zone_t *MallocZoneForMedia;
  _QWORD *v23;
  _QWORD *v24;
  CFTypeRef v25;
  CFTypeRef v26;
  void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  uint64_t v31;
  CMBlockBufferRef blockBufferOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  blockBufferOut = 0;
  v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v11 = *(_QWORD **)(a4 + 24);
  v10 = *(NSObject **)(a4 + 32);
  if (v10)
    dispatch_retain(*(dispatch_object_t *)(a4 + 32));
  if (!v11 || !v10 || !*v11)
    goto LABEL_40;
  v13 = *(_QWORD *)(a4 + 40);
  v12 = *(_QWORD *)(a4 + 48);
  v14 = FigCFIntersectionRange();
  v16 = v14;
  v17 = v15;
  v18 = v12 == 0x1FFFFFFFFFFFFFLL ? *(_DWORD *)(DerivedStorage + 136) == 3 : v14 + v15 == v12 + v13;
  v19 = v18;
  if (!(v14 + v15) && !v19)
    goto LABEL_40;
  if (v14 != -(uint64_t)v15)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v21 = CMBlockBufferCreateWithBufferReference(AllocatorForMedia, *(CMBlockBufferRef *)(DerivedStorage + 216), v16, v17, 0, &blockBufferOut);
    if ((_DWORD)v21)
      goto LABEL_41;
  }
  MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia();
  v23 = malloc_type_zone_calloc(MallocZoneForMedia, 1uLL, 0x48uLL, 0x10E00402181BA19uLL);
  if (!v23)
  {
LABEL_40:
    v21 = FigSignalErrorAt();
LABEL_41:
    v31 = v21;
    goto LABEL_33;
  }
  v24 = v23;
  if (a1)
    v25 = CFRetain(a1);
  else
    v25 = 0;
  *v24 = v25;
  if (v9)
    v26 = CFRetain(v9);
  else
    v26 = 0;
  v24[1] = v26;
  v27 = blockBufferOut;
  if (blockBufferOut)
    v27 = (void *)CFRetain(blockBufferOut);
  v24[2] = v27;
  *((_BYTE *)v24 + 32) = v19;
  v28 = *(CFTypeRef *)(DerivedStorage + 200);
  if (v28)
    v28 = CFRetain(v28);
  v24[6] = v28;
  v29 = *(CFTypeRef *)(DerivedStorage + 168);
  if (v29)
    v29 = CFRetain(v29);
  v24[7] = v29;
  v30 = *(CFTypeRef *)(DerivedStorage + 176);
  if (v30)
    v30 = CFRetain(v30);
  v24[8] = v30;
  v24[3] = v11;
  dispatch_async_f(v10, v24, (dispatch_function_t)mr_issueDataOutputCallbackOnCallbackQueue);
  v31 = 0;
  if (a5)
    *a5 = v19;
LABEL_33:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v9)
    CFRelease(v9);
  if (v10)
    dispatch_release(v10);
  return v31;
}

void mr_issueDataOutputCallbackOnCallbackQueue(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  malloc_zone_t *MallocZoneForMedia;

  v2 = **(void (***)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 24);
  if (v2)
    v2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 32));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 56);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 64);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 40);
  if (v8)
    CFRelease(v8);
  MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia();
  malloc_zone_free(MallocZoneForMedia, (void *)a1);
}

void mr_timerEventHandler()
{
  uint64_t v0;
  const void *v1;
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (dword_1EE2A2FC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19402EEEC](*DerivedStorage);
    FigCreateErrorForOSStatus(4294947712, (CFErrorRef *)cf);
    mr_transitionToFailedState(v1, cf[0]);
    MEMORY[0x19402EF04](*DerivedStorage);
    if (cf[0])
      CFRelease(cf[0]);
    CFRelease(v1);
  }
}

void mr_timerFinalizer(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void mr_issueDidFailCallbackOnCallbackQueue(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD);
  const void *v3;
  const void *v4;
  malloc_zone_t *MallocZoneForMedia;

  v2 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1[3] + 8);
  if (v2)
    v2(*a1, a1[1], a1[5]);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v3 = (const void *)a1[1];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia();
  malloc_zone_free(MallocZoneForMedia, a1);
}

void mr_customURLReadCallback(uint64_t a1, uint64_t a2, const void *a3, OpaqueCMBlockBuffer *a4, char a5, uint64_t a6, const void *a7)
{
  CMBlockBufferRef *DerivedStorage;
  int HTTPStatusCode;
  OpaqueCMBlockBuffer *v13;
  OpaqueCMBlockBuffer **v14;
  const __CFAllocator *AllocatorForMedia;
  size_t DataLength;
  int64_t v17;
  OpaqueCMBlockBuffer *v18;
  size_t v19;
  OpaqueCMBlockBuffer *v20;
  OpaqueCMBlockBuffer *v21;
  CFTypeRef v22;

  v22 = 0;
  if (!mr_copyRequestFromRetainProxy(a1, &v22))
  {
    DerivedStorage = (CMBlockBufferRef *)CMBaseObjectGetDerivedStorage();
    if (!FigCustomURLResponseInfoCopyRequestInfo() && (a4 || (a5 & 1) != 0))
    {
      HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
      if (!HTTPStatusCode || HTTPStatusCode == -17360)
      {
        MEMORY[0x19402EEEC](*DerivedStorage);
        if (a4)
        {
          v14 = DerivedStorage + 27;
          v13 = DerivedStorage[27];
          if (!v13)
          {
            AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            if (CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, DerivedStorage + 27))
              goto LABEL_29;
            v13 = *v14;
          }
          DataLength = CMBlockBufferGetDataLength(v13);
          v17 = CMBlockBufferGetDataLength(a4);
          v18 = *v14;
          v19 = CMBlockBufferGetDataLength(a4);
          if (CMBlockBufferAppendBufferReference(v18, a4, 0, v19, 0))
            goto LABEL_29;
          if ((a5 & 1) == 0)
            goto LABEL_16;
        }
        else
        {
          DataLength = 0;
          v17 = 0;
          if ((a5 & 1) == 0)
          {
LABEL_16:
            if (!DerivedStorage[21])
            {
              if (a3)
                v20 = (OpaqueCMBlockBuffer *)CFRetain(a3);
              else
                v20 = 0;
              DerivedStorage[21] = v20;
            }
            if (!DerivedStorage[22])
            {
              if (a7)
                v21 = (OpaqueCMBlockBuffer *)CFRetain(a7);
              else
                v21 = 0;
              DerivedStorage[22] = v21;
            }
            if ((a5 & 1) != 0 || v17 >= 1)
              mr_issueDataOutputCallback(v22, DataLength, v17);
            goto LABEL_29;
          }
        }
        *((_DWORD *)DerivedStorage + 34) = 3;
        DerivedStorage[24] = 0;
        if (DerivedStorage[27])
          goto LABEL_16;
        FigSignalErrorAt();
LABEL_29:
        MEMORY[0x19402EF04](*DerivedStorage);
      }
    }
  }
  if (v22)
    CFRelease(v22);
}

void mr_outputCallbackDataFinalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 32);
  if (v3)
    dispatch_release(v3);
}

uint64_t mrutil_registerClass(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t RegisterFigMediaRequestSource()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef mr_copyFormattingDesc(uint64_t a1)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigMediaRequest %p %@ range: %ld/%ld]"), a1, DerivedStorage[2], DerivedStorage[11], DerivedStorage[10]);
}

uint64_t mrdowc_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  v2 = (const void *)DerivedStorage[2];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[2] = 0;
  }
  v3 = (const void *)DerivedStorage[1];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[1] = 0;
  }
  v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  v5 = (const void *)DerivedStorage[7];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[7] = 0;
  }
  v6 = (const void *)DerivedStorage[6];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[6] = 0;
  }
  v7 = DerivedStorage[9];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[9] = 0;
  }
  return FigSimpleMutexDestroy();
}

CFStringRef mrdowc_copyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigMediaRequestDeliverOnceWithCache %p %@]"), a1, *(_QWORD *)(DerivedStorage + 8));
}

uint64_t mrdowc_start(uint64_t a1)
{
  _QWORD *DerivedStorage;
  void (**v3)(_QWORD);
  void (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t (**)(), uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[2])
  {
    v3 = (void (**)(_QWORD))DerivedStorage[5];
    if (v3)
    {
      v4 = *v3;
      if (v4)
        v4(DerivedStorage[1]);
    }
  }
  v5 = DerivedStorage[3];
  v6 = DerivedStorage[9];
  v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t (**)(), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v7)
    goto LABEL_10;
  v8 = v7(v5, 0, 0x1FFFFFFFFFFFFFLL, a1, mrdowc_start_outputCallbacks, v6);
  if (!(_DWORD)v8)
  {
    v9 = DerivedStorage[3];
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v10)
    {
      v8 = v10(v9);
      goto LABEL_9;
    }
LABEL_10:
    v11 = 4294954514;
    goto LABEL_11;
  }
LABEL_9:
  v11 = v8;
LABEL_11:
  MEMORY[0x19402EF04](*DerivedStorage);
  return v11;
}

void mrdowc_didProduceDataOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  _QWORD *DerivedStorage;
  OpaqueCMBlockBuffer *v14;
  size_t DataLength;
  CFTypeRef v16;
  uint64_t AllocatorForMedia;
  void (*v18)(uint64_t, __CFString *, uint64_t, CFHTTPMessageRef *);
  uint64_t v19;
  void (*v20)(_QWORD);
  uint64_t v21;
  const void *v22;
  void (**v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  CFDictionaryRef cf;
  CFHTTPMessageRef message;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  message = 0;
  MEMORY[0x19402EEEC](*DerivedStorage);
  v14 = (OpaqueCMBlockBuffer *)DerivedStorage[4];
  if (!v14)
  {
    if (a6)
      v16 = CFRetain(a6);
    else
      v16 = 0;
    DerivedStorage[4] = v16;
    if (!(_DWORD)a7)
      goto LABEL_20;
    goto LABEL_10;
  }
  if (a6)
  {
    DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)a6);
    CMBlockBufferAppendBufferReference(v14, (CMBlockBufferRef)a6, 0, DataLength, 0);
  }
  if ((_DWORD)a7)
  {
LABEL_10:
    if (a3)
    {
      AllocatorForMedia = FigGetAllocatorForMedia();
      v18 = *(void (**)(uint64_t, __CFString *, uint64_t, CFHTTPMessageRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v18)
      {
        v18(a3, CFSTR("FHRP_HTTPResponseHeaders"), AllocatorForMedia, &message);
        if (message)
          cf = CFHTTPMessageCopyAllHeaderFields(message);
      }
    }
    else if (a4)
    {
      FigCustomURLResponseInfoCopyHTTPHeaders();
    }
    if (DerivedStorage[2])
    {
      v19 = DerivedStorage[5];
      if (v19)
      {
        v20 = *(void (**)(_QWORD))(v19 + 8);
        if (v20)
          v20(DerivedStorage[1]);
      }
    }
  }
LABEL_20:
  MEMORY[0x19402EF04](*DerivedStorage);
  v21 = FigCFWeakReferenceHolderCopyReferencedObject();
  v22 = (const void *)v21;
  if ((_DWORD)a7)
  {
    if (v21)
    {
      v23 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))DerivedStorage[8];
      if (v23)
      {
        v24 = *v23;
        if (v24)
          v24(a2, v21, a3, a4, a5, DerivedStorage[4], a7);
      }
    }
  }
  if (message)
    CFRelease(message);
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
}

void mrdowc_didFail(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  uint64_t v7;
  void (*v8)(uint64_t, const void *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = *(_QWORD *)(DerivedStorage + 64);
  if (v7)
  {
    v8 = *(void (**)(uint64_t, const void *, uint64_t))(v7 + 8);
    if (v8)
      v8(a2, v6, a3);
  }
  if (v6)
    CFRelease(v6);
}

uint64_t FigStreamingAssetDownloaderCreateWithURL(const __CFAllocator *a1, uint64_t a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  CFTypeRef cf;

  cf = 0;
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v11 = Mutable;
          CFDictionarySetValue(Mutable, CFSTR("assetOption_DownloadDestinationURL"), a3);
          v12 = FigAssetCreateWithURL((uint64_t)a1, a2, 0, v11, &cf);
          v13 = cf;
          if ((_DWORD)v12)
          {
            v14 = v12;
            if (!cf)
              return v14;
          }
          else
          {
            v14 = FigStreamingAssetDownloaderCreateWithAsset(a1, cf, a3, a4, a5);
            v13 = cf;
            if (!cf)
              return v14;
          }
          CFRelease(v13);
          return v14;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingAssetDownloaderCreateWithAsset(const void *a1, const void *a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t TypeID;
  CFTypeID v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, const void *, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, const __CFString *, const void *, CFTypeRef *);
  const void *URLValue;
  const void *v18;
  BOOL v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  CFTypeID v23;
  uint64_t DerivedStorage;
  __int128 v25;
  const void *Value;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  const void *v41;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v43;
  unsigned int v44;
  const void *v46;
  const void *v47;
  const void *v48;
  CFTypeRef v49;
  CFTypeRef v50;
  CMTime duration;
  CFTypeRef v52;
  CFTypeRef v53;
  CFTypeRef cf;
  CFTypeRef v55;
  CFTypeRef v56;
  CMTime start;
  const void *v58;
  __int16 v59;
  const void *v60;
  __int16 v61;
  const void *v62;
  __int16 v63;
  const void *v64;
  __int16 v65;
  const void *v66;
  CMTimeRange v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  v56 = 0;
  v53 = 0;
  cf = 0;
  v52 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2)
    goto LABEL_88;
  TypeID = FigAssetGetTypeID();
  if (TypeID != CFGetTypeID(a2))
    goto LABEL_88;
  if (a4)
  {
    v11 = CFDictionaryGetTypeID();
    if (v11 != CFGetTypeID(a4))
      goto LABEL_88;
  }
  if (!a5)
    goto LABEL_88;
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
  if (!v13)
    goto LABEL_16;
  v14 = v13(CMBaseObject, CFSTR("assetProperty_AssetType"), a1, &v56);
  if ((_DWORD)v14)
  {
LABEL_90:
    v20 = v14;
    goto LABEL_17;
  }
  if (!FigCFEqual())
  {
    v20 = 4294950644;
LABEL_17:
    v21 = v53;
    if (!v53)
      goto LABEL_81;
LABEL_80:
    CFRelease(v21);
    goto LABEL_81;
  }
  v15 = FigAssetGetCMBaseObject(a2);
  v16 = *(uint64_t (**)(uint64_t, const __CFString *, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
  if (!v16)
  {
LABEL_16:
    v20 = 4294954514;
    goto LABEL_17;
  }
  v14 = v16(v15, CFSTR("assetProperty_CreationOptionsDictionary"), a1, &v55);
  if ((_DWORD)v14)
    goto LABEL_90;
  if (!v55)
  {
    v19 = 0;
    v18 = 0;
    goto LABEL_20;
  }
  URLValue = (const void *)FigCFDictionaryGetURLValue();
  v18 = URLValue;
  v19 = URLValue != 0;
  if (!a3 || !URLValue)
  {
LABEL_20:
    if (a3)
      v22 = a3;
    else
      v22 = v18;
    if (a3)
    {
      a3 = v22;
      goto LABEL_27;
    }
    a3 = v22;
    if (v19)
      goto LABEL_27;
LABEL_88:
    v20 = FigSignalErrorAt();
    if (!(_DWORD)v20)
      goto LABEL_81;
    goto LABEL_17;
  }
  if (!CFEqual(a3, URLValue))
    goto LABEL_88;
LABEL_27:
  v23 = CFURLGetTypeID();
  if (v23 != CFGetTypeID(a3))
    goto LABEL_88;
  v14 = FigCFURLCreateWithSuffixedExtension();
  if ((_DWORD)v14)
    goto LABEL_90;
  FigAssetDownloaderGetClassID();
  v14 = CMDerivedObjectCreate();
  if ((_DWORD)v14)
    goto LABEL_90;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 125) = 1;
  *(_BYTE *)(DerivedStorage + 361) = 1;
  start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  CMTimeRangeMake(&v67, &start, &duration);
  v25 = *(_OWORD *)&v67.start.epoch;
  *(_OWORD *)(DerivedStorage + 128) = *(_OWORD *)&v67.start.value;
  *(_OWORD *)(DerivedStorage + 144) = v25;
  *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)&v67.duration.timescale;
  if (a4)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_MediaSelectionCriteria"));
    v27 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_ClientBundleIdentifier"));
    v46 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_DebugIdentifier"));
    v49 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_AssetName"));
    v50 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_AssetImage"));
    v47 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_PlaylistCache"));
    v48 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_NetworkHistory"));
    v28 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v28 == CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_DeleteDownloadWhenAssetFinalizes")))*(_BYTE *)(DerivedStorage + 122) = 1;
    if (v28 == CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_LinkAssetURLToDestinationURL")))*(_BYTE *)(DerivedStorage + 123) = 1;
    if (v28 == CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_StoreCryptKeys")))
      *(_BYTE *)(DerivedStorage + 124) = 1;
    if (FigCFDictionaryGetInt64IfPresent())
      *(_BYTE *)(DerivedStorage + 120) = 1;
    if (FigCFDictionaryGetCGSizeIfPresent())
      *(_BYTE *)(DerivedStorage + 121) = 1;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    v29 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("AssetDownloaderCreateOption_SelectedAlternate"));
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetValueIfPresent();
    FigCFDictionaryGetCMTimeRangeIfPresent();
    v30 = v46;
    if (a1)
      goto LABEL_42;
  }
  else
  {
    v27 = 0;
    v30 = 0;
    Value = 0;
    v49 = 0;
    v50 = 0;
    v29 = 0;
    v47 = 0;
    v48 = 0;
    if (a1)
    {
LABEL_42:
      v31 = CFRetain(a1);
      goto LABEL_45;
    }
  }
  v31 = 0;
LABEL_45:
  *(_QWORD *)(DerivedStorage + 8) = v31;
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 72) = CFRetain(cf);
  if (Value)
    v32 = CFRetain(Value);
  else
    v32 = 0;
  *(_QWORD *)(DerivedStorage + 280) = v32;
  if (v27)
    v33 = CFRetain(v27);
  else
    v33 = 0;
  *(_QWORD *)(DerivedStorage + 264) = v33;
  if (v30)
    v34 = CFRetain(v30);
  else
    v34 = 0;
  *(_QWORD *)(DerivedStorage + 272) = v34;
  v35 = v49;
  if (v49)
    v35 = CFRetain(v49);
  *(_QWORD *)(DerivedStorage + 312) = v35;
  v36 = v50;
  if (v50)
    v36 = CFRetain(v50);
  *(_QWORD *)(DerivedStorage + 328) = v36;
  if (v47)
    v37 = CFRetain(v47);
  else
    v37 = 0;
  *(_QWORD *)(DerivedStorage + 56) = v37;
  *(_QWORD *)DerivedStorage = dispatch_queue_create("com.apple.coremedia.streamingAssetDownloader.state", 0);
  *(_QWORD *)(DerivedStorage + 448) = dispatch_queue_create("com.apple.coremedia.streamingAssetDownloader.notification", 0);
  if (v29)
    v38 = CFRetain(v29);
  else
    v38 = 0;
  *(_QWORD *)(DerivedStorage + 304) = v38;
  if (v48)
    v39 = CFRetain(v48);
  else
    v39 = 0;
  *(_QWORD *)(DerivedStorage + 368) = v39;
  v40 = v52;
  if (v52)
    v40 = CFRetain(v52);
  v41 = v30;
  *(_QWORD *)(DerivedStorage + 384) = v40;
  if (*(_BYTE *)(DerivedStorage + 360))
    *(_QWORD *)(DerivedStorage + 184) = -1;
  v14 = FigRetainProxyCreate();
  if ((_DWORD)v14)
    goto LABEL_90;
  v21 = (const void *)FigCFCopyCompactDescription();
  if (dword_1EE2A2FE0)
  {
    LODWORD(duration.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v43 = duration.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v44 = v43;
    else
      v44 = v43 & 0xFFFFFFFE;
    if (v44)
    {
      LODWORD(start.value) = 136316674;
      *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"FigStreamingAssetDownloaderCreateWithAsset";
      LOWORD(start.flags) = 2048;
      *(_QWORD *)((char *)&start.flags + 2) = DerivedStorage;
      HIWORD(start.epoch) = 2114;
      v58 = v41;
      v59 = 2048;
      v60 = a2;
      v61 = 2112;
      v62 = a2;
      v63 = 2112;
      v64 = v21;
      v65 = 2112;
      v66 = a3;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v20 = 0;
  *a5 = v53;
  if (v21)
    goto LABEL_80;
LABEL_81:
  if (v56)
    CFRelease(v56);
  if (cf)
    CFRelease(cf);
  if (v55)
    CFRelease(v55);
  return v20;
}

uint64_t sad_invalidate(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_invalidateDispatch);
  return v5;
}

void sad_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  sad_invalidateGuts(a1);
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

CFStringRef sad_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigStreamingAssetDownloader %p asset %@ destinationURL %@]"), a1, *(_QWORD *)(DerivedStorage + 16), *(_QWORD *)(DerivedStorage + 72));
}

uint64_t sad_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t result;
  _QWORD context[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v10 = 0;
  v11 = 0;
  v12 = 0;
  context[0] = a1;
  context[1] = a2;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)sad_copyPropertyDispatch);
  result = v12;
  if (!(_DWORD)v12)
    *a4 = v10;
  return result;
}

uint64_t sad_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[4];
  uint64_t v9;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[3] = 0;
  v9 = 0;
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)sad_setPropertyDispatch);
  return v9;
}

void sad_invalidateDispatch(uint64_t a1)
{
  sad_invalidateGuts(*(_QWORD *)a1);
  *(_DWORD *)(a1 + 8) = 0;
}

void sad_invalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  NSObject *v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 64))
  {
    v3 = (_QWORD *)DerivedStorage;
    *(_BYTE *)(DerivedStorage + 64) = 1;
    FigRetainProxyInvalidate();
    sad_invalidateAndReleasePump(a1, 1);
    sad_cleanupStreamingCacheFlush();
    v4 = (const void *)v3[36];
    if (v4)
    {
      CFRelease(v4);
      v3[36] = 0;
    }
    v5 = (const void *)v3[35];
    if (v5)
    {
      CFRelease(v5);
      v3[35] = 0;
    }
    v6 = (const void *)v3[37];
    if (v6)
    {
      CFRelease(v6);
      v3[37] = 0;
    }
    v7 = (const void *)v3[33];
    if (v7)
    {
      CFRelease(v7);
      v3[33] = 0;
    }
    v8 = (const void *)v3[34];
    if (v8)
    {
      CFRelease(v8);
      v3[34] = 0;
    }
    v9 = (const void *)v3[38];
    if (v9)
    {
      CFRelease(v9);
      v3[38] = 0;
    }
    v10 = (const void *)v3[39];
    if (v10)
    {
      CFRelease(v10);
      v3[39] = 0;
    }
    v11 = (const void *)v3[41];
    if (v11)
    {
      CFRelease(v11);
      v3[41] = 0;
    }
    v12 = (const void *)v3[7];
    if (v12)
    {
      CFRelease(v12);
      v3[7] = 0;
    }
    v13 = (const void *)v3[40];
    if (v13)
    {
      CFRelease(v13);
      v3[40] = 0;
    }
    v14 = (const void *)v3[2];
    if (v14)
    {
      CFRelease(v14);
      v3[2] = 0;
    }
    v15 = (const void *)v3[9];
    if (v15)
    {
      CFRelease(v15);
      v3[9] = 0;
    }
    v16 = (const void *)v3[52];
    if (v16)
    {
      CFRelease(v16);
      v3[52] = 0;
    }
    v17 = (const void *)v3[51];
    if (v17)
    {
      CFRelease(v17);
      v3[51] = 0;
    }
    v18 = (const void *)v3[1];
    if (v18)
    {
      CFRelease(v18);
      v3[1] = 0;
    }
    v19 = (const void *)v3[50];
    if (v19)
    {
      CFRelease(v19);
      v3[50] = 0;
    }
    v20 = (const void *)v3[49];
    if (v20)
    {
      CFRelease(v20);
      v3[49] = 0;
    }
    v21 = (const void *)v3[46];
    if (v21)
    {
      CFRelease(v21);
      v3[46] = 0;
    }
    v22 = (const void *)v3[47];
    if (v22)
    {
      CFRelease(v22);
      v3[47] = 0;
    }
    v23 = (const void *)v3[48];
    if (v23)
    {
      CFRelease(v23);
      v3[48] = 0;
    }
    v24 = (const void *)v3[57];
    if (v24)
    {
      CFRelease(v24);
      v3[57] = 0;
    }
    v25 = v3[56];
    if (v25)
    {
      dispatch_release(v25);
      v3[56] = 0;
    }
  }
}

void sad_invalidateAndReleasePump(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((!a2 || !sad_relinquishAccessToDestinationURL(a1, 0)) && *(_QWORD *)(DerivedStorage + 32))
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      if (FigNotificationCenterRemoveWeakListener())
        goto LABEL_10;
    }
    else if (FigSignalErrorAt())
    {
      goto LABEL_10;
    }
    FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    if (v5)
    {
      v6 = v5;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v7)
        v7(v6);
    }
    *(_BYTE *)(DerivedStorage + 180) = 0;
  }
LABEL_10:
  v8 = *(const void **)(DerivedStorage + 32);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 40);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
}

uint64_t sad_cleanupStreamingCacheFlush()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 440))
    return 0;
  *(_QWORD *)(DerivedStorage + 440) = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t sad_relinquishAccessToDestinationURL(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, __CFString *, _QWORD);
  uint64_t v14;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 184))
    return 0;
  v4 = DerivedStorage;
  v5 = *(_QWORD *)(DerivedStorage + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8);
    FigBytePumpGetFigBaseObject(v5);
    v8 = v7;
    v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v9)
      v9(v8, CFSTR("FBP_SegmentCache"), v6, &cf);
    if (a2)
    {
      v10 = sad_ensureTemporaryMetadataOnlyPumpCache(v4);
      if ((_DWORD)v10)
        goto LABEL_21;
    }
    else
    {
      FigBytePumpGetFigBaseObject(*(_QWORD *)(v4 + 32));
      v12 = v11;
      v13 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v13)
      {
        v14 = 4294954514;
        goto LABEL_16;
      }
      v10 = v13(v12, CFSTR("FBP_SegmentCache"), 0);
      if ((_DWORD)v10)
        goto LABEL_21;
    }
    if (cf)
    {
      v10 = FigStreamingCacheInvalidate((uint64_t)cf);
      if ((_DWORD)v10)
        goto LABEL_21;
    }
  }
  if (*(_BYTE *)(v4 + 360))
  {
LABEL_15:
    v14 = 0;
    *(_BYTE *)(v4 + 180) = 0;
    goto LABEL_16;
  }
  v10 = FigAssetDownloadCoordinatorRelinquishAccessToURL(*(void **)(v4 + 184));
  if (!(_DWORD)v10)
  {
    *(_QWORD *)(v4 + 184) = 0;
    goto LABEL_15;
  }
LABEL_21:
  v14 = v10;
LABEL_16:
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t sad_ensureTemporaryMetadataOnlyPumpCache(uint64_t a1)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v3;
  uint64_t v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __CFString *, CFTypeRef);
  uint64_t v12;
  CFTypeRef v14;
  CFTypeRef cf;

  v14 = 0;
  cf = 0;
  if (!*(_QWORD *)(a1 + 32))
  {
    v12 = FigSignalErrorAt();
    v3 = 0;
    goto LABEL_10;
  }
  Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  if (!Mutable)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_19;
  }
  CFDictionarySetValue(Mutable, CFSTR("FSC_Backing"), CFSTR("FSC_MemoryBacking"));
  v4 = *(_QWORD *)(a1 + 8);
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(a1 + 16));
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v6)
  {
LABEL_9:
    v12 = 4294954514;
    goto LABEL_10;
  }
  v7 = v6(CMBaseObject, CFSTR("assetProperty_OriginalNetworkContentURL"), v4, &cf);
  if ((_DWORD)v7
    || (v7 = FigStreamingCacheCreate(*(const __CFAllocator **)(a1 + 8), (const __CFURL *)cf, v3, (uint64_t *)&v14),
        (_DWORD)v7))
  {
LABEL_19:
    v12 = v7;
    goto LABEL_10;
  }
  v8 = v14;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(a1 + 32));
  v10 = v9;
  v11 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v11)
    goto LABEL_9;
  v12 = v11(v10, CFSTR("FBP_SegmentCache"), v8);
  if (!(_DWORD)v12)
    *(_BYTE *)(a1 + 180) = 0;
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  if (v14)
    CFRelease(v14);
  return v12;
}

void sad_durationChangedNote(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 64))
  {
    v9 = FigSignalErrorAt();
  }
  else
  {
    if (!*(_QWORD *)(DerivedStorage + 32))
      goto LABEL_10;
    v4 = *(_QWORD *)(DerivedStorage + 8);
    FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v6 = v5;
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (!v7)
    {
      v10 = 4294954514;
      goto LABEL_9;
    }
    v8 = v7(v6, CFSTR("FBP_Duration"), v4, &cf);
    if ((_DWORD)v8)
    {
      v10 = v8;
      goto LABEL_9;
    }
    v9 = sad_durationChanged(a2, cf);
  }
  v10 = v9;
  if ((_DWORD)v9)
LABEL_9:
    sad_cleanupDownloadWithOSStatus((uint64_t)a2, v10);
LABEL_10:
  if (cf)
    CFRelease(cf);
}

uint64_t sad_durationChanged(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void (*v8)(uint64_t, const __CFString *, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __CFString *, _QWORD);
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 92) > 2u)
    return 0;
  *(_DWORD *)(DerivedStorage + 92) = 3;
  result = sad_ensureDuration((uint64_t)a1, a2);
  if (!(_DWORD)result)
  {
    if ((*(_DWORD *)(v5 + 348) & 0x1D) == 1)
    {
      v7 = *(_QWORD *)(v5 + 16);
      v8 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v8)
        v8(v7, CFSTR("Duration"), 0);
      FigBytePumpGetFigBaseObject(*(_QWORD *)(v5 + 32));
      v10 = v9;
      v11 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v11)
        return 4294954514;
      result = v11(v10, CFSTR("FBP_PrefetchKeys"), *MEMORY[0x1E0C9AE50]);
      if (!(_DWORD)result)
      {
        *(_BYTE *)(v5 + 178) = 1;
        v12 = *(_DWORD *)(v5 + 24);
        if (v12)
        {
          if (v12 == 1)
            return sad_openPumpOrScheduleIt(a1);
          return 0;
        }
        return sad_relinquishAccessToDestinationURL((uint64_t)a1, 1);
      }
      return result;
    }
    return FigSignalErrorAt();
  }
  return result;
}

void sad_cleanupDownloadWithOSStatus(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf;

  cf = 0;
  FigCreateErrorForOSStatus(a2, (CFErrorRef *)&cf);
  sad_cleanupDownload(a1, cf);
  if (cf)
    CFRelease(cf);
}

uint64_t sad_ensureDuration(uint64_t a1, const void *a2)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, const void **);
  uint64_t v11;
  CMTime v13;
  const void *v14;

  v2 = a2;
  v14 = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (v2)
  {
    CFRetain(v2);
    if ((*(_BYTE *)(v4 + 348) & 1) != 0)
    {
      v5 = 0;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if ((*(_BYTE *)(DerivedStorage + 348) & 1) != 0)
  {
    v5 = 0;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(DerivedStorage + 32);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    FigBytePumpGetFigBaseObject(v6);
    v9 = v8;
    v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (!v10)
      return 4294954514;
    v11 = v10(v9, CFSTR("FBP_Duration"), v7, &v14);
    v2 = v14;
    if (!(_DWORD)v11)
    {
LABEL_8:
      CMTimeMakeFromDictionary(&v13, (CFDictionaryRef)v2);
      v5 = 0;
      *(_OWORD *)(v4 + 336) = *(_OWORD *)&v13.value;
      v2 = v14;
      *(_QWORD *)(v4 + 352) = v13.epoch;
      goto LABEL_9;
    }
    v5 = v11;
LABEL_9:
    if (!v2)
      return v5;
LABEL_10:
    CFRelease(v2);
    return v5;
  }
  return FigSignalErrorAt();
}

uint64_t sad_openPumpOrScheduleIt(const void *a1)
{
  uint64_t DerivedStorage;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184))
    return sad_registerAssetForDownloadAndOpenPump((uint64_t)a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 92) > 3u)
    return 0;
  *(_DWORD *)(DerivedStorage + 92) = 4;
  if (*(_QWORD *)(DerivedStorage + 184))
    return FigSignalErrorAt();
  else
    return FigAssetDownloadCoordinatorScheduleAccessToURL(a1, *(const void **)(DerivedStorage + 72), *(NSObject **)DerivedStorage, 0, (uint64_t)sad_openPumpSchedulerCallback);
}

uint64_t sad_registerAssetForDownloadAndOpenPump(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t IsAudioOnly;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, __CFString *, _QWORD);
  uint64_t v18;
  __int128 v19;
  uint64_t (*v20)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD);
  const void *v21;
  CFTypeRef v22;
  void *v23;
  NSObject *global_queue;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 24) != 1)
    return FigSignalErrorAt();
  v3 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 184))
    return FigSignalErrorAt();
  v4 = CMBaseObjectGetDerivedStorage();
  LOBYTE(v28) = 0;
  if (!*(_BYTE *)(v4 + 177))
  {
    v5 = v4;
    if (!*(_BYTE *)(v4 + 360))
    {
      result = FigAssetDownloadCoordinatorRegisterAssetForDownloader(*(_QWORD *)(v4 + 16), a1, *(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 264), *(_BYTE *)(v4 + 122) != 0, &v28);
      if ((_DWORD)result)
        return result;
      *(_BYTE *)(v5 + 176) = v28;
      *(_BYTE *)(v5 + 177) = 1;
    }
  }
  if (*(_BYTE *)(v3 + 176))
    return 0;
  result = (uint64_t)sad_ensureExtendedAttributesSetOnDestinationURL(v3);
  if ((_DWORD)result)
    return result;
  v7 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v7 + 24) != 1)
    return FigSignalErrorAt();
  v8 = v7;
  v9 = *(_DWORD *)(v7 + 92);
  if (v9 <= 2)
    return FigSignalErrorAt();
  if (v9 > 4)
    return 0;
  *(_DWORD *)(v7 + 92) = 5;
  result = sad_ensurePersistentPumpCacheConfiguredForDownload(v7);
  if ((_DWORD)result)
    return result;
  v10 = *(_QWORD *)(v8 + 304);
  if (v10)
  {
    v11 = *(_QWORD *)(v8 + 32);
    v12 = *(_QWORD *)(v8 + 296);
    IsAudioOnly = FigAlternateIsAudioOnly(*(_QWORD *)(v8 + 304));
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v14)
      return 4294954514;
    v28 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)&v29 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v25 = v28;
    *(_QWORD *)&v26 = v29;
    result = v14(v11, v10, v12, 0, IsAudioOnly, 17, &v28, &v25, 0, v8 + 192, 0, v8 + 80);
    if ((_DWORD)result)
      return result;
  }
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v8 + 32));
  v16 = v15;
  v17 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v17)
    return 4294954514;
  result = v17(v16, CFSTR("FBP_PersistCurrentAlternate"), *MEMORY[0x1E0C9AE50]);
  if ((_DWORD)result)
    return result;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  if (!*(_DWORD *)(v8 + 192))
    return sad_bytePumpReachedEnd(a1, *(const void **)(v8 + 392));
  v18 = *(_QWORD *)(v8 + 32);
  v19 = *(_OWORD *)(v8 + 144);
  v25 = *(_OWORD *)(v8 + 128);
  v26 = v19;
  v27 = *(_OWORD *)(v8 + 160);
  v20 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 72);
  if (!v20)
    return 4294954514;
  v28 = v25;
  v29 = v26;
  v30 = v27;
  result = v20(v18, &v28, 0, 0, 0, v8 + 80, 0);
  if ((_DWORD)result)
    return result;
  v21 = *(const void **)(v8 + 32);
  if (v21)
  {
    v22 = CFRetain(v21);
    if (v22)
    {
      v23 = (void *)v22;
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async_f(global_queue, v23, (dispatch_function_t)sad_ticklePumpChapterDataLoadDispatch);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

const void *sad_ensureExtendedAttributesSetOnDestinationURL(uint64_t a1)
{
  uint64_t v2;
  const void *result;
  const void *v4;
  const __CFData *v5;
  const void *v6;
  const void *v7;

  v2 = *(_QWORD *)(a1 + 312);
  if (v2)
  {
    result = (const void *)FigSetNameForAssetAtURL(*(const __CFURL **)(a1 + 72), v2);
    if ((_DWORD)result)
      return result;
    v4 = *(const void **)(a1 + 312);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 312) = 0;
    }
  }
  v5 = *(const __CFData **)(a1 + 328);
  if (v5)
  {
    result = (const void *)FigSetImageDataForAssetAtURL(*(const __CFURL **)(a1 + 72), v5);
    if ((_DWORD)result)
      return result;
    v6 = *(const void **)(a1 + 328);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 328) = 0;
    }
  }
  if (!*(_BYTE *)(a1 + 361))
    return 0;
  v7 = *(const void **)(a1 + 264);
  if (!v7 || !*(_QWORD *)(a1 + 320))
    return 0;
  FigAssetDownloadStorageManagementSetContentTypeForAssetAtURL(*(const __CFURL **)(a1 + 72), v7, CFSTR("CacheManagementContentType_DownloadedAsset"));
  FigAssetDownloadStorageManagementSetDownloadStartDateForAssetAtURL(*(const __CFURL **)(a1 + 72), *(const void **)(a1 + 264), *(_QWORD *)(a1 + 320));
  result = *(const void **)(a1 + 320);
  if (result)
  {
    CFRelease(result);
    result = 0;
    *(_QWORD *)(a1 + 320) = 0;
  }
  return result;
}

uint64_t sad_ensurePersistentPumpCacheConfiguredForDownload(uint64_t a1)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __CFString *, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t HardLink;
  uint64_t v16;
  uint64_t v17;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, __CFString *, CFTypeRef);
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef cf;

  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 184))
  {
    v16 = FigSignalErrorAt();
LABEL_38:
    v3 = 0;
    goto LABEL_41;
  }
  if (*(_BYTE *)(a1 + 180))
  {
    v16 = 0;
    goto LABEL_38;
  }
  Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  if (!Mutable)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_40;
  }
  CFDictionarySetValue(Mutable, CFSTR("FSC_DownloadDestinationURL"), *(const void **)(a1 + 72));
  FigBytePumpGetFigBaseObject(*(_QWORD *)(a1 + 32));
  v5 = v4;
  v6 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (!v6)
    goto LABEL_35;
  v7 = v6(v5, CFSTR("FBP_SegmentCache"), *MEMORY[0x1E0C9AE00], &v25);
  if ((_DWORD)v7)
    v8 = (_DWORD)v7 == -12783;
  else
    v8 = 1;
  if (!v8)
    goto LABEL_40;
  if (v25)
  {
    v7 = FigStreamingCacheCopyProperty((uint64_t)v25, CFSTR("FSC_DownloadDestinationURL"), *(_QWORD *)(a1 + 8), &v27);
    if ((_DWORD)v7)
      goto LABEL_40;
    if (FigCFEqual())
    {
      FigBytePumpGetFigBaseObject(*(_QWORD *)(a1 + 32));
      v10 = v9;
      v11 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v11)
        goto LABEL_35;
      v7 = v11(v10, CFSTR("FBP_SegmentCache"), 0);
      if ((_DWORD)v7)
        goto LABEL_40;
      FigStreamingCacheInvalidate((uint64_t)v25);
    }
  }
  if (!*(_BYTE *)(a1 + 123))
  {
LABEL_28:
    v17 = *(_QWORD *)(a1 + 8);
    CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(a1 + 16));
    v19 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v19)
    {
      v7 = v19(CMBaseObject, CFSTR("assetProperty_OriginalNetworkContentURL"), v17, &v28);
      if ((_DWORD)v7)
        goto LABEL_40;
      v7 = FigStreamingCacheCreate(*(const __CFAllocator **)(a1 + 8), (const __CFURL *)v28, v3, (uint64_t *)&v26);
      if ((_DWORD)v7)
        goto LABEL_40;
      v20 = v26;
      FigBytePumpGetFigBaseObject(*(_QWORD *)(a1 + 32));
      v22 = v21;
      v23 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v23)
      {
        v7 = v23(v22, CFSTR("FBP_SegmentCache"), v20);
        if (!(_DWORD)v7)
        {
          v16 = (uint64_t)sad_ensureExtendedAttributesSetOnDestinationURL(a1);
          if (!(_DWORD)v16)
            *(_BYTE *)(a1 + 180) = 1;
          goto LABEL_41;
        }
LABEL_40:
        v16 = v7;
        goto LABEL_41;
      }
    }
LABEL_35:
    v16 = 4294954514;
    goto LABEL_41;
  }
  cf = 0;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = FigAssetGetCMBaseObject(*(_QWORD *)(a1 + 16));
  v14 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v14)
  {
    HardLink = v14(v13, CFSTR("assetProperty_CreationURL"), v12, &cf);
    if ((_DWORD)HardLink)
    {
LABEL_23:
      v16 = HardLink;
      goto LABEL_25;
    }
    if (!FigCFURLIsLocalResource())
    {
      HardLink = FigSignalErrorAt();
      goto LABEL_23;
    }
    if (!FigFileDoesFileExist())
    {
      HardLink = FigFoundationCreateHardLink();
      goto LABEL_23;
    }
    v16 = 0;
  }
  else
  {
    v16 = 4294954514;
  }
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (!(_DWORD)v16)
    goto LABEL_28;
LABEL_41:
  if (v28)
    CFRelease(v28);
  if (v27)
    CFRelease(v27);
  if (v25)
    CFRelease(v25);
  if (v26)
    CFRelease(v26);
  if (v3)
    CFRelease(v3);
  return v16;
}

uint64_t sad_bytePumpReachedEnd(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v15;
  CFTypeRef v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  CFAbsoluteTime Current;
  CFDateRef v22;
  CFDateRef v23;
  uint64_t ErrorForOSStatus;
  CFTypeRef v26;
  uint64_t v27;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26 = 0;
  if ((*(_DWORD *)(DerivedStorage + 192) & ~*(_DWORD *)(DerivedStorage + 196)) == 0)
  {
    v5 = DerivedStorage;
    if (a2)
    {
      v6 = CFRetain(a2);
      v7 = v6;
      v26 = v6;
      v8 = *(const void **)(v5 + 400);
      *(_QWORD *)(v5 + 400) = v6;
      if (v6)
        CFRetain(v6);
      if (v8)
        CFRelease(v8);
      goto LABEL_23;
    }
    cf = 0;
    v9 = (const void *)*MEMORY[0x1E0C9AE40];
    v27 = *MEMORY[0x1E0C9AE40];
    v10 = *(_QWORD *)(DerivedStorage + 32);
    if (v10)
    {
      v11 = *(_QWORD *)(v5 + 8);
      FigBytePumpGetFigBaseObject(v10);
      v13 = v12;
      v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
      if (v14)
      {
        v15 = v14(v13, CFSTR("FBP_SegmentCache"), v11, &cf);
        v16 = cf;
        if (!(_DWORD)v15)
        {
          FigStreamingCacheCleanupStreamsForPersisting((uint64_t)cf, &v27);
          v17 = 1;
          v16 = cf;
          if (!cf)
            goto LABEL_13;
          goto LABEL_11;
        }
        v17 = 0;
        if (cf)
LABEL_11:
          CFRelease(v16);
      }
      else
      {
        v17 = 0;
        v15 = 4294954514;
      }
    }
    else
    {
      v15 = FigSignalErrorAt();
      v17 = 0;
    }
LABEL_13:
    if (v9)
      CFRelease(v9);
    if ((_DWORD)v15)
      return v15;
    if (v17)
    {
      v18 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(v18 + 361))
      {
        v19 = v18;
        if (*(_QWORD *)(v18 + 264))
        {
          v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Current = CFAbsoluteTimeGetCurrent();
          v22 = CFDateCreate(v20, Current);
          if (v22)
          {
            v23 = v22;
            FigAssetDownloadStorageManagementSetDownloadCompletionDateForAssetAtURL(*(const __CFURL **)(v19 + 72), *(const void **)(v19 + 264), (uint64_t)v22);
            CFRelease(v23);
          }
          else
          {
            v15 = FigSignalErrorAt();
            if ((_DWORD)v15)
              return v15;
          }
        }
      }
      v7 = 0;
    }
    else
    {
      ErrorForOSStatus = FigCreateErrorForOSStatus(4294950639, (CFErrorRef *)&v26);
      v7 = v26;
      if ((_DWORD)ErrorForOSStatus)
      {
        v15 = ErrorForOSStatus;
        if (!v26)
          return v15;
        goto LABEL_24;
      }
    }
LABEL_23:
    v15 = sad_cleanupDownload(a1, v7);
    v7 = v26;
    if (!v26)
      return v15;
LABEL_24:
    CFRelease(v7);
    return v15;
  }
  return FigSignalErrorAt();
}

uint64_t sad_cleanupDownload(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, _QWORD);
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, __CFString *, uint64_t, CMTime *);
  CMTime cf;
  CMTime v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!*(_BYTE *)(DerivedStorage + 64))
  {
    v4 = DerivedStorage;
    v5 = *(CFTypeRef *)(DerivedStorage + 400);
    if (!v5)
    {
      if (a2)
        v5 = CFRetain(a2);
      else
        v5 = 0;
      *(_QWORD *)(v4 + 400) = v5;
    }
    if (*(_QWORD *)(v4 + 32))
    {
      if (v5)
      {
        FigBytePumpGetFigBaseObject(*(_QWORD *)(v4 + 32));
        v7 = v6;
        v8 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v8)
          v8(v7, CFSTR("FBP_PersistCurrentAlternate"), *MEMORY[0x1E0C9AE40]);
      }
      v9 = *(const void **)(v4 + 408);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(v4 + 408) = 0;
      }
      sad_copyLoadedTimeRanges(v4, (CFTypeRef *)(v4 + 408));
    }
    if (!a2)
    {
      sad_getSumOfTimeDurationFromTimeRanges(*(const __CFArray **)(v4 + 408), &v22);
      v10 = *(const void **)(v4 + 376);
      v11 = *(const void **)(v4 + 304);
      v12 = *(const void **)(v4 + 288);
      v13 = *(_QWORD *)(v4 + 208);
      cf = v22;
      FigStreamingAssetProgressMarkAlternateAndMediaSelectionComplete(v10, v11, v12, v13, (__int128 *)&cf.value);
    }
    if (*(_QWORD *)(v4 + 440))
      return 0;
    v14 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    cf.value = 0;
    v15 = v14[4];
    if (!v15 || v14[55])
    {
      if (!FigSignalErrorAt())
      {
LABEL_24:
        if (cf.value)
          CFRelease((CFTypeRef)cf.value);
        return 0;
      }
    }
    else
    {
      v16 = v14[1];
      FigBytePumpGetFigBaseObject(v15);
      v18 = v17;
      v19 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v19)
      {
        if (!v19(v18, CFSTR("FBP_SegmentCache"), v16, &cf))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          if (!FigNotificationCenterAddWeakListener()
            && !FigStreamingCacheFlushIO(cf.value, v14 + 55))
          {
            goto LABEL_24;
          }
        }
      }
    }
    v14[55] = 0;
    sad_finishDownloadAfterStreamingCacheFlush();
    goto LABEL_24;
  }
  return FigSignalErrorAt();
}

uint64_t sad_copyLoadedTimeRanges(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  const void *v9;
  const void *v10;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return FigSignalErrorAt();
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 8);
    FigBytePumpGetFigBaseObject(v4);
    v7 = v6;
    v8 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v8)
    {
      v8(v7, CFSTR("FBP_CachedTimeRanges"), v5, &cf);
      v9 = cf;
      if (cf)
        goto LABEL_10;
    }
  }
  v10 = *(const void **)(a1 + 408);
  if (v10)
  {
    v9 = CFRetain(v10);
    cf = v9;
    if (v9)
      goto LABEL_10;
  }
  else
  {
    cf = 0;
  }
  v9 = CFArrayCreate(*(CFAllocatorRef *)(a1 + 8), 0, 0, MEMORY[0x1E0C9B378]);
  cf = v9;
  if (!v9)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_11;
  }
LABEL_10:
  v11 = 0;
  *a2 = CFRetain(v9);
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v11;
}

CMTime *sad_getSumOfTimeDurationFromTimeRanges@<X0>(const __CFArray *a1@<X0>, CMTime *a2@<X8>)
{
  __int128 v3;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  int64_t v8;
  const __CFDictionary *ValueAtIndex;
  CMTime duration;
  CMTimeRange v12;

  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v12.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v12.start.epoch = v3;
  *(_OWORD *)&v12.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
  {
    v6 = Count;
    v7 = 0;
    v8 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v7);
      CMTimeRangeMakeFromDictionary(&v12, ValueAtIndex);
      duration = v12.duration;
      v8 = (uint64_t)(CMTimeGetSeconds(&duration) + (double)v8);
      ++v7;
    }
    while (v6 != v7);
  }
  else
  {
    v8 = 0;
  }
  return CMTimeMake(a2, v8, 1);
}

void sad_flushStreamingCacheCompletedNote()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 64)
    && (v1 = DerivedStorage, *(_QWORD *)(DerivedStorage + 440))
    && FigCFDictionaryGetInt64IfPresent())
  {
    if (!*(_QWORD *)(v1 + 440) && !sad_cleanupStreamingCacheFlush())
      sad_finishDownloadAfterStreamingCacheFlush();
  }
  else
  {
    FigSignalErrorAt();
  }
}

void sad_finishDownloadAfterStreamingCacheFlush()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;

  sad_invalidateAndReleasePump();
  if ((*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 24) - 6) <= 0xFFFFFFFC)
  {
    if (dword_1EE2A2FE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(DerivedStorage + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (*(_QWORD *)(DerivedStorage + 400))
      {
        *(_DWORD *)(DerivedStorage + 24) = 4;
        FigCFDictionarySetValue();
      }
      else
      {
        *(_DWORD *)(DerivedStorage + 24) = 3;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (Mutable)
      CFRelease(Mutable);
  }
}

void sad_ticklePumpChapterDataLoadDispatch(const void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  FigBytePumpGetFigBaseObject(a1);
  v3 = v2;
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v4)
  {
    v4(v3, CFSTR("FBSP_Chapters"), *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
      CFRelease(cf);
  }
  if (a1)
    CFRelease(a1);
}

void sad_openPumpSchedulerCallback(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CFGetTypeID(a1);
  if (v7 != FigAssetDownloaderGetTypeID()
    || !a2
    || (*(_QWORD *)(DerivedStorage + 184) = a3, *(_BYTE *)(DerivedStorage + 64)))
  {
    v9 = FigSignalErrorAt();
    goto LABEL_11;
  }
  v8 = *(_DWORD *)(DerivedStorage + 24);
  if ((v8 - 6) >= 0xFFFFFFFD)
  {
    v9 = sad_relinquishAccessToDestinationURL((uint64_t)a1, 0);
LABEL_11:
    v10 = v9;
    if ((_DWORD)v9)
    {
      sad_relinquishAccessToDestinationURL((uint64_t)a1, 0);
      sad_cleanupDownloadWithOSStatus((uint64_t)a1, v10);
    }
    return;
  }
  if (v8 == 2)
  {
    sad_stopDownloading((uint64_t)a1);
    return;
  }
  if (v8 == 1)
  {
    if (*(_DWORD *)(DerivedStorage + 92) == 4)
      v9 = sad_registerAssetForDownloadAndOpenPump((uint64_t)a1);
    else
      v9 = sad_startOrResumeDownload((uint64_t)a1);
    goto LABEL_11;
  }
}

uint64_t sad_startOrResumeDownload(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  int i;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 24) - 6) > 0xFFFFFFFC)
    return 0;
  v3 = DerivedStorage;
  v4 = *(_DWORD *)(DerivedStorage + 92);
  if ((v4 - 3) < 2)
  {
    result = sad_openPumpOrScheduleIt(a1);
    if ((_DWORD)result)
      return result;
  }
  else if (v4)
  {
    if (v4 == 5)
    {
      for (i = 0; i != 3; ++i)
      {
        if (((*(_DWORD *)(v3 + 192) >> i) & 1) != 0)
        {
          v6 = *(_QWORD *)(v3 + 32);
          v7 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (!v7)
            return 4294954514;
          result = v7(v6, i);
          if ((_DWORD)result)
            return result;
        }
      }
    }
  }
  else
  {
    sad_requestPump(DerivedStorage);
  }
  result = 0;
  *(_DWORD *)(v3 + 24) = 1;
  return result;
}

uint64_t sad_stopDownloading(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  CFTypeRef *v4;
  const void *v5;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 32))
  {
    v3 = result;
    v4 = (CFTypeRef *)(result + 408);
    v5 = *(const void **)(result + 408);
    if (v5)
    {
      CFRelease(v5);
      *v4 = 0;
    }
    sad_copyLoadedTimeRanges(v3, v4);
    result = sad_invalidateAndReleasePump(a1, *(_BYTE *)(v3 + 176) == 0);
    *(_DWORD *)(v3 + 92) = 0;
    *(_DWORD *)(v3 + 196) = 0;
  }
  return result;
}

uint64_t sad_requestPump(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t);

  if (*(_DWORD *)(a1 + 92))
    return FigSignalErrorAt();
  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRetain(v2);
    v3 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  result = CMBaseObjectGetVTable();
  v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(result + 16) + 72);
  if (v6)
  {
    result = v6(v4, sad_pumpTransferCallback, v3);
    if (!(_DWORD)result)
      *(_DWORD *)(a1 + 92) = 1;
  }
  return result;
}

void sad_pumpTransferCallback(uint64_t a1, const void *a2, const void *a3)
{
  const void *v5;
  const void *v6;
  dispatch_queue_t *DerivedStorage;
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  int v12;
  const void *v13;

  v5 = (const void *)a1;
  v13 = 0;
  if (dworch_copyAssetDownloaderFromRetainProxy(a1, &v13))
    goto LABEL_10;
  v6 = v13;
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (v8)
  {
    v9 = v8;
    *v8 = v6;
    if (a2)
      v10 = CFRetain(a2);
    else
      v10 = 0;
    v9[1] = v10;
    if (a3)
      v11 = CFRetain(a3);
    else
      v11 = 0;
    v9[2] = v11;
    dispatch_async_f(*DerivedStorage, v9, (dispatch_function_t)sad_pumpTransferCallbackDispatch);
LABEL_10:
    if (!v5)
      return;
    goto LABEL_11;
  }
  v12 = FigSignalErrorAt();
  if (v5)
    CFRelease(v5);
  if (v6)
  {
    v5 = v6;
    if (v12)
LABEL_11:
      CFRelease(v5);
  }
}

void sad_pumpTransferCallbackDispatch(const void **a1)
{
  const void **v1;
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, __CFString *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  uint64_t v21;
  const void **v22;
  const void **v23;
  uint64_t v24;
  uint64_t v25;
  CFIndex v26;
  int v27;
  const __CFArray *v28;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  uint64_t v31;
  const void **v32;
  const void *StableStreamIdentifier;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFAllocator *v38;
  const __CFAllocator *v39;
  int v40;
  CFTypeRef v41;
  const void *v42;
  NSObject *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, __CFString *, uint64_t);
  unsigned int v55;
  uint64_t v56;
  int v57;
  _BYTE v58[12];
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  CFTypeRef cf[2];
  uint64_t v68;
  uint64_t v69;

  v1 = a1;
  v69 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 64))
  {
    v13 = FigSignalErrorAt();
    goto LABEL_106;
  }
  v6 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 176))
  {
    v35 = 0;
    *(_DWORD *)(DerivedStorage + 92) = 0;
    if (v4)
      goto LABEL_111;
    goto LABEL_107;
  }
  if (v3)
    v7 = CFRetain(v3);
  else
    v7 = 0;
  *(_QWORD *)(v6 + 32) = v7;
  if (dword_1EE2A2FE0)
  {
    v57 = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = *(CFTypeRef *)(v6 + 32);
  }
  v9 = *(_QWORD *)(v6 + 384);
  FigBytePumpGetFigBaseObject(v7);
  v11 = v10;
  v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v12)
    goto LABEL_109;
  v13 = v12(v11, CFSTR("FBP_ContentSteeringMonitor"), v9);
  if ((_DWORD)v13)
    goto LABEL_106;
  if (v4)
  {
LABEL_111:
    sad_cleanupDownload((uint64_t)v2, v4);
    CFRelease(v4);
    goto LABEL_112;
  }
  if (*(_QWORD *)(v6 + 32))
  {
    v14 = CMBaseObjectGetDerivedStorage();
    v15 = *(_BYTE *)(v14 + 179) && *(_BYTE *)(v14 + 178) == 0;
    if (*(_QWORD *)(v14 + 32))
    {
      v16 = *(_QWORD *)(v14 + 184);
      if (v16)
      {
        sad_getPumpReadySchedulerCallback(v2, 1, v16);
      }
      else
      {
        v17 = FigAssetDownloadCoordinatorScheduleAccessToURL(v2, *(const void **)(v14 + 72), *(NSObject **)v14, v15, (uint64_t)sad_getPumpReadySchedulerCallback);
        if ((_DWORD)v17)
        {
LABEL_119:
          v35 = v17;
LABEL_108:
          sad_cleanupDownloadWithOSStatus((uint64_t)v2, v35);
          goto LABEL_112;
        }
      }
      v18 = CMBaseObjectGetDerivedStorage();
      if (*(_QWORD *)(v18 + 32))
      {
        v19 = v18;
        v20 = (const void **)(v18 + 40);
        if (!*(_QWORD *)(v18 + 40))
        {
          v17 = FigAlternateSelectionBossCreate(*(const __CFAllocator **)(v18 + 8), v20);
          if (!(_DWORD)v17)
          {
            v21 = (uint64_t)v2;
            v22 = v1;
            v23 = v20;
            v56 = v21;
            v24 = CMBaseObjectGetDerivedStorage();
            v25 = v24;
            v26 = 0;
            cf[0] = 0;
            *(_QWORD *)v58 = 0;
            if (*(_BYTE *)(v24 + 126))
              v27 = -1;
            else
              v27 = 2;
            v55 = v27;
            v28 = *(const __CFArray **)(v24 + 296);
            if (!v28)
              goto LABEL_27;
LABEL_26:
            for (i = CFArrayGetCount(v28); v26 < i; i = 0)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, v26);
              if (CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType")))
              {
                v57 = 0;
                FigCFStringGetOSTypeValue();
              }
              ++v26;
              if (v28)
                goto LABEL_26;
LABEL_27:
              ;
            }
            if (*(_QWORD *)(v25 + 40))
            {
              v31 = *(_QWORD *)(v25 + 304);
              v32 = v23;
              if (v31)
              {
                v4 = 0;
                v1 = v22;
                if (!*(_QWORD *)(v25 + 384))
                {
                  v35 = 0;
                  v2 = (const void *)v56;
                  goto LABEL_89;
                }
                StableStreamIdentifier = (const void *)FigAlternateGetStableStreamIdentifier(v31);
                v2 = (const void *)v56;
                if (StableStreamIdentifier)
                {
                  v34 = FigAlternateAllowListWithStableVariantIDFilterCreate(*(_QWORD *)(v25 + 8), StableStreamIdentifier, 0x374u, cf);
                  if (!(_DWORD)v34)
                  {
                    v34 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                    if (!(_DWORD)v34)
                    {
                      if (cf[0])
                      {
                        CFRelease(cf[0]);
                        cf[0] = 0;
                      }
                      v34 = sad_addStableRenditionIDFilterForMediaType(v56, 1936684398);
                      if (!(_DWORD)v34)
                      {
                        v34 = sad_addStableRenditionIDFilterForMediaType(v56, 1986618469);
                        if (!(_DWORD)v34)
                          v34 = sad_addStableRenditionIDFilterForMediaType(v56, 1935832172);
                      }
                    }
                  }
                  goto LABEL_44;
                }
                goto LABEL_87;
              }
              v36 = FigAlternateContinuousFramesOnlyFilterCreate(*(_QWORD *)(v25 + 8), cf);
              v1 = v22;
              if (!(_DWORD)v36)
              {
                v37 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                v2 = (const void *)v56;
                if ((_DWORD)v37)
                  goto LABEL_117;
                if (cf[0])
                {
                  CFRelease(cf[0]);
                  cf[0] = 0;
                }
                v37 = FigAlternateMediaValidationFilterCreate(*(_QWORD *)(v25 + 8), 0, cf);
                if ((_DWORD)v37)
                  goto LABEL_117;
                v37 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                if ((_DWORD)v37)
                  goto LABEL_117;
                if (cf[0])
                {
                  CFRelease(cf[0]);
                  cf[0] = 0;
                }
                v38 = *(const __CFAllocator **)(v25 + 8);
                v57 = 0;
                FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate(&v57, 0, 0);
                v37 = FigAlternateSupportedVideoRangeFilterCreate(v38, v57, cf);
                if ((_DWORD)v37)
                  goto LABEL_117;
                v37 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                if ((_DWORD)v37)
                  goto LABEL_117;
                if (cf[0])
                {
                  CFRelease(cf[0]);
                  cf[0] = 0;
                }
                v39 = *(const __CFAllocator **)(v25 + 8);
                v40 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 125) ? 4 : 1;
                v37 = FigAlternatePreferredVideoRangeFilterCreate(v39, v40, cf);
                if ((_DWORD)v37)
                  goto LABEL_117;
                v37 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                if ((_DWORD)v37)
                  goto LABEL_117;
                if (cf[0])
                {
                  CFRelease(cf[0]);
                  cf[0] = 0;
                }
                if (!PKDGetSystemCPC(v58))
                {
                  v37 = FigAlternateAllowedCPCFilterCreate(*(const __CFAllocator **)(v25 + 8), *(uint64_t *)v58, cf);
                  if ((_DWORD)v37)
                    goto LABEL_117;
                  v37 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                  if ((_DWORD)v37)
                    goto LABEL_117;
                  if (cf[0])
                  {
                    CFRelease(cf[0]);
                    cf[0] = 0;
                  }
                }
                v37 = FigAlternateSuppressAudioOnlyFilterCreate(*(const __CFAllocator **)(v25 + 8), cf);
                if (!(_DWORD)v37)
                {
                  v37 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                  if (!(_DWORD)v37)
                  {
                    if (cf[0])
                    {
                      CFRelease(cf[0]);
                      cf[0] = 0;
                    }
                    if (*(_BYTE *)(v25 + 121))
                    {
                      v37 = FigAlternateResolutionCapFilterCreate(*(const __CFAllocator **)(v25 + 8), CFSTR("ResolutionCap"), 700, cf, *(double *)(v25 + 104), *(double *)(v25 + 112));
                      if ((_DWORD)v37)
                        goto LABEL_117;
                      v37 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                      if ((_DWORD)v37)
                        goto LABEL_117;
                      if (cf[0])
                      {
                        CFRelease(cf[0]);
                        cf[0] = 0;
                      }
                    }
                    v37 = FigAlternatePreferredAudioFormatFilterCreate(*(const __CFAllocator **)(v25 + 8), 0, v55, 0, 0, 0, 0, cf);
                    if (!(_DWORD)v37)
                    {
                      v34 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                      v4 = 0;
                      if ((_DWORD)v34)
                      {
LABEL_44:
                        v35 = v34;
LABEL_89:
                        v41 = cf[0];
                        goto LABEL_90;
                      }
                      if (cf[0])
                      {
                        CFRelease(cf[0]);
                        cf[0] = 0;
                      }
                      if (*(_BYTE *)(v25 + 120))
                      {
                        v34 = FigAlternateNormalizedPeakBitRateCapFilterCreate(*(_QWORD *)(v25 + 8), *(_DWORD *)(v25 + 96), 0, cf);
                        if (!(_DWORD)v34)
                        {
                          v35 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v25 + 40), cf[0]);
                          v41 = cf[0];
                          if (!(_DWORD)v35 && cf[0])
                          {
                            v35 = 0;
                            goto LABEL_91;
                          }
LABEL_90:
                          if (!v41)
                          {
LABEL_92:
                            if ((_DWORD)v35)
                              goto LABEL_110;
                            v42 = *(const void **)(v19 + 384);
                            if (v42)
                            {
                              v13 = FigAlternateSelectionBossAddMonitor(*v32, v42);
                              if ((_DWORD)v13)
                                goto LABEL_106;
                              if (dword_1EE2A2FE0)
                              {
                                v57 = 0;
                                v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                v44 = v57;
                                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                                  v45 = v44;
                                else
                                  v45 = v44 & 0xFFFFFFFE;
                                if (v45)
                                {
                                  v46 = *(_QWORD *)(v19 + 272);
                                  v47 = *(_QWORD *)(v19 + 384);
                                  v48 = *(_QWORD *)(v19 + 40);
                                  *(_DWORD *)v58 = 136316162;
                                  *(_QWORD *)&v58[4] = "sad_setupAlternateSelectionBoss";
                                  v59 = 2048;
                                  v60 = v19;
                                  v61 = 2114;
                                  v62 = v46;
                                  v63 = 2048;
                                  v64 = v47;
                                  v65 = 2048;
                                  v66 = v48;
                                  _os_log_send_and_compose_impl();
                                }
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                                v4 = 0;
                              }
                            }
                            v49 = *(const void **)(v19 + 40);
                            v50 = *(NSObject **)v19;
                            *(_OWORD *)cf = sad_setupAlternateSelectionBoss_kSadAlternateSelectionBossCallbacks;
                            v68 = 0;
                            v13 = FigAlternateSelectionBossAddDelegate(v49, (uint64_t)v2, (__int128 *)cf, v50);
                            if ((_DWORD)v13)
                            {
LABEL_106:
                              v35 = v13;
                              if (!v4)
                                goto LABEL_107;
                              goto LABEL_111;
                            }
                            v51 = *(_QWORD *)(v19 + 40);
                            FigBytePumpGetFigBaseObject(*(_QWORD *)(v19 + 32));
                            v53 = v52;
                            v54 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 56);
                            if (v54)
                            {
                              v13 = v54(v53, CFSTR("FBP_AlternateSelectionBoss"), v51);
                              if (!(_DWORD)v13)
                                v13 = FigAlternateSelectionBossApplyFilters(*v32);
                              goto LABEL_106;
                            }
LABEL_109:
                            v35 = 4294954514;
LABEL_110:
                            if (v4)
                              goto LABEL_111;
LABEL_107:
                            if (!(_DWORD)v35)
                              goto LABEL_112;
                            goto LABEL_108;
                          }
LABEL_91:
                          CFRelease(v41);
                          goto LABEL_92;
                        }
                        goto LABEL_44;
                      }
LABEL_87:
                      v35 = 0;
                      goto LABEL_89;
                    }
                  }
                }
LABEL_117:
                v35 = v37;
                v4 = 0;
                goto LABEL_89;
              }
              v35 = v36;
            }
            else
            {
              v35 = FigSignalErrorAt();
              v32 = v23;
              v1 = v22;
            }
            v2 = (const void *)v56;
            v4 = 0;
            goto LABEL_89;
          }
          goto LABEL_119;
        }
      }
    }
  }
  v35 = FigSignalErrorAt();
  if ((_DWORD)v35)
    goto LABEL_108;
LABEL_112:
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  free(v1);
}

void sad_getPumpReadySchedulerCallback(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void (*)(uint64_t, uint64_t, const void *, int, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, __CFString *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, __CFString *, _QWORD);
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, __CFString *, CFTypeRef);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, __CFString *, CFTypeRef);
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, __CFString *, const void *);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, __CFString *, const void *);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, __CFString *, const void *);
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, __CFString *, const void *);
  const __CFAllocator *v41;
  CFNumberRef v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, __CFString *, CFNumberRef);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, __CFString *, CFTypeRef);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, __CFString *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, __CFString *, __CFString *);
  CFNumberRef v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, __CFString *, CFNumberRef);
  const void *CFIndexForKeyFromPumpStoreBag;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, __CFString *, CFTypeRef);
  CFTypeRef v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, __CFString *, CFTypeRef);
  CFTypeRef v71;
  CFNumberRef v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, __CFString *, CFNumberRef);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, __CFString *, const void *);
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, __CFString *, const void *);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, __CFString *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v93;
  uint64_t v94;
  unsigned int (*v95)(CFTypeRef, const void *, __int128 *, uint64_t);
  CFTypeRef v96;
  uint64_t (*v97)(CFTypeRef, __CFString *, const __CFAllocator *, CFTypeRef *);
  int v98;
  CFTypeRef v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, __CFString *, CFTypeRef);
  int valuePtr;
  uint64_t v116;
  CFTypeRef v117;
  CFTypeRef cf;
  __int128 v119;
  CFTypeRef v120;
  CFTypeRef v121;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v7 = (const void *)*MEMORY[0x1E0C9AE40];
  v116 = 0;
  v117 = v7;
  valuePtr = 0;
  v8 = CFGetTypeID(a1);
  if (v8 != FigAssetDownloaderGetTypeID() || (*(_QWORD *)(DerivedStorage + 184) = a3, *(_BYTE *)(DerivedStorage + 64)))
  {
    v77 = FigSignalErrorAt();
LABEL_83:
    v10 = v77;
    v57 = 0;
    v42 = 0;
LABEL_84:
    v72 = 0;
    goto LABEL_85;
  }
  if ((*(_DWORD *)(DerivedStorage + 24) - 6) >= 0xFFFFFFFD)
  {
    v77 = sad_relinquishAccessToDestinationURL((uint64_t)a1, 0);
    goto LABEL_83;
  }
  if (!*(_QWORD *)(DerivedStorage + 32))
  {
    v72 = 0;
    v42 = 0;
    v57 = 0;
    goto LABEL_70;
  }
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v9 = FigNotificationCenterAddWeakListener();
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
  v10 = v9;
  if ((_DWORD)v9)
  {
LABEL_118:
    v72 = 0;
    v42 = 0;
LABEL_119:
    v57 = 0;
    goto LABEL_69;
  }
  v11 = *(_QWORD *)(DerivedStorage + 32);
  v12 = *(_QWORD *)(DerivedStorage + 48);
  v13 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t, const void *, int, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (!v13)
    goto LABEL_66;
  v14 = v13(v11, sad_bytePumpFn, 0, v12);
  if ((_DWORD)v14)
    goto LABEL_117;
  v15 = *(_QWORD *)(DerivedStorage + 56);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v17 = v16;
  v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v18)
    goto LABEL_66;
  v14 = v18(v17, CFSTR("FBP_PlaylistCache"), v15);
  if ((_DWORD)v14)
    goto LABEL_117;
  if (a2)
  {
    v10 = sad_ensurePersistentPumpCacheConfiguredForDownload(DerivedStorage);
    if ((_DWORD)v10 == -16248)
      v10 = sad_ensureTemporaryMetadataOnlyPumpCache(DerivedStorage);
    if ((_DWORD)v10)
      goto LABEL_118;
  }
  else
  {
    v14 = sad_ensureTemporaryMetadataOnlyPumpCache(DerivedStorage);
    if ((_DWORD)v14)
      goto LABEL_117;
  }
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v20 = v19;
  v21 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v21)
    goto LABEL_66;
  v22 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v14 = v21(v20, CFSTR("FBP_MinimizeNetworkingWhilePaused"), *MEMORY[0x1E0C9AE50]);
  if ((_DWORD)v14)
    goto LABEL_117;
  if (*(_BYTE *)(DerivedStorage + 181))
  {
    FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v24 = v23;
    v25 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v25)
      goto LABEL_66;
    v14 = v25(v24, CFSTR("FBP_DisallowsExpensiveNetwork"), v22);
    if ((_DWORD)v14)
    {
LABEL_117:
      v10 = v14;
      goto LABEL_118;
    }
  }
  if (!*(_BYTE *)(DerivedStorage + 182))
    goto LABEL_26;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v27 = v26;
  v28 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v28)
  {
LABEL_66:
    v72 = 0;
    v42 = 0;
LABEL_67:
    v57 = 0;
    goto LABEL_68;
  }
  v14 = v28(v27, CFSTR("FBP_DisallowsConstrainedNetwork"), v22);
  if ((_DWORD)v14)
    goto LABEL_117;
LABEL_26:
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v30 = v29;
  v31 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v31)
    goto LABEL_66;
  v14 = v31(v30, CFSTR("FBP_RequiresCryptKeysForMediaDelivery"), v7);
  if ((_DWORD)v14)
    goto LABEL_117;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v33 = v32;
  v34 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v34)
    goto LABEL_66;
  v14 = v34(v33, CFSTR("FBP_EnableCryptKeyRequests"), v7);
  if ((_DWORD)v14)
    goto LABEL_117;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v36 = v35;
  v37 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v37)
    goto LABEL_66;
  v14 = v37(v36, CFSTR("FBP_EnablePenaltyBox"), v7);
  if ((_DWORD)v14)
    goto LABEL_117;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v39 = v38;
  v40 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v40)
    goto LABEL_66;
  v14 = v40(v39, CFSTR("FBP_EnableNetworkRetry"), v7);
  if ((_DWORD)v14)
    goto LABEL_117;
  v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v42 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v42)
  {
    v10 = FigSignalErrorAt();
    v57 = 0;
    goto LABEL_84;
  }
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v44 = v43;
  v45 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v45)
    goto LABEL_79;
  v46 = v45(v44, CFSTR("FBP_NetworkServiceType"), v42);
  if ((_DWORD)v46)
    goto LABEL_129;
  if (*(_BYTE *)(DerivedStorage + 124))
  {
    FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v48 = v47;
    v49 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v49)
      goto LABEL_79;
    v46 = v49(v48, CFSTR("FBP_StoreCryptKeysInCache"), v22);
    if ((_DWORD)v46)
    {
LABEL_129:
      v10 = v46;
      v72 = 0;
      goto LABEL_119;
    }
  }
  v50 = *(_QWORD *)(DerivedStorage + 264);
  if (!v50)
    goto LABEL_43;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v52 = v51;
  v53 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v53)
  {
LABEL_79:
    v72 = 0;
    goto LABEL_67;
  }
  v46 = v53(v52, CFSTR("FBP_ClientBundleIdentifier"), v50);
  if ((_DWORD)v46)
    goto LABEL_129;
LABEL_43:
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v55 = v54;
  v56 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v56)
    goto LABEL_79;
  v46 = v56(v55, CFSTR("FBP_PumpClientName"), CFSTR("SADownloader"));
  if ((_DWORD)v46)
    goto LABEL_129;
  v57 = CFNumberCreate(v41, kCFNumberDoubleType, &kInitialPlaylistDownloadTimeoutSecs);
  if (!v57)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_84;
  }
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v59 = v58;
  v60 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v60)
    goto LABEL_80;
  CFIndexForKeyFromPumpStoreBag = (const void *)v60(v59, CFSTR("FBP_InitialPlaylistDownloadTimeout"), v57);
  if ((_DWORD)CFIndexForKeyFromPumpStoreBag)
    goto LABEL_125;
  *(_QWORD *)&v119 = 0;
  CFIndexForKeyFromPumpStoreBag = sad_getCFIndexForKeyFromPumpStoreBag((uint64_t)a1, CFSTR("coalesceByteRangedMediaSegmentRequestsForDownload"), 1, &v119);
  if ((_DWORD)CFIndexForKeyFromPumpStoreBag)
    goto LABEL_125;
  v62 = v119;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v64 = v63;
  v65 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v65)
    goto LABEL_80;
  if (v62)
    v66 = v22;
  else
    v66 = v7;
  CFIndexForKeyFromPumpStoreBag = (const void *)v65(v64, CFSTR("FBP_CoalesceByteRangeMediaSegmentRequests"), v66);
  if ((_DWORD)CFIndexForKeyFromPumpStoreBag)
    goto LABEL_125;
  *(_QWORD *)&v119 = 0;
  CFIndexForKeyFromPumpStoreBag = sad_getCFIndexForKeyFromPumpStoreBag((uint64_t)a1, CFSTR("pipelineMediaSegmentRequestsForDownload"), 1, &v119);
  if ((_DWORD)CFIndexForKeyFromPumpStoreBag)
    goto LABEL_125;
  v67 = v119;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v69 = v68;
  v70 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v70)
  {
LABEL_80:
    v72 = 0;
    goto LABEL_68;
  }
  if (v67)
    v71 = v22;
  else
    v71 = v7;
  CFIndexForKeyFromPumpStoreBag = (const void *)v70(v69, CFSTR("FBP_AllowPipelinedMediaSegmentRequests"), v71);
  if ((_DWORD)CFIndexForKeyFromPumpStoreBag)
    goto LABEL_125;
  if (!v67)
  {
    v72 = 0;
    goto LABEL_90;
  }
  CFIndexForKeyFromPumpStoreBag = sad_getCFIndexForKeyFromPumpStoreBag((uint64_t)a1, CFSTR("countOfpipelinedMediaSegmentRequestsForDownload"), 6, &v116);
  if ((_DWORD)CFIndexForKeyFromPumpStoreBag)
  {
LABEL_125:
    v10 = (uint64_t)CFIndexForKeyFromPumpStoreBag;
    v72 = 0;
    goto LABEL_69;
  }
  v72 = CFNumberCreate(v41, kCFNumberCFIndexType, &v116);
  if (!v72)
  {
    v111 = FigSignalErrorAt();
    goto LABEL_123;
  }
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v74 = v73;
  v75 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v75)
    goto LABEL_68;
  v76 = v75(v74, CFSTR("FBP_MaxPipelinedMediaConnections"), v72);
  if ((_DWORD)v76)
    goto LABEL_130;
LABEL_90:
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v79 = v78;
  v80 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v80)
    goto LABEL_68;
  v76 = v80(v79, CFSTR("FBP_EnableSuggestedAlternate"), v7);
  if ((_DWORD)v76)
    goto LABEL_130;
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v82 = v81;
  v83 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v83)
    goto LABEL_68;
  v76 = v83(v82, CFSTR("FBP_EnableContentSteering"), v7);
  if ((_DWORD)v76)
    goto LABEL_130;
  v84 = *(_QWORD *)(DerivedStorage + 368);
  if (v84)
  {
    FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v86 = v85;
    v87 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v87)
      goto LABEL_68;
    v76 = v87(v86, CFSTR("FBP_NetworkHistory"), v84);
    if ((_DWORD)v76)
      goto LABEL_130;
  }
  v88 = CMBaseObjectGetDerivedStorage();
  v120 = 0;
  v121 = 0;
  v119 = xmmword_1E2F99AB8;
  v89 = *(_QWORD *)(v88 + 32);
  if (v89)
  {
    FigBytePumpGetFigBaseObject(v89);
    v91 = v90;
    v92 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v92)
    {
      if (!v92(v91, CFSTR("FBP_NetworkCostMonitor"), v41, &v120))
      {
        v93 = v120;
        v94 = *(_QWORD *)v88;
        v95 = *(unsigned int (**)(CFTypeRef, const void *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
        if (v95)
        {
          if (!v95(v93, a1, &v119, v94))
          {
            v96 = v120;
            v97 = *(uint64_t (**)(CFTypeRef, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v97)
            {
              v98 = v97(v96, CFSTR("FNCM_HighSpeedHighPower"), v41, &v121);
              v99 = v121;
              if (!v98)
                *(_BYTE *)(v88 + 464) = v22 == v121;
              if (v99)
                CFRelease(v99);
            }
          }
        }
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (v120)
    CFRelease(v120);
  *(_DWORD *)(DerivedStorage + 192) = 1;
  v100 = *(_QWORD *)(DerivedStorage + 8);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v102 = v101;
  v103 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v103)
    goto LABEL_68;
  v76 = v103(v102, CFSTR("FBP_HasAlternates"), v100, &v117);
  if ((_DWORD)v76)
    goto LABEL_130;
  if (v22 == v117)
    goto LABEL_70;
  v104 = *(_QWORD *)(DerivedStorage + 8);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v106 = v105;
  v107 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v107)
  {
LABEL_68:
    v10 = 4294954514;
LABEL_69:
    sad_relinquishAccessToDestinationURL((uint64_t)a1, 0);
    sad_cleanupDownloadWithOSStatus((uint64_t)a1, v10);
    goto LABEL_70;
  }
  v108 = v107(v106, CFSTR("FBP_Duration"), v104, &cf);
  if (!(_DWORD)v108)
  {
    FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v113 = v112;
    v114 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v114)
    {
      v76 = v114(v113, CFSTR("FBP_PersistCurrentAlternate"), v22);
      if (!(_DWORD)v76)
      {
        v111 = sad_durationChanged(a1, cf);
        goto LABEL_123;
      }
LABEL_130:
      v10 = v76;
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  v10 = v108;
  if ((_DWORD)v108 != -12783)
    goto LABEL_69;
  v109 = *(_QWORD *)(DerivedStorage + 32);
  v110 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v110)
    goto LABEL_68;
  v111 = v110(v109);
LABEL_123:
  v10 = v111;
LABEL_85:
  if ((_DWORD)v10)
    goto LABEL_69;
LABEL_70:
  if (cf)
    CFRelease(cf);
  if (v57)
    CFRelease(v57);
  if (v42)
    CFRelease(v42);
  if (v72)
    CFRelease(v72);
}

void sad_bytePumpFn(uint64_t a1, uint64_t a2, const void *a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  int v15;
  CFTypeRef v16;
  dispatch_queue_t *DerivedStorage;
  _QWORD *v18;
  _QWORD *v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef cf;

  cf = 0;
  v15 = dworch_copyAssetDownloaderFromRetainProxy(a2, &cf);
  v16 = cf;
  if (v15)
    goto LABEL_13;
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v18 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405C7134C3uLL);
  if (v18)
  {
    v19 = v18;
    if (v16)
      v20 = CFRetain(v16);
    else
      v20 = 0;
    *v19 = v20;
    if (a3)
      v21 = CFRetain(a3);
    else
      v21 = 0;
    v19[1] = v21;
    *((_DWORD *)v19 + 4) = a4;
    *((_BYTE *)v19 + 20) = a5;
    if (a12)
      v22 = CFRetain(a12);
    else
      v22 = 0;
    v19[3] = v22;
    dispatch_async_f(*DerivedStorage, v19, (dispatch_function_t)sad_bytePumpFnDispatch);
LABEL_13:
    if (!v16)
      return;
    goto LABEL_14;
  }
  FigSignalErrorAt();
  if (v16)
LABEL_14:
    CFRelease(v16);
}

void sad_bytePumpFnDispatch(unsigned __int8 *a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  const void *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t DataLength;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, size_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, __CFString *, _QWORD, CFNumberRef *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v24;
  unsigned int (*v25)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v26;
  void (*v27)(uint64_t, __CFString *, __CFString *, size_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  int valuePtr;
  CFNumberRef number;

  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (const void *)*((_QWORD *)a1 + 1);
  v5 = (void *)*((_QWORD *)a1 + 3);
  if (*(_BYTE *)(DerivedStorage + 64))
  {
    v34 = FigSignalErrorAt();
    goto LABEL_46;
  }
  v6 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 32))
    goto LABEL_48;
  v7 = *((_DWORD *)a1 + 4);
  v8 = a1[20];
  if (v4)
    DataLength = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)a1 + 1));
  else
    DataLength = 0;
  v10 = v6 + 16 * v8;
  v11 = (uint64_t *)(v10 + 216);
  if ((v7 & 0x100) != 0)
  {
    v12 = 0;
    ++*(_QWORD *)(v10 + 224);
    *v11 = 0;
  }
  else
  {
    v12 = *v11;
  }
  *v11 = v12 + DataLength;
  *(_QWORD *)(v6 + 208) += DataLength;
  if ((v7 & 0x400) != 0)
  {
    v14 = (v7 >> 6) & 1;
  }
  else
  {
    *(_QWORD *)(v6 + 200) += DataLength;
    if ((v7 & 0x40) == 0)
    {
      v13 = v5 == 0;
      goto LABEL_37;
    }
    v15 = *(_QWORD *)(v6 + 456);
    if (v15)
    {
      v16 = *(void (**)(uint64_t, __CFString *, __CFString *, size_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 32);
      if (v16)
        v16(v15, CFSTR("streamingOrchestratorStats"), CFSTR("TotBytesDown"), DataLength);
    }
    number = 0;
    valuePtr = 0;
    v17 = *(_QWORD *)(v6 + 32);
    if (v17)
    {
      FigBytePumpGetFigBaseObject(v17);
      v19 = v18;
      v20 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (v20)
      {
        if (!v20(v19, CFSTR("FBP_LastMediaFileInterfaceType"), *MEMORY[0x1E0C9AE00], &number))
        {
          CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
          v21 = *(_QWORD *)(v6 + 456);
          if (v21)
          {
            v22 = valuePtr;
            v23 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v23)
              v23(v21, CFSTR("streamingOrchestratorStats"), CFSTR("IfTy"), v22, 0);
          }
        }
      }
      if (number)
        CFRelease(number);
    }
    if (!*(_BYTE *)(v6 + 464))
      goto LABEL_31;
    v24 = *(_QWORD *)(v6 + 456);
    if (!v24)
      goto LABEL_31;
    v25 = *(unsigned int (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
    if (!v25)
      goto LABEL_31;
    v14 = 1;
    if (!v25(v24, CFSTR("streamingOrchestratorStats"), CFSTR("HSHP"), 1, 0))
    {
      v26 = *(_QWORD *)(v6 + 456);
      if (v26)
      {
        v27 = *(void (**)(uint64_t, __CFString *, __CFString *, size_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 32);
        if (v27)
          v27(v26, CFSTR("streamingOrchestratorStats"), CFSTR("HSHPBytes"), DataLength);
      }
LABEL_31:
      v14 = 1;
    }
  }
  v13 = v5 == 0;
  if (v14 && !v5)
  {
    v28 = CMBaseObjectGetDerivedStorage();
    if (FigGetUpTimeNanoseconds() - *(_QWORD *)(v28 + 424) >= 500000001)
    {
      v29 = sad_sendLoadedTimeRangesChangeNoteIfChanged((uint64_t)v2);
      if ((_DWORD)v29)
        goto LABEL_40;
    }
    v13 = 1;
  }
LABEL_37:
  if ((v7 & 2) == 0)
    goto LABEL_48;
  if (!v13)
  {
    if (!FigCFErrorIsEqualToOSStatus((__CFError *)v5, (uint64_t)CFSTR("CoreMediaErrorDomain"), -15642))
    {
      v31 = *(const void **)(v6 + 392);
      *(_QWORD *)(v6 + 392) = v5;
      CFRetain(v5);
      if (v31)
        CFRelease(v31);
    }
    goto LABEL_44;
  }
  v29 = sad_sendLoadedTimeRangesChangeNoteIfChanged((uint64_t)v2);
  if (!(_DWORD)v29)
  {
LABEL_44:
    v32 = *(_DWORD *)(v6 + 192);
    v33 = *(_DWORD *)(v6 + 196) | (1 << v8);
    *(_DWORD *)(v6 + 196) = v33;
    if ((v32 & ~v33) != 0)
      goto LABEL_48;
    v34 = sad_bytePumpReachedEnd((uint64_t)v2, *(const void **)(v6 + 392));
LABEL_46:
    v30 = v34;
    if (!(_DWORD)v34)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_40:
  v30 = v29;
LABEL_47:
  sad_cleanupDownloadWithOSStatus((uint64_t)v2, v30);
LABEL_48:
  if (v5)
    CFRelease(v5);
  if (v2)
    CFRelease(v2);
  if (v4)
    CFRelease(v4);
  free(a1);
}

uint64_t sad_sendLoadedTimeRangesChangeNoteIfChanged(uint64_t a1)
{
  uint64_t DerivedStorage;
  __int128 v2;
  uint64_t v3;
  CFMutableDictionaryRef v4;
  uint64_t v5;
  const __CFArray *v6;
  const __CFAllocator **v7;
  uint64_t v8;
  const __CFAllocator *v9;
  CMTimeScale v10;
  const __CFAllocator *v11;
  CFMutableArrayRef Mutable;
  CMTimeFlags v13;
  CMTimeEpoch v14;
  CFIndex v15;
  CFIndex v16;
  CMTimeEpoch v17;
  const __CFArray *v18;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v20;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeFlags v25;
  CMTimeEpoch v26;
  CMTimeFlags v27;
  CMTimeFlags v28;
  CMTimeFlags v29;
  CMTimeValue v30;
  CMTimeEpoch v31;
  CMTimeScale v32;
  CMTimeEpoch v33;
  CMTimeValue v34;
  CMTimeFlags v35;
  CMTimeFlags v36;
  CMTimeFlags v37;
  CMTimeEpoch v38;
  CFDictionaryRef v39;
  CFDictionaryRef v40;
  const __CFArray *v41;
  __CFArray *v42;
  const void *v43;
  CFDictionaryRef v44;
  CFDictionaryRef v45;
  uint64_t v46;
  CFIndex v47;
  const __CFArray *v48;
  uint64_t v49;
  const __CFArray *v50;
  _QWORD *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t UpTimeNanoseconds;
  const void *v57;
  CFTypeRef v58;
  CMTimeFlags v60;
  CMTimeScale v61;
  CMTimeFlags v62;
  CMTimeScale v63;
  const __CFAllocator *allocator;
  __CFArray *v65;
  CMTimeEpoch v66;
  const __CFArray *v67;
  CMTimeValue v68;
  CFArrayRef theArray;
  CMTimeEpoch v70;
  CFIndex v71;
  CMTimeEpoch v72;
  CMTimeFlags v73;
  __int128 v74;
  CFAllocatorRef v75;
  const __CFAllocator *v76;
  uint64_t v77;
  CMTimeRange v79;
  CFTypeRef cf;
  CMTime v81;
  CMTime v82;
  CMTime time2;
  CMTime time1;
  CMTimeRange range2;
  CMTimeRange range1;
  CMTimeRange v87;
  CMTime end;
  CMTimeValue v89;
  CMTimeScale v90;
  CMTimeValue v91;
  CMTimeScale v92;
  CMTimeValue v93;
  CMTimeScale v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v2 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  *(_OWORD *)&v79.start.value = *MEMORY[0x1E0CA2E50];
  *(_OWORD *)&v79.start.epoch = v2;
  *(_OWORD *)&v79.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  v3 = sad_copyLoadedTimeRanges(DerivedStorage, &cf);
  if ((_DWORD)v3)
  {
    v5 = v3;
    v4 = 0;
    goto LABEL_59;
  }
  if (FigCFEqual())
  {
    v4 = 0;
    v5 = 0;
    goto LABEL_59;
  }
  v6 = (const __CFArray *)cf;
  v7 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  v77 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 416))
  {
    if (cf)
      v41 = (const __CFArray *)CFRetain(cf);
    else
      v41 = 0;
    goto LABEL_46;
  }
  theArray = *(CFArrayRef *)(DerivedStorage + 416);
  v8 = MEMORY[0x1E0CA2E18];
  v9 = (const __CFAllocator *)*MEMORY[0x1E0CA2E18];
  v93 = *MEMORY[0x1E0CA2E18];
  v10 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v94 = v10;
  if (!cf
    || (v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378])) == 0))
  {
    v5 = FigSignalErrorAt();
    v41 = 0;
    if (!(_DWORD)v5)
      goto LABEL_46;
    goto LABEL_72;
  }
  allocator = v11;
  v63 = v10;
  v75 = v9;
  v65 = Mutable;
  v13 = *(_DWORD *)(v8 + 12);
  v14 = *(_QWORD *)(v8 + 16);
  v62 = v13;
  if (CFArrayGetCount(v6) < 1)
  {
    v16 = 0;
    v17 = v14;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = v14;
    v18 = theArray;
    v66 = v14;
    v67 = v6;
    while (v15 < CFArrayGetCount(v18))
    {
      memset(&v87, 0, sizeof(v87));
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v16);
      v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v15);
      if (FigCFEqual())
      {
        ++v16;
        ++v15;
      }
      else
      {
        v73 = v13;
        CMTimeRangeMakeFromDictionary(&range1, ValueAtIndex);
        end.value = range1.start.value;
        flags = range1.start.flags;
        end.timescale = range1.start.timescale;
        epoch = range1.start.epoch;
        value = range1.duration.value;
        timescale = range1.duration.timescale;
        v25 = range1.duration.flags;
        v26 = range1.duration.epoch;
        CMTimeRangeMakeFromDictionary(&range1, v20);
        v91 = range1.start.value;
        v92 = range1.start.timescale;
        if ((flags & 1) == 0)
          goto LABEL_65;
        v27 = v25;
        if ((v25 & 1) == 0)
          goto LABEL_65;
        if (v26)
          goto LABEL_65;
        if (value < 0)
          goto LABEL_65;
        v28 = range1.start.flags;
        if ((range1.start.flags & 1) == 0)
          goto LABEL_65;
        v29 = range1.duration.flags;
        if ((range1.duration.flags & 1) == 0)
          goto LABEL_65;
        if (range1.duration.epoch)
          goto LABEL_65;
        v30 = range1.duration.value;
        if (range1.duration.value < 0)
          goto LABEL_65;
        v31 = range1.start.epoch;
        v32 = range1.duration.timescale;
        range2.duration.epoch = 0;
        range1.start.value = end.value;
        range1.start.timescale = end.timescale;
        range1.start.flags = flags;
        range1.start.epoch = epoch;
        range1.duration.value = value;
        range1.duration.timescale = timescale;
        range1.duration.flags = v27;
        range1.duration.epoch = 0;
        range2.start.value = v91;
        range2.start.timescale = v92;
        range2.start.flags = v28;
        v70 = v31;
        v71 = v15;
        range2.start.epoch = v31;
        range2.duration.value = v30;
        range2.duration.timescale = v32;
        range2.duration.flags = v29;
        v68 = value;
        v33 = epoch;
        v34 = v30;
        v35 = v27;
        if (CMTimeRangeEqual(&range1, &range2))
        {
          ++v16;
          v15 = v71 + 1;
          v14 = v66;
          v6 = v67;
          v18 = theArray;
          v13 = v73;
        }
        else
        {
          v61 = v32;
          range1.start.value = end.value;
          range1.start.timescale = end.timescale;
          range1.start.flags = flags;
          range1.start.epoch = v33;
          range2.start.value = v91;
          range2.start.timescale = v92;
          range2.start.flags = v28;
          range2.start.epoch = v70;
          v36 = v28;
          if (CMTimeCompare(&range1.start, &range2.start) < 0)
          {
            v60 = v29;
            memset(&range2, 0, 24);
            if ((v73 & 1) != 0)
            {
              time2.epoch = v17;
              time1.value = end.value;
              time1.timescale = end.timescale;
              time1.flags = flags;
              time1.epoch = v33;
              time2.value = v93;
              time2.timescale = v94;
              time2.flags = v73;
              CMTimeMaximum(&range1.start, &time1, &time2);
              v89 = range1.start.value;
              v37 = range1.start.flags;
              v90 = range1.start.timescale;
              v38 = range1.start.epoch;
            }
            else
            {
              v89 = end.value;
              v90 = end.timescale;
              v37 = flags;
              v38 = v33;
            }
            time1.value = v91;
            time1.timescale = v92;
            time1.flags = v36;
            time1.epoch = v70;
            range1.start.value = end.value;
            range1.start.timescale = end.timescale;
            range1.start.flags = flags;
            range1.start.epoch = v33;
            range1.duration.value = v68;
            range1.duration.timescale = timescale;
            range1.duration.flags = v35;
            range1.duration.epoch = 0;
            CMTimeClampToRange(&range2.start, &time1, &range1);
            range1.start.value = v89;
            range1.start.timescale = v90;
            range1.start.flags = v37;
            range1.start.epoch = v38;
            time1 = range2.start;
            CMTimeRangeFromTimeToTime(&v87, &range1.start, &time1);
            range1 = v87;
            v39 = CMTimeRangeCopyAsDictionary(&range1, allocator);
            if (!v39)
            {
LABEL_65:
              v5 = FigSignalErrorAt();
              v41 = 0;
              DerivedStorage = v77;
              v7 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
              v42 = v65;
              goto LABEL_45;
            }
            v40 = v39;
            CFArrayAppendValue(v65, v39);
            CFRelease(v40);
            v29 = v60;
          }
          range1.start.value = end.value;
          range1.start.timescale = end.timescale;
          range1.start.flags = flags;
          range1.start.epoch = v33;
          range1.duration.value = v68;
          range1.duration.timescale = timescale;
          range1.duration.flags = v35;
          range1.duration.epoch = 0;
          CMTimeRangeGetEnd(&v82, &range1);
          range1.start.value = v91;
          range1.start.timescale = v92;
          range1.start.flags = v36;
          range1.start.epoch = v70;
          range1.duration.value = v34;
          range1.duration.timescale = v61;
          range1.duration.flags = v29;
          range1.duration.epoch = 0;
          CMTimeRangeGetEnd(&v81, &range1);
          v15 = v71;
          v6 = v67;
          if (CMTimeCompare(&v82, &v81) <= 0)
          {
            v93 = (CMTimeValue)v75;
            v13 = v62;
            v94 = v63;
            ++v16;
            v14 = v66;
            v17 = v66;
          }
          else
          {
            range1.start.value = v91;
            range1.start.timescale = v92;
            range1.start.flags = v36;
            range1.start.epoch = v70;
            range1.duration.value = v34;
            range1.duration.timescale = v61;
            range1.duration.flags = v29;
            range1.duration.epoch = 0;
            CMTimeRangeGetEnd(&range2.start, &range1);
            v93 = range2.start.value;
            v13 = range2.start.flags;
            v94 = range2.start.timescale;
            v17 = range2.start.epoch;
            v15 = v71 + 1;
            v14 = v66;
          }
          v18 = theArray;
        }
      }
      if (v16 >= CFArrayGetCount(v6))
        break;
    }
  }
  v42 = v65;
  if (v16 >= CFArrayGetCount(v6))
  {
LABEL_43:
    v41 = (const __CFArray *)CFRetain(v65);
    v5 = 0;
    goto LABEL_44;
  }
  while (1)
  {
    v43 = CFArrayGetValueAtIndex(v6, v16);
    if ((v13 & 1) != 0)
      break;
    CFArrayAppendValue(v65, v43);
LABEL_42:
    if (++v16 >= CFArrayGetCount(v6))
      goto LABEL_43;
  }
  CMTimeRangeMakeFromDictionary(&v87, (CFDictionaryRef)v43);
  *(_OWORD *)&range2.start.value = *(_OWORD *)&v87.start.value;
  range2.start.epoch = v87.start.epoch;
  end.value = v93;
  end.timescale = v94;
  end.flags = v13;
  end.epoch = v17;
  CMTimeMaximum(&time1, &range2.start, &end);
  range2 = v87;
  CMTimeRangeGetEnd(&time2, &range2);
  range2.start = time1;
  end = time2;
  CMTimeRangeFromTimeToTime(&range1, &range2.start, &end);
  range2 = range1;
  v44 = CMTimeRangeCopyAsDictionary(&range2, allocator);
  if (v44)
  {
    v45 = v44;
    CFArrayAppendValue(v65, v44);
    CFRelease(v45);
    v93 = (CMTimeValue)v75;
    v94 = v63;
    v13 = v62;
    v17 = v14;
    goto LABEL_42;
  }
  v5 = FigSignalErrorAt();
  v41 = 0;
LABEL_44:
  DerivedStorage = v77;
  v7 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
LABEL_45:
  CFRelease(v42);
  if ((_DWORD)v5)
    goto LABEL_72;
LABEL_46:
  v46 = sad_ensureDuration(a1, 0);
  if ((_DWORD)v46)
  {
    v5 = v46;
LABEL_72:
    v48 = v41;
    goto LABEL_57;
  }
  v74 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v87.start.value = *MEMORY[0x1E0CA2E68];
  v72 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v87.start.epoch = v72;
  *(_OWORD *)&range1.start.value = *(_OWORD *)(DerivedStorage + 336);
  range1.start.epoch = *(_QWORD *)(DerivedStorage + 352);
  CMTimeRangeMake(&v79, &v87.start, &range1.start);
  if (CFArrayGetCount(v41) < 1)
  {
LABEL_52:
    v50 = (const __CFArray *)cf;
    v51 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&v87.start.value = v74;
    v87.start.epoch = v72;
    sad_getSumOfTimeDurationFromTimeRanges(v50, &v87.start);
    v52 = (const void *)v51[47];
    v53 = (const void *)v51[38];
    v54 = (const void *)v51[36];
    v55 = v51[26];
    *(_OWORD *)&range1.start.value = *(_OWORD *)&v87.start.value;
    range1.start.epoch = v87.start.epoch;
    FigStreamingAssetProgressMonitorUpdateMediaDownloadedTimeAndBytes(v52, v53, v54, v55, (__int128 *)&range1.start.value);
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v57 = *(const void **)(v77 + 416);
    v58 = cf;
    *(_QWORD *)(v77 + 416) = cf;
    *(_QWORD *)(v77 + 424) = UpTimeNanoseconds;
    if (v58)
      CFRetain(v58);
    v48 = v41;
    if (v57)
      CFRelease(v57);
    v5 = 0;
LABEL_57:
    v4 = 0;
    if (!v48)
      goto LABEL_59;
    goto LABEL_58;
  }
  v47 = 0;
  v76 = *v7;
  while (1)
  {
    v48 = v41;
    CFArrayGetValueAtIndex(v41, v47);
    v4 = CFDictionaryCreateMutable(v76, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v4)
      break;
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    v87 = v79;
    FigCFDictionarySetCMTimeRange();
    CMNotificationCenterGetDefaultLocalCenter();
    v49 = FigDispatchAsyncPostNotification();
    if ((_DWORD)v49)
      goto LABEL_67;
    CFRelease(v4);
    ++v47;
    v41 = v48;
    if (v47 >= CFArrayGetCount(v48))
      goto LABEL_52;
  }
  v49 = FigSignalErrorAt();
LABEL_67:
  v5 = v49;
  if (v48)
LABEL_58:
    CFRelease(v48);
LABEL_59:
  if (cf)
    CFRelease(cf);
  if (v4)
    CFRelease(v4);
  return v5;
}

const void *sad_getCFIndexForKeyFromPumpStoreBag(uint64_t a1, __CFString *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  const __CFDictionary *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, const void *, _QWORD);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  *a4 = a3;
  if (*(_QWORD *)(DerivedStorage + 32))
  {
    v8 = *(_QWORD *)(DerivedStorage + 8);
    FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v10 = v9;
    v11 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v11 && !v11(v10, CFSTR("FBP_SessionConfiguration"), v8, &cf))
    {
      if (!cf)
        return 0;
      *a4 = (int)FigRCLGetNumberWithDefault((const __CFDictionary *)cf, a2);
      v12 = (const __CFDictionary *)cf;
      v13 = CMBaseObjectGetDerivedStorage();
      if (*(_QWORD *)(v13 + 456))
      {
        v14 = v13;
        v15 = FigRCLCopyConfigurationGroupName(v12);
        if (!v15)
          goto LABEL_12;
        v16 = *(_QWORD *)(v14 + 456);
        if (v16)
        {
          v17 = *(void (**)(uint64_t, __CFString *, __CFString *, const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 48);
          if (v17)
            v17(v16, CFSTR("streamingOrchestratorStats"), CFSTR("configurationGroup"), v15, 0);
        }
        CFRelease(v15);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    v15 = 0;
  }
  else
  {
    v15 = (const void *)FigSignalErrorAt();
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v15;
}

uint64_t sad_highSpeedHighPowerTransportChangedCallback(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 64))
    *(_BYTE *)(result + 464) = a3;
  return result;
}

void sad_bossFilteredAlternatesChangedCallback(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CMTimeEpoch v7;
  uint64_t v8;
  const void *value;
  uint64_t IsAudioOnly;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const void *, uint64_t, _QWORD, uint64_t, uint64_t, CMTimeRange *, CMTimeRange *, _QWORD, uint64_t, int *, uint64_t);
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  unsigned int v27;
  __int128 v28;
  CMTime v29;
  int v30;
  CFTypeRef cf;
  CMTimeRange range;
  CMTime v33;
  CMTimeRange context;
  const __CFArray *v35;
  CFRange v36;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual() || !*(_QWORD *)(DerivedStorage + 32))
    return;
  v6 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v30 = 0;
  v28 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v29.value = *MEMORY[0x1E0CA2E68];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v29.epoch = v7;
  if (!*(_QWORD *)(v6 + 32))
    goto LABEL_32;
  v8 = v6;
  if (!*(_QWORD *)(v6 + 304) && (!a3 || CFArrayGetCount(a3) <= 0))
    goto LABEL_32;
  if ((*(_DWORD *)(v8 + 24) - 6) > 0xFFFFFFFC)
    goto LABEL_24;
  value = *(const void **)(v8 + 304);
  if (!value || *(_QWORD *)(v8 + 384))
  {
    context.start.value = 0;
    v36.length = CFArrayGetCount(a3);
    v36.location = 0;
    CFArrayApplyFunction(a3, v36, (CFArrayApplierFunction)sad_getMaxBandwidthAlternateApplierFunc, &context);
    value = (const void *)context.start.value;
    if (!context.start.value)
    {
LABEL_32:
      v20 = FigSignalErrorAt();
      goto LABEL_34;
    }
  }
  IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)value);
  v11 = CMBaseObjectGetDerivedStorage();
  v35 = 0;
  v12 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  *(_OWORD *)&context.start.value = *MEMORY[0x1E0CA2E50];
  *(_OWORD *)&context.start.epoch = v12;
  *(_OWORD *)&context.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  *(_OWORD *)&v33.value = v28;
  v33.epoch = v7;
  v13 = sad_copyLoadedTimeRanges(v11, (CFTypeRef *)&v35);
  v14 = v35;
  if (!(_DWORD)v13)
  {
    if (v35)
    {
      Count = CFArrayGetCount(v35);
      v14 = v35;
      if (Count >= 1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, 0);
        CMTimeRangeMakeFromDictionary(&context, ValueAtIndex);
        range = context;
        CMTimeRangeGetEnd(&v33, &range);
        v14 = v35;
      }
    }
    v29 = v33;
  }
  if (v14)
    CFRelease(v14);
  if ((_DWORD)v13)
    goto LABEL_35;
  v17 = *(_QWORD *)(v8 + 32);
  v18 = *(_QWORD *)(v8 + 296);
  v19 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD, uint64_t, uint64_t, CMTimeRange *, CMTimeRange *, _QWORD, uint64_t, int *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v19)
  {
LABEL_31:
    v13 = 4294954514;
    goto LABEL_35;
  }
  *(_OWORD *)&context.start.value = *(_OWORD *)&v29.value;
  context.start.epoch = v29.epoch;
  *(_OWORD *)&range.start.value = v28;
  range.start.epoch = v7;
  v20 = v19(v17, value, v18, 0, IsAudioOnly, 17, &context, &range, 0, v8 + 192, &v30, v8 + 80);
  if ((_DWORD)v20)
  {
LABEL_34:
    v13 = v20;
    goto LABEL_35;
  }
  v21 = *(const void **)(v8 + 304);
  if (v21 != value)
  {
    *(_QWORD *)(v8 + 304) = value;
    CFRetain(value);
    if (v21)
      CFRelease(v21);
  }
LABEL_24:
  if (*(_DWORD *)(v8 + 92) <= 1u)
  {
    *(_DWORD *)(v8 + 92) = 2;
    v22 = *(_QWORD *)(v8 + 32);
    v23 = *(_QWORD *)(v8 + 8);
    FigBytePumpGetFigBaseObject(v22);
    v25 = v24;
    v26 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v26)
    {
      v27 = v26(v25, CFSTR("FBP_Duration"), v23, &cf);
      if (v27)
      {
        if (v27 == -12783)
          v13 = 0;
        else
          v13 = v27;
        goto LABEL_35;
      }
      v20 = sad_durationChanged(a2, cf);
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  v13 = 0;
LABEL_35:
  if (cf)
    CFRelease(cf);
  if ((_DWORD)v13)
    sad_cleanupDownloadWithOSStatus((uint64_t)a2, v13);
}

void sad_bossMediaSelectionArrayChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
    return;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return;
  v6 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 296))
    return;
  cf = 0;
  v7 = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(a3, *(const __CFArray **)(DerivedStorage + 288), *(const __CFDictionary **)(DerivedStorage + 280), 0, &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    if (cf)
      goto LABEL_6;
    v7 = FigSignalErrorAt();
    v8 = cf;
    if ((_DWORD)v7)
      goto LABEL_8;
    if (cf)
    {
LABEL_6:
      v9 = CFRetain(v8);
      v8 = cf;
    }
    else
    {
      v9 = 0;
    }
    v7 = 0;
    *(_QWORD *)(v6 + 296) = v9;
  }
LABEL_8:
  if (v8)
    CFRelease(v8);
  if ((_DWORD)v7 || (CMNotificationCenterGetDefaultLocalCenter(), v7 = FigDispatchAsyncPostNotification(), (_DWORD)v7))
    sad_cleanupDownloadWithOSStatus(a2, v7);
}

uint64_t sad_getMaxBandwidthAlternateApplierFunc(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  int PeakBitRate;

  v3 = result;
  if (!a2 || *a2)
  {
    PeakBitRate = FigAlternateGetPeakBitRate(result);
    result = FigAlternateGetPeakBitRate(*a2);
    if (PeakBitRate <= (int)result)
      v3 = *a2;
  }
  *a2 = v3;
  return result;
}

uint64_t sad_addStableRenditionIDFilterForMediaType(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const void *v5;
  const void *StableStreamIdentifierForMediaSubstream;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  result = FigStreamAlternateGetPersistentIDForMediaTypeInMediaSelectionArray(*(const __CFArray **)(DerivedStorage + 288), a2);
  if (result)
  {
    v5 = (const void *)result;
    if (a2 == 1936684398
      && FigAlternateMightHaveDummyAudioGroup(*(const __CFDictionary **)(DerivedStorage + 304)))
    {
      return 0;
    }
    StableStreamIdentifierForMediaSubstream = FigAlternateGetStableStreamIdentifierForMediaSubstream(*(_QWORD *)(DerivedStorage + 304), a2, v5);
    if (!StableStreamIdentifierForMediaSubstream)
      return FigSignalErrorAt();
    result = FigAlternateAllowListWithStableRenditionIDFilterCreate(*(void **)(DerivedStorage + 8), v5, StableStreamIdentifierForMediaSubstream, a2, 0x374u, &cf);
    if (!(_DWORD)result)
    {
      result = FigAlternateSelectionBossAddFilter(*(_QWORD *)(DerivedStorage + 40), cf);
      if (!(_DWORD)result)
      {
        if (cf)
        {
          CFRelease(cf);
          return 0;
        }
      }
    }
  }
  return result;
}

CFTypeRef sad_copyPropertyDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  _QWORD *v4;
  CFTypeRef result;
  int v6;
  CFTypeRef *v7;
  CFTypeRef v8;

  v8 = 0;
  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 64))
  {
    result = 0;
    v6 = -16651;
    goto LABEL_9;
  }
  v4 = (_QWORD *)DerivedStorage;
  if (!CFEqual(CFSTR("AssetDownloaderProperty_Status"), v2))
  {
    if (CFEqual(CFSTR("AssetDownloaderProperty_Asset"), v2))
    {
      result = (CFTypeRef)v4[2];
    }
    else
    {
      if (CFEqual(CFSTR("AssetDownloaderProperty_LoadedTimeRanges"), v2))
      {
        v6 = sad_copyLoadedTimeRanges((uint64_t)v4, &v8);
        result = v8;
        goto LABEL_9;
      }
      if (CFEqual(CFSTR("AssetDownloaderProperty_ResolvedSelectedMediaArray"), v2))
      {
        result = (CFTypeRef)v4[37];
        if (!result)
          goto LABEL_8;
      }
      else if (CFEqual(CFSTR("AssetDownloaderProperty_DestinationURL"), v2))
      {
        result = (CFTypeRef)v4[9];
      }
      else
      {
        if (CFEqual(CFSTR("AssetDownloaderProperty_DownloadedBytes"), v2))
        {
          result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, v4 + 25);
          goto LABEL_8;
        }
        if (CFEqual(CFSTR("AssetDownloaderProperty_ClientBundleIdentifier"), v2))
        {
          result = (CFTypeRef)v4[33];
          if (!result)
            goto LABEL_8;
        }
        else if (CFEqual(CFSTR("AssetDownloaderProperty_HasAccessToDestinationURL"), v2))
        {
          v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
          if (!v4[23])
            v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
          result = *v7;
          if (!*v7)
            goto LABEL_8;
        }
        else if (CFEqual(CFSTR("AssetDownloaderProperty_SelectedAlternate"), v2))
        {
          result = (CFTypeRef)v4[38];
          if (!result)
            goto LABEL_8;
        }
        else if (CFEqual(CFSTR("AssetDownloaderProperty_SelectedMediaArray"), v2))
        {
          result = (CFTypeRef)v4[36];
          if (!result)
            goto LABEL_8;
        }
        else
        {
          if (!CFEqual(CFSTR("AssetDownloaderProperty_FinalError"), v2))
          {
            result = 0;
            v6 = -12784;
            goto LABEL_9;
          }
          result = (CFTypeRef)v4[50];
          if (!result)
            goto LABEL_8;
        }
      }
    }
    result = CFRetain(result);
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, v4 + 3);
  if (result)
    goto LABEL_8;
  v6 = FigSignalErrorAt();
  result = 0;
LABEL_9:
  *(_DWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sad_setPropertyDispatch(uint64_t a1)
{
  const __CFArray *v2;
  const void *v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeID TypeID;
  const __CFArray *v7;
  const __CFAllocator *v8;
  const __CFArray *v9;
  CFTypeID v10;
  const void *v11;
  int v12;
  const __CFArray *v13;
  int v14;
  CFArrayRef Copy;
  CFArrayRef v16;
  const void *v17;
  CFTypeID v18;

  v3 = *(const void **)(a1 + 8);
  v2 = *(const __CFArray **)(a1 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 64))
    goto LABEL_28;
  v5 = DerivedStorage;
  if (CFEqual(CFSTR("AssetDownloaderProperty_SelectedMediaArray"), v3))
  {
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(v2) && *(_DWORD *)(v5 + 92) < 2u)
    {
      v7 = *(const __CFArray **)(v5 + 288);
      v8 = *(const __CFAllocator **)(v5 + 8);
      v9 = v7 ? CFArrayCreateMutableCopy(v8, 0, v7) : CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
      v13 = v9;
      if (v9)
      {
        v14 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(v9, v2, 1);
        if (!v14)
        {
          Copy = CFArrayCreateCopy(*(CFAllocatorRef *)(v5 + 8), v13);
          if (Copy)
          {
            v16 = Copy;
            v17 = *(const void **)(v5 + 288);
            *(_QWORD *)(v5 + 288) = Copy;
            CFRetain(Copy);
            if (v17)
              CFRelease(v17);
            CFRelease(v16);
            v12 = 0;
            goto LABEL_21;
          }
          v14 = FigSignalErrorAt();
        }
        v12 = v14;
LABEL_21:
        CFRelease(v13);
        goto LABEL_22;
      }
    }
LABEL_28:
    v12 = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (CFEqual(CFSTR("AssetDownloaderProperty_ProgressMonitor"), v3))
  {
    v10 = CFGetTypeID(v2);
    if (v10 != FigStreamingAssetDownloadProgressMonitorGetTypeID())
      goto LABEL_28;
    v11 = *(const void **)(v5 + 376);
    *(_QWORD *)(v5 + 376) = v2;
    if (v2)
LABEL_10:
      CFRetain(v2);
  }
  else
  {
    if (!CFEqual(CFSTR("AssetDownloaderProperty_ReportingAgent"), v3))
    {
      v12 = -12784;
      goto LABEL_22;
    }
    v18 = CFGetTypeID(v2);
    if (v18 != FigReportingAgentGetTypeID())
      goto LABEL_28;
    v11 = *(const void **)(v5 + 456);
    *(_QWORD *)(v5 + 456) = v2;
    if (v2)
      goto LABEL_10;
  }
  if (v11)
    CFRelease(v11);
  v12 = 0;
LABEL_22:
  *(_DWORD *)(a1 + 32) = v12;
}

uint64_t sad_start(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_startDispatch);
  return v5;
}

uint64_t sad_pause(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_pauseDispatch);
  return v5;
}

uint64_t sad_stop(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_stopDispatch);
  return v5;
}

uint64_t sad_pauseForPlayback(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_pauseForPlaybackDispatch);
  return v5;
}

uint64_t sad_resumeAfterPlayback(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_resumeAfterPlaybackDispatch);
  return v5;
}

uint64_t sad_loadMetadata(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_loadMetadataDispatch);
  return v5;
}

void sad_startDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *v7;
  CFAbsoluteTime Current;
  CFDateRef v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    v11 = FigSignalErrorAt();
    goto LABEL_8;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 24) - 6) <= 0xFFFFFFFC)
  {
    v4 = DerivedStorage;
    *(_DWORD *)(DerivedStorage + 24) = 1;
    v5 = CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(v5 + 320))
    {
      v6 = v5;
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Current = CFAbsoluteTimeGetCurrent();
      v9 = CFDateCreate(v7, Current);
      *(_QWORD *)(v6 + 320) = v9;
      if (!v9)
      {
        v10 = FigSignalErrorAt();
        if ((_DWORD)v10)
          goto LABEL_9;
      }
    }
    if (*(_BYTE *)(v4 + 176))
      goto LABEL_6;
    v11 = sad_startOrResumeDownload(v2);
LABEL_8:
    v10 = v11;
    if (!(_DWORD)v11)
      goto LABEL_10;
LABEL_9:
    sad_cleanupDownloadWithOSStatus(v2, v10);
    goto LABEL_10;
  }
LABEL_6:
  LODWORD(v10) = 0;
LABEL_10:
  *(_DWORD *)(a1 + 8) = v10;
}

void sad_pauseDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t);
  uint64_t v9;
  dispatch_queue_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  CFTypeRef v13;
  dispatch_time_t v14;

  v2 = *(const void **)a1;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    v5 = FigSignalErrorAt();
    if (!(_DWORD)v5)
      goto LABEL_6;
    goto LABEL_18;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 24) != 1)
  {
    LODWORD(v5) = 0;
    goto LABEL_6;
  }
  v4 = DerivedStorage;
  *(_WORD *)(DerivedStorage + 176) = 0;
  *(_QWORD *)(DerivedStorage + 432) = FigGetUpTimeNanoseconds();
  if (*(_BYTE *)(v4 + 362))
  {
    sad_stopDownloading((uint64_t)v2);
    goto LABEL_5;
  }
  if (*(_QWORD *)(v4 + 32))
  {
    v6 = 0;
    while (1)
    {
      if (((*(_DWORD *)(v4 + 192) >> v6) & 1) != 0)
      {
        v7 = *(_QWORD *)(v4 + 32);
        v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v8)
        {
          v5 = 4294954514;
          goto LABEL_18;
        }
        v9 = v8(v7, v6, 1);
        if ((_DWORD)v9)
          break;
      }
      if (++v6 == 3)
        goto LABEL_13;
    }
    v5 = v9;
    goto LABEL_18;
  }
LABEL_13:
  if (*(_QWORD *)(v4 + 184))
  {
    v10 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    v11 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
    if (v11)
    {
      v12 = v11;
      if (v2)
        v13 = CFRetain(v2);
      else
        v13 = 0;
      *v12 = v13;
      v12[1] = 5000000000;
      v14 = dispatch_time(0, 5000000000);
      dispatch_after_f(v14, *v10, v12, (dispatch_function_t)sad_stopDownloadingAfterDelayDispatch);
      goto LABEL_5;
    }
    v5 = FigSignalErrorAt();
    if ((_DWORD)v5)
    {
LABEL_18:
      sad_cleanupDownloadWithOSStatus((uint64_t)v2, v5);
      goto LABEL_6;
    }
  }
LABEL_5:
  LODWORD(v5) = 0;
  *(_DWORD *)(v4 + 24) = 2;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
}

void sad_stopDownloadingAfterDelayDispatch(const void **a1)
{
  const void *v2;
  char *v3;
  uint64_t UpTimeNanoseconds;
  uint64_t DerivedStorage;

  v2 = *a1;
  v3 = (char *)a1[1];
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 24) == 2
    && (unint64_t)(v3 - 1000000000) < UpTimeNanoseconds - *(_QWORD *)(DerivedStorage + 432))
  {
    sad_stopDownloading((uint64_t)v2);
  }
  if (v2)
    CFRelease(v2);
  free(a1);
}

void sad_stopDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    v4 = FigSignalErrorAt();
    if ((_DWORD)v4)
      sad_cleanupDownloadWithOSStatus(v2, v4);
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    LODWORD(v4) = 0;
    *(_BYTE *)(DerivedStorage + 176) = 0;
    if ((*(_DWORD *)(DerivedStorage + 24) - 6) <= 0xFFFFFFFC)
    {
      v5 = DerivedStorage;
      sad_stopDownloading(v2);
      LODWORD(v4) = 0;
      *(_DWORD *)(v5 + 24) = 5;
    }
  }
  *(_DWORD *)(a1 + 8) = v4;
}

void sad_pauseForPlaybackDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;

  v2 = *(_QWORD *)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 64))
  {
    v4 = FigSignalErrorAt();
    if ((_DWORD)v4)
      sad_cleanupDownloadWithOSStatus(v2, v4);
  }
  else
  {
    if (!*(_BYTE *)(DerivedStorage + 176))
    {
      *(_BYTE *)(DerivedStorage + 176) = 1;
      sad_stopDownloading(v2);
    }
    LODWORD(v4) = 0;
  }
  *(_DWORD *)(a1 + 8) = v4;
}

void sad_resumeAfterPlaybackDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 64))
  {
    v6 = FigSignalErrorAt();
    if (!(_DWORD)v6)
      goto LABEL_8;
    goto LABEL_12;
  }
  v4 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 176))
  {
    *(_BYTE *)(DerivedStorage + 176) = 0;
    if (*(_DWORD *)(DerivedStorage + 24) != 1 || (v5 = sad_startOrResumeDownload(v2), !(_DWORD)v5))
    {
      if (*(_BYTE *)(v4 + 179))
        sad_loadMetadataGuts();
      goto LABEL_7;
    }
    v6 = v5;
LABEL_12:
    sad_cleanupDownloadWithOSStatus(*(_QWORD *)a1, v6);
    goto LABEL_8;
  }
LABEL_7:
  LODWORD(v6) = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v6;
}

uint64_t sad_loadMetadataGuts()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 178) && !*(_DWORD *)(result + 92))
    return sad_requestPump(result);
  return result;
}

void sad_loadMetadataDispatch(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 64))
  {
    v3 = FigSignalErrorAt();
    if ((_DWORD)v3)
      sad_cleanupDownloadWithOSStatus(*(_QWORD *)a1, v3);
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 179) = 1;
    sad_loadMetadataGuts();
    LODWORD(v3) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
}

uint64_t FigCSSParserNodeGetTypeID()
{
  MEMORY[0x19402F294](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
  return sFigCSSParserNodeID;
}

uint64_t figCSSParserNodeRegisterFigCSSParserNode()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCSSParserNodeID = result;
  return result;
}

uint64_t FigCSSParserNodeCreate(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v7;
  CFMutableDictionaryRef Mutable;
  uint64_t v10;

  if (!a3)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = (_QWORD *)Instance;
  *(_DWORD *)(Instance + 16) = a2;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7[3] = Mutable;
  if (Mutable)
  {
    *a3 = v7;
    return 0;
  }
  else
  {
    v10 = FigSignalErrorAt();
    CFRelease(v7);
    return v10;
  }
}

uint64_t FigCSSParserNodeGetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_DWORD *)(a1 + 16);
  return 0;
}

uint64_t FigCSSAtRuleParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  v3 = FigCSSParserNodeCreate(a1, 1, &cf);
  if ((_DWORD)v3)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSAtRuleParserNodeSetName(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 1)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("name"));
      return 0;
    }
    v2 = CFGetTypeID(cf);
    if (v2 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSAtRuleParserNodeSetPrelude(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 1)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("prelude"));
      return 0;
    }
    v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSAtRuleParserNodeSetSimpleBlock(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v3;

  if (a1 && *(_DWORD *)(a1 + 16) == 1)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("simple_block"));
      return 0;
    }
    v3 = CFGetTypeID(cf);
    MEMORY[0x19402F294](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v3 == sFigCSSParserNodeID && *((_DWORD *)cf + 4) == 6)
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSQualifiedRuleParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  v3 = FigCSSParserNodeCreate(a1, 2, &cf);
  if ((_DWORD)v3)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSQualifiedRuleParserNodeCopyPrelude(uint64_t a1, _QWORD *a2)
{
  CFTypeID v3;
  CFTypeRef v4;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 2)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("prelude"), (const void **)&value))
    goto LABEL_9;
  if (!value)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(value);
  if (v3 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  if (value)
    v4 = CFRetain(value);
  else
LABEL_9:
    v4 = 0;
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigCSSQualifiedRuleParserNodeSetPrelude(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 2)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("prelude"));
      return 0;
    }
    v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSQualifiedRuleParserNodeCopySimpleBlock(uint64_t a1, _QWORD *a2)
{
  CFTypeID v3;
  CFTypeRef v4;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 2)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("simple_block"), (const void **)&value))
  {
    v4 = 0;
    goto LABEL_11;
  }
  if (!value)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(value);
  MEMORY[0x19402F294](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
  if (v3 != sFigCSSParserNodeID)
    return FigSignalErrorAt();
  if (value)
  {
    if (*((_DWORD *)value + 4) == 6)
    {
      v4 = CFRetain(value);
LABEL_11:
      result = 0;
      *a2 = v4;
      return result;
    }
    return FigSignalErrorAt();
  }
  result = FigSignalErrorAt();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigCSSQualifiedRuleParserNodeSetSimpleBlock(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v3;

  if (a1 && *(_DWORD *)(a1 + 16) == 2)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("simple_block"));
      return 0;
    }
    v3 = CFGetTypeID(cf);
    MEMORY[0x19402F294](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v3 == sFigCSSParserNodeID && *((_DWORD *)cf + 4) == 6)
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSDeclarationParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  v3 = FigCSSParserNodeCreate(a1, 3, &cf);
  if ((_DWORD)v3)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSDeclarationParserNodeCopyName(uint64_t a1, _QWORD *a2)
{
  CFTypeID v3;
  CFTypeRef v4;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 3)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("name"), (const void **)&value))
    goto LABEL_9;
  if (!value)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(value);
  if (v3 != FigCSSTokenGetTypeID())
    return FigSignalErrorAt();
  if (value)
    v4 = CFRetain(value);
  else
LABEL_9:
    v4 = 0;
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigCSSDeclarationParserNodeSetName(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 3)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("name"));
      return 0;
    }
    v2 = CFGetTypeID(cf);
    if (v2 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSDeclarationParserNodeCopyValue(uint64_t a1, _QWORD *a2)
{
  CFTypeID v3;
  CFTypeRef v4;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 3)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("value"), (const void **)&value))
    goto LABEL_9;
  if (!value)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(value);
  if (v3 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  if (value)
    v4 = CFRetain(value);
  else
LABEL_9:
    v4 = 0;
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigCSSDeclarationParserNodeSetValue(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 3)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("value"));
      return 0;
    }
    v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSComponentValueParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  v3 = FigCSSParserNodeCreate(a1, 4, &cf);
  if ((_DWORD)v3)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSComponentValueParserNodeGetType(uint64_t a1, int *a2)
{
  int v3;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 4)
    return FigSignalErrorAt();
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("component_value_type"), (const void **)&value))
  {
    if (CFEqual(value, CFSTR("component_value_type_preserved_token")))
    {
      v3 = 1;
    }
    else if (CFEqual(value, CFSTR("component_value_type_function")))
    {
      v3 = 2;
    }
    else if (CFEqual(value, CFSTR("component_value_type_simple_block")))
    {
      v3 = 3;
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
  }
  *a2 = v3;
  return 0;
}

uint64_t FigCSSComponentValueParserNodeCopyPreservedToken(uint64_t a1, _QWORD *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  CFTypeRef v6;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 4)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("component_value_type"), (const void **)&value))goto LABEL_13;
  if (!value)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(value);
  if (v4 != CFStringGetTypeID() || !CFEqual(value, CFSTR("component_value_type_preserved_token")))
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("preserved_token"), (const void **)&value))
  {
LABEL_13:
    v6 = 0;
    goto LABEL_14;
  }
  if (!value)
    return FigSignalErrorAt();
  v5 = CFGetTypeID(value);
  if (v5 != FigCSSTokenGetTypeID())
    return FigSignalErrorAt();
  if (!value)
    goto LABEL_13;
  v6 = CFRetain(value);
LABEL_14:
  result = 0;
  *a2 = v6;
  return result;
}

uint64_t FigCSSComponentValueParserNodeSetPreservedToken(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v3;

  if (a1 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("preserved_token"));
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("component_value_type"));
      return 0;
    }
    v3 = CFGetTypeID(cf);
    if (v3 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSComponentValueParserNodeCopyFunctionNode(uint64_t a1, _QWORD *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  CFTypeRef v6;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 4)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("component_value_type"), (const void **)&value))goto LABEL_14;
  if (!value)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(value);
  if (v4 != CFStringGetTypeID() || !CFEqual(value, CFSTR("component_value_type_function")))
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("function"), (const void **)&value))
  {
LABEL_14:
    v6 = 0;
    goto LABEL_15;
  }
  if (!value)
    return FigSignalErrorAt();
  v5 = CFGetTypeID(value);
  MEMORY[0x19402F294](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
  if (v5 != sFigCSSParserNodeID)
    return FigSignalErrorAt();
  if (value)
  {
    if (*((_DWORD *)value + 4) == 5)
    {
      v6 = CFRetain(value);
LABEL_15:
      result = 0;
      *a2 = v6;
      return result;
    }
    return FigSignalErrorAt();
  }
  result = FigSignalErrorAt();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigCSSComponentValueParserNodeSetFunctionNode(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v3;

  if (a1 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("function"));
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("component_value_type"));
      return 0;
    }
    v3 = CFGetTypeID(cf);
    MEMORY[0x19402F294](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v3 == sFigCSSParserNodeID)
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSComponentValueParserNodeCopySimpleBlock(uint64_t a1, _QWORD *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  CFTypeRef v6;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 4)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("component_value_type"), (const void **)&value))goto LABEL_14;
  if (!value)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(value);
  if (v4 != CFStringGetTypeID() || !CFEqual(value, CFSTR("component_value_type_simple_block")))
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("simple_block"), (const void **)&value))
  {
LABEL_14:
    v6 = 0;
    goto LABEL_15;
  }
  if (!value)
    return FigSignalErrorAt();
  v5 = CFGetTypeID(value);
  MEMORY[0x19402F294](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
  if (v5 != sFigCSSParserNodeID)
    return FigSignalErrorAt();
  if (value)
  {
    if (*((_DWORD *)value + 4) == 6)
    {
      v6 = CFRetain(value);
LABEL_15:
      result = 0;
      *a2 = v6;
      return result;
    }
    return FigSignalErrorAt();
  }
  result = FigSignalErrorAt();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigCSSComponentValueParserNodeSetSimpleBlock(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;

  if (a1 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("simple_block"));
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("component_value_type"));
      return 0;
    }
    v4 = CFGetTypeID(cf);
    MEMORY[0x19402F294](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v4 == sFigCSSParserNodeID && *((_DWORD *)cf + 4) == 6)
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSFunctionParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  v3 = FigCSSParserNodeCreate(a1, 5, &cf);
  if ((_DWORD)v3)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSFunctionParserNodeCopyName(uint64_t a1, _QWORD *a2)
{
  CFTypeID v3;
  CFTypeRef v4;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 5)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("name"), (const void **)&value))
    goto LABEL_9;
  if (!value)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(value);
  if (v3 != FigCSSTokenGetTypeID())
    return FigSignalErrorAt();
  if (value)
    v4 = CFRetain(value);
  else
LABEL_9:
    v4 = 0;
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigCSSFunctionParserNodeSetName(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 5)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("name"));
      return 0;
    }
    v2 = CFGetTypeID(cf);
    if (v2 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSFunctionParserNodeCopyValue(uint64_t a1, _QWORD *a2)
{
  CFTypeID v3;
  CFTypeRef v4;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 5)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("value"), (const void **)&value))
    goto LABEL_9;
  if (!value)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(value);
  if (v3 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  if (value)
    v4 = CFRetain(value);
  else
LABEL_9:
    v4 = 0;
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigCSSFunctionParserNodeSetValue(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 5)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("value"));
      return 0;
    }
    v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSSimpleBlockParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  v3 = FigCSSParserNodeCreate(a1, 6, &cf);
  if ((_DWORD)v3)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSSimpleBlockParserNodeCopyAssociatedToken(uint64_t a1, _QWORD *a2)
{
  CFTypeID v3;
  CFTypeRef v4;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 6)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("associated_token"), (const void **)&value))
    goto LABEL_9;
  if (!value)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(value);
  if (v3 != FigCSSTokenGetTypeID())
    return FigSignalErrorAt();
  if (value)
    v4 = CFRetain(value);
  else
LABEL_9:
    v4 = 0;
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigCSSSimpleBlockParserNodeSetAssociatedToken(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 6)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("associated_token"));
      return 0;
    }
    v2 = CFGetTypeID(cf);
    if (v2 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCSSSimpleBlockParserNodeCopyValue(uint64_t a1, _QWORD *a2)
{
  CFTypeID v3;
  CFTypeRef v4;
  uint64_t result;
  void *value;

  value = 0;
  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 6)
    return FigSignalErrorAt();
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), CFSTR("value"), (const void **)&value))
    goto LABEL_9;
  if (!value)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(value);
  if (v3 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  if (value)
    v4 = CFRetain(value);
  else
LABEL_9:
    v4 = 0;
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigCSSSimpleBlockParserNodeSetValue(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 6)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("value"));
      return 0;
    }
    v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t figCSSParserNode_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void figCSSParserNode_Finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

CFStringRef figCSSParserNode_CopyFormattingDesc(uint64_t a1)
{
  const __CFString *v2;
  uint64_t v3;
  const void *v4;
  CFStringRef v5;

  v2 = FigCSSParserNodeMapNodeTypeToName(*(_DWORD *)(a1 + 16));
  if (FigCFDictionaryGetCount() < 1)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigCSSParserNode: node = <%p> nodeType = %@"), a1, v2);
  v3 = FigCFCopyCompactDescription();
  if (!v3)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigCSSParserNode: node = <%p> nodeType = %@"), a1, v2);
  v4 = (const void *)v3;
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigCSSParserNode: node = <%p> nodeType = %@ attributes = { %@ }"), a1, v2, v3);
  CFRelease(v4);
  return v5;
}

CFStringRef figCSSParserNode_CopyDebugDesc(uint64_t a1)
{
  const void *v2;
  const __CFString *v3;
  CFStringRef v4;

  if (FigCFDictionaryGetCount() <= 0)
  {
    v3 = FigCSSParserNodeMapNodeTypeToName(*(_DWORD *)(a1 + 16));
  }
  else
  {
    v2 = (const void *)FigCFCopyCompactDescription();
    v3 = FigCSSParserNodeMapNodeTypeToName(*(_DWORD *)(a1 + 16));
    if (v2)
    {
      v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigCSSParserNode: node = <%p> nodeType = \"%@\" attributes = { %@ } attributesDict = <%p>"), a1, v3, v2, *(_QWORD *)(a1 + 24));
      CFRelease(v2);
      return v4;
    }
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigCSSParserNode: node = <%p> nodeType = %@  attributesDict = <%p>"), a1, v3, *(_QWORD *)(a1 + 24));
}

const __CFString *FigCSSParserNodeMapNodeTypeToName(unsigned int a1)
{
  if (a1 < 7)
    return off_1E2F99B40[a1];
  FigSignalErrorAt();
  return CFSTR("invalid");
}

uint64_t FigByteStreamRemoteCreateFromByteStreamDetails(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  BOOL v9;
  int64_t int64;
  uint64_t uint64;
  uint64_t v12;
  uint64_t DerivedStorage;
  uint64_t SecondaryConnection;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t ByteStreamForOpenFileAssumingOwnership;
  uint64_t v19;
  uint64_t CMBaseObject;
  void (*v21)(uint64_t, __CFString *, _QWORD);
  _QWORD *v23;

  if (frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce != -1)
    dispatch_once(&frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce, &__block_literal_global_35);
  v5 = frbs_EnsureClientEstablished_err;
  if (frbs_EnsureClientEstablished_err)
    return v5;
  if (!a2)
    return FigSignalErrorAt();
  v23 = a3;
  FigXPCMessageCopyCFURL();
  v6 = xpc_dictionary_get_BOOL(a2, "Writable");
  v7 = xpc_dictionary_get_BOOL(a2, "UseFigReadCache");
  v8 = xpc_dictionary_get_BOOL(a2, "EnableFigReadCache");
  v9 = xpc_dictionary_get_BOOL(a2, "EntireLengthAvailable");
  int64 = xpc_dictionary_get_int64(a2, "EntireLength");
  uint64 = xpc_dictionary_get_uint64(a2, "ObjectID");
  CMByteStreamGetClassID();
  v12 = CMDerivedObjectCreate();
  if ((_DWORD)v12)
    return v12;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (xpc_dictionary_get_BOOL(a2, "ReadsMayBlockIndefinitely"))
    SecondaryConnection = FigXPCRemoteClientCreateSecondaryConnection();
  else
    SecondaryConnection = FigXPCRemoteClientCopyPrimaryConnection();
  v5 = SecondaryConnection;
  if ((_DWORD)SecondaryConnection)
    return v5;
  *(_QWORD *)(DerivedStorage + 8) = CFRetain(0);
  *(_QWORD *)(DerivedStorage + 16) = 0;
  *(_BYTE *)(DerivedStorage + 169) = v6;
  *(_BYTE *)(DerivedStorage + 168) = v9;
  *(_QWORD *)(DerivedStorage + 160) = int64;
  *(_QWORD *)DerivedStorage = uint64;
  if (!xpc_dictionary_get_value(a2, "FileDescriptor"))
  {
    v12 = FigXPCConnectionCopyMemoryRecipientForConnectedProcess();
    if (!(_DWORD)v12)
    {
      v12 = FigMemoryRecipientCopyBlockBufferFromXPCMessage();
      if (!(_DWORD)v12)
        goto LABEL_30;
    }
    return v12;
  }
  v15 = xpc_dictionary_dup_fd(a2, "FileDescriptor");
  if (v15 == -1)
    return FigSignalErrorAt();
  v16 = v15;
  CMBaseObjectGetDerivedStorage();
  v17 = FigFileWrapDarwinFileDesc();
  if ((_DWORD)v17)
  {
    v5 = v17;
    close(v16);
  }
  else
  {
    if (v6)
    {
      ByteStreamForOpenFileAssumingOwnership = FigByteStreamCreateFromOpenFileAssumingOwnership();
    }
    else
    {
      FigGetDefaultManagedFilePool();
      ByteStreamForOpenFileAssumingOwnership = FigManagedFilePoolCreateByteStreamForOpenFileAssumingOwnership();
    }
    if ((_DWORD)ByteStreamForOpenFileAssumingOwnership)
      v5 = ByteStreamForOpenFileAssumingOwnership;
    else
      v5 = 0;
  }
  FigFileForkClose();
  if (!(_DWORD)v5)
  {
    if (v7 && !*(_BYTE *)(DerivedStorage + 169))
    {
      v19 = FigCachedFileByteStreamCreateFromByteStream(0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFTypeRef *)(DerivedStorage + 24));
      if ((_DWORD)v19)
        return v19;
      if (v8)
      {
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v21 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v21)
          v21(CMBaseObject, CFSTR("CFBS_EnableCaching"), *MEMORY[0x1E0C9AE50]);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      v19 = FigNotificationCenterAddWeakListener();
      if ((_DWORD)v19)
        return v19;
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 24) = CFRetain(0);
    }
LABEL_30:
    v19 = FigXPCRemoteClientAssociateObject();
    if (!(_DWORD)v19)
    {
      if (!FigServer_IsServerProcess()
        || (v19 = FigXPCConnectionSetCustomServerTimeoutPerConnection(), !(_DWORD)v19))
      {
        v5 = 0;
        *v23 = 0;
        return v5;
      }
    }
    return v19;
  }
  return v5;
}

_QWORD *remoteByteStream_localCachedFileByteStream_CacheChangeNotification()
{
  _QWORD *result;
  _QWORD *v1;
  CFTypeID v2;
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, __CFString *, _QWORD *);

  result = (_QWORD *)FigCFDictionaryGetValue();
  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    result = (_QWORD *)CFBooleanGetTypeID();
    if ((_QWORD *)v2 == result)
    {
      CMBaseObject = CMByteStreamGetCMBaseObject();
      result = (_QWORD *)CMBaseObjectGetVTable();
      v4 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD *))(result[1] + 56);
      if (v4)
        return (_QWORD *)v4(CMBaseObject, CFSTR("CFBS_EnableCaching"), v1);
    }
  }
  return result;
}

uint64_t FigByteStreamRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (a1 && *(_UNKNOWN **)(CMBaseObjectGetVTable() + 16) == &kRemoteByteStream_Class && a2)
    return frbs_GetObjectID(a1, a2);
  else
    return FigSignalErrorAt();
}

uint64_t frbs_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 170))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t FigByteStreamRemoteCreateWithURL(uint64_t a1, const __CFURL *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t value;
  CFTypeRef v13;
  CFTypeRef v15[2];

  v15[0] = 0;
  if (!a2)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce != -1)
    dispatch_once(&frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce, &__block_literal_global_35);
  v8 = frbs_EnsureClientEstablished_err;
  if (!frbs_EnsureClientEstablished_err)
  {
    v9 = FigXPCRemoteClientCopyMemoryRecipient();
    if (!(_DWORD)v9)
    {
      v9 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v9)
      {
        v9 = FigXPCMessageSetCFURL();
        if (!(_DWORD)v9)
        {
          xpc_dictionary_set_uint64(0, "FileOpenOptions", a3);
          v15[1] = 0;
          if (CFURLHasDirectoryPath(a2))
            v10 = FigSandboxRegisterDirectoryURLWithProcessAndCopyRegistration();
          else
            v10 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
          v8 = v10;
          if (!(_DWORD)v10)
          {
            v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if ((_DWORD)v11)
            {
              v8 = v11;
            }
            else
            {
              value = xpc_dictionary_get_value(0, "ByteStreamDetails");
              v8 = FigByteStreamRemoteCreateFromByteStreamDetails(a1, value, v15);
              v13 = v15[0];
              if ((_DWORD)v8)
              {
                if (v15[0])
                  CFRelease(v15[0]);
              }
              else
              {
                *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 152) = 0;
                *a4 = v13;
              }
            }
          }
          goto LABEL_15;
        }
      }
    }
LABEL_17:
    v8 = v9;
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigByteStreamRemoteCreateWithPlaybackProcessObjectID(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t value;
  CFTypeRef v8;

  v8 = 0;
  if (!a1)
  {
    v5 = FigSignalErrorAt();
    goto LABEL_12;
  }
  if (frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce != -1)
    dispatch_once(&frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce, &__block_literal_global_35);
  v4 = frbs_EnsureClientEstablished_err;
  if (!frbs_EnsureClientEstablished_err)
  {
    v5 = FigXPCRemoteClientCopyMemoryRecipient();
    if (!(_DWORD)v5)
    {
      v5 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v5)
      {
        xpc_dictionary_set_uint64(0, (const char *)*MEMORY[0x1E0CA36A0], a1);
        v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v5)
        {
          value = xpc_dictionary_get_value(0, "ByteStreamDetails");
          v4 = FigByteStreamRemoteCreateFromByteStreamDetails(*MEMORY[0x1E0C9AE00], value, &v8);
          if ((_DWORD)v4)
          {
            if (v8)
              CFRelease(v8);
          }
          else
          {
            *a2 = v8;
          }
          goto LABEL_10;
        }
      }
    }
LABEL_12:
    v4 = v5;
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t frbs_DeadObjectCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 170) = 1;
  return result;
}

uint64_t remoteByteStream_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)(DerivedStorage + 72))
  {
    FigSimpleMutexDestroy();
    v3 = *(const void **)(DerivedStorage + 32);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    *(_QWORD *)(DerivedStorage + 72) = 0;
    *(_BYTE *)(DerivedStorage + 80) = 0;
  }
  FigByteStreamStatsTeardownWorker();
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    FigXPCConnectionDisassociateObject();
    if (!*(_BYTE *)(DerivedStorage + 170) && !FigXPCCreateBasicMessage())
      FigXPCConnectionSendSyncMessage();
    CFRelease(*(CFTypeRef *)(DerivedStorage + 8));
  }
  v4 = *(const void **)(DerivedStorage + 152);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  return FigXPCRelease();
}

__CFString *remoteByteStream_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  CFStringRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = CFCopyDescription(*(CFTypeRef *)(DerivedStorage + 16));
  CFStringAppendFormat(Mutable, 0, CFSTR("<RemoteByteStream %p/%016llx>{%@} entireLength %lld"), a1, *(_QWORD *)DerivedStorage, v4, *(_QWORD *)(DerivedStorage + 160));
  if (*(_QWORD *)(DerivedStorage + 8))
    CFStringAppendFormat(Mutable, 0, CFSTR(" connection: {%@}}"), *(_QWORD *)(DerivedStorage + 8));
  if (*(_QWORD *)(DerivedStorage + 24))
    CFStringAppendFormat(Mutable, 0, CFSTR(" localByteStream: {%@}}"), *(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(DerivedStorage + 168))
    CFStringAppendFormat(Mutable, 0, CFSTR(" EntireLengthAvailable"));
  if (*(_BYTE *)(DerivedStorage + 169))
    CFStringAppendFormat(Mutable, 0, CFSTR(" Writable"));
  if (*(_BYTE *)(DerivedStorage + 170))
    CFStringAppendFormat(Mutable, 0, CFSTR(" SERVER DIED"));
  if (v4)
    CFRelease(v4);
  return Mutable;
}

uint64_t remoteByteStream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t ObjectID;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const void *, uint64_t, _QWORD *);
  const void *v14;
  uint64_t v15;
  CFTypeRef *v16;
  CFTypeRef v17;
  uint64_t v18;

  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  ObjectID = frbs_GetObjectID(a1, &v18);
  if ((_DWORD)ObjectID)
    return ObjectID;
  if (*(_QWORD *)(v9 + 24)
    && (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2070]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2068])))
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v12 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v12)
      return v12(CMBaseObject, a2, a3, a4);
    return 4294954514;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2098]))
  {
    v14 = *(const void **)(v9 + 16);
    if (v14)
    {
      v15 = 0;
    }
    else
    {
      v15 = FigXPCConnectionSendStdCopyPropertyMessage();
      v14 = *(const void **)(v9 + 16);
      if (!v14)
        return 4294954513;
    }
    v17 = CFRetain(v14);
LABEL_19:
    *a4 = v17;
    return v15;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2088]))
  {
    v16 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_18:
    v17 = CFRetain(*v16);
    v15 = 0;
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA20A0]))
  {
    v16 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_18;
  }
  return FigXPCConnectionSendStdCopyPropertyMessage();
}

uint64_t remoteByteStream_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, __CFString *, uint64_t);
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = frbs_GetObjectID(a1, &v10);
  if (!(_DWORD)result)
  {
    if (CFEqual(a2, CFSTR("CFBS_EnableCaching")))
    {
      result = *(_QWORD *)(DerivedStorage + 24);
      if (result)
      {
        CMByteStreamGetCMBaseObject();
        FigCachedFileByteStreamGetClassID();
        result = CMBaseObjectIsMemberOfClass();
        if ((_DWORD)result)
        {
          CMBaseObject = CMByteStreamGetCMBaseObject();
          v9 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v9)
            v9(CMBaseObject, CFSTR("CFBS_EnableCaching"), a3);
          return 0;
        }
      }
    }
    else
    {
      return 4294954512;
    }
  }
  return result;
}

uint64_t frbs_reopenFileInLocalByteStream(uint64_t a1, _QWORD *a2)
{
  uint64_t ObjectID;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t xdict;
  uint64_t v14;

  if (!a1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_15;
  }
  CMBaseObjectGetDerivedStorage();
  ObjectID = frbs_GetObjectID(a1, &v11);
  if ((_DWORD)ObjectID)
  {
LABEL_15:
    v8 = ObjectID;
    goto LABEL_13;
  }
  xdict = 0;
  v14 = 0;
  v12 = 0;
  v5 = frbs_GetObjectID(a1, &v12);
  if (!(_DWORD)v5)
  {
    v5 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v5)
    {
      v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v5)
      {
        if (xpc_dictionary_get_value(xdict, "FileDescriptor"))
        {
          v6 = xpc_dictionary_dup_fd(xdict, "FileDescriptor");
          if (v6 != -1)
          {
            v7 = v6;
            v8 = 0;
            goto LABEL_9;
          }
        }
        v5 = FigSignalErrorAt();
      }
    }
  }
  v8 = v5;
  v7 = -1;
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  if (!(_DWORD)v8)
  {
    v9 = FigFileWrapDarwinFileDesc();
    if ((_DWORD)v9)
    {
      v8 = v9;
      close(v7);
    }
    else
    {
      v8 = 0;
      if (a2)
        *a2 = 0;
    }
  }
LABEL_13:
  FigFileForkClose();
  return v8;
}

uint64_t remoteByteStream_Read(uint64_t a1, unint64_t a2, int64_t a3, char *a4, size_t *a5)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, unint64_t, int64_t, char *, size_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  BOOL v20;
  size_t v21;
  size_t v22;
  int64_t v23;
  uint64_t v24;
  size_t v25;
  const void *data;
  uint64_t v27;
  uint64_t v28;
  size_t int64;
  char *v31;
  uint64_t v32;
  size_t v33;
  size_t length;
  uint64_t v35;
  xpc_object_t v36;
  xpc_object_t xdict;

  v33 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ObjectID = frbs_GetObjectID(a1, &v32);
  if ((_DWORD)ObjectID)
    return ObjectID;
  FigGetUpTimeNanoseconds();
  if (*(_BYTE *)(DerivedStorage + 80) && *(_QWORD *)(DerivedStorage + 48) >= a2)
  {
    v15 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v15 + 72));
    v16 = *(_QWORD *)(v15 + 56);
    v17 = __OFSUB__(a3, v16);
    v18 = a3 - v16;
    v31 = a4;
    if (v18 < 0 != v17 || (v19 = *(_QWORD *)(v15 + 64), v20 = v19 <= a3, v21 = v19 - a3, v20))
    {
      v22 = 0;
      v23 = a3;
      if (!a2)
      {
LABEL_13:
        v14 = 0;
LABEL_33:
        v33 = v22;
        MEMORY[0x19402EF04](*(_QWORD *)(v15 + 72));
        goto LABEL_35;
      }
    }
    else
    {
      if (v21 >= a2)
        v22 = a2;
      else
        v22 = v21;
      memcpy(a4, (const void *)(*(_QWORD *)(v15 + 40) + v18), v22);
      a2 -= v22;
      v23 = v22 + a3;
      if (!a2)
        goto LABEL_13;
    }
    v36 = 0;
    xdict = 0;
    v35 = 0;
    v27 = CMBaseObjectGetDerivedStorage();
    v28 = frbs_GetObjectID(a1, &v35);
    if ((_DWORD)v28
      || (v28 = FigXPCCreateBasicMessage(), (_DWORD)v28)
      || (xpc_dictionary_set_int64(xdict, "Offset", v23),
          xpc_dictionary_set_int64(xdict, "Length", a2),
          v28 = FigXPCConnectionSendSyncMessageCreatingReply(),
          (_DWORD)v28))
    {
      v14 = v28;
      int64 = 0;
    }
    else
    {
      int64 = xpc_dictionary_get_int64(v36, "NumBytesRead");
      if (int64 > *(_QWORD *)(v27 + 48))
        v14 = FigSignalErrorAt();
      else
        v14 = 0;
    }
    FigXPCRelease();
    FigXPCRelease();
    if (!(_DWORD)v14)
    {
      *(_QWORD *)(v15 + 56) = v23;
      *(_QWORD *)(v15 + 64) = int64 + v23;
      if (int64 >= a2)
        int64 = a2;
      memcpy(&v31[v22], *(const void **)(v15 + 40), int64);
      v22 += int64;
    }
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(DerivedStorage + 24);
  if (v12)
  {
    v13 = *(uint64_t (**)(uint64_t, unint64_t, int64_t, char *, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 8);
    if (v13)
      v14 = v13(v12, a2, a3, a4, &v33);
    else
      v14 = 4294954514;
  }
  else
  {
    v36 = 0;
    xdict = 0;
    length = 0;
    v35 = 0;
    CMBaseObjectGetDerivedStorage();
    v24 = frbs_GetObjectID(a1, &v35);
    if ((_DWORD)v24
      || (v24 = FigXPCCreateBasicMessage(), (_DWORD)v24)
      || (xpc_dictionary_set_int64(xdict, "Offset", a3),
          xpc_dictionary_set_int64(xdict, "Length", a2),
          v24 = FigXPCConnectionSendSyncMessageCreatingReply(),
          (_DWORD)v24))
    {
      v14 = v24;
      v25 = 0;
    }
    else
    {
      v25 = xpc_dictionary_get_int64(v36, "NumBytesRead");
      data = xpc_dictionary_get_data(v36, "BasicDataPointer", &length);
      if (v25 == length && v25 <= a2)
      {
        v14 = 0;
        if (data && v25)
        {
          memcpy(a4, data, v25);
          v14 = 0;
        }
      }
      else
      {
        v14 = FigSignalErrorAt();
      }
    }
    v33 = v25;
    FigXPCRelease();
    FigXPCRelease();
  }
LABEL_35:
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  if ((_DWORD)v14)
  {
    FigSignalErrorAt();
    if (!a5)
      return v14;
    goto LABEL_42;
  }
  if (v33)
    v14 = 0;
  else
    v14 = 4294954423;
  if (a5)
LABEL_42:
    *a5 = v33;
  return v14;
}

uint64_t remoteByteStream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v14;
  uint64_t v15;

  v15 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = frbs_GetObjectID(a1, &v14);
  if (!(_DWORD)result)
  {
    v12 = *(_QWORD *)(DerivedStorage + 24);
    if (v12)
    {
      v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 16);
      if (v13)
      {
        result = v13(v12, a2, a3, a4, &v15);
        if (a5)
        {
          if (!(_DWORD)result)
            *a5 = v15;
        }
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t remoteByteStream_GetAvailableLengthAtOffset(uint64_t a1, int64_t a2, int64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, int64_t, int64_t *);
  int64_t int64;
  int64_t v11;
  BOOL v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t xdict;

  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ObjectID = frbs_GetObjectID(a1, &v17);
  if ((_DWORD)ObjectID)
    return ObjectID;
  if (!a3)
    return FigSignalErrorAt();
  if (!*(_BYTE *)(DerivedStorage + 169))
  {
    if (*(_BYTE *)(DerivedStorage + 168))
    {
      v11 = *(_QWORD *)(DerivedStorage + 160);
      v12 = v11 <= a2;
      v13 = v11 - a2;
      if (v12)
        int64 = 0;
      else
        int64 = v13;
      goto LABEL_18;
    }
    v20 = 0;
    xdict = 0;
    v19 = 0;
    CMBaseObjectGetDerivedStorage();
    v15 = frbs_GetObjectID(a1, &v19);
    if ((_DWORD)v15 || (v15 = FigXPCCreateBasicMessage(), (_DWORD)v15))
    {
      v14 = v15;
    }
    else
    {
      xpc_dictionary_set_int64(xdict, "Offset", a2);
      v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v14)
      {
        int64 = xpc_dictionary_get_int64(v20, "Length");
        goto LABEL_17;
      }
    }
    int64 = 0;
LABEL_17:
    FigXPCRelease();
    FigXPCRelease();
    if (!(_DWORD)v14)
      goto LABEL_18;
    return v14;
  }
  v8 = *(_QWORD *)(DerivedStorage + 24);
  if (v8)
  {
    v9 = *(uint64_t (**)(uint64_t, int64_t, int64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v9)
    {
      ObjectID = v9(v8, a2, &v18);
      if (!(_DWORD)ObjectID)
      {
        int64 = v18;
LABEL_18:
        v14 = 0;
        *a3 = int64;
        return v14;
      }
      return ObjectID;
    }
    return 4294954514;
  }
  return FigSignalErrorAt();
}

uint64_t remoteByteStream_ReadAndCreateBlockBuffer(const void *a1, unint64_t a2, int64_t a3, CMBlockBufferRef *a4, size_t *a5)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v12;
  const __CFAllocator *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  const __CFAllocator *v18;
  const __CFAllocator *v19;
  const __CFAllocator *v20;
  uint64_t v21;
  const __CFAllocator *v22;
  uint64_t v24;
  CMBlockBufferRef blockBufferOut;
  size_t dataLength;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  blockBufferOut = 0;
  dataLength = 0;
  ObjectID = frbs_GetObjectID((uint64_t)a1, &v24);
  if ((_DWORD)ObjectID)
    goto LABEL_18;
  if (!a2)
  {
    v21 = 0;
    goto LABEL_13;
  }
  v12 = *(_QWORD *)(DerivedStorage + 24);
  v13 = CFGetAllocator(a1);
  if (v12)
  {
    ObjectID = CMCreateContiguousBlockBufferFromStream();
    if ((_DWORD)ObjectID)
      goto LABEL_18;
    goto LABEL_12;
  }
  v14 = (char *)CFAllocatorAllocate(v13, a2, 0);
  if (v14)
  {
    v15 = v14;
    v16 = remoteByteStream_Read((uint64_t)a1, a2, a3, v14, &dataLength);
    if ((_DWORD)v16)
      goto LABEL_10;
    v17 = dataLength;
    v18 = CFGetAllocator(a1);
    v19 = v18;
    if (!v17)
    {
      CFAllocatorDeallocate(v18, v15);
      goto LABEL_12;
    }
    v20 = CFGetAllocator(a1);
    v16 = CMBlockBufferCreateWithMemoryBlock(v19, v15, a2, v20, 0, 0, dataLength, 0, &blockBufferOut);
    if ((_DWORD)v16)
    {
LABEL_10:
      v21 = v16;
      v22 = CFGetAllocator(a1);
      CFAllocatorDeallocate(v22, v15);
      goto LABEL_13;
    }
LABEL_12:
    v21 = 0;
    *a4 = blockBufferOut;
    goto LABEL_13;
  }
  ObjectID = FigSignalErrorAt();
LABEL_18:
  v21 = ObjectID;
LABEL_13:
  if (a5)
    *a5 = dataLength;
  return v21;
}

uint64_t remoteByteStream_Synchronize(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = frbs_GetObjectID(a1, &v9);
  if (!(_DWORD)result)
  {
    v6 = *(_QWORD *)(DerivedStorage + 24);
    if (v6)
    {
      v7 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v7 >= 2uLL && (v8 = (uint64_t (*)(uint64_t, uint64_t))v7[5]) != 0)
        return v8(v6, a2);
      else
        return 4294954514;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t MPEG2PSSniff(OpaqueCMBlockBuffer *a1, int *a2)
{
  size_t v4;
  unint64_t v5;
  int v6;
  int v7;
  char v8;
  unsigned int v9;
  size_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _OWORD v16[2];
  BOOL v17;
  size_t dataLength;
  char *returnedPointerOut;
  _BYTE temporaryBlock[4];
  unsigned __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = CMBlockBufferGetDataLength(a1);
  if (v4 >= 4)
  {
    v5 = v4;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    returnedPointerOut = 0;
    while (1)
    {
      result = CMBlockBufferAccessDataBytes(a1, v10, 4uLL, temporaryBlock, &returnedPointerOut);
      if ((_DWORD)result)
        return result;
      if (*returnedPointerOut || returnedPointerOut[1] || returnedPointerOut[2] != 1)
      {
        ++v10;
        goto LABEL_21;
      }
      if (!v10)
        v8 = 1;
      v12 = returnedPointerOut[3];
      if ((v12 + 69) >= 0x41u)
      {
        if (v12 == 186)
        {
          v10 += 4;
          if (!CMBlockBufferAccessDataBytes(a1, v10, 0xAuLL, temporaryBlock, &returnedPointerOut))
          {
            if ((*returnedPointerOut & 0xF0) == 0x20)
            {
              v7 = 1;
            }
            else
            {
              if ((*returnedPointerOut & 0xC4) != 0x44
                || (returnedPointerOut[2] & 4) == 0
                || (returnedPointerOut[5] & 1) == 0
                || (~returnedPointerOut[8] & 3) != 0)
              {
                return 4294954325;
              }
              v7 = 0;
              v10 += (returnedPointerOut[9] & 7) + 10;
              ++v9;
            }
          }
          goto LABEL_21;
        }
        if (v12 != 255)
        {
          v10 += 4;
          goto LABEL_21;
        }
      }
      else if (v12 == 189 || (v12 + 64) <= 0x2Fu)
      {
        dataLength = 0;
        v17 = 0;
        result = CheckPesHeaderLength(a1, v10, 0, v5 - v10, &dataLength, &v17);
        if ((_DWORD)result)
          return result;
        if (v17 && dataLength <= 0x109 && dataLength + v10 < v5)
        {
          memset(v16, 0, sizeof(v16));
          result = CMBlockBufferCopyDataBytes(a1, v10, dataLength, temporaryBlock);
          if ((_DWORD)result)
            return result;
          v13 = __rev16(v21);
          if (!(_DWORD)v13)
            return FigSignalErrorAt();
          result = ReadTimestampFromPesHeader(returnedPointerOut[3], temporaryBlock, (uint64_t)v16, dataLength, v13, 2);
          if ((_DWORD)result)
            return result;
          v10 += v13 + 6;
          ++v9;
          v6 = 1;
        }
        else
        {
          v10 = v5;
        }
        goto LABEL_21;
      }
      v10 += 4;
      if (!CMBlockBufferAccessDataBytes(a1, v10, 2uLL, temporaryBlock, &returnedPointerOut))
      {
        v14 = __rev16(*(unsigned __int16 *)returnedPointerOut);
        if (!v14)
          return FigSignalErrorAt();
        v10 += v14 + 2;
      }
LABEL_21:
      if (v10 + 3 >= v5)
        goto LABEL_39;
    }
  }
  v9 = 0;
  v8 = 0;
  v7 = 0;
  v6 = 0;
LABEL_39:
  if (a2)
  {
    if (v7)
      v15 = 3;
    else
      v15 = 2;
    *a2 = v15;
  }
  if (!v6)
    return 4294954325;
  result = 4294954325;
  if (v8 || v9 >= 2)
  {
    if (v9)
      return 0;
    else
      return 4294954325;
  }
  return result;
}

uint64_t AddPesFromHeader(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  BOOL v10;
  _BOOL4 v11;
  unsigned int v12;
  uint64_t result;
  _QWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(a1 + 16);
  if ((a2 & 0xFFFFFFE0) == 0xC0)
  {
    v6 = 0;
    v7 = 1835103588;
    v8 = 1;
    v9 = 1;
  }
  else
  {
    v7 = 1970170734;
    if ((a2 & 0xFFFFFFF0) == 0xE0)
    {
      v8 = 0;
      v9 = 0;
      v6 = 1;
    }
    else
    {
      v10 = a2 == 191 || a2 != 189;
      v11 = a2 != 191 && a2 == 189;
      if (a2 == 191)
        v12 = 1886614578;
      else
        v12 = 1970170734;
      v8 = a2 > 239 || v10;
      v6 = a2 <= 239 && v11;
      v9 = 1;
      if (a2 <= 239)
        v7 = v12;
      else
        v7 = 1970170734;
    }
  }
  v17 = 0;
  result = AddPes(a1, v5, v6, v7, 1, a2, a2, a2, 1, &v17);
  if (!(_DWORD)result)
  {
    v14 = v17;
    *a3 = v17;
    if ((v9 & 1) != 0)
    {
      if ((v8 & 1) != 0)
        return 0;
      else
        return CreatePesPrivateForPrivateStream(v14);
    }
    else
    {
      v14[80] = 0x4000;
      v15 = malloc_type_calloc(1uLL, 0x48uLL, 0x1020040A792B6BDuLL);
      if (v15)
      {
        v16 = v15;
        result = 0;
        v16[6] = -1;
        v14[6] = v16;
        v14[105] = MPEG2PSProcessVideoSearch;
        v14[106] = MPEG2PSCleanVideoSearch;
        v14[107] = MPEG2PSDeleteVideoSearchPrivateData;
      }
      else
      {
        return 12;
      }
    }
  }
  return result;
}

uint64_t MPEG2PSInitialize(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  a1[21] = MPEG2PSInject;
  a1[22] = MPEG2PSReset;
  v2 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040A345989DuLL);
  if (!v2)
    return 12;
  *(_QWORD *)v2 = a1;
  v2[10] = 1;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = v2 + 6;
  v5 = a1[2];
  v4 = a1 + 2;
  v3 = v5;
  *((_QWORD *)v2 + 1) = v5;
  if (v5)
    *(_QWORD *)(v3 + 16) = v2 + 2;
  v6 = 0;
  *v4 = v2;
  *((_QWORD *)v2 + 2) = v4;
  return v6;
}

uint64_t MPEG2PSInject(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3)
{
  OpaqueCMBlockBuffer *v4;
  size_t DataLength;
  CMBlockBufferRef *v7;
  OpaqueCMBlockBuffer *v8;
  size_t v9;
  uint64_t result;
  unint64_t v11;
  size_t v12;
  unint64_t *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t (*v31)(_QWORD *, OpaqueCMBlockBuffer *, size_t, _QWORD, unint64_t, __int128 *);
  unint64_t v32;
  unsigned int v33;
  uint64_t PesFromStreamID;
  int v35;
  const __CFAllocator *v36;
  OpaqueCMBlockBuffer *v37;
  size_t v38;
  size_t v39;
  CMBlockBufferRef *v40;
  uint64_t v41;
  size_t v42;
  OpaqueCMBlockBuffer *v43;
  CFTypeRef *blockBufferOut;
  __int128 v45;
  size_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  char destination;
  unsigned __int16 v51;
  unsigned int v52;
  size_t v53;
  size_t v54;
  unsigned int v55;

  v4 = theBuffer;
  v55 = 0;
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  v7 = (CMBlockBufferRef *)(a1 + 416);
  v8 = *(OpaqueCMBlockBuffer **)(a1 + 416);
  v43 = v4;
  blockBufferOut = (CFTypeRef *)(a1 + 416);
  v42 = DataLength;
  if (v8)
  {
    v9 = CMBlockBufferGetDataLength(v8);
    result = CMBlockBufferAppendBufferReference(*v7, v4, 0, DataLength, 0);
    v55 = result;
    if ((_DWORD)result)
      return result;
    v4 = *v7;
    v11 = v9 + DataLength;
    a3 -= v9;
  }
  else
  {
    v11 = DataLength;
  }
  v54 = 0;
  v51 = 0;
  destination = 0;
  v48 = 0;
  v52 = 0;
  if (v11 >= 4)
  {
    v12 = 0;
    v13 = (unint64_t *)(a1 + 432);
    v53 = 0;
    v41 = a3 - 6;
    while (1)
    {
      switch(*(_DWORD *)(a1 + 408))
      {
        case 0:
          if (!FindStartCode(v4, v12, &v53, (int *)&v52, (OSStatus *)&v55))
          {
            v12 = v11 + v12 - 3;
            v11 = 3;
            goto LABEL_74;
          }
          v14 = v53;
          v11 += v12 - v53;
          if (v52 - 443 < 2 || v52 == 446)
            goto LABEL_57;
          if (v52 == 442)
          {
            *(_DWORD *)(a1 + 408) = 1;
            goto LABEL_58;
          }
          if (v52 >= 0x1F1)
          {
LABEL_57:
            *(_DWORD *)(a1 + 408) = 2;
            *v13 = 0;
            v13[1] = 0;
            goto LABEL_58;
          }
          if (v52 == 441)
            goto LABEL_61;
          v33 = v52;
          PesFromStreamID = FindPesFromStreamID(a1, v52);
          v49 = (_QWORD *)PesFromStreamID;
          if (!PesFromStreamID)
          {
            if (v33 <= 0xBE && v33 != 189)
              goto LABEL_61;
            result = AddPesFromHeader(a1, v33, &v49);
            v55 = result;
            if ((_DWORD)result)
              return result;
            PesFromStreamID = (uint64_t)v49;
            if (!v49)
            {
LABEL_61:
              v14 += 4;
              v11 -= 4;
              goto LABEL_58;
            }
          }
          *(_QWORD *)(a1 + 424) = PesFromStreamID;
          if (*(_BYTE *)(PesFromStreamID + 121))
            v35 = 4;
          else
            v35 = 3;
          *(_DWORD *)(a1 + 408) = v35;
LABEL_58:
          v12 = v14;
          if (v11 <= 3)
            goto LABEL_73;
          break;
        case 1:
          if (v11 < 5)
          {
            v11 = 4;
            goto LABEL_74;
          }
          v14 = v12 + 4;
          result = CMBlockBufferCopyDataBytes(v4, v12 + 4, 1uLL, &destination);
          v55 = result;
          if ((_DWORD)result)
            return result;
          if ((destination & 0xC0) == 0x40)
          {
            if (v11 < 0xE)
              goto LABEL_74;
            result = CMBlockBufferCopyDataBytes(v4, v12 + 13, 1uLL, &destination);
            v55 = result;
            if ((_DWORD)result)
              return result;
            v15 = (destination & 7) + 14;
            v16 = v11 - v15;
            if (v11 < v15)
              goto LABEL_74;
            v14 = v12 + v15;
            goto LABEL_40;
          }
          if ((destination & 0xF0) == 0x20)
          {
            v16 = v11 - 12;
            if (v11 < 0xC)
              goto LABEL_74;
            v14 = v12 + 12;
LABEL_40:
            *(_DWORD *)(a1 + 408) = 0;
            v11 = v16;
            goto LABEL_58;
          }
LABEL_41:
          v11 -= 4;
LABEL_42:
          *(_DWORD *)(a1 + 408) = 0;
          goto LABEL_58;
        case 2:
          v17 = *v13;
          if (*v13)
            goto LABEL_25;
          if (v11 < 6)
            goto LABEL_74;
          v14 = v12 + 4;
          v55 = CMBlockBufferCopyDataBytes(v4, v12 + 4, 2uLL, &v51);
          v18 = v51;
          v17 = __rev16(v51);
          *v13 = v17;
          if (!v18)
            goto LABEL_41;
          v12 += 6;
          v11 -= 6;
LABEL_25:
          v19 = *(_QWORD *)(a1 + 440);
          v20 = v17 - v19;
          if (v17 - v19 >= v11)
            v20 = v11;
          v11 -= v20;
          v21 = v20 + v19;
          *(_QWORD *)(a1 + 440) = v21;
          v14 = v20 + v12;
          if (v21 >= v17)
          {
            *(_DWORD *)(a1 + 408) = 0;
            *(_QWORD *)(a1 + 440) = 0;
          }
          goto LABEL_58;
        case 3:
          result = ProcessPesData(*(_QWORD *)(a1 + 424), v4, v12, 0, v11, v52 == (*(_DWORD *)(*(_QWORD *)(a1 + 424) + 64) | 0x100), v12 + a3, &v54, &v48);
          v55 = result;
          if (*(_BYTE *)(a1 + 8))
            return 4294954511;
          if ((_DWORD)result)
          {
            if ((_DWORD)result != -12976)
              return result;
            v48 = 1;
            v11 -= 4;
            v14 = v12 + 4;
            v52 = 0;
          }
          else
          {
            v11 -= v54;
            v14 = v54 + v12;
            v52 = 0;
            if (!v48)
              goto LABEL_58;
          }
          *(_QWORD *)(a1 + 424) = 0;
          goto LABEL_42;
        case 4:
          v22 = DataLength;
          v23 = a3;
          v24 = *(_QWORD **)(a1 + 424);
          v49 = v24;
          v26 = v24 + 17;
          v25 = v24[17];
          if (v25)
          {
            v27 = 0;
            v28 = v24[18];
          }
          else
          {
            if (v11 < 6)
              goto LABEL_74;
            v55 = CMBlockBufferCopyDataBytes(v4, v12 + 4, 2uLL, &v51);
            v29 = v51;
            v25 = __rev16(v51);
            *v26 = v25;
            if (!v29)
              return FigSignalErrorAt();
            v28 = 0;
            v24[18] = 0;
            v12 += 6;
            v27 = 1;
            v11 -= 6;
          }
          if (v25 - v28 >= v11)
            v30 = v11;
          else
            v30 = v25 - v28;
          v31 = (uint64_t (*)(_QWORD *, OpaqueCMBlockBuffer *, size_t, _QWORD, unint64_t, __int128 *))v24[105];
          if (v31)
          {
            v45 = 0u;
            v46 = v41 + v12;
            v47 = v27;
            result = v31(v24, v4, v12, 0, v30, &v45);
            v55 = result;
            if ((_DWORD)result)
              return result;
            if (*(_BYTE *)(a1 + 8))
              return 4294954511;
            v25 = v24[17];
            v28 = v24[18];
          }
          v14 = v30 + v12;
          v11 -= v30;
          v32 = v28 + v30;
          v24[18] = v32;
          if (v32 >= v25)
          {
            *(_DWORD *)(a1 + 408) = 0;
            *v26 = 0;
            v24[18] = 0;
          }
          a3 = v23;
          DataLength = v22;
          v13 = (unint64_t *)(a1 + 432);
          goto LABEL_58;
        default:
          v14 = v12;
          goto LABEL_58;
      }
    }
  }
  v14 = 0;
LABEL_73:
  v12 = v14;
  if (v11)
  {
LABEL_74:
    if (v4 == v43 || v42 < v11)
    {
      v36 = *(const __CFAllocator **)(a1 + 40);
      v37 = v4;
      v38 = v12;
      v39 = v11;
      v40 = (CMBlockBufferRef *)(a1 + 416);
    }
    else
    {
      if (*blockBufferOut)
        CFRelease(*blockBufferOut);
      v36 = *(const __CFAllocator **)(a1 + 40);
      v37 = v43;
      v38 = v42 - v11;
      v39 = v11;
      v40 = (CMBlockBufferRef *)(a1 + 416);
    }
    return CMBlockBufferCreateWithBufferReference(v36, v37, v38, v39, 0, v40);
  }
  else
  {
    if (*blockBufferOut)
      CFRelease(*blockBufferOut);
    *blockBufferOut = 0;
    return v55;
  }
}

void MPEG2PSReset(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 416);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 408) = 0;
}

uint64_t MPEG2PSProcessVideoSearch(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, const void *a4, size_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  size_t DataLength;
  uint64_t result;
  int v12;
  size_t v13;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  _BYTE v22[3];
  unsigned int v23;
  size_t destination;
  OSStatus v25;

  if (!a5)
    return 0;
  v8 = *(_QWORD *)(a1 + 48);
  v23 = 0;
  PesPacketListSaveChunk((_QWORD *)v8, a2, a3, a4, a5, a6);
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 16) += a5;
  DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v9 + 8));
  if (DataLength == a5)
  {
    LOBYTE(destination) = 0;
    result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v9 + 8), 0, 1uLL, &destination);
    if ((_DWORD)result)
      return result;
    v12 = destination | (*(_DWORD *)(v8 + 24) << 8);
    *(_DWORD *)(v8 + 24) = v12;
    MPEG2PSVideoSearchProcessHeader((_QWORD *)v8, v12);
    v13 = 0;
  }
  else
  {
    v13 = DataLength - a5 - 3;
  }
  if (DataLength >= 4 && v13 < DataLength)
  {
    destination = 0;
    do
    {
      if (!FindStartCode(*(OpaqueCMBlockBuffer **)(v9 + 8), v13, &destination, (int *)&v23, &v25))
        break;
      MPEG2PSVideoSearchProcessHeader((_QWORD *)v8, v23);
      v13 = destination + 1;
    }
    while (destination + 1 < DataLength);
  }
  if (DataLength > 2)
  {
    result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v9 + 8), DataLength - 3, 3uLL, &v23);
    v15 = bswap32(v23) >> 8;
  }
  else
  {
    result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v9 + 8), 0, DataLength, v22);
    if (!DataLength)
      goto LABEL_20;
    v15 = *(_DWORD *)(v8 + 24);
    v16 = v22;
    do
    {
      v17 = *v16++;
      v15 = v17 | (v15 << 8);
      --DataLength;
    }
    while (DataLength);
  }
  *(_DWORD *)(v8 + 24) = v15;
LABEL_20:
  v18 = *(_QWORD *)(v8 + 32);
  if (v18 >= 0xA)
  {
    if (*(_QWORD *)(v8 + 56) && !*(_QWORD *)(v8 + 48))
    {
      v21 = 1836476772;
    }
    else
    {
      if (!*(_QWORD *)(v8 + 64) || *(_QWORD *)(v8 + 40))
        goto LABEL_25;
      v21 = 1748121140;
    }
    v19 = a1;
    v20 = (_QWORD **)v8;
    return MPEG2PSVideoSearchSetType(v19, v20, v21);
  }
LABEL_25:
  if (*(_QWORD *)(v8 + 16) <= 0x40000uLL)
    return result;
  if (v18 && *(_QWORD *)(v8 + 56))
  {
    v19 = a1;
    v20 = (_QWORD **)v8;
    v21 = 1836476772;
  }
  else
  {
    v19 = a1;
    v20 = (_QWORD **)v8;
    v21 = 1970170734;
  }
  return MPEG2PSVideoSearchSetType(v19, v20, v21);
}

void MPEG2PSCleanVideoSearch(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  PesPacketListClean(v1);
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 24) = -1;
}

void MPEG2PSDeleteVideoSearchPrivateData(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  PesPacketListClean(v2);
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = -1;
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

_QWORD *MPEG2PSVideoSearchProcessHeader(_QWORD *result, int a2)
{
  _QWORD *v2;

  if ((a2 & 0xFFFFFF00) != 0x100)
    return result;
  ++result[4];
  if (a2 == 182 || a2 > 0xB8u || (a2 & 0xFE) == 0xB0)
  {
    ++result[5];
    v2 = result + 6;
LABEL_12:
    ++*v2;
    if (a2 - 179 <= 5 && ((1 << (a2 + 77)) & 0x25) != 0 || !(_BYTE)a2)
      ++result[7];
    goto LABEL_16;
  }
  if (a2 > 0x7Fu
    || a2 - 64 <= 0xC && ((1 << (a2 - 64)) & 0x1E41) != 0
    || a2 <= 8u && ((1 << a2) & 0x1A1) != 0)
  {
    v2 = result + 5;
    goto LABEL_12;
  }
LABEL_16:
  if ((a2 & 0x3Fu) <= 9 && ((1 << (a2 & 0x3F)) & 0x2E0) != 0)
    ++result[8];
  return result;
}

uint64_t FindStartCode(OpaqueCMBlockBuffer *a1, size_t a2, size_t *a3, int *a4, OSStatus *a5)
{
  size_t v8;
  OSStatus v10;
  int v11;
  size_t v12;
  size_t DataLength;
  size_t v14;
  OSStatus DataPointer;
  size_t v16;
  char *v17;
  int v18;
  uint64_t result;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  int destination;

  v8 = a2;
  destination = 0;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  v10 = CMBlockBufferCopyDataBytes(a1, a2, 4uLL, &destination);
  *a5 = v10;
  if (v10)
    return 0;
  v11 = bswap32(destination);
  destination = v11;
  if ((v11 & 0xFFFFFF00) == 0x100)
  {
LABEL_15:
    *a3 = v8;
    *a4 = v11;
    return 1;
  }
  v12 = v8 + 4;
  DataLength = CMBlockBufferGetDataLength(a1);
  if (v12 >= DataLength)
    return 0;
  v14 = DataLength;
  while (2)
  {
    DataPointer = CMBlockBufferGetDataPointer(a1, v12, &lengthAtOffsetOut, 0, &dataPointerOut);
    *a5 = DataPointer;
    if (DataPointer)
      return 0;
    v16 = lengthAtOffsetOut + v12;
    lengthAtOffsetOut = v16;
    v11 = destination;
    if (v16 <= v12 + 1)
      v16 = v12 + 1;
    v17 = dataPointerOut + 1;
    do
    {
      v18 = v11 << 8;
      destination = v11 << 8;
      dataPointerOut = v17;
      v11 = *(v17 - 1) | (v11 << 8);
      destination = v11;
      if (v18 == 256)
      {
        v8 = v12 - 3;
        goto LABEL_15;
      }
      ++v12;
      ++v17;
    }
    while (v16 != v12);
    result = 0;
    v12 = v16;
    if (v16 < v14)
      continue;
    return result;
  }
}

uint64_t MPEG2PSVideoSearchSetType(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t (**v6)(uint64_t, OpaqueCMBlockBuffer *, _QWORD, _QWORD, size_t, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, OpaqueCMBlockBuffer *, _QWORD, _QWORD, size_t, _QWORD *);
  OpaqueCMBlockBuffer *v12;
  size_t DataLength;
  const void *v14;
  _QWORD *v15;

  v5 = *a2;
  v6 = (uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, _QWORD, _QWORD, size_t, _QWORD *))(a1 + 840);
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  v7 = *(_QWORD *)(a1 + 48);
  PesPacketListClean(v7);
  *(_QWORD *)(v7 + 16) = 0;
  *(_DWORD *)(v7 + 24) = -1;
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = a3;
  v8 = *(_QWORD **)(a1 + 8);
  v9 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))v8[7];
  if (v9)
    v9(*v8, v8[9], *(unsigned int *)(*(_QWORD *)a1 + 40), *(unsigned int *)(a1 + 60), a3);
  v10 = 0;
  if (v5)
  {
    do
    {
      if (!(_DWORD)v10)
      {
        v11 = *v6;
        if (*v6)
        {
          v12 = (OpaqueCMBlockBuffer *)v5[1];
          DataLength = CMBlockBufferGetDataLength(v12);
          v10 = v11(a1, v12, 0, 0, DataLength, v5 + 2);
        }
        else
        {
          v10 = 0;
        }
      }
      v14 = (const void *)v5[1];
      if (v14)
        CFRelease(v14);
      v15 = (_QWORD *)*v5;
      free(v5);
      v5 = v15;
    }
    while (v15);
  }
  return v10;
}

uint64_t FigAlternateFilterMonitorGetClassID()
{
  MEMORY[0x19402F294](&FigAlternateFilterMonitorGetClassID_sRegisterFigAlternateFilterMonitorTypeOnce, RegisterFigAlternateFilterMonitorType);
  return sFigAlternateFilterMonitorClassID;
}

uint64_t RegisterFigAlternateFilterMonitorType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateFilterMonitorGetTypeID()
{
  MEMORY[0x19402F294](&FigAlternateFilterMonitorGetClassID_sRegisterFigAlternateFilterMonitorTypeOnce, RegisterFigAlternateFilterMonitorType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewStateIfNecessary(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (a5 == a4)
    return 0;
  else
    return fam_postStateChangedNotification(a1, a4, a2, a5, a3);
}

uint64_t fam_postStateChangedNotification(const void *a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5)
{
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  uint64_t v10;

  v7 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v9 = Mutable;
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  if (a3)
    CFDictionarySetValue(v9, CFSTR("AlternateFilterMonitorParameter_OldFilter"), a3);
  if (a5)
    CFDictionarySetValue(v9, CFSTR("AlternateFilterMonitorParameter_NewFilter"), a5);
  CMNotificationCenterGetDefaultLocalCenter();
  v10 = CMNotificationCenterPostNotification();
  CFRelease(v9);
  return v10;
}

uint64_t FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewFilterIfNecessary(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (a4 == a5)
    return fam_postStateChangedNotification(a1, a4, a2, a4, a3);
  else
    return 0;
}

uint64_t FigAlternateFilterMonitorUtilityPostExpandersAddedNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigAlternateFilterMonitorCreateForNotification(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t DerivedStorage;
  uint64_t v14;
  __int128 v15;
  CFTypeRef v16;
  CFTypeRef v17;
  const CFDictionaryValueCallBacks *v18;
  uint64_t v19;

  if (a6 && a3)
  {
    MEMORY[0x19402F294](&FigAlternateFilterMonitorGetClassID_sRegisterFigAlternateFilterMonitorTypeOnce, RegisterFigAlternateFilterMonitorType);
    v12 = CMDerivedObjectCreate();
    if (!(_DWORD)v12)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v14 = FigReentrantMutexCreate();
      *(_QWORD *)DerivedStorage = v14;
      if (!v14)
        return FigSignalErrorAt();
      v15 = *a2;
      *(_QWORD *)(DerivedStorage + 24) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 8) = v15;
      *(_QWORD *)(DerivedStorage + 32) = CFRetain(a3);
      if (a4)
        v16 = CFRetain(a4);
      else
        v16 = 0;
      *(_QWORD *)(DerivedStorage + 40) = v16;
      if (a5)
        v17 = CFRetain(a5);
      else
        v17 = 0;
      *(_QWORD *)(DerivedStorage + 48) = v17;
      v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      *(_QWORD *)(DerivedStorage + 64) = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(DerivedStorage + 56) = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], v18);
      v12 = FigAlternateFilterMonitorTriggerCreateForNotification(a1, a3, (uint64_t)a4, (_QWORD *)(DerivedStorage + 72));
      if (!(_DWORD)v12)
      {
        v19 = FigAlternateFilterMonitorTriggerAddObserver(*(_QWORD *)(DerivedStorage + 72), 0, famfon_triggerCallback, 0);
        if (!(_DWORD)v19)
          *a6 = 0;
        return v19;
      }
    }
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t famfon_triggerCallback(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (const void *)(*(uint64_t (**)(const void *, _QWORD, uint64_t, _QWORD))(DerivedStorage + 8))(a2, *(_QWORD *)(DerivedStorage + 40), a3, *(_QWORD *)(DerivedStorage + 48));
  return famfon_setState(a2, v6);
}

uint64_t FigAlternateFilterMonitorCreateForPreferredVideoFormat(const __CFAllocator *a1, CFTypeRef *a2)
{
  const __CFString *DisplayVideoRangeNotificationSingleton;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, CFTypeRef, uint64_t);
  CFTypeRef v12;
  int BestSupportedVideoRangeFromDisplayList;
  uint64_t (*v14)(CFTypeRef, _QWORD);
  uint64_t v15;
  CFTypeRef cf;
  CFTypeRef v18;

  cf = 0;
  v18 = 0;
  DisplayVideoRangeNotificationSingleton = FPSupport_GetDisplayVideoRangeNotificationSingleton();
  v5 = FigAlternateFilterMonitorCreateForNotification(a1, (__int128 *)FigAlternateFilterMonitorCreateForPreferredVideoFormat_callbacks, CFSTR("DisplayVideoRangeChanged"), DisplayVideoRangeNotificationSingleton, 0, &v18);
  if (!(_DWORD)v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = FPSupportVideoRangeToAlternateVideoRange(v6);
      v8 = v6 == 3 ? 5 : 9;
      v5 = FigAlternatePreferredVideoFormatFilterCreate(a1, v7, v8, &cf);
      if ((_DWORD)v5)
        break;
      v10 = cf;
      v9 = v18;
      v11 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v11)
        goto LABEL_15;
      v5 = v11(v9, v10, v6);
      if ((_DWORD)v5)
        break;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (++v6 == 6)
      {
        v12 = v18;
        BestSupportedVideoRangeFromDisplayList = famvr_getBestSupportedVideoRangeFromDisplayList(v18, 0);
        v14 = *(uint64_t (**)(CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v14)
        {
LABEL_15:
          v15 = 4294954514;
          goto LABEL_16;
        }
        v15 = v14(v12, BestSupportedVideoRangeFromDisplayList);
        if ((_DWORD)v15)
          goto LABEL_16;
        *a2 = v18;
        v18 = 0;
        goto LABEL_18;
      }
    }
  }
  v15 = v5;
LABEL_16:
  if (v18)
    CFRelease(v18);
LABEL_18:
  if (cf)
    CFRelease(cf);
  return v15;
}

uint64_t fampvr_handleTriggerInvocationForPreferredVideoFormat(const void *a1, uint64_t a2, const __CFArray *a3)
{
  CFAllocatorRef v5;
  void (*v6)(const void *, const __CFString *, CFAllocatorRef, CFNumberRef *);
  uint64_t BestSupportedVideoRangeFromDisplayList;
  unsigned int valuePtr;
  CFNumberRef number;

  number = 0;
  valuePtr = -1;
  v5 = CFGetAllocator(a1);
  v6 = *(void (**)(const void *, const __CFString *, CFAllocatorRef, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (v6
    && (v6(a1, CFSTR("AlternateFilterMonitorProperty_PreferredVideoRange"), v5, &number), number)
    && (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr), valuePtr < 4))
  {
    if (valuePtr - 1 > 2)
      BestSupportedVideoRangeFromDisplayList = 0;
    else
      BestSupportedVideoRangeFromDisplayList = qword_1932FBD10[valuePtr - 1];
  }
  else
  {
    BestSupportedVideoRangeFromDisplayList = (int)famvr_getBestSupportedVideoRangeFromDisplayList(a1, a3);
  }
  if (number)
    CFRelease(number);
  return BestSupportedVideoRangeFromDisplayList;
}

uint64_t fampvr_didSetPropertyCallbackForPreferredVideoFormat(const void *a1, uint64_t a2, const __CFNumber *a3)
{
  uint64_t (*v5)(const void *, const __CFNumber *);
  const __CFArray *v7;
  uint64_t (*v8)(const void *, const __CFArray *);
  const void *v9;
  const __CFArray *v10;
  uint64_t v11;
  const __CFArray *BestSupportedVideoRangeFromDisplayList;
  unsigned int valuePtr;

  if (!FigCFEqual())
  {
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        valuePtr = -1;
        if (a3)
        {
          CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr >= 4)
            return FigSignalErrorAt();
          v7 = 0;
          if (valuePtr - 1 > 2)
            BestSupportedVideoRangeFromDisplayList = 0;
          else
            BestSupportedVideoRangeFromDisplayList = (const __CFArray *)qword_1932FBD10[valuePtr - 1];
        }
        else
        {
          v7 = (const __CFArray *)famvr_copyDisplayList(a1);
          BestSupportedVideoRangeFromDisplayList = (const __CFArray *)(int)famvr_getBestSupportedVideoRangeFromDisplayList(a1, v7);
        }
        v8 = *(uint64_t (**)(const void *, const __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v8)
        {
          v9 = a1;
          v10 = BestSupportedVideoRangeFromDisplayList;
LABEL_19:
          v11 = v8(v9, v10);
          if (!v7)
            return v11;
          goto LABEL_22;
        }
LABEL_21:
        v11 = 4294954514;
        if (!v7)
          return v11;
LABEL_22:
        CFRelease(v7);
        return v11;
      }
      if (!FigCFEqual())
        return 0;
    }
    v7 = (const __CFArray *)famvr_copyDisplayList(a1);
    v8 = *(uint64_t (**)(const void *, const __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v8)
    {
      v9 = a1;
      v10 = v7;
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  v5 = *(uint64_t (**)(const void *, const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v5)
    return v5(a1, a3);
  return 4294954514;
}

uint64_t famvr_getBestSupportedVideoRangeFromDisplayList(const void *a1, const __CFArray *a2)
{
  void (*v4)(const void *, const __CFString *, _QWORD, CFNumberRef *);
  uint64_t v5;
  float MaxContentFrameRate;
  _DWORD v8[9];
  unsigned int valuePtr;
  CFNumberRef number;

  number = 0;
  v4 = *(void (**)(const void *, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
  if (v4)
  {
    v4(a1, CFSTR("AlternateFilterMonitorProperty_OverrideVideoRange"), *MEMORY[0x1E0C9AE00], &number);
    if (number)
    {
      valuePtr = 0;
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      v5 = valuePtr;
      if (valuePtr >= 6)
      {
        FigSignalErrorAt();
      }
      else if (valuePtr)
      {
        goto LABEL_8;
      }
    }
  }
  MaxContentFrameRate = fafm_getMaxContentFrameRate(a1);
  fafm_getBestSupportedDisplayFromDisplayList(a2, (uint64_t)v8, MaxContentFrameRate);
  v5 = v8[0];
LABEL_8:
  if (number)
    CFRelease(number);
  return v5;
}

uint64_t FigAlternateFilterMonitorCreateForSupportedVideoRange(const __CFAllocator *a1, CFTypeRef *a2)
{
  const __CFString *DisplayVideoRangeNotificationSingleton;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, CFTypeRef, uint64_t);
  int BestSupportedVideoRangeFromDisplayList;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, _QWORD);
  uint64_t SInt32;
  CFTypeRef v14;
  const void *v15;
  void (*v16)(CFTypeRef, const __CFString *, const void *);
  uint64_t v17;
  CFTypeRef cf;
  CFTypeRef v20;

  cf = 0;
  v20 = 0;
  DisplayVideoRangeNotificationSingleton = FPSupport_GetDisplayVideoRangeNotificationSingleton();
  v5 = FigAlternateFilterMonitorCreateForNotification(a1, (__int128 *)FigAlternateFilterMonitorCreateForSupportedVideoRange_callbacks, CFSTR("DisplayVideoRangeChanged"), DisplayVideoRangeNotificationSingleton, 0, &v20);
  if (!(_DWORD)v5)
  {
    v6 = 0;
    while (1)
    {
      v5 = FigAlternateSupportedVideoRangeFilterCreate(a1, v6, &cf);
      if ((_DWORD)v5)
        break;
      v8 = cf;
      v7 = v20;
      v9 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v9)
        goto LABEL_15;
      v5 = v9(v7, v8, v6);
      if ((_DWORD)v5)
        break;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (++v6 == 6)
      {
        BestSupportedVideoRangeFromDisplayList = famvr_getBestSupportedVideoRangeFromDisplayList(v20, 0);
        v11 = v20;
        v12 = *(uint64_t (**)(CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v12)
        {
LABEL_15:
          v17 = 4294954514;
          goto LABEL_16;
        }
        v5 = v12(v11, BestSupportedVideoRangeFromDisplayList);
        if ((_DWORD)v5)
          break;
        SInt32 = FigCFNumberCreateSInt32();
        v14 = v20;
        if (SInt32)
        {
          v15 = (const void *)SInt32;
          v16 = *(void (**)(CFTypeRef, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
          if (v16)
            v16(v14, CFSTR("AlternateFilterMonitorProperty_CurrentDisplayVideoRange"), v15);
          *a2 = v20;
          v20 = 0;
          CFRelease(v15);
          v17 = 0;
        }
        else
        {
          v17 = 0;
          *a2 = v20;
          v20 = 0;
        }
        goto LABEL_19;
      }
    }
  }
  v17 = v5;
LABEL_16:
  if (v20)
    CFRelease(v20);
LABEL_19:
  if (cf)
    CFRelease(cf);
  return v17;
}

uint64_t famsvr_handleTriggerInvocationForSupportedVideoRange(const void *a1, uint64_t a2, const __CFArray *a3)
{
  int BestSupportedVideoRangeFromDisplayList;
  uint64_t SInt32;
  const void *v6;
  void (*v7)(const void *, const __CFString *, const void *);

  BestSupportedVideoRangeFromDisplayList = famvr_getBestSupportedVideoRangeFromDisplayList(a1, a3);
  SInt32 = FigCFNumberCreateSInt32();
  if (SInt32)
  {
    v6 = (const void *)SInt32;
    v7 = *(void (**)(const void *, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
    if (v7)
      v7(a1, CFSTR("AlternateFilterMonitorProperty_CurrentDisplayVideoRange"), v6);
    CFRelease(v6);
  }
  return BestSupportedVideoRangeFromDisplayList;
}

uint64_t famsvr_didSetPropertyCallbackForSupportedVideoRange(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(const void *, uint64_t);
  const void *v7;
  uint64_t (*v8)(const void *, const void *);
  uint64_t v9;

  if (FigCFEqual())
  {
    v5 = *(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v5)
      return v5(a1, a3);
    return 4294954514;
  }
  else
  {
    if (FigCFEqual())
    {
      v7 = (const void *)famvr_copyDisplayList(a1);
      v8 = *(uint64_t (**)(const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v8)
      {
        v9 = v8(a1, v7);
        if (!v7)
          return v9;
      }
      else
      {
        v9 = 4294954514;
        if (!v7)
          return v9;
      }
      CFRelease(v7);
      return v9;
    }
    return 0;
  }
}

uint64_t FigAlternateFilterMonitorCreateForSupportedFramerateBucketCap(const __CFAllocator *a1, CFTypeRef *a2)
{
  const __CFString *DisplayVideoRangeNotificationSingleton;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, CFTypeRef, uint64_t);
  unsigned int v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, _QWORD);
  uint64_t v13;
  CFTypeRef cf;
  CFTypeRef v16;
  __int128 v17;
  __int128 v18;

  cf = 0;
  v16 = 0;
  DisplayVideoRangeNotificationSingleton = FPSupport_GetDisplayVideoRangeNotificationSingleton();
  v5 = FigAlternateFilterMonitorCreateForNotification(a1, (__int128 *)FigAlternateFilterMonitorCreateForSupportedFramerateBucketCap_callbacks, CFSTR("DisplayVideoRangeChanged"), DisplayVideoRangeNotificationSingleton, 0, &v16);
  if (!(_DWORD)v5)
  {
    v6 = 0;
    while (1)
    {
      v5 = FigAlternateFramerateBucketCapFilterCreate(a1, v6, &cf);
      if ((_DWORD)v5)
        break;
      v8 = cf;
      v7 = v16;
      v9 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v9)
        goto LABEL_12;
      v5 = v9(v7, v8, v6);
      if ((_DWORD)v5)
        break;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (++v6 == 3)
      {
        fafm_getMaxContentFrameRate(v16);
        v17 = 0u;
        v18 = 0u;
        FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate(&v17, (double *)&v17 + 1, (_QWORD *)&v18 + 1);
        v10 = FigFrameRateToFrameRateBucket(*((double *)&v18 + 1));
        v11 = v16;
        v12 = *(uint64_t (**)(CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v12)
        {
LABEL_12:
          v13 = 4294954514;
          goto LABEL_13;
        }
        v13 = v12(v11, v10);
        if ((_DWORD)v13)
          goto LABEL_13;
        *a2 = v16;
        v16 = 0;
        goto LABEL_15;
      }
    }
  }
  v13 = v5;
LABEL_13:
  if (v16)
    CFRelease(v16);
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t fampfr_handleTriggerInvocationForSupportedFramerateBucketCap(const void *a1, uint64_t a2, const __CFArray *a3)
{
  CFAllocatorRef v5;
  uint64_t (*v6)(const void *, const __CFString *, CFAllocatorRef, CFTypeRef *);
  int v7;
  CFTypeRef v8;
  double v9;
  double v10;
  float MaxContentFrameRate;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[2];
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  cf[0] = 0;
  v5 = CFGetAllocator(a1);
  v6 = *(uint64_t (**)(const void *, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v6)
  {
    v7 = v6(a1, CFSTR("AlternateFilterMonitorProperty_PreferredFrameRate"), v5, cf);
    v8 = cf[0];
    if (v7)
    {
      v10 = 0.0;
      if (!cf[0])
      {
LABEL_5:
        if (v10 != 0.0)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    else
    {
      FigGetDoubleFromCFTypeWithDefault();
      v10 = v9;
      v8 = cf[0];
      if (!cf[0])
        goto LABEL_5;
    }
    CFRelease(v8);
    goto LABEL_5;
  }
LABEL_6:
  *(_OWORD *)cf = 0u;
  v15 = 0u;
  MaxContentFrameRate = fafm_getMaxContentFrameRate(a1);
  fafm_getBestSupportedDisplayFromDisplayList(a3, (uint64_t)cf, MaxContentFrameRate);
  v10 = *((double *)&v15 + 1);
LABEL_7:
  if (dword_1EE2A30C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return FigFrameRateToFrameRateBucket(v10);
}

uint64_t fampfr_didSetPropertyCallbackForSupportedFramerateBucketCap(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(const void *, uint64_t);
  CFAllocatorRef v7;
  uint64_t (*v8)(const void *, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(const void *, CFTypeRef);
  uint64_t v12;
  CFTypeRef cf;

  if (!FigCFEqual())
  {
    if (!FigCFEqual())
      return 0;
    cf = 0;
    v7 = CFGetAllocator(a1);
    v8 = *(uint64_t (**)(const void *, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v8)
    {
      v9 = v8(a1, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v7, &cf);
      if ((_DWORD)v9)
      {
LABEL_9:
        v12 = v9;
        goto LABEL_13;
      }
      v10 = cf;
      v11 = *(uint64_t (**)(const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v11)
      {
        v9 = v11(a1, v10);
        goto LABEL_9;
      }
    }
    v12 = 4294954514;
LABEL_13:
    if (cf)
      CFRelease(cf);
    return v12;
  }
  v5 = *(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v5)
    return v5(a1, a3);
  return 4294954514;
}

uint64_t FigAlternateFilterMonitorCreateForLowPowerMode(const __CFAllocator *a1, CFTypeRef *a2)
{
  const __CFString *PowerStateNotificationSingleton;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, CFTypeRef, uint64_t);
  CFTypeRef v9;
  unsigned int v10;
  uint64_t (*v11)(CFTypeRef, _QWORD);
  uint64_t v12;
  CFTypeRef v14;
  CFTypeRef cf;

  v14 = 0;
  cf = 0;
  PowerStateNotificationSingleton = FPSupport_GetPowerStateNotificationSingleton();
  v5 = FigAlternateFilterMonitorCreateForNotification(a1, (__int128 *)&off_1E2F99DA8, CFSTR("PowerStateChanged"), PowerStateNotificationSingleton, 0, &cf);
  if ((_DWORD)v5)
    goto LABEL_14;
  v5 = FigAlternateLowPowerModeFilterCreate((uint64_t)a1, &v14);
  if ((_DWORD)v5)
    goto LABEL_14;
  v7 = v14;
  v6 = cf;
  v8 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
  {
LABEL_8:
    v12 = 4294954514;
    goto LABEL_9;
  }
  v5 = v8(v6, v7, 1);
  if ((_DWORD)v5)
  {
LABEL_14:
    v12 = v5;
    goto LABEL_9;
  }
  v9 = cf;
  v10 = FPSupport_IsInLowPowerMode();
  v11 = *(uint64_t (**)(CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v11)
    goto LABEL_8;
  v12 = v11(v9, v10);
  if (!(_DWORD)v12)
  {
    *a2 = cf;
    cf = 0;
    goto LABEL_11;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
LABEL_11:
  if (v14)
    CFRelease(v14);
  return v12;
}

uint64_t famlpm_handleTriggerInvocationForLowPowerMode()
{
  return FPSupport_IsInLowPowerMode();
}

uint64_t FigAlternateFilterMonitorCreateForVideoRangeFramerateCap(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  CFDataRef v6;
  const __CFString *DisplayVideoRangeNotificationSingleton;
  uint64_t v8;
  int v9;
  int v10;
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, CFTypeRef, uint64_t);
  uint64_t v14;
  CFTypeRef v16;
  CFTypeRef cf;

  v16 = 0;
  cf = 0;
  v6 = CFDataCreate(a1, (const UInt8 *)a2, 32);
  if (!v6)
  {
    v8 = FigSignalErrorAt();
LABEL_16:
    v14 = v8;
    goto LABEL_8;
  }
  DisplayVideoRangeNotificationSingleton = FPSupport_GetDisplayVideoRangeNotificationSingleton();
  v8 = FigAlternateFilterMonitorCreateForNotification(a1, (__int128 *)off_1E2F99DC0, CFSTR("DisplayVideoRangeChanged"), DisplayVideoRangeNotificationSingleton, v6, &cf);
  if ((_DWORD)v8)
    goto LABEL_16;
  v9 = FPSupportVideoRangeToAlternateVideoRange(*(_DWORD *)a2);
  v10 = FigFrameRateToFrameRateBucket(*(double *)(a2 + 24));
  v8 = FigAlternateVideoRangeAndFrameRateBucketFilterCreate(a1, v9, v10, &v16);
  if ((_DWORD)v8)
    goto LABEL_16;
  v12 = v16;
  v11 = cf;
  v13 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v13)
  {
    v14 = v13(v11, v12, 1);
    if (!(_DWORD)v14)
    {
      *a3 = cf;
      cf = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v14 = 4294954514;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
LABEL_10:
  if (v16)
    CFRelease(v16);
  if (v6)
    CFRelease(v6);
  return v14;
}

BOOL famfrc_handleTriggerInvocationForFramerateCap(const void *a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  float MaxContentFrameRate;
  const UInt8 *BytePtr;
  __int128 v9;
  __int128 v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0u;
  v10 = 0u;
  MaxContentFrameRate = fafm_getMaxContentFrameRate(a1);
  fafm_getBestSupportedDisplayFromDisplayList(a3, (uint64_t)&v9, MaxContentFrameRate);
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(DerivedStorage + 48));
  return *(double *)&v10 > *((double *)BytePtr + 2)
      && *((double *)&v9 + 1) > *((double *)BytePtr + 1)
      && (int)v9 > *(_DWORD *)BytePtr;
}

uint64_t famfrc_didSetPropertyCallbackForFrameRateCap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v6)(uint64_t, uint64_t);

  result = FigCFEqual();
  if ((_DWORD)result)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v6)
      return v6(a1, a3);
    else
      return 4294954514;
  }
  return result;
}

uint64_t FigAlternateFilterMonitorCreateForRenditionDenyList(uint64_t a1, Boolean (__cdecl *a2)(const void *, const void *), CFTypeRef *a3)
{
  __int128 v3;
  uint64_t v6;
  CFTypeRef v7;
  _QWORD *DerivedStorage;
  uint64_t v9;
  Boolean (__cdecl *v10)(const void *, const void *);
  CFArrayCallBacks v12;
  CFTypeRef cf;

  cf = 0;
  v3 = *(_OWORD *)(MEMORY[0x1E0C9B378] + 16);
  *(_OWORD *)&v12.version = *MEMORY[0x1E0C9B378];
  *(_OWORD *)&v12.release = v3;
  if (a3)
  {
    MEMORY[0x19402F294](&FigAlternateFilterMonitorGetClassID_sRegisterFigAlternateFilterMonitorTypeOnce, RegisterFigAlternateFilterMonitorType);
    v6 = CMDerivedObjectCreate();
    v7 = cf;
    if (!(_DWORD)v6)
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      v9 = FigSimpleMutexCreate();
      *DerivedStorage = v9;
      if (v9)
      {
        v10 = (Boolean (__cdecl *)(const void *, const void *))MEMORY[0x1E0C98620];
        if (a2)
          v10 = a2;
        DerivedStorage[1] = v10;
        v12.equal = v10;
        v6 = 0;
        DerivedStorage[3] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &v12);
        *a3 = cf;
        return v6;
      }
      v6 = FigSignalErrorAt();
      v7 = cf;
    }
    if (v7)
      CFRelease(v7);
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t FigAlternateFilterMonitorCreateForExpensiveNetwork(const __CFAllocator *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  v4 = FigAlternateFilterMonitorCreateForNotification(a1, (__int128 *)off_1E2F99DF0, CFSTR("NetworkIsExpensiveChanged"), a2, 0, &cf);
  if ((_DWORD)v4)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a3 = cf;
  }
  return v4;
}

BOOL famen_handleTriggerInvocationForExpensiveNetwork(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeID TypeID;
  CFTypeID v5;
  void *value;

  value = 0;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(a3)
    && CFDictionaryGetValueIfPresent((CFDictionaryRef)a3, CFSTR("NetworkIsExpensive"), (const void **)&value)
    && (v5 = CFBooleanGetTypeID(), v5 == CFGetTypeID(value)))
  {
    return CFBooleanGetValue((CFBooleanRef)value) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t famen_didSetPropertyCallbackForExpensiveNetwork(uint64_t a1, uint64_t a2, const __CFNumber *a3)
{
  CFTypeID TypeID;
  int v6;
  double *v7;
  CFTypeID v8;
  double v9;
  double height;
  uint64_t v11;
  double v12;
  uint64_t (*v13)(uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;
  CGFloat width;
  uint64_t (*v17)(uint64_t, _QWORD, uint64_t);
  CGFloat v18;
  CGSize v20;
  double valuePtr;

  if (FigCFEqual())
  {
    if (!a3)
    {
      v20.width = 0.0;
      v6 = 0x7FFFFFFF;
      LODWORD(valuePtr) = 0x7FFFFFFF;
LABEL_18:
      v15 = FigAlternatePeakBitRateCapFilterForExpensiveNetworksCreate(*MEMORY[0x1E0C9AE00], v6, &v20);
      if (!(_DWORD)v15)
      {
        width = v20.width;
        v17 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v17)
        {
          v14 = 4294954514;
LABEL_23:
          v18 = v20.width;
          if (!*(_QWORD *)&v20.width)
            return v14;
          goto LABEL_29;
        }
        v15 = v17(a1, *(_QWORD *)&width, 1);
      }
      v14 = v15;
      goto LABEL_23;
    }
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a3))
    {
      v20.width = 0.0;
      LODWORD(valuePtr) = 0x7FFFFFFF;
      CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
      v6 = LODWORD(valuePtr);
      goto LABEL_18;
    }
    return 4294951683;
  }
  if (!FigCFEqual())
    return 4294951681;
  v7 = (double *)MEMORY[0x1E0C9D820];
  v20 = (CGSize)*MEMORY[0x1E0C9D820];
  if (a3)
  {
    v8 = CFDictionaryGetTypeID();
    if (v8 != CFGetTypeID(a3) || !CGSizeMakeWithDictionaryRepresentation(a3, &v20))
      return 4294951683;
  }
  v9 = v20.width;
  if (v20.width < 0.0)
    return FigSignalErrorAt();
  height = v20.height;
  if (v20.height < 0.0)
    return FigSignalErrorAt();
  valuePtr = 0.0;
  if (v20.width == *v7 && v20.height == v7[1])
  {
    v9 = 1.0e10;
    height = 1.0e10;
  }
  v11 = FigAlternateResolutionCapFilterCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], CFSTR("ResolutionCapForExpensiveNetworks"), 699, &valuePtr, v9, height);
  if ((_DWORD)v11)
    goto LABEL_16;
  v12 = valuePtr;
  v13 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v13)
  {
    v11 = v13(a1, *(_QWORD *)&v12, 1);
LABEL_16:
    v14 = v11;
    goto LABEL_28;
  }
  v14 = 4294954514;
LABEL_28:
  v18 = valuePtr;
  if (valuePtr != 0.0)
LABEL_29:
    CFRelease(*(CFTypeRef *)&v18);
  return v14;
}

uint64_t FigAlternateFilterMonitorCreateForStreamingRestrictions(const __CFAllocator *a1)
{
  CFDataRef v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  CFTypeRef cf;
  UInt8 bytes[8];
  uint64_t v10;

  v10 = 0;
  v7 = 0;
  cf = 0;
  v6 = 0;
  *(_QWORD *)bytes = FigSimpleMutexCreate();
  if (*(_QWORD *)bytes)
  {
    v10 = 0;
    v2 = CFDataCreate(a1, bytes, 16);
    if (v2)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)bytes);
      v3 = FigAlternateFilterMonitorCreateForNotification(a1, (__int128 *)off_1E2F99E08, CFSTR("StreamingRestrictions_RestrictionsChanged"), 0, v2, &cf);
      if (!(_DWORD)v3)
        FigStreamingRestrictionsGetLatestRestrictions((_DWORD *)&v7 + 1, &v7, &v6);
      v5 = v3;
      if (*(_QWORD *)bytes)
        MEMORY[0x19402EF04]();
    }
    else
    {
      v5 = FigSignalErrorAt();
    }
  }
  else
  {
    v5 = FigSignalErrorAt();
    v2 = 0;
  }
  FigSimpleMutexDestroy();
  if (cf)
    CFRelease(cf);
  if (v2)
    CFRelease(v2);
  return v5;
}

BOOL famu_handleTriggerInvocationForStreamingRestrictions(uint64_t a1, int a2, int a3, CFDataRef theData)
{
  const UInt8 *BytePtr;
  _BOOL8 FilterIfNecessary;
  const UInt8 *v8;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v10;
  CFTypeRef v11;
  BOOL v12;
  void (*v13)(CFTypeRef, __CFString *, __CFString *, uint64_t);
  CFTypeRef cf;

  BytePtr = CFDataGetBytePtr(theData);
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19402EEEC](*(_QWORD *)BytePtr);
  FilterIfNecessary = famu_getNewStateAndCreateFilterIfNecessary(a1, 0, 0, 0);
  v8 = CFDataGetBytePtr(theData);
  cf = 0;
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v9)
  {
    v10 = v9(a1, CFSTR("AlternateFilterMonitorProperty_ReportingAgent"), *MEMORY[0x1E0C9AE00], &cf);
    v11 = cf;
    if (v10)
      v12 = 1;
    else
      v12 = cf == 0;
    if (v12)
      goto LABEL_11;
    if (FilterIfNecessary && !*((_QWORD *)v8 + 1))
    {
      v13 = *(void (**)(CFTypeRef, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 32);
      if (v13)
        v13(v11, CFSTR("playerStats"), CFSTR("StreamRestrCnt"), 1);
    }
  }
  v11 = cf;
LABEL_11:
  *((_QWORD *)v8 + 1) = FilterIfNecessary;
  if (v11)
    CFRelease(v11);
  MEMORY[0x19402EF04](*(_QWORD *)BytePtr);
  return FilterIfNecessary;
}

void famu_finalize(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    if (*(_QWORD *)BytePtr)
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)BytePtr = 0;
    }
  }
}

BOOL famu_getNewStateAndCreateFilterIfNecessary(uint64_t a1, int a2, int a3, int a4)
{
  int v4;
  uint64_t AllocatorForMedia;
  int inserted;
  uint64_t *v10;
  double v11;
  _BOOL8 v12;
  double v13;
  int v14;
  CFTypeRef v15;
  unsigned int (*v16)(uint64_t, CFTypeRef, uint64_t);
  CFTypeRef cf;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;

  if (!(a3 | a2 | a4))
    return 0;
  v4 = a4;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  cf = 0;
  AllocatorForMedia = FigGetAllocatorForMedia();
  inserted = FigAlternateFilterTreeCreate(AllocatorForMedia, &v21);
  if (inserted)
    goto LABEL_42;
  v10 = (uint64_t *)MEMORY[0x1E0C9AE00];
  v11 = 720.0;
  switch(a2)
  {
    case 0:
      goto LABEL_10;
    case 1:
      break;
    case 2:
      v11 = 1080.0;
      break;
    case 3:
      v11 = 1440.0;
      break;
    default:
      v11 = 2147483650.0;
      break;
  }
  inserted = FigAlternateResolutionCapFilterCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], CFSTR("ResolutionCap"), 700, &v20, 2147483650.0, v11);
  if (inserted)
    goto LABEL_42;
  inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v20, 700);
  if (inserted)
    goto LABEL_42;
LABEL_10:
  if (a3)
  {
    if (a3 == 1)
      v13 = 30.0;
    else
      v13 = a3 == 2 ? 60.0 : 2147483650.0;
    inserted = FigAlternateFrameRateCapFilterCreate(*v10, &v19, v13);
    if (inserted)
      goto LABEL_42;
    inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v19, 700);
    if (inserted)
      goto LABEL_42;
  }
  if (v4)
  {
    if (v4 != 1)
      v4 = 4;
    inserted = FigAlternatePreferredVideoRangeFilterCreate((const __CFAllocator *)*v10, v4, &cf);
    if (inserted || (inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, cf, 700)) != 0)
    {
LABEL_42:
      v14 = inserted;
      goto LABEL_43;
    }
  }
  v14 = FigAlternateFilterTreeCreateFilter(v21, CFSTR("StreamingRestrictions"), 851, &v22);
  if (v14)
  {
LABEL_43:
    v15 = 0;
    goto LABEL_25;
  }
  v15 = v22;
  v22 = 0;
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (v14
    || (v16 = *(unsigned int (**)(uint64_t, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8)) == 0)
  {
    v12 = 0;
    if (!v15)
      return v12;
    goto LABEL_38;
  }
  v12 = v16(a1, v15, 1) == 0;
  if (v15)
LABEL_38:
    CFRelease(v15);
  return v12;
}

CFStringRef FigAlternateFilterMonitorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAlternateFilterMonitor <%p>]"), a1);
}

uint64_t famfon_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  void (*v4)(uint64_t, _QWORD);
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_QWORD *)DerivedStorage;
  v4 = *(void (**)(uint64_t, _QWORD))(DerivedStorage + 24);
  if (v4)
    v4(a1, *(_QWORD *)(DerivedStorage + 48));
  if (v3[9])
    FigAlternateFilterMonitorTriggerRemoveObserver();
  v5 = (const void *)v3[4];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)v3[5];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)v3[6];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)v3[7];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)v3[8];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)v3[9];
  if (v10)
    CFRelease(v10);
  return FigSimpleMutexDestroy();
}

CFStringRef famfon_copyDebugDesc(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  uint64_t v4;
  const void *Value;
  CFStringRef v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v3 = (const void *)DerivedStorage[10];
  v4 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 64), v3);
  v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAlternateFilterMonitorForNotification<%p> \"%@\" state:%lu currentFilter:%@]"), a1, DerivedStorage[4], DerivedStorage[10], Value);
  MEMORY[0x19402EA24](*DerivedStorage);
  return v6;
}

uint64_t famfon_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v7;
  const void *v8;
  CFTypeRef v9;
  const void *Value;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (FigCFEqual())
  {
    v8 = *(const void **)(CMBaseObjectGetDerivedStorage() + 72);
    if (v8)
      v9 = CFRetain(v8);
    else
      v9 = 0;
  }
  else
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)v7[7], a2);
    v9 = Value;
    if (Value)
      CFRetain(Value);
  }
  *a4 = v9;
  MEMORY[0x19402EA24](*v7);
  return 0;
}

const void *famfon_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  _QWORD *DerivedStorage;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  __CFDictionary *v11;
  void (*v12)(uint64_t, const void *, const void *);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  if (a2)
  {
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (FigCFEqual())
    {
      v8 = CMBaseObjectGetDerivedStorage();
      v9 = FigAlternateFilterMonitorTriggerRemoveObserver();
      if ((_DWORD)v9
        || (v9 = FigAlternateFilterMonitorTriggerAddObserver((uint64_t)a3, a1, famfon_triggerCallback, 0), (_DWORD)v9))
      {
        v10 = (const void *)v9;
      }
      else
      {
        v10 = *(const void **)(v8 + 72);
        *(_QWORD *)(v8 + 72) = a3;
        if (a3)
          CFRetain(a3);
        if (v10)
        {
          CFRelease(v10);
LABEL_12:
          v10 = 0;
        }
      }
      MEMORY[0x19402EA24](*v7);
      if ((_DWORD)v10)
        return v10;
      goto LABEL_14;
    }
    v11 = (__CFDictionary *)v7[7];
    if (a3)
      CFDictionarySetValue(v11, a2, a3);
    else
      CFDictionaryRemoveValue(v11, a2);
    goto LABEL_12;
  }
  v10 = (const void *)FigSignalErrorAt();
  if ((_DWORD)v10)
    return v10;
LABEL_14:
  v12 = (void (*)(uint64_t, const void *, const void *))v7[2];
  if (v12)
    v12(a1, a2, a3);
  return v10;
}

uint64_t famfon_setFilterForState(const void *a1, const void *a2, const void *a3)
{
  _QWORD *DerivedStorage;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  CFTypeRef v10;
  CFTypeRef cf;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (a2)
  {
    v7 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    v8 = famfon_copyFilterForCurrentState((uint64_t)a1, &cf);
    if ((_DWORD)v8)
    {
      v9 = 0;
    }
    else
    {
      v9 = (const void *)v7[10];
      CFDictionarySetValue((CFMutableDictionaryRef)v7[8], a3, a2);
    }
    MEMORY[0x19402EA24](*v7);
    v10 = cf;
    if ((_DWORD)v8)
      goto LABEL_7;
  }
  else
  {
    v8 = FigSignalErrorAt();
    v10 = 0;
    v9 = 0;
    if ((_DWORD)v8)
      goto LABEL_7;
  }
  if (v9 == a3)
  {
    v8 = fam_postStateChangedNotification(a1, (uint64_t)a3, v10, (uint64_t)a3, a2);
    v10 = cf;
  }
  else
  {
    v8 = 0;
  }
LABEL_7:
  if (v10)
    CFRelease(v10);
  return v8;
}

uint64_t famfon_setState(const void *a1, const void *a2)
{
  _QWORD *DerivedStorage;
  const void *v5;
  uint64_t v6;
  const void *Value;
  const void *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v5 = (const void *)DerivedStorage[10];
  DerivedStorage[10] = a2;
  v6 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 64), v5);
  v8 = Value;
  if (Value)
    CFRetain(Value);
  v9 = CMBaseObjectGetDerivedStorage();
  v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a2);
  v11 = v10;
  if (v10)
    CFRetain(v10);
  MEMORY[0x19402EA24](*DerivedStorage);
  if (v5 != a2)
  {
    v12 = fam_postStateChangedNotification(a1, (uint64_t)v5, v8, (uint64_t)a2, v11);
    if (!v8)
      goto LABEL_8;
    goto LABEL_7;
  }
  v12 = 0;
  if (v8)
LABEL_7:
    CFRelease(v8);
LABEL_8:
  if (v11)
    CFRelease(v11);
  return v12;
}

uint64_t famfon_copyFilterForCurrentState(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  const void *v5;
  uint64_t v6;
  const void *Value;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  v5 = (const void *)v4[10];
  v6 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 64), v5);
  *a2 = Value;
  if (Value)
    CFRetain(Value);
  MEMORY[0x19402EA24](*v4);
  return 0;
}

uint64_t famfon_invokeTrigger(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  const void *v4;
  CFTypeRef v5;
  uint64_t v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v4 = (const void *)DerivedStorage[9];
  if (v4)
  {
    v5 = CFRetain(v4);
    MEMORY[0x19402EA24](*DerivedStorage);
    if (v5)
    {
      v6 = FigAlternateFilterMonitorTriggerInvoke(v5, a2);
      CFRelease(v5);
      return v6;
    }
  }
  else
  {
    MEMORY[0x19402EA24](*DerivedStorage);
  }
  return 0;
}

uint64_t famvr_copyDisplayList(const void *a1)
{
  CFAllocatorRef v2;
  void (*v3)(const void *, const __CFString *, CFAllocatorRef, uint64_t *);
  uint64_t v5;

  v5 = 0;
  v2 = CFGetAllocator(a1);
  v3 = *(void (**)(const void *, const __CFString *, CFAllocatorRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (!v3)
    return 0;
  v3(a1, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v2, &v5);
  return v5;
}

void fafm_getBestSupportedDisplayFromDisplayList(const __CFArray *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  CFIndex v6;
  int v7;
  const void *ValueAtIndex;
  _OWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (a1 && CFArrayGetCount(a1))
  {
    memset(&v10[2], 0, 28);
    if (CFArrayGetCount(a1) < 1)
    {
      v7 = 6;
    }
    else
    {
      v6 = 0;
      v7 = 6;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
        memset(v10, 0, 32);
        FPSupport_GetBestDisplayInfoForDisplay(ValueAtIndex, (uint64_t)v10, a3);
        if (SLODWORD(v10[0]) < v7 && SLODWORD(v10[0]) >= 1)
        {
          v10[2] = *(_OWORD *)((char *)v10 + 4);
          *(_OWORD *)((char *)&v10[2] + 12) = v10[1];
          v7 = v10[0];
        }
        ++v6;
      }
      while (v6 < CFArrayGetCount(a1));
    }
    *(_DWORD *)a2 = v7;
    *(_OWORD *)(a2 + 4) = v10[2];
    *(_OWORD *)(a2 + 16) = *(_OWORD *)((char *)&v10[2] + 12);
  }
  else
  {
    FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate((_DWORD *)a2, (double *)(a2 + 8), (_QWORD *)(a2 + 24));
  }
}

float fafm_getMaxContentFrameRate(const void *a1)
{
  CFAllocatorRef v2;
  uint64_t (*v3)(const void *, const __CFString *, CFAllocatorRef, CFNumberRef *);
  int v4;
  CFNumberRef v5;
  BOOL v6;
  CFNumberRef number;
  float valuePtr;

  valuePtr = 0.0;
  number = 0;
  v2 = CFGetAllocator(a1);
  v3 = *(uint64_t (**)(const void *, const __CFString *, CFAllocatorRef, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (v3)
  {
    v4 = v3(a1, CFSTR("AlternateFilterMonitorProperty_MaxContentFrameRate"), v2, &number);
    v5 = number;
    if (v4)
      v6 = 1;
    else
      v6 = number == 0;
    if (!v6)
    {
      CFNumberGetValue(number, kCFNumberFloatType, &valuePtr);
      v5 = number;
    }
    if (v5)
      CFRelease(v5);
  }
  return valuePtr;
}

uint64_t famrbl_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[3];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[5];
  if (v3)
    CFRelease(v3);
  return FigSimpleMutexDestroy();
}

CFStringRef famrbl_copyDebugDesc(uint64_t a1)
{
  _QWORD *DerivedStorage;
  CFStringRef v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAlternateFilterMonitorForRenditionDenyList<%p> state:%lu currentFilter:%@]"), a1, DerivedStorage[2], DerivedStorage[5]);
  MEMORY[0x19402EF04](*DerivedStorage);
  return v3;
}

uint64_t famrbl_copyProperty()
{
  return 4294951681;
}

uint64_t famrbl_setProperty(const void *a1, uint64_t a2, const void *a3)
{
  _QWORD *DerivedStorage;
  _QWORD *v7;
  uint64_t v8;
  CFTypeID TypeID;
  uint64_t v10;
  const void *v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  MEMORY[0x19402EEEC](*DerivedStorage);
  v8 = v7[2];
  if (FigCFEqual())
  {
    if (a3 && (TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a3)))
    {
      v10 = FigSignalErrorAt();
    }
    else if (FigCFEqual())
    {
      v10 = 0;
    }
    else
    {
      v11 = (const void *)v7[4];
      v7[4] = a3;
      if (a3)
        CFRetain(a3);
      if (v11)
        CFRelease(v11);
      v10 = 0;
      ++v8;
    }
  }
  else
  {
    v10 = 4294951681;
  }
  famrbl_updateFilterUnlockAndNotify(a1, v8);
  return v10;
}

uint64_t famrbl_updateFilterUnlockAndNotify(const void *a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  CFAllocatorRef v8;
  const void *v9;
  CFTypeRef v10;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  v6 = DerivedStorage[2];
  if (v6 == a2)
  {
    MEMORY[0x19402EF04](*DerivedStorage);
    v7 = 0;
  }
  else
  {
    v8 = CFGetAllocator(a1);
    if (FigAlternateURLDependencyDenyListFilterCreate(v8, (CFTypeRef)v5[3], (const void *)v5[4], 0, &cf))
    {
      v9 = 0;
    }
    else
    {
      v9 = (const void *)v5[5];
      v10 = cf;
      if (cf)
        v10 = CFRetain(cf);
      v5[5] = v10;
      v5[2] = a2;
    }
    MEMORY[0x19402EF04](*v5);
    v7 = fam_postStateChangedNotification(a1, v6, v9, a2, cf);
    if (v9)
      CFRelease(v9);
  }
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t famrbl_setFilterForState()
{
  return 4294951681;
}

uint64_t famrbl_setState()
{
  return 4294951681;
}

uint64_t famrbl_copyFilterForCurrentState(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  CFTypeRef v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*DerivedStorage);
  v5 = (CFTypeRef)v4[5];
  if (v5)
    v5 = CFRetain(v5);
  *a2 = v5;
  MEMORY[0x19402EF04](*v4);
  return 0;
}

uint64_t famrbl_invokeTrigger(const void *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  const __CFArray *v6;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void *ValueAtIndex;
  const void *v12;
  unsigned int (*v13)(const void *, const void *);
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  const void *v17;
  CFIndex i;
  const void *v20;
  uint64_t v21;
  uint64_t v23;
  const void *v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)DerivedStorage);
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  v6 = *(const __CFArray **)(DerivedStorage + 24);
  if (v6)
  {
    v7 = CFArrayGetCount(v6);
    v8 = *(_QWORD *)(DerivedStorage + 16);
    if (v7 < 1)
    {
      v10 = 0;
    }
    else
    {
      v9 = v7;
      v23 = *(_QWORD *)(DerivedStorage + 16);
      v24 = a1;
      v10 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 24), v9 - 1);
        if (a2
          && (v12 = ValueAtIndex,
              v13 = *(unsigned int (**)(const void *, const void *))(DerivedStorage + 8),
              v14 = CFArrayGetCount(a2),
              v14 >= 1))
        {
          v15 = v14;
          v16 = 0;
          while (1)
          {
            v17 = CFArrayGetValueAtIndex(a2, v16);
            if (v13(v17, v12))
              break;
            if (v15 == ++v16)
              goto LABEL_12;
          }
        }
        else
        {
LABEL_12:
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 24), v9 - 1);
          v10 = 1;
        }
      }
      while (v9-- > 1);
      v8 = v23;
      a1 = v24;
    }
  }
  else
  {
    v10 = 0;
    v8 = *(_QWORD *)(DerivedStorage + 16);
  }
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v20 = CFArrayGetValueAtIndex(a2, i);
      if (!FigCFArrayContainsValue())
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 24), v20);
        v10 = 1;
      }
    }
  }
  if (v10)
    v21 = v8 + 1;
  else
    v21 = v8;
  return famrbl_updateFilterUnlockAndNotify(a1, v21);
}

uint64_t FigShareAndAirPlayHelperGetClassID()
{
  if (FigShareAndAirPlayHelperGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&FigShareAndAirPlayHelperGetClassID_sRegisterOnce, &FigShareAndAirPlayHelperGetClassID_sClassID, (dispatch_function_t)helper_registerBaseClass);
  return FigShareAndAirPlayHelperGetClassID_sClassID;
}

uint64_t helper_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigShareAndAirPlayHelperGetTypeID()
{
  if (FigShareAndAirPlayHelperGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&FigShareAndAirPlayHelperGetClassID_sRegisterOnce, &FigShareAndAirPlayHelperGetClassID_sClassID, (dispatch_function_t)helper_registerBaseClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigShareAndAirPlayHelperGetShared()
{
  if (_os_feature_enabled_impl())
    return FigShareAndAirPlayHelperLocalGetShared();
  else
    return 0;
}

CFStringRef helper_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigShareAndAirPlayHelper %p]"), a1);
}

uint64_t FigCDSSessionGetTypeID()
{
  MEMORY[0x19402F294](&FigCDSSessionLocalGetTypeID_sRegisterFigCDSSessionOnce, RegisterFigCDSSessionClass);
  return sFigCDSSessionID;
}

NSObject *FigCDSSessionSetMasterClock(NSObject *result, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[3];
  unsigned int v4;

  v4 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v3[2] = v2;
      v3[0] = a2;
      v3[1] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)cdsSessionSetMasterClockDo);
      return v4;
    }
  }
  return result;
}

uint64_t cdsSessionSetMasterClockDo(uint64_t a1)
{
  uint64_t result;
  _DWORD *v3;

  result = FigCDSTriggerCreate(*(OpaqueCMClock **)a1, 250, (uint64_t)onTriggerEvent_0, (uint64_t)onTriggerTimeUpdate_0, *(_QWORD *)(a1 + 16), (uint64_t *)(*(_QWORD *)(a1 + 16) + 48));
  v3 = *(_DWORD **)(a1 + 8);
  if (v3)
    *v3 = result;
  return result;
}

NSObject *FigCDSSessionSetCALayerDevice(NSObject *result, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[3];
  unsigned int v4;

  v4 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v3[2] = v2;
      v3[0] = a2;
      v3[1] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)cdsSessionSetCALayerDeviceDo);
      return v4;
    }
  }
  return result;
}

uint64_t cdsSessionSetCALayerDeviceDo(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFDictionary *v4;
  const void *Value;
  int v6;
  uint64_t v7;
  uint64_t v8;
  double (*v9)(uint64_t);
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t ProtocolVTable;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, double, double, double, double);
  uint64_t result;
  int v21;
  int *v22;

  v2 = a1[2];
  v3 = *a1;
  v4 = *(const __CFDictionary **)(v2 + 560);
  if (v4)
    Value = CFDictionaryGetValue(v4, *(const void **)(v2 + 248));
  else
    Value = 0;
  v6 = FigCDSCALayerOutputCreate((uint64_t)onUserEvent_0, (uint64_t)onViewportChanged_0, (uint64_t)drawInContext_0, v2, v3, (uint64_t)Value, *MEMORY[0x1E0C9AE00], (_QWORD *)(v2 + 64));
  if (v6)
  {
    v21 = v6;
  }
  else
  {
    *(_DWORD *)(v2 + 584) = FigCDSCALayerOutputGetOrientation();
    *(_DWORD *)(v2 + 588) = FigCDSCALayerOutputGetDisplayScale();
    v7 = *(_QWORD *)(v2 + 248);
    v8 = *(_QWORD *)(v2 + 64);
    v9 = *(double (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v9)
    {
      v10 = v9(v8);
      v12 = v11;
      v14 = v13;
      v16 = v15;
    }
    else
    {
      v10 = *MEMORY[0x1E0C9D628];
      v12 = *(double *)(MEMORY[0x1E0C9D628] + 8);
      v14 = *(double *)(MEMORY[0x1E0C9D628] + 16);
      v16 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    }
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable && (v18 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
    {
      v19 = *(uint64_t (**)(uint64_t, double, double, double, double))(v18 + 96);
      if (v19)
      {
        result = v19(v7, v10, v12, v14, v16);
        v21 = result;
        if (!(_DWORD)result)
          goto LABEL_15;
      }
      else
      {
        v21 = -12782;
      }
    }
    else
    {
      v21 = -12788;
    }
  }
  result = FigSignalErrorAt();
LABEL_15:
  v22 = (int *)a1[1];
  if (v22)
    *v22 = v21;
  return result;
}

uint64_t FigCDSSessionSetCACFLayerDevice()
{
  return 0;
}

NSObject *FigCDSSessionSetCGContextDevice(NSObject *result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  NSObject *v8;
  _QWORD context[5];
  int v10;
  int v11;
  unsigned int *v12;
  NSObject *v13;
  unsigned int v14;

  v14 = 0;
  if (result)
  {
    v8 = result;
    result = result[21].isa;
    if (result)
    {
      context[0] = a2;
      *(double *)&context[1] = a5;
      *(double *)&context[2] = a6;
      *(double *)&context[3] = a7;
      *(double *)&context[4] = a8;
      v10 = a3;
      v11 = a4;
      v12 = &v14;
      v13 = v8;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetCGContextDeviceDo);
      return v14;
    }
  }
  return result;
}

uint64_t cdsSessionSetCGContextDeviceDo(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  const __CFDictionary *v9;
  const void *Value;
  uint64_t ProtocolVTable;
  uint64_t v12;
  void (*v13)(const void *, _QWORD);
  const void *v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, double, double, double, double);
  uint64_t v18;
  uint64_t v19;
  double (*v20)(uint64_t);
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, double, double, double, double);
  uint64_t result;
  int v32;
  int *v33;

  v2 = a1[7];
  v3 = *a1;
  v4 = *((double *)a1 + 1);
  v5 = *((double *)a1 + 2);
  v6 = *((double *)a1 + 3);
  v7 = *((double *)a1 + 4);
  v8 = a1[5];
  v9 = *(const __CFDictionary **)(v2 + 560);
  if (v9)
  {
    Value = CFDictionaryGetValue(v9, *(const void **)(v2 + 248));
    FigCDSOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v12 = *(_QWORD *)(ProtocolVTable + 16);
      if (v12)
      {
        v13 = *(void (**)(const void *, _QWORD))(v12 + 16);
        if (v13)
          v13(Value, 0);
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 560), *(const void **)(v2 + 248));
    v14 = *(const void **)(v2 + 560);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v2 + 560) = 0;
    }
  }
  v15 = FigCDSCGOutputCreate((uint64_t)onViewportChanged_0, (uint64_t)drawInContext_0, v2, v3, *MEMORY[0x1E0C9AE00], (_QWORD *)(v2 + 64));
  if (v15)
    goto LABEL_25;
  *(_QWORD *)(v2 + 584) = v8;
  v16 = *(_QWORD *)(v2 + 64);
  v17 = *(uint64_t (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 48);
  if (!v17)
    goto LABEL_19;
  v15 = v17(v16, v4, v5, v6, v7);
  if (v15)
  {
LABEL_25:
    v32 = v15;
    goto LABEL_21;
  }
  v18 = *(_QWORD *)(v2 + 248);
  v19 = *(_QWORD *)(v2 + 64);
  v20 = *(double (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v20)
  {
    v21 = v20(v19);
    v23 = v22;
    v25 = v24;
    v27 = v26;
  }
  else
  {
    v21 = *MEMORY[0x1E0C9D628];
    v23 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v25 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v27 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  FigCDSNodeProtocolGetProtocolID();
  v28 = CMBaseObjectGetProtocolVTable();
  if (!v28 || (v29 = *(_QWORD *)(v28 + 16)) == 0)
  {
    v32 = -12788;
    goto LABEL_21;
  }
  v30 = *(uint64_t (**)(uint64_t, double, double, double, double))(v29 + 96);
  if (v30)
  {
    result = v30(v18, v21, v23, v25, v27);
    v32 = result;
    if (!(_DWORD)result)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_19:
  v32 = -12782;
LABEL_21:
  result = FigSignalErrorAt();
LABEL_22:
  v33 = (int *)a1[6];
  if (v33)
    *v33 = v32;
  return result;
}

NSObject *FigCDSSessionSetLegibleOutputDevice(NSObject *result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  NSObject *v8;
  _QWORD context[5];
  int v10;
  int v11;
  unsigned int *v12;
  NSObject *v13;
  unsigned int v14;

  v14 = 0;
  if (result)
  {
    v8 = result;
    result = result[21].isa;
    if (result)
    {
      context[0] = a2;
      *(double *)&context[1] = a5;
      *(double *)&context[2] = a6;
      *(double *)&context[3] = a7;
      *(double *)&context[4] = a8;
      v10 = a3;
      v11 = a4;
      v12 = &v14;
      v13 = v8;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetLegibleOutputDeviceDo);
      return v14;
    }
  }
  return result;
}

uint64_t cdsSessionSetLegibleOutputDeviceDo(uint64_t *a1)
{
  _QWORD *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, double, double, double, double);
  uint64_t v11;
  uint64_t v12;
  double (*v13)(uint64_t);
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t ProtocolVTable;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, double, double, double, double);
  uint64_t result;
  int v25;
  int *v26;

  v2 = (_QWORD *)a1[7];
  v3 = *((double *)a1 + 1);
  v4 = *((double *)a1 + 2);
  v5 = *((double *)a1 + 3);
  v6 = *((double *)a1 + 4);
  v7 = a1[5];
  v8 = FigCDSLegibleOutputCreate((uint64_t)onViewportChanged_0, (uint64_t)layoutInContext_0, (uint64_t)v2, *a1, v2 + 8);
  if (v8)
    goto LABEL_18;
  v2[73] = v7;
  v9 = v2[8];
  v10 = *(uint64_t (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 48);
  if (!v10)
    goto LABEL_12;
  v8 = v10(v9, v3, v4, v5, v6);
  if (v8)
  {
LABEL_18:
    v25 = v8;
    goto LABEL_14;
  }
  v11 = v2[31];
  v12 = v2[8];
  v13 = *(double (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v13)
  {
    v14 = v13(v12);
    v16 = v15;
    v18 = v17;
    v20 = v19;
  }
  else
  {
    v14 = *MEMORY[0x1E0C9D628];
    v16 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v18 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v20 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v22 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v25 = -12788;
    goto LABEL_14;
  }
  v23 = *(uint64_t (**)(uint64_t, double, double, double, double))(v22 + 96);
  if (v23)
  {
    result = v23(v11, v14, v16, v18, v20);
    v25 = result;
    if (!(_DWORD)result)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_12:
  v25 = -12782;
LABEL_14:
  result = FigSignalErrorAt();
LABEL_15:
  v26 = (int *)a1[6];
  if (v26)
    *v26 = v25;
  return result;
}

NSObject *FigCDSSessionSetProfile(NSObject *result, unsigned int a2)
{
  NSObject *v2;
  _QWORD v3[3];
  unsigned int v4;

  v4 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v3[0] = v2;
      v3[1] = a2;
      v3[2] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)SetProfileDo_0);
      return v4;
    }
  }
  return result;
}

void SetProfileDo_0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  const __CFDictionary *v5;
  const void *Value;
  uint64_t ProtocolVTable;
  uint64_t v8;
  uint64_t (*v9)(const void *, _QWORD);
  int v10;
  const void *v11;
  CFTypeRef v12;
  __CFDictionary *v13;
  int *v14;
  CFTypeRef cf;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)a1 + 268) == v3)
  {
    v4 = 0;
    goto LABEL_25;
  }
  v5 = *(const __CFDictionary **)(v2 + 560);
  if (v5)
  {
    Value = CFDictionaryGetValue(v5, *(const void **)(v2 + 248));
    FigCDSOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable || (v8 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
    {
      v4 = -12788;
LABEL_24:
      FigSignalErrorAt();
      goto LABEL_25;
    }
    v9 = *(uint64_t (**)(const void *, _QWORD))(v8 + 16);
    if (!v9)
    {
      v4 = -12782;
      goto LABEL_24;
    }
    v10 = v9(Value, 0);
    if (v10)
      goto LABEL_29;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 560), *(const void **)(v2 + 248));
    v3 = *(_DWORD *)(a1 + 8);
  }
  if ((v3 | 2) == 3)
  {
    cf = 0;
    v10 = FigCDSAVFLayoutRegionCreate((uint64_t)onDisplayUpdateEvent_0, v2, &cf);
    if (!v10)
      goto LABEL_11;
    goto LABEL_29;
  }
  cf = 0;
  v10 = FigCDSFreeLayoutRegionCreate((uint64_t)onDisplayUpdateEvent_0, v2, &cf);
  if (v10)
  {
LABEL_29:
    v4 = v10;
    goto LABEL_24;
  }
LABEL_11:
  v11 = *(const void **)(v2 + 248);
  v12 = cf;
  *(_QWORD *)(v2 + 248) = cf;
  if (v12)
    CFRetain(v12);
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  cf = 0;
  v4 = FigCDSCALayerOutputNodeCreate(&cf);
  if (v4)
    goto LABEL_24;
  v13 = *(__CFDictionary **)(v2 + 560);
  if (v13)
    CFDictionarySetValue(v13, *(const void **)(v2 + 248), cf);
  if (cf)
    CFRelease(cf);
  *(_DWORD *)(v2 + 268) = *(_DWORD *)(a1 + 8);
  applyContextDefaultsToMASettings_0((int64x2_t *)v2);
LABEL_25:
  v14 = *(int **)(a1 + 16);
  if (v14)
    *v14 = v4;
}

uint64_t FigCDSSessionSetPlayer(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v4[2];

  if (a1)
  {
    v4[0] = a1;
    v4[1] = a2;
    v2 = *(NSObject **)(a1 + 168);
    if (v2)
      dispatch_sync_f(v2, v4, (dispatch_function_t)setPlayerDo_0);
  }
  return 0;
}

void setPlayerDo_0(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  uint64_t *v4;
  const void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t *);
  BOOL v8;
  _QWORD *v9;
  CFTypeRef v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v13;
  OpaqueCMClock *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  CFTypeRef cf;
  int v20;

  v20 = 0;
  cf = 0;
  v1 = *a1;
  v2 = (const void *)a1[1];
  v4 = (uint64_t *)(*a1 + 56);
  v3 = *v4;
  if (!*v4)
  {
    v20 = FigCDSNotificationInputCreate((uint64_t)onCaptionInput_0, (uint64_t)onRegionInput_0, v1, *MEMORY[0x1E0C9AE00], v4);
    if (v20)
      goto LABEL_33;
    v16 = (int *)v1;
    v17 = 3;
    v18 = &v20;
    SetProfileDo_0((uint64_t)&v16);
    v3 = *(_QWORD *)(v1 + 56);
  }
  v20 = FigCDSNotificationInputSetPlayer(v3, (uint64_t)v2);
  if (v20)
    goto LABEL_33;
  if (*(_QWORD *)(v1 + 72))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v5 = *(const void **)(v1 + 72);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(v1 + 72) = v2;
  if (v2)
    CFRetain(v2);
  if (v5)
    CFRelease(v5);
  v6 = *(_QWORD *)(v1 + 72);
  if (!v6)
  {
    v16 = &v20;
    v17 = v1;
    cdsSessionStopDo((uint64_t)&v16);
    if (!v20)
    {
      v20 = FigCDSTriggerCreate(0, 250, (uint64_t)onTriggerEvent_0, (uint64_t)onTriggerTimeUpdate_0, v1, (uint64_t *)(v1 + 48));
      if (!v20)
        goto LABEL_30;
    }
    goto LABEL_33;
  }
  v15 = 0;
  v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v7)
  {
    v20 = v7(v6, 0, &v15);
    if (v20)
      v8 = 1;
    else
      v8 = v15 == 0;
    if (!v8)
    {
      v9 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      *v9 = CFRetain((CFTypeRef)v1);
      v10 = *(CFTypeRef *)(v1 + 72);
      if (v10)
        v10 = CFRetain(v10);
      v9[1] = v10;
      dispatch_async_f(*(dispatch_queue_t *)(v1 + 168), v9, (dispatch_function_t)playbackItemChangedCallbackDo_0);
    }
  }
  else
  {
    v20 = -12782;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(v1 + 72));
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v12)
  {
    v13 = v12(FigBaseObject, CFSTR("MasterClock"), *MEMORY[0x1E0C9AE00], &cf);
    v14 = (OpaqueCMClock *)cf;
  }
  else
  {
    v14 = 0;
    v13 = -12782;
  }
  v20 = v13;
  v20 = FigCDSTriggerCreate(v14, 250, (uint64_t)onTriggerEvent_0, (uint64_t)onTriggerTimeUpdate_0, v1, (uint64_t *)(v1 + 48));
  if (v20 || (v16 = &v20, v17 = v1, cdsSessionStartDo((uint64_t)&v16), v20))
LABEL_33:
    FigSignalErrorAt();
LABEL_30:
  if (cf)
    CFRelease(cf);
}

uint64_t FigCDSSessionSetNonForcedSubtitleDisplay(_QWORD *a1, unsigned __int8 a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  if (a1)
  {
    v8[0] = a1;
    v8[1] = a2;
    v4 = a1[21];
    if (v4)
      dispatch_sync_f(v4, v8, (dispatch_function_t)updateNonForcedSubtitleDisplayEnabledDo_0);
    if (!a1[7])
    {
      v5 = FigCDSNotificationInputSetNonForcedSubtitleDisplay(0, a2);
      if ((_DWORD)v5)
      {
        v6 = v5;
        FigSignalErrorAt();
        return v6;
      }
    }
    updateDisplayPort_0(a1, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
  }
  return 0;
}

unsigned __int8 *updateNonForcedSubtitleDisplayEnabledDo_0(unsigned __int8 *result)
{
  _BYTE *v1;
  int v2;
  int v3;

  v1 = *(_BYTE **)result;
  v2 = *(unsigned __int8 *)(*(_QWORD *)result + 264);
  v3 = result[8];
  if (v2 != v3)
  {
    v1[264] = v3;
    v2 = v3;
  }
  v1[266] = (v1[265] | v2) == 0;
  return result;
}

void updateDisplayPort_0(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  double *v10;
  double *v11;
  NSObject *v12;

  if (a1[22])
  {
    v10 = (double *)malloc_type_calloc(1uLL, 0x28uLL, 0x102004065753CD5uLL);
    if (v10)
    {
      v11 = v10;
      *(_QWORD *)v10 = CFRetain(a1);
      v11[1] = a2;
      v11[2] = a3;
      v12 = MEMORY[0x1E0C80D38];
      v11[3] = a4;
      v11[4] = a5;
      dispatch_async_f(v12, v11, (dispatch_function_t)updateDisplayPortDoAsync_0);
    }
  }
}

NSObject *FigCDSSessionSetCaptionSample(NSObject *result, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD context[4];
  unsigned int v5;

  v5 = 0;
  if (result)
  {
    v3 = result;
    result = result[21].isa;
    if (result)
    {
      context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetCaptionSampleDo);
      return v5;
    }
  }
  return result;
}

uint64_t cdsSessionSetCaptionSampleDo(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  _DWORD *v8;
  _QWORD v9[3];
  int v10;

  v10 = 0;
  v2 = a1[3];
  v3 = *a1;
  v4 = a1[1];
  v6 = (uint64_t *)(v2 + 56);
  v5 = *(_QWORD *)(v2 + 56);
  if (!v5)
  {
    v10 = FigCDSBasicInputCreate((uint64_t)onCaptionInput_0, (uint64_t)onRegionInput_0, v2, *MEMORY[0x1E0C9AE00], v6);
    if (v10)
    {
LABEL_10:
      result = FigSignalErrorAt();
      goto LABEL_7;
    }
    v9[0] = v2;
    v9[1] = 1;
    v9[2] = &v10;
    SetProfileDo_0((uint64_t)v9);
    v5 = *(_QWORD *)(v2 + 56);
  }
  if (v4)
  {
    FigCDSBasicInputSetLayoutContext(v5, v4);
    v5 = *v6;
  }
  result = FigCDSBasicInputAddSample(v5, v3);
  v10 = result;
  if ((_DWORD)result)
    goto LABEL_10;
LABEL_7:
  v8 = (_DWORD *)a1[2];
  if (v8)
    *v8 = v10;
  return result;
}

NSObject *FigCDSSessionStart(NSObject *result)
{
  NSObject *v1;
  _QWORD context[2];
  unsigned int v3;

  v3 = 0;
  if (result)
  {
    v1 = result;
    result = result[21].isa;
    if (result)
    {
      context[0] = &v3;
      context[1] = v1;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionStartDo);
      return v3;
    }
  }
  return result;
}

uint64_t cdsSessionStartDo(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v2 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v2 + 48);
  if (result && (result = FigCDSTriggerStart(result), (_DWORD)result))
  {
    LODWORD(v4) = result;
  }
  else
  {
    *(_BYTE *)(v2 + 40) = 1;
    v4 = *(_QWORD *)(v2 + 56);
    if (!v4)
      goto LABEL_9;
    v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v5)
    {
      result = v5(v4);
      LODWORD(v4) = result;
      if (!(_DWORD)result)
        goto LABEL_9;
    }
    else
    {
      LODWORD(v4) = -12782;
    }
  }
  result = FigSignalErrorAt();
LABEL_9:
  if (*(_QWORD *)a1)
    **(_DWORD **)a1 = v4;
  return result;
}

NSObject *FigCDSSessionStop(NSObject *result)
{
  NSObject *v1;
  _QWORD context[2];
  unsigned int v3;

  v3 = 0;
  if (result)
  {
    v1 = result;
    result = result[21].isa;
    if (result)
    {
      context[0] = &v3;
      context[1] = v1;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionStopDo);
      return v3;
    }
  }
  return result;
}

uint64_t cdsSessionStopDo(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  int v5;
  uint64_t result;
  int v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 56);
  if (v3)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v4)
    {
      v7 = -12782;
      goto LABEL_9;
    }
    v5 = v4(v3);
    if (v5)
    {
      v7 = v5;
      goto LABEL_9;
    }
  }
  *(_BYTE *)(v2 + 40) = 0;
  result = *(_QWORD *)(v2 + 48);
  if (!result)
  {
    v7 = 0;
    goto LABEL_10;
  }
  result = FigCDSTriggerStop(result);
  v7 = result;
  if (!(_DWORD)result)
    goto LABEL_10;
LABEL_9:
  result = FigSignalErrorAt();
LABEL_10:
  if (*(_QWORD *)a1)
    **(_DWORD **)a1 = v7;
  return result;
}

NSObject *FigCDSSessionSetTime(NSObject *result, __int128 *a2)
{
  NSObject *v2;
  __int128 v3;
  uint64_t v4;
  unsigned int *v5;
  NSObject *v6;
  unsigned int v7;

  v7 = 0;
  if (result)
  {
    v2 = result;
    if (result[6].isa)
    {
      result = result[21].isa;
      if (result)
      {
        v6 = v2;
        v3 = *a2;
        v4 = *((_QWORD *)a2 + 2);
        v5 = &v7;
        dispatch_sync_f(result, &v3, (dispatch_function_t)cdsSessionSetTimeDo);
        return v7;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t cdsSessionSetTimeDo(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  CMTime v5;

  v2 = *(_QWORD *)(a1 + 32);
  v5 = *(CMTime *)a1;
  result = FigCDSTriggerSetCurrentTime(*(_QWORD *)(v2 + 48), &v5);
  v4 = *(_DWORD **)(a1 + 24);
  if (v4)
    *v4 = result;
  return result;
}

uint64_t FigCDSSessionGetTime(uint64_t result, uint64_t a2)
{
  NSObject *v2;
  __int128 v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;

  v8 = 0;
  if (result)
  {
    if (*(_QWORD *)(result + 48))
    {
      v2 = *(NSObject **)(result + 168);
      if (v2)
      {
        v4 = 0uLL;
        v5 = 0;
        v6 = &v8;
        v7 = result;
        dispatch_sync_f(v2, &v4, (dispatch_function_t)cdsSessionGetTimeDo);
        *(_OWORD *)a2 = v4;
        *(_QWORD *)(a2 + 16) = v5;
        return v8;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

CMTime *cdsSessionGetTimeDo(uint64_t a1)
{
  CMTime *result;
  _DWORD *v3;
  CMTime v4;

  result = FigCDSTriggerGetCurrentTime(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), &v4);
  *(CMTime *)a1 = v4;
  v3 = *(_DWORD **)(a1 + 24);
  if (v3)
    *v3 = 0;
  return result;
}

NSObject *FigCDSSessionSetTimeRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD context[4];
  unsigned int v5;

  v5 = 0;
  if (result)
  {
    v3 = result;
    result = result[21].isa;
    if (result)
    {
      context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetTimeRangeDo);
      return v5;
    }
  }
  return result;
}

uint64_t cdsSessionSetTimeRangeDo(uint64_t a1)
{
  uint64_t v2;
  double FigBaseObject;
  double v4;
  double v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, double, double);
  uint64_t result;
  int v10;
  int *v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 240);
  FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  v5 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (v7 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
  {
    v8 = *(uint64_t (**)(uint64_t, double, double))(v7 + 16);
    if (v8)
    {
      result = v8(v2, FigBaseObject, v5);
      v10 = result;
      if (!(_DWORD)result)
        goto LABEL_9;
    }
    else
    {
      v10 = -12782;
    }
  }
  else
  {
    v10 = -12788;
  }
  result = FigSignalErrorAt();
LABEL_9:
  v11 = *(int **)(a1 + 16);
  if (v11)
    *v11 = v10;
  return result;
}

NSObject *FigCDSSessionSetCaptionCacheRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD context[4];
  unsigned int v5;

  v5 = 0;
  if (result)
  {
    v3 = result;
    result = result[21].isa;
    if (result)
    {
      context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetCaptionCacheRangeDo);
      return v5;
    }
  }
  return result;
}

uint64_t cdsSessionSetCaptionCacheRangeDo(uint64_t result)
{
  _DWORD *v1;

  *(_OWORD *)(*(_QWORD *)(result + 24) + 88) = *(_OWORD *)result;
  v1 = *(_DWORD **)(result + 16);
  if (v1)
    *v1 = 0;
  return result;
}

NSObject *FigCDSSessionSetBitmapCacheRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD context[4];
  unsigned int v5;

  v5 = 0;
  if (result)
  {
    v3 = result;
    result = result[21].isa;
    if (result)
    {
      context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetBitmapCacheRangeDo);
      return v5;
    }
  }
  return result;
}

uint64_t cdsSessionSetBitmapCacheRangeDo(uint64_t result)
{
  _DWORD *v1;

  *(_OWORD *)(*(_QWORD *)(result + 24) + 104) = *(_OWORD *)result;
  v1 = *(_DWORD **)(result + 16);
  if (v1)
    *v1 = 0;
  return result;
}

NSObject *FigCDSSessionSetCacheBudget(NSObject *result, unsigned int a2)
{
  NSObject *v2;
  _QWORD v3[3];
  unsigned int v4;

  v4 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v3[2] = v2;
      v3[1] = &v4;
      v3[0] = a2;
      dispatch_sync_f(result, v3, (dispatch_function_t)cdsSessionSetCacheBudgetDo);
      return v4;
    }
  }
  return result;
}

int *cdsSessionSetCacheBudgetDo(int *result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  _DWORD *v6;

  v1 = *((_QWORD *)result + 2);
  v2 = *result;
  v3 = *(_DWORD *)(v1 + 120);
  if (v3 < 0)
  {
    v4 = *(_DWORD *)(v1 + 124);
    v5 = *result;
  }
  else
  {
    v4 = v2 - v3;
    v5 = *(_DWORD *)(v1 + 124);
  }
  *(_DWORD *)(v1 + 120) = v2;
  *(_DWORD *)(v1 + 124) = v4 + v5;
  v6 = (_DWORD *)*((_QWORD *)result + 1);
  if (v6)
    *v6 = 0;
  return result;
}

uint64_t FigCDSSessionSetRate(uint64_t result, double a2)
{
  NSObject *v2;
  _QWORD v3[3];
  unsigned int v4;

  v4 = 0;
  if (result)
  {
    if (*(_QWORD *)(result + 48))
    {
      v2 = *(NSObject **)(result + 168);
      if (v2)
      {
        v3[1] = &v4;
        v3[2] = result;
        *(double *)v3 = a2;
        dispatch_sync_f(v2, v3, (dispatch_function_t)cdsSessionSetRateDo);
        return v4;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t cdsSessionSetRateDo(uint64_t a1)
{
  uint64_t result;
  _DWORD *v3;

  result = FigCDSTriggerSetRate(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), *(Float64 *)a1);
  v3 = *(_DWORD **)(a1 + 8);
  if (v3)
    *v3 = result;
  return result;
}

double FigCDSSessionGetRate(uint64_t a1)
{
  double result;
  NSObject *v3;
  _QWORD v4[2];

  result = 0.0;
  if (a1)
  {
    v3 = *(NSObject **)(a1 + 168);
    if (v3)
    {
      v4[0] = 0;
      v4[1] = a1;
      dispatch_sync_f(v3, v4, (dispatch_function_t)cdsSessionGetRateDo);
      return *(double *)v4;
    }
  }
  return result;
}

void cdsSessionGetRateDo(uint64_t a1)
{
  uint64_t v2;
  double Rate;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  if (v2)
    Rate = FigCDSTriggerGetRate(v2);
  else
    Rate = 0.0;
  *(double *)a1 = Rate;
}

uint64_t FigCDSSessionManualTrigger(uint64_t result)
{
  NSObject *v1;
  _QWORD context[2];
  unsigned int v3;

  v3 = 0;
  if (result)
  {
    if (*(_QWORD *)(result + 48))
    {
      v1 = *(NSObject **)(result + 168);
      if (v1)
      {
        context[0] = &v3;
        context[1] = result;
        dispatch_sync_f(v1, context, (dispatch_function_t)cdsSessionManualTriggerDo);
        return v3;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t cdsSessionManualTriggerDo(uint64_t a1)
{
  uint64_t result;

  result = FigCDSTriggerManualTrigger(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48));
  if (*(_QWORD *)a1)
    **(_DWORD **)a1 = result;
  return result;
}

NSObject *FigCDSSessionSetLayoutContext_Viewport(NSObject *result, double a2, double a3, double a4, double a5)
{
  NSObject *v5;
  _QWORD context[5];
  __int128 v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;

  v10 = 0;
  if (result)
  {
    v5 = result;
    result = result[21].isa;
    if (result)
    {
      context[1] = 0;
      v8 = 0u;
      context[0] = v5;
      *(double *)&context[2] = a2;
      *(double *)&context[3] = a3;
      *(double *)&context[4] = a4;
      v7 = *(unint64_t *)&a5;
      v9 = &v10;
      dispatch_sync_f(result, context, (dispatch_function_t)SetViewportDo_0);
      return v10;
    }
  }
  return result;
}

uint64_t SetViewportDo_0(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t result;
  __int128 v5;
  _DWORD *v6;

  v2 = *(_QWORD *)a1;
  v3 = (_OWORD *)(a1 + 16);
  if (CGRectEqualToRect(*(CGRect *)(*(_QWORD *)a1 + 592), *(CGRect *)(a1 + 16)))
  {
    result = 0;
  }
  else
  {
    v5 = v3[1];
    *(_OWORD *)(v2 + 592) = *v3;
    *(_OWORD *)(v2 + 608) = v5;
    result = UpdateLayoutContext_0(v2);
  }
  v6 = *(_DWORD **)(a1 + 72);
  if (v6)
    *v6 = result;
  return result;
}

NSObject *FigCDSSessionSetLayoutContext_VideoSize(NSObject *result, double a2, double a3)
{
  NSObject *v3;
  NSObject *context;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  double v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;

  v11 = 0;
  if (result)
  {
    v3 = result;
    result = result[21].isa;
    if (result)
    {
      v7 = 0;
      v5 = 0u;
      v6 = 0u;
      context = v3;
      v8 = a2;
      v9 = *(unint64_t *)&a3;
      v10 = &v11;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetVideoSizeDo_0);
      return v11;
    }
  }
  return result;
}

uint64_t SetVideoSizeDo_0(uint64_t a1)
{
  _OWORD *v2;
  double v3;
  uint64_t v4;
  uint64_t result;
  _DWORD *v7;

  v2 = (_OWORD *)(a1 + 48);
  v3 = *(double *)(a1 + 48);
  v4 = *(_QWORD *)a1;
  if (*(double *)(v4 + 624) == v3 && *(double *)(v4 + 632) == *(double *)(a1 + 56))
  {
    result = 0;
  }
  else
  {
    *(_OWORD *)(v4 + 624) = *v2;
    result = UpdateLayoutContext_0(v4);
  }
  v7 = *(_DWORD **)(a1 + 72);
  if (v7)
    *v7 = result;
  return result;
}

NSObject *FigCDSSessionSetLayoutContext_Gravity(NSObject *result, char a2)
{
  NSObject *v2;
  NSObject *context;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;

  v9 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v6 = 0u;
      v7 = 0u;
      v4 = 0u;
      v5 = 0u;
      context = v2;
      BYTE8(v7) = a2;
      v8 = &v9;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetGravityDo_0);
      return v9;
    }
  }
  return result;
}

uint64_t SetGravityDo_0(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (*(unsigned __int8 *)(result + 272) != v3)
  {
    *(_BYTE *)(result + 272) = v3;
    return UpdateLayoutContext_0(result);
  }
  return result;
}

NSObject *FigCDSSessionSetLayoutContext_Overscan(NSObject *result, char a2)
{
  NSObject *v2;
  NSObject *context;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;

  v9 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v6 = 0u;
      v7 = 0u;
      v4 = 0u;
      v5 = 0u;
      context = v2;
      BYTE9(v7) = a2;
      v8 = &v9;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetOverscanDo_0);
      return v9;
    }
  }
  return result;
}

uint64_t SetOverscanDo_0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  _DWORD *v5;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 65);
  if (*(unsigned __int8 *)(*(_QWORD *)a1 + 273) == v3)
  {
    result = 0;
  }
  else
  {
    *(_BYTE *)(v2 + 273) = v3;
    if (v3)
      *(double *)(v2 + 280) = FigCDSCALayerOutputGetOverscan();
    result = UpdateLayoutContext_0(v2);
  }
  v5 = *(_DWORD **)(a1 + 72);
  if (v5)
    *v5 = result;
  return result;
}

uint64_t FigCDSSessionGetLayoutContext_Overscan(uint64_t a1, _BYTE *a2)
{
  NSObject *v3;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a1)
  {
    v3 = *(NSObject **)(a1 + 168);
    if (v3)
    {
      v11 = 0;
      v10 = 0u;
      v9 = 0u;
      v8 = 0u;
      v7 = 0u;
      v6 = a1;
      dispatch_sync_f(v3, &v6, (dispatch_function_t)GetOverscanDo_0);
      *a2 = BYTE9(v10);
    }
  }
  return 0;
}

_BYTE *GetOverscanDo_0(_BYTE *result)
{
  result[65] = *(_BYTE *)(*(_QWORD *)result + 273);
  return result;
}

uint64_t FigCDSSessionUpdateLegibleOutputContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t updated;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 168))
    return 0;
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    return 0;
  updated = FigCaptionRendererCGOutputUpdateCGContext(v2, a2);
  if ((_DWORD)updated)
    FigSignalErrorAt();
  return updated;
}

uint64_t FigCDSSessionUpdateCGContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t updated;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 168))
    return 0;
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    return 0;
  updated = FigCaptionRendererCGOutputUpdateCGContext(v2, a2);
  if ((_DWORD)updated)
    FigSignalErrorAt();
  return updated;
}

NSObject *FigCDSSessionUpdateOutput(NSObject *result)
{
  NSObject *v1;
  _QWORD context[2];
  unsigned int v3;

  v3 = 0;
  if (result)
  {
    v1 = result;
    result = result[21].isa;
    if (result)
    {
      context[0] = &v3;
      context[1] = v1;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionUpdateOutputDo);
      return v3;
    }
  }
  return result;
}

uint64_t cdsSessionUpdateOutputDo(uint64_t result)
{
  _DWORD **v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, double, double, double, double);

  v1 = (_DWORD **)result;
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 64);
  if (!v2)
    goto LABEL_7;
  v3 = *(uint64_t (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 32);
  if (v3)
  {
    result = v3(v2, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
    LODWORD(v2) = result;
    if (!(_DWORD)result)
      goto LABEL_7;
  }
  else
  {
    LODWORD(v2) = -12782;
  }
  result = FigSignalErrorAt();
LABEL_7:
  if (*v1)
    **v1 = v2;
  return result;
}

NSObject *FigCDSSessionClear(NSObject *result, double a2, double a3, double a4, double a5)
{
  NSObject *v5;
  _QWORD context[6];
  unsigned int v7;

  v7 = 0;
  if (result)
  {
    v5 = result;
    result = result[21].isa;
    if (result)
    {
      context[0] = v5;
      *(double *)&context[1] = a2;
      *(double *)&context[2] = a3;
      *(double *)&context[3] = a4;
      *(double *)&context[4] = a5;
      context[5] = &v7;
      dispatch_sync_f(result, context, (dispatch_function_t)clearDo_0);
      return v7;
    }
  }
  return result;
}

uint64_t *clearDo_0(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  const void *Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(const void *);
  uint64_t v15;
  uint64_t (*v16)(uint64_t, double, double, double, double);
  int v17;
  int *v18;

  v1 = result;
  v2 = *result;
  if (!*result)
    goto LABEL_21;
  v3 = *((double *)result + 1);
  v4 = *((double *)result + 2);
  v5 = *((double *)result + 3);
  v6 = *((double *)result + 4);
  purgeOutOfRangeCaptionCache_0(*result, MEMORY[0x1E0CA2E18]);
  v7 = *(_QWORD *)(v2 + 248);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    goto LABEL_15;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    goto LABEL_15;
  v10 = *(uint64_t (**)(uint64_t))(v9 + 56);
  if (!v10)
  {
LABEL_16:
    v17 = -12782;
    goto LABEL_17;
  }
  LODWORD(result) = v10(v7);
  if ((_DWORD)result)
  {
LABEL_22:
    v17 = (int)result;
    goto LABEL_17;
  }
  result = *(uint64_t **)(v2 + 560);
  if (!result)
    goto LABEL_11;
  Value = CFDictionaryGetValue((CFDictionaryRef)result, *(const void **)(v2 + 248));
  FigCDSOutputNodeProtocolGetProtocolID();
  v12 = CMBaseObjectGetProtocolVTable();
  if (!v12 || (v13 = *(_QWORD *)(v12 + 16)) == 0)
  {
LABEL_15:
    v17 = -12788;
LABEL_17:
    result = (uint64_t *)FigSignalErrorAt();
    goto LABEL_18;
  }
  v14 = *(uint64_t (**)(const void *))(v13 + 56);
  if (!v14)
    goto LABEL_16;
  result = (uint64_t *)v14(Value);
  if ((_DWORD)result)
    goto LABEL_22;
LABEL_11:
  v15 = *(_QWORD *)(v2 + 64);
  if (v15)
  {
    v16 = *(uint64_t (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 64);
    if (v16)
    {
      result = (uint64_t *)v16(v15, v3, v4, v5, v6);
      v17 = (int)result;
      if (!(_DWORD)result)
        goto LABEL_18;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_21:
  v17 = 0;
LABEL_18:
  v18 = (int *)v1[5];
  if (v18)
    *v18 = v17;
  return result;
}

uint64_t FigCDSSessionSynchronizeDefaults(dispatch_queue_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1)
  {
    if (!a1[21])
      return 0;
    v2 = malloc_type_calloc(1uLL, 0x128uLL, 0x1060040DD6ACCDAuLL);
    if (v2)
    {
      v3 = v2;
      *v2 = CFRetain(a1);
      *((_WORD *)v3 + 140) = 256;
      *((_BYTE *)v3 + 282) = 0;
      v3[36] = 0;
      dispatch_async_f(a1[21], v3, (dispatch_function_t)updateMASettingsDoAsync_0);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

void updateMASettingsDoAsync_0(CFTypeRef *a1)
{
  _QWORD *v2;
  int v3;
  const void *v4;
  CFTypeRef v5;
  int64x2_t *v6;
  CFTypeRef v7;
  const __CFDictionary *v8;
  CGColorRef v9;
  CGColorRef v10;
  const void *v11;
  CGColorRef v12;
  CGColorRef v13;
  const void *v14;
  CGColorRef v15;
  CGColorRef v16;
  const void *v17;
  const __CFDictionary *v18;
  const void *v19;
  CFTypeID TypeID;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t ProtocolVTable;
  uint64_t v27;
  void (*v28)(uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *value;

  v2 = *a1;
  v3 = *((_DWORD *)*a1 + 67);
  if (!*((_BYTE *)a1 + 280))
  {
    if (v3 != 2)
      goto LABEL_63;
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    cdsCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)(v2 + 96));
    v2 = *a1;
    *((_BYTE *)*a1 + 1040) = 1;
LABEL_5:
    if (*((_BYTE *)a1 + 282))
    {
      v4 = (const void *)v2[95];
      v5 = a1[36];
      v2[95] = v5;
      if (v5)
        CFRetain(v5);
      if (v4)
        CFRelease(v4);
    }
    v6 = (int64x2_t *)*a1;
    if (*((_BYTE *)a1 + 281) && v6[65].i8[0])
    {
      cdsCopyMediaAccessibilityParams((uint64_t)v6[48].i64, (uint64_t)v6[18].i64);
      v6 = (int64x2_t *)*a1;
      *((_BYTE *)*a1 + 1041) = 1;
    }
    goto LABEL_15;
  }
  cdsCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)(v2 + 36));
  v6 = (int64x2_t *)*a1;
  if (!*((_DWORD *)*a1 + 67))
  {
    cdsCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)v6[48].i64);
    v6 = (int64x2_t *)*a1;
    *((_BYTE *)*a1 + 1040) = 1;
  }
LABEL_15:
  applyContextDefaultsToMASettings_0(v6);
  v7 = *a1;
  v35 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v34 = 0x3FF0000000000000;
  if (*((_DWORD *)v7 + 67) == 2)
  {
    v8 = (const __CFDictionary *)*((_QWORD *)v7 + 95);
    if (v8)
    {
      v9 = overridesCreateCGColorFromCFArray(v8, (void *)*MEMORY[0x1E0CA2A20], &v36);
      v10 = v9;
      if (v9)
      {
        v11 = (const void *)*((_QWORD *)v7 + 53);
        *((_QWORD *)v7 + 53) = v9;
        CFRetain(v9);
        if (v11)
          CFRelease(v11);
        *((_QWORD *)v7 + 36) = 0;
        *((_QWORD *)v7 + 56) = v36;
        *((_QWORD *)v7 + 39) = 0;
      }
      v12 = overridesCreateCGColorFromCFArray(*((const __CFDictionary **)v7 + 95), (void *)*MEMORY[0x1E0CA29B8], &v35);
      v13 = v12;
      if (v12)
      {
        v14 = (const void *)*((_QWORD *)v7 + 54);
        *((_QWORD *)v7 + 54) = v12;
        CFRetain(v12);
        if (v14)
          CFRelease(v14);
        *((_QWORD *)v7 + 37) = 0;
        *((_QWORD *)v7 + 57) = v35;
        *((_QWORD *)v7 + 40) = 0;
      }
      v15 = overridesCreateCGColorFromCFArray(*((const __CFDictionary **)v7 + 95), (void *)*MEMORY[0x1E0CA2968], &v34);
      v16 = v15;
      if (v15)
      {
        v17 = (const void *)*((_QWORD *)v7 + 55);
        *((_QWORD *)v7 + 55) = v15;
        CFRetain(v15);
        if (v17)
          CFRelease(v17);
        *((_QWORD *)v7 + 38) = 0;
        *((_QWORD *)v7 + 58) = v34;
        *((_QWORD *)v7 + 41) = 0;
      }
      v18 = (const __CFDictionary *)*((_QWORD *)v7 + 95);
      if (!v18)
        goto LABEL_43;
      v19 = (const void *)*MEMORY[0x1E0CA29C0];
      if (!*MEMORY[0x1E0CA29C0])
        goto LABEL_43;
      value = 0;
      if (!CFDictionaryGetValueIfPresent(v18, v19, (const void **)&value))
        goto LABEL_43;
      TypeID = CFStringGetTypeID();
      if (TypeID != CFGetTypeID(value))
        goto LABEL_43;
      v21 = 1;
      if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B70], 1uLL))
      {
        if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B78], 1uLL))
        {
          if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B60], 1uLL))
          {
            if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B80], 1uLL))
            {
              if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B68], 1uLL))
              {
LABEL_43:
                if (v16)
                  CFRelease(v16);
                if (v13)
                  CFRelease(v13);
                if (v10)
                  CFRelease(v10);
                goto LABEL_49;
              }
              v21 = 5;
            }
            else
            {
              v21 = 4;
            }
          }
          else
          {
            v21 = 3;
          }
        }
        else
        {
          v21 = 2;
        }
      }
      *((_QWORD *)v7 + 69) = v21;
      *((_QWORD *)v7 + 52) = 0;
      goto LABEL_43;
    }
  }
LABEL_49:
  v22 = *a1;
  if (*((_BYTE *)*a1 + 1045))
  {
    v23 = v22[23];
    if (v23)
    {
      v24 = FigCDSTimerIsOn(v23);
      v22 = *a1;
      if (v24)
      {
        FigCDSTimerStop(v22[23]);
        v22 = *a1;
      }
    }
    v25 = v22[31];
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v27 = *(_QWORD *)(ProtocolVTable + 16);
      if (v27)
      {
        v28 = *(void (**)(uint64_t))(v27 + 256);
        if (v28)
          v28(v25);
      }
    }
    v29 = *a1;
    v29[72] = 0;
    v30 = v29[31];
    FigCDSNodeProtocolGetProtocolID();
    v31 = CMBaseObjectGetProtocolVTable();
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 16);
      if (v32)
      {
        v33 = *(void (**)(uint64_t, _QWORD *))(v32 + 288);
        if (v33)
          v33(v30, v29 + 36);
      }
    }
    updateDisplayPort_0(*a1, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
    v22 = *a1;
  }
  *((_BYTE *)v22 + 1045) = 1;
LABEL_63:
  cdsReleaseAndClearMediaAccessibilityParams((uint64_t)(a1 + 1));
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t FigCDSSessionSetDefaultTextStyle(dispatch_queue_t *a1, CFTypeRef cf)
{
  CFTypeID v4;
  _QWORD *v5;
  _QWORD *v6;

  if (a1)
  {
    if (!cf || (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
    {
      if (!a1[21])
        return 0;
      v5 = malloc_type_calloc(1uLL, 0x128uLL, 0x1060040DD6ACCDAuLL);
      if (v5)
      {
        v6 = v5;
        *v5 = CFRetain(a1);
        *((_WORD *)v6 + 140) = 0;
        *((_BYTE *)v6 + 282) = 1;
        v6[36] = cf;
        dispatch_async_f(a1[21], v6, (dispatch_function_t)updateMASettingsDoAsync_0);
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCDSSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  const __CFAllocator *v8;
  uint64_t Instance;
  CFMutableDictionaryRef Mutable;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  double FigBaseObject;
  double v16;
  double v17;
  uint64_t ProtocolVTable;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, double, double);
  dispatch_queue_t v21;
  dispatch_queue_t v22;
  CFTypeRef v23;
  CFTypeRef v24;
  uint64_t v25;
  _OWORD *v27;
  __int128 v28;
  CFTypeRef cf;
  char __str[8];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCDSSessionLocalGetTypeID_sRegisterFigCDSSessionOnce, RegisterFigCDSSessionClass);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 24) = a1;
  *(_QWORD *)(Instance + 32) = a2;
  *(_QWORD *)(Instance + 16) = a3;
  *(_DWORD *)(Instance + 268) = 0;
  *(_QWORD *)(Instance + 56) = 0;
  *(_QWORD *)(Instance + 64) = 0;
  *(_QWORD *)(Instance + 48) = 0;
  *(_DWORD *)(Instance + 1042) = 0;
  *(_BYTE *)(Instance + 688) = 1;
  *(_BYTE *)(Instance + 704) = 0;
  *(_QWORD *)(Instance + 696) = 0xBFF0000000000000;
  *(_QWORD *)(Instance + 760) = 0;
  *(_WORD *)(Instance + 1040) = 0;
  cdsReleaseAndClearMediaAccessibilityParams(Instance + 768);
  Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(Instance + 560) = Mutable;
  if (!Mutable)
  {
    v25 = FigSignalErrorAt();
    goto LABEL_16;
  }
  *(_QWORD *)(Instance + 584) = 0x100000001;
  *(_QWORD *)(Instance + 576) = 0;
  v11 = *MEMORY[0x1E0C9D648];
  v12 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(Instance + 592) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)(Instance + 608) = v12;
  *(_OWORD *)(Instance + 624) = *MEMORY[0x1E0C9D820];
  *(_QWORD *)(Instance + 640) = 0x3FF0000000000000;
  *(_OWORD *)(Instance + 128) = v11;
  *(_OWORD *)(Instance + 144) = v12;
  *(_WORD *)(Instance + 272) = 0;
  *(_QWORD *)(Instance + 280) = 0x3FF0000000000000;
  *(_OWORD *)(Instance + 104) = xmmword_1932FBD30;
  *(_QWORD *)(Instance + 120) = 0xFFFFFFFFLL;
  v13 = FigCDSParentIntervalCreate((_QWORD *)(Instance + 240));
  if ((_DWORD)v13)
    goto LABEL_28;
  v14 = *(_QWORD *)(Instance + 240);
  FigBaseObject = FigBytePumpGetFigBaseObject(v13);
  v17 = v16;
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (v19 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
  {
    v20 = *(uint64_t (**)(uint64_t, double, double))(v19 + 16);
    if (v20)
    {
      v13 = v20(v14, FigBaseObject, v17);
      if (!(_DWORD)v13)
      {
        *(_OWORD *)(Instance + 88) = xmmword_1932FBD40;
        *(_BYTE *)(Instance + 40) = 0;
        snprintf(__str, 0x100uLL, "com.apple.coremedia.figcdssession.messagequeue<%p>", (const void *)Instance);
        v21 = dispatch_queue_create(__str, 0);
        *(_QWORD *)(Instance + 168) = v21;
        if (!v21
          || (snprintf(__str, 0x100uLL, "com.apple.coremedia.figcdssession.workqueue<%p>", (const void *)Instance),
              v22 = dispatch_queue_create(__str, 0),
              (*(_QWORD *)(Instance + 176) = v22) == 0))
        {
          v25 = 0;
          goto LABEL_16;
        }
        v13 = FigCDSTimerCreate(33, (uint64_t)onAnimationTimerTimeout_0, Instance, (uint64_t *)(Instance + 184));
        if (!(_DWORD)v13)
        {
          cf = 0;
          v13 = FigCDSFreeLayoutRegionCreate((uint64_t)onDisplayUpdateEvent_0, Instance, &cf);
          if (!(_DWORD)v13)
          {
            if (cf)
            {
              v23 = CFRetain(cf);
              v24 = cf;
              *(_QWORD *)(Instance + 248) = v23;
              if (v24)
                CFRelease(v24);
            }
            else
            {
              *(_QWORD *)(Instance + 248) = 0;
            }
            if (!*(_QWORD *)(Instance + 560))
            {
LABEL_25:
              v13 = FigCDSMACacheCreate((uint64_t)onMAChanged_0, Instance, (_QWORD *)(Instance + 232));
              if (!(_DWORD)v13)
              {
                v25 = FigCDSMACacheLoad(*(_QWORD **)(Instance + 232), 1);
                if (!(_DWORD)v25)
                {
                  v27 = (_OWORD *)MEMORY[0x1E0C9D628];
                  *(_DWORD *)(Instance + 192) = 0;
                  v28 = v27[1];
                  *(_OWORD *)(Instance + 200) = *v27;
                  *(_OWORD *)(Instance + 216) = v28;
                  *a4 = Instance;
                  return v25;
                }
                goto LABEL_15;
              }
              goto LABEL_28;
            }
            *(_QWORD *)__str = 0;
            v13 = FigCDSCALayerOutputNodeCreate(__str);
            if (!(_DWORD)v13)
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 560), *(const void **)(Instance + 248), *(const void **)__str);
              if (*(_QWORD *)__str)
                CFRelease(*(CFTypeRef *)__str);
              goto LABEL_25;
            }
          }
        }
      }
LABEL_28:
      v25 = v13;
      goto LABEL_15;
    }
    v25 = 4294954514;
  }
  else
  {
    v25 = 4294954508;
  }
LABEL_15:
  FigSignalErrorAt();
LABEL_16:
  CFRelease((CFTypeRef)Instance);
  return v25;
}

uint64_t FigCDSIntervalSetRange(uint64_t a1, double a2, double a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, double, double);

  FigCDSIntervalProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7)
    {
      v8 = *(uint64_t (**)(uint64_t, double, double))(v7 + 16);
      if (v8)
        return v8(a1, a2, a3);
    }
  }
  return result;
}

void onAnimationTimerTimeout_0(uint64_t a1)
{
  int v2;
  double Rate;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  CMTime v7;
  CMTime lhs;
  CMTime rhs;
  CMTime v10;
  CMTime v11;

  v2 = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a1 + 192) = v2 - 33;
  Rate = FigCDSTriggerGetRate(*(_QWORD *)(a1 + 48));
  if (v2 > 33)
  {
    if (Rate == 0.0)
    {
      memset(&v11, 0, sizeof(v11));
      FigCDSTriggerGetCurrentTime(*(_QWORD *)(a1 + 48), &v11);
      memset(&v10, 0, sizeof(v10));
      CMTimeMake(&v7, 33, 1000);
      lhs = v11;
      CMTimeAdd(&v10, &lhs, &v7);
      v6 = *(_QWORD *)(a1 + 48);
      lhs = v10;
      FigCDSTriggerSetCurrentTime(v6, &lhs);
    }
    updateDisplayPort_0((_QWORD *)a1, *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224));
  }
  else
  {
    if (Rate == 0.0)
    {
      memset(&v11, 0, sizeof(v11));
      FigCDSTriggerGetCurrentTime(*(_QWORD *)(a1 + 48), &v11);
      memset(&v10, 0, sizeof(v10));
      CMTimeMake(&rhs, *(int *)(a1 + 192) + 33, 1000);
      lhs = v11;
      CMTimeAdd(&v10, &lhs, &rhs);
      v4 = *(_QWORD *)(a1 + 48);
      lhs = v10;
      FigCDSTriggerSetCurrentTime(v4, &lhs);
      updateDisplayPort_0((_QWORD *)a1, *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224));
    }
    if (FigCDSTimerStop(*(_QWORD *)(a1 + 184)))
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_DWORD *)(a1 + 192) = 0;
      v5 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(a1 + 200) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(a1 + 216) = v5;
    }
  }
}

uint64_t onDisplayUpdateEvent_0(uint64_t a1, uint64_t a2)
{
  double Rate;
  int v5;
  int v6;
  uint64_t result;

  Rate = FigCDSTriggerGetRate(*(_QWORD *)(a2 + 48));
  v5 = *(_DWORD *)(a1 + 4) + *(_DWORD *)a1;
  v6 = v5 + 33;
  if (v5 < 165)
    v6 = 198;
  if (Rate != 0.0)
    v5 = v6;
  *(_DWORD *)(a2 + 192) = v5;
  *(CGRect *)(a2 + 200) = CGRectUnion(*(CGRect *)(a2 + 200), *(CGRect *)(a1 + 8));
  result = FigCDSTimerIsOn(*(_QWORD *)(a2 + 184));
  if (!(_DWORD)result)
  {
    result = FigCDSTimerStart(*(_QWORD *)(a2 + 184));
    if ((_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

void onMAChanged_0(dispatch_queue_t *a1, uint64_t a2)
{
  _WORD *v4;
  _WORD *v5;

  if (a1[21])
  {
    v4 = malloc_type_calloc(1uLL, 0x128uLL, 0x1060040DD6ACCDAuLL);
    if (v4)
    {
      v5 = v4;
      cdsCopyMediaAccessibilityParams(a2, (uint64_t)(v4 + 4));
      *(_QWORD *)v5 = CFRetain(a1);
      v5[140] = 1;
      *((_BYTE *)v5 + 282) = 0;
      *((_QWORD *)v5 + 36) = 0;
      dispatch_async_f(a1[21], v5, (dispatch_function_t)updateMASettingsDoAsync_0);
    }
  }
}

uint64_t RegisterFigCDSSessionClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCDSSessionID = result;
  return result;
}

void FigCDSSessionInit(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x408uLL);
}

void FigCDSSession_Finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const __CFDictionary *v7;
  const void *Value;
  uint64_t ProtocolVTable;
  uint64_t v10;
  void (*v11)(const void *, _QWORD);
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;

  v2 = *(const void **)(a1 + 184);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 176);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v4 = *(NSObject **)(a1 + 168);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 168) = 0;
  }
  if (*(_QWORD *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v5 = *(const void **)(a1 + 80);
    if (v5)
      CFRelease(v5);
  }
  if (*(_QWORD *)(a1 + 72))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v6 = *(const void **)(a1 + 72);
    if (v6)
      CFRelease(v6);
  }
  v7 = *(const __CFDictionary **)(a1 + 560);
  if (v7)
  {
    Value = CFDictionaryGetValue(v7, *(const void **)(a1 + 248));
    FigCDSOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v10 = *(_QWORD *)(ProtocolVTable + 16);
      if (v10)
      {
        v11 = *(void (**)(const void *, _QWORD))(v10 + 16);
        if (v11)
          v11(Value, 0);
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 560), *(const void **)(a1 + 248));
    v12 = *(const void **)(a1 + 560);
    if (v12)
      CFRelease(v12);
  }
  CFRelease(*(CFTypeRef *)(a1 + 248));
  CFRelease(*(CFTypeRef *)(a1 + 240));
  v13 = *(const void **)(a1 + 56);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 64);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(a1 + 48);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 232);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(a1 + 160);
  if (v17)
    CFRelease(v17);
  cdsReleaseAndClearMediaAccessibilityParams(a1 + 288);
  cdsReleaseAndClearMediaAccessibilityParams(a1 + 768);
  v18 = *(const void **)(a1 + 760);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(a1 + 664);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(a1 + 648);
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(a1 + 720);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(a1 + 712);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(a1 + 728);
  if (v23)
    CFRelease(v23);
}

__CFString *FigCDSSessionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSSession %p>"), a1);
  return Mutable;
}

void timebaseChangedCallback_0(uint64_t a1, dispatch_queue_t *a2, uint64_t a3, const void *a4)
{
  _QWORD *v6;
  CFTypeRef v7;

  if (a2 && a2[21])
  {
    v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *v6 = CFRetain(a2);
    if (a4)
      v7 = CFRetain(a4);
    else
      v7 = 0;
    v6[1] = v7;
    dispatch_async_f(a2[21], v6, (dispatch_function_t)timebaseChangedCallbackDo_0);
  }
}

void playbackItemChangedCallback_0(uint64_t a1, dispatch_queue_t *a2, uint64_t a3, const void *a4)
{
  _QWORD *v6;
  CFTypeRef v7;

  if (a2 && a2[21])
  {
    v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *v6 = CFRetain(a2);
    if (a4)
      v7 = CFRetain(a4);
    else
      v7 = 0;
    v6[1] = v7;
    dispatch_async_f(a2[21], v6, (dispatch_function_t)playbackItemChangedCallbackDo_0);
  }
}

uint64_t FigCDSOutputNodeSetParentNode(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD);

  FigCDSOutputNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v3 = *(_QWORD *)(result + 16);
    if (v3)
    {
      v4 = *(uint64_t (**)(uint64_t, _QWORD))(v3 + 16);
      if (v4)
        return v4(a1, 0);
    }
  }
  return result;
}

void timebaseChangedCallbackDo_0(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  uint64_t FigBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, const void **);
  uint64_t v6;
  const void *v7;

  v2 = (_QWORD *)*a1;
  v3 = (const void *)a1[1];
  if (v3)
  {
    v7 = 0;
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v3);
    v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v5 && !v5(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], &v7) && v7)
    {
      v6 = v2[6];
      if (v6)
        FigCDSTriggerSetTimebase(v6, v7);
      else
        FigSignalErrorAt();
    }
    CFRelease(v3);
  }
  if (v2)
    CFRelease(v2);
  free(a1);
}

void playbackItemChangedCallbackDo_0(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  unsigned int (*v4)(const void *, _QWORD, CFTypeRef *);
  CFTypeRef v5;
  CFTypeRef v6;
  const void *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef cf;

  cf = 0;
  v2 = *a1;
  v3 = (const void *)a1[1];
  if (!v3)
    goto LABEL_20;
  v4 = *(unsigned int (**)(const void *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 32);
  if (!v4 || v4(v3, 0, &cf))
    goto LABEL_16;
  v5 = cf;
  v6 = *(CFTypeRef *)(v2 + 80);
  if (v6 != cf)
  {
    if (v6)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v7 = *(const void **)(v2 + 80);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v2 + 80) = v5;
    if (v5)
      CFRetain(v5);
    if (v7)
      CFRelease(v7);
    if (*(_QWORD *)(v2 + 80))
    {
      v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      *v8 = CFRetain((CFTypeRef)v2);
      v9 = *(CFTypeRef *)(v2 + 80);
      if (v9)
        v9 = CFRetain(v9);
      v8[1] = v9;
      dispatch_async_f(*(dispatch_queue_t *)(v2 + 168), v8, (dispatch_function_t)timebaseChangedCallbackDo_0);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
LABEL_16:
    v5 = cf;
  }
  if (v5)
    CFRelease(v5);
  CFRelease(v3);
LABEL_20:
  if (v2)
    CFRelease((CFTypeRef)v2);
  free(a1);
}

void onTriggerEvent_0(const void *a1, __int128 *a2, dispatch_queue_t *a3)
{
  _QWORD *v6;
  CFTypeRef v7;
  __int128 v8;

  if (a3 && a3[21])
  {
    v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040E349F4B1uLL);
    *v6 = CFRetain(a3);
    if (a1)
      v7 = CFRetain(a1);
    else
      v7 = 0;
    v6[1] = v7;
    v8 = *a2;
    v6[4] = *((_QWORD *)a2 + 2);
    *((_OWORD *)v6 + 1) = v8;
    dispatch_async_f(a3[21], v6, (dispatch_function_t)onTriggerEventDo_0);
  }
}

void onTriggerTimeUpdate_0(CMTime *a1, uint64_t a2)
{
  Float64 Seconds;
  int v4;
  CFStringRef v5;
  CMTime time;

  if (*(_QWORD *)(a2 + 32))
  {
    time = *a1;
    Seconds = CMTimeGetSeconds(&time);
    v4 = (int)Seconds % 3600;
    v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d:%02d:%02d"), ((int)Seconds / 3600), (int)(((__int16)((34953 * (__int16)v4) >> 16) >> 5)+ (((v4 + ((-30583 * (__int16)v4) >> 16)) & 0x8000) >> 15)), (__int16)(v4- 60* (((__int16)((34953 * (__int16)v4) >> 16) >> 5)+ (((v4 + ((-30583 * (__int16)v4) >> 16)) & 0x8000) >> 15))));
    (*(void (**)(CFStringRef, _QWORD))(a2 + 32))(v5, *(_QWORD *)(a2 + 16));
    if (v5)
      CFRelease(v5);
  }
}

void onTriggerEventDo_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, double *);
  uint64_t v7;
  double FigBaseObject;
  double v9;
  const void *value;
  const __CFArray *v11;
  CFIndex v12;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, CMTime *);
  const void *v17;
  CMTime v18;
  CFArrayRef theArray;
  CMTime time2;
  CMTime time1;
  double v22;
  double v23;

  v2 = *(_QWORD **)a1;
  *(_OWORD *)&v18.value = *(_OWORD *)(a1 + 16);
  v18.epoch = *(_QWORD *)(a1 + 32);
  *(_OWORD *)&time1.value = *(_OWORD *)&v18.value;
  time1.epoch = *(_QWORD *)(a1 + 32);
  purgeOutOfRangeCaptionCache_0((uint64_t)v2, &time1);
  v22 = 0.0;
  v23 = 0.0;
  v3 = v2[30];
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (v5 = *(_QWORD *)(ProtocolVTable + 16)) == 0
    || (v6 = *(unsigned int (**)(uint64_t, double *))(v5 + 8)) == 0
    || v6(v3, &v22))
  {
    FigSignalErrorAt();
    goto LABEL_13;
  }
  time1 = v18;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!CMTimeCompare(&time1, &time2))
  {
    time1.value = 0;
    copyCaptionsByRange_0(v2[30], 0, (CFTypeRef *)&time1, 0, v22, v23, v22, v23);
    purgeCaptionBitmapCaches_0((uint64_t)v2, (CFArrayRef)time1.value);
    value = (const void *)time1.value;
    if (!time1.value)
      goto LABEL_13;
    goto LABEL_31;
  }
  time1 = v18;
  CMTimeGetSeconds(&time1);
  FigBaseObject = FigBytePumpGetFigBaseObject(v7);
  time1.value = 0;
  theArray = 0;
  time2.value = 0;
  copyCaptionsByRange_0(v2[30], (CFArrayRef *)&time2, (CFTypeRef *)&time1, &theArray, v22, v23, FigBaseObject, v9);
  purgeCaptionBitmapCaches_0((uint64_t)v2, (CFArrayRef)time2.value);
  purgeCaptionBitmapCaches_0((uint64_t)v2, theArray);
  if (time2.value)
    CFRelease((CFTypeRef)time2.value);
  if (time1.value)
    CFRelease((CFTypeRef)time1.value);
  value = theArray;
  if (theArray)
LABEL_31:
    CFRelease(value);
LABEL_13:
  time1 = v18;
  v11 = (const __CFArray *)copyCurrentActiveCaptions_0((uint64_t)v2, &time1);
  if (CFArrayGetCount(v11) >= 1)
  {
    v12 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
      asyncPreflightRender((uint64_t)v2, ValueAtIndex);
      time1.value = 0;
      FigCDSCaptionProtocolGetProtocolID();
      v14 = CMBaseObjectGetProtocolVTable();
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 16);
      if (!v15)
        break;
      v16 = *(unsigned int (**)(const void *, CMTime *))(v15 + 32);
      if (!v16 || v16(ValueAtIndex, &time1))
        break;
      if (CFArrayGetCount(v11) <= ++v12)
        goto LABEL_22;
    }
    FigSignalErrorAt();
  }
LABEL_22:
  if (v11)
    CFRelease(v11);
  updateDisplayPort_0(v2, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v17 = *(const void **)(a1 + 8);
  if (v17)
    CFRelease(v17);
  free((void *)a1);
}

void purgeOutOfRangeCaptionCache_0(uint64_t a1, CMTime *a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, double *);
  uint64_t v8;
  double FigBaseObject;
  double v10;
  const void *value;
  CFArrayRef theArray;
  CMTime time2;
  CMTime time1;
  double v15;
  double v16;

  v15 = 0.0;
  v16 = 0.0;
  v4 = *(_QWORD *)(a1 + 240);
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (v6 = *(_QWORD *)(ProtocolVTable + 16)) == 0
    || (v7 = *(unsigned int (**)(uint64_t, double *))(v6 + 8)) == 0
    || v7(v4, &v15))
  {
    FigSignalErrorAt();
    return;
  }
  time1 = *a2;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!CMTimeCompare(&time1, &time2))
  {
    time1.value = 0;
    copyCaptionsByRange_0(*(_QWORD *)(a1 + 240), 0, (CFTypeRef *)&time1, 0, v15, v16, v15, v16);
    purgeCaptionCachesFromCaptionsTimeline_0(a1, (CFArrayRef)time1.value);
    value = (const void *)time1.value;
    if (!time1.value)
      return;
LABEL_16:
    CFRelease(value);
    return;
  }
  time1 = *a2;
  CMTimeGetSeconds(&time1);
  FigBaseObject = FigBytePumpGetFigBaseObject(v8);
  time1.value = 0;
  theArray = 0;
  time2.value = 0;
  copyCaptionsByRange_0(*(_QWORD *)(a1 + 240), (CFArrayRef *)&time2, (CFTypeRef *)&time1, &theArray, v15, v16, FigBaseObject, v10);
  purgeCaptionCachesFromCaptionsTimeline_0(a1, (CFArrayRef)time2.value);
  purgeCaptionCachesFromCaptionsTimeline_0(a1, theArray);
  if (time2.value)
    CFRelease((CFTypeRef)time2.value);
  if (time1.value)
    CFRelease((CFTypeRef)time1.value);
  value = theArray;
  if (theArray)
    goto LABEL_16;
}

CFTypeRef copyCurrentActiveCaptions_0(uint64_t a1, CMTime *a2)
{
  double Seconds;
  uint64_t v4;
  uint64_t v5;
  double FigBaseObject;
  double v7;
  double v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  void (*v11)(uint64_t, CFTypeRef *, double, double);
  const __CFAllocator *v12;
  uint64_t MutableCopy;
  const __CFArray *v14;
  CFIndex v15;
  int v16;
  const void *ValueAtIndex;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(const void *, CMTime *);
  CFTypeRef cf;
  CMTime time;

  time = *a2;
  Seconds = CMTimeGetSeconds(&time);
  cf = 0;
  v4 = *(_QWORD *)(a1 + 240);
  FigBaseObject = FigBytePumpGetFigBaseObject(v5);
  v8 = v7;
  FigCDSParentIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v10 = *(_QWORD *)(ProtocolVTable + 16);
    if (v10)
    {
      v11 = *(void (**)(uint64_t, CFTypeRef *, double, double))(v10 + 32);
      if (v11)
        v11(v4, &cf, FigBaseObject, v8);
    }
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    v14 = (const __CFArray *)MutableCopy;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (CFArrayGetCount(v14) >= 1)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
        time.value = 0;
        *(_QWORD *)&time.timescale = 0;
        time.value = FigBytePumpGetFigBaseObject(ValueAtIndex);
        *(_QWORD *)&time.timescale = v18;
        FigCDSIntervalProtocolGetProtocolID();
        v19 = CMBaseObjectGetProtocolVTable();
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 16);
          if (v20)
          {
            v21 = *(void (**)(const void *, CMTime *))(v20 + 8);
            if (v21)
              v21(ValueAtIndex, &time);
          }
        }
        if (*(double *)&time.value + *(double *)&time.timescale == Seconds)
        {
          CFArrayRemoveValueAtIndex(v14, v15);
          --v16;
        }
        v15 = ++v16;
      }
      while (CFArrayGetCount(v14) > v16);
    }
    cf = CFArrayCreateCopy(v12, v14);
    CFRelease(v14);
  }
  return cf;
}

void asyncPreflightRender(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(const void *, double *);
  double Seconds;
  int v9;
  double v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  CMTime v14;
  double v15[2];
  CMTime v16;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    memset(&v16, 0, sizeof(v16));
    FigCDSTriggerGetCurrentTime(v3, &v16);
    v15[0] = 0.0;
    v15[1] = 0.0;
    FigCDSIntervalProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable
      && (v6 = *(_QWORD *)(ProtocolVTable + 16)) != 0
      && (v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
      && !v7(a2, v15))
    {
      v14 = v16;
      Seconds = CMTimeGetSeconds(&v14);
      v9 = *(_DWORD *)(a1 + 268);
      if (v9 == 2
        || v9 == 3
        && (v10 = v15[0] - Seconds, v11 = *(_QWORD *)(a1 + 104), v10 >= (double)v11)
        && v10 <= (double)(*(_QWORD *)(a1 + 112) + v11))
      {
        if (*(_QWORD *)(a1 + 168))
        {
          v12 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
          if (v12)
          {
            v13 = v12;
            *v12 = CFRetain((CFTypeRef)a1);
            v13[1] = CFRetain(a2);
            dispatch_async_f(*(dispatch_queue_t *)(a1 + 168), v13, (dispatch_function_t)renderCaptionDo_0);
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigCDSIntervalGetRange(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  FigCDSIntervalProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      if (v6)
        return v6(a1, a2);
    }
  }
  return result;
}

void copyCaptionsByRange_0(uint64_t a1, CFArrayRef *a2, CFTypeRef *a3, CFArrayRef *a4, double a5, double a6, double a7, double a8)
{
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, CFTypeRef *, double, double);
  double FigBaseObject;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, CFArrayRef *, double, double);
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, CFArrayRef *, double, double);
  const __CFAllocator *v29;
  const __CFArray *MutableCopy;
  const __CFArray *v31;
  CFArrayRef Copy;
  CFArrayRef theArray;
  CFTypeRef cf;

  theArray = 0;
  cf = 0;
  Copy = 0;
  FigCDSParentIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v15 = *(_QWORD *)(ProtocolVTable + 16);
    if (v15)
    {
      v16 = *(uint64_t (**)(uint64_t, CFTypeRef *, double, double))(v15 + 32);
      if (v16)
        ProtocolVTable = v16(a1, &cf, a7, a8);
    }
  }
  FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
  v19 = v18;
  FigCDSParentIntervalProtocolGetProtocolID();
  v20 = CMBaseObjectGetProtocolVTable();
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v22 = *(uint64_t (**)(uint64_t, CFArrayRef *, double, double))(v21 + 32);
      if (v22)
        v20 = v22(a1, &theArray, FigBaseObject, v19);
    }
  }
  v23 = FigBytePumpGetFigBaseObject(v20);
  v25 = v24;
  FigCDSParentIntervalProtocolGetProtocolID();
  v26 = CMBaseObjectGetProtocolVTable();
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = *(void (**)(uint64_t, CFArrayRef *, double, double))(v27 + 32);
      if (v28)
        v28(a1, &Copy, v23, v25);
    }
  }
  v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
  if (theArray)
    CFRelease(theArray);
  subtractCFArrayFromCFArray((CFIndex)MutableCopy, (CFArrayRef)cf);
  theArray = CFArrayCreateCopy(v29, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
  v31 = CFArrayCreateMutableCopy(v29, 0, Copy);
  if (Copy)
    CFRelease(Copy);
  subtractCFArrayFromCFArray((CFIndex)v31, (CFArrayRef)cf);
  Copy = CFArrayCreateCopy(v29, v31);
  if (v31)
    CFRelease(v31);
  if (a2)
  {
    *a2 = theArray;
  }
  else if (theArray)
  {
    CFRelease(theArray);
  }
  if (a3)
  {
    *a3 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  if (a4)
  {
    *a4 = Copy;
  }
  else if (Copy)
  {
    CFRelease(Copy);
  }
}

CFIndex purgeCaptionCachesFromCaptionsTimeline_0(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v4;
  CFIndex result;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(uint64_t, const void *);
  const __CFDictionary *v11;
  const void *Value;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *, _QWORD);

  v4 = *(_QWORD *)(a1 + 240);
  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    for (i = 0; i < result; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      FigCDSParentIntervalProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v9 = *(_QWORD *)(ProtocolVTable + 16);
        if (v9)
        {
          v10 = *(void (**)(uint64_t, const void *))(v9 + 16);
          if (v10)
            v10(v4, ValueAtIndex);
        }
      }
      v11 = *(const __CFDictionary **)(a1 + 560);
      if (v11)
      {
        Value = CFDictionaryGetValue(v11, ValueAtIndex);
        if (Value)
        {
          v13 = Value;
          FigCDSOutputNodeProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(void (**)(const void *, _QWORD))(v15 + 16);
              if (v16)
                v16(v13, 0);
            }
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 560), ValueAtIndex);
        }
      }
      result = CFArrayGetCount(theArray);
    }
  }
  return result;
}

uint64_t FigCDSParentIntervalRemoveChildInterval(uint64_t a1, uint64_t a2)
{
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  FigCDSParentIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(a1, a2);
  else
    return 4294954514;
}

CFIndex purgeCaptionBitmapCaches_0(uint64_t a1, CFArrayRef theArray)
{
  CFIndex result;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *, uint64_t *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(const void *, CGImageRef *);
  int BytesPerRow;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *);
  CGImageRef image;
  uint64_t v18;

  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    for (i = 0; i < result; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      v18 = 0;
      FigCDSCaptionProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v8 = *(_QWORD *)(ProtocolVTable + 16);
        if (v8)
        {
          v9 = *(void (**)(const void *, uint64_t *))(v8 + 32);
          if (v9)
            v9(ValueAtIndex, &v18);
        }
      }
      image = 0;
      FigCDSNodeProtocolGetProtocolID();
      v10 = CMBaseObjectGetProtocolVTable();
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          v12 = *(void (**)(const void *, CGImageRef *))(v11 + 160);
          if (v12)
            v12(ValueAtIndex, &image);
        }
      }
      if (image)
      {
        BytesPerRow = CGImageGetBytesPerRow(image);
        *(_DWORD *)(a1 + 124) += CGImageGetHeight(image) * BytesPerRow;
        FigCDSNodeProtocolGetProtocolID();
        v14 = CMBaseObjectGetProtocolVTable();
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 16);
          if (v15)
          {
            v16 = *(void (**)(const void *))(v15 + 144);
            if (v16)
              v16(ValueAtIndex);
          }
        }
      }
      result = CFArrayGetCount(theArray);
    }
  }
  return result;
}

void renderCaptionDo_0(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  void (*v6)(const void *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t);
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, CGImageRef *);
  int BytesPerRow;
  const void *v17;
  CGImageRef image;

  v3 = *a1;
  v2 = (const void *)a1[1];
  if (((*(_DWORD *)(*a1 + 120) & 0x80000000) != 0 || *(int *)(v3 + 124) > 0 || *(_DWORD *)(v3 + 268) == 1)
    && *(_BYTE *)(v3 + 1045))
  {
    *(_QWORD *)(v3 + 576) = 0;
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v5 = *(_QWORD *)(ProtocolVTable + 16);
      if (v5)
      {
        v6 = *(void (**)(const void *, uint64_t))(v5 + 264);
        if (v6)
          v6(v2, v3 + 288);
      }
    }
    v7 = *(_QWORD *)(*a1 + 248);
    FigCDSNodeProtocolGetProtocolID();
    v8 = CMBaseObjectGetProtocolVTable();
    if (!v8
      || (v9 = *(_QWORD *)(v8 + 16)) == 0
      || (v10 = *(unsigned int (**)(uint64_t, uint64_t))(v9 + 104)) == 0
      || v10(v7, v3 + 128))
    {
LABEL_23:
      FigSignalErrorAt();
      goto LABEL_24;
    }
    v11 = *(const void **)(v3 + 160);
    *(_QWORD *)(v3 + 160) = v2;
    if (v2)
      CFRetain(v2);
    if (v11)
      CFRelease(v11);
    if (*(_DWORD *)(v3 + 268) != 1)
    {
      image = 0;
      v12 = *(_QWORD *)(v3 + 248);
      FigCDSNodeProtocolGetProtocolID();
      v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          v15 = *(unsigned int (**)(uint64_t, CGImageRef *))(v14 + 160);
          if (v15)
          {
            if (!v15(v12, &image))
            {
              BytesPerRow = CGImageGetBytesPerRow(image);
              *(_DWORD *)(v3 + 124) -= CGImageGetHeight(image) * BytesPerRow;
              goto LABEL_24;
            }
          }
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  v17 = (const void *)a1[1];
  if (v17)
    CFRelease(v17);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  free(a1);
}

void onUserEvent_0(__int128 *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  if (a2)
  {
    if (*(_QWORD *)(a2 + 168))
    {
      v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10C00407EF3FF2FuLL);
      v4[3] = a2;
      v5 = *a1;
      v4[2] = *((_QWORD *)a1 + 2);
      *(_OWORD *)v4 = v5;
      dispatch_sync_f(*(dispatch_queue_t *)(a2 + 168), v4, (dispatch_function_t)onUserEventDo_0);
    }
  }
}

void onViewportChanged_0(dispatch_queue_t *a1, double a2, double a3, double a4, double a5)
{
  double *v10;

  if (a1)
  {
    if (a1[21])
    {
      v10 = (double *)malloc_type_calloc(1uLL, 0x28uLL, 0x10C00405BF71875uLL);
      *((_QWORD *)v10 + 4) = CFRetain(a1);
      *v10 = a2;
      v10[1] = a3;
      v10[2] = a4;
      v10[3] = a5;
      dispatch_async_f(a1[21], v10, (dispatch_function_t)onViewportChangedDo_0);
    }
  }
}

void drawInContext_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  if (*(_BYTE *)(a2 + 1045) && *(_QWORD *)(a2 + 168))
  {
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    if (v4)
    {
      v5 = v4;
      *v4 = CFRetain((CFTypeRef)a2);
      v5[1] = a1;
      dispatch_sync_f(*(dispatch_queue_t *)(a2 + 168), v5, (dispatch_function_t)composeSceneDo_0);
    }
  }
}

void onUserEventDo_0(int *a1)
{
  _QWORD *v2;
  int v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, char *, double, double);
  uint64_t ProtocolVTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, _QWORD *);
  char v20;

  v2 = (_QWORD *)*((_QWORD *)a1 + 3);
  v3 = *a1;
  v4 = *((double *)a1 + 1);
  v5 = *((double *)a1 + 2);
  v20 = 0;
  if (v3 == 3)
  {
    v6 = v2[31];
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable)
      goto LABEL_20;
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (!v11)
      goto LABEL_20;
    v9 = *(unsigned int (**)(uint64_t, char *, double, double))(v11 + 344);
    if (!v9)
      goto LABEL_20;
  }
  else
  {
    if (v3 != 1)
      goto LABEL_11;
    v6 = v2[31];
    FigCDSNodeProtocolGetProtocolID();
    v7 = CMBaseObjectGetProtocolVTable();
    if (!v7)
      goto LABEL_20;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      goto LABEL_20;
    v9 = *(unsigned int (**)(uint64_t, char *, double, double))(v8 + 336);
    if (!v9)
      goto LABEL_20;
  }
  if (v9(v6, &v20, v4, v5))
  {
LABEL_20:
    FigSignalErrorAt();
    goto LABEL_21;
  }
LABEL_11:
  v12 = v2[31];
  FigCDSNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (!v13)
    goto LABEL_20;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    goto LABEL_20;
  v15 = *(unsigned int (**)(uint64_t))(v14 + 256);
  if (!v15)
    goto LABEL_20;
  if (v15(v12))
    goto LABEL_20;
  v2[72] = 0;
  v16 = v2[31];
  FigCDSNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (!v17)
    goto LABEL_20;
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
    goto LABEL_20;
  v19 = *(unsigned int (**)(uint64_t, _QWORD *))(v18 + 288);
  if (!v19 || v19(v16, v2 + 36))
    goto LABEL_20;
  updateDisplayPort_0(v2, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
LABEL_21:
  free(a1);
}

void onViewportChangedDo_0(double *a1)
{
  _QWORD *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ProtocolVTable;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, double, double, double, double);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t);

  v2 = (_QWORD *)*((_QWORD *)a1 + 4);
  v3 = a1[2];
  if (v3 <= 0.0 || (v4 = a1[3], v4 <= 0.0))
  {
    if (!v2)
      goto LABEL_23;
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = (const void *)v2[90];
    if (v7)
    {
      CFRelease(v7);
      v2[90] = 0;
    }
    v8 = (const void *)v2[89];
    if (v8)
    {
      CFRelease(v8);
      v2[89] = 0;
    }
    v9 = (const void *)v2[91];
    if (v9)
    {
      CFRelease(v9);
      v2[91] = 0;
    }
    if (FigGeometryMappingCreateCEA608Mappings())
      goto LABEL_21;
    FCRGetCEA608CellSize(v2[90]);
    v2[92] = v10;
    v2[93] = v11;
    v12 = v2[31];
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable
      || (v14 = *(_QWORD *)(ProtocolVTable + 16)) == 0
      || (v15 = *(unsigned int (**)(uint64_t, double, double, double, double))(v14 + 96)) == 0
      || v15(v12, v5, v6, v3, v4)
      || (v16 = v2[31], FigCDSNodeProtocolGetProtocolID(), (v17 = CMBaseObjectGetProtocolVTable()) == 0)
      || (v18 = *(_QWORD *)(v17 + 16)) == 0
      || (v19 = *(unsigned int (**)(uint64_t))(v18 + 256)) == 0
      || v19(v16))
    {
LABEL_21:
      FigSignalErrorAt();
    }
  }
  CFRelease(v2);
LABEL_23:
  free(a1);
}

void composeSceneDo_0(CGContext **a1)
{
  uint64_t v2;
  const __CFArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t);
  const __CFDictionary *v13;
  const void *Value;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(const void *);
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t);
  CMTime v23;
  CMTime v24;

  v2 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 67) == 1)
  {
    v3 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 48);
    if (!v4)
    {
      FigSignalErrorAt();
      goto LABEL_28;
    }
    memset(&v24, 0, sizeof(v24));
    FigCDSTriggerGetCurrentTime(v4, &v24);
    v23 = v24;
    v3 = (const __CFArray *)copyCurrentActiveCaptions_0(v2, &v23);
    v23 = v24;
    updateNodeTree_0(v2, v3, (uint64_t)&v23);
  }
  v5 = *(_QWORD *)(v2 + 248);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    goto LABEL_25;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    goto LABEL_25;
  v8 = *(unsigned int (**)(uint64_t, uint64_t))(v7 + 216);
  if (!v8)
    goto LABEL_25;
  if (v8(v5, 1))
    goto LABEL_25;
  *(_QWORD *)(v2 + 576) = a1[1];
  v9 = *(_QWORD *)(v2 + 248);
  FigCDSNodeProtocolGetProtocolID();
  v10 = CMBaseObjectGetProtocolVTable();
  if (!v10)
    goto LABEL_25;
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    goto LABEL_25;
  v12 = *(unsigned int (**)(uint64_t, uint64_t))(v11 + 288);
  if (!v12 || v12(v9, v2 + 288))
    goto LABEL_25;
  v13 = *(const __CFDictionary **)(v2 + 560);
  if (v13 && *(_BYTE *)(v2 + 753))
  {
    Value = CFDictionaryGetValue(v13, *(const void **)(v2 + 248));
    FigCDSOutputNodeProtocolGetProtocolID();
    v15 = CMBaseObjectGetProtocolVTable();
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
      {
        v17 = *(void (**)(const void *))(v16 + 112);
        if (v17)
          v17(Value);
      }
    }
    v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 560), *(const void **)(v2 + 248));
    if (v18)
      copyOutputNodeContentIntoCGContext_0((uint64_t)v18, a1[1]);
  }
  v19 = *(_QWORD *)(v2 + 248);
  FigCDSNodeProtocolGetProtocolID();
  v20 = CMBaseObjectGetProtocolVTable();
  if (!v20
    || (v21 = *(_QWORD *)(v20 + 16)) == 0
    || (v22 = *(unsigned int (**)(uint64_t, uint64_t))(v21 + 104)) == 0
    || v22(v19, v2 + 128))
  {
LABEL_25:
    FigSignalErrorAt();
  }
  if (v3)
    CFRelease(v3);
LABEL_28:
  CFRelease(*a1);
  free(a1);
}

void updateNodeTree_0(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const __CFArray *MutableCopy;
  uint64_t ProtocolVTable;
  uint64_t v8;
  unsigned int (*v9)(void *, CFArrayRef *);
  CFIndex v10;
  int v11;
  const __CFString *v12;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, const char **);
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(const void *, CFAttributedStringRef *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(const void *, char **);
  CFIndex FirstIndexOfValue;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(const void *, char **);
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(const void *, CFArrayRef *);
  CFIndex v32;
  int v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(const void *, CFAttributedStringRef *);
  const __CFString *Attribute;
  __CFArray *Mutable;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  const __CFString *v43;
  CFIndex v44;
  CFNumberRef v45;
  CFIndex v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(const void *, int *);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(const void *, char **);
  char *v54;
  uint64_t v55;
  CFIndex v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(const void *, CFIndex *);
  double v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(const void *, CFDictionaryRef *);
  char *Value;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(const void *, CFAttributedStringRef *);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, const void *);
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(const void *, double, double);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, const void *);
  const __CFDictionary *v82;
  const void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(const void *, _QWORD);
  uint64_t v88;
  uint64_t v89;
  void (*v90)(const void *, char **);
  uint64_t v91;
  const __CFDictionary *v92;
  const void *v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(const void *, _QWORD);
  const __CFString *v98;
  __CFArray *v99;
  __CFArray *v100;
  const __CFDictionary *v101;
  const void *v102;
  const __CFArray *v103;
  CFIndex v104;
  CFIndex v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(const void *, CFIndex *);
  CFIndex v109;
  const void *v110;
  const void *v111;
  CFIndex v112;
  const __CFString *v113;
  const void *v114;
  _BOOL4 v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(const void *, CFRange *);
  const __CFString *v119;
  const __CFString *v120;
  CFIndex v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int (*v125)(const void *, CFAttributedStringRef *);
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int (*v129)(const void *, const char **);
  uint64_t v130;
  uint64_t v131;
  unsigned int (*v132)(const void *, const void *);
  CFIndex v133;
  const __CFString *v134;
  const __CFDictionary *v135;
  const void *v136;
  const void *v137;
  const void *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int (*v141)(const void *, const void *);
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(const void *, CFIndex *);
  double v146;
  double v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int (*v151)(const void *, double, double, double, double);
  const __CFString *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int (*v155)(void *, const void *);
  const __CFDictionary *v156;
  const void *v157;
  const void *v158;
  const void *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int (*v162)(const void *, const void *);
  __int128 v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  void (*v167)(const void *, CFAttributedStringRef *);
  uint64_t v168;
  uint64_t v169;
  void (*v170)(void *, CFIndex *);
  CFIndex v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  double v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int (*v179)(const void *, double, double, double, double);
  const __CFArray *v180;
  CFIndex v181;
  const void *v182;
  _QWORD *v183;
  _QWORD *v184;
  int v185;
  void *key;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora;
  CFIndex idx[2];
  __int128 v190;
  CFDictionaryRef theDict;
  CFAttributedStringRef v192;
  double v193;
  char *__s1;
  int v195;
  CFRange effectiveRange;
  CFAttributedStringRef aStr;
  CFArrayRef theArraya;
  char *v199;
  const char *v200;
  CFArrayRef v201[2];
  CFRange v202;
  CFRange v203;

  if (theArray)
  {
    v4 = a1;
    v5 = *(void **)(a1 + 248);
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
    v201[0] = 0;
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable
      && (v8 = *(_QWORD *)(ProtocolVTable + 16)) != 0
      && (v9 = *(unsigned int (**)(void *, CFArrayRef *))(v8 + 24)) != 0
      && (key = v5, !v9(v5, v201)))
    {
      if ((*(_DWORD *)(v4 + 268) & 0xFFFFFFFE) == 2 && CFArrayGetCount(v201[0]) >= 1)
      {
        v10 = 0;
        v11 = 0;
        v12 = (const __CFString *)*MEMORY[0x1E0CA2B10];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v201[0], v10);
          v200 = 0;
          FigCDSBaseProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (!v14)
            goto LABEL_233;
          v15 = *(_QWORD *)(v14 + 16);
          if (!v15)
            goto LABEL_233;
          v16 = *(unsigned int (**)(const void *, const char **))(v15 + 8);
          if (!v16 || v16(ValueAtIndex, &v200))
            goto LABEL_233;
          v17 = v200;
          if (v200)
          {
            if (!strcmp(v200, "FigCDSStackLayoutRegion")
              || !strcmp(v17, "FigCDSCellStackLayoutRegion")
              || !strcmp(v17, "FigCDSiTTRegion")
              || !strcmp(v17, "FigCDSSRTRegion")
              || !strcmp(v17, "FigCDSFreeLayoutRegion"))
            {
              v199 = 0;
              FigCDSRegionProtocolGetProtocolID();
              v26 = CMBaseObjectGetProtocolVTable();
              if (v26)
              {
                v27 = *(_QWORD *)(v26 + 16);
                if (v27)
                {
                  v28 = *(void (**)(const void *, char **))(v27 + 16);
                  if (v28)
                    v28(ValueAtIndex, &v199);
                }
              }
              theArraya = 0;
              FigCDSNodeProtocolGetProtocolID();
              v29 = CMBaseObjectGetProtocolVTable();
              if (!v29)
                goto LABEL_233;
              v30 = *(_QWORD *)(v29 + 16);
              if (!v30)
                goto LABEL_233;
              v31 = *(unsigned int (**)(const void *, CFArrayRef *))(v30 + 24);
              if (!v31)
                goto LABEL_233;
              v185 = v11;
              if (v31(ValueAtIndex, &theArraya))
                goto LABEL_233;
              if (CFArrayGetCount(theArraya) < 1)
              {
LABEL_112:
                v11 = v185;
                goto LABEL_113;
              }
              v32 = 0;
              v33 = 0;
              while (2)
              {
                v34 = CFArrayGetValueAtIndex(theArraya, v32);
                aStr = 0;
                FigCDSCaptionProtocolGetProtocolID();
                v35 = CMBaseObjectGetProtocolVTable();
                if (v35)
                {
                  v36 = *(_QWORD *)(v35 + 16);
                  if (v36)
                  {
                    v37 = *(void (**)(const void *, CFAttributedStringRef *))(v36 + 32);
                    if (v37)
                      v37(v34, &aStr);
                  }
                }
                effectiveRange.location = 0;
                effectiveRange.length = 0;
                Attribute = (const __CFString *)CFAttributedStringGetAttribute(aStr, 0, v12, &effectiveRange);
                if (Attribute)
                {
                  Mutable = searchNodesCopyByID_0(MutableCopy, Attribute);
                  goto LABEL_50;
                }
                Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                idx[0] = 0;
                if (CFArrayGetCount(MutableCopy) < 1)
                  goto LABEL_60;
                v41 = v4;
                v42 = a3;
                v43 = v12;
                v44 = -1;
                do
                {
                  if (CFArrayGetValueAtIndex(MutableCopy, idx[0]) == v34)
                  {
                    v44 = idx[0];
                    v45 = CFNumberCreate(allocator, kCFNumberCFIndexType, idx);
                    CFArrayAppendValue(Mutable, v45);
                    if (v45)
                      CFRelease(v45);
                  }
                  v46 = ++idx[0];
                }
                while (v46 < CFArrayGetCount(MutableCopy));
                v47 = v44 == -1;
                v12 = v43;
                a3 = v42;
                v4 = v41;
                if (v47)
                {
LABEL_60:
                  if (Mutable)
                    CFRelease(Mutable);
                }
                else
                {
LABEL_50:
                  if (Mutable)
                  {
                    removeNodesByIndexes(MutableCopy, Mutable);
                    CFRelease(Mutable);
                    v40 = *(_QWORD *)(v4 + 72) != 0;
                    *(_OWORD *)idx = *(_OWORD *)a3;
                    *(_QWORD *)&v190 = *(_QWORD *)(a3 + 16);
                    updateTimedNode_0((uint64_t)v34, (__int128 *)idx, v40);
LABEL_111:
                    v32 = ++v33;
                    if (CFArrayGetCount(theArraya) <= v33)
                      goto LABEL_112;
                    continue;
                  }
                }
                break;
              }
              if (*(_DWORD *)(v4 + 268) != 2)
                goto LABEL_104;
              v195 = 0;
              FigCDSCaptionProtocolGetProtocolID();
              v48 = CMBaseObjectGetProtocolVTable();
              if (v48)
              {
                v49 = *(_QWORD *)(v48 + 16);
                if (v49)
                {
                  v50 = *(void (**)(const void *, int *))(v49 + 48);
                  if (v50)
                    v50(v34, &v195);
                }
              }
              __s1 = 0;
              FigCDSBaseProtocolGetProtocolID();
              v51 = CMBaseObjectGetProtocolVTable();
              if (v51)
              {
                v52 = *(_QWORD *)(v51 + 16);
                if (v52)
                {
                  v53 = *(void (**)(const void *, char **))(v52 + 8);
                  if (v53)
                    v53(v34, &__s1);
                }
              }
              if (v195 != 1)
                goto LABEL_104;
              if (strcmp(v200, "FigCDSCellStackLayoutRegion"))
                goto LABEL_104;
              v54 = __s1;
              if (!__s1)
                goto LABEL_104;
              v55 = strcmp(__s1, "FigCDSCaption");
              if ((_DWORD)v55)
              {
                v55 = strcmp(v54, "FigCDSPaintOnCaption");
                if ((_DWORD)v55)
                  goto LABEL_104;
              }
              idx[0] = 0;
              idx[1] = 0;
              idx[0] = FigBytePumpGetFigBaseObject(v55);
              idx[1] = v56;
              FigCDSIntervalProtocolGetProtocolID();
              v57 = CMBaseObjectGetProtocolVTable();
              if (v57)
              {
                v58 = *(_QWORD *)(v57 + 16);
                if (v58)
                {
                  v59 = *(uint64_t (**)(const void *, CFIndex *))(v58 + 8);
                  if (v59)
                    v57 = v59(v34, idx);
                }
              }
              *(double *)&v192 = 0.0;
              v193 = 0.0;
              *(double *)&v192 = FigBytePumpGetFigBaseObject(v57);
              v193 = v60;
              if (CFArrayGetCount(MutableCopy) >= 1)
              {
                v61 = CFArrayGetValueAtIndex(MutableCopy, 0);
                theDict = 0;
                FigCDSCaptionProtocolGetProtocolID();
                v62 = CMBaseObjectGetProtocolVTable();
                if (!v62)
                  goto LABEL_233;
                v63 = *(_QWORD *)(v62 + 16);
                if (!v63)
                  goto LABEL_233;
                v64 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v63 + 16);
                if (!v64 || v64(v61, &theDict))
                  goto LABEL_233;
                Value = (char *)CFDictionaryGetValue(theDict, CFSTR("region"));
                if (Value)
                {
                  if (Value == v199)
                  {
                    FigCDSIntervalProtocolGetProtocolID();
                    v66 = CMBaseObjectGetProtocolVTable();
                    if (v66)
                    {
                      v67 = *(_QWORD *)(v66 + 16);
                      if (v67)
                      {
                        v68 = *(void (**)(const void *, CFAttributedStringRef *))(v67 + 8);
                        if (v68)
                          v68(v61, &v192);
                      }
                    }
                  }
                }
              }
              if (*(double *)&v192 - (*(double *)idx + *(double *)&idx[1]) == 0.0)
              {
                v69 = *(_QWORD *)(v4 + 240);
                FigCDSParentIntervalProtocolGetProtocolID();
                v70 = CMBaseObjectGetProtocolVTable();
                if (!v70)
                  goto LABEL_233;
                v71 = *(_QWORD *)(v70 + 16);
                if (!v71)
                  goto LABEL_233;
                v72 = *(unsigned int (**)(uint64_t, const void *))(v71 + 16);
                if (!v72 || v72(v69, v34))
                  goto LABEL_233;
                v73 = *(double *)idx;
                v74 = v193 + *(double *)&idx[1];
                *(double *)&idx[1] = v193 + *(double *)&idx[1];
                FigCDSIntervalProtocolGetProtocolID();
                v75 = CMBaseObjectGetProtocolVTable();
                if (v75)
                {
                  v76 = *(_QWORD *)(v75 + 16);
                  if (v76)
                  {
                    v77 = *(void (**)(const void *, double, double))(v76 + 16);
                    if (v77)
                      v77(v34, v73, v74);
                  }
                }
                v78 = *(_QWORD *)(v4 + 240);
                FigCDSParentIntervalProtocolGetProtocolID();
                v79 = CMBaseObjectGetProtocolVTable();
                if (v79)
                {
                  v80 = *(_QWORD *)(v79 + 16);
                  if (v80)
                  {
                    v81 = *(void (**)(uint64_t, const void *))(v80 + 8);
                    if (v81)
                      v81(v78, v34);
                  }
                }
              }
              else
              {
LABEL_104:
                v82 = *(const __CFDictionary **)(v4 + 560);
                if (v82)
                {
                  v83 = CFDictionaryGetValue(v82, v34);
                  if (v83)
                  {
                    v84 = v83;
                    FigCDSOutputNodeProtocolGetProtocolID();
                    v85 = CMBaseObjectGetProtocolVTable();
                    if (v85)
                    {
                      v86 = *(_QWORD *)(v85 + 16);
                      if (v86)
                      {
                        v87 = *(void (**)(const void *, _QWORD))(v86 + 16);
                        if (v87)
                          v87(v84, 0);
                      }
                    }
                  }
                }
                CFArrayRemoveValueAtIndex(theArraya, v32);
                --v33;
              }
              goto LABEL_111;
            }
            if (strcmp(v17, "FigCDSCaption") && strcmp(v17, "FigCDSPaintOnCaption"))
              goto LABEL_113;
            *(double *)&v192 = 0.0;
            FigCDSCaptionProtocolGetProtocolID();
            v18 = CMBaseObjectGetProtocolVTable();
            if (v18)
            {
              v19 = *(_QWORD *)(v18 + 16);
              if (v19)
              {
                v20 = *(void (**)(const void *, CFAttributedStringRef *))(v19 + 32);
                if (v20)
                  v20(ValueAtIndex, &v192);
              }
            }
            LODWORD(__s1) = 0;
            FigCDSCaptionProtocolGetProtocolID();
            v21 = CMBaseObjectGetProtocolVTable();
            if (v21)
            {
              v22 = *(_QWORD *)(v21 + 16);
              if (v22)
              {
                v23 = *(void (**)(const void *, char **))(v22 + 48);
                if (v23)
                  v23(ValueAtIndex, &__s1);
              }
            }
            if (__s1 > 3 || (_DWORD)__s1 == 2)
            {
              effectiveRange.location = 0;
              effectiveRange.length = 0;
              v98 = (const __CFString *)CFAttributedStringGetAttribute(v192, 0, v12, &effectiveRange);
              if (!v98)
                goto LABEL_113;
              v99 = searchNodesCopyByID_0(MutableCopy, v98);
              if (!v99)
              {
                v101 = *(const __CFDictionary **)(v4 + 560);
                if (v101)
                {
                  v102 = CFDictionaryGetValue(v101, ValueAtIndex);
                  if (v102)
                    FigCDSOutputNodeSetParentNode((uint64_t)v102);
                }
                goto LABEL_134;
              }
              v100 = v99;
              removeNodesByIndexes(MutableCopy, v99);
              CFRelease(v100);
              goto LABEL_33;
            }
            v202.length = CFArrayGetCount(MutableCopy);
            v202.location = 0;
            FirstIndexOfValue = CFArrayGetFirstIndexOfValue(MutableCopy, v202, ValueAtIndex);
            if (FirstIndexOfValue != -1)
            {
              CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
LABEL_33:
              v25 = *(_QWORD *)(v4 + 72) != 0;
              *(_OWORD *)idx = *(_OWORD *)a3;
              *(_QWORD *)&v190 = *(_QWORD *)(a3 + 16);
              updateTimedNode_0((uint64_t)ValueAtIndex, (__int128 *)idx, v25);
              goto LABEL_113;
            }
            if (*(_DWORD *)(v4 + 268) != 2)
              goto LABEL_122;
            v199 = 0;
            FigCDSBaseProtocolGetProtocolID();
            v88 = CMBaseObjectGetProtocolVTable();
            if (v88)
            {
              v89 = *(_QWORD *)(v88 + 16);
              if (v89)
              {
                v90 = *(void (**)(const void *, char **))(v89 + 8);
                if (v90)
                  v90(ValueAtIndex, &v199);
              }
            }
            if (!v199)
              goto LABEL_122;
            v91 = strcmp(v199, "FigCDSPaintOnCaption");
            if ((_DWORD)v91)
              goto LABEL_122;
            idx[0] = 0;
            idx[1] = 0;
            idx[0] = FigBytePumpGetFigBaseObject(v91);
            idx[1] = v105;
            FigCDSIntervalProtocolGetProtocolID();
            v106 = CMBaseObjectGetProtocolVTable();
            if (v106)
            {
              v107 = *(_QWORD *)(v106 + 16);
              if (v107)
              {
                v108 = *(uint64_t (**)(const void *, CFIndex *))(v107 + 8);
                if (v108)
                  v106 = v108(ValueAtIndex, idx);
              }
            }
            effectiveRange.location = 0;
            effectiveRange.length = 0;
            effectiveRange.location = FigBytePumpGetFigBaseObject(v106);
            effectiveRange.length = v109;
            if (CFArrayGetCount(MutableCopy) >= 1)
            {
              v110 = CFArrayGetValueAtIndex(MutableCopy, 0);
              theArraya = 0;
              FigCDSBaseGetClassName((uint64_t)v110, (uint64_t)&theArraya);
              aStr = 0;
              FigCDSCaptionGetAttributes((uint64_t)v110, (uint64_t)&aStr);
              v111 = aStr ? CFDictionaryGetValue(aStr, CFSTR("region")) : 0;
              if (theArraya && !strcmp((const char *)theArraya, "FigCDSPaintOnCaption") && !v111)
                FigCDSIntervalGetRange((uint64_t)v110, (uint64_t)&effectiveRange);
            }
            if (*(double *)&effectiveRange.location - (*(double *)idx + *(double *)&idx[1]) != 0.0)
            {
LABEL_122:
              v92 = *(const __CFDictionary **)(v4 + 560);
              if (v92)
              {
                v93 = CFDictionaryGetValue(v92, ValueAtIndex);
                if (v93)
                {
                  v94 = v93;
                  FigCDSOutputNodeProtocolGetProtocolID();
                  v95 = CMBaseObjectGetProtocolVTable();
                  if (v95)
                  {
                    v96 = *(_QWORD *)(v95 + 16);
                    if (v96)
                    {
                      v97 = *(void (**)(const void *, _QWORD))(v96 + 16);
                      if (v97)
                        v97(v94, 0);
                    }
                  }
                }
              }
LABEL_134:
              v103 = v201[0];
              v203.length = CFArrayGetCount(v201[0]);
              v203.location = 0;
              v104 = CFArrayGetFirstIndexOfValue(v103, v203, ValueAtIndex);
              CFArrayRemoveValueAtIndex(v103, v104);
              --v11;
              goto LABEL_113;
            }
            if (FigCDSParentIntervalRemoveChildInterval(*(_QWORD *)(v4 + 240), (uint64_t)ValueAtIndex))
              goto LABEL_233;
            *(double *)&idx[1] = *(double *)&effectiveRange.length + *(double *)&idx[1];
            FigCDSIntervalSetRange((uint64_t)ValueAtIndex, *(double *)idx, *(double *)&idx[1]);
            FigCDSParentIntervalAddChildInterval(*(_QWORD *)(v4 + 240), (uint64_t)ValueAtIndex);
          }
LABEL_113:
          v10 = ++v11;
        }
        while (CFArrayGetCount(v201[0]) > v11);
      }
      if (CFArrayGetCount(MutableCopy) >= 1)
      {
        v112 = 0;
        v113 = CFSTR("region");
        while (1)
        {
          v114 = CFArrayGetValueAtIndex(MutableCopy, v112);
          v115 = *(_QWORD *)(v4 + 72) != 0;
          *(_OWORD *)idx = *(_OWORD *)a3;
          *(_QWORD *)&v190 = *(_QWORD *)(a3 + 16);
          updateTimedNode_0((uint64_t)v114, (__int128 *)idx, v115);
          effectiveRange.location = 0;
          FigCDSCaptionProtocolGetProtocolID();
          v116 = CMBaseObjectGetProtocolVTable();
          if (!v116)
            goto LABEL_233;
          v117 = *(_QWORD *)(v116 + 16);
          if (!v117)
            goto LABEL_233;
          v118 = *(unsigned int (**)(const void *, CFRange *))(v117 + 16);
          if (!v118 || v118(v114, &effectiveRange))
            goto LABEL_233;
          v119 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)effectiveRange.location, v113);
          if (!v119)
            break;
          v120 = v119;
          if (CFArrayGetCount(v201[0]) >= 1)
          {
            v121 = 0;
            do
            {
              v122 = CFArrayGetValueAtIndex(v201[0], v121);
              *(double *)&v192 = 0.0;
              FigCDSBaseProtocolGetProtocolID();
              v123 = CMBaseObjectGetProtocolVTable();
              if (!v123)
                goto LABEL_233;
              v124 = *(_QWORD *)(v123 + 16);
              if (!v124)
                goto LABEL_233;
              v125 = *(unsigned int (**)(const void *, CFAttributedStringRef *))(v124 + 8);
              if (!v125 || v125(v122, &v192))
                goto LABEL_233;
              v126 = (const char *)v192;
              if (*(double *)&v192 != 0.0
                && (!strcmp((const char *)v192, "FigCDSStackLayoutRegion")
                 || !strcmp(v126, "FigCDSCellStackLayoutRegion")
                 || !strcmp(v126, "FigCDSiTTRegion")
                 || !strcmp(v126, "FigCDSSRTRegion")
                 || !strcmp(v126, "FigCDSFreeLayoutRegion")))
              {
                v200 = 0;
                FigCDSRegionProtocolGetProtocolID();
                v127 = CMBaseObjectGetProtocolVTable();
                if (!v127)
                  goto LABEL_233;
                v128 = *(_QWORD *)(v127 + 16);
                if (!v128)
                  goto LABEL_233;
                v129 = *(unsigned int (**)(const void *, const char **))(v128 + 16);
                if (!v129 || v129(v122, &v200))
                  goto LABEL_233;
                if (CFStringCompare(v120, (CFStringRef)v200, 1uLL) == kCFCompareEqualTo)
                {
                  FigCDSNodeProtocolGetProtocolID();
                  v130 = CMBaseObjectGetProtocolVTable();
                  if (!v130)
                    goto LABEL_233;
                  v131 = *(_QWORD *)(v130 + 16);
                  if (!v131)
                    goto LABEL_233;
                  v132 = *(unsigned int (**)(const void *, const void *))(v131 + 40);
                  if (!v132)
                    goto LABEL_233;
                  allocatora = (CFAllocatorRef)v120;
                  v133 = v112;
                  v134 = v113;
                  if (v132(v122, v114))
                    goto LABEL_233;
                  v135 = *(const __CFDictionary **)(v4 + 560);
                  if (v135)
                  {
                    v136 = CFDictionaryGetValue(v135, v114);
                    v137 = CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 560), v122);
                    if (v136)
                    {
                      v138 = v137;
                      if (v137)
                      {
                        FigCDSOutputNodeProtocolGetProtocolID();
                        v139 = CMBaseObjectGetProtocolVTable();
                        if (!v139)
                          goto LABEL_233;
                        v140 = *(_QWORD *)(v139 + 16);
                        if (!v140)
                          goto LABEL_233;
                        v141 = *(unsigned int (**)(const void *, const void *))(v140 + 24);
                        if (!v141 || v141(v138, v136))
                          goto LABEL_233;
                      }
                    }
                  }
                  v142 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
                  *(_OWORD *)idx = *MEMORY[0x1E0C9D628];
                  v190 = v142;
                  FigCDSNodeProtocolGetProtocolID();
                  v143 = CMBaseObjectGetProtocolVTable();
                  if (v143)
                  {
                    v144 = *(_QWORD *)(v143 + 16);
                    if (v144)
                    {
                      v145 = *(void (**)(const void *, CFIndex *))(v144 + 104);
                      if (v145)
                        v145(v122, idx);
                    }
                  }
                  v146 = *(double *)idx;
                  v147 = *(double *)&idx[1];
                  v148 = v190;
                  FigCDSNodeProtocolGetProtocolID();
                  v149 = CMBaseObjectGetProtocolVTable();
                  if (!v149)
                    goto LABEL_233;
                  v150 = *(_QWORD *)(v149 + 16);
                  if (!v150)
                    goto LABEL_233;
                  v151 = *(unsigned int (**)(const void *, double, double, double, double))(v150 + 64);
                  if (!v151)
                    goto LABEL_233;
                  v113 = v134;
                  v112 = v133;
                  if (v151(v114, v146, v147, *(double *)&v148, *((double *)&v148 + 1)))
                    goto LABEL_233;
                  v120 = (const __CFString *)allocatora;
                }
              }
            }
            while (CFArrayGetCount(v201[0]) > ++v121);
          }
LABEL_225:
          if (CFArrayGetCount(MutableCopy) <= ++v112)
            goto LABEL_226;
        }
        v152 = v113;
        FigCDSNodeProtocolGetProtocolID();
        v153 = CMBaseObjectGetProtocolVTable();
        if (!v153)
          goto LABEL_233;
        v154 = *(_QWORD *)(v153 + 16);
        if (!v154)
          goto LABEL_233;
        v155 = *(unsigned int (**)(void *, const void *))(v154 + 40);
        if (!v155)
          goto LABEL_233;
        if (v155(key, v114))
          goto LABEL_233;
        v156 = *(const __CFDictionary **)(v4 + 560);
        if (v156)
        {
          v157 = CFDictionaryGetValue(v156, v114);
          v158 = CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 560), key);
          if (v157)
          {
            v159 = v158;
            if (v158)
            {
              FigCDSOutputNodeProtocolGetProtocolID();
              v160 = CMBaseObjectGetProtocolVTable();
              if (!v160)
                goto LABEL_233;
              v161 = *(_QWORD *)(v160 + 16);
              if (!v161)
                goto LABEL_233;
              v162 = *(unsigned int (**)(const void *, const void *))(v161 + 24);
              if (!v162 || v162(v159, v157))
                goto LABEL_233;
            }
          }
        }
        v163 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        *(_OWORD *)idx = *MEMORY[0x1E0C9D628];
        v190 = v163;
        if ((*(_DWORD *)(v4 + 268) | 2) == 3)
        {
          LODWORD(v192) = 0;
          FigCDSCaptionProtocolGetProtocolID();
          v164 = CMBaseObjectGetProtocolVTable();
          v165 = key;
          if (v164)
          {
            v166 = *(_QWORD *)(v164 + 16);
            if (v166)
            {
              v167 = *(void (**)(const void *, CFAttributedStringRef *))(v166 + 48);
              if (v167)
                v167(v114, &v192);
            }
          }
          if ((_DWORD)v192 != 3)
          {
            idx[0] = FCRGetVideoPresentationBounds(*(double *)(v4 + 624), *(double *)(v4 + 632), *(double *)(v4 + 592), *(double *)(v4 + 600), *(double *)(v4 + 608), *(double *)(v4 + 616));
            idx[1] = v171;
            *(_QWORD *)&v190 = v172;
            *((_QWORD *)&v190 + 1) = v173;
LABEL_220:
            v174 = *(double *)idx;
            v175 = *(double *)&idx[1];
            v176 = v190;
            FigCDSNodeProtocolGetProtocolID();
            v177 = CMBaseObjectGetProtocolVTable();
            if (!v177)
              goto LABEL_233;
            v178 = *(_QWORD *)(v177 + 16);
            if (!v178)
              goto LABEL_233;
            v179 = *(unsigned int (**)(const void *, double, double, double, double))(v178 + 64);
            if (!v179 || v179(v114, v174, v175, *(double *)&v176, *((double *)&v176 + 1)))
              goto LABEL_233;
            v113 = v152;
            goto LABEL_225;
          }
          FigCDSNodeProtocolGetProtocolID();
        }
        else
        {
          FigCDSNodeProtocolGetProtocolID();
          v165 = key;
        }
        v168 = CMBaseObjectGetProtocolVTable();
        if (v168)
        {
          v169 = *(_QWORD *)(v168 + 16);
          if (v169)
          {
            v170 = *(void (**)(void *, CFIndex *))(v169 + 104);
            if (v170)
              v170(v165, idx);
          }
        }
        goto LABEL_220;
      }
LABEL_226:
      if (!*(_QWORD *)(v4 + 72))
      {
        *(_OWORD *)idx = *(_OWORD *)a3;
        *(_QWORD *)&v190 = *(_QWORD *)(a3 + 16);
        v180 = (const __CFArray *)copyCurrentActiveCaptions_0(v4, (CMTime *)idx);
        if (CFArrayGetCount(v180) >= 1)
        {
          v181 = 0;
          do
          {
            v182 = CFArrayGetValueAtIndex(v180, v181);
            v183 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
            if (!v183)
              break;
            v184 = v183;
            *v183 = CFRetain((CFTypeRef)v4);
            v184[1] = CFRetain(v182);
            renderCaptionDo_0(v184);
            ++v181;
          }
          while (CFArrayGetCount(v180) > v181);
        }
        if (v180)
          CFRelease(v180);
      }
    }
    else
    {
LABEL_233:
      FigSignalErrorAt();
    }
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
}

void copyOutputNodeContentIntoCGContext_0(uint64_t a1, CGContext *a2)
{
  uint64_t ProtocolVTable;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, CGImageRef *);
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, double *);
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, CGSize *);
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, CFArrayRef *);
  uint64_t Count;
  CFArrayRef theArray;
  CGSize v18;
  double v19[3];
  CGImageRef v20;
  CFRange v21;
  CGRect v22;
  CGRect v23;

  if (!a1 || !a2)
  {
    FigSignalErrorAt();
    return;
  }
  v20 = 0;
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    goto LABEL_24;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    goto LABEL_24;
  v6 = *(unsigned int (**)(uint64_t, CGImageRef *))(v5 + 96);
  if (!v6 || v6(a1, &v20))
    goto LABEL_24;
  if (v20)
  {
    *(_OWORD *)v19 = *MEMORY[0x1E0C9D538];
    FigCDSOutputNodeProtocolGetProtocolID();
    v7 = CMBaseObjectGetProtocolVTable();
    if (!v7)
      goto LABEL_24;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      goto LABEL_24;
    v9 = *(unsigned int (**)(uint64_t, double *))(v8 + 64);
    if (!v9)
      goto LABEL_24;
    if (v9(a1, v19))
      goto LABEL_24;
    v18 = (CGSize)*MEMORY[0x1E0C9D820];
    FigCDSOutputNodeProtocolGetProtocolID();
    v10 = CMBaseObjectGetProtocolVTable();
    if (!v10)
      goto LABEL_24;
    v11 = *(_QWORD *)(v10 + 16);
    if (!v11)
      goto LABEL_24;
    v12 = *(unsigned int (**)(uint64_t, CGSize *))(v11 + 80);
    if (!v12 || v12(a1, &v18))
      goto LABEL_24;
    v22.size = v18;
    v22.origin.x = v19[0] - v18.width * 0.5;
    v22.origin.y = v19[1] - v18.height * 0.5;
    v23 = CGRectIntegral(v22);
    CGContextDrawImage(a2, v23, v20);
  }
  theArray = 0;
  FigCDSOutputNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (!v13
    || (v14 = *(_QWORD *)(v13 + 16)) == 0
    || (v15 = *(unsigned int (**)(uint64_t, CFArrayRef *))(v14 + 40)) == 0
    || v15(a1, &theArray))
  {
LABEL_24:
    FigSignalErrorAt();
    return;
  }
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v21.length = Count;
      v21.location = 0;
      CFArrayApplyFunction(theArray, v21, (CFArrayApplierFunction)copyOutputNodeContentIntoCGContext_0, a2);
    }
  }
}

uint64_t FigCDSBaseGetClassName(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  FigCDSBaseProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      if (v6)
        return v6(a1, a2);
    }
  }
  return result;
}

__CFArray *searchNodesCopyByID_0(const __CFArray *a1, const __CFString *a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v9;
  unsigned int (*v10)(const void *, char **);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(const void *, CFAttributedStringRef *);
  const __CFString *Attribute;
  CFNumberRef v16;
  CFIndex v17;
  const __CFString *attrName;
  CFRange effectiveRange;
  CFAttributedStringRef aStr;
  char *__s1;
  CFIndex idx;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  idx = 0;
  if (CFArrayGetCount(a1) <= 0)
    goto LABEL_25;
  v6 = -1;
  attrName = (const __CFString *)*MEMORY[0x1E0CA2B10];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, idx);
    __s1 = 0;
    FigCDSBaseProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable)
      break;
    v9 = *(_QWORD *)(ProtocolVTable + 16);
    if (!v9)
      break;
    v10 = *(unsigned int (**)(const void *, char **))(v9 + 8);
    if (!v10 || v10(ValueAtIndex, &__s1))
      break;
    v11 = __s1;
    if (__s1
      && strcmp(__s1, "FigCDSStackLayoutRegion")
      && strcmp(v11, "FigCDSCellStackLayoutRegion")
      && strcmp(v11, "FigCDSiTTRegion")
      && strcmp(v11, "FigCDSSRTRegion")
      && strcmp(v11, "FigCDSFreeLayoutRegion")
      && !strcmp(v11, "FigCDSCaption"))
    {
      aStr = 0;
      FigCDSCaptionProtocolGetProtocolID();
      v12 = CMBaseObjectGetProtocolVTable();
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 16);
        if (v13)
        {
          v14 = *(void (**)(const void *, CFAttributedStringRef *))(v13 + 32);
          if (v14)
            v14(ValueAtIndex, &aStr);
        }
      }
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      Attribute = (const __CFString *)CFAttributedStringGetAttribute(aStr, 0, attrName, &effectiveRange);
      if (CFStringCompare(Attribute, a2, 1uLL) == kCFCompareEqualTo)
      {
        v6 = idx;
        v16 = CFNumberCreate(v4, kCFNumberCFIndexType, &idx);
        CFArrayAppendValue(Mutable, v16);
        if (v16)
          CFRelease(v16);
      }
    }
    v17 = ++idx;
    if (v17 >= CFArrayGetCount(a1))
      goto LABEL_24;
  }
  FigSignalErrorAt();
LABEL_24:
  if (v6 == -1)
  {
LABEL_25:
    if (Mutable)
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

uint64_t updateTimedNode_0(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t ProtocolVTable;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, char **);
  uint64_t result;
  __int128 v10;
  uint64_t v11;
  char *__s1;

  __s1 = 0;
  FigCDSBaseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(unsigned int (**)(uint64_t, char **))(v7 + 8);
  if (!v8 || v8(a1, &__s1))
    return FigSignalErrorAt();
  result = (uint64_t)__s1;
  if (__s1)
  {
    result = strcmp(__s1, "FigCDSPaintOnCaption");
    if (!(_DWORD)result)
    {
      v10 = *a2;
      v11 = *((_QWORD *)a2 + 2);
      return FigCDSPaintOnCaptionSetCurrentTime(a1, (uint64_t)&v10, a3);
    }
  }
  return result;
}

uint64_t FigCDSCaptionGetAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  FigCDSCaptionProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
      if (v6)
        return v6(a1, a2);
    }
  }
  return result;
}

uint64_t FigCDSParentIntervalAddChildInterval(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  FigCDSParentIntervalProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      if (v6)
        return v6(a1, a2);
    }
  }
  return result;
}

void layoutInContext_0(const void *a1, dispatch_queue_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;

  if (a2[21])
  {
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    if (v4)
    {
      v5 = v4;
      *v4 = CFRetain(a2);
      if (a1)
        v6 = CFRetain(a1);
      else
        v6 = 0;
      v5[1] = v6;
      dispatch_sync_f(a2[21], v5, (dispatch_function_t)layoutSceneDo_0);
    }
  }
}

void layoutSceneDo_0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, _QWORD *);
  const void *v8;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3[72] = 0;
  v3[71] = v2;
  v4 = v3[31];
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (v6 = *(_QWORD *)(ProtocolVTable + 16)) == 0
    || (v7 = *(unsigned int (**)(uint64_t, _QWORD *))(v6 + 288)) == 0
    || v7(v4, v3 + 36))
  {
    FigSignalErrorAt();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v8 = *(const void **)(a1 + 8);
  if (v8)
    CFRelease(v8);
  free((void *)a1);
}

void applyContextDefaultsToMASettings_0(int64x2_t *a1)
{
  int64x2_t v2;
  uint64_t v3;
  __int8 *v4;
  const void *v5;

  if (a1[16].i32[3] == 2 && !a1[65].i8[1])
  {
    v2 = vdupq_n_s64(1uLL);
    a1[18] = v2;
    a1[19] = v2;
    a1[20] = v2;
    a1[21] = v2;
    a1[26].i64[0] = 1;
    memset_pattern16(&a1[22], &xmmword_1932FA140, 0x40uLL);
    v3 = 0;
    a1[29].i64[0] = 0;
    v4 = &a1[30].i8[8];
    do
    {
      v5 = *(const void **)&v4[v3];
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)&v4[v3] = 0;
      }
      v3 += 8;
    }
    while (v3 != 64);
    a1[30].i64[0] = 0x3FF0000000000000;
  }
}

void onCaptionInput_0(const void *a1, dispatch_queue_t *a2)
{
  _QWORD *v4;
  CFTypeRef v5;

  if (a2 && a2[21])
  {
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xC0040D1025EB5uLL);
    v4[1] = CFRetain(a2);
    if (a1)
      v5 = CFRetain(a1);
    else
      v5 = 0;
    *v4 = v5;
    dispatch_async_f(a2[21], v4, (dispatch_function_t)onCaptionInputDo_0);
  }
}

void onRegionInput_0(const void *a1, dispatch_queue_t *a2)
{
  _QWORD *v4;
  CFTypeRef v5;

  if (a2 && a2[21])
  {
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xC0040D1025EB5uLL);
    v4[1] = CFRetain(a2);
    if (a1)
      v5 = CFRetain(a1);
    else
      v5 = 0;
    *v4 = v5;
    dispatch_async_f(a2[21], v4, (dispatch_function_t)onRegionInputDo_0);
  }
}

void onCaptionInputDo_0(uint64_t a1)
{
  double v2;
  uint64_t v3;
  const void *v4;
  double Seconds;
  uint64_t v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  unsigned int (*v9)(const void *, int *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, void **);
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, double *);
  double v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, __int128 *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(const void *, CFDictionaryRef *);
  const __CFString *v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, CMTime *);
  CFIndex v37;
  const void *ValueAtIndex;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(const void *, char **);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(const void *, CFStringRef *);
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(const void *, double, double, double, double);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(const void *, uint64_t);
  const __CFDictionary *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(const void *, const void *);
  const __CFArray *v63;
  const __CFArray *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, const void *);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(const void *, void **);
  void *v76;
  void *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(const void *, double, double, double, double);
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(const void *, const void *);
  __int128 v85;
  __int128 v86;
  CMTime v87;
  CMTime v88;
  void *value[2];
  __int128 v90;
  CFStringRef theString2;
  char *__s1;
  CFDictionaryRef theDict;
  __int128 v94;
  __int128 v95;
  CMTime v96;
  int v97;
  CMTime time;
  void *values;
  double FigBaseObject;
  double v101;

  FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  v101 = v2;
  v4 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  values = *(void **)a1;
  Seconds = 0.0;
  if (*(_DWORD *)(v3 + 268) != 1)
  {
    if (!*(_BYTE *)(v3 + 40))
      goto LABEL_110;
    v6 = *(_QWORD *)(v3 + 48);
    if (!v6)
      goto LABEL_109;
    value[0] = 0;
    value[1] = 0;
    *(_QWORD *)&v90 = 0;
    FigCDSTriggerGetCurrentTime(v6, (CMTime *)value);
    *(_OWORD *)&time.value = *(_OWORD *)value;
    time.epoch = v90;
    Seconds = CMTimeGetSeconds(&time);
  }
  v97 = 0;
  FigCDSCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    goto LABEL_109;
  v8 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v8)
    goto LABEL_109;
  v9 = *(unsigned int (**)(const void *, int *))(v8 + 48);
  if (!v9 || v9(v4, &v97))
    goto LABEL_109;
  if (v97 != 5 || *(_DWORD *)(v3 + 268) != 3)
  {
    if (*(_QWORD *)(v3 + 560))
    {
      value[0] = 0;
      if (FigCDSCALayerOutputNodeCreate(value))
        goto LABEL_109;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 560), v4, value[0]);
      if (value[0])
        CFRelease(value[0]);
    }
    v15 = *(_DWORD *)(v3 + 268);
    if ((v15 & 0xFFFFFFFE) == 2)
    {
      FigCDSIntervalProtocolGetProtocolID();
      v16 = CMBaseObjectGetProtocolVTable();
      if (!v16)
        goto LABEL_109;
      v17 = *(_QWORD *)(v16 + 16);
      if (!v17)
        goto LABEL_109;
      v18 = *(unsigned int (**)(const void *, double *))(v17 + 8);
      if (!v18 || v18(v4, &FigBaseObject))
        goto LABEL_109;
      v19 = Seconds + (double)*(uint64_t *)(v3 + 88);
      if (FigBaseObject + v101 < v19 || FigBaseObject > v19 + (double)*(uint64_t *)(v3 + 96))
        goto LABEL_110;
      v15 = *(_DWORD *)(v3 + 268);
    }
    v20 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    v94 = *MEMORY[0x1E0C9D628];
    v95 = v20;
    v85 = v20;
    v86 = v94;
    if ((v15 | 2) == 3 && v97 != 3)
    {
      *(_QWORD *)&v94 = FCRGetVideoPresentationBounds(*(double *)(v3 + 624), *(double *)(v3 + 632), *(double *)(v3 + 592), *(double *)(v3 + 600), *(double *)(v3 + 608), *(double *)(v3 + 616));
      *((_QWORD *)&v94 + 1) = v25;
      *(_QWORD *)&v95 = v26;
      *((_QWORD *)&v95 + 1) = v27;
    }
    else
    {
      v21 = *(_QWORD *)(v3 + 248);
      FigCDSNodeProtocolGetProtocolID();
      v22 = CMBaseObjectGetProtocolVTable();
      if (!v22)
        goto LABEL_109;
      v23 = *(_QWORD *)(v22 + 16);
      if (!v23)
        goto LABEL_109;
      v24 = *(unsigned int (**)(uint64_t, __int128 *))(v23 + 104);
      if (!v24 || v24(v21, &v94))
        goto LABEL_109;
    }
    theDict = 0;
    FigCDSCaptionProtocolGetProtocolID();
    v28 = CMBaseObjectGetProtocolVTable();
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 16);
      if (v29)
      {
        v30 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v29 + 16);
        if (v30)
        {
          if (!v30(v4, &theDict))
          {
            v31 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("region"));
            if (v31)
            {
              v32 = v31;
              time.value = 0;
              v33 = *(_QWORD *)(v3 + 248);
              FigCDSNodeProtocolGetProtocolID();
              v34 = CMBaseObjectGetProtocolVTable();
              if (!v34)
                goto LABEL_109;
              v35 = *(_QWORD *)(v34 + 16);
              if (!v35)
                goto LABEL_109;
              v36 = *(unsigned int (**)(uint64_t, CMTime *))(v35 + 24);
              if (!v36 || v36(v33, &time))
                goto LABEL_109;
              if (CFArrayGetCount((CFArrayRef)time.value) >= 1)
              {
                v37 = 0;
                do
                {
                  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)time.value, v37);
                  __s1 = 0;
                  FigCDSBaseProtocolGetProtocolID();
                  v39 = CMBaseObjectGetProtocolVTable();
                  if (!v39)
                    goto LABEL_109;
                  v40 = *(_QWORD *)(v39 + 16);
                  if (!v40)
                    goto LABEL_109;
                  v41 = *(unsigned int (**)(const void *, char **))(v40 + 8);
                  if (!v41 || v41(ValueAtIndex, &__s1))
                    goto LABEL_109;
                  v42 = __s1;
                  if (!strcmp(__s1, "FigCDSStackLayoutRegion")
                    || !strcmp(v42, "FigCDSCellStackLayoutRegion")
                    || !strcmp(v42, "FigCDSiTTRegion")
                    || !strcmp(v42, "FigCDSSRTRegion")
                    || !strcmp(v42, "FigCDSFreeLayoutRegion"))
                  {
                    theString2 = 0;
                    FigCDSRegionProtocolGetProtocolID();
                    v43 = CMBaseObjectGetProtocolVTable();
                    if (!v43)
                      goto LABEL_109;
                    v44 = *(_QWORD *)(v43 + 16);
                    if (!v44)
                      goto LABEL_109;
                    v45 = *(unsigned int (**)(const void *, CFStringRef *))(v44 + 16);
                    if (!v45 || v45(ValueAtIndex, &theString2))
                      goto LABEL_109;
                    if (CFStringCompare(v32, theString2, 1uLL) == kCFCompareEqualTo)
                    {
                      *(_OWORD *)value = v86;
                      v90 = v85;
                      FigCDSNodeProtocolGetProtocolID();
                      v73 = CMBaseObjectGetProtocolVTable();
                      if (!v73)
                        goto LABEL_109;
                      v74 = *(_QWORD *)(v73 + 16);
                      if (!v74)
                        goto LABEL_109;
                      v75 = *(unsigned int (**)(const void *, void **))(v74 + 104);
                      if (!v75)
                        goto LABEL_109;
                      if (v75(ValueAtIndex, value))
                        goto LABEL_109;
                      v76 = value[0];
                      v77 = value[1];
                      v78 = v90;
                      FigCDSNodeProtocolGetProtocolID();
                      v79 = CMBaseObjectGetProtocolVTable();
                      if (!v79)
                        goto LABEL_109;
                      v80 = *(_QWORD *)(v79 + 16);
                      if (!v80)
                        goto LABEL_109;
                      v81 = *(unsigned int (**)(const void *, double, double, double, double))(v80 + 64);
                      if (!v81)
                        goto LABEL_109;
                      if (v81(v4, *(double *)&v76, *(double *)&v77, *(double *)&v78, *((double *)&v78 + 1)))
                        goto LABEL_109;
                      FigCDSNodeProtocolGetProtocolID();
                      v82 = CMBaseObjectGetProtocolVTable();
                      if (!v82)
                        goto LABEL_109;
                      v83 = *(_QWORD *)(v82 + 16);
                      if (!v83)
                        goto LABEL_109;
                      v84 = *(unsigned int (**)(const void *, const void *))(v83 + 8);
                      if (!v84 || v84(v4, ValueAtIndex))
                        goto LABEL_109;
                      v55 = *(const __CFDictionary **)(v3 + 560);
                      if (!v55)
                        break;
                      v56 = ValueAtIndex;
                      goto LABEL_76;
                    }
                  }
                }
                while (CFArrayGetCount((CFArrayRef)time.value) > ++v37);
              }
            }
            else
            {
              v46 = v94;
              v47 = v95;
              FigCDSNodeProtocolGetProtocolID();
              v48 = CMBaseObjectGetProtocolVTable();
              if (!v48)
                goto LABEL_109;
              v49 = *(_QWORD *)(v48 + 16);
              if (!v49)
                goto LABEL_109;
              v50 = *(unsigned int (**)(const void *, double, double, double, double))(v49 + 64);
              if (!v50)
                goto LABEL_109;
              if (v50(v4, *(double *)&v46, *((double *)&v46 + 1), *(double *)&v47, *((double *)&v47 + 1)))
                goto LABEL_109;
              v51 = *(_QWORD *)(v3 + 248);
              FigCDSNodeProtocolGetProtocolID();
              v52 = CMBaseObjectGetProtocolVTable();
              if (!v52)
                goto LABEL_109;
              v53 = *(_QWORD *)(v52 + 16);
              if (!v53)
                goto LABEL_109;
              v54 = *(unsigned int (**)(const void *, uint64_t))(v53 + 8);
              if (!v54 || v54(v4, v51))
                goto LABEL_109;
              v55 = *(const __CFDictionary **)(v3 + 560);
              if (v55)
              {
                v56 = *(const void **)(v3 + 248);
LABEL_76:
                v57 = CFDictionaryGetValue(v55, v56);
                v58 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 560), v4);
                if (v57)
                {
                  v59 = v58;
                  if (v58)
                  {
                    FigCDSOutputNodeProtocolGetProtocolID();
                    v60 = CMBaseObjectGetProtocolVTable();
                    if (!v60)
                      goto LABEL_109;
                    v61 = *(_QWORD *)(v60 + 16);
                    if (!v61)
                      goto LABEL_109;
                    v62 = *(unsigned int (**)(const void *, const void *))(v61 + 24);
                    if (!v62 || v62(v57, v59))
                      goto LABEL_109;
                  }
                }
              }
            }
            if (*(_DWORD *)(v3 + 268) == 1)
            {
              v63 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
              if (v63)
              {
                v64 = v63;
                updateNodeTree_0(v3, v63, MEMORY[0x1E0CA2E18]);
                CFRelease(v64);
                v65 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
                if (v65)
                {
                  v66 = v65;
                  *v65 = CFRetain((CFTypeRef)v3);
                  v66[1] = CFRetain(values);
                  renderCaptionDo_0(v66);
                }
                goto LABEL_110;
              }
            }
            else
            {
              v67 = *(_QWORD *)(v3 + 240);
              FigCDSParentIntervalProtocolGetProtocolID();
              v68 = CMBaseObjectGetProtocolVTable();
              if (v68)
              {
                v69 = *(_QWORD *)(v68 + 16);
                if (v69)
                {
                  v70 = *(unsigned int (**)(uint64_t, const void *))(v69 + 8);
                  if (v70)
                  {
                    if (!v70(v67, v4))
                    {
                      v71 = *(_QWORD *)(v3 + 48);
                      CMTimeMake(&v88, (uint64_t)(FigBaseObject * 1000.0), 1000);
                      if (!FigCDSTriggerScheduleEvent(v71, (uint64_t)v4, (__int128 *)&v88.value))
                      {
                        v72 = *(_QWORD *)(v3 + 48);
                        CMTimeMake(&v87, (uint64_t)((FigBaseObject + v101) * 1000.0), 1000);
                        if (!FigCDSTriggerScheduleEvent(v72, (uint64_t)v4, (__int128 *)&v87.value))
                        {
                          if (*(_QWORD *)(v3 + 72))
                            asyncPreflightRender(v3, v4);
                          goto LABEL_110;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_109:
    FigSignalErrorAt();
    goto LABEL_110;
  }
  value[0] = 0;
  value[1] = 0;
  v10 = *(_QWORD *)(v3 + 240);
  FigCDSIntervalProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (!v11)
    goto LABEL_109;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_109;
  v13 = *(unsigned int (**)(uint64_t, void **))(v12 + 8);
  if (!v13 || v13(v10, value))
    goto LABEL_109;
  time.value = 0;
  copyCaptionsByRange_0(*(_QWORD *)(v3 + 240), 0, (CFTypeRef *)&time, 0, *(double *)value, *(double *)&value[1], *(double *)value, *(double *)&value[1]);
  purgeCaptionCachesFromCaptionsTimeline_0(v3, (CFArrayRef)time.value);
  if (time.value)
    CFRelease((CFTypeRef)time.value);
  v14 = *(_QWORD *)(v3 + 48);
  CMTimeMake(&v96, (uint64_t)(Seconds * 1000.0), 1000);
  if (FigCDSTriggerScheduleEvent(v14, 0, (__int128 *)&v96.value))
    goto LABEL_109;
LABEL_110:
  if (values)
    CFRelease(values);
  if (v3)
    CFRelease((CFTypeRef)v3);
  free((void *)a1);
}

void onRegionInputDo_0(const void **a1)
{
  char *v2;
  const void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, const void *, char *);
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *, double, double, double, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, const void *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(const void *, uint64_t);
  const __CFDictionary *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(const void *, const void *);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(const void *, char *);
  uint64_t v35;
  uint64_t ProtocolVTable;
  uint64_t v37;
  void (*v38)(uint64_t, __int128 *);
  char v39;
  __int128 v40;
  __int128 v41;
  void *value;

  v3 = *a1;
  v2 = (char *)a1[1];
  if (*((_QWORD *)v2 + 70))
  {
    value = 0;
    if (FigCDSCALayerOutputNodeCreate(&value))
      goto LABEL_41;
    CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 70), v3, value);
    if (value)
      CFRelease(value);
  }
  v4 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v40 = *MEMORY[0x1E0C9D628];
  v41 = v4;
  if ((*((_DWORD *)v2 + 67) | 2) == 3)
  {
    *(_QWORD *)&v40 = FCRGetVideoPresentationBounds(*((double *)v2 + 78), *((double *)v2 + 79), *((double *)v2 + 74), *((double *)v2 + 75), *((double *)v2 + 76), *((double *)v2 + 77));
    *((_QWORD *)&v40 + 1) = v5;
    *(_QWORD *)&v41 = v6;
    *((_QWORD *)&v41 + 1) = v7;
  }
  else
  {
    v35 = *((_QWORD *)v2 + 31);
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v37 = *(_QWORD *)(ProtocolVTable + 16);
      if (v37)
      {
        v38 = *(void (**)(uint64_t, __int128 *))(v37 + 104);
        if (v38)
          v38(v35, &v40);
      }
    }
  }
  v39 = 0;
  v8 = *((_QWORD *)v2 + 31);
  FigCDSNodeProtocolGetProtocolID();
  v9 = CMBaseObjectGetProtocolVTable();
  if (!v9
    || (v10 = *(_QWORD *)(v9 + 16)) == 0
    || (v11 = *(void (**)(uint64_t, const void *, char *))(v10 + 32)) == 0
    || (v11(v8, v3, &v39), !v39))
  {
    v12 = v40;
    v13 = v41;
    FigCDSNodeProtocolGetProtocolID();
    v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = *(void (**)(const void *, double, double, double, double))(v15 + 64);
        if (v16)
          v16(v3, *(double *)&v12, *((double *)&v12 + 1), *(double *)&v13, *((double *)&v13 + 1));
      }
    }
    v17 = *((_QWORD *)v2 + 31);
    FigCDSNodeProtocolGetProtocolID();
    v18 = CMBaseObjectGetProtocolVTable();
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        v20 = *(void (**)(uint64_t, const void *))(v19 + 40);
        if (v20)
          v20(v17, v3);
      }
    }
    v21 = *((_QWORD *)v2 + 31);
    FigCDSNodeProtocolGetProtocolID();
    v22 = CMBaseObjectGetProtocolVTable();
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 16);
      if (v23)
      {
        v24 = *(void (**)(const void *, uint64_t))(v23 + 8);
        if (v24)
          v24(v3, v21);
      }
    }
    v25 = (const __CFDictionary *)*((_QWORD *)v2 + 70);
    if (!v25
      || (v26 = CFDictionaryGetValue(v25, *((const void **)v2 + 31)),
          v27 = CFDictionaryGetValue(*((CFDictionaryRef *)v2 + 70), v3),
          !v26)
      || (v28 = v27) == 0
      || (FigCDSOutputNodeProtocolGetProtocolID(), (v29 = CMBaseObjectGetProtocolVTable()) != 0)
      && (v30 = *(_QWORD *)(v29 + 16)) != 0
      && (v31 = *(unsigned int (**)(const void *, const void *))(v30 + 24)) != 0
      && !v31(v26, v28))
    {
      *((_QWORD *)v2 + 72) = 0;
      FigCDSNodeProtocolGetProtocolID();
      v32 = CMBaseObjectGetProtocolVTable();
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 16);
        if (v33)
        {
          v34 = *(void (**)(const void *, char *))(v33 + 272);
          if (v34)
            v34(v3, v2 + 288);
        }
      }
      goto LABEL_34;
    }
LABEL_41:
    FigSignalErrorAt();
    if (!v3)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_34:
  if (v3)
LABEL_35:
    CFRelease(v3);
LABEL_36:
  CFRelease(v2);
  free(a1);
}

void updateDisplayPortDoAsync_0(CFTypeRef *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void (*v9)(uint64_t, double, double, double, double);
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t);

  v2 = *((_QWORD *)*a1 + 8);
  if (v2)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v3)
      v3(v2);
    v4 = *((_QWORD *)*a1 + 8);
    v5 = *((double *)a1 + 1);
    v6 = *((double *)a1 + 2);
    v7 = *((double *)a1 + 3);
    v8 = *((double *)a1 + 4);
    v9 = *(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 32);
    if (v9)
      v9(v4, v5, v6, v7, v8);
    v10 = *((_QWORD *)*a1 + 8);
    v11 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v11)
      v11(v10);
    v12 = *((_QWORD *)*a1 + 8);
    v13 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v13)
      v13(v12);
    v14 = *((_QWORD *)*a1 + 8);
    v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v15)
      v15(v14);
    v16 = *((_QWORD *)*a1 + 8);
    v17 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v17)
      v17(v16);
  }
  CFRelease(*a1);
  free(a1);
}

uint64_t UpdateLayoutContext_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t (*v9)(uint64_t, double, double, double, double);
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, double, double, double, double);

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 640) = v2;
  if ((*(_DWORD *)(a1 + 268) | 2) == 3)
  {
    v3 = FigCaptionRendererAVFLayoutRegionSetLayoutContext(*(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 272), v2);
    if ((_DWORD)v3)
      goto LABEL_14;
  }
  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    return v4;
  v5 = *(double *)(a1 + 592);
  v6 = *(double *)(a1 + 600);
  v7 = *(double *)(a1 + 608);
  v8 = *(double *)(a1 + 616);
  v9 = *(uint64_t (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 48);
  if (!v9)
    goto LABEL_10;
  v3 = v9(v4, v5, v6, v7, v8);
  if ((_DWORD)v3)
  {
LABEL_14:
    v4 = v3;
    goto LABEL_11;
  }
  v10 = FCRGetVideoPresentationBounds(*(double *)(a1 + 624), *(double *)(a1 + 632), *(double *)(a1 + 592), *(double *)(a1 + 600), *(double *)(a1 + 608), *(double *)(a1 + 616));
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(uint64_t (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 56);
  if (!v18)
  {
LABEL_10:
    v4 = 4294954514;
LABEL_11:
    FigSignalErrorAt();
    return v4;
  }
  v4 = v18(v17, v10, v12, v14, v16);
  if ((_DWORD)v4)
    goto LABEL_11;
  return v4;
}

uint64_t FigMLBandwidthPredictorCreate(const void *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  _QWORD *v7;
  dispatch_queue_t v8;
  CFTypeRef v9;
  NSObject *v10;
  uint64_t v11;
  const void *v12;
  dispatch_source_t v13;
  NSObject *v14;
  dispatch_time_t v15;
  void *v16;
  uint64_t v17;
  objc_class *v18;
  uint64_t v19;
  _QWORD v21[5];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  uint64_t v27;

  v4 = (void *)MEMORY[0x19403137C]();
  FigGetUpTimeNanoseconds();
  if (!a2)
  {
    v17 = FigSignalErrorAt();
    goto LABEL_17;
  }
  FigNetworkPredictorGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
LABEL_24:
    v17 = v5;
    goto LABEL_17;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v17 = 4294948286;
    goto LABEL_17;
  }
  v7 = (_QWORD *)DerivedStorage;
  v8 = dispatch_queue_create("com.apple.coremedia.fmlbandwidthpredictor.state", 0);
  v7[1] = v8;
  if (!v8)
  {
LABEL_23:
    v5 = FigSignalErrorAt();
    goto LABEL_24;
  }
  if (a1)
  {
    v9 = CFRetain(a1);
    v10 = v7[1];
    v7[6] = v9;
    if (!v10)
    {
LABEL_21:
      v17 = FigSignalErrorAt();
      if ((_DWORD)v17)
        goto LABEL_17;
LABEL_13:
      v7[5] = 0;
      v22 = 0;
      v23 = &v22;
      v24 = 0x3052000000;
      v25 = __Block_byref_object_copy__6;
      v26 = __Block_byref_object_dispose__6;
      v18 = (objc_class *)getMLServiceClass_softClass;
      v27 = getMLServiceClass_softClass;
      if (!getMLServiceClass_softClass)
      {
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = __getMLServiceClass_block_invoke;
        v21[3] = &unk_1E2F91F58;
        v21[4] = &v22;
        __getMLServiceClass_block_invoke((uint64_t)v21);
        v18 = (objc_class *)v23[5];
      }
      _Block_object_dispose(&v22, 8);
      v7[9] = objc_msgSend([v18 alloc], "initWithNameOfModel:", CFSTR("HLSMLBandwidthPredictor"));
      v19 = FigSimpleMutexCreate();
      v7[3] = v19;
      if (v19)
      {
        v17 = 0;
        v7[4] = 0;
        v7[15] = 0;
        *a2 = 0;
        goto LABEL_17;
      }
      goto LABEL_23;
    }
  }
  else
  {
    v10 = v8;
    v7[6] = 0;
  }
  v11 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v11)
    goto LABEL_21;
  v12 = (const void *)v11;
  v13 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v10);
  if (v13)
  {
    v14 = v13;
    v15 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v14, v15, 0x2540BE400uLL, 0x3B9ACA00uLL);
    v16 = (void *)CFRetain(v12);
    dispatch_set_context(v14, v16);
    dispatch_source_set_event_handler_f(v14, (dispatch_function_t)fmlbp_timerCallback);
    dispatch_source_set_cancel_handler_f(v14, (dispatch_function_t)fmlbp_timerCancellationCallback);
    dispatch_resume(v14);
    v17 = 0;
    *v7 = v14;
  }
  else
  {
    v17 = FigSignalErrorAt();
  }
  CFRelease(v12);
  if (!(_DWORD)v17)
    goto LABEL_13;
LABEL_17:
  objc_autoreleasePoolPop(v4);
  return v17;
}

void sub_192CA9E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fmlbp_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fmlbp_stopTraining();
  v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 88);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 80);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 96);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 120);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(DerivedStorage + 32);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  FigSimpleMutexDestroy();
  v8 = *(NSObject **)(DerivedStorage + 8);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v9 = (void *)MEMORY[0x19403137C]();

  objc_autoreleasePoolPop(v9);
}

uint64_t fmlbp_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  _QWORD block[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fmlbp_setProperty_block_invoke;
  block[3] = &unk_1E2F9A0C0;
  block[6] = a3;
  block[7] = a1;
  block[4] = &v11;
  block[5] = a2;
  block[8] = DerivedStorage;
  dispatch_sync(v7, block);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_192CAA004(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void fmlbp_stopTraining()
{
  dispatch_source_t *DerivedStorage;

  DerivedStorage = (dispatch_source_t *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    dispatch_source_cancel(*DerivedStorage);
    if (*DerivedStorage)
    {
      dispatch_release(*DerivedStorage);
      *DerivedStorage = 0;
    }
  }
}

void __fmlbp_setProperty_block_invoke(uint64_t a1)
{
  const void *v2;
  CFTypeID v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  CFTypeID v9;
  uint64_t v10;
  const void *v11;
  CFTypeID v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  const void *v16;

  if (!CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("NetworkPredictorProperty_EnableMLTraining")))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("NetworkPredictorProperty_CMSessionID")))
    {
      v2 = *(const void **)(a1 + 48);
      if (v2)
      {
        v3 = CFGetTypeID(v2);
        if (v3 == CFStringGetTypeID())
        {
          v4 = *(_QWORD *)(a1 + 64);
          v5 = *(const void **)(v4 + 80);
          v6 = *(const void **)(a1 + 48);
          *(_QWORD *)(v4 + 80) = v6;
          if (!v6)
          {
LABEL_9:
            if (!v5)
              return;
            v7 = v5;
            goto LABEL_11;
          }
LABEL_8:
          CFRetain(v6);
          goto LABEL_9;
        }
      }
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("NetworkPredictorProperty_ClientBundleIdentifier")))
    {
      v8 = *(const void **)(a1 + 48);
      if (v8)
      {
        v9 = CFGetTypeID(v8);
        if (v9 == CFStringGetTypeID())
        {
          v10 = *(_QWORD *)(a1 + 64);
          v5 = *(const void **)(v10 + 88);
          v6 = *(const void **)(a1 + 48);
          *(_QWORD *)(v10 + 88) = v6;
          if (!v6)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("NetworkPredictorProperty_InterfaceType")))
    {
      v11 = *(const void **)(a1 + 48);
      if (v11)
      {
        v12 = CFGetTypeID(v11);
        if (v12 == CFNumberGetTypeID())
        {
          CFNumberGetValue(*(CFNumberRef *)(a1 + 48), kCFNumberIntType, (void *)(*(_QWORD *)(a1 + 64) + 104));
          return;
        }
      }
    }
    else
    {
      if (CFEqual(*(CFTypeRef *)(a1 + 40), (CFTypeRef)*MEMORY[0x1E0CA4CF0]))
      {
        v13 = *(_QWORD *)(a1 + 64);
        v5 = *(const void **)(v13 + 96);
        v6 = *(const void **)(a1 + 48);
        *(_QWORD *)(v13 + 96) = v6;
        if (!v6)
          goto LABEL_9;
        goto LABEL_8;
      }
      if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("NetworkPredictorProperty_ReportingAgent")))
      {
        v14 = *(const void **)(a1 + 48);
        if (v14)
        {
          v15 = *(_QWORD *)(a1 + 64);
          v16 = *(const void **)(v15 + 120);
          *(_QWORD *)(v15 + 120) = v14;
          CFRetain(v14);
          if (!v16)
            return;
          v7 = v16;
LABEL_11:
          CFRelease(v7);
          return;
        }
      }
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
    return;
  }
  if (*(_QWORD *)(a1 + 48) != *MEMORY[0x1E0C9AE50])
    fmlbp_stopTraining();
}

uint64_t fmlbp_makePrediction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const void *MutableCopy;
  uint64_t v12;
  void *v13;
  void *v14;
  double v15;
  uint64_t v16;
  double v17;
  CFTypeRef cf;

  v6 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_25;
  }
  v8 = DerivedStorage;
  cf = 0;
  v9 = *(_DWORD *)(DerivedStorage + 104);
  if (v9 != 3)
  {
    if (v9 != 5)
    {
      MutableCopy = 0;
      goto LABEL_14;
    }
    v10 = FigNetworkWirelessReportingInterfaceCopyCellStats(&cf);
    if (!(_DWORD)v10)
      goto LABEL_5;
LABEL_12:
    v12 = v10;
    MutableCopy = 0;
    goto LABEL_7;
  }
  v10 = FigNetworkWirelessReportingInterfaceCopyWifiStats(&cf);
  if ((_DWORD)v10)
    goto LABEL_12;
LABEL_5:
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    FigCFDictionarySetInt();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    v12 = 0;
  }
  else
  {
    v12 = 4294954510;
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
  if ((_DWORD)v12)
  {
LABEL_18:
    if (!MutableCopy)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_14:
  if (*(_BYTE *)(a3 + 176))
  {
    v13 = (void *)MEMORY[0x19403137C]();
    FigGetUpTimeNanoseconds();
    v14 = (void *)objc_msgSend(*(id *)(v8 + 72), "getPredictionDictionaryWithInputFeatures:", MutableCopy);
    objc_msgSend((id)objc_msgSend(v14, "objectForKey:", CFSTR("predVal")), "doubleValue");
    *a4 = (uint64_t)v15;
    objc_msgSend((id)objc_msgSend(v14, "objectForKey:", CFSTR("predStdDev")), "doubleValue");
    a4[1] = v16;
    *(double *)(v8 + 40) = (double)*a4;
    objc_autoreleasePoolPop(v13);
    if (*a4 >= 1)
      v12 = 0;
    else
      v12 = 4294948281;
    goto LABEL_18;
  }
  FigGetUpTimeNanoseconds();
  objc_msgSend(*(id *)(v8 + 72), "getPredictionWithInputFeatures:", MutableCopy);
  *(double *)(v8 + 40) = v17;
  if (v17 >= 2.22044605e-16)
    v12 = 0;
  else
    v12 = 4294948281;
  *a4 = (uint64_t)v17;
  if (MutableCopy)
LABEL_24:
    CFRelease(MutableCopy);
LABEL_25:
  objc_autoreleasePoolPop(v6);
  return v12;
}

void fmlbp_timerCallback()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;
  uint64_t UpTimeNanoseconds;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void (*v8)(CFTypeRef, uint64_t, _QWORD *, __int128 *);
  const void *MutableCopy;
  const void *v10;
  CFTypeRef v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  CFTypeRef v30;
  CFTypeRef cf;
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v0)
  {
    FigSignalErrorAt();
    return;
  }
  v1 = (const void *)v0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v30 = 0;
  cf = 0;
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (!*(_QWORD *)(DerivedStorage + 96))
  {
    v11 = 0;
    MutableCopy = 0;
    goto LABEL_16;
  }
  v4 = UpTimeNanoseconds;
  v5 = *(_DWORD *)(DerivedStorage + 104);
  if (v5 == 5)
  {
    v6 = FigNetworkWirelessReportingInterfaceCopyCellStats(&cf);
    if (v6)
    {
LABEL_29:
      LODWORD(v12) = v6;
      v11 = 0;
      MutableCopy = 0;
      goto LABEL_17;
    }
  }
  else if (v5 == 3)
  {
    v6 = FigNetworkWirelessReportingInterfaceCopyWifiStats(&cf);
    if (v6)
      goto LABEL_29;
  }
  v6 = FigNetworkHistoryCopySharedPredictor();
  if (v6)
    goto LABEL_29;
  v7 = *(_QWORD *)(DerivedStorage + 112);
  v8 = *(void (**)(CFTypeRef, uint64_t, _QWORD *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v8)
  {
    v32[0] = 0;
    v32[1] = 0;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v32[2] = v4 - v7;
    v42 = 9;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v8(v30, v4, v32, &v24);
  }
  *(_QWORD *)(DerivedStorage + 112) = v4;
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    LODWORD(v12) = FigSignalErrorAt();
    v11 = 0;
    goto LABEL_17;
  }
  FigCFDictionarySetDouble();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt();
  v10 = *(const void **)(DerivedStorage + 16);
  if (!v10)
  {
    *(_QWORD *)(DerivedStorage + 16) = MutableCopy;
    CFRetain(MutableCopy);
    v11 = 0;
    goto LABEL_16;
  }
  v11 = CFRetain(v10);
  v12 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = MutableCopy;
  CFRetain(MutableCopy);
  if (v12)
  {
    CFRelease(v12);
LABEL_16:
    LODWORD(v12) = 0;
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v30)
    CFRelease(v30);
  if (!(_DWORD)v12)
  {
    v13 = CMBaseObjectGetDerivedStorage();
    if (!v11)
    {
      v23 = v1;
      goto LABEL_28;
    }
    v21 = v13;
    v22 = (void *)MEMORY[0x19403137C](v13, v14, v15, v16, v17, v18, v19, v20, v24, *((_QWORD *)&v24 + 1), v25);
    objc_msgSend(*(id *)(v21 + 72), "writeWithData:", v11);
    objc_autoreleasePoolPop(v22);
    CFRelease(v1);
LABEL_26:
    v23 = v11;
LABEL_28:
    CFRelease(v23);
    return;
  }
  CFRelease(v1);
  if (v11)
    goto LABEL_26;
}

void fmlbp_timerCancellationCallback(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class __getMLServiceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!MediaMLServicesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E2F9A0E0;
    v5 = 0;
    MediaMLServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MediaMLServicesLibraryCore_frameworkLibrary)
    __getMLServiceClass_block_invoke_cold_1(&v3);
  result = objc_getClass("MLService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getMLServiceClass_block_invoke_cold_2();
  getMLServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigCaptionRendererOutputNodeCreate(uint64_t a1, _QWORD *a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  _QWORD *DerivedStorage;
  _QWORD *v7;
  uint64_t v8;

  *a2 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCaptionRendererOutputNodeGetClassID_sRegisterFigCaptionRendererOutputNodeBaseTypeOnce, RegisterFigCaptionRendererOutputNodeBaseType);
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v7 = DerivedStorage;
    if (a1)
      v8 = a1;
    else
      v8 = 0;
    *DerivedStorage = v8;
    DerivedStorage[1] = 0;
    DerivedStorage[2] = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v7 + 3) = _Q0;
    *(_OWORD *)(v7 + 5) = *MEMORY[0x1E0C9D820];
    v7[10] = 0;
    v7[7] = 0;
    v7[8] = 0;
    *((_BYTE *)v7 + 72) = 0;
    *a2 = 0;
  }
  return v5;
}

void FigCaptionRendererOutputNodeFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRelease(*(CFTypeRef *)(DerivedStorage + 16));
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 80));
}

__CFString *FigCaptionRendererOutputNodeCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererOutputNode: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererOutputNode <FigCaptionRendererOutputNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetParentNode(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  v5 = DerivedStorage[1];
  if (v5)
  {
    v6 = *DerivedStorage;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v8 = *(_QWORD *)(ProtocolVTable + 16);
      if (v8)
      {
        v9 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
        if (v9)
          v9(v5, v6);
      }
    }
  }
  if (a2)
  {
    v10 = *v4;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = *(void (**)(uint64_t, uint64_t))(v12 + 24);
        if (v13)
          v13(a2, v10);
      }
    }
  }
  v4[1] = a2;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_AddChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  uint64_t v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *, uint64_t);
  CFRange v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFArray **)(DerivedStorage + 16);
  v10.length = CFArrayGetCount(v4);
  v10.location = 0;
  if (CFArrayGetFirstIndexOfValue(v4, v10, a2) == -1)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 16), a2);
    v6 = *(_QWORD *)DerivedStorage;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v8 = *(_QWORD *)(ProtocolVTable + 16);
      if (v8)
      {
        v9 = *(void (**)(const void *, uint64_t))(v8 + 16);
        if (v9)
          v9(a2, v6);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  uint64_t ProtocolVTable;
  uint64_t v7;
  void (*v8)(const void *, _QWORD);
  CFRange v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFArray **)(DerivedStorage + 16);
  v10.length = CFArrayGetCount(v4);
  v10.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v10, a2);
  if (FirstIndexOfValue != -1)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 16), FirstIndexOfValue);
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v7 = *(_QWORD *)(ProtocolVTable + 16);
      if (v7)
      {
        v8 = *(void (**)(const void *, _QWORD))(v7 + 16);
        if (v8)
          v8(a2, 0);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetChildNodes(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_HasChildNode(uint64_t a1, const void *a2, BOOL *a3)
{
  const __CFArray *v5;
  CFRange v7;

  v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 16);
  v7.length = CFArrayGetCount(v5);
  v7.location = 0;
  *a3 = CFArrayGetFirstIndexOfValue(v5, v7, a2) != -1;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_RemovelAllChildNodes()
{
  uint64_t DerivedStorage;
  CFIndex v1;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v4;
  void (*v5)(const void *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)) >= 1)
  {
    v1 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v4 = *(_QWORD *)(ProtocolVTable + 16);
        if (v4)
        {
          v5 = *(void (**)(const void *, _QWORD))(v4 + 16);
          if (v5)
            v5(ValueAtIndex, 0);
        }
      }
      ++v1;
    }
    while (v1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)));
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetPosition(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetPosition(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetSize(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetSize(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetClipToBounds(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 72);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetClipToBounds(uint64_t a1, char a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 72) = a2;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetContent(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetContent(uint64_t a1, CGImage *a2)
{
  uint64_t DerivedStorage;
  CGImage *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(CGImage **)(DerivedStorage + 80);
  *(_QWORD *)(DerivedStorage + 80) = CGImageRetain(a2);
  CGImageRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_BeginScene()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_EndScene()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetCornerRadius(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetCornerRadius(double a1)
{
  *(double *)(CMBaseObjectGetDerivedStorage() + 56) = a1;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetWindowOpacity(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetWindowOpacity(double a1)
{
  *(double *)(CMBaseObjectGetDerivedStorage() + 64) = a1;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_AddAnimation()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetOptions()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetSeparated()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_DumpInfo()
{
  uint64_t DerivedStorage;
  CFIndex v1;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v4;
  void (*v5)(const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)) >= 1)
  {
    v1 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v4 = *(_QWORD *)(ProtocolVTable + 16);
        if (v4)
        {
          v5 = *(void (**)(const void *))(v4 + 200);
          if (v5)
            v5(ValueAtIndex);
        }
      }
      ++v1;
    }
    while (v1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)));
  }
  return 0;
}

uint64_t RegisterFigCaptionRendererOutputNodeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererOutputNodeBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererOutputNode]"));
}

uint64_t FigCaptionRendererCALayerOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  if (a2 && a3 && a4 && a8)
  {
    *a8 = 0;
    FigCaptionRendererOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererCALayerOutputGetDisplayScale()
{
  void *v0;
  float v1;

  v0 = *(void **)CMBaseObjectGetDerivedStorage();
  if (!v0)
    return 1;
  objc_msgSend(v0, "getDisplayScale");
  return (int)v1;
}

void FigCaptionRendererCALayerOutput_Finalize()
{
  uint64_t v0;
  _QWORD block[5];

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutput_Finalize_block_invoke;
  block[3] = &unk_1E2F88548;
  block[4] = v0;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

__CFString *FigCaptionRendererCALayerOutput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererCALayerOutput %p>"), a1);
  return Mutable;
}

uint64_t transactionBegin_1()
{
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  return 0;
}

uint64_t transactionFlush_1()
{
  objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
  return 0;
}

uint64_t transactionCommit_1()
{
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  return 0;
}

uint64_t setNeedsDisplayInRect_1()
{
  objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "compose");
  return 0;
}

uint64_t getBounds_1()
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "bounds");
}

uint64_t setBounds_1(const void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id *DerivedStorage;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  _QWORD v22[10];
  CGRect v23;
  CGRect v24;

  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  objc_msgSend(*DerivedStorage, "position");
  v12 = v11;
  objc_msgSend(*DerivedStorage, "bounds");
  v14 = v12 - v13 * 0.5;
  objc_msgSend(*DerivedStorage, "position");
  v16 = v15;
  objc_msgSend(*DerivedStorage, "bounds");
  v18 = v16 - v17 * 0.5;
  objc_msgSend(*DerivedStorage, "bounds");
  v20 = v19;
  objc_msgSend(*DerivedStorage, "bounds");
  v23.origin.x = v14;
  v23.origin.y = v18;
  v23.size.width = v20;
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  if (!CGRectEqualToRect(v23, v24))
  {
    if (a1)
      CFRetain(a1);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __setBounds_block_invoke;
    v22[3] = &__block_descriptor_80_e5_v8__0l;
    v22[4] = DerivedStorage;
    *(CGFloat *)&v22[5] = a2;
    *(CGFloat *)&v22[6] = a3;
    *(CGFloat *)&v22[7] = a4;
    *(CGFloat *)&v22[8] = a5;
    v22[9] = a1;
    dispatch_async(MEMORY[0x1E0C80D38], v22);
  }
  return 0;
}

uint64_t setVideoBounds_1(double a1, double a2, double a3, double a4)
{
  objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "setVideoBounds:", a1, a2, a3, a4);
  return 0;
}

int clear_1(void)
{
  double v0;
  double v1;
  double v2;
  double v3;

  objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "clear:", v0, v1, v2, v3);
  return 0;
}

void __setBounds_block_invoke(uint64_t a1)
{
  const void *v2;

  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  objc_msgSend(**(id **)(a1 + 32), "setBounds:", 0.0, 0.0, *(double *)(a1 + 56), *(double *)(a1 + 64));
  objc_msgSend(**(id **)(a1 + 32), "setPosition:", *(double *)(a1 + 56) * 0.5, *(double *)(a1 + 64) * 0.5);
  objc_msgSend(**(id **)(a1 + 32), "setNeedsLayout");
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  v2 = *(const void **)(a1 + 72);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMPEG2SampleGeneratorPushFrame(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t))(a1 + 48);
  if (!v5)
    return 4294954514;
  v9 = *a3;
  v10 = *((_QWORD *)a3 + 2);
  v7 = *a4;
  v8 = *((_QWORD *)a4 + 2);
  return v5(a1, a2, &v9, &v7, a5);
}

uint64_t FigMPEG2SampleGeneratorFlush(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(a1 + 56);
  if (v1)
    return v1();
  else
    return 4294954514;
}

uint64_t FigMPEG2SampleGeneratorResync(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(result + 64);
  if (v1)
    return v1();
  return result;
}

void FigMPEG2SampleGeneratorDestroy(uint64_t a1)
{
  void (*v2)(uint64_t);
  const void *v3;

  if (a1)
  {
    v2 = *(void (**)(uint64_t))(a1 + 72);
    if (v2)
      v2(a1);
    FigFormatDescriptionRelease();
    *(_QWORD *)(a1 + 40) = 0;
    v3 = *(const void **)(a1 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 8) = 0;
    }
    free(*(void **)(a1 + 104));
    free((void *)a1);
  }
}

uint64_t FigMPEG2SampleGeneratorSetMaxFramesPerSampleBuffer(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 96) = a2;
  return result;
}

uint64_t FigMPEG2SampleGeneratorGetTrackBitRate(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294954326;
  v1 = *(uint64_t (**)(void))(a1 + 80);
  if (v1)
    return v1();
  else
    return 4294954318;
}

uint64_t FigMPEG2SampleGeneratorSetAudioConfiguration(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  void *v7;

  result = 4294954326;
  if (a1 && a2 && a3)
  {
    free(*(void **)(a1 + 104));
    v7 = malloc_type_malloc(a3, 0x7A807116uLL);
    *(_QWORD *)(a1 + 104) = v7;
    if (v7)
    {
      memcpy(v7, a2, a3);
      result = 0;
      *(_QWORD *)(a1 + 112) = a3;
    }
    else
    {
      return 4294954510;
    }
  }
  return result;
}

uint64_t FigMPEG2SampleGeneratorCreate(CFAllocatorRef Default, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t *a7)
{
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t SampleGeneratorForH264;

  if (a2 && a3)
  {
    v14 = 4294954321;
    if (a5 > 1701143346)
    {
      if (a5 <= 1835103587)
      {
        if (a5 == 1701143347 || a5 == 1748121140)
          goto LABEL_23;
        v15 = 1819304813;
      }
      else if (a5 > 1886612591)
      {
        if (a5 == 2053207651)
          goto LABEL_23;
        v15 = 1886612592;
      }
      else
      {
        if (a5 == 1835103588)
          goto LABEL_23;
        v15 = 1836476772;
      }
    }
    else if (a5 <= 1700880738)
    {
      if (a5 == 1633891104 || a5 == 1633973363)
        goto LABEL_23;
      v15 = 1635017571;
    }
    else if (a5 > 1700886114)
    {
      if (a5 == 1700886115)
        goto LABEL_23;
      v15 = 1700998451;
    }
    else
    {
      if (a5 == 1700880739)
        goto LABEL_23;
      v15 = 1700881203;
    }
    if (a5 != v15)
      return v14;
LABEL_23:
    *a7 = 0;
    v16 = malloc_type_calloc(1uLL, 0x78uLL, 0x10F0040528BEE7EuLL);
    if (!v16)
      return 12;
    v17 = (uint64_t)v16;
    if (!Default)
      Default = CFAllocatorGetDefault();
    *(_QWORD *)(v17 + 8) = CFRetain(Default);
    *(_QWORD *)(v17 + 16) = a2;
    *(_QWORD *)(v17 + 24) = a3;
    *(_QWORD *)(v17 + 32) = a4;
    *(_DWORD *)v17 = a5;
    *(_DWORD *)(v17 + 4) = a6;
    if (a5 <= 1701143346)
    {
      if (a5 > 1700880738)
      {
        if (a5 <= 1700886114)
        {
          if (a5 != 1700880739)
          {
            v18 = 1700881203;
            goto LABEL_46;
          }
          goto LABEL_51;
        }
        if (a5 != 1700886115)
        {
          v18 = 1700998451;
LABEL_46:
          if (a5 != v18)
            goto LABEL_56;
          goto LABEL_47;
        }
LABEL_50:
        SampleGeneratorForH264 = CreateSampleGeneratorForH264((_QWORD *)v17);
        goto LABEL_54;
      }
      if (a5 != 1633891104)
      {
        if (a5 != 1633973363)
        {
          if (a5 != 1635017571)
            goto LABEL_56;
          SampleGeneratorForH264 = CreateSampleGeneratorForClosedCaptions((_QWORD *)v17);
          goto LABEL_54;
        }
LABEL_51:
        SampleGeneratorForH264 = CreateSampleGeneratorForADTS((_QWORD *)v17);
        goto LABEL_54;
      }
LABEL_47:
      SampleGeneratorForH264 = CreateSampleGeneratorForDolby((_QWORD *)v17);
      goto LABEL_54;
    }
    if (a5 <= 1835103587)
    {
      if (a5 == 1701143347)
        goto LABEL_47;
      if (a5 == 1748121140)
        goto LABEL_50;
      if (a5 != 1819304813)
        goto LABEL_56;
    }
    else
    {
      if (a5 <= 1886612591)
      {
        if (a5 == 1835103588)
        {
          SampleGeneratorForH264 = CreateSampleGeneratorForMP3((_QWORD *)v17);
        }
        else
        {
          if (a5 != 1836476772)
            goto LABEL_56;
          SampleGeneratorForH264 = CreateSampleGeneratorForMpeg2Video((_QWORD *)v17);
        }
LABEL_54:
        v14 = SampleGeneratorForH264;
        if ((_DWORD)SampleGeneratorForH264)
        {
          FigMPEG2SampleGeneratorDestroy(v17);
          return v14;
        }
LABEL_56:
        v14 = 0;
        *a7 = v17;
        return v14;
      }
      if (a5 != 1886612592)
      {
        if (a5 != 2053207651)
          goto LABEL_56;
        goto LABEL_50;
      }
    }
    SampleGeneratorForH264 = CreateSampleGeneratorForLPCM((_QWORD *)v17);
    goto LABEL_54;
  }
  return FigSignalErrorAt();
}

uint64_t MPEG2SampleGeneratorCreateFormatDescriptionFromAudioConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, const AudioChannelLayout *a4, UInt32 a5, AudioFormatID *a6)
{
  const AudioChannelLayout *v8;
  AudioChannelLayoutTag mChannelLayoutTag;
  uint64_t PropertyInfo;
  CFIndex v12;
  AudioFormatID mFormatID;
  unsigned __int16 v14;
  uint64_t v15;
  int v16;
  __CFString *inited;
  __CFString *v18;
  void *v19;
  AudioFormatID v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t Property;
  CFDictionaryRef v25;
  const __CFDictionary *v26;
  const void *v27;
  uint64_t v28;
  UInt32 ioPropertyDataSize;
  AudioChannelLayoutTag v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  UInt32 outPropertyDataSize[2];
  AudioStreamBasicDescription outPropertyData;
  void *values;
  void *keys[2];

  v8 = a4;
  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  values = 0;
  memset(&outPropertyData, 0, sizeof(outPropertyData));
  *(_QWORD *)outPropertyDataSize = 0;
  v33 = 0;
  v32 = 0;
  v35 = 0;
  v34 = 0;
  keys[0] = 0;
  mChannelLayoutTag = a4->mChannelLayoutTag;
  ioPropertyDataSize = 0;
  v31 = mChannelLayoutTag;
  PropertyInfo = AudioFormatGetPropertyInfo(0x78686173u, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), &outPropertyDataSize[1]);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  if (outPropertyDataSize[1] != 40)
    return 4294954325;
  PropertyInfo = AudioFormatGetProperty(0x78686173u, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), &outPropertyDataSize[1], &outPropertyData);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  v12 = 0;
  mFormatID = outPropertyData.mFormatID;
  if ((int)outPropertyData.mFormatID > 2053202738)
  {
    if (outPropertyData.mFormatID - 2053202739 <= 0x3D
      && ((1 << (LOBYTE(outPropertyData.mFormatID) - 51)) & 0x2020000000000001) != 0
      || outPropertyData.mFormatID == 2053464883)
    {
      goto LABEL_17;
    }
    v14 = 30307;
LABEL_15:
    v16 = v14 | 0x7A610000;
    goto LABEL_16;
  }
  if ((int)outPropertyData.mFormatID > 1902212706)
  {
    if (outPropertyData.mFormatID == 1902212707)
      goto LABEL_17;
    v14 = 24931;
    goto LABEL_15;
  }
  if (outPropertyData.mFormatID == 1667331683)
    goto LABEL_17;
  v16 = 1700886115;
LABEL_16:
  if (outPropertyData.mFormatID != v16)
  {
    v18 = 0;
    goto LABEL_19;
  }
LABEL_17:
  inited = (__CFString *)PKDCreateTransportStreamEncryptionInitData(1936684398, outPropertyData.mFormatID);
  if (!inited)
    return 4294954510;
  v18 = inited;
  v19 = (void *)*MEMORY[0x1E0CA4A78];
  values = inited;
  keys[0] = v19;
  mFormatID = outPropertyData.mFormatID;
  v12 = 1;
LABEL_19:
  v20 = 1633889587;
  if (*(_DWORD *)a1 == 1633891104 && mFormatID == 2053202739
    || (v20 = 1700998451, *(_DWORD *)a1 == 1700998451) && mFormatID == 2053464883)
  {
    outPropertyData.mFormatID = v20;
  }
  v21 = AudioFormatGetPropertyInfo(0x78686D63u, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), outPropertyDataSize);
  if ((_DWORD)v21)
  {
    v15 = v21;
    goto LABEL_38;
  }
  v22 = malloc_type_malloc(outPropertyDataSize[0], 0x3CD6E4C6uLL);
  if (!v22)
  {
    v15 = 4294954510;
    goto LABEL_38;
  }
  v23 = v22;
  Property = AudioFormatGetProperty(0x78686D63u, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), outPropertyDataSize, v22);
  if ((_DWORD)Property)
    goto LABEL_29;
  if (outPropertyData.mChannelsPerFrame < 3)
  {
    ioPropertyDataSize = a5;
    goto LABEL_31;
  }
  ioPropertyDataSize = 32;
  v8 = (const AudioChannelLayout *)&v31;
  Property = AudioFormatGetProperty(0x7868636Cu, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), &ioPropertyDataSize, &v31);
  if (!(_DWORD)Property)
  {
LABEL_31:
    v25 = CFDictionaryCreate(*(CFAllocatorRef *)(a1 + 8), (const void **)keys, (const void **)&values, v12, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    if (v25)
    {
      v26 = v25;
      v27 = *(const void **)(a1 + 40);
      if (v27)
      {
        CFRelease(v27);
        *(_QWORD *)(a1 + 40) = 0;
      }
      v28 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &outPropertyData, ioPropertyDataSize, v8, outPropertyDataSize[0], v23, v26, (CMAudioFormatDescriptionRef *)(a1 + 40));
      v15 = v28;
      if (a6 && !(_DWORD)v28)
        *a6 = outPropertyData.mFormatID;
      free(v23);
      CFRelease(v26);
      goto LABEL_38;
    }
    v15 = 4294954510;
    goto LABEL_46;
  }
LABEL_29:
  v15 = Property;
LABEL_46:
  free(v23);
LABEL_38:
  if (v18)
    CFRelease(v18);
  return v15;
}

uint64_t CreateSampleGeneratorForADTS(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 0xBA8uLL, 0x1020040313AC271uLL);
  if (!v2)
    return 12;
  v3 = v2;
  result = 0;
  a1[6] = ADTSPushForType;
  a1[7] = ADTSFlushForType;
  a1[8] = ADTSResyncForType;
  a1[9] = ADTSDestroyForType;
  a1[10] = ADTSReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t ADTSPushForType(uint64_t a1, OpaqueCMBlockBuffer *a2, __int128 *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t appended;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t (*v17)(uint64_t, _QWORD, _QWORD);
  size_t DataLength;
  size_t v19;
  OpaqueCMBlockBuffer *v20;
  size_t v21;
  uint64_t Empty;
  __int128 v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  AudioChannelLayout v32;
  size_t offsetToData;
  AudioChannelLayoutTag v34;
  uint64_t v35;

  v11 = *(_QWORD *)(a1 + 88);
  v35 = 0;
  v34 = 0;
  offsetToData = 7;
  if (!*(_QWORD *)(a1 + 40) && *(_DWORD *)a1 != 1700880739)
    goto LABEL_25;
  if ((a5 & 1) != 0)
  {
    appended = ADTSFlushForType(a1);
    if ((_DWORD)appended)
      goto LABEL_36;
  }
  appended = ADTSGetHeaderInfo(a2, (_DWORD *)&v35 + 1, &v35, &v34, (uint64_t *)&offsetToData);
  if ((_DWORD)appended)
    goto LABEL_36;
  if (!(_DWORD)v35)
  {
    v30 = 0;
    goto LABEL_38;
  }
  if (*(_DWORD *)a1 != 1700880739)
    goto LABEL_21;
  if (!*(_QWORD *)(a1 + 40))
  {
    memset(&v32.mChannelBitmap, 0, 28);
    v32.mChannelLayoutTag = v34;
    if (!*(_QWORD *)(a1 + 104))
      return FigSignalErrorAt();
    appended = MPEG2SampleGeneratorCreateFormatDescriptionFromAudioConfiguration(a1, v13, v14, &v32, 0x20u, (AudioFormatID *)(v11 + 12));
    if ((_DWORD)appended)
      goto LABEL_36;
    v15 = v35 >> 11;
    if (v35 >> 11 > 0x18)
      v15 = 24;
    v16 = *(_DWORD *)(v11 + 12) == 1633772396 ? 1 : v15;
    *(_DWORD *)v11 = v35;
    *(_DWORD *)(v11 + 4) = v16;
    *(_DWORD *)(v11 + 8) = v34;
    v17 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16);
    if (v17)
    {
      appended = v17(a1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
      if ((_DWORD)appended)
        goto LABEL_36;
    }
    if (*(_DWORD *)a1 != 1700880739)
    {
LABEL_21:
      if (HIDWORD(v35) != *(_DWORD *)(v11 + 12)
        || *(unsigned __int16 *)(v11 + 8) != (unsigned __int16)v34
        || (_DWORD)v35 != *(_DWORD *)v11)
      {
        ADTSFlushForType(a1);
        FigFormatDescriptionRelease();
        *(_QWORD *)(a1 + 40) = 0;
LABEL_25:
        *(_OWORD *)&v32.mChannelLayoutTag = *a3;
        *(_QWORD *)&v32.mChannelDescriptions[0].mChannelFlags = *((_QWORD *)a3 + 2);
        return ADTSAddFrameToStartup((uint64_t *)a1, a2, (__int128 *)&v32, a5, a6);
      }
    }
  }
  DataLength = CMBlockBufferGetDataLength(a2);
  v19 = offsetToData;
  v20 = *(OpaqueCMBlockBuffer **)(v11 + 16);
  if (v20)
  {
    v21 = offsetToData;
    goto LABEL_28;
  }
  Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 8), *(_DWORD *)(v11 + 4), 0, (CMBlockBufferRef *)(v11 + 16));
  if ((_DWORD)Empty)
    return Empty;
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  v23 = *a3;
  *(_QWORD *)(v11 + 56) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v11 + 40) = v23;
  *(_DWORD *)(v11 + 456) = a5;
  *(_QWORD *)(v11 + 448) = a6;
  v20 = *(OpaqueCMBlockBuffer **)(v11 + 16);
  v21 = offsetToData;
LABEL_28:
  v24 = DataLength - v19;
  appended = CMBlockBufferAppendBufferReference(v20, a2, v21, DataLength - v19, 0);
  if ((_DWORD)appended)
  {
LABEL_36:
    v30 = appended;
LABEL_38:
    ADTSResyncForType(a1);
    return v30;
  }
  v25 = *(unsigned int *)(v11 + 24);
  v26 = v11 + 16 * v25;
  v27 = *(_QWORD *)(v11 + 32);
  *(_QWORD *)(v26 + 64) = v27;
  *(_DWORD *)(v26 + 72) = 1;
  *(_DWORD *)(v26 + 76) = v24;
  v28 = v25 + 1;
  *(_DWORD *)(v11 + 24) = v28;
  *(_QWORD *)(v11 + 32) = v27 + v24;
  *(_QWORD *)(v11 + 2968) += offsetToData + v24;
  ++*(_DWORD *)(v11 + 2976);
  v29 = *(_QWORD *)(a1 + 96);
  if (!v29)
    v29 = *(unsigned int *)(v11 + 4);
  if (v29 <= v28)
    return ADTSFlushForType(a1);
  return 0;
}

uint64_t ADTSResyncForType(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(const void **)(v2 + 16);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  ADTSFlushStartupQueue(v2);
  *(_BYTE *)(v2 + 2961) = 0;
  result = FigFormatDescriptionRelease();
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(v2 + 2968) = 0;
  *(_DWORD *)(v2 + 2976) = 0;
  return result;
}

uint64_t ADTSFlushForType(uint64_t a1)
{
  uint64_t v1;
  OpaqueCMBlockBuffer *v2;
  const __CFAllocator *v4;
  const opaqueCMFormatDescription *v5;
  CMItemCount v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  CMTime presentationTimeStamp;
  CMAttachmentBearerRef target;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(OpaqueCMBlockBuffer **)(v1 + 16);
  if (!v2)
    return 0;
  v4 = *(const __CFAllocator **)(a1 + 8);
  v5 = *(const opaqueCMFormatDescription **)(a1 + 40);
  v6 = *(unsigned int *)(v1 + 24);
  presentationTimeStamp = *(CMTime *)(v1 + 40);
  target = 0;
  v7 = CMAudioSampleBufferCreateWithPacketDescriptions(v4, v2, 1u, 0, 0, v5, v6, &presentationTimeStamp, (const AudioStreamPacketDescription *)(v1 + 64), (CMSampleBufferRef *)&target);
  if ((_DWORD)v7)
  {
    v9 = v7;
  }
  else
  {
    v8 = *(unsigned int *)(v1 + 456);
    if ((v8 & 1) != 0)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2698], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
      v8 = *(unsigned int *)(v1 + 456);
    }
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, CMAttachmentBearerRef, _QWORD, uint64_t))(a1 + 24))(a1, *(_QWORD *)(a1 + 32), target, *(_QWORD *)(v1 + 448), v8);
    if (target)
      CFRelease(target);
  }
  *(_DWORD *)(v1 + 456) = 0;
  v10 = *(const void **)(v1 + 16);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  ADTSFlushStartupQueue(v1);
  return v9;
}

void ADTSDestroyForType(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 88))
  {
    ADTSResyncForType(a1);
    free(*(void **)(a1 + 88));
    *(_QWORD *)(a1 + 88) = 0;
  }
}

uint64_t ADTSReadBitRate(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_DWORD *)(v2 + 2976);
  if (!v3 || !*(_DWORD *)v2)
    return 4294954513;
  result = 0;
  *a2 = (uint64_t)((double)(8 * *(_QWORD *)(v2 + 2968))
                / ((double)(v3 << 10)
                 / (double)*(unsigned int *)v2));
  return result;
}

uint64_t ADTSAddFrameToStartup(uint64_t *a1, void *cf, __int128 *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  size_t DataLength;
  size_t v18;
  size_t v19;
  uint64_t DataPointer;
  void *inData;
  size_t lengthAtOffsetOut;

  v10 = a1[11];
  if ((a4 & 1) != 0)
    ADTSFlushStartupQueue(a1[11]);
  v11 = *(_QWORD *)(v10 + 2864);
  if (v11 >= 50)
    return ADTSCreateFormatDescriptionAndSend((uint64_t)a1);
  if (cf)
  {
    v13 = CFRetain(cf);
    v11 = *(_QWORD *)(v10 + 2864);
  }
  else
  {
    v13 = 0;
  }
  v14 = v10 + 48 * v11;
  *(_QWORD *)(v14 + 464) = v13;
  *(_QWORD *)(v14 + 504) = a5;
  v15 = *a3;
  *(_QWORD *)(v14 + 488) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v14 + 472) = v15;
  *(_DWORD *)(v14 + 496) = a4;
  *(_QWORD *)(v10 + 2864) = v11 + 1;
  if (*(_QWORD *)(v10 + 2880))
    v16 = 0;
  else
    v16 = AudioFileStreamOpen(a1, (AudioFileStream_PropertyListenerProc)ADTSPropertyListener, (AudioFileStream_PacketsProc)ADTSPacketProc, 0x61647473u, (AudioFileStreamID *)(v10 + 2880));
  DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)cf);
  if (!DataLength || *(_BYTE *)(v10 + 2961))
  {
LABEL_19:
    if (*(_BYTE *)(v10 + 2961))
      v16 = ADTSCreateFormatDescriptionAndSend((uint64_t)a1);
    if (!(_DWORD)v16)
      return v16;
  }
  else
  {
    v18 = DataLength;
    v19 = 0;
    while (1)
    {
      inData = 0;
      lengthAtOffsetOut = 0;
      DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, v19, &lengthAtOffsetOut, 0, (char **)&inData);
      if ((_DWORD)DataPointer)
        break;
      DataPointer = AudioFileStreamParseBytes(*(AudioFileStreamID *)(v10 + 2880), lengthAtOffsetOut, inData, 0);
      if ((_DWORD)DataPointer)
        break;
      v18 -= lengthAtOffsetOut;
      if (v18)
      {
        v19 += lengthAtOffsetOut;
        if (!*(_BYTE *)(v10 + 2961))
          continue;
      }
      v16 = 0;
      goto LABEL_19;
    }
    v16 = DataPointer;
  }
  ADTSFlushStartupQueue(v10);
  return v16;
}

uint64_t ADTSGetHeaderInfo(OpaqueCMBlockBuffer *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  char *v11;
  _BYTE temporaryBlock[7];

  v11 = 0;
  v9 = CMBlockBufferAccessDataBytes(a1, 0, 7uLL, temporaryBlock, &v11);
  if (!(_DWORD)v9)
  {
    if (a2)
      *a2 = ADTSGetFormatID((uint64_t)v11);
    if (a4)
      *a4 = ADTSGetChannelLayout((uint64_t)v11);
    if (a3)
      *a3 = ADTSGetSampleFrequency((uint64_t)v11);
    if (a5)
      *a5 = ADTSGetADTSHeaderSize((uint64_t)v11);
  }
  return v9;
}

OpaqueAudioFileStreamID *ADTSFlushStartupQueue(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeRef *v4;
  OpaqueAudioFileStreamID *result;

  v2 = *(_QWORD *)(a1 + 2864);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = (CFTypeRef *)(a1 + 464);
    do
    {
      if (*v4)
      {
        CFRelease(*v4);
        v2 = *(_QWORD *)(a1 + 2864);
      }
      *v4 = 0;
      v4 += 6;
      ++v3;
    }
    while (v3 < v2);
  }
  *(_QWORD *)(a1 + 2864) = 0;
  result = *(OpaqueAudioFileStreamID **)(a1 + 2880);
  if (result)
  {
    result = (OpaqueAudioFileStreamID *)AudioFileStreamClose(result);
    *(_QWORD *)(a1 + 2880) = 0;
  }
  return result;
}

uint64_t ADTSCreateFormatDescriptionAndSend(uint64_t a1)
{
  uint64_t v2;
  OSStatus Property;
  BOOL v4;
  void *v5;
  const void *v6;
  const AudioChannelLayout *p_outPropertyData;
  uint64_t v8;
  UInt32 v9;
  UInt32 *v10;
  UInt32 v11;
  OpaqueCMBlockBuffer *v12;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  uint64_t (*v16)(uint64_t, _QWORD, _QWORD);
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  CFTypeRef v23;
  OpaqueAudioFileStreamID *v24;
  int v26;
  Boolean outWritable;
  UInt32 v28;
  UInt32 outPropertyDataSize[2];
  AudioStreamBasicDescription outPropertyData;
  AudioChannelLayout ioPropertyDataSize;

  v2 = *(_QWORD *)(a1 + 88);
  if (*(_DWORD *)(v2 + 2872) == 1633973363 && *(_BYTE *)(v2 + 2960))
  {
    memset(&outPropertyData, 0, 32);
    ioPropertyDataSize.mChannelLayoutTag = 32;
    *(_QWORD *)outPropertyDataSize = 0;
    outWritable = 0;
    v28 = 0;
    v26 = 0;
    Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v2 + 2880), 0x636D6170u, &ioPropertyDataSize.mChannelLayoutTag, &outPropertyData);
    if (AudioFileStreamGetPropertyInfo(*(AudioFileStreamID *)(v2 + 2880), 0x6D676963u, &outPropertyDataSize[1], &outWritable))
    {
      v4 = 1;
    }
    else
    {
      v4 = outPropertyDataSize[1] == 0;
    }
    if (!v4)
    {
      v5 = malloc_type_malloc(outPropertyDataSize[1], 0x35773F43uLL);
      if (!v5
        || !AudioFileStreamGetProperty(*(AudioFileStreamID *)(v2 + 2880), 0x6D676963u, &outPropertyDataSize[1], v5))
      {
        goto LABEL_11;
      }
      outPropertyDataSize[1] = 0;
      free(v5);
    }
    v5 = 0;
LABEL_11:
    v6 = *(const void **)(a1 + 40);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 40) = 0;
    }
    if (Property)
      p_outPropertyData = 0;
    else
      p_outPropertyData = (const AudioChannelLayout *)&outPropertyData;
    v8 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), (const AudioStreamBasicDescription *)(v2 + 2920), 32 * (Property == 0), p_outPropertyData, outPropertyDataSize[1], v5, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
    if (v5)
      free(v5);
    if ((_DWORD)v8)
      goto LABEL_30;
    v8 = ADTSGetHeaderInfo(*(OpaqueCMBlockBuffer **)(v2 + 464), outPropertyDataSize, &v26, &v28, 0);
    if ((_DWORD)v8)
      goto LABEL_30;
    v9 = outPropertyDataSize[0];
    *(_DWORD *)v2 = v26;
    v10 = (UInt32 *)(v2 + 2948);
    if (!Property)
      v10 = (UInt32 *)&outPropertyData;
    v11 = *v10;
    if ((unsigned __int16)v28 != (unsigned __int16)v11)
      v11 = v28;
    goto LABEL_29;
  }
  v12 = *(OpaqueCMBlockBuffer **)(v2 + 464);
  memset(&ioPropertyDataSize.mChannelBitmap, 0, 28);
  memset(&outPropertyData.mFormatID, 0, 32);
  *(_QWORD *)outPropertyDataSize = 0;
  v28 = 0;
  v13 = ADTSGetHeaderInfo(v12, &outPropertyDataSize[1], &v28, outPropertyDataSize, 0);
  if ((_DWORD)v13)
  {
    v8 = v13;
    goto LABEL_49;
  }
  ioPropertyDataSize.mChannelLayoutTag = outPropertyDataSize[0];
  LODWORD(v14) = v28;
  outPropertyData.mSampleRate = (double)v14;
  outPropertyData.mFormatID = outPropertyDataSize[1];
  outPropertyData.mFramesPerPacket = 1024;
  outPropertyData.mChannelsPerFrame = LOWORD(outPropertyDataSize[0]);
  v15 = *(const void **)(a1 + 40);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v8 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &outPropertyData, 0x20uLL, &ioPropertyDataSize, 0, 0, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
  if (!(_DWORD)v8)
  {
    v9 = outPropertyDataSize[1];
    *(_DWORD *)v2 = v28;
    v11 = outPropertyDataSize[0];
LABEL_29:
    *(_DWORD *)(v2 + 8) = v11;
    *(_DWORD *)(v2 + 12) = v9;
  }
LABEL_30:
  if (!(_DWORD)v8)
  {
    v16 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16);
    if (v16 && (v17 = v16(a1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)), (_DWORD)v17))
    {
      v8 = v17;
    }
    else
    {
      if (*(_DWORD *)(v2 + 12) == 1633772396)
      {
        v18 = 1;
      }
      else
      {
        v18 = *(_DWORD *)v2 >> 11;
        if (v18 > 0x18)
          v18 = 24;
      }
      *(_DWORD *)(v2 + 4) = v18;
      v19 = *(_QWORD *)(a1 + 88);
      v20 = *(_QWORD *)(v19 + 2864);
      *(_QWORD *)(v19 + 2864) = 0;
      if (v20 < 1)
      {
        v8 = 0;
      }
      else
      {
        LODWORD(v8) = 0;
        v21 = 0;
        v22 = v19 + 464;
        do
        {
          if (!(_DWORD)v8)
          {
            v23 = *(CFTypeRef *)v22;
            *(_OWORD *)&outPropertyData.mSampleRate = *(_OWORD *)(v22 + 8);
            *(_QWORD *)&outPropertyData.mBytesPerPacket = *(_QWORD *)(v22 + 24);
            v21 = ADTSPushForType(a1, v23, &outPropertyData);
          }
          if (*(_QWORD *)v22)
            CFRelease(*(CFTypeRef *)v22);
          if (v21)
            v8 = v21;
          else
            v8 = v8;
          v22 += 48;
          --v20;
        }
        while (v20);
      }
    }
  }
LABEL_49:
  v24 = *(OpaqueAudioFileStreamID **)(v2 + 2880);
  if (v24)
  {
    AudioFileStreamClose(v24);
    *(_QWORD *)(v2 + 2880) = 0;
  }
  return v8;
}

uint64_t ADTSPropertyListener(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  UInt32 ioPropertyDataSize;

  v3 = *(_QWORD *)(result + 88);
  if (a3 == 1684434292)
  {
    ioPropertyDataSize = 40;
    result = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v3 + 2880), 0x64666D74u, &ioPropertyDataSize, (void *)(v3 + 2920));
    if ((_DWORD)result || *(double *)(v3 + 2920) == 0.0 || !*(_DWORD *)(v3 + 2928) || !*(_DWORD *)(v3 + 2948))
      *(_WORD *)(v3 + 2960) = 256;
    else
      *(_BYTE *)(v3 + 2960) = 1;
  }
  else if (a3 == 1717988724)
  {
    ioPropertyDataSize = 4;
    return AudioFileStreamGetProperty(*(AudioFileStreamID *)(v3 + 2880), 0x66666D74u, &ioPropertyDataSize, (void *)(v3 + 2872));
  }
  return result;
}

uint64_t ADTSPacketProc(uint64_t result, uint64_t a2, int a3)
{
  *(_BYTE *)(*(_QWORD *)(result + 88) + 2961) |= a3 != 0;
  return result;
}

uint64_t CreateSampleGeneratorForDolby(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 0x1E0uLL, 0x102004048EB5213uLL);
  if (!v2)
    return 12;
  v3 = v2;
  result = 0;
  a1[6] = DolbyPushForType;
  a1[7] = DolbyFlushForType;
  a1[8] = DolbyResyncForType;
  a1[9] = DolbyDestroyForType;
  a1[10] = DolbyReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t DolbyPushForType(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t SampleInfo;
  char v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;
  char v19;
  CFTypeRef *v20;
  BOOL v21;
  UInt32 SamplesPerFrame;
  unint64_t v23;
  AudioChannelLayout *v24;
  __int128 v25;
  unsigned int v26;
  uint64_t (*v27)(uint64_t, _QWORD, _QWORD);
  size_t DataLength;
  uint64_t v29;
  CFTypeRef v30;
  OpaqueCMBlockBuffer *v31;
  uint64_t Empty;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  const void *v41;
  size_t v42;
  void *v43;
  AudioStreamBasicDescription asbd;
  size_t layoutSize;
  AudioChannelLayout *layout;
  char *returnedPointerOut;
  _BYTE v48[28];
  _BYTE temporaryBlock[10];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 88);
  layout = 0;
  returnedPointerOut = 0;
  layoutSize = 0;
  memset(v48, 0, sizeof(v48));
  if ((a5 & 1) != 0)
  {
    v12 = DolbyFlushForType(a1);
    if ((_DWORD)v12)
      goto LABEL_54;
  }
  SampleInfo = DolbyGetSampleInfo((uint64_t)v48, theBuffer);
  if (*(_DWORD *)v48 == 1633889587)
  {
    v14 = 0;
  }
  else if (v48[18] == *(unsigned __int8 *)(v11 + 18))
  {
    v15 = bswap64(*(unint64_t *)&v48[19]);
    v16 = bswap64(*(_QWORD *)(v11 + 19));
    v17 = v15 >= v16;
    v18 = v15 > v16;
    v19 = !v17;
    v14 = v18 - v19;
  }
  else
  {
    v14 = 1;
  }
  if (!*(_DWORD *)&v48[4])
    goto LABEL_55;
  v20 = (CFTypeRef *)(a1 + 40);
  if (*(_QWORD *)(a1 + 40) && *(_DWORD *)v48 == *(_DWORD *)v11)
  {
    v21 = *(unsigned __int16 *)&v48[12] == *(unsigned __int16 *)(v11 + 12) && v14 == 0;
    if (v21 && *(_DWORD *)&v48[4] == *(_DWORD *)(v11 + 4))
      goto LABEL_36;
  }
  v12 = CMBlockBufferAccessDataBytes(theBuffer, 0, 0xAuLL, temporaryBlock, &returnedPointerOut);
  if ((_DWORD)v12)
    goto LABEL_54;
  DolbyFlushForType(a1);
  SamplesPerFrame = DolbyGetSamplesPerFrame();
  v12 = DolbyCreateChannelLayout((uint64_t)v48, &layout, (UInt32 *)&layoutSize);
  if ((_DWORD)v12)
    goto LABEL_54;
  if (!*(_QWORD *)(a1 + 104) || !*(_QWORD *)(a1 + 112))
  {
    memset(&asbd.mFormatID, 0, 32);
    v42 = 0;
    v43 = 0;
    v12 = DolbyCreateMagicCookie(v48, (unsigned __int8 *)returnedPointerOut, theBuffer, &v43, &v42);
    if (!(_DWORD)v12)
    {
      LODWORD(v23) = *(_DWORD *)&v48[4];
      asbd.mSampleRate = (double)v23;
      asbd.mBytesPerPacket = 0;
      asbd.mFramesPerPacket = SamplesPerFrame;
      asbd.mFormatID = *(_DWORD *)v48;
      v24 = layout;
      asbd.mChannelsPerFrame = LOWORD(layout->mChannelLayoutTag);
      if (*v20)
      {
        CFRelease(*v20);
        *v20 = 0;
        v24 = layout;
      }
      SampleInfo = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &asbd, layoutSize, v24, v42, v43, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
      free(v43);
      goto LABEL_29;
    }
LABEL_54:
    SampleInfo = v12;
    goto LABEL_55;
  }
  SampleInfo = MPEG2SampleGeneratorCreateFormatDescriptionFromAudioConfiguration(a1, *(unsigned int *)v48, *(unsigned int *)&v48[4], layout, layoutSize, 0);
LABEL_29:
  if ((_DWORD)SampleInfo)
    goto LABEL_51;
  v25 = *(_OWORD *)&v48[12];
  *(_OWORD *)v11 = *(_OWORD *)v48;
  *(_OWORD *)(v11 + 12) = v25;
  v26 = (*(_DWORD *)(v11 + 4) >> 1) / SamplesPerFrame;
  if (v26 >= 0x18)
    v26 = 24;
  *(_DWORD *)(v11 + 32) = v26;
  v27 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16);
  if (v27)
  {
    SampleInfo = v27(a1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    if ((_DWORD)SampleInfo)
      goto LABEL_55;
  }
  else
  {
    SampleInfo = 0;
  }
LABEL_36:
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  v29 = *(_QWORD *)(a1 + 96);
  if (!v29)
    v29 = *(unsigned int *)(v11 + 32);
  if (v29 == 1)
  {
    if (theBuffer)
      v30 = CFRetain(theBuffer);
    else
      v30 = 0;
    v35 = 0;
    v34 = 0;
    *(_QWORD *)(v11 + 40) = v30;
    *(_DWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = 0;
    v36 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(v11 + 64) = *(_OWORD *)a3;
    *(_DWORD *)(v11 + 36) = a5;
    *(_QWORD *)(v11 + 80) = v36;
    *(_QWORD *)(v11 + 88) = a6;
    goto LABEL_48;
  }
  v31 = *(OpaqueCMBlockBuffer **)(v11 + 40);
  if (!v31)
  {
    Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 8), *(_DWORD *)(v11 + 32), 0, (CMBlockBufferRef *)(v11 + 40));
    if ((_DWORD)Empty)
      goto LABEL_50;
    *(_DWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = 0;
    v33 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(v11 + 64) = *(_OWORD *)a3;
    *(_DWORD *)(v11 + 36) = a5;
    *(_QWORD *)(v11 + 80) = v33;
    *(_QWORD *)(v11 + 88) = a6;
    v31 = *(OpaqueCMBlockBuffer **)(v11 + 40);
  }
  SampleInfo = CMBlockBufferAppendBufferReference(v31, theBuffer, 0, DataLength, 0);
  if ((_DWORD)SampleInfo)
  {
LABEL_55:
    if (layout)
      free(layout);
    v40 = *(_QWORD *)(a1 + 88);
    v41 = *(const void **)(v40 + 40);
    if (v41)
      CFRelease(v41);
    *(_QWORD *)(v40 + 40) = 0;
    *(_DWORD *)(v40 + 48) = 0;
    *(_QWORD *)(v40 + 56) = 0;
    return SampleInfo;
  }
  v34 = *(_DWORD *)(v11 + 48);
  v35 = *(_QWORD *)(v11 + 56);
LABEL_48:
  v37 = v11 + 16 * v34;
  *(_QWORD *)(v37 + 96) = v35;
  *(_DWORD *)(v37 + 104) = 1;
  *(_DWORD *)(v37 + 108) = DataLength;
  v38 = v34 + 1;
  *(_DWORD *)(v11 + 48) = v38;
  *(_QWORD *)(v11 + 56) = v35 + DataLength;
  if (v29 > v38)
    goto LABEL_51;
  Empty = DolbyFlushForType(a1);
LABEL_50:
  SampleInfo = Empty;
LABEL_51:
  if (layout)
    free(layout);
  return SampleInfo;
}

void DolbyResyncForType(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(const void **)(v1 + 40);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
}

uint64_t DolbyFlushForType(uint64_t a1)
{
  uint64_t v1;
  OpaqueCMBlockBuffer *v2;
  const __CFAllocator *v4;
  const opaqueCMFormatDescription *v5;
  CMItemCount v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  CMTime presentationTimeStamp;
  CMAttachmentBearerRef target;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(OpaqueCMBlockBuffer **)(v1 + 40);
  if (!v2)
    return 0;
  v4 = *(const __CFAllocator **)(a1 + 8);
  v5 = *(const opaqueCMFormatDescription **)(a1 + 40);
  v6 = *(unsigned int *)(v1 + 48);
  presentationTimeStamp = *(CMTime *)(v1 + 64);
  target = 0;
  v7 = CMAudioSampleBufferCreateWithPacketDescriptions(v4, v2, 1u, 0, 0, v5, v6, &presentationTimeStamp, (const AudioStreamPacketDescription *)(v1 + 96), (CMSampleBufferRef *)&target);
  if ((_DWORD)v7)
  {
    v9 = v7;
  }
  else
  {
    v8 = *(unsigned int *)(v1 + 36);
    if ((v8 & 1) != 0)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2698], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
      v8 = *(unsigned int *)(v1 + 36);
    }
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, CMAttachmentBearerRef, _QWORD, uint64_t))(a1 + 24))(a1, *(_QWORD *)(a1 + 32), target, *(_QWORD *)(v1 + 88), v8);
    if (target)
      CFRelease(target);
  }
  v10 = *(const void **)(v1 + 40);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 44) = 0;
  *(_QWORD *)(v1 + 36) = 0;
  return v9;
}

void DolbyDestroyForType(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v3 = *(void **)(a1 + 88);
    if (*(_QWORD *)(v1 + 40))
    {
      CFRelease(*(CFTypeRef *)(v1 + 40));
      v3 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(v1 + 40) = 0;
    *(_DWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    free(v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
}

uint64_t DolbyReadBitRate(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*(_QWORD *)(a1 + 40))
    return 4294954323;
  if (!a2)
    return 4294954516;
  result = 0;
  *a2 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 8);
  return result;
}

uint64_t H264GetSPSFromPPSId(uint64_t *a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t result;

  v4 = a1 + 2;
  while (1)
  {
    v4 = (uint64_t *)*v4;
    if (!v4)
      break;
    if (*((_DWORD *)v4 + 6) == a2)
    {
      while (1)
      {
        a1 = (uint64_t *)*a1;
        if (!a1)
          break;
        if (*((_DWORD *)a1 + 6) == *((_DWORD *)v4 + 7))
        {
          if (a3)
            *a3 = a1;
          result = 0;
          if (a4)
            *a4 = v4;
          return result;
        }
      }
      return 4294954325;
    }
  }
  return 4294954325;
}

_QWORD *H264InitializeSPS_PPS_List(_QWORD *result)
{
  *result = 0;
  result[1] = result;
  result[2] = 0;
  result[3] = result + 2;
  return result;
}

void H264DestroySPS_PPS_List(uint64_t a1)
{
  H264DestroyParamSetList(a1 + 16);
  H264DestroyParamSetList(a1);
}

void H264DestroyParamSetList(uint64_t a1)
{
  uint64_t *i;
  uint64_t v3;
  uint64_t *v4;

  for (i = *(uint64_t **)a1; *(_QWORD *)a1; i = *(uint64_t **)a1)
  {
    v3 = *i;
    *(_QWORD *)a1 = *i;
    if (!v3)
      *(_QWORD *)(a1 + 8) = a1;
    v4 = (uint64_t *)i[1];
    if (i + 4 != v4)
      free(v4);
    free(i);
  }
}

uint64_t H264ParamSetAddSPS(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, size_t a4, _QWORD *a5, _BYTE *a6)
{
  uint64_t DataPointer;
  size_t v13;
  uint64_t SPSSequenceID;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v19;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  int v22;

  if (a6)
    *a6 = 0;
  v22 = 0;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
    return DataPointer;
  v13 = lengthAtOffsetOut;
  if (lengthAtOffsetOut < a4)
  {
    dataPointerOut = (char *)malloc_type_malloc(a4, 0x949B5CFDuLL);
    DataPointer = CMBlockBufferCopyDataBytes(theBuffer, offset, a4, dataPointerOut);
    if ((_DWORD)DataPointer)
      return DataPointer;
  }
  SPSSequenceID = FigH264Bridge_GetSPSSequenceID();
  if ((_DWORD)SPSSequenceID)
  {
    v17 = SPSSequenceID;
    goto LABEL_18;
  }
  v15 = (_QWORD *)a1;
  do
  {
    v15 = (_QWORD *)*v15;
    if (!v15)
    {
      v15 = H264AddParamSetToList(a1, dataPointerOut, a4, v22, 0);
      if (v15)
      {
        if (a6)
          goto LABEL_15;
        goto LABEL_16;
      }
LABEL_29:
      v17 = 4294954510;
      goto LABEL_18;
    }
  }
  while (*((_DWORD *)v15 + 6) != v22);
  if (v15[2] == a4)
  {
    v16 = (_QWORD *)v15[1];
    if (!memcmp(dataPointerOut, v16, a4))
      goto LABEL_16;
  }
  else
  {
    v16 = (_QWORD *)v15[1];
  }
  if (v15 + 4 != v16)
  {
    free(v16);
    v15[1] = 0;
  }
  v19 = malloc_type_malloc(a4, 0x4B578B0EuLL);
  v15[1] = v19;
  if (!v19)
    goto LABEL_29;
  memcpy(v19, dataPointerOut, a4);
  v15[2] = a4;
  if (!a6)
    goto LABEL_16;
LABEL_15:
  *a6 = 1;
LABEL_16:
  v17 = 0;
  if (a5)
    *a5 = v15;
LABEL_18:
  if (v13 < a4)
    free(dataPointerOut);
  return v17;
}

_QWORD *H264AddParamSetToList(uint64_t a1, const void *a2, size_t a3, int a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;

  v10 = malloc_type_calloc(1uLL, a3 + 32, 0x6C27254FuLL);
  v11 = v10;
  if (v10)
  {
    v10[1] = v10 + 4;
    memcpy(v10 + 4, a2, a3);
    v11[2] = a3;
    *((_DWORD *)v11 + 6) = a4;
    *((_DWORD *)v11 + 7) = a5;
    *v11 = 0;
    **(_QWORD **)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 8) = v11;
  }
  return v11;
}

uint64_t H264ParamSetAddPPS(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, size_t a4, _BYTE *a5)
{
  uint64_t DataPointer;
  size_t v11;
  char *v12;
  uint64_t PPSSequenceID;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  _BOOL4 v19;
  _QWORD *v20;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  uint64_t v24;

  if (a5)
    *a5 = 0;
  dataPointerOut = 0;
  v24 = 0;
  lengthAtOffsetOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
    return DataPointer;
  v11 = lengthAtOffsetOut;
  if (lengthAtOffsetOut >= a4)
    goto LABEL_7;
  v12 = (char *)malloc_type_malloc(a4, 0xD07DA676uLL);
  dataPointerOut = v12;
  if (!v12)
    return 4294954510;
  DataPointer = CMBlockBufferCopyDataBytes(theBuffer, offset, a4, v12);
  if ((_DWORD)DataPointer)
    return DataPointer;
LABEL_7:
  PPSSequenceID = FigH264Bridge_GetPPSSequenceID();
  if ((_DWORD)PPSSequenceID)
  {
    v18 = PPSSequenceID;
  }
  else
  {
    v14 = a1 + 16;
    v15 = (uint64_t *)(a1 + 16);
    while (1)
    {
      v15 = (uint64_t *)*v15;
      if (!v15)
        break;
      if (*((_DWORD *)v15 + 6) == (_DWORD)v24)
      {
        if (*((_DWORD *)v15 + 7) == HIDWORD(v24) && v15[2] == a4 && !memcmp((const void *)v15[1], dataPointerOut, a4))
        {
          v18 = 0;
          goto LABEL_25;
        }
        v16 = (uint64_t *)v15[1];
        if (v15 + 4 != v16)
          free(v16);
        v17 = malloc_type_malloc(a4, 0x438169D7uLL);
        v15[1] = (uint64_t)v17;
        if (!v17)
        {
          v18 = 4294954510;
          goto LABEL_25;
        }
        memcpy(v17, dataPointerOut, a4);
        v18 = 0;
        v15[2] = a4;
        v19 = 1;
        if (!a5)
          goto LABEL_25;
        goto LABEL_23;
      }
    }
    v20 = H264AddParamSetToList(v14, dataPointerOut, a4, v24, SHIDWORD(v24));
    v19 = v20 != 0;
    if (v20)
      v18 = 0;
    else
      v18 = 4294954510;
    if (!a5)
      goto LABEL_25;
LABEL_23:
    if (v19)
      *a5 = 1;
  }
LABEL_25:
  if (v11 < a4)
    free(dataPointerOut);
  return v18;
}

uint64_t CreateSampleGeneratorForH264(_QWORD *a1)
{
  char *v2;
  char *v3;
  uint64_t result;
  uint64_t v5;

  v2 = (char *)malloc_type_calloc(1uLL, 0xC0uLL, 0x10E0040FC223A1CuLL);
  if (!v2)
    return 12;
  v3 = v2;
  result = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = v3;
  *((_QWORD *)v3 + 3) = v3 + 16;
  v5 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v3 + 164) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(v3 + 180) = *(_QWORD *)(v5 + 16);
  a1[6] = H264PushForType;
  a1[7] = H264FlushForType;
  a1[8] = H264ResyncForType;
  a1[9] = H264DestroyForType;
  a1[10] = H264ReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t H264PushForType(unsigned int *a1, OpaqueCMBlockBuffer *cf, __int128 *a3, __int128 *a4, unsigned int a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, unsigned __int8 *a10)
{
  OpaqueCMBlockBuffer *v16;
  uint64_t v17;
  const __CFDictionary *v18;
  const __CFNumber *v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v26;
  int v27;
  uint64_t SPSWidthAndHeight;
  int v29;
  uint64_t v30;
  const void *v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFDictionaryRef v38;
  __int128 v39;
  __int128 v40;
  const __CFString *v41;
  CFNumberRef v42;
  CFNumberRef v43;
  uint64_t v44;
  unsigned int v45;
  const __CFString *inited;
  _QWORD *v47;
  _QWORD *v48;
  CFNumberRef v49;
  unsigned int v50;
  CFNumberRef v51;
  _QWORD *v52;
  int v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  int v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _QWORD *v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t *v68;
  unsigned int v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  __int128 *v73;
  int v74;
  const __CFNumber *cfa;
  int cfb;
  __int128 *v77;
  unsigned int v78;
  const __CFString *v79;
  OpaqueCMBlockBuffer *v81;
  int v82;
  int valuePtr;
  char v84;
  void *values[2];
  __int128 v86;
  uint64_t v87;
  void *keys[2];
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  v16 = cf;
  v91 = *MEMORY[0x1E0C80C00];
  v17 = *((_QWORD *)a1 + 11);
  if (cf)
    CFRetain(cf);
  v84 = 0;
  v77 = a3;
  v78 = a5;
  if ((a5 & 2) == 0 && (*(_DWORD *)(v17 + 136) & 0x600) == (a5 & 0x600))
  {
    v18 = 0;
    v19 = 0;
    cfa = 0;
    v79 = 0;
    v20 = 1;
    goto LABEL_24;
  }
  v74 = *(_DWORD *)(v17 + 136) & 0x600;
  cfb = a5 & 0x600;
  v72 = a6;
  v73 = a4;
  v81 = v16;
  v84 = 0;
  if (a7 >= 1)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v27 = *a10++;
      v26 = v27;
      if (v27 == 8)
      {
        v16 = v81;
        v30 = H264ParamSetAddPPS(v17, v81, *a8 + 4, *a9 - 4, &v84);
        if ((_DWORD)v30)
        {
          v35 = v30;
          v41 = 0;
          goto LABEL_89;
        }
        v21 = 1;
      }
      else if (v26 == 7)
      {
        keys[0] = 0;
        LOBYTE(values[0]) = 0;
        SPSWidthAndHeight = H264ParamSetAddSPS(v17, v81, *a8 + 4, *a9 - 4, keys, values);
        if ((_DWORD)SPSWidthAndHeight
          || (v29 = LOBYTE(values[0]), LOBYTE(values[0]))
          && (SPSWidthAndHeight = FigH264Bridge_GetSPSWidthAndHeight(), (_DWORD)SPSWidthAndHeight))
        {
          v35 = SPSWidthAndHeight;
          v41 = 0;
          goto LABEL_104;
        }
        v23 |= v29;
        v22 = 1;
      }
      ++a9;
      ++a8;
      if (!--a7)
        goto LABEL_19;
    }
  }
  v23 = 0;
  v22 = 0;
  v21 = 0;
LABEL_19:
  v31 = (const void *)*((_QWORD *)a1 + 5);
  if (v31)
  {
    v16 = v81;
    v32 = a5;
    if (!v23 && !v84 && v74 == cfb)
    {
      v18 = 0;
      v19 = 0;
      cfa = 0;
      v79 = 0;
      v20 = 1;
      a6 = v72;
      a4 = v73;
      goto LABEL_24;
    }
  }
  else
  {
    v35 = 0;
    v41 = 0;
    v32 = v78;
    if (!v21)
    {
LABEL_104:
      v16 = v81;
      goto LABEL_89;
    }
    v16 = v81;
    if (!v22)
      goto LABEL_89;
  }
  v90 = 0;
  *(_OWORD *)keys = 0u;
  v89 = 0u;
  v87 = 0;
  *(_OWORD *)values = 0u;
  v86 = 0u;
  v82 = 24;
  valuePtr = 1;
  v44 = *a1;
  if ((_DWORD)v44 != 2053207651)
  {
    if ((_DWORD)v44 == 1748121140)
    {
      v44 = 1635148593;
    }
    else if ((_DWORD)v44 != 1700886115)
    {
      v38 = 0;
      v42 = 0;
      v43 = 0;
      v41 = 0;
      v35 = 4294954326;
      goto LABEL_83;
    }
  }
  if (v31)
  {
    CFRelease(v31);
    *((_QWORD *)a1 + 5) = 0;
  }
  v45 = 0;
  v41 = 0;
  if ((int)v44 > 1902212706 || (_DWORD)v44 == 1700886115)
  {
    inited = PKDCreateTransportStreamEncryptionInitData(1986618469, v44);
    v41 = inited;
    if (!inited)
    {
      v38 = 0;
      v42 = 0;
      goto LABEL_111;
    }
    keys[0] = *(void **)MEMORY[0x1E0CA4A78];
    values[0] = (void *)inited;
    v45 = 1;
  }
  if (cfb)
  {
    v47 = (_QWORD *)MEMORY[0x1E0CA8DE0];
    *(_QWORD *)((unint64_t)keys | (8 * v45)) = *MEMORY[0x1E0CA8DD0];
    v48 = (_QWORD *)MEMORY[0x1E0CA8DD8];
    if ((v32 & 0x200) == 0)
      v48 = v47;
    *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v45++ & 1))) = *v48;
    valuePtr = 2;
  }
  v49 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v42 = v49;
  if (!v49)
  {
    v38 = 0;
LABEL_111:
    v43 = 0;
    goto LABEL_112;
  }
  keys[v45] = (void *)*MEMORY[0x1E0CA8DC8];
  v50 = v45 + 1;
  values[v45] = v49;
  if (valuePtr == 2)
  {
    keys[v50] = (void *)*MEMORY[0x1E0CA4A20];
    values[v50] = v49;
    v50 = v45 + 2;
  }
  v51 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v82);
  v43 = v51;
  if (!v51)
  {
    v38 = 0;
    goto LABEL_112;
  }
  keys[v50] = (void *)*MEMORY[0x1E0CA21B0];
  values[v50] = v51;
  v38 = CFDictionaryCreate(*((CFAllocatorRef *)a1 + 1), (const void **)keys, (const void **)values, v50 + 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  if (!v38)
  {
LABEL_112:
    v35 = 4294954510;
    goto LABEL_83;
  }
  v52 = *(_QWORD **)v17;
  if (*(_QWORD *)v17)
  {
    v53 = 0;
    v54 = 0;
    do
    {
      v55 = v52[2];
      v53 += v55;
      if (v55)
        ++v54;
      v52 = (_QWORD *)*v52;
    }
    while (v52);
  }
  else
  {
    v54 = 0;
    v53 = 0;
  }
  v56 = *(_QWORD **)(v17 + 16);
  if (!v56)
    goto LABEL_81;
  v57 = 0;
  v58 = 0;
  do
  {
    v59 = v56[2];
    v57 += v59;
    if (v59)
      ++v58;
    v56 = (_QWORD *)*v56;
  }
  while (v56);
  v35 = 4294954510;
  if (!v53 || !v57)
    goto LABEL_82;
  v60 = malloc_type_malloc((v53 + v57 + 2 * (v58 + v54) + 7), 0x7F11DE05uLL);
  if (!v60)
  {
LABEL_81:
    v35 = 4294954510;
LABEL_82:
    v16 = v81;
    goto LABEL_83;
  }
  v61 = v60;
  v79 = v41;
  v62 = *(_QWORD **)v17;
  *v60 = 1;
  v60[1] = *(_BYTE *)(v62[1] + 1);
  v60[2] = *(_BYTE *)(v62[1] + 2);
  v60[3] = *(_BYTE *)(v62[1] + 3);
  v60[4] = -1;
  v60[5] = v54 | 0xE0;
  v63 = *(_QWORD **)v17;
  if (*(_QWORD *)v17)
  {
    v64 = 6;
    do
    {
      v65 = v63[2];
      if (v65)
      {
        v66 = &v61[v64];
        *v66 = BYTE1(v65);
        v61[v64 + 1] = v63[2];
        memcpy(v66 + 2, (const void *)v63[1], v63[2]);
        v64 += *((_DWORD *)v63 + 4) + 2;
      }
      v63 = (_QWORD *)*v63;
    }
    while (v63);
  }
  else
  {
    v64 = 6;
  }
  v61[v64] = v58;
  v68 = *(uint64_t **)(v17 + 16);
  a4 = v73;
  if (v68)
  {
    v69 = v64 + 1;
    do
    {
      v70 = v68[2];
      if (v70)
      {
        v71 = &v61[v69];
        *v71 = BYTE1(v70);
        v61[v69 + 1] = v68[2];
        memcpy(v71 + 2, (const void *)v68[1], v68[2]);
        v69 += *((_DWORD *)v68 + 4) + 2;
      }
      v68 = (uint64_t *)*v68;
    }
    while (v68);
  }
  v35 = FigVideoFormatDescriptionCreateWithSampleDescriptionExtensionAtom();
  free(v61);
  if ((_DWORD)v35)
  {
    v16 = v81;
    v41 = v79;
    goto LABEL_83;
  }
  cfa = v43;
  v19 = v42;
  v18 = v38;
  v20 = 0;
  v16 = v81;
  a6 = v72;
LABEL_24:
  if (*((_QWORD *)a1 + 5))
  {
    if (((((v78 >> 1) & 1) == 0) & (v78 >> 4)) != 0)
      v33 = v78 & 0xFFFFFFEF;
    else
      v33 = v78;
    *(_OWORD *)keys = *a4;
    *(_QWORD *)&v89 = *((_QWORD *)a4 + 2);
    v34 = PushH264Frame((uint64_t)a1, (CMTime *)keys, 1);
    if ((v20 & 1) != 0)
    {
      v35 = v34;
LABEL_31:
      if (v16)
        v36 = CFRetain(v16);
      else
        v36 = 0;
      *(_QWORD *)(v17 + 48) = v36;
      v37 = (CFTypeRef)*((_QWORD *)a1 + 5);
      if (v37)
        v37 = CFRetain(v37);
      v38 = v18;
      *(_QWORD *)(v17 + 56) = v37;
      v39 = *v77;
      *(_QWORD *)(v17 + 80) = *((_QWORD *)v77 + 2);
      *(_OWORD *)(v17 + 64) = v39;
      v40 = *a4;
      *(_QWORD *)(v17 + 104) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(v17 + 88) = v40;
      *(_DWORD *)(v17 + 136) = v33;
      *(_QWORD *)(v17 + 144) = a6;
      v41 = v79;
      goto LABEL_37;
    }
    v35 = (*((uint64_t (**)(unsigned int *, _QWORD, _QWORD))a1 + 2))(a1, *((_QWORD *)a1 + 4), *((_QWORD *)a1 + 5));
    if (!(_DWORD)v35)
      goto LABEL_31;
  }
  else
  {
    v35 = 0;
  }
  v41 = v79;
  v38 = v18;
LABEL_37:
  v42 = v19;
  v43 = cfa;
LABEL_83:
  if (v42)
    CFRelease(v42);
  if (v43)
    CFRelease(v43);
  if (v38)
    CFRelease(v38);
LABEL_89:
  if (v16)
    CFRelease(v16);
  if (v41)
    CFRelease(v41);
  return v35;
}

__n128 H264ResyncForType(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  uint64_t v4;
  __n128 result;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(const void **)(v1 + 48);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(v1 + 48) = 0;
  v3 = *(const void **)(v1 + 56);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  v4 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v1 + 164) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(v1 + 180) = *(_QWORD *)(v4 + 16);
  return result;
}

uint64_t H264FlushForType(uint64_t a1)
{
  return PushH264Frame(a1, MEMORY[0x1E0CA2E18], 0);
}

void H264DestroyForType(uint64_t a1)
{
  _QWORD *v1;
  const void *v2;
  const void *v3;

  v1 = *(_QWORD **)(a1 + 88);
  if (v1)
  {
    *(_QWORD *)(a1 + 88) = 0;
    H264DestroyParamSetList((uint64_t)(v1 + 2));
    H264DestroyParamSetList((uint64_t)v1);
    v2 = (const void *)v1[6];
    if (v2)
      CFRelease(v2);
    v1[6] = 0;
    v3 = (const void *)v1[7];
    if (v3)
      CFRelease(v3);
    free(v1);
  }
}

Float64 H264ReadBitRate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  Float64 result;
  CMTime v5;

  v3 = *(_QWORD *)(a1 + 88);
  v5 = *(CMTime *)(v3 + 164);
  result = CMTimeGetSeconds(&v5);
  if (*(_DWORD *)(v3 + 160))
  {
    if (result != 0.0)
    {
      result = (double)(8 * *(_QWORD *)(v3 + 152)) / result;
      *a2 = (uint64_t)result;
    }
  }
  return result;
}

uint64_t PushH264Frame(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t v4;
  OpaqueCMBlockBuffer *v5;
  uint64_t v8;
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  const void *v17;
  const void *v18;
  CMTime rhs;
  CMTime lhs;
  size_t sampleSizeArray;
  CMSampleBufferRef sbuf;
  CMSampleTimingInfo sampleTimingArray;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(OpaqueCMBlockBuffer **)(v4 + 48);
  if (!v5)
    return 0;
  sbuf = 0;
  sampleSizeArray = CMBlockBufferGetDataLength(v5);
  if (a3)
  {
    lhs = *a2;
    rhs = *(CMTime *)(v4 + 88);
    CMTimeSubtract(&sampleTimingArray.duration, &lhs, &rhs);
    *(_OWORD *)(v4 + 112) = *(_OWORD *)&sampleTimingArray.duration.value;
    *(_QWORD *)(v4 + 128) = sampleTimingArray.duration.epoch;
    lhs = *(CMTime *)(v4 + 164);
    rhs = *(CMTime *)(v4 + 112);
    CMTimeAdd(&sampleTimingArray.duration, &lhs, &rhs);
    *(_OWORD *)(v4 + 164) = *(_OWORD *)&sampleTimingArray.duration.value;
    *(_QWORD *)(v4 + 180) = sampleTimingArray.duration.epoch;
  }
  sampleTimingArray.decodeTimeStamp = *(CMTime *)(v4 + 88);
  *(_OWORD *)&sampleTimingArray.duration.value = *(_OWORD *)(v4 + 112);
  sampleTimingArray.duration.epoch = *(_QWORD *)(v4 + 128);
  sampleTimingArray.presentationTimeStamp = *(CMTime *)(v4 + 64);
  v8 = CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 8), *(CMBlockBufferRef *)(v4 + 48), 1u, 0, 0, *(CMFormatDescriptionRef *)(v4 + 56), 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &sbuf);
  if (!(_DWORD)v8)
  {
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
    if (SampleAttachmentsArray)
    {
      ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      v11 = ValueAtIndex;
      v12 = (const void *)*MEMORY[0x1E0C9AE40];
      v13 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((*(_DWORD *)(v4 + 136) & 0x10) != 0)
        v14 = (const void *)*MEMORY[0x1E0C9AE40];
      else
        v14 = (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25C8], v14);
      v15 = *(_DWORD *)(v4 + 136);
      if ((v15 & 0x10) == 0)
      {
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CA2620], v13);
        v15 = *(_DWORD *)(v4 + 136);
      }
      if ((v15 & 8) != 0)
      {
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CA2628], v13);
        v15 = *(_DWORD *)(v4 + 136);
      }
      if ((v15 & 0x100) != 0)
        v16 = v13;
      else
        v16 = v12;
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CA2618], v16);
    }
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, CMSampleBufferRef, _QWORD, _QWORD))(a1 + 24))(a1, *(_QWORD *)(a1 + 32), sbuf, *(_QWORD *)(v4 + 144), *(unsigned int *)(v4 + 136));
    if (sbuf)
      CFRelease(sbuf);
  }
  *(_QWORD *)(v4 + 152) += CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v4 + 48));
  ++*(_DWORD *)(v4 + 160);
  v17 = *(const void **)(v4 + 48);
  if (v17)
    CFRelease(v17);
  *(_QWORD *)(v4 + 48) = 0;
  v18 = *(const void **)(v4 + 56);
  if (v18)
    CFRelease(v18);
  *(_QWORD *)(v4 + 56) = 0;
  return v8;
}

uint64_t CreateSampleGeneratorForMP3(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 0x1D8uLL, 0x102004091A1CF87uLL);
  if (!v2)
    return 12;
  v3 = v2;
  result = 0;
  a1[6] = MP3PushForType;
  a1[7] = MP3FlushForType;
  a1[8] = MP3ResyncForType;
  a1[9] = MP3DestroyForType;
  a1[10] = MP3ReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t MP3PushForType(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t appended;
  AudioFormatID FormatID;
  AudioChannelLayoutTag ChannelLayout;
  unsigned int SampleFrequency;
  unsigned int v16;
  UInt32 SamplesPerFrame;
  const void *v18;
  uint64_t Empty;
  unsigned int v20;
  uint64_t (*v21)(uint64_t, _QWORD, _QWORD);
  size_t DataLength;
  uint64_t v23;
  CFTypeRef v24;
  OpaqueCMBlockBuffer *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  char *returnedPointerOut;
  _BYTE temporaryBlock[4];
  AudioStreamBasicDescription asbd;
  AudioChannelLayout layout;

  v11 = *(_QWORD *)(a1 + 88);
  returnedPointerOut = 0;
  if ((a5 & 1) == 0 || (appended = MP3FlushForType(a1), !(_DWORD)appended))
  {
    appended = CMBlockBufferAccessDataBytes(theBuffer, 0, 4uLL, temporaryBlock, &returnedPointerOut);
    if (!(_DWORD)appended)
    {
      v36 = a6;
      FormatID = MP3GetFormatID(returnedPointerOut);
      ChannelLayout = MP3GetChannelLayout(returnedPointerOut);
      SampleFrequency = MP3GetSampleFrequency((unsigned int *)returnedPointerOut);
      if (!SampleFrequency)
      {
        v32 = 0;
        goto LABEL_35;
      }
      v16 = SampleFrequency;
      if (*(_QWORD *)(a1 + 40)
        && FormatID == *(_DWORD *)(v11 + 20)
        && ChannelLayout == *(_DWORD *)(v11 + 16)
        && SampleFrequency == *(_DWORD *)v11)
      {
        goto LABEL_16;
      }
      MP3FlushForType(a1);
      SamplesPerFrame = MP3GetSamplesPerFrame(returnedPointerOut);
      *(_DWORD *)(v11 + 12) = MP3GetBitRate((unsigned int *)returnedPointerOut);
      memset(&layout.mChannelBitmap, 0, 28);
      memset(&asbd.mFormatID, 0, 32);
      layout.mChannelLayoutTag = ChannelLayout;
      asbd.mSampleRate = (double)v16;
      asbd.mFormatID = FormatID;
      asbd.mFramesPerPacket = SamplesPerFrame;
      asbd.mChannelsPerFrame = (unsigned __int16)ChannelLayout;
      v18 = *(const void **)(a1 + 40);
      if (v18)
      {
        CFRelease(v18);
        *(_QWORD *)(a1 + 40) = 0;
      }
      Empty = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &asbd, 0x20uLL, &layout, 0, 0, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
      if ((_DWORD)Empty)
        return Empty;
      *(_DWORD *)(v11 + 16) = ChannelLayout;
      *(_DWORD *)(v11 + 20) = FormatID;
      *(_DWORD *)v11 = v16;
      v20 = (v16 >> 1) / SamplesPerFrame;
      if (v20 >= 0x18)
        v20 = 24;
      *(_DWORD *)(v11 + 8) = v20;
      v21 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16);
      if (!v21 || (appended = v21(a1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)), !(_DWORD)appended))
      {
LABEL_16:
        DataLength = CMBlockBufferGetDataLength(theBuffer);
        v23 = *(_QWORD *)(a1 + 96);
        if (!v23)
          v23 = *(unsigned int *)(v11 + 8);
        if (v23 == 1)
        {
          if (theBuffer)
            v24 = CFRetain(theBuffer);
          else
            v24 = 0;
          v28 = 0;
          v27 = 0;
          *(_QWORD *)(v11 + 32) = v24;
          *(_DWORD *)(v11 + 40) = 0;
          *(_QWORD *)(v11 + 48) = 0;
          v29 = *(_QWORD *)(a3 + 16);
          *(_OWORD *)(v11 + 56) = *(_OWORD *)a3;
          *(_DWORD *)(v11 + 24) = a5;
          *(_QWORD *)(v11 + 72) = v29;
          *(_QWORD *)(v11 + 80) = v36;
          goto LABEL_28;
        }
        v25 = *(OpaqueCMBlockBuffer **)(v11 + 32);
        if (!v25)
        {
          Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 8), *(_DWORD *)(v11 + 8), 0, (CMBlockBufferRef *)(v11 + 32));
          if ((_DWORD)Empty)
            return Empty;
          *(_DWORD *)(v11 + 40) = 0;
          *(_QWORD *)(v11 + 48) = 0;
          v26 = *(_QWORD *)(a3 + 16);
          *(_OWORD *)(v11 + 56) = *(_OWORD *)a3;
          *(_DWORD *)(v11 + 24) = a5;
          *(_QWORD *)(v11 + 72) = v26;
          *(_QWORD *)(v11 + 80) = v36;
          v25 = *(OpaqueCMBlockBuffer **)(v11 + 32);
        }
        appended = CMBlockBufferAppendBufferReference(v25, theBuffer, 0, DataLength, 0);
        if (!(_DWORD)appended)
        {
          v27 = *(_DWORD *)(v11 + 40);
          v28 = *(_QWORD *)(v11 + 48);
LABEL_28:
          v30 = v11 + 16 * v27;
          *(_QWORD *)(v30 + 88) = v28;
          *(_DWORD *)(v30 + 96) = 1;
          *(_DWORD *)(v30 + 100) = DataLength;
          v31 = v27 + 1;
          *(_DWORD *)(v11 + 40) = v31;
          *(_QWORD *)(v11 + 48) = v28 + DataLength;
          if (v23 > v31)
            return 0;
          return MP3FlushForType(a1);
        }
      }
    }
  }
  v32 = appended;
LABEL_35:
  v34 = *(_QWORD *)(a1 + 88);
  v35 = *(const void **)(v34 + 32);
  if (v35)
    CFRelease(v35);
  *(_DWORD *)(v34 + 40) = 0;
  *(_QWORD *)(v34 + 48) = 0;
  return v32;
}

void MP3ResyncForType(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(const void **)(v1 + 32);
  if (v2)
    CFRelease(v2);
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
}

uint64_t MP3FlushForType(uint64_t a1)
{
  uint64_t v1;
  OpaqueCMBlockBuffer *v2;
  const __CFAllocator *v4;
  const opaqueCMFormatDescription *v5;
  CMItemCount v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  CMTime presentationTimeStamp;
  CMAttachmentBearerRef target;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(OpaqueCMBlockBuffer **)(v1 + 32);
  if (!v2)
    return 0;
  v4 = *(const __CFAllocator **)(a1 + 8);
  v5 = *(const opaqueCMFormatDescription **)(a1 + 40);
  v6 = *(unsigned int *)(v1 + 40);
  presentationTimeStamp = *(CMTime *)(v1 + 56);
  target = 0;
  v7 = CMAudioSampleBufferCreateWithPacketDescriptions(v4, v2, 1u, 0, 0, v5, v6, &presentationTimeStamp, (const AudioStreamPacketDescription *)(v1 + 88), (CMSampleBufferRef *)&target);
  if ((_DWORD)v7)
  {
    v9 = v7;
  }
  else
  {
    v8 = *(unsigned int *)(v1 + 24);
    if ((v8 & 1) != 0)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2698], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
      v8 = *(unsigned int *)(v1 + 24);
    }
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, CMAttachmentBearerRef, _QWORD, uint64_t))(a1 + 24))(a1, *(_QWORD *)(a1 + 32), target, *(_QWORD *)(v1 + 80), v8);
    if (target)
      CFRelease(target);
  }
  v10 = *(const void **)(v1 + 32);
  if (v10)
    CFRelease(v10);
  *(_DWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  return v9;
}

void MP3DestroyForType(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v3 = *(void **)(a1 + 88);
    if (*(_QWORD *)(v1 + 32))
    {
      CFRelease(*(CFTypeRef *)(v1 + 32));
      v3 = *(void **)(a1 + 88);
    }
    *(_DWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0;
    free(v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
}

uint64_t MP3ReadBitRate(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*(_QWORD *)(a1 + 40))
    return 4294954323;
  if (!a2)
    return 4294954516;
  result = 0;
  *a2 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 12);
  return result;
}

const __CFString *FigVTTCopyNodeTypeName(int a1)
{
  CFNumberRef v1;
  CFNumberRef v2;
  const void *Value;
  int valuePtr;

  valuePtr = a1;
  MEMORY[0x19402F294](&FigVTTCopyNodeTypeName_once, figVTT_initNodeVTTTypeNameMapping);
  if (sVTTNodeTypeNameMapping
    && (v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr)) != 0
    && (v2 = v1, Value = CFDictionaryGetValue((CFDictionaryRef)sVTTNodeTypeNameMapping, v1), CFRelease(v2), Value))
  {
    return (const __CFString *)CFRetain(Value);
  }
  else
  {
    return CFSTR("<node-type-name-failure>");
  }
}

void figVTT_initNodeVTTTypeNameMapping()
{
  const __CFAllocator *v0;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v2;
  uint64_t i;
  CFNumberRef v4;
  int valuePtr;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v2 = Mutable;
    for (i = 0; i != 128; i += 16)
    {
      valuePtr = *(_DWORD *)((char *)&unk_1E2F9A928 + i);
      v4 = CFNumberCreate(v0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v2, v4, *(const void **)((char *)&unk_1E2F9A928 + i + 8));
      if (v4)
        CFRelease(v4);
    }
    sVTTNodeTypeNameMapping = (uint64_t)v2;
  }
  else
  {
    FigSignalErrorAt();
  }
}

const __CFString *FigVTTCopySectionTypeName(int a1)
{
  CFNumberRef v1;
  CFNumberRef v2;
  const void *Value;
  int valuePtr;

  valuePtr = a1;
  MEMORY[0x19402F294](&FigVTTCopySectionTypeName_once, figVTT_initVTTSectionTypeNameMapping);
  if (sVTTSectionTypeNameMapping
    && (v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr)) != 0
    && (v2 = v1, Value = CFDictionaryGetValue((CFDictionaryRef)sVTTSectionTypeNameMapping, v1), CFRelease(v2), Value))
  {
    return (const __CFString *)CFRetain(Value);
  }
  else
  {
    return CFSTR("<section-type-name-failure>");
  }
}

void figVTT_initVTTSectionTypeNameMapping()
{
  const __CFAllocator *v0;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v2;
  uint64_t i;
  CFNumberRef v4;
  int valuePtr;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v2 = Mutable;
    for (i = 0; i != 64; i += 16)
    {
      valuePtr = *(_DWORD *)((char *)&unk_1E2F9A9A8 + i);
      v4 = CFNumberCreate(v0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v2, v4, *(const void **)((char *)&unk_1E2F9A9A8 + i + 8));
      if (v4)
        CFRelease(v4);
    }
    sVTTSectionTypeNameMapping = (uint64_t)v2;
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t CreateSampleGeneratorForMpeg2Video(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 0x98uLL, 0x10600405E1F1638uLL);
  if (!v2)
    return 12;
  v3 = v2;
  result = 0;
  a1[6] = M2VPushForType;
  a1[7] = M2VFlushForType;
  a1[8] = M2VResyncForType;
  a1[9] = M2VDestroyForType;
  a1[10] = M2VGetBitRateForType;
  a1[11] = v3;
  return result;
}

uint64_t M2VPushForType(uint64_t a1, OpaqueCMBlockBuffer *cf, __int128 *a3, CMTime *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t DataPointer;
  int *v11;
  int v12;
  unsigned int v15;
  OpaqueCMBlockBuffer *v16;
  __CFDictionary *Mutable;
  uint64_t v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CMBlockBufferRef v24;
  OpaqueCMBlockBuffer *v25;
  uint64_t appended;
  CFTypeRef v27;
  CFTypeRef v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  int v43;
  int v44;
  int v45;
  const void *v46;
  const void *v47;
  __CFDictionary *v48;
  const void *v49;
  const void *v50;
  int v51;
  uint64_t Contiguous;
  unsigned int v53;
  size_t v54;
  const void *v55;
  uint64_t v56;
  size_t v57;
  char *v58;
  CFTypeRef *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  char v64;
  size_t v65;
  char *v66;
  CMTimeValue v67;
  int v68;
  CFAllocatorRef *v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  BOOL v82;
  CMTimeValue v83;
  int v84;
  char *v85;
  CFNumberRef v86;
  CFNumberRef v87;
  int v88;
  const __CFAllocator *v89;
  CFNumberRef v90;
  CFNumberRef v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  const void *v95;
  const void **v96;
  const __CFAllocator *v97;
  CMVideoCodecType v98;
  const void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *value;
  void *v105;
  void *key;
  void *v107;
  const void *v108;
  CMBlockBufferRef *v109;
  const void *v110;
  int v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  char v115;
  CFTypeRef cfa;
  size_t dataLength;
  uint64_t v120;
  CMVideoFormatDescriptionRef *v121;
  size_t offsetToData;
  uint64_t v123;
  OpaqueCMBlockBuffer *targetBBuf;
  int *v125;
  CFNumberRef v126;
  int v127;
  CFNumberRef v128;
  int v129;
  CMTime returnedPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  char *temporaryBlock;
  CMBlockBufferRef blockBufferOut;
  int v137;
  int valuePtr;
  char *v139;
  _OWORD v140[2];
  uint64_t v141;

  DataPointer = 0;
  v141 = *MEMORY[0x1E0C80C00];
  v11 = *(int **)(a1 + 88);
  v137 = 24;
  valuePtr = 1;
  blockBufferOut = 0;
  v121 = (CMVideoFormatDescriptionRef *)(a1 + 40);
  v12 = (a5 >> 1) & 1;
  if (*(_QWORD *)(a1 + 40))
    v12 = 1;
  if ((a5 & 0x800) != 0 || !v12)
    return DataPointer;
  v15 = a5;
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v139 = 0;
  memset(v140, 0, sizeof(v140));
  Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  targetBBuf = v16;
  if (!Mutable)
  {
    Contiguous = FigSignalErrorAt();
LABEL_217:
    DataPointer = Contiguous;
    goto LABEL_218;
  }
  v115 = v15;
  cfa = CMGetAttachment(v16, CFSTR("ByteOffsetToSecondField"), 0);
  v114 = a6;
  v120 = a1;
  if ((v15 & 2) == 0 && *((_BYTE *)v11 + 16) == (cfa != 0))
  {
    LODWORD(v20) = 0;
LABEL_11:
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v126 = 0;
    v128 = 0;
    goto LABEL_12;
  }
  v112 = cfa != 0;
  v113 = v15;
  v125 = v11;
  if (a7 < 1)
  {
    v32 = 0;
    v51 = 0;
    v129 = 0;
    v53 = 0;
    BYTE4(v123) = 0;
    LODWORD(v20) = 0;
    v30 = 0;
LABEL_90:
    if (!*v121)
      goto LABEL_11;
LABEL_91:
    if (*((unsigned __int8 *)v11 + 16) == v112)
      goto LABEL_11;
    v63 = v20;
    FigFormatDescriptionRelease();
    LODWORD(v20) = v63;
    *v121 = 0;
    if (v63)
    {
LABEL_127:
      *v11 = v32;
      v11[1] = v51;
      v11[2] = v129;
      *((_BYTE *)v11 + 12) = v53;
      *((_BYTE *)v11 + 13) = BYTE4(v123);
      *((_BYTE *)v11 + 128) = v30;
    }
    *((_BYTE *)v11 + 16) = v112;
    LODWORD(returnedPointerOut.value) = 0;
    LODWORD(temporaryBlock) = 0;
    v69 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v30)
    {
      v70 = *((unsigned __int8 *)v11 + 12);
      v71 = v70 - 2;
      if ((v70 - 2) <= 2)
      {
        v72 = v11[1];
        if (v72 != 720)
          goto LABEL_144;
        v73 = *v11;
        if (*v11 == 480)
          goto LABEL_134;
        if (v73 != 576)
        {
          if (v73 == 486)
          {
LABEL_134:
            if (v70 == 3)
            {
              v76 = 40;
              LODWORD(returnedPointerOut.value) = 40;
              v77 = 33;
              goto LABEL_174;
            }
            if (v70 != 2)
              goto LABEL_155;
            goto LABEL_143;
          }
LABEL_144:
          if (v71 > 2)
          {
            v79 = 0;
            v80 = 0;
          }
          else
          {
            v78 = (char)v71;
            v79 = dword_1932FBDA0[(char)v71];
            v80 = dword_1932FBDAC[v78];
          }
          goto LABEL_156;
        }
        if (v70 == 3)
        {
          v76 = 118;
          LODWORD(returnedPointerOut.value) = 118;
          v77 = 81;
          goto LABEL_174;
        }
        if (v70 != 2)
        {
LABEL_155:
          v80 = 221;
          v79 = 100;
LABEL_156:
          v76 = *v11 * v80;
          LODWORD(returnedPointerOut.value) = v76;
          v77 = v72 * v79;
          goto LABEL_174;
        }
LABEL_154:
        v76 = 59;
        LODWORD(returnedPointerOut.value) = 59;
        v77 = 54;
        goto LABEL_174;
      }
LABEL_180:
      v21 = 0;
      v86 = 0;
      v87 = 0;
      goto LABEL_181;
    }
    v74 = *((unsigned __int8 *)v11 + 13);
    if (v74 == 4)
      goto LABEL_140;
    if (v74 != 3)
    {
      if (v74 == 1)
      {
LABEL_140:
        if (*v11 == 240)
        {
          v75 = v11[1];
          if (v75 == 384)
          {
            v84 = *((unsigned __int8 *)v11 + 12);
            if (v84 == 14 || v84 == 1)
            {
              v76 = 5;
              LODWORD(returnedPointerOut.value) = 5;
              v77 = 6;
              goto LABEL_174;
            }
          }
          else if (v75 == 352)
          {
LABEL_143:
            v76 = 10;
            LODWORD(returnedPointerOut.value) = 10;
            v77 = 11;
LABEL_174:
            LODWORD(temporaryBlock) = v77;
            v21 = 0;
            v86 = 0;
            v87 = 0;
            if (v76 >= 1 && v77 >= 1)
            {
              v88 = v20;
              v21 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v120 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v21 && (v89 = *v69, (v90 = CFNumberCreate(*v69, kCFNumberSInt32Type, &returnedPointerOut)) != 0))
              {
                v86 = v90;
                v91 = CFNumberCreate(v89, kCFNumberSInt32Type, &temporaryBlock);
                if (v91)
                {
                  v87 = v91;
                  CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E0CA8E60], v86);
                  CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E0CA8E70], v87);
                  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8E68], v21);
                  LODWORD(v20) = v88;
                  goto LABEL_181;
                }
                v128 = v86;
              }
              else
              {
                v128 = 0;
              }
              DataPointer = FigSignalErrorAt();
              v22 = 0;
              v23 = 0;
              v126 = 0;
              goto LABEL_196;
            }
LABEL_181:
            v92 = a7;
            v93 = a10;
            v126 = v87;
            v128 = v86;
            v94 = v20;
            if (!cfa)
            {
              if ((v113 & 0x600) != 0)
                valuePtr = 2;
              goto LABEL_189;
            }
            valuePtr = 2;
            if ((v113 & 0x200) != 0)
            {
              v95 = (const void *)*MEMORY[0x1E0CA8DD0];
              v96 = (const void **)MEMORY[0x1E0CA8DD8];
            }
            else
            {
              if ((v113 & 0x400) == 0)
              {
LABEL_189:
                v97 = *v69;
                v22 = CFNumberCreate(*v69, kCFNumberIntType, &valuePtr);
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8DC8], v22);
                v23 = CFNumberCreate(v97, kCFNumberSInt32Type, &v137);
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA21B0], v23);
                if (!CFDictionaryGetCount(Mutable))
                {
                  CFRelease(Mutable);
                  Mutable = 0;
                }
                v15 = v113;
                if (*((_BYTE *)v125 + 128))
                  v98 = 1836069494;
                else
                  v98 = 1836069238;
                appended = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(v120 + 8), v98, v125[1], *v125, Mutable, v121);
                if ((_DWORD)appended)
                  goto LABEL_219;
                DataPointer = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v120 + 16))(v120, *(_QWORD *)(v120 + 32), *(_QWORD *)(v120 + 40));
                LODWORD(v20) = v94;
                a10 = v93;
                a7 = v92;
                v11 = v125;
                if ((_DWORD)DataPointer)
                  goto LABEL_196;
LABEL_12:
                v24 = targetBBuf;
                if ((v115 & 0x10) == 0
                  || (v24 = targetBBuf, (_DWORD)v20)
                  || (v25 = (OpaqueCMBlockBuffer *)*((_QWORD *)v11 + 17), v24 = targetBBuf, !v25))
                {
LABEL_18:
                  if (*v121)
                  {
                    if ((*((_BYTE *)a3 + 12) & 1) == 0)
                      puts("mpeg2 video pts is invalid");
                    returnedPointerOut = *a4;
                    DataPointer = PushM2VFrame(v120, &returnedPointerOut, 1);
                    v27 = cfa;
                    if (cfa)
                      v27 = CFRetain(cfa);
                    *((_QWORD *)v11 + 15) = v27;
                    if (v24)
                      v28 = CFRetain(v24);
                    else
                      v28 = 0;
                    *((_QWORD *)v11 + 3) = v28;
                    v60 = *a3;
                    *((_QWORD *)v11 + 6) = *((_QWORD *)a3 + 2);
                    *((_OWORD *)v11 + 2) = v60;
                    v61 = *(_OWORD *)&a4->value;
                    *((_QWORD *)v11 + 9) = a4->epoch;
                    *(_OWORD *)(v11 + 14) = v61;
                    v11[26] = v15;
                    *((_QWORD *)v11 + 14) = v114;
                    *((_BYTE *)v11 + 15) = 0;
                    if ((v15 & 0x20) != 0)
                    {
                      *((_BYTE *)v11 + 14) = 1;
                      if (a7 >= 1)
                      {
                        v62 = 0;
                        while (*(unsigned __int8 *)(a10 + v62) != 184)
                        {
                          if (++v62 >= a7)
                            goto LABEL_100;
                        }
                        LOBYTE(returnedPointerOut.value) = 0;
                        appended = CMBlockBufferCopyDataBytes(v24, *(_QWORD *)(a8 + 8 * v62) + 7, 1uLL, &returnedPointerOut);
                        if ((_DWORD)appended)
                          goto LABEL_219;
                        v64 = returnedPointerOut.value;
                        if ((returnedPointerOut.value & 0x40) == 0)
                          *((_BYTE *)v11 + 14) = 0;
                        if ((v64 & 0x20) != 0)
                          *((_BYTE *)v11 + 15) = 1;
                        DataPointer = 0;
LABEL_100:
                        if (!*((_BYTE *)v11 + 14))
                          v11[26] |= 0x40u;
                      }
                      if (*((_BYTE *)v11 + 15))
                        v11[26] |= 0x80u;
                    }
                  }
                  else
                  {
                    DataPointer = 0;
                  }
                  goto LABEL_196;
                }
                appended = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(v120 + 8), v25, 0, 0, 0, &blockBufferOut);
                if (!(_DWORD)appended)
                {
                  appended = CMBlockBufferAppendBufferReference(blockBufferOut, targetBBuf, 0, 0, 0);
                  if (!(_DWORD)appended)
                  {
                    v24 = blockBufferOut;
                    goto LABEL_18;
                  }
                }
LABEL_219:
                DataPointer = appended;
                goto LABEL_196;
              }
              v95 = (const void *)*MEMORY[0x1E0CA8DD0];
              v96 = (const void **)MEMORY[0x1E0CA8DE0];
            }
            CFDictionarySetValue(Mutable, v95, *v96);
            goto LABEL_189;
          }
        }
      }
LABEL_172:
      if (*((unsigned __int8 *)v11 + 12) - 1 <= 0xD)
      {
        v85 = (char *)&sM1VPixelAspectRatios + 4 * v53;
        v76 = *((__int16 *)v85 - 2);
        LODWORD(returnedPointerOut.value) = v76;
        v77 = *((__int16 *)v85 - 1);
        goto LABEL_174;
      }
      goto LABEL_180;
    }
    v81 = *v11;
    if (*v11 == 208)
    {
      if (v11[1] != 368)
        goto LABEL_172;
      v76 = 65;
    }
    else
    {
      if (v81 != 272)
      {
        if (v81 == 288 && v11[1] == 352)
          goto LABEL_154;
        goto LABEL_172;
      }
      if (v11[1] != 368)
        goto LABEL_172;
      v76 = 68;
    }
    LODWORD(returnedPointerOut.value) = v76;
    v77 = 69;
    goto LABEL_174;
  }
  dataLength = 0;
  offsetToData = 0;
  v123 = 0;
  v29 = 0;
  v30 = 0;
  v20 = 0;
  v31 = 0;
  v129 = 0;
  v127 = 0;
  v32 = 0;
  key = (void *)*MEMORY[0x1E0CA8D68];
  value = (void *)*MEMORY[0x1E0CA8DA0];
  v110 = (const void *)*MEMORY[0x1E0CA8D88];
  v105 = (void *)*MEMORY[0x1E0CA8E98];
  v103 = (void *)*MEMORY[0x1E0CA8EC0];
  v108 = (const void *)*MEMORY[0x1E0CA8EB0];
  v107 = (void *)*MEMORY[0x1E0CA8EE8];
  v102 = (void *)*MEMORY[0x1E0CA8F30];
  v101 = (void *)*MEMORY[0x1E0CA8F10];
  v100 = (const void *)*MEMORY[0x1E0CA8F18];
  do
  {
    v33 = *(unsigned __int8 *)(a10 + v31);
    if (*(_BYTE *)(a10 + v31) && v33 != 184)
    {
      if (!v29)
        dataLength += *(_QWORD *)(a9 + 8 * v31);
    }
    else
    {
      v29 = 1;
    }
    if (v33 != 179)
    {
      if (v33 != 181)
      {
        if (!*(_BYTE *)(a10 + v31))
          break;
        goto LABEL_65;
      }
      if (*(_QWORD *)(a9 + 8 * v31) <= 7uLL)
      {
        v35 = FigSignalErrorAt();
LABEL_215:
        DataPointer = v35;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v126 = 0;
        v128 = 0;
        goto LABEL_196;
      }
      v38 = a7;
      v39 = a10;
      v40 = v20;
      if ((_DWORD)v20)
        v30 = 1;
      v35 = CMBlockBufferAccessDataBytes(v16, *(_QWORD *)(a8 + 8 * v31) + 4, 4uLL, v140, &v139);
      if ((_DWORD)v35)
        goto LABEL_215;
      v41 = *v139;
      if (v41 >> 4 != 2)
      {
        v20 = v40;
        if (v41 >> 4 == 1)
        {
          v42 = v139[2];
          v127 |= (32 * (v42 & 0x80)) & 0xDFFF | ((v139[1] & 1) << 13);
          v32 |= (v42 & 0x60) << 7;
          v129 |= (v139[3] << 17) & 0x1FC0000 | ((v42 & 0x1F) << 25);
        }
        goto LABEL_64;
      }
      if ((v41 & 1) == 0)
        goto LABEL_63;
      v43 = v139[1];
      v44 = v139[2];
      v45 = v139[3];
      v46 = v110;
      if (v43 != 1)
      {
        if (v43 != 6)
          goto LABEL_52;
        v46 = value;
      }
      CFDictionarySetValue(Mutable, key, v46);
LABEL_52:
      v47 = v108;
      if (v44 != 1)
      {
        if (v44 != 7)
          goto LABEL_56;
        v47 = v103;
      }
      CFDictionarySetValue(Mutable, v105, v47);
LABEL_56:
      if (v45 == 7)
      {
        CFDictionarySetValue(Mutable, v107, v102);
        v16 = targetBBuf;
      }
      else
      {
        v16 = targetBBuf;
        if (v45 == 6)
        {
          v48 = Mutable;
          v49 = v107;
          v50 = v101;
          goto LABEL_62;
        }
        if (v45 == 1)
        {
          v48 = Mutable;
          v49 = v107;
          v50 = v100;
LABEL_62:
          CFDictionarySetValue(v48, v49, v50);
        }
      }
LABEL_63:
      v20 = v40;
LABEL_64:
      a10 = v39;
      a7 = v38;
      v11 = v125;
      goto LABEL_65;
    }
    if (*(_QWORD *)(a9 + 8 * v31) < 0xBuLL)
    {
      v35 = FigSignalErrorAt();
      if ((_DWORD)v35)
        goto LABEL_215;
    }
    else
    {
      v34 = *(_QWORD *)(a8 + 8 * v31);
      returnedPointerOut.value = 0;
      v35 = CMBlockBufferAccessDataBytes(v16, v34 + 4, 7uLL, &temporaryBlock, (char **)&returnedPointerOut);
      if ((_DWORD)v35)
        goto LABEL_215;
      v36 = *(unsigned __int8 *)(returnedPointerOut.value + 1);
      v127 = (v36 >> 4) | (16 * *(unsigned __int8 *)returnedPointerOut.value);
      v32 = *(unsigned __int8 *)(returnedPointerOut.value + 2) | ((v36 & 0xF) << 8);
      v37 = *(unsigned __int8 *)(returnedPointerOut.value + 3);
      LODWORD(v123) = v37 >> 4;
      BYTE4(v123) = v37 & 0xF;
      v129 = (*(unsigned __int8 *)(returnedPointerOut.value + 4) << 10) | (4
                                                                         * *(unsigned __int8 *)(returnedPointerOut.value
                                                                                              + 5)) | (*(unsigned __int8 *)(returnedPointerOut.value + 6) >> 6);
    }
    offsetToData = *(_QWORD *)(a8 + 8 * v31);
    v20 = 1;
LABEL_65:
    ++v31;
  }
  while (v31 < a7);
  if ((v115 & 0x10) == 0 || !(_DWORD)v20)
  {
    v15 = v113;
    v53 = v123;
    v51 = v127;
    if (!(_DWORD)v20)
      goto LABEL_90;
    goto LABEL_122;
  }
  v111 = v20;
  v15 = v113;
  v51 = v127;
  if (!*((_QWORD *)v11 + 17))
  {
    Contiguous = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v120 + 8), v16, *(CFAllocatorRef *)(v120 + 8), 0, offsetToData, dataLength, 2u, (CMBlockBufferRef *)v11 + 17);
    LODWORD(v20) = v111;
    v53 = v123;
    if ((_DWORD)Contiguous)
      goto LABEL_217;
LABEL_122:
    if (!*v121)
      goto LABEL_127;
    if (v32 != *v11 || v51 != v11[1] || v53 != *((unsigned __int8 *)v11 + 12))
    {
      v68 = v20;
      FigFormatDescriptionRelease();
      LODWORD(v20) = v68;
      *v121 = 0;
      goto LABEL_127;
    }
    goto LABEL_91;
  }
  v109 = (CMBlockBufferRef *)(v11 + 34);
  returnedPointerOut.value = 0;
  Contiguous = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v120 + 8), v16, *(CFAllocatorRef *)(v120 + 8), 0, offsetToData, dataLength, 2u, (CMBlockBufferRef *)&returnedPointerOut);
  if ((_DWORD)Contiguous)
    goto LABEL_217;
  v53 = v123;
  if (!FigBlockBufferCompare())
  {
LABEL_119:
    if (returnedPointerOut.value)
      CFRelease((CFTypeRef)returnedPointerOut.value);
    LODWORD(v20) = v111;
    goto LABEL_122;
  }
  dataPointerOut = 0;
  temporaryBlock = 0;
  v54 = CMBlockBufferGetDataLength(*v109);
  totalLengthOut = 0;
  lengthAtOffsetOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(*v109, 0, &lengthAtOffsetOut, &totalLengthOut, &temporaryBlock);
  v55 = (const void *)returnedPointerOut.value;
  if (!(_DWORD)DataPointer)
  {
    v56 = CMBlockBufferGetDataPointer((CMBlockBufferRef)returnedPointerOut.value, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if (!(_DWORD)v56)
    {
      v57 = 0;
      if (v54)
      {
        v58 = temporaryBlock - 1;
        v59 = (CFTypeRef *)(v11 + 34);
        while (!v58[v54])
        {
          --v58;
          if (v54 == ++v57)
          {
            v57 = v54;
            break;
          }
        }
      }
      else
      {
        v59 = (CFTypeRef *)(v11 + 34);
      }
      v65 = 0;
      if (dataLength)
      {
        v66 = dataPointerOut - 1;
        while (!v66[dataLength])
        {
          --v66;
          if (dataLength == ++v65)
          {
            v65 = dataLength;
            break;
          }
        }
      }
      if (v54 - v57 == dataLength - v65 && !memcmp(temporaryBlock, dataPointerOut, v54 - v57))
      {
        v82 = dataLength >= v54;
        v51 = v127;
        if (!v82)
        {
          if (*v59)
            CFRelease(*v59);
          v83 = returnedPointerOut.value;
          if (returnedPointerOut.value)
            v83 = (CMTimeValue)CFRetain((CFTypeRef)returnedPointerOut.value);
          *v59 = (CFTypeRef)v83;
        }
      }
      else
      {
        if (*v59)
          CFRelease(*v59);
        v67 = returnedPointerOut.value;
        v51 = v127;
        if (returnedPointerOut.value)
          v67 = (CMTimeValue)CFRetain((CFTypeRef)returnedPointerOut.value);
        *((_QWORD *)v11 + 17) = v67;
        *((_BYTE *)v11 + 144) = 1;
      }
      goto LABEL_119;
    }
    DataPointer = v56;
    v55 = (const void *)returnedPointerOut.value;
  }
  if (v55)
    CFRelease(v55);
LABEL_218:
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v126 = 0;
  v128 = 0;
LABEL_196:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (Mutable)
    CFRelease(Mutable);
  if (v21)
    CFRelease(v21);
  if (v22)
    CFRelease(v22);
  if (v23)
    CFRelease(v23);
  if (v128)
    CFRelease(v128);
  if (v126)
    CFRelease(v126);
  if (targetBBuf)
    CFRelease(targetBBuf);
  return DataPointer;
}

void M2VResyncForType(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(const void **)(v1 + 24);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(v1 + 24) = 0;
  if (*(_BYTE *)(v1 + 144))
  {
    v3 = *(const void **)(v1 + 136);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v1 + 136) = 0;
    }
  }
  v4 = *(const void **)(v1 + 120);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v1 + 120) = 0;
  }
}

uint64_t M2VFlushForType(uint64_t a1)
{
  return PushM2VFrame(a1, MEMORY[0x1E0CA2E18], 0);
}

void M2VDestroyForType(uint64_t a1)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v3 = *(const void **)(v1 + 24);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v1 + 24) = 0;
    }
    v4 = *(const void **)(v1 + 136);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v1 + 136) = 0;
    }
    free(*(void **)(a1 + 88));
    *(_QWORD *)(a1 + 88) = 0;
  }
}

uint64_t M2VGetBitRateForType(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4294954516;
  result = 0;
  *a2 = 400 * *(unsigned int *)(*(_QWORD *)(a1 + 88) + 8);
  return result;
}

uint64_t PushM2VFrame(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t v4;
  OpaqueCMBlockBuffer *v5;
  __int128 v8;
  CMTimeEpoch v9;
  uint64_t v10;
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;
  __CFDictionary *v13;
  int v14;
  const void *v15;
  const void *v16;
  const void **v17;
  const void **v18;
  const void *v19;
  const void *v20;
  const void *v21;
  CMTime rhs;
  CMTime lhs;
  size_t sampleSizeArray;
  CMSampleBufferRef sbuf;
  CMSampleTimingInfo sampleTimingArray;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(OpaqueCMBlockBuffer **)(v4 + 24);
  if (!v5)
    return 0;
  sbuf = 0;
  sampleSizeArray = CMBlockBufferGetDataLength(v5);
  if (a3)
  {
    lhs = *a2;
    rhs = *(CMTime *)(v4 + 56);
    CMTimeSubtract(&sampleTimingArray.duration, &lhs, &rhs);
    *(_OWORD *)(v4 + 80) = *(_OWORD *)&sampleTimingArray.duration.value;
    *(_QWORD *)(v4 + 96) = sampleTimingArray.duration.epoch;
  }
  v8 = *(_OWORD *)(v4 + 56);
  sampleTimingArray.decodeTimeStamp.epoch = *(_QWORD *)(v4 + 72);
  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = v8;
  *(_OWORD *)&sampleTimingArray.duration.value = *(_OWORD *)(v4 + 80);
  sampleTimingArray.duration.epoch = *(_QWORD *)(v4 + 96);
  v9 = *(_QWORD *)(v4 + 48);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *(_OWORD *)(v4 + 32);
  sampleTimingArray.presentationTimeStamp.epoch = v9;
  v10 = CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 8), *(CMBlockBufferRef *)(v4 + 24), 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 40), 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &sbuf);
  if (!(_DWORD)v10)
  {
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
    if (SampleAttachmentsArray)
    {
      ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      v13 = ValueAtIndex;
      v14 = *(_DWORD *)(v4 + 104);
      v15 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((v14 & 0x10) != 0)
      {
        if (!*(_BYTE *)(v4 + 14))
        {
          CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA2620], (const void *)*MEMORY[0x1E0C9AE50]);
          CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E0CA2628], v15);
        }
        v16 = (const void *)*MEMORY[0x1E0C9AE40];
        v17 = (const void **)MEMORY[0x1E0CA25E0];
        v18 = (const void **)MEMORY[0x1E0CA25C8];
      }
      else
      {
        CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA2620], (const void *)*MEMORY[0x1E0C9AE50]);
        if ((v14 & 8) != 0)
        {
          v17 = (const void **)MEMORY[0x1E0CA25E0];
          v18 = (const void **)MEMORY[0x1E0CA25C8];
          v16 = v15;
        }
        else
        {
          v16 = (const void *)*MEMORY[0x1E0C9AE40];
          v17 = (const void **)MEMORY[0x1E0CA25C8];
          v18 = (const void **)MEMORY[0x1E0CA2618];
        }
      }
      CFDictionarySetValue(v13, *v18, v16);
      CFDictionarySetValue(v13, *v17, v15);
      v19 = *(const void **)(v4 + 120);
      if (v19)
        CFDictionarySetValue(v13, CFSTR("ByteOffsetToSecondField"), v19);
    }
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, CMSampleBufferRef, _QWORD, _QWORD))(a1 + 24))(a1, *(_QWORD *)(a1 + 32), sbuf, *(_QWORD *)(v4 + 112), *(unsigned int *)(v4 + 104));
    if (sbuf)
      CFRelease(sbuf);
  }
  v20 = *(const void **)(v4 + 24);
  if (v20)
    CFRelease(v20);
  *(_QWORD *)(v4 + 24) = 0;
  v21 = *(const void **)(v4 + 120);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(v4 + 120) = 0;
  }
  return v10;
}

uint64_t FigTTMLDocumentWriterCreateStyleSpanBuilder(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterStyleSpanBuilder_Finalize(uint64_t a1)
{
  const void *v1;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
    CFRelease(v1);
}

CFStringRef figTTMLDocumentWriterStyleSpanBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterStyleSpanBuilder[%p]"), a1);
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_StartElement(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_EndElement(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterEndElement(*DerivedStorage);
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *);
  uint64_t v7;
  const __CFArray *Mutable;
  uint64_t (*v9)(uint64_t);
  const __CFString *v10;
  uint64_t v11;
  CFIndex Length;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  const void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, const void *, const __CFAllocator *, _QWORD, _BYTE *);
  uint64_t v20;
  CFIndex v21;
  CFIndex v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  CFTypeRef v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, const __CFAllocator *, _BYTE *);
  uint64_t v31;
  CFIndex v32;
  CFMutableArrayRef v33;
  CFIndex i;
  const void *v35;
  uint64_t v36;
  const __CFDictionary *v37;
  CFIndex v38;
  size_t v39;
  const void **v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  CFDictionaryRef v44;
  const void *v45;
  const __CFDictionary *Value;
  const __CFDictionary *v47;
  uint64_t v48;
  void *v49;
  uint64_t v51;
  CFIndex v52;
  const __CFArray *v53;
  const void *v54;
  uint64_t DerivedStorage;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  __CFArray *v59;
  CMTimeRange v60;
  uint64_t v61;
  CFTypeRef cf;
  CMTimeRange theArray;
  CMTime time;
  int valuePtr;
  _BYTE start[56];
  const __CFDictionary *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  CFRange v72;
  CFRange v73;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  theArray.start.value = 0;
  v3 = *MEMORY[0x1E0CA3368];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v6)
  {
    Mutable = 0;
    v11 = 4294954514;
    goto LABEL_20;
  }
  v7 = v6(CMBaseObject, v3, v4, &theArray);
  if ((_DWORD)v7)
  {
    v11 = v7;
LABEL_19:
    Mutable = 0;
    goto LABEL_20;
  }
  Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v9)
      v10 = (const __CFString *)v9(a2);
    else
      v10 = &stru_1E2FD85F8;
    Length = CFStringGetLength(v10);
    Count = CFArrayGetCount((CFArrayRef)theArray.start.value);
    if (!Count)
    {
LABEL_16:
      v72.length = CFArrayGetCount(Mutable);
      v72.location = 0;
      CFArraySortValues(Mutable, v72, (CFComparatorFunction)MEMORY[0x1E0C98910], 0);
      v11 = 0;
      goto LABEL_20;
    }
    v14 = Count;
    v15 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.start.value, v15);
      *(_QWORD *)start = 0;
      *(_QWORD *)&start[8] = 0;
      if (Length)
        break;
LABEL_15:
      if (++v15 == v14)
        goto LABEL_16;
    }
    v17 = ValueAtIndex;
    v18 = 0;
    while (1)
    {
      v19 = *(uint64_t (**)(uint64_t, uint64_t, const void *, const __CFAllocator *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v19)
      {
        v11 = 4294954514;
        goto LABEL_18;
      }
      v20 = v19(a2, v18, v17, v4, 0, start);
      if ((_DWORD)v20)
        break;
      v18 = *(_QWORD *)&start[8] + *(_QWORD *)start;
      FigCFArrayAppendCFIndex();
      if (v18 == Length)
        goto LABEL_15;
    }
    v11 = v20;
LABEL_18:
    CFRelease(Mutable);
    goto LABEL_19;
  }
  v11 = FigSignalErrorAt();
LABEL_20:
  if (theArray.start.value)
    CFRelease((CFTypeRef)theArray.start.value);
  if ((_DWORD)v11)
  {
LABEL_86:
    if (!Mutable)
      goto LABEL_88;
    goto LABEL_87;
  }
  v21 = CFArrayGetCount(Mutable);
  if (v21)
  {
    v22 = v21;
    v51 = v3;
    v23 = 0;
    v24 = 0;
    v25 = (const void *)*MEMORY[0x1E0CA35E0];
    v53 = Mutable;
    v54 = (const void *)*MEMORY[0x1E0CA35E0];
    v52 = v21;
    while (1)
    {
      v61 = 0;
      FigCFArrayGetCFIndexAtIndex();
      if (v61 == v24)
        goto LABEL_77;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v26 = FigCaptionDataCopySubrange();
      if ((_DWORD)v26)
        goto LABEL_92;
      v57 = *(_QWORD *)DerivedStorage;
      v27 = cf;
      v28 = *(_OWORD *)(DerivedStorage + 8);
      *(_QWORD *)&start[16] = *(_QWORD *)(DerivedStorage + 24);
      *(_OWORD *)start = v28;
      *(_OWORD *)&theArray.start.value = *(_OWORD *)(DerivedStorage + 32);
      theArray.start.epoch = *(_QWORD *)(DerivedStorage + 48);
      CMTimeRangeFromTimeToTime(&v60, (CMTime *)start, &theArray.start);
      *(_QWORD *)start = 0;
      v58 = v27;
      v29 = FigCaptionDataGetCMBaseObject();
      v30 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v30)
      {
        v31 = v30(v29, v51, v4, start);
        if (!(_DWORD)v31)
        {
          v32 = CFArrayGetCount(*(CFArrayRef *)start);
          v33 = CFArrayCreateMutable(v4, v32, MEMORY[0x1E0C9B378]);
          if (v33)
          {
            v59 = v33;
            v11 = CFArrayGetCount(*(CFArrayRef *)start);
            if (v11)
            {
              for (i = 0; i != v11; ++i)
              {
                v35 = CFArrayGetValueAtIndex(*(CFArrayRef *)start, i);
                if (!CFEqual(v35, v25))
                  CFArrayAppendValue(v59, v35);
              }
              v11 = 0;
            }
            goto LABEL_39;
          }
          v31 = FigSignalErrorAt();
        }
        v11 = v31;
        v59 = 0;
      }
      else
      {
        v59 = 0;
        v11 = 4294954514;
      }
LABEL_39:
      if (*(_QWORD *)start)
        CFRelease(*(CFTypeRef *)start);
      if ((_DWORD)v11)
        goto LABEL_73;
      theArray = v60;
      v70 = 0;
      v71 = 0;
      MEMORY[0x19402F294](&getCaptionStylePropertyToAttributesMapping_once, initCaptionStylePropertyToAttributesMapping);
      v36 = sCaptionStylePropertyToAttributesMapping;
      v37 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(CMTimeRange *)&start[8] = theArray;
      *(_QWORD *)start = v58;
      v67 = v37;
      v68 = v36;
      v69 = 0;
      v73.length = CFArrayGetCount(v59);
      v73.location = 0;
      CFArrayApplyFunction(v59, v73, (CFArrayApplierFunction)buildTimeToAttributesMap, start);
      v56 = v23;
      if ((_DWORD)v69 || (v38 = CFDictionaryGetCount(v37), v38 < 1))
      {
        v49 = 0;
        v44 = 0;
        v40 = 0;
        v11 = 0;
        goto LABEL_60;
      }
      v39 = v38;
      v40 = 0;
      if (!((unint64_t)v38 >> 61))
      {
        v41 = 8 * v38;
        if (8 * v39)
          v40 = (const void **)malloc_type_malloc(v41, 0x5CC9CBA6uLL);
      }
      CFDictionaryGetKeysAndValues(v37, v40, 0);
      qsort_r(v40, v39, 8uLL, 0, (int (__cdecl *)(void *, const void *, const void *))compareCFNumber);
      v42 = FigTTMLDocumentWriterElementCreate((uint64_t)v4, 5, 0, (uint64_t *)&v71);
      if ((_DWORD)v42)
      {
        v11 = v42;
        v49 = 0;
        v44 = 0;
        Mutable = v53;
        goto LABEL_60;
      }
      v43 = 0;
      v44 = 0;
      while (1)
      {
        v45 = v40[v43];
        Value = (const __CFDictionary *)CFDictionaryGetValue(v37, v45);
        v47 = Value;
        if (v43)
          break;
        CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)addAttribute, v71);
LABEL_57:
        if (v39 == ++v43)
        {
          FigTTMLDocumentWriterElementAddChildElement((uint64_t)v71, v58);
          v11 = 0;
          v49 = v71;
          v71 = 0;
          goto LABEL_59;
        }
      }
      if (v70)
      {
        CFRelease(v70);
        v70 = 0;
      }
      v48 = FigTTMLDocumentWriterElementCreate((uint64_t)v4, 1, (uint64_t)v71, (uint64_t *)&v70);
      if (!(_DWORD)v48)
      {
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v45, kCFNumberSInt32Type, &valuePtr);
        if (v44)
          CFRelease(v44);
        CMTimeMake(&time, valuePtr, 1000);
        v44 = CMTimeCopyAsDictionary(&time, v4);
        FigTTMLDocumentWriterElementSetAttribute((uint64_t)v70, CFSTR("begin"), v44);
        CFDictionaryApplyFunction(v47, (CFDictionaryApplierFunction)addAttribute, v70);
        FigTTMLDocumentWriterElementAddChildElement((uint64_t)v71, v70);
        goto LABEL_57;
      }
      v11 = v48;
      v49 = 0;
LABEL_59:
      Mutable = v53;
      v22 = v52;
LABEL_60:
      if (v37)
        CFRelease(v37);
      if (v44)
        CFRelease(v44);
      free(v40);
      if (v70)
        CFRelease(v70);
      v23 = v56;
      v25 = v54;
      if (v71)
        CFRelease(v71);
      if ((_DWORD)v11)
      {
        if (v49)
LABEL_71:
          CFRelease(v49);
      }
      else
      {
        if (v49)
        {
          v11 = FigTTMLDocumentWriterElementWriteTree((CFArrayRef *)v49, v57);
          goto LABEL_71;
        }
        v11 = FigTTMLDocumentWriterAddCaptionData(v57, (uint64_t)v58);
      }
LABEL_73:
      if (v59)
        CFRelease(v59);
      if ((_DWORD)v11)
        goto LABEL_86;
      v24 = v61;
LABEL_77:
      if (++v23 == v22)
      {
        v11 = 0;
        goto LABEL_86;
      }
    }
  }
  v26 = FigTTMLDocumentWriterAddCaptionData(*(_QWORD *)DerivedStorage, a2);
LABEL_92:
  v11 = v26;
  if (Mutable)
LABEL_87:
    CFRelease(Mutable);
LABEL_88:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_SetAttribute(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  __int128 v7;
  CMTime v9;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = FigTTMLDocumentWriterSetAttribute(*(_QWORD *)DerivedStorage, a2, (uint64_t)a3);
  if (!(_DWORD)v6)
  {
    if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      v7 = *(_OWORD *)&v9.value;
      *(_QWORD *)(DerivedStorage + 24) = v9.epoch;
      *(_OWORD *)(DerivedStorage + 8) = v7;
    }
    else if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      *(CMTime *)(DerivedStorage + 32) = v9;
    }
  }
  return v6;
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

void buildTimeToAttributesMap(void *key, uint64_t *a2)
{
  uint64_t (*Value)(CFTypeRef, const void *);
  uint64_t (*v5)(CFTypeRef, const void *);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, void *, _QWORD, CFTypeRef *, _QWORD);
  int v8;
  CFTypeID v9;
  uint64_t KeyFrameCount;
  uint64_t v11;
  uint64_t v12;
  const void *AttributeDictionaryForAnimationTime;
  const void *v14;
  CMTime v15;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;

  v17 = 0;
  cf = 0;
  if (*((_DWORD *)a2 + 18))
    goto LABEL_25;
  Value = (uint64_t (*)(CFTypeRef, const void *))CFDictionaryGetValue((CFDictionaryRef)a2[8], key);
  if (!Value)
    goto LABEL_23;
  v5 = Value;
  v6 = *a2;
  v7 = *(uint64_t (**)(uint64_t, _QWORD, void *, _QWORD, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 24);
  if (!v7)
  {
    v8 = -12782;
    goto LABEL_22;
  }
  v8 = v7(v6, 0, key, *MEMORY[0x1E0C9AE00], &cf, 0);
  if (v8)
    goto LABEL_22;
  if (!cf)
    goto LABEL_21;
  v9 = CFGetTypeID(cf);
  if (v9 == FigCaptionDynamicStyleGetTypeID())
  {
    KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount();
    if (KeyFrameCount < 1)
      goto LABEL_23;
    v11 = KeyFrameCount;
    v12 = 0;
    while (1)
    {
      v16 = 0;
      if (v17)
      {
        CFRelease(v17);
        v17 = 0;
      }
      v8 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
      if (v8)
        goto LABEL_22;
      if ((*((_DWORD *)a2 + 11) & 0x1D) == 1)
      {
        v15 = *(CMTime *)(a2 + 4);
        CMTimeGetSeconds(&v15);
      }
      AttributeDictionaryForAnimationTime = insertOrGetAttributeDictionaryForAnimationTime((const __CFDictionary *)a2[7]);
      v8 = v5(v17, AttributeDictionaryForAnimationTime);
      if (v8)
        goto LABEL_22;
      if (v11 == ++v12)
        goto LABEL_23;
    }
  }
  if (!cf)
  {
LABEL_21:
    v8 = FigSignalErrorAt();
    if (!v8)
      goto LABEL_23;
    goto LABEL_22;
  }
  v14 = insertOrGetAttributeDictionaryForAnimationTime((const __CFDictionary *)a2[7]);
  v8 = v5(cf, v14);
  if (v8)
LABEL_22:
    *((_DWORD *)a2 + 18) = v8;
LABEL_23:
  if (v17)
    CFRelease(v17);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

CFComparisonResult compareCFNumber(uint64_t a1, CFNumberRef *a2, CFNumberRef *a3)
{
  return CFNumberCompare(*a2, *a3, 0);
}

void addAttribute(const void *a1, const void *a2, uint64_t a3)
{
  FigTTMLDocumentWriterElementSetAttribute(a3, a1, a2);
}

void initCaptionStylePropertyToAttributesMapping()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA35E8], FigTTMLDocumentWriterMapPropertyToAttribute_TextColor);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3558], FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA35A0], FigTTMLDocumentWriterMapPropertyToAttribute_FontWeight);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3580], FigTTMLDocumentWriterMapPropertyToAttribute_FontStyle);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3560], FigTTMLDocumentWriterMapPropertyToAttribute_Decoration);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3630], FigTTMLDocumentWriterMapPropertyToAttribute_TextOutline);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA35C0], FigTTMLDocumentWriterMapPropertyToAttribute_Hidden);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA35C8], FigTTMLDocumentWriterMapPropertyToAttribute_Invisible);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA35B8], FigTTMLDocumentWriterMapPropertyToAttribute_ForcedDisplay);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA35D8], FigTTMLDocumentWriterMapPropertyToAttribute_PreventLineWrapping);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3570], FigTTMLDocumentWriterMapPropertyToAttribute_FontFamily);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3578], FigTTMLDocumentWriterMapPropertyToAttribute_FontSize);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA35F0], FigTTMLDocumentWriterMapPropertyToAttribute_TextCombine);
  sCaptionStylePropertyToAttributesMapping = (uint64_t)Mutable;
}

const void *insertOrGetAttributeDictionaryForAnimationTime(const __CFDictionary *a1)
{
  const __CFAllocator *v2;
  const void *SInt32;
  const void *Value;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  Value = CFDictionaryGetValue(a1, SInt32);
  if (!Value)
  {
    Value = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(a1, SInt32, Value);
    if (Value)
      CFRelease(Value);
  }
  if (SInt32)
    CFRelease(SInt32);
  return Value;
}

uint64_t FigVTTNodeGetClassID()
{
  MEMORY[0x19402F294](&FigVTTNodeGetClassID_sRegisterFigVTTNodeBaseTypeOnce, figVTTNodeRegisterFigVTTNodeBaseType);
  return sFigVTTNodeClassID;
}

uint64_t figVTTNodeRegisterFigVTTNodeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVTTNodeGetTypeID()
{
  MEMORY[0x19402F294](&FigVTTNodeGetClassID_sRegisterFigVTTNodeBaseTypeOnce, figVTTNodeRegisterFigVTTNodeBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigVTTNodeCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigVTTNodeSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVTTNodeGetNodeType(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigVTTNodeCopyDocumentSerialization(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigVTTNodeSetChildNodeArray(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigVTTNodeSetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t (*v8)(uint64_t, const void *, const void *);
  __CFDictionary **v10;
  CFTypeID v11;
  __CFDictionary *v12;

  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(uint64_t (**)(uint64_t, const void *, const void *))(v6 + 16);
  if (v8)
    return v8(a1, a2, a3);
  if (!a2)
    return FigSignalErrorAt();
  v10 = (__CFDictionary **)DerivedStorage;
  v11 = CFGetTypeID(a2);
  if (v11 != CFStringGetTypeID())
    return FigSignalErrorAt();
  v12 = *v10;
  if (a3)
    CFDictionarySetValue(v12, a2, a3);
  else
    CFDictionaryRemoveValue(v12, a2);
  return 0;
}

uint64_t FigVTTNodeCopyAttributes(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  CFTypeRef *DerivedStorage;
  uint64_t (*v6)(uint64_t, _QWORD *);
  CFTypeRef v8;

  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  v6 = *(uint64_t (**)(uint64_t, _QWORD *))(v4 + 24);
  if (v6)
    return v6(a1, a2);
  if (!a2)
    return FigSignalErrorAt();
  v8 = *DerivedStorage;
  if (v8)
    v8 = CFRetain(v8);
  *a2 = v8;
  return 0;
}

uint64_t FigVTTNodeSetValue(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t (*v6)(uint64_t, const void *);
  uint64_t v8;
  CFTypeID v9;
  const void *v10;

  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(uint64_t (**)(uint64_t, const void *))(v4 + 32);
  if (v6)
    return v6(a1, a2);
  v8 = DerivedStorage;
  if (!a2)
  {
    v10 = *(const void **)(DerivedStorage + 8);
    *(_QWORD *)(DerivedStorage + 8) = 0;
    if (!v10)
      return 0;
    goto LABEL_6;
  }
  v9 = CFGetTypeID(a2);
  if (v9 == CFStringGetTypeID())
  {
    v10 = *(const void **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = a2;
    CFRetain(a2);
    if (!v10)
      return 0;
LABEL_6:
    CFRelease(v10);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTNodeCopyValue(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t (*v6)(uint64_t, _QWORD *);
  CFTypeRef v8;

  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(uint64_t (**)(uint64_t, _QWORD *))(v4 + 40);
  if (v6)
    return v6(a1, a2);
  if (!a2)
    return FigSignalErrorAt();
  v8 = *(CFTypeRef *)(DerivedStorage + 8);
  if (v8)
    v8 = CFRetain(v8);
  *a2 = v8;
  return 0;
}

uint64_t FigVTTNodeCopyChildNodeArray(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigVTTInitializeNodeBaseStorage(CFMutableDictionaryRef *a1)
{
  CFMutableDictionaryRef Mutable;

  *a1 = 0;
  a1[1] = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *a1 = Mutable;
  if (Mutable)
    return 0;
  else
    return FigSignalErrorAt();
}

void FigVTTReleaseNodeBaseStorage(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

CFStringRef figVTTNode_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVTTNode %p]"), a1);
}

uint64_t MPEG2TSSniff(OpaqueCMBlockBuffer *a1, char a2, _DWORD *a3)
{
  size_t DataLength;
  size_t v7;
  uint64_t result;
  size_t v9;
  __int16 v10;
  size_t offset;

  DataLength = CMBlockBufferGetDataLength(a1);
  offset = 0;
  if ((a2 & 3) == 0)
    return 0;
  v7 = DataLength;
  result = FindTSHeader(a1, 0, DataLength, &offset);
  if ((_DWORD)result)
  {
    v10 = 0;
    while (1)
    {
      v9 = offset;
      if (SniffRestOfBuffer(a1, offset, v7, 188, &v10, (BOOL *)&v10 + 1, 0))
        return 0;
      if ((a2 & 1) != 0 && HIBYTE(v10))
        break;
      if ((a2 & 2) != 0 && (_BYTE)v10)
      {
        if (SniffRestOfBuffer(a1, v9, v7, 192, &v10, (BOOL *)&v10 + 1, 0))
          return 0;
        if (HIBYTE(v10))
        {
          if (v7 - v9 >= 0x180 && (v7 - v9) / 0xC0 > v7 / 0x180)
          {
            if (a3)
            {
              LODWORD(result) = 192;
              goto LABEL_21;
            }
            return 1;
          }
          return 0;
        }
      }
      offset = v9 + 1;
      result = FindTSHeader(a1, v9 + 1, v7, &offset);
      if (!(_DWORD)result)
        return result;
    }
    if (v7 - v9 >= 0x178 && (v7 - v9) / 0xBC > v7 / 0x178)
    {
      result = 1;
      if (!a3)
        return result;
LABEL_21:
      *a3 = result;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t FindTSHeader(CMBlockBufferRef theBuffer, size_t offset, size_t a3, size_t *a4)
{
  size_t v5;
  size_t v8;
  char *v9;
  size_t v10;
  size_t v11;
  size_t v13;
  char *dataPointerOut;

  if (!a3)
    return 0;
  v5 = a3;
  v13 = 0;
  dataPointerOut = 0;
  while (1)
  {
    if (CMBlockBufferGetDataPointer(theBuffer, offset, &v13, 0, &dataPointerOut))
      return 0;
    v8 = v13;
    if (v13 > v5)
      break;
    if (v13)
      goto LABEL_7;
LABEL_10:
    offset += v8;
    v5 -= v8;
    if (!v5)
      return 0;
  }
  v13 = v5;
  v8 = v5;
LABEL_7:
  v9 = dataPointerOut + 1;
  v10 = v8;
  v11 = offset;
  while (*(v9 - 1) != 71)
  {
    dataPointerOut = v9;
    ++v11;
    ++v9;
    if (!--v10)
      goto LABEL_10;
  }
  *a4 = v11;
  return 1;
}

uint64_t SniffRestOfBuffer(CMBlockBufferRef theBuffer, size_t offset, size_t a3, uint64_t a4, _BYTE *a5, BOOL *a6, _DWORD *a7)
{
  int v14;
  uint64_t result;
  char *dataPointerOut;

  v14 = 0;
  dataPointerOut = 0;
  *a5 = 0;
  *a6 = 0;
  while (1)
  {
    result = CMBlockBufferGetDataPointer(theBuffer, offset, 0, 0, &dataPointerOut);
    if ((_DWORD)result || *dataPointerOut != 71)
      break;
    *a5 = 1;
    offset += a4;
    ++v14;
    if (offset >= a3)
    {
      *a6 = v14 != 1;
      break;
    }
  }
  if (a7)
    *a7 = v14;
  return result;
}

uint64_t FindProgram(uint64_t a1, int a2)
{
  uint64_t result;

  for (result = *(_QWORD *)(a1 + 16); result; result = *(_QWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 40) == a2)
      break;
  }
  return result;
}

uint64_t MPEG2TSInitialize(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 168) = MPEG2TSInject;
  *(_QWORD *)(a1 + 176) = MPEG2TSReset;
  v1 = 192;
  if (*(_DWORD *)(a1 + 48) == 1)
    v1 = 188;
  v4 = 0;
  *(_QWORD *)(a1 + 392) = v1;
  *(_QWORD *)(a1 + 400) = v1 - 188;
  result = AddPes(a1, 0, 1, 0, 0, 0, 0, 0, 0, &v4);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(v4 + 440) = PatProcessPak;
    v3 = malloc_type_malloc(2uLL, 0x1000040BDFB0063uLL);
    *(_QWORD *)(v4 + 48) = v3;
    if (v3)
      return 0;
    else
      return 12;
  }
  return result;
}

uint64_t MPEG2TSInject(uint64_t a1, CMBlockBufferRef theBuffer)
{
  OpaqueCMBlockBuffer *v2;
  size_t DataLength;
  size_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t i;
  unsigned int v14;
  OpaqueCMBlockBuffer *v15;
  size_t v16;
  uint64_t appended;
  const void *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  char *v25;
  unsigned int v26;
  uint64_t j;
  unsigned int v28;
  size_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  __int16 v36;
  size_t offset;
  char *returnedPointerOut;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  _DWORD temporaryBlock[48];
  uint64_t v43;

  v2 = theBuffer;
  v43 = *MEMORY[0x1E0C80C00];
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  v5 = DataLength;
  dataPointerOut = 0;
  blockBufferOut = 0;
  lengthAtOffsetOut = 0;
  v6 = *(_QWORD *)(a1 + 384);
  if (v6)
  {
    if (DataLength >= *(_QWORD *)(a1 + 392) - v6)
      v7 = *(_QWORD *)(a1 + 392) - v6;
    else
      v7 = DataLength;
    v8 = CMBlockBufferCopyDataBytes(v2, 0, v7, (void *)(a1 + 192 + v6));
    v10 = *(_QWORD *)(a1 + 384);
    v9 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 384) = v10 + v7;
    if (v10 + v7 != v9)
      goto LABEL_79;
    v11 = *(_QWORD *)(a1 + 400);
    if (*(_BYTE *)(a1 + v11 + 192) == 71)
    {
      v12 = *(unsigned __int8 *)(a1 + 192 + v11 + 2) | ((*(_BYTE *)(a1 + 192 + v11 + 1) & 0x1F) << 8);
      if (v12 != 0x1FFF)
      {
        for (i = *(_QWORD *)(a1 + 24); i; i = *(_QWORD *)(i + 32))
        {
          v14 = *(unsigned __int16 *)(i + 448);
          if (v14 > v12)
            break;
          if (v14 == v12)
          {
            v8 = (*(uint64_t (**)(void))(i + 440))();
            if ((_DWORD)v8)
              goto LABEL_79;
            break;
          }
        }
      }
      v5 -= v7;
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(a1 + 384) = 0;
    goto LABEL_31;
  }
  v15 = *(OpaqueCMBlockBuffer **)(a1 + 456);
  if (v15)
  {
    v16 = CMBlockBufferGetDataLength(v15);
    appended = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 40), *(CMBlockBufferRef *)(a1 + 456), 0, 0, 0, &blockBufferOut);
    if ((_DWORD)appended)
      goto LABEL_78;
    appended = CMBlockBufferAppendBufferReference(blockBufferOut, v2, 0, v5, 0);
    if ((_DWORD)appended)
      goto LABEL_78;
    v5 += v16;
    v2 = blockBufferOut;
    v18 = *(const void **)(a1 + 456);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 456) = 0;
    }
LABEL_18:
    v19 = 0;
    v7 = 0;
    v8 = 0;
    v20 = 3 * *(_QWORD *)(a1 + 392);
    goto LABEL_32;
  }
  if (*(_BYTE *)(a1 + 450))
  {
    v21 = *(_QWORD *)(a1 + 392);
    if (!v21 || v5 >= 3 * v21)
      goto LABEL_18;
    LOBYTE(returnedPointerOut) = 0;
    temporaryBlock[0] = 0;
    appended = SniffRestOfBuffer(v2, 0, v5, v21, &returnedPointerOut, (BOOL *)&offset, temporaryBlock);
    if ((_DWORD)appended)
    {
LABEL_78:
      v8 = appended;
      goto LABEL_79;
    }
    if (!(_BYTE)returnedPointerOut || temporaryBlock[0] < (int)(v5 / v21))
      goto LABEL_18;
    v7 = 0;
    v8 = 0;
    *(_BYTE *)(a1 + 450) = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
LABEL_31:
  v20 = *(_QWORD *)(a1 + 392);
  v19 = 1;
LABEL_32:
  if (v5 >= v20)
  {
    v22 = v7;
    do
    {
      returnedPointerOut = 0;
      v23 = lengthAtOffsetOut;
      if (lengthAtOffsetOut + v7 < *(_QWORD *)(a1 + 392) + v22)
      {
        if (CMBlockBufferGetDataPointer(v2, v22, &lengthAtOffsetOut, 0, &dataPointerOut))
        {
          v23 = 0;
          lengthAtOffsetOut = 0;
        }
        else
        {
          v23 = lengthAtOffsetOut;
          v7 = v22;
        }
      }
      v24 = *(_QWORD *)(a1 + 392);
      if (v23 + v7 >= v24 + v22)
      {
        returnedPointerOut = &dataPointerOut[v22 - v7];
        if (!dataPointerOut)
          goto LABEL_79;
      }
      else
      {
        v8 = CMBlockBufferAccessDataBytes(v2, v22, v24, temporaryBlock, &returnedPointerOut);
        if ((_DWORD)v8)
          goto LABEL_79;
      }
      if (v19 && (v25 = &returnedPointerOut[*(_QWORD *)(a1 + 400)], *v25 == 71))
      {
        v26 = v25[2] | ((v25[1] & 0x1F) << 8);
        if (v26 != 0x1FFF)
        {
          for (j = *(_QWORD *)(a1 + 24); j; j = *(_QWORD *)(j + 32))
          {
            v28 = *(unsigned __int16 *)(j + 448);
            if (v28 > v26)
              break;
            if (v28 == v26)
            {
              appended = (*(uint64_t (**)(void))(j + 440))();
              if ((_DWORD)appended)
                goto LABEL_78;
              if (!*(_BYTE *)(a1 + 8))
              {
                v8 = 0;
                break;
              }
              v8 = 4294954511;
              goto LABEL_79;
            }
          }
        }
        v33 = *(_QWORD *)(a1 + 392);
        v22 += v33;
        v5 -= v33;
      }
      else
      {
        v20 = 3 * *(_QWORD *)(a1 + 392);
        if (v5 >= v20)
        {
          do
          {
            offset = 0;
            v36 = 0;
            if (FindTSHeader(v2, v22, v5, &offset))
            {
              v35 = 0;
              v29 = offset;
              v30 = *(_QWORD *)(a1 + 400);
              v31 = offset - v30;
              if (offset >= v30)
              {
                offset -= v30;
                v5 += v22 - v31;
                appended = SniffRestOfBuffer(v2, v29, v5, *(_QWORD *)(a1 + 392), (_BYTE *)&v36 + 1, (BOOL *)&v36, &v35);
                if ((_DWORD)appended)
                  goto LABEL_78;
                if (v35 > 2)
                {
                  *(_BYTE *)(a1 + 450) = 0;
                  v19 = 1;
                  v22 = v31;
                }
                else
                {
                  v19 = 0;
                  v32 = *(_QWORD *)(a1 + 400) + 1;
                  v22 = v32 + v31;
                  v5 -= v32;
                }
                v8 = 0;
              }
              else
              {
                v19 = 0;
                v5 += v22 + ~offset;
                v22 = offset + 1;
              }
            }
            else
            {
              v5 = 0;
              v19 = 0;
            }
            v20 = *(_QWORD *)(a1 + 392);
          }
          while (!v19 && v5 >= 3 * v20);
          if (!v19)
            v20 *= 3;
        }
        else
        {
          v19 = 0;
        }
      }
    }
    while (v5 >= v20);
  }
  else
  {
    v22 = v7;
  }
  if (!v19)
  {
    if (!v5)
      goto LABEL_79;
    goto LABEL_77;
  }
  if (v5 && !CMBlockBufferCopyDataBytes(v2, v22, v5, (void *)(a1 + 192)))
  {
    if (*(_BYTE *)(a1 + *(_QWORD *)(a1 + 400) + 192) == 71)
    {
      *(_QWORD *)(a1 + 384) = v5;
      goto LABEL_79;
    }
LABEL_77:
    appended = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(a1 + 40), v2, *(CFAllocatorRef *)(a1 + 40), 0, v22, v5, 2u, (CMBlockBufferRef *)(a1 + 456));
    goto LABEL_78;
  }
LABEL_79:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v8;
}

void MPEG2TSReset(uint64_t a1)
{
  const void *v2;

  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 450) = 1;
  v2 = *(const void **)(a1 + 456);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 456) = 0;
  }
}

uint64_t PatProcessPak(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t i;
  uint64_t v17;
  unsigned __int16 *v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 449))
    return 0;
  v4 = (char)a2[1];
  if (v4 < 0)
    return 4294954320;
  v6 = *(_BYTE **)(a1 + 48);
  if ((a2[3] & 0x30) == 0x10)
  {
    v7 = 4;
  }
  else
  {
    if ((a2[3] & 0x10) == 0)
      return FigSignalErrorAt();
    v8 = a2[4];
    if (v8 > 0xB3)
      return FigSignalErrorAt();
    v7 = v8 + 5;
  }
  if ((v4 & 0x40) == 0)
    return 4294954325;
  v9 = a2[v7];
  if (188 - v7 < (unint64_t)(v9 + 4))
    return FigSignalErrorAt();
  v10 = v9 + 1;
  v11 = &a2[v7 + 1 + v9];
  if (*v11)
    return 4294954325;
  v12 = v11[1];
  if ((v12 & 0xC0) != 0x80)
    return 4294954325;
  v13 = v11[2] | ((v12 & 3) << 8);
  v14 = 185 - v7 - v10;
  if (v13 < 9 || v14 < v13)
    return 4294954325;
  *v6 = 1;
  v6[1] = (v11[5] >> 1) & 0x1F;
  for (i = *(_QWORD *)(v2 + 16); i; i = *(_QWORD *)(i + 8))
    *(_BYTE *)(i + 58) = 0;
  if (v13 - 9 < 4)
    return 0;
  v17 = 0;
  v18 = (unsigned __int16 *)(v11 + 8);
  if ((v13 - 9) >> 2 <= 1)
    v19 = 1;
  else
    v19 = (v13 - 9) >> 2;
  do
  {
    v20 = __rev16(*v18);
    if (v20)
    {
      v21 = *((unsigned __int8 *)v18 + 3) | ((v18[1] & 0x1F) << 8);
      if (v21 >= 0x10 && v21 != 0x1FFF)
      {
        v23 = *(_QWORD *)(a1 + 8);
        v24 = *(_QWORD *)(v23 + 16);
        if (!v24)
          goto LABEL_37;
        while (*(_DWORD *)(v24 + 40) != v20)
        {
          v24 = *(_QWORD *)(v24 + 8);
          if (!v24)
            goto LABEL_37;
        }
        v25 = *(_QWORD *)(v24 + 48);
        if (v25 && *(unsigned __int16 *)(v25 + 448) == v21)
        {
          *(_BYTE *)(v24 + 58) = 1;
        }
        else
        {
LABEL_37:
          v28 = 0;
          v29 = 0;
          if (!AddProgram(v23, v20, &v28))
          {
            v26 = v28;
            if (!AddPes(v23, v28, 1, 0, 0, 0, 0, v21, 0, &v29))
            {
              v27 = v29;
              *(_QWORD *)(v29 + 440) = PmapProcessPak;
              *(_BYTE *)(v26 + 58) = 1;
              *(_QWORD *)(v26 + 48) = v27;
            }
          }
        }
      }
    }
    result = 0;
    v18 += 2;
    ++v17;
  }
  while (v17 != v19);
  return result;
}

uint64_t MPEG2TSAddTrack(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v9)();
  uint64_t i;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[7];

  if (a4 > 2)
    return 4294954326;
  v16[5] = v4;
  v16[6] = v5;
  v9 = off_1E2F9AC88[a4];
  for (i = *(_QWORD *)(a1 + 24); i; i = *(_QWORD *)(i + 32))
  {
    v11 = *(unsigned __int16 *)(i + 448);
    if (v11 > a2)
      break;
    if (v11 == a2)
      return 4294954513;
  }
  v15 = 0;
  v16[0] = 0;
  result = AddProgram(a1, 0x10000, &v15);
  if (!(_DWORD)result)
  {
    result = AddPes(a1, v15, 0, a3, 1, a2, 0, a2, 1, v16);
    if ((int)a3 <= 1836070005)
    {
      if ((_DWORD)a3 == 1700886115)
        goto LABEL_15;
      v13 = 1748121140;
    }
    else
    {
      if ((_DWORD)a3 == 1836070006 || (_DWORD)a3 == 1836476772)
        goto LABEL_15;
      v13 = 2053207651;
    }
    if ((_DWORD)a3 != v13)
    {
      v14 = v16[0];
      goto LABEL_16;
    }
LABEL_15:
    v14 = v16[0];
    *(_BYTE *)(v16[0] + 120) = 1;
LABEL_16:
    *(_QWORD *)(v14 + 440) = v9;
  }
  return result;
}

uint64_t PesEmitTsPak(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  CMBlockBufferRef blockBufferOut;

  if (!*(_QWORD *)(a1 + 84))
    return 0;
  if ((char)a2[1] < 0)
  {
    PesErrorHandling(a1, 4294954320);
    return 0;
  }
  v6 = *(_BYTE *)(a1 + 450);
  if ((a2[3] & 0x10) != 0)
    v6 = (v6 + 1) & 0xF;
  v7 = a2[3] & 0xF;
  if (*(_BYTE *)(a1 + 451) && v7 != v6)
    PesErrorHandling(a1, 4294954320);
  *(_BYTE *)(a1 + 451) = 1;
  *(_BYTE *)(a1 + 450) = v7;
  if ((a2[3] & 0x30) == 0x10)
  {
    v8 = 4;
    goto LABEL_16;
  }
  if ((a2[3] & 0x10) == 0)
  {
    v8 = 188;
    goto LABEL_16;
  }
  v10 = a2[4];
  if (v10 < 0xB8)
  {
    v8 = v10 + 5;
LABEL_16:
    blockBufferOut = 0;
    v11 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), 0, 188 - v8, *(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), 0, 0, 188 - v8, 1u, &blockBufferOut);
    if ((_DWORD)v11)
      return v11;
    v9 = CMBlockBufferReplaceDataBytes(&a2[v8], blockBufferOut, 0, 188 - v8);
    if (!(_DWORD)v9)
    {
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 84);
      v13 = **(_QWORD **)(a1 + 8);
      v14 = *(unsigned int *)(a1 + 60);
      v15 = *(_QWORD *)(a1 + 104);
      v19 = *MEMORY[0x1E0CA2E18];
      v20 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v18 = v20;
      v17 = v19;
      v9 = v12(v13, v14, v15, blockBufferOut, &v19, &v17, 0, a3, 0, 0, 0, 0);
    }
    CFRelease(blockBufferOut);
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t PesProcessTsPak(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 v6;
  int v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  size_t v12;

  if (!*(_QWORD *)(a1 + 84))
    return 0;
  if ((char)a2[1] < 0)
  {
    PesErrorHandling(a1, 4294954320);
    return 0;
  }
  v6 = *(_BYTE *)(a1 + 450);
  if ((a2[3] & 0x10) != 0)
    v6 = (v6 + 1) & 0xF;
  v7 = a2[3] & 0xF;
  if (*(_BYTE *)(a1 + 451))
  {
    if (v7 != v6)
      PesErrorHandling(a1, 4294954320);
  }
  *(_BYTE *)(a1 + 451) = 1;
  *(_BYTE *)(a1 + 450) = v7;
  if ((a2[3] & 0x30) == 0x10)
  {
    v8 = 4;
LABEL_16:
    v12 = 0;
    v11 = 0;
    return ProcessPesData(a1, 0, 0, &a2[v8], 188 - v8, (a2[1] >> 6) & 1, a3, &v12, &v11);
  }
  if ((a2[3] & 0x10) == 0)
  {
    v8 = 188;
    goto LABEL_16;
  }
  v10 = a2[4];
  if (v10 < 0xB8)
  {
    v8 = v10 + 5;
    goto LABEL_16;
  }
  return FigSignalErrorAt();
}

uint64_t PesProcessAdaptationPrivate(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  _BYTE *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  CMBlockBufferRef blockBufferOut;

  if (!*(_QWORD *)(a1 + 84))
    return 0;
  if ((char)a2[1] < 0)
  {
    PesErrorHandling(a1, 4294954320);
    return 0;
  }
  if ((a2[3] & 0x20) == 0)
    return 0;
  v4 = a2[5];
  if ((v4 & 2) == 0)
    return 0;
  v5 = 12;
  if ((v4 & 0x10) == 0)
    v5 = 6;
  if ((v4 & 8) != 0)
    v5 += 6;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL | (v4 >> 2) & 1;
  v8 = &a2[v6 + 1];
  v7 = a2[v6];
  if (v6 + v7 > 0xBC)
    return 4294954325;
  blockBufferOut = 0;
  v10 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), 0, v7, *(CFAllocatorRef *)(*(_QWORD *)(a1 + 8) + 40), 0, 0, v7, 1u, &blockBufferOut);
  if ((_DWORD)v10)
    return v10;
  v11 = CMBlockBufferReplaceDataBytes(v8, blockBufferOut, 0, v7);
  if (!(_DWORD)v11)
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 84);
    v13 = **(_QWORD **)(a1 + 8);
    v14 = *(unsigned int *)(a1 + 60);
    v15 = *(_QWORD *)(a1 + 104);
    v19 = *MEMORY[0x1E0CA2E18];
    v20 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v18 = v20;
    v17 = v19;
    v11 = v12(v13, v14, v15, blockBufferOut, &v19, &v17, 0, a3, 0, 0, 0, 0);
  }
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v11;
}

uint64_t AddProgram(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = (_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 16);
  if (v6)
  {
    while (*((_DWORD *)v6 + 10) != a2)
    {
      v6 = (_QWORD *)v6[1];
      if (!v6)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    *a3 = 0;
    v6 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040A345989DuLL);
    if (!v6)
      return 12;
    *v6 = a1;
    v6[3] = 0;
    *((_DWORD *)v6 + 10) = a2;
    v6[4] = v6 + 3;
    v8 = *(_QWORD *)(a1 + 16);
    v6[1] = v8;
    if (v8)
      *(_QWORD *)(v8 + 16) = v6 + 1;
    *v7 = v6;
    v6[2] = v7;
  }
  v9 = 0;
  *a3 = v6;
  return v9;
}

uint64_t PmapProcessPak(uint64_t *a1, _BYTE *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t i;
  int v27;
  char v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t *j;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t **v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *k;
  unsigned int v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t *v48;

  v2 = (char)a2[1];
  if (v2 < 0)
    return 4294954320;
  v4 = *a1;
  if ((a2[3] & 0x30) == 0x10)
  {
    v5 = 4;
  }
  else
  {
    if ((a2[3] & 0x10) == 0)
      return FigSignalErrorAt();
    v7 = a2[4];
    if (v7 > 0xB3)
      return FigSignalErrorAt();
    v5 = v7 + 5;
  }
  if ((v2 & 0x40) == 0)
    return 0;
  v8 = 188 - v5;
  v9 = &a2[v5];
  v10 = a2[v5];
  if (v8 < v10 + 4)
    return FigSignalErrorAt();
  v11 = v10 + 1;
  v12 = &v9[v11];
  if (*v12 != 2)
    return 4294954325;
  v13 = v12[1];
  if ((v13 & 0xC0) != 0x80)
    return 4294954325;
  v14 = v8 - v11;
  v15 = v12[2] | ((v13 & 3) << 8);
  if (v15 < 0xD || v15 + 3 > v14)
    return FigSignalErrorAt();
  *(_WORD *)(v4 + 56) = v12[9] | ((v12[8] & 0x1F) << 8);
  v17 = v12[11] | ((unint64_t)(v12[10] & 0xF) << 8);
  v18 = v15 - 13;
  v19 = v18 - v17;
  if (v18 < v17)
    return 4294954325;
  v20 = &v12[v17 + 12];
  if (v19 >= 5)
  {
    v21 = v20;
    v22 = v19;
    do
    {
      v23 = v21[4] | ((unint64_t)(v21[3] & 0xF) << 8);
      v24 = v22 - 5;
      v25 = v24 >= v23;
      v22 = v24 - v23;
      if (!v25)
        return 4294954325;
      v21 += v23 + 5;
    }
    while (v22 > 4);
  }
  for (i = *(_QWORD *)(v4 + 24); i; i = *(_QWORD *)(i + 16))
    *(_BYTE *)(i + 452) = 0;
  if (v19 >= 5)
  {
    v27 = 0;
    v28 = 0;
    while (1)
    {
      v29 = v20[4] | ((unint64_t)(v20[3] & 0xF) << 8);
      v25 = v19 - 5 >= v29;
      v19 = v19 - 5 - v29;
      if (!v25)
        return 4294954325;
      v30 = v20[2] | ((v20[1] & 0x1F) << 8);
      if (!v30)
        return FigSignalErrorAt();
      v31 = *v20;
      v32 = v20 + 5;
      if (v30 == *(unsigned __int16 *)(v4 + 56))
        v28 = 1;
      for (j = *(uint64_t **)(a1[1] + 24); j; j = (uint64_t *)j[4])
      {
        v34 = *((unsigned __int16 *)j + 224);
        if (v34 > v30)
          break;
        if (v34 == v30)
        {
          v48 = j;
          v35 = *j;
          if (*(_DWORD *)(*j + 40) == 0x10000)
          {
            v36 = j[2];
            *((_DWORD *)j + 16) = v31;
            v37 = (_QWORD *)j[3];
            if (v36)
            {
              *(_QWORD *)(v36 + 24) = v37;
              v37 = (_QWORD *)j[3];
            }
            else
            {
              *(_QWORD *)(v35 + 32) = v37;
            }
            *v37 = v36;
            v39 = *(uint64_t ***)(v4 + 32);
            j[2] = 0;
            j[3] = (uint64_t)v39;
            *v39 = j;
            *(_QWORD *)(v4 + 32) = j + 2;
            *j = v4;
            goto LABEL_41;
          }
          if (*((_DWORD *)j + 16) == v31 && v35 == v4)
            goto LABEL_41;
          return 4294954325;
        }
      }
      v48 = 0;
      result = PmapAddPes((uint64_t *)v4, v30, v31, v32, v29);
      if ((_DWORD)result)
        return result;
      v27 = 1;
LABEL_41:
      v20 = &v32[v29];
      if (v19 <= 4)
      {
        if (v28)
          goto LABEL_63;
        goto LABEL_54;
      }
    }
  }
  v27 = 0;
LABEL_54:
  v40 = a1[1];
  v41 = *(unsigned __int16 *)(v4 + 56);
  for (k = *(uint64_t **)(v40 + 24); k; k = (uint64_t *)k[4])
  {
    v43 = *((unsigned __int16 *)k + 224);
    if (v43 > v41)
      break;
    if (v43 == v41)
    {
      v48 = k;
      goto LABEL_63;
    }
  }
  v48 = 0;
  result = AddPes(v40, v4, 1, 0, 0, 0, 0, v41, 0, &v48);
  if (!(_DWORD)result)
  {
    v44 = v48;
    *((_BYTE *)v48 + 452) = 1;
    v44[55] = (uint64_t)PCRPidProcessTsPak;
LABEL_63:
    if (!v27)
      return 0;
    v45 = (_QWORD *)a1[1];
    v46 = v45[3];
    if (!v46)
      return 0;
    do
    {
      if (!*(_BYTE *)(v46 + 657))
      {
        v47 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v45[7];
        if (v47)
          v47(*v45, v45[9], *(unsigned int *)(v4 + 40), *(unsigned int *)(v46 + 60), *(unsigned int *)(v46 + 56));
      }
      result = 0;
      v46 = *(_QWORD *)(v46 + 32);
    }
    while (v46);
  }
  return result;
}

uint64_t PmapAddPes(uint64_t *a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  unsigned int v5;
  unsigned __int8 *v6;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  BOOL v21;
  uint64_t result;
  uint64_t v23;
  size_t v24;
  void *v25;
  void *v26;
  int v27;
  size_t __n;
  void *__src;
  uint64_t v30;

  v5 = a5;
  v6 = a4;
  v10 = 0;
  v11 = *a1;
  __src = 0;
  v30 = 0;
  __n = 0;
  if (a3 > 127)
  {
    if (a3 > 193)
    {
      if (a3 > 218)
      {
        if (a3 == 219)
        {
          if (CheckDescriptorsForStreamEncryptData(a4, a5, 1635148644, 0, 0))
          {
            v10 = 0;
            v13 = 1700886115;
            goto LABEL_61;
          }
          v27 = CheckDescriptorsForStreamEncryptData(v6, v5, 2053207651, 0, 0);
          v12 = v27;
          v10 = v27 ^ 1;
          if (v27)
            v13 = 2053207651;
          else
            v13 = 1970170734;
          goto LABEL_62;
        }
        if (a3 != 234)
          goto LABEL_72;
        LOBYTE(v10) = 1;
LABEL_34:
        v12 = v10;
        v13 = 1819304813;
        v10 = 0;
        goto LABEL_62;
      }
      if (a3 == 194)
      {
        v17 = CheckDescriptorsForStreamEncryptData(a4, a5, 1701000036, &__src, &__n);
        v12 = 0;
        v10 = v17 ^ 1;
        v14 = v17 == 0;
        v15 = 1701143347;
      }
      else
      {
        if (a3 != 207)
          goto LABEL_72;
        v12 = 0;
        if (CheckDescriptorsForStreamEncryptData(a4, a5, 1633772388, &__src, &__n))
          v14 = __n == 0;
        else
          v14 = 1;
        v10 = v14;
        v15 = 1700880739;
      }
    }
    else
    {
      if (a3 <= 134)
      {
        if (a3 != 128)
        {
          if (a3 == 129)
          {
            v10 = 0;
            v12 = 0;
            v13 = 1633891104;
            goto LABEL_62;
          }
          goto LABEL_72;
        }
        goto LABEL_34;
      }
      if (a3 == 135)
      {
        v10 = 0;
        v12 = 0;
        v13 = 1700998451;
        goto LABEL_62;
      }
      if (a3 != 193)
        goto LABEL_72;
      v16 = CheckDescriptorsForStreamEncryptData(a4, a5, 1633891172, &__src, &__n);
      v12 = 0;
      v10 = v16 ^ 1;
      v15 = 1700881203;
      v14 = v16 == 0;
    }
    if (v14)
      v13 = 1970170734;
    else
      v13 = v15;
    goto LABEL_62;
  }
  if (a3 <= 14)
  {
    if ((a3 - 1) >= 2)
    {
      if ((a3 - 3) < 2)
      {
        v10 = 0;
        v12 = 0;
        v13 = 1835103588;
        goto LABEL_62;
      }
      goto LABEL_72;
    }
    v13 = 1836476772;
LABEL_61:
    v12 = 1;
    goto LABEL_62;
  }
  if (a3 <= 20)
  {
    if (a3 == 15)
    {
      v10 = 0;
      v12 = 0;
      v13 = 1633973363;
      goto LABEL_62;
    }
    if (a3 != 16)
      goto LABEL_72;
    v10 = 0;
    v13 = 1836070006;
    goto LABEL_61;
  }
  if (a3 != 21)
  {
    if (a3 == 27)
    {
      v10 = 0;
      v13 = 1748121140;
      goto LABEL_61;
    }
LABEL_72:
    v12 = 0;
    v10 = 1;
    v13 = 1970170734;
    goto LABEL_62;
  }
  v13 = 1970170734;
  if (a5 >= 2)
  {
    v18 = 0;
    do
    {
      v19 = v6[1];
      if ((unsigned __int16)v5 - 2 < v19)
        return FigSignalErrorAt();
      if (*v6 == 38)
      {
        if (v19 <= 4)
          return FigSignalErrorAt();
        if (v19 >= 0xD
          && *(_QWORD *)(v6 + 2) == 0x49FF20334449FFFFLL
          && *(_QWORD *)(v6 + 5) == 0x20334449FF203344)
        {
          v13 = 1768174368;
          goto LABEL_77;
        }
        v18 = 1;
      }
      LOWORD(v5) = v5 - (v19 + 2);
      v6 += v19 + 2;
    }
    while ((unsigned __int16)v5 > 1u);
    if ((_WORD)v5)
      v21 = 1;
    else
      v21 = v18 == 0;
    if (!v21)
    {
      v10 = 0;
      v12 = 0;
      v13 = 1768174368;
      goto LABEL_62;
    }
  }
LABEL_77:
  v12 = 0;
  v10 = (unsigned __int16)v5 < 2u;
LABEL_62:
  result = AddPes(v11, (uint64_t)a1, v10, v13, 1, a2, a3, a2, 0, &v30);
  if (!(_DWORD)result)
  {
    v23 = v30;
    if (__src)
    {
      v24 = __n;
      if (__n)
      {
        v25 = *(void **)(v30 + 824);
        if (!v25 || *(_QWORD *)(v30 + 832) != __n || memcmp(*(const void **)(v30 + 824), __src, __n))
        {
          free(v25);
          v26 = malloc_type_malloc(v24, 0xCE379632uLL);
          *(_QWORD *)(v30 + 824) = v26;
          if (!v26)
            return 4294954510;
          memcpy(v26, __src, v24);
          v23 = v30;
          *(_QWORD *)(v30 + 832) = v24;
        }
      }
    }
    result = 0;
    *(_BYTE *)(v23 + 452) = 1;
    *(_QWORD *)(v23 + 440) = PesProcessTsPak;
    *(_BYTE *)(v23 + 120) = v12;
  }
  return result;
}

uint64_t PCRPidProcessTsPak()
{
  return 0;
}

uint64_t CheckDescriptorsForStreamEncryptData(unsigned __int8 *a1, unsigned int a2, int a3, _QWORD *a4, _QWORD *a5)
{
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int16 v7;
  unsigned int *v8;
  int v9;
  BOOL v10;

  if (a2 < 3)
  {
    return 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = a1[1];
      v7 = a2 - 2 - v6;
      if (a2 - 2 < v6)
        break;
      v8 = (unsigned int *)(a1 + 2);
      v9 = *a1;
      if (v9 == 5)
      {
        if (a4 && v6 >= 4 && *v8 == 1684107361)
        {
          *a4 = a1 + 6;
          *a5 = (v6 - 4);
        }
      }
      else
      {
        v10 = v9 == 15 && (_DWORD)v6 == 4;
        if (v10 && bswap32(*v8) == a3)
          v5 = 1;
      }
      a1 = (unsigned __int8 *)v8 + v6;
      a2 = (unsigned __int16)(a2 - 2 - v6);
    }
    while (v7 > 2u);
  }
  return v5;
}

uint64_t MP3GetChannelLayout(_DWORD *a1)
{
  if (*a1 >> 30 == 3)
    return 6553601;
  else
    return 6619138;
}

uint64_t MP3GetFormatID(_DWORD *a1)
{
  int v1;
  unsigned int v2;

  v1 = (*a1 >> 9) & 3;
  if (v1 == 2)
    v2 = 778924082;
  else
    v2 = 778924083;
  if (v1 == 3)
    return 778924081;
  else
    return v2;
}

uint64_t MP3GetSamplesPerFrame(_DWORD *a1)
{
  int v1;
  unsigned int v2;

  v1 = 4 - ((*a1 >> 9) & 3);
  if ((~*a1 & 0x1800) != 0)
    v2 = 576;
  else
    v2 = 1152;
  if (v1 == 2)
    v2 = 1152;
  if (v1 == 1)
    return 384;
  else
    return v2;
}

uint64_t MP3GetSampleFrequency(unsigned int *a1)
{
  unsigned int v1;

  v1 = bswap32(*a1);
  return MPEGAudioSampleFrequencies[3 * ((v1 >> 19) & 3) + ((v1 >> 10) & 3)];
}

uint64_t MP3GetFrameSize(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = bswap32(*a1);
  v2 = MPEGAudioSampleFrequencies[3 * ((v1 >> 19) & 3) + ((v1 >> 10) & 3)];
  v3 = 3;
  v4 = ~(v1 >> 17) & 3;
  if (v4)
    v3 = 4;
  if ((~v1 & 0x180000) == 0)
    v3 = ~(v1 >> 17) & 3;
  v5 = (unsigned __int16)MPEGAudioBitRates[14 * v3 - 1 + ((unsigned __int16)v1 >> 12)];
  v6 = (v1 >> 9) & 1;
  v7 = 144000 * v5 / v2 + v6;
  v8 = 4 * (12000 * v5 / v2 + v6);
  if (v4)
    return v7;
  else
    return v8;
}

uint64_t MP3GetBitRate(unsigned int *a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = bswap32(*a1);
  v2 = 3;
  if ((~(v1 >> 17) & 3) != 0)
    v2 = 4;
  if ((~v1 & 0x180000) == 0)
    v2 = ~(v1 >> 17) & 3;
  return 1000 * (unsigned __int16)MPEGAudioBitRates[14 * v2 - 1 + ((unsigned __int16)v1 >> 12)];
}

BOOL FigOutputMonitorIsScreenProbablyBeingRecorded()
{
  uint64_t state64;

  state64 = 0;
  if (figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationTokenCreateOnce != -1)
    dispatch_once(&figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationTokenCreateOnce, &__block_literal_global_36);
  notify_get_state(sFigOutputMonitorNotificationToken, &state64);
  return state64 != 0;
}

uint64_t FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(uint64_t state64)
{
  unsigned int v1;

  v1 = state64;
  if (figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationTokenCreateOnce != -1)
    dispatch_once(&figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationTokenCreateOnce, &__block_literal_global_36);
  notify_set_state(sFigOutputMonitorNotificationToken, v1);
  return notify_post("com.apple.fig.screen.is.probably.being.recorded");
}

uint64_t __figOutputMonitorSetUpNotificationAndTokenOnce_block_invoke()
{
  figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationQueue = (uint64_t)dispatch_queue_create("FigOutputMonitorNotificationQueue", 0);
  return notify_register_dispatch("com.apple.fig.screen.is.probably.being.recorded", &sFigOutputMonitorNotificationToken, (dispatch_queue_t)figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationQueue, &__block_literal_global_5_0);
}

void __figOutputMonitorSetUpNotificationAndTokenOnce_block_invoke_2()
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("FigOutputMonitorNotification_RecordingStateChanged"), 0, 0, 1u);
}

void MPEGAudioCleanPrivateData(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  FrameQueueEntryClean(a1 + 120);
  *(_WORD *)(a1 + 272) = 0;
  PesPacketListClean(a1 + 280);
}

uint64_t MPEGAudioProcessData(uint64_t a1, _QWORD *a2, OpaqueCMBlockBuffer *a3, size_t a4, char *a5, size_t a6, uint64_t a7)
{
  uint64_t v7;
  size_t v8;
  char *v9;
  size_t v10;
  OpaqueCMBlockBuffer *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  __int128 v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  size_t v39;
  char *returnedPointerOut;

  while (1)
  {
    v7 = a7;
    v8 = a6;
    v9 = a5;
    v10 = a4;
    v11 = a3;
    v12 = a2;
    v13 = a1;
    v39 = 0;
    v38 = 0;
    v14 = a2[1];
    if (!v14)
      goto LABEL_29;
    if (a2[3] - v14 >= a6)
      v15 = a6;
    else
      v15 = a2[3] - v14;
    if (a5)
      memcpy((void *)(*a2 + v14), a5, v15);
    else
      CMBlockBufferCopyDataBytes(a3, a4, v15, (void *)(*a2 + v14));
    v16 = v12[1] + v15;
    if (v16 < v12[3])
    {
      v17 = 0;
      v12[1] = v16;
      return v17;
    }
    if (!((unsigned int (*)(_QWORD))v12[4])(*v12))
    {
      v19 = v12[1];
      v12[1] = v19 - 1;
      if (v19 != 1)
        memmove((void *)*v12, (const void *)(*v12 + 1), v19 - 1);
      goto LABEL_17;
    }
    if (!v12[22])
      break;
    v18 = MPEGAudioCompareHeaders(v13, (uint64_t)v12, *v12, &v38);
    if ((_DWORD)v18)
      goto LABEL_92;
    if (!(_BYTE)v38)
      goto LABEL_20;
LABEL_17:
    a1 = v13;
    a2 = v12;
    a3 = v11;
    a4 = v10;
    a5 = v9;
    a6 = v8;
    a7 = v7;
  }
  if (!*((_BYTE *)v12 + 273))
  {
    v18 = PesPacketListSaveChunk(v12 + 35, 0, 0, (const void *)*v12, v12[3], (uint64_t)(v12 + 11));
    if ((_DWORD)v18)
      goto LABEL_92;
  }
LABEL_20:
  v12[1] = 0;
  v18 = MPEGAudioSetUpFrame(v13, (uint64_t)v12, *v12);
  if ((_DWORD)v18)
    goto LABEL_92;
  v20 = v9 ? 0 : v15;
  if (v9)
    v9 += v15;
  else
    v9 = 0;
  v18 = PesAddMemoryToFrameMemory(v13, (const void *)*v12, v12[3], *(_QWORD *)(v13 + 624), &v39, (char *)&v38 + 1);
  if ((_DWORD)v18)
    goto LABEL_92;
  v10 += v20;
  v8 -= v15;
LABEL_29:
  if (!*((_BYTE *)v12 + 273) && (*((_BYTE *)v12 + 272) || v12[22]))
  {
    v18 = PesPacketListSaveChunk(v12 + 35, v11, v10, v9, v8, v7);
    if ((_DWORD)v18)
    {
LABEL_92:
      v17 = v18;
LABEL_93:
      PesErrorHandling(v13, v17);
      return v17;
    }
  }
  if (*(_BYTE *)(v7 + 24))
  {
    v21 = *(_OWORD *)v7;
    *(_OWORD *)(v12 + 13) = *(_OWORD *)(v7 + 16);
    *(_OWORD *)(v12 + 11) = v21;
  }
  v22 = v12[3];
  if (v8 >= v22 || v8 && *((_BYTE *)v12 + 272))
  {
    v36 = v7;
    v23 = 0;
    v24 = 0;
    v37 = v13 + 456;
    while (!*((_BYTE *)v12 + 272))
    {
      v26 = 0;
      if (v9)
      {
        while (!((unsigned int (*)(char *))v12[4])(&v9[v26]))
        {
          ++v26;
          if (v12[3] + v26 > v8)
          {
            v27 = 0;
            v26 = v24;
            goto LABEL_60;
          }
        }
        v27 = 1;
        v24 = v26;
LABEL_60:
        v32 = 0;
        v23 = &v9[v26];
        if (!v27)
          goto LABEL_78;
      }
      else
      {
        returnedPointerOut = 0;
        while (1)
        {
          if (CMBlockBufferAccessDataBytes(v11, v10 + v26, v22, (void *)v12[2], &returnedPointerOut))
          {
LABEL_58:
            v31 = 0;
            goto LABEL_77;
          }
          if (((unsigned int (*)(char *))v12[4])(returnedPointerOut))
            break;
          ++v26;
          v22 = v12[3];
          if (v22 + v26 > v8)
            goto LABEL_58;
        }
        v31 = 1;
        v23 = returnedPointerOut;
        v24 = v26;
LABEL_77:
        v32 = v24;
        if (!v31)
        {
LABEL_78:
          v33 = v12[3];
          v34 = v9 == 0;
          if (v9)
            v9 += v8 + 1 - v33;
          else
            v9 = 0;
          if (v34)
            v10 = v8 + 1 + v10 - v33;
          v8 = v33 - 1;
          goto LABEL_84;
        }
      }
      if (v12[22])
      {
        v18 = MPEGAudioCompareHeaders(v13, (uint64_t)v12, (uint64_t)v23, &v38);
        if ((_DWORD)v18)
          goto LABEL_92;
        if ((_BYTE)v38)
          return 0;
      }
      if (v9)
        v9 += v24;
      else
        v9 = 0;
      v10 += v32;
      v8 -= v24;
      if (!*((_BYTE *)v12 + 273))
      {
        v18 = PesPacketListSaveChunk(v12 + 35, v11, v10, v9, v8, v36);
        if ((_DWORD)v18)
          goto LABEL_92;
      }
      v18 = MPEGAudioSetUpFrame(v13, (uint64_t)v12, (uint64_t)v23);
      if ((_DWORD)v18)
        goto LABEL_92;
LABEL_84:
      v22 = v12[3];
      if (v8 < v22)
        goto LABEL_85;
    }
    if (v9)
    {
      v18 = PesAddMemoryToFrameMemory(v13, v9, v8, *(_QWORD *)(v13 + 624), &v39, (char *)&v38 + 1);
      if ((_DWORD)v18)
        goto LABEL_92;
      v25 = v39;
      v9 += v39;
    }
    else
    {
      v18 = PesAddBlockBufferToFrameBlockBuffer(v13, v11, v10, v8, *(_QWORD *)(v13 + 624), &v39, (char *)&v38 + 1);
      if ((_DWORD)v18)
        goto LABEL_92;
      v9 = 0;
      v25 = v39;
      v10 += v39;
    }
    v8 -= v25;
    if (!HIBYTE(v38))
      goto LABEL_84;
    *((_BYTE *)v12 + 272) = 0;
    if (*((_BYTE *)v12 + 273))
    {
      v28 = (uint64_t (*)(uint64_t, uint64_t))v12[9];
      if (v28)
      {
        v29 = v28(v13, v37);
        goto LABEL_74;
      }
      if (*(_BYTE *)(v13 + 658) || *(_BYTE *)(v13 + 505))
      {
        v29 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(v13, v37);
LABEL_74:
        v17 = v29;
        if ((_DWORD)v29)
          goto LABEL_93;
      }
    }
    else
    {
      v12[22] = *(_QWORD *)(v13 + 512);
      *(_QWORD *)(v13 + 512) = 0;
      v30 = *(_OWORD *)(v13 + 496);
      *((_OWORD *)v12 + 9) = *(_OWORD *)(v13 + 480);
      *((_OWORD *)v12 + 10) = v30;
      *((_DWORD *)v12 + 62) = *(_DWORD *)(v13 + 584);
    }
    PesCleanAfterFrameEmit(v13);
    *(_BYTE *)(v13 + 505) = 0;
    goto LABEL_84;
  }
LABEL_85:
  if (!v8)
    return 0;
  if (v9)
  {
    memcpy((void *)*v12, v9, v8);
    v17 = 0;
  }
  else
  {
    v17 = CMBlockBufferCopyDataBytes(v11, v10, v8, (void *)*v12);
  }
  v12[1] = v8;
  return v17;
}

uint64_t MPEGAudioCompareHeaders(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  CMBlockBufferRef *v10;
  uint64_t v11;
  int v12;
  CMBlockBufferRef v13;
  size_t DataLength;
  CMBlockBufferRef v15;

  v7 = a2 + 120;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(a2 + 40))(*(_QWORD *)(a2 + 176), a3))
  {
    *a4 = 0;
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 72);
    if (v8)
      v9 = v8(a1, v7);
    else
      v9 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, v7);
    v11 = v9;
    *(_BYTE *)(a2 + 273) = 1;
    if (*(_QWORD *)(a2 + 280))
      PesPacketListClean(a2 + 280);
  }
  else
  {
    v10 = *(CMBlockBufferRef **)(a2 + 280);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 288) = 0;
    FrameQueueEntryClean(v7);
    *(_WORD *)(a2 + 272) = 0;
    PesPacketListClean(a2 + 280);
    v11 = 0;
    if (v10)
    {
      v12 = 1;
      do
      {
        v13 = *v10;
        if (!(_DWORD)v11)
        {
          DataLength = CMBlockBufferGetDataLength(v10[1]);
          v11 = MPEGAudioProcessData(a1, a2, v10[1], v12 != 0, 0, DataLength - (v12 != 0), v10 + 2);
          v12 = 0;
        }
        v15 = v10[1];
        if (v15)
          CFRelease(v15);
        free(v10);
        v10 = (CMBlockBufferRef *)v13;
      }
      while (v13);
    }
    *a4 = 1;
  }
  return v11;
}

uint64_t MPEGAudioSetUpFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = (*(uint64_t (**)(uint64_t))(a2 + 56))(a3);
  if (!(_DWORD)v6)
    return FigSignalErrorAt();
  v7 = v6;
  if ((_DWORD)v6 != *(_DWORD *)(a1 + 768))
    FigMPEG2ParserSetAudioCharacteristics(a1, v6);
  *(_QWORD *)(a1 + 624) = (*(unsigned int (**)(uint64_t, uint64_t))(a2 + 64))(a3, v7);
  *(_DWORD *)(a1 + 584) = (*(uint64_t (**)(uint64_t))(a2 + 48))(a3);
  *(_BYTE *)(a2 + 272) = 1;
  v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 496) = v8;
  *(_WORD *)(a2 + 112) = 0;
  return 0;
}

uint64_t FigManifoldCreateForMPEG2(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CFTypeRef *a7)
{
  uint64_t v13;
  uint64_t DerivedStorage;
  CFAllocatorRef Default;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CMTime v23;
  CMTime v24;
  int v25;
  CFTypeRef cf;

  cf = 0;
  v25 = 0;
  if (a2 && FigMPEG2ParserSniff(a2, 1, &v25))
    return 4294951252;
  FigManifoldGetClassID();
  v13 = CMDerivedObjectCreate();
  if ((_DWORD)v13)
    return v13;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Default = (CFAllocatorRef)a1;
  if (!a1)
    Default = CFAllocatorGetDefault();
  *(_QWORD *)DerivedStorage = CFRetain(Default);
  *(_QWORD *)(DerivedStorage + 64) = a3;
  *(_QWORD *)(DerivedStorage + 72) = a4;
  *(_QWORD *)(DerivedStorage + 80) = a5;
  *(_QWORD *)(DerivedStorage + 88) = a6;
  *(_QWORD *)(DerivedStorage + 24) = cf;
  *(_DWORD *)(DerivedStorage + 32) = 1;
  v16 = MEMORY[0x1E0CA2E18];
  v17 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 120) = *MEMORY[0x1E0CA2E18];
  v18 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(DerivedStorage + 136) = v18;
  *(_OWORD *)(DerivedStorage + 144) = v17;
  *(_QWORD *)(DerivedStorage + 160) = v18;
  *(_QWORD *)(DerivedStorage + 184) = v18;
  *(_OWORD *)(DerivedStorage + 168) = v17;
  *(_BYTE *)(DerivedStorage + 192) = 0;
  *(_QWORD *)(DerivedStorage + 40) = 0;
  CMTimeMake(&v24, 30, 1);
  v23 = v24;
  v19 = FigMPEG2ParserCreate(a1, 2, (uint64_t)&v23, 0, 1, (uint64_t)mmNewTrackCallback, (uint64_t)mmErrorCallback, DerivedStorage, (_QWORD *)(DerivedStorage + 48));
  if ((_DWORD)v19)
  {
LABEL_12:
    v21 = v19;
    CFRelease(cf);
    return v21;
  }
  v20 = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 16) = v20;
  if (!v20)
  {
    v19 = FigSignalErrorAt();
    goto LABEL_12;
  }
  v21 = 0;
  *a7 = cf;
  return v21;
}

uint64_t mmNewTrackCallback(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  size_t v16;
  void *v17;

  v9 = a2 + 40;
  while (1)
  {
    v9 = *(_QWORD *)v9;
    if (!v9)
      break;
    if (*(_DWORD *)(v9 + 20) == a4)
      return 0;
  }
  v11 = malloc_type_calloc(1uLL, 0xC0uLL, 0x10E00404BCA8676uLL);
  if (v11)
  {
    v12 = (uint64_t)v11;
    v11[1] = a2;
    *((_DWORD *)v11 + 4) = a3;
    *((_DWORD *)v11 + 5) = a4;
    *((_DWORD *)v11 + 6) = a5;
    *((_DWORD *)v11 + 7) = a5;
    v11[22] = 0;
    v11[23] = v11 + 22;
    mmUpdateTrackType((uint64_t)v11, a5);
    *(_DWORD *)(v12 + 44) = *(_DWORD *)(a2 + 32);
    v13 = (_OWORD *)MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v12 + 104) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    *(_OWORD *)(v12 + 88) = *v13;
    ++*(_DWORD *)(a2 + 32);
    *(_BYTE *)(a2 + 11) = 1;
    if (a5 != 1768174368)
    {
      v14 = mmSampleGeneratorCreate(v12);
      if ((_DWORD)v14)
        return v14;
      if (*(_DWORD *)(v12 + 112) == 1936684398)
      {
        v16 = 0;
        v17 = 0;
        v14 = FigMPEG2ParserCopyAudioConfigurationForTrack(*(_QWORD *)(a2 + 48), *(_DWORD *)(v12 + 20), &v17, &v16);
        if (!(_DWORD)v14)
        {
          if (v17)
          {
            if (v16)
            {
              v10 = FigMPEG2SampleGeneratorSetAudioConfiguration(*(_QWORD *)(v12 + 32), v17, v16);
              free(v17);
              if ((_DWORD)v10)
                return v10;
            }
          }
          goto LABEL_13;
        }
        return v14;
      }
    }
LABEL_13:
    *(_QWORD *)v12 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v12;
    return mmInvokeNewTrackCallback(a2, v12);
  }
  return FigSignalErrorAt();
}

uint64_t mmErrorCallback(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v13;

  for (i = (_QWORD *)a2[5]; i; i = (_QWORD *)*i)
  {
    v9 = i[4];
    if (v9)
    {
      FigMPEG2SampleGeneratorFlush(v9);
      FigMPEG2SampleGeneratorResync(i[4]);
    }
    mmEmitBufferClear((uint64_t)i);
  }
  v10 = a2[14];
  a2[14] = 0;
  if (v10 >= 1)
  {
    v11 = v10;
    do
    {
      MEMORY[0x19402EA24](a2[2]);
      --v11;
    }
    while (v11);
  }
  v12 = (void (*)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))a2[9];
  if (v12)
    v12(a2[3], a4, a2[11], a5, 0);
  do
  {
    MEMORY[0x19402EA0C](a2[2]);
    v13 = a2[14] + 1;
    a2[14] = v13;
  }
  while (v13 < v10);
  return 0;
}

uint64_t FigMPEG2ManifoldIsEveryTrackIDUnique(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFMutableArrayRef Mutable;
  _QWORD *v5;
  const void *SInt32;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t v9;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return 1;
  v3 = DerivedStorage;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v5 = *(_QWORD **)(v3 + 40);
  if (!v5)
  {
LABEL_10:
    v9 = 1;
    if (!Mutable)
      return v9;
LABEL_11:
    CFRelease(Mutable);
    return v9;
  }
  while (1)
  {
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    if (CFArrayGetCount(Mutable) >= 1)
      break;
LABEL_7:
    CFArrayAppendValue(Mutable, SInt32);
    if (SInt32)
      CFRelease(SInt32);
    v5 = (_QWORD *)*v5;
    if (!v5)
      goto LABEL_10;
  }
  v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v7);
    if (CFEqual(SInt32, ValueAtIndex))
      break;
    if (++v7 >= CFArrayGetCount(Mutable))
      goto LABEL_7;
  }
  v9 = 0;
  if (Mutable)
    goto LABEL_11;
  return v9;
}

uint64_t FigMPEG2ManifoldInstallDuplicateTrack(uint64_t a1)
{
  uint64_t DerivedStorage;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return mmNewTrackCallback(DerivedStorage, DerivedStorage, *(_DWORD *)(*(_QWORD *)(DerivedStorage + 40) + 16), *(_DWORD *)(*(_QWORD *)(DerivedStorage + 40) + 20), 1768174368);
}

void MPEG2ManifoldInvalidate(const void *a1)
{
  CFRetain(a1);
  MPEG2ManifoldInvalidateGuts((uint64_t)a1);
}

uint64_t sub_192CB402C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  CFRelease(v12);
  return 0;
}

void MPEG2ManifoldFinalize(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  MPEG2ManifoldInvalidateGuts(a1);
}

__CFString *MPEG2ManifoldCopyDebugDescription()
{
  __CFString *Mutable;
  __CFString *v1;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v1 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("FigMPEG2Manifold :"));
  return v1;
}

uint64_t MPEG2ManifoldCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  int v8;
  void *v9;
  uint64_t v10;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 112);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v10 = 4294954511;
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("FMFD_ParserState")))
  {
    valuePtr = 0;
    if (*(_BYTE *)(DerivedStorage + 12))
    {
      if (*(_QWORD *)(DerivedStorage + 40))
        v8 = 2;
      else
        v8 = 1;
      valuePtr = v8;
    }
    v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  }
  else
  {
    if (!CFEqual(a2, CFSTR("FMFD_Type")))
    {
      v10 = 4294954512;
      goto LABEL_12;
    }
    v9 = (void *)CFStringCreateWithCString(a3, "MPEG2", 0x8000100u);
  }
  v10 = 0;
  *a4 = v9;
LABEL_12:
  --*(_QWORD *)(DerivedStorage + 112);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v10;
}

uint64_t MPEG2ManifoldSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v8;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTime v11;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 112);
  if (!a2)
    goto LABEL_14;
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v6 = 4294954511;
    goto LABEL_5;
  }
  if (!CFEqual(a2, CFSTR("FMFD_MaxSamplesPerBuffer")))
  {
    if (!CFEqual(a2, CFSTR("FMFD_HintForStartTime")))
    {
      v6 = 4294954512;
      goto LABEL_5;
    }
    if ((*(_DWORD *)(DerivedStorage + 156) & 0x1D) == 1)
    {
      v6 = 4294951253;
      goto LABEL_5;
    }
    if (a3)
    {
      v8 = CFGetTypeID(a3);
      if (v8 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
        value = v11.value;
        flags = v11.flags;
        timescale = v11.timescale;
        if ((v11.flags & 0x1D) == 1)
        {
          v6 = 0;
          epoch = v11.epoch;
          *(_QWORD *)(DerivedStorage + 120) = value;
          *(_DWORD *)(DerivedStorage + 128) = timescale;
          *(_DWORD *)(DerivedStorage + 132) = flags;
          *(_QWORD *)(DerivedStorage + 136) = epoch;
          goto LABEL_5;
        }
      }
    }
LABEL_14:
    v6 = FigSignalErrorAt();
    goto LABEL_5;
  }
  LODWORD(v11.value) = 0;
  CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &v11);
  v6 = 0;
  *(_QWORD *)(DerivedStorage + 56) = SLODWORD(v11.value);
LABEL_5:
  --*(_QWORD *)(DerivedStorage + 112);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v6;
}

void MPEG2ManifoldInvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 112);
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    *(_BYTE *)(DerivedStorage + 8) = 1;
    MPEG2EndAllTracks(a1, 4294954511);
    v3 = *(_QWORD *)(DerivedStorage + 48);
    if (v3)
    {
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v4)
        v4(v3);
    }
  }
  --*(_QWORD *)(DerivedStorage + 112);
  JUMPOUT(0x19402EA24);
}

uint64_t MPEG2EndAllTracks(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *i;
  uint64_t v7;
  _QWORD *j;
  void (*v9)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  FigManifoldGetFigBaseObject(a1);
  result = CMBaseObjectGetDerivedStorage();
  v5 = (_QWORD *)result;
  if (!*(_BYTE *)(result + 8))
  {
    for (i = *(_QWORD **)(result + 40); i; i = (_QWORD *)*i)
    {
      if (!(_DWORD)a2)
      {
        v7 = i[4];
        if (v7)
          FigMPEG2SampleGeneratorFlush(v7);
      }
      result = (uint64_t)mmEmitBufferClear((uint64_t)i);
    }
  }
  for (j = (_QWORD *)v5[5]; j; j = (_QWORD *)*j)
  {
    v9 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))j[9];
    if (v9)
    {
      j[9] = 0;
      v10 = j[10];
      v11 = v5[14];
      v5[14] = 0;
      if (v11 >= 1)
      {
        v12 = v11;
        do
        {
          MEMORY[0x19402EA24](v5[2]);
          --v12;
        }
        while (v12);
      }
      v9(a1, *((unsigned int *)j + 11), v10, a2);
      do
      {
        result = MEMORY[0x19402EA0C](v5[2]);
        v13 = v5[14] + 1;
        v5[14] = v13;
      }
      while (v13 < v11);
      j = v5 + 5;
    }
  }
  return result;
}

_QWORD *mmEmitBufferClear(uint64_t a1)
{
  _QWORD *result;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = (_QWORD **)(a1 + 176);
  result = *(_QWORD **)(a1 + 176);
  if (result)
  {
    do
    {
      v4 = (_QWORD *)*result;
      v5 = (_QWORD *)**v3;
      *v3 = v5;
      if (!v5)
        *(_QWORD *)(a1 + 184) = v3;
      MPEG2EmitItemRelease(result);
      result = v4;
    }
    while (v4);
  }
  return result;
}

void MPEG2EmitItemRelease(_QWORD *a1)
{
  const void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  a1[1] = 0;
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[11] = 0;
    free(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[12] = 0;
    free(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[13] = 0;
    free(v5);
  }
  free(a1);
}

uint64_t MPEG2ManifoldInjectData(const void *a1, uint64_t a2, char a3, void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  uint64_t *j;
  uint64_t *k;
  uint64_t v21;
  uint64_t m;
  _QWORD *v24;
  void (*v25)(const void *, _QWORD);

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  CFRetain(a1);
  CFRetain(a4);
  MEMORY[0x19402EA0C](*(_QWORD *)(v9 + 16));
  ++*(_QWORD *)(v9 + 112);
  if (*(_BYTE *)(v9 + 8) || (v10 = *(_QWORD *)(v9 + 48)) == 0 || *(_BYTE *)(v9 + 9))
  {
    a2 = FigSignalErrorAt();
  }
  else
  {
    *(_BYTE *)(v9 + 12) = 1;
    if ((a3 & 1) != 0)
    {
      FigMPEG2ParserIssueCommands(v10, 2);
      for (i = *(_QWORD **)(v9 + 40); i; i = (_QWORD *)*i)
      {
        v12 = i[4];
        if (v12)
          FigMPEG2SampleGeneratorResync(v12);
      }
      v13 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v9 + 144) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(v9 + 160) = *(_QWORD *)(v13 + 16);
    }
    v14 = CMGetAttachment(a4, CFSTR("FMFD_BufferDecryptor"), 0);
    v15 = CMGetAttachment(a4, CFSTR("FMFD_BufferAudioDecryptor"), 0);
    if (!FigCFEqual() || !FigCFEqual())
    {
      v16 = *(_QWORD *)(v9 + 96);
      if (v16)
      {
        mmDoFlush(v9);
        v17 = *(const void **)(v9 + 96);
      }
      else
      {
        v17 = 0;
      }
      *(_QWORD *)(v9 + 96) = v14;
      if (v14)
        CFRetain(v14);
      if (v17)
        CFRelease(v17);
      v18 = *(const void **)(v9 + 104);
      *(_QWORD *)(v9 + 104) = v15;
      if (v15)
        CFRetain(v15);
      if (v18)
        CFRelease(v18);
      if (*(_QWORD *)(v9 + 96))
      {
        FigBasicAESCPECryptorGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          if (!v16)
          {
            for (j = *(uint64_t **)(v9 + 40); j; j = (uint64_t *)*j)
              *((_BYTE *)j + 168) = 1;
          }
        }
        else
        {
          for (k = *(uint64_t **)(v9 + 40); k; k = (uint64_t *)*k)
            *((_BYTE *)k + 41) = 1;
        }
      }
    }
    if (CMBlockBufferGetDataLength((CMBlockBufferRef)a4))
    {
      if ((a3 & 4) != 0)
      {
        v21 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v9 + 168) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v9 + 184) = *(_QWORD *)(v21 + 16);
        *(_BYTE *)(v9 + 192) = 0;
      }
      *(_WORD *)(v9 + 9) = 1;
      LODWORD(a2) = FigMPEG2ParserInjectData(*(const void **)(v9 + 48), (OpaqueCMBlockBuffer *)a4, a2);
      if (!(_DWORD)a2 && *(_BYTE *)(v9 + 11))
      {
        v24 = (_QWORD *)(v9 + 40);
        while (1)
        {
          v24 = (_QWORD *)*v24;
          if (!v24)
            break;
          if (!v24[6])
            goto LABEL_36;
        }
        *(_BYTE *)(v9 + 11) = 0;
        v25 = *(void (**)(const void *, _QWORD))(v9 + 80);
        if (v25)
          v25(a1, *(_QWORD *)(v9 + 88));
      }
LABEL_36:
      if ((_DWORD)a2 == -16045)
        a2 = 0;
      else
        a2 = a2;
      if ((a3 & 2) != 0)
      {
        for (m = *(_QWORD *)(v9 + 40); m; m = *(_QWORD *)m)
        {
          if (*(_DWORD *)(m + 112) == 1936684398)
          {
            a2 = mmFlushStream(m);
            if ((_DWORD)a2)
              break;
          }
        }
      }
      *(_BYTE *)(v9 + 9) = 0;
    }
    else
    {
      a2 = 0;
    }
  }
  --*(_QWORD *)(v9 + 112);
  MEMORY[0x19402EA24](*(_QWORD *)(v9 + 16));
  CFRelease(a4);
  CFRelease(a1);
  return a2;
}

uint64_t MPEG2ManifoldNoteStreamEnd(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  const void *v9;
  uint64_t v10;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 112);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v10 = FigSignalErrorAt();
  }
  else
  {
    v5 = *(_QWORD *)(DerivedStorage + 48);
    if (v5)
    {
      if (*(_BYTE *)(DerivedStorage + 9))
        v6 = 4;
      else
        v6 = 5;
      FigMPEG2ParserIssueCommands(v5, v6);
      *(_BYTE *)(DerivedStorage + 10) = 1;
      MPEG2EndAllTracks((uint64_t)a1, a2);
      v7 = *(_QWORD *)(DerivedStorage + 48);
      if (v7)
      {
        v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v8)
          v8(v7);
        v9 = *(const void **)(DerivedStorage + 48);
        if (v9)
          CFRelease(v9);
      }
      v10 = 0;
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }
    else
    {
      v10 = 0;
    }
  }
  --*(_QWORD *)(DerivedStorage + 112);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  CFRelease(a1);
  return v10;
}

uint64_t MPEG2ManifoldCopyCurrentFormatDescriptionForTrack(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  v6 = *(_QWORD *)(DerivedStorage + 112);
  *(_QWORD *)(DerivedStorage + 112) = v6 + 1;
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v8 = 4294954511;
  }
  else
  {
    v7 = DerivedStorage + 40;
    while (1)
    {
      v7 = *(_QWORD *)v7;
      if (!v7)
        break;
      if (*(_DWORD *)(v7 + 44) == a2)
      {
        v8 = 0;
        *a3 = FigFormatDescriptionRetain();
        v6 = *(_QWORD *)(DerivedStorage + 112) - 1;
        goto LABEL_7;
      }
    }
    v8 = 4294951254;
  }
LABEL_7:
  *(_QWORD *)(DerivedStorage + 112) = v6;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v8;
}

uint64_t MPEG2ManifoldInstallCallbacksForTrack(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  __int128 v16;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 112);
  if (a3 && *(_BYTE *)(DerivedStorage + 8))
  {
    v14 = 4294954511;
  }
  else
  {
    v8 = DerivedStorage + 40;
    do
    {
      v8 = *(_QWORD *)v8;
      if (!v8)
      {
        v14 = 4294951254;
        if (!a3)
          goto LABEL_20;
        goto LABEL_18;
      }
    }
    while (*(_DWORD *)(v8 + 44) != a2);
    v9 = (_OWORD *)(v8 + 56);
    if (a3)
    {
      v10 = *a3;
      *(_QWORD *)(v8 + 72) = *((_QWORD *)a3 + 2);
      *v9 = v10;
      v11 = *(_QWORD *)(DerivedStorage + 48);
      if (v11)
      {
        if (*(_BYTE *)(v8 + 40))
        {
          v14 = 0;
        }
        else
        {
          v12 = *(_DWORD *)(v8 + 28) == 1768174368;
          v13 = mmMPEG2ParserEmitSampleDataCallback;
          if (*(_DWORD *)(v8 + 28) == 1768174368)
            v13 = mmMPEG2ParserEmitMetadataDataCallback;
          *(_QWORD *)&v16 = v13;
          *((_QWORD *)&v16 + 1) = mmMPEG2ParserNoteCommandCallback;
          v14 = FigMPEG2ParserInstallCallbacksForTrack(v11, *(_DWORD *)(v8 + 20), &v16, v8, v12);
          if (!(_DWORD)v14)
            *(_BYTE *)(v8 + 40) = 1;
        }
      }
      else
      {
        v14 = 4294951254;
      }
    }
    else
    {
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v8 + 64) = 0;
      v14 = 4294951254;
      *(_QWORD *)(v8 + 72) = 0;
    }
    *(_QWORD *)(v8 + 80) = a4;
    if (a3)
    {
LABEL_18:
      if ((_DWORD)v14)
        v14 = FigSignalErrorAt();
    }
  }
LABEL_20:
  --*(_QWORD *)(DerivedStorage + 112);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v14;
}

uint64_t MPEG2ManifoldFlush(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 112);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = 4294954511;
  }
  else if (*(_QWORD *)(DerivedStorage + 48))
  {
    if (*(_BYTE *)(DerivedStorage + 9))
    {
      v3 = FigSignalErrorAt();
    }
    else
    {
      v3 = mmDoFlush(DerivedStorage);
      *(_BYTE *)(DerivedStorage + 10) = 1;
    }
  }
  else
  {
    v3 = 0;
  }
  --*(_QWORD *)(DerivedStorage + 112);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  CFRelease(a1);
  return v3;
}

uint64_t MPEG2ManifoldCopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, CFNumberRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t TrackBitRate;
  CFNumberRef v11;
  uint64_t v12;
  uint64_t valuePtr;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 112);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v12 = 4294954511;
  }
  else if (*(_QWORD *)(DerivedStorage + 48))
  {
    v9 = DerivedStorage + 40;
    do
    {
      v9 = *(_QWORD *)v9;
      if (!v9)
      {
        v12 = 4294951254;
        goto LABEL_13;
      }
    }
    while (*(_DWORD *)(v9 + 44) != a2);
    if (CFEqual(a3, CFSTR("FMFD_TrackEstimatedDataRate")))
    {
      valuePtr = 0;
      TrackBitRate = FigMPEG2SampleGeneratorGetTrackBitRate(*(_QWORD *)(v9 + 32));
      if ((_DWORD)TrackBitRate)
      {
        v12 = TrackBitRate;
      }
      else
      {
        valuePtr >>= 3;
        v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
        *a5 = v11;
        if (v11)
          v12 = 0;
        else
          v12 = 4294954510;
      }
    }
    else
    {
      v12 = 4294954512;
    }
  }
  else
  {
    v12 = 4294954513;
  }
LABEL_13:
  --*(_QWORD *)(DerivedStorage + 112);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v12;
}

uint64_t MPEG2ManifoldReannounceUnregisteredTracks(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  _QWORD *v3;
  uint64_t FormatCallback;
  uint64_t v5;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  v2 = *(_QWORD *)(DerivedStorage + 112);
  *(_QWORD *)(DerivedStorage + 112) = v2 + 1;
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v5 = 4294954511;
  }
  else if (*(_QWORD *)(DerivedStorage + 48))
  {
    *(_BYTE *)(DerivedStorage + 10) = 0;
    v3 = *(_QWORD **)(DerivedStorage + 40);
    if (v3)
    {
      while (1)
      {
        if (!v3[7] && !v3[8])
        {
          FormatCallback = mmInvokeNewTrackCallback(DerivedStorage, (uint64_t)v3);
          if ((_DWORD)FormatCallback)
            break;
          if (v3[7])
          {
            FormatCallback = mmMPEG2MakeFormatCallback((uint64_t)v3);
            if ((_DWORD)FormatCallback)
              break;
          }
        }
        v3 = (_QWORD *)*v3;
        if (!v3)
        {
          v5 = 0;
          goto LABEL_11;
        }
      }
      v5 = FormatCallback;
LABEL_11:
      v2 = *(_QWORD *)(DerivedStorage + 112) - 1;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 4294954513;
  }
  *(_QWORD *)(DerivedStorage + 112) = v2;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v5;
}

uint64_t mmDoFlush(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = FigMPEG2ParserIssueCommands(*(_QWORD *)(a1 + 48), 1);
  if ((_DWORD)v2)
    return v2;
  v3 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v3 = (_QWORD *)*v3;
    if (!v3)
      break;
    v4 = mmFlushStream((uint64_t)v3);
    mmEmitBufferClear((uint64_t)v3);
    if ((_DWORD)v4)
      return v4;
  }
  return 0;
}

uint64_t mmFlushStream(uint64_t a1)
{
  uint64_t v2;
  uint64_t DecryptionTypeFromTrackType;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  const void *v10;
  OpaqueCMBlockBuffer *v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  CFTypeRef v18;

  if (!*(_QWORD *)(a1 + 32))
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  DecryptionTypeFromTrackType = getDecryptionTypeFromTrackType(*(_DWORD *)(a1 + 24));
  v18 = 0;
  if (*(_QWORD *)(v2 + 96))
  {
    FigBasicAESCPECryptorGetClassID();
    if (CMBaseObjectIsMemberOfClass())
    {
      v4 = *(_QWORD *)(v2 + 96);
      v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
      if (!v5)
      {
        v7 = 4294954514;
LABEL_19:
        v10 = v18;
        if (!v18)
          goto LABEL_21;
        goto LABEL_20;
      }
      v6 = v5(v4, *MEMORY[0x1E0CA3218], *MEMORY[0x1E0C9AE00], &v18);
      if ((_DWORD)v6)
      {
LABEL_6:
        v7 = v6;
        goto LABEL_19;
      }
    }
    else
    {
      v18 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
    }
  }
  v9 = (_QWORD **)(a1 + 176);
  v8 = *(_QWORD **)(a1 + 176);
  if (!v8)
  {
LABEL_17:
    v7 = 0;
    goto LABEL_19;
  }
  v10 = v18;
  if (v18 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    while (1)
    {
      v11 = (OpaqueCMBlockBuffer *)v8[1];
      v16 = *((_OWORD *)v8 + 1);
      v17 = v8[4];
      v14 = *(_OWORD *)(v8 + 5);
      v15 = v8[7];
      v6 = mmPushFrame((_QWORD *)a1, DecryptionTypeFromTrackType, 1, v11, (uint64_t)&v16, (uint64_t)&v14, *((unsigned int *)v8 + 16));
      if ((_DWORD)v6)
        goto LABEL_6;
      v12 = (_QWORD *)**v9;
      *v9 = v12;
      if (!v12)
        *(_QWORD *)(a1 + 184) = v9;
      MPEG2EmitItemRelease(v8);
      v8 = *v9;
      if (!*v9)
        goto LABEL_17;
    }
  }
  v7 = 0;
  if (v18)
LABEL_20:
    CFRelease(v10);
LABEL_21:
  if (!(_DWORD)v7)
    return FigMPEG2SampleGeneratorFlush(*(_QWORD *)(a1 + 32));
  mmEmitBufferClear(a1);
  return v7;
}

uint64_t getDecryptionTypeFromTrackType(int a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0;
  if (a1 <= 1700886114)
  {
    if (a1 == 1700880739)
    {
      v3 = MEMORY[0x1E0CA30B0];
    }
    else
    {
      if (a1 != 1700881203)
        return result;
      v3 = MEMORY[0x1E0CA30B8];
    }
  }
  else
  {
    switch(a1)
    {
      case 2053207651:
        v3 = MEMORY[0x1E0CA30D8];
        break;
      case 1701143347:
        v3 = MEMORY[0x1E0CA30C0];
        break;
      case 1700886115:
        v3 = MEMORY[0x1E0CA30D0];
        break;
      default:
        return result;
    }
  }
  return *(_QWORD *)v3;
}

uint64_t mmPushFrame(_QWORD *a1, uint64_t a2, int a3, OpaqueCMBlockBuffer *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  OpaqueCMBlockBuffer *v13;
  uint64_t v14;
  int IsRangeContiguous;
  const __CFAllocator *v16;
  uint64_t v17;
  size_t DataLength;
  size_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD, uint64_t);
  uint64_t v22;
  CMBlockBufferRef v23;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t, OpaqueCMBlockBuffer *, CMBlockBufferRef);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  CMBlockBufferRef v34;
  CMBlockBufferRef blockBufferOut;

  if (!a3)
    goto LABEL_18;
  v13 = 0;
  if (!a2)
    goto LABEL_29;
  v14 = a1[1];
  if (!*(_QWORD *)(v14 + 96))
    goto LABEL_29;
  FigBasicAESCPECryptorGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
  {
LABEL_18:
    v13 = 0;
LABEL_29:
    ++a1[20];
    v28 = a1[4];
    v32 = *(_OWORD *)a5;
    v33 = *(_QWORD *)(a5 + 16);
    v30 = *(_OWORD *)a6;
    v31 = *(_QWORD *)(a6 + 16);
    v27 = FigMPEG2SampleGeneratorPushFrame(v28, (uint64_t)a4, &v32, &v30, a7);
    goto LABEL_30;
  }
  v34 = 0;
  blockBufferOut = 0;
  if (*(_QWORD *)(v14 + 96))
  {
    FigBasicAESCPECryptorGetClassID();
    if (!CMBaseObjectIsMemberOfClass())
    {
LABEL_22:
      v13 = 0;
      goto LABEL_23;
    }
    IsRangeContiguous = CMBlockBufferIsRangeContiguous(a4, 0, 0);
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (!IsRangeContiguous)
    {
      v17 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
      if ((_DWORD)v17)
        goto LABEL_34;
      a4 = blockBufferOut;
    }
    DataLength = CMBlockBufferGetDataLength(a4);
    v19 = CMBlockBufferGetDataLength(a4);
    v17 = CMBlockBufferCreateWithMemoryBlock(v16, 0, DataLength, v16, 0, 0, v19, 1u, &v34);
    if (!(_DWORD)v17)
    {
      v20 = *(_QWORD *)(v14 + 96);
      v21 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v21)
        goto LABEL_19;
      v17 = v21(v20, *MEMORY[0x1E0CA3108], a2);
      if (!(_DWORD)v17)
      {
        v22 = *(_QWORD *)(v14 + 96);
        v23 = v34;
        v24 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        if (*v24 >= 4uLL)
        {
          v25 = (uint64_t (*)(uint64_t, OpaqueCMBlockBuffer *, CMBlockBufferRef))v24[4];
          if (v25)
          {
            v26 = v25(v22, a4, v23);
            goto LABEL_16;
          }
        }
LABEL_19:
        v13 = 0;
        v27 = 4294954514;
        goto LABEL_24;
      }
    }
LABEL_34:
    v27 = v17;
    goto LABEL_17;
  }
  v26 = FigSignalErrorAt();
LABEL_16:
  v27 = v26;
  if ((_DWORD)v26)
  {
LABEL_17:
    v13 = 0;
    goto LABEL_24;
  }
  if (!v34)
    goto LABEL_22;
  v13 = (OpaqueCMBlockBuffer *)CFRetain(v34);
LABEL_23:
  v27 = 0;
LABEL_24:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v34)
    CFRelease(v34);
  a4 = v13;
  if (!(_DWORD)v27)
    goto LABEL_29;
LABEL_30:
  if (v13)
    CFRelease(v13);
  return v27;
}

uint64_t mmMPEG2ParserEmitMetadataDataCallback(int a1, int a2, uint64_t a3, CMBlockBufferRef targetBBuf, CMTime *a5)
{
  uint64_t v5;
  uint64_t Empty;
  const void *v10;
  __int128 v11;
  OpaqueCMBlockBuffer *v12;
  uint64_t v13;
  _OWORD *v14;
  CMTimeEpoch v15;
  CMTimeEpoch v16;
  uint64_t (*v17)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, CFTypeRef);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  CFTypeRef v24;
  int v25;
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  CMTime time1;
  CFTypeRef cf;
  char *returnedPointerOut;
  CMSampleTimingInfo temporaryBlock;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 8);
  if (*(_BYTE *)(v5 + 8))
    return 4294954511;
  if ((a5->flags & 1) != 0)
  {
    returnedPointerOut = 0;
    mmAdjustPTSDTS(v5, a5, 0);
    Empty = CMBlockBufferAccessDataBytes(targetBBuf, 0, 0xAuLL, &temporaryBlock, &returnedPointerOut);
    if ((_DWORD)Empty)
      return Empty;
    if (*returnedPointerOut == 73 && returnedPointerOut[1] == 68 && returnedPointerOut[2] == 51)
    {
      v10 = *(const void **)(a3 + 120);
      *(_QWORD *)(a3 + 128) = ((unint64_t)(returnedPointerOut[6] & 0x7F) << 21) | ((unint64_t)(returnedPointerOut[7] & 0x7F) << 14) | ((unint64_t)(returnedPointerOut[8] & 0x7F) << 7) | returnedPointerOut[9] & 0x7F;
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(a3 + 120) = 0;
      }
      Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)v5, 0, 0, (CMBlockBufferRef *)(a3 + 120));
      if ((_DWORD)Empty)
        return Empty;
      v11 = *(_OWORD *)&a5->value;
      *(_QWORD *)(a3 + 152) = a5->epoch;
      *(_OWORD *)(a3 + 136) = v11;
    }
  }
  v12 = *(OpaqueCMBlockBuffer **)(a3 + 120);
  if (!v12)
    return 0;
  CMBlockBufferAppendBufferReference(v12, targetBBuf, 0, 0, 0);
  v13 = 0;
  if (CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a3 + 120)) < *(_QWORD *)(a3 + 128))
    return v13;
  if (!*(_QWORD *)(a3 + 48))
  {
    temporaryBlock.duration.value = 0;
    Empty = CMFormatDescriptionCreate(*(CFAllocatorRef *)v5, 0x6D657461u, 0x69643320u, 0, (CMFormatDescriptionRef *)&temporaryBlock);
    if (!(_DWORD)Empty)
    {
      v24 = FigManifoldRetain(*(CFTypeRef *)(v5 + 24));
      v13 = mmMPEG2NewFormatCallback((uint64_t)v24, a3);
      v25 = *(unsigned __int8 *)(v5 + 8);
      FigFormatDescriptionRelease();
      CFRelease(*(CFTypeRef *)(v5 + 24));
      if ((_DWORD)v13)
        return v13;
      if (!v25)
        goto LABEL_14;
      return 4294954511;
    }
    return Empty;
  }
LABEL_14:
  cf = 0;
  returnedPointerOut = (char *)CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a3 + 120));
  v14 = (_OWORD *)(a3 + 88);
  if ((*(_BYTE *)(a3 + 100) & 1) != 0)
  {
    time1 = *(CMTime *)(a3 + 136);
    *(_OWORD *)&time2.value = *v14;
    time2.epoch = *(_QWORD *)(a3 + 104);
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      *(_OWORD *)&lhs.value = *v14;
      lhs.epoch = *(_QWORD *)(a3 + 104);
      CMTimeMake(&rhs, 1, 90000);
      CMTimeAdd(&temporaryBlock.duration, &lhs, &rhs);
      *(_OWORD *)(a3 + 136) = *(_OWORD *)&temporaryBlock.duration.value;
      *(_QWORD *)(a3 + 152) = temporaryBlock.duration.epoch;
    }
  }
  *(_OWORD *)&temporaryBlock.decodeTimeStamp.value = *MEMORY[0x1E0CA2E18];
  v15 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)&temporaryBlock.presentationTimeStamp.value = *(_OWORD *)(a3 + 136);
  v16 = *(_QWORD *)(a3 + 152);
  temporaryBlock.decodeTimeStamp.epoch = v15;
  temporaryBlock.presentationTimeStamp.epoch = v16;
  CMTimeMake(&temporaryBlock.duration, 1, 90000);
  *v14 = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 104) = *(_QWORD *)(a3 + 152);
  Empty = CMSampleBufferCreate(*(CFAllocatorRef *)v5, *(CMBlockBufferRef *)(a3 + 120), 1u, 0, 0, *(CMFormatDescriptionRef *)(a3 + 48), 1, 1, &temporaryBlock, 1, (const size_t *)&returnedPointerOut, (CMSampleBufferRef *)&cf);
  if ((_DWORD)Empty)
    return Empty;
  v17 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, CFTypeRef))(a3 + 64);
  if (!v17)
  {
LABEL_28:
    v22 = *(const void **)(a3 + 120);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(a3 + 120) = 0;
    }
    *(_QWORD *)(a3 + 128) = 0;
    if (cf)
      CFRelease(cf);
    return 0;
  }
  v18 = *(_QWORD *)(a3 + 80);
  ++*(_QWORD *)(a3 + 160);
  v19 = *(_QWORD *)(v5 + 112);
  *(_QWORD *)(v5 + 112) = 0;
  if (v19 >= 1)
  {
    v20 = v19;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(v5 + 16));
      --v20;
    }
    while (v20);
  }
  v13 = v17(*(_QWORD *)(v5 + 24), *(unsigned int *)(a3 + 44), v18, 0, 0, cf);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(v5 + 16));
    v21 = *(_QWORD *)(v5 + 112) + 1;
    *(_QWORD *)(v5 + 112) = v21;
  }
  while (v21 < v19);
  if (!(_DWORD)v13)
  {
    if (*(_BYTE *)(v5 + 8) || *(_BYTE *)(v5 + 10))
      return 4294951251;
    goto LABEL_28;
  }
  return v13;
}

uint64_t mmMPEG2ParserEmitSampleDataCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, CMTime *a5, CMTime *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t DecryptionTypeFromTrackType;
  uint64_t v19;
  CFTypeRef *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v23;
  _BOOL4 v24;
  __int128 v25;
  CMTimeEpoch v26;
  __int128 v27;
  CMTimeEpoch epoch;
  __int128 v29;
  CMTimeEpoch v30;
  __int128 v31;
  CMTimeEpoch v32;
  CFTypeRef v33;

  v7 = *(_QWORD *)(a3 + 8);
  if (*(_BYTE *)(v7 + 8) || !*(_QWORD *)(a3 + 32))
    return 4294954511;
  mmAdjustPTSDTS(*(_QWORD *)(a3 + 8), a5, a6);
  if ((a5->flags & 0x1D) == 1 && (*(_BYTE *)(v7 + 180) & 1) == 0)
  {
    v15 = *(_DWORD *)(a3 + 24);
    if ((v15 == 1700886115 || v15 == 2053207651 || v15 == 1748121140) && !*(_BYTE *)(v7 + 192))
    {
      v16 = *(_OWORD *)&a5->value;
      *(_QWORD *)(v7 + 184) = a5->epoch;
      *(_OWORD *)(v7 + 168) = v16;
    }
  }
  if (*(_BYTE *)(a3 + 168))
  {
    *(_BYTE *)(a3 + 168) = 0;
    mmUpdateTrackType(a3, *(_DWORD *)(a3 + 24));
    if (*(_DWORD *)(a3 + 28) != 1768174368)
    {
      v17 = mmSampleGeneratorCreate(a3);
      if ((_DWORD)v17)
        return v17;
    }
  }
  v27 = *(_OWORD *)&a5->value;
  epoch = a5->epoch;
  v25 = *(_OWORD *)&a6->value;
  v26 = a6->epoch;
  DecryptionTypeFromTrackType = getDecryptionTypeFromTrackType(*(_DWORD *)(a3 + 24));
  v33 = 0;
  v19 = *(_QWORD *)(a3 + 8);
  v20 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (*(_QWORD *)(v19 + 96))
  {
    FigBasicAESCPECryptorGetClassID();
    if (CMBaseObjectIsMemberOfClass())
    {
      v21 = *(_QWORD *)(v19 + 96);
      v22 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
      if (!v22)
        return 4294954514;
      v8 = v22(v21, *MEMORY[0x1E0CA3218], *MEMORY[0x1E0C9AE00], &v33);
      v23 = v33;
      if ((_DWORD)v8)
        goto LABEL_23;
    }
    else
    {
      v23 = CFRetain(*v20);
      v33 = v23;
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = v23 == *v20;
  v31 = v27;
  v32 = epoch;
  v29 = v25;
  v30 = v26;
  v8 = mmPushFrame((_QWORD *)a3, DecryptionTypeFromTrackType, v24, a4, (uint64_t)&v31, (uint64_t)&v29, a7);
  v23 = v33;
LABEL_23:
  if (v23)
    CFRelease(v23);
  return v8;
}

double mmAdjustPTSDTS(uint64_t a1, CMTime *a2, CMTime *a3)
{
  __n128 *v6;
  uint64_t v7;
  __int128 v8;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v11;
  CMTimeEpoch v12;
  CMTimeValue v13;
  CMTimeFlags v14;
  CMTimeEpoch v15;
  CMTimeFlags v16;
  CMTimeEpoch v17;
  CMTimeValue v18;
  CMTime *v19;
  uint64_t v20;
  __int128 v21;
  CMTimeEpoch v22;
  CMTimeEpoch v23;
  uint64_t v24;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v42;
  CMTimeValue v43;
  CMTimeScale v44;
  CMTimeValue v45;
  CMTimeScale v46;
  CMTimeValue v47;
  CMTimeScale v48;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = (__n128 *)(a1 + 120);
  if ((*(_DWORD *)(a1 + 132) & 0x1D) != 1)
  {
    v7 = MEMORY[0x1E0CA2E68];
    v8 = *MEMORY[0x1E0CA2E68];
    *v6 = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(v7 + 16);
  }
  if (a3 && (a3->flags & 0x1D) == 1)
  {
    v34 = *a3;
    *(__n128 *)&v33.value = *v6;
    v33.epoch = *(_QWORD *)(a1 + 136);
    FigManifoldAdjustTimestampAndUpdateRefTime(&v33, &v34, v6);
    value = a3->value;
    flags = a3->flags;
    timescale = a3->timescale;
    epoch = a3->epoch;
    v47 = v34.value;
    v11 = v34.flags;
    v48 = v34.timescale;
    v12 = v34.epoch;
    if ((flags & 0x1F) != 3 && (v34.flags & 0x1F) != 3)
      goto LABEL_8;
    memset(&v42, 0, sizeof(v42));
    v13 = a3->value;
    rhs.epoch = v34.epoch;
    lhs.value = v13;
    lhs.timescale = a3->timescale;
    lhs.flags = flags;
    lhs.epoch = epoch;
    *(_OWORD *)&rhs.value = *(_OWORD *)&v34.value;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&v42, &time);
    time1 = v42;
    CMTimeMake(&time2, 1, 1000000000);
    if (CMTimeCompare(&time1, &time2) > 0)
    {
LABEL_8:
      v35.epoch = v12;
      v36.value = value;
      v36.timescale = timescale;
      v36.flags = flags;
      v36.epoch = epoch;
      v35.value = v47;
      v35.timescale = v48;
      v35.flags = v11;
      if (CMTimeCompare(&v36, &v35))
      {
        *(_QWORD *)&v8 = v34.value;
        *a3 = v34;
      }
    }
  }
  if (a2)
  {
    if ((a2->flags & 0x1D) == 1)
    {
      v34 = *a2;
      v32 = *(CMTime *)v6->n128_u8;
      FigManifoldAdjustTimestampAndUpdateRefTime(&v32, &v34, v6);
      v45 = a2->value;
      v14 = a2->flags;
      v46 = a2->timescale;
      v15 = a2->epoch;
      v43 = v34.value;
      v16 = v34.flags;
      v44 = v34.timescale;
      v17 = v34.epoch;
      if ((v14 & 0x1F) != 3 && (v34.flags & 0x1F) != 3)
        goto LABEL_15;
      memset(&v42, 0, sizeof(v42));
      v18 = a2->value;
      rhs.epoch = v34.epoch;
      lhs.value = v18;
      lhs.timescale = a2->timescale;
      lhs.flags = v14;
      lhs.epoch = v15;
      *(_OWORD *)&rhs.value = *(_OWORD *)&v34.value;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&v42, &time);
      time1 = v42;
      CMTimeMake(&time2, 1, 1000000000);
      if (CMTimeCompare(&time1, &time2) > 0)
      {
LABEL_15:
        v35.epoch = v17;
        v36.value = v45;
        v36.timescale = v46;
        v36.flags = v14;
        v36.epoch = v15;
        v35.value = v43;
        v35.timescale = v44;
        v35.flags = v16;
        if (CMTimeCompare(&v36, &v35))
        {
          *(_QWORD *)&v8 = v34.value;
          *a2 = v34;
        }
      }
    }
    v19 = (CMTime *)(a1 + 144);
    if ((*(_DWORD *)(a1 + 156) & 0x1D) != 1)
    {
      v20 = MEMORY[0x1E0CA2E68];
      v21 = *MEMORY[0x1E0CA2E68];
      *(_OWORD *)&v19->value = *MEMORY[0x1E0CA2E68];
      v22 = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(a1 + 160) = v22;
      v31 = *a2;
      *(_OWORD *)&v30.value = v21;
      v30.epoch = v22;
      if (CMTimeCompare(&v31, &v30) < 0)
      {
        CMTimeMake(&v42, 0x200000000, 90000);
        *(_QWORD *)&v8 = v42.value;
        *(_OWORD *)&v19->value = *(_OWORD *)&v42.value;
        v23 = v42.epoch;
LABEL_22:
        v19->epoch = v23;
      }
    }
  }
  else
  {
    v19 = (CMTime *)(a1 + 144);
    if ((*(_DWORD *)(a1 + 156) & 0x1D) != 1)
    {
      v24 = MEMORY[0x1E0CA2E68];
      v8 = *MEMORY[0x1E0CA2E68];
      *(_OWORD *)&v19->value = *MEMORY[0x1E0CA2E68];
      v23 = *(_QWORD *)(v24 + 16);
      goto LABEL_22;
    }
  }
  if (a3 && (a3->flags & 0x1D) == 1)
  {
    v29 = *a3;
    v28 = *v19;
    CMTimeAdd(&v42, &v29, &v28);
    *(_QWORD *)&v8 = v42.value;
    *a3 = v42;
  }
  if (a2 && (a2->flags & 0x1D) == 1)
  {
    v27 = *a2;
    v26 = *v19;
    CMTimeAdd(&v42, &v27, &v26);
    *(_QWORD *)&v8 = v42.value;
    *a2 = v42;
  }
  return *(double *)&v8;
}

uint64_t mmMPEG2NewFormatCallback(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = *(const void **)(a2 + 48);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a2 + 48) = FigFormatDescriptionRetain();
  if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 8))
    return 4294954511;
  else
    return mmMPEG2MakeFormatCallback(a2);
}

uint64_t mmMPEG2MakeFormatCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  FourCharCode MediaSubType;
  BOOL v7;
  BOOL v8;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 96);
  if (!v3 && !*(_QWORD *)(v2 + 104))
    goto LABEL_20;
  v4 = *(_DWORD *)(a1 + 112);
  if (v4 != 1936684398)
  {
    if (v4 == 1986618469)
      v5 = v3;
    else
      v5 = 0;
    goto LABEL_21;
  }
  MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 48));
  v7 = MediaSubType - 2053202739 > 0x3D || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0;
  v8 = !v7 || MediaSubType == 2053464883;
  if (!v8 && MediaSubType != 2053202275)
  {
LABEL_20:
    v5 = 0;
    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v10 + 104);
  if (!v5)
    v5 = *(_QWORD *)(v10 + 96);
LABEL_21:
  v11 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(a1 + 56);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(v12 + 112);
  *(_QWORD *)(v12 + 112) = 0;
  v15 = v12;
  if (v14 >= 1)
  {
    v16 = v14;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(v12 + 16));
      --v16;
    }
    while (v16);
    v15 = *(_QWORD *)(a1 + 8);
  }
  v17 = v11(*(_QWORD *)(v15 + 24), *(unsigned int *)(a1 + 44), v13, *(_QWORD *)(a1 + 48), v5);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(v12 + 16));
    v18 = *(_QWORD *)(v12 + 112) + 1;
    *(_QWORD *)(v12 + 112) = v18;
  }
  while (v18 < v14);
  if (!(_DWORD)v17)
  {
    if (*(_BYTE *)(v12 + 8) || *(_BYTE *)(v12 + 10))
    {
      return 4294951251;
    }
    else
    {
      v17 = 0;
      *(_BYTE *)(a1 + 41) = 0;
    }
  }
  return v17;
}

uint64_t mmUpdateTrackType(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (a2 <= 1701143346)
  {
    if (a2 > 1700880738)
    {
      if (a2 <= 1700886114)
      {
        if (a2 == 1700880739)
        {
          if (!*(_QWORD *)(v3 + 96))
            goto LABEL_44;
          FigBasicAESCPECryptorGetClassID();
          result = CMBaseObjectIsMemberOfClass();
          if (!(_DWORD)result)
            goto LABEL_44;
          v6 = 1633973363;
        }
        else
        {
          if (a2 != 1700881203)
            return result;
          if (!*(_QWORD *)(v3 + 96))
            goto LABEL_44;
          FigBasicAESCPECryptorGetClassID();
          result = CMBaseObjectIsMemberOfClass();
          if (!(_DWORD)result)
            goto LABEL_44;
          v6 = 1633891104;
        }
        goto LABEL_43;
      }
      if (a2 == 1700886115)
      {
LABEL_33:
        if (*(_QWORD *)(v3 + 96))
        {
          FigBasicAESCPECryptorGetClassID();
          result = CMBaseObjectIsMemberOfClass();
          if ((_DWORD)result)
            *(_DWORD *)(v2 + 28) = 1748121140;
        }
        goto LABEL_36;
      }
      v4 = 1700998451;
    }
    else if (a2 > 1635017570)
    {
      if (a2 == 1635017571)
      {
        v7 = 1668047728;
        goto LABEL_45;
      }
      v4 = 1685353248;
    }
    else
    {
      if (a2 == 1633891104)
        goto LABEL_44;
      v4 = 1633973363;
    }
LABEL_31:
    if (a2 != v4)
      return result;
    goto LABEL_44;
  }
  if (a2 <= 1835103587)
  {
    if (a2 <= 1768174367)
    {
      if (a2 != 1701143347)
      {
        v5 = 1748121140;
        goto LABEL_23;
      }
      if (!*(_QWORD *)(v3 + 96))
        goto LABEL_44;
      FigBasicAESCPECryptorGetClassID();
      result = CMBaseObjectIsMemberOfClass();
      if (!(_DWORD)result)
        goto LABEL_44;
      v6 = 1700998451;
LABEL_43:
      *(_DWORD *)(v2 + 28) = v6;
      goto LABEL_44;
    }
    if (a2 == 1768174368)
    {
      v7 = 1835365473;
      goto LABEL_45;
    }
    v4 = 1819304813;
    goto LABEL_31;
  }
  if (a2 <= 1836476771)
  {
    if (a2 == 1835103588)
      goto LABEL_44;
    v5 = 1836070006;
LABEL_23:
    if (a2 != v5)
      return result;
    goto LABEL_36;
  }
  if (a2 != 1836476772)
  {
    if (a2 != 1886612592)
    {
      if (a2 != 2053207651)
        return result;
      goto LABEL_33;
    }
LABEL_44:
    v7 = 1936684398;
    goto LABEL_45;
  }
LABEL_36:
  v7 = 1986618469;
LABEL_45:
  *(_DWORD *)(v2 + 112) = v7;
  return result;
}

uint64_t mmSampleGeneratorCreate(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (uint64_t *)(a1 + 32);
  FigMPEG2SampleGeneratorDestroy(*(_QWORD *)(a1 + 32));
  *v3 = 0;
  v4 = FigMPEG2SampleGeneratorCreate(*(CFAllocatorRef *)v2, (uint64_t)mmMPEG2NewFormatCallback, (uint64_t)mmMPEG2NewSampleCallback, a1, *(_DWORD *)(a1 + 28), 0, v3);
  if (!(_DWORD)v4)
  {
    v5 = *(_QWORD *)(v2 + 56);
    if (v5 >= 1)
      FigMPEG2SampleGeneratorSetMaxFramesPerSampleBuffer(*v3, v5);
  }
  return v4;
}

uint64_t mmMPEG2NewSampleCallback(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  CFDictionaryRef v12;
  CFDictionaryRef v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, const void *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CMTime v22;

  v5 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v5 + 8))
    return 4294954511;
  if (!*(_QWORD *)(a2 + 64))
    return 0;
  if (*(_BYTE *)(a2 + 41))
    mmMPEG2MakeFormatCallback(a2);
  v10 = (a5 >> 4) & 1;
  if ((*(_BYTE *)(v5 + 180) & 1) != 0)
  {
    v11 = *(_DWORD *)(a2 + 24);
    if (v11 == 1700886115 || v11 == 2053207651 || v11 == 1748121140)
    {
      v22 = *(CMTime *)(v5 + 168);
      v12 = CMTimeCopyAsDictionary(&v22, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      if (v12)
      {
        v13 = v12;
        CMSetAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA4E68], v12, 1u);
        CFRelease(v13);
      }
      v14 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v5 + 168) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(v5 + 184) = *(_QWORD *)(v14 + 16);
      *(_BYTE *)(v5 + 192) = 1;
    }
  }
  v15 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, const void *))(a2 + 64);
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(v5 + 112);
  *(_QWORD *)(v5 + 112) = 0;
  if (v17 >= 1)
  {
    v18 = v17;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(v5 + 16));
      --v18;
    }
    while (v18);
  }
  v19 = v15(*(_QWORD *)(v5 + 24), *(unsigned int *)(a2 + 44), v16, v10, a4, a3);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(v5 + 16));
    v20 = *(_QWORD *)(v5 + 112) + 1;
    *(_QWORD *)(v5 + 112) = v20;
  }
  while (v20 < v17);
  if (!(_DWORD)v19)
  {
    v19 = 4294951251;
    if (!*(_BYTE *)(v5 + 8))
    {
      if (*(_BYTE *)(v5 + 10))
        return 4294951251;
      else
        return 0;
    }
  }
  return v19;
}

uint64_t mmInvokeNewTrackCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a2 + 112);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v5 >= 1)
  {
    v6 = v5;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
      --v6;
    }
    while (v6);
  }
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1 + 64))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 88), v3, v4);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    v8 = *(_QWORD *)(a1 + 112) + 1;
    *(_QWORD *)(a1 + 112) = v8;
  }
  while (v8 < v5);
  if (!(_DWORD)v7)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      return 4294951251;
    }
    else if (*(_BYTE *)(a1 + 10))
    {
      return 4294951251;
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t FigXMLServiceReadAndCopyParsedXML(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  CFTypeRef cf;
  int valuePtr;
  CFNumberRef number;
  CFTypeRef v12;
  void *v13;
  xpc_object_t xdict;

  v13 = 0;
  xdict = 0;
  number = 0;
  v12 = 0;
  valuePtr = -1;
  cf = 0;
  if (fxs_ensureClientEstablished_sFigXMLServiceRemoteClientSetupOnce != -1)
    dispatch_once(&fxs_ensureClientEstablished_sFigXMLServiceRemoteClientSetupOnce, &__block_literal_global_37);
  v3 = fxs_ensureClientEstablished_err;
  if (!fxs_ensureClientEstablished_err)
  {
    v4 = FigXPCCreateBasicMessage();
    if ((_DWORD)v4)
      goto LABEL_20;
    v5 = *MEMORY[0x1E0C9AE00];
    v4 = CMByteStreamCreateForFileURL();
    if ((_DWORD)v4)
      goto LABEL_20;
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (!v7)
    {
      v3 = 4294954514;
      goto LABEL_15;
    }
    v4 = v7(CMBaseObject, *MEMORY[0x1E0CA2F58], v5, &number);
    if ((_DWORD)v4
      || (CFNumberGetValue(number, kCFNumberIntType, &valuePtr),
          xpc_dictionary_set_fd(xdict, "fd", valuePtr),
          v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(),
          (_DWORD)v4))
    {
LABEL_20:
      v3 = v4;
    }
    else
    {
      v3 = fxs_deserializeFigXMLNode(v13, 0, &cf);
      if (!a2 || (_DWORD)v3)
      {
        if (cf)
          CFRelease(cf);
      }
      else
      {
        *a2 = cf;
      }
    }
  }
LABEL_15:
  if (v12)
    CFRelease(v12);
  if (number)
    CFRelease(number);
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t fxs_deserializeFigXMLNode(void *a1, uint64_t a2, CFTypeRef *a3)
{
  xpc_object_t value;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  void *v9;
  size_t count;
  size_t v11;
  size_t v12;
  xpc_object_t v13;
  uint64_t v14;
  CFTypeRef v16;

  value = a1;
  v16 = 0;
  if (!a2)
    value = xpc_dictionary_get_value(a1, "root");
  if (!value)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_22;
  }
  v6 = FigXPCMessageCopyCFString();
  if ((_DWORD)v6)
    goto LABEL_22;
  v6 = FigXPCMessageCopyCFString();
  if ((_DWORD)v6)
    goto LABEL_22;
  v6 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v6)
    goto LABEL_22;
  v7 = *MEMORY[0x1E0C9AE00];
  if (!a2)
  {
    v6 = FigXMLNodeCreateNode(v7, 0, &v16);
    if (!(_DWORD)v6)
      goto LABEL_11;
LABEL_22:
    v14 = v6;
    goto LABEL_18;
  }
  v6 = FigXMLNodeCreateChildNode(v7, a2, 0, &v16);
  if ((_DWORD)v6)
    goto LABEL_22;
LABEL_11:
  v8 = xpc_dictionary_get_value(value, "children");
  if (v8)
  {
    v9 = v8;
    count = xpc_array_get_count(v8);
    if (count)
    {
      v11 = count;
      v12 = 0;
      do
      {
        v13 = xpc_array_get_value(v9, v12);
        v6 = fxs_deserializeFigXMLNode(v13, v16, a3);
        if ((_DWORD)v6)
          goto LABEL_22;
      }
      while (v11 != ++v12);
    }
  }
  v14 = 0;
  if (!a2)
  {
    *a3 = v16;
    v16 = 0;
  }
LABEL_18:
  if (v16)
    CFRelease(v16);
  return v14;
}

uint64_t FigXMLServiceReadFromMemoryAndCopyParsedXML(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  CFTypeRef cf;
  void *v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  cf = 0;
  if (fxs_ensureClientEstablished_sFigXMLServiceRemoteClientSetupOnce != -1)
    dispatch_once(&fxs_ensureClientEstablished_sFigXMLServiceRemoteClientSetupOnce, &__block_literal_global_37);
  v5 = fxs_ensureClientEstablished_err;
  if (!fxs_ensureClientEstablished_err)
  {
    v6 = FigXPCCreateBasicMessage();
    if ((_DWORD)v6
      || (v6 = FigXPCMessageSetBlockBuffer(), (_DWORD)v6)
      || (v6 = FigXPCMessageSetCFURL(), (_DWORD)v6)
      || (v6 = FigXPCMessageSetCFString(), (_DWORD)v6)
      || (v6 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v6))
    {
      v5 = v6;
    }
    else
    {
      v5 = fxs_deserializeFigXMLNode(v9, 0, &cf);
      if (!a4 || (_DWORD)v5)
      {
        if (cf)
          CFRelease(cf);
      }
      else
      {
        *a4 = cf;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

void __fxs_ensureClientEstablished_block_invoke()
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v1 = Mutable;
    FigCFDictionarySetValue();
    fxs_ensureClientEstablished_err = FigXPCRemoteClientCreate();
    CFRelease(v1);
  }
  else
  {
    fxs_ensureClientEstablished_err = -12786;
  }
}

uint64_t FigSampleBufferProviderCreateForVisualContext(const __CFAllocator *a1, void *a2, __int128 *a3, __int128 *a4, CFTypeRef *a5)
{
  CFArrayRef v8;
  CFArrayRef v9;
  const __CFAllocator *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15[3];
  CMTime v16;
  void *values;

  values = a2;
  if (!a2)
    return FigSignalErrorAt();
  v8 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = *a3;
  v16.epoch = *((_QWORD *)a3 + 2);
  v12 = a4[1];
  v15[0] = *a4;
  v15[1] = v12;
  v15[2] = a4[2];
  *(_OWORD *)&v16.value = v11;
  v13 = FigSampleBufferProviderCreateForVisualContextGroup(v10, v9, &v16, v15, a5);
  CFRelease(v9);
  return v13;
}

uint64_t FigSampleBufferProviderCreateForVisualContextGroup(const __CFAllocator *a1, CFTypeRef cf, CMTime *a3, __int128 *a4, CFTypeRef *a5)
{
  CFTypeID v10;
  CFIndex Count;
  uint64_t v12;
  uint64_t v13;
  uint64_t DerivedStorage;
  CFArrayRef Copy;
  int32_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  CFIndex v22;
  const void *ValueAtIndex;
  CFTypeRef v24;
  uint64_t (*v25)(const void *, _BYTE *(*)(), CFTypeRef);
  uint64_t v26;
  CFTypeRef v27;
  uint64_t (*v28)(const void *, _BYTE *(*)(), CFTypeRef);
  __int128 v29;
  __int128 v30;
  CMTime v31;
  CMTime time1;
  CFTypeRef cfa;

  cfa = 0;
  if (!cf)
    return FigSignalErrorAt();
  v10 = CFGetTypeID(cf);
  if (v10 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  Count = CFArrayGetCount((CFArrayRef)cf);
  if (!Count || !a5)
    return FigSignalErrorAt();
  v12 = Count;
  FigSampleBufferProviderGetClassID();
  v13 = CMDerivedObjectCreate();
  if ((_DWORD)v13)
    goto LABEL_6;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Copy = CFArrayCreateCopy(a1, (CFArrayRef)cf);
  *(_QWORD *)(DerivedStorage + 16) = Copy;
  if (!Copy)
  {
    v26 = FigSignalErrorAt();
LABEL_32:
    v13 = v26;
LABEL_6:
    if (cfa)
      CFRelease(cfa);
    return v13;
  }
  *(_QWORD *)(DerivedStorage + 8) = v12;
  if ((a3->flags & 0x1D) == 1)
  {
    time1 = *a3;
    v31 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v17 = CMTimeCompare(&time1, &v31);
    *(_BYTE *)(DerivedStorage + 32) = v17 > 0;
    if (v17 >= 1)
    {
      v18 = *(_OWORD *)&a3->value;
      *(_QWORD *)(DerivedStorage + 56) = a3->epoch;
      *(_OWORD *)(DerivedStorage + 40) = v18;
      v19 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 64) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(DerivedStorage + 80) = *(_QWORD *)(v19 + 16);
    }
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 32) = 0;
  }
  if ((*((_BYTE *)a4 + 12) & 1) == 0
    || (*((_BYTE *)a4 + 36) & 1) == 0
    || *((_QWORD *)a4 + 5)
    || (*((_QWORD *)a4 + 3) & 0x8000000000000000) != 0
    || (time1 = *(CMTime *)((_BYTE *)a4 + 1),
        v31 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
        CMTimeCompare(&time1, &v31) < 1))
  {
    v20 = MEMORY[0x1E0CA2E40];
    v21 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *(_OWORD *)(DerivedStorage + 128) = *MEMORY[0x1E0CA2E40];
    *(_OWORD *)(DerivedStorage + 144) = v21;
    *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)(v20 + 32);
  }
  else
  {
    v29 = *a4;
    v30 = a4[2];
    *(_OWORD *)(DerivedStorage + 144) = a4[1];
    *(_OWORD *)(DerivedStorage + 160) = v30;
    *(_OWORD *)(DerivedStorage + 128) = v29;
  }
  if (v12 >= 1)
  {
    v22 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v22);
      v24 = cfa;
      v25 = *(uint64_t (**)(const void *, _BYTE *(*)(), CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 16);
      if (!v25)
        break;
      v26 = v25(ValueAtIndex, sbp_vc_imageAvailableSequential, v24);
      if ((_DWORD)v26)
        goto LABEL_32;
      v27 = cfa;
      v28 = *(uint64_t (**)(const void *, _BYTE *(*)(), CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
      if (!v28)
        break;
      v26 = v28(ValueAtIndex, sbp_vc_noMoreImages, v27);
      if ((_DWORD)v26)
        goto LABEL_32;
      if (v12 == ++v22)
        goto LABEL_25;
    }
    v13 = 4294954514;
    goto LABEL_6;
  }
LABEL_25:
  sbp_vc_checkForRequestedDropRanges();
  v13 = 0;
  *a5 = cfa;
  return v13;
}

_BYTE *sbp_vc_imageAvailableSequential()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_BYTE *)CMNotificationCenterPostNotification();
  }
  return result;
}

_BYTE *sbp_vc_noMoreImages()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_BYTE *)CMNotificationCenterPostNotification();
  }
  return result;
}

void sbp_vc_checkForRequestedDropRanges()
{
  _QWORD *DerivedStorage;
  const __CFArray *v1;
  const __CFArray *v2;
  CFTypeID TypeID;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t i;
  const __CFNumber *ValueAtIndex;
  CFTypeID v10;
  double DoubleValue;
  CFTypeID v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  CMTime v21;
  CMTime lhs;
  CMTime v23;
  CMTime v24;
  double valuePtr;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const __CFArray *)CFPreferencesCopyAppValue(CFSTR("video_drop_ranges"), CFSTR("com.apple.coremedia"));
  if (v1)
  {
    v2 = v1;
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(v2))
    {
      Count = CFArrayGetCount(v2);
      v5 = Count;
      if ((Count & 1) != 0)
      {
LABEL_18:
        DerivedStorage[25] = 0;
      }
      else
      {
        if (Count >= 0)
          v6 = Count;
        else
          v6 = Count + 1;
        v7 = v6 >> 1;
        DerivedStorage[23] = malloc_type_calloc(v6 >> 1, 0x18uLL, 0x1000040504FFAC1uLL);
        DerivedStorage[24] = malloc_type_calloc(v7, 0x18uLL, 0x1000040504FFAC1uLL);
        DerivedStorage[25] = v7;
        if (v5 >= 1)
        {
          for (i = 0; i != v5; ++i)
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v2, i);
            valuePtr = 0.0;
            memset(&v24, 0, sizeof(v24));
            v10 = CFNumberGetTypeID();
            if (v10 == CFGetTypeID(ValueAtIndex))
            {
              CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
              DoubleValue = valuePtr;
            }
            else
            {
              v12 = CFStringGetTypeID();
              if (v12 != CFGetTypeID(ValueAtIndex))
                goto LABEL_18;
              DoubleValue = CFStringGetDoubleValue((CFStringRef)ValueAtIndex);
              valuePtr = DoubleValue;
            }
            v13 = i >> 1;
            CMTimeMakeWithSeconds(&v24, DoubleValue, 1000);
            if ((i & 1) != 0)
            {
              v16 = 3 * v13;
              v17 = DerivedStorage[24] + 24 * v13;
              v18 = DerivedStorage[23] + 8 * v16;
              lhs = v24;
              v19 = *(_OWORD *)v18;
              v21.epoch = *(_QWORD *)(v18 + 16);
              *(_OWORD *)&v21.value = v19;
              CMTimeAdd(&v23, &lhs, &v21);
              v20 = *(_OWORD *)&v23.value;
              *(_QWORD *)(v17 + 16) = v23.epoch;
              *(_OWORD *)v17 = v20;
            }
            else
            {
              v14 = DerivedStorage[23] + 24 * v13;
              v15 = *(_OWORD *)&v24.value;
              *(_QWORD *)(v14 + 16) = v24.epoch;
              *(_OWORD *)v14 = v15;
            }
          }
        }
      }
    }
    CFRelease(v2);
  }
}

uint64_t sbp_vc_invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  CFIndex v2;
  const void *ValueAtIndex;
  void (*v4)(const void *, _QWORD, _QWORD);
  void (*v5)(const void *, _QWORD, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    if (*(uint64_t *)(DerivedStorage + 8) >= 1)
    {
      v2 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 16), v2);
        v4 = *(void (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v4)
          v4(ValueAtIndex, 0, 0);
        v5 = *(void (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v5)
          v5(ValueAtIndex, 0, 0);
        ++v2;
      }
      while (v2 < *(_QWORD *)(v1 + 8));
    }
  }
  return 0;
}

void sbp_vc_finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  void (*v3)(uint64_t);
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  void *v8;
  void *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v3)
      v3(a1);
  }
  v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
  v5 = (const void *)DerivedStorage[3];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[3] = 0;
  }
  v6 = (const void *)DerivedStorage[11];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[11] = 0;
  }
  v7 = (const void *)DerivedStorage[22];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[22] = 0;
  }
  v8 = (void *)DerivedStorage[23];
  if (v8)
    free(v8);
  v9 = (void *)DerivedStorage[24];
  if (v9)
    free(v9);
}

__CFString *sbp_vc_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProviderForVisualContext %p>"), a1);
  return Mutable;
}

BOOL sbp_vc_isEmpty()
{
  uint64_t DerivedStorage;
  uint64_t v2;
  CFIndex v3;
  const void *ValueAtIndex;
  int EarliestSequentialImageTime;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    FigSignalErrorAt();
    return 1;
  }
  else
  {
    v2 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 176))
    {
      return 0;
    }
    else
    {
      if (*(uint64_t *)(DerivedStorage + 8) < 1)
      {
LABEL_9:
        EarliestSequentialImageTime = 0;
      }
      else
      {
        v3 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 16), v3);
          EarliestSequentialImageTime = FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, 0, 0);
          if (EarliestSequentialImageTime)
            break;
          if (++v3 >= *(_QWORD *)(v2 + 8))
            goto LABEL_9;
        }
      }
      return EarliestSequentialImageTime != 0;
    }
  }
}

uint64_t sbp_vc_isAtEndOfData()
{
  uint64_t DerivedStorage;
  uint64_t v2;
  CFIndex v3;
  const void *ValueAtIndex;
  char v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    FigSignalErrorAt();
    return 1;
  }
  v2 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 176))
  {
    if (*(uint64_t *)(DerivedStorage + 8) < 1)
      return 1;
    v3 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 16), v3);
      v5 = 0;
      FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, 0, (uint64_t)&v5);
      if (!v5)
        break;
      if (++v3 >= *(_QWORD *)(v2 + 8))
        return 1;
    }
  }
  return 0;
}

CMSampleBufferRef sbp_vc_getAndRetainNextSampleBufferIfReady(uint64_t a1)
{
  uint64_t DerivedStorage;
  CMSampleBufferRef result;
  CMSampleBufferRef v4;
  CMSampleBufferRef v5;
  __int128 v6;
  __int128 v7;
  const __CFAllocator *v8;
  const void *v9;
  CMTime v10;
  CMSampleTimingInfo range;
  CMTime time1;
  CMTime time2;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMSampleBufferRef sampleBufferOut;
  char v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  sampleBufferOut = 0;
  if (*(_QWORD *)(DerivedStorage + 176)
    || (result = sbp_vc_getAndRetainNextSampleBufferFromVisualContextGroupIfReady(a1, 0),
        (*(_QWORD *)(DerivedStorage + 176) = result) != 0))
  {
    v4 = sbp_vc_getAndRetainNextSampleBufferFromVisualContextGroupIfReady(a1, &v18);
    if (v4)
    {
      v5 = v4;
      result = *(CMSampleBufferRef *)(DerivedStorage + 176);
      *(_QWORD *)(DerivedStorage + 176) = v5;
      return result;
    }
    if (v18)
    {
      memset(&v16, 0, sizeof(v16));
      CMSampleBufferGetPresentationTimeStamp(&v16, *(CMSampleBufferRef *)(DerivedStorage + 176));
      memset(&v15, 0, sizeof(v15));
      v6 = *(_OWORD *)(DerivedStorage + 144);
      *(_OWORD *)&range.duration.value = *(_OWORD *)(DerivedStorage + 128);
      *(_OWORD *)&range.duration.epoch = v6;
      *(_OWORD *)&range.presentationTimeStamp.timescale = *(_OWORD *)(DerivedStorage + 160);
      CMTimeRangeGetEnd(&v15, (CMTimeRange *)&range);
      memset(&v14, 0, sizeof(v14));
      CMSampleBufferGetDuration(&v14, *(CMSampleBufferRef *)(DerivedStorage + 176));
      if ((v15.flags & 0x1D) != 1
        || (range.duration = v16, time2 = v15, CMTimeCompare(&range.duration, &time2) > 0)
        || (v14.flags & 1) != 0
        && (range.duration = v16,
            time2 = v14,
            CMTimeAdd(&time1, &range.duration, &time2),
            range.duration = v15,
            CMTimeCompare(&time1, &range.duration) > 0))
      {
        sampleBufferOut = *(CMSampleBufferRef *)(DerivedStorage + 176);
      }
      else
      {
        range.presentationTimeStamp = v16;
        v7 = *MEMORY[0x1E0CA2E18];
        range.decodeTimeStamp.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        time2 = v15;
        memset(&range, 0, 24);
        *(_OWORD *)&range.decodeTimeStamp.value = v7;
        v10 = v16;
        CMTimeSubtract(&range.duration, &time2, &v10);
        v8 = CFGetAllocator(*(CFTypeRef *)(DerivedStorage + 176));
        if (CMSampleBufferCreateCopyWithNewTiming(v8, *(CMSampleBufferRef *)(DerivedStorage + 176), 1, &range, &sampleBufferOut))
        {
          return sampleBufferOut;
        }
        v9 = *(const void **)(DerivedStorage + 176);
        if (!v9)
          return sampleBufferOut;
        CFRelease(v9);
      }
      *(_QWORD *)(DerivedStorage + 176) = 0;
      return sampleBufferOut;
    }
    return 0;
  }
  return result;
}

uint64_t sbp_vc_getUpcomingPTSInfo(uint64_t a1, _BYTE *a2)
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  *a2 = 0;
  return 0;
}

CMSampleBufferRef sbp_vc_getAndRetainNextSampleBufferFromVisualContextGroupIfReady(uint64_t a1, _BYTE *a2)
{
  _BYTE *DerivedStorage;
  CMTimeEpoch v4;
  _BYTE *v6;
  void *Mutable;
  CFMutableArrayRef v8;
  CMTime *v9;
  CMTime *v10;
  const __CFAllocator *v11;
  const CFArrayCallBacks *v12;
  CFIndex v13;
  const void *ValueAtIndex;
  const void *v15;
  CFIndex v16;
  char v17;
  const void *v18;
  unsigned int (*v19)(const void *, const __CFAllocator *, CMTimeRange *, uint64_t, void **, const void **, _QWORD);
  const void *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  void *v31;
  __CVBuffer *v32;
  const opaqueCMFormatDescription *v33;
  CFTypeRef *v34;
  uint64_t v35;
  const __CFDictionary *v36;
  const __CFString *v37;
  CMSampleBufferRef v38;
  const void *value;
  const __CFString *v40;
  const __CFDictionary *v41;
  CFTypeRef *v42;
  const __CFString **v43;
  int v44;
  __CFArray *v45;
  uint64_t v46;
  uint64_t v47;
  CMTagValue v48;
  CMTagValue v49;
  const __CFDictionary *v50;
  const __CFString *v51;
  CFTypeRef v52;
  CMTime *v53;
  _OWORD *v54;
  CMTime *v55;
  __int128 v56;
  CMTimeRange time1;
  CMTime rhs;
  CMTime time2;
  CFTypeRef cf;
  CMMutableTagCollectionRef tagCollection;
  CMSampleBufferRef sampleBufferOut;
  CMSampleTimingInfo sampleTiming;
  const void *v64;
  void *v65;
  char v66;
  CMTime v67;
  CMTime v68;
  CMTag v69;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v68.value = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v68.epoch = v4;
  *(_OWORD *)&v67.value = *(_OWORD *)&v68.value;
  v67.epoch = v4;
  v66 = 0;
  v64 = 0;
  v65 = 0;
  memset(&sampleTiming, 0, sizeof(sampleTiming));
  tagCollection = 0;
  sampleBufferOut = 0;
  cf = 0;
  if (*DerivedStorage)
  {
    FigSignalErrorAt();
    return 0;
  }
  v6 = DerivedStorage;
  v56 = *(_OWORD *)&v68.value;
  Mutable = 0;
  v8 = 0;
  v9 = (CMTime *)(DerivedStorage + 64);
  v10 = (CMTime *)(DerivedStorage + 40);
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v54 = DerivedStorage + 128;
  v55 = (CMTime *)(DerivedStorage + 96);
LABEL_4:
  v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  while (1)
  {
    do
    {
      if (Mutable)
        CFRelease(Mutable);
      if (v8)
        CFRelease(v8);
      if (*((uint64_t *)v6 + 1) >= 1)
      {
        v13 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v6 + 2), v13);
          if (FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, (uint64_t)&v68, (uint64_t)&v66))break;
          if (v13)
          {
            time1.start = v68;
            time2 = v67;
            if (CMTimeCompare(&time1.start, &time2))
              break;
          }
          else
          {
            v67 = v68;
          }
          if (++v13 >= *((_QWORD *)v6 + 1))
            goto LABEL_17;
        }
        Mutable = 0;
        goto LABEL_84;
      }
LABEL_17:
      if (v6[32])
      {
        if ((*((_DWORD *)v6 + 19) & 0x1D) != 1)
          *v9 = v68;
        time1.start = v68;
        time2 = *v9;
        if (CMTimeCompare(&time1.start, &time2) >= 1)
        {
          v15 = (const void *)*((_QWORD *)v6 + 11);
          if (v15)
            Mutable = (void *)CFRetain(v15);
          else
            Mutable = 0;
          v8 = 0;
          break;
        }
      }
      Mutable = CFArrayCreateMutable(v11, *((_QWORD *)v6 + 1), v12);
      if (!Mutable)
      {
        FigSignalErrorAt();
LABEL_84:
        v8 = 0;
        goto LABEL_110;
      }
      v8 = CFArrayCreateMutable(v11, *((_QWORD *)v6 + 1), v12);
      if (!v8)
        goto LABEL_104;
      v53 = v10;
      if (*((uint64_t *)v6 + 1) >= 1)
      {
        v16 = 0;
        v17 = 1;
        while (1)
        {
          v18 = CFArrayGetValueAtIndex(*((CFArrayRef *)v6 + 2), v16);
          time2 = v68;
          v19 = *(unsigned int (**)(const void *, const __CFAllocator *, CMTimeRange *, uint64_t, void **, const void **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
          if (!v19)
            break;
          time1.start = time2;
          if (v19(v18, v11, &time1, 3, &v65, &v64, 0))
            break;
          if (v65)
          {
            CFArrayAppendValue((CFMutableArrayRef)Mutable, v65);
            if (v65)
            {
              CFRelease(v65);
              v65 = 0;
            }
          }
          if (v64)
          {
            CFArrayAppendValue(v8, v64);
            if (v64)
            {
              CFRelease(v64);
              v64 = 0;
            }
          }
          LOBYTE(time1.start.value) = 0;
          FigVisualContextGetEarliestSequentialImageTime((uint64_t)v18, 0, 0, (uint64_t)&time1);
          if (!LOBYTE(time1.start.value))
            v17 = 0;
          if (++v16 >= *((_QWORD *)v6 + 1))
            goto LABEL_40;
        }
LABEL_110:
        v45 = 0;
        goto LABEL_111;
      }
      v17 = 1;
LABEL_40:
      if (!v6[32])
      {
        v10 = v53;
        break;
      }
      v20 = (const void *)*((_QWORD *)v6 + 11);
      *((_QWORD *)v6 + 11) = Mutable;
      CFRetain(Mutable);
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      if (v20)
        CFRelease(v20);
      *v55 = v68;
      v6[120] = 0;
      v21 = v17 == 0;
      v10 = v53;
    }
    while (v21);
    v22 = FigCFArrayGetValueAtIndex();
    if (!v22)
      goto LABEL_104;
    v23 = v22;
    if (v6[32])
    {
      v6[120] = 1;
      v68 = *v9;
      LOBYTE(time1.start.value) = 0;
      FigVisualContextGetEarliestSequentialImageTime(v22, 0, 0, (uint64_t)&time1);
      if (LOBYTE(time1.start.value))
      {
        *(_OWORD *)&v9->value = v56;
        v9->epoch = v4;
      }
      else
      {
        time2 = *v9;
        rhs = *v10;
        CMTimeAdd(&time1.start, &time2, &rhs);
        *(_OWORD *)&v9->value = *(_OWORD *)&time1.start.value;
        v9->epoch = time1.start.epoch;
      }
    }
    if ((v6[140] & 1) == 0)
      break;
    if ((v6[164] & 1) == 0)
      break;
    if (*((_QWORD *)v6 + 21))
      break;
    if ((*((_QWORD *)v6 + 19) & 0x8000000000000000) != 0)
      break;
    v24 = v54[1];
    *(_OWORD *)&time1.start.value = *v54;
    *(_OWORD *)&time1.start.epoch = v24;
    *(_OWORD *)&time1.duration.timescale = v54[2];
    time2 = v68;
    if (CMTimeRangeContainsTime(&time1, &time2))
      break;
    LOBYTE(time1.start.value) = 0;
    FigVisualContextGetEarliestSequentialImageTime(v23, 0, 0, (uint64_t)&time1);
    v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    if (LOBYTE(time1.start.value))
    {
      *(_OWORD *)&v9->value = v56;
      v9->epoch = v4;
    }
  }
  if (*((uint64_t *)v6 + 25) >= 1)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = (__int128 *)(*((_QWORD *)v6 + 23) + v25);
      v28 = *v27;
      time1.start.epoch = *((_QWORD *)v27 + 2);
      *(_OWORD *)&time1.start.value = v28;
      time2 = v68;
      if (CMTimeCompare(&time1.start, &time2) <= 0)
      {
        v29 = (__int128 *)(*((_QWORD *)v6 + 24) + v25);
        time1.start = v68;
        v30 = *v29;
        time2.epoch = *((_QWORD *)v29 + 2);
        *(_OWORD *)&time2.value = v30;
        if (CMTimeCompare(&time1.start, &time2) < 0)
          goto LABEL_4;
      }
      ++v26;
      v25 += 24;
    }
    while (v26 < *((_QWORD *)v6 + 25));
  }
  if (Mutable)
  {
    v31 = (void *)FigCFArrayGetValueAtIndex();
    v65 = v31;
    if (v31)
    {
      v32 = (__CVBuffer *)v31;
      v34 = (CFTypeRef *)(v6 + 24);
      v33 = (const opaqueCMFormatDescription *)*((_QWORD *)v6 + 3);
      if (v33)
      {
        if (!CMVideoFormatDescriptionMatchesImageBuffer(v33, v32))
        {
          if (*v34)
          {
            CFRelease(*v34);
            *v34 = 0;
          }
          goto LABEL_72;
        }
      }
      else
      {
LABEL_72:
        if (CMVideoFormatDescriptionCreateForImageBuffer(v11, (CVImageBufferRef)v65, (CMVideoFormatDescriptionRef *)v6 + 3))
        {
          goto LABEL_110;
        }
      }
    }
  }
  sampleTiming.presentationTimeStamp = v68;
  sampleTiming.decodeTimeStamp.epoch = v4;
  *(_OWORD *)&sampleTiming.decodeTimeStamp.value = v56;
  *(_OWORD *)&sampleTiming.duration.value = v56;
  sampleTiming.duration.epoch = v4;
  if (v6[32])
  {
    *(_OWORD *)&sampleTiming.duration.value = *(_OWORD *)&v10->value;
    sampleTiming.duration.epoch = v10->epoch;
  }
  if (!v65)
  {
    v41 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
    v42 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v43 = (const __CFString **)MEMORY[0x1E0CA26C0];
    if (v41 && CFDictionaryGetValue(v41, (const void *)*MEMORY[0x1E0CA26C0]) == *v42)
    {
      *(_OWORD *)&sampleTiming.duration.value = v56;
      sampleTiming.duration.epoch = v4;
      v44 = 1;
    }
    else
    {
      v44 = 0;
    }
    if (CMSampleBufferCreate(v11, 0, 1u, 0, 0, 0, 0, 1, &sampleTiming, 0, 0, &sampleBufferOut))
      goto LABEL_110;
    v52 = *v42;
    CMSetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x1E0CA2678], *v42, 1u);
    if (!v44)
      goto LABEL_110;
    v38 = sampleBufferOut;
    v40 = *v43;
    value = v52;
LABEL_109:
    CMSetAttachment(v38, v40, value, 1u);
    goto LABEL_110;
  }
  v35 = *((_QWORD *)v6 + 1);
  if (v35 == 1)
  {
    if (CMSampleBufferCreateForImageBuffer(v11, (CVImageBufferRef)v65, 1u, 0, 0, *((CMVideoFormatDescriptionRef *)v6 + 3), &sampleTiming, &sampleBufferOut))
    {
      goto LABEL_110;
    }
    if (!v8)
      goto LABEL_110;
    if (!CFArrayGetCount(v8))
      goto LABEL_110;
    v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, 0);
    if (!v36)
      goto LABEL_110;
    time1.start.value = 0;
    v37 = (const __CFString *)*MEMORY[0x1E0CA26A8];
    if (!CFDictionaryGetValueIfPresent(v36, (const void *)*MEMORY[0x1E0CA26A8], (const void **)&time1))
      goto LABEL_110;
    v38 = sampleBufferOut;
    value = (const void *)time1.start.value;
    v40 = v37;
    goto LABEL_109;
  }
  if (v35 < 2)
  {
LABEL_104:
    FigSignalErrorAt();
    goto LABEL_110;
  }
  v45 = CFArrayCreateMutable(v11, *((_QWORD *)v6 + 1), MEMORY[0x1E0C9B378]);
  if (v45)
  {
    if (*((uint64_t *)v6 + 1) >= 1)
    {
      v46 = 0;
      while (!FigTagCollectionCreateMutable())
      {
        v47 = FigTagMakeWithSInt64Value();
        v49 = v48;
        *(_QWORD *)&v69.category = v47;
        v69.value = v49;
        CMTagCollectionAddTag(tagCollection, v69);
        CFArrayAppendValue(v45, tagCollection);
        if (tagCollection)
        {
          CFRelease(tagCollection);
          tagCollection = 0;
        }
        if (++v46 >= *((_QWORD *)v6 + 1))
          goto LABEL_96;
      }
      goto LABEL_111;
    }
LABEL_96:
    if (!MEMORY[0x19402F0D8](v11, v45, Mutable, &cf)
      && (time1.start = sampleTiming.presentationTimeStamp,
          time2 = sampleTiming.duration,
          !FigSampleBufferCreateForTaggedBufferGroup())
      && v8
      && CFArrayGetCount(v8)
      && (v50 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, 0)) != 0
      && (time1.start.value = 0,
          v51 = (const __CFString *)*MEMORY[0x1E0CA26A8],
          CFDictionaryGetValueIfPresent(v50, (const void *)*MEMORY[0x1E0CA26A8], (const void **)&time1)))
    {
      CMSetAttachment(sampleBufferOut, v51, (CFTypeRef)time1.start.value, 1u);
      if (!a2)
        goto LABEL_113;
    }
    else
    {
LABEL_111:
      if (!a2)
        goto LABEL_113;
    }
LABEL_112:
    *a2 = v66;
    goto LABEL_113;
  }
  FigSignalErrorAt();
  if (a2)
    goto LABEL_112;
LABEL_113:
  if (Mutable)
    CFRelease(Mutable);
  if (v64)
    CFRelease(v64);
  if (v8)
    CFRelease(v8);
  if (cf)
    CFRelease(cf);
  if (tagCollection)
    CFRelease(tagCollection);
  if (v45)
    CFRelease(v45);
  return sampleBufferOut;
}

uint64_t getpreset_AAC_44kHz_Mono_64kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AAC_44kHz_Mono_64kbit_audioOptions;
  if (!getpreset_AAC_44kHz_Mono_64kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(64000);
    getpreset_AAC_44kHz_Mono_64kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_44kHz_Mono_64kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_22kHz_Mono_32kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AAC_22kHz_Mono_32kbit_audioOptions;
  if (!getpreset_AAC_22kHz_Mono_32kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(32000);
    getpreset_AAC_22kHz_Mono_32kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_22kHz_Mono_32kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AACHE_32kHz_Stereo_36kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AACHE_32kHz_Stereo_36kbit_audioOptions;
  if (!getpreset_AACHE_32kHz_Stereo_36kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(36000);
    getpreset_AACHE_32kHz_Stereo_36kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AACHE_32kHz_Stereo_36kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AACHE_44kHz_Stereo_48kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AACHE_44kHz_Stereo_48kbit_audioOptions;
  if (!getpreset_AACHE_44kHz_Stereo_48kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(48000);
    getpreset_AACHE_44kHz_Stereo_48kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AACHE_44kHz_Stereo_48kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_44kHz_Stereo_128kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AAC_44kHz_Stereo_128kbit_audioOptions;
  if (!getpreset_AAC_44kHz_Stereo_128kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(128000);
    getpreset_AAC_44kHz_Stereo_128kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_44kHz_Stereo_128kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_44kHz_Stereo_256kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AAC_44kHz_Stereo_256kbit_audioOptions;
  if (!getpreset_AAC_44kHz_Stereo_256kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(256000);
    getpreset_AAC_44kHz_Stereo_256kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_44kHz_Stereo_256kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_48kHz_Stereo_128kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AAC_48kHz_Stereo_128kbit_audioOptions;
  if (!getpreset_AAC_48kHz_Stereo_128kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(128000);
    getpreset_AAC_48kHz_Stereo_128kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_48kHz_Stereo_128kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_48kHz_Stereo_160kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AAC_48kHz_Stereo_160kbit_audioOptions;
  if (!getpreset_AAC_48kHz_Stereo_160kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(160000);
    getpreset_AAC_48kHz_Stereo_160kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_48kHz_Stereo_160kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_48kHz_Stereo_256kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AAC_48kHz_Stereo_256kbit_audioOptions;
  if (!getpreset_AAC_48kHz_Stereo_256kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(256000);
    getpreset_AAC_48kHz_Stereo_256kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_48kHz_Stereo_256kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_48kHz_256kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AAC_48kHz_256kbit_audioOptions;
  if (!getpreset_AAC_48kHz_256kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(256000);
    getpreset_AAC_48kHz_256kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_48kHz_256kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AMR_8kHz_Mono_12kbit_CBR(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AMR_8kHz_Mono_12kbit_CBR_audioOptions;
  if (!getpreset_AMR_8kHz_Mono_12kbit_CBR_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(12200);
    getpreset_AMR_8kHz_Mono_12kbit_CBR_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AMR_8kHz_Mono_12kbit_CBR_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_iLBC_8kHz_Mono_15kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_iLBC_8kHz_Mono_15kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_LPCM_16bit_LE_44kHz_Mono(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_LPCM_16bit_LE_44kHz_Mono_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_LPCM_16bit_LE_44kHz_Stereo(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_LPCM_16bit_LE_44kHz_Stereo_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_ALAC_44kHz_Mono_16bitSource(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_ALAC_44kHz_Mono_16bitSource_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_ALAC_44kHz_Stereo_16bitSource(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_ALAC_44kHz_Stereo_16bitSource_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_ALAC_16bit(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_ALAC_16bit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_ALAC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_ALAC_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_iLBC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_iLBC_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_AMR(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_AMR_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_LPCM(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_LPCM_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_Passthru(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_Passthru_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_AAC_22kHz_Mono_24kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AAC_22kHz_Mono_24kbit_audioOptions;
  if (!getpreset_AAC_22kHz_Mono_24kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(24000);
    getpreset_AAC_22kHz_Mono_24kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_22kHz_Mono_24kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AACHE_44kHz_Mono_24kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AACHE_44kHz_Mono_24kbit_audioOptions;
  if (!getpreset_AACHE_44kHz_Mono_24kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(24000);
    getpreset_AACHE_44kHz_Mono_24kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AACHE_44kHz_Mono_24kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AACHE_44kHz_Mono_32kbit(_QWORD *a1, _QWORD *a2, _QWORD *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary;

  StringIntDictionary = (CFDictionaryRef)getpreset_AACHE_44kHz_Mono_32kbit_audioOptions;
  if (!getpreset_AACHE_44kHz_Mono_32kbit_audioOptions)
  {
    StringIntDictionary = createStringIntDictionary(32000);
    getpreset_AACHE_44kHz_Mono_32kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AACHE_44kHz_Mono_32kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_NoAudio(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_NoAudio_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

CFDictionaryRef createStringIntDictionary(int a1)
{
  const __CFAllocator *v1;
  CFDictionaryRef v2;
  void *values;
  int valuePtr;
  void *keys;

  keys = CFSTR("FigAudioCompressionOption_AudioConverterEncodeBitRate");
  valuePtr = a1;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v2 = CFDictionaryCreate(v1, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(values);
  return v2;
}

uint64_t FigPictureCollectionCreateFromByteStreamWithOptions(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t IFFPictureCollection;
  CFTypeRef cf;

  cf = 0;
  if (a2 && a4)
  {
    if (a3)
      FigCFDictionaryGetBooleanIfPresent();
    v7 = IFFParseByteStreamAndCreateItemInformation(0, a2, &cf);
    v8 = cf;
    if ((_DWORD)v7)
    {
      IFFPictureCollection = v7;
      if (!cf)
        return IFFPictureCollection;
    }
    else
    {
      IFFPictureCollection = CreateIFFPictureCollection(a1, cf, a4);
      v8 = cf;
      if (!cf)
        return IFFPictureCollection;
    }
    CFRelease(v8);
    return IFFPictureCollection;
  }
  return FigSignalErrorAt();
}

uint64_t CreateIFFPictureCollection(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  CFTypeRef v7;

  FigPictureCollectionGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a2)
      v7 = CFRetain(a2);
    else
      v7 = 0;
    *DerivedStorage = v7;
    *a3 = 0;
  }
  return v5;
}

uint64_t FigPictureCollectionCreateFromByteStream(uint64_t a1, const void *a2, _QWORD *a3)
{
  return FigPictureCollectionCreateFromByteStreamWithOptions(a1, a2, 0, a3);
}

uint64_t FigPictureCollectionCreateBrandsFromByteStream()
{
  uint64_t result;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = 0u;
  v7 = 0u;
  v4 = 0u;
  v5 = 0u;
  v2 = 0u;
  v3 = 0u;
  v1 = 0u;
  result = FigAtomStreamInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (!(_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPictureCollectionCreateFromIFFItemInformation(uint64_t a1, const void *a2, _QWORD *a3)
{
  if (a2 && a3)
    return CreateIFFPictureCollection(a1, a2, a3);
  else
    return FigSignalErrorAt();
}

void IFFPictureCollectionFinalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *IFFPictureCollectionCopyDebugDescription(const void *a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;
  CFIndex v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<IFFPictureCollection %p retainCount %ld iiP %p>"), a1, v4, *DerivedStorage);
  return Mutable;
}

uint64_t IFFPictureCollectionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v6;
  uint64_t IsMIAF;
  uint64_t v8;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (a4)
  {
    v6 = (uint64_t *)DerivedStorage;
    if (FigCFEqual())
    {
      IsMIAF = IFFInformationCopyTracksDetected(*v6, &cf);
      if (!(_DWORD)IsMIAF)
      {
LABEL_4:
        if (cf)
          v8 = 0;
        else
          v8 = 4294954513;
        *a4 = cf;
        return v8;
      }
    }
    else if (FigCFEqual())
    {
      IsMIAF = IFFInformationCopyMajorBrand(*v6, &cf);
      if (!(_DWORD)IsMIAF)
        goto LABEL_4;
    }
    else if (FigCFEqual())
    {
      IsMIAF = IFFInformationCopyMajorBrandsMinorVersion(*v6, &cf);
      if (!(_DWORD)IsMIAF)
        goto LABEL_4;
    }
    else if (FigCFEqual())
    {
      IsMIAF = IFFInformationCopyCompatibleBrands(*v6, (CFArrayRef *)&cf);
      if (!(_DWORD)IsMIAF)
        goto LABEL_4;
    }
    else if (FigCFEqual())
    {
      IsMIAF = IFFInformationCopyPrimaryItemIndex(*v6, (CFNumberRef *)&cf);
      if (!(_DWORD)IsMIAF)
        goto LABEL_4;
    }
    else if (FigCFEqual())
    {
      IsMIAF = IFFInformationCopySourceIsMIAF(*v6, &cf);
      if (!(_DWORD)IsMIAF)
        goto LABEL_4;
    }
    else if (FigCFEqual())
    {
      IsMIAF = CreateGroupsListDescriptor(*v6, (__CFArray **)&cf);
      if (!(_DWORD)IsMIAF)
        goto LABEL_4;
    }
    else
    {
      if (!FigCFEqual())
      {
        v8 = 4294954512;
LABEL_32:
        if (cf)
          CFRelease(cf);
        return v8;
      }
      IsMIAF = IFFInformationCopySourceSpecifiesOrientation(*v6, &cf);
      if (!(_DWORD)IsMIAF)
        goto LABEL_4;
    }
    v8 = IsMIAF;
    goto LABEL_32;
  }
  return FigSignalErrorAt();
}

uint64_t CreateGroupsListDescriptor(uint64_t a1, __CFArray **a2)
{
  uint64_t GroupsList;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  __CFArray *Mutable;
  const __CFAllocator *v9;
  const CFArrayCallBacks *v10;
  const void *ValueAtIndex;
  uint64_t GroupDescription;
  CFTypeRef v13;
  CFArrayRef theArray;
  CFTypeRef cf;

  theArray = 0;
  cf = 0;
  GroupsList = IFFInformationGetGroupsList(a1, &theArray);
  if ((_DWORD)GroupsList)
    return GroupsList;
  if (theArray && (Count = CFArrayGetCount(theArray), Count >= 1))
  {
    v6 = Count;
    v7 = 0;
    Mutable = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
      GroupDescription = _createGroupDescription(a1, (uint64_t)ValueAtIndex, (__CFDictionary **)&cf);
      v13 = cf;
      if (cf)
      {
        if (!Mutable)
        {
          Mutable = CFArrayCreateMutable(v9, v6, v10);
          if (!Mutable)
          {
            GroupDescription = 4294954450;
            goto LABEL_17;
          }
        }
        CFArrayAppendValue(Mutable, v13);
      }
      ++v7;
    }
    while (v6 != v7);
    if (a2)
    {
      *a2 = Mutable;
    }
    else if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
  else
  {
    GroupDescription = 4294954513;
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  return GroupDescription;
}

uint64_t _createGroupDescription(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  int v6;
  __CFString **v7;
  uint64_t v8;
  __CFString *v9;
  const __CFArray *v10;
  uint64_t Count;
  uint64_t v12;
  const __CFAllocator *v13;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t GroupByID;
  void *v18;
  __CFDictionary *v20;
  __CFDictionary *v21;
  uint64_t v22;
  uint64_t MutableCopy;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const __CFArray *v27;
  uint64_t v28;
  __CFArray *v29;
  uint64_t v30;
  void *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  __CFDictionary *v40;
  __CFDictionary *v41;
  __CFArray *v42;
  CFIndex v43;
  uint64_t v44;
  void *value;
  uint64_t v46;

  if (*(_BYTE *)(a2 + 28))
  {
    v6 = *(_DWORD *)(a2 + 24);
    if (v6 == 1937007986)
    {
      v7 = kFigPictureCollection_GroupType_StereoPair;
    }
    else
    {
      if (v6 != 1634497650)
        return FigSignalErrorAt();
      v7 = kFigPictureCollection_GroupType_Alternate;
    }
    v9 = *v7;
    v10 = *(const __CFArray **)(a2 + 48);
    if (!v10)
    {
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      v12 = 0;
      goto LABEL_22;
    }
    Count = CFArrayGetCount(v10);
    if (Count < 0x80000000)
    {
      v12 = Count;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
      if (v12 >= 1)
      {
        for (i = 0; v12 != i; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 48), i);
          if (*((_BYTE *)ValueAtIndex + 17))
          {
            v46 = 0;
            GroupByID = IFFInformationGetGroupByID(a1, *((_DWORD *)ValueAtIndex + 10), &v46);
            if ((_DWORD)GroupByID)
              goto LABEL_67;
            value = 0;
            GroupByID = _createGroupDescription(a1, v46, &value);
            if ((_DWORD)GroupByID)
              goto LABEL_67;
            v18 = value;
            CFArrayAppendValue(Mutable, value);
            if (v18)
              CFRelease(v18);
          }
          else
          {
            LODWORD(v46) = 0;
            GroupByID = IFFInformationGetIndexOfPicture(a1, *((const void **)ValueAtIndex + 4), &v46);
            if ((_DWORD)GroupByID || (GroupByID = FigCFArrayAppendInt32(), (_DWORD)GroupByID))
            {
LABEL_67:
              v8 = GroupByID;
              goto LABEL_64;
            }
          }
        }
      }
LABEL_22:
      v20 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v20)
      {
        v8 = 4294954450;
        goto LABEL_64;
      }
      v21 = v20;
      CFDictionarySetValue(v20, CFSTR("GroupType"), v9);
      CFDictionarySetValue(v21, CFSTR("GroupPictureIndexList"), Mutable);
      v22 = FigCFDictionarySetInt32();
      if ((_DWORD)v22 || (v22 = FigCFDictionarySetInt32(), (_DWORD)v22))
      {
        v8 = v22;
      }
      else
      {
        if (*(_DWORD *)(a2 + 24) != 1937007986)
        {
          v24 = 0;
LABEL_57:
          if (FigCFDictionaryGetCount() >= 1)
            CFDictionarySetValue(v21, CFSTR("GroupPropertiesKey"), v24);
          v8 = 0;
          *a3 = v21;
          v21 = 0;
          goto LABEL_60;
        }
        MutableCopy = FigCFDictionaryCreateMutableCopy();
        if (MutableCopy)
        {
          v24 = (void *)MutableCopy;
          v25 = *(_QWORD *)(a2 + 40);
          if (*(_QWORD *)(v25 + 216))
          {
            v26 = FigCFDictionarySetInt32();
            if ((_DWORD)v26)
            {
              v8 = v26;
              goto LABEL_61;
            }
            v25 = *(_QWORD *)(a2 + 40);
          }
          v27 = *(const __CFArray **)(v25 + 224);
          if (v27)
          {
            v43 = CFArrayGetCount(v27);
            if (v43 >= 1)
            {
              v40 = (__CFDictionary *)v24;
              v41 = v21;
              v42 = Mutable;
              v28 = FigCFArrayCreateMutableCopy();
              if (!v28)
              {
                v8 = 4294954450;
                goto LABEL_61;
              }
              v29 = (__CFArray *)v28;
              v30 = 0;
              v31 = 0;
              while (1)
              {
                v44 = v30;
                v32 = (unsigned __int8 *)FigCFArrayGetValueAtIndex();
                if (*v32)
                  break;
LABEL_45:
                v30 = v44 + 1;
                if (v44 + 1 == v43)
                {
                  v8 = 0;
                  goto LABEL_50;
                }
              }
              v33 = v32;
              v34 = 0;
              v35 = 0;
              while (1)
              {
                if (v31)
                  CFRelease(v31);
                v31 = (void *)FigCFDictionaryCreateMutableCopy();
                if (!v31)
                  break;
                FigCFDictionarySetValue();
                v36 = *((_QWORD *)v33 + 1);
                if (*(_BYTE *)(v36 + v34 + 1))
                {
                  v37 = FigCFDictionarySetFloat();
                  if ((_DWORD)v37)
                  {
                    v8 = v37;
                    goto LABEL_49;
                  }
                  v36 = *((_QWORD *)v33 + 1);
                }
                v38 = *(const void **)(v36 + v34 + 8);
                if (v38)
                  CFDictionarySetValue((CFMutableDictionaryRef)v31, CFSTR("SubTypeURI"), v38);
                CFArrayAppendValue(v29, v31);
                ++v35;
                v34 += 16;
                if (v35 >= *v33)
                  goto LABEL_45;
              }
              v8 = 4294954450;
LABEL_49:
              CFRelease(v29);
              v29 = 0;
LABEL_50:
              v21 = v41;
              Mutable = v42;
              v24 = v40;
              if (v31)
                CFRelease(v31);
              if ((_DWORD)v8)
              {
LABEL_60:
                if (!v24)
                  goto LABEL_62;
                goto LABEL_61;
              }
              if (v29)
              {
                CFDictionarySetValue(v40, CFSTR("StereoAggressors"), v29);
                CFRelease(v29);
              }
            }
          }
          if (v12 < 3)
            goto LABEL_57;
          v39 = FigCFDictionarySetInt32();
          if (!(_DWORD)v39)
            goto LABEL_57;
          v8 = v39;
LABEL_61:
          CFRelease(v24);
LABEL_62:
          if (!v21)
            goto LABEL_64;
          goto LABEL_63;
        }
        v8 = 4294954450;
      }
LABEL_63:
      CFRelease(v21);
LABEL_64:
      if (Mutable)
        CFRelease(Mutable);
      return v8;
    }
    return FigSignalErrorAt();
  }
  return 0;
}

uint64_t IFFPictureCollectionGetPictureCount(uint64_t a1, int a2, CFIndex *a3)
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return IFFInformationGetPictureCount(*DerivedStorage, a2, a3);
}

uint64_t IFFPictureCollectionCopyPictureByIndex(uint64_t a1, CFIndex a2, CFTypeRef *a3, _DWORD *a4)
{
  uint64_t *DerivedStorage;
  BOOL v8;
  CFAllocatorRef v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;
  int v14;
  uint64_t v15;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v14 = 0;
  cf = 0;
  if (IFFInformationGetPictureByIndex(*DerivedStorage, a2, (unint64_t)&v15, (unint64_t)&v14))v8 = 1;
  else
    v8 = v15 == 0;
  if (v8)
  {
    v11 = 4294950136;
  }
  else
  {
    v9 = CFGetAllocator((CFTypeRef)*DerivedStorage);
    v10 = CreatePictureReader((uint64_t)v9, (const void *)*DerivedStorage, v15, &cf);
    if ((_DWORD)v10)
    {
      v11 = v10;
    }
    else
    {
      if (a3)
      {
        *a3 = cf;
        cf = 0;
      }
      v11 = 0;
      if (a4)
        *a4 = v14;
    }
  }
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t IFFPictureCollectionCopyPictureByID(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t *DerivedStorage;
  BOOL v6;
  CFAllocatorRef v7;
  uint64_t v8;
  CFTypeRef cf;
  uint64_t v11;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v11 = 0;
  if (IFFInformationGetPictureByID(*DerivedStorage, a2, &v11))
    v6 = 1;
  else
    v6 = v11 == 0;
  if (v6)
    return 4294950136;
  v7 = CFGetAllocator((CFTypeRef)*DerivedStorage);
  v8 = CreatePictureReader((uint64_t)v7, (const void *)*DerivedStorage, v11, &cf);
  if (!a3 || (_DWORD)v8)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a3 = cf;
  }
  return v8;
}

uint64_t CreatePictureReader(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  CFTypeRef v9;

  FigPictureReaderGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a2)
      v9 = CFRetain(a2);
    else
      v9 = 0;
    *DerivedStorage = v9;
    DerivedStorage[1] = a3;
  }
  *a4 = 0;
  return v7;
}

void PictureReaderFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = 0;
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *PictureReaderCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<IFFPictureReader %p> rc %ld"), a1, v4);
  return Mutable;
}

uint64_t PictureReaderCopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  int IsDisplayable;
  __CFArray **v9;
  uint64_t IsPrimary;
  __CFArray *v11;
  uint64_t v12;
  uint64_t v14;
  const void *v15;
  int v16;
  uint64_t v19;
  CFIndex v20;
  const void *ValueAtIndex;
  uint64_t v22;
  void *v23;
  __CFDictionary *v24;
  __CFDictionary *v25;
  __CFArray *Mutable;
  __CFArray **v27;
  __CFArray *UInt32;
  void *value;
  CFTypeRef v30;
  CFArrayRef theArray;
  CFTypeRef cf;

  UInt32 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    v7 = DerivedStorage;
    if (FigCFEqual())
    {
      IsDisplayable = IFFPictureIsDisplayable(*(_QWORD *)(v7 + 8));
      v9 = (__CFArray **)MEMORY[0x1E0C9AE50];
      if (!IsDisplayable)
        v9 = (__CFArray **)MEMORY[0x1E0C9AE40];
      goto LABEL_11;
    }
    if (FigCFEqual())
    {
      LOBYTE(cf) = 0;
      IsPrimary = IFFPictureIsPrimary(*(uint64_t **)(v7 + 8), (BOOL *)&cf);
      if (!(_DWORD)IsPrimary)
      {
        if ((_BYTE)cf)
          v9 = (__CFArray **)MEMORY[0x1E0C9AE50];
        else
          v9 = (__CFArray **)MEMORY[0x1E0C9AE40];
LABEL_11:
        v11 = *v9;
        UInt32 = v11;
        if (v11)
LABEL_12:
          CFRetain(v11);
LABEL_13:
        v12 = 0;
        *a4 = UInt32;
        return v12;
      }
      return IsPrimary;
    }
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyCodecType(*(_QWORD *)(v7 + 8), &UInt32);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyItemType(*(_QWORD *)(v7 + 8), &UInt32);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyPictureDimensionsDictionary(*(_QWORD *)(v7 + 8), &UInt32);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyCleanApertureDictionary(*(_QWORD *)(v7 + 8), &UInt32);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyRotationDegreesCCW(*(_QWORD *)(v7 + 8), &UInt32);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyPixelAspectRatioDictionary(*(_QWORD *)(v7 + 8), &UInt32);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyPixelInformationArray(*(_QWORD *)(v7 + 8), &UInt32);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyMirroringDirection(*(_QWORD *)(v7 + 8), &UInt32);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyFormatDescription(*(_QWORD *)(v7 + 8), &UInt32);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else if (FigCFEqual())
      {
        IsPrimary = IFFPictureCopyAuxiliaryType(*(_QWORD *)(v7 + 8), (CFStringRef *)&UInt32, 0);
        if (!(_DWORD)IsPrimary)
          goto LABEL_13;
      }
      else
      {
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            LOBYTE(cf) = 0;
            IsPrimary = IFFPictureTilesHaveSameBaseProperties(*(_QWORD *)(v7 + 8), (BOOL *)&cf);
            if ((_DWORD)IsPrimary)
              return IsPrimary;
          }
          else
          {
            if (!FigCFEqual())
            {
              if (FigCFEqual())
              {
                UInt32 = (__CFArray *)FigCFNumberCreateUInt32();
                goto LABEL_13;
              }
              if (FigCFEqual())
              {
                IsPrimary = IFFPictureCopyLayerSelector(*(_QWORD *)(v7 + 8), &UInt32);
                if (!(_DWORD)IsPrimary)
                  goto LABEL_13;
              }
              else if (FigCFEqual())
              {
                IsPrimary = IFFPictureCopyOperatingPointSelector(*(_QWORD *)(v7 + 8), &UInt32);
                if (!(_DWORD)IsPrimary)
                  goto LABEL_13;
              }
              else if (FigCFEqual())
              {
                IsPrimary = IFFPictureCopyLayerSizes(*(_QWORD *)(v7 + 8), &UInt32);
                if (!(_DWORD)IsPrimary)
                  goto LABEL_13;
              }
              else
              {
                if (!FigCFEqual())
                  return 4294954512;
                IsPrimary = IFFPictureCopyStereoMetadataProperties(*(_QWORD *)(v7 + 8), &UInt32);
                if (!(_DWORD)IsPrimary)
                  goto LABEL_13;
              }
              return IsPrimary;
            }
            LOBYTE(cf) = 0;
            IsPrimary = IFFPictureTilesHaveTransformativeProperties(*(_QWORD *)(v7 + 8), (char *)&cf);
            if ((_DWORD)IsPrimary)
              return IsPrimary;
          }
          if ((_BYTE)cf)
            v27 = (__CFArray **)MEMORY[0x1E0C9AE50];
          else
            v27 = (__CFArray **)MEMORY[0x1E0C9AE40];
          v11 = *v27;
          UInt32 = *v27;
          goto LABEL_12;
        }
        IsPrimary = IFFPictureCopyAuxiliaryType(*(_QWORD *)(v7 + 8), 0, &UInt32);
        if (!(_DWORD)IsPrimary)
        {
          if (!UInt32)
            return 4294954513;
          goto LABEL_13;
        }
      }
      return IsPrimary;
    }
    v15 = *(const void **)v7;
    v14 = *(_QWORD *)(v7 + 8);
    theArray = 0;
    cf = 0;
    v30 = 0;
    v16 = *(_DWORD *)(*(_QWORD *)(v14 + 8) + 44);
    if (v16 != 1768187246 && v16 != 1953325424 && v16 != 1768912492)
    {
      Mutable = 0;
      v12 = 4294954513;
      goto LABEL_39;
    }
    v19 = IFFPictureCopyDerivation(v14, (const __CFString **)&cf, (CFTypeRef *)&theArray, (__CFDictionary **)&v30);
    if ((_DWORD)v19)
    {
      v12 = v19;
      Mutable = 0;
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (!Mutable)
        goto LABEL_68;
      if (CFArrayGetCount(theArray) >= 1)
      {
        v20 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v20);
          value = 0;
          v22 = CreatePictureReader((uint64_t)a3, v15, (uint64_t)ValueAtIndex, &value);
          if ((_DWORD)v22)
            goto LABEL_69;
          v23 = value;
          CFArrayAppendValue(Mutable, value);
          if (v23)
            CFRelease(v23);
        }
        while (++v20 < CFArrayGetCount(theArray));
      }
      v24 = CFDictionaryCreateMutable(a3, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v24)
      {
LABEL_68:
        v22 = FigSignalErrorAt();
LABEL_69:
        v12 = v22;
        goto LABEL_39;
      }
      v25 = v24;
      CFDictionarySetValue(v24, CFSTR("DerivationType"), cf);
      CFDictionarySetValue(v25, CFSTR("DerivationParents"), Mutable);
      if (v30)
        CFDictionarySetValue(v25, CFSTR("DerivationDetail"), v30);
      v12 = 0;
      UInt32 = v25;
    }
LABEL_39:
    if (cf)
      CFRelease(cf);
    if (theArray)
      CFRelease(theArray);
    if (Mutable)
      CFRelease(Mutable);
    if (v30)
      CFRelease(v30);
    if ((_DWORD)v12)
      return v12;
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t PictureReaderCopyPictureTileCursorService(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  _QWORD *v7;
  CFTypeRef v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(*(CFTypeRef *)DerivedStorage);
  v5 = *(CFTypeRef *)DerivedStorage;
  v4 = *(_QWORD *)(DerivedStorage + 8);
  if (!IFFPictureTileAccessorSupportsPicture(v4))
    return 4294950135;
  FigPictureTileCursorServiceGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v9 = v6;
    FigSignalErrorAt();
  }
  else
  {
    v7 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (v5)
      v8 = CFRetain(v5);
    else
      v8 = 0;
    *v7 = v8;
    v7[1] = v4;
    v9 = 0;
    if (a2)
      *a2 = 0;
  }
  return v9;
}

uint64_t PictureReaderGetThumbnailCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage;
  const __CFArray *PictureThumbnailCount;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950134;
  PictureThumbnailCount = IFFPictureGetPictureThumbnailCount(*(_QWORD *)(DerivedStorage + 8));
  result = 0;
  *a2 = PictureThumbnailCount;
  return result;
}

uint64_t PictureReaderCopyThumbnailByIndex(uint64_t a1, CFIndex a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  const void **v6;
  uint64_t result;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294950134;
  v6 = (const void **)DerivedStorage;
  v8 = 0;
  result = IFFPictureGetPictureThumbnailByIndex(*(_QWORD *)(DerivedStorage + 8), a2, &v8);
  if (!(_DWORD)result)
    return CreatePictureReader(*MEMORY[0x1E0C9AE00], *v6, v8, a3);
  return result;
}

uint64_t PictureReaderGetAuxiliaryImageCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage;
  const __CFArray *PictureAuxiliaryImageCount;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950134;
  PictureAuxiliaryImageCount = IFFPictureGetPictureAuxiliaryImageCount(*(_QWORD *)(DerivedStorage + 8));
  result = 0;
  *a2 = PictureAuxiliaryImageCount;
  return result;
}

uint64_t PictureReaderCopyAuxiliaryImageByIndex(uint64_t a1, CFIndex a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  const void **v6;
  uint64_t result;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294950134;
  v6 = (const void **)DerivedStorage;
  v8 = 0;
  result = IFFPictureGetPictureAuxiliaryImageByIndex(*(_QWORD *)(DerivedStorage + 8), a2, &v8);
  if (!(_DWORD)result)
    return CreatePictureReader(*MEMORY[0x1E0C9AE00], *v6, v8, a3);
  return result;
}

uint64_t PictureReaderGetExifCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage;
  const __CFArray *PictureExifCount;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950134;
  PictureExifCount = IFFPictureGetPictureExifCount(*(_QWORD *)(DerivedStorage + 8));
  result = 0;
  *a2 = PictureExifCount;
  return result;
}

uint64_t PictureReaderCopyExifLocationByIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureCopyExifLocationByIndex(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t PictureReaderGetXMPCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage;
  const __CFArray *PictureXMPCount;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950134;
  PictureXMPCount = IFFPictureGetPictureXMPCount(*(_QWORD *)(DerivedStorage + 8));
  result = 0;
  *a2 = PictureXMPCount;
  return result;
}

uint64_t PictureReaderCopyXMPLocationByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureCopyXMPLocationByIndex(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, a6, a7, 0);
}

uint64_t PictureReaderGetDebugMetadataCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage;
  const __CFArray *PictureDebugMetadataCount;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950134;
  PictureDebugMetadataCount = IFFPictureGetPictureDebugMetadataCount(*(_QWORD *)(DerivedStorage + 8));
  result = 0;
  *a2 = PictureDebugMetadataCount;
  return result;
}

uint64_t PictureReaderCopyDebugMetadataLocationByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureCopyDebugMetadataLocationByIndex(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, a6, a7);
}

uint64_t PictureReaderCopySampleLocationByIndex(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureCopySampleLocation(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, a6);
}

uint64_t PictureReaderGetCustomMetadataCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage;
  const __CFArray *PictureCustomMetadataCount;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950134;
  PictureCustomMetadataCount = IFFPictureGetPictureCustomMetadataCount(*(_QWORD *)(DerivedStorage + 8));
  result = 0;
  *a2 = PictureCustomMetadataCount;
  return result;
}

uint64_t PictureReaderCopyCustomMetadataLocationByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, CFStringRef *a8, CFStringRef *a9)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureCopyCustomMetadataLocationByIndex(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PictureReaderCopyExifLocationAndEncodingByIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, CFStringRef *a9)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureCopyExifLocationByIndex(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PictureReaderCopyXMPLocationAndEncodingByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, CFStringRef *a8)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureCopyXMPLocationByIndex(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, a6, a7, a8);
}

void PictureTileCursorServiceFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = 0;
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *PictureTileCursorServiceCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<IFFPictureTileCursorService %p>"), a1);
  return Mutable;
}

uint64_t PictureTileCursorServiceCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t result;
  CFDictionaryRef v8;

  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (FigCFEqual())
  {
    result = IFFPictureCopyTileDimensionsDictionary(*(_QWORD *)(v6 + 8), &v8);
    if ((_DWORD)result)
      return result;
    goto LABEL_7;
  }
  if (!FigCFEqual())
    return 4294954512;
  result = IFFPictureCopyTileGridDimensionsDictionary(*(_QWORD *)(v6 + 8), &v8);
  if (!(_DWORD)result)
  {
LABEL_7:
    result = 0;
    *a4 = v8;
  }
  return result;
}

uint64_t PictureTileCursorServiceCreateCursorAtFirstTile(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFAllocatorRef v5;

  if (!a2)
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CFGetAllocator(a1);
  return CreatePictureTileCursor((uint64_t)v5, *(const void **)DerivedStorage, *(_QWORD *)(DerivedStorage + 8), a2);
}

uint64_t PictureTileCursorServiceCreateCursorAtPosition(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  CFAllocatorRef v9;
  uint64_t PictureTileCursor;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v13;

  if (a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = CFGetAllocator(a1);
    PictureTileCursor = CreatePictureTileCursor((uint64_t)v9, *(const void **)DerivedStorage, *(_QWORD *)(DerivedStorage + 8), a4);
    if ((_DWORD)PictureTileCursor)
      return PictureTileCursor;
    v11 = *a4;
    v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v12)
    {
      v13 = 4294954514;
LABEL_7:
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      return v13;
    }
    v13 = v12(v11, a2, a3);
    if ((_DWORD)v13)
      goto LABEL_7;
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t CreatePictureTileCursor(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  CFTypeRef v9;
  uint64_t v10;

  FigPictureTileCursorGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v10 = v7;
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a2)
      v9 = CFRetain(a2);
    else
      v9 = 0;
    *DerivedStorage = v9;
    v10 = IFFPictureTileAccessorCreate(a3, DerivedStorage + 1);
    if (!(_DWORD)v10)
      *a4 = 0;
  }
  return v10;
}

void PictureTileCursorFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  IFFPictureTileAccessorDispose(*(const void ***)(DerivedStorage + 8));
  *(_QWORD *)(DerivedStorage + 8) = 0;
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *PictureTileCursorCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<IFFPictureTileCursor %p>"), a1);
  return Mutable;
}

uint64_t PictureTileCursorCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t UInt32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UInt32 = 0;
  if (!a4)
    return FigSignalErrorAt();
  v7 = (uint64_t *)DerivedStorage;
  if (FigCFEqual())
  {
    result = IFFPictureTileAccessorCopyFormatDescription(v7[1], (CMVideoFormatDescriptionRef *)&UInt32);
    if ((_DWORD)result)
      return result;
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    result = IFFPictureTileAccessorCopyCleanApertureDictionary(v7[1], (CFDictionaryRef *)&UInt32);
    if ((_DWORD)result)
      return result;
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    result = IFFPictureTileAccessorCopySpatialRelationDictionary(v7[1], (CFDictionaryRef *)&UInt32);
    if ((_DWORD)result)
      return result;
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    LODWORD(v9) = 0;
    result = IFFPictureTileAccessorGetItemIdentifier(v7[1], &v9);
    if ((_DWORD)result)
      return result;
    UInt32 = FigCFNumberCreateUInt32();
    goto LABEL_18;
  }
  if (!FigCFEqual())
    return FigSignalErrorAt();
  v10 = 0;
  v9 = 0;
  result = IFFPictureTileAccessorGetItemIdentifier(v7[1], &v10);
  if (!(_DWORD)result)
  {
    result = IFFInformationGetPictureByID(*v7, v10, &v9);
    if (!(_DWORD)result)
    {
      result = CreatePictureReader(a3, (const void *)*v7, v9, &UInt32);
      if (!(_DWORD)result)
      {
LABEL_18:
        result = 0;
        *a4 = UInt32;
      }
    }
  }
  return result;
}

uint64_t PictureTileCursorResetToBeginning()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureTileAccessorResetCursor(*(_QWORD *)(DerivedStorage + 8));
}

uint64_t PictureTileCursorStepAndReportPosition(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v7 = 0;
  v8 = 0;
  result = IFFPictureTileAccessorStepCursor(*(_QWORD *)(DerivedStorage + 8), &v9);
  if (!(_DWORD)result)
  {
    result = IFFPictureTileAccessorGetTileLocation(*(_QWORD *)(DerivedStorage + 8), &v8, &v7);
    if (!(_DWORD)result)
    {
      if (a2)
        *a2 = v8;
      if (a3)
        *a3 = v7;
      if (v9)
        return 0;
      else
        return 4294950125;
    }
  }
  return result;
}

uint64_t PictureTileCursorMoveToPosition(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (IFFPictureTileAccessorSeekCursorToLocation(*(_QWORD **)(DerivedStorage + 8), a2, a3))
    return 4294950126;
  else
    return 0;
}

uint64_t PictureTileCursorGetPosition(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8 = 0;
  result = IFFPictureTileAccessorGetTileLocation(*(_QWORD *)(DerivedStorage + 8), &v8, &v7);
  if (!(_DWORD)result)
  {
    if (a2)
      *a2 = v8;
    if (a3)
      *a3 = v7;
  }
  return result;
}

uint64_t PictureTileCursorCopySampleLocation(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureTileAccessorCopySampleLocation(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, a6);
}

uint64_t FigContentKeyBossStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigContentKeyBossStartServer_block_invoke;
  block[3] = &unk_1E2F9B500;
  block[4] = &v3;
  if (FigContentKeyBossStartServer_sFigContentKeyBossServerSetupOnce != -1)
    dispatch_once(&FigContentKeyBossStartServer_sFigContentKeyBossServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t ckbserver_replyingMessageHandler()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t ckbserver_noReplyMessageHandler()
{
  return ckbserver_replyingMessageHandler();
}

void FigCFRelease_4(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigContentKeyBossServerGetIDByAssociatingWithClientConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
    return FigXPCServerAssociateObjectWithNeighborProcess();
  else
    return FigSignalErrorAt();
}

void ckbservercompanion_finalize(uint64_t a1)
{
  void *v2;
  NSObject *v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    os_release(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  FigXPCRelease();
  v3 = *(NSObject **)(a1 + 32);
  if (v3)
    dispatch_release(v3);
}

uint64_t ckbserver_copyBossAndCompanion(int a1, xpc_object_t xdict, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;

  if (!xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]))
    return FigSignalErrorAt();
  v6 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v6)
    return v6;
  if (a3)
    *a3 = 0;
  v7 = 0;
  if (a4)
    *a4 = 0;
  return v7;
}

uint64_t ckbserver_requestDidSucceedRequestStatusCallback(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t a5)
{
  if (a1
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_dictionary_set_int64(0, ".requestID", a4);
    if (!a5)
    {
LABEL_9:
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
      return FigXPCRelease();
    }
    if (!FigCPECryptorServerGetIDForCryptorByAssociatingWithClientConnection())
    {
      xpc_dictionary_set_uint64(0, ".cryptorID", 0);
      goto LABEL_9;
    }
  }
  return FigXPCRelease();
}

uint64_t ckbserver_requestDidFailRequestStatusCallback(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      if (*(_QWORD *)(a1 + 16))
      {
        if (!FigXPCCreateBasicMessage()
          && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
        {
          xpc_dictionary_set_int64(0, ".requestID", a4);
          if (!FigXPCMessageSetCFError())
            xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
        }
      }
    }
  }
  return FigXPCRelease();
}

uint64_t ckbserver_requestDidSucceedRequestHandlingCallback(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t a5)
{
  if (a1
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_dictionary_set_int64(0, ".requestID", a4);
    if (!a5)
    {
LABEL_9:
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
      return FigXPCRelease();
    }
    if (!FigCPECryptorServerGetIDForCryptorByAssociatingWithClientConnection())
    {
      xpc_dictionary_set_uint64(0, ".cryptorID", 0);
      goto LABEL_9;
    }
  }
  return FigXPCRelease();
}

uint64_t ckbserver_requestDidFailRequestHandlingCallback(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      if (*(_QWORD *)(a1 + 16))
      {
        if (!FigXPCCreateBasicMessage()
          && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
        {
          xpc_dictionary_set_int64(0, ".requestID", a4);
          if (!FigXPCMessageSetCFError())
            xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
        }
      }
    }
  }
  return FigXPCRelease();
}

uint64_t ckbserver_didProvideRequest(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int a5)
{
  if (a1
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_dictionary_set_int64(0, ".requestID", a4);
    xpc_dictionary_set_BOOL(0, ".supportsOfflineKey", a5 != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t ckbserver_didProvideRenewingRequest(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int a5)
{
  if (a1
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_dictionary_set_int64(0, ".requestID", a4);
    xpc_dictionary_set_BOOL(0, ".supportsOfflineKey", a5 != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t ckbserver_didUpdatePersistableKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    FigXPCMessageSetCFData();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t ckbserver_didExternalProtectionStatusChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t FigVisualContextServerRetainVisualContextForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigVisualContextServerStart()
{
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t HandleVisualContextMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  CFTypeID v4;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  v4 = CFGetTypeID(0);
  if (v4 != FigVisualContextGetTypeID())
    return FigSignalErrorAt();
  return 4294951138;
}

uint64_t HandleVisualContextNoReplyMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  CFTypeID v4;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  v4 = CFGetTypeID(0);
  if (v4 != FigVisualContextGetTypeID())
    return FigSignalErrorAt();
  return 4294951138;
}

void DisposeServedVisualContextState(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef);
  void *v4;

  if (a1)
  {
    v2 = *(CFTypeRef *)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v3)
        v3(v2);
      CFRelease(*(CFTypeRef *)a1);
    }
    FigXPCRelease();
    v4 = *(void **)(a1 + 24);
    if (v4)
      os_release(v4);
    free((void *)a1);
  }
}

uint64_t vcs_ImageAvailableImmediateCallback(uint64_t a1, __int128 *a2, unsigned int a3, uint64_t a4)
{
  __int128 v5;
  uint64_t v6;

  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  return vcs_SendCallback((uint64_t)&v5, a3, a4, 1229015405);
}

uint64_t vcs_SendCallback(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (a3)
  {
    if (!FigXPCCreateBasicMessage())
    {
      if (a4 == 1229017957 || a4 == 1229015405)
      {
        FigXPCMessageSetCMTime();
        xpc_dictionary_set_uint64(0, "Flags", a2);
      }
      xpc_connection_send_message(*(xpc_connection_t *)(a3 + 8), 0);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return FigXPCRelease();
}

uint64_t vcs_ImageAvailableSequentialCallback(uint64_t a1, __int128 *a2, unsigned int a3, uint64_t a4)
{
  __int128 v5;
  uint64_t v6;

  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  return vcs_SendCallback((uint64_t)&v5, a3, a4, 1229017957);
}

uint64_t vcs_NoMoreImagesCallback(uint64_t a1, uint64_t a2)
{
  return vcs_SendCallback(MEMORY[0x1E0CA2E18], 0, a2, 1313687917);
}

uint64_t vcs_BecameEmptyCallback(uint64_t a1, uint64_t a2)
{
  return vcs_SendCallback(MEMORY[0x1E0CA2E18], 0, a2, 1113943408);
}

uint64_t mediaprocessor_UpcomingPTSInfoChanged(uint64_t a1, uint64_t a2)
{
  return mediaprocessor_TriggerSchedulingIfOutputIsLow(a2);
}

uint64_t mediaprocessor_ResetOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t);

  v2 = *(_QWORD *)(a2 + 40);
  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 72);
  if (v4)
    return v4(v2);
  return result;
}

uint64_t mediaprocessor_SessionTerminated()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigMediaProcessorGetTypeID()
{
  MEMORY[0x19402F294](&sRegisterMediaProcessorTypeOnce, RegisterFigMediaProcessorType);
  return sFigMediaProcessorTypeID;
}

uint64_t FigMediaProcessorFlush(uint64_t a1)
{
  uint64_t v3;
  char v4;

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 80));
  do
  {
    v4 = 0;
    v3 = mediaprocessor_DequeueAndProcessSampleBuffer(a1, &v4);
  }
  while (!(_DWORD)v3 && !v4);
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 80));
  return v3;
}

uint64_t mediaprocessor_DequeueAndProcessSampleBuffer(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const void *);
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t);

  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v5 && (v6 = v5(v4)) != 0)
  {
    v7 = (const void *)v6;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v9)
      v10 = v9(v8, v7);
    else
      v10 = 4294954514;
    CFRelease(v7);
  }
  else
  {
    *a2 = 1;
    if (!*(_BYTE *)(a1 + 89))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v12)
      {
        if (v12(v11))
        {
          v13 = *(_QWORD *)(a1 + 24);
          v14 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (v14)
            v14(v13);
          *(_BYTE *)(a1 + 89) = 1;
        }
      }
    }
    if (*(_BYTE *)(a1 + 88) || !FigMediaProcessorIsAtEndOfOutputData(a1))
    {
      return 0;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      v10 = 0;
      *(_BYTE *)(a1 + 88) = 1;
    }
  }
  return v10;
}

uint64_t FigMediaProcessorReset(uint64_t a1, int a2)
{
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 80));
  if (a2)
  {
    FigMediaProcessorFlush(a1);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v6)
      v6(v5);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v8)
      goto LABEL_8;
  }
  v8(v7);
LABEL_8:
  *(_WORD *)(a1 + 88) = 0;
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 80));
  return 0;
}

uint64_t FigMediaProcessorCopyPerformanceDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFAllocator *v3;
  CFDictionaryRef v4;
  void *values;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *keys;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  v27 = 0;
  v16 = 0;
  keys = CFSTR("NumberOfSampleBuffersOutput");
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(a1 + 92));
  v4 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(values);
  *a2 = v4;
  return 0;
}

uint64_t FigMediaProcessorSetProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, __CFString *, uint64_t);
  __CFString **v9;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  if (!cf1)
    return 4294954501;
  if (CFEqual(cf1, CFSTR("ClientPID")))
  {
    FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(a1 + 64));
    v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v8)
    {
      v9 = kFigActivitySchedulerProperty_ClientPID;
      return v8(FigBaseObject, *v9, a3);
    }
    return 4294954514;
  }
  if (CFEqual(cf1, CFSTR("ThrottleForBackground")))
  {
    FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(a1 + 64));
    v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v8)
    {
      v9 = kFigActivitySchedulerProperty_ThrottleForBackground;
      return v8(FigBaseObject, *v9, a3);
    }
    return 4294954514;
  }
  if (CFEqual(cf1, CFSTR("ActivitySchedulerPriority")))
    return FigActivitySchedulerSetProperty(*(_QWORD *)(a1 + 64), (uint64_t)CFSTR("ThreadPriority"), a3);
  else
    return 4294954501;
}

CFStringRef mediaprocessor_CopyFormattingDesc(uint64_t a1)
{
  const char *v1;

  if (*(_BYTE *)(a1 + 16))
    v1 = " (invalidated)";
  else
    v1 = "";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigMediaProcessor %p%s]"), a1, v1);
}

__CFString *mediaprocessor_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  const char *v5;
  CFAllocatorRef v6;
  const char *v7;
  const char *v8;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount((CFTypeRef)a1);
  if (*(_BYTE *)(a1 + 16))
    v5 = " (invalidated)";
  else
    v5 = "";
  v6 = CFGetAllocator((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigMediaProcessor %p retainCount: %d%s allocator: %p, "), a1, v4, v5, v6);
  CFStringAppendFormat(Mutable, 0, CFSTR("sampleBufferProcessor %@, sampleBufferProvider %@, sampleBufferConsumer %@, activityScheduler %@"), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  CFStringAppendFormat(Mutable, 0, CFSTR(", numberOfSampleBuffersOutput %d"), *(unsigned int *)(a1 + 92));
  if (*(_BYTE *)(a1 + 88))
    v7 = " (didSendReachedEndOfOutputData)";
  else
    v7 = "";
  if (*(_BYTE *)(a1 + 89))
    v8 = " (didFinishPendingProcessingAtEndOfInput)";
  else
    v8 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("%s%s"), v7, v8);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t FigCaptionDataCreateForTTML(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;

  if (!a7)
    return FigSignalErrorAt();
  FigCaptionDataGetClassID();
  v13 = CMDerivedObjectCreate();
  if (!(_DWORD)v13)
  {
    if (a2)
      v14 = CFRetain(a2);
    else
      v14 = 0;
    MEMORY[0] = v14;
    if (a3)
      v15 = CFRetain(a3);
    else
      v15 = 0;
    MEMORY[8] = v15;
    MEMORY[0x18] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (a5)
      v16 = CFRetain(a5);
    else
      v16 = 0;
    MEMORY[0x38] = v16;
    if (a4)
      v17 = CFRetain(a4);
    else
      v17 = 0;
    MEMORY[0x28] = v17;
    MEMORY[0x40] = a6;
    v13 = 0;
    MEMORY[0x48] = FigSimpleMutexCreate();
    *a7 = 0;
  }
  return v13;
}

uint64_t fcd_ttml_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  if (a1)
    DerivedStorage = CMBaseObjectGetDerivedStorage();
  else
    DerivedStorage = 0;
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
    CFRelease(v8);
  return FigSimpleMutexDestroy();
}

__CFString *fcd_ttml_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  uint64_t (*v4)(const void *);
  const __CFString *v5;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    v5 = (const __CFString *)v4(a1);
  else
    v5 = &stru_1E2FD85F8;
  CFStringAppendFormat(Mutable, 0, CFSTR("\tCaptionData: %p text<%@>"), a1, v5);
  return Mutable;
}

uint64_t fcd_ttml_CopyProperty(const void *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t *DerivedStorage;
  uint64_t (*v9)(const void *);
  const __CFString *v10;
  uint64_t v11;
  uint64_t IsLoaded;
  uint64_t CMBaseObject;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v15;
  uint64_t NodeType;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t Mutable;
  CFAllocatorRef *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD, const __CFString *);
  const void *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, _QWORD, const void *);
  uint64_t v29;
  CFTypeRef v30;
  __int128 v31;
  __int128 v32;
  const void *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, _QWORD, const void *);
  const void *CellResolutionProperty;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, _QWORD, const void *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *ValueAtIndex;
  uint64_t v45;
  __CFArray *v46;
  CFTypeRef v47;
  CFTypeRef v48;
  uint64_t v49;
  CFIndex Count;
  CFStringRef v51;
  unint64_t v52;
  const void *v53;
  uint64_t v54;
  CFTypeRef v55;
  const __CFAllocator *alloc;
  uint64_t v57;
  CFTypeRef cf;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  CFTypeRef v69;
  CFTypeRef v70;
  CFTypeRef v71[3];

  if (a1)
    DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  else
    DerivedStorage = 0;
  cf = 0;
  if (a2)
  {
    if (!a4)
    {
      IsLoaded = FigSignalErrorAt();
      goto LABEL_62;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3370]))
    {
      v9 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v9)
      {
        v10 = (const __CFString *)v9(a1);
        if (!v10)
          goto LABEL_19;
      }
      else
      {
        v10 = &stru_1E2FD85F8;
      }
LABEL_18:
      v10 = (const __CFString *)CFRetain(v10);
LABEL_19:
      NodeType = 0;
      cf = v10;
      goto LABEL_20;
    }
    v11 = *MEMORY[0x1E0CA3368];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3368])
      || (v11 = *MEMORY[0x1E0CA3310], CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3310])))
    {
      IsLoaded = fcd_ttml_ensureStyledTextIsLoaded(a1);
      if (!(_DWORD)IsLoaded)
      {
        CMBaseObject = FigCaptionDataGetCMBaseObject();
        v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
        if (!v14)
        {
          NodeType = 4294954514;
          goto LABEL_23;
        }
        v15 = v14(CMBaseObject, v11, a3, &cf);
        goto LABEL_15;
      }
      goto LABEL_62;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3340]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3300]))
      {
        NodeType = 0;
        cf = (CFTypeRef)*MEMORY[0x1E0CA3268];
        goto LABEL_20;
      }
      v29 = *MEMORY[0x1E0CA3378];
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3378]))
      {
        v29 = *MEMORY[0x1E0CA3330];
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3330]))
        {
          v29 = *MEMORY[0x1E0CA3328];
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3328]))
          {
            v29 = *MEMORY[0x1E0CA3338];
            if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3338]))
            {
              v29 = *MEMORY[0x1E0CA3308];
              if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3308]))
              {
                v29 = *MEMORY[0x1E0CA3318];
                if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3318]))
                {
                  v29 = *MEMORY[0x1E0CA3320];
                  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3320]))
                  {
                    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3360]))
                    {
                      v10 = (const __CFString *)DerivedStorage[7];
                      if (!v10)
                        goto LABEL_19;
                      goto LABEL_18;
                    }
                    v29 = *MEMORY[0x1E0CA3348];
                    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3348]))
                    {
                      v29 = *MEMORY[0x1E0CA3350];
                      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3350]))
                      {
                        v29 = *MEMORY[0x1E0CA3358];
                        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3358]))
                        {
                          NodeType = 4294954512;
                          goto LABEL_20;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      IsLoaded = fcd_ttml_ensureStyledTextIsLoaded(a1);
      if (!(_DWORD)IsLoaded)
      {
        v15 = FigCaptionDataCopyProperty(DerivedStorage[2], v29, a3, (uint64_t)&cf);
LABEL_15:
        NodeType = v15;
        if (!(_DWORD)v15)
        {
LABEL_20:
          *a4 = cf;
          return NodeType;
        }
LABEL_23:
        if (cf)
          CFRelease(cf);
        return NodeType;
      }
LABEL_62:
      NodeType = IsLoaded;
      goto LABEL_23;
    }
    if (a1)
      v18 = CMBaseObjectGetDerivedStorage();
    else
      v18 = 0;
    if (*(_QWORD *)(v18 + 48))
    {
LABEL_141:
      v10 = (const __CFString *)DerivedStorage[6];
      if (!v10)
        goto LABEL_19;
      goto LABEL_18;
    }
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    fcd_ttml_getCaptionTimeRange(*(const __CFArray **)v18, (uint64_t)&v62);
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(const void **)(v18 + 40);
    v21 = *(_QWORD *)(v18 + 64);
    v59 = v62;
    v60 = v63;
    v61 = v64;
    v70 = 0;
    v71[0] = 0;
    v69 = 0;
    Mutable = FigTTMLRegionCopyID((uint64_t)v20, &v69);
    v23 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if ((_DWORD)Mutable)
      goto LABEL_144;
    Mutable = FigCaptionRegionCreateMutable();
    if ((_DWORD)Mutable)
      goto LABEL_144;
    v24 = FigCaptionRegionGetCMBaseObject();
    v25 = *(uint64_t (**)(uint64_t, _QWORD, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v25)
    {
      v30 = 0;
      NodeType = 4294954514;
      goto LABEL_82;
    }
    Mutable = v25(v24, *MEMORY[0x1E0CA3438], &stru_1E2FD85F8);
    if ((_DWORD)Mutable)
    {
LABEL_144:
      NodeType = Mutable;
    }
    else
    {
      if (!FigGeometryAspectRatioIsValid())
        goto LABEL_66;
      v26 = (const void *)FigGeometryAspectRatioCopyAsDictionary();
      v27 = FigCaptionRegionGetCMBaseObject();
      v28 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v28)
        NodeType = v28(v27, *MEMORY[0x1E0CA3410], v26);
      else
        NodeType = 4294954514;
      if (v26)
        CFRelease(v26);
      if (!(_DWORD)NodeType)
      {
LABEL_66:
        if ((*(_BYTE *)(v21 + 92) & 1) == 0
          || (*(_QWORD *)(v21 + 104) & 0x100000000) == 0
          || (*(_BYTE *)(v21 + 124) & 1) == 0
          || (*(_QWORD *)(v21 + 136) & 0x100000000) == 0)
        {
          goto LABEL_67;
        }
        v31 = *(_OWORD *)(v21 + 96);
        v65 = *(_OWORD *)(v21 + 80);
        v66 = v31;
        v32 = *(_OWORD *)(v21 + 128);
        v67 = *(_OWORD *)(v21 + 112);
        v68 = v32;
        v33 = (const void *)FigGeometryRectCopyAsDictionary();
        v34 = FigCaptionRegionGetCMBaseObject();
        v35 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v35)
          NodeType = v35(v34, *MEMORY[0x1E0CA33D0], v33);
        else
          NodeType = 4294954514;
        if (v33)
          CFRelease(v33);
        if (!(_DWORD)NodeType)
        {
LABEL_67:
          CellResolutionProperty = (const void *)fcd_ttml_createCellResolutionProperty(v21);
          v37 = FigCaptionRegionGetCMBaseObject();
          v38 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v38)
            NodeType = v38(v37, *MEMORY[0x1E0CA33F0], CellResolutionProperty);
          else
            NodeType = 4294954514;
          if (*(_DWORD *)(v21 + 192) && *(_DWORD *)(v21 + 196))
          {
            v39 = (uint64_t)v70;
            v40 = *MEMORY[0x1E0CA34B0];
            FigGeometryDimensionMake();
            v41 = fcd_ttml_setDimensionProperty(v39, v40);
            if ((_DWORD)v41)
            {
              NodeType = v41;
              goto LABEL_154;
            }
            v42 = (uint64_t)v70;
            v43 = *MEMORY[0x1E0CA3428];
            FigGeometryDimensionMake();
            NodeType = fcd_ttml_setDimensionProperty(v42, v43);
            if ((_DWORD)NodeType)
              goto LABEL_154;
          }
          if (FigCFEqual())
          {
            if (v70)
              v30 = CFRetain(v70);
            else
              v30 = 0;
LABEL_80:
            v71[0] = 0;
            if (!CellResolutionProperty)
              goto LABEL_82;
            goto LABEL_81;
          }
          v65 = v59;
          v66 = v60;
          v67 = v61;
          NodeType = fcd_ttml_createRegionFromNode(v19, v20, (uint64_t)v69, (uint64_t)v70, &v65, v21, v71);
          if (!(_DWORD)NodeType)
          {
            v30 = v71[0];
            goto LABEL_80;
          }
LABEL_154:
          v30 = 0;
          if (!CellResolutionProperty)
          {
LABEL_82:
            if (v69)
              CFRelease(v69);
            if (v70)
              CFRelease(v70);
            if (v71[0])
              CFRelease(v71[0]);
            if (!(_DWORD)NodeType)
            {
              if (*(_QWORD *)v18 && CFArrayGetCount(*(CFArrayRef *)v18))
              {
                ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v18, 0);
                v45 = *(_QWORD *)(v18 + 8);
                v57 = *(_QWORD *)(v18 + 64);
                v59 = v62;
                v60 = v63;
                v61 = v64;
                v71[0] = 0;
                alloc = *v23;
                v46 = CFArrayCreateMutable(*v23, 0, MEMORY[0x1E0C9B378]);
                v55 = v30;
                if (v30)
                  v47 = CFRetain(v30);
                else
                  v47 = 0;
                v70 = 0;
                if (ValueAtIndex)
                {
                  do
                  {
                    LODWORD(v65) = 0;
                    NodeType = FigTTMLNodeGetNodeType((uint64_t)ValueAtIndex, (uint64_t)&v65);
                    if ((_DWORD)v65 == 7)
                      break;
                    if ((v65 & 0xFFFFFFFE) == 2)
                    {
                      if (v71[0])
                      {
                        CFRelease(v71[0]);
                        v71[0] = 0;
                      }
                      v49 = FigTTMLSynchronicTreeCopySSS(v45, ValueAtIndex, v71);
                      if ((_DWORD)v49)
                      {
                        NodeType = v49;
                        v48 = 0;
                        goto LABEL_126;
                      }
                      if (CFDictionaryContainsKey((CFDictionaryRef)v71[0], CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor"))|| CFDictionaryContainsKey((CFDictionaryRef)v71[0], CFSTR("http://www.w3.org/ns/ttml#styling display")))
                      {
                        CFArrayAppendValue(v46, ValueAtIndex);
                      }
                      NodeType = 0;
                    }
                    ValueAtIndex = (const void *)FigTTMLNodeGetParentNode();
                  }
                  while (ValueAtIndex);
                }
                else
                {
                  NodeType = 0;
                }
                Count = CFArrayGetCount(v46);
                if (Count < 1)
                {
                  v48 = v47;
                  v47 = 0;
                }
                else
                {
                  v54 = v18;
                  v51 = 0;
                  v52 = Count + 1;
                  while (1)
                  {
                    v53 = CFArrayGetValueAtIndex(v46, v52 - 2);
                    if (v51)
                      CFRelease(v51);
                    v51 = CFStringCreateWithFormat(alloc, 0, CFSTR("region_from_div_or_body_%p"), v53);
                    if (v70)
                    {
                      CFRelease(v70);
                      v70 = 0;
                    }
                    v65 = v59;
                    v66 = v60;
                    v67 = v61;
                    NodeType = fcd_ttml_createRegionFromNode(v45, v53, (uint64_t)v51, (uint64_t)v47, &v65, v57, &v70);
                    if ((_DWORD)NodeType)
                      break;
                    v48 = v70;
                    if (v70)
                      CFRetain(v70);
                    if (v47)
                      CFRelease(v47);
                    --v52;
                    v47 = v48;
                    if (v52 <= 1)
                    {
                      v47 = 0;
                      goto LABEL_123;
                    }
                  }
                  v48 = 0;
LABEL_123:
                  v18 = v54;
                  if (v51)
                    CFRelease(v51);
                }
LABEL_126:
                if (v70)
                  CFRelease(v70);
                if (v47)
                  CFRelease(v47);
                if (v46)
                  CFRelease(v46);
                v30 = v55;
                if (v71[0])
                  CFRelease(v71[0]);
                if ((_DWORD)NodeType)
                {
                  if (v48)
                    CFRelease(v48);
                  goto LABEL_138;
                }
              }
              else if (v30)
              {
                v48 = CFRetain(v30);
              }
              else
              {
                v48 = 0;
              }
              NodeType = 0;
              *(_QWORD *)(v18 + 48) = v48;
            }
LABEL_138:
            if (v30)
              CFRelease(v30);
            if ((_DWORD)NodeType)
              goto LABEL_23;
            goto LABEL_141;
          }
LABEL_81:
          CFRelease(CellResolutionProperty);
          goto LABEL_82;
        }
      }
    }
    v30 = 0;
    goto LABEL_82;
  }
  return FigSignalErrorAt();
}

uint64_t fcd_ttml_ensureStyledTextIsLoaded(const void *a1)
{
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFIndex v6;
  const CFArrayCallBacks *v7;
  uint64_t v8;
  CFMutableArrayRef v9;
  __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  __CFDictionary *MutableCopy;
  const void *ParentNode;
  uint64_t NodeType;
  const void *v16;
  const void *v17;
  __CFArray *v18;
  __CFArray *v19;
  const void *v20;
  const void *v21;
  CFMutableSetRef v22;
  CFMutableSetRef v23;
  CFMutableArrayRef v24;
  CFIndex v25;
  CFMutableArrayRef v26;
  const __CFNumber *ValueAtIndex;
  CFIndex v28;
  CFIndex v29;
  CFIndex v30;
  CFMutableDictionaryRef v31;
  uint64_t v32;
  __CFArray *v33;
  CFMutableArrayRef v34;
  uint64_t v35;
  CFTypeRef v36;
  const __CFDictionary *v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  const void *InitialValue;
  uint64_t ActiveTimeRange;
  const void *v43;
  const __CFString *v44;
  CFTypeRef v45;
  uint64_t (*v46)(CFTypeRef, CFTypeRef);
  uint64_t v47;
  const __CFAllocator *v48;
  const __CFArray *v49;
  uint64_t v50;
  void *v51;
  __CFDictionary *v52;
  const void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  const __CFDictionary *v58;
  const __CFDictionary *v59;
  _QWORD *v61;
  __CFArray *v62;
  CFIndex Count;
  uint64_t DerivedStorage;
  const void *v65;
  CFIndex v66;
  uint64_t v67;
  __CFArray *v68;
  __CFDictionary *v69;
  __CFArray *v70;
  CFIndex v71;
  void *value;
  CFTypeRef v73;
  CFTypeRef v74;
  CFTypeRef v75;
  CFTypeRef v76;
  CFDictionaryRef theDict;
  uint64_t valuePtr;
  CFTypeRef v79;
  CFTypeRef cf[2];
  __int128 v81;
  _QWORD v82[8];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  CFRange v86;
  CFRange v87;
  CFRange v88;
  CFRange v89;

  v1 = a1;
  if (a1)
  {
    v2 = CMBaseObjectGetDerivedStorage() + 16;
    if (!*(_QWORD *)v2)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      goto LABEL_7;
    }
    return 0;
  }
  v2 = 16;
  if (MEMORY[0x10])
    return 0;
  DerivedStorage = 0;
LABEL_7:
  v73 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    v3 = 0;
LABEL_194:
    if (v73)
      CFRelease(v73);
    goto LABEL_196;
  }
  v61 = (_QWORD *)v2;
  Count = CFArrayGetCount(*(CFArrayRef *)DerivedStorage);
  if (Count)
  {
    v6 = 0;
    v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v62 = Mutable;
    v65 = v1;
    do
    {
      value = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)DerivedStorage, v6);
      if (v1)
        v8 = CMBaseObjectGetDerivedStorage();
      else
        v8 = 0;
      v66 = v6;
      v75 = 0;
      v76 = 0;
      v74 = 0;
      v9 = CFArrayCreateMutable(v4, 0, v7);
      v10 = v9;
      if (!v9)
      {
        v3 = FigSignalErrorAt();
        v37 = 0;
        goto LABEL_117;
      }
      v67 = v8;
      v68 = v9;
      v11 = *(_QWORD *)(v8 + 8);
      theDict = 0;
      v12 = FigTTMLSynchronicTreeCopySSS(v11, value, &theDict);
      if ((_DWORD)v12)
      {
        v3 = v12;
        v37 = 0;
        MutableCopy = 0;
        goto LABEL_82;
      }
      MutableCopy = CFDictionaryCreateMutableCopy(v4, 0, theDict);
      if (!MutableCopy)
      {
        v3 = FigSignalErrorAt();
LABEL_81:
        v37 = 0;
LABEL_82:
        v10 = v68;
        goto LABEL_103;
      }
      cf[0] = 0;
      ParentNode = (const void *)FigTTMLNodeGetParentNode();
      if (ParentNode)
      {
        while (1)
        {
          LODWORD(v83) = 0;
          NodeType = FigTTMLNodeGetNodeType((uint64_t)ParentNode, (uint64_t)&v83);
          if ((_DWORD)NodeType)
            break;
          if ((_DWORD)v83 != 5)
            goto LABEL_27;
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0;
          }
          NodeType = FigTTMLSynchronicTreeCopySSS(v11, ParentNode, cf);
          if ((_DWORD)NodeType)
            break;
          if (CFDictionaryContainsKey((CFDictionaryRef)cf[0], CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor")))
          {
            v16 = CFDictionaryGetValue((CFDictionaryRef)cf[0], CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor"));
            CFDictionaryAddValue(MutableCopy, CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor"), v16);
          }
          if (CFDictionaryContainsKey((CFDictionaryRef)cf[0], CFSTR("http://www.w3.org/ns/ttml#styling display")))
          {
            v17 = CFDictionaryGetValue((CFDictionaryRef)cf[0], CFSTR("http://www.w3.org/ns/ttml#styling display"));
            CFDictionaryAddValue(MutableCopy, CFSTR("http://www.w3.org/ns/ttml#styling display"), v17);
          }
          ParentNode = (const void *)FigTTMLNodeGetParentNode();
          if (!ParentNode)
          {
LABEL_27:
            v3 = 0;
            goto LABEL_28;
          }
        }
        v3 = NodeType;
LABEL_28:
        if (cf[0])
          CFRelease(cf[0]);
        if ((_DWORD)v3)
          goto LABEL_81;
      }
      v69 = MutableCopy;
      v18 = CFArrayCreateMutable(v4, 0, v7);
      v19 = CFArrayCreateMutable(v4, 0, v7);
      v20 = (const void *)FigTTMLNodeGetParentNode();
      v21 = fcd_ttml_addParentDirectionAndUnicodeBidiRecursively(v11, v20, v18, v19);
      if ((_DWORD)v21)
      {
        v3 = (uint64_t)v21;
        v10 = v68;
      }
      else
      {
        v10 = v68;
        if (v18 && CFArrayGetCount(v18))
        {
          v79 = 0;
          v22 = CFSetCreateMutable(v4, 0, MEMORY[0x1E0C9B3B0]);
          if (v22)
          {
            v23 = v22;
            v86.length = CFArrayGetCount(v18);
            v86.location = 0;
            CFArrayApplyFunction(v18, v86, (CFArrayApplierFunction)fcd_ttml_addAnimationSliceTimeToSet, v23);
            v87.length = CFArrayGetCount(v19);
            v87.location = 0;
            CFArrayApplyFunction(v19, v87, (CFArrayApplierFunction)fcd_ttml_addAnimationSliceTimeToSet, v23);
            v24 = CFArrayCreateMutable(v4, 0, v7);
            CFSetApplyFunction(v23, (CFSetApplierFunction)fcd_ttml_appendValueToArray, v24);
            v88.length = CFArrayGetCount(v24);
            v88.location = 0;
            CFArraySortValues(v24, v88, (CFComparatorFunction)MEMORY[0x1E0C98910], 0);
            CFRelease(v23);
            if (!v24)
              goto LABEL_87;
            v71 = CFArrayGetCount(v24);
            if (v71 < 1)
              goto LABEL_87;
            v25 = 0;
            v26 = 0;
            v70 = v24;
            while (1)
            {
              ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v24, v25);
              valuePtr = 0;
              CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
              if (v26)
                CFRelease(v26);
              cf[0] = 0;
              *(_QWORD *)&v83 = 0;
              v26 = CFArrayCreateMutable(v4, 0, v7);
              v28 = CFArrayGetCount(v18);
              if (v28 < 1)
              {
                v34 = 0;
                v3 = 0;
              }
              else
              {
                v29 = v28;
                v30 = 0;
                v31 = 0;
                while (1)
                {
                  CFArrayGetValueAtIndex(v19, v30);
                  if ((_QWORD)v83)
                  {
                    CFRelease((CFTypeRef)v83);
                    *(_QWORD *)&v83 = 0;
                  }
                  v32 = FigCaptionDynamicStyleCopyKeyFrameValueAtRelativeTime();
                  if ((_DWORD)v32)
                    break;
                  if (!CFEqual((CFTypeRef)v83, CFSTR("normal")))
                  {
                    CFArrayGetValueAtIndex(v18, v30);
                    if (cf[0])
                    {
                      CFRelease(cf[0]);
                      cf[0] = 0;
                    }
                    v32 = FigCaptionDynamicStyleCopyKeyFrameValueAtRelativeTime();
                    if ((_DWORD)v32)
                      break;
                    if (v31)
                      CFRelease(v31);
                    v31 = CFDictionaryCreateMutable(v4, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    CFDictionarySetValue(v31, CFSTR("http://www.w3.org/ns/ttml#styling unicodeBidi"), (const void *)v83);
                    CFDictionarySetValue(v31, CFSTR("http://www.w3.org/ns/ttml#styling direction"), cf[0]);
                    CFArrayAppendValue(v26, v31);
                  }
                  if (v29 == ++v30)
                  {
                    v3 = 0;
                    v33 = v26;
                    v26 = 0;
                    if (!v31)
                      goto LABEL_55;
                    goto LABEL_54;
                  }
                }
                v3 = v32;
                v33 = 0;
                if (v31)
LABEL_54:
                  CFRelease(v31);
LABEL_55:
                v34 = v26;
                v26 = v33;
                v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
              }
              v24 = v70;
              if ((_QWORD)v83)
                CFRelease((CFTypeRef)v83);
              if (cf[0])
                CFRelease(cf[0]);
              if (v34)
                CFRelease(v34);
              if ((_DWORD)v3)
                break;
              if (v79)
              {
                v35 = FigCaptionDynamicStyleAddKeyFrameValue();
                if ((_DWORD)v35)
                  goto LABEL_74;
              }
              else
              {
                v35 = FigCaptionDynamicStyleCreateMutable();
                if ((_DWORD)v35)
                {
LABEL_74:
                  v3 = v35;
                  break;
                }
              }
              if (++v25 == v71)
              {
                v36 = v79;
                v10 = v68;
                goto LABEL_88;
              }
            }
            if (v79)
              CFRelease(v79);
            v36 = 0;
            v10 = v68;
            goto LABEL_89;
          }
          v38 = FigSignalErrorAt();
          if (!(_DWORD)v38)
          {
            v24 = 0;
LABEL_87:
            v36 = 0;
            v26 = 0;
LABEL_88:
            v3 = 0;
            v79 = 0;
LABEL_89:
            if (v26)
              CFRelease(v26);
            if (v24)
              CFRelease(v24);
            Mutable = v62;
            if (!(_DWORD)v3)
              CFDictionarySetValue(v69, CFSTR("internal direction_and_unicodeBidi"), v36);
            if (v36)
              CFRelease(v36);
            goto LABEL_97;
          }
          v3 = v38;
        }
        else
        {
          v3 = 0;
        }
      }
LABEL_97:
      if (v19)
        CFRelease(v19);
      if (v18)
        CFRelease(v18);
      if ((_DWORD)v3)
      {
        v37 = 0;
        MutableCopy = v69;
      }
      else
      {
        v37 = v69;
        MutableCopy = 0;
      }
LABEL_103:
      if (theDict)
        CFRelease(theDict);
      if (MutableCopy)
        CFRelease(MutableCopy);
      if (!(_DWORD)v3)
      {
        if (!CFDictionaryGetValue(v37, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby internalRubyID"))&& !CFDictionaryGetValue(v37, CFSTR("http://www.w3.org/ns/ttml#styling internalRubyID")))
        {
          v1 = v65;
          ActiveTimeRange = fcd_ttml_flushRubyNodesToStyledTextArray(v65, v10);
          if ((_DWORD)ActiveTimeRange)
            goto LABEL_149;
          v43 = *(const void **)(v67 + 32);
          if (v43)
          {
            CFRelease(v43);
            *(_QWORD *)(v67 + 32) = 0;
          }
          v81 = 0u;
          *(_OWORD *)v82 = 0u;
          *(_OWORD *)cf = 0u;
          ActiveTimeRange = FigTTMLNodeGetActiveTimeRange((uint64_t)value, (uint64_t)cf);
          if ((_DWORD)ActiveTimeRange)
            goto LABEL_149;
          v83 = *(_OWORD *)cf;
          v84 = v81;
          v85 = *(_OWORD *)v82;
          ActiveTimeRange = fcd_ttml_createStylePropertiesFromTTMLStyleSet(v37, &v83, (CFMutableDictionaryRef *)&v75);
          if ((_DWORD)ActiveTimeRange)
            goto LABEL_149;
          LODWORD(v83) = 0;
          ActiveTimeRange = FigTTMLNodeGetNodeType((uint64_t)value, (uint64_t)&v83);
          if ((_DWORD)ActiveTimeRange)
            goto LABEL_149;
          if ((_DWORD)v83 == 6)
          {
            v44 = CFSTR("\n");
          }
          else
          {
            if ((_DWORD)v83 == 14)
            {
              ActiveTimeRange = FigTTMLTextCopyContent((uint64_t)value, &v76);
              if ((_DWORD)ActiveTimeRange)
              {
LABEL_149:
                v3 = ActiveTimeRange;
                goto LABEL_117;
              }
LABEL_143:
              ActiveTimeRange = FigCaptionDataCreateMutable();
              if (!(_DWORD)ActiveTimeRange)
              {
                v45 = v76;
                v46 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                if (!v46)
                {
                  v3 = 4294954514;
                  goto LABEL_117;
                }
                ActiveTimeRange = v46(v74, v45);
                if (!(_DWORD)ActiveTimeRange)
                {
                  CFDictionaryApplyFunction((CFDictionaryRef)v75, (CFDictionaryApplierFunction)fcd_ttml_setStylePropertyToWholeStyledText, (void *)v74);
                  CFArrayAppendValue(v10, v74);
LABEL_116:
                  v89.length = CFArrayGetCount(v10);
                  v89.location = 0;
                  CFArrayAppendArray(Mutable, v10, v89);
                  v3 = 0;
                  goto LABEL_117;
                }
              }
              goto LABEL_149;
            }
            v44 = &stru_1E2FD85F8;
          }
          v76 = v44;
          goto LABEL_143;
        }
        FigCaptionDynamicStyleGetInitialValue();
        if (FigCFEqual() || (v39 = fcd_ttml_flushRubyNodesToStyledTextArray(v65, v10), !(_DWORD)v39))
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(v67 + 24), value);
          v40 = *(const void **)(v67 + 32);
          InitialValue = (const void *)FigCaptionDynamicStyleGetInitialValue();
          *(_QWORD *)(v67 + 32) = InitialValue;
          if (InitialValue)
            CFRetain(InitialValue);
          v1 = v65;
          if (v40)
            CFRelease(v40);
          goto LABEL_116;
        }
        v3 = v39;
      }
      v1 = v65;
LABEL_117:
      if (v74)
        CFRelease(v74);
      if (v75)
        CFRelease(v75);
      if (v37)
        CFRelease(v37);
      if (v10)
        CFRelease(v10);
      if (v76)
        CFRelease(v76);
      if ((_DWORD)v3)
        goto LABEL_194;
      v6 = v66 + 1;
    }
    while (v66 + 1 != Count);
  }
  v47 = fcd_ttml_flushRubyNodesToStyledTextArray(v1, Mutable);
  if ((_DWORD)v47
    || (v48 = CFGetAllocator(v1), v47 = fcd_ttml_concatenateStyledTextArray(Mutable, v48, &v73), (_DWORD)v47))
  {
    v3 = v47;
    goto LABEL_194;
  }
  v49 = *(const __CFArray **)DerivedStorage;
  v50 = *(_QWORD *)(DerivedStorage + 8);
  v51 = (void *)v73;
  cf[0] = 0;
  v52 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v49 || CFArrayGetCount(v49) < 1)
    goto LABEL_177;
  v53 = CFArrayGetValueAtIndex(v49, 0);
  if (v53)
  {
    v54 = v53;
    while (1)
    {
      LODWORD(v83) = 0;
      v55 = FigTTMLNodeGetNodeType((uint64_t)v54, (uint64_t)&v83);
      if ((_DWORD)v55)
        goto LABEL_191;
      if ((_DWORD)v83 == 4)
        break;
      v54 = (const void *)FigTTMLNodeGetParentNode();
      if (!v54)
        goto LABEL_161;
    }
    v55 = FigTTMLSynchronicTreeCopySSS(v50, v54, cf);
    if ((_DWORD)v55)
    {
LABEL_191:
      v3 = v55;
      goto LABEL_176;
    }
    FigCFDictionaryAddEntriesToDictionaryWithRecursion();
    while (1)
    {
      LODWORD(v83) = 0;
      v56 = FigTTMLNodeGetNodeType((uint64_t)v54, (uint64_t)&v83);
      if ((_DWORD)v56)
        break;
      if ((_DWORD)v83 == 7)
        goto LABEL_177;
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
      v56 = FigTTMLSynchronicTreeCopySSS(v50, v54, cf);
      if ((_DWORD)v56)
        break;
      v57 = CFDictionaryGetValue((CFDictionaryRef)cf[0], CFSTR("http://www.w3.org/ns/ttml#styling display"));
      if (v57)
      {
        CFDictionarySetValue(v52, CFSTR("http://www.w3.org/ns/ttml#styling display"), v57);
        goto LABEL_177;
      }
      v54 = (const void *)FigTTMLNodeGetParentNode();
      if (!v54)
        goto LABEL_177;
    }
  }
  else
  {
LABEL_161:
    v56 = FigSignalErrorAt();
  }
  v3 = v56;
  if ((_DWORD)v56)
  {
LABEL_176:
    v58 = 0;
  }
  else
  {
LABEL_177:
    v3 = 0;
    v58 = v52;
    v52 = 0;
  }
  if (cf[0])
    CFRelease(cf[0]);
  if (v52)
    CFRelease(v52);
  if (!(_DWORD)v3)
  {
    v84 = 0u;
    v85 = 0u;
    v83 = 0u;
    fcd_ttml_getCaptionTimeRange(v49, (uint64_t)&v83);
    v59 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    cf[0] = 0;
    MEMORY[0x19402F294](&fcd_ttml_getCaptionPropertyMappingDictionary_sInitializeCaptionPropertyMappingOnce, fcd_ttml_initializeCaptionPropertyMappingDictionary);
    cf[1] = (CFTypeRef)sCaptionPropertyMappingDictionary;
    v81 = v83;
    v82[0] = v84;
    *(_OWORD *)&v82[1] = v83;
    *(_OWORD *)&v82[3] = v84;
    *(_OWORD *)&v82[5] = v85;
    v82[7] = v59;
    CFDictionaryApplyFunction(v58, (CFDictionaryApplierFunction)fcd_ttml_convertTTMLStyleToCaptionPropertyAndAddToDictionary, cf);
    v3 = LODWORD(cf[0]);
    if (!LODWORD(cf[0]))
      CFDictionaryApplyFunction(v59, (CFDictionaryApplierFunction)fcd_ttml_setPropertyToObject, v51);
    if (v59)
      CFRelease(v59);
  }
  if (v58)
    CFRelease(v58);
  if ((_DWORD)v3)
    goto LABEL_194;
  *v61 = v73;
LABEL_196:
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

uint64_t FigCaptionDataCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t fcd_ttml_flushRubyNodesToStyledTextArray(const void *a1, __CFArray *a2)
{
  const void *v2;
  uint64_t v3;
  __CFString *Mutable;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t v9;
  const void *InitialValue;
  int v11;
  const void *v12;
  const __CFDictionary *v13;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  __CFArray *v17;
  CFIndex v18;
  CFIndex v19;
  CFMutableDictionaryRef v20;
  CFIndex v21;
  const void *v22;
  uint64_t ActiveTimeRange;
  const void *v24;
  const void *v25;
  void *v26;
  CFTypeRef v27;
  uint64_t (*v28)(void *, CFTypeRef);
  const __CFArray *v29;
  const __CFAllocator *v30;
  uint64_t v31;
  void *v32;
  uint64_t (*v33)(void *);
  const __CFString *v34;
  CFIndex Length;
  uint64_t (*v36)(void *, _QWORD, _QWORD, _QWORD, CFIndex);
  uint64_t DerivedStorage;
  const void *v40;
  const __CFAllocator *allocator;
  void *value;
  CFTypeRef v43[2];
  __int128 v44;
  __int128 v45;
  CFTypeRef cf[2];
  __int128 v47;
  __int128 v48;
  CFTypeRef v49;
  void *v50;
  CFMutableDictionaryRef v51;
  const __CFDictionary *v52[2];

  v2 = a1;
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v3 = CMBaseObjectGetDerivedStorage();
  }
  else
  {
    DerivedStorage = 0;
    v3 = 0;
  }
  value = 0;
  v43[0] = 0;
  cf[0] = 0;
  v52[0] = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v40 = v2;
  if (Mutable)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 24));
    if (Count)
    {
      v6 = Count;
      v7 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 24), v7);
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
        v9 = FigTTMLSynchronicTreeCopySSS(*(_QWORD *)(v3 + 8), ValueAtIndex, cf);
        if ((_DWORD)v9)
          break;
        if (!CFDictionaryGetValue((CFDictionaryRef)cf[0], CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind")))CFDictionaryGetValue((CFDictionaryRef)cf[0], CFSTR("http://www.w3.org/ns/ttml#styling ruby"));
        InitialValue = (const void *)FigCaptionDynamicStyleGetInitialValue();
        v11 = CFEqual(InitialValue, CFSTR("rt"));
        v12 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (v11 | CFEqual(v12, CFSTR("text")))
        {
          v9 = FigCaptionDataCreateMutable();
          if ((_DWORD)v9)
            break;
          if (v11)
          {
            v9 = fcd_ttml_setRubyTextPropertyFromDictionary((const __CFDictionary *)cf[0], CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby position"));
            if ((_DWORD)v9)
              break;
            v13 = (const __CFDictionary *)cf[0];
            v14 = CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby align");
          }
          else
          {
            v9 = fcd_ttml_setRubyTextPropertyFromDictionary((const __CFDictionary *)cf[0], CFSTR("http://www.w3.org/ns/ttml#styling position"));
            if ((_DWORD)v9)
              break;
            v13 = (const __CFDictionary *)cf[0];
            v14 = CFSTR("http://www.w3.org/ns/ttml#styling rubyAlign");
          }
          v9 = fcd_ttml_setRubyTextPropertyFromDictionary(v13, v14);
          if ((_DWORD)v9)
            break;
          if (v52[0])
          {
            CFRelease(v52[0]);
            v52[0] = 0;
          }
          v9 = FigTTMLTextCopyContent((uint64_t)ValueAtIndex, v52);
          if ((_DWORD)v9)
            break;
          CFStringAppend(Mutable, (CFStringRef)v52[0]);
        }
        if (v6 == ++v7)
        {
          v2 = v40;
          goto LABEL_26;
        }
      }
      v15 = v9;
      v2 = v40;
    }
    else
    {
LABEL_26:
      v15 = 0;
      v43[0] = 0;
    }
  }
  else
  {
    v15 = FigSignalErrorAt();
  }
  if (v52[0])
    CFRelease(v52[0]);
  if (Mutable)
    CFRelease(Mutable);
  if (cf[0])
    CFRelease(cf[0]);
  if ((_DWORD)v15)
  {
    v29 = 0;
  }
  else
  {
    if (v2)
      v16 = CMBaseObjectGetDerivedStorage();
    else
      v16 = 0;
    v51 = 0;
    v52[0] = 0;
    v49 = 0;
    v50 = 0;
    v17 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    v18 = CFArrayGetCount(*(CFArrayRef *)(v16 + 24));
    if (v18)
    {
      v19 = v18;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v16 + 24), v21);
        if (v52[0])
        {
          CFRelease(v52[0]);
          v52[0] = 0;
        }
        ActiveTimeRange = FigTTMLSynchronicTreeCopySSS(*(_QWORD *)(v16 + 8), v22, v52);
        if ((_DWORD)ActiveTimeRange)
          break;
        if (!CFDictionaryGetValue(v52[0], CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind")))
          CFDictionaryGetValue(v52[0], CFSTR("http://www.w3.org/ns/ttml#styling ruby"));
        v24 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (CFEqual(v24, CFSTR("rb"))
          || (v25 = (const void *)FigCaptionDynamicStyleGetInitialValue(), CFEqual(v25, CFSTR("base"))))
        {
          v47 = 0u;
          v48 = 0u;
          *(_OWORD *)cf = 0u;
          ActiveTimeRange = FigTTMLNodeGetActiveTimeRange((uint64_t)v22, (uint64_t)cf);
          if ((_DWORD)ActiveTimeRange)
            break;
          if (v20)
          {
            CFRelease(v20);
            v51 = 0;
          }
          *(_OWORD *)v43 = *(_OWORD *)cf;
          v44 = v47;
          v45 = v48;
          ActiveTimeRange = fcd_ttml_createStylePropertiesFromTTMLStyleSet(v52[0], (__int128 *)v43, &v51);
          if ((_DWORD)ActiveTimeRange)
            break;
          if (v49)
          {
            CFRelease(v49);
            v49 = 0;
          }
          ActiveTimeRange = FigTTMLTextCopyContent((uint64_t)v22, &v49);
          if ((_DWORD)ActiveTimeRange)
            break;
          if (v50)
          {
            CFRelease(v50);
            v50 = 0;
          }
          ActiveTimeRange = FigCaptionDataCreateMutable();
          if ((_DWORD)ActiveTimeRange)
            break;
          v27 = v49;
          v26 = v50;
          v28 = *(uint64_t (**)(void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (!v28)
          {
            v15 = 4294954514;
            goto LABEL_63;
          }
          ActiveTimeRange = v28(v26, v27);
          if ((_DWORD)ActiveTimeRange)
            break;
          v20 = v51;
          CFDictionaryApplyFunction(v51, (CFDictionaryApplierFunction)fcd_ttml_setStylePropertyToWholeStyledText, v50);
          CFArrayAppendValue(v17, v50);
        }
        if (v19 == ++v21)
        {
          v15 = 0;
          v29 = v17;
          v17 = 0;
          goto LABEL_64;
        }
      }
      v15 = ActiveTimeRange;
LABEL_63:
      v29 = 0;
LABEL_64:
      v2 = v40;
    }
    else
    {
      v15 = 0;
      v29 = v17;
      v17 = 0;
    }
    if (v49)
      CFRelease(v49);
    if (v17)
      CFRelease(v17);
    if (v50)
      CFRelease(v50);
    if (v51)
      CFRelease(v51);
    if (v52[0])
      CFRelease(v52[0]);
    if (!(_DWORD)v15)
    {
      if (!CFArrayGetCount(v29))
      {
LABEL_85:
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 24));
        v15 = 0;
        goto LABEL_87;
      }
      v30 = CFGetAllocator(v2);
      v31 = fcd_ttml_concatenateStyledTextArray(v29, v30, &value);
      if (!(_DWORD)v31)
      {
        v32 = value;
        if (!value)
        {
          v15 = FigSignalErrorAt();
          if (!v29)
            return v15;
          goto LABEL_90;
        }
        v33 = *(uint64_t (**)(void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v33)
          v34 = (const __CFString *)v33(v32);
        else
          v34 = &stru_1E2FD85F8;
        Length = CFStringGetLength(v34);
        v36 = *(uint64_t (**)(void *, _QWORD, _QWORD, _QWORD, CFIndex))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 32);
        if (!v36)
        {
          v15 = 4294954514;
          goto LABEL_87;
        }
        v31 = v36(v32, *MEMORY[0x1E0CA35E0], 0, 0, Length);
        if (!(_DWORD)v31)
        {
          CFArrayAppendValue(a2, value);
          goto LABEL_85;
        }
      }
      v15 = v31;
    }
  }
LABEL_87:
  if (value)
    CFRelease(value);
  if (v29)
LABEL_90:
    CFRelease(v29);
  return v15;
}

uint64_t fcd_ttml_concatenateStyledTextArray(const __CFArray *a1, const __CFAllocator *a2, _QWORD *a3)
{
  uint64_t Mutable;
  __CFString *v7;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t (*v11)(const void *);
  const __CFString *v12;
  uint64_t (*v13)(CFTypeRef, __CFString *);
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  const void *v17;
  uint64_t (*v18)(const void *);
  const __CFString *v19;
  CFIndex Length;
  uint64_t CMBaseObject;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v23;
  CFIndex v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t (*v28)(const void *, uint64_t, const void *, uint64_t, CFTypeRef *, uint64_t *);
  uint64_t v29;
  CFTypeRef v30;
  CFIndex v31;
  uint64_t v32;
  CFTypeRef v33;
  uint64_t (*v34)(CFTypeRef, const void *, CFTypeRef, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  CFIndex v39;
  __CFString *v40;
  CFIndex v41;
  CFIndex v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CFTypeRef v47;
  CFTypeRef cf;
  CFTypeRef v49;

  v49 = 0;
  v47 = 0;
  cf = 0;
  Mutable = FigCaptionDataCreateMutable();
  if ((_DWORD)Mutable)
  {
    v35 = Mutable;
    v7 = 0;
  }
  else
  {
    v7 = CFStringCreateMutable(a2, 0);
    if (v7)
    {
      Count = CFArrayGetCount(a1);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          v11 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v11)
            v12 = (const __CFString *)v11(ValueAtIndex);
          else
            v12 = &stru_1E2FD85F8;
          CFStringAppend(v7, v12);
        }
      }
      v13 = *(uint64_t (**)(CFTypeRef, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v13)
      {
        v14 = v13(v49, v7);
        if ((_DWORD)v14)
        {
          v35 = v14;
        }
        else
        {
          if (Count)
          {
            v15 = 0;
            v43 = 0;
            v16 = *MEMORY[0x1E0CA3368];
            v44 = *MEMORY[0x1E0C9AE00];
            v37 = *MEMORY[0x1E0CA3368];
            v38 = a3;
            v40 = v7;
            while (1)
            {
              v17 = CFArrayGetValueAtIndex(a1, v15);
              v18 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (v18)
                v19 = (const __CFString *)v18(v17);
              else
                v19 = &stru_1E2FD85F8;
              Length = CFStringGetLength(v19);
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              CMBaseObject = FigCaptionDataGetCMBaseObject();
              v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
              if (!v22)
                goto LABEL_36;
              v39 = v15;
              v23 = v22(CMBaseObject, v16, v44, &cf);
              if ((_DWORD)v23)
                break;
              v41 = CFArrayGetCount((CFArrayRef)cf);
              if (v41)
              {
                v24 = 0;
                while (1)
                {
                  v42 = v24;
                  v25 = CFArrayGetValueAtIndex((CFArrayRef)cf, v24);
                  if (Length)
                    break;
LABEL_33:
                  v24 = v42 + 1;
                  if (v42 + 1 == v41)
                    goto LABEL_34;
                }
                v26 = v25;
                v27 = 0;
                while (1)
                {
                  v45 = 0;
                  v46 = 0;
                  if (v47)
                  {
                    CFRelease(v47);
                    v47 = 0;
                  }
                  v28 = *(uint64_t (**)(const void *, uint64_t, const void *, uint64_t, CFTypeRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                  if (!v28)
                    break;
                  v23 = v28(v17, v27, v26, v44, &v47, &v45);
                  if ((_DWORD)v23)
                    goto LABEL_50;
                  v29 = v46;
                  v30 = v47;
                  if (v47)
                  {
                    v31 = Length;
                    v32 = v45;
                    v33 = v49;
                    v34 = *(uint64_t (**)(CFTypeRef, const void *, CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
                    if (!v34)
                      break;
                    v23 = v34(v33, v26, v30, v32 + v43, v29);
                    if ((_DWORD)v23)
                      goto LABEL_50;
                    v29 = v46;
                    Length = v31;
                  }
                  v27 += v29;
                  if (v27 == Length)
                    goto LABEL_33;
                }
                v35 = 4294954514;
                goto LABEL_38;
              }
LABEL_34:
              v43 += Length;
              a3 = v38;
              v15 = v39 + 1;
              v16 = v37;
              v7 = v40;
              if (v39 + 1 == Count)
                goto LABEL_35;
            }
LABEL_50:
            v35 = v23;
LABEL_38:
            v7 = v40;
            goto LABEL_39;
          }
LABEL_35:
          v35 = 0;
          *a3 = v49;
          v49 = 0;
        }
      }
      else
      {
LABEL_36:
        v35 = 4294954514;
      }
    }
    else
    {
      FigSignalErrorAt();
      v35 = 0;
    }
  }
LABEL_39:
  if (v47)
    CFRelease(v47);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v49)
    CFRelease(v49);
  return v35;
}

uint64_t fcd_ttml_createStylePropertiesFromTTMLStyleSet(const __CFDictionary *a1, __int128 *a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CFMutableDictionaryRef v17;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  v11[0] = 0;
  MEMORY[0x19402F294](&fcd_ttml_getStylePropertyMappingDictionary_sInitializeStylePropertyMappingOnce, fcd_ttml_initializeStylePropertyMappingDictionary);
  v11[1] = sStylePropertyMappingDictionary;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = v12;
  v8 = a2[2];
  v15 = a2[1];
  v16 = v8;
  v17 = v7;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)fcd_ttml_convertTTMLStyleToCaptionPropertyAndAddToDictionary, v11);
  v9 = LODWORD(v11[0]);
  if (LODWORD(v11[0]))
    CFRelease(v7);
  else
    *a3 = v7;
  return v9;
}

uint64_t fcd_ttml_setStylePropertyToWholeStyledText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t);
  const __CFString *v7;
  CFIndex Length;
  uint64_t result;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, _QWORD, CFIndex);

  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    v7 = (const __CFString *)v6(a3);
  else
    v7 = &stru_1E2FD85F8;
  Length = CFStringGetLength(v7);
  result = CMBaseObjectGetVTable();
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, CFIndex))(*(_QWORD *)(result + 16) + 32);
  if (v10)
    return v10(a3, a1, a2, 0, Length);
  return result;
}

const void *fcd_ttml_addParentDirectionAndUnicodeBidiRecursively(uint64_t a1, const void *a2, __CFArray *a3, __CFArray *a4)
{
  uint64_t NodeType;
  uint64_t ParentNode;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  __CFArray *v15;
  const void *v16;
  BOOL v17;
  const void *v18;
  void *v20;
  int v21;
  void *value;
  CFDictionaryRef theDict;

  value = 0;
  theDict = 0;
  v21 = 0;
  NodeType = FigTTMLNodeGetNodeType((uint64_t)a2, (uint64_t)&v21);
  if ((_DWORD)NodeType)
    goto LABEL_25;
  if ((v21 - 6) < 0xFFFFFFFE)
  {
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  ParentNode = FigTTMLNodeGetParentNode();
  NodeType = fcd_ttml_addParentDirectionAndUnicodeBidiRecursively(a1, ParentNode, a3, a4);
  if ((_DWORD)NodeType || (NodeType = FigTTMLSynchronicTreeCopySSS(a1, a2, &theDict), (_DWORD)NodeType))
  {
LABEL_25:
    v12 = (const void *)NodeType;
  }
  else
  {
    v10 = v21;
    v11 = CFDictionaryGetValue(theDict, CFSTR("http://www.w3.org/ns/ttml#styling direction"));
    v12 = v11;
    if (v10 != 4)
    {
      v16 = CFDictionaryGetValue(theDict, CFSTR("http://www.w3.org/ns/ttml#styling unicodeBidi"));
      if (v12)
        v17 = v16 == 0;
      else
        v17 = 1;
      if (v17)
        goto LABEL_16;
      v18 = v16;
      CFArrayAppendValue(a3, v12);
      v15 = a4;
      v14 = v18;
      goto LABEL_15;
    }
    if (v11)
      CFArrayAppendValue(a3, v11);
    v13 = CFDictionaryGetValue(theDict, CFSTR("http://www.w3.org/ns/ttml#styling unicodeBidi"));
    if (v13)
    {
      v14 = v13;
      v15 = a4;
LABEL_15:
      CFArrayAppendValue(v15, v14);
      goto LABEL_16;
    }
    if (v12)
    {
      v12 = (const void *)FigCaptionDynamicStyleCreate();
      v20 = value;
      if (!(_DWORD)v12)
      {
        CFArrayAppendValue(a4, value);
        v20 = value;
      }
      if (v20)
        CFRelease(v20);
    }
  }
LABEL_17:
  if (theDict)
    CFRelease(theDict);
  return v12;
}

void fcd_ttml_addAnimationSliceTimeToSet(uint64_t a1, __CFSet *a2)
{
  uint64_t KeyFrameCount;
  uint64_t v4;
  uint64_t v5;
  CFNumberRef v6;
  const __CFAllocator *v7;
  uint64_t valuePtr;

  KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount();
  if (KeyFrameCount >= 1)
  {
    v4 = KeyFrameCount;
    v5 = 0;
    v6 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      valuePtr = 0;
      if (FigCaptionDynamicStyleCopyKeyFrameValueAtIndex())
        break;
      if (v6)
        CFRelease(v6);
      v6 = CFNumberCreate(v7, kCFNumberDoubleType, &valuePtr);
      CFSetAddValue(a2, v6);
      ++v5;
    }
    while (v4 != v5);
    if (v6)
      CFRelease(v6);
  }
}

void fcd_ttml_appendValueToArray(void *value, CFMutableArrayRef theArray)
{
  CFArrayAppendValue(theArray, value);
}

void fcd_ttml_convertTTMLStyleToCaptionPropertyAndAddToDictionary(void *key, uint64_t a2, uint64_t a3)
{
  uint64_t (*Value)(CFTypeRef, CFTypeRef *, CFTypeRef *);
  BOOL v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;
  const void *v11;
  _OWORD v12[3];
  CMTime v13;
  const void *v14;
  CFTypeRef v15;

  v14 = 0;
  v15 = 0;
  Value = (uint64_t (*)(CFTypeRef, CFTypeRef *, CFTypeRef *))CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), key);
  if (*(_DWORD *)a3)
    v6 = 1;
  else
    v6 = Value == 0;
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 16);
    v13.epoch = *(_QWORD *)(a3 + 32);
    v9 = *(_OWORD *)(a3 + 56);
    v12[0] = *(_OWORD *)(a3 + 40);
    v12[1] = v9;
    v12[2] = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v13.value = v8;
    v10 = fcd_ttml_createDynamicStyleFromTTML(Value, a2, &v13, (CMTime *)v12, &v15, &v14);
    v7 = v10;
    v11 = v14;
    if (!v10)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 88), v15, v14);
    if (v11)
      CFRelease(v11);
  }
  if (v15)
    CFRelease(v15);
  *(_DWORD *)a3 = v7;
}

void fcd_ttml_initializeStylePropertyMappingDictionary()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling color"), fcd_ttml_createStylePropertyFromTTMLStyle_color);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor"), fcd_ttml_createStylePropertyFromTTMLStyle_backgroundColor);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontWeight"), fcd_ttml_createStylePropertyFromTTMLStyle_fontWeight);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontStyle"), fcd_ttml_createStylePropertyFromTTMLStyle_fontStyle);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling display"), fcd_ttml_createStylePropertyFromTTMLStyle_display);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textOutline"), fcd_ttml_createStylePropertyFromTTMLStyle_textOutline);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textDecoration"), fcd_ttml_createStylePropertyFromTTMLStyle_textDecoration);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay"), fcd_ttml_createStylePropertyFromTTMLStyle_forcedDisplay);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontSize"), fcd_ttml_createStylePropertyFromTTMLStyle_fontSize);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling lineHeight"), fcd_ttml_createStylePropertyFromTTMLStyle_lineHeight);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling wrapOption"), fcd_ttml_createStylePropertyFromTTMLStyle_wrapOption);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontFamily"), fcd_ttml_createStylePropertyFromTTMLStyle_fontFamily);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling visibility"), fcd_ttml_createStylePropertyFromTTMLStyle_visibility);
  CFDictionaryAddValue(Mutable, CFSTR("internal direction_and_unicodeBidi"), fcd_ttml_createStylePropertyFromTTMLStyle_direction_and_unicodeBidi);
  CFDictionaryAddValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine"), fcd_ttml_createStylePropertyFromTTMLStyle_textCombine);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textCombine"), fcd_ttml_createStylePropertyFromTTMLStyle_textCombine);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textEmphasis"), fcd_ttml_createStylePropertyFromTTMLStyle_textEmphasis);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling shear"), fcd_ttml_createStylePropertyFromTTMLStyle_textShear);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textShadow"), fcd_ttml_createStylePropertyFromTTMLStyle_textShadow);
  sStylePropertyMappingDictionary = (uint64_t)Mutable;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_color(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  uint64_t v7;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA35E8];
  v7 = FigTTMLCGColorCreateWithColorSyntax(a1);
  *a3 = v7;
  if (v7)
    return 0;
  else
    return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_backgroundColor(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  uint64_t v7;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3558];
  v7 = FigTTMLCGColorCreateWithColorSyntax(a1);
  *a3 = v7;
  if (v7)
    return 0;
  else
    return 4294950720;
}

