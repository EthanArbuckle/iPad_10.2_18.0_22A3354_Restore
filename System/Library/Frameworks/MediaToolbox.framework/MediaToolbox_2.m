void fpfs_SeekDidFail(const void *a1, const void *a2, int a3, int a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v9;
  CFNumberRef v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v14;
  CFNumberRef v15;
  CFIndex v16;
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v18;
  void **p_values;
  const void *v20;
  int v21;
  int valuePtr;
  void *values;
  CFNumberRef v24;
  void *keys;
  const __CFString *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = a4;
  valuePtr = a3;
  v26 = 0;
  v24 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = *(_QWORD *)(v11 + 2536);
  if (v12)
  {
    v13 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
    if (v13)
      v13(v12, CFSTR("playerStats"), CFSTR("CSCnt"), 1);
  }
  v14 = MEMORY[0x1E0CA2E18];
  fpfsi_setLastSeekTimeSet(v11, MEMORY[0x1E0CA2E18]);
  if (v10)
  {
    keys = CFSTR("SeekID");
    values = v10;
    if (a4 && (v15 = CFNumberCreate(v9, kCFNumberSInt32Type, &v21)) != 0)
    {
      v26 = CFSTR("Result");
      v24 = v15;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v18 = CFDictionaryCreate(AllocatorForMedia, (const void **)&keys, (const void **)&values, v16, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v18)
      fpfs_EnqueueNotification(a1, CFSTR("SeekWasCanceled"), a2, v18);
    FigSignalErrorAt();
    p_values = &values;
    do
    {
      if (*p_values)
        CFRelease(*p_values);
      ++p_values;
      --v16;
    }
    while (v16);
  }
  else
  {
    FigSignalErrorAt();
  }
  *(_OWORD *)(DerivedStorage + 1488) = *(_OWORD *)v14;
  *(_QWORD *)(DerivedStorage + 1504) = *(_QWORD *)(v14 + 16);
  fpfsi_setLastSeekTimeSet(DerivedStorage, v14);
  *(_QWORD *)(DerivedStorage + 3152) = 0;
  *(_DWORD *)(DerivedStorage + 2196) = 0;
  *(_DWORD *)(DerivedStorage + 2216) = 0;
  v20 = *(const void **)(DerivedStorage + 1592);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 1592) = 0;
  }
}

uint64_t fpfsi_TimeInTotalTimeRangeInBuffer(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CMTime v11;
  CMTime v12;
  CMTimeRange range;
  CMTime time2;
  CMTime time;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  fpfsi_TotalTimeRangeInBuffer(a1, (uint64_t)&range);
  value = range.start.value;
  timescale = range.start.timescale;
  if ((range.start.flags & 1) == 0)
    return 0;
  result = 0;
  if ((range.duration.flags & 1) != 0 && !range.duration.epoch && (range.duration.value & 0x8000000000000000) == 0)
  {
    range.start.value = value;
    range.start.timescale = timescale;
    range.duration.epoch = 0;
    time = *a2;
    result = CMTimeRangeContainsTime(&range, &time);
    if ((_DWORD)result)
    {
      v7 = *(_QWORD *)(DerivedStorage + 1040);
      if (v7)
      {
        while (!*(_BYTE *)(v7 + 456))
        {
          v7 = *(_QWORD *)(v7 + 8);
          if (!v7)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        v8 = *(_QWORD *)(DerivedStorage + 1056);
        if (!v8)
          goto LABEL_18;
        while (!*(_BYTE *)(v8 + 456))
        {
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
            goto LABEL_18;
        }
      }
      time = *a2;
      v9 = CMBaseObjectGetDerivedStorage();
      LOBYTE(time2.value) = 0;
      LOBYTE(v11.value) = 0;
      range.start = time;
      if ((fpfsi_TimeInTrackListNonSparseCachedSamples((uint64_t *)(v9 + 1040), &range.start, &time2) & 1) == 0)
      {
        range.start = time;
        if (!fpfsi_TimeInTrackListNonSparseCachedSamples((uint64_t *)(v9 + 1056), &range.start, &v11))
        {
          if (LOBYTE(time2.value) | LOBYTE(v11.value))
            return 0;
        }
      }
LABEL_18:
      fpfs_GetTime(DerivedStorage, (uint64_t)&v12);
      *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
      range.start.epoch = a2->epoch;
      if (!fpfs_TimeIsAfter(v5, &range.start, &v12))
        return 1;
      v11 = *a2;
      v10 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
      if (!v10)
        return 1;
      while (1)
      {
        if (*(_DWORD *)(v10 + 152) == 1 && !*(_BYTE *)(v10 + 184))
        {
          memset(&range, 0, 24);
          CMBufferQueueGetMinPresentationTimeStamp(&range.start, *(CMBufferQueueRef *)(v10 + 72));
          time = v11;
          time2 = range.start;
          if (CMTimeCompare(&time, &time2) < 0)
            break;
          time = v11;
          time2 = *(CMTime *)(v10 + 216);
          if (CMTimeCompare(&time, &time2) > 0)
            break;
        }
        v10 = *(_QWORD *)(v10 + 8);
        if (!v10)
          return 1;
      }
      return 0;
    }
  }
  return result;
}

void fpfsi_setLastSeekTimeSet(uint64_t a1, uint64_t a2)
{
  CMTime *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  CMTime v8;

  v3 = (CMTime *)(a1 + 320);
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 336) = v4;
  v5 = *(_QWORD *)(a1 + 2536);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 332);
    v7 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 56);
    if (v7)
      v7(v5, CFSTR("playerStats"), CFSTR("SeekPending"), v6 & 1, 0);
  }
  v8 = *v3;
  fpfsi_setPlaybackRateMonitorPendingSeekTime(a1, &v8);
}

uint64_t fpfs_SeekDidComplete(const void *a1, const void *a2, int a3, char a4, _BYTE *a5, CMTime *a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  const void *v15;
  int v16;
  const void *v17;
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v20;
  uint64_t UpTimeNanoseconds;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, __CFString *, __CFString *, unint64_t);
  uint64_t v25;
  void (*v26)(uint64_t, __CFString *, __CFString *, uint64_t);
  const __CFAllocator *AllocatorForMedia;
  const void *v28;
  double v29;
  double v30;
  uint64_t v31;
  CFTypeRef v32;
  void (*v33)(uint64_t, const void *, CFTypeRef);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  CMTimeFlags flags;
  uint64_t v45;
  uint64_t v46;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  CMTimeEpoch epoch;
  CFMutableDictionaryRef Mutable;
  const void *v55;
  const __CFAllocator *v56;
  uint64_t v57;
  const void *v58;
  NSObject *v59;
  unsigned int v60;
  unsigned int v61;
  const char *v62;
  int v63;
  const char *Description;
  Float64 Seconds;
  const void *v67;
  CFTypeRef cf;
  CMTime time2;
  CMTime v71;
  const char *v72;
  __int16 v73;
  _BYTE v74[10];
  _BYTE v75[10];
  __int16 v76;
  Float64 v77;
  CMTime time1;
  CMTimeValue v79;
  CMTimeScale v80;
  CMTimeFlags v81;
  uint64_t v82;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = CMBaseObjectGetDerivedStorage();
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (FPSupport_SeekIDGetSource(*(_DWORD *)(v12 + 2196)) != 1)
  {
    v13 = DerivedStorage;
    v14 = a5;
    v15 = a2;
    v16 = a3;
    v17 = a1;
    v18 = *(_QWORD *)(v12 + 2536);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 32);
      if (v19)
        v19(v18, CFSTR("playerStats"), CFSTR("SeekCnt"), 1);
    }
    if (*(_QWORD *)(v12 + 3152))
    {
      v20 = *(_QWORD *)(v12 + 2536);
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      if (v20)
      {
        v22 = UpTimeNanoseconds;
        v23 = *(_QWORD *)(v12 + 3152);
        v24 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 32);
        if (v24)
          v24(v20, CFSTR("playerStats"), CFSTR("TotalSeekTime"), (v22 - v23) / 0xF4240uLL);
      }
    }
    a1 = v17;
    a3 = v16;
    a2 = v15;
    a5 = v14;
    DerivedStorage = v13;
    if ((*(_BYTE *)(v12 + 1500) & 1) != 0)
    {
      v25 = *(_QWORD *)(v12 + 2536);
      if (v25)
      {
        v26 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 32);
        if (v26)
          v26(v25, CFSTR("playerStats"), CFSTR("PSCnt"), 1);
      }
    }
  }
  if (FPSupport_SeekIDGetSource(a3) != 1)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v28 = *(const void **)(v12 + 1696);
    v29 = *(float *)(DerivedStorage + 108);
    v30 = *(float *)(v12 + 840);
    time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    FigMetricItemSeekDidCompleteEventCreate(AllocatorForMedia, (__int128 *)&time1.value, 0, 0, v28, a4, &cf, v29, v30);
    v31 = *(_QWORD *)(v12 + 3360);
    v32 = cf;
    v33 = *(void (**)(uint64_t, const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v33)
      v33(v31, a2, v32);
  }
  if (a5)
    *a5 = 0;
  if (*(_QWORD *)(v12 + 2960))
  {
    v34 = CMBaseObjectGetDerivedStorage();
    v35 = CMBaseObjectGetDerivedStorage();
    memset(&v71, 0, sizeof(v71));
    v36 = FigGetUpTimeNanoseconds();
    v37 = *(_QWORD *)(v35 + 2912);
    if (a5)
      *a5 = 0;
    time1 = *(CMTime *)(v35 + 2928);
    time2 = *(CMTime *)(v35 + 320);
    if (CMTimeCompare(&time1, &time2))
      goto LABEL_30;
    v38 = v36 - v37;
    *(_QWORD *)(v35 + 2920) = v38;
    v39 = *(_QWORD *)(v35 + 2912);
    time1 = *(CMTime *)(v35 + 2928);
    v40 = CMBaseObjectGetDerivedStorage();
    v41 = (char *)malloc_type_malloc(0x38uLL, 0x10A0040C46062B5uLL);
    if (v41)
    {
      *((_QWORD *)v41 + 2) = v39;
      *((_QWORD *)v41 + 3) = v38;
      *(CMTime *)(v41 + 32) = time1;
      v42 = *(_QWORD *)(v40 + 2888);
      v43 = **(_QWORD **)(v42 + 8);
      if (v43 && v39 + v38 <= *(_QWORD *)(v43 + 24) + *(_QWORD *)(v43 + 16))
        goto LABEL_29;
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v41 + 1) = v42;
      *(_QWORD *)v42 = v41;
      *(_QWORD *)(v40 + 2888) = v41;
      ++*(_QWORD *)(v40 + 2952);
    }
    else
    {
      FigSignalErrorAt();
    }
    v41 = 0;
LABEL_29:
    free(v41);
LABEL_30:
    fpfsi_getSeekableTimeRange((uint64_t)a2, &time1);
    value = time1.value;
    flags = time1.flags;
    timescale = time1.timescale;
    if ((time1.flags & 1) == 0 || (v81 & 1) == 0 || v82 || v79 < 0)
    {
      v45 = FigSignalErrorAt();
    }
    else
    {
      epoch = time1.epoch;
      time1.value = value;
      time1.timescale = timescale;
      time2.value = v79;
      time2.timescale = v80;
      time2.flags = v81;
      time2.epoch = 0;
      CMTimeAdd(&v71, &time1, &time2);
      time1 = *(CMTime *)(v35 + 320);
      time2 = v71;
      if (CMTimeCompare(&time1, &time2) && *(float *)(v34 + 108) > 0.0
        || (time1 = *(CMTime *)(v35 + 320),
            time2.value = value,
            time2.timescale = timescale,
            time2.flags = flags,
            time2.epoch = epoch,
            CMTimeCompare(&time1, &time2) >= 1)
        && *(float *)(v34 + 108) < 0.0)
      {
        fpfsi_HandleNextBestEffortTrickplayModeSeek();
        v45 = 0;
        if (a5)
          *a5 = 1;
      }
      else
      {
        fpfsi_EndBestEffortSeekTrickplayMode(v35);
        fpfs_StopPlayingItem(v34, a2, 0);
        v45 = 4294954433;
      }
    }
    Mutable = 0;
    goto LABEL_80;
  }
  *(_QWORD *)(v12 + 2920) = 0;
  *(_QWORD *)(v12 + 2912) = 0;
  v46 = MEMORY[0x1E0CA2E18];
  fpfsi_setLastSeekTimeSet(v12, MEMORY[0x1E0CA2E18]);
  *(_QWORD *)(v12 + 3152) = 0;
  fpfsi_updateMaxPlayThroughTime();
  if ((*(_BYTE *)(v12 + 1500) & 1) != 0)
  {
    LODWORD(time2.value) = 0;
    LOBYTE(value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v48 = time2.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)value))
      v49 = v48;
    else
      v49 = v48 & 0xFFFFFFFE;
    if (!v49)
      goto LABEL_55;
    v50 = *(_QWORD *)v12;
    if (*(_QWORD *)v12)
    {
      v51 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      if (a2)
      {
LABEL_39:
        v52 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
LABEL_54:
        LODWORD(v71.value) = 136316162;
        *(CMTimeValue *)((char *)&v71.value + 4) = (CMTimeValue)"fpfs_SeekDidComplete";
        LOWORD(v71.flags) = 2048;
        *(_QWORD *)((char *)&v71.flags + 2) = v50;
        HIWORD(v71.epoch) = 2082;
        v72 = v51;
        v73 = 2048;
        *(_QWORD *)v74 = a2;
        *(_WORD *)&v74[8] = 2082;
        *(_QWORD *)v75 = v52;
        _os_log_send_and_compose_impl();
        v46 = MEMORY[0x1E0CA2E18];
LABEL_55:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        *(_OWORD *)(v12 + 1488) = *(_OWORD *)v46;
        *(_QWORD *)(v12 + 1504) = *(_QWORD *)(v46 + 16);
        goto LABEL_56;
      }
    }
    else
    {
      v51 = "";
      if (a2)
        goto LABEL_39;
    }
    v52 = "";
    goto LABEL_54;
  }
LABEL_56:
  v55 = *(const void **)(v12 + 1592);
  if (v55)
  {
    CFRelease(v55);
    *(_QWORD *)(v12 + 1592) = 0;
  }
  if (!a3)
  {
    Mutable = 0;
    v45 = 0;
LABEL_80:
    if (fpfs_shouldReleaseRenderChainForPausing((uint64_t)a2))
      fpfsi_ReleaseRenderChainsForPausing(a2);
    goto LABEL_82;
  }
  v56 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(v56, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v57 = FigCFDictionarySetInt32();
    if (!(_DWORD)v57)
    {
      FigCFDictionarySetValue();
      v58 = *(const void **)(v12 + 2208);
      if (v58)
      {
        CFRelease(v58);
        *(_QWORD *)(v12 + 2208) = 0;
      }
      v57 = FigCFDictionarySetInt32();
      if (!(_DWORD)v57)
      {
        time1 = *a6;
        v57 = FigCFDictionarySetCMTime();
        if (!(_DWORD)v57)
        {
          if (dword_1EE2A2A88)
          {
            LODWORD(time2.value) = 0;
            LOBYTE(value) = 0;
            v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v60 = time2.value;
            if (os_log_type_enabled(v59, (os_log_type_t)value))
              v61 = v60;
            else
              v61 = v60 & 0xFFFFFFFE;
            if (v61)
            {
              v67 = a1;
              if (a2)
                v62 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v62 = "";
              v63 = *(_DWORD *)(v12 + 2196);
              Description = FigPlaybackItemSeekReasonGetDescription(*(_DWORD *)(v12 + 2216));
              time1 = *a6;
              Seconds = CMTimeGetSeconds(&time1);
              LODWORD(v71.value) = 136316674;
              *(CMTimeValue *)((char *)&v71.value + 4) = (CMTimeValue)"fpfs_SeekDidComplete";
              LOWORD(v71.flags) = 2048;
              *(_QWORD *)((char *)&v71.flags + 2) = a2;
              HIWORD(v71.epoch) = 2082;
              v72 = v62;
              v73 = 1024;
              *(_DWORD *)v74 = a3;
              *(_WORD *)&v74[4] = 1024;
              *(_DWORD *)&v74[6] = v63;
              *(_WORD *)v75 = 2080;
              *(_QWORD *)&v75[2] = Description;
              v76 = 2048;
              v77 = Seconds;
              _os_log_send_and_compose_impl();
              a1 = v67;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_DWORD *)(v12 + 2216) = 0;
          if (*(_DWORD *)(v12 + 2196) == a3)
            *(_DWORD *)(v12 + 2196) = 0;
          fpfs_EnqueueNotification(a1, CFSTR("SeekDidComplete"), a2, Mutable);
        }
      }
    }
  }
  else
  {
    v57 = FigSignalErrorAt();
  }
  v45 = v57;
LABEL_82:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v45;
}

uint64_t fpfsi_handleIFrameOnlyRateTransition(const void *a1, int a2, int a3, const __CFArray *a4, int a5, float a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t FigBaseObject;
  uint64_t (*v21)(uint64_t, const __CFString *, uint64_t, CMTime *);
  int v22;
  const void *v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v30;
  const char *v31;
  const char *v32;
  Float64 v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t RenderingTrackofType;
  OSStatus (__cdecl *v38)(CMBufferRef, void *);
  CMTime *v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  CFIndex Count;
  CFIndex v47;
  CFIndex v48;
  const void *ValueAtIndex;
  const void *v50;
  unsigned int PeakBitRate;
  const void *v52;
  const __CFNumber *v53;
  const void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t AllocatorForMedia;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, __CFString *, uint64_t, CMTime *);
  const void *v61;
  const void *v62;
  int AverageBitRate;
  const __CFArray *v64;
  const void *v65;
  const void *v66;
  _OWORD *v67;
  NSObject *v68;
  unsigned int v69;
  unsigned int v70;
  const char *v71;
  uint64_t v72;
  int v74;
  const char *v75;
  Float64 Seconds;
  uint64_t v77;
  const void *v78;
  int v79;
  BOOL v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  const void *v85;
  CMTime v86;
  CMTime v87;
  CMTime v88;
  int valuePtr;
  CMTime rhs;
  CMTime type;
  CMTime theDict;
  CMTime lhs;
  const char *v94;
  __int16 v95;
  const void *v96;
  __int16 v97;
  const char *v98;
  __int16 v99;
  Float64 v100;
  __int16 v101;
  double v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  CMTime refcon;
  CMTime v108;
  uint64_t v109;
  CFRange v110;

  v109 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v85 = *(const void **)DerivedStorage;
  v13 = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  memset(&v88, 0, sizeof(v88));
  v14 = a3 | a2;
  v15 = a6 > 1.0 && v14 == 0;
  if (!v15
    || (v16 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469)) == 0
    || (v17 = *(_QWORD *)(v16 + 96)) == 0
    || (v18 = *(_QWORD *)(v17 + 32)) == 0)
  {
LABEL_24:
    if (dword_1EE2A2A88)
    {
      LODWORD(theDict.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = theDict.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
        v30 = value;
      else
        v30 = value & 0xFFFFFFFE;
      if (v30)
      {
        if (v85)
          v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v31 = "";
        if (a1)
          v32 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v32 = "";
        v33 = *(float *)(v13 + 108);
        LODWORD(lhs.value) = 136317186;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfsi_handleIFrameOnlyRateTransition";
        LOWORD(lhs.flags) = 2048;
        *(_QWORD *)((char *)&lhs.flags + 2) = v85;
        HIWORD(lhs.epoch) = 2082;
        v94 = v31;
        v95 = 2048;
        v96 = a1;
        v97 = 2082;
        v98 = v32;
        v99 = 2048;
        v100 = v33;
        v101 = 2048;
        v102 = a6;
        v103 = 1024;
        v104 = a2;
        v105 = 1024;
        v106 = a3;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v14 = a3 | a2;
    }
    if (!v14)
      return 0;
    v34 = a5;
    if (!a3 || (*(_BYTE *)(DerivedStorage + 471) = 0, (float)(*(float *)(v13 + 108) * a6) <= 0.0))
    {
      v35 = (uint64_t *)CMBaseObjectGetDerivedStorage();
      v36 = *v35;
      refcon = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      lhs = refcon;
      fpfs_setRateInternal(v36, a1, &refcon, &lhs, 0.0);
      fpfs_GetTime((uint64_t)v35, (uint64_t)&lhs);
      RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
      if (RenderingTrackofType)
      {
        if (*(_BYTE *)(RenderingTrackofType + 184))
        {
          v38 = a6 < 0.0
              ? (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetCurrentPTSDescending
              : (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetCurrentPTSAscending;
          refcon = lhs;
          v39 = (CMTime *)(a6 < 0.0 ? MEMORY[0x1E0CA2E30] : MEMORY[0x1E0CA2E28]);
          v108 = *v39;
          if (CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(RenderingTrackofType + 80), v38, &refcon) == -12863
            && (v108.flags & 0x1D) == 1)
          {
            type = v108;
            rhs = lhs;
            CMTimeSubtract(&theDict, &type, &rhs);
            if (fabs(CMTimeGetSeconds(&theDict)) < 5.0)
            {
              type = v108;
              fpfs_SetTime((uint64_t)a1, &type);
            }
          }
        }
      }
    }
    if (a2 && a3)
      goto LABEL_56;
    *(_BYTE *)(DerivedStorage + 528) = 1;
    if (!a2 || a3)
    {
      if (!a2 && a3 && *(_QWORD *)(DerivedStorage + 928))
      {
        refcon.value = 0;
        v54 = *(const void **)(DerivedStorage + 1704);
        v55 = *(const void **)(DerivedStorage + 1696);
        *(_QWORD *)(DerivedStorage + 1704) = v55;
        if (v55)
          CFRetain(v55);
        if (v54)
          CFRelease(v54);
        v56 = *(_QWORD *)(DerivedStorage + 928);
        AllocatorForMedia = FigGetAllocatorForMedia();
        FigBytePumpGetFigBaseObject(v56);
        v59 = v58;
        v60 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
        if (v60)
          v60(v59, CFSTR("FBP_MeasuredBandwidth"), AllocatorForMedia, &refcon);
        v61 = (const void *)refcon.value;
        if (refcon.value)
        {
          v62 = *(const void **)(DerivedStorage + 1736);
          *(_QWORD *)(DerivedStorage + 1736) = refcon.value;
          CFRetain(v61);
          if (v62)
            CFRelease(v62);
          CFRelease((CFTypeRef)refcon.value);
        }
      }
      goto LABEL_56;
    }
    if (!*(_QWORD *)(DerivedStorage + 1704))
      goto LABEL_56;
    v110.length = CFArrayGetCount(a4);
    v110.location = 0;
    if (!CFArrayContainsValue(a4, v110, *(const void **)(DerivedStorage + 1704)))
      goto LABEL_102;
    v52 = *(const void **)(DerivedStorage + 1704);
    if (!*(_BYTE *)(DerivedStorage + 556))
    {
      ValueAtIndex = *(const void **)(DerivedStorage + 1704);
      goto LABEL_104;
    }
    v53 = *(const __CFNumber **)(DerivedStorage + 1736);
    if (v53)
    {
      CFNumberGetValue(v53, kCFNumberSInt32Type, &valuePtr);
    }
    else
    {
      AverageBitRate = FigAlternateGetAverageBitRate(*(_QWORD *)(DerivedStorage + 1704));
      if (!AverageBitRate)
        AverageBitRate = FigAlternateGetPeakBitRate((uint64_t)v52);
      valuePtr = AverageBitRate;
    }
    v64 = *(const __CFArray **)(DerivedStorage + 1680);
    if (v64 && CFArrayGetCount(v64) >= 1)
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1680), 0);
    else
LABEL_102:
      ValueAtIndex = 0;
    v52 = *(const void **)(DerivedStorage + 1704);
LABEL_104:
    if (v52)
    {
      CFRelease(v52);
      *(_QWORD *)(DerivedStorage + 1704) = 0;
    }
    v65 = *(const void **)(DerivedStorage + 1736);
    if (v65)
    {
      CFRelease(v65);
      *(_QWORD *)(DerivedStorage + 1736) = 0;
    }
    if (ValueAtIndex)
    {
LABEL_109:
      if (*(_QWORD *)(DerivedStorage + 928))
      {
        if (a3 != a2)
        {
          v66 = *(const void **)DerivedStorage;
          refcon = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          lhs = refcon;
          fpfs_setRateInternal(v66, a1, &refcon, &lhs, 0.0);
        }
        if (a3 && !v34)
        {
          if ((*(_BYTE *)(DerivedStorage + 1500) & 1) != 0)
          {
            v84 = a2;
            v67 = (_OWORD *)(DerivedStorage + 1488);
            if (dword_1EE2A2A88)
            {
              LODWORD(theDict.value) = 0;
              LOBYTE(type.value) = 0;
              v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v69 = theDict.value;
              if (os_log_type_enabled(v68, type.value))
                v70 = v69;
              else
                v70 = v69 & 0xFFFFFFFE;
              if (v70)
              {
                v83 = a3;
                if (v85)
                  v71 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v71 = "";
                v74 = v34;
                if (a1)
                  v75 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                else
                  v75 = "";
                *(_OWORD *)&refcon.value = *v67;
                refcon.epoch = *(_QWORD *)(DerivedStorage + 1504);
                Seconds = CMTimeGetSeconds(&refcon);
                LODWORD(lhs.value) = 136316418;
                *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfsi_handleIFrameOnlyRateTransition";
                LOWORD(lhs.flags) = 2048;
                *(_QWORD *)((char *)&lhs.flags + 2) = v85;
                HIWORD(lhs.epoch) = 2082;
                v94 = v71;
                v95 = 2048;
                v96 = a1;
                v97 = 2082;
                v98 = v75;
                v99 = 2048;
                v100 = Seconds;
                _os_log_send_and_compose_impl();
                v34 = v74;
                a3 = v83;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_OWORD *)&refcon.value = *v67;
            refcon.epoch = *(_QWORD *)(DerivedStorage + 1504);
            fpfs_SetTime((uint64_t)a1, &refcon);
            v77 = MEMORY[0x1E0CA2E18];
            *v67 = *MEMORY[0x1E0CA2E18];
            *(_QWORD *)(DerivedStorage + 1504) = *(_QWORD *)(v77 + 16);
            a2 = v84;
            if (!*(_DWORD *)(DerivedStorage + 2192))
              fpfsi_setLastSeekTimeSet(DerivedStorage, MEMORY[0x1E0CA2E18]);
          }
          v78 = *(const void **)(DerivedStorage + 1592);
          if (v78)
          {
            CFRelease(v78);
            *(_QWORD *)(DerivedStorage + 1592) = 0;
          }
          v79 = *(_DWORD *)(DerivedStorage + 2196);
          if (v79)
            fpfs_SeekDidFail(v85, a1, v79, 0);
        }
        *(CFAbsoluteTime *)(DerivedStorage + 1536) = CFAbsoluteTimeGetCurrent();
        fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v87);
        refcon = *(CMTime *)(DerivedStorage + 1176);
        CMTimeAdd(&v88, &v87, &refcon);
        if (a3)
          v80 = a2 == 0;
        else
          v80 = 0;
        if (v80)
          v81 = 8;
        else
          v81 = 0;
        *(CFAbsoluteTime *)(DerivedStorage + 2128) = CFAbsoluteTimeGetCurrent();
        *(_OWORD *)(DerivedStorage + 2136) = 0u;
        *(_OWORD *)(DerivedStorage + 2152) = 0u;
        *(_OWORD *)(DerivedStorage + 2168) = 0u;
        *(_QWORD *)(DerivedStorage + 2184) = 0;
        v82 = *(_QWORD *)DerivedStorage;
        refcon = v88;
        lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v72 = fpfs_SetAlternateWithContext(v82, a1, ValueAtIndex, 1u, &refcon, (uint64_t)&lhs, 0, 0, 0, v81);
        goto LABEL_123;
      }
LABEL_122:
      v72 = FigSignalErrorAt();
LABEL_123:
      v25 = v72;
      if (!(v34 | a3 | v72))
      {
        refcon = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        fpfs_PrepareForSeek(a1, 255, 1);
        fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&refcon);
        CMTimeMake(&v86, 1, 100000);
        lhs = refcon;
        CMTimeAdd(&refcon, &lhs, &v86);
        lhs = refcon;
        theDict = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
        type = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
        return fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &lhs, 5, &theDict, &type, 0, 0, 0, 65537, 0, 0);
      }
      return v25;
    }
LABEL_56:
    v40 = *(float *)(v13 + 108);
    v41 = fabsf(v40);
    v42 = *(_QWORD *)(DerivedStorage + 1696);
    if (v42)
    {
      valuePtr = FigAlternateGetPeakBitRate(v42);
      if (FigAlternateIsIFrameOnly(*(_QWORD *)(DerivedStorage + 1696)))
      {
        v43 = fabsf(a6);
        if (a6 == 0.0)
          v43 = 2.0;
        valuePtr = (int)(float)(v43 * (float)valuePtr);
      }
    }
    v44 = 1.0;
    if (a3)
      v44 = 2.0;
    if (v40 == 0.0)
      v45 = v44;
    else
      v45 = v41;
    if (!a4)
      goto LABEL_122;
    Count = CFArrayGetCount(a4);
    if (Count < 1)
      goto LABEL_122;
    v47 = Count;
    v48 = 0;
    ValueAtIndex = 0;
    do
    {
      v50 = CFArrayGetValueAtIndex(a4, v48);
      PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v50);
      if (!ValueAtIndex || (float)(v45 * (float)PeakBitRate) <= (float)valuePtr)
        ValueAtIndex = v50;
      ++v48;
    }
    while (v47 != v48);
    if (!ValueAtIndex)
      goto LABEL_122;
    goto LABEL_109;
  }
  theDict.value = 0;
  v19 = FigGetAllocatorForMedia();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v18);
  v21 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v21)
    goto LABEL_19;
  v22 = v21(FigBaseObject, CFSTR("VideoQualityOfServiceTier"), v19, &theDict);
  v23 = (const void *)theDict.value;
  if (v22)
    v24 = 1;
  else
    v24 = theDict.value == 0;
  if (v24)
  {
    v25 = 0;
    goto LABEL_21;
  }
  CFDictionaryGetValue((CFDictionaryRef)theDict.value, (const void *)*MEMORY[0x1E0CED358]);
  v26 = FigCFEqual();
  if (v26 || FigCFEqual())
  {
    v27 = *(_QWORD *)DerivedStorage;
    refcon = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    lhs = refcon;
    fpfs_setRateInternal(v27, a1, &refcon, &lhs, 0.0);
    v25 = fpfsi_SeekToCurrentTime(a1);
  }
  else
  {
LABEL_19:
    v25 = 0;
  }
  v23 = (const void *)theDict.value;
LABEL_21:
  if (v23)
    CFRelease(v23);
  if (!(_DWORD)v25)
    goto LABEL_24;
  return v25;
}

uint64_t fpfsi_EnterIFrameModeForSeekWithNonzeroToleranceIfPossible(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t AllocatorForMedia;
  const void *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  CFArrayRef theArray;
  CMTime time2;
  CMTime time1;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  v5 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v5 + 40))
    return 0;
  if (!*(_BYTE *)(v5 + 48)
    || !*(_BYTE *)(v5 + 49)
    || *(float *)(DerivedStorage + 108) != 0.0
    || (*(_BYTE *)(v4 + 332) & 1) == 0
    || (*(_DWORD *)(v4 + 356) & 0x1D) != 1 && (*(_DWORD *)(v4 + 380) & 0x1D) != 1)
  {
    goto LABEL_21;
  }
  time1 = *(CMTime *)(v4 + 344);
  time2 = *(CMTime *)(v4 + 368);
  if (!CMTimeCompare(&time1, &time2) || (*(_BYTE *)(v4 + 1500) & 1) != 0)
    goto LABEL_21;
  v6 = fpfsi_CreateAndAddScanningModeFilterToBoss(a2, 1u);
  if (*(_BYTE *)(v4 + 2872))
    v6 = FigAlternateSelectionBossSetProperty(*(const void **)(v4 + 40), (uint64_t)CFSTR("Paused"), (const void *)*MEMORY[0x1E0C9AE40]);
  if (v6)
    goto LABEL_21;
  if (FigAlternateSelectionBossApplyFilters(*(const void **)(v4 + 40)))
    goto LABEL_21;
  v7 = *(_QWORD *)(v4 + 40);
  AllocatorForMedia = FigGetAllocatorForMedia();
  if (FigAlternateSelectionBossCopyProperty(v7, CFSTR("FilteredAlternateList"), AllocatorForMedia, &theArray))goto LABEL_21;
  if (!theArray)
    return 0;
  if (CFArrayGetCount(theArray) < 1
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0),
        !FigAlternateIsIFrameOnly((uint64_t)ValueAtIndex))
    || fpfsi_UpdateValidAlternateListAndSuggestAnAlternate(a2, theArray, 0))
  {
LABEL_21:
    v12 = 0;
    goto LABEL_22;
  }
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    v12 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v12 = 1;
  }
LABEL_22:
  if (theArray)
    CFRelease(theArray);
  return v12;
}

uint64_t fpfsi_TryToSeekWithinBuffer(const void *a1, CMTime *a2, uint64_t a3, int a4)
{
  uint64_t DerivedStorage;
  void *v7;
  uint64_t v8;
  uint64_t result;
  float v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _OWORD *v35;
  int v36;
  int restarted;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  BOOL v48;
  void *v50;
  __int128 v51;
  CMTime type;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CMTime time2;
  CMTime time1;
  _QWORD v58[5];

  v58[2] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(void **)DerivedStorage;
  v8 = CMBaseObjectGetDerivedStorage();
  memset(&v55, 0, sizeof(v55));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v55);
  time1 = *a2;
  result = fpfsi_TimeInTotalTimeRangeInBuffer((uint64_t)a1, &time1);
  if (!(_DWORD)result)
    return result;
  if (fpfs_LastRenderingTrackofType((uint64_t)a1, 1986618469, 0))
  {
    result = 0;
    v10 = *(float *)(v8 + 108);
    if (v10 > 2.0 || v10 < 0.0)
      return result;
  }
  v50 = v7;
  *(_OWORD *)&type.value = *(_OWORD *)&a2->value;
  type.epoch = a2->epoch;
  *(_OWORD *)&v53.value = *(_OWORD *)&a2->value;
  v53.epoch = type.epoch;
  v11 = CMBaseObjectGetDerivedStorage();
  v58[0] = v11 + 1056;
  v58[1] = v11 + 1040;
  if (*(float *)(v11 + 840) >= 0.0)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = *(_QWORD *)v58[v12];
      if (v14)
      {
        while (1)
        {
          if (!*(_BYTE *)(v14 + 184) && (*(_BYTE *)(v14 + 228) & 1) != 0 && (*(_BYTE *)(v14 + 252) & 1) != 0)
          {
            time1 = *(CMTime *)(v14 + 216);
            time2 = type;
            if (CMTimeCompare(&time1, &time2) < 0)
            {
              time1 = type;
              time2 = *(CMTime *)(v14 + 240);
              if (CMTimeCompare(&time1, &time2) < 0)
                break;
            }
          }
          v14 = *(_QWORD *)(v14 + 8);
          if (!v14)
            goto LABEL_14;
        }
        *(_OWORD *)&v53.value = *(_OWORD *)(v14 + 240);
        v53.epoch = *(_QWORD *)(v14 + 256);
      }
LABEL_14:
      time1 = type;
      time2 = v53;
      v15 = v13 & (CMTimeCompare(&time1, &time2) == 0);
      v12 = 1;
      v13 = 0;
    }
    while ((v15 & 1) != 0);
  }
  *(_OWORD *)&a2->value = *(_OWORD *)&v53.value;
  a2->epoch = v53.epoch;
  CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(DerivedStorage + 2284))
    *(_DWORD *)(DerivedStorage + 2284) = 12;
  v16 = CMBaseObjectGetDerivedStorage();
  fpfs_ClearRenderChains(a1, 255);
  *(_QWORD *)(v16 + 772) = 0;
  fpfs_PrepareForSeek(a1, 255, 0);
  *(_BYTE *)(DerivedStorage + 528) = 1;
  v17 = v7;
  if (*(const void **)(v8 + 80) == a1)
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
    {
      v25 = *(_QWORD *)(v8 + 504);
      v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v26)
        v26(v25, 1);
    }
  }
  time1 = *a2;
  fpfsi_setLastSeekTimeSet(DerivedStorage, (uint64_t)&time1);
  v18 = *(_OWORD *)&a2->value;
  *(_QWORD *)(DerivedStorage + 1504) = a2->epoch;
  *(_OWORD *)(DerivedStorage + 1488) = v18;
  fpfs_GetTime(DerivedStorage, (uint64_t)&time1);
  v55 = time1;
  v19 = *(_QWORD *)(DerivedStorage + 1040);
  if (v19)
  {
    v20 = (__int128 *)MEMORY[0x1E0CA2E18];
    do
    {
      v21 = *(_QWORD *)(v19 + 8);
      fpfsi_MoveTrackToPlayedOut(DerivedStorage, v19, v20);
      if (!v21)
        break;
      v19 = v21;
    }
    while (*(_QWORD *)(DerivedStorage + 1040));
  }
  v22 = MEMORY[0x1E0CA2E18];
  v51 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 3020) = *MEMORY[0x1E0CA2E18];
  v23 = *(_QWORD *)(v22 + 16);
  *(_QWORD *)(DerivedStorage + 3036) = v23;
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  for (i = 0; i != 24; i += 8)
  {
    v28 = DerivedStorage + i;
    *(_QWORD *)(v28 + 1120) = 0;
    *(_QWORD *)(v28 + 1144) = 0;
  }
  time1 = v55;
  time2 = *a2;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    time1 = *a2;
    fpfs_JumpToTime((uint64_t)a1, &time1);
  }
  *(_OWORD *)&v54.value = *(_OWORD *)&a2->value;
  v54.epoch = a2->epoch;
  v29 = CMBaseObjectGetDerivedStorage();
  v30 = *(_QWORD *)(v29 + 1056);
  if (v30)
  {
    v31 = v29;
    do
    {
      if (*(_DWORD *)(v30 + 152) != 1)
      {
        time1 = *(CMTime *)(v30 + 216);
        time2 = v54;
        if (CMTimeCompare(&time1, &time2) > 0 || !*(_BYTE *)(v30 + 182))
        {
          *(_OWORD *)(v30 + 192) = v51;
          *(_QWORD *)(v30 + 208) = v23;
        }
      }
      v30 = *(_QWORD *)(v30 + 8);
    }
    while (v30);
    v32 = *(_QWORD *)(v31 + 1056);
    if (v32)
    {
      v33 = 0;
      while (1)
      {
        v34 = *(_QWORD *)(v32 + 8);
        time1 = *(CMTime *)(v32 + 216);
        time2 = v54;
        if (CMTimeCompare(&time1, &time2) > 0 || !*(_BYTE *)(v32 + 182))
        {
          v35 = (_OWORD *)(v32 + 192);
          if ((*(_BYTE *)(v32 + 204) & 1) == 0)
          {
            *v35 = *(_OWORD *)&v54.value;
            *(_QWORD *)(v32 + 208) = v54.epoch;
          }
          fpfs_ResurrectPlayedOutTrack(v32);
          v36 = *(_DWORD *)(v32 + 152);
          if (v36 == 1)
          {
            if (*(_DWORD *)(v32 + 32) == 1986618469 && fpfs_CheckVideoSyncQueue(v32, 0))
            {
              v39 = fpfs_FinishVideoSync((const __CFArray **)v32);
LABEL_67:
              if (v39)
                v42 = v33 == 0;
              else
                v42 = 0;
              if (v42)
                v33 = v39;
            }
          }
          else if (v36 == 6)
          {
            if (*(_DWORD *)(v32 + 32) == 1986618469)
              fpfs_UpdateDimensions(a1, 1);
            *(_OWORD *)&time1.value = *v35;
            time1.epoch = *(_QWORD *)(v32 + 208);
            restarted = fpfsi_RestartResurrectedTrack(v32, &time1, 1);
            if (!restarted && v34)
            {
              v38 = v34;
              while (*(_DWORD *)(v38 + 152) == 1 || !fpfsi_canTracksBeSyncPairsIgnoringDiscontinuity(v38, v32))
              {
                v38 = *(_QWORD *)(v38 + 8);
                if (!v38)
                  goto LABEL_64;
              }
              v40 = v32 + 240;
              if ((*(_DWORD *)(v32 + 252) & 1) == 0)
                v40 = v32 + 216;
              v41 = *(_OWORD *)v40;
              *(_QWORD *)(v38 + 208) = *(_QWORD *)(v40 + 16);
              *(_OWORD *)(v38 + 192) = v41;
            }
LABEL_64:
            if (restarted == -16042)
              v39 = 0;
            else
              v39 = restarted;
            goto LABEL_67;
          }
        }
        if (v34)
        {
          v32 = v34;
          if (*(_QWORD *)(v31 + 1056))
            continue;
        }
        v17 = v50;
        if (!v33)
          break;
        return 0;
      }
    }
  }
  v43 = *(_QWORD *)(DerivedStorage + 1040);
  if (v43)
  {
    v44 = 0;
    v45 = 0;
    do
    {
      if (*(_DWORD *)(v43 + 152) == 6)
      {
        v46 = *(_DWORD *)(v43 + 32);
        if (v45)
          v47 = 0;
        else
          v47 = v46 == 1936684398;
        if (v47)
          v45 = v43;
        if (v44)
          v48 = 0;
        else
          v48 = v46 == 1986618469;
        if (v48)
          v44 = v43;
      }
      v43 = *(_QWORD *)(v43 + 8);
    }
    while (v43);
  }
  else
  {
    v45 = 0;
    v44 = 0;
  }
  fpfs_PostHasEnabledTrackTypeNotification(*(const void **)DerivedStorage, a1);
  if (!(v45 | v44) || fpfs_setTimebaseStarter((uint64_t)a1, v45, v44))
    return 0;
  if (a4)
  {
    time1 = *(CMTime *)(DerivedStorage + 1464);
    if (fpfsi_PlaybackHasBufferedBeyondTime((uint64_t)a1, (uint64_t)&time1))
      fpfs_SignalImageQueueGaugeEnqueueingCompleteAfterClampTime();
  }
  if (!v44 || !*(_BYTE *)(v44 + 104) || (time1 = v55, time2 = *a2, CMTimeCompare(&time1, &time2) >= 1))
  {
    time1 = *a2;
    fpfs_JumpToTime((uint64_t)a1, &time1);
  }
  fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(a1);
  fpfs_AssessItemTransition(v17);
  return 1;
}

void fpfs_setRanDry(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)DerivedStorage;
  *(_DWORD *)(DerivedStorage + 1880) = 0;
  fpfs_EnqueueNotification(v3, CFSTR("StreamRanDry"), a1, 0);
}

void sub_192A0130C()
{
  uint64_t v0;
  uint64_t v1;
  CMTime v2[2];

  fpfs_GetNextTimeToPlay(v1, 0, (uint64_t)v2);
  fpfsi_PrepareToStartWhenLikelyToKeepUp(v0, v2);
}

void fpfs_EnqueuePlaythroughPredictionNotification(const void *a1)
{
  uint64_t DerivedStorage;
  __CFString **v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 524) == 1)
    v3 = kFigPlaybackItemNotification_StreamLikelyToKeepUp;
  else
    v3 = kFigPlaybackItemNotification_StreamUnlikelyToKeepUp;
  fpfs_EnqueueNotification(*(const void **)DerivedStorage, *v3, a1, 0);
}

void fpfsi_setPlaybackRateMonitorPendingSeekTime(uint64_t a1, CMTime *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v5;
  CFDictionaryRef v6;
  uint64_t v7;
  void (*v8)(uint64_t, const __CFString *, CFDictionaryRef);
  CMTime v9;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v9 = *a2;
  v5 = CMTimeCopyAsDictionary(&v9, AllocatorForMedia);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 96);
    if (v7)
    {
      v8 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
      if (v8)
        v8(v7, CFSTR("AfmfpbProperty_PendingSeekTime"), v6);
    }
    CFRelease(v6);
  }
  else
  {
    FigSignalErrorAt();
  }
}

double fpfsi_updateMaxPlayThroughTime()
{
  uint64_t DerivedStorage;
  double result;
  OpaqueCMTimebase *v2;
  CMTime *v3;
  CMTime v4;
  CMTime time2;
  CMTime v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
  if (v2)
  {
    LODWORD(result) = *(_DWORD *)(DerivedStorage + 840);
    if (*(float *)&result <= 2.0 && *(float *)&result >= 0.0)
    {
      v3 = (CMTime *)(DerivedStorage + 3240);
      if ((*(_BYTE *)(DerivedStorage + 3252) & 1) != 0)
      {
        CMTimebaseGetTime(&time2, v2);
        v4 = *v3;
        CMTimeMaximum(&v6, &v4, &time2);
      }
      else
      {
        CMTimebaseGetTime(&v6, v2);
      }
      result = *(double *)&v6.value;
      *v3 = v6;
    }
  }
  return result;
}

uint64_t fpfsi_TimeInTrackListNonSparseCachedSamples(uint64_t *a1, CMTime *a2, _BYTE *a3)
{
  uint64_t v4;
  char v6;
  opaqueCMBufferQueue *v7;
  uint64_t result;
  CMTime v9;
  CMTime time1;
  opaqueCMSampleBuffer *v11;
  CMTime time2;

  v4 = *a1;
  if (*a1)
  {
    v6 = 0;
    while (1)
    {
      if (!*(_BYTE *)(v4 + 184))
      {
        v7 = *(opaqueCMBufferQueue **)(v4 + 80);
        if (v7)
        {
          if (!CMBufferQueueIsEmpty(v7))
          {
            time1 = *a2;
            time2 = *(CMTime *)(v4 + 216);
            if (CMTimeCompare(&time1, &time2) < 0)
            {
              time1 = *a2;
              v11 = 0;
              CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v4 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfsi_GetSampleRightBeforeTime, &time1);
              if (v11)
              {
                fpfs_GetEndOutputPresentationTimeStamp(v11, &v9);
                time2 = *a2;
                if (CMTimeCompare(&v9, &time2) > 0)
                {
                  result = 1;
                  v6 = 1;
                  if (a3)
                    goto LABEL_15;
                  return result;
                }
              }
            }
            v6 = 1;
          }
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
      {
        result = 0;
        if (a3)
          goto LABEL_15;
        return result;
      }
    }
  }
  result = 0;
  v6 = 0;
  if (a3)
LABEL_15:
    *a3 = v6 & 1;
  return result;
}

uint64_t fpfsi_GetSampleRightBeforeTime(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  opaqueCMSampleBuffer *value;
  uint64_t result;
  CMTime v6;
  CMTime time1;
  CMTime v8;
  CMTime v9;
  CMTime v10;

  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetOutputPresentationTimeStamp(&v10, a1);
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputDecodeTimeStamp(&v9, a1);
  memset(&v8, 0, sizeof(v8));
  value = (opaqueCMSampleBuffer *)a2[1].value;
  if (value)
    CMSampleBufferGetOutputPresentationTimeStamp(&v8, value);
  else
    v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  if ((v10.flags & 1) == 0 && (v9.flags & 1) == 0)
    return 0;
  time1 = v10;
  v6 = *a2;
  if (CMTimeCompare(&time1, &v6) >= 1)
  {
    time1 = v9;
    v6 = *a2;
    if (CMTimeCompare(&time1, &v6) > 0)
      return 4294954433;
  }
  time1 = v10;
  v6 = v8;
  if (CMTimeCompare(&time1, &v6) < 1)
    return 0;
  time1 = v10;
  v6 = *a2;
  if (CMTimeCompare(&time1, &v6) > 0)
    return 0;
  result = 0;
  a2[1].value = (CMTimeValue)a1;
  return result;
}

uint64_t fpfsi_HandleNextBestEffortTrickplayModeSeek()
{
  uint64_t DerivedStorage;
  const __CFArray *Next;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CMTimeFlags *v8;
  CMTimeEpoch *v9;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  double Seconds;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  int64_t v17;
  dispatch_time_t v18;
  double Rate;
  uint64_t v20;
  uint64_t v21;
  uint64_t *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  double v28;
  Float64 v29;
  int v30;
  uint64_t v31;
  CMTime v33;
  CMTime v34;
  CMTimeRange v35;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v39;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(DerivedStorage, 0);
  if (!Next)
    return 0;
  v2 = (uint64_t)Next;
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = v3;
  memset(&v33, 0, sizeof(v33));
  if (!v3)
    return v4;
  if (!*(_QWORD *)(v3 + 2960))
    return 0;
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = v5;
  v39.value = *MEMORY[0x1E0CA2E18];
  v39.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v7 = **(_QWORD **)(*(_QWORD *)(v5 + 2888) + 8);
  if (v7)
  {
    v39.value = *(_QWORD *)(v7 + 32);
    v39.timescale = *(_DWORD *)(v7 + 40);
    v8 = (CMTimeFlags *)(v7 + 44);
    v9 = (CMTimeEpoch *)(v7 + 48);
  }
  else
  {
    v9 = (CMTimeEpoch *)(MEMORY[0x1E0CA2E18] + 16);
    v8 = (CMTimeFlags *)(MEMORY[0x1E0CA2E18] + 12);
  }
  v10 = *v8;
  if ((*v8 & 0x1D) == 1)
  {
    v11 = *v9;
    memset(&v35, 0, 24);
    CMTimebaseGetTime(&v35.start, *(CMTimebaseRef *)(v5 + 2960));
    lhs = v35.start;
    rhs.value = v39.value;
    rhs.timescale = v39.timescale;
    rhs.flags = v10;
    rhs.epoch = v11;
    CMTimeSubtract(&time, &lhs, &rhs);
    Seconds = CMTimeGetSeconds(&time);
    v13 = Seconds / CMTimebaseGetRate(*(CMTimebaseRef *)(v6 + 2960));
    v14 = (0.2 - v13) * 1000000000.0;
    v15 = v13 <= 0.0;
    v16 = 200000000.0;
    if (!v15)
      v16 = v14;
    v17 = (uint64_t)v16;
    if ((uint64_t)v16 >= 1)
    {
      FigRetainProxyRetain();
      v18 = dispatch_time(0, v17);
      dispatch_after_f(v18, *(dispatch_queue_t *)(v4 + 600), *(void **)(v4 + 16), (dispatch_function_t)fpfsi_HandleNextBestEffortTrickplayModeSeekDispatch);
      return 0;
    }
  }
  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v4 + 2960));
  v20 = CMBaseObjectGetDerivedStorage();
  memset(&time, 0, sizeof(time));
  CMTimebaseGetTime(&lhs, *(CMTimebaseRef *)(v20 + 2960));
  v21 = CMBaseObjectGetDerivedStorage();
  for (i = *(uint64_t **)(v21 + 2880); i; i = *(uint64_t **)(v21 + 2880))
  {
    if (FigGetUpTimeNanoseconds() - (i[2] + i[3]) < 3000000001)
      break;
    fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(v21, i);
  }
  v23 = **(_QWORD **)(*(_QWORD *)(v21 + 2888) + 8);
  if (v23)
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v25 += *(_QWORD *)(v23 + 24);
      v26 = v24 + 1;
      v23 = **(_QWORD **)(*(_QWORD *)(v23 + 8) + 8);
      if (v23)
        v27 = v24 == 0x7FFFFFFFFFFFFFFELL;
      else
        v27 = 1;
      ++v24;
    }
    while (!v27);
    v28 = (double)(v25 / v26);
  }
  else
  {
    v28 = 0.0;
  }
  v29 = CMTimebaseGetRate(*(CMTimebaseRef *)(v20 + 2960));
  CMTimeMake(&rhs, (uint64_t)(v28 * v29), 1000000000);
  v35.start = lhs;
  CMTimeAdd(&time, &v35.start, &rhs);
  fpfsi_getSeekableTimeRange(v2, &v35);
  value = v35.start.value;
  timescale = v35.start.timescale;
  if ((v35.start.flags & 1) != 0
    && (v35.duration.flags & 1) != 0
    && !v35.duration.epoch
    && (v35.duration.value & 0x8000000000000000) == 0)
  {
    v34 = time;
    v35.start.value = value;
    v35.start.timescale = timescale;
    v35.duration.epoch = 0;
    CMTimeClampToRange(&v39, &v34, &v35);
    time = v39;
    v33 = v39;
    goto LABEL_31;
  }
  v30 = FigSignalErrorAt();
  if (!(_WORD)v30)
  {
LABEL_31:
    *(_QWORD *)(v4 + 2912) = FigGetUpTimeNanoseconds();
    *(CMTime *)(v4 + 2928) = v33;
    if (Rate >= 0.0)
      v31 = 0;
    else
      v31 = 5;
    v35.start = v33;
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
    lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
    v30 = fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(v2, &v35, v31, &time, &lhs, 0, 0, 0, 16843009, 0, 0);
  }
  if (!(v30 << 16))
    return 0;
  v4 = (__int16)v30;
  fpfs_haltStream();
  return v4;
}

void fpfsi_EndBestEffortSeekTrickplayMode(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = *(const void **)(a1 + 2960);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 2960) = 0;
  }
  *(_QWORD *)(a1 + 2920) = 0;
  *(_QWORD *)(a1 + 2912) = 0;
  v3 = MEMORY[0x1E0CA2E18];
  fpfsi_setLastSeekTimeSet(a1, MEMORY[0x1E0CA2E18]);
  *(_OWORD *)(a1 + 1488) = *(_OWORD *)v3;
  *(_QWORD *)(a1 + 1504) = *(_QWORD *)(v3 + 16);
  while (1)
  {
    v4 = *(uint64_t **)(a1 + 2880);
    if (!v4)
      break;
    fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(a1, v4);
  }
}

uint64_t fpfsi_HandleNextBestEffortTrickplayModeSeekDispatch(uint64_t a1)
{
  int v1;
  CFTypeRef v2;
  CFTypeRef v4;
  CFTypeRef cf;

  v4 = 0;
  cf = 0;
  v1 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &cf, &v4);
  v2 = cf;
  if (!v1)
  {
    fpfsi_HandleNextBestEffortTrickplayModeSeek(cf);
    fpfs_UnlockAndPostNotificationsWithCaller(v2);
  }
  if (cf)
    CFRelease(cf);
  if (v4)
    CFRelease(v4);
  return FigRetainProxyRelease();
}

void fpfs_haltStream()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, __CFString *, _QWORD);
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const void *v26;
  const __CFArray *v27;
  NSObject *v28;
  const void *v29;
  CFTypeRef cf[27];

  cf[25] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    LODWORD(cf[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfsi_InvalidatePumpForItem();
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 1624));
  v2 = MEMORY[0x1E0CA2E18];
  v3 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 1632) = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(DerivedStorage + 1648) = v4;
  *(_OWORD *)(DerivedStorage + 1656) = v3;
  *(_QWORD *)(DerivedStorage + 1672) = v4;
  v5 = *(const void **)(DerivedStorage + 3096);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 3096) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 3232);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 3232) = 0;
  }
  v7 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v7 + 40))
  {
    v8 = v7;
    v9 = *(_QWORD *)(v7 + 928);
    if (v9)
    {
      FigBytePumpGetFigBaseObject(v9);
      v11 = v10;
      v12 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v12)
        v12(v11, CFSTR("FBP_AlternateSelectionBoss"), 0);
    }
    v13 = *(const void **)(v8 + 56);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v8 + 56) = 0;
    }
    v14 = *(const void **)(v8 + 80);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v8 + 80) = 0;
    }
    v15 = *(const void **)(v8 + 88);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v8 + 88) = 0;
    }
    v16 = *(const void **)(v8 + 64);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(v8 + 64) = 0;
    }
    v17 = *(const void **)(v8 + 72);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(v8 + 72) = 0;
    }
    v18 = *(const void **)(v8 + 104);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(v8 + 104) = 0;
    }
    v19 = *(const void **)(v8 + 112);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(v8 + 112) = 0;
    }
    v20 = *(const void **)(v8 + 120);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(v8 + 120) = 0;
    }
    fpfsi_StopGearSwitchReleaseAndCleanPlaybackMonitor(v8);
    if (*(_QWORD *)(v8 + 128))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v21 = *(const void **)(v8 + 128);
      if (v21)
      {
        CFRelease(v21);
        *(_QWORD *)(v8 + 128) = 0;
      }
    }
    v22 = *(const void **)(v8 + 40);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(v8 + 40) = 0;
    }
    *(_WORD *)(v8 + 48) = 0;
  }
  fpfsi_cleanupNetworkCostMonitor();
  v23 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v23 + 736))
  {
    v24 = v23;
    if (dword_1EE2A2A88)
    {
      LODWORD(cf[0]) = 0;
      v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v26 = *(const void **)(v24 + 736);
    if (v26)
    {
      CFRelease(v26);
      *(_QWORD *)(v24 + 736) = 0;
    }
  }
  if (*(_BYTE *)(DerivedStorage + 25))
  {
    v27 = *(const __CFArray **)(DerivedStorage + 1912);
    if (v27)
    {
      cf[0] = 0;
      if (!FigPlaybackItemLogCreateW3CLogData(v27, (__CFString **)cf))
      {
        if (dword_1EE2A2A88)
        {
          v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (cf[0])
          CFRelease(cf[0]);
      }
    }
  }
  if (*(_BYTE *)(DerivedStorage + 2865))
  {
    FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(DerivedStorage + 32));
    *(_BYTE *)(DerivedStorage + 2865) = 0;
  }
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v29 = *(const void **)(DerivedStorage + 2528);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(DerivedStorage + 2528) = 0;
  }
}

void fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  v3 = (_QWORD *)a2[1];
  if (*a2)
  {
    *(_QWORD *)(v2 + 8) = v3;
    v3 = (_QWORD *)a2[1];
  }
  else
  {
    *(_QWORD *)(a1 + 2888) = v3;
  }
  *v3 = v2;
  --*(_QWORD *)(a1 + 2952);
  free(a2);
}

void fpfsi_InvalidatePumpForItem()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t AllocatorForMedia;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 456) = 2 * (*(_DWORD *)(DerivedStorage + 456) == 1);
  if (!*(_QWORD *)(DerivedStorage + 928))
    return;
  v1 = DerivedStorage;
  cf = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  FigStopForwardingMediaServicesProcessDeathNotification();
  v2 = *(_QWORD *)(v1 + 928);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBytePumpGetFigBaseObject(v2);
  v5 = v4;
  v6 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (v6)
  {
    v6(v5, CFSTR("FBP_ErrorLog"), AllocatorForMedia, &cf);
    v7 = cf;
    v8 = *(const void **)(v1 + 1912);
    *(_QWORD *)(v1 + 1912) = cf;
    if (v7)
      CFRetain(v7);
    if (!v8)
      goto LABEL_7;
  }
  else
  {
    v8 = *(const void **)(v1 + 1912);
    *(_QWORD *)(v1 + 1912) = 0;
    if (!v8)
      goto LABEL_7;
  }
  CFRelease(v8);
LABEL_7:
  if (cf)
    CFRelease(cf);
  fpfsi_RTCReportingReportIRATEventIfNeeded(v1, 801);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(v1 + 928));
  if (v9)
  {
    v10 = v9;
    v11 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v11)
      v11(v10);
  }
  FigBytePumpRelease(*(CFTypeRef *)(v1 + 928));
  *(_QWORD *)(v1 + 928) = 0;
}

void fpfsi_DeferredHandleVenueDescriptionMetadataProcessingStatusNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  CFTypeRef v7;
  uint64_t DerivedStorage;
  CFTypeRef v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v11;
  CFTypeRef cf;
  CFTypeRef v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v13 = 0;
  v6 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v13, &cf);
  v7 = cf;
  if (!v6)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = v13;
    CMBaseObjectGetDerivedStorage();
    if (a5)
    {
      FigCFDictionaryGetInt32IfPresent();
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v11 = *(_QWORD *)DerivedStorage;
      v16 = *MEMORY[0x1E0CA2E18];
      v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v14 = v16;
      v15 = v17;
      fpfs_setRateInternal(v11, v7, &v16, &v14, 0.0);
      *(_BYTE *)(DerivedStorage + 464) = 0;
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v9);
  }
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
}

void fpfsi_DeferredHandleVenueDescriptionMetadataTransferringNotification(uint64_t a1, uint64_t a2)
{
  int v2;
  const __CFString *v3;
  CFTypeRef v4;
  CFTypeRef cf;
  CFTypeRef v6;

  cf = 0;
  v6 = 0;
  v2 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v6, &cf);
  v3 = (const __CFString *)cf;
  if (!v2)
  {
    CMBaseObjectGetDerivedStorage();
    v4 = v6;
    if (v3 == *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 80))
      fpfsi_scheduleFVTTransitionsForItem(v3, 0, 0);
    fpfs_UnlockAndPostNotificationsWithCaller(v4);
  }
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
}

uint64_t fpfs_SetTime(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t i;
  OpaqueCMTimebase *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueCMTimebase *v10;
  __int128 v11;
  uint64_t result;
  CMTime v13;
  CMTime time2;
  CMTime time1;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 1624));
  v4 = MEMORY[0x1E0CA2E18];
  v5 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 1632) = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(DerivedStorage + 1648) = v6;
  *(_OWORD *)(DerivedStorage + 1656) = v5;
  *(_QWORD *)(DerivedStorage + 1672) = v6;
  for (i = *(_QWORD *)(DerivedStorage + 1040); i; i = *(_QWORD *)(i + 8))
  {
    *(_OWORD *)(i + 156) = v5;
    *(_QWORD *)(i + 172) = v6;
  }
  v8 = *(OpaqueCMTimebase **)(DerivedStorage + 568);
  if (v8)
  {
    memset(&v13, 0, sizeof(v13));
    CMTimebaseGetTime(&v13, v8);
    time1 = v13;
    time2 = *a2;
    if (CMTimeCompare(&time1, &time2))
    {
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  v10 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
  time1 = *a2;
  CMTimebaseSetTime(v10, &time1);
  v11 = *(_OWORD *)&a2->value;
  *(_QWORD *)(DerivedStorage + 3284) = a2->epoch;
  *(_OWORD *)(DerivedStorage + 3268) = v11;
  result = FigGetUpTimeNanoseconds();
  *(_QWORD *)(DerivedStorage + 3296) = result;
  return result;
}

double fpfs_GetCurrentPTSAscending(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  double result;
  CMTime v5;
  CMTime time1;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetOutputPresentationTimeStamp(&v7, a1);
  if (!fpfs_IsMarkerOnly(a1))
  {
    time1 = v7;
    v5 = *a2;
    if (CMTimeCompare(&time1, &v5) < 0 || (time1 = v7, v5 = *a2, !CMTimeCompare(&time1, &v5)))
    {
      result = *(double *)&v7.value;
      a2[1] = v7;
    }
  }
  return result;
}

uint64_t fpfs_GetCurrentPTSDescending(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  __int128 v5;
  CMTimeEpoch epoch;
  CMTime v7;
  CMTime time1;
  CMTime v9;

  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputPresentationTimeStamp(&v9, a1);
  if (fpfs_IsMarkerOnly(a1))
    return 0;
  v5 = *(_OWORD *)&v9.value;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)&v9.value;
  epoch = v9.epoch;
  *(_QWORD *)(a2 + 40) = v9.epoch;
  *(_OWORD *)&time1.value = v5;
  time1.epoch = epoch;
  v7 = *(CMTime *)a2;
  if (CMTimeCompare(&time1, &v7) <= 0)
    return 4294954433;
  else
    return 0;
}

const void *fpfsi_MoveTrackToPlayedOut(uint64_t a1, uint64_t a2, __int128 *a3)
{
  const void *v6;
  const void *v7;
  uint64_t DerivedStorage;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  CMTime *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v28;
  NSObject *v29;
  OpaqueCMTimebase *v30;
  uint64_t v31;
  const __CFAllocator *AllocatorForMedia;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  opaqueCMBufferQueue *v34;
  CMItemCount BufferCount;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  NSObject *v40;
  unsigned int value;
  unsigned int v42;
  const void *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  Float64 Seconds;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  const void *v60;
  CMTime time2;
  os_log_type_t type[8];
  CMTime time1;
  const char *v64;
  __int16 v65;
  const void *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  Float64 v72;
  CMTime fireTime;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v6 = *(const void **)a2;
  v7 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = fpfs_shouldCheckAndReportVariantEnded(a2);
  fpfs_ReleaseTrackRenderChain(a2);
  if (*(_DWORD *)(a2 + 152) == 6)
  {
    v16 = *(_DWORD *)(a2 + 32);
    if (v16 == 1936684398)
    {
      fpfs_PrepareAndEnqueueSpatialAudioRenderingChangedNotification(*(const void **)a1, *(const void **)a2, v10, v11, v12, v13, v14, v15);
      v16 = *(_DWORD *)(a2 + 32);
    }
    if (v16 == 1986618469)
    {
      v17 = *(_QWORD *)(a2 + 8);
      if (v17)
      {
        v18 = (CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          if (*(_DWORD *)(v17 + 32) == 1986618469 && (*(_DWORD *)(v17 + 152) | 4) == 5 && !*(_QWORD *)(v17 + 264))
          {
            fpfs_GetTime(a1, (uint64_t)&fireTime);
            fpfs_PrimeVideoSyncTimer(v17, &fireTime, v18);
          }
          v17 = *(_QWORD *)(v17 + 8);
        }
        while (v17);
      }
    }
  }
  if (v9)
    fpfsi_RTCReportingReportCheckAndReportVariantEnded(a1, a2);
  v19 = *(_QWORD *)(a1 + 1040);
  if (v19 == a2)
  {
    v22 = a1 + 1040;
    v28 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 1040) = v28;
    if (!v28)
LABEL_17:
      *(_QWORD *)(a1 + 1048) = v22;
  }
  else
  {
    do
    {
      v20 = v19;
      v19 = *(_QWORD *)(v19 + 8);
    }
    while (v19 != a2);
    v21 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v20 + 8) = v21;
    v22 = v20 + 8;
    if (!v21)
      goto LABEL_17;
  }
  v23 = *(_DWORD *)(a2 + 152);
  v24 = v23 > 7;
  v25 = (1 << v23) & 0xB0;
  if (!v24 && v25 != 0)
  {
    if (dword_1EE2A2A88)
    {
      LODWORD(time2.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_ChangeTrackState(a2, 6u);
    fpfsi_RTCReportingUpdateAlternateIndex(a1, *(_QWORD *)(a2 + 432));
    fpfsi_RTCReportingUpdateVariantRank(a1, *(_DWORD *)(a2 + 448), *(_DWORD *)(a2 + 452));
  }
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(a1 + 576), (dispatch_object_t *)(a2 + 112));
  v29 = *(NSObject **)(a2 + 120);
  if (v29)
  {
    v30 = *(OpaqueCMTimebase **)(a1 + 576);
    fireTime = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
    CMTimebaseSetTimerDispatchSourceNextFireTime(v30, v29, &fireTime, 1u);
    v31 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a2 + 156) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a2 + 172) = *(_QWORD *)(v31 + 16);
  }
  *(_BYTE *)(a2 + 104) = 0;
  if ((*((_BYTE *)a3 + 12) & 1) != 0)
  {
    *(_QWORD *)type = 0;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    if (!CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)type))
    {
      fireTime.value = *(_QWORD *)type;
      *(_OWORD *)&fireTime.timescale = *a3;
      v74 = *((_QWORD *)a3 + 2);
      CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a2 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GrabBuffersBeforeTime, &fireTime);
      v34 = *(opaqueCMBufferQueue **)(a2 + 80);
      if (v34)
      {
        BufferCount = CMBufferQueueGetBufferCount(v34);
        v36 = *(_QWORD *)(a2 + 80);
        if (BufferCount < 1)
        {
          if (v36)
            CFRelease(*(CFTypeRef *)(a2 + 80));
        }
        else
        {
          fpfs_SendBufferQueueToChomper(DerivedStorage, v36);
        }
      }
      *(_QWORD *)(a2 + 80) = *(_QWORD *)type;
      time1 = *(CMTime *)(a2 + 216);
      time2 = *(CMTime *)a3;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        v37 = *a3;
        *(_QWORD *)(a2 + 232) = *((_QWORD *)a3 + 2);
        *(_OWORD *)(a2 + 216) = v37;
      }
      v38 = MEMORY[0x1E0CA2E40];
      v39 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
      *(_OWORD *)(a2 + 496) = *MEMORY[0x1E0CA2E40];
      *(_OWORD *)(a2 + 512) = v39;
      *(_OWORD *)(a2 + 528) = *(_OWORD *)(v38 + 32);
    }
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(time2.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = time2.value;
    if (os_log_type_enabled(v40, type[0]))
      v42 = value;
    else
      v42 = value & 0xFFFFFFFE;
    if (v42)
    {
      v43 = *(const void **)a1;
      if (*(_QWORD *)a1)
        v44 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v44 = "";
      v60 = v7;
      if (v6)
        v45 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v45 = "";
      v46 = *(_QWORD *)(a2 + 16);
      fireTime = *(CMTime *)(a2 + 216);
      Seconds = CMTimeGetSeconds(&fireTime);
      LODWORD(time1.value) = 136316674;
      *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"fpfsi_MoveTrackToPlayedOut";
      LOWORD(time1.flags) = 2048;
      *(_QWORD *)((char *)&time1.flags + 2) = v43;
      HIWORD(time1.epoch) = 2082;
      v64 = v44;
      v65 = 2048;
      v66 = v6;
      v67 = 2082;
      v68 = v45;
      v69 = 1024;
      v70 = v46;
      v71 = 2048;
      v72 = Seconds;
      _os_log_send_and_compose_impl();
      v7 = v60;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v48 = (uint64_t *)(a1 + 1056);
  v49 = *(_QWORD *)(a1 + 1056);
  if (v49)
  {
    v50 = *(_QWORD *)(a2 + 16);
    v51 = *(_QWORD *)(a1 + 1056);
    while (1)
    {
      v52 = *(_QWORD *)(v51 + 8);
      if (*(_QWORD *)(v51 + 16) < v50)
      {
        if (!v52)
        {
          v48 = (uint64_t *)(v51 + 8);
          goto LABEL_61;
        }
        if (*(_QWORD *)(v52 + 16) > v50)
          break;
      }
      v51 = *(_QWORD *)(v51 + 8);
      if (!v52)
      {
        *(_QWORD *)(a2 + 8) = v49;
        goto LABEL_63;
      }
    }
    v48 = (uint64_t *)(v51 + 8);
    *(_QWORD *)(a2 + 8) = v52;
  }
  else
  {
LABEL_61:
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 1064) = a2 + 8;
  }
LABEL_63:
  *v48 = a2;
  if (*(_DWORD *)(a2 + 32) == 1986618469)
    fpfsi_PostExternalProtectionRequiredChangedNotification(*(const void **)a2);
  fpfs_CompleteLogIfLastTrack((uint64_t)v6, a2);
  return fpfs_PrepareAndEnqueueTracksChangedNotification(v7, v6, v53, v54, v55, v56, v57, v58);
}

void fpfs_PostHasEnabledTrackTypeNotification(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeRef v6;
  const void *v7;
  char v8;
  char v9;
  int v10;
  uint64_t v11;
  const void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  CFTypeRef v19;
  const void *v20;
  CFTypeRef v21;
  __CFString *value;
  const __CFString *v23;
  const void *NotificationPayloadForProperties;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  v6 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v7 = (const void *)*MEMORY[0x1E0C9AE40];
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = dword_1932F7428[v5];
    if ((v8 & 1) != 0)
    {
      v11 = *(_QWORD *)(DerivedStorage + 1696);
      if (v11)
      {
        if (FigAlternateIsIFrameOnly(v11))
        {
          if (*(_BYTE *)(DerivedStorage + 769))
            v12 = v6;
          else
            v12 = v7;
          v19 = CFRetain(v12);
          if (v19 == v6)
          {
LABEL_18:
            v19 = v6;
            if (*(_BYTE *)(DerivedStorage + 769))
              goto LABEL_29;
            *(_BYTE *)(DerivedStorage + 769) = 1;
            v19 = v6;
          }
          else
          {
LABEL_15:
            if (!*(_BYTE *)(DerivedStorage + 769))
              goto LABEL_29;
            *(_BYTE *)(DerivedStorage + 769) = 0;
          }
          value = CFSTR("HasEnabledAudio");
          v23 = CFSTR("HasEnabledAudioChanged");
          if (!CFSTR("HasEnabledAudioChanged"))
            goto LABEL_29;
          goto LABEL_27;
        }
      }
    }
    v26 = 0;
    memset(v25, 0, sizeof(v25));
    if (fpfsi_findLastPlayingTracksForMediaType((uint64_t)a2, v10, (uint64_t)v25))
      v20 = v6;
    else
      v20 = v7;
    v21 = CFRetain(v20);
    if (v21 == v6)
    {
      if ((v9 & 1) != 0)
        goto LABEL_18;
      v19 = v6;
      if (*(_BYTE *)(DerivedStorage + 770))
        goto LABEL_29;
      *(_BYTE *)(DerivedStorage + 770) = 1;
      v19 = v6;
    }
    else
    {
      v19 = v21;
      if ((v9 & 1) != 0)
        goto LABEL_15;
      if (!*(_BYTE *)(DerivedStorage + 770))
        goto LABEL_29;
      *(_BYTE *)(DerivedStorage + 770) = 0;
    }
    value = CFSTR("HasEnabledVideo");
    v23 = CFSTR("HasEnabledVideoChanged");
    if (!CFSTR("HasEnabledVideoChanged"))
      goto LABEL_29;
LABEL_27:
    if (value)
    {
      NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(a1, (uint64_t)a2, v13, v14, v15, v16, v17, v18, value, 0);
      fpfs_EnqueueNotification(a1, v23, a2, NotificationPayloadForProperties);
    }
LABEL_29:
    if (v19)
      CFRelease(v19);
    v8 = 0;
    v5 = 1;
  }
  while ((v9 & 1) != 0);
}

uint64_t fpfs_setTimebaseStarter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD);

  if (a2 && *(_QWORD *)(a2 + 96) && !fpfs_LastRenderingTrackofType(a1, *(_DWORD *)(a2 + 32), a2))
  {
    v7 = *(_QWORD *)(a2 + 96);
  }
  else
  {
    if (!a3
      || !*(_QWORD *)(a3 + 96)
      || fpfs_LastRenderingTrackofType(a1, *(_DWORD *)(a3 + 32), a3)
      || !*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8))
    {
      return 0;
    }
    v7 = *(_QWORD *)(a3 + 96);
  }
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v7 + 32));
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v9)
    return v9(FigBaseObject, CFSTR("IsTimebaseStarter"), *MEMORY[0x1E0C9AE50]);
  else
    return 4294954514;
}

void fpfs_AssessItemTransition(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (fpfs_getNext(DerivedStorage, *(const void **)(DerivedStorage + 80)))
  {
    if (a1)
      CFRetain(a1);
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 24), a1, (dispatch_function_t)fpfs_DeferredAssessItemTransition);
  }
}

uint64_t fpfsi_RTCReportingUpdateAlternateIndex(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  v2 = *(_QWORD *)(result + 2536);
  if (v2)
  {
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 48);
    if (v4)
      return v4(v2, CFSTR("playerStats"), CFSTR("PlayAltID"), a2, 0);
  }
  return result;
}

uint64_t fpfs_GrabBuffersBeforeTime(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  CMTime v5;
  CMTime v6;
  CMTime time2;
  CMTime time1;
  CMTime v9;

  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputDecodeTimeStamp(&time1, a1);
  CMSampleBufferGetOutputPresentationTimeStamp(&time2, a1);
  CMTimeMinimum(&v9, &time1, &time2);
  if (fpfs_IsMarkerOnly(a1) || (v6 = v9, v5 = *(CMTime *)(a2 + 8), CMTimeCompare(&v6, &v5) <= 0))
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)a2, a1);
  return 0;
}

uint64_t fpfsi_PostExternalProtectionRequiredChangedNotification(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)DerivedStorage;
  result = fpfsi_GetExternalProtectionMethodRequiredForPlayback();
  if (*(_DWORD *)(DerivedStorage + 2968) != (_DWORD)result)
  {
    *(_DWORD *)(DerivedStorage + 2968) = result;
    fpfs_EnqueueNotification(v3, CFSTR("RequiresExternalProtectionChanged"), a1, 0);
  }
  return result;
}

uint64_t fpfs_PrimeVideoSyncTimer(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  int64_t v8;
  NSObject **v9;
  uint64_t v10;
  const __CFAllocator *AllocatorForMedia;
  CFArrayRef v12;
  NSObject *v13;
  NSObject *v14;
  OpaqueCMTimebase *v15;
  NSObject *v16;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime rhs;
  CMTime lhs;
  void *values;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  v21 = *a2;
  values = 0;
  v26 = 0;
  if (*(_BYTE *)(v7 + 456))
    v8 = -249;
  else
    v8 = -32;
  v9 = (NSObject **)(a1 + 264);
  fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(a1 + 264));
  lhs = v21;
  rhs = *a3;
  CMTimeSubtract(&v21, &lhs, &rhs);
  CMTimeMake(&v20, v8, 1000);
  rhs = v21;
  CMTimeAdd(&lhs, &rhs, &v20);
  v21 = lhs;
  fpfs_GetTime(DerivedStorage, (uint64_t)&v22);
  lhs = v21;
  rhs = v22;
  if (CMTimeCompare(&lhs, &rhs) <= 0)
  {
    CMTimeMake(&v19, 10, 1000);
    rhs = v22;
    CMTimeAdd(&lhs, &rhs, &v19);
    v21 = lhs;
  }
  FigRetainProxyRetain();
  v10 = *(_QWORD *)(a1 + 16);
  values = *(void **)(DerivedStorage + 16);
  v26 = v10;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v12 = CFArrayCreate(AllocatorForMedia, (const void **)&values, 2, 0);
  v13 = fpfs_TimerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 600), v12, 0xFFFFFFFFFFFFFFFFLL, (void (__cdecl *)(void *))fpfs_VideoSyncTimerDispatchFunc, (void (__cdecl *)(void *))fpfs_VideoSyncTimerCancelFunc);
  *(_QWORD *)(a1 + 264) = v13;
  if (v12)
  {
    CFRelease(v12);
    v14 = *v9;
    if (*v9)
      goto LABEL_8;
    return FigRetainProxyRelease();
  }
  v14 = v13;
  if (!v13)
    return FigRetainProxyRelease();
LABEL_8:
  CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 576), v14);
  v15 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
  v16 = *v9;
  lhs = v21;
  result = CMTimebaseSetTimerDispatchSourceNextFireTime(v15, v16, &lhs, 1u);
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void fpfs_VideoSyncTimerDispatchFunc(const __CFArray *a1)
{
  const void *ValueAtIndex;
  const void *v3;

  ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
  v3 = CFArrayGetValueAtIndex(a1, 1);
  fpfs_VideoSyncTimerProc((uint64_t)ValueAtIndex, (uint64_t)v3);
}

uint64_t fpfs_VideoSyncTimerCancelFunc(const __CFArray *a1)
{
  CFArrayGetValueAtIndex(a1, 0);
  return FigRetainProxyRelease();
}

void fpfs_VideoSyncTimerProc(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t type;
  int v14;
  CFTypeRef v15;
  CFTypeRef cf;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &v15, &cf))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = CMBaseObjectGetDerivedStorage();
    v5 = *(id *)(v4 + 776);
    voucher_adopt();
    v6 = *(_QWORD *)(DerivedStorage + 1040);
    if (v6)
    {
      while (*(_QWORD *)(v6 + 16) != a2)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          goto LABEL_15;
      }
      v7 = *(_QWORD *)(v6 + 48);
      v8 = *(_QWORD *)(DerivedStorage + 16 * *(unsigned __int8 *)(v6 + 180) + 1000);
      if (dword_1EE2A2A88)
      {
        v12 = *(_QWORD *)(DerivedStorage + 16 * *(unsigned __int8 *)(v6 + 180) + 1000);
        v14 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = v12;
      }
      fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v6 + 264));
      v10 = v7 == v8 && fpfs_IsTrialReadyToComplete(DerivedStorage, v6);
      if (fpfs_CheckVideoSyncQueue(v6, v10))
      {
        v11 = fpfs_FinishVideoSync((const __CFArray **)v6);
        if ((_DWORD)v11 != -16042)
        {
          if ((_DWORD)v11)
            fpfs_StopPlayingItemWithOSStatus(v4, cf, v11);
        }
      }
    }
LABEL_15:

    fpfs_UnlockAndPostNotificationsWithCaller(v15);
  }
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
}

BOOL fpfs_IsTrialReadyToComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v5;
  CMTime *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  CMTime v12;
  CMTime v13;

  v3 = *(_QWORD *)(a1 + 1040);
  if (!v3)
  {
    v5 = 0;
    return v5 == *(_DWORD *)(a1 + 1768);
  }
  v5 = 0;
  v6 = (CMTime *)MEMORY[0x1E0CA2E18];
  v7 = 1;
  do
  {
    v8 = *(unsigned __int8 *)(v3 + 180);
    if (*(_QWORD *)(v3 + 48) == *(_QWORD *)(a1 + 16 * v8 + 1000))
    {
      v5 |= 1 << v8;
      if (v3 != a2 && (*(_BYTE *)(v3 + 184) || *(_DWORD *)(v3 + 152) == 1))
      {
        v9 = *(_DWORD *)(v3 + 32);
        if (v9 == 1986618469)
        {
          v10 = fpfs_CheckVideoSyncQueue(v3, 1);
        }
        else
        {
          if (v9 != 1936684398)
            goto LABEL_4;
          fpfs_GetTime(a1, (uint64_t)&v13);
          v12 = *v6;
          v10 = fpfs_CheckAudioSync(a1, v3, 0, &v13, &v12, 1, 0);
        }
        if (!v10)
          v7 = 0;
      }
    }
LABEL_4:
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3);
  if (!v7)
    return 0;
  return v5 == *(_DWORD *)(a1 + 1768);
}

uint64_t fpfs_CheckVideoSyncQueue(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  CMTimeEpoch epoch;
  _BOOL4 v8;
  int v9;
  uint64_t CandidateSyncTrackOfDiscontinuityDomainAndType;
  uint64_t v11;
  uint64_t v12;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  unsigned int (*v15)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v16;
  char v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  const __CFAllocator *v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  opaqueCMSampleBuffer *value;
  CMTimeEpoch v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  CMTimeEpoch v33;
  CMTimeFlags v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  BOOL v40;
  char v41;
  char v42;
  CMTime *v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Float64 v53;
  Float64 v54;
  CMTimeFlags v55;
  CMTimeFlags v56;
  CMTimeEpoch v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t CanSwitchDownConcurrentlyWithoutStall;
  uint64_t v61;
  unsigned int v62;
  NSObject *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  Float64 v69;
  Float64 v70;
  Float64 v71;
  Float64 v72;
  Float64 v73;
  Float64 v74;
  _BOOL4 CanRenderVideo;
  const char *v76;
  CMTimeValue v77;
  CMTimeScale v78;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  Float64 Seconds;
  Float64 v88;
  opaqueCMSampleBuffer *i;
  CMTimeFlags v90;
  CMTimeEpoch v91;
  CMBufferRef v92;
  int v94;
  int v95;
  const char *v96;
  char v97;
  char v98;
  CMTimeValue *v99;
  CMTimeValue *v100;
  CMTimeFlags v101;
  BOOL v102;
  CMTimeEpoch v103;
  __int128 v104;
  _BOOL4 v105;
  uint64_t RenderingTrackofType;
  uint64_t v107;
  uint64_t v108;
  CMTimeEpoch v109;
  uint64_t v110;
  const char *v111;
  const char *v112;
  _OWORD *v113;
  dispatch_object_t *v114;
  CMTimeFlags flags;
  CMTimeFlags v116;
  CMTimeEpoch v117;
  CMTimeFlags v118;
  CMTimeFlags v119;
  CMTimeEpoch v120;
  CMTimeEpoch v121;
  int v122;
  int v123;
  int v124;
  char v125;
  int v126;
  CMTimeFlags v127;
  const char *v128;
  __int128 v129;
  CMTime dictionaryRepresentation;
  CMTime v131;
  float v132;
  CMTime v133;
  CMTime rhs;
  CMTime v135;
  CMTime v136;
  CMTime time2;
  CMTime v138;
  CMTime v139;
  CMTime v140;
  CMTime v141;
  CMTime v142;
  CMTime v143;
  CMTime v144;
  CMTime v145[2];
  __int128 v146;
  _OWORD v147[2];
  __int128 v148;
  _OWORD v149[2];
  CMTime v150;
  CMTime v151;
  CMTime v152;
  CMTime v153;
  CMTime v154;
  CMTime refcon;
  _BYTE v156[40];
  _BYTE v157[10];
  __int16 v158;
  Float64 v159;
  __int16 v160;
  Float64 v161;
  __int16 v162;
  Float64 v163;
  __int16 v164;
  Float64 v165;
  __int16 v166;
  Float64 v167;
  __int16 v168;
  _BOOL4 v169;
  __int16 v170;
  _BOOL4 v171;
  __int16 v172;
  _BOOL4 v173;
  __int16 v174;
  const char *v175;
  CMTime time1;
  const char *v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  const char *v181;
  __int16 v182;
  int v183;
  __int16 v184;
  int v185;
  __int16 v186;
  Float64 v187;
  __int16 v188;
  Float64 v189;
  CMTimeValue v190;
  CMTimeScale v191;
  CMTimeValue v192;
  CMTimeScale v193;
  CMTimeValue v194;
  CMTimeScale timescale;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  v154 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v129 = *(_OWORD *)&v154.value;
  epoch = v154.epoch;
  memset(&v153, 0, sizeof(v153));
  memset(&v152, 0, sizeof(v152));
  memset(&v151, 0, sizeof(v151));
  CMTimeMake(&v151, -33, 1000);
  memset(&v150, 0, sizeof(v150));
  CMTimeMake(&v150, -10, 1000);
  memset(v149, 0, sizeof(v149));
  v148 = 0u;
  v146 = 0u;
  memset(v147, 0, sizeof(v147));
  memset(v145, 0, sizeof(v145));
  memset(&v144, 0, sizeof(v144));
  *(_OWORD *)&v143.value = v129;
  v143.epoch = epoch;
  v8 = fpfs_CanRenderVideo(v6, v4) && *(_BYTE *)(DerivedStorage + 2872) == 0;
  if (*(_QWORD *)(a1 + 384))
    v105 = fpfs_isDecryptorReady(a1) == 0;
  else
    v105 = 0;
  v107 = *(_QWORD *)(DerivedStorage + 16 * *(unsigned __int8 *)(a1 + 180) + 1000);
  v108 = *(_QWORD *)(a1 + 48);
  v104 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v142.value = *MEMORY[0x1E0CA2E68];
  v103 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v142.epoch = v103;
  memset(&v141, 0, sizeof(v141));
  memset(&v140, 0, sizeof(v140));
  memset(&v138, 0, sizeof(v138));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v138);
  v139 = v138;
  v9 = *(_DWORD *)(a1 + 152);
  if ((v9 | 4) != 5)
    return 0;
  if (*(_BYTE *)(v6 + 456))
  {
    CMTimeMake(&refcon, -250, 1000);
    v151 = refcon;
    CMTimeMake(&refcon, -200, 1000);
    v150 = refcon;
    v9 = *(_DWORD *)(a1 + 152);
  }
  v194 = *(_QWORD *)(a1 + 272);
  timescale = *(_DWORD *)(a1 + 280);
  flags = *(_DWORD *)(a1 + 284);
  v110 = DerivedStorage;
  v120 = *(_QWORD *)(a1 + 288);
  v122 = a2;
  if (v9 != 1)
  {
    v16 = v4;
    RenderingTrackofType = fpfs_LastRenderingTrackofType(v4, *(_DWORD *)(a1 + 32), a1);
    goto LABEL_23;
  }
  CandidateSyncTrackOfDiscontinuityDomainAndType = fpfs_FirstCandidateSyncTrackOfDiscontinuityDomainAndType(v4, a1);
  RenderingTrackofType = fpfs_LastRenderingTrackofType(v4, *(_DWORD *)(a1 + 32), a1);
  if (!CandidateSyncTrackOfDiscontinuityDomainAndType)
  {
    v16 = v4;
LABEL_23:
    CandidateSyncTrackOfDiscontinuityDomainAndType = 0;
    v17 = 1;
    if (*(_DWORD *)(a1 + 152) != 1 || !RenderingTrackofType || v108 != v107)
      goto LABEL_28;
    if (fpfsi_TrialSwitchDownInProgress(DerivedStorage))
    {
      CandidateSyncTrackOfDiscontinuityDomainAndType = 0;
      goto LABEL_28;
    }
    return 0;
  }
  refcon = *(CMTime *)(CandidateSyncTrackOfDiscontinuityDomainAndType + 192);
  time1 = v139;
  if (fpfs_TimeIsAfter(v6, &refcon, &time1))
    v139 = *(CMTime *)(CandidateSyncTrackOfDiscontinuityDomainAndType + 192);
  v11 = *(_QWORD *)(CandidateSyncTrackOfDiscontinuityDomainAndType + 96);
  if (v11)
  {
    dictionaryRepresentation.value = 0;
    v12 = *(_QWORD *)(v11 + 32);
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v12);
    v15 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v15)
    {
      if (!v15(FigBaseObject, CFSTR("EndPresentationTimeForDecodedSamples"), AllocatorForMedia, &dictionaryRepresentation))
      {
        memset(&refcon, 0, sizeof(refcon));
        CMTimeMakeFromDictionary(&refcon, (CFDictionaryRef)dictionaryRepresentation.value);
        CFRelease((CFTypeRef)dictionaryRepresentation.value);
        if ((refcon.flags & 1) != 0)
        {
          time1 = v139;
          time2 = refcon;
          if (CMTimeCompare(&time1, &time2) < 0)
            v139 = refcon;
        }
      }
    }
  }
  v16 = v4;
  v17 = 0;
LABEL_28:
  v145[0] = v139;
  v145[1] = v150;
  *(_OWORD *)((char *)v147 + 8) = *MEMORY[0x1E0CA2E28];
  *((_QWORD *)&v147[1] + 1) = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  *(_QWORD *)&v149[0] = epoch;
  v148 = v129;
  if ((v17 & 1) == 0 && (*(_DWORD *)(CandidateSyncTrackOfDiscontinuityDomainAndType + 228) & 0x1D) == 1)
  {
    v154 = *(CMTime *)(CandidateSyncTrackOfDiscontinuityDomainAndType + 216);
    if (RenderingTrackofType)
    {
      if ((*(_DWORD *)(RenderingTrackofType + 228) & 0x1D) == 1)
      {
        refcon = *(CMTime *)(CandidateSyncTrackOfDiscontinuityDomainAndType + 216);
        time1 = *(CMTime *)(RenderingTrackofType + 216);
        CMTimeMaximum(&v154, &refcon, &time1);
      }
    }
  }
  if (v108 == v107 && !fpfsi_TrialSwitchDownInProgress(DerivedStorage))
  {
    *(_OWORD *)((char *)v149 + 8) = v129;
    *((_QWORD *)&v149[1] + 1) = epoch;
  }
  else
  {
    *(CMTime *)((char *)v149 + 8) = v154;
  }
  CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(a1 + 384))
  {
    v18 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_38;
LABEL_41:
    v19 = !FigStreamAlternateCanConcurrentlyDecodeAlternates(*(__CFArray **)(CandidateSyncTrackOfDiscontinuityDomainAndType + 440), *(__CFArray **)(a1 + 440));
    goto LABEL_42;
  }
  v18 = fpfs_isDecryptorReady(a1) == 0;
  if ((v17 & 1) == 0)
    goto LABEL_41;
LABEL_38:
  v19 = 0;
LABEL_42:
  if (fpfs_allowFastVideoSwitch_onceToken != -1)
    dispatch_once(&fpfs_allowFastVideoSwitch_onceToken, &__block_literal_global_158);
  v113 = (_OWORD *)(a1 + 272);
  if (*(_QWORD *)(a1 + 96))
    v21 = v18;
  else
    v21 = 1;
  if (((v21 | v19) & 1) != 0)
  {
    v22 = 0;
    v23 = v110;
  }
  else
  {
    dictionaryRepresentation.value = 0;
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetFirstNonMarkerSBuf, &dictionaryRepresentation);
    v24 = *(unsigned __int8 *)(a1 + 183);
    v23 = v110;
    if (!*(_BYTE *)(a1 + 183) && dictionaryRepresentation.value)
    {
      memset(&refcon, 0, sizeof(refcon));
      CMSampleBufferGetOutputPresentationTimeStamp(&refcon, (CMSampleBufferRef)dictionaryRepresentation.value);
      if (*(_BYTE *)(a1 + 184) || (time1 = refcon, time2 = v139, fpfs_TimeIsAfter(v6, &time1, &time2)))
      {
        if (*(_QWORD *)(a1 + 384))
        {
          if (!*(_BYTE *)(a1 + 186))
          {
            if (fpfs_IsVideoSync((opaqueCMSampleBuffer *)dictionaryRepresentation.value))
            {
              time1.value = 0;
              v25 = (const __CFAllocator *)FigGetAllocatorForMedia();
              if (!CMSampleBufferCreateCopy(v25, (CMSampleBufferRef)dictionaryRepresentation.value, (CMSampleBufferRef *)&time1))
              {
                fpfs_DoNotDisplay((opaqueCMSampleBuffer *)time1.value);
                fpfs_RenderBuffer(a1, (void *)time1.value);
                if (time1.value)
                  CFRelease((CFTypeRef)time1.value);
                *(_BYTE *)(a1 + 186) = 1;
              }
            }
          }
        }
      }
      else
      {
        *(_BYTE *)(a1 + 183) = 1;
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32);
        v27 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v27)
          v27(v26);
      }
      v24 = *(unsigned __int8 *)(a1 + 183);
    }
    if (v24)
    {
      value = (opaqueCMSampleBuffer *)dictionaryRepresentation.value;
      v22 = 1;
      if (dictionaryRepresentation.value)
      {
        while (1)
        {
          memset(&time1, 0, sizeof(time1));
          CMSampleBufferGetOutputPresentationTimeStamp(&time1, value);
          refcon = time1;
          time2 = v139;
          if ((CMTimeCompare(&refcon, &time2) & 0x80000000) == 0)
            break;
          dictionaryRepresentation.value = (CMTimeValue)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 72));
          if (fpfs_IsVideoDependedOnByOthers((opaqueCMSampleBuffer *)dictionaryRepresentation.value))
          {
            if (fpfs_IsVideoSync((opaqueCMSampleBuffer *)dictionaryRepresentation.value))
              fpfs_FlushPrimaryAndAuxRenderChains(*(_QWORD *)(a1 + 96), 0);
            fpfs_DoNotDisplay((opaqueCMSampleBuffer *)dictionaryRepresentation.value);
            fpfs_RenderBuffer(a1, (void *)dictionaryRepresentation.value);
            *(_BYTE *)(a1 + 186) = 1;
          }
          if (dictionaryRepresentation.value)
            CFRelease((CFTypeRef)dictionaryRepresentation.value);
          value = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 72));
          dictionaryRepresentation.value = (CMTimeValue)value;
          if (!value)
          {
            v22 = 1;
            goto LABEL_77;
          }
        }
        refcon = v139;
        *(CMTime *)v156 = time1;
        *(_OWORD *)&v156[24] = v129;
        *(_QWORD *)v157 = epoch;
        CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetFirstPTSInRange, &refcon);
        *(_OWORD *)&v143.value = *(_OWORD *)&v156[24];
        v29 = *(_QWORD *)v157;
        v143.epoch = *(_QWORD *)v157;
        *v113 = *(_OWORD *)&v156[24];
        v120 = v29;
        *(_QWORD *)(a1 + 288) = v29;
        v194 = *(_QWORD *)&v156[24];
        flags = *(_DWORD *)&v156[36];
        v22 = 1;
        timescale = *(_DWORD *)&v156[32];
      }
    }
    else
    {
      v22 = 0;
    }
  }
LABEL_77:
  v30 = *(float *)(v6 + 108) == 0.0 && v8;
  if (v22 || !v30)
  {
    v126 = v22;
  }
  else
  {
    dictionaryRepresentation.value = 0;
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetFirstNonMarkerSBuf, &dictionaryRepresentation);
    if (!dictionaryRepresentation.value)
      goto LABEL_84;
    memset(&refcon, 0, sizeof(refcon));
    CMSampleBufferGetOutputPresentationTimeStamp(&refcon, (CMSampleBufferRef)dictionaryRepresentation.value);
    time1 = refcon;
    time2 = v139;
    if (fpfs_TimeIsAfter(v6, &time1, &time2))
      goto LABEL_84;
    *(CMTime *)(a1 + 192) = refcon;
    fpfs_GetStartupDurationOfType((CMTime *)a1, (uint64_t)&v144);
    time1 = refcon;
    time2 = v144;
    fpfs_TimeAfterPlayback(v6, &time1, &time2, &v136);
    time1 = v139;
    if (fpfs_TimeIsAfter(v6, &v136, &time1))
    {
      v194 = refcon.value;
      flags = refcon.flags;
      timescale = refcon.timescale;
      v31 = 1;
      v120 = refcon.epoch;
    }
    else
    {
LABEL_84:
      v31 = 0;
    }
    v126 = v31;
  }
  FPSupport_getVideoDecodeWaterLevels(&v153, &v152, 1);
  v152.value *= 2;
  refcon = v138;
  time1 = v152;
  fpfs_TimeAfterPlayback(v6, &refcon, &time1, &v135);
  *(_OWORD *)&refcon.value = *v113;
  refcon.epoch = *(_QWORD *)(a1 + 288);
  if (fpfs_TimeIsAfter(v6, &refcon, &v135)
    && ((v17 & 1) != 0
     || (*(_OWORD *)&refcon.value = *v113,
         refcon.epoch = *(_QWORD *)(a1 + 288),
         time1 = *(CMTime *)(CandidateSyncTrackOfDiscontinuityDomainAndType + 216),
         CMTimeCompare(&refcon, &time1) <= 0)))
  {
    v32 = v16;
    v33 = v120;
    v34 = flags;
    if (*(_QWORD *)(a1 + 96) || v8 && *(uint64_t *)(v6 + 616) <= 3)
    {
      v35 = *(_QWORD *)(v23 + 1040);
      v126 = 1;
      if (v35)
      {
        if (v35 != a1)
        {
          v126 = 1;
          do
          {
            if (*(_DWORD *)(v35 + 32) == 1986618469)
            {
              v36 = v126;
              if ((*(_DWORD *)(v35 + 152) | 4) == 5)
                v36 = 0;
              v126 = v36;
            }
            v35 = *(_QWORD *)(v35 + 8);
            if (v35)
              v37 = v35 == a1;
            else
              v37 = 1;
          }
          while (!v37);
        }
      }
    }
  }
  else
  {
    v32 = v16;
    v33 = v120;
    v34 = flags;
  }
  v114 = (dispatch_object_t *)(a1 + 264);
  v38 = !v8;
  v39 = 0;
  v102 = v38 || v105;
  if (v122)
    v40 = 0;
  else
    v40 = v108 == v107;
  v41 = v40;
  v99 = (CMTimeValue *)(RenderingTrackofType + 216);
  v100 = (CMTimeValue *)(a1 + 216);
  v97 = v41;
  if (RenderingTrackofType)
    v42 = v41;
  else
    v42 = 1;
  v98 = v42;
  v101 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v43 = (CMTime *)(a1 + 272);
  v109 = epoch;
  while (1)
  {
    while (1)
    {
      if ((v34 & 1) == 0)
        goto LABEL_137;
      refcon.value = v194;
      refcon.timescale = timescale;
      refcon.flags = v34;
      refcon.epoch = v33;
      time1 = v151;
      CMTimeAdd(&v141, &refcon, &time1);
      refcon.value = v194;
      refcon.timescale = timescale;
      refcon.flags = v34;
      refcon.epoch = v33;
      time1 = v150;
      CMTimeAdd(&v140, &refcon, &time1);
      if (!*(_QWORD *)(a1 + 352))
        *(_QWORD *)(a1 + 352) = FigGetUpTimeNanoseconds();
      if (v126)
        break;
      refcon = v138;
      time1 = v140;
      if (CMTimeCompare(&refcon, &time1) <= 0)
      {
        refcon = v138;
        time1 = v141;
        if (CMTimeCompare(&refcon, &time1) < 0)
        {
          v121 = v33;
          if (!*v114 && dword_1EE2A2A88)
          {
            v125 = v39;
            v119 = v34;
            LODWORD(time2.value) = 0;
            LOBYTE(dictionaryRepresentation.value) = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v80 = time2.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, dictionaryRepresentation.value))
              v81 = v80;
            else
              v81 = v80 & 0xFFFFFFFE;
            if (v81)
            {
              v82 = *(_QWORD *)v23;
              if (*(_QWORD *)v23)
                v83 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v83 = "";
              v128 = v83;
              if (v32)
                v84 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v84 = "";
              v85 = *(_QWORD *)(v23 + 160);
              v86 = *(_QWORD *)(a1 + 16);
              refcon.value = v194;
              refcon.timescale = timescale;
              refcon.flags = v119;
              refcon.epoch = v33;
              Seconds = CMTimeGetSeconds(&refcon);
              refcon = v138;
              v88 = CMTimeGetSeconds(&refcon);
              LODWORD(time1.value) = 136317186;
              *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"fpfs_CheckVideoSyncQueue";
              LOWORD(time1.flags) = 2048;
              *(_QWORD *)((char *)&time1.flags + 2) = v82;
              HIWORD(time1.epoch) = 2082;
              v177 = v128;
              v178 = 2048;
              v179 = v32;
              v180 = 2082;
              v181 = v84;
              v182 = 1024;
              v183 = v85;
              v184 = 1024;
              v185 = v86;
              v186 = 2048;
              v187 = Seconds;
              v188 = 2048;
              v189 = v88;
              _os_log_send_and_compose_impl();
              epoch = v109;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v34 = v119;
            v43 = (CMTime *)(a1 + 272);
            LOBYTE(v39) = v125;
          }
LABEL_229:
          v43->value = v194;
          v43->timescale = timescale;
          *(_DWORD *)(a1 + 284) = v34;
          *(_QWORD *)(a1 + 288) = v121;
          if (!*(_QWORD *)(a1 + 264))
          {
            refcon.value = v194;
            refcon.timescale = timescale;
            refcon.flags = v34;
            refcon.epoch = v121;
            time1 = v142;
            fpfs_PrimeVideoSyncTimer(a1, &refcon, &time1);
          }
          goto LABEL_231;
        }
        break;
      }
      if (dword_1EE2A2A88)
      {
        v123 = v39;
        v116 = v34;
        LODWORD(time2.value) = 0;
        LOBYTE(dictionaryRepresentation.value) = 0;
        v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v45 = time2.value;
        if (os_log_type_enabled(v44, dictionaryRepresentation.value))
          v46 = v45;
        else
          v46 = v45 & 0xFFFFFFFE;
        if (v46)
        {
          v47 = *(_QWORD *)v23;
          if (*(_QWORD *)v23)
            v48 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v48 = "";
          v111 = v48;
          if (v32)
            v49 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v49 = "";
          v50 = v32;
          v51 = *(_QWORD *)(v23 + 160);
          v52 = *(_QWORD *)(a1 + 16);
          refcon.value = v194;
          refcon.timescale = timescale;
          refcon.flags = v116;
          refcon.epoch = v33;
          v53 = CMTimeGetSeconds(&refcon);
          refcon = v138;
          v54 = CMTimeGetSeconds(&refcon);
          LODWORD(time1.value) = 136317186;
          *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"fpfs_CheckVideoSyncQueue";
          LOWORD(time1.flags) = 2048;
          *(_QWORD *)((char *)&time1.flags + 2) = v47;
          HIWORD(time1.epoch) = 2082;
          v177 = v111;
          v178 = 2048;
          v179 = v50;
          v180 = 2082;
          v181 = v49;
          v182 = 1024;
          v183 = v51;
          v184 = 1024;
          v185 = v52;
          v23 = v110;
          v186 = 2048;
          v187 = v53;
          v188 = 2048;
          v189 = v54;
          _os_log_send_and_compose_impl();
          epoch = v109;
          v32 = v50;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v43 = (CMTime *)(a1 + 272);
        v39 = v123;
      }
      fpfs_ReleaseAndClearDispatchSource(v114);
LABEL_137:
      v146 = *(_OWORD *)((char *)v147 + 8);
      *(_QWORD *)&v147[0] = *((_QWORD *)&v147[1] + 1);
      *(_OWORD *)((char *)v147 + 8) = v129;
      *((_QWORD *)&v147[1] + 1) = epoch;
      CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_VideoSyncSearch, v145);
      if (!*(_BYTE *)(a1 + 183))
        v39 = 1;
      if ((BYTE4(v147[1]) & 0x1D) != 1)
        goto LABEL_231;
      if (*(float *)(v23 + 840) == 0.0 && (*(_DWORD *)(a1 + 284) & 0x1D) == 1)
      {
        refcon = *v43;
        time1 = v138;
        if (CMTimeCompare(&refcon, &time1) <= 0)
        {
          refcon = *(CMTime *)((char *)v147 + 8);
          time1 = v138;
          if (CMTimeCompare(&refcon, &time1) > 0)
            goto LABEL_231;
        }
      }
      v43->epoch = *((_QWORD *)&v147[1] + 1);
      *(_OWORD *)&v43->value = *(_OWORD *)((char *)v147 + 8);
      v194 = *((_QWORD *)&v147[0] + 1);
      timescale = v147[1];
      v34 = *(_DWORD *)(a1 + 284);
      v33 = *(_QWORD *)(a1 + 288);
    }
    *(_OWORD *)&v142.value = v104;
    v142.epoch = v103;
    v121 = v33;
    v124 = v39;
    if (v102)
      goto LABEL_147;
    refcon.value = v194;
    refcon.timescale = timescale;
    refcon.flags = v34;
    refcon.epoch = v33;
    time1 = v143;
    if (!CMTimeCompare(&refcon, &time1))
    {
      if (*(_QWORD *)(a1 + 96))
      {
        refcon.value = v194;
        refcon.timescale = timescale;
        refcon.flags = v34;
        refcon.epoch = v33;
        time1 = v139;
        if (CMTimeCompare(&refcon, &time1) <= 0 && *(float *)(v23 + 840) != 0.0 && *(_DWORD *)(a1 + 152) != 5)
        {
          refcon = v139;
          *(_QWORD *)&v156[16] = v103;
          *(_OWORD *)v156 = v104;
          *(_QWORD *)&v156[24] = 0;
          *(_QWORD *)&v156[32] = 0;
          CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(*(_QWORD *)(a1 + 96) + 40), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_CountNonDroppableUntil, &refcon);
          if (*(_QWORD *)&v156[32])
          {
            time1 = *(CMTime *)v156;
            CMTimeMultiplyByRatio(&v142, &time1, *(_DWORD *)&v156[24] + 1, *(int32_t *)&v156[32]);
          }
          *(_OWORD *)v156 = v104;
          *(_QWORD *)&v156[16] = v103;
          *(_QWORD *)&v156[24] = 0;
          *(_QWORD *)&v156[32] = 0;
          CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_CountNonDroppableUntil, &refcon);
          if (*(_QWORD *)&v156[32])
          {
            time1 = *(CMTime *)v156;
            CMTimeMultiplyByRatio(&rhs, &time1, *(int32_t *)&v156[24], *(int32_t *)&v156[32]);
            time2 = v142;
            CMTimeAdd(&time1, &time2, &rhs);
            v142 = time1;
          }
          time1 = v139;
          time2 = v138;
          CMTimeSubtract(&v133, &time1, &time2);
          time1 = v142;
          if ((CMTimeCompare(&time1, &v133) & 0x80000000) == 0)
          {
LABEL_147:
            v20 = 0;
            goto LABEL_185;
          }
        }
      }
    }
    v55 = *(_DWORD *)(a1 + 228);
    if ((v55 & 0x1D) == 1)
    {
      v56 = v34;
      v192 = *v100;
      v193 = *(_DWORD *)(a1 + 224);
      v57 = *(_QWORD *)(a1 + 232);
    }
    else
    {
      v192 = v194;
      v193 = timescale;
      v56 = v34;
      v55 = v34;
      v57 = v33;
    }
    if (RenderingTrackofType)
    {
      v190 = *v99;
      v191 = *(_DWORD *)(RenderingTrackofType + 224);
      v127 = *(_DWORD *)(RenderingTrackofType + 228);
      v117 = *(_QWORD *)(RenderingTrackofType + 232);
    }
    else
    {
      v190 = v192;
      v191 = v193;
      v127 = v55;
      v117 = v57;
    }
    if (!*(_BYTE *)(a1 + 184))
    {
      v132 = 0.0;
      memset(&refcon, 0, sizeof(refcon));
      memset(&time1, 0, sizeof(time1));
      if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 72)))
      {
        time1.value = v194;
        time1.timescale = timescale;
        time1.flags = v56;
        time1.epoch = v33;
      }
      else
      {
        CMBufferQueueGetMinPresentationTimeStamp(&time1, *(CMBufferQueueRef *)(a1 + 72));
      }
      *(CMTime *)(a1 + 192) = time1;
      fpfs_GetStartupDurationOfType((CMTime *)a1, (uint64_t)&v131);
      time2 = time1;
      CMTimeAdd(&refcon, &time2, &v131);
      time2 = refcon;
      dictionaryRepresentation = v138;
      CMTimeSubtract(&v144, &time2, &dictionaryRepresentation);
      v58 = (1 << *(_BYTE *)(a1 + 180));
      time2 = v144;
      dictionaryRepresentation = v139;
      v59 = fpfs_CheckCanKeepUp(v32, (uint64_t)&time2, &dictionaryRepresentation, v58, 0, &v132, 0, 0);
      v20 = v108 == v107 ? v132 >= 1.0 : v59;
      if ((_DWORD)v20)
        goto LABEL_178;
    }
    if ((v98 & 1) == 0
      && (*(_BYTE *)(RenderingTrackofType + 182) || fpfsi_TrialSwitchDownInProgress(v23)))
    {
      refcon.value = v192;
      refcon.timescale = v193;
      refcon.flags = v55;
      refcon.epoch = v57;
      time1.value = v190;
      time1.timescale = v191;
      time1.flags = v127;
      time1.epoch = v117;
      v20 = fpfs_TimeIsAtOrAfter(v6, &refcon, &time1);
LABEL_178:
      if ((_DWORD)v20 && v108 == v107)
      {
        if (fpfsi_TrialSwitchDownInProgress(v23))
        {
          refcon.value = v192;
          refcon.timescale = v193;
          refcon.flags = v55;
          refcon.epoch = v57;
          time1.value = v190;
          time1.timescale = v191;
          time1.flags = v127;
          time1.epoch = v117;
          CanSwitchDownConcurrentlyWithoutStall = fpfs_TimeIsAtOrAfter(v6, &refcon, &time1);
        }
        else
        {
          v61 = *(_QWORD *)(v23 + 96);
          refcon = v144;
          CanSwitchDownConcurrentlyWithoutStall = FigAlternatePlaybackBitrateMonitorCanSwitchDownConcurrentlyWithoutStall(v61, &refcon);
        }
        v20 = CanSwitchDownConcurrentlyWithoutStall;
      }
      goto LABEL_184;
    }
    v20 = 0;
LABEL_184:
    v34 = v56;
    v43 = (CMTime *)(a1 + 272);
    v39 = v124;
LABEL_185:
    if ((_DWORD)v20)
      v62 = 1;
    else
      v62 = 3;
    if (v62 <= dword_1EE2A2A88)
    {
      v118 = v34;
      LODWORD(time2.value) = 0;
      LOBYTE(dictionaryRepresentation.value) = 0;
      v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v64 = time2.value;
      if (os_log_type_enabled(v63, dictionaryRepresentation.value))
        v65 = v64;
      else
        v65 = v64 & 0xFFFFFFFE;
      if (v65)
      {
        v66 = *(_QWORD *)v23;
        if (*(_QWORD *)v23)
          v67 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v67 = "";
        v112 = v67;
        if (v32)
          v68 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v68 = "";
        v96 = v68;
        v94 = *(_DWORD *)(v23 + 160);
        v95 = *(_DWORD *)(a1 + 16);
        refcon = v138;
        v69 = CMTimeGetSeconds(&refcon);
        refcon.value = v194;
        refcon.timescale = timescale;
        refcon.flags = v118;
        refcon.epoch = v121;
        v70 = CMTimeGetSeconds(&refcon);
        *(_OWORD *)&refcon.value = *(_OWORD *)v100;
        refcon.epoch = *(_QWORD *)(a1 + 232);
        v71 = CMTimeGetSeconds(&refcon);
        if (RenderingTrackofType)
        {
          *(_OWORD *)&refcon.value = *(_OWORD *)v99;
          refcon.epoch = *(_QWORD *)(RenderingTrackofType + 232);
          v72 = CMTimeGetSeconds(&refcon);
        }
        else
        {
          v72 = -1.0;
        }
        refcon = v142;
        v73 = CMTimeGetSeconds(&refcon);
        refcon = v139;
        v74 = CMTimeGetSeconds(&refcon);
        CanRenderVideo = fpfs_CanRenderVideo(v6, v32);
        LODWORD(refcon.value) = 136319234;
        v76 = "finishing";
        if (!(_DWORD)v20)
          v76 = "not ok";
        *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfs_CheckVideoSyncQueue";
        LOWORD(refcon.flags) = 2048;
        *(_QWORD *)((char *)&refcon.flags + 2) = v66;
        HIWORD(refcon.epoch) = 2082;
        *(_QWORD *)v156 = v112;
        *(_WORD *)&v156[8] = 2048;
        *(_QWORD *)&v156[10] = v32;
        *(_WORD *)&v156[18] = 2082;
        *(_QWORD *)&v156[20] = v96;
        *(_WORD *)&v156[28] = 1024;
        *(_DWORD *)&v156[30] = v94;
        *(_WORD *)&v156[34] = 1024;
        *(_DWORD *)&v156[36] = v95;
        *(_WORD *)v157 = 2048;
        *(Float64 *)&v157[2] = v69;
        v158 = 2048;
        v159 = v70;
        v160 = 2048;
        v161 = v71;
        v162 = 2048;
        v163 = v72;
        v164 = 2048;
        v165 = v73;
        v166 = 2048;
        v167 = v74;
        v168 = 1024;
        v169 = CanRenderVideo;
        v170 = 1024;
        v171 = v105;
        v172 = 1024;
        v173 = v108 == v107;
        v174 = 2082;
        v175 = v76;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v34 = v118;
      v43 = (CMTime *)(a1 + 272);
      v39 = v124;
    }
    if ((_DWORD)v20)
      break;
    if (*(_BYTE *)(a1 + 183))
      goto LABEL_229;
    v126 = 0;
    v194 = *MEMORY[0x1E0CA2E18];
    timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
    v34 = v101;
    v33 = epoch;
  }
  if ((v97 & 1) == 0)
  {
    v77 = v194;
    v43->value = v194;
    v78 = timescale;
    v43->timescale = timescale;
    *(_DWORD *)(a1 + 284) = v34;
    *(_QWORD *)(a1 + 288) = v121;
    *(_QWORD *)&v148 = v77;
    *((_QWORD *)&v148 + 1) = __PAIR64__(v34, v78);
    *(_QWORD *)&v149[0] = v121;
    goto LABEL_232;
  }
LABEL_231:
  v20 = 0;
LABEL_232:
  if ((BYTE4(v147[1]) & 0x1D) != 1)
  {
    *(_OWORD *)((char *)v147 + 8) = v129;
    *((_QWORD *)&v147[1] + 1) = epoch;
  }
  if ((_BYTE)v39)
  {
    for (i = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 72));
          i;
          i = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 72)))
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&refcon, i);
      v194 = refcon.value;
      v90 = refcon.flags;
      timescale = refcon.timescale;
      v91 = refcon.epoch;
      *(_OWORD *)&time1.value = v148;
      time1.epoch = *(_QWORD *)&v149[0];
      if ((CMTimeCompare(&refcon, &time1) & 0x80000000) == 0)
        break;
      refcon.value = v194;
      refcon.timescale = timescale;
      refcon.flags = v90;
      refcon.epoch = v91;
      time1 = *(CMTime *)((char *)v147 + 8);
      if ((CMTimeCompare(&refcon, &time1) & 0x80000000) == 0)
        break;
      v92 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 72));
      if (v92)
        CFRelease(v92);
    }
  }
  return v20;
}

uint64_t fpfs_FinishVideoSync(const __CFArray **a1)
{
  uint64_t v1;
  const __CFArray *v2;
  _QWORD *DerivedStorage;
  _OWORD *v4;
  _QWORD *v5;
  CMTime *CandidateSyncTrackOfDiscontinuityDomainAndType;
  uint64_t v7;
  CMTime *v8;
  __int128 v9;
  uint64_t v10;
  CMTime *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  unsigned int (*v16)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t RenderingTrackofType;
  opaqueCMSampleBuffer *v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t started;
  __int128 v26;
  _QWORD *v27;
  _BOOL4 v28;
  const __CFAllocator *v29;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v31;
  opaqueCMSampleBuffer *Head;
  opaqueCMSampleBuffer *v33;
  void *v34;
  int32_t v35;
  int32_t v36;
  int32_t v37;
  CMBufferRef v38;
  const void *v39;
  uint64_t TrackOfType;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, const __CFString *, _QWORD);
  uint64_t v45;
  void (*v46)(uint64_t, const __CFString *, _QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  unsigned int value;
  unsigned int v52;
  const void *v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int IsEmpty;
  CMTime *v60;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v63;
  NSObject *v64;
  unsigned int v65;
  unsigned int v66;
  const void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *i;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  int DefaultLocalCenter;
  int v77;
  NSObject *v78;
  unsigned int v79;
  unsigned int v80;
  const void *v81;
  const char *v82;
  const char *v83;
  Float64 v84;
  Float64 v85;
  Float64 v86;
  CFNumberRef v87;
  uint64_t v88;
  CFNumberRef v89;
  uint64_t v90;
  CMBufferRef v91;
  void *v92;
  uint64_t v93;
  const void *v94;
  NSObject *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  Float64 v102;
  uint64_t updated;
  const char *v105;
  uint64_t v106;
  Float64 Seconds;
  Float64 v108;
  const char *v109;
  CMTimeEpoch v110;
  __int128 v111;
  _BOOL4 v112;
  const char *v113;
  CMTime *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  CMTime v119;
  CMTime v120;
  CMTime v121;
  CMTime v122;
  CFDictionaryRef dictionaryRepresentation;
  CMTime rhs;
  CFTypeRef cf;
  CMTime v126;
  int valuePtr;
  CFTypeRef v128;
  CMTime v129;
  CMTime v130;
  CMTime v131;
  CMTime v132;
  CMTime time2;
  const char *v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  const char *v138;
  __int16 v139;
  _BYTE v140[28];
  CMTime time1;
  CMTimeValue v142;
  CMTimeScale timescale;
  uint64_t v144;

  v1 = (uint64_t)a1;
  v144 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v117 = CMBaseObjectGetDerivedStorage();
  memset(&v132, 0, sizeof(v132));
  fpfs_GetTime((uint64_t)DerivedStorage, (uint64_t)&v132);
  memset(&v131, 0, sizeof(v131));
  memset(&v130, 0, sizeof(v130));
  memset(&v129, 0, sizeof(v129));
  timescale = 0;
  v142 = 0;
  v128 = 0;
  valuePtr = 7;
  v111 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v126.value = *MEMORY[0x1E0CA2E18];
  v110 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v126.epoch = v110;
  fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v1 + 264));
  *(CMTime *)(v1 + 192) = v132;
  if (*(_QWORD *)(v1 + 48) == DerivedStorage[2 * *(unsigned __int8 *)(v1 + 180) + 125])
  {
    LOBYTE(time1.value) = 0;
    started = fpfs_CompleteTrialSwitch(v2, v1, &time1);
    if (LOBYTE(time1.value))
      return started;
  }
  v4 = (_OWORD *)(v1 + 192);
  v5 = (_QWORD *)MEMORY[0x1E0C9AE50];
  v115 = (uint64_t)v2;
  v116 = (uint64_t)DerivedStorage;
  v114 = (CMTime *)(v1 + 192);
  if (*(_DWORD *)(v1 + 152) == 1
    && (CandidateSyncTrackOfDiscontinuityDomainAndType = (CMTime *)fpfs_FirstCandidateSyncTrackOfDiscontinuityDomainAndType((uint64_t)v2, v1)) != 0)
  {
    v7 = (uint64_t)CandidateSyncTrackOfDiscontinuityDomainAndType;
    v8 = CandidateSyncTrackOfDiscontinuityDomainAndType + 8;
    time1 = CandidateSyncTrackOfDiscontinuityDomainAndType[8];
    *(_OWORD *)&time2.value = *v4;
    time2.epoch = *(_QWORD *)(v1 + 208);
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      v9 = *(_OWORD *)&v8->value;
      *(_QWORD *)(v1 + 208) = v8->epoch;
      *v4 = v9;
    }
    if (!*(_BYTE *)(v7 + 182))
      fpfs_StopFeedingTrack(v7, 0, 1);
    v10 = *(_QWORD *)(v7 + 96);
    if (v10)
    {
      *(_OWORD *)&time1.value = v111;
      time1.epoch = v110;
      v11 = (CMTime *)(v1 + 192);
      *(_OWORD *)&time2.value = *(_OWORD *)&v114->value;
      time2.epoch = *(_QWORD *)(v1 + 208);
      rhs = *(CMTime *)(v1 + 272);
      cf = 0;
      if (CMTimeCompare(&time2, &rhs) < 0)
      {
        *(_OWORD *)&v114->value = *(_OWORD *)(v1 + 272);
        *(_QWORD *)(v1 + 208) = *(_QWORD *)(v1 + 288);
      }
      FPSupport_getVideoDecodeWaterLevels(&v131, &v130, 1);
      time2 = v132;
      rhs = v130;
      CMTimeAdd(&time1, &time2, &rhs);
      *(_OWORD *)&time2.value = *(_OWORD *)&v114->value;
      time2.epoch = *(_QWORD *)(v1 + 208);
      rhs = time1;
      if (CMTimeCompare(&time2, &rhs) < 0)
      {
        *(_OWORD *)&time2.value = *(_OWORD *)&v114->value;
        time2.epoch = *(_QWORD *)(v1 + 208);
        rhs = *(CMTime *)(v7 + 216);
        if (CMTimeCompare(&time2, &rhs) < 0)
        {
          v12 = (_OWORD *)(v7 + 216);
          dictionaryRepresentation = 0;
          v13 = *(_QWORD *)(v10 + 32);
          AllocatorForMedia = FigGetAllocatorForMedia();
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v13);
          v16 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v16)
          {
            if (!v16(FigBaseObject, CFSTR("EndPresentationTimeForDecodedSamples"), AllocatorForMedia, &dictionaryRepresentation))
            {
              memset(&time2, 0, sizeof(time2));
              CMTimeMakeFromDictionary(&time2, dictionaryRepresentation);
              CFRelease(dictionaryRepresentation);
              rhs = time1;
              v122 = time2;
              if (CMTimeCompare(&rhs, &v122) < 0)
                time1 = time2;
            }
          }
          *(_OWORD *)&time2.value = *v12;
          time2.epoch = *(_QWORD *)(v7 + 232);
          rhs = time1;
          if (CMTimeCompare(&time2, &rhs) >= 1)
          {
            *v12 = *(_OWORD *)&time1.value;
            *(_QWORD *)(v7 + 232) = time1.epoch;
          }
          v17 = *v12;
          v11 = (CMTime *)(v1 + 192);
          *(_QWORD *)(v1 + 208) = *(_QWORD *)(v7 + 232);
          *(_OWORD *)&v114->value = v17;
        }
      }
      v129 = *v11;
      v18 = *(_QWORD *)(v10 + 32);
      v19 = FigGetAllocatorForMedia();
      v20 = FigRenderPipelineGetFigBaseObject(v18);
      v21 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v21)
        v21(v20, CFSTR("IsTimebaseStarter"), v19, &cf);
      v112 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
      if (cf)
        CFRelease(cf);
    }
    else
    {
      v112 = 0;
    }
    v26 = *(_OWORD *)&v114->value;
    *(_QWORD *)(v7 + 232) = *(_QWORD *)(v1 + 208);
    *(_OWORD *)(v7 + 216) = v26;
    CMTimeMake(&v121, 100, 1000);
    time2 = *(CMTime *)(v7 + 216);
    CMTimeAdd(&time1, &time2, &v121);
    *(CMTime *)(v7 + 216) = time1;
    time1 = *v8;
    *(_OWORD *)&time2.value = *(_OWORD *)&v114->value;
    time2.epoch = *(_QWORD *)(v1 + 208);
    if (CMTimeCompare(&time1, &time2))
    {
      v27 = (_QWORD *)v7;
      v5 = (_QWORD *)MEMORY[0x1E0C9AE50];
      v28 = v112;
      if (v10)
        goto LABEL_33;
      goto LABEL_70;
    }
    v2 = (const __CFArray *)v115;
    TrackOfType = fpfs_LastTrackOfType(v115, 1986618469, v7);
    v5 = (_QWORD *)MEMORY[0x1E0C9AE50];
    v28 = v112;
    if (TrackOfType)
    {
      v27 = (_QWORD *)TrackOfType;
      if (*(_DWORD *)(TrackOfType + 152) == 6)
      {
        v129 = *(CMTime *)(TrackOfType + 216);
        v10 = *(_QWORD *)(TrackOfType + 96);
        if (!v10)
        {
LABEL_70:
          v2 = (const __CFArray *)v115;
          goto LABEL_73;
        }
LABEL_33:
        cf = 0;
        v29 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
        if (CMBufferQueueCreate(v29, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)&cf))
          goto LABEL_65;
        v31 = (uint64_t)v27;
        MEMORY[0x19402B01C](*(_QWORD *)(v27[12] + 40), fpfs_StealBuffer, cf);
        Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead((CMBufferQueueRef)cf);
        if (!Head)
          goto LABEL_61;
        v33 = Head;
        v34 = 0;
        while (fpfs_IsMarkerOnly(v33))
        {
LABEL_50:
          v38 = CMBufferQueueDequeueAndRetain((CMBufferQueueRef)cf);
          if (v38)
            CFRelease(v38);
          v33 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead((CMBufferQueueRef)cf);
          if (!v33)
          {
LABEL_53:
            if (v34)
            {
              if (*(_QWORD *)(v1 + 96))
              {
                v39 = *(const void **)(v10 + 64);
                if (v39)
                {
                  CFRelease(v39);
                  *(_QWORD *)(v10 + 64) = 0;
                }
                if (v10 == *(_QWORD *)(v31 + 96))
                  fpfs_RenderWithEndSignal(v31, v34, *(_QWORD *)(*(_QWORD *)(v1 + 96) + 32));
                else
                  fpfs_RenderBuffer(v31, v34);
              }
              CFRelease(v34);
            }
LABEL_61:
            if (CMBufferQueueGetBufferCount((CMBufferQueueRef)cf) < 1)
            {
              v27 = (_QWORD *)v31;
              if (cf)
                CFRelease(cf);
            }
            else
            {
              fpfs_SendBufferQueueToChomper(v117, (uint64_t)cf);
              v27 = (_QWORD *)v31;
            }
LABEL_65:
            v10 = *(_QWORD *)(v10 + 88);
            if (!v10)
            {
              v2 = (const __CFArray *)v115;
              v5 = (_QWORD *)MEMORY[0x1E0C9AE50];
              v28 = v112;
              goto LABEL_73;
            }
            goto LABEL_33;
          }
        }
        memset(&time1, 0, sizeof(time1));
        CMSampleBufferGetOutputPresentationTimeStamp(&time1, v33);
        memset(&time2, 0, sizeof(time2));
        CMSampleBufferGetOutputDecodeTimeStamp(&time2, v33);
        rhs = time2;
        v122 = v129;
        v35 = CMTimeCompare(&rhs, &v122);
        rhs = time1;
        v122 = v129;
        v36 = CMTimeCompare(&rhs, &v122);
        v37 = v36;
        if (v35 < 0 && (v36 & 0x80000000) == 0)
        {
          if (fpfs_IsVideoSync(v33))
            goto LABEL_53;
          if (!fpfs_IsVideoDependedOnByOthers(v33))
            goto LABEL_43;
          fpfs_DoNotDisplay(v33);
        }
        if (v35 < 0)
        {
LABEL_47:
          if (v34)
          {
            CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v10 + 40), v34);
            CFRelease(v34);
          }
          v34 = (void *)CFRetain(v33);
          goto LABEL_50;
        }
LABEL_43:
        if ((v37 & 0x80000000) == 0)
        {
          rhs = time2;
          v122 = v129;
          if ((CMTimeCompare(&rhs, &v122) & 0x80000000) == 0)
            goto LABEL_53;
          goto LABEL_50;
        }
        goto LABEL_47;
      }
    }
    fpfs_DeleteTrack(v115);
    v27 = 0;
  }
  else
  {
    RenderingTrackofType = fpfs_LastRenderingTrackofType((uint64_t)v2, 1986618469, v1);
    if (RenderingTrackofType)
    {
      if (*(_QWORD *)(RenderingTrackofType + 64) == *(_QWORD *)(v1 + 64))
      {
        v23 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v1 + 72));
        memset(&rhs, 0, sizeof(rhs));
        CMSampleBufferGetOutputPresentationTimeStamp(&rhs, v23);
        if (dword_1EE2A2A88)
        {
          LODWORD(v122.value) = 0;
          LOBYTE(cf) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)cf);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v5 = (_QWORD *)MEMORY[0x1E0C9AE50];
        }
      }
    }
    v27 = 0;
    v28 = 0;
  }
LABEL_73:
  started = fpfs_EnsureRenderChainForTrack(*DerivedStorage, v1, 1);
  if ((_DWORD)started)
    return started;
  v41 = fpfs_LastRenderingTrackofType((uint64_t)v2, 1986618469, v1);
  if (v41)
  {
    v42 = *(_QWORD *)(v1 + 96);
    if (*(_QWORD *)(v41 + 96) != v42)
    {
      v43 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v42 + 32));
      v44 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v44)
        v44(v43, CFSTR("Suspended"), *v5);
    }
  }
  fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(v1 + 96), (uint64_t)CFSTR("VideoDecoderIsSecondary"), *MEMORY[0x1E0C9AE40]);
  if (v28)
  {
    v45 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(v1 + 96) + 32));
    v46 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v46)
      v46(v45, CFSTR("IsTimebaseStarter"), *v5);
  }
  v118 = v1;
  if (v27)
  {
    v47 = v27[1];
    if (v47 != v1)
    {
      while (v47)
      {
        v48 = *(_QWORD *)(v47 + 8);
        if (*(_DWORD *)(v47 + 32) == 1986618469)
        {
          if (v48)
            v49 = *(_QWORD *)(v48 + 16);
          else
            v49 = -1;
          if (dword_1EE2A2A88)
          {
            LODWORD(rhs.value) = 0;
            LOBYTE(v122.value) = 0;
            v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = rhs.value;
            if (os_log_type_enabled(v50, v122.value))
              v52 = value;
            else
              v52 = value & 0xFFFFFFFE;
            if (v52)
            {
              v53 = *(const void **)v116;
              if (*(_QWORD *)v116)
                v54 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v54 = "";
              if (v115)
                v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v55 = "";
              v56 = *(_QWORD *)(v47 + 16);
              v57 = *(_QWORD *)(v118 + 16);
              LODWORD(time2.value) = 136316674;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishVideoSync";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = v53;
              HIWORD(time2.epoch) = 2082;
              v134 = v54;
              v135 = 2048;
              v136 = v115;
              v137 = 2082;
              v138 = v55;
              v139 = 1024;
              *(_DWORD *)v140 = v56;
              *(_WORD *)&v140[4] = 1024;
              *(_DWORD *)&v140[6] = v57;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v58 = *(_QWORD *)(v47 + 96);
          v1 = v118;
          if (v58 && v58 != v27[12])
          {
            if (*(_QWORD *)(v58 + 64))
            {
              CFRelease(*(CFTypeRef *)(v58 + 64));
              v58 = *(_QWORD *)(v47 + 96);
              *(_QWORD *)(v58 + 64) = 0;
            }
            if (v58 == *(_QWORD *)(v118 + 96))
              fpfs_FlushPrimaryAndAuxRenderChains(v58, 1);
          }
          fpfs_DeleteTrack(*(_QWORD *)v47);
          if ((v49 & 0x8000000000000000) == 0)
          {
            v48 = *(_QWORD *)(v116 + 1040);
            if (v48)
            {
              while (*(_QWORD *)(v48 + 16) != v49)
              {
                v48 = *(_QWORD *)(v48 + 8);
                if (!v48)
                  goto LABEL_112;
              }
            }
            else
            {
LABEL_112:
              v48 = v27[1];
            }
          }
        }
        v47 = v48;
        if (v48 == v1)
          goto LABEL_114;
      }
      return FigSignalErrorAt();
    }
  }
LABEL_114:
  IsEmpty = CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(v1 + 72));
  v60 = (CMTime *)MEMORY[0x1E0CA2E28];
  if (IsEmpty)
  {
    v142 = *MEMORY[0x1E0CA2E28];
    flags = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 12);
    timescale = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 8);
    epoch = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  }
  else
  {
    CMBufferQueueGetFirstPresentationTimeStamp(&time1, *(CMBufferQueueRef *)(v1 + 72));
    v142 = time1.value;
    flags = time1.flags;
    timescale = time1.timescale;
    epoch = time1.epoch;
  }
  if (!*(_BYTE *)(v1 + 183))
  {
    v126 = *(CMTime *)(v1 + 272);
    v63 = v115;
LABEL_128:
    CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(v1 + 72));
    goto LABEL_129;
  }
  v126 = *v60;
  v63 = v115;
  if ((flags & 0x1D) != 1)
    goto LABEL_128;
  time1 = *(CMTime *)(v1 + 272);
  time2.value = v142;
  time2.timescale = timescale;
  time2.flags = flags;
  time2.epoch = epoch;
  if (CMTimeCompare(&time1, &time2) < 1)
    goto LABEL_128;
  if (dword_1EE2A2A88)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(v122.value) = 0;
    v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v65 = rhs.value;
    if (os_log_type_enabled(v64, v122.value))
      v66 = v65;
    else
      v66 = v65 & 0xFFFFFFFE;
    if (v66)
    {
      v67 = *(const void **)v116;
      if (*(_QWORD *)v116)
        v68 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v68 = "";
      v113 = v68;
      if (v115)
        v105 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v105 = "";
      v109 = v105;
      v1 = v118;
      v106 = *(_QWORD *)(v118 + 16);
      time1.value = v142;
      time1.timescale = timescale;
      time1.flags = flags;
      time1.epoch = epoch;
      Seconds = CMTimeGetSeconds(&time1);
      time1 = *(CMTime *)(v118 + 272);
      v108 = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136316930;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishVideoSync";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = v67;
      HIWORD(time2.epoch) = 2082;
      v134 = v113;
      v135 = 2048;
      v136 = v115;
      v137 = 2082;
      v138 = v109;
      v139 = 1024;
      *(_DWORD *)v140 = v106;
      *(_WORD *)&v140[4] = 2048;
      *(Float64 *)&v140[6] = Seconds;
      *(_WORD *)&v140[14] = 2048;
      *(Float64 *)&v140[16] = v108;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v63 = v115;
  }
  fpfs_FlushPrimaryAndAuxRenderChains(*(_QWORD *)(v1 + 96), 0);
  *(_BYTE *)(v1 + 185) = 1;
LABEL_129:
  v69 = v116;
  if (v27)
    v70 = v27[2];
  else
    v70 = -1;
  CMTimeMake(&v120, 1, 2);
  time1 = *v114;
  time2 = v126;
  started = fpfs_StartTrackPlaying((const void **)v116, v1, &time1, &time2, &v120);
  if ((_DWORD)started)
    return started;
  if (v27)
  {
    for (i = *(_QWORD **)(v116 + 1040); i; i = (_QWORD *)i[1])
    {
      if (i[2] == v70)
        break;
    }
  }
  else
  {
    i = 0;
  }
  v72 = fpfs_LastRenderingTrackofType(v63, 1986618469, v1);
  if (v72)
  {
    v73 = v72;
    v74 = *(_QWORD *)(v72 + 96);
    if (v74)
    {
      if (CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(v74 + 40)) <= 0)
      {
        FigRetainProxyRetain();
        v75 = *(const void **)(*(_QWORD *)(v73 + 96) + 32);
        if (v75)
          CFRetain(v75);
        DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
        fpfsi_deferredMarkerBufferConsumed(DefaultLocalCenter, *(_QWORD *)(v116 + 16), v77, *(const void **)(*(_QWORD *)(v73 + 96) + 32), *(CFDictionaryRef *)(*(_QWORD *)(v73 + 96) + 64));
      }
    }
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(v122.value) = 0;
    v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v79 = rhs.value;
    if (os_log_type_enabled(v78, v122.value))
      v80 = v79;
    else
      v80 = v79 & 0xFFFFFFFE;
    if (v80)
    {
      v81 = *(const void **)v116;
      if (*(_QWORD *)v116)
        v82 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v82 = "";
      if (v115)
        v83 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v83 = "";
      fpfs_GetTime(v116, (uint64_t)&v119);
      v84 = CMTimeGetSeconds(&v119);
      time1 = *v114;
      v85 = CMTimeGetSeconds(&time1);
      time1 = *(CMTime *)(v1 + 272);
      v86 = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136316930;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishVideoSync";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = v81;
      HIWORD(time2.epoch) = 2082;
      v134 = v82;
      v135 = 2048;
      v136 = v115;
      v137 = 2082;
      v138 = v83;
      v69 = v116;
      v139 = 2048;
      *(Float64 *)v140 = v84;
      *(_WORD *)&v140[8] = 2048;
      *(Float64 *)&v140[10] = v85;
      *(_WORD *)&v140[18] = 2048;
      *(Float64 *)&v140[20] = v86;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v87 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (v87)
  {
    v89 = v87;
    MEMORY[0x19402F228](v87, v88);
    FigGetAllocatorForMedia();
    v90 = FigThreadCopyProperty();
    MEMORY[0x19402F228](v90);
    FigThreadSetProperty();
    CFRelease(v89);
  }
  v91 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v1 + 72));
  if (v91)
  {
    v92 = (void *)v91;
    do
    {
      v93 = fpfs_RenderBuffer(v1, v92);
      CFRelease(v92);
      v92 = (void *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v1 + 72));
    }
    while (v92);
  }
  else
  {
    v93 = 0;
  }
  v94 = (const void *)v115;
  if (*(_BYTE *)(v1 + 182) && !*(_QWORD *)(v1 + 112))
    fpfs_StopFeedingTrack(v1, 0, 1);
  if (i)
  {
    if (i[14])
    {
      *(_OWORD *)&rhs.value = v111;
      rhs.epoch = v110;
      fpfs_scheduleForwardEndTimeForTrack(v69, (uint64_t)i, (uint64_t)&rhs);
      if (dword_1EE2A2A88)
      {
        LODWORD(v122.value) = 0;
        LOBYTE(cf) = 0;
        v95 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v96 = v122.value;
        if (os_log_type_enabled(v95, (os_log_type_t)cf))
          v97 = v96;
        else
          v97 = v96 & 0xFFFFFFFE;
        if (v97)
        {
          v98 = *(_QWORD *)v69;
          if (*(_QWORD *)v69)
            v99 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v99 = "";
          if (v115)
            v100 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v100 = "";
          v101 = i[2];
          time1 = rhs;
          v102 = CMTimeGetSeconds(&time1);
          LODWORD(time2.value) = 136316674;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishVideoSync";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v98;
          HIWORD(time2.epoch) = 2082;
          v134 = v99;
          v135 = 2048;
          v136 = v115;
          v137 = 2082;
          v138 = v100;
          v139 = 1024;
          *(_DWORD *)v140 = v101;
          *(_WORD *)&v140[4] = 2048;
          *(Float64 *)&v140[6] = v102;
          _os_log_send_and_compose_impl();
          v69 = v116;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v94 = (const void *)v115;
      }
    }
    else
    {
      fpfs_StopFeedingTrack(i, 0, 1);
    }
  }
  updated = fpfs_UpdateDimensions(v94, 1);
  if (v128)
  {
    MEMORY[0x19402F228](updated);
    FigThreadSetProperty();
    if (v128)
      CFRelease(v128);
  }
  if (*(_BYTE *)(v1 + 184) && (*(_BYTE *)(v69 + 1524) & 1) != 0)
  {
    time1 = *(CMTime *)(v69 + 1512);
    *(_QWORD *)(v69 + 1528) = v110;
    *(_OWORD *)(v69 + 1512) = v111;
    return fpfs_StepIFrame(v1, (__int128 *)&time1.value);
  }
  return v93;
}

uint64_t fpfs_CheckAudioSync(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, CMTime *a4, CMTime *a5, int a6, CMTime *a7)
{
  uint64_t DerivedStorage;
  uint64_t TrackOfType;
  uint64_t v16;
  CMTimeEpoch v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  CMTimeEpoch epoch;
  CMTime v24;
  CMTime v25;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;
  CMTime v29;
  CMTime v30;
  CMTime v31;

  if (!*(_BYTE *)(a2 + 183))
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  TrackOfType = fpfs_LastTrackOfType(*(_QWORD *)a2, 1936684398, a2);
  v16 = TrackOfType;
  if (TrackOfType)
  {
    *(_OWORD *)&v31.value = *(_OWORD *)(TrackOfType + 192);
    v17 = *(_QWORD *)(TrackOfType + 208);
  }
  else
  {
    *(_OWORD *)&v31.value = *MEMORY[0x1E0CA2E28];
    v17 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  }
  v31.epoch = v17;
  memset(&v30, 0, sizeof(v30));
  v29 = *a4;
  v19 = *(_QWORD *)(a2 + 48);
  v20 = *(unsigned __int8 *)(a2 + 180);
  if (a6)
    v21 = 0;
  else
    v21 = v19 == *(_QWORD *)(a1 + 16 * v20 + 1000);
  v22 = !v21;
  if (!TrackOfType)
  {
    if (*(float *)(a1 + 840) == 0.0)
      goto LABEL_27;
    if (v19 != *(_QWORD *)(a1 + 16 * v20 + 992))
    {
      CMTimeMake(&v24, 250, 1000);
      time1 = *a4;
      CMTimeAdd(&v29, &time1, &v24);
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  if ((*(_BYTE *)(TrackOfType + 228) & 1) != 0)
  {
    memset(&time1, 0, sizeof(time1));
    lhs = *(CMTime *)(TrackOfType + 216);
    rhs = *(CMTime *)gFSPAudioCrossfadeDuration;
    CMTimeSubtract(&time1, &lhs, &rhs);
    lhs = *a5;
    rhs = time1;
    if (CMTimeCompare(&lhs, &rhs) >= 1)
      *a5 = time1;
  }
  if (*(float *)(a1 + 840) == 0.0 && !*(_BYTE *)(v16 + 423))
    goto LABEL_25;
  if ((*(_BYTE *)(v16 + 228) & 1) == 0 || !*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
  {
LABEL_24:
    CMTimeMake(&v25, 2, 1);
    time1 = *a4;
    CMTimeAdd(&v29, &time1, &v25);
    if (!v16)
      goto LABEL_27;
    goto LABEL_25;
  }
  v29 = *(CMTime *)(v16 + 216);
LABEL_25:
  if (fpfs_canCrossfade(DerivedStorage, v16, a2))
  {
    lhs = *a5;
    rhs = *(CMTime *)gFSPAudioCrossfadeDuration;
    CMTimeSubtract(&time1, &lhs, &rhs);
    *(_OWORD *)&a5->value = *(_OWORD *)&time1.value;
    epoch = time1.epoch;
    a5->epoch = time1.epoch;
    *(_OWORD *)&lhs.value = *(_OWORD *)&a5->value;
    lhs.epoch = epoch;
    *(_OWORD *)&rhs.value = kAudioRampingDownSilenceDuration;
    rhs.epoch = 0;
    CMTimeSubtract(&time1, &lhs, &rhs);
    *a5 = time1;
  }
LABEL_27:
  time1 = v29;
  lhs = *a5;
  if (CMTimeCompare(&time1, &lhs) >= 1)
    v29 = *a5;
  time1 = v29;
  lhs = v31;
  if (CMTimeCompare(&time1, &lhs) < 0)
    v29 = v31;
  time1 = v29;
  lhs = *(CMTime *)(a2 + 296);
  if (CMTimeCompare(&time1, &lhs) < 0)
    v29 = *(CMTime *)(a2 + 296);
  if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a2 + 72)))
  {
    if (a3)
      CMSampleBufferGetOutputPresentationTimeStamp(&v30, a3);
    else
      v30 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  }
  else
  {
    CMBufferQueueGetMinPresentationTimeStamp(&v30, *(CMBufferQueueRef *)(a2 + 72));
  }
  time1 = v30;
  lhs = *a5;
  if (CMTimeCompare(&time1, &lhs) > 0)
  {
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 72), a3);
    result = 0;
    if (!a7)
      return result;
    goto LABEL_40;
  }
  time1 = v29;
  if (fpfs_IsAudioTrackReadyToStart(a2, a3, &time1, v22))
    result = v22;
  else
    result = 0;
  if (a7)
LABEL_40:
    *a7 = v29;
  return result;
}

BOOL fpfs_canCrossfade(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  _BOOL8 result;

  v3 = gFSPIsCrossfadeOn == 1 && *(_QWORD *)(a1 + 504) == 0;
  result = 0;
  if (v3
    && *(_DWORD *)(a2 + 32) == 1936684398
    && *(_DWORD *)(a3 + 32) == 1936684398
    && !fpfs_WantAudioHardwarePassthroughForTrack(a2, 0)
    && !fpfs_WantAudioHardwarePassthroughForTrack(a3, 0))
  {
    CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561)
      || !CMAudioFormatDescriptionIsAtmos(*(const opaqueCMFormatDescription **)(a2 + 40))
      && !CMAudioFormatDescriptionIsAtmos(*(const opaqueCMFormatDescription **)(a3 + 40)))
    {
      return 1;
    }
  }
  return result;
}

CMTime *fpfs_IsAudioTrackReadyToStart(uint64_t a1, opaqueCMSampleBuffer *a2, CMTime *a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CMTimeEpoch v10;
  CMTime *result;
  uint64_t v12;
  uint64_t v13;
  float v14;
  CMTime rhs;
  CMTime lhs;
  CMTime v17;
  CMTime v18;
  CMTime v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CMBaseObjectGetDerivedStorage();
  memset(&v18, 0, sizeof(v18));
  memset(&v17, 0, sizeof(v17));
  lhs = *a3;
  rhs = *(CMTime *)(a1 + 396);
  CMTimeSubtract(&v19, &lhs, &rhs);
  if (!a2)
  {
    *(_OWORD *)&v17.value = *(_OWORD *)(a1 + 216);
    v10 = *(_QWORD *)(a1 + 232);
LABEL_5:
    v17.epoch = v10;
    goto LABEL_7;
  }
  fpfs_GetEndOutputPresentationTimeStamp(a2, &v17);
  lhs = v17;
  rhs = v19;
  if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0)
  {
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a1 + 72), a2);
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a1 + 420))
  {
    CMBufferQueueReset(*(CMBufferQueueRef *)(a1 + 72));
    *(_OWORD *)&v17.value = *MEMORY[0x1E0CA2E28];
    v10 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
    goto LABEL_5;
  }
LABEL_7:
  lhs = *a3;
  fpfs_TrimAudioTrack(a1, &lhs);
  if (!*(_QWORD *)(a1 + 384) || (result = (CMTime *)fpfs_isDecryptorReady(a1), (_DWORD)result))
  {
    if (*(_BYTE *)(DerivedStorage + 2872) || *(_BYTE *)(v9 + 523))
      return 0;
    result = *(CMTime **)(v9 + 536);
    if (result)
    {
      result = (CMTime *)FPSupport_IsAnAudioDeviceAvailable((uint64_t)result);
      if ((_DWORD)result)
      {
        if (*(float *)(DerivedStorage + 840) == 0.0)
        {
          lhs = v17;
          rhs = *a3;
          return (CMTime *)(CMTimeCompare(&lhs, &rhs) > 0);
        }
        v14 = 0.0;
        lhs = *a3;
        fpfs_GetTrackStartupQueueDuration(a1, &lhs, (uint64_t)&v18);
        v12 = *(_QWORD *)a1;
        v13 = (1 << *(_BYTE *)(a1 + 180));
        lhs = v18;
        LODWORD(result) = fpfs_CheckCanKeepUp(v12, (uint64_t)&lhs, MEMORY[0x1E0CA2E18], v13, 0, &v14, 0, 0);
        result = (_DWORD)result ? (CMTime *)result : (CMTime *)(v14 >= 1.0);
        if (a4 && !(_DWORD)result)
        {
          if ((*(_DWORD *)(a1 + 228) & 0x1D) != 1)
            return 0;
          result = (CMTime *)fpfs_LastTrackOfType(*(_QWORD *)a1, *(_DWORD *)(a1 + 32), a1);
          if (result)
          {
            lhs = *(CMTime *)(a1 + 216);
            rhs = result[9];
            return (CMTime *)(CMTimeCompare(&lhs, &rhs) >= 0);
          }
        }
      }
    }
  }
  return result;
}

opaqueCMSampleBuffer *fpfs_TrimAudioTrack(uint64_t a1, CMTime *a2)
{
  opaqueCMSampleBuffer *result;
  opaqueCMSampleBuffer *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMBufferRef v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime rhs;
  CMTime lhs;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  if (*(_BYTE *)(a1 + 420))
  {
    lhs = *a2;
    fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(a1, &lhs, (uint64_t)&v12);
  }
  else
  {
    lhs = *a2;
    rhs = *(CMTime *)(a1 + 396);
    CMTimeSubtract(&v12, &lhs, &rhs);
  }
  result = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 72));
  if (result)
  {
    v5 = result;
    do
    {
      memset(&v11, 0, sizeof(v11));
      memset(&v10, 0, sizeof(v10));
      CMSampleBufferGetPresentationTimeStamp(&v9, v5);
      lhs = *(CMTime *)(a1 + 128);
      CMTimeAdd(&v10, &v9, &lhs);
      lhs = v10;
      rhs = *a2;
      result = (opaqueCMSampleBuffer *)CMTimeCompare(&lhs, &rhs);
      if ((result & 0x80000000) == 0)
        break;
      CMSampleBufferGetDuration(&v8, v5);
      lhs = v10;
      CMTimeAdd(&v11, &lhs, &v8);
      lhs = v11;
      rhs = v12;
      result = (opaqueCMSampleBuffer *)CMTimeCompare(&lhs, &rhs);
      if ((int)result > 0)
        break;
      CMBaseObjectGetDerivedStorage();
      if (dword_1EE2A2A88 >= 2)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v7 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 72));
      if (v7)
        CFRelease(v7);
      result = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 72));
      v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t fpfs_CheckCanKeepUp(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  CMTime *DerivedStorage;
  CMTimeEpoch epoch;
  void (*v17)(CMTimeEpoch, CMTime *, CMTime *, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, unsigned __int8 *);
  uint64_t result;
  CMTime v19;
  CMTime v20;
  unsigned __int8 v21;
  CMTime v22;
  CMTime rhs;
  CMTime lhs;

  DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  memset(&v22, 0, sizeof(v22));
  lhs = *a3;
  rhs = DerivedStorage[49];
  CMTimeAdd(&v22, &lhs, &rhs);
  v21 = 0;
  epoch = DerivedStorage[38].epoch;
  if (epoch)
  {
    *(_OWORD *)&v20.value = *(_OWORD *)a2;
    v20.epoch = *(_QWORD *)(a2 + 16);
    v19 = v22;
    v17 = *(void (**)(CMTimeEpoch, CMTime *, CMTime *, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v17)
    {
      lhs = v20;
      rhs = v19;
      v17(epoch, &lhs, &rhs, a4, a5, a6, a7, a8, &v21);
      return v21;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (a6)
      *a6 = 0;
  }
  return result;
}

void fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(uint64_t a1@<X0>, CMTime *a2@<X2>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeEpoch v9;
  CMTime v10;
  CMTime rhs;
  CMTime lhs;
  CMTime v13;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = *a2;
  CMBaseObjectGetDerivedStorage();
  v6 = (_OWORD *)(a1 + 128);
  if ((*(_DWORD *)(a1 + 140) & 0x1D) == 1)
  {
    lhs = *a2;
    *(_OWORD *)&rhs.value = *v6;
    rhs.epoch = *(_QWORD *)(a1 + 144);
    CMTimeSubtract(&v13, &lhs, &rhs);
  }
  rhs = v13;
  FigDecodeTimeForAudioRandomAccessInBufferQueue((uint64_t)&lhs);
  value = lhs.value;
  flags = lhs.flags;
  timescale = lhs.timescale;
  if ((lhs.flags & 0x1D) == 1)
  {
    epoch = lhs.epoch;
    *(_QWORD *)a3 = value;
    *(_DWORD *)(a3 + 8) = timescale;
    *(_DWORD *)(a3 + 12) = flags;
    *(_QWORD *)(a3 + 16) = epoch;
    if ((*(_DWORD *)(a1 + 140) & 0x1D) != 1)
      return;
    rhs.value = value;
    rhs.timescale = timescale;
    rhs.flags = flags;
    rhs.epoch = epoch;
    *(_OWORD *)&v10.value = *v6;
    v10.epoch = *(_QWORD *)(a1 + 144);
    CMTimeAdd(&lhs, &rhs, &v10);
    *(_OWORD *)a3 = *(_OWORD *)&lhs.value;
    v9 = lhs.epoch;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    v9 = a2->epoch;
  }
  *(_QWORD *)(a3 + 16) = v9;
}

uint64_t fpfs_FirstCandidateSyncTrackOfDiscontinuityDomainAndType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  CMTime v7;
  CMTime time1;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
  if (v3)
    v4 = v3 == a2;
  else
    v4 = 1;
  if (v4)
    return 0;
  while (1)
  {
    if (*(_DWORD *)(v3 + 152) == 6
      && *(_DWORD *)(v3 + 32) == *(_DWORD *)(a2 + 32)
      && *(_QWORD *)(v3 + 64) == *(_QWORD *)(a2 + 64))
    {
      time1 = *(CMTime *)(a2 + 272);
      v7 = *(CMTime *)(v3 + 216);
      if (CMTimeCompare(&time1, &v7) < 0)
        break;
    }
    v3 = *(_QWORD *)(v3 + 8);
    if (v3)
      v5 = v3 == a2;
    else
      v5 = 1;
    if (v5)
      return 0;
  }
  return v3;
}

uint64_t fpfs_GetFirstNonMarkerSBuf(opaqueCMSampleBuffer *a1, opaqueCMSampleBuffer **a2)
{
  if (fpfs_IsMarkerOnly(a1))
    return 0;
  *a2 = a1;
  return 0xFFFFFFFFLL;
}

BOOL fpfs_IsVideoDependedOnByOthers(opaqueCMSampleBuffer *a1)
{
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v3;
  const void *v4;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (SampleAttachmentsArray
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) != 0
    && (v3 = ValueAtIndex,
        v4 = (const void *)*MEMORY[0x1E0CA2618],
        CFDictionaryContainsKey(ValueAtIndex, (const void *)*MEMORY[0x1E0CA2618])))
  {
    return CFDictionaryGetValue(v3, v4) == (const void *)*MEMORY[0x1E0C9AE50];
  }
  else
  {
    return 1;
  }
}

double fpfs_GetFirstPTSInRange(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  double result;
  CMTime *v5;
  CMTime v6;
  CMTime time2;
  CMTime time1;
  CMTime v9;

  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputPresentationTimeStamp(&v9, a1);
  if (!fpfs_IsMarkerOnly(a1))
  {
    v5 = a2 + 1;
    time1 = v9;
    time2 = a2[1];
    if (CMTimeCompare(&time1, &time2) < 1
      || (CMSampleBufferGetOutputDecodeTimeStamp(&v6, a1),
          *(_OWORD *)&time1.value = *(_OWORD *)&v5->value,
          time1.epoch = a2[1].epoch,
          CMTimeCompare(&v6, &time1) <= 0))
    {
      time1 = v9;
      time2 = *a2;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        time1 = v9;
        *(_OWORD *)&time2.value = *(_OWORD *)&v5->value;
        time2.epoch = a2[1].epoch;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          time1 = v9;
          time2 = a2[2];
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            result = *(double *)&v9.value;
            a2[2] = v9;
          }
        }
      }
    }
  }
  return result;
}

CMTime *fpfs_GetStartupDurationOfType@<X0>(CMTime *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  CMTimeScale timescale;
  CMTime v6;
  CMTime rhs;
  CMTime v8;

  v2 = (uint64_t)result;
  v4 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  timescale = result[1].timescale;
  do
  {
    if (*(_DWORD *)(v2 + 32) == timescale)
    {
      v8 = *(CMTime *)(v2 + 192);
      fpfs_GetTrackStartupQueueDuration(v2, &v8, (uint64_t)&rhs);
      v6 = *(CMTime *)a2;
      result = CMTimeAdd(&v8, &v6, &rhs);
      *(CMTime *)a2 = v8;
    }
    v2 = *(_QWORD *)(v2 + 8);
  }
  while (v2);
  return result;
}

CMTime *fpfs_TimeAfterPlayback@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, CMTime *a3@<X2>, CMTime *a4@<X8>)
{
  CMTime v5;
  CMTime lhs;

  if (*(float *)(a1 + 108) >= 0.0)
  {
    lhs = *a2;
    v5 = *a3;
    return CMTimeAdd(a4, &lhs, &v5);
  }
  else
  {
    lhs = *a2;
    v5 = *a3;
    return CMTimeSubtract(a4, &lhs, &v5);
  }
}

uint64_t fpfs_CountNonDroppableUntil(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  CMTime v5;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v9;
  CMTime v10;

  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetOutputDecodeTimeStamp(&v10, a1);
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputDuration(&v9, a1);
  if (!fpfs_IsMarkerOnly(a1))
  {
    time1 = v10;
    time2 = *(CMTime *)a2;
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      if (fpfs_IsVideoDependedOnByOthers(a1))
        ++*(_QWORD *)(a2 + 48);
      if ((v9.flags & 1) != 0)
      {
        ++*(_QWORD *)(a2 + 56);
        time2 = *(CMTime *)(a2 + 24);
        rhs = v9;
        CMTimeAdd(&time1, &time2, &rhs);
        *(CMTime *)(a2 + 24) = time1;
      }
    }
    else
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&v5, a1);
      time1 = *(CMTime *)a2;
      if (CMTimeCompare(&v5, &time1) > 0)
        return 0xFFFFFFFFLL;
    }
  }
  return 0;
}

double fpfs_VideoSyncSearch(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  double result;
  CMTime *v5;
  CMTime v6;
  CMTime lhs;
  CMTime v8;
  CMTime v9;

  memset(&v9, 0, sizeof(v9));
  memset(&v8, 0, sizeof(v8));
  if (fpfs_IsVideoSync(a1))
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v9, a1);
    lhs = v9;
    v6 = *(CMTime *)(a2 + 24);
    CMTimeAdd(&v8, &lhs, &v6);
    lhs = v9;
    v6 = *(CMTime *)(a2 + 120);
    if (CMTimeCompare(&lhs, &v6) < 0)
    {
      lhs = *(CMTime *)a2;
      v6 = v8;
      if (CMTimeCompare(&lhs, &v6) <= 0)
      {
        lhs = v9;
        v6 = *(CMTime *)(a2 + 48);
        if (CMTimeCompare(&lhs, &v6) >= 1)
        {
          v5 = (CMTime *)(a2 + 72);
LABEL_10:
          result = *(double *)&v9.value;
          *v5 = v9;
          return result;
        }
      }
      v5 = (CMTime *)(a2 + 96);
      if ((*(_DWORD *)(a2 + 108) & 0x1D) != 1)
        goto LABEL_10;
      lhs = v9;
      v6 = *(CMTime *)a2;
      if (CMTimeCompare(&lhs, &v6) <= 0)
        goto LABEL_10;
    }
  }
  return result;
}

uint64_t fpfs_CompleteTrialSwitch(const __CFArray *a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *DerivedStorage;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  _QWORD *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  uint64_t i;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  _BYTE *v36;
  CMTime v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *a3 = 0;
  result = DerivedStorage[220];
  if (result)
  {
    v8 = DerivedStorage[130];
    if (v8)
    {
      LOBYTE(v9) = 0;
      do
      {
        v10 = *(unsigned __int8 *)(v8 + 180);
        if (v10 < 3)
        {
          v11 = DerivedStorage[2 * v10 + 125];
          v12 = v11;
        }
        else
        {
          FigSignalErrorAt();
          v10 = *(unsigned __int8 *)(v8 + 180);
          v11 = DerivedStorage[2 * v10 + 125];
          v12 = -1;
        }
        v13 = *(_QWORD *)(v8 + 48);
        if (v13 == v11)
          v14 = 1 << v10;
        else
          LOBYTE(v14) = 0;
        if (v13 == DerivedStorage[2 * v10 + 124] && v12 != 0)
          fpfs_StopFeedingTrack(v8, 0, 1);
        LOBYTE(v9) = v14 | v9;
        v8 = *(_QWORD *)(v8 + 8);
      }
      while (v8);
      result = DerivedStorage[220];
      v9 = v9;
    }
    else
    {
      v9 = 0;
    }
    FigAlternateGetPeakBitRate(result);
    FigAlternateGetPeakBitRate(DerivedStorage[212]);
    v16 = *DerivedStorage;
    v17 = DerivedStorage[220];
    v37 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    result = fpfs_SetAlternateWithContext(v16, a1, v17, 9);
    if (!(_DWORD)result)
    {
      v36 = a3;
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v19 = 0;
      v20 = 125;
      v21 = 944;
      v22 = 143;
      do
      {
        v23 = (const void *)DerivedStorage[v20];
        if (v23)
        {
          StoreCurrentManifold((uint64_t)DerivedStorage, v19, 0, v23);
          StoreCurrentManifold((uint64_t)DerivedStorage, v19, 1u, 0);
          v24 = (char *)DerivedStorage + v19;
          v24[3058] = *((_BYTE *)DerivedStorage + v19 + 3061);
          v24[3061] = 0;
          v25 = (_DWORD *)((char *)DerivedStorage + v21);
          *v25 = *(_DWORD *)((char *)DerivedStorage + v21 + 12);
          v25[6] = *(_DWORD *)((char *)DerivedStorage + v21 + 36);
          DerivedStorage[v22 - 3] = DerivedStorage[v22];
        }
        else
        {
          v26 = (char *)DerivedStorage + v19;
          v26[3058] = *((_BYTE *)DerivedStorage + v19 + 3061);
          v26[3061] = 0;
        }
        DerivedStorage[v22] = 0;
        v27 = &DerivedStorage[v19];
        v28 = (const void *)v27[22];
        v29 = (const void *)v27[25];
        v27[22] = v29;
        if (v29)
          CFRetain(v29);
        if (v28)
          CFRelease(v28);
        v30 = (const void *)v27[25];
        if (v30)
        {
          CFRelease(v30);
          v27[25] = 0;
        }
        if (((v9 >> v19) & 1) != 0)
          fpfs_DeleteStrandedTracksUponSwitch((uint64_t)a1, v19, a2);
        ++v19;
        v20 += 2;
        v21 += 4;
        ++v22;
      }
      while (v19 != 3);
      for (i = DerivedStorage[130]; i; i = *(_QWORD *)(i + 8))
      {
        if (*(_DWORD *)(i + 152) == 1)
        {
          v32 = DerivedStorage[130];
          v33 = v32 == i;
          if (v32)
            v34 = v32 == i;
          else
            v34 = 1;
          if (v34)
          {
LABEL_47:
            if (!v32 || v33)
            {
              memset(&v37, 0, sizeof(v37));
              CMBufferQueueGetMinPresentationTimeStamp(&v37, *(CMBufferQueueRef *)(i + 72));
              if ((v37.flags & 1) != 0)
                *(CMTime *)(i + 192) = v37;
              if (*(_QWORD *)(i + 264))
                fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(i + 264));
              fpfs_ChangeTrackState(i, 0);
              fpfs_ChangeTrackState(i, 3u);
              if (i == a2)
                *v36 = 1;
              continue;
            }
          }
          else
          {
            while (*(_DWORD *)(v32 + 152) != 6 || *(_QWORD *)(v32 + 64) != *(_QWORD *)(i + 64))
            {
              v32 = *(_QWORD *)(v32 + 8);
              v33 = v32 == i;
              if (v32)
                v35 = v32 == i;
              else
                v35 = 1;
              if (v35)
                goto LABEL_47;
            }
          }
          if (i != a2)
            fpfs_CompleteTrialSync((uint64_t)a1, i);
        }
      }
      fpfs_ResolveAllWaitingTracks(a1);
      return 0;
    }
  }
  return result;
}

uint64_t fpfs_StartTrackPlaying(const void **a1, uint64_t a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  CMTimeEpoch epoch;
  const void *v9;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v12;
  uint64_t RenderingTrackofType;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t FigBaseObject;
  uint64_t (*v24)(uint64_t, const __CFString *, _QWORD);
  uint64_t v25;
  void *v26;
  const void *v27;
  BOOL v28;
  CMTimeFlags flags;
  opaqueCMSampleBuffer *v30;
  opaqueCMSampleBuffer *v31;
  CMTime *v32;
  _BOOL4 v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  const char *v37;
  const char *v38;
  Float64 Seconds;
  Float64 v40;
  opaqueCMSampleBuffer *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  NSObject *v45;
  unsigned int v46;
  unsigned int v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  Float64 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v60;
  const void *DescriptionString;
  NSObject *v62;
  unsigned int v63;
  unsigned int v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  Float64 v68;
  double v69;
  double v70;
  Float64 v71;
  Float64 v72;
  CMTimeEpoch v73;
  NSObject *v74;
  unsigned int v75;
  unsigned int v76;
  const char *v77;
  Float64 v78;
  Float64 v79;
  Float64 v80;
  __CFString *VideoLayoutLoggingStringFromCollection;
  NSObject *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  CMTimeEpoch v89;
  uint64_t v90;
  CMTimeFlags v91;
  uint64_t v92;
  CMTimeEpoch v93;
  CMTimeFlags v95;
  CMTimeFlags v96;
  uint64_t v97;
  const void *v98;
  uint64_t v99;
  int v100;
  const char *v102;
  char v103;
  const char *v104;
  CMTime time;
  CMTime rhs;
  os_log_type_t v107;
  CMTime v108;
  CMTime v109;
  CMTime v110;
  CMTime type;
  CMTime v112;
  CMTime v113;
  unsigned __int8 v114;
  CMTime refcon;
  const char *v116;
  __int16 v117;
  _BYTE v118[44];
  __int16 v119;
  double v120;
  __int16 v121;
  Float64 v122;
  __int16 v123;
  int v124;
  __int16 v125;
  Float64 v126;
  __int16 v127;
  const void *v128;
  CMTimeValue v129;
  CMTimeScale v130;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTime time1;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v114 = 0;
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v129 = value;
  v130 = timescale;
  *(_OWORD *)&v113.value = *MEMORY[0x1E0CA2E18];
  v113.epoch = epoch;
  v9 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v99 = *(_QWORD *)a2;
  v92 = *(_QWORD *)(a2 + 16);
  v103 = *(_BYTE *)(a2 + 420);
  v97 = (uint64_t)a1;
  v98 = v9;
  if (!fpfsi_isTrackInLists((uint64_t)a1, a2, 1u) && dword_1EE2A2A88)
  {
    LODWORD(v112.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = *(_DWORD *)(a2 + 32);
  if (v12 == 1668047728)
  {
    RenderingTrackofType = fpfs_LastRenderingTrackofType(v99, 1668047728, a2);
    v14 = RenderingTrackofType;
    if (RenderingTrackofType)
      v15 = *(_QWORD *)(RenderingTrackofType + 64) != *(_QWORD *)(a2 + 64);
    else
      v15 = 0;
    v12 = *(_DWORD *)(a2 + 32);
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  if (v12 == 1936684398)
  {
    v16 = fpfs_LastRenderingTrackofType(v99, 1936684398, a2);
    if (v16)
    {
      if (!*(_BYTE *)(v16 + 181))
        fpfs_EnqueueReleaseAfterDecoding(v16);
    }
  }
  v17 = fpfs_EnsureRenderChainForTrack(v9, a2, v15);
  if ((_DWORD)v17)
  {
    v18 = v17;
    if (dword_1EE2A2A88)
    {
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_StopPlayingItemWithOSStatus(DerivedStorage, v99, v18);
    return v18;
  }
  v20 = *(_DWORD *)(a2 + 32);
  if (v20 == 1986618469)
  {
    if (fpfs_ShouldTryToGrabHDRPlaybackBaton((uint64_t)v9, v99))
    {
      if (!fpfs_GrabPlayerHDRPlaybackBaton())
      {
        fpfsi_SwitchBetweenHDRAndSDR(v99, 1);
        v21 = FigSignalErrorAt();
        if ((_DWORD)v21)
          return v21;
      }
    }
    if (fpfs_ShouldTryToGrab4kPlaybackBaton((uint64_t)v9, v99))
    {
      if (!fpfs_GrabPlayer4kPlaybackBaton(v9))
      {
        fpfsi_SwitchBetween4kAndHD(v99, 1);
        v21 = FigSignalErrorAt();
        if ((_DWORD)v21)
          return v21;
      }
    }
    v20 = *(_DWORD *)(a2 + 32);
  }
  if (v20 == 1936684398)
  {
    if (!*(_BYTE *)(a2 + 423))
      *(_BYTE *)(a2 + 185) = 1;
    refcon = *a3;
    time1 = *a3;
    fpfs_TrimAudioTrack(a2, &time1);
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a2 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfsi_TrimAudioInQueue, &refcon);
    if (fpfs_FirstRenderingTrackofType(*(_QWORD *)a2, 1936684398) == a2)
    {
      v22 = fpfs_FirstRenderingTrackofType(*(_QWORD *)a2, 1986618469);
      if (!v22 || *(_QWORD *)(v22 + 64) >= *(_QWORD *)(a2 + 64))
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(a2 + 96) + 32));
        v24 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
        if (!v24)
          return 4294954514;
        v21 = v24(FigBaseObject, CFSTR("IsTimebaseStarter"), *MEMORY[0x1E0C9AE50]);
        if ((_DWORD)v21)
          return v21;
      }
    }
  }
  else if (v14 && v20 == 1668047728 && *(_QWORD *)(v14 + 96) == *(_QWORD *)(a2 + 96))
  {
    *(_BYTE *)(a2 + 185) = 0;
  }
  v25 = *(_QWORD *)(v97 + 1040);
  if (v25 && v25 != a2)
  {
    do
    {
      if (*(_QWORD *)(v25 + 96) == *(_QWORD *)(a2 + 96) && *(_DWORD *)(v25 + 152) == 6)
      {
        while (1)
        {
          v26 = (void *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v25 + 72));
          if (!v26)
            break;
          v27 = v26;
          v18 = fpfs_RenderBuffer(v25, v26);
          CFRelease(v27);
          if ((_DWORD)v18)
            return v18;
        }
      }
      v25 = *(_QWORD *)(v25 + 8);
      if (v25)
        v28 = v25 == a2;
      else
        v28 = 1;
    }
    while (!v28);
  }
  v21 = fpfs_UnsuspendVideoRenderingForTrack(a2, (char *)&v114);
  if ((_DWORD)v21)
    return v21;
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v30 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a2 + 72));
  if (!v30)
  {
    v43 = *(_OWORD *)&a3->value;
    *(_QWORD *)(a2 + 208) = a3->epoch;
    *(_OWORD *)(a2 + 192) = v43;
    v96 = flags;
    v91 = flags;
    v89 = epoch;
    v32 = a5;
LABEL_114:
    v44 = v97;
    if (!*(_BYTE *)(a2 + 182))
    {
      if (*(_DWORD *)(a2 + 32) == 1986618469)
        v49 = 7;
      else
        v49 = 4;
      fpfs_ChangeTrackState(a2, v49);
      goto LABEL_138;
    }
    fpfs_DeleteTrack(v99);
    return FigSignalErrorAt();
  }
  v31 = v30;
  v100 = 0;
  v91 = flags;
  v89 = epoch;
  v32 = a5;
  v90 = DerivedStorage;
  do
  {
    memset(&v112, 0, sizeof(v112));
    CMSampleBufferGetOutputPresentationTimeStamp(&v112, v31);
    memset(&type, 0, sizeof(type));
    fpfs_GetEndOutputPresentationTimeStamp(v31, &type);
    time1 = type;
    refcon = *a3;
    v33 = 0;
    if (!fpfs_TimeIsAfter(DerivedStorage, &time1, &refcon))
    {
      time1 = v112;
      refcon = *a3;
      if (!fpfs_TimeIsAtOrAfter(DerivedStorage, &time1, &refcon))
      {
        if (!*(_BYTE *)(a2 + 184)
          || CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(a2 + 72))
          || (CMSampleBufferGetDuration(&v110, v31), (v110.flags & 1) != 0)
          && (CMSampleBufferGetDuration(&v109, v31),
              *(_OWORD *)&time1.value = kSparseSampleDurationAllowance,
              time1.epoch = 0,
              (CMTimeCompare(&v109, &time1) & 0x80000000) == 0))
        {
          v33 = 1;
        }
      }
    }
    time1 = v112;
    refcon = *a4;
    if (CMTimeCompare(&time1, &refcon) < 0
      && (CMSampleBufferGetOutputDecodeTimeStamp(&v108, v31), time1 = *a4, CMTimeCompare(&v108, &time1) < 0)
      || v33 && *(_DWORD *)(a2 + 32) == 1986618469 && !fpfs_IsVideoDependedOnByOthers(v31))
    {
      CFRelease(v31);
    }
    else
    {
      if ((flags & 1) == 0)
      {
        value = v112.value;
        flags = v112.flags;
        timescale = v112.timescale;
        epoch = v112.epoch;
      }
      if (v33)
      {
        if (dword_1EE2A2A88 >= 3)
        {
          v95 = flags;
          LODWORD(rhs.value) = 0;
          v107 = OS_LOG_TYPE_DEFAULT;
          v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v35 = rhs.value;
          if (os_log_type_enabled(v34, v107))
            v36 = v35;
          else
            v36 = v35 & 0xFFFFFFFE;
          if (v36)
          {
            if (v98)
              v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v37 = "";
            if (v99)
              v38 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v38 = "";
            time1 = v112;
            Seconds = CMTimeGetSeconds(&time1);
            time1 = *a3;
            v40 = CMTimeGetSeconds(&time1);
            LODWORD(refcon.value) = 136316674;
            *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfs_StartTrackPlaying";
            LOWORD(refcon.flags) = 2048;
            *(_QWORD *)((char *)&refcon.flags + 2) = v98;
            HIWORD(refcon.epoch) = 2082;
            v116 = v37;
            v117 = 2048;
            *(_QWORD *)v118 = v99;
            *(_WORD *)&v118[8] = 2082;
            *(_QWORD *)&v118[10] = v38;
            *(_WORD *)&v118[18] = 2048;
            *(Float64 *)&v118[20] = Seconds;
            *(_WORD *)&v118[28] = 2048;
            *(Float64 *)&v118[30] = v40;
            _os_log_send_and_compose_impl();
            v32 = a5;
            DerivedStorage = v90;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          flags = v95;
        }
        fpfs_DoNotDisplay(v31);
      }
      else if (!v100)
      {
        if ((v112.flags & 1) != 0)
        {
          if ((v91 & 1) == 0)
          {
            v129 = v112.value;
            v130 = v112.timescale;
            v89 = v112.epoch;
            v91 = v112.flags;
          }
          if ((v32->flags & 0x1D) == 1)
          {
            refcon = *v32;
            rhs = v112;
            CMTimeAdd(&time1, &refcon, &rhs);
            *v32 = time1;
          }
          v100 = 1;
        }
        else
        {
          v100 = 0;
        }
      }
      if (v103)
      {
        time1.value = 0;
        if (FigCreateReplacementAudioSBufByOmittingLeadingDependentPackets(v31, 1, (CMSampleBufferRef *)&time1))
        {
          v41 = (opaqueCMSampleBuffer *)time1.value;
          if (time1.value)
            CFRetain((CFTypeRef)time1.value);
          CFRelease(v31);
          if (time1.value)
          {
            CFRelease((CFTypeRef)time1.value);
            time1.value = 0;
          }
          if (!v41)
          {
            v103 = 1;
            goto LABEL_103;
          }
        }
        else
        {
          v41 = v31;
        }
        v103 = CMSampleBufferGetNumSamples(v41) == 0;
        v31 = v41;
      }
      else
      {
        v103 = 0;
      }
      v18 = fpfs_RenderBuffer(a2, v31);
      v113 = v112;
      CFRelease(v31);
      if ((_DWORD)v18)
        return v18;
    }
LABEL_103:
    if ((v32->flags & 0x1D) == 1)
    {
      if (v100)
      {
        time1 = v112;
        refcon = *v32;
        if (CMTimeCompare(&time1, &refcon) >= 1)
        {
          v96 = flags;
          if (dword_1EE2A2A88)
          {
            LODWORD(rhs.value) = 0;
            v107 = OS_LOG_TYPE_DEFAULT;
            v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v46 = rhs.value;
            if (os_log_type_enabled(v45, v107))
              v47 = v46;
            else
              v47 = v46 & 0xFFFFFFFE;
            if (v47)
            {
              if (v98)
                v48 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v48 = "";
              if (v99)
                v50 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v50 = "";
              time1 = v112;
              v51 = CMTimeGetSeconds(&time1);
              LODWORD(refcon.value) = 136316418;
              *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfs_StartTrackPlaying";
              LOWORD(refcon.flags) = 2048;
              *(_QWORD *)((char *)&refcon.flags + 2) = v98;
              HIWORD(refcon.epoch) = 2082;
              v116 = v48;
              v117 = 2048;
              *(_QWORD *)v118 = v99;
              *(_WORD *)&v118[8] = 2082;
              *(_QWORD *)&v118[10] = v50;
              *(_WORD *)&v118[18] = 2048;
              *(Float64 *)&v118[20] = v51;
              _os_log_send_and_compose_impl();
              v32 = a5;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            DerivedStorage = v90;
          }
          v52 = *(_OWORD *)&a3->value;
          *(_QWORD *)(a2 + 208) = a3->epoch;
          *(_OWORD *)(a2 + 192) = v52;
          goto LABEL_137;
        }
      }
    }
    v31 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a2 + 72));
  }
  while (v31);
  v96 = flags;
  v42 = *(_OWORD *)&a3->value;
  *(_QWORD *)(a2 + 208) = a3->epoch;
  *(_OWORD *)(a2 + 192) = v42;
  if (!v100)
    goto LABEL_114;
LABEL_137:
  fpfs_ChangeTrackState(a2, 6);
  v44 = v97;
  fpfsi_RTCReportingUpdateAlternateIndex(v97, *(_QWORD *)(a2 + 432));
LABEL_138:
  v53 = *(_QWORD *)(v44 + 1040);
  if (!v53)
    return FigSignalErrorAt();
  while (*(_QWORD *)(v53 + 16) != v92)
  {
    v53 = *(_QWORD *)(v53 + 8);
    if (!v53)
      return FigSignalErrorAt();
  }
  if (*(_DWORD *)(v53 + 152) == 6 && *(_DWORD *)(v44 + 2784) > *(_DWORD *)(v44 + 2788))
  {
    if (FigCFEqual())
    {
      v54 = *(_DWORD *)(v53 + 32);
      if (v54 == 1986618469 || v54 == 1936684398)
      {
        if (*(_BYTE *)(v44 + 2816))
          v55 = (*(_BYTE *)(v44 + 2817) != 0) | 2;
        else
          v55 = *(_BYTE *)(v44 + 2817) != 0;
        v56 = *(_QWORD *)(v44 + 1040);
        if (v56)
        {
          v57 = 0;
          do
          {
            if (*(_QWORD *)(v53 + 64) == *(_QWORD *)(v56 + 64) && *(_DWORD *)(v56 + 152) == 1)
            {
              v58 = *(_DWORD *)(v56 + 32);
              if (v58 == 1986618469 || v58 == 1936684398)
                ++v57;
            }
            v56 = *(_QWORD *)(v56 + 8);
          }
          while (v56);
        }
        else
        {
          v57 = 0;
        }
        if (v54 == 1986618469 && *(double *)(v44 + 2632) == 0.0)
        {
          *(double *)(v44 + 2632) = (double)(uint64_t)(*(_QWORD *)(v53 + 344) - *(_QWORD *)(v44 + 2624)) / 1000000000.0;
          *(double *)(v44 + 2640) = (double)(FigGetUpTimeNanoseconds() - *(_QWORD *)(v53 + 352)) / 1000000000.0;
          time1 = *(CMTime *)(v53 + 192);
          *(Float64 *)(v44 + 2648) = CMTimeGetSeconds(&time1);
          time1 = *(CMTime *)(v53 + 192);
          refcon = *(CMTime *)(v44 + 2720);
          CMTimeSubtract(&time, &time1, &refcon);
          *(Float64 *)(v44 + 2768) = CMTimeGetSeconds(&time);
        }
        if (!v57 && (*(_DWORD *)(v44 + 2812) & 3) == v55)
          fpfsi_RTCReportingReportVariantSwitchComplete(v99, 0);
        v60 = *(_DWORD *)(v53 + 32);
        v32 = a5;
        if ((v60 == 1986618469 || v60 == 1936684398 && *(_BYTE *)(v44 + 1728))
          && *(_DWORD *)(DerivedStorage + 808) != 1
          && (v60 != 1986618469 || !*(_BYTE *)(v53 + 184)))
        {
          memset(&v112, 0, sizeof(v112));
          fpfs_GetTime(v44, (uint64_t)&v112);
          DescriptionString = (const void *)FigAlternateCreateDescriptionString(*(_QWORD *)(v53 + 440));
          if (dword_1EE2A2A88)
          {
            LODWORD(type.value) = 0;
            LOBYTE(rhs.value) = 0;
            v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v63 = type.value;
            if (os_log_type_enabled(v62, rhs.value))
              v64 = v63;
            else
              v64 = v63 & 0xFFFFFFFE;
            if (v64)
            {
              if (v98)
                v65 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v65 = "";
              v104 = v65;
              v93 = epoch;
              if (v99)
                v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v66 = "";
              v102 = v66;
              v67 = *(_QWORD *)(v97 + 160);
              time1 = *(CMTime *)(v97 + 608);
              v68 = CMTimeGetSeconds(&time1);
              v69 = *(float *)(DerivedStorage + 108);
              v70 = *(float *)(v97 + 840);
              time1 = v112;
              v71 = CMTimeGetSeconds(&time1);
              time1 = *(CMTime *)(v53 + 192);
              v72 = CMTimeGetSeconds(&time1);
              LODWORD(refcon.value) = 136318210;
              *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfs_StartTrackPlaying";
              LOWORD(refcon.flags) = 2048;
              *(_QWORD *)((char *)&refcon.flags + 2) = v98;
              HIWORD(refcon.epoch) = 2082;
              v116 = v104;
              v117 = 2048;
              *(_QWORD *)v118 = v99;
              *(_WORD *)&v118[8] = 2082;
              *(_QWORD *)&v118[10] = v102;
              *(_WORD *)&v118[18] = 1024;
              *(_DWORD *)&v118[20] = v67;
              *(_WORD *)&v118[24] = 2048;
              *(Float64 *)&v118[26] = v68;
              *(_WORD *)&v118[34] = 2048;
              *(double *)&v118[36] = v69;
              v119 = 2048;
              v120 = v70;
              v121 = 2048;
              v122 = v71;
              v123 = 1024;
              v124 = v92;
              v125 = 2048;
              v126 = v72;
              v127 = 2114;
              v128 = DescriptionString;
              _os_log_send_and_compose_impl();
              epoch = v93;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v32 = a5;
          }
          if (DescriptionString)
            CFRelease(DescriptionString);
        }
      }
    }
  }
  if (dword_1EE2A2A88)
  {
    v73 = epoch;
    LODWORD(v112.value) = 0;
    LOBYTE(type.value) = 0;
    v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v75 = v112.value;
    if (os_log_type_enabled(v74, type.value))
      v76 = v75;
    else
      v76 = v75 & 0xFFFFFFFE;
    if (v76)
    {
      if (v99)
        v77 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v77 = "";
      time1.value = value;
      time1.timescale = timescale;
      time1.flags = v96;
      time1.epoch = v73;
      v78 = CMTimeGetSeconds(&time1);
      time1 = v113;
      v79 = CMTimeGetSeconds(&time1);
      time1.value = v129;
      time1.timescale = v130;
      time1.flags = v91;
      time1.epoch = v89;
      v80 = CMTimeGetSeconds(&time1);
      LODWORD(refcon.value) = 136316930;
      *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfs_StartTrackPlaying";
      LOWORD(refcon.flags) = 2048;
      *(_QWORD *)((char *)&refcon.flags + 2) = v99;
      HIWORD(refcon.epoch) = 2082;
      v116 = v77;
      v117 = 1024;
      *(_DWORD *)v118 = v92;
      *(_WORD *)&v118[4] = 2048;
      *(Float64 *)&v118[6] = v78;
      *(_WORD *)&v118[14] = 2048;
      *(Float64 *)&v118[16] = v79;
      *(_WORD *)&v118[24] = 2048;
      *(Float64 *)&v118[26] = v80;
      *(_WORD *)&v118[34] = 1024;
      *(_DWORD *)&v118[36] = v114;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v32 = a5;
  }
  if (*(_DWORD *)(v53 + 32) == 1986618469)
  {
    time1.value = 0;
    if (fpfsi_copyTrackFigTags(v53))
      VideoLayoutLoggingStringFromCollection = 0;
    else
      VideoLayoutLoggingStringFromCollection = FigAlternateCreateVideoLayoutLoggingStringFromCollection(time1.value);
    if (time1.value)
      CFRelease((CFTypeRef)time1.value);
    if (dword_1EE2A2A88)
    {
      LODWORD(v112.value) = 0;
      LOBYTE(type.value) = 0;
      v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v83 = v112.value;
      if (os_log_type_enabled(v82, type.value))
        v84 = v83;
      else
        v84 = v83 & 0xFFFFFFFE;
      if (v84)
      {
        v85 = *(_QWORD *)v53;
        if (*(_QWORD *)v53)
          v86 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v86 = "";
        v87 = *(_QWORD *)(v53 + 16);
        LODWORD(refcon.value) = 136316162;
        *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfsi_logFigTagDescription";
        LOWORD(refcon.flags) = 2048;
        *(_QWORD *)((char *)&refcon.flags + 2) = v85;
        HIWORD(refcon.epoch) = 2082;
        v116 = v86;
        v117 = 1024;
        *(_DWORD *)v118 = v87;
        *(_WORD *)&v118[4] = 2114;
        *(_QWORD *)&v118[6] = VideoLayoutLoggingStringFromCollection;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v32 = a5;
    if (VideoLayoutLoggingStringFromCollection)
      CFRelease(VideoLayoutLoggingStringFromCollection);
  }
  *(_QWORD *)(v53 + 472) = v129;
  *(_DWORD *)(v53 + 480) = v130;
  *(_DWORD *)(v53 + 484) = v91;
  *(_QWORD *)(v53 + 488) = v89;
  if (v114)
    fpfs_PrerollTrack(v53);
  if (*(_BYTE *)(v53 + 182) && !*(_QWORD *)(v53 + 112) && (v32->flags & 1) == 0)
    fpfs_StopFeedingTrack(v53, 0, 1);
  return 0;
}

uint64_t fpfsi_deferredMarkerBufferConsumed(int a1, uint64_t a2, int a3, const void *a4, CFDictionaryRef theDict)
{
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v9;
  uint64_t v10;
  uint64_t FigBaseObject;
  void (*v12)(uint64_t, const __CFString *, uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t, const __CFString *, uint64_t);
  const __CFString *v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  double Seconds;
  _QWORD *v23;
  dispatch_time_t v24;
  NSObject *global_queue;
  NSObject *v26;
  CMTime type;
  CMTime v28;
  CFTypeRef v29;
  CFTypeRef cf;
  CMTime time;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  cf = 0;
  if (!theDict || !CFDictionaryGetValue(theDict, CFSTR("renderPipelineToStart")))
  {
    v7 = 0;
    goto LABEL_7;
  }
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v7)
  {
LABEL_7:
    v9 = 1;
    goto LABEL_13;
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(v28.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = *MEMORY[0x1E0C9AE40];
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
  v12 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v12)
    v12(FigBaseObject, CFSTR("VideoDecoderIsSecondary"), v10);
  v13 = FigRenderPipelineGetFigBaseObject(v7);
  v14 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v14)
    v14(v13, CFSTR("Suspended"), v10);
  v9 = 0;
LABEL_13:
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v29))
  {
    v16 = (const __CFString *)v29;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v18 = *(_QWORD *)(DerivedStorage + 1040);
    if (v18)
    {
      v19 = DerivedStorage;
      while (!*(_QWORD *)(v18 + 96) || !FigCFEqual())
      {
        v18 = *(_QWORD *)(v18 + 8);
        if (!v18)
          goto LABEL_40;
      }
      v20 = *(const void **)(*(_QWORD *)(v18 + 96) + 64);
      if (v20)
      {
        CFRelease(v20);
        *(_QWORD *)(*(_QWORD *)(v18 + 96) + 64) = 0;
      }
      if ((v9 & 1) == 0)
      {
        v21 = *(_QWORD *)(v18 + 8);
        if (v21)
        {
          while (*(_DWORD *)(v21 + 32) != *(_DWORD *)(v18 + 32) || !*(_QWORD *)(v21 + 96))
          {
            v21 = *(_QWORD *)(v21 + 8);
            if (!v21)
              goto LABEL_40;
          }
          memset(&v28, 0, sizeof(v28));
          memset(&type, 0, sizeof(type));
          if (dword_1EE2A2A88)
          {
            v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpfsi_scheduleFVTTransitionsForItem(v16, (uint64_t *)3, 0);
          fpfsi_RTCReportingReportFormatTransition((uint64_t)v16, v18, v21);
          fpfsi_RTCReportingUpdateCompletedDecodeForPrerollTime(v19);
          FPSupport_getVideoDecodeWaterLevels(&type, &v28, 1);
          time = v28;
          Seconds = CMTimeGetSeconds(&time);
          v23 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
          *v23 = FigRetainProxyRetain();
          v23[1] = *(_QWORD *)(v21 + 16);
          v24 = dispatch_time(0, (uint64_t)(Seconds * 1000000000.0));
          global_queue = dispatch_get_global_queue(0, 0);
          dispatch_after_f(v24, global_queue, v23, (dispatch_function_t)fpfs_PrerollTrackDispatch);
        }
      }
    }
LABEL_40:
    fpfs_UnlockAndPostNotificationsWithCaller(cf);
  }
  if (cf)
    CFRelease(cf);
  if (v29)
    CFRelease(v29);
  if ((v9 & 1) == 0)
    CFRelease(v7);
  if (a4)
    CFRelease(a4);
  return FigRetainProxyRelease();
}

uint64_t fpfs_UpdateDimensions(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t RenderingNonGapTrackofType;
  uint64_t v9;
  CGSize PresentationDimensions;
  double width;
  double height;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  const void *NotificationPayloadForProperties;
  CGSize v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)DerivedStorage;
  result = CMBaseObjectGetDerivedStorage();
  v7 = result;
  v27 = (CGSize)*MEMORY[0x1E0C9D820];
  if (!a2 && *(float *)(DerivedStorage + 840) == 0.0)
    return result;
  RenderingNonGapTrackofType = fpfs_FirstRenderingNonGapTrackofType((uint64_t)a1, 1986618469);
  if (!RenderingNonGapTrackofType)
  {
    for (RenderingNonGapTrackofType = *(_QWORD *)(DerivedStorage + 1040);
          RenderingNonGapTrackofType;
          RenderingNonGapTrackofType = *(_QWORD *)(RenderingNonGapTrackofType + 8))
    {
      if (*(_DWORD *)(RenderingNonGapTrackofType + 32) == 1986618469
        && !*(_BYTE *)(RenderingNonGapTrackofType + 456)
        && *(_QWORD *)(RenderingNonGapTrackofType + 40))
      {
        break;
      }
    }
  }
  v9 = *(_QWORD *)(DerivedStorage + 1696);
  if (v9 && FigAlternateIsAudioOnly(v9))
  {
LABEL_11:
    if (!RenderingNonGapTrackofType)
      goto LABEL_34;
LABEL_14:
    PresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions((CMVideoFormatDescriptionRef)*(_QWORD *)(RenderingNonGapTrackofType + 40), *(_BYTE *)(DerivedStorage + 864), *(_BYTE *)(DerivedStorage + 865));
    width = PresentationDimensions.width;
    height = PresentationDimensions.height;
    v27 = PresentationDimensions;
    v13 = *(const void **)(DerivedStorage + 3336);
    v14 = *(const void **)(RenderingNonGapTrackofType + 56);
    *(_QWORD *)(DerivedStorage + 3336) = v14;
    if (v14)
      CFRetain(v14);
    if (v13)
      CFRelease(v13);
    goto LABEL_35;
  }
  if (RenderingNonGapTrackofType)
    goto LABEL_14;
  v15 = *(_QWORD *)(DerivedStorage + 1056);
  if (v15)
  {
    RenderingNonGapTrackofType = 0;
    do
    {
      if (*(_DWORD *)(v15 + 32) == 1986618469 && !*(_BYTE *)(v15 + 456) && *(_QWORD *)(v15 + 40))
        RenderingNonGapTrackofType = v15;
      v15 = *(_QWORD *)(v15 + 8);
    }
    while (v15);
    if (RenderingNonGapTrackofType)
      goto LABEL_14;
  }
  v16 = *(_QWORD *)(DerivedStorage + 1072);
  if (v16)
  {
    RenderingNonGapTrackofType = 0;
    do
    {
      if (*(_DWORD *)(v16 + 32) == 1986618469 && !*(_BYTE *)(v16 + 456) && *(_QWORD *)(v16 + 40))
        RenderingNonGapTrackofType = v16;
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16);
    goto LABEL_11;
  }
LABEL_34:
  height = v27.height;
  width = v27.width;
LABEL_35:
  v17 = height;
  *(float *)(DerivedStorage + 776) = v17;
  v18 = width;
  *(float *)(DerivedStorage + 772) = v18;
  fpfs_ReadjustDimensions((uint64_t)a1, (uint64_t)&v27);
  result = *(_QWORD *)(DerivedStorage + 1856);
  if (result)
    result = FigLegibleOutputManagerSetVideoDisplaySize((dispatch_queue_t *)result, v27.width, v27.height);
  if (*(_BYTE *)(v7 + 462))
  {
    result = *(_QWORD *)(DerivedStorage + 816);
    v25 = *(_QWORD *)(DerivedStorage + 808);
    if (result && *(_QWORD *)(result + 32))
      result = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(result, *(double *)(v7 + 464), *(double *)(v7 + 472), *(_QWORD *)(v7 + 480), (uint64_t)a1);
    if (v25 && *(_QWORD *)(v25 + 32))
      result = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v25, *(double *)(v7 + 464), *(double *)(v7 + 472), *(_QWORD *)(v7 + 480), (uint64_t)a1);
  }
  if (!*(_BYTE *)(DerivedStorage + 530))
  {
    NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(v5, (uint64_t)a1, v19, v20, v21, v22, v23, v24, CFSTR("CurrentDimensions"), (uint64_t)CFSTR("VideoSlotArray"));
    fpfs_EnqueueNotification(v5, CFSTR("DimensionsChanged"), a1, NotificationPayloadForProperties);
  }
  return result;
}

uint64_t fpfs_StepIFrame(uint64_t a1, __int128 *a2)
{
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  double Current;
  double v8;
  __int128 v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v15)(uint64_t, __CFString *, uint64_t, CMTime *);
  double v16;
  const void *value;
  double v18;
  double v19;
  double v20;
  double v21;
  _QWORD *v22;
  int v23;
  float v24;
  uint64_t v25;
  const __CFArray *v26;
  CFIndex Count;
  CFIndex v28;
  CFIndex v29;
  CFIndex v30;
  float v31;
  CFIndex v32;
  BOOL v33;
  CFIndex v34;
  const void *ValueAtIndex;
  uint64_t v36;
  const void *v37;
  const void *v38;
  uint64_t v39;
  const void *v40;
  int v41;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v43;
  _BOOL4 v44;
  unsigned int v45;
  uint64_t v46;
  const char *v47;
  float v48;
  NSObject *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  const char *v53;
  __n128 v54;
  NSObject *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  const char *v59;
  const char *v60;
  Float64 v61;
  const char *v62;
  Float64 v63;
  float v64;
  NSObject *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  CMTimeEpoch v71;
  CMTimeEpoch epoch;
  CMTime *v73;
  const char *v74;
  Float64 v75;
  Float64 v76;
  Float64 v77;
  double v78;
  uint64_t v80;
  uint64_t v81;
  float v82;
  const char *v83;
  const char *v84;
  Float64 Seconds;
  double v86;
  Float64 v87;
  double v88;
  int v89;
  CFTypeRef cf;
  CFTypeRef DescriptionString;
  CFIndex v92;
  uint64_t v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  CMTime v100;
  CMTime v101;
  os_log_type_t type;
  unsigned int v103;
  CMTime v104;
  CMTime lhs;
  CMTime rhs;
  CMTime v107;
  CMTime valuePtr;
  const char *v109;
  __int16 v110;
  const void *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  Float64 v115;
  __int16 v116;
  Float64 v117;
  __int16 v118;
  Float64 v119;
  __int16 v120;
  double v121;
  __int16 v122;
  double v123;
  __int16 v124;
  double v125;
  CMTime number[5];
  CMTime v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v4 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  memset(&v101, 0, sizeof(v101));
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v101);
  memset(&v100, 0, sizeof(v100));
  *(_BYTE *)(DerivedStorage + 1556) = 1;
  Current = CFAbsoluteTimeGetCurrent();
  v8 = *(double *)(DerivedStorage + 1536);
  v9 = *a2;
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 216) = v9;
  if (*(const void **)(v6 + 80) != v4)
    return 0;
  v10 = Current - v8;
  if ((*(_BYTE *)(DerivedStorage + 1524) & 1) == 0)
  {
    v11 = 0;
    goto LABEL_22;
  }
  if (*(double *)(DerivedStorage + 2168) == 0.0)
  {
    number[0].value = 0;
    valuePtr.value = 0x4020000000000000;
    v12 = *(_QWORD *)(DerivedStorage + 928);
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBaseObject = FigBytePumpGetFigBaseObject(v12);
    v15 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v15)
    {
      v11 = v15(FigBaseObject, CFSTR("FBP_MaxIFrameRate"), AllocatorForMedia, number);
      *(_QWORD *)(DerivedStorage + 2168) = 0x4020000000000000;
      v16 = 8.0;
      value = (const void *)number[0].value;
      if (!(_DWORD)v11)
      {
        CFNumberGetValue((CFNumberRef)number[0].value, kCFNumberDoubleType, &valuePtr);
        v16 = *(double *)(DerivedStorage + 2168);
        value = (const void *)number[0].value;
      }
      if (v16 >= *(double *)&valuePtr.value)
        v16 = *(double *)&valuePtr.value;
      *(double *)(DerivedStorage + 2168) = v16;
      if (value)
        CFRelease(value);
    }
    else
    {
      v18 = *(double *)&valuePtr.value;
      if (*(double *)&valuePtr.value > 8.0)
        v18 = 8.0;
      *(double *)(DerivedStorage + 2168) = v18;
      v11 = 4294954514;
    }
  }
  else
  {
    v11 = 0;
  }
  number[0] = *(CMTime *)a2;
  valuePtr = *(CMTime *)(DerivedStorage + 1512);
  CMTimeSubtract(&v100, number, &valuePtr);
  number[0] = v100;
  valuePtr = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(number, &valuePtr))
  {
    v19 = *(float *)(v6 + 108);
    number[0] = v100;
    v20 = v19 / CMTimeGetSeconds(number);
    ++*(_QWORD *)(DerivedStorage + 2152);
    *(double *)(DerivedStorage + 2160) = v20 + *(double *)(DerivedStorage + 2160);
    v21 = *(double *)(DerivedStorage + 2168);
    if (v20 >= v21 * 0.33)
    {
      if (v20 >= v21 * 0.66)
        goto LABEL_22;
      v22 = (_QWORD *)(DerivedStorage + 2184);
    }
    else
    {
      v22 = (_QWORD *)(DerivedStorage + 2176);
    }
    ++*v22;
  }
LABEL_22:
  v23 = *(_DWORD *)(DerivedStorage + 1524);
  if (v10 <= 0.0)
  {
    if ((v23 & 1) == 0)
      goto LABEL_59;
  }
  else
  {
    if ((v23 & 1) == 0)
      goto LABEL_59;
    v24 = (v10 + (float)(*(float *)(DerivedStorage + 1552) + *(float *)(DerivedStorage + 1552))) / 3.0;
    *(float *)(DerivedStorage + 1552) = v24;
  }
  v96 = v6;
  v25 = CMBaseObjectGetDerivedStorage();
  v93 = CMBaseObjectGetDerivedStorage();
  memset(&v107, 0, sizeof(v107));
  fpfs_CurrentSubStreamBufferedDuration(*(unsigned __int8 *)(v25 + 1104), (uint64_t)&v107);
  v26 = *(const __CFArray **)(v25 + 1680);
  Count = CFArrayGetCount(v26);
  v28 = Count;
  v29 = Count - 1;
  if (Count < 1)
  {
    if (!Count)
    {
LABEL_34:
      FigSignalErrorAt();
LABEL_58:
      v6 = v96;
      goto LABEL_59;
    }
    v30 = 0;
  }
  else
  {
    v30 = 0;
    while (CFArrayGetValueAtIndex(v26, v30) != *(const void **)(v25 + 1696))
    {
      if (v28 == ++v30)
        goto LABEL_34;
    }
    if (v28 == v30)
      goto LABEL_34;
    if (v30)
    {
      v31 = *(float *)(v25 + 920);
      if (v31 > 0.0 && 1.0 / v31 < *(float *)(v25 + 1552) && *(float *)(v93 + 108) != 0.0)
      {
        number[0] = v107;
        if (CMTimeGetSeconds(number) / fabsf(*(float *)(v93 + 108)) < 1.0)
        {
          v32 = v30;
          do
            v33 = v32-- < 1;
          while (!v33 && 1.0 / (*(float *)(v25 + 920) + 2.0) < fpfs_ProjectedDeliveryTime(v25, v32));
          v34 = v32 & ~(v32 >> 63);
          ValueAtIndex = CFArrayGetValueAtIndex(v26, v34);
          if (ValueAtIndex)
          {
            v92 = v34;
            v36 = 1;
            v37 = ValueAtIndex;
            goto LABEL_50;
          }
        }
      }
    }
  }
  if (v30 >= v29)
    goto LABEL_58;
  if (*(float *)(v25 + 1552) > 0.111111111)
    goto LABEL_58;
  if (fpfs_ProjectedDeliveryTime(v25, v30 + 1) > 0.1)
    goto LABEL_58;
  v38 = CFArrayGetValueAtIndex(v26, v30 + 1);
  if (!v38)
    goto LABEL_58;
  v37 = v38;
  v92 = v30 + 1;
  v36 = 0;
LABEL_50:
  memset(&rhs, 0, sizeof(rhs));
  fpfs_GetNextTimeToPlay(v25, 0, (uint64_t)&lhs);
  number[0] = *(CMTime *)(v25 + 1176);
  CMTimeAdd(&rhs, &lhs, number);
  memset(&v104, 0, sizeof(v104));
  CMTimeMakeWithSeconds(&v104, 0.142857143, 1000);
  v127 = v104;
  v128 = *MEMORY[0x1E0CA2E18];
  v129 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v130 = v128;
  v131 = v129;
  *(CFAbsoluteTime *)(v25 + 1536) = CFAbsoluteTimeGetCurrent();
  v39 = *(_QWORD *)v25;
  number[0] = rhs;
  valuePtr = v104;
  v40 = v37;
  v41 = fpfs_SetAlternateWithContext(v39, v4, v37, v36);
  v6 = v96;
  if (!v41 && dword_1EE2A2A88)
  {
    cf = (CFTypeRef)FigCFCopyCompactDescription();
    DescriptionString = (CFTypeRef)FigAlternateCreateDescriptionString(v40);
    if (dword_1EE2A2A88)
    {
      v103 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v43 = v103;
      v44 = os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type);
      v45 = v43 & 0xFFFFFFFE;
      if (v44)
        v45 = v43;
      if (v45)
      {
        v46 = *(_QWORD *)v25;
        if (*(_QWORD *)v25)
          v47 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v47 = "";
        v82 = v10;
        if (v4)
          v83 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v83 = "";
        if (v92 >= v30)
          *(double *)&v84 = COERCE_DOUBLE("up");
        else
          *(double *)&v84 = COERCE_DOUBLE("down");
        number[0] = rhs;
        Seconds = CMTimeGetSeconds(number);
        v86 = *(float *)(v25 + 1552);
        number[0] = v107;
        v87 = CMTimeGetSeconds(number);
        LODWORD(valuePtr.value) = 136317698;
        v88 = fabsf(*(float *)(v93 + 108));
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfs_EnsureCorrectIFrameAlternate";
        LOWORD(valuePtr.flags) = 2048;
        *(_QWORD *)((char *)&valuePtr.flags + 2) = v46;
        HIWORD(valuePtr.epoch) = 2082;
        v109 = v47;
        v110 = 2048;
        v111 = v4;
        v112 = 2082;
        v113 = v83;
        v114 = 2082;
        v115 = *(double *)&v84;
        v116 = 2114;
        v117 = *(double *)&DescriptionString;
        v118 = 2048;
        v119 = Seconds;
        v120 = 2048;
        v121 = v82;
        v122 = 2048;
        v123 = v86;
        v124 = 2048;
        v125 = v87 / v88;
        _os_log_send_and_compose_impl();
        v41 = 0;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = v96;
    }
    if (cf)
      CFRelease(cf);
    if (DescriptionString)
      CFRelease(DescriptionString);
  }
  if (*(_BYTE *)(v93 + 51) || (v41 != -12644 ? (v89 = v41) : (v89 = 0), *(const void **)(v93 + 80) != v4))
    v89 = FigSignalErrorAt();
  if (v41 != -12644 && !v89)
  {
    fpfs_StopFeedingTrack(a1, 0, 0);
    ++*(_QWORD *)(DerivedStorage + 2144);
  }
LABEL_59:
  if (*(float *)(DerivedStorage + 840) != 0.0)
    goto LABEL_97;
  v48 = *(float *)(v6 + 108);
  if (v48 == 0.0)
    goto LABEL_63;
  number[0] = *(CMTime *)a2;
  if (fpfsi_atOrAfterTimeToPausePlayback(DerivedStorage, number))
  {
    v48 = *(float *)(v6 + 108);
LABEL_63:
    if (v48 == 0.0)
    {
      if (dword_1EE2A2A88)
      {
        v97 = v6;
        LODWORD(v127.value) = 0;
        LOBYTE(v107.value) = 0;
        v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v50 = v127.value;
        if (os_log_type_enabled(v49, v107.value))
          v51 = v50;
        else
          v51 = v50 & 0xFFFFFFFE;
        if (v51)
        {
          v52 = *(_QWORD *)DerivedStorage;
          if (*(_QWORD *)DerivedStorage)
            v53 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v53 = "";
          v94 = v53;
          if (v4)
            v60 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v60 = "";
          number[0] = *(CMTime *)a2;
          v61 = CMTimeGetSeconds(number);
          LODWORD(valuePtr.value) = 136316418;
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfs_StepIFrame";
          LOWORD(valuePtr.flags) = 2048;
          *(_QWORD *)((char *)&valuePtr.flags + 2) = v52;
          HIWORD(valuePtr.epoch) = 2082;
          v109 = v94;
          v110 = 2048;
          v111 = v4;
          v112 = 2082;
          v113 = v60;
          v114 = 2048;
          v115 = v61;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v6 = v97;
      }
      number[0] = *(CMTime *)a2;
      fpfs_SetTime((uint64_t)v4, number);
    }
    goto LABEL_97;
  }
  number[0] = *(CMTime *)a2;
  fpfs_SetTime((uint64_t)v4, number);
  if (dword_1EE2A2A88)
  {
    v98 = v6;
    LODWORD(v127.value) = 0;
    LOBYTE(v107.value) = 0;
    v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v56 = v127.value;
    if (os_log_type_enabled(v55, v107.value))
      v57 = v56;
    else
      v57 = v56 & 0xFFFFFFFE;
    if (v57)
    {
      v58 = *(_QWORD *)DerivedStorage;
      if (*(_QWORD *)DerivedStorage)
        v59 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v59 = "";
      v95 = v59;
      if (v4)
        v62 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v62 = "";
      number[0] = *(CMTime *)a2;
      v63 = CMTimeGetSeconds(number);
      LODWORD(valuePtr.value) = 136316418;
      *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfs_StepIFrame";
      LOWORD(valuePtr.flags) = 2048;
      *(_QWORD *)((char *)&valuePtr.flags + 2) = v58;
      HIWORD(valuePtr.epoch) = 2082;
      v109 = v95;
      v110 = 2048;
      v111 = v4;
      v112 = 2082;
      v113 = v62;
      v114 = 2048;
      v115 = v63;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = v98;
  }
  v54.n128_u32[0] = *(_DWORD *)(DerivedStorage + 840);
  v64 = *(float *)(v6 + 108);
  if (v54.n128_f32[0] != v64)
  {
    *(float *)(DerivedStorage + 840) = v64;
    fpfsi_RTCReportingReportRateChange(DerivedStorage, v64);
    v54.n128_u32[0] = *(_DWORD *)(DerivedStorage + 840);
  }
  fpfs_SetRateOnTrack(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v54);
  if (*(double *)(DerivedStorage + 2136) == 0.0)
    *(CFAbsoluteTime *)(DerivedStorage + 2136) = CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 2128);
LABEL_97:
  fpfs_endEndedTracks(DerivedStorage);
  if ((*(_BYTE *)(DerivedStorage + 332) & 1) != 0)
  {
    number[0] = *(CMTime *)a2;
    fpfsi_setLastSeekTimeSet(DerivedStorage, (uint64_t)number);
  }
  if ((_DWORD)v11)
    return v11;
  if (*(float *)(v6 + 108) == 0.0)
    return 0;
  memset(&v127, 0, sizeof(v127));
  fpfs_CurrentSubStreamBufferedDuration(*(unsigned __int8 *)(DerivedStorage + 1104), (uint64_t)&v127);
  memset(&v107, 0, sizeof(v107));
  CMTimeMakeWithSeconds(&v107, fabsf(*(float *)(v6 + 108)) * 10.0, 1);
  number[0] = v127;
  valuePtr = v107;
  if ((CMTimeCompare(number, &valuePtr) & 0x80000000) == 0
    || (*(_BYTE *)(DerivedStorage + 1428) & 1) != 0
    && (number[0] = *(CMTime *)a2,
        valuePtr = *(CMTime *)(DerivedStorage + 1416),
        (CMTimeCompare(number, &valuePtr) & 0x80000000) == 0))
  {
    if (!*(_BYTE *)(DerivedStorage + 1557))
    {
      *(_BYTE *)(DerivedStorage + 1557) = 1;
      if (dword_1EE2A2A88)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(lhs.value) = 0;
        v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v66 = rhs.value;
        if (os_log_type_enabled(v65, lhs.value))
          v67 = v66;
        else
          v67 = v66 & 0xFFFFFFFE;
        if (v67)
        {
          v68 = *(_QWORD *)DerivedStorage;
          if (v68)
            v69 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v69 = "";
          v73 = (CMTime *)(a1 + 216);
          if (v4)
            v74 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v74 = "";
          number[0] = v127;
          v75 = CMTimeGetSeconds(number) / fabsf(*(float *)(v6 + 108));
          number[0] = v101;
          v76 = CMTimeGetSeconds(number);
          number[0] = *v73;
          v77 = CMTimeGetSeconds(number);
          v78 = *(float *)(v6 + 108);
          LODWORD(valuePtr.value) = 136317186;
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfs_StepIFrame";
          LOWORD(valuePtr.flags) = 2048;
          *(_QWORD *)((char *)&valuePtr.flags + 2) = v68;
          HIWORD(valuePtr.epoch) = 2082;
          v109 = v69;
          v110 = 2048;
          v111 = v4;
          v112 = 2082;
          v113 = v74;
          v114 = 2048;
          v115 = v75;
          v116 = 2048;
          v117 = v76;
          v118 = 2048;
          v119 = v77;
          v120 = 2048;
          v121 = v78;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    return 0;
  }
  v70 = *(_QWORD *)(a1 + 16);
  memset(number, 0, 24);
  if ((*(_BYTE *)(DerivedStorage + 1212) & 1) != 0)
  {
    valuePtr = *(CMTime *)(DerivedStorage + 1200);
    rhs = *(CMTime *)(DerivedStorage + 1176);
    CMTimeSubtract(number, &valuePtr, &rhs);
  }
  else
  {
    number[0] = *(CMTime *)a2;
  }
  valuePtr = v127;
  v99 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E68];
  v71 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  rhs.epoch = v71;
  if (!CMTimeCompare(&valuePtr, &rhs))
  {
    valuePtr = v101;
    rhs = number[0];
    if (fpfs_TimeIsAfter(v6, &valuePtr, &rhs))
    {
      valuePtr = v101;
      *(_OWORD *)&rhs.value = v99;
      rhs.epoch = v71;
      if (CMTimeCompare(&valuePtr, &rhs) >= 1)
      {
        *(_OWORD *)&number[0].value = *(_OWORD *)&v101.value;
        epoch = v101.epoch;
LABEL_119:
        number[0].epoch = epoch;
        goto LABEL_130;
      }
      memset(&valuePtr, 0, sizeof(valuePtr));
      CMTimeMake(&valuePtr, (uint64_t)fabsf(*(float *)(v6 + 108)), 1);
      rhs = valuePtr;
      lhs = number[0];
      if (CMTimeCompare(&rhs, &lhs) < 0)
      {
        *(_OWORD *)&number[0].value = *(_OWORD *)&valuePtr.value;
        epoch = valuePtr.epoch;
        goto LABEL_119;
      }
    }
  }
LABEL_130:
  valuePtr = number[0];
  rhs = v127;
  v80 = fpfs_RequestNextIFrameStepUnlocked(v4, &valuePtr, &rhs);
  v81 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v81)
    return 4294954433;
  v11 = v80;
  while (*(_QWORD *)(v81 + 16) != v70)
  {
    v81 = *(_QWORD *)(v81 + 8);
    if (!v81)
      return 4294954433;
  }
  return v11;
}

uint64_t fpfs_CompleteTrialSync(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  int v4;
  uint64_t v5;
  CMTime v7;
  CMTime v8;
  CMTime v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 == 1986618469)
  {
    if (fpfs_CheckVideoSyncQueue(a2, 1))
      return fpfs_FinishVideoSync(a2);
  }
  else if (v4 == 1936684398)
  {
    v5 = DerivedStorage;
    memset(&v9, 0, sizeof(v9));
    fpfs_GetTime(DerivedStorage, (uint64_t)&v8);
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    if (fpfs_CheckAudioSync(v5, a2, 0, &v8, &v7, 1, &v9))
    {
      v7 = v9;
      return fpfs_FinishAudioSyncAndStart((_QWORD *)a2, &v7);
    }
  }
  return 4294954368;
}

uint64_t fpfs_FinishAudioSyncAndStart(_QWORD *a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  _OWORD *v5;
  uint64_t *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t i;
  __int128 v9;
  NSObject *v10;
  uint64_t result;
  NSObject *v12;
  CMTime *TrackOfType;
  uint64_t v14;
  _OWORD *v15;
  _BOOL4 canCrossfade;
  __int128 v17;
  NSObject *v18;
  unsigned int v19;
  unsigned int v20;
  const void *v21;
  const char *v22;
  uint64_t v23;
  const __CFAllocator *AllocatorForMedia;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  Float64 Seconds;
  uint64_t v30;
  Float64 v31;
  opaqueCMSampleBuffer *v32;
  opaqueCMSampleBuffer *v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  CMTime time;
  os_log_type_t v38;
  CMTime type;
  CMTime rhs;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  CMBufferQueueRef queueOut;
  CMTime time2;
  const char *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  Float64 v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  Float64 v58;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = CMBaseObjectGetDerivedStorage();
  timescale = 0;
  value = 0;
  memset(&v43, 0, sizeof(v43));
  queueOut = 0;
  memset(&v42, 0, sizeof(v42));
  memset(&v41, 0, sizeof(v41));
  if (CMBufferQueueIsEmpty((CMBufferQueueRef)a1[9]))
    v41 = *a2;
  else
    CMBufferQueueGetMinPresentationTimeStamp(&v41, (CMBufferQueueRef)a1[9]);
  v5 = a1 + 24;
  time1 = v41;
  time2 = *(CMTime *)((_BYTE *)a1 + 8);
  v6 = &sFigCDSNodeProtocolID;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    if (dword_1EE2A2A88)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = &sFigCDSNodeProtocolID;
    }
    for (i = *(_QWORD *)(DerivedStorage + 1040); (_QWORD *)i != a1; i = *(_QWORD *)(i + 8))
    {
      if (*(_DWORD *)(i + 32) == 1936684398)
      {
        time1 = *(CMTime *)(i + 216);
        *(_OWORD *)&time2.value = *v5;
        time2.epoch = a1[26];
        if (!CMTimeCompare(&time1, &time2))
          *(CMTime *)(i + 240) = v41;
      }
    }
    fpfs_ClearRenderChains(*a1, 2);
  }
  v9 = *(_OWORD *)&a2->value;
  a1[26] = a2->epoch;
  *v5 = v9;
  if (a1[6] != *(_QWORD *)(DerivedStorage + 16 * *((unsigned __int8 *)a1 + 180) + 1000)
    || (LOBYTE(time1.value) = 0, result = fpfs_CompleteTrialSwitch(*a1, a1, &time1), !LOBYTE(time1.value)))
  {
    if (dword_1EE2A2A88)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(type.value) = 0;
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = &sFigCDSNodeProtocolID;
    }
    if (*((_DWORD *)a1 + 38) != 1)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(type.value) = 0;
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = &sFigCDSNodeProtocolID;
    }
    TrackOfType = (CMTime *)fpfs_LastTrackOfType(*a1, 1936684398, (uint64_t)a1);
    if (!TrackOfType)
      goto LABEL_57;
    v14 = (uint64_t)TrackOfType;
    time1 = TrackOfType[8];
    *(_OWORD *)&time2.value = *v5;
    time2.epoch = a1[26];
    if (!CMTimeCompare(&time1, &time2) && !*(_QWORD *)(v34 + 504))
    {
      fpfs_LastTrackOfType(*(_QWORD *)v14, 1936684398, v14);
      fpfs_DeleteTrack(*a1);
LABEL_57:
      *(_OWORD *)&time1.value = *v5;
      time1.epoch = a1[26];
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      return fpfs_StartTrackPlaying((const void **)DerivedStorage, (uint64_t)a1, &time1, MEMORY[0x1E0CA2E28], &time2);
    }
    v42 = *a2;
    v15 = (_OWORD *)(v14 + 216);
    v43 = *(CMTime *)(v14 + 216);
    canCrossfade = fpfs_canCrossfade(v34, v14, (uint64_t)a1);
    if (canCrossfade)
    {
      time1 = *a2;
      time2 = *(CMTime *)gFSPAudioCrossfadeDuration;
      CMTimeAdd(&v42, &time1, &time2);
      time2 = v42;
      *(_OWORD *)&rhs.value = kAudioRampingDownSilenceDuration;
      rhs.epoch = 0;
      CMTimeAdd(&time1, &time2, &rhs);
      v42 = time1;
    }
    *(_OWORD *)&time1.value = *v15;
    time1.epoch = *(_QWORD *)(v14 + 232);
    time2 = v42;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      *(_OWORD *)&v42.value = *v15;
      v42.epoch = *(_QWORD *)(v14 + 232);
    }
    if (!*(_QWORD *)(v14 + 96)
      || (time1 = v42,
          *(_OWORD *)&time2.value = *v15,
          time2.epoch = *(_QWORD *)(v14 + 232),
          (CMTimeCompare(&time1, &time2) & 0x80000000) == 0))
    {
      if (canCrossfade)
        goto LABEL_32;
      goto LABEL_31;
    }
    v23 = DerivedStorage;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    result = CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
    if (!(_DWORD)result)
    {
      result = fpfs_StealBuffersAfterTransitionMarker(*(opaqueCMBufferQueue **)(*(_QWORD *)(v14 + 96) + 40), 1, queueOut, 0);
      if (!(_DWORD)result)
      {
        if (CMBufferQueueIsEmpty(queueOut))
        {
          if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
          {
            time1 = v43;
            if (canCrossfade)
            {
              time2 = v43;
              rhs = *(CMTime *)gFSPAudioCrossfadeDuration;
              CMTimeSubtract(&time1, &time2, &rhs);
              rhs = time1;
              *(_OWORD *)&type.value = kAudioRampingDownSilenceDuration;
              type.epoch = 0;
              CMTimeSubtract(&time2, &rhs, &type);
              time1 = time2;
            }
            time2 = time1;
            *(_OWORD *)&rhs.value = *v5;
            rhs.epoch = a1[26];
            if (CMTimeCompare(&time2, &rhs) >= 1)
            {
              *v5 = *(_OWORD *)&time1.value;
              a1[26] = time1.epoch;
            }
          }
        }
        else
        {
          memset(&time1, 0, sizeof(time1));
          if (queueOut)
            CMBufferQueueGetMinPresentationTimeStamp(&time1, queueOut);
          else
            time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          if ((time1.flags & 1) != 0)
            v43 = time1;
        }
        v32 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(queueOut);
        if (v32)
        {
          v33 = v32;
          do
          {
            CMSampleBufferGetOutputPresentationTimeStamp(&time1, v33);
            value = time1.value;
            timescale = time1.timescale;
            if ((time1.flags & 1) != 0)
            {
              time1.value = value;
              time1.timescale = timescale;
              time2 = v42;
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                CMBufferQueueEnqueue(*(CMBufferQueueRef *)(*(_QWORD *)(v14 + 96) + 40), v33);
                fpfs_GetEndOutputPresentationTimeStamp(v33, &v43);
              }
            }
            else
            {
              CMBufferQueueEnqueue(*(CMBufferQueueRef *)(*(_QWORD *)(v14 + 96) + 40), v33);
            }
            CFRelease(v33);
            v33 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(queueOut);
          }
          while (v33);
        }
        FigBufferQueueRelease();
        *v15 = *(_OWORD *)&v43.value;
        *(_QWORD *)(v14 + 232) = v43.epoch;
        DerivedStorage = v23;
        if (canCrossfade)
          goto LABEL_32;
LABEL_31:
        v17 = *v15;
        a1[26] = *(_QWORD *)(v14 + 232);
        *v5 = v17;
LABEL_32:
        if (*(_QWORD *)(v14 + 112))
        {
          rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          fpfs_scheduleForwardEndTimeForTrack(DerivedStorage, v14, (uint64_t)&rhs);
          if (*((_DWORD *)v6 + 674))
          {
            LODWORD(type.value) = 0;
            v38 = OS_LOG_TYPE_DEFAULT;
            v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v19 = type.value;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              v20 = v19;
            else
              v20 = v19 & 0xFFFFFFFE;
            if (v20)
            {
              v21 = *(const void **)DerivedStorage;
              if (*(_QWORD *)DerivedStorage)
                v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v22 = "";
              v36 = v22;
              v26 = *(_QWORD *)v14;
              if (*(_QWORD *)v14)
                v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v27 = "";
              v35 = v27;
              v28 = *(_QWORD *)(v14 + 16);
              time1 = rhs;
              Seconds = CMTimeGetSeconds(&time1);
              v30 = *(_QWORD *)(v14 + 112);
              fpfs_GetTime(DerivedStorage, (uint64_t)&time);
              v31 = CMTimeGetSeconds(&time);
              LODWORD(time2.value) = 136317186;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishAudioSyncAndStart";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = v21;
              HIWORD(time2.epoch) = 2082;
              v46 = v36;
              v47 = 2048;
              v48 = v26;
              v49 = 2082;
              v50 = v35;
              v51 = 2048;
              v52 = v28;
              v53 = 2048;
              v54 = Seconds;
              v55 = 2048;
              v56 = v30;
              v57 = 2048;
              v58 = v31;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          fpfs_StopFeedingTrack(v14, 0, 1);
        }
        goto LABEL_57;
      }
    }
  }
  return result;
}

uint64_t fpfs_EnqueueReleaseAfterDecoding(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;
  uint64_t v3;
  CMAttachmentBearerRef v4;
  _OWORD *v5;
  const __CFAllocator *v6;
  __int128 v7;
  CFDictionaryRef v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  CMAttachmentBearerRef target;
  CMTimeRange range;

  target = 0;
  CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v3 = CMSampleBufferCreate(AllocatorForMedia, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
  if (!(_DWORD)v3)
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504) && (_os_feature_enabled_impl() & 1) == 0)
    {
      v4 = target;
      v5 = *(_OWORD **)(a1 + 96);
      v6 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v7 = v5[7];
      *(_OWORD *)&range.start.value = v5[6];
      *(_OWORD *)&range.start.epoch = v7;
      *(_OWORD *)&range.duration.timescale = v5[8];
      v8 = CMTimeRangeCopyAsDictionary(&range, v6);
      CMSetAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA4E60], v8, 1u);
      if (v8)
        CFRelease(v8);
      CMBaseObjectGetDerivedStorage();
      v9 = *(_OWORD **)(a1 + 96);
      v10 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
      v11 = *MEMORY[0x1E0CA2E50];
      v9[7] = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
      v9[8] = v10;
      v9[6] = v11;
    }
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA4E50], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
    v3 = fpfs_RenderBuffer(a1, (void *)target);
    if (target)
      CFRelease(target);
  }
  return v3;
}

uint64_t fpfsi_TrimAudioInQueue(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  CMTimeEpoch v4;
  const __CFString *v5;
  const __CFDictionary *v6;
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  NSObject *v10;
  unsigned int v11;
  unsigned int v12;
  Float64 v13;
  Float64 v14;
  Float64 v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v18;
  Float64 Seconds;
  Float64 v20;
  Float64 v21;
  Float64 v22;
  Float64 v23;
  __int128 v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime rhs;
  CMTime lhs;
  CMTime v33;
  CMTime type;
  CMTime v35;
  CMTime time2;
  Float64 v37;
  __int16 v38;
  Float64 v39;
  __int16 v40;
  Float64 v41;
  __int16 v42;
  Float64 v43;
  CMTime time1;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v30 = *a2;
  memset(&v29, 0, sizeof(v29));
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  CMSampleBufferGetOutputPresentationTimeStamp(&v27, a1);
  if (fpfs_IsMarkerOnly(a1))
    return 0;
  time1 = v27;
  time2 = v30;
  if (!CMTimeCompare(&time1, &time2))
    return 0xFFFFFFFFLL;
  fpfs_GetEndOutputPresentationTimeStamp(a1, &v29);
  v26 = v30;
  memset(&time1, 0, sizeof(time1));
  v24 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v4;
  memset(&v35, 0, sizeof(v35));
  CMSampleBufferGetOutputPresentationTimeStamp(&v35, a1);
  memset(&type, 0, sizeof(type));
  fpfs_GetEndOutputPresentationTimeStamp(a1, &type);
  memset(&v33, 0, sizeof(v33));
  v5 = (const __CFString *)*MEMORY[0x1E0CA2728];
  v6 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
  if (v6)
    CMTimeMakeFromDictionary(&time2, v6);
  lhs = v35;
  rhs = time2;
  CMTimeSubtract(&time1, &lhs, &rhs);
  lhs = v30;
  rhs = time1;
  if (CMTimeCompare(&lhs, &rhs) < 0)
    v26 = time1;
  lhs = v26;
  rhs = type;
  if (CMTimeCompare(&lhs, &rhs) >= 1)
    v26 = type;
  lhs = v26;
  rhs = time1;
  CMTimeSubtract(&v33, &lhs, &rhs);
  lhs = v33;
  rhs = time2;
  if (CMTimeCompare(&lhs, &rhs))
  {
    lhs = v33;
    *(_OWORD *)&rhs.value = v24;
    rhs.epoch = v4;
    if (CMTimeCompare(&lhs, &rhs))
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      lhs = v33;
      v8 = CMTimeCopyAsDictionary(&lhs, AllocatorForMedia);
      if (v8)
      {
        v9 = v8;
        CMSetAttachment(a1, v5, v8, 1u);
        CFRelease(v9);
        lhs = v26;
        CMSampleBufferSetOutputPresentationTimeStamp(a1, &lhs);
      }
    }
    else
    {
      CMRemoveAttachment(a1, v5);
    }
  }
  CMSampleBufferGetOutputPresentationTimeStamp(&v28, a1);
  CMSampleBufferGetOutputDuration(&v25, a1);
  *(_OWORD *)&time1.value = v24;
  time1.epoch = v4;
  if (!CMTimeCompare(&v25, &time1) && (time1 = v28, time2 = v30, CMTimeCompare(&time1, &time2) < 0))
  {
    time1 = v30;
    CMSampleBufferSetOutputPresentationTimeStamp(a1, &time1);
    if (dword_1EE2A2A88 >= 2)
    {
      LODWORD(v35.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = v35.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
        v18 = value;
      else
        v18 = value & 0xFFFFFFFE;
      if (!v18)
        goto LABEL_31;
      time1 = v27;
      Seconds = CMTimeGetSeconds(&time1);
      time1 = v30;
      v20 = CMTimeGetSeconds(&time1);
      time1 = v29;
      v21 = CMTimeGetSeconds(&time1);
      time1 = v28;
      v22 = CMTimeGetSeconds(&time1);
      time1 = v30;
      v23 = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136316418;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimAudioInQueue";
      LOWORD(time2.flags) = 2048;
      *(Float64 *)((char *)&time2.flags + 2) = Seconds;
      HIWORD(time2.epoch) = 2048;
      v37 = v20;
      v38 = 2048;
      v39 = v21;
      v40 = 2048;
      v41 = v22;
      v42 = 2048;
      v43 = v23;
      goto LABEL_24;
    }
  }
  else if (dword_1EE2A2A88 >= 2)
  {
    LODWORD(v35.value) = 0;
    LOBYTE(type.value) = 0;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v11 = v35.value;
    if (os_log_type_enabled(v10, type.value))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if (!v12)
      goto LABEL_31;
    time1 = v27;
    v13 = CMTimeGetSeconds(&time1);
    time1 = v30;
    v14 = CMTimeGetSeconds(&time1);
    time1 = v29;
    v15 = CMTimeGetSeconds(&time1);
    LODWORD(time2.value) = 136315906;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimAudioInQueue";
    LOWORD(time2.flags) = 2048;
    *(Float64 *)((char *)&time2.flags + 2) = v13;
    HIWORD(time2.epoch) = 2048;
    v37 = v14;
    v38 = 2048;
    v39 = v15;
LABEL_24:
    _os_log_send_and_compose_impl();
LABEL_31:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  time1 = v29;
  time2 = v30;
  return (~CMTimeCompare(&time1, &time2) >> 31);
}

uint64_t fpfsi_RTCReportingUpdateCompletedDecodeForPrerollTime(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);

  result = FigGetUpTimeNanoseconds();
  v3 = *(_QWORD *)(a1 + 2064);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 2536);
    if (v4)
    {
      v5 = result;
      result = CMBaseObjectGetVTable();
      v6 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(result + 16) + 56);
      if (v6)
        return v6(v4, CFSTR("startupStats"), CFSTR("tfac2PreRollEnd"), (v5 - v3) / 0xF4240uLL, 0);
    }
  }
  return result;
}

void fpfs_PrerollTrackDispatch(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef cf;
  CFTypeRef v6;

  v2 = *a1;
  v3 = a1[1];
  cf = 0;
  v6 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(v2, &v6, &cf))
  {
    v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
    if (v4)
    {
      while (v3 != *(_QWORD *)(v4 + 16))
      {
        v4 = *(_QWORD *)(v4 + 8);
        if (!v4)
          goto LABEL_7;
      }
      fpfs_PrerollTrack(v4);
    }
LABEL_7:
    fpfs_UnlockAndPostNotificationsWithCaller(v6);
  }
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  FigRetainProxyRelease();
  free(a1);
}

uint64_t fpfs_FirstRenderingNonGapTrackofType(uint64_t a1, int a2)
{
  uint64_t result;

  for (result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040); result; result = *(_QWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 32) == a2 && *(_QWORD *)(result + 96) && !*(_BYTE *)(result + 456))
      break;
  }
  return result;
}

double fpfs_ReadjustDimensions(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  double result;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, uint64_t, const void **);
  int RotationAngleAndFlipsFromCGAffineTransform;
  const __CFArray *v13;
  uint64_t CFStringForOSTypeValue;
  const __CFArray *v15;
  uint64_t v16;
  double v17[6];
  const void *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(_BYTE *)(v5 + 608))
    {
      v18 = 0;
      AllocatorForMedia = FigGetAllocatorForMedia();
      FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
      v9 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
      if (v9)
      {
        if (!v9(FigBaseObject, CFSTR("VideoTrackMatrix"), AllocatorForMedia, &v18) && v18 != 0)
        {
          FigGetCGAffineTransformFrom3x3MatrixArray(v18, (uint64_t)v17);
          RotationAngleAndFlipsFromCGAffineTransform = FigGetRotationAngleAndFlipsFromCGAffineTransform(v17, 0, 0);
          CFRelease(v18);
          if (RotationAngleAndFlipsFromCGAffineTransform == 270 || RotationAngleAndFlipsFromCGAffineTransform == 90)
            *(int8x16_t *)a2 = vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL);
        }
      }
    }
    result = *(double *)a2;
    if (*(double *)a2 == *MEMORY[0x1E0C9D820]
      && *(double *)(a2 + 8) == *(double *)(MEMORY[0x1E0C9D820] + 8)
      && *(_BYTE *)(DerivedStorage + 468) == 1)
    {
      v13 = *(const __CFArray **)(DerivedStorage + 1688);
      if (v13)
      {
        CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
        if (fpfs_FindMediaTypeInMediaArray(v13, CFStringForOSTypeValue, 0)
          || (v15 = *(const __CFArray **)(DerivedStorage + 1688),
              v16 = FigGetCFStringForOSTypeValue(),
              fpfs_FindMediaTypeInMediaArray(v15, v16, 0)))
        {
          result = 1280.0;
          *(_OWORD *)a2 = xmmword_1932F75A0;
        }
      }
    }
  }
  return result;
}

uint64_t fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v9;
  int v11;
  int v12;

  if (a2 < 1.0 || a3 < 1.0)
    return FigSignalErrorAt();
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)&a2);
  if (!DictionaryRepresentation)
    return FigSignalErrorAt();
  v9 = DictionaryRepresentation;
  fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(a1, (uint64_t)CFSTR("ScreenSize"), (uint64_t)DictionaryRepresentation);
  if (a5)
  {
    v11 = 1065353216;
    v12 = 1065353216;
    fpfsi_GetDimensions(a5, (float *)&v12, (float *)&v11);
  }
  CFRelease(v9);
  return 0;
}

void fpfsi_GetDimensions(uint64_t a1, float *a2, float *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  double v8;
  float v9;
  float v10;
  float64x2_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)DerivedStorage;
  v11 = *(float64x2_t *)MEMORY[0x1E0C9D820];
  fpfs_LockMutexWithCaller((uint64_t)v7);
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    v11 = vcvtq_f64_f32(*(float32x2_t *)(DerivedStorage + 772));
    fpfs_ReadjustDimensions(a1, (uint64_t)&v11);
    v8 = v11.f64[1];
    v9 = v11.f64[0];
    *a2 = v9;
    v10 = v8;
    *a3 = v10;
  }
  fpfs_UnlockAndPostNotificationsWithCaller(v7);
}

void fpfs_endEndedTracks(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t *v6;
  CMTime v7;
  CMTime time2;
  CMTime time1;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(a1 + 1040);
  if (v3)
  {
    v4 = DerivedStorage;
    do
    {
      memset(&v7, 0, sizeof(v7));
      fpfs_GetTime(a1, (uint64_t)&v7);
      if (*(float *)(v4 + 108) >= 0.0)
      {
        if (*(_BYTE *)(v3 + 182)
          && (time1 = v7, time2 = *(CMTime *)(v3 + 216), (CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          || (time1 = v7, time2 = *(CMTime *)(a1 + 1368), (CMTimeCompare(&time1, &time2) & 0x80000000) == 0))
        {
LABEL_10:
          if (dword_1EE2A2A88)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpfs_EndTrackPlayback(v3);
          v6 = (uint64_t *)(a1 + 1040);
          goto LABEL_14;
        }
      }
      else if (*(_BYTE *)(v3 + 182))
      {
        time1 = v7;
        time2 = *(CMTime *)(v3 + 216);
        if (CMTimeCompare(&time1, &time2) <= 0)
          goto LABEL_10;
      }
      v6 = (uint64_t *)(v3 + 8);
LABEL_14:
      v3 = *v6;
    }
    while (*v6);
  }
}

__n128 fpfs_CurrentSubStreamBufferedDuration@<Q0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  CMTimeEpoch v8;
  __n128 result;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  _OWORD *v14;
  int v15;
  CMTimeEpoch epoch;
  int v17;
  CMTime *v18;
  int v19;
  __n128 v20;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v24;
  CMTime v25;
  __int128 v26;
  CMTimeEpoch v27;
  CMTime v28;
  CMTime v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  memset(&v29, 0, sizeof(v29));
  v6 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v7 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a2 = v6;
  *(_OWORD *)&v28.value = *(_OWORD *)v7;
  v8 = *(_QWORD *)(v7 + 16);
  v28.epoch = v8;
  v26 = *(_OWORD *)&v28.value;
  v27 = v8;
  v20 = *(__n128 *)&v28.value;
  *(_OWORD *)&v25.value = *(_OWORD *)&v28.value;
  v25.epoch = v8;
  memset(&v24, 0, sizeof(v24));
  result.n128_f64[0] = fpfs_GetNextTimeToPlay(DerivedStorage, 1, (uint64_t)&v24);
  v10 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v10)
    goto LABEL_35;
  v19 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (_QWORD *)(DerivedStorage + 16 * a1 + 992);
  do
  {
    if (*(unsigned __int8 *)(v10 + 180) != a1 || *(_QWORD *)(v10 + 48) != *v13)
      goto LABEL_24;
    if (!*(_BYTE *)(v10 + 184) || (~*(_DWORD *)(v10 + 140) & 0x11) != 0)
    {
      v14 = (_OWORD *)(v10 + 216);
      v15 = *(_DWORD *)(v10 + 228);
      if (*(float *)(v5 + 108) >= 0.0)
      {
        if ((v15 & 1) == 0
          || (*(_OWORD *)&time1.value = *v14,
              time1.epoch = *(_QWORD *)(v10 + 232),
              time2 = v24,
              CMTimeCompare(&time1, &time2) < 1))
        {
LABEL_16:
          result = v20;
          *(__n128 *)&v29.value = v20;
          v29.epoch = v8;
          goto LABEL_17;
        }
        *(_OWORD *)&time2.value = *v14;
        time2.epoch = *(_QWORD *)(v10 + 232);
        *(_OWORD *)&rhs.value = *(_OWORD *)&v24.value;
        epoch = v24.epoch;
      }
      else
      {
        if ((v15 & 1) == 0)
          goto LABEL_16;
        time1 = v24;
        *(_OWORD *)&time2.value = *v14;
        time2.epoch = *(_QWORD *)(v10 + 232);
        if (CMTimeCompare(&time1, &time2) < 1)
          goto LABEL_16;
        time2 = v24;
        *(_OWORD *)&rhs.value = *v14;
        epoch = *(_QWORD *)(v10 + 232);
      }
      rhs.epoch = epoch;
      CMTimeSubtract(&time1, &time2, &rhs);
      result.n128_u64[0] = time1.value;
      v29 = time1;
    }
    else
    {
      CMBufferQueueGetDuration(&v29, *(CMBufferQueueRef *)(v10 + 72));
    }
LABEL_17:
    v17 = *(_DWORD *)(v10 + 32);
    switch(v17)
    {
      case 1935832172:
        v19 = 1;
        v18 = &v25;
        break;
      case 1936684398:
        v12 = 1;
        v18 = &v28;
        break;
      case 1986618469:
        v11 = 1;
        v18 = (CMTime *)&v26;
        break;
      default:
        goto LABEL_24;
    }
    result.n128_u64[0] = v29.value;
    *v18 = v29;
LABEL_24:
    v10 = *(_QWORD *)(v10 + 8);
  }
  while (v10);
  if (v11)
  {
    result.n128_u64[0] = v26;
    *(_OWORD *)a2 = v26;
    *(_QWORD *)(a2 + 16) = v27;
  }
  if (v12)
  {
    if ((*(_BYTE *)(a2 + 12) & 1) == 0 || (time1 = v28, time2 = *(CMTime *)a2, CMTimeCompare(&time1, &time2) < 0))
    {
      result.n128_u64[0] = v28.value;
      *(CMTime *)a2 = v28;
    }
  }
  if (v19)
  {
    if ((*(_BYTE *)(a2 + 12) & 1) == 0 || (time1 = v25, time2 = *(CMTime *)a2, CMTimeCompare(&time1, &time2) < 0))
    {
      result.n128_u64[0] = v25.value;
      *(CMTime *)a2 = v25;
    }
  }
LABEL_35:
  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
  {
    result = v20;
    *(__n128 *)a2 = v20;
    *(_QWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t fpfs_RequestNextIFrameStepUnlocked(const void *a1, CMTime *a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  double Seconds;
  float v9;
  double v10;
  uint64_t UpTimeNanoseconds;
  double v12;
  _OWORD *v13;
  Float64 v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  double v18;
  uint64_t (*v19)(uint64_t, CMTime *, uint64_t, CMTime *, uint64_t, uint64_t, float);
  uint64_t v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  int v27;
  Float64 v28;
  Float64 v29;
  double v30;
  Float64 v31;
  const char *v33;
  const char *v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime type;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  CMTime v44;
  CMTime rhs;
  const char *v46;
  __int16 v47;
  const void *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  Float64 v54;
  __int16 v55;
  Float64 v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  Float64 v62;
  CMTime time;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  time = *a3;
  Seconds = CMTimeGetSeconds(&time);
  v9 = *(float *)(v7 + 108);
  if (v9 == 0.0)
    v10 = 1.0;
  else
    v10 = v9;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  memset(&v44, 0, sizeof(v44));
  CMTimeMake(&v44, 1, 1);
  memset(&v43, 0, sizeof(v43));
  CMTimeMake(&v43, 1, 100);
  memset(&v42, 0, sizeof(v42));
  memset(&v41, 0, sizeof(v41));
  if (!*(_QWORD *)(DerivedStorage + 928))
    return 0;
  v12 = fabs(v10);
  v13 = (_OWORD *)(DerivedStorage + 1176);
  time = *a2;
  rhs = *(CMTime *)(DerivedStorage + 1176);
  CMTimeAdd(&v42, &time, &rhs);
  rhs = v42;
  v40 = v43;
  CMTimeAdd(&time, &rhs, &v40);
  v42 = time;
  v14 = *(float *)(v7 + 108);
  time = v44;
  CMTimeMultiplyByFloat64(&v39, &time, v14);
  time = v42;
  CMTimeAdd(&v41, &time, &v39);
  *(CFAbsoluteTime *)(DerivedStorage + 1536) = CFAbsoluteTimeGetCurrent();
  *(_BYTE *)(DerivedStorage + 1557) = 0;
  v15 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v15 + 470))
    *(_BYTE *)(v15 + 470) = 0;
  v16 = *(_QWORD *)(DerivedStorage + 928);
  v17 = *(float *)(v7 + 108);
  v40 = v42;
  type = v41;
  v18 = Seconds / v12;
  v19 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 80);
  if (v19)
  {
    time = v40;
    rhs = type;
    v20 = v19(v16, &time, (uint64_t)((double)UpTimeNanoseconds + v18 * 1000000000.0), &rhs, 8, DerivedStorage + 944, v17);
  }
  else
  {
    v20 = 4294954514;
  }
  if (dword_1EE2A2A88 >= 2)
  {
    LODWORD(v40.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = v40.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v23 = value;
    else
      v23 = value & 0xFFFFFFFE;
    if (v23)
    {
      v24 = *(_QWORD *)DerivedStorage;
      if (*(_QWORD *)DerivedStorage)
        v25 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v25 = "";
      v34 = v25;
      if (a1)
        v26 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v26 = "";
      v33 = v26;
      v27 = *(_DWORD *)(DerivedStorage + 944);
      time = v42;
      *(_OWORD *)&rhs.value = *v13;
      rhs.epoch = *(_QWORD *)(DerivedStorage + 1192);
      CMTimeSubtract(&v37, &time, &rhs);
      v28 = CMTimeGetSeconds(&v37);
      time = v41;
      *(_OWORD *)&rhs.value = *v13;
      rhs.epoch = *(_QWORD *)(DerivedStorage + 1192);
      CMTimeSubtract(&v36, &time, &rhs);
      v29 = CMTimeGetSeconds(&v36);
      v30 = *(float *)(DerivedStorage + 1552);
      fpfs_GetTime(DerivedStorage, (uint64_t)&v35);
      v31 = CMTimeGetSeconds(&v35);
      LODWORD(rhs.value) = 136317698;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_RequestNextIFrameStepUnlocked";
      LOWORD(rhs.flags) = 2048;
      *(_QWORD *)((char *)&rhs.flags + 2) = v24;
      HIWORD(rhs.epoch) = 2082;
      v46 = v34;
      v47 = 2048;
      v48 = a1;
      v49 = 2082;
      v50 = v33;
      v51 = 1024;
      v52 = v27;
      v53 = 2048;
      v54 = v28;
      v55 = 2048;
      v56 = v29;
      v57 = 2048;
      v58 = v30;
      v59 = 2048;
      v60 = v18;
      v61 = 2048;
      v62 = v31;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((_DWORD)v20 == -12648)
  {
    fpfs_FrameStepHitEnd(a1);
    return 0;
  }
  return v20;
}

float fpfs_ProjectedDeliveryTime(uint64_t a1, CFIndex a2)
{
  unsigned int PeakBitRate;
  const void *ValueAtIndex;

  PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)(a1 + 1696));
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1680), a2);
  return *(float *)(a1 + 1552)
       * (float)((float)FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex) / (float)PeakBitRate);
}

opaqueCMSampleBuffer *fpfs_EndTrackPlayback(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  float v9;
  opaqueCMSampleBuffer *result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(a1 + 32);
  fpfs_FinishTrack(a1, 1);
  v6 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v6)
    goto LABEL_9;
  while (*(_DWORD *)(v6 + 32) != v5 || !fpfsi_areTracksSyncPairs(a1, v6))
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
      goto LABEL_9;
  }
  if (*(_DWORD *)(v6 + 152) != 1)
  {
LABEL_9:
    if (*(float *)(DerivedStorage + 840) != 0.0)
    {
      v8 = *(_QWORD *)(DerivedStorage + 1040);
      if (!v8)
      {
LABEL_14:
        v9 = *(float *)(v4 + 108);
        if (v9 <= 2.0 && v9 >= 0.0 || *(_QWORD *)(DerivedStorage + 2960))
          fpfs_setUnlikelyToKeepUpAndRanDry(v2);
        return fpfsi_UpdateAudioActiveSamples((uint64_t)v2, 0);
      }
      while (v8 == a1 || *(_DWORD *)(v8 + 152) != 6)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          goto LABEL_14;
      }
      if (*(_BYTE *)(a1 + 184))
        return fpfsi_UpdateAudioActiveSamples((uint64_t)v2, 0);
      v11 = *(unsigned __int8 *)(a1 + 180);
      if (((*(_DWORD *)(DerivedStorage + 1088) >> v11) & 1) == 0)
        return fpfsi_UpdateAudioActiveSamples((uint64_t)v2, 0);
      if (*(_DWORD *)(a1 + 32) == 1986618469)
      {
        if (!fpfs_CanRenderVideo(v4, *(_QWORD *)v8))
          return fpfsi_UpdateAudioActiveSamples((uint64_t)v2, 0);
        v11 = *(unsigned __int8 *)(a1 + 180);
      }
      if (!*(_BYTE *)(DerivedStorage + v11 + 471))
      {
        v12 = *(_QWORD *)(DerivedStorage + 1040);
        if (!v12)
          goto LABEL_41;
        v13 = 0;
        v14 = 0;
        do
        {
          if (*(unsigned __int8 *)(v12 + 180) == v11)
          {
            if (*(_DWORD *)(v12 + 152) == 6 && *(_QWORD *)(v12 + 64) == *(_QWORD *)(a1 + 64) && !*(_BYTE *)(v12 + 184))
              v14 = v12;
            v13 = v12;
          }
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
        if (!v13 || (*(_QWORD *)(v13 + 64) == *(_QWORD *)(a1 + 64) ? (v15 = v14 == 0) : (v15 = 0), v15))
        {
LABEL_41:
          if (dword_1EE2A2A88)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          result = (opaqueCMSampleBuffer *)fpfs_StopPlaybackByStalledTrack(a1);
          if ((_DWORD)result)
            return result;
        }
      }
    }
    return fpfsi_UpdateAudioActiveSamples((uint64_t)v2, 0);
  }
  fpfsi_UpdateAudioActiveSamples((uint64_t)v2, 0);
  if (dword_1EE2A2A88)
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return (opaqueCMSampleBuffer *)fpfs_AbandonSyncAttempt(v6);
}

void fpfs_FinishTrack(uint64_t a1, int a2)
{
  const __CFArray *v3;
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t Dimensions;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int VideoDynamicRange;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t (*v22)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v32;
  char v33;
  NSObject *v34;
  unsigned int value;
  unsigned int v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const __CFArray *v40;
  uint64_t v41;
  Float64 Seconds;
  Float64 v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, const __CFString *, _QWORD);
  uint64_t v46;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  const char *v50;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  const char *v57;
  Float64 v58;
  uint64_t v59;
  int v60;
  const __CFArray *ValueAtIndex;
  uint64_t v62;
  const __CFArray *v63;
  CMTime *v64;
  NSObject *v65;
  unsigned int v66;
  unsigned int v67;
  __n128 v68;
  float v69;
  uint64_t v70;
  NSObject *v71;
  NSObject *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t RenderingNonGapTrackofType;
  const __CFAllocator *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  uint64_t v84;
  CFTypeRef v85;
  void (*v86)(uint64_t, const __CFArray *, CFTypeRef);
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  CMTimeEpoch v96;
  char v97;
  uint64_t v98;
  CMTimeFlags v99;
  const void *v100;
  CMTime v101;
  CMTime cf;
  CFTypeRef v103;
  CFTypeRef v104;
  CMTime v105;
  uint64_t v106;
  CMTime time2;
  const char *v108;
  __int16 v109;
  const __CFArray *v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  _WORD v114[10];
  const char *v115;
  __int16 v116;
  Float64 v117;
  CMTime time;
  CMTimeValue v119;
  CMTimeScale v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v106 = a1;
  v3 = *(const __CFArray **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v105, 0, sizeof(v105));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v105);
  v119 = *(_QWORD *)(a1 + 240);
  v99 = *(_DWORD *)(a1 + 252);
  v120 = *(_DWORD *)(a1 + 248);
  v96 = *(_QWORD *)(a1 + 256);
  v5 = *(const void **)DerivedStorage;
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = *(_DWORD *)(a1 + 32);
  v93 = *(_QWORD *)(a1 + 16);
  v103 = 0;
  v104 = 0;
  if (*(_DWORD *)(v6 + 808) == 2)
  {
    v8 = DerivedStorage;
    v9 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
    if (v9)
    {
      v10 = 0;
      do
      {
        if (*(_DWORD *)(v9 + 32) != 1986618469)
          goto LABEL_8;
        Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v9 + 40));
        v12 = HIDWORD(Dimensions);
        if (SHIDWORD(Dimensions) >= (int)Dimensions)
          LODWORD(v12) = Dimensions;
        v13 = v9;
        if ((int)v12 <= 1440)
LABEL_8:
          v13 = v10;
        v9 = *(_QWORD *)(v9 + 8);
        v10 = v13;
      }
      while (v9);
    }
    else
    {
      v13 = 0;
    }
    v14 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
    if (v14)
    {
      v15 = 0;
      do
      {
        if (*(_DWORD *)(v14 + 32) != 1986618469
          || (VideoDynamicRange = CMVideoFormatDescriptionGetVideoDynamicRange(), v17 = v14, VideoDynamicRange <= 1))
        {
          v17 = v15;
        }
        v14 = *(_QWORD *)(v14 + 8);
        v15 = v17;
      }
      while (v14);
    }
    else
    {
      v17 = 0;
    }
    if (v17 == a1)
      fpfs_ReleasePlayerHDRPlaybackBaton();
    DerivedStorage = v8;
    if (!v13 || v13 == a1)
      fpfs_ReleasePlayer4kPlaybackBaton(v5);
  }
  v100 = v5;
  if (*(_DWORD *)(a1 + 32) != 1936684398)
  {
    v25 = *(_QWORD *)(DerivedStorage + 1040);
    if (v25)
    {
      v26 = 0;
      v27 = 0x7FFFFFFFLL;
      v28 = *(_QWORD *)(DerivedStorage + 1040);
      do
      {
        if (v28 != a1 && *(_DWORD *)(v28 + 152) == 6 && *(_QWORD *)(v28 + 64) < v27)
        {
          v27 = *(_QWORD *)(v28 + 64);
          v26 = v28;
        }
        v28 = *(_QWORD *)(v28 + 8);
      }
      while (v28);
      while (v26)
      {
        if (v26 != a1
          && *(_QWORD *)(v26 + 64) == v27
          && *(_DWORD *)(v26 + 32) == 1936684398
          && *(_DWORD *)(v26 + 152) == 6)
        {
          v90 = *(_QWORD *)(v26 + 96);
          if (!v90)
            break;
          v29 = 0;
          if (!*(_BYTE *)(v90 + 25))
            goto LABEL_210;
          v33 = 1;
          v94 = 0;
          goto LABEL_68;
        }
        v26 = *(_QWORD *)(v26 + 8);
      }
    }
    v94 = 0;
    v29 = 0;
    goto LABEL_67;
  }
  cf.value = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561))
    fpfs_UnmuteNextAtmosAudioTrack((const AudioFormatListItem *)v6, DerivedStorage, a1);
  v18 = *(_QWORD *)(a1 + 96);
  if (!v18)
  {
    v24 = 0;
    goto LABEL_49;
  }
  v19 = *(_QWORD *)(v18 + 32);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v19);
  v22 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v22)
  {
    v30 = 4294954514;
LABEL_56:
    LODWORD(v101.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_200:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_201:
    fpfs_StopPlayingItemWithOSStatus(v6, v3, v30);
    goto LABEL_202;
  }
  v23 = v22(FigBaseObject, CFSTR("IsTimebaseStarter"), AllocatorForMedia, &cf);
  if ((_DWORD)v23)
  {
    v30 = v23;
    goto LABEL_56;
  }
  v24 = cf.value == *MEMORY[0x1E0C9AE50];
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
LABEL_49:
  v25 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v25)
    goto LABEL_65;
  v26 = *(_QWORD *)(DerivedStorage + 1040);
  while (v26 == a1 || *(_DWORD *)(v26 + 32) != 1936684398)
  {
    v26 = *(_QWORD *)(v26 + 8);
    if (!v26)
      goto LABEL_65;
  }
  if (*(_DWORD *)(v26 + 152) == 6 && (v32 = *(_QWORD *)(v26 + 96)) != 0 && v32 != *(_QWORD *)(a1 + 96))
  {
    if (v24)
      v29 = v26;
    else
      v29 = 0;
    if (!*(_BYTE *)(v32 + 25))
    {
LABEL_210:
      while (1)
      {
        if (v25 != v26 && v25 != a1 && *(_DWORD *)(v25 + 152) == 6)
        {
          if (*(_QWORD *)(v25 + 112))
          {
            time = *(CMTime *)(v25 + 216);
            time2 = *(CMTime *)(v26 + 192);
            if (CMTimeCompare(&time, &time2) < 1)
              break;
          }
        }
        v25 = *(_QWORD *)(v25 + 8);
        if (!v25)
        {
          CMTimebaseSetRate(*(CMTimebaseRef *)(DerivedStorage + 576), 0.0);
          FigCFArrayApplyFunction();
          v94 = v26;
          v33 = 0;
          goto LABEL_68;
        }
      }
      v94 = 0;
      goto LABEL_67;
    }
  }
  else
  {
LABEL_65:
    v29 = 0;
  }
  v94 = 0;
LABEL_67:
  v33 = 1;
LABEL_68:
  v98 = v29;
  if (dword_1EE2A2A88)
  {
    v97 = v33;
    LODWORD(cf.value) = 0;
    LOBYTE(v101.value) = 0;
    v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = cf.value;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      v36 = value;
    else
      v36 = value & 0xFFFFFFFE;
    if (v36)
    {
      if (v5)
        v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v37 = "";
      v91 = DerivedStorage;
      v92 = v6;
      v38 = "";
      if (v3)
        v39 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v39 = "";
      v40 = v3;
      v41 = *(_QWORD *)(a1 + 16);
      time = v105;
      Seconds = CMTimeGetSeconds(&time);
      if (*(_DWORD *)(a1 + 32) == 1936684398)
        v38 = "(audio)";
      time = *(CMTime *)(a1 + 216);
      v43 = CMTimeGetSeconds(&time);
      LODWORD(time2.value) = 136317186;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishTrack";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = v5;
      HIWORD(time2.epoch) = 2082;
      v108 = v37;
      v109 = 2048;
      v110 = v40;
      v111 = 2082;
      v112 = v39;
      v113 = 2048;
      *(_QWORD *)v114 = v41;
      v114[4] = 2048;
      *(Float64 *)&v114[5] = Seconds;
      v114[9] = 2082;
      v115 = v38;
      v116 = 2048;
      v117 = v43;
      _os_log_send_and_compose_impl();
      v3 = v40;
      DerivedStorage = v91;
      v6 = v92;
      v29 = v98;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v33 = v97;
  }
  if (*(_DWORD *)(a1 + 32) == 1668047728)
    FPSupport_resetClosedCaptionLayer(v6 + 208);
  time = v105;
  fpfsi_MoveTrackToPlayedOut(DerivedStorage, a1, (__int128 *)&time.value);
  if (!v29)
    goto LABEL_89;
  v44 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(v29 + 96) + 32));
  v45 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v45)
  {
    v30 = 4294954514;
    goto LABEL_98;
  }
  v46 = v45(v44, CFSTR("IsTimebaseStarter"), *MEMORY[0x1E0C9AE50]);
  if ((_DWORD)v46)
  {
    v30 = v46;
LABEL_98:
    LODWORD(cf.value) = 0;
    LOBYTE(v101.value) = 0;
    v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v52 = cf.value;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      v53 = v52;
    else
      v53 = v52 & 0xFFFFFFFE;
    if (!v53)
      goto LABEL_200;
    v54 = v6;
    if (v5)
    {
      v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      if (v3)
      {
LABEL_104:
        v56 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
LABEL_177:
        v77 = *(_QWORD *)(v98 + 16);
        LODWORD(time2.value) = 136316674;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishTrack";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v5;
        HIWORD(time2.epoch) = 2082;
        v108 = v55;
        v109 = 2048;
        v110 = v3;
        v111 = 2082;
        v112 = v56;
        v113 = 1024;
        *(_DWORD *)v114 = v77;
        v114[2] = 1024;
        *(_DWORD *)&v114[3] = v30;
        _os_log_send_and_compose_impl();
        v6 = v54;
        goto LABEL_200;
      }
    }
    else
    {
      v55 = "";
      if (v3)
        goto LABEL_104;
    }
    v56 = "";
    goto LABEL_177;
  }
LABEL_89:
  if ((v99 & 1) != 0)
  {
    if (dword_1EE2A2A88)
    {
      LODWORD(cf.value) = 0;
      LOBYTE(v101.value) = 0;
      v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v48 = cf.value;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        v49 = v48;
      else
        v49 = v48 & 0xFFFFFFFE;
      if (v49)
      {
        if (v100)
          v50 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v50 = "";
        if (v3)
          v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v57 = "";
        time.value = v119;
        time.timescale = v120;
        time.flags = v99;
        time.epoch = v96;
        v58 = CMTimeGetSeconds(&time);
        LODWORD(time2.value) = 136316418;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishTrack";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v100;
        HIWORD(time2.epoch) = 2082;
        v108 = v50;
        v109 = 2048;
        v110 = v3;
        v111 = 2082;
        v112 = v57;
        v113 = 2048;
        *(Float64 *)v114 = v58;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v5 = v100;
    }
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    time2 = time;
    fpfs_setRateInternal(v5, v3, &time, &time2, 0.0);
    time.value = v119;
    time.timescale = v120;
    time.flags = v99;
    time.epoch = v96;
    fpfs_JumpToTime((uint64_t)v3, &time);
  }
  if ((v33 & 1) == 0)
  {
    v68 = *(__n128 *)MEMORY[0x1E0CA2E18];
    *(__n128 *)&cf.value = v68;
    cf.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    *(__n128 *)&v101.value = v68;
    v101.epoch = cf.epoch;
    if (*(_BYTE *)(v94 + 422))
      *(_BYTE *)(v94 + 422) = 0;
    v69 = *(float *)(DerivedStorage + 840);
    if (*(_QWORD *)(DerivedStorage + 568))
    {
      fpfs_getAnchorTimeForSyncTimebase(v69, (uint64_t)v5, (uint64_t)v3, &cf, &v101);
    }
    else if (v69 != 0.0)
    {
      v68.n128_f64[0] = fpfs_getCachedAnchorTimeForItem((uint64_t)v5, (uint64_t)v3, (uint64_t)&cf, (uint64_t)&v101);
    }
    v68.n128_u32[0] = *(_DWORD *)(DerivedStorage + 840);
    time = cf;
    time2 = v101;
    v70 = fpfs_SetRateOnTrack(v94, &time, &time2, v68);
    if ((_DWORD)v70)
    {
      if (v94 == v29)
      {
        v30 = v70;
        v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
        goto LABEL_200;
      }
    }
  }
  v59 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v59)
  {
    v30 = 0;
    goto LABEL_128;
  }
  v30 = 0;
  while (*(_DWORD *)(v59 + 32) != v7)
  {
LABEL_125:
    v59 = *(_QWORD *)(v59 + 8);
    if (!v59)
      goto LABEL_128;
  }
  v60 = *(_DWORD *)(v59 + 152);
  if (v60 != 3)
  {
LABEL_120:
    if (v60 == 1
      && !*(_QWORD *)(v59 + 96)
      && *(_DWORD *)(v59 + 32) == 1986618469
      && fpfs_CheckVideoSyncQueue(v59, 0))
    {
      v30 = fpfs_FinishVideoSync((const __CFArray **)v59);
    }
    goto LABEL_125;
  }
  if (!fpfs_AreTracksReadyToPlay(v3))
  {
    v60 = *(_DWORD *)(v59 + 152);
    goto LABEL_120;
  }
  fpfs_PerformInitialResolveOfAllWaitingTracks(v3);
  if (!fpfs_GetItemLivingTrack(DerivedStorage, v93, &v106))
    v106 = 0;
LABEL_128:
  if (CFArrayGetCount(*(CFArrayRef *)(v6 + 72)) < 1)
  {
    if (a2)
    {
      time = v105;
      time2 = *(CMTime *)(DerivedStorage + 480);
      if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
      {
        if (!dword_1EE2A2A88)
          goto LABEL_180;
        LODWORD(cf.value) = 0;
        LOBYTE(v101.value) = 0;
        v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v66 = cf.value;
        if (os_log_type_enabled(v65, v101.value))
          v67 = v66;
        else
          v67 = v66 & 0xFFFFFFFE;
        if (!v67)
          goto LABEL_179;
        LODWORD(time2.value) = 136315138;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishTrack";
LABEL_159:
        _os_log_send_and_compose_impl();
LABEL_179:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_180;
      }
    }
    if (fpfsi_PlaybackHasTraversedForwardEndTime())
    {
      if (!dword_1EE2A2A88)
        goto LABEL_180;
      LODWORD(cf.value) = 0;
      LOBYTE(v101.value) = 0;
      v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v73 = cf.value;
      if (os_log_type_enabled(v72, v101.value))
        v74 = v73;
      else
        v74 = v73 & 0xFFFFFFFE;
      if (!v74)
        goto LABEL_179;
      LODWORD(time2.value) = 136315138;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishTrack";
      goto LABEL_159;
    }
LABEL_166:
    fpfs_UpdateDimensions(v3, 0);
    if (*(_DWORD *)(v6 + 808) != 1 && *(float *)(v6 + 108) == 1.0)
    {
      if (v7 == 1936684398)
      {
        RenderingNonGapTrackofType = fpfs_FirstRenderingNonGapTrackofType((uint64_t)v3, 1936684398);
        if (RenderingNonGapTrackofType)
        {
          v75 = RenderingNonGapTrackofType;
          v76 = v106;
          if (!FigCFEqual())
          {
            fpfs_ReportAudioPlaybackThroughFigLog((uint64_t)v3);
            if (FigAlternateIsAudioOnly(*(_QWORD *)(v76 + 440)))
            {
LABEL_184:
              fpfsi_copyPlayableTime((uint64_t)v3, &v104);
              v80 = (const __CFAllocator *)FigGetAllocatorForMedia();
              v81 = *(const void **)(DerivedStorage + 2528);
              v82 = *(const void **)(v75 + 440);
              v83 = *(const void **)(v76 + 440);
              time = v105;
              FigMetricItemVariantChangeEventCreate(v80, (__int128 *)&time.value, 0, v81, v82, v83, v104, 1, &v103);
              v84 = *(_QWORD *)(DerivedStorage + 3360);
              v85 = v103;
              v86 = *(void (**)(uint64_t, const __CFArray *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 40);
              if (v86)
                v86(v84, v3, v85);
            }
          }
        }
      }
      else if (v7 == 1986618469)
      {
        v75 = fpfs_FirstRenderingNonGapTrackofType((uint64_t)v3, 1986618469);
        fpfsi_scheduleFVTTransitionsForItem((const __CFString *)v3, (uint64_t *)2, 1);
        if (v75)
        {
          v76 = v106;
          if (!FigCFEqual())
          {
            fpfs_ReportVideoPlaybackTimeThroughFigLog((uint64_t)v3);
            goto LABEL_184;
          }
        }
      }
    }
    fpfsi_SetupSkipBitrateRangeFilter((uint64_t)v3);
    v78 = 1;
    goto LABEL_187;
  }
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 72), 0);
  v62 = v106;
  if (!v106)
    goto LABEL_165;
  v63 = ValueAtIndex;
  cf = v105;
  v64 = (CMTime *)CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v62 + 184))
  {
    if (!a2 || *(_DWORD *)(v62 + 32) != 1986618469)
    {
LABEL_165:
      fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(v3);
      goto LABEL_166;
    }
  }
  else if (!a2)
  {
    goto LABEL_165;
  }
  time = cf;
  time2 = v64[20];
  if (CMTimeCompare(&time, &time2) < 0 && !fpfsi_PlaybackHasTraversedForwardEndTime())
    goto LABEL_165;
  if (fpfsi_AllTracksForMediaTypeArePlaying((uint64_t)v63, 1936684398))
    fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(v3);
  else
    fpfs_TransitionFromItemToItem((uint64_t)v3, v63);
LABEL_180:
  fpfs_StopPlayingItem(v6, v3, 0);
  v78 = 0;
LABEL_187:
  fpfs_PostHasEnabledTrackTypeNotification(v5, v3);
  if ((_DWORD)v30)
    goto LABEL_201;
  if (v106)
    v87 = v78;
  else
    v87 = 0;
  if (v87 == 1 && !*(_BYTE *)(v106 + 184))
  {
    v88 = *(unsigned __int8 *)(v106 + 180);
    if (((*(_DWORD *)(DerivedStorage + 1088) >> v88) & 1) != 0 && !*(_BYTE *)(DerivedStorage + 470))
    {
      v89 = *(_QWORD *)(DerivedStorage + 1040);
      if (v89)
      {
        while (v89 == v106 || *(unsigned __int8 *)(v89 + 180) != v88)
        {
          v89 = *(_QWORD *)(v89 + 8);
          if (!v89)
            goto LABEL_199;
        }
      }
      else
      {
LABEL_199:
        fpfs_StopPlaybackByStalledTrack(v106);
      }
    }
  }
LABEL_202:
  if (v103)
    CFRelease(v103);
  if (v104)
    CFRelease(v104);
}

BOOL fpfsi_areTracksSyncPairs(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  return *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64) && fpfsi_canTracksBeSyncPairsIgnoringDiscontinuity(a1, a2);
}

uint64_t fpfs_AbandonSyncAttempt(uint64_t a1)
{
  const __CFArray *v2;
  uint64_t DerivedStorage;
  float v4;
  int v5;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, _QWORD);
  uint64_t *v11;
  NSObject *v12;
  float v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t RenderingTrackofType;
  opaqueCMSampleBuffer *Head;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  const __CFArray *v24;
  const char *v25;
  Float64 Seconds;
  Float64 v27;
  Float64 v28;
  uint64_t v29;
  uint64_t v30;
  CMTimeEpoch v31;
  NSObject *v32;
  unsigned int value;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v39;
  CMTime *v40;
  CMTime *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int started;
  const char *v57;
  const char *v58;
  CMTime v59;
  CMTime v60;
  CMTime rhs;
  os_log_type_t type;
  CMTime v63;
  char v64;
  CMTime v65;
  CMTime v66;
  CMTime v67;
  CMTime v68;
  CMTime time2;
  const char *v70;
  __int16 v71;
  const __CFArray *v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  Float64 v76;
  __int16 v77;
  Float64 v78;
  __int16 v79;
  Float64 v80;
  CMTime time;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v2 = *(const __CFArray **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v67, 0, sizeof(v67));
  memset(&v68, 0, sizeof(v68));
  memset(&v66, 0, sizeof(v66));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v66);
  v65 = v66;
  v4 = *(float *)(DerivedStorage + 840);
  v64 = 0;
  if (*(_QWORD *)(DerivedStorage + 1696) && fpfsi_TrialSwitchDownInProgress(DerivedStorage))
    fpfs_CompleteTrialSwitch(*(const __CFArray **)a1, a1, &v64);
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 != 1986618469)
  {
    *(_BYTE *)(a1 + 185) = 1;
    if (!*(_BYTE *)(a1 + 184))
    {
      if (v5 == 1936684398)
      {
        fpfs_EnsureRenderChainForTrack(*(_QWORD *)DerivedStorage, (_QWORD *)a1, 1);
        if (*(_QWORD *)(a1 + 96))
        {
          if (fpfs_FirstRenderingTrackofType((uint64_t)v2, 1936684398) == a1)
          {
            if (dword_1EE2A2A88)
            {
              LODWORD(v63.value) = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v8 = fpfs_SetTimebaseOnTrack((uint64_t)v2, a1);
            if ((_DWORD)v8)
              goto LABEL_147;
            FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
            v10 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
            if (!v10)
            {
              v15 = 4294954514;
              goto LABEL_101;
            }
            v8 = v10(FigBaseObject, CFSTR("IsTimebaseStarter"), *MEMORY[0x1E0C9AE50]);
            if ((_DWORD)v8)
              goto LABEL_147;
          }
        }
      }
      goto LABEL_19;
    }
LABEL_10:
    time = v66;
    time2 = v66;
    v63 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    return fpfs_StartTrackPlaying((const void **)DerivedStorage, a1, &time, &time2, &v63);
  }
  if (!*(_BYTE *)(a1 + 183))
    *(_BYTE *)(a1 + 185) = 1;
  if (*(_BYTE *)(a1 + 184))
    goto LABEL_10;
LABEL_19:
  v11 = &sFigCDSNodeProtocolID;
  if (dword_1EE2A2A88)
  {
    LODWORD(v63.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v13 = *(float *)(DerivedStorage + 840);
  if (v13 == 0.0 || v64 != 0)
  {
    if (v13 != 0.0)
      goto LABEL_26;
    LODWORD(v15) = 0;
LABEL_60:
    if ((*(_BYTE *)(a1 + 140) & 1) == 0)
    {
      v30 = *(_QWORD *)(DerivedStorage + 1040);
      if (v30)
      {
        while (*(_QWORD *)(v30 + 64) != *(_QWORD *)(a1 + 64)
             || *(_BYTE *)(v30 + 456)
             || (*(_DWORD *)(v30 + 140) & 0x1D) != 1)
        {
          v30 = *(_QWORD *)(v30 + 8);
          if (!v30)
            goto LABEL_66;
        }
        *(_OWORD *)&time.value = *(_OWORD *)(v30 + 128);
        v31 = *(_QWORD *)(v30 + 144);
      }
      else
      {
LABEL_66:
        *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E18];
        v31 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      }
      time.epoch = v31;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)&time.value;
      *(_QWORD *)(a1 + 144) = v31;
    }
    fpfs_GetTime(DerivedStorage, (uint64_t)&time);
    v66 = time;
    time = v65;
    time2 = v66;
    if (CMTimeCompare(&time, &time2) >= 1)
    {
      time = v65;
      fpfs_JumpToTime((uint64_t)v2, &time);
    }
    if (!(_DWORD)v15)
    {
      if (*(_DWORD *)(DerivedStorage + 2784) > *(_DWORD *)(DerivedStorage + 2788))
      {
        *(_BYTE *)(DerivedStorage + 2288) = 1;
        v38 = *(_DWORD *)(a1 + 32);
        if (v38 == 1986618469)
        {
          *(_BYTE *)(DerivedStorage + 2817) = 1;
        }
        else if (v38 == 1936684398)
        {
          *(_BYTE *)(DerivedStorage + 2816) = 1;
        }
        v45 = *(_QWORD *)(DerivedStorage + 1040);
        if (v45)
        {
          v46 = *(_QWORD *)(a1 + 64);
          do
          {
            if (v46 == *(_QWORD *)(v45 + 64) && *(_DWORD *)(v45 + 152) == 1)
            {
              v47 = *(_DWORD *)(v45 + 32);
              if (v47 == 1936684398)
              {
                *(_BYTE *)(DerivedStorage + 2816) = 1;
              }
              else if (v47 == 1986618469)
              {
                *(_BYTE *)(DerivedStorage + 2817) = 1;
              }
            }
            v45 = *(_QWORD *)(v45 + 8);
          }
          while (v45);
        }
        fpfsi_RTCReportingReportVariantSwitchComplete((uint64_t)v2, 1u);
      }
      v48 = *(_QWORD *)(DerivedStorage + 1040);
      if (v48)
      {
        v49 = *(_QWORD *)(DerivedStorage + 1040);
        do
        {
          if (*(_DWORD *)(v49 + 152) == 6 && *(_QWORD *)(v49 + 64) == *(_QWORD *)(a1 + 64) && !*(_BYTE *)(v49 + 184))
          {
            time = v66;
            time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
            started = fpfs_StartTrackPlaying((const void **)DerivedStorage, a1, &time, MEMORY[0x1E0CA2E28], &time2);
            if (started == -16042)
              v15 = 0;
            else
              v15 = started;
            goto LABEL_100;
          }
          v49 = *(_QWORD *)(v49 + 8);
        }
        while (v49);
        do
        {
          if (!*(_QWORD *)(DerivedStorage + 1040))
            goto LABEL_99;
          v50 = v48;
          v48 = *(_QWORD *)(v48 + 8);
          if (*(unsigned __int8 *)(v50 + 180) == *(unsigned __int8 *)(a1 + 180)
            && *(_QWORD *)(v50 + 64) <= *(_QWORD *)(a1 + 64)
            && *(_QWORD *)(v50 + 48) != *(_QWORD *)(a1 + 48))
          {
            fpfs_DeleteTrack(v2);
          }
        }
        while (v48);
        v51 = *(_QWORD *)(DerivedStorage + 1040);
        if (v51)
        {
          while (2)
          {
            v52 = *(_QWORD *)(v51 + 8);
            if (*(_QWORD *)(v51 + 48) == *(_QWORD *)(a1 + 48) && *(_DWORD *)(v51 + 152) != 6)
            {
              v53 = *(_DWORD *)(v51 + 32);
              if (v53 == 1986618469)
              {
                v54 = *(_QWORD *)(v51 + 264);
                if (v54)
                {
                  fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v51 + 264));
                  v54 = 0;
                }
LABEL_136:
                v55 = *(_QWORD *)(DerivedStorage + 8 * v54 + 784);
                if (v55)
                  fpfs_FlushPrimaryAndAuxRenderChains(v55, 1);
              }
              else if (v53 == 1936684398)
              {
                time = v66;
                fpfs_TrimAudioTrack(v51, &time);
                v54 = 1;
                goto LABEL_136;
              }
              fpfs_GetTime(DerivedStorage, (uint64_t)&time);
              *(CMTime *)(v51 + 192) = time;
              fpfs_ChangeTrackState(v51, 2u);
            }
            if (!v52)
              goto LABEL_99;
            v15 = 0;
            v51 = v52;
            if (!*(_QWORD *)(DerivedStorage + 1040))
              goto LABEL_100;
            continue;
          }
        }
      }
      goto LABEL_99;
    }
    if (!*((_DWORD *)v11 + 674))
    {
LABEL_88:
      v39 = *(_QWORD *)(DerivedStorage + 1040);
      if (v39)
      {
        v40 = (CMTime *)MEMORY[0x1E0CA2E18];
        v41 = (CMTime *)MEMORY[0x1E0CA2E28];
        while (1)
        {
          v42 = *(_QWORD *)(v39 + 8);
          if (*(_QWORD *)(v39 + 64) == *(_QWORD *)(a1 + 64)
            && *(unsigned __int8 *)(v39 + 180) == *(unsigned __int8 *)(a1 + 180))
          {
            if (*(_QWORD *)(v39 + 264))
              fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v39 + 264));
            if ((*(_DWORD *)(v39 + 152) | 4) == 5)
            {
              time = v66;
              time2 = *v40;
              v8 = fpfs_StartTrackPlaying((const void **)DerivedStorage, v39, &time, v41, &time2);
              if ((_DWORD)v8)
                break;
            }
          }
          if (v42)
          {
            v39 = v42;
            if (*(_QWORD *)(DerivedStorage + 1040))
              continue;
          }
          goto LABEL_98;
        }
LABEL_147:
        v15 = v8;
        goto LABEL_101;
      }
LABEL_98:
      fpfs_CheckPrebufferedLevels(&time, v2, 0, -1, 0);
      v43 = *(_QWORD *)DerivedStorage;
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      time2 = time;
      fpfs_setRateInternal(v43, v2, &time, &time2, v4);
LABEL_99:
      v15 = 0;
LABEL_100:
      CMBaseObjectGetDerivedStorage();
      result = fpfs_FlowControlPump(DerivedStorage, 0, 1, 255);
      if ((_DWORD)v15)
        goto LABEL_101;
      return result;
    }
    LODWORD(v63.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = v63.value;
    if (os_log_type_enabled(v32, type))
      v34 = value;
    else
      v34 = value & 0xFFFFFFFE;
    if (!v34)
    {
LABEL_87:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_88;
    }
    v35 = *(_QWORD *)DerivedStorage;
    if (*(_QWORD *)DerivedStorage)
    {
      v36 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      if (v2)
      {
LABEL_78:
        v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
LABEL_86:
        LODWORD(time2.value) = 136316162;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_AbandonSyncAttempt";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v35;
        HIWORD(time2.epoch) = 2082;
        v70 = v36;
        v71 = 2048;
        v72 = v2;
        v73 = 2082;
        v74 = v37;
        _os_log_send_and_compose_impl();
        goto LABEL_87;
      }
    }
    else
    {
      v36 = "";
      if (v2)
        goto LABEL_78;
    }
    v37 = "";
    goto LABEL_86;
  }
  v16 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v16)
    goto LABEL_58;
  LODWORD(v15) = 1;
  do
  {
    if (*(_QWORD *)(v16 + 64) == *(_QWORD *)(a1 + 64)
      && *(unsigned __int8 *)(v16 + 180) == *(unsigned __int8 *)(a1 + 180)
      && (*(_DWORD *)(v16 + 152) | 4) == 5)
    {
      RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v2, *(_DWORD *)(v16 + 32));
      if (!RenderingTrackofType
        || *(_QWORD *)(RenderingTrackofType + 16) >= *(_QWORD *)(v16 + 16)
        || *(_DWORD *)(RenderingTrackofType + 152) != 6)
      {
        Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v16 + 72));
        if (!Head)
          goto LABEL_54;
        CMSampleBufferGetOutputPresentationTimeStamp(&v68, Head);
        time = v68;
        fpfs_GetTrackStartupQueueDuration(v16, &time, (uint64_t)&rhs);
        time = v68;
        CMTimeAdd(&v67, &time, &rhs);
        time = v68;
        time2 = v66;
        if (CMTimeCompare(&time, &time2) >= 1)
        {
          time = v65;
          time2 = v68;
          CMTimeMaximum(&v65, &time, &time2);
        }
        CMTimeMake(&v59, 1, 1);
        time = v65;
        CMTimeAdd(&v60, &time, &v59);
        time = v67;
        if (CMTimeCompare(&time, &v60) < 0)
        {
          if (*((_DWORD *)v11 + 674))
          {
            LODWORD(v63.value) = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v20 = v63.value;
            if (os_log_type_enabled(v19, type))
              v21 = v20;
            else
              v21 = v20 & 0xFFFFFFFE;
            if (v21)
            {
              v22 = *(_QWORD *)DerivedStorage;
              if (*(_QWORD *)DerivedStorage)
                v23 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v23 = "";
              v58 = v23;
              v24 = *(const __CFArray **)v16;
              if (*(_QWORD *)v16)
                v25 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v25 = "";
              v57 = v25;
              time = v66;
              Seconds = CMTimeGetSeconds(&time);
              time = v68;
              v27 = CMTimeGetSeconds(&time);
              time = v67;
              v28 = CMTimeGetSeconds(&time);
              LODWORD(time2.value) = 136316930;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_AbandonSyncAttempt";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = v22;
              HIWORD(time2.epoch) = 2082;
              v70 = v58;
              v71 = 2048;
              v72 = v24;
              v73 = 2082;
              v74 = v57;
              v75 = 2048;
              v76 = Seconds;
              v77 = 2048;
              v78 = v27;
              v79 = 2048;
              v80 = v28;
              _os_log_send_and_compose_impl();
              v11 = &sFigCDSNodeProtocolID;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_54:
          LODWORD(v15) = 0;
        }
      }
    }
    v16 = *(_QWORD *)(v16 + 8);
  }
  while (v16);
  if (*(float *)(DerivedStorage + 840) == 0.0)
    goto LABEL_60;
  if ((_DWORD)v15)
  {
LABEL_58:
    v29 = *(_QWORD *)DerivedStorage;
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    time2 = time;
    fpfs_setRateInternal(v29, v2, &time, &time2, 0.0);
    LODWORD(v15) = 1;
    goto LABEL_60;
  }
LABEL_26:
  v15 = fpfs_StopPlaybackByStalledTrack(a1);
  if (!(_DWORD)v15)
    goto LABEL_60;
LABEL_101:
  v44 = CMBaseObjectGetDerivedStorage();
  return fpfs_StopPlayingItemWithOSStatus(v44, v2, v15);
}

uint64_t fpfs_PerformInitialResolveOfAllWaitingTracks(const __CFArray *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *Next;
  const __CFArray *v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  _BOOL4 v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  CMTimeEpoch v14;
  int32_t v15;
  BOOL v16;
  __int128 v17;
  CMTime time2;
  CMTime lhs;
  CMTime rhs;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  CMTime v46;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(v3, *(const void **)(v3 + 80));
  v5 = Next;
  v6 = *(_QWORD *)(v3 + 80);
  if (v6)
    v7 = v6 == (_QWORD)a1;
  else
    v7 = 1;
  v8 = !v7 && Next == a1;
  if (!v8 || *(_BYTE *)(DerivedStorage + 2440))
  {
    v9 = 0;
    goto LABEL_11;
  }
  v12 = CMBaseObjectGetDerivedStorage();
  v13 = CMBaseObjectGetDerivedStorage();
  v17 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v46.value = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v46.epoch = v14;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  if (fpfs_IsPlayerEligibleForGaplessTransition())
  {
    if (fpfs_OkayToAttemptGapless(v6, (uint64_t)a1, (uint64_t)&v41, (uint64_t)&v36, (uint64_t)&v46))
    {
      v35 = 0;
      v34 = 0;
      result = fpfs_EstablishTimebase(a1);
      if ((_DWORD)result)
      {
        *(_BYTE *)(DerivedStorage + 2440) = 0;
        return result;
      }
      v31 = v43;
      v32 = v44;
      v33 = v45;
      v29 = v41;
      v30 = v42;
      v26 = v38;
      v27 = v39;
      v28 = v40;
      v24 = v36;
      v25 = v37;
      fpfs_AreItemsEligibleForGaplessTransition(v6, (uint64_t)&v29, (uint64_t)a1, (uint64_t)&v24, &v34, &v35);
      if (v34 == 2)
      {
        v16 = 0;
        v9 = 0;
      }
      else if (v34 == 1)
      {
        v29 = v17;
        *(_QWORD *)&v30 = v14;
        v24 = v17;
        *(_QWORD *)&v25 = v14;
        *(_OWORD *)&v23.value = v17;
        v23.epoch = v14;
        rhs = v46;
        fpfp_GetTransitionTimebaseStartTime(v12, v13, (uint64_t)&v41, (uint64_t)&v36, &rhs, v35, &v22, &v21, (uint64_t)&v29);
        fpfs_GetItemBufferedDuration(a1, &v24, 0, 0);
        fpfs_GetNextTimeToPlay(v13, 0, (uint64_t)&lhs);
        *(_OWORD *)&rhs.value = v24;
        rhs.epoch = v25;
        CMTimeAdd(&v23, &lhs, &rhs);
        rhs = v23;
        *(_OWORD *)&time2.value = v29;
        time2.epoch = v30;
        v15 = CMTimeCompare(&rhs, &time2);
        v16 = v15 > 0;
        v9 = v15 < 1;
      }
      else
      {
        v16 = 0;
        v9 = 1;
      }
      goto LABEL_31;
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v16 = 0;
LABEL_31:
  *(_BYTE *)(DerivedStorage + 2440) = v16;
LABEL_11:
  if (*(const __CFArray **)(v3 + 80) != a1)
  {
    if (v5 != a1 || v9)
      return 0;
    return fpfs_ResolveAllWaitingTracks(a1);
  }
  if (!v9)
    return fpfs_ResolveAllWaitingTracks(a1);
  return 0;
}

BOOL fpfs_GetItemLivingTrack(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t i;

  i = *(_QWORD *)(a1 + 1040);
  if (i)
  {
    while (*(_QWORD *)(i + 16) != a2)
    {
      i = *(_QWORD *)(i + 8);
      if (!i)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    for (i = *(_QWORD *)(a1 + 1056); i; i = *(_QWORD *)(i + 8))
    {
      if (*(_QWORD *)(i + 16) == a2)
        break;
    }
  }
  *a3 = i;
  return i != 0;
}

uint64_t fpfsi_AllTracksForMediaTypeArePlaying(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
  if (!v3)
    return 1;
  while (*(_DWORD *)(v3 + 32) != a2 || *(_DWORD *)(v3 + 152) == 6)
  {
    v3 = *(_QWORD *)(v3 + 8);
    if (!v3)
      return 1;
  }
  return 0;
}

uint64_t fpfs_TransitionFromItemToItem(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(DerivedStorage + 2440))
    return fpfs_CommitToGaplessTransition(a1, (uint64_t)a2);
  else
    return fpfs_ResolveAllWaitingTracks(a2);
}

BOOL fpfs_IsPlayerEligibleForGaplessTransition()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  CFIndex Count;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 49))
    return 0;
  v1 = *(unsigned int *)(DerivedStorage + 632);
  v2 = *(_QWORD *)(DerivedStorage + 80);
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
  if (v2)
    v4 = Count + 1;
  else
    v4 = Count;
  return FigPlaybackGetEffectiveActionAtEnd(v1, v4) == 0;
}

uint64_t fpfs_OkayToAttemptGapless(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int Duration;
  double v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[3];
  __int128 v32;
  uint64_t v33;
  float v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v9 = result;
  memset(v31, 0, 40);
  v29 = 0u;
  v30 = 0u;
  fpfsi_gatherInterestingGaplessInfoForItem(result, (uint64_t)&v29);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  fpfsi_gatherInterestingGaplessInfoForItem(a2, (uint64_t)&v24);
  v10 = DWORD2(v31[1]);
  v11 = *(_QWORD *)((char *)&v31[1] + 12);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = CMBaseObjectGetDerivedStorage();
  if (fpfs_FirstTrackWithFormatDescriptionOfType(v9, 1936684398))
    v14 = *(_QWORD *)(DerivedStorage + 792) != 0;
  else
    v14 = 1;
  if (fpfs_CanRenderVideo(v13, v9) && fpfs_FirstTrackWithFormatDescriptionOfType(v9, 1986618469) && v14)
    v14 = *(_QWORD *)(DerivedStorage + 784) != 0;
  if (!v14)
  {
LABEL_17:
    result = 0;
    goto LABEL_18;
  }
  result = fpfsi_PumpHasEndedOrBufferedBeyondFwdEnd(v9);
  if ((_DWORD)result)
  {
    result = 0;
    if ((v10 & 1) != 0 && BYTE8(v31[0]) == 1 && BYTE8(v26) == 1)
    {
      v15 = CMBaseObjectGetDerivedStorage();
      v35 = 0uLL;
      v36 = 0;
      v34 = 0.0;
      fpfs_GetItemBufferedDuration(a2, &v35, &v37, 0);
      v16 = *(unsigned int *)(v15 + 1088);
      v32 = v35;
      v33 = v36;
      fpfs_CheckCanKeepUp(a2, (uint64_t)&v32, MEMORY[0x1E0CA2E18], v16, (uint64_t)&v37, &v34, 0, 0);
      v17 = v34;
      if (fpfs_GetGaplessTransitionBufferingProgressThreshold_onceToken != -1)
      {
        v23 = v34;
        dispatch_once(&fpfs_GetGaplessTransitionBufferingProgressThreshold_onceToken, &__block_literal_global_163);
        v17 = v23;
      }
      if (*(double *)&gGaplessTransitionBufferingProgressThreshold <= v17)
      {
        v37 = 0uLL;
        v38 = 0;
        Duration = fpfsi_GetDuration(a2, &v37);
        result = (Duration | ~HIDWORD(v37) & 0x11) != 0;
        if (!a3)
          goto LABEL_20;
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
LABEL_18:
  if (a3)
  {
LABEL_19:
    v18 = v31[1];
    *(_OWORD *)(a3 + 32) = v31[0];
    *(_OWORD *)(a3 + 48) = v18;
    *(_QWORD *)(a3 + 64) = *(_QWORD *)&v31[2];
    v19 = v30;
    *(_OWORD *)a3 = v29;
    *(_OWORD *)(a3 + 16) = v19;
  }
LABEL_20:
  if (a4)
  {
    v20 = v27;
    *(_OWORD *)(a4 + 32) = v26;
    *(_OWORD *)(a4 + 48) = v20;
    *(_QWORD *)(a4 + 64) = v28;
    v21 = v25;
    *(_OWORD *)a4 = v24;
    *(_OWORD *)(a4 + 16) = v21;
  }
  if (a5)
  {
    *(_QWORD *)a5 = *(_QWORD *)((char *)v31 + 12);
    *(_DWORD *)(a5 + 8) = DWORD1(v31[1]);
    *(_DWORD *)(a5 + 12) = v10;
    *(_QWORD *)(a5 + 16) = v11;
  }
  return result;
}

void fpfs_AreItemsEligibleForGaplessTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _BYTE *a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t);
  CMTimeEpoch v19;
  uint64_t v20;
  CMTimeEpoch epoch;
  uint64_t TrackOfType;
  __int128 v23;
  CMTime v24;
  CMTime lhs;
  CMTime v26;
  CMTime v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CMTime time2;
  CMTime v32;
  CMTime time1;
  CMTime time;
  CMTime rhs;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = CMBaseObjectGetDerivedStorage();
  v28 = 0;
  v29 = 0;
  v30 = 0;
  fpfsi_NonSparsePlaybackEndTime(a1, (uint64_t)&v28);
  if (a1 == a3)
  {
LABEL_23:
    LODWORD(v18) = 2;
LABEL_24:
    if (!a5)
      goto LABEL_26;
    goto LABEL_25;
  }
  if ((*(_BYTE *)a2 & 1) == 0
    || (*(_BYTE *)a4 & 1) == 0
    || (v14 = *(_QWORD *)(a2 + 16), (v15 = *(_QWORD *)(v14 + 96)) == 0)
    || !FPSupport_RenderPipelineSupportsGaplessTransitionWithFormats(*(_QWORD *)(v15 + 32), *(CMAudioFormatDescriptionRef *)(v14 + 40), *(CMAudioFormatDescriptionRef *)(*(_QWORD *)(a4 + 8) + 40))|| (v16 = fpfsi_GetSpatializationConfiguration(a1) == 1, fpfs_ShouldEnableSpatializationForTrack(*(uint64_t **)(a4 + 8)) != v16)|| (v17 = *(_QWORD *)(DerivedStorage + 3104), v17 != *(_QWORD *)(v13 + 3104)))
  {
LABEL_8:
    LODWORD(v18) = 0;
    if (!a5)
      goto LABEL_26;
LABEL_25:
    *a5 = (_DWORD)v18;
    goto LABEL_26;
  }
  if (v17)
  {
    v18 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v18)
      goto LABEL_24;
    if (!v18(v17))
      goto LABEL_8;
  }
  if (FPSupport_AudioProcessingUnitsConfigurationsAreDifferent() || (v29 & 0x100000000) == 0)
    goto LABEL_8;
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
  {
    memset(&v27, 0, sizeof(v27));
    CMTimeMake(&v27, 1, 1);
    v23 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&lhs.value = *MEMORY[0x1E0CA2E18];
    v19 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    lhs.epoch = v19;
    v20 = CMBaseObjectGetDerivedStorage();
    if (fpfsi_PlaybackHasBufferedBeyondForwardEndTime(a1))
    {
      fpfsi_MapEndTimeFromTargetToSource(v20, (uint64_t)&rhs);
      *(_OWORD *)&lhs.value = *(_OWORD *)&rhs.value;
      epoch = rhs.epoch;
    }
    else
    {
      if (!*(_BYTE *)(v20 + 470))
        goto LABEL_19;
      TrackOfType = fpfs_LastTrackOfType(a1, 1936684398, 0);
      if (!TrackOfType)
      {
        *(_OWORD *)&lhs.value = v23;
        lhs.epoch = v19;
        goto LABEL_19;
      }
      *(_OWORD *)&lhs.value = *(_OWORD *)(TrackOfType + 216);
      epoch = *(_QWORD *)(TrackOfType + 232);
    }
    lhs.epoch = epoch;
LABEL_19:
    rhs = v27;
    CMTimeSubtract(&v26, &lhs, &rhs);
    fpfsi_PredictedEndTime(a1, &v24);
    if ((v26.flags & 0x1F) != 3 && (v24.flags & 0x1F) != 3
      || (memset(&rhs, 0, sizeof(rhs)),
          time1 = v26,
          v32 = v24,
          CMTimeSubtract(&time, &time1, &v32),
          CMTimeAbsoluteValue(&rhs, &time),
          CMTimeMake(&time2, 1, 1000000000),
          time1 = rhs,
          CMTimeCompare(&time1, &time2) > 0))
    {
      rhs = v26;
      time1 = v24;
      if (CMTimeCompare(&rhs, &time1) > 0)
        goto LABEL_23;
    }
  }
  LODWORD(v18) = 1;
  if (a5)
    goto LABEL_25;
LABEL_26:
  if (a6)
    *a6 = 0;
}

double fpfp_GetTransitionTimebaseStartTime@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, CMTime *a5@<X4>, int a6@<W5>, CMTime *a7@<X6>, CMTime *a8@<X7>, uint64_t a9@<X8>)
{
  CMTime *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  CMTimeEpoch v17;
  __int128 v18;
  CMTimeEpoch v19;
  CMTime *v21;
  CMTimeEpoch epoch;
  uint64_t v23;
  uint64_t v24;
  double result;
  __int128 v26;
  __int128 v27;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v31;
  CMTime v32;

  v13 = *(CMTime **)(a3 + 16);
  v14 = *(_QWORD *)(a4 + 8);
  v15 = MEMORY[0x1E0CA2E18];
  v16 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a9 = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(a9 + 16) = v17;
  *(_OWORD *)&v32.value = v16;
  v32.epoch = v17;
  v18 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v31.value = *MEMORY[0x1E0CA2E68];
  v19 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v31.epoch = v19;
  if (a6)
  {
    if (v13)
    {
      v26 = v18;
      v21 = *(CMTime **)(a3 + 32);
      time1 = *a5;
      fpfs_TransposeItemTime(&time1, (uint64_t)v13, v14, &v32);
      if ((*(_BYTE *)(a1 + 1380) & 1) != 0
        || !v21
        || (time1 = v13[9], time2 = v21[9], CMTimeCompare(&time1, &time2) < 1))
      {
        *(_OWORD *)&v31.value = v26;
        v31.epoch = v19;
      }
      else
      {
        time1 = v13[9];
        time2 = v21[9];
        CMTimeSubtract(&v31, &time1, &time2);
      }
      time2 = v32;
      rhs = v31;
      CMTimeAdd(&time1, &time2, &rhs);
      *(_OWORD *)a9 = *(_OWORD *)&time1.value;
      epoch = time1.epoch;
    }
    else
    {
      v23 = *(_QWORD *)(a4 + 24);
      v24 = *(_QWORD *)(a3 + 32);
      time1 = *a5;
      fpfs_TransposeItemTime(&time1, v24, v23, &v32);
      *(_OWORD *)a9 = *(_OWORD *)&v32.value;
      epoch = v32.epoch;
    }
    *(_QWORD *)(a9 + 16) = epoch;
  }
  else
  {
    v27 = v16;
    fpfs_GetNextTimeToPlay(a2, 0, (uint64_t)&time1);
    *(CMTime *)a9 = time1;
    *(_OWORD *)&v32.value = v27;
    v32.epoch = v17;
  }
  *a7 = v32;
  result = *(double *)&v31.value;
  *a8 = v31;
  return result;
}

double fpfsi_gatherInterestingGaplessInfoForItem@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v6 = *(_QWORD *)(DerivedStorage + 1040);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *(_QWORD *)(v6 + 48);
        v12 = *(unsigned __int8 *)(v6 + 180);
        v13 = DerivedStorage + 16 * v12;
        if (v11 == *(_QWORD *)(v13 + 992) || v11 == *(_QWORD *)(v13 + 1000))
        {
          v14 = *(_DWORD *)(v6 + 32);
          v16 = v14 == 1935832172 || v14 == 1986618469 || v14 == 1936684398;
          v17 = (1 << v12) | v9;
          if (v16)
            v9 = v17;
        }
        if (!*(_QWORD *)(v6 + 40) || *(_BYTE *)(v6 + 184))
          goto LABEL_24;
        v18 = *(_DWORD *)(v6 + 32);
        if (v18 == 1986618469)
          break;
        if (v18 == 1936684398)
        {
          v19 = 1;
          v20 = (_QWORD *)(a2 + 8);
          v21 = (_QWORD *)(a2 + 16);
          v22 = v6;
          v23 = v8;
          if (!v7)
          {
LABEL_22:
            *v20 = v6;
            v7 = v22;
            v8 = v23;
          }
LABEL_23:
          *v21 = v6;
          v10 |= v19;
          *(_DWORD *)a2 = v10;
        }
LABEL_24:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          goto LABEL_27;
      }
      v19 = 2;
      v20 = (_QWORD *)(a2 + 24);
      v21 = (_QWORD *)(a2 + 32);
      v22 = v7;
      v23 = v6;
      if (!v8)
        goto LABEL_22;
      goto LABEL_23;
    }
    v9 = 0;
LABEL_27:
    v24 = 0;
    while (1)
    {
      v25 = *(unsigned __int8 *)(DerivedStorage + v24 + 471);
      if (*(_BYTE *)(DerivedStorage + 553))
      {
        if (!*(_BYTE *)(DerivedStorage + v24 + 471))
          goto LABEL_34;
        if (!*(_QWORD *)(DerivedStorage + 1760))
          goto LABEL_33;
        v25 = *(unsigned __int8 *)(DerivedStorage + v24 + 474);
      }
      if (v25)
LABEL_33:
        v9 |= 1 << v24;
LABEL_34:
      if (++v24 == 3)
      {
        *(_BYTE *)(a2 + 40) = v9 == *(_DWORD *)(DerivedStorage + 1088);
        fpfsi_NonSparsePlaybackEndTime(a1, (uint64_t)&v26);
        result = *(double *)&v26;
        *(_OWORD *)(a2 + 44) = v26;
        *(_QWORD *)(a2 + 60) = v27;
        return result;
      }
    }
  }
  return result;
}

double fpfsi_NonSparsePlaybackEndTime@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  double result;
  __int128 v7;
  uint64_t v8;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (fpfsi_PlaybackHasBufferedBeyondForwardEndTime(a1))
  {
    fpfsi_MapEndTimeFromTargetToSource(DerivedStorage, (uint64_t)&v7);
  }
  else
  {
    if (!*(_BYTE *)(DerivedStorage + 470))
      return result;
    fpfsi_LastNonSparseSampleEnd(a1, (uint64_t)&v7);
  }
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

uint64_t fpfsi_LastNonSparseSampleEnd@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  CMTimeEpoch v5;
  uint64_t TrackOfType;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CMTimeEpoch epoch;
  __int128 v13;
  CMTime time2;
  CMTime time1;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  v4 = MEMORY[0x1E0CA2E18];
  v13 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  TrackOfType = fpfs_LastTrackOfType(a1, 1936684398, 0);
  result = fpfs_LastTrackOfType(a1, 1986618469, 0);
  if (!TrackOfType)
  {
    v8 = v13;
    *(_OWORD *)&v18.value = v13;
    v18.epoch = v5;
    if (result)
    {
      v17 = *(CMTime *)(result + 216);
      goto LABEL_9;
    }
LABEL_8:
    *(_OWORD *)&v17.value = v8;
    v17.epoch = v5;
    goto LABEL_9;
  }
  v18 = *(CMTime *)(TrackOfType + 216);
  v8 = v13;
  if (!result)
    goto LABEL_8;
  v17 = *(CMTime *)(result + 216);
  v9 = *(_QWORD *)(TrackOfType + 64);
  v10 = *(_QWORD *)(result + 64);
  if (v9 == v10)
  {
LABEL_9:
    time1 = v18;
    time2 = v17;
    result = (uint64_t)CMTimeMinimum(&v16, &time1, &time2);
    *(_OWORD *)a2 = *(_OWORD *)&v16.value;
    epoch = v16.epoch;
    goto LABEL_10;
  }
  if (v10 <= v9)
    v11 = TrackOfType + 216;
  else
    v11 = result + 216;
  *(_OWORD *)a2 = *(_OWORD *)v11;
  epoch = *(_QWORD *)(v11 + 16);
LABEL_10:
  *(_QWORD *)(a2 + 16) = epoch;
  return result;
}

uint64_t fpfsi_GetSpatializationConfiguration(uint64_t a1)
{
  uint64_t RenderingTrackofType;
  uint64_t v2;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  _BOOL8 v6;
  CFTypeRef cf;

  RenderingTrackofType = fpfs_FirstRenderingTrackofType(a1, 1936684398);
  if (!RenderingTrackofType)
    return 2;
  cf = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(RenderingTrackofType + 96) + 32);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
  v5 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v5)
    return 2;
  v5(FigBaseObject, CFSTR("SpatializationEnabled"), AllocatorForMedia, &cf);
  if (!cf)
    return 2;
  v6 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  CFRelease(cf);
  return v6;
}

uint64_t fpfs_ShouldEnableSpatializationForTrack(uint64_t *a1)
{
  uint64_t v2;
  int AudioFormatDescriptionSpatializationEligibility;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v2 = *a1;
  CMBaseObjectGetDerivedStorage();
  AudioFormatDescriptionSpatializationEligibility = FPSupport_GetAudioFormatDescriptionSpatializationEligibility(a1[5], &v7);
  CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
  FigAlternateGetImmersiveAudioCapability(a1[55], (uint64_t)CurrentAudioPersistentIDFromMediaOption);
  if (AudioFormatDescriptionSpatializationEligibility == 2)
    return fpfsi_IsSpatializationAllowed(v2);
  v5 = 0;
  if (AudioFormatDescriptionSpatializationEligibility == 1)
  {
    v5 = 1;
    if (!fpfsi_IsSpatializationAllowed(v2))
      return fpfsi_IsSpatializationAllowed(v2);
  }
  return v5;
}

__n128 fpfsi_PredictedEndTime@<Q0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __n128 result;
  CMTime v7;
  CMTime lhs;
  CMTime v9;
  CMTime time2;
  CMTime time1;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
  a2->epoch = *(_QWORD *)(v5 + 16);
  memset(&v12, 0, sizeof(v12));
  result.n128_f64[0] = fpfsi_MapEndTimeFromTargetToSource(DerivedStorage, (uint64_t)&v12);
  if (*(_BYTE *)(DerivedStorage + 470))
  {
    memset(&time1, 0, sizeof(time1));
    memset(&time2, 0, sizeof(time2));
    fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&time2);
    fpfs_GetItemBufferedDuration(a1, &time1, 0, 0);
    lhs = time2;
    v7 = time1;
    CMTimeAdd(&v9, &lhs, &v7);
    result.n128_u64[0] = v9.value;
    *a2 = v9;
  }
  if ((v12.flags & 0x1D) == 1)
  {
    time1 = v12;
    time2 = *a2;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      result = *(__n128 *)&v12.value;
      *a2 = v12;
    }
  }
  return result;
}

uint64_t fpfs_TransposeItemTime@<X0>(CMTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CMTime *a4@<X8>)
{
  CMTime v7;
  CMTime rhs;
  CMTime lhs;
  CMTime v10;

  a4->value = 0;
  *(_QWORD *)&a4->timescale = 0;
  a4->epoch = 0;
  memset(&v10, 0, sizeof(v10));
  lhs = *a1;
  rhs = *(CMTime *)(a2 + 128);
  CMTimeSubtract(&v10, &lhs, &rhs);
  rhs = v10;
  v7 = *(CMTime *)(a3 + 128);
  CMTimeAdd(&lhs, &rhs, &v7);
  *a4 = lhs;
  return CMBaseObjectGetDerivedStorage();
}

uint64_t fpfs_CommitToGaplessTransition(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  uint64_t v5;
  CFNumberRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  int v19;
  Float64 Seconds;
  Float64 v21;
  const char *v22;
  Float64 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _BYTE *, CFNumberRef, _QWORD, _QWORD);
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  CMMediaType MediaType;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t FigBaseObject;
  void (*v41)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, const __CFString *, uint64_t);
  NSObject *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, const __CFString *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, const __CFString *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, const __CFString *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, const __CFString *, uint64_t);
  unsigned int Value;
  const opaqueCMFormatDescription *v69;
  signed int MediaSubType;
  int v71;
  int v72;
  int v73;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  int v76;
  const __CFArray *v78;
  _BOOL4 v79;
  const void *v80;
  __CFDictionary *NotificationPayloadForProperties;
  const __CFAllocator *v82;
  CFDictionaryRef v83;
  const void **v84;
  NSObject *v85;
  unsigned int v86;
  unsigned int v87;
  const char *v88;
  const char *v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const __CFNumber *v115;
  const __CFNumber *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  CMTime time;
  unsigned __int8 v121;
  int v122;
  uint64_t valuePtr;
  CMAttachmentBearerRef target;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  os_log_type_t v139;
  os_log_type_t type[4];
  CFBooleanRef BOOLean;
  _BYTE v142[32];
  _BYTE v143[46];
  _BYTE v144[34];
  _BYTE v145[32];
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  v137 = *MEMORY[0x1E0CA2E18];
  v138 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v136 = 0;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = v137;
  v126 = v138;
  valuePtr = DerivedStorage[20];
  target = 0;
  v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
  v122 = 2;
  v121 = 0;
  if (!fpfs_IsPlayerEligibleForGaplessTransition()
    || !fpfs_OkayToAttemptGapless(a1, a2, (uint64_t)&v132, (uint64_t)&v127, (uint64_t)&v137))
  {
    v51 = 0;
    *(_BYTE *)(v5 + 2440) = 0;
    goto LABEL_102;
  }
  if (!*(_BYTE *)(v5 + 2440))
    goto LABEL_101;
  v7 = *((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    if (*(_BYTE *)(*((_QWORD *)&v127 + 1) + 423))
      goto LABEL_101;
  }
  v146 = v134;
  v147 = v135;
  v148 = v136;
  *(_OWORD *)v145 = v132;
  *(_OWORD *)&v145[16] = v133;
  *(_OWORD *)v143 = v129;
  *(_OWORD *)&v143[16] = v130;
  *(_QWORD *)&v143[32] = v131;
  *(_OWORD *)v142 = v127;
  *(_OWORD *)&v142[16] = v128;
  fpfs_AreItemsEligibleForGaplessTransition(a1, (uint64_t)v145, a2, (uint64_t)v142, &v122, &v121);
  if (v122 != 1)
  {
LABEL_101:
    v51 = 0;
    goto LABEL_102;
  }
  if (!fpfsi_AllTracksForMediaTypeArePlaying(a1, 1936684398))
  {
    v51 = FigSignalErrorAt();
    if (!(_DWORD)v51)
      goto LABEL_102;
    goto LABEL_50;
  }
  v8 = v133;
  *(_OWORD *)v145 = v137;
  *(_QWORD *)&v145[16] = v138;
  fpfp_GetTransitionTimebaseStartTime((uint64_t)DerivedStorage, v5, (uint64_t)&v132, (uint64_t)&v127, (CMTime *)v145, v121, (CMTime *)(v5 + 2392), (CMTime *)(v5 + 2416), (uint64_t)&v125);
  v9 = v134;
  if (v8)
    v9 = v8;
  v10 = *(_QWORD *)(v9 + 96);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v12 = CMSampleBufferCreate(AllocatorForMedia, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
  if (!(_DWORD)v12)
  {
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2718], v6, 0);
    if (dword_1EE2A2A88)
    {
      v117 = v7;
      LODWORD(BOOLean) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v14 = BOOLean;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if (v15)
      {
        v115 = v6;
        v16 = *DerivedStorage;
        if (*DerivedStorage)
          v17 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v17 = "";
        v111 = v17;
        v113 = v5;
        if (a1)
          v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v18 = "";
        v19 = *((_DWORD *)DerivedStorage + 40);
        fpfs_GetTime((uint64_t)DerivedStorage, (uint64_t)&time);
        Seconds = CMTimeGetSeconds(&time);
        *(_OWORD *)v145 = v137;
        *(_QWORD *)&v145[16] = v138;
        v21 = CMTimeGetSeconds((CMTime *)v145);
        if (a2)
          v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v22 = "";
        *(_OWORD *)v145 = v125;
        *(_QWORD *)&v145[16] = v126;
        v23 = CMTimeGetSeconds((CMTime *)v145);
        *(_DWORD *)v142 = 136317698;
        *(_QWORD *)&v142[4] = "fpfs_CommitToGaplessTransition";
        *(_WORD *)&v142[12] = 2048;
        *(_QWORD *)&v142[14] = v16;
        *(_WORD *)&v142[22] = 2082;
        *(_QWORD *)&v142[24] = v111;
        *(_WORD *)v143 = 2048;
        *(_QWORD *)&v143[2] = a1;
        *(_WORD *)&v143[10] = 2082;
        *(_QWORD *)&v143[12] = v18;
        *(_WORD *)&v143[20] = 1024;
        *(_DWORD *)&v143[22] = v19;
        *(_WORD *)&v143[26] = 2048;
        *(Float64 *)&v143[28] = Seconds;
        *(_WORD *)&v143[36] = 2048;
        *(Float64 *)&v143[38] = v21;
        *(_WORD *)v144 = 2048;
        *(_QWORD *)&v144[2] = a2;
        *(_WORD *)&v144[10] = 2082;
        *(_QWORD *)&v144[12] = v22;
        *(_WORD *)&v144[20] = 2048;
        *(Float64 *)&v144[22] = v23;
        _os_log_send_and_compose_impl();
        v5 = v113;
        v6 = v115;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v7 = v117;
    }
    v24 = *(_QWORD *)(v10 + 32);
    v25 = *(_QWORD *)(v5 + 576);
    v26 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, CFNumberRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 16);
    if (!v26)
    {
      v51 = 4294954514;
      goto LABEL_50;
    }
    *(_OWORD *)v145 = v125;
    *(_QWORD *)&v145[16] = v126;
    v12 = v26(v24, v25, v145, v6, 0, 0);
    if (!(_DWORD)v12)
    {
      v12 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v10 + 40), target);
      if (!(_DWORD)v12)
      {
        if (!v7 || (*(_BYTE *)(v7 + 423) = 1, !v8))
        {
LABEL_100:
          if (!*(_BYTE *)(v5 + 2441) && *(_QWORD *)(v5 + 784) && (BYTE12(v137) & 1) != 0)
          {
            v78 = *(const __CFArray **)(v5 + 656);
            if (v78)
              v79 = CFArrayGetCount(v78) > 0;
            else
              v79 = 0;
            v80 = (const void *)a2;
            NotificationPayloadForProperties = (__CFDictionary *)fpfs_CreateNotificationPayloadForProperties(*(const void **)v5, a2, v27, v28, v29, v30, v31, v32, CFSTR("VideoSlotArray"), (uint64_t)CFSTR("VideoTrackMatrix"));
            v82 = (const __CFAllocator *)FigGetAllocatorForMedia();
            *(_OWORD *)v145 = v137;
            *(_QWORD *)&v145[16] = v138;
            v83 = CMTimeCopyAsDictionary((CMTime *)v145, v82);
            CFDictionaryAddValue(NotificationPayloadForProperties, CFSTR("FigTime"), v83);
            v84 = (const void **)MEMORY[0x1E0C9AE40];
            if (v79)
              v84 = (const void **)MEMORY[0x1E0C9AE50];
            CFDictionaryAddValue(NotificationPayloadForProperties, CFSTR("CurrentHasEnqueuedFirstVideoFrame"), *v84);
            fpfs_EnqueueNotification(*(const void **)v5, CFSTR("ScheduleNextItemTransitionTimer"), v80, NotificationPayloadForProperties);
          }
          goto LABEL_101;
        }
        fpfsi_RemoveAudioRenderChainListeners();
        v33 = *(_QWORD *)(v8 + 96);
        v34 = CMBaseObjectGetDerivedStorage();
        MediaType = CMFormatDescriptionGetMediaType(*(CMFormatDescriptionRef *)(v33 + 16));
        v36 = *(_QWORD *)(v7 + 96);
        if (v36 == v33)
        {
          v119 = a2;
          v114 = v5;
          v116 = v6;
          LODWORD(BOOLean) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v86 = BOOLean;
          if (os_log_type_enabled(v85, type[0]))
            v87 = v86;
          else
            v87 = v86 & 0xFFFFFFFE;
          if (v87)
          {
            v112 = *(_QWORD *)v34;
            if (*(_QWORD *)v34)
              v88 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v88 = "";
            v109 = v88;
            v110 = *(_QWORD *)v7;
            if (*(_QWORD *)v7)
              v89 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v89 = "";
            v108 = v89;
            v90 = *(_DWORD *)(v34 + 160);
            v91 = *(unsigned int *)(v7 + 32);
            v92 = v91 >> 24;
            v93 = MEMORY[0x1E0C80978];
            if ((v91 & 0x80000000) != 0)
            {
              v94 = __maskrune(HIBYTE(*(_DWORD *)(v7 + 32)), 0x40000uLL);
              LODWORD(v91) = *(_DWORD *)(v7 + 32);
            }
            else
            {
              v94 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v92 + 60) & 0x40000;
            }
            if (v94)
              v95 = v92;
            else
              v95 = 46;
            v96 = BYTE2(v91);
            if (BYTE2(v91) > 0x7Fu)
            {
              v97 = __maskrune(BYTE2(v91), 0x40000uLL);
              LODWORD(v91) = *(_DWORD *)(v7 + 32);
            }
            else
            {
              v97 = *(_DWORD *)(v93 + 4 * BYTE2(v91) + 60) & 0x40000;
            }
            if (v97)
              v98 = v96;
            else
              v98 = 46;
            v99 = BYTE1(v91);
            if (BYTE1(v91) > 0x7Fu)
            {
              v100 = __maskrune(BYTE1(v91), 0x40000uLL);
              LOBYTE(v91) = *(_BYTE *)(v7 + 32);
            }
            else
            {
              v100 = *(_DWORD *)(v93 + 4 * BYTE1(v91) + 60) & 0x40000;
            }
            if (v100)
              v101 = v99;
            else
              v101 = 46;
            v102 = v91;
            if (v91 > 0x7Fu)
              v103 = __maskrune(v91, 0x40000uLL);
            else
              v103 = *(_DWORD *)(v93 + 4 * v91 + 60) & 0x40000;
            v104 = *(_QWORD *)(v7 + 96);
            if (v103)
              v105 = v102;
            else
              v105 = 46;
            v106 = *(_QWORD *)(v104 + 32);
            v107 = *(_QWORD *)(v7 + 16);
            *(_DWORD *)v142 = 136318210;
            *(_QWORD *)&v142[4] = "fpfsi_SetRenderChainOnTrackOfItem";
            *(_WORD *)&v142[12] = 2048;
            *(_QWORD *)&v142[14] = v112;
            *(_WORD *)&v142[22] = 2082;
            *(_QWORD *)&v142[24] = v109;
            *(_WORD *)v143 = 2048;
            *(_QWORD *)&v143[2] = v110;
            *(_WORD *)&v143[10] = 2082;
            *(_QWORD *)&v143[12] = v108;
            *(_WORD *)&v143[20] = 1024;
            *(_DWORD *)&v143[22] = v90;
            *(_WORD *)&v143[26] = 1024;
            *(_DWORD *)&v143[28] = v95;
            *(_WORD *)&v143[32] = 1024;
            *(_DWORD *)&v143[34] = v98;
            *(_WORD *)&v143[38] = 1024;
            *(_DWORD *)&v143[40] = v101;
            *(_WORD *)&v143[44] = 1024;
            *(_DWORD *)v144 = v105;
            *(_WORD *)&v144[4] = 2048;
            *(_QWORD *)&v144[6] = v104;
            *(_WORD *)&v144[14] = 2112;
            *(_QWORD *)&v144[16] = v106;
            *(_WORD *)&v144[24] = 2048;
            *(_QWORD *)&v144[26] = v107;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v5 = v114;
          v6 = v116;
          a2 = v119;
          goto LABEL_99;
        }
        v37 = MediaType;
        if (v36)
        {
          if (fpfs_StealBuffersAfterTransitionMarker(*(opaqueCMBufferQueue **)(v36 + 40), 1, *(opaqueCMBufferQueue **)(v33 + 40), 0))goto LABEL_99;
          fpfs_releaseRenderChain(a2);
        }
        *(_QWORD *)(v7 + 96) = v33;
        *(_BYTE *)(v7 + 421) = 0;
        ++*(_QWORD *)v33;
        fpfs_SetFeederTrack(v33, v7);
        fpfs_CacheRenderChain(a2, (_QWORD *)v33, v37);
        if (*(_DWORD *)(v7 + 32) == 1936684398)
        {
          BOOLean = 0;
          v38 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 32);
          v39 = FigGetAllocatorForMedia();
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v38);
          v41 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v41)
            v41(FigBaseObject, CFSTR("SpatializationEnabled"), v39, &BOOLean);
          v42 = *(_QWORD *)(v34 + 1800);
          v43 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(v7 + 96) + 32));
          v44 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v44)
            v44(v43, CFSTR("AudioDeviceChannelMap"), v42);
          if (dword_1EE2A2A88)
          {
            *(_DWORD *)type = 0;
            v139 = OS_LOG_TYPE_DEFAULT;
            v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v46 = *(_DWORD *)type;
            if (os_log_type_enabled(v45, v139))
              v47 = v46;
            else
              v47 = v46 & 0xFFFFFFFE;
            if (v47)
            {
              v118 = a2;
              v48 = v5;
              v49 = *(_QWORD *)v34;
              if (*(_QWORD *)v34)
                v50 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v50 = "";
              v52 = v7;
              v53 = *(_QWORD *)v7;
              if (v53)
                v54 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v54 = "";
              v55 = *(_QWORD *)(v34 + 872);
              *(_DWORD *)v142 = 136316418;
              *(_QWORD *)&v142[4] = "fpfsi_SetRenderChainOnTrackOfItem";
              *(_WORD *)&v142[12] = 2048;
              *(_QWORD *)&v142[14] = v49;
              *(_WORD *)&v142[22] = 2082;
              *(_QWORD *)&v142[24] = v50;
              *(_WORD *)v143 = 2048;
              *(_QWORD *)&v143[2] = v53;
              *(_WORD *)&v143[10] = 2082;
              *(_QWORD *)&v143[12] = v54;
              *(_WORD *)&v143[20] = 2114;
              *(_QWORD *)&v143[22] = v55;
              _os_log_send_and_compose_impl();
              v5 = v48;
              a2 = v118;
              v7 = v52;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v56 = *(_QWORD *)(v34 + 872);
          v57 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(v7 + 96) + 32));
          v58 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v58)
            v58(v57, CFSTR("TimePitchAlgorithm"), v56);
          v59 = *(_QWORD *)(v34 + 3112);
          v60 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(v7 + 96) + 32));
          v61 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v61)
            v61(v60, CFSTR("AudioProcessingUnits"), v59);
          v62 = *(_QWORD *)(v34 + 3120);
          v63 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(v7 + 96) + 32));
          v64 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v64)
            v64(v63, CFSTR("SecondaryAudioCurves"), v62);
          v65 = *(_QWORD *)(v34 + 3128);
          v66 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(v7 + 96) + 32));
          v67 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v67)
            v67(v66, CFSTR("AudioQueueClockDevice"), v65);
          fpfsi_applyLoudnessInfo(v34, v7, 0);
          fpfsi_applyAdjustTargetLevel(v34, v7);
          fpfsi_applyAdjustCompressionProfile(v34, v7);
          fpfsi_RTCReportingUpdateAudioInfo(v34, v7);
          if (BOOLean)
            Value = CFBooleanGetValue(BOOLean);
          else
            Value = 0;
          fpfsi_RTCReportingUpdateAudioSpatialization(v34, Value);
          v69 = *(const opaqueCMFormatDescription **)(v7 + 40);
          MediaSubType = CMFormatDescriptionGetMediaSubType(v69);
          v71 = 1;
          if (MediaSubType > 1885692722)
          {
            if (MediaSubType <= 1902469938)
            {
              if (MediaSubType != 1885692723)
              {
                v72 = 1902324531;
LABEL_85:
                if (MediaSubType == v72)
                  goto LABEL_97;
                goto LABEL_96;
              }
LABEL_87:
              *(_QWORD *)v145 = 0;
              FormatList = CMAudioFormatDescriptionGetFormatList(v69, (size_t *)v145);
              v71 = 0;
              if (FormatList && *(_QWORD *)v145 >= 0x30uLL)
              {
                mFormatID = FormatList->mASBD.mFormatID;
                v71 = 1;
                if (mFormatID <= 1885547314)
                {
                  if (mFormatID == 1667574579)
                    goto LABEL_97;
                  v76 = 1700997939;
LABEL_95:
                  if (mFormatID == v76)
                    goto LABEL_97;
                  goto LABEL_96;
                }
                if (mFormatID != 1885547315 && mFormatID != 1902324531)
                {
                  v76 = 2053319475;
                  goto LABEL_95;
                }
              }
LABEL_97:
              fpfsi_RTCReportingUpdateATMOSMetricVar(v34, (_BYTE *)(v34 + 2571), (_BYTE *)(v34 + 2567), v71, 0, 0);
              if (BOOLean)
                CFRelease(BOOLean);
              goto LABEL_99;
            }
            if (MediaSubType == 2053464883)
              goto LABEL_87;
            if (MediaSubType == 2053319475)
              goto LABEL_97;
            v73 = 1902469939;
          }
          else
          {
            if (MediaSubType > 1700997938)
            {
              if (MediaSubType == 1700997939)
                goto LABEL_97;
              if (MediaSubType != 1700998451)
              {
                v72 = 1885547315;
                goto LABEL_85;
              }
              goto LABEL_87;
            }
            if (MediaSubType == 1667574579)
              goto LABEL_97;
            v73 = 1667575091;
          }
          if (MediaSubType != v73)
          {
LABEL_96:
            v71 = 0;
            goto LABEL_97;
          }
          goto LABEL_87;
        }
LABEL_99:
        fpfsi_EnsureRenderChainListenersAndPropertiesForAudioTrack();
        goto LABEL_100;
      }
    }
  }
  v51 = v12;
LABEL_50:
  *(_BYTE *)(v5 + 2440) = 0;
  if (v7)
    *(_BYTE *)(v7 + 423) = 0;
LABEL_102:
  if (v6)
    CFRelease(v6);
  if (target)
    CFRelease(target);
  return v51;
}

uint64_t fpfsi_EnsureRenderChainListenersAndPropertiesForAudioTrack()
{
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterAddWeakListener();
}

uint64_t fpfs_CacheRenderChain(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t result;
  uint64_t i;
  _QWORD *v8;

  result = CMBaseObjectGetDerivedStorage();
  for (i = 0; i != 5; ++i)
  {
    if (kCommonTypes[i] == a3)
      break;
  }
  v8 = (_QWORD *)(result + 8 * i + 784);
  if (*v8)
    result = fpfs_releaseRenderChain(a1);
  *v8 = a2;
  ++*a2;
  return result;
}

void fpfsi_applyLoudnessInfo(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  __CFDictionary *v7;
  uint64_t v8;
  __CFDictionary *v9;
  int v10;
  __CFDictionary *v11;

  if (!a1)
    return;
  v11 = 0;
  if (!a2)
  {
    v8 = *(_QWORD *)(a1 + 1040);
    if (!v8)
      return;
    while (!*(_QWORD *)(v8 + 96) || *(_DWORD *)(v8 + 32) != 1936684398)
    {
LABEL_19:
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        return;
    }
    if (fpfsi_copyLoudnessInfoWithItemMediaKindAndLID(a1, v8, &v11))
      return;
    if (a3 == 1)
    {
      v9 = v11;
      v10 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(v8 + 96), (uint64_t)CFSTR("LoudnessInfo"), (uint64_t)v11);
      if (!v9)
      {
LABEL_18:
        if (v10)
          return;
        goto LABEL_19;
      }
    }
    else
    {
      v9 = v11;
      fpfsi_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(*(_QWORD *)(MEMORY[0x60] + 32), v11);
      v10 = 0;
      if (!v9)
        goto LABEL_18;
    }
    CFRelease(v9);
    v11 = 0;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a2 + 32) == 1936684398
    && *(_QWORD *)(a2 + 96)
    && !fpfsi_copyLoudnessInfoWithItemMediaKindAndLID(a1, a2, &v11))
  {
    v6 = *(_QWORD *)(a2 + 96);
    if (a3 == 1)
    {
      v7 = v11;
      fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v6, (uint64_t)CFSTR("LoudnessInfo"), (uint64_t)v11);
      if (!v7)
        return;
    }
    else
    {
      v7 = v11;
      fpfsi_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(*(_QWORD *)(v6 + 32), v11);
      if (!v7)
        return;
    }
    CFRelease(v7);
  }
}

uint64_t fpfsi_applyAdjustTargetLevel(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 3136);
    if (v3)
    {
      if (a2 && (result = *(_QWORD *)(a2 + 96)) != 0)
      {
        return fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, (uint64_t)CFSTR("AdjustTargetLevel"), v3);
      }
      else
      {
        for (i = *(_QWORD *)(v2 + 1040); i; i = *(_QWORD *)(i + 8))
        {
          result = *(_QWORD *)(i + 96);
          if (result)
          {
            if (*(_DWORD *)(i + 32) == 1936684398)
            {
              result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, (uint64_t)CFSTR("AdjustTargetLevel"), *(_QWORD *)(v2 + 3136));
              if ((_DWORD)result)
                break;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fpfsi_applyAdjustCompressionProfile(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 3144);
    if (v3)
    {
      if (a2 && (result = *(_QWORD *)(a2 + 96)) != 0)
      {
        return fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, (uint64_t)CFSTR("AdjustCompressionProfile"), v3);
      }
      else
      {
        for (i = *(_QWORD *)(v2 + 1040); i; i = *(_QWORD *)(i + 8))
        {
          result = *(_QWORD *)(i + 96);
          if (result)
          {
            if (*(_DWORD *)(i + 32) == 1936684398)
            {
              result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, (uint64_t)CFSTR("AdjustCompressionProfile"), *(_QWORD *)(v2 + 3144));
              if ((_DWORD)result)
                break;
            }
          }
        }
      }
    }
  }
  return result;
}

void fpfsi_RTCReportingUpdateAudioInfo(uint64_t a1, uint64_t a2)
{
  const AudioFormatListItem *RichestDecodableFormat;
  BOOL v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  int AudioChannelCount;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v12;
  uint64_t CFStringForOSTypeValue;
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  const __CFAllocator *v16;
  CFNumberRef v17;
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD);
  CFNumberRef v20;
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD);
  unsigned int v23;
  double valuePtr[18];

  valuePtr[16] = *(double *)MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a2 + 440))
    return;
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(a2 + 40));
  if (RichestDecodableFormat)
    v5 = 1;
  else
    v5 = dword_1EE2A2A88 == 0;
  if (!v5)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
  v23 = 0;
  AudioChannelCount = FigAlternateGetAudioChannelCount(*(_QWORD *)(a2 + 440), (uint64_t)CurrentAudioPersistentIDFromMediaOption, &v23);
  if ((AudioChannelCount - 1) <= 1)
  {
    if ((v23 & 2) != 0)
      v9 = 3;
    else
      v9 = ((unint64_t)v23 >> 1) & 2;
LABEL_13:
    v10 = *(_QWORD *)(a1 + 2536);
    if (v10)
    {
      v11 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 56);
      if (v11)
        v11(v10, CFSTR("playerStats"), CFSTR("AuRType"), v9, 0);
    }
    goto LABEL_16;
  }
  if (AudioChannelCount >= 3)
  {
    v9 = 1;
    goto LABEL_13;
  }
LABEL_16:
  if (RichestDecodableFormat)
  {
    v12 = *(_QWORD *)(a1 + 2536);
    CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
    if (v12)
    {
      v14 = CFStringForOSTypeValue;
      v15 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 48);
      if (v15)
        v15(v12, CFSTR("playerStats"), CFSTR("AuFormat"), v14, 0);
    }
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, RichestDecodableFormat);
    v18 = *(_QWORD *)(a1 + 2536);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 48);
      if (v19)
        v19(v18, CFSTR("playerStats"), CFSTR("AuSampleRate"), v17, 0);
    }
    valuePtr[0] = RichestDecodableFormat->mASBD.mSampleRate * (float)RichestDecodableFormat->mASBD.mBytesPerFrame * 8.0;
    v20 = CFNumberCreate(v16, kCFNumberDoubleType, valuePtr);
    v21 = *(_QWORD *)(a1 + 2536);
    if (v21)
    {
      v22 = *(void (**)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 48);
      if (v22)
        v22(v21, CFSTR("playerStats"), CFSTR("AuBitrate"), v20, 0);
    }
    if (v17)
      CFRelease(v17);
    if (v20)
      CFRelease(v20);
  }
}

uint64_t fpfsi_RTCReportingUpdateAudioSpatialization(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);

  v2 = *(_QWORD *)(result + 2536);
  if (v2)
  {
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 56);
    if (v4)
      return v4(v2, CFSTR("playerStats"), CFSTR("AuSpatialization"), a2, 0);
  }
  return result;
}

uint64_t fpfsi_copyLoudnessInfoWithItemMediaKindAndLID(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v6;
  const void *v7;

  if (a2)
  {
    if (!a1)
      goto LABEL_13;
  }
  else if (!a1)
  {
LABEL_13:
    v6 = 0;
LABEL_14:
    *a3 = v6;
    return 0;
  }
  if (!*(_QWORD *)(a1 + 2368) && !*(_QWORD *)(a1 + 2360) && FigCFDictionaryGetCount() < 1)
    goto LABEL_13;
  FigGetAllocatorForMedia();
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v6 = MutableCopy;
    v7 = *(const void **)(a1 + 2360);
    if (v7)
      CFDictionarySetValue(MutableCopy, CFSTR("media kind"), v7);
    if (FigCFDictionaryGetCount() >= 1)
      FigCFDictionaryAddEntriesToDictionaryWithRecursion();
    goto LABEL_14;
  }
  return FigSignalErrorAt();
}

void fpfsi_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(uint64_t a1, const void *a2)
{
  const __CFAllocator *AllocatorForMedia;
  uint64_t v5;
  uint64_t FigBaseObject;
  unsigned int (*v7)(uint64_t, const __CFString *, uint64_t, CMBufferQueueRef *);
  CMBufferQueueRef queue;
  CMSampleBufferRef v9;

  v9 = 0;
  queue = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (!CMSampleBufferCreate(AllocatorForMedia, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, &v9))
  {
    CMSetAttachment(v9, (CFStringRef)*MEMORY[0x1E0CA4E40], a2, 0);
    v5 = FigGetAllocatorForMedia();
    FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
    v7 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMBufferQueueRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v7)
    {
      if (!v7(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v5, &queue))
        CMBufferQueueEnqueue(queue, v9);
    }
  }
  if (v9)
    CFRelease(v9);
  if (queue)
    CFRelease(queue);
}

void fpfs_AudioDecoderError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CMTimeFlags v7;
  CMTimeEpoch v8;
  uint64_t v9;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  unsigned int (*v12)(uint64_t, const __CFString *, uint64_t, const __CFDictionary **);
  CMTimeEpoch epoch;
  CMTimeFlags flags;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v16;
  unsigned int v17;
  const char *v18;
  const char *v19;
  Float64 Seconds;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const AudioStreamBasicDescription *StreamBasicDescription;
  CMTimeEpoch v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  __int128 v45;
  CMTimeEpoch v46;
  CMTimeEpoch v48;
  CMTimeEpoch v49;
  uint64_t v50;
  const void *v51;
  CMTimeFlags v52;
  __int128 v53;
  CMTimeEpoch v54;
  CMTime v55;
  CMTime v56;
  CMTime type;
  CMTime rhs;
  CMTime lhs;
  const __CFDictionary *v60;
  CMTime v61;
  const char *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  CMTime time2;
  const char *v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  Float64 v78;
  CMTime time[2];
  __int128 v80;
  _QWORD v81[9];
  CMTimeValue v82;
  CMTimeScale v83;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)DerivedStorage;
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v82 = value;
  v83 = timescale;
  v60 = 0;
  v51 = (const void *)v6;
  fpfs_LockMutexWithCaller(v6);
  if (FigRetainProxyIsInvalidated())
    goto LABEL_78;
  v7 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v9 = *(_QWORD *)(DerivedStorage + 792);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(a4);
  v12 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  v49 = v8;
  epoch = v8;
  v52 = v7;
  flags = v7;
  if (v12)
  {
    epoch = v49;
    flags = v7;
    if (!v12(FigBaseObject, CFSTR("EndPresentationTimeForDecodedSamples"), AllocatorForMedia, &v60))
    {
      CMTimeMakeFromDictionary(time, v60);
      value = time[0].value;
      flags = time[0].flags;
      timescale = time[0].timescale;
      epoch = time[0].epoch;
      CFRelease(v60);
    }
  }
  if ((flags & 1) == 0 && v9)
  {
    CMBufferQueueGetMinPresentationTimeStamp(time, *(CMBufferQueueRef *)(v9 + 40));
    value = time[0].value;
    flags = time[0].flags;
    timescale = time[0].timescale;
    epoch = time[0].epoch;
  }
  v50 = a4;
  if ((flags & 1) == 0)
  {
    fpfs_GetTime(DerivedStorage, (uint64_t)&lhs);
    CMTimeMake(&rhs, 1, 1);
    CMTimeAdd(time, &lhs, &rhs);
    value = time[0].value;
    flags = time[0].flags;
    timescale = time[0].timescale;
    epoch = time[0].epoch;
  }
  v48 = epoch;
  LODWORD(v61.value) = 0;
  LOBYTE(type.value) = 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v16 = v61.value;
  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
    v17 = v16;
  else
    v17 = v16 & 0xFFFFFFFE;
  if (v17)
  {
    if (v51)
      v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
    else
      v18 = "";
    if (a2)
      v19 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
    else
      v19 = "";
    time[0].value = value;
    *(_QWORD *)&time[0].timescale = __PAIR64__(flags, timescale);
    time[0].epoch = v48;
    Seconds = CMTimeGetSeconds(time);
    LODWORD(time2.value) = 136316674;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_AudioDecoderError";
    LOWORD(time2.flags) = 2048;
    *(_QWORD *)((char *)&time2.flags + 2) = v51;
    HIWORD(time2.epoch) = 2082;
    v70 = v18;
    v71 = 2048;
    v72 = a2;
    v73 = 2082;
    v74 = v19;
    v75 = 2048;
    v76 = v50;
    v77 = 2048;
    v78 = Seconds;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v21 = v50;
  if (v9 && *(_QWORD *)(v9 + 32) == v50)
    fpfs_ClearRenderChains(a2, 2);
  CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 848));
  v22 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v22)
LABEL_78:
    fpfs_UnlockAndPostNotificationsWithCaller(v51);
  v23 = 0;
  v46 = v49;
  while (1)
  {
    v24 = *(_QWORD *)(v22 + 16);
    if (*(_DWORD *)(v22 + 32) != 1936684398 || (v52 & 1) == 0)
    {
      v26 = *(_QWORD *)(v22 + 8);
      v27 = *(_QWORD *)(v22 + 96);
      if (!v27 || *(_QWORD *)(v27 + 32) != v21)
        goto LABEL_34;
      v28 = *(unsigned __int8 *)(v22 + 182);
      if (*(_BYTE *)(v22 + 182))
      {
        time[0] = *(CMTime *)(v22 + 216);
        time2.value = value;
        time2.timescale = timescale;
        time2.flags = flags;
        time2.epoch = v48;
        if (CMTimeCompare(time, &time2) < 1)
          goto LABEL_78;
      }
      else
      {
        fpfs_StopFeedingTrack(v22, 0, 1);
      }
      v29 = fpfs_cloneTrackAndAddToTrackList((uint64_t *)v22, v28 == 0);
      if (!v29)
        goto LABEL_78;
      v30 = v29;
      *(_BYTE *)(v29 + 182) = v28;
      StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v22 + 40));
      memset(&type, 0, sizeof(type));
      if (StreamBasicDescription)
        CMTimeMake(&type, 2 * StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
      else
        CMTimeMakeWithSeconds(&type, 0.2, 1000);
      memset(&v56, 0, sizeof(v56));
      time[0].value = value;
      *(_QWORD *)&time[0].timescale = __PAIR64__(flags, timescale);
      time[0].epoch = v48;
      time2 = type;
      CMTimeAdd(&v56, time, &time2);
      memset(v81, 0, sizeof(v81));
      v80 = 0u;
      memset(time, 0, sizeof(time));
      CMBufferQueueReset(*(CMBufferQueueRef *)(*(_QWORD *)(v22 + 96) + 40));
      time[0] = v56;
      time[1] = *(CMTime *)(v22 + 128);
      if (*(_BYTE *)(v30 + 420))
      {
        time2 = v56;
        fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(v30, &time2, (uint64_t)&v55);
        v61 = v56;
        CMTimeSubtract(&time2, &v61, &v55);
        v80 = *(_OWORD *)&time2.value;
        v32 = time2.epoch;
      }
      else
      {
        v80 = *(_OWORD *)(v22 + 396);
        v32 = *(_QWORD *)(v22 + 412);
      }
      v81[0] = v32;
      v45 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)&v81[1] = *MEMORY[0x1E0CA2E18];
      v81[3] = v49;
      v81[4] = *(_QWORD *)(v30 + 80);
      LOBYTE(v81[5]) = 0;
      *(_OWORD *)((char *)&v81[5] + 4) = *MEMORY[0x1E0CA2E28];
      *(_QWORD *)((char *)&v81[7] + 4) = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
      CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v22 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfsi_ReuseSamplesInQueue, time);
      v33 = *(_QWORD *)(v22 + 232);
      *(_OWORD *)(v30 + 216) = *(_OWORD *)(v22 + 216);
      *(_QWORD *)(v30 + 232) = v33;
      time2 = v56;
      fpfsi_RestartResurrectedTrack(v30, &time2, 0);
      if (fpfsi_isTrackInLists(DerivedStorage, v30, 3u))
      {
        *(_QWORD *)(v22 + 216) = value;
        *(_DWORD *)(v22 + 224) = timescale;
        *(_DWORD *)(v22 + 228) = flags;
        *(_QWORD *)(v22 + 232) = v48;
        if (*(_QWORD *)(v22 + 112))
        {
          v53 = v45;
          v54 = v49;
          fpfs_scheduleForwardEndTimeForTrack(DerivedStorage, v22, (uint64_t)&v53);
          if (dword_1EE2A2A88)
          {
            v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v21 = v50;
          }
        }
        v23 = *(_QWORD *)(v30 + 16);
        if (*(_DWORD *)(v30 + 152) == 6 || !*(_BYTE *)(v30 + 182))
        {
          v82 = *(_QWORD *)(v30 + 216);
          v83 = *(_DWORD *)(v30 + 224);
          v52 = *(_DWORD *)(v30 + 228);
          v46 = *(_QWORD *)(v30 + 232);
          v40 = *(unsigned __int8 *)(v22 + 180);
          v41 = *(_QWORD *)(v22 + 64);
          if (*(_QWORD *)(v22 + 48) == *(_QWORD *)(DerivedStorage + 16 * v40 + 1000))
            *(_QWORD *)(DerivedStorage + 8 * v40 + 1144) = v41;
          else
            *(_QWORD *)(DerivedStorage + 1120 + 8 * v40) = v41;
        }
        else
        {
          fpfs_DeleteTrack(a2);
        }
      }
      else if (dword_1EE2A2A88)
      {
        LODWORD(v53) = 0;
        v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v36 = v53;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          v37 = v36;
        else
          v37 = v36 & 0xFFFFFFFE;
        if (v37)
        {
          v38 = *(_QWORD *)DerivedStorage;
          if (*(_QWORD *)DerivedStorage)
            v39 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v39 = "";
          v42 = a2;
          if (a2)
          {
            v43 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            v42 = a2;
          }
          else
          {
            v43 = "";
          }
          v44 = *(_QWORD *)(DerivedStorage + 160);
          LODWORD(v61.value) = 136316418;
          *(CMTimeValue *)((char *)&v61.value + 4) = (CMTimeValue)"fpfs_AudioDecoderError";
          LOWORD(v61.flags) = 2048;
          *(_QWORD *)((char *)&v61.flags + 2) = v38;
          HIWORD(v61.epoch) = 2082;
          v62 = v39;
          v63 = 2048;
          v64 = v42;
          v65 = 2082;
          v66 = v43;
          v67 = 1024;
          v68 = v44;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v21 = v50;
      }
    }
    else
    {
      if (v24 >= v23)
        goto LABEL_78;
      fpfsi_MoveTrackToPlayedOut(DerivedStorage, v22, MEMORY[0x1E0CA2E18]);
      fpfs_ResurrectPlayedOutTrack(v22);
      if (*(_DWORD *)(v22 + 152) == 6)
      {
        time[0].value = v82;
        *(_QWORD *)&time[0].timescale = __PAIR64__(v52, v83);
        time[0].epoch = v46;
        fpfsi_RestartResurrectedTrack(v22, time, 1);
      }
    }
    v26 = *(_QWORD *)(DerivedStorage + 1040);
    if (!v26)
      goto LABEL_78;
    while (*(_QWORD *)(v26 + 16) <= v24)
    {
      v26 = *(_QWORD *)(v26 + 8);
      if (!v26)
        goto LABEL_78;
    }
LABEL_34:
    v22 = v26;
    if (!v26)
      goto LABEL_78;
  }
}

void fpfs_AudioPlayResourcePreempted(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)DerivedStorage;
  fpfs_LockMutexWithCaller(*(_QWORD *)DerivedStorage);
  if (!FigRetainProxyIsInvalidated())
  {
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(_BYTE *)(DerivedStorage + 2872))
    {
      v9 = *(_QWORD *)(DerivedStorage + 1040);
      if (v9)
      {
        while (1)
        {
          v10 = *(_QWORD *)(v9 + 96);
          if (v10)
          {
            if (*(_QWORD *)(v10 + 32) == a4)
              break;
          }
          v9 = *(_QWORD *)(v9 + 8);
          if (!v9)
            goto LABEL_15;
        }
        if (dword_1EE2A2A88)
        {
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_BYTE *)(DerivedStorage + 2873) = 1;
        if (*(float *)(DerivedStorage + 840) != 0.0)
          fpfs_stopPlaybackForInternalReason(v7);
        fpfsi_ReleaseRenderChainsForPausing(a2);
      }
    }
  }
LABEL_15:
  fpfs_UnlockAndPostNotificationsWithCaller(v7);
}

uint64_t fpfs_AudioPlayResourceReleased(int a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  CMNotificationCenterGetDefaultLocalCenter();
  CMBaseObjectGetDerivedStorage();
  FigGetAllocatorForMedia();
  return FigDeferNotificationToDispatchQueue();
}

void fpfsi_AudioLatencyChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf[27];

  cf[25] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v8 = 0;
  cf[0] = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, cf, &v8))
  {
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (dword_1EE2A2A88)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    v7 = v8;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf[0])
      CFRelease(cf[0]);
    if (v7)
      CFRelease(v7);
  }
}

void fpfsi_renderPipelineRequiresManualRestart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf[27];

  cf[25] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v8 = 0;
  cf[0] = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, cf, &v8))
  {
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (dword_1EE2A2A88)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    v7 = v8;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf[0])
      CFRelease(cf[0]);
    if (v7)
      CFRelease(v7);
  }
}

void fpfsi_RenderPipelineFailedToStart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf[27];

  cf[25] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v8 = 0;
  cf[0] = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, cf, &v8))
  {
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (dword_1EE2A2A88)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    v7 = v8;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf[0])
      CFRelease(cf[0]);
    if (v7)
      CFRelease(v7);
  }
}

void fpfsi_RenderPipelineWantsRebuildToIncreaseFidelity(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf)
      CFRelease(cf);
    if (v5)
      CFRelease(v5);
  }
}

void fpfsi_RenderPipelineDeviceHasDisconnected(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf)
      CFRelease(cf);
    if (v5)
      CFRelease(v5);
  }
}

void fpfsi_renderPipelineProcessingModeChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf)
      CFRelease(cf);
    if (v5)
      CFRelease(v5);
  }
}

void fpfsi_RenderPipelinePrerollLost(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf)
      CFRelease(cf);
    if (v5)
      CFRelease(v5);
  }
}

void fpfsi_renderPipelineStartupTimestampsChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4)
      CFRetain(a4);
    CMNotificationCenterGetDefaultLocalCenter();
    v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf)
      CFRelease(cf);
    if (v5)
      CFRelease(v5);
  }
}

const void *fpfs_ResurrectPlayedOutTrack(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v14;
  const __CFAllocator *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  const void *Value;
  const void *v19;
  CFNumberRef v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v34;
  int v35;
  int valuePtr;
  CFDictionaryRef theDict[18];

  theDict[16] = *(CFDictionaryRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 1112) + 1;
  *(_QWORD *)(DerivedStorage + 1112) = v3;
  if (dword_1EE2A2A88)
  {
    v35 = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(_QWORD *)(DerivedStorage + 1056);
  if (v5 == a1)
  {
    v8 = DerivedStorage + 1056;
    v34 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(DerivedStorage + 1056) = v34;
    if (!v34)
LABEL_6:
      *(_QWORD *)(DerivedStorage + 1064) = v8;
  }
  else
  {
    do
    {
      v6 = v5;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != a1);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v6 + 8) = v7;
    v8 = v6 + 8;
    if (!v7)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(DerivedStorage + 168);
  v10 = *(_DWORD *)(a1 + 16);
  v35 = v3;
  valuePtr = v10;
  theDict[0] = 0;
  if (v9)
    v11 = v10 == (_DWORD)v3;
  else
    v11 = 1;
  if (!v11)
  {
    FigPropertyStorageCopyValue(v9, (uint64_t)CFSTR("TrackPropertyStorages"), theDict);
    if (theDict[0])
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, theDict[0]);
      if (MutableCopy)
      {
        v14 = MutableCopy;
        v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        if (v16)
        {
          v17 = v16;
          Value = CFDictionaryGetValue(v14, v16);
          if (Value)
          {
            v19 = Value;
            v20 = CFNumberCreate(v15, kCFNumberSInt32Type, &v35);
            CFDictionarySetValue(v14, v20, v19);
            CFDictionaryRemoveValue(v14, v17);
            FigPropertyStorageSetValue(v9, CFSTR("TrackPropertyStorages"), v14);
            if (v20)
              CFRelease(v20);
          }
          CFRelease(v17);
        }
        CFRelease(v14);
      }
      if (theDict[0])
        CFRelease(theDict[0]);
    }
  }
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 424) = -1;
  fpfs_CreateTrackDryTimer(a1);
  v27 = *(unsigned __int8 *)(a1 + 180);
  v28 = *(_QWORD *)(DerivedStorage + 16 * v27 + 1000);
  v29 = DerivedStorage + 8 * v27;
  v30 = (_QWORD *)(v29 + 1144);
  v31 = (_QWORD *)(v29 + 1120);
  if (*(_QWORD *)(a1 + 48) == v28)
    v32 = v30;
  else
    v32 = v31;
  *v32 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 8) = 0;
  **(_QWORD **)(DerivedStorage + 1048) = a1;
  *(_QWORD *)(DerivedStorage + 1048) = a1 + 8;
  if (*(_DWORD *)(a1 + 32) == 1986618469)
    fpfsi_PostExternalProtectionRequiredChangedNotification(*(const void **)a1);
  return fpfs_PrepareAndEnqueueTracksChangedNotification(*(const void **)DerivedStorage, *(const void **)a1, v21, v22, v23, v24, v25, v26);
}

uint64_t fpfsi_RestartResurrectedTrack(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t TrackOfType;
  int v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  int v14;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;
  CMSampleBufferRef refcon;
  CMTime v20;

  v6 = *(_QWORD *)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32) == 1936684398)
  {
    refcon = 0;
    v20 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetFirstNonMarkerSBuf, &refcon);
    TrackOfType = fpfs_LastTrackOfType(v6, 1936684398, a1);
    CMSampleBufferGetOutputPresentationTimeStamp(&v20, refcon);
    lhs = v20;
    rhs = *(CMTime *)(a1 + 128);
    CMTimeAdd(&time1, &lhs, &rhs);
    v20 = time1;
    if (a3 == 1 && TrackOfType)
    {
      if (*(_QWORD *)(TrackOfType + 64) == *(_QWORD *)(a1 + 64) && (*(_BYTE *)(TrackOfType + 228) & 1) != 0)
      {
        time1 = v20;
        lhs = *(CMTime *)(TrackOfType + 216);
        if (CMTimeCompare(&time1, &lhs) < 0)
        {
          time1 = *(CMTime *)(TrackOfType + 216);
          lhs = *(CMTime *)gFSPAudioCrossfadeDuration;
          CMTimeSubtract(&time2, &time1, &lhs);
          lhs = v20;
          CMTimeMaximum(&time1, &lhs, &time2);
          *a2 = time1;
          v10 = 1;
          goto LABEL_14;
        }
      }
      goto LABEL_9;
    }
    if (TrackOfType)
    {
LABEL_9:
      if (*(_QWORD *)(TrackOfType + 64) != *(_QWORD *)(a1 + 64)
        && (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504) || (_os_feature_enabled_impl() & 1) == 0))
      {
        fpfs_ClearRenderChains(v6, 2);
      }
    }
  }
  v10 = 0;
LABEL_14:
  memset(&v20, 0, sizeof(v20));
  time1 = *a2;
  fpfsi_PrepareTrackForReplay(a1, (__int128 *)&time1.value, (uint64_t)&v20);
  if (!v10)
  {
    fpfs_ChangeTrackState(a1, 3u);
    v12 = *(_DWORD *)(a1 + 32);
    if (v12 == 1936684398)
    {
      if (*(_BYTE *)(v8 + 523))
      {
        LODWORD(v13) = 0;
      }
      else
      {
        v13 = *(_QWORD *)(v8 + 536);
        if (v13)
          LODWORD(v13) = FPSupport_IsAnAudioDeviceAvailable(v13) != 0;
      }
    }
    else
    {
      if (v12 != 1986618469)
        goto LABEL_24;
      LODWORD(v13) = fpfs_CanRenderVideo(v8, v6);
    }
    if (!(_DWORD)v13)
    {
      if (*(_DWORD *)(a1 + 32) == 1986618469 && !*(_BYTE *)(a1 + 184))
      {
        fpfs_ChangeTrackState(a1, 5u);
        fpfs_CheckVideoSyncQueue(a1, 0);
      }
      else
      {
        fpfs_ChangeTrackState(a1, 4u);
      }
      result = 0;
      goto LABEL_31;
    }
LABEL_24:
    time1 = *a2;
    lhs = v20;
    rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    result = fpfs_StartTrackPlaying((const void **)DerivedStorage, a1, &time1, &lhs, &rhs);
    if ((_DWORD)result)
      return result;
    goto LABEL_31;
  }
  fpfs_ChangeTrackState(a1, 1u);
  time1 = *a2;
  result = fpfs_FinishAudioSyncAndStart((_QWORD *)a1, &time1);
LABEL_31:
  if (*(_DWORD *)(DerivedStorage + 2784) > *(_DWORD *)(DerivedStorage + 2788))
  {
    v14 = *(_DWORD *)(a1 + 32);
    if (v14 == 1986618469)
    {
      *(_BYTE *)(DerivedStorage + 2817) = 1;
    }
    else if (v14 == 1936684398)
    {
      *(_BYTE *)(DerivedStorage + 2816) = 1;
    }
  }
  return result;
}

uint64_t fpfsi_ReuseSamplesInQueue(CMSampleBufferRef sbuf, uint64_t a2)
{
  CMTime v5;
  CMTime time2;
  CMTime time1;
  CMTime v8;
  CMTime v9;
  CMTime rhs;
  CMTime lhs;
  CMTime v12;
  CMTime v13;

  if (*(_BYTE *)(a2 + 105)
    || !fpfs_IsMarkerOnly(sbuf)
    || fpfs_IsMarkerSampleContainingAttachment(sbuf, (const __CFString *)*MEMORY[0x1E0CA2700]))
  {
    memset(&v13, 0, sizeof(v13));
    CMSampleBufferGetOutputPresentationTimeStamp(&v13, sbuf);
    memset(&v12, 0, sizeof(v12));
    lhs = *(CMTime *)a2;
    rhs = *(CMTime *)(a2 + 48);
    CMTimeSubtract(&v12, &lhs, &rhs);
    if (!fpfs_IsMarkerOnly(sbuf))
    {
      memset(&lhs, 0, sizeof(lhs));
      CMSampleBufferGetPresentationTimeStamp(&v9, sbuf);
      rhs = *(CMTime *)(a2 + 24);
      CMTimeAdd(&lhs, &v9, &rhs);
      memset(&rhs, 0, sizeof(rhs));
      CMSampleBufferGetDuration(&rhs, sbuf);
      memset(&v8, 0, sizeof(v8));
      if ((rhs.flags & 1) != 0)
      {
        time1 = lhs;
        time2 = rhs;
        CMTimeAdd(&v8, &time1, &time2);
      }
      else
      {
        v8 = lhs;
      }
      time1 = v8;
      time2 = v12;
      if (CMTimeCompare(&time1, &time2) < 0
        || (*(_BYTE *)(a2 + 84) & 1) != 0
        && (time1 = v8, time2 = *(CMTime *)(a2 + 72), CMTimeCompare(&time1, &time2) > 0))
      {
        if (!*(_BYTE *)(a2 + 104))
          return 0;
        if (fpfs_IsVideoSync(sbuf))
        {
          time1 = lhs;
          time2 = v12;
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            *(CMTime *)(a2 + 108) = v13;
            CMBufferQueueReset(*(CMBufferQueueRef *)(a2 + 96));
          }
        }
        time1 = v8;
        time2 = *(CMTime *)(a2 + 72);
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          memset(&time1, 0, sizeof(time1));
          CMSampleBufferGetOutputDecodeTimeStamp(&time1, sbuf);
          time2 = time1;
          v5 = *(CMTime *)(a2 + 72);
          if (CMTimeCompare(&time2, &v5) >= 1)
            return 0;
          fpfs_DoNotDisplay(sbuf);
        }
      }
      else
      {
        time1 = lhs;
        time2 = v13;
        if (CMTimeCompare(&time1, &time2))
        {
          CMRemoveAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA2728]);
          time1 = lhs;
          CMSampleBufferSetOutputPresentationTimeStamp(sbuf, &time1);
        }
        CMRemoveAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26D8]);
        fpfs_RemoveDoNotDisplay(sbuf);
      }
    }
    CMRemoveAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26C8]);
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 96), sbuf);
  }
  return 0;
}

void fpfs_CreateTrackDryTimer(uint64_t a1)
{
  void *v2;
  uint64_t DerivedStorage;
  CFArrayRef ItemAndTrackNumberPayload;
  NSObject *v5;
  uint64_t v6;

  v2 = *(void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ItemAndTrackNumberPayload = fpfs_CreateItemAndTrackNumberPayload(v2, a1);
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(a1 + 120));
  v5 = fpfs_TimerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 600), ItemAndTrackNumberPayload, 0xFFFFFFFFFFFFFFFFLL, (void (__cdecl *)(void *))fpfs_ranDryTimerProc, 0);
  *(_QWORD *)(a1 + 120) = v5;
  v6 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 156) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a1 + 172) = *(_QWORD *)(v6 + 16);
  if (v5)
    CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 576), v5);
  if (ItemAndTrackNumberPayload)
    CFRelease(ItemAndTrackNumberPayload);
}

CFArrayRef fpfs_CreateItemAndTrackNumberPayload(void *a1, uint64_t a2)
{
  uint64_t v2;
  const __CFAllocator *AllocatorForMedia;
  CFArrayRef v4;
  uint64_t v6;
  void *values;
  CFTypeRef cf;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2)
    v2 = *(_QWORD *)(a2 + 16);
  else
    v2 = -1;
  v6 = v2;
  values = a1;
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &v6);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v4 = CFArrayCreate(AllocatorForMedia, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
  if (cf)
    CFRelease(cf);
  return v4;
}

void fpfs_ranDryTimerProc(const __CFArray *a1)
{
  const void *ValueAtIndex;
  const __CFNumber *v3;
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  id v7;
  const __CFArray *Next;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  float v12;
  uint64_t v13;
  OpaqueCMTimebase *v14;
  NSObject *v15;
  uint64_t RenderingTrackofType;
  uint64_t v17;
  BOOL v18;
  char v19;
  _BOOL4 v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  opaqueCMBufferQueue *v35;
  uint64_t v36;
  uint64_t v37;
  int PeakBitRate;
  uint64_t v39;
  _BOOL4 v40;
  CMTimeEpoch v41;
  __int128 v42;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v44;
  NSObject *v45;
  CMTime v46;
  _BYTE v47[24];
  CMTime v48;
  CMTime v49;
  CMTime rhs;
  CMTime time2;
  CMTime v52;
  uint64_t valuePtr;
  CMTime v54;
  CMTime lhs;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
  v3 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)DerivedStorage;
  v6 = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  CFNumberGetValue(v3, kCFNumberSInt64Type, &valuePtr);
  fpfs_LockMutexWithCaller((uint64_t)v5);
  v7 = *(id *)(v6 + 776);
  voucher_adopt();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_2;
  Next = fpfs_getNext(v6, 0);
  v9 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v9)
    goto LABEL_2;
  v10 = (uint64_t)Next;
  while (*(_QWORD *)(v9 + 16) != valuePtr)
  {
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9)
      goto LABEL_2;
  }
  if (!Next)
    goto LABEL_2;
  memset(&v52, 0, sizeof(v52));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v52);
  v11 = (_OWORD *)(v9 + 156);
  if ((*(_BYTE *)(v9 + 168) & 1) == 0)
  {
LABEL_15:
    v13 = MEMORY[0x1E0CA2E18];
    v42 = *MEMORY[0x1E0CA2E18];
    *v11 = *MEMORY[0x1E0CA2E18];
    v41 = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v9 + 172) = v41;
    if (dword_1EE2A2A88)
    {
      LODWORD(v46.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    RenderingTrackofType = fpfs_FirstRenderingTrackofType(v10, *(_DWORD *)(v9 + 32));
    if (!RenderingTrackofType)
    {
      FigSignalErrorAt();
      goto LABEL_2;
    }
    v17 = RenderingTrackofType;
    do
      v17 = *(_QWORD *)(v17 + 8);
    while (v17 && *(_DWORD *)(v17 + 32) != *(_DWORD *)(RenderingTrackofType + 32));
    if (*(_QWORD *)(v9 + 16) > *(_QWORD *)(RenderingTrackofType + 16))
    {
      if (!dword_1EE2A2A88)
        goto LABEL_2;
LABEL_49:
      LODWORD(v46.value) = 0;
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
LABEL_50:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_2;
    }
    v18 = v9 == RenderingTrackofType && v17 == 0;
    v19 = v18;
    if (v18)
    {
      if (*(_BYTE *)(v9 + 182))
      {
        if (!dword_1EE2A2A88)
          goto LABEL_2;
        goto LABEL_49;
      }
      if (*(_QWORD *)(v9 + 48) == *(_QWORD *)(DerivedStorage + 16 * *(unsigned __int8 *)(v9 + 180) + 992))
      {
        if (*(_DWORD *)(v9 + 152) != 6)
        {
          if (!dword_1EE2A2A88)
            goto LABEL_2;
          goto LABEL_49;
        }
        if (dword_1EE2A2A88)
        {
          v44 = v19;
          LODWORD(v46.value) = 0;
          v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v26 = 0;
LABEL_59:
          v19 = v44;
          goto LABEL_60;
        }
        v26 = 0;
LABEL_60:
        lhs = v52;
        if (fpfs_TrackIsStalled(v9, &lhs))
        {
          v39 = *(_QWORD *)(v9 + 16);
          if (dword_1EE2A2A88)
          {
            LODWORD(v46.value) = 0;
            v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!fpfs_StopPlaybackByStalledTrack(v9))
          {
            v28 = CMBaseObjectGetDerivedStorage();
            if (!v28 || fpfs_GetItemLivingTrack(v28, v39, &lhs) || !FigSignalErrorAt())
            {
              if (*(_QWORD *)(v9 + 48) == *(_QWORD *)(DerivedStorage + 16 * *(unsigned __int8 *)(v9 + 180) + 992))
                v29 = 1;
              else
                v29 = v26;
              if (!v29)
                fpfs_StopFeedingTrack(v9, 0, 1);
              if ((v19 & 1) != 0)
              {
                v30 = *(_QWORD *)(DerivedStorage + 1696);
                if (!v30 || !FigAlternateIsIFrameOnly(v30))
                {
                  *(_BYTE *)(DerivedStorage + 2800) = 1;
                  LODWORD(v46.value) = 0;
                  v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
                  goto LABEL_50;
                }
              }
              else
              {
                valuePtr = *(_QWORD *)(v17 + 16);
                v32 = 1;
                if (*(_DWORD *)(v9 + 32) == 1936684398)
                {
                  fpfs_GetStartupDurationOfType((CMTime *)v17, (uint64_t)v47);
                  v33 = (1 << *(_BYTE *)(v17 + 180));
                  lhs = v52;
                  if (fpfs_CheckCanKeepUp((uint64_t)ValueAtIndex, (uint64_t)v47, &lhs, v33, 0, 0, 0, 0))
                  {
                    v34 = *(_QWORD *)(DerivedStorage + 1040);
                    if (v34)
                    {
                      do
                      {
                        if (*(_QWORD *)(v34 + 16) == valuePtr)
                        {
                          memset(&v46, 0, sizeof(v46));
                          v35 = *(opaqueCMBufferQueue **)(v34 + 72);
                          if (v35)
                          {
                            CMBufferQueueGetMinPresentationTimeStamp(&v46, v35);
                          }
                          else
                          {
                            *(_OWORD *)&v46.value = v42;
                            v46.epoch = v41;
                          }
                          if ((v46.flags & 1) == 0 || (lhs = v52, v54 = v46, CMTimeCompare(&lhs, &v54) < 0))
                          {
                            v32 = 1;
                          }
                          else
                          {
                            if (dword_1EE2A2A88)
                            {
                              v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
                              fig_log_call_emit_and_clean_up_after_send_and_compose();
                            }
                            if (*(_DWORD *)(v34 + 32) == 1936684398)
                              fpfs_ForceAudioSync(v34);
                            v32 = 0;
                          }
                          goto LABEL_93;
                        }
                        v34 = *(_QWORD *)(v34 + 8);
                      }
                      while (v34);
                      v32 = 1;
                    }
                  }
                }
LABEL_93:
                if (!FigRetainProxyIsInvalidated())
                {
                  if (v32)
                  {
                    v36 = *(_QWORD *)(DerivedStorage + 1040);
                    if (v36)
                    {
                      while (*(_QWORD *)(v36 + 16) != valuePtr)
                      {
                        v36 = *(_QWORD *)(v36 + 8);
                        if (!v36)
                          goto LABEL_104;
                      }
                      v37 = *(_QWORD *)(DerivedStorage + 1760);
                      if (v37
                        && *(_QWORD *)(DerivedStorage + 1696)
                        && (PeakBitRate = FigAlternateGetPeakBitRate(v37),
                            PeakBitRate > (int)FigAlternateGetPeakBitRate(*(_QWORD *)(DerivedStorage + 1696))))
                      {
                        fpfs_CancelTrialSwitch((uint64_t)ValueAtIndex);
                      }
                      else
                      {
                        fpfs_AbandonSyncAttempt(v36);
                      }
                    }
                  }
LABEL_104:
                  fpfs_CheckPrebufferedLevels(&lhs, ValueAtIndex, 1, -1, 0);
                }
              }
            }
          }
        }
LABEL_2:

        fpfs_UnlockAndPostNotificationsWithCaller(v5);
      }
      if (dword_1EE2A2A88)
        goto LABEL_41;
    }
    else
    {
      if (v9 != RenderingTrackofType)
        goto LABEL_2;
      if (v17)
        v20 = *(_DWORD *)(v17 + 152) == 1;
      else
        v20 = 0;
      v44 = v19;
      if (dword_1EE2A2A88)
      {
        v40 = v20;
        LODWORD(v46.value) = 0;
        v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v20 = v40;
      }
      if (v20)
      {
        if (dword_1EE2A2A88)
        {
          LODWORD(v46.value) = 0;
          v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          v26 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_59;
        }
        v26 = 1;
        goto LABEL_60;
      }
      if (dword_1EE2A2A88)
      {
LABEL_41:
        LODWORD(v46.value) = 0;
        v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    fpfs_StopFeedingTrack(v9, 0, 1);
    goto LABEL_2;
  }
  v12 = *(float *)(v6 + 108);
  if (v12 >= 0.0)
  {
    CMTimeMake(&rhs, 1, 100);
    lhs = v52;
    CMTimeAdd(&time2, &lhs, &rhs);
    *(_OWORD *)&lhs.value = *v11;
    lhs.epoch = *(_QWORD *)(v9 + 172);
    if (CMTimeCompare(&lhs, &time2) >= 1)
      goto LABEL_17;
    v12 = *(float *)(v6 + 108);
  }
  if (v12 >= 0.0)
    goto LABEL_15;
  CMTimeMake(&v48, 1, 100);
  lhs = v52;
  CMTimeSubtract(&v49, &lhs, &v48);
  *(_OWORD *)&lhs.value = *v11;
  lhs.epoch = *(_QWORD *)(v9 + 172);
  if ((CMTimeCompare(&lhs, &v49) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_17:
  v14 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
  v15 = *(NSObject **)(v9 + 120);
  *(_OWORD *)&lhs.value = *v11;
  lhs.epoch = *(_QWORD *)(v9 + 172);
  CMTimebaseSetTimerDispatchSourceNextFireTime(v14, v15, &lhs, 1u);
  goto LABEL_2;
}

BOOL fpfs_TrackIsStalled(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CMTime v7;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v11;
  CMTime time2;

  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(a1 + 184) && *(_DWORD *)(a1 + 32) == 1986618469)
  {
    v5 = DerivedStorage;
    memset(&time2, 0, sizeof(time2));
    CMTimeMake(&time2, 10, 1000);
    if (*(float *)(v5 + 108) >= 0.0 && (*(_BYTE *)(a1 + 228) & 1) != 0)
    {
      lhs = *a2;
      rhs = time2;
      CMTimeAdd(&v11, &lhs, &rhs);
      lhs = *(CMTime *)(a1 + 216);
      return CMTimeCompare(&v11, &lhs) >= 0;
    }
    else
    {
      lhs = *a2;
      rhs = time2;
      CMTimeSubtract(&time1, &lhs, &rhs);
      lhs = *(CMTime *)(a1 + 216);
      return CMTimeCompare(&time1, &lhs) < 1;
    }
  }
  else
  {
    time2 = *(CMTime *)(a1 + 216);
    lhs = *a2;
    CMTimeSubtract(&v7, &time2, &lhs);
    *(_OWORD *)&time2.value = kGaplessTransitionDeadlineInterval;
    time2.epoch = 0;
    return CMTimeCompare(&v7, &time2) >> 31;
  }
}

uint64_t fpfs_ForceAudioSync(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v5;
  uint64_t result;
  __n128 v7;
  CMTime v8;
  os_log_type_t type;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    v10 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_ClearRenderChains(v2, 2);
  fpfsi_UpdateAudioActiveSamples(v2, 0);
  fpfs_GetTime(DerivedStorage, (uint64_t)&v8);
  v5 = fpfs_FinishAudioSyncAndStart((_QWORD *)a1, &v8);
  result = fpfs_LastTrackOfType(v2, 1936684398, a1);
  if (result)
    return fpfs_FinishTrack(result, 0);
  if (v5 != -16042 && *(_DWORD *)(a1 + 152) == 6)
  {
    v7.n128_u32[0] = *(_DWORD *)(DerivedStorage + 840);
    return fpfs_SetRateOnTrack(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v7);
  }
  return result;
}

double fpfsi_PrepareTrackForReplay(uint64_t a1, __int128 *a2, uint64_t a3)
{
  opaqueCMBufferQueue *v6;
  double result;
  CMTime v8;
  CMTime rhs;
  __int128 refcon;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  CMTime v14[4];

  refcon = *a2;
  v11 = *((_QWORD *)a2 + 2);
  memset(v14, 0, 88);
  v12 = *(_OWORD *)(a1 + 128);
  v13 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 420))
  {
    v8 = *(CMTime *)a2;
    fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(a1, &v8, (uint64_t)&rhs);
    v8 = *(CMTime *)a2;
    CMTimeSubtract(v14, &v8, &rhs);
  }
  else
  {
    v14[0] = *(CMTime *)(a1 + 396);
  }
  *(_OWORD *)&v14[1].value = *(_OWORD *)(a1 + 216);
  v6 = *(opaqueCMBufferQueue **)(a1 + 72);
  v14[1].epoch = *(_QWORD *)(a1 + 232);
  v14[2].value = (CMTimeValue)v6;
  LOWORD(v14[2].timescale) = *(_DWORD *)(a1 + 32) == 1986618469;
  *(_OWORD *)&v14[2].flags = *MEMORY[0x1E0CA2E28];
  *(CMTimeValue *)((char *)&v14[3].value + 4) = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  CMBufferQueueReset(v6);
  CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfsi_ReuseSamplesInQueue, &refcon);
  result = *(double *)&v14[2].flags;
  *(_OWORD *)a3 = *(_OWORD *)&v14[2].flags;
  *(_QWORD *)(a3 + 16) = *(CMTimeValue *)((char *)&v14[3].value + 4);
  return result;
}

uint64_t fpfsi_deferredAudioLatencyChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v9;
  const void *v10;

  v9 = 0;
  v10 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v10, (CFTypeRef *)&v9))
  {
    v5 = v9;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = v10;
    fpfsi_restartAudioRendering((uint64_t)v10, v5, DerivedStorage, (uint64_t)a4);
    fpfs_UnlockAndPostNotificationsWithCaller(v7);
  }
  if (a4)
    CFRelease(a4);
  return FigRetainProxyRelease();
}

void fpfsi_restartAudioRendering(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t AllocatorForMedia;
  uint64_t v10;
  void (*v11)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *);
  int Value;
  uint64_t RenderingTrackofType;
  float v14;
  NSObject *v15;
  unsigned int v16;
  unsigned int v17;
  const char *v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const char *v20;
  uint64_t v21;
  __int128 v22;
  CFBooleanRef BOOLean;
  _BYTE v24[24];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  const char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 536);
  if (v8)
  {
    BOOLean = 0;
    AllocatorForMedia = FigGetAllocatorForMedia();
    v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v10
      && (v11 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *))(v10 + 8)) != 0
      && (v11(v8, CFSTR("FAS_IsActive"), AllocatorForMedia, &BOOLean), BOOLean))
    {
      Value = CFBooleanGetValue(BOOLean);
      CFRelease(BOOLean);
      if (Value || !dword_1EE2A2A88)
      {
        if (!Value)
          return;
        goto LABEL_8;
      }
    }
    else if (!dword_1EE2A2A88)
    {
      return;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
LABEL_8:
  RenderingTrackofType = fpfs_FirstRenderingTrackofType(a2, 1936684398);
  if (RenderingTrackofType)
  {
    if (*(_QWORD *)(*(_QWORD *)(RenderingTrackofType + 96) + 32) == a4)
    {
      v14 = *(float *)(a3 + 840);
      if (v14 != 0.0)
      {
        if (dword_1EE2A2A88)
        {
          LODWORD(BOOLean) = 0;
          v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v16 = BOOLean;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            v17 = v16;
          else
            v17 = v16 & 0xFFFFFFFE;
          if (v17)
          {
            if (a1)
              v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v18 = "";
            if (a2)
              v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v20 = "";
            *(_DWORD *)v24 = 136316162;
            *(_QWORD *)&v24[4] = "fpfsi_restartAudioRendering";
            *(_WORD *)&v24[12] = 2048;
            *(_QWORD *)&v24[14] = a1;
            *(_WORD *)&v24[22] = 2082;
            v25 = v18;
            v26 = 2048;
            v27 = a2;
            v28 = 2082;
            v29 = v20;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v22 = *MEMORY[0x1E0CA2E18];
        v30 = v22;
        v21 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v31 = v21;
        *(_OWORD *)v24 = v22;
        *(_QWORD *)&v24[16] = v21;
        fpfs_setRateInternal(a1, a2, &v30, v24, 0.0);
        v30 = v22;
        v31 = v21;
        *(_OWORD *)v24 = v22;
        *(_QWORD *)&v24[16] = v21;
        fpfs_setRateInternal(a1, a2, &v30, v24, v14);
      }
    }
  }
}

uint64_t fpfsi_deferredRenderPipelineRequiresManualRestart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const void *v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v11;
  _QWORD v12[25];

  v12[24] = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12[0] = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, v12, (CFTypeRef *)&v11))
  {
    v5 = (const void *)v12[0];
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = v11;
    v8 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(DerivedStorage + 568))
    {
      fpfsi_restartAudioRendering((uint64_t)v5, v7, v8, (uint64_t)a4);
      fpfs_UnlockAndPostNotificationsWithCaller(v5);
    }
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_EnqueueNotification(v5, CFSTR("RenderingStoppedForConfigurationChange"), v5, 0);
  }
  if (a4)
    CFRelease(a4);
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineFailedToStart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const void *v5;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v9;
  _QWORD v10[29];

  v10[27] = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10[0] = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, v10, &v9))
  {
    v5 = (const void *)v10[0];
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetInt32IfPresent();
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    fpfs_StopPlayingItemWithOSStatus(DerivedStorage, v9, 4294954436);
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
  }
  if (a4)
    CFRelease(a4);
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineWantsRebuild(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  const void *v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  uint64_t v15;
  CFTypeRef v16;
  _QWORD v17[27];

  v17[25] = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17[0] = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, v17, &v16))
  {
    v6 = (const void *)v17[0];
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = DerivedStorage;
    v9 = v16;
    v10 = *(CFTypeRef *)(DerivedStorage + 80);
    if (v16 == v10 && dword_1EE2A2A88 != 0)
    {
      v15 = DerivedStorage;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v8 = v15;
    }
    if (*(_QWORD *)(v8 + 736) && CFEqual(a3, CFSTR("DeviceHasDisconnected")))
    {
      if (dword_1EE2A2A88)
      {
        v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else if (v9 != v10)
    {
      goto LABEL_13;
    }
    fpfs_stopResetDisturbReprepareAndResume(v6, *(const __CFArray **)(v8 + 80), 0);
LABEL_13:
    fpfs_UnlockAndPostNotificationsWithCaller(v6);
  }
  if (a4)
    CFRelease(a4);
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineProcessingModeChanged(int a1, uint64_t a2, int a3, CFTypeRef cf, CFTypeRef a5)
{
  CFTypeID v7;
  const __CFString *Value;
  const __CFString *v9;
  CFTypeID v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  CFTypeRef v17;
  const void *v18;

  v17 = 0;
  v18 = 0;
  if (a5)
  {
    v7 = CFGetTypeID(a5);
    if (v7 == CFDictionaryGetTypeID())
    {
      Value = (const __CFString *)FigCFDictionaryGetValue();
      if (Value)
      {
        v9 = Value;
        v10 = CFGetTypeID(Value);
        if (v10 == CFStringGetTypeID()
          && !fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v18, &v17))
        {
          DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (DerivedStorage)
          {
            v12 = DerivedStorage;
            if (CFStringCompare(v9, CFSTR("ProcessingModePassthrough"), 0))
              v13 = CFStringCompare(v9, CFSTR("ProcessingModeTranscode"), 0) == kCFCompareEqualTo;
            else
              v13 = 2;
            v14 = *(_QWORD *)(v12 + 2536);
            if (v14)
            {
              v15 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v15)
                v15(v14, CFSTR("playerStats"), CFSTR("BAmode"), v13, 0);
            }
          }
          fpfs_UnlockAndPostNotificationsWithCaller(v18);
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelinePrerollLost(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const void *v5;
  const __CFArray *v7;
  const void *v8;

  v7 = 0;
  v8 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v8, (CFTypeRef *)&v7))
  {
    v5 = v8;
    fpfs_stopResetDisturbReprepareAndResume(v8, v7, 0);
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
  }
  if (a4)
    CFRelease(a4);
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineStartupTimestampsChanged(int a1, uint64_t a2, int a3, CFTypeRef cf, CFTypeRef a5)
{
  CFTypeID v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  int Int64IfPresent;
  int v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  unint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  unint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  CFTypeRef v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v31 = 0;
  v32 = 0;
  if (a5)
  {
    v7 = CFGetTypeID(a5);
    if (v7 == CFDictionaryGetTypeID()
      && !fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v32, &v31))
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v9 = DerivedStorage;
        v36 = 0;
        v37 = 0;
        v34 = 0;
        v35 = 0;
        v33 = 0;
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
        v11 = FigCFDictionaryGetInt64IfPresent();
        v12 = v36 - v37;
        if (v36 - v37 >= 1)
        {
          v13 = *(_QWORD *)(v9 + 2536);
          if (v13)
          {
            v14 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
            if (v14)
              v14(v13, CFSTR("playerStats"), CFSTR("tfRPSetRate2BAEStart"), v12 / 0xF4240, 0);
          }
        }
        v15 = v35 - v37;
        if (v35 - v37 >= 1)
        {
          v16 = *(_QWORD *)(v9 + 2536);
          if (v16)
          {
            v17 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
            if (v17)
              v17(v16, CFSTR("playerStats"), CFSTR("tfRPSetRate2TB"), v15 / 0xF4240, 0);
          }
        }
        v18 = v35 - v36;
        if (v35 - v36 >= 1)
        {
          v19 = *(_QWORD *)(v9 + 2536);
          if (v19)
          {
            v20 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
            if (v20)
              v20(v19, CFSTR("playerStats"), CFSTR("tfBAESetRate2TB"), v18 / 0xF4240, 0);
          }
        }
        if (Int64IfPresent)
        {
          v21 = v36 - v34;
          if (v36 - v34 >= 1)
          {
            v22 = *(_QWORD *)(v9 + 2536);
            if (v22)
            {
              v23 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
              if (v23)
                v23(v22, CFSTR("playerStats"), CFSTR("tfBAOSetEP2BAE"), v21 / 0xF4240, 0);
            }
          }
        }
        if (v11)
        {
          v24 = v33 - v37;
          if (v33 - v37 >= 1)
          {
            v25 = *(_QWORD *)(v9 + 2536);
            if (v25)
            {
              v26 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
              if (v26)
                v26(v25, CFSTR("playerStats"), CFSTR("tfRPSetRate2BAE"), v24 / 0xF4240, 0);
            }
          }
          if (Int64IfPresent)
          {
            v27 = v34 - v33;
            if (v34 - v33 >= 1)
            {
              v28 = *(_QWORD *)(v9 + 2536);
              if (v28)
              {
                v29 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                if (v29)
                  v29(v28, CFSTR("playerStats"), CFSTR("tfBAE2BAOSetEP"), v27 / 0xF4240, 0);
              }
            }
          }
        }
      }
      fpfs_UnlockAndPostNotificationsWithCaller(v32);
    }
  }
  if (cf)
    CFRelease(cf);
  return FigRetainProxyRelease();
}

uint64_t fpfs_FrameStepHitEnd(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t TrackOfType;
  uint64_t result;
  BOOL v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  __int128 v8;
  CMTime v9;
  os_log_type_t type;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  TrackOfType = fpfs_LastTrackOfType((uint64_t)a1, 1986618469, 0);
  v12 = 0uLL;
  v13 = 0;
  result = fpfsi_GetDuration((uint64_t)a1, &v12);
  if (result | ~HIDWORD(v12) & 0x11)
    v5 = TrackOfType == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (dword_1EE2A2A88)
    {
      v11 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v7 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v7 + 470) != 1)
      *(_BYTE *)(v7 + 470) = 1;
    fpfs_StopFeedingTrack(TrackOfType, 0, 1);
    if (*(float *)(DerivedStorage + 840) > 0.0 && (*(_BYTE *)(DerivedStorage + 492) & 1) == 0)
    {
      v8 = *(_OWORD *)(TrackOfType + 216);
      *(_QWORD *)(DerivedStorage + 496) = *(_QWORD *)(TrackOfType + 232);
      *(_OWORD *)(DerivedStorage + 480) = v8;
      fpfsi_EnqueueEndTimeChangedNotification(a1);
    }
    fpfs_GetTime(DerivedStorage, (uint64_t)&v9);
    result = fpfs_TrackIsStalled(TrackOfType, &v9);
    if ((_DWORD)result)
      return fpfs_EndTrackPlayback(TrackOfType);
  }
  return result;
}

void fpfsi_EnqueueEndTimeChangedNotification(const void *a1)
{
  const void *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const void *NotificationPayloadForProperties;

  v2 = *(const void **)CMBaseObjectGetDerivedStorage();
  NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(v2, (uint64_t)a1, v3, v4, v5, v6, v7, v8, CFSTR("EndTime"), 0);
  fpfs_EnqueueNotification(v2, CFSTR("EndTimeChanged"), a1, NotificationPayloadForProperties);
}

void sub_192A18F68()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

uint64_t fpfsi_GetExternalProtectionMethodRequiredForPlayback()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AllocatorForMedia;
  void (*v3)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  CFNumberRef number;
  unsigned int valuePtr;

  valuePtr = 0;
  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
  if (!v0)
    return 0;
  while (*(_DWORD *)(v0 + 32) != 1986618469)
  {
    v0 = *(_QWORD *)(v0 + 8);
    if (!v0)
      return 0;
  }
  v1 = *(_QWORD *)(v0 + 384);
  if (!v1)
    return 0;
  number = 0;
  AllocatorForMedia = FigGetAllocatorForMedia();
  v3 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v3)
  {
    v3(v1, CFSTR("ExternalProtectionMethodsRequiredForPlayback"), AllocatorForMedia, &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      if (number)
        CFRelease(number);
    }
  }
  return valuePtr;
}

uint64_t fpfsi_findLastPlayingTracksForMediaType(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *DerivedStorage;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TracksInListOfMediaType;
  uint64_t v10;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = DerivedStorage[130];
  if (v7)
  {
    v8 = 0x7FFFFFFFLL;
    do
    {
      if (v8 >= *(_QWORD *)(v7 + 64))
        v8 = *(_QWORD *)(v7 + 64);
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  else
  {
    v8 = 0x7FFFFFFFLL;
  }
  TracksInListOfMediaType = fpfsi_findTracksInListOfMediaType(a2, DerivedStorage[134], DerivedStorage[135], v8, a3, 0, 1);
  v10 = fpfsi_findTracksInListOfMediaType(a2, v6[132], v6[133], v8, a3, TracksInListOfMediaType, 1);
  return fpfsi_findTracksInListOfMediaType(a2, v6[130], v6[131], v8, a3, v10, 0);
}

uint64_t fpfsi_findTracksInListOfMediaType(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v15 = 0;
  if (a2)
  {
    v11 = a2;
    do
    {
      if (*(_DWORD *)(v11 + 32) == a1 && (a4 == 0x7FFFFFFF || *(_QWORD *)(v11 + 64) == a4))
      {
        if (a6 >= 1)
        {
          v13 = 0;
          do
          {
            if (fpfsi_areTracksSyncPairs(*(_QWORD *)(a5 + 8 * v13), v11))
            {
              if (a7 || !*((_BYTE *)&v15 + v13))
              {
                *(_QWORD *)(a5 + 8 * v13) = v11;
                *((_BYTE *)&v15 + v13) = 1;
              }
              goto LABEL_15;
            }
            ++v13;
          }
          while (a6 != v13);
          if (a6 == 4)
            return a6;
        }
        *(_QWORD *)(a5 + 8 * a6) = v11;
        *((_BYTE *)&v15 + a6++) = 1;
      }
LABEL_15:
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11);
  }
  return a6;
}

void fpfs_DeferredAssessItemTransition(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *Next;
  const __CFArray *v5;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_log_type_t type;
  int v10;
  CMTime lhs;
  CMTime v12;
  CMTime v13;
  CMTime time2;
  CMTime rhs;
  CMTime v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v13, 0, sizeof(v13));
  memset(&v12, 0, sizeof(v12));
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (!*(_BYTE *)(DerivedStorage + 51))
  {
    if (*(_QWORD *)(DerivedStorage + 80))
    {
      v3 = CMBaseObjectGetDerivedStorage();
      Next = fpfs_getNext(DerivedStorage, *(const void **)(DerivedStorage + 80));
      if (Next)
      {
        v5 = Next;
        fpfs_GetNextTimeToPlay(v3, 0, (uint64_t)&lhs);
        *(_OWORD *)&rhs.value = kTimerVariability;
        rhs.epoch = 0;
        CMTimeAdd(&v12, &lhs, &rhs);
        fpfsi_PredictedEndTime(*(_QWORD *)(DerivedStorage + 80), &v13);
        time2 = v13;
        *(_OWORD *)&v16.value = kGaplessTransitionDeadlineInterval;
        v16.epoch = 0;
        CMTimeSubtract(&rhs, &time2, &v16);
        v16.value = rhs.value;
        flags = rhs.flags;
        v16.timescale = rhs.timescale;
        if ((rhs.flags & 1) != 0)
        {
          epoch = rhs.epoch;
          rhs.value = v16.value;
          rhs.timescale = v16.timescale;
          time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          if (CMTimeCompare(&rhs, &time2) >= 1)
          {
            rhs = v12;
            time2.value = v16.value;
            time2.timescale = v16.timescale;
            time2.flags = flags;
            time2.epoch = epoch;
            if (CMTimeCompare(&rhs, &time2) <= 0)
            {
              fpfs_TransitionFromItemToItem(*(_QWORD *)(DerivedStorage + 80), v5);
            }
            else if (dword_1EE2A2A88)
            {
              v10 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

void sub_192A19554()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

uint64_t fpfs_setPlaythroughPredictionAndNotify(const void *a1, int a2)
{
  uint64_t result;
  int v5;

  result = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(result + 524);
  if (v5 != a2)
  {
    *(_DWORD *)(result + 524) = a2;
    if (a2 == 1 || v5 == 1)
      fpfs_EnqueuePlaythroughPredictionNotification(a1);
  }
  return result;
}

void fpfsi_setPlaybackMonitorOkayToAttemptSwitchUp(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  unsigned int (*v6)(uint64_t, const __CFString *, uint64_t);
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v12)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef cf;

  v3 = *(_DWORD *)(a1 + 524);
  cf = 0;
  v4 = *(_QWORD *)(a1 + 96);
  if (!v4
    || (v6 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56)) != 0
    && (v3 == 1 ? (v7 = a2 == 2) : (v7 = 0),
        !v7 ? (v8 = *MEMORY[0x1E0C9AE40]) : (v8 = *MEMORY[0x1E0C9AE50]),
        !v6(v4, CFSTR("AfmfpbProperty_OkayToAttemptSwitchUp"), v8)))
  {
    v9 = *(_QWORD *)(a1 + 928);
    if (v9)
    {
      AllocatorForMedia = FigGetAllocatorForMedia();
      FigBaseObject = FigBytePumpGetFigBaseObject(v9);
      v12 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v12)
      {
        v12(FigBaseObject, CFSTR("FBP_CMCDHeaderVendor"), AllocatorForMedia, &cf);
        if (cf)
        {
          FigCMCDHeaderVendorSetIsLikelyToKeepUp((uint64_t)cf, v3 == 1);
          if (cf)
            CFRelease(cf);
        }
      }
    }
  }
}

void fpfsi_RTCReportingUpdateItemStats(uint64_t a1)
{
  uint64_t DerivedStorage;
  double Seconds;
  CMTime v4;
  CMTime v5;
  _BYTE v6[72];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(&v5, 0, sizeof(v5));
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_GetItemBufferedDuration(a1, &v5, v6, 0);
  v4 = v5;
  Seconds = CMTimeGetSeconds(&v4);
  fpfsi_RTCReportingUpdateBufferDuration(DerivedStorage, (uint64_t)v6, Seconds);
}

void fpfsi_RTCReportingUpdateBufferDuration(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  double Seconds;
  double v8;
  void (*v9)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v10;
  double v11;
  double v12;
  void (*v13)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v14;
  double v15;
  double v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  CMTime v20;

  if (a2)
  {
    if ((*(_BYTE *)(a1 + 1088) & 1) != 0 && (*(_BYTE *)(a2 + 12) & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 2536);
      v20 = *(CMTime *)a2;
      Seconds = CMTimeGetSeconds(&v20);
      if (v6)
      {
        v8 = Seconds;
        v9 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v9)
          v9(v6, CFSTR("playerStats"), CFSTR("VidDur"), (uint64_t)(v8 * 1000.0), 0);
      }
    }
    if ((*(_BYTE *)(a1 + 1088) & 2) != 0 && (*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v10 = *(_QWORD *)(a1 + 2536);
      v20 = *(CMTime *)(a2 + 24);
      v11 = CMTimeGetSeconds(&v20);
      if (v10)
      {
        v12 = v11;
        v13 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v13)
          v13(v10, CFSTR("playerStats"), CFSTR("AuDur"), (uint64_t)(v12 * 1000.0), 0);
      }
    }
    if ((*(_BYTE *)(a1 + 1088) & 4) != 0 && (*(_BYTE *)(a2 + 60) & 1) != 0)
    {
      v14 = *(_QWORD *)(a1 + 2536);
      v20 = *(CMTime *)(a2 + 48);
      v15 = CMTimeGetSeconds(&v20);
      if (v14)
      {
        v16 = v15;
        v17 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v17)
          v17(v14, CFSTR("playerStats"), CFSTR("SttDur"), (uint64_t)(v16 * 1000.0), 0);
      }
    }
    v18 = *(_QWORD *)(a1 + 2536);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v19)
        v19(v18, CFSTR("playerStats"), CFSTR("PlayerDur"), (uint64_t)(a3 * 1000.0), 0);
    }
  }
}

void fpfsi_UpdateTaggedRangeMetadataFromPumpAndNotifyIfNeeded(const void *a1, const void *a2, int a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const __CFDate *v10;
  CFArrayRef *v11;
  const void *v12;
  uint64_t v13;
  uint64_t AllocatorForMedia;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, uint64_t, uint64_t);
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDate *Value;
  Float64 TimeIntervalSinceDate;
  CMTime v23;
  CMTime rhs;
  CMTime v25;
  CMTime v26;
  CFDateRef v27;

  v27 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 928))
  {
    v9 = DerivedStorage;
    fpfsi_CopyCurrentDate((uint64_t)a2, &v27);
    v10 = v27;
    if (v27)
    {
      v11 = (CFArrayRef *)(v9 + 2592);
      v12 = *(const void **)(v9 + 2592);
      if (v12)
      {
        CFRelease(v12);
        *v11 = 0;
      }
      v13 = *(_QWORD *)(v9 + 928);
      AllocatorForMedia = FigGetAllocatorForMedia();
      FigBytePumpGetFigBaseObject(v13);
      v16 = v15;
      v17 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
      if (v17)
        v17(v16, CFSTR("FBP_TaggedRangeMetadataArray"), AllocatorForMedia, v9 + 2592);
      if (*v11)
      {
        Count = CFArrayGetCount(*v11);
        memset(&v26, 0, sizeof(v26));
        fpfs_GetTime(v9, (uint64_t)&v26);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*v11, i);
            if (!CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_StartTime")))
            {
              Value = (const __CFDate *)CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_StartDate"));
              TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(Value, v10);
              CMTimeMakeWithSeconds(&rhs, TimeIntervalSinceDate, 1000);
              v23 = v26;
              CMTimeAdd(&v25, &v23, &rhs);
              v23 = v25;
              FigCFDictionarySetCMTime();
            }
          }
        }
      }
      else if (a3 != 1)
      {
LABEL_17:
        CFRelease(v10);
        return;
      }
      if (a4)
        fpfsi_EnqueueTaggedRangeMetadataChangedNotificationIfNeeded(a1, a2);
      goto LABEL_17;
    }
  }
}

uint64_t fpfsi_CopyCurrentDate(uint64_t a1, CFDateRef *a2)
{
  uint64_t DerivedStorage;
  CMTime v6;
  CMTime v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v7, 0, sizeof(v7));
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v7);
  v6 = v7;
  return fpfsi_CopyDateForTime(a1, &v6, a2);
}

uint64_t fpfsi_EnqueueTaggedRangeMetadataChangedNotificationIfNeeded(const void *a1, const void *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const void *NotificationPayloadForProperties;

  if (*(uint64_t *)(CMBaseObjectGetDerivedStorage() + 2600) < 1)
    return 0;
  NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(a1, (uint64_t)a2, v4, v5, v6, v7, v8, v9, CFSTR("TaggedRangeMetadataArray"), 0);
  if (NotificationPayloadForProperties)
    fpfs_EnqueueNotification(a1, CFSTR("TaggedRangeMetadataChanged"), a2, NotificationPayloadForProperties);
  return FigSignalErrorAt();
}

uint64_t fpfsi_CopyDateForTime(uint64_t a1, CMTime *a2, CFDateRef *a3)
{
  uint64_t DateEntryForTime;
  uint64_t v7;
  double DateEntryTimelineOrigin;
  double v9;
  double v10;
  CFAbsoluteTime v11;
  const __CFAllocator *AllocatorForMedia;
  CFDateRef v13;
  uint64_t result;
  CMTime v15;
  CMTime v16;

  memset(&v16, 0, sizeof(v16));
  CMBaseObjectGetDerivedStorage();
  v15 = *a2;
  DateEntryForTime = fpfsi_getDateEntryForTime(a1, &v15, 1);
  if (!DateEntryForTime)
    return 4294954513;
  v7 = DateEntryForTime;
  DateEntryTimelineOrigin = fpfsi_getDateEntryTimelineOrigin(DateEntryForTime, &v16);
  v9 = MEMORY[0x194029D14](*(_QWORD *)(v7 + 16), DateEntryTimelineOrigin);
  v15 = *a2;
  v10 = v9 + CMTimeGetSeconds(&v15);
  v15 = v16;
  v11 = v10 - CMTimeGetSeconds(&v15);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v13 = CFDateCreate(AllocatorForMedia, v11);
  result = 0;
  *a3 = v13;
  return result;
}

uint64_t fpfsi_getDateEntryForTime(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CMTime v12;
  CMTime time1;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = **(_QWORD **)(*(_QWORD *)(DerivedStorage + 1616) + 8);
  if (v6)
  {
    v7 = DerivedStorage;
    while (1)
    {
      v8 = **(_QWORD **)(*(_QWORD *)(v6 + 8) + 8);
      if ((*(_BYTE *)(v6 + 84) & 1) != 0)
      {
        memset(&v14, 0, sizeof(v14));
        fpfsi_getDateEntryTimelineOrigin(v6, &v14);
        if (!v8)
          break;
        time1 = *a2;
        v12 = v14;
        if ((CMTimeCompare(&time1, &v12) & 0x80000000) == 0)
          break;
      }
      v6 = v8;
      if (!v8)
      {
        if (!a3)
          return 0;
        v9 = **(_QWORD **)(*(_QWORD *)(v7 + 1616) + 8);
        if (!v9)
          return 0;
        v10 = **(_QWORD **)(*(_QWORD *)(v9 + 8) + 8);
        memset(&v14, 0, sizeof(v14));
        fpfsi_getDateEntryTimelineOrigin(v9, &v14);
        if (!v10)
          return v9;
        do
        {
          v6 = v9;
          v9 = v10;
          time1 = *a2;
          v12 = v14;
          if ((CMTimeCompare(&time1, &v12) & 0x80000000) == 0)
            break;
          v10 = **(_QWORD **)(*(_QWORD *)(v10 + 8) + 8);
          memset(&v14, 0, sizeof(v14));
          fpfsi_getDateEntryTimelineOrigin(v9, &v14);
          v6 = v9;
        }
        while (v10);
        return v6;
      }
    }
  }
  return v6;
}

double fpfsi_getDateEntryTimelineOrigin@<D0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  double result;
  CMTime v4;
  CMTime lhs;
  CMTime v6;

  a2->value = 0;
  *(_QWORD *)&a2->timescale = 0;
  a2->epoch = 0;
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    lhs = *(CMTime *)(a1 + 72);
    v4 = *(CMTime *)(a1 + 96);
    CMTimeAdd(&v6, &lhs, &v4);
  }
  else
  {
    lhs = *(CMTime *)(a1 + 24);
    v4 = *(CMTime *)(a1 + 48);
    CMTimeSubtract(&v6, &lhs, &v4);
  }
  result = *(double *)&v6.value;
  *a2 = v6;
  return result;
}

void fpfsi_deferredDeltaUpdateNote(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  Float64 Rate;
  const void *v5;
  CMTime v6;
  __int128 v7;
  uint64_t v8;
  CMTime v9;
  __int128 v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;

  v12 = 0;
  v13 = 0;
  v10 = 0uLL;
  v11 = 0;
  memset(&v9, 0, sizeof(v9));
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer((uint64_t)a2, &v12, &v13))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 576));
    if (FigCFDictionaryGetCMTimeIfPresent() && FigCFDictionaryGetCMTimeIfPresent())
    {
      v5 = *(const void **)(DerivedStorage + 3160);
      if (v5)
      {
        v7 = v10;
        v8 = v11;
        v6 = v9;
        FigRateMinderUpdateRateWithTimestamps(v5, (uint64_t)&v7, &v6, Rate);
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v12);
  }
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (a2)
    CFRelease(a2);
}

void fpfs_CancelSeekIfNeeded(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  CFArrayRef v7;
  double Seconds;
  CMTimeEpoch v9;
  double v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFArrayRef theArray;
  double v13;
  double v14;
  CMTime time;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0.0;
  v14 = 0.0;
  theArray = 0;
  if ((*(_BYTE *)(DerivedStorage + 332) & 1) != 0)
  {
    v5 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 928))
    {
      v6 = fpfsi_copySeekableTime((uint64_t)a2, &theArray);
      v7 = theArray;
      if (v6 || !theArray)
      {
        if (!theArray)
          return;
      }
      else
      {
        CFArrayGetValueAtIndex(theArray, 0);
        if (FigCFDictionaryGetDoubleIfPresent() && FigCFDictionaryGetDoubleIfPresent())
        {
          if ((*(_BYTE *)(v5 + 1500) & 1) != 0)
          {
            time = *(CMTime *)(v5 + 1488);
            Seconds = CMTimeGetSeconds(&time);
            *(_OWORD *)&time.value = *(_OWORD *)(v5 + 1488);
            v9 = *(_QWORD *)(v5 + 1504);
          }
          else
          {
            if ((*(_BYTE *)(v5 + 356) & 1) != 0)
              time = *(CMTime *)(v5 + 344);
            else
              time = *(CMTime *)(v5 + 320);
            Seconds = CMTimeGetSeconds(&time);
            if ((*(_BYTE *)(v5 + 380) & 1) != 0)
            {
              *(_OWORD *)&time.value = *(_OWORD *)(v5 + 368);
              v9 = *(_QWORD *)(v5 + 384);
            }
            else
            {
              *(_OWORD *)&time.value = *(_OWORD *)(v5 + 320);
              v9 = *(_QWORD *)(v5 + 336);
            }
          }
          time.epoch = v9;
          v10 = CMTimeGetSeconds(&time);
          if (v10 < v14 || Seconds > v13)
          {
            if (dword_1EE2A2A88)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            fpfs_SeekDidFail(a1, a2, *(_DWORD *)(v5 + 2196), 0);
          }
          else
          {
            *(_DWORD *)(v5 + 2192) = *(_DWORD *)(v5 + 2196);
          }
        }
      }
      CFRelease(v7);
    }
  }
}

uint64_t fpfs_UpdateSubStreamRoleInPumpFunc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;

  if (a2)
  {
    if (a3 < 3)
    {
      v6 = *(_QWORD *)(a1 + 16 * a3 + 992);
    }
    else
    {
      FigSignalErrorAt();
      v6 = -1;
    }
    if (v6 == a2)
      return 0;
    else
      return a4;
  }
  return a4;
}

void fpfs_prepareDataForInject(const void *a1)
{
  CFTypeRef v2;
  CFTypeRef v3;
  CMAttachmentMode attachmentModeOut;

  attachmentModeOut = 0;
  v2 = CMGetAttachment(a1, CFSTR("FBPAKey_Decryptor"), &attachmentModeOut);
  if (v2)
  {
    CMSetAttachment(a1, CFSTR("FMFD_BufferDecryptor"), v2, attachmentModeOut);
    CMRemoveAttachment(a1, CFSTR("FBPAKey_Decryptor"));
  }
  v3 = CMGetAttachment(a1, CFSTR("FBPAKey_AudioDecryptor"), &attachmentModeOut);
  if (v3)
  {
    CMSetAttachment(a1, CFSTR("FMFD_BufferAudioDecryptor"), v3, attachmentModeOut);
    CMRemoveAttachment(a1, CFSTR("FBPAKey_AudioDecryptor"));
  }
}

void fpfsi_EnqueuePlayableRangeChangedNotification(const void *a1)
{
  const void *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const void *NotificationPayloadForProperties;

  v2 = *(const void **)CMBaseObjectGetDerivedStorage();
  NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(v2, (uint64_t)a1, v3, v4, v5, v6, v7, v8, CFSTR("PlayableTimeIntervals"), (uint64_t)CFSTR("BufferState"));
  fpfs_EnqueueNotification(v2, CFSTR("PlayableRangeChanged"), a1, NotificationPayloadForProperties);
}

void sub_192A1A538()
{
  const void *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 2336) = FigGetUpTimeNanoseconds();
  if (v0)
    CFRelease(v0);
}

uint64_t fpfs_EndCurrentDiscontinuity(const __CFArray *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD);
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  if (a4)
  {
    fpfs_WeakStreamEnd(DerivedStorage, a2, a3);
    goto LABEL_8;
  }
  if (a2 <= 2)
  {
    v10 = *(_QWORD *)(DerivedStorage + 16 * a2 + 8 * a3 + 992);
    if (!v10)
      goto LABEL_8;
  }
  else
  {
    FigSignalErrorAt();
    FigSignalErrorAt();
    v10 = -1;
  }
  v11 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v11)
    v11(v10, 0);
LABEL_8:
  fpfs_PerformInitialResolveOfAllWaitingTracks(a1);
  v12 = *(_QWORD *)(v9 + 1040);
  while (v12)
  {
    if (!*(_QWORD *)(v9 + 1040))
      return fpfs_PerformInitialResolveOfAllWaitingTracks(a1);
    v13 = v12;
    v14 = *(unsigned __int8 *)(v12 + 180);
    if (!(_DWORD)a3 && v14 == (_DWORD)a2)
      *(_BYTE *)(v12 + 189) = 1;
    v12 = *(_QWORD *)(v12 + 8);
    if (v14 == (_DWORD)a2 && *(_BYTE *)(v13 + 182) == 1)
    {
      v15 = *(_DWORD *)(v13 + 152);
      if ((_DWORD)a3 || v15 != 1)
      {
        if ((_DWORD)a3 == 1 && v15 == 1)
        {
          if (!fpfs_CompleteTrialSync((uint64_t)a1, v13))
            continue;
        }
        else if (v15 > 7 || ((1 << v15) & 0x95) == 0 && (v15 != 5 || *(_QWORD *)(v13 + 264)) || *(_QWORD *)(v13 + 112))
        {
          continue;
        }
        goto LABEL_35;
      }
      if (*(_QWORD *)(v13 + 264))
      {
        memset(&v20, 0, sizeof(v20));
        lhs = *(CMTime *)(v13 + 216);
        rhs = *(CMTime *)(v13 + 272);
        CMTimeSubtract(&v20, &lhs, &rhs);
        CMTimeMake(&time2, 50, 1000);
        lhs = v20;
        if (CMTimeCompare(&lhs, &time2) < 0 || CMTimebaseGetRate(*(CMTimebaseRef *)(v9 + 576)) == 0.0)
          fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v13 + 264));
      }
      if (*(_DWORD *)(v13 + 32) == 1936684398)
      {
        v20 = *(CMTime *)(v13 + 192);
        if (fpfs_FinishAudioSyncAndStart((_QWORD *)v13, &v20) == -16042
          || !fpfsi_isTrackInLists(v9, v13, 1u)
          || *(_DWORD *)(v13 + 152) == 6)
        {
          continue;
        }
LABEL_35:
        fpfs_DeleteTrack(a1);
        continue;
      }
      if (!*(_QWORD *)(v13 + 264))
        goto LABEL_35;
    }
  }
  return fpfs_PerformInitialResolveOfAllWaitingTracks(a1);
}

uint64_t fpfsi_TrimCachedSamplesFromItem(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  int64_t v10;
  int32_t v11;
  CMTimeFlags flags;
  uint64_t result;
  float v14;
  int v15;
  CMTimeFlags v16;
  CMTimeEpoch v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  Float64 Seconds;
  Float64 v25;
  Float64 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, __CFString *, __CFString *, unint64_t);
  uint64_t v35;
  CMTimeFlags v36;
  CMTimeEpoch v37;
  uint64_t v38;
  uint64_t i;
  uint64_t j;
  CMTimeFlags v41;
  CMTimeValue v42;
  opaqueCMBufferQueue *v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  unint64_t v51;
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  Float64 v58;
  Float64 v59;
  Float64 v60;
  BOOL v61;
  CMTimeFlags v62;
  const char *v63;
  const char *v64;
  const char *v65;
  int v66;
  uint64_t v67;
  _BOOL4 v68;
  uint64_t *v69;
  const char *v70;
  CMTime *v71;
  CMTime *v72;
  CMTimeEpoch epoch;
  CMTime v74;
  CMTime v75;
  CMTime v76;
  CMTime v77;
  CMTime lhs;
  CMTime rhs;
  CMTimeValue type;
  CMTimeScale v81;
  CMTime time2;
  const char *v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  Float64 v89;
  __int16 v90;
  Float64 v91;
  __int16 v92;
  Float64 v93;
  __int16 v94;
  unint64_t v95;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v99;
  CMTimeScale v100;
  CMTimeValue v101;
  CMTimeScale v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  memset(&v77, 0, sizeof(v77));
  fpfs_GetNextTimeToPlay(DerivedStorage, 1, (uint64_t)&v77);
  v4 = MEMORY[0x1E0CA2E68];
  v101 = *MEMORY[0x1E0CA2E68];
  v102 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
  v5 = MEMORY[0x1E0CA2E28];
  v99 = *MEMORY[0x1E0CA2E28];
  v100 = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 8);
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  memset(&time1, 0, sizeof(time1));
  fpfs_GetNextTimeToPlay(v6, 1, (uint64_t)&time1);
  v8 = *(float *)(v7 + 108);
  v9 = *(_DWORD *)(v6 + 2272);
  if (v8 <= 2.0 && v8 >= 0.0 || *(_QWORD *)(v6 + 2960))
  {
    if (v9 < 1)
    {
      v10 = 50;
      v11 = 1000;
    }
    else
    {
      if (v8 < 0.0)
        v9 = -v9;
      v10 = v9;
      v11 = 1;
    }
    CMTimeMake(&rhs, v10, v11);
  }
  else
  {
    CMTimeMakeWithSeconds(&rhs, (float)(v8 * 10.0), 1000);
  }
  lhs = time1;
  CMTimeSubtract(&time2, &lhs, &rhs);
  value = time2.value;
  flags = time2.flags;
  timescale = time2.timescale;
  epoch = time2.epoch;
  memset(&rhs, 0, sizeof(rhs));
  time1 = *(CMTime *)(DerivedStorage + 1344);
  time2 = *(CMTime *)(DerivedStorage + 1176);
  result = (uint64_t)CMTimeSubtract(&rhs, &time1, &time2);
  v14 = *(float *)(v3 + 108);
  v68 = v14 < 0.0;
  v15 = (v14 > 2.0 || v14 < 0.0) && *(_QWORD *)(DerivedStorage + 2960) == 0;
  if ((v77.flags & 0x1D) == 1)
  {
    v67 = a1;
    v16 = *(_DWORD *)(v4 + 12);
    v17 = *(_QWORD *)(v4 + 16);
    v69 = (uint64_t *)DerivedStorage;
    if ((rhs.flags & 0x1D) == 1)
    {
      *(_OWORD *)&time1.value = *(_OWORD *)v4;
      time1.epoch = v17;
      time2 = rhs;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        CMTimeMake(&v75, 50, 1000);
        time1 = v77;
        CMTimeSubtract(&v76, &time1, &v75);
        time2 = rhs;
        CMTimeMinimum(&time1, &time2, &v76);
        v101 = time1.value;
        v16 = time1.flags;
        v102 = time1.timescale;
        v17 = time1.epoch;
        fpfsi_TrimFromAllTracks(DerivedStorage, &time1, v68, v15);
        if (dword_1EE2A2A88 >= 5)
        {
          v66 = v15;
          LODWORD(lhs.value) = 0;
          LOBYTE(type) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v19 = lhs.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)type))
            v20 = v19;
          else
            v20 = v19 & 0xFFFFFFFE;
          if (v20)
          {
            v21 = *(_QWORD *)DerivedStorage;
            if (*(_QWORD *)DerivedStorage)
              v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v22 = "";
            v70 = v22;
            if (v67)
              v23 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v23 = "";
            v65 = v23;
            time1.value = v101;
            time1.timescale = v102;
            time1.flags = v16;
            time1.epoch = v17;
            Seconds = CMTimeGetSeconds(&time1);
            time1.value = value;
            time1.timescale = timescale;
            time1.flags = flags;
            time1.epoch = epoch;
            v25 = CMTimeGetSeconds(&time1);
            time1 = v77;
            v26 = CMTimeGetSeconds(&time1);
            LODWORD(time2.value) = 136317186;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimCachedSamplesFromItem";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v21;
            HIWORD(time2.epoch) = 2082;
            v83 = v70;
            v84 = 2048;
            v85 = v67;
            v86 = 2082;
            v87 = v65;
            v88 = 2048;
            v89 = Seconds;
            v90 = 2048;
            v91 = v25;
            v92 = 2048;
            v93 = v26;
            v94 = 2048;
            v95 = 0;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v15 = v66;
        }
      }
    }
    if (v14 < 0.0 || (v15 & 1) != 0)
      goto LABEL_46;
    v27 = *(_DWORD *)(v3 + 752);
    v28 = *(_DWORD *)(DerivedStorage + 2236);
    if (v27 >= v28)
      v29 = *(_DWORD *)(DerivedStorage + 2236);
    else
      v29 = *(_DWORD *)(v3 + 752);
    if (v28)
      v30 = *(_DWORD *)(DerivedStorage + 2236);
    else
      v30 = 50;
    if (!v28)
      v29 = *(_DWORD *)(v3 + 752);
    if (!v27)
      v29 = v30;
    if (v28 | v27 && v29 <= 50)
    {
LABEL_46:
      time1.value = value;
      time1.timescale = timescale;
      time1.flags = flags;
      time1.epoch = epoch;
      fpfsi_TrimFromAllTracks(DerivedStorage, &time1, v68, v15);
      goto LABEL_47;
    }
    v72 = (CMTime *)(DerivedStorage + 1056);
    v35 = fpfsi_TotalBytesInBuffer((uint64_t *)(DerivedStorage + 1056));
    v71 = (CMTime *)(DerivedStorage + 1040);
    if ((unint64_t)(fpfsi_TotalBytesInBuffer((uint64_t *)(DerivedStorage + 1040)) + v35) <= *(_QWORD *)(DerivedStorage + 536))
    {
LABEL_47:
      v31 = fpfsi_TotalBytesInBuffer((uint64_t *)(DerivedStorage + 1056));
      result = fpfsi_TotalBytesInBuffer((uint64_t *)(DerivedStorage + 1040));
      v32 = *(_QWORD *)(DerivedStorage + 2536);
      if (v32)
      {
        v33 = result;
        result = CMBaseObjectGetVTable();
        v34 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(result + 16)
                                                                                              + 40);
        if (v34)
          return v34(v32, CFSTR("playerStats"), CFSTR("BufMem"), (unint64_t)(v33 + v31) >> 10);
      }
      return result;
    }
    v36 = *(_DWORD *)(v5 + 12);
    v37 = *(_QWORD *)(v5 + 16);
    v62 = flags;
    while (1)
    {
      time1.value = v101;
      time1.timescale = v102;
      time1.flags = v16;
      time1.epoch = v17;
      time2.value = value;
      time2.timescale = timescale;
      time2.flags = flags;
      time2.epoch = epoch;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        goto LABEL_47;
      v38 = CMBaseObjectGetDerivedStorage();
      for (i = *(_QWORD *)(v38 + 1056); i; i = *(_QWORD *)(i + 8))
      {
        if (*(_DWORD *)(i + 32) == 1986618469)
          fpfsi_SetNextVideoGOPRangeToTrimForTrack(i);
      }
      for (j = *(_QWORD *)(v38 + 1040); j; j = *(_QWORD *)(j + 8))
      {
        if (*(_DWORD *)(j + 32) == 1986618469)
          fpfsi_SetNextVideoGOPRangeToTrimForTrack(j);
      }
      fpfsi_FindEarliestVideoGOPEndInTrackList(v72, (uint64_t)&time1);
      type = time1.value;
      v41 = time1.flags;
      v81 = time1.timescale;
      if ((time1.flags & 1) == 0)
      {
        fpfsi_FindEarliestVideoGOPEndInTrackList(v71, (uint64_t)&time1);
        type = time1.value;
        v41 = time1.flags;
        v81 = time1.timescale;
      }
      if ((v41 & 1) != 0)
        break;
      v42 = v72->value;
      if (v72->value)
      {
        while (*(_DWORD *)(v42 + 32) != 1936684398 || !*(_QWORD *)(v42 + 96))
        {
          v42 = *(_QWORD *)(v42 + 8);
          if (!v42)
            goto LABEL_69;
        }
      }
      else
      {
LABEL_69:
        v42 = v71->value;
        if (!v71->value)
          goto LABEL_81;
        while (*(_DWORD *)(v42 + 32) != 1936684398 || !*(_QWORD *)(v42 + 96))
        {
          v42 = *(_QWORD *)(v42 + 8);
          if (!v42)
            goto LABEL_81;
        }
      }
      v43 = *(opaqueCMBufferQueue **)(v42 + 80);
      if (v43)
        CMBufferQueueGetMinPresentationTimeStamp(&time1, v43);
      else
        time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v101 = time1.value;
      v102 = time1.timescale;
      if ((time1.flags & 0x1D) != 1)
      {
LABEL_81:
        if (dword_1EE2A2A88)
        {
          LODWORD(lhs.value) = 0;
          v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v45 = lhs.value;
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            v46 = v45;
          else
            v46 = v45 & 0xFFFFFFFE;
          if (v46)
          {
            v47 = *(_QWORD *)DerivedStorage;
            if (*(_QWORD *)DerivedStorage)
            {
              v48 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              if (v67)
                goto LABEL_88;
LABEL_91:
              v49 = "";
            }
            else
            {
              v48 = "";
              if (!v67)
                goto LABEL_91;
LABEL_88:
              v49 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            }
            LODWORD(time2.value) = 136316162;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimCachedSamplesFromItem";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v47;
            HIWORD(time2.epoch) = 2082;
            v83 = v48;
            v84 = 2048;
            v85 = v67;
            v86 = 2082;
            v87 = v49;
            _os_log_send_and_compose_impl();
            DerivedStorage = (uint64_t)v69;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v101 = value;
        v102 = timescale;
        v17 = epoch;
        v16 = flags;
        goto LABEL_95;
      }
      time2.value = v101;
      time2.timescale = v102;
      time2.flags = time1.flags;
      time2.epoch = time1.epoch;
      lhs.value = v99;
      lhs.timescale = v100;
      lhs.flags = v36;
      lhs.epoch = v37;
      CMTimeMaximum(&time1, &time2, &lhs);
      v101 = time1.value;
      v16 = time1.flags;
      v102 = time1.timescale;
      v17 = time1.epoch;
      if ((v36 & 0x1D) == 1)
      {
        CMTimeMake(&v74, 10, 1);
        time2.value = v101;
        time2.timescale = v102;
        time2.flags = v16;
        time2.epoch = v17;
        CMTimeAdd(&time1, &time2, &v74);
        v102 = time1.timescale;
        v101 = time1.value;
        time2 = time1;
        goto LABEL_75;
      }
LABEL_95:
      v99 = v101;
      v100 = v102;
      time1.value = v101;
      time1.timescale = v102;
      time1.flags = v16;
      time1.epoch = v17;
      fpfsi_TrimFromAllTracks(DerivedStorage, &time1, v68, v15);
      v50 = fpfsi_TotalBytesInBuffer(&v72->value);
      v51 = fpfsi_TotalBytesInBuffer(&v71->value) + v50;
      if (dword_1EE2A2A88 >= 5)
      {
        LODWORD(lhs.value) = 0;
        v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v53 = lhs.value;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          v54 = v53;
        else
          v54 = v53 & 0xFFFFFFFE;
        if (v54)
        {
          v55 = *v69;
          if (*v69)
            v56 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v56 = "";
          v64 = v56;
          if (v67)
            v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v57 = "";
          v63 = v57;
          time1.value = v101;
          time1.timescale = v102;
          time1.flags = v16;
          time1.epoch = v17;
          v58 = CMTimeGetSeconds(&time1);
          time1.value = value;
          flags = v62;
          time1.timescale = timescale;
          time1.flags = v62;
          time1.epoch = epoch;
          v59 = CMTimeGetSeconds(&time1);
          time1 = v77;
          v60 = CMTimeGetSeconds(&time1);
          LODWORD(time2.value) = 136317186;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimCachedSamplesFromItem";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v55;
          HIWORD(time2.epoch) = 2082;
          v83 = v64;
          v84 = 2048;
          v85 = v67;
          v86 = 2082;
          v87 = v63;
          v88 = 2048;
          v89 = v58;
          v90 = 2048;
          v91 = v59;
          v92 = 2048;
          v93 = v60;
          v94 = 2048;
          v95 = v51;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v36 = v16;
      v37 = v17;
      v61 = v51 > v69[67];
      DerivedStorage = (uint64_t)v69;
      if (!v61)
        goto LABEL_47;
    }
    time2.value = type;
    time2.timescale = v81;
    time2.flags = v41;
    time2.epoch = time1.epoch;
LABEL_75:
    lhs.value = value;
    lhs.timescale = timescale;
    lhs.flags = flags;
    lhs.epoch = epoch;
    CMTimeMinimum(&time1, &time2, &lhs);
    v101 = time1.value;
    v16 = time1.flags;
    v102 = time1.timescale;
    v17 = time1.epoch;
    goto LABEL_95;
  }
  return result;
}

BOOL fpsi_TryDateSeekWithSeekID(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  uint64_t v15;
  CMTime *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, CMTime *, _QWORD *);
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  double v22;
  CMTimeFlags flags;
  int v24;
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v28;
  _BOOL4 v29;
  unsigned int v30;
  CMTimeValue v31;
  const char *v32;
  const char *v33;
  Float64 Seconds;
  const char *v36;
  CMTimeEpoch v37;
  CMTime rhs;
  os_log_type_t type;
  _QWORD v40[3];
  CMTime v41;
  CMTime v42;
  CMTime lhs;
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  Float64 v50;
  CMTime time;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a4 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(v15 + 16);
  if (!*(_QWORD *)(DerivedStorage + 1608))
    return 0;
  v16 = (CMTime *)DerivedStorage;
  v17 = *(_QWORD *)(DerivedStorage + 928);
  if (v17)
  {
    memset(&v41, 0, sizeof(v41));
    memset(v40, 0, sizeof(v40));
    v18 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 40);
    if (v18)
    {
      v19 = v18(v17, a2, &v41, v40);
      if (!v19)
      {
LABEL_13:
        lhs = v41;
        fpfs_GetPreciseTimeForDate(v16, a2, &lhs, (uint64_t)&time);
        value = time.value;
        flags = time.flags;
        timescale = time.timescale;
        if ((time.flags & 1) != 0)
        {
          epoch = time.epoch;
          if (dword_1EE2A2A88)
          {
            v37 = time.epoch;
            LODWORD(v42.value) = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v28 = v42.value;
            v29 = os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            v30 = v28 & 0xFFFFFFFE;
            if (v29)
              v30 = v28;
            if (v30)
            {
              v31 = v16->value;
              if (v31)
                v32 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v32 = "";
              v36 = v32;
              if (a1)
                v33 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v33 = "";
              time.value = value;
              time.timescale = timescale;
              time.flags = flags;
              time.epoch = v37;
              Seconds = CMTimeGetSeconds(&time);
              LODWORD(lhs.value) = 136316418;
              *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpsi_TryDateSeekWithSeekID";
              LOWORD(lhs.flags) = 2048;
              *(_QWORD *)((char *)&lhs.flags + 2) = v31;
              HIWORD(lhs.epoch) = 2082;
              v44 = v36;
              v45 = 2048;
              v46 = a1;
              v47 = 2082;
              v48 = v33;
              v49 = 2048;
              v50 = Seconds;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            epoch = v37;
          }
          time.value = value;
          time.timescale = timescale;
          time.flags = flags;
          time.epoch = epoch;
          lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
          v42 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
          v24 = 1;
          v19 = fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &time, 5, &lhs, &v42, a5, 0, a6, 16842753, a7, 1);
        }
        else
        {
          CMTimeMake(&rhs, 1, 1000);
          lhs = v41;
          CMTimeAdd(&time, &lhs, &rhs);
          v41 = time;
          lhs = time;
          v42 = v16[49];
          CMTimeSubtract(&time, &lhs, &v42);
          v24 = 0;
          v19 = 0;
          v41 = time;
        }
        *(CMTime *)a4 = v41;
        goto LABEL_34;
      }
      if (v19 == -12783)
      {
        v20 = (_QWORD *)v16[67].value;
        if (v20)
        {
          v21 = (_QWORD *)v16[67].value;
          do
          {
            v22 = MEMORY[0x194029D14](v21[2]);
            if (v22 <= MEMORY[0x194029D14](a2))
              v20 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
          if (v20)
          {
            v41 = *(CMTime *)((_BYTE *)v20 + 1);
            goto LABEL_13;
          }
        }
        v24 = 0;
        v19 = -12783;
      }
      else
      {
        v24 = 0;
      }
    }
    else
    {
      v24 = 0;
      v19 = -12782;
    }
  }
  else
  {
    v24 = 0;
    v19 = 0;
  }
LABEL_34:
  *a3 = v19;
  return v24 && v19 == 0;
}

uint64_t fpfsi_copySeekableTime(uint64_t a1, CFArrayRef *a2)
{
  uint64_t DerivedStorage;
  CMTime *v5;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CMTimeFlags flags;
  uint64_t v10;
  CMTimeValue v11;
  CMTimeEpoch epoch;
  CMTimeFlags v13;
  CMTimeScale v14;
  CMTimeEpoch v15;
  int v16;
  CMTimeFlags v17;
  CMTimeEpoch v18;
  CFAllocatorRef *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  const __CFAllocator *v24;
  CFDictionaryRef v25;
  CFDictionaryRef v26;
  const __CFAllocator *v27;
  CFDictionaryRef v28;
  CFDictionaryRef v29;
  CMTimeEpoch v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  const __CFDictionary *v35;
  CMTimeFlags v36;
  CMTimeEpoch v37;
  const __CFAllocator *v38;
  CFDictionaryRef v39;
  CFDictionaryRef v40;
  const __CFAllocator *v41;
  CFArrayRef v42;
  CFTypeRef cf;
  CMTimeRange range;
  Float64 Seconds;
  Float64 valuePtr;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *values;
  __int128 v52;
  __int128 v53;
  CMTimeScale v54;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v57;
  CMTimeScale v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 928))
    return 4294954432;
  v5 = (CMTime *)DerivedStorage;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  values = Mutable;
  if (Mutable)
  {
    v8 = Mutable;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    Seconds = 0.0;
    valuePtr = 0.0;
    if (fpfsi_getPumpAvailableTimeRange(v5, &v48))
    {
      fpfsi_TotalTimeRangeInBuffer(a1, (uint64_t)&range);
      value = range.start.value;
      flags = range.start.flags;
      timescale = range.start.timescale;
      if ((range.start.flags & 1) == 0)
      {
        v10 = 4294954513;
        goto LABEL_38;
      }
      v13 = range.duration.flags;
      v10 = 4294954513;
      if ((range.duration.flags & 1) == 0)
        goto LABEL_38;
      if (range.duration.epoch)
        goto LABEL_38;
      v11 = range.duration.value;
      if (range.duration.value < 0)
        goto LABEL_38;
      v15 = 0;
      epoch = range.start.epoch;
      v14 = range.duration.timescale;
      v16 = 1;
    }
    else
    {
      value = v48;
      flags = HIDWORD(v48);
      timescale = DWORD2(v48);
      v11 = *((_QWORD *)&v49 + 1);
      epoch = v49;
      v14 = v50;
      v13 = DWORD1(v50);
      v15 = *((_QWORD *)&v50 + 1);
      v16 = BYTE12(v48) & 1;
    }
    range.start.value = value;
    range.start.timescale = timescale;
    range.start.flags = flags;
    range.start.epoch = epoch;
    range.duration.value = v11;
    range.duration.timescale = v14;
    range.duration.flags = v13;
    range.duration.epoch = v15;
    CMTimeRangeGetEnd((CMTime *)&v52, &range);
    v57 = v52;
    v17 = HIDWORD(v52);
    v58 = DWORD2(v52);
    v18 = v53;
    v19 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v16)
    {
      range.start.value = value;
      range.start.timescale = timescale;
      range.start.flags = flags;
      range.start.epoch = epoch;
      valuePtr = CMTimeGetSeconds(&range.start);
      v20 = CFNumberCreate(*v19, kCFNumberDoubleType, &valuePtr);
      if (!v20)
      {
        v10 = FigSignalErrorAt();
LABEL_38:
        if (values)
          CFRelease(values);
        return v10;
      }
      v21 = v20;
      CFDictionarySetValue(v8, CFSTR("start"), v20);
      if ((v17 & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      v21 = 0;
      if ((BYTE12(v52) & 1) == 0)
      {
LABEL_14:
        v22 = 0;
        goto LABEL_18;
      }
    }
    range.start.value = v57;
    range.start.timescale = v58;
    range.start.flags = v17;
    range.start.epoch = v18;
    Seconds = CMTimeGetSeconds(&range.start);
    v23 = CFNumberCreate(*v19, kCFNumberDoubleType, &Seconds);
    if (!v23)
    {
      v10 = FigSignalErrorAt();
      goto LABEL_36;
    }
    v22 = v23;
    CFDictionarySetValue(v8, CFSTR("end"), v23);
LABEL_18:
    v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
    range.start.value = value;
    range.start.timescale = timescale;
    range.start.flags = flags;
    range.start.epoch = epoch;
    v25 = CMTimeCopyAsDictionary(&range.start, v24);
    if (v25)
    {
      v26 = v25;
      CFDictionarySetValue(v8, CFSTR("startTime"), v25);
      v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
      range.start.value = v57;
      range.start.timescale = v58;
      range.start.flags = v17;
      range.start.epoch = v18;
      v28 = CMTimeCopyAsDictionary(&range.start, v27);
      if (v28)
      {
        v29 = v28;
        CFDictionarySetValue(v8, CFSTR("endTime"), v28);
        if ((v5[55].flags & 0x1D) != 1)
        {
          v30 = v5[38].epoch;
          if (v30)
          {
            cf = 0;
            v31 = FigGetAllocatorForMedia();
            FigBytePumpGetFigBaseObject(v30);
            v33 = v32;
            v34 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
            if (v34)
            {
              v34(v33, CFSTR("FBP_ManagedLiveEdgeSeekablePoint"), v31, &cf);
              v35 = (const __CFDictionary *)cf;
            }
            else
            {
              v35 = 0;
            }
            CMTimeRangeMakeFromDictionary(&range, v35);
            v52 = *(_OWORD *)&range.start.value;
            v53 = *(_OWORD *)&range.start.epoch;
            v36 = range.duration.flags;
            v54 = range.duration.timescale;
            if ((range.duration.flags & 0x1D) == 1)
            {
              v37 = range.duration.epoch;
              v38 = (const __CFAllocator *)FigGetAllocatorForMedia();
              range.start.value = *((_QWORD *)&v53 + 1);
              range.start.timescale = v54;
              range.start.flags = v36;
              range.start.epoch = v37;
              v39 = CMTimeCopyAsDictionary(&range.start, v38);
              if (v39)
              {
                v40 = v39;
                CFDictionarySetValue(v8, CFSTR("liveEdgeDuration"), v39);
                CFRelease(v40);
              }
            }
            if (cf)
              CFRelease(cf);
          }
        }
        v41 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v42 = CFArrayCreate(v41, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
        if (v42)
        {
          v10 = 0;
          *a2 = v42;
        }
        else
        {
          v10 = FigSignalErrorAt();
        }
        CFRelease(v29);
      }
      else
      {
        v10 = FigSignalErrorAt();
      }
      CFRelease(v26);
      if (!v22)
        goto LABEL_36;
      goto LABEL_35;
    }
    v10 = FigSignalErrorAt();
    if (v22)
LABEL_35:
      CFRelease(v22);
LABEL_36:
    if (v21)
      CFRelease(v21);
    goto LABEL_38;
  }
  return FigSignalErrorAt();
}

uint64_t fpfs_NewTrackNote(const void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const __CFArray *Next;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  unsigned int v15;
  uint64_t v16;
  void (*v17)(const void *, uint64_t, const opaqueCMFormatDescription **);
  const opaqueCMFormatDescription *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, const opaqueCMFormatDescription **);
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(const void *, _QWORD, _QWORD, _QWORD);
  NSObject *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL4 v36;
  void (*v37)(const void *, _QWORD, _QWORD, _QWORD);
  int v38;
  uint64_t v39;
  NSObject *v40;
  void (*v41)(const void *, _QWORD, _QWORD, _QWORD);
  uint64_t updated;
  const void *v43;
  uint64_t v44;
  uint64_t AllocatorForMedia;
  void (*v46)(const void *, _QWORD);
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  const void *v50;
  uint64_t v51;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t (*v55)(const void *, _QWORD, _QWORD, _QWORD *);
  uint64_t RenderingTrackofType;
  uint64_t v57;
  const __CFArray *v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  const opaqueCMFormatDescription *v66;
  const opaqueCMFormatDescription *v67;
  CFArrayRef theArray;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(v9, 0);
  theArray = 0;
  v11 = 1;
  if (a3 <= 1935832171)
  {
    if (a3 != 1668047728 && a3 != 1835365473)
LABEL_8:
      v11 = 0;
  }
  else
  {
    if (a3 != 1935832172)
    {
      if (a3 == 1986618469)
        goto LABEL_10;
      if (a3 == 1936684398)
      {
        v11 = 2;
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    v11 = 4;
  }
LABEL_10:
  v66 = 0;
  v67 = 0;
  if (!a1)
    goto LABEL_18;
  v12 = 0;
  v13 = 992;
  do
  {
    if (*(const void **)(DerivedStorage + v13) == a1)
    {
      v15 = 0;
      goto LABEL_20;
    }
    ++v12;
    v13 += 16;
  }
  while (v12 != 3);
  if (!*(_QWORD *)(DerivedStorage + 1760))
    goto LABEL_18;
  v12 = 0;
  v14 = (const void **)(DerivedStorage + 1000);
  v15 = 1;
  while (*v14 != a1)
  {
    ++v12;
    v14 += 2;
    if (v12 == 3)
      goto LABEL_18;
  }
LABEL_20:
  if (v12 >= 3u)
  {
LABEL_18:
    v16 = FigSignalErrorAt();
    goto LABEL_137;
  }
  v17 = *(void (**)(const void *, uint64_t, const opaqueCMFormatDescription **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 24);
  if (v17)
    v17(a1, a4, &v67);
  v63 = a4;
  v59 = Next;
  if (a3 == 1835365473)
  {
    v18 = v67;
    CMBaseObjectGetDerivedStorage();
    CMFormatDescriptionGetMediaSubType(v18);
  }
  v19 = *(_QWORD *)(DerivedStorage + 1040);
  v61 = 1;
  v64 = a2;
  if (!v19)
  {
    v62 = 0;
    v29 = 0;
    goto LABEL_67;
  }
  v60 = 0;
  v62 = 0;
  v20 = (_QWORD *)(DerivedStorage + 24 * v15 + 8 * v12 + 1120);
  while (*(_QWORD *)(DerivedStorage + 1040))
  {
    v21 = v19;
    v19 = *(_QWORD *)(v19 + 8);
    if (*(_DWORD *)(v21 + 32) == a3 && *(_QWORD *)(v21 + 64) == *v20)
    {
      if (*(const void **)(v21 + 48) == a1 && a3 != 1835365473 && !*(_BYTE *)(v21 + 182))
        break;
      v66 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
      if (!v66)
      {
        v22 = *(_QWORD *)(v21 + 48);
        v23 = *(unsigned int *)(v21 + 24);
        v24 = *(void (**)(uint64_t, uint64_t, const opaqueCMFormatDescription **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 24);
        if (v24)
          v24(v22, v23, &v66);
      }
      v25 = *(unsigned __int8 *)(v21 + 180);
      if (v25 != v12)
      {
        if (*(_DWORD *)(v21 + 152) == 6)
        {
          v26 = *(_DWORD *)(DerivedStorage + 1088);
          if (((v26 >> v25) & 1) == 0)
            goto LABEL_62;
          if (a3 != 1835365473)
          {
LABEL_50:
            if ((v26 & v11) != 0)
            {
              v27 = 1 << *(_BYTE *)(v21 + 180);
LABEL_55:
              if (v27 == v11)
                break;
            }
            FigFormatDescriptionRelease();
            v66 = 0;
            fpfs_StopFeedingTrack(v21, 0, 0);
            v28 = *(_QWORD *)(v21 + 96);
            if (v28)
              fpfs_FlushPrimaryAndAuxRenderChains(v28, 1);
            fpfs_DeleteTrack(v64);
            goto LABEL_59;
          }
LABEL_48:
          if (!fpfs_areMetadataFormatsRivals(v67, v66))
            goto LABEL_61;
          v26 = *(_DWORD *)(DerivedStorage + 1088);
          goto LABEL_50;
        }
        if (a3 == 1835365473)
        {
LABEL_52:
          if (!fpfs_areMetadataFormatsRivals(v67, v66))
          {
LABEL_61:
            ++v60;
            goto LABEL_62;
          }
          LOBYTE(v25) = *(_BYTE *)(v21 + 180);
        }
        v27 = 1 << v25;
        goto LABEL_55;
      }
      if (a3 == 1835365473 && !fpfsi_canMetadataFormatsSync(v67, v66))
      {
        if (*(_DWORD *)(v21 + 152) == 6)
        {
          if (((*(_DWORD *)(DerivedStorage + 1088) >> *(_BYTE *)(v21 + 180)) & 1) == 0)
            goto LABEL_62;
          goto LABEL_48;
        }
        goto LABEL_52;
      }
      v62 = *(_DWORD *)(v21 + 28);
LABEL_62:
      FigFormatDescriptionRelease();
      v66 = 0;
      if (!v19)
      {
LABEL_63:
        v61 = 1;
        goto LABEL_66;
      }
    }
    else
    {
LABEL_59:
      if (!v19)
        goto LABEL_63;
    }
  }
  v61 = 0;
LABEL_66:
  a2 = v64;
  v29 = v60;
LABEL_67:
  if (a3 != 1986618469 || !(_BYTE)v12)
  {
    if (a3 == 1986618469)
    {
      v38 = v61;
      if (v29 >= 5)
        v38 = 0;
      if (v38 == 1)
      {
        v39 = *(_QWORD *)(DerivedStorage + 1696);
        if (!v39 || !FigAlternateIsAudioOnly(v39) || !dword_1EE2A2A88)
          goto LABEL_126;
        goto LABEL_125;
      }
    }
    else
    {
      v33 = *(_QWORD *)(DerivedStorage + 1696);
      if (v33 && FigAlternateIsIFrameOnly(v33))
      {
LABEL_98:
        v41 = *(void (**)(const void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 32);
        if (v41)
          v41(a1, v63, 0, 0);
        v16 = 0;
        goto LABEL_131;
      }
      v34 = v61;
      if (v29 >= 5)
        v34 = 0;
      if ((v34 & 1) != 0)
      {
        if (a3 != 1936684398)
          goto LABEL_126;
        v35 = *(_QWORD *)(DerivedStorage + 1696);
        if (!v35)
          goto LABEL_126;
        if (FigAlternateIsIFrameOnly(*(_QWORD *)(DerivedStorage + 1696)))
        {
          v36 = 1;
        }
        else
        {
          if (!FigAlternateHasVideo(v35))
          {
LABEL_126:
            v53 = fpfs_AddNewTrack(a2, v63, a1, v12, a3, v62);
            if (!v53)
              goto LABEL_119;
            v54 = v53;
            v55 = *(uint64_t (**)(const void *, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 32);
            if (v55)
            {
              v51 = v55(a1, v63, &kManifoldOutputCallbacks, v54);
              goto LABEL_129;
            }
            v16 = 4294954514;
LABEL_131:
            if (a3 == 1936684398 && v59 == (const __CFArray *)a2)
            {
              RenderingTrackofType = fpfs_LastRenderingTrackofType(a2, 1936684398, 0);
              if (RenderingTrackofType)
                fpfs_CancelGaplessTransitionThatDependsOnTrack(*(const void **)DerivedStorage, RenderingTrackofType, 1);
            }
            goto LABEL_135;
          }
          v36 = FigAlternateHasAudio(v35) == 0;
        }
        if (!v36 || !dword_1EE2A2A88)
          goto LABEL_126;
LABEL_125:
        LODWORD(v65) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a2 = v64;
        goto LABEL_126;
      }
    }
    if (v29 >= 5 && dword_1EE2A2A88)
    {
      LODWORD(v65) = 0;
      v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a2 = v64;
    }
    goto LABEL_98;
  }
  if ((*(_BYTE *)(DerivedStorage + 1088) & 1) != 0 || (v30 = *(_QWORD *)(DerivedStorage + 1696)) == 0)
  {
    v37 = *(void (**)(const void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v37)
      v37(a1, v63, 0, 0);
    v16 = 0;
  }
  else
  {
    v65 = 0;
    v31 = *(void (**)(const void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v31)
      v31(a1, v63, 0, 0);
    if (dword_1EE2A2A88)
    {
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a2 = v64;
    }
    updated = FigAlternateSetLateDiscoveredMediaType(v30, 1986618469);
    if (!(_DWORD)updated)
    {
      v43 = *(const void **)(DerivedStorage + 40);
      if (!v43)
        goto LABEL_119;
      updated = FigAlternateSelectionBossApplyFilters(v43);
      if (!(_DWORD)updated)
      {
        v44 = *(_QWORD *)(DerivedStorage + 40);
        AllocatorForMedia = FigGetAllocatorForMedia();
        updated = FigAlternateSelectionBossCopyProperty(v44, CFSTR("FilteredAlternateList"), AllocatorForMedia, &theArray);
        if (!(_DWORD)updated)
        {
          if (!theArray || CFArrayGetCount(theArray) < 1)
            goto LABEL_119;
          updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate(a2, theArray, &v65);
          if (!(_DWORD)updated)
          {
            if (v65)
            {
              v46 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (v46)
                v46(a1, 0);
              v47 = *(_QWORD *)(DerivedStorage + 1040);
              if (v47)
              {
                do
                {
                  if (!*(_QWORD *)(DerivedStorage + 1040))
                    break;
                  v48 = *(_QWORD *)(v47 + 8);
                  if (*(const void **)(v47 + 48) == a1)
                  {
                    if (dword_1EE2A2A88)
                    {
                      v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    fpfs_DeleteTrack(v64);
                  }
                  v47 = v48;
                }
                while (v48);
              }
              v50 = *(const void **)DerivedStorage;
              v69 = *MEMORY[0x1E0CA2E18];
              v70 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
              a2 = v64;
              v51 = fpfs_SetAlternateWithContext(v50, v64, v65, 1);
LABEL_129:
              v16 = v51;
              goto LABEL_131;
            }
LABEL_119:
            updated = FigSignalErrorAt();
          }
        }
      }
    }
    v16 = updated;
LABEL_135:
    if ((_DWORD)v16)
    {
      v57 = CMBaseObjectGetDerivedStorage();
      fpfs_StopPlayingItemWithOSStatus(v57, a2, v16);
    }
  }
LABEL_137:
  FigFormatDescriptionRelease();
  FigFormatDescriptionRelease();
  if (theArray)
    CFRelease(theArray);
  return v16;
}

uint64_t fpfs_MPEG2ManifoldErrorCallback()
{
  const void *v0;

  v0 = (const void *)FigCFCopyCompactDescription();
  if (v0)
    CFRelease(v0);
  return 0;
}

BOOL fpfs_areMetadataFormatsRivals(const opaqueCMFormatDescription *a1, const opaqueCMFormatDescription *a2)
{
  return fpfsi_canMetadataFormatsSync(a1, a2)
      || CMFormatDescriptionGetMediaSubType(a1) == 1768174368
      || CMFormatDescriptionGetMediaSubType(a2) == 1768174368;
}

void fpfsi_TrimFromAllTracks(uint64_t a1, CMTime *a2, int a3, int a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v9;
  const __CFAllocator *AllocatorForMedia;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v12;
  uint64_t v13;
  opaqueCMBufferQueue *v14;
  uint64_t i;
  opaqueCMBufferQueue *v16;
  CMTime v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (CFTypeRef *)(a1 + 2608);
  if (!*(_QWORD *)(a1 + 2608))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(a1 + 2608));
  }
  v12 = *(_QWORD *)(a1 + 1056);
  if (v12)
  {
    do
    {
      v13 = *(_QWORD *)(v12 + 8);
      v14 = (opaqueCMBufferQueue *)*v9;
      v17 = *a2;
      fpfsi_TrimCachedSamplesFromTrack(v12, v14, &v17, a3, a4, 1);
      if (!v13)
        break;
      v12 = v13;
    }
    while (*(_QWORD *)(a1 + 1056));
  }
  for (i = *(_QWORD *)(a1 + 1040); i; i = *(_QWORD *)(i + 8))
  {
    v16 = (opaqueCMBufferQueue *)*v9;
    v17 = *a2;
    fpfsi_TrimCachedSamplesFromTrack(i, v16, &v17, a3, a4, 0);
  }
  if (*v9)
  {
    if (CMBufferQueueGetBufferCount((CMBufferQueueRef)*v9) >= 1)
    {
      CFRetain(*v9);
      fpfs_SendBufferQueueToChomper(DerivedStorage, (uint64_t)*v9);
    }
  }
}

uint64_t fpfsi_TotalBytesInBuffer(uint64_t *a1)
{
  uint64_t v1;
  uint64_t i;
  opaqueCMBufferQueue *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;

  v1 = *a1;
  for (i = 0; v1; v1 = *(_QWORD *)(v1 + 8))
  {
    v3 = *(opaqueCMBufferQueue **)(v1 + 80);
    if (v3)
    {
      i += CMBufferQueueGetTotalSize(v3);
      CMBaseObjectGetDerivedStorage();
      if (dword_1EE2A2A88 >= 0xA)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  if (dword_1EE2A2A88 >= 5)
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return i;
}

CMTime *fpfsi_FindEarliestVideoGOPEndInTrackList@<X0>(CMTime *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  CMTimeValue i;
  __int128 v5;
  __int128 v6;
  CMTime v7;
  CMTimeRange range;
  CMTime time1;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
  for (i = result->value; i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1986618469
      && (*(_BYTE *)(i + 508) & 1) != 0
      && (*(_BYTE *)(i + 532) & 1) != 0
      && !*(_QWORD *)(i + 536)
      && (*(_QWORD *)(i + 520) & 0x8000000000000000) == 0)
    {
      v5 = *(_OWORD *)(i + 512);
      *(_OWORD *)&range.start.value = *(_OWORD *)(i + 496);
      *(_OWORD *)&range.start.epoch = v5;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(i + 528);
      CMTimeRangeGetEnd(&time1, &range);
      *(_OWORD *)&range.start.value = *(_OWORD *)a2;
      range.start.epoch = *(_QWORD *)(a2 + 16);
      result = (CMTime *)CMTimeCompare(&time1, &range.start);
      if ((result & 0x80000000) != 0)
      {
        v6 = *(_OWORD *)(i + 512);
        *(_OWORD *)&range.start.value = *(_OWORD *)(i + 496);
        *(_OWORD *)&range.start.epoch = v6;
        *(_OWORD *)&range.duration.timescale = *(_OWORD *)(i + 528);
        result = CMTimeRangeGetEnd(&v7, &range);
        *(CMTime *)a2 = v7;
      }
    }
  }
  return result;
}

void fpfsi_TrimCachedSamplesFromTrack(uint64_t a1, opaqueCMBufferQueue *a2, CMTime *a3, int a4, int a5, int a6)
{
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int IsEmpty;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v20;
  CMTime v21;
  CMTime time2;
  CMTimeRange time1[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32) != 1986618469)
  {
    if (a5)
      goto LABEL_22;
    if (!a4 && *(_BYTE *)(a1 + 420))
    {
      time2 = *a3;
      fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(a1, &time2, (uint64_t)time1);
      *(_OWORD *)&a3->value = *(_OWORD *)&time1[0].start.value;
      a3->epoch = time1[0].start.epoch;
    }
LABEL_21:
    *(_OWORD *)&time1[0].start.value = *(_OWORD *)&a3->value;
    time1[0].start.epoch = a3->epoch;
    fpfsi_ReleaseCachedSamplesFromTrack(a1, a2, &time1[0].start, a4);
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 184))
    goto LABEL_21;
  if (!a5)
  {
    fpfsi_SetNextVideoGOPRangeToTrimForTrack(a1);
    if ((*(_BYTE *)(a1 + 508) & 1) == 0
      || (*(_BYTE *)(a1 + 532) & 1) == 0
      || *(_QWORD *)(a1 + 536)
      || (*(_QWORD *)(a1 + 520) & 0x8000000000000000) != 0)
    {
      return;
    }
    v12 = (_OWORD *)(a1 + 496);
    v13 = (_OWORD *)MEMORY[0x1E0CA2E40];
    if (!a4)
      goto LABEL_11;
    while (1)
    {
      *(_OWORD *)&time1[0].start.value = *v12;
      time1[0].start.epoch = *(_QWORD *)(a1 + 512);
      time2 = *a3;
      if (CMTimeCompare(&time1[0].start, &time2) < 0)
        break;
      while (1)
      {
        if (*(_BYTE *)(a1 + 182))
        {
          v15 = *(_OWORD *)(a1 + 512);
          *(_OWORD *)&time1[0].start.value = *v12;
          *(_OWORD *)&time1[0].start.epoch = v15;
          *(_OWORD *)&time1[0].duration.timescale = *(_OWORD *)(a1 + 528);
          CMTimeRangeGetEnd(&v20, time1);
          *(_OWORD *)&time1[0].start.value = *(_OWORD *)(a1 + 216);
          time1[0].start.epoch = *(_QWORD *)(a1 + 232);
          if (!CMTimeCompare(&v20, &time1[0].start))
          {
            v16 = MEMORY[0x1E0CA2E30];
            *(_OWORD *)&a3->value = *MEMORY[0x1E0CA2E30];
            a3->epoch = *(_QWORD *)(v16 + 16);
          }
        }
        *(_OWORD *)&time1[0].start.value = *(_OWORD *)&a3->value;
        time1[0].start.epoch = a3->epoch;
        fpfsi_ReleaseCachedSamplesFromTrack(a1, a2, &time1[0].start, a4);
        v17 = v13[1];
        *v12 = *v13;
        *(_OWORD *)(a1 + 512) = v17;
        *(_OWORD *)(a1 + 528) = v13[2];
        fpfsi_SetNextVideoGOPRangeToTrimForTrack(a1);
        if (a4)
          break;
LABEL_11:
        v14 = *(_OWORD *)(a1 + 512);
        *(_OWORD *)&time1[0].start.value = *v12;
        *(_OWORD *)&time1[0].start.epoch = v14;
        *(_OWORD *)&time1[0].duration.timescale = *(_OWORD *)(a1 + 528);
        CMTimeRangeGetEnd(&v21, time1);
        *(_OWORD *)&time1[0].start.value = *(_OWORD *)&a3->value;
        time1[0].start.epoch = a3->epoch;
        if (CMTimeCompare(&v21, &time1[0].start) >= 1)
          goto LABEL_22;
      }
    }
  }
LABEL_22:
  IsEmpty = CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 80));
  if (a6 && IsEmpty)
  {
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_DeleteTrack(*(_QWORD *)a1);
  }
}

opaqueCMSampleBuffer *fpfsi_ReleaseCachedSamplesFromTrack(uint64_t a1, opaqueCMBufferQueue *a2, CMTime *a3, int a4)
{
  opaqueCMSampleBuffer *result;
  CMBufferRef v9;
  CMTime v10;
  CMTime time1;
  CMTime v12;

  CMBaseObjectGetDerivedStorage();
  while (1)
  {
    result = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 80));
    if (!result)
      break;
    memset(&v12, 0, sizeof(v12));
    CMSampleBufferGetOutputPresentationTimeStamp(&v12, result);
    if (a4)
    {
      if ((v12.flags & 1) != 0)
      {
        time1 = v12;
        v10 = *a3;
        result = (opaqueCMSampleBuffer *)CMTimeCompare(&time1, &v10);
        if ((int)result <= 0)
          return result;
      }
    }
    else if ((v12.flags & 1) != 0)
    {
      time1 = v12;
      v10 = *a3;
      result = (opaqueCMSampleBuffer *)CMTimeCompare(&time1, &v10);
      if ((result & 0x80000000) == 0)
        return result;
    }
    v9 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 80));
    if (a2)
      CMBufferQueueEnqueue(a2, v9);
    if (v9)
      CFRelease(v9);
  }
  return result;
}

double fpfsi_SetNextVideoGOPRangeToTrimForTrack(uint64_t a1)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CMTime v8;
  CMTime v9;
  CMTime duration;
  CMTime time2;
  CMTime time1;
  CMTime end;
  CMTime start;
  CMTimeRange v15;
  CMTimeRange refcon;

  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v7 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&refcon.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&refcon.start.epoch = v6;
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  *(_OWORD *)&refcon.duration.timescale = v5;
  CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32) == 1986618469
    && !*(_BYTE *)(a1 + 184)
    && ((*(_BYTE *)(a1 + 508) & 1) == 0
     || (*(_BYTE *)(a1 + 532) & 1) == 0
     || *(_QWORD *)(a1 + 536)
     || (*(_QWORD *)(a1 + 520) & 0x8000000000000000) != 0))
  {
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_FindVideoGOPRangeInBufferQueue, &refcon);
    if ((refcon.start.flags & 1) == 0
      || (refcon.duration.flags & 1) == 0
      || refcon.duration.epoch
      || refcon.duration.value < 0)
    {
LABEL_8:
      v3 = *(_OWORD *)&refcon.start.epoch;
      *(_OWORD *)(a1 + 496) = *(_OWORD *)&refcon.start.value;
      *(_OWORD *)(a1 + 512) = v3;
      result = *(double *)&refcon.duration.timescale;
      *(_OWORD *)(a1 + 528) = *(_OWORD *)&refcon.duration.timescale;
      return result;
    }
    if ((~refcon.start.flags & 0x11) != 0 && (refcon.duration.flags & 0x11) != 0x11)
    {
LABEL_21:
      if ((refcon.start.flags & 1) != 0
        && (refcon.duration.flags & 1) != 0
        && !refcon.duration.epoch
        && (refcon.duration.value & 0x8000000000000000) == 0)
      {
        CMTimeMakeWithSeconds(&v9, 30.0, 1);
        v15.start = refcon.duration;
        if (CMTimeCompare(&v15.start, &v9) >= 1)
        {
          CMTimeMakeWithSeconds(&v8, 30.0, 1);
          start = refcon.start;
          CMTimeRangeMake(&v15, &start, &v8);
          refcon = v15;
        }
      }
      goto LABEL_8;
    }
    if (*(_BYTE *)(a1 + 182))
    {
      start = refcon.start;
      end = *(CMTime *)(a1 + 216);
      CMTimeRangeFromTimeToTime(&v15, &start, &end);
    }
    else
    {
      *(_OWORD *)&v15.start.value = *(_OWORD *)(a1 + 216);
      v15.start.epoch = *(_QWORD *)(a1 + 232);
      start = refcon.start;
      CMTimeSubtract(&time1, &v15.start, &start);
      CMTimeMakeWithSeconds(&time2, 30.0, 1);
      if (CMTimeCompare(&time1, &time2) < 1)
      {
        *(_OWORD *)&refcon.start.value = v7;
        *(_OWORD *)&refcon.start.epoch = v6;
        v4 = v5;
        goto LABEL_20;
      }
      CMTimeMakeWithSeconds(&duration, 30.0, 1);
      start = refcon.start;
      CMTimeRangeMake(&v15, &start, &duration);
    }
    *(_OWORD *)&refcon.start.value = *(_OWORD *)&v15.start.value;
    *(_OWORD *)&refcon.start.epoch = *(_OWORD *)&v15.start.epoch;
    v4 = *(_OWORD *)&v15.duration.timescale;
LABEL_20:
    *(_OWORD *)&refcon.duration.timescale = v4;
    goto LABEL_21;
  }
  return result;
}

uint64_t fpfs_FindVideoGOPRangeInBufferQueue(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  CMTime v7;
  CMTimeRange v8;
  CMTime start;
  CMTime v10;

  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetOutputPresentationTimeStamp(&v10, a1);
  if (fpfs_IsMarkerOnly(a1))
    return 0;
  if (fpfs_IsVideoSync(a1)
    && (*(_BYTE *)(a2 + 12) & 1) != 0
    && (*(_BYTE *)(a2 + 36) & 1) != 0
    && !*(_QWORD *)(a2 + 40)
    && (*(_QWORD *)(a2 + 24) & 0x8000000000000000) == 0
    && (v8.start = v10, start = *(CMTime *)a2, CMTimeCompare(&v8.start, &start) >= 1))
  {
    start = *(CMTime *)a2;
    v7 = v10;
    CMTimeRangeFromTimeToTime(&v8, &start, &v7);
    v6 = *(_OWORD *)&v8.start.epoch;
    *(_OWORD *)a2 = *(_OWORD *)&v8.start.value;
    *(_OWORD *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v8.duration.timescale;
    return 0xFFFFFFFFLL;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 12) & 1) != 0
      && (*(_BYTE *)(a2 + 36) & 1) != 0
      && !*(_QWORD *)(a2 + 40)
      && (*(_QWORD *)(a2 + 24) & 0x8000000000000000) == 0)
    {
      return 0;
    }
    start = v10;
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
    CMTimeRangeMake(&v8, &start, &v7);
    result = 0;
    v5 = *(_OWORD *)&v8.start.epoch;
    *(_OWORD *)a2 = *(_OWORD *)&v8.start.value;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v8.duration.timescale;
  }
  return result;
}

void fpfs_GetPreciseTimeForDate(CMTime *a1@<X0>, uint64_t a2@<X1>, CMTime *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  CMTimeEpoch v9;
  CMTimeValue value;
  CMTime *v11;
  CMTime *v12;
  double v13;
  double v14;
  CMTimeValue v15;
  CMTimeScale timescale;
  CMTimeValue v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime time;
  CMTime v25;
  os_log_type_t type;
  CMTime rhs;
  CFTypeRef v28;
  CFTypeRef v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime time2;
  CMTime time1;
  uint64_t v36;
  int epoch_high;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0CA2E18];
  v19 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a4 = *MEMORY[0x1E0CA2E18];
  v9 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(a4 + 16) = v9;
  memset(&v33, 0, sizeof(v33));
  epoch_high = 0;
  v36 = 0;
  memset(&v32, 0, sizeof(v32));
  CMTimeMake(&v32, 2, 1);
  *(_OWORD *)&v30.value = v19;
  v30.epoch = v9;
  memset(&v31, 0, sizeof(v31));
  v28 = 0;
  v29 = 0;
  rhs = *a3;
  value = a1[67].value;
  if (value)
  {
    time1 = *(CMTime *)(value + 24);
    time2 = *a3;
    v11 = 0;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      while (1)
      {
        v12 = (CMTime *)value;
        if ((*(_BYTE *)(value + 84) & 1) != 0)
          v11 = (CMTime *)value;
        value = *(_QWORD *)value;
        if (!value)
          break;
        time1 = *(CMTime *)(value + 24);
        time2 = rhs;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          goto LABEL_4;
      }
    }
    else
    {
      v12 = 0;
LABEL_4:
      time1 = *(CMTime *)(value + 24);
      time2 = rhs;
      if (CMTimeCompare(&time1, &time2))
      {
        if (!v12)
        {
          v12 = (CMTime *)a1[67].value;
          if (!v12)
            goto LABEL_25;
          time1 = rhs;
          time2 = v12[1];
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
            goto LABEL_25;
        }
      }
      else
      {
        v12 = (CMTime *)value;
      }
    }
    if ((v12[3].flags & 1) != 0 || (v12 = v11) != 0)
    {
      v13 = MEMORY[0x194029D14](a2);
      v14 = MEMORY[0x194029D14](v12->epoch);
      CMTimeMake(&v31, (uint64_t)((v13 - v14) * 90000.0), 90000);
      time2 = v12[3];
      rhs = v31;
      CMTimeAdd(&time1, &time2, &rhs);
      v15 = time1.value;
      v36 = *(_QWORD *)&time1.flags;
      timescale = time1.timescale;
      epoch_high = HIDWORD(time1.epoch);
      time1 = v12[1];
      time2 = v31;
      CMTimeAdd(&v30, &time1, &time2);
      time2 = v30;
      rhs = v12[2];
      CMTimeSubtract(&time1, &time2, &rhs);
      v30 = time1;
      time1 = a1[49];
      time2 = v12[2];
      CMTimeSubtract(&time, &time1, &time2);
      CMTimeAbsoluteValue(&v25, &time);
      time2 = v32;
      CMTimeAdd(&time1, &time2, &v25);
      v32 = time1;
      if (timescale == 90000)
        v17 = v15 & 0x1FFFFFFFFLL;
      else
        v17 = v15;
      time1.value = v15;
      *(_QWORD *)&time1.flags = v36;
      time1.timescale = timescale;
      HIDWORD(time1.epoch) = epoch_high;
      time2 = v12[4];
      CMTimeAdd(&v33, &time1, &time2);
      time1 = v30;
      time2 = v32;
      CMTimeSubtract(&v23, &time1, &time2);
      time1 = v33;
      if (CMTimeCompare(&v23, &time1) < 0)
      {
        time1 = v30;
        time2 = v32;
        CMTimeAdd(&v22, &time1, &time2);
        time1 = v33;
        if (CMTimeCompare(&time1, &v22) < 0)
          goto LABEL_24;
      }
      time2.value = v17;
      *(_QWORD *)&time2.flags = v36;
      time2.timescale = timescale;
      HIDWORD(time2.epoch) = epoch_high;
      rhs = v12[4];
      CMTimeAdd(&time1, &time2, &rhs);
      v33 = time1;
      time1 = v30;
      time2 = v32;
      CMTimeSubtract(&v21, &time1, &time2);
      time1 = v33;
      if (CMTimeCompare(&v21, &time1) < 0)
      {
        time1 = v30;
        time2 = v32;
        CMTimeAdd(&v20, &time1, &time2);
        time1 = v33;
        if (CMTimeCompare(&time1, &v20) < 0)
LABEL_24:
          *(CMTime *)a4 = v33;
      }
      return;
    }
  }
LABEL_25:
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a1->epoch, &v29, &v28))
  {
    if (dword_1EE2A2A88)
    {
      LODWORD(rhs.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v28)
      CFRelease(v28);
    if (v29)
      CFRelease(v29);
  }
}

void fpfsi_RemoveDateEntryQueue(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 1608);
  if (v3)
  {
    do
    {
      v5 = *(_QWORD *)v3;
      if (!a2 || (*(_BYTE *)(v3 + 84) & 1) == 0)
        fpfsi_RemoveDateEntry(a1, (uint64_t *)v3);
      v3 = v5;
    }
    while (v5);
  }
}

uint64_t fpfsi_AddDateToQueue(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6, uint64_t a7, _QWORD *a8, char a9)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t result;
  CMTime v28;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = DerivedStorage;
  if (a8)
    v18 = a8;
  else
    v18 = (_QWORD *)(DerivedStorage + 1608);
  do
  {
    v18 = (_QWORD *)*v18;
    if (!v18)
    {
      v21 = malloc_type_calloc(1uLL, 0x80uLL, 0x10E0040A18345ADuLL);
      if (!v21)
        return FigSignalErrorAt();
      v18 = v21;
      *v21 = 0;
      v22 = *(_QWORD **)(v17 + 1616);
      v21[1] = v22;
      *v22 = v21;
      *(_QWORD *)(v17 + 1616) = v21;
LABEL_11:
      v18[2] = CFRetain(a2);
      v23 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)(v18 + 3) = *(_OWORD *)a3;
      v18[5] = v23;
LABEL_12:
      v24 = *a4;
      v18[8] = *((_QWORD *)a4 + 2);
      *((_OWORD *)v18 + 3) = v24;
      v25 = *a5;
      v18[11] = *((_QWORD *)a5 + 2);
      *(_OWORD *)(v18 + 9) = v25;
      v26 = *(_QWORD *)(a6 + 16);
      *((_OWORD *)v18 + 6) = *(_OWORD *)a6;
      v18[14] = v26;
      v18[15] = a7;
      if (!a8)
        return 0;
LABEL_13:
      result = 0;
      *a8 = v18;
      return result;
    }
    time1 = *(CMTime *)((_BYTE *)v18 + 1);
    v28 = *(CMTime *)a3;
  }
  while (CMTimeCompare(&time1, &v28) < 0);
  time1 = *(CMTime *)((_BYTE *)v18 + 1);
  v28 = *(CMTime *)a3;
  if (!CMTimeCompare(&time1, &v28))
  {
    if (!a9)
      goto LABEL_13;
    goto LABEL_12;
  }
  v19 = malloc_type_calloc(1uLL, 0x80uLL, 0x10E0040A18345ADuLL);
  if (v19)
  {
    v20 = v18[1];
    *v19 = v18;
    v19[1] = v20;
    *(_QWORD *)v18[1] = v19;
    v18[1] = v19;
    v18 = v19;
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

uint64_t fpfsi_setTimePitchAlgorithm(const __CFArray *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void **v5;
  CFTypeID TypeID;
  uint64_t v7;
  const void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v5 = (const void **)DerivedStorage;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a2)
    || !CFEqual(a2, CFSTR("TimeDomain"))
    && !CFEqual(a2, CFSTR("Spectral"))
    && !CFEqual(a2, CFSTR("LowQualityZeroLatency"))
    && !CFEqual(a2, CFSTR("Varispeed")))
  {
    return FigSignalErrorAt();
  }
  if (!CFEqual(a2, v5[109]))
  {
    v7 = CMBaseObjectGetDerivedStorage();
    v8 = v5[109];
    v5[109] = a2;
    CFRetain(a2);
    if (v8)
      CFRelease(v8);
    if (*(const __CFArray **)(v7 + 80) == a1)
    {
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fpfs_stopResetDisturbReprepareAndResume(*v5, a1, 0);
    }
  }
  return 0;
}

void fpfsi_postSelectedMediaOptionsDidChangeNotification(const void *a1)
{
  const void *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const void *NotificationPayloadForProperties;

  v2 = *(const void **)CMBaseObjectGetDerivedStorage();
  NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(v2, (uint64_t)a1, v3, v4, v5, v6, v7, v8, CFSTR("SelectedMediaArray"), 0);
  fpfs_EnqueueNotification(v2, CFSTR("SelectedMediaOptionsDidChange"), a1, NotificationPayloadForProperties);
}

void sub_192A1E778()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

uint64_t fpfsi_EnsureVenueDescriptionMetadataSupplierIfNecessary(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  const __CFAllocator *AllocatorForMedia;
  const char *v7;
  CFStringRef v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFNumber *v14;
  const __CFArray *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, const __CFString *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, const __CFString *, uint64_t);
  uint64_t v22;
  int valuePtr;
  CFTypeRef cf[29];

  cf[27] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  valuePtr = 0;
  if (*(_QWORD *)(DerivedStorage + 736)
    || (v4 = v3, !*(_QWORD *)(v3 + 432))
    || !*(_QWORD *)(DerivedStorage + 928)
    || !*(_BYTE *)(DerivedStorage + 462))
  {
    v22 = 0;
    v8 = 0;
    goto LABEL_26;
  }
  v5 = (uint64_t *)(DerivedStorage + 736);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (a1)
    v7 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
  else
    v7 = "";
  v8 = CFStringCreateWithCString(AllocatorForMedia, v7, 0x600u);
  v9 = FigGetAllocatorForMedia();
  v10 = FigVenueDescriptionMetadataSupplierCreate(v9, *(const void **)(DerivedStorage + 32), v8, (_QWORD *)(DerivedStorage + 736));
  if (!(_DWORD)v10)
  {
    if (!*v5)
    {
LABEL_25:
      v22 = 0;
      goto LABEL_26;
    }
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    v10 = FigNotificationCenterAddWeakListener();
    if (!(_DWORD)v10)
    {
      v12 = *v5;
      v13 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v13)
      {
        v13(v12, CFSTR("SMS_ProcessingStatus"), 0, cf);
        v14 = (const __CFNumber *)cf[0];
      }
      else
      {
        v14 = 0;
      }
      CFNumberGetValue(v14, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr == 2)
      {
        v22 = 4294950069;
        goto LABEL_34;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      v10 = FigNotificationCenterAddWeakListener();
      if (!(_DWORD)v10)
      {
        v15 = *(const __CFArray **)(v4 + 432);
        if (v15)
        {
          if (CFArrayGetCount(v15))
          {
            v16 = *v5;
            v17 = *(_QWORD *)(v4 + 432);
            v18 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
            if (v18)
              v18(v16, CFSTR("SMS_VideoTargetArray"), v17);
          }
        }
        v19 = *(_QWORD *)(DerivedStorage + 2536);
        if (v19)
        {
          v20 = *v5;
          v21 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v21)
            v21(v20, CFSTR("SMS_ReportingAgent"), v19);
        }
        goto LABEL_25;
      }
    }
  }
  v22 = v10;
LABEL_34:
  fpfs_StopPlayingItemWithOSStatus(v4, a1, v22);
LABEL_26:
  if (cf[0])
    CFRelease(cf[0]);
  if (v8)
    CFRelease(v8);
  return v22;
}

uint64_t fpfs_PreallocateVideoRendering(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 2872))
  {
    v4 = result;
    v5 = *(_QWORD **)(DerivedStorage + 784);
    if (v5 && *v5 == 1)
      fpfs_ClearRenderChains(*a1, 1);
    result = fpfs_CanRenderVideo(v4, *a1);
    if ((_DWORD)result)
    {
      if (*(uint64_t *)(v4 + 616) <= 3)
      {
        result = fpfs_EnsureRenderChainForTrack(*(_QWORD *)DerivedStorage, a1, 1);
        if (!(_DWORD)result)
        {
          FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a1[12] + 32));
          v7 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
          if (v7)
            v7(FigBaseObject, CFSTR("Suspended"), *MEMORY[0x1E0C9AE40]);
          return fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(a1[12], (uint64_t)CFSTR("VideoDecoderIsSecondary"), *MEMORY[0x1E0C9AE50]);
        }
      }
    }
  }
  return result;
}

uint64_t fpfsi_IterateMutableTrackList(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v3 = *a1;
LABEL_9:
    *a2 = v3;
    v4 = v3;
    if (v3)
      goto LABEL_14;
    result = 0;
LABEL_12:
    v6 = -1;
    goto LABEL_18;
  }
  if (*a3 < 0 || (v3 = *a1) == 0)
  {
    result = 0;
    *a2 = 0;
    goto LABEL_12;
  }
  v4 = *a1;
  while (*(_QWORD *)(v4 + 16) != *a3)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      goto LABEL_9;
  }
  *a2 = v4;
LABEL_14:
  v7 = *(_QWORD *)(v4 + 8);
  if (v7)
    v6 = *(_QWORD *)(v7 + 16);
  else
    v6 = -1;
  result = 1;
LABEL_18:
  *a3 = v6;
  return result;
}

uint64_t fpfs_FindTrackStartTime@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 1040);
  if (v3)
  {
    while (*(_QWORD *)(v3 + 64) != a2 || (*(_DWORD *)(v3 + 140) & 0x1D) != 1 || (*(_BYTE *)(v3 + 204) & 1) == 0)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_6;
    }
    *(_OWORD *)a3 = *(_OWORD *)(v3 + 192);
    v5 = *(_QWORD *)(v3 + 208);
  }
  else
  {
LABEL_6:
    v4 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a3 = *MEMORY[0x1E0CA2E18];
    v5 = *(_QWORD *)(v4 + 16);
  }
  *(_QWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t fpfs_SetTrackStartTimeAndTimeOffset(uint64_t a1, opaqueCMSampleBuffer *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _OWORD *v16;
  uint64_t v17;
  CMTimeEpoch v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  float v31;
  __int128 v32;
  NSObject *v33;
  unsigned int value;
  unsigned int v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  Float64 Seconds;
  uint64_t v51;
  __int128 v52;
  NSObject *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  Float64 v82;
  Float64 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  Float64 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  CMTimeEpoch epoch;
  __int128 v93;
  const char *v94;
  int v95;
  const char *v96;
  CMTime v97;
  CMTime type;
  CMTime time2;
  CMTime v100;
  CMTime v101;
  CMTime rhs;
  const char *v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  int v109;
  __int16 v110;
  Float64 v111;
  __int16 v112;
  Float64 v113;
  __int16 v114;
  int v115;
  __int16 v116;
  Float64 v117;
  CMTime lhs;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v91 = CMBaseObjectGetDerivedStorage();
  v101 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v93 = *(_OWORD *)&v101.value;
  v100 = v101;
  epoch = v101.epoch;
  if (!a2)
    return FigSignalErrorAt();
  v95 = a3;
  CMSampleBufferGetPresentationTimeStamp(&v101, a2);
  fpfs_GetTimeOffsetIntoSegment(a2, (uint64_t)&v100);
  v7 = *(_QWORD *)(DerivedStorage + 1040);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(DerivedStorage + 1040);
    do
    {
      v11 = *(_QWORD *)(v10 + 64);
      if (v11 <= *(_QWORD *)(a1 + 64))
      {
        v12 = *(_DWORD *)(v10 + 152);
        if (v8 <= v11)
          v13 = v10;
        else
          v13 = v9;
        if (v8 > v11)
          v11 = v8;
        v14 = v12 == 6 || v12 == 1;
        if (v14)
          v9 = v13;
        if (v14)
          v8 = v11;
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(time2.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = *(_QWORD *)(DerivedStorage + 1040);
  }
  v16 = (_OWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 64);
  if (v7)
  {
    while (*(_QWORD *)(v7 + 64) != v17 || *(_BYTE *)(v7 + 456) || (*(_DWORD *)(v7 + 140) & 0x1D) != 1)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        goto LABEL_29;
    }
    *(_OWORD *)&lhs.value = *(_OWORD *)(v7 + 128);
    v18 = *(_QWORD *)(v7 + 144);
  }
  else
  {
LABEL_29:
    *(_OWORD *)&lhs.value = *MEMORY[0x1E0CA2E18];
    v18 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  lhs.epoch = v18;
  *v16 = *(_OWORD *)&lhs.value;
  *(_QWORD *)(a1 + 144) = v18;
  if ((*(_DWORD *)(a1 + 140) & 0x1D) == 1)
  {
    fpfs_FindTrackStartTime(DerivedStorage, v17, (uint64_t)&lhs);
    *(CMTime *)(a1 + 192) = lhs;
    v19 = *(_DWORD *)(a1 + 32);
    if (v19 == 1986618469 || v19 == 1936684398)
    {
      v20 = *(unsigned __int8 *)(a1 + 180);
      if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(DerivedStorage + 16 * v20 + 992))
      {
        memset(&time2, 0, sizeof(time2));
        v21 = DerivedStorage + 24 * v20;
        v22 = *(_OWORD *)(v21 + 1200);
        lhs.epoch = *(_QWORD *)(v21 + 1216);
        *(_OWORD *)&lhs.value = v22;
        rhs = *(CMTime *)(DerivedStorage + 1176);
        CMTimeSubtract(&time2, &lhs, &rhs);
        rhs = time2;
        type = v100;
        CMTimeAdd(&lhs, &rhs, &type);
        time2 = lhs;
        memset(&type, 0, sizeof(type));
        lhs = v101;
        *(_OWORD *)&rhs.value = *v16;
        rhs.epoch = *(_QWORD *)(a1 + 144);
        CMTimeAdd(&type, &lhs, &rhs);
        memset(&v97, 0, sizeof(v97));
        lhs = time2;
        rhs = type;
        CMTimeSubtract(&v97, &lhs, &rhs);
        lhs = v97;
        *(_OWORD *)&rhs.value = v93;
        rhs.epoch = epoch;
        if (CMTimeCompare(&lhs, &rhs))
        {
          v23 = *(_QWORD *)(DerivedStorage + 1040);
          if (v23)
          {
            while (1)
            {
              if (*(_QWORD *)(v23 + 64) == *(_QWORD *)(a1 + 64))
              {
                if ((*(_DWORD *)(v23 + 152) & 0xFFFFFFFC) == 4)
                  break;
                if (v23 == a1)
                {
                  v24 = *(_DWORD *)(a1 + 32);
                }
                else
                {
                  v24 = *(_DWORD *)(a1 + 32);
                  if (*(_DWORD *)(v23 + 32) == v24)
                    break;
                }
                if (v24 == 1936684398 && *(_DWORD *)(v23 + 32) == 1986618469)
                  break;
              }
              v23 = *(_QWORD *)(v23 + 8);
              if (!v23)
                goto LABEL_45;
            }
          }
          else
          {
LABEL_45:
            if (dword_1EE2A2A88)
            {
              v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v26 = *(_QWORD *)(a1 + 64);
            lhs = v97;
            fpfs_TimeShiftDiscontinuityDomain(DerivedStorage, v26, &lhs);
          }
        }
      }
    }
    if (v9 && *(_QWORD *)(v9 + 64) == *(_QWORD *)(a1 + 64))
      fpfs_ChangeTrackState(a1, 4);
  }
  if ((*(_DWORD *)(a1 + 140) & 0x1D) == 1)
    return 0;
  if (*(_BYTE *)(a1 + 184) && *(_DWORD *)(a1 + 32) == 1986618469)
  {
    if ((*(_BYTE *)(DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180) + 1212) & 1) == 0)
      goto LABEL_101;
    v27 = DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180);
    v28 = *(_OWORD *)(v27 + 1200);
    rhs.epoch = *(_QWORD *)(v27 + 1216);
    *(_OWORD *)&rhs.value = v28;
    time2 = *(CMTime *)(DerivedStorage + 1176);
    CMTimeSubtract(&lhs, &rhs, &time2);
    *(CMTime *)(a1 + 192) = lhs;
    if (!v9)
      goto LABEL_101;
    v29 = (_OWORD *)(a1 + 192);
    v30 = (_OWORD *)(v9 + 216);
    if ((*(_BYTE *)(v9 + 228) & 1) == 0)
      goto LABEL_63;
    v31 = *(float *)(v91 + 108);
    if (v31 >= 0.0)
    {
      *(_OWORD *)&lhs.value = *v29;
      lhs.epoch = *(_QWORD *)(a1 + 208);
      *(_OWORD *)&rhs.value = *v30;
      rhs.epoch = *(_QWORD *)(v9 + 232);
      if (CMTimeCompare(&lhs, &rhs) > 0)
      {
LABEL_63:
        v32 = *v29;
        *(_QWORD *)(v9 + 232) = *(_QWORD *)(a1 + 208);
        *v30 = v32;
        if (*(_QWORD *)(a1 + 112))
        {
          time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          fpfs_scheduleForwardEndTimeForTrack(DerivedStorage, a1, (uint64_t)&time2);
          if (dword_1EE2A2A88)
          {
            LODWORD(type.value) = 0;
            LOBYTE(v97.value) = 0;
            v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = type.value;
            if (os_log_type_enabled(v33, v97.value))
              v35 = value;
            else
              v35 = value & 0xFFFFFFFE;
            if (v35)
            {
              v36 = *(_QWORD *)DerivedStorage;
              if (*(_QWORD *)DerivedStorage)
                v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v37 = "";
              v94 = v37;
              v88 = DerivedStorage;
              v47 = *(_QWORD *)a1;
              if (*(_QWORD *)a1)
                v48 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v48 = "";
              v49 = *(_QWORD *)(a1 + 16);
              lhs = time2;
              Seconds = CMTimeGetSeconds(&lhs);
              LODWORD(rhs.value) = 136316674;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SetTrackStartTimeAndTimeOffset";
              LOWORD(rhs.flags) = 2048;
              *(_QWORD *)((char *)&rhs.flags + 2) = v36;
              HIWORD(rhs.epoch) = 2082;
              v103 = v94;
              v104 = 2048;
              v105 = v47;
              v106 = 2082;
              v107 = v48;
              v108 = 1024;
              v109 = v49;
              v110 = 2048;
              v111 = Seconds;
              _os_log_send_and_compose_impl();
              DerivedStorage = v88;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        goto LABEL_101;
      }
      v31 = *(float *)(v91 + 108);
    }
    if (v31 >= 0.0)
      goto LABEL_101;
    *(_OWORD *)&lhs.value = *v29;
    lhs.epoch = *(_QWORD *)(a1 + 208);
    *(_OWORD *)&rhs.value = *v30;
    rhs.epoch = *(_QWORD *)(v9 + 232);
    if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0)
      goto LABEL_101;
    goto LABEL_63;
  }
  v38 = *(_QWORD *)(DerivedStorage + 1040);
  if (v9)
    goto LABEL_72;
  if (v38)
  {
    v43 = 0;
    v44 = *(_QWORD *)(DerivedStorage + 1040);
    do
    {
      if (*(_QWORD *)(v44 + 64) < *(_QWORD *)(a1 + 64) && *(_DWORD *)(v44 + 152) == 3)
        v43 = v44;
      v44 = *(_QWORD *)(v44 + 8);
    }
    while (v44);
    if (v43)
    {
LABEL_72:
      for (lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28]; v38; v38 = *(_QWORD *)(v38 + 8))
      {
        v39 = *(_QWORD *)(v38 + 64);
        v40 = *(_QWORD *)(a1 + 64);
        if ((v39 < v40 || v39 == v40 && *(_BYTE *)(v38 + 456)) && (*(_BYTE *)(v38 + 228) & 1) != 0)
        {
          rhs = lhs;
          time2 = *(CMTime *)(v38 + 216);
          if (CMTimeCompare(&rhs, &time2) < 0)
          {
            lhs = *(CMTime *)(v38 + 216);
            *(_BYTE *)(a1 + 185) = 1;
          }
        }
      }
      *(CMTime *)(a1 + 192) = lhs;
    }
  }
  if ((*(_DWORD *)(a1 + 204) & 0x1D) != 1)
  {
    v41 = (_OWORD *)(a1 + 192);
    v42 = *(unsigned __int8 *)(a1 + 180);
    if ((*(_BYTE *)(DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180) + 1212) & 1) != 0)
    {
      memset(&lhs, 0, sizeof(lhs));
      v45 = DerivedStorage + 24 * v42;
      v46 = *(_OWORD *)(v45 + 1200);
      rhs.epoch = *(_QWORD *)(v45 + 1216);
      *(_OWORD *)&rhs.value = v46;
      time2 = *(CMTime *)(DerivedStorage + 1176);
      CMTimeSubtract(&lhs, &rhs, &time2);
      time2 = lhs;
      type = v100;
      CMTimeAdd(&rhs, &time2, &type);
      lhs = rhs;
      time2 = rhs;
      *(_OWORD *)&type.value = v93;
      type.epoch = epoch;
      CMTimeMaximum(&rhs, &time2, &type);
      *v41 = *(_OWORD *)&rhs.value;
      *(_QWORD *)(a1 + 208) = rhs.epoch;
      if (*(_BYTE *)(a1 + 180) != 2)
      {
        *(_OWORD *)&time2.value = *v41;
        time2.epoch = *(_QWORD *)(a1 + 208);
        type = v101;
        CMTimeSubtract(&rhs, &time2, &type);
        *v16 = *(_OWORD *)&rhs.value;
        *(_QWORD *)(a1 + 144) = rhs.epoch;
        *(_OWORD *)&time2.value = *v16;
        time2.epoch = *(_QWORD *)(a1 + 144);
        type = *(CMTime *)(a1 + 396);
        CMTimeSubtract(&rhs, &time2, &type);
        *v16 = *(_OWORD *)&rhs.value;
        *(_QWORD *)(a1 + 144) = rhs.epoch;
      }
    }
    else
    {
      fpfs_GetTime(DerivedStorage, (uint64_t)&lhs);
      *v41 = *(_OWORD *)&lhs.value;
      *(_QWORD *)(a1 + 208) = lhs.epoch;
    }
  }
LABEL_101:
  if ((*(_BYTE *)(DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180) + 260) & 1) != 0)
  {
    v51 = DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180);
    v52 = *(_OWORD *)(v51 + 248);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(v51 + 264);
    *v16 = v52;
    if (dword_1EE2A2A88)
    {
      LODWORD(time2.value) = 0;
      LOBYTE(type.value) = 0;
      v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v54 = time2.value;
      if (os_log_type_enabled(v53, type.value))
        v55 = v54;
      else
        v55 = v54 & 0xFFFFFFFE;
      if (v55)
      {
        v56 = DerivedStorage;
        v57 = *(_QWORD *)DerivedStorage;
        if (*(_QWORD *)DerivedStorage)
          v58 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v58 = "";
        v59 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v60 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v60 = "";
        v61 = *(_QWORD *)(a1 + 16);
        LODWORD(rhs.value) = 136316418;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SetTrackStartTimeAndTimeOffset";
        LOWORD(rhs.flags) = 2048;
        *(_QWORD *)((char *)&rhs.flags + 2) = v57;
        HIWORD(rhs.epoch) = 2082;
        v103 = v58;
        v104 = 2048;
        v105 = v59;
        v106 = 2082;
        v107 = v60;
        v108 = 1024;
        v109 = v61;
        _os_log_send_and_compose_impl();
        DerivedStorage = v56;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v62 = a1 + 128;
  if (v95)
  {
    if ((*(_BYTE *)(a1 + 140) & 1) != 0 || *(_BYTE *)(a1 + 180) != 2)
      goto LABEL_135;
    if (dword_1EE2A2A88)
    {
      LODWORD(time2.value) = 0;
      LOBYTE(type.value) = 0;
      v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v64 = time2.value;
      if (os_log_type_enabled(v63, type.value))
        v65 = v64;
      else
        v65 = v64 & 0xFFFFFFFE;
      if (v65)
      {
        v89 = DerivedStorage;
        v66 = *(_QWORD *)DerivedStorage;
        if (*(_QWORD *)DerivedStorage)
          v67 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v67 = "";
        v68 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v69 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v69 = "";
        v70 = *(_QWORD *)(a1 + 16);
        LODWORD(rhs.value) = 136316418;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SetTrackStartTimeAndTimeOffset";
        LOWORD(rhs.flags) = 2048;
        *(_QWORD *)((char *)&rhs.flags + 2) = v66;
        HIWORD(rhs.epoch) = 2082;
        v103 = v67;
        v104 = 2048;
        v105 = v68;
        v106 = 2082;
        v107 = v69;
        v108 = 1024;
        v109 = v70;
        _os_log_send_and_compose_impl();
        DerivedStorage = v89;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v71 = MEMORY[0x1E0CA2E10];
    *v16 = *MEMORY[0x1E0CA2E10];
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(v71 + 16);
    v62 = a1 + 192;
  }
  v72 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)v62 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v72 + 16);
LABEL_135:
  if ((*(_BYTE *)(a1 + 140) & 1) != 0)
    return 0;
  rhs = *(CMTime *)(a1 + 192);
  time2 = v101;
  CMTimeSubtract(&lhs, &rhs, &time2);
  *v16 = *(_OWORD *)&lhs.value;
  *(_QWORD *)(a1 + 144) = lhs.epoch;
  *(_OWORD *)&rhs.value = *v16;
  rhs.epoch = *(_QWORD *)(a1 + 144);
  time2 = *(CMTime *)(a1 + 396);
  CMTimeSubtract(&lhs, &rhs, &time2);
  *v16 = *(_OWORD *)&lhs.value;
  *(_QWORD *)(a1 + 144) = lhs.epoch;
  if ((*(_BYTE *)(a1 + 140) & 1) != 0)
    return 0;
  if (dword_1EE2A2A88)
  {
    LODWORD(time2.value) = 0;
    LOBYTE(type.value) = 0;
    v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v75 = time2.value;
    if (os_log_type_enabled(v74, type.value))
      v76 = v75;
    else
      v76 = v75 & 0xFFFFFFFE;
    if (v76)
    {
      v90 = DerivedStorage;
      v77 = *(_QWORD *)DerivedStorage;
      if (*(_QWORD *)DerivedStorage)
        v78 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v78 = "";
      v96 = v78;
      v79 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v80 = "";
      v81 = *(_QWORD *)(a1 + 16);
      lhs = *(CMTime *)(a1 + 192);
      v82 = CMTimeGetSeconds(&lhs);
      lhs = v101;
      v83 = CMTimeGetSeconds(&lhs);
      v84 = *(_QWORD *)(a1 + 64);
      v85 = v90 + 24 * *(unsigned __int8 *)(a1 + 180);
      v86 = *(_OWORD *)(v85 + 1200);
      lhs.epoch = *(_QWORD *)(v85 + 1216);
      *(_OWORD *)&lhs.value = v86;
      v87 = CMTimeGetSeconds(&lhs);
      LODWORD(rhs.value) = 136317442;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SetTrackStartTimeAndTimeOffset";
      LOWORD(rhs.flags) = 2048;
      *(_QWORD *)((char *)&rhs.flags + 2) = v77;
      HIWORD(rhs.epoch) = 2082;
      v103 = v96;
      v104 = 2048;
      v105 = v79;
      v106 = 2082;
      v107 = v80;
      v108 = 1024;
      v109 = v81;
      v110 = 2048;
      v111 = v82;
      v112 = 2048;
      v113 = v83;
      v114 = 1024;
      v115 = v84;
      v116 = 2048;
      v117 = v87;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 4294954433;
}

uint64_t fpfs_AdjustTime(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  uint64_t v4;
  CMTime v6;
  CMTime rhs;
  CMTime lhs;
  CMTime v9;
  CMTime v10;

  memset(&v10, 0, sizeof(v10));
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetPresentationTimeStamp(&lhs, a1);
  rhs = *(CMTime *)(a2 + 128);
  CMTimeAdd(&v9, &lhs, &rhs);
  rhs = v9;
  v4 = CMSampleBufferSetOutputPresentationTimeStamp(a1, &rhs);
  if (!(_DWORD)v4)
  {
    fpfs_GetEndOutputPresentationTimeStamp(a1, &v10);
    rhs = *(CMTime *)(a2 + 216);
    v6 = v10;
    if (CMTimeCompare(&rhs, &v6) < 0)
      *(CMTime *)(a2 + 216) = v10;
  }
  return v4;
}

uint64_t fpfs_RemoveDoNotDisplayFromBuffer(opaqueCMSampleBuffer *a1)
{
  fpfs_RemoveDoNotDisplay(a1);
  return 0;
}

double fpfs_GetTimeOffsetIntoSegment@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFDictionary *v5;
  double result;
  CMTime v7;
  CMTime lhs;
  CMTime v9;
  CMTime v10;

  v4 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  v5 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA4E68], 0);
  if (v5)
  {
    memset(&v10, 0, sizeof(v10));
    CMTimeMakeFromDictionary(&v10, v5);
    CMSampleBufferGetPresentationTimeStamp(&lhs, (CMSampleBufferRef)a1);
    v7 = v10;
    CMTimeSubtract(&v9, &lhs, &v7);
    result = *(double *)&v9.value;
    *(CMTime *)a2 = v9;
  }
  return result;
}

uint64_t fpfs_TimeShiftDiscontinuityDomain(uint64_t result, uint64_t a2, CMTime *a3)
{
  _QWORD *v3;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  opaqueCMSampleBuffer *Head;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  Float64 Seconds;
  Float64 v25;
  Float64 v26;
  Float64 v27;
  Float64 v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  const char *v35;
  const char *v36;
  CMTime v37;
  CMTime time;
  os_log_type_t type;
  unsigned int v40;
  CMTime v41;
  CMTime v42;
  CMTime rhs;
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  Float64 v52;
  __int16 v53;
  Float64 v54;
  __int16 v55;
  Float64 v56;
  __int16 v57;
  Float64 v58;
  __int16 v59;
  Float64 v60;
  CMTime lhs;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(result + 1040);
  if (v3)
  {
    v6 = (uint64_t *)result;
    v7 = &sFigCDSNodeProtocolID;
    v34 = (uint64_t *)result;
    do
    {
      if (v3[8] == a2)
      {
        v8 = *((_DWORD *)v3 + 38);
        if (v8 > 3 || v8 == 1)
        {
          if (*((_DWORD *)v7 + 674))
          {
            LODWORD(v42.value) = 0;
            LOBYTE(v41.value) = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = v42.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v41.value))
              v18 = value;
            else
              v18 = value & 0xFFFFFFFE;
            if (v18)
            {
              v19 = *v6;
              if (*v6)
                v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v20 = "";
              v30 = *v3;
              if (*v3)
                v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v31 = "";
              v32 = v3[2];
              v33 = *((_DWORD *)v3 + 38);
              LODWORD(rhs.value) = 136316674;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_TimeShiftDiscontinuityDomain";
              LOWORD(rhs.flags) = 2048;
              *(_QWORD *)((char *)&rhs.flags + 2) = v19;
              HIWORD(rhs.epoch) = 2082;
              v44 = v20;
              v45 = 2048;
              v46 = v30;
              v47 = 2082;
              v48 = v31;
              v49 = 1024;
              v50 = v32;
              v51 = 1024;
              LODWORD(v52) = v33;
              _os_log_send_and_compose_impl();
              v6 = v34;
            }
            result = fig_log_call_emit_and_clean_up_after_send_and_compose();
            v7 = &sFigCDSNodeProtocolID;
          }
        }
        else
        {
          Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead((CMBufferQueueRef)v3[9]);
          memset(&v42, 0, sizeof(v42));
          lhs = *(CMTime *)(v3 + 16);
          rhs = *a3;
          CMTimeAdd(&v42, &lhs, &rhs);
          lhs = *(CMTime *)&v6[3 * *((unsigned __int8 *)v3 + 180) + 31];
          rhs = *(CMTime *)(v3 + 16);
          result = CMTimeCompare(&lhs, &rhs);
          if (!(_DWORD)result)
            *(CMTime *)&v6[3 * *((unsigned __int8 *)v3 + 180) + 31] = v42;
          *(CMTime *)(v3 + 16) = v42;
          if (Head)
          {
            memset(&v41, 0, sizeof(v41));
            CMSampleBufferGetOutputPresentationTimeStamp(&v41, Head);
            if (*((_DWORD *)v7 + 674))
            {
              v40 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v12 = v40;
              if (os_log_type_enabled(v11, type))
                v13 = v12;
              else
                v13 = v12 & 0xFFFFFFFE;
              if (v13)
              {
                v14 = *v6;
                if (*v6)
                  v15 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                else
                  v15 = "";
                v36 = v15;
                v21 = *v3;
                if (*v3)
                  v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                else
                  v22 = "";
                v35 = v22;
                v23 = v3[2];
                lhs = *a3;
                Seconds = CMTimeGetSeconds(&lhs);
                lhs = v41;
                v25 = CMTimeGetSeconds(&lhs);
                lhs = v41;
                rhs = *a3;
                CMTimeAdd(&time, &lhs, &rhs);
                v26 = CMTimeGetSeconds(&time);
                lhs = v42;
                rhs = *a3;
                CMTimeSubtract(&v37, &lhs, &rhs);
                v27 = CMTimeGetSeconds(&v37);
                lhs = v42;
                v28 = CMTimeGetSeconds(&lhs);
                LODWORD(rhs.value) = 136317698;
                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_TimeShiftDiscontinuityDomain";
                LOWORD(rhs.flags) = 2048;
                *(_QWORD *)((char *)&rhs.flags + 2) = v14;
                HIWORD(rhs.epoch) = 2082;
                v44 = v36;
                v45 = 2048;
                v46 = v21;
                v47 = 2082;
                v48 = v35;
                v49 = 1024;
                v50 = v23;
                v51 = 2048;
                v52 = Seconds;
                v53 = 2048;
                v54 = v25;
                v55 = 2048;
                v56 = v26;
                v57 = 2048;
                v58 = v27;
                v59 = 2048;
                v60 = v28;
                _os_log_send_and_compose_impl();
                v6 = v34;
                v7 = &sFigCDSNodeProtocolID;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v29 = MEMORY[0x1E0CA2E68];
            *(_OWORD *)(v3 + 27) = *MEMORY[0x1E0CA2E68];
            v3[29] = *(_QWORD *)(v29 + 16);
            result = CMBufferQueueCallForEachBuffer((CMBufferQueueRef)v3[9], (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_AdjustTime, v3);
          }
        }
      }
      v3 = (_QWORD *)v3[1];
    }
    while (v3);
  }
  return result;
}

__CFDictionary *fpfs_CreateCurrentItemDidChangeNotificationPayloadWithProperties(const void *a1, uint64_t a2, const void *a3, int a4, int a5, int a6, int a7, int a8)
{
  __CFDictionary *NotificationPayloadForProperties;
  __CFDictionary *v10;

  NotificationPayloadForProperties = (__CFDictionary *)fpfs_CreateNotificationPayloadForProperties(a1, a2, (int)a3, a4, a5, a6, a7, a8, CFSTR("CurrentDuration"), (uint64_t)CFSTR("VideoSlotArray"));
  v10 = NotificationPayloadForProperties;
  if (a3 && NotificationPayloadForProperties)
    CFDictionarySetValue(NotificationPayloadForProperties, CFSTR("ReasonForCurrentItemDidChange"), a3);
  return v10;
}

uint64_t FigAudioSessionSetMXSessionProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  if (!a1)
    return 4294948075;
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v6)
    return 4294948075;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 56);
  if (v7)
    return v7(a1, a2, a3);
  else
    return 4294948071;
}

uint64_t fpfs_applySoftwareVolumeToTrack(uint64_t a1, int a2, float a3, float a4)
{
  const __CFString *v7;
  char v8;
  const __CFString *v9;
  __CFString **v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v20;
  float valuePtr;

  v20 = a4;
  valuePtr = a3;
  CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(a1 + 96))
    return 0;
  v7 = CFSTR("SoftwareVolume1RampDuration");
  if (a4 < 0.0)
    v20 = 0.0;
  if (a2 == 5)
  {
    v10 = kFigAudioRenderPipelineProperty_SoftwareVolume5;
LABEL_10:
    v9 = *v10;
    v8 = 1;
    goto LABEL_12;
  }
  if (a2 == 3)
  {
    v10 = kFigAudioRenderPipelineProperty_SoftwareVolume3;
    goto LABEL_10;
  }
  v8 = 0;
  if (a2 == 2)
  {
    v9 = CFSTR("SoftwareVolume2");
    v7 = CFSTR("SoftwareVolume2RampDuration");
  }
  else
  {
    v9 = CFSTR("SoftwareVolume1");
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 190) && CFEqual(v9, CFSTR("SoftwareVolume1")))
    valuePtr = 0.0;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  if (!v12)
    return FigSignalErrorAt();
  v13 = v12;
  if ((v8 & 1) != 0)
  {
    v14 = 0;
LABEL_21:
    v18 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(a1 + 96), (uint64_t)v9, (uint64_t)v13);
    if (v18 == -4)
      v17 = 0;
    else
      v17 = v18;
    if (!v14)
      goto LABEL_26;
    goto LABEL_25;
  }
  v15 = CFNumberCreate(v11, kCFNumberFloatType, &v20);
  if (!v15)
  {
    v17 = FigSignalErrorAt();
    goto LABEL_26;
  }
  v14 = v15;
  v16 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(a1 + 96), (uint64_t)v7, (uint64_t)v15);
  if (!(_DWORD)v16)
    goto LABEL_21;
  v17 = v16;
  if ((_DWORD)v16 == -4)
    goto LABEL_21;
LABEL_25:
  CFRelease(v14);
LABEL_26:
  CFRelease(v13);
  return v17;
}

uint64_t fpfsi_isPlaying4k()
{
  uint64_t result;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1696);
  if (result)
    return FigAlternateIs4k(result);
  return result;
}

uint64_t fpfs_EnterBestEffortTrickplayMode(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage;
  __int128 v7;
  CMTimeEpoch v8;
  uint64_t v9;
  CMTimeFlags flags;
  __int16 v11;
  CMTimeEpoch epoch;
  int32_t v13;
  int32_t v14;
  CMTimebaseRef *v15;
  OpaqueCMTimebase *v16;
  const __CFAllocator *AllocatorForMedia;
  OpaqueCMClock *HostTimeClock;
  __int128 v20;
  CMTime time;
  CMTime v22;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTimeValue v26;
  CMTimeScale v27;
  CMTimeFlags v28;
  uint64_t v29;
  CMTime v30;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v30.value = *MEMORY[0x1E0CA2E18];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v30.epoch = v8;
  if (a3 == 0.0)
    return 0;
  v9 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 928))
    return 0;
  v20 = v7;
  fpfsi_getSeekableTimeRange(a2, &lhs);
  value = lhs.value;
  flags = lhs.flags;
  timescale = lhs.timescale;
  if ((lhs.flags & 1) == 0 || (v28 & 1) == 0 || v29 || v26 < 0)
    return (__int16)FigSignalErrorAt();
  epoch = lhs.epoch;
  lhs.value = value;
  lhs.timescale = timescale;
  rhs.value = v26;
  rhs.timescale = v27;
  rhs.flags = v28;
  rhs.epoch = 0;
  CMTimeAdd(&v30, &lhs, &rhs);
  fpfs_GetTime(v9, (uint64_t)&time1);
  lhs.value = value;
  lhs.timescale = timescale;
  lhs.flags = flags;
  lhs.epoch = epoch;
  v13 = CMTimeCompare(&time1, &lhs);
  if (a3 < 0.0 && v13 < 1)
    return 0;
  fpfs_GetTime(v9, (uint64_t)&v22);
  lhs = v30;
  v14 = CMTimeCompare(&v22, &lhs);
  if (a3 > 0.0 && (v14 & 0x80000000) == 0)
    return 0;
  *(_OWORD *)&lhs.value = v20;
  lhs.epoch = v8;
  *(_OWORD *)&rhs.value = v20;
  rhs.epoch = v8;
  fpfs_setRateInternal(a1, a2, &lhs, &rhs, 0.0);
  v15 = (CMTimebaseRef *)(v9 + 2960);
  v16 = *(OpaqueCMTimebase **)(v9 + 2960);
  if (!v16)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    HostTimeClock = CMClockGetHostTimeClock();
    v11 = CMTimebaseCreateWithSourceClock(AllocatorForMedia, HostTimeClock, (CMTimebaseRef *)(v9 + 2960));
    if (v11)
      return v11;
    v16 = *v15;
  }
  CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v9 + 576));
  v11 = CMTimebaseSetTime(v16, &time);
  if (!v11)
  {
    v11 = CMTimebaseSetRate(*v15, a3);
    if (!v11)
    {
      *(_QWORD *)(v9 + 2912) = FigGetUpTimeNanoseconds();
      return (__int16)fpfsi_HandleNextBestEffortTrickplayModeSeek();
    }
  }
  return v11;
}

void fpfs_PostNotificationFromDispatch(__CFString **a1)
{
  unsigned int v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString *v4;
  __CFString *v5;

  if (*a1 == CFSTR("PlayableRangeChanged"))
    v2 = 3;
  else
    v2 = 1;
  if (v2 <= dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v4 = a1[1];
  if (v4)
    CFRelease(v4);
  v5 = a1[2];
  if (v5)
    CFRelease(v5);
  free(a1);
}

void fpfsi_ResetPlaybackItem(const __CFArray *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _QWORD *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  __int128 *v20;
  opaqueCMBufferQueue *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  uint64_t *v38;
  uint64_t v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v49 = CMBaseObjectGetDerivedStorage();
  v5 = MEMORY[0x1E0CA2E18];
  v50 = *MEMORY[0x1E0CA2E18];
  v54 = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v55 = v6;
  fpfs_tearDownManifoldsAndStream();
  for (i = 0; i != 3; ++i)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      v10 = v9;
      StoreCurrentManifold(DerivedStorage, i, v8, 0);
      v11 = DerivedStorage + i + 3 * v8;
      *(_BYTE *)(v11 + 471) = 0;
      v12 = DerivedStorage + 24 * v8 + 8 * i;
      v15 = *(const void **)(v12 + 176);
      v14 = (_QWORD *)(v12 + 176);
      v13 = v15;
      v14[118] = 0;
      if (v15)
      {
        CFRelease(v13);
        *v14 = 0;
      }
      v9 = 0;
      *(_BYTE *)(v11 + 512) = 0;
      v8 = 1;
    }
    while ((v10 & 1) != 0);
    v16 = DerivedStorage + 24 * i;
    *(_OWORD *)(v16 + 248) = v50;
    *(_QWORD *)(v16 + 264) = v6;
  }
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 1624));
  *(_OWORD *)(DerivedStorage + 1632) = v50;
  *(_QWORD *)(DerivedStorage + 1648) = v6;
  *(_OWORD *)(DerivedStorage + 1656) = v50;
  *(_QWORD *)(DerivedStorage + 1672) = v6;
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 2296));
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 2328));
  fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();
  *(_OWORD *)(DerivedStorage + 224) = v50;
  *(_QWORD *)(DerivedStorage + 240) = v6;
  fpfsi_setLastSeekTimeSet(DerivedStorage, v5);
  *(_OWORD *)(DerivedStorage + 408) = v50;
  *(_QWORD *)(DerivedStorage + 424) = v6;
  *(_BYTE *)(DerivedStorage + 460) = 0;
  *(_BYTE *)(DerivedStorage + 462) = 0;
  *(_BYTE *)(DerivedStorage + 464) = 0;
  *(_WORD *)(DerivedStorage + 468) = 0;
  v17 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v17 + 470))
    *(_BYTE *)(v17 + 470) = 0;
  *(_OWORD *)(DerivedStorage + 480) = v50;
  *(_QWORD *)(DerivedStorage + 496) = v6;
  *(_DWORD *)(DerivedStorage + 524) = 0;
  fpfsi_setPlaybackMonitorOkayToAttemptSwitchUp(DerivedStorage, 0);
  fpfsi_removeLayerSync();
  v18 = CMBaseObjectGetDerivedStorage();
  fpfs_ClearRenderChains(a1, 255);
  *(_QWORD *)(v18 + 772) = 0;
  fpfs_cleanupAllImageQueues(a1, a2);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v19 = *(const void **)(DerivedStorage + 832);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 832) = 0;
  }
  v20 = (__int128 *)MEMORY[0x1E0CA2E18];
  fpfsi_setItemRateTimebaseAndAnchor(0.0, (uint64_t)a1, 1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
  v21 = *(opaqueCMBufferQueue **)(DerivedStorage + 848);
  if (v21)
    CMBufferQueueReset(v21);
  v22 = *(_QWORD *)(DerivedStorage + 1040);
  if (v22)
  {
    while (1)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
        break;
      v24 = *(_QWORD *)(v23 + 16);
      fpfs_DeleteTrack(a1);
      v22 = v23;
      if ((v24 & 0x8000000000000000) == 0)
      {
        if (!*(_QWORD *)(DerivedStorage + 1040))
          goto LABEL_24;
        v22 = *(_QWORD *)(DerivedStorage + 1040);
        while (*(_QWORD *)(v22 + 16) != v24)
        {
          v22 = *(_QWORD *)(v22 + 8);
          if (!v22)
          {
            v22 = *(_QWORD *)(DerivedStorage + 1040);
            break;
          }
        }
      }
      if (!*(_QWORD *)(DerivedStorage + 1040))
        goto LABEL_24;
    }
    fpfs_DeleteTrack(a1);
  }
LABEL_24:
  v25 = *(_QWORD *)(DerivedStorage + 1056);
  if (v25)
  {
    do
    {
      v26 = *(_QWORD *)(v25 + 8);
      fpfs_DeleteTrack(a1);
      if (!v26)
        break;
      v25 = v26;
    }
    while (*(_QWORD *)(DerivedStorage + 1056));
  }
  fpfs_FreeDeadTracks((_QWORD *)DerivedStorage);
  if (fpfs_getNext(v49, 0) == a1)
    fpfs_enqueuePrerollWasCancelledNotificationIfNeeded(a1);
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v54);
  fpfs_EstablishTimebase(a1);
  *(_WORD *)(DerivedStorage + 592) = 256;
  *(_QWORD *)(DerivedStorage + 1096) = 1;
  *(_DWORD *)(DerivedStorage + 1088) = 1;
  *(_QWORD *)(DerivedStorage + 1104) = 0;
  *(_QWORD *)(DerivedStorage + 1168) = 0;
  *(_BYTE *)(DerivedStorage + 771) = 0;
  v27 = MEMORY[0x1E0CA2E68];
  v28 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)(DerivedStorage + 1176) = *MEMORY[0x1E0CA2E68];
  v29 = *(_QWORD *)(v27 + 16);
  *(_QWORD *)(DerivedStorage + 1192) = v29;
  v30 = *(_QWORD *)(DerivedStorage + 96);
  v52 = v28;
  v53 = v29;
  FigAlternatePlaybackBitrateMonitorSetPumpOffset(v30, (uint64_t)&v52);
  v31 = *v20;
  *(_OWORD *)(DerivedStorage + 1272) = *v20;
  v32 = *((_QWORD *)v20 + 2);
  *(_QWORD *)(DerivedStorage + 1288) = v32;
  *(_OWORD *)(DerivedStorage + 1296) = v31;
  *(_QWORD *)(DerivedStorage + 1312) = v32;
  *(_OWORD *)(DerivedStorage + 1320) = v31;
  *(_QWORD *)(DerivedStorage + 1336) = v32;
  *(_OWORD *)(DerivedStorage + 1488) = v54;
  *(_QWORD *)(DerivedStorage + 1504) = v55;
  *(_QWORD *)(DerivedStorage + 1528) = v32;
  *(_OWORD *)(DerivedStorage + 1512) = v31;
  *(_QWORD *)(DerivedStorage + 2320) = v32;
  *(_OWORD *)(DerivedStorage + 2304) = v31;
  *(_BYTE *)(DerivedStorage + 2872) = 0;
  *(_WORD *)(DerivedStorage + 2440) = 0;
  *(_OWORD *)(DerivedStorage + 3268) = v31;
  *(_QWORD *)(DerivedStorage + 3284) = v32;
  *(_OWORD *)(DerivedStorage + 3296) = 0u;
  *(_OWORD *)(DerivedStorage + 3312) = v31;
  *(_QWORD *)(DerivedStorage + 3328) = v32;
  *(_QWORD *)(DerivedStorage + 1544) = 0x4024000000000000;
  v51 = v31;
  *(_OWORD *)(DerivedStorage + 1560) = v31;
  *(_QWORD *)(DerivedStorage + 1576) = v32;
  v33 = *(const void **)(DerivedStorage + 1584);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(DerivedStorage + 1584) = 0;
  }
  v34 = *(const void **)(DerivedStorage + 1592);
  if (v34)
  {
    CFRelease(v34);
    *(_QWORD *)(DerivedStorage + 1592) = 0;
  }
  v35 = *(const void **)(DerivedStorage + 1600);
  if (v35)
  {
    CFRelease(v35);
    *(_QWORD *)(DerivedStorage + 1600) = 0;
  }
  v36 = *(const void **)(DerivedStorage + 1752);
  if (v36)
  {
    CFRelease(v36);
    *(_QWORD *)(DerivedStorage + 1752) = 0;
  }
  v37 = *(const void **)(DerivedStorage + 1760);
  if (v37)
  {
    CFRelease(v37);
    *(_QWORD *)(DerivedStorage + 1760) = 0;
  }
  v38 = *(uint64_t **)(DerivedStorage + 1608);
  if (v38)
  {
    do
    {
      v39 = *v38;
      fpfsi_RemoveDateEntry(DerivedStorage, v38);
      v38 = (uint64_t *)v39;
    }
    while (v39);
  }
  v40 = *(const void **)(DerivedStorage + 1696);
  if (v40)
  {
    CFRelease(v40);
    *(_QWORD *)(DerivedStorage + 1696) = 0;
  }
  v41 = *(const void **)(DerivedStorage + 1720);
  if (v41)
  {
    CFRelease(v41);
    *(_QWORD *)(DerivedStorage + 1720) = 0;
  }
  v42 = *(const void **)(DerivedStorage + 1704);
  if (v42)
  {
    CFRelease(v42);
    *(_QWORD *)(DerivedStorage + 1704) = 0;
  }
  v43 = *(const void **)(DerivedStorage + 1736);
  if (v43)
  {
    CFRelease(v43);
    *(_QWORD *)(DerivedStorage + 1736) = 0;
  }
  v44 = *(const void **)(DerivedStorage + 2472);
  if (v44)
  {
    CFRelease(v44);
    *(_QWORD *)(DerivedStorage + 2472) = 0;
  }
  v45 = *(const void **)(DerivedStorage + 728);
  if (v45)
  {
    CFRelease(v45);
    *(_QWORD *)(DerivedStorage + 728) = 0;
  }
  v46 = *(const void **)(DerivedStorage + 2840);
  if (v46)
  {
    CFRelease(v46);
    *(_QWORD *)(DerivedStorage + 2840) = 0;
  }
  *(_DWORD *)(DerivedStorage + 1880) = 0;
  *(_QWORD *)(DerivedStorage + 1920) = 0;
  v47 = *(const void **)(DerivedStorage + 2224);
  if (v47)
  {
    CFRelease(v47);
    *(_QWORD *)(DerivedStorage + 2224) = 0;
  }
  *(_QWORD *)(DerivedStorage + 2336) = 0;
  *(_DWORD *)(DerivedStorage + 2968) = 0;
  *(_BYTE *)(DerivedStorage + 3057) = 0;
  *(_OWORD *)(DerivedStorage + 608) = v51;
  *(_QWORD *)(DerivedStorage + 624) = v32;
  v48 = *(const void **)(DerivedStorage + 3384);
  if (v48)
  {
    CFRelease(v48);
    *(_QWORD *)(DerivedStorage + 3384) = 0;
  }
}

void fpfs_ResetAudioHardwareFormat(uint64_t a1)
{
  _QWORD *DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  const void *v10;
  const void *v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (DerivedStorage[67] && !DerivedStorage[63])
  {
    if (DerivedStorage[68])
    {
      v4 = *MEMORY[0x1E0D49058];
      if (!FigCFEqual())
      {
        v5 = v3[67];
        if (v5)
        {
          v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v6)
          {
            v7 = *(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 56);
            if (v7)
              v7(v5, *MEMORY[0x1E0D49A40], v4);
          }
        }
        if (!dword_1EE2A2A88)
          goto LABEL_13;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (dword_1EE2A2A88)
    {
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_13:
    fpfs_setPreferredNumberOfAudioOutputChannels(a1, 0, 0);
  }
  v10 = (const void *)v3[68];
  if (v10)
  {
    CFRelease(v10);
    v3[68] = 0;
  }
  v11 = (const void *)v3[69];
  if (v11)
  {
    CFRelease(v11);
    v3[69] = 0;
  }
  *((_BYTE *)v3 + 560) = 0;
}

uint64_t fpfs_ensureTransaction(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t AllocatorForMedia;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = result;
    if (!*(_QWORD *)(result + 816))
    {
      AllocatorForMedia = FigGetAllocatorForMedia();
      result = FigDeferredTransactionCreate(AllocatorForMedia, a2);
      *(_QWORD *)(v4 + 816) = *a2;
    }
  }
  return result;
}

uint64_t fpfsi_removeLayerSync()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  const void *v2;
  uint64_t result;
  uint64_t v4;
  const void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = (const void *)DerivedStorage[86];
  if (v2)
  {
    FigSyncMomentSourceDestroy(v2);
    DerivedStorage[86] = 0;
  }
  result = DerivedStorage[84];
  if (result)
  {
    MEMORY[0x19402EEEC]();
    v4 = DerivedStorage[85];
    if (v4)
    {
      FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v4, 0, *(const void **)(v1 + 816));
      v5 = (const void *)DerivedStorage[85];
      if (v5)
      {
        CFRelease(v5);
        DerivedStorage[85] = 0;
      }
    }
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t fpfs_commitTransaction(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 816) == a2)
    *(_QWORD *)(DerivedStorage + 816) = 0;
  return FigDeferredTransactionCommit(a2);
}

uint64_t fpfs_cleanupAllImageQueues(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  const __CFArray *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, CFArrayRef *, _QWORD);
  uint64_t result;
  CFArrayRef theArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = (CFTypeRef *)(DerivedStorage + 656);
  v7 = *(_QWORD *)(DerivedStorage + 656);
  v8 = *(const __CFArray **)(DerivedStorage + 664);
  if (a2 && *(uint64_t *)(v5 + 400) >= 1)
  {
    if (!v8 || CFArrayGetCount(v8) < 1)
      goto LABEL_14;
    if (!*(_BYTE *)(DerivedStorage + 866) && !*(_QWORD *)(v5 + 416))
    {
      *(_OWORD *)(v5 + 416) = *(_OWORD *)v6;
      *(_QWORD *)(DerivedStorage + 664) = 0;
      goto LABEL_13;
    }
    v8 = *(const __CFArray **)(DerivedStorage + 664);
    goto LABEL_9;
  }
  if (v8)
  {
LABEL_9:
    FPSupport_DeleteCASlotsInArray(v8);
    v9 = *(const void **)(DerivedStorage + 664);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 664) = 0;
    }
  }
  if (!*v6)
    goto LABEL_14;
  CFRelease(*v6);
LABEL_13:
  *v6 = 0;
LABEL_14:
  v10 = CMBaseObjectGetDerivedStorage();
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  fpfsi_copyCurrentImageQueueArrayAndOptions((uint64_t)a1, (uint64_t *)&theArray);
  if (theArray && CFArrayGetCount(theArray) || (v13 = *(_QWORD *)(v12 + 832)) == 0)
  {
LABEL_23:
    if (theArray)
      CFRelease(theArray);
    goto LABEL_25;
  }
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
    v13 = *(_QWORD *)(v12 + 832);
  }
  v14 = *(void (**)(uint64_t, CFArrayRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v14)
    v14(v13, &theArray, 0);
  if (theArray)
  {
    CFArrayGetCount(theArray);
    goto LABEL_23;
  }
LABEL_25:
  if (*(_BYTE *)(v11 + 896))
  {
    result = fpfsi_updateOutputsForAllAggregateVideoDestinations((uint64_t)a1, 0);
  }
  else
  {
    result = *(_QWORD *)(v10 + 720);
    if (result)
      result = FigImageQueueTableRemoveAllValues(result);
  }
  if (v7)
    return fpfs_EnqueueNotificationWithoutLocking(*(_QWORD *)DerivedStorage, CFSTR("DidRemoveImageQueue"), a1, 0);
  return result;
}

uint64_t fpfs_tearDownManifoldsAndStream()
{
  uint64_t DerivedStorage;
  uint64_t i;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_haltStream();
  for (i = 0; i != 3; ++i)
  {
    v2 = 0;
    v3 = 1;
    do
    {
      v4 = v3;
      result = *(_QWORD *)(DerivedStorage + 16 * i + 8 * v2 + 992);
      if (result)
      {
        result = FigManifoldGetFigBaseObject(result);
        if (result)
        {
          v6 = result;
          result = CMBaseObjectGetVTable();
          v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
          if (v7)
            result = v7(v6);
        }
      }
      v3 = 0;
      v2 = 1;
    }
    while ((v4 & 1) != 0);
  }
  return result;
}

void fpfs_sendEmptyConfigurationToEachVideoTarget(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  const __CFString *v6;
  const __CFAllocator *AllocatorForMedia;
  BOOL v8;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  CFTypeRef v12;
  unsigned int (*v13)(const void *, CFTypeRef);
  CFTypeRef cf;
  CFTypeRef v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v16 = 0;
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  v6 = *(const __CFString **)(DerivedStorage + 80);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (fpfs_createDataChannelConfigurationAndSetIdentifiers(a1, v6, 0, 0, 0, AllocatorForMedia, (uint64_t *)&v16, (CFMutableStringRef *)&cf))v8 = 1;
  else
    v8 = Count < 1;
  if (!v8)
  {
    v9 = 0;
    v10 = Count - 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v9);
      v12 = v16;
      v13 = *(unsigned int (**)(const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (!v13)
        break;
    }
    while (!v13(ValueAtIndex, v12) && v10 != v9++);
  }
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
}

uint64_t fpfs_HaveHDRItem()
{
  uint64_t DerivedStorage;
  CFIndex i;
  const __CFArray *Count;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 80) && fpfsi_isPlayingHDR())
    return 1;
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 72);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 72), i);
    if (fpfsi_isPlayingHDR())
      return 1;
  }
  return 0;
}

void fpfs_PostRemovedFromPlayQueueNotifications(const void *a1, const void *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v5;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 467))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v5 = CFDictionaryCreate(AllocatorForMedia, (const void **)kFigPlaybackItemParameter_AsRequested, MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    fpfs_EnqueueNotification(a1, CFSTR("ItemWasRemovedFromPlayQueue"), a2, v5);
  }
  fpfs_EnqueueNotification(a1, CFSTR("ItemWasRemovedFromPlayQueue"), a2, 0);
}

void fpfs_FreeDeadTracks(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFDictionaryRef theDict;
  int valuePtr;

  v1 = (_QWORD *)a1[134];
  if (v1)
  {
    v3 = a1 + 134;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v5 = v1[1];
      *v3 = v5;
      if (!v5)
        a1[135] = v3;
      v6 = a1[21];
      valuePtr = v1[2];
      theDict = 0;
      if (v6)
      {
        FigPropertyStorageCopyValue(v6, (uint64_t)CFSTR("TrackPropertyStorages"), &theDict);
        if (theDict)
        {
          AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, theDict);
          if (MutableCopy)
          {
            v9 = MutableCopy;
            v10 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
            if (v10)
            {
              v11 = v10;
              CFDictionaryRemoveValue(v9, v10);
              FigPropertyStorageSetValue(v6, CFSTR("TrackPropertyStorages"), v9);
              CFRelease(v11);
            }
            CFRelease(v9);
          }
          if (theDict)
            CFRelease(theDict);
        }
      }
      fpfs_FreeTrack(v1);
      v1 = (_QWORD *)*v3;
    }
    while (*v3);
  }
}

void fpfs_setPreferredNumberOfAudioOutputChannels(uint64_t a1, const opaqueCMFormatDescription *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  int AudioChannelCount;
  int AudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFNumberRef v10;
  CFNumberRef v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, _QWORD, CFNumberRef);
  const void *v16;
  char v17;
  NSObject *v18;
  const void *v19;
  int valuePtr;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 504))
  {
    v6 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 536))
    {
      AudioChannelCount = 2;
      valuePtr = 2;
      AudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession = fpfs_GetAudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession();
      if (a2)
      {
        AudioChannelCount = fpfs_GetAudioChannelCount(a2);
        valuePtr = AudioChannelCount;
      }
      if (AudioChannelCount > AudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession)
      {
        if (dword_1EE2A2A88)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        valuePtr = AudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession;
      }
      v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      if (v10)
      {
        v11 = v10;
        if (!a3 || *(_DWORD *)(v6 + 32) == 2)
        {
          v13 = *(_QWORD *)(v6 + 536);
          if (!v13)
            goto LABEL_26;
          v14 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (!v14)
            goto LABEL_26;
          v15 = *(unsigned int (**)(uint64_t, _QWORD, CFNumberRef))(v14 + 56);
          if (!v15 || v15(v13, *MEMORY[0x1E0D49AC0], v11))
            goto LABEL_26;
          v16 = *(const void **)(v6 + 552);
          *(_QWORD *)(v6 + 552) = v11;
          CFRetain(v11);
          if (v16)
            CFRelease(v16);
          v17 = dword_1EE2A2A88;
          if (dword_1EE2A2A88)
          {
            v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v17 = 0;
          }
        }
        else
        {
          if (dword_1EE2A2A88)
          {
            v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v19 = *(const void **)(v6 + 552);
          *(_QWORD *)(v6 + 552) = v11;
          CFRetain(v11);
          if (v19)
            CFRelease(v19);
          v17 = 1;
        }
        *(_BYTE *)(v6 + 560) = v17;
LABEL_26:
        CFRelease(v11);
      }
    }
  }
}

uint64_t fpfsi_copyPerformanceDictionary(uint64_t a1, const __CFAllocator *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFAllocator *v8;
  __CFArray *Mutable;
  __CFArray *MutableCopy;
  const __CFAllocator *AllocatorForMedia;
  uint64_t RenderingTrackofType;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  int v15;
  void *v16;
  const __CFAllocator *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  int v23;
  void *v24;
  const __CFAllocator *v26;
  CFMutableDictionaryRef v27;
  __CFDictionary *v28;
  int AudioFormatDescriptionSpatializationEligibility;
  const void *SInt32;
  double *v31;
  double *v32;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v35;
  uint64_t v37;
  void *value;

  v4 = a1;
  value = 0;
  if (!a1)
    goto LABEL_69;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v37 = 0;
  v7 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 1888))
  {
    Mutable = 0;
LABEL_7:
    if (*(_QWORD *)(DerivedStorage + 1896))
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, *(CFArrayRef *)(DerivedStorage + 1896));
      if (!MutableCopy)
        goto LABEL_39;
    }
    else
    {
      MutableCopy = 0;
    }
    RenderingTrackofType = fpfs_FirstRenderingTrackofType(v4, 1986618469);
    if (RenderingTrackofType)
    {
      FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(RenderingTrackofType + 96) + 32));
      v14 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
      if (v14)
      {
        v15 = v14(FigBaseObject, CFSTR("PerformanceDictionary"), a2, &value);
        v16 = value;
        if (!v15 && value != 0)
        {
          if (!Mutable)
          {
            v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
            Mutable = CFArrayCreateMutable(v18, 0, MEMORY[0x1E0C9B378]);
            if (!Mutable)
              goto LABEL_39;
            v16 = value;
          }
          CFArrayAppendValue(Mutable, v16);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
      }
    }
    v19 = fpfs_FirstRenderingTrackofType(v4, 1936684398);
    if (v19)
    {
      v20 = (uint64_t *)v19;
      v21 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(v19 + 96) + 32));
      v22 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
      if (v22)
      {
        v23 = v22(v21, CFSTR("PerformanceDictionary"), a2, &value);
        v24 = value;
        if (!v23 && value != 0)
        {
          if (!MutableCopy)
          {
            v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
            MutableCopy = CFArrayCreateMutable(v26, 0, MEMORY[0x1E0C9B378]);
            if (!MutableCopy)
              goto LABEL_39;
            v24 = value;
          }
          CFArrayAppendValue(MutableCopy, v24);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
      }
      v27 = CFDictionaryCreateMutable(a2, 20, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v27)
      {
        v28 = v27;
        AudioFormatDescriptionSpatializationEligibility = FPSupport_GetAudioFormatDescriptionSpatializationEligibility(v20[5], 0);
        if (AudioFormatDescriptionSpatializationEligibility == 1)
        {
          if (!fpfsi_IsSpatializationAllowed(*v20))
            fpfsi_IsSpatializationAllowed(*v20);
        }
        else if (AudioFormatDescriptionSpatializationEligibility != 2
               || !fpfsi_IsSpatializationAllowed(*v20))
        {
          FigCFDictionarySetValue();
          goto LABEL_45;
        }
        SInt32 = (const void *)FigCFNumberCreateSInt32();
        FigCFDictionarySetValue();
        if (SInt32)
          CFRelease(SInt32);
LABEL_45:
        if (Mutable)
          CFDictionarySetValue(v28, CFSTR("VideoTracks"), Mutable);
        if (MutableCopy)
          CFDictionarySetValue(v28, CFSTR("AudioTracks"), MutableCopy);
        if (*(_BYTE *)(v7 + 462))
          v31 = (double *)(v7 + 464);
        else
          v31 = (double *)(DerivedStorage + 744);
        if (*(_BYTE *)(v7 + 462))
          v32 = (double *)(v7 + 472);
        else
          v32 = (double *)(DerivedStorage + 752);
        if (*v31 != *MEMORY[0x1E0C9D820] || *v32 != *(double *)(MEMORY[0x1E0C9D820] + 8))
          FigCFDictionarySetCGSize();
        DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 2480));
        if (DictionaryRepresentation)
        {
          v35 = DictionaryRepresentation;
          FigCFDictionarySetValue();
          CFRelease(v35);
        }
        fpfsi_GetDimensions(v4, (float *)&v37 + 1, (float *)&v37);
      }
    }
    else
    {
      v28 = CFDictionaryCreateMutable(a2, 20, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v28)
        goto LABEL_45;
    }
LABEL_39:
    v4 = FigSignalErrorAt();
    goto LABEL_63;
  }
  v8 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutableCopy(v8, 0, *(CFArrayRef *)(DerivedStorage + 1888));
  if (Mutable)
    goto LABEL_7;
  v4 = FigSignalErrorAt();
  MutableCopy = 0;
LABEL_63:
  if (value)
  {
    CFRelease(value);
    value = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (MutableCopy)
    CFRelease(MutableCopy);
LABEL_69:
  *a3 = 0;
  return v4;
}

uint64_t fpfsi_setItemRateTimebaseAndAnchor(float a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  OpaqueCMTimebase *v11;
  uint64_t result;
  CMTime v13;
  CMTime timebaseTime;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = DerivedStorage;
  if (!a3)
    goto LABEL_6;
  v11 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
  if (!v11)
    goto LABEL_6;
  if ((*(_BYTE *)(a4 + 12) & 1) == 0 || (*(_BYTE *)(a5 + 12) & 1) == 0)
  {
    timebaseTime = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v13 = timebaseTime;
    result = CMTimebaseSetRateAndAnchorTimeWithFlags();
    if ((_DWORD)result)
      return result;
    goto LABEL_6;
  }
  timebaseTime = *(CMTime *)a4;
  v13 = *(CMTime *)a5;
  result = CMTimebaseSetRateAndAnchorTime(v11, a1, &timebaseTime, &v13);
  if (!(_DWORD)result)
  {
LABEL_6:
    *(float *)(v10 + 840) = a1;
    fpfsi_updateMaxPlayThroughTime();
    return 0;
  }
  return result;
}

uint64_t fpfsi_updateOutputsForAllAggregateVideoDestinations(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 1040);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (*(_DWORD *)(v4 + 32) == 1986618469)
      {
        v7 = *(_QWORD *)(v4 + 88);
        if (!v7)
          break;
        if (v5)
          v6 = *(_QWORD *)(v5 + 88);
        v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v8)
          return 4294954514;
        result = v8(v7, v6, a2);
        v5 = v4;
        if ((_DWORD)result)
          return result;
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
    if (v5)
      return 0;
  }
  v10 = *(_QWORD *)(DerivedStorage + 832);
  if (v10)
  {
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v11)
      v11(v10, 0, a2);
  }
  return 0;
}

uint64_t fpfs_createDataChannelConfigurationAndSetIdentifiers(uint64_t a1, CFStringRef a2, CFMutableStringRef a3, uint64_t a4, uint64_t a5, const __CFAllocator *a6, uint64_t *a7, CFMutableStringRef *a8)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Mutable;
  CFStringRef v17;
  uint64_t v18;
  uint64_t length;
  uint64_t (*v20)(uint64_t, CFStringRef *);
  uint64_t v21;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, CFStringRef *);
  uint64_t v25;
  CFMutableStringRef *v27;
  CFStringRef v28;
  CFStringRef appendedString;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v28 = 0;
  appendedString = 0;
  Mutable = CFDictionaryCreateMutable(a6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = CFStringCreateWithCString(a6, (const char *)(DerivedStorage + 824), 0x600u);
  FigCFDictionarySetValue();
  if (a2)
  {
    v18 = CMBaseObjectGetDerivedStorage();
    a2 = CFStringCreateWithCString(a6, (const char *)(v18 + 3072), 0x600u);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  if (a3)
  {
    length = a3[2].length;
    if (!length)
      goto LABEL_18;
    v20 = *(uint64_t (**)(uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v20)
    {
      a3 = 0;
LABEL_35:
      v23 = 4294954514;
      goto LABEL_21;
    }
    v27 = a8;
    v21 = v20(length, &appendedString);
    if ((_DWORD)v21)
    {
      v23 = v21;
      a3 = 0;
      goto LABEL_21;
    }
    if (!appendedString)
      goto LABEL_18;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    a3 = CFStringCreateMutable(AllocatorForMedia, 0);
    CFStringAppend(a3, appendedString);
    if (a5 >= 1)
    {
      do
      {
        v23 = *(_QWORD *)(*(_QWORD *)a4 + 88);
        if (!v23)
          goto LABEL_21;
        v24 = *(uint64_t (**)(uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v24)
          goto LABEL_35;
        v25 = v24(v23, &v28);
        if ((_DWORD)v25)
          goto LABEL_20;
        CFStringAppend(a3, CFSTR("/"));
        CFStringAppend(a3, v28);
        if (v28)
        {
          CFRelease(v28);
          v28 = 0;
        }
        a4 += 8;
      }
      while (--a5);
    }
    if (a3)
    {
      FigCFDictionarySetValue();
      if (v27)
      {
        *v27 = a3;
LABEL_18:
        a3 = 0;
      }
    }
  }
  v25 = FigDataChannelConfigurationCreate(a6, Mutable, a7);
LABEL_20:
  v23 = v25;
LABEL_21:
  if (Mutable)
    CFRelease(Mutable);
  if (v17)
    CFRelease(v17);
  if (a2)
    CFRelease(a2);
  if (a3)
    CFRelease(a3);
  if (appendedString)
    CFRelease(appendedString);
  if (v28)
    CFRelease(v28);
  return v23;
}

uint64_t fpfsi_isPlayingHDR()
{
  uint64_t result;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1696);
  if (result)
    return FigAlternateGetVideoRange(result) > 1;
  return result;
}

CFIndex fpfs_PostPlayQueueNotificationIfHungry(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFIndex result;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 80);
  result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
  if (v3)
    v5 = result + 1;
  else
    v5 = result;
  if (v5 <= 1)
    fpfs_EnqueueNotification(a1, CFSTR("PlayQueueBecameHungry"), a1, 0);
  return result;
}

BOOL fpfs_SubstreamNeedsFlowControl(uint64_t a1, unsigned int a2)
{
  int v2;

  if (((*(_DWORD *)(a1 + 1088) >> a2) & 1) == 0)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + a2 + 471);
  if (*(_BYTE *)(a1 + 553) && *(_BYTE *)(a1 + a2 + 471))
  {
    if (*(_QWORD *)(a1 + 1760))
      v2 = *(unsigned __int8 *)(a1 + a2 + 474);
    else
      v2 = 1;
  }
  return v2 == 0;
}

uint64_t fpfsi_PlaybackHasBufferedBeyondTimeToPauseBuffering(uint64_t a1)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v4 = *(_QWORD *)(result + 1432);
    v3 = *(_OWORD *)(result + 1416);
    return fpfsi_PlaybackHasBufferedBeyondTime(a1, (uint64_t)&v3) != 0;
  }
  return result;
}

uint64_t fpfs_EnsureEndTimerProcForTrack(uint64_t a1)
{
  void *v2;
  uint64_t DerivedStorage;
  CFArrayRef ItemAndTrackNumberPayload;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  NSObject *v9;
  OpaqueCMTimebase *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v12;
  os_log_type_t type;
  int v14;
  __int128 v15;
  uint64_t v16;
  CMTime fireTime;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ItemAndTrackNumberPayload = fpfs_CreateItemAndTrackNumberPayload(v2, a1);
  v5 = fpfs_TimerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 600), ItemAndTrackNumberPayload, 0xFFFFFFFFFFFFFFFFLL, (void (__cdecl *)(void *))fpfs_endTimerProc, 0);
  *(_QWORD *)(a1 + 112) = v5;
  if (!ItemAndTrackNumberPayload)
  {
    v6 = v5;
    if (v5)
      goto LABEL_3;
    return FigSignalErrorAt();
  }
  CFRelease(ItemAndTrackNumberPayload);
  v6 = *(NSObject **)(a1 + 112);
  if (!v6)
    return FigSignalErrorAt();
LABEL_3:
  v12 = *MEMORY[0x1E0CA2E18];
  v15 = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v16 = v7;
  CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 576), v6);
  result = fpfs_scheduleForwardEndTimeForTrack(DerivedStorage, a1, (uint64_t)&v15);
  v9 = *(NSObject **)(a1 + 120);
  if (v9)
  {
    v10 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
    fireTime = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
    result = CMTimebaseSetTimerDispatchSourceNextFireTime(v10, v9, &fireTime, 1u);
    *(_OWORD *)(a1 + 156) = v12;
    *(_QWORD *)(a1 + 172) = v7;
  }
  if (dword_1EE2A2A88)
  {
    v14 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t fpfs_needsMoreTimerProc(uint64_t a1)
{
  uint64_t result;
  CFTypeRef v2;
  uint64_t DerivedStorage;
  const void *v4;
  id v5;
  uint64_t v6;
  uint64_t *v7;
  _OWORD *v8;
  uint64_t v9;
  float v10;
  OpaqueCMTimebase *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v16;
  const char *v17;
  const char *v18;
  Float64 Seconds;
  uint64_t v20;
  OpaqueCMTimebase *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  Float64 v30;
  const char *v31;
  Float64 v32;
  const char *v33;
  const char *v34;
  CMTime v35;
  const void *v36;
  CFTypeRef v37;
  CMTime v38;
  os_log_type_t type;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime rhs;
  CMTime time2;
  CMTime lhs;
  const char *v46;
  __int16 v47;
  CFTypeRef v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  Float64 v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  Float64 v56;
  CMTime time;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = 0;
  result = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &v36, &v37);
  if (!(_DWORD)result)
  {
    v2 = v37;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = v36;
    v5 = *(id *)(CMBaseObjectGetDerivedStorage() + 776);
    voucher_adopt();
    v6 = CMBaseObjectGetDerivedStorage();
    if ((*(_BYTE *)(DerivedStorage + 1668) & 1) == 0)
    {
LABEL_10:
      v13 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 1632) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(DerivedStorage + 1648) = *(_QWORD *)(v13 + 16);
      memset(&time2, 0, sizeof(time2));
      memset(&rhs, 0, sizeof(rhs));
      fpfs_GetTime(DerivedStorage, (uint64_t)&rhs);
      if (dword_1EE2A2A88)
      {
        LODWORD(v42.value) = 0;
        LOBYTE(v41.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = v42.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v41.value))
          v16 = value;
        else
          v16 = value & 0xFFFFFFFE;
        if (v16)
        {
          if (v4)
            v17 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v17 = "";
          if (v2)
            v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v18 = "";
          time = rhs;
          Seconds = CMTimeGetSeconds(&time);
          LODWORD(lhs.value) = 136316418;
          *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfs_needsMoreTimerProc";
          LOWORD(lhs.flags) = 2048;
          *(_QWORD *)((char *)&lhs.flags + 2) = v4;
          HIWORD(lhs.epoch) = 2082;
          v46 = v17;
          v47 = 2048;
          v48 = v2;
          v49 = 2082;
          v50 = v18;
          v51 = 2048;
          v52 = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_QWORD *)(DerivedStorage + 928))
        fpfs_CheckPrebufferedLevels(&time, v2, 0, -1, 1);
      v20 = *(_QWORD *)(DerivedStorage + 1696);
      if (v20 && FigAlternateIsIFrameOnly(v20) && *(_BYTE *)(DerivedStorage + 1557))
      {
        if ((*(_BYTE *)(DerivedStorage + 1212) & 1) != 0)
        {
          time = *(CMTime *)(DerivedStorage + 1200);
          lhs = *(CMTime *)(DerivedStorage + 1176);
          CMTimeSubtract(&time2, &time, &lhs);
        }
        else
        {
          time2 = *(CMTime *)(DerivedStorage + 1512);
        }
        fpfs_CurrentSubStreamBufferedDuration(*(unsigned __int8 *)(DerivedStorage + 1104), (uint64_t)&v35);
        time = time2;
        fpfs_RequestNextIFrameStepUnlocked(v2, &time, &v35);
      }
      fpfsi_TrimCachedSamplesFromItem((uint64_t)v2);
      goto LABEL_34;
    }
    v7 = (uint64_t *)v6;
    v8 = (_OWORD *)(DerivedStorage + 1656);
    v9 = CMBaseObjectGetDerivedStorage();
    memset(&time, 0, sizeof(time));
    fpfs_GetTime((uint64_t)v7, (uint64_t)&time);
    v10 = *(float *)(v9 + 108);
    if (v10 >= 0.0)
    {
      lhs = time;
      *(_OWORD *)&rhs.value = kTimerScheduleTime;
      rhs.epoch = 0;
      CMTimeAdd(&time2, &lhs, &rhs);
      *(_OWORD *)&lhs.value = *v8;
      lhs.epoch = *(_QWORD *)(DerivedStorage + 1672);
      if (CMTimeCompare(&lhs, &time2) >= 1)
      {
        v11 = (OpaqueCMTimebase *)v7[72];
        v12 = *(NSObject **)(DerivedStorage + 1624);
        *(_OWORD *)&lhs.value = *v8;
        lhs.epoch = *(_QWORD *)(DerivedStorage + 1672);
        CMTimebaseSetTimerDispatchSourceNextFireTime(v11, v12, &lhs, 1u);
        fpfs_GetTime((uint64_t)v7, (uint64_t)&v42);
        *(_OWORD *)&lhs.value = *v8;
        lhs.epoch = *(_QWORD *)(DerivedStorage + 1672);
        if (CMTimeCompare(&lhs, &v42) <= 0)
          goto LABEL_10;
LABEL_37:
        *(_OWORD *)(DerivedStorage + 1632) = *v8;
        *(_QWORD *)(DerivedStorage + 1648) = *(_QWORD *)(DerivedStorage + 1672);
        v23 = MEMORY[0x1E0CA2E18];
        *v8 = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(DerivedStorage + 1672) = *(_QWORD *)(v23 + 16);
        if (dword_1EE2A2A88)
        {
          LODWORD(rhs.value) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v25 = rhs.value;
          if (os_log_type_enabled(v24, type))
            v26 = v25;
          else
            v26 = v25 & 0xFFFFFFFE;
          if (v26)
          {
            v27 = *v7;
            if (*v7)
              v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v28 = "";
            v34 = v28;
            if (v2)
              v29 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v29 = "";
            v33 = v29;
            fpfs_GetTime((uint64_t)v7, (uint64_t)&v38);
            v30 = CMTimeGetSeconds(&v38);
            if (v7 == (uint64_t *)DerivedStorage)
              v31 = "needsMoreTimer";
            else
              v31 = "testTimer";
            time = *(CMTime *)(DerivedStorage + 1632);
            v32 = CMTimeGetSeconds(&time);
            LODWORD(lhs.value) = 136316930;
            *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfs_deferTimeTillDryTimer";
            LOWORD(lhs.flags) = 2048;
            *(_QWORD *)((char *)&lhs.flags + 2) = v27;
            HIWORD(lhs.epoch) = 2082;
            v46 = v34;
            v47 = 2048;
            v48 = v2;
            v49 = 2082;
            v50 = v33;
            v51 = 2048;
            v52 = v30;
            v53 = 2082;
            v54 = v31;
            v55 = 2048;
            v56 = v32;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_34:

        fpfs_UnlockAndPostNotificationsWithCaller(v4);
      }
      v10 = *(float *)(v9 + 108);
    }
    if (v10 >= 0.0)
      goto LABEL_10;
    lhs = time;
    *(_OWORD *)&rhs.value = kTimerScheduleTime;
    rhs.epoch = 0;
    CMTimeSubtract(&v41, &lhs, &rhs);
    *(_OWORD *)&lhs.value = *v8;
    lhs.epoch = *(_QWORD *)(DerivedStorage + 1672);
    if ((CMTimeCompare(&lhs, &v41) & 0x80000000) == 0)
      goto LABEL_10;
    v21 = (OpaqueCMTimebase *)v7[72];
    v22 = *(NSObject **)(DerivedStorage + 1624);
    *(_OWORD *)&lhs.value = *v8;
    lhs.epoch = *(_QWORD *)(DerivedStorage + 1672);
    CMTimebaseSetTimerDispatchSourceNextFireTime(v21, v22, &lhs, 1u);
    fpfs_GetTime((uint64_t)v7, (uint64_t)&v40);
    *(_OWORD *)&lhs.value = *v8;
    lhs.epoch = *(_QWORD *)(DerivedStorage + 1672);
    if (CMTimeCompare(&lhs, &v40) >= 0)
      goto LABEL_10;
    goto LABEL_37;
  }
  return result;
}

void fpfs_CallDispatchHandlerWithItemAndTrack(void *a1, uint64_t a2, void (*a3)(void))
{
  CFArrayRef ItemAndTrackNumberPayload;
  CFArrayRef v5;

  ItemAndTrackNumberPayload = fpfs_CreateItemAndTrackNumberPayload(a1, a2);
  if (ItemAndTrackNumberPayload)
  {
    v5 = ItemAndTrackNumberPayload;
    a3();
    CFRelease(v5);
  }
}

void fpfs_endTimerProc(const __CFArray *a1)
{
  const __CFNumber *ValueAtIndex;
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  float v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v10;
  uint64_t valuePtr;
  CMTime time2;
  CMTime time;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  CFArrayGetValueAtIndex(a1, 0);
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)DerivedStorage;
  v5 = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 529) = 1;
  CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
  fpfs_LockMutexWithCaller((uint64_t)v4);
  v6 = *(id *)(v5 + 776);
  voucher_adopt();
  if (FigRetainProxyIsInvalidated())
  {
LABEL_17:
    *(_BYTE *)(DerivedStorage + 529) = 0;

    fpfs_UnlockAndPostNotificationsWithCaller(v4);
  }
  v7 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v7)
  {
LABEL_16:
    fpfs_endEndedTracks(DerivedStorage);
    goto LABEL_17;
  }
  while (*(_QWORD *)(v7 + 16) != valuePtr)
  {
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      goto LABEL_16;
  }
  memset(&v10, 0, sizeof(v10));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v10);
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v8 = *(float *)(v5 + 108);
  if (v8 >= 0.0)
  {
    time = v10;
    time2 = *(CMTime *)(v7 + 216);
    if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0
      || (time = v10, time2 = *(CMTime *)(DerivedStorage + 1368), (CMTimeCompare(&time, &time2) & 0x80000000) == 0))
    {
LABEL_15:
      fpfs_EndTrackPlayback(v7);
      goto LABEL_16;
    }
    v8 = *(float *)(v5 + 108);
  }
  if (v8 >= 0.0 || (time = v10, time2 = *(CMTime *)(v7 + 216), CMTimeCompare(&time, &time2) > 0))
  {
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    if (!fpfs_scheduleForwardEndTimeForTrack(DerivedStorage, v7, (uint64_t)&time))
      goto LABEL_16;
  }
  goto LABEL_15;
}

void fpfs_deferredSynchronousFrameEnqueued(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  uint64_t AllocatorForMedia;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  *(_DWORD *)(DerivedStorage + 744) = 0;
  FigMemoryBarrier();
  if (!*(_BYTE *)(DerivedStorage + 51))
  {
    v4 = *(const __CFArray **)(DerivedStorage + 384);
    if (v4)
    {
      if (CFArrayGetCount(v4) >= 1)
      {
        cf = 0;
        AllocatorForMedia = FigGetAllocatorForMedia();
        FigDeferredTransactionCreate(AllocatorForMedia, (uint64_t *)&cf);
        FPSupport_AppendDeferredTransactionChangeForCallingSetContentsChangedOnLayers(cf, *(CFArrayRef *)(DerivedStorage + 384), (uint64_t)"fpfs_deferredSynchronousFrameEnqueued");
        FigDeferredTransactionCommit((uint64_t)cf);
        if (cf)
          CFRelease(cf);
      }
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
}

uint64_t fpfsi_deferredCompletedDecodeForPreroll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CFTypeRef v8;
  uint64_t DerivedStorage;
  const __CFNumber *Value;
  uint64_t v11;
  uint64_t v12;
  uint64_t RenderingTrackofType;
  int v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t AllocatorForMedia;
  NSObject *v17;
  CFTypeRef v18;
  uint64_t v19;
  int v20;
  os_log_type_t v21[32];
  CMTime v22;
  int valuePtr;
  CFTypeRef v24;
  CFTypeRef cf;
  CMTime dictionaryRepresentation[5];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v24))
  {
    v8 = v24;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("RequestID"));
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      v11 = *(_QWORD *)(DerivedStorage + 1040);
      if (v11)
      {
        while (1)
        {
          if (valuePtr == *(_DWORD *)(v11 + 16))
          {
            v12 = *(_QWORD *)(v11 + 96);
            if (v12)
            {
              if (*(_QWORD *)(v12 + 32) == a4 && *(_BYTE *)(v11 + 104))
                break;
            }
          }
          v11 = *(_QWORD *)(v11 + 8);
          if (!v11)
            goto LABEL_14;
        }
        RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v8, 1986618469);
        v14 = *(_DWORD *)(DerivedStorage + 332);
        if (dword_1EE2A2A88)
        {
          v20 = *(_DWORD *)(DerivedStorage + 332);
          LODWORD(v22.value) = 0;
          v21[28] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          LOBYTE(v14) = v20;
        }
        *(_BYTE *)(v11 + 104) = 0;
        if (*(_DWORD *)(v11 + 32) == 1986618469 && (v14 & 1) != 0 && v11 == RenderingTrackofType)
        {
          memset(&v22, 0, sizeof(v22));
          fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v22);
          if (*(_BYTE *)(v11 + 184))
          {
            dictionaryRepresentation[0].value = 0;
            AllocatorForMedia = FigGetAllocatorForMedia();
            if (!FigRenderPipelineCopyProperty(a4, (uint64_t)CFSTR("EndPresentationTimeForDecodedSamples"), AllocatorForMedia, (uint64_t)dictionaryRepresentation))
            {
              CMTimeMakeFromDictionary(&v22, (CFDictionaryRef)dictionaryRepresentation[0].value);
              CFRelease((CFTypeRef)dictionaryRepresentation[0].value);
            }
          }
          if ((v22.flags & 1) != 0)
          {
            if (dword_1EE2A2A88)
            {
              v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            dictionaryRepresentation[0] = v22;
            fpfs_JumpToTime((uint64_t)v8, dictionaryRepresentation);
          }
          if (!*(_QWORD *)(DerivedStorage + 1592))
          {
            v18 = cf;
            v19 = *(unsigned int *)(DerivedStorage + 2192);
            if (!(_DWORD)v19)
              v19 = *(unsigned int *)(DerivedStorage + 2196);
            fpfs_GetTime(DerivedStorage, (uint64_t)v21);
            fpfs_SeekDidComplete(v18, v8, v19, 0, 0, v21);
            *(_DWORD *)(DerivedStorage + 2192) = 0;
          }
        }
        fpfs_CheckPrebufferedLevels(dictionaryRepresentation, v8, 1, -1, 0);
      }
    }
LABEL_14:
    fpfs_UnlockAndPostNotificationsWithCaller(cf);
  }
  if (cf)
    CFRelease(cf);
  if (v24)
    CFRelease(v24);
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineLostDecoderState(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const void *v5;
  uint64_t DerivedStorage;
  const __CFArray *v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v11;
  _QWORD v12[27];

  v12[25] = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12[0] = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, v12, (CFTypeRef *)&v11))
  {
    v5 = (const void *)v12[0];
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (v11 == *(const __CFArray **)(DerivedStorage + 80))
    {
      v7 = v11;
      if (dword_1EE2A2A88)
      {
        v8 = DerivedStorage;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v7 = *(const __CFArray **)(v8 + 80);
      }
      fpfs_stopResetDisturbReprepareAndResume(v5, v7, 0);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
  }
  if (a4)
    CFRelease(a4);
  return FigRetainProxyRelease();
}

void fpfsi_deferredFirstImageEnqueued(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)DerivedStorage;
  fpfs_LockMutexWithCaller(*(_QWORD *)DerivedStorage);
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_EnqueueNotification(v4, CFSTR("FirstVideoFrameEnqueued"), a2, 0);
  }
  if (dword_1EE2A2A88)
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_UnlockAndPostNotificationsWithCaller(v4);
}

uint64_t fpfsi_assignCAImageQueuesToLayers(const __CFArray *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *v4;
  CFIndex Count;
  const __CFArray *v6;
  CFIndex v7;
  CFTypeRef v8;
  const __CFAllocator *AllocatorForMedia;
  const __CFArray *Copy;
  uint64_t v11;
  const __CFArray *v12;
  __int128 v14;
  uint64_t v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFArray **)(v3 + 384);
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  v6 = *(const __CFArray **)(DerivedStorage + 656);
  if (!v6)
    return 0;
  v7 = CFArrayGetCount(v6);
  if (Count < 1 || v7 < 1)
    return 0;
  if (Count == v7)
  {
    if (fpfs_getNext(v3, 0) == a1)
    {
      v8 = *(CFTypeRef *)(v3 + 816);
      cf = 0;
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Copy = CFArrayCreateCopy(AllocatorForMedia, *(CFArrayRef *)(DerivedStorage + 656));
      if (!v8)
      {
        v11 = FigGetAllocatorForMedia();
        FigDeferredTransactionCreate(v11, (uint64_t *)&cf);
        v8 = cf;
      }
      v12 = *(const __CFArray **)(v3 + 384);
      v14 = *MEMORY[0x1E0CA2E30];
      v15 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
      FPSupport_AppendDeferredTransactionChangeForSettingCAImageQueuesOnVideoLayers(v8, Copy, v12, &v14, (uint64_t)"fpfsi_assignCAImageQueuesToLayers");
      FPSupport_AppendDeferredTransactionChangeForSettingEdgeAntialiasingMaskOnLayers(v8, 0, *(CFArrayRef *)(v3 + 384), (uint64_t)"fpfsi_assignCAImageQueuesToLayers");
      FigDeferredTransactionCommit((uint64_t)cf);
      if (cf)
        CFRelease(cf);
      if (Copy)
        CFRelease(Copy);
    }
    return 0;
  }
  return FigSignalErrorAt();
}

void fpfsi_RTCReportingUpdateAudioInfoForVariantEnd(uint64_t a1, uint64_t a2)
{
  const AudioFormatListItem *RichestDecodableFormat;
  BOOL v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  int AudioChannelCount;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v14;
  uint64_t CFStringForOSTypeValue;
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  const __CFAllocator *v18;
  CFNumberRef v19;
  uint64_t v20;
  void (*v21)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD);
  CFNumberRef v22;
  uint64_t v23;
  void (*v24)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD);
  unsigned int v25;
  double valuePtr[18];

  valuePtr[16] = *(double *)MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a2 + 440))
    return;
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(a2 + 40));
  if (RichestDecodableFormat)
    v5 = 1;
  else
    v5 = dword_1EE2A2A88 == 0;
  if (!v5)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
  v25 = 0;
  AudioChannelCount = FigAlternateGetAudioChannelCount(*(_QWORD *)(a2 + 440), (uint64_t)CurrentAudioPersistentIDFromMediaOption, &v25);
  if ((AudioChannelCount - 1) <= 1)
  {
    if ((v25 & 2) != 0)
      v9 = 3;
    else
      v9 = ((unint64_t)v25 >> 1) & 2;
LABEL_13:
    v10 = *(_QWORD *)(a1 + 2536);
    if (v10)
    {
      v11 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 56);
      if (v11)
        v11(v10, CFSTR("playerStats"), CFSTR("VarAuRType"), v9, 0);
    }
    goto LABEL_16;
  }
  if (AudioChannelCount >= 3)
  {
    v9 = 1;
    goto LABEL_13;
  }
LABEL_16:
  if (fpfs_ShouldEnableSpatializationForTrack((uint64_t *)a2))
  {
    v12 = *(_QWORD *)(a1 + 2536);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v13)
        v13(v12, CFSTR("playerStats"), CFSTR("VarAuSpatial"), 1, 0);
    }
  }
  if (RichestDecodableFormat)
  {
    v14 = *(_QWORD *)(a1 + 2536);
    CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
    if (v14)
    {
      v16 = CFStringForOSTypeValue;
      v17 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 48);
      if (v17)
        v17(v14, CFSTR("playerStats"), CFSTR("VarAuFormat"), v16, 0);
    }
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, RichestDecodableFormat);
    v20 = *(_QWORD *)(a1 + 2536);
    if (v20)
    {
      v21 = *(void (**)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 48);
      if (v21)
        v21(v20, CFSTR("playerStats"), CFSTR("VarAuSampleRate"), v19, 0);
    }
    valuePtr[0] = RichestDecodableFormat->mASBD.mSampleRate * (float)RichestDecodableFormat->mASBD.mBytesPerFrame * 8.0;
    v22 = CFNumberCreate(v18, kCFNumberDoubleType, valuePtr);
    v23 = *(_QWORD *)(a1 + 2536);
    if (v23)
    {
      v24 = *(void (**)(uint64_t, __CFString *, __CFString *, CFNumberRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 48);
      if (v24)
        v24(v23, CFSTR("playerStats"), CFSTR("VarAuBitrate"), v22, 0);
    }
    if (v19)
      CFRelease(v19);
    if (v22)
      CFRelease(v22);
  }
}

void fpfs_BufferChomper(opaqueCMBufferQueue **a1)
{
  opaqueCMBufferQueue *v2;
  int v3;
  CMBufferRef v4;
  dispatch_time_t v5;
  NSObject *global_queue;
  dispatch_time_t v7;
  NSObject *v8;
  _QWORD block[5];

  v2 = *a1;
  v3 = 100;
  while (1)
  {
    v4 = CMBufferQueueDequeueAndRetain(v2);
    if (!v4)
      break;
    CFRelease(v4);
    if (!--v3)
    {
      if (CMBufferQueueGetBufferCount(v2) >= 1)
      {
        v5 = dispatch_time(0, 20000000);
        global_queue = dispatch_get_global_queue(-2, 0);
        dispatch_after_f(v5, global_queue, a1, (dispatch_function_t)fpfs_BufferChomper);
        return;
      }
      break;
    }
  }
  if (v2)
    CFRelease(v2);
  v7 = dispatch_time(0, 3000000000);
  v8 = dispatch_get_global_queue(-2, 0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fpfs_BufferChomper_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_after(v7, v8, block);
}

void fpfsi_ExternalProtectionStatusChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v4 = 0;
  cf = 0;
  FigRetainProxyRetain();
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v4))
  {
    FigRetainProxyRelease();
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v3 = v4;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (v3)
      CFRelease(v3);
    if (cf)
      CFRelease(cf);
  }
}

void fpfsi_ExternalProtectionRequiredChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v4 = 0;
  cf = 0;
  FigRetainProxyRetain();
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v4))
  {
    FigRetainProxyRelease();
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v3 = v4;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (v3)
      CFRelease(v3);
    if (cf)
      CFRelease(cf);
  }
}

uint64_t fpfs_deferredExternalProtectionStatusChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  CFTypeRef cf;
  CFTypeRef v11;

  cf = 0;
  v11 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v11, &cf))
    fpfs_ExternalProtectionStatusChangedGuts(v11, v2, v3, v4, v5, v6, v7, v8);
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  return FigRetainProxyRelease();
}

void fpfs_ExternalProtectionStatusChangedGuts(const void *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  const void *NotificationPayloadForProperties;

  NotificationPayloadForProperties = (const void *)fpfs_CreateNotificationPayloadForProperties(a1, 0, a3, a4, a5, a6, a7, a8, CFSTR("ExternalProtectionStatus"), 0);
  fpfs_EnqueueNotification(a1, CFSTR("ExternalProtectionStatusChanged"), a1, NotificationPayloadForProperties);
}

void sub_192A24DE8()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

uint64_t fpfsi_deferredExternalProtectionRequiredChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf;
  CFTypeRef v4;

  cf = 0;
  v4 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v4, &cf))
  {
    fpfsi_PostExternalProtectionRequiredChangedNotification(cf);
    fpfs_UnlockAndPostNotificationsWithCaller(v4);
  }
  if (cf)
    CFRelease(cf);
  if (v4)
    CFRelease(v4);
  return FigRetainProxyRelease();
}

void sub_192A24E7C()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x192A24E4CLL);
  JUMPOUT(0x192A24E44);
}

void fpfsi_SetTrackMediaType(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  const __CFAllocator *v5;
  CFNumberRef v6;
  uint64_t v7;
  CFDictionaryRef v8;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  const __CFDictionary *Value;
  const __CFAllocator *v15;
  __CFDictionary *Mutable;
  __CFDictionary *v17;
  CFDictionaryRef theDict;
  int valuePtr;

  if (*(_QWORD *)(a1 + 168))
  {
    *(_DWORD *)(a2 + 32) = a3;
    v4 = a2 + 32;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(a2 + 32));
    v7 = *(_QWORD *)(a1 + 168);
    valuePtr = *(_QWORD *)(v4 - 16);
    theDict = 0;
    if (v7 && CFSTR("MediaType"))
    {
      FigPropertyStorageCopyValue(v7, (uint64_t)CFSTR("TrackPropertyStorages"), &theDict);
      v8 = theDict;
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      if (v8)
        MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, theDict);
      else
        MutableCopy = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v11 = MutableCopy;
      if (MutableCopy)
      {
        v12 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
        if (v12)
        {
          v13 = v12;
          Value = (const __CFDictionary *)CFDictionaryGetValue(v11, v12);
          v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
          if (Value)
            Mutable = CFDictionaryCreateMutableCopy(v15, 0, Value);
          else
            Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v17 = Mutable;
          if (Mutable)
          {
            CFDictionarySetValue(Mutable, CFSTR("MediaType"), v6);
            CFDictionarySetValue(v11, v13, v17);
            FigPropertyStorageSetValue(v7, CFSTR("TrackPropertyStorages"), v11);
            CFRelease(v13);
          }
          else
          {
            v17 = v13;
          }
          CFRelease(v17);
        }
        CFRelease(v11);
      }
      if (theDict)
        CFRelease(theDict);
    }
    if (v6)
      CFRelease(v6);
  }
}

uint64_t fpfs_PushSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, opaqueCMSampleBuffer *a6)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const __CFString *v10;
  CFTypeRef v11;
  const void *v12;
  CFTypeID v13;
  const void *v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, CMTime *);
  BOOL v17;
  int v18;
  _QWORD *v19;
  CMTimeEpoch v20;
  int v21;
  CMTimeEpoch v22;
  CMTimeEpoch v23;
  opaqueCMSampleBuffer *v24;
  CMTime *v25;
  uint64_t v26;
  unsigned int v27;
  CMTimeEpoch v28;
  CFDictionaryRef v29;
  uint64_t i;
  uint64_t v32;
  void (*v33)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t updated;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v41;
  const void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  CMTimeFlags v46;
  CMTimeEpoch v47;
  __int128 v48;
  CMTimeFlags v49;
  uint64_t v50;
  uint64_t v51;
  const __CFArray *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  opaqueCMSampleBuffer *v56;
  unsigned int v57;
  CMTimeEpoch v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t FigBaseObject;
  void (*v63)(uint64_t, const __CFString *, uint64_t);
  NSObject *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  Float64 Seconds;
  Float64 v71;
  Float64 v72;
  double v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  opaqueCMBufferQueue *v77;
  int v78;
  uint64_t TrackOfType;
  CMTimeEpoch epoch;
  int v81;
  uint64_t v82;
  uint64_t AllocatorForMedia;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, __CFString *, uint64_t, CFNumberRef *);
  uint64_t v88;
  NSObject *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  const char *v93;
  const __CFArray *v94;
  const char *v95;
  uint64_t v96;
  Float64 v97;
  uint64_t v98;
  NSObject *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  const char *v103;
  char v104;
  uint64_t v105;
  const char *v106;
  int v107;
  Float64 v108;
  Float64 v109;
  int v110;
  Float64 v111;
  double v112;
  const char *v113;
  NSObject *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  const char *v118;
  const char *v119;
  uint64_t v120;
  Float64 v121;
  int v122;
  NSObject *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  const char *v127;
  const char *v128;
  uint64_t v129;
  Float64 v130;
  Float64 v131;
  Float64 v132;
  uint64_t v133;
  Float64 v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  const __CFDictionary *v139;
  CMTime *v140;
  uint64_t started;
  int v142;
  uint64_t v143;
  int IsVideoSync;
  CMBufferRef Head;
  uint64_t v146;
  opaqueCMBufferQueue *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  const __CFArray *v153;
  const char *v154;
  Float64 v155;
  int v156;
  _BOOL4 IsTrialReadyToComplete;
  _QWORD *v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  unsigned int v164;
  unsigned int v165;
  _OWORD *v167;
  double v168;
  _OWORD *v169;
  CMTime *v170;
  uint64_t v171;
  uint64_t v172;
  NSObject *v173;
  unsigned int v174;
  unsigned int v175;
  const void *v176;
  const char *v177;
  const char *v178;
  uint64_t v179;
  const char *v180;
  CMTimeEpoch v181;
  uint64_t v182;
  const char *v183;
  const char *v184;
  uint64_t v185;
  const char *v186;
  const __CFArray *v187;
  __int128 v188;
  const char *v189;
  CMTimeEpoch v190;
  CMTimeEpoch v191;
  CMTimeEpoch v192;
  CMTimeEpoch v193;
  CMTimeEpoch v194;
  opaqueCMSampleBuffer *target;
  opaqueCMSampleBuffer *targeta;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  CMTime *v201;
  const __CFString *key;
  CMTimeFlags v203;
  _OWORD *v204;
  const __CFAllocator *allocator;
  const __CFArray *v206;
  __int128 v207;
  uint64_t *v208;
  uint64_t v209;
  __int128 v210;
  _OWORD *v212;
  _OWORD *v213;
  CMTime v214;
  CMTime time1;
  CMTime v216;
  CMTime time2;
  CMTime time;
  CMTime v219;
  CMTime v220;
  CMTime v221;
  CMTime v222;
  CMTime v223;
  CMTime v224;
  CMTime v225;
  CMTime v226;
  CMTime v227;
  os_log_type_t v228;
  unsigned int v229;
  CMTime v230;
  CMTime v231;
  CMTime v232;
  CFNumberRef number;
  int valuePtr;
  CMTime v235;
  CMTime v236;
  CMTime v237;
  CMTime type;
  CMTime v239;
  CMTime rhs;
  const char *v241;
  __int16 v242;
  const __CFArray *v243;
  __int16 v244;
  const char *v245;
  __int16 v246;
  _BYTE v247[14];
  __int16 v248;
  Float64 v249;
  __int16 v250;
  _BYTE v251[24];
  __int16 v252;
  const char *v253;
  CMTime lhs;
  CMTimeValue v255;
  CMTimeScale v256;
  uint64_t v257;

  v257 = *MEMORY[0x1E0C80C00];
  v206 = *(const __CFArray **)a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CMBaseObjectGetDerivedStorage();
  memset(&v223, 0, sizeof(v223));
  CMSampleBufferGetPresentationTimeStamp(&v223, a6);
  memset(&v222, 0, sizeof(v222));
  memset(&v221, 0, sizeof(v221));
  memset(&v220, 0, sizeof(v220));
  memset(&v219, 0, sizeof(v219));
  fpfs_GetTimeOffsetIntoSegment(a6, (uint64_t)&v219);
  if (a6)
    CFRetain(a6);
  *(_BYTE *)(a3 + 188) = 1;
  v10 = (const __CFString *)*MEMORY[0x1E0CA4E40];
  v11 = CMGetAttachment(a6, (CFStringRef)*MEMORY[0x1E0CA4E40], 0);
  if (v11)
  {
    v12 = v11;
    v13 = CFGetTypeID(v11);
    if (v13 == CFDictionaryGetTypeID())
    {
      v14 = *(const void **)(a3 + 464);
      *(_QWORD *)(a3 + 464) = v12;
      CFRetain(v12);
      if (v14)
        CFRelease(v14);
      fpfsi_applyLoudnessInfo(DerivedStorage, a3, 1);
    }
    if (CMSampleBufferGetNumSamples(a6) < 1)
      goto LABEL_427;
    CMRemoveAttachment(a6, v10);
  }
  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 80), a6);
  if (!*(_DWORD *)(v9 + 32))
  {
LABEL_427:
    v143 = 0;
    goto LABEL_390;
  }
  if (!*(_QWORD *)(a3 + 40))
    goto LABEL_388;
  if (*(_QWORD *)(a3 + 384))
  {
    FigBasicAESCPECryptorGetClassID();
    if (!CMBaseObjectIsMemberOfClass()
      || (LODWORD(lhs.value) = 0,
          v15 = *(_QWORD *)(a3 + 384),
          (v16 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16)) == 0)
      || v16(v15, &lhs)
      || LODWORD(lhs.value))
    {
      FigSampleBufferSetDecryptor();
    }
  }
  v17 = *(_DWORD *)(a3 + 32) == 1936684398 && *(_DWORD *)(a3 + 152) != 6;
  v18 = 0;
  v212 = (_OWORD *)(a3 + 192);
  v213 = (_OWORD *)(a3 + 128);
  v19 = (_QWORD *)(DerivedStorage + 1040);
  v201 = (CMTime *)(DerivedStorage + 1488);
  v204 = (_OWORD *)(a3 + 396);
  v200 = *MEMORY[0x1E0C9AE50];
  v203 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v20 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  key = (const __CFString *)*MEMORY[0x1E0CA4E68];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    v21 = *(_DWORD *)(a3 + 140) & 0x1D;
    if (v18)
    {
      if (v21 == 1)
      {
        memset(&lhs, 0, sizeof(lhs));
        memset(&rhs, 0, sizeof(rhs));
        CMSampleBufferGetOutputDuration(&rhs, a6);
        CMSampleBufferGetOutputPresentationTimeStamp(&v239, a6);
        v222 = v239;
        if ((a4 & 1) != 0 && *(_DWORD *)(a3 + 32) == 1986618469)
        {
          v167 = (_OWORD *)(DerivedStorage + 1512);
          if ((*(_BYTE *)(DerivedStorage + 1524) & 1) != 0 && !*(_BYTE *)(a3 + 184))
          {
            memset(&v239, 0, sizeof(v239));
            type = v222;
            *(_OWORD *)&v237.value = *v167;
            v237.epoch = *(_QWORD *)(DerivedStorage + 1528);
            CMTimeSubtract(&v239, &type, &v237);
            v168 = *(double *)(DerivedStorage + 1544);
            type = v239;
            *(double *)(DerivedStorage + 1544) = (fabs(CMTimeGetSeconds(&type)) + v168 * 4.0) / 5.0;
          }
          *v167 = *(_OWORD *)&v222.value;
          *(_QWORD *)(DerivedStorage + 1528) = v222.epoch;
        }
        if ((rhs.flags & 0x1D) == 1)
        {
          v239 = v222;
          type = rhs;
          CMTimeAdd(&lhs, &v239, &type);
        }
        else
        {
          lhs = v222;
        }
        v169 = (_OWORD *)(a3 + 216);
        if ((*(_BYTE *)(a3 + 228) & 1) == 0
          || (*(_OWORD *)&v239.value = *v169,
              v239.epoch = *(_QWORD *)(a3 + 232),
              type = lhs,
              CMTimeCompare(&v239, &type) < 0))
        {
          *v169 = *(_OWORD *)&lhs.value;
          *(_QWORD *)(a3 + 232) = lhs.epoch;
        }
        if ((*(_BYTE *)(DerivedStorage + 492) & 1) != 0)
        {
          *(_OWORD *)&v239.value = *v169;
          v239.epoch = *(_QWORD *)(a3 + 232);
          type = *(CMTime *)(DerivedStorage + 480);
          if (CMTimeCompare(&v239, &type) >= 1)
          {
            *(_OWORD *)(DerivedStorage + 480) = *MEMORY[0x1E0CA2E18];
            *(_QWORD *)(DerivedStorage + 496) = v20;
            fpfsi_EnqueueEndTimeChangedNotification(v206);
          }
        }
        if (fpfs_UseTrackToSetPumpOffset(a3))
        {
          memset(&v239, 0, sizeof(v239));
          CMSampleBufferGetPresentationTimeStamp(&v214, a6);
          *(_OWORD *)&type.value = *v213;
          type.epoch = *(_QWORD *)(a3 + 144);
          CMTimeAdd(&v239, &v214, &type);
          v237 = v239;
          v236 = v219;
          CMTimeSubtract(&type, &v237, &v236);
          v239 = type;
          if (*(_DWORD *)(a3 + 32) != 1986618469 || !*(_BYTE *)(a3 + 184) || fpfs_IsVideoSync(a6))
          {
            v170 = (CMTime *)(DerivedStorage + 24 * *(unsigned __int8 *)(a3 + 180));
            type = v239;
            v237 = v170[50];
            fpfs_UpdatePumpOffset((uint64_t)v206, &type, &v237);
          }
          if (*(_QWORD *)(DerivedStorage + 1584) || *(_QWORD *)(DerivedStorage + 1592))
          {
            updated = fpfs_UpdateDateInfo(a3, a6);
            if ((_DWORD)updated)
              goto LABEL_389;
          }
        }
      }
      if (*(_DWORD *)(a3 + 32) == 1986618469)
      {
        v171 = *(_QWORD *)(a3 + 8);
        if (v171)
        {
          while (*(_DWORD *)(v171 + 32) != 1986618469
               || *(_DWORD *)(v171 + 152) != 1
               || *(_QWORD *)(v171 + 48) != *(_QWORD *)(DerivedStorage + 16 * *(unsigned __int8 *)(v171 + 180) + 1000))
          {
            v171 = *(_QWORD *)(v171 + 8);
            if (!v171)
              goto LABEL_425;
          }
          *(_QWORD *)(DerivedStorage + 1168) = *(_QWORD *)(v171 + 16);
        }
      }
LABEL_425:
      if (*(_BYTE *)(DerivedStorage + 529))
        fpfs_CallDispatchHandlerWithItemAndTrack(v206, 0, (void (*)(void))fpfs_endTimerProc);
      goto LABEL_427;
    }
    if (v21 == 1)
    {
      v22 = v20;
      lhs = v223;
      *(_OWORD *)&rhs.value = *v213;
      rhs.epoch = *(_QWORD *)(a3 + 144);
      CMTimeAdd(&v222, &lhs, &rhs);
      if (*(_BYTE *)(a3 + 184))
      {
        if (*(_DWORD *)(a3 + 32) == 1986618469)
        {
          lhs = v222;
          v207 = *MEMORY[0x1E0CA2E68];
          *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E68];
          v23 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          rhs.epoch = v23;
          if (CMTimeCompare(&lhs, &rhs) < 0)
          {
            *(_OWORD *)&v222.value = v207;
            v222.epoch = v23;
          }
        }
      }
      lhs = v222;
      CMSampleBufferSetOutputPresentationTimeStamp(a6, &lhs);
      v20 = v22;
    }
    else
    {
      *(_OWORD *)&v222.value = *MEMORY[0x1E0CA2E18];
      v222.epoch = v20;
    }
    if (!v17)
      goto LABEL_46;
    if (!*(_DWORD *)(a3 + 152))
    {
LABEL_52:
      if ((a4 & 2) != 0)
        *(_BYTE *)(a3 + 456) = 1;
      if ((v223.flags & 0x1D) == 1)
      {
        v28 = v20;
        lhs = v223;
        v29 = CMTimeCopyAsDictionary(&lhs, allocator);
        for (i = *v19; i; i = *(_QWORD *)(i + 8))
        {
          if (*(_QWORD *)(i + 64) == *(_QWORD *)(a3 + 64) && (*(_DWORD *)(i + 228) & 0x1D) != 1 && v29 != 0)
          {
            v32 = *(_QWORD *)(i + 48);
            v33 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
            if (v33)
              v33(v32, CFSTR("FMFD_HintForStartTime"), v29);
          }
        }
        v20 = v28;
        if (v29)
          CFRelease(v29);
      }
      updated = fpfs_SetTrackStartTimeAndTimeOffset(a3, a6, 1);
      if ((_DWORD)updated)
      {
LABEL_429:
        if ((_DWORD)updated != -12863)
          goto LABEL_389;
      }
      else
      {
        v35 = *(_QWORD *)(a3 + 48);
        v36 = DerivedStorage + 16 * *(unsigned __int8 *)(a3 + 180);
        if ((v35 == *(_QWORD *)(v36 + 992) || v35 == *(_QWORD *)(v36 + 1000)) && (*(_DWORD *)(a3 + 140) & 0x1D) == 1)
        {
          v37 = *v213;
          v38 = DerivedStorage + 24 * *(unsigned __int8 *)(a3 + 180);
          *(_QWORD *)(v38 + 264) = *(_QWORD *)(a3 + 144);
          *(_OWORD *)(v38 + 248) = v37;
        }
        if (!*(_DWORD *)(a3 + 152))
          fpfs_ChangeTrackState(a3, 2u);
        if (dword_1EE2A2A88)
        {
          LODWORD(v239.value) = 0;
          LOBYTE(type.value) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          value = v239.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
            v41 = value;
          else
            v41 = value & 0xFFFFFFFE;
          if (v41)
          {
            target = a6;
            v42 = *(const void **)DerivedStorage;
            if (*(_QWORD *)DerivedStorage)
              v43 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v43 = "";
            v189 = v43;
            v190 = v20;
            if (v206)
              v186 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v186 = "";
            v69 = *(_QWORD *)(a3 + 16);
            lhs = v223;
            *(_OWORD *)&rhs.value = *v213;
            rhs.epoch = *(_QWORD *)(a3 + 144);
            CMTimeAdd(&time, &lhs, &rhs);
            Seconds = CMTimeGetSeconds(&time);
            *(_OWORD *)&lhs.value = *v212;
            lhs.epoch = *(_QWORD *)(a3 + 208);
            v71 = CMTimeGetSeconds(&lhs);
            *(_OWORD *)&lhs.value = *v213;
            lhs.epoch = *(_QWORD *)(a3 + 144);
            v72 = CMTimeGetSeconds(&lhs);
            lhs = v223;
            v73 = CMTimeGetSeconds(&lhs);
            v74 = *(_QWORD *)(a3 + 64);
            v75 = "(gap track)";
            if (!*(_BYTE *)(a3 + 456))
              v75 = "";
            LODWORD(rhs.value) = 136317954;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
            LOWORD(rhs.flags) = 2048;
            *(_QWORD *)((char *)&rhs.flags + 2) = v42;
            HIWORD(rhs.epoch) = 2082;
            v241 = v189;
            v242 = 2048;
            v243 = v206;
            v244 = 2082;
            v245 = v186;
            v246 = 1024;
            *(_DWORD *)v247 = v69;
            *(_WORD *)&v247[4] = 2048;
            *(Float64 *)&v247[6] = Seconds;
            v248 = 2048;
            v249 = v71;
            v250 = 2048;
            *(Float64 *)v251 = v72;
            *(_WORD *)&v251[8] = 2048;
            *(double *)&v251[10] = v73;
            *(_WORD *)&v251[18] = 1024;
            *(_DWORD *)&v251[20] = v74;
            v252 = 2080;
            v253 = v75;
            _os_log_send_and_compose_impl();
            v20 = v190;
            a6 = target;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (*(_DWORD *)(a3 + 152))
        {
          v18 = 0;
          goto LABEL_365;
        }
        if (dword_1EE2A2A88)
        {
          LODWORD(v239.value) = 0;
          LOBYTE(type.value) = 0;
          v173 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v174 = v239.value;
          if (os_log_type_enabled(v173, type.value))
            v175 = v174;
          else
            v175 = v174 & 0xFFFFFFFE;
          if (v175)
          {
            v176 = *(const void **)DerivedStorage;
            if (*(_QWORD *)DerivedStorage)
              v177 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v177 = "";
            if (v206)
              v178 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v178 = "";
            v179 = *(_QWORD *)(a3 + 16);
            LODWORD(rhs.value) = 136316418;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
            LOWORD(rhs.flags) = 2048;
            *(_QWORD *)((char *)&rhs.flags + 2) = v176;
            HIWORD(rhs.epoch) = 2082;
            v241 = v177;
            v242 = 2048;
            v243 = v206;
            v244 = 2082;
            v245 = v178;
            v246 = 1024;
            *(_DWORD *)v247 = v179;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      goto LABEL_427;
    }
    if (!a6)
      return 0;
    CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(a3 + 420)
      && (CMBufferQueueGetMinPresentationTimeStamp(&lhs, *(CMBufferQueueRef *)(a3 + 72)), (lhs.flags & 1) == 0)
      && (rhs.value = 0,
          FigCreateReplacementAudioSBufByOmittingLeadingDependentPackets(a6, 0, (CMSampleBufferRef *)&rhs)))
    {
      v24 = (opaqueCMSampleBuffer *)rhs.value;
      if (rhs.value)
        CFRetain((CFTypeRef)rhs.value);
      CFRelease(a6);
      if (rhs.value)
        CFRelease((CFTypeRef)rhs.value);
      if (!v24)
        return 0;
    }
    else
    {
      v24 = a6;
    }
    CMSampleBufferGetPresentationTimeStamp(&lhs, v24);
    v223 = lhs;
    if ((*(_DWORD *)(a3 + 140) & 0x1D) == 1)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&lhs, v24);
      v222 = lhs;
    }
    a6 = v24;
LABEL_46:
    v17 = 0;
    switch(*(_DWORD *)(a3 + 152))
    {
      case 0:
        goto LABEL_52;
      case 1:
      case 5:
        if ((a4 & 2) != 0)
          *(_BYTE *)(a3 + 456) = 1;
        v25 = (CMTime *)(a3 + 128);
        if (*(_BYTE *)(a3 + 184) && *(_DWORD *)(a3 + 32) == 1986618469)
        {
          v26 = a3;
          v27 = 2;
LABEL_165:
          fpfs_ChangeTrackState(v26, v27);
LABEL_166:
          v17 = 0;
          v18 = 0;
          break;
        }
        v208 = (uint64_t *)DerivedStorage;
        memset(&type, 0, sizeof(type));
        v187 = *(const __CFArray **)a3;
        v44 = CMBaseObjectGetDerivedStorage();
        v185 = CMBaseObjectGetDerivedStorage();
        CMSampleBufferGetPresentationTimeStamp(&v239, a6);
        if ((*(_BYTE *)(a3 + 140) & 1) != 0)
          goto LABEL_293;
        v255 = *MEMORY[0x1E0CA2E18];
        v256 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
        memset(&v237, 0, sizeof(v237));
        fpfs_GetTime(v44, (uint64_t)&v237);
        v45 = *(_QWORD *)(v44 + 1040);
        if (v45)
        {
          v182 = 0;
          v46 = v203;
          v47 = v20;
          while (1)
          {
            if (v45 == a3)
              goto LABEL_94;
            if ((*(_DWORD *)(v45 + 140) & 0x1D) == 1
              && !*(_BYTE *)(v45 + 456)
              && *(_QWORD *)(v45 + 64) == *(_QWORD *)(a3 + 64))
            {
              v48 = *(_OWORD *)(v45 + 128);
              *(_QWORD *)(a3 + 144) = *(_QWORD *)(v45 + 144);
              *v213 = v48;
              v182 = v45;
            }
            v49 = *(_DWORD *)(v45 + 228);
            if ((v49 & 1) == 0)
              goto LABEL_94;
            v50 = *(_QWORD *)(v45 + 64);
            v51 = *(_QWORD *)(a3 + 64);
            if (v50 > v51)
              goto LABEL_94;
            if (v50 < v51)
              goto LABEL_93;
            if (fpfsi_areTracksSyncPairs(v45, a3))
              break;
LABEL_94:
            v45 = *(_QWORD *)(v45 + 8);
            if (!v45)
              goto LABEL_172;
          }
          v49 = *(_DWORD *)(v45 + 228);
LABEL_93:
          v255 = *(_QWORD *)(v45 + 216);
          v256 = *(_DWORD *)(v45 + 224);
          v47 = *(_QWORD *)(v45 + 232);
          v46 = v49;
          goto LABEL_94;
        }
        v182 = 0;
        v47 = v20;
        v46 = v203;
LABEL_172:
        *(_QWORD *)v212 = v255;
        *(_DWORD *)(a3 + 200) = v256;
        *(_DWORD *)(a3 + 204) = v46;
        v181 = v47;
        *(_QWORD *)(a3 + 208) = v47;
        LOBYTE(v78) = v46;
        if ((v46 & 0x1D) != 1)
        {
          LOBYTE(v78) = v46;
          if ((*(_DWORD *)(a3 + 140) & 0x1D) == 1)
          {
            rhs = v239;
            *(_OWORD *)&v236.value = *v213;
            v236.epoch = *(_QWORD *)(a3 + 144);
            CMTimeAdd(&lhs, &rhs, &v236);
            *v212 = *(_OWORD *)&lhs.value;
            *(_QWORD *)(a3 + 208) = lhs.epoch;
            v78 = *(_DWORD *)(a3 + 204);
          }
        }
        if ((v78 & 0x1D) != 1
          || (*(_OWORD *)&lhs.value = *v212, lhs.epoch = *(_QWORD *)(a3 + 208),
                                             rhs = v237,
                                             CMTimeCompare(&lhs, &rhs) < 0))
        {
          *v212 = *(_OWORD *)&v237.value;
          *(_QWORD *)(a3 + 208) = v237.epoch;
        }
        if (*(_DWORD *)(a3 + 32) == 1936684398)
        {
          TrackOfType = fpfs_LastTrackOfType((uint64_t)v187, 1936684398, a3);
          if (TrackOfType)
          {
            if (fpfs_canCrossfade(v185, TrackOfType, a3))
            {
              *(_OWORD *)&rhs.value = *v212;
              rhs.epoch = *(_QWORD *)(a3 + 208);
              v236 = *(CMTime *)gFSPAudioCrossfadeDuration;
              CMTimeSubtract(&lhs, &rhs, &v236);
              *v212 = *(_OWORD *)&lhs.value;
              epoch = lhs.epoch;
              *(_QWORD *)(a3 + 208) = lhs.epoch;
              *(_OWORD *)&rhs.value = *v212;
              rhs.epoch = epoch;
              *(_OWORD *)&v236.value = kAudioRampingDownSilenceDuration;
              v236.epoch = 0;
              CMTimeSubtract(&lhs, &rhs, &v236);
              *v212 = *(_OWORD *)&lhs.value;
              *(_QWORD *)(a3 + 208) = lhs.epoch;
            }
          }
        }
        v81 = *(_DWORD *)(a3 + 140);
        targeta = a6;
        v198 = v19;
        if ((v81 & 1) != 0)
        {
          *(_OWORD *)&v236.value = *v212;
          v236.epoch = *(_QWORD *)(a3 + 208);
          memset(&v235, 0, sizeof(v235));
          valuePtr = 0;
          number = 0;
          v82 = *(_QWORD *)(v44 + 928);
          AllocatorForMedia = FigGetAllocatorForMedia();
          FigBytePumpGetFigBaseObject(v82);
          v85 = v84;
          v86 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
          if (v86)
          {
            if (!v86(v85, CFSTR("FBP_MaxOverlapDurationForSwitching"), AllocatorForMedia, &number) && number != 0)
            {
              CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
              CFRelease(number);
            }
          }
          fpfs_GetTime(v44, (uint64_t)&lhs);
          v237 = lhs;
          lhs = v236;
          rhs = v237;
          if (CMTimeCompare(&lhs, &rhs) >= 1)
            v236 = v237;
          v88 = *(int *)(v44 + 2232);
          if (valuePtr <= (int)v88)
          {
            CMTimeMake(&v231, 2 * v88, 1);
            rhs = v236;
            CMTimeSubtract(&lhs, &rhs, &v231);
            v236 = lhs;
          }
          else
          {
            CMTimeMake(&v232, 2 * valuePtr, 1);
            lhs = v236;
            CMTimeSubtract(&v236, &lhs, &v232);
          }
          CMTimeMake(&v230, *(int *)(v44 + 2232), 1);
          *(_OWORD *)&lhs.value = *v212;
          lhs.epoch = *(_QWORD *)(a3 + 208);
          CMTimeAdd(&v235, &lhs, &v230);
          lhs = v239;
          *(_OWORD *)&rhs.value = *v213;
          rhs.epoch = *(_QWORD *)(a3 + 144);
          CMTimeAdd(&type, &lhs, &rhs);
          if (dword_1EE2A2A88)
          {
            v229 = 0;
            v228 = OS_LOG_TYPE_DEFAULT;
            v89 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v90 = v229;
            if (os_log_type_enabled(v89, v228))
              v91 = v90;
            else
              v91 = v90 & 0xFFFFFFFE;
            if (v91)
            {
              v92 = *(_QWORD *)v44;
              if (*(_QWORD *)v44)
                v93 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              else
                v93 = "";
              v180 = v93;
              v105 = v182;
              if (v187)
                v106 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v106 = "";
              v183 = v106;
              v107 = *(_DWORD *)(a3 + 16);
              *(_OWORD *)&lhs.value = *v212;
              lhs.epoch = *(_QWORD *)(a3 + 208);
              v108 = CMTimeGetSeconds(&lhs);
              *(_OWORD *)&lhs.value = *v213;
              lhs.epoch = *(_QWORD *)(a3 + 144);
              v109 = CMTimeGetSeconds(&lhs);
              if (v105)
                v110 = *(_DWORD *)(v105 + 16);
              else
                v110 = -1;
              lhs = type;
              v111 = CMTimeGetSeconds(&lhs);
              lhs = v239;
              v112 = CMTimeGetSeconds(&lhs);
              v113 = "";
              if (*(_BYTE *)(a3 + 456))
                v113 = "(gap track)";
              LODWORD(rhs.value) = 136317954;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SyncSampleBuffer";
              LOWORD(rhs.flags) = 2048;
              *(_QWORD *)((char *)&rhs.flags + 2) = v92;
              HIWORD(rhs.epoch) = 2082;
              v241 = v180;
              v242 = 2048;
              v243 = v187;
              v244 = 2082;
              v245 = v183;
              v246 = 1024;
              *(_DWORD *)v247 = v107;
              *(_WORD *)&v247[4] = 2048;
              *(Float64 *)&v247[6] = v108;
              v248 = 2048;
              v249 = v109;
              v250 = 1024;
              *(_DWORD *)v251 = v110;
              *(_WORD *)&v251[4] = 2048;
              *(Float64 *)&v251[6] = v111;
              *(_WORD *)&v251[14] = 2048;
              *(double *)&v251[16] = v112;
              v252 = 2080;
              v253 = v113;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!*(_BYTE *)(a3 + 184))
          {
            lhs = type;
            rhs = v236;
            if (CMTimeCompare(&lhs, &rhs) < 0 || (lhs = type, rhs = v235, CMTimeCompare(&lhs, &rhs) >= 1))
            {
              *v213 = *MEMORY[0x1E0CA2E18];
              *(_QWORD *)(a3 + 144) = v20;
            }
          }
          v81 = *(_DWORD *)(a3 + 140);
        }
        if ((v81 & 1) == 0)
        {
          *(_OWORD *)&rhs.value = *v212;
          rhs.epoch = *(_QWORD *)(a3 + 208);
          v236 = v239;
          CMTimeSubtract(&lhs, &rhs, &v236);
          *v213 = *(_OWORD *)&lhs.value;
          *(_QWORD *)(a3 + 144) = lhs.epoch;
          if (dword_1EE2A2A88)
          {
            LODWORD(v236.value) = 0;
            LOBYTE(v235.value) = 0;
            v114 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v115 = v236.value;
            if (os_log_type_enabled(v114, v235.value))
              v116 = v115;
            else
              v116 = v115 & 0xFFFFFFFE;
            if (v116)
            {
              v117 = *(_QWORD *)v44;
              v118 = "";
              if (*(_QWORD *)v44)
                v118 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              v192 = v20;
              if (v187)
                v119 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
              else
                v119 = "";
              v120 = *(_QWORD *)(a3 + 16);
              *(_OWORD *)&lhs.value = *v213;
              lhs.epoch = *(_QWORD *)(a3 + 144);
              v121 = CMTimeGetSeconds(&lhs);
              LODWORD(rhs.value) = 136316674;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SyncSampleBuffer";
              LOWORD(rhs.flags) = 2048;
              *(_QWORD *)((char *)&rhs.flags + 2) = v117;
              HIWORD(rhs.epoch) = 2082;
              v241 = v118;
              v242 = 2048;
              v243 = v187;
              v244 = 2082;
              v245 = v119;
              v246 = 1024;
              *(_DWORD *)v247 = v120;
              *(_WORD *)&v247[4] = 2048;
              *(Float64 *)&v247[6] = v121;
              _os_log_send_and_compose_impl();
              v20 = v192;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v19 = v198;
          }
        }
        if ((v46 & 1) != 0)
        {
          v122 = *(_DWORD *)(a3 + 32);
          if (v122 == 1986618469)
          {
            rhs = *(CMTime *)(v44 + 2744);
            v236.value = v255;
            v236.timescale = v256;
            v236.flags = v46;
            v236.epoch = v181;
            CMTimeMaximum(&lhs, &rhs, &v236);
            *(CMTime *)(v44 + 2744) = lhs;
            rhs = v239;
            *(_OWORD *)&v236.value = *v213;
            v236.epoch = *(_QWORD *)(a3 + 144);
            CMTimeAdd(&lhs, &rhs, &v236);
            *(CMTime *)(v44 + 2720) = lhs;
          }
          else if (v122 == 1936684398)
          {
            rhs = *(CMTime *)(v44 + 2696);
            v236.value = v255;
            v236.timescale = v256;
            v236.flags = v46;
            v236.epoch = v181;
            CMTimeMaximum(&lhs, &rhs, &v236);
            *(CMTime *)(v44 + 2696) = lhs;
            rhs = v239;
            *(_OWORD *)&v236.value = *v213;
            v236.epoch = *(_QWORD *)(a3 + 144);
            CMTimeAdd(&lhs, &rhs, &v236);
            *(CMTime *)(v44 + 2672) = lhs;
          }
        }
        if (dword_1EE2A2A88)
        {
          LODWORD(v236.value) = 0;
          LOBYTE(v235.value) = 0;
          v123 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v124 = v236.value;
          if (os_log_type_enabled(v123, v235.value))
            v125 = v124;
          else
            v125 = v124 & 0xFFFFFFFE;
          if (v125)
          {
            v126 = *(_QWORD *)v44;
            if (*(_QWORD *)v44)
              v127 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v127 = "";
            v184 = v127;
            v193 = v20;
            if (v187)
              v128 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v128 = "";
            v129 = *(_QWORD *)(a3 + 16);
            lhs = v239;
            *(_OWORD *)&rhs.value = *v213;
            rhs.epoch = *(_QWORD *)(a3 + 144);
            CMTimeAdd(&v227, &lhs, &rhs);
            v130 = CMTimeGetSeconds(&v227);
            *(_OWORD *)&lhs.value = *v212;
            lhs.epoch = *(_QWORD *)(a3 + 208);
            v131 = CMTimeGetSeconds(&lhs);
            lhs = v239;
            v132 = CMTimeGetSeconds(&lhs);
            v133 = *(_QWORD *)(a3 + 64);
            fpfs_GetTime(v44, (uint64_t)&v226);
            v134 = CMTimeGetSeconds(&v226);
            LODWORD(rhs.value) = 136317698;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SyncSampleBuffer";
            LOWORD(rhs.flags) = 2048;
            *(_QWORD *)((char *)&rhs.flags + 2) = v126;
            HIWORD(rhs.epoch) = 2082;
            v241 = v184;
            v242 = 2048;
            v243 = v187;
            v244 = 2082;
            v245 = v128;
            v246 = 1024;
            *(_DWORD *)v247 = v129;
            *(_WORD *)&v247[4] = 2048;
            *(Float64 *)&v247[6] = v130;
            v248 = 2048;
            v249 = v131;
            v250 = 2048;
            *(Float64 *)v251 = v132;
            *(_WORD *)&v251[8] = 1024;
            *(_DWORD *)&v251[10] = v133;
            *(_WORD *)&v251[14] = 2048;
            *(Float64 *)&v251[16] = v134;
            _os_log_send_and_compose_impl();
            v20 = v193;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v19 = v198;
        }
        v135 = *(_QWORD *)(a3 + 48);
        v136 = v44 + 16 * *(unsigned __int8 *)(a3 + 180);
        v25 = (CMTime *)(a3 + 128);
        if (v135 == *(_QWORD *)(v136 + 992) || v135 == *(_QWORD *)(v136 + 1000))
        {
          v137 = *v213;
          v138 = v44 + 24 * *(unsigned __int8 *)(a3 + 180);
          *(_QWORD *)(v138 + 264) = *(_QWORD *)(a3 + 144);
          *(_OWORD *)(v138 + 248) = v137;
        }
        a6 = targeta;
        if (fpfs_UseTrackToSetPumpOffset(a3))
        {
          v139 = (const __CFDictionary *)CMGetAttachment(targeta, key, 0);
          memset(&lhs, 0, sizeof(lhs));
          rhs = v239;
          *(_OWORD *)&v236.value = *v213;
          v236.epoch = *(_QWORD *)(a3 + 144);
          CMTimeAdd(&lhs, &rhs, &v236);
          if (v139)
          {
            CMTimeMakeFromDictionary(&rhs, v139);
            lhs = rhs;
            v236 = rhs;
            *(_OWORD *)&v235.value = *v213;
            v235.epoch = *(_QWORD *)(a3 + 144);
            CMTimeAdd(&rhs, &v236, &v235);
            lhs = rhs;
          }
          v140 = (CMTime *)(v44 + 24 * *(unsigned __int8 *)(a3 + 180));
          rhs = lhs;
          v236 = v140[50];
          fpfs_UpdatePumpOffset((uint64_t)v187, &rhs, &v236);
          if (*(_QWORD *)(v44 + 1584))
          {
            started = fpfs_UpdateDateInfo(a3, targeta);
            if ((_DWORD)started)
              goto LABEL_296;
          }
        }
        if (*(_DWORD *)(a3 + 32) == 1936684398
          && !fpfs_LastTrackOfType((uint64_t)v187, 1936684398, a3)
          && *(_QWORD *)(a3 + 48) != *(_QWORD *)(v44 + 16 * *(unsigned __int8 *)(a3 + 180) + 1000))
        {
          if (*(_QWORD *)(a3 + 96)
            || *(_BYTE *)(v44 + 2872)
            || *(_BYTE *)(v185 + 523)
            || (v162 = *(_QWORD *)(v185 + 536)) == 0
            || !FPSupport_IsAnAudioDeviceAvailable(v162)
            || (started = fpfs_EnsureRenderChainForTrack(*(_QWORD *)v44, (_QWORD *)a3, 1), !(_DWORD)started))
          {
            rhs = v239;
            *(_OWORD *)&v236.value = *v213;
            v236.epoch = *(_QWORD *)(a3 + 144);
            CMTimeAdd(&lhs, &rhs, &v236);
            type = lhs;
            CMSampleBufferSetOutputPresentationTimeStamp(targeta, &lhs);
            fpfs_ChangeTrackState(a3, 4u);
            started = fpfs_PushToNonVideoLateJoiner(a3, targeta);
          }
          goto LABEL_296;
        }
LABEL_293:
        rhs = v239;
        v237 = *v25;
        CMTimeAdd(&lhs, &rhs, &v237);
        type = lhs;
        CMSampleBufferSetOutputPresentationTimeStamp(a6, &lhs);
        v142 = *(_DWORD *)(a3 + 32);
        if (v142 == 1986618469)
        {
          IsVideoSync = fpfs_IsVideoSync(a6);
          if (!*(_QWORD *)(a3 + 96))
            fpfs_PreallocateVideoRendering((uint64_t *)a3);
          if (IsVideoSync && (*(_BYTE *)(a3 + 284) & 1) == 0)
            *(CMTime *)(a3 + 272) = type;
          Head = CMBufferQueueGetHead(*(CMBufferQueueRef *)(a3 + 72));
          if (IsVideoSync || Head)
          {
            if (IsVideoSync)
            {
              fpfs_GetTime(v44, (uint64_t)&v225);
              lhs = type;
              if (!fpfs_TimeIsAtOrAfter(v185, &lhs, &v225))
              {
                CMBufferQueueReset(*(CMBufferQueueRef *)(a3 + 72));
                v146 = *(_QWORD *)(a3 + 96);
                if (v146)
                {
                  v147 = *(opaqueCMBufferQueue **)(v146 + 40);
                  if (*(_QWORD *)(v146 + 56))
                    CMBufferQueueReset(v147);
                  else
                    MEMORY[0x19402B01C](v147, fpfs_PreserveResumeTag);
                }
                *(_BYTE *)(a3 + 185) = 1;
              }
            }
          }
          else if (!*(_BYTE *)(a3 + 183))
          {
            goto LABEL_363;
          }
          CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
          if (*(_QWORD *)(a3 + 48) == *(_QWORD *)(v44 + 16 * *(unsigned __int8 *)(a3 + 180) + 1000))
          {
            IsTrialReadyToComplete = fpfs_IsTrialReadyToComplete(v44, a3);
            if (!IsVideoSync)
              goto LABEL_359;
          }
          else
          {
            IsTrialReadyToComplete = 0;
            if (!IsVideoSync)
              goto LABEL_359;
          }
          if (!fpfs_CheckVideoSyncQueue(a3, IsTrialReadyToComplete))
          {
LABEL_359:
            *(_QWORD *)(v44 + 1168) = *(_QWORD *)(a3 + 16);
LABEL_360:
            if (*(_BYTE *)(a3 + 184) && *(_DWORD *)(a3 + 152) != 6)
              *(_BYTE *)(v44 + 1556) = 1;
LABEL_363:
            v17 = 0;
            v18 = 1;
LABEL_364:
            DerivedStorage = (uint64_t)v208;
            break;
          }
          started = fpfs_FinishVideoSync((const __CFArray **)a3);
          if (!(_DWORD)started)
            goto LABEL_360;
          goto LABEL_296;
        }
        if (v142 == 1936684398)
        {
          started = fpfs_SyncAudioBuffer(v44, a3, a6);
LABEL_296:
          v143 = started;
          goto LABEL_311;
        }
        if (!*(_BYTE *)(a3 + 184))
          goto LABEL_363;
        memset(&lhs, 0, sizeof(lhs));
        fpfs_GetEndOutputPresentationTimeStamp(a6, &lhs);
        rhs = lhs;
        *(_OWORD *)&v237.value = *v212;
        v237.epoch = *(_QWORD *)(a3 + 208);
        if (CMTimeCompare(&rhs, &v237) >= 1)
        {
          fpfs_GetTime(v44, (uint64_t)&v224);
          rhs = lhs;
          if ((CMTimeCompare(&rhs, &v224) & 0x80000000) == 0)
          {
            CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
            rhs = type;
            *(_OWORD *)&v237.value = *MEMORY[0x1E0CA2E18];
            v237.epoch = v20;
            started = fpfs_StartTrackPlaying((const void **)v44, a3, &rhs, MEMORY[0x1E0CA2E28], &v237);
            if ((_DWORD)started)
              goto LABEL_296;
          }
        }
        v143 = 0;
LABEL_311:
        if ((_DWORD)v143 != -12863 && (_DWORD)v143 != -12785 && (_DWORD)v143)
        {
          v172 = CMBaseObjectGetDerivedStorage();
          fpfs_StopPlayingItemWithOSStatus(v172, v187, v143);
          goto LABEL_390;
        }
        if ((_DWORD)v143)
          goto LABEL_390;
        v17 = 0;
        v18 = 1;
        DerivedStorage = (uint64_t)v208;
        break;
      case 2:
        if (*(_DWORD *)(a3 + 32) != 1986618469)
        {
          if (CMSampleBufferGetNumSamples(a6) < 1)
            goto LABEL_232;
          v26 = a3;
          v27 = 3;
          goto LABEL_165;
        }
        if (*(_BYTE *)(a3 + 184))
        {
          v52 = *(const __CFArray **)a3;
          v53 = CMBaseObjectGetDerivedStorage();
          v209 = CMBaseObjectGetDerivedStorage();
          memset(&lhs, 0, sizeof(lhs));
          CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a6);
          v54 = *(_QWORD *)(v53 + 1040);
          if (v54)
          {
            do
            {
              v55 = *(_QWORD *)(v54 + 8);
              if (v54 != a3 && (!*(_BYTE *)(v54 + 184) || *(_DWORD *)(v54 + 32) != 1986618469))
                fpfs_DeleteTrack(v52, v54);
              if (!v55)
                break;
              v54 = v55;
            }
            while (*(_QWORD *)(v53 + 1040));
          }
          *(_DWORD *)(v53 + 1552) = 1044549468;
          v188 = *MEMORY[0x1E0CA2E18];
          *(_OWORD *)(v53 + 1512) = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)(v53 + 1528) = v20;
          CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
          if (fpfs_CanRenderVideo(v209, (uint64_t)v52))
          {
            rhs = lhs;
            *(_OWORD *)&v239.value = v188;
            v239.epoch = v20;
            updated = fpfs_StartTrackPlaying((const void **)v53, a3, &rhs, MEMORY[0x1E0CA2E28], &v239);
            if ((_DWORD)updated)
              goto LABEL_215;
          }
          else
          {
            fpfs_ChangeTrackState(a3, 0);
          }
          fpfs_UpdateDimensions(v52, 1);
          rhs = lhs;
          updated = fpfs_StepIFrame(a3, (__int128 *)&rhs.value);
          if (!(_DWORD)updated)
            updated = fpfs_CheckIfLikelyToKeepUpAndNotify(*(void **)v53, v52, MEMORY[0x1E0CA2E68], 1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
LABEL_215:
          if ((_DWORD)updated)
            goto LABEL_440;
          goto LABEL_216;
        }
        if ((a4 & 1) == 0)
          goto LABEL_232;
        updated = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
        if ((_DWORD)updated)
          goto LABEL_389;
        fpfs_ChangeTrackState(a3, 3u);
LABEL_216:
        v17 = 0;
        v18 = 1;
        break;
      case 3:
        if ((*(_BYTE *)(DerivedStorage + 1500) & 1) != 0 && (*(_DWORD *)(a3 + 140) & 0x1D) == 1)
        {
          lhs = *v201;
          *(_OWORD *)&rhs.value = *v204;
          rhs.epoch = *(_QWORD *)(a3 + 412);
          CMTimeSubtract(&time2, &lhs, &rhs);
          lhs = v222;
          if (CMTimeCompare(&lhs, &time2) <= 0)
          {
            if (*(_DWORD *)(a3 + 32) == 1986618469)
            {
              v104 = a4 & (*(_DWORD *)(a3 + 32) == 1986618469);
            }
            else
            {
              v148 = *(_QWORD *)(a3 + 64);
              v149 = CMBaseObjectGetDerivedStorage();
              v150 = *(_QWORD *)(v149 + 1040);
              if (v150)
              {
                v104 = 0;
                v151 = 0;
                do
                {
                  if (*(_QWORD *)(v150 + 64) == v148 && (*(_DWORD *)(v150 + 140) & 0x1D) == 1)
                  {
                    v152 = *(_DWORD *)(v150 + 32);
                    if (v152 == 1936684398)
                      v151 = 1;
                    if (v152 == 1986618469)
                      v104 = 1;
                  }
                  v150 = *(_QWORD *)(v150 + 8);
                }
                while (v150);
              }
              else
              {
                v151 = 0;
                v104 = 0;
              }
              if (*(_QWORD *)(v149 + 1104))
                v104 = v151;
            }
            if (v104)
            {
              if (*(_BYTE *)(a3 + 420))
              {
                lhs = v222;
                fpfs_TrimAudioTrack(a3, &lhs);
              }
              else
              {
                CMBufferQueueReset(*(CMBufferQueueRef *)(a3 + 72));
              }
            }
          }
        }
        v56 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a3 + 72));
        if (!v56)
          goto LABEL_117;
        CMSampleBufferGetPresentationTimeStamp(&v221, v56);
        CMTimeMake(&v216, 100, 1000);
        lhs = v221;
        CMTimeAdd(&v220, &lhs, &v216);
        rhs = v220;
        *(_OWORD *)&v239.value = *v204;
        v239.epoch = *(_QWORD *)(a3 + 412);
        CMTimeAdd(&lhs, &rhs, &v239);
        v220 = lhs;
        lhs = v223;
        rhs = v220;
        if (CMTimeCompare(&lhs, &rhs) < 0 || !fpfs_AreTracksReadyToPlay(v206, *(_QWORD *)(a3 + 64), 0))
          goto LABEL_117;
        updated = fpfs_PerformInitialResolveOfAllWaitingTracks(v206);
        if ((_DWORD)updated)
          goto LABEL_429;
        v57 = *(_DWORD *)(a3 + 152);
        if (v57 <= 8 && ((1 << v57) & 0x1D0) != 0)
          goto LABEL_166;
LABEL_117:
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
        goto LABEL_232;
      case 4:
        if (*(_DWORD *)(a3 + 32) == 1986618469 && !*(_BYTE *)(a3 + 456))
        {
          fpfs_ChangeTrackState(a3, 5u);
          v17 = 0;
          v18 = 0;
          *(_BYTE *)(DerivedStorage + 469) = 0;
          break;
        }
        updated = fpfs_PushToNonVideoLateJoiner(a3, a6);
        if ((_DWORD)updated)
          goto LABEL_389;
        goto LABEL_216;
      case 6:
        if (!*(_BYTE *)(a3 + 184) || *(_DWORD *)(a3 + 32) != 1986618469)
          goto LABEL_231;
        if (*(_BYTE *)(DerivedStorage + 1556))
          goto LABEL_427;
        if (fpfs_IsVideoSync(a6))
        {
          lhs = v222;
          v210 = *MEMORY[0x1E0CA2E68];
          *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E68];
          v58 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          rhs.epoch = v58;
          if (CMTimeCompare(&lhs, &rhs) < 0)
          {
            *(_OWORD *)&v222.value = v210;
            v222.epoch = v58;
          }
          lhs = v222;
          CMSampleBufferSetOutputPresentationTimeStamp(a6, &lhs);
          fpfs_RenderBuffer(a3, a6);
          lhs = v222;
          updated = fpfs_StepIFrame(a3, (__int128 *)&lhs.value);
          if ((_DWORD)updated)
          {
LABEL_440:
            v143 = 0;
            if ((_DWORD)updated != -12863)
              goto LABEL_389;
            goto LABEL_390;
          }
        }
        else if (dword_1EE2A2A88 >= 2)
        {
          v98 = DerivedStorage;
          LODWORD(v239.value) = 0;
          LOBYTE(type.value) = 0;
          v99 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v100 = v239.value;
          if (os_log_type_enabled(v99, type.value))
            v101 = v100;
          else
            v101 = v100 & 0xFFFFFFFE;
          if (v101)
          {
            v199 = v19;
            v102 = *(_QWORD *)v98;
            if (*(_QWORD *)v98)
              v103 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v103 = "";
            v194 = v20;
            v153 = *(const __CFArray **)a3;
            if (*(_QWORD *)a3)
              v154 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v154 = "";
            lhs = v223;
            v155 = CMTimeGetSeconds(&lhs);
            v156 = *(_DWORD *)(v98 + 944);
            LODWORD(rhs.value) = 136316674;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
            LOWORD(rhs.flags) = 2048;
            *(_QWORD *)((char *)&rhs.flags + 2) = v102;
            HIWORD(rhs.epoch) = 2082;
            v241 = v103;
            v242 = 2048;
            v243 = v153;
            v244 = 2082;
            v245 = v154;
            v246 = 2048;
            *(Float64 *)v247 = v155;
            *(_WORD *)&v247[8] = 1024;
            *(_DWORD *)&v247[10] = v156;
            _os_log_send_and_compose_impl();
            v20 = v194;
            v19 = v199;
          }
          v18 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v17 = 0;
          DerivedStorage = v98;
          break;
        }
LABEL_232:
        v17 = 0;
LABEL_233:
        v18 = 1;
        break;
      case 7:
        fpfs_GetEndOutputPresentationTimeStamp(a6, &time1);
        *(_OWORD *)&lhs.value = *v212;
        lhs.epoch = *(_QWORD *)(a3 + 208);
        if (CMTimeCompare(&time1, &lhs) < 0)
        {
          if (fpfs_IsVideoSync(a6))
          {
            v76 = *(_QWORD *)(a3 + 96);
            if (v76)
            {
              v77 = *(opaqueCMBufferQueue **)(v76 + 40);
              if (*(_QWORD *)(v76 + 56))
                CMBufferQueueReset(v77);
              else
                MEMORY[0x19402B01C](v77, fpfs_PreserveResumeTag);
            }
            *(_BYTE *)(a3 + 185) = 1;
          }
          fpfs_DoNotDisplay(a6);
LABEL_231:
          fpfs_RenderBuffer(a3, a6);
          goto LABEL_232;
        }
        v59 = *(_QWORD *)(a3 + 96);
        if (v59)
        {
          v60 = *v19;
          if (*v19 != a3 && v60)
          {
            do
            {
              if (*(_QWORD *)(v60 + 96) == v59)
                break;
              v60 = *(_QWORD *)(v60 + 8);
            }
            while (v60 != a3 && v60 != 0);
          }
          if (v60 == a3)
          {
            FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v59 + 32));
            v63 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
            if (v63)
              v63(FigBaseObject, CFSTR("Suspended"), v200);
          }
        }
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
        *(_OWORD *)&lhs.value = *v212;
        lhs.epoch = *(_QWORD *)(a3 + 208);
        *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E18];
        rhs.epoch = v20;
        updated = fpfs_StartTrackPlaying((const void **)DerivedStorage, a3, &lhs, MEMORY[0x1E0CA2E28], &rhs);
        if ((_DWORD)updated)
          goto LABEL_389;
        goto LABEL_216;
      case 8:
        if (!dword_1EE2A2A88)
          goto LABEL_232;
        v208 = (uint64_t *)DerivedStorage;
        LODWORD(v239.value) = 0;
        LOBYTE(type.value) = 0;
        v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v65 = v239.value;
        if (os_log_type_enabled(v64, type.value))
          v66 = v65;
        else
          v66 = v65 & 0xFFFFFFFE;
        if (v66)
        {
          v197 = v19;
          v67 = *v208;
          if (*v208)
            v68 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v68 = "";
          v191 = v20;
          v94 = *(const __CFArray **)a3;
          if (*(_QWORD *)a3)
            v95 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v95 = "";
          v96 = *(_QWORD *)(a3 + 16);
          lhs = v222;
          v97 = CMTimeGetSeconds(&lhs);
          LODWORD(rhs.value) = 136316674;
          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
          LOWORD(rhs.flags) = 2048;
          *(_QWORD *)((char *)&rhs.flags + 2) = v67;
          HIWORD(rhs.epoch) = 2082;
          v241 = v68;
          v242 = 2048;
          v243 = v94;
          v244 = 2082;
          v245 = v95;
          v246 = 1024;
          *(_DWORD *)v247 = v96;
          *(_WORD *)&v247[4] = 2048;
          *(Float64 *)&v247[6] = v97;
          _os_log_send_and_compose_impl();
          v20 = v191;
          v19 = v197;
        }
        v18 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v17 = 0;
        goto LABEL_364;
      default:
        goto LABEL_233;
    }
LABEL_365:
    v158 = v19;
    do
    {
      v159 = *v158;
      v158 = (_QWORD *)(*v158 + 8);
      if (v159)
        v160 = v159 == a3;
      else
        v160 = 1;
    }
    while (!v160);
    if (!v159)
    {
      v161 = *(_QWORD *)(DerivedStorage + 1056);
      if (!v161)
        break;
      while (v161 != a3)
      {
        v161 = *(_QWORD *)(v161 + 8);
        if (!v161)
          goto LABEL_382;
      }
      if (!a3)
        break;
    }
  }
LABEL_382:
  LODWORD(v239.value) = 0;
  LOBYTE(type.value) = 0;
  v163 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v164 = v239.value;
  if (os_log_type_enabled(v163, type.value))
    v165 = v164;
  else
    v165 = v164 & 0xFFFFFFFE;
  if (v165)
  {
    LODWORD(rhs.value) = 136315138;
    *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_388:
  updated = FigSignalErrorAt();
LABEL_389:
  v143 = updated;
LABEL_390:
  if (a6)
    CFRelease(a6);
  return v143;
}

uint64_t fpfs_TrackEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return fpfs_StopFeedingTrack(a3, a4, a4 == 0);
}

uint64_t fpfs_PushToNonVideoLateJoiner(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CMTime v6;
  CMTime rhs;
  CMTime v8;
  CMTime time2;
  CMTime time1;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v13, 0, sizeof(v13));
  fpfs_GetEndOutputPresentationTimeStamp(a2, &v13);
  v12 = *(CMTime *)(a1 + 192);
  memset(&v11, 0, sizeof(v11));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v11);
  if (*(_DWORD *)(a1 + 32) == 1986618469 && !*(_BYTE *)(a1 + 456))
    return 0;
  time1 = v12;
  time2 = v11;
  if (CMTimeCompare(&time1, &time2) < 0)
    v12 = v11;
  time1 = v13;
  time2 = v11;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    time1 = v12;
    time2 = *(CMTime *)(a1 + 396);
    CMTimeSubtract(&v8, &time1, &time2);
    time1 = v13;
    if (CMTimeCompare(&time1, &v8) < 1)
      return 0;
  }
  if (*(_DWORD *)(a1 + 32) != 1936684398)
  {
    time1 = v12;
    time2 = *(CMTime *)(a1 + 396);
    CMTimeSubtract(&v6, &time1, &time2);
    time1 = v13;
    if (CMTimeCompare(&time1, &v6) >= 1)
    {
      CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a1 + 72), a2);
      time1 = v13;
      time2 = v12;
      result = CMTimeCompare(&time1, &time2) > 0;
      if (!(_DWORD)result)
        return result;
      goto LABEL_14;
    }
    return 0;
  }
  memset(&time1, 0, sizeof(time1));
  CMTimeMake(&time1, 250, 1000);
  if (*(float *)(DerivedStorage + 840) != 0.0)
  {
    time2 = v12;
    rhs = time1;
    CMTimeAdd(&v12, &time2, &rhs);
  }
  time2 = v12;
  result = (uint64_t)fpfs_IsAudioTrackReadyToStart(a1, a2, &time2, 0);
  if ((_DWORD)result)
  {
LABEL_14:
    time1 = v12;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    result = fpfs_StartTrackPlaying((const void **)DerivedStorage, a1, &time1, MEMORY[0x1E0CA2E28], &time2);
    if ((_DWORD)result)
      return result;
    if (fpfs_FirstRenderingTrackofType(*(_QWORD *)a1, 1936684398) == a1)
      fpfs_SetRateOnTrack((uint64_t *)a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], *(float *)(DerivedStorage + 840));
    return 0;
  }
  return result;
}

void fpfs_PreserveResumeTag(const void *a1, uint64_t a2)
{
  CFTypeRef v3;
  const void *v4;

  v3 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA26E0], 0);
  if (v3)
  {
    v4 = *(const void **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v3;
    CFRetain(v3);
    if (v4)
      CFRelease(v4);
  }
}

BOOL fpfs_UseTrackToSetPumpOffset(uint64_t a1)
{
  uint64_t DerivedStorage;
  _BOOL4 valid;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valid = fpfs_audioOnlyValidAlternateList(DerivedStorage);
  if ((*(_BYTE *)(DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180) + 1212) & 1) == 0
    || *(_QWORD *)(a1 + 48) == *(_QWORD *)(DerivedStorage + 16 * *(unsigned __int8 *)(a1 + 180) + 1000))
  {
    return 0;
  }
  v4 = *(_DWORD *)(a1 + 32);
  if (v4 == 1986618469)
    return 1;
  return valid && v4 == 1936684398;
}

uint64_t fpfs_UpdatePumpOffset(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t result;
  uint64_t v7;
  CMTime *v8;
  int v9;
  __int128 *v10;
  _OWORD *v11;
  CMTimeEpoch epoch;
  __int128 v13;
  CMTimeEpoch v14;
  CMTimeEpoch v15;
  uint64_t v16;
  NSObject *v17;
  unsigned int value;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  Float64 Seconds;
  Float64 v24;
  Float64 v25;
  Float64 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime time;
  os_log_type_t type;
  int v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime rhs;
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  Float64 v50;
  __int16 v51;
  Float64 v52;
  __int16 v53;
  Float64 v54;
  __int16 v55;
  Float64 v56;
  CMTime lhs;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  v7 = result;
  v8 = (CMTime *)(result + 1296);
  v9 = *(_DWORD *)(result + 1308);
  v10 = (__int128 *)MEMORY[0x1E0CA2E18];
  if ((v9 & 1) != 0)
  {
    memset(&v42, 0, sizeof(v42));
    v11 = (_OWORD *)(result + 1272);
    lhs = *a3;
    rhs = *(CMTime *)(result + 1272);
    CMTimeSubtract(&v42, &lhs, &rhs);
    memset(&v41, 0, sizeof(v41));
    lhs = *a2;
    rhs = *v8;
    CMTimeSubtract(&v41, &lhs, &rhs);
    memset(&v40, 0, sizeof(v40));
    memset(&v39, 0, sizeof(v39));
    CMTimeMake(&v39, 1, 1);
    lhs = v42;
    rhs = v41;
    if (CMTimeCompare(&lhs, &rhs) < 0)
    {
      lhs = v41;
      *(_OWORD *)&rhs.value = *(_OWORD *)&v42.value;
      epoch = v42.epoch;
    }
    else
    {
      lhs = v42;
      *(_OWORD *)&rhs.value = *(_OWORD *)&v41.value;
      epoch = v41.epoch;
    }
    rhs.epoch = epoch;
    CMTimeSubtract(&v40, &lhs, &rhs);
    lhs = v40;
    rhs = v39;
    result = CMTimeCompare(&lhs, &rhs);
    if ((result & 0x80000000) == 0)
    {
      if (dword_1EE2A2A88)
      {
        v38 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        v10 = (__int128 *)MEMORY[0x1E0CA2E18];
      }
      v13 = *v10;
      *(_OWORD *)&v8->value = *v10;
      v14 = *((_QWORD *)v10 + 2);
      v8->epoch = v14;
      *v11 = v13;
      *(_QWORD *)(v7 + 1288) = v14;
    }
    v9 = *(_DWORD *)(v7 + 1308);
  }
  if ((v9 & 1) == 0)
  {
    rhs = *a3;
    v42 = *a2;
    CMTimeSubtract(&lhs, &rhs, &v42);
    *(_OWORD *)(v7 + 1176) = *(_OWORD *)&lhs.value;
    v15 = lhs.epoch;
    *(_QWORD *)(v7 + 1192) = lhs.epoch;
    v16 = *(_QWORD *)(v7 + 96);
    *(_OWORD *)&lhs.value = *(_OWORD *)(v7 + 1176);
    lhs.epoch = v15;
    result = FigAlternatePlaybackBitrateMonitorSetPumpOffset(v16, (uint64_t)&lhs);
    if (dword_1EE2A2A88)
    {
      LODWORD(v42.value) = 0;
      LOBYTE(v41.value) = 0;
      v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = v42.value;
      if (os_log_type_enabled(v17, v41.value))
        v19 = value;
      else
        v19 = value & 0xFFFFFFFE;
      if (v19)
      {
        v20 = *(_QWORD *)v7;
        if (*(_QWORD *)v7)
          v21 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        else
          v21 = "";
        v34 = v21;
        if (a1)
          v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
        else
          v22 = "";
        v33 = v22;
        lhs = *(CMTime *)(v7 + 1176);
        Seconds = CMTimeGetSeconds(&lhs);
        fpfs_GetTime(v7, (uint64_t)&time);
        v24 = CMTimeGetSeconds(&time);
        lhs = *a3;
        v25 = CMTimeGetSeconds(&lhs);
        lhs = *a2;
        v26 = CMTimeGetSeconds(&lhs);
        LODWORD(rhs.value) = 136317186;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_UpdatePumpOffset";
        LOWORD(rhs.flags) = 2048;
        *(_QWORD *)((char *)&rhs.flags + 2) = v20;
        HIWORD(rhs.epoch) = 2082;
        v44 = v34;
        v45 = 2048;
        v46 = a1;
        v47 = 2082;
        v48 = v33;
        v49 = 2048;
        v50 = Seconds;
        v51 = 2048;
        v52 = v24;
        v53 = 2048;
        v54 = v25;
        v55 = 2048;
        v56 = v26;
        _os_log_send_and_compose_impl();
      }
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      v10 = (__int128 *)MEMORY[0x1E0CA2E18];
    }
    v27 = *(_OWORD *)&a2->value;
    v8->epoch = a2->epoch;
    *(_OWORD *)&v8->value = v27;
    v28 = *(_OWORD *)&a3->value;
    *(_QWORD *)(v7 + 1288) = a3->epoch;
    *(_OWORD *)(v7 + 1272) = v28;
  }
  v29 = 0;
  v30 = *v10;
  v31 = *((_QWORD *)v10 + 2);
  do
  {
    v32 = v7 + 1200 + v29;
    *(_OWORD *)v32 = v30;
    *(_QWORD *)(v32 + 16) = v31;
    v29 += 24;
  }
  while (v29 != 72);
  return result;
}

uint64_t fpfs_UpdateDateInfo(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _OWORD *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  const void *v11;
  CMTimeValue *v12;
  uint64_t v13;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v17;
  CMTime v18;
  CMTime lhs;
  CMTime v20;
  CMTime v21;
  CMTime time2;
  CMTime rhs;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(a1 + 140) & 0x1D) == 1)
  {
    v5 = DerivedStorage;
    v6 = (_OWORD *)(a1 + 128);
    v7 = *(const void **)(DerivedStorage + 1584);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      CMSampleBufferGetPresentationTimeStamp(&v21, a2);
      v9 = *(_QWORD *)(a1 + 64);
      rhs = *(CMTime *)(v5 + 1560);
      time2 = *(CMTime *)(v5 + 1176);
      *(_OWORD *)&v20.value = *v6;
      v20.epoch = *(_QWORD *)(a1 + 144);
      result = fpfsi_AddDateToQueue(v8, v7, (uint64_t)&rhs, (__int128 *)&time2.value, (__int128 *)&v21.value, (uint64_t)&v20, v9, 0, 1);
      if ((_DWORD)result)
        return result;
      v11 = *(const void **)(v5 + 1584);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(v5 + 1584) = 0;
      }
    }
    if (*(_QWORD *)(v5 + 1592) && (*(_BYTE *)(v5 + 1500) & 1) != 0)
    {
      v12 = (CMTimeValue *)(v5 + 1488);
      memset(&v20, 0, sizeof(v20));
      CMSampleBufferGetPresentationTimeStamp(&lhs, a2);
      *(_OWORD *)&rhs.value = *v6;
      rhs.epoch = *(_QWORD *)(a1 + 144);
      CMTimeAdd(&v20, &lhs, &rhs);
      memset(&v18, 0, sizeof(v18));
      rhs = v20;
      time2 = *(CMTime *)(v5 + 1176);
      CMTimeAdd(&v18, &rhs, &time2);
      v13 = *(_QWORD *)(v5 + 1592);
      time2 = v18;
      fpfs_GetPreciseTimeForDate((CMTime *)v5, v13, &time2, (uint64_t)&rhs);
      value = rhs.value;
      flags = rhs.flags;
      timescale = rhs.timescale;
      if ((rhs.flags & 1) != 0)
      {
        epoch = rhs.epoch;
        *v12 = value;
        *(_DWORD *)(v5 + 1496) = timescale;
        *(_DWORD *)(v5 + 1500) = flags;
        *(_QWORD *)(v5 + 1504) = epoch;
      }
      rhs = *(CMTime *)(a1 + 192);
      *(_OWORD *)&time2.value = *(_OWORD *)v12;
      time2.epoch = *(_QWORD *)(v5 + 1504);
      if (CMTimeCompare(&rhs, &time2) >= 1 || dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v17 = *(const void **)(v5 + 1592);
      if (v17)
      {
        CFRelease(v17);
        *(_QWORD *)(v5 + 1592) = 0;
      }
    }
  }
  return 0;
}

uint64_t fpfs_SyncAudioBuffer(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  CMTimeEpoch v6;
  opaqueCMSampleBuffer *Head;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v9;
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  CMTime *v18;
  uint64_t v19;
  _OWORD *v20;
  NSObject *v21;
  unsigned int value;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  Float64 Seconds;
  int v31;
  int64_t v32;
  int32_t v33;
  uint64_t result;
  opaqueCMSampleBuffer *v35;
  NSObject *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  const char *v40;
  opaqueCMSampleBuffer *v41;
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  int v50;
  Float64 v51;
  Float64 v52;
  Float64 v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  Float64 v57;
  Float64 v58;
  const char *v59;
  CMTimeEpoch v60;
  __int128 v61;
  const char *v62;
  const char *v63;
  CMTime v64;
  CMTime time;
  CMTime v66;
  os_log_type_t type;
  CMTime v68;
  CMTime rhs;
  _BYTE refcon[48];
  CMTime v71;
  CMTime v72;
  CMTime v73;
  CMTime v74;
  CMTime v75;
  CMTime v76;
  CMTime v77;
  CMTime time2;
  const char *v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  _BYTE v85[24];
  __int16 v86;
  Float64 v87;
  __int16 v88;
  Float64 v89;
  __int16 v90;
  CMTimeValue v91;
  __int16 v92;
  CMTimeScale timescale;
  __int16 v94;
  double v95;
  CMTime time1;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  memset(&v77, 0, sizeof(v77));
  memset(&v76, 0, sizeof(v76));
  CMSampleBufferGetOutputPresentationTimeStamp(&v76, a3);
  memset(&v74, 0, sizeof(v74));
  if (*(_QWORD *)(a2 + 48) == *(_QWORD *)(a1 + 16 * *(unsigned __int8 *)(a2 + 180) + 992))
  {
    *(_OWORD *)&v73.value = *(_OWORD *)(a2 + 192);
    v6 = *(_QWORD *)(a2 + 208);
  }
  else
  {
    *(_OWORD *)&v73.value = *MEMORY[0x1E0CA2E30];
    v6 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  }
  v73.epoch = v6;
  memset(&v75, 0, sizeof(v75));
  if (!*(_BYTE *)(a2 + 183) && !CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 848)))
  {
    memset(&v72, 0, sizeof(v72));
    Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 848));
    CMSampleBufferGetPresentationTimeStamp(&v72, Head);
    memset(&v71, 0, sizeof(v71));
    CMSampleBufferGetPresentationTimeStamp(&v71, a3);
    time1 = v72;
    time2 = v71;
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      memset(&refcon[16], 0, 32);
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      *(_QWORD *)refcon = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)&refcon[8] = a3;
      *(_OWORD *)&refcon[24] = *MEMORY[0x1E0CA2E18];
      v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(_QWORD *)&refcon[16] = 0;
      *(_QWORD *)&refcon[40] = v9;
      CMSampleBufferGetDuration(&rhs, a3);
      time2 = *(CMTime *)(a2 + 320);
      CMTimeAdd(&time1, &time2, &rhs);
      *(CMTime *)(a2 + 320) = time1;
      if (*(_QWORD *)refcon)
      {
        CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 848), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_QueueSearch, refcon);
        if ((refcon[36] & 1) != 0 && FPSupport_AudioSamplesAreDiverse(a3))
        {
          memset(&v68, 0, sizeof(v68));
          time1 = *(CMTime *)&refcon[24];
          time2 = v76;
          CMTimeSubtract(&v68, &time1, &time2);
          time1 = v68;
          v61 = *MEMORY[0x1E0CA2E68];
          time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          epoch = time2.epoch;
          v60 = time2.epoch;
          if (CMTimeCompare(&time1, &time2))
          {
            if (dword_1EE2A2A88)
            {
              LODWORD(v66.value) = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              epoch = v60;
            }
            time2 = *(CMTime *)(a2 + 128);
            v66 = v68;
            CMTimeAdd(&time1, &time2, &v66);
            *(CMTime *)(a2 + 128) = time1;
            v13 = *(_QWORD *)(a2 + 48);
            v14 = a1 + 16 * *(unsigned __int8 *)(a2 + 180);
            if (v13 == *(_QWORD *)(v14 + 992) || v13 == *(_QWORD *)(v14 + 1000))
            {
              v15 = *(_OWORD *)(a2 + 128);
              v16 = a1 + 24 * *(unsigned __int8 *)(a2 + 180);
              *(_QWORD *)(v16 + 264) = *(_QWORD *)(a2 + 144);
              *(_OWORD *)(v16 + 248) = v15;
            }
            time2 = v76;
            v66 = v68;
            CMTimeAdd(&time1, &time2, &v66);
            v76 = time1;
            CMSampleBufferSetOutputPresentationTimeStamp(a3, &time1);
            time2 = *(CMTime *)(a2 + 216);
            v66 = v68;
            CMTimeAdd(&time1, &time2, &v66);
            *(CMTime *)(a2 + 216) = time1;
          }
          else if (dword_1EE2A2A88)
          {
            LODWORD(v66.value) = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            epoch = v60;
          }
          *(_BYTE *)(a2 + 183) = 1;
          if (!*(_BYTE *)(a2 + 420))
            CMBufferQueueReset(*(CMBufferQueueRef *)(a2 + 72));
          time2 = v76;
          v66 = *(CMTime *)(a2 + 396);
          CMTimeAdd(&time1, &time2, &v66);
          *(CMTime *)(a2 + 296) = time1;
          v17 = *(_QWORD *)(a1 + 1040);
          if (v17)
          {
            v18 = (CMTime *)(a2 + 128);
            do
            {
              if (!*(_QWORD *)(a1 + 1040))
                break;
              v19 = v17;
              v17 = *(_QWORD *)(v17 + 8);
              if (*(_QWORD *)(v19 + 48) == *(_QWORD *)(a2 + 48) && (*(_BYTE *)(v19 + 140) & 1) != 0)
              {
                v20 = (_OWORD *)(v19 + 128);
                time2 = *v18;
                v66 = *(CMTime *)(v19 + 128);
                CMTimeSubtract(&time1, &time2, &v66);
                v68 = time1;
                *(_OWORD *)&time2.value = v61;
                time2.epoch = epoch;
                if (CMTimeCompare(&time1, &time2))
                {
                  if (dword_1EE2A2A88)
                  {
                    LODWORD(v66.value) = 0;
                    type = OS_LOG_TYPE_DEFAULT;
                    v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    value = v66.value;
                    v23 = os_log_type_enabled(v21, type);
                    v24 = value & 0xFFFFFFFE;
                    if (v23)
                      v24 = value;
                    if (v24)
                    {
                      v25 = *(_QWORD *)a1;
                      if (*(_QWORD *)a1)
                        v26 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                      else
                        v26 = "";
                      v59 = v26;
                      v27 = *(_QWORD *)a2;
                      if (*(_QWORD *)a2)
                        v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                      else
                        v28 = "";
                      v29 = *(_QWORD *)(v19 + 16);
                      time1 = v68;
                      Seconds = CMTimeGetSeconds(&time1);
                      LODWORD(time2.value) = 136316674;
                      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_SyncAudioBuffer";
                      LOWORD(time2.flags) = 2048;
                      *(_QWORD *)((char *)&time2.flags + 2) = v25;
                      HIWORD(time2.epoch) = 2082;
                      v79 = v59;
                      v80 = 2048;
                      v81 = v27;
                      v82 = 2082;
                      v83 = v28;
                      v84 = 2048;
                      *(_QWORD *)v85 = v29;
                      *(_WORD *)&v85[8] = 2048;
                      *(Float64 *)&v85[10] = Seconds;
                      _os_log_send_and_compose_impl();
                      epoch = v60;
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v18 = (CMTime *)(a2 + 128);
                  }
                  *(_OWORD *)&time2.value = *v20;
                  time2.epoch = *(_QWORD *)(v19 + 144);
                  v66 = v68;
                  CMTimeAdd(&time1, &time2, &v66);
                  *v20 = *(_OWORD *)&time1.value;
                  *(_QWORD *)(v19 + 144) = time1.epoch;
                  time2 = *(CMTime *)(v19 + 216);
                  v66 = v68;
                  CMTimeAdd(&time1, &time2, &v66);
                  *(CMTime *)(v19 + 216) = time1;
                  time2 = *(CMTime *)(v19 + 272);
                  v66 = v68;
                  CMTimeAdd(&time1, &time2, &v66);
                  *(CMTime *)(v19 + 272) = time1;
                  CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v19 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_AdjustTime, (void *)v19);
                  if (*(_QWORD *)(v19 + 264))
                    fpfs_VideoSyncTimerProc(*(_QWORD *)(a1 + 16), *(_QWORD *)(v19 + 16));
                }
              }
            }
            while (v17);
          }
        }
        free(*(void **)&refcon[16]);
        CFRelease(*(CFTypeRef *)refcon);
      }
    }
  }
  fpfs_GetTime(a1, (uint64_t)&v74);
  if (*(_BYTE *)(a2 + 183))
  {
    v31 = *(_QWORD *)(a2 + 48) == *(_QWORD *)(a1 + 16 * *(unsigned __int8 *)(a2 + 180) + 1000)
       && fpfs_IsTrialReadyToComplete(a1, a2);
    time1 = v74;
    time2 = v73;
    result = fpfs_CheckAudioSync(a1, a2, a3, &time1, &time2, v31, &v75);
    if ((_DWORD)result)
    {
      v35 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a2 + 72));
      memset(refcon, 0, 24);
      CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)refcon, v35);
      if (dword_1EE2A2A88)
      {
        LODWORD(v72.value) = 0;
        LOBYTE(v71.value) = 0;
        v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v37 = v72.value;
        if (os_log_type_enabled(v36, v71.value))
          v38 = v37;
        else
          v38 = v37 & 0xFFFFFFFE;
        if (v38)
        {
          v39 = *(_QWORD *)a1;
          if (v39)
            v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          else
            v40 = "";
          v62 = v40;
          v47 = *(_QWORD *)a2;
          if (*(_QWORD *)a2)
            v48 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
          else
            v48 = "";
          v49 = *(_QWORD *)refcon;
          v50 = *(_DWORD *)&refcon[8];
          time1 = *(CMTime *)refcon;
          v51 = CMTimeGetSeconds(&time1);
          fpfs_GetEndOutputPresentationTimeStamp(v35, &time);
          v52 = CMTimeGetSeconds(&time);
          CMSampleBufferGetPresentationTimeStamp(&v64, v35);
          v53 = CMTimeGetSeconds(&v64);
          LODWORD(time2.value) = 136318210;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_SyncAudioBuffer";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v39;
          HIWORD(time2.epoch) = 2082;
          v79 = v62;
          v80 = 2048;
          v81 = v47;
          v82 = 2082;
          v83 = v48;
          v84 = 2048;
          *(_QWORD *)v85 = v49;
          *(_WORD *)&v85[8] = 1024;
          *(_DWORD *)&v85[10] = v50;
          *(_WORD *)&v85[14] = 2048;
          *(Float64 *)&v85[16] = v51;
          v86 = 2048;
          v87 = v52;
          v88 = 2048;
          v89 = v53;
          v90 = 2048;
          v91 = v75.value;
          v92 = 1024;
          timescale = v75.timescale;
          v94 = 2048;
          v95 = (double)v75.value / (double)v75.timescale;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      time1 = v75;
      return fpfs_FinishAudioSyncAndStart((_QWORD *)a2, &time1);
    }
    return result;
  }
  memset(refcon, 0, 24);
  if (*(_QWORD *)(a2 + 48) == *(_QWORD *)(a1 + 16 * *(unsigned __int8 *)(a2 + 180) + 1000))
  {
    v32 = 50;
    v33 = 1000;
  }
  else
  {
    v32 = 4;
    v33 = 1;
  }
  CMTimeMake((CMTime *)refcon, v32, v33);
  fpfs_GetEndOutputPresentationTimeStamp(a3, &v77);
  time1 = v77;
  time2 = v74;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    if (*(_BYTE *)(a2 + 420))
    {
      time1 = v74;
      fpfs_TrimAudioTrack(a2, &time1);
      time1 = v74;
      fpfsi_TrimCachedSamplesFromTrack(a2, 0, &time1, 0, 0, 0);
    }
    else
    {
      CMBufferQueueReset(*(CMBufferQueueRef *)(a2 + 72));
      CMBufferQueueReset(*(CMBufferQueueRef *)(a2 + 80));
    }
    return 0;
  }
  time1 = *(CMTime *)(a2 + 320);
  time2 = *(CMTime *)refcon;
  if (CMTimeCompare(&time1, &time2) <= 0 && !CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 848)))
  {
    time1 = v77;
    time2 = v73;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 72), a3);
      return 0;
    }
  }
  v41 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a2 + 72));
  memset(&v72, 0, sizeof(v72));
  if (v41)
    CMSampleBufferGetOutputPresentationTimeStamp(&v72, v41);
  else
    v72 = v76;
  if (dword_1EE2A2A88)
  {
    LODWORD(v71.value) = 0;
    LOBYTE(v68.value) = 0;
    v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v43 = v71.value;
    if (os_log_type_enabled(v42, v68.value))
      v44 = v43;
    else
      v44 = v43 & 0xFFFFFFFE;
    if (v44)
    {
      v45 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v46 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      else
        v46 = "";
      v63 = v46;
      v54 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      else
        v55 = "";
      v56 = *(_QWORD *)(a2 + 16);
      time1 = v74;
      v57 = CMTimeGetSeconds(&time1);
      time1 = v76;
      v58 = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136316930;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_SyncAudioBuffer";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = v45;
      HIWORD(time2.epoch) = 2082;
      v79 = v63;
      v80 = 2048;
      v81 = v54;
      v82 = 2082;
      v83 = v55;
      v84 = 1024;
      *(_DWORD *)v85 = v56;
      *(_WORD *)&v85[4] = 2048;
      *(Float64 *)&v85[6] = v57;
      *(_WORD *)&v85[14] = 2048;
      *(Float64 *)&v85[16] = v58;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_BYTE *)(a2 + 183) = 1;
  *(_BYTE *)(a2 + 185) = 1;
  time2 = v72;
  v71 = *(CMTime *)(a2 + 396);
  CMTimeAdd(&time1, &time2, &v71);
  *(CMTime *)(a2 + 296) = time1;
  return fpfs_SyncAudioBuffer(a1, a2, a3);
}

uint64_t fpfs_QueueSearch(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  uint64_t v4;
  opaqueCMSampleBuffer *ValueAtIndex;
  const __CFDictionary *v7;
  CMTime v8;
  CMTime v9;
  CMTime presentationTimeStamp;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMSampleTimingInfo lhs;
  CMTime v16;
  CMTime v17;
  CMTime rhs;
  CMTime time2;
  CMItemCount v20;
  CFIndex v21;
  CMTime v22;
  CMTime v23;

  memset(&v23, 0, sizeof(v23));
  CMSampleBufferGetPresentationTimeStamp(&v23, a1);
  memset(&v22, 0, sizeof(v22));
  CMSampleBufferGetPresentationTimeStamp(&v22, *(CMSampleBufferRef *)(a2 + 8));
  v20 = 0;
  v21 = 0;
  if (fpfs_IsMarkerOnly(a1))
    return 0;
  v4 = 1;
  CMTimeMake(&rhs, 2, 1);
  lhs.duration = v23;
  CMTimeSubtract(&time2, &lhs.duration, &rhs);
  lhs.duration = v22;
  if (CMTimeCompare(&lhs.duration, &time2) < 0)
    return v4;
  CMTimeMake(&v16, 2, 1);
  lhs.duration = v23;
  CMTimeAdd(&v17, &lhs.duration, &v16);
  lhs.duration = v22;
  if (CMTimeCompare(&lhs.duration, &v17) > 0)
    return 0;
  CFArrayAppendValue(*(CFMutableArrayRef *)a2, a1);
  if (!FPSupport_FindSampleStream(*(const __CFArray **)a2, *(opaqueCMSampleBuffer **)(a2 + 8), (CFIndex **)(a2 + 16), &v21, &v20))return 0;
  memset(&lhs, 0, sizeof(lhs));
  ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)a2, v21);
  memset(&v14, 0, sizeof(v14));
  CMSampleBufferGetOutputPresentationTimeStamp(&v13, ValueAtIndex);
  CMSampleBufferGetPresentationTimeStamp(&v12, ValueAtIndex);
  CMTimeSubtract(&v14, &v13, &v12);
  CMSampleBufferGetSampleTimingInfo(ValueAtIndex, v20, &lhs);
  v7 = (const __CFDictionary *)CMGetAttachment(ValueAtIndex, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
  if (v7)
  {
    memset(&v11, 0, sizeof(v11));
    CMTimeMakeFromDictionary(&v11, v7);
    v9 = v14;
    v8 = v11;
    CMTimeSubtract(&presentationTimeStamp, &v9, &v8);
    v14 = presentationTimeStamp;
  }
  presentationTimeStamp = lhs.presentationTimeStamp;
  v9 = v14;
  CMTimeAdd(&v11, &presentationTimeStamp, &v9);
  *(CMTime *)(a2 + 24) = v11;
  return v4;
}

uint64_t fpfs_ensureDecryptorHasStarted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD *);
  unsigned int v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v9[27];

  v9[26] = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 392);
  if (!(_DWORD)v1)
  {
    v9[0] = 0;
    v3 = *(_QWORD *)(a1 + 384);
    v4 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v4)
      return 0;
    v5 = v4(v3, v9);
    if (v5 == -12782 || v5 == 0)
    {
      return 0;
    }
    else
    {
      if (v5 == -12785)
        v1 = 4294954373;
      else
        v1 = v5;
      *(_DWORD *)(a1 + 392) = v1;
      CMBaseObjectGetDerivedStorage();
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return v1;
}

uint64_t fpfsi_CanReuseRenderChainForTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v9;

  CMBaseObjectGetDerivedStorage();
  if (!a1)
    return 0;
  if (*(_QWORD *)(a2 + 96) != a1
    || !fpfs_FormatsAreCompatible(*(_QWORD *)a2, *(const opaqueCMFormatDescription **)(a1 + 16), *(const opaqueCMFormatDescription **)(a2 + 40)))
  {
    if (*(_DWORD *)(a2 + 32) != 1936684398)
      return fpfs_FormatsAreCompatible(*(_QWORD *)a2, *(const opaqueCMFormatDescription **)(a1 + 16), *(const opaqueCMFormatDescription **)(a2 + 40));
    v9 = 0;
    v4 = *(_QWORD *)(a1 + 32);
    AllocatorForMedia = FigGetAllocatorForMedia();
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
    v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("SupportsGaplessTransitionsAcrossFormatChanges"), AllocatorForMedia, &v9);
    if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504)
      || *MEMORY[0x1E0C9AE50] != v9
      || (_os_feature_enabled_impl() & 1) == 0)
    {
      return 0;
    }
  }
  return 1;
}

void fpfs_associateCrossTalkerToRenderChain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  unsigned int (*v13)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, const __CFString *, CFTypeRef);
  CFTypeRef cf;

  cf = 0;
  v4 = *(_QWORD *)(a1 + 1040);
  if (v4)
  {
    do
    {
      if (v4 != a2 && *(_QWORD *)(v4 + 64) == *(_QWORD *)(a2 + 64))
      {
        v6 = *(_DWORD *)(v4 + 32);
        v7 = v6 == 1668047728 || v6 == 1986618469;
        if (v7 || v6 == 1935832172)
        {
          v9 = *(_QWORD *)(v4 + 96);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 32);
            AllocatorForMedia = FigGetAllocatorForMedia();
            FigBaseObject = FigRenderPipelineGetFigBaseObject(v10);
            v13 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v13)
            {
              if (!v13(FigBaseObject, CFSTR("HDRCrossTalker"), AllocatorForMedia, &cf))
                break;
            }
          }
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
    v14 = cf;
    if (cf)
      goto LABEL_18;
  }
  v15 = FigGetAllocatorForMedia();
  FigCrossTalkerCreate(v15, &cf);
  v14 = cf;
  if (cf)
  {
LABEL_18:
    v16 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a3 + 32));
    v17 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v17)
      v17(v16, CFSTR("HDRCrossTalker"), v14);
    if (cf)
      CFRelease(cf);
  }
}

uint64_t fpfs_canSendMetadataTrackToVideoTargets(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = fpfs_isKnownMebxMetadataForRendering(a2);
  if ((_DWORD)result)
  {
    for (i = 0; ; ++i)
    {
      Count = *(const __CFArray **)(DerivedStorage + 432);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 432), i);
      result = FPSupport_fvtSupportsMetadataTrack((uint64_t)ValueAtIndex, a2);
      if ((_DWORD)result)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t fpfs_createMetadataRenderChainForDataQueue(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v13;
  const void *v14;
  const void *v15;
  const void *v16;

  v5 = malloc_type_calloc(1uLL, 0x90uLL, 0x1060040EF867D01uLL);
  if (v5)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v7 = FigRenderPipelineCreateForFanOutToArrayOfSampleBufferConsumers(AllocatorForMedia, 0, v5 + 4);
    if ((_DWORD)v7)
    {
      v13 = v7;
    }
    else
    {
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v9 = v5[4];
      v10 = FigGetAllocatorForMedia();
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v9);
      v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v12)
      {
        v13 = v12(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v10, v5 + 5);
        if (!(_DWORD)v13)
        {
          v5[2] = FigFormatDescriptionRetain();
          *v5 = 1;
          *a4 = v5;
          return v13;
        }
      }
      else
      {
        v13 = 4294954514;
      }
    }
  }
  else
  {
    v13 = FigSignalErrorAt();
    if (!(_DWORD)v13)
      return v13;
  }
  v14 = (const void *)v5[5];
  if (v14)
    CFRelease(v14);
  v15 = (const void *)v5[2];
  if (v15)
    CFRelease(v15);
  v16 = (const void *)v5[4];
  if (v16)
    CFRelease(v16);
  free(v5);
  return v13;
}

uint64_t fpfsi_ensureTrackIsSetupToDeliverMetadataToVideoDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t OutputDestinationForMetadata;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v9;
  CFTypeRef v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(a1 + 88);
  if (!v4)
  {
    OutputDestinationForMetadata = fpfsi_createOutputDestinationForMetadata(a1);
    if ((_DWORD)OutputDestinationForMetadata)
      goto LABEL_8;
    v4 = *(_QWORD *)(a1 + 88);
  }
  AllocatorForMedia = FigGetAllocatorForMedia();
  CMBaseObject = FigAggregateVideoDestinationGetCMBaseObject(v4);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v8)
    goto LABEL_9;
  OutputDestinationForMetadata = v8(CMBaseObject, CFSTR("SampleBufferConsumersForDataQueues"), AllocatorForMedia, &cf);
  if ((_DWORD)OutputDestinationForMetadata)
  {
LABEL_8:
    v13 = OutputDestinationForMetadata;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = cf;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v9);
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
  if (v12)
  {
    OutputDestinationForMetadata = v12(FigBaseObject, CFSTR("OutputArrayOfSampleBufferConsumers"), v10);
    goto LABEL_8;
  }
LABEL_9:
  v13 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t fpfs_createLegibleOutputRenderChainsAndAttachToPrimary(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  if (*(_QWORD *)(DerivedStorage + 1856) && *(_QWORD *)(DerivedStorage + 1864))
    fpfsi_GetDimensions(a2, (float *)&v5 + 1, (float *)&v5);
  return 0;
}

uint64_t fpfs_applyEQPreset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t Next;
  uint64_t v8;
  int v9;
  CFNumberRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  if (a2 || (Next = (uint64_t)fpfs_getNext(DerivedStorage, 0)) != 0)
  {
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = *(_DWORD *)(v6 + 172);
    if (*(_DWORD *)(v8 + 868))
      v9 = *(_DWORD *)(v8 + 868);
    valuePtr = v9;
    v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (a3)
    {
      v11 = *(_QWORD *)(a3 + 96);
      if (v11 && *(_DWORD *)(a3 + 32) == 1936684398)
      {
        Next = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v11, (uint64_t)CFSTR("EQPreset"), (uint64_t)v10);
LABEL_17:
        CFRelease(v10);
        return Next;
      }
    }
    else
    {
      v12 = *(_QWORD *)(v8 + 1040);
      if (v12)
      {
        do
        {
          v13 = *(_QWORD *)(v12 + 96);
          if (v13 && *(_DWORD *)(v12 + 32) == 1936684398)
            Next = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v13, (uint64_t)CFSTR("EQPreset"), (uint64_t)v10);
          else
            Next = 0;
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
        goto LABEL_17;
      }
    }
    Next = 0;
    goto LABEL_17;
  }
  return Next;
}

uint64_t fpfsi_createOutputDestinationForMetadata(uint64_t a1)
{
  uint64_t *DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *AllocatorForMedia;
  const __CFArray *v9;
  const void *v10;
  const opaqueCMFormatDescription *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFAllocator *v15;
  CFStringRef v16;
  CFStringRef v17;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, CFStringRef);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32) != 1835365473)
    return 0;
  v4 = v3;
  if (!fpfs_canSendMetadataTrackToVideoTargets(*DerivedStorage, *(const opaqueCMFormatDescription **)(a1 + 40)))return 0;
  v5 = DerivedStorage[130];
  if (!v5)
    goto LABEL_13;
  v6 = 0;
  do
  {
    if (*(_QWORD *)(v5 + 96) == *(_QWORD *)(a1 + 96) && v5 != a1)
      v6 = v5;
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5);
  if (v6)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v9 = *(const __CFArray **)(v4 + 432);
    v10 = (const void *)DerivedStorage[72];
    v11 = *(const opaqueCMFormatDescription **)(a1 + 40);
    v12 = (_QWORD *)(a1 + 88);
    v13 = *(_QWORD *)(v6 + 88);
  }
  else
  {
LABEL_13:
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v9 = *(const __CFArray **)(v4 + 432);
    v10 = (const void *)DerivedStorage[72];
    v12 = (_QWORD *)(a1 + 88);
    v11 = *(const opaqueCMFormatDescription **)(a1 + 40);
    v13 = 0;
  }
  v14 = FigAggregateVideoDestinationForDataQueueCreate(AllocatorForMedia, v9, v10, v11, v13, v12);
  if (!(_DWORD)v14)
  {
    v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v16 = CFStringCreateWithFormat(v15, 0, CFSTR("M.%d"), *(_QWORD *)(a1 + 16));
    if (v16)
    {
      v17 = v16;
      CMBaseObject = FigAggregateVideoDestinationGetCMBaseObject(*(_QWORD *)(a1 + 88));
      v19 = *(uint64_t (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
      if (v19)
        v14 = v19(CMBaseObject, CFSTR("VideoConfigID"), v17);
      else
        v14 = 4294954514;
      CFRelease(v17);
      return v14;
    }
    return 0;
  }
  return v14;
}

uint64_t fpfs_updateCaptionOrSubtitleHintOnVideoPipeline()
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v2;
  BOOL v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 80);
  if (result)
  {
    result = CMBaseObjectGetDerivedStorage();
    v4 = result
      && ((v2 = *(_QWORD *)(result + 816), *(_BYTE *)(DerivedStorage + 210)) ? (v3 = v2 == 0) : (v3 = 1), !v3)
      && *(_QWORD *)(v2 + 32) != 0;
    if (*(_QWORD *)(DerivedStorage + 80))
    {
      v5 = *(_QWORD *)(result + 1040);
      if (v5)
      {
        if (v4)
          v6 = (uint64_t *)MEMORY[0x1E0C9AE50];
        else
          v6 = (uint64_t *)MEMORY[0x1E0C9AE40];
        v7 = *v6;
        do
        {
          if (*(_DWORD *)(v5 + 32) == 1986618469)
          {
            result = *(_QWORD *)(v5 + 96);
            if (result)
              result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, (uint64_t)CFSTR("CAImageQueueCaptionsMayAppearHint"), v7);
          }
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5);
      }
    }
  }
  return result;
}

CFStringRef fpfs_createNextRenderPipelineIdentifierString()
{
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ++*(_DWORD *)(DerivedStorage + 836);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("R%s.%02d"), DerivedStorage + 824, *(unsigned int *)(DerivedStorage + 836));
}

CFTypeRef fpfsi_copyPreviousImageQueueGauge(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFArray *v6;
  CFRange v7;
  CFIndex FirstIndexOfValue;
  const void *ValueAtIndex;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v12)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  CFTypeRef result;
  uint64_t v14;

  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 463))
    return 0;
  v3 = DerivedStorage;
  v4 = CMBaseObjectGetDerivedStorage();
  if (*(const void **)(v4 + 80) != a1)
  {
    v5 = v4;
    v6 = *(const __CFArray **)(v4 + 72);
    if (v6)
    {
      v7.length = CFArrayGetCount(v6);
      v6 = *(const __CFArray **)(v5 + 72);
    }
    else
    {
      v7.length = 0;
    }
    v7.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v7, a1);
    if (FirstIndexOfValue)
    {
      if (FirstIndexOfValue >= 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 72), FirstIndexOfValue - 1);
        if (ValueAtIndex)
        {
LABEL_9:
          AllocatorForMedia = FigGetAllocatorForMedia();
          FigBaseObject = FigPlaybackItemGetFigBaseObject(ValueAtIndex);
          v12 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
          if (v12)
          {
            v12(FigBaseObject, CFSTR("ImageQueueGauge"), AllocatorForMedia, &v14);
            return (CFTypeRef)v14;
          }
          return 0;
        }
      }
    }
    else
    {
      ValueAtIndex = *(const void **)(v5 + 80);
      if (ValueAtIndex)
        goto LABEL_9;
    }
  }
  result = *(CFTypeRef *)(v3 + 728);
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t fpfs_createOrUpdateLayerSync(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *AllocatorForMedia;
  __CFArray *Mutable;
  const __CFArray *v8;
  const __CFArray *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;
  __int128 v15;
  uint64_t v16;
  CFRange v17;
  CFRange v18;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  fpfs_ensureTransaction(a1, (uint64_t *)&cf);
  v4 = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v8 = *(const __CFArray **)(v4 + 384);
    if (v8)
    {
      v17.length = CFArrayGetCount(*(CFArrayRef *)(v4 + 384));
      v17.location = 0;
      CFArrayAppendArray(Mutable, v8, v17);
    }
    v9 = *(const __CFArray **)(v5 + 696);
    if (v9)
    {
      v18.length = CFArrayGetCount(v9);
      v18.location = 0;
      CFArrayAppendArray(Mutable, v9, v18);
    }
    v10 = *(const void **)(v4 + 816);
    v15 = *MEMORY[0x1E0CA2E18];
    v16 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(v10, &v15, Mutable, (uint64_t)"fpfs_createLayerSyncLayerArrayAndSetLayerFillMode");
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 672));
  v11 = *(_QWORD *)(v3 + 680);
  if (v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = FigLayerSynchronizerCreate((_QWORD *)(v3 + 680));
    v11 = *(_QWORD *)(v3 + 680);
    if (!v11)
      goto LABEL_11;
  }
  FigLayerSynchronizerSetLayerArraysWithDeferredTransaction(v11, *(const __CFArray **)(DerivedStorage + 384), *(const __CFArray **)(v3 + 696), *(const void **)(DerivedStorage + 816));
LABEL_11:
  MEMORY[0x19402EF04](*(_QWORD *)(v3 + 672));
  fpfs_commitTransaction(a1, (uint64_t)cf);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v12;
}

uint64_t fpfsi_syncMomentSourceCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigRetainProxyIsInvalidated();
  if (!(_DWORD)result)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 672));
    if (*(_QWORD *)(DerivedStorage + 680))
    {
      v5 = pthread_main_np();
      v6 = *(const void **)(DerivedStorage + 680);
      if (v5)
        FigLayerSynchronizerSynchronizeToMoment((uint64_t)v6, a2, 0);
      else
        FigLayerSynchronizerSynchronizeToMomentWithDeferredTransaction(v6, a2, 0, (uint64_t)"fpfsi_syncMomentSourceCallback", 0);
    }
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t fpfs_isKnownMebxMetadataForRendering(const opaqueCMFormatDescription *a1)
{
  uint64_t result;

  if (CMFormatDescriptionGetMediaSubType(a1) != 1835360888)
    return 0;
  CMMetadataFormatDescriptionGetIdentifiers(a1);
  if (FigCFArrayContainsValue())
    return 1;
  if (FigCFArrayContainsValue())
    return 1;
  if (FigCFArrayContainsValue())
    return 1;
  result = FigCFArrayContainsValue();
  if ((_DWORD)result)
    return 1;
  return result;
}

void fpfs_TimedDataRenderCallback(void *a1, const void *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v5;
  void *values;

  values = a1;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 459))
  {
    if (a1)
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v5 = CFDictionaryCreate(AllocatorForMedia, (const void **)kFigPlayerTimedMetadataNotificationKey_ValueArray, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      fpfs_PostNotificationWhenUnlocked(a2, CFSTR("TimedMetadata"), a2, v5);
      if (v5)
        CFRelease(v5);
    }
    else
    {
      fpfs_PostNotificationWhenUnlocked(a2, CFSTR("TimedMetadata"), a2, 0);
    }
  }
}

void fpfs_postSubtitleCallback(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t DerivedStorage;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  const void *v20;
  CFTypeRef cf;
  const void *v22;
  CFTypeRef v23;

  v22 = 0;
  v23 = 0;
  cf = 0;
  if (a10 && !fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a10, &v22, &v23))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v16 = v22;
    v17 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(DerivedStorage + 867))
    {
      v18 = v17;
      if (!FigSubtitleSampleCreatePropertyList(a6, 1, 1, (CFDictionaryRef *)&cf, a1, a2, a3, a4))
      {
        v19 = cf;
        if (cf)
        {
          v20 = *(const void **)(v18 + 368);
          *(_QWORD *)(v18 + 368) = cf;
          CFRetain(v19);
          if (v20)
            CFRelease(v20);
          fpfs_PostNotificationWhenUnlocked(v16, CFSTR("SubtitleChanged"), v16, cf);
          if (cf)
            CFRelease(cf);
        }
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v16);
  }
}

void fpfs_postCaptionCallback(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t DerivedStorage;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  const void *v20;
  CFTypeRef cf;
  const void *v22;
  CFTypeRef v23;

  v22 = 0;
  v23 = 0;
  cf = 0;
  if (a10 && !fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a10, &v22, &v23))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v16 = v22;
    v17 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(DerivedStorage + 867))
    {
      v18 = v17;
      if (!FigSubtitleSampleCreatePropertyList(a6, 1, 1, (CFDictionaryRef *)&cf, a1, a2, a3, a4))
      {
        v19 = cf;
        if (cf)
        {
          v20 = *(const void **)(v18 + 368);
          *(_QWORD *)(v18 + 368) = cf;
          CFRetain(v19);
          if (v20)
            CFRelease(v20);
          fpfs_PostNotificationWhenUnlocked(v16, CFSTR("SubtitleChanged"), v16, cf);
          if (cf)
            CFRelease(cf);
        }
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v16);
  }
}

uint64_t fpfsi_prepareSubtitleRenderPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, __CFString *, uint64_t);
  __CFString *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(a2);
  v6 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    v6(FigBaseObject, CFSTR("DisplayNonForcedSubtitles"), *MEMORY[0x1E0C9AE50]);
  v7 = *(_QWORD *)(DerivedStorage + 1808);
  if (!v7)
    return 0;
  if (*(_BYTE *)(v4 + 460))
  {
    v8 = FigRenderPipelineGetFigBaseObject(a2);
    v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v9)
    {
      v10 = CFSTR("SRPP_TextMarkupArray");
      return v9(v8, v10, v7);
    }
  }
  else
  {
    v8 = FigRenderPipelineGetFigBaseObject(a2);
    v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v9)
    {
      v10 = CFSTR("CRPP_TextMarkupArray");
      return v9(v8, v10, v7);
    }
  }
  return 4294954514;
}

uint64_t fpfs_prepareClosedCaptionRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *ClosedCaptionType;
  int v5;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t);
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, const void *);

  ClosedCaptionType = fpfsi_GetClosedCaptionType();
  v5 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 210);
  FigBaseObject = FigRenderPipelineGetFigBaseObject(a3);
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v7)
    return 4294954514;
  if (v5)
    v8 = *MEMORY[0x1E0C9AE50];
  else
    v8 = *MEMORY[0x1E0C9AE40];
  result = v7(FigBaseObject, CFSTR("DisplayClosedCaptions"), v8);
  if (!(_DWORD)result)
  {
    v10 = FigRenderPipelineGetFigBaseObject(a3);
    v11 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (v11)
      return v11(v10, CFSTR("CCRPP_ClosedCaptionType"), ClosedCaptionType);
    return 4294954514;
  }
  return result;
}

const void *fpfsi_GetClosedCaptionType()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  uint64_t CFStringForOSTypeValue;
  const __CFDictionary *MediaTypeInMediaArray;
  const void *Value;
  const void *v5;
  uint64_t v6;
  const __CFDictionary *ClosedCaptionGroupLocatorMap;
  const __CFDictionary *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 1784);
  CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v1, CFStringForOSTypeValue, 0);
  if (MediaTypeInMediaArray
    && (Value = CFDictionaryGetValue(MediaTypeInMediaArray, CFSTR("MediaSelectionOptionsPersistentID"))) != 0
    && (v5 = Value, (v6 = *(_QWORD *)(DerivedStorage + 1696)) != 0)
    && (ClosedCaptionGroupLocatorMap = (const __CFDictionary *)FigAlternateGetClosedCaptionGroupLocatorMap(v6)) != 0
    && (v8 = (const __CFDictionary *)CFDictionaryGetValue(ClosedCaptionGroupLocatorMap, v5)) != 0)
  {
    return CFDictionaryGetValue(v8, CFSTR("FBPAEGLMK_ClosedCaptionType"));
  }
  else
  {
    return 0;
  }
}

void fpfs_postClosedCaptionNotificationIfEnabled(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  CFIndex Count;
  void *v14;
  CFIndex i;
  CFTypeRef cf;

  if (a5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = *(const void **)DerivedStorage;
    v9 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v9 + 208))
    {
      cf = 0;
      if (!FigCaptionCommandCreatePropertyList(a2, a3, (CFDictionaryRef *)&cf))
        fpfs_EnqueueNotification(v8, CFSTR("ClosedCaptionCommand"), *(const void **)DerivedStorage, cf);
    }
    else
    {
      v10 = v9;
      if (*(_BYTE *)(v9 + 210))
      {
        if (!*(_BYTE *)(DerivedStorage + 867))
        {
          v11 = *(_QWORD *)(v9 + 80);
          if (v11)
          {
            if (fpfs_FirstRenderingTrackofType(v11, 1668047728))
            {
              MEMORY[0x19402EA0C](*(_QWORD *)(v10 + 224));
              v12 = *(const __CFArray **)(v10 + 216);
              if (v12)
              {
                Count = CFArrayGetCount(v12);
                v14 = (void *)MEMORY[0x19403137C]();
                if (Count >= 1)
                {
                  for (i = 0; i != Count; ++i)
                    objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 216), i), "processCaptionCommand:data:", a2, a3);
                }
              }
              else
              {
                v14 = (void *)MEMORY[0x19403137C]();
              }
              objc_autoreleasePoolPop(v14);
              JUMPOUT(0x19402EA24);
            }
          }
        }
      }
    }
  }
}

uint64_t fpfs_setRateOnPrimaryAndAuxRenderPipelines(uint64_t a1, __int128 *a2, __int128 *a3, float a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *, __int128 *, float, float);
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  void (*v15)(uint64_t, __int128 *, __int128 *, float, float);
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 32);
  v20 = *a2;
  v22 = *((_QWORD *)a2 + 2);
  v16 = *a3;
  v18 = *((_QWORD *)a3 + 2);
  v11 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, float, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
  if (!v11)
    return 4294954514;
  v26 = v20;
  v27 = v22;
  v24 = v16;
  v25 = v18;
  result = v11(v10, &v26, &v24, a4, a5);
  if ((_DWORD)result)
    v13 = 1;
  else
    v13 = v9 == 0;
  if (!v13)
  {
    do
    {
      v14 = *(_QWORD *)(v9 + 32);
      v21 = *a2;
      v23 = *((_QWORD *)a2 + 2);
      v17 = *a3;
      v19 = *((_QWORD *)a3 + 2);
      v15 = *(void (**)(uint64_t, __int128 *, __int128 *, float, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
      if (v15)
      {
        v26 = v21;
        v27 = v23;
        v24 = v17;
        v25 = v19;
        v15(v14, &v26, &v24, a4, a5);
      }
      v9 = *(_QWORD *)(v9 + 88);
    }
    while (v9);
    return 0;
  }
  return result;
}

uint64_t fpfs_UnlockMutexCompletelyWithCaller(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = 0;
  if (v3 >= 1)
  {
    v4 = (_QWORD *)DerivedStorage;
    fpfs_CheckIfPlaybackStateChangedAndNotifyBeforeUnlock(a1);
    v5 = v3;
    do
    {
      MEMORY[0x19402EA24](*v4);
      --v5;
    }
    while (v5);
  }
  return v3;
}

void fpfs_CheckIfPlaybackStateChangedAndNotifyBeforeUnlock(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  fpfs_getPlaybackState((uint64_t)a1, &v5, 0);
  if (v5 != *(_DWORD *)(DerivedStorage + 164))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    fpfs_EnqueueNotificationWithoutLocking((uint64_t)a1, CFSTR("PlaybackStateDidChange"), a1, Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
}

uint64_t fpfsi_setAudioSessionPreferredAudioHardwareFormat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(result + 536);
  if (v5)
  {
    result = CMBaseObjectGetVTable();
    v6 = *(_QWORD *)(result + 16);
    if (v6)
    {
      v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 56);
      if (v7)
        result = v7(v5, *MEMORY[0x1E0D49A40], a3);
    }
  }
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t fpfsi_DetermineRateSnapping(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    result = FigCFEqual();
    v4 = 0x420000003D000000;
    if (!(_DWORD)result)
    {
      result = FigCFEqual();
      if (!(_DWORD)result)
      {
        result = FigCFEqual();
        if (!(_DWORD)result)
        {
          result = FigCFEqual();
          if ((_DWORD)result)
          {
            v4 = 0;
            v5 = 1;
            goto LABEL_6;
          }
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    v5 = 0;
LABEL_6:
    *(_BYTE *)a2 = v5;
    *(_QWORD *)(a2 + 4) = v4;
  }
  return result;
}

uint64_t fpfs_ConfigureRatePlan(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6, float a7)
{
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if ((_BYTE)a3)
    *(float *)&a4 = 2.1;
  if (a6 < 0.0)
    return 0;
  *(_BYTE *)(a5 + 8) = 0;
  *(float *)a5 = a6;
  if ((_BYTE)a1 && *((float *)&a1 + 1) > a7 || (a1 & 0xFF00) != 0 && *(float *)&a2 < a7)
    goto LABEL_8;
  if (*(float *)&a4 >= a7)
  {
    if (a7 > 0.0 && (_BYTE)a3)
    {
      v9 = FPSupport_ConfigSnapRateForLQZL((float *)(a5 + 4), (float *)a5, a7);
    }
    else
    {
      if (a7 == 0.0)
      {
        *(_DWORD *)(a5 + 4) = 1065353216;
      }
      else
      {
        if (*((float *)&a3 + 1) > a7)
        {
LABEL_8:
          v9 = 1;
          *(_BYTE *)(a5 + 8) = 1;
          *(_DWORD *)(a5 + 4) = 1065353216;
          goto LABEL_9;
        }
        *(float *)(a5 + 4) = a7;
      }
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
    *(_DWORD *)a5 = 0;
  }
LABEL_9:
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v9;
}

uint64_t fpfsi_SetLastTimestampClientDidPauseOnContentSteeringMonitor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFNumberRef v4;
  CFNumberRef v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v8;
  uint64_t valuePtr;

  valuePtr = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 120))
    return 0;
  v3 = DerivedStorage;
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = *(_QWORD *)(v3 + 120);
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
  if (v7)
    v8 = v7(v6, CFSTR("AlternateFilterMonitorProperty_LastTimestampClientDidPause"), v5);
  else
    v8 = 4294954514;
  CFRelease(v5);
  return v8;
}

void fpfsi_synchronizeLayerToTimebaseWithTransaction(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 672));
  v4 = *(const void **)(DerivedStorage + 680);
  if (v4)
    FigLayerSynchronizerSynchronizeToTimebaseWithDeferredTransaction(v4, *(const void **)(DerivedStorage + 576), 0, (uint64_t)"fpfsi_synchronizeLayerToTimebaseWithTransaction", a2);
  JUMPOUT(0x19402EF04);
}

uint64_t fpfs_FirstConcurrentMetadataTracksInDiscontinuityDomainNeededForVideo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t TracksInListOfMediaType;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  TracksInListOfMediaType = fpfsi_findTracksInListOfMediaType(1835365473, *(_QWORD *)(DerivedStorage + 1040), *(_QWORD *)(DerivedStorage + 1048), a2, (uint64_t)v12, 0, 0);
  if (TracksInListOfMediaType < 1)
    return 0;
  v7 = TracksInListOfMediaType;
  v8 = 0;
  v9 = v12;
  do
  {
    v10 = *(_QWORD *)v9;
    if (fpfs_isKnownMebxMetadataForRendering(*(const opaqueCMFormatDescription **)(*(_QWORD *)v9 + 40)))
    {
      *(_QWORD *)(a3 + 8 * v8++) = v10;
      if (v8 == 5)
        break;
    }
    v9 = (_OWORD *)((char *)v9 + 8);
    --v7;
  }
  while (v7);
  return v8;
}

void fpfsi_scheduleFVTTransitionForFVTAndTrack(const __CFString *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  const __CFAllocator *AllocatorForMedia;
  CFTypeRef v15;
  CFTypeRef v16;
  int v17;
  CMTimeValue v18;
  const __CFAllocator *v19;
  __CFDictionary *Mutable;
  uint64_t v21;
  uint64_t v22;
  uint64_t FigBaseObject;
  void (*v24)(uint64_t, const __CFString *, uint64_t, void **);
  uint64_t v25;
  CMTimeValue v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, CMTimeValue, __CFDictionary *, CFTypeRef, CFTypeRef);
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  CFTypeRef v33;
  CFTypeRef v34;
  unsigned int (*v35)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, CFTypeRef, CFTypeRef);
  uint64_t v36;
  CFTypeRef v37;
  CFTypeRef v38;
  unsigned int (*v39)(uint64_t, uint64_t, CFTypeRef, CFTypeRef, uint64_t);
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  const char *v44;
  const void *v45;
  CMClockRef HostTimeClock;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const void *v49;
  CMClockRef v50;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  int v57;
  int v58;
  CFTypeRef v59;
  void (*v60)(uint64_t, CFTypeRef);
  const char *v61;
  int v62;
  Float64 Seconds;
  Float64 v64;
  Float64 v65;
  CFTypeRef v66;
  void (*v67)(uint64_t, CFTypeRef, CMTime *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const char *v69;
  const char *v70;
  const __CFString *v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  CMTime v76;
  CMTime time;
  os_log_type_t type;
  CFTypeRef v79;
  CMTime v80;
  CFTypeRef v81;
  void *value;
  CMTime cf;
  const char *v84;
  __int16 v85;
  const __CFString *v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  Float64 v96;
  __int16 v97;
  Float64 v98;
  __int16 v99;
  Float64 v100;
  __int16 v101;
  CFTypeRef v102;
  CMTime v103;
  CMTimeValue v104;
  CMTimeScale timescale;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v81 = 0;
  v104 = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v80 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v79 = 0;
  if (!*(_QWORD *)(DerivedStorage + 736))
  {
    if (dword_1EE2A2A88)
    {
      LODWORD(value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_80;
  }
  v72 = a6;
  v13 = *(_QWORD *)DerivedStorage;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v71 = a1;
  v74 = a4;
  if (fpfs_createDataChannelConfigurationAndSetIdentifiers(v13, a1, (CFMutableStringRef)a3, a4, a5, AllocatorForMedia, (uint64_t *)&v81, (CFMutableStringRef *)&v79))goto LABEL_80;
  if (a3)
  {
    v15 = v81;
    v16 = v79;
    v103.value = 0;
    cf.value = 0;
    if (a3[11])
    {
      v17 = FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions((const opaqueCMFormatDescription *)a3[5], &cf);
      if (v17)
        goto LABEL_88;
      v18 = cf.value;
      FigGetAllocatorForMedia();
      if (v18)
        FigTagCollectionCreateMutableCopy();
      else
        FigTagCollectionCreateMutable();
      if (v103.value)
      {
        v17 = CMTagCollectionAddTag((CMMutableTagCollectionRef)v103.value, *MEMORY[0x1E0CA5228]);
        if (!v17)
        {
          v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
          Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            value = 0;
            v21 = *a3;
            v22 = FigGetAllocatorForMedia();
            FigBaseObject = FigPlaybackItemGetFigBaseObject(v21);
            v24 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
            if (v24)
            {
              v24(FigBaseObject, CFSTR("VideoTrackMatrix"), v22, &value);
              if (value)
              {
                CFDictionarySetValue(Mutable, CFSTR("TrackMatrix"), value);
                if (value)
                  CFRelease(value);
              }
            }
          }
          v25 = a3[11];
          v26 = v103.value;
          v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMTimeValue, __CFDictionary *, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
          if (v27)
          {
            v28 = v27(v25, a2, 1, v26, Mutable, v15, v16);
            if (!Mutable)
            {
LABEL_21:
              if (v103.value)
                CFRelease((CFTypeRef)v103.value);
              if (cf.value)
                CFRelease((CFTypeRef)cf.value);
              if (v28)
                goto LABEL_80;
              goto LABEL_26;
            }
          }
          else
          {
            v28 = -12782;
            if (!Mutable)
              goto LABEL_21;
          }
          CFRelease(Mutable);
          goto LABEL_21;
        }
LABEL_88:
        v28 = v17;
        goto LABEL_21;
      }
    }
    v17 = FigSignalErrorAt();
    goto LABEL_88;
  }
LABEL_26:
  if (a5 < 1)
  {
LABEL_32:
    v36 = *(_QWORD *)(DerivedStorage + 736);
    v37 = v81;
    v38 = v79;
    v39 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 8);
    if (!v39 || v39(v36, a2, v37, v38, 100))
      goto LABEL_80;
    FigDataChannelConfigurationGetResourceCount((uint64_t)v81);
    if (!v72)
    {
      if (a3
        && *((_DWORD *)a3 + 38) == 6
        && (*((_BYTE *)a3 + 484) & 1) != 0
        && CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 576)) != 0.0)
      {
        v45 = *(const void **)(DerivedStorage + 576);
        HostTimeClock = CMClockGetHostTimeClock();
        cf = *(CMTime *)(a3 + 59);
        CMSyncConvertTime(&v103, &cf, v45, HostTimeClock);
        v104 = v103.value;
        flags = v103.flags;
        timescale = v103.timescale;
        epoch = v103.epoch;
        fpfs_GetTime(DerivedStorage, (uint64_t)&time);
        v49 = *(const void **)(DerivedStorage + 576);
        v50 = CMClockGetHostTimeClock();
        CMSyncConvertTime(&v80, &time, v49, v50);
        if (dword_1EE2A2A88)
        {
          LODWORD(value) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v52 = value;
          if (os_log_type_enabled(v51, type))
            v53 = v52;
          else
            v53 = v52 & 0xFFFFFFFE;
          if (v53)
          {
            v54 = *(_QWORD *)DerivedStorage;
            if (*(_QWORD *)DerivedStorage)
              v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            else
              v55 = "";
            v70 = v55;
            if (v71)
              v61 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v61 = "";
            v69 = v61;
            v73 = *((_DWORD *)a3 + 4);
            if (a5 < 1)
              v62 = -1;
            else
              v62 = *(_DWORD *)(*(_QWORD *)v74 + 16);
            v75 = v62;
            v103.value = v104;
            v103.timescale = timescale;
            v103.flags = flags;
            v103.epoch = epoch;
            Seconds = CMTimeGetSeconds(&v103);
            v103 = v80;
            v64 = CMTimeGetSeconds(&v103);
            fpfs_GetTime(DerivedStorage, (uint64_t)&v76);
            v65 = CMTimeGetSeconds(&v76);
            LODWORD(cf.value) = 136317954;
            *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"fpfsi_scheduleFVTTransitionForFVTAndTrack";
            LOWORD(cf.flags) = 2048;
            *(_QWORD *)((char *)&cf.flags + 2) = v54;
            HIWORD(cf.epoch) = 2082;
            v84 = v70;
            v85 = 2048;
            v86 = v71;
            v87 = 2082;
            v88 = v69;
            v89 = 1024;
            v90 = v73;
            v91 = 1024;
            v92 = v75;
            v93 = 1024;
            v94 = a5;
            v95 = 2048;
            v96 = Seconds;
            v97 = 2048;
            v98 = v64;
            v99 = 2048;
            v100 = v65;
            v101 = 2112;
            v102 = v79;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if ((flags & 1) != 0)
        {
          v66 = v81;
          v67 = *(void (**)(uint64_t, CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
          if (v67)
          {
            v103.value = v104;
            v103.timescale = timescale;
            v103.flags = flags;
            v103.epoch = epoch;
            v67(a2, v66, &v103);
          }
        }
      }
      goto LABEL_80;
    }
    if (!dword_1EE2A2A88)
    {
LABEL_65:
      v59 = v81;
      v60 = *(void (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (v60)
        v60(a2, v59);
      goto LABEL_80;
    }
    LODWORD(value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v41 = value;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      v42 = v41;
    else
      v42 = v41 & 0xFFFFFFFE;
    if (!v42)
    {
LABEL_64:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_65;
    }
    v43 = *(_QWORD *)DerivedStorage;
    if (v43)
      v44 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
    else
      v44 = "";
    if (v71)
    {
      v56 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
      if (a3)
      {
LABEL_57:
        v57 = *((_DWORD *)a3 + 4);
LABEL_60:
        if (*(_QWORD *)v74)
          v58 = *(_DWORD *)(*(_QWORD *)v74 + 16);
        else
          v58 = -1;
        LODWORD(cf.value) = 136317186;
        *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"fpfsi_scheduleFVTTransitionForFVTAndTrack";
        LOWORD(cf.flags) = 2048;
        *(_QWORD *)((char *)&cf.flags + 2) = v43;
        HIWORD(cf.epoch) = 2082;
        v84 = v44;
        v85 = 2048;
        v86 = v71;
        v87 = 2082;
        v88 = v56;
        v89 = 1024;
        v90 = v57;
        v91 = 1024;
        v92 = v58;
        v93 = 1024;
        v94 = a5;
        v95 = 2112;
        v96 = *(double *)&v79;
        _os_log_send_and_compose_impl();
        goto LABEL_64;
      }
    }
    else
    {
      v56 = "";
      if (a3)
        goto LABEL_57;
    }
    v57 = -1;
    goto LABEL_60;
  }
  v29 = v74;
  v30 = a5;
  while (1)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v29 + 88);
    if (v31)
    {
      v32 = *(_DWORD *)(*(_QWORD *)v29 + 28);
      v33 = v81;
      v34 = v79;
      v35 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v35 || v35(v31, a2, (v32 + 101), 0, 0, v33, v34))
        break;
    }
    v29 += 8;
    if (!--v30)
      goto LABEL_32;
  }
LABEL_80:
  if (v81)
    CFRelease(v81);
  if (v79)
    CFRelease(v79);
}

uint64_t fpfs_IsItemReadyToStart(uint64_t a1, CMTime *a2, uint64_t a3, float *a4, CMTime *a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v25;
  uint64_t v27;
  _BOOL4 CanRenderVideo;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  CMTime *v38;
  uint64_t v39;
  float v40;
  CMTime *v42;
  uint64_t v43;
  uint64_t v45;
  CMTime type;
  CMTime time2;
  CMTime rhs;
  CMTime v49;
  CMTime v50;
  CMTime v51;
  CMTime v52;
  CMTime lhs;
  CMTime v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v52, 0, sizeof(v52));
  fpfs_GetApproximateTime(DerivedStorage, (uint64_t)&v52);
  v12 = DerivedStorage;
  v51 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v49 = v51;
  v50 = v51;
  v13 = *(_QWORD *)(DerivedStorage + 1040);
  v45 = DerivedStorage;
  if (!v13)
  {
    v17 = 0;
    v14 = 0;
    goto LABEL_41;
  }
  v42 = a5;
  v43 = a6;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  while (1)
  {
    v18 = *(unsigned __int8 *)(v13 + 180);
    v19 = *(_QWORD *)(v12 + 16 * v18 + 992);
    v20 = *(_DWORD *)(v13 + 32);
    v21 = (1 << v18) | v17;
    if (v20 == 1936684398)
      v22 = 1;
    else
      v22 = v16;
    if (v20 != 1935832172 && v20 != 1986618469 && v20 != 1936684398)
    {
      v21 = v17;
      v22 = v16;
    }
    if (*(_QWORD *)(v13 + 48) == v19)
    {
      v17 = v21;
      v16 = v22;
    }
    v25 = *(_DWORD *)(v13 + 152);
    if (v25 == 6)
      v14 = 1;
    if (v20 == 1986618469 && v25 == 5)
    {
      v27 = CMBaseObjectGetDerivedStorage();
      CanRenderVideo = fpfs_CanRenderVideo(v27, a1);
      v12 = DerivedStorage;
      if (!CanRenderVideo)
        v15 = 1;
    }
    if (v14 && *(_BYTE *)(v13 + 104))
      break;
    v13 = *(_QWORD *)(v13 + 8);
    if (!v13)
      goto LABEL_31;
  }
  v14 = 0;
LABEL_31:
  if (v14)
  {
    a5 = v42;
    a6 = v43;
    goto LABEL_41;
  }
  if (!v15)
  {
    a5 = v42;
    goto LABEL_40;
  }
  if ((_BYTE)v16)
    goto LABEL_37;
  if (!dword_1EE2A2A88)
  {
    v14 = 1;
LABEL_37:
    a5 = v42;
    goto LABEL_40;
  }
  LODWORD(rhs.value) = 0;
  LOBYTE(type.value) = 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  a5 = v42;
  v14 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v12 = DerivedStorage;
LABEL_40:
  a6 = v43;
LABEL_41:
  v30 = *(_DWORD *)(v12 + 1088);
  if (v17 == v30)
    goto LABEL_63;
  v31 = *(unsigned __int8 *)(v12 + 471);
  if (*(_BYTE *)(v12 + 553))
  {
    if (!*(_BYTE *)(v12 + 471))
      goto LABEL_48;
    if (!*(_QWORD *)(v12 + 1760))
    {
      v17 |= 1u;
      if (!*(_BYTE *)(v12 + 472))
        goto LABEL_54;
      goto LABEL_50;
    }
    v31 = *(unsigned __int8 *)(v12 + 474);
  }
  if (v31)
    v17 |= 1u;
LABEL_48:
  v32 = *(unsigned __int8 *)(v12 + 472);
  if (*(_BYTE *)(v12 + 553))
  {
    if (!*(_BYTE *)(v12 + 472))
      goto LABEL_54;
LABEL_50:
    if (!*(_QWORD *)(v12 + 1760))
    {
      v17 |= 2u;
      if (!*(_BYTE *)(v12 + 473))
        goto LABEL_61;
LABEL_56:
      if (!*(_QWORD *)(v12 + 1760))
      {
LABEL_59:
        v34 = v17 | 4;
        goto LABEL_62;
      }
      v33 = *(unsigned __int8 *)(v12 + 476);
      goto LABEL_58;
    }
    v32 = *(unsigned __int8 *)(v12 + 475);
  }
  if (v32)
    v17 |= 2u;
LABEL_54:
  v33 = *(unsigned __int8 *)(v12 + 473);
  if (*(_BYTE *)(v12 + 553))
  {
    if (!*(_BYTE *)(v12 + 473))
      goto LABEL_61;
    goto LABEL_56;
  }
LABEL_58:
  if (v33)
    goto LABEL_59;
LABEL_61:
  v34 = v17;
LABEL_62:
  v17 = *(_DWORD *)(v12 + 1088);
  if (v34 != v30)
  {
    v35 = v34 & 3;
LABEL_69:
    if (a4)
    {
      v54 = *a2;
      lhs = v52;
      fpfs_CheckCanKeepUp(a1, (uint64_t)&v54, &lhs, v35, a3, a4, (uint64_t)&v49, a6);
      v12 = DerivedStorage;
      v36 = 0;
      *a4 = fminf(*a4, 0.9);
      goto LABEL_76;
    }
    goto LABEL_75;
  }
LABEL_63:
  v35 = v17 & 3;
  if (!v14)
    goto LABEL_69;
  if (!*(_BYTE *)(v12 + 470))
  {
    v54 = *a2;
    lhs = v52;
    v36 = fpfs_CheckCanKeepUp(a1, (uint64_t)&v54, &lhs, v35, a3, a4, (uint64_t)&v49, a6);
    v12 = DerivedStorage;
    if ((_DWORD)v36)
      goto LABEL_76;
    if (*(_DWORD *)(DerivedStorage + 1880) == 1)
    {
      if (dword_1EE2A2A88)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(type.value) = 0;
        v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
        v36 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v12 = DerivedStorage;
        goto LABEL_76;
      }
      goto LABEL_67;
    }
LABEL_75:
    v36 = 0;
    goto LABEL_76;
  }
  if (a4)
    *a4 = 1.0;
LABEL_67:
  v36 = 1;
LABEL_76:
  if ((v49.flags & 1) != 0)
  {
    v38 = (CMTime *)v12;
    v39 = CMBaseObjectGetDerivedStorage();
    lhs = v49;
    rhs = v38[49];
    CMTimeSubtract(&v54, &lhs, &rhs);
    v49 = v54;
    v40 = *(float *)(v39 + 108);
    if (v40 <= 2.0 && v40 >= 0.0 && (*(_BYTE *)(v45 + 420) & 1) != 0)
    {
      memset(&v54, 0, sizeof(v54));
      lhs = v49;
      rhs = *(CMTime *)(v45 + 408);
      CMTimeSubtract(&v54, &lhs, &rhs);
      memset(&lhs, 0, sizeof(lhs));
      rhs = v50;
      CMTimeMultiplyByRatio(&lhs, &rhs, 1, 2);
      rhs = v54;
      type = lhs;
      CMTimeSubtract(&time2, &rhs, &type);
      rhs = v52;
      if (CMTimeCompare(&rhs, &time2) < 0)
      {
        v36 = 0;
        v51 = v54;
      }
    }
  }
  if (a5)
    *a5 = v51;
  return v36;
}

void fpfs_enqueuePrerollDidCompleteNotificationIfNeeded()
{
  uint64_t DerivedStorage;
  const void **v1;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 2200))
  {
    v1 = (const void **)DerivedStorage;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!FigCFDictionarySetInt32())
      fpfs_EnqueueNotification(*v1, CFSTR("PrerollDidComplete"), *v1, Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void fpfsi_networkActivitySubmitMetricsForInitialStartupIfAvailable()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 3232);
  if (v1)
  {
    v2 = *(double *)(DerivedStorage + 2024);
    if (v2 != 0.0)
    {
      v3 = *(double *)(DerivedStorage + 2984);
      if (v3 != 0.0)
      {
        v4 = *(double *)(DerivedStorage + 2056);
        if (v4 != 0.0)
        {
          FigNWActivitySubmitMetricsForInitialStartup(v1, v2, v3, v4);
          v5 = *(const void **)(DerivedStorage + 3232);
          if (v5)
          {
            CFRelease(v5);
            *(_QWORD *)(DerivedStorage + 3232) = 0;
          }
        }
      }
    }
  }
}

void fpfs_PostNotificationListFromDispatch(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 32);
      fpfs_PostNotificationFromDispatch((__CFString **)v2);
      v2 = v3;
    }
    while (v3);
  }
  free(a1);
}

void fpfs_PlayerResourceBudgetChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (!*(_BYTE *)(DerivedStorage + 51))
  {
    if (*(_QWORD *)(DerivedStorage + 80))
      fpfs_PlayQueueCallForEachItem((uint64_t)a2, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_HandleResourceBudgetChange, 0);
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
}

uint64_t fpfsi_HandleResourceBudgetChange(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v3 = DerivedStorage;
  v4 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v4 + 40) || !*(_BYTE *)(v4 + 48) || !*(_BYTE *)(v4 + 49))
    return 0;
  result = fpfsi_SetupResolutionCapFilter(a1);
  if (!(_DWORD)result)
    return FigAlternateSelectionBossApplyFilters(*(const void **)(v3 + 40));
  return result;
}

uint64_t fpfs_handleAvailableAudioFormatChange_Apply(const __CFArray *a1, unsigned __int8 *a2)
{
  if (a2)
    LODWORD(a2) = *a2;
  return fpfsi_handleAvailableAudioFormatChange(a1, (int)a2, 0);
}

uint64_t fpfsi_handleAvailableAudioFormatChange(const __CFArray *a1, int a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t updated;
  uint64_t v11;
  uint64_t AllocatorForMedia;
  int v13;
  CMTimeEpoch v14;
  const void *v15;
  char v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t *RenderingTrackofType;
  int SpatializationConfiguration;
  NSObject *v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t TrackWithFormatDescriptionOfType;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const opaqueCMFormatDescription *v28;
  signed int MediaSubType;
  int v30;
  int v31;
  int v32;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  int v35;
  NSObject *v36;
  __int128 v38;
  int v39;
  CMTime v40;
  CMTime v41;
  int v42;
  os_log_type_t v43[8];
  CFArrayRef theArray;
  CMTime rhs;
  CMTime lhs;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)DerivedStorage;
  v8 = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  if (*(_QWORD *)(DerivedStorage + 40))
  {
    v9 = v8;
    if (*(_DWORD *)(v8 + 32))
    {
      if (*(_QWORD *)(DerivedStorage + 1696))
      {
        *(_QWORD *)v43 = 0;
        updated = fpfsi_SetupSupportedAudioFormatFilter((uint64_t)a1);
        if ((_DWORD)updated)
          goto LABEL_96;
        updated = fpfsi_CreateAndAddCombinedAudioPreferenceFilter((uint64_t)a1);
        if ((_DWORD)updated)
          goto LABEL_96;
        updated = fpfsi_ConfigureAlternateSelectionBossForHighestAtmosFiltering();
        if ((_DWORD)updated)
          goto LABEL_96;
        updated = fpfsi_ConfigureAlternateSelectionBossPreferExclusiveAudioPassthroughFiltering();
        if ((_DWORD)updated)
          goto LABEL_96;
        fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();
        v11 = *(_QWORD *)(DerivedStorage + 40);
        AllocatorForMedia = FigGetAllocatorForMedia();
        updated = FigAlternateSelectionBossCopyProperty(v11, CFSTR("FilteredAlternateList"), AllocatorForMedia, &theArray);
        if ((_DWORD)updated)
          goto LABEL_96;
        if (!theArray || CFArrayGetCount(theArray) < 1)
        {
          v21 = FigSignalErrorAt();
          if (!(_DWORD)v21)
            goto LABEL_24;
          goto LABEL_23;
        }
        updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, theArray, v43);
        if ((_DWORD)updated)
        {
LABEL_96:
          v21 = updated;
LABEL_23:
          fpfs_StopPlayingItemWithOSStatus(v9, a1, v21);
          goto LABEL_24;
        }
        v39 = a2;
        if (!FigAlternateIsIFrameOnly(*(_QWORD *)(DerivedStorage + 1696))
          && !fpfs_isAlternateValid((uint64_t)a1, *(_QWORD *)(DerivedStorage + 1696)))
        {
          v42 = 0;
          v13 = *(_DWORD *)(DerivedStorage + 1088);
          memset(&v41, 0, sizeof(v41));
          fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v41);
          v38 = *MEMORY[0x1E0CA2E18];
          *(_OWORD *)&lhs.value = v38;
          v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          lhs.epoch = v14;
          *(_OWORD *)&rhs.value = v38;
          rhs.epoch = v14;
          fpfs_setRateInternal((uint64_t)v7, (const __CFString *)a1, (uint64_t)&lhs, (uint64_t)&rhs, 0.0);
          *(_BYTE *)(DerivedStorage + 464) = 0;
          v15 = *(const void **)v43;
          lhs = v41;
          rhs = *(CMTime *)(DerivedStorage + 1176);
          CMTimeAdd(&v40, &lhs, &rhs);
          lhs = v40;
          *(_OWORD *)&rhs.value = v38;
          rhs.epoch = v14;
          updated = fpfs_SetAlternateWithContext((uint64_t)v7, a1, v15, 1u, &lhs, (uint64_t)&rhs, 0, &v42, 0, 7u);
          if (!(_DWORD)updated)
          {
            v16 = v42;
            if (dword_1EE2A2A88)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v16 = v42;
            }
            fpfs_DeleteTracksWhenSubstreamChanges(a1, v13, v16);
            fpfs_setUnlikelyToKeepUpAndRanDry(a1);
          }
          goto LABEL_96;
        }
      }
      else
      {
        v39 = a2;
      }
      RenderingTrackofType = (uint64_t *)fpfs_FirstRenderingTrackofType((uint64_t)a1, 1936684398);
      SpatializationConfiguration = fpfsi_GetSpatializationConfiguration((uint64_t)a1);
      if (RenderingTrackofType
        && fpfs_ShouldEnableSpatializationForTrack(RenderingTrackofType) != (SpatializationConfiguration == 1))
      {
        if (dword_1EE2A2A88)
        {
          LODWORD(v41.value) = 0;
          v43[0] = OS_LOG_TYPE_DEFAULT;
          v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v20, v43[0]);
          v39 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          v39 = 1;
        }
      }
      CMBaseObjectGetDerivedStorage();
      CMBaseObjectGetDerivedStorage();
      if (fpfs_FirstRenderingTrackofType((uint64_t)a1, 1936684398))
      {
        v22 = 1;
      }
      else
      {
        TrackWithFormatDescriptionOfType = fpfs_FirstTrackWithFormatDescriptionOfType((uint64_t)a1, 1936684398);
        if (TrackWithFormatDescriptionOfType)
          v22 = *(_DWORD *)(TrackWithFormatDescriptionOfType + 152) == 6;
        else
          v22 = 0;
      }
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
      {
        v24 = 6;
      }
      else if (FigCFEqual())
      {
        v24 = 2;
      }
      else if (FigCFEqual())
      {
        v24 = 5;
      }
      else
      {
        v24 = v22;
      }
      CMBaseObjectGetDerivedStorage();
      v25 = fpfs_FirstTrackWithFormatDescriptionOfType((uint64_t)a1, 1936684398);
      LODWORD(rhs.value) = 0;
      v26 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504);
      if (!v25)
      {
        if (v26)
          v30 = 6;
        else
          v30 = 0;
        goto LABEL_74;
      }
      v27 = fpfs_WantAudioHardwarePassthroughForTrack(v25, (int *)&rhs);
      v28 = *(const opaqueCMFormatDescription **)(v25 + 40);
      MediaSubType = CMFormatDescriptionGetMediaSubType(v28);
      v30 = 1;
      if (MediaSubType > 1885692722)
      {
        if (MediaSubType <= 1902469938)
        {
          if (MediaSubType != 1885692723)
          {
            v31 = 1902324531;
LABEL_58:
            if (MediaSubType != v31)
              goto LABEL_72;
            goto LABEL_69;
          }
          goto LABEL_60;
        }
        if (MediaSubType == 2053464883)
          goto LABEL_60;
        if (MediaSubType == 2053319475)
          goto LABEL_69;
        v32 = 1902469939;
      }
      else
      {
        if (MediaSubType > 1700997938)
        {
          if (MediaSubType == 1700997939)
            goto LABEL_69;
          if (MediaSubType != 1700998451)
          {
            v31 = 1885547315;
            goto LABEL_58;
          }
LABEL_60:
          lhs.value = 0;
          FormatList = CMAudioFormatDescriptionGetFormatList(v28, (size_t *)&lhs);
          if (FormatList && lhs.value > 0x2FuLL)
          {
            mFormatID = FormatList->mASBD.mFormatID;
            if (mFormatID <= 1885547314)
            {
              if (mFormatID == 1667574579)
                goto LABEL_69;
              v35 = 1700997939;
            }
            else
            {
              if (mFormatID == 1885547315 || mFormatID == 1902324531)
                goto LABEL_69;
              v35 = 2053319475;
            }
            if (mFormatID == v35)
            {
LABEL_69:
              if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 561))
                v30 = 5;
              else
                v30 = 1;
LABEL_72:
              if (v26)
              {
LABEL_73:
                v30 = 6;
                goto LABEL_74;
              }
              goto LABEL_81;
            }
          }
          v30 = 1;
          if (v26)
            goto LABEL_73;
LABEL_81:
          if (v27)
          {
            switch(LODWORD(rhs.value))
            {
              case 0x61632D33:
                v30 = 2;
                break;
              case 0x65632B33:
                v30 = 4;
                break;
              case 0x65632D33:
                v30 = 3;
                break;
              default:
                v30 = 0;
                break;
            }
          }
LABEL_74:
          CMBaseObjectGetDerivedStorage();
          if (v24 == v30 || !v30)
          {
            if (!v39)
            {
LABEL_87:
              v21 = 0;
              if (!a3)
                goto LABEL_89;
              goto LABEL_88;
            }
          }
          else if (dword_1EE2A2A88)
          {
            LODWORD(v41.value) = 0;
            v43[0] = OS_LOG_TYPE_DEFAULT;
            v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v36, v43[0]);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpfs_stopResetDisturbReprepareAndResume(v7, a1, 0);
          goto LABEL_87;
        }
        if (MediaSubType == 1667574579)
          goto LABEL_69;
        v32 = 1667575091;
      }
      if (MediaSubType != v32)
        goto LABEL_72;
      goto LABEL_60;
    }
  }
  v21 = 0;
LABEL_24:
  if (a3)
LABEL_88:
    *a3 = 0;
LABEL_89:
  if (theArray)
    CFRelease(theArray);
  return v21;
}

void fpfs_DeleteTracksWhenSubstreamChanges(const void *a1, char a2, char a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a3 & 1) != 0)
  {
    fpfs_DeleteAllTracksForSubstream(a1, 0);
    if ((a3 & 2) == 0)
    {
LABEL_3:
      if ((a3 & 4) == 0)
        return;
LABEL_15:
      fpfs_DeleteAllTracksForSubstream(a1, 2);
      return;
    }
  }
  else if ((a3 & 2) == 0)
  {
    goto LABEL_3;
  }
  if ((a2 & 3) == 1 && (*(_BYTE *)(DerivedStorage + 1088) & 2) != 0)
  {
    v7 = *(_QWORD *)(DerivedStorage + 1040);
    if (v7)
    {
      do
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (!*(_BYTE *)(v7 + 180) && *(_DWORD *)(v7 + 32) == 1936684398)
          fpfs_DeleteTrack(a1, v7);
        if (!v8)
          break;
        v7 = v8;
      }
      while (*(_QWORD *)(DerivedStorage + 1040));
    }
  }
  fpfs_DeleteAllTracksForSubstream(a1, 1);
  CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 848));
  if ((a3 & 4) != 0)
    goto LABEL_15;
}

void fpfs_DeleteAllTracksForSubstream(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 1040);
  if (v5)
  {
    v6 = DerivedStorage;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v5 + 8);
      if (*(unsigned __int8 *)(v5 + 180) == a2)
      {
        if (*(_DWORD *)(v5 + 32) == 1986618469)
          v7 = 1;
        fpfs_DeleteTrack(a1, v5);
      }
      if (!v8)
        break;
      v5 = v8;
    }
    while (*(_QWORD *)(v6 + 1040));
    if (v7)
    {
      *(_BYTE *)(v6 + 528) = 1;
      fpfs_ClearRenderChains((const __CFArray *)a1, 1u);
    }
  }
}

void fpfs_applyAutoSelectionCriteria(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int AppliedMediaArray;
  CFTypeRef v6;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (!*(_BYTE *)(DerivedStorage + 51) && *(_BYTE *)(DerivedStorage + 705) && *(_QWORD *)(DerivedStorage + 80))
  {
    v3 = CMBaseObjectGetDerivedStorage();
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    AppliedMediaArray = fpfs_CreateAppliedMediaArray(v3, cf);
    v6 = cf[0];
    if (!AppliedMediaArray)
    {
      if (!cf[0])
        goto LABEL_2;
      fpfs_ApplyMediaArray(*(const __CFString **)(DerivedStorage + 80), (const __CFArray *)cf[0]);
      v6 = cf[0];
    }
    if (v6)
      CFRelease(v6);
  }
LABEL_2:
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

uint64_t fpfs_ApplyMediaArray(const __CFString *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *AllocatorForMedia;
  const __CFArray *MutableCopy;
  CFMutableArrayRef Mutable;
  CFIndex v9;
  const __CFDictionary *ValueAtIndex;
  const void *v11;
  const __CFDictionary *MediaTypeInMediaArray;
  unint64_t v13;
  const void *v14;
  unint64_t v15;
  const void *v16;
  CFTypeRef v17;
  NSObject *v18;
  CFTypeRef v19;
  const void *v20;
  const void *v21;
  NSObject *v22;
  CFTypeRef v23;
  const void *v24;
  const void *v25;
  int v26;
  const void *v27;
  const __CFDictionary *ClosedCaptionGroupLocatorMap;
  BOOL v29;
  int v30;
  NSObject *v31;
  int v32;
  int v33;
  int v34;
  _BOOL4 v35;
  _BOOL4 v36;
  int v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  const __CFDictionary *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t updated;
  CFTypeRef v58;
  CMTime *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  const void *Value;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  uint64_t AudioInstreamID;
  uint64_t v68;
  uint64_t v69;
  const __CFArray *v70;
  uint64_t FigBaseObject;
  void (*v72)(uint64_t, const __CFString *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  _BOOL4 v76;
  float v77;
  _BOOL4 v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  const void *ClosedCaptionType;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v88;
  unsigned int v89;
  const __CFArray *v90;
  uint64_t v91;
  const char *v92;
  const __CFString *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const __CFDictionary *v98;
  _BOOL4 v99;
  const __CFString *v100;
  const __CFString *v101;
  const __CFAllocator *v102;
  CFURLRef v103;
  CFURLRef v104;
  uint64_t v105;
  const __CFAllocator *v106;
  CFMutableDictionaryRef v107;
  __CFDictionary *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t CMBaseObject;
  void (*v112)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  const void *v120;
  const void *v121;
  const __CFAllocator *v122;
  __CFDictionary *v123;
  __CFDictionary *v124;
  const void **v125;
  const void *v126;
  const void *v127;
  const void *v128;
  CFTypeRef CFStringForOSTypeValue;
  const __CFArray *v131;
  const __CFArray *v132;
  const __CFArray *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  CFTypeRef v137;
  int v138;
  int v139;
  CFTypeRef v140;
  CFTypeRef v141;
  CFTypeRef cf2;
  uint64_t v143;
  int v144;
  float *key;
  uint64_t v146;
  const __CFArray *theArray;
  unsigned int theArraya;
  CFIndex Count;
  int v150;
  CFTypeRef cf;
  char cfa;
  CMTime v154;
  __int128 v155;
  uint64_t v156;
  CMTime v157;
  CMTime v158;
  int v159;
  os_log_type_t type[16];
  uint64_t v161;
  CMTime v162;
  CMTime idx;
  CFArrayRef v164;
  const void *v165;
  CMTime rhs;
  const char *v167;
  __int16 v168;
  const __CFString *v169;
  __int16 v170;
  const char *v171;
  CMTime lhs;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = a2;
  Count = CFArrayGetCount(a2);
  CFStringForOSTypeValue = (CFTypeRef)FigGetCFStringForOSTypeValue();
  v137 = (CFTypeRef)FigGetCFStringForOSTypeValue();
  FigGetCFStringForOSTypeValue();
  cf2 = (CFTypeRef)FigGetCFStringForOSTypeValue();
  v4 = *(_QWORD *)(DerivedStorage + 1696);
  v164 = 0;
  v165 = (const void *)v4;
  v5 = *(_QWORD *)(DerivedStorage + 1784);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (v5)
  {
    MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, *(CFArrayRef *)(DerivedStorage + 1784));
  }
  else
  {
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    MutableCopy = 0;
    *(_QWORD *)(DerivedStorage + 1784) = Mutable;
    if (!Mutable)
    {
      v54 = FigSignalErrorAt();
      if ((_DWORD)v54)
      {
        MutableCopy = 0;
        v140 = 0;
        v141 = 0;
        v58 = 0;
        v126 = *(const void **)(DerivedStorage + 1784);
        *(_QWORD *)(DerivedStorage + 1784) = 0;
        goto LABEL_235;
      }
      v58 = 0;
      goto LABEL_243;
    }
  }
  v146 = DerivedStorage;
  if (Count < 1)
  {
    v38 = 0;
    v37 = 0;
    HIDWORD(v136) = 0;
    LOBYTE(v139) = 0;
    v140 = 0;
    v141 = 0;
    LODWORD(v143) = 0;
    HIDWORD(v135) = 0;
    LOBYTE(v144) = 0;
    v36 = 1;
    v35 = 1;
    v138 = 1;
LABEL_87:
    v40 = *(_QWORD *)(DerivedStorage + 1696);
    if (v40)
    {
      if (*(_DWORD *)(DerivedStorage + 1088) == 1 && !v36)
        goto LABEL_128;
      if (FigAlternateIsAudioOnly(v40) && !v35)
        goto LABEL_128;
    }
    if (!v38)
    {
      v54 = 0;
      v58 = 0;
      v63 = 0;
      goto LABEL_191;
    }
    fpfs_FindAndSetForcedSubtitle(DerivedStorage);
    if (v138)
    {
      v43 = *(const __CFDictionary **)(DerivedStorage + 1792);
      if (v43)
      {
        CFDictionaryGetValue(v43, CFSTR("MediaSelectionOptionsPersistentID"));
        v44 = v37;
        CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 1792), CFSTR("MediaSelectionOptionsUniqueOutOfBandID"));
        if (FigCFEqual())
        {
          if (FigCFEqual())
          {
            if (v37 | HIDWORD(v136))
            {
              if (*(_BYTE *)(DerivedStorage + 460))
                fpfsi_postSelectedMediaOptionsDidChangeNotification(a1);
              v54 = 0;
              v58 = 0;
              v63 = 0;
              *(_BYTE *)(DerivedStorage + 461) = 1;
              if (!v44)
                goto LABEL_190;
              goto LABEL_172;
            }
            v54 = 0;
            v58 = 0;
            v63 = 0;
            goto LABEL_191;
          }
        }
      }
    }
    if (!*(_QWORD *)(DerivedStorage + 928) || !*(_QWORD *)(DerivedStorage + 1696))
    {
      v54 = 0;
      v58 = 0;
      v63 = 1;
      goto LABEL_191;
    }
    LODWORD(v136) = v37;
    v45 = CMBaseObjectGetDerivedStorage();
    memset(&idx, 0, sizeof(idx));
    memset(&v162, 0, sizeof(v162));
    memset(type, 0, sizeof(type));
    v161 = 0;
    v46 = *(_DWORD *)(DerivedStorage + 2196);
    v47 = *(_DWORD *)(DerivedStorage + 1088);
    v159 = 0;
    v48 = DerivedStorage;
    v49 = *(_BYTE *)(DerivedStorage + 332);
    memset(&v158, 0, sizeof(v158));
    cfa = v49;
    if (!HIDWORD(v135) || !*(_QWORD *)(DerivedStorage + 40))
      goto LABEL_121;
    v50 = CMBaseObjectGetDerivedStorage();
    lhs.value = 0;
    v51 = FigGetAllocatorForMedia();
    v52 = FigAlternateMediaSelectionAudibleFilterCreate(v51, *(const void **)(v50 + 1784), &lhs);
    if ((_DWORD)v52)
    {
      v54 = v52;
    }
    else
    {
      v53 = FigAlternateSelectionBossAddFilter(*(_QWORD *)(v50 + 40), (const void *)lhs.value);
      if (!(_DWORD)v53)
      {
        v53 = fpfsi_SetupAlternateSelectionBossWithPreferPlaybackFromCache((uint64_t)a1);
        if (!(_DWORD)v53)
        {
          v53 = fpfsi_CreateAndAddCombinedAudioPreferenceFilter((uint64_t)a1);
          if (!(_DWORD)v53)
            v53 = FigAlternateSelectionBossApplyFilters(*(const void **)(v50 + 40));
        }
      }
      v54 = v53;
    }
    if (lhs.value)
      CFRelease((CFTypeRef)lhs.value);
    if (!(_DWORD)v54)
    {
      v55 = *(_QWORD *)(v146 + 40);
      v56 = FigGetAllocatorForMedia();
      updated = FigAlternateSelectionBossCopyProperty(v55, CFSTR("FilteredAlternateList"), v56, &v164);
      if (!(_DWORD)updated)
      {
        if (v164 && CFArrayGetCount(v164) > 0)
        {
          updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, v164, &v165);
          v48 = v146;
          if (!(_DWORD)updated)
          {
LABEL_121:
            theArraya = v46;
            v58 = FigBytePumpRetain(*(CFTypeRef *)(v48 + 928));
            v150 = v47;
            if (v165 == *(const void **)(v48 + 1696))
            {
              v64 = FigGetCFStringForOSTypeValue();
              fpfs_FindMediaTypeInMediaArray(MutableCopy, v64, 0);
              Value = (const void *)FigCFDictionaryGetValue();
              CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
              FigAlternateGetAudioInstreamID((uint64_t)v165, Value);
              AudioInstreamID = FigAlternateGetAudioInstreamID((uint64_t)v165, CurrentAudioPersistentIDFromMediaOption);
              if (AudioInstreamID)
              {
                v68 = AudioInstreamID;
                if (!FigCFEqual())
                {
                  v69 = *(_QWORD *)(v146 + 1040);
                  if (v69)
                  {
                    v70 = MutableCopy;
                    do
                    {
                      if (*(_DWORD *)(v69 + 32) == 1936684398)
                      {
                        FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*(_QWORD *)(v69 + 96) + 32));
                        v72 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 56);
                        if (v72)
                          v72(FigBaseObject, CFSTR("SceneCompositionPreset"), v68);
                      }
                      v69 = *(_QWORD *)(v69 + 8);
                    }
                    while (v69);
                    LOBYTE(v139) = 0;
                    MutableCopy = v70;
                    v49 = cfa;
                  }
                  else
                  {
                    LOBYTE(v139) = 0;
                  }
                }
              }
            }
            key = (float *)v45;
            v132 = MutableCopy;
            v59 = (CMTime *)MEMORY[0x1E0CA2E18];
            if (((_BYTE)v139 || (v49 & 1) != 0)
              && (v60 = *(_QWORD *)v146,
                  lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18],
                  rhs = lhs,
                  fpfs_setRateInternal(v60, a1, (uint64_t)&lhs, (uint64_t)&rhs, 0.0),
                  *(_BYTE *)(v146 + 464) = 0,
                  (v49 & 1) != 0))
            {
              idx = *(CMTime *)(v146 + 320);
              v158 = idx;
              v162 = *(CMTime *)(v146 + 344);
              v161 = *(_QWORD *)(v146 + 384);
              *(_OWORD *)type = *(_OWORD *)(v146 + 368);
              v62 = *(_DWORD *)(v146 + 392);
              v61 = *(_DWORD *)(v146 + 2216);
            }
            else
            {
              fpfs_GetNextTimeToPlayIfEstablished((uint64_t)a1, (uint64_t)&v158);
              lhs = v158;
              *(_OWORD *)&rhs.value = kSeekToCurrentFudge;
              rhs.epoch = 0;
              CMTimeSubtract(&idx, &lhs, &rhs);
              v61 = 0;
              v162 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
              *(_OWORD *)type = *MEMORY[0x1E0CA2E30];
              v161 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
              v62 = 5;
            }
            v73 = fpfs_FlowControlPump(v146, 0xFFu, 0, 0);
            if ((_DWORD)v73)
              goto LABEL_254;
            v74 = *(_QWORD *)v146;
            v75 = v165;
            lhs = v158;
            rhs = *(CMTime *)(v146 + 1176);
            CMTimeAdd(&v157, &lhs, &rhs);
            lhs = v157;
            rhs = *v59;
            v73 = fpfs_SetAlternateWithContext(v74, a1, v75, 1u, &lhs, (uint64_t)&rhs, 0, &v159, 0, 9u);
            if ((_DWORD)v73)
            {
LABEL_254:
              v54 = v73;
            }
            else
            {
              if (v35 || v150 != 1 || *(_DWORD *)(v146 + 1088) != 1)
              {
                if (*(_BYTE *)(v146 + 460))
                  fpfsi_postSelectedMediaOptionsDidChangeNotification(a1);
                *(_BYTE *)(v146 + 461) = 1;
                if ((cfa & 1) != 0
                  || (~v150 & 3) == 0 && ((*(_DWORD *)(v146 + 1088) & 3) == 1 ? (v76 = v35) : (v76 = 0), v76 && v36))
                {
                  lhs = idx;
                  rhs = v162;
                  v155 = *(_OWORD *)type;
                  v156 = v161;
                  fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts((const __CFArray *)a1, &lhs, v62, (uint64_t)&rhs, &v155, theArraya, 0, v61, 0, 0, 1, 1, 0, 0);
                }
                CMTimeMake(&v154, 50, 1000);
                v77 = key[27];
                if (v77 > 2.0 || v77 < 0.0)
                {
                  DerivedStorage = v146;
                  v78 = *(_QWORD *)(v146 + 2960) == 0;
                }
                else
                {
                  v78 = 0;
                  DerivedStorage = v146;
                }
                MutableCopy = v132;
                fpfsi_TrimFromAllTracks(DerivedStorage, &v154, v77 < 0.0, v78);
                if (v138)
                {
                  fpfs_DeleteAllTracksForSubstream(a1, 2);
                }
                else
                {
                  fpfs_DeleteTracksWhenSubstreamChanges(a1, v150, v159);
                  if ((_BYTE)v139)
                    fpfs_setUnlikelyToKeepUpAndRanDry(a1);
                }
                v54 = fpfs_FlowControlPump(DerivedStorage, 0, 1, 255);
                if ((_BYTE)v144)
                  fpfs_PrepareAndEnqueueTracksChangedNotification(*(const void **)DerivedStorage, a1, v79, v80, v81, v82, v83, v84);
                v63 = 1;
                if (v136)
                {
                  if (!(_DWORD)v136)
                  {
LABEL_190:
                    fpfs_updateClosedCaptionsDisplay(*(const void **)DerivedStorage, 0);
                    goto LABEL_191;
                  }
LABEL_172:
                  v85 = *(_QWORD *)(DerivedStorage + 816);
                  if (v85)
                  {
                    ClosedCaptionType = fpfsi_GetClosedCaptionType();
                    fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v85, (uint64_t)CFSTR("CCRPP_ClosedCaptionType"), (uint64_t)ClosedCaptionType);
                  }
                  if (dword_1EE2A2A88)
                  {
                    LODWORD(idx.value) = 0;
                    LOBYTE(v162.value) = 0;
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v88 = idx.value;
                    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v162.value))
                      v89 = v88;
                    else
                      v89 = v88 & 0xFFFFFFFE;
                    if (v89)
                    {
                      v90 = MutableCopy;
                      v91 = *(_QWORD *)v146;
                      if (*(_QWORD *)v146)
                        v92 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                      else
                        v92 = "";
                      v93 = a1;
                      if (a1)
                      {
                        v94 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                        v93 = a1;
                      }
                      else
                      {
                        v94 = "";
                      }
                      LODWORD(rhs.value) = 136316162;
                      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_ApplyMediaArray";
                      LOWORD(rhs.flags) = 2048;
                      *(_QWORD *)((char *)&rhs.flags + 2) = v91;
                      HIWORD(rhs.epoch) = 2082;
                      v167 = v92;
                      v168 = 2048;
                      v169 = v93;
                      v170 = 2082;
                      v171 = v94;
                      _os_log_send_and_compose_impl();
                      MutableCopy = v90;
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    DerivedStorage = v146;
                  }
                  goto LABEL_190;
                }
LABEL_191:
                v95 = CMBaseObjectGetDerivedStorage();
                v96 = CMBaseObjectGetDerivedStorage();
                v97 = v96;
                if (!v63 || !(_DWORD)v143)
                {
                  if (!*(_BYTE *)(v96 + 720))
                    fpfsi_clearOutOfBandSubtitleObjects();
                  goto LABEL_231;
                }
                fpfsi_clearOutOfBandSubtitleObjects();
                v98 = *(const __CFDictionary **)(v95 + 896);
                if (v98)
                {
                  if (*(_BYTE *)(v97 + 462))
                  {
                    v99 = *(_BYTE *)(v97 + 463) != 0;
                    if (*(_BYTE *)(v97 + 720))
                      goto LABEL_201;
                  }
                  else
                  {
                    v99 = 0;
                    if (*(_BYTE *)(v97 + 720))
                    {
LABEL_201:
                      v100 = (const __CFString *)CFDictionaryGetValue(v98, CFSTR("MediaSelectionOptionsURL"));
                      if (!v100)
                        goto LABEL_231;
                      v101 = v100;
                      if (!FigCFStringFind())
                        goto LABEL_231;
                      v102 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      v103 = CFURLCreateWithString(v102, v101, 0);
                      if (!v103)
                        goto LABEL_231;
                      v104 = v103;
                      v133 = MutableCopy;
                      v105 = CMBaseObjectGetDerivedStorage();
                      v106 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      v107 = CFDictionaryCreateMutable(v106, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      if (!v107)
                        goto LABEL_257;
                      v108 = v107;
                      v109 = *(_QWORD *)(v105 + 32);
                      if (v109)
                      {
                        lhs.value = 0;
                        rhs.value = 0;
                        v110 = FigGetAllocatorForMedia();
                        CMBaseObject = FigAssetGetCMBaseObject(v109);
                        v112 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                        if (v112)
                        {
                          v112(CMBaseObject, CFSTR("assetProperty_CreationURL"), v110, &lhs);
                          if (lhs.value)
                          {
                            CFDictionarySetValue(v108, CFSTR("ReferenceSecurityPolicyFlagBaseURL"), (const void *)lhs.value);
                            CFRelease((CFTypeRef)lhs.value);
                          }
                        }
                        v113 = *(_QWORD *)(v105 + 32);
                        v114 = FigGetAllocatorForMedia();
                        v115 = FigAssetGetCMBaseObject(v113);
                        v116 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                        if (v116)
                        {
                          v116(v115, CFSTR("assetProperty_CreationFlags"), v114, &rhs);
                          if (rhs.value)
                          {
                            idx.value = 0;
                            CFNumberGetValue((CFNumberRef)rhs.value, kCFNumberSInt64Type, &idx);
                            CFRelease((CFTypeRef)rhs.value);
                            if (((LODWORD(idx.value) >> 1) & 0x1E) != 0)
                              FigCFDictionarySetInt32();
                          }
                        }
                      }
                      v117 = FigGetAllocatorForMedia();
                      v118 = (uint64_t *)(v95 + 904);
                      FigOutOfBandTrackControllerCreate(v117, v104, v108, (uint64_t *)(v95 + 904));
                      CFRelease(v108);
                      if (*(_QWORD *)(v95 + 904))
                      {
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        fpfs_GetTime(v95, (uint64_t)&lhs);
                        if ((lhs.flags & 0x1D) == 1)
                        {
                          v119 = *(_QWORD *)(v95 + 904);
                          fpfs_GetTime(v95, (uint64_t)&rhs);
                          FigOutOfBandTrackControllerSetCurrentTime(v119, (__int128 *)&rhs.value);
                        }
                        v120 = *(const void **)(v95 + 1808);
                        if (v120)
                          FigOutOfBandTrackControllerSetProperty(*v118, CFSTR("TextMarkupArray"), v120);
                        v121 = *(const void **)(v95 + 1816);
                        if (v121)
                          FigOutOfBandTrackControllerSetProperty(*v118, CFSTR("TextHighlightArray"), v121);
                        if (v99)
                        {
                          LODWORD(idx.value) = 0;
                          LODWORD(v162.value) = 0;
                          v122 = (const __CFAllocator *)FigGetAllocatorForMedia();
                          v123 = CFDictionaryCreateMutable(v122, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                          if (v123)
                          {
                            v124 = v123;
                            v125 = (const void **)MEMORY[0x1E0C9AE50];
                            if (!*(_BYTE *)(v97 + 462))
                              v125 = (const void **)MEMORY[0x1E0C9AE40];
                            CFDictionarySetValue(v123, CFSTR("Visuals"), *v125);
                            if (*(_BYTE *)(v97 + 462))
                              CFDictionarySetValue(v124, CFSTR("NeroTransport"), *(const void **)(v97 + 488));
                            FigOutOfBandTrackControllerSetProperty(*v118, CFSTR("UsingNeroVideo"), v124);
                            fpfsi_GetDimensions((uint64_t)a1, (float *)&idx, (float *)&v162);
                          }
LABEL_257:
                          FigSignalErrorAt();
                          goto LABEL_230;
                        }
                        if (!FigOutOfBandTrackControllerPrepare(*v118))
                          FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)fpfsi_synchronizeOOBSController, (uint64_t)a1, *(const void **)(v95 + 576), *(NSObject **)(v95 + 600), (uint64_t *)(v95 + 912));
                      }
                      CFRelease(v104);
LABEL_230:
                      MutableCopy = v133;
                      goto LABEL_231;
                    }
                  }
                  if (v99)
                    goto LABEL_201;
                }
LABEL_231:
                DerivedStorage = v146;
                fpfs_updateCaptionOrSubtitleHintOnVideoPipeline();
                goto LABEL_232;
              }
              v54 = 4294954514;
            }
            MutableCopy = v132;
LABEL_162:
            DerivedStorage = v146;
            goto LABEL_232;
          }
        }
        else
        {
          updated = FigSignalErrorAt();
        }
      }
      v54 = updated;
    }
    v58 = 0;
    goto LABEL_162;
  }
  v131 = MutableCopy;
  v143 = 0;
  v135 = 0;
  v136 = 0;
  v134 = 0;
  v9 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v144 = 0;
  v138 = 1;
  do
  {
    idx.value = 0;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
    v11 = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
    MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(*(const __CFArray **)(DerivedStorage + 1784), (uint64_t)v11, &idx.value);
    v13 = (unint64_t)CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
    v14 = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsUniqueOutOfBandID"));
    if (!v11)
    {
      LODWORD(v162.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      DerivedStorage = v146;
      goto LABEL_70;
    }
    v15 = (unint64_t)v14;
    if (FigCFEqual())
    {
      LODWORD(v162.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
      MutableCopy = v131;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_128;
    }
    if (!MediaTypeInMediaArray)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 1784), ValueAtIndex);
      if (!v15)
      {
        cf = 0;
        v19 = 0;
        goto LABEL_37;
      }
      v19 = *(CFTypeRef *)(DerivedStorage + 896);
      *(_QWORD *)(DerivedStorage + 896) = ValueAtIndex;
      if (ValueAtIndex)
        CFRetain(ValueAtIndex);
      if (v19)
      {
        CFRelease(v19);
        cf = 0;
        v19 = 0;
      }
      else
      {
        cf = 0;
      }
      goto LABEL_36;
    }
    v16 = CFDictionaryGetValue(MediaTypeInMediaArray, CFSTR("MediaSelectionOptionsPersistentID"));
    if (v16)
      v17 = CFRetain(v16);
    else
      v17 = 0;
    v20 = CFDictionaryGetValue(MediaTypeInMediaArray, CFSTR("MediaSelectionOptionsUniqueOutOfBandID"));
    if (v20)
      v19 = CFRetain(v20);
    else
      v19 = 0;
    if (!FigCFEqual() || !FigCFEqual())
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 1784), idx.value);
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 1784), ValueAtIndex);
      cf = v17;
      if (v15)
      {
        v23 = v19;
        v24 = *(const void **)(DerivedStorage + 896);
        *(_QWORD *)(DerivedStorage + 896) = ValueAtIndex;
        if (ValueAtIndex)
          CFRetain(ValueAtIndex);
        if (v24)
          CFRelease(v24);
        LODWORD(v143) = 1;
        v19 = v23;
LABEL_37:
        v21 = (const void *)FigCFCopyCompactDescription();
        v26 = v144;
        if (!(v13 | v15))
          v26 = 1;
        v144 = v26;
        v27 = v19;
        if (!*(_QWORD *)(DerivedStorage + 1696))
          goto LABEL_61;
        if (!CFEqual(v11, cf2))
        {
          if (CFEqual(v11, v137) || CFEqual(v11, CFStringForOSTypeValue))
          {
            if (cf)
              v29 = v13 == 0;
            else
              v29 = 1;
            v30 = v139;
            if (!v29)
              v30 = 1;
            v139 = v30;
            if (v13)
            {
              v138 = 0;
              HIDWORD(v135) = 1;
            }
            else
            {
              v32 = CFEqual(v11, v137);
              v138 = 0;
              if (v32)
                v33 = 1;
              else
                v33 = v135;
              v34 = v134;
              if (!v32)
                v34 = 1;
              v134 = v34;
              LODWORD(v135) = v33;
            }
          }
          else
          {
            v138 = 0;
            v139 = 1;
          }
          goto LABEL_61;
        }
        ClosedCaptionGroupLocatorMap = (const __CFDictionary *)FigAlternateGetClosedCaptionGroupLocatorMap(*(_QWORD *)(DerivedStorage + 1696));
        if (cf)
        {
          v141 = CFRetain(cf);
          if (v27)
            goto LABEL_43;
        }
        else
        {
          v141 = 0;
          if (v27)
          {
LABEL_43:
            v140 = CFRetain(v27);
            if (!ClosedCaptionGroupLocatorMap)
              goto LABEL_59;
LABEL_56:
            if (v13 && CFDictionaryContainsKey(ClosedCaptionGroupLocatorMap, (const void *)v13))
            {
              LODWORD(v136) = 1;
LABEL_60:
              v19 = v27;
LABEL_61:
              if (dword_1EE2A2A88)
              {
                LODWORD(v162.value) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v19 = v27;
              }
              HIDWORD(v143) = 1;
              v17 = cf;
              goto LABEL_64;
            }
LABEL_59:
            HIDWORD(v136) = 1;
            goto LABEL_60;
          }
        }
        v140 = 0;
        if (!ClosedCaptionGroupLocatorMap)
          goto LABEL_59;
        goto LABEL_56;
      }
      if (!v19)
        goto LABEL_37;
      v25 = *(const void **)(DerivedStorage + 896);
      if (v25)
      {
        CFRelease(v25);
        *(_QWORD *)(DerivedStorage + 896) = 0;
      }
LABEL_36:
      LODWORD(v143) = 1;
      goto LABEL_37;
    }
    v21 = (const void *)FigCFCopyCompactDescription();
    if (dword_1EE2A2A88)
    {
      LODWORD(v162.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (!v21)
        goto LABEL_66;
LABEL_65:
      CFRelease(v21);
      goto LABEL_66;
    }
LABEL_64:
    if (v21)
      goto LABEL_65;
LABEL_66:
    if (v17)
      CFRelease(v17);
    if (v19)
      CFRelease(v19);
LABEL_70:
    ++v9;
  }
  while (Count != v9);
  v35 = v134 == 0;
  v36 = v135 == 0;
  if (!v134)
  {
    MutableCopy = v131;
    v37 = v136;
    v38 = HIDWORD(v143);
    goto LABEL_87;
  }
  MutableCopy = v131;
  v37 = v136;
  v38 = HIDWORD(v143);
  if (!(_BYTE)v135)
    goto LABEL_87;
LABEL_128:
  v54 = FigSignalErrorAt();
  v58 = 0;
LABEL_232:
  if ((_DWORD)v54)
  {
    v126 = *(const void **)(DerivedStorage + 1784);
    *(_QWORD *)(DerivedStorage + 1784) = MutableCopy;
    if (MutableCopy)
      CFRetain(MutableCopy);
LABEL_235:
    v128 = v140;
    v127 = v141;
    if (v126)
      CFRelease(v126);
    if (MutableCopy)
LABEL_238:
      CFRelease(MutableCopy);
  }
  else
  {
    v128 = v140;
    v127 = v141;
    if (MutableCopy)
      goto LABEL_238;
  }
  if (v127)
    CFRelease(v127);
  if (v128)
    CFRelease(v128);
LABEL_243:
  if (v164)
    CFRelease(v164);
  if (v58)
    CFRelease(v58);
  return v54;
}

void fpfsi_clearOutOfBandSubtitleObjects()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 912);
  if (v1)
  {
    FigSyncMomentSourceDestroy(v1);
    *(_QWORD *)(DerivedStorage + 912) = 0;
  }
  v2 = *(_QWORD *)(DerivedStorage + 904);
  if (v2)
  {
    FigOutOfBandTrackControllerInvalidate(v2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterBarrier();
    v3 = *(const void **)(DerivedStorage + 904);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 904) = 0;
    }
  }
}

void fpfsi_handleOutOfBandTrackSubtitleChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v7 = DerivedStorage;
    if (!FigRetainProxyIsInvalidated()
      && !*(_BYTE *)(v7 + 867)
      && !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 51))
    {
      fpfs_PostNotificationWhenUnlocked(*(const void **)v7, CFSTR("SubtitleChanged"), *(const void **)v7, a5);
    }
  }
}

void fpfsi_handleOutOfBandTrackPlaybackFailed()
{
  const void *v0;

  v0 = (const void *)FigCFCopyCompactDescription();
  if (v0)
    CFRelease(v0);
}

void fpfs_setDisplaySizeOnOutOfBandSubtitleController(uint64_t a1, double a2, double a3)
{
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v5;

  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)&a2);
  if (DictionaryRepresentation)
  {
    v5 = DictionaryRepresentation;
    FigOutOfBandTrackControllerSetProperty(a1, CFSTR("NeroDisplaySize"), DictionaryRepresentation);
    CFRelease(v5);
  }
}

uint64_t fpfsi_synchronizeOOBSController(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  float v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigRetainProxyIsInvalidated();
  if (!(_DWORD)result)
  {
    if (a2)
    {
      result = *(_QWORD *)(DerivedStorage + 904);
      if (result)
      {
        if ((*(_BYTE *)(a2 + 4) & 3) != 0)
        {
          v5 = *(double *)(a2 + 8);
          v8 = *(_OWORD *)(a2 + 16);
          v9 = *(_QWORD *)(a2 + 32);
          v6 = *(_OWORD *)(a2 + 40);
          v7 = *(_QWORD *)(a2 + 56);
          return FigOutOfBandTrackControllerSetRateAndAnchorTime(result, &v8, &v6, v5);
        }
      }
    }
  }
  return result;
}

void fpfs_Invalidate(void *cf)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRetain(cf);
  fpfs_InvalidateGuts(cf);
}

uint64_t sub_192A2FF2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  const void *v44;

  CFRelease(v44);
  return 0;
}

void fpfs_Finalize(void *a1)
{
  CMBaseObjectGetDerivedStorage();
  fpfs_InvalidateGuts(a1);
}

void sub_192A2FF90()
{
  _QWORD *v0;
  const void *v1;
  NSObject *v2;
  const void *v3;
  const void *v4;

  v1 = (const void *)v0[2];
  if (v1)
  {
    CFRelease(v1);
    v0[2] = 0;
  }
  v2 = v0[3];
  if (v2)
  {
    dispatch_release(v2);
    v0[3] = 0;
  }
  v3 = (const void *)v0[46];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)v0[24];
  if (v4)
    CFRelease(v4);
  FPSupport_releaseClosedCaptions((uint64_t)(v0 + 26));
}

uint64_t sub_192A2FFD0()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*v0)
  {
    result = FigSimpleMutexDestroy();
    *v0 = 0;
  }
  return result;
}

uint64_t fpfs_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const __CFArray *Next;
  __CFString **v12;
  int v13;
  __CFString **v14;
  const void *v15;
  const __CFArray *v16;
  CFArrayRef Copy;
  const __CFAllocator *v18;
  int *p_valuePtr;
  CFNumberType v20;
  const __CFArray *v21;
  CFIndex Count;
  CFIndex v23;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  void *v26;
  CFIndex i;
  const __CFArray *v28;
  const __CFAllocator *v29;
  uint64_t v30;
  const __CFArray *v31;
  uint64_t RenderingTrackofType;
  const void *v33;
  int v34;
  const void *v35;
  __CFDictionary *v36;
  __CFDictionary *v37;
  const void *v38;
  CFIndex v39;
  int v40;
  int v41;
  int valuePtr;

  if (!a2 || !a1 || !a4)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigPropertyStorageCopyValue(*(_QWORD *)(DerivedStorage + 16), (uint64_t)a2, a4))
  {
    fpfs_LockMutexWithCaller((uint64_t)a1);
    if (*(_BYTE *)(DerivedStorage + 51))
      goto LABEL_97;
    if (CFEqual(a2, CFSTR("PerformanceDictionary")))
    {
      v9 = CMBaseObjectGetDerivedStorage();
      Next = fpfs_getNext(v9, 0);
      fpfsi_copyPerformanceDictionary((uint64_t)Next, a3, a4);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("GatherPerformanceHistoryArray")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = *(unsigned __int8 *)(DerivedStorage + 656);
LABEL_12:
      v14 = (__CFString **)MEMORY[0x1E0C9AE40];
      goto LABEL_13;
    }
    if (CFEqual(a2, CFSTR("PerformanceHistoryArray")))
    {
      if (!*(_BYTE *)(DerivedStorage + 656))
        goto LABEL_97;
      v16 = *(const __CFArray **)(DerivedStorage + 664);
      if (v16)
      {
        Copy = CFArrayCreateCopy(a3, v16);
        *a4 = Copy;
        if (Copy)
          goto LABEL_18;
LABEL_97:
        FigSignalErrorAt();
        goto LABEL_18;
      }
LABEL_26:
      *a4 = 0;
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("FigAudioSession")))
    {
      v15 = *(const void **)(DerivedStorage + 536);
      if (v15)
        goto LABEL_16;
      goto LABEL_26;
    }
    if (CFEqual(a2, CFSTR("IsValid")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("LastSentSubtitleSample")))
    {
      v15 = *(const void **)(DerivedStorage + 368);
      if (!v15)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("PlayerVolume")))
    {
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = (int *)(DerivedStorage + 104);
      v20 = kCFNumberFloatType;
LABEL_36:
      v15 = CFNumberCreate(v18, v20, p_valuePtr);
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("EQPreset")))
    {
      valuePtr = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 172);
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = &valuePtr;
      v20 = kCFNumberIntType;
      goto LABEL_36;
    }
    if (CFEqual(a2, CFSTR("STSLabel")))
    {
      v15 = *(const void **)(DerivedStorage + 192);
      if (!v15)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("DisplayClosedCaptions")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = *(unsigned __int8 *)(DerivedStorage + 209);
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("RequiredNumberOfCAContextsForClosedCaptionLayers")))
    {
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = (int *)(DerivedStorage + 232);
LABEL_45:
      v20 = kCFNumberSInt32Type;
      goto LABEL_36;
    }
    if (CFEqual(a2, CFSTR("ClosedCaptionCAContextIDArray")))
    {
      v21 = *(const __CFArray **)(DerivedStorage + 240);
      if (!v21)
        goto LABEL_97;
      Count = CFArrayGetCount(v21);
      if (Count < 1)
        goto LABEL_97;
      v23 = Count;
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
      v26 = (void *)MEMORY[0x19403137C]();
      for (i = 0; i != v23; ++i)
      {
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 240), i), "contextId");
        FigCFArrayAppendInt32();
      }
      objc_autoreleasePoolPop(v26);
      *a4 = Mutable;
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("ActionAtEnd")))
    {
      switch(*(_DWORD *)(DerivedStorage + 632))
      {
        case 0:
          v12 = kFigPlayerAction_Advance;
          goto LABEL_15;
        case 1:
          v12 = kFigPlayerAction_Stop;
          goto LABEL_15;
        case 2:
          v12 = kFigPlayerAction_None;
          goto LABEL_15;
        case 3:
          v12 = kFigPlayerAction_StopAtEndOfQueue;
          goto LABEL_15;
        default:
          goto LABEL_18;
      }
    }
    if (CFEqual(a2, CFSTR("ApplyVideoTrackMatrix")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = *(unsigned __int8 *)(DerivedStorage + 608);
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("VideoLayerArray")))
    {
      v28 = *(const __CFArray **)(DerivedStorage + 376);
      if (v28)
      {
        v15 = CFArrayCreateCopy(a3, v28);
      }
      else
      {
        v29 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v15 = CFArrayCreate(v29, 0, 0, MEMORY[0x1E0C9B378]);
      }
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("VideoLayerDestinationIsTVOut")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE40];
      v13 = *(unsigned __int8 *)(DerivedStorage + 408);
      v14 = (__CFString **)MEMORY[0x1E0C9AE50];
LABEL_13:
      if (!v13)
        v12 = v14;
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("PreventDisplaySleepDuringVideoPlayback")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = *(unsigned __int8 *)(DerivedStorage + 408);
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("CurrentlyDisplayedCVPixelBuffer")))
    {
      if (*(_QWORD *)(DerivedStorage + 80))
      {
        v30 = CMBaseObjectGetDerivedStorage();
        FPSupport_CopyCurrentlyDisplayedPixelBufferFromCAImageQueueArray(*(CFArrayRef *)(v30 + 656), a3, a4);
        goto LABEL_18;
      }
      goto LABEL_26;
    }
    if (CFEqual(a2, CFSTR("CurrentVideoFrameRate")))
    {
      v31 = fpfs_getNext(DerivedStorage, 0);
      if (v31)
      {
        RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v31, 1986618469);
        if (RenderingTrackofType)
          FigRenderPipelineCopyProperty(*(_QWORD *)(*(_QWORD *)(RenderingTrackofType + 96) + 32), (uint64_t)CFSTR("CurrentVideoFrameRate"), (uint64_t)a3, (uint64_t)a4);
      }
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("AudioDeviceUID")))
    {
      *a4 = *(CFArrayRef *)(DerivedStorage + 176);
      v33 = *(const void **)(DerivedStorage + 176);
      if (v33)
        CFRetain(v33);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("EnableHardwareAcceleratedVideoDecoder")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      if (*(_DWORD *)(DerivedStorage + 592) != 1)
        v12 = (__CFString **)MEMORY[0x1E0C9AE40];
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("PreferredVideoDecoderGPURegistryID")))
    {
      v15 = *(const void **)(DerivedStorage + 600);
      if (!v15)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("DisplayTimedMetadata")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = *(unsigned __int8 *)(DerivedStorage + 459);
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("SendToNero")))
    {
      v34 = *(unsigned __int8 *)(DerivedStorage + 462);
      v35 = *(const void **)(DerivedStorage + 488);
      v36 = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v36)
        goto LABEL_97;
      v37 = v36;
      if (v34)
        v38 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v38 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v36, CFSTR("Visuals"), v38);
      if (v35)
        CFDictionarySetValue(v37, CFSTR("NeroTransport"), v35);
      *a4 = v37;
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("DisplayList")))
    {
      v15 = *(const void **)(DerivedStorage + 672);
      if (!v15)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("ExternalProtectionStatus")))
    {
      fpfs_CopyExternalProtectionStatus((uint64_t)a1, a3, a4);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("MediaSelectionCriteria")))
    {
      v15 = *(const void **)(DerivedStorage + 688);
      if (!v15)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("DefaultMediaSelectionCriteria")))
    {
      FigGetAllocatorForMedia();
      v15 = FigAutomaticMediaSelectionCopyDefaultCriteria();
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("LegibleFallbackMediaSelectionCriteria")))
    {
      v15 = *(const void **)(DerivedStorage + 696);
      if (!v15)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = *(unsigned __int8 *)(DerivedStorage + 704);
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("AppliesMediaSelectionCriteriaAutomatically")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = *(unsigned __int8 *)(DerivedStorage + 705);
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("MinRateForAudioPlayback")))
    {
      if (!*(_BYTE *)(DerivedStorage + 708))
        goto LABEL_26;
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = (int *)(DerivedStorage + 712);
    }
    else
    {
      if (!CFEqual(a2, CFSTR("MaxRateForAudioPlayback")))
      {
        if (CFEqual(a2, CFSTR("DestinationPixelBufferAttributes")))
        {
          v15 = *(const void **)(DerivedStorage + 584);
          if (!v15)
            goto LABEL_17;
          goto LABEL_16;
        }
        if (CFEqual(a2, CFSTR("AllowPixelBufferPoolSharing")))
        {
          v15 = *(const void **)(DerivedStorage + 624);
          if (v15)
            goto LABEL_16;
          v12 = (__CFString **)MEMORY[0x1E0C9AE40];
          goto LABEL_15;
        }
        if (CFEqual(a2, CFSTR("PlayQueueIsHungry")))
        {
          v39 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
          v12 = (__CFString **)MEMORY[0x1E0C9AE50];
          if (v39)
            v12 = (__CFString **)MEMORY[0x1E0C9AE40];
          goto LABEL_15;
        }
        if (CFEqual(a2, CFSTR("MultichannelAudioStrategy")))
        {
          v15 = *(const void **)(DerivedStorage + 728);
          goto LABEL_16;
        }
        if (CFEqual(a2, CFSTR("BandwidthCap")))
        {
          v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          p_valuePtr = (int *)(DerivedStorage + 748);
          goto LABEL_45;
        }
        if (CFEqual(a2, CFSTR("PreferredMaximumBufferDuration")))
        {
          v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          p_valuePtr = (int *)(DerivedStorage + 752);
          goto LABEL_45;
        }
        if (CFEqual(a2, CFSTR("LimitsBandwidthForCellularAccess")))
        {
          v12 = (__CFString **)MEMORY[0x1E0C9AE50];
          v13 = *(unsigned __int8 *)(DerivedStorage + 768);
          goto LABEL_12;
        }
        if (CFEqual(a2, CFSTR("AutomaticallyWaitsToMinimizeStalling")))
        {
          v12 = (__CFString **)MEMORY[0x1E0C9AE50];
          v13 = *(unsigned __int8 *)(DerivedStorage + 160);
          goto LABEL_12;
        }
        if (CFEqual(a2, CFSTR("PlaybackState")))
        {
          v41 = 0;
          fpfs_getPlaybackState((uint64_t)a1, &v41, 0);
          v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          p_valuePtr = &v41;
          goto LABEL_45;
        }
        if (CFEqual(a2, CFSTR("CaptionPlaybackStrategy")))
        {
          if (*(_BYTE *)(DerivedStorage + 461))
            v12 = kFigPlayerCaptionRenderingStrategy_CoreTextSubtitleRenderer;
          else
            v12 = kFigPlayerCaptionRenderingStrategy_CaptionDisplayService;
          goto LABEL_15;
        }
        if (CFEqual(a2, CFSTR("CaptionPipelineStrategy")))
        {
          if (*(_BYTE *)(DerivedStorage + 460))
            v12 = kFigPlayerCaptionPipelineStrategy_AttributedStrings;
          else
            v12 = kFigPlayerCaptionPipelineStrategy_FigCaptions;
          goto LABEL_15;
        }
        if (CFEqual(a2, CFSTR("PlayerRole")))
        {
          v40 = *(_DWORD *)(DerivedStorage + 808);
          if (v40 == 2)
          {
            v12 = kFigPlayerRole_PIP;
          }
          else
          {
            if (v40 != 1)
              goto LABEL_26;
            v12 = kFigPlayerRole_Scanning;
          }
LABEL_15:
          v15 = *v12;
LABEL_16:
          v15 = CFRetain(v15);
LABEL_17:
          *a4 = (CFArrayRef)v15;
          goto LABEL_18;
        }
        if (CFEqual(a2, CFSTR("RequiresNumVideoSlots")))
        {
          v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          p_valuePtr = (int *)(DerivedStorage + 400);
          v20 = kCFNumberCFIndexType;
          goto LABEL_36;
        }
LABEL_18:
        fpfs_UnlockAndPostNotificationsWithCaller(a1);
      }
      if (!*(_BYTE *)(DerivedStorage + 709))
        goto LABEL_26;
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = (int *)(DerivedStorage + 716);
    }
    v20 = kCFNumberFloat32Type;
    goto LABEL_36;
  }
  return 0;
}

uint64_t fpfs_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)fpfs_handleSetProperty, 0, 0, 0);
}

void fpfs_InvalidateGuts(void *a1)
{
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19403137C]();
  fpfs_RemoveFromPlayQueueGuts(a1, 0, 0);
}

void sub_192A30FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;

  v11 = (uint64_t)a9;
  if (v10)
  {
    FPSupport_AppendDeferredTransactionChangeToRelease(a9, v10, (uint64_t)"fpfs_InvalidateGuts");
    v11 = (uint64_t)a9;
  }
  FigDeferredTransactionCommit(v11);
  if (v12)
    CFRelease(v12);
  objc_autoreleasePoolPop(v9);
}

void fpfs_RemoveFromPlayQueueGuts(void *a1, const void *a2, char a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const char *v8;
  const char *v9;
  _BYTE *v10;
  _BYTE *v11;
  const __CFArray *v12;
  CFIndex FirstIndexOfValue;
  CFIndex v14;
  const void *ValueAtIndex;
  _BYTE *v16;
  uint64_t v17;
  char __dst[128];
  uint64_t v19;
  CFRange v20;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a1)
      v8 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
    else
      v8 = "";
    strncpy(__dst, v8, 8uLL);
    if (a2)
      v9 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
    else
      v9 = "";
    strncpy(__dst, v9, 8uLL);
    kdebug_trace();
  }
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (!*(_BYTE *)(DerivedStorage + 51))
  {
    if (a2)
    {
      if (!fpfs_CheckItem((uint64_t)a1, a2))
      {
        FigSignalErrorAt();
        goto LABEL_28;
      }
      v10 = (_BYTE *)CMBaseObjectGetDerivedStorage();
      if (!v10[463])
        goto LABEL_28;
      v11 = v10;
      v10[530] = 1;
      v10[467] = a3;
      v12 = *(const __CFArray **)(DerivedStorage + 72);
      v20.length = CFArrayGetCount(v12);
      v20.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v12, v20, a2);
      if (FirstIndexOfValue != -1)
      {
        v14 = FirstIndexOfValue;
        fpfs_getNext(DerivedStorage, a2);
        CFRetain(a2);
        fpfsi_ResetPlaybackItem((const __CFArray *)a2, 0);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 72), v14);
        v11[463] = 0;
        fpfs_PostRemovedFromPlayQueueNotifications(a1, a2);
      }
      *(_QWORD *)(DerivedStorage + 648) = CFSTR("ReasonRemoveFromPlayqueue");
      fpfs_FlushCurrentPlayback();
      if (!*(_QWORD *)(DerivedStorage + 80))
        fpfs_PullNextItem(a1);
    }
    else
    {
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72)) >= 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 72), 0);
        CFRetain(ValueAtIndex);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 72), 0);
        v16 = (_BYTE *)CMBaseObjectGetDerivedStorage();
        v16[463] = 0;
        v16[530] = 1;
        v16[467] = a3;
        fpfsi_ResetPlaybackItem((const __CFArray *)ValueAtIndex, 0);
        fpfs_PostRemovedFromPlayQueueNotifications(a1, ValueAtIndex);
      }
      if (*(_QWORD *)(DerivedStorage + 80))
      {
        v17 = CMBaseObjectGetDerivedStorage();
        *(_BYTE *)(v17 + 467) = a3;
        *(_BYTE *)(v17 + 530) = 1;
      }
      *(_QWORD *)(DerivedStorage + 648) = CFSTR("ReasonRemoveFromPlayqueue");
      fpfs_FlushCurrentPlayback();
    }
    if (!fpfs_HaveHDRItem())
      fpfs_ReleasePlayerHDRPlaybackBaton();
    if (!fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_isPlaying4k, 0))fpfs_ReleasePlayer4kPlaybackBaton(a1);
  }
LABEL_28:
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

uint64_t fpfs_InvalidateItem(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  result = FigPlaybackItemGetFigBaseObject(a1);
  if (result)
  {
    v2 = result;
    result = CMBaseObjectGetVTable();
    v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v3)
      return v3(v2);
  }
  return result;
}

CFIndex fpfs_removeFVTNotificationListeners(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex result;

  v2 = 0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (result = CFArrayGetCount(theArray); v2 < result; result = 0)
  {
    CFArrayGetValueAtIndex(theArray, v2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    ++v2;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return result;
}

uint64_t fpfs_clientRenderOptionChanged(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetAllocatorForMedia();
  return FigDeferNotificationToDispatchQueue();
}

uint64_t fpfs_FVTPreferredDataChannelGroupsChanged(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetAllocatorForMedia();
  return FigDeferNotificationToDispatchQueue();
}

void fpfs_externalStartupTaskCompleted(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v7;
  CFIndex FirstIndexOfValue;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BYTE v10[128];
  uint64_t v11;
  CFRange v12;

  v11 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (*(_BYTE *)(DerivedStorage + 51))
  {
    FigSignalErrorAt();
  }
  else
  {
    v7 = *(const __CFArray **)(DerivedStorage + 888);
    v12.length = CFArrayGetCount(v7);
    v12.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v12, a4);
    if (FigPlayerStartupTaskDoesAllowStartup((uint64_t)a4)
      && FirstIndexOfValue != -1
      && *(_QWORD *)(DerivedStorage + 80))
    {
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 888), FirstIndexOfValue);
      fpfs_CheckPrebufferedLevels(*(_QWORD *)(DerivedStorage + 80), 1, -1, 0, (uint64_t)v10);
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
}

uint64_t fpfs_prerollLost(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetAllocatorForMedia();
  return FigDeferNotificationToDispatchQueue();
}

BOOL fpfs_CheckItem(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;

  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 == FigPlaybackItemGetTypeID()
    && (FigPlaybackItemGetFigBaseObject(cf), (_UNKNOWN *)CMBaseObjectGetVTable() == &kFigPlaybackItemFigVTable)
    && *(_QWORD *)CMBaseObjectGetDerivedStorage() == a1)
  {
    return FigRetainProxyIsInvalidated() == 0;
  }
  else
  {
    return 0;
  }
}

void fpfs_FlushCurrentPlayback()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  uint64_t v2;
  int v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 80);
  if (v1)
  {
    v2 = DerivedStorage;
    v3 = *(_DWORD *)(DerivedStorage + 632);
    *(_DWORD *)(DerivedStorage + 632) = 0;
    fpfs_StopPlayingItemWithOSStatus(DerivedStorage, v1, 4294951599);
    *(_DWORD *)(v2 + 632) = v3;
  }
}

uint64_t fpfsi_Invalidate(const void *a1)
{
  void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = *(void **)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!FigRetainProxyIsInvalidated())
  {
    CFRetain(a1);
    fpfs_RemoveFromPlayQueueGuts(v2, a1, 0);
  }
  return 0;
}

void fpfsi_Finalize(const void *a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  fpfsi_InvalidateGuts(a1);
  v3 = (const void *)DerivedStorage[90];
  if (v3)
    CFRelease(v3);
  v4 = DerivedStorage[75];
  if (v4)
  {
    dispatch_release(v4);
    DerivedStorage[75] = 0;
  }
  FigRetainProxyRelease();
  DerivedStorage[2] = 0;
  FigSimpleMutexDestroy();
  DerivedStorage[1] = 0;
  FigSimpleMutexDestroy();
  v5 = (const void *)DerivedStorage[315];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[315] = 0;
  }
  v6 = (const void *)DerivedStorage[298];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[298] = 0;
  }
  v7 = (const void *)DerivedStorage[21];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[21] = 0;
  }
  v8 = (const void *)DerivedStorage[232];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)DerivedStorage[234];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[234] = 0;
  }
  v10 = (const void *)DerivedStorage[418];
  if (v10)
    CFRelease(v10);
  bzero(DerivedStorage, 0xD40uLL);
}

uint64_t fpfsi_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  uint64_t v11;
  void (*v12)(uint64_t, __int128 *, CFArrayRef *);
  CFStringRef Tag;
  CMTime *p_time;
  __int128 *v15;
  uint64_t v16;
  CMTime *p_lhs;
  uint64_t v18;
  const __CFAllocator *v19;
  __CFString **v20;
  int v21;
  __CFString **v22;
  uint64_t RenderingTrackofType;
  const opaqueCMFormatDescription *v24;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v26;
  const opaqueCMFormatDescription *v27;
  CMVideoDimensions Dimensions;
  const void *v29;
  __int128 v30;
  __int128 v31;
  const __CFAllocator *v32;
  CMTime *p_rhs;
  CFNumberType v34;
  uint64_t v35;
  const __CFString *v36;
  const void *v37;
  const __CFArray *v38;
  const __CFNumber *v39;
  const __CFArray *v40;
  const __CFArray *v41;
  _BOOL4 v42;
  __CFDictionary *v43;
  int ExternalProtectionMethodRequiredForPlayback;
  uint64_t v45;
  _BOOL4 v46;
  const __CFArray *v47;
  __CFArray *MutableCopy;
  const void *v49;
  const __CFArray *v50;
  CFMutableArrayRef PublicCopy;
  __CFDictionary *v52;
  const __CFArray *v53;
  const __CFAllocator *v54;
  const void *v55;
  CFArrayRef Copy;
  CFNumberType v57;
  CFStringRef *v58;
  int v59;
  CFTypeRef v60;
  const void *v61;
  uint64_t (*v62)(const void *);
  int ImageEnqueued;
  uint64_t v64;
  const void *v65;
  uint64_t v66;
  uint64_t AllocatorForMedia;
  int v68;
  uint64_t v69;
  uint64_t v70;
  CFStringRef *v71;
  uint64_t v72;
  const __CFDictionary *CurrentAudioPersistentIDFromMediaOption;
  int SpatializationConfiguration;
  uint64_t v76;
  uint64_t v77;
  const __CFDictionary *v78;
  const __CFDictionary *v79;
  uint64_t v80;
  CFStringRef *v81;
  uint64_t v82;
  const __CFString *v83;
  uint64_t v84;
  CMTime v85;
  CMTime rhs;
  CMTime v87;
  CMTime time;
  __int128 lhs;
  _OWORD lhs_16[2];
  uint64_t v91;
  CGSize v92;
  CGRect CleanAperture;

  v91 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(const void **)DerivedStorage;
  CMBaseObjectGetDerivedStorage();
  if (FigPropertyStorageCopyValue(*(_QWORD *)(DerivedStorage + 168), (uint64_t)a2, a4))
  {
    fpfs_LockMutexWithCaller((uint64_t)v9);
    if (FigRetainProxyIsInvalidated())
      goto LABEL_27;
    if (CFEqual(a2, CFSTR("SeekableTimeIntervals")))
    {
      fpfsi_copySeekableTime((uint64_t)a1, a4);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("PlayableTimeIntervals")))
    {
      fpfsi_copyPlayableTime((uint64_t)a1, (CFTypeRef *)a4);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("currentDate")))
    {
      fpfsi_CopyCurrentDate((uint64_t)a1, a4);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("currentDateAndTime")))
    {
      fpfsi_CopyCurrentDateAndTime((uint64_t)a1, a4);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("estimatedCurrentDate")))
    {
      memset(&time, 0, sizeof(time));
      fpfs_GetTime(DerivedStorage, (uint64_t)&time);
      memset(&v87, 0, sizeof(v87));
      lhs = *(_OWORD *)&time.value;
      *(_QWORD *)&lhs_16[0] = time.epoch;
      rhs = *(CMTime *)(DerivedStorage + 1176);
      CMTimeAdd(&v87, (CMTime *)&lhs, &rhs);
      v11 = *(_QWORD *)(DerivedStorage + 928);
      if (v11)
      {
        rhs = v87;
        v12 = *(void (**)(uint64_t, __int128 *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v12)
        {
          lhs = *(_OWORD *)&rhs.value;
          *(_QWORD *)&lhs_16[0] = rhs.epoch;
          v12(v11, &lhs, a4);
        }
      }
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("currentDatePeriod")))
    {
      fpfsi_CopyCurrentDatePeriod((uint64_t)a1, a4);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("Timebase")))
    {
      Tag = *(CFStringRef *)(DerivedStorage + 584);
      if (Tag)
LABEL_23:
        Tag = (CFStringRef)CFRetain(Tag);
LABEL_24:
      *a4 = (CFArrayRef)Tag;
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("Lyrics")) || CFEqual(a2, CFSTR("AvailableAlternateTrackGroups")))
      goto LABEL_14;
    if (CFEqual(a2, CFSTR("ChosenAlternateTrackIDDictionary")))
    {
      fpfsi_copyChosenAlternateTrackIDsDictionary((uint64_t)a1, a3, a4);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("EstimatedDuration")))
    {
      lhs = 0uLL;
      *(_QWORD *)&lhs_16[0] = 0;
      if (fpfsi_GetDuration((uint64_t)a1, &lhs))
        goto LABEL_14;
      *(_OWORD *)&time.value = lhs;
      time.epoch = *(_QWORD *)&lhs_16[0];
      p_time = &time;
      goto LABEL_35;
    }
    if (CFEqual(a2, CFSTR("AccurateDuration")))
      goto LABEL_14;
    if (CFEqual(a2, CFSTR("EndTime")))
    {
      if ((*(_DWORD *)(DerivedStorage + 1380) & 0x1D) == 1)
      {
        v15 = (__int128 *)(DerivedStorage + 1368);
        v16 = *(_QWORD *)(DerivedStorage + 1384);
LABEL_50:
        *(_QWORD *)&lhs_16[0] = v16;
        lhs = *v15;
        goto LABEL_51;
      }
      if ((*(_BYTE *)(DerivedStorage + 492) & 1) == 0)
      {
        memset(&time, 0, sizeof(time));
        if (fpfsi_GetDuration((uint64_t)a1, (__int128 *)&time.value) || (time.flags & 0x1D) != 1)
        {
          lhs = *(_OWORD *)&time.value;
          *(_QWORD *)&lhs_16[0] = time.epoch;
          p_time = (CMTime *)&lhs;
        }
        else
        {
          memset(lhs_16, 0, sizeof(lhs_16));
          lhs = 0u;
          fpfsi_getSeekableTimeRange((uint64_t)a1, &lhs);
          *(_OWORD *)&v87.value = lhs;
          v87.epoch = *(_QWORD *)&lhs_16[0];
          rhs = *(CMTime *)((char *)lhs_16 + 8);
          CMTimeAdd(&v85, &v87, &rhs);
          p_time = &v85;
        }
LABEL_35:
        Tag = (CFStringRef)CMTimeCopyAsDictionary(p_time, a3);
        goto LABEL_24;
      }
      lhs = *(_OWORD *)(DerivedStorage + 480);
      v18 = *(_QWORD *)(DerivedStorage + 496);
LABEL_47:
      *(_QWORD *)&lhs_16[0] = v18;
LABEL_51:
      p_lhs = (CMTime *)&lhs;
      goto LABEL_52;
    }
    if (CFEqual(a2, CFSTR("ReverseEndTime")))
    {
      memset(lhs_16, 0, sizeof(lhs_16));
      lhs = 0u;
      fpfsi_getSeekableTimeRange((uint64_t)a1, &lhs);
      *(_OWORD *)&time.value = lhs;
      time.epoch = *(_QWORD *)&lhs_16[0];
      p_lhs = &time;
LABEL_52:
      v19 = a3;
LABEL_53:
      Tag = (CFStringRef)CMTimeCopyAsDictionary(p_lhs, v19);
      goto LABEL_24;
    }
    if (CFEqual(a2, CFSTR("TimeToPauseBuffering")))
    {
      v15 = (__int128 *)(DerivedStorage + 1416);
      v16 = *(_QWORD *)(DerivedStorage + 1432);
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("TimeToPausePlayback")))
    {
      lhs = *(_OWORD *)(DerivedStorage + 1440);
      v18 = *(_QWORD *)(DerivedStorage + 1456);
      goto LABEL_47;
    }
    if (CFEqual(a2, CFSTR("BasicsReadyForInspection")))
    {
      v20 = (__CFString **)MEMORY[0x1E0C9AE50];
      v21 = *(unsigned __int8 *)(DerivedStorage + 460);
LABEL_59:
      v22 = (__CFString **)MEMORY[0x1E0C9AE40];
      goto LABEL_60;
    }
    if (CFEqual(a2, CFSTR("CleanApertureRectangle")))
    {
      RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
      if (!RenderingTrackofType)
        goto LABEL_14;
      v24 = *(const opaqueCMFormatDescription **)(RenderingTrackofType + 40);
      if (!v24)
        goto LABEL_14;
      CleanAperture = CMVideoFormatDescriptionGetCleanAperture(v24, 0);
      DictionaryRepresentation = CGRectCreateDictionaryRepresentation(CleanAperture);
      goto LABEL_71;
    }
    if (CFEqual(a2, CFSTR("EncodedDimensions")))
    {
      v26 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
      if (!v26)
        goto LABEL_14;
      v27 = *(const opaqueCMFormatDescription **)(v26 + 40);
      if (!v27)
        goto LABEL_14;
      Dimensions = CMVideoFormatDescriptionGetDimensions(v27);
      v92.width = (double)Dimensions.width;
      v92.height = (double)Dimensions.height;
      DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v92);
LABEL_71:
      *a4 = DictionaryRepresentation;
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("VideoTrackMatrix")))
    {
      v29 = *(const void **)(DerivedStorage + 3336);
      if (v29)
      {
        Tag = (CFStringRef)CFRetain(v29);
      }
      else
      {
        v30 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
        lhs = *MEMORY[0x1E0C9BAA8];
        v31 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
        lhs_16[0] = v30;
        lhs_16[1] = v31;
        Tag = (CFStringRef)FigCreate3x3MatrixArrayFromCGAffineTransform(a3, &lhs);
      }
      if (Tag)
        goto LABEL_24;
LABEL_27:
      FigSignalErrorAt();
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("TrackIDArray")) || CFEqual(a2, CFSTR("ChosenTrackIDArray")))
    {
      fpfsi_createTrackIDArray(a3, (uint64_t)a1, a4);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("HasEnabledAudio")))
    {
      v20 = (__CFString **)MEMORY[0x1E0C9AE50];
      v21 = *(unsigned __int8 *)(DerivedStorage + 769);
      goto LABEL_59;
    }
    if (CFEqual(a2, CFSTR("HasEnabledVideo")))
    {
      v20 = (__CFString **)MEMORY[0x1E0C9AE50];
      v21 = *(unsigned __int8 *)(DerivedStorage + 770);
      goto LABEL_59;
    }
    if (CFEqual(a2, CFSTR("HasDiscoveredVideo")))
    {
      v20 = (__CFString **)MEMORY[0x1E0C9AE50];
      v21 = *(unsigned __int8 *)(DerivedStorage + 771);
      goto LABEL_59;
    }
    if (CFEqual(a2, CFSTR("EQPreset")))
    {
      v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_rhs = (CMTime *)(DerivedStorage + 868);
      v34 = kCFNumberIntType;
LABEL_89:
      Tag = (CFStringRef)CFNumberCreate(v32, v34, p_rhs);
      goto LABEL_24;
    }
    if (CFEqual(a2, CFSTR("SynchronizedLayers")))
    {
      Tag = *(CFStringRef *)(DerivedStorage + 696);
      if (!Tag)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("ReadBandwidth")))
    {
      v35 = *(_QWORD *)(DerivedStorage + 928);
      if (!v35)
        goto LABEL_14;
      v36 = CFSTR("FBP_NetworkBandwidth");
      goto LABEL_96;
    }
    if (CFEqual(a2, CFSTR("AvailableFileSize")) || CFEqual(a2, CFSTR("FileSize")))
      goto LABEL_14;
    if (CFEqual(a2, CFSTR("AudioDeviceChannelMap")))
    {
      *a4 = *(CFArrayRef *)(DerivedStorage + 1800);
      v37 = *(const void **)(DerivedStorage + 1800);
      if (v37)
        CFRetain(v37);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("MovieMatrix"))
      || CFEqual(a2, CFSTR("ChapterNames"))
      || CFEqual(a2, CFSTR("ChapterImageInfoArray"))
      || CFEqual(a2, CFSTR("ChapterHREFs")))
    {
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("ApertureMode")))
    {
      if (*(_BYTE *)(DerivedStorage + 864))
      {
        v20 = kFigPlaybackItemApertureMode_CleanAperture;
        v21 = *(unsigned __int8 *)(DerivedStorage + 865);
        v22 = kFigPlaybackItemApertureMode_ProductionAperture;
LABEL_60:
        if (!v21)
          v20 = v22;
        goto LABEL_62;
      }
      v20 = kFigPlaybackItemApertureMode_EncodedPixels;
LABEL_62:
      Tag = *v20;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("QualityGear")))
    {
      if (*(_QWORD *)(DerivedStorage + 928) && *(_QWORD *)(DerivedStorage + 1696))
        fpfsi_copyPlaybackRateMonitorProperty(DerivedStorage, (uint64_t)CFSTR("AfmfpbProperty_QualityGear"), (uint64_t)a4);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("AlternateStreamInformation")))
    {
      fpfsi_copyAlternateStreamInformation(DerivedStorage, a3, a4);
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("BufferState")))
    {
      if (*(_DWORD *)(DerivedStorage + 1880))
        v20 = kFigPlaybackItemBufferState_Full;
      else
        v20 = kFigPlaybackItemBufferState_Filling;
      goto LABEL_62;
    }
    if (CFEqual(a2, CFSTR("WillKeepUpPrediction")))
    {
      if (*(_DWORD *)(DerivedStorage + 524) == 1)
        v20 = kFigPlaybackItemWillKeepUpPrediction_LikelyToKeepUp;
      else
        v20 = kFigPlaybackItemWillKeepUpPrediction_UnlikelyToKeepUp;
      goto LABEL_62;
    }
    if (CFEqual(a2, CFSTR("RestrictsAutomaticMediaSelectionToAvailableOfflineOptions")))
    {
      v20 = (__CFString **)MEMORY[0x1E0C9AE50];
      v21 = *(unsigned __int8 *)(DerivedStorage + 1828);
      goto LABEL_59;
    }
    if (CFEqual(a2, CFSTR("RequiresExternalProtection")))
    {
      v38 = (const __CFArray *)*MEMORY[0x1E0C9AE40];
      v39 = *(const __CFNumber **)(DerivedStorage + 1832);
      if (v39)
      {
        *(_QWORD *)&lhs = 0;
        CFNumberGetValue(v39, kCFNumberSInt64Type, &lhs);
        v40 = (const __CFArray *)*MEMORY[0x1E0C9AE50];
        if ((_QWORD)lhs)
          v41 = (const __CFArray *)*MEMORY[0x1E0C9AE50];
        else
          v41 = v38;
        if (v41 != v38)
          goto LABEL_143;
      }
      else
      {
        v40 = (const __CFArray *)*MEMORY[0x1E0C9AE50];
      }
      ExternalProtectionMethodRequiredForPlayback = fpfsi_GetExternalProtectionMethodRequiredForPlayback();
      if (ExternalProtectionMethodRequiredForPlayback)
        v41 = v40;
      else
        v41 = v38;
      *(_DWORD *)(DerivedStorage + 2968) = ExternalProtectionMethodRequiredForPlayback;
LABEL_143:
      *a4 = v41;
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("AccessLog")))
    {
      if (!*(_QWORD *)(DerivedStorage + 1904))
        goto LABEL_14;
      *(_QWORD *)&lhs = 0;
      fpfs_UpdateCurrentAccessLogEntryPlayTimes(DerivedStorage);
      if (*(_BYTE *)(DerivedStorage + 2120))
      {
        v42 = fpfs_CreateAccessLogEntryWithUnlock((uint64_t)a1, (CFMutableDictionaryRef *)&lhs) == 0;
        v43 = (__CFDictionary *)lhs;
      }
      else
      {
        v43 = 0;
        v42 = 1;
      }
      if (v43)
        v46 = v42;
      else
        v46 = 0;
      v47 = *(const __CFArray **)(DerivedStorage + 1904);
      if (v47)
      {
        MutableCopy = CFArrayCreateMutableCopy(a3, 0, v47);
        if (MutableCopy)
        {
          if (v46)
          {
            v49 = *(const void **)(DerivedStorage + 2576);
            if (v49)
              CFDictionarySetValue(v43, CFSTR("c-startup_perf"), v49);
            CFArrayAppendValue(MutableCopy, v43);
            *a4 = MutableCopy;
LABEL_172:
            v52 = v43;
LABEL_321:
            CFRelease(v52);
            goto LABEL_14;
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      else
      {
        MutableCopy = 0;
      }
      *a4 = MutableCopy;
      if (!v43)
        goto LABEL_14;
      goto LABEL_172;
    }
    if (CFEqual(a2, CFSTR("ErrorLog")))
    {
      v45 = *(_QWORD *)(DerivedStorage + 928);
      if (v45)
      {
        if (*(_QWORD *)(DerivedStorage + 1912))
        {
          CFRelease(*(CFTypeRef *)(DerivedStorage + 1912));
          *(_QWORD *)(DerivedStorage + 1912) = 0;
          v45 = *(_QWORD *)(DerivedStorage + 928);
        }
        FigBytePumpCopyProperty(v45, 0x1E2FD7518, (uint64_t)a3, DerivedStorage + 1912);
      }
      v50 = *(const __CFArray **)(DerivedStorage + 1912);
      if (v50)
      {
        PublicCopy = FigErrorLogCreatePublicCopy(a3, v50);
        *a4 = PublicCopy;
        if (!PublicCopy)
          goto LABEL_27;
      }
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("CanPlayFastForward"))
      || CFEqual(a2, CFSTR("CanPlayFastReverse"))
      || CFEqual(a2, CFSTR("CanPlayReverse")))
    {
      if (!*(_QWORD *)(DerivedStorage + 928))
        goto LABEL_14;
      if (*(_QWORD *)(DerivedStorage + 40) && *(_BYTE *)(DerivedStorage + 1729) == 1)
        goto LABEL_358;
LABEL_359:
      v20 = (__CFString **)MEMORY[0x1E0C9AE40];
      goto LABEL_62;
    }
    if (CFEqual(a2, CFSTR("SupportsFrameStepping")))
      goto LABEL_359;
    if (CFEqual(a2, CFSTR("MediaSelectionArray")))
    {
      Tag = *(CFStringRef *)(DerivedStorage + 1688);
      if (!Tag)
        goto LABEL_14;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("SelectedMediaArray")))
    {
      v53 = *(const __CFArray **)(DerivedStorage + 1784);
      if (!v53)
        goto LABEL_14;
      goto LABEL_198;
    }
    if (CFEqual(a2, CFSTR("PreferredMaximumBufferDuration")))
    {
      v54 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v55 = (const void *)(DerivedStorage + 2232);
LABEL_265:
      v57 = kCFNumberSInt32Type;
LABEL_266:
      Tag = (CFStringRef)CFNumberCreate(v54, v57, v55);
      if (!Tag)
        goto LABEL_14;
      goto LABEL_24;
    }
    if (CFEqual(a2, CFSTR("MaximumTrailingBufferDuration")))
    {
      v54 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v55 = (const void *)(DerivedStorage + 2280);
      goto LABEL_265;
    }
    if (CFEqual(a2, CFSTR("TextMarkupArray")))
    {
      Tag = *(CFStringRef *)(DerivedStorage + 1808);
      if (!Tag)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("TextHighlightArray")))
    {
      Tag = *(CFStringRef *)(DerivedStorage + 1816);
      if (!Tag)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("LegibleOutputs")))
    {
      Tag = *(CFStringRef *)(DerivedStorage + 1864);
      if (!Tag)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("MetadataOutputs")))
    {
      Tag = (CFStringRef)FigXMLNodeGetTag(*(_QWORD *)(DerivedStorage + 1872));
      if (!Tag)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("VisualContextArray")))
    {
      v53 = *(const __CFArray **)(DerivedStorage + 856);
      if (v53)
      {
LABEL_198:
        Copy = CFArrayCreateCopy(a3, v53);
        *a4 = Copy;
        if (Copy)
          goto LABEL_14;
        goto LABEL_27;
      }
LABEL_370:
      *a4 = 0;
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("Volume")))
    {
      v54 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v55 = (const void *)(DerivedStorage + 1824);
      v57 = kCFNumberFloat32Type;
      goto LABEL_266;
    }
    if (CFEqual(a2, CFSTR("DisplayNonForcedSubtitles")))
    {
      v58 = (CFStringRef *)MEMORY[0x1E0C9AE50];
      v59 = *(unsigned __int8 *)(DerivedStorage + 531);
    }
    else if (CFEqual(a2, CFSTR("allowProgressiveSwitchUp")))
    {
      v58 = (CFStringRef *)MEMORY[0x1E0C9AE50];
      v59 = *(unsigned __int8 *)(DerivedStorage + 554);
    }
    else if (CFEqual(a2, CFSTR("allowProgressiveStartup")))
    {
      v58 = (CFStringRef *)MEMORY[0x1E0C9AE50];
      v59 = *(unsigned __int8 *)(DerivedStorage + 555);
    }
    else
    {
      if (!CFEqual(a2, CFSTR("allowProgressiveResume")))
      {
        if (CFEqual(a2, CFSTR("AutomaticallyLoadedAssetProperties")))
        {
          Tag = *(CFStringRef *)(DerivedStorage + 144);
          if (!Tag)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (CFEqual(a2, CFSTR("AutomaticallyLoadedAssetTrackProperties")))
        {
          Tag = *(CFStringRef *)(DerivedStorage + 152);
          if (!Tag)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (CFEqual(a2, CFSTR("MediaKind")))
        {
          Tag = *(CFStringRef *)(DerivedStorage + 2360);
          if (!Tag)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (CFEqual(a2, CFSTR("TimePitchAlgorithm")))
        {
          Tag = *(CFStringRef *)(DerivedStorage + 872);
          if (!Tag)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (CFEqual(a2, CFSTR("CanPlayUpTo2xForward")))
          goto LABEL_358;
        if (CFEqual(a2, CFSTR("BandwidthCap")))
        {
          v54 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v55 = (const void *)(DerivedStorage + 2380);
          goto LABEL_265;
        }
        if (CFEqual(a2, CFSTR("BandwidthCapForExpensiveNetwork")))
        {
          Tag = *(CFStringRef *)(DerivedStorage + 2384);
          if (!Tag)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (CFEqual(a2, CFSTR("TimeOffsetFromLive")))
        {
          v35 = *(_QWORD *)(DerivedStorage + 928);
          if (!v35)
          {
            v15 = (__int128 *)(DerivedStorage + 632);
            v16 = *(_QWORD *)(DerivedStorage + 648);
            goto LABEL_50;
          }
          v36 = CFSTR("FBP_PrebufferReservation");
LABEL_96:
          FigBytePumpCopyProperty(v35, (uint64_t)v36, (uint64_t)a3, (uint64_t)a4);
          goto LABEL_14;
        }
        if (CFEqual(a2, CFSTR("RecommendedTimeOffsetFromLive")))
        {
          fpfsi_CopyPumpSecondsPropertyAsTime(DerivedStorage, 0x1E2FD77D8, a3, a4);
          goto LABEL_14;
        }
        if (CFEqual(a2, CFSTR("AutomaticallyPreservesTimeOffsetFromLive")))
        {
          v20 = (__CFString **)MEMORY[0x1E0C9AE50];
          v21 = *(unsigned __int8 *)(DerivedStorage + 465);
          goto LABEL_59;
        }
        if (CFEqual(a2, CFSTR("HasEnqueuedFirstVideoFrame")))
        {
          v60 = fpfsi_copyCurrentVideoDestination((uint64_t)a1);
          if (v60)
          {
            v61 = v60;
            v62 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
            if (v62)
              ImageEnqueued = v62(v61);
            else
              ImageEnqueued = 0;
            CFRelease(v61);
          }
          else
          {
            v64 = *(_QWORD *)(DerivedStorage + 720);
            if (!v64)
              goto LABEL_359;
            ImageEnqueued = FigImageQueueTableWasFirstImageEnqueued(v64);
          }
          if (!ImageEnqueued)
            goto LABEL_359;
        }
        else
        {
          if (CFEqual(a2, CFSTR("ImageQueueGauge")))
          {
            Tag = (CFStringRef)fpfsi_copyImageQueueGauge(a1);
            goto LABEL_24;
          }
          if (CFEqual(a2, CFSTR("PriorImageQueueGauge")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 728);
            if (!Tag)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("TaggedRangeMetadataArray")))
          {
            v65 = *(const void **)(DerivedStorage + 2592);
            if (v65)
              *a4 = (CFArrayRef)CFRetain(v65);
            else
              fpfsi_UpdateTaggedRangeMetadataFromPumpAndNotifyIfNeeded(v9, a1, 0, 0);
            goto LABEL_14;
          }
          if (CFEqual(a2, CFSTR("CountOfTaggedRangeMetadataArrayListeners")))
          {
            v54 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v55 = (const void *)(DerivedStorage + 2600);
            v57 = kCFNumberCFIndexType;
            goto LABEL_266;
          }
          if (CFEqual(a2, CFSTR("MinimizeNetworkingWhilePaused")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            v21 = *(unsigned __int8 *)(DerivedStorage + 532);
            goto LABEL_59;
          }
          if (CFEqual(a2, CFSTR("VariantPreferences")))
          {
            v54 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v55 = (const void *)(DerivedStorage + 560);
            goto LABEL_265;
          }
          if (CFEqual(a2, CFSTR("AudioSampleRateCap")))
          {
            v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            p_rhs = (CMTime *)(DerivedStorage + 2512);
            v34 = kCFNumberDoubleType;
            goto LABEL_89;
          }
          if (CFEqual(a2, CFSTR("SuppressesAudioOnlyVariants")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            v21 = *(unsigned __int8 *)(DerivedStorage + 558);
            goto LABEL_59;
          }
          if (CFEqual(a2, CFSTR("LiveUpdateInterval")))
          {
            *(_QWORD *)&lhs = 0;
            v66 = *(_QWORD *)(DerivedStorage + 928);
            if (!v66)
              goto LABEL_14;
            AllocatorForMedia = FigGetAllocatorForMedia();
            v68 = FigBytePumpCopyProperty(v66, 0x1E2FD7B38, AllocatorForMedia, (uint64_t)&lhs);
            v41 = (const __CFArray *)lhs;
            if (!(_QWORD)lhs || v68)
              goto LABEL_14;
            goto LABEL_143;
          }
          if (CFEqual(a2, CFSTR("ProgressToPlayThrough")))
          {
            LODWORD(rhs.value) = 0;
            if (*(_DWORD *)(DerivedStorage + 524) == 1
              || (v69 = *(_QWORD *)(DerivedStorage + 1696)) != 0 && FigAlternateIsIFrameOnly(v69)
              || *(_QWORD *)(DerivedStorage + 2960))
            {
              LODWORD(rhs.value) = 1065353216;
            }
            else if (*(_QWORD *)(DerivedStorage + 928))
            {
              memset(&time, 0, sizeof(time));
              fpfs_GetItemBufferedDuration((const __CFArray *)a1, &time, (CMTime *)&lhs, 0);
              v87 = time;
              fpfs_IsItemReadyToStart((uint64_t)a1, &v87, (uint64_t)&lhs, (float *)&rhs, 0, 0);
            }
            v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            p_rhs = &rhs;
            v34 = kCFNumberFloat32Type;
            goto LABEL_89;
          }
          if (CFEqual(a2, CFSTR("AudioSpatializationAllowed")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            v21 = *(unsigned __int8 *)(DerivedStorage + 885);
            goto LABEL_59;
          }
          if (CFEqual(a2, CFSTR("StereoAudioSpatializationAllowed")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            v21 = *(unsigned __int8 *)(DerivedStorage + 886);
            goto LABEL_59;
          }
          if (CFEqual(a2, CFSTR("IsRenderingSpatialAudio")))
          {
            v70 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1936684398);
            v71 = (CFStringRef *)MEMORY[0x1E0C9AE40];
            if (v70)
            {
              v72 = v70;
              CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
              LODWORD(v72) = FigAlternateGetImmersiveAudioCapability(*(_QWORD *)(v72 + 440), (uint64_t)CurrentAudioPersistentIDFromMediaOption);
              SpatializationConfiguration = fpfsi_GetSpatializationConfiguration((uint64_t)a1);
              if ((_DWORD)v72 == 3 || SpatializationConfiguration == 1)
                v71 = (CFStringRef *)MEMORY[0x1E0C9AE50];
            }
            Tag = *v71;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("LoudnessInfo")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 2368);
            if (!Tag)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("AudioProcessingTap")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 3104);
            if (!Tag)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("AudioProcessingUnits")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 3112);
            if (!Tag)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("AudioCurves")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 3120);
            if (!Tag)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("PreferSDRVideo")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            v21 = *(unsigned __int8 *)(DerivedStorage + 888);
            goto LABEL_59;
          }
          if (CFEqual(a2, CFSTR("ConfigurationGroup")))
          {
            v76 = *(_QWORD *)(DerivedStorage + 928);
            if (v76)
            {
              *(_QWORD *)&lhs = 0;
              v77 = FigGetAllocatorForMedia();
              FigBytePumpCopyProperty(v76, 0x1E2FD7818, v77, (uint64_t)&lhs);
              v78 = FigRCLCopyConfigurationGroupName((CFDictionaryRef)lhs);
              if (v78)
              {
                v79 = v78;
                *a4 = (CFArrayRef)CFRetain(v78);
                CFRelease(v79);
              }
              v52 = (__CFDictionary *)lhs;
              if ((_QWORD)lhs)
                goto LABEL_321;
            }
LABEL_14:
            fpfs_UnlockAndPostNotificationsWithCaller(v9);
          }
          if (CFEqual(a2, CFSTR("StartsOnFirstEligibleVariant")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            if (*(_DWORD *)(DerivedStorage + 2860) != 1)
              v20 = (__CFString **)MEMORY[0x1E0C9AE40];
            goto LABEL_62;
          }
          if (CFEqual(a2, CFSTR("CurrentStableVariantID")))
          {
            v80 = *(_QWORD *)(DerivedStorage + 1696);
            if (!v80)
              goto LABEL_14;
            Tag = (CFStringRef)FigAlternateGetStableStreamIdentifier(v80);
            if (Tag)
              goto LABEL_23;
            goto LABEL_24;
          }
          if (CFEqual(a2, CFSTR("CoordinationIdentifier")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 3184);
            if (!Tag)
            {
              v81 = (CFStringRef *)(DerivedStorage + 3184);
              FPSupport_CreateDefaultCoordinationIdentifierForPlaybackItem((uint64_t)a1, v81);
              Tag = *v81;
              if (!*v81)
                goto LABEL_14;
            }
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("ParticipatesInCoordinatedPlayback")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            v21 = *(unsigned __int8 *)(DerivedStorage + 3192);
            goto LABEL_59;
          }
          if (CFEqual(a2, CFSTR("interstitialEvents")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 3208);
            if (!Tag)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("currentInterstitialEvent")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 3200);
            if (!Tag)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("InterstitialEventItemTimeOffset")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 3216);
            if (!Tag)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 568);
            if (!Tag)
              goto LABEL_14;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("IsCoordinatedPlaybackSupported")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            v21 = *(unsigned __int8 *)(DerivedStorage + 3224);
            goto LABEL_59;
          }
          if (CFEqual(a2, CFSTR("ReportingAgent")))
          {
            Tag = *(CFStringRef *)(DerivedStorage + 2536);
            if (!Tag)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (CFEqual(a2, CFSTR("IsReadyForPlayback")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            v21 = *(unsigned __int8 *)(DerivedStorage + 468);
            goto LABEL_59;
          }
          if (CFEqual(a2, CFSTR("AutoSwitchAtmosVariants")))
          {
            v20 = (__CFString **)MEMORY[0x1E0C9AE50];
            v21 = *(unsigned __int8 *)(DerivedStorage + 564);
            goto LABEL_59;
          }
          if (CFEqual(a2, CFSTR("MaximumTimePlayedToSinceLastSeek")))
          {
            fpfsi_updateMaxPlayThroughTime();
            v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
            lhs = *(_OWORD *)(DerivedStorage + 3240);
            *(_QWORD *)&lhs_16[0] = *(_QWORD *)(DerivedStorage + 3256);
            p_lhs = (CMTime *)&lhs;
            goto LABEL_53;
          }
          if (!CFEqual(a2, CFSTR("IsPlayingIFrameOnly")))
          {
            if (CFEqual(a2, CFSTR("PrefersConcurrentSwitching")))
            {
              v20 = (__CFString **)MEMORY[0x1E0C9AE50];
              v21 = *(unsigned __int8 *)(DerivedStorage + 553);
              goto LABEL_59;
            }
            if (CFEqual(a2, CFSTR("SpeedRampData")))
            {
              Tag = *(CFStringRef *)(DerivedStorage + 3344);
              if (!Tag)
                goto LABEL_24;
              goto LABEL_23;
            }
            if (CFEqual(a2, CFSTR("UniqueInstanceIdentifier")))
            {
              v83 = *(const __CFString **)(DerivedStorage + 3352);
              if (v83)
              {
                Tag = CFStringCreateCopy(a3, v83);
                goto LABEL_24;
              }
            }
            else
            {
              if (!CFEqual(a2, CFSTR("MetricEventTimeline")))
              {
                if (!CFEqual(a2, CFSTR("OfflineInterstitialURLs")))
                  goto LABEL_14;
                *(_QWORD *)&lhs = 0;
                v84 = *(_QWORD *)(DerivedStorage + 928);
                if (v84)
                {
                  if (FigBytePumpCopyProperty(v84, 0x1E2FD7458, (uint64_t)a3, (uint64_t)&lhs))
                    goto LABEL_14;
                  v41 = (const __CFArray *)lhs;
                }
                else
                {
                  v41 = 0;
                }
                goto LABEL_143;
              }
              Tag = *(CFStringRef *)(DerivedStorage + 3360);
              if (Tag)
                goto LABEL_23;
            }
            goto LABEL_370;
          }
          v82 = *(_QWORD *)(DerivedStorage + 1696);
          if (!v82 || !FigAlternateIsIFrameOnly(v82))
            goto LABEL_359;
        }
LABEL_358:
        v20 = (__CFString **)MEMORY[0x1E0C9AE50];
        goto LABEL_62;
      }
      v58 = (CFStringRef *)MEMORY[0x1E0C9AE50];
      v59 = *(unsigned __int8 *)(DerivedStorage + 556);
    }
    if (!v59)
      v58 = (CFStringRef *)MEMORY[0x1E0C9AE40];
    Tag = *v58;
    if (!*v58)
      goto LABEL_24;
    goto LABEL_23;
  }
  return 0;
}

uint64_t fpfsi_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)fpfsi_handleSetProperty, 0, 0, 0);
}

uint64_t fpfsi_InvalidateGuts(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t CMBaseObject;
  _QWORD *v7;
  void (*v8)(uint64_t);
  const void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  const void *v27;
  const void *v28;
  uint64_t *v29;
  uint64_t v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  const void *v79;
  const void *v80;
  const void *v81;
  uint64_t *v82;
  const void *v83;
  const void *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  const void *v88;
  uint64_t v89;
  void (*v90)(uint64_t);
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  const void *v95;
  const void *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)DerivedStorage;
  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    v5 = result;
    fpfs_LockMutexWithCaller((uint64_t)v3);
    if (!*(_BYTE *)(DerivedStorage + 24))
    {
      FigStopForwardingMediaServicesProcessDeathNotification();
      FigRetainProxyInvalidate();
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
      *(_BYTE *)(DerivedStorage + 24) = 1;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
      CFSetRemoveValue(*(CFMutableSetRef *)(v5 + 64), a1);
      fpfs_haltStream();
      if (*(_QWORD *)(DerivedStorage + 32))
      {
        FigStopForwardingMediaServicesProcessDeathNotification();
        CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 32));
        v7 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
        if (*v7 >= 2uLL)
        {
          v8 = (void (*)(uint64_t))v7[8];
          if (v8)
            v8(CMBaseObject);
        }
        v9 = *(const void **)(DerivedStorage + 32);
        if (v9)
        {
          CFRelease(v9);
          *(_QWORD *)(DerivedStorage + 32) = 0;
        }
      }
      if (FPSupport_GetDisplayModeSwitchMonitor())
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FPSupport_GetDisplayModeSwitchMonitor();
        FigNotificationCenterRemoveWeakListener();
      }
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = 0;
        v13 = v11;
        v14 = DerivedStorage + 176 + 24 * v10;
        do
        {
          v15 = *(const void **)(v14 + v12);
          if (v15)
          {
            CFRelease(v15);
            *(_QWORD *)(v14 + v12) = 0;
          }
          v12 += 8;
        }
        while (v12 != 24);
        v11 = 0;
        v10 = 1;
      }
      while ((v13 & 1) != 0);
      v16 = *(const void **)(DerivedStorage + 1800);
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(DerivedStorage + 1800) = 0;
      }
      v17 = *(_QWORD *)(DerivedStorage + 1056);
      if (v17)
      {
        do
        {
          v18 = *(_QWORD *)(v17 + 8);
          fpfs_DeleteTrack(a1, v17);
          if (!v18)
            break;
          v17 = v18;
        }
        while (*(_QWORD *)(DerivedStorage + 1056));
      }
      fpfs_FreeDeadTracks((_QWORD *)DerivedStorage);
      v19 = CMBaseObjectGetDerivedStorage();
      fpfs_ClearRenderChains((const __CFArray *)a1, 0xFFu);
      *(_QWORD *)(v19 + 772) = 0;
      fpfsi_clearOutOfBandSubtitleObjects();
      v20 = *(const void **)(DerivedStorage + 688);
      if (v20)
      {
        FigSyncMomentSourceDestroy(v20);
        *(_QWORD *)(DerivedStorage + 688) = 0;
      }
      v21 = *(const void **)(DerivedStorage + 696);
      if (v21)
      {
        CFRelease(v21);
        *(_QWORD *)(DerivedStorage + 696) = 0;
      }
      v22 = *(const void **)(DerivedStorage + 680);
      if (v22)
      {
        CFRelease(v22);
        *(_QWORD *)(DerivedStorage + 680) = 0;
      }
      if (*(_QWORD *)(DerivedStorage + 672))
      {
        FigSimpleMutexDestroy();
        *(_QWORD *)(DerivedStorage + 672) = 0;
      }
      v23 = *(const void **)(DerivedStorage + 704);
      if (v23)
      {
        CFRelease(v23);
        *(_QWORD *)(DerivedStorage + 704) = 0;
      }
      fpfs_cleanupAllImageQueues(a1, 0);
      fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 1624));
      v24 = MEMORY[0x1E0CA2E18];
      v25 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 1632) = *MEMORY[0x1E0CA2E18];
      v26 = *(_QWORD *)(v24 + 16);
      *(_QWORD *)(DerivedStorage + 1648) = v26;
      v99 = v25;
      *(_OWORD *)(DerivedStorage + 1656) = v25;
      *(_QWORD *)(DerivedStorage + 1672) = v26;
      if (*(_QWORD *)(DerivedStorage + 576))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMTimebaseNotificationBarrier(*(CMTimebaseRef *)(DerivedStorage + 576));
        v27 = *(const void **)(DerivedStorage + 576);
        if (v27)
          CFRelease(v27);
        *(_QWORD *)(DerivedStorage + 576) = 0;
      }
      v28 = *(const void **)(DerivedStorage + 584);
      if (v28)
      {
        CFRelease(v28);
        *(_QWORD *)(DerivedStorage + 584) = 0;
      }
      if (*(_QWORD *)(DerivedStorage + 3160))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      v29 = *(uint64_t **)(DerivedStorage + 1608);
      if (v29)
      {
        do
        {
          v30 = *v29;
          fpfsi_RemoveDateEntry(DerivedStorage, v29);
          v29 = (uint64_t *)v30;
        }
        while (v30);
      }
      v31 = *(const void **)(DerivedStorage + 1584);
      if (v31)
        CFRelease(v31);
      *(_QWORD *)(DerivedStorage + 1584) = 0;
      v32 = *(const void **)(DerivedStorage + 1592);
      if (v32)
        CFRelease(v32);
      *(_QWORD *)(DerivedStorage + 1592) = 0;
      v33 = *(const void **)(DerivedStorage + 856);
      if (v33)
      {
        CFRelease(v33);
        *(_QWORD *)(DerivedStorage + 856) = 0;
      }
      v34 = *(const void **)(DerivedStorage + 1696);
      if (v34)
      {
        CFRelease(v34);
        *(_QWORD *)(DerivedStorage + 1696) = 0;
      }
      v35 = *(const void **)(DerivedStorage + 1720);
      if (v35)
      {
        CFRelease(v35);
        *(_QWORD *)(DerivedStorage + 1720) = 0;
      }
      v36 = *(const void **)(DerivedStorage + 1712);
      if (v36)
      {
        CFRelease(v36);
        *(_QWORD *)(DerivedStorage + 1712) = 0;
      }
      v37 = *(const void **)(DerivedStorage + 1680);
      if (v37)
      {
        CFRelease(v37);
        *(_QWORD *)(DerivedStorage + 1680) = 0;
      }
      v38 = *(const void **)(DerivedStorage + 1688);
      if (v38)
      {
        CFRelease(v38);
        *(_QWORD *)(DerivedStorage + 1688) = 0;
      }
      v39 = *(const void **)(DerivedStorage + 1784);
      if (v39)
      {
        CFRelease(v39);
        *(_QWORD *)(DerivedStorage + 1784) = 0;
      }
      v40 = *(const void **)(DerivedStorage + 1776);
      if (v40)
      {
        CFRelease(v40);
        *(_QWORD *)(DerivedStorage + 1776) = 0;
      }
      v41 = *(const void **)(DerivedStorage + 1792);
      if (v41)
      {
        CFRelease(v41);
        *(_QWORD *)(DerivedStorage + 1792) = 0;
      }
      v42 = *(const void **)(DerivedStorage + 896);
      if (v42)
      {
        CFRelease(v42);
        *(_QWORD *)(DerivedStorage + 896) = 0;
      }
      v43 = *(const void **)(DerivedStorage + 1808);
      if (v43)
      {
        CFRelease(v43);
        *(_QWORD *)(DerivedStorage + 1808) = 0;
      }
      v44 = *(const void **)(DerivedStorage + 1816);
      if (v44)
      {
        CFRelease(v44);
        *(_QWORD *)(DerivedStorage + 1816) = 0;
      }
      v45 = *(const void **)(DerivedStorage + 1864);
      if (v45)
      {
        CFRelease(v45);
        *(_QWORD *)(DerivedStorage + 1864) = 0;
      }
      FPSupport_InvalidateMetadataStorage(*(_QWORD **)(DerivedStorage + 1872));
      v46 = *(const void **)(DerivedStorage + 1888);
      if (v46)
      {
        CFRelease(v46);
        *(_QWORD *)(DerivedStorage + 1888) = 0;
      }
      v47 = *(const void **)(DerivedStorage + 1896);
      if (v47)
      {
        CFRelease(v47);
        *(_QWORD *)(DerivedStorage + 1896) = 0;
      }
      v48 = *(const void **)(DerivedStorage + 1904);
      if (v48)
      {
        CFRelease(v48);
        *(_QWORD *)(DerivedStorage + 1904) = 0;
      }
      v49 = *(const void **)(DerivedStorage + 1912);
      if (v49)
      {
        CFRelease(v49);
        *(_QWORD *)(DerivedStorage + 1912) = 0;
      }
      v50 = *(const void **)(DerivedStorage + 504);
      if (v50)
      {
        CFRelease(v50);
        *(_QWORD *)(DerivedStorage + 504) = 0;
      }
      v51 = *(const void **)(DerivedStorage + 936);
      if (v51)
      {
        CFRelease(v51);
        *(_QWORD *)(DerivedStorage + 936) = 0;
      }
      v52 = *(const void **)(DerivedStorage + 1600);
      if (v52)
      {
        CFRelease(v52);
        *(_QWORD *)(DerivedStorage + 1600) = 0;
      }
      v53 = *(const void **)(DerivedStorage + 2224);
      if (v53)
      {
        CFRelease(v53);
        *(_QWORD *)(DerivedStorage + 2224) = 0;
      }
      v54 = *(const void **)(DerivedStorage + 848);
      if (v54)
      {
        CFRelease(v54);
        *(_QWORD *)(DerivedStorage + 848) = 0;
      }
      v55 = *(const void **)(DerivedStorage + 1832);
      if (v55)
      {
        CFRelease(v55);
        *(_QWORD *)(DerivedStorage + 1832) = 0;
      }
      v56 = *(const void **)(DerivedStorage + 2344);
      if (v56)
      {
        CFRelease(v56);
        *(_QWORD *)(DerivedStorage + 2344) = 0;
      }
      v57 = *(const void **)(DerivedStorage + 2352);
      if (v57)
      {
        CFRelease(v57);
        *(_QWORD *)(DerivedStorage + 2352) = 0;
      }
      v58 = *(const void **)(DerivedStorage + 2360);
      if (v58)
      {
        CFRelease(v58);
        *(_QWORD *)(DerivedStorage + 2360) = 0;
      }
      v59 = *(const void **)(DerivedStorage + 2368);
      if (v59)
      {
        CFRelease(v59);
        *(_QWORD *)(DerivedStorage + 2368) = 0;
      }
      v60 = *(const void **)(DerivedStorage + 3104);
      if (v60)
      {
        CFRelease(v60);
        *(_QWORD *)(DerivedStorage + 3104) = 0;
      }
      v61 = *(const void **)(DerivedStorage + 3112);
      if (v61)
      {
        CFRelease(v61);
        *(_QWORD *)(DerivedStorage + 3112) = 0;
      }
      v62 = *(const void **)(DerivedStorage + 3120);
      if (v62)
      {
        CFRelease(v62);
        *(_QWORD *)(DerivedStorage + 3120) = 0;
      }
      v63 = *(const void **)(DerivedStorage + 3128);
      if (v63)
      {
        CFRelease(v63);
        *(_QWORD *)(DerivedStorage + 3128) = 0;
      }
      v64 = *(const void **)(DerivedStorage + 872);
      if (v64)
      {
        CFRelease(v64);
        *(_QWORD *)(DerivedStorage + 872) = 0;
      }
      v65 = *(const void **)(DerivedStorage + 3136);
      if (v65)
      {
        CFRelease(v65);
        *(_QWORD *)(DerivedStorage + 3136) = 0;
      }
      v66 = *(const void **)(DerivedStorage + 3144);
      if (v66)
      {
        CFRelease(v66);
        *(_QWORD *)(DerivedStorage + 3144) = 0;
      }
      v67 = *(const void **)(DerivedStorage + 144);
      if (v67)
      {
        CFRelease(v67);
        *(_QWORD *)(DerivedStorage + 144) = 0;
      }
      v68 = *(const void **)(DerivedStorage + 152);
      if (v68)
      {
        CFRelease(v68);
        *(_QWORD *)(DerivedStorage + 152) = 0;
      }
      v69 = *(const void **)(DerivedStorage + 400);
      if (v69)
      {
        CFRelease(v69);
        *(_QWORD *)(DerivedStorage + 400) = 0;
      }
      v70 = *(const void **)(DerivedStorage + 2592);
      if (v70)
      {
        CFRelease(v70);
        *(_QWORD *)(DerivedStorage + 2592) = 0;
      }
      v71 = *(const void **)(DerivedStorage + 3064);
      if (v71)
      {
        CFRelease(v71);
        *(_QWORD *)(DerivedStorage + 3064) = 0;
      }
      v72 = *(const void **)(DerivedStorage + 2608);
      if (v72)
      {
        CFRelease(v72);
        *(_QWORD *)(DerivedStorage + 2608) = 0;
      }
      v73 = *(const void **)(DerivedStorage + 2472);
      if (v73)
      {
        CFRelease(v73);
        *(_QWORD *)(DerivedStorage + 2472) = 0;
      }
      v74 = *(const void **)(DerivedStorage + 3184);
      if (v74)
      {
        CFRelease(v74);
        *(_QWORD *)(DerivedStorage + 3184) = 0;
      }
      v75 = *(const void **)(DerivedStorage + 568);
      if (v75)
      {
        CFRelease(v75);
        *(_QWORD *)(DerivedStorage + 568) = 0;
      }
      v76 = *(const void **)(DerivedStorage + 3200);
      if (v76)
      {
        CFRelease(v76);
        *(_QWORD *)(DerivedStorage + 3200) = 0;
      }
      v77 = *(const void **)(DerivedStorage + 3208);
      if (v77)
      {
        CFRelease(v77);
        *(_QWORD *)(DerivedStorage + 3208) = 0;
      }
      v78 = *(const void **)(DerivedStorage + 3216);
      if (v78)
      {
        CFRelease(v78);
        *(_QWORD *)(DerivedStorage + 3216) = 0;
      }
      v79 = *(const void **)(DerivedStorage + 3336);
      if (v79)
      {
        CFRelease(v79);
        *(_QWORD *)(DerivedStorage + 3336) = 0;
      }
      v80 = *(const void **)(DerivedStorage + 2528);
      if (v80)
      {
        CFRelease(v80);
        *(_QWORD *)(DerivedStorage + 2528) = 0;
      }
      v81 = *(const void **)(DerivedStorage + 2576);
      if (v81)
      {
        CFRelease(v81);
        *(_QWORD *)(DerivedStorage + 2576) = 0;
      }
      *(_OWORD *)(DerivedStorage + 1320) = v99;
      *(_QWORD *)(DerivedStorage + 1336) = v26;
      *(_QWORD *)(DerivedStorage + 2192) = 0;
      *(_DWORD *)(DerivedStorage + 2216) = 0;
      while (1)
      {
        v82 = *(uint64_t **)(DerivedStorage + 2880);
        if (!v82)
          break;
        fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(DerivedStorage, v82);
      }
      v83 = *(const void **)(DerivedStorage + 2960);
      if (v83)
      {
        CFRelease(v83);
        *(_QWORD *)(DerivedStorage + 2960) = 0;
      }
      v84 = *(const void **)(DerivedStorage + 3096);
      if (v84)
      {
        CFRelease(v84);
        *(_QWORD *)(DerivedStorage + 3096) = 0;
      }
      v85 = *(const void **)(DerivedStorage + 3160);
      if (v85)
      {
        CFRelease(v85);
        *(_QWORD *)(DerivedStorage + 3160) = 0;
      }
      v86 = *(const void **)(DerivedStorage + 2248);
      if (v86)
      {
        CFRelease(v86);
        *(_QWORD *)(DerivedStorage + 2248) = 0;
      }
      v87 = *(const void **)(DerivedStorage + 2448);
      if (v87)
      {
        CFRelease(v87);
        *(_QWORD *)(DerivedStorage + 2448) = 0;
      }
      v88 = *(const void **)(DerivedStorage + 3352);
      if (v88)
      {
        CFRelease(v88);
        *(_QWORD *)(DerivedStorage + 3352) = 0;
      }
      fpfsi_RTCReportingUpdatePlayingTrackStats(DerivedStorage);
      v89 = *(_QWORD *)(DerivedStorage + 2536);
      if (v89)
      {
        v90 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v90)
          v90(v89);
        v91 = *(const void **)(DerivedStorage + 2536);
        if (v91)
          CFRelease(v91);
      }
      *(_QWORD *)(DerivedStorage + 2536) = 0;
      fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();
      v92 = *(const void **)(DerivedStorage + 2208);
      if (v92)
      {
        CFRelease(v92);
        *(_QWORD *)(DerivedStorage + 2208) = 0;
      }
      v93 = *(const void **)(DerivedStorage + 3360);
      if (v93)
      {
        CFRelease(v93);
        *(_QWORD *)(DerivedStorage + 3360) = 0;
      }
      v94 = *(const void **)(DerivedStorage + 3368);
      if (v94)
      {
        CFRelease(v94);
        *(_QWORD *)(DerivedStorage + 3368) = 0;
      }
      v95 = *(const void **)(DerivedStorage + 2840);
      if (v95)
      {
        CFRelease(v95);
        *(_QWORD *)(DerivedStorage + 2840) = 0;
      }
      v96 = *(const void **)(DerivedStorage + 3376);
      if (v96)
      {
        CFRelease(v96);
        *(_QWORD *)(DerivedStorage + 3376) = 0;
      }
    }
    if (*(_QWORD *)(DerivedStorage + 600))
    {
      v97 = fpfs_UnlockMutexCompletelyWithCaller(v3);
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 600), 0, (dispatch_function_t)fpfs_noop);
      v98 = CMBaseObjectGetDerivedStorage();
      do
        fpfs_LockMutexWithCaller((uint64_t)v3);
      while (*(_QWORD *)(v98 + 8) < v97);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v3);
  }
  return result;
}

void sub_192A33E08()
{
  uint64_t v0;
  dispatch_queue_t *v1;

  v1 = *(dispatch_queue_t **)(v0 + 168);
  if (!v1)
    JUMPOUT(0x192A33690);
  FigPropertyStorageInvalidate(v1);
}

uint64_t fpfs_DisplayModeChangeNote(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[24];
  uint64_t v4;
  const void *v5;

  v5 = 0;
  v4 = 0;
  result = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v5, (CFTypeRef *)&v4);
  if (!(_DWORD)result)
  {
    fpfs_CheckPrebufferedLevels(v4, 1, -1, 0, (uint64_t)v3);
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
  }
  return result;
}

void sub_192A33E90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  const void *v18;
  const void *v19;

  CFRelease(v18);
  CFRelease(v19);
}

uint64_t fpfsi_CopyCurrentDateAndTime(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  int v5;
  CFDateRef v6;
  char v7;
  double v8;
  const __CFAllocator *AllocatorForMedia;
  CMTime v11;
  double v12;
  char v13;
  char v14;
  int v15;
  __int16 v16;
  CFDateRef v17;
  CMTime v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v18, 0, sizeof(v18));
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v18);
  v17 = 0;
  if ((v18.flags & 0x1D) != 1)
    return 4294950069;
  v11 = v18;
  v5 = fpfsi_CopyDateForTime(a1, &v11, &v17);
  v6 = v17;
  if (v5)
  {
    v7 = 0;
    v8 = 0.0;
  }
  else
  {
    v8 = MEMORY[0x194029D14](v17);
    v7 = 1;
  }
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v11 = v18;
  v12 = v8;
  v13 = 1;
  v14 = v7;
  v15 = 0;
  v16 = 0;
  *a2 = FigDateTimeMomentCopyAsDictionary((uint64_t)&v11, AllocatorForMedia);
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t fpfsi_CopyCurrentDatePeriod(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  uint64_t DateEntryForTime;
  uint64_t *v6;
  const __CFAllocator *AllocatorForMedia;
  CFAbsoluteTime v8;
  CFDateRef v9;
  CFDateRef v10;
  uint64_t v11;
  CMTime *p_lhs;
  CMTime *p_start;
  uint64_t Duration;
  const __CFAllocator *v15;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v17;
  const __CFAllocator *v18;
  CFDictionaryRef v19;
  CFDictionaryRef v20;
  uint64_t v21;
  CMTime v23;
  CMTime lhs;
  CMTimeRange range;
  CMTime start;
  __int128 v27;
  CMTimeEpoch epoch;
  CMTimeRange v29;
  __int128 v30;
  CMTimeEpoch v31;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v30 = 0uLL;
  v31 = 0;
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v30);
  memset(&v29, 0, sizeof(v29));
  if ((BYTE12(v30) & 0x1D) != 1)
    return 4294950069;
  *(_OWORD *)&range.start.value = v30;
  range.start.epoch = v31;
  DateEntryForTime = fpfsi_getDateEntryForTime(a1, &range.start, 0);
  if (!DateEntryForTime)
    return 4294954513;
  v6 = (uint64_t *)DateEntryForTime;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v8 = MEMORY[0x194029D14](v6[2]);
  v9 = CFDateCreate(AllocatorForMedia, v8);
  if (v9)
  {
    v10 = v9;
    fpfsi_getDateEntryTimelineOrigin((uint64_t)v6, &v29.start);
    v11 = *v6;
    if (*v6)
    {
      memset(&range, 0, 24);
      fpfsi_getDateEntryTimelineOrigin(v11, &range.start);
      v27 = *(_OWORD *)&range.start.value;
      epoch = range.start.epoch;
      start = v29.start;
      p_lhs = (CMTime *)&v27;
      p_start = &start;
    }
    else
    {
      v27 = *MEMORY[0x1E0CA2E18];
      epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      Duration = fpfsi_GetDuration(a1, &v27);
      if ((_DWORD)Duration)
        goto LABEL_20;
      if ((BYTE12(v27) & 0x1D) == 1)
      {
        v29.duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
LABEL_11:
        v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v17 = Mutable;
          v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
          range = v29;
          v19 = CMTimeRangeCopyAsDictionary(&range, v18);
          if (v19)
          {
            v20 = v19;
            CFDictionarySetValue(v17, CFSTR("date"), v10);
            CFDictionarySetValue(v17, CFSTR("timeRange"), v20);
            *a2 = v17;
            CFRelease(v20);
            v21 = 0;
          }
          else
          {
            v21 = FigSignalErrorAt();
            CFRelease(v17);
          }
          goto LABEL_14;
        }
        Duration = FigSignalErrorAt();
LABEL_20:
        v21 = Duration;
LABEL_14:
        CFRelease(v10);
        return v21;
      }
      memset(&range, 0, sizeof(range));
      fpfsi_getSeekableTimeRange(a1, &range);
      memset(&start, 0, sizeof(start));
      lhs = range.start;
      v23 = range.duration;
      CMTimeAdd(&start, &lhs, &v23);
      lhs = start;
      v23 = v29.start;
      p_lhs = &lhs;
      p_start = &v23;
    }
    CMTimeSubtract(&v29.duration, p_lhs, p_start);
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

uint64_t fpfsi_copyChosenAlternateTrackIDsDictionary(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t TrackOfType;
  uint64_t v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFNumberRef v9;
  uint64_t result;
  int valuePtr;

  TrackOfType = fpfs_LastTrackOfType(a1, 1936684398, 0);
  if (!TrackOfType)
    return 4294954513;
  v6 = TrackOfType;
  Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294954510;
  v8 = Mutable;
  valuePtr = *(_QWORD *)(v6 + 16);
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v8, CFSTR("Audio"), v9);
  CFRelease(v9);
  result = 0;
  *a3 = v8;
  return result;
}

uint64_t fpfsi_createTrackIDArray(const __CFAllocator *a1, uint64_t a2, CFArrayRef *a3)
{
  uint64_t v6;
  CFIndex v7;
  uint64_t LastPlayingTracksForMediaType;
  uint64_t v9;
  _OWORD *v10;
  CFNumberRef v11;
  const __CFAllocator *AllocatorForMedia;
  CFArrayRef v13;
  uint64_t v14;
  uint64_t i;
  const void *v16;
  int valuePtr;
  _OWORD v19[2];
  uint64_t v20;
  void *values[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = 0;
  v7 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)values = 0u;
  v22 = 0u;
  do
  {
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    LastPlayingTracksForMediaType = fpfsi_findLastPlayingTracksForMediaType(a2, kCommonTypes[v6], (uint64_t)v19);
    v9 = LastPlayingTracksForMediaType;
    if (v6 == 2)
    {
      if (LastPlayingTracksForMediaType > 4)
        goto LABEL_22;
    }
    else if (LastPlayingTracksForMediaType > 1)
    {
LABEL_22:
      v14 = 4294950069;
      goto LABEL_17;
    }
    if (LastPlayingTracksForMediaType >= 1)
    {
      v10 = v19;
      do
      {
        if (*(_QWORD *)v10)
        {
          valuePtr = *(_QWORD *)(*(_QWORD *)v10 + 16);
          v11 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
          values[v7] = v11;
          if (!v11)
            goto LABEL_16;
          ++v7;
        }
        v10 = (_OWORD *)((char *)v10 + 8);
        --v9;
      }
      while (v9);
    }
    ++v6;
  }
  while (v6 != 5);
  if (v7 >= 1
    && (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v13 = CFArrayCreate(AllocatorForMedia, (const void **)values, v7, MEMORY[0x1E0C9B378]),
        (*a3 = v13) != 0))
  {
    v14 = 0;
  }
  else
  {
LABEL_16:
    v14 = FigSignalErrorAt();
  }
LABEL_17:
  for (i = 0; i != 9; ++i)
  {
    v16 = values[i];
    if (v16)
      CFRelease(v16);
  }
  return v14;
}

uint64_t fpfsi_copyPlaybackRateMonitorProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AllocatorForMedia;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a1 + 96);
  if (!v3)
    return 4294954368;
  AllocatorForMedia = FigGetAllocatorForMedia();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
    return v7(v3, a2, AllocatorForMedia, a3);
  else
    return 4294954514;
}

uint64_t fpfsi_copyAlternateStreamInformation(uint64_t a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  uint64_t v9;
  unsigned int v10;
  CFIndex v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void *ValueAtIndex;
  unsigned int PeakBitRate;
  uint64_t v17;
  const void *v18;
  int v19;
  const __CFAllocator *v21;
  void *v22;
  CFNumberRef v23;
  uint64_t v24;
  BOOL v25;
  CFDictionaryRef v26;
  CFDictionaryRef *v28;
  int v29;
  uint64_t valuePtr;
  void *values;
  CFTypeRef cf;
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  v29 = 0;
  v6 = *(const __CFArray **)(a1 + 1680);
  if (!v6)
    goto LABEL_18;
  Count = CFArrayGetCount(v6);
  if (Count < 1)
    goto LABEL_18;
  v8 = Count;
  v9 = *(_QWORD *)(a1 + 1696);
  v28 = a3;
  v10 = v9 ? FigAlternateGetPeakBitRate(v9) : 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 2;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1680), v11);
    PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex);
    if (++v11 >= v8)
      goto LABEL_15;
    v17 = v14;
    do
    {
      v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1680), v17 - 1);
      v19 = FigAlternateGetPeakBitRate((uint64_t)v18);
    }
    while (v19 != PeakBitRate && v17++ < v8);
    if (v19 != PeakBitRate)
    {
LABEL_15:
      ++v12;
      if (PeakBitRate < v10)
        ++v13;
    }
    ++v14;
  }
  while (v11 != v8);
  valuePtr = v12;
  v29 = v13;
  a3 = v28;
  if (!v12)
LABEL_18:
    valuePtr = 1;
  keys[0] = CFSTR("StreamCount");
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v22 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
  values = v22;
  keys[1] = CFSTR("CurrentStreamIndex");
  v23 = CFNumberCreate(v21, kCFNumberIntType, &v29);
  cf = v23;
  v24 = 4294954510;
  if (v22)
    v25 = v23 == 0;
  else
    v25 = 1;
  if (!v25)
  {
    v26 = CFDictionaryCreate(a2, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *a3 = v26;
    if (v26)
      v24 = 0;
    else
      v24 = 4294954510;
    v22 = values;
  }
  if (v22)
    CFRelease(v22);
  if (cf)
    CFRelease(cf);
  return v24;
}

uint64_t fpfsi_CopyPumpSecondsPropertyAsTime(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t v4;
  uint64_t AllocatorForMedia;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, CFNumberRef *);
  uint64_t result;
  CMTime v13;
  CMTime v14;
  Float64 valuePtr;
  CFNumberRef number;

  v4 = *(_QWORD *)(a1 + 928);
  if (!v4)
    return 4294954513;
  number = 0;
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBytePumpGetFigBaseObject(v4);
  v10 = v9;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v11)
    return 4294954514;
  result = v11(v10, a2, AllocatorForMedia, &number);
  if (!(_DWORD)result)
  {
    valuePtr = 0.0;
    CFNumberGetValue(number, kCFNumberDoubleType, &valuePtr);
    CMTimeMakeWithSeconds(&v14, valuePtr, 1000000);
    v13 = v14;
    *a4 = CMTimeCopyAsDictionary(&v13, a3);
    if (number)
      CFRelease(number);
    return 0;
  }
  return result;
}

void fpfsi_handleSetProperty(const __CFString *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, _BYTE *a5)
{
  uint64_t DerivedStorage;
  const void *v10;
  uint64_t v11;
  CFTypeID TypeID;
  const void *Value;
  const void *v14;
  CFTypeID v15;
  CFTypeID v16;
  uint64_t v17;
  CFTypeID v18;
  CFTypeID v19;
  CMTime *p_valuePtr;
  int v21;
  CFTypeID v22;
  const void *v23;
  void *v24;
  CFTypeID v25;
  const void *v26;
  const __CFAllocator *AllocatorForMedia;
  CFArrayRef Copy;
  CFTypeID v29;
  const void *v30;
  CFTypeID v31;
  CFTypeID v32;
  CFNumberRef v33;
  CFNumberRef v34;
  const void *v35;
  uint64_t v36;
  CFTypeID v37;
  CFTypeID v38;
  CFTypeID v39;
  uint64_t v40;
  CFTypeID v41;
  const void *v42;
  CFTypeRef v43;
  int v44;
  uint64_t v45;
  CFTypeID v46;
  const void *v47;
  CFTypeRef v48;
  int v49;
  const void *v50;
  CFTypeID v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __CFString *v57;
  uint64_t *v58;
  uint64_t v59;
  __CFString *v60;
  const void *v61;
  CFTypeID v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __CFString *v67;
  uint64_t *v68;
  CFTypeID v69;
  __int16 v70;
  CFTypeID v71;
  float v72;
  CFTypeID v73;
  const void *v74;
  uint64_t v75;
  __CFString *v76;
  CFTypeID v77;
  unsigned int v78;
  __CFString *v79;
  CFTypeID v80;
  CFTypeID v81;
  CFTypeID v82;
  const void *v83;
  CFTypeID v84;
  const void *v85;
  CFTypeID v86;
  const void *v87;
  CFTypeID v88;
  CFTypeID v89;
  const void *v90;
  CFTypeID v91;
  uint64_t v92;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CFTypeID v95;
  int v96;
  uint64_t v97;
  double v98;
  CFTypeID v99;
  double *v100;
  CFTypeID v101;
  _OWORD *v102;
  CFTypeID v103;
  const void *v104;
  CFTypeID v105;
  CFTypeID v106;
  uint64_t v107;
  CFTypeID v108;
  CFTypeID v109;
  CFTypeID v110;
  CFTypeID v111;
  CFTypeID v112;
  CFTypeID v113;
  CFTypeID v114;
  unsigned int (*v115)(const __CFDictionary *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v117;
  CFTypeID v118;
  CFTypeID v119;
  CFTypeID v120;
  CFTypeID v121;
  CFTypeID v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, const __CFString *, const __CFDictionary *);
  CFTypeID v127;
  int v128;
  CFTypeID v129;
  CFTypeID v130;
  CFTypeID v131;
  const void *v132;
  const void *v133;
  __CFString **v134;
  CFTypeID v135;
  const void *v136;
  CFTypeID v137;
  NSObject *v138;
  CFTypeID v139;
  uint64_t v140;
  uint64_t value_low;
  void (*v142)(uint64_t, __CFString *, __CFString *, uint64_t);
  __CFString *v143;
  CFTypeID v144;
  CFTypeID v145;
  CFTypeID v146;
  uint64_t v147;
  void (*v148)(uint64_t, __CFString *, __CFString *, const __CFDictionary *, _QWORD);
  CFTypeID v149;
  CFTypeID v150;
  const void *v151;
  const __CFAllocator *v152;
  const void *v153;
  const void *v154;
  CMTime v155;
  CMTime time2;
  os_log_type_t type;
  int v158;
  CMTime valuePtr;
  CMTime time1;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(const void **)DerivedStorage;
  v11 = CMBaseObjectGetDerivedStorage();
  *a5 = 1;
  fpfs_LockMutexWithCaller((uint64_t)v10);
  if (FigRetainProxyIsInvalidated())
    goto LABEL_33;
  if (CFEqual(a3, CFSTR("PlaybackItemProperties")))
  {
    if (a4)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a4))
      {
        valuePtr.value = 0;
        Value = CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_StartTime"));
        if (Value)
        {
          v14 = Value;
          if (CFDictionaryGetCount(a4) == 1)
          {
            v15 = CFGetTypeID(v14);
            if (v15 == CFNumberGetTypeID())
            {
              CFNumberGetValue((CFNumberRef)v14, kCFNumberDoubleType, &valuePtr);
              CMTimeMakeWithSeconds(&time1, *(Float64 *)&valuePtr.value, 1000);
              *(CMTime *)(DerivedStorage + 224) = time1;
            }
          }
        }
      }
    }
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("OutputQTESFilePath"))
    || CFEqual(a3, CFSTR("AvailableFileSize"))
    || CFEqual(a3, CFSTR("ChosenAlternateTrackIDDictionary")))
  {
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("EndTime")))
  {
    if (!a4 || (v16 = CFDictionaryGetTypeID(), v16 == CFGetTypeID(a4)))
    {
      v17 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 1368) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(DerivedStorage + 1384) = *(_QWORD *)(v17 + 16);
      fpfsi_EnqueueEndTimeChangedNotification(a1);
    }
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("TimeToPauseBuffering")))
  {
    if (a4)
    {
      v18 = CFDictionaryGetTypeID();
      if (v18 != CFGetTypeID(a4))
        goto LABEL_27;
      memset(&time1, 0, sizeof(time1));
      CMTimeMakeFromDictionary(&time1, a4);
    }
    else
    {
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    }
    valuePtr = time1;
    fpfsi_applyTimeToPauseBuffering((uint64_t)a1, (__int128 *)&valuePtr.value);
LABEL_27:
    fpfs_UnlockAndPostNotificationsWithCaller(v10);
  }
  if (CFEqual(a3, CFSTR("TimeToPausePlayback")))
  {
    if (a4)
    {
      v19 = CFDictionaryGetTypeID();
      if (v19 != CFGetTypeID(a4))
        goto LABEL_27;
      memset(&time1, 0, sizeof(time1));
      CMTimeMakeFromDictionary(&time1, a4);
    }
    else
    {
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    }
    valuePtr = time1;
    p_valuePtr = &valuePtr;
    goto LABEL_32;
  }
  if (CFEqual(a3, CFSTR("AssociatedPlaybackDurationWhilePaused")))
  {
    CMTimeMakeFromDictionary(&time1, a4);
    *(CMTime *)(DerivedStorage + 3312) = time1;
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("SnapTimeToPausePlayback")))
  {
    v21 = FigCFEqual();
    if (*(unsigned __int8 *)(DerivedStorage + 466) == v21)
      goto LABEL_27;
    *(_BYTE *)(DerivedStorage + 466) = v21;
    time1 = *(CMTime *)(DerivedStorage + 1440);
    p_valuePtr = &time1;
LABEL_32:
    fpfsi_applyTimeToPausePlayback(a1, (__int128 *)&p_valuePtr->value, 0, 1);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("ReverseEndTime")))
    goto LABEL_27;
  if (CFEqual(a3, CFSTR("EQPreset")))
  {
    LODWORD(time1.value) = 0;
    if (a4 && CFNumberGetValue(a4, kCFNumberIntType, &time1))
      fpfsi_setEQPreset((uint64_t)a1, time1.value);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("AudioDeviceChannelMap")))
  {
    if (a4)
    {
      v22 = CFDataGetTypeID();
      if (v22 != CFGetTypeID(a4))
        goto LABEL_27;
    }
    time1.value = (CMTimeValue)CFSTR("AudioDeviceChannelMap");
    *(_QWORD *)&time1.timescale = a4;
    v23 = *(const void **)(DerivedStorage + 1800);
    *(_QWORD *)(DerivedStorage + 1800) = a4;
    if (!a4)
      goto LABEL_49;
LABEL_48:
    CFRetain(a4);
LABEL_49:
    if (v23)
      CFRelease(v23);
    fpfsi_setPropertyOnAllAudioRenderPipelines((uint64_t)a1, &time1.value);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("QualityGear")))
  {
    fpfsi_setPlaybackRateMonitorProperty(DerivedStorage, (uint64_t)CFSTR("AfmfpbProperty_QualityGear"), (uint64_t)a4);
    *(_BYTE *)(v11 + 458) = 0;
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("SynchronizedLayers")))
  {
    v24 = (void *)MEMORY[0x19403137C]();
    if (!a4 || (v25 = CFArrayGetTypeID(), v25 == CFGetTypeID(a4)))
    {
      v26 = *(const void **)(DerivedStorage + 696);
      if (v26)
      {
        CFRelease(v26);
        *(_QWORD *)(DerivedStorage + 696) = 0;
      }
      if (a4
        && (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
            Copy = CFArrayCreateCopy(AllocatorForMedia, a4),
            (*(_QWORD *)(DerivedStorage + 696) = Copy) == 0))
      {
        FigSignalErrorAt();
      }
      else if (*(const __CFString **)(v11 + 80) == a1)
      {
        time1.value = 0;
        fpfs_ensureTransaction((uint64_t)v10, &time1.value);
        if (!fpfs_createOrUpdateLayerSync(*(_QWORD *)DerivedStorage) && *(_QWORD *)(DerivedStorage + 680))
          fpfsi_synchronizeLayerToTimebaseWithTransaction((uint64_t)a1, *(const void **)(v11 + 816));
        fpfs_commitTransaction((uint64_t)v10, time1.value);
        if (time1.value)
          CFRelease((CFTypeRef)time1.value);
      }
    }
    objc_autoreleasePoolPop(v24);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("VideoEnhancementMode")))
  {
    if (a4)
    {
      v29 = CFGetTypeID(a4);
      if (v29 == CFStringGetTypeID())
      {
        if (!FigCFEqual())
        {
          v30 = *(const void **)(DerivedStorage + 704);
          *(_QWORD *)(DerivedStorage + 704) = a4;
          CFRetain(a4);
          if (v30)
            CFRelease(v30);
          fpfsi_setVideoEnhancementModeOnImageQueues((uint64_t)a1, (uint64_t)a4);
        }
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("RestrictsAutomaticMediaSelectionToAvailableOfflineOptions")))
  {
    if (a4)
    {
      v31 = CFGetTypeID(a4);
      if (v31 == CFBooleanGetTypeID())
      {
        *(_BYTE *)(DerivedStorage + 1828) = CFBooleanGetValue(a4);
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("RequiresExternalProtection")))
  {
    if (!a4)
      goto LABEL_33;
    v32 = CFGetTypeID(a4);
    if (v32 != CFBooleanGetTypeID() || !CFBooleanGetValue(a4))
      goto LABEL_33;
    time1.value = 1;
    v33 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &time1);
    v34 = v33;
    v35 = *(const void **)(DerivedStorage + 1832);
    *(_QWORD *)(DerivedStorage + 1832) = v33;
    if (v33)
      CFRetain(v33);
    if (v35)
      CFRelease(v35);
    v36 = *(_QWORD *)(DerivedStorage + 928);
    if (v36)
      FigBytePumpSetProperty(v36, 0x1E2FD76F8, (uint64_t)v34);
    goto LABEL_96;
  }
  if (CFEqual(a3, CFSTR("estimatedCurrentDate")))
  {
    if (*(_QWORD *)(DerivedStorage + 928))
      goto LABEL_33;
    v34 = *(CFNumberRef *)(DerivedStorage + 1600);
    *(_QWORD *)(DerivedStorage + 1600) = a4;
    if (!a4)
    {
LABEL_96:
      if (v34)
        CFRelease(v34);
      goto LABEL_27;
    }
LABEL_95:
    CFRetain(a4);
    goto LABEL_96;
  }
  if (CFEqual(a3, CFSTR("currentDate")))
    fpfsi_SeekToDateWithID((const __CFArray *)a1, a4, 0);
  if (CFEqual(a3, CFSTR("SelectedMediaArray")))
  {
    if (a4)
    {
      v37 = CFGetTypeID(a4);
      if (v37 == CFArrayGetTypeID())
      {
        fpfs_SetClientMediaArray(a1, a4);
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("PreferredMaximumBufferDuration")))
  {
    if (a4)
    {
      v38 = CFGetTypeID(a4);
      if (v38 == CFNumberGetTypeID())
      {
        LODWORD(time1.value) = 0;
        CFNumberGetValue(a4, kCFNumberSInt32Type, &time1);
        if ((time1.value & 0x80000000) == 0)
        {
          *(_DWORD *)(DerivedStorage + 2236) = time1.value;
          fpfsi_UpdateHighWaterSecs(v11, (uint64_t)a1);
          goto LABEL_27;
        }
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("MaximumTrailingBufferDuration")))
  {
    if (a4)
    {
      v39 = CFGetTypeID(a4);
      if (v39 == CFNumberGetTypeID())
      {
        LODWORD(time1.value) = 0;
        CFNumberGetValue(a4, kCFNumberSInt32Type, &time1);
        *(_DWORD *)(DerivedStorage + 2280) = time1.value;
        fpfsi_UpdateCacheBehindSecs(v11, (uint64_t)a1);
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("TextMarkupArray")))
  {
    v40 = *(_QWORD *)(DerivedStorage + 808);
    if (a4)
    {
      v41 = CFGetTypeID(a4);
      if (v41 == CFArrayGetTypeID())
      {
        v42 = *(const void **)(DerivedStorage + 1808);
        if (v42)
        {
          CFRelease(v42);
          *(_QWORD *)(DerivedStorage + 1808) = 0;
        }
        v43 = CFRetain(a4);
        v44 = 0;
        *(_QWORD *)(DerivedStorage + 1808) = v43;
      }
      else
      {
        v44 = FigSignalErrorAt();
      }
    }
    else
    {
      v50 = *(const void **)(DerivedStorage + 1808);
      if (v50)
      {
        CFRelease(v50);
        v44 = 0;
        *(_QWORD *)(DerivedStorage + 1808) = 0;
      }
      else
      {
        v44 = 0;
      }
    }
    if (!v44 && v40)
    {
      v53 = *(_QWORD *)(DerivedStorage + 1040);
      if (!v53)
        goto LABEL_513;
      v54 = 0;
      do
      {
        if (*(_DWORD *)(v53 + 32) == 1935832172)
        {
          v55 = *(_QWORD *)(v53 + 96);
          if (v55 && v55 != v54)
          {
            if (*(_BYTE *)(v11 + 460))
              v57 = CFSTR("SRPP_TextMarkupArray");
            else
              v57 = CFSTR("CRPP_TextMarkupArray");
            fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(v53 + 96), (uint64_t)v57, *(_QWORD *)(DerivedStorage + 1808));
            v54 = v55;
          }
        }
        v53 = *(_QWORD *)(v53 + 8);
      }
      while (v53);
      if (v40 != v54)
      {
LABEL_513:
        if (*(_BYTE *)(v11 + 460))
          v58 = &kFigSubtitleRenderPipelineProperty_TextMarkupArray;
        else
          v58 = &kFigCaptionRenderPipelineProperty_TextMarkupArray;
        fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v40, *v58, *(_QWORD *)(DerivedStorage + 1808));
      }
    }
    v59 = *(_QWORD *)(DerivedStorage + 904);
    if (!v59)
      goto LABEL_27;
    v60 = CFSTR("TextMarkupArray");
    v61 = *(const void **)(DerivedStorage + 1808);
    goto LABEL_182;
  }
  if (CFEqual(a3, CFSTR("TextHighlightArray")))
  {
    v45 = *(_QWORD *)(DerivedStorage + 808);
    if (a4)
    {
      v46 = CFGetTypeID(a4);
      if (v46 == CFArrayGetTypeID())
      {
        v47 = *(const void **)(DerivedStorage + 1816);
        if (v47)
        {
          CFRelease(v47);
          *(_QWORD *)(DerivedStorage + 1816) = 0;
        }
        v48 = CFRetain(a4);
        v49 = 0;
        *(_QWORD *)(DerivedStorage + 1816) = v48;
      }
      else
      {
        v49 = FigSignalErrorAt();
      }
    }
    else
    {
      v52 = *(const void **)(DerivedStorage + 1816);
      if (v52)
      {
        CFRelease(v52);
        v49 = 0;
        *(_QWORD *)(DerivedStorage + 1816) = 0;
      }
      else
      {
        v49 = 0;
      }
    }
    if (!v49 && v45)
    {
      v63 = *(_QWORD *)(DerivedStorage + 1040);
      if (!v63)
        goto LABEL_514;
      v64 = 0;
      do
      {
        if (*(_DWORD *)(v63 + 32) == 1935832172)
        {
          v65 = *(_QWORD *)(v63 + 96);
          if (v65 && v65 != v64)
          {
            if (*(_BYTE *)(v11 + 460))
              v67 = CFSTR("SRPP_TextHighlightArray");
            else
              v67 = CFSTR("CRPP_TextHighlightArray");
            fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(v63 + 96), (uint64_t)v67, *(_QWORD *)(DerivedStorage + 1816));
            v64 = v65;
          }
        }
        v63 = *(_QWORD *)(v63 + 8);
      }
      while (v63);
      if (v45 != v64)
      {
LABEL_514:
        if (*(_BYTE *)(v11 + 460))
          v68 = &kFigSubtitleRenderPipelineProperty_TextHighlightArray;
        else
          v68 = &kFigCaptionRenderPipelineProperty_TextHighlightArray;
        fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v45, *v68, *(_QWORD *)(DerivedStorage + 1816));
      }
    }
    v59 = *(_QWORD *)(DerivedStorage + 904);
    if (!v59)
      goto LABEL_27;
    v60 = CFSTR("TextHighlightArray");
    v61 = *(const void **)(DerivedStorage + 1816);
LABEL_182:
    FigOutOfBandTrackControllerSetProperty(v59, v60, v61);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("LegibleOutputs")))
  {
    if (!a4 || (v51 = CFGetTypeID(a4), v51 == CFDictionaryGetTypeID()))
    {
      fpfsi_setLegibleOutputsDictionary((const __CFArray *)a1, a4);
      goto LABEL_27;
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("MetadataOutputs")))
  {
    if (!a4 || (v62 = CFGetTypeID(a4), v62 == CFDictionaryGetTypeID()))
    {
      fpfsi_setMetadataOutputsDictionary((const __CFArray *)a1, a4);
      goto LABEL_27;
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("VisualContextArray")))
  {
    fpfsi_setVisualContextArray((const __CFArray *)a1, a4);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("SuppressVideoLayers")))
  {
    fpfsi_setSuppressVideoLayers(a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("SuppressLegibleRendering")))
  {
    *(_BYTE *)(DerivedStorage + 867) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("ApertureMode")))
  {
    if (a4)
    {
      v69 = CFGetTypeID(a4);
      if (v69 == CFStringGetTypeID())
      {
        if (CFEqual(a4, CFSTR("CleanAperture")))
        {
          v70 = 257;
        }
        else
        {
          if (!CFEqual(a4, CFSTR("ProductionAperture")))
          {
            if (CFEqual(a4, CFSTR("EncodedPixels")))
            {
              *(_WORD *)(DerivedStorage + 864) = 0;
              goto LABEL_27;
            }
            goto LABEL_33;
          }
          v70 = 1;
        }
        *(_WORD *)(DerivedStorage + 864) = v70;
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("Volume")))
  {
    if (a4)
    {
      v71 = CFGetTypeID(a4);
      if (v71 == CFNumberGetTypeID())
      {
        LODWORD(time1.value) = 1065353216;
        CFNumberGetValue(a4, kCFNumberFloat32Type, &time1);
        v72 = *(float *)&time1.value;
        if (*(float *)&time1.value <= 1.0)
        {
          if (*(float *)&time1.value < 0.0)
          {
            LODWORD(time1.value) = 0;
            v72 = 0.0;
          }
        }
        else
        {
          LODWORD(time1.value) = 1065353216;
          v72 = 1.0;
        }
        if (v72 != *(float *)(DerivedStorage + 1824)
          && !fpfsi_applySoftwareVolume(v72, 0.0, (uint64_t)a1, 3))
        {
          *(_DWORD *)(DerivedStorage + 1824) = time1.value;
        }
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("DisplayNonForcedSubtitles")))
  {
    fpfsi_setNonForcedSubtitlesEnabled(a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("ClientAuditToken")))
  {
    if (!a4)
      goto LABEL_33;
    v73 = CFDataGetTypeID();
    if (v73 != CFGetTypeID(a4))
      goto LABEL_33;
    v74 = *(const void **)(DerivedStorage + 2344);
    *(_QWORD *)(DerivedStorage + 2344) = a4;
    CFRetain(a4);
    if (v74)
      CFRelease(v74);
    v75 = *(_QWORD *)(DerivedStorage + 928);
    if (!v75)
      goto LABEL_27;
    v76 = CFSTR("FBP_ClientAuditToken");
LABEL_211:
    FigBytePumpSetProperty(v75, (uint64_t)v76, (uint64_t)a4);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("ServiceIdentifier")))
  {
    if (!a4)
      goto LABEL_33;
    v77 = CFStringGetTypeID();
    if (v77 != CFGetTypeID(a4))
      goto LABEL_33;
    v34 = *(CFNumberRef *)(DerivedStorage + 2352);
    *(_QWORD *)(DerivedStorage + 2352) = a4;
    goto LABEL_95;
  }
  if (CFEqual(a3, CFSTR("allowProgressiveSwitchUp")))
  {
    v78 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
    *(_BYTE *)(DerivedStorage + 554) = v78;
    v79 = CFSTR("ProgSwitch");
LABEL_229:
    fpfsi_RTCReportingUpdateProgressive(DerivedStorage, (uint64_t)v79, v78);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("allowProgressiveStartup")))
  {
    v78 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
    *(_BYTE *)(DerivedStorage + 555) = v78;
    v79 = CFSTR("ProgStartup");
    goto LABEL_229;
  }
  if (CFEqual(a3, CFSTR("allowProgressiveResume")))
  {
    v78 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
    *(_BYTE *)(DerivedStorage + 556) = v78;
    v79 = CFSTR("ProgResume");
    goto LABEL_229;
  }
  if (CFEqual(a3, CFSTR("AutomaticallyLoadedAssetProperties")))
  {
    if (!a4)
    {
      v34 = *(CFNumberRef *)(DerivedStorage + 144);
      *(_QWORD *)(DerivedStorage + 144) = 0;
      goto LABEL_96;
    }
    v80 = CFArrayGetTypeID();
    if (v80 != CFGetTypeID(a4))
      goto LABEL_33;
    v34 = *(CFNumberRef *)(DerivedStorage + 144);
    *(_QWORD *)(DerivedStorage + 144) = a4;
    goto LABEL_95;
  }
  if (CFEqual(a3, CFSTR("AutomaticallyLoadedAssetTrackProperties")))
  {
    if (!a4)
    {
      v34 = *(CFNumberRef *)(DerivedStorage + 152);
      *(_QWORD *)(DerivedStorage + 152) = 0;
      goto LABEL_96;
    }
    v81 = CFArrayGetTypeID();
    if (v81 != CFGetTypeID(a4))
      goto LABEL_33;
    v34 = *(CFNumberRef *)(DerivedStorage + 152);
    *(_QWORD *)(DerivedStorage + 152) = a4;
    goto LABEL_95;
  }
  if (CFEqual(a3, CFSTR("MediaKind")))
  {
    if (a4)
    {
      v82 = CFStringGetTypeID();
      if (v82 != CFGetTypeID(a4))
        goto LABEL_33;
      v83 = *(const void **)(DerivedStorage + 2360);
      *(_QWORD *)(DerivedStorage + 2360) = a4;
LABEL_243:
      CFRetain(a4);
      if (!v83)
        goto LABEL_251;
      goto LABEL_250;
    }
    v83 = *(const void **)(DerivedStorage + 2360);
    *(_QWORD *)(DerivedStorage + 2360) = 0;
    if (!v83)
    {
LABEL_251:
      fpfsi_applyLoudnessInfo(DerivedStorage, 0, 1);
      goto LABEL_27;
    }
    goto LABEL_250;
  }
  if (CFEqual(a3, CFSTR("TimePitchAlgorithm")))
  {
    if (!*(_BYTE *)(DerivedStorage + 553))
      fpfsi_setTimePitchAlgorithm((const __CFArray *)a1, a4);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("AdjustTargetLevel")))
  {
    if (a4)
    {
      v84 = CFNumberGetTypeID();
      if (v84 == CFGetTypeID(a4))
      {
        v85 = *(const void **)(DerivedStorage + 3136);
        *(_QWORD *)(DerivedStorage + 3136) = a4;
        CFRetain(a4);
        if (v85)
          CFRelease(v85);
        fpfsi_applyAdjustTargetLevel(DerivedStorage, 0);
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("AdjustCompressionProfile")))
  {
    if (a4)
    {
      v86 = CFNumberGetTypeID();
      if (v86 == CFGetTypeID(a4))
      {
        v87 = *(const void **)(DerivedStorage + 3144);
        *(_QWORD *)(DerivedStorage + 3144) = a4;
        CFRetain(a4);
        if (v87)
          CFRelease(v87);
        fpfsi_applyAdjustCompressionProfile(DerivedStorage, 0);
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("BandwidthCap")))
  {
    if (a4)
    {
      v88 = CFNumberGetTypeID();
      if (v88 == CFGetTypeID(a4))
      {
        LODWORD(time1.value) = 0;
        CFNumberGetValue(a4, kCFNumberSInt32Type, &time1);
        *(_DWORD *)(DerivedStorage + 2380) = time1.value;
        fpfsi_UpdateBandwidthCap(v11, (uint64_t)a1);
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("BandwidthCapForExpensiveNetwork")))
  {
    if (a4)
    {
      v89 = CFNumberGetTypeID();
      if (v89 != CFGetTypeID(a4))
        goto LABEL_33;
      v90 = *(const void **)(DerivedStorage + 2384);
      *(_QWORD *)(DerivedStorage + 2384) = a4;
      CFRetain(a4);
    }
    else
    {
      v90 = *(const void **)(DerivedStorage + 2384);
      *(_QWORD *)(DerivedStorage + 2384) = 0;
    }
    if (v90)
      CFRelease(v90);
    fpfsi_setPreferredBitrateForExpensiveNetworks(a1, (uint64_t)a4);
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("TimeOffsetFromLive")))
  {
    if (a4)
    {
      v91 = CFDictionaryGetTypeID();
      if (v91 == CFGetTypeID(a4))
      {
        CMTimeMakeFromDictionary(&time1, a4);
        *(CMTime *)(DerivedStorage + 632) = time1;
        v92 = *(_QWORD *)(DerivedStorage + 928);
        if (v92)
        {
          if ((*(_DWORD *)(DerivedStorage + 644) & 0x1D) == 1)
          {
            FigBytePumpSetProperty(v92, (uint64_t)CFSTR("FBP_PrebufferReservation"), (uint64_t)a4);
            fpfs_GetNextTimeToPlayIfEstablished((uint64_t)a1, (uint64_t)&time1);
            valuePtr.value = time1.value;
            flags = time1.flags;
            valuePtr.timescale = time1.timescale;
            if ((time1.flags & 0x1D) == 1)
            {
              epoch = time1.epoch;
              fpfsi_GetPumpMaxTimeAvailable(DerivedStorage, (uint64_t)&time2);
              time1.value = valuePtr.value;
              time1.timescale = valuePtr.timescale;
              time1.flags = flags;
              time1.epoch = epoch;
              if (CMTimeCompare(&time1, &time2) >= 1)
                fpfsi_SetCurrentTimeWithSeekID((uint64_t)a1, MEMORY[0x1E0CA2E30], 4, 1);
            }
          }
        }
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("AutomaticallyPreservesTimeOffsetFromLive")))
  {
    if (a4)
    {
      v95 = CFBooleanGetTypeID();
      if (v95 == CFGetTypeID(a4))
      {
        v96 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
        if (*(unsigned __int8 *)(DerivedStorage + 465) != v96)
        {
          *(_BYTE *)(DerivedStorage + 465) = v96;
          v97 = MEMORY[0x1E0CA2E18];
          *(_OWORD *)(DerivedStorage + 408) = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)(DerivedStorage + 424) = *(_QWORD *)(v97 + 16);
          fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v155);
          fpfsi_PrepareToStartWhenLikelyToKeepUp((uint64_t)a1, &v155);
        }
        goto LABEL_27;
      }
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, CFSTR("IFramePrefetchTargetDimensions")))
  {
    time1.value = 0;
    *(_QWORD *)&time1.timescale = 0;
    v98 = 0.0;
    if (a4)
    {
      v99 = CFGetTypeID(a4);
      if (v99 == CFDictionaryGetTypeID())
      {
        CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&time1);
        v98 = *(double *)&time1.timescale;
      }
    }
    v100 = (double *)(DerivedStorage + 2456);
    if (v98 != *(double *)(DerivedStorage + 2464) || *(double *)&time1.value != *v100)
    {
      *(_OWORD *)v100 = *(_OWORD *)&time1.value;
      if (*(double *)(DerivedStorage + 2464) * *(double *)(DerivedStorage + 2456) > 0.0)
      {
        *(_DWORD *)(v11 + 808) = 1;
        if (*(_QWORD *)(DerivedStorage + 40))
        {
          if (!fpfsi_UpdateResourceSpecifierOnResourceArbiter((uint64_t)a1)
            && !fpfsi_ConfigureAlternateSelectionBossForScanningRole())
          {
            FigAlternateSelectionBossApplyFilters(*(const void **)(DerivedStorage + 40));
          }
        }
      }
    }
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("ResolutionCap")))
  {
    *(_OWORD *)&time1.value = *MEMORY[0x1E0C9D820];
    if (!a4)
      goto LABEL_33;
    v101 = CFGetTypeID(a4);
    if (v101 != CFDictionaryGetTypeID()
      || !CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&time1)
      || *(double *)&time1.value < 0.0
      || *(double *)&time1.timescale < 0.0)
    {
      goto LABEL_33;
    }
    if (*(double *)(DerivedStorage + 2480) == *(double *)&time1.value
      && *(double *)(DerivedStorage + 2488) == *(double *)&time1.timescale)
    {
      goto LABEL_27;
    }
    v102 = (_OWORD *)(DerivedStorage + 2480);
  }
  else
  {
    if (CFEqual(a3, CFSTR("ResolutionCapForExpensiveNetwork")))
    {
      *(_OWORD *)&time1.value = *MEMORY[0x1E0C9D820];
      if (a4)
      {
        v103 = CFGetTypeID(a4);
        if (v103 == CFDictionaryGetTypeID()
          && CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&time1)
          && *(double *)&time1.value >= 0.0
          && *(double *)&time1.timescale >= 0.0)
        {
          v104 = *(const void **)(DerivedStorage + 2520);
          *(_QWORD *)(DerivedStorage + 2520) = a4;
          CFRetain(a4);
          if (v104)
            CFRelease(v104);
          fpfsi_setResolutionCapForExpensiveNetworks(a1, *(const __CFDictionary **)(DerivedStorage + 2520));
          goto LABEL_27;
        }
      }
      goto LABEL_33;
    }
    if (!CFEqual(a3, CFSTR("ResolutionFloor")))
    {
      if (CFEqual(a3, CFSTR("MinimizeNetworkingWhilePaused")))
      {
        *(_BYTE *)(DerivedStorage + 532) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
        v75 = *(_QWORD *)(DerivedStorage + 928);
        if (!v75)
          goto LABEL_27;
        v76 = CFSTR("FBP_MinimizeNetworkingWhilePaused");
        goto LABEL_211;
      }
      if (CFEqual(a3, CFSTR("CountOfTaggedRangeMetadataArrayListeners")))
      {
        if (a4)
        {
          v106 = CFGetTypeID(a4);
          if (v106 == CFNumberGetTypeID())
          {
            v107 = *(_QWORD *)(DerivedStorage + 2600);
            CFNumberGetValue(a4, kCFNumberCFIndexType, (void *)(DerivedStorage + 2600));
            if (v107 < *(_QWORD *)(DerivedStorage + 2600))
              fpfsi_EnqueueTaggedRangeMetadataChangedNotificationIfNeeded(*(const void **)DerivedStorage, a1);
            goto LABEL_27;
          }
        }
        goto LABEL_33;
      }
      if (CFEqual(a3, CFSTR("VariantPreferences")))
      {
        if (!a4)
          goto LABEL_33;
        v108 = CFGetTypeID(a4);
        if (v108 != CFNumberGetTypeID())
          goto LABEL_33;
        LODWORD(time1.value) = 0;
        CFNumberGetValue(a4, kCFNumberSInt32Type, &time1);
        if (LODWORD(time1.value) == *(_DWORD *)(DerivedStorage + 560))
          goto LABEL_27;
        *(_DWORD *)(DerivedStorage + 560) = time1.value;
      }
      else if (CFEqual(a3, CFSTR("AudioSampleRateCap")))
      {
        if (!a4)
          goto LABEL_33;
        v109 = CFGetTypeID(a4);
        if (v109 != CFNumberGetTypeID())
          goto LABEL_33;
        time1.value = 0;
        CFNumberGetValue(a4, kCFNumberDoubleType, &time1);
        if (*(double *)&time1.value < 0.0 || *(double *)&time1.value == *(double *)(DerivedStorage + 2512))
          goto LABEL_27;
        *(_QWORD *)(DerivedStorage + 2512) = time1.value;
      }
      else
      {
        if (CFEqual(a3, CFSTR("SuppressesAudioOnlyVariants")))
        {
          if (a4)
          {
            v110 = CFGetTypeID(a4);
            if (v110 == CFBooleanGetTypeID())
            {
              *(_BYTE *)(DerivedStorage + 558) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
              fpfsi_handleSuppressedAudioOnlyVariantsChanged(a1);
              goto LABEL_27;
            }
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("AudioSpatializationAllowed")))
        {
          if (a4)
          {
            v111 = CFGetTypeID(a4);
            if (v111 == CFBooleanGetTypeID())
            {
              fpfsi_setAudioSpatializationAllowed((const __CFArray *)a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
              goto LABEL_27;
            }
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("StereoAudioSpatializationAllowed")))
        {
          if (a4)
          {
            v112 = CFGetTypeID(a4);
            if (v112 == CFBooleanGetTypeID())
            {
              fpfsi_setStereoAudioSpatializationAllowed((const __CFArray *)a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
              goto LABEL_27;
            }
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("LoudnessInfo")))
        {
          if (a4)
          {
            v113 = CFGetTypeID(a4);
            if (v113 != CFDictionaryGetTypeID())
              goto LABEL_33;
            v83 = *(const void **)(DerivedStorage + 2368);
            *(_QWORD *)(DerivedStorage + 2368) = a4;
            goto LABEL_243;
          }
          v83 = *(const void **)(DerivedStorage + 2368);
          *(_QWORD *)(DerivedStorage + 2368) = 0;
          if (!v83)
            goto LABEL_251;
LABEL_250:
          CFRelease(v83);
          goto LABEL_251;
        }
        if (CFEqual(a3, CFSTR("AudioProcessingTap")))
        {
          if (!a4
            || (v114 = MTAudioProcessingTapGetTypeID(), v114 == CFGetTypeID(a4))
            && ((v115 = *(unsigned int (**)(const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 40)) != 0
             && v115(a4)
             || MTAudioProcessingTapIsProxyTap((uint64_t)a4)))
          {
            fpfsi_setAudioProcessingTap((const __CFArray *)a1, a4);
            goto LABEL_27;
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("ResetAudioBufferedAhead")))
        {
          if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
          {
            if (dword_1EE2A2A88)
            {
              v158 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, (const __CFArray *)a1, 1);
          }
          goto LABEL_27;
        }
        if (CFEqual(a3, CFSTR("AudioProcessingUnits")))
        {
          if (!a4 || (v117 = CFGetTypeID(a4), v117 == CFArrayGetTypeID()))
          {
            fpfsi_setAudioProcessingUnits((const __CFArray *)a1, a4);
            goto LABEL_27;
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("AudioCurves")))
        {
          if (!a4 || (v118 = CFGetTypeID(a4), v118 == CFDictionaryGetTypeID()))
          {
            time1.value = (CMTimeValue)CFSTR("SecondaryAudioCurves");
            *(_QWORD *)&time1.timescale = a4;
            v23 = *(const void **)(DerivedStorage + 3120);
            *(_QWORD *)(DerivedStorage + 3120) = a4;
            if (!a4)
              goto LABEL_49;
            goto LABEL_48;
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("AudioClockDevice")))
        {
          if (!a4 || (v119 = CFGetTypeID(a4), v119 == CFStringGetTypeID()))
          {
            time1.value = (CMTimeValue)CFSTR("AudioQueueClockDevice");
            *(_QWORD *)&time1.timescale = a4;
            v23 = *(const void **)(DerivedStorage + 3128);
            *(_QWORD *)(DerivedStorage + 3128) = a4;
            if (!a4)
              goto LABEL_49;
            goto LABEL_48;
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("VideoSlotUsage")))
        {
          if (a4)
          {
            v120 = CFGetTypeID(a4);
            if (v120 == CFArrayGetTypeID())
            {
              fpfsi_updateVideoSlotUsage((uint64_t)a1, a4);
              goto LABEL_27;
            }
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("PreferSDRVideo")))
        {
          if (a4)
          {
            v121 = CFGetTypeID(a4);
            if (v121 == CFBooleanGetTypeID())
            {
              fpfsi_setPreferSDRVideo((uint64_t)a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
              goto LABEL_27;
            }
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("StartsOnFirstEligibleVariant")))
        {
          if (a4)
          {
            v122 = CFGetTypeID(a4);
            if (v122 == CFBooleanGetTypeID())
            {
              v123 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
              v124 = CMBaseObjectGetDerivedStorage();
              if (*(_DWORD *)(v124 + 2860) != v123)
                *(_DWORD *)(v124 + 2860) = v123;
              goto LABEL_27;
            }
          }
          goto LABEL_33;
        }
        if (CFEqual(a3, CFSTR("DisableTrialSwitchUpTimer")))
        {
          v125 = *(_QWORD *)(DerivedStorage + 96);
          if (v125)
          {
            v126 = *(void (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 56);
            if (v126)
              v126(v125, CFSTR("AfmfpbProperty_DisableTrialSwitchUpTimer"), a4);
          }
          else
          {
            *(_BYTE *)(DerivedStorage + 137) = 1;
          }
          goto LABEL_27;
        }
        if (!CFEqual(a3, CFSTR("PrefersOfflinePlayableVariants")))
        {
          if (!CFEqual(a3, CFSTR("CoordinationIdentifier")))
          {
            if (CFEqual(a3, CFSTR("ParticipatesInCoordinatedPlayback")))
            {
              if (a4)
              {
                v130 = CFGetTypeID(a4);
                if (v130 == CFBooleanGetTypeID())
                {
                  *(_BYTE *)(DerivedStorage + 3192) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
                  goto LABEL_27;
                }
              }
              goto LABEL_33;
            }
            if (CFEqual(a3, CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization")))
            {
              if (a4)
              {
                v131 = CFGetTypeID(a4);
                if (v131 != CMTimebaseGetTypeID())
                  goto LABEL_33;
                v132 = *(const void **)(DerivedStorage + 568);
                *(_QWORD *)(DerivedStorage + 568) = a4;
                CFRetain(a4);
              }
              else
              {
                v132 = *(const void **)(DerivedStorage + 568);
                *(_QWORD *)(DerivedStorage + 568) = 0;
              }
              if (v132)
                CFRelease(v132);
              if (a4)
              {
                if (!dword_1EE2A2A88)
                  goto LABEL_27;
              }
              else if (!dword_1EE2A2A88)
              {
                goto LABEL_27;
              }
              v158 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v138 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              goto LABEL_27;
            }
            if (CFEqual(a3, CFSTR("currentInterstitialEvent")))
            {
              v133 = *(const void **)(DerivedStorage + 3200);
              *(_QWORD *)(DerivedStorage + 3200) = a4;
              if (a4)
                CFRetain(a4);
              if (v133)
                CFRelease(v133);
              v134 = kFigPlaybackItemNotification_CurrentInterstitialEventChanged;
            }
            else
            {
              if (!CFEqual(a3, CFSTR("interstitialEvents")))
              {
                if (!CFEqual(a3, CFSTR("InterstitialEventItemTimeOffset")))
                {
                  if (CFEqual(a3, CFSTR("timeToSwapPlayback")))
                    goto LABEL_27;
                  if (CFEqual(a3, CFSTR("AutoSwitchAtmosVariants")))
                  {
                    if (a4)
                    {
                      v137 = CFGetTypeID(a4);
                      if (v137 == CFBooleanGetTypeID())
                      {
                        fpfsi_handleAutoSwitchAtmosVariantsChanged(a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
                        goto LABEL_27;
                      }
                    }
                    goto LABEL_33;
                  }
                  if (CFEqual(a3, CFSTR("interstitialPlaybackSuccessCount")))
                  {
                    if (!a4)
                      goto LABEL_27;
                    v139 = CFGetTypeID(a4);
                    if (v139 != CFNumberGetTypeID())
                      goto LABEL_27;
                    LODWORD(time1.value) = 0;
                    CFNumberGetValue(a4, kCFNumberSInt32Type, &time1);
                    v140 = *(_QWORD *)(DerivedStorage + 2536);
                    if (!v140)
                      goto LABEL_27;
                    value_low = SLODWORD(time1.value);
                    v142 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
                    if (!v142)
                      goto LABEL_27;
                    v143 = CFSTR("InterCntS");
                  }
                  else if (CFEqual(a3, CFSTR("interstitialPlaybackFailureCount")))
                  {
                    if (!a4)
                      goto LABEL_27;
                    v144 = CFGetTypeID(a4);
                    if (v144 != CFNumberGetTypeID())
                      goto LABEL_27;
                    LODWORD(time1.value) = 0;
                    CFNumberGetValue(a4, kCFNumberSInt32Type, &time1);
                    v140 = *(_QWORD *)(DerivedStorage + 2536);
                    if (!v140)
                      goto LABEL_27;
                    value_low = SLODWORD(time1.value);
                    v142 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
                    if (!v142)
                      goto LABEL_27;
                    v143 = CFSTR("InterCntF");
                  }
                  else
                  {
                    if (!CFEqual(a3, CFSTR("interstitialPlaybackDeadTime")))
                    {
                      if (CFEqual(a3, CFSTR("RTCReportingCategory")))
                      {
                        if (a4)
                        {
                          v146 = CFGetTypeID(a4);
                          if (v146 == CFStringGetTypeID())
                          {
                            v147 = *(_QWORD *)(DerivedStorage + 2536);
                            if (v147)
                            {
                              v148 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFDictionary *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                              if (v148)
                                v148(v147, CFSTR("playerStats"), CFSTR("Category"), a4, 0);
                            }
                          }
                        }
                        goto LABEL_27;
                      }
                      if (CFEqual(a3, CFSTR("ClientReportingValues")))
                      {
                        if (a4)
                        {
                          v149 = CFGetTypeID(a4);
                          if (v149 == CFDictionaryGetTypeID())
                            FigReportingAgentSetStatsForAllKeys(*(_QWORD *)(DerivedStorage + 2536), 0x1E301B638);
                        }
                        goto LABEL_27;
                      }
                      if (CFEqual(a3, CFSTR("SaveDownloadedDataToDiskWhenDone")))
                      {
                        fpfsi_setSaveDownloadedDataToDiskWhenDone((uint64_t)a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
                        goto LABEL_27;
                      }
                      if (!CFEqual(a3, CFSTR("SpeedRampData")))
                      {
                        if (CFEqual(a3, CFSTR("PriorImageQueueGauge")))
                        {
                          v153 = *(const void **)(DerivedStorage + 728);
                          *(_QWORD *)(DerivedStorage + 728) = a4;
                          if (a4)
                            CFRetain(a4);
                          if (v153)
                            CFRelease(v153);
                          fpfsi_updatePriorImageQueueGaugeOnVideoRenderPipelines(a1);
                        }
                        goto LABEL_27;
                      }
                      if (!*(_BYTE *)(v11 + 912))
                        goto LABEL_27;
                      if (a4)
                      {
                        v150 = CFGetTypeID(a4);
                        if (v150 != CFDataGetTypeID() || !FigSpeedRampDataIsValid(a4))
                          goto LABEL_33;
                        v151 = *(const void **)(DerivedStorage + 3344);
                        if (v151)
                        {
                          CFRelease(v151);
                          *(_QWORD *)(DerivedStorage + 3344) = 0;
                        }
                        v152 = (const __CFAllocator *)FigGetAllocatorForMedia();
                        *(_QWORD *)(DerivedStorage + 3344) = CFDataCreateCopy(v152, a4);
                      }
                      else
                      {
                        v154 = *(const void **)(DerivedStorage + 3344);
                        if (v154)
                        {
                          CFRelease(v154);
                          *(_QWORD *)(DerivedStorage + 3344) = 0;
                        }
                      }
                      fpfsi_updateSpeedRampDataOnAllRenderPipelines();
                      goto LABEL_27;
                    }
                    if (!a4)
                      goto LABEL_27;
                    v145 = CFGetTypeID(a4);
                    if (v145 != CFNumberGetTypeID())
                      goto LABEL_27;
                    LODWORD(time1.value) = 0;
                    CFNumberGetValue(a4, kCFNumberSInt32Type, &time1);
                    v140 = *(_QWORD *)(DerivedStorage + 2536);
                    if (!v140)
                      goto LABEL_27;
                    value_low = SLODWORD(time1.value);
                    v142 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
                    if (!v142)
                      goto LABEL_27;
                    v143 = CFSTR("InterDeadTime");
                  }
                  v142(v140, CFSTR("playerStats"), v143, value_low);
                  goto LABEL_27;
                }
                v34 = *(CFNumberRef *)(DerivedStorage + 3216);
                *(_QWORD *)(DerivedStorage + 3216) = a4;
                if (!a4)
                  goto LABEL_96;
                goto LABEL_95;
              }
              if (a4)
              {
                v135 = CFGetTypeID(a4);
                if (v135 != CFArrayGetTypeID())
                  goto LABEL_33;
                v136 = *(const void **)(DerivedStorage + 3208);
                *(_QWORD *)(DerivedStorage + 3208) = a4;
                CFRetain(a4);
              }
              else
              {
                v136 = *(const void **)(DerivedStorage + 3208);
                *(_QWORD *)(DerivedStorage + 3208) = 0;
              }
              if (v136)
                CFRelease(v136);
              v134 = kFigPlaybackItemNotification_InterstitialEventsChanged;
            }
            fpfs_EnqueueNotification(v10, *v134, a1, 0);
          }
          if (!a4 || (v129 = CFGetTypeID(a4), v129 == CFStringGetTypeID()))
          {
            if (!FigCFEqual())
              fpfs_EnqueueNotification(v10, CFSTR("CoordinationIdentifierChanged"), a1, 0);
            goto LABEL_27;
          }
LABEL_33:
          FigSignalErrorAt();
          goto LABEL_27;
        }
        if (!a4)
          goto LABEL_33;
        v127 = CFGetTypeID(a4);
        if (v127 != CFBooleanGetTypeID())
          goto LABEL_33;
        v128 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
        if (*(unsigned __int8 *)(DerivedStorage + 3168) == v128)
          goto LABEL_27;
        *(_BYTE *)(DerivedStorage + 3168) = v128;
        fpfsi_SetupAlternateSelectionBossWithPreferPlaybackFromCache((uint64_t)a1);
      }
      fpfsi_handleVariantPreferencesChanged(a1);
      goto LABEL_27;
    }
    *(_OWORD *)&time1.value = *MEMORY[0x1E0C9D820];
    if (!a4)
      goto LABEL_33;
    v105 = CFGetTypeID(a4);
    if (v105 != CFDictionaryGetTypeID()
      || !CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&time1)
      || *(double *)&time1.value < 0.0
      || *(double *)&time1.timescale < 0.0)
    {
      goto LABEL_33;
    }
    if (*(double *)(DerivedStorage + 2496) == *(double *)&time1.value
      && *(double *)(DerivedStorage + 2504) == *(double *)&time1.timescale)
    {
      goto LABEL_27;
    }
    v102 = (_OWORD *)(DerivedStorage + 2496);
  }
  *v102 = *(_OWORD *)&time1.value;
  fpfsi_HandleResolutionCapOrDisplaySizeChange((uint64_t)a1);
  goto LABEL_27;
}

uint64_t fpfsi_applyForwardEndTime()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(result + 1040);
  if (v1)
  {
    v2 = result;
    do
    {
      result = fpfs_scheduleForwardEndTimeForTrack(v2, v1, 0);
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

uint64_t fpfsi_setEQPreset(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 868) = a2;
  return fpfs_applyEQPreset(*(_QWORD *)DerivedStorage, a1, 0);
}

uint64_t fpfsi_setPropertyOnAllAudioRenderPipelines(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  BOOL v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (DerivedStorage)
  {
    v5 = *(_QWORD *)(DerivedStorage + 792);
    if (v5)
      fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(DerivedStorage + 792), *a2, a2[1]);
  }
  else
  {
    v5 = 0;
  }
  for (i = *(_QWORD *)(v4 + 1040); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1936684398)
    {
      v7 = *(_QWORD *)(i + 96);
      if (v7)
        v8 = v7 == v5;
      else
        v8 = 1;
      if (!v8)
        fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v7, *a2, a2[1]);
    }
  }
  return 0;
}

uint64_t fpfsi_setVideoEnhancementModeOnImageQueues(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t i;
  uint64_t v5;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  for (i = *(_QWORD *)(result + 1040); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1986618469)
    {
      v5 = *(_QWORD *)(i + 96);
      if (v5)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v5 + 32));
        result = CMBaseObjectGetVTable();
        v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
        if (v7)
          result = v7(FigBaseObject, CFSTR("VideoEnhancementMode"), a2);
      }
    }
  }
  return result;
}

void fpfsi_SeekToDateWithID(const __CFArray *a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v8;
  CFTypeID v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTimeEpoch epoch;
  const void *v12;
  CFTypeRef v13;
  const void *v14;
  uint64_t v15;
  _BOOL4 v16;
  CMTimeFlags flags;
  int v18;
  uint64_t v19;
  _BOOL4 v20;
  os_log_type_t type[16];
  uint64_t v22;
  CMTime lhs;
  CMTime rhs;
  CMTime time2;
  char v26;
  CMTimeValue v27;
  uint64_t v28;
  CMTimeEpoch v29;
  int v30;
  CMTime time1;
  __int128 v32;
  uint64_t v33;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)DerivedStorage;
  CMBaseObjectGetDerivedStorage();
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v8 = MEMORY[0x1E0CA2E18];
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v26 = 0;
  v20 = a3 != 0;
  fpfs_LockMutexWithCaller((uint64_t)v7);
  if (!a2 || (v9 = CFGetTypeID(a2), v9 != CFDateGetTypeID()) || FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
    goto LABEL_33;
  }
  if (dword_1EE2A2A88)
  {
    LODWORD(lhs.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  epoch = *(_QWORD *)(v8 + 16);
  v12 = *(const void **)(DerivedStorage + 1592);
  if (v12)
  {
    v13 = CFRetain(v12);
    v14 = *(const void **)(DerivedStorage + 1592);
    v15 = DerivedStorage + 1488;
    v32 = *(_OWORD *)(DerivedStorage + 1488);
    v33 = *(_QWORD *)(DerivedStorage + 1504);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 1592) = 0;
    }
  }
  else
  {
    v13 = 0;
    v15 = DerivedStorage + 1488;
    v32 = *(_OWORD *)(DerivedStorage + 1488);
    v33 = *(_QWORD *)(DerivedStorage + 1504);
  }
  *(_OWORD *)v15 = *(_OWORD *)v8;
  *(_QWORD *)(v15 + 16) = epoch;
  if (*(_QWORD *)(DerivedStorage + 928))
  {
    v16 = fpsi_TryDateSeekWithSeekID((uint64_t)a1, (uint64_t)a2, &v30, (uint64_t)&v27, a3, (_DWORD)a3 != 0, (uint64_t)&v26);
    if (v30)
      goto LABEL_32;
  }
  else
  {
    v16 = 0;
  }
  flags = *(_DWORD *)(v8 + 12);
  if (!*(_QWORD *)(DerivedStorage + 928) || v16)
  {
    if (v16 && v26)
    {
LABEL_24:
      if ((flags & 1) != 0)
      {
        v19 = MEMORY[0x1E0CA2E68];
        *(_OWORD *)(DerivedStorage + 224) = *MEMORY[0x1E0CA2E68];
        *(_QWORD *)(DerivedStorage + 240) = *(_QWORD *)(v19 + 16);
        fpfs_GetTime(DerivedStorage, (uint64_t)&time2);
        time1.value = value;
        time1.timescale = timescale;
        time1.flags = flags;
        time1.epoch = epoch;
        if (!CMTimeCompare(&time1, &time2))
        {
          CMTimeMake(&rhs, 1, 90000);
          lhs.value = value;
          lhs.timescale = timescale;
          lhs.flags = flags;
          lhs.epoch = epoch;
          CMTimeAdd(&time1, &lhs, &rhs);
          value = time1.value;
          flags = time1.flags;
          timescale = time1.timescale;
          epoch = time1.epoch;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if ((v28 & 0x100000000) == 0)
    {
      if (FigSignalErrorAt())
      {
LABEL_32:
        *(_QWORD *)(DerivedStorage + 1592) = v13;
        *(_OWORD *)v15 = v32;
        *(_QWORD *)(v15 + 16) = v33;
LABEL_33:
        fpfs_UnlockAndPostNotificationsWithCaller(v7);
      }
LABEL_27:
      if ((flags & 1) == 0)
        fpfs_UnlockAndPostNotificationsWithCaller(v7);
      time1.value = value;
      time1.timescale = timescale;
      time1.flags = flags;
      time1.epoch = epoch;
      lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
      *(_OWORD *)type = *MEMORY[0x1E0CA2E30];
      v22 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
      fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &time1, 0, (uint64_t)&lhs, (__int128 *)type, a3, 0, v20, 0, 0, 1, 1, 0, 1);
    }
    value = v27;
    timescale = v28;
    epoch = v29;
    flags = HIDWORD(v28);
  }
  v18 = *(_DWORD *)(DerivedStorage + 2196);
  if (v18 && v18 != (_DWORD)a3)
    fpfs_SeekDidFail(v7, a1, v18, 0);
  *(_QWORD *)(DerivedStorage + 1592) = CFRetain(a2);
  *(_DWORD *)(DerivedStorage + 2196) = a3;
  *(_DWORD *)(DerivedStorage + 2216) = v20;
  goto LABEL_24;
}

uint64_t fpfs_SetClientMediaArray(const __CFString *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  Mutable = *(const __CFArray **)(DerivedStorage + 1776);
  if (!Mutable)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(DerivedStorage + 1776) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  v7 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(Mutable, a2, 1);
  if ((_DWORD)v7)
    return v7;
  v8 = fpfs_CreateAppliedMediaArray(DerivedStorage, &cf);
  v9 = cf;
  if (!(_DWORD)v8 && cf)
  {
    v8 = fpfs_ApplyMediaArray(a1, (const __CFArray *)cf);
    v9 = cf;
  }
  if (v9)
    CFRelease(v9);
  return v8;
}

uint64_t fpfsi_UpdateHighWaterSecs(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  _BYTE v24[24];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(a1 + 752);
  v6 = *(_DWORD *)(DerivedStorage + 2236);
  if (v5 >= v6)
    v7 = *(_DWORD *)(DerivedStorage + 2236);
  else
    v7 = *(_DWORD *)(a1 + 752);
  if (!v6)
  {
    v6 = 50;
    v7 = *(_DWORD *)(a1 + 752);
  }
  if (v5)
    v8 = v7;
  else
    v8 = v6;
  if (v8 <= 5)
    v9 = 5;
  else
    v9 = v8;
  *(_DWORD *)(DerivedStorage + 2232) = v9;
  if (v9 >= 0x32)
    v10 = 50;
  else
    v10 = v9;
  *(_DWORD *)(DerivedStorage + 2240) = v10;
  v11 = *(_QWORD *)(DerivedStorage + 2536);
  if (v11)
  {
    v12 = DerivedStorage;
    v13 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v13)
      v13(v11, CFSTR("playerStats"), CFSTR("HighWater"), v9, 0);
    v14 = *(_QWORD *)(v12 + 2536);
    if (v14)
    {
      v15 = *(int *)(v12 + 2240);
      v16 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v16)
        v16(v14, CFSTR("playerStats"), CFSTR("LowWater"), v15, 0);
      v17 = *(_QWORD *)(v12 + 2536);
      if (v17)
      {
        v18 = *(int *)(a1 + 752);
        v19 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v19)
          v19(v17, CFSTR("playerStats"), CFSTR("PlayerHighWater"), v18, 0);
        v20 = *(_QWORD *)(v12 + 2536);
        if (v20)
        {
          v21 = *(int *)(v12 + 2236);
          v22 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v22)
            v22(v20, CFSTR("playerStats"), CFSTR("ItemHighWater"), v21, 0);
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 80) == a2)
    fpfs_CheckPrebufferedLevels(a2, 1, -1, 0, (uint64_t)v24);
  return 0;
}

uint64_t fpfsi_UpdateCacheBehindSecs(uint64_t a1, uint64_t a2)
{
  _DWORD *DerivedStorage;
  int v5;
  int v6;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(a1 + 756);
  v6 = DerivedStorage[570];
  if (v5 < 0)
  {
    if (v6 < 0)
      v6 = DerivedStorage[569];
  }
  else if (v6 < 0)
  {
    v6 = *(_DWORD *)(a1 + 756);
  }
  else
  {
    v6 = DerivedStorage[568];
    if (v5 < v6)
      v6 = *(_DWORD *)(a1 + 756);
  }
  DerivedStorage[568] = v6;
  fpfsi_TrimCachedSamplesFromItem(a2);
  return 0;
}

void fpfsi_setLegibleOutputsDictionary(const __CFArray *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 1856))
  {
    v5 = DerivedStorage;
    if (a2 && !CFDictionaryGetCount(a2))
      a2 = 0;
    if (!FigCFEqual())
    {
      v6 = *(const void **)(v5 + 1864);
      *(_QWORD *)(v5 + 1864) = a2;
      if (a2)
        CFRetain(a2);
      if (v6)
        CFRelease(v6);
      FigLegibleOutputManagerSetLegibleOutputsDict(*(dispatch_queue_t **)(v5 + 1856), *(CFTypeRef *)(v5 + 1864));
      if (*(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 80) == a1)
        fpfs_stopResetDisturbReprepareAndResume(*(const void **)v5, a1, 0);
    }
  }
}

uint64_t fpfsi_setMetadataOutputsDictionary(const __CFArray *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Tag;
  CFIndex Count;
  CFIndex v7;
  uint64_t updated;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Tag = (const __CFDictionary *)FigXMLNodeGetTag(*(_QWORD *)(DerivedStorage + 1872));
  if (!Tag)
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  Count = CFDictionaryGetCount(Tag);
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v7 = CFDictionaryGetCount(a2);
LABEL_6:
  updated = FPSupport_UpdateMetadataOutputs(*(_QWORD **)(DerivedStorage + 1872), a2);
  if (!(_DWORD)updated && *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 80) == a1 && (Count != v7 || v7 >= 1))
    fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, a1, 0);
  return updated;
}

uint64_t fpfsi_setVisualContextArray(const __CFArray *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFIndex Count;
  const __CFArray *v7;
  const void *v8;
  uint64_t v9[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !CFArrayGetCount(a2))
    a2 = 0;
  result = FigCFEqual();
  if (!(_DWORD)result)
  {
    v9[2] = 0;
    v9[0] = FigVisualContextGetTypeID();
    if (a2)
      Count = CFArrayGetCount(a2);
    else
      Count = 0;
    v7 = *(const __CFArray **)(DerivedStorage + 856);
    if (v7)
    {
      v7 = (const __CFArray *)CFArrayGetCount(v7);
      v8 = *(const void **)(DerivedStorage + 856);
    }
    else
    {
      v8 = 0;
    }
    v9[1] = Count - (_QWORD)v7;
    *(_QWORD *)(DerivedStorage + 856) = a2;
    if (a2)
      CFRetain(a2);
    if (v8)
      CFRelease(v8);
    return fpfsi_handleVideoOutputsChanged(a1, v9);
  }
  return result;
}

void fpfsi_setSuppressVideoLayers(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t RenderingTrackofType;
  const opaqueCMFormatDescription *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFArray *v9;
  uint64_t Count;
  CMVideoDimensions Dimensions;
  CFTypeRef v12;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  __CFArray *v15;
  const __CFArray *v16;
  CFIndex v17;
  CFIndex i;
  void *v19;
  const void *v20;
  uint64_t v21;
  unsigned int (*v22)(CFTypeRef);
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 866) == a2)
    return;
  *(_BYTE *)(DerivedStorage + 866) = a2;
  if (a2)
  {
    fpfs_cleanupAllImageQueues(a1, 0);
    return;
  }
  RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
  if (!RenderingTrackofType)
    return;
  v6 = *(const opaqueCMFormatDescription **)(RenderingTrackofType + 40);
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = *(const __CFArray **)(v8 + 384);
  if (v9)
    Count = CFArrayGetCount(v9);
  else
    Count = 0;
  Dimensions = CMVideoFormatDescriptionGetDimensions(v6);
  v12 = fpfsi_copyCurrentVideoDestination((uint64_t)a1);
  if (!*(_BYTE *)(v8 + 462))
  {
    if (Count < 1)
    {
LABEL_25:
      v21 = *(_QWORD *)(v7 + 720);
      if (!v21 || !FigImageQueueTableWasFirstImageEnqueued(v21))
      {
        if (!v12)
          return;
        v22 = *(unsigned int (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
        if (!v22 || !v22(v12))
          goto LABEL_32;
      }
      fpfsi_assignCAImageQueuesToLayers((const __CFArray *)a1);
      goto LABEL_31;
    }
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, Count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v15 = Mutable;
      v16 = *(const __CFArray **)(v7 + 656);
      if (v16)
        v17 = CFArrayGetCount(v16);
      else
        v17 = 0;
      for (i = 0; i != Count; ++i)
      {
        value = 0;
        if (i >= v17
          || (value = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 656), i), CFRetain(value),
                                                                                    (v19 = value) == 0))
        {
          FPSupport_EnsureCAImageQueue((CFTypeRef *)&value, 0, Dimensions.width, Dimensions.height);
          v19 = value;
        }
        CFArrayAppendValue(v15, v19);
        CFRelease(value);
      }
      if (!v17)
        *(_BYTE *)(v7 + 3016) = 1;
      v20 = *(const void **)(v7 + 656);
      *(_QWORD *)(v7 + 656) = v15;
      CFRetain(v15);
      if (v20)
        CFRelease(v20);
      CFRelease(v15);
      goto LABEL_25;
    }
  }
LABEL_31:
  if (v12)
LABEL_32:
    CFRelease(v12);
}

uint64_t fpfsi_UpdateBandwidthCap(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  int v5;
  int v6;
  int v7;
  int v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(a1 + 748);
  v6 = *(_DWORD *)(DerivedStorage + 2380);
  if (v5 >= v6)
    v7 = *(_DWORD *)(DerivedStorage + 2380);
  else
    v7 = *(_DWORD *)(a1 + 748);
  if (!v6)
    v7 = *(_DWORD *)(a1 + 748);
  if (v5)
    v8 = v7;
  else
    v8 = *(_DWORD *)(DerivedStorage + 2380);
  return fpfsi_ConfigurePlaybackMonitorForBandwidthCap(a2, v8);
}

uint64_t fpfsi_SetCurrentTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  return fpfsi_SetCurrentTimeWithSeekID(a1, &v4, a3, 1);
}

uint64_t fpfsi_handleVariantPreferencesChanged(const void *a1)
{
  uint64_t result;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40))
    return 0;
  result = fpfsi_CreateAndAddCombinedAudioPreferenceFilter((uint64_t)a1);
  if (!(_DWORD)result)
    return fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 0);
  return result;
}

uint64_t fpfsi_handleSuppressedAudioOnlyVariantsChanged(const void *a1)
{
  uint64_t result;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40))
    return 0;
  result = fpfsi_ConfigureAlternateSelectionBossForSuppressAudioOnly();
  if (!(_DWORD)result)
    return fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 1);
  return result;
}

uint64_t fpfsi_setAudioSpatializationAllowed(const __CFArray *a1, int a2)
{
  uint64_t result;
  BOOL v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 885) != a2)
  {
    v7 = 0;
    *(_BYTE *)(result + 885) = a2;
    result = fpfsi_handleAvailableAudioFormatChange(a1, 0, &v7);
    if (v7)
      v5 = dword_1EE2A2A88 == 0;
    else
      v5 = 1;
    if (!v5)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t fpfsi_setStereoAudioSpatializationAllowed(const __CFArray *a1, int a2)
{
  uint64_t result;
  BOOL v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 887) = 1;
  if (*(unsigned __int8 *)(result + 886) != a2)
  {
    v7 = 0;
    *(_BYTE *)(result + 886) = a2;
    result = fpfsi_handleAvailableAudioFormatChange(a1, 0, &v7);
    if (v7)
      v5 = dword_1EE2A2A88 == 0;
    else
      v5 = 1;
    if (!v5)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void fpfsi_setAudioProcessingTap(const __CFArray *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  const void **v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 3104);
  if (v5 != a2)
  {
    v6 = (const void **)DerivedStorage;
    *(_QWORD *)(DerivedStorage + 3104) = a2;
    if (a2)
      CFRetain(a2);
    if (v5)
      CFRelease(v5);
    fpfs_stopResetDisturbReprepareAndResume(*v6, a1, 0);
  }
}

void fpfsi_setAudioProcessingUnits(const __CFArray *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FPSupport_AudioProcessingUnitsConfigurationsAreDifferent())
  {
    v5 = *(const void **)(DerivedStorage + 3112);
    *(_QWORD *)(DerivedStorage + 3112) = a2;
    if (a2)
      CFRetain(a2);
    if (v5)
      CFRelease(v5);
    fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, a1, 0);
  }
}

void fpfsi_updateVideoSlotUsage(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  BOOL v5;
  uint64_t v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFString *v10;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  CFTypeID v13;
  const void *Value;
  const void *v15;
  const void *v16;
  const __CFArray *v17;
  CFIndex FirstIndexOfValue;
  const __CFString *v19;
  const void *v20;
  uint64_t v21;
  CFTypeRef v22;
  const void *v23;
  void (*v24)(const void *, const void *, CFTypeRef *);
  const void *v25;
  uint64_t v26;
  uint64_t FigBaseObject;
  void (*v28)(uint64_t, const __CFString *, const void *);
  CFTypeRef cf;
  CFRange v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 664))
    v5 = a2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = DerivedStorage;
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v8 = Count;
      v9 = 0;
      v10 = CFSTR("SlotNumber");
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v9);
        if (!ValueAtIndex)
          goto LABEL_23;
        v12 = ValueAtIndex;
        v13 = CFGetTypeID(ValueAtIndex);
        if (v13 != CFDictionaryGetTypeID())
          goto LABEL_23;
        Value = CFDictionaryGetValue(v12, v10);
        v15 = CFDictionaryGetValue(v12, CFSTR("UsedForScrubbingOnly"));
        if (!Value)
          goto LABEL_23;
        v16 = v15;
        if (!v15)
          goto LABEL_23;
        v17 = *(const __CFArray **)(v6 + 664);
        v30.length = CFArrayGetCount(v17);
        v30.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v17, v30, Value);
        if (FirstIndexOfValue == -1)
          goto LABEL_23;
        v19 = v10;
        v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 656), FirstIndexOfValue);
        cf = 0;
        v21 = CMBaseObjectGetDerivedStorage();
        v22 = fpfsi_copyCurrentVideoDestination(a1);
        if (v22)
          break;
        v26 = *(_QWORD *)(v21 + 720);
        if (!v26)
          goto LABEL_16;
        v25 = FigImageQueueTableCopyFigImageQueueForVisualContext(v26, v20);
        cf = v25;
        if (v25)
        {
LABEL_20:
          FigBaseObject = FigImageQueueGetFigBaseObject(v25);
          v28 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
          if (v28)
            v28(FigBaseObject, CFSTR("ForScrubbingOnly"), v16);
          CFRelease(cf);
          v10 = v19;
        }
LABEL_23:
        if (v8 == ++v9)
          return;
      }
      v23 = v22;
      v24 = *(void (**)(const void *, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 48);
      if (v24)
        v24(v23, v20, &cf);
      CFRelease(v23);
      v10 = v19;
LABEL_16:
      v25 = cf;
      if (cf)
        goto LABEL_20;
      goto LABEL_23;
    }
  }
}

uint64_t fpfsi_setPreferSDRVideo(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 888) != a2)
  {
    *(_BYTE *)(result + 888) = a2;
    result = fpfsi_SwitchBetweenHDRAndSDR(a1, a2);
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t fpfsi_handleAutoSwitchAtmosVariantsChanged(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 564) == a2)
    return 0;
  *(_BYTE *)(DerivedStorage + 564) = a2;
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  result = fpfsi_ConfigureAlternateSelectionBossForHighestAtmosFiltering();
  if (!(_DWORD)result)
    return fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 0);
  return result;
}

uint64_t fpfsi_setSaveDownloadedDataToDiskWhenDone(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, __CFString *, uint64_t);
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 3169) == a2)
    return 0;
  *(_BYTE *)(DerivedStorage + 3169) = a2;
  result = *(_QWORD *)(DerivedStorage + 928);
  if (result)
  {
    FigBytePumpGetFigBaseObject(result);
    v6 = v5;
    v7 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v7)
    {
      if (a2)
        v8 = *MEMORY[0x1E0C9AE50];
      else
        v8 = *MEMORY[0x1E0C9AE40];
      return v7(v6, CFSTR("FBP_CacheMediaSegmentsToDisk"), v8);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t fpfsi_updateSpeedRampDataOnAllRenderPipelines()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(result + 1040);
  if (v1)
  {
    v2 = result;
    do
    {
      result = *(_QWORD *)(v1 + 96);
      if (result)
        result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, 0x1E2FE33B8, *(_QWORD *)(v2 + 3344));
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

void fpfsi_updatePriorImageQueueGaugeOnVideoRenderPipelines(const void *a1)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;
  uint64_t i;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = fpfsi_copyPreviousImageQueueGauge(a1);
  for (i = *(_QWORD *)(DerivedStorage + 1040); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1986618469)
    {
      v5 = *(_QWORD *)(i + 96);
      if (v5)
      {
        if (!*(_BYTE *)(i + 184))
          fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v5, (uint64_t)CFSTR("PriorImageQueueGauge"), (uint64_t)v3);
      }
    }
  }
  if (v3)
    CFRelease(v3);
}

uint64_t fpfsi_handleVideoOutputsChanged(const __CFArray *a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _BOOL4 CanRenderVideo;
  const __CFArray *v7;
  int Count;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  const __CFArray *v13;
  CFIndex v14;
  uint64_t v15;
  const __CFArray *v16;
  CFIndex v17;
  CFIndex v18;
  const __CFArray *v19;
  CFIndex v20;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v23;
  const __CFAllocator *v24;
  CFMutableArrayRef v25;
  __CFArray *v26;
  const void *ValueAtIndex;
  const void *v28;
  const void *ConcatenationOfTwoArrays;
  const void *v30;
  const __CFAllocator *v31;
  CFArrayRef Copy;
  const void *v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFArray *value;
  uint64_t v50;
  uint64_t updated;
  uint64_t RenderingTrackofType;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const __CFAllocator *v56;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  NSObject *v58;
  OpaqueCMTimebase *v59;
  opaqueCMSampleBuffer *Head;
  int v61;
  opaqueCMSampleBuffer *v62;
  opaqueCMSampleBuffer *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t GlobalSingleton;
  uint64_t v70;
  uint64_t matched;
  uint64_t v72;
  uint64_t i;
  uint64_t v74;
  uint64_t v75;
  const void *v76;
  CMTimeEpoch v77;
  __int128 v78;
  const __CFArray *v79;
  uint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  CFTypeRef cf;
  os_log_type_t v84;
  int v85;
  CMTime v86;
  os_log_type_t type[8];
  CMTime v88;
  CMTime time2;
  CMTime time;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v76 = *(const void **)DerivedStorage;
  v5 = CMBaseObjectGetDerivedStorage();
  CanRenderVideo = fpfs_CanRenderVideo(v5, (uint64_t)a1);
  v82 = 0;
  v7 = *(const __CFArray **)(v5 + 432);
  if (v7)
    Count = CFArrayGetCount(v7);
  else
    Count = 0;
  fpfsi_RTCReportingUpdateFVTCount(DerivedStorage, Count);
  v81 = a2;
  v9 = *a2;
  if (v9 != CAImageQueueGetTypeID())
    goto LABEL_39;
  v10 = *((unsigned __int8 *)a2 + 16);
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v13 = (const __CFArray *)v12[47];
  v14 = v13 ? CFArrayGetCount(v13) : 0;
  v15 = v12[50];
  v16 = *(const __CFArray **)(v11 + 664);
  v17 = v16 ? CFArrayGetCount(v16) : 0;
  v18 = v15 + v14;
  v19 = *(const __CFArray **)(v11 + 656);
  v20 = v19 ? CFArrayGetCount(v19) : 0;
  if (v20 <= v18 || v10 && v17 <= v12[50])
    goto LABEL_39;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v36 = FigSignalErrorAt();
    goto LABEL_38;
  }
  v23 = Mutable;
  v79 = a1;
  v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v25 = CFArrayCreateMutable(v24, 0, MEMORY[0x1E0C9B378]);
  if (!v25)
  {
    v36 = FigSignalErrorAt();
    CFRelease(v23);
    goto LABEL_38;
  }
  v26 = v25;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 656), --v20);
    CFArrayAppendValue(v23, ValueAtIndex);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v11 + 656), v20);
  }
  while (v20 > v18);
  if (v10)
  {
    while (v17 > v18)
    {
      v30 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 664), --v17);
      CFArrayAppendValue(v26, v30);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v11 + 664), v17);
    }
    v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
    Copy = CFArrayCreateCopy(v31, *(CFArrayRef *)(v11 + 664));
    FigPropertyStorageSetValue(*(_QWORD *)(v11 + 168), CFSTR("VideoSlotArray"), Copy);
    if (Copy)
      CFRelease(Copy);
    ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
    if (!ConcatenationOfTwoArrays)
    {
      v36 = FigSignalErrorAt();
      v28 = 0;
      goto LABEL_34;
    }
    v33 = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
    v28 = v33;
    if (!v33)
    {
      v36 = FigSignalErrorAt();
      goto LABEL_34;
    }
    v34 = (const void *)v12[52];
    v12[52] = v33;
    CFRetain(v33);
    if (v34)
      CFRelease(v34);
    v35 = (const void *)v12[53];
    v12[53] = ConcatenationOfTwoArrays;
    CFRetain(ConcatenationOfTwoArrays);
    if (v35)
      CFRelease(v35);
  }
  else
  {
    v28 = 0;
    ConcatenationOfTwoArrays = 0;
  }
  v36 = 0;
LABEL_34:
  CFRelease(v23);
  CFRelease(v26);
  if (ConcatenationOfTwoArrays)
    CFRelease(ConcatenationOfTwoArrays);
  a1 = v79;
  if (v28)
    CFRelease(v28);
LABEL_38:
  if ((_DWORD)v36)
    goto LABEL_117;
LABEL_39:
  if (!CanRenderVideo)
  {
    v78 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&v88.value = *MEMORY[0x1E0CA2E18];
    v77 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v88.epoch = v77;
    if (a1)
    {
      v41 = CMBaseObjectGetDerivedStorage();
      fpfs_GetTime(v41, (uint64_t)&v88);
      if (dword_1EE2A2A88)
      {
        LODWORD(v86.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_QWORD *)type = 0;
      RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
      if (RenderingTrackofType)
      {
        v53 = RenderingTrackofType;
        v54 = 0;
        while (!*(_BYTE *)(v53 + 184))
        {
          v55 = *(_QWORD *)(v53 + 96);
          fpfs_SetFeederTrack(v55, 0);
          if (v55 != v54)
          {
            if (*(_QWORD *)type)
            {
              CFRelease(*(CFTypeRef *)type);
              *(_QWORD *)type = 0;
            }
            v56 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            CMBufferQueueCreate(v56, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)type);
            if (*(_QWORD *)type)
              MEMORY[0x19402B01C](*(_QWORD *)(v55 + 40), fpfs_StealBuffer);
          }
          v58 = *(NSObject **)(v53 + 120);
          if (v58)
          {
            v59 = *(OpaqueCMTimebase **)(v41 + 576);
            time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
            CMTimebaseSetTimerDispatchSourceNextFireTime(v59, v58, &time, 1u);
            *(_OWORD *)(v53 + 156) = v78;
            *(_QWORD *)(v53 + 172) = v77;
          }
          fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(v41 + 576), (dispatch_object_t *)(v53 + 112));
          fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v53 + 264));
          if (*(_QWORD *)type)
          {
            if (*(_DWORD *)(v53 + 152) == 6)
            {
              Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)type);
              if (Head)
              {
                v61 = 0;
                v80 = v55;
                do
                {
                  memset(&v86, 0, sizeof(v86));
                  CMSampleBufferGetOutputPresentationTimeStamp(&v86, Head);
                  if ((v86.flags & 1) != 0)
                  {
                    time = v86;
                    time2 = *(CMTime *)(v53 + 216);
                    if (CMTimeCompare(&time, &time2) >= 1)
                      break;
                  }
                  v62 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)type);
                  v63 = v62;
                  if (!v61)
                  {
                    if (!fpfs_IsVideoSync(v62))
                    {
                      v61 = 0;
                      if (!v63)
                        goto LABEL_86;
LABEL_85:
                      CFRelease(v63);
                      goto LABEL_86;
                    }
                    CMSampleBufferGetOutputPresentationTimeStamp(&time, v63);
                    *(CMTime *)(v53 + 272) = time;
                    if (dword_1EE2A2A88)
                    {
                      v85 = 0;
                      v84 = OS_LOG_TYPE_DEFAULT;
                      v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
                      v61 = 1;
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      v55 = v80;
                    }
                    else
                    {
                      v61 = 1;
                    }
                  }
                  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v53 + 72), v63);
                  if (v63)
                    goto LABEL_85;
LABEL_86:
                  Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)type);
                }
                while (Head);
              }
            }
          }
          fpfs_ReleaseTrackRenderChain(v53);
          time = *(CMTime *)(v53 + 192);
          time2 = v88;
          if (CMTimeCompare(&time, &time2) < 0)
            *(CMTime *)(v53 + 192) = v88;
          fpfs_ChangeTrackState(v53, 5u);
          fpfs_CheckVideoSyncQueue(v53, 0);
          v53 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
          v54 = v55;
          if (!v53)
            goto LABEL_99;
        }
        fpfs_ReleaseTrackRenderChain(v53);
        fpfs_ChangeTrackState(v53, 2u);
      }
LABEL_99:
      if (*(_QWORD *)type)
        CFRelease(*(CFTypeRef *)type);
      fpfs_ClearRenderChains(a1, 1u);
      v65 = *(_QWORD *)(v41 + 1696);
      if (v65 && FigAlternateIsIFrameOnly(v65) || *(_QWORD *)(v41 + 2960))
        fpfs_SetRateWithFade(*(void **)v41, 0.0);
      fpfs_cleanupAllImageQueues(a1, 0);
    }
    if (!CelestialShouldLimitHDRConcurrentPlayback()
      || (v66 = CMBaseObjectGetDerivedStorage(), *(float *)(v66 + 108) == 0.0)
      || !fpfs_CanRenderVideo(v66, 0))
    {
      fpfs_ReleasePlayerHDRPlaybackBaton();
    }
    if (!CelestialShouldLimit4kConcurrentPlayback()
      || (v67 = CMBaseObjectGetDerivedStorage(), *(float *)(v67 + 108) == 0.0)
      || !fpfs_CanRenderVideo(v67, 0))
    {
      fpfs_ReleasePlayer4kPlaybackBaton(v76);
    }
    GlobalSingleton = FigPlayerResourceArbiterGetGlobalSingleton(&v82);
    if (!(_DWORD)GlobalSingleton)
      GlobalSingleton = FigPlayerResourceArbiterSetSpecifierForConsumer(v82, 0);
    v36 = GlobalSingleton;
    goto LABEL_117;
  }
  v37 = CMBaseObjectGetDerivedStorage();
  v38 = *(_QWORD *)(v37 + 1040);
  if (v38)
  {
    v39 = (uint64_t *)v37;
    while (1)
    {
      v40 = *(_DWORD *)(v38 + 32);
      if (v40 == 1986618469)
      {
        if (!FPSupport_CanVideoRenderPipelineSupportChangingFigImageQueues(*(const opaqueCMFormatDescription **)(v38 + 40)))
          break;
        v40 = *(_DWORD *)(v38 + 32);
      }
      if (v40 == 1835365473
        && fpfs_canSendMetadataTrackToVideoTargets(*v39, *(const opaqueCMFormatDescription **)(v38 + 40)))
      {
        break;
      }
      v38 = *(_QWORD *)(v38 + 8);
      if (!v38)
        goto LABEL_53;
    }
    LODWORD(v38) = 1;
  }
LABEL_53:
  if (fpfs_FirstTrackWithFormatDescriptionOfType((uint64_t)a1, 1986618469))
    v43 = *(float *)(DerivedStorage + 840) == 0.0;
  else
    v43 = 0;
  if (v43 | v38)
  {
    fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, a1, 0);
LABEL_58:
    v36 = 0;
    goto LABEL_117;
  }
  if (!fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469))
  {
    fpfsi_ResumeAllWaitingVideoTracks((uint64_t)a1);
    goto LABEL_58;
  }
  fpfsi_copyCurrentImageQueueArrayAndOptions((uint64_t)a1, (uint64_t *)&cf);
  v44 = *v81;
  if (v44 != CAImageQueueGetTypeID()
    || !*v81
    || (v45 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469),
        v36 = fpfsi_addCAImageQueuesAndSlots(a1, v45, *((unsigned __int8 *)v81 + 16)),
        !(_DWORD)v36))
  {
    time.value = 0;
    time2.value = 0;
    v46 = CMBaseObjectGetDerivedStorage();
    v47 = CMBaseObjectGetDerivedStorage();
    v48 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
    if (!v48)
    {
      value = 0;
LABEL_131:
      v36 = 0;
      goto LABEL_132;
    }
    fpfs_CreateFigImageQueueOutputsArray((uint64_t)a1, v48, (CFTypeRef *)&time);
    value = (const __CFArray *)time.value;
    v50 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 896))
    {
      updated = fpfsi_updateOutputsForAllAggregateVideoDestinations((uint64_t)a1, (uint64_t)value);
    }
    else
    {
      v70 = *(_QWORD *)(v50 + 720);
      if (!v70)
      {
LABEL_124:
        v72 = *(_QWORD *)(v46 + 720);
        if (v72)
          FigImageQueueTableSetTimebase(v72, *(void **)(v46 + 576));
        fpfsi_copyCurrentImageQueueArrayAndOptions((uint64_t)a1, &time2.value);
        fpfsi_updateFigImageQueueListeners((uint64_t)a1, 0);
        for (i = *(_QWORD *)(v46 + 1040); i; i = *(_QWORD *)(i + 8))
        {
          if (*(_DWORD *)(i + 32) == 1986618469)
          {
            v74 = *(_QWORD *)(i + 96);
            if (v74)
              FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnRenderPipeline(*(const void **)(v47 + 816), (const void *)time2.value, *(const void **)(v74 + 32), (uint64_t)"fpfsi_UpdateWithNewFigImageQueues");
          }
        }
        goto LABEL_131;
      }
      matched = FigImageQueueTableUpdateToMatchOutputsArray(v70, value, 0, 0, 0, 0);
      if ((_DWORD)matched)
      {
        v36 = matched;
LABEL_132:
        if (time2.value)
          CFRelease((CFTypeRef)time2.value);
        if (value)
          CFRelease(value);
        if (!(_DWORD)v36)
        {
          v75 = *v81;
          if (v75 == FigVideoTargetGetTypeID())
            fpfsi_scheduleFVTTransitionsForItem((const __CFString *)a1, 0, 1);
          goto LABEL_58;
        }
        goto LABEL_117;
      }
      updated = FigImageQueueTableSetTimebase(*(_QWORD *)(v50 + 720), *(void **)(v50 + 576));
    }
    v36 = updated;
    if ((_DWORD)updated)
      goto LABEL_132;
    goto LABEL_124;
  }
LABEL_117:
  if (cf)
    CFRelease(cf);
  return v36;
}

uint64_t fpfsi_RTCReportingUpdateFVTCount(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);

  v2 = *(_QWORD *)(result + 2536);
  if (v2)
  {
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 56);
    if (v4)
      return v4(v2, CFSTR("playerStats"), CFSTR("FVTCount"), a2, 0);
  }
  return result;
}

uint64_t fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t updated;
  uint64_t v7;
  uint64_t AllocatorForMedia;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  CMTime v14;
  CMTime v15;
  const void *v16;
  CFArrayRef theArray;
  CMTime rhs;
  CMTime lhs;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  theArray = 0;
  v5 = *(const void **)(DerivedStorage + 40);
  if (!v5)
    goto LABEL_8;
  updated = FigAlternateSelectionBossApplyFilters(v5);
  if ((_DWORD)updated)
    goto LABEL_10;
  v7 = *(_QWORD *)(DerivedStorage + 40);
  AllocatorForMedia = FigGetAllocatorForMedia();
  updated = FigAlternateSelectionBossCopyProperty(v7, CFSTR("FilteredAlternateList"), AllocatorForMedia, &theArray);
  if ((_DWORD)updated)
    goto LABEL_10;
  if (!theArray || CFArrayGetCount(theArray) <= 0)
  {
    updated = FigSignalErrorAt();
    goto LABEL_10;
  }
  updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, theArray, &v16);
  if ((_DWORD)updated)
  {
LABEL_10:
    v9 = updated;
    goto LABEL_14;
  }
  if (FigCFEqual())
  {
LABEL_8:
    v9 = 0;
    goto LABEL_14;
  }
  memset(&v15, 0, sizeof(v15));
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v15);
  v10 = *(const void **)DerivedStorage;
  v11 = v16;
  lhs = v15;
  rhs = *(CMTime *)(DerivedStorage + 1176);
  CMTimeAdd(&v14, &lhs, &rhs);
  lhs = v14;
  rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v12 = fpfs_SetAlternateWithContext((uint64_t)v10, a1, v11, 1u, &lhs, (uint64_t)&rhs, 0, 0, 0, 0x10u);
  v9 = v12;
  if (a2 && !(_DWORD)v12)
    fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, (const __CFArray *)a1, 1);
LABEL_14:
  if (theArray)
    CFRelease(theArray);
  return v9;
}

uint64_t fpfsi_CopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, __CFArray **a5)
{
  uint64_t DerivedStorage;
  const void *v11;
  uint64_t v12;
  CFAllocatorRef *v13;
  int v14;
  CFNumberRef v15;
  CFNumberRef v16;
  const __CFDictionary *Value;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  uint64_t v22;
  CFArrayRef v23;
  float width;
  float height;
  CMVideoDimensions Dimensions;
  const __CFAllocator *v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  BOOL v30;
  CFDictionaryRef v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, const __CFString *, const __CFAllocator *, __CFArray **);
  uint64_t v35;
  uint64_t v36;
  __CFString **v37;
  __int128 v38;
  __CFArray *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  CFDictionaryRef theDict[2];
  __int128 v49;
  __int128 v50;
  __int128 valuePtr;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
    return FigSignalErrorAt();
  v11 = *(const void **)DerivedStorage;
  v12 = *(_QWORD *)(DerivedStorage + 168);
  LODWORD(valuePtr) = a2;
  theDict[0] = 0;
  v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!v12)
  {
LABEL_19:
    v45 = 0;
    fpfs_LockMutexWithCaller((uint64_t)v11);
    v19 = a2;
    fpfs_GetItemLivingTrack(DerivedStorage, a2, &v45);
    v20 = v45;
    if (!v45)
    {
      v20 = *(_QWORD *)(DerivedStorage + 1072);
      if (!v20)
        goto LABEL_89;
      while (*(_QWORD *)(v20 + 16) != v19)
      {
        v20 = *(_QWORD *)(v20 + 8);
        if (!v20)
          goto LABEL_89;
      }
      v45 = v20;
    }
    if (CFEqual(a3, CFSTR("FormatDescriptionArray")))
    {
      v22 = *(_QWORD *)(v20 + 40);
      v21 = (const void **)(v20 + 40);
      if (!v22)
        goto LABEL_89;
      v23 = CFArrayCreate(a4, v21, 1, MEMORY[0x1E0C9B378]);
      *a5 = v23;
      if (v23)
        goto LABEL_89;
LABEL_41:
      FigSignalErrorAt();
      goto LABEL_89;
    }
    if (CFEqual(a3, CFSTR("Dimensions")))
    {
      width = 0.0;
      height = 0.0;
      if (*(_DWORD *)(v20 + 32) == 1986618469)
      {
        Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v20 + 40));
        width = (float)Dimensions.width;
        height = (float)Dimensions.height;
      }
      v46 = height;
      v47 = width;
      valuePtr = xmmword_1E2F81B78;
      v27 = *v13;
      v28 = CFNumberCreate(*v13, kCFNumberFloat32Type, &v47);
      theDict[0] = v28;
      v29 = CFNumberCreate(v27, kCFNumberFloat32Type, &v46);
      theDict[1] = v29;
      if (v28)
        v30 = v29 == 0;
      else
        v30 = 1;
      if (v30)
      {
        v31 = 0;
        if (!v28)
        {
LABEL_38:
          if (theDict[1])
            CFRelease(theDict[1]);
          *a5 = v31;
          if (!v31)
            goto LABEL_41;
LABEL_89:
          fpfs_UnlockAndPostNotificationsWithCaller(v11);
        }
      }
      else
      {
        v31 = CFDictionaryCreate(a4, (const void **)&valuePtr, (const void **)theDict, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v28 = theDict[0];
        if (!theDict[0])
          goto LABEL_38;
      }
      CFRelease(v28);
      goto LABEL_38;
    }
    if (CFEqual(a3, CFSTR("EstimatedDataRate")))
    {
      v32 = *(_QWORD *)(v20 + 48);
      if (v32)
      {
        v33 = *(unsigned int *)(v20 + 24);
        v34 = *(void (**)(uint64_t, uint64_t, const __CFString *, const __CFAllocator *, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v34)
          v34(v32, v33, CFSTR("FMFD_TrackEstimatedDataRate"), a4, a5);
      }
      goto LABEL_89;
    }
    if (CFEqual(a3, CFSTR("NominalFrameRate")) || CFEqual(a3, CFSTR("CurrentVideoFrameRate")))
    {
      v35 = *(_QWORD *)(v20 + 96);
      if (!v35)
        goto LABEL_89;
      v36 = *(_QWORD *)(v35 + 32);
      if (!v36)
        goto LABEL_89;
      v37 = kFigRenderPipelineProperty_CurrentVideoFrameRate;
      goto LABEL_52;
    }
    if (CFEqual(a3, CFSTR("Matrix")))
    {
      v38 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)theDict = *MEMORY[0x1E0C9BAA8];
      v49 = v38;
      v50 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      v39 = FigCreate3x3MatrixArrayFromCGAffineTransform(a4, theDict);
      if (!v39)
        goto LABEL_41;
LABEL_60:
      *a5 = v39;
      goto LABEL_89;
    }
    if (CFEqual(a3, CFSTR("Enabled")))
    {
      v40 = (const void *)*MEMORY[0x1E0C9AE50];
LABEL_59:
      v39 = (__CFArray *)CFRetain(v40);
      goto LABEL_60;
    }
    if (CFEqual(a3, CFSTR("MediaCharacteristicArray")))
    {
      *(_OWORD *)theDict = fpfsi_CopyTrackProperty_trackInformationCallbacks;
      v49 = unk_1E2F81B60;
      *(_QWORD *)&v50 = fpfsi_CopyFormatDescriptions;
      FigMediaCharacteristicsCopyMediaCharacteristicsWithTrackCallbacks((uint64_t)a4, v20, (uint64_t (**)(uint64_t, int *))theDict, a5);
      goto LABEL_89;
    }
    if (CFEqual(a3, CFSTR("EffectiveLoudnessInfo")))
    {
      if (*(_DWORD *)(v20 + 32) == 1936684398)
      {
        fpfsi_copyLoudnessInfoWithItemMediaKindAndLID(DerivedStorage, v20, a5);
        goto LABEL_89;
      }
      goto LABEL_41;
    }
    if (CFEqual(a3, CFSTR("EffectiveEQPreset")))
    {
      if (*(_DWORD *)(v20 + 32) != 1936684398)
        goto LABEL_89;
      v41 = *(_QWORD *)(v20 + 96);
      if (!v41)
        goto LABEL_89;
      v36 = *(_QWORD *)(v41 + 32);
      if (!v36)
        goto LABEL_89;
      v37 = kFigAudioRenderPipelineProperty_EQPreset;
    }
    else if (CFEqual(a3, CFSTR("WillTrimShortDurationAudioSamples")))
    {
      if (*(_DWORD *)(v20 + 32) != 1936684398)
        goto LABEL_89;
      v42 = *(_QWORD *)(v20 + 96);
      if (!v42)
        goto LABEL_89;
      v36 = *(_QWORD *)(v42 + 32);
      if (!v36)
        goto LABEL_89;
      v37 = kFigAudioRenderPipelineProperty_WillTrimShortDurationSamples;
    }
    else
    {
      if (!CFEqual(a3, CFSTR("EmploysHardwarePassthrough")))
      {
        if (!CFEqual(a3, CFSTR("RenderPipeline")))
          goto LABEL_89;
        v44 = *(_QWORD *)(v20 + 96);
        if (!v44)
          goto LABEL_89;
        v40 = *(const void **)(v44 + 32);
        if (!v40)
          goto LABEL_89;
        goto LABEL_59;
      }
      if (*(_DWORD *)(v20 + 32) != 1936684398)
        goto LABEL_89;
      v43 = *(_QWORD *)(v20 + 96);
      if (!v43)
        goto LABEL_89;
      v36 = *(_QWORD *)(v43 + 32);
      if (!v36)
        goto LABEL_89;
      v37 = kFigAudioRenderPipelineProperty_EmploysHardwarePassthrough;
    }
LABEL_52:
    FigRenderPipelineCopyProperty(v36, (uint64_t)*v37, (uint64_t)a4, (uint64_t)a5);
    goto LABEL_89;
  }
  v14 = FigPropertyStorageCopyValue(v12, (uint64_t)CFSTR("TrackPropertyStorages"), theDict);
  if (v14)
    goto LABEL_62;
  if (!theDict[0] || (v15 = CFNumberCreate(*v13, kCFNumberSInt32Type, &valuePtr)) == 0)
  {
    v14 = FigSignalErrorAt();
LABEL_62:
    v18 = v14;
    goto LABEL_16;
  }
  v16 = v15;
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict[0], v15);
  CFRelease(v16);
  v18 = -12784;
  if (Value)
  {
    v18 = CFDictionaryGetValueIfPresent(Value, a3, (const void **)a5) ? 0 : -12784;
    if (*a5)
      CFRetain(*a5);
  }
LABEL_16:
  if (theDict[0])
    CFRelease(theDict[0]);
  if (v18)
    goto LABEL_19;
  return 0;
}

void fpfsi_SetCurrentTimeWithRange(const __CFArray *a1, CMTime *a2, unsigned int a3, uint64_t a4, __int128 *a5)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  CMTime v9;

  v9 = *a2;
  v7 = *(_OWORD *)a4;
  v8 = *(_QWORD *)(a4 + 16);
  v5 = *a5;
  v6 = *((_QWORD *)a5 + 2);
  fpfsi_SetCurrentTimeWithRangeAndSeekID(a1, &v9, a3, &v7, (uint64_t)&v5, 0);
}

void fpfsi_SetCurrentTimeWithRangeAndSeekID(const __CFArray *a1, CMTime *a2, unsigned int a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  CMTime v10;

  v10 = *a2;
  v8 = *a4;
  v9 = *((_QWORD *)a4 + 2);
  v6 = *(_OWORD *)a5;
  v7 = *(_QWORD *)(a5 + 16);
  fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &v10, a3, (uint64_t)&v8, &v6, a6, 0, 0, 1, 0, 1, 1, 0, 1);
}

void fpfsi_CopyAsset(uint64_t a1, _QWORD *a2)
{
  uint64_t *DerivedStorage;
  const void *v4;
  CFTypeRef v5;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v4 = (const void *)*DerivedStorage;
  fpfs_LockMutexWithCaller(*DerivedStorage);
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    v5 = (CFTypeRef)DerivedStorage[4];
    if (v5)
      v5 = CFRetain(v5);
    *a2 = v5;
  }
  fpfs_UnlockAndPostNotificationsWithCaller(v4);
}

uint64_t fpfsi_SetProperties(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  return FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)fpfsi_handleSetProperty, 0, 0, a3);
}

void fpfsi_SetCurrentTimeWithOptions(const __CFArray *a1, CMTime *a2)
{
  const void *Value;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  CMTime v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v15 = 0;
  v13 = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v11 = v13;
  v12 = v14;
  v10 = 0;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  Value = (const void *)FigCFDictionaryGetValue();
  FigCFDictionaryGetInt32IfPresent();
  v9 = *a2;
  v7 = v13;
  v8 = v14;
  v5 = v13;
  v6 = v14;
  fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &v9, 0, (uint64_t)&v7, &v5, 0, Value, 0, 1, 0, 1, 1, 0, 1);
}

uint64_t fpfsi_GetTrackMediaType(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 0;
}

uint64_t fpfsi_CopyTaggedCharacteristics(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  int v5;
  uint64_t v6;
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;
  __CFArray *Mutable;
  const __CFArray *v10;
  uint64_t CFStringForOSTypeValue;
  const __CFDictionary *MediaTypeInMediaArray;
  const __CFDictionary *v13;
  uint64_t v14;
  const __CFArray *v15;
  const void *Value;
  int ImmersiveAudioCapability;
  __CFString **v18;
  uint64_t v19;
  CFArrayRef theArray;
  CFRange v22;

  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 440);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  theArray = 0;
  *a3 = 0;
  if (v5 == 1668047728)
    v5 = 1935832172;
  v10 = *(const __CFArray **)(DerivedStorage + 1784);
  CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v10, CFStringForOSTypeValue, 0);
  if (!MediaTypeInMediaArray)
    goto LABEL_15;
  v13 = MediaTypeInMediaArray;
  v14 = FigMediaCharacteristicsCreateMediaCharacteristicsForMediaOption(a2, 0, MediaTypeInMediaArray, &theArray);
  if (!(_DWORD)v14)
  {
    v15 = theArray;
    if (theArray)
    {
      v22.length = CFArrayGetCount(theArray);
      v22.location = 0;
      CFArrayAppendArray(Mutable, v15, v22);
    }
    Value = CFDictionaryGetValue(v13, CFSTR("MediaSelectionOptionsPersistentID"));
    if (!v6 || v5 != 1936684398 || !Value)
      goto LABEL_15;
    ImmersiveAudioCapability = FigAlternateGetImmersiveAudioCapability(v6, (uint64_t)Value);
    if (ImmersiveAudioCapability == 3)
    {
      v18 = kFigStdAssetMediaCharacteristic_TaggedBinauralForHeadphones;
    }
    else
    {
      if (ImmersiveAudioCapability != 2)
      {
LABEL_15:
        v19 = 0;
        *a3 = Mutable;
        goto LABEL_16;
      }
      v18 = kFigStdAssetMediaCharacteristic_TaggedDownmix;
    }
    CFArrayAppendValue(Mutable, *v18);
    goto LABEL_15;
  }
  v19 = v14;
  if (Mutable)
    CFRelease(Mutable);
LABEL_16:
  if (theArray)
    CFRelease(theArray);
  return v19;
}

uint64_t fpfsi_CopyFormatDescriptions(uint64_t a1, CFAllocatorRef allocator, CFArrayRef *a3)
{
  CFArrayRef v4;
  void *values;

  values = *(void **)(a1 + 40);
  if (values)
    v4 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  else
    v4 = 0;
  *a3 = v4;
  return 0;
}

void fpfs_deferredClientRenderOptionChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (!*(_BYTE *)(DerivedStorage + 51))
    fpfs_PlayQueueCallForEachItem((uint64_t)a2, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleFVTClientRenderOptionChanged, 0);
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
}

void sub_192A3A5A4()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

uint64_t fpfsi_handleFVTClientRenderOptionChanged()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v1 = DerivedStorage;
  v2 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v2 + 40) || !*(_BYTE *)(v2 + 48) || !*(_BYTE *)(v2 + 49))
    return 0;
  result = fpfsi_updateSupportedFramerateBucketCapMonitorFromFVT();
  if (!(_DWORD)result)
    return FigAlternateSelectionBossApplyFilters(*(const void **)(v1 + 40));
  return result;
}

void fpfs_deferredFVTPreferredDataChannelChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (!*(_BYTE *)(DerivedStorage + 51))
    fpfs_PlayQueueCallForEachItem((uint64_t)a2, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoLayoutPreferenceChanged, 0);
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
}

void sub_192A3A678()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
}

uint64_t fpfsi_handleVideoLayoutPreferenceChanged(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t result;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40))
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40) || !*(_BYTE *)(DerivedStorage + 48) || !*(_BYTE *)(DerivedStorage + 49))
    return 0;
  result = fpfsi_setUpVideoLayoutFilters((uint64_t)a1);
  if (!(_DWORD)result)
    return fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 1);
  return result;
}

void fpfs_deferredRedoPreroll(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (!*(_BYTE *)(DerivedStorage + 51))
  {
    v4 = *(const __CFArray **)(DerivedStorage + 80);
    if (v4)
    {
      if (dword_1EE2A2A88)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v4 = *(const __CFArray **)(DerivedStorage + 80);
      }
      fpfs_stopResetDisturbReprepareAndResume(a2, v4, 0);
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
}

void sub_192A3A8B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  const void *v48;

  if (v48)
    CFRelease(v48);
}

uint64_t fpfs_CopyExternalProtectionStatus(uint64_t a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString **v15;
  CFDictionaryRef v16;
  CFDictionaryRef *v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  if (v6)
  {
    v18 = a3;
    if (*(_BYTE *)(DerivedStorage + 462))
      v7 = *(_BYTE *)(v6 + 1728) == 0;
    else
      v7 = 0;
    v9 = 1;
    v19 = 1;
    for (i = *(_QWORD *)(v6 + 1040); i; i = *(_QWORD *)(i + 8))
    {
      if (!v7 || *(_DWORD *)(i + 32) == 1986618469)
      {
        v11 = *(_QWORD *)(i + 384);
        if (v11)
        {
          v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (v12)
            v8 = v12(v11, 7, &v19);
          else
            v8 = 4294954514;
          if (dword_1EE2A2A88 >= 2)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v9 = v19;
          if ((_DWORD)v8)
            goto LABEL_20;
          if (v19 != 4 && v19 != 1)
            break;
        }
      }
    }
    v8 = 0;
LABEL_20:
    a3 = v18;
  }
  else
  {
    v8 = 0;
    v9 = 1;
    v19 = 1;
  }
  if (v9 == 1 || v9 == 4)
    v15 = kFigPlayerExternalProtectionStatus_Protected;
  else
    v15 = kFigPlayerExternalProtectionStatus_NotProtected;
  v16 = CFDictionaryCreate(a2, (const void **)kFigPlayerExternalProtectionStatusKey_Video, (const void **)v15, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v16)
  {
    if ((_DWORD)v8)
    {
      CFRelease(v16);
      v16 = 0;
    }
  }
  else
  {
    v8 = 4294954510;
  }
  *a3 = v16;
  return v8;
}

uint64_t fpfs_handleSetProperty(const void *a1, uint64_t a2, const void *a3, const void *a4, _BYTE *a5)
{
  uint64_t DerivedStorage;
  const void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v10;
  const void *v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  const __CFArray *v15;
  CGSize v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CFTypeID TypeID;
  const __CFDictionary *Value;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  int v24;
  CFIndex v25;
  uint64_t v26;
  uint64_t v27;
  CGRect *v28;
  __int128 *p_valuePtr;
  CFTypeID v30;
  const __CFNumber *v31;
  uint64_t v32;
  const void *v33;
  const void *v34;
  unsigned int v35;
  CFTypeID v36;
  const __CFNumber *v37;
  const __CFBoolean *v38;
  int v39;
  const __CFNumber *v40;
  unsigned int v41;
  CFTypeID v42;
  const __CFArray *v43;
  const __CFAllocator *AllocatorForMedia;
  const __CFArray *v45;
  const __CFArray *v46;
  CFTypeID v48;
  uint64_t v49;
  uint64_t v50;
  const __CFArray *Next;
  NSObject *v52;
  CFTypeID v53;
  int v54;
  int v55;
  int v56;
  const __CFArray *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t (*v61)(const __CFArray *, uint64_t);
  CGRect *v62;
  uint64_t v63;
  CFTypeID v64;
  const __CFNumber *v65;
  void *v66;
  CFTypeID v67;
  CFTypeID v68;
  CFTypeID v69;
  CFTypeID v70;
  CFTypeID v71;
  CFTypeID v72;
  CFTypeID v73;
  int v74;
  CFTypeID v75;
  int v76;
  const __CFArray *v77;
  uint64_t ActionAtEndForString;
  uint64_t v79;
  uint64_t v80;
  CFIndex Count;
  uint64_t v82;
  uint64_t RenderingTrackofType;
  CFTypeID v84;
  int v85;
  CFTypeID v86;
  CFTypeRef v87;
  _QWORD *v88;
  const void *v89;
  CFTypeID v90;
  const void *v91;
  uint64_t v92;
  CFTypeID v93;
  CFTypeRef v94;
  CFTypeID v95;
  const void *v96;
  CFTypeID v97;
  int v98;
  const void *v99;
  CFTypeRef v100;
  CFTypeID v101;
  CFTypeID v102;
  int v103;
  const void *v104;
  const void *v105;
  CFTypeRef v106;
  CFTypeID v107;
  CFTypeID v108;
  const __CFBoolean *v109;
  const __CFBoolean *v110;
  int v111;
  BOOL v112;
  CFTypeID v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  CFTypeID v119;
  Boolean v120;
  const void *v121;
  const void *v122;
  const void *v123;
  CFTypeID v124;
  int v125;
  uint64_t v126;
  const void *v127;
  CFTypeRef v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  CFTypeID v133;
  CFTypeID v134;
  CFTypeID v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  CFTypeID v140;
  const __CFAllocator *v141;
  CFArrayRef Copy;
  CFTypeID v143;
  uint64_t v144;
  const __CFArray *v145;
  const __CFArray *v146;
  int v147;
  const __CFArray *v148;
  CFTypeID v149;
  CFTypeID v150;
  CFTypeID v151;
  int v152;
  int v153;
  CFTypeID v154;
  int v155;
  int v156;
  CFTypeID v157;
  uint64_t v158;
  int v159;
  CFTypeID v160;
  const __CFNumber *v161;
  void *v162;
  CFTypeID v163;
  CFTypeID v164;
  CFTypeID v165;
  CFTypeID v166;
  const void *v167;
  CFTypeRef v168;
  CFTypeID v169;
  int v170;
  CFTypeID v171;
  int v172;
  CFTypeID v173;
  int v174;
  CFTypeID v175;
  CFTypeID v176;
  int v177;
  CFTypeID v178;
  int v179;
  uint64_t v180;
  int v181;
  CFTypeRef v182;
  CFTypeID v183;
  CFTypeRef v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const __CFArray *v188;
  const __CFArray *v189;
  const void *v190;
  CFTypeRef v191;
  CFTypeID v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  CFTypeID v196;
  CFTypeID v197;
  CFTypeID v198;
  CFTypeID v199;
  int v200;
  CFTypeID v201;
  const __CFArray *v202;
  _BOOL4 shouldApplyResolutionCapForBuiltinDisplay;
  const void *v204;
  const void *v205;
  CFTypeRef v206;
  uint64_t (*v207)(uint64_t);
  char v208;
  os_log_type_t type[8];
  CGRect v210;
  CFTypeRef cf;
  CGRect rect;
  unsigned __int128 valuePtr;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;

  v217 = *MEMORY[0x1E0C80C00];
  cf = a4;
  if (a1 && a3)
  {
    *a5 = 1;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (CFEqual(a3, CFSTR("PlayerRole")))
    {
      v8 = (const void *)FigCFCopyCompactDescription();
      if (dword_1EE2A2A88)
      {
        LODWORD(v210.origin.x) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v8)
        CFRelease(v8);
    }
    fpfs_LockMutexWithCaller((uint64_t)a1);
    if (*(_BYTE *)(DerivedStorage + 51))
      goto LABEL_481;
    if (CFEqual(a3, CFSTR("DestinationPixelBufferAttributes")))
    {
      if (!cf || (v10 = CFGetTypeID(cf), v10 == CFDictionaryGetTypeID()))
      {
        v11 = *(const void **)(DerivedStorage + 584);
        if (v11)
          CFRelease(v11);
        v12 = cf;
        *(_QWORD *)(DerivedStorage + 584) = cf;
        if (v12)
          CFRetain(v12);
        goto LABEL_46;
      }
LABEL_481:
      FigSignalErrorAt();
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("ClosedCaptionLayerArray")))
    {
      v13 = CMBaseObjectGetDerivedStorage();
      if (!FigCFEqual())
      {
        v14 = *(_QWORD *)(v13 + 200);
        if (cf)
          v15 = (const __CFArray *)CFRetain(cf);
        else
          v15 = 0;
        *(_QWORD *)(v13 + 200) = v15;
        FPSupport_updateClosedCaptionLayer(v13 + 208, v15);
        FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(v13 + 816), v14, (uint64_t)"fpfs_setClientClosedCaptionLayerArray");
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("ClosedCaptionLayerBoundsUpdate")))
    {
      *(_DWORD *)type = 0;
      v16 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
      rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
      rect.size = v16;
      v210.origin = rect.origin;
      v210.size = v16;
      v17 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 16);
      valuePtr = *MEMORY[0x1E0CA4AD8];
      v18 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 32);
      v19 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 48);
      v214 = v17;
      v215 = v18;
      v216 = v19;
      if (cf && (TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(cf)))
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ClosedCaptionLayerBoundsUpdate_LayerBounds"));
        if (Value)
          CGRectMakeWithDictionaryRepresentation(Value, &rect);
        v22 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ClosedCaptionLayerBoundsUpdate_LayerVideoRelativeToViewport"));
        v23 = v22;
        if (v22)
          CGRectMakeWithDictionaryRepresentation(v22, &v210);
        if (CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ClosedCaptionLayerBoundsUpdate_LayerCaptionsAvoidanceMargins")))
        {
          FigGeometryMarginsMakeFromDictionary();
          v24 = 1;
        }
        else
        {
          v24 = 0;
        }
        v40 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ClosedCaptionLayerBoundsUpdate_LayerIndex"));
        if (v40)
        {
          CFNumberGetValue(v40, kCFNumberIntType, type);
          v41 = *(_DWORD *)type;
          if ((*(_DWORD *)type & 0x80000000) != 0)
            goto LABEL_46;
        }
        else
        {
          v41 = 0;
        }
        v26 = DerivedStorage + 208;
        v27 = *(_QWORD *)(DerivedStorage + 200);
        v25 = v41;
        if (v23)
        {
          v28 = &v210;
          goto LABEL_31;
        }
      }
      else
      {
        FigSignalErrorAt();
        v25 = 0;
        v24 = 0;
        v26 = DerivedStorage + 208;
        v27 = *(_QWORD *)(DerivedStorage + 200);
      }
      v28 = 0;
LABEL_31:
      if (v24)
        p_valuePtr = (__int128 *)&valuePtr;
      else
        p_valuePtr = 0;
      FPSupport_updateClosedCaptionLayerBounds(v26, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, v27, v25, v28, p_valuePtr);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("ClosedCaptionLayerSetOptions")))
    {
      LODWORD(valuePtr) = 0;
      if (cf && (v30 = CFDictionaryGetTypeID(), v30 == CFGetTypeID(cf)))
      {
        v31 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ClosedCaptionLayerSetOption_LayerIndex"));
        if (v31)
          CFNumberGetValue(v31, kCFNumberIntType, &valuePtr);
        v32 = FigCFDictionaryGetValue();
        if (!v32)
          goto LABEL_481;
        v33 = (const void *)v32;
        v34 = (const void *)FigCFDictionaryGetValue();
        if (!v34)
          goto LABEL_481;
        v35 = valuePtr;
        if ((valuePtr & 0x80000000) != 0)
          goto LABEL_46;
      }
      else
      {
        FigSignalErrorAt();
        v34 = 0;
        v33 = 0;
        v35 = 0;
      }
      FPSupport_setClosedCaptionLayerOptions(DerivedStorage + 208, *(_QWORD *)(DerivedStorage + 200), v35, v33, v34);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("ClosedCaptionLayerSetSeparated")))
    {
      LODWORD(valuePtr) = 0;
      if (cf && (v36 = CFDictionaryGetTypeID(), v36 == CFGetTypeID(cf)))
      {
        v37 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ClosedCaptionLayerSetSeparated_LayerIndex"));
        if (v37)
          CFNumberGetValue(v37, kCFNumberIntType, &valuePtr);
        v38 = (const __CFBoolean *)FigCFDictionaryGetValue();
        if (v38)
          v39 = CFBooleanGetValue(v38);
        else
          v39 = 0;
      }
      else
      {
        FigSignalErrorAt();
        v39 = 0;
      }
      if ((valuePtr & 0x80000000) == 0)
        FPSupport_setClosedCaptionLayerSeparated(DerivedStorage + 208, *(_QWORD *)(DerivedStorage + 200), valuePtr, v39);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("ImageQueueSlotTransitionFinished")))
    {
      fpfs_releaseTransitionImageQueuesAndSlots();
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("VideoLayerArray")))
    {
      if (cf)
      {
        v42 = CFArrayGetTypeID();
        if (v42 != CFGetTypeID(cf))
          goto LABEL_481;
        v43 = (const __CFArray *)cf;
      }
      else
      {
        v43 = 0;
      }
      fpfs_setClientVideoLayerArray((uint64_t)a1, v43);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("VideoLayer")))
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v45 = CFArrayCreate(AllocatorForMedia, &cf, cf != 0, MEMORY[0x1E0C9B378]);
      if (v45)
      {
        v46 = v45;
        fpfs_setClientVideoLayerArray((uint64_t)a1, v45);
        CFRelease(v46);
        goto LABEL_46;
      }
      goto LABEL_481;
    }
    if (CFEqual(a3, CFSTR("RequiresNumVideoSlots")))
    {
      *(_QWORD *)type = 0;
      if (!cf)
        goto LABEL_481;
      v48 = CFGetTypeID(cf);
      if (v48 != CFNumberGetTypeID())
        goto LABEL_481;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberCFIndexType, type);
      if (*(_QWORD *)type == *(_QWORD *)(DerivedStorage + 400))
        goto LABEL_46;
      v210.size.width = 0.0;
      v49 = CAImageQueueGetTypeID();
      v50 = *(_QWORD *)(DerivedStorage + 400);
      *(_QWORD *)&v210.origin.x = v49;
      *(_QWORD *)&v210.origin.y = *(_QWORD *)type - v50;
      LOBYTE(v210.size.width) = 1;
      Next = fpfs_getNext(DerivedStorage, 0);
      if (dword_1EE2A2A88)
      {
        v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(uint64_t *)type >= 1 && Next)
        fpfs_EnqueueNotification(a1, CFSTR("TimebaseChanged"), Next, 0);
      *(_QWORD *)(DerivedStorage + 400) = *(_QWORD *)type;
      *(_BYTE *)(DerivedStorage + 456) = 1;
      v61 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoOutputsChanged;
      v62 = &v210;
      goto LABEL_104;
    }
    if (CFEqual(a3, CFSTR("VideoLayerDestinationIsTVOut"))
      || CFEqual(a3, CFSTR("PreventDisplaySleepDuringVideoPlayback")))
    {
      if (!cf)
        goto LABEL_481;
      v53 = CFBooleanGetTypeID();
      if (v53 != CFGetTypeID(cf))
        goto LABEL_481;
      v54 = CFEqual(a3, CFSTR("PreventDisplaySleepDuringVideoPlayback"));
      v55 = CFBooleanGetValue((CFBooleanRef)cf);
      if (v54)
        v56 = v55;
      else
        v56 = v55 == 0;
      if (*(unsigned __int8 *)(DerivedStorage + 408) != v56)
      {
        v57 = fpfs_getNext(DerivedStorage, 0);
        *(_BYTE *)(DerivedStorage + 408) = v56;
        if (v57)
        {
          v58 = CMBaseObjectGetDerivedStorage();
          if (v58)
          {
            v59 = *(_QWORD *)(v58 + 784);
            if (v59)
            {
              v60 = (uint64_t *)MEMORY[0x1E0C9AE50];
              if (!*(_BYTE *)(DerivedStorage + 408))
                v60 = (uint64_t *)MEMORY[0x1E0C9AE40];
              fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v59, (uint64_t)CFSTR("PreventDisplaySleepDuringVideoPlayback"), *v60);
            }
          }
        }
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("AudioPipelineEarlyDump")))
    {
      if (!cf)
        goto LABEL_481;
      v64 = CFGetTypeID(cf);
      if (v64 != CFNumberGetTypeID())
        goto LABEL_481;
      v65 = (const __CFNumber *)cf;
      v66 = (void *)(DerivedStorage + 572);
LABEL_114:
      CFNumberGetValue(v65, kCFNumberIntType, v66);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("VideoPipelineEarlyDump")))
    {
      if (!cf)
        goto LABEL_481;
      v67 = CFGetTypeID(cf);
      if (v67 != CFNumberGetTypeID())
        goto LABEL_481;
      v65 = (const __CFNumber *)cf;
      v66 = (void *)(DerivedStorage + 576);
      goto LABEL_114;
    }
    if (CFEqual(a3, CFSTR("DisallowVideoLayerDisplayCompositing")))
    {
      if (cf)
      {
        v68 = CFGetTypeID(cf);
        if (v68 == CFBooleanGetTypeID())
        {
          *(_BYTE *)(DerivedStorage + 392) = CFBooleanGetValue((CFBooleanRef)cf);
          goto LABEL_46;
        }
      }
      goto LABEL_481;
    }
    if (CFEqual(a3, CFSTR("AllowGaplessTransitions")))
    {
      *(_BYTE *)(DerivedStorage + 49) = cf != (CFTypeRef)*MEMORY[0x1E0C9AE40];
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("NetworkCacheURL")))
      goto LABEL_46;
    if (CFEqual(a3, CFSTR("PlayerVolume")))
    {
      fpfs_setVolume(a1, (void *)cf);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("PlayerMuted")))
    {
      fpfs_setMuted(a1, cf);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("EQPreset")))
    {
      LODWORD(valuePtr) = 0;
      if (cf)
      {
        v69 = CFGetTypeID(cf);
        if (v69 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
          fpfs_setEQPreset((uint64_t)a1, valuePtr);
          goto LABEL_46;
        }
      }
      goto LABEL_481;
    }
    if (CFEqual(a3, CFSTR("SetVideoLayerBoundsAutomatically")))
    {
      if (cf)
      {
        v70 = CFGetTypeID(cf);
        if (v70 == CFBooleanGetTypeID())
        {
          *(_BYTE *)(DerivedStorage + 457) = CFBooleanGetValue((CFBooleanRef)cf);
          goto LABEL_46;
        }
      }
      goto LABEL_481;
    }
    if (CFEqual(a3, CFSTR("PrimaryVideoOutputSize")))
    {
      valuePtr = 0uLL;
      if (!cf)
        goto LABEL_481;
      v71 = CFGetTypeID(cf);
      if (v71 != CFDictionaryGetTypeID()
        || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)cf, (CGSize *)&valuePtr))
      {
        goto LABEL_481;
      }
      if (*(double *)&valuePtr == *(double *)(DerivedStorage + 440)
        && *((double *)&valuePtr + 1) == *(double *)(DerivedStorage + 448))
      {
        goto LABEL_46;
      }
      *(_OWORD *)(DerivedStorage + 440) = valuePtr;
      v61 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_HandleResolutionCapOrDisplaySizeChange;
      goto LABEL_144;
    }
    if (CFEqual(a3, CFSTR("PostClosedCaptionCommands")))
    {
      if (cf)
      {
        v72 = CFGetTypeID(cf);
        if (v72 == CFBooleanGetTypeID())
        {
          *(_BYTE *)(DerivedStorage + 208) = CFBooleanGetValue((CFBooleanRef)cf);
          goto LABEL_46;
        }
      }
      goto LABEL_481;
    }
    if (CFEqual(a3, CFSTR("DisplayClosedCaptions")))
    {
      if (!cf)
        goto LABEL_481;
      v73 = CFGetTypeID(cf);
      if (v73 != CFBooleanGetTypeID())
        goto LABEL_481;
      v74 = CFBooleanGetValue((CFBooleanRef)cf);
      if (v74 != *(unsigned __int8 *)(DerivedStorage + 209))
      {
        *(_BYTE *)(DerivedStorage + 209) = v74;
        fpfs_updateClosedCaptionsDisplay(a1, 0);
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("RequiredNumberOfCAContextsForClosedCaptionLayers")))
    {
      if (cf)
      {
        v75 = CFGetTypeID(cf);
        if (v75 == CFNumberGetTypeID())
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
          if ((_DWORD)valuePtr != *(_DWORD *)(DerivedStorage + 232))
          {
            *(_DWORD *)(DerivedStorage + 232) = valuePtr;
            FPSupport_updateClosedCaptionLayer(DerivedStorage + 208, *(const __CFArray **)(DerivedStorage + 200));
          }
        }
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("DisplayNonForcedSubtitles")) || CFEqual(a3, CFSTR("PreferredLanguageList")))
      goto LABEL_46;
    if (CFEqual(a3, CFSTR("ActionAtEnd")))
    {
      v76 = *(_DWORD *)(DerivedStorage + 632);
      v77 = fpfs_getNext(DerivedStorage, 0);
      ActionAtEndForString = FigPlaybackGetActionAtEndForString(cf);
      *(_DWORD *)(DerivedStorage + 632) = ActionAtEndForString;
      if (v76 != (_DWORD)ActionAtEndForString && v77)
      {
        v79 = ActionAtEndForString;
        v80 = *(_QWORD *)(DerivedStorage + 80);
        Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
        if (v80)
          v82 = Count + 1;
        else
          v82 = Count;
        if (FigPlaybackGetEffectiveActionAtEnd(v79, v82))
        {
          RenderingTrackofType = fpfs_LastRenderingTrackofType((uint64_t)v77, 1936684398, 0);
          if (RenderingTrackofType)
            fpfs_CancelGaplessTransitionThatDependsOnTrack(a1, RenderingTrackofType, 1);
        }
        fpfs_AdvanceToNextItemIfNecessary();
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("ApplyVideoTrackMatrix")))
    {
      if (!cf)
        goto LABEL_481;
      v84 = CFGetTypeID(cf);
      if (v84 != CFBooleanGetTypeID())
        goto LABEL_481;
      v85 = CFBooleanGetValue((CFBooleanRef)cf);
      if (v85 != *(unsigned __int8 *)(DerivedStorage + 608))
        *(_BYTE *)(DerivedStorage + 608) = v85;
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("TimeAccuracy")))
      goto LABEL_46;
    if (CFEqual(a3, CFSTR("FigAudioSession")))
    {
      if (cf)
      {
        v86 = CFGetTypeID(cf);
        if (v86 != FigAudioSessionGetTypeID())
          goto LABEL_481;
        v87 = cf;
        v88 = (_QWORD *)(DerivedStorage + 536);
        v89 = *(const void **)(DerivedStorage + 536);
        *(_QWORD *)(DerivedStorage + 536) = cf;
        CFRetain(v87);
      }
      else
      {
        v88 = (_QWORD *)(DerivedStorage + 536);
        v89 = *(const void **)(DerivedStorage + 536);
        *(_QWORD *)(DerivedStorage + 536) = 0;
      }
      if (v89)
        CFRelease(v89);
      fpfs_setCachedRouteInfo();
      v92 = *(_QWORD *)(DerivedStorage + 80);
      if ((!v92 || fpfs_FirstRenderingTrackofType(v92, 1936684398)) && *v88)
        fpfs_stopResetDisturbReprepareAndResume(a1, *(const __CFArray **)(DerivedStorage + 80), 0);
      if (!*(_QWORD *)(DerivedStorage + 528))
        fpfs_FetchClientBundleIdentifierFromAudioSession(a1);
LABEL_46:
      fpfs_UnlockAndPostNotificationsWithCaller(a1);
    }
    if (CFEqual(a3, CFSTR("FigAudioSession2")))
      goto LABEL_46;
    if (CFEqual(a3, CFSTR("ClientName")))
    {
      if (!cf || (v90 = CFStringGetTypeID(), v90 == CFGetTypeID(cf)))
      {
        v91 = *(const void **)(DerivedStorage + 184);
        if (v91)
        {
          CFRelease(v91);
          *(_QWORD *)(DerivedStorage + 184) = 0;
        }
        if (cf)
          *(_QWORD *)(DerivedStorage + 184) = CFRetain(cf);
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("STSLabel")))
    {
      if (cf)
      {
        v93 = CFStringGetTypeID();
        if (v93 != CFGetTypeID(cf))
          goto LABEL_46;
        v94 = cf;
      }
      else
      {
        v94 = 0;
      }
      *(_QWORD *)&valuePtr = CFSTR("STSLabel");
      *((_QWORD *)&valuePtr + 1) = v94;
      v96 = *(const void **)(DerivedStorage + 192);
      *(_QWORD *)(DerivedStorage + 192) = v94;
      if (v94)
        CFRetain(v94);
      if (v96)
        CFRelease(v96);
      v61 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_setPropertyOnAllAudioRenderPipelines;
      v62 = (CGRect *)&valuePtr;
LABEL_104:
      v63 = (uint64_t)a1;
LABEL_105:
      fpfs_PlayQueueCallForEachItem(v63, v61, (uint64_t)v62);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("AudioDeviceUID")))
    {
      if (cf)
      {
        v95 = CFStringGetTypeID();
        if (v95 != CFGetTypeID(cf))
          goto LABEL_46;
      }
      if (FigCFEqual())
        goto LABEL_46;
      v99 = *(const void **)(DerivedStorage + 176);
      v100 = cf;
      *(_QWORD *)(DerivedStorage + 176) = cf;
      if (v100)
        CFRetain(v100);
      if (v99)
        CFRelease(v99);
      LOBYTE(valuePtr) = 0;
      goto LABEL_226;
    }
    if (CFEqual(a3, CFSTR("EnableHardwareAcceleratedVideoDecoder")))
    {
      if (cf)
      {
        v97 = CFGetTypeID(cf);
        if (v97 == CFBooleanGetTypeID())
        {
          if (cf == (CFTypeRef)*MEMORY[0x1E0C9AE40])
            v98 = 2;
          else
            v98 = 1;
          *(_DWORD *)(DerivedStorage + 592) = v98;
        }
      }
      else
      {
        *(_DWORD *)(DerivedStorage + 592) = 0;
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("PreferredVideoDecoderGPURegistryID")))
    {
      if (cf)
      {
        v101 = CFNumberGetTypeID();
        if (v101 != CFGetTypeID(cf))
          goto LABEL_46;
      }
      if (FigCFEqual())
        goto LABEL_46;
      v105 = *(const void **)(DerivedStorage + 600);
      v106 = cf;
      *(_QWORD *)(DerivedStorage + 600) = cf;
      if (v106)
        CFRetain(v106);
      if (v105)
        CFRelease(v105);
      goto LABEL_244;
    }
    if (CFEqual(a3, CFSTR("GatherPerformanceHistoryArray")))
    {
      if (!cf)
        goto LABEL_481;
      v102 = CFBooleanGetTypeID();
      if (v102 != CFGetTypeID(cf))
        goto LABEL_481;
      v103 = CFBooleanGetValue((CFBooleanRef)cf);
      if (v103 != *(unsigned __int8 *)(DerivedStorage + 656))
      {
        *(_BYTE *)(DerivedStorage + 656) = v103;
        if (!v103)
        {
          v104 = *(const void **)(DerivedStorage + 664);
          if (v104)
          {
            CFRelease(v104);
            *(_QWORD *)(DerivedStorage + 664) = 0;
          }
        }
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("DisplayTimedMetadata")))
    {
      if (cf)
      {
        v107 = CFGetTypeID(cf);
        if (v107 == CFBooleanGetTypeID())
        {
          *(_BYTE *)(DerivedStorage + 459) = CFBooleanGetValue((CFBooleanRef)cf);
          goto LABEL_46;
        }
      }
      goto LABEL_481;
    }
    if (CFEqual(a3, CFSTR("SendToNero")))
    {
      if (!cf)
        goto LABEL_481;
      v108 = CFDictionaryGetTypeID();
      if (v108 != CFGetTypeID(cf))
        goto LABEL_481;
      v109 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("Visuals"));
      if (v109 && (v110 = v109, v111 = *(unsigned __int8 *)(DerivedStorage + 462), v111 != CFBooleanGetValue(v109)))
      {
        v120 = CFBooleanGetValue(v110);
        *(_BYTE *)(DerivedStorage + 462) = v120;
        v112 = (*(_BYTE *)(DerivedStorage + 463) | v120) == 0;
      }
      else
      {
        v112 = 1;
      }
      if (*(_BYTE *)(DerivedStorage + 462))
      {
        v121 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NeroTransport"));
        if (v121)
        {
          v122 = *(const void **)(DerivedStorage + 488);
          *(_QWORD *)(DerivedStorage + 488) = v121;
          CFRetain(v121);
          if (v122)
            CFRelease(v122);
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      else
      {
        v123 = *(const void **)(DerivedStorage + 488);
        if (v123)
        {
          CFRelease(v123);
          *(_QWORD *)(DerivedStorage + 488) = 0;
        }
      }
      if (!v112
        && !fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_updateNeroChange, 0)&& *(_BYTE *)(DerivedStorage + 462))
      {
        fpfs_RTCReportingSetSendingVisualsToNero(DerivedStorage);
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("NeroDisplaySize")))
    {
      if (!cf)
        goto LABEL_481;
      v113 = CFDictionaryGetTypeID();
      if (v113 != CFGetTypeID(cf))
        goto LABEL_481;
      valuePtr = *MEMORY[0x1E0C9D820];
      if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)cf, (CGSize *)&valuePtr))
        goto LABEL_481;
      if (*(double *)&valuePtr == *(double *)(DerivedStorage + 464)
        && *((double *)&valuePtr + 1) == *(double *)(DerivedStorage + 472))
      {
        goto LABEL_46;
      }
      *(_OWORD *)(DerivedStorage + 464) = valuePtr;
      if (*(_BYTE *)(DerivedStorage + 462) && *(_BYTE *)(DerivedStorage + 463) && *(_QWORD *)(DerivedStorage + 80))
      {
        v114 = CMBaseObjectGetDerivedStorage();
        v115 = v114;
        if (!v114)
          goto LABEL_324;
        v116 = *(_QWORD *)(v114 + 808);
        v117 = *(_QWORD *)(v114 + 816);
        if (v117 && *(_QWORD *)(v117 + 32))
          v118 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v117, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472), *(_QWORD *)(DerivedStorage + 480), *(_QWORD *)(DerivedStorage + 80));
        else
          v118 = 0;
        if (!v118 && v116)
        {
          if (!*(_QWORD *)(v116 + 32))
            goto LABEL_324;
          v118 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v116, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472), *(_QWORD *)(DerivedStorage + 480), *(_QWORD *)(DerivedStorage + 80));
        }
        if (!v118)
        {
LABEL_324:
          v136 = *(_QWORD *)(v115 + 904);
          if (v136)
            fpfs_setDisplaySizeOnOutOfBandSubtitleController(v136, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472));
        }
      }
      fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_HandleResolutionCapOrDisplaySizeChange, 0);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("NeroVideoGravity")))
    {
      if (cf)
      {
        v119 = CFStringGetTypeID();
        if (v119 != CFGetTypeID(cf))
          goto LABEL_481;
      }
      if (FigCFEqual())
        goto LABEL_46;
      v127 = *(const void **)(DerivedStorage + 480);
      v128 = cf;
      *(_QWORD *)(DerivedStorage + 480) = cf;
      if (v128)
        CFRetain(v128);
      if (v127)
        CFRelease(v127);
      if (!*(_BYTE *)(DerivedStorage + 462) || !*(_BYTE *)(DerivedStorage + 463) || !*(_QWORD *)(DerivedStorage + 80))
        goto LABEL_46;
      v129 = CMBaseObjectGetDerivedStorage();
      v130 = (_QWORD *)v129;
      if (v129)
      {
        v131 = *(_QWORD *)(v129 + 784);
        if (v131 && *(_QWORD *)(v131 + 32))
          v132 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v131, (uint64_t)CFSTR("NeroVideoGravity"), *(_QWORD *)(DerivedStorage + 480));
        else
          v132 = 0;
        v137 = v130[102];
        if (v137 && *(_QWORD *)(v137 + 32))
          v132 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v137, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472), *(_QWORD *)(DerivedStorage + 480), *(_QWORD *)(DerivedStorage + 80));
        if (v132 || (v138 = v130[101]) == 0)
        {
LABEL_335:
          if (v132)
            goto LABEL_46;
          goto LABEL_336;
        }
        if (*(_QWORD *)(v138 + 32))
        {
          v132 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v138, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472), *(_QWORD *)(DerivedStorage + 480), *(_QWORD *)(DerivedStorage + 80));
          goto LABEL_335;
        }
      }
LABEL_336:
      v139 = v130[113];
      if (v139)
        FigOutOfBandTrackControllerSetProperty(v139, CFSTR("NeroVideoGravity"), *(const void **)(DerivedStorage + 480));
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("AllowVideoRenderingIfSendingVisualsToNero")))
    {
      if (cf)
      {
        v124 = CFBooleanGetTypeID();
        if (v124 == CFGetTypeID(cf))
        {
          v125 = *(unsigned __int8 *)(DerivedStorage + 496);
          if (v125 != CFBooleanGetValue((CFBooleanRef)cf))
          {
            *(_BYTE *)(DerivedStorage + 496) = CFBooleanGetValue((CFBooleanRef)cf);
            if (*(_BYTE *)(DerivedStorage + 462))
            {
              if (*(_QWORD *)(DerivedStorage + 80))
              {
                *(_QWORD *)&v214 = 0;
                *(_QWORD *)&valuePtr = FigVisualContextGetTypeID();
                v126 = -1;
                if (*(_BYTE *)(DerivedStorage + 496))
                  v126 = 1;
                *((_QWORD *)&valuePtr + 1) = v126;
                fpfsi_handleVideoOutputsChanged(*(const __CFArray **)(DerivedStorage + 80), (uint64_t *)&valuePtr);
              }
            }
          }
        }
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("AutoSwitchStreamQuality")))
    {
      if (!cf)
        goto LABEL_481;
      v133 = CFGetTypeID(cf);
      if (v133 != CFBooleanGetTypeID())
        goto LABEL_481;
      *(_BYTE *)(DerivedStorage + 458) = CFBooleanGetValue((CFBooleanRef)cf);
      v61 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_setPlaybackMonitorAutoSwitchStreamQuality;
LABEL_144:
      v63 = (uint64_t)a1;
      v62 = 0;
      goto LABEL_105;
    }
    if (CFEqual(a3, CFSTR("ClientSuspended")))
    {
      if (cf)
      {
        v134 = CFBooleanGetTypeID();
        if (v134 == CFGetTypeID(cf))
        {
          *(_BYTE *)(DerivedStorage + 50) = CFBooleanGetValue((CFBooleanRef)cf);
          fpfs_UnlockAndPostNotificationsWithCaller(a1);
        }
      }
      goto LABEL_481;
    }
    if (CFEqual(a3, CFSTR("SystemWillSleep")))
    {
      if (!cf)
        goto LABEL_481;
      v135 = CFBooleanGetTypeID();
      if (v135 != CFGetTypeID(cf))
        goto LABEL_481;
      if (CFBooleanGetValue((CFBooleanRef)cf))
        fpfs_DoAnyItemsHaveFairPlayEncryptedContent();
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("SystemHasPoweredOn")))
    {
      if (cf)
      {
        CFBooleanGetTypeID();
        CFGetTypeID(cf);
      }
      goto LABEL_481;
    }
    if (CFEqual(a3, CFSTR("DisplayList")))
    {
      if (cf)
      {
        v140 = CFArrayGetTypeID();
        if (v140 != CFGetTypeID(cf))
          goto LABEL_481;
        v141 = (const __CFAllocator *)FigGetAllocatorForMedia();
        Copy = CFArrayCreateCopy(v141, (CFArrayRef)cf);
        if (!Copy)
          goto LABEL_46;
        shouldApplyResolutionCapForBuiltinDisplay = fpfs_shouldApplyResolutionCapForBuiltinDisplay();
        v204 = *(const void **)(DerivedStorage + 672);
        *(_QWORD *)(DerivedStorage + 672) = Copy;
        CFRetain(Copy);
        v208 = 0;
      }
      else
      {
        shouldApplyResolutionCapForBuiltinDisplay = fpfs_shouldApplyResolutionCapForBuiltinDisplay();
        Copy = 0;
        v204 = *(const void **)(DerivedStorage + 672);
        *(_QWORD *)(DerivedStorage + 672) = 0;
        v208 = 1;
      }
      if (v204)
        CFRelease(v204);
      if ((v208 & 1) == 0)
        CFRelease(Copy);
      if (fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_updateDisplayListOnCryptors, 0)|| fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_updateDisplayListForHDCPMonitor, 0)|| fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_updateDisplayListForVideoRangeMonitors, 0)|| shouldApplyResolutionCapForBuiltinDisplay != fpfs_shouldApplyResolutionCapForBuiltinDisplay()&& fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_HandleResolutionCapOrDisplaySizeChange, 0))
      {
        goto LABEL_481;
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("OverrideDisplaySupportedVideoRange")))
    {
      if (!cf)
        goto LABEL_481;
      v143 = CFNumberGetTypeID();
      if (v143 != CFGetTypeID(cf))
        goto LABEL_481;
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr >= 6)
        goto LABEL_481;
      *(_DWORD *)(DerivedStorage + 680) = valuePtr;
      v144 = CMBaseObjectGetDerivedStorage();
      v145 = fpfs_getNext(v144, 0);
      if (v145)
      {
        v146 = v145;
        do
        {
          v147 = fpfsi_setOverrideDisplaysSupportedVideoRange();
          v148 = fpfs_getNext(v144, v146);
          if (v147)
            break;
          v146 = v148;
        }
        while (v148);
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("MediaSelectionCriteria")))
    {
      if (cf)
      {
        v149 = CFDictionaryGetTypeID();
        if (v149 != CFGetTypeID(cf))
          goto LABEL_481;
      }
      if (!FigCFEqual())
      {
        v205 = *(const void **)(DerivedStorage + 688);
        v206 = cf;
        *(_QWORD *)(DerivedStorage + 688) = cf;
        if (!v206)
          goto LABEL_489;
        goto LABEL_488;
      }
      goto LABEL_492;
    }
    if (CFEqual(a3, CFSTR("LegibleFallbackMediaSelectionCriteria")))
    {
      if (cf)
      {
        v150 = CFDictionaryGetTypeID();
        if (v150 != CFGetTypeID(cf))
          goto LABEL_481;
      }
      if (!FigCFEqual())
      {
        v205 = *(const void **)(DerivedStorage + 696);
        v206 = cf;
        *(_QWORD *)(DerivedStorage + 696) = cf;
        if (!v206)
        {
LABEL_489:
          if (v205)
            CFRelease(v205);
          goto LABEL_492;
        }
LABEL_488:
        CFRetain(v206);
        goto LABEL_489;
      }
LABEL_492:
      fpfs_applyAutoSelectionCriteria(a1);
    }
    if (CFEqual(a3, CFSTR("AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections")))
    {
      if (!cf)
        goto LABEL_481;
      v151 = CFGetTypeID(cf);
      if (v151 != CFBooleanGetTypeID())
        goto LABEL_481;
      v152 = *(_BYTE *)(DerivedStorage + 704) != 0;
      v153 = CFBooleanGetValue((CFBooleanRef)cf);
      *(_BYTE *)(DerivedStorage + 704) = v153;
      if (v153 == v152)
        goto LABEL_46;
      goto LABEL_492;
    }
    if (CFEqual(a3, CFSTR("AppliesMediaSelectionCriteriaAutomatically")))
    {
      if (!cf)
        goto LABEL_481;
      v154 = CFGetTypeID(cf);
      if (v154 != CFBooleanGetTypeID())
        goto LABEL_481;
      v155 = *(unsigned __int8 *)(DerivedStorage + 705);
      v156 = CFBooleanGetValue((CFBooleanRef)cf);
      *(_BYTE *)(DerivedStorage + 705) = v156;
      if (!v156 || v155)
        goto LABEL_46;
      goto LABEL_492;
    }
    if (CFEqual(a3, CFSTR("MinRateForAudioPlayback")))
    {
      if (!cf)
      {
        v158 = *(_QWORD *)(DerivedStorage + 708);
        v159 = *(_DWORD *)(DerivedStorage + 716);
        *(_BYTE *)(DerivedStorage + 708) = 0;
        goto LABEL_495;
      }
      v157 = CFNumberGetTypeID();
      if (v157 != CFGetTypeID(cf))
        goto LABEL_481;
      v158 = *(_QWORD *)(DerivedStorage + 708);
      v159 = *(_DWORD *)(DerivedStorage + 716);
      v160 = CFNumberGetTypeID();
      if (v160 == CFGetTypeID(cf))
      {
        *(_BYTE *)(DerivedStorage + 708) = 1;
        v161 = (const __CFNumber *)cf;
        v162 = (void *)(DerivedStorage + 712);
LABEL_384:
        CFNumberGetValue(v161, kCFNumberFloat32Type, v162);
        goto LABEL_495;
      }
      goto LABEL_495;
    }
    if (CFEqual(a3, CFSTR("MaxRateForAudioPlayback")))
    {
      if (!cf)
      {
        v158 = *(_QWORD *)(DerivedStorage + 708);
        v159 = *(_DWORD *)(DerivedStorage + 716);
        *(_BYTE *)(DerivedStorage + 709) = 0;
        goto LABEL_495;
      }
      v163 = CFNumberGetTypeID();
      if (v163 != CFGetTypeID(cf))
        goto LABEL_481;
      v158 = *(_QWORD *)(DerivedStorage + 708);
      v159 = *(_DWORD *)(DerivedStorage + 716);
      v164 = CFNumberGetTypeID();
      if (v164 == CFGetTypeID(cf))
      {
        v162 = (void *)(DerivedStorage + 716);
        *(_BYTE *)(DerivedStorage + 709) = 1;
        v161 = (const __CFNumber *)cf;
        goto LABEL_384;
      }
LABEL_495:
      fpfs_handlePlayerAudibleRateRangeChangeIfNecessary(a1, v158, v159);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("AllowPixelBufferPoolSharing")))
    {
      if (!cf)
        goto LABEL_481;
      v165 = CFGetTypeID(cf);
      if (v165 != CFBooleanGetTypeID())
      {
        v166 = CFGetTypeID(cf);
        if (v166 != CFNumberGetTypeID())
          goto LABEL_481;
      }
      v167 = *(const void **)(DerivedStorage + 624);
      v168 = cf;
      *(_QWORD *)(DerivedStorage + 624) = cf;
      CFRetain(v168);
      if (v167)
        CFRelease(v167);
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("AllowOutOfBandTextTrackRendering")))
    {
      if (!cf)
        goto LABEL_481;
      v169 = CFGetTypeID(cf);
      if (v169 != CFBooleanGetTypeID())
        goto LABEL_481;
      v170 = CFBooleanGetValue((CFBooleanRef)cf);
      if (v170 == *(unsigned __int8 *)(DerivedStorage + 720))
        goto LABEL_46;
      *(_BYTE *)(DerivedStorage + 720) = v170;
      goto LABEL_244;
    }
    if (CFEqual(a3, CFSTR("MultichannelAudioStrategy")))
    {
      if (!cf)
        goto LABEL_481;
      v171 = CFStringGetTypeID();
      if (v171 != CFGetTypeID(cf))
        goto LABEL_481;
      if (!FigCFEqual()
        && (CFEqual(cf, CFSTR("MatchMultichannelTrackPreferenceToAudioDevice"))
         || CFEqual(cf, CFSTR("PreferAC3ViaExclusivePassthrough"))
         || CFEqual(cf, CFSTR("PreferExclusivePassthrough"))
         || CFEqual(cf, CFSTR("PreferStereo"))))
      {
        fpfs_setMultiAudioChannelStrategy((uint64_t)a1, cf);
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, CFSTR("BandwidthCap")))
    {
      v172 = (int)cf;
      if (cf)
      {
        v173 = CFNumberGetTypeID();
        if (v173 != CFGetTypeID(cf))
          goto LABEL_481;
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        v172 = valuePtr;
      }
      else
      {
        LODWORD(valuePtr) = 0;
      }
      *(_DWORD *)(DerivedStorage + 748) = v172;
      v207 = (uint64_t (*)(uint64_t))fpfsi_UpdateBandwidthCap;
    }
    else if (CFEqual(a3, CFSTR("PreferredMaximumBufferDuration")))
    {
      v174 = (int)cf;
      if (cf)
      {
        v175 = CFNumberGetTypeID();
        if (v175 != CFGetTypeID(cf))
          goto LABEL_481;
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        v174 = valuePtr;
        if ((valuePtr & 0x80000000) != 0)
          goto LABEL_481;
      }
      else
      {
        LODWORD(valuePtr) = 0;
      }
      *(_DWORD *)(DerivedStorage + 752) = v174;
      v207 = (uint64_t (*)(uint64_t))fpfsi_UpdateHighWaterSecs;
    }
    else
    {
      if (!CFEqual(a3, CFSTR("MaximumTrailingBufferDuration")))
      {
        if (CFEqual(a3, CFSTR("ReleaseResourcesWhenPaused")))
        {
          fpfs_SetReleaseResourcesWhenPaused((uint64_t)a1, cf == (CFTypeRef)*MEMORY[0x1E0C9AE50]);
          goto LABEL_46;
        }
        if (CFEqual(a3, CFSTR("ResourceConservationLevelWhenPaused")))
        {
          if (cf)
          {
            v178 = CFNumberGetTypeID();
            if (v178 != CFGetTypeID(cf))
              goto LABEL_481;
            LODWORD(valuePtr) = 0;
            CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
            v179 = valuePtr;
          }
          else
          {
            v179 = 0;
            LODWORD(valuePtr) = 0;
          }
          fpfs_SetResourceConservationLevelWhenPaused((uint64_t)a1, v179);
          goto LABEL_46;
        }
        if (CFEqual(a3, CFSTR("PlayerRole")))
        {
          if (cf)
          {
            if (CFEqual(cf, CFSTR("Scanning")))
            {
              v180 = (uint64_t)a1;
              v181 = 1;
            }
            else
            {
              if (!CFEqual(cf, CFSTR("PIP")))
                goto LABEL_46;
              v180 = (uint64_t)a1;
              v181 = 2;
            }
          }
          else
          {
            v180 = (uint64_t)a1;
            v181 = 0;
          }
          fpfs_SetPlayerRole(v180, v181);
          goto LABEL_46;
        }
        if (CFEqual(a3, CFSTR("LimitsBandwidthForCellularAccess")))
        {
          v182 = cf;
          if (cf)
          {
            v183 = CFBooleanGetTypeID();
            if (v183 != CFGetTypeID(cf))
              goto LABEL_481;
            v182 = cf;
          }
          *(_BYTE *)(DerivedStorage + 768) = v182 != (CFTypeRef)*MEMORY[0x1E0C9AE40];
          goto LABEL_46;
        }
        if (CFEqual(a3, CFSTR("BufferedAirPlayOutput")))
        {
          v184 = cf;
          if (cf)
          {
            v185 = FigBufferedAirPlayOutputGetTypeID();
            if (v185 != CFGetTypeID(cf))
              goto LABEL_481;
            v184 = cf;
          }
          if (*(CFTypeRef *)(DerivedStorage + 504) == v184)
            goto LABEL_46;
          v186 = CMBaseObjectGetDerivedStorage();
          if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
          }
          v187 = CMBaseObjectGetDerivedStorage();
          v188 = fpfs_getNext(v187, 0);
          if (v188)
          {
            v189 = v188;
            do
            {
              fpfs_ClearRenderChains(v189, 2u);
              v189 = fpfs_getNext(v187, v189);
            }
            while (v189);
          }
          fpfs_ResetAudioHardwareFormat((uint64_t)a1);
          v190 = *(const void **)(DerivedStorage + 504);
          v191 = cf;
          *(_QWORD *)(DerivedStorage + 504) = cf;
          if (v191)
            CFRetain(v191);
          if (v190)
            CFRelease(v190);
          fpfsi_RTCReportingUpdateBufferedAirPlayOutput(v186, *(_QWORD *)(DerivedStorage + 504) != 0);
          if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
          }
          LOBYTE(valuePtr) = 1;
LABEL_226:
          fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_handleAvailableAudioFormatChange_Apply, (uint64_t)&valuePtr);
          goto LABEL_46;
        }
        if (CFEqual(a3, CFSTR("AutomaticallyWaitsToMinimizeStalling")))
        {
          if (!cf)
            goto LABEL_481;
          v192 = CFBooleanGetTypeID();
          if (v192 != CFGetTypeID(cf))
            goto LABEL_481;
          v193 = CMBaseObjectGetDerivedStorage();
          v194 = CFBooleanGetValue((CFBooleanRef)cf);
          *(_BYTE *)(DerivedStorage + 160) = v194;
          if (v193)
          {
            fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(v193, v194);
            v194 = *(unsigned __int8 *)(DerivedStorage + 160);
          }
          if (!v194)
          {
            v195 = *(_QWORD *)(DerivedStorage + 80);
            if (v195)
              fpfs_CheckPrebufferedLevels(v195, 1, -1, 0, (uint64_t)&valuePtr);
          }
          goto LABEL_46;
        }
        if (CFEqual(a3, CFSTR("CaptionPlaybackStrategy")))
        {
          if (cf)
          {
            v196 = CFStringGetTypeID();
            if (v196 == CFGetTypeID(cf))
            {
              if (CFEqual(cf, CFSTR("CoreTextSubtitleRenderer")))
              {
                *(_BYTE *)(DerivedStorage + 461) = 1;
                goto LABEL_46;
              }
              if (CFEqual(cf, CFSTR("CaptionDisplayService")))
              {
                *(_BYTE *)(DerivedStorage + 461) = 0;
                goto LABEL_46;
              }
            }
          }
          goto LABEL_481;
        }
        if (CFEqual(a3, CFSTR("CaptionPipelineStrategy")))
        {
          if (cf)
          {
            v197 = CFStringGetTypeID();
            if (v197 == CFGetTypeID(cf))
            {
              if (CFEqual(cf, CFSTR("CFAttributedStrings")))
              {
                *(_BYTE *)(DerivedStorage + 460) = 1;
                goto LABEL_46;
              }
              if (CFEqual(cf, CFSTR("FigCaptions")))
              {
                *(_BYTE *)(DerivedStorage + 460) = 0;
                goto LABEL_46;
              }
            }
          }
          goto LABEL_481;
        }
        if (CFEqual(a3, CFSTR("AutomaticallyResumesRenderingAfterConfigurationChange")))
        {
          if (cf)
          {
            v198 = CFGetTypeID(cf);
            if (v198 == CFBooleanGetTypeID())
            {
              *(_BYTE *)(DerivedStorage + 568) = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
              goto LABEL_46;
            }
          }
          goto LABEL_481;
        }
        if (!CFEqual(a3, CFSTR("SuppressAudioRendering")))
        {
          if (!CFEqual(a3, CFSTR("VideoTargetArray")))
            goto LABEL_46;
          if (cf)
          {
            v201 = CFGetTypeID(cf);
            if (v201 != CFArrayGetTypeID())
              goto LABEL_481;
            v202 = (const __CFArray *)cf;
          }
          else
          {
            v202 = 0;
          }
          fpfs_setVideoTargetArray((uint64_t)a1, v202);
          goto LABEL_46;
        }
        if (!cf)
          goto LABEL_481;
        v199 = CFGetTypeID(cf);
        if (v199 != CFBooleanGetTypeID())
          goto LABEL_481;
        v200 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
        if (*(unsigned __int8 *)(DerivedStorage + 523) == v200)
          goto LABEL_46;
        *(_BYTE *)(DerivedStorage + 523) = v200;
LABEL_244:
        fpfs_stopResetDisturbReprepareAndResume(a1, *(const __CFArray **)(DerivedStorage + 80), 0);
        goto LABEL_46;
      }
      if (cf)
      {
        v176 = CFNumberGetTypeID();
        if (v176 != CFGetTypeID(cf))
          goto LABEL_481;
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        v177 = valuePtr;
      }
      else
      {
        v177 = -1;
        LODWORD(valuePtr) = -1;
      }
      *(_DWORD *)(DerivedStorage + 756) = v177;
      v207 = (uint64_t (*)(uint64_t))fpfsi_UpdateCacheBehindSecs;
    }
    fpfs_UpdatePlayerOverrideForAllItems(DerivedStorage, v207);
    goto LABEL_46;
  }
  return FigSignalErrorAt();
}

uint64_t fpfs_setClientVideoLayerArray(uint64_t a1, const __CFArray *a2)
{
  void *v4;
  uint64_t DerivedStorage;
  const __CFArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFArray *v10;
  __CFArray *Mutable;
  const __CFArray *v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t Count;
  const __CFArray *v16;
  CFIndex v17;
  const __CFAllocator *AllocatorForMedia;
  const __CFAllocator *v19;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v22;
  int v23;
  __CFArray *v24;
  const __CFArray *v25;
  const __CFAllocator *v26;
  uint64_t v27;
  FigVideoLayer *v28;
  FigVideoLayer *v29;
  const __CFArray *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFArray *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  _QWORD v41[3];
  CFTypeRef cf;
  CFRange v43;
  CFRange v44;

  v4 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(const __CFArray **)(DerivedStorage + 80);
  v7 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  *(_BYTE *)(DerivedStorage + 456) = 1;
  if (FigCFEqual())
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    Mutable = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    goto LABEL_43;
  }
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  v37 = v7;
  v16 = *(const __CFArray **)(DerivedStorage + 376);
  if (v16)
    v17 = CFArrayGetCount(v16);
  else
    v17 = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v12 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E0C9B378]);
    if (v12)
    {
      v40 = (const void *)a1;
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
          v22 = *(const __CFArray **)(DerivedStorage + 376);
          if (!v22
            || (v43.location = 0,
                v43.length = v17,
                v23 = CFArrayContainsValue(v22, v43, ValueAtIndex),
                v24 = Mutable,
                !v23))
          {
            v24 = v12;
          }
          CFArrayAppendValue(v24, ValueAtIndex);
        }
      }
      v44.length = CFArrayGetCount(v12);
      v44.location = 0;
      CFArrayAppendArray(Mutable, v12, v44);
      a1 = (uint64_t)v40;
      fpfs_ensureTransaction((uint64_t)v40, (uint64_t *)&cf);
      v13 = CFRetain(v40);
      fpfs_disassociatePlayerVideoLayer((uint64_t)v40, 1);
      v38 = *(_QWORD *)(DerivedStorage + 376);
      v39 = *(_QWORD *)(DerivedStorage + 384);
      *(_QWORD *)(DerivedStorage + 384) = 0;
      v25 = (const __CFArray *)CFRetain(Mutable);
      *(_QWORD *)(DerivedStorage + 376) = v25;
      if (v25 && CFArrayGetCount(v25) >= 1)
      {
        v35 = v6;
        v36 = v4;
        v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v10 = CFArrayCreateMutable(v26, Count, MEMORY[0x1E0C9B378]);
        if (Count >= 1)
        {
          v27 = Count;
          while (1)
          {
            v28 = -[FigVideoLayer initWithDeferredTransaction:]([FigVideoLayer alloc], "initWithDeferredTransaction:", *(_QWORD *)(DerivedStorage + 816));
            if (!v28)
              break;
            v29 = v28;
            if (*(_BYTE *)(DerivedStorage + 392))
              FBLSupportAppendDeferredTransactionChangeToSetAllowsDisplayCompositing(*(const void **)(DerivedStorage + 816), v28, 0, (uint64_t)"fpfs_setClientVideoLayerArray");
            CFArrayAppendValue(v10, v29);
            if (!--v27)
              goto LABEL_25;
          }
          v14 = 4294954434;
          v4 = v36;
          a1 = (uint64_t)v40;
          goto LABEL_35;
        }
LABEL_25:
        FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(DerivedStorage + 816), *(_QWORD *)(DerivedStorage + 384), (uint64_t)"fpfs_setClientVideoLayerArray");
        if (v10)
        {
          *(_QWORD *)(DerivedStorage + 384) = CFRetain(v10);
          CFRelease(v10);
          v30 = *(const __CFArray **)(DerivedStorage + 384);
        }
        else
        {
          v30 = 0;
          *(_QWORD *)(DerivedStorage + 384) = 0;
        }
        v6 = v35;
        v4 = v36;
        a1 = (uint64_t)v40;
        FPSupport_AppendDeferredTransactionChangeForAttachingFigVideoLayersToClientLayers(*(const void **)(DerivedStorage + 816), *(const __CFArray **)(DerivedStorage + 376), v30, (uint64_t)"fpfs_setClientVideoLayerArray");
      }
      if (*(_QWORD *)(DerivedStorage + 80))
        fpfsi_removeLayerSync();
      v31 = Count - v17;
      if (!v31
        || (v41[2] = 0,
            v41[0] = CAImageQueueGetTypeID(),
            v41[1] = v31,
            v32 = fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoOutputsChanged, (uint64_t)v41), !(_DWORD)v32))
      {
        v8 = v39;
        if (v6)
        {
          v33 = fpfsi_assignCAImageQueuesToLayers(v6);
          if ((_DWORD)v33)
          {
            v14 = v33;
            v10 = 0;
            goto LABEL_42;
          }
          fpfs_createOrUpdateLayerSync(a1);
          if (!*(_QWORD *)(v37 + 688))
            FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)fpfsi_syncMomentSourceCallback, (uint64_t)v6, *(const void **)(v37 + 576), *(NSObject **)(v37 + 600), (uint64_t *)(v37 + 688));
        }
        v10 = 0;
        v14 = 0;
        goto LABEL_42;
      }
      v14 = v32;
      v10 = 0;
LABEL_35:
      v8 = v39;
LABEL_42:
      v9 = v38;
      goto LABEL_43;
    }
    v14 = FigSignalErrorAt();
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v14 = FigSignalErrorAt();
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v12 = 0;
  }
  v13 = 0;
LABEL_43:
  FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(DerivedStorage + 816), v9, (uint64_t)"fpfs_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(DerivedStorage + 816), v8, (uint64_t)"fpfs_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(DerivedStorage + 816), (uint64_t)v10, (uint64_t)"fpfs_setClientVideoLayerArray");
  fpfs_commitTransaction(a1, (uint64_t)cf);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v12)
    CFRelease(v12);
  if (Mutable)
    CFRelease(Mutable);
  if (v13)
    CFRelease(v13);
  objc_autoreleasePoolPop(v4);
  return v14;
}

uint64_t fpfs_setVolume(const void *a1, void *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *Next;
  const __CFArray *v6;
  CFTypeID v7;
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float valuePtr;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(DerivedStorage, 0);
  valuePtr = 0.0;
  if (!a2)
    return FigSignalErrorAt();
  v6 = Next;
  v7 = CFGetTypeID(a2);
  if (v7 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)a2, kCFNumberFloat32Type, &valuePtr);
  if (valuePtr != *(float *)(DerivedStorage + 104))
  {
    values = a2;
    keys[0] = CFSTR("AVController_Volume");
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v9 = CFDictionaryCreate(AllocatorForMedia, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(float *)(DerivedStorage + 104) = valuePtr;
    if (v6)
    {
      v10 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1040);
      if (v10)
      {
        v11 = 0;
        do
        {
          v12 = *(_QWORD *)(v10 + 96);
          if (v12)
          {
            if (*(_DWORD *)(v10 + 32) == 1936684398 && v12 != v11)
            {
              fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v12, (uint64_t)CFSTR("SoftwareVolume1"), (uint64_t)a2);
              v11 = *(_QWORD *)(v10 + 96);
            }
          }
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
    }
    fpfs_EnqueueNotification(a1, CFSTR("VolumeDidChange"), a1, v9);
  }
  return 0;
}

uint64_t fpfs_setMuted(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeID TypeID;
  int Value;
  int v8;
  uint64_t result;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  const void **v13;
  const void *v14;

  v14 = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294954436;
  v5 = DerivedStorage;
  TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(a2))
    return 4294954436;
  Value = CFBooleanGetValue((CFBooleanRef)a2);
  if (*(unsigned __int8 *)(v5 + 521) == Value)
    return 0;
  v8 = Value;
  *(_BYTE *)(v5 + 521) = Value;
  result = fpfsi_UpdateResourceSpecifierOnResourceArbiter(*(_QWORD *)(v5 + 80));
  if (!(_DWORD)result)
  {
    result = fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_setMutedApply, (uint64_t)&v14);
    if (!(_DWORD)result)
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v12 = Mutable;
      v13 = (const void **)MEMORY[0x1E0C9AE40];
      if (v8)
        v13 = (const void **)MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(Mutable, CFSTR("CurrentMuted"), *v13);
      FigPropertyStorageSetValue(*(_QWORD *)(v5 + 16), CFSTR("PlayerMuted"), v14);
      fpfs_EnqueueNotification(a1, CFSTR("MutedDidChange"), a1, v12);
    }
  }
  return result;
}

uint64_t fpfs_setEQPreset(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 172) = a2;
  return fpfs_applyEQPreset(a1, 0, 0);
}

void fpfs_AdvanceToNextItemIfNecessary()
{
  uint64_t DerivedStorage;
  const __CFArray *Next;
  const __CFArray *v2;
  uint64_t v3;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v6;
  CMTimeEpoch v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex Count;
  uint64_t v11;
  CMTime v12;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime time1;
  CMTimeValue v17;
  CMTimeScale v18;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(DerivedStorage, 0);
  if (Next)
  {
    v2 = Next;
    v3 = CMBaseObjectGetDerivedStorage();
    fpfs_GetNextTimeToPlay(v3, 0, (uint64_t)&time1);
    value = time1.value;
    flags = time1.flags;
    timescale = time1.timescale;
    epoch = time1.epoch;
    fpfsi_PredictedEndTime((uint64_t)v2, &time1);
    v17 = time1.value;
    v6 = time1.flags;
    v18 = time1.timescale;
    v7 = time1.epoch;
    v8 = *(unsigned int *)(DerivedStorage + 632);
    v9 = *(_QWORD *)(DerivedStorage + 80);
    Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
    v11 = v9 ? Count + 1 : Count;
    if (!FigPlaybackGetEffectiveActionAtEnd(v8, v11))
    {
      if ((flags & 0x1F) == 3 || (v6 & 0x1F) == 3)
      {
        memset(&time1, 0, sizeof(time1));
        rhs.epoch = v7;
        lhs.value = value;
        lhs.timescale = timescale;
        lhs.flags = flags;
        lhs.epoch = epoch;
        rhs.value = v17;
        rhs.timescale = v18;
        rhs.flags = v6;
        CMTimeSubtract(&time, &lhs, &rhs);
        CMTimeAbsoluteValue(&time1, &time);
        CMTimeMake(&v12, 1, 1000000000);
        lhs = time1;
        if (CMTimeCompare(&lhs, &v12) <= 0)
          goto LABEL_10;
      }
      time1.value = value;
      time1.timescale = timescale;
      time1.flags = flags;
      time1.epoch = epoch;
      lhs.value = v17;
      lhs.timescale = v18;
      lhs.flags = v6;
      lhs.epoch = v7;
      if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0)
LABEL_10:
        fpfs_StopPlayingItem(DerivedStorage, v2, 0);
    }
  }
}

void fpfs_setCachedRouteInfo()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t AllocatorForMedia;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, _QWORD, uint64_t, CFBooleanRef *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, _QWORD, uint64_t, CFBooleanRef *);
  Boolean Value;
  CFBooleanRef v13;
  CFBooleanRef BOOLean;

  v13 = 0;
  BOOLean = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 536))
  {
    Value = 0;
    *(_BYTE *)(DerivedStorage + 561) = 0;
    goto LABEL_17;
  }
  if (FigAudioCodecTypeIsDecodable())
  {
    v1 = *(_QWORD *)(DerivedStorage + 536);
    AllocatorForMedia = FigGetAllocatorForMedia();
    if (v1)
    {
      v3 = AllocatorForMedia;
      v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v4)
      {
        v5 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFBooleanRef *))(v4 + 48);
        if (v5)
        {
          if (!v5(v1, *MEMORY[0x1E0D49968], v3, &BOOLean) && BOOLean != 0)
            *(_BYTE *)(DerivedStorage + 561) = CFBooleanGetValue(BOOLean);
        }
      }
    }
  }
  v7 = *(_QWORD *)(DerivedStorage + 536);
  v8 = FigGetAllocatorForMedia();
  if (v7)
  {
    v9 = v8;
    v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v10)
    {
      v11 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFBooleanRef *))(v10 + 48);
      if (v11)
      {
        if (!v11(v7, *MEMORY[0x1E0D49478], v9, &v13))
        {
          Value = CFBooleanGetValue(v13);
LABEL_17:
          *(_BYTE *)(DerivedStorage + 562) = Value;
        }
      }
    }
  }
  if (BOOLean)
    CFRelease(BOOLean);
  if (v13)
    CFRelease(v13);
}

void fpfs_FetchClientBundleIdentifierFromAudioSession(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  NSObject *global_queue;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 536))
  {
    v3 = DerivedStorage;
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    if (v4)
    {
      v5 = v4;
      if (a1)
        v6 = CFRetain(a1);
      else
        v6 = 0;
      *v5 = v6;
      v7 = *(CFTypeRef *)(v3 + 536);
      if (v7)
        v7 = CFRetain(v7);
      v5[1] = v7;
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async_f(global_queue, v5, (dispatch_function_t)fpfs_FetchClientBundleIdentifierFromAudioSessionDispatch);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t fpfsi_updateNeroChange(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40) || !*(_QWORD *)(DerivedStorage + 56))
    return 0;
  v4 = v3;
  result = fpfsi_ConfigureAlternateSelectionBossForNeroSupportedVideoFormat(DerivedStorage, *(unsigned __int8 *)(v3 + 462));
  if (!(_DWORD)result)
  {
    result = FigAlternateFilterMonitorForHDCPNeedsNewExternalProtectionMonitorIfNecessary(*(void **)(DerivedStorage + 56), *(unsigned __int8 *)(v4 + 462), *(const void **)(v4 + 488));
    if (!(_DWORD)result)
    {
      fpfsi_ConfigurePumpForPlayerAndRelock();
      result = fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 0);
      if (!(_DWORD)result)
      {
        fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, (const __CFArray *)a1, 1);
        return 0;
      }
    }
  }
  return result;
}

uint64_t fpfs_RTCReportingSetSendingVisualsToNero(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  result = (uint64_t)fpfs_getNext(a1, 0);
  if (result)
  {
    result = CMBaseObjectGetDerivedStorage();
    v2 = *(_QWORD *)(result + 2536);
    if (v2)
    {
      result = CMBaseObjectGetVTable();
      v3 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(result + 16)
                                                                                          + 56);
      if (v3)
        return v3(v2, CFSTR("playerStats"), CFSTR("ExtDisplay"), 1, 0);
    }
  }
  return result;
}

uint64_t fpfs_updatePlayerActiveState(void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  const __CFAllocator *AllocatorForMedia;
  CFTypeRef v8;
  void (*v9)(void *, CFTypeRef, float);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 32) != a2)
  {
    v5 = DerivedStorage;
    fpfs_LockMutexWithCaller((uint64_t)a1);
    if ((a2 - 1) > 1)
    {
      cf[0] = 0;
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      FPSupport_CreateSetRateOptions(AllocatorForMedia, 26, (CFMutableDictionaryRef *)cf);
      v8 = cf[0];
      v9 = *(void (**)(void *, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v9)
        v9(a1, v8, 0.0);
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
      *(_DWORD *)(v5 + 32) = 0;
      if (!fpfsi_UpdateResourceSpecifierOnResourceArbiter(*(_QWORD *)(v5 + 80)))
      {
        fpfs_UpdatePlayerOverrideForAllItems(v5, (uint64_t (*)(uint64_t))fpfsi_UpdateActiveStateForPlaybackItem);
        fpfs_releaseTransitionImageQueuesAndSlots();
        fpfs_sendEmptyConfigurationToEachVideoTarget((uint64_t)a1, *(const __CFArray **)(v5 + 432));
        fpfs_ResetAudioHardwareFormat((uint64_t)a1);
      }
    }
    else
    {
      v6 = *(_DWORD *)(v5 + 32);
      *(_DWORD *)(v5 + 32) = a2;
      *(_QWORD *)(v5 + 40) = FigGetUpTimeNanoseconds();
      if (v6 == 1)
      {
        if (*(_QWORD *)(v5 + 536))
        {
          v10 = *(_QWORD *)(v5 + 80);
          if (v10)
          {
            v11 = *(_QWORD *)(v5 + 544);
            if (v11)
            {
              if (!*(_QWORD *)(v5 + 504))
              {
                fpfsi_setAudioSessionPreferredAudioHardwareFormat((uint64_t)a1, v10, v11);
                if (FigCFEqual())
                {
                  if (*(_BYTE *)(v5 + 560))
                  {
                    v13 = *(_QWORD *)(v5 + 552);
                    if (v13)
                    {
                      if (!FigAudioSessionSetMXSessionProperty(*(_QWORD *)(v5 + 536), *MEMORY[0x1E0D49AC0], v13))
                      {
                        if (dword_1EE2A2A88)
                        {
                          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                        }
                        *(_BYTE *)(v5 + 560) = 0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else if (!v6
             && !fpfsi_UpdateResourceSpecifierOnResourceArbiter(*(_QWORD *)(v5 + 80))
             && !fpfs_UpdatePlayerOverrideForAllItems(v5, (uint64_t (*)(uint64_t))fpfsi_UpdateActiveStateForPlaybackItem)&& !*(_QWORD *)(v5 + 80))
      {
        fpfs_PullNextItem(a1);
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(a1);
  }
  return 0;
}

const __CFArray *fpfs_DoAnyItemsHaveFairPlayEncryptedContent()
{
  uint64_t DerivedStorage;
  const __CFArray *result;
  const __CFArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AllocatorForMedia;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, uint64_t, uint64_t *);
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = fpfs_getNext(DerivedStorage, 0);
  if (result)
  {
    v2 = result;
    v3 = *MEMORY[0x1E0C9AE40];
    v4 = *MEMORY[0x1E0C9AE50];
    do
    {
      v12 = v3;
      if (DerivedStorage)
      {
        v5 = CMBaseObjectGetDerivedStorage();
        v6 = v3;
        if (!FigRetainProxyIsInvalidated())
        {
          v7 = *(_QWORD *)(v5 + 928);
          v6 = v3;
          if (v7)
          {
            AllocatorForMedia = FigGetAllocatorForMedia();
            FigBytePumpGetFigBaseObject(v7);
            v10 = v9;
            v11 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
            v6 = v3;
            if (v11)
            {
              v11(v10, CFSTR("FBP_HasFairPlayEncryptedContent"), AllocatorForMedia, &v12);
              v6 = v12;
            }
          }
        }
      }
      else
      {
        FigSignalErrorAt();
        v6 = v3;
      }
      result = fpfs_getNext(DerivedStorage, v2);
      if (v6 == v4)
        break;
      v2 = result;
    }
    while (result);
  }
  return result;
}

uint64_t fpfsi_updateDisplayListOnCryptors()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, const __CFString *, uint64_t);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v2)
    return 0;
  v3 = v1;
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 384);
    if (!v4)
      goto LABEL_10;
    v5 = *(_QWORD *)(v3 + 672);
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v6)
      return 4294954514;
    result = v6(v4, CFSTR("DisplayList"), v5);
    if ((result + 12785) >= 2 && (_DWORD)result != 0)
      return result;
LABEL_10:
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
}

uint64_t fpfsi_updateDisplayListForVideoRangeMonitors()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, const __CFString *, uint64_t);
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = v1;
  v3 = DerivedStorage[11];
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 672);
    v5 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v5)
      return 4294954514;
    result = v5(v3, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v4);
    if ((_DWORD)result)
      return result;
  }
  v7 = DerivedStorage[10];
  if (v7)
  {
    v8 = *(_QWORD *)(v2 + 672);
    v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v9)
      return 4294954514;
    result = v9(v7, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v8);
    if ((_DWORD)result)
      return result;
  }
  v10 = DerivedStorage[8];
  if (!v10)
    goto LABEL_10;
  v11 = *(_QWORD *)(v2 + 672);
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v12)
    return 4294954514;
  result = v12(v10, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v11);
  if ((_DWORD)result)
    return result;
LABEL_10:
  v13 = DerivedStorage[9];
  if (v13)
  {
    v14 = *(_QWORD *)(v2 + 672);
    v15 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v15)
      return v15(v13, CFSTR("AlternateFilterMonitorProperty_DisplayList"), v14);
    return 4294954514;
  }
  return 0;
}

void fpfs_handlePlayerAudibleRateRangeChangeIfNecessary(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  const __CFArray *Next;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  float v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Next = fpfs_getNext(DerivedStorage, 0);
  v8 = (uint64_t)Next;
  v9 = *(_QWORD *)(DerivedStorage + 708);
  v10 = *(int *)(DerivedStorage + 716);
  if (((v9 ^ a2) & 0xFF00) != 0)
    goto LABEL_18;
  v11 = (v9 ^ a2) != 0;
  if (*(float *)&a3 != *(float *)&v10)
    v11 = 1;
  if (*((float *)&a2 + 1) != *((float *)&v9 + 1))
    v11 = 1;
  if (v11)
  {
LABEL_18:
    if (Next)
    {
      CMBaseObjectGetDerivedStorage();
      v12 = *(float *)(DerivedStorage + 108);
      if (v12 <= 2.0 && v12 >= 0.0)
      {
        if (fpfs_FirstRenderingTrackofType(v8, 1936684398))
        {
          v19 = 0;
          v18 = 0;
          v17 = 0;
          v16 = 0;
          v15 = 0;
          v14 = 0;
          fpfsi_DetermineRateSnapping(v8, (uint64_t)&v18);
          v13 = fpfs_ConfigureRatePlan(a2, a3, v18, v19, (uint64_t)&v16, *(float *)(DerivedStorage + 108), *(float *)(DerivedStorage + 108));
          if (v13 != fpfs_ConfigureRatePlan(v9, v10, v18, v19, (uint64_t)&v14, *(float *)(DerivedStorage + 108), *(float *)(DerivedStorage + 108))|| *((float *)&v16 + 1) != *((float *)&v14 + 1)|| *(float *)&v16 != *(float *)&v14|| v17 != v15)
          {
            fpfs_stopResetDisturbReprepareAndResume(a1, *(const __CFArray **)(DerivedStorage + 80), 0);
          }
        }
      }
    }
  }
}

uint64_t fpfs_setMultiAudioChannelStrategy(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  char v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 728);
  *(_QWORD *)(DerivedStorage + 728) = a2;
  if (a2)
    CFRetain(a2);
  if (v5)
    CFRelease(v5);
  if (CFEqual(a2, CFSTR("PreferExclusivePassthrough")) || CFEqual(a2, CFSTR("PreferAC3ViaExclusivePassthrough")))
    FPSupport_ReleasePassthroughHelper();
  v7 = 0;
  return fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_handleAvailableAudioFormatChange_Apply, (uint64_t)&v7);
}

uint64_t fpfs_UpdatePlayerOverrideForAllItems(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  const __CFAllocator *AllocatorForMedia;
  CFArrayRef Copy;
  const __CFArray *v10;
  CFIndex v11;
  const void *ValueAtIndex;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 80))
  {
    v4 = a2(a1);
    if ((_DWORD)v4)
      return v4;
  }
  v5 = *(const __CFArray **)(a1 + 72);
  if (!v5)
    return 0;
  Count = CFArrayGetCount(v5);
  v7 = Count - 1;
  if (Count < 1)
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Copy = CFArrayCreateCopy(AllocatorForMedia, *(CFArrayRef *)(a1 + 72));
  if (Copy)
  {
    v10 = Copy;
    v11 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v10, v11);
      v13 = ((uint64_t (*)(uint64_t, const void *))a2)(a1, ValueAtIndex);
      if ((_DWORD)v13)
        break;
    }
    while (v7 != v11++);
    CFRelease(v10);
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t fpfs_SetReleaseResourcesWhenPaused(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 760) == a2)
    return 0;
  v4 = DerivedStorage;
  *(_BYTE *)(DerivedStorage + 760) = a2;
  result = *(_QWORD *)(DerivedStorage + 80);
  if (result)
  {
    v6 = CMBaseObjectGetDerivedStorage();
    if (!fpfs_shouldReleaseRenderChainForPausing(*(_QWORD *)(v4 + 80)))
      return 0;
    if (!*(_BYTE *)(v6 + 464))
      return 0;
    result = fpfsi_ReleaseRenderChainsForPausing(*(const void **)(v4 + 80));
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

uint64_t fpfs_SetResourceConservationLevelWhenPaused(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  int v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_DWORD *)(DerivedStorage + 764);
  if (v6 == a2)
    return 0;
  *(_DWORD *)(DerivedStorage + 764) = a2;
  return fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_setAndPerformResourceConservation, (uint64_t)&v6);
}

uint64_t fpfs_SetPlayerRole(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  int v5;
  uint64_t v6;
  uint64_t (*v7)(const __CFArray *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(DerivedStorage + 808);
  if (v5 != a2
    && ((v6 = DerivedStorage,
         *(_DWORD *)(DerivedStorage + 808) = a2,
         fpfsi_UpdateResourceSpecifierOnResourceArbiter(*(_QWORD *)(DerivedStorage + 80)),
         v7 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_EnsureIFrameModeForScanningPlayer,
         a2 == 1)
     || v5 == 1
     || (v7 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_EnsureVideoModeForPIPPlayer, a2 == 2)
     || v5 == 2))
  {
    return fpfs_PlayQueueCallForEachItem(a1, v7, v6 + 808);
  }
  else
  {
    return 0;
  }
}

uint64_t fpfsi_RTCReportingUpdateBufferedAirPlayOutput(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);

  if (result)
  {
    v2 = *(_QWORD *)(result + 2536);
    if (v2)
    {
      result = CMBaseObjectGetVTable();
      v4 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16)
                                                                                         + 56);
      if (v4)
        return v4(v2, CFSTR("playerStats"), CFSTR("BufferedAirPlay"), a2, 0);
    }
  }
  return result;
}

uint64_t fpfs_setVideoTargetArray(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v7;
  CFIndex v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  __CFArray *v13;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v16;
  CFIndex j;
  const void *v18;
  uint64_t TypeID;
  CFIndex v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  TypeID = 0;
  v21 = 0;
  v22 = 0;
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = *(const __CFArray **)(DerivedStorage + 432);
  if (v7)
    v8 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 432));
  else
    v8 = 0;
  if (FigCFEqual())
    return 0;
  if (Count)
    v10 = a2;
  else
    v10 = 0;
  if (v8 < 1)
  {
    v13 = 0;
  }
  else
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return FigSignalErrorAt();
    v13 = Mutable;
    for (i = 0; i != v8; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
      if (!FigCFArrayContainsValue())
      {
        CFArrayAppendValue(v13, ValueAtIndex);
        fpfs_traceVideoTargetEvent(a1, (uint64_t)ValueAtIndex);
      }
    }
  }
  v16 = *(const void **)(DerivedStorage + 432);
  *(_QWORD *)(DerivedStorage + 432) = v10;
  if (v10)
    CFRetain(v10);
  if (v16)
    CFRelease(v16);
  if (Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      v18 = CFArrayGetValueAtIndex(v10, j);
      fpfs_traceVideoTargetEvent(a1, (uint64_t)v18);
    }
  }
  if (v13 && CFArrayGetCount(v13) > 0)
  {
    fpfs_sendEmptyConfigurationToEachVideoTarget(a1, v13);
    fpfs_removeFVTNotificationListeners(v13);
    fpfs_removeFVTNotificationListeners(v13);
  }
  else
  {
    fpfs_addFVTNotificationListeners(v10);
    fpfs_addFVTNotificationListeners(v10);
  }
  fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_HandleResolutionCapOrDisplaySizeChange, 0);
  fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleFVTClientRenderOptionChanged, 0);
  fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoLayoutPreferenceChanged, 0);
  fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_UpdateVenueDescriptionMetadataSupplier, 0);
  TypeID = FigVideoTargetGetTypeID();
  v21 = Count - v8;
  v9 = fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoOutputsChanged, (uint64_t)&TypeID);
  if (v13)
    CFRelease(v13);
  return v9;
}

uint64_t fpfsi_setMutedApply(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 522))
    return 0;
  v5 = *(_QWORD *)(DerivedStorage + 1040);
  if (!v5)
    return 0;
  v6 = 0;
  result = 0;
  v7 = *a2;
  do
  {
    v8 = *(_QWORD *)(v5 + 96);
    if (v8)
    {
      if (*(_DWORD *)(v5 + 32) == 1936684398 && v8 != v6)
      {
        result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(_QWORD *)(v5 + 96), (uint64_t)CFSTR("Muted"), v7);
        v6 = *(_QWORD *)(v5 + 96);
      }
    }
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5);
  return result;
}

void fpfs_FetchClientBundleIdentifierFromAudioSessionDispatch(const void **a1)
{
  const void *v2;
  const void *v3;
  uint64_t AllocatorForMedia;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(const void *, _QWORD, uint64_t, CFTypeRef *);
  uint64_t DerivedStorage;
  const void *v9;
  CFTypeRef v10;
  CFTypeRef cf;

  v2 = *a1;
  v3 = a1[1];
  cf = 0;
  AllocatorForMedia = FigGetAllocatorForMedia();
  if (v3)
  {
    v5 = AllocatorForMedia;
    v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v6)
    {
      v7 = *(void (**)(const void *, _QWORD, uint64_t, CFTypeRef *))(v6 + 48);
      if (v7)
      {
        v7(v3, *MEMORY[0x1E0D497D0], v5, &cf);
        if (cf)
        {
          fpfs_LockMutexWithCaller((uint64_t)v2);
          DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (!*(_BYTE *)(DerivedStorage + 51))
          {
            v9 = *(const void **)(DerivedStorage + 528);
            v10 = cf;
            *(_QWORD *)(DerivedStorage + 528) = cf;
            if (v10)
              CFRetain(v10);
            if (v9)
              CFRelease(v9);
          }
          fpfs_UnlockWithCaller();
        }
      }
    }
    CFRelease(v3);
  }
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t fpfsi_UpdateActiveStateForPlaybackItem(uint64_t a1, CFTypeRef cf)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, _QWORD);
  uint64_t updated;
  __int128 v10;
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t);
  const void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  dispatch_time_t v23;
  NSObject *global_queue;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (!cf)
    return FigSignalErrorAt();
  CFRetain(cf);
  if (!a1)
  {
    updated = FigSignalErrorAt();
LABEL_54:
    v21 = updated;
    goto LABEL_46;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigRetainProxyIsInvalidated())
  {
    if (*(_DWORD *)(a1 + 32))
    {
      v5 = *(_QWORD *)(DerivedStorage + 2536);
      if (v5)
      {
        v6 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
        if (v6)
          v6(v5, 0);
      }
      if (*(_QWORD *)(DerivedStorage + 928))
      {
        v7 = *(_QWORD *)(DerivedStorage + 2248);
        if (v7)
        {
          v8 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v8)
            v8(v7, CFSTR("FNCM_ItemInactive"), *MEMORY[0x1E0C9AE40]);
        }
        updated = fpfsi_CoordinateWithAssetDownloader();
        if (!(_DWORD)updated)
        {
          updated = fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList((const __CFArray *)cf, 0);
          if (!(_DWORD)updated)
          {
            updated = fpfsi_handleAvailableAudioFormatChange((const __CFArray *)cf, 0, 0);
            if (!(_DWORD)updated)
            {
              if (!*(_BYTE *)(DerivedStorage + 532)
                || (v10 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16),
                    v30 = *MEMORY[0x1E0CA2E40],
                    v31 = v10,
                    v32 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32),
                    fpfsi_getPumpAvailableTimeRange((CMTime *)DerivedStorage, &v30))
                || (BYTE12(v30) & 1) != 0
                && (BYTE4(v32) & 1) != 0
                && !*((_QWORD *)&v32 + 1)
                && (*((_QWORD *)&v31 + 1) & 0x8000000000000000) == 0)
              {
                fpfsi_SeekToCurrentTime((const __CFArray *)cf);
              }
              fpfs_FlowControlPump(DerivedStorage, 0xFFu, 1, 0);
              v21 = 0;
              fpfsi_RTCReportingReportIRATEventIfNeeded(DerivedStorage, 800);
              v22 = *(_QWORD *)(DerivedStorage + 2472);
              if (v22)
                FigFramePrefetcherActivate(v22);
              goto LABEL_46;
            }
          }
        }
        goto LABEL_54;
      }
      goto LABEL_51;
    }
    if (!*(_QWORD *)(DerivedStorage + 928))
    {
      v21 = 0;
LABEL_43:
      v27 = *(_QWORD *)(DerivedStorage + 2536);
      if (v27)
      {
        v28 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
        if (v28)
          v28(v27);
      }
      goto LABEL_46;
    }
    v12 = *(_QWORD *)(DerivedStorage + 2248);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v13)
        v13(v12, CFSTR("FNCM_ItemInactive"), *MEMORY[0x1E0C9AE50]);
    }
    v14 = fpfs_FlowControlPump(DerivedStorage, 0xFFu, 0, 0);
    if (!(_DWORD)v14)
    {
      fpfsi_RTCReportingReportIRATEventIfNeeded(DerivedStorage, 801);
      v15 = *(_QWORD *)(DerivedStorage + 928);
      v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
      if (v16)
        v16(v15);
      v17 = *(_QWORD *)(DerivedStorage + 928);
      v18 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
      if (v18)
        v18(v17);
      v19 = *(const void **)(CMBaseObjectGetDerivedStorage() + 16);
      if (v19)
        v20 = (void *)CFRetain(v19);
      else
        v20 = 0;
      v23 = dispatch_time(0, 10000000000);
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_after_f(v23, global_queue, v20, (dispatch_function_t)fpfsi_AllowCoordinatedDownloadsToContinueAfterDelayDispatchFunc);
      CMBaseObjectGetDerivedStorage();
      if (!*(_DWORD *)(DerivedStorage + 2284))
        *(_DWORD *)(DerivedStorage + 2284) = 5;
      v25 = *(_QWORD *)(DerivedStorage + 1696);
      if (v25 && FigAlternateIsIFrameOnly(v25))
      {
        fpfs_GetTime(DerivedStorage, (uint64_t)&v29);
        v14 = fpfs_PrepareToReuseLastIFrameTrack((uint64_t)cf, &v29, 0);
        if ((_DWORD)v14)
          goto LABEL_52;
      }
      else
      {
        fpfs_PrepareForSeek((const __CFArray *)cf, 0xFFu, 1);
      }
      v26 = CMBaseObjectGetDerivedStorage();
      fpfs_ClearRenderChains((const __CFArray *)cf, 0xFFu);
      *(_QWORD *)(v26 + 772) = 0;
      fpfs_cleanupAllImageQueues(cf, 0);
      fpfsi_EnqueuePlayableRangeChangedNotification(cf);
    }
LABEL_52:
    v21 = v14;
    goto LABEL_43;
  }
LABEL_51:
  v21 = 0;
LABEL_46:
  CFRelease(cf);
  return v21;
}

void fpfsi_AllowCoordinatedDownloadsToContinueAfterDelayDispatchFunc(const void *a1)
{
  uint64_t UpTimeNanoseconds;
  CFTypeRef v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t AllocatorForMedia;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, __CFString *, _QWORD);
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef cf;
  CFTypeRef v20;

  v17 = 0;
  v18 = 0;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer((uint64_t)a1, &v18, &v17))
  {
    v3 = v18;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_DWORD *)(DerivedStorage + 32)
      && (double)(UpTimeNanoseconds + 100000000) + -10.0 > (double)*(uint64_t *)(DerivedStorage + 40))
    {
      v5 = CMBaseObjectGetDerivedStorage();
      v6 = v5;
      cf = 0;
      v20 = 0;
      if (*(_QWORD *)(v5 + 928))
      {
        if (*(_BYTE *)(v5 + 2865))
        {
          if (!FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(_QWORD *)(v5 + 32), &cf)
            && cf != 0)
          {
            v8 = *(_QWORD *)(v6 + 928);
            AllocatorForMedia = FigGetAllocatorForMedia();
            FigBytePumpGetFigBaseObject(v8);
            v11 = v10;
            v12 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
            if (v12)
            {
              if (!v12(v11, CFSTR("FBP_SegmentCache"), AllocatorForMedia, &v20) && v20 != 0)
              {
                FigBytePumpGetFigBaseObject(*(_QWORD *)(v6 + 928));
                v15 = v14;
                v16 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                if (v16)
                {
                  if (!v16(v15, CFSTR("FBP_SegmentCache"), 0))
                    FigStreamingCacheInvalidate((uint64_t)v20);
                }
              }
            }
          }
        }
      }
      else
      {
        FigSignalErrorAt();
      }
      if (*(_BYTE *)(v6 + 2865))
      {
        FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(v6 + 32));
        *(_BYTE *)(v6 + 2865) = 0;
      }
      if (cf)
        CFRelease(cf);
      if (v20)
        CFRelease(v20);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v3);
  }
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
  if (a1)
    CFRelease(a1);
}

uint64_t fpfsi_EnsureIFrameModeForScanningPlayer(const __CFArray *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  v4 = v3;
  v5 = fpfsi_ConfigureAlternateSelectionBossForScanningRole();
  if ((_DWORD)v5)
  {
    v6 = v5;
    goto LABEL_4;
  }
  v6 = FigAlternateSelectionBossApplyFilters(*(const void **)(DerivedStorage + 40));
  if ((_DWORD)v6)
LABEL_4:
    fpfs_StopPlayingItemWithOSStatus(v4, a1, v6);
  return v6;
}

uint64_t fpfsi_EnsureVideoModeForPIPPlayer(const __CFArray *a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  _BOOL4 v5;
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *a2 == 2;
  if (CelestialShouldLimitHDRConcurrentPlayback())
  {
    v6 = fpfsi_SwitchBetweenHDRAndSDR((uint64_t)a1, v5);
    if ((_DWORD)v6)
      goto LABEL_5;
  }
  if (!CelestialShouldLimit4kConcurrentPlayback())
    return 0;
  v6 = fpfsi_SwitchBetween4kAndHD((uint64_t)a1, v5);
  if ((_DWORD)v6)
LABEL_5:
    fpfs_StopPlayingItemWithOSStatus(DerivedStorage, a1, v6);
  return v6;
}

void fpfs_traceVideoTargetEvent(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  unsigned int (*v3)(uint64_t, __CFString *, _QWORD, CFStringRef *);
  CFStringRef theString;
  char __dst[8];
  char buffer[8];
  __int16 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  theString = 0;
  v8 = 0;
  *(_QWORD *)buffer = 1280070990;
  CMBaseObject = FigVideoTargetGetCMBaseObject(a2);
  v3 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v3)
  {
    if (!v3(CMBaseObject, CFSTR("ReceiverLoggingIdentifier"), *MEMORY[0x1E0C9AE00], &theString) && theString != 0)
      CFStringGetCString(theString, buffer, 10, 0x600u);
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    strncpy(__dst, buffer, 8uLL);
    kdebug_trace();
  }
  if (theString)
    CFRelease(theString);
}

CFIndex fpfs_addFVTNotificationListeners(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex result;

  v2 = 0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (result = CFArrayGetCount(theArray); v2 < result; result = 0)
  {
    CFArrayGetValueAtIndex(theArray, v2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    ++v2;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return result;
}

uint64_t fpfsi_UpdateVenueDescriptionMetadataSupplier(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  result = fpfsi_EnsureVenueDescriptionMetadataSupplierIfNecessary(a1);
  if (!(_DWORD)result)
  {
    v5 = *(_QWORD *)(DerivedStorage + 736);
    if (v5)
    {
      v6 = *(_QWORD *)(v3 + 432);
      v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (v7)
        return v7(v5, CFSTR("SMS_VideoTargetArray"), v6);
      else
        return 4294954514;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void fpfs_AddToPlayQueue(void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  const __CFArray *v23;
  CFIndex FirstIndexOfValue;
  CFIndex v25;
  const void *ValueAtIndex;
  double Current;
  uint64_t v28;
  double v29;
  double v30;
  void (*v31)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t UpTimeNanoseconds;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  const void *v40;
  const void *v41;
  const void *v42;
  const __CFArray *v43;
  int Count;
  char __dst[128];
  uint64_t v46;
  CFRange v47;

  v46 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a1)
      v8 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
    else
      v8 = "";
    strncpy(__dst, v8, 8uLL);
    if (a2)
      v9 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
    else
      v9 = "";
    strncpy(__dst, v9, 8uLL);
    if (a3)
      v10 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
    else
      v10 = "";
    strncpy(__dst, v10, 8uLL);
    kdebug_trace();
  }
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (!*(_BYTE *)(DerivedStorage + 51) && fpfs_CheckItem((uint64_t)a1, a2) && (!a3 || fpfs_CheckItem((uint64_t)a1, a3)))
  {
    v11 = CMBaseObjectGetDerivedStorage();
    if (!CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72)) && !*(_QWORD *)(DerivedStorage + 80))
    {
      *(_BYTE *)(v11 + 3264) = 1;
      *(_QWORD *)(DerivedStorage + 648) = CFSTR("ReasonAddToPlayQueue");
    }
    v12 = *(_DWORD *)(DerivedStorage + 748);
    v13 = *(_DWORD *)(v11 + 2380);
    if (v12 >= v13)
      v14 = *(_DWORD *)(v11 + 2380);
    else
      v14 = *(_DWORD *)(DerivedStorage + 748);
    if (!v13)
      v14 = *(_DWORD *)(DerivedStorage + 748);
    if (v12)
      v15 = v14;
    else
      v15 = *(_DWORD *)(v11 + 2380);
    *(_DWORD *)(v11 + 2376) = v15;
    v16 = *(_DWORD *)(DerivedStorage + 752);
    v17 = *(_DWORD *)(v11 + 2236);
    if (v16 >= v17)
      v18 = *(_DWORD *)(v11 + 2236);
    else
      v18 = *(_DWORD *)(DerivedStorage + 752);
    if (!v17)
    {
      v17 = 50;
      v18 = *(_DWORD *)(DerivedStorage + 752);
    }
    if (v16)
      v19 = v18;
    else
      v19 = v17;
    *(_DWORD *)(v11 + 2232) = v19;
    v20 = *(_DWORD *)(DerivedStorage + 756);
    v21 = *(_DWORD *)(v11 + 2280);
    if (v20 < 0)
    {
      if (v21 < 0)
        v21 = *(_DWORD *)(v11 + 2276);
    }
    else if (v21 < 0)
    {
      v21 = *(_DWORD *)(DerivedStorage + 756);
    }
    else
    {
      v21 = *(_DWORD *)(v11 + 2272);
      if (v20 < v21)
        v21 = *(_DWORD *)(DerivedStorage + 756);
    }
    *(_DWORD *)(v11 + 2272) = v21;
    if (a3)
    {
      v22 = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)(v11 + 463) && *(_BYTE *)(v22 + 463))
      {
        if (*(const void **)(DerivedStorage + 80) == a3)
        {
          v25 = 0;
LABEL_55:
          CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 72), v25, a2);
LABEL_56:
          Current = CFAbsoluteTimeGetCurrent();
          v28 = *(_QWORD *)(v11 + 2536);
          if (v28)
          {
            v29 = Current;
            v30 = *(double *)(v11 + 2024);
            v31 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v31)
              v31(v28, CFSTR("playerStats"), CFSTR("TimeItemToEnqueue"), (uint64_t)((v29 - v30) * 1000.0), 0);
          }
          v32 = *(_QWORD *)(v11 + 2536);
          if (v32)
          {
            v33 = *(unsigned __int8 *)(v11 + 3264);
            v34 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v34)
              v34(v32, CFSTR("playerStats"), CFSTR("FirstItem"), v33, 0);
          }
          if (*(_QWORD *)(v11 + 2064))
          {
            if (!*(_BYTE *)(v11 + 2073))
            {
              UpTimeNanoseconds = FigGetUpTimeNanoseconds();
              v36 = *(_QWORD *)(v11 + 2536);
              if (v36)
              {
                v37 = UpTimeNanoseconds;
                v38 = *(_QWORD *)(v11 + 2064);
                v39 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                if (v39)
                  v39(v36, CFSTR("startupStats"), CFSTR("tfac2IEnqueued"), (v37 - v38) / 0xF4240uLL, 0);
              }
            }
          }
          *(_WORD *)(v11 + 463) = 1;
          *(_BYTE *)(v11 + 468) = 0;
          *(_BYTE *)(v11 + 530) = 0;
          CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v11 + 1904));
          v40 = *(const void **)(v11 + 1888);
          if (v40)
          {
            CFRelease(v40);
            *(_QWORD *)(v11 + 1888) = 0;
          }
          v41 = *(const void **)(v11 + 1896);
          if (v41)
          {
            CFRelease(v41);
            *(_QWORD *)(v11 + 1896) = 0;
          }
          fpfs_AdvanceToNextItemIfNecessary();
          v42 = *(const void **)(DerivedStorage + 80);
          if (v42)
            fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(v42);
          else
            fpfs_PullNextItem(a1);
          v43 = *(const __CFArray **)(DerivedStorage + 432);
          if (v43)
            Count = CFArrayGetCount(v43);
          else
            Count = 0;
          fpfsi_RTCReportingUpdateFVTCount(v11, Count);
          fpfs_PostPlayQueueNotificationIfHungry(a1);
LABEL_78:
          fpfs_UnlockAndPostNotificationsWithCaller(a1);
        }
        v23 = *(const __CFArray **)(DerivedStorage + 72);
        v47.length = CFArrayGetCount(v23);
        v47.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v23, v47, a3);
        if (FirstIndexOfValue != -1)
        {
          v25 = FirstIndexOfValue + 1;
          if (FirstIndexOfValue + 1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72)))
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 72), v25);
            fpfs_CancelGaplessAttempt(a1, ValueAtIndex, 1);
          }
          goto LABEL_55;
        }
      }
    }
    else if (!*(_BYTE *)(v11 + 463))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 72), a2);
      goto LABEL_56;
    }
  }
  FigSignalErrorAt();
  goto LABEL_78;
}

void fpfs_RemoveFromPlayQueue(void *a1, const void *a2)
{
  fpfs_RemoveFromPlayQueueGuts(a1, a2, 1);
}

void fpfs_CopyPlayQueueItem(const void *a1, const void *a2, const __CFArray **a3)
{
  uint64_t DerivedStorage;
  const __CFArray *Next;
  const __CFArray *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (a3)
  {
    if (*(_BYTE *)(DerivedStorage + 51)
      || a2 && (!fpfs_CheckItem((uint64_t)a1, a2) || !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 463)))
    {
      FigSignalErrorAt();
      v8 = 0;
    }
    else
    {
      Next = fpfs_getNext(DerivedStorage, a2);
      v8 = Next;
      if (Next)
        CFRetain(Next);
    }
    *a3 = v8;
  }
  else
  {
    FigSignalErrorAt();
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

void fpfs_SetRate(void *a1, float a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_SetRateWithOptionsGuts(a1, 0, 1, a2);
}

void fpfs_GetRate(const void *a1, _DWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a1);
  *a2 = *(_DWORD *)(DerivedStorage + 108);
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

uint64_t sub_192A401A0()
{
  return 0;
}

uint64_t fpfs_StartPreroll(const void *a1, int a2, float a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *Next;
  const __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(DerivedStorage + 51) && a3 != 0.0)
  {
    fpfs_LockMutexWithCaller((uint64_t)a1);
    Next = fpfs_getNext(DerivedStorage, 0);
    if (Next)
    {
      v10 = Next;
      v11 = CMBaseObjectGetDerivedStorage();
      if (*(float *)(v11 + 840) == 0.0)
      {
        v12 = v11;
        if (*(_BYTE *)(v11 + 464))
        {
          *(_DWORD *)(v11 + 2200) = a2;
          fpfs_enqueuePrerollDidCompleteNotificationIfNeeded();
        }
        else
        {
          fpfs_enqueuePrerollWasCancelledNotificationIfNeeded(v10);
          *(_DWORD *)(v12 + 2200) = a2;
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    else if (dword_1EE2A2A88 >= 2)
    {
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_UnlockAndPostNotificationsWithCaller(a1);
  }
  return FigSignalErrorAt();
}

void fpfs_SetRateAndAnchorTime(void *a1, CMTime *a2, CMTime *a3, char a4, float a5)
{
  CMTime v5;
  CMTime v6;

  v6 = *a2;
  v5 = *a3;
  fpfs_SetRateWithOptionsAndAnchorTime(a1, a5, 0, &v6, &v5, a4, 1);
}

uint64_t fpfs_CreatePlaybackItemFromAsset(const void *a1, CFTypeRef cf, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  CFAllocatorRef v9;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v12;
  uint64_t DerivedStorage;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int started;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  CFTypeRef v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  CFTypeRef v30;
  uint64_t AllocatorForMedia;
  BOOL v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v37;
  NSObject *v38;
  unsigned int v39;
  unsigned int v40;
  const __CFString *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, const __CFString *, uint64_t, uint64_t);
  const __CFData *DataValue;
  const __CFString *v49;
  const __CFString *v50;
  const char *v51;
  uint64_t v52;
  const __CFAllocator *v53;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const __CFAllocator *v55;
  CFMutableArrayRef Mutable;
  double v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v68;
  uint64_t *v69;
  uint64_t v70;
  void (*v71)(uint64_t, _QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t UpTimeNanoseconds;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v81;
  int v82;
  CFTypeRef v83;
  uint64_t v84;
  dispatch_queue_t *v85;
  uint64_t v86;
  int CFPreferenceNumberWithDefault;
  uint64_t v88;
  double v89;
  float v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, __CFString *, uint64_t);
  uint64_t v95;
  __CFString **v96;
  CFTypeRef v97;
  CFTypeRef v98;
  uint64_t v99;
  void (*v100)(CFTypeRef, _QWORD, uint64_t);
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, _QWORD, uint64_t);
  uint64_t v104;
  const __CFAllocator *v105;
  NSObject *v106;
  __int128 v108;
  CFTypeRef *v109;
  __int128 v110;
  uint64_t v111;
  const __CFDictionary *v112;
  CFTypeRef v113;
  CFTypeRef v114;
  os_log_type_t v115;
  os_log_type_t type[4];
  CFTypeRef v117;
  CFTypeRef v118;
  CFTypeRef v119;
  CFTypeRef v120;
  CFTypeRef v121;
  uint64_t v122;
  CFTypeRef v123;
  CFTypeRef cfa;
  void *value;
  CFTypeRef v126;
  CFTypeRef v127;
  int v128;
  const char *v129;
  __int16 v130;
  CFTypeRef v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  CFTypeRef v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  int v139;
  uint8_t buf[4];
  const void *v141;
  __int16 v142;
  CFTypeRef v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  _OWORD buffer[8];
  _OWORD __str[5];
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v114 = 0;
  if (!cf)
    return FigSignalErrorAt();
  v9 = CFGetAllocator(cf);
  CMBaseObject = FigAssetGetCMBaseObject(cf);
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (v11)
  {
    v12 = v11(CMBaseObject, CFSTR("assetProperty_CreationURL"), v9, &v114);
    if (!(_DWORD)v12)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v126 = 0;
      v127 = 0;
      v14 = gNextItemOrdinal++;
      cfa = 0;
      value = 0;
      v122 = 0;
      v123 = 0;
      v120 = 0;
      v121 = 0;
      memset(__str, 0, sizeof(__str));
      memset(buffer, 0, sizeof(buffer));
      v118 = 0;
      v119 = 0;
      if (a1 && a5)
      {
        v15 = DerivedStorage;
        v112 = a4;
        fpfs_LockMutexWithCaller((uint64_t)a1);
        CFGetAllocator(a1);
        FigPlaybackItemGetClassID();
        CMDerivedObjectCreate();
        v16 = (_DWORD *)MEMORY[0x1E0CA1FA8];
        if (!v127)
        {
          v82 = FigSignalErrorAt();
          goto LABEL_128;
        }
        if (*MEMORY[0x1E0CA1FB8])
        {
          v17 = fig_log_handle();
          if (os_signpost_enabled(v17))
          {
            *(_DWORD *)buf = 134218496;
            v141 = a1;
            v142 = 2048;
            v143 = v127;
            v144 = 2048;
            v145 = v14;
            _os_signpost_emit_with_name_impl(&dword_1928EC000, v17, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PlayerStream_CreateItem", " enableTelemetry=YES player=%llu, item=%llu, itemOrdinal=%ld", buf, 0x20u);
          }
        }
        v109 = a5;
        v111 = v14;
        if (*v16)
          fig_gm_ktrace_wrapper();
        v18 = CMBaseObjectGetDerivedStorage();
        *(_QWORD *)v18 = a1;
        v19 = FigSimpleMutexCreate();
        *(_QWORD *)(v18 + 8) = v19;
        v113 = a1;
        if (!v19)
        {
          v82 = -12786;
          goto LABEL_148;
        }
        FigGetAllocatorForMedia();
        started = FigRetainProxyCreate();
        if (!started)
        {
          *(_QWORD *)(v18 + 160) = v111;
          started = FigStartForwardingMediaServicesProcessDeathNotification();
          if (!started)
          {
            *(_BYTE *)(v18 + 3072) = 0;
            if (v112 && CFDictionaryGetValueIfPresent(v112, CFSTR("LoggingIdentifier"), (const void **)&value))
              CFStringGetCString((CFStringRef)value, (char *)(v18 + 3072), 10, 0x600u);
            if (dword_1EE2A2A88)
            {
              LODWORD(v117) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v22 = v117;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
                v23 = v22;
              else
                v23 = v22 & 0xFFFFFFFE;
              if (v23)
              {
                v24 = CMBaseObjectGetDerivedStorage() + 824;
                v25 = v127;
                if (v127)
                  v26 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
                else
                  v26 = "";
                v128 = 136316418;
                v129 = "fpfs_CreatePlaybackItem";
                v130 = 2048;
                v131 = a1;
                v132 = 2082;
                v133 = v24;
                v134 = 2048;
                v135 = v25;
                v136 = 2082;
                v137 = v26;
                v138 = 1024;
                v139 = v111;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (FigCFDictionaryGetValueIfPresent())
            {
              v29 = cfa;
              if (cfa)
                v29 = CFRetain(cfa);
              *(_QWORD *)(v18 + 3352) = v29;
            }
            if (FigCFDictionaryGetValueIfPresent())
            {
              v30 = v123;
              if (v123)
                v30 = CFRetain(v123);
              *(_QWORD *)(v18 + 3184) = v30;
            }
            if (FigCFDictionaryGetValueIfPresent())
              *(_BYTE *)(v18 + 3192) = *MEMORY[0x1E0C9AE50] == v122;
            AllocatorForMedia = FigGetAllocatorForMedia();
            FigPropertyStorageCreate(AllocatorForMedia, (uint64_t *)(v18 + 168));
            v117 = 0;
            if (FigIsItOKToLogURLs())
              v32 = FPSupport_GetAssetDoNotLogURLs((uint64_t)cf) == 0;
            else
              v32 = 0;
            *(_BYTE *)(v18 + 25) = v32;
            v33 = CFRetain(cf);
            *(_QWORD *)(v18 + 32) = v33;
            v34 = FigGetAllocatorForMedia();
            v35 = FigAssetGetCMBaseObject(v33);
            v36 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
            if (v36)
              v36(v35, CFSTR("assetProperty_CreationURL"), v34, &v117);
            v37 = v117;
            if (v117)
            {
              if (dword_1EE2A2A88)
              {
                *(_DWORD *)type = 0;
                v115 = OS_LOG_TYPE_DEFAULT;
                v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v39 = *(_DWORD *)type;
                if (os_log_type_enabled(v38, v115))
                  v40 = v39;
                else
                  v40 = v39 & 0xFFFFFFFE;
                if (v40)
                {
                  if (*(_BYTE *)(v18 + 25))
                    v41 = (const __CFString *)v117;
                  else
                    v41 = CFSTR("<redacted>");
                  v42 = *(const void **)(v18 + 32);
                  v128 = 136315906;
                  v129 = "fpfs_CreatePlaybackItem";
                  v130 = 2048;
                  v131 = v127;
                  v132 = 2112;
                  v133 = (uint64_t)v41;
                  v134 = 2048;
                  v135 = v42;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v37 = v117;
              }
              CFRelease(v37);
            }
            *(_WORD *)(v18 + 885) = 1;
            *(_BYTE *)(v18 + 887) = 0;
            v43 = *(_QWORD *)(v15 + 536);
            if (v43)
              *(_BYTE *)(v18 + 886) = FPSupport_CopyAndCheckClientOnAllowListForPrefDomainKey(v43, 1, 0x1E2FE86B8, &v121);
            if (v121)
              CFRelease(v121);
            v44 = *(_QWORD *)(v18 + 32);
            v45 = FigGetAllocatorForMedia();
            v46 = FigAssetGetCMBaseObject(v44);
            v47 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
            if (v47)
              v47(v46, CFSTR("assetProperty_CreationOptionsDictionary"), v45, v18 + 400);
            *(_QWORD *)(v18 + 1608) = 0;
            *(_QWORD *)(v18 + 1616) = v18 + 1608;
            fpfsi_ResetPlaybackItem((const __CFArray *)v127, 0);
            if (*(_QWORD *)(v18 + 400))
            {
              DataValue = (const __CFData *)FigCFDictionaryGetDataValue();
              if (DataValue)
              {
                v49 = (const __CFString *)FigCFHTTPCopyClientProcessName(DataValue);
                if (v49)
                {
                  v50 = v49;
                  CFStringGetCString(v49, (char *)buffer, 128, 0x8000100u);
                  CFRelease(v50);
                }
              }
            }
            if (v127)
              v51 = (const char *)(CMBaseObjectGetDerivedStorage() + 3072);
            else
              v51 = "";
            snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.fpfs.timer(%s).%s", (const char *)buffer, v51);
            v52 = FigDispatchQueueCreateWithPriority();
            *(_QWORD *)(v18 + 600) = v52;
            if (!v52)
            {
LABEL_146:
              started = FigSignalErrorAt();
              goto LABEL_147;
            }
            *(_QWORD *)(v18 + 1040) = 0;
            *(_QWORD *)(v18 + 1048) = v18 + 1040;
            *(_QWORD *)(v18 + 1072) = 0;
            *(_QWORD *)(v18 + 1080) = v18 + 1072;
            *(_QWORD *)(v18 + 1056) = 0;
            *(_QWORD *)(v18 + 1064) = v18 + 1056;
            v53 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            started = CMBufferQueueCreate(v53, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v18 + 848));
            if (!started)
            {
              v55 = CFGetAllocator(a1);
              Mutable = CFArrayCreateMutable(v55, 0, MEMORY[0x1E0C9B378]);
              *(_QWORD *)(v18 + 1904) = Mutable;
              if (Mutable)
              {
                *(_QWORD *)(v18 + 2880) = 0;
                *(_QWORD *)(v18 + 2888) = v18 + 2880;
                CelestialGetStreamingBackBufferDuration();
                *(_DWORD *)(v18 + 2272) = (int)v57;
                *(_DWORD *)(v18 + 2276) = (int)v57;
                *(_DWORD *)(v18 + 2280) = -1;
                *(_DWORD *)(v18 + 1824) = 1065353216;
                *(_OWORD *)(v18 + 2480) = 0u;
                v108 = *MEMORY[0x1E0C9D820];
                *(_OWORD *)(v18 + 2496) = *MEMORY[0x1E0C9D820];
                *(_QWORD *)(v18 + 2616) = -1;
                *(_QWORD *)(v18 + 2096) = 0;
                *(_OWORD *)(v18 + 1944) = 0u;
                *(_DWORD *)(v18 + 1744) = -1;
                *(_QWORD *)(v18 + 2768) = 0;
                *(_OWORD *)(v18 + 2624) = 0u;
                *(_OWORD *)(v18 + 2640) = 0u;
                *(_QWORD *)(v18 + 2656) = 0;
                v58 = (__int128 *)MEMORY[0x1E0CA2E18];
                v59 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                *(_QWORD *)(v18 + 2688) = v59;
                v110 = *v58;
                *(_OWORD *)(v18 + 2672) = *v58;
                v60 = MEMORY[0x1E0CA2E28];
                v61 = *MEMORY[0x1E0CA2E28];
                *(_OWORD *)(v18 + 2696) = *MEMORY[0x1E0CA2E28];
                v62 = *(_QWORD *)(v60 + 16);
                *(_QWORD *)(v18 + 2712) = v62;
                *(_OWORD *)(v18 + 2720) = v110;
                *(_QWORD *)(v18 + 2736) = v59;
                *(_OWORD *)(v18 + 2744) = v61;
                *(_QWORD *)(v18 + 2760) = v62;
                *(_QWORD *)(v18 + 2820) = -1;
                *(_QWORD *)(v18 + 2792) = -1;
                *(_BYTE *)(v18 + 2800) = 0;
                *(_BYTE *)(v18 + 2808) = 0;
                *(_DWORD *)(v18 + 2812) = 0;
                *(_WORD *)(v18 + 2816) = 0;
                *(_DWORD *)(v18 + 2836) = 0;
                *(_QWORD *)(v18 + 2664) = 0;
                *(_QWORD *)(v18 + 2776) = 0;
                *(_QWORD *)(v18 + 2784) = 0;
                *(_QWORD *)(v18 + 2848) = 0xFFFFFFFF00000000;
                *(_BYTE *)(v18 + 2864) = 0;
                *(_BYTE *)(v18 + 1728) = 0;
                *(_WORD *)(v18 + 557) = 1;
                *(_DWORD *)(v18 + 2860) = -1;
                *(_DWORD *)(v18 + 560) = 0;
                *(_BYTE *)(v18 + 564) = 1;
                *(_DWORD *)(v18 + 868) = 0;
                *(_QWORD *)(v18 + 872) = CFRetain(CFSTR("TimeDomain"));
                *(_DWORD *)(v18 + 880) = 1065353216;
                *(_WORD *)(v18 + 864) = 257;
                *(_OWORD *)(v18 + 1368) = v110;
                *(_QWORD *)(v18 + 1384) = v59;
                *(_OWORD *)(v18 + 1392) = v110;
                *(_QWORD *)(v18 + 1408) = v59;
                *(_QWORD *)(v18 + 2512) = 0;
                *(_DWORD *)(v18 + 2200) = 0;
                *(_OWORD *)(v18 + 3240) = v110;
                *(_QWORD *)(v18 + 3256) = v59;
                v63 = *(const void **)(v18 + 2528);
                if (v63)
                {
                  CFRelease(v63);
                  *(_QWORD *)(v18 + 2528) = 0;
                }
                v64 = *(_QWORD *)(v18 + 32);
                v65 = FigGetAllocatorForMedia();
                v66 = FigAssetGetCMBaseObject(v64);
                v67 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
                if (v67)
                  v67(v66, CFSTR("assetProperty_InstanceUUID"), v65, &v119);
                v68 = v119;
                if (v119)
                  v68 = CFRetain(v119);
                *(_QWORD *)(v18 + 2528) = v68;
                v69 = (uint64_t *)(v18 + 2536);
                FigReportingAgentCreateFromAsset(*(_QWORD *)(v18 + 32), 1, 0, (_QWORD *)(v18 + 2536));
                v70 = *(_QWORD *)(v18 + 2536);
                if (v70)
                {
                  v71 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
                  if (v71)
                    v71(v70, 0);
                  if (*v69)
                  {
                    fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(v18, *(unsigned __int8 *)(v15 + 160));
                    v72 = *(_QWORD *)(v18 + 32);
                    v73 = FigGetAllocatorForMedia();
                    v74 = FigAssetGetCMBaseObject(v72);
                    v75 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v75)
                      v75(v74, CFSTR("assetProperty_CreationTime"), v73, &v120);
                    if (v120)
                    {
                      *(_QWORD *)(v18 + 2064) = FigCFNumberGetSInt64();
                      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
                      v77 = *(_QWORD *)(v18 + 2064);
                      if (v77)
                      {
                        if (!*(_BYTE *)(v18 + 2073))
                        {
                          v78 = *v69;
                          if (*v69)
                          {
                            v79 = UpTimeNanoseconds;
                            v80 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                            if (v80)
                              v80(v78, CFSTR("startupStats"), CFSTR("tfac2ICreate"), (v79 - v77) / 0xF4240uLL, 0);
                          }
                        }
                      }
                    }
                    fpfsi_RTCReportingUpdateBufferedAirPlayOutput(v18, *(_QWORD *)(v15 + 504) != 0);
                  }
                }
                *(_DWORD *)(v18 + 2560) = 0;
                *(CFAbsoluteTime *)(v18 + 2024) = CFAbsoluteTimeGetCurrent();
                if (FigRenderedLegibleOutputManagerIsSupported())
                {
                  v81 = FigGetAllocatorForMedia();
                  v82 = FigLegibleOutputManagerCreate(v81, (uint64_t)fpfs_postLegibleOutputNotification, (uint64_t)fpfs_postLegibleOutputFlushNotification, *(_QWORD *)(v18 + 16), (CFTypeRef *)(v18 + 1856));
                  FigLegibleOutputManagerSetCaptionPipelineStrategy(*(dispatch_queue_t **)(v18 + 1856), *(_BYTE *)(v15 + 460) == 0);
                  FigLegibleOutputManagerSetCaptionRenderingStrategy(*(dispatch_queue_t **)(v18 + 1856), *(_BYTE *)(v15 + 461) == 0);
                  if (v82)
                    goto LABEL_148;
                }
                started = FigMetadataStorageCreate(&v126);
                if (started)
                  goto LABEL_147;
                v83 = v126;
                *(_QWORD *)(v18 + 1872) = v126;
                v126 = 0;
                FPSupport_SetMetadataOutputCallbacks((uint64_t)v83, (uint64_t)fpfsi_postMetadataOutputChanged, (uint64_t)fpfsi_postMetadataOutputFlushed);
                v84 = FigSimpleMutexCreate();
                *(_QWORD *)(v18 + 672) = v84;
                if (v84)
                {
                  v85 = *(dispatch_queue_t **)(v18 + 1856);
                  if (v85)
                    FigLegibleOutputManagerSetNonForcedEnabledForMediaType(v85, 1668047728, *(_BYTE *)(v15 + 210));
                  if ((unint64_t)CelestialGetSystemMemorySize() >= 0x10000001)
                    v86 = 0x2000000;
                  else
                    v86 = 0x1000000;
                  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
                  v88 = (uint64_t)CFPreferenceNumberWithDefault << 20;
                  if (!CFPreferenceNumberWithDefault)
                    v88 = v86;
                  *(_QWORD *)(v18 + 536) = v88;
                  FigGetCFPreferenceOrOptionDoubleWithDefault();
                  v90 = v89;
                  if (v90 < 0.0)
                    v90 = 3.0;
                  *(float *)(v18 + 920) = v90;
                  if (FPSupport_GetDisplayModeSwitchMonitor())
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    FPSupport_GetDisplayModeSwitchMonitor();
                    FigNotificationCenterAddWeakListener();
                  }
                  started = fpfs_EstablishTimebase((const __CFArray *)v127);
                  if (started)
                    goto LABEL_147;
                  FigGetAllocatorForMedia();
                  v91 = (uint64_t *)(v18 + 584);
                  started = CMTimebaseCreateReadOnlyTimebase();
                  if (started)
                    goto LABEL_147;
                  v92 = *v69;
                  if (*v69)
                  {
                    v93 = *v91;
                    v94 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
                    if (v94)
                      v94(v92, CFSTR("Timebase"), v93);
                  }
                  *(_WORD *)(v18 + 592) = 256;
                  *(_DWORD *)(v18 + 2968) = 0;
                  *(_OWORD *)(v18 + 3020) = v110;
                  *(_QWORD *)(v18 + 3036) = v59;
                  *(_DWORD *)(v18 + 3176) = FPSupport_InitialSeekIDForSource(1);
                  FigGetCFPreferenceNumberWithDefault();
                  *(_BYTE *)(v18 + 554) = FigGetCFPreferenceNumberWithDefault() != 0;
                  *(_BYTE *)(v18 + 555) = FigGetCFPreferenceNumberWithDefault() != 0;
                  *(_BYTE *)(v18 + 556) = FigGetCFPreferenceNumberWithDefault() != 0;
                  *(_BYTE *)(v18 + 465) = FigGetCFPreferenceNumberWithDefault() != 0;
                  *(_OWORD *)(v18 + 744) = v108;
                  v95 = FigSimpleMutexCreate();
                  *(_QWORD *)(v18 + 760) = v95;
                  if (v95)
                  {
                    *(_WORD *)(v18 + 3168) = 257;
                    *(_BYTE *)(v18 + 3224) = 1;
                    fpfsi_UpdateHighWaterSecs(v15, (uint64_t)v127);
                    if (*(_BYTE *)(v15 + 842))
                    {
                      v96 = kFigReportingPlayerType_Interstitial;
                      a1 = v113;
                    }
                    else
                    {
                      a1 = v113;
                      if (*(_DWORD *)(v15 + 808) != 1)
                        goto LABEL_119;
                      v96 = kFigReportingPlayerType_Scrubber;
                    }
                    fpfsi_RTCReportingUpdatePlayerType(v18, (uint64_t)*v96);
LABEL_119:
                    FigCFDictionaryGetValueIfPresent();
                    if (v118)
                    {
                      v97 = CFRetain(v118);
                      *(_QWORD *)(v18 + 3360) = v97;
                      if (v97)
                      {
                        v98 = v97;
                        v99 = *v91;
                        v100 = *(void (**)(CFTypeRef, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
                        if (v100)
                          v100(v98, *MEMORY[0x1E0CA4CD8], v99);
                        v101 = *(_QWORD *)(v18 + 3360);
                        v102 = *(_QWORD *)(v18 + 2528);
                        v103 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
                        if (v103)
                          v103(v101, *MEMORY[0x1E0CA4CD0], v102);
                        goto LABEL_127;
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v18 + 3360) = 0;
                    }
                    FigGetAllocatorForMedia();
                    FigMetricEventTimelineCreate();
LABEL_127:
                    v104 = FigGetAllocatorForMedia();
                    FigMetricEventSummarySubscriberCreate(v104, *(_QWORD *)(v18 + 3360), (uint64_t *)(v18 + 3368));
                    v105 = (const __CFAllocator *)FigGetAllocatorForMedia();
                    FigMetricEventInitialLikelyToKeepUpSubscriberCreate(v105, *(_QWORD *)(v18 + 3360), (uint64_t *)(v18 + 3376));
                    CFSetAddValue(*(CFMutableSetRef *)(v15 + 64), v127);
                    fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(v18, *(unsigned __int8 *)(v15 + 160));
                    v82 = 0;
                    *v109 = v127;
                    v127 = 0;
                    v14 = v111;
                    goto LABEL_128;
                  }
                }
              }
              goto LABEL_146;
            }
          }
        }
LABEL_147:
        v82 = started;
LABEL_148:
        v14 = v111;
        if (v127)
          CFRelease(v127);
        a1 = v113;
LABEL_128:
        if (v119)
          CFRelease(v119);
        if (v120)
          CFRelease(v120);
        if (v126)
          CFRelease(v126);
        if (*MEMORY[0x1E0CA1FB8])
        {
          v106 = fig_log_handle();
          if (os_signpost_enabled(v106))
          {
            *(_DWORD *)buf = 134218752;
            v141 = a1;
            v142 = 2048;
            v143 = v127;
            v144 = 2048;
            v145 = v14;
            v146 = 2048;
            v147 = v82;
            _os_signpost_emit_with_name_impl(&dword_1928EC000, v106, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PlayerStream_CreateItem", " enableTelemetry=YES player=%llu, item=%llu, itemOrdinal=%ld, error=%llu", buf, 0x2Au);
          }
        }
        if (*MEMORY[0x1E0CA1FA8])
          fig_gm_ktrace_wrapper();
        fpfs_UnlockAndPostNotificationsWithCaller(a1);
      }
      v28 = FigSignalErrorAt();
      v27 = v28;
      if ((_DWORD)v28)
        goto LABEL_143;
      v12 = FigStartForwardingMediaServicesProcessDeathNotification();
    }
    v27 = v12;
  }
  else
  {
    v27 = 4294954514;
  }
LABEL_143:
  if (v114)
    CFRelease(v114);
  return v27;
}

void fpfs_SetRateWithOptions(void *a1, uint64_t a2, float a3)
{
  fpfs_SetRateWithOptionsGuts(a1, a2, 1, a3);
}

uint64_t fpfs_SetProperties(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  return FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)fpfs_handleSetProperty, 0, 0, a3);
}

uint64_t fpfs_ReevaluateRouteConfiguration(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  const void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  NSObject *v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t FigBaseObject;
  void (*v22)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t RenderingTrackofType;
  CFTypeRef v25;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v25 = 0;
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    fpfs_LockMutexWithCaller((uint64_t)a1);
    v3 = *(const __CFArray **)(DerivedStorage + 80);
    v4 = (const void *)FigCFCopyCompactDescription();
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v4)
      CFRelease(v4);
    fpfs_setCachedRouteInfo();
    v6 = *(_QWORD *)(DerivedStorage + 504);
    if (v6)
    {
      AllocatorForMedia = FigGetAllocatorForMedia();
      CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v6);
      v9 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (!v9 || v9(CMBaseObject, CFSTR("IsActiveConfigurationInvalid"), AllocatorForMedia, &v25))
        goto LABEL_31;
      if (v25 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
      {
        if (dword_1EE2A2A88)
        {
          v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v11 = *(_QWORD *)(DerivedStorage + 504);
        v12 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v12 || v12(v11))
LABEL_31:
          fpfs_UnlockAndPostNotificationsWithCaller(a1);
        fpfs_stopResetDisturbReprepareAndResume(a1, v3, 0);
      }
    }
    if (v3)
    {
      v13 = CMBaseObjectGetDerivedStorage();
      LOBYTE(cf[0]) = 0;
      if (!fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_handleAvailableAudioFormatChange_Apply, (uint64_t)cf))
      {
        v14 = CMBaseObjectGetDerivedStorage();
        cf[0] = 0;
        v15 = *(_QWORD *)(v14 + 1040);
        if (v15)
        {
          v16 = 0;
          v17 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
          do
          {
            if (*(_DWORD *)(v15 + 32) == 1936684398)
            {
              v18 = *(_QWORD *)(v15 + 96);
              if (v18)
              {
                v19 = *(_QWORD *)(v18 + 32);
                if (v19)
                {
                  v20 = FigGetAllocatorForMedia();
                  FigBaseObject = FigRenderPipelineGetFigBaseObject(v19);
                  v22 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
                  if (v22)
                    v22(FigBaseObject, CFSTR("IsPausedForConfigurationChange"), v20, cf);
                  if (cf[0] == v17)
                    v16 = 1;
                  if (cf[0])
                  {
                    CFRelease(cf[0]);
                    cf[0] = 0;
                  }
                }
              }
            }
            v15 = *(_QWORD *)(v15 + 8);
          }
          while (v15);
          if (v16)
          {
            RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v3, 1936684398);
            fpfsi_restartAudioRendering((uint64_t)a1, (uint64_t)v3, v13, *(_QWORD *)(*(_QWORD *)(RenderingTrackofType + 96) + 32));
          }
        }
      }
    }
    goto LABEL_31;
  }
  return FigSignalErrorAt();
}

void fpfs_AddExternalStartupTask(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(_BYTE *)(DerivedStorage + 51))
  {
    FigSignalErrorAt();
  }
  else
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 880), a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

uint64_t fpfs_RemoveExternalStartupTask(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex FirstIndexOfValue;
  const __CFArray *v8;
  CFIndex v9;
  CFRange v11;
  CFRange v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    CFRetain(a2);
    fpfs_LockMutexWithCaller((uint64_t)a1);
    if (*(_BYTE *)(v5 + 51))
    {
      FigSignalErrorAt();
    }
    else
    {
      v6 = *(const __CFArray **)(v5 + 880);
      v11.length = CFArrayGetCount(v6);
      v11.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v11, a2);
      if (FirstIndexOfValue != -1)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 880), FirstIndexOfValue);
        v8 = *(const __CFArray **)(v5 + 888);
        v12.length = CFArrayGetCount(v8);
        v12.location = 0;
        v9 = CFArrayGetFirstIndexOfValue(v8, v12, a2);
        if (v9 != -1)
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 888), v9);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(a1);
  }
  return 0;
}

uint64_t fpfs_TransferOwnershipOfPlaybackItemFromPlayer(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;

  if (a3 && a1 && a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1EE2A2A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_LockMutexWithCaller(a3);
    if (*(_QWORD *)DerivedStorage != a3 || *(_BYTE *)(DerivedStorage + 463))
    {
      FigSignalErrorAt();
    }
    else if (a3 != a1)
    {
      v8 = CMBaseObjectGetDerivedStorage();
      CFSetRemoveValue(*(CFMutableSetRef *)(v8 + 64), a2);
      fpfs_LockMutexWithCaller(a1);
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
      *(_QWORD *)DerivedStorage = a1;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
      fpfs_UnlockWithCaller();
    }
    fpfs_UnlockWithCaller();
  }
  return FigSignalErrorAt();
}

uint64_t fpfs_postLegibleOutputNotification(const void *a1, uint64_t a2)
{
  uint64_t result;
  const void *v4;
  CFTypeRef v5;

  v4 = 0;
  v5 = 0;
  result = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v4, &v5);
  if (!(_DWORD)result)
    fpfs_EnqueueNotification(v4, CFSTR("LegibleOutputChanged"), v5, a1);
  return result;
}

void sub_192A421B4()
{
  const void *v0;

  fpfs_UnlockAndPostNotificationsWithCaller(v0);
}

void sub_192A421BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  const void *v17;

  if (v17)
    CFRelease(v17);
  if (!v16)
    JUMPOUT(0x192A42180);
  CFRelease(v16);
}

uint64_t fpfs_postLegibleOutputFlushNotification(void *a1, uint64_t a2)
{
  uint64_t result;
  const __CFAllocator *AllocatorForMedia;
  CFDictionaryRef v4;
  const void *v5;
  CFTypeRef cf;
  void *values;

  cf = 0;
  values = a1;
  v5 = 0;
  result = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v5, &cf);
  if (!(_DWORD)result)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v4 = CFDictionaryCreate(AllocatorForMedia, (const void **)kFigPlaybackItemParameter_LegibleOutputKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v4)
      fpfs_EnqueueNotification(v5, CFSTR("LegibleOutputWasFlushed"), cf, v4);
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
  }
  return result;
}

void fpfsi_postMetadataOutputChanged(const void *a1, uint64_t a2, const __CFArray *a3, uint64_t a4)
{
  int v6;
  CFIndex v7;
  const __CFString *v8;
  const void *ValueAtIndex;
  const __CFNumber *v10;
  int v11;
  __CFDictionary *MetadataOutputDataCallbackPayload;
  CFTypeRef v13;
  CFTypeRef cf;
  int valuePtr;

  v13 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a4, &cf, &v13))
  {
    if (CFArrayGetCount(a3) >= 1)
    {
      v6 = 0;
      v7 = 0;
      v8 = (const __CFString *)*MEMORY[0x1E0CA4E80];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a3, v7);
        valuePtr = 0;
        v10 = (const __CFNumber *)CMGetAttachment(ValueAtIndex, v8, 0);
        if (v10)
        {
          CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
          v11 = valuePtr;
        }
        else
        {
          v11 = 0;
        }
        if (!v6)
          v6 = v11;
        ++v7;
      }
      while (v7 < CFArrayGetCount(a3));
    }
    MetadataOutputDataCallbackPayload = FPSupport_CreateMetadataOutputDataCallbackPayload(a3, a1);
    fpfs_EnqueueNotification(cf, CFSTR("MetadataOutputChanged"), v13, MetadataOutputDataCallbackPayload);
  }
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
}

void fpfsi_postMetadataOutputFlushed(void *a1, uint64_t a2)
{
  CFDictionaryRef MedadataOutputFlushCallbackPayload;
  CFTypeRef v4;
  CFTypeRef cf;

  v4 = 0;
  cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v4))
  {
    MedadataOutputFlushCallbackPayload = FPSupport_CreateMedadataOutputFlushCallbackPayload(a1);
    fpfs_EnqueueNotification(cf, CFSTR("MetadataOutputWasFlushed"), v4, MedadataOutputFlushCallbackPayload);
  }
  if (cf)
    CFRelease(cf);
  if (v4)
    CFRelease(v4);
}

uint64_t fpfs_SetConnectionActive(void *a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v6;
  uint64_t updated;
  NSObject *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
    v6 = 2;
  else
    v6 = *(_BYTE *)(DerivedStorage + 48) && !*(_BYTE *)(DerivedStorage + 50);
  updated = fpfs_updatePlayerActiveState(a1, v6);
  if (dword_1EE2A2A88)
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return updated;
}

void fpfs_DuckVolume(const void *a1, int a2, float a3, float a4)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v10;
  char v12;
  uint64_t v13;
  int v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(_BYTE *)(DerivedStorage + 51))
  {
    FigSignalErrorAt();
    goto LABEL_19;
  }
  v10 = 0.0;
  if (a3 >= 0.0)
    v10 = a3;
  if (a2)
  {
    if (v10 >= 1.0 || *(_BYTE *)(DerivedStorage + 512) != 0)
LABEL_19:
      fpfs_UnlockAndPostNotificationsWithCaller(a1);
    *(float *)(DerivedStorage + 516) = v10;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    if (!*(_BYTE *)(DerivedStorage + 512))
      goto LABEL_19;
  }
  *(_BYTE *)(DerivedStorage + 512) = v12;
  v13 = *(_QWORD *)(DerivedStorage + 80);
  if (v13)
  {
    v14 = fpfsi_applySoftwareVolume(v10, a4, v13, 2);
    if (a2)
    {
      if (a4 > 0.0 && !v14)
        usleep((a4 * 1000.0 * 1000.0));
    }
  }
  goto LABEL_19;
}

void fpfs_SilentMute(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v6;
  uint64_t v7;
  float v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2A88)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(_BYTE *)(DerivedStorage + 51))
  {
    FigSignalErrorAt();
  }
  else
  {
    if (a2)
    {
      if (*(_BYTE *)(DerivedStorage + 520))
        goto LABEL_12;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      if (!*(_BYTE *)(DerivedStorage + 520))
        goto LABEL_12;
    }
    *(_BYTE *)(DerivedStorage + 520) = v6;
    v7 = *(_QWORD *)(DerivedStorage + 80);
    if (v7)
    {
      v8 = 0.0;
      if (!a2)
        v8 = 1.0;
      fpfsi_applySoftwareVolume(v8, 0.0, v7, 5);
    }
  }
LABEL_12:
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

uint64_t FigVCPTimedSampleGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPTimedSampleGetTypeID_once, vcp_timedSample_Register);
  return sVCPTimedSampleClassID;
}

uint64_t vcp_timedSample_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVCPTimedSampleClassID = result;
  return result;
}

uint64_t FigVCPTimedSampleCreateWithPixelBuffer(uint64_t a1, CFTypeRef cf, uint64_t *a3)
{
  CFTypeID v6;
  int v7;
  __int128 v9;
  uint64_t v10;

  if (!cf)
  {
    v7 = 2;
    goto LABEL_5;
  }
  v6 = CFGetTypeID(cf);
  if (v6 == CVPixelBufferGetTypeID())
  {
    v7 = 0;
LABEL_5:
    v9 = *(_OWORD *)a1;
    v10 = *(_QWORD *)(a1 + 16);
    return vcp_timedSample_createCommon(&v9, cf, v7, a3);
  }
  if (a3)
    *a3 = 0;
  return FigSignalErrorAt();
}

uint64_t vcp_timedSample_createCommon(__int128 *a1, const void *a2, int a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v9;
  __int128 v10;
  CFTypeRef v11;
  uint64_t v12;

  if ((*((_DWORD *)a1 + 3) & 0x1D) == 1)
  {
    MEMORY[0x19402F294](&FigVCPTimedSampleGetTypeID_once, vcp_timedSample_Register);
    Instance = _CFRuntimeCreateInstance();
    v9 = Instance;
    if (Instance)
    {
      v10 = *a1;
      *(_QWORD *)(Instance + 32) = *((_QWORD *)a1 + 2);
      *(_OWORD *)(Instance + 16) = v10;
      if (a2)
        v11 = CFRetain(a2);
      else
        v11 = 0;
      v12 = 0;
      *(_QWORD *)(v9 + 40) = v11;
      *(_DWORD *)(v9 + 48) = a3;
    }
    else
    {
      v12 = FigSignalErrorAt();
    }
  }
  else
  {
    v12 = FigSignalErrorAt();
    v9 = 0;
  }
  if (a4)
  {
    *a4 = v9;
  }
  else if (v9)
  {
    CFRelease((CFTypeRef)v9);
  }
  return v12;
}

uint64_t FigVCPTimedSampleCreateWithSampleBuffer(uint64_t a1, CFTypeRef cf, uint64_t *a3)
{
  CFTypeID v6;
  int v7;
  __int128 v9;
  uint64_t v10;

  if (!cf)
  {
    v7 = 2;
    goto LABEL_5;
  }
  v6 = CFGetTypeID(cf);
  if (v6 == CMSampleBufferGetTypeID())
  {
    v7 = 1;
LABEL_5:
    v9 = *(_OWORD *)a1;
    v10 = *(_QWORD *)(a1 + 16);
    return vcp_timedSample_createCommon(&v9, cf, v7, a3);
  }
  if (a3)
    *a3 = 0;
  return FigSignalErrorAt();
}

uint64_t FigVCPTimedSampleCreateWithNULL(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  return vcp_timedSample_createCommon(&v3, 0, 2, a2);
}

uint64_t FigVCPTimedSampleGetPTS@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 16);
  if (!result)
    return FigSignalErrorAt();
  *(_OWORD *)a2 = *(_OWORD *)(result + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 32);
  return result;
}

uint64_t FigVCPTimedSampleGetPixelBuffer(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (!v3 || !*(_DWORD *)(a1 + 48))
    {
      result = 0;
      if (!a2)
        return result;
      goto LABEL_5;
    }
  }
  result = FigSignalErrorAt();
  if (a2)
  {
    v3 = 0;
    if ((_DWORD)result)
LABEL_5:
      *a2 = v3;
  }
  return result;
}

uint64_t FigVCPTimedSampleGetSampleBuffer(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (!v3 || *(_DWORD *)(a1 + 48) == 1)
    {
      result = 0;
      if (!a2)
        return result;
      goto LABEL_5;
    }
  }
  result = FigSignalErrorAt();
  if (a2)
  {
    v3 = 0;
    if ((_DWORD)result)
LABEL_5:
      *a2 = v3;
  }
  return result;
}

BOOL FigVCPTimedSampleContainsNULL(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 48) == 2;
  return result;
}

BOOL FigVCPTimedSampleContainsPixelBuffer(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 48) == 0;
  return result;
}

BOOL FigVCPTimedSampleContainsSampleBuffer(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 48) == 1;
  return result;
}

const __CFArray *FigVCPGetTimedSampleAtTimeFromOrderedArray(const __CFArray *result, CMTime *a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  CMTimeEpoch v7;
  const void *ValueAtIndex;
  __int128 v9;
  CMTime time2;
  CMTime time1;
  CMTime v12;

  memset(&v12, 0, sizeof(v12));
  if (result)
  {
    v3 = result;
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v5 = Count;
      v6 = 0;
      v9 = *MEMORY[0x1E0CA2E28];
      v7 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
        FigVCPTimedSampleGetPTS((uint64_t)ValueAtIndex, (uint64_t)&v12);
        *(_OWORD *)&time1.value = v9;
        time1.epoch = v7;
        time2 = *a2;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          time1 = v12;
          time2 = *a2;
          if (CMTimeCompare(&time1, &time2) >= 1)
            break;
        }
        ++v6;
      }
      while (v5 != v6);
      return (const __CFArray *)FigCFArrayGetValueAtIndex();
    }
  }
  return result;
}

uint64_t FigVCPGetPTSInTimedSampleArrayAtIndex@<X0>(uint64_t a1@<X8>)
{
  uint64_t ValueAtIndex;

  ValueAtIndex = FigCFArrayGetValueAtIndex();
  return FigVCPTimedSampleGetPTS(ValueAtIndex, a1);
}

double vcp_timedSample_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

__n128 vcp_timedSample_Finalize(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  __n128 result;

  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v3 = MEMORY[0x1E0CA2E18];
  result = *(__n128 *)MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 16) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v3 + 16);
  return result;
}

BOOL vcp_timedSample_Equal(_DWORD *cf, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeID v6;
  CFTypeID v7;
  int v8;
  CMTime v10;
  CMTime time1;
  CMTime v12;
  CMTime v13;
  uint64_t v14;
  uint64_t v15;

  if (cf == a2)
    return 1;
  v14 = v2;
  v15 = v3;
  if (!cf)
    return 0;
  if (!a2)
    return 0;
  v6 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVCPTimedSampleGetTypeID_once, vcp_timedSample_Register);
  if (v6 != sVCPTimedSampleClassID)
    return 0;
  v7 = CFGetTypeID(a2);
  MEMORY[0x19402F294](&FigVCPTimedSampleGetTypeID_once, vcp_timedSample_Register);
  if (v7 != sVCPTimedSampleClassID)
    return 0;
  memset(&v13, 0, sizeof(v13));
  FigVCPTimedSampleGetPTS((uint64_t)cf, (uint64_t)&v13);
  memset(&v12, 0, sizeof(v12));
  FigVCPTimedSampleGetPTS((uint64_t)a2, (uint64_t)&v12);
  time1 = v13;
  v10 = v12;
  if (CMTimeCompare(&time1, &v10))
    return 0;
  v8 = cf[12];
  if (!v8)
  {
    time1.value = 0;
    v10.value = 0;
    FigVCPTimedSampleGetPixelBuffer((uint64_t)cf, &time1);
    FigVCPTimedSampleGetPixelBuffer((uint64_t)a2, &v10);
    return time1.value && v10.value && time1.value == v10.value;
  }
  if (v8 != 2)
  {
    time1.value = 0;
    v10.value = 0;
    FigVCPTimedSampleGetSampleBuffer((uint64_t)cf, &time1);
    FigVCPTimedSampleGetSampleBuffer((uint64_t)a2, &v10);
    return time1.value && v10.value && time1.value == v10.value;
  }
  return a2[12] == 2;
}

CFStringRef vcp_timedSample_CopyFormattingDesc(uint64_t a1, CFDictionaryRef formatOptions)
{
  uint64_t v4;
  const char *v5;
  const __CFAllocator *v7;
  Float64 Seconds;
  CMTime time;

  if (!a1)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], formatOptions, CFSTR("NULL FigVCPTimedSample"));
  v4 = *(int *)(a1 + 48);
  if (v4 > 2)
    v5 = "Unknown";
  else
    v5 = (&off_1E2F81BE8)[v4];
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = *(CMTime *)(a1 + 16);
  Seconds = CMTimeGetSeconds(&time);
  return CFStringCreateWithFormat(v7, formatOptions, CFSTR("<FigVCPTimedSample: %p> PTS %1.3f %s <%p>"), a1, *(_QWORD *)&Seconds, v5, *(_QWORD *)(a1 + 40));
}

CFStringRef vcp_timedSample_CopyDebugDesc(uint64_t a1)
{
  return vcp_timedSample_CopyFormattingDesc(a1, 0);
}

uint64_t FigManifoldStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigManifoldStartServer_block_invoke;
  block[3] = &unk_1E2F81C38;
  block[4] = &v3;
  if (FigManifoldStartServer_sFigManifoldServerSetupOnce != -1)
    dispatch_once(&FigManifoldStartServer_sFigManifoldServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t manifoldServer_replyingMessageHandler(_xpc_connection_s *a1, void *a2, void *a3)
{
  uint64_t OpCode;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  uint64_t (*v10)(CFTypeRef);
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  const void *v15;
  CFTypeRef v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t (*v21)(CFTypeRef, CFTypeRef, uint64_t, CMBlockBufferRef *);
  CFTypeID v22;
  CMBlockBufferRef v23;
  uint64_t v24;
  uint64_t CMBaseObject;
  uint64_t (*v26)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  CFTypeRef v27;
  CFTypeRef v28;
  uint64_t Int32;
  uint64_t (*v30)(CFTypeRef, uint64_t, CFTypeRef *, CFTypeRef);
  uint64_t v31;
  CFTypeRef v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t (*v35)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v36;
  uint64_t FigBaseObject;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  CFTypeRef v40;
  CFTypeRef v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeRef v44;
  uint64_t v45;
  uint64_t (*v46)(CFTypeRef, uint64_t, CFTypeRef, uint64_t, CMBlockBufferRef *);
  CFTypeRef v47;
  uint64_t OSStatus;
  uint64_t (*v49)(CFTypeRef, uint64_t);
  CFTypeRef v50;
  int64_t int64;
  uint64_t uint64;
  const __CFAllocator *AllocatorForMedia;
  uint64_t Empty;
  void *v55;
  uint64_t updated;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, _QWORD, CMBlockBufferRef *);
  const void *v61;
  CMBlockBufferRef v62;
  CFTypeRef v63;
  CMBlockBufferRef v64;
  uint64_t (*v65)(CMBlockBufferRef, _QWORD, CFTypeRef);
  CFTypeRef v66;
  CMBlockBufferRef v67;
  uint64_t (*v68)(CMBlockBufferRef, _QWORD, CFTypeRef);
  CFTypeRef v69;
  uint64_t (*v70)(CFTypeRef, int64_t, uint64_t, CFTypeRef);
  CFTypeID v71;
  CFTypeRef v72;
  CFTypeRef v73;
  int v74;
  CFTypeRef cf;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t, unsigned int, int64_t, const void *);
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  CFTypeRef v78;
  CFTypeRef value;
  uint64_t v80;
  CMBlockBufferRef blockBufferOut;

  v74 = 0;
  v72 = 0;
  v73 = 0;
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    goto LABEL_60;
  OpCode = manifoldServer_copyManifoldAndCompanion((int)a1, a2, &v73, &v72);
  if ((_DWORD)OpCode)
    goto LABEL_60;
  v7 = 4294951138;
  if (v74 > 1768121971)
  {
    if (v74 > 1768846944)
    {
      if (v74 != 1768846945)
      {
        if (v74 != 1853056356)
        {
          if (v74 != 1920300146)
            goto LABEL_28;
          v8 = v72;
          v9 = v73;
          v11 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v11 < 2uLL)
            goto LABEL_72;
          v10 = (uint64_t (*)(CFTypeRef))v11[7];
          if (!v10)
            goto LABEL_72;
LABEL_16:
          v7 = v10(v9);
          if ((_DWORD)v7)
            goto LABEL_28;
          v12 = a3;
          v13 = (uint64_t)v8;
LABEL_71:
          manifoldServer_copyPendingCallbacksIntoReply(v12, v13);
          goto LABEL_28;
        }
        v27 = v72;
        v47 = v73;
        OSStatus = FigXPCMessageGetOSStatus();
        v49 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v49)
        {
          v31 = v49(v47, OSStatus);
          goto LABEL_69;
        }
        goto LABEL_72;
      }
      FigBaseObject = FigManifoldGetFigBaseObject(v73);
      if (!FigBaseObject)
      {
        v7 = 4294954516;
        goto LABEL_28;
      }
      v38 = FigBaseObject;
      v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (!v39)
        goto LABEL_72;
      OpCode = v39(v38);
LABEL_60:
      v7 = OpCode;
      goto LABEL_28;
    }
    if (v74 == 1768121972)
    {
      v27 = v72;
      v28 = v73;
      cf = 0;
      v76 = 0;
      v77 = 0;
      Int32 = FigXPCMessageGetInt32();
      if (xpc_dictionary_get_BOOL(a2, "installFormatDescriptionOrDecryptorChangedCallback"))
        cf = manifoldServer_formatDescriptionOrDecryptorChangedCallback;
      if (xpc_dictionary_get_BOOL(a2, "installPushSampleBufferCallback"))
        v76 = manifoldServer_pushSampleBufferCallback;
      if (xpc_dictionary_get_BOOL(a2, "installTrackEndedCallback"))
        v77 = manifoldServer_trackEndedCallback;
      v30 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 32);
      if (v30)
      {
        v31 = v30(v28, Int32, &cf, v27);
LABEL_69:
        v7 = v31;
        if ((_DWORD)v31)
          goto LABEL_28;
        v12 = a3;
        v13 = (uint64_t)v27;
        goto LABEL_71;
      }
LABEL_72:
      v7 = 4294954514;
      goto LABEL_28;
    }
    if (v74 != 1768186228)
      goto LABEL_28;
    if (v72)
    {
      CFArrayRemoveAllValues(*((CFMutableArrayRef *)v72 + 11));
      v14 = v72;
    }
    else
    {
      v14 = 0;
    }
    v50 = v73;
    cf = 0;
    v80 = 0;
    blockBufferOut = 0;
    v78 = 0;
    value = 0;
    int64 = xpc_dictionary_get_int64(a2, "dataStartReference");
    uint64 = xpc_dictionary_get_uint64(a2, "injectFlags");
    if (xpc_dictionary_get_value(a2, "emptyData"))
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Empty = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)&cf);
    }
    else
    {
      if (!xpc_dictionary_get_value(a2, "data"))
        goto LABEL_80;
      FigGetAllocatorForMedia();
      Empty = FigXPCMessageCopyBlockBufferUsingMemoryRecipient();
    }
    v7 = Empty;
    if ((_DWORD)Empty)
    {
LABEL_123:
      if (value)
        CFRelease(value);
      if (v78)
        CFRelease(v78);
      if (blockBufferOut)
        CFRelease(blockBufferOut);
      if (v80)
        CFRelease((CFTypeRef)v80);
      goto LABEL_26;
    }
LABEL_80:
    if (xpc_dictionary_get_BOOL(a2, "UseAESCryptor"))
    {
      if (xpc_dictionary_get_BOOL(a2, "UseExistingAESCryptor"))
      {
        v55 = (void *)v14[14];
        if (v55)
          v55 = (void *)CFRetain(v55);
        blockBufferOut = (CMBlockBufferRef)v55;
LABEL_103:
        if (!v55)
          goto LABEL_112;
        updated = FigXPCMessageCopyCFData();
        if (!(_DWORD)updated)
        {
          updated = FigXPCMessageCopyCFData();
          if (!(_DWORD)updated)
          {
            v63 = value;
            if (!value)
              goto LABEL_109;
            v64 = blockBufferOut;
            v65 = *(uint64_t (**)(CMBlockBufferRef, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
            if (!v65)
              goto LABEL_122;
            updated = v65(v64, *MEMORY[0x1E0CA31D8], v63);
            if (!(_DWORD)updated)
            {
LABEL_109:
              v66 = v78;
              if (!v78)
                goto LABEL_112;
              v67 = blockBufferOut;
              v68 = *(uint64_t (**)(CMBlockBufferRef, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
              if (!v68)
                goto LABEL_122;
              updated = v68(v67, *MEMORY[0x1E0CA31C8], v66);
              if (!(_DWORD)updated)
                goto LABEL_112;
            }
          }
        }
        goto LABEL_121;
      }
      v57 = v14[13];
      if (!v57)
      {
        v58 = FigGetAllocatorForMedia();
        updated = FigCPEProtectorCreateForScheme(v58, CFSTR("com.apple.basicAES"), 0, (uint64_t)(v14 + 13));
        if ((_DWORD)updated)
          goto LABEL_121;
        v57 = v14[13];
      }
      v59 = FigGetAllocatorForMedia();
      v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 104);
      if (!v60)
        goto LABEL_122;
      updated = v60(v57, v59, 1, 0, &blockBufferOut);
      if (!(_DWORD)updated)
      {
        v61 = (const void *)v14[14];
        v62 = blockBufferOut;
        v14[14] = blockBufferOut;
        if (v62)
          CFRetain(v62);
        if (v61)
          CFRelease(v61);
        v55 = blockBufferOut;
        goto LABEL_103;
      }
    }
    else if (!xpc_dictionary_get_uint64(a2, "cryptorObjectID")
           || (FigGetAllocatorForMedia(), updated = FigCPECryptorRemoteRetainCopiedCryptor(), !(_DWORD)updated))
    {
      if (!xpc_dictionary_get_uint64(a2, "audioCryptorObjectID")
        || (FigGetAllocatorForMedia(), updated = FigCPECryptorRemoteRetainCopiedCryptor(), !(_DWORD)updated))
      {
LABEL_112:
        if (blockBufferOut)
        {
          CMSetAttachment(cf, CFSTR("FMFD_BufferDecryptor"), blockBufferOut, 1u);
          if (v80)
            CMSetAttachment(cf, CFSTR("FMFD_BufferAudioDecryptor"), (CFTypeRef)v80, 1u);
        }
        if (xpc_dictionary_get_BOOL(a2, "timedMetadata"))
          CMSetAttachment(cf, CFSTR("FBPAKey_TimedData"), CFSTR("FBPA_TimedData_ICY"), 1u);
        updated = FigMemoryOriginUpdateRecipientStateFromXPCMessage();
        if ((_DWORD)updated)
          goto LABEL_121;
        v69 = cf;
        v70 = *(uint64_t (**)(CFTypeRef, int64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
        if (v70)
        {
          updated = v70(v50, int64, uint64, v69);
          if (!(_DWORD)updated)
          {
            manifoldServer_copyPendingCallbacksIntoReply(a3, (uint64_t)v14);
            updated = FigMemoryRecipientAppendRecipientStateUpdateToXPCMessage();
          }
          goto LABEL_121;
        }
LABEL_122:
        v7 = 4294954514;
        goto LABEL_123;
      }
    }
LABEL_121:
    v7 = updated;
    goto LABEL_123;
  }
  if (v74 > 1668310627)
  {
    if (v74 != 1668310628)
    {
      if (v74 != 1668575856)
      {
        if (v74 != 1718383464)
          goto LABEL_28;
        v8 = v72;
        v9 = v73;
        v10 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v10)
          goto LABEL_72;
        goto LABEL_16;
      }
      v40 = v72;
      v41 = v73;
      cf = 0;
      blockBufferOut = 0;
      v42 = FigXPCMessageCopyCFString();
      if (!(_DWORD)v42)
      {
        if (cf)
        {
          v43 = FigXPCMessageGetInt32();
          v44 = cf;
          v45 = FigGetAllocatorForMedia();
          v46 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef, uint64_t, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
          if (!v46)
          {
            v7 = 4294954514;
            goto LABEL_138;
          }
          v42 = v46(v41, v43, v44, v45, &blockBufferOut);
          if (!(_DWORD)v42)
          {
            v7 = FigXPCMessageSetCFObject();
            if (!(_DWORD)v7)
              manifoldServer_copyPendingCallbacksIntoReply(a3, (uint64_t)v40);
            goto LABEL_138;
          }
        }
        else
        {
          v42 = FigSignalErrorAt();
        }
      }
      v7 = v42;
      goto LABEL_138;
    }
    v32 = v72;
    v33 = v73;
    cf = 0;
    v34 = FigXPCMessageGetInt32();
    v35 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v35)
    {
      v36 = v35(v33, v34, &cf);
      if ((_DWORD)v36)
      {
        v7 = v36;
      }
      else
      {
        v7 = FigXPCMessageSetFormatDescription();
        if (!(_DWORD)v7)
          manifoldServer_copyPendingCallbacksIntoReply(a3, (uint64_t)v32);
      }
    }
    else
    {
      v7 = 4294954514;
    }
LABEL_26:
    v15 = cf;
    if (!cf)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (v74 != 778268793)
  {
    if (v74 != 779314548)
      goto LABEL_28;
    OpCode = FigXPCHandleStdSetPropertyMessage();
    goto LABEL_60;
  }
  v17 = v73;
  cf = 0;
  v80 = 0;
  blockBufferOut = 0;
  value = 0;
  v18 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v18)
  {
    v19 = cf;
    if (cf)
    {
      v20 = FigGetAllocatorForMedia();
      v21 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (!v21)
        goto LABEL_73;
      v18 = v21(v17, v19, v20, &blockBufferOut);
      if (!(_DWORD)v18)
      {
        if (FigCFEqual())
        {
          if (blockBufferOut)
          {
            v22 = CFGetTypeID(blockBufferOut);
            if (v22 == FigAssetGetTypeID())
            {
              v23 = blockBufferOut;
              v24 = FigGetAllocatorForMedia();
              CMBaseObject = FigAssetGetCMBaseObject(v23);
              v26 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
              if (v26)
              {
                v18 = v26(CMBaseObject, CFSTR("assetProperty_FormatReader"), v24, &v80);
                if (!(_DWORD)v18)
                {
                  if (!v80)
                  {
                    v7 = 0;
                    goto LABEL_138;
                  }
                  v7 = FigXPCFormatReaderServerAssociateCopiedNeighborFormatReader(a1, v80);
                  if (!(_DWORD)v7)
                    xpc_dictionary_set_uint64(a3, "formatReader", (uint64_t)value);
                  goto LABEL_136;
                }
                goto LABEL_143;
              }
LABEL_73:
              v7 = 4294954514;
              goto LABEL_136;
            }
          }
LABEL_135:
          v7 = 0;
          goto LABEL_136;
        }
        if (FigCFEqual())
        {
          if (blockBufferOut)
          {
            v71 = CFGetTypeID(blockBufferOut);
            if (v71 == CMBlockBufferGetTypeID())
              FigXPCMessageSetBlockBuffer();
          }
          goto LABEL_135;
        }
        v18 = FigXPCMessageSetCFObject();
      }
    }
    else
    {
      v18 = FigSignalErrorAt();
    }
  }
LABEL_143:
  v7 = v18;
LABEL_136:
  if (v80)
    CFRelease((CFTypeRef)v80);
LABEL_138:
  if (cf)
    CFRelease(cf);
  v15 = blockBufferOut;
  if (blockBufferOut)
LABEL_27:
    CFRelease(v15);
LABEL_28:
  if (v72)
    CFRelease(v72);
  if (v73)
    CFRelease(v73);
  return v7;
}

uint64_t manifoldServer_noReplyMessageHandler(int a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v5;
  uint64_t FigBaseObject;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  CFTypeRef v11;
  CFTypeRef v12;
  int v13;
  CFTypeRef cf;
  CFTypeRef v15;

  v13 = 0;
  v11 = 0;
  v12 = 0;
  OpCode = manifoldServer_copyManifoldAndCompanion(a1, a2, &v12, &v11);
  if ((_DWORD)OpCode || (OpCode = FigXPCMessageGetOpCode(), (_DWORD)OpCode))
  {
    v9 = OpCode;
  }
  else if (v13 == 1684632432)
  {
    cf = 0;
    v15 = 0;
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    v5 = manifoldServer_copyManifoldAndCompanion(a1, a2, &v15, &cf);
    if (!(_DWORD)v5)
    {
      FigBaseObject = FigManifoldGetFigBaseObject(v15);
      if (FigBaseObject)
      {
        v7 = FigBaseObject;
        v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v8)
          v8(v7);
      }
      v5 = FigXPCServerDisassociateObjectWithConnection();
    }
    v9 = v5;
    if (cf)
      CFRelease(cf);
    if (v15)
      CFRelease(v15);
  }
  else
  {
    v9 = 4294951138;
  }
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  return v9;
}

uint64_t manifoldServer_copyManifoldAndCompanion(int a1, xpc_object_t xdict, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;

  if (!xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]))
    return FigSignalErrorAt();
  v6 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v6)
    return v6;
  if (a3)
    *a3 = 0;
  v7 = 0;
  if (a4)
    *a4 = 0;
  return v7;
}

uint64_t manifoldServer_newTrackCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t, uint64_t, __int128 *, uint64_t);
  uint64_t v8;
  xpc_object_t empty;
  void *v10;
  uint64_t v11;
  __int128 v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);

  v13 = xmmword_1E2F81CF8;
  v14 = manifoldServer_trackEndedCallback;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v7)
  {
    v8 = v7(a1, a4, &v13, a2);
    if ((_DWORD)v8 || (v8 = manifoldServer_ensurePendingCallbacksState(a2), (_DWORD)v8))
    {
      v11 = v8;
    }
    else
    {
      empty = xpc_dictionary_create_empty();
      v10 = empty;
      if (empty)
      {
        xpc_dictionary_set_uint64(empty, "callbackType", 1uLL);
        FigXPCMessageSetInt32();
        FigXPCMessageSetInt32();
        xpc_array_append_value(*(xpc_object_t *)(a2 + 64), v10);
        v11 = 0;
      }
      else
      {
        v11 = FigSignalErrorAt();
      }
    }
  }
  else
  {
    v11 = 4294954514;
  }
  FigXPCRelease();
  return v11;
}

uint64_t manifoldServer_allNewTracksReadyCallback(uint64_t a1, uint64_t a2)
{
  xpc_object_t empty;
  void *v4;

  if (!manifoldServer_ensurePendingCallbacksState(a2))
  {
    empty = xpc_dictionary_create_empty();
    v4 = empty;
    if (empty)
    {
      xpc_dictionary_set_uint64(empty, "callbackType", 0);
      xpc_array_append_value(*(xpc_object_t *)(a2 + 64), v4);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  return FigXPCRelease();
}

uint64_t manifoldServer_errorCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  xpc_object_t empty;
  void *v6;
  uint64_t v7;

  v4 = manifoldServer_ensurePendingCallbacksState(a3);
  if ((_DWORD)v4)
  {
    v7 = v4;
  }
  else
  {
    empty = xpc_dictionary_create_empty();
    v6 = empty;
    if (empty)
    {
      xpc_dictionary_set_uint64(empty, "callbackType", 2uLL);
      FigXPCMessageSetInt32();
      FigXPCMessageSetOSStatus();
      FigXPCMessageSetCFDictionary();
      xpc_array_append_value(*(xpc_object_t *)(a3 + 64), v6);
      v7 = 0;
    }
    else
    {
      v7 = FigSignalErrorAt();
    }
  }
  FigXPCRelease();
  return v7;
}

void manifoldServer_companionDestructor(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void manifoldServerCompanion_finalize(_QWORD *a1)
{
  uint64_t FigBaseObject;
  uint64_t v3;
  void (*v4)(uint64_t);
  void *v5;
  void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  void *v16;

  FigBaseObject = FigManifoldGetFigBaseObject(a1[7]);
  if (FigBaseObject)
  {
    v3 = FigBaseObject;
    v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v4)
      v4(v3);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[2] = 0;
    xpc_release(v5);
  }
  v6 = (void *)a1[8];
  if (v6)
  {
    a1[8] = 0;
    xpc_release(v6);
  }
  v7 = (const void *)a1[4];
  if (v7)
  {
    CFRelease(v7);
    a1[4] = 0;
  }
  v8 = (const void *)a1[5];
  if (v8)
  {
    CFRelease(v8);
    a1[5] = 0;
  }
  v9 = (const void *)a1[7];
  if (v9)
  {
    CFRelease(v9);
    a1[7] = 0;
  }
  v10 = (const void *)a1[11];
  if (v10)
  {
    CFRelease(v10);
    a1[11] = 0;
  }
  v11 = (const void *)a1[9];
  if (v11)
  {
    CFRelease(v11);
    a1[9] = 0;
  }
  v12 = (const void *)a1[10];
  if (v12)
  {
    CFRelease(v12);
    a1[10] = 0;
  }
  v13 = (const void *)a1[12];
  if (v13)
  {
    CFRelease(v13);
    a1[12] = 0;
  }
  v14 = (const void *)a1[13];
  if (v14)
  {
    CFRelease(v14);
    a1[13] = 0;
  }
  v15 = (const void *)a1[14];
  if (v15)
  {
    CFRelease(v15);
    a1[14] = 0;
  }
  v16 = (void *)a1[6];
  if (v16)
  {
    os_release(v16);
    a1[6] = 0;
  }
}

CFStringRef manifoldServerCompanion_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigManifoldServerCompanion %p objectID %lld]"), a1, *(_QWORD *)(a1 + 24));
}

uint64_t manifoldServer_formatDescriptionOrDecryptorChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  xpc_object_t empty;
  void *v10;
  uint64_t ID;
  uint64_t v12;

  v8 = manifoldServer_ensurePendingCallbacksState(a3);
  if ((_DWORD)v8)
  {
    v12 = v8;
    goto LABEL_11;
  }
  empty = xpc_dictionary_create_empty();
  v10 = empty;
  if (!empty)
  {
    ID = FigSignalErrorAt();
    goto LABEL_14;
  }
  xpc_dictionary_set_uint64(empty, "callbackType", 3uLL);
  FigXPCMessageSetInt32();
  if (a4)
  {
    ID = FigXPCMessageSetFormatDescription();
    if ((_DWORD)ID)
      goto LABEL_14;
  }
  if (a5)
  {
    FigBasicAESCPECryptorGetClassID();
    if (CMBaseObjectIsMemberOfClass())
    {
      xpc_dictionary_set_BOOL(v10, "useDummyAESCryptor", 1);
LABEL_9:
      xpc_dictionary_set_uint64(v10, "cryptorObjectID", 0);
      goto LABEL_10;
    }
    ID = FigCPECryptorRemoteGetID();
    if (!(_DWORD)ID)
      goto LABEL_9;
LABEL_14:
    v12 = ID;
    goto LABEL_11;
  }
LABEL_10:
  xpc_array_append_value(*(xpc_object_t *)(a3 + 64), v10);
  v12 = 0;
LABEL_11:
  FigXPCRelease();
  return v12;
}

uint64_t manifoldServer_pushSampleBufferCallback(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int64_t a5, const void *a6)
{
  uint64_t v10;
  xpc_object_t empty;
  void *v12;
  uint64_t v13;

  v10 = manifoldServer_ensurePendingCallbacksState(a3);
  if ((_DWORD)v10)
  {
    v13 = v10;
  }
  else
  {
    empty = xpc_dictionary_create_empty();
    v12 = empty;
    if (empty)
    {
      xpc_dictionary_set_uint64(empty, "callbackType", 4uLL);
      FigXPCMessageSetInt32();
      xpc_dictionary_set_uint64(v12, "pushSampleFlags", a4);
      xpc_dictionary_set_int64(v12, "dataStartReference", a5);
      v13 = FigXPCMessageAddCMSampleBuffer();
      if (!(_DWORD)v13)
      {
        xpc_array_append_value(*(xpc_object_t *)(a3 + 64), v12);
        CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 88), a6);
      }
    }
    else
    {
      v13 = FigSignalErrorAt();
    }
  }
  FigXPCRelease();
  return v13;
}

uint64_t manifoldServer_trackEndedCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  xpc_object_t empty;
  void *v6;
  uint64_t v7;

  v4 = manifoldServer_ensurePendingCallbacksState(a3);
  if ((_DWORD)v4)
  {
    v7 = v4;
  }
  else
  {
    empty = xpc_dictionary_create_empty();
    v6 = empty;
    if (empty)
    {
      xpc_dictionary_set_uint64(empty, "callbackType", 5uLL);
      FigXPCMessageSetInt32();
      FigXPCMessageSetOSStatus();
      xpc_array_append_value(*(xpc_object_t *)(a3 + 64), v6);
      v7 = 0;
    }
    else
    {
      v7 = FigSignalErrorAt();
    }
  }
  FigXPCRelease();
  return v7;
}

uint64_t manifoldServer_ensurePendingCallbacksState(uint64_t a1)
{
  xpc_object_t empty;

  if (*(_QWORD *)(a1 + 64))
    return 0;
  empty = xpc_array_create_empty();
  *(_QWORD *)(a1 + 64) = empty;
  if (empty)
    return 0;
  else
    return FigSignalErrorAt();
}

void manifoldServer_copyPendingCallbacksIntoReply(void *a1, uint64_t a2)
{
  void *v2;
  void *v4;

  v2 = *(void **)(a2 + 64);
  if (v2)
  {
    xpc_dictionary_set_value(a1, "pendingCallbacks", v2);
    v4 = *(void **)(a2 + 64);
    if (v4)
    {
      *(_QWORD *)(a2 + 64) = 0;
      xpc_release(v4);
    }
  }
}

uint64_t FigPlayerAsyncCreateWithOptions(uint64_t a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t Common;
  CFTypeRef v8;
  uint64_t DerivedStorage;
  BOOL v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t FigBaseObject;
  void (*v14)(uint64_t, __CFString *, CFTypeRef);
  void *value;
  CFTypeRef cf;
  CFTypeRef v18;

  cf = 0;
  v18 = 0;
  value = 0;
  if (!a4 || (*a4 = 0, !a2))
  {
    Common = FigSignalErrorAt();
LABEL_19:
    v11 = Common;
    goto LABEL_15;
  }
  Common = playerasync_createCommon();
  if ((_DWORD)Common)
    goto LABEL_19;
  v8 = v18;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  Common = FigNotificationCenterAddWeakListener();
  if ((_DWORD)Common)
    goto LABEL_19;
  *(_BYTE *)(DerivedStorage + 5) = 1;
  Common = fpa_checkSubPlayerHealth((uint64_t)a2);
  if ((_DWORD)Common)
    goto LABEL_19;
  if (a3)
  {
    CFDictionaryGetValueIfPresent(a3, CFSTR("InterstitialPrimaryPlayerName"), (const void **)&value);
    v10 = value != 0;
  }
  else
  {
    v10 = 0;
  }
  *(_BYTE *)(DerivedStorage + 144) = v10;
  v11 = FigDispatchQueueHolderCreateWithDispatchQueue();
  v12 = cf;
  if (!(_DWORD)v11)
  {
    FigBaseObject = FigPlayerGetFigBaseObject(a2);
    v14 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v14)
      v14(FigBaseObject, CFSTR("AsynchronousControlQueueHolder"), v12);
    *a4 = v8;
    v18 = 0;
    v12 = cf;
  }
  if (v12)
    CFRelease(v12);
LABEL_15:
  if (v18)
    CFRelease(v18);
  return v11;
}

uint64_t playerasync_createCommon()
{
  uint64_t v0;
  uint64_t v2;
  void *value;
  CFTypeRef cf;
  char __str[16];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  value = 0;
  cf = 0;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  *(_OWORD *)__str = 0u;
  FigKTraceInit();
  FigPlayerGetClassID();
  v0 = CMDerivedObjectCreate();
  if (!(_DWORD)v0)
    v0 = FigSignalErrorAt();
  v2 = v0;
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t fpa_checkSubPlayerHealth(uint64_t a1)
{
  uint64_t FigBaseObject;
  uint64_t (*v2)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  uint64_t v3;
  uint64_t v4;
  unsigned int valuePtr;
  CFNumberRef number;

  number = 0;
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v2 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v2)
  {
    v3 = v2(FigBaseObject, CFSTR("Status"), *MEMORY[0x1E0C9AE00], &number);
    if ((v3 + 12782) > 0xFFFFFFFD)
    {
      v4 = 0;
    }
    else
    {
      v4 = v3;
      if (!(_DWORD)v3)
      {
        if (!number)
          return 0;
        valuePtr = 0;
        CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
        v4 = valuePtr;
      }
    }
  }
  else
  {
    v4 = 4294954514;
  }
  if (number)
    CFRelease(number);
  return v4;
}

uint64_t FigPlayerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(FigBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t FigPlayerAsyncCreateWithEngineTopologyAndOptions(uint64_t a1, int a2, const void *a3, _QWORD *a4)
{
  uint64_t Common;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v15 = 0;
  v16 = 0;
  if (!a4)
  {
    v14 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v14;
  }
  *a4 = 0;
  Common = playerasync_createCommon();
  v8 = v16;
  if ((_DWORD)Common)
  {
    v12 = Common;
    v10 = 0;
    goto LABEL_13;
  }
  v9 = playerasync_createCommand(v16, 1, 0, &v15);
  v10 = (_QWORD *)v15;
  if ((_DWORD)v9)
  {
    v12 = v9;
LABEL_13:
    fpa_releaseCommand(v10);
    if (v8)
      CFRelease(v8);
    return v12;
  }
  *(_DWORD *)(v15 + 32) = a2 & 0xFFFFFFBF;
  if (a3)
    v11 = CFRetain(a3);
  else
    v11 = 0;
  v10[5] = v11;
  playerasync_runAsynchronousCommand(v8, v10);
  *a4 = v8;
  fpa_releaseCommand(0);
  return 0;
}

void playerasync_runAsynchronousCommand(void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402F228]();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 104));
  *a2 = 0;
  **(_QWORD **)(DerivedStorage + 120) = a2;
  *(_QWORD *)(DerivedStorage + 120) = a2;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 104));
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), a1, (dispatch_function_t)playerasync_runAsynchronousCommandOnQueue);
}

uint64_t FigPlayerAsyncCreateWithEngineTopology(uint64_t a1, int a2, _QWORD *a3)
{
  return FigPlayerAsyncCreateWithEngineTopologyAndOptions(a1, a2, 0, a3);
}

uint64_t FigPlayerAsyncDispatchToPlayerQueue(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;

  if (!a1)
    return FigSignalErrorAt();
  FigPlayerGetClassID();
  if (!CMBaseObjectIsMemberOfClass() || (_UNKNOWN *)CMBaseObjectGetVTable() != &kFigPlayerAsyncVTable)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_async(*(dispatch_queue_t *)(DerivedStorage + 56), a2);
  return 0;
}

void playerasync_InvalidateOnQueue(const void *a1)
{
  uint64_t DerivedStorage;
  void **i;
  const __CFSet *v4;
  const __CFSet *Copy;
  char v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 5))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_BYTE *)(DerivedStorage + 5) = 0;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 104));
  *(_OWORD *)v11 = *(_OWORD *)(DerivedStorage + 112);
  *(_QWORD *)(DerivedStorage + 112) = 0;
  *(_QWORD *)(DerivedStorage + 120) = DerivedStorage + 112;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 104));
  for (i = (void **)v11[0]; v11[0]; i = (void **)v11[0])
  {
    v11[0] = *i;
    if (!v11[0])
      v11[1] = v11;
    fpa_releaseCommand(i);
  }
  if (*(_QWORD *)(DerivedStorage + 24))
    FigCFWeakReferenceTableApplyFunction();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  v4 = *(const __CFSet **)(DerivedStorage + 32);
  if (!v4)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
    Copy = 0;
    goto LABEL_13;
  }
  Copy = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  if (!Copy)
  {
LABEL_13:
    v6 = 1;
    goto LABEL_14;
  }
  CFSetApplyFunction(Copy, (CFSetApplierFunction)playerasync_InvalidateItem, 0);
  v6 = 0;
LABEL_14:
  v7 = *(_QWORD *)(DerivedStorage + 16);
  if (v7)
  {
    FigBaseObject = FigPlayerGetFigBaseObject(v7);
    if (FigBaseObject)
    {
      v9 = FigBaseObject;
      v10 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v10)
        v10(v9);
    }
  }
  if ((v6 & 1) == 0)
    CFRelease(Copy);
  CFRelease(a1);
}

void playerasync_InvalidateItemTable(uint64_t a1, const void *a2)
{
  playerasync_InvalidateItem(a2);
}

void itemasync_InvalidateInternal(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t FigBaseObject;
  uint64_t v18;
  void (*v19)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
    v4 = CMBaseObjectGetDerivedStorage();
  else
    v4 = 0;
  if (*(_BYTE *)(DerivedStorage + 4))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_BYTE *)(DerivedStorage + 4) = 0;
  }
  if (v3)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 136));
    *(_DWORD *)(DerivedStorage + 8) = -12785;
    MEMORY[0x19402D920](*(_QWORD *)(v4 + 128));
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 136));
    if (*(_QWORD *)(DerivedStorage + 16))
    {
      FigCFWeakReferenceTableRemoveValue();
    }
    else
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 40));
      CFSetRemoveValue(*(CFMutableSetRef *)(v4 + 32), a1);
      MEMORY[0x19402EF04](*(_QWORD *)(v4 + 40));
    }
    v9 = CMBaseObjectGetDerivedStorage();
    if (!*(_DWORD *)v9)
    {
      v10 = v9;
      MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 104));
      for (i = *(uint64_t **)(v10 + 112); i; i = (uint64_t *)*i)
      {
        if ((const void *)i[2] == a1)
          *((_DWORD *)i + 6) |= 0x10000u;
      }
      v9 = MEMORY[0x19402EF04](*(_QWORD *)(v10 + 104));
    }
    if (*(_QWORD *)(DerivedStorage + 16))
    {
      v12 = *(_QWORD *)(v4 + 72);
      if (v12 == MEMORY[0x19402F228](v9))
      {
        FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
        if (FigBaseObject)
        {
          v18 = FigBaseObject;
          v19 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v19)
            v19(v18);
        }
      }
      else
      {
        v13 = MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 64));
        *(_QWORD *)(v4 + 72) = MEMORY[0x19402F228](v13);
        v14 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
        if (v14)
        {
          v15 = v14;
          v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v16)
            v16(v15);
        }
        *(_QWORD *)(v4 + 72) = 0;
        MEMORY[0x19402EF04](*(_QWORD *)(v4 + 64));
      }
    }
    playerasync_removeItemFromPlayQueueWithoutInformingSubPlayer((uint64_t)v3, a1);
    CFRelease(v3);
  }
  else
  {
    v5 = *(_QWORD *)(DerivedStorage + 16);
    if (v5)
    {
      v6 = FigPlaybackItemGetFigBaseObject(v5);
      if (v6)
      {
        v7 = v6;
        v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v8)
          v8(v7);
      }
    }
  }
}

void playerasync_runSynchronousCommand(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    a2[7] = FigSignalErrorAt();
  }
  else
  {
    v4 = DerivedStorage;
    v5 = *(_QWORD *)(DerivedStorage + 72);
    if (v5 == MEMORY[0x19402F228]())
      playerasync_runSynchronousCommandOnQueue((uint64_t)a2);
    else
      dispatch_sync_f(*(dispatch_queue_t *)(v4 + 56), a2, (dispatch_function_t)playerasync_runSynchronousCommandOnQueue);
  }
}

void playerasync_runImmediateCommand(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    *(_DWORD *)(a2 + 28) = FigSignalErrorAt();
  }
  else
  {
    v7 = DerivedStorage;
    v8 = *(_QWORD *)(DerivedStorage + 72);
    if (v8 == MEMORY[0x19402F228]())
    {
      playerasync_runOneCommand(a1, a2);
    }
    else
    {
      if (a3)
      {
        if (FigSimpleMutexTryLock())
        {
LABEL_5:
          *(_QWORD *)(v7 + 72) = MEMORY[0x19402F228]();
          playerasync_runOneCommand(a1, a2);
          *(_QWORD *)(v7 + 72) = 0;
          JUMPOUT(0x19402EF04);
        }
      }
      else if (!MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 64)))
      {
        goto LABEL_5;
      }
      *(_DWORD *)(a2 + 28) = -12783;
    }
  }
}

uint64_t playerasync_runSynchronousCommandOnQueue(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)DerivedStorage)
  {
    v4 = DerivedStorage;
    v5 = MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
    *(_QWORD *)(v4 + 72) = MEMORY[0x19402F228](v5);
    playerasync_runOneCommand(v2, a1);
    *(_QWORD *)(v4 + 72) = 0;
    JUMPOUT(0x19402EF04);
  }
  result = FigSignalErrorAt();
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

void playerasync_runOneCommand(const void *a1, uint64_t a2)
{
  _DWORD *DerivedStorage;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  const void *v8;
  CFAllocatorRef v9;
  int v10;
  char v11;
  int SubItem;
  CFTypeRef v13;
  int v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t (*v17)(uint64_t, __int128 *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  int v24;
  const void *v25;
  __CFSet *v26;
  uint64_t v27;
  float v28;
  uint64_t (*v29)(uint64_t, float);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  unsigned __int32 v34;
  uint64_t (*v35)(uint64_t, __int128 *, __n128);
  __int128 *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, float);
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int32 v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, float, float);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, __n128 *, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  int v95;
  __int128 v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  CFTypeRef cf;
  __n128 v101;
  uint64_t v102;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  *(_DWORD *)(a2 + 28) = 0;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x10000) == 0)
  {
    v6 = DerivedStorage;
    if (*DerivedStorage)
    {
      *(_DWORD *)(a2 + 28) = FigSignalErrorAt();
      return;
    }
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = CMBaseObjectGetDerivedStorage();
      v5 = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v7 = 0;
    }
    if (v5 == 1)
    {
      v8 = *(const void **)(a2 + 16);
      if (!v8)
      {
LABEL_9:
        v9 = CFGetAllocator(a1);
        v10 = FigSharedPlayerCreateWithOptions(v9, *(_DWORD *)(a2 + 32) & 0xFFFFFFBF, *(_QWORD *)(a2 + 40), &cf);
        *(_DWORD *)(a2 + 28) = v10;
        if (v10
          || (CMNotificationCenterGetDefaultLocalCenter(),
              v10 = FigNotificationCenterAddWeakListener(),
              (*(_DWORD *)(a2 + 28) = v10) != 0))
        {
          MEMORY[0x19402EEEC](*((_QWORD *)v6 + 17));
        }
        else
        {
          *((_BYTE *)v6 + 5) = 1;
          v10 = fpa_checkSubPlayerHealth((uint64_t)cf);
          *(_DWORD *)(a2 + 28) = v10;
          MEMORY[0x19402EEEC](*((_QWORD *)v6 + 17));
          if (!v10)
          {
            v13 = cf;
            if (cf)
              v13 = CFRetain(cf);
            v10 = 0;
            *((_QWORD *)v6 + 2) = v13;
            v11 = 1;
            goto LABEL_13;
          }
        }
        v11 = 0;
LABEL_13:
        v6[2] = v10;
        MEMORY[0x19402D920](*((_QWORD *)v6 + 16));
        MEMORY[0x19402EF04](*((_QWORD *)v6 + 17));
        if ((v11 & 1) == 0)
          playerasync_postPlayerStatusChanged();
LABEL_113:
        if (cf)
          CFRelease(cf);
        return;
      }
    }
    else
    {
      if (!*((_QWORD *)v6 + 2))
        goto LABEL_124;
      v8 = *(const void **)(a2 + 16);
      if (!v8)
      {
LABEL_21:
        switch(v5)
        {
          case 1:
            goto LABEL_9;
          case 2:
            playerasync_runCopyPropertyCommand(a2);
            goto LABEL_113;
          case 3:
            v14 = FigPlayerSetProperty(*((_QWORD *)v6 + 2), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
            goto LABEL_112;
          case 4:
            v15 = *((_QWORD *)v6 + 2);
            v16 = *(__int128 **)(a2 + 32);
            v17 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 112);
            if (!v17)
              goto LABEL_111;
            goto LABEL_76;
          case 6:
            if (*(_QWORD *)(a2 + 32))
            {
              v18 = CMBaseObjectGetDerivedStorage();
              v19 = *((_QWORD *)v6 + 2);
              v20 = *(_QWORD *)(v7 + 16);
              if (v18)
                v21 = *(_QWORD *)(v18 + 16);
              else
                v21 = 0;
            }
            else
            {
              v21 = 0;
              v19 = *((_QWORD *)v6 + 2);
              v20 = *(_QWORD *)(v7 + 16);
            }
            v94 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (!v94)
              goto LABEL_122;
            v95 = v94(v19, v20, v21);
            *(_DWORD *)(a2 + 28) = v95;
            if (!v95 && !*v6)
              CFSetAddValue(*((CFMutableSetRef *)v6 + 6), *(const void **)(a2 + 16));
            goto LABEL_113;
          case 7:
            v22 = *((_QWORD *)v6 + 2);
            if (v7)
              v7 = *(_QWORD *)(v7 + 16);
            v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (v23)
            {
              v24 = v23(v22, v7);
              *(_DWORD *)(a2 + 28) = v24;
              if (!v24 && !*v6)
              {
                v25 = *(const void **)(a2 + 16);
                v26 = (__CFSet *)*((_QWORD *)v6 + 6);
                if (v25)
                  CFSetRemoveValue(v26, v25);
                else
                  CFSetRemoveAllValues(v26);
              }
            }
            else
            {
LABEL_122:
              *(_DWORD *)(a2 + 28) = -12782;
            }
            goto LABEL_113;
          case 8:
            playerasync_runCopyPlayQueueItemCommand(a2);
            goto LABEL_113;
          case 9:
            v27 = *((_QWORD *)v6 + 2);
            v28 = *(float *)(a2 + 32);
            v29 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (!v29)
              goto LABEL_111;
            v14 = v29(v27, v28);
            goto LABEL_112;
          case 10:
            v30 = *((_QWORD *)v6 + 2);
            v31 = *(_QWORD *)(a2 + 32);
            v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (!v32)
              goto LABEL_111;
            goto LABEL_72;
          case 11:
            v33 = *((_QWORD *)v6 + 2);
            v34 = *(_DWORD *)(a2 + 32);
            v98 = *(__n128 *)(a2 + 36);
            v99 = *(_QWORD *)(a2 + 52);
            v35 = *(uint64_t (**)(uint64_t, __int128 *, __n128))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 56);
            if (!v35)
              goto LABEL_111;
            v38 = v98;
            v101 = v98;
            v102 = v99;
            v36 = (__int128 *)&v101;
            v37 = v33;
            v38.n128_u32[0] = v34;
            goto LABEL_54;
          case 12:
            v39 = *((_QWORD *)v6 + 2);
            v40 = *(float *)(a2 + 32);
            v41 = *(unsigned int *)(a2 + 36);
            v42 = *(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
            if (!v42)
              goto LABEL_111;
            v14 = v42(v39, v41, v40);
            goto LABEL_112;
          case 13:
            v30 = *((_QWORD *)v6 + 2);
            v31 = *(unsigned int *)(a2 + 32);
            v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
            if (!v32)
              goto LABEL_111;
            goto LABEL_72;
          case 15:
            v43 = *((_QWORD *)v6 + 2);
            v44 = *(float *)(a2 + 32);
            v45 = *(unsigned int *)(a2 + 84);
            v101 = *(__n128 *)(a2 + 36);
            v102 = *(_QWORD *)(a2 + 52);
            v98 = *(__n128 *)(a2 + 60);
            v99 = *(_QWORD *)(a2 + 76);
            v14 = FigPlayerSetRateAndAnchorTime(v43, (__int128 *)&v101, (__int128 *)&v98, v45, v44);
            goto LABEL_112;
          case 16:
            goto LABEL_18;
          case 17:
            v46 = *((_QWORD *)v6 + 2);
            v47 = *(_DWORD *)(a2 + 32);
            v48 = *(__int128 **)(a2 + 64);
            v35 = *(uint64_t (**)(uint64_t, __int128 *, __n128))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 104);
            if (!v35)
              goto LABEL_111;
            v37 = v46;
            v38.n128_u32[0] = v47;
            v36 = v48;
LABEL_54:
            v14 = v35(v37, v36, v38);
            goto LABEL_112;
          case 18:
            v30 = *((_QWORD *)v6 + 2);
            v31 = *(_QWORD *)(a2 + 32);
            v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
            if (!v32)
              goto LABEL_111;
            goto LABEL_72;
          case 19:
            v30 = *((_QWORD *)v6 + 2);
            v31 = *(_QWORD *)(a2 + 32);
            v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
            if (!v32)
              goto LABEL_111;
            goto LABEL_72;
          case 20:
            v49 = *((_QWORD *)v6 + 2);
            v50 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
            if (!v50)
              goto LABEL_111;
            v51 = *(uint64_t (**)(uint64_t))(v50 + 8);
            if (!v51)
              goto LABEL_111;
            v14 = v51(v49);
            goto LABEL_112;
          case 21:
            v30 = *((_QWORD *)v6 + 2);
            v31 = *(_QWORD *)(a2 + 32);
            v52 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
            if (!v52)
              goto LABEL_111;
            goto LABEL_80;
          case 22:
            v30 = *((_QWORD *)v6 + 2);
            v31 = *(unsigned __int8 *)(a2 + 32);
            v53 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
            if (!v53)
              goto LABEL_111;
            v32 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 24);
            if (!v32)
              goto LABEL_111;
            goto LABEL_72;
          case 23:
            v54 = *((_QWORD *)v6 + 2);
            v55 = *(unsigned __int8 *)(a2 + 32);
            v56 = *(float *)(a2 + 36);
            v57 = *(float *)(a2 + 40);
            v58 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
            if (!v58)
              goto LABEL_111;
            v59 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v58 + 8);
            if (!v59)
              goto LABEL_111;
            v14 = v59(v54, v55, v56, v57);
            goto LABEL_112;
          case 24:
            v30 = *((_QWORD *)v6 + 2);
            v31 = *(unsigned __int8 *)(a2 + 32);
            v60 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
            if (v60)
            {
              v32 = *(uint64_t (**)(uint64_t, uint64_t))(v60 + 16);
              if (v32)
                goto LABEL_72;
            }
            goto LABEL_111;
          case 25:
            v14 = FigPlaybackItemCopyProperty(*(_QWORD *)(v7 + 16), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
            goto LABEL_112;
          case 26:
            v14 = FigPlaybackItemSetProperty(*(_QWORD *)(v7 + 16), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
            goto LABEL_112;
          case 27:
            v15 = *(_QWORD *)(v7 + 16);
            v16 = *(__int128 **)(a2 + 32);
            v17 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 160);
            if (!v17)
              goto LABEL_111;
LABEL_76:
            v61 = a2 + 40;
            v62 = v15;
            v63 = v16;
            goto LABEL_103;
          case 28:
            v64 = *(_QWORD *)(v7 + 16);
            v65 = *(__int128 **)(a2 + 32);
            v66 = *(_QWORD *)(a2 + 40);
            v17 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8);
            if (!v17)
              goto LABEL_111;
            goto LABEL_89;
          case 29:
            v30 = *(_QWORD *)(v7 + 16);
            v31 = *(_QWORD *)(a2 + 32);
            v52 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
LABEL_80:
            v32 = *(uint64_t (**)(uint64_t, uint64_t))(v52 + 16);
            if (!v32)
              goto LABEL_111;
            goto LABEL_72;
          case 30:
            v67 = *(_QWORD *)(v7 + 16);
            v68 = *(unsigned int *)(a2 + 56);
            v98 = *(__n128 *)(a2 + 32);
            v99 = *(_QWORD *)(a2 + 48);
            v17 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
            if (!v17)
              goto LABEL_111;
            v101 = v98;
            v102 = v99;
            v63 = (__int128 *)&v101;
            v62 = v67;
            v61 = v68;
            goto LABEL_103;
          case 31:
            v30 = *(_QWORD *)(v7 + 16);
            v31 = *(_QWORD *)(a2 + 32);
            v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            if (!v32)
              goto LABEL_111;
            goto LABEL_72;
          case 32:
            v69 = *(_QWORD *)(v7 + 16);
            v70 = *(unsigned int *)(a2 + 32);
            v71 = *(_QWORD *)(a2 + 40);
            v72 = *(_QWORD *)(a2 + 48);
            v73 = *(_QWORD *)(a2 + 56);
            v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 40);
            if (!v74)
              goto LABEL_111;
            v14 = v74(v69, v70, v71, v72, v73);
            goto LABEL_112;
          case 33:
            v64 = *(_QWORD *)(v7 + 16);
            v65 = *(__int128 **)(a2 + 32);
            v66 = *(_QWORD *)(a2 + 40);
            v17 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 48);
            if (!v17)
              goto LABEL_111;
LABEL_89:
            v62 = v64;
            v63 = v65;
            v61 = v66;
            goto LABEL_103;
          case 35:
            v75 = *(_QWORD *)(v7 + 16);
            v76 = *(_QWORD *)(a2 + 32);
            v77 = *(_QWORD *)(a2 + 40);
            v78 = *(_QWORD *)(a2 + 48);
            v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 64);
            if (!v79)
              goto LABEL_111;
            goto LABEL_108;
          case 36:
            v75 = *(_QWORD *)(v7 + 16);
            v76 = *(_QWORD *)(a2 + 32);
            v77 = *(_QWORD *)(a2 + 40);
            v78 = *(_QWORD *)(a2 + 48);
            v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 72);
            if (v79)
              goto LABEL_108;
            goto LABEL_111;
          case 37:
            v80 = *(_QWORD *)(v7 + 16);
            v81 = *(unsigned int *)(a2 + 56);
            v82 = *(_QWORD *)(a2 + 64);
            v98 = *(__n128 *)(a2 + 32);
            v99 = *(_QWORD *)(a2 + 48);
            v83 = *(uint64_t (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 80);
            if (!v83)
              goto LABEL_111;
            v101 = v98;
            v102 = v99;
            v14 = v83(v80, &v101, v81, v82);
            goto LABEL_112;
          case 40:
            v84 = *(_QWORD *)(v7 + 16);
            v85 = *(unsigned int *)(a2 + 56);
            v101 = *(__n128 *)(a2 + 32);
            v102 = *(_QWORD *)(a2 + 48);
            v98 = *(__n128 *)(a2 + 60);
            v99 = *(_QWORD *)(a2 + 76);
            v96 = *(_OWORD *)(a2 + 84);
            v97 = *(_QWORD *)(a2 + 100);
            v14 = FigPlaybackItemSetCurrentTimeWithRange(v84, (__int128 *)&v101, v85, (__int128 *)&v98, &v96);
            goto LABEL_112;
          case 41:
            v75 = *(_QWORD *)(v7 + 16);
            v76 = *(unsigned int *)(a2 + 32);
            v77 = *(_QWORD *)(a2 + 40);
            v78 = *(_QWORD *)(a2 + 48);
            v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 112);
            if (v79)
              goto LABEL_108;
            goto LABEL_111;
          case 42:
            v30 = *(_QWORD *)(v7 + 16);
            v31 = *(_QWORD *)(a2 + 32);
            v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
            if (!v32)
              goto LABEL_111;
            goto LABEL_72;
          case 43:
            v86 = *(_QWORD *)(v7 + 16);
            v87 = *(__int128 **)(a2 + 32);
            v88 = *(unsigned int *)(a2 + 40);
            v17 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 128);
            if (!v17)
              goto LABEL_111;
            v62 = v86;
            v63 = v87;
            v61 = v88;
            goto LABEL_103;
          case 44:
            v89 = *(_QWORD *)(v7 + 16);
            v90 = *(unsigned int *)(a2 + 56);
            v91 = *(unsigned int *)(a2 + 108);
            v101 = *(__n128 *)(a2 + 32);
            v102 = *(_QWORD *)(a2 + 48);
            v98 = *(__n128 *)(a2 + 60);
            v99 = *(_QWORD *)(a2 + 76);
            v96 = *(_OWORD *)(a2 + 84);
            v97 = *(_QWORD *)(a2 + 100);
            v14 = FigPlaybackItemSetCurrentTimeWithRangeAndID(v89, (__int128 *)&v101, v90, (__int128 *)&v98, &v96, v91);
            goto LABEL_112;
          case 45:
            v30 = *(_QWORD *)(v7 + 16);
            v31 = *(_QWORD *)(a2 + 32);
            v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
            if (!v32)
              goto LABEL_111;
LABEL_72:
            v14 = v32(v30, v31);
            goto LABEL_112;
          case 46:
            v75 = *(_QWORD *)(v7 + 16);
            v76 = *(unsigned int *)(a2 + 32);
            v77 = *(unsigned int *)(a2 + 36);
            v78 = *(_QWORD *)(a2 + 40);
            v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 168);
            if (!v79)
              goto LABEL_111;
LABEL_108:
            v14 = v79(v75, v76, v77, v78);
            goto LABEL_112;
          case 47:
            v92 = *(_QWORD *)(v7 + 16);
            v98 = *(__n128 *)(a2 + 32);
            v93 = *(_QWORD *)(a2 + 56);
            v99 = *(_QWORD *)(a2 + 48);
            v17 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 176);
            if (v17)
            {
              v101 = v98;
              v102 = v99;
              v63 = (__int128 *)&v101;
              v62 = v92;
              v61 = v93;
LABEL_103:
              v14 = v17(v62, v63, v61);
            }
            else
            {
LABEL_111:
              v14 = -12782;
            }
            goto LABEL_112;
          default:
            goto LABEL_113;
        }
      }
      if (v5 == 16)
      {
LABEL_18:
        SubItem = playerasync_createSubItem((uint64_t)a1, v8, *(_QWORD *)(a2 + 32), *(unsigned int *)(a2 + 40), *(_QWORD *)(a2 + 48));
        *(_DWORD *)(a2 + 28) = SubItem;
        if (SubItem)
          itemasync_postItemStatusChanged();
        goto LABEL_113;
      }
    }
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_21;
LABEL_124:
    v14 = FigSignalErrorAt();
LABEL_112:
    *(_DWORD *)(a2 + 28) = v14;
    goto LABEL_113;
  }
}

void playerasync_postPlayerStatusChanged()
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v1 = Mutable;
    if (!FigCFDictionarySetInt32())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t playerasync_runCopyPropertyCommand(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  CFTypeRef *v4;
  _QWORD *DerivedStorage;
  uint64_t result;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const void *, uint64_t, CFTypeRef *);
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, const void *, uint64_t, CFTypeRef *);

  v3 = *(const void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(CFTypeRef **)(a1 + 48);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage[2])
  {
    result = FigSignalErrorAt();
    goto LABEL_16;
  }
  if (!CFEqual(v3, CFSTR("SynchronizedNULL")))
  {
    if (CFEqual(v3, CFSTR("UserVolume")))
    {
      MEMORY[0x19402EEEC](DerivedStorage[10]);
      v7 = (CFTypeRef)DerivedStorage[11];
      if (v7)
        v7 = CFRetain(v7);
      *v4 = v7;
      MEMORY[0x19402EF04](DerivedStorage[10]);
      if (*v4)
      {
LABEL_8:
        result = 0;
        goto LABEL_16;
      }
      FigBaseObject = FigPlayerGetFigBaseObject(DerivedStorage[2]);
      v11 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
      if (v11)
      {
        result = v11(FigBaseObject, v3, v2, v4);
        if ((_DWORD)result)
          goto LABEL_16;
        if (*v4)
        {
          MEMORY[0x19402EEEC](DerivedStorage[10]);
          DerivedStorage[11] = CFRetain(*v4);
          MEMORY[0x19402EF04](DerivedStorage[10]);
        }
        goto LABEL_8;
      }
    }
    else
    {
      v8 = FigPlayerGetFigBaseObject(DerivedStorage[2]);
      v9 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
      if (v9)
      {
        result = v9(v8, v3, v2, v4);
        goto LABEL_16;
      }
    }
    result = 4294954514;
    goto LABEL_16;
  }
  result = 0;
  *v4 = 0;
LABEL_16:
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

void playerasync_runCopyPlayQueueItemCommand(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 16);
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v2)
  {
    v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
    if (!v2)
    {
      v6 = FigSignalErrorAt();
      goto LABEL_13;
    }
  }
  v4 = *(_QWORD *)(DerivedStorage + 16);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v5)
  {
    v8 = 0;
    v6 = -12782;
    goto LABEL_14;
  }
  v6 = v5(v4, v2, &cf);
  v7 = cf;
  if (!cf)
  {
LABEL_13:
    v8 = 0;
    goto LABEL_14;
  }
  if (*(_DWORD *)DerivedStorage)
  {
    v8 = 0;
    v6 = -12785;
  }
  else
  {
    v8 = FigCFWeakReferenceTableCopyValue();
    if (!v8)
      v6 = -12785;
    v7 = cf;
  }
  CFRelease(v7);
LABEL_14:
  *(_DWORD *)(a1 + 28) = v6;
  **(_QWORD **)(a1 + 32) = v8;
}

uint64_t FigPlayerSetRateAndAnchorTime(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, float a5)
{
  uint64_t (*v10)(uint64_t, __int128 *, __int128 *, uint64_t, float);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v10 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 88);
  if (!v10)
    return 4294954514;
  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  v12 = *a3;
  v13 = *((_QWORD *)a3 + 2);
  return v10(a1, &v14, &v12, a4, a5);
}

uint64_t playerasync_createSubItem(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v11 = *(_QWORD *)(DerivedStorage + 16);
  if (v11 && a3)
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 96);
    if (v12)
    {
      v13 = v12(v11, a3, a4, a5, &cf);
      if (!(_DWORD)v13)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        v14 = FigNotificationCenterAddWeakListener();
        if (!(_DWORD)v14)
        {
          *(_BYTE *)(v10 + 4) = 1;
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
          CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 32), a2);
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
          FigCFWeakReferenceTableAddValueAssociatedWithKey();
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
          v15 = cf;
          if (cf)
            v15 = CFRetain(cf);
          goto LABEL_8;
        }
        v13 = v14;
      }
    }
    else
    {
      v13 = 4294954514;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
  }
  else
  {
    v13 = FigSignalErrorAt();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
    if (!(_DWORD)v13)
    {
      v15 = 0;
LABEL_8:
      v13 = 0;
      *(_QWORD *)(v10 + 16) = v15;
    }
  }
  *(_DWORD *)(v10 + 8) = v13;
  MEMORY[0x19402D920](*(_QWORD *)(DerivedStorage + 128));
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 136));
  if (cf)
    CFRelease(cf);
  return v13;
}

void itemasync_postItemStatusChanged()
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v1 = Mutable;
    if (!FigCFDictionarySetInt32())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigPlaybackItemCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 48);
  if (v9)
    return v9(FigBaseObject, a2, a3, a4);
  return result;
}

uint64_t FigPlaybackItemSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(FigBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t FigPlaybackItemSetCurrentTimeWithRange(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t (*v10)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v10 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 104);
  if (!v10)
    return 4294954514;
  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v14 = *a4;
  v15 = *((_QWORD *)a4 + 2);
  v12 = *a5;
  v13 = *((_QWORD *)a5 + 2);
  return v10(a1, &v16, a3, &v14, &v12);
}

uint64_t FigPlaybackItemSetCurrentTimeWithRangeAndID(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  uint64_t (*v12)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t);
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v12 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 144);
  if (!v12)
    return 4294954514;
  v18 = *a2;
  v19 = *((_QWORD *)a2 + 2);
  v16 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v14 = *a5;
  v15 = *((_QWORD *)a5 + 2);
  return v12(a1, &v18, a3, &v16, &v14, a6);
}

uint64_t playerasync_handleSetProperty(const void *a1, uint64_t a2, const void *a3, const void *a4, _BYTE *a5, CFTypeRef *a6, _QWORD *a7)
{
  _DWORD *DerivedStorage;
  _DWORD *v14;
  const void *v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v19;
  CFTypeRef v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t v23;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage && a3)
  {
    v14 = DerivedStorage;
    if (CFEqual(CFSTR("WantsVolumeChangesWhenPausedOrInactive"), a3))
    {
      MEMORY[0x19402EEEC](*((_QWORD *)v14 + 10));
      v15 = (const void *)*((_QWORD *)v14 + 11);
      if (v15)
      {
        CFRelease(v15);
        *((_QWORD *)v14 + 11) = 0;
      }
      MEMORY[0x19402EF04](*((_QWORD *)v14 + 10));
    }
    else if (CFEqual(CFSTR("OnMediaServer"), a3))
    {
      *((_BYTE *)v14 + 4) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
    }
    else if (CFEqual(CFSTR("AudioDeviceUID"), a3))
    {
      v23 = 0;
      v19 = playerasync_createCommand(a1, 3, 0, &v23);
      if ((_DWORD)v19)
        return v19;
      v20 = CFRetain(a3);
      v21 = v23;
      *(_QWORD *)(v23 + 32) = v20;
      if (a4)
        v22 = CFRetain(a4);
      else
        v22 = 0;
      *(_QWORD *)(v21 + 40) = v22;
      playerasync_runSynchronousCommand((uint64_t)a1, (_DWORD *)v21);
      v17 = *(unsigned int *)(v21 + 28);
      fpa_releaseCommand((_QWORD *)v21);
      *a5 = 1;
      return v17;
    }
    *a5 = 0;
    *a6 = CFRetain(a3);
    if (a4)
      v16 = CFRetain(a4);
    else
      v16 = 0;
    *a7 = v16;
    if (CFEqual(a3, CFSTR("UserVolume")) || CFEqual(a3, CFSTR("UserMuted")) || CFEqual(a3, CFSTR("EQPreset")))
      playerasync_cancelQueuedCommandsMatching(a1, 3u, 0);
    return 0;
  }
  return FigSignalErrorAt();
}

void playerasync_cancelQueuedCommandsMatching(const void *a1, unsigned int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  _QWORD *v10;
  _QWORD *i;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v14 = 0;
  v15 = &v14;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 104));
  v7 = *(uint64_t **)(DerivedStorage + 112);
  if (v7)
  {
    while (1)
    {
      if (*((_DWORD *)v7 + 6) != a2 || (const void *)v7[2] != a3)
        goto LABEL_21;
      if (a2 != 26)
      {
        v8 = a2;
        if (a2 != 3)
          goto LABEL_8;
      }
      if (FigCFEqual())
        break;
LABEL_21:
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_22;
    }
    v8 = *((_DWORD *)v7 + 6);
LABEL_8:
    if (v8 > 0x2F || ((1 << v8) & 0x980000000000) == 0)
    {
LABEL_20:
      *((_DWORD *)v7 + 6) = v8 | 0x10000;
      goto LABEL_21;
    }
    v12 = 0;
    switch(v8)
    {
      case '+':
        v9 = *((_DWORD *)v7 + 10);
        break;
      case '/':
        FigCFDictionaryGetInt32IfPresent();
        goto LABEL_17;
      case ',':
        v9 = *((_DWORD *)v7 + 27);
        break;
      default:
LABEL_17:
        playerasync_createCommand(a1, 44, a3, &v13);
        v10 = (_QWORD *)v13;
        if (v13)
        {
          *(_DWORD *)(v13 + 108) = v12;
          *v10 = 0;
          *v15 = v10;
          v15 = v10;
        }
        v8 = *((_DWORD *)v7 + 6);
        goto LABEL_20;
    }
    v12 = v9;
    goto LABEL_17;
  }
LABEL_22:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 104));
  for (i = v14; v14; i = v14)
  {
    v14 = (_QWORD *)*i;
    if (!v14)
      v15 = &v14;
    itemasync_postSeekWasCanceled();
    fpa_releaseCommand(i);
  }
}

void itemasync_postSeekWasCanceled()
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v1 = Mutable;
    if (!FigCFDictionarySetInt32())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t playerasync_CopyPlayQueueItem(const void *a1, const void *a2, _QWORD *a3)
{
  _DWORD *DerivedStorage;
  _DWORD *v7;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v7 = (_DWORD *)CMBaseObjectGetDerivedStorage();
    if (a3)
      goto LABEL_3;
    return FigSignalErrorAt();
  }
  v7 = 0;
  if (!a3)
    return FigSignalErrorAt();
LABEL_3:
  *a3 = 0;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (v7)
  {
    if (*v7)
      return FigSignalErrorAt();
    v9 = FigCFWeakReferenceHolderCopyReferencedObject();
    v10 = a1;
    if ((const void *)v9 != a1)
    {
      v10 = (const void *)v9;
      v11 = FigSignalErrorAt();
      v12 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v10 = 0;
  }
  v13 = playerasync_createCommand(a1, 8, a2, &v14);
  v12 = (_DWORD *)v14;
  if ((_DWORD)v13)
  {
    v11 = v13;
  }
  else
  {
    *(_QWORD *)(v14 + 32) = a3;
    playerasync_runSynchronousCommand((uint64_t)a1, v12);
    v11 = v12[7];
  }
LABEL_14:
  fpa_releaseCommand(v12);
  if (v10)
    CFRelease(v10);
  return v11;
}

uint64_t playerasync_SetRateWithFade(void *a1, __int128 *a2, float a3)
{
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  void *v10;

  v10 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v7 = playerasync_createCommand(a1, 11, 0, &v10);
  v8 = v10;
  if (!(_DWORD)v7)
  {
    *((float *)v10 + 8) = a3;
    v9 = *a2;
    *(_QWORD *)((char *)v8 + 52) = *((_QWORD *)a2 + 2);
    *(_OWORD *)((char *)v8 + 36) = v9;
    playerasync_runAsynchronousCommand(a1, v8);
    v8 = 0;
  }
  fpa_releaseCommand(v8);
  return v7;
}

uint64_t playerasync_StartPreroll(void *a1, int a2, float a3)
{
  uint64_t v7;
  _QWORD *v8;
  void *v9;

  v9 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v7 = playerasync_createCommand(a1, 12, 0, &v9);
  v8 = v9;
  if (!(_DWORD)v7)
  {
    *((float *)v9 + 8) = a3;
    *((_DWORD *)v8 + 9) = a2;
    playerasync_runAsynchronousCommand(a1, v8);
    v8 = 0;
  }
  fpa_releaseCommand(v8);
  return v7;
}

uint64_t playerasync_StepByCount(void *a1, int a2)
{
  uint64_t v5;
  _QWORD *v6;
  void *v7;

  v7 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v5 = playerasync_createCommand(a1, 13, 0, &v7);
  v6 = v7;
  if (!(_DWORD)v5)
  {
    *((_DWORD *)v7 + 8) = a2;
    playerasync_runAsynchronousCommand(a1, v6);
    v6 = 0;
  }
  fpa_releaseCommand(v6);
  return v5;
}

uint64_t playerasync_SetRateAndAnchorTime(void *a1, __int128 *a2, __int128 *a3, int a4, float a5)
{
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  void *v15;

  v15 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v11 = playerasync_createCommand(a1, 15, 0, &v15);
  v12 = v15;
  if (!(_DWORD)v11)
  {
    *((float *)v15 + 8) = a5;
    v13 = *a2;
    *(_QWORD *)((char *)v12 + 52) = *((_QWORD *)a2 + 2);
    *(_OWORD *)((char *)v12 + 36) = v13;
    v14 = *a3;
    *(_QWORD *)((char *)v12 + 76) = *((_QWORD *)a3 + 2);
    *(_OWORD *)((char *)v12 + 60) = v14;
    *((_DWORD *)v12 + 21) = a4;
    playerasync_runAsynchronousCommand(a1, v12);
    v12 = 0;
  }
  fpa_releaseCommand(v12);
  return v11;
}

uint64_t playerasync_CreatePlaybackItemFromAsset(void *a1, const void *a2, int a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  _DWORD *v16;
  CFTypeRef v17;
  uint64_t v18;
  void *value;
  CFTypeRef cf;
  void *v21;

  cf = 0;
  v21 = 0;
  value = 0;
  if (!a5)
    return FigSignalErrorAt();
  *a5 = 0;
  CFGetAllocator(a1);
  FigPlaybackItemGetClassID();
  CMDerivedObjectCreate();
  if (!cf)
    goto LABEL_17;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 32) = 0;
  if (a4 && CFDictionaryGetValueIfPresent(a4, CFSTR("LoggingIdentifier"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 32), 10, 0x600u);
  v11 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 24) = v11;
  if (!v11)
  {
LABEL_17:
    v13 = FigSignalErrorAt();
LABEL_18:
    v18 = v13;
    if (cf)
      CFRelease(cf);
    goto LABEL_16;
  }
  *(_DWORD *)(DerivedStorage + 8) = 0;
  v12 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v12 + 40));
  CFSetAddValue(*(CFMutableSetRef *)(v12 + 32), cf);
  MEMORY[0x19402EF04](*(_QWORD *)(v12 + 40));
  v13 = playerasync_createCommand(a1, 16, cf, &v21);
  if ((_DWORD)v13)
    goto LABEL_18;
  if (a2)
    v14 = CFRetain(a2);
  else
    v14 = 0;
  v16 = v21;
  *((_QWORD *)v21 + 4) = v14;
  v16[10] = a3;
  if (a4)
    v17 = CFRetain(a4);
  else
    v17 = 0;
  *((_QWORD *)v16 + 6) = v17;
  playerasync_runAsynchronousCommand(a1, v16);
  v18 = 0;
  *a5 = cf;
  cf = 0;
  v21 = 0;
LABEL_16:
  fpa_releaseCommand(v21);
  return v18;
}

uint64_t playerasync_SetRateWithOptions(void *a1, const void *a2, float a3)
{
  uint64_t v7;
  _QWORD *v8;
  CFTypeRef v9;
  void *v10;

  v10 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v7 = playerasync_createCommand(a1, 17, 0, &v10);
  v8 = v10;
  if (!(_DWORD)v7)
  {
    *((float *)v10 + 8) = a3;
    if (a2)
      v9 = CFRetain(a2);
    else
      v9 = 0;
    v8[8] = v9;
    playerasync_runAsynchronousCommand(a1, v8);
    v8 = 0;
  }
  fpa_releaseCommand(v8);
  return v7;
}

uint64_t playerasync_SetProperties(void *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  _DWORD *DerivedStorage;
  uint64_t v7;
  CFTypeRef v8;
  _QWORD *v9;
  uint64_t v10;
  CFTypeRef v12;
  BOOL v13;
  CFTypeRef cf;
  void *v15;

  cf = 0;
  v15 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v12 = 0;
  if (!a2)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (*DerivedStorage)
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    v7 = FPSupport_HandlePlayerSetPropertiesAndCopyModification((uint64_t)a1, a2, 0, (uint64_t)playerasync_handleSetProperty, &v13, &cf, &v12);
    if (!(_DWORD)v7)
    {
      if (v13)
      {
LABEL_10:
        v10 = 0;
        goto LABEL_11;
      }
      v7 = playerasync_createCommand(a1, 4, 0, &v15);
      if (!(_DWORD)v7)
      {
        v8 = cf;
        if (cf)
          v8 = CFRetain(cf);
        v9 = v15;
        *((_QWORD *)v15 + 4) = v8;
        v9[5] = 0;
        playerasync_runAsynchronousCommand(a1, v9);
        v15 = 0;
        if (a3)
        {
          v10 = 0;
          *a3 = v12;
          v12 = 0;
          goto LABEL_13;
        }
        goto LABEL_10;
      }
    }
  }
  v10 = v7;
LABEL_11:
  if (v12)
    CFRelease(v12);
LABEL_13:
  if (cf)
    CFRelease(cf);
  fpa_releaseCommand(v15);
  return v10;
}

uint64_t playerasync_AddExternalStartupTask(void *a1, const void *a2)
{
  _DWORD *DerivedStorage;
  uint64_t v5;
  CFTypeRef v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;

  v10 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || *DerivedStorage)
  {
    v5 = FigSignalErrorAt();
  }
  else
  {
    v5 = playerasync_createCommand(a1, 18, 0, &v10);
    if ((_DWORD)v5)
    {
      v8 = v10;
      goto LABEL_6;
    }
    v6 = CFRetain(a2);
    v7 = v10;
    v10[4] = v6;
    playerasync_runAsynchronousCommand(a1, v7);
  }
  v8 = 0;
LABEL_6:
  fpa_releaseCommand(v8);
  return v5;
}

uint64_t playerasync_RemoveExternalStartupTask(void *a1, const void *a2)
{
  _DWORD *DerivedStorage;
  uint64_t v5;
  CFTypeRef v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;

  v10 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || *DerivedStorage)
  {
    v5 = FigSignalErrorAt();
  }
  else
  {
    v5 = playerasync_createCommand(a1, 19, 0, &v10);
    if ((_DWORD)v5)
    {
      v8 = v10;
      goto LABEL_6;
    }
    v6 = CFRetain(a2);
    v7 = v10;
    v10[4] = v6;
    playerasync_runAsynchronousCommand(a1, v7);
  }
  v8 = 0;
LABEL_6:
  fpa_releaseCommand(v8);
  return v5;
}

void itemasync_InvalidateOnQueue(const void *a1)
{
  itemasync_InvalidateInternal(a1);
  CFRelease(a1);
}

uint64_t itemasync_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, _BYTE *a5, CFTypeRef *a6, _QWORD *a7)
{
  uint64_t v12;
  const void *v13;
  CFTypeRef v14;
  uint64_t v15;

  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v12 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v12)
    return FigSignalErrorAt();
  v13 = (const void *)v12;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    v15 = FigSignalErrorAt();
  }
  else
  {
    *a5 = 0;
    *a6 = CFRetain(a3);
    if (a4)
      v14 = CFRetain(a4);
    else
      v14 = 0;
    v15 = 0;
    *a7 = v14;
  }
  CFRelease(v13);
  return v15;
}

uint64_t itemasync_CopyTrackProperty(const void *a1, int a2, const void *a3, const void *a4, _QWORD *a5)
{
  _DWORD *DerivedStorage;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v19 = 0;
  if (!a5)
    return FigSignalErrorAt();
  *a5 = 0;
  if (*DerivedStorage || !a3)
    return FigSignalErrorAt();
  v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v11)
  {
    v12 = (const void *)v11;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v17 = FigSignalErrorAt();
      v14 = 0;
    }
    else
    {
      v13 = playerasync_createCommand(v12, 32, a1, &v19);
      v14 = v19;
      if ((_DWORD)v13)
      {
        v17 = v13;
      }
      else
      {
        *(_DWORD *)(v19 + 32) = a2;
        *(_QWORD *)(v14 + 40) = CFRetain(a3);
        if (a4)
          v15 = CFRetain(a4);
        else
          v15 = 0;
        *(_QWORD *)(v14 + 48) = v15;
        *(_QWORD *)(v14 + 56) = a5;
        playerasync_runSynchronousCommand((uint64_t)v12, (_DWORD *)v14);
        v17 = *(unsigned int *)(v14 + 28);
      }
    }
    fpa_releaseCommand((_QWORD *)v14);
    CFRelease(v12);
    return v17;
  }
  else
  {
    v18 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v18;
  }
}

uint64_t itemasync_CopyCommonMetadata(const void *a1, const void *a2, const void *a3, _QWORD *a4)
{
  _DWORD *DerivedStorage;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  *a4 = 0;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v10)
  {
    v11 = (const void *)v10;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v16 = FigSignalErrorAt();
      v14 = 0;
    }
    else
    {
      v12 = playerasync_createCommand(v11, 35, a1, &v18);
      if ((_DWORD)v12)
      {
        v16 = v12;
        v14 = v18;
      }
      else
      {
        if (a2)
          v13 = CFRetain(a2);
        else
          v13 = 0;
        v14 = v18;
        *(_QWORD *)(v18 + 32) = v13;
        if (a3)
          v15 = CFRetain(a3);
        else
          v15 = 0;
        *(_QWORD *)(v14 + 40) = v15;
        *(_QWORD *)(v14 + 48) = a4;
        playerasync_runSynchronousCommand((uint64_t)v11, (_DWORD *)v14);
        v16 = *(unsigned int *)(v14 + 28);
      }
    }
    fpa_releaseCommand((_QWORD *)v14);
    CFRelease(v11);
    return v16;
  }
  else
  {
    v17 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v17;
  }
}

uint64_t itemasync_CopyChapterImageData(const void *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _DWORD *DerivedStorage;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  *a3 = 0;
  if (!a4)
    return FigSignalErrorAt();
  *a4 = 0;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v10)
  {
    v11 = (const void *)v10;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v14 = FigSignalErrorAt();
      v13 = 0;
    }
    else
    {
      v12 = playerasync_createCommand(v11, 36, a1, &v16);
      v13 = v16;
      if ((_DWORD)v12)
      {
        v14 = v12;
      }
      else
      {
        *(_QWORD *)(v16 + 32) = a2;
        *(_QWORD *)(v13 + 40) = a3;
        *(_QWORD *)(v13 + 48) = a4;
        playerasync_runSynchronousCommand((uint64_t)v11, (_DWORD *)v13);
        v14 = *(unsigned int *)(v13 + 28);
      }
    }
    fpa_releaseCommand((_QWORD *)v13);
    CFRelease(v11);
    return v14;
  }
  else
  {
    v15 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v15;
  }
}

uint64_t itemasync_GetNextThumbnailTime(const void *a1, __int128 *a2, int a3, uint64_t a4)
{
  _DWORD *DerivedStorage;
  uint64_t v9;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v9 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a4 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(v9 + 16);
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v11)
  {
    v12 = (const void *)v11;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v16 = FigSignalErrorAt();
      v14 = 0;
    }
    else
    {
      v13 = playerasync_createCommand(v12, 37, a1, &v18);
      v14 = v18;
      if ((_DWORD)v13)
      {
        v16 = v13;
      }
      else
      {
        v15 = *a2;
        *(_QWORD *)(v18 + 48) = *((_QWORD *)a2 + 2);
        *(_OWORD *)(v14 + 32) = v15;
        *(_DWORD *)(v14 + 56) = a3;
        *(_QWORD *)(v14 + 64) = a4;
        playerasync_runSynchronousCommand((uint64_t)v12, (_DWORD *)v14);
        v16 = *(unsigned int *)(v14 + 28);
      }
    }
    fpa_releaseCommand((_QWORD *)v14);
    CFRelease(v12);
    return v16;
  }
  else
  {
    v17 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v17;
  }
}

uint64_t itemasync_SetCurrentTimeWithRange(const void *a1, __int128 *a2, int a3, __int128 *a4, __int128 *a5)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;

  v19 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v11)
  {
    v18 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v18;
  }
  v12 = (void *)v11;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    v13 = FigSignalErrorAt();
    goto LABEL_7;
  }
  playerasync_removeQueuedSeekCommands(v12, a1);
  v13 = playerasync_createCommand(v12, 40, a1, &v19);
  v14 = v19;
  if (!(_DWORD)v13)
  {
    v15 = *a2;
    *((_QWORD *)v19 + 6) = *((_QWORD *)a2 + 2);
    *((_OWORD *)v14 + 2) = v15;
    *((_DWORD *)v14 + 14) = a3;
    v16 = *a4;
    *(_QWORD *)((char *)v14 + 76) = *((_QWORD *)a4 + 2);
    *(_OWORD *)((char *)v14 + 60) = v16;
    v17 = *a5;
    *(_QWORD *)((char *)v14 + 100) = *((_QWORD *)a5 + 2);
    *(_OWORD *)((char *)v14 + 84) = v17;
    playerasync_runAsynchronousCommand(v12, v14);
LABEL_7:
    v14 = 0;
  }
  fpa_releaseCommand(v14);
  CFRelease(v12);
  return v13;
}

uint64_t itemasync_SetTrackProperty(const void *a1, int a2, const void *a3, const void *a4)
{
  _DWORD *DerivedStorage;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a3 || *DerivedStorage)
    return FigSignalErrorAt();
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v10)
  {
    v11 = (void *)v10;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v15 = FigSignalErrorAt();
      v13 = 0;
    }
    else
    {
      v12 = playerasync_createCommand(v11, 41, a1, &v17);
      v13 = (_QWORD *)v17;
      if ((_DWORD)v12)
      {
        v15 = v12;
      }
      else
      {
        *(_DWORD *)(v17 + 32) = a2;
        v13[5] = CFRetain(a3);
        if (a4)
          v14 = CFRetain(a4);
        else
          v14 = 0;
        v13[6] = v14;
        playerasync_runAsynchronousCommand(v11, v13);
        v13 = 0;
        v15 = 0;
      }
    }
    fpa_releaseCommand(v13);
    CFRelease(v11);
    return v15;
  }
  else
  {
    v16 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v16;
  }
}

uint64_t itemasync_CopyFormatReader(const void *a1, uint64_t a2)
{
  _DWORD *DerivedStorage;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || *DerivedStorage)
    return FigSignalErrorAt();
  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    v7 = (const void *)v6;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v10 = FigSignalErrorAt();
      v9 = 0;
    }
    else
    {
      v8 = playerasync_createCommand(v7, 42, a1, &v12);
      v9 = (_DWORD *)v12;
      if ((_DWORD)v8)
      {
        v10 = v8;
      }
      else
      {
        *(_QWORD *)(v12 + 32) = a2;
        playerasync_runSynchronousCommand((uint64_t)v7, v9);
        v10 = v9[7];
      }
    }
    fpa_releaseCommand(v9);
    CFRelease(v7);
    return v10;
  }
  else
  {
    v11 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v11;
  }
}

uint64_t itemasync_SeekToDateWithID(const void *a1, const void *a2, int a3)
{
  _DWORD *DerivedStorage;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v15 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || *DerivedStorage)
    return FigSignalErrorAt();
  v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v8)
  {
    v9 = (void *)v8;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v10 = FigSignalErrorAt();
    }
    else
    {
      playerasync_removeQueuedSeekCommands(v9, a1);
      v10 = playerasync_createCommand(v9, 43, a1, &v15);
      if ((_DWORD)v10)
      {
        v13 = v15;
        goto LABEL_9;
      }
      v11 = CFRetain(a2);
      v12 = v15;
      v15[4] = v11;
      *((_DWORD *)v12 + 10) = a3;
      playerasync_runAsynchronousCommand(v9, v12);
    }
    v13 = 0;
LABEL_9:
    fpa_releaseCommand(v13);
    CFRelease(v9);
    return v10;
  }
  v14 = FigSignalErrorAt();
  fpa_releaseCommand(0);
  return v14;
}

uint64_t itemasync_SetCurrentTimeWithRangeAndID(const void *a1, __int128 *a2, int a3, __int128 *a4, __int128 *a5, int a6)
{
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;

  v21 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v13 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v13)
  {
    v20 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v20;
  }
  v14 = (void *)v13;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    v15 = FigSignalErrorAt();
    goto LABEL_7;
  }
  playerasync_removeQueuedSeekCommands(v14, a1);
  v15 = playerasync_createCommand(v14, 44, a1, &v21);
  v16 = v21;
  if (!(_DWORD)v15)
  {
    v17 = *a2;
    *((_QWORD *)v21 + 6) = *((_QWORD *)a2 + 2);
    *((_OWORD *)v16 + 2) = v17;
    *((_DWORD *)v16 + 14) = a3;
    v18 = *a4;
    *(_QWORD *)((char *)v16 + 76) = *((_QWORD *)a4 + 2);
    *(_OWORD *)((char *)v16 + 60) = v18;
    v19 = *a5;
    *(_QWORD *)((char *)v16 + 100) = *((_QWORD *)a5 + 2);
    *(_OWORD *)((char *)v16 + 84) = v19;
    *((_DWORD *)v16 + 27) = a6;
    playerasync_runAsynchronousCommand(v14, v16);
LABEL_7:
    v16 = 0;
  }
  fpa_releaseCommand(v16);
  CFRelease(v14);
  return v15;
}

uint64_t itemasync_CopyAsset(const void *a1, uint64_t a2)
{
  _DWORD *DerivedStorage;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || *DerivedStorage)
    return FigSignalErrorAt();
  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    v7 = (const void *)v6;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v10 = FigSignalErrorAt();
      v9 = 0;
    }
    else
    {
      v8 = playerasync_createCommand(v7, 45, a1, &v12);
      v9 = (_DWORD *)v12;
      if ((_DWORD)v8)
      {
        v10 = v8;
      }
      else
      {
        *(_QWORD *)(v12 + 32) = a2;
        playerasync_runSynchronousCommand((uint64_t)v7, v9);
        v10 = v9[7];
      }
    }
    fpa_releaseCommand(v9);
    CFRelease(v7);
    return v10;
  }
  else
  {
    v11 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v11;
  }
}

uint64_t itemasync_SetProperties(const void *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  CFTypeRef v14;
  BOOL v15;
  CFTypeRef cf;
  _QWORD *v17;

  cf = 0;
  v17 = 0;
  v15 = 0;
  v14 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() || !a2)
  {
    v12 = FigSignalErrorAt();
    v11 = 0;
    v6 = 0;
    goto LABEL_13;
  }
  v6 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6 || *(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    v7 = FigSignalErrorAt();
    goto LABEL_21;
  }
  v7 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification((uint64_t)a1, a2, 0, (uint64_t)itemasync_handleSetProperty, &v15, &cf, &v14);
  if ((_DWORD)v7)
  {
LABEL_21:
    v12 = v7;
    v11 = 0;
    goto LABEL_13;
  }
  if (v15)
  {
LABEL_12:
    v11 = 0;
    v12 = 0;
    goto LABEL_13;
  }
  v8 = playerasync_createCommand(v6, 27, a1, &v17);
  if (!(_DWORD)v8)
  {
    v9 = cf;
    if (cf)
      v9 = CFRetain(cf);
    v10 = v17;
    v17[4] = v9;
    v10[5] = 0;
    playerasync_runAsynchronousCommand(v6, v10);
    if (a3)
    {
      v11 = 0;
      v12 = 0;
      *a3 = v14;
      v14 = 0;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v12 = v8;
  v11 = v17;
LABEL_13:
  fpa_releaseCommand(v11);
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (v6)
    CFRelease(v6);
  return v12;
}

uint64_t itemasync_ExtractAndRetainNextSampleBuffer(const void *a1, int a2, int a3, uint64_t a4)
{
  _DWORD *DerivedStorage;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a4 || *DerivedStorage)
    return FigSignalErrorAt();
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v10)
  {
    v11 = (const void *)v10;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v14 = FigSignalErrorAt();
      v13 = 0;
    }
    else
    {
      v12 = playerasync_createCommand(v11, 46, a1, &v16);
      v13 = v16;
      if ((_DWORD)v12)
      {
        v14 = v12;
      }
      else
      {
        *(_DWORD *)(v16 + 32) = a2;
        *(_DWORD *)(v13 + 36) = a3;
        *(_QWORD *)(v13 + 40) = a4;
        playerasync_runSynchronousCommand((uint64_t)v11, (_DWORD *)v13);
        v14 = *(unsigned int *)(v13 + 28);
      }
    }
    fpa_releaseCommand((_QWORD *)v13);
    CFRelease(v11);
    return v14;
  }
  else
  {
    v15 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v15;
  }
}

uint64_t itemasync_SetCurrentTimeWithOptions(const void *a1, __int128 *a2, const void *a3)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = (void *)v7;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v13 = FigSignalErrorAt();
      v10 = 0;
    }
    else
    {
      playerasync_removeQueuedSeekCommands(v8, a1);
      v9 = playerasync_createCommand(v8, 47, a1, &v15);
      v10 = v15;
      if ((_DWORD)v9)
      {
        v13 = v9;
      }
      else
      {
        v11 = *a2;
        *(_QWORD *)(v15 + 48) = *((_QWORD *)a2 + 2);
        *(_OWORD *)(v10 + 32) = v11;
        if (a3)
          v12 = CFRetain(a3);
        else
          v12 = 0;
        *(_QWORD *)(v10 + 56) = v12;
        playerasync_runAsynchronousCommand(v8, (_QWORD *)v10);
        v10 = 0;
        v13 = 0;
      }
    }
    fpa_releaseCommand((_QWORD *)v10);
    CFRelease(v8);
    return v13;
  }
  else
  {
    v14 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v14;
  }
}

void playerasync_removeQueuedSeekCommands(const void *a1, const void *a2)
{
  playerasync_cancelQueuedCommandsMatching(a1, 0x1Eu, a2);
  playerasync_cancelQueuedCommandsMatching(a1, 0x28u, a2);
  playerasync_cancelQueuedCommandsMatching(a1, 0x2Cu, a2);
  playerasync_cancelQueuedCommandsMatching(a1, 0x2Bu, a2);
  playerasync_cancelQueuedCommandsMatching(a1, 0x2Fu, a2);
}

uint64_t playerasync_BeginInterruption(const void *a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v6;

  v6 = 0;
  v2 = playerasync_createCommand(a1, 20, 0, &v6);
  v3 = v6;
  if ((_DWORD)v2)
  {
    v4 = v2;
  }
  else
  {
    playerasync_runSynchronousCommand((uint64_t)a1, v6);
    v4 = v3[7];
  }
  fpa_releaseCommand(v3);
  return v4;
}

uint64_t playerasync_EndInterruption(const void *a1, const void *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  v4 = playerasync_createCommand(a1, 21, 0, &v9);
  if ((_DWORD)v4)
  {
    v7 = v4;
    v6 = (_DWORD *)v9;
  }
  else
  {
    if (a2)
      v5 = CFRetain(a2);
    else
      v5 = 0;
    v6 = (_DWORD *)v9;
    *(_QWORD *)(v9 + 32) = v5;
    playerasync_runSynchronousCommand((uint64_t)a1, v6);
    v7 = v6[7];
  }
  fpa_releaseCommand(v6);
  return v7;
}

uint64_t playerasync_SetConnectionActive(const void *a1, char a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  v4 = playerasync_createCommand(a1, 22, 0, &v8);
  v5 = (_DWORD *)v8;
  if ((_DWORD)v4)
  {
    v6 = v4;
  }
  else
  {
    *(_BYTE *)(v8 + 32) = a2;
    playerasync_runSynchronousCommand((uint64_t)a1, v5);
    v6 = v5[7];
  }
  fpa_releaseCommand(v5);
  return v6;
}

uint64_t playerasync_DuckVolume(const void *a1, char a2, float a3, float a4)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v9 = playerasync_createCommand(a1, 23, 0, &v12);
  v10 = v12;
  if ((_DWORD)v9)
  {
    v11 = v9;
  }
  else
  {
    *(_BYTE *)(v12 + 32) = a2;
    *(float *)(v10 + 36) = a3;
    *(float *)(v10 + 40) = a4;
    playerasync_runImmediateCommand(a1, v10, 0);
    v11 = *(unsigned int *)(v10 + 28);
  }
  fpa_releaseCommand((_QWORD *)v10);
  return v11;
}

uint64_t playerasync_SilentMute(const void *a1, char a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v5 = playerasync_createCommand(a1, 24, 0, &v8);
  v6 = v8;
  if ((_DWORD)v5)
  {
    v7 = v5;
  }
  else
  {
    *(_BYTE *)(v8 + 32) = a2;
    playerasync_runImmediateCommand(a1, v6, 0);
    v7 = *(unsigned int *)(v6 + 28);
  }
  fpa_releaseCommand((_QWORD *)v6);
  return v7;
}

void playerasync_runAsynchronousCommandOnQueue(const void *a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  int v12;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 104));
  v3 = (_QWORD *)(DerivedStorage + 112);
  v4 = *(_QWORD *)(DerivedStorage + 112);
  if (!v4)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 104));
    goto LABEL_27;
  }
  v5 = *(_QWORD *)v4;
  *v3 = *(_QWORD *)v4;
  if (!v5)
    *(_QWORD *)(DerivedStorage + 120) = v3;
  v6 = *(_DWORD *)(v4 + 24);
  v7 = 1;
  v8 = v6 > 0x11;
  v9 = (1 << v6) & 0x28A00;
  if (!v8 && v9 != 0)
  {
    *(_BYTE *)(DerivedStorage + 6) = 1;
    v7 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 104));
  if (*(_DWORD *)DerivedStorage)
  {
    *(_DWORD *)(v4 + 28) = -12785;
  }
  else
  {
    v11 = MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
    *(_QWORD *)(DerivedStorage + 72) = MEMORY[0x19402F228](v11);
    playerasync_runOneCommand(a1, v4);
    if ((v7 & 1) == 0)
      *(_BYTE *)(DerivedStorage + 6) = 0;
    *(_QWORD *)(DerivedStorage + 72) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
    if (!*(_DWORD *)(v4 + 28))
      goto LABEL_27;
  }
  v12 = *(_DWORD *)(v4 + 24);
  if (v12 > 43)
  {
    if (v12 != 44)
    {
      if (v12 != 47)
        goto LABEL_27;
      FigCFDictionaryGetInt32IfPresent();
    }
    goto LABEL_26;
  }
  if (v12 != 12)
  {
    if (v12 != 43)
      goto LABEL_27;
LABEL_26:
    itemasync_postSeekWasCanceled();
    goto LABEL_27;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v14 = Mutable;
    if (!FigCFDictionarySetInt32())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v14);
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_27:
  fpa_releaseCommand((_QWORD *)v4);
  if (a1)
    CFRelease(a1);
}

uint64_t FigSampleBufferAudioRendererCentralCreateWithOptions(uint64_t a1, const void *a2, CFDictionaryRef theDict, uint64_t *a4)
{
  const __CFData *v8;
  const __CFData *v9;
  CFTypeID v10;
  uint64_t Internal;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  void *value;
  CFTypeRef cf;
  os_log_type_t type[8];
  CFTypeRef v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  UInt8 buffer[40];
  uint64_t v30;
  CFRange v31;

  v30 = *MEMORY[0x1E0C80C00];
  value = 0;
  if (theDict)
  {
    v8 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("ClientAuditToken"));
    if (v8)
    {
      v9 = v8;
      memset(buffer, 0, 32);
      v10 = CFGetTypeID(v8);
      if (v10 != CFDataGetTypeID() || CFDataGetLength(v9) != 32)
        return 4294950915;
      v31.location = 0;
      v31.length = 32;
      CFDataGetBytes(v9, v31, buffer);
      v27 = *(_OWORD *)buffer;
      v28 = *(_OWORD *)&buffer[16];
      cf = 0;
      *(_QWORD *)type = 0;
      FigNote_AllowInternalDefaultLogs();
      fig_note_initialize_category_with_default_work_cf();
      fig_note_initialize_category_with_default_work_cf();
      Internal = 4294950916;
      if (!a2 || !a4)
      {
LABEL_19:
        if (cf)
          CFRelease(cf);
        if (!(_DWORD)Internal)
        {
          DerivedStorage = CMBaseObjectGetDerivedStorage();
          *(_BYTE *)(DerivedStorage + 96) = 0;
          v14 = (char *)(DerivedStorage + 96);
          goto LABEL_23;
        }
        return Internal;
      }
      if (FigPreferAudioSessionOverCMSession())
      {
        *(_OWORD *)v25 = v27;
        v26 = v28;
        v12 = FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(a1, v25, CFSTR("SBAR"), &cf);
        if ((_DWORD)v12)
          goto LABEL_42;
      }
      else
      {
        *(_OWORD *)v25 = v27;
        v26 = v28;
        v12 = FigAudioSessionCreateUsingPrimaryCMSessionForAuditToken(a1, (uint64_t)v25, &cf);
        if ((_DWORD)v12)
          goto LABEL_42;
      }
      if (cf)
      {
        *(_OWORD *)v25 = v27;
        v26 = v28;
        Internal = audioRendererCentral_createInternal(a1, a2, (uint64_t)cf, v25, (CFTypeRef *)type);
        if ((_DWORD)Internal)
        {
          if (*(_QWORD *)type)
            CFRelease(*(CFTypeRef *)type);
        }
        else
        {
          *a4 = *(_QWORD *)type;
        }
        goto LABEL_19;
      }
      v12 = FigSignalErrorAt();
LABEL_42:
      Internal = v12;
      goto LABEL_19;
    }
  }
  v25[0] = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  Internal = 4294950916;
  if (!a2 || !a4)
    return Internal;
  Internal = audioRendererCentral_createInternal(a1, a2, 0, xmmword_1932F7658, v25);
  if (!(_DWORD)Internal)
  {
    *a4 = (uint64_t)v25[0];
    v13 = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(v13 + 96) = 0;
    v14 = (char *)(v13 + 96);
    if (!theDict)
    {
LABEL_25:
      if (dword_1EE2A2AA8)
      {
        LODWORD(v27) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v17 = v27;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
          v18 = v17;
        else
          v18 = v17 & 0xFFFFFFFE;
        if (v18)
        {
          v19 = *a4;
          if (v19)
            v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 96);
          else
            v20 = "";
          *(_DWORD *)buffer = 136315650;
          *(_QWORD *)&buffer[4] = "FigSampleBufferAudioRendererCentralCreateWithOptions";
          *(_WORD *)&buffer[12] = 2048;
          *(_QWORD *)&buffer[14] = v19;
          *(_WORD *)&buffer[22] = 2082;
          *(_QWORD *)&buffer[24] = v20;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
LABEL_23:
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("LoggingIdentifier"), (const void **)&value))
      CFStringGetCString((CFStringRef)value, v14, 10, 0x600u);
    goto LABEL_25;
  }
  if (v25[0])
    CFRelease(v25[0]);
  return Internal;
}

uint64_t audioRendererCentral_createInternal(uint64_t a1, const void *a2, uint64_t a3, _OWORD *a4, CFTypeRef *a5)
{
  int v9;
  uint64_t *v10;
  uint64_t DerivedStorage;
  __int128 v12;
  dispatch_queue_t v13;
  dispatch_queue_t v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD block[7];
  CFTypeRef cf;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  char label[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  cf = 0;
  FigSampleBufferAudioRendererGetClassID();
  v9 = CMDerivedObjectCreate();
  v10 = v21;
  *((_DWORD *)v21 + 6) = v9;
  if (!v9)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = a2;
    CFRetain(a2);
    v12 = a4[1];
    *(_OWORD *)(DerivedStorage + 16) = *a4;
    *(_OWORD *)(DerivedStorage + 32) = v12;
    __snprintf_chk(label, 0x80uLL, 0, 0x80uLL, "com.apple.coremedia.samplebufferaudiorenderercentral.state[%p]", cf);
    v13 = dispatch_queue_create(label, 0);
    *(_QWORD *)(DerivedStorage + 56) = v13;
    if (v13
      && (__snprintf_chk(label, 0x80uLL, 0, 0x80uLL, "com.apple.coremedia.samplebufferaudiorenderercentral.notificationQueue[%p]", cf), v14 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 8) = v14) != 0))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      if (a3)
      {
        v15 = *(NSObject **)(DerivedStorage + 56);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __audioRendererCentral_createInternal_block_invoke;
        block[3] = &unk_1E2F81FC0;
        block[4] = &v20;
        block[5] = cf;
        block[6] = a3;
        dispatch_sync(v15, block);
      }
      v10 = v21;
      if (!*((_DWORD *)v21 + 6))
      {
        *a5 = cf;
        goto LABEL_8;
      }
    }
    else
    {
      v10 = v21;
      *((_DWORD *)v21 + 6) = -16382;
    }
  }
  if (cf)
  {
    CFRelease(cf);
    v10 = v21;
  }
LABEL_8:
  v16 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v20, 8);
  return v16;
}

void sub_192A49CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t audioRendererCentral_subRendererNotificationHandler()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void audioRendererCentral_subRendererBufferedAirPlayInUseNotificationHandler()
{
  CMBaseObjectGetDerivedStorage();
  audioRendererCentral_updateBufferedAirPlayAudioInUseFromSubRenderer();
}

uint64_t __audioRendererCentral_createInternal_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = audioRendererCentral_setFigAudioSession(*(_QWORD *)(a1 + 40), *(const void **)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t audioRendererCentral_setFigAudioSession(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *SInt32;
  uint64_t v6;
  uint64_t (*v7)(const void *, _QWORD, const void *);
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t (*v11)(const void *, const __CFString *, uint64_t, uint64_t *);
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, const void *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v22;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  cf = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  if (!a2)
    goto LABEL_18;
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v6)
    goto LABEL_18;
  v7 = *(uint64_t (**)(const void *, _QWORD, const void *))(v6 + 56);
  if (!v7)
  {
LABEL_19:
    v18 = 4294948071;
    goto LABEL_24;
  }
  v8 = v7(a2, *MEMORY[0x1E0D49608], SInt32);
  if ((_DWORD)v8)
  {
LABEL_29:
    v18 = v8;
    goto LABEL_24;
  }
  audioRendererCentral_removeAudioSessionListeners();
  audioRendererCentral_clearAudioSessionPlayingAndInterruptState();
  v9 = *(const void **)(DerivedStorage + 64);
  *(_QWORD *)(DerivedStorage + 64) = a2;
  CFRetain(a2);
  if (v9)
    CFRelease(v9);
  v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v10)
  {
LABEL_18:
    v18 = 4294948075;
    goto LABEL_24;
  }
  v11 = *(uint64_t (**)(const void *, const __CFString *, uint64_t, uint64_t *))(v10 + 16);
  if (!v11)
    goto LABEL_19;
  v8 = v11(a2, CFSTR("FAS_AudioSessionID"), v4, &v22);
  if ((_DWORD)v8)
    goto LABEL_29;
  *(_DWORD *)(DerivedStorage + 48) = FigCFNumberGetSInt32();
  v12 = *(_QWORD *)DerivedStorage;
  v13 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
  if (v13)
    v13(v12, CFSTR("FigAudioSession"), a2);
  audioRendererCentral_updateBufferedAirPlayAudioInUseFromSubRenderer();
  audioRendererCentral_updateRoutingContextFromAudioSession();
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  v14 = *(_QWORD *)(DerivedStorage + 64);
  if (v14
    && (v15 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) != 0
    && (v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(v15 + 8)) != 0)
  {
    v16(v14, CFSTR("FAS_IsActive"), v4, &cf);
    v17 = cf;
  }
  else
  {
    v17 = 0;
  }
  v19 = *(_QWORD *)DerivedStorage;
  v20 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v20)
    v20(v19, CFSTR("IsActiveAudioSessionApp"), v17);
  v18 = 0;
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (SInt32)
    CFRelease(SInt32);
  return v18;
}

void audioRendererCentral_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  NSObject *v2;
  void *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(_QWORD *)DerivedStorage)
    {
      CFRelease(*(CFTypeRef *)DerivedStorage);
      *(_QWORD *)DerivedStorage = 0;
    }
  }
  audioRendererCentral_removeAudioSessionListeners();
  audioRendererCentral_clearAudioSessionPlayingAndInterruptState();
  v1 = *(const void **)(DerivedStorage + 64);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v2 = *(NSObject **)(DerivedStorage + 56);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v3 = *(void **)(DerivedStorage + 88);
  if (v3)
  {

    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 8);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *audioRendererCentral_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  CFAllocatorRef v6;
  const char *v7;
  const char *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferAudioRendererCentral=%p retainCount=%d allocator=%p"), a1, v5, v6);
  CFStringAppendFormat(Mutable, 0, CFSTR(" subRenderer=%p"), *(_QWORD *)DerivedStorage);
  CFStringAppendFormat(Mutable, 0, CFSTR(" audioSession=%@"), *(_QWORD *)(DerivedStorage + 64));
  if (*(_BYTE *)(DerivedStorage + 80))
    v7 = "Yes";
  else
    v7 = "No";
  CFStringAppendFormat(Mutable, 0, CFSTR(" didSetAudioSessionStateToPlaying=%s"), v7);
  if (*(_BYTE *)(DerivedStorage + 81))
    v8 = "Yes";
  else
    v8 = "No";
  CFStringAppendFormat(Mutable, 0, CFSTR(" didCallActivateOnAudioSession=%s"), v8);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t audioRendererCentral_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (FigCFEqual())
  {
    if (*(_DWORD *)(DerivedStorage + 48))
    {
      cf = (CFTypeRef)FigCFNumberCreateUInt32();
      if (cf)
        v8 = 0;
      else
        v8 = 4294950914;
    }
    else
    {
      v8 = 4294954513;
    }
  }
  else
  {
    v9 = *(_QWORD *)DerivedStorage;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (v10)
      v8 = v10(v9, a2, a3, &cf);
    else
      v8 = 4294954514;
  }
  if (a4)
  {
    *a4 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  return v8;
}

uint64_t audioRendererCentral_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  uint64_t SInt32;
  __int128 v9;
  uint64_t v10;
  int v11;
  CFTypeID v12;
  CFTypeRef v13;
  NSObject *v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  uint64_t v18;
  uint64_t (*v19)(const void *, const __CFString *, uint64_t, _OWORD *);
  int v20;
  uint64_t v21;
  uint64_t (*v22)(CFTypeRef, const __CFString *, uint64_t, __int128 *);
  const void *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, const void *);
  int v26;
  NSObject *v27;
  uint64_t v28;
  _QWORD block[7];
  _QWORD v31[7];
  CFTypeRef cf;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v34 = &v33;
  v35 = 0x2020000000;
  v36 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (FigCFEqual())
  {
    if (a3)
    {
      v7 = CFGetTypeID(a3);
      if (v7 == CFNumberGetTypeID())
      {
        SInt32 = FigCFNumberGetSInt32();
        v9 = *(_OWORD *)(DerivedStorage + 32);
        v38 = *(_OWORD *)(DerivedStorage + 16);
        v39 = v9;
        if (FigPreferAudioSessionOverCMSession())
        {
          v10 = *MEMORY[0x1E0C9AE00];
          v37[0] = v38;
          v37[1] = v39;
          v11 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(v10, SInt32, v37, CFSTR("SBAR"), &cf);
        }
        else
        {
          v15 = (const void *)AudioSessionCopyCMSessionForSessionID();
          v10 = *MEMORY[0x1E0C9AE00];
          v11 = FigAudioSessionCreateWithCMSession(*MEMORY[0x1E0C9AE00], v15, &cf);
          if (v15)
            CFRelease(v15);
        }
        *((_DWORD *)v34 + 6) = v11;
        if (v11)
          goto LABEL_40;
        v16 = cf;
        v17 = *(const void **)(DerivedStorage + 72);
        *(_QWORD *)&v37[0] = 0;
        *(_QWORD *)&v38 = 0;
        if (!v17)
        {
          if (cf)
            goto LABEL_28;
          v13 = 0;
          v20 = 0;
          goto LABEL_34;
        }
        v18 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v18)
        {
          v19 = *(uint64_t (**)(const void *, const __CFString *, uint64_t, _OWORD *))(v18 + 8);
          if (!v19)
            goto LABEL_32;
          v20 = v19(v17, CFSTR("FAS_CoreSessionID"), v10, v37);
          if (v20)
          {
            v13 = 0;
            goto LABEL_34;
          }
          if (v16)
          {
            v21 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v21)
            {
              v22 = *(uint64_t (**)(CFTypeRef, const __CFString *, uint64_t, __int128 *))(v21 + 8);
              if (v22)
              {
                v20 = v22(v16, CFSTR("FAS_CoreSessionID"), v10, &v38);
                v23 = (const void *)v38;
                if (!v20)
                {
                  if (FigCFEqual())
                    v16 = v17;
LABEL_28:
                  v13 = CFRetain(v16);
                  v20 = 0;
                  v23 = (const void *)v38;
                  if (!(_QWORD)v38)
                    goto LABEL_34;
                  goto LABEL_29;
                }
                v13 = 0;
                if ((_QWORD)v38)
LABEL_29:
                  CFRelease(v23);
LABEL_34:
                if (*(_QWORD *)&v37[0])
                  CFRelease(*(CFTypeRef *)&v37[0]);
                *((_DWORD *)v34 + 6) = v20;
                if (!v20)
                {
                  if (v13)
                  {
                    v27 = *(NSObject **)(DerivedStorage + 56);
                    v31[0] = MEMORY[0x1E0C809B0];
                    v31[1] = 3221225472;
                    v31[2] = __audioRendererCentral_SetProperty_block_invoke;
                    v31[3] = &unk_1E2F81FC0;
                    v31[4] = &v33;
                    v31[5] = a1;
                    v31[6] = v13;
                    dispatch_sync(v27, v31);
                    goto LABEL_39;
                  }
                  goto LABEL_45;
                }
                goto LABEL_10;
              }
LABEL_32:
              v13 = 0;
              v20 = -19225;
              goto LABEL_34;
            }
          }
        }
        v13 = 0;
        v20 = -19221;
        goto LABEL_34;
      }
    }
LABEL_45:
    v26 = FigSignalErrorAt();
LABEL_44:
    *((_DWORD *)v34 + 6) = v26;
    goto LABEL_40;
  }
  if (!FigCFEqual())
  {
    v24 = *(_QWORD *)DerivedStorage;
    v25 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v25)
      v26 = v25(v24, a2, a3);
    else
      v26 = -12782;
    goto LABEL_44;
  }
  if (!a3)
    goto LABEL_45;
  v12 = CFGetTypeID(a3);
  if (v12 != FigAudioSessionGetTypeID())
    goto LABEL_45;
  v13 = CFRetain(a3);
  v14 = *(NSObject **)(DerivedStorage + 56);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __audioRendererCentral_SetProperty_block_invoke_2;
  block[3] = &unk_1E2F81FC0;
  block[4] = &v33;
  block[5] = a1;
  block[6] = v13;
  dispatch_sync(v14, block);
LABEL_10:
  if (v13)
LABEL_39:
    CFRelease(v13);
LABEL_40:
  if (cf)
    CFRelease(cf);
  v28 = *((unsigned int *)v34 + 6);
  _Block_object_dispose(&v33, 8);
  return v28;
}

void sub_192A4A728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t audioRendererCentral_removeAudioSessionListeners()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 64))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t audioRendererCentral_clearAudioSessionPlayingAndInterruptState()
{
  uint64_t result;

  result = audioRendererCentral_maybeSetAudioSessionStateToNotPlaying();
  if (!(_DWORD)result)
  {
    result = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(result + 81) == 1)
    {
      if (*(_QWORD *)(result + 64))
        *(_BYTE *)(result + 81) = 0;
    }
  }
  return result;
}

void audioRendererCentral_interruptionNotificationListener(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5 && *(_QWORD *)(DerivedStorage + 64) == a4 && FigCFDictionaryGetInt32IfPresent())
  {
    if (dword_1EE2A2AA8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    audioRendererCentral_postNotification(a2, CFSTR("Interrupted"));
  }
}

void audioRendererCentral_commonFigAudioSessionPropertyDidChangeNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64) == a4)
    audioRendererCentral_updateRoutingContextFromAudioSession();
}

uint64_t *audioRendererCentral_isActiveDidChangeNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t *result;
  uint64_t *v8;
  uint64_t *v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t *);

  result = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v8 = result;
    if (result[8] == a4)
    {
      result = (uint64_t *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D492F8]);
      if (result)
      {
        v9 = result;
        v10 = CFGetTypeID(result);
        result = (uint64_t *)CFBooleanGetTypeID();
        if ((uint64_t *)v10 == result)
        {
          v11 = *v8;
          result = (uint64_t *)CMBaseObjectGetVTable();
          v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t *))(result[1] + 56);
          if (v12)
            return (uint64_t *)v12(v11, CFSTR("IsActiveAudioSessionApp"), v9);
        }
      }
    }
  }
  return result;
}

uint64_t audioRendererCentral_applicationStateDidChangeNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 64) == a4)
  {
    result = FigCFDictionaryGetInt32IfPresent();
    if (dword_1EE2A2AA8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void audioRendererCentral_postNotification(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  CFRetain(a2);
  v5 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __audioRendererCentral_postNotification_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a2;
  block[5] = a1;
  block[6] = 0;
  dispatch_async(v5, block);
}

void __audioRendererCentral_postNotification_block_invoke(uint64_t a1)
{
  const void *v2;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
}

void audioRendererCentral_updateRoutingContextFromAudioSession()
{
  uint64_t *DerivedStorage;
  int CFPreferenceNumberWithDefault;
  const void **v2;
  uint64_t v3;
  uint64_t v4;
  __CFArray *Mutable;
  __CFArray *v6;
  uint64_t v7;
  void (*v8)(uint64_t, __CFArray *, CFTypeRef *, _QWORD);
  const __CFNumber *Value;
  uint64_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, const void *, _QWORD, CFTypeRef *);
  uint64_t v20;
  CFTypeRef v21;
  unsigned int (*v22)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v23;
  CFTypeRef v24;
  void (*v25)(uint64_t, const __CFString *, CFTypeRef);
  CFTypeRef v26;
  CFTypeRef v27;
  char v28;
  CFTypeRef cf;
  int valuePtr;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v26 = 0;
  v27 = 0;
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  v2 = (const void **)MEMORY[0x1E0D49BB0];
  if (!CFPreferenceNumberWithDefault)
  {
    if (!DerivedStorage[8])
      goto LABEL_37;
    valuePtr = 8;
    v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
    v4 = *MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v6 = Mutable;
    cf = 0;
    v28 = 0;
    if (v3 && Mutable)
    {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0D494F8]);
      CFArrayAppendValue(v6, (const void *)*MEMORY[0x1E0D49878]);
      CFArrayAppendValue(v6, (const void *)*MEMORY[0x1E0D497D0]);
      CFArrayAppendValue(v6, (const void *)*MEMORY[0x1E0D49B10]);
      CFArrayAppendValue(v6, *v2);
      v7 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v7)
      {
        v8 = *(void (**)(uint64_t, __CFArray *, CFTypeRef *, _QWORD))(v7 + 112);
        if (v8)
          v8(v3, v6, &cf, 0);
      }
      FigCFDictionaryGetValue();
      Value = (const __CFNumber *)FigCFDictionaryGetValue();
      if (Value)
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      FigCFDictionaryGetValue();
      v10 = FigCFDictionaryGetValue();
      FigCFDictionaryGetBooleanIfPresent();
      v11 = 0;
      if ((valuePtr == 32 || valuePtr == 16) && v10 == 0)
      {
LABEL_29:
        CFRelease(v6);
        if (cf)
          CFRelease(cf);
        if (!v11)
          goto LABEL_37;
        goto LABEL_32;
      }
      if (FigCFEqual()
        || FigCFEqual() && !v10
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual())
      {
        v11 = 0;
        goto LABEL_29;
      }
    }
    else if (!Mutable)
    {
LABEL_32:
      v14 = DerivedStorage[8];
      if (v14)
      {
        v15 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v15)
        {
          v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(v15 + 8);
          if (v16)
            v16(v14, CFSTR("FAS_RoutingContext"), v4, &v27);
        }
      }
      goto LABEL_37;
    }
    v11 = 1;
    goto LABEL_29;
  }
  if (FigServer_IsAirplayd() || FigServer_IsMediaplaybackd())
  {
    if (FigRoutingContextRemoteCopySystemMusicContext())
      goto LABEL_45;
  }
  else if (FigRoutingContextCopySystemMusicContext())
  {
    goto LABEL_45;
  }
LABEL_37:
  v17 = DerivedStorage[8];
  if (!v17
    || (v18 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) == 0
    || (v19 = *(unsigned int (**)(uint64_t, const void *, _QWORD, CFTypeRef *))(v18 + 48)) == 0
    || v19(v17, *v2, 0, &v26)
    || (v20 = *DerivedStorage,
        v21 = v26,
        (v22 = *(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56)) != 0)
    && !v22(v20, CFSTR("RemoteDeviceID"), v21))
  {
    v23 = *DerivedStorage;
    v24 = v27;
    v25 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v25)
      v25(v23, CFSTR("RoutingContext"), v24);
  }
LABEL_45:
  if (v26)
    CFRelease(v26);
  if (v27)
    CFRelease(v27);
}

uint64_t audioRendererCentral_maybeSetAudioSessionStateToNotPlaying()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 80) != 1)
    return 0;
  v1 = DerivedStorage;
  v2 = *(_QWORD *)(DerivedStorage + 64);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v3)
    return 4294948075;
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v3 + 56);
  if (!v4)
    return 4294948071;
  result = v4(v2, *MEMORY[0x1E0D49908], *MEMORY[0x1E0C9AE40]);
  if (!(_DWORD)result)
    *(_BYTE *)(v1 + 80) = 0;
  return result;
}

__CFString *audioRendererCentral_synchronizerCentralClientAccessProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigSampleBufferAudioRenderer_Central <FigSampleBufferRenderSynchronizerCentralClientAccessProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t audioRendererCentral_ProcessRateChange(uint64_t a1, char a2, float a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD block[6];
  float v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 56);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __audioRendererCentral_ProcessRateChange_block_invoke;
  block[3] = &unk_1E2F820C0;
  block[4] = &v12;
  block[5] = a1;
  v11 = a2;
  v10 = a3;
  dispatch_sync(v6, block);
  v7 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_192A4BC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t audioRendererCentral_QueueIsAboveHighWaterLevel()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v1)
    return v1(v0);
  else
    return 1;
}

uint64_t audioRendererCentral_EnqueueSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t result;
  NSObject *v8;
  _QWORD block[5];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v5 = *DerivedStorage;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v6)
    return 4294954514;
  result = v6(v5, a2);
  if (!(_DWORD)result)
  {
    v8 = DerivedStorage[7];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __audioRendererCentral_EnqueueSampleBuffer_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_sync(v8, block);
    return 0;
  }
  return result;
}

uint64_t audioRendererCentral_Flush()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v1)
    return v1(v0);
  else
    return 4294954514;
}

uint64_t audioRendererCentral_AttachToSynchronizer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *DerivedStorage;
  uint64_t (*v7)(uint64_t, CMTimebaseRef *);
  uint64_t v8;
  CMTimebaseRef v9;
  float Rate;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  CMTimebaseRef timebase;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_8;
  timebase = 0;
  v7 = *(uint64_t (**)(uint64_t, CMTimebaseRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v7)
    return 4294954514;
  v8 = v7(a2, &timebase);
  v9 = timebase;
  if (!(_DWORD)v8)
  {
    Rate = CMTimebaseGetRate(timebase);
    v8 = audioRendererCentral_ProcessRateChange(a1, 1, Rate);
    v9 = timebase;
  }
  if (v9)
    CFRelease(v9);
  if (!(_DWORD)v8)
  {
LABEL_8:
    v11 = *DerivedStorage;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v12)
    {
      v13 = v12(v11, a2, a3);
      v8 = v13;
      if (!a2 && !(_DWORD)v13)
        return audioRendererCentral_ProcessRateChange(a1, 0, 0.0);
      return v8;
    }
    return 4294954514;
  }
  return v8;
}

uint64_t audioRendererCentral_CopyClock(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t audioRendererCentral_SetRateAndTime(float a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __int128 *, float);
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v6 = *(uint64_t (**)(uint64_t, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v6)
    return 4294954514;
  v10 = v8;
  v11 = v9;
  return v6(v5, &v10, a1);
}

uint64_t audioRendererCentral_FlushFromMediaTime(uint64_t a1, __int128 *a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, void (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v8)
  {
    v13 = v11;
    v14 = v12;
    return v8(v7, &v13, a3, a4);
  }
  else
  {
    v9 = 4294954514;
    if (a3)
      a3(4294954514, a4);
  }
  return v9;
}

uint64_t audioRendererCentral_SetRateAndAnchorTime(float a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, __int128 *, float);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v12 = *a3;
  v13 = *((_QWORD *)a3 + 2);
  v10 = *a4;
  v11 = *((_QWORD *)a4 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 64);
  if (!v8)
    return 4294954514;
  v16 = v12;
  v17 = v13;
  v14 = v10;
  v15 = v11;
  return v8(v7, &v16, &v14, a1);
}

void audioRendererCentral_updateBufferedAirPlayAudioInUseFromSubRenderer()
{
  uint64_t *DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (DerivedStorage[8])
  {
    v1 = *DerivedStorage;
    v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v2)
    {
      v2(v1, CFSTR("BufferedAirPlayInUse"), *MEMORY[0x1E0C9AE00], &cf);
      if (cf)
        CFRelease(cf);
    }
  }
}

uint64_t FigPlayerFileCreateWithOptions(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char __dst[128];
  __int128 __str;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  __str = 0u;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FPSupport_CheckPlayerPerformanceTrace();
  FigPlayerGetClassID();
  v4 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  *a3 = 0;
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    strncpy(__dst, (const char *)0x3B0, 8uLL);
    kdebug_trace();
  }
  return v4;
}

uint64_t playerfig_autoSelectionCriteriaChanged()
{
  CMBaseObjectGetDerivedStorage();
  return FigDeferNotificationToDispatchQueue();
}

uint64_t playerfig_spatialAudioPreferencesChanged(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t, _QWORD);

  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 120);
  if (v4)
    return v4(a2, 0);
  return result;
}

uint64_t playerfig_ValeriaEnabled()
{
  CMBaseObjectGetDerivedStorage();
  return FigDeferNotificationToDispatchQueue();
}

void playerfig_deferredAutoSelectionCriteriaChanged(uint64_t a1, uint64_t a2)
{
  playerfig_applyAutoSelectionCriteriaInternal(a2, 0, 0);
}

void playerfig_applyAutoSelectionCriteriaInternal(uint64_t a1, int a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFArray *v7;
  void *ValueAtIndex;
  void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v6 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 760))
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
      v7 = *(const __CFArray **)(v6 + 504);
      if (!v7
        || !CFArrayGetCount(v7)
        || (ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 504), 0)) == 0)
      {
        JUMPOUT(0x19402EA24);
      }
      v9 = ValueAtIndex;
      CFRetain(ValueAtIndex);
      MEMORY[0x19402EA24](*(_QWORD *)(v6 + 496));
      itemfig_updateSelectedMediaArrayInternal(v9, 0, a2, a3);
      CFRelease(v9);
    }
  }
}

uint64_t itemfig_updateSelectedMediaArrayInternal(void *a1, const __CFArray *a2, int a3, _BYTE *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  uint64_t v10;
  const __CFArray *Mutable;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t TrackStorage;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __CFDictionary *NotificationPayloadForProperties;
  __int16 v26;
  CFTypeRef cf;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  cf = 0;
  v26 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1208));
  v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v9)
    goto LABEL_42;
  v10 = CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_6;
  Mutable = *(const __CFArray **)(DerivedStorage + 1816);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(DerivedStorage + 1816) = Mutable;
    if (!Mutable)
    {
LABEL_42:
      v12 = FigSignalErrorAt();
      goto LABEL_43;
    }
  }
  v12 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(Mutable, a2, 1);
  if ((_DWORD)v12)
  {
LABEL_43:
    v17 = v12;
    goto LABEL_44;
  }
LABEL_6:
  if (*(_QWORD *)(DerivedStorage + 1792))
  {
    if (!*(_BYTE *)(DerivedStorage + 1200)
      || (v12 = itemfig_createCoalescedClientAndAutomaticSelectedMediaArray(a1, &cf), !(_DWORD)v12)
      && (!cf
       || (v12 = itemfig_applySelectedMediaArray((uint64_t)a1, (const __CFArray *)cf, (char *)&v26 + 1, &v26),
           !(_DWORD)v12)))
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
      v13 = HIBYTE(v26);
      if (!HIBYTE(v26) && (_BYTE)v26)
      {
        v14 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 996);
        *(_QWORD *)&v30 = 0;
        if (v14)
        {
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, v14, &v30);
          if ((_DWORD)TrackStorage)
          {
LABEL_40:
            v17 = TrackStorage;
            goto LABEL_32;
          }
          v16 = itemfig_applyAudioSceneCompositionPresetToTrack(v30);
        }
        else
        {
          v16 = FigSignalErrorAt();
        }
        v17 = v16;
        if ((_DWORD)v16)
          goto LABEL_32;
        v13 = HIBYTE(v26);
      }
      if (!v13 && FigRenderedLegibleOutputManagerIsSupported())
      {
        playerfig_updateClosedCaptionsDisplayForItem(v9, (uint64_t)a1);
        playerfig_updateSubtitleDisplayForItem((uint64_t)v9, a1);
        playerfig_updateCaptionOrSubtitleHintOnVideoPipeline((uint64_t)v9, a1);
      }
      if (!*(_QWORD *)(DerivedStorage + 352) || !(HIBYTE(v26) | a3))
      {
LABEL_31:
        v17 = 0;
        goto LABEL_32;
      }
      MEMORY[0x19402EA0C](*(_QWORD *)(v10 + 496));
      if (*(void **)(v10 + 512) == a1
        && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 0, 0, 1, 0, 0, 1)
        && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 1, 1, 1, 0, 0, 0))
      {
        playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v9, *(const __CFString **)(v10 + 512), MEMORY[0x1E0CA2E18]);
        MEMORY[0x19402EA24](*(_QWORD *)(v10 + 496));
LABEL_27:
        NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v9, (uint64_t)a1, v18, v19, v20, v21, v22, v23, CFSTR("SelectedMediaArray"), 0);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        if (NotificationPayloadForProperties)
          CFRelease(NotificationPayloadForProperties);
        if (a4)
        {
          v17 = 0;
          *a4 = 1;
          goto LABEL_32;
        }
        goto LABEL_31;
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v10 + 496));
      v30 = *MEMORY[0x1E0CA2E18];
      v31 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v28 = v30;
      v29 = v31;
      TrackStorage = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v9, (uint64_t)&v30, (uint64_t)&v28, 0);
      if (!(_DWORD)TrackStorage)
        goto LABEL_27;
      goto LABEL_40;
    }
    goto LABEL_43;
  }
  v17 = 0;
LABEL_44:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
LABEL_32:
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  return v17;
}

uint64_t itemfig_createCoalescedClientAndAutomaticSelectedMediaArray(void *a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const __CFDictionary *v9;
  uint64_t SelectedMediaArray;
  const __CFDictionary *v11;
  const void *v12;
  uint64_t SelectedMediaArrayForCriteriaWithLegibleFallbackCriteria;
  uint64_t v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  CFTypeRef v18[21];

  v18[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v18[0] = 0;
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5 || (v6 = CMBaseObjectGetDerivedStorage(), *(_BYTE *)v6))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v14 = 0;
    goto LABEL_20;
  }
  v7 = v6;
  if (!*(_BYTE *)(v6 + 760))
  {
    SelectedMediaArray = itemfig_createSelectedMediaArray((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a1, (__CFArray **)&cf);
    if ((_DWORD)SelectedMediaArray
      || (v18[0] = (CFTypeRef)FigCFArrayCreateMutableCopy(),
          SelectedMediaArray = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays((const __CFArray *)v18[0], *(CFArrayRef *)(DerivedStorage + 1816), 1), (_DWORD)SelectedMediaArray))
    {
      v14 = SelectedMediaArray;
      goto LABEL_20;
    }
    v11 = 0;
    v9 = 0;
LABEL_14:
    v14 = 0;
    if (a2)
    {
      *a2 = v18[0];
      v18[0] = 0;
    }
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 752));
  v8 = *(const void **)(v7 + 728);
  if (v8)
    v9 = (const __CFDictionary *)CFRetain(v8);
  else
    v9 = 0;
  v12 = *(const void **)(v7 + 736);
  if (v12)
    v11 = (const __CFDictionary *)CFRetain(v12);
  else
    v11 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 752));
  SelectedMediaArrayForCriteriaWithLegibleFallbackCriteria = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria(*(_QWORD *)(DerivedStorage + 1792), *(const __CFArray **)(DerivedStorage + 1816), v9, v11, *(unsigned __int8 *)(v7 + 744), 0, v18);
  if (!(_DWORD)SelectedMediaArrayForCriteriaWithLegibleFallbackCriteria)
    goto LABEL_14;
  v14 = SelectedMediaArrayForCriteriaWithLegibleFallbackCriteria;
  if (v9)
LABEL_17:
    CFRelease(v9);
LABEL_18:
  if (v11)
    CFRelease(v11);
LABEL_20:
  if (cf)
    CFRelease(cf);
  if (v18[0])
    CFRelease(v18[0]);
  if (v5)
    CFRelease(v5);
  return v14;
}

uint64_t itemfig_applySelectedMediaArray(uint64_t a1, const __CFArray *a2, char *a3, _BYTE *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  CFIndex v12;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v14;
  CFTypeID v15;
  const __CFNumber *Value;
  const __CFNumber *v17;
  CFTypeID v18;
  uint64_t TrackStorage;
  const __CFDictionary *SecondaryForcedSubtitlesSelectedMediaDictionary;
  const __CFDictionary *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  CFTypeID v24;
  const void *v25;
  const void *v26;
  CFTypeID v27;
  const void *v28;
  const void *v29;
  uint64_t v30;
  const void *v31;
  CFTypeID v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex v35;
  const __CFDictionary *v36;
  const __CFDictionary *v37;
  CFTypeID v38;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v40;
  unsigned int v41;
  CFTypeID v42;
  const __CFArray *v43;
  const __CFArray *v44;
  CFTypeID v45;
  CFIndex v46;
  uint64_t v47;
  int SInt32;
  CFIndex v49;
  CFIndex v50;
  uint64_t v51;
  const __CFDictionary *v52;
  BOOL v53;
  unsigned int v54;
  int v55;
  CFIndex v56;
  const __CFArray *v57;
  const __CFDictionary *v58;
  const __CFArray *v59;
  CFIndex v60;
  CFTypeID v61;
  const __CFNumber *v62;
  const __CFNumber *v63;
  CFTypeID v64;
  int v65;
  _BOOL4 v66;
  const void *v67;
  CFTypeID v68;
  uint64_t v69;
  const __CFDictionary *v70;
  int v71;
  int v72;
  const void *v73;
  BOOL v74;
  const void *v75;
  const void *v76;
  int v77;
  const __CFBoolean *v78;
  const __CFBoolean *v79;
  CFTypeID v80;
  int v81;
  int v82;
  uint64_t i;
  uint64_t updated;
  const __CFArray *ArrayValue;
  const __CFArray *v86;
  const __CFArray *v87;
  CFIndex v88;
  char v89;
  BOOL v90;
  int v91;
  CFIndex v92;
  uint64_t v93;
  char v94;
  _BOOL8 v95;
  _BOOL8 v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  int isAtmosSupported;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  int TrackAudioChannelCount;
  int isTrackAC3;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t, uint64_t *, char *);
  int v121;
  const void *v122;
  const void *v124;
  FourCharCode MediaSubType;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t, uint64_t, uint64_t *, int *);
  int v130;
  const void *v131;
  BOOL v132;
  int v133;
  int v134;
  _BOOL8 v135;
  const __CFArray *v136;
  const void *v137;
  _BOOL4 v138;
  _BOOL4 v139;
  int v140;
  _BOOL4 isTrackDecodable;
  _BOOL4 v142;
  int v143;
  BOOL v144;
  BOOL v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  char v161;
  const __CFArray *v162;
  CFIndex v163;
  CFIndex v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  _BYTE *v170;
  char *v171;
  char v172;
  char v173;
  char v174;
  CFTypeRef cf;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  int v181;
  Boolean v182;
  int v183;
  int v184;
  CFIndex v185;
  CFIndex v186;
  int v187;
  int v188;
  uint64_t v189;
  CFIndex v190;
  unsigned int v191;
  BOOL v192;
  CFTypeRef v193;
  uint64_t v194;
  uint64_t v197;
  int v198;
  int isTrackAtmos;
  int v200;
  int isTrackEnhancedAC3;
  const void *v202;
  int v203;
  CFIndex v204;
  CFIndex v205;
  const __CFArray *v206;
  CFIndex v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t valuePtr;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v214;
  os_log_type_t type[8];
  char v216[12];
  int v217;
  _BYTE v218[12];
  __int16 v219;
  const void *v220;
  __int16 v221;
  const void *v222;
  uint64_t v223[18];

  v223[16] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(DerivedStorage + 1792);
  v197 = DerivedStorage;
  if (!v7)
  {
    v193 = 0;
    goto LABEL_333;
  }
  v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v8)
  {
    v11 = FigSignalErrorAt();
    LOBYTE(v7) = 0;
    v193 = 0;
    v172 = 0;
    v192 = 0;
    goto LABEL_334;
  }
  v193 = (CFTypeRef)v8;
  Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
    LOBYTE(v7) = 0;
LABEL_333:
    v172 = 0;
    v192 = 0;
    v11 = 0;
LABEL_334:
    v171 = a3;
    v170 = a4;
    goto LABEL_340;
  }
  v10 = Count;
  v11 = 0;
  v192 = 0;
  v194 = 0;
  v12 = 0;
  v205 = Count;
  v206 = a2;
  v208 = a1;
  do
  {
    v209 = 0;
    valuePtr = 0;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v12);
    if (!ValueAtIndex || (v14 = ValueAtIndex, v15 = CFGetTypeID(ValueAtIndex), v15 != CFDictionaryGetTypeID()))
    {
LABEL_330:
      TrackStorage = FigSignalErrorAt();
LABEL_331:
      v11 = TrackStorage;
      v171 = a3;
      v170 = a4;
      a1 = v208;
      goto LABEL_339;
    }
    Value = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("MediaSelectionOptionsPersistentID"));
    v17 = Value;
    if (Value)
    {
      v18 = CFGetTypeID(Value);
      if (v18 != CFNumberGetTypeID())
        goto LABEL_20;
      CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr);
      TrackStorage = itemfig_getTrackStorage(v208, valuePtr, &v209);
      if ((_DWORD)TrackStorage)
        goto LABEL_331;
      v207 = v12;
      if (*(_DWORD *)(v209 + 4) == 1668047728)
      {
        SecondaryForcedSubtitlesSelectedMediaDictionary = (const __CFDictionary *)FigAutomaticMediaSelectionCreateSecondaryForcedSubtitlesSelectedMediaDictionary(a2, *(const __CFDictionary **)(v197 + 1808));
        if (SecondaryForcedSubtitlesSelectedMediaDictionary)
        {
          v21 = SecondaryForcedSubtitlesSelectedMediaDictionary;
          v22 = (const __CFNumber *)CFDictionaryGetValue(SecondaryForcedSubtitlesSelectedMediaDictionary, CFSTR("MediaSelectionOptionsPersistentID"));
          if (v22)
          {
            v23 = v22;
            v24 = CFGetTypeID(v22);
            if (v24 == CFNumberGetTypeID())
              CFNumberGetValue(v23, kCFNumberSInt32Type, (char *)&valuePtr + 4);
          }
          CFRelease(v21);
        }
        v202 = 0;
        v11 = 0;
        v198 = 1;
        v200 = 0;
        goto LABEL_25;
      }
      v202 = 0;
      v198 = 0;
      v11 = 0;
    }
    else
    {
      v25 = CFDictionaryGetValue(v14, CFSTR("MediaSelectionOptionsUniqueOutOfBandID"));
      if (v25)
      {
        v26 = v25;
        v27 = CFGetTypeID(v25);
        if (v27 != CFNumberGetTypeID())
        {
LABEL_20:
          v11 = FigSignalErrorAt();
          a1 = v208;
          goto LABEL_40;
        }
        v202 = v26;
      }
      else
      {
        v202 = 0;
      }
      v207 = v12;
      v198 = 0;
    }
    v200 = 1;
LABEL_25:
    v28 = CFDictionaryGetValue(v14, CFSTR("MediaSelectionGroupID"));
    v29 = CFDictionaryGetValue(v14, CFSTR("MediaSelectionGroupMediaType"));
    v30 = CMBaseObjectGetDerivedStorage();
    v31 = *(const void **)(v30 + 1792);
    if (!v31)
      goto LABEL_34;
    v32 = CFGetTypeID(v31);
    if (v32 != CFArrayGetTypeID())
      goto LABEL_34;
    v33 = CFArrayGetCount(*(CFArrayRef *)(v30 + 1792));
    if (v33 < 1)
      goto LABEL_34;
    v34 = v33;
    v35 = 0;
    while (1)
    {
      v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v30 + 1792), v35);
      if (v36)
      {
        v37 = v36;
        v38 = CFGetTypeID(v36);
        if (v38 == CFDictionaryGetTypeID())
        {
          CFDictionaryGetValue(v37, CFSTR("MediaSelectionGroupID"));
          CFDictionaryGetValue(v37, CFSTR("MediaSelectionGroupMediaType"));
          if (FigCFEqual())
          {
            if (FigCFEqual())
              break;
          }
        }
      }
      if (v34 == ++v35)
        goto LABEL_34;
    }
    v42 = CFGetTypeID(v37);
    if (v42 != CFDictionaryGetTypeID())
    {
LABEL_34:
      *(_DWORD *)v216 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v40 = *(_DWORD *)v216;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
        v41 = v40;
      else
        v41 = v40 & 0xFFFFFFFE;
      if (v41)
      {
        *(_DWORD *)v218 = 136315650;
        *(_QWORD *)&v218[4] = "itemfig_applySelectedMediaArray";
        v219 = 2114;
        v220 = v28;
        v221 = 2114;
        v222 = v29;
        _os_log_send_and_compose_impl();
      }
      v12 = v207;
      a1 = v208;
      v10 = v205;
      a2 = v206;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_40;
    }
    v43 = (const __CFArray *)CFDictionaryGetValue(v37, CFSTR("MediaSelectionGroupOptions"));
    if (!v43)
      goto LABEL_330;
    v44 = v43;
    v45 = CFGetTypeID(v43);
    if (v45 != CFArrayGetTypeID())
      goto LABEL_330;
    v46 = CFArrayGetCount(v44);
    LODWORD(v223[0]) = 1061109567;
    if (!v46
      || (FigCFArrayGetValueAtIndex(),
          FigCFDictionaryGetStringValue(),
          FigCFStringGetOSTypeValue(),
          LODWORD(v223[0]) != 1936684398))
    {
      v186 = CFArrayGetCount(v44);
      if (v186 < 1)
      {
        a1 = v208;
        goto LABEL_327;
      }
      v182 = 0;
      v184 = 0;
      v188 = 0;
      v55 = 0;
      v56 = 0;
      while (1)
      {
        *(_DWORD *)v218 = 0;
        v223[0] = 0;
        v57 = v44;
        v58 = (const __CFDictionary *)CFArrayGetValueAtIndex(v44, v56);
        v59 = (const __CFArray *)CFDictionaryGetValue(v58, CFSTR("MediaSelectionOptionsFallbackIDs"));
        v190 = v56;
        if (v59)
          v60 = CFArrayGetCount(v59);
        else
          v60 = 0;
        *(_DWORD *)v216 = 1061109567;
        if (!v58)
          goto LABEL_330;
        v61 = CFGetTypeID(v58);
        if (v61 != CFDictionaryGetTypeID())
          goto LABEL_330;
        CFDictionaryGetValue(v58, CFSTR("MediaSelectionOptionsMediaType"));
        FigCFStringGetOSTypeValue();
        v62 = (const __CFNumber *)CFDictionaryGetValue(v58, CFSTR("MediaSelectionOptionsPersistentID"));
        if (v62)
        {
          v63 = v62;
          v64 = CFGetTypeID(v62);
          if (v64 != CFNumberGetTypeID())
            goto LABEL_330;
          CFNumberGetValue(v63, kCFNumberSInt32Type, v218);
          v65 = FigCFEqual();
          v66 = v65;
          if (*(_DWORD *)v216 == 1935832172)
          {
            if (v65)
              v74 = 1;
            else
              v74 = *(_DWORD *)v218 == HIDWORD(valuePtr);
            v66 = v74;
          }
          else if (*(_DWORD *)v216 == 1668047728)
          {
            if (v65)
            {
              v184 = 1;
              v66 = 1;
            }
            else
            {
              if (v200)
                v66 = *(_DWORD *)v218 == *(_DWORD *)(v197 + 1008);
              else
                v66 = 0;
              v184 = 1;
            }
          }
          v76 = CFDictionaryGetValue(v58, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"));
          if (v76)
            v55 = 1;
          v77 = v66;
          if (v66)
          {
            if (v76)
            {
              if (*(_DWORD *)v218 != HIDWORD(valuePtr))
              {
                v78 = (const __CFBoolean *)CFDictionaryGetValue(v14, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"));
                if (v78)
                {
                  v79 = v78;
                  v80 = CFGetTypeID(v78);
                  if (v80 == CFBooleanGetTypeID())
                    v182 = CFBooleanGetValue(v79);
                }
              }
            }
          }
          v81 = v188;
          if (*(_DWORD *)v216 == 1952807028)
            v81 = 1;
          v188 = v81;
          v82 = *(_DWORD *)v218;
          if (v77)
          {
            if (v60)
            {
              *(_DWORD *)type = 0;
              if (FigCFArrayGetInt32AtIndex())
                v82 = *(_DWORD *)type;
            }
          }
          if (v60 >= 1)
          {
            for (i = 0; v60 != i; ++i)
            {
              *(_DWORD *)type = 0;
              FigCFArrayGetInt32AtIndex();
              if (*(_DWORD *)type != v82)
              {
                TrackStorage = itemfig_getTrackStorage(v208, *(int *)type, v223);
                if ((_DWORD)TrackStorage)
                  goto LABEL_331;
                if (*(_BYTE *)(v223[0] + 8))
                {
                  itemfig_setTrackEnabled(v208, v223[0], 0);
                  updated = itemfig_updateDefaultTrackID(v208, *(int *)type, (char *)&v214);
                  if ((_DWORD)updated)
                  {
                    v11 = updated;
                    goto LABEL_336;
                  }
                  LODWORD(v194) = 1;
                }
              }
            }
          }
          TrackStorage = itemfig_getTrackStorage(v208, v82, v223);
          if ((_DWORD)TrackStorage)
            goto LABEL_331;
          v44 = v57;
          if (*(unsigned __int8 *)(v223[0] + 8) != v77)
          {
            itemfig_setTrackEnabled(v208, v223[0], v77);
            v11 = itemfig_updateDefaultTrackID(v208, v82, (char *)type);
            if ((_DWORD)v11)
            {
LABEL_336:
              v171 = a3;
              v170 = a4;
              v173 = 1;
              a1 = v208;
              goto LABEL_346;
            }
            goto LABEL_115;
          }
          v11 = 0;
        }
        else
        {
          v67 = CFDictionaryGetValue(v58, CFSTR("MediaSelectionOptionsUniqueOutOfBandID"));
          if (v67)
          {
            v68 = CFGetTypeID(v67);
            v44 = v57;
            if (v68 == CFNumberGetTypeID())
            {
              if (!FigCFEqual())
              {
                if (v202)
                  goto LABEL_116;
                v75 = *(const void **)(v197 + 1848);
                if (!v75)
                  goto LABEL_116;
                CFRelease(v75);
                *(_QWORD *)(v197 + 1848) = 0;
                goto LABEL_115;
              }
              v69 = v197;
              v70 = *(const __CFDictionary **)(v197 + 1848);
              if (!v70)
                goto LABEL_120;
              CFDictionaryGetValue(v70, CFSTR("MediaSelectionOptionsUniqueOutOfBandID"));
              v71 = FigCFEqual();
              v69 = v197;
              v72 = v71;
              v73 = *(const void **)(v197 + 1848);
              if (!v72)
              {
                if (v73)
                {
                  CFRelease(v73);
                  v69 = v197;
                }
LABEL_120:
                *(_QWORD *)(v69 + 1848) = v58;
                CFRetain(v58);
LABEL_115:
                LODWORD(v194) = 1;
                goto LABEL_116;
              }
              if (!v73)
                goto LABEL_120;
            }
          }
          else
          {
            v44 = v57;
          }
        }
LABEL_116:
        v56 = v190 + 1;
        if (v190 + 1 == v186)
        {
          a1 = v208;
          if (v55)
          {
            *(_BYTE *)(v197 + 1022) = HIDWORD(valuePtr) != 0;
            itemfig_setDisplayNonForcedSubtitlesEnabled(v208, v182);
          }
          if ((_BYTE)v194 && (_BYTE)v188)
            playerfig_resetSubtitleRenderPipeline();
          if (v184)
          {
            if (v192)
            {
              v192 = 1;
              v10 = v205;
              a2 = v206;
              v12 = v207;
              v89 = v198;
            }
            else
            {
              v89 = v198;
              v192 = *(unsigned __int8 *)(v197 + 1012) != v198;
              v10 = v205;
              a2 = v206;
              v12 = v207;
            }
            *(_BYTE *)(v197 + 1012) = v89;
          }
          else
          {
            v10 = v205;
            a2 = v206;
            v12 = v207;
          }
          goto LABEL_40;
        }
      }
    }
    v47 = -1;
    FigCFDictionaryGetCFIndexIfPresent();
    SInt32 = FigCFNumberGetSInt32();
    v204 = CFArrayGetCount(v44);
    v49 = CFArrayGetCount(v44);
    if (v49 < 1)
    {
      v54 = 0;
      a1 = v208;
      goto LABEL_298;
    }
    v50 = v49;
    v51 = 0;
    a1 = v208;
    do
    {
      v52 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
      v212 = 0;
      v211 = -1;
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetCFIndexIfPresent();
      v53 = v212 == SInt32 && v211 == -1;
      if (v53)
      {
        ArrayValue = (const __CFArray *)FigCFDictionaryGetArrayValue();
        if (ArrayValue && CFArrayGetCount(ArrayValue) >= 1)
        {
          CMBaseObjectGetDerivedStorage();
          v86 = (const __CFArray *)CFDictionaryGetValue(v52, CFSTR("MediaSelectionOptionsFallbackIDs"));
          v87 = v86;
          if (v86)
            v88 = CFArrayGetCount(v86);
          else
            v88 = 0;
          *(_QWORD *)type = -1;
          LODWORD(v223[0]) = 0;
          if (itemfig_getMaximumNumberOfSpatializedOutputChannels(v208, (int *)v223))
            v90 = 1;
          else
            v90 = SLODWORD(v223[0]) < 3;
          v91 = v90;
          v92 = v88 - 1;
          if (v88 < 1)
          {
            v96 = 0;
          }
          else
          {
            v93 = 0;
            v94 = 1;
            v203 = v91;
            do
            {
              while (1)
              {
                LODWORD(v223[0]) = 0;
                FigCFArrayGetInt32AtIndex();
                if (!itemfig_isTrackAC3(v208, LODWORD(v223[0])))
                  break;
                if (!itemfig_canTrackPassthrough(v208, LODWORD(v223[0])))
                  goto LABEL_153;
                v94 = 0;
                v53 = v92 == v93++;
                if (v53)
                  goto LABEL_157;
              }
              ++v93;
            }
            while (v88 != v93);
            if ((v94 & 1) != 0)
            {
LABEL_153:
              v95 = 0;
              goto LABEL_158;
            }
LABEL_157:
            v95 = itemfig_isAC3PassthroughSupported() != 0;
LABEL_158:
            v97 = 0;
            v98 = 1;
            do
            {
              while (1)
              {
                LODWORD(v223[0]) = 0;
                FigCFArrayGetInt32AtIndex();
                v99 = LODWORD(v223[0]);
                if (!itemfig_isTrackEnhancedAC3(v208, LODWORD(v223[0]))
                  || itemfig_isTrackAtmos(v208, v99))
                {
                  break;
                }
                if (!itemfig_canTrackPassthrough(v208, LODWORD(v223[0])))
                  goto LABEL_169;
                v98 = 0;
                v53 = v92 == v97++;
                if (v53)
                  goto LABEL_168;
              }
              ++v97;
            }
            while (v88 != v97);
            if ((v98 & 1) != 0)
              goto LABEL_169;
LABEL_168:
            itemfig_isEC3PassthroughSupported();
LABEL_169:
            v100 = 0;
            v101 = 1;
            do
            {
              while (1)
              {
                LODWORD(v223[0]) = 0;
                FigCFArrayGetInt32AtIndex();
                if (!itemfig_isTrackAtmos(v208, LODWORD(v223[0])))
                  break;
                if (!itemfig_canTrackPassthrough(v208, LODWORD(v223[0])))
                  goto LABEL_179;
                v101 = 0;
                v53 = v92 == v100++;
                if (v53)
                  goto LABEL_178;
              }
              ++v100;
            }
            while (v88 != v100);
            if ((v101 & 1) != 0)
              goto LABEL_179;
LABEL_178:
            itemfig_isEC3PassthroughSupported();
LABEL_179:
            v96 = v95;
            v91 = v203;
          }
          isAtmosSupported = itemfig_isAtmosSupported(v208);
          v103 = FigCFWeakReferenceHolderCopyReferencedObject();
          v104 = CMBaseObjectGetDerivedStorage();
          cf = (CFTypeRef)v103;
          if (v103)
          {
            v105 = v104;
            if (CFEqual(*(CFTypeRef *)(v104 + 904), CFSTR("PreferExclusivePassthrough")))
            {
              if (isAtmosSupported)
                v106 = 1;
              else
                v106 = v96;
            }
            else if (CFEqual(*(CFTypeRef *)(v105 + 904), CFSTR("PreferAC3ViaExclusivePassthrough")))
            {
              v106 = v96;
            }
            else
            {
              v106 = 0;
            }
            v183 = 100000;
            if (!isAtmosSupported || v106)
            {
              if ((v91 | v106) == 1)
              {
                if (v96)
                  v108 = 10000;
                else
                  v108 = 100000;
                if (v96)
                  v109 = 100000;
                else
                  v109 = 10;
                v180 = v109;
                if (v96)
                  v110 = 10;
                else
                  v110 = 100;
                v181 = v110;
                if (v96)
                  v107 = 1000;
                else
                  v107 = 10000;
                if (v96)
                  v111 = 100;
                else
                  v111 = 1000;
                v183 = v111;
              }
              else
              {
                v181 = 1000;
                v183 = 10000;
                v180 = 100;
                v108 = 10;
                v107 = 100000;
              }
            }
            else
            {
              v107 = 10000;
              v180 = 100;
              v181 = 1000;
              v108 = 10;
            }
            if (v108 <= v107)
              v112 = v107;
            else
              v112 = v108;
            v179 = v112;
            if (v88 >= 1)
            {
              v177 = v107;
              v178 = v108;
              v191 = 0;
              v113 = 0;
              v187 = -1;
              v189 = -1;
              v185 = v88;
              while (1)
              {
                v213 = 0;
                FigCFArrayGetInt32AtIndex();
                v114 = itemfig_getTrackStorage(a1, v213, &v214);
                if ((_DWORD)v114)
                {
                  v11 = v114;
LABEL_295:
                  v158 = -1;
                  goto LABEL_296;
                }
                TrackAudioChannelCount = itemfig_getTrackAudioChannelCount(a1, v213);
                isTrackAC3 = itemfig_isTrackAC3(a1, v213);
                isTrackEnhancedAC3 = itemfig_isTrackEnhancedAC3(a1, v213);
                isTrackAtmos = itemfig_isTrackAtmos(a1, v213);
                v117 = v213;
                v118 = CMBaseObjectGetDerivedStorage();
                v223[0] = 0;
                *(_DWORD *)v216 = 0;
                v119 = *(_QWORD *)(v118 + 968);
                v120 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, char *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
                if (!v120)
                {
                  LODWORD(v124) = 0;
                  goto LABEL_232;
                }
                v121 = v120(v119, v117, v223, v216);
                v122 = (const void *)v223[0];
                if (v121 || *(_DWORD *)v216 != 1936684398)
                  break;
                *(_QWORD *)v218 = 0;
                if (itemfig_copyFormatDescription(v223[0], (uint64_t *)v218)
                  || (v124 = *(const void **)v218) != 0
                  && (MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)v218),
                      CFRelease(v124),
                      LODWORD(v124) = 1,
                      MediaSubType != 1634754915)
                  && MediaSubType != 1667330147
                  && MediaSubType != 1902211171)
                {
                  LODWORD(v124) = 0;
                }
                v122 = (const void *)v223[0];
                if (v223[0])
                  goto LABEL_231;
LABEL_232:
                v126 = v213;
                v127 = CMBaseObjectGetDerivedStorage();
                v223[0] = 0;
                v217 = 0;
                v128 = *(_QWORD *)(v127 + 968);
                v129 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 56);
                if (!v129)
                {
                  v139 = 0;
                  goto LABEL_254;
                }
                v130 = v129(v128, v126, v223, &v217);
                v131 = (const void *)v223[0];
                if (v130)
                  v132 = 0;
                else
                  v132 = v217 == 1936684398;
                if (!v132)
                {
                  v139 = 0;
                  if (!v223[0])
                    goto LABEL_254;
LABEL_253:
                  CFRelease(v131);
                  goto LABEL_254;
                }
                v133 = (int)v124;
                v134 = TrackAudioChannelCount;
                v135 = v96;
                *(_QWORD *)v218 = 0;
                if (itemfig_copyFormatDescription(v223[0], (uint64_t *)v218))
                {
                  v139 = 0;
                  goto LABEL_251;
                }
                v136 = v87;
                v137 = *(const void **)v218;
                if (*(_QWORD *)v218)
                {
                  v138 = FigAudioFormatDescriptionGetCinematicAudioEffectEligibility() != 0;
                  CFRelease(v137);
                }
                else
                {
                  v138 = 0;
                }
                *(_QWORD *)v216 = 0;
                v140 = itemfig_getTrackStorage(v208, v126, v216);
                v139 = 0;
                if (!v138 || v140)
                {
                  v87 = v136;
LABEL_251:
                  v96 = v135;
                  TrackAudioChannelCount = v134;
                  LODWORD(v124) = v133;
                  goto LABEL_252;
                }
                v87 = v136;
                v96 = v135;
                TrackAudioChannelCount = v134;
                LODWORD(v124) = v133;
                if (*(_QWORD *)v216)
                  v139 = *(_BYTE *)(*(_QWORD *)v216 + 161)
                      || *(_BYTE *)(*(_QWORD *)v216 + 162)
                      || *(_BYTE *)(*(_QWORD *)v216 + 160);
LABEL_252:
                v131 = (const void *)v223[0];
                if (v223[0])
                  goto LABEL_253;
LABEL_254:
                isTrackDecodable = itemfig_isTrackDecodable(v208, v213);
                if (isTrackAC3)
                  v142 = v96;
                else
                  v142 = 0;
                if (isTrackDecodable || v142)
                {
                  v143 = v183;
                  if (isTrackAtmos)
                  {
                    v144 = 0;
                  }
                  else
                  {
                    v143 = 0;
                    v144 = isTrackEnhancedAC3 == 0;
                  }
                  v146 = !v144 || isTrackAC3 != 0 || TrackAudioChannelCount < 3;
                  v147 = v177;
                  v148 = v178;
                  if (v146)
                    v147 = 0;
                  if (TrackAudioChannelCount >= 3)
                    v148 = 0;
                  v149 = v180;
                  if (!isTrackAC3)
                    v149 = 0;
                  v150 = v149 + v148;
                  v151 = v181;
                  if (!isTrackEnhancedAC3)
                    v151 = 0;
                  v152 = v179;
                  if (!v139)
                    v152 = 0;
                  v153 = v150 + v151 + v143 + (_DWORD)v124 + v147 + v152;
                  v154 = v187;
                  v155 = v153 <= v187;
                  if (v153 > v187)
                    v154 = v153;
                  v187 = v154;
                  v156 = v191;
                  if (!v155)
                    v156 = v213;
                  v191 = v156;
                  v157 = v189;
                  if (!v155)
                    v157 = v113;
                  v189 = v157;
                }
                ++v113;
                a1 = v208;
                if (v185 == v113)
                  goto LABEL_292;
              }
              LODWORD(v124) = 0;
              if (!v223[0])
                goto LABEL_232;
LABEL_231:
              CFRelease(v122);
              goto LABEL_232;
            }
            v191 = 0;
LABEL_292:
            if (!FigCFDictionaryGetArrayValue())
            {
              v11 = 0;
              goto LABEL_295;
            }
            FigCFArrayGetCFIndexAtIndex();
            v11 = 0;
            v158 = *(_QWORD *)type;
LABEL_296:
            v212 = v191;
            v211 = v158;
            CFRelease(cf);
            if ((_DWORD)v11)
              goto LABEL_338;
          }
          else
          {
            v212 = 0;
            v211 = -1;
          }
        }
        v54 = v212;
        v47 = v211;
        goto LABEL_298;
      }
      ++v51;
    }
    while (v50 != v51);
    v54 = 0;
    v47 = -1;
LABEL_298:
    if (v204 < 1)
    {
      BYTE4(v194) = 0;
      v11 = 0;
    }
    else
    {
      v159 = 0;
      v160 = 0;
      v161 = 0;
      do
      {
        FigCFArrayGetValueAtIndex();
        v162 = (const __CFArray *)FigCFDictionaryGetArrayValue();
        if (v162)
        {
          v163 = CFArrayGetCount(v162);
          v218[0] = 0;
          v216[0] = 0;
          if (v163 >= 1)
          {
            v164 = v163;
            v165 = 0;
            while (1)
            {
              LODWORD(v223[0]) = 0;
              FigCFArrayGetInt32AtIndex();
              v166 = LODWORD(v223[0]) == v54 ? v47 : -1;
              v167 = itemfig_enableAudioTrackAndSetCompositionPresetIndexForEnabledTrack(a1, LODWORD(v223[0]) == v54, v223[0], v166, v218, v216);
              if ((_DWORD)v167)
                break;
              if (v218[0])
                v161 = 1;
              if (v216[0])
                v160 = 1;
              if (v164 == ++v165)
                goto LABEL_322;
            }
LABEL_337:
            v11 = v167;
            goto LABEL_338;
          }
        }
        else
        {
          v218[0] = 0;
          v216[0] = 0;
        }
        LODWORD(v223[0]) = 0;
        FigCFDictionaryGetInt32IfPresent();
        if (LODWORD(v223[0]) == v54)
          v168 = v47;
        else
          v168 = -1;
        v167 = itemfig_enableAudioTrackAndSetCompositionPresetIndexForEnabledTrack(a1, LODWORD(v223[0]) == v54, v223[0], v168, v218, v216);
        if ((_DWORD)v167)
          goto LABEL_337;
        if (v218[0])
          v161 = 1;
        if (v216[0])
          v160 = 1;
LABEL_322:
        ++v159;
      }
      while (v159 != v204);
      v11 = 0;
      v169 = v194;
      if (v161)
        v169 = 1;
      LODWORD(v194) = v169;
      BYTE4(v194) = v160;
    }
LABEL_327:
    v10 = v205;
    a2 = v206;
    v12 = v207;
LABEL_40:
    ++v12;
  }
  while (v12 != v10);
LABEL_338:
  v171 = a3;
  v170 = a4;
LABEL_339:
  v172 = v194;
  LOBYTE(v7) = BYTE4(v194);
LABEL_340:
  v173 = v172;
  if (!v172 && !v192 && !(_BYTE)v7)
  {
    v173 = 0;
    v174 = 0;
    if (!v171)
      goto LABEL_351;
LABEL_350:
    *v171 = v173;
    goto LABEL_351;
  }
  BYTE4(v194) = v7;
LABEL_346:
  if (*(_BYTE *)(v197 + 1202))
  {
    itemfig_postSelectedMediaOptionsDidChangeNotification(a1);
    v171 = a3;
    v170 = a4;
  }
  else
  {
    *(_BYTE *)(v197 + 1201) = 1;
  }
  v174 = BYTE4(v194);
  if (v171)
    goto LABEL_350;
LABEL_351:
  if (v170)
    *v170 = v174;
  if (v193)
    CFRelease(v193);
  return v11;
}

void playerfig_updateClosedCaptionsDisplayForItem(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  int v5;
  const void *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  char v9;
  dispatch_queue_t *v10;
  uint64_t v11;
  uint64_t FigBaseObject;
  void (*v13)(uint64_t, const __CFString *, uint64_t);
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __CFDictionary *NotificationPayloadForProperties;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(unsigned __int8 *)(DerivedStorage + 297);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
  {
    v8 = 0;
    goto LABEL_10;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  if (!ValueAtIndex)
  {
    v8 = 0;
LABEL_11:
    v9 = 1;
    goto LABEL_12;
  }
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = v7;
  if (v5)
    v5 = 1;
  else
    v5 = *(_BYTE *)(v7 + 1012) != 0;
  if (!*(_BYTE *)(v7 + 1288))
  {
LABEL_10:
    ValueAtIndex = 0;
    goto LABEL_11;
  }
  CFRetain(ValueAtIndex);
  v9 = 0;
LABEL_12:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  if (a2 && ValueAtIndex != (const void *)a2)
    goto LABEL_33;
  if (ValueAtIndex && v5)
  {
    if (*(_BYTE *)(v8 + 1020))
      v5 = 0;
    goto LABEL_19;
  }
  if (ValueAtIndex)
  {
LABEL_19:
    v10 = *(dispatch_queue_t **)(CMBaseObjectGetDerivedStorage() + 1744);
    if (v10)
      FigLegibleOutputManagerSetNonForcedEnabledForMediaType(v10, 1668047728, v5);
  }
  v11 = *(_QWORD *)(DerivedStorage + 576);
  if (v11)
  {
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
    v13 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v13)
    {
      if (v5)
        v14 = *MEMORY[0x1E0C9AE50];
      else
        v14 = *MEMORY[0x1E0C9AE40];
      v13(FigBaseObject, CFSTR("DisplayClosedCaptions"), v14);
    }
    if (v5 && *(_QWORD *)(DerivedStorage + 584))
      playerfig_resetSubtitleRenderPipeline();
  }
  if (v5 != *(unsigned __int8 *)(DerivedStorage + 298))
  {
    *(_BYTE *)(DerivedStorage + 298) = v5;
    FPSupport_updateClosedCaptionLayer(DerivedStorage + 296, *(const __CFArray **)(DerivedStorage + 288));
    NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(a1, a2, v15, v16, v17, v18, v19, v20, CFSTR("DisplayingClosedCaptions"), 0);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (NotificationPayloadForProperties)
      CFRelease(NotificationPayloadForProperties);
  }
LABEL_33:
  if ((v9 & 1) == 0)
    CFRelease(ValueAtIndex);
}

void playerfig_updateSubtitleDisplayForItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *ValueAtIndex;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, const __CFString *, uint64_t);
  const __CFArray *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
  {
    v5 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    if (!ValueAtIndex)
    {
      v5 = 0;
      goto LABEL_8;
    }
    v5 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v5 + 1288))
    {
      CFRetain(ValueAtIndex);
      v6 = 0;
      goto LABEL_9;
    }
  }
  ValueAtIndex = 0;
LABEL_8:
  v6 = 1;
LABEL_9:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  if (a2)
  {
    if (!v5 || ValueAtIndex != a2)
      goto LABEL_23;
  }
  else if (!v5)
  {
    goto LABEL_23;
  }
  v7 = *(_QWORD *)(DerivedStorage + 584);
  if (!v7)
    goto LABEL_23;
  v8 = (uint64_t *)(*(_BYTE *)(DerivedStorage + 688) && *(_BYTE *)(v5 + 1020) ? MEMORY[0x1E0C9AE50] : MEMORY[0x1E0C9AE40]);
  v9 = *v8;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
  v11 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v11)
    v11(FigBaseObject, CFSTR("DisplayNonForcedSubtitles"), v9);
  v12 = *(const __CFArray **)(v5 + 1816);
  if (v12)
  {
    if (CFArrayGetCount(v12))
    {
LABEL_23:
      if ((v6 & 1) != 0)
        return;
LABEL_26:
      CFRelease(ValueAtIndex);
      return;
    }
  }
  playerfig_resetSubtitleRenderPipeline();
  if ((v6 & 1) == 0)
    goto LABEL_26;
}

void playerfig_updateCaptionOrSubtitleHintOnVideoPipeline(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  _BOOL4 v8;
  void (*v9)(uint64_t, _QWORD, CFTypeRef *);
  int v10;
  uint64_t v11;
  uint64_t FigBaseObject;
  void (*v13)(uint64_t, const __CFString *, uint64_t);
  uint64_t v14;
  CFTypeRef cf;

  cf = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 298))
    v6 = *(_QWORD *)(DerivedStorage + 576) != 0;
  else
    v6 = 0;
  if (!a2)
  {
    v9 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v9 || (v9(a1, 0, &cf), !cf))
    {
      v8 = 0;
      goto LABEL_15;
    }
  }
  v7 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v5 + 688) && *(_BYTE *)(v7 + 1020))
  {
    v8 = 1;
    if (a2)
      goto LABEL_15;
  }
  else
  {
    v8 = *(_BYTE *)(v7 + 1021) != 0;
    if (a2)
      goto LABEL_15;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
LABEL_15:
  v10 = v6 || v8;
  if (*(unsigned __int8 *)(v5 + 704) != v10)
  {
    v11 = *(_QWORD *)(v5 + 568);
    if (v11)
    {
      *(_BYTE *)(v5 + 704) = v10;
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
      v13 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v13)
      {
        if (v10)
          v14 = *MEMORY[0x1E0C9AE50];
        else
          v14 = *MEMORY[0x1E0C9AE40];
        v13(FigBaseObject, CFSTR("CAImageQueueCaptionsMayAppearHint"), v14);
      }
    }
  }
}

uint64_t playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(const void *a1, const __CFString *a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t TrackStorage;
  CFIndex Count;
  CFIndex v8;
  const __CFAllocator *v9;
  const void *ValueAtIndex;
  const void *v11;
  uint64_t DataChannelConfigurationAndSetIdentifiers;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  __CFDictionary *Mutable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t VTable;
  uint64_t (*v22)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  int v23;
  CFTypeRef v24;
  CFAllocatorRef v25;
  uint64_t FigBaseObject;
  uint64_t v27;
  void (*v28)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v29;
  CFTypeRef v30;
  uint64_t (*v31)(const void *, CFTypeRef);
  uint64_t (*v32)(const void *, CFTypeRef, __int128 *);
  __CFDictionary *v33;
  const __CFDictionary *v34;
  const __CFArray *v35;
  const __CFArray *v36;
  __CFDictionary *v37;
  uint64_t v38;
  int v39;
  int v40;
  const __CFArray *v41;
  const __CFAllocator *v42;
  CFMutableDictionaryRef v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v50;
  void (*v51)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, __int128 *, _QWORD);
  const __CFArray *v55;
  CFIndex i;
  const void *v57;
  uint64_t v58;
  const __CFArray *v59;
  CFIndex v60;
  CFIndex v61;
  CFIndex j;
  const void *v63;
  const void *v64;
  uint64_t MutableCopy;
  OpaqueCMTagCollection *v66;
  uint64_t v67;
  CMTagValue v68;
  CMTagValue v69;
  const __CFDictionary *v70;
  const void *Value;
  const void *v72;
  OpaqueCMTagCollection *v73;
  uint64_t v74;
  CMTagValue v75;
  CMTagValue v76;
  uint64_t v77;
  CFTypeRef v78;
  uint64_t v79;
  CFIndex v80;
  CFIndex v81;
  CFIndex v82;
  const void *v83;
  CFTypeRef v84;
  uint64_t (*v85)(const void *, CFTypeRef);
  uint64_t (*v86)(const void *, CFTypeRef, __int128 *);
  __CFDictionary *v87;
  CFIndex v89;
  CFIndex v90;
  CFIndex v91;
  const void *v92;
  const void *v93;
  const void *v94;
  void (*v95)(const void *, const void *);
  uint64_t (*v96)(const void *, const void *, __int128 *);
  uint64_t v97;
  uint64_t v98;
  CFIndex v99;
  uint64_t v100;
  __int128 v101;
  const __CFDictionary *v102;
  __int128 v103;
  CFIndex v104;
  int cf;
  uint64_t v107;
  __CFDictionary *v109;
  CFTypeRef v110[2];
  uint64_t v111;
  CFTypeRef v112;
  CFTypeRef v113;
  CFTypeRef v114;
  CFTypeRef v115;
  CMTagCollectionRef tagCollection;
  CFTypeRef v117;
  CFTypeRef v118;
  CFTypeRef v119;
  __CFArray *v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  CMTag v128;
  CMTag v129;

  v127 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v120 = 0;
  v118 = 0;
  v119 = 0;
  tagCollection = 0;
  v117 = 0;
  v114 = 0;
  v115 = 0;
  v112 = 0;
  v113 = 0;
  cf = (int)a1;
  if (!playerfig_hasVideoTargets())
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v11 = 0;
    v38 = 0;
    goto LABEL_130;
  }
  v5 = *(_QWORD *)(DerivedStorage + 824);
  v107 = DerivedStorage;
  if (!v5)
  {
    *(_QWORD *)&v123 = 0;
    v40 = *(_DWORD *)(DerivedStorage + 1000);
    if (!v40)
      goto LABEL_38;
    TrackStorage = itemfig_getTrackStorage((uint64_t)a2, v40, &v123);
    if ((_DWORD)TrackStorage)
      goto LABEL_185;
    v5 = *(_QWORD *)(v123 + 48);
    if (!v5)
    {
LABEL_38:
      v109 = 0;
      v39 = 1;
      goto LABEL_39;
    }
  }
  TrackStorage = FigImageQueueTableCopyVideoTargets(v5, &v120);
  if ((_DWORD)TrackStorage)
  {
LABEL_185:
    v38 = TrackStorage;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
LABEL_186:
    v37 = 0;
    v11 = 0;
    goto LABEL_130;
  }
  if (v120)
  {
    Count = CFArrayGetCount(v120);
    if (Count >= 1)
    {
      v8 = Count;
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      ValueAtIndex = CFArrayGetValueAtIndex(v120, 0);
      v11 = FigImageQueueTableCopyFigImageQueueForVideoTarget(v5, ValueAtIndex);
      DataChannelConfigurationAndSetIdentifiers = playerfig_createDataChannelConfigurationAndSetIdentifiers((int)a1, a2, v9, (uint64_t *)&v118);
      if ((_DWORD)DataChannelConfigurationAndSetIdentifiers)
      {
        v38 = DataChannelConfigurationAndSetIdentifiers;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        goto LABEL_130;
      }
      v13 = 1;
      v101 = *MEMORY[0x1E0CA5288];
      v103 = *MEMORY[0x1E0CA5228];
      while (1)
      {
        v14 = FigTagMakeWithSInt64Value();
        v123 = v103;
        v124 = v101;
        v125 = v14;
        v126 = v15;
        FigTagCollectionCreate();
        Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v109 = Mutable;
        if (!Mutable)
          break;
        v17 = (uint64_t)Mutable;
        v18 = *(unsigned int *)(DerivedStorage + 1000);
        if ((_DWORD)v18)
        {
          itemfig_transferItemTrackPropertyToVideoTargetConfigurationDataChannelSettings((uint64_t)a2, v18, (uint64_t)CFSTR("Matrix"), Mutable, CFSTR("TrackMatrix"));
          v19 = *(_QWORD *)(v107 + 968);
          v20 = *(unsigned int *)(v107 + 1000);
          VTable = CMBaseObjectGetVTable();
          v17 = (uint64_t)v109;
          v22 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(VTable + 16) + 56);
          if (v22)
          {
            v23 = v22(v19, v20, &v113, 0);
            v17 = (uint64_t)v109;
            if (!v23)
            {
              v24 = v113;
              v25 = CFGetAllocator(a1);
              FigBaseObject = FigTrackReaderGetFigBaseObject(v24);
              v27 = CMBaseObjectGetVTable();
              v17 = (uint64_t)v109;
              v28 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(v27 + 8) + 48);
              if (v28)
              {
                v28(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v25, &v112);
                v17 = (uint64_t)v109;
              }
            }
          }
        }
        v29 = FigDataChannelConfigurationAddFigImageQueue((uint64_t)v118, v11, (uint64_t)v119, v17, (const __CFArray *)v112);
        if ((_DWORD)v29)
          goto LABEL_181;
        v30 = v118;
        if ((*((_BYTE *)a3 + 12) & 1) != 0)
        {
          *(_OWORD *)v110 = *a3;
          v111 = *((_QWORD *)a3 + 2);
          v32 = *(uint64_t (**)(const void *, CFTypeRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 64);
          DerivedStorage = v107;
          if (!v32)
          {
LABEL_125:
            v38 = 4294954514;
            goto LABEL_126;
          }
          v121 = *(_OWORD *)v110;
          v122 = v111;
          v29 = v32(ValueAtIndex, v30, &v121);
          if ((_DWORD)v29)
            goto LABEL_181;
        }
        else
        {
          v31 = *(uint64_t (**)(const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          DerivedStorage = v107;
          if (!v31)
            goto LABEL_125;
          v29 = v31(ValueAtIndex, v30);
          if ((_DWORD)v29)
            goto LABEL_181;
        }
        if (v113)
        {
          CFRelease(v113);
          v113 = 0;
        }
        if (v112)
        {
          CFRelease(v112);
          v112 = 0;
        }
        if (v118)
        {
          CFRelease(v118);
          v118 = 0;
        }
        if (v11)
          CFRelease(v11);
        if (v8 == v13)
          goto LABEL_34;
        ValueAtIndex = CFArrayGetValueAtIndex(v120, v13);
        v11 = FigImageQueueTableCopyFigImageQueueForVideoTarget(v5, ValueAtIndex);
        v29 = playerfig_createDataChannelConfigurationAndSetIdentifiers((int)a1, a2, v9, (uint64_t *)&v118);
        ++v13;
        if ((_DWORD)v29)
          goto LABEL_181;
      }
      v29 = FigSignalErrorAt();
LABEL_181:
      v38 = v29;
LABEL_126:
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      goto LABEL_129;
    }
  }
  v109 = 0;
LABEL_34:
  v39 = 0;
LABEL_39:
  v41 = *(const __CFArray **)(DerivedStorage + 1048);
  if (!v41 || (v99 = CFArrayGetCount(v41), v99 < 1))
  {
    if (!v39)
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v11 = 0;
      v38 = 0;
      goto LABEL_129;
    }
    v77 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v77 + 240));
    v78 = *(CFTypeRef *)(v77 + 248);
    if (v78)
      v78 = CFRetain(v78);
    v120 = (__CFArray *)v78;
    MEMORY[0x19402EF04](*(_QWORD *)(v77 + 240));
    v79 = playerfig_createDataChannelConfigurationAndSetIdentifiers(cf, a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], (uint64_t *)&v118);
    if (!(_DWORD)v79)
    {
      if (!v120 || (v80 = CFArrayGetCount(v120), v80 < 1))
      {
LABEL_120:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v11 = 0;
        v38 = 0;
        *(_BYTE *)(v107 + 876) = 0;
        goto LABEL_129;
      }
      v81 = v80;
      v82 = 0;
      while (1)
      {
        v83 = CFArrayGetValueAtIndex(v120, v82);
        v84 = v118;
        if ((*((_BYTE *)a3 + 12) & 1) != 0)
        {
          v121 = *a3;
          v122 = *((_QWORD *)a3 + 2);
          v86 = *(uint64_t (**)(const void *, CFTypeRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 64);
          if (!v86)
          {
LABEL_127:
            v34 = 0;
            v35 = 0;
            v36 = 0;
LABEL_128:
            v37 = 0;
            v11 = 0;
            v38 = 4294954514;
            goto LABEL_129;
          }
          v123 = v121;
          *(_QWORD *)&v124 = v122;
          v79 = v86(v83, v84, &v123);
          if ((_DWORD)v79)
            break;
        }
        else
        {
          v85 = *(uint64_t (**)(const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          if (!v85)
            goto LABEL_127;
          v79 = v85(v83, v84);
          if ((_DWORD)v79)
            break;
        }
        if (v81 == ++v82)
          goto LABEL_120;
      }
    }
    v38 = v79;
    v34 = 0;
LABEL_190:
    v35 = 0;
    v36 = 0;
    goto LABEL_191;
  }
  v42 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v43 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v34 = v43;
  if (!v43)
  {
    v38 = FigSignalErrorAt();
    goto LABEL_190;
  }
  v44 = 0;
  v45 = 1;
  v102 = v43;
  do
  {
    *(_QWORD *)&v123 = 0;
    FigCFArrayGetInt32AtIndex();
    itemfig_getTrackStorage((uint64_t)a2, 0, &v123);
    v46 = (unsigned int *)v123;
    if (!(_QWORD)v123)
    {
      v38 = FigSignalErrorAt();
      v37 = 0;
      goto LABEL_184;
    }
    v47 = *(_QWORD *)(DerivedStorage + 968);
    v48 = *(unsigned int *)v123;
    v49 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
    if (v49)
    {
      if (!v49(v47, v48, &v113, 0))
      {
        v50 = FigTrackReaderGetFigBaseObject(v113);
        v51 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v51)
          v51(v50, CFSTR("TrackFormatDescriptionArray"), v42, &v112);
      }
    }
    v100 = v44;
    if (v46[1] == 1986618469)
    {
      *(_QWORD *)&v121 = 0;
      v110[0] = 0;
      v52 = *(_QWORD *)(DerivedStorage + 968);
      v53 = *v46;
      v54 = *(unsigned int (**)(uint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 56);
      if (v54 && !v54(v52, v53, &v121, 0))
      {
        if (!itemfig_copyFormatDescription(v121, (uint64_t *)v110))
        {
          FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions((const opaqueCMFormatDescription *)v110[0], &v115);
          if (v115)
          {
            if (CMTagCollectionContainsCategory((CMTagCollectionRef)v115, kCMTagCategory_StereoView))
            {
              FigTagCollectionCreateMutableCopy();
              if (v114)
                CMTagCollectionRemoveAllTagsOfCategory((CMMutableTagCollectionRef)v114, kCMTagCategory_StereoView);
            }
          }
        }
        if ((_QWORD)v121)
          CFRelease((CFTypeRef)v121);
        if (v110[0])
          CFRelease(v110[0]);
      }
      v37 = CFDictionaryCreateMutable(v42, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v37)
        itemfig_transferItemTrackPropertyToVideoTargetConfigurationDataChannelSettings((uint64_t)a2, 0, (uint64_t)CFSTR("Matrix"), v37, CFSTR("TrackMatrix"));
    }
    else
    {
      v37 = 0;
    }
    v55 = (const __CFArray *)*((_QWORD *)v46 + 27);
    if (v55)
    {
      v104 = CFArrayGetCount(v55);
      if (v104 >= 1)
      {
        for (i = 0; i != v104; ++i)
        {
          *(_QWORD *)&v121 = 0;
          v57 = CFArrayGetValueAtIndex(*((CFArrayRef *)v46 + 27), i);
          *(_QWORD *)&v121 = CFDictionaryGetValue(v34, v57);
          if (!(_QWORD)v121)
          {
            v58 = playerfig_createDataChannelConfigurationAndSetIdentifiers(cf, a2, v42, (uint64_t *)&v121);
            if ((_DWORD)v58)
              goto LABEL_182;
            CFDictionarySetValue(v34, v57, (const void *)v121);
            CFRelease((CFTypeRef)v121);
          }
          v59 = (const __CFArray *)*((_QWORD *)v46 + 28);
          if (v59)
          {
            v60 = CFArrayGetCount(v59);
            if (v60 >= 1)
            {
              v61 = v60;
              for (j = 0; v61 != j; ++j)
              {
                v63 = CFArrayGetValueAtIndex(*((CFArrayRef *)v46 + 28), j);
                v64 = FigImageQueueTableCopyFigImageQueueForVideoTarget((uint64_t)v63, v57);
                if (v64)
                {
                  v11 = v64;
                  MutableCopy = FigTagCollectionCreateMutableCopy();
                  if ((_DWORD)MutableCopy)
                    goto LABEL_122;
                  v66 = tagCollection;
                  v67 = FigTagMakeWithSInt64Value();
                  v69 = v68;
                  *(_QWORD *)&v128.category = v67;
                  v128.value = v69;
                  CMTagCollectionAddTag(v66, v128);
                  if (FigCFArrayGetValueAtIndex())
                  {
                    FigTagCollectionAddTagsFromCollection();
                  }
                  else
                  {
                    if (j)
                    {
                      MutableCopy = FigSignalErrorAt();
LABEL_122:
                      v38 = MutableCopy;
                      v33 = v109;
                      v34 = v102;
LABEL_123:
                      v35 = 0;
                      v36 = 0;
                      goto LABEL_130;
                    }
                    MutableCopy = FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories();
                    if ((_DWORD)MutableCopy)
                      goto LABEL_122;
                  }
                  if (v115)
                  {
                    CMTagCollectionContainsCategory(tagCollection, kCMTagCategory_StereoView);
                    FigTagCollectionAddTagsFromCollection();
                  }
                  MutableCopy = FigDataChannelConfigurationAddFigImageQueue(v121, v11, (uint64_t)tagCollection, (uint64_t)v37, (const __CFArray *)v112);
                  if ((_DWORD)MutableCopy)
                    goto LABEL_122;
                  if (tagCollection)
                  {
                    CFRelease(tagCollection);
                    tagCollection = 0;
                  }
                  ++v45;
                  CFRelease(v11);
                }
              }
            }
          }
          v70 = (const __CFDictionary *)*((_QWORD *)v46 + 30);
          if (v70)
          {
            Value = CFDictionaryGetValue(v70, v57);
            v34 = v102;
            if (Value)
            {
              v72 = Value;
              v58 = FigTagCollectionCreateMutableCopy();
              if ((_DWORD)v58
                || (v73 = (OpaqueCMTagCollection *)v117,
                    v74 = FigTagMakeWithSInt64Value(),
                    v76 = v75,
                    *(_QWORD *)&v129.category = v74,
                    v129.value = v76,
                    CMTagCollectionAddTag(v73, v129),
                    v58 = FigDataChannelConfigurationAddFigDataQueue(v121, v72, (uint64_t)v117, 0, (const __CFArray *)v112), (_DWORD)v58))
              {
LABEL_182:
                v38 = v58;
LABEL_184:
                v11 = 0;
                v33 = v109;
                goto LABEL_123;
              }
              ++v45;
              if (v117)
              {
                CFRelease(v117);
                v117 = 0;
              }
            }
            DerivedStorage = v107;
          }
          else
          {
            DerivedStorage = v107;
            v34 = v102;
          }
        }
      }
    }
    if (v115)
    {
      CFRelease(v115);
      v115 = 0;
    }
    if (v114)
    {
      CFRelease(v114);
      v114 = 0;
    }
    if (v37)
      CFRelease(v37);
    if (v113)
    {
      CFRelease(v113);
      v113 = 0;
    }
    if (v112)
    {
      CFRelease(v112);
      v112 = 0;
    }
    v44 = v100 + 1;
  }
  while (v100 + 1 != v99);
  if (FigCFDictionaryGetCount() < 1)
  {
    v35 = 0;
    v36 = 0;
LABEL_178:
    v33 = v109;
    goto LABEL_179;
  }
  v35 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  v36 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (v35)
    v89 = CFArrayGetCount(v35);
  else
    v89 = 0;
  if (v36)
    v90 = CFArrayGetCount(v36);
  else
    v90 = 0;
  v33 = v109;
  if (v89 != v90)
  {
    v98 = FigSignalErrorAt();
    v33 = v109;
    v38 = v98;
    goto LABEL_186;
  }
  if (v89 < 1)
  {
LABEL_179:
    v37 = 0;
    v11 = 0;
    v38 = 0;
    *(_BYTE *)(v107 + 876) = 0;
    goto LABEL_130;
  }
  v91 = 0;
  while (1)
  {
    v92 = CFArrayGetValueAtIndex(v35, v91);
    v93 = CFArrayGetValueAtIndex(v36, v91);
    v94 = CFDictionaryGetValue(*(CFDictionaryRef *)(v107 + 1096), v92);
    if (v94)
      FigDataChannelConfigurationAddDataChannelResource((uint64_t)v93, (uint64_t)v94);
    if ((*((_BYTE *)a3 + 12) & 1) != 0)
      break;
    v95 = *(void (**)(const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v95)
      v95(v92, v93);
LABEL_177:
    if (v89 == ++v91)
      goto LABEL_178;
  }
  v121 = *a3;
  v122 = *((_QWORD *)a3 + 2);
  v96 = *(uint64_t (**)(const void *, const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 64);
  if (!v96)
    goto LABEL_128;
  v123 = v121;
  *(_QWORD *)&v124 = v122;
  v97 = v96(v92, v93, &v123);
  if (!(_DWORD)v97)
    goto LABEL_177;
  v38 = v97;
LABEL_191:
  v37 = 0;
  v11 = 0;
LABEL_129:
  v33 = v109;
LABEL_130:
  if (v119)
  {
    v87 = v33;
    CFRelease(v119);
    v33 = v87;
  }
  if (v33)
    CFRelease(v33);
  if (v115)
    CFRelease(v115);
  if (v37)
    CFRelease(v37);
  if (v117)
    CFRelease(v117);
  if (tagCollection)
    CFRelease(tagCollection);
  if (v34)
    CFRelease(v34);
  if (v35)
    CFRelease(v35);
  if (v36)
    CFRelease(v36);
  if (v113)
    CFRelease(v113);
  if (v112)
    CFRelease(v112);
  if (v120)
    CFRelease(v120);
  if (v11)
    CFRelease(v11);
  if (v118)
    CFRelease(v118);
  return v38;
}

__CFDictionary *playerfig_createNotificationPayloadForProperties(const void *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *value, uint64_t a10)
{
  __CFArray *Mutable;
  const void *v13;
  const void **v14;
  __CFDictionary *NotificationPayloadForProperties;
  char v16;
  const void **v18;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v18 = (const void **)&a10;
  v13 = value;
  if (value)
  {
    do
    {
      CFArrayAppendValue(Mutable, v13);
      v14 = v18++;
      v13 = *v14;
    }
    while (*v14);
  }
  if (a1 || !a2)
  {
    if (!a1)
      goto LABEL_14;
    CFRetain(a1);
LABEL_9:
    NotificationPayloadForProperties = FPSupport_CreateNotificationPayloadForProperties((uint64_t)a1, a2, Mutable);
    v16 = 0;
    if (!Mutable)
      goto LABEL_11;
    goto LABEL_10;
  }
  CMBaseObjectGetDerivedStorage();
  a1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (a1)
    goto LABEL_9;
LABEL_14:
  NotificationPayloadForProperties = 0;
  v16 = 1;
  if (Mutable)
LABEL_10:
    CFRelease(Mutable);
LABEL_11:
  if ((v16 & 1) == 0)
    CFRelease(a1);
  return NotificationPayloadForProperties;
}

uint64_t itemfig_createSelectedMediaArray(const __CFAllocator *a1, void *a2, __CFArray **a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  CFMutableArrayRef Mutable;
  __CFArray *v10;
  CFIndex v11;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v13;
  CFTypeID v14;
  const void *Value;
  const void *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFTypeID v19;
  const __CFArray *v20;
  const __CFArray *v21;
  CFTypeID v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  CFTypeID v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  CFTypeID v31;
  uint64_t TrackStorage;
  const void *v33;
  CFTypeID v34;
  uint64_t v35;
  uint64_t ArrayValue;
  __CFArray *v37;
  int v38;
  const __CFBoolean *v39;
  const __CFBoolean *v40;
  CFTypeID v41;
  int v42;
  const __CFArray *v43;
  CFIndex v44;
  CFIndex v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFNumber *v49;
  __CFDictionary *MutableCopy;
  __CFDictionary *v51;
  const void *v52;
  uint64_t v53;
  const __CFArray *v54;
  CFIndex v55;
  CFIndex v56;
  CFIndex v57;
  const __CFDictionary *v58;
  const __CFDictionary *v59;
  CFTypeID v60;
  CFIndex v61;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v67;
  const void *v68;
  __CFArray **v69;
  const __CFAllocator *allocator;
  const void *v71;
  uint64_t v72;
  const void *v73;
  CFIndex Count;
  int v75;
  CFIndex v76;
  uint64_t v77;
  int valuePtr;
  _BYTE v79[12];
  __int16 v80;
  const __CFDictionary *v81;
  _QWORD v82[18];
  CFRange v83;

  v82[16] = *MEMORY[0x1E0C80C00];
  v6 = itemfig_assureBasicsReadyForInspection(a2);
  if ((_DWORD)v6)
    return v6;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 1792))
  {
    v10 = 0;
LABEL_95:
    v65 = 0;
    if (!a3)
      goto LABEL_98;
    goto LABEL_96;
  }
  v8 = DerivedStorage;
  allocator = a1;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294954510;
  v10 = Mutable;
  Count = CFArrayGetCount(*(CFArrayRef *)(v8 + 1792));
  if (Count < 1)
    goto LABEL_95;
  v69 = a3;
  v11 = 0;
  v75 = 0;
  v68 = (const void *)*MEMORY[0x1E0C9AE50];
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 1792), v11);
    if (!ValueAtIndex)
      break;
    v13 = ValueAtIndex;
    v14 = CFGetTypeID(ValueAtIndex);
    if (v14 != CFDictionaryGetTypeID())
      break;
    Value = CFDictionaryGetValue(v13, CFSTR("MediaSelectionGroupID"));
    v16 = CFDictionaryGetValue(v13, CFSTR("MediaSelectionGroupMediaType"));
    v17 = (const __CFArray *)CFDictionaryGetValue(v13, CFSTR("MediaSelectionGroupMediaCharacteristics"));
    v76 = v11;
    if (v17)
    {
      v18 = v17;
      v19 = CFGetTypeID(v17);
      if (v19 == CFArrayGetTypeID() && CFArrayGetCount(v18) >= 1)
      {
        v83.length = CFArrayGetCount(v18);
        v83.location = 0;
        LODWORD(v17) = CFArrayContainsValue(v18, v83, CFSTR("public.legible"));
      }
      else
      {
        LODWORD(v17) = 0;
      }
    }
    v73 = Value;
    if (!v75 && (v27 = *(const __CFDictionary **)(v8 + 1848)) != 0 && (_DWORD)v17)
    {
      v75 = 1;
LABEL_60:
      MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, v27);
      if (!MutableCopy)
        break;
      v51 = MutableCopy;
      if (Value)
        CFDictionaryAddValue(MutableCopy, CFSTR("MediaSelectionGroupID"), Value);
      if (v16)
        CFDictionaryAddValue(v51, CFSTR("MediaSelectionGroupMediaType"), v16);
      v52 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      v53 = CMBaseObjectGetDerivedStorage();
      if (v53 && *(_BYTE *)(v53 + 760))
      {
        v54 = *(const __CFArray **)(v8 + 1816);
        if (v54 && (v55 = CFArrayGetCount(*(CFArrayRef *)(v8 + 1816)), v55 >= 1))
        {
          v56 = v55;
          v57 = 0;
          while (1)
          {
            v58 = (const __CFDictionary *)CFArrayGetValueAtIndex(v54, v57);
            if (v58)
            {
              v59 = v58;
              v60 = CFGetTypeID(v58);
              if (v60 == CFDictionaryGetTypeID())
              {
                CFDictionaryGetValue(v59, CFSTR("MediaSelectionGroupID"));
                if (FigCFEqual())
                  break;
              }
            }
            if (v56 == ++v57)
              goto LABEL_74;
          }
        }
        else
        {
LABEL_74:
          CFDictionaryAddValue(v51, CFSTR("AutomaticallySelected"), v68);
        }
      }
      if (v52)
        CFRelease(v52);
      CFArrayAppendValue(v10, v51);
      CFRelease(v51);
    }
    else
    {
      v20 = (const __CFArray *)CFDictionaryGetValue(v13, CFSTR("MediaSelectionGroupOptions"));
      if (!v20)
        break;
      v21 = v20;
      v22 = CFGetTypeID(v20);
      if (v22 != CFArrayGetTypeID())
        break;
      v71 = v16;
      v23 = CFArrayGetCount(v21);
      if (!v23)
      {
        LODWORD(v77) = 0;
        LOBYTE(valuePtr) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v63 = v77;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)valuePtr))
          v64 = v63;
        else
          v64 = v63 & 0xFFFFFFFE;
        v61 = v76;
        if (v64)
        {
          *(_DWORD *)v79 = 136315394;
          *(_QWORD *)&v79[4] = "itemfig_createSelectedMediaArray";
          v80 = 2114;
          v81 = v13;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_85;
      }
      v24 = v23;
      if (v23 >= 1)
      {
        v25 = 0;
        v72 = v8;
        do
        {
          v82[0] = 0;
          valuePtr = -1;
          v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v25);
          if (!v26)
            goto LABEL_88;
          v27 = v26;
          v28 = CFGetTypeID(v26);
          if (v28 != CFDictionaryGetTypeID())
            goto LABEL_88;
          v29 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("MediaSelectionOptionsPersistentID"));
          if (v29)
          {
            v30 = v29;
            v31 = CFGetTypeID(v29);
            if (v31 != CFNumberGetTypeID())
              goto LABEL_88;
            CFNumberGetValue(v30, kCFNumberSInt32Type, &valuePtr);
            TrackStorage = itemfig_getTrackStorage((uint64_t)a2, valuePtr, v82);
            if ((_DWORD)TrackStorage)
              goto LABEL_89;
            if (valuePtr == *(_DWORD *)(v8 + 1008))
            {
              if (*(_BYTE *)(v8 + 1012))
                goto LABEL_87;
            }
            else
            {
              *(_QWORD *)v79 = -1;
              v35 = v82[0];
              if (*(_DWORD *)(v82[0] + 4) == 1936684398)
              {
                FigCFDictionaryGetCFIndexIfPresent();
                ArrayValue = FigCFDictionaryGetArrayValue();
              }
              else
              {
                ArrayValue = 0;
              }
              if (*(_BYTE *)(v35 + 8))
              {
                v37 = v10;
              }
              else
              {
                v37 = v10;
                v43 = (const __CFArray *)CFDictionaryGetValue(v27, CFSTR("MediaSelectionOptionsFallbackIDs"));
                if (v43)
                {
                  v67 = ArrayValue;
                  v44 = CFArrayGetCount(v43);
                  if (v44 >= 1)
                  {
                    v45 = v44;
                    v46 = 0;
                    while (1)
                    {
                      FigCFArrayGetInt32AtIndex();
                      v47 = itemfig_getTrackStorage((uint64_t)a2, valuePtr, v82);
                      if ((_DWORD)v47)
                      {
                        v65 = v47;
                        v10 = v37;
                        goto LABEL_98;
                      }
                      v35 = v82[0];
                      if (*(_BYTE *)(v82[0] + 8))
                        break;
                      if (v45 == ++v46)
                        goto LABEL_35;
                    }
                    if (v67)
                      FigCFArrayGetCFIndexAtIndex();
                  }
                }
              }
LABEL_35:
              v10 = v37;
              v8 = v72;
              if (*(_BYTE *)(v35 + 8))
              {
                v38 = *(_DWORD *)(v35 + 4);
                if (v38 == 1936684398)
                {
                  v48 = -1;
                  v77 = -1;
                  v49 = *(const __CFNumber **)(v35 + 144);
                  if (v49)
                  {
                    CFNumberGetValue(v49, kCFNumberCFIndexType, &v77);
                    v48 = v77;
                  }
                  if (v48 == *(_QWORD *)v79)
                  {
LABEL_87:
                    Value = v73;
                    v16 = v71;
                    goto LABEL_60;
                  }
                }
                else
                {
                  if (v38 != 1935832172)
                    goto LABEL_87;
                  if (!*(_BYTE *)(v72 + 1022))
                  {
                    v39 = (const __CFBoolean *)CFDictionaryGetValue(v27, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"));
                    if (v39)
                    {
                      v40 = v39;
                      v41 = CFGetTypeID(v39);
                      if (v41 == CFBooleanGetTypeID())
                      {
                        v42 = *(unsigned __int8 *)(v72 + 1020);
                        if (v42 == CFBooleanGetValue(v40))
                          goto LABEL_87;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            v33 = CFDictionaryGetValue(v27, CFSTR("MediaSelectionOptionsUniqueOutOfBandID"));
            if (!v33)
              goto LABEL_88;
            v34 = CFGetTypeID(v33);
            if (v34 != CFNumberGetTypeID())
              goto LABEL_88;
          }
        }
        while (++v25 != v24);
      }
    }
    v61 = v76;
LABEL_85:
    v11 = v61 + 1;
    if (v11 == Count)
    {
      v65 = 0;
      goto LABEL_90;
    }
  }
LABEL_88:
  TrackStorage = FigSignalErrorAt();
LABEL_89:
  v65 = TrackStorage;
LABEL_90:
  a3 = v69;
  if (!v69)
  {
LABEL_98:
    if (v10)
      CFRelease(v10);
    return v65;
  }
LABEL_96:
  if ((_DWORD)v65)
    goto LABEL_98;
  *a3 = v10;
  return v65;
}

uint64_t itemfig_getTrackStorage(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  _DWORD *ValueAtIndex;
  _DWORD *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = itemfig_ensureTrackStorageArray();
  if (!(_DWORD)result)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (Count < 1)
    {
      return FigSignalErrorAt();
    }
    else
    {
      v8 = Count;
      v9 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v9);
        if (*ValueAtIndex == a2)
          break;
        if (v8 == ++v9)
          return FigSignalErrorAt();
      }
      v11 = ValueAtIndex;
      result = 0;
      *a3 = v11;
    }
  }
  return result;
}

uint64_t itemfig_assureBasicsReadyUsingAsset(void *a1)
{
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 1200))
    return 0;
  else
    return itemfig_setBasicInspectables(a1);
}

uint64_t itemfig_setBasicInspectables(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFAllocatorRef v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  uint64_t *v13;
  const void *v14;
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, _QWORD, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, const __CFString *, _QWORD, _BYTE *);
  double v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, const __CFString *, _QWORD, void **);
  CFDictionaryRef v22;
  uint64_t DefaultLocalCenter;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, const __CFString *, _QWORD, uint64_t);
  CFAllocatorRef v27;
  uint64_t v28;
  void (*v29)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  uint64_t v30;
  CFAllocatorRef v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  const __CFDictionary *v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  _BYTE *v48;
  NSObject *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int *v53;
  uint64_t v54;
  int TrackIDMediaType;
  _BYTE *v56;
  NSObject *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int *v61;
  uint64_t v62;
  NSObject *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  CFAllocatorRef v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  uint64_t v74;
  const void *v75;
  _BYTE *v76;
  NSObject *v77;
  unsigned int v78;
  unsigned int v79;
  const char *v80;
  int v81;
  uint64_t v82;
  void (*v83)(uint64_t, const __CFString *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  const void *v86;
  const __CFDictionary *v87;
  const void *v88;
  CFTypeRef v89;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v92;
  _BYTE *v93;
  NSObject *v94;
  unsigned int v95;
  unsigned int v96;
  const void *v97;
  NSObject *v98;
  unsigned int v99;
  unsigned int v100;
  const void **v101;
  const __CFDictionary *v102;
  double valuePtr;
  CFTypeRef cf;
  CFTypeRef v105;
  os_log_type_t type;
  _BYTE number[12];
  __int16 v108;
  void *v109;
  __int16 v110;
  const char *v111;
  void *values[18];

  values[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v105 = 0;
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v3)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  v4 = (const void *)v3;
  v5 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*v5)
  {
    LODWORD(cf) = 0;
    LOBYTE(valuePtr) = 0;
    v92 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = 0;
    goto LABEL_140;
  }
  v6 = v5;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1208));
  if (!*(_BYTE *)(DerivedStorage + 1200))
  {
    cf = 0;
    v8 = itemfig_setFormatReader(a1);
    if ((_DWORD)v8)
      goto LABEL_145;
    v9 = *(_QWORD *)(DerivedStorage + 1216);
    v10 = CFGetAllocator(a1);
    CMBaseObject = FigAssetGetCMBaseObject(v9);
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (!v12)
      goto LABEL_110;
    v13 = (uint64_t *)(DerivedStorage + 128);
    v8 = v12(CMBaseObject, CFSTR("assetProperty_ContentByteStream"), v10, DerivedStorage + 128);
    if ((_DWORD)v8)
    {
LABEL_145:
      v7 = v8;
      goto LABEL_139;
    }
    if (*v13)
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        values[0] = 0;
        if (*(_BYTE *)(DerivedStorage + 1))
        {
          v14 = *(const void **)(DerivedStorage + 1384);
          if (v14)
          {
            CFRelease(v14);
            *(_QWORD *)(DerivedStorage + 1384) = 0;
          }
          v15 = CMByteStreamGetCMBaseObject();
          v16 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
          if (v16)
            v16(v15, CFSTR("CRABS_InteractivePlaybackAssertion"), 0, DerivedStorage + 1384);
        }
        if (*(_BYTE *)(DerivedStorage + 1696))
        {
          *(_QWORD *)number = 0;
          v17 = CMByteStreamGetCMBaseObject();
          v18 = *(void (**)(uint64_t, const __CFString *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
          if (v18)
          {
            v18(v17, CFSTR("CRABS_ReadAheadStartTime"), 0, number);
            if (*(_QWORD *)number)
            {
              valuePtr = 0.0;
              CFNumberGetValue(*(CFNumberRef *)number, kCFNumberDoubleType, &valuePtr);
              CFRelease(*(CFTypeRef *)number);
              v19 = *(double *)(DerivedStorage + 1552);
              if (v19 >= valuePtr)
                v19 = valuePtr;
              *(double *)(DerivedStorage + 1552) = v19;
            }
          }
        }
        *(_BYTE *)(DerivedStorage + 1697) = 1;
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        v20 = CMByteStreamGetCMBaseObject();
        v21 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
        if (v21)
        {
          if (!v21(v20, CFSTR("CRABS_ConnectionState"), 0, values))
          {
            v22 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigCachedReadAheadByteStreamParameter_ConnectionState, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
            itemfig_ConnectionStateChanged(DefaultLocalCenter, a1, v24, *v13, v22);
            if (v22)
              CFRelease(v22);
          }
        }
        if (values[0])
          CFRelease(values[0]);
        if (!*(_QWORD *)(DerivedStorage + 2008))
        {
          v25 = CMByteStreamGetCMBaseObject();
          v26 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
          if (v26)
            v26(v25, CFSTR("CRABS_ClientNetworkActivity"), 0, DerivedStorage + 2008);
        }
        v27 = CFGetAllocator(a1);
        v28 = CMByteStreamGetCMBaseObject();
        v29 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
        if (v29)
          v29(v28, CFSTR("CRABS_NetworkUrgencyMonitor"), v27, DerivedStorage + 632);
      }
      else
      {
        *(_BYTE *)(DerivedStorage + 1330) = 1;
      }
      itemfig_reportingAgentSetup((uint64_t)a1);
    }
    v30 = *(_QWORD *)(DerivedStorage + 1216);
    v31 = CFGetAllocator(a1);
    v32 = FigAssetGetCMBaseObject(v30);
    v33 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (v33)
      v7 = v33(v32, CFSTR("assetProperty_Tracks"), v31, &cf);
    else
      v7 = 4294954514;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if ((_DWORD)v7)
      goto LABEL_139;
    v34 = CMBaseObjectGetDerivedStorage();
    v35 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v35)
    {
      v36 = (const void *)v35;
      v37 = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)v37)
      {
        v38 = v37;
        MEMORY[0x19402EEEC](*(_QWORD *)(v37 + 712));
        v39 = *(const void **)(v38 + 720);
        if (v39)
          v40 = (const __CFDictionary *)CFRetain(v39);
        else
          v40 = 0;
        MEMORY[0x19402EF04](*(_QWORD *)(v38 + 712));
        v101 = (const void **)(v34 + 984);
        v41 = FPSupport_BuildAlternateTrackGroups(*(_QWORD *)(v34 + 968), (__CFDictionary **)(v34 + 984));
        if (!(_DWORD)v41)
        {
          v102 = v40;
          v42 = *(_DWORD *)(v38 + 784);
          if (v42 == 1)
            v43 = 1;
          else
            v43 = 4 * (v42 == 2);
          if (*(_BYTE *)(v38 + 857))
            v44 = v43 | 2;
          else
            v44 = v43;
          FPSupport_GetDefaultTrackIDForMediaType(*(_QWORD *)(v34 + 968), 1986618469, v34 + 1000, v44);
          itemfig_updateHasEnabledVideo();
          itemfig_updateListenersForVideoTrack((uint64_t)a1, *(unsigned int *)(v34 + 1000));
          v45 = *(unsigned int *)(v34 + 1008);
          if ((_DWORD)v45
            || (FPSupport_GetDefaultTrackIDForMediaType(*(_QWORD *)(v34 + 968), 1668047728, v34 + 1008, 0),
                v45 = *(unsigned int *)(v34 + 1008),
                (_DWORD)v45))
          {
            itemfig_hintTrackIfPreload((uint64_t)a1, v45);
          }
          v46 = (int *)(v34 + 996);
          v47 = *(unsigned int *)(v34 + 996);
          if ((_DWORD)v47 && fp_getTrackIDMediaType(*(_QWORD *)(v34 + 968), v47) != 1936684398)
          {
            v48 = v6;
            LODWORD(valuePtr) = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v50 = LODWORD(valuePtr);
            if (os_log_type_enabled(v49, type))
              v51 = v50;
            else
              v51 = v50 & 0xFFFFFFFE;
            if (v51)
            {
              v52 = *v46;
              *(_DWORD *)number = 136315394;
              *(_QWORD *)&number[4] = "itemfig_establishTrackIDs";
              v108 = 1024;
              LODWORD(v109) = v52;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            *v46 = 0;
            v6 = v48;
          }
          v53 = (unsigned int *)(v34 + 1016);
          v54 = *(unsigned int *)(v34 + 1016);
          if ((_DWORD)v54)
          {
            TrackIDMediaType = fp_getTrackIDMediaType(*(_QWORD *)(v34 + 968), v54);
            if (TrackIDMediaType != 1935832172 && TrackIDMediaType != 1952807028)
            {
              v56 = v6;
              LODWORD(valuePtr) = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v58 = LODWORD(valuePtr);
              if (os_log_type_enabled(v57, type))
                v59 = v58;
              else
                v59 = v58 & 0xFFFFFFFE;
              if (v59)
              {
                v60 = *v53;
                *(_DWORD *)number = 136315394;
                *(_QWORD *)&number[4] = "itemfig_establishTrackIDs";
                v108 = 1024;
                LODWORD(v109) = v60;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              *v53 = 0;
              v6 = v56;
              v40 = v102;
            }
          }
          v61 = (int *)(v34 + 1040);
          v62 = *(unsigned int *)(v34 + 1040);
          if ((_DWORD)v62 && fp_getTrackIDMediaType(*(_QWORD *)(v34 + 968), v62) != 1751216244)
          {
            LODWORD(valuePtr) = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v64 = LODWORD(valuePtr);
            if (os_log_type_enabled(v63, type))
              v65 = v64;
            else
              v65 = v64 & 0xFFFFFFFE;
            if (v65)
            {
              v66 = *v61;
              *(_DWORD *)number = 136315394;
              *(_QWORD *)&number[4] = "itemfig_establishTrackIDs";
              v108 = 1024;
              LODWORD(v109) = v66;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            *v61 = 0;
            v40 = v102;
          }
          if (*v46)
            goto LABEL_161;
          FPSupport_GetDefaultTrackIDForMediaType(*(_QWORD *)(v34 + 968), 1936684398, v34 + 996, 0);
          if (!*(_DWORD *)(v34 + 996))
            FPSupport_GetFirstEnabledTrackIDForMediaType(*(_QWORD *)(v34 + 968), 1936684398, v34 + 996);
          v41 = FPSupport_ChooseTrackIDsUsingPreferredLanguageLists(*v101, v40, CFSTR("Audio"), (_DWORD *)(v34 + 996));
          if (!(_DWORD)v41)
          {
LABEL_161:
            if (*v53)
            {
LABEL_90:
              if (!*v61)
              {
                FPSupport_GetDefaultTrackIDForMediaType(*(_QWORD *)(v34 + 968), 1751216244, v34 + 1040, 0);
                v68 = *(unsigned int *)(v34 + 1040);
                if ((_DWORD)v68)
                  itemfig_hintTrackIfPreload((uint64_t)a1, v68);
              }
              v7 = 0;
LABEL_94:
              v69 = (_QWORD *)(DerivedStorage + 128);
              if (v40)
                CFRelease(v40);
              CFRelease(v36);
              if ((_DWORD)v7)
                goto LABEL_139;
LABEL_97:
              v70 = *(_QWORD *)(DerivedStorage + 1216);
              v71 = CFGetAllocator(a1);
              v72 = FigAssetGetCMBaseObject(v70);
              v73 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v73)
              {
                v8 = v73(v72, CFSTR("MediaSelectionArray"), v71, DerivedStorage + 1792);
                if (!(_DWORD)v8)
                {
                  FigAutomaticMediaSelectionGetMediaSelectionGroupsForMajorIntrinsicCharacteristics(*(_QWORD *)(DerivedStorage + 1792), 0, (const __CFDictionary **)(DerivedStorage + 1800), (const __CFDictionary **)(DerivedStorage + 1808));
                  itemfig_checkForShortAudioTrack();
                  v74 = CMBaseObjectGetDerivedStorage();
                  v75 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                  v76 = (_BYTE *)CMBaseObjectGetDerivedStorage();
                  if (v75)
                  {
                    if (!*v76
                      && !*(_BYTE *)(v74 + 1394)
                      && FPSupport_HasTrackOfType(*(_QWORD *)(v74 + 968), 1986618469))
                    {
                      *(_BYTE *)(v74 + 1393) = 1;
                      if (dword_1EE2A2AC8)
                      {
                        LODWORD(valuePtr) = 0;
                        type = OS_LOG_TYPE_DEFAULT;
                        v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        v78 = LODWORD(valuePtr);
                        if (os_log_type_enabled(v77, type))
                          v79 = v78;
                        else
                          v79 = v78 & 0xFFFFFFFE;
                        if (v79)
                        {
                          if (a1)
                            v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                          else
                            v80 = "";
                          *(_DWORD *)number = 136315650;
                          *(_QWORD *)&number[4] = "itemfig_establishStereoAudioSpatializationPreferenceForAsset";
                          v108 = 2048;
                          v109 = a1;
                          v110 = 2082;
                          v111 = v80;
                          _os_log_send_and_compose_impl();
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        v69 = (_QWORD *)(DerivedStorage + 128);
                      }
                      CMNotificationCenterGetDefaultLocalCenter();
                      FigDispatchAsyncPostNotification();
                    }
                    CFRelease(v75);
                  }
                  *(_BYTE *)(DerivedStorage + 1200) = 1;
                  *(CFAbsoluteTime *)(DerivedStorage + 1576) = CFAbsoluteTimeGetCurrent();
                  if (*(_BYTE *)(DerivedStorage + 1382))
                  {
                    if (*v69)
                    {
                      CMByteStreamGetCMBaseObject();
                      FigCRABSGetClassID();
                      if (CMBaseObjectIsMemberOfClass())
                      {
                        v81 = *(unsigned __int8 *)(DerivedStorage + 1381);
                        v82 = CMByteStreamGetCMBaseObject();
                        v83 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 56);
                        if (v83)
                        {
                          if (v81)
                            v84 = *MEMORY[0x1E0C9AE50];
                          else
                            v84 = *MEMORY[0x1E0C9AE40];
                          v83(v82, CFSTR("CRABS_ReadAheadAllowBackfill"), v84);
                        }
                      }
                    }
                  }
                  v85 = CMBaseObjectGetDerivedStorage();
                  v86 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                  v87 = *(const __CFDictionary **)(v85 + 1272);
                  if (v87)
                  {
                    CFDictionaryApplyFunction(v87, (CFDictionaryApplierFunction)itemfig_transferPendingTrackProperties, a1);
                    v88 = *(const void **)(v85 + 1272);
                    if (v88)
                    {
                      CFRelease(v88);
                      *(_QWORD *)(v85 + 1272) = 0;
                    }
                  }
                  if (v86)
                    CFRelease(v86);
                  v7 = itemfig_createCoalescedClientAndAutomaticSelectedMediaArray(a1, &v105);
                  v89 = v105;
                  if (!(_DWORD)v7)
                  {
                    if (v105)
                      itemfig_applySelectedMediaArray((uint64_t)a1, (const __CFArray *)v105, 0, 0);
                    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208), v89);
                    MEMORY[0x19402EA0C](*((_QWORD *)v6 + 62));
                    if (*(_BYTE *)(DerivedStorage + 1))
                      playerfig_configureDownloadInPlayQueue();
                    itemfig_configureDownloadForItem((uint64_t)a1, *(unsigned __int8 *)(DerivedStorage + 1329));
                    MEMORY[0x19402EA24](*((_QWORD *)v6 + 62));
                    v89 = v105;
                  }
                  if (v89)
                    CFRelease(v89);
                  if (!(_DWORD)v7)
                    goto LABEL_140;
                  goto LABEL_139;
                }
                goto LABEL_145;
              }
LABEL_110:
              v7 = 4294954514;
              goto LABEL_139;
            }
            FPSupport_GetDefaultTrackIDForMediaType(*(_QWORD *)(v34 + 968), 1935832172, v34 + 1016, 0);
            if (!*(_DWORD *)(v34 + 1016))
              FPSupport_GetDefaultTrackIDForMediaType(*(_QWORD *)(v34 + 968), 1952807028, v34 + 1016, 0);
            v41 = FPSupport_ChooseTrackIDsUsingPreferredLanguageLists(*v101, v40, CFSTR("Subtitle"), (_DWORD *)(v34 + 1016));
            if (!(_DWORD)v41)
            {
              v67 = *v53;
              if ((_DWORD)v67)
                itemfig_hintTrackIfPreload((uint64_t)a1, v67);
              goto LABEL_90;
            }
          }
        }
        v7 = v41;
        goto LABEL_94;
      }
      v97 = v36;
      v93 = v6;
      LODWORD(valuePtr) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v98 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v99 = LODWORD(valuePtr);
      if (os_log_type_enabled(v98, type))
        v100 = v99;
      else
        v100 = v99 & 0xFFFFFFFE;
      if (v100)
      {
        *(_DWORD *)number = 136315138;
        *(_QWORD *)&number[4] = "itemfig_establishTrackIDs";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFRelease(v97);
    }
    else
    {
      v93 = v6;
      LODWORD(valuePtr) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v95 = LODWORD(valuePtr);
      if (os_log_type_enabled(v94, type))
        v96 = v95;
      else
        v96 = v95 & 0xFFFFFFFE;
      if (v96)
      {
        *(_DWORD *)number = 136315138;
        *(_QWORD *)&number[4] = "itemfig_establishTrackIDs";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = v93;
    v69 = (_QWORD *)(DerivedStorage + 128);
    goto LABEL_97;
  }
  v7 = 0;
LABEL_139:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
LABEL_140:
  CFRelease(v4);
  return v7;
}

uint64_t itemfig_setFormatReader(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  CFAllocatorRef v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, CFAllocatorRef, _QWORD *);
  _QWORD *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 1200))
    return 0;
  v3 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 968))
    return 0;
  v5 = *(_QWORD *)(DerivedStorage + 1216);
  v6 = CFGetAllocator(a1);
  CMBaseObject = FigAssetGetCMBaseObject(v5);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v8)
    return 4294954514;
  v9 = (_QWORD *)(v3 + 968);
  result = v8(CMBaseObject, CFSTR("assetProperty_FormatReader"), v6, v9);
  if (!(_DWORD)result)
  {
    if (!*v9)
      return FigSignalErrorAt();
    return 0;
  }
  return result;
}

uint64_t CMByteStreamCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = CMByteStreamGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemfig_ConnectionStateChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFTypeID v9;
  CFDictionaryRef v10;
  void *values[17];

  values[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v9 = CFGetTypeID(a5);
    result = CFDictionaryGetTypeID();
    if (v9 == result)
    {
      result = FigCFDictionaryGetInt32IfPresent();
      if ((_DWORD)result)
      {
        values[0] = CFSTR("Connected");
        MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 1400));
        if (CFSTR("Connected") == *(__CFString **)(DerivedStorage + 1416))
        {
          return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 1400));
        }
        else
        {
          *(void **)(DerivedStorage + 1416) = values[0];
          v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackItemParameter_ConnectionState, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          result = MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 1400));
          if (v10)
          {
            CFRetain(a2);
            return FigDeferNotificationToDispatchQueue();
          }
        }
      }
    }
  }
  return result;
}

void itemfig_reportingAgentSetup(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, _QWORD, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, _QWORD);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v18;
  unsigned int (*v19)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v20;
  uint64_t SInt64;
  uint64_t v22;
  void (*v23)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v24;
  _BOOL8 v25;
  void (*v26)(uint64_t, __CFString *, __CFString *, _BOOL8, _QWORD);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v30;
  void (*v31)(uint64_t, __CFString *, __CFString *, __CFString *, _QWORD);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1896));
    if (*(_QWORD *)(v3 + 1904) || (v4 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
      JUMPOUT(0x19402EF04);
    v5 = (const void *)v4;
    v6 = CMBaseObjectGetDerivedStorage();
    if (!v6)
      goto LABEL_43;
    v7 = v6;
    v8 = (uint64_t *)(v3 + 1904);
    if (!*(_QWORD *)(v3 + 128))
      goto LABEL_39;
    CMByteStreamGetCMBaseObject();
    FigCRABSGetClassID();
    if (!CMBaseObjectIsMemberOfClass())
    {
LABEL_10:
      if (FigReportingAgentCreate(*(const void **)(v7 + 936), *(const void **)(v7 + 8), 0, 0, 0, 4, 0, *(_BYTE *)(v3 + 1241), (_QWORD *)(v3 + 1904)))goto LABEL_43;
      goto LABEL_11;
    }
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v10 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v10)
    {
      v11 = v10(CMBaseObject, CFSTR("CRABS_ReportingAgent"), *MEMORY[0x1E0C9AE00], v3 + 1904);
      v12 = v11;
      if (v11 == -12784)
      {
        if (FigReportingAgentCreateFromAsset(*(_QWORD *)(v3 + 1216), 2, 0, (_QWORD *)(v3 + 1904)))
          goto LABEL_10;
LABEL_26:
        v24 = *v8;
        v25 = *(_QWORD *)(v7 + 168) != 0;
        if (*v8)
        {
          v26 = *(void (**)(uint64_t, __CFString *, __CFString *, _BOOL8, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 56);
          if (v26)
            v26(v24, CFSTR("playerStats"), CFSTR("BufferedAirPlay"), v25, 0);
        }
        v27 = *(_QWORD *)(v3 + 1904);
        if (v27)
        {
          v28 = *(unsigned __int8 *)(v3 + 1696);
          v29 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v29)
            v29(v27, CFSTR("playerStats"), CFSTR("FirstItem"), v28, 0);
        }
        v30 = *v8;
        if (*v8)
        {
          v31 = *(void (**)(uint64_t, __CFString *, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 48);
          if (v31)
            v31(v30, CFSTR("playerStats"), CFSTR("PlayerType"), CFSTR("FilePlayer"), 0);
          v32 = *v8;
          if (*v8)
          {
            v33 = *(unsigned __int8 *)(v7 + 57);
            v34 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v34)
              v34(v32, CFSTR("playerStats"), CFSTR("WaitToMinStall"), v33, 0);
          }
        }
        if (v12 != -12784)
          goto LABEL_39;
LABEL_11:
        v13 = *v8;
        if (*v8)
        {
          v14 = *(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
          if (v14)
          {
            if (!v14(v13, 0))
            {
              v15 = *v8;
              if (*v8)
              {
                v16 = *(_QWORD *)(v7 + 936);
                v17 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 48);
                if (v17)
                  v17(v15, CFSTR("playerStats"), CFSTR("PowerLogID"), v16, 0);
              }
              if (*(_QWORD *)(v3 + 128))
              {
                cf = 0;
                v18 = CMByteStreamGetCMBaseObject();
                v19 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
                if (v19)
                {
                  if (!v19(v18, *MEMORY[0x1E0CA2070], *MEMORY[0x1E0C9AE00], &cf))
                  {
                    v20 = *v8;
                    SInt64 = FigCFNumberGetSInt64();
                    if (v20)
                    {
                      v22 = SInt64;
                      v23 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                      if (v23)
                        v23(v20, CFSTR("playerStats"), CFSTR("FSize"), v22, 0);
                    }
                  }
                }
                if (cf)
                  CFRelease(cf);
              }
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        MEMORY[0x19402EF04](*(_QWORD *)(v3 + 1896));
        CFRelease(v5);
        return;
      }
      if (!v11)
        goto LABEL_26;
    }
LABEL_39:
    v35 = *(_QWORD *)(v3 + 1912);
    if (v35)
    {
      v36 = *v8;
      if (v36)
      {
        v37 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 48);
        if (v37)
          v37(v36, CFSTR("playerStats"), CFSTR("Category"), v35, 0);
      }
    }
    goto LABEL_43;
  }
}

void itemfig_checkForShortAudioTrack()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t *);
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v11;
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t (*v14)(CFTypeRef, CMTimeRange *, CFTypeRef *);
  int v15;
  CFTypeRef v16;
  unsigned int (*v17)(CFTypeRef, CMTimeRange *);
  uint64_t v18;
  unsigned int (*v19)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  CMTime time2;
  CMTimeRange range;
  CMTime v26;
  CFDictionaryRef dictionaryRepresentation;
  CMTimeRange v28[2];
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  uint64_t v32;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v31 = 0;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  memset(v28, 0, sizeof(v28));
  dictionaryRepresentation = 0;
  memset(&v26, 0, sizeof(v26));
  *(_BYTE *)(DerivedStorage + 992) = 0;
  if (!*(_DWORD *)(DerivedStorage + 996))
    goto LABEL_31;
  v1 = DerivedStorage;
  v2 = *(_QWORD *)(DerivedStorage + 968);
  v3 = *(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v3)
    goto LABEL_31;
  if (v3(v2, &v32) || v32 == 1)
    goto LABEL_31;
  v5 = *(_QWORD *)(v1 + 968);
  v6 = *(unsigned int *)(v1 + 996);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v7 || v7(v5, v6, &v31, 0))
    goto LABEL_31;
  v8 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(v31);
  v10 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v10)
  {
    v10(FigBaseObject, CFSTR("SecondaryEditCursorService"), v8, &v30);
    v11 = v30;
    if (v30)
      goto LABEL_14;
  }
  v12 = FigTrackReaderGetFigBaseObject(v31);
  v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v13)
    v13(v12, CFSTR("EditCursorService"), v8, &v30);
  v11 = v30;
  if (v30)
  {
LABEL_14:
    v14 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
    if (!v14)
      goto LABEL_31;
    *(_OWORD *)&range.start.value = *MEMORY[0x1E0CA2E30];
    range.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
    v15 = v14(v11, &range, &v29);
    if (v15 == -12521)
    {
LABEL_30:
      *(_BYTE *)(v1 + 992) = 1;
      goto LABEL_31;
    }
    if (v15)
      goto LABEL_31;
    v16 = v29;
    v17 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v17 || v17(v16, v28))
      goto LABEL_31;
    range = v28[1];
    CMTimeRangeGetEnd(&v26, &range);
  }
  else
  {
    v18 = FigTrackReaderGetFigBaseObject(v31);
    v19 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (!v19 || v19(v18, CFSTR("UneditedTrackDuration"), v8, &dictionaryRepresentation))
      goto LABEL_31;
    CMTimeMakeFromDictionary(&v26, dictionaryRepresentation);
    if (dictionaryRepresentation)
    {
      CFRelease(dictionaryRepresentation);
      dictionaryRepresentation = 0;
    }
  }
  value = *(_QWORD *)(v1 + 140);
  flags = *(_DWORD *)(v1 + 152);
  timescale = *(_DWORD *)(v1 + 148);
  if ((flags & 0x1D) == 1)
  {
    epoch = *(_QWORD *)(v1 + 156);
    goto LABEL_29;
  }
  v22 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(v1 + 968));
  v23 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v23 && !v23(v22, CFSTR("NominalDuration"), v8, &dictionaryRepresentation))
  {
    CMTimeMakeFromDictionary(&range.start, dictionaryRepresentation);
    value = range.start.value;
    flags = range.start.flags;
    timescale = range.start.timescale;
    epoch = range.start.epoch;
LABEL_29:
    range.start = v26;
    time2.value = value;
    time2.timescale = timescale;
    time2.flags = flags;
    time2.epoch = epoch;
    if ((CMTimeCompare(&range.start, &time2) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_31:
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  if (dictionaryRepresentation)
    CFRelease(dictionaryRepresentation);
  if (v31)
    CFRelease(v31);
}

uint64_t CMByteStreamSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = CMByteStreamGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

void playerfig_configureDownloadInPlayQueue()
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v2;
  char v3;
  CFIndex v4;
  const void *ValueAtIndex;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  v2 = Count;
  if (*(_DWORD *)(DerivedStorage + 60))
    v3 = *(_DWORD *)(DerivedStorage + 72) < 1;
  else
    v3 = 0;
  if (Count >= 1)
  {
    v4 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v4);
      v6 = CMBaseObjectGetDerivedStorage();
      if (v3)
      {
        v3 = itemfig_configureDownloadForItem((uint64_t)ValueAtIndex, *(unsigned __int8 *)(v6 + 1328)) ^ 1;
      }
      else
      {
        itemfig_configureDownloadForItem((uint64_t)ValueAtIndex, 0);
        v3 = 0;
      }
      ++v4;
    }
    while (v2 != v4);
  }
  JUMPOUT(0x19402EA24);
}

uint64_t itemfig_configureDownloadForItem(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, const __CFString *, _QWORD, uint64_t);
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  const __CFURL *v14;
  uint64_t v15;
  const void *v16;
  const __CFData *v17;
  const void *v18;
  const __CFAllocator *v19;
  CFAbsoluteTime Current;
  CFDateRef v21;
  CFDateRef v22;
  void (*v23)(uint64_t, _QWORD, CFTypeRef *);
  CFTypeRef v24;
  CFTypeRef v25;
  uint64_t *v26;
  uint64_t CMBaseObject;
  void (*v28)(uint64_t, const __CFString *, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, const __CFString *, _QWORD, uint64_t);
  double v32;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  NSObject *v38;
  unsigned int v39;
  unsigned int v40;
  const char *v41;
  CMTime duration;
  CMTimeRange v43;
  CFTypeRef cf;
  CMTime start;
  const char *v46;
  __int16 v47;
  uint64_t v48;
  CMTime v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  v6 = CMBaseObjectGetDerivedStorage();
  if (a2 && !*(_BYTE *)(v6 + 65) && !*(_BYTE *)(DerivedStorage + 1330))
  {
    if ((*(_DWORD *)(DerivedStorage + 1368) & 0x1D) != 1 || !*(_BYTE *)(DerivedStorage + 1))
      goto LABEL_93;
    cf = 0;
    v23 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v23)
    {
      v23(v5, 0, &cf);
      v24 = cf;
    }
    else
    {
      v24 = 0;
    }
    v25 = (CFTypeRef)a1;
    if (v24 != (CFTypeRef)a1)
    {
      if (!*(_BYTE *)(DerivedStorage + 1380))
      {
        if (*(_QWORD *)(DerivedStorage + 128))
        {
          v49 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          if ((*(_DWORD *)(DerivedStorage + 36) & 0x1D) == 1)
            v49 = *(CMTime *)(DerivedStorage + 24);
          start = v49;
          duration = *(CMTime *)(DerivedStorage + 1356);
          CMTimeRangeMake(&v43, &start, &duration);
          if (itemfig_HintStreamForTimeRange(a1, (__int128 *)&v43.start.value))
            *(_BYTE *)(DerivedStorage + 1380) = 1;
        }
        else
        {
          itemfig_makePlaybackPrerequisitePropertiesReady(a1, 0);
        }
      }
      v25 = cf;
    }
    if (v25)
      CFRelease(v25);
    if (v24 == (CFTypeRef)a1)
    {
LABEL_93:
      if (*(_QWORD *)(DerivedStorage + 1336))
      {
LABEL_48:
        v11 = 0;
        goto LABEL_14;
      }
      if (*(_QWORD *)(DerivedStorage + 128))
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          v26 = (uint64_t *)(DerivedStorage + 1336);
          if (*(_BYTE *)(DerivedStorage + 137))
          {
            CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 1216));
            v28 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
            if (v28)
              v28(CMBaseObject, CFSTR("assetProperty_OriginalReadAheadAssertion"), 0, DerivedStorage + 1336);
            *(_BYTE *)(DerivedStorage + 137) = 0;
          }
          v29 = *v26;
          if (*v26)
            goto LABEL_59;
          v30 = CMByteStreamGetCMBaseObject();
          v31 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
          if (v31)
            v31(v30, CFSTR("CRABS_ReadAheadAssertion"), 0, DerivedStorage + 1336);
          v29 = *v26;
          if (*v26)
LABEL_59:
            FigAssertionSetProperty(v29, CFSTR("Assertion_HolderName"), CFSTR("Play-While-Download"));
          goto LABEL_48;
        }
      }
      v32 = *(double *)(DerivedStorage + 2064);
      if (v32 > 0.0)
      {
        if (dword_1EE2A2AC8)
        {
          LODWORD(duration.value) = 0;
          LOBYTE(cf) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          value = duration.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)cf))
            v35 = value;
          else
            v35 = value & 0xFFFFFFFE;
          if (v35)
          {
            if (a1)
              v36 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            else
              v36 = "";
            v37 = *(_QWORD *)(DerivedStorage + 2064);
            LODWORD(start.value) = 136315906;
            *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"itemfig_configureDownloadForItem";
            LOWORD(start.flags) = 2048;
            *(_QWORD *)((char *)&start.flags + 2) = a1;
            HIWORD(start.epoch) = 2082;
            v46 = v36;
            v47 = 2048;
            v48 = v37;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v32 = *(double *)(DerivedStorage + 2064);
        }
        usleep((v32 * 1000000.0));
        if (dword_1EE2A2AC8)
        {
          LODWORD(duration.value) = 0;
          LOBYTE(cf) = 0;
          v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v39 = duration.value;
          if (os_log_type_enabled(v38, (os_log_type_t)cf))
            v40 = v39;
          else
            v40 = v39 & 0xFFFFFFFE;
          if (v40)
          {
            if (a1)
              v41 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            else
              v41 = "";
            LODWORD(start.value) = 136315650;
            *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"itemfig_configureDownloadForItem";
            LOWORD(start.flags) = 2048;
            *(_QWORD *)((char *)&start.flags + 2) = a1;
            HIWORD(start.epoch) = 2082;
            v46 = v41;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      itemfig_makePlaybackPrerequisitePropertiesReady(a1, 0);
      v11 = 1;
LABEL_14:
      v13 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v13 + 2088));
      if (*(_BYTE *)(v13 + 2121) != 1)
        goto LABEL_32;
      v14 = *(const __CFURL **)(v13 + 2096);
      if (!v14 || !*(_QWORD *)(v13 + 2080))
        goto LABEL_32;
      v15 = *(_QWORD *)(v13 + 2104);
      if (v15)
      {
        if (FigSetNameForAssetAtURL(v14, v15))
          goto LABEL_32;
        v16 = *(const void **)(v13 + 2104);
        if (v16)
        {
          CFRelease(v16);
          *(_QWORD *)(v13 + 2104) = 0;
        }
      }
      v17 = *(const __CFData **)(v13 + 2112);
      if (!v17)
      {
LABEL_25:
        if (*(_QWORD *)(v13 + 2080))
        {
          v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Current = CFAbsoluteTimeGetCurrent();
          v21 = CFDateCreate(v19, Current);
          if (v21)
          {
            v22 = v21;
            if (!FigAssetDownloadStorageManagementSetContentTypeForAssetAtURL(*(const __CFURL **)(v13 + 2096), *(const void **)(v13 + 2080), CFSTR("CacheManagementContentType_DownloadedAsset"))&& !FigAssetDownloadStorageManagementSetDownloadStartDateForAssetAtURL(*(const __CFURL **)(v13 + 2096), *(const void **)(v13 + 2080), (uint64_t)v22))
            {
              *(_BYTE *)(v13 + 2121) = 0;
            }
            CFRelease(v22);
          }
          else
          {
            FigSignalErrorAt();
          }
        }
        else
        {
          *(_BYTE *)(v13 + 2121) = 0;
        }
        goto LABEL_32;
      }
      if (!FigSetImageDataForAssetAtURL(*(const __CFURL **)(v13 + 2096), v17))
      {
        v18 = *(const void **)(v13 + 2112);
        if (v18)
        {
          CFRelease(v18);
          *(_QWORD *)(v13 + 2112) = 0;
        }
        goto LABEL_25;
      }
LABEL_32:
      MEMORY[0x19402EF04](*(_QWORD *)(v13 + 2088));
      if (*(_QWORD *)(DerivedStorage + 1336))
        return 1;
      else
        return v11;
    }
  }
  v7 = (const void **)(DerivedStorage + 1336);
  v8 = *(const void **)(DerivedStorage + 1336);
  if (v8)
    goto LABEL_12;
  if (*(_BYTE *)(DerivedStorage + 137))
  {
    if (*(_QWORD *)(DerivedStorage + 128))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        v9 = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 1216));
        v10 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
        if (v10)
          v10(v9, CFSTR("assetProperty_OriginalReadAheadAssertion"), 0, DerivedStorage + 1336);
        *(_BYTE *)(DerivedStorage + 137) = 0;
      }
    }
  }
  v8 = *v7;
  if (*v7)
  {
LABEL_12:
    CFRelease(v8);
    *v7 = 0;
  }
  v11 = 0;
  result = 0;
  if (a2)
    goto LABEL_14;
  return result;
}

void itemfig_DeferredPostNotificationOnDispatchQueue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(a2);
  if (a5)
    CFRelease(a5);
}

void itemfig_updateHasEnabledVideo()
{
  uint64_t DerivedStorage;
  const void *v1;
  int v2;
  int v3;
  int v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  const void **v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    v2 = *(unsigned __int8 *)(DerivedStorage + 2018);
    v3 = *(_DWORD *)(DerivedStorage + 1000);
    *(_BYTE *)(DerivedStorage + 2018) = v3 != 0;
    if (v3)
    {
      v4 = 1;
    }
    else
    {
      v4 = *(_QWORD *)(DerivedStorage + 656) != 0;
      *(_BYTE *)(DerivedStorage + 2018) = v4;
    }
    if (v2 != v4)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v6 = Mutable;
      v7 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(DerivedStorage + 2018))
        v7 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(Mutable, CFSTR("HasEnabledVideo"), *v7);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (v6)
        CFRelease(v6);
    }
    if (!*(_BYTE *)(DerivedStorage + 2019))
    {
      if (*(_BYTE *)(DerivedStorage + 2018))
      {
        *(_BYTE *)(DerivedStorage + 2019) = 1;
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
      }
    }
    CFRelease(v1);
  }
}

void itemfig_updateListenersForVideoTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CFTypeRef v10;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  cf = 0;
  v4 = *(_QWORD *)(DerivedStorage + 968);
  if (v4)
  {
    v5 = DerivedStorage;
    v6 = *(unsigned int *)(DerivedStorage + 1004);
    if ((_DWORD)v6)
    {
      v7 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 56);
      if (!v7 || v7(v4, v6, &cf, 0))
        goto LABEL_10;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(_DWORD *)(v5 + 1004) = 0;
    }
    if ((_DWORD)a2)
    {
      v8 = *(_QWORD *)(v5 + 968);
      v9 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 56);
      if (v9)
      {
        if (!v9(v8, a2, &v10, 0))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          *(_DWORD *)(v5 + 1004) = a2;
        }
      }
    }
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
}

void itemfig_hintTrackIfPreload(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, CFTypeRef *, int *);
  uint64_t FigBaseObject;
  unsigned int (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID TypeID;
  const void *Value;
  const void *v11;
  CFTypeID v12;
  CFTypeRef v13;
  unsigned int (*v14)(CFTypeRef, CFTypeRef *);
  CFTypeRef v15;
  unsigned int (*v16)(CFTypeRef, CFTypeRef *);
  CFTypeRef v17;
  unsigned int (*v18)(CFTypeRef, uint64_t *, _QWORD, _QWORD, _QWORD);
  CFTypeRef v19;
  unsigned int (*v20)(CFTypeRef, CFTypeRef *);
  CFTypeRef v21;
  unsigned int (*v22)(CFTypeRef, uint64_t *, uint64_t *, _QWORD, _QWORD);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int valuePtr;
  CFTypeRef cf;
  int v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35[23];

  v35[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  v35[0] = 0;
  v33 = 0;
  cf = 0;
  if (*(_QWORD *)(DerivedStorage + 128))
  {
    if (*(_QWORD *)(DerivedStorage + 968))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        v32 = 0;
        valuePtr = 0;
        v4 = *(_QWORD *)(DerivedStorage + 968);
        v5 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 56);
        if (v5)
        {
          if (!v5(v4, a2, v35, &v32))
          {
            FigBaseObject = FigTrackReaderGetFigBaseObject(v35[0]);
            v7 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
            if (v7)
            {
              if (!v7(FigBaseObject, CFSTR("TrackQTLoadSettings"), *MEMORY[0x1E0C9AE00], &cf) && cf != 0)
              {
                TypeID = CFDictionaryGetTypeID();
                if (TypeID == CFGetTypeID(cf))
                {
                  Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("PreloadFlags"));
                  if (Value)
                  {
                    v11 = Value;
                    v12 = CFNumberGetTypeID();
                    if (v12 == CFGetTypeID(v11)
                      && CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, &valuePtr)
                      && (valuePtr & 3) != 0)
                    {
                      v28 = 0;
                      v29 = 0;
                      v26 = 0;
                      v27 = 0;
                      v13 = v35[0];
                      v14 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 32);
                      if (v14)
                      {
                        if (!v14(v13, &v34))
                        {
                          v15 = v34;
                          v16 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 24);
                          if (v16)
                          {
                            if (!v16(v15, &v33))
                            {
                              v17 = v33;
                              v18 = *(unsigned int (**)(CFTypeRef, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
                              if (v18)
                              {
                                if (!v18(v17, &v28, 0, 0, 0))
                                {
                                  if (v33)
                                  {
                                    CFRelease(v33);
                                    v33 = 0;
                                  }
                                  v19 = v34;
                                  v20 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
                                  if (v20)
                                  {
                                    if (!v20(v19, &v33))
                                    {
                                      v21 = v33;
                                      v22 = *(unsigned int (**)(CFTypeRef, uint64_t *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
                                      if (v22)
                                      {
                                        if (!v22(v21, &v27, &v26, 0, 0))
                                        {
                                          if ((unint64_t)(v27 - v28 + v26) > 0x80000)
                                          {
                                            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                                          }
                                          else
                                          {
                                            v29 = v27 - v28 + v26;
                                            v23 = *(_QWORD *)(DerivedStorage + 128);
                                            v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
                                            if (v24)
                                              v24(v23, 1, 1, &v28);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if (v33)
                        CFRelease(v33);
                    }
                  }
                }
              }
            }
          }
        }
        if (v34)
          CFRelease(v34);
        if (cf)
          CFRelease(cf);
        if (v35[0])
          CFRelease(v35[0]);
      }
    }
  }
}

uint64_t fp_getTrackIDMediaType(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, uint64_t, _QWORD, unsigned int *);
  unsigned int v6;

  v6 = 0;
  v4 = *(void (**)(uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v4)
    return 0;
  v4(a1, a2, 0, &v6);
  return v6;
}

void itemfig_TrackPropertiesChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeID v11;
  const void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __CFDictionary *NotificationPayloadForProperties;
  float v20;
  float v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(const void **)(DerivedStorage + 8);
  v9 = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v10 = v9;
    v11 = CFGetTypeID(a5);
    if (v11 == CFDictionaryGetTypeID())
    {
      v12 = (const void *)*MEMORY[0x1E0C9AE50];
      if (v12 == CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("TrackMatrix")))
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 224));
        playerfig_updateVideoLayerSize(v8, 0);
        MEMORY[0x19402EF04](*(_QWORD *)(v10 + 224));
        if (*(_BYTE *)(DerivedStorage + 1200))
        {
          itemfig_GetDimensions(a2, &v21, &v20);
          NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v8, (uint64_t)a2, v13, v14, v15, v16, v17, v18, CFSTR("CurrentDimensions"), 0);
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          if (NotificationPayloadForProperties)
            CFRelease(NotificationPayloadForProperties);
        }
      }
    }
  }
}

uint64_t itemfig_getVideoMatrixRotationAngleAndFlips(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, _QWORD, const void **);
  uint64_t RotationAngleAndFlipsFromCGAffineTransform;
  double v9[6];
  const void *v10;

  v10 = 0;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  v6 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v6)
    return 0;
  v6(FigBaseObject, CFSTR("VideoTrackMatrix"), *MEMORY[0x1E0C9AE00], &v10);
  if (!v10)
    return 0;
  FigGetCGAffineTransformFrom3x3MatrixArray(v10, (uint64_t)v9);
  RotationAngleAndFlipsFromCGAffineTransform = FigGetRotationAngleAndFlipsFromCGAffineTransform(v9, a2, a3);
  CFRelease(v10);
  return RotationAngleAndFlipsFromCGAffineTransform;
}

BOOL itemfig_IsThereMediaTrack(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  void (*v4)(uint64_t, _QWORD, uint64_t, _QWORD, int *);
  int v5;

  v5 = 0;
  if (result)
  {
    v2 = *(_QWORD *)(result + 968);
    if (v2
      && (v4 = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 64)) != 0)
    {
      v4(v2, 0, a2, 0, &v5);
      return v5 != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t FigTrackReaderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigFormatReaderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

void itemfig_transferPendingTrackProperties(unsigned int a1, CFDictionaryRef theDict, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a3;
  v3[1] = a1;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)itemfig_transferPendingTrackProperty, v3);
}

uint64_t itemfig_transferPendingTrackProperty(const void *a1, const void *a2, uint64_t a3)
{
  return itemfig_setTrackPropertyInternal(*(void **)a3, *(unsigned int *)(a3 + 8), a1, a2, 0);
}

uint64_t itemfig_setTrackPropertyInternal(void *a1, uint64_t a2, const void *a3, const void *a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const void *v13;
  uint64_t TrackStorage;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  const void *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const void *UpdatedExtractionTable;
  uint64_t v28;
  CFTypeID v29;
  const void *v30;
  const void *v31;
  CFTypeID v32;
  uint64_t v33;
  int v34;
  Boolean Value;
  uint64_t v36;
  CFTypeID v37;
  const void *v38;
  uint64_t v39;
  CFTypeID TypeID;
  uint64_t v41;
  CFTypeID v42;
  const void *v43;
  uint64_t v44;
  CFTypeID v45;
  const __CFString *v46;
  const void *v47;
  uint64_t v48;
  CFTypeID v49;
  float v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CFTypeID v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  CFTypeID v59;
  const void *v60;
  uint64_t v61;
  CFTypeID v62;
  const void *v63;
  uint64_t v64;
  CFTypeID v65;
  const void *v66;
  uint64_t v67;
  __CFString **v68;
  uint64_t v69;
  CFTypeID v70;
  const void *v71;
  uint64_t v72;
  CFTypeID v73;
  CFTypeID v74;
  uint64_t v75;
  const void *v76;
  CFTypeRef v77;
  __CFDictionary *NotificationPayloadForProperties;
  CFTypeID v79;
  uint64_t v80;
  CFTypeRef cf;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 valuePtr;
  uint64_t v86;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v82 = 0;
  v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v11 || *(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v13 = (const void *)v11;
  TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v82);
  if ((_DWORD)TrackStorage)
  {
    UpdatedExtractionTable = (const void *)TrackStorage;
    goto LABEL_204;
  }
  v15 = CMBaseObjectGetDerivedStorage();
  v16 = v15;
  if (a5)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(v15 + 496));
    v17 = 1;
  }
  else
  {
    v17 = 0;
  }
  if (CFEqual(a3, CFSTR("AudioCurves")))
  {
    v18 = v82;
    if (*(_DWORD *)(v82 + 4) == 1936684398 && fp_isValidAudioCurves(a4))
    {
      if (a4)
      {
        LOBYTE(valuePtr) = 0;
        LOBYTE(v83) = 0;
        fp_checkForCinematicAudioParametersInAudioCurves((uint64_t)a4, 0, (BOOL *)&valuePtr, (BOOL *)&v83);
        *(_BYTE *)(v18 + 161) = valuePtr;
        *(_BYTE *)(v18 + 162) = v83;
        v19 = *(const void **)(v18 + 80);
        *(_QWORD *)(v18 + 80) = a4;
        CFRetain(a4);
        if (!v19)
        {
LABEL_14:
          itemfig_applyTrackAudioCurvesToTrack(v18);
LABEL_15:
          v26 = 0;
          goto LABEL_16;
        }
      }
      else
      {
        *(_WORD *)(v18 + 161) = 0;
        v19 = *(const void **)(v18 + 80);
        *(_QWORD *)(v18 + 80) = 0;
        if (!v19)
          goto LABEL_14;
      }
      CFRelease(v19);
      goto LABEL_14;
    }
    goto LABEL_197;
  }
  if (CFEqual(a3, CFSTR("AudioProcessingUnits")))
  {
    v28 = v82;
    if (*(_DWORD *)(v82 + 4) == 1936684398)
    {
      if (!a4 || (v29 = CFGetTypeID(a4), v29 == CFArrayGetTypeID()))
      {
        if (!FPSupport_AudioProcessingUnitsConfigurationsAreDifferent())
          goto LABEL_15;
        v30 = *(const void **)(v28 + 96);
        *(_QWORD *)(v28 + 96) = a4;
        if (a4)
          CFRetain(a4);
        if (v30)
          CFRelease(v30);
        if (!*(_QWORD *)(DerivedStorage + 352))
          goto LABEL_15;
        if (a5)
          MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
        v31 = *(const void **)(DerivedStorage + 8);
        valuePtr = *MEMORY[0x1E0CA2E18];
        v86 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v83 = valuePtr;
        v84 = v86;
        goto LABEL_31;
      }
    }
    goto LABEL_197;
  }
  if (CFEqual(a3, CFSTR("Enabled")))
  {
    v32 = CFGetTypeID(a4);
    if (v32 != CFBooleanGetTypeID())
      goto LABEL_197;
    v33 = v82;
    v34 = *(unsigned __int8 *)(v82 + 8);
    LOBYTE(cf) = 0;
    Value = CFBooleanGetValue((CFBooleanRef)a4);
    itemfig_setTrackEnabled((uint64_t)a1, v33, Value);
    itemfig_updateDefaultTrackID((uint64_t)a1, a2, (char *)&cf);
    if (v34 == *(unsigned __int8 *)(v33 + 8) && !(_BYTE)cf)
      goto LABEL_15;
    itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)a1, 0);
    if (!*(_QWORD *)(DerivedStorage + 352))
      goto LABEL_15;
    if (a5)
    {
      if (*(void **)(v16 + 512) == a1
        && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 0, 0, 1, 0, 0, 1)
        && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 1, 1, 1, 0, 0, 0))
      {
        playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v13, *(const __CFString **)(v16 + 512), MEMORY[0x1E0CA2E18]);
        MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
        goto LABEL_43;
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
    }
    valuePtr = *MEMORY[0x1E0CA2E18];
    v86 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v83 = valuePtr;
    v84 = v86;
    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v13, (uint64_t)&valuePtr, (uint64_t)&v83, 0);
LABEL_43:
    v17 = 0;
    v26 = 1;
LABEL_16:
    UpdatedExtractionTable = 0;
    if (!v17)
    {
LABEL_201:
      if (v26)
      {
        NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v13, (uint64_t)a1, v20, v21, v22, v23, v24, v25, CFSTR("SelectedMediaArray"), 0);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        if (NotificationPayloadForProperties)
          CFRelease(NotificationPayloadForProperties);
      }
      goto LABEL_204;
    }
LABEL_200:
    MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
    goto LABEL_201;
  }
  if (!CFEqual(a3, CFSTR("VideoFieldMode")))
  {
    if (CFEqual(a3, CFSTR("AudioProcessingTap")))
    {
      v39 = v82;
      if (*(_DWORD *)(v82 + 4) != 1936684398)
        goto LABEL_197;
      if (a4)
      {
        TypeID = MTAudioProcessingTapGetTypeID();
        if (TypeID != CFGetTypeID(a4))
          goto LABEL_197;
        UpdatedExtractionTable = *(const void **)(v39 + 88);
        if (UpdatedExtractionTable == a4)
          goto LABEL_15;
        *(_QWORD *)(v39 + 88) = a4;
        CFRetain(a4);
        if (!UpdatedExtractionTable)
          goto LABEL_91;
      }
      else
      {
        UpdatedExtractionTable = *(const void **)(v82 + 88);
        if (!UpdatedExtractionTable)
          goto LABEL_199;
        *(_QWORD *)(v82 + 88) = 0;
      }
      CFRelease(UpdatedExtractionTable);
LABEL_91:
      if (!*(_QWORD *)(DerivedStorage + 352))
        goto LABEL_15;
      if (a5)
        MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
      valuePtr = *MEMORY[0x1E0CA2E18];
      v86 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v83 = valuePtr;
      v84 = v86;
      goto LABEL_95;
    }
    if (CFEqual(a3, CFSTR("LoudnessInfo")))
    {
      v41 = v82;
      if (*(_DWORD *)(v82 + 4) == 1936684398)
      {
        if (a4)
        {
          v42 = CFGetTypeID(a4);
          if (v42 != CFDictionaryGetTypeID())
            goto LABEL_197;
          v43 = *(const void **)(v41 + 104);
          *(_QWORD *)(v41 + 104) = a4;
          CFRetain(a4);
        }
        else
        {
          v43 = *(const void **)(v82 + 104);
          *(_QWORD *)(v82 + 104) = 0;
        }
        if (v43)
          CFRelease(v43);
        itemfig_applyLoudnessInfo(a1, a2, 1, 0);
        goto LABEL_15;
      }
LABEL_197:
      v53 = FigSignalErrorAt();
      goto LABEL_198;
    }
    if (CFEqual(a3, CFSTR("TimePitchAlgorithm")))
    {
      v44 = v82;
      if (*(_DWORD *)(v82 + 4) != 1936684398)
        goto LABEL_197;
      if (a4)
      {
        v45 = CFStringGetTypeID();
        if (v45 != CFGetTypeID(a4))
          goto LABEL_197;
      }
      if (FigCFEqual())
        goto LABEL_15;
      v46 = CFSTR("TimeDomain");
      if (FigCFEqual()
        || (v46 = CFSTR("Spectral"), FigCFEqual())
        || (v46 = CFSTR("Varispeed"), FigCFEqual())
        || (v46 = CFSTR("LowQualityZeroLatency"), FigCFEqual()))
      {
        v47 = *(const void **)(v44 + 112);
        *(_QWORD *)(v44 + 112) = v46;
        if (v46)
          CFRetain(v46);
        if (!v47)
          goto LABEL_84;
      }
      else
      {
        if (a4)
        {
          v53 = FigSignalErrorAt();
          if ((_DWORD)v53)
            goto LABEL_198;
        }
        v47 = *(const void **)(v44 + 112);
        *(_QWORD *)(v44 + 112) = 0;
        if (!v47)
          goto LABEL_84;
      }
      CFRelease(v47);
LABEL_84:
      if (!*(_QWORD *)(DerivedStorage + 352))
        goto LABEL_15;
      if (a5)
        MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
      valuePtr = *MEMORY[0x1E0CA2E18];
      v86 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v83 = valuePtr;
      v84 = v86;
      goto LABEL_95;
    }
    if (CFEqual(a3, CFSTR("SweepFilterConfiguration")))
    {
      LOBYTE(cf) = 0;
      UpdatedExtractionTable = (const void *)itemfig_setSweepFilterConfgurationPropertyInternal((uint64_t)a1, a2, a4, &cf);
      if (!(_DWORD)UpdatedExtractionTable && (_BYTE)cf && *(_QWORD *)(DerivedStorage + 352))
      {
        if (a5)
          MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
        valuePtr = *MEMORY[0x1E0CA2E18];
        v86 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v83 = valuePtr;
        v84 = v86;
        goto LABEL_104;
      }
      goto LABEL_199;
    }
    if (CFEqual(a3, CFSTR("SweepFilterSweepValue")))
    {
      v48 = v82;
      if (*(_DWORD *)(v82 + 4) != 1936684398)
        goto LABEL_197;
      if (!a4)
        goto LABEL_197;
      v49 = CFGetTypeID(a4);
      if (v49 != CFNumberGetTypeID())
        goto LABEL_197;
      LODWORD(valuePtr) = 0;
      v50 = *(float *)(v48 + 136);
      CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, &valuePtr);
      v51 = valuePtr;
      if (*(float *)&valuePtr == v50 || (v52 = *(_QWORD *)(v48 + 16)) == 0)
      {
LABEL_120:
        UpdatedExtractionTable = 0;
        *(_DWORD *)(v48 + 136) = v51;
        goto LABEL_199;
      }
      v53 = FigRenderPipelineSetProperty_0(v52, (uint64_t)CFSTR("SweepFilterSweepValue"), (uint64_t)a4);
      if (!(_DWORD)v53)
      {
        v51 = valuePtr;
        goto LABEL_120;
      }
    }
    else
    {
      if (CFEqual(a3, CFSTR("CinematicAudioParameters")))
      {
        v54 = v82;
        if (*(_DWORD *)(v82 + 4) != 1936684398)
          goto LABEL_197;
        if (a4)
        {
          v55 = CFGetTypeID(a4);
          if (v55 != CFDataGetTypeID())
            goto LABEL_197;
        }
        if (FigCFEqual())
          goto LABEL_15;
        v56 = *(const void **)(v54 + 152);
        *(_QWORD *)(v54 + 152) = a4;
        if (a4)
          CFRetain(a4);
        if (v56)
          CFRelease(v56);
        *(_BYTE *)(v54 + 160) = a4 != 0;
        v57 = *(_QWORD *)(v54 + 16);
        if (v57)
        {
          if ((a4 == 0) != (v56 == 0))
          {
            valuePtr = *MEMORY[0x1E0CA2E18];
            v86 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
            v83 = valuePtr;
            v84 = v86;
            playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v13, (uint64_t)&valuePtr, (uint64_t)&v83, 0);
          }
          else
          {
            v53 = FigRenderPipelineSetProperty_0(v57, (uint64_t)CFSTR("CinematicAudioParameters"), (uint64_t)a4);
            if ((_DWORD)v53)
              goto LABEL_198;
          }
        }
        playerfig_dispatchAsyncAutoSelectionCriteriaChangedForItem((uint64_t)v13, a1);
        goto LABEL_15;
      }
      if (CFEqual(a3, CFSTR("VideoEnhancementFilterOptions")))
      {
        v58 = v82;
        if (*(_DWORD *)(v82 + 4) == 1986618469)
        {
          if (a4)
          {
            v59 = CFGetTypeID(a4);
            if (v59 != CFDictionaryGetTypeID())
              goto LABEL_197;
            v60 = *(const void **)(v58 + 56);
            *(_QWORD *)(v58 + 56) = a4;
            CFRetain(a4);
          }
          else
          {
            v60 = *(const void **)(v82 + 56);
            *(_QWORD *)(v82 + 56) = 0;
          }
          if (v60)
            CFRelease(v60);
          itemfig_applyEnhancementFilterOptions((uint64_t)a1, a2);
          goto LABEL_15;
        }
        goto LABEL_197;
      }
      if (CFEqual(a3, CFSTR("DisableColorMatching")))
      {
        v61 = v82;
        if (*(_DWORD *)(v82 + 4) == 1986618469)
        {
          if (a4)
          {
            v62 = CFGetTypeID(a4);
            if (v62 != CFBooleanGetTypeID())
              goto LABEL_197;
            v63 = *(const void **)(v61 + 64);
            *(_QWORD *)(v61 + 64) = a4;
            CFRetain(a4);
          }
          else
          {
            v63 = *(const void **)(v82 + 64);
            *(_QWORD *)(v82 + 64) = 0;
          }
          if (v63)
            CFRelease(v63);
          itemfig_applyDisableColorMatching((uint64_t)a1, a2);
          goto LABEL_15;
        }
        goto LABEL_197;
      }
      if (CFEqual(a3, CFSTR("ActiveHapticChannelIndex")))
      {
        v64 = v82;
        if (*(_DWORD *)(v82 + 4) != 1751216244)
          goto LABEL_197;
        if (!a4)
          goto LABEL_197;
        v65 = CFGetTypeID(a4);
        if (v65 != CFNumberGetTypeID())
          goto LABEL_197;
        v66 = *(const void **)(v64 + 176);
        *(_QWORD *)(v64 + 176) = a4;
        CFRetain(a4);
        if (v66)
          CFRelease(v66);
        v67 = *(_QWORD *)(v64 + 16);
        if (!v67)
          goto LABEL_15;
        v68 = kFigRenderPipelineProperty_ActiveHapticChannelIndex;
      }
      else if (CFEqual(a3, CFSTR("Volume")))
      {
        v69 = v82;
        if (*(_DWORD *)(v82 + 4) != 1751216244)
          goto LABEL_197;
        if (!a4)
          goto LABEL_197;
        v70 = CFGetTypeID(a4);
        if (v70 != CFNumberGetTypeID())
          goto LABEL_197;
        v71 = *(const void **)(v69 + 184);
        *(_QWORD *)(v69 + 184) = a4;
        CFRetain(a4);
        if (v71)
          CFRelease(v71);
        v67 = *(_QWORD *)(v69 + 16);
        if (!v67)
          goto LABEL_15;
        v68 = kFigAudioRenderPipelineProperty_SoftwareVolume1;
      }
      else
      {
        if (!CFEqual(a3, CFSTR("Muted")))
        {
          if (!CFEqual(a3, CFSTR("ExtractionIDArray")))
          {
            if (CFEqual(a3, CFSTR("ExtractionIDToPipelineLatencyDict")))
            {
              if (a4)
              {
                v79 = CFGetTypeID(a4);
                if (v79 == CFDictionaryGetTypeID())
                {
                  v80 = v82;
                  if (!*(_QWORD *)(v82 + 296))
                    *(_QWORD *)(v80 + 296) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  FigCFDictionaryAddEntriesToDictionaryWithRecursion();
                  goto LABEL_15;
                }
              }
            }
            goto LABEL_197;
          }
          if (a4)
          {
            v74 = CFGetTypeID(a4);
            if (v74 != CFArrayGetTypeID())
              goto LABEL_197;
          }
          cf = 0;
          v75 = v82;
          UpdatedExtractionTable = (const void *)itemfig_createUpdatedExtractionTable((uint64_t)a1, a2, *(_QWORD *)(v82 + 168), (uint64_t)a4, (const __CFArray **)&cf);
          if (!(_DWORD)UpdatedExtractionTable)
          {
            v76 = *(const void **)(v75 + 168);
            v77 = cf;
            *(_QWORD *)(v75 + 168) = cf;
            if (v77)
              CFRetain(v77);
            if (v76)
              CFRelease(v76);
            if (v77)
              CFRelease(v77);
            if (*(_QWORD *)(DerivedStorage + 352))
            {
              if (a5)
              {
                if (*(void **)(v16 + 512) == a1
                  && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 0, 0, 1, 0, 0, 1)
                  && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 1, 1, 1, 0, 0, 0))
                {
                  playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v13, *(const __CFString **)(v16 + 512), MEMORY[0x1E0CA2E18]);
                  MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
                  goto LABEL_105;
                }
                MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
              }
              valuePtr = *MEMORY[0x1E0CA2E18];
              v86 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
              v83 = valuePtr;
              v84 = v86;
LABEL_104:
              playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v13, (uint64_t)&valuePtr, (uint64_t)&v83, 0);
LABEL_105:
              v17 = 0;
            }
          }
LABEL_199:
          v26 = 0;
          if (!v17)
            goto LABEL_201;
          goto LABEL_200;
        }
        v72 = v82;
        if (*(_DWORD *)(v82 + 4) != 1751216244)
          goto LABEL_197;
        if (!a4)
          goto LABEL_197;
        v73 = CFGetTypeID(a4);
        if (v73 != CFBooleanGetTypeID())
          goto LABEL_197;
        *(_BYTE *)(v72 + 9) = CFBooleanGetValue((CFBooleanRef)a4);
        v67 = *(_QWORD *)(v72 + 16);
        if (!v67)
          goto LABEL_15;
        v68 = kFigRenderPipelineProperty_Muted;
      }
      v53 = FigRenderPipelineSetProperty_0(v67, (uint64_t)*v68, (uint64_t)a4);
    }
LABEL_198:
    UpdatedExtractionTable = (const void *)v53;
    goto LABEL_199;
  }
  v36 = v82;
  if (*(_DWORD *)(v82 + 4) != 1986618469)
    goto LABEL_197;
  if (a4)
  {
    v37 = CFStringGetTypeID();
    if (v37 != CFGetTypeID(a4))
      goto LABEL_197;
  }
  if (FigCFEqual())
    goto LABEL_15;
  v38 = *(const void **)(v36 + 24);
  *(_QWORD *)(v36 + 24) = a4;
  if (a4)
    CFRetain(a4);
  if (v38)
    CFRelease(v38);
  if (!*(_QWORD *)(DerivedStorage + 352))
    goto LABEL_15;
  if (a5)
    MEMORY[0x19402EA24](*(_QWORD *)(v16 + 496));
  valuePtr = *MEMORY[0x1E0CA2E18];
  v86 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v83 = valuePtr;
  v84 = v86;
LABEL_95:
  v31 = v13;
LABEL_31:
  playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v31, (uint64_t)&valuePtr, (uint64_t)&v83, 0);
  UpdatedExtractionTable = 0;
LABEL_204:
  CFRelease(v13);
  return (uint64_t)UpdatedExtractionTable;
}

uint64_t fp_isValidAudioCurves(const void *a1)
{
  CFTypeID TypeID;
  const void *Value;
  const void *v4;
  CFTypeID v5;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFDictionary *ValueAtIndex;
  const void *v11;
  CFIndex v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  CFTypeID v16;
  CMTime v17;
  CMTime time1;
  CMTime v19;
  CMTime v20;

  if (!a1)
    return 1;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1))
    return 0;
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("AudioCurve_Volume"));
  v20 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  if (Value)
  {
    v4 = Value;
    v5 = CFArrayGetTypeID();
    if (v5 != CFGetTypeID(v4))
      return 0;
    Count = CFArrayGetCount((CFArrayRef)v4);
    if (0xAAAAAAAAAAAAAAABLL * Count + 0x2AAAAAAAAAAAAAAALL > 0x5555555555555554)
      return 0;
    v8 = Count;
    if (Count >= 1)
    {
      v9 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v4, v9);
        memset(&v19, 0, sizeof(v19));
        CMTimeMakeFromDictionary(&v19, ValueAtIndex);
        v11 = CFArrayGetValueAtIndex((CFArrayRef)v4, v9 + 1);
        v12 = v9 + 2;
        v13 = CFArrayGetValueAtIndex((CFArrayRef)v4, v12);
        if ((v19.flags & 0x1D) != 1)
          break;
        v14 = v13;
        time1 = v20;
        v17 = v19;
        if (CMTimeCompare(&time1, &v17) > 0)
          break;
        v20 = v19;
        v15 = CFNumberGetTypeID();
        if (v15 != CFGetTypeID(v11))
          break;
        if (!v14)
          break;
        v16 = CFGetTypeID(v14);
        if (v16 != CFStringGetTypeID())
          break;
        v9 = v12 + 1;
        if (v9 >= v8)
          return 1;
      }
      return 0;
    }
  }
  return 1;
}

uint64_t fp_checkForCinematicAudioParametersInAudioCurves(uint64_t result, BOOL *a2, BOOL *a3, BOOL *a4)
{
  BOOL v7;
  BOOL v8;

  if (result)
  {
    v7 = FigCFDictionaryGetValue() != 0;
    result = FigCFDictionaryGetValue();
    v8 = result != 0;
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = 0;
  if (a2)
LABEL_3:
    *a2 = v7 || v8;
LABEL_4:
  if (a3)
    *a3 = v7;
  if (a4)
    *a4 = v8;
  return result;
}

uint64_t itemfig_applyTrackAudioCurvesToTrack(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t FigBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, uint64_t);

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 80);
    FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
    v5 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v5)
      return v5(FigBaseObject, CFSTR("AudioCurves"), v3);
    else
      return 4294954514;
  }
  return result;
}

uint64_t itemfig_setTrackEnabled(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(a2 + 8) = a3;
  result = *(_QWORD *)(DerivedStorage + 352);
  if (result)
    return FigPlaybackBossSetTrackEnableForStepping(result, *(_DWORD *)a2, a3);
  return result;
}

uint64_t itemfig_updateDefaultTrackID(uint64_t a1, int a2, char *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t TrackStorage;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  int v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  v23 = 0;
  *a3 = 0;
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v7)
    return 0;
  v8 = (const void *)v7;
  v9 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*v9)
    goto LABEL_35;
  v10 = v9;
  TrackStorage = itemfig_getTrackStorage(a1, a2, &v23);
  if ((_DWORD)TrackStorage)
    goto LABEL_38;
  v12 = v23;
  v13 = *(_DWORD *)(v23 + 4);
  if (v13 > 1936684397)
  {
    switch(v13)
    {
      case 1936684398:
        v14 = (int *)(DerivedStorage + 996);
        v15 = v10[120];
        break;
      case 1952807028:
        goto LABEL_13;
      case 1986618469:
        v14 = (int *)(DerivedStorage + 1000);
        v15 = v10[121];
        break;
      default:
        goto LABEL_33;
    }
    v16 = v15 == 0;
    goto LABEL_19;
  }
  switch(v13)
  {
    case 1668047728:
      v14 = (int *)(DerivedStorage + 1008);
      goto LABEL_15;
    case 1751216244:
      v16 = 0;
      v14 = (int *)(DerivedStorage + 1040);
      goto LABEL_19;
    case 1935832172:
LABEL_13:
      v14 = (int *)(DerivedStorage + 1016);
LABEL_15:
      v16 = 1;
LABEL_19:
      v17 = *v14;
      if (!*(_BYTE *)(v23 + 8))
      {
        if (v17 != a2)
        {
LABEL_32:
          v13 = *(_DWORD *)(v12 + 4);
          break;
        }
        v18 = a2 == 0;
        a2 = 0;
LABEL_28:
        v19 = !v18;
        *a3 = v19;
        *v14 = a2;
        goto LABEL_32;
      }
      if (!v17 || v17 == a2)
      {
LABEL_25:
        v18 = *v14 == a2;
        goto LABEL_28;
      }
      TrackStorage = itemfig_getTrackStorage(a1, v17, &v22);
      if (!(_DWORD)TrackStorage)
      {
        if (v16)
          itemfig_setTrackEnabled(a1, v22, 0);
        goto LABEL_25;
      }
LABEL_38:
      v20 = TrackStorage;
      goto LABEL_36;
  }
LABEL_33:
  if (v13 == 1986618469)
  {
    itemfig_updateHasEnabledVideo();
    itemfig_updateListenersForVideoTrack(a1, *(unsigned int *)(DerivedStorage + 1000));
  }
LABEL_35:
  v20 = 0;
LABEL_36:
  CFRelease(v8);
  return v20;
}

void itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  int v5;
  uint64_t v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 504));
  *(_BYTE *)(DerivedStorage + 496) = 0;
  *(_BYTE *)(DerivedStorage + 994) = 0;
  v4 = *(const void **)(DerivedStorage + 512);
  if (v4)
    CFRelease(v4);
  ++*(_DWORD *)(DerivedStorage + 520);
  *(_QWORD *)(DerivedStorage + 512) = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(DerivedStorage + 520));
  v5 = *(_DWORD *)(DerivedStorage + 540);
  *(_DWORD *)(DerivedStorage + 540) = a2;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 504));
  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = (const void *)v6;
  if (v6 && v5)
  {
    playerfig_postDeferredPrerollWasCancelledNotification(v6, v5);
  }
  else if (!v6)
  {
    return;
  }
  CFRelease(v7);
}

void itemfig_applyLoudnessInfo(const void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  const void *v13;
  const void *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t type[8];
  _QWORD v19[29];

  v19[27] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v10 = CMBaseObjectGetDerivedStorage();
  if (v9)
  {
    if (!*(_BYTE *)v10)
    {
      if (*(const void **)(v10 + 512) != a1 || !*(_QWORD *)(v10 + 560))
      {
        if (dword_1EE2A2AC8)
        {
LABEL_5:
          LODWORD(v19[0]) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_21:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_22:
        CFRelease(v9);
        return;
      }
      if (a3 && CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 504), 0) != a1)
      {
        if (dword_1EE2A2AC8)
          goto LABEL_5;
        goto LABEL_22;
      }
      v19[0] = 0;
      if ((_DWORD)a2 || (a2 = *(unsigned int *)(DerivedStorage + 996), (_DWORD)a2))
      {
        itemfig_getTrackStorage((uint64_t)a1, a2, v19);
        v12 = v19[0];
        if (v19[0] && *(_QWORD *)(v19[0] + 16))
        {
          *(_QWORD *)type = 0;
          itemfig_copyCombinedLoudnessInfoDictionary((uint64_t)a1, a2, (__CFDictionary **)type);
          v13 = *(const void **)type;
          if (*(_QWORD *)type)
          {
            v14 = (const void *)FigCFCopyCompactDescription();
            if (a4 == 1)
            {
              if (dword_1EE2A2AC8)
              {
                v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              fp_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(*(_QWORD *)(v12 + 16), v13);
            }
            else
            {
              if (dword_1EE2A2AC8)
              {
                v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigRenderPipelineSetProperty_0(*(_QWORD *)(v12 + 16), (uint64_t)CFSTR("LoudnessInfo"), (uint64_t)v13);
            }
            CFRelease(v13);
            if (v14)
              CFRelease(v14);
          }
          goto LABEL_22;
        }
        if (dword_1EE2A2AC8)
        {
          *(_DWORD *)type = 0;
          v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    FigSignalErrorAt();
    goto LABEL_22;
  }
}

uint64_t itemfig_setSweepFilterConfgurationPropertyInternal(uint64_t a1, int a2, const void *a3, _BYTE *a4)
{
  uint64_t TrackStorage;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  CFTypeID v12;
  const __CFBoolean *Value;
  const __CFBoolean *v14;
  CFTypeID v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  uint64_t v21;

  CMBaseObjectGetDerivedStorage();
  v21 = 0;
  *a4 = 0;
  TrackStorage = itemfig_getTrackStorage(a1, a2, &v21);
  if ((_DWORD)TrackStorage)
    return TrackStorage;
  v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v9)
  {
    v10 = (const void *)v9;
    CMBaseObjectGetDerivedStorage();
    v11 = v21;
    if (*(_DWORD *)(v21 + 4) == 1936684398)
    {
      if (a3)
      {
        v12 = CFGetTypeID(a3);
        if (v12 == CFDictionaryGetTypeID())
        {
          if (CFDictionaryContainsKey((CFDictionaryRef)a3, CFSTR("Enabled")))
          {
            Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("Enabled"));
            if (Value)
            {
              v14 = Value;
              v15 = CFGetTypeID(Value);
              if (v15 == CFBooleanGetTypeID())
              {
                if (!CFBooleanGetValue(v14))
                {
                  if (*(_BYTE *)(v11 + 120))
                  {
                    v18 = *(const void **)(v11 + 128);
                    *(_QWORD *)(v11 + 128) = a3;
                    CFRetain(a3);
                    if (v18)
                      CFRelease(v18);
                    v17 = 0;
                    *(_BYTE *)(v11 + 120) = 0;
                    goto LABEL_24;
                  }
LABEL_25:
                  v17 = 0;
                  goto LABEL_29;
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)a3, CFSTR("MinimumCutOffFrequency"))
                  && CFDictionaryContainsKey((CFDictionaryRef)a3, CFSTR("MaximumCutOffFrequency"))
                  && CFDictionaryContainsKey((CFDictionaryRef)a3, CFSTR("BypassThreshold")))
                {
                  if (!*(_BYTE *)(v11 + 120))
                  {
                    *(_BYTE *)(v11 + 120) = 1;
                    v19 = *(const void **)(v11 + 128);
                    *(_QWORD *)(v11 + 128) = a3;
                    CFRetain(a3);
                    if (v19)
                      CFRelease(v19);
                    v17 = 0;
                    *a4 = 1;
                    goto LABEL_29;
                  }
                  CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("MinimumCutOffFrequency"));
                  CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 128), CFSTR("MinimumCutOffFrequency"));
                  if (!FigCFEqual()
                    || (CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("MaximumCutOffFrequency")),
                        CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 128), CFSTR("MaximumCutOffFrequency")),
                        !FigCFEqual())
                    || (CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("BypassThreshold")),
                        CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 128), CFSTR("BypassThreshold")),
                        !FigCFEqual()))
                  {
                    v16 = *(const void **)(v11 + 128);
                    *(_QWORD *)(v11 + 128) = a3;
                    CFRetain(a3);
                    if (v16)
                      CFRelease(v16);
                    v17 = 0;
LABEL_24:
                    *a4 = 1;
LABEL_29:
                    CFRelease(v10);
                    return v17;
                  }
                  goto LABEL_25;
                }
              }
            }
          }
        }
      }
    }
    v17 = FigSignalErrorAt();
    goto LABEL_29;
  }
  return FigSignalErrorAt();
}

uint64_t FigRenderPipelineSetProperty_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(FigBaseObject, a2, a3);
  else
    return 4294954514;
}

void playerfig_dispatchAsyncAutoSelectionCriteriaChangedForItem(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 96), a2, (dispatch_function_t)itemfig_autoSelectionCriteriaChangedForItemAsync);
}

uint64_t itemfig_applyEnhancementFilterOptions(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t);
  uint64_t v11;

  v11 = 0;
  result = itemfig_getTrackStorage(a1, a2, &v11);
  if (!(_DWORD)result)
  {
    v3 = v11;
    if (v11)
    {
      v4 = *(_QWORD *)(v11 + 16);
      if (v4)
      {
        v5 = *(_QWORD *)(v11 + 56);
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
        v7 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v7)
          v7(FigBaseObject, CFSTR("EnhancementFilterOptions"), v5);
      }
      result = *(_QWORD *)(v3 + 248);
      if (result)
      {
        v8 = *(_QWORD *)(v3 + 56);
        v9 = FigRenderPipelineGetFigBaseObject(result);
        result = CMBaseObjectGetVTable();
        v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
        if (v10)
          return v10(v9, CFSTR("EnhancementFilterOptions"), v8);
      }
    }
  }
  return result;
}

uint64_t itemfig_applyDisableColorMatching(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t);
  uint64_t v11;

  v11 = 0;
  result = itemfig_getTrackStorage(a1, a2, &v11);
  if (!(_DWORD)result)
  {
    v3 = v11;
    if (v11)
    {
      v4 = *(_QWORD *)(v11 + 16);
      if (v4)
      {
        v5 = *(_QWORD *)(v11 + 64);
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
        v7 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v7)
          v7(FigBaseObject, CFSTR("DisableColorMatching"), v5);
      }
      result = *(_QWORD *)(v3 + 248);
      if (result)
      {
        v8 = *(_QWORD *)(v3 + 64);
        v9 = FigRenderPipelineGetFigBaseObject(result);
        result = CMBaseObjectGetVTable();
        v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
        if (v10)
          return v10(v9, CFSTR("DisableColorMatching"), v8);
      }
    }
  }
  return result;
}

uint64_t itemfig_createUpdatedExtractionTable(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const __CFArray **a5)
{
  const __CFAllocator *v6;
  const __CFArray *MutableCopy;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const void *SInt32;
  CFRange v14;
  CFIndex CountOfValue;
  CFIndex FirstIndexOfValue;
  CFIndex v17;
  CFIndex v18;
  uint64_t v19;
  CMTime *v20;
  uint64_t Instance;
  uint64_t v22;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v24;
  opaqueCMBufferQueue *v25;
  uint64_t v26;
  uint64_t v27;
  const __CFArray **v29;
  CMTime time;
  CFRange v32;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  v8 = (const __CFArray *)FigCFArrayCreateMutableCopy();
  v9 = v8;
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
      v11 = Count;
      v12 = 0;
      do
      {
        CFArrayGetValueAtIndex(v9, v12);
        SInt32 = (const void *)FigCFNumberCreateSInt32();
        if (MutableCopy)
          v14.length = CFArrayGetCount(MutableCopy);
        else
          v14.length = 0;
        v14.location = 0;
        CountOfValue = CFArrayGetCountOfValue(MutableCopy, v14, SInt32);
        if (CountOfValue == 1)
        {
          v32.length = CFArrayGetCount(MutableCopy);
          v32.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(MutableCopy, v32, SInt32);
          if (FirstIndexOfValue == -1)
          {
LABEL_38:
            v27 = FigSignalErrorAt();
            goto LABEL_31;
          }
          CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
          ++v12;
          if (!SInt32)
            continue;
        }
        else
        {
          if (CountOfValue)
            goto LABEL_38;
          CFArrayRemoveValueAtIndex(v9, v12);
          --v11;
          if (!SInt32)
            continue;
        }
        CFRelease(SInt32);
      }
      while (v12 < v11);
    }
  }
  v29 = a5;
  if (!MutableCopy || (v17 = CFArrayGetCount(MutableCopy), v17 < 1))
  {
LABEL_30:
    SInt32 = 0;
    v27 = 0;
    *v29 = v9;
    v9 = 0;
    goto LABEL_31;
  }
  v18 = v17;
  v19 = 0;
  v20 = (CMTime *)MEMORY[0x1E0CA2E18];
  while (1)
  {
    FigCFArrayGetInt32AtIndex();
    if (trackExtraction_GetTypeID_sRegisterFigFigPlaybackItemTrackExtractionTypeOnce != -1)
      dispatch_once_f(&trackExtraction_GetTypeID_sRegisterFigFigPlaybackItemTrackExtractionTypeOnce, &trackExtraction_GetTypeID_sFigFigPlaybackItemTrackExtractionTypeID, (dispatch_function_t)trackExtraction_RegisterCFType);
    Instance = _CFRuntimeCreateInstance();
    if (!Instance)
      break;
    v22 = Instance;
    *(_QWORD *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_DWORD *)(v22 + 24) = a2;
    *(_DWORD *)(v22 + 28) = 0;
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    v24 = CMBufferQueueCreate(v6, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v22 + 32));
    if ((_DWORD)v24
      || (CMNotificationCenterGetDefaultLocalCenter(), v24 = FigNotificationCenterAddWeakListener(), (_DWORD)v24)
      || (v25 = *(opaqueCMBufferQueue **)(v22 + 32),
          time = *v20,
          v24 = CMBufferQueueInstallTrigger(v25, (CMBufferQueueTriggerCallback)trackExtraction_dataBecameReady, (void *)v22, 7, &time, (CMBufferQueueTriggerToken *)(v22 + 40)), (_DWORD)v24))
    {
      v27 = v24;
      CFRelease((CFTypeRef)v22);
      goto LABEL_40;
    }
    CFArrayAppendValue(v9, (const void *)v22);
    CFRelease((CFTypeRef)v22);
LABEL_26:
    if (v18 == ++v19)
      goto LABEL_30;
  }
  v26 = FigSignalErrorAt();
  if (!(_DWORD)v26)
  {
    CFArrayAppendValue(v9, 0);
    goto LABEL_26;
  }
  v27 = v26;
LABEL_40:
  SInt32 = 0;
LABEL_31:
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v9)
    CFRelease(v9);
  if (SInt32)
    CFRelease(SInt32);
  return v27;
}

void playerfig_postDeferredPrerollWasCancelledNotification(uint64_t a1, int a2)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  CFTypeRef cf;
  int valuePtr;

  valuePtr = a2;
  CMBaseObjectGetDerivedStorage();
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v3 = CFDictionaryCreate(v2, (const void **)kFigPlayerParameter_PrerollID, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
}

uint64_t itemfig_copyCombinedLoudnessInfoDictionary(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  uint64_t TrackStorage;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v11;
  float v12;
  const void *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t CMBaseObject;
  void (*v17)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef cf;
  uint64_t v20;
  CFTypeRef v21;

  v20 = 0;
  v21 = 0;
  if ((_DWORD)a2
    && (DerivedStorage = CMBaseObjectGetDerivedStorage(),
        TrackStorage = itemfig_getTrackStorage(a1, a2, &v20),
        v8 = v20,
        v9 = *MEMORY[0x1E0C9AE00],
        (MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy()) != 0))
  {
    v11 = MutableCopy;
    if (!CFDictionaryContainsKey(MutableCopy, CFSTR("precalculated sc adjustment")))
    {
      v12 = *(float *)(DerivedStorage + 1440);
      if (v12 != 0.0)
      {
        __exp10((float)(v12 / 20.0));
        FigCFDictionarySetFloat32();
      }
    }
    if (!CFDictionaryContainsKey(v11, CFSTR("media kind")))
    {
      v13 = *(const void **)(DerivedStorage + 1448);
      if (v13)
        CFDictionarySetValue(v11, CFSTR("media kind"), v13);
    }
    if (v8)
    {
      cf = 0;
      v14 = *(_QWORD *)(DerivedStorage + 1216);
      v15 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v15)
      {
        v15(v14, a2, &cf);
        if (cf)
        {
          CMBaseObject = FigAssetTrackGetCMBaseObject();
          v17 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
          if (v17)
            v17(CMBaseObject, CFSTR("LoudnessInfo"), v9, &v21);
          CFRelease(cf);
        }
      }
    }
    if (FigCFDictionaryGetCount() >= 1)
      FigCFDictionaryAddEntriesToDictionaryWithRecursion();
    if (CFDictionaryGetCount(v11) < 1)
      CFRelease(v11);
    else
      *a3 = v11;
  }
  else
  {
    TrackStorage = FigSignalErrorAt();
  }
  if (v21)
    CFRelease(v21);
  return TrackStorage;
}

void fp_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t FigBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef cf;
  CMAttachmentBearerRef target;

  cf = 0;
  target = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  if (!CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target))
  {
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA4E40], a2, 0);
    FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
    v6 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v6)
    {
      if (!v6(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v4, &cf))
        CMBufferQueueEnqueue((CMBufferQueueRef)cf, target);
    }
  }
  if (target)
    CFRelease(target);
  if (cf)
    CFRelease(cf);
}

void itemfig_autoSelectionCriteriaChangedForItemAsync(const void *a1)
{
  _BYTE *DerivedStorage;
  uint64_t v3;
  const void *v4;
  uint64_t v5;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    v5 = CMBaseObjectGetDerivedStorage();
    if (!*DerivedStorage && *(_BYTE *)(v5 + 760))
      itemfig_updateSelectedMediaArrayInternal(a1, 0, 0, 0);
    CFRelease(v4);
  }
  if (a1)
    CFRelease(a1);
}

void trackExtraction_ResetOutput()
{
  uint64_t v0;
  const void *v1;
  CFMutableDictionaryRef Mutable;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (Mutable)
      CFRelease(Mutable);
    CFRelease(v1);
  }
}

void trackExtraction_dataBecameReady()
{
  uint64_t v0;
  const void *v1;
  CFMutableDictionaryRef Mutable;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (Mutable)
      CFRelease(Mutable);
    CFRelease(v1);
  }
}

uint64_t trackExtraction_RegisterCFType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double trackExtraction_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void trackExtraction_Finalize(uint64_t a1)
{
  opaqueCMBufferQueueTriggerToken *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (*(_QWORD *)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v2 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 40);
    if (v2)
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 32), v2);
    v3 = *(const void **)(a1 + 32);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

__CFString *trackExtraction_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigFigPlaybackItemTrackExtraction %p trackID %d extractionID %d bufferQueue %@ renderPipeline %@"), a1, *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  return Mutable;
}

uint64_t itemfig_HintStreamForTimeRange(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t, __int128 *);
  NSObject *v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v23;
  CMTimeEpoch v24;
  uint64_t v25;
  __int128 v26;
  CMTime time2;
  CMTimeRange time1[2];
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26 = xmmword_1932F7760;
  v5 = MEMORY[0x1E0CA2E18];
  v25 = 0;
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  if ((*((_BYTE *)a2 + 12) & 1) == 0
    || (*((_BYTE *)a2 + 36) & 1) == 0
    || *((_QWORD *)a2 + 5)
    || (*((_QWORD *)a2 + 3) & 0x8000000000000000) != 0)
  {
    FigSignalErrorAt();
    return 0;
  }
  v8 = DerivedStorage;
  v23 = *a2;
  v24 = *((_QWORD *)a2 + 2);
  *(_OWORD *)&time1[0].start.value = *(__int128 *)((char *)a2 + 24);
  time1[0].start.epoch = *((_QWORD *)a2 + 5);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1[0].start, &time2))
  {
    v9 = a2[1];
    *(_OWORD *)&time1[0].start.value = *a2;
    *(_OWORD *)&time1[0].start.epoch = v9;
    *(_OWORD *)&time1[0].duration.timescale = a2[2];
    CMTimeRangeGetEnd(&time2, time1);
    v10 = 0;
    v11 = 0;
    value = time2.value;
    flags = time2.flags;
    timescale = time2.timescale;
    epoch = time2.epoch;
  }
  else
  {
    flags = *(_DWORD *)(v5 + 12);
    epoch = *(_QWORD *)(v5 + 16);
    v10 = 1;
    *((_QWORD *)&v26 + 1) = 1;
    v11 = 2;
  }
  if (!*(_QWORD *)(v8 + 128))
    return 0;
  CMByteStreamGetCMBaseObject();
  FigCRABSGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
    return 0;
  v14 = *(unsigned int *)(v8 + 996);
  if ((_DWORD)v14)
  {
    *(_OWORD *)&time1[0].start.value = v23;
    time1[0].start.epoch = v24;
    if (itemfig_getTrackHintLocationForTime(a1, v14, (__int128 *)&time1[0].start.value, &v25))
    {
      v15 = v25;
      *(_QWORD *)&v26 = v25;
    }
    else
    {
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if ((flags & 0x1D) == 1)
    {
      v16 = *(unsigned int *)(v8 + 996);
      time1[0].start.value = value;
      time1[0].start.timescale = timescale;
      time1[0].start.flags = flags;
      time1[0].start.epoch = epoch;
      if (itemfig_getTrackHintLocationForTime(a1, v16, (__int128 *)&time1[0].start.value, &v25))
      {
        if (v25 > v15)
        {
          *((_QWORD *)&v26 + 1) = v25 - v15;
          v10 = v25 - v15;
        }
      }
    }
  }
  else
  {
    v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v17 = *(unsigned int *)(v8 + 1000);
  if ((_DWORD)v17)
  {
    *(_OWORD *)&time1[0].start.value = v23;
    time1[0].start.epoch = v24;
    if (itemfig_getTrackHintLocationForTime(a1, v17, (__int128 *)&time1[0].start.value, &v25)
      && v15 > v25)
    {
      *(_QWORD *)&v26 = v25;
      v15 = v25;
    }
    if ((flags & 0x1D) == 1)
    {
      v18 = *(unsigned int *)(v8 + 1000);
      time1[0].start.value = value;
      time1[0].start.timescale = timescale;
      time1[0].start.flags = flags;
      time1[0].start.epoch = epoch;
      if (itemfig_getTrackHintLocationForTime(a1, v18, (__int128 *)&time1[0].start.value, &v25))
      {
        if (v10 + v15 < v25)
        {
          v10 = v25 - v15;
          *((_QWORD *)&v26 + 1) = v25 - v15;
        }
      }
    }
  }
  v6 = 0;
  if (v15 != 0x7FFFFFFFFFFFFFFFLL && v10)
  {
    if (dword_1EE2A2AC8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v11 = v11;
    }
    v19 = *(_QWORD *)(v8 + 128);
    v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                               + 8);
    if (!v20 || (v6 = 1, v20(v19, v11, 1, &v26)))
    {
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
  }
  return v6;
}

uint64_t itemfig_makePlaybackPrerequisitePropertiesReady(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFArrayRef v5;
  __CFArray *MutableCopy;
  const __CFArray *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, CFArrayRef, char *, uint64_t);
  uint64_t v10;
  char v11;
  __CFArray *v13;
  const __CFArray *v14;
  __CFArray *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, __CFArray *, char *, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v19;
  void *values;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  uint64_t v29;
  CFRange v30;
  CFRange v31;

  v29 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4)
    goto LABEL_17;
  if (*(_BYTE *)(DerivedStorage + 1264) || *(_DWORD *)(DerivedStorage + 1256))
    goto LABEL_15;
  v5 = (CFArrayRef)fp_PrerequisiteAssetPropertiesArray_sPrerequisiteAssetPropertyArray;
  if (!fp_PrerequisiteAssetPropertiesArray_sPrerequisiteAssetPropertyArray)
  {
    values = CFSTR("assetProperty_ContentByteStream");
    v21 = CFSTR("assetProperty_FormatReader");
    v22 = CFSTR("assetProperty_Tracks");
    v23 = CFSTR("MediaSelectionArray");
    v24 = CFSTR("iTunesGaplessInfo");
    v25 = CFSTR("iTunesSoundCheckVolumeNormalization");
    v26 = CFSTR("assetProperty_ProtectedStatus");
    v27 = CFSTR("assetProperty_CPEProtector");
    v28 = CFSTR("assetProperty_InitialSamples");
    v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 9, MEMORY[0x1E0C9B378]);
    fp_PrerequisiteAssetPropertiesArray_sPrerequisiteAssetPropertyArray = (uint64_t)v5;
  }
  *(CFAbsoluteTime *)(DerivedStorage + 1568) = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(DerivedStorage + 1936) = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(DerivedStorage + 1224))
  {
    MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
    v7 = *(const __CFArray **)(DerivedStorage + 1224);
    v30.length = CFArrayGetCount(v7);
    v30.location = 0;
    CFArrayAppendArray(MutableCopy, v7, v30);
    v5 = MutableCopy;
  }
  else
  {
    MutableCopy = 0;
  }
  v8 = *(_QWORD *)(DerivedStorage + 1216);
  v9 = *(uint64_t (**)(uint64_t, CFArrayRef, char *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v9)
  {
    v10 = 4294954514;
    if (!MutableCopy)
      goto LABEL_12;
    goto LABEL_11;
  }
  v10 = v9(v8, v5, &v19, DerivedStorage + 1256);
  if (MutableCopy)
LABEL_11:
    CFRelease(MutableCopy);
LABEL_12:
  if ((_DWORD)v10)
  {
LABEL_40:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_18;
  }
  if (v19)
    *(_BYTE *)(DerivedStorage + 1264) = 1;
LABEL_15:
  if (*(_BYTE *)(DerivedStorage + 1265) || *(_DWORD *)(DerivedStorage + 1260))
    goto LABEL_17;
  v13 = (__CFArray *)fp_PrerequisiteAssetTrackPropertiesArray_sPrerequisiteAssetTrackPropertyArray;
  if (!fp_PrerequisiteAssetTrackPropertiesArray_sPrerequisiteAssetTrackPropertyArray)
  {
    values = CFSTR("LoudnessInfo");
    v21 = CFSTR("IsEnabled");
    v22 = CFSTR("MediaCharacteristicArray");
    v23 = CFSTR("MinSampleDuration");
    v13 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 4, MEMORY[0x1E0C9B378]);
    fp_PrerequisiteAssetTrackPropertiesArray_sPrerequisiteAssetTrackPropertyArray = (uint64_t)v13;
  }
  if (*(_QWORD *)(DerivedStorage + 1232))
  {
    v13 = (__CFArray *)FigCFArrayCreateMutableCopy();
    v14 = *(const __CFArray **)(DerivedStorage + 1232);
    v31.length = CFArrayGetCount(v14);
    v31.location = 0;
    CFArrayAppendArray(v13, v14, v31);
    v15 = v13;
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_QWORD *)(DerivedStorage + 1216);
  v17 = *(uint64_t (**)(uint64_t, _QWORD, __CFArray *, char *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 80);
  if (v17)
  {
    v10 = v17(v16, 0, v13, &v19, DerivedStorage + 1260);
    if (!v15)
      goto LABEL_35;
    goto LABEL_34;
  }
  v10 = 4294954514;
  if (v15)
LABEL_34:
    CFRelease(v15);
LABEL_35:
  if ((_DWORD)v10)
    goto LABEL_40;
  if (!v19)
  {
LABEL_17:
    v10 = 0;
    goto LABEL_18;
  }
  v10 = 0;
  *(_BYTE *)(DerivedStorage + 1265) = 1;
LABEL_18:
  if (a2)
  {
    v11 = *(_BYTE *)(DerivedStorage + 1264);
    if (v11)
      v11 = *(_BYTE *)(DerivedStorage + 1265) != 0;
    *a2 = v11;
  }
  if (v4)
    CFRelease(v4);
  return v10;
}

uint64_t itemfig_getTrackHintLocationForTime(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CFTypeRef v9;
  unsigned int (*v10)(CFTypeRef, CFTypeRef *);
  CFTypeRef v11;
  unsigned int (*v12)(CFTypeRef, __int128 *, _QWORD, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, _QWORD, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  int v15;
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, uint64_t *, uint64_t *, _QWORD, _QWORD);
  uint64_t FigBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  CFNumberRef v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v22;
  CFNumberRef number;
  uint64_t v25;
  uint64_t valuePtr;
  CFTypeRef cf;
  CFTypeRef v28;
  CFTypeRef v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  valuePtr = 0;
  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 968);
  if (!v7)
    return 0;
  v8 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v8)
    return 0;
  cf = 0;
  v28 = 0;
  v25 = 0;
  if (v8(v7, a2, &v29, 0))
    return 0;
  v9 = v29;
  v10 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v10 || v10(v9, &v28))
  {
    v22 = 0;
    goto LABEL_29;
  }
  v11 = v28;
  v30 = *a3;
  v31 = *((_QWORD *)a3 + 2);
  v12 = *(unsigned int (**)(CFTypeRef, __int128 *, _QWORD, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 16);
  if (v12)
  {
    v32 = v30;
    v33 = v31;
    if (!v12(v11, &v32, 0, &cf, 0, 0))
    {
      v13 = cf;
      v14 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
      if (v14 && (v15 = v14(v13, 0, 0, &valuePtr, 0, 0, 0, 0, 0, 0), v15 != -12782)
        || (v16 = cf,
            (v17 = *(uint64_t (**)(CFTypeRef, uint64_t *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 144)) != 0)
        && (v15 = v17(v16, &valuePtr, &v25, 0, 0), v15 != -12782))
      {
LABEL_25:
        if (v15)
        {
          v22 = 0;
        }
        else
        {
          *a4 = valuePtr;
          v22 = 1;
        }
        CFRelease(cf);
        goto LABEL_28;
      }
      number = 0;
      FigBaseObject = FigSampleCursorGetFigBaseObject(cf);
      v19 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
      if (v19)
      {
        v15 = v19(FigBaseObject, CFSTR("ApproximateSampleLocation"), 0, &number);
        v20 = number;
        if (v15 || !number)
        {
LABEL_23:
          if (v20)
            CFRelease(v20);
          goto LABEL_25;
        }
        CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
        if (dword_1EE2A2AC8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v15 = 0;
      }
      else
      {
        v15 = -12782;
      }
      v20 = number;
      goto LABEL_23;
    }
  }
  v22 = 0;
LABEL_28:
  CFRelease(v28);
LABEL_29:
  if (v29)
    CFRelease(v29);
  return v22;
}

uint64_t itemfig_ensureTrackStorageArray()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  CFMutableArrayRef Mutable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, CFTypeRef *, _BYTE *, _BYTE *);
  uint64_t FigBaseObject;
  void (*v15)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v16;
  uint64_t v17;
  void (*v18)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v19;
  CFTypeRef v21;
  CFTypeRef cf;
  CFTypeRef v23;
  uint64_t v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  v24 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 640));
  if (*(_QWORD *)(DerivedStorage + 648))
    goto LABEL_2;
  if (!*(_QWORD *)(DerivedStorage + 968)
    || (v2 = *MEMORY[0x1E0C9AE00],
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0),
        (*(_QWORD *)(DerivedStorage + 648) = Mutable) == 0))
  {
LABEL_33:
    v6 = FigSignalErrorAt();
    goto LABEL_34;
  }
  v4 = *(_QWORD *)(DerivedStorage + 968);
  v5 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v5)
  {
LABEL_29:
    v1 = 4294954514;
    goto LABEL_30;
  }
  v6 = v5(v4, &v24);
  if (!(_DWORD)v6)
  {
    if (v24 < 1)
    {
LABEL_2:
      v1 = 0;
      goto LABEL_30;
    }
    v7 = 0;
    v8 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v9 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    while (1)
    {
      cf = 0;
      v10 = malloc_type_calloc(0x130uLL, 1uLL, 0xEB5B0500uLL);
      if (!v10)
        goto LABEL_33;
      v11 = v10;
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 648), v10);
      v12 = *(_QWORD *)(DerivedStorage + 968);
      v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _BYTE *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 48);
      if (!v13)
        goto LABEL_29;
      v6 = v13(v12, v7, &v23, v11 + 4, v11);
      if ((_DWORD)v6)
        break;
      FigBaseObject = FigTrackReaderGetFigBaseObject(v23);
      v15 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v15)
        v15(FigBaseObject, CFSTR("TrackEnabled"), v2, &cf);
      v16 = cf;
      if (v8 != cf)
        v11[8] = 1;
      if (v16)
        CFRelease(v16);
      v11[9] = 0;
      if (*((_DWORD *)v11 + 1) == 1986618469)
      {
        v21 = 0;
        v17 = FigTrackReaderGetFigBaseObject(v23);
        v18 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v18)
          v18(v17, CFSTR("ContainsChapters"), v2, &v21);
        v19 = v21;
        if (v9 == v21)
          v11[72] = 1;
        if (v19)
          CFRelease(v19);
      }
      if (v23)
      {
        CFRelease(v23);
        v23 = 0;
      }
      if (++v7 >= v24)
        goto LABEL_2;
    }
  }
LABEL_34:
  v1 = v6;
LABEL_30:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 640));
  if (v23)
    CFRelease(v23);
  return v1;
}

void itemfig_setDisplayNonForcedSubtitlesEnabled(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  dispatch_queue_t *v13;
  dispatch_queue_t *v14;
  __CFDictionary *NotificationPayloadForProperties;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v6 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (v5)
  {
    if (*v6)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else if (*(unsigned __int8 *)(DerivedStorage + 1020) != a2)
    {
      *(_BYTE *)(DerivedStorage + 1020) = a2;
      v13 = *(dispatch_queue_t **)(DerivedStorage + 1744);
      if (v13)
        FigLegibleOutputManagerSetNonForcedEnabledForMediaType(v13, 1935832172, a2);
      v14 = *(dispatch_queue_t **)(DerivedStorage + 1776);
      if (v14)
        FigRenderedLegibleOutputManagerSetNonForcedEnabledForMediaType(v14, 1935832172, *(_BYTE *)(DerivedStorage + 1020));
      NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v5, a1, v7, v8, v9, v10, v11, v12, CFSTR("DisplayNonForcedSubtitles"), (uint64_t)CFSTR("SelectedMediaArray"));
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (NotificationPayloadForProperties)
        CFRelease(NotificationPayloadForProperties);
    }
    CFRelease(v5);
  }
}

void playerfig_resetSubtitleRenderPipeline()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  OSStatus v4;
  CMAttachmentBearerRef v5;
  uint64_t FigBaseObject;
  unsigned int (*v7)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef cf;
  CMAttachmentBearerRef target;
  void *values;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 0x7FFFFFFF;
  target = 0;
  if (*(_QWORD *)(DerivedStorage + 584))
  {
    v1 = DerivedStorage;
    values = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (values)
    {
      v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA2748], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v3)
      {
        v4 = CMSampleBufferCreate(v2, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
        v5 = target;
        if (!v4)
        {
          CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA26E0], values, 1u);
          cf = 0;
          FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v1 + 584));
          v7 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v7)
          {
            if (!v7(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v2, &cf) && cf != 0)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
              CMBufferQueueEnqueue((CMBufferQueueRef)cf, target);
              CFRelease(cf);
            }
          }
          v5 = target;
        }
        if (v5)
        {
          CFRelease(v5);
          target = 0;
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    else
    {
      FigSignalErrorAt();
      v3 = 0;
    }
    if (values)
    {
      CFRelease(values);
      values = 0;
    }
    if (v3)
      CFRelease(v3);
  }
}

void itemfig_postSelectedMediaOptionsDidChangeNotification(uint64_t a1)
{
  const void *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  __CFDictionary *NotificationPayloadForProperties;

  CMBaseObjectGetDerivedStorage();
  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v2)
  {
    NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v2, a1, v3, v4, v5, v6, v7, v8, CFSTR("SelectedMediaArray"), 0);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (NotificationPayloadForProperties)
      CFRelease(NotificationPayloadForProperties);
    CFRelease(v2);
  }
}

uint64_t itemfig_enableAudioTrackAndSetCompositionPresetIndexForEnabledTrack(uint64_t a1, int a2, int a3, uint64_t a4, char *a5, char *a6)
{
  uint64_t result;
  uint64_t v13;
  char v14;
  CFNumberRef v15;
  CFNumberRef v16;
  char v17;
  const void *v18;
  char v19;
  uint64_t v20;
  uint64_t valuePtr;

  v20 = 0;
  valuePtr = a4;
  result = itemfig_getTrackStorage(a1, a3, &v20);
  if ((_DWORD)result)
    return result;
  v13 = v20;
  if (*(unsigned __int8 *)(v20 + 8) == a2)
  {
    v14 = 0;
    if (!a2)
      goto LABEL_11;
  }
  else
  {
    itemfig_setTrackEnabled(a1, v20, a2);
    result = itemfig_updateDefaultTrackID(a1, a3, &v19);
    if ((_DWORD)result)
      return result;
    v14 = 1;
    if (!a2)
    {
LABEL_11:
      result = 0;
      *a5 = v14;
      *a6 = 0;
      return result;
    }
  }
  if (a4 == -1)
    goto LABEL_11;
  v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
  if (!v15)
    return FigSignalErrorAt();
  v16 = v15;
  if (FigCFEqual())
  {
    v17 = 0;
  }
  else
  {
    v18 = *(const void **)(v13 + 144);
    *(_QWORD *)(v13 + 144) = v16;
    CFRetain(v16);
    if (v18)
      CFRelease(v18);
    v17 = 1;
  }
  *a5 = v14;
  *a6 = v17;
  CFRelease(v16);
  return 0;
}

uint64_t itemfig_isAC3PassthroughSupported()
{
  const void *v0;
  uint64_t DerivedStorage;
  uint64_t v2;
  const void *v3;
  CFTypeRef v4;
  uint64_t v5;
  uint64_t (*v6)(CFTypeRef, _QWORD, _QWORD, CFBooleanRef *);
  int v7;
  CFBooleanRef v8;
  BOOL v9;
  uint64_t v10;
  uint64_t Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFBooleanRef BOOLean[17];

  BOOLean[16] = *(CFBooleanRef *)MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!v0)
    return 0;
  v2 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 456));
    v3 = *(const void **)(v2 + 464);
    if (v3)
    {
      v4 = CFRetain(v3);
      MEMORY[0x19402EF04](*(_QWORD *)(v2 + 456));
      if (v4)
      {
        BOOLean[0] = 0;
        v5 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v5 && (v6 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, CFBooleanRef *))(v5 + 48)) != 0)
        {
          v7 = v6(v4, *MEMORY[0x1E0D49478], *MEMORY[0x1E0C9AE00], BOOLean);
          v8 = BOOLean[0];
          if (v7)
            v9 = 1;
          else
            v9 = BOOLean[0] == 0;
          if (v9)
          {
            v10 = 0;
            if (!BOOLean[0])
              goto LABEL_19;
          }
          else
          {
            Value = CFBooleanGetValue(BOOLean[0]);
            v10 = Value;
            v8 = BOOLean[0];
            if (!BOOLean[0])
              goto LABEL_19;
          }
          CFRelease(v8);
        }
        else
        {
          v10 = 0;
        }
LABEL_19:
        CFRelease(v4);
        goto LABEL_20;
      }
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(v2 + 456));
    }
  }
  v10 = 0;
LABEL_20:
  CFRelease(v0);
  return v10;
}

void itemfig_isEC3PassthroughSupported()
{
  const void *v0;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

uint64_t itemfig_isAtmosSupported(uint64_t a1)
{
  const void *v2;
  _BYTE *DerivedStorage;
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  NSObject *v14;
  int v15[32];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v2)
    return 0;
  if (*DerivedStorage)
    goto LABEL_29;
  if (!playerfig_isMATAtmosEnabled())
  {
    if (itemfig_isSpatializationAllowed(a1, 0))
    {
      if (dword_1EE2A2AC8)
        goto LABEL_5;
      goto LABEL_21;
    }
    LOBYTE(v15[0]) = 0;
    if (fp_bufferedAirPlayActiveAndSupportsAtmos((uint64_t)v2, v15) && LOBYTE(v15[0]))
    {
      if (!dword_1EE2A2AC8)
        goto LABEL_21;
LABEL_12:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      goto LABEL_22;
    }
    v15[0] = 0;
    CMBaseObjectGetDerivedStorage();
    v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v7 = CMBaseObjectGetDerivedStorage();
    if (v6)
    {
      v8 = v7;
      if (*(_BYTE *)v7)
      {
        CFRelease(v6);
      }
      else
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 456));
        v9 = *(_QWORD *)(v8 + 464);
        if (v9)
          v10 = FPSupport_GetAudioSessionOutputChannelCount(v9, v15) != 0;
        else
          v10 = 0;
        MEMORY[0x19402EF04](*(_QWORD *)(v8 + 456));
        v11 = v15[0];
        CFRelease(v6);
        if (!v10 && v11 == 16)
        {
          if (!dword_1EE2A2AC8)
            goto LABEL_21;
          goto LABEL_12;
        }
      }
    }
    if (dword_1EE2A2AC8)
    {
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_29:
    v12 = 0;
    goto LABEL_23;
  }
  if (dword_1EE2A2AC8)
  {
LABEL_5:
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
LABEL_22:
    v12 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_23;
  }
LABEL_21:
  v12 = 1;
LABEL_23:
  CFRelease(v2);
  return v12;
}

uint64_t itemfig_isTrackAC3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, CFTypeRef *, int *);
  int v5;
  CFTypeRef v6;
  BOOL v7;
  uint64_t v8;
  signed int MediaSubType;
  int v10;
  CMFormatDescriptionRef desc;
  int v13;
  CFTypeRef cf;

  cf = 0;
  v13 = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 968);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v4)
    return 0;
  v5 = v4(v3, a2, &cf, &v13);
  v6 = cf;
  if (v5)
    v7 = 0;
  else
    v7 = v13 == 1936684398;
  if (!v7)
  {
    v8 = 0;
    if (!cf)
      return v8;
    goto LABEL_20;
  }
  desc = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc))
  {
LABEL_18:
    v8 = 0;
    goto LABEL_19;
  }
  v8 = (uint64_t)desc;
  if (!desc)
    goto LABEL_19;
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  CFRelease((CFTypeRef)v8);
  v8 = 1;
  if (MediaSubType > 1885430578)
  {
    if (MediaSubType != 1885430579 && MediaSubType != 1902207795)
    {
      v10 = 2053202739;
LABEL_17:
      if (MediaSubType == v10)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else if (MediaSubType != 1633889587 && MediaSubType != 1667312947)
  {
    v10 = 1667326771;
    goto LABEL_17;
  }
LABEL_19:
  v6 = cf;
  if (cf)
LABEL_20:
    CFRelease(v6);
  return v8;
}

uint64_t itemfig_isTrackEnhancedAC3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, CFTypeRef *, int *);
  int v5;
  CFTypeRef v6;
  BOOL v7;
  uint64_t v8;
  signed int MediaSubType;
  int v10;
  CMFormatDescriptionRef desc;
  int v13;
  CFTypeRef cf;

  cf = 0;
  v13 = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 968);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v4)
    return 0;
  v5 = v4(v3, a2, &cf, &v13);
  v6 = cf;
  if (v5)
    v7 = 0;
  else
    v7 = v13 == 1936684398;
  if (!v7)
  {
    v8 = 0;
    if (!cf)
      return v8;
    goto LABEL_21;
  }
  desc = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc))
  {
LABEL_19:
    v8 = 0;
    goto LABEL_20;
  }
  v8 = (uint64_t)desc;
  if (!desc)
    goto LABEL_20;
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  CFRelease((CFTypeRef)v8);
  v8 = 1;
  if (MediaSubType <= 1885692722)
  {
    if (MediaSubType == 1667575091)
      goto LABEL_20;
    v10 = 1700998451;
LABEL_18:
    if (MediaSubType == v10)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (MediaSubType != 1885692723 && MediaSubType != 1902469939)
  {
    v10 = 2053464883;
    goto LABEL_18;
  }
LABEL_20:
  v6 = cf;
  if (cf)
LABEL_21:
    CFRelease(v6);
  return v8;
}

uint64_t itemfig_isTrackAtmos(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, CFTypeRef *, int *);
  int v5;
  CFTypeRef v6;
  BOOL v7;
  const opaqueCMFormatDescription *v8;
  signed int MediaSubType;
  uint64_t v10;
  int v11;
  int v12;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  int v15;
  CMFormatDescriptionRef desc;
  int v18;
  CFTypeRef cf;
  size_t sizeOut;

  cf = 0;
  v18 = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 968);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v4)
    return 0;
  v5 = v4(v3, a2, &cf, &v18);
  v6 = cf;
  if (v5)
    v7 = 0;
  else
    v7 = v18 == 1936684398;
  if (!v7)
  {
    v10 = 0;
    if (!cf)
      return v10;
    goto LABEL_41;
  }
  desc = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc))
  {
    v10 = 0;
    goto LABEL_40;
  }
  v8 = desc;
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  v10 = 1;
  if (MediaSubType <= 1885692722)
  {
    if (MediaSubType > 1700997938)
    {
      if (MediaSubType == 1700997939)
        goto LABEL_38;
      if (MediaSubType != 1700998451)
      {
        v11 = 1885547315;
        goto LABEL_26;
      }
      goto LABEL_28;
    }
    if (MediaSubType == 1667574579)
      goto LABEL_38;
    v12 = 1667575091;
LABEL_22:
    if (MediaSubType != v12)
    {
LABEL_37:
      v10 = 0;
      goto LABEL_38;
    }
    goto LABEL_28;
  }
  if (MediaSubType > 1902469938)
  {
    if (MediaSubType == 2053464883)
      goto LABEL_28;
    if (MediaSubType == 2053319475)
      goto LABEL_38;
    v12 = 1902469939;
    goto LABEL_22;
  }
  if (MediaSubType != 1885692723)
  {
    v11 = 1902324531;
LABEL_26:
    if (MediaSubType == v11)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_28:
  sizeOut = 0;
  FormatList = CMAudioFormatDescriptionGetFormatList(v8, &sizeOut);
  v10 = 0;
  if (FormatList && sizeOut >= 0x30)
  {
    mFormatID = FormatList->mASBD.mFormatID;
    v10 = 1;
    if (mFormatID <= 1885547314)
    {
      if (mFormatID == 1667574579)
        goto LABEL_38;
      v15 = 1700997939;
LABEL_36:
      if (mFormatID == v15)
        goto LABEL_38;
      goto LABEL_37;
    }
    if (mFormatID != 1885547315 && mFormatID != 1902324531)
    {
      v15 = 2053319475;
      goto LABEL_36;
    }
  }
LABEL_38:
  if (v8)
    CFRelease(v8);
LABEL_40:
  v6 = cf;
  if (cf)
LABEL_41:
    CFRelease(v6);
  return v10;
}

BOOL itemfig_isTrackDecodable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  int v5;
  CMAudioFormatDescriptionRef v6;
  _BOOL8 v7;
  CMAudioFormatDescriptionRef desc;
  CFTypeRef cf;

  desc = 0;
  cf = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 968);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v4 || v4(v3, a2, &cf, 0))
  {
    v7 = 0;
  }
  else
  {
    v5 = itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc);
    v6 = desc;
    if (!v5)
    {
      v7 = CMAudioFormatDescriptionGetRichestDecodableFormat(desc) != 0;
      if (!v6)
        goto LABEL_7;
      goto LABEL_5;
    }
    v7 = 0;
    if (desc)
LABEL_5:
      CFRelease(v6);
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t itemfig_getMaximumNumberOfSpatializedOutputChannels(uint64_t a1, int *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t DeviceMaximumNumberOfPhysicalOutputChannels;
  int v7;
  int v9;

  v9 = 2;
  CMBaseObjectGetDerivedStorage();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4)
    return FigSignalErrorAt();
  v5 = (const void *)v4;
  DeviceMaximumNumberOfPhysicalOutputChannels = playerfig_getDeviceMaximumNumberOfPhysicalOutputChannels(v4, &v9, 0);
  if (!(_DWORD)DeviceMaximumNumberOfPhysicalOutputChannels)
  {
    if (itemfig_isSpatializationAllowed(a1, 0) || itemfig_isSpatializationAllowed(a1, 1))
    {
      v7 = 0;
      if (v9 >= 0)
        v7 = v9;
    }
    else
    {
      v7 = v9;
    }
    *a2 = v7;
  }
  CFRelease(v5);
  return DeviceMaximumNumberOfPhysicalOutputChannels;
}

uint64_t playerfig_getDeviceMaximumNumberOfPhysicalOutputChannels(uint64_t a1, int *a2, int *a3)
{
  _QWORD *DerivedStorage;
  int v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t v9;
  const void *v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t (*v17)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v18;
  CFTypeRef cf;
  int valuePtr;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  valuePtr = 2;
  cf = 0;
  if (!FigCFEqual())
  {
    MEMORY[0x19402EEEC](DerivedStorage[22]);
    v11 = (const void *)DerivedStorage[21];
    if (v11)
    {
      v8 = CFRetain(v11);
      MEMORY[0x19402EF04](DerivedStorage[22]);
      if (v8)
      {
        CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v8);
        v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (!v13)
        {
          v7 = 0;
          v9 = 4294954514;
          goto LABEL_6;
        }
        v14 = v13(CMBaseObject, CFSTR("MaximumNumberOfOutputChannels"), *MEMORY[0x1E0C9AE00], &cf);
        if ((_DWORD)v14)
        {
          v9 = v14;
          v7 = 0;
          goto LABEL_6;
        }
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        v7 = 0;
        v6 = 1;
        goto LABEL_4;
      }
    }
    else
    {
      MEMORY[0x19402EF04](DerivedStorage[22]);
    }
    MEMORY[0x19402EEEC](DerivedStorage[57]);
    v15 = (const void *)DerivedStorage[58];
    if (v15)
    {
      v7 = CFRetain(v15);
      MEMORY[0x19402EF04](DerivedStorage[57]);
      if (v7)
      {
        v16 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (!v16)
        {
          v8 = 0;
          v9 = 4294948075;
          goto LABEL_6;
        }
        v17 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *))(v16 + 48);
        if (!v17)
        {
          v8 = 0;
          v9 = 4294948071;
          goto LABEL_6;
        }
        v18 = v17(v7, *MEMORY[0x1E0D49988], *MEMORY[0x1E0C9AE00], &cf);
        if ((_DWORD)v18)
        {
          v9 = v18;
          v8 = 0;
          goto LABEL_6;
        }
        if (cf)
          CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
      }
      v6 = 0;
      goto LABEL_3;
    }
    MEMORY[0x19402EF04](DerivedStorage[57]);
  }
  v6 = 0;
  v7 = 0;
LABEL_3:
  v8 = 0;
LABEL_4:
  *a2 = valuePtr;
  v9 = 0;
  if (a3)
    *a3 = v6;
LABEL_6:
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  return v9;
}

uint64_t itemfig_isSpatializationAllowed(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  const __CFDictionary *v10;
  const __CFArray *Value;
  const __CFArray *v12;
  CFIndex v13;
  const __CFDictionary *v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v5 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    if (!*v5)
    {
      if (FPSupport_HasTrackOfType(*(_QWORD *)(DerivedStorage + 968), 1986618469))
        v6 = 1836019574;
      else
        v6 = 1936684398;
      v7 = CMBaseObjectGetDerivedStorage();
      v15 = 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 456));
      v8 = *(const void **)(v7 + 464);
      if (v8)
      {
        v9 = CFRetain(v8);
        MEMORY[0x19402EF04](*(_QWORD *)(v7 + 456));
        if (v9)
        {
          if (FPSupport_CreateAudioSessionSpatializationCapabilities((uint64_t)v9, v6, (CFTypeRef *)&v15))
          {
            CFRelease(v9);
          }
          else
          {
            v10 = v15;
            CFRelease(v9);
            if (v10)
            {
              Value = (const __CFArray *)CFDictionaryGetValue(v10, CFSTR("SpatialCapabilitiesKey_spatialAudioSources"));
              if (Value)
              {
                v12 = Value;
                FigCFDictionaryGetBooleanIfPresent();
                if (CFArrayGetCount(v12) >= 1)
                {
                  v13 = 0;
                  do
                  {
                    FigCFArrayGetInt32AtIndex();
                    ++v13;
                  }
                  while (v13 < CFArrayGetCount(v12));
                }
                if (!a2)
                {
                  if (*(_BYTE *)(DerivedStorage + 1392))
                  {
                    CMBaseObjectGetDerivedStorage();
                    if (!FigCFEqual() && !FigCFEqual())
                      FigCFEqual();
                  }
                }
              }
              CFRelease(v10);
            }
          }
        }
      }
      else
      {
        MEMORY[0x19402EF04](*(_QWORD *)(v7 + 456));
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t itemfig_canTrackPassthrough(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, CFTypeRef *, int *);
  int v5;
  CFTypeRef v6;
  BOOL v7;
  const void *v8;
  uint64_t IsPassthroughSupported;
  const void *v11;
  int v12;
  CFTypeRef cf;

  cf = 0;
  v12 = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 968);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v4)
    return 0;
  v5 = v4(v3, a2, &cf, &v12);
  v6 = cf;
  if (v5)
    v7 = 0;
  else
    v7 = v12 == 1936684398;
  if (!v7)
  {
    IsPassthroughSupported = 0;
    if (!cf)
      return IsPassthroughSupported;
    goto LABEL_13;
  }
  v11 = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&v11) || (v8 = v11) == 0)
  {
    IsPassthroughSupported = 0;
  }
  else
  {
    IsPassthroughSupported = FigAudioQueueRenderPipelineIsPassthroughSupported(v11);
    CFRelease(v8);
  }
  v6 = cf;
  if (cf)
LABEL_13:
    CFRelease(v6);
  return IsPassthroughSupported;
}

uint64_t playerfig_isMATAtmosEnabled()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  uint64_t v3;
  unsigned int (*v4)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *);
  BOOL v5;
  uint64_t v6;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 456));
  v1 = *(const void **)(DerivedStorage + 464);
  if (!v1)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 456));
    return 0;
  }
  v2 = CFRetain(v1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 456));
  if (!v2)
    return 0;
  cf = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v3 && (v4 = *(unsigned int (**)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *))(v3 + 48)) != 0)
  {
    if (v4(v2, *MEMORY[0x1E0D49968], *MEMORY[0x1E0C9AE00], &cf))
      v5 = 0;
    else
      v5 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
    v6 = v5;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v6 = 0;
  }
  CFRelease(v2);
  return v6;
}

uint64_t fp_bufferedAirPlayActiveAndSupportsAtmos(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, const void **);
  const void *v8;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (a2)
    *a2 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 176));
  v5 = *(const void **)(v4 + 168);
  if (v5)
  {
    CFRetain(*(CFTypeRef *)(v4 + 168));
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 176));
    v10 = 0;
    if (a2)
    {
      CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v5);
      v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v7)
      {
        v7(CMBaseObject, CFSTR("AtmosIsSupported"), *MEMORY[0x1E0C9AE00], &v10);
        v8 = v10;
      }
      else
      {
        v8 = 0;
      }
      if (v8 == (const void *)*MEMORY[0x1E0C9AE50])
        *a2 = 1;
      if (v8)
        CFRelease(v8);
    }
    CFRelease(v5);
    return 1;
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 176));
    return 0;
  }
}

uint64_t itemfig_getTrackAudioChannelCount(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, CFTypeRef *, int *);
  int v5;
  CFTypeRef v6;
  BOOL v7;
  const void *v8;
  uint64_t CodecOutputChannelCount;
  const void *v11;
  int v12;
  CFTypeRef cf;

  cf = 0;
  v12 = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 968);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v4)
    return 2;
  v5 = v4(v3, a2, &cf, &v12);
  v6 = cf;
  if (v5)
    v7 = 0;
  else
    v7 = v12 == 1936684398;
  if (!v7)
  {
    CodecOutputChannelCount = 2;
    if (!cf)
      return CodecOutputChannelCount;
    goto LABEL_13;
  }
  v11 = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&v11) || (v8 = v11) == 0)
  {
    CodecOutputChannelCount = 2;
  }
  else
  {
    CodecOutputChannelCount = FigAudioFormatDescriptionGetCodecOutputChannelCount();
    CFRelease(v8);
  }
  v6 = cf;
  if (cf)
LABEL_13:
    CFRelease(v6);
  return CodecOutputChannelCount;
}

uint64_t itemfig_applyAudioSceneCompositionPresetToTrack(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, uint64_t);

  v1 = *(_QWORD *)(a1 + 144);
  if (!v1)
    return 0;
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
    v4 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v4)
      return v4(FigBaseObject, CFSTR("SceneCompositionPreset"), v1);
    else
      return 4294954514;
  }
  return result;
}

uint64_t itemfig_rebuildRenderPipelinesAndBossGuts(const void *a1, int a2, int a3, int a4, int *a5, const void *a6, int a7)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  const __CFArray *v17;
  double PlayableDurationAtCurrentTime;
  uint64_t v19;
  void (*v20)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const void *v25;
  uint64_t v26;
  int IsAnAudioDeviceAvailable;
  CFIndex Count;
  CFIndex v29;
  int v30;
  CFIndex v31;
  _DWORD *ValueAtIndex;
  int v33;
  int v34;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v36;
  unsigned int v37;
  const char *v38;
  const char *v39;
  CFTypeRef v40;
  CFDictionaryRef v41;
  __CFSet *v42;
  uint64_t OctaviaSubtitleRenderPipeline;
  BOOL v44;
  const __CFArray *v45;
  const void *v46;
  const void *v47;
  char v48;
  uint64_t v49;
  int isTrackAC3;
  int *v51;
  int canTrackPassthrough;
  _BOOL4 isTrackDecodable;
  int MaximumNumberOfSpatializedOutputChannels;
  int v55;
  BOOL v57;
  int v58;
  __CFArray *v59;
  char v60;
  uint64_t v61;
  NSObject *v62;
  unsigned int v63;
  unsigned int v64;
  const char *v65;
  int v66;
  uint64_t v67;
  NSObject *v68;
  unsigned int v69;
  unsigned int v70;
  const char *v71;
  uint64_t v72;
  uint64_t CMBaseObject;
  void (*v74)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  uint64_t v75;
  int isAC3PassthroughSupported;
  int v77;
  int v78;
  NSObject *v79;
  unsigned int v80;
  unsigned int v81;
  const char *v82;
  int v83;
  const void *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  const void *v88;
  CFIndex v89;
  CFIndex v90;
  CFIndex v91;
  unsigned int *v92;
  _QWORD *v93;
  char shouldEnableSpatializationForTrack;
  const void *v95;
  _QWORD *v96;
  CFNumberRef v97;
  uint64_t FigBaseObject;
  void (*v99)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, const __CFString *, uint64_t);
  float v103;
  NSObject *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, _QWORD, _QWORD, CMTimeRange *);
  uint64_t v109;
  int TrackAudioChannelCount;
  int v111;
  int v112;
  uint64_t TrackStorage;
  CMTimeValue v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t, CMTime *, _QWORD);
  uint64_t v119;
  const void *v120;
  uint64_t v121;
  NSObject *v122;
  unsigned int v123;
  unsigned int v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  unsigned int v129;
  unsigned int v130;
  const char *v131;
  const void *v132;
  const void *v133;
  NSObject *v134;
  unsigned int v135;
  unsigned int v136;
  const char *v137;
  NSObject *v138;
  unsigned int v139;
  unsigned int v140;
  const char *v141;
  NSObject *v142;
  unsigned int v143;
  unsigned int v144;
  const char *v145;
  const void *v146;
  const void *v147;
  uint64_t v148;
  const __CFArray *v149;
  CFIndex v150;
  const __CFAllocator *v151;
  CFMutableArrayRef Mutable;
  __CFArray *v153;
  __CFArray *MutableCopy;
  CFIndex i;
  unsigned int *v156;
  unsigned int v157;
  int v158;
  int v159;
  NSObject *v160;
  unsigned int v161;
  unsigned int v162;
  CFIndex v163;
  const void *v164;
  CFTypeRef v165;
  const void *v166;
  CFIndex j;
  uint64_t v168;
  uint64_t v169;
  CFIndex v170;
  int v171;
  const void *v172;
  CFTypeRef v173;
  BOOL v174;
  int v175;
  CFIndex k;
  _QWORD *v177;
  CFIndex v178;
  CFIndex v179;
  _QWORD *v180;
  _QWORD *v181;
  const void *v182;
  const void *v183;
  CFMutableArrayRef v184;
  CFTypeRef v185;
  CFIndex v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  const void *v190;
  uint64_t v191;
  void (*v192)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t, const __CFString *, uint64_t);
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, const __CFString *, uint64_t);
  uint64_t v199;
  void (*v200)(uint64_t, const __CFString *, uint64_t);
  uint64_t RenderTriplesForVideo;
  uint64_t v202;
  uint64_t v203;
  const void *v204;
  __CFDictionary *v205;
  uint64_t v206;
  uint64_t v207;
  __CFArray *v208;
  const __CFArray *v209;
  CFIndex v210;
  CFIndex v211;
  CFIndex m;
  _QWORD *v213;
  unsigned int v214;
  uint64_t CommonRenderPipelineOptionsForTrack;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(uint64_t, uint64_t, _BYTE *, _QWORD);
  const opaqueCMFormatDescription *v219;
  const __CFArray *v220;
  const __CFArray *v221;
  CFIndex v222;
  CFIndex v223;
  CFIndex v224;
  const void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __CFArray *v232;
  const void *v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  const void *v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t (*v241)(uint64_t, uint64_t, _BYTE *, _QWORD);
  const void *v242;
  const void *v243;
  const void *v244;
  CFTypeRef v245;
  uint64_t SubtitleRenderPipeline;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(uint64_t, const __CFString *, uint64_t);
  uint64_t v251;
  void (*v252)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  const __CFAllocator *v258;
  __CFArray *v259;
  __CFArray *v260;
  const __CFArray *v261;
  CFIndex v262;
  CFIndex v263;
  CFIndex n;
  _QWORD *v265;
  const __CFArray *v266;
  CFIndex v267;
  CFIndex v268;
  CFIndex ii;
  _QWORD *v270;
  float v271;
  float v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t (*v277)(uint64_t, uint64_t, _BYTE *, _QWORD);
  const __CFArray *v278;
  const __CFArray *v279;
  uint64_t v280;
  void (*v281)(uint64_t, const __CFString *, const __CFAllocator *, _BYTE *);
  uint64_t v282;
  CFIndex v283;
  CFIndex v284;
  CFIndex jj;
  const void *v286;
  CFIndex v287;
  CFIndex v288;
  CFIndex kk;
  const void *v290;
  const __CFArray *v291;
  CFIndex v292;
  uint64_t v293;
  uint64_t v294;
  CFIndex v295;
  CFIndex v296;
  CFIndex v297;
  const __CFAllocator *v298;
  unsigned int *v299;
  unsigned int *v300;
  uint64_t v301;
  const __CFAllocator *v302;
  OpaqueCMTagCollection *v303;
  uint64_t v304;
  CMTagValue v305;
  CMTagValue v306;
  int v307;
  uint64_t v308;
  CMTagValue v309;
  CMTagValue v310;
  uint64_t v311;
  CMTagValue v312;
  CMTagValue v313;
  CMTagValue v314;
  CMTagValue v315;
  CMTagValue v316;
  CMTagValue v317;
  CMTagValue v318;
  CMTagValue v319;
  CMTagValue v320;
  CMTagValue v321;
  CMTagValue v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t (*v325)(uint64_t, uint64_t, _BYTE *, _QWORD);
  const opaqueCMFormatDescription *v326;
  OpaqueCMTagCollection *v327;
  uint64_t v328;
  CMTagValue v329;
  CMTagValue v330;
  int v331;
  BOOL v332;
  CMVideoDimensions Dimensions;
  __CFDictionary *v334;
  __CFDictionary *v335;
  OSStatus v336;
  const void *v337;
  uint64_t v338;
  CMTimeValue v339;
  CMTimeValue v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  void (*v345)(uint64_t, const __CFString *, uint64_t, CMTimeRange *);
  uint64_t v346;
  void (*v347)(uint64_t, const __CFString *, uint64_t, _BYTE *);
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  const void *v353;
  const __CFArray *v354;
  __CFArray *v355;
  __CFArray *v356;
  __CFArray *v357;
  __CFArray *v358;
  __CFArray *v359;
  CFMutableArrayRef v360;
  const __CFArray *v361;
  CFIndex v362;
  CFIndex v363;
  CFIndex v364;
  const __CFAllocator *v365;
  const CFArrayCallBacks *v366;
  const void *v367;
  __CFArray *v368;
  CFMutableArrayRef v369;
  __CFArray *v370;
  CFMutableArrayRef v371;
  CFIndex v372;
  const __CFAllocator *v373;
  void *v374;
  uint64_t (*v375)(void *, const __CFAllocator *, CFArrayRef *);
  CFIndex v376;
  BOOL v377;
  const void *v378;
  uint64_t v379;
  CFIndex CountOfDataChannels;
  CFIndex v381;
  const __CFArray *v382;
  CFIndex v383;
  CFIndex v384;
  __CFDictionary *v385;
  CFIndex v386;
  const OpaqueCMTagCollection *DataChannelByIndex;
  CFIndex v388;
  int v389;
  _QWORD *v390;
  const void *UInt32;
  uint64_t v392;
  const void *v393;
  CFIndex v394;
  CFIndex v395;
  CFIndex v396;
  CFMutableArrayRef v397;
  int v398;
  int v399;
  const __CFArray *v400;
  CFIndex v401;
  int v402;
  const void *v403;
  int SInt32;
  const __CFArray *v405;
  const __CFArray *v406;
  CFIndex v407;
  CFIndex v408;
  int v409;
  uint64_t v410;
  int *v411;
  int v412;
  char v413;
  const __CFArray *v414;
  int v415;
  CFIndex v416;
  CFIndex v417;
  uint64_t v418;
  int v419;
  const __CFArray *v420;
  const void *v421;
  NSObject *v422;
  unsigned int v423;
  unsigned int v424;
  const __CFArray *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t (*v430)(const __CFArray *, uint64_t, uint64_t, uint64_t, CMTimeRange *);
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  const __CFArray *v434;
  CFIndex v435;
  CFIndex v436;
  CFIndex v437;
  const void *v438;
  CMTimeValue v439;
  uint64_t (*v440)(const void *, _QWORD, CMTimeValue, _BYTE *);
  uint64_t v441;
  uint64_t v442;
  void (*v443)(uint64_t, uint64_t);
  const __CFArray *v444;
  CFIndex v445;
  CFIndex v446;
  char *v447;
  const __CFAllocator *v448;
  uint64_t v449;
  unsigned int *v450;
  const __CFArray *v451;
  unsigned int v452;
  BOOL v453;
  CMTimeValue v454;
  const void *v455;
  const __CFArray *v456;
  CFIndex v457;
  CFIndex v458;
  CFIndex mm;
  const void *v460;
  void (*v461)(const void *, const __CFAllocator *, CMTime *);
  CFIndex v462;
  CFIndex v463;
  CFIndex v464;
  const __CFDictionary *v465;
  const OpaqueCMTagCollection *v466;
  const __CFDictionary *v467;
  const void *v468;
  const void *v469;
  uint64_t v470;
  const void *v471;
  const __CFDictionary *v472;
  const void *v473;
  CFMutableDictionaryRef v474;
  int v475;
  CMTimeEpoch v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int v479;
  int v480;
  const __CFArray *v481;
  const __CFDictionary *v482;
  uint64_t v483;
  CFMutableArrayRef v484;
  __CFArray *v485;
  CFIndex v486;
  const void *v487;
  const void *v488;
  uint64_t (*v489)(const void *, _QWORD, CMTimeRange *, _BYTE *, os_log_type_t *);
  uint64_t v490;
  uint64_t v491;
  void (*v492)(uint64_t, const __CFString *, uint64_t);
  uint64_t v493;
  uint64_t (*v494)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v495;
  const void *v496;
  uint64_t v497;
  uint64_t (*v498)(uint64_t, const __CFString *, __CFArray *);
  uint64_t v499;
  __CFArray *v500;
  CFTypeRef v501;
  unsigned int *v502;
  const void *v503;
  __CFArray *v504;
  const __CFArray *v505;
  uint64_t v506;
  uint64_t v507;
  CMTimeEpoch v508;
  unsigned int v509;
  uint64_t v510;
  const __CFArray *v511;
  const __CFArray *v512;
  const CFArrayCallBacks *v513;
  CFMutableArrayRef v514;
  CFIndex nn;
  const __CFArray *v516;
  const void *v517;
  uint64_t matched;
  uint64_t v519;
  const __CFArray *v520;
  CFMutableDictionaryRef v521;
  CFMutableDictionaryRef v522;
  unint64_t v523;
  const void *v524;
  uint64_t FigImageQueueArrayForVideoRenderPipeline;
  uint64_t v526;
  CFTypeRef v527;
  CFIndex v528;
  unsigned int *v529;
  const __CFArray *v530;
  const void *v531;
  int v532;
  uint64_t v533;
  void (*v534)(uint64_t, const __CFString *, void *);
  void *v535;
  uint64_t v536;
  uint64_t v537;
  void (*v538)(uint64_t, const __CFString *, uint64_t);
  uint64_t v539;
  void (*v540)(uint64_t, const __CFString *, void *);
  int v541;
  uint64_t v542;
  void (*v543)(uint64_t, const __CFString *, void *);
  void *v544;
  uint64_t v545;
  uint64_t v546;
  const __CFAllocator *v547;
  CFMutableArrayRef v548;
  CFIndex v549;
  uint64_t v550;
  const void *v551;
  const __CFArray *v552;
  CFIndex v553;
  CFIndex v554;
  CFIndex v555;
  const void *v556;
  unsigned int v557;
  int v558;
  const void *v559;
  uint64_t v560;
  const void *v561;
  uint64_t v562;
  __CFArray *v563;
  const void *v564;
  const __CFDictionary *v565;
  uint64_t v566;
  const __CFArray *v567;
  CFIndex v568;
  CFIndex i1;
  _QWORD *v570;
  _QWORD *v571;
  const void *v572;
  int v573;
  BOOL v574;
  const void *v575;
  const void *v576;
  const __CFArray *v577;
  CFIndex v578;
  CFIndex v579;
  CFIndex i2;
  _QWORD *v581;
  const void *v582;
  uint64_t v583;
  size_t v584;
  CFIndex v585;
  unint64_t v586;
  const __CFArray *v587;
  CFIndex v588;
  CFIndex v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t (*v592)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  int v593;
  BOOL v594;
  uint64_t i3;
  const __CFArray *v597;
  CFIndex v598;
  CFIndex i4;
  uint64_t v600;
  CMTimeValue v601;
  uint64_t v602;
  void (*v603)(uint64_t, const __CFString *, CMTimeValue);
  uint64_t v604;
  uint64_t v605;
  const __CFArray *v606;
  CFIndex v607;
  CFIndex v608;
  CFIndex i5;
  _QWORD *v610;
  _QWORD *v611;
  CFIndex v612;
  const __CFArray **v613;
  CFArrayRef *v614;
  CFTypeRef v615;
  CFTypeRef v616;
  const __CFArray *v617;
  CFIndex v618;
  CFIndex v619;
  CFIndex i6;
  _QWORD *v621;
  _QWORD *v622;
  CFTypeRef v623;
  const void *v624;
  const __CFArray *v625;
  int v626;
  uint64_t *v628;
  const void **v629;
  uint64_t v630;
  uint64_t v631;
  int IsMemberOfClass;
  const void *v633;
  uint64_t v634;
  void (*v635)(uint64_t, _QWORD, const void *);
  uint64_t v636;
  uint64_t v637;
  char v638;
  uint64_t v639;
  uint64_t v640;
  _BOOL4 v641;
  uint64_t v642;
  void (*v643)(uint64_t, _QWORD, _QWORD, _BYTE *);
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unsigned int (*v647)(uint64_t, _QWORD, _QWORD, CMTimeRange *);
  _OWORD *v649;
  uint64_t v650;
  __int128 v651;
  CFStringRef v652;
  CFStringRef v653;
  uint64_t v654;
  uint64_t v655;
  const void *v656;
  CFNumberRef v657;
  uint64_t v658;
  uint64_t v659;
  void *Timebase;
  uint64_t v661;
  __int128 v662;
  uint64_t v663;
  int v664;
  NSObject *v665;
  unsigned int v666;
  unsigned int v667;
  const char *v668;
  const char *v669;
  Float64 Seconds;
  Float64 v671;
  Float64 v672;
  uint64_t v673;
  const void *v674;
  int v675;
  unsigned int v676;
  float v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  float v682;
  float v683;
  float v684;
  float v685;
  float v686;
  char v687;
  char v688;
  uint64_t v689;
  CFIndex v690;
  CFIndex v691;
  __CFString *v692;
  CFIndex v693;
  const void *v694;
  __CFString *v695;
  const __CFString *v696;
  BOOL v697;
  uint64_t *v700;
  uint64_t v701;
  uint64_t v702;
  NSObject *v703;
  unsigned int v704;
  unsigned int v705;
  uint64_t v706;
  uint64_t v707;
  const void *v708;
  uint64_t v709;
  _QWORD *v710;
  uint64_t v711;
  __int128 v712;
  uint64_t *v713;
  _QWORD *v714;
  uint64_t v715;
  const void *v716;
  uint64_t DefaultLocalCenter;
  const void *v718;
  const void *v719;
  const void *v720;
  uint64_t v721;
  uint64_t *v722;
  const void *v723;
  CFTypeRef *v724;
  uint64_t v725;
  const __CFDictionary *v726;
  _BOOL4 v727;
  const __CFString *v728;
  const __CFString *v729;
  CFURLRef v730;
  CFURLRef v731;
  uint64_t v732;
  uint64_t v733;
  __CFDictionary *v734;
  __CFDictionary *v735;
  const void *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t (*v739)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  int v740;
  int v741;
  const void *v742;
  int v743;
  uint64_t v744;
  const void *v745;
  __CFDictionary *v746;
  __CFDictionary *v747;
  const void *v748;
  const void *v749;
  uint64_t v750;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v752;
  int v753;
  const void *v754;
  NSObject *v755;
  unsigned int v756;
  unsigned int v757;
  const char *v758;
  int v759;
  NSObject *v760;
  unsigned int v761;
  unsigned int v762;
  const char *v763;
  NSObject *v764;
  unsigned int v765;
  unsigned int v766;
  const char *v767;
  NSObject *v768;
  unsigned int v769;
  unsigned int v770;
  const char *v771;
  const __CFString *v772;
  uint64_t v773;
  CFIndex v774;
  CFIndex v775;
  CFIndex v776;
  _DWORD *v777;
  const void *v780;
  const void *v781;
  uint64_t v782;
  const void *v783;
  const void *v784;
  uint64_t v785;
  char v786;
  uint64_t AudioRenderPipelineOptionsForTrack;
  CMTimeValue v788;
  NSObject *v789;
  unsigned int v790;
  unsigned int v791;
  const char *v792;
  CFTypeRef v793;
  const void *v794;
  const void *v795;
  float v796;
  CFTypeRef v797;
  CFNumberRef v798;
  const void *v799;
  const void *v800;
  NSObject *v801;
  unsigned int v802;
  unsigned int v803;
  const char *v804;
  NSObject *v805;
  unsigned int v806;
  unsigned int v807;
  const char *v808;
  uint64_t v809;
  int v810;
  NSObject *v811;
  unsigned int v812;
  unsigned int v813;
  const char *v814;
  uint64_t i7;
  const void *v816;
  __CFDictionary *v817;
  __CFDictionary *v818;
  const void **v819;
  uint64_t v821;
  uint64_t v822;
  unsigned int v823;
  void *v824;
  CFIndex v825;
  int v826;
  void *key;
  unsigned __int8 *keya;
  CFArrayRef v829;
  const __CFArray *v830;
  void *v833;
  uint64_t v834;
  CFIndex v835;
  uint64_t v836;
  const void *v837;
  CFTypeRef v838;
  void *v839;
  void *v840;
  void *v841;
  int v842;
  int v843;
  int v844;
  uint64_t v845;
  CFIndex v846;
  uint64_t v847;
  int isTrackAtmos;
  CMTagValue v849;
  const void *v850;
  uint64_t v851;
  uint64_t v852;
  int isTrackEnhancedAC3;
  uint64_t v854;
  CFIndex v855;
  int v856;
  CFIndex v857;
  uint64_t v858;
  uint64_t v859;
  BOOL v860;
  const char *v861;
  uint64_t v862;
  int v863;
  CFIndex v864;
  void *v865;
  const char *v866;
  CFMutableArrayRef v867;
  uint64_t v868;
  CFMutableArrayRef v869;
  __CFArray *v870;
  CFIndex v871;
  uint64_t *v872;
  const void *v873;
  int *v874;
  uint64_t v875;
  int v876;
  CFIndex v877;
  uint64_t v878;
  int tag;
  uint64_t taga;
  __int128 tagb;
  uint64_t tagc;
  __int128 tagd;
  const __CFAllocator *tage;
  const __CFAllocator *allocator;
  uint64_t allocatora;
  uint64_t allocatorb;
  _BOOL4 allocatorc;
  CFAllocatorRef allocatord[2];
  CFAllocatorRef allocatore[2];
  __CFDictionary *allocatorf;
  __CFDictionary *allocatorg;
  int v893;
  _QWORD *v894;
  void *v895;
  void *v896;
  void *v897;
  uint64_t v898;
  int v899;
  char *v900;
  void *v901;
  char v902;
  __CFArray *theArray;
  const __CFAllocator *theArraya;
  int *theArrayb;
  uint64_t theArrayc;
  CFMutableArrayRef theArrayd;
  __CFArray *theArraye;
  uint64_t v909;
  const void **v910;
  __CFArray *v911;
  CFMutableArrayRef v912[2];
  uint64_t v913;
  uint64_t v914;
  const __CFAllocator *v915;
  CFIndex v916;
  uint64_t v917;
  CMTimeRange v918;
  CFTypeRef v919;
  unsigned int *v920;
  int v921;
  CFTypeRef v922;
  CFArrayRef v923;
  CMTime type;
  CMTime valuePtr;
  CMTime v926;
  CMTime cf;
  CFTypeRef v928;
  os_log_type_t v929[8];
  _BYTE context[42];
  _BYTE v931[10];
  __int16 v932;
  Float64 v933;
  __int16 v934;
  int v935;
  __int16 v936;
  Float64 v937;
  __int16 v938;
  Float64 v939;
  __int128 v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  __int128 v944;
  __int128 v945;
  __int128 v946;
  _BYTE value[32];
  _QWORD v948[2];
  CMTimeRange formatDescriptionOut[2];
  uint64_t v950;
  CMTag v951;
  CMTag v952;
  CMTag v953;
  CMTag v954;
  CMTag v955;
  CMTag v956;
  CMTag v957;
  CFRange v958;
  CGSize v959;

  v950 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v837 = *(const void **)(DerivedStorage + 8);
  v852 = CMBaseObjectGetDerivedStorage();
  v919 = 0;
  v917 = DerivedStorage;
  v826 = *(unsigned __int8 *)(DerivedStorage + 2017);
  v945 = 0u;
  v946 = 0u;
  v943 = 0u;
  v944 = 0u;
  v941 = 0u;
  v942 = 0u;
  v940 = 0u;
  v843 = a7;
  v838 = a6;
  v833 = (void *)MEMORY[0x19403137C]();
  if (!a6 && !a7)
  {
    v13 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&v919);
    if ((_DWORD)v13)
    {
LABEL_1529:
      OctaviaSubtitleRenderPipeline = v13;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v894 = 0;
      v910 = 0;
      free(0);
      goto LABEL_1664;
    }
    v838 = v919;
    goto LABEL_8;
  }
  if (!a7)
  {
LABEL_8:
    MEMORY[0x19402EEEC](*(_QWORD *)(v852 + 872));
    v15 = v852;
    v16 = *(const void **)(v852 + 888);
    if (v16)
    {
      CFRelease(v16);
      v15 = v852;
      *(_QWORD *)(v852 + 888) = 0;
    }
    v842 = 1;
    *(_BYTE *)(v15 + 896) = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(v15 + 872));
    v14 = v852;
    goto LABEL_11;
  }
  v14 = v852;
  if (!*(_QWORD *)(DerivedStorage + 352))
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v894 = 0;
    v910 = 0;
    OctaviaSubtitleRenderPipeline = 4294954433;
    free(0);
    goto LABEL_1664;
  }
  v842 = 0;
LABEL_11:
  v17 = *(const __CFArray **)(v14 + 504);
  tag = v17 && CFArrayGetCount(v17) && CFArrayGetValueAtIndex(*(CFArrayRef *)(v852 + 504), 0) == a1;
  v13 = itemfig_assureBasicsReadyForInspection(a1);
  if ((_DWORD)v13)
    goto LABEL_1529;
  if (!*(_QWORD *)(DerivedStorage + 352))
  {
    PlayableDurationAtCurrentTime = itemfig_getPlayableDurationAtCurrentTime((uint64_t)a1);
    itemfig_monitorPlayability(a1);
    *(double *)(DerivedStorage + 1648) = PlayableDurationAtCurrentTime;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1896));
    v19 = *(_QWORD *)(DerivedStorage + 1904);
    if (v19)
    {
      v20 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v20)
        v20(v19, CFSTR("playerStats"), CFSTR("IDAva"), (uint64_t)(PlayableDurationAtCurrentTime * 1000.0), 0);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v917 + 1896));
  }
  v13 = itemfig_ensureTrackStorageArray();
  if ((_DWORD)v13)
    goto LABEL_1529;
  if (!a7 && *(_BYTE *)(v917 + 1697))
    itemfig_accumulateFrameDropCountFromAllVideoPipelines((uint64_t)a1);
  v893 = a4;
  v21 = CMBaseObjectGetDerivedStorage();
  v22 = *(_QWORD *)(v21 + 8);
  v23 = CMBaseObjectGetDerivedStorage();
  cf.value = 0;
  v926.value = 0;
  v948[0] = 0;
  memset(value, 0, sizeof(value));
  v24 = *(unsigned __int8 *)(v23 + 1105);
  MEMORY[0x19402EEEC](*(_QWORD *)(v23 + 456));
  v25 = *(const void **)(v23 + 464);
  if (v25)
    v26 = (uint64_t)CFRetain(v25);
  else
    v26 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(v23 + 456));
  IsAnAudioDeviceAvailable = FPSupport_IsAnAudioDeviceAvailable(v26);
  *(_BYTE *)(v23 + 1106) = IsAnAudioDeviceAvailable;
  v873 = a1;
  if (!IsAnAudioDeviceAvailable)
  {
    if (!dword_1EE2A2AC8)
      goto LABEL_87;
    LODWORD(valuePtr.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v36 = valuePtr.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
      v37 = v36;
    else
      v37 = v36 & 0xFFFFFFFE;
    if (!v37)
    {
LABEL_112:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v59 = 0;
      v60 = 0;
      OctaviaSubtitleRenderPipeline = 0;
      v66 = 2;
      if (!v26)
        goto LABEL_293;
      goto LABEL_292;
    }
    if (v22)
    {
      v38 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
      if (a1)
      {
LABEL_48:
        v39 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
LABEL_111:
        *(_DWORD *)context = 136316162;
        *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
        *(_WORD *)&context[12] = 2048;
        *(_QWORD *)&context[14] = v22;
        *(_WORD *)&context[22] = 2082;
        *(_QWORD *)&context[24] = v38;
        *(_WORD *)&context[32] = 2048;
        *(_QWORD *)&context[34] = a1;
        *(_WORD *)v931 = 2082;
        *(_QWORD *)&v931[2] = v39;
        _os_log_send_and_compose_impl();
        goto LABEL_112;
      }
    }
    else
    {
      v38 = "";
      if (a1)
        goto LABEL_48;
    }
    v39 = "";
    goto LABEL_111;
  }
  if (*(double *)(v21 + 1968) == 0.0)
    *(CFAbsoluteTime *)(v21 + 1968) = CFAbsoluteTimeGetCurrent();
  v909 = v22;
  if (!*(_BYTE *)(v23 + 120) || (Count = CFArrayGetCount(*(CFArrayRef *)(v21 + 648)), Count < 1))
  {
    v33 = 0;
    v34 = 1;
    goto LABEL_52;
  }
  v29 = Count;
  v30 = 0;
  v31 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v21 + 648), v31);
    if (ValueAtIndex[1] != 1936684398 || !*((_BYTE *)ValueAtIndex + 8))
      goto LABEL_38;
    if (v30 >= 1)
      break;
    ++v30;
LABEL_38:
    if (v29 == ++v31)
    {
      v33 = 0;
      v34 = 1;
      goto LABEL_52;
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v33 = 1;
  FigDispatchAsyncPostNotification();
  v34 = 0;
LABEL_52:
  if (v26)
    v44 = 0;
  else
    v44 = v24 == 0;
  if (v44)
    v24 = 1;
  if ((v842 & 1) == 0)
  {
    if (!v24)
    {
      if (!v34 || *(_QWORD *)(v23 + 632))
      {
        v59 = 0;
        v60 = 0;
        OctaviaSubtitleRenderPipeline = 4294954433;
        goto LABEL_99;
      }
      v75 = *(unsigned int *)(v21 + 996);
      if ((_DWORD)v75)
      {
        if (!itemfig_canTrackPassthrough((uint64_t)a1, v75))
          goto LABEL_193;
        if (itemfig_isTrackAtmos((uint64_t)a1, *(unsigned int *)(v21 + 996)))
          itemfig_isEC3PassthroughSupported();
        if (itemfig_isTrackEnhancedAC3((uint64_t)a1, *(unsigned int *)(v21 + 996)))
          itemfig_isEC3PassthroughSupported();
        if (itemfig_isTrackAC3((uint64_t)a1, *(unsigned int *)(v21 + 996)))
        {
          isAC3PassthroughSupported = itemfig_isAC3PassthroughSupported();
          v77 = isAC3PassthroughSupported != 0;
          if (isAC3PassthroughSupported)
            v78 = 1633889587;
          else
            v78 = 0;
        }
        else
        {
LABEL_193:
          v78 = 0;
          v77 = 0;
        }
        if (v26)
        {
          LODWORD(valuePtr.value) = 2;
          formatDescriptionOut[0].start.value = 0;
          v107 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v107)
          {
            v108 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CMTimeRange *))(v107 + 48);
            if (v108)
            {
              v109 = v26;
              v26 = v108(v26, *MEMORY[0x1E0D49988], *MEMORY[0x1E0C9AE00], formatDescriptionOut);
              if (!(_DWORD)v26 && formatDescriptionOut[0].start.value)
              {
                TrackAudioChannelCount = itemfig_getTrackAudioChannelCount((uint64_t)a1, *(unsigned int *)(v21 + 996));
                CFNumberGetValue((CFNumberRef)formatDescriptionOut[0].start.value, kCFNumberSInt32Type, &valuePtr);
                v111 = valuePtr.value;
                if (SLODWORD(valuePtr.value) < 3)
                  goto LABEL_204;
                if (TrackAudioChannelCount < SLODWORD(valuePtr.value))
                  v111 = TrackAudioChannelCount;
                v112 = *(_DWORD *)(v23 + 928);
                if (v111 > 2 || v112 >= 3)
                {
                  if (v112 == v111)
                    v26 = 0;
                  else
                    v26 = 4294954433;
                }
                else
                {
LABEL_204:
                  v26 = 0;
                }
              }
            }
            else
            {
              v109 = v26;
              v26 = 4294948071;
            }
          }
          else
          {
            v109 = v26;
            v26 = 4294948075;
          }
          if (itemfig_isTrackDecodable((uint64_t)a1, *(unsigned int *)(v21 + 996)))
          {
            *(_DWORD *)context = 0;
            if (!itemfig_getMaximumNumberOfSpatializedOutputChannels((uint64_t)a1, (int *)context)
              && *(_DWORD *)context >= 3)
            {
              v78 = 0;
              v77 = 0;
            }
          }
          if (formatDescriptionOut[0].start.value)
            CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
        }
        else
        {
          v109 = 0;
        }
        if (*(unsigned __int8 *)(v23 + 920) == v77 && *(_DWORD *)(v23 + 924) == v78)
        {
          v59 = 0;
          v60 = 0;
          v66 = 2;
          OctaviaSubtitleRenderPipeline = v26;
        }
        else
        {
          v59 = 0;
          v60 = 0;
          OctaviaSubtitleRenderPipeline = 4294954433;
          v66 = 2;
        }
        v26 = v109;
        if (!v109)
          goto LABEL_293;
LABEL_292:
        CFRelease((CFTypeRef)v26);
        goto LABEL_293;
      }
    }
LABEL_87:
    v59 = 0;
    v60 = 0;
    OctaviaSubtitleRenderPipeline = 0;
    goto LABEL_99;
  }
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kRenderTripleArrayCallbacks);
  if (!theArray)
  {
    OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
    v59 = 0;
    v60 = 0;
LABEL_99:
    v66 = 2;
    if (!v26)
      goto LABEL_293;
    goto LABEL_292;
  }
  if (!*(_QWORD *)(v21 + 920) && !*(_QWORD *)(v21 + 928))
  {
    v72 = *(_QWORD *)(v21 + 1216);
    if (v72)
    {
      CMBaseObject = FigAssetGetCMBaseObject(v72);
      v74 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
      if (v74)
        v74(CMBaseObject, CFSTR("iTunesGaplessInfo"), allocator, v21 + 928);
    }
  }
  v45 = *(const __CFArray **)(v23 + 632);
  if (v45)
  {
    if (CFArrayGetCount(v45) >= 1)
    {
      do
      {
        v46 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v23 + 632), 0);
        playerfig_removeAudioRenderPipelineListeners(v22, (uint64_t)v46);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v23 + 632), 0);
      }
      while (CFArrayGetCount(*(CFArrayRef *)(v23 + 632)) > 0);
    }
    v47 = *(const void **)(v23 + 632);
    if (v47)
    {
      CFRelease(v47);
      *(_QWORD *)(v23 + 632) = 0;
    }
  }
  *(_BYTE *)(v21 + 1826) = 1;
  if (v24)
    v48 = 1;
  else
    v48 = v34;
  if ((v48 & 1) == 0)
  {
    v61 = *(_QWORD *)(v23 + 560);
    if (v61)
    {
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(valuePtr.value) = 0;
        LOBYTE(type.value) = 0;
        v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v63 = valuePtr.value;
        if (os_log_type_enabled(v62, type.value))
          v64 = v63;
        else
          v64 = v63 & 0xFFFFFFFE;
        if (v64)
        {
          if (a1)
            v65 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          else
            v65 = "";
          *(_DWORD *)context = 136315650;
          *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&context[12] = 2048;
          *(_QWORD *)&context[14] = a1;
          *(_WORD *)&context[22] = 2082;
          *(_QWORD *)&context[24] = v65;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v61 = *(_QWORD *)(v23 + 560);
      }
      playerfig_removeAudioRenderPipelineListeners(v22, v61);
      v84 = *(const void **)(v23 + 560);
      if (v84)
      {
        CFRelease(v84);
        *(_QWORD *)(v23 + 560) = 0;
      }
      v85 = *(const void **)(v23 + 656);
      if (v85)
      {
        CFRelease(v85);
        *(_QWORD *)(v23 + 656) = 0;
      }
      v86 = *(const void **)(v23 + 600);
      if (v86)
      {
        CFRelease(v86);
        *(_QWORD *)(v23 + 600) = 0;
      }
      v87 = *(const void **)(v23 + 608);
      if (v87)
      {
        CFRelease(v87);
        *(_QWORD *)(v23 + 608) = 0;
      }
      v88 = *(const void **)(v23 + 616);
      if (v88)
      {
        CFRelease(v88);
        *(_QWORD *)(v23 + 616) = 0;
      }
    }
    v858 = v26;
    v874 = a5;
    FPSupport_ReleasePassthroughHelper();
    *(_QWORD *)(v23 + 912) = 0;
    *(_QWORD *)(v23 + 632) = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    v89 = CFArrayGetCount(*(CFArrayRef *)(v21 + 648));
    if (v89 < 1)
    {
      v60 = 0;
      v66 = 2;
    }
    else
    {
      v90 = v89;
      v60 = 0;
      v91 = 0;
      v66 = 2;
      do
      {
        v92 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v21 + 648), v91);
        if (v92[1] == 1936684398)
        {
          v93 = v92;
          if (*((_BYTE *)v92 + 8))
          {
            shouldEnableSpatializationForTrack = itemfig_shouldEnableSpatializationForTrack((uint64_t)a1, *v92);
            v96 = v93 + 2;
            v95 = (const void *)v93[2];
            if (v95)
            {
              CFRelease(v95);
              *v96 = 0;
            }
            if (!fp_buildAudioRenderPipelineForTrack(v909, (uint64_t)a1, *(unsigned int *)v93, 0, 0, shouldEnableSpatializationForTrack, v93 + 2))
            {
              CFArrayAppendValue(*(CFMutableArrayRef *)(v23 + 632), (const void *)v93[2]);
              *(_DWORD *)value = *(_DWORD *)v93;
              *(_QWORD *)&value[8] = 0;
              *(_QWORD *)&value[24] = CFRetain((CFTypeRef)v93[2]);
              v948[0] = 0;
              itemfig_updateVolumeOffset((uint64_t)a1);
              itemfig_applyLoudnessInfo(a1, *(unsigned int *)v93, 0, 0);
              itemfig_applyAudioProcessingUnitsToTrack(v21, (uint64_t)v93);
              if (!itemfig_applyTrackAudioCurvesToTrack((uint64_t)v93))
                itemfig_applyItemAudioCurvesToTrack(v21, (uint64_t)v93);
              itemfig_applyAdjustTargetLevel((uint64_t)a1);
              itemfig_applyAdjustCompressionProfile((uint64_t)a1);
              v97 = CFNumberCreate(allocator, kCFNumberSInt32Type, v93);
              FigBaseObject = FigRenderPipelineGetFigBaseObject(v93[2]);
              v99 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
              if (v99)
                v99(FigBaseObject, CFSTR("TrackID"), v97);
              if (v97)
                CFRelease(v97);
              v100 = v93[11];
              if (!v100)
                v100 = *(_QWORD *)(v21 + 1432);
              v101 = FigRenderPipelineGetFigBaseObject(*v96);
              v102 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
              if (v102)
                v102(v101, CFSTR("AudioProcessingTap"), v100);
              itemfig_applyTimePitchAlgorithmToTrack((uint64_t)a1, (uint64_t)v93);
              v60 = 1;
              fp_createAudioRenderPipelineOptionsForTrack(a1, *(unsigned int *)v93, 1, v948);
              CFArrayAppendValue(theArray, value);
              itemfig_resetRenderTriple((uint64_t)value);
              v66 = 0;
            }
          }
        }
        ++v91;
      }
      while (v90 != v91);
    }
    playerfig_applyEQPreset(v909);
    playerfig_applySoftwareVolume(v909, CFSTR("SoftwareVolume1"), 0, *(float *)(v23 + 764), 0.0);
    if (*(_BYTE *)(v23 + 772))
      playerfig_applySoftwareVolume(v909, CFSTR("SoftwareVolume2"), 1, *(float *)(v23 + 768), 0.0);
    v103 = 1.0;
    if (*(_BYTE *)(v23 + 773))
      v103 = 0.0;
    playerfig_applySoftwareVolume(v909, CFSTR("SoftwareVolume5"), 1, v103, 0.0);
    a5 = v874;
    v26 = v858;
    v59 = theArray;
LABEL_287:
    if (tag)
    {
      if (*(_DWORD *)(v23 + 60) == 2)
      {
        playerfig_UpdateAudioSessionPreferredDeviceFormat();
        playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
        v59 = theArray;
        playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels(v909);
      }
      itemfig_InformStakeholdersOfBestAvailableAudioContentType((uint64_t)a1);
    }
    OctaviaSubtitleRenderPipeline = 0;
    if (!v26)
      goto LABEL_293;
    goto LABEL_292;
  }
  v867 = (CFMutableArrayRef)(v21 + 996);
  v49 = *(unsigned int *)(v21 + 996);
  if (!(_DWORD)v49 || v24)
  {
    v67 = *(_QWORD *)(v23 + 560);
    v59 = theArray;
    if (v67)
    {
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(valuePtr.value) = 0;
        LOBYTE(type.value) = 0;
        v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v69 = valuePtr.value;
        if (os_log_type_enabled(v68, type.value))
          v70 = v69;
        else
          v70 = v69 & 0xFFFFFFFE;
        if (v70)
        {
          if (a1)
            v71 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          else
            v71 = "";
          *(_DWORD *)context = 136315650;
          *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&context[12] = 2048;
          *(_QWORD *)&context[14] = a1;
          *(_WORD *)&context[22] = 2082;
          *(_QWORD *)&context[24] = v71;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v67 = *(_QWORD *)(v23 + 560);
        v59 = theArray;
      }
      playerfig_removeAudioRenderPipelineListeners(v22, v67);
      v132 = *(const void **)(v23 + 560);
      if (v132)
      {
        CFRelease(v132);
        *(_QWORD *)(v23 + 560) = 0;
      }
      v133 = *(const void **)(v23 + 656);
      if (v133)
      {
        CFRelease(v133);
        *(_QWORD *)(v23 + 656) = 0;
      }
    }
    if (*(_BYTE *)(v23 + 1105) && ((*(_DWORD *)v867 == 0) & ~v33) == 0)
    {
      if (dword_1EE2A2AC8)
      {
        LODWORD(valuePtr.value) = 0;
        LOBYTE(type.value) = 0;
        v134 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v135 = valuePtr.value;
        if (os_log_type_enabled(v134, type.value))
          v136 = v135;
        else
          v136 = v135 & 0xFFFFFFFE;
        if (v136)
        {
          if (a1)
            v137 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          else
            v137 = "";
          *(_DWORD *)context = 136315650;
          *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&context[12] = 2048;
          *(_QWORD *)&context[14] = a1;
          *(_WORD *)&context[22] = 2082;
          *(_QWORD *)&context[24] = v137;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v59 = theArray;
      }
      playerfig_removeAudioRenderPipelineListeners(v22, *(_QWORD *)(v23 + 560));
    }
    goto LABEL_286;
  }
  valuePtr.value = 0;
  isTrackAC3 = itemfig_isTrackAC3((uint64_t)a1, v49);
  v51 = (int *)(v21 + 996);
  isTrackEnhancedAC3 = itemfig_isTrackEnhancedAC3((uint64_t)a1, *(unsigned int *)v867);
  isTrackAtmos = itemfig_isTrackAtmos((uint64_t)a1, *(unsigned int *)v867);
  canTrackPassthrough = itemfig_canTrackPassthrough((uint64_t)a1, *(unsigned int *)v867);
  isTrackDecodable = itemfig_isTrackDecodable((uint64_t)a1, *(unsigned int *)v867);
  LODWORD(formatDescriptionOut[0].start.value) = 0;
  MaximumNumberOfSpatializedOutputChannels = itemfig_getMaximumNumberOfSpatializedOutputChannels((uint64_t)a1, (int *)formatDescriptionOut);
  if (!v26)
    goto LABEL_117;
  v55 = 0;
  v57 = SLODWORD(formatDescriptionOut[0].start.value) < 3
     || MaximumNumberOfSpatializedOutputChannels != 0
     || !isTrackDecodable;
  if (v57 && isTrackAC3)
  {
    v58 = 0;
    if (!canTrackPassthrough)
      goto LABEL_130;
    if (itemfig_isAC3PassthroughSupported())
    {
      v58 = 1;
      v55 = 1633889587;
      goto LABEL_130;
    }
LABEL_117:
    v55 = 0;
    v58 = 0;
  }
  else
  {
    v58 = 0;
  }
LABEL_130:
  v844 = v55;
  v863 = v58;
  if (dword_1EE2A2AC8 <= 1)
  {
    if (isTrackDecodable)
      v83 = 1;
    else
      v83 = v58;
    goto LABEL_206;
  }
  LODWORD(type.value) = 0;
  v929[0] = OS_LOG_TYPE_DEFAULT;
  v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v80 = type.value;
  if (os_log_type_enabled(v79, v929[0]))
    v81 = v80;
  else
    v81 = v80 & 0xFFFFFFFE;
  if (v81)
  {
    if (a1)
      v82 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    else
      v82 = "";
    *(_DWORD *)context = 136316418;
    *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
    *(_WORD *)&context[12] = 2082;
    *(_QWORD *)&context[14] = v82;
    *(_WORD *)&context[22] = 1024;
    *(_DWORD *)&context[24] = isTrackDecodable;
    *(_WORD *)&context[28] = 1024;
    *(_DWORD *)&context[30] = isTrackAC3;
    *(_WORD *)&context[34] = 1024;
    *(_DWORD *)&context[36] = isTrackEnhancedAC3;
    *(_WORD *)&context[40] = 1024;
    *(_DWORD *)v931 = isTrackAtmos;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (isTrackDecodable)
    v83 = 1;
  else
    v83 = v863;
  v51 = (int *)(v21 + 996);
  if ((v83 & 1) != 0)
  {
LABEL_206:
    v59 = theArray;
  }
  else
  {
    v59 = theArray;
    if (dword_1EE2A2AC8 >= 2)
    {
      LODWORD(type.value) = 0;
      v929[0] = OS_LOG_TYPE_DEFAULT;
      v104 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v105 = type.value;
      if (os_log_type_enabled(v104, v929[0]))
        v106 = v105;
      else
        v106 = v105 & 0xFFFFFFFE;
      if (v106)
      {
        *(_DWORD *)context = 136315138;
        *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v83 = 0;
      goto LABEL_206;
    }
  }
  TrackStorage = itemfig_getTrackStorage((uint64_t)a1, *v51, &valuePtr);
  if ((_DWORD)TrackStorage)
  {
LABEL_1612:
    v66 = 2;
    OctaviaSubtitleRenderPipeline = TrackStorage;
    goto LABEL_228;
  }
  v114 = valuePtr.value;
  v115 = *(const void **)(valuePtr.value + 16);
  if (v115)
  {
    CFRelease(v115);
    *(_QWORD *)(v114 + 16) = 0;
  }
  if (!v83)
  {
    v121 = *(_QWORD *)(v23 + 560);
    if (v121)
    {
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(type.value) = 0;
        v929[0] = OS_LOG_TYPE_DEFAULT;
        v122 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v123 = type.value;
        if (os_log_type_enabled(v122, v929[0]))
          v124 = v123;
        else
          v124 = v123 & 0xFFFFFFFE;
        if (v124)
        {
          if (a1)
            v125 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          else
            v125 = "";
          *(_DWORD *)context = 136315650;
          *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&context[12] = 2048;
          *(_QWORD *)&context[14] = a1;
          *(_WORD *)&context[22] = 2082;
          *(_QWORD *)&context[24] = v125;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v121 = *(_QWORD *)(v23 + 560);
        v59 = theArray;
      }
      playerfig_removeAudioRenderPipelineListeners(v22, v121);
      v146 = *(const void **)(v23 + 560);
      if (v146)
      {
        CFRelease(v146);
        *(_QWORD *)(v23 + 560) = 0;
      }
      v147 = *(const void **)(v23 + 656);
      if (v147)
      {
        CFRelease(v147);
        *(_QWORD *)(v23 + 656) = 0;
      }
    }
LABEL_286:
    FPSupport_ReleasePassthroughHelper();
    v60 = 0;
    *(_QWORD *)(v23 + 912) = 0;
    v66 = 2;
    goto LABEL_287;
  }
  *(_DWORD *)value = *v51;
  TrackStorage = fp_createAudioRenderPipelineOptionsForTrack(a1, *(unsigned int *)value, 0, &value[8]);
  if ((_DWORD)TrackStorage)
    goto LABEL_1612;
  v116 = *(_QWORD *)(v21 + 968);
  v117 = *(unsigned int *)(v21 + 996);
  v118 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v118)
  {
    OctaviaSubtitleRenderPipeline = 4294954514;
    v66 = 2;
    goto LABEL_228;
  }
  TrackStorage = v118(v116, v117, &cf, 0);
  if ((_DWORD)TrackStorage)
    goto LABEL_1612;
  TrackStorage = itemfig_copyFormatDescription(cf.value, &v926.value);
  if ((_DWORD)TrackStorage)
    goto LABEL_1612;
  v119 = *(_QWORD *)(v21 + 368);
  v59 = theArray;
  if (v119)
    itemfig_reuseExistingRenderPipeline(v119, (uint64_t)value);
  v120 = *(const void **)&value[24];
  if (*(_QWORD *)&value[24])
  {
    v66 = 2;
    goto LABEL_1547;
  }
  if (!*(_QWORD *)(v23 + 560))
  {
    if (dword_1EE2A2AC8 < 2)
    {
LABEL_1516:
      v66 = 2;
      goto LABEL_1546;
    }
    v897 = (void *)v114;
    LODWORD(type.value) = 0;
    v929[0] = OS_LOG_TYPE_DEFAULT;
    v142 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v143 = type.value;
    if (os_log_type_enabled(v142, v929[0]))
      v144 = v143;
    else
      v144 = v143 & 0xFFFFFFFE;
    if (v144)
    {
      if (a1)
        v145 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      else
        v145 = "";
      *(_DWORD *)context = 136315650;
      *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
      *(_WORD *)&context[12] = 2048;
      *(_QWORD *)&context[14] = a1;
      *(_WORD *)&context[22] = 2082;
      *(_QWORD *)&context[24] = v145;
      _os_log_send_and_compose_impl();
    }
    v59 = theArray;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v66 = 2;
    v51 = (int *)(v21 + 996);
    v114 = (CMTimeValue)v897;
LABEL_1546:
    v120 = *(const void **)&value[24];
    if (*(_QWORD *)&value[24])
    {
LABEL_1547:
      *(_QWORD *)(v114 + 16) = CFRetain(v120);
    }
    else
    {
      v862 = v26;
      v786 = itemfig_shouldEnableSpatializationForTrack((uint64_t)a1, *v51);
      AudioRenderPipelineOptionsForTrack = fp_createAudioRenderPipelineOptionsForTrack(a1, *v51, 1, v948);
      if ((_DWORD)AudioRenderPipelineOptionsForTrack
        || (AudioRenderPipelineOptionsForTrack = fp_buildAudioRenderPipelineForTrack(v909, (uint64_t)a1, *v51, 1, v863, v786, &value[24]), (_DWORD)AudioRenderPipelineOptionsForTrack))
      {
        OctaviaSubtitleRenderPipeline = AudioRenderPipelineOptionsForTrack;
        v26 = v862;
        goto LABEL_228;
      }
      if (dword_1EE2A2AC8)
      {
        v902 = v786;
        v788 = v114;
        LODWORD(type.value) = 0;
        v929[0] = OS_LOG_TYPE_DEFAULT;
        v789 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v790 = type.value;
        if (os_log_type_enabled(v789, v929[0]))
          v791 = v790;
        else
          v791 = v790 & 0xFFFFFFFE;
        if (v791)
        {
          if (a1)
            v792 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          else
            v792 = "";
          *(_DWORD *)context = 136315906;
          *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&context[12] = 2048;
          *(_QWORD *)&context[14] = a1;
          *(_WORD *)&context[22] = 2082;
          *(_QWORD *)&context[24] = v792;
          *(_WORD *)&context[32] = 2048;
          *(_QWORD *)&context[34] = *(_QWORD *)&value[24];
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v51 = (int *)(v21 + 996);
        v114 = v788;
        v786 = v902;
      }
      v793 = *(CFTypeRef *)&value[24];
      if (*(_QWORD *)&value[24])
        v793 = CFRetain(*(CFTypeRef *)&value[24]);
      *(_QWORD *)(v23 + 560) = v793;
      *(_BYTE *)(v23 + 920) = v863;
      *(_DWORD *)(v23 + 924) = v844;
      v794 = *(const void **)(v23 + 656);
      v795 = (const void *)v926.value;
      *(_QWORD *)(v23 + 656) = v926.value;
      if (v795)
        CFRetain(v795);
      if (v794)
        CFRelease(v794);
      playerfig_applyEQPreset(v909);
      playerfig_applySoftwareVolume(v909, CFSTR("SoftwareVolume1"), 0, *(float *)(v23 + 764), 0.0);
      if (*(_BYTE *)(v23 + 772))
        playerfig_applySoftwareVolume(v909, CFSTR("SoftwareVolume2"), 1, *(float *)(v23 + 768), 0.0);
      v796 = 1.0;
      if (*(_BYTE *)(v23 + 773))
        v796 = 0.0;
      playerfig_applySoftwareVolume(v909, CFSTR("SoftwareVolume5"), 1, v796, 0.0);
      v797 = *(CFTypeRef *)&value[24];
      if (*(_QWORD *)&value[24])
        v797 = CFRetain(*(CFTypeRef *)&value[24]);
      *(_QWORD *)(v114 + 16) = v797;
      *(_BYTE *)(v21 + 1826) = 0;
      itemfig_applyLoudnessInfo(a1, *(unsigned int *)(v21 + 996), 0, 0);
      itemfig_updateVolumeOffset((uint64_t)a1);
      itemfig_applyAudioProcessingUnitsToTrack(v21, v114);
      itemfig_applyAllAudioCurvesToTrack(v21, v114);
      itemfig_applyAdjustTargetLevel((uint64_t)a1);
      itemfig_applyAdjustCompressionProfile((uint64_t)a1);
      v798 = CFNumberCreate(allocator, kCFNumberSInt32Type, v51);
      FigRenderPipelineSetProperty_0(*(_QWORD *)(v114 + 16), (uint64_t)CFSTR("TrackID"), (uint64_t)v798);
      if (v798)
        CFRelease(v798);
      v799 = *(const void **)(v114 + 88);
      if (!v799)
        v799 = *(const void **)(v21 + 1432);
      FigRenderPipelineSetProperty_0(*(_QWORD *)(v114 + 16), (uint64_t)CFSTR("AudioProcessingTap"), (uint64_t)v799);
      v800 = *(const void **)(v23 + 600);
      *(_QWORD *)(v23 + 600) = v799;
      if (v799)
        CFRetain(v799);
      if (v800)
        CFRelease(v800);
      *(_BYTE *)(v23 + 624) = v786;
      itemfig_applyTimePitchAlgorithmToTrack((uint64_t)a1, v114);
      itemfig_applyAudioSceneCompositionPresetToTrack(v114);
      v66 = 0;
      v26 = v862;
      v59 = theArray;
    }
    CFArrayAppendValue(v59, value);
    itemfig_resetRenderTriple((uint64_t)value);
    v60 = 1;
    goto LABEL_287;
  }
  v126 = v22;
  if (!v893
    || !playerfig_doingGapless()
    || !itemfig_canItemAudioTrackReusePreviousItemAudioRenderPipeline((uint64_t)a1))
  {
    if (dword_1EE2A2AC8 >= 2)
    {
      v896 = (void *)v114;
      LODWORD(type.value) = 0;
      v929[0] = OS_LOG_TYPE_DEFAULT;
      v138 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v139 = type.value;
      if (os_log_type_enabled(v138, v929[0]))
        v140 = v139;
      else
        v140 = v139 & 0xFFFFFFFE;
      if (v140)
      {
        if (a1)
          v141 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
        else
          v141 = "";
        *(_DWORD *)context = 136315650;
        *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
        *(_WORD *)&context[12] = 2048;
        *(_QWORD *)&context[14] = a1;
        *(_WORD *)&context[22] = 2082;
        *(_QWORD *)&context[24] = v141;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v59 = theArray;
      v126 = v22;
      v51 = (int *)(v21 + 996);
      v114 = (CMTimeValue)v896;
    }
    playerfig_removeAudioRenderPipelineListeners(v126, *(_QWORD *)(v23 + 560));
    v780 = *(const void **)(v23 + 560);
    if (v780)
    {
      CFRelease(v780);
      *(_QWORD *)(v23 + 560) = 0;
    }
    goto LABEL_1516;
  }
  v127 = v26;
  if (dword_1EE2A2AC8)
  {
    v895 = (void *)v114;
    LODWORD(type.value) = 0;
    v929[0] = OS_LOG_TYPE_DEFAULT;
    v128 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v129 = type.value;
    if (os_log_type_enabled(v128, v929[0]))
      v130 = v129;
    else
      v130 = v129 & 0xFFFFFFFE;
    if (v130)
    {
      if (a1)
        v131 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      else
        v131 = "";
      v782 = *(_QWORD *)(v23 + 560);
      *(_DWORD *)context = 136315906;
      *(_QWORD *)&context[4] = "itemfig_createRenderTriplesForAudio";
      *(_WORD *)&context[12] = 2048;
      *(_QWORD *)&context[14] = a1;
      *(_WORD *)&context[22] = 2082;
      *(_QWORD *)&context[24] = v131;
      *(_WORD *)&context[32] = 2048;
      *(_QWORD *)&context[34] = v782;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v114 = (CMTimeValue)v895;
    v59 = theArray;
  }
  *(_QWORD *)&value[24] = CFRetain(*(CFTypeRef *)(v23 + 560));
  v783 = *(const void **)(v23 + 656);
  v784 = (const void *)v926.value;
  *(_QWORD *)(v23 + 656) = v926.value;
  if (v784)
    CFRetain(v784);
  if (v783)
    CFRelease(v783);
  v66 = 1;
  v785 = fp_createAudioRenderPipelineOptionsForTrack(a1, *(unsigned int *)v867, 1, v948);
  if (!(_DWORD)v785)
  {
    *(_BYTE *)(v21 + 1724) = 1;
    v26 = v127;
    v51 = (int *)(v21 + 996);
    goto LABEL_1546;
  }
  v66 = 2;
  OctaviaSubtitleRenderPipeline = v785;
  v26 = v127;
LABEL_228:
  v60 = 0;
  v59 = theArray;
  if (v26)
    goto LABEL_292;
LABEL_293:
  *(_QWORD *)&v940 = v59;
  itemfig_resetRenderTriple((uint64_t)value);
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
  if (v926.value)
    CFRelease((CFTypeRef)v926.value);
  if (!v843 && !(_DWORD)OctaviaSubtitleRenderPipeline)
    *(_BYTE *)(v21 + 2017) = v60;
  if (a5)
    *a5 = v66;
  if (*(double *)(v21 + 1976) == 0.0)
    *(CFAbsoluteTime *)(v21 + 1976) = CFAbsoluteTimeGetCurrent();
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
    goto LABEL_1607;
  v148 = CMBaseObjectGetDerivedStorage();
  v149 = *(const __CFArray **)(v148 + 648);
  if (v149)
    v150 = CFArrayGetCount(v149);
  else
    v150 = 0;
  memset(context, 0, 40);
  if ((v842 & 1) != 0)
  {
    v151 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kRenderTripleArrayCallbacks);
    if (Mutable)
    {
      v153 = Mutable;
      FigXMLNodeGetTag(*(_QWORD *)(v148 + 1760));
      if (FigCFDictionaryGetCount() >= 1)
      {
        MutableCopy = CFArrayCreateMutableCopy(v151, 0, *(CFArrayRef *)(v148 + 1768));
        if (v150 >= 1)
        {
          for (i = 0; i != v150; ++i)
          {
            v156 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v148 + 648), i);
            v157 = *v156;
            cf.value = 0;
            if (v156[1] == 1835365473)
            {
              v158 = FPSupport_CreateAndAddMetadataOutputRenderPipelinesForTrackWithID(*(_QWORD *)(v148 + 1760), v157, &cf);
              if (v158)
              {
                v159 = v158;
                LODWORD(v926.value) = 0;
                LOBYTE(valuePtr.value) = 0;
                v160 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v161 = v926.value;
                if (os_log_type_enabled(v160, valuePtr.value))
                  v162 = v161;
                else
                  v162 = v161 & 0xFFFFFFFE;
                if (v162)
                {
                  *(_DWORD *)value = 136315394;
                  *(_QWORD *)&value[4] = "itemfig_createRenderTriplesForMetadataOutputs";
                  *(_WORD *)&value[12] = 1024;
                  *(_DWORD *)&value[14] = v159;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                a1 = v873;
              }
              else if (CFArrayGetCount((CFArrayRef)cf.value) >= 1)
              {
                v163 = 0;
                do
                {
                  v164 = CFArrayGetValueAtIndex((CFArrayRef)cf.value, v163);
                  CFArrayAppendValue(MutableCopy, v164);
                  *(_DWORD *)context = v157;
                  if (v164)
                    v165 = CFRetain(v164);
                  else
                    v165 = 0;
                  *(_QWORD *)&context[24] = v165;
                  CFArrayAppendValue(v153, context);
                  itemfig_resetRenderTriple((uint64_t)context);
                  ++v163;
                }
                while (v163 < CFArrayGetCount((CFArrayRef)cf.value));
              }
              if (cf.value)
                CFRelease((CFTypeRef)cf.value);
            }
          }
        }
        v166 = *(const void **)(v148 + 1768);
        *(_QWORD *)(v148 + 1768) = MutableCopy;
        if (MutableCopy)
          CFRetain(MutableCopy);
        if (v166)
          CFRelease(v166);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
      goto LABEL_343;
    }
    OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
    itemfig_resetRenderTriple((uint64_t)context);
    *((_QWORD *)&v940 + 1) = 0;
    if ((_DWORD)OctaviaSubtitleRenderPipeline)
    {
LABEL_1607:
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v205 = 0;
      v894 = 0;
      theArrayb = 0;
LABEL_1608:
      v910 = 0;
      goto LABEL_1659;
    }
  }
  else
  {
    FigXMLNodeGetTag(*(_QWORD *)(v148 + 1760));
    v153 = 0;
    if (FigCFDictionaryGetCount() >= 1 && v150 >= 1)
    {
      for (j = 0; j != v150; ++j)
      {
        if (*((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v148 + 648), j) + 1) == 1835365473)
        {
          itemfig_resetRenderTriple((uint64_t)context);
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v205 = 0;
          v894 = 0;
          theArrayb = 0;
          v910 = 0;
          *((_QWORD *)&v940 + 1) = 0;
          OctaviaSubtitleRenderPipeline = 4294954433;
          goto LABEL_1659;
        }
      }
      v153 = 0;
    }
LABEL_343:
    itemfig_resetRenderTriple((uint64_t)context);
    *((_QWORD *)&v940 + 1) = v153;
  }
  v168 = CMBaseObjectGetDerivedStorage();
  v169 = CMBaseObjectGetDerivedStorage();
  v170 = CFArrayGetCount(*(CFArrayRef *)(v168 + 648));
  v171 = *(unsigned __int8 *)(v168 + 1023);
  MEMORY[0x19402EEEC](*(_QWORD *)(v169 + 456));
  v172 = *(const void **)(v169 + 464);
  if (v172)
    v173 = CFRetain(v172);
  else
    v173 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(v169 + 456));
  if (v173)
    v174 = 1;
  else
    v174 = v171 == 0;
  if (v174)
    v175 = v171;
  else
    v175 = 0;
  if (v843 && v170 >= 1)
  {
    for (k = 0; v170 != k; ++k)
    {
      v177 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v168 + 648), k);
      if (*((_DWORD *)v177 + 1) == 1751216244)
      {
        if (v175 && *((_BYTE *)v177 + 8))
        {
          if (!v177[2])
            goto LABEL_497;
        }
        else if (v177[2])
        {
LABEL_497:
          v911 = 0;
          v185 = 0;
          OctaviaSubtitleRenderPipeline = 4294954433;
          goto LABEL_408;
        }
      }
    }
  }
  allocatora = (uint64_t)v173;
  if (v170 < 1)
  {
    v179 = 0;
  }
  else
  {
    v178 = 0;
    v179 = 0;
    do
    {
      v180 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v168 + 648), v178);
      if (*((_DWORD *)v180 + 1) == 1751216244)
      {
        v181 = v180;
        if (v175 && *((_BYTE *)v180 + 8))
        {
          ++v179;
        }
        else
        {
          v182 = (const void *)v180[2];
          if (v182)
          {
            CFRelease(v182);
            v181[2] = 0;
          }
        }
      }
      ++v178;
    }
    while (v170 != v178);
  }
  v183 = *(const void **)(v169 + 648);
  if (v183)
  {
    CFRelease(v183);
    *(_QWORD *)(v169 + 648) = 0;
  }
  theArraya = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v173 = (CFTypeRef)allocatora;
  v911 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v179, &kRenderTripleArrayCallbacks);
  if (!v911)
  {
    OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
    v911 = 0;
    goto LABEL_382;
  }
  if (v179 <= 0)
  {
    v781 = *(const void **)(v168 + 1024);
    if (v781)
    {
      CFRelease(v781);
      OctaviaSubtitleRenderPipeline = 0;
      v185 = 0;
      *(_QWORD *)(v168 + 1024) = 0;
      goto LABEL_408;
    }
LABEL_381:
    OctaviaSubtitleRenderPipeline = 0;
LABEL_382:
    v185 = 0;
    goto LABEL_408;
  }
  v184 = CFArrayCreateMutable(theArraya, v179, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(v169 + 648) = v184;
  if (!v184)
  {
    OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
    goto LABEL_382;
  }
  if (*(_QWORD *)(v168 + 1024))
  {
    if (v170 < 1)
      goto LABEL_381;
LABEL_385:
    v186 = 0;
    v185 = 0;
    v859 = *MEMORY[0x1E0C9AE50];
    do
    {
      v187 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v168 + 648), v186);
      if (*((_DWORD *)v187 + 1) == 1751216244)
      {
        v188 = v187;
        if (*((_BYTE *)v187 + 8))
        {
          v189 = v187 + 2;
          if (v187[2]
            || !FigHapticRenderPipelineCreate(theArraya, 0, *(const void **)(v168 + 1024), (CFTypeRef *)v187 + 2))
          {
            MEMORY[0x19402EEEC](*(_QWORD *)(v169 + 24));
            v190 = *(const void **)(v169 + 16);
            if (v190)
            {
              v185 = CFRetain(v190);
              MEMORY[0x19402EF04](*(_QWORD *)(v169 + 24));
              if (v185)
              {
                v191 = FigRenderPipelineGetFigBaseObject(*v189);
                v192 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
                if (v192)
                  v192(v191, CFSTR("STSLabel"), v185);
              }
            }
            else
            {
              MEMORY[0x19402EF04](*(_QWORD *)(v169 + 24));
              v185 = 0;
            }
            v193 = v188[22];
            if (v193)
            {
              v194 = FigRenderPipelineGetFigBaseObject(*v189);
              v195 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
              if (v195)
                v195(v194, CFSTR("ActiveHapticChannelIndex"), v193);
            }
            v196 = v188[23];
            if (v196)
            {
              v197 = FigRenderPipelineGetFigBaseObject(*v189);
              v198 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
              if (v198)
                v198(v197, CFSTR("SoftwareVolume1"), v196);
            }
            if (*((_BYTE *)v188 + 9))
            {
              v199 = FigRenderPipelineGetFigBaseObject(*v189);
              v200 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
              if (v200)
                v200(v199, CFSTR("Muted"), v859);
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(v169 + 648), (const void *)v188[2]);
            memset(formatDescriptionOut, 0, 40);
            LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)v188;
            formatDescriptionOut[0].duration.value = v188[2];
            CFArrayAppendValue(v911, formatDescriptionOut);
          }
        }
      }
      ++v186;
    }
    while (v170 != v186);
    OctaviaSubtitleRenderPipeline = 0;
    a1 = v873;
    v173 = (CFTypeRef)allocatora;
  }
  else
  {
    OctaviaSubtitleRenderPipeline = FigHapticEngineCreate((uint64_t)theArraya, allocatora, *(void **)(v168 + 1032), (uint64_t *)(v168 + 1024));
    v185 = 0;
    if (!(_DWORD)OctaviaSubtitleRenderPipeline && v170 > 0)
      goto LABEL_385;
  }
LABEL_408:
  if (v173)
    CFRelease(v173);
  if (v185)
    CFRelease(v185);
  *(_QWORD *)&v941 = v911;
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
    goto LABEL_1607;
  RenderTriplesForVideo = itemfig_createRenderTriplesForVideo(a1, v843, tag, a2, a3, v838, (CFMutableArrayRef *)&v941 + 1, (__CFArray **)&v944, (__CFArray **)&v946);
  if ((_DWORD)RenderTriplesForVideo)
    goto LABEL_1606;
  if (!FigRenderedLegibleOutputManagerIsSupported())
    goto LABEL_460;
  CMBaseObjectGetDerivedStorage();
  v202 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)value = 0;
  cf.value = 0;
  memset(formatDescriptionOut, 0, 40);
  if (v842)
  {
    v203 = v202;
    if (CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kRenderTripleArrayCallbacks))
    {
      v204 = *(const void **)(v203 + 576);
      if (v204)
      {
        CFRelease(v204);
        *(_QWORD *)(v203 + 576) = 0;
      }
      FPSupport_resetClosedCaptionLayer(v203 + 296);
    }
    OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
  }
  else
  {
    OctaviaSubtitleRenderPipeline = 0;
  }
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  *(_QWORD *)&v942 = 0;
  if (*(_QWORD *)value)
    CFRelease(*(CFTypeRef *)value);
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
    goto LABEL_1607;
  v206 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)value = 0;
  cf.value = 0;
  memset(formatDescriptionOut, 0, 40);
  if (!v842)
  {
    v221 = 0;
    v208 = 0;
LABEL_451:
    OctaviaSubtitleRenderPipeline = 0;
    goto LABEL_452;
  }
  v207 = v206;
  v208 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kRenderTripleArrayCallbacks);
  if (!v208)
  {
    CommonRenderPipelineOptionsForTrack = FigSignalErrorAt();
    goto LABEL_1599;
  }
  v209 = *(const __CFArray **)(v207 + 408);
  if (v209)
  {
    v210 = CFArrayGetCount(v209);
    if (v210 >= 1)
    {
      v211 = v210;
      for (m = 0; m != v211; ++m)
      {
        v213 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v207 + 408), m);
        if (*(_DWORD *)v213 != *(_DWORD *)(v207 + 1008))
          FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipeline(*(_QWORD *)(v207 + 1744), v213[3]);
      }
    }
  }
  if (!*(_QWORD *)(v207 + 1752) || !*(_DWORD *)(v207 + 1008))
  {
    v221 = 0;
    goto LABEL_451;
  }
  LODWORD(v926.value) = 0;
  LODWORD(valuePtr.value) = 0;
  itemfig_GetDimensions(a1, (float *)&v926, (float *)&valuePtr);
  FigLegibleOutputManagerSetVideoDisplaySize(*(dispatch_queue_t **)(v207 + 1744), *(float *)&v926.value, *(float *)&valuePtr.value);
  v214 = *(_DWORD *)(v207 + 1008);
  *(_OWORD *)context = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)&context[16] = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)context, v214, 1668047728, 1, (__CFDictionary **)&formatDescriptionOut[0].duration.timescale);
  if ((_DWORD)CommonRenderPipelineOptionsForTrack)
    goto LABEL_1599;
  v216 = *(_QWORD *)(v207 + 968);
  v217 = *(unsigned int *)(v207 + 1008);
  v218 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v218)
  {
    OctaviaSubtitleRenderPipeline = 4294954514;
LABEL_473:
    v221 = 0;
    goto LABEL_452;
  }
  CommonRenderPipelineOptionsForTrack = v218(v216, v217, value, 0);
  if ((_DWORD)CommonRenderPipelineOptionsForTrack
    || (CommonRenderPipelineOptionsForTrack = itemfig_copyFormatDescription(*(uint64_t *)value, &cf.value),
        (_DWORD)CommonRenderPipelineOptionsForTrack))
  {
LABEL_1599:
    OctaviaSubtitleRenderPipeline = CommonRenderPipelineOptionsForTrack;
    goto LABEL_473;
  }
  v219 = (const opaqueCMFormatDescription *)cf.value;
  v220 = FigLegibleOutputManagerEnsureRenderPipelinesForFormat(*(dispatch_queue_t **)(v207 + 1744), (const void *)cf.value);
  v221 = v220;
  if (!v220)
    goto LABEL_451;
  v222 = CFArrayGetCount(v220);
  if (v222 < 1)
    goto LABEL_451;
  v223 = v222;
  v224 = 0;
  while (1)
  {
    LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)(v207 + 1008);
    v225 = CFArrayGetValueAtIndex(v221, v224);
    if (v225)
      v225 = CFRetain(v225);
    formatDescriptionOut[0].duration.value = (CMTimeValue)v225;
    v226 = itemfig_prepareClosedCaptionRenderPipeline((uint64_t)v225, v219);
    if ((_DWORD)v226)
      break;
    CFArrayAppendValue(v208, formatDescriptionOut);
    itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
    if (v223 == ++v224)
      goto LABEL_451;
  }
  OctaviaSubtitleRenderPipeline = v226;
LABEL_452:
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  *((_QWORD *)&v942 + 1) = v208;
  if (*(_QWORD *)value)
    CFRelease(*(CFTypeRef *)value);
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
  if (v221)
    CFRelease(v221);
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
    goto LABEL_1607;
  playerfig_updateClosedCaptionsDisplayForItem(v837, (uint64_t)a1);
LABEL_460:
  if (!FigRenderedLegibleOutputManagerIsSupported())
    goto LABEL_586;
  v227 = CMBaseObjectGetDerivedStorage();
  v228 = *(_QWORD *)(v227 + 8);
  v229 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)value = 0;
  cf.value = 0;
  memset(formatDescriptionOut, 0, 40);
  if (!v842)
  {
    OctaviaSubtitleRenderPipeline = 0;
    v232 = 0;
    goto LABEL_522;
  }
  v230 = v229;
  v231 = *MEMORY[0x1E0C9AE00];
  v232 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kRenderTripleArrayCallbacks);
  if (!v232)
  {
    v236 = FigSignalErrorAt();
LABEL_1601:
    OctaviaSubtitleRenderPipeline = v236;
    goto LABEL_522;
  }
  v233 = *(const void **)(v230 + 584);
  if (v233)
  {
    CFRelease(v233);
    *(_QWORD *)(v230 + 584) = 0;
  }
  v234 = *(_DWORD *)(v227 + 1016);
  if (!v234 || *(_BYTE *)(v227 + 1825))
    goto LABEL_521;
  LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)(v227 + 1016);
  *(_OWORD *)v912 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)context = *MEMORY[0x1E0CA2E18];
  v235 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_QWORD *)&context[16] = v235;
  v236 = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)context, v234, 1935832172, 0, (__CFDictionary **)&formatDescriptionOut[0].start.timescale);
  if ((_DWORD)v236)
    goto LABEL_1601;
  itemfig_reuseExistingRenderPipeline(*(_QWORD *)(v227 + 416), (uint64_t)formatDescriptionOut);
  v237 = (const void *)formatDescriptionOut[0].duration.value;
  if (*(_BYTE *)(v230 + 122) && formatDescriptionOut[0].duration.value)
  {
    CFRelease((CFTypeRef)formatDescriptionOut[0].duration.value);
    formatDescriptionOut[0].duration.value = 0;
    goto LABEL_475;
  }
  if (formatDescriptionOut[0].duration.value)
  {
LABEL_519:
    v237 = CFRetain(v237);
    goto LABEL_520;
  }
LABEL_475:
  v926.value = 0;
  v238 = *(_DWORD *)(v227 + 1016);
  *(_OWORD *)context = *(_OWORD *)v912;
  *(_QWORD *)&context[16] = v235;
  v236 = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)context, v238, 1935832172, 1, (__CFDictionary **)&formatDescriptionOut[0].duration.timescale);
  if ((_DWORD)v236)
    goto LABEL_1601;
  v239 = *(_QWORD *)(v227 + 968);
  v240 = *(unsigned int *)(v227 + 1016);
  v241 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v241)
  {
    OctaviaSubtitleRenderPipeline = 4294954514;
    goto LABEL_522;
  }
  v236 = v241(v239, v240, value, 0);
  if ((_DWORD)v236)
    goto LABEL_1601;
  v236 = itemfig_copyFormatDescription(*(uint64_t *)value, &cf.value);
  if ((_DWORD)v236)
    goto LABEL_1601;
  v242 = *(const void **)(v230 + 672);
  v243 = (const void *)cf.value;
  *(_QWORD *)(v230 + 672) = cf.value;
  if (v243)
    CFRetain(v243);
  if (v242)
    CFRelease(v242);
  if (*(_BYTE *)(v230 + 122) && *(_BYTE *)(v230 + 123) || *(_BYTE *)(v230 + 185))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v230 + 152));
    v244 = *(const void **)(v230 + 160);
    if (v244)
      v245 = CFRetain(v244);
    else
      v245 = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(v230 + 152));
    OctaviaSubtitleRenderPipeline = FigCreateOctaviaSubtitleRenderPipeline((const opaqueCMFormatDescription *)v243, 0, v245, (CFTypeRef *)&formatDescriptionOut[0].duration);
    if (v245)
      CFRelease(v245);
    if (!(_DWORD)OctaviaSubtitleRenderPipeline && formatDescriptionOut[0].duration.value)
    {
      SubtitleRenderPipeline = fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(formatDescriptionOut[0].duration.value, *(double *)(v230 + 128), *(double *)(v230 + 136), *(_QWORD *)(v230 + 144), a1);
      goto LABEL_499;
    }
  }
  else
  {
    if (*(_BYTE *)(v230 + 781))
    {
      *(_OWORD *)context = *MEMORY[0x1E0CA2E68];
      *(_QWORD *)&context[16] = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      SubtitleRenderPipeline = FigCreateSubtitleRenderPipeline((uint64_t)v243, (uint64_t)playerfig_postSubtitleNotificationIfEnabled, v228, 0, 0, 0, 0, 0, (__int128 *)context, 0, (CFTypeRef *)&formatDescriptionOut[0].duration);
    }
    else
    {
      *(_OWORD *)context = *MEMORY[0x1E0CA2E68];
      *(_QWORD *)&context[16] = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      SubtitleRenderPipeline = FigCreateCaptionRenderPipeline((uint64_t)v243, (uint64_t)playerfig_postCaptionNotificationIfEnabled, v228, 0, 0, 0, 0, 0, (__int128 *)context, 0, (CFTypeRef *)&formatDescriptionOut[0].duration);
    }
LABEL_499:
    OctaviaSubtitleRenderPipeline = SubtitleRenderPipeline;
  }
  if (!(_DWORD)OctaviaSubtitleRenderPipeline)
  {
    if (*(_BYTE *)(v230 + 688) && *(_BYTE *)(v227 + 1020))
      v247 = (uint64_t *)MEMORY[0x1E0C9AE50];
    else
      v247 = (uint64_t *)MEMORY[0x1E0C9AE40];
    v248 = *v247;
    v249 = FigRenderPipelineGetFigBaseObject(formatDescriptionOut[0].duration.value);
    v250 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v250)
      v250(v249, CFSTR("DisplayNonForcedSubtitles"), v248);
    v251 = FigTrackReaderGetFigBaseObject(*(_QWORD *)value);
    v252 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v252)
    {
      v252(v251, CFSTR("ExtendedLanguageTagString"), v231, &v926);
      if (v926.value)
      {
        if (*(_BYTE *)(v230 + 781))
          v253 = (uint64_t *)&kFigSubtitleRenderPipelineProperty_ExtendedLanguageTagString;
        else
          v253 = &kFigCaptionRenderPipelineProperty_ExtendedLanguageTagString;
        FigRenderPipelineSetProperty_0(formatDescriptionOut[0].duration.value, *v253, v926.value);
        CFRelease((CFTypeRef)v926.value);
      }
    }
    v254 = *(_QWORD *)(v227 + 1832);
    if (v254)
    {
      if (*(_BYTE *)(v230 + 781))
        v255 = &kFigSubtitleRenderPipelineProperty_TextMarkupArray;
      else
        v255 = &kFigCaptionRenderPipelineProperty_TextMarkupArray;
      FigRenderPipelineSetProperty_0(formatDescriptionOut[0].duration.value, *v255, v254);
    }
    v237 = (const void *)formatDescriptionOut[0].duration.value;
    if (formatDescriptionOut[0].duration.value)
      goto LABEL_519;
LABEL_520:
    *(_QWORD *)(v230 + 584) = v237;
    CFArrayAppendValue(v232, formatDescriptionOut);
    itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
LABEL_521:
    OctaviaSubtitleRenderPipeline = 0;
  }
LABEL_522:
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  *(_QWORD *)&v943 = v232;
  if (*(_QWORD *)value)
    CFRelease(*(CFTypeRef *)value);
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
    goto LABEL_1607;
  v256 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)value = 0;
  cf.value = 0;
  memset(formatDescriptionOut, 0, 40);
  if (!v842)
  {
    OctaviaSubtitleRenderPipeline = 0;
    v278 = 0;
    v279 = 0;
    v259 = 0;
LABEL_552:
    v260 = 0;
    goto LABEL_577;
  }
  v257 = v256;
  v258 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v259 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kRenderTripleArrayCallbacks);
  if (!v259)
  {
    OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
    v278 = 0;
    v279 = 0;
    goto LABEL_552;
  }
  v260 = CFArrayCreateMutable(v258, 0, &kRenderTripleArrayCallbacks);
  if (!v260)
  {
    v274 = FigSignalErrorAt();
    goto LABEL_1604;
  }
  v261 = *(const __CFArray **)(v257 + 424);
  if (v261)
  {
    v262 = CFArrayGetCount(v261);
    if (v262 >= 1)
    {
      v263 = v262;
      for (n = 0; n != v263; ++n)
      {
        v265 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v257 + 424), n);
        if (*(_DWORD *)v265 != *(_DWORD *)(v257 + 1016))
          FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipeline(*(_QWORD *)(v257 + 1744), v265[3]);
      }
    }
  }
  v266 = *(const __CFArray **)(v257 + 472);
  if (v266)
  {
    v267 = CFArrayGetCount(v266);
    if (v267 >= 1)
    {
      v268 = v267;
      for (ii = 0; ii != v268; ++ii)
      {
        v270 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v257 + 472), ii);
        if (*(_DWORD *)v270 != *(_DWORD *)(v257 + 1016))
          FigRenderedLegibleOutputManagerForgetAboutRenderedLegibleOutputRenderPipeline(*(_QWORD *)(v257 + 1776), v270[3]);
      }
    }
  }
  if ((*(_QWORD *)(v257 + 1752) || *(_QWORD *)(v257 + 1784)) && *(_DWORD *)(v257 + 1016))
  {
    LODWORD(v926.value) = 0;
    LODWORD(valuePtr.value) = 0;
    itemfig_GetDimensions(a1, (float *)&v926, (float *)&valuePtr);
    v271 = *(float *)&v926.value;
    v272 = *(float *)&valuePtr.value;
    v273 = *(_DWORD *)(v257 + 1016);
    *(_OWORD *)context = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)&context[16] = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v274 = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)context, v273, 1935832172, 1, (__CFDictionary **)&formatDescriptionOut[0].duration.timescale);
    if ((_DWORD)v274)
      goto LABEL_1604;
    v275 = *(_QWORD *)(v257 + 968);
    v276 = *(unsigned int *)(v257 + 1016);
    v277 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v277)
    {
      v274 = v277(v275, v276, value, 0);
      if (!(_DWORD)v274)
      {
        v274 = itemfig_copyFormatDescription(*(uint64_t *)value, &cf.value);
        if (!(_DWORD)v274)
        {
          if (*(_QWORD *)(v257 + 1752))
          {
            FigLegibleOutputManagerSetVideoDisplaySize(*(dispatch_queue_t **)(v257 + 1744), v271, v272);
            v278 = FigLegibleOutputManagerEnsureRenderPipelinesForFormat(*(dispatch_queue_t **)(v257 + 1744), (const void *)cf.value);
          }
          else
          {
            v278 = 0;
          }
          if (*(_QWORD *)(v257 + 1784))
          {
            *(_QWORD *)context = 0;
            v280 = FigTrackReaderGetFigBaseObject(*(_QWORD *)value);
            v281 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v281)
            {
              v281(v280, CFSTR("ExtendedLanguageTagString"), v258, context);
              v282 = *(_QWORD *)context;
            }
            else
            {
              v282 = 0;
            }
            v279 = FigRenderedLegibleOutputManagerEnsureRenderPipelinesForFormat(*(_QWORD *)(v257 + 1776), cf.value, *(_QWORD *)(v257 + 1832), v282);
            if (*(_QWORD *)context)
              CFRelease(*(CFTypeRef *)context);
          }
          else
          {
            v279 = 0;
          }
          if (v278)
          {
            v283 = CFArrayGetCount(v278);
            if (v283 >= 1)
            {
              v284 = v283;
              for (jj = 0; jj != v284; ++jj)
              {
                LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)(v257 + 1016);
                v286 = CFArrayGetValueAtIndex(v278, jj);
                if (v286)
                  v286 = CFRetain(v286);
                formatDescriptionOut[0].duration.value = (CMTimeValue)v286;
                CFArrayAppendValue(v259, formatDescriptionOut);
                itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
              }
            }
          }
          if (v279)
          {
            v287 = CFArrayGetCount(v279);
            if (v287 >= 1)
            {
              v288 = v287;
              for (kk = 0; kk != v288; ++kk)
              {
                LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)(v257 + 1016);
                v290 = CFArrayGetValueAtIndex(v279, kk);
                if (v290)
                  v290 = CFRetain(v290);
                formatDescriptionOut[0].duration.value = (CMTimeValue)v290;
                CFArrayAppendValue(v260, formatDescriptionOut);
                itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
              }
            }
          }
          OctaviaSubtitleRenderPipeline = 0;
          goto LABEL_577;
        }
      }
LABEL_1604:
      OctaviaSubtitleRenderPipeline = v274;
    }
    else
    {
      OctaviaSubtitleRenderPipeline = 4294954514;
    }
  }
  else
  {
    OctaviaSubtitleRenderPipeline = 0;
  }
  v278 = 0;
  v279 = 0;
LABEL_577:
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  *((_QWORD *)&v943 + 1) = v259;
  *((_QWORD *)&v946 + 1) = v260;
  if (v278)
    CFRelease(v278);
  if (v279)
    CFRelease(v279);
  if (*(_QWORD *)value)
    CFRelease(*(CFTypeRef *)value);
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
    goto LABEL_1607;
LABEL_586:
  MEMORY[0x19402EEEC](*(_QWORD *)(v852 + 240));
  v291 = *(const __CFArray **)(v852 + 264);
  if (!v291)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v852 + 240));
    goto LABEL_1073;
  }
  v292 = CFArrayGetCount(v291);
  MEMORY[0x19402EF04](*(_QWORD *)(v852 + 240));
  if (v292 < 1)
    goto LABEL_1073;
  v293 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)context = 0;
  *(_QWORD *)value = 0;
  cf.value = 0;
  v926.value = 0;
  valuePtr.value = 0;
  if (!*(_QWORD *)(v293 + 648))
  {
    OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
    goto LABEL_656;
  }
  v294 = v293;
  MEMORY[0x19402EEEC](*(_QWORD *)(v293 + 640));
  v295 = CFArrayGetCount(*(CFArrayRef *)(v294 + 648));
  if (v295 < 1)
  {
LABEL_653:
    OctaviaSubtitleRenderPipeline = 0;
    goto LABEL_654;
  }
  v296 = v295;
  v297 = 0;
  v298 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v854 = *MEMORY[0x1E0CA5220];
  v849 = *(_QWORD *)(MEMORY[0x1E0CA5220] + 8);
  v845 = *MEMORY[0x1E0CA5218];
  v839 = *(void **)(MEMORY[0x1E0CA5218] + 8);
  v834 = *MEMORY[0x1E0CA5228];
  v829 = *(CFArrayRef *)(MEMORY[0x1E0CA5228] + 8);
  v913 = 1;
  allocatorb = 1;
  theArrayc = 1;
  v898 = 1;
  key = (void *)*MEMORY[0x1E0CA2278];
  taga = 1;
  v875 = 1;
  v868 = 1;
  v824 = (void *)*MEMORY[0x1E0CA2270];
  while (2)
  {
    v299 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v294 + 648), v297);
    if (*((_QWORD *)v299 + 24))
    {
LABEL_636:
      if (v296 == ++v297)
        goto LABEL_653;
      continue;
    }
    break;
  }
  v300 = v299;
  v301 = FigTagCollectionCreateMutable();
  if ((_DWORD)v301)
    goto LABEL_1054;
  v302 = v298;
  v303 = *(OpaqueCMTagCollection **)context;
  v304 = FigTagMakeWithSInt64Value();
  v306 = v305;
  *(_QWORD *)&v951.category = v304;
  v951.value = v306;
  CMTagCollectionAddTag(v303, v951);
  v307 = v300[1];
  if (v307 > 1936684397)
  {
    switch(v307)
    {
      case 1936684398:
        v311 = FigTagMakeWithSInt64Value();
        v313 = v317;
        ++theArrayc;
        v310 = (CMTagValue)v839;
        v308 = v845;
        break;
      case 1952807028:
        v308 = FigTagMakeWithOSTypeValue();
        v310 = v321;
        v311 = FigTagMakeWithSInt64Value();
        v313 = v322;
        ++taga;
        break;
      case 1986618469:
        v311 = FigTagMakeWithSInt64Value();
        v313 = v314;
        ++v913;
        v310 = (CMTagValue)v829;
        v308 = v834;
        break;
      default:
        goto LABEL_604;
    }
  }
  else
  {
    switch(v307)
    {
      case 1635088502:
        v308 = FigTagMakeWithOSTypeValue();
        v310 = v315;
        v311 = FigTagMakeWithSInt64Value();
        v313 = v316;
        ++allocatorb;
        break;
      case 1835365473:
        v311 = FigTagMakeWithSInt64Value();
        v313 = v320;
        ++v898;
        v310 = v849;
        v308 = v854;
        break;
      case 1935832172:
        v308 = FigTagMakeWithOSTypeValue();
        v310 = v309;
        v311 = FigTagMakeWithSInt64Value();
        v313 = v312;
        ++v875;
        break;
      default:
LABEL_604:
        v308 = FigTagMakeWithOSTypeValue();
        v310 = v318;
        v311 = FigTagMakeWithSInt64Value();
        v313 = v319;
        ++v868;
        break;
    }
  }
  *(_QWORD *)&v952.category = v308;
  v952.value = v310;
  CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)context, v952);
  *(_QWORD *)&v953.category = v311;
  v953.value = v313;
  CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)context, v953);
  v323 = *(_QWORD *)(v294 + 968);
  v324 = *v300;
  v325 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v325)
  {
    OctaviaSubtitleRenderPipeline = 4294954514;
    a1 = v873;
    goto LABEL_654;
  }
  v301 = v325(v323, v324, value, 0);
  a1 = v873;
  if ((_DWORD)v301)
    goto LABEL_1054;
  itemfig_copyFormatDescription(*(uint64_t *)value, &cf.value);
  v326 = (const opaqueCMFormatDescription *)cf.value;
  if (cf.value)
  {
    if (CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)cf.value))
    {
      v327 = *(OpaqueCMTagCollection **)context;
      v328 = FigTagMakeWithOSTypeValue();
      v330 = v329;
      *(_QWORD *)&v954.category = v328;
      v954.value = v330;
      CMTagCollectionAddTag(v327, v954);
    }
    if (v300[1] == 1986618469)
    {
      if (CMFormatDescriptionGetMediaSubType(v326) != 1768972832)
        goto LABEL_640;
      LOBYTE(formatDescriptionOut[0].start.value) = 0;
      LOBYTE(type.value) = 0;
      CMFormatDescriptionGetExtensions(v326);
      v331 = 0;
      if (FigCFDictionaryGetBooleanIfPresent() && LOBYTE(formatDescriptionOut[0].start.value))
      {
        if (FigCFDictionaryGetBooleanIfPresent())
          v332 = LOBYTE(type.value) == 0;
        else
          v332 = 1;
        v331 = !v332;
      }
      if ((int)FigGetCFPreferenceNumberWithDefault() < 2)
        goto LABEL_641;
      v298 = v302;
      if (!v331)
      {
        formatDescriptionOut[0].start.value = 0;
        Dimensions = CMVideoFormatDescriptionGetDimensions(v326);
        CMFormatDescriptionGetExtensions(v326);
        v334 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (v334)
        {
          v335 = v334;
          CFDictionaryRemoveValue(v334, key);
          CFDictionaryRemoveValue(v335, v824);
          FigCFDictionarySetBoolean();
          FigCFDictionarySetBoolean();
          v336 = CMVideoFormatDescriptionCreate(v302, 0x69706220u, Dimensions.width, Dimensions.height, v335, (CMVideoFormatDescriptionRef *)formatDescriptionOut);
          v337 = (const void *)formatDescriptionOut[0].start.value;
          if (v336)
          {
            if (formatDescriptionOut[0].start.value)
              CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
            CFRelease(v335);
LABEL_640:
            v331 = 0;
          }
          else
          {
            formatDescriptionOut[0].start.value = 0;
            CFRelease(v335);
            if (!v337)
              goto LABEL_640;
            cf.value = (CMTimeValue)v337;
            CFRetain(v337);
            CFRelease(v326);
            CFRelease(v337);
            v331 = 1;
            v326 = (const opaqueCMFormatDescription *)v337;
          }
LABEL_641:
          v298 = v302;
        }
        else
        {
          FigSignalErrorAt();
          v331 = 0;
        }
      }
      if (VTIsStereoMVHEVCDecodeSupported() | v331)
      {
        a1 = v873;
        if (CMVideoFormatDescriptionCopyTagCollectionArray(v326, (CFArrayRef *)&v926) && v926.value)
        {
          CFRelease((CFTypeRef)v926.value);
          v926.value = 0;
        }
        if (!FPSupport_CreateTagCollectionFromVideoFormatDescriptionExtensionsWithDefaults(v326, &valuePtr))
        {
LABEL_632:
          v338 = *(_QWORD *)context;
          *(_QWORD *)context = 0;
          v339 = v926.value;
          v926.value = 0;
          v340 = valuePtr.value;
          *((_QWORD *)v300 + 24) = v338;
          *((_QWORD *)v300 + 25) = v340;
          *((_QWORD *)v300 + 26) = v339;
          valuePtr.value = 0;
          if (*(_QWORD *)value)
          {
            CFRelease(*(CFTypeRef *)value);
            *(_QWORD *)value = 0;
          }
          if (v326)
          {
            CFRelease(v326);
            cf.value = 0;
          }
          goto LABEL_636;
        }
      }
      else
      {
        a1 = v873;
        if (!FPSupport_CreateTagCollectionFromVideoFormatDescriptionExtensionsWithDefaults(0, &valuePtr))goto LABEL_632;
      }
      if (valuePtr.value)
      {
        CFRelease((CFTypeRef)valuePtr.value);
        valuePtr.value = 0;
      }
      goto LABEL_632;
    }
LABEL_631:
    v298 = v302;
    goto LABEL_632;
  }
  if (v300[1] != 1986618469)
  {
    v326 = 0;
    goto LABEL_631;
  }
  v301 = FigSignalErrorAt();
LABEL_1054:
  OctaviaSubtitleRenderPipeline = v301;
LABEL_654:
  MEMORY[0x19402EF04](*(_QWORD *)(v294 + 640));
  if (*(_QWORD *)context)
    CFRelease(*(CFTypeRef *)context);
LABEL_656:
  if (*(_QWORD *)value)
    CFRelease(*(CFTypeRef *)value);
  if (v926.value)
    CFRelease((CFTypeRef)v926.value);
  if (valuePtr.value)
    CFRelease((CFTypeRef)valuePtr.value);
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
    goto LABEL_1607;
  v341 = CMBaseObjectGetDerivedStorage();
  formatDescriptionOut[0].start.value = 0;
  LOBYTE(cf.value) = 0;
  *(_QWORD *)context = 0;
  *(_QWORD *)value = 0;
  if (*(_BYTE *)v341)
  {
    FigSignalErrorAt();
  }
  else
  {
    v342 = v341;
    if (!*(_BYTE *)(v341 + 1056))
    {
      v343 = *MEMORY[0x1E0C9AE00];
      v344 = FigAssetGetCMBaseObject(*(_QWORD *)(v341 + 1216));
      v345 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (v345)
        v345(v344, CFSTR("assetProperty_CreationOptionsDictionary"), v343, formatDescriptionOut);
      FigCFDictionaryGetBooleanIfPresent();
      if (LOBYTE(cf.value))
      {
        if (!itemfig_assureBasicsReadyForInspection(a1))
        {
          v346 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(v342 + 968));
          v347 = *(void (**)(uint64_t, const __CFString *, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
          if (!v347)
            goto LABEL_678;
          v347(v346, CFSTR("QuickTimeMetadataReader"), v343, context);
          v348 = *(_QWORD *)context;
          if (!*(_QWORD *)context)
            goto LABEL_677;
          v347 = *(void (**)(uint64_t, const __CFString *, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
          if (!v347)
            goto LABEL_678;
          ((void (*)(uint64_t, const __CFString *, const __CFString *, _QWORD, uint64_t, _BYTE *, _QWORD))v347)(v348, CFSTR("mdta"), CFSTR("com.apple.quicktime.aime-data"), 0, v343, value, 0);
          if (*(_QWORD *)value)
          {
            FigCFDictionaryGetInt64IfPresent();
            FigCFDictionaryGetInt64IfPresent();
            if ((*(_QWORD *)(v342 + 1064) & 0x8000000000000000) == 0 && *(uint64_t *)(v342 + 1072) >= 1)
            {
              LOBYTE(v347) = 1;
              goto LABEL_678;
            }
          }
          else
          {
LABEL_677:
            LOBYTE(v347) = 0;
LABEL_678:
            *(_BYTE *)(v342 + 1057) = (_BYTE)v347;
            *(_BYTE *)(v342 + 1056) = 1;
          }
        }
      }
      else
      {
        *(_WORD *)(v342 + 1056) = 1;
      }
    }
  }
  if (*(_QWORD *)context)
    CFRelease(*(CFTypeRef *)context);
  if (*(_QWORD *)value)
    CFRelease(*(CFTypeRef *)value);
  if (formatDescriptionOut[0].start.value)
    CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
  v349 = CMBaseObjectGetDerivedStorage();
  v350 = *(_QWORD *)(v349 + 8);
  v351 = CMBaseObjectGetDerivedStorage();
  memset(context, 0, 40);
  v922 = 0;
  v923 = 0;
  if ((v842 & 1) == 0)
  {
    CMBaseObjectGetDerivedStorage();
    v356 = 0;
    memset(formatDescriptionOut, 0, 40);
    goto LABEL_1095;
  }
  v352 = v351;
  MEMORY[0x19402EEEC](*(_QWORD *)(v351 + 240));
  v353 = *(const void **)(v352 + 264);
  if (!v353)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v352 + 240));
    v357 = 0;
    v358 = 0;
    v354 = 0;
LABEL_695:
    v359 = 0;
    v830 = 0;
LABEL_696:
    OctaviaSubtitleRenderPipeline = 0;
    goto LABEL_1058;
  }
  v354 = (const __CFArray *)CFRetain(v353);
  MEMORY[0x19402EF04](*(_QWORD *)(v352 + 240));
  if (!v354)
  {
    v357 = 0;
    v358 = 0;
    goto LABEL_695;
  }
  v830 = v354;
  if (CFArrayGetCount(v354) < 1)
  {
    v357 = 0;
    v358 = 0;
    v354 = 0;
    v359 = 0;
    goto LABEL_696;
  }
  v355 = *(__CFArray **)(v349 + 1048);
  v822 = v352;
  if (!v355)
  {
    v360 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(v349 + 1048) = v360;
    if (v360)
      goto LABEL_698;
    goto LABEL_1583;
  }
  CFArrayRemoveAllValues(v355);
LABEL_698:
  v361 = *(const __CFArray **)(v349 + 648);
  if (v361)
  {
    v362 = CFArrayGetCount(v361);
    if (v362 >= 1)
    {
      v363 = v362;
      v364 = 0;
      v365 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v366 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        v367 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v349 + 648), v364);
        v368 = (__CFArray *)*((_QWORD *)v367 + 27);
        if (v368)
        {
          CFArrayRemoveAllValues(v368);
        }
        else
        {
          v369 = CFArrayCreateMutable(v365, 0, v366);
          *((_QWORD *)v367 + 27) = v369;
          if (!v369)
            goto LABEL_1583;
        }
        ++v364;
      }
      while (v363 != v364);
    }
  }
  v370 = *(__CFArray **)(v349 + 1088);
  if (v370)
  {
    CFArrayRemoveAllValues(v370);
    goto LABEL_708;
  }
  v371 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(v349 + 1088) = v371;
  if (!v371)
  {
LABEL_1583:
    v431 = FigSignalErrorAt();
    goto LABEL_1584;
  }
LABEL_708:
  v821 = v350;
  keya = (unsigned __int8 *)v349;
  v825 = CFArrayGetCount(v830);
  if (v825 < 1)
  {
    v823 = 0;
    goto LABEL_845;
  }
  v372 = 0;
  v373 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArrayd = *(CFMutableArrayRef *)(MEMORY[0x1E0CA5270] + 8);
  v914 = *MEMORY[0x1E0CA5270];
  while (2)
  {
    v835 = v372;
    v374 = (void *)CFArrayGetValueAtIndex(v830, v372);
    v375 = *(uint64_t (**)(void *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 48);
    v840 = v374;
    if (v375)
      v823 = v375(v374, v373, &v923);
    else
      v823 = -12782;
    if (!v923 || (v864 = CFArrayGetCount(v923), v864 < 1))
    {
LABEL_834:
      LODWORD(cf.value) = 0;
      LOBYTE(v926.value) = 0;
      v422 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v423 = cf.value;
      if (os_log_type_enabled(v422, v926.value))
        v424 = v423;
      else
        v424 = v423 & 0xFFFFFFFE;
      if (v424)
      {
        *(_DWORD *)value = 136315394;
        *(_QWORD *)&value[4] = "itemfig_createRenderTriplesForMultichannelVideoTargets";
        *(_WORD *)&value[12] = 2112;
        *(_QWORD *)&value[14] = v923;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_840;
    }
    v376 = 0;
    v377 = 1;
    while (2)
    {
      v378 = CFArrayGetValueAtIndex(v923, v376);
      v379 = CMBaseObjectGetDerivedStorage();
      formatDescriptionOut[0].start.value = 0;
      CountOfDataChannels = FigDataChannelGroupGetCountOfDataChannels((uint64_t)v378);
      v860 = v377;
      if (CountOfDataChannels < 1 || (v381 = CountOfDataChannels, (v382 = *(const __CFArray **)(v379 + 648)) == 0))
      {
        v413 = 0;
        v414 = 0;
        v400 = 0;
        v393 = 0;
        UInt32 = 0;
        v385 = 0;
        goto LABEL_785;
      }
      v869 = (CFMutableArrayRef)v376;
      v383 = CFArrayGetCount(v382);
      if (v383 < 1)
      {
        v413 = 0;
        v414 = 0;
        v400 = 0;
        v393 = 0;
        UInt32 = 0;
        v385 = 0;
        goto LABEL_829;
      }
      v384 = v383;
      v385 = CFDictionaryCreateMutable(v373, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v385)
      {
        v413 = 0;
        v414 = 0;
        v400 = 0;
        v393 = 0;
        UInt32 = 0;
LABEL_829:
        v376 = (CFIndex)v869;
        goto LABEL_785;
      }
      LOBYTE(v876) = 0;
      v899 = 0;
      v386 = 0;
      v846 = v381;
      v850 = v378;
      do
      {
        v855 = v386;
        DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)v378, v386);
        v388 = 0;
        v389 = 0;
        do
        {
          v390 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v379 + 648), v388);
          if (FigTagCollectionCreateMutableCopy())
          {
            v414 = 0;
            v400 = 0;
            v393 = 0;
            UInt32 = 0;
            v413 = 0;
            goto LABEL_783;
          }
          if (v390[25])
            FigTagCollectionAddTagsFromCollection();
          if (*(_BYTE *)(v379 + 1057))
          {
            v955.value = (CMTagValue)theArrayd;
            *(_QWORD *)&v955.category = v914;
            CMTagCollectionAddTag((CMMutableTagCollectionRef)formatDescriptionOut[0].start.value, v955);
          }
          if (CMTagCollectionContainsTagsOfCollection((CMTagCollectionRef)formatDescriptionOut[0].start.value, DataChannelByIndex)|| (*(_QWORD *)&v956.category = 0x40000005706C7972, v956.value = 1634630006, CMTagCollectionContainsTag(DataChannelByIndex, v956))&& *(_DWORD *)(v379 + 1000) == *(_DWORD *)v390)
          {
            *(_QWORD *)value = 0;
            UInt32 = (const void *)FigCFNumberCreateUInt32();
            if (!UInt32 || (v392 = FigCFNumberCreateUInt32()) == 0)
            {
              v415 = FigSignalErrorAt();
              v400 = 0;
              v414 = 0;
              v376 = (CFIndex)v869;
              a1 = v873;
              goto LABEL_802;
            }
            v393 = (const void *)v392;
            if (FigCFDictionaryGetValueIfPresent())
            {
              if (*(_QWORD *)value)
              {
                v394 = CFArrayGetCount(*(CFArrayRef *)value);
                if (v394 >= 1)
                {
                  v395 = v394;
                  v396 = 0;
                  while (1)
                  {
                    CFArrayGetValueAtIndex(*(CFArrayRef *)value, v396);
                    if (FigCFEqual())
                      break;
                    if (v395 == ++v396)
                      goto LABEL_741;
                  }
                  v413 = 0;
                  v414 = 0;
                  v400 = 0;
LABEL_783:
                  v376 = (CFIndex)v869;
                  a1 = v873;
                  goto LABEL_785;
                }
              }
            }
            else
            {
              v397 = CFArrayCreateMutable(v373, 0, MEMORY[0x1E0C9B378]);
              CFDictionarySetValue(v385, v393, v397);
              *(_QWORD *)value = v397;
              CFRelease(v397);
            }
LABEL_741:
            CFArrayAppendValue(*(CFMutableArrayRef *)value, UInt32);
            if (*(_BYTE *)(v379 + 1057))
            {
              v957.value = (CMTagValue)theArrayd;
              *(_QWORD *)&v957.category = v914;
              v398 = CMTagCollectionContainsTag(DataChannelByIndex, v957);
              v399 = v899;
              if (v398)
                v399 = 1;
              v899 = v399;
            }
            CFRelease(UInt32);
            CFRelease(v393);
            v389 = 1;
          }
          if (formatDescriptionOut[0].start.value)
          {
            CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
            formatDescriptionOut[0].start.value = 0;
          }
          ++v388;
        }
        while (v388 != v384);
        if (!v389)
        {
          v413 = 0;
          v414 = 0;
          v400 = 0;
          v393 = 0;
          UInt32 = 0;
          goto LABEL_783;
        }
        v386 = v855 + 1;
        LOBYTE(v876) = 1;
        v378 = v850;
      }
      while (v855 + 1 != v846);
      v400 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
      if (CFArrayGetCount(v400) < 1)
      {
        LOBYTE(v876) = 1;
        v376 = (CFIndex)v869;
        a1 = v873;
        goto LABEL_808;
      }
      v401 = 0;
      v402 = 1;
      while (2)
      {
        v403 = CFArrayGetValueAtIndex(v400, v401);
        SInt32 = FigCFNumberGetSInt32();
        v405 = (const __CFArray *)CFDictionaryGetValue(v385, v403);
        v406 = v405;
        if (!v405 || (v407 = CFArrayGetCount(v405), v407 < 2))
        {
          v876 = v402;
          goto LABEL_776;
        }
        v856 = v402;
        v408 = v407 + 1;
        while (2)
        {
          CFArrayGetValueAtIndex(v406, v408 - 2);
          v409 = FigCFNumberGetSInt32();
          v410 = CMBaseObjectGetDerivedStorage();
          v876 = 0;
          if (SInt32 > 1935832171)
          {
            if (SInt32 <= 1952807027)
            {
              if (SInt32 != 1935832172)
              {
                if (SInt32 != 1936684398)
                  goto LABEL_776;
                v411 = (int *)(v410 + 996);
                goto LABEL_770;
              }
LABEL_768:
              v411 = (int *)(v410 + 1016);
              goto LABEL_770;
            }
            if (SInt32 == 1952807028)
              goto LABEL_768;
            if (SInt32 != 1986618469)
              goto LABEL_776;
LABEL_767:
            v411 = (int *)(v410 + 1000);
            goto LABEL_770;
          }
          switch(SInt32)
          {
            case 1635088502:
              goto LABEL_767;
            case 1668047728:
              v411 = (int *)(v410 + 1008);
              break;
            case 1751216244:
              v411 = (int *)(v410 + 1040);
              break;
            default:
              goto LABEL_776;
          }
LABEL_770:
          v412 = *v411;
          if (v412)
          {
            if (v409 != v412)
              CFArrayRemoveValueAtIndex(v406, v408 - 2);
            if ((unint64_t)--v408 <= 1)
            {
              v876 = v856;
              goto LABEL_776;
            }
            continue;
          }
          break;
        }
        v876 = 0;
LABEL_776:
        if (CFArrayGetCount(v406) == 1)
          v402 = v876;
        else
          v402 = 0;
        ++v401;
        v376 = (CFIndex)v869;
        if (v401 < CFArrayGetCount(v400))
          continue;
        break;
      }
      a1 = v873;
      if (!(_BYTE)v402)
      {
        v413 = 0;
        v414 = 0;
        v393 = 0;
        UInt32 = 0;
        goto LABEL_785;
      }
LABEL_808:
      v414 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
      v416 = 0;
      if (v414)
      {
LABEL_809:
        v417 = CFArrayGetCount(v414);
        goto LABEL_811;
      }
      while (1)
      {
        v417 = 0;
LABEL_811:
        if (v416 >= v417)
        {
          if (v899)
            CFArrayAppendValue(*(CFMutableArrayRef *)(v379 + 1088), v840);
          v393 = 0;
          UInt32 = 0;
          v413 = v876;
          goto LABEL_785;
        }
        *(_QWORD *)value = 0;
        CFArrayGetValueAtIndex(v414, v416);
        LODWORD(cf.value) = 0;
        FigCFArrayGetInt32AtIndex();
        if (!LODWORD(cf.value))
          break;
        v415 = itemfig_getTrackStorage((uint64_t)a1, cf.value, value);
        if (v415)
          goto LABEL_831;
        v418 = *(_QWORD *)value;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)value + 216), v840);
        if (!FigCFArrayContainsInt32())
          FigCFArrayAppendInt32();
        v419 = *(_DWORD *)(v418 + 4);
        if (v419 == 1986618469 || v419 == 1635088502)
        {
          v420 = *(const __CFArray **)(v418 + 208);
          if (v420)
          {
            if (CFArrayGetCount(v420) >= 1)
            {
              v421 = *(const void **)(v418 + 232);
              if (v421)
              {
                CFRelease(v421);
                *(_QWORD *)(v418 + 232) = 0;
              }
              *(_QWORD *)(v418 + 232) = CFArrayCreateMutableCopy(v373, 0, *(CFArrayRef *)(v418 + 208));
            }
          }
        }
        ++v416;
        if (v414)
          goto LABEL_809;
      }
      v415 = FigSignalErrorAt();
LABEL_831:
      UInt32 = 0;
LABEL_802:
      v413 = v876;
      v393 = 0;
      if (v415)
        v413 = 0;
LABEL_785:
      if (v385)
        CFRelease(v385);
      if (formatDescriptionOut[0].start.value)
        CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
      if (UInt32)
        CFRelease(UInt32);
      if (v393)
        CFRelease(v393);
      if (v400)
        CFRelease(v400);
      if (v414)
        CFRelease(v414);
      if (!v413)
      {
        v377 = ++v376 < v864;
        if (v376 == v864)
          goto LABEL_834;
        continue;
      }
      break;
    }
    if (!v860)
      goto LABEL_834;
LABEL_840:
    if (v923)
    {
      CFRelease(v923);
      v923 = 0;
    }
    v372 = v835 + 1;
    if (v835 + 1 != v825)
      continue;
    break;
  }
LABEL_845:
  v425 = (const __CFArray *)*((_QWORD *)keya + 136);
  if (!v425 || CFArrayGetCount(v425) < 1)
  {
    itemfig_releaseAIMEDataAndAllAIMEDataChannelResources();
    OctaviaSubtitleRenderPipeline = v823;
    goto LABEL_874;
  }
  v426 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v426 + 1080))
  {
    v427 = v426;
    v354 = *(const __CFArray **)(v426 + 128);
    if (v354)
    {
      if (*(_BYTE *)(v426 + 1057))
      {
        formatDescriptionOut[0].start.value = 0;
        v428 = *(_QWORD *)(v426 + 1072);
        v429 = *(_QWORD *)(v426 + 1064);
        v430 = *(uint64_t (**)(const __CFArray *, uint64_t, uint64_t, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (!v430)
        {
          v357 = 0;
          v358 = 0;
          v354 = 0;
          v359 = 0;
          OctaviaSubtitleRenderPipeline = 4294954514;
          goto LABEL_1058;
        }
        v431 = v430(v354, v428, v429, v427 + 1080, formatDescriptionOut);
        if (!(_DWORD)v431)
          goto LABEL_852;
LABEL_1584:
        OctaviaSubtitleRenderPipeline = v431;
        goto LABEL_1585;
      }
      v357 = 0;
      v358 = 0;
      v354 = 0;
    }
    else
    {
      v357 = 0;
      v358 = 0;
    }
    v359 = 0;
    OctaviaSubtitleRenderPipeline = 4294954368;
    goto LABEL_1058;
  }
LABEL_852:
  v432 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)value = 0;
  cf.value = 0;
  *(_OWORD *)&formatDescriptionOut[0].start.value = *MEMORY[0x1E0CA5270];
  v433 = CMTagCollectionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const CMTag *)formatDescriptionOut, 1, (CMTagCollectionRef *)&cf);
  if ((_DWORD)v433)
    goto LABEL_1642;
  v434 = *(const __CFArray **)(v432 + 1088);
  if (!v434 || (v435 = CFArrayGetCount(v434), v435 < 1))
  {
LABEL_866:
    OctaviaSubtitleRenderPipeline = 0;
    goto LABEL_867;
  }
  v436 = v435;
  v437 = 0;
  while (2)
  {
    v438 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v432 + 1088), v437);
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v432 + 1096), v438))
    {
LABEL_865:
      if (v436 == ++v437)
        goto LABEL_866;
      continue;
    }
    break;
  }
  if (*(_QWORD *)(v432 + 1080))
  {
    v439 = cf.value;
    v440 = *(uint64_t (**)(const void *, _QWORD, CMTimeValue, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 40);
    if (!v440)
    {
      OctaviaSubtitleRenderPipeline = 4294954514;
      goto LABEL_867;
    }
    v433 = v440(v438, 0, v439, value);
    if ((_DWORD)v433)
      goto LABEL_1642;
    CMNotificationCenterGetDefaultLocalCenter();
    v433 = FigNotificationCenterAddWeakListener();
    if ((_DWORD)v433)
      goto LABEL_1642;
    v441 = *(_QWORD *)value;
    v442 = *(_QWORD *)(v432 + 1080);
    v443 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v443)
      v443(v441, v442);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v432 + 1096), v438, *(const void **)value);
    if (*(_QWORD *)value)
    {
      CFRelease(*(CFTypeRef *)value);
      *(_QWORD *)value = 0;
    }
    goto LABEL_865;
  }
  v433 = FigSignalErrorAt();
LABEL_1642:
  OctaviaSubtitleRenderPipeline = v433;
LABEL_867:
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
  if (*(_QWORD *)value)
    CFRelease(*(CFTypeRef *)value);
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
  {
LABEL_1585:
    v357 = 0;
    v358 = 0;
    v354 = 0;
    v359 = 0;
    goto LABEL_1058;
  }
LABEL_874:
  v444 = (const __CFArray *)*((_QWORD *)keya + 131);
  if (!v444 || (v445 = CFArrayGetCount(v444), v445 < 1))
  {
    theArraye = 0;
    v870 = 0;
LABEL_1052:
    v354 = 0;
    v359 = 0;
    *((_QWORD *)&v944 + 1) = theArraye;
    *(_QWORD *)&v945 = v870;
    v357 = 0;
    v358 = 0;
    goto LABEL_1058;
  }
  v446 = v445;
  v870 = 0;
  theArraye = 0;
  v447 = 0;
  v448 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v865 = (void *)*MEMORY[0x1E0C9AE50];
  v841 = (void *)*MEMORY[0x1E0C9AE40];
  v857 = v445;
  v915 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    v449 = OctaviaSubtitleRenderPipeline;
    v921 = 0;
    v920 = 0;
    FigCFArrayGetInt32AtIndex();
    itemfig_getTrackStorage((uint64_t)a1, v921, &v920);
    v450 = v920;
    if (!v920)
      goto LABEL_1532;
    v451 = (const __CFArray *)*((_QWORD *)v920 + 27);
    if (!v451 || CFArrayGetCount(v451) < 1)
    {
      OctaviaSubtitleRenderPipeline = v449;
      goto LABEL_1045;
    }
    v452 = v450[1];
    v453 = v452 == 1986618469 || v452 == 1635088502;
    v900 = v447;
    if (!v453)
      break;
    formatDescriptionOut[0].start.value = 0;
    *(_QWORD *)value = 0;
    cf.value = 0;
    itemfig_getTrackStorage((uint64_t)a1, v921, formatDescriptionOut);
    v454 = formatDescriptionOut[0].start.value;
    if (formatDescriptionOut[0].start.value)
    {
      if (!FigTagCollectionCreateMutableCopy())
      {
        if (*(_QWORD *)(v454 + 200))
          FigTagCollectionAddTagsFromCollection();
        v455 = *(const void **)(v454 + 264);
        if (v455)
        {
          CFRelease(v455);
          *(_QWORD *)(v454 + 264) = 0;
        }
        v456 = *(const __CFArray **)(v454 + 216);
        if (v456)
        {
          v457 = CFArrayGetCount(v456);
          if (v457 >= 1)
          {
            v458 = v457;
            for (mm = 0; mm != v458; ++mm)
            {
              v460 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v454 + 216), mm);
              v461 = *(void (**)(const void *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
              if (v461)
                v461(v460, v448, &cf);
              if (cf.value)
              {
                v462 = CFArrayGetCount((CFArrayRef)cf.value);
                if (v462 >= 1)
                {
                  v463 = v462;
                  v464 = 0;
                  while (1)
                  {
                    v465 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf.value, v464);
                    v466 = (const OpaqueCMTagCollection *)CFDictionaryGetValue(v465, CFSTR("ChannelDescription"));
                    if (CMTagCollectionContainsTagsOfCollection(*(CMTagCollectionRef *)value, v466))
                    {
                      v467 = (const __CFDictionary *)CFDictionaryGetValue(v465, CFSTR("ChannelSpecificSettings"));
                      v468 = CFDictionaryGetValue(v467, CFSTR("DestinationPixelBufferAttributes"));
                      if (v468)
                        break;
                    }
                    if (v463 == ++v464)
                      goto LABEL_905;
                  }
                  v469 = *(const void **)(v454 + 264);
                  *(_QWORD *)(v454 + 264) = v468;
                  CFRetain(v468);
                  if (v469)
                    CFRelease(v469);
                }
LABEL_905:
                v448 = v915;
                if (cf.value)
                {
                  CFRelease((CFTypeRef)cf.value);
                  cf.value = 0;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    if (*(_QWORD *)value)
      CFRelease(*(CFTypeRef *)value);
    a1 = v873;
    v470 = v822;
    if (a3)
    {
      v471 = (const void *)*((_QWORD *)v450 + 33);
      if (v471)
      {
        v472 = (const __CFDictionary *)CFRetain(v471);
      }
      else
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v822 + 488));
        v496 = *(const void **)(v822 + 480);
        if (v496)
          v472 = (const __CFDictionary *)CFRetain(v496);
        else
          v472 = 0;
        MEMORY[0x19402EF04](*(_QWORD *)(v822 + 488));
      }
      OctaviaSubtitleRenderPipeline = FPSupport_CopyDestinationPixelBufferAttributesWithIOSurfaceSupport(v472, 1, (CFDictionaryRef *)&v922);
      if (v472)
        CFRelease(v472);
      if ((_DWORD)OctaviaSubtitleRenderPipeline)
        goto LABEL_1534;
    }
    if (!theArraye)
    {
      theArraye = CFArrayCreateMutable(v448, 0, &kRenderTripleArrayCallbacks);
      if (!theArraye)
      {
        OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
        v357 = 0;
        v354 = 0;
        v359 = 0;
        goto LABEL_1536;
      }
    }
    v502 = v920;
    v503 = (const void *)*((_QWORD *)v920 + 31);
    if (v503)
    {
      CFRelease(v503);
      *((_QWORD *)v502 + 31) = 0;
    }
    v504 = (__CFArray *)*((_QWORD *)v502 + 28);
    if (v504)
      CFArrayRemoveAllValues(v504);
    else
      *((_QWORD *)v502 + 28) = CFArrayCreateMutable(v448, 0, MEMORY[0x1E0C9B378]);
    v505 = (const __CFArray *)*((_QWORD *)v502 + 29);
    if (v505)
      v505 = (const __CFArray *)CFArrayGetCount(v505);
    if ((unint64_t)v505 <= 1)
      v506 = 1;
    else
      v506 = (uint64_t)v505;
    if (v506 >= 1)
    {
      v507 = v506 + 1;
      do
      {
        formatDescriptionOut[0].start.value = 0;
        v477 = FigImageQueueTableCreate(v448, formatDescriptionOut);
        if ((_DWORD)v477)
          goto LABEL_1506;
        CFArrayAppendValue(*((CFMutableArrayRef *)v502 + 28), (const void *)formatDescriptionOut[0].start.value);
        if (formatDescriptionOut[0].start.value)
          CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
      }
      while (--v507 > 1);
    }
    *(_DWORD *)context = *v502;
    tagd = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&formatDescriptionOut[0].start.value = *MEMORY[0x1E0CA2E18];
    v508 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    formatDescriptionOut[0].start.epoch = v508;
    v477 = fp_createCommonRenderPipelineOptionsForTrack(v873, 0, (uint64_t)formatDescriptionOut, *(unsigned int *)context, 1986618469, 0, (__CFDictionary **)&context[8]);
    if ((_DWORD)v477)
      goto LABEL_1506;
    if (!*(_QWORD *)&context[24])
    {
      *(_QWORD *)value = 0;
      v509 = *v502;
      *(_OWORD *)&formatDescriptionOut[0].start.value = tagd;
      formatDescriptionOut[0].start.epoch = v508;
      v510 = fp_createCommonRenderPipelineOptionsForTrack(v873, 0, (uint64_t)formatDescriptionOut, v509, 1986618469, 1, (__CFDictionary **)&context[32]);
      if ((_DWORD)v510)
      {
        v526 = v510;
LABEL_1631:
        v354 = 0;
        v359 = 0;
        goto LABEL_1596;
      }
      v511 = (const __CFArray *)*((_QWORD *)v502 + 28);
      if (!v511
        || CFArrayGetCount(v511) != 1
        || (v512 = (const __CFArray *)*((_QWORD *)v502 + 29)) != 0 && CFArrayGetCount(v512))
      {
        v513 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        v354 = CFArrayCreateMutable(v448, 0, MEMORY[0x1E0C9B378]);
        v514 = CFArrayCreateMutable(v448, 0, v513);
        v359 = v514;
        if (!v354 || !v514)
          goto LABEL_1594;
        for (nn = 0; ; ++nn)
        {
          v516 = (const __CFArray *)*((_QWORD *)v502 + 28);
          if (v516)
            v516 = (const __CFArray *)CFArrayGetCount(v516);
          if (nn >= (uint64_t)v516)
            goto LABEL_1014;
          cf.value = 0;
          v517 = CFArrayGetValueAtIndex(*((CFArrayRef *)v502 + 28), nn);
          matched = FigImageQueueTableUpdateToMatchOutputsArray((uint64_t)v517, *((const __CFArray **)v502 + 27), *((void **)keya + 41), (void (*)(void *, uint64_t))fp_imageQueueTableCreatedImageQueueCallback, (void (*)(const void *, uint64_t))fp_imageQueueTableWillReleaseImageQueueCallback, (uint64_t)a1);
          if ((_DWORD)matched)
            goto LABEL_1595;
          matched = FigImageQueueTableCopyFigImageQueueArray((uint64_t)v517, &cf.value);
          if ((_DWORD)matched)
            goto LABEL_1595;
          v519 = CFArrayGetCount((CFArrayRef)cf.value);
          v958.location = 0;
          v958.length = v519;
          CFArrayAppendArray(v354, (CFArrayRef)cf.value, v958);
          if (cf.value)
            CFRelease((CFTypeRef)cf.value);
          if (v519 >= 1)
          {
            v520 = (const __CFArray *)*((_QWORD *)v502 + 29);
            if (v520)
              v520 = (const __CFArray *)CFArrayGetCount(v520);
            if (nn < (uint64_t)v520)
            {
              formatDescriptionOut[0].start.value = 0;
              *(_QWORD *)&formatDescriptionOut[0].start.timescale = 0;
              v926.value = 0;
              if (!FigCFArrayGetValueAtIndex())
                goto LABEL_1594;
              FigTagCollectionGetTagsWithCategory();
              if (v926.value != 1)
                goto LABEL_1594;
              FigTagGetSInt64Value();
              v521 = CFDictionaryCreateMutable(v448, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!v521)
              {
                a1 = v873;
LABEL_1594:
                matched = FigSignalErrorAt();
LABEL_1595:
                v526 = matched;
LABEL_1596:
                v357 = theArraye;
                v358 = v870;
                OctaviaSubtitleRenderPipeline = v526;
                goto LABEL_1058;
              }
              v522 = v521;
              FigCFDictionarySetInt32();
              v523 = v519 + 1;
              do
              {
                CFArrayAppendValue(v359, v522);
                --v523;
              }
              while (v523 > 1);
              CFRelease(v522);
              a1 = v873;
              v448 = v915;
            }
          }
        }
      }
      v524 = CFArrayGetValueAtIndex(*((CFArrayRef *)v502 + 28), 0);
      FigImageQueueArrayForVideoRenderPipeline = fp_createFigImageQueueArrayForVideoRenderPipeline((uint64_t)v873, *v502, 0, 0, 0, 0, 0, 0, *((const __CFArray **)v502 + 27), (uint64_t)v524, 1, value);
      if ((_DWORD)FigImageQueueArrayForVideoRenderPipeline)
        goto LABEL_1533;
      v359 = 0;
      v354 = *(const __CFArray **)value;
LABEL_1014:
      v526 = fp_buildVideoRenderPipelineForTrack(v821, (uint64_t)a1, *v502, v922, 0, *((_QWORD *)v502 + 3), 0, 1, v354, v359, 0, &context[24]);
      if (v354)
        CFRelease(v354);
      if (v359)
        CFRelease(v359);
      if ((_DWORD)v526)
        goto LABEL_1631;
      v470 = v822;
    }
    if (v922)
    {
      CFRelease(v922);
      v922 = 0;
    }
    v527 = *(CFTypeRef *)&context[24];
    if (*(_QWORD *)&context[24])
      v527 = CFRetain(*(CFTypeRef *)&context[24]);
    *((_QWORD *)v502 + 31) = v527;
    CFArrayAppendValue(theArraye, context);
    itemfig_resetRenderTriple((uint64_t)context);
    v528 = 0;
    v529 = v920;
    while (1)
    {
      v530 = (const __CFArray *)*((_QWORD *)v529 + 28);
      if (v530)
        v530 = (const __CFArray *)CFArrayGetCount(v530);
      if (v528 >= (uint64_t)v530)
        break;
      v531 = CFArrayGetValueAtIndex(*((CFArrayRef *)v529 + 28), v528);
      FigImageQueueTableSetTimebase((uint64_t)v531, *((void **)keya + 41));
      ++v528;
    }
    v532 = *(unsigned __int8 *)(v470 + 232);
    v533 = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v529 + 31));
    v534 = *(void (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v534)
    {
      if (v532)
        v535 = v865;
      else
        v535 = v841;
      v534(v533, CFSTR("PreventDisplaySleepDuringVideoPlayback"), v535);
    }
    v536 = *((_QWORD *)keya + 143);
    if (v536)
    {
      v537 = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v529 + 31));
      v538 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
      if (v538)
        v538(v537, CFSTR("VideoEnhancementMode"), v536);
    }
    v539 = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v529 + 31));
    v540 = *(void (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v540)
      v540(v539, CFSTR("ObeyEmptyMediaMarkers"), v865);
    v541 = keya[1137];
    v542 = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v529 + 31));
    v543 = *(void (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v543)
    {
      if (v541)
        v544 = v865;
      else
        v544 = v841;
      v543(v542, CFSTR("PropagatePerFrameHDRDisplayMetadata"), v544);
    }
    itemfig_updateRotationOnVideoRenderPipeline((uint64_t)a1, *v529);
    itemfig_applyEnhancementFilterOptions((uint64_t)a1, *v529);
    itemfig_applyDisableColorMatching((uint64_t)a1, *v529);
    OctaviaSubtitleRenderPipeline = 0;
    v446 = v857;
    v447 = v900;
LABEL_1045:
    if (++v447 == (char *)v446)
      goto LABEL_1052;
  }
  if (!v870)
  {
    v870 = CFArrayCreateMutable(v448, 0, &kRenderTripleArrayCallbacks);
    if (!v870)
    {
      OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
      v358 = 0;
      v354 = 0;
      v359 = 0;
      v357 = theArraye;
      goto LABEL_1058;
    }
  }
  v473 = (const void *)*((_QWORD *)v450 + 32);
  if (v473)
  {
    CFRelease(v473);
    *((_QWORD *)v450 + 32) = 0;
  }
  if (!*((_QWORD *)v450 + 30))
  {
    v474 = CFDictionaryCreateMutable(v448, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *((_QWORD *)v450 + 30) = v474;
    if (!v474)
    {
LABEL_1532:
      FigImageQueueArrayForVideoRenderPipeline = FigSignalErrorAt();
LABEL_1533:
      OctaviaSubtitleRenderPipeline = FigImageQueueArrayForVideoRenderPipeline;
LABEL_1534:
      v354 = 0;
      v359 = 0;
      goto LABEL_1535;
    }
  }
  v475 = v450[1];
  *(_DWORD *)context = *v450;
  tagb = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&formatDescriptionOut[0].start.value = *MEMORY[0x1E0CA2E18];
  v476 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  formatDescriptionOut[0].start.epoch = v476;
  v477 = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)formatDescriptionOut, *(unsigned int *)context, v475, 0, (__CFDictionary **)&context[8]);
  if ((_DWORD)v477)
  {
LABEL_1506:
    v354 = 0;
    v359 = 0;
    OctaviaSubtitleRenderPipeline = v477;
    goto LABEL_1535;
  }
  itemfig_reuseExistingRenderPipeline(*((_QWORD *)keya + 56), (uint64_t)context);
  v478 = *(_QWORD *)&context[24];
  if (!*(_QWORD *)&context[24])
  {
    v479 = *v450;
    v480 = v450[1];
    *(_OWORD *)&formatDescriptionOut[0].start.value = tagb;
    formatDescriptionOut[0].start.epoch = v476;
    v477 = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)formatDescriptionOut, v479, v480, 1, (__CFDictionary **)&context[32]);
    if ((_DWORD)v477)
      goto LABEL_1506;
    v477 = FigRenderPipelineCreateForFanOutToArrayOfSampleBufferConsumers(v448, 0, &context[24]);
    if ((_DWORD)v477)
      goto LABEL_1506;
    v478 = *(_QWORD *)&context[24];
  }
  v836 = v478;
  v481 = (const __CFArray *)*((_QWORD *)v450 + 27);
  v482 = (const __CFDictionary *)*((_QWORD *)v450 + 30);
  v847 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v929 = 0;
  v928 = 0;
  *(_OWORD *)&cf.value = tagb;
  cf.epoch = v476;
  *(_OWORD *)&v926.value = tagb;
  v926.epoch = v476;
  FPSupport_getDataQueueWaterLevels(&cf, &v926);
  if (!v481)
  {
    v485 = CFArrayCreateMutable(v448, 0, MEMORY[0x1E0C9B378]);
    if (v485)
      goto LABEL_947;
LABEL_1048:
    v499 = FigSignalErrorAt();
    v446 = v857;
    v447 = v900;
    goto LABEL_955;
  }
  v483 = CFArrayGetCount(v481);
  v484 = CFArrayCreateMutable(v448, v483, MEMORY[0x1E0C9B378]);
  if (!v484)
    goto LABEL_1048;
  v485 = v484;
  if (v483 < 1)
  {
LABEL_947:
    v497 = FigRenderPipelineGetFigBaseObject(v836);
    v498 = *(uint64_t (**)(uint64_t, const __CFString *, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (v498)
      v499 = v498(v497, CFSTR("OutputArrayOfSampleBufferConsumers"), v485);
    else
      v499 = 4294954514;
    v500 = v485;
    v446 = v857;
    v447 = v900;
    goto LABEL_953;
  }
  v486 = 0;
  tagc = v483;
  while (1)
  {
    v487 = CFArrayGetValueAtIndex(v481, v486);
    v488 = CFDictionaryGetValue(v482, v487);
    *(_QWORD *)v929 = v488;
    if (v488)
    {
      CFRetain(v488);
      goto LABEL_936;
    }
    valuePtr = v926;
    type = cf;
    v489 = *(uint64_t (**)(const void *, _QWORD, CMTimeRange *, _BYTE *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v489)
      goto LABEL_951;
    formatDescriptionOut[0].start = valuePtr;
    *(CMTime *)value = type;
    v490 = v489(v487, 0, formatDescriptionOut, value, v929);
    if ((_DWORD)v490)
      break;
    v851 = *(_QWORD *)(v847 + 328);
    v491 = FigDataQueueGetCMBaseObject(*(_QWORD *)v929);
    v492 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v492)
      v492(v491, CFSTR("ControlTimebase"), v851);
    CFDictionarySetValue(v482, v487, *(const void **)v929);
    a1 = v873;
LABEL_936:
    v493 = FigDataQueueGetCMBaseObject(*(_QWORD *)v929);
    v494 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v494)
    {
LABEL_951:
      v499 = 4294954514;
LABEL_952:
      v500 = v485;
      v446 = v857;
      v447 = v900;
      v448 = v915;
      goto LABEL_953;
    }
    v495 = v494(v493, CFSTR("SampleBufferConsumer"), v915, &v928);
    if ((_DWORD)v495)
    {
      v499 = v495;
      goto LABEL_952;
    }
    CFArrayAppendValue(v485, v928);
    if (*(_QWORD *)v929)
    {
      CFRelease(*(CFTypeRef *)v929);
      *(_QWORD *)v929 = 0;
    }
    if (v928)
    {
      CFRelease(v928);
      v928 = 0;
    }
    if (tagc == ++v486)
    {
      v448 = v915;
      goto LABEL_947;
    }
  }
  v499 = v490;
  a1 = v873;
  v446 = v857;
  v447 = v900;
  v448 = v915;
  v500 = v485;
LABEL_953:
  CFRelease(v500);
  if (*(_QWORD *)v929)
    CFRelease(*(CFTypeRef *)v929);
LABEL_955:
  if (v928)
    CFRelease(v928);
  if (!(_DWORD)v499)
  {
    v501 = *(CFTypeRef *)&context[24];
    if (*(_QWORD *)&context[24])
      v501 = CFRetain(*(CFTypeRef *)&context[24]);
    *((_QWORD *)v450 + 32) = v501;
    CFArrayAppendValue(v870, context);
    itemfig_resetRenderTriple((uint64_t)context);
    OctaviaSubtitleRenderPipeline = 0;
    goto LABEL_1045;
  }
  v809 = v499;
  v354 = 0;
  v359 = 0;
  OctaviaSubtitleRenderPipeline = v809;
LABEL_1535:
  v357 = theArraye;
LABEL_1536:
  v358 = v870;
LABEL_1058:
  if (v922)
    CFRelease(v922);
  if (v357)
    CFRelease(v357);
  if (v358)
    CFRelease(v358);
  if (v830)
    CFRelease(v830);
  if (v923)
    CFRelease(v923);
  if (v354)
    CFRelease(v354);
  if (v359)
    CFRelease(v359);
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
    goto LABEL_1607;
LABEL_1073:
  v545 = CMBaseObjectGetDerivedStorage();
  v356 = 0;
  memset(formatDescriptionOut, 0, 40);
  if (!v842)
    goto LABEL_1095;
  v546 = v545;
  v547 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v548 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kRenderTripleArrayCallbacks);
  if (!v548)
  {
    OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
    itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
    *((_QWORD *)&v945 + 1) = 0;
    if ((_DWORD)OctaviaSubtitleRenderPipeline)
      goto LABEL_1607;
    goto LABEL_1096;
  }
  v356 = v548;
  v871 = CFArrayGetCount(*(CFArrayRef *)(v546 + 648));
  if (v871 < 1)
  {
LABEL_1095:
    itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
    *((_QWORD *)&v945 + 1) = v356;
LABEL_1096:
    if (v843)
    {
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v205 = 0;
      v894 = 0;
      theArrayb = 0;
      v910 = 0;
      OctaviaSubtitleRenderPipeline = 0;
      goto LABEL_1659;
    }
    v567 = *(const __CFArray **)(v917 + 648);
    if (v567)
    {
      v568 = CFArrayGetCount(v567);
      allocatorc = v568 > 0;
      if (v568 < 1)
      {
        allocatorc = 0;
      }
      else
      {
        for (i1 = 0; i1 != v568; ++i1)
        {
          v570 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v917 + 648), i1);
          v571 = v570;
          v572 = (const void *)v570[2];
          if (v572)
          {
            v573 = *((_DWORD *)v570 + 1);
            v574 = v573 == 1986618469 || v573 == 1635088502;
            if (!v574
              || (FigStopForwardingMediaServicesProcessDeathNotification(), (v572 = (const void *)v571[2]) != 0))
            {
              CFRelease(v572);
              v571[2] = 0;
            }
          }
          v575 = (const void *)v571[31];
          if (v575)
          {
            CFRelease(v575);
            v571[31] = 0;
          }
          v576 = (const void *)v571[32];
          if (v576)
          {
            CFRelease(v576);
            v571[32] = 0;
          }
          v577 = (const __CFArray *)v571[21];
          if (v577)
          {
            v578 = CFArrayGetCount(v577);
            if (v578 >= 1)
            {
              v579 = v578;
              for (i2 = 0; i2 != v579; ++i2)
              {
                v581 = CFArrayGetValueAtIndex((CFArrayRef)v571[21], i2);
                v582 = (const void *)v581[6];
                if (v582)
                {
                  CFRelease(v582);
                  v581[6] = 0;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      allocatorc = 0;
      v568 = 0;
    }
    v583 = 0;
    v584 = 0;
    do
    {
      v585 = *(_QWORD *)((char *)&v940 + v583);
      if (v585)
        v585 = CFArrayGetCount((CFArrayRef)v585);
      v584 += v585;
      v583 += 8;
    }
    while (v583 != 112);
    theArrayb = (int *)malloc_type_calloc(v584, 4uLL, 0x100004052888210uLL);
    if (theArrayb)
    {
      v910 = (const void **)malloc_type_calloc(v584, 8uLL, 0x2004093837F09uLL);
      if (!v910)
      {
        OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v205 = 0;
        v894 = 0;
        goto LABEL_1608;
      }
      v872 = (uint64_t *)(v917 + 352);
      v894 = malloc_type_calloc(v584, 8uLL, 0x6004044C4A2DFuLL);
      if (!v894)
      {
        OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v205 = 0;
        v894 = 0;
        goto LABEL_1659;
      }
      v586 = 0;
      formatDescriptionOut[0].start.value = 0;
      tage = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        v587 = (const __CFArray *)*((_QWORD *)&v940 + v586);
        if (v587)
          v588 = CFArrayGetCount(*((CFArrayRef *)&v940 + v586));
        else
          v588 = 0;
        if (v586 <= 6 && ((1 << v586) & 0x58) != 0 && v588 >= 1)
        {
          v589 = 0;
          do
          {
            while (1)
            {
              v590 = *((_QWORD *)CFArrayGetValueAtIndex(v587, v589) + 3);
              if (v590)
              {
                v591 = FigRenderPipelineGetFigBaseObject(v590);
                v592 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v592)
                  break;
              }
              if (++v589 >= v588)
                goto LABEL_1149;
            }
            v593 = v592(v591, CFSTR("HDRCrossTalker"), tage, formatDescriptionOut);
            if (formatDescriptionOut[0].start.value)
              v594 = v593 == 0;
            else
              v594 = 0;
            ++v589;
          }
          while (!v594 && v589 < v588);
        }
LABEL_1149:
        if (v586 > 0xC)
          break;
        ++v586;
      }
      while (!formatDescriptionOut[0].start.value);
      if (formatDescriptionOut[0].start.value
        || (FigCrossTalkerCreate((uint64_t)tage, formatDescriptionOut), formatDescriptionOut[0].start.value))
      {
        for (i3 = 0; i3 != 14; ++i3)
        {
          v597 = (const __CFArray *)*((_QWORD *)&v940 + i3);
          if (v597)
            v598 = CFArrayGetCount(*((CFArrayRef *)&v940 + i3));
          else
            v598 = 0;
          if (i3 <= 6 && ((1 << i3) & 0x58) != 0 && v598 >= 1)
          {
            for (i4 = 0; i4 != v598; ++i4)
            {
              v600 = *((_QWORD *)CFArrayGetValueAtIndex(v597, i4) + 3);
              if (v600)
              {
                v601 = formatDescriptionOut[0].start.value;
                v602 = FigRenderPipelineGetFigBaseObject(v600);
                v603 = *(void (**)(uint64_t, const __CFString *, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                if (v603)
                  v603(v602, CFSTR("HDRCrossTalker"), v601);
              }
            }
          }
        }
        if (formatDescriptionOut[0].start.value)
          CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
      }
      v604 = 0;
      v605 = 0;
      do
      {
        v878 = v604;
        v606 = (const __CFArray *)*((_QWORD *)&v940 + v604);
        if (v606)
        {
          v607 = CFArrayGetCount(*((CFArrayRef *)&v940 + v604));
          if (v607 >= 1)
          {
            v608 = v607;
            for (i5 = 0; i5 != v608; ++i5)
            {
              v610 = CFArrayGetValueAtIndex(v606, i5);
              theArrayb[v605] = *(_DWORD *)v610;
              v910[v605] = (const void *)v610[3];
              v894[v605] = v610[4];
              if (allocatorc)
              {
                v611 = v610;
                v612 = 0;
                while (1)
                {
                  v613 = (const __CFArray **)CFArrayGetValueAtIndex(*(CFArrayRef *)(v917 + 648), v612);
                  if (*(_DWORD *)v613 == *(_DWORD *)v611)
                    break;
                  if (v568 == ++v612)
                    goto LABEL_1176;
                }
                v614 = v613;
                switch((_DWORD)v878)
                {
                  case 0xB:
                    v617 = v613[21];
                    if (v617)
                    {
                      v618 = CFArrayGetCount(v617);
                      if (v618 >= 1)
                      {
                        v619 = v618;
                        for (i6 = 0; i6 != v619; ++i6)
                        {
                          v621 = CFArrayGetValueAtIndex(v614[21], i6);
                          if (*((_DWORD *)v621 + 7) == *((_DWORD *)v611 + 4))
                          {
                            v622 = v621;
                            if (!v621[6])
                            {
                              v623 = (CFTypeRef)v611[3];
                              if (v623)
                                v623 = CFRetain(v623);
                              v622[6] = v623;
                            }
                          }
                        }
                      }
                    }
                    break;
                  case 0xA:
                    if (!v613[32])
                    {
                      v616 = (CFTypeRef)v611[3];
                      if (v616)
                        v616 = CFRetain(v616);
                      v614[32] = (CFArrayRef)v616;
                    }
                    break;
                  case 9:
                    if (!v613[31])
                    {
                      v615 = (CFTypeRef)v611[3];
                      if (v615)
                        v615 = CFRetain(v615);
                      v614[31] = (CFArrayRef)v615;
                    }
                    break;
                  default:
                    if (!v613[2])
                    {
                      v624 = (const void *)v611[3];
                      if (v624)
                      {
                        v625 = (const __CFArray *)CFRetain(v624);
                        v614[2] = v625;
                        if (v625)
                        {
                          v626 = *((_DWORD *)v614 + 1);
                          if (v626 == 1986618469 || v626 == 1635088502)
                            FigStartForwardingMediaServicesProcessDeathNotification();
                        }
                      }
                      else
                      {
                        v614[2] = 0;
                      }
                    }
                    break;
                }
              }
LABEL_1176:
              ++v605;
            }
          }
        }
        v604 = v878 + 1;
      }
      while (v878 != 13);
      v42 = CFSetCreateMutable(tage, 0, MEMORY[0x1E0C9B3B0]);
      v628 = (uint64_t *)(v917 + 352);
      a1 = v873;
      if (v605 >= 1)
      {
        v629 = v910;
        v630 = v605;
        do
        {
          if (*v629)
            CFSetAddValue(v42, *v629);
          ++v629;
          --v630;
        }
        while (v630);
      }
      v631 = v852;
      if (*(_QWORD *)(v852 + 168))
      {
        if (*(_QWORD *)(v917 + 128))
        {
          CMByteStreamGetCMBaseObject();
          FigCRABSGetClassID();
          IsMemberOfClass = CMBaseObjectIsMemberOfClass();
          v631 = v852;
          if (IsMemberOfClass)
          {
            v633 = (const void *)FigCFNumberCreateSInt32();
            v634 = CMByteStreamGetCMBaseObject();
            v635 = *(void (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
            if (v635)
              v635(v634, *MEMORY[0x1E0CA2FA8], v633);
            v631 = v852;
            if (v633)
            {
              CFRelease(v633);
              v631 = v852;
            }
          }
        }
      }
      if (*v872)
      {
        v636 = FigPlaybackBossSetTrackList(*v872, v605, theArrayb, v910, (uint64_t)v894);
        v40 = 0;
        v41 = 0;
        if (!(_DWORD)v636)
        {
          v205 = 0;
          v637 = v917;
          goto LABEL_1311;
        }
        v205 = 0;
LABEL_1628:
        OctaviaSubtitleRenderPipeline = v636;
        goto LABEL_1659;
      }
      v638 = *(_BYTE *)(v631 + 78) != 0;
      v639 = CMBaseObjectGetDerivedStorage();
      formatDescriptionOut[0].start.value = 0;
      v640 = *(_QWORD *)(v639 + 128);
      if (v42 && v640)
      {
        *(_DWORD *)context = 0;
        CFSetApplyFunction(v42, (CFSetApplierFunction)fp_interrogateRenderPipeline, context);
        if ((context[0] & 1) != 0)
          goto LABEL_1244;
        v641 = ((*(_DWORD *)context >> 1) & 1) == 0;
      }
      else
      {
        if (!v640)
          goto LABEL_1244;
        v641 = 1;
      }
      *(_QWORD *)context = 0;
      v642 = CMByteStreamGetCMBaseObject();
      v643 = *(void (**)(uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v643)
      {
        v643(v642, *MEMORY[0x1E0CA2F40], 0, context);
        v644 = *(_QWORD *)context;
        v645 = *MEMORY[0x1E0C9AE50];
        if (*(_QWORD *)context)
          CFRelease(*(CFTypeRef *)context);
        if (v645 != v644)
        {
LABEL_1235:
          v646 = CMByteStreamGetCMBaseObject();
          v647 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
          if (!v647)
            goto LABEL_1242;
          if (v647(v646, *MEMORY[0x1E0CA2F50], 0, formatDescriptionOut) || formatDescriptionOut[0].start.value == 0)
            goto LABEL_1242;
          if (v645 != formatDescriptionOut[0].start.value)
          {
LABEL_1241:
            CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
LABEL_1242:
            v638 |= 8u;
LABEL_1245:
            v205 = CFDictionaryCreateMutable(tage, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v649 = (_OWORD *)(v917 + 236);
            if ((*(_DWORD *)(v917 + 248) & 0x1D) == 1)
            {
              *(_OWORD *)&formatDescriptionOut[0].start.value = *v649;
              formatDescriptionOut[0].start.epoch = *(_QWORD *)(v917 + 252);
              *(_OWORD *)allocatord = *MEMORY[0x1E0CA2E68];
              *(_OWORD *)context = *MEMORY[0x1E0CA2E68];
              v650 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
              *(_QWORD *)&context[16] = v650;
              if ((CMTimeCompare(&formatDescriptionOut[0].start, (CMTime *)context) & 0x80000000) == 0
                && (*(_DWORD *)(v917 + 272) & 0x1D) == 1)
              {
                *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)(v917 + 260);
                formatDescriptionOut[0].start.epoch = *(_QWORD *)(v917 + 276);
                *(_OWORD *)context = *(_OWORD *)allocatord;
                *(_QWORD *)&context[16] = v650;
                if (CMTimeCompare(&formatDescriptionOut[0].start, (CMTime *)context) >= 1)
                {
                  v651 = *(_OWORD *)(v917 + 252);
                  *(_OWORD *)&formatDescriptionOut[0].start.value = *v649;
                  *(_OWORD *)&formatDescriptionOut[0].start.epoch = v651;
                  *(_OWORD *)&formatDescriptionOut[0].duration.timescale = *(_OWORD *)(v917 + 268);
                  FigCFDictionarySetCMTimeRange();
                }
              }
            }
            if (*(_BYTE *)(v917 + 2048))
            {
              v652 = CFStringCreateWithCString(tage, (const char *)(v917 + 2048), 0x600u);
              if (v652)
              {
                v653 = v652;
                CFDictionarySetValue(v205, CFSTR("Boss_ItemIdentifier"), v652);
                CFRelease(v653);
              }
            }
            if (a2)
              v654 = *(_QWORD *)(v917 + 328);
            else
              v654 = 1;
            v655 = FigPlaybackBossCreate(tage, *(const void **)(v917 + 968), v605, theArrayb, v910, (uint64_t)v894, *(const void **)(v917 + 976), (const void *)v654, *(OpaqueCMClock **)(v852 + 88), v638, v205, v872);
            if ((_DWORD)v655)
            {
              OctaviaSubtitleRenderPipeline = v655;
              *(_DWORD *)value = 0;
              LOBYTE(cf.value) = 0;
              v801 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v802 = *(_DWORD *)value;
              if (os_log_type_enabled(v801, cf.value))
                v803 = v802;
              else
                v803 = v802 & 0xFFFFFFFE;
              if (v803)
              {
                if (v873)
                  v804 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                else
                  v804 = "";
                *(_DWORD *)context = 136315906;
                *(_QWORD *)&context[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
                *(_WORD *)&context[12] = 2048;
                *(_QWORD *)&context[14] = v873;
                *(_WORD *)&context[22] = 2082;
                *(_QWORD *)&context[24] = v804;
                *(_WORD *)&context[32] = 1024;
                *(_DWORD *)&context[34] = OctaviaSubtitleRenderPipeline;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v40 = 0;
              v41 = 0;
              goto LABEL_1297;
            }
            CMBaseObjectGetDerivedStorage();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListeners();
            CMNotificationCenterGetDefaultLocalCenter();
            FigPlaybackBossGetTimebase(*v872);
            FigNotificationCenterAddWeakListener();
            MEMORY[0x19402EEEC](*(_QWORD *)(v852 + 456));
            v656 = *(const void **)(v852 + 464);
            if (v656)
            {
              v40 = CFRetain(v656);
              MEMORY[0x19402EF04](*(_QWORD *)(v852 + 456));
              if (v40)
              {
                v657 = CFNumberCreate(tage, kCFNumberSInt32Type, (const void *)(v852 + 472));
                v658 = FigPlaybackBossSetClientPID(*v872, (uint64_t)v657);
                if (v657)
                  CFRelease(v657);
                if ((_DWORD)v658)
                {
                  v41 = 0;
                  OctaviaSubtitleRenderPipeline = v658;
                  goto LABEL_1659;
                }
                CFRelease(v40);
              }
            }
            else
            {
              MEMORY[0x19402EF04](*(_QWORD *)(v852 + 456));
            }
            itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v873, 0);
            v659 = *(_QWORD *)(v917 + 808);
            if (v659)
            {
              Timebase = (void *)FigPlaybackBossGetTimebase(*v872);
              v636 = FigVideoCompositionProcessorSetProperty(v659, CFSTR("VideoCompositionProcessorProperty_Timebase"), Timebase);
              if ((_DWORD)v636)
              {
                v40 = 0;
                v41 = 0;
                goto LABEL_1628;
              }
              if ((*(_DWORD *)(v917 + 248) & 0x1D) != 1)
                goto LABEL_1273;
              *(_OWORD *)&formatDescriptionOut[0].start.value = *v649;
              formatDescriptionOut[0].start.epoch = *(_QWORD *)(v917 + 252);
              *(_OWORD *)allocatore = *MEMORY[0x1E0CA2E68];
              *(_OWORD *)context = *MEMORY[0x1E0CA2E68];
              v661 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
              *(_QWORD *)&context[16] = v661;
              if (CMTimeCompare(&formatDescriptionOut[0].start, (CMTime *)context) < 0)
                goto LABEL_1273;
              if ((*(_DWORD *)(v917 + 272) & 0x1D) == 1
                && (*(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)(v917 + 260),
                    formatDescriptionOut[0].start.epoch = *(_QWORD *)(v917 + 276),
                    *(_OWORD *)context = *(_OWORD *)allocatore,
                    *(_QWORD *)&context[16] = v661,
                    CMTimeCompare(&formatDescriptionOut[0].start, (CMTime *)context) >= 1))
              {
                v662 = *(_OWORD *)(v917 + 252);
                *(_OWORD *)&formatDescriptionOut[0].start.value = *v649;
                *(_OWORD *)&formatDescriptionOut[0].start.epoch = v662;
                *(_OWORD *)&formatDescriptionOut[0].duration.timescale = *(_OWORD *)(v917 + 268);
                v41 = CMTimeRangeCopyAsDictionary(formatDescriptionOut, tage);
                v636 = FigVideoCompositionProcessorSetProperty(*(_QWORD *)(v917 + 808), CFSTR("VideoCompositionProcessorProperty_LoopTimeRange"), v41);
                if ((_DWORD)v636)
                {
LABEL_1277:
                  v40 = 0;
                  goto LABEL_1628;
                }
              }
              else
              {
LABEL_1273:
                v636 = FigVideoCompositionProcessorSetProperty(*(_QWORD *)(v917 + 808), CFSTR("VideoCompositionProcessorProperty_LoopTimeRange"), 0);
                v40 = 0;
                if ((_DWORD)v636)
                {
                  v41 = 0;
                  goto LABEL_1628;
                }
                v41 = 0;
              }
              v637 = v917;
              v636 = FigPlaybackBossSetVideoCompositionProcessor(*(_QWORD *)(v917 + 352), *(const void **)(v917 + 808));
              if ((_DWORD)v636)
                goto LABEL_1277;
              v636 = FigPlaybackBossSetSeekingWaitsForVideoCompositionRendering(*(_QWORD *)(v917 + 352), *(unsigned __int8 *)(v917 + 545));
              if ((_DWORD)v636)
                goto LABEL_1277;
            }
            else
            {
              v41 = 0;
              v637 = v917;
            }
            if ((*(_DWORD *)(v637 + 36) & 0x1D) == 1)
            {
              v663 = v637 + 24;
              if (*(_QWORD *)(v637 + 128))
              {
                CMByteStreamGetCMBaseObject();
                FigCRABSGetClassID();
                v637 = v917;
                if (CMBaseObjectIsMemberOfClass())
                {
                  *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)v663;
                  formatDescriptionOut[0].start.epoch = *(_QWORD *)(v663 + 16);
                  *(_OWORD *)context = *MEMORY[0x1E0CA2E68];
                  *(_QWORD *)&context[16] = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
                  CMTimeRangeMake(&v918, &formatDescriptionOut[0].start, (CMTime *)context);
                  itemfig_HintStreamForTimeRange((uint64_t)v873, (__int128 *)&v918.start.value);
                }
              }
              if ((*(_DWORD *)(v637 + 96) & 0xFu) - 1 >= 5)
              {
                if (*(float *)(v852 + 48) >= 0.0)
                  v664 = 1;
                else
                  v664 = 2;
              }
              else
              {
                v664 = dword_1932F7720[(*(_DWORD *)(v637 + 96) & 0xF) - 1];
              }
              if (dword_1EE2A2AC8 >= 2)
              {
                allocatorf = v205;
                *(_DWORD *)value = 0;
                LOBYTE(cf.value) = 0;
                v665 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v666 = *(_DWORD *)value;
                if (os_log_type_enabled(v665, cf.value))
                  v667 = v666;
                else
                  v667 = v666 & 0xFFFFFFFE;
                if (v667)
                {
                  if (v837)
                    v668 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                  else
                    v668 = "";
                  v866 = v668;
                  if (v873)
                    v669 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                  else
                    v669 = "";
                  v861 = v669;
                  *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)v663;
                  formatDescriptionOut[0].start.epoch = *(_QWORD *)(v663 + 16);
                  Seconds = CMTimeGetSeconds(&formatDescriptionOut[0].start);
                  *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)(v917 + 48);
                  formatDescriptionOut[0].start.epoch = *(_QWORD *)(v917 + 64);
                  v671 = CMTimeGetSeconds(&formatDescriptionOut[0].start);
                  *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)(v917 + 72);
                  formatDescriptionOut[0].start.epoch = *(_QWORD *)(v917 + 88);
                  v672 = CMTimeGetSeconds(&formatDescriptionOut[0].start);
                  *(_DWORD *)context = 136317186;
                  *(_QWORD *)&context[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
                  *(_WORD *)&context[12] = 2048;
                  *(_QWORD *)&context[14] = v837;
                  *(_WORD *)&context[22] = 2082;
                  *(_QWORD *)&context[24] = v866;
                  *(_WORD *)&context[32] = 2048;
                  *(_QWORD *)&context[34] = v873;
                  *(_WORD *)v931 = 2082;
                  *(_QWORD *)&v931[2] = v861;
                  v932 = 2048;
                  v933 = Seconds;
                  v934 = 1024;
                  v935 = v664;
                  v936 = 2048;
                  v937 = v671;
                  v938 = 2048;
                  v939 = v672;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v205 = allocatorf;
                v628 = (uint64_t *)(v917 + 352);
              }
              v673 = *(_QWORD *)(v917 + 352);
              v674 = *(const void **)(v917 + 512);
              v675 = *(_DWORD *)(v917 + 524);
              *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)v663;
              formatDescriptionOut[0].start.epoch = *(_QWORD *)(v663 + 16);
              *(_OWORD *)context = *(_OWORD *)(v917 + 48);
              *(_QWORD *)&context[16] = *(_QWORD *)(v917 + 64);
              *(_OWORD *)value = *(_OWORD *)(v917 + 72);
              *(_QWORD *)&value[16] = *(_QWORD *)(v917 + 88);
              v676 = v664;
              v637 = v917;
              FigPlaybackBossSetTimeWithRange(v673, &formatDescriptionOut[0].start, v676, (CMTime *)context, (CMTime *)value, v674, v675);
              if (*(_BYTE *)(v917 + 1697))
              {
                v677 = 0.0;
                if (*(_DWORD *)(v852 + 52) == 4)
                  v677 = *(float *)(v852 + 48);
                itemfig_updateAccessLogEntry(v677);
              }
              itemfig_reportingAgentReportPlayStartMovieTime();
            }
            itemfig_setEndTimeOnBoss();
            v678 = *(_QWORD *)(v637 + 352);
            *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)(v637 + 164);
            formatDescriptionOut[0].start.epoch = *(_QWORD *)(v637 + 180);
            FigPlaybackBossSetReverseEndTime(v678, (__int128 *)&formatDescriptionOut[0].start.value);
            FigPlaybackBossSetStopAtEnd(*(_BYTE **)(v637 + 352), *(_DWORD *)(v852 + 776) == 1);
            v679 = *(_QWORD *)(v637 + 352);
            *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)(v637 + 188);
            formatDescriptionOut[0].start.epoch = *(_QWORD *)(v637 + 204);
            FigPlaybackBossSetAdvanceTimeForOverlappedPlayback(v679, (__int128 *)&formatDescriptionOut[0].start.value);
LABEL_1311:
            allocatorg = v205;
            if (*(_BYTE *)(v637 + 284))
              FigPlaybackBossSetReversalLimits(*v628, 10, 3);
            v680 = CMBaseObjectGetDerivedStorage();
            v681 = CMBaseObjectGetDerivedStorage();
            v682 = *(float *)(v681 + 804);
            v683 = *(float *)(v681 + 808);
            v684 = 1.0;
            v685 = fmaxf(v682, 1.0);
            if (!*(_BYTE *)(v681 + 801))
              v685 = 1.0;
            v686 = fminf(v683, 1.0);
            if (*(_BYTE *)(v681 + 802))
              v684 = v686;
            if (*(_BYTE *)(v681 + 920))
              v687 = 1;
            else
              v687 = *(_BYTE *)(v681 + 801);
            if (*(_BYTE *)(v681 + 920))
              v688 = 1;
            else
              v688 = *(_BYTE *)(v681 + 802);
            if (*(_BYTE *)(v681 + 920))
            {
              v682 = v685;
              v683 = v684;
            }
            FigPlaybackBossSetAudibleRateRange(*(_QWORD *)(v680 + 352), v687, v688, v682, v683);
            v689 = CMBaseObjectGetDerivedStorage();
            v690 = CFArrayGetCount(*(CFArrayRef *)(v689 + 648));
            if (v690 < 1)
            {
              v692 = 0;
            }
            else
            {
              v691 = v690;
              v692 = 0;
              v693 = 0;
              while (1)
              {
                v694 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v689 + 648), v693);
                if (*((_DWORD *)v694 + 1) == 1936684398 && *((_BYTE *)v694 + 8))
                {
                  v695 = (__CFString *)*((_QWORD *)v694 + 14);
                  if (!v695)
                    v695 = *(__CFString **)(v689 + 1464);
                  v696 = v692 ? v692 : v695;
                  v697 = CFSTR("LowQualityZeroLatency") == v695 || CFSTR("LowQualityZeroLatency") == v692;
                  v692 = v697 ? CFSTR("LowQualityZeroLatency") : (__CFString *)v696;
                  if (v692 == CFSTR("LowQualityZeroLatency"))
                    break;
                }
                if (v691 == ++v693)
                  goto LABEL_1345;
              }
              v692 = CFSTR("LowQualityZeroLatency");
            }
LABEL_1345:
            if (v692 == CFSTR("TimeDomain") || v692 == CFSTR("Spectral") || v692 == CFSTR("Varispeed"))
            {
              FigPlaybackBossSetRateSnapping(*(_QWORD *)(v689 + 352), 0, 0.03125, 32.0);
              v700 = (uint64_t *)(v917 + 352);
              a1 = v873;
            }
            else
            {
              v701 = *(_QWORD *)(v689 + 352);
              v700 = (uint64_t *)(v917 + 352);
              a1 = v873;
              if (v692 == CFSTR("LowQualityZeroLatency"))
              {
                FigPlaybackBossSetRateSnapping(v701, 1, 0.0, 0.0);
              }
              else
              {
                FigPlaybackBossSetRateSnapping(v701, 0, 0.03125, 32.0);
                v702 = v917;
                if (!v692)
                  goto LABEL_1364;
                *(_DWORD *)value = 0;
                LOBYTE(cf.value) = 0;
                v703 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v704 = *(_DWORD *)value;
                if (os_log_type_enabled(v703, cf.value))
                  v705 = v704;
                else
                  v705 = v704 & 0xFFFFFFFE;
                if (v705)
                {
                  *(_DWORD *)context = 136315138;
                  *(_QWORD *)&context[4] = "itemfig_setRateSnappingOnBoss";
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            v702 = v917;
LABEL_1364:
            FigPlaybackBossSetContinuePlayingDuringPrerollForSeek(*(_QWORD *)(v702 + 352), *(_BYTE *)(v702 + 287));
            FigPlaybackBossSetContinuePlayingDuringPrerollForRateChange(*(_QWORD *)(v702 + 352), *(_BYTE *)(v702 + 288));
            if (*(_BYTE *)(v702 + 290))
              FigPlaybackBossSetIFrameOnlySpeedThreshold(*(_QWORD *)(v702 + 352), *(float *)(v702 + 292));
            FigPlaybackBossSetUseIFrameOnlyPlaybackForHighRateScaledEdits(*(_QWORD *)(v702 + 352), *(_BYTE *)(v702 + 289));
            v706 = *(_QWORD *)(v702 + 352);
            *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)(v702 + 296);
            formatDescriptionOut[0].start.epoch = *(_QWORD *)(v702 + 312);
            FigPlaybackBossSetMinimumIntervalForIFrameOnlyPlayback(v706, (__int128 *)&formatDescriptionOut[0].start.value);
            FigPlaybackBossSetThoroughlyRefreshClosedCaptionsWhenSeeking(*(_QWORD *)(v702 + 352), *(_BYTE *)(v702 + 320));
            v707 = v702;
            v708 = *(const void **)(v702 + 360);
            *(_QWORD *)(v707 + 360) = v42;
            if (v42)
              CFRetain(v42);
            if (v708)
              CFRelease(v708);
            v709 = 0;
            v710 = (_QWORD *)v917;
            v711 = v917 + 368;
            do
            {
              v712 = *(_OWORD *)(v711 + v709);
              *(_OWORD *)(v711 + v709) = *(__int128 *)((char *)&v940 + v709);
              *(__int128 *)((char *)&v940 + v709) = v712;
              v709 += 16;
            }
            while (v709 != 112);
            if (v605 >= 1)
            {
              if (*(_QWORD *)(v917 + 128))
              {
                MEMORY[0x19402EA0C](*(_QWORD *)(v917 + 616));
                v713 = (uint64_t *)(v917 + 600);
                v714 = *(_QWORD **)(v917 + 600);
                if (!v714
                  || !FigPlayabilityMonitorCanReuse(v714, *(_QWORD *)(v917 + 968), theArrayb, v605, *(_QWORD *)(v917 + 128))|| !FigPlayabilityMonitorSetRenderPipelines((_QWORD *)*v713, v605, (uint64_t)v910)|| (v715 = *v713, v716 = (const void *)FigPlaybackBossGetTimebase(*v700), !FigPlayabilityMonitorSetPlaybackTimebase(v715, v716)))
                {
                  itemfig_unregisterAndDestroyPlayabilityMonitorNotification();
                }
                if (*v713)
                {
                  v710 = (_QWORD *)v917;
                  MEMORY[0x19402EA24](*(_QWORD *)(v917 + 616));
                }
                else
                {
                  v718 = *(const void **)(v917 + 968);
                  v719 = *(const void **)(v917 + 128);
                  v720 = (const void *)FigPlaybackBossGetTimebase(*(_QWORD *)(v917 + 352));
                  v710 = (_QWORD *)v917;
                  v721 = FigPlayabilityMonitorCreate(v718, theArrayb, v910, v605, v719, v720, *(_DWORD *)(v917 + 1352), (UInt8 **)(v917 + 600));
                  MEMORY[0x19402EA24](*(_QWORD *)(v917 + 616));
                  if ((_DWORD)v721)
                  {
                    *(_DWORD *)value = 0;
                    LOBYTE(cf.value) = 0;
                    v805 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v806 = *(_DWORD *)value;
                    if (os_log_type_enabled(v805, cf.value))
                      v807 = v806;
                    else
                      v807 = v806 & 0xFFFFFFFE;
                    if (v807)
                    {
                      if (v873)
                        v808 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                      else
                        v808 = "";
                      *(_DWORD *)context = 136315906;
                      *(_QWORD *)&context[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
                      *(_WORD *)&context[12] = 2048;
                      *(_QWORD *)&context[14] = v873;
                      *(_WORD *)&context[22] = 2082;
                      *(_QWORD *)&context[24] = v808;
                      *(_WORD *)&context[32] = 1024;
                      *(_DWORD *)&context[34] = v721;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v40 = 0;
                    a1 = v873;
                    OctaviaSubtitleRenderPipeline = v721;
                    goto LABEL_1658;
                  }
                }
                itemfig_registerPlayabilityMonitorNotification(a1);
              }
              else
              {
                DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
                itemfig_LikelyToKeepUp(DefaultLocalCenter, a1);
              }
            }
            v722 = v710 + 233;
            v723 = (const void *)v710[233];
            if (v723)
            {
              FigSyncMomentSourceDestroy(v723);
              *v722 = 0;
            }
            v724 = (CFTypeRef *)(v710 + 232);
            v725 = v710[232];
            if (v725)
            {
              FigOutOfBandTrackControllerInvalidate(v725);
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterRemoveWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterRemoveWeakListener();
              if (*v724)
              {
                CFRelease(*v724);
                *v724 = 0;
              }
            }
            v726 = (const __CFDictionary *)v710[231];
            if (!v726)
              goto LABEL_1502;
            if (*(_BYTE *)(v852 + 122))
            {
              v727 = *(_BYTE *)(v852 + 123) != 0;
              if (*(_BYTE *)(v852 + 184))
                goto LABEL_1395;
            }
            else
            {
              v727 = 0;
              if (*(_BYTE *)(v852 + 184))
                goto LABEL_1395;
            }
            if (!v727)
              goto LABEL_1502;
LABEL_1395:
            v728 = (const __CFString *)CFDictionaryGetValue(v726, CFSTR("MediaSelectionOptionsURL"));
            if (v728)
            {
              v729 = v728;
              if (CFStringFind(v728, CFSTR("://"), 0).location != -1)
              {
                v730 = CFURLCreateWithString(tage, v729, 0);
                if (v730)
                {
                  v731 = v730;
                  v732 = CMBaseObjectGetDerivedStorage();
                  if (!v732
                    || (v733 = v732,
                        (v734 = CFDictionaryCreateMutable(tage, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
                  {
                    v810 = FigSignalErrorAt();
                    *(_DWORD *)value = 0;
                    LOBYTE(cf.value) = 0;
                    v811 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v812 = *(_DWORD *)value;
                    if (os_log_type_enabled(v811, cf.value))
                      v813 = v812;
                    else
                      v813 = v812 & 0xFFFFFFFE;
                    if (v813)
                    {
                      if (v873)
                        v814 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                      else
                        v814 = "";
                      *(_DWORD *)context = 136315906;
                      *(_QWORD *)&context[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
                      *(_WORD *)&context[12] = 2048;
                      *(_QWORD *)&context[14] = v873;
                      *(_WORD *)&context[22] = 2082;
                      *(_QWORD *)&context[24] = v814;
                      *(_WORD *)&context[32] = 1024;
                      *(_DWORD *)&context[34] = v810;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    a1 = v873;
                    goto LABEL_1501;
                  }
                  v735 = v734;
                  v736 = *(const void **)(v733 + 112);
                  if (v736)
                    CFDictionarySetValue(v734, CFSTR("ReferenceSecurityPolicyFlagBaseURL"), v736);
                  v737 = CMBaseObjectGetDerivedStorage();
                  formatDescriptionOut[0].start.value = 0;
                  v738 = FigAssetGetCMBaseObject(*(_QWORD *)(v737 + 1216));
                  v739 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v739)
                  {
                    v740 = v739(v738, CFSTR("assetProperty_CreationFlags"), tage, formatDescriptionOut);
                    v741 = 0;
                    v742 = (const void *)formatDescriptionOut[0].start.value;
                    if (!v740 && formatDescriptionOut[0].start.value)
                    {
                      *(_QWORD *)context = 0;
                      CFNumberGetValue((CFNumberRef)formatDescriptionOut[0].start.value, kCFNumberSInt64Type, context);
                      v741 = (*(_DWORD *)context >> 1) & 0x1E;
                      v742 = (const void *)formatDescriptionOut[0].start.value;
                    }
                    if (v742)
                      CFRelease(v742);
                    if (v741)
                      FigCFDictionarySetInt32();
                  }
                  v743 = FigOutOfBandTrackControllerCreate((uint64_t)tage, v731, v735, (uint64_t *)v724);
                  CFRelease(v735);
                  if (*v724)
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListener();
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListener();
                    if ((*(_DWORD *)(v917 + 36) & 0x1D) == 1)
                    {
                      v744 = *(_QWORD *)(v917 + 1856);
                      *(_OWORD *)&formatDescriptionOut[0].start.value = *(_OWORD *)(v917 + 24);
                      formatDescriptionOut[0].start.epoch = *(_QWORD *)(v917 + 40);
                      FigOutOfBandTrackControllerSetCurrentTime(v744, (__int128 *)&formatDescriptionOut[0].start.value);
                    }
                    v745 = *(const void **)(v917 + 1832);
                    if (v745)
                      FigOutOfBandTrackControllerSetProperty((uint64_t)*v724, CFSTR("TextMarkupArray"), v745);
                    if (v727)
                    {
                      LODWORD(formatDescriptionOut[0].start.value) = 0;
                      *(_DWORD *)context = 0;
                      v746 = CFDictionaryCreateMutable(tage, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      if (!v746)
                      {
                        OctaviaSubtitleRenderPipeline = FigSignalErrorAt();
LABEL_1657:
                        v40 = 0;
LABEL_1658:
                        v205 = allocatorg;
                        goto LABEL_1659;
                      }
                      v747 = v746;
                      v748 = (const void *)*MEMORY[0x1E0C9AE50];
                      if (*(_BYTE *)(v852 + 122))
                        v749 = (const void *)*MEMORY[0x1E0C9AE50];
                      else
                        v749 = (const void *)*MEMORY[0x1E0C9AE40];
                      CFDictionarySetValue(v746, CFSTR("Visuals"), v749);
                      MEMORY[0x19402EEEC](*(_QWORD *)(v852 + 152));
                      v750 = v852;
                      if (*(_BYTE *)(v852 + 122))
                      {
                        CFDictionarySetValue(v747, CFSTR("NeroTransport"), *(const void **)(v852 + 160));
                        v750 = v852;
                      }
                      MEMORY[0x19402EF04](*(_QWORD *)(v750 + 152));
                      FigOutOfBandTrackControllerSetProperty((uint64_t)*v724, CFSTR("UsingNeroVideo"), v748);
                      itemfig_GetDimensions(a1, (float *)formatDescriptionOut, (float *)context);
                      v959.width = *(float *)&formatDescriptionOut[0].start.value;
                      v959.height = *(float *)context;
                      DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v959);
                      if (DictionaryRepresentation)
                        FigOutOfBandTrackControllerSetProperty((uint64_t)*v724, CFSTR("NeroVideoDimensions"), DictionaryRepresentation);
                      v752 = CGSizeCreateDictionaryRepresentation(*(CGSize *)(v852 + 128));
                      if (v752)
                        FigOutOfBandTrackControllerSetProperty((uint64_t)*v724, CFSTR("NeroDisplaySize"), v752);
                      FigOutOfBandTrackControllerSetProperty((uint64_t)*v724, CFSTR("NeroVideoGravity"), *(const void **)(v852 + 144));
                      if (DictionaryRepresentation)
                        CFRelease(DictionaryRepresentation);
                      if (v752)
                        CFRelease(v752);
                      CFRelease(v747);
                    }
                    v753 = FigOutOfBandTrackControllerPrepare(*v724);
                    if (!v753)
                    {
                      v754 = (const void *)FigPlaybackBossGetTimebase(*(_QWORD *)(v917 + 352));
                      v753 = FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)itemfig_synchronizeOOBSController, (uint64_t)a1, v754, *(NSObject **)(v917 + 104), v722);
                      if (!v753)
                        goto LABEL_1501;
                    }
                    *(_DWORD *)value = 0;
                    LOBYTE(cf.value) = 0;
                    v755 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v756 = *(_DWORD *)value;
                    if (os_log_type_enabled(v755, cf.value))
                      v757 = v756;
                    else
                      v757 = v756 & 0xFFFFFFFE;
                    if (!v757)
                      goto LABEL_1500;
                    if (a1)
                      v758 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                    else
                      v758 = "";
                    *(_DWORD *)context = 136315906;
                    *(_QWORD *)&context[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
                    *(_WORD *)&context[12] = 2048;
                    *(_QWORD *)&context[14] = a1;
                    *(_WORD *)&context[22] = 2082;
                    *(_QWORD *)&context[24] = v758;
                    *(_WORD *)&context[32] = 1024;
                    *(_DWORD *)&context[34] = v753;
                  }
                  else
                  {
                    *(_DWORD *)value = 0;
                    LOBYTE(cf.value) = 0;
                    v768 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v769 = *(_DWORD *)value;
                    if (os_log_type_enabled(v768, cf.value))
                      v770 = v769;
                    else
                      v770 = v769 & 0xFFFFFFFE;
                    if (!v770)
                      goto LABEL_1500;
                    if (a1)
                      v771 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                    else
                      v771 = "";
                    *(_DWORD *)context = 136315906;
                    *(_QWORD *)&context[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
                    *(_WORD *)&context[12] = 2048;
                    *(_QWORD *)&context[14] = a1;
                    *(_WORD *)&context[22] = 2082;
                    *(_QWORD *)&context[24] = v771;
                    *(_WORD *)&context[32] = 1024;
                    *(_DWORD *)&context[34] = v743;
                  }
                  _os_log_send_and_compose_impl();
LABEL_1500:
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_1501:
                  CFRelease(v731);
LABEL_1502:
                  OctaviaSubtitleRenderPipeline = itemfig_setMuted((uint64_t)a1, *(unsigned __int8 *)(v852 + 774));
                  playerfig_updateCaptionOrSubtitleHintOnVideoPipeline((uint64_t)v837, a1);
                  if (*(_DWORD *)(v852 + 52) == 4)
                  {
                    v205 = allocatorg;
                    if (*(float *)(v852 + 48) != 0.0)
                      itemfig_ReportAudioPlaybackThroughFigLog((uint64_t)a1);
                    v40 = 0;
                    goto LABEL_1659;
                  }
                  goto LABEL_1657;
                }
              }
              v759 = *(unsigned __int8 *)(v917 + 1241);
              *(_DWORD *)value = 0;
              LOBYTE(cf.value) = 0;
              v760 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v761 = *(_DWORD *)value;
              if (os_log_type_enabled(v760, cf.value))
                v762 = v761;
              else
                v762 = v761 & 0xFFFFFFFE;
              if (v762)
              {
                if (a1)
                  v763 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                else
                  v763 = "";
                *(_QWORD *)&context[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
                v772 = CFSTR("<redacted>");
                *(_DWORD *)context = 136315907;
                *(_WORD *)&context[12] = 2048;
                if (v759)
                  v772 = v729;
                *(_QWORD *)&context[14] = a1;
                *(_WORD *)&context[22] = 2082;
                *(_QWORD *)&context[24] = v763;
                *(_WORD *)&context[32] = 2113;
                *(_QWORD *)&context[34] = v772;
                _os_log_send_and_compose_impl();
              }
            }
            else
            {
              *(_DWORD *)value = 0;
              LOBYTE(cf.value) = 0;
              v764 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v765 = *(_DWORD *)value;
              if (os_log_type_enabled(v764, cf.value))
                v766 = v765;
              else
                v766 = v765 & 0xFFFFFFFE;
              if (v766)
              {
                if (a1)
                  v767 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                else
                  v767 = "";
                *(_DWORD *)context = 136315650;
                *(_QWORD *)&context[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
                *(_WORD *)&context[12] = 2048;
                *(_QWORD *)&context[14] = a1;
                *(_WORD *)&context[22] = 2082;
                *(_QWORD *)&context[24] = v767;
                _os_log_send_and_compose_impl();
              }
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_1502;
          }
          CMByteStreamGetCMBaseObject();
          FigCachedFileByteStreamGetClassID();
          if (CMBaseObjectIsMemberOfClass())
          {
            if (!v641)
              goto LABEL_1241;
            v773 = CMBaseObjectGetDerivedStorage();
            v774 = CFArrayGetCount(*(CFArrayRef *)(v773 + 648));
            if (v774 >= 1)
            {
              v775 = v774;
              v776 = 0;
              do
              {
                v777 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v773 + 648), v776);
                if (v777[1] == 1986618469 && !*((_BYTE *)v777 + 72))
                  goto LABEL_1241;
              }
              while (v775 != ++v776);
            }
            playerfig_setReadCacheEnabled();
          }
          CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
          goto LABEL_1245;
        }
      }
      else
      {
        v645 = *MEMORY[0x1E0C9AE50];
        if (*MEMORY[0x1E0C9AE50])
          goto LABEL_1235;
      }
LABEL_1244:
      playerfig_setReadCacheEnabled();
      goto LABEL_1245;
    }
    RenderTriplesForVideo = FigSignalErrorAt();
LABEL_1606:
    OctaviaSubtitleRenderPipeline = RenderTriplesForVideo;
    goto LABEL_1607;
  }
  v549 = 0;
  v550 = MEMORY[0x1E0CA2E18];
  v901 = (void *)v546;
  while (1)
  {
    v877 = v549;
    v551 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v546 + 648), v549);
    v552 = (const __CFArray *)*((_QWORD *)v551 + 21);
    if (v552)
    {
      v553 = CFArrayGetCount(v552);
      if (v553 >= 1)
        break;
    }
LABEL_1093:
    v549 = v877 + 1;
    if (v877 + 1 == v871)
    {
      a1 = v873;
      goto LABEL_1095;
    }
  }
  v554 = v553;
  v555 = 0;
  v916 = v553;
  while (1)
  {
    v556 = CFArrayGetValueAtIndex(*((CFArrayRef *)v551 + 21), v555);
    v557 = *(_DWORD *)v551;
    v558 = *((_DWORD *)v556 + 7);
    LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)v551;
    LODWORD(formatDescriptionOut[0].start.epoch) = v558;
    v559 = (const void *)*((_QWORD *)v556 + 6);
    if (v559)
    {
      CFRelease(v559);
      *((_QWORD *)v556 + 6) = 0;
      v557 = *(_DWORD *)v551;
    }
    *(_OWORD *)context = *(_OWORD *)v550;
    *(_QWORD *)&context[16] = *(_QWORD *)(v550 + 16);
    v560 = fp_createCommonRenderPipelineOptionsForTrack(v873, 0, (uint64_t)context, v557, 0, 0, (__CFDictionary **)&formatDescriptionOut[0].duration.timescale);
    if ((_DWORD)v560)
      break;
    itemfig_reuseExistingRenderPipeline(*(_QWORD *)(v546 + 456), (uint64_t)formatDescriptionOut);
    v561 = (const void *)formatDescriptionOut[0].duration.value;
    if (formatDescriptionOut[0].duration.value)
      goto LABEL_1091;
    v562 = v550;
    v563 = v356;
    v564 = (const void *)FigCFNumberCreateSInt32();
    if (FigCFDictionaryGetValue())
    {
      v565 = CFDictionaryCreateMutable(v547, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetValue();
    }
    else
    {
      v565 = 0;
    }
    v566 = FigRenderPipelineCreateForBufferQueue((uint64_t)v547, *((const void **)v556 + 4), v565, (CFTypeRef *)&formatDescriptionOut[0].duration);
    if (v564)
      CFRelease(v564);
    OctaviaSubtitleRenderPipeline = v566;
    v356 = v563;
    if ((_DWORD)OctaviaSubtitleRenderPipeline)
      goto LABEL_1296;
    v561 = (const void *)formatDescriptionOut[0].duration.value;
    v546 = (uint64_t)v901;
    v550 = v562;
    v554 = v916;
    if (formatDescriptionOut[0].duration.value)
LABEL_1091:
      v561 = CFRetain(v561);
    *((_QWORD *)v556 + 6) = v561;
    CFArrayAppendValue(v356, formatDescriptionOut);
    itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
    if (v554 == ++v555)
      goto LABEL_1093;
  }
  OctaviaSubtitleRenderPipeline = v560;
LABEL_1296:
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v205 = 0;
  v894 = 0;
  theArrayb = 0;
  v910 = 0;
  *((_QWORD *)&v945 + 1) = v356;
LABEL_1297:
  a1 = v873;
LABEL_1659:
  if (*(_BYTE *)(v917 + 1697))
    itemfig_getFrameDropCountFromAllVideoPipelines((uint64_t)a1, (_QWORD *)(v917 + 1672));
  if (v205)
    CFRelease(v205);
  free(theArrayb);
LABEL_1664:
  free(v910);
  free(v894);
  if (v42)
    CFRelease(v42);
  if (v41)
    CFRelease(v41);
  for (i7 = 0; i7 != 112; i7 += 8)
  {
    v816 = *(const void **)((char *)&v940 + i7);
    if (v816)
      CFRelease(v816);
  }
  if ((_DWORD)OctaviaSubtitleRenderPipeline)
    itemfig_unregisterAndDestroyPlayabilityMonitorNotification();
  FigDeferredTransactionCommit((uint64_t)v919);
  if (v919)
    CFRelease(v919);
  objc_autoreleasePoolPop(v833);
  if (!v843 && v826 != *(unsigned __int8 *)(v917 + 2017))
  {
    v817 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v818 = v817;
    v819 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(v917 + 2017))
      v819 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v817, CFSTR("HasEnabledAudio"), *v819);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v818)
      CFRelease(v818);
  }
  if (v40)
    CFRelease(v40);
  return OctaviaSubtitleRenderPipeline;
}

Float64 itemfig_getPlayableDurationAtCurrentTime(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  CMTime lhs;
  CMTime time;
  CMTimeRange range;
  CMTimeRange v8;
  CMTime v9;

  v2 = *MEMORY[0x1E0CA2E68];
  v9.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  *(_OWORD *)&v8.start.value = *MEMORY[0x1E0CA2E50];
  *(_OWORD *)&v8.start.epoch = v3;
  *(_OWORD *)&v8.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  *(_OWORD *)&v9.value = v2;
  itemfig_getNonNegativeCurrentTime(a1, &v9);
  range.start = v9;
  itemfig_getPlayableRangeAtTime(a1, &range.start, &v8);
  range = v8;
  time = v9;
  if (!CMTimeRangeContainsTime(&range, &time))
    return 0.0;
  memset(&time, 0, sizeof(time));
  range = v8;
  CMTimeRangeGetEnd(&lhs, &range);
  range.start = v9;
  CMTimeSubtract(&time, &lhs, &range.start);
  range.start = time;
  return CMTimeGetSeconds(&range.start);
}

uint64_t itemfig_monitorPlayability(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const __CFArray *v5;
  uint64_t v6;
  char v7;
  CFMutableArrayRef Mutable;
  uint64_t v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  _DWORD *ValueAtIndex;
  uint64_t v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex j;
  _DWORD *v19;
  CFIndex v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 616));
  v4 = *(_QWORD *)(DerivedStorage + 600);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 616));
  if (v4)
  {
    v5 = 0;
    goto LABEL_3;
  }
  if (itemfig_assureBasicsReadyForInspection(a1))
LABEL_57:
    itemfig_unregisterAndDestroyPlayabilityMonitorNotification();
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v6 = FigSignalErrorAt();
    if (!(_DWORD)v6)
      return v6;
    goto LABEL_57;
  }
  v5 = Mutable;
  if (*(_BYTE *)(v3 + 120))
  {
    v10 = itemfig_ensureTrackStorageArray();
    if ((_DWORD)v10)
    {
      v6 = v10;
      v7 = 1;
      goto LABEL_6;
    }
    Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (Count >= 1)
    {
      v12 = Count;
      for (i = 0; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
        if (ValueAtIndex[1] == 1936684398 && *((_BYTE *)ValueAtIndex + 8))
          FigCFArrayAppendInt32();
      }
    }
  }
  else if (*(_DWORD *)(DerivedStorage + 996))
  {
    FigCFArrayAppendInt32();
  }
  if (*(_DWORD *)(DerivedStorage + 1008))
    FigCFArrayAppendInt32();
  if (*(_DWORD *)(DerivedStorage + 1016))
    FigCFArrayAppendInt32();
  if (*(_DWORD *)(DerivedStorage + 1040))
    FigCFArrayAppendInt32();
  MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 496));
  if (*(_QWORD *)(DerivedStorage + 656))
  {
    v15 = itemfig_ensureTrackStorageArray();
    if ((_DWORD)v15)
    {
      v6 = v15;
      v7 = 0;
      goto LABEL_5;
    }
    v16 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (v16 >= 1)
    {
      v17 = v16;
      for (j = 0; j != v17; ++j)
      {
        v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), j);
        if (v19[1] == 1986618469 && *((_BYTE *)v19 + 8))
          FigCFArrayAppendInt32();
      }
    }
  }
  else if (!*(_BYTE *)(v3 + 121) && *(_DWORD *)(DerivedStorage + 1000))
  {
    FigCFArrayAppendInt32();
  }
  MEMORY[0x19402EA24](*(_QWORD *)(v3 + 496));
  if (!*(_QWORD *)(DerivedStorage + 128) || CFArrayGetCount(v5) < 1)
    goto LABEL_3;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 616));
  if (*(_QWORD *)(DerivedStorage + 600))
  {
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 616));
    goto LABEL_3;
  }
  v20 = CFArrayGetCount(v5);
  v21 = malloc_type_calloc(v20, 4uLL, 0x100004052888210uLL);
  if (!v21)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_4;
  }
  v22 = v21;
  if (v20 >= 1)
  {
    v23 = 0;
    v24 = v21;
    do
    {
      FigCFArrayGetInt32AtIndex();
      ++v23;
      ++v24;
    }
    while (v20 != v23);
  }
  v6 = FigPlayabilityMonitorCreate(*(const void **)(DerivedStorage + 968), v22, 0, v20, *(const void **)(DerivedStorage + 128), *(const void **)(DerivedStorage + 328), *(_DWORD *)(DerivedStorage + 1352), (UInt8 **)(DerivedStorage + 600));
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  free(v22);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 616));
  if (!(_DWORD)v6)
  {
LABEL_3:
    itemfig_registerPlayabilityMonitorNotification(a1);
    v6 = 0;
LABEL_4:
    v7 = 1;
    goto LABEL_5;
  }
  v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
  v7 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_5:
  if (v5)
LABEL_6:
    CFRelease(v5);
  if ((_DWORD)v6)
    itemfig_unregisterAndDestroyPlayabilityMonitorNotification();
  if ((v7 & 1) == 0)
    MEMORY[0x19402EA24](*(_QWORD *)(v3 + 496));
  return v6;
}

void itemfig_accumulateFrameDropCountFromAllVideoPipelines(uint64_t a1)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  itemfig_getFrameDropCountFromAllVideoPipelines(a1, DerivedStorage + 210);
  DerivedStorage[208] += DerivedStorage[210] - DerivedStorage[209];
  DerivedStorage[210] = 0;
  DerivedStorage[209] = 0;
}

uint64_t itemfig_createRenderTriplesForVideo(const void *a1, int a2, int a3, int a4, int a5, const void *a6, CFMutableArrayRef *a7, __CFArray **a8, __CFArray **a9)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  CMTimeEpoch v20;
  const __CFArray *v21;
  void *v22;
  CFMutableArrayRef Mutable;
  __CFArray *v24;
  const void *SInt32;
  const __CFArray *v26;
  uint64_t v27;
  __CFArray *v28;
  uint64_t v29;
  uint64_t v30;
  const __CFAllocator *v31;
  CFMutableArrayRef v32;
  const void *v33;
  const void *v34;
  const __CFArray *v35;
  const void *v36;
  _BOOL4 shouldEnableMainVideo;
  const void *v38;
  const void *v39;
  const void *v40;
  BOOL v41;
  BOOL v42;
  CFIndex Count;
  _BOOL4 v44;
  const void *v45;
  const __CFDictionary *v46;
  char v47;
  const __CFArray *v48;
  const void *v49;
  const void *v50;
  int v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CFIndex v55;
  CFIndex v56;
  CFIndex v57;
  uint64_t v58;
  const __CFArray *v59;
  _DWORD *ValueAtIndex;
  CFIndex v61;
  unsigned int *v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v67;
  CFTypeRef v68;
  const void *v69;
  uint64_t (*v70)(CFTypeRef, const void *);
  int v71;
  CFMutableArrayRef v72;
  const void *v73;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  CFTypeRef v75;
  CFTypeRef v76;
  double v77;
  int v78;
  uint64_t v79;
  const void *v80;
  CFTypeRef v81;
  const void *v82;
  CFTypeRef v83;
  const void *ConcatenationOfTwoArrays;
  uint64_t *v85;
  uint64_t v86;
  uint64_t matched;
  CFTypeRef *v88;
  const __CFArray *v89;
  CFIndex v90;
  CFIndex v91;
  CFIndex v92;
  uint64_t v93;
  const void *v94;
  const void *v95;
  uint64_t FigBaseObject;
  void (*v97)(uint64_t, const __CFString *, uint64_t);
  int v98;
  uint64_t v99;
  void (*v100)(uint64_t, const __CFString *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, const __CFString *, uint64_t);
  uint64_t v105;
  void (*v106)(uint64_t, const __CFString *, uint64_t);
  CFDictionaryRef v107;
  uint64_t v108;
  void (*v109)(uint64_t, const __CFString *, CFDictionaryRef);
  CFIndex v110;
  CFIndex v111;
  CFIndex i;
  const void *v113;
  float v114;
  void (*v115)(const void *, BOOL);
  void (*v116)(const void *, float);
  uint64_t v117;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v121;
  const void *v122;
  int v123;
  const __CFArray *v124;
  uint64_t *v125;
  uint64_t v126;
  CFNumberRef v128;
  const void *v129;
  int v130;
  uint64_t TrackStorage;
  __CFArray *v132;
  uint64_t v133;
  const void *v134;
  uint64_t *v135;
  unsigned int v136;
  uint64_t CommonRenderPipelineOptionsForTrack;
  unsigned int v138;
  CFTypeRef v139;
  CFTypeRef v140;
  CFIndex v141;
  const __CFArray *v142;
  int v143;
  CMBufferQueueRef v144;
  uint64_t v145;
  CFNumberRef v146;
  CFNumberRef v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  CFIndex v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;
  uint64_t v156;
  const void *v157;
  uint64_t v158;
  uint64_t v159;
  CFTypeRef *v160;
  const __CFArray *v161;
  uint64_t v162;
  uint64_t v163;
  const void *v164;
  int v165;
  _BOOL4 IsZero;
  const void *v167;
  const CMBufferCallbacks *v168;
  int v169;
  char v170;
  int v171;
  uint64_t v172;
  void (*v173)(uint64_t, const __CFString *, uint64_t);
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, const __CFString *, uint64_t);
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  const __CFArray *v181;
  CFIndex v182;
  const __CFDictionary *v183;
  const __CFDictionary *v184;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  const void *v193;
  CFTypeRef v194;
  const void *v195;
  CFTypeRef v196;
  unsigned int v197;
  unsigned int v198;
  CFTypeRef v199;
  CFTypeRef v200;
  CFIndex v201;
  const __CFArray *v202;
  CMBufferQueueRef v203;
  char v204;
  const void *v205;
  CFTypeRef v206;
  const void *v207;
  CFTypeRef v208;
  CFTypeRef v209;
  CFTypeRef v210;
  const void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _OWORD *v219;
  _BOOL4 v220;
  _BOOL4 v221;
  __int128 v222;
  __int128 v223;
  uint64_t *v224;
  int v225;
  CFMutableArrayRef *v226;
  uint64_t v227;
  __CFArray *v228;
  __CFArray *v229;
  CFTypeRef v230;
  uint64_t v231;
  int v232;
  const void *v233;
  CFIndex v234;
  __CFArray *v235;
  CFArrayRef v236;
  CMTimeEpoch v237;
  __int128 v238;
  const __CFAllocator *allocator;
  const __CFArray *v241;
  const __CFArray *theArray;
  const void *v243;
  __int128 time;
  _BYTE time_16[32];
  __int128 v246;
  _BYTE v247[32];
  CMTime type;
  CMTime v249;
  CFTypeRef v250;
  CFTypeRef v251;
  __int128 value;
  CFTypeRef v253[2];
  CFTypeRef v254[2];
  CFTypeRef v255;
  CFTypeRef v256;
  CMTime v257;
  CFTypeRef v258;
  CFTypeRef v259;
  CFTypeRef v260;
  CFTypeRef v261;
  CFTypeRef v262;
  CFTypeRef cf[2];
  _BYTE v264[32];
  __int128 v265;
  _BYTE v266[32];
  CMBufferQueueRef queueOut[2];
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;

  v273 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = *(_QWORD *)(DerivedStorage + 8);
  v18 = CMBaseObjectGetDerivedStorage();
  v262 = 0;
  v261 = 0;
  v260 = 0;
  v259 = 0;
  v258 = 0;
  v19 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v257.value = *MEMORY[0x1E0CA2E18];
  v20 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v257.epoch = v20;
  v256 = 0;
  v255 = 0;
  v254[0] = 0;
  value = 0u;
  *(_OWORD *)v253 = 0u;
  v250 = 0;
  v251 = 0;
  if (a2)
  {
    v241 = 0;
    theArray = 0;
    v21 = 0;
    v22 = 0;
    Mutable = 0;
    v24 = 0;
    SInt32 = 0;
    v26 = 0;
    v27 = *(_QWORD *)(DerivedStorage + 656);
    v28 = 0;
    if (v27)
      v29 = 4294954433;
    else
      v29 = 0;
    goto LABEL_177;
  }
  v30 = v18;
  v232 = a3;
  v233 = a6;
  v237 = v20;
  v238 = v19;
  v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kRenderTripleArrayCallbacks);
  if (!Mutable || (v229 = CFArrayCreateMutable(v31, 0, &kRenderTripleArrayCallbacks)) == 0)
  {
    v29 = FigSignalErrorAt();
    v241 = 0;
    theArray = 0;
    v21 = 0;
    v22 = 0;
    v28 = 0;
    v24 = 0;
    SInt32 = 0;
    v26 = 0;
    goto LABEL_177;
  }
  v32 = CFArrayCreateMutable(v31, 0, &kRenderTripleArrayCallbacks);
  if (!v32)
  {
    v29 = FigSignalErrorAt();
    v241 = 0;
    theArray = 0;
    v21 = 0;
    v22 = 0;
    v24 = 0;
    SInt32 = 0;
    v26 = 0;
    v28 = v229;
    goto LABEL_177;
  }
  v235 = v32;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1736));
  v33 = *(const void **)(DerivedStorage + 1728);
  if (v33)
    theArray = (const __CFArray *)CFRetain(v33);
  else
    theArray = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1736));
  MEMORY[0x19402EEEC](*(_QWORD *)(v30 + 224));
  v34 = *(const void **)(v30 + 208);
  if (v34)
    v35 = (const __CFArray *)CFRetain(v34);
  else
    v35 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(v30 + 224));
  MEMORY[0x19402EEEC](*(_QWORD *)(v30 + 240));
  v36 = *(const void **)(v30 + 256);
  allocator = v31;
  if (v36)
    v241 = (const __CFArray *)CFRetain(v36);
  else
    v241 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(v30 + 240));
  shouldEnableMainVideo = itemfig_shouldEnableMainVideo();
  v38 = *(const void **)(v30 + 568);
  if (v38)
  {
    CFRelease(v38);
    *(_QWORD *)(v30 + 568) = 0;
  }
  v39 = *(const void **)(v30 + 640);
  if (v39)
  {
    CFRelease(v39);
    *(_QWORD *)(v30 + 640) = 0;
  }
  v227 = v17;
  v225 = a4;
  v236 = v35;
  v40 = *(const void **)(v30 + 592);
  if (v40)
  {
    CFRelease(v40);
    *(_QWORD *)(v30 + 592) = 0;
  }
  v41 = *(_QWORD *)(DerivedStorage + 656) != 0;
  v42 = *(_QWORD *)(DerivedStorage + 816) != 0;
  playeritemfig_releaseVideoCompositionObjects((uint64_t)a1);
  if (a5 && shouldEnableMainVideo)
  {
    Count = (CFIndex)theArray;
    if (theArray)
      Count = CFArrayGetCount(theArray);
    v44 = Count > 0;
    if (v241 && CFArrayGetCount(v241) > 0)
      v44 = 1;
    MEMORY[0x19402EEEC](*(_QWORD *)(v30 + 488));
    v45 = *(const void **)(v30 + 480);
    if (v45)
      v46 = (const __CFDictionary *)CFRetain(v45);
    else
      v46 = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(v30 + 488));
    v29 = FPSupport_CopyDestinationPixelBufferAttributesWithIOSurfaceSupport(v46, v44, (CFDictionaryRef *)&v262);
    if (v46)
      CFRelease(v46);
    if ((_DWORD)v29)
    {
      v21 = 0;
      v22 = 0;
      SInt32 = 0;
      goto LABEL_37;
    }
  }
  v47 = v41 ^ v42 ^ 1;
  if (!shouldEnableMainVideo)
    v47 = 1;
  if ((v47 & 1) == 0)
  {
    v48 = *(const __CFArray **)(DerivedStorage + 1104);
    if (v48)
    {
      if (CFArrayGetCount(v48) >= 1)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        itemfig_handleReadyToDisplayVideoLatch((uint64_t)a1, 1, v233);
        if (*(uint64_t *)(v30 + 216) < 1)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1120));
          v49 = *(const void **)(DerivedStorage + 1104);
          if (v49)
          {
            CFRelease(v49);
            *(_QWORD *)(DerivedStorage + 1104) = 0;
          }
          v50 = *(const void **)(DerivedStorage + 1112);
          if (v50)
          {
            CFRelease(v50);
            *(_QWORD *)(DerivedStorage + 1112) = 0;
          }
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1120));
        }
        else
        {
          itemfig_stashTransitionImageQueuesAndSlots();
        }
      }
    }
  }
  v51 = _os_feature_enabled_impl();
  v52 = 0;
  v243 = a1;
  v29 = 0;
  if (shouldEnableMainVideo)
  {
    v26 = v236;
    if (!v51)
      goto LABEL_98;
    if (*(_QWORD *)(DerivedStorage + 2144))
      FigCFArrayRemoveAllValues();
    v29 = *(unsigned int *)(DerivedStorage + 1000);
    v228 = Mutable;
    if ((_DWORD)v29)
    {
      cf[0] = 0;
      v53 = *(_QWORD *)(DerivedStorage + 968);
      v54 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
      if (v54)
      {
        v29 = v54(v53, v29, cf, 0);
        if (!(_DWORD)v29)
          itemfig_copyFormatDescription((uint64_t)cf[0], (uint64_t *)&v255);
      }
      else
      {
        v29 = 4294954514;
      }
      if (cf[0])
        CFRelease(cf[0]);
    }
    v226 = a7;
    v55 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (v55 >= 1)
    {
      v56 = v55;
      v57 = 0;
      v58 = 0;
      v59 = *(const __CFArray **)(DerivedStorage + 648);
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v59, v57);
        if (ValueAtIndex[1] == 1986618469 && *((_BYTE *)ValueAtIndex + 8) == 1)
          ++v58;
        ++v57;
      }
      while (v56 != v57);
      v61 = 0;
      v230 = v255;
      while (1)
      {
        v62 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v61);
        if (v62[1] != 1835365473)
          goto LABEL_92;
        v63 = v62;
        cf[0] = 0;
        *(_QWORD *)&time = 0;
        v64 = *(_QWORD *)(DerivedStorage + 968);
        v65 = *v62;
        v66 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 56);
        if (!v66)
        {
          v29 = 4294954514;
          goto LABEL_239;
        }
        v67 = v66(v64, v65, cf, 0);
        if ((_DWORD)v67)
          goto LABEL_420;
        v29 = itemfig_copyFormatDescription((uint64_t)cf[0], (uint64_t *)&time);
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
        if ((_DWORD)v29)
          goto LABEL_239;
        v68 = v256;
        if (!v256)
        {
          v67 = FigSampleAttachmentCollectionRulesCopyForFilePlayback((uint64_t)allocator, v230, &v256);
          if ((_DWORD)v67)
            goto LABEL_420;
          v68 = v256;
        }
        v69 = (const void *)time;
        v70 = *(uint64_t (**)(CFTypeRef, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v70)
          break;
        v71 = 0;
        if (v69)
          goto LABEL_79;
LABEL_80:
        if (v71 && v58 == 1)
        {
          queueOut[0] = 0;
          if (!*(_QWORD *)(DerivedStorage + 2144))
          {
            v72 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)(DerivedStorage + 2144) = v72;
            if (!v72)
            {
              v67 = FigSignalErrorAt();
LABEL_420:
              v29 = v67;
LABEL_239:
              v21 = 0;
              v22 = 0;
              SInt32 = 0;
              goto LABEL_240;
            }
          }
          v73 = (const void *)*((_QWORD *)v63 + 2);
          if (v73)
          {
            CFRelease(v73);
            *((_QWORD *)v63 + 2) = 0;
          }
          CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
          v67 = CMBufferQueueCreate(allocator, 0, CallbacksForUnsortedSampleBuffers, queueOut);
          if ((_DWORD)v67)
            goto LABEL_420;
          CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 2144), queueOut[0]);
          v29 = FigRenderPipelineCreateForBufferQueue((uint64_t)allocator, queueOut[0], 0, (CFTypeRef *)v63 + 2);
          if (queueOut[0])
          {
            CFRelease(queueOut[0]);
            queueOut[0] = 0;
          }
          if ((_DWORD)v29)
            goto LABEL_239;
          LODWORD(value) = *v63;
          *((_QWORD *)&value + 1) = 0;
          v253[1] = CFRetain(*((CFTypeRef *)v63 + 2));
          CFArrayAppendValue(v235, &value);
          itemfig_resetRenderTriple((uint64_t)&value);
        }
        v29 = 0;
        a1 = v243;
LABEL_92:
        if (v56 == ++v61)
          goto LABEL_96;
      }
      v71 = v70(v68, v69);
      if (!v69)
        goto LABEL_80;
LABEL_79:
      CFRelease(v69);
      goto LABEL_80;
    }
LABEL_96:
    v52 = CFArrayGetCount(v235) > 0;
    a7 = v226;
    Mutable = v228;
  }
  v26 = v236;
LABEL_98:
  if (!shouldEnableMainVideo)
  {
    if (*(_BYTE *)(v30 + 121))
    {
LABEL_173:
      v21 = 0;
LABEL_174:
      v22 = 0;
      SInt32 = 0;
      goto LABEL_175;
    }
    goto LABEL_171;
  }
  if (!*(_QWORD *)(DerivedStorage + 656))
  {
    if (*(_BYTE *)(v30 + 121))
      goto LABEL_173;
    v130 = *(_DWORD *)(DerivedStorage + 1000);
    if (v130)
    {
      v221 = v52;
      *(_QWORD *)&time = 0;
      TrackStorage = itemfig_getTrackStorage((uint64_t)a1, v130, &time);
      if ((_DWORD)TrackStorage)
      {
        v29 = TrackStorage;
        goto LABEL_429;
      }
      v132 = Mutable;
      v133 = time;
      if (*(_QWORD *)(time + 16))
      {
        FigStopForwardingMediaServicesProcessDeathNotification();
        v134 = *(const void **)(v133 + 16);
        if (v134)
        {
          CFRelease(v134);
          *(_QWORD *)(v133 + 16) = 0;
        }
      }
      v135 = (uint64_t *)(v133 + 48);
      if (!*(_QWORD *)(v133 + 48))
        FigImageQueueTableCreate(allocator, (_QWORD *)(v133 + 48));
      v136 = *(_DWORD *)(DerivedStorage + 1000);
      LODWORD(value) = v136;
      if (*(_BYTE *)(v30 + 122))
      {
        *(_OWORD *)cf = v238;
        *(_QWORD *)v264 = v237;
        CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(a1, 1, (uint64_t)cf, v136, 1986618469, 0, (__CFDictionary **)&value + 1);
        if ((_DWORD)CommonRenderPipelineOptionsForTrack)
          goto LABEL_426;
        itemfig_reuseExistingRenderPipeline(*(_QWORD *)(DerivedStorage + 392), (uint64_t)&value);
        if (!v253[1])
        {
          queueOut[0] = 0;
          v138 = *(_DWORD *)(DerivedStorage + 1000);
          *(_OWORD *)cf = v238;
          *(_QWORD *)v264 = v237;
          CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(a1, 1, (uint64_t)cf, v138, 1986618469, 1, (__CFDictionary **)v254);
          if ((_DWORD)CommonRenderPipelineOptionsForTrack)
            goto LABEL_426;
          v139 = *(CFTypeRef *)(DerivedStorage + 1104);
          if (v139)
            v139 = CFRetain(v139);
          v251 = v139;
          v140 = *(CFTypeRef *)(DerivedStorage + 1112);
          if (v140)
            v140 = CFRetain(v140);
          v141 = 0;
          v250 = v140;
          if (*(_BYTE *)(DerivedStorage + 1824))
            v142 = 0;
          else
            v142 = v236;
          if (!*(_BYTE *)(DerivedStorage + 1824))
            v141 = *(_QWORD *)(v30 + 216);
          if (fp_createFigImageQueueArrayForVideoRenderPipeline((uint64_t)a1, *(unsigned int *)(DerivedStorage + 1000), 1, theArray, v142, v141, (CFArrayRef *)&v251, (CFArrayRef *)&v250, 0, *v135, 1, queueOut))
          {
            v143 = 1;
            v144 = queueOut[0];
          }
          else
          {
            v144 = queueOut[0];
            v143 = fp_buildVideoRenderPipelineForTrack(v227, (uint64_t)a1, *(unsigned int *)(DerivedStorage + 1000), v262, 1, *(_QWORD *)(v133 + 24), *(const void **)(v30 + 864), 1, queueOut[0], 0, 0, &v253[1]);
          }
          if (v144)
            CFRelease(v144);
          if (!v143)
          {
            MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1120));
            v193 = *(const void **)(DerivedStorage + 1104);
            v194 = v251;
            *(_QWORD *)(DerivedStorage + 1104) = v251;
            if (v194)
              CFRetain(v194);
            if (v193)
              CFRelease(v193);
            v195 = *(const void **)(DerivedStorage + 1112);
            v196 = v250;
            *(_QWORD *)(DerivedStorage + 1112) = v250;
            if (v196)
              CFRetain(v196);
            if (v195)
              CFRelease(v195);
            MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1120));
            itemfig_removeAllImageQueues((uint64_t)a1);
            playerfig_freeTransitionImageQueueAndSlot();
          }
          if (*((_QWORD *)&value + 1))
          {
            CFRelease(*((CFTypeRef *)&value + 1));
            *((_QWORD *)&value + 1) = 0;
          }
          if (v254[0])
          {
            CFRelease(v254[0]);
            v254[0] = 0;
          }
          if (v253[1])
          {
            CFRelease(v253[1]);
            v253[1] = 0;
          }
          v192 = *(_QWORD *)(v30 + 560);
          if (v192)
            FigRenderPipelineSetProperty_0(v192, (uint64_t)CFSTR("ShouldCompensateForNeroScreenLatency"), *MEMORY[0x1E0C9AE50]);
        }
      }
      if (v253[1])
        goto LABEL_394;
      v197 = *(_DWORD *)(DerivedStorage + 1000);
      *(_OWORD *)cf = v238;
      *(_QWORD *)v264 = v237;
      CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)cf, v197, 1986618469, 0, (__CFDictionary **)&value + 1);
      if ((_DWORD)CommonRenderPipelineOptionsForTrack)
        goto LABEL_426;
      itemfig_reuseExistingRenderPipeline(*(_QWORD *)(DerivedStorage + 392), (uint64_t)&value);
      if (v253[1])
      {
LABEL_394:
        FigStartForwardingMediaServicesProcessDeathNotification();
        v209 = v253[1];
        if (v253[1])
        {
          v210 = CFRetain(v253[1]);
          v209 = v253[1];
          *(_QWORD *)(v133 + 16) = v210;
          if (v209)
            v209 = CFRetain(v209);
        }
        else
        {
          *(_QWORD *)(v133 + 16) = 0;
        }
        *(_QWORD *)(v30 + 568) = v209;
        v211 = (const void *)*v135;
        if (*v135)
          v211 = CFRetain(v211);
        Mutable = v132;
        *(_QWORD *)(v30 + 592) = v211;
        CFArrayAppendValue(v132, &value);
        itemfig_resetRenderTriple((uint64_t)&value);
        v212 = *(_QWORD *)(v30 + 592);
        v26 = v236;
        if (v212)
        {
          cf[0] = 0;
          FigImageQueueTableCopyMappedImageQueueArray(v212, *(_QWORD *)(DerivedStorage + 1104), (uint64_t *)cf);
          FigImageQueueArraySetProperty();
          FigImageQueueArraySetProperty();
          itemfig_enableImageQueueTimingAndSetDurationOnFigImageQueueArray((uint64_t)a1);
          if (cf[0])
            CFRelease(cf[0]);
        }
        if (v225)
          FigImageQueueTableSetTimebase(*(_QWORD *)(v30 + 592), *(void **)(DerivedStorage + 328));
        FigRenderPipelineSetProperty_0(*(_QWORD *)(v30 + 568), (uint64_t)CFSTR("AttachmentCollectorMetadataSourceBuffers"), *(_QWORD *)(DerivedStorage + 2144));
        v213 = *MEMORY[0x1E0C9AE50];
        v214 = *MEMORY[0x1E0C9AE40];
        if (*(_BYTE *)(v30 + 232))
          v215 = *MEMORY[0x1E0C9AE50];
        else
          v215 = *MEMORY[0x1E0C9AE40];
        FigRenderPipelineSetProperty_0(*(_QWORD *)(v30 + 568), (uint64_t)CFSTR("PreventDisplaySleepDuringVideoPlayback"), v215);
        v216 = *(_QWORD *)(DerivedStorage + 1144);
        if (v216)
          FigRenderPipelineSetProperty_0(*(_QWORD *)(v133 + 16), (uint64_t)CFSTR("VideoEnhancementMode"), v216);
        FigRenderPipelineSetProperty_0(*(_QWORD *)(v133 + 16), (uint64_t)CFSTR("ObeyEmptyMediaMarkers"), v213);
        if (*(_BYTE *)(DerivedStorage + 1137))
          v217 = v213;
        else
          v217 = v214;
        FigRenderPipelineSetProperty_0(*(_QWORD *)(v133 + 16), (uint64_t)CFSTR("PropagatePerFrameHDRDisplayMetadata"), v217);
        itemfig_updateRotationOnVideoRenderPipeline((uint64_t)a1, *(_DWORD *)(DerivedStorage + 1000));
        itemfig_applyEnhancementFilterOptions((uint64_t)a1, *(_DWORD *)(DerivedStorage + 1000));
        itemfig_applyDisableColorMatching((uint64_t)a1, *(_DWORD *)(DerivedStorage + 1000));
        itemfig_updatePriorImageQueueGaugeOnRenderPipelines((uint64_t)a1);
        if (v232)
          itemfig_handleReadyToDisplayVideoLatch((uint64_t)a1, 3, v233);
        v29 = 0;
        goto LABEL_416;
      }
      queueOut[0] = 0;
      v198 = *(_DWORD *)(DerivedStorage + 1000);
      *(_OWORD *)cf = v238;
      *(_QWORD *)v264 = v237;
      CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)cf, v198, 1986618469, 1, (__CFDictionary **)v254);
      if (!(_DWORD)CommonRenderPipelineOptionsForTrack)
      {
        v199 = *(CFTypeRef *)(DerivedStorage + 1104);
        if (v199)
          v199 = CFRetain(v199);
        v251 = v199;
        v200 = *(CFTypeRef *)(DerivedStorage + 1112);
        if (v200)
          v200 = CFRetain(v200);
        v201 = 0;
        v250 = v200;
        if (*(_BYTE *)(DerivedStorage + 1824))
          v202 = 0;
        else
          v202 = v236;
        if (!*(_BYTE *)(DerivedStorage + 1824))
          v201 = *(_QWORD *)(v30 + 216);
        CommonRenderPipelineOptionsForTrack = fp_createFigImageQueueArrayForVideoRenderPipeline((uint64_t)a1, *(unsigned int *)(DerivedStorage + 1000), 0, theArray, v202, v201, (CFArrayRef *)&v251, (CFArrayRef *)&v250, v241, *v135, 1, queueOut);
        if (!(_DWORD)CommonRenderPipelineOptionsForTrack)
        {
          v203 = queueOut[0];
          v204 = v221;
          if (v221)
            v204 = *(_DWORD *)(v133 + 4) == 1986618469;
          v29 = fp_buildVideoRenderPipelineForTrack(v227, (uint64_t)a1, *(unsigned int *)(DerivedStorage + 1000), v262, 0, *(_QWORD *)(v133 + 24), *(const void **)(v30 + 864), 1, queueOut[0], 0, v204, &v253[1]);
          if (v203)
            CFRelease(v203);
          if (!(_DWORD)v29)
          {
            MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1120));
            v205 = *(const void **)(DerivedStorage + 1104);
            v206 = v251;
            *(_QWORD *)(DerivedStorage + 1104) = v251;
            if (v206)
              CFRetain(v206);
            if (v205)
              CFRelease(v205);
            v207 = *(const void **)(DerivedStorage + 1112);
            v208 = v250;
            *(_QWORD *)(DerivedStorage + 1112) = v250;
            if (v208)
              CFRetain(v208);
            if (v207)
              CFRelease(v207);
            MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1120));
            goto LABEL_394;
          }
          goto LABEL_427;
        }
      }
LABEL_426:
      v29 = CommonRenderPipelineOptionsForTrack;
LABEL_427:
      Mutable = v132;
LABEL_429:
      v26 = v236;
LABEL_416:
      v28 = v229;
      v21 = 0;
      v22 = 0;
      SInt32 = 0;
      goto LABEL_176;
    }
LABEL_171:
    itemfig_removeAllImageQueues((uint64_t)a1);
    playerfig_freeTransitionImageQueueAndSlot();
  }
  if ((!v26 || CFArrayGetCount(v26) <= 0) && *(uint64_t *)(v30 + 216) < 1)
    goto LABEL_117;
  v75 = *(CFTypeRef *)(DerivedStorage + 1104);
  if (v75)
    v75 = CFRetain(v75);
  v251 = v75;
  v76 = *(CFTypeRef *)(DerivedStorage + 1112);
  if (v76)
    v76 = CFRetain(v76);
  v77 = *(float *)(DerivedStorage + 736);
  v78 = (*(double *)(DerivedStorage + 720) * v77);
  v250 = v76;
  v79 = fp_buildImageQueueArray(v78, (*(double *)(DerivedStorage + 728) * v77), v26, *(_QWORD *)(v30 + 216), (CFArrayRef *)&v251, (CFArrayRef *)&v250);
  if ((_DWORD)v79)
  {
    v29 = v79;
    goto LABEL_173;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1120));
  v80 = *(const void **)(DerivedStorage + 1104);
  v81 = v251;
  *(_QWORD *)(DerivedStorage + 1104) = v251;
  if (v81)
    CFRetain(v81);
  if (v80)
    CFRelease(v80);
  v82 = *(const void **)(DerivedStorage + 1112);
  v83 = v250;
  *(_QWORD *)(DerivedStorage + 1112) = v250;
  if (v83)
    CFRetain(v83);
  if (v82)
    CFRelease(v82);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1120));
LABEL_117:
  fp_visualContextArrayIfVideoOutputAllowed(theArray, *(_QWORD *)(DerivedStorage + 1160));
  ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
  v21 = (const __CFArray *)FigCFArrayCreateConcatenationOfTwoArrays();
  if (ConcatenationOfTwoArrays)
    CFRelease(ConcatenationOfTwoArrays);
  v85 = (uint64_t *)(DerivedStorage + 824);
  v86 = *(_QWORD *)(DerivedStorage + 824);
  if (!v86)
  {
    matched = FigImageQueueTableCreate(allocator, v85);
    if ((_DWORD)matched)
    {
LABEL_421:
      v29 = matched;
      goto LABEL_174;
    }
    v86 = *(_QWORD *)(DerivedStorage + 824);
    v85 = (uint64_t *)(DerivedStorage + 824);
  }
  v224 = v85;
  matched = FigImageQueueTableUpdateToMatchOutputsArray(v86, v21, *(void **)(DerivedStorage + 328), (void (*)(void *, uint64_t))fp_imageQueueTableCreatedImageQueueCallback, (void (*)(const void *, uint64_t))fp_imageQueueTableWillReleaseImageQueueCallback, (uint64_t)a1);
  if ((_DWORD)matched)
    goto LABEL_421;
  v220 = v52;
  v228 = Mutable;
  v226 = a7;
  if (v21)
    CFRelease(v21);
  v88 = (CFTypeRef *)(DerivedStorage + 816);
  v89 = *(const __CFArray **)(DerivedStorage + 1104);
  if (v89)
  {
    v90 = CFArrayGetCount(v89);
    if (v90 >= 1)
    {
      v91 = v90;
      v92 = 0;
      v93 = *MEMORY[0x1E0C9AE50];
      v231 = *MEMORY[0x1E0C9AE40];
      do
      {
        v94 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1104), v92);
        v95 = FigImageQueueTableCopyFigImageQueueForVisualContext(*(_QWORD *)(DerivedStorage + 824), v94);
        CAImageQueueSetFlags();
        CAImageQueueSetFlags();
        FigBaseObject = FigImageQueueGetFigBaseObject(v95);
        v97 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v97)
          v97(FigBaseObject, CFSTR("FigImageQueueProperty_EnqueueResetsSystemSleepTimer"), v93);
        v98 = *(unsigned __int8 *)(v30 + 232);
        v99 = FigImageQueueGetFigBaseObject(v95);
        v100 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
        if (v100)
        {
          if (v98)
            v101 = v93;
          else
            v101 = v231;
          v100(v99, CFSTR("PreventDisplaySleepDuringVideoPlayback"), v101);
        }
        v102 = *(_QWORD *)(DerivedStorage + 1144);
        if (v102)
        {
          v103 = FigImageQueueGetFigBaseObject(v95);
          v104 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
          if (v104)
            v104(v103, CFSTR("VideoEnhancementMode"), v102);
        }
        v105 = FigImageQueueGetFigBaseObject(v95);
        v106 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
        if (v106)
          v106(v105, CFSTR("EnableImageQueueTiming"), v93);
        *(_OWORD *)cf = v238;
        *(_QWORD *)v264 = v237;
        a1 = v243;
        if (!itemfig_getDurationIfReady((uint64_t)v243, (uint64_t)cf) && (BYTE4(cf[1]) & 1) != 0)
        {
          time = *(_OWORD *)cf;
          *(_QWORD *)time_16 = *(_QWORD *)v264;
          v107 = CMTimeCopyAsDictionary((CMTime *)&time, allocator);
          v108 = FigImageQueueGetFigBaseObject(v95);
          v109 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
          if (v109)
            v109(v108, CFSTR("Duration"), v107);
          a1 = v243;
          if (v107)
            CFRelease(v107);
        }
        if (v95)
          CFRelease(v95);
        ++v92;
      }
      while (v91 != v92);
    }
  }
  if (*v88)
    CFRelease(*v88);
  FigImageQueueTableCopyFigImageQueueArray(*v224, (uint64_t *)(DerivedStorage + 816));
  Mutable = v228;
  if (*v88)
  {
    v110 = CFArrayGetCount((CFArrayRef)*v88);
    if (v110 >= 1)
    {
      v111 = v110;
      for (i = 0; i != v111; ++i)
      {
        v113 = CFArrayGetValueAtIndex((CFArrayRef)*v88, i);
        v114 = *(float *)(v30 + 48);
        v115 = *(void (**)(const void *, BOOL))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v115)
          v115(v113, v114 != 0.0);
        v116 = *(void (**)(const void *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v116)
          v116(v113, 1.0);
      }
    }
  }
  v117 = FigActivitySchedulerCreateForNewThread((uint64_t)allocator, 23, CFSTR("com.apple.coremedia.videoprocessor"), &v261);
  if ((_DWORD)v117)
  {
    v29 = v117;
    v21 = 0;
    v22 = 0;
    SInt32 = 0;
    goto LABEL_37;
  }
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 720));
  v119 = FigVideoCompositorGetFigBaseObject(*(_QWORD *)(DerivedStorage + 656));
  v120 = *(uint64_t (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
  v26 = v236;
  if (v120)
  {
    v29 = v120(v119, CFSTR("RenderDimensions"), DictionaryRepresentation);
    if (!DictionaryRepresentation)
      goto LABEL_163;
    goto LABEL_162;
  }
  v29 = 4294954514;
  if (DictionaryRepresentation)
LABEL_162:
    CFRelease(DictionaryRepresentation);
LABEL_163:
  if ((_DWORD)v29)
  {
LABEL_168:
    v21 = 0;
    v22 = 0;
LABEL_169:
    SInt32 = 0;
    a7 = v226;
    goto LABEL_175;
  }
  v121 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)cf = xmmword_1932F76D8;
  *(_QWORD *)v264 = 0;
  time = xmmword_1932F76F0;
  *(_QWORD *)time_16 = 0;
  if (*(_BYTE *)(v121 + 688))
  {
    *(_QWORD *)v264 = 0;
    *(_OWORD *)cf = kFigPlayerFileLowWaterLevelDuration_Minimum;
    *(_QWORD *)time_16 = 0;
    time = kFigPlayerFileLowWaterLevelDuration_Minimum;
  }
  *(_OWORD *)queueOut = *(_OWORD *)cf;
  *(_QWORD *)&v268 = *(_QWORD *)v264;
  *(_OWORD *)&v249.value = time;
  v249.epoch = *(_QWORD *)time_16;
  v122 = *(const void **)(DerivedStorage + 656);
  v123 = *(_DWORD *)(DerivedStorage + 716);
  v124 = *(const __CFArray **)(DerivedStorage + 816);
  v125 = (uint64_t *)(DerivedStorage + 808);
  *(_OWORD *)cf = *(_OWORD *)(DerivedStorage + 692);
  *(_QWORD *)v264 = *(_QWORD *)(DerivedStorage + 708);
  time = *(_OWORD *)queueOut;
  *(_QWORD *)time_16 = v268;
  type = v249;
  v126 = FigVideoCompositionProcessorCreateWithImageQueueArray(allocator, 0, v122, (CMTime *)cf, v123, v124, (CMTime *)&time, &type, v261, (uint64_t *)(DerivedStorage + 808));
  if ((_DWORD)v126
    || (v126 = FigVideoCompositionProcessorSetCompositionInstructionCallback(*v125, (uint64_t)itemfig_copyCompositionInstructionAtTime, (uint64_t)a1), (_DWORD)v126))
  {
    v29 = v126;
    goto LABEL_168;
  }
  v128 = CFNumberCreate(allocator, kCFNumberFloatType, (const void *)(DerivedStorage + 736));
  v29 = FigVideoCompositionProcessorSetProperty(*(_QWORD *)(DerivedStorage + 808), CFSTR("VideoCompositionProcessor_RenderScale"), v128);
  if (v128)
    CFRelease(v128);
  if ((_DWORD)v29)
    goto LABEL_168;
  v219 = (_OWORD *)(DerivedStorage + 692);
  v129 = *(const void **)(v30 + 864);
  if (v129)
  {
    v22 = (void *)CFRetain(v129);
  }
  else
  {
    cf[0] = (CFTypeRef)(*v125 | 0x8000000000000000);
    v22 = CFNumberCreate(allocator, kCFNumberSInt64Type, cf);
    if (!v22)
    {
      v145 = FigSignalErrorAt();
      goto LABEL_431;
    }
  }
  v145 = FigVideoCompositionProcessorSetProperty(*v125, CFSTR("VideoCompositionProcessor_PixelBufferPoolSharingID"), v22);
  if ((_DWORD)v145)
    goto LABEL_431;
  if (*(_DWORD *)(v30 + 472))
  {
    v146 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(v30 + 472));
    if (v146)
    {
      v147 = v146;
      v29 = FigVideoCompositionProcessorSetProperty(*v125, CFSTR("VideoCompositionProcessor_ClientPID"), v146);
      CFRelease(v147);
      if ((_DWORD)v29)
        goto LABEL_246;
    }
  }
  v145 = FigVideoCompositionProcessorSetProperty(*v125, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes"), (void *)v262);
  if ((_DWORD)v145)
    goto LABEL_431;
  v148 = *(void **)(DerivedStorage + 744);
  if (v148)
  {
    v145 = FigVideoCompositionProcessorSetProperty(*v125, CFSTR("VideoCompositionProcessor_CompositionColorPrimaries"), v148);
    if ((_DWORD)v145)
      goto LABEL_431;
  }
  if ((v149 = *(void **)(DerivedStorage + 752)) != 0
    && (v145 = FigVideoCompositionProcessorSetProperty(*v125, CFSTR("VideoCompositionProcessor_CompositionYCbCrMatrix"), v149), (_DWORD)v145)|| (v150 = *(void **)(DerivedStorage + 760)) != 0&& (v145 = FigVideoCompositionProcessorSetProperty(*v125, CFSTR("VideoCompositionProcessor_CompositionTransferFunction"), v150), (_DWORD)v145)|| (v151 = *(void **)(DerivedStorage + 768)) != 0&& (v145 = FigVideoCompositionProcessorSetProperty(*v125, CFSTR("VideoCompositionProcessor_HDRDisplayMetadataPolicy"), v151), (_DWORD)v145)|| (v145 = FigVideoCompositionProcessorCopyProperty(*v125, CFSTR("VideoCompositionProcessor_SourcePixelBufferAttributes"),
                 (uint64_t)allocator,
                 &v260),
        (_DWORD)v145))
  {
LABEL_431:
    v29 = v145;
LABEL_246:
    v21 = 0;
    goto LABEL_169;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v29 = FigNotificationCenterAddWeakListener();
  v234 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
  if (v234 < 1)
  {
    SInt32 = 0;
LABEL_339:
    v191 = *v224;
    a7 = v226;
    Mutable = v228;
    if (*v224)
    {
      cf[0] = 0;
      FigImageQueueTableCopyMappedImageQueueArray(v191, *(_QWORD *)(DerivedStorage + 1104), (uint64_t *)cf);
      FigImageQueueArraySetProperty();
      FigImageQueueArraySetProperty();
      if (cf[0])
        CFRelease(cf[0]);
    }
    if (v225)
      FigImageQueueTableSetTimebase(*(_QWORD *)(DerivedStorage + 824), *(void **)(DerivedStorage + 328));
    v21 = 0;
    goto LABEL_175;
  }
  v152 = 0;
  SInt32 = 0;
  v218 = *MEMORY[0x1E0C9AE50];
  while (1)
  {
    v153 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v152);
    v154 = v153;
    v155 = v153[1];
    if (v155 == 1986618469)
      break;
    if (v155 != 1835365473)
    {
      if (v155 != 1635088502)
        goto LABEL_311;
      break;
    }
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    time = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)time_16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v163 = *(_QWORD *)time_16;
    *(_OWORD *)&time_16[8] = time;
    *(_QWORD *)&time_16[24] = *(_QWORD *)time_16;
    v246 = time;
    *(_QWORD *)v247 = *(_QWORD *)time_16;
    v223 = time;
    *(_OWORD *)&v247[8] = time;
    *(_QWORD *)&v247[24] = *(_QWORD *)time_16;
    v164 = *(const void **)(DerivedStorage + 800);
    if (v164)
    {
      v29 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v164, *v154, &time);
      if ((_DWORD)v29)
        goto LABEL_335;
    }
    v165 = FigCFArrayContainsValue();
    *(_OWORD *)&v264[16] = *(_OWORD *)&time_16[16];
    v265 = v246;
    *(_OWORD *)v266 = *(_OWORD *)v247;
    *(_OWORD *)&v266[16] = *(_OWORD *)&v247[16];
    *(_OWORD *)cf = time;
    *(_OWORD *)v264 = *(_OWORD *)time_16;
    IsZero = FigVideoCompositionTimeWindowDurationIsZero((uint64_t)cf);
    if (SInt32)
      CFRelease(SInt32);
    if (IsZero && !v165)
      goto LABEL_278;
    v167 = (const void *)*((_QWORD *)v154 + 2);
    if (v167)
    {
      CFRelease(v167);
      *((_QWORD *)v154 + 2) = 0;
    }
    v168 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    if (CMBufferQueueCreate(allocator, 0, v168, (CMBufferQueueRef *)&v258))
    {
      SInt32 = 0;
      goto LABEL_295;
    }
    v26 = v236;
    if (!FigRenderPipelineCreateForBufferQueue((uint64_t)allocator, v258, 0, (CFTypeRef *)v154 + 2))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 672));
      v181 = *(const __CFArray **)(DerivedStorage + 680);
      if (v181)
      {
        v182 = CFArrayGetCount(v181);
        if (v182 >= 1)
        {
          v183 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 680), v182 - 1);
          if (v183)
          {
            v184 = (const __CFDictionary *)CFDictionaryGetValue(v183, CFSTR("EndTime"));
            if (v184)
              CMTimeMakeFromDictionary(&v257, v184);
          }
        }
      }
      *(_OWORD *)cf = *(_OWORD *)&v257.value;
      *(_QWORD *)v264 = v257.epoch;
      *(_OWORD *)queueOut = v238;
      *(_QWORD *)&v268 = v237;
      if (!CMTimeCompare((CMTime *)cf, (CMTime *)queueOut))
      {
        LODWORD(v249.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v186 = v249.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
          v187 = v186;
        else
          v187 = v186 & 0xFFFFFFFE;
        if (v187)
        {
          LODWORD(queueOut[0]) = 136315138;
          *(CMBufferQueueRef *)((char *)queueOut + 4) = (CMBufferQueueRef)"itemfig_createRenderTriplesForVideo";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 672));
      *(_OWORD *)cf = v223;
      *(_QWORD *)v264 = v163;
      *(_OWORD *)&v264[8] = v223;
      *(_QWORD *)&v264[24] = v163;
      v265 = v223;
      *(_QWORD *)v266 = v163;
      *(_OWORD *)&v266[8] = v223;
      *(_QWORD *)&v266[24] = v163;
      v188 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(*(CFTypeRef *)(DerivedStorage + 800), *v154, cf);
      if ((_DWORD)v188)
      {
        v29 = v188;
      }
      else
      {
        v189 = *v125;
        v190 = *v154;
        v269 = *(_OWORD *)&v264[16];
        v270 = v265;
        v271 = *(_OWORD *)v266;
        v272 = *(_OWORD *)&v266[16];
        *(_OWORD *)queueOut = *(_OWORD *)cf;
        v268 = *(_OWORD *)v264;
        v249 = v257;
        v29 = FigVideoCompositionProcessorSetSourceBufferQueue(v189, v190, queueOut, (opaqueCMBufferQueue *)v258, (uint64_t)&v249);
        if (v258)
        {
          CFRelease(v258);
          v258 = 0;
        }
        if (!(_DWORD)v29)
        {
          LODWORD(value) = *v154;
          *((_QWORD *)&value + 1) = 0;
          *(_OWORD *)queueOut = *v219;
          *(_QWORD *)&v268 = *(_QWORD *)(DerivedStorage + 708);
          v29 = fp_createCommonRenderPipelineOptionsForTrack(v243, 0, (uint64_t)queueOut, value, 1835365473, 0, (__CFDictionary **)v254);
          v253[1] = CFRetain(*((CFTypeRef *)v154 + 2));
          CFArrayAppendValue(v229, &value);
          itemfig_resetRenderTriple((uint64_t)&value);
LABEL_278:
          SInt32 = 0;
LABEL_310:
          v26 = v236;
          goto LABEL_311;
        }
      }
      SInt32 = 0;
LABEL_333:
      v171 = 2;
LABEL_297:
      v26 = v236;
      goto LABEL_298;
    }
    SInt32 = 0;
    v29 = 0;
    v171 = 102;
LABEL_298:
    if (v171 != 102)
    {
      v21 = 0;
      a7 = v226;
      Mutable = v228;
      goto LABEL_175;
    }
LABEL_311:
    if (v234 == ++v152)
      goto LABEL_339;
  }
  if (!*((_BYTE *)v153 + 8))
    goto LABEL_311;
  v249.value = 0;
  *(_OWORD *)cf = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)v264 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v156 = *(_QWORD *)v264;
  *(_OWORD *)&v264[8] = *(_OWORD *)cf;
  *(_QWORD *)&v264[24] = *(_QWORD *)v264;
  v265 = *(_OWORD *)cf;
  *(_QWORD *)v266 = *(_QWORD *)v264;
  *(_QWORD *)&v266[24] = *(_QWORD *)v264;
  v222 = *(_OWORD *)cf;
  *(_OWORD *)&v266[8] = *(_OWORD *)cf;
  v157 = *(const void **)(DerivedStorage + 792);
  if (v157)
  {
    v158 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v157, *v154, cf);
    if ((_DWORD)v158)
    {
      v29 = v158;
LABEL_335:
      v171 = 2;
      goto LABEL_298;
    }
  }
  v159 = FigVisualContextCreateBasic((uint64_t)allocator, 0, &v259);
  if ((_DWORD)v159)
  {
    v29 = v159;
    goto LABEL_333;
  }
  v160 = (CFTypeRef *)(v154 + 4);
  if (*((_QWORD *)v154 + 2))
  {
    FigStopForwardingMediaServicesProcessDeathNotification();
    if (*v160)
    {
      CFRelease(*v160);
      *v160 = 0;
    }
  }
  v161 = CFArrayCreate(allocator, &v259, 1, MEMORY[0x1E0C9B378]);
  if (*((_QWORD *)v154 + 6))
  {
    v162 = (uint64_t)v243;
    itemfig_clearTrackImageQueueTable((uint64_t)v243, (uint64_t)v154);
  }
  else
  {
    FigImageQueueTableCreate(allocator, (_QWORD *)v154 + 6);
    v162 = (uint64_t)v243;
  }
  v169 = fp_createFigImageQueueArrayForVideoRenderPipeline(v162, *v154, 0, v161, 0, 0, 0, 0, 0, *((_QWORD *)v154 + 6), 0, &v249);
  if (!v169)
  {
    v170 = v220;
    if (v220)
      v170 = v154[1] == 1986618469;
    v169 = fp_buildVideoRenderPipelineForTrack(v227, (uint64_t)v243, *v154, v260, 0, *((_QWORD *)v154 + 3), v22, 0, (const __CFArray *)v249.value, 0, v170, (_QWORD *)v154 + 2);
  }
  if (v161)
    CFRelease(v161);
  if (v249.value)
    CFRelease((CFTypeRef)v249.value);
  if (v169)
  {
    if (v259)
    {
      CFRelease(v259);
      v29 = 0;
      v259 = 0;
    }
    else
    {
LABEL_295:
      v29 = 0;
    }
    v171 = 102;
    goto LABEL_297;
  }
  FigStartForwardingMediaServicesProcessDeathNotification();
  v172 = FigRenderPipelineGetFigBaseObject(*v160);
  v173 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v173)
    v173(v172, CFSTR("ObeyEmptyMediaMarkers"), v218);
  v174 = *(_QWORD *)(DerivedStorage + 2144);
  v175 = FigRenderPipelineGetFigBaseObject(*v160);
  v176 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v176)
    v176(v175, CFSTR("AttachmentCollectorMetadataSourceBuffers"), v174);
  time = v222;
  *(_QWORD *)time_16 = v156;
  *(_OWORD *)&time_16[8] = v222;
  *(_QWORD *)&time_16[24] = v156;
  v246 = v222;
  *(_QWORD *)v247 = v156;
  *(_OWORD *)&v247[8] = v222;
  *(_QWORD *)&v247[24] = v156;
  v177 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(*(CFTypeRef *)(DerivedStorage + 792), *v154, &time);
  if (!(_DWORD)v177)
  {
    v178 = *v125;
    v179 = *v154;
    v180 = v154[1];
    v269 = *(_OWORD *)&time_16[16];
    v270 = v246;
    v271 = *(_OWORD *)v247;
    v272 = *(_OWORD *)&v247[16];
    *(_OWORD *)queueOut = time;
    v268 = *(_OWORD *)time_16;
    v177 = FigVideoCompositionProcessorSetSourceVisualContext(v178, v179, v180, queueOut, v259);
    if (!(_DWORD)v177)
    {
      if (v259)
      {
        CFRelease(v259);
        v259 = 0;
      }
      LODWORD(value) = *v154;
      *((_QWORD *)&value + 1) = 0;
      *(_OWORD *)queueOut = *v219;
      *(_QWORD *)&v268 = *(_QWORD *)(DerivedStorage + 708);
      v29 = fp_createCommonRenderPipelineOptionsForTrack(v243, 0, (uint64_t)queueOut, value, 1986618469, 1, (__CFDictionary **)v254);
      if ((_DWORD)v29)
        goto LABEL_424;
      v253[1] = CFRetain(*v160);
      CFArrayAppendValue(v228, &value);
      itemfig_resetRenderTriple((uint64_t)&value);
      goto LABEL_310;
    }
  }
  v29 = v177;
LABEL_424:
  v21 = 0;
LABEL_240:
  a7 = v226;
  Mutable = v228;
LABEL_37:
  v26 = v236;
LABEL_175:
  v28 = v229;
LABEL_176:
  v24 = v235;
LABEL_177:
  itemfig_resetRenderTriple((uint64_t)&value);
  *a7 = Mutable;
  *a8 = v28;
  *a9 = v24;
  if (v256)
    CFRelease(v256);
  if (v255)
    CFRelease(v255);
  if (SInt32)
    CFRelease(SInt32);
  if (v251)
    CFRelease(v251);
  if (v250)
    CFRelease(v250);
  if (theArray)
    CFRelease(theArray);
  if (v262)
    CFRelease(v262);
  if (v21)
    CFRelease(v21);
  if (v261)
    CFRelease(v261);
  if (v260)
    CFRelease(v260);
  if (v259)
    CFRelease(v259);
  if (v258)
    CFRelease(v258);
  if (v22)
    CFRelease(v22);
  if (v26)
    dispatch_async_f(MEMORY[0x1E0C80D38], v26, (dispatch_function_t)itemfig_releaseVideoLayerArray);
  if (v241)
    CFRelease(v241);
  return v29;
}

void itemfig_updateAccessLogEntry(float a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  double Seconds;
  CMTime v6;
  CMTime v7;

  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 352);
  if (v3)
  {
    if (a1 != 0.0 && *(_BYTE *)(DerivedStorage + 1689) == 0)
    {
      memset(&v7, 0, sizeof(v7));
      FigPlaybackBossGetTime(v3, &v7);
      Seconds = 0.0;
      if ((v7.flags & 1) != 0)
      {
        v6 = v7;
        Seconds = CMTimeGetSeconds(&v6);
      }
      *(double *)(DerivedStorage + 1528) = Seconds;
      *(_BYTE *)(DerivedStorage + 1689) = 1;
    }
    if (a1 == 0.0)
    {
      if (!*(_BYTE *)(DerivedStorage + 1688))
        return;
    }
    else
    {
      *(_BYTE *)(DerivedStorage + 1688) = 1;
    }
    if (*(double *)(DerivedStorage + 1544) != 0.0)
    {
      *(double *)(DerivedStorage + 1536) = *(double *)(DerivedStorage + 1536)
                                         + (CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 1544))
                                         * fabsf(*(float *)(DerivedStorage + 1600));
      *(_QWORD *)(DerivedStorage + 1544) = 0;
    }
    if (a1 != 0.0)
      *(CFAbsoluteTime *)(DerivedStorage + 1544) = CFAbsoluteTimeGetCurrent();
    *(float *)(DerivedStorage + 1600) = a1;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
}

CMTime *itemfig_reportingAgentReportPlayStartMovieTime()
{
  uint64_t DerivedStorage;
  CMTime *result;
  uint64_t v2;
  __n128 v3;
  double v4;
  void (*v5)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  CMTime v6;
  CMTime v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v7, 0, sizeof(v7));
  result = CMTimebaseGetTime(&v7, *(CMTimebaseRef *)(DerivedStorage + 328));
  if ((v7.flags & 1) != 0)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1896));
    v2 = *(_QWORD *)(DerivedStorage + 1904);
    v6 = v7;
    v3.n128_f64[0] = CMTimeGetSeconds(&v6);
    if (v2)
    {
      v4 = v3.n128_f64[0];
      v5 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v5)
        v5(v2, CFSTR("playerStats"), CFSTR("StNPT"), (uint64_t)(v4 * 1000.0), 0);
    }
    return (CMTime *)MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1896), v3);
  }
  return result;
}

uint64_t itemfig_setEndTimeOnBoss()
{
  uint64_t DerivedStorage;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_OWORD *)(DerivedStorage + 140);
  v5 = *(_QWORD *)(DerivedStorage + 156);
  result = *(_QWORD *)(DerivedStorage + 352);
  if (result)
  {
    if (*(_QWORD *)(DerivedStorage + 2072))
    {
      CFDataGetLength(*(CFDataRef *)(DerivedStorage + 2072));
      CFDataGetBytePtr(*(CFDataRef *)(DerivedStorage + 2072));
      v2 = v4;
      v3 = v5;
      CMSpeedRampMapTimeFromTargetToSource();
      result = *(_QWORD *)(DerivedStorage + 352);
    }
    v2 = v4;
    v3 = v5;
    return FigPlaybackBossSetEndTime(result, &v2);
  }
  return result;
}

void itemfig_unregisterAndDestroyPlayabilityMonitorNotification()
{
  CMBaseObjectGetDerivedStorage();
  itemfig_unregisterPlayabilityMonitorNotification();
}

void itemfig_registerPlayabilityMonitorNotification(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t DefaultLocalCenter;
  int PlaythroughInfo;
  double PlayableDurationAtCurrentTime;
  CFDictionaryRef DurationDictionary;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const __CFDictionary *Mutable;
  NSObject *v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 616));
  if (!*(_QWORD *)(DerivedStorage + 600) || *(_BYTE *)(DerivedStorage + 608))
    JUMPOUT(0x19402EA24);
  DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
  v14 = 0;
  v13 = 0;
  FigNotificationCenterAddWeakListener();
  FigNotificationCenterAddWeakListener();
  FigNotificationCenterAddWeakListener();
  FigNotificationCenterAddWeakListener();
  FigNotificationCenterAddWeakListener();
  *(_BYTE *)(DerivedStorage + 608) = 1;
  PlaythroughInfo = FigPlayabilityMonitorGetPlaythroughInfo(*(_QWORD *)(DerivedStorage + 600), &v14, &v13, 0);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 616));
  if (!PlaythroughInfo)
  {
    switch(v14)
    {
      case 0:
        break;
      case 1:
        PlayableDurationAtCurrentTime = itemfig_getPlayableDurationAtCurrentTime((uint64_t)a1);
        DurationDictionary = fpm_createDurationDictionary(PlayableDurationAtCurrentTime);
        if (dword_1EE2A2AC8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        itemfig_LikelyToKeepUp(DefaultLocalCenter, a1);
        if (DurationDictionary)
          CFRelease(DurationDictionary);
        break;
      case 2:
        if (dword_1EE2A2AC8)
        {
          v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        itemfig_UnlikelyToKeepUp(DefaultLocalCenter, a1);
        break;
      case 3:
        if (dword_1EE2A2AC8)
        {
          v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        itemfig_StallWarning(DefaultLocalCenter, a1);
        break;
      default:
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        break;
    }
    if (v13)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetValue();
      itemfig_PlayableRangeChanged(DefaultLocalCenter, a1, 0x1E2FD96F8, 0, Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
    else
    {
      if (dword_1EE2A2AC8)
      {
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      itemfig_BufferFull(DefaultLocalCenter, a1);
    }
  }
}

uint64_t itemfig_handleOutOfBandTrackPlaybackFailed()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void itemfig_handleOutOfBandTrackSubtitleChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  _BYTE *v8;
  CFTypeRef v9;
  BOOL v10;
  BOOL v11;
  Boolean v12;
  CFTypeRef cf;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v12 = 0;
  if (a5)
  {
    if (!*DerivedStorage)
    {
      v7 = (_BYTE *)CMBaseObjectGetDerivedStorage();
      if (!*v7)
      {
        v8 = v7;
        FigSubtitleSampleCreateFromPropertyList(a5, (__CFDictionary **)&cf, &v12, 0, 0);
        v9 = cf;
        if (v8[688])
          v10 = 0;
        else
          v10 = v12 == 0;
        v11 = !v10 || cf == 0;
        if (!v11
          || (CMNotificationCenterGetDefaultLocalCenter(), CMNotificationCenterPostNotification(), (v9 = cf) != 0))
        {
          CFRelease(v9);
        }
      }
    }
  }
}

uint64_t itemfig_synchronizeOOBSController(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  float v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    if (a2)
    {
      result = *(_QWORD *)(result + 1856);
      if (result)
      {
        if ((*(_BYTE *)(a2 + 4) & 3) != 0)
        {
          v4 = *(double *)(a2 + 8);
          v7 = *(_OWORD *)(a2 + 16);
          v8 = *(_QWORD *)(a2 + 32);
          v5 = *(_OWORD *)(a2 + 40);
          v6 = *(_QWORD *)(a2 + 56);
          return FigOutOfBandTrackControllerSetRateAndAnchorTime(result, &v7, &v5, v4);
        }
      }
    }
  }
  return result;
}

uint64_t itemfig_setMuted(uint64_t a1, int a2)
{
  uint64_t result;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 352);
  if (result)
    return FigPlaybackBossSetMuted(result, a2);
  return result;
}

void itemfig_ReportAudioPlaybackThroughFigLog(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CMAudioFormatDescriptionRef v7;
  uint64_t v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v13;
  CFTypeRef cf;
  CMAudioFormatDescriptionRef desc;
  CFTypeRef v16;
  _QWORD v17[37];

  v17[34] = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17[0] = 0;
  cf = 0;
  desc = 0;
  v13 = 0;
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
      {
        v4 = *(unsigned int *)(DerivedStorage + 996);
        if ((_DWORD)v4)
        {
          v5 = *(_QWORD *)(DerivedStorage + 968);
          v6 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 56);
          if (v6)
          {
            if (!v6(v5, v4, &v16, 0) && !itemfig_copyFormatDescription((uint64_t)v16, (uint64_t *)&desc))
            {
              v7 = desc;
              if (CMAudioFormatDescriptionGetRichestDecodableFormat(desc))
              {
                if (!itemfig_getTrackStorage(a1, *(_DWORD *)(DerivedStorage + 996), v17))
                {
                  v8 = *(_QWORD *)(v17[0] + 16);
                  if (v8)
                  {
                    FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
                    v10 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
                    if (v10)
                      v10(FigBaseObject, CFSTR("SpatializationEnabled"), *MEMORY[0x1E0C9AE00], &cf);
                    FPSupport_GetAudioFormatDescriptionSpatializationEligibility((uint64_t)v7, &v13);
                    itemfig_isSpatializationAllowed(a1, 0);
                    itemfig_isSpatializationAllowed(a1, 1);
                    v11 = cf;
                    if (dword_1EE2A2AC8)
                    {
                      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      v11 = cf;
                    }
                    if (v11)
                      CFRelease(v11);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v3 = 0;
  }
  if (v16)
    CFRelease(v16);
  if (desc)
    CFRelease(desc);
  if (v3)
    CFRelease(v3);
}

void itemfig_getFrameDropCountFromAllVideoPipelines(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  _QWORD *ValueAtIndex;
  uint64_t v10;
  uint64_t FigBaseObject;
  unsigned int (*v12)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  const __CFArray *Value;
  const __CFArray *v14;
  CFIndex v15;
  _QWORD *v16;
  CFDictionaryRef theDict;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 640));
  v4 = *(_QWORD *)(DerivedStorage + 648);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 640));
  if (v4)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      v8 = *MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v7);
        if (*((_DWORD *)ValueAtIndex + 1) == 1986618469)
        {
          v10 = ValueAtIndex[2];
          if (v10)
          {
            theDict = 0;
            FigBaseObject = FigRenderPipelineGetFigBaseObject(v10);
            v12 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v12)
            {
              if (!v12(FigBaseObject, CFSTR("PerformanceDictionary"), v8, &theDict))
              {
                Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ImageQueuePerformanceArray"));
                if (Value)
                {
                  v14 = Value;
                  if (CFArrayGetCount(Value) >= 1)
                  {
                    v16 = a2;
                    v15 = 0;
                    do
                    {
                      CFArrayGetValueAtIndex(v14, v15);
                      if (FigCFDictionaryGetInt32IfPresent())
                        break;
                      ++v15;
                    }
                    while (CFArrayGetCount(v14) > v15);
                    a2 = v16;
                  }
                }
                FigCFDictionaryGetCFIndexIfPresent();
                FigCFDictionaryGetCFIndexIfPresent();
                CFRelease(theDict);
              }
            }
          }
        }
        ++v7;
      }
      while (v7 != v6);
    }
  }
  *a2 = 0;
}

double itemfig_getNonNegativeCurrentTime(uint64_t a1, CMTime *a2)
{
  __int128 *v3;
  __int128 v4;
  CMTime v6;
  CMTime time1;
  CMTime v8;

  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  itemfig_GetCurrentTime(a1, (uint64_t)&v8);
  v3 = (__int128 *)MEMORY[0x1E0CA2E68];
  if ((v8.flags & 0x1D) != 1
    || (time1 = v8, v6 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], CMTimeCompare(&time1, &v6) < 0))
  {
    v4 = *v3;
    v8 = *(CMTime *)v3;
  }
  if (a2)
  {
    *(_QWORD *)&v4 = v8.value;
    *a2 = v8;
  }
  return *(double *)&v4;
}

double itemfig_getPlayableRangeAtTime(uint64_t a1, CMTime *a2, _OWORD *a3)
{
  _QWORD *DerivedStorage;
  CMTimeEpoch v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  CMTime duration;
  CMTimeRange time1;
  CMTime v14;
  CMTime time2;
  CMTime v16;
  CMTime v17;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v17.value = *MEMORY[0x1E0CA2E68];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v17.epoch = v7;
  v11 = *(_OWORD *)&v17.value;
  *(_OWORD *)&v16.value = *(_OWORD *)&v17.value;
  v16.epoch = v7;
  MEMORY[0x19402EA0C](DerivedStorage[77]);
  v8 = DerivedStorage[75];
  if (v8)
  {
    FigPlayabilityMonitorGetPlayableRange(v8, (uint64_t)&v17, &v16);
  }
  else if (DerivedStorage[44])
  {
    itemfig_getDurationIfReady(a1, (uint64_t)&v16);
  }
  MEMORY[0x19402EA24](DerivedStorage[77]);
  time1.start = v16;
  *(_OWORD *)&time2.value = v11;
  time2.epoch = v7;
  if (!CMTimeCompare(&time1.start, &time2)
    || (time1.start = v17, time2 = *a2, CMTimeCompare(&time1.start, &time2) > 0)
    || (time1.start = v17,
        time2 = v16,
        CMTimeAdd(&v14, &time1.start, &time2),
        *(_OWORD *)&time1.start.value = *(_OWORD *)&a2->value,
        time1.start.epoch = a2->epoch,
        CMTimeCompare(&time1.start, &v14) >= 1))
  {
    v17 = *a2;
    result = *(double *)&v11;
    *(_OWORD *)&v16.value = v11;
    v16.epoch = v7;
  }
  if (a3)
  {
    time2 = v17;
    duration = v16;
    CMTimeRangeMake(&time1, &time2, &duration);
    v10 = *(_OWORD *)&time1.start.epoch;
    *a3 = *(_OWORD *)&time1.start.value;
    a3[1] = v10;
    result = *(double *)&time1.duration.timescale;
    a3[2] = *(_OWORD *)&time1.duration.timescale;
  }
  return result;
}

uint64_t itemfig_getDurationIfReady(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;
  CMTimeEpoch v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const __CFString *, int *, int *, _QWORD);
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **);
  __int128 v12;
  CMTime time2;
  CMTime time1;
  int v15;
  const __CFDictionary *v16;
  int v17;

  v17 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  v15 = 0;
  if (*(_BYTE *)DerivedStorage || !a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) == 1)
  {
    time1 = *(CMTime *)(DerivedStorage + 236);
    v12 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
    v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    time2.epoch = v6;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0 && (*(_DWORD *)(v5 + 272) & 0x1D) == 1)
    {
      time1 = *(CMTime *)(v5 + 260);
      *(_OWORD *)&time2.value = v12;
      time2.epoch = v6;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        result = 0;
        v7 = MEMORY[0x1E0CA2E30];
LABEL_20:
        *(_OWORD *)a2 = *(_OWORD *)v7;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(v7 + 16);
        return result;
      }
    }
  }
  v8 = *(_QWORD *)(v5 + 1216);
  if (!v8)
    return FigSignalErrorAt();
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, int *, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 8);
  if (!v9)
    return 4294954514;
  result = v9(v8, CFSTR("Duration"), &v15, &v17, 0);
  if ((_DWORD)result)
    return result;
  if (v15 != 2)
  {
    result = 0;
    v7 = MEMORY[0x1E0CA2E10];
    goto LABEL_20;
  }
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v5 + 1216));
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (!v11)
    return 4294954514;
  result = v11(CMBaseObject, CFSTR("Duration"), *MEMORY[0x1E0C9AE00], &v16);
  if (!(_DWORD)result)
  {
    CMTimeMakeFromDictionary(&time1, v16);
    *(CMTime *)a2 = time1;
    result = (uint64_t)v16;
    if (v16)
    {
      CFRelease(v16);
      return 0;
    }
  }
  return result;
}

uint64_t playerfig_removeAudioRenderPipelineListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

BOOL itemfig_shouldEnableSpatializationForTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CMFormatDescriptionRef v8;
  int AudioFormatDescriptionSpatializationEligibility;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  CMFormatDescriptionRef desc;
  CFTypeRef cf;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v16 = 0;
  desc = 0;
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    goto LABEL_14;
  v6 = *(_QWORD *)(DerivedStorage + 968);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v7)
    goto LABEL_14;
  if (v7(v6, a2, &cf, 0))
    goto LABEL_14;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc))
    goto LABEL_14;
  v8 = desc;
  if (CMFormatDescriptionGetMediaType(desc) != 1936684398)
    goto LABEL_14;
  AudioFormatDescriptionSpatializationEligibility = FPSupport_GetAudioFormatDescriptionSpatializationEligibility((uint64_t)v8, 0);
  playerfig_getDeviceMaximumNumberOfPhysicalOutputChannels((uint64_t)v5, (int *)&v16 + 1, 0);
  switch(AudioFormatDescriptionSpatializationEligibility)
  {
    case 0:
      goto LABEL_14;
    case 2:
      v10 = a1;
      v11 = 0;
LABEL_11:
      if (!itemfig_isSpatializationAllowed(v10, v11))
        goto LABEL_14;
      break;
    case 1:
      v10 = a1;
      v11 = 1;
      goto LABEL_11;
  }
  if (!itemfig_getMaximumNumberOfSpatializedOutputChannels(a1, (int *)&v16))
  {
    v12 = (int)v16 > SHIDWORD(v16);
    goto LABEL_15;
  }
LABEL_14:
  v12 = 0;
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (desc)
    CFRelease(desc);
  if (v5)
    CFRelease(v5);
  return v12;
}

uint64_t fp_buildAudioRenderPipelineForTrack(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, char a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  uint64_t TrackStorage;
  __SecTask *v16;
  const __CFBoolean *v17;
  const __CFBoolean *v18;
  _BOOL4 v19;
  const __CFBoolean *v20;
  const __CFBoolean *v21;
  char v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v25;
  uint64_t RenderPipelineOptions;
  CFTypeRef v27;
  __CFString *NextRenderPipelineIdentifierString;
  CFNumberRef v29;
  const void *v30;
  CFAllocatorRef *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t CMBaseObject;
  uint64_t (*v36)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  int v37;
  int v38;
  char v39;
  CMTimeValue v40;
  void *v41;
  _QWORD *v42;
  uint64_t (*v43)(CMTimeValue, void *, size_t *);
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  CMTimeValue v48;
  uint64_t (*v49)(CMTimeValue, const __CFString *, size_t *);
  int v50;
  const opaqueCMFormatDescription *v51;
  char v52;
  const AudioStreamBasicDescription *StreamBasicDescription;
  const AudioChannelLayout *ChannelLayout;
  const __CFDictionary *Extensions;
  const void *MagicCookie;
  CFNumberRef v57;
  CFNumberRef v58;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  OSStatus v61;
  const opaqueCMFormatDescription *v62;
  uint64_t AudioDeviceUIDFromPassthroughHelper;
  signed int MediaSubType;
  char v65;
  char v66;
  int v67;
  int v68;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  int v71;
  const void *v72;
  CFTypeRef v73;
  _BOOL4 v74;
  uint64_t v75;
  const __CFAllocator *v76;
  __CFDictionary *v77;
  __CFDictionary *v78;
  const void **v79;
  const void *v80;
  CFTypeRef v81;
  int v82;
  _BOOL4 v83;
  int v84;
  const __CFAllocator *v85;
  uint64_t FigBaseObject;
  void (*v87)(uint64_t, const __CFString *, _QWORD);
  const __CFDictionary *Mutable;
  const __CFAllocator *AllocatorForMedia;
  CFTypeRef v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, __CFString *, uint64_t);
  CFTypeRef v94;
  _QWORD *v95;
  uint64_t v96;
  void (*v97)(uint64_t, const __CFString *, _QWORD);
  const __CFString *v98;
  uint64_t v99;
  void (*v100)(uint64_t, const __CFString *, const __CFString *);
  const __CFString *v101;
  const void *v102;
  uint64_t v103;
  void (*v104)(uint64_t, const __CFString *, CFTypeRef);
  void *v105;
  uint64_t v106;
  void (*v107)(void *, _QWORD, CFAllocatorRef, CMTime *);
  CMTimeValue v108;
  uint64_t v109;
  void (*v110)(uint64_t, const __CFString *, CMTimeValue);
  _QWORD *v111;
  uint64_t v112;
  void (*v113)(uint64_t, const __CFString *, _QWORD);
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, const __CFString *, uint64_t);
  uint64_t v117;
  void (*v118)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, const __CFString *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, const __CFString *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, const __CFString *, uint64_t);
  uint64_t v128;
  void (*v129)(uint64_t, const __CFString *, _QWORD);
  const void *v130;
  CFTypeRef v131;
  char v133;
  char v134;
  const void *v135;
  char v136;
  const __CFBoolean *BOOLean;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora;
  void *value;
  char v141;
  int HasTrackOfType;
  int v143;
  _QWORD *v144;
  CMTime v145;
  CFTypeRef cf;
  CMAudioFormatDescriptionRef desc;
  CFTypeRef v148;
  uint64_t v149;
  void *keys;
  void *values;
  int valuePtr;
  CMTime sizeOut;
  CMTime formatDescriptionOut;
  size_t v155[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = CMBaseObjectGetDerivedStorage();
  v149 = 0;
  desc = 0;
  v148 = 0;
  cf = 0;
  HasTrackOfType = FPSupport_HasTrackOfType(*(_QWORD *)(v14 + 968), 1986618469);
  TrackStorage = itemfig_getTrackStorage(a2, a3, &v149);
  if ((_DWORD)TrackStorage)
  {
    RenderPipelineOptions = TrackStorage;
    v27 = 0;
    NextRenderPipelineIdentifierString = 0;
    v29 = 0;
    v20 = 0;
    goto LABEL_202;
  }
  v16 = *(__SecTask **)(DerivedStorage + 840);
  v144 = a7;
  v141 = a6;
  if (v16)
  {
    v17 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v16, CFSTR("com.apple.coremedia.allow-protected-content-playback"), 0);
    if (v17)
    {
      v18 = v17;
      v19 = CFBooleanGetValue(v17) != 0;
      CFRelease(v18);
    }
    else
    {
      v19 = 0;
    }
    v21 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(*(SecTaskRef *)(DerivedStorage + 840), CFSTR("com.apple.coreaudio.allow-amr-decode"), 0);
    v20 = v21;
    if (v21)
    {
      CFBooleanGetValue(v21);
      v22 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v22 = 1;
LABEL_10:
  v23 = *(_QWORD *)(v14 + 968);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 56);
  if (!v24)
  {
    v27 = 0;
    NextRenderPipelineIdentifierString = 0;
    v29 = 0;
    RenderPipelineOptions = 4294954514;
    goto LABEL_202;
  }
  v143 = v19;
  v25 = v24(v23, a3, &v148, 0);
  if ((_DWORD)v25 || (v25 = itemfig_copyFormatDescription((uint64_t)v148, (uint64_t *)&desc), (_DWORD)v25))
  {
    RenderPipelineOptions = v25;
    v27 = 0;
    NextRenderPipelineIdentifierString = 0;
    v29 = 0;
    goto LABEL_202;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 456));
  v30 = *(const void **)(DerivedStorage + 464);
  if (v30)
    value = (void *)CFRetain(v30);
  else
    value = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 456));
  v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  v136 = v22;
  BOOLean = v20;
  if (!a4)
    goto LABEL_64;
  formatDescriptionOut.value = 0;
  sizeOut.value = 0;
  v155[0] = 0;
  v32 = CMBaseObjectGetDerivedStorage();
  values = 0;
  v33 = PKDIsContentKeyBossEnabled();
  v34 = *(_QWORD *)(v32 + 1216);
  allocator = *v31;
  if (v33)
  {
    CMBaseObject = FigAssetGetCMBaseObject(v34);
    v36 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v36)
    {
      v37 = v36(CMBaseObject, CFSTR("assetProperty_ContentKeyBoss"), allocator, &sizeOut);
      v38 = 1;
      if (v37 || !sizeOut.value)
        goto LABEL_41;
      v39 = a5;
      if (!FigContentKeySpecifierCreate(3, CFSTR("AudibleGroupID"), 0, 0, (uint64_t *)&values))
      {
        v40 = sizeOut.value;
        v41 = values;
        v42 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        v43 = (uint64_t (*)(CMTimeValue, void *, size_t *))v42[13];
        if (v43 && *v42 >= 2uLL)
        {
          v44 = v43(v40, v41, v155);
          v45 = 1;
          v38 = 1;
          a5 = v39;
          if (v44)
            goto LABEL_41;
          goto LABEL_34;
        }
        v38 = 1;
      }
      a5 = v39;
      goto LABEL_41;
    }
LABEL_38:
    v38 = 1;
    goto LABEL_41;
  }
  v46 = FigAssetGetCMBaseObject(v34);
  v47 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v47)
    goto LABEL_38;
  if (v47(v46, CFSTR("assetProperty_DefaultContentKeySession"), allocator, &formatDescriptionOut))
    goto LABEL_38;
  v48 = formatDescriptionOut.value;
  if (!formatDescriptionOut.value)
    goto LABEL_38;
  v49 = *(uint64_t (**)(CMTimeValue, const __CFString *, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 80);
  if (!v49)
    goto LABEL_38;
  v45 = v49(v48, CFSTR("AudibleGroupID"), v155) == 0;
LABEL_34:
  v38 = 1;
  if (v45 && v155[0] && CFDataGetLength((CFDataRef)v155[0]) == 4)
  {
    v38 = 0;
    *(_DWORD *)(v32 + 912) = *(_DWORD *)CFDataGetBytePtr((CFDataRef)v155[0]);
  }
LABEL_41:
  if (values)
    CFRelease(values);
  v50 = v143;
  if (sizeOut.value)
    CFRelease((CFTypeRef)sizeOut.value);
  if (v155[0])
    CFRelease((CFTypeRef)v155[0]);
  if (formatDescriptionOut.value)
    CFRelease((CFTypeRef)formatDescriptionOut.value);
  if (!v38)
    v50 = 1;
  v143 = v50;
  v51 = desc;
  valuePtr = *(_DWORD *)(v14 + 912);
  if (valuePtr)
  {
    v52 = a5;
    formatDescriptionOut.value = 0;
    sizeOut.value = 0;
    v155[0] = 0;
    keys = CFSTR("AudibleGroupID");
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
    ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(v51, (size_t *)&sizeOut);
    Extensions = CMFormatDescriptionGetExtensions(v51);
    MagicCookie = CMAudioFormatDescriptionGetMagicCookie(v51, v155);
    v57 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
    values = v57;
    if (!v57)
    {
      v20 = BOOLean;
      v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      goto LABEL_63;
    }
    if (Extensions)
    {
      v58 = v57;
      Count = CFDictionaryGetCount(Extensions);
      MutableCopy = CFDictionaryCreateMutableCopy(allocator, Count + 1, Extensions);
      CFDictionaryAddValue(MutableCopy, CFSTR("AudibleGroupID"), v58);
    }
    else
    {
      MutableCopy = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    a5 = v52;
    if (MutableCopy)
      v61 = CMAudioFormatDescriptionCreate(allocator, StreamBasicDescription, sizeOut.value, ChannelLayout, v155[0], MagicCookie, MutableCopy, (CMAudioFormatDescriptionRef *)&formatDescriptionOut);
    else
      v61 = 0;
    v20 = BOOLean;
    v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (values)
      CFRelease(values);
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (!v61)
    {
LABEL_63:
      v62 = (const opaqueCMFormatDescription *)formatDescriptionOut.value;
      if (formatDescriptionOut.value)
        goto LABEL_65;
    }
  }
LABEL_64:
  v62 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
LABEL_65:
  if (*(_QWORD *)(DerivedStorage + 912))
    AudioDeviceUIDFromPassthroughHelper = FPSupport_GetAudioDeviceUIDFromPassthroughHelper();
  else
    AudioDeviceUIDFromPassthroughHelper = *(_QWORD *)(DerivedStorage + 680);
  if (!itemfig_isAtmosSupported(a2))
  {
    v65 = 0;
    v66 = 1;
    goto LABEL_98;
  }
  MediaSubType = CMFormatDescriptionGetMediaSubType(v62);
  v65 = 0;
  v66 = 1;
  if (MediaSubType <= 1885692722)
  {
    if (MediaSubType > 1700997938)
    {
      if (MediaSubType != 1700997939)
      {
        if (MediaSubType != 1700998451)
        {
          v67 = 1885547315;
          goto LABEL_85;
        }
LABEL_87:
        formatDescriptionOut.value = 0;
        FormatList = CMAudioFormatDescriptionGetFormatList(v62, (size_t *)&formatDescriptionOut);
        if (FormatList && formatDescriptionOut.value > 0x2FuLL)
        {
          mFormatID = FormatList->mASBD.mFormatID;
          if (mFormatID <= 1885547314)
          {
            if (mFormatID == 1667574579)
              goto LABEL_96;
            v71 = 1700997939;
          }
          else
          {
            if (mFormatID == 1885547315 || mFormatID == 2053319475)
              goto LABEL_96;
            v71 = 1902324531;
          }
          if (mFormatID == v71)
            goto LABEL_96;
        }
        v65 = 0;
        goto LABEL_98;
      }
LABEL_96:
      FPSupport_IsDisplayModeSwitchInProgress();
      v66 = 0;
      v65 = 1;
      goto LABEL_98;
    }
    if (MediaSubType == 1667574579)
      goto LABEL_96;
    v68 = 1667575091;
LABEL_81:
    if (MediaSubType != v68)
      goto LABEL_98;
    goto LABEL_87;
  }
  if (MediaSubType > 1902469938)
  {
    if (MediaSubType == 2053464883)
      goto LABEL_87;
    if (MediaSubType == 2053319475)
      goto LABEL_96;
    v68 = 1902469939;
    goto LABEL_81;
  }
  if (MediaSubType == 1885692723)
    goto LABEL_87;
  v67 = 1902324531;
LABEL_85:
  if (MediaSubType == v67)
    goto LABEL_96;
LABEL_98:
  NextRenderPipelineIdentifierString = (__CFString *)fp_createNextRenderPipelineIdentifierString();
  if (NextRenderPipelineIdentifierString)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 176));
    v72 = *(const void **)(DerivedStorage + 168);
    allocatora = v62;
    v135 = (const void *)AudioDeviceUIDFromPassthroughHelper;
    v134 = v65;
    if (v72)
    {
      v73 = CFRetain(v72);
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 176));
      if (v73)
      {
        v133 = a5;
        v74 = (v136 & 1) == 0 && CFBooleanGetValue(BOOLean) && *(_BYTE *)(DerivedStorage + 856) == 0;
        v75 = CMBaseObjectGetDerivedStorage();
        formatDescriptionOut.value = 0;
        v76 = *v31;
        v77 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        v78 = v77;
        cf = 0;
        v79 = (const void **)MEMORY[0x1E0C9AE50];
        if (v143)
          CFDictionarySetValue(v77, CFSTR("AllowAudibleContent"), (const void *)*MEMORY[0x1E0C9AE50]);
        if (v74)
          CFDictionarySetValue(v78, CFSTR("AllowAMRDecode"), *v79);
        if ((v66 & 1) == 0)
          CFDictionarySetValue(v78, CFSTR("AllowAtmosDecode"), *v79);
        MEMORY[0x19402EEEC](*(_QWORD *)(v75 + 456));
        v80 = *(const void **)(v75 + 464);
        a5 = v133;
        if (v80)
        {
          v81 = CFRetain(v80);
          MEMORY[0x19402EF04](*(_QWORD *)(v75 + 456));
          if (v81)
            CFDictionarySetValue(v78, CFSTR("AudioSession"), v81);
        }
        else
        {
          MEMORY[0x19402EF04](*(_QWORD *)(v75 + 456));
          v81 = 0;
        }
        CFDictionarySetValue(v78, CFSTR("LoggingID"), NextRenderPipelineIdentifierString);
        FigCFDictionarySetValue();
        RenderPipelineOptions = FigBufferedAirPlayAudioRenderPipelineCreate(v76, v73, v78, &formatDescriptionOut.value);
        if (!(_DWORD)RenderPipelineOptions)
        {
          cf = (CFTypeRef)formatDescriptionOut.value;
          formatDescriptionOut.value = 0;
        }
        if (v81)
          CFRelease(v81);
        if (v78)
          CFRelease(v78);
        if (formatDescriptionOut.value)
          CFRelease((CFTypeRef)formatDescriptionOut.value);
        CFRelease(v73);
        v20 = BOOLean;
        v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      }
      else
      {
        RenderPipelineOptions = 0;
        v20 = BOOLean;
      }
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 176));
      RenderPipelineOptions = 0;
    }
    if (!cf)
    {
      v82 = *(_DWORD *)(DerivedStorage + 112);
      if ((v136 & 1) != 0)
      {
        v83 = 0;
        v84 = v143;
      }
      else
      {
        v84 = v143;
        if (CFBooleanGetValue(v20))
          v83 = *(_BYTE *)(DerivedStorage + 856) == 0;
        else
          v83 = 0;
      }
      v155[0] = 0;
      v85 = *v31;
      CMTimeMake(&formatDescriptionOut, 1, 2);
      CMTimeMake(&sizeOut, 1, 1);
      RenderPipelineOptions = FPSupport_createRenderPipelineOptions(v85, allocatora, v82, (uint64_t)&formatDescriptionOut, (uint64_t)&sizeOut, v135, v84, v83, a5, 0, 0, v134, v141, HasTrackOfType == 0, 0, 0, value, 0, NextRenderPipelineIdentifierString,
                                (__CFDictionary **)v155);
      if (!(_DWORD)RenderPipelineOptions)
      {
        RenderPipelineOptions = FigAudioQueueRenderPipelineCreate(v85, (const __CFDictionary *)v155[0], &cf);
        if (!(_DWORD)RenderPipelineOptions)
        {
          FigBaseObject = FigRenderPipelineGetFigBaseObject(cf);
          v87 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
          if (v87)
            v87(FigBaseObject, CFSTR("HandleFormatDescriptionChanges"), *MEMORY[0x1E0C9AE50]);
          RenderPipelineOptions = 0;
        }
      }
      if (v155[0])
        CFRelease((CFTypeRef)v155[0]);
      v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    }
    if (!(_DWORD)RenderPipelineOptions)
    {
      if (!*(_BYTE *)(DerivedStorage + 1107))
        goto LABEL_154;
      formatDescriptionOut.value = 0;
      Mutable = CFDictionaryCreateMutable(*v31, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetValue();
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v90 = cf;
      FigGetDefaultLowWaterDurationForSpeedRampRenderPipelines(&v145);
      RenderPipelineOptions = FigSpeedRampRenderPipelineCreate(AllocatorForMedia, v90, &v145, Mutable, (void **)&formatDescriptionOut);
      if (formatDescriptionOut.value)
      {
        v91 = *(_QWORD *)(v14 + 2072);
        v92 = FigRenderPipelineGetFigBaseObject(formatDescriptionOut.value);
        v93 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v93)
          v93(v92, CFSTR("SpeedRampData"), v91);
        v94 = cf;
        cf = (CFTypeRef)formatDescriptionOut.value;
        if (formatDescriptionOut.value)
          CFRetain((CFTypeRef)formatDescriptionOut.value);
        if (v94)
          CFRelease(v94);
        if (formatDescriptionOut.value)
          CFRelease((CFTypeRef)formatDescriptionOut.value);
      }
      if (Mutable)
        CFRelease(Mutable);
      v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      if (!(_DWORD)RenderPipelineOptions)
      {
LABEL_154:
        v95 = (_QWORD *)MEMORY[0x1E0C9AE40];
        if (cf)
        {
          if (*(_BYTE *)(DerivedStorage + 123))
          {
            v96 = FigRenderPipelineGetFigBaseObject(cf);
            v97 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
            if (v97)
              v97(v96, CFSTR("ShouldCompensateForNeroScreenLatency"), *v95);
          }
        }
        v98 = *(const __CFString **)(DerivedStorage + 8);
        v99 = FigRenderPipelineGetFigBaseObject(cf);
        v100 = *(void (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
        if (v100)
        {
          if (v98)
            v101 = v98;
          else
            v101 = CFSTR("Unknown FigPlayer");
          v100(v99, CFSTR("ClientName"), v101);
        }
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
        v102 = *(const void **)(DerivedStorage + 16);
        if (v102)
        {
          v27 = CFRetain(v102);
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
          if (v27)
          {
            v103 = FigRenderPipelineGetFigBaseObject(cf);
            v104 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
            v105 = value;
            if (v104)
              v104(v103, CFSTR("STSLabel"), v27);
LABEL_169:
            if (v105)
            {
              formatDescriptionOut.value = 0;
              v106 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
              if (v106)
              {
                v107 = *(void (**)(void *, _QWORD, CFAllocatorRef, CMTime *))(v106 + 48);
                if (v107)
                  v107(v105, *MEMORY[0x1E0D494D0], *v31, &formatDescriptionOut);
              }
              v108 = formatDescriptionOut.value;
              if (formatDescriptionOut.value)
              {
                v109 = FigRenderPipelineGetFigBaseObject(cf);
                v110 = *(void (**)(uint64_t, const __CFString *, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                if (v110)
                  v110(v109, CFSTR("AllowedToUseHardware"), v108);
                CFRelease((CFTypeRef)formatDescriptionOut.value);
              }
            }
            v111 = (_QWORD *)v149;
            if (*(_BYTE *)(v149 + 120) && *(_QWORD *)(v149 + 128))
            {
              v112 = FigRenderPipelineGetFigBaseObject(cf);
              v113 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
              if (v113)
                v113(v112, CFSTR("EnableSweepFilter"), *MEMORY[0x1E0C9AE50]);
              v114 = v111[16];
              v115 = FigRenderPipelineGetFigBaseObject(cf);
              v116 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
              if (v116)
                v116(v115, CFSTR("SweepFilterConfiguration"), v114);
              v29 = CFNumberCreate(0, kCFNumberFloat32Type, v111 + 17);
              v117 = FigRenderPipelineGetFigBaseObject(cf);
              v118 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
              if (v118)
                v118(v117, CFSTR("SweepFilterSweepValue"), v29);
            }
            else
            {
              v29 = 0;
            }
            v119 = v111[19];
            if (v119)
            {
              v120 = FigRenderPipelineGetFigBaseObject(cf);
              v121 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
              if (v121)
                v121(v120, CFSTR("CinematicAudioParameters"), v119);
            }
            v122 = *(_QWORD *)(v14 + 944);
            if (v122)
            {
              v123 = FigRenderPipelineGetFigBaseObject(cf);
              v124 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
              if (v124)
                v124(v123, CFSTR("AudioDeviceChannelMap"), v122);
            }
            v125 = *(_QWORD *)(v14 + 1488);
            if (v125)
            {
              v126 = FigRenderPipelineGetFigBaseObject(cf);
              v127 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
              if (v127)
                v127(v126, CFSTR("AudioQueueClockDevice"), v125);
            }
            v128 = FigRenderPipelineGetFigBaseObject(cf);
            v129 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
            v130 = value;
            if (v129)
              v129(v128, CFSTR("AllowsPrebuffering"), *v95);
            if (cf)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              v131 = cf;
            }
            else
            {
              v131 = 0;
            }
            RenderPipelineOptions = 0;
            *v144 = v131;
            cf = 0;
            if (value)
              goto LABEL_201;
            goto LABEL_202;
          }
        }
        else
        {
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
          v27 = 0;
        }
        v105 = value;
        goto LABEL_169;
      }
    }
    v29 = 0;
    v27 = 0;
  }
  else
  {
    v29 = 0;
    v27 = 0;
    RenderPipelineOptions = 4294954510;
  }
  v130 = value;
  if (value)
LABEL_201:
    CFRelease(v130);
LABEL_202:
  FigFormatDescriptionRelease();
  FigFormatDescriptionRelease();
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v148)
    CFRelease(v148);
  if (v29)
    CFRelease(v29);
  if (NextRenderPipelineIdentifierString)
    CFRelease(NextRenderPipelineIdentifierString);
  if (v27)
    CFRelease(v27);
  return RenderPipelineOptions;
}

void itemfig_updateVolumeOffset(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  int TrackStorage;
  uint64_t v6;
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v3 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 1200))
    {
      v4 = *(_DWORD *)(DerivedStorage + 996);
      if (v4)
      {
        v12 = 0;
        TrackStorage = itemfig_getTrackStorage(a1, v4, &v12);
        v6 = v12;
        if (!TrackStorage && v12 != 0)
        {
          if (*(_QWORD *)(v12 + 16))
          {
            v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, (const void *)(v3 + 1428));
            if (v8)
            {
              v9 = v8;
              FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v6 + 16));
              v11 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
              if (v11)
                v11(FigBaseObject, CFSTR("SoftwareVolume3"), v9);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
}

void itemfig_applyAudioProcessingUnitsToTrack(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t MutableCopy;
  __CFArray *v8;
  const __CFArray *v9;
  uint64_t FigBaseObject;
  unsigned int (*v11)(uint64_t, const __CFString *, __CFArray *);
  const void *v12;
  CFRange v13;

  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    if (*(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 1480) | *(_QWORD *)(a2 + 96))
    {
      v6 = DerivedStorage;
      MutableCopy = FigCFArrayCreateMutableCopy();
      if (MutableCopy)
      {
        v8 = (__CFArray *)MutableCopy;
        v9 = *(const __CFArray **)(a1 + 1480);
        if (v9)
        {
          v13.length = CFArrayGetCount(v9);
          v13.location = 0;
          CFArrayAppendArray(v8, v9, v13);
        }
        FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 16));
        v11 = *(unsigned int (**)(uint64_t, const __CFString *, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
        if (v11
          && !v11(FigBaseObject, CFSTR("AudioProcessingUnits"), v8)
          && *(_QWORD *)(a2 + 16) == *(_QWORD *)(v6 + 560))
        {
          v12 = *(const void **)(v6 + 608);
          *(_QWORD *)(v6 + 608) = v8;
          CFRetain(v8);
          if (v12)
            CFRelease(v12);
        }
        CFRelease(v8);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    CFRelease(v4);
  }
}

uint64_t itemfig_applyAllAudioCurvesToTrack(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = itemfig_applyTrackAudioCurvesToTrack(a2);
  if (!(_DWORD)result)
    return itemfig_applyItemAudioCurvesToTrack(a1, a2);
  return result;
}

uint64_t itemfig_applyAdjustTargetLevel(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, uint64_t);
  uint64_t v7;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v3 = result;
    v7 = 0;
    result = itemfig_getTrackStorage(a1, *(_DWORD *)(result + 996), &v7);
    if (!(_DWORD)result)
    {
      if (v7)
      {
        result = *(_QWORD *)(v7 + 16);
        if (result)
        {
          v4 = *(_QWORD *)(v3 + 1496);
          if (v4)
          {
            FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
            result = CMBaseObjectGetVTable();
            v6 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
            if (v6)
              return v6(FigBaseObject, CFSTR("AdjustTargetLevel"), v4);
          }
        }
      }
    }
  }
  return result;
}

uint64_t itemfig_applyAdjustCompressionProfile(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, uint64_t);
  uint64_t v7;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v3 = result;
    v7 = 0;
    result = itemfig_getTrackStorage(a1, *(_DWORD *)(result + 996), &v7);
    if (!(_DWORD)result)
    {
      if (v7)
      {
        result = *(_QWORD *)(v7 + 16);
        if (result)
        {
          v4 = *(_QWORD *)(v3 + 1504);
          if (v4)
          {
            FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
            result = CMBaseObjectGetVTable();
            v6 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
            if (v6)
              return v6(FigBaseObject, CFSTR("AdjustCompressionProfile"), v4);
          }
        }
      }
    }
  }
  return result;
}

void itemfig_applyTimePitchAlgorithmToTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _BYTE *v5;
  _BYTE *v6;
  const void *v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, const void *);
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v5 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    v6 = v5;
    if (!*v5)
    {
      v7 = *(const void **)(a2 + 112);
      if (!v7)
        v7 = *(const void **)(DerivedStorage + 1464);
      FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 16));
      v9 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v9)
        v9(FigBaseObject, CFSTR("TimePitchAlgorithm"), v7);
      if (*(_QWORD *)(a2 + 16) == *((_QWORD *)v6 + 70))
      {
        v10 = (const void *)*((_QWORD *)v6 + 77);
        *((_QWORD *)v6 + 77) = v7;
        if (v7)
          CFRetain(v7);
        if (v10)
          CFRelease(v10);
      }
    }
    CFRelease(v4);
  }
}

uint64_t fp_createAudioRenderPipelineOptionsForTrack(const void *a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t CommonRenderPipelineOptionsForTrack;
  __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v14;
  const AudioFormatListItem *v15;
  const __CFDictionary *v16;
  CFMutableDictionaryRef DefaultEnhanced;
  const __CFAllocator **v18;
  uint64_t FigBaseObject;
  unsigned int (*v20)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *);
  const void *v21;
  const void *v22;
  uint64_t v23;
  CMTime *v24;
  __int128 v25;
  NSObject *v26;
  unsigned int v27;
  unsigned int v28;
  const char *v29;
  Float64 Seconds;
  Float64 v31;
  BOOL v32;
  void *GradualDecoderRefresh;
  CFIndex v34;
  const __CFAllocator *v35;
  uint64_t v36;
  void (*v37)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  void (*v38)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  char v39;
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  void (*v44)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  void *SInt32;
  CFTypeRef v46;
  uint64_t v47;
  const void *v48;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *v51;
  CMTime v52;
  CMTime v53;
  os_log_type_t type;
  os_log_type_t v55[4];
  CMTime time2;
  CMTime time;
  CMTime v58;
  CMTime v59;
  CMTime v60;
  CFDictionaryRef dictionaryRepresentation;
  int32_t timescale;
  int64_t value;
  CFTypeRef v64;
  CFTypeRef v65;
  CFTypeRef v66;
  CFTypeRef v67;
  CFTypeRef cf;
  CMTime rhs;
  const char *v70;
  __int16 v71;
  Float64 v72;
  __int16 v73;
  Float64 v74;
  CMTime lhs;
  _BYTE v76[8];
  __CFDictionary *v77[2];
  void *values[3];
  void *keys[6];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v67 = 0;
  cf = 0;
  memset(keys, 0, 24);
  memset(values, 0, sizeof(values));
  v65 = 0;
  v66 = 0;
  v77[0] = 0;
  v77[1] = 0;
  v64 = 0;
  lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)&lhs, a2, 1936684398, a3, v77);
  if ((_DWORD)CommonRenderPipelineOptionsForTrack)
  {
    v23 = CommonRenderPipelineOptionsForTrack;
    v11 = 0;
LABEL_91:
    v21 = 0;
    v22 = 0;
    DefaultEnhanced = 0;
    goto LABEL_69;
  }
  v10 = v77[0];
  v11 = v77[0] != 0;
  v12 = *(_QWORD *)(DerivedStorage + 968);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 56);
  if (!v13)
  {
    v21 = 0;
    v22 = 0;
    DefaultEnhanced = 0;
    v23 = 4294954514;
    goto LABEL_69;
  }
  v14 = v13(v12, a2, &cf, 0);
  if ((_DWORD)v14 || (v14 = itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&v67), (_DWORD)v14))
  {
    v23 = v14;
    goto LABEL_91;
  }
  v51 = a4;
  v15 = (const AudioFormatListItem *)v67;
  v16 = *(const __CFDictionary **)(DerivedStorage + 920);
  if (!v16)
    v16 = *(const __CFDictionary **)(DerivedStorage + 928);
  DefaultEnhanced = FigGaplessInfoCopyAndEnhance_CorrectingWithTrackReader((const AudioFormatListItem *)v67, (uint64_t)cf, v16);
  v18 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (dword_1EE2A2AC8)
  {
    value = 0;
    timescale = 0;
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    if ((*(_BYTE *)(DerivedStorage + 152) & 1) != 0)
    {
      dictionaryRepresentation = 0;
      FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
      v20 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v20)
      {
        if (!v20(FigBaseObject, CFSTR("UneditedTrackDuration"), *v18, &dictionaryRepresentation))
        {
          memset(&v60, 0, sizeof(v60));
          CMTimeMakeFromDictionary(&v60, dictionaryRepresentation);
          if (dictionaryRepresentation)
            CFRelease(dictionaryRepresentation);
          if (value >= 1)
          {
            memset(&v59, 0, sizeof(v59));
            CMTimeMake(&v59, value, timescale);
            memset(&v58, 0, sizeof(v58));
            lhs = v60;
            rhs = v59;
            CMTimeSubtract(&time, &lhs, &rhs);
            CMTimeAbsoluteValue(&v58, &time);
            CMTimeMakeWithSeconds(&time2, 10.0, v58.timescale);
            lhs = v58;
            if (CMTimeCompare(&lhs, &time2) >= 1)
            {
              if (dword_1EE2A2AC8)
              {
                *(_DWORD *)v55 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
          }
          if ((*(_BYTE *)(DerivedStorage + 152) & 1) != 0)
          {
            memset(&v59, 0, sizeof(v59));
            lhs = v60;
            v25 = *(_OWORD *)(DerivedStorage + 140);
            v24 = (CMTime *)(DerivedStorage + 140);
            *(_OWORD *)&rhs.value = v25;
            rhs.epoch = v24->epoch;
            CMTimeSubtract(&v53, &lhs, &rhs);
            CMTimeAbsoluteValue(&v59, &v53);
            CMTimeMakeWithSeconds(&v52, 10.0, v59.timescale);
            lhs = v59;
            if (CMTimeCompare(&lhs, &v52) >= 1)
            {
              if (dword_1EE2A2AC8)
              {
                LODWORD(v58.value) = 0;
                v55[0] = OS_LOG_TYPE_DEFAULT;
                v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v27 = v58.value;
                if (os_log_type_enabled(v26, v55[0]))
                  v28 = v27;
                else
                  v28 = v27 & 0xFFFFFFFE;
                if (v28)
                {
                  if (a1)
                    v29 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                  else
                    v29 = "";
                  lhs = *v24;
                  Seconds = CMTimeGetSeconds(&lhs);
                  lhs = v60;
                  v31 = CMTimeGetSeconds(&lhs);
                  LODWORD(rhs.value) = 136316162;
                  *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fp_createAudioRenderPipelineOptionsForTrack";
                  LOWORD(rhs.flags) = 2048;
                  *(_QWORD *)((char *)&rhs.flags + 2) = a1;
                  HIWORD(rhs.epoch) = 2082;
                  v70 = v29;
                  v71 = 2048;
                  v72 = Seconds;
                  v73 = 2048;
                  v74 = v31;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
          }
        }
      }
    }
  }
  if (DefaultEnhanced)
  {
    v32 = 0;
  }
  else
  {
    DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(v15);
    v32 = DefaultEnhanced != 0;
  }
  GradualDecoderRefresh = (void *)FigGaplessInfoCreateGradualDecoderRefresh((const opaqueCMFormatDescription *)v15);
  v22 = GradualDecoderRefresh;
  if (GradualDecoderRefresh)
  {
    keys[0] = CFSTR("gdrCount");
    values[0] = GradualDecoderRefresh;
    v34 = 1;
  }
  else
  {
    v34 = 0;
  }
  v35 = *v18;
  v36 = FigTrackReaderGetFigBaseObject(cf);
  v37 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v37)
    v37(v36, CFSTR("EditsExcludePrimingAndRemainderDuration"), v35, &v66);
  v38 = (void (*)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))*MEMORY[0x1E0C9AE50];
  if (v66 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    if (DefaultEnhanced)
      v39 = v32;
    else
      v39 = 1;
    if ((v39 & 1) != 0)
    {
      if (!DefaultEnhanced)
        goto LABEL_55;
    }
    else
    {
      LODWORD(v60.value) = 0;
      LOBYTE(v59.value) = 0;
      v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v41 = v60.value;
      if (os_log_type_enabled(v40, v59.value))
        v42 = v41;
      else
        v42 = v41 & 0xFFFFFFFE;
      if (v42)
      {
        LODWORD(rhs.value) = 136315138;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fp_createAudioRenderPipelineOptionsForTrack";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRelease(DefaultEnhanced);
    DefaultEnhanced = 0;
    goto LABEL_55;
  }
  if (DefaultEnhanced)
  {
    keys[v34] = CFSTR("iTunesGaplessInfo");
    values[v34++] = DefaultEnhanced;
  }
LABEL_55:
  a4 = v51;
  v43 = FigTrackReaderGetFigBaseObject(cf);
  v44 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v44)
  {
    v44(v43, CFSTR("HasSeamSamples"), v35, &v65);
    v44 = (void (*)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))v65;
  }
  if (v44 == v38)
  {
    SInt32 = (void *)FigCFNumberCreateSInt32();
    if (SInt32)
    {
      v21 = SInt32;
      keys[v34] = CFSTR("BossTrack_BonusAudioPrimingPacketCountAtStart");
      values[v34++] = SInt32;
      goto LABEL_62;
    }
  }
  v21 = 0;
  if (v34)
  {
LABEL_62:
    v77[v11] = CFDictionaryCreate(v35, (const void **)keys, (const void **)values, v34, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v10)
    {
      v11 = 2;
      FigCFCreateCombinedDictionary();
      v23 = 0;
      goto LABEL_69;
    }
    v10 = v77[0];
    v11 = 1;
  }
  v46 = 0;
  if (v11 && v10)
    v46 = CFRetain(v10);
  v23 = 0;
  v64 = v46;
LABEL_69:
  if (cf)
    CFRelease(cf);
  if (DefaultEnhanced)
    CFRelease(DefaultEnhanced);
  if (v67)
  {
    CFRelease(v67);
    v67 = 0;
  }
  if (v22)
    CFRelease(v22);
  if (v66)
  {
    CFRelease(v66);
    v66 = 0;
  }
  if (v65)
  {
    CFRelease(v65);
    v65 = 0;
  }
  if (v21)
    CFRelease(v21);
  if (v11)
  {
    v47 = 8 * v11;
    do
    {
      v48 = *(const void **)&v76[v47];
      if (v48)
        CFRelease(v48);
      v47 -= 8;
    }
    while (v47);
  }
  *a4 = v64;
  return v23;
}

void itemfig_resetRenderTriple(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  *(_DWORD *)a1 = 0;
  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

uint64_t itemfig_reuseExistingRenderPipeline(uint64_t result, uint64_t a2)
{
  const __CFArray *v3;
  uint64_t v4;
  CFIndex v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v3 = (const __CFArray *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v4 = result;
      v5 = 0;
      while (1)
      {
        result = (uint64_t)CFArrayGetValueAtIndex(v3, v5);
        if (*(_DWORD *)result == *(_DWORD *)a2)
        {
          v6 = result;
          if (*(_DWORD *)(result + 16) == *(_DWORD *)(a2 + 16))
          {
            result = FigCFEqual();
            if ((_DWORD)result)
            {
              v7 = *(_QWORD *)(v6 + 24);
              if (v7)
                break;
            }
          }
        }
        if (v4 == ++v5)
          return result;
      }
      v8 = *(_QWORD *)(v6 + 32);
      *(_QWORD *)(a2 + 24) = v7;
      *(_QWORD *)(a2 + 32) = v8;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 32) = 0;
    }
  }
  return result;
}

uint64_t itemfig_canItemAudioTrackReusePreviousItemAudioRenderPipeline(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  char v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v15;
  CFTypeRef v16;
  CFTypeRef cf;
  _QWORD v18[31];

  v18[29] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v18[0] = 0;
  v16 = 0;
  if (!*(_QWORD *)(v3 + 560))
  {
    if (!dword_1EE2A2AC8)
      goto LABEL_37;
LABEL_11:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_36:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_37;
  }
  v4 = v3;
  if (!*(_QWORD *)(v3 + 656))
  {
    if (!dword_1EE2A2AC8)
      goto LABEL_37;
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(DerivedStorage + 968);
  v6 = *(unsigned int *)(DerivedStorage + 996);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v7
    || v7(v5, v6, &cf, 0)
    || itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&v16)
    || itemfig_getTrackStorage(a1, *(_DWORD *)(DerivedStorage + 996), v18))
  {
    goto LABEL_37;
  }
  v8 = _os_feature_enabled_impl();
  if (*(_QWORD *)(v4 + 168))
  {
    if ((_os_feature_enabled_impl() & 1) != 0)
      goto LABEL_16;
  }
  else if ((v8 & 1) != 0)
  {
    goto LABEL_16;
  }
  if (!FPSupport_RenderPipelineSupportsGaplessTransitionWithFormats(*(_QWORD *)(v4 + 560), *(CMAudioFormatDescriptionRef *)(v4 + 656), (CMAudioFormatDescriptionRef)v16))
  {
    if (dword_1EE2A2AC8)
      goto LABEL_35;
    goto LABEL_37;
  }
LABEL_16:
  v10 = *(_QWORD *)(v18[0] + 88);
  if (!v10)
    v10 = *(_QWORD *)(DerivedStorage + 1432);
  if (v10 != *(_QWORD *)(v4 + 600))
  {
    if (dword_1EE2A2AC8)
      goto LABEL_35;
    goto LABEL_37;
  }
  v11 = *(_QWORD *)(v18[0] + 112);
  if (v11)
  {
    if (v11 != *(_QWORD *)(v4 + 616))
    {
      if (dword_1EE2A2AC8)
        goto LABEL_35;
      goto LABEL_37;
    }
  }
  else if (*(_QWORD *)(DerivedStorage + 1464) != *(_QWORD *)(v4 + 616))
  {
    if (dword_1EE2A2AC8)
      goto LABEL_35;
    goto LABEL_37;
  }
  if (itemfig_shouldEnableSpatializationForTrack(a1, *(unsigned int *)(DerivedStorage + 996)) != *(_BYTE *)(v4 + 624))
  {
    if (dword_1EE2A2AC8)
    {
LABEL_35:
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      goto LABEL_36;
    }
LABEL_37:
    v13 = 0;
    goto LABEL_38;
  }
  if (FPSupport_AudioProcessingUnitsConfigurationsAreDifferent())
  {
    if (dword_1EE2A2AC8)
      goto LABEL_35;
    goto LABEL_37;
  }
  if (dword_1EE2A2AC8)
  {
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    v13 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v13 = 1;
  }
LABEL_38:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v13;
}

BOOL playerfig_UpdateAudioSessionPreferredDeviceFormat()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  uint64_t v3;
  unsigned int (*v4)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v5;
  const void *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  int isTrackAC3;
  int isTrackAtmos;
  _BOOL4 isTrackDecodable;
  int isAC3PassthroughSupported;
  int MaximumNumberOfSpatializedOutputChannels;
  int v14;
  int isMATAtmosEnabled;
  int canTrackPassthrough;
  BOOL v17;
  BOOL v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t (*v27)(CFTypeRef, uint64_t, uint64_t);
  int v28;
  uint64_t v29;
  unsigned int (*v30)(CFTypeRef, uint64_t, uint64_t);
  NSObject *v31;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v34;
  CFTypeRef cf;
  int v36[32];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 456));
  v1 = *(const void **)(DerivedStorage + 464);
  if (!v1)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 456));
    return 0;
  }
  v2 = CFRetain(v1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 456));
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v3)
  {
    v4 = *(unsigned int (**)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *))(v3 + 48);
    if (v4)
    {
      v5 = *MEMORY[0x1E0D49A40];
      if (!v4(v2, *MEMORY[0x1E0D49A40], *MEMORY[0x1E0C9AE00], &cf))
      {
        if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1 && *(_DWORD *)(DerivedStorage + 60) == 2)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
          v7 = CMBaseObjectGetDerivedStorage();
          if (!itemfig_assureBasicsReadyForInspection(ValueAtIndex))
          {
            v8 = *(unsigned int *)(v7 + 996);
            if ((_DWORD)v8)
            {
              v34 = v5;
              isTrackAC3 = itemfig_isTrackAC3((uint64_t)ValueAtIndex, v8);
              isTrackAtmos = itemfig_isTrackAtmos((uint64_t)ValueAtIndex, *(unsigned int *)(v7 + 996));
              isTrackDecodable = itemfig_isTrackDecodable((uint64_t)ValueAtIndex, *(unsigned int *)(v7 + 996));
              isAC3PassthroughSupported = itemfig_isAC3PassthroughSupported();
              v36[0] = 0;
              MaximumNumberOfSpatializedOutputChannels = itemfig_getMaximumNumberOfSpatializedOutputChannels((uint64_t)ValueAtIndex, v36);
              v14 = v36[0];
              isMATAtmosEnabled = playerfig_isMATAtmosEnabled();
              canTrackPassthrough = itemfig_canTrackPassthrough((uint64_t)ValueAtIndex, *(unsigned int *)(v7 + 996));
              v17 = !isTrackDecodable;
              if (MaximumNumberOfSpatializedOutputChannels)
                v18 = 1;
              else
                v18 = v14 < 3;
              if (v18)
                v17 = 1;
              if (!isTrackAC3)
                v17 = 0;
              if (!canTrackPassthrough)
                v17 = 0;
              v20 = !v17 || isAC3PassthroughSupported == 0;
              v19 = (uint64_t *)MEMORY[0x1E0D49058];
              if (!v20)
                v19 = (uint64_t *)MEMORY[0x1E0D49050];
              if (isMATAtmosEnabled)
                v20 = isTrackAtmos == 0;
              else
                v20 = 1;
              if (!v20 && isTrackDecodable)
                v19 = (uint64_t *)MEMORY[0x1E0D49060];
              v22 = *v19;
              if (dword_1EE2A2AC8 >= 2)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v29 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
              if (v29)
              {
                v30 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t))(v29 + 56);
                if (v30)
                {
                  if (!v30(v2, v34, v22))
                  {
                    v28 = FigCFEqual();
                    goto LABEL_44;
                  }
                }
              }
              v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
        else
        {
          v24 = *MEMORY[0x1E0D49058];
          if (!FigCFEqual())
          {
            if (dword_1EE2A2AC8 >= 2)
            {
              v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v26 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v26)
            {
              v27 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v26 + 56);
              if (v27)
              {
                v28 = v27(v2, v5, v24);
LABEL_44:
                v23 = v28 == 0;
                goto LABEL_47;
              }
            }
          }
        }
      }
    }
  }
  v23 = 0;
LABEL_47:
  CFRelease(v2);
  if (cf)
    CFRelease(cf);
  return v23;
}

uint64_t playerfig_UpdateAudioSessionPreferredDeviceSampleRate()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  const void *ValueAtIndex;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  const opaqueCMFormatDescription *v8;
  const AudioFormatListItem *RichestDecodableFormat;
  const AudioFormatListItem *FormatList;
  CFNumberRef v11;
  NSObject *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  unsigned int (*v15)(CFTypeRef, _QWORD, CFNumberRef);
  NSObject *v16;
  CFTypeRef cf;
  CMAudioFormatDescriptionRef desc;
  size_t sizeOut[17];

  sizeOut[16] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  desc = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 456));
  v1 = *(const void **)(DerivedStorage + 464);
  if (!v1)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 456));
    goto LABEL_18;
  }
  v2 = CFRetain(v1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 456));
  if (!v2)
  {
LABEL_18:
    v5 = 0;
    goto LABEL_34;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
    goto LABEL_28;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  v4 = CMBaseObjectGetDerivedStorage();
  if (itemfig_assureBasicsReadyForInspection(ValueAtIndex))
    goto LABEL_28;
  v5 = *(unsigned int *)(v4 + 996);
  if (!(_DWORD)v5)
  {
LABEL_29:
    v11 = 0;
    goto LABEL_30;
  }
  v6 = *(_QWORD *)(v4 + 968);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v7 || v7(v6, v5, &cf, 0) || itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc))
  {
LABEL_28:
    v5 = 0;
    goto LABEL_29;
  }
  v8 = desc;
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(desc);
  if (RichestDecodableFormat)
    goto LABEL_14;
  if (!itemfig_isTrackAC3((uint64_t)ValueAtIndex, *(unsigned int *)(v4 + 996)))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_28;
  }
  sizeOut[0] = 0;
  FormatList = CMAudioFormatDescriptionGetFormatList(v8, sizeOut);
  if (!FormatList || !sizeOut[0])
  {
    FigSignalErrorAt();
    goto LABEL_28;
  }
  RichestDecodableFormat = FormatList;
LABEL_14:
  v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, RichestDecodableFormat);
  if (*(_BYTE *)(DerivedStorage + 1104))
  {
    if (dword_1EE2A2AC8 < 2)
    {
LABEL_27:
      v5 = 0;
      goto LABEL_30;
    }
LABEL_26:
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_27;
  }
  if (dword_1EE2A2AC8 >= 2)
  {
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v14 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v14)
    goto LABEL_26;
  v15 = *(unsigned int (**)(CFTypeRef, _QWORD, CFNumberRef))(v14 + 56);
  if (!v15 || v15(v2, *MEMORY[0x1E0D49A70], v11))
    goto LABEL_26;
  v5 = 1;
LABEL_30:
  CFRelease(v2);
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
LABEL_34:
  if (desc)
    CFRelease(desc);
  return v5;
}

BOOL playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  CFTypeRef v4;
  const void *ValueAtIndex;
  uint64_t v6;
  uint64_t v7;
  int TrackAudioChannelCount;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BOOL8 v10;
  uint64_t v12;
  unsigned int (*v13)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v14;
  const __CFAllocator *v15;
  NSObject *v16;
  CFNumberRef v17;
  uint64_t v18;
  unsigned int (*v19)(CFTypeRef, uint64_t, CFNumberRef);
  int v20;
  uint64_t valuePtr;
  int v22;
  int v23;
  CFTypeRef cf[25];

  cf[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 456));
  v3 = *(const void **)(DerivedStorage + 464);
  if (!v3)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 456));
    goto LABEL_12;
  }
  v4 = CFRetain(v3);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 456));
  if (!v4)
  {
LABEL_12:
    v10 = 0;
    goto LABEL_13;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1
    || (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0),
        v6 = CMBaseObjectGetDerivedStorage(),
        itemfig_assureBasicsReadyForInspection(ValueAtIndex))
    || (v7 = *(unsigned int *)(v6 + 996), !(_DWORD)v7))
  {
    CFRelease(v4);
    goto LABEL_12;
  }
  TrackAudioChannelCount = itemfig_getTrackAudioChannelCount((uint64_t)ValueAtIndex, v7);
  v22 = 2;
  v23 = TrackAudioChannelCount;
  valuePtr = 0;
  if (playerfig_getDeviceMaximumNumberOfPhysicalOutputChannels(a1, &v22, (int *)&valuePtr))
    goto LABEL_28;
  if (v22 <= 2)
  {
    if (dword_1EE2A2AC8 < 2)
    {
LABEL_30:
      v10 = 0;
      v17 = 0;
      goto LABEL_31;
    }
LABEL_9:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_30;
  }
  if ((_DWORD)valuePtr == 1)
  {
    if (dword_1EE2A2AC8 < 2)
      goto LABEL_30;
    goto LABEL_9;
  }
  if (TrackAudioChannelCount > v22)
    v23 = v22;
  v12 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v12
    || (v13 = *(unsigned int (**)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *))(v12 + 48)) == 0
    || (v14 = *MEMORY[0x1E0D49AC0],
        v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        v13(v4, *MEMORY[0x1E0D49AC0], *MEMORY[0x1E0C9AE00], cf)))
  {
LABEL_28:
    v17 = 0;
LABEL_29:
    v10 = 0;
    goto LABEL_31;
  }
  if (cf[0])
    CFNumberGetValue((CFNumberRef)cf[0], kCFNumberSInt32Type, (char *)&valuePtr + 4);
  if (dword_1EE2A2AC8 >= 2)
  {
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v17 = CFNumberCreate(v15, kCFNumberSInt32Type, &v23);
  v18 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v18)
    goto LABEL_29;
  v19 = *(unsigned int (**)(CFTypeRef, uint64_t, CFNumberRef))(v18 + 56);
  if (!v19 || v19(v4, v14, v17))
    goto LABEL_29;
  v20 = v23;
  *(_DWORD *)(DerivedStorage + 928) = v23;
  v10 = HIDWORD(valuePtr) != v20;
LABEL_31:
  CFRelease(v4);
  if (v17)
    CFRelease(v17);
LABEL_13:
  if (cf[0])
    CFRelease(cf[0]);
  return v10;
}

void itemfig_InformStakeholdersOfBestAvailableAudioContentType(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  int isTrackAtmos;
  const void *v10;
  CFTypeRef v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(CFTypeRef, _QWORD, _QWORD);

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v3 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      v4 = (const void *)v3;
      v5 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(DerivedStorage + 1288))
      {
        v6 = v5;
        v7 = *(unsigned int *)(DerivedStorage + 996);
        if ((_DWORD)v7)
        {
          v8 = (int)itemfig_getTrackAudioChannelCount(a1, v7) > 2;
          isTrackAtmos = itemfig_isTrackAtmos(a1, *(unsigned int *)(DerivedStorage + 996));
        }
        else
        {
          v8 = 0;
          isTrackAtmos = 0;
        }
        MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 456));
        v10 = *(const void **)(v6 + 464);
        if (v10)
        {
          v11 = CFRetain(v10);
          MEMORY[0x19402EF04](*(_QWORD *)(v6 + 456));
          if (v11)
          {
            v12 = (_QWORD *)MEMORY[0x1E0D49F18];
            if (isTrackAtmos)
              v12 = (_QWORD *)MEMORY[0x1E0D49F10];
            if (v8)
              v13 = v12;
            else
              v13 = (_QWORD *)MEMORY[0x1E0D49F20];
            v14 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v14)
            {
              v15 = *(void (**)(CFTypeRef, _QWORD, _QWORD))(v14 + 56);
              if (v15)
                v15(v11, *MEMORY[0x1E0D49588], *v13);
            }
            CFRelease(v11);
          }
        }
        else
        {
          MEMORY[0x19402EF04](*(_QWORD *)(v6 + 456));
        }
      }
      CFRelease(v4);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

_QWORD *itemfig_renderTripleCopy(const __CFAllocator *a1, uint64_t a2)
{
  _QWORD *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;

  v3 = CFAllocatorAllocate(a1, 40, 0);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  v4 = *(CFTypeRef *)(a2 + 8);
  if (v4)
    v4 = CFRetain(v4);
  v3[1] = v4;
  *((_DWORD *)v3 + 4) = *(_DWORD *)(a2 + 16);
  v5 = *(CFTypeRef *)(a2 + 24);
  if (v5)
    v5 = CFRetain(v5);
  v3[3] = v5;
  v6 = *(CFTypeRef *)(a2 + 32);
  if (v6)
    v6 = CFRetain(v6);
  v3[4] = v6;
  return v3;
}

void itemfig_renderTripleRelease(CFAllocatorRef allocator, _QWORD *ptr)
{
  const void *v4;
  const void *v5;
  const void *v6;

  v4 = (const void *)ptr[1];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)ptr[3];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)ptr[4];
  if (v6)
    CFRelease(v6);
  CFAllocatorDeallocate(allocator, ptr);
}

__CFString *itemfig_renderTripleCopyDescription(unsigned int *a1)
{
  __CFString *Mutable;
  const void *v3;
  const void *v4;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = (const void *)FigCFCopyCompactDescription();
  v4 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("<RenderTriple: %p trackID: %d extractionID: %d renderPipeline: %@ options: %@>"), a1, *a1, a1[4], v3, v4);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  return Mutable;
}

uint64_t itemfig_renderTripleEqual(_DWORD *a1, _DWORD *a2)
{
  uint64_t result;

  if (*a1 != *a2 || a1[4] != a2[4])
    return 0;
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    result = FigCFEqual();
    if ((_DWORD)result)
      return FigCFEqual() != 0;
  }
  return result;
}

void playerfig_AudioDecoderError(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  CFTypeID v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  CFTypeID v11;
  const __CFNumber *Value;
  int valuePtr;

  if (a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)DerivedStorage)
    {
      if (*(_QWORD *)(DerivedStorage + 512))
      {
        if (!*(_QWORD *)(DerivedStorage + 568)
          || a5
          && (v8 = CFGetTypeID(a5), v8 == CFDictionaryGetTypeID())
          && (v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("OSStatus"))) != 0
          && (v10 = v9, v11 = CFGetTypeID(v9), v11 == CFNumberGetTypeID())
          && (valuePtr = 0,
              CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr),
              (valuePtr + 41999) >= 0xFFFFFC18))
        {
          Value = (const __CFNumber *)FigCFDictionaryGetValue();
          playerfig_TryFailingCurrentItemForRenderPipelineError(a2, Value);
        }
      }
    }
  }
}

void playerfig_AudioPlayResourcePreempted(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)DerivedStorage)
    {
      if (*(_QWORD *)(DerivedStorage + 512))
      {
        playerfig_pauseForInternalReason(a2, 0x1Eu);
        v6 = *MEMORY[0x1E0CA2E18];
        v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v4 = v6;
        v5 = v7;
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)&v6, (uint64_t)&v4, 0);
      }
    }
  }
}

uint64_t playerfig_latencyChanged()
{
  CMBaseObjectGetDerivedStorage();
  return FigDeferNotificationToDispatchQueue();
}

void playerfig_RenderPipelineFailedToStart(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const __CFNumber *Value;
  const __CFNumber *v10;
  CFTypeID v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  int valuePtr;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  if (a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)DerivedStorage)
    {
      v8 = DerivedStorage;
      if (*(_QWORD *)(DerivedStorage + 512))
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("OSStatus"));
        if (Value
          && (v10 = Value, v11 = CFGetTypeID(Value), v11 == CFNumberGetTypeID())
          && CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v10 = 0;
        }
        if (!playerfig_TryFailingCurrentItemForRenderPipelineError(a2, v10))
          dispatch_async_f(*(dispatch_queue_t *)(v8 + 96), a2, (dispatch_function_t)playerfig_RenderPipelineFailedToStart_setRateForInternalReason_0_f);
      }
    }
  }
}

uint64_t playerfig_renderPipelineRequiresManualRestart(uint64_t a1, const void *a2)
{
  uint64_t result;

  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    CFRetain(a2);
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

uint64_t playerfig_renderPipelineWantsRebuildToIncreaseFidelity(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  return FigDeferNotificationToDispatchQueue();
}

uint64_t playerfig_renderPipelineDeviceHasDisconnected(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  return FigDeferNotificationToDispatchQueue();
}

uint64_t playerfig_TryFailingCurrentItemForRenderPipelineError(const void *a1, const __CFNumber *a2)
{
  const __CFNumber *FailedNotificationPayloadWithContentStream;
  uint64_t DerivedStorage;
  uint64_t result;
  const void *ValueAtIndex;
  CFAllocatorRef *v7;
  CFTypeID TypeID;
  CFTypeRef *v9;
  CFTypeRef *v10;
  __CFError *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *values;
  int valuePtr[32];
  uint64_t v15;

  FailedNotificationPayloadWithContentStream = a2;
  v15 = *MEMORY[0x1E0C80C00];
  values = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigReentrantMutexTryLock();
  if (!(_DWORD)result)
    return result;
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) <= 0)
  {
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
    return 0;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  CFRetain(ValueAtIndex);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  if (!ValueAtIndex)
    return 0;
  v7 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (FailedNotificationPayloadWithContentStream)
  {
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(FailedNotificationPayloadWithContentStream))
    {
      v9 = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)v9)
      {
        FailedNotificationPayloadWithContentStream = CFDictionaryCreate(*v7, (const void **)kFigPlaybackItemParameter_Result, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      }
      else
      {
        v10 = v9;
        valuePtr[0] = 0;
        CFNumberGetValue(FailedNotificationPayloadWithContentStream, kCFNumberSInt32Type, valuePtr);
        FailedNotificationPayloadWithContentStream = itemfig_createFailedNotificationPayloadWithContentStream(v10[16], FailedNotificationPayloadWithContentStream);
        Value = (__CFError *)CFDictionaryGetValue(FailedNotificationPayloadWithContentStream, CFSTR("CFError"));
        itemfig_reportingAgentReportError((uint64_t)ValueAtIndex, Value, CFSTR("CoreMediaErrorDomain"), CFSTR("Failed to play to end due to render pipeline error"), valuePtr[0]);
      }
    }
    else
    {
      FailedNotificationPayloadWithContentStream = 0;
    }
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (a1)
    CFRetain(a1);
  CMNotificationCenterGetDefaultLocalCenter();
  dispatch_get_global_queue(0, 0);
  FigDeferNotificationToDispatchQueue();
  if (FailedNotificationPayloadWithContentStream)
    CFRelease(FailedNotificationPayloadWithContentStream);
  return 1;
}

__CFDictionary *itemfig_createFailedNotificationPayloadWithContentStream(CFTypeRef a1, __CFDictionary *a2)
{
  __CFDictionary *FailedNotificationPayload;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  FailedNotificationPayload = a2;
  cf = 0;
  if (a2)
  {
    if (a1)
    {
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v4)
      {
        v4(CMBaseObject, *MEMORY[0x1E0CA2F70], *MEMORY[0x1E0C9AE00], &cf);
        a1 = cf;
      }
      else
      {
        a1 = 0;
      }
    }
    FailedNotificationPayload = itemfig_createFailedNotificationPayload(a1, FailedNotificationPayload);
    if (cf)
      CFRelease(cf);
  }
  return FailedNotificationPayload;
}

void itemfig_reportingAgentReportError(uint64_t a1, __CFError *a2, CFErrorDomain a3, CFStringRef a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  CFStringRef v11;
  CFErrorDomain Domain;
  uint64_t v13;
  void (*v14)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD);
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD);
  uint64_t v17;
  void (*v18)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v10 = DerivedStorage;
    if (a2)
    {
      v11 = CFErrorCopyDescription(a2);
      Domain = CFErrorGetDomain(a2);
    }
    else
    {
      v11 = 0;
      Domain = 0;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 1896));
    v13 = *(_QWORD *)(v10 + 1904);
    if (Domain)
      a3 = Domain;
    if (v13)
    {
      v14 = *(void (**)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 48);
      if (v14)
        v14(v13, CFSTR("playerStats"), CFSTR("PlayerErrDomain"), a3, 0);
    }
    v15 = *(_QWORD *)(v10 + 1904);
    if (v11)
      a4 = v11;
    if (v15)
    {
      v16 = *(void (**)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 48);
      if (v16)
        v16(v15, CFSTR("playerStats"), CFSTR("PlayerErrMsg"), a4, 0);
      v17 = *(_QWORD *)(v10 + 1904);
      if (v17)
      {
        v18 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v18)
          v18(v17, CFSTR("playerStats"), CFSTR("PlayerErrCode"), a5, 0);
        v19 = *(_QWORD *)(v10 + 1904);
        if (v19)
        {
          v20 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
          if (v20)
            v20(v19, CFSTR("playerStats"), 307, 0, 0);
        }
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 1896));
    if (v11)
      CFRelease(v11);
  }
}

void itemfig_playbackFailed(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFArrayRef *v5;
  CFArrayRef *v6;
  uint64_t v7;
  CFIndex Count;
  uint64_t v9;
  CFIndex v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 8);
  if (!*(_BYTE *)DerivedStorage)
  {
    v5 = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)v5)
    {
      v6 = v5;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      v7 = *((unsigned int *)v6 + 194);
      Count = CFArrayGetCount(v6[63]);
      if (FigPlaybackGetEffectiveActionAtEnd(v7, Count))
      {
        v9 = *((unsigned int *)v6 + 194);
        v10 = CFArrayGetCount(v6[63]);
        if (FigPlaybackGetEffectiveActionAtEnd(v9, v10) == 1)
          playerfig_pauseForInternalReason(v4, 3u);
      }
      else
      {
        itemfig_removeFromPlayQueueIfAdvanceAtEnd(a2);
      }
    }
  }
  if (v4)
    CFRelease(v4);
  if (a2)
    CFRelease(a2);
}

__CFDictionary *itemfig_createFailedNotificationPayload(const void *a1, const void *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;

  if (!a2)
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, CFSTR("Result"), a2);
    if (a1)
      CFDictionarySetValue(v5, CFSTR("CFError"), a1);
  }
  return v5;
}

void itemfig_removeFromPlayQueueIfAdvanceAtEnd(const __CFString *a1)
{
  _BYTE *DerivedStorage;
  const void *v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  BOOL v6;
  BOOL v7[2];
  int v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v4 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8)
  {
    v8 = 0;
    v7[1] = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3)
    v6 = *DerivedStorage == 0;
  else
    v6 = 0;
  if (v6)
  {
    v7[0] = 0;
    MEMORY[0x19402EA0C](*(_QWORD *)(v4 + 496));
    if (DerivedStorage[1] && !*(_DWORD *)(v4 + 776))
      playerfig_gracefullyRemoveItemFromPlayQueue(v3, a1, 0, 0, 1, v7);
    MEMORY[0x19402EA24](*(_QWORD *)(v4 + 496));
    if (v7[0])
    {
      v11 = *MEMORY[0x1E0CA2E18];
      v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v9 = v11;
      v10 = v12;
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v3, (uint64_t)&v11, (uint64_t)&v9, 0);
      playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(v3, CFSTR("ReasonAdvanceDueToError"));
    }
    playerfig_updatePlaybackStateAndBossRate(v3, 7, 0);
    goto LABEL_14;
  }
  if (v3)
LABEL_14:
    CFRelease(v3);
}

uint64_t playerfig_pauseForInternalReason(const void *a1, unsigned int a2)
{
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  CFDictionaryRef v6;
  CFTypeRef cf;
  float valuePtr;

  valuePtr = 0.0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  if (cf)
  {
    v5 = CFDictionaryCreate(v4, (const void **)&kFigPlayerParameter_Remote_NewRate, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v5)
    {
      v6 = v5;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v6);
    }
    CFRelease(cf);
  }
  return playerfig_setRateForReason(a1, a2, valuePtr);
}

void playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *ValueAtIndex;
  CFTypeRef v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  __CFDictionary *NotificationPayloadForProperties;
  __CFDictionary *v16;
  char __dst[16];
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1
    && (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0)) != 0)
  {
    v6 = CFRetain(ValueAtIndex);
  }
  else
  {
    v6 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a1)
      v13 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    else
      v13 = "";
    strncpy(__dst, v13, 8uLL);
    if (v6)
      v14 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    else
      v14 = "";
    strncpy(__dst, v14, 8uLL);
    kdebug_trace();
  }
  NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(a1, (uint64_t)v6, v7, v8, v9, v10, v11, v12, CFSTR("VideoSlotArray"), (uint64_t)CFSTR("VideoTrackMatrix"));
  v16 = NotificationPayloadForProperties;
  if (NotificationPayloadForProperties)
  {
    if (a2)
      CFDictionarySetValue(NotificationPayloadForProperties, CFSTR("ReasonForCurrentItemDidChange"), a2);
    if (v6)
    {
      *(_OWORD *)__dst = *MEMORY[0x1E0CA2E18];
      v18 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      itemfig_getDurationIfReady((uint64_t)v6, (uint64_t)__dst);
      if ((__dst[12] & 0x1D) == 1)
        FigCFDictionarySetCMTime();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (v16)
    CFRelease(v16);
  if (v6)
    CFRelease(v6);
}

uint64_t playerfig_updatePlaybackStateAndBossRate(const void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t DerivedStorage;
  float v7;
  unsigned int PlaythroughPrediction;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  NSObject *v11;
  float v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0;
  v13 = 0;
  v12 = 0.0;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (!*(_BYTE *)(DerivedStorage + 57))
    a3 |= 2u;
  v7 = 0.0;
  if (*(_DWORD *)(DerivedStorage + 52) == 4)
    v7 = *(float *)(DerivedStorage + 48);
  PlaythroughPrediction = itemfig_getPlaythroughPrediction(*(_QWORD *)(DerivedStorage + 512));
  if (playerfig_getNextPlaybackState((uint64_t)a1, *(float *)(DerivedStorage + 48), a2, *(_DWORD *)(DerivedStorage + 52), 0, *(_QWORD *)(DerivedStorage + 512) != 0, *(unsigned __int8 *)(DerivedStorage + 56), a3, PlaythroughPrediction, &v14, (_BYTE *)(DerivedStorage + 56), &v13, &v12))return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  if (playerfig_enterPlaybackState((uint64_t)a1, v14))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  if (v13)
  {
    result = playerfig_setBossRateWithFade(a1, a2, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v12, v7);
    if ((_DWORD)result)
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void itemfig_postSeekWasCanceledNotification(uint64_t a1, uint64_t a2, int a3, int a4)
{
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *values;
  int valuePtr;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  valuePtr = a3;
  values = 0;
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage()
    && (v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr)) != 0)
    && (v6 = CFDictionaryCreate(v5, (const void **)kFigPlaybackItemParameter_SeekID, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
  {
    v7 = v6;
    CMNotificationCenterGetDefaultLocalCenter();
    if (a4)
      FigDispatchAsyncPostNotification();
    else
      CMNotificationCenterPostNotification();
    if (dword_1EE2A2AC8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
  }
  if (values)
    CFRelease(values);
}

uint64_t playerfig_updateStartHostTimeEstimatesOfItemAtIndexAndFollowingItems(uint64_t a1, CFIndex a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  CFIndex Count;
  const void *v6;
  const void *ValueAtIndex;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFArray **)(DerivedStorage + 504);
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  if (Count <= a2)
    return 0;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), a2);
    if (a2 >= 1)
      v6 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), a2 - 1);
    result = itemfig_updateStartHostTimeEstimate(ValueAtIndex, v6);
    if ((_DWORD)result)
      break;
    if (Count == ++a2)
      return 0;
  }
  return result;
}

void itemfig_vendAccessLogWhenItemStopsBeingCurrent(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const __CFArray *v5;
  const __CFString *v6;
  double Current;
  double v8;
  CFIndex Length;
  const __CFAllocator *v10;
  __CFArray *Mutable;
  CFIndex v12;
  unint64_t v13;
  unint64_t v14;
  CFIndex v15;
  CFStringRef v16;
  CFStringRef v17;
  CFStringRef v18;
  BOOL v19;
  const __CFArray *v20;
  CFIndex v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v23;
  __CFArray *theArray;
  CFTypeRef cf[23];
  CFRange v26;

  cf[21] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1996) = 7;
  itemfig_reportingAgentReportRateChanged(a1, 0.0);
  if (*(_BYTE *)(DerivedStorage + 1697))
  {
    v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      v4 = v3;
      itemfig_commitAccessLogEntry(v3, a1);
      if (*(_BYTE *)(DerivedStorage + 1241))
      {
        v5 = *(const __CFArray **)(DerivedStorage + 1512);
        if (v5)
        {
          if (CFArrayGetCount(v5) >= 1)
          {
            cf[0] = 0;
            if (!FigPlaybackItemLogCreateW3CLogData(*(const __CFArray **)(DerivedStorage + 1512), (__CFString **)cf))
            {
              v6 = (const __CFString *)cf[0];
              Current = CFAbsoluteTimeGetCurrent();
              if (v6)
              {
                v8 = Current;
                v23 = v4;
                Length = CFStringGetLength(v6);
                v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
                theArray = Mutable;
                if (Length > 799)
                {
                  v12 = 0;
                  v13 = (Length + 799) / 0x320uLL;
                  v14 = 1;
                  do
                  {
                    if ((unint64_t)Length >= 0x320)
                      v15 = 800;
                    else
                      v15 = Length;
                    v26.location = v12;
                    v26.length = v15;
                    v16 = CFStringCreateWithSubstring(v10, v6, v26);
                    if (v16)
                    {
                      v17 = v16;
                      v18 = CFStringCreateWithFormat(v10, 0, CFSTR("[%.3f: %d/%d] %@"), *(_QWORD *)&v8, v14, v13, v16);
                      CFRelease(v17);
                      if (v18)
                      {
                        CFArrayAppendValue(theArray, v18);
                        CFRelease(v18);
                      }
                    }
                    if (v14 >= v13)
                      break;
                    v12 += v15;
                    ++v14;
                    v19 = Length <= v15;
                    Length -= v15;
                  }
                  while (!v19);
                }
                else
                {
                  CFArrayAppendValue(Mutable, v6);
                }
                v4 = v23;
                if (theArray)
                {
                  v20 = (const __CFArray *)CFRetain(theArray);
                  CFRelease(theArray);
                  if (v20)
                  {
                    if (CFArrayGetCount(v20) >= 1)
                    {
                      v21 = 0;
                      do
                      {
                        CFArrayGetValueAtIndex(v20, v21);
                        if (dword_1EE2A2AC8)
                        {
                          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                        }
                        ++v21;
                      }
                      while (v21 < CFArrayGetCount(v20));
                    }
                    CFRelease(v20);
                  }
                }
              }
              CFRelease(cf[0]);
            }
          }
        }
      }
      CFRelease(v4);
    }
  }
}

void itemfig_removeAllImageQueues(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  const __CFArray *v6;
  const void *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    v5 = *(_QWORD *)(DerivedStorage + 1104);
    if (*(uint64_t *)(CMBaseObjectGetDerivedStorage() + 216) < 1)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1120));
      v6 = *(const __CFArray **)(DerivedStorage + 1112);
      if (v6)
        *(_QWORD *)(DerivedStorage + 1112) = 0;
      v7 = *(const void **)(DerivedStorage + 1104);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(DerivedStorage + 1104) = 0;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1120));
      if (v6)
      {
        FPSupport_DeleteCASlotsInArray(v6);
        CFRelease(v6);
      }
    }
    else
    {
      itemfig_stashTransitionImageQueuesAndSlots();
    }
    v8 = *(const __CFArray **)(DerivedStorage + 648);
    if (v8)
    {
      Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        v10 = Count;
        for (i = 0; i != v10; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
          itemfig_clearTrackImageQueueTable(a1, (uint64_t)ValueAtIndex);
        }
      }
    }
    itemfig_handleReadyToDisplayVideoLatch(a1, 1, 0);
    if (v5)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    CFRelease(v4);
  }
}

void playerfig_freeTransitionImageQueueAndSlot()
{
  _QWORD *DerivedStorage;
  const __CFArray *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](DerivedStorage[62]);
  v1 = (const __CFArray *)DerivedStorage[104];
  if (v1)
  {
    FPSupport_DeleteCASlotsInArray(v1);
    v2 = (const void *)DerivedStorage[104];
    if (v2)
    {
      CFRelease(v2);
      DerivedStorage[104] = 0;
    }
  }
  v3 = (const void *)DerivedStorage[103];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[103] = 0;
  }
  JUMPOUT(0x19402EA24);
}

uint64_t playerfig_clearVideoLayers(const __CFArray *a1, char a2, CFTypeRef a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v6 = (void *)MEMORY[0x19403137C]();
  if (!a1 || CFArrayGetCount(a1) < 1)
    goto LABEL_7;
  if (a3)
  {
LABEL_6:
    FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(a3, a1, a2, (uint64_t)"playerfig_clearVideoLayers");
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v7 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
  if (!(_DWORD)v7)
  {
    a3 = cf;
    goto LABEL_6;
  }
  v8 = v7;
LABEL_8:
  objc_autoreleasePoolPop(v6);
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf)
    CFRelease(cf);
  return v8;
}

void playeritemfig_releaseVideoCompositionObjects(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  CFIndex i;
  const void *ValueAtIndex;
  void (*v8)(const void *, _QWORD, _QWORD);
  const void *v9;
  const void *v10;
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const __CFArray **)(DerivedStorage + 816);
  if (v3)
    Count = CFArrayGetCount(v3);
  else
    Count = 0;
  v5 = *(_QWORD *)(DerivedStorage + 352);
  if (v5)
    FigPlaybackBossSetVideoCompositionProcessor(v5, 0);
  itemfig_removeImageQueueListenersForObsoleteImageQueues(a1, *(const __CFArray **)(DerivedStorage + 816), 0);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 816), i);
      v8 = *(void (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v8)
        v8(ValueAtIndex, 0, 0);
    }
  }
  if (*(_QWORD *)(DerivedStorage + 808))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigVideoCompositionProcessorInvalidate(*(_QWORD *)(DerivedStorage + 808));
    v9 = *(const void **)(DerivedStorage + 808);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 808) = 0;
    }
  }
  v10 = *(const void **)(DerivedStorage + 816);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 816) = 0;
  }
  FigImageQueueTableRemoveAllValues(*(_QWORD *)(DerivedStorage + 824));
  v11 = *(const void **)(DerivedStorage + 824);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 824) = 0;
  }
}

void itemfig_ExternalProtectionStatusChangedGuts(uint64_t a1)
{
  _BYTE *DerivedStorage;
  const void *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const void *v10;
  BOOL v11;
  __CFDictionary *NotificationPayloadForProperties;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v10 = v3;
  if (*DerivedStorage)
    v11 = 1;
  else
    v11 = v3 == 0;
  if (!v11)
  {
    NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v3, a1, v4, v5, v6, v7, v8, v9, CFSTR("ExternalProtectionStatus"), 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (NotificationPayloadForProperties)
      CFRelease(NotificationPayloadForProperties);
    goto LABEL_7;
  }
  if (v3)
LABEL_7:
    CFRelease(v10);
}

void itemfig_clearCoordinatedPlaybackSynchronizationTimebase()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 344))
  {
    v1 = DerivedStorage;
    v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (dword_1EE2A2AC8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v2)
      CFRelease(v2);
    v4 = *(const void **)(v1 + 344);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v1 + 344) = 0;
    }
  }
}

void itemfig_releaseAIMEDataAndAllAIMEDataChannelResources()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFDictionaryGetCount())
  {
    v1 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    if (v1)
    {
      v2 = v1;
      if (CFArrayGetCount(v1) >= 1)
      {
        v3 = 0;
        do
        {
          CFArrayGetValueAtIndex(v2, v3);
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
          ++v3;
        }
        while (v3 < CFArrayGetCount(v2));
      }
      CFRelease(v2);
    }
  }
  FigCFDictionaryRemoveAllValues();
  v4 = *(const void **)(DerivedStorage + 1080);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 1080) = 0;
  }
}

__CFString *fp_copyPlayQueueDescription()
{
  uint64_t DerivedStorage;
  const __CFAllocator *v1;
  __CFString *Mutable;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const void *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  const void *v11;
  const char *v12;
  const char *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  if (Count >= 1)
  {
    v4 = Count;
    v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v5);
      v7 = CMBaseObjectGetDerivedStorage();
      v8 = v7;
      if (*(_QWORD *)(v7 + 488))
      {
        v9 = (void *)CFStringCreateWithFormat(v1, 0, CFSTR(", gapless transition %@"), *(_QWORD *)(v7 + 488));
      }
      else
      {
        if (ValueAtIndex == *(const void **)(DerivedStorage + 512) || !*(_BYTE *)(v7 + 480))
          v10 = &stru_1E2FD85F8;
        else
          v10 = CFSTR(", no gapless transition");
        v9 = (void *)CFRetain(v10);
      }
      v11 = v9;
      if (ValueAtIndex)
        v12 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      else
        v12 = "";
      ++v5;
      v13 = " ";
      if (v5 >= v4)
        v13 = "";
      CFStringAppendFormat(Mutable, 0, CFSTR("item %p %s (boss %p%@)%s"), ValueAtIndex, v12, *(_QWORD *)(v8 + 352), v11, v13);
      if (v11)
        CFRelease(v11);
    }
    while (v4 != v5);
  }
  return Mutable;
}

void itemfig_unregisterPlayabilityMonitor()
{
  CMBaseObjectGetDerivedStorage();
  itemfig_unregisterPlayabilityMonitorNotification();
}

void itemfig_storeItemPerformanceDataIfGathering(const void *a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  _BOOL4 IsPlayerPerformanceTraceEnabled;
  _BOOL4 v5;
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  int v8;
  void *v9;
  void *value;

  CMBaseObjectGetDerivedStorage();
  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  IsPlayerPerformanceTraceEnabled = FPSupport_IsPlayerPerformanceTraceEnabled();
  if (v2)
  {
    if (!*(_BYTE *)DerivedStorage)
    {
      v5 = IsPlayerPerformanceTraceEnabled;
      if (!(*(unsigned __int8 *)(DerivedStorage + 812) | IsPlayerPerformanceTraceEnabled))
      {
LABEL_15:
        CFRelease(v2);
        return;
      }
      if (!*(_BYTE *)(DerivedStorage + 812)
        || *(_QWORD *)(DerivedStorage + 816)
        || (v6 = CFGetAllocator(v2),
            Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]),
            (*(_QWORD *)(DerivedStorage + 816) = Mutable) != 0))
      {
        v8 = itemfig_gatherItemPerformanceData(a1, 1, &value);
        v9 = value;
        if (!v8 && value)
        {
          if (*(_BYTE *)(DerivedStorage + 812))
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 816), value);
            v9 = value;
          }
          if (v5)
          {
            FPSupport_TracePlayerPerformanceDictionary((uint64_t)"File", v9);
            v9 = value;
          }
        }
        if (v9)
          CFRelease(v9);
        goto LABEL_15;
      }
    }
    FigSignalErrorAt();
    goto LABEL_15;
  }
  FigSignalErrorAt();
}

void itemfig_ExternalProtectionStatusChanged(uint64_t a1, const void *a2)
{
  const void *v3;

  CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (a2)
      CFRetain(a2);
    FigDeferNotificationToDispatchQueue();
    CFRelease(v3);
  }
}

uint64_t itemfig_updateStartHostTimeEstimate(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  CMTimeValue v9;
  CMTimeScale v10;
  const __CFArray *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  __int128 v17;
  CMTimeEpoch v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex Count;
  float v22;
  CMTimeFlags v23;
  CMTimeFlags v24;
  _OWORD *v25;
  int32_t v26;
  CMTimeFlags flags;
  CMTimeFlags v28;
  _OWORD *v29;
  int32_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  void (*v37)(const void *, CMTime *);
  uint64_t v38;
  float Rate;
  CMTimeEpoch v40;
  OpaqueCMClock *HostTimeClock;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  CMTimeEpoch v46;
  __int128 v47;
  CFTypeRef cf;
  CMTimeEpoch epoch;
  __int128 v50;
  CMTime v51;
  CMTime time;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CMTime rhs;
  CMTime lhs;
  CMTime v58;
  CMTime time2;
  CMTime time1;
  CMTimeValue v61;
  CMTimeScale v62;
  CMTimeValue v63;
  CMTimeScale v64;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v6 = CMBaseObjectGetDerivedStorage();
  if (v5)
  {
    v7 = v6;
    v8 = (__int128 *)MEMORY[0x1E0CA2E18];
    v9 = *MEMORY[0x1E0CA2E18];
    v63 = *MEMORY[0x1E0CA2E18];
    v10 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
    v64 = v10;
    v11 = *(const __CFArray **)(v6 + 504);
    if (v11 && CFArrayGetCount(v11) >= 1 && CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 504), 0) == a1)
    {
      if (*(_DWORD *)(v7 + 52) || *(_BYTE *)(v7 + 59))
      {
        v63 = v9;
        v64 = v10;
        v15 = *((_DWORD *)v8 + 3);
        v16 = *((_QWORD *)v8 + 2);
        goto LABEL_53;
      }
    }
    else if (*(_BYTE *)(DerivedStorage + 1))
    {
      if (!a2)
      {
        v44 = FigSignalErrorAt();
LABEL_60:
        CFRelease(v5);
        return v44;
      }
      v12 = CMBaseObjectGetDerivedStorage();
      v13 = FigCFWeakReferenceHolderCopyReferencedObject();
      v14 = CMBaseObjectGetDerivedStorage();
      v61 = *MEMORY[0x1E0CA2E30];
      v15 = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 12);
      v62 = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 8);
      v16 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
      v17 = *v8;
      *(_OWORD *)&v55.value = *v8;
      v18 = *((_QWORD *)v8 + 2);
      v55.epoch = v18;
      if (!v13)
        goto LABEL_48;
      v19 = v14;
      v46 = v18;
      v47 = v17;
      cf = (CFTypeRef)v13;
      v20 = *(unsigned int *)(v14 + 776);
      Count = CFArrayGetCount(*(CFArrayRef *)(v14 + 504));
      if (FigPlaybackGetEffectiveActionAtEnd(v20, Count) || (v22 = *(float *)(v19 + 48), v22 == 0.0))
      {
LABEL_47:
        CFRelease(cf);
LABEL_48:
        v63 = v61;
        v64 = v62;
        goto LABEL_53;
      }
      value = *(_QWORD *)(v12 + 188);
      v23 = *(_DWORD *)(v12 + 200);
      timescale = *(_DWORD *)(v12 + 196);
      epoch = *(_QWORD *)(v12 + 204);
      if (v22 <= 0.0)
      {
        if (v22 < 0.0)
        {
          v28 = *(_DWORD *)(v12 + 176);
          if ((v28 & 0x1D) == 1)
          {
            v29 = (_OWORD *)(v12 + 164);
            if ((v23 & 0x1D) != 1)
              goto LABEL_25;
            *(_OWORD *)&time1.value = *v29;
            time1.epoch = *(_QWORD *)(v12 + 180);
            time2.value = *(_QWORD *)(v12 + 188);
            time2.timescale = *(_DWORD *)(v12 + 196);
            time2.flags = v23;
            time2.epoch = epoch;
            v30 = CMTimeCompare(&time1, &time2);
            v28 = *(_DWORD *)(v12 + 176);
            if (v30 >= 1)
            {
LABEL_25:
              value = *(_QWORD *)v29;
              timescale = *(_DWORD *)(v12 + 172);
              epoch = *(_QWORD *)(v12 + 180);
              v23 = v28;
            }
          }
          if ((v28 & 0x1D) != 1)
          {
            v31 = MEMORY[0x1E0CA2E68];
            if ((v23 & 0x1D) != 1
              || (time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
                  time2.value = value,
                  time2.timescale = timescale,
                  time2.flags = v23,
                  time2.epoch = epoch,
                  CMTimeCompare(&time1, &time2) >= 1))
            {
              value = *(_QWORD *)v31;
              v23 = *(_DWORD *)(v31 + 12);
              timescale = *(_DWORD *)(v31 + 8);
              epoch = *(_QWORD *)(v31 + 16);
            }
          }
        }
        goto LABEL_30;
      }
      itemfig_getDurationIfReady((uint64_t)a2, (uint64_t)&v55);
      v24 = *(_DWORD *)(v12 + 152);
      if ((v24 & 0x1D) == 1)
      {
        v25 = (_OWORD *)(v12 + 140);
        if ((v23 & 0x1D) != 1)
          goto LABEL_14;
        *(_OWORD *)&time1.value = *v25;
        time1.epoch = *(_QWORD *)(v12 + 156);
        time2.value = value;
        time2.timescale = timescale;
        time2.flags = v23;
        time2.epoch = epoch;
        v26 = CMTimeCompare(&time1, &time2);
        v24 = *(_DWORD *)(v12 + 152);
        if (v26 < 0)
        {
LABEL_14:
          value = *(_QWORD *)v25;
          timescale = *(_DWORD *)(v12 + 148);
          epoch = *(_QWORD *)(v12 + 156);
          v23 = v24;
        }
      }
      if ((v24 & 0x1D) != 1)
      {
        flags = v55.flags;
        if ((v55.flags & 0x1D) == 1)
        {
          if ((v23 & 0x1D) == 1)
          {
            time1 = v55;
            time2.value = value;
            time2.timescale = timescale;
            time2.flags = v23;
            time2.epoch = epoch;
            if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
              goto LABEL_30;
            flags = v55.flags;
          }
          value = v55.value;
          timescale = v55.timescale;
          epoch = v55.epoch;
          v23 = flags;
        }
      }
LABEL_30:
      if ((v23 & 0x1D) == 1)
      {
        v32 = CMBaseObjectGetDerivedStorage();
        v33 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        v34 = CMBaseObjectGetDerivedStorage();
        *(_OWORD *)&v54.value = *MEMORY[0x1E0CA2E30];
        v54.epoch = v16;
        if (v33)
        {
          v35 = v34;
          time1 = *(CMTime *)(v32 + 212);
          *(_OWORD *)&time2.value = v47;
          time2.epoch = v46;
          *(_OWORD *)&v58.value = v47;
          v58.epoch = v46;
          v36 = *(float *)(v34 + 48);
          if (v36 != 0.0 && *(_DWORD *)(v34 + 52) == 4)
          {
            v37 = *(void (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            if (v37)
              v37(a2, &time2);
            lhs.value = value;
            lhs.timescale = timescale;
            lhs.flags = v23;
            lhs.epoch = epoch;
            rhs = time2;
            CMTimeSubtract(&v58, &lhs, &rhs);
            v38 = *(_QWORD *)(v32 + 352);
            if (v38)
            {
              Rate = FigPlaybackBossGetRate(v38);
              if (Rate != 0.0)
                v36 = Rate;
            }
            rhs = v58;
            CMTimeMultiplyByFloat64(&lhs, &rhs, 1.0 / v36);
            v58 = lhs;
            v50 = *MEMORY[0x1E0CA2E68];
            *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E68];
            v40 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
            rhs.epoch = v40;
            if (CMTimeCompare(&lhs, &rhs) < 0)
            {
              *(_OWORD *)&v58.value = v50;
              v58.epoch = v40;
            }
            if (CFArrayGetCount(*(CFArrayRef *)(v35 + 504)) >= 1
              && CFArrayGetValueAtIndex(*(CFArrayRef *)(v35 + 504), 0) == a2)
            {
              HostTimeClock = CMClockGetHostTimeClock();
              CMClockGetTime(&time1, HostTimeClock);
            }
            lhs = time1;
            rhs = v58;
            CMTimeAdd(&v54, &lhs, &rhs);
          }
          CFRelease(v33);
        }
        v61 = v54.value;
        v15 = v54.flags;
        v62 = v54.timescale;
        v16 = v54.epoch;
      }
      goto LABEL_47;
    }
    v63 = *MEMORY[0x1E0CA2E30];
    v15 = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 12);
    v64 = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 8);
    v16 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
LABEL_53:
    time1.value = v63;
    time1.timescale = v64;
    time1.flags = v15;
    time1.epoch = v16;
    time2 = *(CMTime *)(DerivedStorage + 212);
    if (CMTimeCompare(&time1, &time2))
    {
      v42 = (_OWORD *)(DerivedStorage + 212);
      if ((v15 & 0x1D) != 1)
        goto LABEL_57;
      if ((*(_DWORD *)(DerivedStorage + 224) & 0x1D) != 1)
        goto LABEL_57;
      time1.value = v63;
      time1.timescale = v64;
      time1.flags = v15;
      time1.epoch = v16;
      *(_OWORD *)&time2.value = *v42;
      time2.epoch = *(_QWORD *)(DerivedStorage + 228);
      CMTimeSubtract(&time, &time1, &time2);
      CMTimeAbsoluteValue(&v53, &time);
      CMTimeMake(&v51, 1, 2);
      if ((CMTimeCompare(&v53, &v51) & 0x80000000) == 0)
      {
LABEL_57:
        *(_QWORD *)v42 = v63;
        *(_DWORD *)(DerivedStorage + 220) = v64;
        *(_DWORD *)(DerivedStorage + 224) = v15;
        *(_QWORD *)(DerivedStorage + 228) = v16;
        v43 = *(_QWORD *)(DerivedStorage + 632);
        if (v43)
        {
          time1.value = v63;
          time1.timescale = v64;
          time1.flags = v15;
          time1.epoch = v16;
          FigNetworkUrgencyMonitorSetEstimatedStartTime(v43, (uint64_t)&time1);
        }
      }
    }
    v44 = 0;
    goto LABEL_60;
  }
  return FigSignalErrorAt();
}

void itemfig_unregisterPlayabilityMonitorNotification()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 616));
  if (*(_QWORD *)(DerivedStorage + 600))
  {
    if (*(_BYTE *)(DerivedStorage + 608))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(DerivedStorage + 608) = 0;
    }
  }
  JUMPOUT(0x19402EA24);
}

uint64_t itemfig_UnlikelyToKeepUp(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 1400));
  *(_DWORD *)(DerivedStorage + 1424) = 1;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 1400));
  CFRetain(a2);
  return FigDeferNotificationToDispatchQueue();
}

uint64_t itemfig_BufferFull(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 1400));
  *(_DWORD *)(DerivedStorage + 1408) = 1;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 1400));
  CFRetain(a2);
  return FigDeferNotificationToDispatchQueue();
}

uint64_t itemfig_StallWarning(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 1400));
  *(_DWORD *)(DerivedStorage + 1408) = 0;
  *(_DWORD *)(DerivedStorage + 1424) = 1;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 1400));
  CFRetain(a2);
  return FigDeferNotificationToDispatchQueue();
}

void itemfig_DeferredUnlikelyToKeepUp(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  const void *v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  uint64_t updated;
  uint64_t v13;

  v8 = *(const void **)(CMBaseObjectGetDerivedStorage() + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1896));
  v10 = *(_QWORD *)(DerivedStorage + 1904);
  if (v10)
  {
    v11 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
    if (v11)
      v11(v10, CFSTR("playerStats"), 304, 0, 0);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1896));
  updated = playerfig_updatePlaybackStateAndBossRate(v8, 6, 0);
  itemfig_DeferredPostNotificationOnDispatchQueue(updated, a2, a3, v13, a5);
}

void itemfig_DeferredBufferFull(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t updated;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  updated = playerfig_updatePlaybackStateAndBossRate(*(const void **)(DerivedStorage + 8), 5, 2u);
  itemfig_DeferredPostNotificationOnDispatchQueue(updated, a2, a3, v10, a5);
}

void itemfig_DeferredStallWarning(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  uint64_t v12;
  _QWORD *v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeID v16;
  int IsMemberOfClass;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFDictionary *v21;
  int v22;
  os_log_type_t type;
  CFTypeRef v24;
  void *value;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    CFRelease(a2);
  }
  else
  {
    v4 = DerivedStorage;
    v5 = *(const void **)(DerivedStorage + 8);
    CMBaseObjectGetDerivedStorage();
    if (dword_1EE2A2AC8)
    {
      LODWORD(v24) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v7 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 1896));
    v8 = *(_QWORD *)(v7 + 1904);
    if (v8)
    {
      v9 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 32);
      if (v9)
        v9(v8, CFSTR("playerStats"), CFSTR("StallCount"), 1);
      v10 = *(_QWORD *)(v7 + 1904);
      if (v10)
      {
        v11 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
        if (v11)
          v11(v10, CFSTR("playerStats"), 303, 0, 0);
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v7 + 1896));
    v12 = CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    v24 = 0;
    value = CFSTR("unknown");
    v13 = (_QWORD *)MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(v12 + 128))
    {
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v15 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v15)
      {
        v15(CMBaseObject, *MEMORY[0x1E0CA2F80], *v13, cf);
        if (cf[0])
        {
          v16 = CFGetTypeID(cf[0]);
          if (v16 == CFDictionaryGetTypeID())
            CFDictionaryGetValueIfPresent((CFDictionaryRef)cf[0], CFSTR("cs-iftype"), (const void **)&value);
        }
      }
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      IsMemberOfClass = CMBaseObjectIsMemberOfClass();
    }
    else
    {
      IsMemberOfClass = 0;
    }
    v18 = *(_QWORD *)(v12 + 1216);
    if (v18
      && (v19 = FigAssetGetCMBaseObject(v18),
          (v20 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48)) != 0))
    {
      v20(v19, CFSTR("assetProperty_CreationOptionsDictionary"), *v13, &v24);
      v21 = (const __CFDictionary *)v24;
    }
    else
    {
      v21 = 0;
    }
    if (IsMemberOfClass)
      v22 = 2;
    else
      v22 = 1;
    FPSupport_ReportStallToSymptomLog(v22, value, v21);
    if (v24)
      CFRelease(v24);
    if (cf[0])
      CFRelease(cf[0]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 57))
      playerfig_updatePlaybackStateAndBossRate(v5, 4, 1u);
    else
      playerfig_pauseForInternalReason(v5, 4u);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    ++*(_QWORD *)(v4 + 1608);
    CFRelease(a2);
  }
}

void itemfig_DeferredPlayableRangeChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  __CFDictionary *NotificationPayloadForProperties;
  __CFDictionary *v15;
  const void *v16;
  const __CFString *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(*(const void **)(DerivedStorage + 8), (uint64_t)a2, v8, v9, v10, v11, v12, v13, CFSTR("PlayableTimeIntervals"), 0);
  v15 = NotificationPayloadForProperties;
  if (a5 && NotificationPayloadForProperties)
  {
    v16 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v16 == CFDictionaryGetValue(a5, CFSTR("FPM_IsFilling")))
      v17 = CFSTR("Filling");
    else
      v17 = CFSTR("Full");
    CFDictionarySetValue(v15, CFSTR("CurrentBufferState"), v17);
    CMNotificationCenterPostNotification();
    goto LABEL_8;
  }
  CMNotificationCenterPostNotification();
  if (v15)
LABEL_8:
    CFRelease(v15);
  CFRelease(a2);
}

uint64_t itemfig_gatherItemPerformanceData(const void *a1, int a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef *v9;
  const void *v10;
  const __CFAllocator *v11;
  uint64_t v12;
  uint64_t v14;
  CFTypeRef *v15;
  const void *v16;
  CFAllocatorRef v17;
  uint64_t v18;
  CFAllocatorRef *v19;
  CFIndex Count;
  CFIndex v21;
  CFIndex v22;
  BOOL v23;
  char v24;
  int *ValueAtIndex;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  CFAllocatorRef v30;
  uint64_t FigBaseObject;
  void (*v32)(uint64_t, const __CFString *, CFAllocatorRef, int *);
  uint64_t v33;
  const void *v34;
  CFAllocatorRef v35;
  uint64_t v36;
  void (*v37)(uint64_t, const __CFString *, CFAllocatorRef, int *);
  const __CFAllocator *v38;
  __CFDictionary *MutableCopy;
  const void *ConcatenationOfTwoArrays;
  const void *v41;
  int v42;
  const __CFAllocator *v43;
  uint64_t v44;
  double *v45;
  const __CFAllocator *v46;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v48;
  const __CFAllocator *v49;
  void *v50;
  const __CFAllocator *v51;
  void *v52;
  const __CFArray *v53;
  CFMutableDictionaryRef v54;
  uint64_t v55;
  uint64_t i;
  uint64_t v57;
  CFIndex v58;
  CFIndex v59;
  CFIndex j;
  _QWORD *v61;
  const void *v62;
  const void **v63;
  const void *v64;
  uint64_t v65;
  _QWORD *v66;
  char v67;
  __CFArray *theArray;
  __int128 v69;
  CFTypeRef cf;
  __int128 v71;
  void *value;
  uint64_t v73;
  _OWORD v74[2];
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v75 = 0;
  memset(v74, 0, sizeof(v74));
  v73 = 0;
  if (!a3)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  *a3 = 0;
  v8 = *(_QWORD *)(DerivedStorage + 352);
  v66 = a3;
  if (!v8)
    goto LABEL_9;
  v9 = (CFTypeRef *)(DerivedStorage + 1704);
  v10 = *(const void **)(DerivedStorage + 1704);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(v7 + 1704) = 0;
    v8 = *(_QWORD *)(v7 + 352);
  }
  v11 = CFGetAllocator(a1);
  FigPlaybackBossCopyPerformanceDictionary(v8, v11, (CFMutableDictionaryRef *)(v7 + 1704));
  if (*v9)
  {
    *(_QWORD *)&v74[0] = CFRetain(*v9);
    v12 = 1;
  }
  else
  {
LABEL_9:
    v12 = 0;
  }
  v14 = *(_QWORD *)(v7 + 808);
  if (v14)
  {
    v15 = (CFTypeRef *)(v7 + 1712);
    v16 = *(const void **)(v7 + 1712);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(v7 + 1712) = 0;
      v14 = *(_QWORD *)(v7 + 808);
    }
    v17 = CFGetAllocator(a1);
    FigVideoCompositionProcessorCopyProperty(v14, CFSTR("VideoCompositionProcessor_PerformanceDictionary"), (uint64_t)v17, (CFTypeRef *)(v7 + 1712));
    if (*v15)
      *(_QWORD *)((unint64_t)v74 | (8 * v12++)) = CFRetain(*v15);
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 640));
  v18 = *(_QWORD *)(v7 + 648);
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 640));
  v19 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v18)
  {
    theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    Count = CFArrayGetCount(*(CFArrayRef *)(v7 + 648));
    if (Count >= 1)
    {
      v21 = Count;
      v22 = 0;
      if (a2)
        v23 = 1;
      else
        v23 = theArray == 0;
      v24 = v23;
      v67 = v24;
      do
      {
        ValueAtIndex = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 648), v22);
        v26 = ValueAtIndex;
        v27 = *(_QWORD *)(v7 + 352);
        if (v27)
        {
          if (!*((_QWORD *)ValueAtIndex + 35))
          {
            if (*((_BYTE *)ValueAtIndex + 8))
            {
              v42 = *ValueAtIndex;
              v43 = CFGetAllocator(a1);
              FigPlaybackBossCopyTrackPerformanceDictionary(v27, v42, v43);
              if ((v67 & 1) == 0)
                CFArrayAppendValue(theArray, v26);
            }
          }
        }
        v28 = *((_QWORD *)v26 + 2);
        if (v28)
        {
          v29 = (const void *)*((_QWORD *)v26 + 36);
          if (v29)
          {
            CFRelease(v29);
            *((_QWORD *)v26 + 36) = 0;
            v28 = *((_QWORD *)v26 + 2);
          }
          v30 = CFGetAllocator(a1);
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v28);
          v32 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
          if (v32)
            v32(FigBaseObject, CFSTR("PerformanceDictionary"), v30, v26 + 72);
        }
        v33 = *((_QWORD *)v26 + 31);
        if (v33)
        {
          *(_QWORD *)&v71 = 0;
          value = 0;
          v34 = (const void *)*((_QWORD *)v26 + 34);
          if (v34)
          {
            CFRelease(v34);
            *((_QWORD *)v26 + 34) = 0;
            v33 = *((_QWORD *)v26 + 31);
          }
          v35 = CFGetAllocator(a1);
          v36 = FigRenderPipelineGetFigBaseObject(v33);
          v37 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
          if (v37)
            v37(v36, CFSTR("PerformanceDictionary"), v35, v26 + 68);
          if (*((_QWORD *)v26 + 36))
          {
            v38 = CFGetAllocator(a1);
            MutableCopy = CFDictionaryCreateMutableCopy(v38, 0, *((CFDictionaryRef *)v26 + 36));
            if (FigCFDictionaryGetValueIfPresent() && FigCFDictionaryGetValueIfPresent())
            {
              ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
              CFDictionarySetValue(MutableCopy, CFSTR("ImageQueuePerformanceArray"), ConcatenationOfTwoArrays);
              v41 = (const void *)*((_QWORD *)v26 + 36);
              *((_QWORD *)v26 + 36) = MutableCopy;
              if (MutableCopy)
                CFRetain(MutableCopy);
              if (v41)
                CFRelease(v41);
              if (ConcatenationOfTwoArrays)
                CFRelease(ConcatenationOfTwoArrays);
            }
            if (MutableCopy)
              CFRelease(MutableCopy);
          }
        }
        ++v22;
      }
      while (v21 != v22);
    }
    v44 = CMBaseObjectGetDerivedStorage();
    value = 0;
    v45 = (double *)MEMORY[0x1E0C9D820];
    v69 = *MEMORY[0x1E0C9D820];
    v71 = *MEMORY[0x1E0C9D820];
    v46 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v46, 20, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v57 = FigSignalErrorAt();
      v53 = theArray;
      if (!theArray)
        goto LABEL_86;
      goto LABEL_80;
    }
    v48 = Mutable;
    v49 = CFGetAllocator(a1);
    if (!playerfig_copyTrackPerformanceArray((uint64_t)a1, v49, 1986618469, (CFArrayRef *)&value))
    {
      v50 = value;
      if (value)
      {
        CFDictionarySetValue(v48, CFSTR("VideoTracks"), value);
        CFRelease(v50);
        value = 0;
      }
    }
    v51 = CFGetAllocator(a1);
    if (!playerfig_copyTrackPerformanceArray((uint64_t)a1, v51, 1936684398, (CFArrayRef *)&value))
    {
      v52 = value;
      if (value)
      {
        CFDictionarySetValue(v48, CFSTR("AudioTracks"), value);
        CFRelease(v52);
      }
    }
    if (*(_BYTE *)(v44 + 123) || *(_BYTE *)(v44 + 122))
    {
      v71 = *(_OWORD *)(v44 + 128);
    }
    else
    {
      v65 = *(_QWORD *)(v44 + 592);
      if (v65)
      {
        cf = 0;
        FigImageQueueTableCopyFigImageQueueArray(v65, (uint64_t *)&cf);
        if (FPSupport_GetMaxDisplaySizeFromImageQueues((const __CFArray *)cf, (double *)&v71))
          v71 = v69;
        if (cf)
          CFRelease(cf);
      }
    }
    if (*(double *)&v71 != *v45 || *((double *)&v71 + 1) != v45[1])
      FigCFDictionarySetCGSize();
    *((_QWORD *)v74 + v12++) = v48;
    v53 = theArray;
    v19 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  }
  else
  {
    v53 = 0;
  }
  if (v12 > 0 || *(int *)(v7 + 1720) > 0 || *(_BYTE *)(v7 + 1724))
  {
    v54 = CFDictionaryCreateMutable(*v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetBoolean();
    *((_QWORD *)v74 + v12++) = v54;
  }
  if (v12 <= 0)
    goto LABEL_78;
  v55 = 0;
  for (i = 0; i != v12; v55 += CFDictionaryGetCount(*((CFDictionaryRef *)v74 + i++)))
    ;
  if (v55 < 1)
  {
LABEL_78:
    v57 = 0;
  }
  else
  {
    CFGetAllocator(a1);
    v57 = FigCFCreateCombinedDictionary();
    if (!(_DWORD)v57)
    {
      *v66 = v73;
      v73 = 0;
      if (!v53)
        goto LABEL_86;
LABEL_80:
      v58 = CFArrayGetCount(v53);
      if (v58 >= 1)
      {
        v59 = v58;
        for (j = 0; j != v59; ++j)
        {
          v61 = CFArrayGetValueAtIndex(v53, j);
          v62 = (const void *)v61[35];
          if (v62)
          {
            CFRelease(v62);
            v61[35] = 0;
          }
        }
      }
      CFArrayRemoveAllValues(v53);
      CFRelease(v53);
      goto LABEL_86;
    }
  }
  if (v53)
    goto LABEL_80;
LABEL_86:
  if (v12 >= 1)
  {
    v63 = (const void **)v74;
    do
    {
      v64 = *v63++;
      CFRelease(v64);
      --v12;
    }
    while (v12);
  }
  return v57;
}

uint64_t playerfig_copyTrackPerformanceArray(uint64_t a1, const __CFAllocator *a2, int a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  size_t v12;
  const void **v13;
  const void **v14;
  CFIndex v15;
  int v16;
  _DWORD *ValueAtIndex;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFArrayRef v21;
  uint64_t v22;
  const void *v23;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a4 = 0;
  v8 = *(const __CFArray **)(DerivedStorage + 648);
  if (!v8)
    return FigSignalErrorAt();
  Count = CFArrayGetCount(v8);
  if (Count < 1)
  {
    v14 = (const void **)malloc_type_calloc(0, 8uLL, 0x6004044C4A2DFuLL);
    if (v14)
      goto LABEL_32;
    return FigSignalErrorAt();
  }
  v10 = Count;
  v11 = 0;
  LODWORD(v12) = 0;
  do
  {
    if (*((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v11) + 1) == a3)
      v12 = (v12 + 1);
    else
      v12 = v12;
    ++v11;
  }
  while (v10 != v11);
  v13 = (const void **)malloc_type_calloc(v12, 8uLL, 0x6004044C4A2DFuLL);
  if (!v13)
    return FigSignalErrorAt();
  v14 = v13;
  v15 = 0;
  v16 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v15);
    if (ValueAtIndex[1] != a3)
      goto LABEL_23;
    memset(v25, 0, sizeof(v25));
    if (*((_QWORD *)ValueAtIndex + 35))
    {
      *(_QWORD *)&v25[0] = *((_QWORD *)ValueAtIndex + 35);
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
    v19 = *((_QWORD *)ValueAtIndex + 36);
    if (v19)
      *(_QWORD *)((unint64_t)v25 | (8 * v18++)) = v19;
    v20 = *((_QWORD *)ValueAtIndex + 34);
    if (v20)
    {
      *((_QWORD *)v25 + v18) = v20;
    }
    else if (!v18)
    {
      goto LABEL_23;
    }
    if (FigCFCreateCombinedDictionary())
    {
      FigSignalErrorAt();
    }
    else if (v16 < (int)v12)
    {
      v14[v16++] = 0;
    }
LABEL_23:
    ++v15;
  }
  while (v10 != v15);
  if (v16 >= 1)
  {
    v21 = CFArrayCreate(a2, v14, v16, MEMORY[0x1E0C9B378]);
    v22 = 0;
    *a4 = v21;
    do
    {
      v23 = v14[v22];
      if (v23)
        CFRelease(v23);
      ++v22;
    }
    while (v16 != v22);
  }
LABEL_32:
  free(v14);
  return 0;
}

uint64_t itemfig_removeBossListeners()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListeners();
}

void itemfig_cancelPreroll()
{
  uint64_t DerivedStorage;
  int v1;
  uint64_t v2;
  const void *v3;
  BOOL v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 504));
  v1 = *(_DWORD *)(DerivedStorage + 540);
  *(_DWORD *)(DerivedStorage + 540) = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 504));
  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  v3 = (const void *)v2;
  if (v2)
    v4 = v1 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if (!v2)
      return;
  }
  else
  {
    playerfig_postDeferredPrerollWasCancelledNotification(v2, v1);
  }
  CFRelease(v3);
}

void itemfig_BossRateChangeFailed()
{
  uint64_t v0;
  void *v1;
  dispatch_queue_t *DerivedStorage;
  dispatch_queue_t *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v0 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v0)
    {
      v1 = (void *)v0;
      DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)DerivedStorage)
      {
        CFRelease(v1);
      }
      else
      {
        v3 = DerivedStorage;
        if (dword_1EE2A2AC8 >= 2)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        dispatch_async_f(v3[12], v1, (dispatch_function_t)playerfig_BossRateChangeFailed_setRateForInternalReason_0_f);
      }
    }
  }
}

void itemfig_BossSeekDidComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  _BYTE *DerivedStorage;
  CFTypeID v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    if (a5)
    {
      if (DerivedStorage[544])
      {
        v7 = CFGetTypeID(a5);
        if (v7 == CFDictionaryGetTypeID() && (!FigCFDictionaryGetInt32IfPresent() || dword_1EE2A2AC8))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
}

void itemfig_ReachedOverlappedStartTime(uint64_t a1, const void *a2)
{
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  const void *v6;
  dispatch_queue_t *v7;
  dispatch_queue_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  CFTypeRef v11;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    v5 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      v6 = (const void *)v5;
      v7 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)v7)
      {
        v8 = v7;
        v9 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
        if (v9)
        {
          v10 = v9;
          *v9 = CFRetain(v6);
          if (a2)
            v11 = CFRetain(a2);
          else
            v11 = 0;
          v10[1] = v11;
          dispatch_async_f(v8[12], v10, (dispatch_function_t)itemfig_DeferReachedOverlappedStartTime_f);
        }
      }
      CFRelease(v6);
    }
  }
}

void itemfig_BossDisturbPlayback()
{
  uint64_t v0;
  const void *v1;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v0 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v0)
    {
      v1 = (const void *)v0;
      if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
      {
        v4 = *MEMORY[0x1E0CA2E18];
        v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v2 = v4;
        v3 = v5;
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v1, (uint64_t)&v4, (uint64_t)&v2, 0);
      }
      CFRelease(v1);
    }
  }
}

void itemfig_ReachedEnd_ReachedEndGuts_f(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = *a1;
    v3 = a1[1];
    v4 = a1[2];
    itemfig_ReachedEndGuts(v3);
    if (v4)
      CFRelease(v4);
    if (v3)
      CFRelease(v3);
    if (v2)
      CFRelease(v2);
  }
  free(a1);
}

uint64_t itemfig_UpdateLastPlayedOutOrLastPlayedDateIfNecessary(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const __CFAllocator *v4;
  CFAbsoluteTime Current;
  CFDateRef v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  void (*v10)(uint64_t, CMTime *);
  BOOL v11;
  int IsMediaplaybackd;
  const void *v13;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef cf;
  CMTime time;
  CMTime time2;
  CMTime v20;
  CMTime v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v16 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 2088));
  if (FigFileDoesFileExist() == 1
    && !*(_BYTE *)(DerivedStorage + 2120)
    && (v3 = *(const void **)(DerivedStorage + 2080)) != 0
    && (FigAssetDownloadStorageManagementCopyDownloadStartDateForAssetAtURL(*(const void **)(DerivedStorage + 112), v3, &v16), v16))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Current = CFAbsoluteTimeGetCurrent();
    v6 = CFDateCreate(v4, Current);
    if (v6)
    {
      v7 = 0;
      v8 = *(const void **)(DerivedStorage + 112);
      v9 = *(const void **)(DerivedStorage + 2080);
      cf = 0;
      if (v8 && v9)
      {
        v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v20 = v21;
        if (itemfig_GetDuration(a1, (uint64_t)&v21) || (v21.flags & 1) == 0)
          goto LABEL_41;
        v10 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v10)
          v10(a1, &v20);
        time = v21;
        CMTimeMultiplyByFloat64(&time2, &time, 0.95);
        time = v20;
        if (CMTimeCompare(&time, &time2) < 0)
        {
LABEL_41:
          if (FigAssetDownloadStorageManagementCopyLastPlayedOutDateForAssetAtURL(v8, v9, &cf))
            v11 = 1;
          else
            v11 = cf == 0;
          v7 = !v11;
          if (cf)
            CFRelease(cf);
        }
        else
        {
          v7 = 1;
        }
      }
      IsMediaplaybackd = FigServer_IsMediaplaybackd();
      v13 = *(const void **)(DerivedStorage + 112);
      if (IsMediaplaybackd)
      {
        if (!FPSupport_CreatePayloadForLastPlayedDateNotification(v13, v6, v7, (__CFDictionary **)&v15))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if ((_DWORD)v7)
LABEL_29:
            *(_BYTE *)(DerivedStorage + 2120) = 1;
        }
      }
      else
      {
        if (FigAssetDownloadStorageManagementSetLastPlayedDateForAssetAtURL((const __CFURL *)v13, *(const void **)(DerivedStorage + 2080), (uint64_t)v6, v7))LODWORD(v7) = 0;
        if ((_DWORD)v7)
          goto LABEL_29;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    v6 = 0;
  }
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
  if (v6)
    CFRelease(v6);
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 2088));
}

void itemfig_advanceToNextItem(uint64_t a1, const void *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t DerivedStorage;
  uint64_t *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *ValueAtIndex;
  uint64_t v10;
  double Rate;
  double v12;
  float v13;
  const __CFArray *v14;
  CFIndex Count;
  int v16;
  const __CFArray *v17;
  CFIndex v18;
  const __CFString *v19;
  uint64_t v20;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFString *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  const void *v39;
  uint64_t v40;
  CMTime v41;
  CMTime v42[5];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = (const void *)v4;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = &sFigCDSNodeProtocolID;
    if (dword_1EE2A2AC8)
    {
      LODWORD(v40) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (playerfig_doingGapless())
    {
      if (a1)
        *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1996) = 7;
      itemfig_reportingAgentReportRateChanged(a1, 0.0);
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 2)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 1);
        v10 = CMBaseObjectGetDerivedStorage();
        Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v10 + 328));
        if (Rate != 0.0)
        {
          v12 = Rate;
          if (ValueAtIndex)
            *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1996) = 7;
          v13 = v12;
          itemfig_reportingAgentReportRateChanged((uint64_t)ValueAtIndex, v13);
        }
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 224));
      v14 = *(const __CFArray **)(DerivedStorage + 208);
      if (v14)
        Count = CFArrayGetCount(v14);
      else
        Count = 0;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 224));
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 240));
      v17 = *(const __CFArray **)(DerivedStorage + 248);
      if (v17)
        v18 = CFArrayGetCount(v17);
      else
        v18 = 0;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 240));
      v39 = a2;
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 2)
      {
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v19 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 1);
        v20 = CMBaseObjectGetDerivedStorage();
      }
      v22 = Count > 0 || v18 > 0;
      if (v22
        && v19
        && *(_QWORD *)(DerivedStorage + 512) != a1
        && itemfig_hasEnqueuedFirstVideoFrame((uint64_t)v19))
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
        v23 = CMBaseObjectGetDerivedStorage();
        if (Count < 1)
        {
          v26 = v19;
          v16 = 0;
          a2 = v39;
        }
        else
        {
          v24 = v23;
          MEMORY[0x19402EEEC](*(_QWORD *)(v23 + 848));
          v25 = *(_QWORD *)(v24 + 856);
          a2 = v39;
          if (v25)
            FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v25, 0, v39);
          MEMORY[0x19402EF04](*(_QWORD *)(v24 + 848));
          v26 = v19;
          itemfig_handleReadyToDisplayVideoLatch((uint64_t)v19, 3, v39);
          v16 = 1;
        }
        v7 = &sFigCDSNodeProtocolID;
        if (v18 >= 1 && !*(_BYTE *)(v20 + 876))
          playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v5, v26, MEMORY[0x1E0CA2E18]);
        if (*(_BYTE *)(v20 + 625))
        {
          *(_BYTE *)(v20 + 625) = 0;
          if (dword_1EE2A2AC8 >= 2)
          {
            LODWORD(v40) = 0;
            v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v7 = &sFigCDSNodeProtocolID;
          }
          itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v26, 0);
          v42[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          v41 = v42[0];
          itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v26, v42, &v41);
        }
      }
      else
      {
        if (dword_1EE2A2AC8)
        {
          LODWORD(v40) = 0;
          v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v16 = 0;
          v7 = &sFigCDSNodeProtocolID;
        }
        else
        {
          v16 = 0;
        }
        a2 = v39;
      }
    }
    else
    {
      v16 = 0;
    }
    v28 = *(_QWORD *)(DerivedStorage + 512);
    if (v28 == a1)
    {
      v30 = 0;
      *(_QWORD *)(DerivedStorage + 520) = 0;
    }
    else
    {
      v29 = CMBaseObjectGetDerivedStorage();
      if (v29)
        v30 = *(_BYTE *)(v29 + 1289) != 0;
      else
        v30 = 0;
    }
    playerfig_gracefullyRemoveItemFromPlayQueue(v5, a1, 0, 0, 0, 0);
    playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(v5, CFSTR("ReasonAdvanceAtEnd"));
    itemfig_removeAllImageQueues(a1);
    if (!*(_QWORD *)(DerivedStorage + 512))
      playerfig_freeTransitionImageQueueAndSlot();
    if (v28 == a1 || v30)
      playerfig_prepareWorkingItem(v5, 0, a2);
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
    {
      playeritemfig_releaseRenderPipelines(v5, 0, a2);
    }
    else
    {
      v32 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      v33 = CMBaseObjectGetDerivedStorage();
      v34 = v33;
      if (*(_BYTE *)(v33 + 625))
      {
        *(_BYTE *)(v33 + 625) = 0;
        if (*((_DWORD *)v7 + 690) >= 2u)
        {
          LODWORD(v40) = 0;
          v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v7 = &sFigCDSNodeProtocolID;
        }
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v32, 0);
        v42[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v41 = v42[0];
        itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v32, v42, &v41);
      }
      if (!v16)
        itemfig_handleReadyToDisplayVideoLatch((uint64_t)v32, 3, a2);
      playerfig_scheduleVideoSlotAndVideoTargetConfigurationSwitchAndPossiblyStartBossForNextItem(v5);
      if (*(_QWORD *)(DerivedStorage + 560) && *(_BYTE *)(v34 + 1826))
      {
        v40 = 0;
        itemfig_getTrackStorage((uint64_t)v32, *(_DWORD *)(v34 + 996), &v40);
        v36 = v40;
        if (v40 && *(_QWORD *)(v40 + 16))
        {
          if (*((_DWORD *)v7 + 690) >= 2u)
          {
            v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          itemfig_updateVolumeOffset((uint64_t)v32);
          itemfig_applyAudioProcessingUnitsToTrack(v34, v36);
          if (!itemfig_applyTrackAudioCurvesToTrack(v36))
            itemfig_applyItemAudioCurvesToTrack(v34, v36);
          itemfig_applyAdjustTargetLevel((uint64_t)v32);
          itemfig_applyAdjustCompressionProfile((uint64_t)v32);
        }
        *(_BYTE *)(v34 + 1826) = 0;
      }
    }
    CFRelease(v5);
  }
}

void itemfig_reportingAgentReportRateChanged(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v19;
  uint64_t v20;
  const __CFArray *v21;
  CFIndex Count;
  CFIndex v23;
  CFIndex v24;
  int v25;
  int v26;
  _DWORD *ValueAtIndex;
  int v28;
  uint64_t v29;
  void (*v30)(uint64_t, __CFString *, __CFString *, BOOL, _QWORD);
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD, _QWORD);

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v5 = CMBaseObjectGetDerivedStorage();
    if (v4)
    {
      if (*(float *)(DerivedStorage + 2000) != a2)
      {
        v6 = v5;
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1896));
        v7 = *(_QWORD *)(DerivedStorage + 1904);
        if (v7)
        {
          v8 = *(int *)(DerivedStorage + 1996);
          v9 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 56);
          if (v9)
            v9(v7, CFSTR("playerStats"), CFSTR("RtReason"), v8, 0);
          v10 = *(_QWORD *)(DerivedStorage + 1904);
          if (v10)
          {
            v11 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v11)
              v11(v10, CFSTR("playerStats"), CFSTR("Rate"), (uint64_t)(float)(a2 * 100.0), 0);
            v12 = *(_QWORD *)(DerivedStorage + 1904);
            if (v12)
            {
              v13 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v13)
                v13(v12, CFSTR("playerStats"), CFSTR("ReqRate"), (uint64_t)(float)(a2 * 100.0), 0);
              v14 = *(_QWORD *)(DerivedStorage + 1904);
              if (v14)
              {
                v15 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                if (v15)
                  v15(v14, CFSTR("playerStats"), 306, 0, 0, 0);
              }
            }
          }
          *(float *)(DerivedStorage + 2000) = a2;
          if (!*(_BYTE *)(DerivedStorage + 1992) && a2 != 0.0 && *(_DWORD *)(v6 + 52) == 4)
          {
            if (*(_BYTE *)(DerivedStorage + 1993))
              v16 = (uint64_t)((CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 1944)) * 1000.0);
            else
              v16 = 0;
            v17 = *(_QWORD *)(DerivedStorage + 1904);
            if (v17)
            {
              v18 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v18)
                v18(v17, CFSTR("playerStats"), CFSTR("TimeLTKPToStart"), v16, 0);
            }
            *(_BYTE *)(DerivedStorage + 1992) = 1;
          }
          if (a2 == 0.0)
          {
            v19 = CMBaseObjectGetDerivedStorage();
            if (v19)
            {
              v20 = v19;
              if (*(_QWORD *)(v19 + 1904))
              {
                v21 = *(const __CFArray **)(v19 + 648);
                if (v21 && (Count = CFArrayGetCount(v21), Count >= 1))
                {
                  v23 = Count;
                  v24 = 0;
                  v25 = 0;
                  v26 = 0;
                  do
                  {
                    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v20 + 648), v24);
                    if (*((_BYTE *)ValueAtIndex + 8))
                    {
                      v28 = ValueAtIndex[1];
                      if (v28 == 1936684398)
                        ++v26;
                      if (v28 == 1986618469)
                        ++v25;
                    }
                    ++v24;
                  }
                  while (v23 != v24);
                }
                else
                {
                  v26 = 0;
                  v25 = 0;
                }
                if (v26 > 0 || v25 >= 1)
                {
                  v29 = *(_QWORD *)(v20 + 1904);
                  if (v29)
                  {
                    v30 = *(void (**)(uint64_t, __CFString *, __CFString *, BOOL, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                    if (v30)
                      v30(v29, CFSTR("playerStats"), CFSTR("AuOn"), v25 == 0, 0);
                  }
                }
              }
            }
            v31 = *(_QWORD *)(DerivedStorage + 1904);
            if (v31)
            {
              v32 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 16);
              if (v32)
                v32(v31, CFSTR("playerStats"), 901, 0, 0, 0);
            }
          }
        }
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1896));
      }
      CFRelease(v4);
    }
  }
}

const __CFArray *itemfig_hasEnqueuedFirstVideoFrame(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const __CFArray *result;
  CFIndex Count;
  CFIndex v8;
  uint64_t i;
  uint64_t v10;
  const __CFArray *v11;
  CFIndex j;
  const __CFArray *v13;
  const void *ValueAtIndex;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return 0;
  v3 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 808))
  {
    v4 = *(_QWORD *)(DerivedStorage + 824);
    if (!v4)
      goto LABEL_11;
LABEL_10:
    result = (const __CFArray *)FigImageQueueTableWasFirstImageEnqueued(v4);
    if ((_DWORD)result)
      return result;
    goto LABEL_11;
  }
  v15 = 0;
  v5 = *(_DWORD *)(DerivedStorage + 1000);
  if (v5)
  {
    if (itemfig_getTrackStorage(a1, v5, &v15))
      return 0;
    v4 = *(_QWORD *)(v15 + 48);
    if (v4)
      goto LABEL_10;
  }
LABEL_11:
  result = *(const __CFArray **)(v3 + 1048);
  if (!result)
    return result;
  Count = CFArrayGetCount(result);
  if (Count >= 1)
  {
    v8 = Count;
    for (i = 0; i != v8; ++i)
    {
      v15 = 0;
      FigCFArrayGetInt32AtIndex();
      itemfig_getTrackStorage(a1, 0, &v15);
      v10 = v15;
      if (v15)
      {
        v11 = *(const __CFArray **)(v15 + 224);
        if (v11)
        {
          if (CFArrayGetCount(v11) >= 1)
          {
            for (j = 0; ; ++j)
            {
              v13 = *(const __CFArray **)(v10 + 224);
              if (v13)
                v13 = (const __CFArray *)CFArrayGetCount(v13);
              if (j >= (uint64_t)v13)
                break;
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 224), j);
              result = (const __CFArray *)FigImageQueueTableWasFirstImageEnqueued((uint64_t)ValueAtIndex);
              if ((_DWORD)result)
                return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t itemfig_handleReadyToDisplayVideoLatch(uint64_t a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v8;
  uint64_t *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int VideoFrame;
  _BYTE *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  _QWORD *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const __CFArray *v25;
  CFTypeRef v26;
  uint64_t v27;
  const __CFArray *v28;
  const __CFArray *v29;
  const __CFArray *v30;
  const __CFArray *v31;
  uint64_t v32;
  const __CFArray *v33;
  const void *v35;
  NSObject *v36;
  unsigned int v37;
  unsigned int v38;
  const char *v39;
  uint64_t v40;
  const void *v41;
  CFTypeRef cf;
  _BYTE v43[24];
  const char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = CMBaseObjectGetDerivedStorage();
  if (v7)
  {
    v40 = v8;
    v41 = a3;
    v9 = &sFigCDSNodeProtocolID;
    if (dword_1EE2A2AC8 >= 2)
    {
      LODWORD(cf) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v9 = &sFigCDSNodeProtocolID;
    }
    VideoFrame = itemfig_hasEnqueuedFirstVideoFrame(a1);
    v12 = (_BYTE *)(DerivedStorage + 873);
    v13 = FPSupport_ItemReadyToDisplayVideoLatch(a2, VideoFrame, (_BYTE *)(DerivedStorage + 872), (_BYTE *)(DerivedStorage + 873));
    v14 = v13;
    if (*(_BYTE *)(DerivedStorage + 872))
      v15 = *(_BYTE *)(DerivedStorage + 2018) != 0;
    else
      v15 = 1;
    if (a2 == 1)
    {
      *(_BYTE *)(DerivedStorage + 874) = 0;
    }
    else if (a2 == 3)
    {
      if (dword_1EE2A2AC8 >= 3)
      {
        LODWORD(cf) = 0;
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v9 = &sFigCDSNodeProtocolID;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (!v14)
        goto LABEL_24;
      goto LABEL_13;
    }
    if (!v13)
    {
LABEL_24:
      if (!v15)
        playerfig_freeTransitionImageQueueAndSlot();
      goto LABEL_53;
    }
LABEL_13:
    if (*(_BYTE *)(DerivedStorage + 872))
    {
      if (!*v12)
      {
        if (*((_DWORD *)v9 + 690) >= 2u)
        {
          v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v20 = (_QWORD *)CMBaseObjectGetDerivedStorage();
        v21 = v7;
        v22 = CMBaseObjectGetDerivedStorage();
        cf = 0;
        v24 = (void *)MEMORY[0x19403137C](v22, v23);
        MEMORY[0x19402EEEC](*(_QWORD *)(v22 + 224));
        v25 = *(const __CFArray **)(v22 + 208);
        if ((!v25 || CFArrayGetCount(v25) <= 0) && !v20[108])
        {
          v32 = 0;
LABEL_40:
          MEMORY[0x19402EF04](*(_QWORD *)(v22 + 224));
          objc_autoreleasePoolPop(v24);
          FigDeferredTransactionCommit((uint64_t)cf);
          if (cf)
            CFRelease(cf);
          v7 = v21;
          if ((_DWORD)v32)
            goto LABEL_54;
          *v12 = 1;
          if (!VideoFrame)
            goto LABEL_53;
          goto LABEL_52;
        }
        v45 = *MEMORY[0x1E0CA2E68];
        v46 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        v26 = v41;
        if (!v41)
        {
          v27 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
          if ((_DWORD)v27)
          {
LABEL_38:
            v32 = v27;
            goto LABEL_40;
          }
          v26 = cf;
        }
        itemfig_GetDuration(a1, (uint64_t)&v45);
        MEMORY[0x19402EEEC](v20[140]);
        v28 = (const __CFArray *)v20[138];
        v29 = *(const __CFArray **)(v22 + 208);
        *(_OWORD *)v43 = *MEMORY[0x1E0CA2E30];
        *(_QWORD *)&v43[16] = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
        FPSupport_AppendDeferredTransactionChangeForSettingCAImageQueuesOnVideoLayers(v26, v28, v29, (__int128 *)v43, (uint64_t)"playerfig_connectImageQueueToVideoLayer");
        MEMORY[0x19402EF04](v20[140]);
        playerfig_updateVideoLayerSize(v21, v26);
        v30 = (const __CFArray *)v20[108];
        if (v30 && CFArrayGetCount(v30) >= 1)
        {
          v31 = (const __CFArray *)v20[108];
          *(_OWORD *)v43 = v45;
          *(_QWORD *)&v43[16] = v46;
          FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(v26, (__int128 *)v43, v31, (uint64_t)"playerfig_connectImageQueueToVideoLayer");
        }
        v27 = playerfig_connectLayerSynchronizerToLayer((uint64_t)v21, a1, v26);
        goto LABEL_38;
      }
    }
    else if (!*v12)
    {
      goto LABEL_19;
    }
    if (!*(_QWORD *)(DerivedStorage + 856))
    {
      if (*((_DWORD *)v9 + 690) >= 2u)
      {
        LODWORD(cf) = 0;
        v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(v40 + 224));
      v33 = *(const __CFArray **)(v40 + 208);
      if (v33 && CFArrayGetCount(v33) > 0 || *(_QWORD *)(DerivedStorage + 864))
        v32 = playerfig_connectLayerSynchronizerToLayer((uint64_t)v7, a1, v41);
      else
        v32 = 0;
      MEMORY[0x19402EF04](*(_QWORD *)(v40 + 224));
      if (!VideoFrame || (_DWORD)v32)
        goto LABEL_54;
LABEL_52:
      if (!*(_BYTE *)(DerivedStorage + 874))
      {
        if (*((_DWORD *)v9 + 690))
        {
          v35 = v7;
          LODWORD(cf) = 0;
          v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v37 = cf;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            v38 = v37;
          else
            v38 = v37 & 0xFFFFFFFE;
          if (v38)
          {
            if (a1)
              v39 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            else
              v39 = "";
            *(_DWORD *)v43 = 136315650;
            *(_QWORD *)&v43[4] = "itemfig_handleReadyToDisplayVideoLatch";
            *(_WORD *)&v43[12] = 2048;
            *(_QWORD *)&v43[14] = a1;
            *(_WORD *)&v43[22] = 2082;
            v44 = v39;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v7 = v35;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        v32 = 0;
        *(_BYTE *)(DerivedStorage + 874) = 1;
        goto LABEL_54;
      }
LABEL_53:
      v32 = 0;
LABEL_54:
      CFRelease(v7);
      return v32;
    }
LABEL_19:
    if (*((_DWORD *)v9 + 690) >= 2u)
    {
      LODWORD(cf) = 0;
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!VideoFrame)
      goto LABEL_53;
    goto LABEL_52;
  }
  return FigSignalErrorAt();
}

uint64_t itemfig_matchBossRateToPlayerRateAndPlaybackState(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  NSObject *v10;
  OpaqueCMTimebase *v11;
  float Rate;
  const void *v13;
  CMClockRef HostTimeClock;
  OpaqueCMClock *v15;
  double v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Float64 v23;
  Float64 v24;
  __int128 *v25;
  __int128 *v26;
  OpaqueCMClock *v27;
  __int128 v28;
  __int128 v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  const void *v33;
  float v34;
  NSObject *v35;
  unsigned int value;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Float64 Seconds;
  Float64 v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v52;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime type;
  CMTime v59;
  CMTime time;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  Float64 v67;
  __int16 v68;
  Float64 v69;
  CMTime lhs;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v6 = CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    v50 = FigSignalErrorAt();
    if (!v5)
      return v50;
    goto LABEL_50;
  }
  if (v5)
  {
    if (*(_BYTE *)DerivedStorage || !*(_QWORD *)(DerivedStorage + 352))
    {
      v49 = FigSignalErrorAt();
      goto LABEL_49;
    }
    v7 = v6;
    if (*(_BYTE *)(DerivedStorage + 480))
    {
      LODWORD(v59.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_DWORD *)(v7 + 52) != 4)
    {
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(v59.value) = 0;
        LOBYTE(type.value) = 0;
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v32 = *(_QWORD *)(DerivedStorage + 352);
      v33 = *(const void **)(DerivedStorage + 512);
      lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      time = lhs;
      v34 = 0.0;
LABEL_48:
      v49 = FigPlaybackBossSetRateAndAnchorTime(v32, &lhs, &time, v33, v34);
LABEL_49:
      v50 = v49;
LABEL_50:
      CFRelease(v5);
      return v50;
    }
    if (dword_1EE2A2AC8 >= 2)
    {
      LODWORD(v59.value) = 0;
      LOBYTE(type.value) = 0;
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v11 = *(OpaqueCMTimebase **)(DerivedStorage + 344);
    if (v11)
    {
      Rate = CMTimebaseGetRate(v11);
      if (*(float *)(v7 + 48) != Rate)
      {
        LODWORD(v59.value) = 0;
        LOBYTE(type.value) = 0;
        v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        v43 = 1;
LABEL_36:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_43:
        v47 = CMBaseObjectGetDerivedStorage();
        if (itemfig_useDroppableFramesMinimumInterval())
        {
          lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          time = lhs;
          FPSupport_GetDisplayRefreshInformation(0, &lhs, (uint64_t)&time);
          if ((lhs.flags & 0x1D) == 1)
          {
            v48 = *(_QWORD *)(v47 + 352);
            v59 = lhs;
            type = time;
            FigPlaybackBossSetDroppableFrameMinimumIntervalAndRequestedFrameTimestampIntervalStep(v48, &v59, &type);
          }
        }
        if (!v43)
        {
          v50 = 0;
          goto LABEL_50;
        }
        v32 = *(_QWORD *)(DerivedStorage + 352);
        v34 = *(float *)(v7 + 48);
        v33 = *(const void **)(DerivedStorage + 512);
        lhs = *a2;
        time = *a3;
        goto LABEL_48;
      }
      FigPlaybackBossGetTime(*(_QWORD *)(DerivedStorage + 352), &lhs);
      *a2 = lhs;
      v13 = *(const void **)(DerivedStorage + 344);
      HostTimeClock = CMClockGetHostTimeClock();
      time = *a2;
      CMSyncConvertTime(&lhs, &time, v13, HostTimeClock);
      *a3 = lhs;
      memset(&v59, 0, sizeof(v59));
      v15 = CMClockGetHostTimeClock();
      CMClockGetTime(&rhs, v15);
      lhs = *a3;
      CMTimeSubtract(&v59, &lhs, &rhs);
      v16 = *(float *)(v7 + 48);
      if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328)) == v16)
      {
        lhs = v59;
        CMTimeAbsoluteValue(&time1, &lhs);
        CMTimeMake(&time2, 1, 1000);
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          if (dword_1EE2A2AC8)
          {
            LODWORD(type.value) = 0;
            v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = type.value;
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
              v37 = value;
            else
              v37 = value & 0xFFFFFFFE;
            if (v37)
            {
              v38 = v7;
              v39 = CMBaseObjectGetDerivedStorage() + 944;
              v40 = CMBaseObjectGetDerivedStorage() + 2048;
              lhs = *a2;
              Seconds = CMTimeGetSeconds(&lhs);
              lhs = v59;
              v42 = CMTimeGetSeconds(&lhs);
              LODWORD(time.value) = 136316674;
              *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"itemfig_matchBossRateToPlayerRateAndPlaybackState";
              LOWORD(time.flags) = 2048;
              *(_QWORD *)((char *)&time.flags + 2) = v5;
              HIWORD(time.epoch) = 2082;
              v61 = v39;
              v7 = v38;
              v62 = 2048;
              v63 = a1;
              v64 = 2082;
              v65 = v40;
              v66 = 2048;
              v67 = Seconds;
              v68 = 2048;
              v69 = v42;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v43 = 0;
          goto LABEL_43;
        }
      }
      if (dword_1EE2A2AC8)
      {
        LODWORD(type.value) = 0;
        v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v18 = type.value;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          v19 = v18;
        else
          v19 = v18 & 0xFFFFFFFE;
        if (v19)
        {
          v20 = v7;
          v21 = CMBaseObjectGetDerivedStorage() + 944;
          v22 = CMBaseObjectGetDerivedStorage() + 2048;
          lhs = *a2;
          v23 = CMTimeGetSeconds(&lhs);
          lhs = v59;
          v24 = CMTimeGetSeconds(&lhs);
          LODWORD(time.value) = 136316674;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"itemfig_matchBossRateToPlayerRateAndPlaybackState";
          LOWORD(time.flags) = 2048;
          *(_QWORD *)((char *)&time.flags + 2) = v5;
          HIWORD(time.epoch) = 2082;
          v61 = v21;
          v7 = v20;
          v62 = 2048;
          v63 = a1;
          v64 = 2082;
          v65 = v22;
          v66 = 2048;
          v67 = v23;
          v68 = 2048;
          v69 = v24;
          _os_log_send_and_compose_impl();
        }
        v43 = 1;
        goto LABEL_36;
      }
    }
    else if ((*(_DWORD *)(DerivedStorage + 560) & 0x1D) == 1 && (*(_DWORD *)(DerivedStorage + 584) & 0x1D) == 1)
    {
      v25 = (__int128 *)(DerivedStorage + 548);
      v26 = (__int128 *)(DerivedStorage + 572);
      memset(&v59, 0, sizeof(v59));
      v27 = CMClockGetHostTimeClock();
      CMClockGetTime(&v59, v27);
      memset(&type, 0, sizeof(type));
      lhs = *(CMTime *)(DerivedStorage + 572);
      time = v59;
      CMTimeSubtract(&type, &lhs, &time);
      lhs = type;
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CMTimeCompare(&lhs, &time) < 1)
      {
        if (dword_1EE2A2AC8)
        {
          v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v44 = MEMORY[0x1E0CA2E18];
        v45 = *MEMORY[0x1E0CA2E18];
        *v25 = *MEMORY[0x1E0CA2E18];
        v46 = *(_QWORD *)(v44 + 16);
        *(_QWORD *)(DerivedStorage + 564) = v46;
        *v26 = v45;
        *(_QWORD *)(DerivedStorage + 588) = v46;
      }
      else
      {
        v28 = *v25;
        a2->epoch = *(_QWORD *)(DerivedStorage + 564);
        *(_OWORD *)&a2->value = v28;
        v29 = *v26;
        a3->epoch = *(_QWORD *)(DerivedStorage + 588);
        *(_OWORD *)&a3->value = v29;
        if (dword_1EE2A2AC8)
        {
          v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    v43 = 1;
    goto LABEL_43;
  }
  return FigSignalErrorAt();
}

uint64_t playerfig_scheduleVideoSlotAndVideoTargetConfigurationSwitchAndPossiblyStartBossForNextItem(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CMTimeValue v4;
  CMTimeScale v5;
  const __CFArray *v6;
  const void *ValueAtIndex;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  CMTimeFlags v12;
  CMTimeEpoch epoch;
  uint64_t v14;
  CMTimeFlags flags;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v23;
  uint64_t v24;
  CMTimeEpoch v25;
  CMTimeFlags v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  CMTimeEpoch v32;
  int v33;
  const __CFArray *v34;
  CFIndex Count;
  NSObject *v36;
  unsigned int v37;
  unsigned int v38;
  NSObject *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  const __CFArray *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  const void *v49;
  _BOOL4 v50;
  uint64_t v51;
  const void *v52;
  CMClockRef HostTimeClock;
  uint64_t v54;
  NSObject *v55;
  unsigned int v56;
  unsigned int v57;
  NSObject *v58;
  unsigned int v59;
  unsigned int v60;
  const void *v61;
  CMClockRef v62;
  NSObject *v63;
  unsigned int v64;
  unsigned int v65;
  const char *v66;
  double v67;
  Float64 Seconds;
  Float64 v69;
  CMClockRef v70;
  Float64 v71;
  Float64 v72;
  const char *Description;
  CMTimeValue v74;
  const __CFAllocator *cf;
  CFTypeRef cfa;
  CFMutableDictionaryRef theDict;
  CMTimeEpoch v78;
  CMTimeFlags v79;
  CMTimeFlags v80;
  CMTimeEpoch v81;
  uint64_t v82;
  uint64_t v83;
  CMTimeEpoch v84;
  CMTime rhs;
  CMTime v86;
  CMTime time;
  os_log_type_t v88;
  int v89;
  uint64_t v90;
  os_log_type_t v91[8];
  CMTime v92;
  const char *v93;
  __int16 v94;
  double v95;
  __int16 v96;
  Float64 v97;
  __int16 v98;
  Float64 v99;
  __int16 v100;
  Float64 v101;
  __int16 v102;
  Float64 v103;
  __int16 v104;
  const __CFString *v105;
  __int16 v106;
  const char *v107;
  CMTime type;
  CMTime v109;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTime theArray[5];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = MEMORY[0x1E0CA2E18];
  v4 = *MEMORY[0x1E0CA2E18];
  value = *MEMORY[0x1E0CA2E18];
  v5 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  timescale = v5;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (!playerfig_doingGapless())
  {
    if (dword_1EE2A2AC8)
      goto LABEL_17;
    return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  }
  v6 = *(const __CFArray **)(DerivedStorage + 504);
  if (!v6 || CFArrayGetCount(v6) <= 1)
  {
    if (dword_1EE2A2AC8)
      goto LABEL_17;
    return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 1);
  v10 = CMBaseObjectGetDerivedStorage();
  if (ValueAtIndex != *(const void **)(DerivedStorage + 512))
  {
    v11 = v10;
    v12 = *(_DWORD *)(v3 + 12);
    epoch = *(_QWORD *)(v3 + 16);
    v14 = *(_QWORD *)(v8 + 352);
    v84 = epoch;
    flags = v12;
    if (v14)
    {
      FigPlaybackBossGetScheduledEndTime(v14, (__n128 *)theArray);
      value = theArray[0].value;
      flags = theArray[0].flags;
      timescale = theArray[0].timescale;
      epoch = theArray[0].epoch;
    }
    if ((flags & 0x1D) != 1)
    {
      if (dword_1EE2A2AC8)
      {
        LODWORD(v109.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        goto LABEL_20;
      }
      return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
    }
    v79 = v12;
    v80 = flags;
    v81 = epoch;
    v82 = v8;
    v83 = v11;
    type.value = 0;
    v109.value = v4;
    v109.timescale = v5;
    v16 = CMBaseObjectGetDerivedStorage();
    v17 = CMBaseObjectGetDerivedStorage();
    v18 = CMBaseObjectGetDerivedStorage();
    v90 = 0;
    *(_QWORD *)v91 = 0;
    if (!*(_QWORD *)(v16 + 216))
    {
      if (dword_1EE2A2AC8)
        goto LABEL_38;
      goto LABEL_40;
    }
    v19 = v18;
    if (*(_BYTE *)(v18 + 875))
    {
      if (dword_1EE2A2AC8)
        goto LABEL_38;
      goto LABEL_40;
    }
    v23 = *(const __CFArray **)(v18 + 1112);
    if (!v23 || !CFArrayGetCount(v23))
    {
      if (dword_1EE2A2AC8)
        goto LABEL_38;
      goto LABEL_40;
    }
    if (!itemfig_hasEnqueuedFirstVideoFrame((uint64_t)v9))
    {
      if (dword_1EE2A2AC8)
        goto LABEL_38;
      goto LABEL_40;
    }
    v24 = *(_QWORD *)(v17 + 352);
    v25 = v84;
    v26 = v79;
    if (v24)
    {
      FigPlaybackBossGetScheduledEndTime(v24, (__n128 *)theArray);
      v109.value = theArray[0].value;
      v26 = theArray[0].flags;
      v109.timescale = theArray[0].timescale;
      v25 = theArray[0].epoch;
    }
    if ((v26 & 0x1D) != 1)
    {
      if (dword_1EE2A2AC8)
      {
LABEL_38:
        v89 = 0;
        v88 = OS_LOG_TYPE_DEFAULT;
        v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        goto LABEL_39;
      }
LABEL_40:
      v29 = 0;
      goto LABEL_41;
    }
    v78 = v25;
    itemfig_GetDimensions(ValueAtIndex, (float *)&v91[4], (float *)v91);
    itemfig_GetDimensions(v9, (float *)&v90 + 1, (float *)&v90);
    if (*((float *)&v90 + 1) == 0.0
      || *(float *)&v90 == 0.0
      || *(float *)&v91[4] != *((float *)&v90 + 1)
      || *(float *)v91 != *(float *)&v90)
    {
      if (dword_1EE2A2AC8)
      {
        v89 = 0;
        v88 = OS_LOG_TYPE_DEFAULT;
        v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
LABEL_39:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_40;
      }
      goto LABEL_40;
    }
    cf = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!theDict)
    {
      FigSignalErrorAt();
      goto LABEL_40;
    }
    v46 = itemfig_copyVideoTrackMatrix(cf, (uint64_t)v9, (__CFArray **)&type);
    cfa = (CFTypeRef)type.value;
    if (v46 || !type.value)
    {
      v74 = type.value;
      FigSignalErrorAt();
      CFRelease(theDict);
      v47 = 0;
      v29 = 0;
      if (!v74)
      {
LABEL_41:
        v30 = CMBaseObjectGetDerivedStorage();
        v31 = CMBaseObjectGetDerivedStorage();
        v109.value = v4;
        v109.timescale = v5;
        *(_OWORD *)&v92.value = *(_OWORD *)v3;
        v32 = v84;
        v92.epoch = v84;
        CMBaseObjectGetDerivedStorage();
        v33 = *(_DWORD *)(v31 + 1000);
        v34 = *(const __CFArray **)(v31 + 1048);
        if (v34)
          Count = CFArrayGetCount(v34);
        else
          Count = 0;
        if (!playerfig_hasVideoTargets())
        {
          if (!dword_1EE2A2AC8)
            goto LABEL_105;
          *(_DWORD *)&v91[4] = 0;
          v91[0] = OS_LOG_TYPE_DEFAULT;
          v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v40 = *(_DWORD *)&v91[4];
          if (os_log_type_enabled(v39, v91[0]))
            v41 = v40;
          else
            v41 = v40 & 0xFFFFFFFE;
          if (!v41)
            goto LABEL_104;
          LODWORD(type.value) = 136315138;
          *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"playerfig_scheduleVideoTargetImageQueueConfigurationS"
                                                                   "witchForNextItem";
          goto LABEL_103;
        }
        if (*(_BYTE *)(v31 + 876))
        {
          if (!dword_1EE2A2AC8)
            goto LABEL_105;
          *(_DWORD *)&v91[4] = 0;
          v91[0] = OS_LOG_TYPE_DEFAULT;
          v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v37 = *(_DWORD *)&v91[4];
          if (os_log_type_enabled(v36, v91[0]))
            v38 = v37;
          else
            v38 = v37 & 0xFFFFFFFE;
          if (!v38)
            goto LABEL_104;
          LODWORD(type.value) = 136315138;
          *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"playerfig_scheduleVideoTargetImageQueueConfigurationS"
                                                                   "witchForNextItem";
          goto LABEL_103;
        }
        if (!v33 && Count < 1)
          goto LABEL_86;
        v42 = CMBaseObjectGetDerivedStorage();
        theArray[0].value = 0;
        v43 = *(const __CFArray **)(v42 + 1048);
        if (v43)
        {
          if (CFArrayGetCount(v43) >= 1)
            goto LABEL_86;
        }
        if (*(_QWORD *)(v42 + 808))
        {
          v44 = *(_QWORD *)(v42 + 824);
        }
        else
        {
          type.value = 0;
          v45 = *(_DWORD *)(v42 + 1000);
          if (v45)
          {
            if (itemfig_getTrackStorage((uint64_t)v9, v45, &type))
              goto LABEL_97;
            v44 = *(_QWORD *)(type.value + 48);
          }
          else
          {
            v44 = 0;
          }
        }
        if (v44)
        {
          v48 = FigImageQueueTableCopyVideoTargets(v44, (__CFArray **)theArray);
          v49 = (const void *)theArray[0].value;
          if (v48 || !theArray[0].value)
          {
            v50 = 0;
          }
          else
          {
            v50 = CFArrayGetCount((CFArrayRef)theArray[0].value) > 0;
            v49 = (const void *)theArray[0].value;
          }
          if (v49)
            CFRelease(v49);
          if (v50)
          {
LABEL_86:
            v51 = *(_QWORD *)(v30 + 352);
            if (v51)
            {
              FigPlaybackBossGetScheduledEndTime(v51, (__n128 *)theArray);
              v109.value = theArray[0].value;
              v79 = theArray[0].flags;
              v109.timescale = theArray[0].timescale;
              v32 = theArray[0].epoch;
            }
            if ((v79 & 0x1D) == 1)
            {
              v52 = *(const void **)(v30 + 328);
              HostTimeClock = CMClockGetHostTimeClock();
              theArray[0].value = v109.value;
              theArray[0].timescale = v109.timescale;
              theArray[0].flags = v79;
              theArray[0].epoch = v32;
              CMSyncConvertTime(&v92, theArray, v52, HostTimeClock);
              theArray[0] = v92;
              if (!playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, v9, (__int128 *)&theArray[0].value))
              {
                *(_BYTE *)(v31 + 876) = 1;
                v54 = v83;
LABEL_106:
                if (*(_BYTE *)(v54 + 625))
                {
                  memset(&v109, 0, sizeof(v109));
                  FigPlaybackBossGetTime(*(_QWORD *)(v54 + 352), &v109);
                  memset(&type, 0, sizeof(type));
                  v61 = *(const void **)(v82 + 328);
                  v62 = CMClockGetHostTimeClock();
                  theArray[0].value = value;
                  theArray[0].timescale = timescale;
                  theArray[0].flags = v80;
                  theArray[0].epoch = v81;
                  CMSyncConvertTime(&type, theArray, v61, v62);
                  if (dword_1EE2A2AC8 >= 2)
                  {
                    *(_DWORD *)&v91[4] = 0;
                    v91[0] = OS_LOG_TYPE_DEFAULT;
                    v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v64 = *(_DWORD *)&v91[4];
                    if (os_log_type_enabled(v63, v91[0]))
                      v65 = v64;
                    else
                      v65 = v64 & 0xFFFFFFFE;
                    if (v65)
                    {
                      if (a1)
                        v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                      else
                        v66 = "";
                      v67 = *(float *)(DerivedStorage + 48);
                      theArray[0] = v109;
                      Seconds = CMTimeGetSeconds(theArray);
                      theArray[0] = type;
                      v69 = CMTimeGetSeconds(theArray);
                      v70 = CMClockGetHostTimeClock();
                      CMSyncGetTime(&time, v70);
                      v71 = CMTimeGetSeconds(&time);
                      FigPlaybackBossGetTime(*(_QWORD *)(v82 + 352), &rhs);
                      theArray[0].value = value;
                      theArray[0].timescale = timescale;
                      theArray[0].flags = v80;
                      theArray[0].epoch = v81;
                      CMTimeSubtract(&v86, theArray, &rhs);
                      v72 = CMTimeGetSeconds(&v86);
                      Description = FigPlayerPlaybackStateGetDescription(*(_DWORD *)(DerivedStorage + 52));
                      LODWORD(v92.value) = 136317442;
                      *(CMTimeValue *)((char *)&v92.value + 4) = (CMTimeValue)"playerfig_scheduleVideoSlotAndVideoTargetC"
                                                                              "onfigurationSwitchAndPossiblyStartBossForNextItem";
                      LOWORD(v92.flags) = 2048;
                      *(_QWORD *)((char *)&v92.flags + 2) = a1;
                      HIWORD(v92.epoch) = 2082;
                      v93 = v66;
                      v94 = 2048;
                      v95 = v67;
                      v96 = 2048;
                      v97 = Seconds;
                      v98 = 2048;
                      v99 = v69;
                      v100 = 2048;
                      v101 = v71;
                      v102 = 2048;
                      v103 = v72;
                      v104 = 2048;
                      v105 = v9;
                      v106 = 2082;
                      v107 = Description;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v54 = v83;
                  }
                  itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v9, 0);
                  theArray[0] = v109;
                  v92 = type;
                  itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v9, theArray, &v92);
                  *(_BYTE *)(v54 + 625) = 0;
                }
                return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
              }
LABEL_105:
              v54 = v83;
              if (!v29)
                return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
              goto LABEL_106;
            }
            if (!dword_1EE2A2AC8)
              goto LABEL_105;
            *(_DWORD *)&v91[4] = 0;
            v91[0] = OS_LOG_TYPE_DEFAULT;
            v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v56 = *(_DWORD *)&v91[4];
            if (os_log_type_enabled(v55, v91[0]))
              v57 = v56;
            else
              v57 = v56 & 0xFFFFFFFE;
            if (!v57)
            {
LABEL_104:
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              goto LABEL_105;
            }
            LODWORD(type.value) = 136315138;
            *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"playerfig_scheduleVideoTargetImageQueueConfiguratio"
                                                                     "nSwitchForNextItem";
LABEL_103:
            _os_log_send_and_compose_impl();
            goto LABEL_104;
          }
        }
LABEL_97:
        if (!dword_1EE2A2AC8)
          goto LABEL_105;
        *(_DWORD *)&v91[4] = 0;
        v91[0] = OS_LOG_TYPE_DEFAULT;
        v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v59 = *(_DWORD *)&v91[4];
        if (os_log_type_enabled(v58, v91[0]))
          v60 = v59;
        else
          v60 = v59 & 0xFFFFFFFE;
        if (!v60)
          goto LABEL_104;
        LODWORD(type.value) = 136315138;
        *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"playerfig_scheduleVideoTargetImageQueueConfigurationSwitchForNextItem";
        goto LABEL_103;
      }
    }
    else
    {
      CFDictionarySetValue(theDict, CFSTR("CurrentVideoTrackMatrix"), (const void *)type.value);
      CFDictionarySetValue(theDict, CFSTR("CurrentVideoSlotArray"), *(const void **)(v19 + 1112));
      CFDictionarySetValue(theDict, CFSTR("CurrentHasEnqueuedFirstVideoFrame"), (const void *)*MEMORY[0x1E0C9AE50]);
      theArray[0].value = v109.value;
      theArray[0].timescale = v109.timescale;
      theArray[0].flags = v26;
      theArray[0].epoch = v78;
      if (FigCFDictionarySetCMTime())
      {
        v47 = 0;
      }
      else
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        v47 = 1;
        *(_BYTE *)(v19 + 875) = 1;
      }
      CFRelease(theDict);
    }
    CFRelease(cfa);
    v29 = v47;
    goto LABEL_41;
  }
  if (dword_1EE2A2AC8)
  {
LABEL_17:
    LODWORD(v109.value) = 0;
    LOBYTE(type.value) = 0;
    v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
LABEL_20:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
}

uint64_t playerfig_connectLayerSynchronizerToLayer(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFMutableArrayRef v10;
  __CFArray *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  uint64_t *v14;
  uint64_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  NSObject *v18;
  uint64_t v20;
  CFRange v21;
  CFRange v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v9 = Mutable;
  v10 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  if (v10)
  {
    v11 = v10;
    v12 = *(const __CFArray **)(DerivedStorage + 208);
    if (v12)
    {
      v21.length = CFArrayGetCount(v12);
      v21.location = 0;
      CFArrayAppendArray(v9, *(CFArrayRef *)(DerivedStorage + 208), v21);
    }
    v13 = *(const __CFArray **)(v6 + 864);
    if (v13)
    {
      v22.length = CFArrayGetCount(*(CFArrayRef *)(v6 + 864));
      v22.location = 0;
      CFArrayAppendArray(v11, v13, v22);
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 848));
    v14 = (uint64_t *)(v6 + 856);
    v15 = *(_QWORD *)(v6 + 856);
    if (v15 || (FigLayerSynchronizerCreate((_QWORD *)(v6 + 856)), (v15 = *v14) != 0))
    {
      if (dword_1EE2A2AC8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v15 = *v14;
      }
      FigLayerSynchronizerSetLayerArraysWithDeferredTransaction(v15, v9, v11, a3);
      MEMORY[0x19402EF04](*(_QWORD *)(v6 + 848));
      if (FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)playerfig_syncMomentSourceCallback, a2, *(const void **)(v6 + 328), *(NSObject **)(v6 + 104), (uint64_t *)(v6 + 840)))
      {
        v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      MEMORY[0x19402EF04](*(_QWORD *)(v6 + 848));
    }
    CFRelease(v9);
    CFRelease(v11);
    return 0;
  }
  else
  {
    v20 = FigSignalErrorAt();
    CFRelease(v9);
    return v20;
  }
}

uint64_t playerfig_syncMomentSourceCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  const void *v6;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v4 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 848));
    if (*(_QWORD *)(v4 + 856))
    {
      v5 = pthread_main_np();
      v6 = *(const void **)(v4 + 856);
      if (v5)
        FigLayerSynchronizerSynchronizeToMoment((uint64_t)v6, a2, 0);
      else
        FigLayerSynchronizerSynchronizeToMomentWithDeferredTransaction(v6, a2, 0, (uint64_t)"playerfig_syncMomentSourceCallback", 0);
    }
    JUMPOUT(0x19402EF04);
  }
  return result;
}

BOOL itemfig_useDroppableFramesMinimumInterval()
{
  return !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 286) && CelestialIsAppleTV() == 0;
}

void itemfig_assureContentProtectionReadyForInspection(const void *a1)
{
  _QWORD *DerivedStorage;
  uint64_t v3;
  CFAllocatorRef v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, CFAllocatorRef, CFBooleanRef *);
  uint64_t v7;
  CFAllocatorRef v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, const __CFString *, CFAllocatorRef, _QWORD *);
  CFBooleanRef BOOLean;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  BOOLean = 0;
  if (!itemfig_assureBasicsReadyForInspection(a1))
  {
    v3 = DerivedStorage[152];
    v4 = CFGetAllocator(a1);
    CMBaseObject = FigAssetGetCMBaseObject(v3);
    v6 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
    {
      if (!v6(CMBaseObject, CFSTR("assetProperty_ProtectedStatus"), v4, &BOOLean))
      {
        if (!BOOLean
          || !CFBooleanGetValue(BOOLean)
          || DerivedStorage[145]
          || (v7 = DerivedStorage[152],
              v8 = CFGetAllocator(a1),
              v9 = FigAssetGetCMBaseObject(v7),
              (v10 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) != 0)
          && !v10(v9, CFSTR("assetProperty_CPEProtector"), v8, DerivedStorage + 145))
        {
          if (!DerivedStorage[145] && DerivedStorage[146])
            FigCPEProtectorCreateForScheme(*MEMORY[0x1E0C9AE00], CFSTR("com.apple.basicAES"), 0, (uint64_t)(DerivedStorage + 145));
        }
      }
    }
    if (BOOLean)
      CFRelease(BOOLean);
  }
}

BOOL fp_audioPipelineIsRunning(uint64_t a1)
{
  uint64_t FigBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID TypeID;
  _BOOL8 v4;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v2)
    return 0;
  v2(FigBaseObject, CFSTR("IsRunning"), *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  TypeID = CFBooleanGetTypeID();
  v4 = TypeID == CFGetTypeID(cf) && CFBooleanGetValue((CFBooleanRef)cf) != 0;
  CFRelease(cf);
  return v4;
}

CFNumberRef fp_bumpTransitionNumber()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFNumberRef result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 536);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 536) = 0;
  }
  ++*(_DWORD *)(DerivedStorage + 528);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(DerivedStorage + 528));
  *(_QWORD *)(DerivedStorage + 536) = result;
  return result;
}

uint64_t playerfig_setExitTransitionIDOnItemPrecedingWorkingItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  const __CFArray *v6;
  CFRange v7;
  CFIndex FirstIndexOfValue;
  uint64_t v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = *(const void **)(DerivedStorage + 512);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(const __CFArray **)(DerivedStorage + 504);
  if (v6)
  {
    v7.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
    v5 = *(const void **)(v4 + 512);
  }
  else
  {
    v7.length = 0;
  }
  v7.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v7, v5);
  if (FirstIndexOfValue <= 0)
    return FigSignalErrorAt();
  CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 504), FirstIndexOfValue - 1);
  v9 = CMBaseObjectGetDerivedStorage();
  v10 = *(const void **)(v9 + 488);
  *(_QWORD *)(v9 + 488) = a2;
  CFRetain(a2);
  if (v10)
    CFRelease(v10);
  return 0;
}

void itemfig_networkActivitySubmitMetricsForInitialStartupIfAvailable()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 2008);
  if (v1)
  {
    v2 = *(double *)(DerivedStorage + 1920);
    if (v2 != 0.0)
    {
      v3 = *(double *)(DerivedStorage + 1944);
      if (v3 != 0.0)
      {
        v4 = *(double *)(DerivedStorage + 1984);
        if (v4 != 0.0)
        {
          FigNWActivitySubmitMetricsForInitialStartup(v1, v2, v3, v4);
          v5 = *(const void **)(DerivedStorage + 2008);
          if (v5)
          {
            CFRelease(v5);
            *(_QWORD *)(DerivedStorage + 2008) = 0;
          }
        }
      }
    }
  }
}

uint64_t itemfig_lookForEmptyEditAndMapTime(uint64_t a1, __int128 *a2, CMTime *a3, _BYTE *a4)
{
  uint64_t (*v8)(uint64_t, CMTimeRange *, CFTypeRef *);
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, CMTimeRange *);
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  CMTimeRange v16;
  CMTime v17;
  CMTime v18;
  CMTimeRange range;
  CMTimeRange v20[2];
  CFTypeRef v21;

  v21 = 0;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)&v16.start.value = *a2;
  v16.start.epoch = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
    goto LABEL_8;
  *(_OWORD *)&range.start.value = *(_OWORD *)&v16.start.value;
  range.start.epoch = v16.start.epoch;
  v9 = v8(a1, &range, &v21);
  if ((_DWORD)v9)
  {
    v14 = v9;
    if ((_DWORD)v9 != -12521)
      goto LABEL_11;
    goto LABEL_10;
  }
  v10 = v21;
  v11 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v11)
  {
LABEL_8:
    v14 = 4294954514;
    goto LABEL_11;
  }
  v12 = v11(v10, v20);
  if (!(_DWORD)v12)
  {
    range = v20[1];
    *(_OWORD *)&v16.start.value = *a2;
    v16.start.epoch = *((_QWORD *)a2 + 2);
    if (CMTimeRangeContainsTime(&range, &v16.start) && (v20[0].start.flags & 1) != 0)
    {
      v13 = *a2;
      v17.epoch = *((_QWORD *)a2 + 2);
      range = v20[1];
      v16 = v20[0];
      *(_OWORD *)&v17.value = v13;
      CMTimeMapTimeFromRangeToRange(&v18, &v17, &range, &v16);
      v14 = 0;
      *a3 = v18;
      goto LABEL_11;
    }
LABEL_10:
    v14 = 0;
    *a4 = 1;
    goto LABEL_11;
  }
  v14 = v12;
LABEL_11:
  if (v21)
    CFRelease(v21);
  return v14;
}

uint64_t itemfig_copyVideoTrackMatrix(const __CFAllocator *a1, uint64_t a2, __CFArray **a3)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, const __CFString *, const __CFAllocator *, __CFArray **);
  uint64_t v10;
  __CFArray *v11;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[3];
  __CFArray *v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v8 = *(unsigned int *)(DerivedStorage + 1000);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, const __CFAllocator *, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v9)
    {
      v11 = 0;
      v10 = 4294954514;
      goto LABEL_17;
    }
    v10 = v9(a2, v8, CFSTR("Matrix"), a1, &v16);
    v11 = v16;
    if ((_DWORD)v10 != -12784 || v16 != 0)
      goto LABEL_17;
    v13 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    v15[0] = *MEMORY[0x1E0C9BAA8];
    v15[1] = v13;
    v15[2] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    v11 = FigCreate3x3MatrixArrayFromCGAffineTransform(a1, v15);
    v16 = v11;
    if (!v11)
    {
      v14 = FigSignalErrorAt();
      if (v16)
        CFRelease(v16);
      return v14;
    }
  }
  else
  {
    v11 = 0;
  }
  v10 = 0;
LABEL_17:
  *a3 = v11;
  return v10;
}

BOOL playerfig_hasVideoTargets()
{
  uint64_t DerivedStorage;
  const void *v1;
  const __CFArray *v2;
  CFIndex Count;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 240));
  v1 = *(const void **)(DerivedStorage + 248);
  if (v1)
  {
    v2 = (const __CFArray *)CFRetain(v1);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 240));
    if (v2)
    {
      Count = CFArrayGetCount(v2);
      CFRelease(v2);
      return Count > 0;
    }
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 240));
  }
  return 0;
}

void itemfig_BossBecameIdle_prepareNextItemForTransition_f(const void *a1)
{
  uint64_t v2;
  const void *v3;

  CMBaseObjectGetDerivedStorage();
  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (const void *)v2;
    if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    {
      if (!a1)
      {
LABEL_5:
        CFRelease(v3);
        return;
      }
    }
    else
    {
      playerfig_prepareNextItemForTransition(v3, a1);
      if (!a1)
        goto LABEL_5;
    }
    CFRelease(a1);
    goto LABEL_5;
  }
}

void playerfig_prepareNextItemForTransition(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  NSObject *v11;
  NSObject *v12;
  uint64_t *v13;
  NSObject *v14;
  NSObject *v15;
  _BOOL4 IsPlayerPerformanceTraceEnabled;
  CFIndex v17;
  CFIndex v18;
  const void *ValueAtIndex;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const __CFAllocator *v23;
  const void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  uint64_t FigBaseObject;
  unsigned int (*v29)(uint64_t, const __CFString *, const __CFAllocator *, CMBufferQueueRef *);
  uint64_t v30;
  unsigned int (*v31)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFArray *v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex i;
  _QWORD *v36;
  const void *v37;
  uint64_t v38;
  int v39;
  const __CFAllocator *v40;
  CFTypeRef cf;
  os_log_type_t type;
  uint64_t v43;
  CMBufferQueueRef queue;
  CMAttachmentBearerRef target[18];
  CFRange v46;
  CFRange v47;

  target[16] = *(CMAttachmentBearerRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (dword_1EE2A2AC8)
  {
    LODWORD(v43) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)v5)
  {
    *(_QWORD *)(v5 + 520) = 0;
    v7 = CMBaseObjectGetDerivedStorage();
    if (!playerfig_doingGapless())
      goto LABEL_27;
    if (*(_BYTE *)(v7 + 994))
    {
      if (dword_1EE2A2AC8)
        goto LABEL_26;
      goto LABEL_27;
    }
    if (*(_BYTE *)(v7 + 992))
    {
      if (dword_1EE2A2AC8)
        goto LABEL_26;
      goto LABEL_27;
    }
    v8 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 496));
    if (*(_QWORD *)(v8 + 512))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(v8 + 504));
      v46.location = 0;
      v46.length = Count;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v8 + 504), v46, *(const void **)(v8 + 512));
      if (FirstIndexOfValue != -1 && FirstIndexOfValue + 1 < Count)
      {
        MEMORY[0x19402EA24](*(_QWORD *)(v8 + 496));
        if (dword_1EE2A2AC8)
        {
          LODWORD(v43) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x19402EA0C](*(_QWORD *)(v5 + 496));
        if (!*(_QWORD *)(DerivedStorage + 352))
          goto LABEL_29;
        v13 = (uint64_t *)(v5 + 512);
        if (*(const void **)(v5 + 512) != a2)
        {
          LODWORD(v43) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_29:
          MEMORY[0x19402EA24](*(_QWORD *)(v5 + 496));
          if (cf)
            CFRelease(cf);
          return;
        }
        if (*(_BYTE *)(DerivedStorage + 480))
        {
LABEL_35:
          v17 = CFArrayGetCount(*(CFArrayRef *)(v5 + 504));
          v47.location = 0;
          v47.length = v17;
          v18 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v5 + 504), v47, a2);
          if (v18 == -1)
          {
            LODWORD(v43) = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else if (v18 + 1 < v17)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 504), v18 + 1);
            *(_QWORD *)(v5 + 512) = ValueAtIndex;
            *(_QWORD *)(v5 + 520) = ValueAtIndex;
            if (ValueAtIndex)
            {
              v20 = CMBaseObjectGetDerivedStorage();
              if (*(double *)(v20 + 1552) == 0.0)
                *(CFAbsoluteTime *)(v20 + 1552) = CFAbsoluteTimeGetCurrent();
            }
            goto LABEL_42;
          }
          *v13 = 0;
          *(_QWORD *)(v5 + 520) = 0;
LABEL_42:
          target[0] = 0;
          v22 = CMBaseObjectGetDerivedStorage();
          v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v24 = (const void *)itemfig_copyImageQueueGauge((uint64_t)a2, *MEMORY[0x1E0C9AE00]);
          v25 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
          queue = 0;
          if (v25)
          {
            v26 = *(_DWORD *)(v22 + 1000);
            if (v26)
            {
              v43 = 0;
              if (!itemfig_getTrackStorage((uint64_t)a2, v26, &v43))
              {
                v27 = v43;
                if (v43)
                {
                  if (*(_QWORD *)(v43 + 16)
                    && !CMSampleBufferCreate(v23, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)target))
                  {
                    CMSetAttachment(target[0], (CFStringRef)*MEMORY[0x1E0CA4E50], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
                    if (v24)
                      CMSetAttachment(target[0], (CFStringRef)*MEMORY[0x1E0CA4E70], v24, 1u);
                    FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v27 + 16));
                    v29 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMBufferQueueRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v29 && !v29(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v23, &queue) && queue)
                      CMBufferQueueEnqueue(queue, target[0]);
                  }
                }
              }
              if (target[0])
                CFRelease(target[0]);
            }
          }
          if (v24)
            CFRelease(v24);
          if (queue)
            CFRelease(queue);
          if (v25)
            CFRelease(v25);
          playerfig_prepareWorkingItem(a1, 1, 0);
          if (*v13)
          {
            *(_BYTE *)(DerivedStorage + 496) = 0;
            if (a2)
            {
              v30 = FigPlaybackItemGetFigBaseObject(a2);
              v31 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v31)
              {
                if (!v31(v30, CFSTR("ImageQueueGauge"), v23, &cf) && cf)
                  FigPlaybackItemSetProperty_0(*v13, (uint64_t)CFSTR("PriorImageQueueGauge"), (uint64_t)cf);
              }
            }
          }
          goto LABEL_29;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        if (*(_BYTE *)(v5 + 812))
        {
          if (!a2)
          {
LABEL_34:
            FigPlaybackBossGoQuiescent(*(_QWORD *)(DerivedStorage + 352));
            *(_BYTE *)(DerivedStorage + 480) = 1;
            goto LABEL_35;
          }
        }
        else
        {
          IsPlayerPerformanceTraceEnabled = FPSupport_IsPlayerPerformanceTraceEnabled();
          if (!a2 || !IsPlayerPerformanceTraceEnabled)
            goto LABEL_34;
        }
        if (!*(_BYTE *)DerivedStorage)
        {
          if (*(_QWORD *)(DerivedStorage + 352))
          {
            v32 = *(const __CFArray **)(DerivedStorage + 648);
            if (v32)
            {
              v33 = CFArrayGetCount(v32);
              if (v33 >= 1)
              {
                v34 = v33;
                for (i = 0; i != v34; ++i)
                {
                  v36 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
                  v37 = (const void *)v36[35];
                  if (v37)
                  {
                    CFRelease(v37);
                    v36[35] = 0;
                  }
                  if (*((_BYTE *)v36 + 8))
                  {
                    v38 = *(_QWORD *)(DerivedStorage + 352);
                    v39 = *(_DWORD *)v36;
                    v40 = CFGetAllocator(a1);
                    FigPlaybackBossCopyTrackPerformanceDictionary(v38, v39, v40);
                  }
                }
              }
            }
          }
        }
        goto LABEL_34;
      }
      if (dword_1EE2A2AC8)
      {
        LODWORD(v43) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    MEMORY[0x19402EA24](*(_QWORD *)(v8 + 496));
    if (dword_1EE2A2AC8)
    {
LABEL_26:
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_27:
    *(_BYTE *)(DerivedStorage + 496) = 1;
  }
}

uint64_t FigPlaybackItemSetProperty_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(FigBaseObject, a2, a3);
  return result;
}

uint64_t itemfig_copyImageQueueGauge(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t ValueAtIndex;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  v4 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1000);
  if (v4)
  {
    v9 = 0;
    itemfig_getTrackStorage(a1, v4, &v9);
    if (v9)
    {
      FigImageQueueTableCopyFigImageQueueArray(*(_QWORD *)(v9 + 48), (uint64_t *)&cf);
      if (cf)
      {
        ValueAtIndex = FigCFArrayGetValueAtIndex();
        if (ValueAtIndex)
        {
          FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
          v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
          if (v7)
            v7(FigBaseObject, CFSTR("ImageQueueGauge"), a2, &v10);
        }
        if (cf)
          CFRelease(cf);
      }
    }
  }
  return v10;
}

void playerfig_BossRateChangeFailed_setRateForInternalReason_0_f(const void *a1)
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    if (!a1)
      return;
    goto LABEL_3;
  }
  playerfig_pauseForInternalReason(a1, 2u);
  if (a1)
LABEL_3:
    CFRelease(a1);
}

void itemfig_DeferReachedOverlappedStartTime_f(const void **a1)
{
  const void *v2;
  const void *v3;
  _BYTE *DerivedStorage;
  _BYTE *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex Count;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  const void *v24;
  const void *ValueAtIndex;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  __CFString *v29;
  NSObject *v30;
  NSObject *v31;
  CFMutableDictionaryRef Mutable;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  os_log_type_t v41;
  os_log_type_t type[4];
  os_log_type_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  CFRange v47;

  v46 = *MEMORY[0x1E0C80C00];
  if (!a1)
    goto LABEL_10;
  v2 = *a1;
  v3 = a1[1];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v5 = DerivedStorage;
    v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v6)
    {
      v7 = (const void *)v6;
      v8 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)v8)
      {
LABEL_5:
        CFRelease(v7);
        goto LABEL_6;
      }
      v9 = v8;
      if (*(_DWORD *)(v8 + 776))
      {
        if (dword_1EE2A2AC8)
        {
          LODWORD(v40) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_5;
      }
      CFRetain(v3);
      MEMORY[0x19402EA0C](*(_QWORD *)(v9 + 496));
      if (CFArrayGetCount(*(CFArrayRef *)(v9 + 504)) > 1)
      {
        if (*(const void **)(v9 + 512) != v3 || !*((_QWORD *)v5 + 44))
        {
LABEL_46:
          MEMORY[0x19402EA24](*(_QWORD *)(v9 + 496));
LABEL_47:
          if (v3)
            CFRelease(v3);
          goto LABEL_5;
        }
        v11 = 0;
        v12 = 0;
        v13 = CMBaseObjectGetDerivedStorage() + 368;
        do
        {
          v14 = *(const __CFArray **)(v13 + v11);
          if (v14)
          {
            Count = CFArrayGetCount(v14);
            if (v11)
            {
              if (Count > 0)
                goto LABEL_44;
            }
            else
            {
              if (Count != 1)
                break;
              v12 = 1;
            }
          }
          else if (!v11)
          {
            break;
          }
          v11 += 8;
        }
        while (v11 != 112);
        if (!v12)
        {
LABEL_44:
          if (!dword_1EE2A2AC8)
            goto LABEL_46;
          goto LABEL_45;
        }
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 504), 1);
        v16 = CMBaseObjectGetDerivedStorage();
        if (!*(_BYTE *)(v16 + 1200) || *(_DWORD *)(v16 + 996))
        {
          *(_QWORD *)(v9 + 520) = 0;
          v17 = CMBaseObjectGetDerivedStorage();
          v18 = CMBaseObjectGetDerivedStorage();
          v43 = OS_LOG_TYPE_DEFAULT;
          CFRetain(v3);
          v19 = *(const __CFArray **)(v17 + 504);
          v47.length = CFArrayGetCount(v19);
          v47.location = 0;
          if (!CFArrayGetFirstIndexOfValue(v19, v47, v3) && CFArrayGetCount(*(CFArrayRef *)(v17 + 504)) >= 2)
          {
            if (*(_BYTE *)(v17 + 544))
            {
              *(_BYTE *)(v17 + 544) = 0;
              playerfig_postDeferredPrerollWasCancelledNotification((uint64_t)v7, *(_DWORD *)(v17 + 552));
            }
            v20 = MEMORY[0x1E0CA2E18];
            v21 = *MEMORY[0x1E0CA2E18];
            *(_OWORD *)(v18 + 548) = *MEMORY[0x1E0CA2E18];
            v22 = *(_QWORD *)(v20 + 16);
            *(_QWORD *)(v18 + 564) = v22;
            *(_OWORD *)(v18 + 572) = v21;
            *(_QWORD *)(v18 + 588) = v22;
            v23 = *(_DWORD *)(v18 + 524);
            if (v23)
            {
              *(_DWORD *)(v18 + 524) = 0;
              *(_DWORD *)(v18 + 536) = 0;
              itemfig_postSeekWasCanceledNotification((uint64_t)v7, (uint64_t)v3, v23, 1);
            }
            v24 = *(const void **)(v18 + 1384);
            if (v24)
            {
              CFRelease(v24);
              *(_QWORD *)(v18 + 1384) = 0;
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v17 + 504), 0);
            *(_BYTE *)(v18 + 1) = 0;
            *(_BYTE *)(v18 + 1288) = 0;
            *(_BYTE *)(v18 + 993) = 0;
            itemfig_configureDownloadForItem((uint64_t)v3, *(unsigned __int8 *)(v18 + 1329));
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v17 + 504), 0);
            v26 = CMBaseObjectGetDerivedStorage();
            if (*(double *)(v26 + 1552) == 0.0)
              *(CFAbsoluteTime *)(v26 + 1552) = CFAbsoluteTimeGetCurrent();
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            itemfig_makePlaybackPrerequisitePropertiesReady((uint64_t)ValueAtIndex, &v43);
            if (v43)
            {
              *(_BYTE *)(v18 + 1288) = 1;
            }
            else if (dword_1EE2A2AC8)
            {
              v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            playerfig_configureDownloadInPlayQueue();
          }
          CFRelease(v3);
          if (dword_1EE2A2AC8)
          {
            v29 = fp_copyPlayQueueDescription();
            if (dword_1EE2A2AC8)
            {
              *(_DWORD *)type = 0;
              v41 = OS_LOG_TYPE_DEFAULT;
              v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (v29)
              CFRelease(v29);
            if (dword_1EE2A2AC8)
            {
              LODWORD(v40) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          ++*(_DWORD *)(v9 + 960);
          FigCFDictionarySetInt32();
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(v7, CFSTR("ReasonAdvanceForOverlappedPlayback"));
          playerfig_prepareWorkingItem(v7, 0, 0);
          v33 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 504), 0);
          v34 = CMBaseObjectGetDerivedStorage();
          if (*(_QWORD *)(v9 + 560))
          {
            v35 = v34;
            if (*(_BYTE *)(v34 + 1826))
            {
              *(_QWORD *)&v40 = 0;
              itemfig_getTrackStorage((uint64_t)v33, *(_DWORD *)(v34 + 996), &v40);
              v36 = v40;
              if ((_QWORD)v40 && *(_QWORD *)(v40 + 16))
              {
                if (dword_1EE2A2AC8 >= 2)
                {
                  *(_DWORD *)type = 0;
                  v43 = OS_LOG_TYPE_DEFAULT;
                  v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v38 = *(_DWORD *)type;
                  if (os_log_type_enabled(v37, v43))
                    v39 = v38;
                  else
                    v39 = v38 & 0xFFFFFFFE;
                  if (v39)
                  {
                    v44 = 136315138;
                    v45 = "itemfig_ReachedOverlappedStartTimeGuts";
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                itemfig_updateVolumeOffset((uint64_t)v33);
                itemfig_applyAudioProcessingUnitsToTrack(v35, v36);
                if (!itemfig_applyTrackAudioCurvesToTrack(v36))
                  itemfig_applyItemAudioCurvesToTrack(v35, v36);
                itemfig_applyAdjustTargetLevel((uint64_t)v33);
                itemfig_applyAdjustCompressionProfile((uint64_t)v33);
              }
              *(_BYTE *)(v35 + 1826) = 0;
            }
          }
          MEMORY[0x19402EA24](*(_QWORD *)(v9 + 496));
          playerfig_updatePlaybackStateAndBossRate(v7, 7, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_47;
        }
        if (!dword_1EE2A2AC8)
          goto LABEL_46;
      }
      else if (!dword_1EE2A2AC8)
      {
        goto LABEL_46;
      }
LABEL_45:
      LODWORD(v40) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_46;
    }
  }
LABEL_6:
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
LABEL_10:
  free(a1);
}

void playerfig_cleanupOverlappedOutroComponents(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __CFSet *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef Mutable;
  CFDictionaryRef v13;
  CMTime v14;
  __n128 v15;
  CMTimeEpoch v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = *(__n128 *)MEMORY[0x1E0CA2E18];
  v16 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v4 = *(_QWORD *)(DerivedStorage + 968);
  if (v4)
  {
    if (a2)
      FigPlaybackBossGetScheduledEndTime(v4, &v15);
    else
      FigPlaybackBossGetTime(v4, &v15);
    if (!*(_BYTE *)(DerivedStorage + 976))
      FigPlaybackBossSetRate(*(_QWORD *)(DerivedStorage + 968), 0, 0.0);
    v5 = *(__CFSet **)(DerivedStorage + 984);
    if (v5)
    {
      CFSetRemoveAllValues(v5);
      v6 = *(const void **)(DerivedStorage + 984);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(DerivedStorage + 984) = 0;
      }
    }
    v7 = 0;
    v8 = DerivedStorage + 992;
    do
    {
      v9 = *(const void **)(v8 + v7);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(v8 + v7) = 0;
      }
      v7 += 8;
    }
    while (v7 != 112);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigPlaybackBossInvalidate(*(_QWORD *)(DerivedStorage + 968));
    v10 = *(const void **)(DerivedStorage + 968);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(DerivedStorage + 968) = 0;
    }
    *(_WORD *)(DerivedStorage + 976) = 0;
    *(_DWORD *)(DerivedStorage + 980) = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(__n128 *)&v14.value = v15;
    v14.epoch = v16;
    v13 = CMTimeCopyAsDictionary(&v14, v11);
    FigCFDictionarySetValue();
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v13)
      CFRelease(v13);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void playerfig_OverlappedOutroReachedEnd(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 96), a2, (dispatch_function_t)playerfig_DeferOverlappedOutroReachedEnd_f);
}

void playerfig_OverlappedOutroBossBecameIdle(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const __CFNumber *Value;
  const __CFNumber *v9;
  CFTypeID TypeID;
  int v11;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("OSStatus"));
    if (Value)
    {
      v9 = Value;
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(v9))
      {
        valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
        v11 = valuePtr;
        if (valuePtr)
        {
          *(_BYTE *)(DerivedStorage + 977) = 1;
          *(_DWORD *)(DerivedStorage + 980) = v11;
        }
      }
    }
  }
  CFRetain(a2);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 96), a2, (dispatch_function_t)playerfig_DeferOverlappedOutroBossBecameIdle_f);
}

void playerfig_DeferOverlappedOutroReachedEnd_f(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (v3 = DerivedStorage, *(_BYTE *)DerivedStorage))
  {
    if (!a1)
      return;
    goto LABEL_4;
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  playerfig_cleanupOverlappedOutroComponents(a1, 1);
  MEMORY[0x19402EA24](*(_QWORD *)(v3 + 496));
  if (a1)
LABEL_4:
    CFRelease(a1);
}

void playerfig_DeferOverlappedOutroBossBecameIdle_f(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (v3 = DerivedStorage, *(_BYTE *)DerivedStorage))
  {
    if (!a1)
      return;
    goto LABEL_4;
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (!*(_BYTE *)(v3 + 976))
  {
    FigPlaybackBossGoQuiescent(*(_QWORD *)(v3 + 968));
    *(_BYTE *)(v3 + 976) = 1;
  }
  if (*(_BYTE *)(v3 + 977))
    playerfig_cleanupOverlappedOutroComponents(a1, 0);
  MEMORY[0x19402EA24](*(_QWORD *)(v3 + 496));
  if (a1)
LABEL_4:
    CFRelease(a1);
}

void itemfig_deferredExternalProtectionStatusChanged(uint64_t a1, const void *a2)
{
  itemfig_ExternalProtectionStatusChangedGuts((uint64_t)a2);
  if (a2)
    CFRelease(a2);
}

void itemfig_commitAccessLogEntry(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  void *value;

  value = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 1512)
    || (v5 = CFGetAllocator(a1),
        Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]),
        (*(_QWORD *)(DerivedStorage + 1512) = Mutable) != 0))
  {
    if (!itemfig_createAccessLogEntry((uint64_t)a1, a2, (CFMutableDictionaryRef *)&value))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 1512), value);
      *(_QWORD *)(DerivedStorage + 1672) = *(_QWORD *)(DerivedStorage + 1680);
      *(_QWORD *)(DerivedStorage + 1664) = 0;
      *(_QWORD *)(DerivedStorage + 1616) = *(_QWORD *)(DerivedStorage + 1624);
      *(_QWORD *)(DerivedStorage + 1632) = *(_QWORD *)(DerivedStorage + 1640);
      *(CFAbsoluteTime *)(DerivedStorage + 1520) = CFAbsoluteTimeGetCurrent();
      *(_WORD *)(DerivedStorage + 1688) = 0;
      *(_DWORD *)(DerivedStorage + 1600) = 0;
      *(_QWORD *)(DerivedStorage + 1608) = 0;
      *(_BYTE *)(DerivedStorage + 1690) = 0;
      *(_QWORD *)(DerivedStorage + 1544) = 0;
      *(_QWORD *)(DerivedStorage + 1536) = 0;
      *(_QWORD *)(DerivedStorage + 1656) = 0;
      *(_QWORD *)(DerivedStorage + 1648) = 0;
      *(CFAbsoluteTime *)(DerivedStorage + 1552) = CFAbsoluteTimeGetCurrent();
      CFRelease(value);
    }
  }
}

uint64_t itemfig_createAccessLogEntry(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, _QWORD, CFMutableDictionaryRef *);
  CFAllocatorRef *v10;
  uint64_t v11;
  __CFDictionary *Mutable;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, _QWORD, _QWORD, CMTime *);
  const __CFURL *v15;
  CFMutableDictionaryRef v16;
  CFStringRef v17;
  __CFDictionary *v18;
  const __CFString *v19;
  const void *v20;
  const void *v21;
  const __CFString *v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, CMTime *, _QWORD);
  CFDateRef v28;
  CFDateRef v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  CMTimeValue v32;
  double v33;
  double v34;
  int v35;
  uint64_t v36;
  double v37;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, const __CFString *, _QWORD, void **);
  const void *v45;
  double Seconds;
  double v47;
  double v48;
  double v49;
  double v50;
  CFMutableDictionaryRef v51;
  uint64_t FigBaseObject;
  unsigned int (*v54)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t *);
  CMTime theDict;
  uint64_t valuePtr;
  double v57;
  void *value;
  CFNumberRef number;
  CFMutableDictionaryRef v60;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  number = 0;
  v60 = 0;
  v57 = 0.0;
  value = 0;
  if (!a3)
  {
    v11 = FigSignalErrorAt();
LABEL_117:
    v35 = 0;
    goto LABEL_99;
  }
  v7 = v6;
  if (!*(_QWORD *)(v6 + 128))
  {
    v35 = 0;
    v11 = 4294954513;
    goto LABEL_99;
  }
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v9 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFMutableDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  v10 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v9)
  {
    v11 = v9(CMBaseObject, *MEMORY[0x1E0CA2F38], 0, &v60);
    if (!(_DWORD)v11)
      goto LABEL_21;
  }
  else
  {
    v11 = 4294954514;
  }
  theDict.value = 0;
  Mutable = CFDictionaryCreateMutable(*v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v60 = Mutable;
  if (!Mutable)
  {
    FigSignalErrorAt();
    goto LABEL_117;
  }
  CFDictionaryAddValue(Mutable, CFSTR("s-playback-type"), CFSTR("FILE"));
  v13 = CMByteStreamGetCMBaseObject();
  v14 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v14 && !v14(v13, *MEMORY[0x1E0CA2F98], 0, &theDict))
  {
    v20 = CFDictionaryGetValue((CFDictionaryRef)theDict.value, CFSTR("URL"));
    if (v20)
      CFDictionaryAddValue(v60, CFSTR("uri"), v20);
    v21 = CFDictionaryGetValue((CFDictionaryRef)theDict.value, CFSTR("TotalReadTime"));
    if (v21)
      CFDictionaryAddValue(v60, CFSTR("c-transfer-duration"), v21);
    v22 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)theDict.value, CFSTR("TotalBytesRead"));
    if (!v22)
      goto LABEL_19;
    v17 = v22;
    v18 = v60;
    v19 = CFSTR("bytes");
  }
  else
  {
    v15 = *(const __CFURL **)(v7 + 112);
    if (!v15)
      goto LABEL_19;
    v16 = v60;
    v17 = CFURLGetString(v15);
    v18 = v16;
    v19 = CFSTR("uri");
  }
  CFDictionaryAddValue(v18, v19, v17);
LABEL_19:
  if (theDict.value)
    CFRelease((CFTypeRef)theDict.value);
LABEL_21:
  v23 = CMByteStreamGetCMBaseObject();
  v24 = *(void (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v24)
    v24(v23, *MEMORY[0x1E0CA2070], 0, &number);
  v25 = *(unsigned int *)(v7 + 1000);
  if ((_DWORD)v25)
  {
    theDict.value = 0;
    valuePtr = 0;
    v26 = *(_QWORD *)(v7 + 968);
    v27 = *(unsigned int (**)(uint64_t, uint64_t, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
    if (v27)
    {
      if (!v27(v26, v25, &theDict, 0))
      {
        FigBaseObject = FigTrackReaderGetFigBaseObject(theDict.value);
        v54 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v54)
        {
          if (!v54(FigBaseObject, CFSTR("NominalFrameRate"), *v10, &valuePtr) && valuePtr)
          {
            CFDictionarySetValue(v60, CFSTR("c-nominal-framerate"), (const void *)valuePtr);
            CFRelease((CFTypeRef)valuePtr);
          }
        }
      }
    }
    if (theDict.value)
      CFRelease((CFTypeRef)theDict.value);
  }
  v28 = CFDateCreate(*v10, *(CFAbsoluteTime *)(v7 + 1520));
  if (!v28)
  {
    v35 = 0;
    v11 = 4294954434;
    goto LABEL_99;
  }
  v29 = v28;
  CFDictionarySetValue(v60, CFSTR("date"), v28);
  CFRelease(v29);
  v30 = (const __CFNumber *)CFDictionaryGetValue(v60, CFSTR("c-transfer-duration"));
  if (v30)
    CFNumberGetValue(v30, kCFNumberDoubleType, (void *)(v7 + 1640));
  v31 = (const __CFNumber *)CFDictionaryGetValue(v60, CFSTR("bytes"));
  if (v31)
    CFNumberGetValue(v31, kCFNumberSInt64Type, (void *)(v7 + 1624));
  CFDictionaryRemoveValue(v60, CFSTR("c-transfer-duration"));
  CFDictionaryRemoveValue(v60, CFSTR("bytes"));
  v32 = *(_QWORD *)(v7 + 1624) - *(_QWORD *)(v7 + 1616);
  if (v32 < 0)
  {
    v32 = 0;
    goto LABEL_38;
  }
  v33 = *(double *)(v7 + 1640) - *(double *)(v7 + 1632);
  if (v33 < 0.0)
  {
LABEL_38:
    v35 = 0;
    goto LABEL_39;
  }
  if (v33 <= 0.0)
  {
    v35 = 0;
    v34 = 0.0;
  }
  else
  {
    v34 = (double)v32 * 8.0 / v33;
    v35 = 1;
  }
  *(double *)&theDict.value = v34;
  v11 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-observed-bitrate"), kCFNumberDoubleType, &theDict);
  if ((_DWORD)v11)
    goto LABEL_99;
LABEL_39:
  theDict.value = v32;
  v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("bytes"), kCFNumberSInt64Type, &theDict);
  if ((_DWORD)v36)
    goto LABEL_95;
  if (*(_BYTE *)(v7 + 1690))
  {
    theDict.value = *(_QWORD *)(v7 + 1560);
    v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-startup-time"), kCFNumberDoubleType, &theDict);
    v35 = 1;
    if ((_DWORD)v36)
      goto LABEL_95;
  }
  v37 = *(double *)(v7 + 1568);
  if (FigCFDictionaryGetDoubleIfPresent())
  {
    if (v57 < v37 && v57 > 0.0)
      v37 = v57;
    v57 = v57 - v37;
    FigCFDictionarySetDouble();
  }
  if (FigCFDictionaryGetDoubleIfPresent())
  {
    v57 = v57 - v37;
    FigCFDictionarySetDouble();
  }
  v39 = *(double *)(v7 + 1568);
  if (v39 != 0.0)
  {
    v57 = v39 - v37;
    *(double *)&theDict.value = v39 - v37;
    v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-playback-setup-ts"), kCFNumberDoubleType, &theDict);
    v35 = 1;
    if ((_DWORD)v36)
      goto LABEL_95;
  }
  v40 = *(double *)(v7 + 1576);
  if (v40 != 0.0)
  {
    v57 = v40 - v37;
    *(double *)&theDict.value = v40 - v37;
    v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-basics-ready-ts"), kCFNumberDoubleType, &theDict);
    v35 = 1;
    if ((_DWORD)v36)
      goto LABEL_95;
  }
  v41 = *(double *)(v7 + 1584);
  if (v41 != 0.0)
  {
    v57 = v41 - v37;
    *(double *)&theDict.value = v41 - v37;
    v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-rp-setup-ts"), kCFNumberDoubleType, &theDict);
    v35 = 1;
    if ((_DWORD)v36)
      goto LABEL_95;
  }
  v42 = *(double *)(v7 + 1592);
  if (v42 != 0.0)
  {
    v57 = v42 - v37;
    *(double *)&theDict.value = v42 - v37;
    v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-playback-ready-ts"), kCFNumberDoubleType, &theDict);
    v35 = 1;
    if ((_DWORD)v36)
      goto LABEL_95;
  }
  v43 = CMByteStreamGetCMBaseObject();
  v44 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v44 && !v44(v43, CFSTR("CRABS_CacheIsDiskBacked"), 0, &value) && value)
  {
    CFDictionarySetValue(v60, CFSTR("c-disk-backed"), value);
    CFRelease(value);
    v35 = 1;
  }
  if (*(double *)(v7 + 1648) > 0.0)
  {
    theDict.value = *(_QWORD *)(v7 + 1648);
    v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-duration-at-item-preparation"), kCFNumberDoubleType, &theDict);
    if ((_DWORD)v36)
      goto LABEL_95;
    v35 = 1;
  }
  if (*(double *)(v7 + 1656) > 0.0)
  {
    theDict.value = *(_QWORD *)(v7 + 1656);
    v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-duration-at-likely-to-keep-up"), kCFNumberDoubleType, &theDict);
    if (!(_DWORD)v36)
    {
      v35 = 1;
      goto LABEL_69;
    }
LABEL_95:
    v11 = v36;
    goto LABEL_99;
  }
LABEL_69:
  v45 = *(const void **)(v7 + 1280);
  if (v45)
  {
    CFDictionarySetValue(v60, CFSTR("c-service-identifier"), v45);
    v35 = 1;
  }
  if ((*(_BYTE *)(v7 + 1188) & 1) != 0)
  {
    if (number)
    {
      valuePtr = 0;
      CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
      if (valuePtr >= 1)
      {
        theDict = *(CMTime *)(v7 + 1176);
        Seconds = CMTimeGetSeconds(&theDict);
        *(double *)&theDict.value = (double)valuePtr / Seconds * 8.0;
        v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("sc-indicated-bitrate"), kCFNumberDoubleType, &theDict);
        if ((_DWORD)v36)
          goto LABEL_95;
        v47 = (double)v32 / (double)valuePtr;
        v48 = 1.0;
        if (v47 <= 1.0)
        {
          v48 = (double)v32 / (double)valuePtr;
          if (v47 < 0.0)
            v48 = 0.0;
        }
        v49 = Seconds * v48;
        if (v49 > 0.0)
          v35 = 1;
        *(double *)&theDict.value = v49;
        v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-duration-downloaded"), kCFNumberDoubleType, &theDict);
        if ((_DWORD)v36)
          goto LABEL_95;
      }
    }
  }
  if (*(_BYTE *)(v7 + 1688))
  {
    v50 = *(double *)(v7 + 1536);
    if (*(double *)(v7 + 1544) != 0.0)
      v50 = v50 + (CFAbsoluteTimeGetCurrent() - *(double *)(v7 + 1544)) * fabsf(*(float *)(DerivedStorage + 48));
    if (v50 > 0.0)
      v35 = 1;
    *(double *)&theDict.value = v50;
    v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-duration-watched"), kCFNumberDoubleType, &theDict);
    if (!(_DWORD)v36)
    {
      if (!*(_BYTE *)(v7 + 1689)
        || (theDict.value = *(_QWORD *)(v7 + 1528),
            v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-start-time"), kCFNumberDoubleType, &theDict),
            v35 = 1,
            !(_DWORD)v36))
      {
        itemfig_getFrameDropCountFromAllVideoPipelines(a2, (_QWORD *)(v7 + 1680));
        if ((uint64_t)(*(_QWORD *)(v7 + 1680) + *(_QWORD *)(v7 + 1664) - *(_QWORD *)(v7 + 1672)) > 0)
          v35 = 1;
        theDict.value = *(_QWORD *)(v7 + 1680) + *(_QWORD *)(v7 + 1664) - *(_QWORD *)(v7 + 1672);
        v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-frames-dropped"), kCFNumberSInt64Type, &theDict);
        if (!(_DWORD)v36)
        {
          if (*(uint64_t *)(v7 + 1608) > 0)
            v35 = 1;
          theDict.value = *(_QWORD *)(v7 + 1608);
          v36 = itemfig_addCFNumberToAccessLogEntry(v60, CFSTR("c-stalls"), kCFNumberSInt64Type, &theDict);
        }
      }
    }
    goto LABEL_95;
  }
  v11 = 0;
LABEL_99:
  if (number)
    CFRelease(number);
  if (!(_DWORD)v11)
  {
    v51 = v60;
    if (v35)
    {
      v11 = 0;
      goto LABEL_106;
    }
    v11 = 4294954513;
    if (!v60)
      goto LABEL_106;
    goto LABEL_103;
  }
  v51 = v60;
  if (v60)
  {
LABEL_103:
    CFRelease(v51);
    v51 = 0;
  }
LABEL_106:
  *a3 = v51;
  return v11;
}

uint64_t itemfig_addCFNumberToAccessLogEntry(__CFDictionary *a1, const void *a2, CFNumberType theType, void *valuePtr)
{
  CFNumberRef v6;
  CFNumberRef v7;

  v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theType, valuePtr);
  if (!v6)
    return 4294954434;
  v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

void itemfig_stashTransitionImageQueuesAndSlots()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  const __CFArray *v4;
  const __CFArray *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v2 = CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    v3 = v2;
    v4 = *(const __CFArray **)(DerivedStorage + 1112);
    if (v4 && CFArrayGetCount(v4) >= 1)
    {
      if (*(_BYTE *)(DerivedStorage + 1824) || *(_QWORD *)(v3 + 824))
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1120));
        v5 = *(const __CFArray **)(DerivedStorage + 1112);
        *(_QWORD *)(DerivedStorage + 1112) = 0;
        v6 = *(const void **)(DerivedStorage + 1104);
        if (v6)
        {
          CFRelease(v6);
          *(_QWORD *)(DerivedStorage + 1104) = 0;
        }
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1120));
        FPSupport_DeleteCASlotsInArray(v5);
        if (v5)
          CFRelease(v5);
      }
      else
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1120));
        *(_OWORD *)(v3 + 824) = *(_OWORD *)(DerivedStorage + 1104);
        *(_OWORD *)(DerivedStorage + 1104) = 0u;
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1120));
      }
    }
    CFRelease(v1);
  }
}

void itemfig_clearTrackImageQueueTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  CFTypeRef cf;

  cf = 0;
  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    FigImageQueueTableCopyFigImageQueueArray(v4, (uint64_t *)&cf);
    if (cf)
    {
      itemfig_removeImageQueueListenersForObsoleteImageQueues(a1, (const __CFArray *)cf, 0);
      FigImageQueueTableRemoveAllValues(*(_QWORD *)(a2 + 48));
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
  }
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(a2 + 224);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 224), i);
    FigImageQueueTableCopyFigImageQueueArray((uint64_t)ValueAtIndex, (uint64_t *)&cf);
    if (cf)
    {
      itemfig_removeImageQueueListenersForObsoleteImageQueues(a1, (const __CFArray *)cf, 0);
      FigImageQueueTableRemoveAllValues((uint64_t)ValueAtIndex);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
  }
  if (cf)
    CFRelease(cf);
}

void itemfig_removeImageQueueListenersForObsoleteImageQueues(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  _BYTE *DerivedStorage;
  uint64_t Count;
  uint64_t v7;
  const void *v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  CFRange v13;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (a3)
    Count = CFArrayGetCount(a3);
  else
    Count = 0;
  if (!*DerivedStorage)
  {
    v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    v8 = (const void *)v7;
    if (a2 && v7)
    {
      v9 = CFArrayGetCount(a2);
      if (v9 < 1)
      {
LABEL_14:
        CFRelease(v8);
        return;
      }
      v10 = v9;
      for (i = 0; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
        if (Count >= 1)
        {
          v13.location = 0;
          v13.length = Count;
          if (CFArrayContainsValue(a3, v13, ValueAtIndex))
            continue;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
    }
    if (!v8)
      return;
    goto LABEL_14;
  }
}

void itemfig_DeferredFirstVideoFrameEnqueued(uint64_t a1, const __CFString *a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  CFTypeRef cf;
  _QWORD v14[18];

  v14[16] = *MEMORY[0x1E0C80C00];
  cf = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return;
  v4 = DerivedStorage;
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    return;
  v6 = (const void *)v5;
  v7 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(v7 + 496));
  if (*((_QWORD *)v4 + 82))
  {
    v9 = *((_QWORD *)v4 + 103);
  }
  else
  {
    v12 = *((_DWORD *)v4 + 250);
    if (!v12)
      goto LABEL_8;
    v14[0] = 0;
    if (itemfig_getTrackStorage((uint64_t)a2, v12, v14) || !v14[0])
      goto LABEL_8;
    v9 = *(_QWORD *)(v14[0] + 48);
  }
  FigImageQueueTableCopyFigImageQueueArray(v9, (uint64_t *)&cf);
LABEL_8:
  v10 = FigCFArrayContainsValue();
  if (v10 || !dword_1EE2A2AC8)
  {
    if (v10 && !v4[1824])
      itemfig_handleReadyToDisplayVideoLatch((uint64_t)a2, 0, 0);
  }
  else
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v4[876])
    playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v6, a2, MEMORY[0x1E0CA2E18]);
  playerfig_scheduleVideoSlotAndVideoTargetConfigurationSwitchAndPossiblyStartBossForNextItem(v6);
  MEMORY[0x19402EA24](*(_QWORD *)(v7 + 496));
  CFRelease(v6);
  if (cf)
    CFRelease(cf);
}

void playerfig_DeferredSynchronousFrameEnqueued(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *v4;
  CFIndex Count;
  void *v6;
  CFIndex i;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 224));
    v4 = *(const __CFArray **)(v3 + 208);
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      v6 = (void *)MEMORY[0x19403137C]();
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
          objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 208), i), "setContentsChanged");
      }
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
      objc_autoreleasePoolPop(v6);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v3 + 224));
  }
  CFRelease(a1);
}

void itemfig_VideoCompositionProcessorErrorOccurred(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CFDictionary *FailedNotificationPayloadWithContentStream)
{
  uint64_t DerivedStorage;
  CFTypeID v8;
  __CFDictionary *v9;
  __CFDictionary *v10;
  CFTypeID v11;
  __CFError *Value;
  uint64_t v13;
  const void *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int valuePtr[32];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FailedNotificationPayloadWithContentStream)
  {
    v8 = CFGetTypeID(FailedNotificationPayloadWithContentStream);
    if (v8 == CFDictionaryGetTypeID()
      && (v9 = (__CFDictionary *)CFDictionaryGetValue(FailedNotificationPayloadWithContentStream, CFSTR("VideoCompositionProcessor_Result")), (v10 = v9) != 0)&& (v11 = CFGetTypeID(v9), v11 == CFNumberGetTypeID()))
    {
      FailedNotificationPayloadWithContentStream = itemfig_createFailedNotificationPayloadWithContentStream(*(CFTypeRef *)(DerivedStorage + 128), v10);
      Value = (__CFError *)CFDictionaryGetValue(FailedNotificationPayloadWithContentStream, CFSTR("CFError"));
      valuePtr[0] = 0;
      CFNumberGetValue(v10, kCFNumberSInt32Type, valuePtr);
      itemfig_reportingAgentReportError((uint64_t)a2, Value, CFSTR("CoreMediaErrorDomain"), CFSTR("Failed to play to end due to video composition error"), valuePtr[0]);
    }
    else
    {
      FailedNotificationPayloadWithContentStream = 0;
    }
  }
  v13 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v13)
  {
    v14 = (const void *)v13;
    CMBaseObjectGetDerivedStorage();
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFRetain(v14);
    if (a2)
      CFRetain(a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
    CFRelease(v14);
  }
  if (FailedNotificationPayloadWithContentStream)
    CFRelease(FailedNotificationPayloadWithContentStream);
}

void itemfig_handleAIMEDataChannelResourceProcessingStateChanged()
{
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetInt32IfPresent();
}

uint64_t itemfig_getPlaythroughPrediction(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 616));
    v2 = *(_QWORD *)(DerivedStorage + 600);
    if (v2)
    {
      v6 = 0;
      if (FigPlayabilityMonitorGetPlaythroughInfo(v2, &v6, 0, 0))
        goto LABEL_10;
      v3 = v6;
      if (v6 - 2 < 2)
      {
        if (*(_DWORD *)(DerivedStorage + 1408) == 1)
          v3 = 3;
        else
          v3 = 2;
        goto LABEL_12;
      }
      if (!v6)
        goto LABEL_11;
      if (v6 != 1)
      {
LABEL_10:
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_11:
        v3 = 0;
      }
    }
    else
    {
      v3 = *(_BYTE *)(DerivedStorage + 1266) != 0;
    }
LABEL_12:
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 616));
    return v3;
  }
  return 0;
}

uint64_t playerfig_getNextPlaybackState(uint64_t a1, float a2, uint64_t a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned int a9, int *a10, _BYTE *a11, BOOL *a12, float *a13)
{
  BOOL *v13;
  _BOOL4 v14;
  unsigned int v15;
  uint64_t v18;
  uint64_t *v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  BOOL v26;
  BOOL v27;
  int v28;
  BOOL v31;
  NSObject *v32;
  NSObject *v34;
  NSObject *v35;
  int v36;
  int v37;
  int v38;
  int v40;
  BOOL v41;
  unsigned int v42;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v13 = a12;
  v47 = *MEMORY[0x1E0C80C00];
  v14 = a4 == 4;
  if (!a10)
    return FigSignalErrorAt();
  v15 = a8;
  v18 = a1;
  v40 = ((a5 != 0) | a8) & v14;
  v42 = (a8 >> 2) & 1;
  v19 = &sFigCDSNodeProtocolID;
  if (dword_1EE2A2AC8 >= 2)
  {
    v36 = a6;
    v37 = a7;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v18 = a1;
    v19 = &sFigCDSNodeProtocolID;
    a7 = v37;
    a6 = v36;
  }
  if (a2 != 0.0)
  {
    if (!a6)
    {
      if (dword_1EE2A2AC8 >= 2)
      {
        v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        LOBYTE(v15) = a8;
      }
      v41 = 0;
      *a11 = 0;
      v21 = 3;
      goto LABEL_57;
    }
    if ((v15 & 2) != 0)
    {
      v21 = 4;
    }
    else if ((v15 & 1) != 0)
    {
      v21 = 2;
    }
    else
    {
      v21 = 4;
      if (a4 != 4 && (v15 & 4) == 0)
      {
        v38 = a7;
        if (a9 >= 4)
        {
          v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v21 = 2;
          v15 = a8;
          v19 = &sFigCDSNodeProtocolID;
          v13 = a12;
          a7 = v38;
        }
        else
        {
          v21 = dword_1932F7770[a9];
        }
        if (dword_1EE2A2AC8 < 2)
        {
          v18 = a1;
        }
        else
        {
          v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v15 = a8;
          v18 = a1;
          v19 = &sFigCDSNodeProtocolID;
          a7 = v38;
        }
      }
    }
    *a11 = 0;
    v26 = a4 == 3 || a4 == 0;
    if (v21 == 4 && (!a7 ? (v27 = a4 == 4) : (v27 = 1), !v27 || ((v15 >> 3) & 1) != 0))
    {
      v45 = *MEMORY[0x1E0CA2E18];
      v46 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      playerfig_performStartupTasksForEvents(v18, (v26 || (v15 & 8) != 0) | 4, v42, 0, &v45);
    }
    else
    {
      if ((v15 & 8) != 0 || a4 == 3 || !a4)
      {
        v45 = *MEMORY[0x1E0CA2E18];
        v46 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        playerfig_performStartupTasksForEvents(v18, 1, v42, 0, &v45);
      }
      else if (!a7)
      {
        goto LABEL_44;
      }
      if (v21 != 4)
      {
LABEL_44:
        v28 = v40;
        goto LABEL_45;
      }
    }
    LODWORD(v45) = 0;
    if (playerfig_isWaitingForAnyStartupTask(v18, &v45))
    {
      v21 = v45;
      *a11 = 1;
      v28 = v14;
LABEL_45:
      v31 = a4 != 4 && v21 == 4 || v28 != 0;
      v41 = v31;
      goto LABEL_57;
    }
    v21 = 4;
    goto LABEL_44;
  }
  if (dword_1EE2A2AC8 >= 2)
  {
    v22 = a6;
    v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    LOBYTE(v15) = a8;
    v19 = &sFigCDSNodeProtocolID;
    a6 = v22;
  }
  *a11 = 0;
  v21 = 0;
  if (a6)
    goto LABEL_44;
  v41 = 0;
LABEL_57:
  if (v15 & 1 | (v21 != 4))
    a2 = 0.0;
  if (*((_DWORD *)v19 + 690))
  {
    v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *a10 = v21;
  if (v13)
    *v13 = v41;
  if (a13)
    *a13 = a2;
  return 0;
}

uint64_t playerfig_enterPlaybackState(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 52) != a2)
  {
    *(_DWORD *)(DerivedStorage + 52) = a2;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (Mutable)
      CFRelease(Mutable);
    playerfig_updateStartHostTimeEstimatesOfAllItems(a1);
  }
  return 0;
}

uint64_t playerfig_setBossRateWithFade(const void *a1, int a2, CMTime *a3, CMTime *a4, CMTime *a5, float a6, float a7)
{
  uint64_t DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float Seconds;
  uint64_t v18;
  float v19;
  float v20;
  os_log_type_t type;
  int v23;
  CMTime v24;
  CMTime rhs;
  CMTime time;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v24, 0, sizeof(v24));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v24, HostTimeClock);
  if (dword_1EE2A2AC8)
  {
    v23 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a6 == 0.0)
  {
    Seconds = 0.0;
    if ((a3->flags & 0x1D) == 1)
    {
      time = *a3;
      Seconds = CMTimeGetSeconds(&time);
    }
    playerfig_applySoftwareVolume((uint64_t)a1, CFSTR("SoftwareVolume1"), 1, 0.0, Seconds);
    goto LABEL_7;
  }
  if (a7 != 0.0)
  {
LABEL_7:
    time = *a4;
    rhs = *a5;
    return playerfig_setBossRateAndAnchorTime(a1, a2, (__int128 *)&time.value, (__int128 *)&rhs.value, a6);
  }
  v19 = 0.0;
  if ((a3->flags & 0x1D) == 1)
  {
    time = *a3;
    v19 = CMTimeGetSeconds(&time);
  }
  playerfig_applySoftwareVolume((uint64_t)a1, CFSTR("SoftwareVolume1"), 1, 0.0, 0.0);
  v20 = 1.0;
  if (*(_BYTE *)(DerivedStorage + 773))
    v20 = 0.0;
  playerfig_applySoftwareVolume((uint64_t)a1, CFSTR("SoftwareVolume5"), 1, v20, 0.0);
  time = *a4;
  rhs = *a5;
  v18 = playerfig_setBossRateAndAnchorTime(a1, a2, (__int128 *)&time.value, (__int128 *)&rhs.value, a6);
  if (*(_BYTE *)(DerivedStorage + 772))
    playerfig_applySoftwareVolume((uint64_t)a1, CFSTR("SoftwareVolume2"), 1, *(float *)(DerivedStorage + 768), 0.0);
  playerfig_applySoftwareVolume((uint64_t)a1, CFSTR("SoftwareVolume1"), 0, *(float *)(DerivedStorage + 764), v19);
  return v18;
}

uint64_t playerfig_performStartupTasksForEvents(uint64_t a1, int a2, uint64_t a3, int a4, __int128 *a5)
{
  uint64_t DerivedStorage;
  CFIndex v7;
  uint64_t v8;
  const __CFArray *Count;
  const void *ValueAtIndex;
  const __CFArray *v11;
  const void *v12;
  __CFDictionary *NotificationPayloadForProperties;
  int v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v16;
  CFTypeRef cf;
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8 = 0;
  while (1)
  {
    Count = *(const __CFArray **)(DerivedStorage + 1112);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v7 >= (uint64_t)Count)
      return v8;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1112), v7);
    v22 = 0;
    cf = 0;
    v11 = *(const __CFArray **)(DerivedStorage + 504);
    if (v11 && CFArrayGetCount(v11) >= 1)
      v12 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    else
      v12 = 0;
    FigPlayerStartupTaskCopyRequiredParameters((uint64_t)ValueAtIndex, (__CFArray **)&cf);
    NotificationPayloadForProperties = FPSupport_CreateNotificationPayloadForProperties(a1, (uint64_t)v12, (CFArrayRef)cf);
    v14 = FigCFArrayContainsValue();
    if (a4 && v14)
      FigCFDictionarySetInt32();
    if (FigCFArrayContainsValue() && (*((_BYTE *)a5 + 12) & 1) != 0)
    {
      v25 = *a5;
      v26 = *((_QWORD *)a5 + 2);
      FigCFDictionarySetCMTime();
    }
    if (FigCFArrayContainsValue())
      FigCFDictionarySetFloat32();
    if (FigCFArrayContainsValue())
      FigCFDictionarySetFloat32();
    if (FigCFArrayContainsValue())
    {
      v25 = *MEMORY[0x1E0CA2E18];
      v26 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      itemfig_GetCurrentTime((uint64_t)v12, (uint64_t)&v25);
      v23 = v25;
      v24 = v26;
      FigCFDictionarySetCMTime();
    }
    v8 = FigPlayerStartupTaskNotifyOfEvents((uint64_t)ValueAtIndex, a2, (uint64_t)NotificationPayloadForProperties, (BOOL *)&v22);
    if ((_DWORD)v8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v22 = 1;
    }
    if (cf)
      CFRelease(cf);
    if (NotificationPayloadForProperties)
      CFRelease(NotificationPayloadForProperties);
    if (v22)
    {
      if (!dword_1EE2A2AC8)
        goto LABEL_32;
    }
    else if (!dword_1EE2A2AC8)
    {
      goto LABEL_32;
    }
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_32:
    ++v7;
  }
}

uint64_t playerfig_isWaitingForAnyStartupTask(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  CFIndex v4;
  const __CFArray *Count;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = 0;
  while (1)
  {
    Count = *(const __CFArray **)(DerivedStorage + 1112);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v4 >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1112), v4++);
    if (!FigPlayerStartupTaskDoesAllowStartup((uint64_t)ValueAtIndex))
    {
      *a2 = FigPlayerStartupTaskGetWaitingState((uint64_t)ValueAtIndex);
      return 1;
    }
  }
  return 0;
}

void playerfig_updateStartHostTimeEstimatesOfAllItems(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v3 = *(const __CFArray **)(DerivedStorage + 504);
  if (v3)
  {
    if (CFArrayGetCount(v3) >= 1)
      playerfig_updateStartHostTimeEstimatesOfItemAtIndexAndFollowingItems(a1, 0);
  }
  JUMPOUT(0x19402EA24);
}

uint64_t playerfig_setBossRateAndAnchorTime(const void *a1, int a2, __int128 *a3, __int128 *a4, float a5)
{
  uint64_t DerivedStorage;
  uint64_t matched;
  uint64_t v12;
  uint64_t v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *ValueAtIndex;
  void (*v17)(const void *, __int128 *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  NSObject *v26;
  unsigned int v27;
  unsigned int v28;
  float v29;
  uint64_t v30;
  uint64_t v32;
  os_log_type_t type;
  unsigned int v34;
  CMTime v35;
  CMTime time;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v12 = DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (*(_QWORD *)(v12 + 512))
    v13 = CMBaseObjectGetDerivedStorage();
  else
    v13 = 0;
  if (*(float *)(v12 + 48) != a5 && *(_DWORD *)(v12 + 52) == 4 && dword_1EE2A2AC8 != 0)
  {
    v34 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(v12 + 544))
  {
    *(_BYTE *)(v12 + 544) = 0;
    playerfig_postDeferredPrerollWasCancelledNotification((uint64_t)a1, *(_DWORD *)(v12 + 552));
  }
  if ((*((_BYTE *)a3 + 12) & 1) == 0
    && (*((_DWORD *)a4 + 3) & 0x1D) == 1
    && CFArrayGetCount(*(CFArrayRef *)(v12 + 504)) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 504), 0);
    v17 = *(void (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v17)
      v17(ValueAtIndex, a3);
    if ((*((_BYTE *)a3 + 12) & 1) == 0)
    {
      v18 = MEMORY[0x1E0CA2E68];
      *a3 = *MEMORY[0x1E0CA2E68];
      *((_QWORD *)a3 + 2) = *(_QWORD *)(v18 + 16);
    }
  }
  if (CFArrayGetCount(*(CFArrayRef *)(v12 + 504)) >= 1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 504), 0);
    v19 = CMBaseObjectGetDerivedStorage();
    v20 = v19;
    if (*(float *)(v12 + 48) == 0.0)
    {
      itemfig_invalidateRampOutTimer();
    }
    else if (FigPlaybackBossGetRate(*(_QWORD *)(v19 + 352)) == 0.0)
    {
      *(_BYTE *)(v20 + 1312) = 0;
    }
    if ((*((_DWORD *)a4 + 3) & 0x1D) == 1)
    {
      if (!dword_1EE2A2AC8)
      {
LABEL_34:
        v23 = *a3;
        *(_QWORD *)(v20 + 564) = *((_QWORD *)a3 + 2);
        *(_OWORD *)(v20 + 548) = v23;
        v24 = *a4;
        *(_QWORD *)(v20 + 588) = *((_QWORD *)a4 + 2);
        *(_OWORD *)(v20 + 572) = v24;
        goto LABEL_35;
      }
      v32 = v13;
      v34 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      if (!v13 || (*(_DWORD *)(v13 + 584) & 0x1D) != 1 || !dword_1EE2A2AC8)
        goto LABEL_34;
      v32 = v13;
      v34 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v13 = v32;
    goto LABEL_34;
  }
LABEL_35:
  playerfig_cleanupOverlappedOutroComponents((uint64_t)a1, 0);
  v25 = playerfig_isCurrentItemQuiescent();
  if (v25)
  {
    if (dword_1EE2A2AC8)
    {
      v34 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v27 = v34;
      if (os_log_type_enabled(v26, type))
        v28 = v27;
      else
        v28 = v27 & 0xFFFFFFFE;
      if (v28)
      {
        LODWORD(v35.value) = 136315138;
        *(CMTimeValue *)((char *)&v35.value + 4) = (CMTimeValue)"playerfig_setBossRateAndAnchorTime";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19402EA24](*(_QWORD *)(v12 + 496));
    time = *(CMTime *)a3;
    v35 = *(CMTime *)a4;
    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&time, (uint64_t)&v35, 0);
    matched = 0;
  }
  else
  {
    if (!*(_QWORD *)(v12 + 512))
    {
      matched = 0;
LABEL_56:
      MEMORY[0x19402EA24](*(_QWORD *)(v12 + 496));
      return matched;
    }
    if (*(_QWORD *)(v13 + 352))
    {
      if (*(_BYTE *)(v13 + 1697))
      {
        v29 = 0.0;
        if (*(_DWORD *)(v12 + 52) == 4)
          v29 = *(float *)(v12 + 48);
        itemfig_updateAccessLogEntry(v29);
      }
      itemfig_reportingAgentReportPlayStartMovieTime();
      itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(_QWORD *)(v12 + 512), 0);
      v30 = *(_QWORD *)(v12 + 512);
      time = *(CMTime *)a3;
      v35 = *(CMTime *)a4;
      matched = itemfig_matchBossRateToPlayerRateAndPlaybackState(v30, &time, &v35);
      LOBYTE(time.value) = *(float *)(v12 + 48) != 0.0;
      FigCFArrayApplyFunction();
    }
    else
    {
      matched = 0;
    }
    if (*(_DWORD *)(v12 + 52) == 4 && *(float *)(v12 + 48) != 0.0)
      itemfig_ReportAudioPlaybackThroughFigLog(*(_QWORD *)(v12 + 512));
  }
  if (*(_QWORD *)(v12 + 512))
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1996) = a2;
  if (!v25)
    goto LABEL_56;
  return matched;
}

const __CFArray *playerfig_isCurrentItemQuiescent()
{
  uint64_t DerivedStorage;
  const __CFArray *result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(const __CFArray **)(DerivedStorage + 504);
  if (result)
  {
    if (CFArrayGetCount(result) < 1)
    {
      return 0;
    }
    else if (*(_QWORD *)(DerivedStorage + 512))
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      return (const __CFArray *)(*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 480) != 0);
    }
    else
    {
      return (const __CFArray *)1;
    }
  }
  return result;
}

uint64_t playerfig_FigImageQueueSetAsyncApply(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t, uint64_t);

  v3 = *a2;
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 40);
  if (v5)
    return v5(a1, v3);
  return result;
}

uint64_t playerfig_setRateForReason(const void *a1, unsigned int a2, float a3)
{
  uint64_t DerivedStorage;
  uint64_t *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime *v9;
  void *ValueAtIndex;
  uint64_t v11;
  float v12;
  __n128 v13;
  uint64_t v14;
  int Duration;
  float v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  OpaqueCMTimebase *v20;
  CMTime *v21;
  const void *v22;
  float v23;
  unsigned int v24;
  uint64_t v25;
  NSObject *v26;
  unsigned int v27;
  unsigned int v28;
  const char *v29;
  NSObject *v31;
  CMTime v32;
  CMTime v33;
  os_log_type_t type;
  unsigned int v35;
  CMTime v36;
  const char *v37;
  __int16 v38;
  uint64_t v39;
  CMTime time;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = &sFigCDSNodeProtocolID;
  if (dword_1EE2A2AC8)
  {
    v35 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = &sFigCDSNodeProtocolID;
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v9 = (CMTime *)MEMORY[0x1E0CA2E18];
  if (a3 <= 0.0 || *(float *)(DerivedStorage + 48) != 0.0 || CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
  {
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
LABEL_17:
    time = *v9;
    v36 = time;
    v22 = a1;
    v23 = a3;
    v24 = a2;
    v21 = v9;
    goto LABEL_18;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = *(float *)(v11 + 1292);
  v13.n128_u32[0] = *(_DWORD *)(v11 + 1296);
  if (v13.n128_f32[0] > 0.0)
  {
    v14 = v11;
    v36 = *v9;
    Duration = itemfig_GetDuration((uint64_t)ValueAtIndex, (uint64_t)&v36);
    time = v36;
    v13.n128_f64[0] = CMTimeGetSeconds(&time);
    if (Duration)
      goto LABEL_11;
    v16 = *(float *)(v14 + 1296);
    if (v13.n128_f64[0] <= (float)(*(float *)(v14 + 1292) + v16))
      goto LABEL_11;
    CMTimeMakeWithSeconds(&v33, v13.n128_f64[0] - v16 + 0.05, 1000);
    v17 = CMBaseObjectGetDerivedStorage();
    v18 = v17;
    v19 = *(NSObject **)(v17 + 1304);
    if (!v19)
    {
      v31 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v17 + 104));
      *(_QWORD *)(v18 + 1304) = v31;
      if (!v31)
      {
        FigSignalErrorAt();
        goto LABEL_11;
      }
      dispatch_set_context(v31, ValueAtIndex);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v18 + 1304), (dispatch_function_t)itemfig_rampOut);
      *(_QWORD *)(v18 + 2024) = voucher_copy();
      dispatch_resume(*(dispatch_object_t *)(v18 + 1304));
      if (CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v18 + 328), *(dispatch_source_t *)(v18 + 1304)))
      {
LABEL_11:
        v7 = &sFigCDSNodeProtocolID;
        goto LABEL_12;
      }
      v19 = *(NSObject **)(v18 + 1304);
    }
    v20 = *(OpaqueCMTimebase **)(v18 + 328);
    time = v33;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v20, v19, &time, 0);
    goto LABEL_11;
  }
LABEL_12:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496), v13);
  if (v12 <= 0.0 || a3 == 0.0 || *(float *)(DerivedStorage + 48) != 0.0)
    goto LABEL_17;
  CMTimeMakeWithSeconds(&v32, v12, 1000);
  time = *v9;
  v36 = time;
  v21 = &v32;
  v22 = a1;
  v23 = a3;
  v24 = a2;
LABEL_18:
  v25 = playerfig_setRateGuts(v22, v24, v21, (uint64_t)&time, (uint64_t)&v36, v23);
  if ((_DWORD)v25 && *((_DWORD *)v7 + 690))
  {
    v35 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v27 = v35;
    if (os_log_type_enabled(v26, type))
      v28 = v27;
    else
      v28 = v27 & 0xFFFFFFFE;
    if (v28)
    {
      if (a1)
        v29 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
      else
        v29 = "";
      LODWORD(v36.value) = 136315906;
      *(CMTimeValue *)((char *)&v36.value + 4) = (CMTimeValue)"playerfig_setRateForReason";
      LOWORD(v36.flags) = 2048;
      *(_QWORD *)((char *)&v36.flags + 2) = a1;
      HIWORD(v36.epoch) = 2082;
      v37 = v29;
      v38 = 1024;
      LODWORD(v39) = v25;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v25;
}

void itemfig_rampOut(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  id v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    v5 = *(id *)(DerivedStorage + 2024);
    voucher_adopt();
    *(_BYTE *)(DerivedStorage + 1312) = 1;
    playerfig_applySoftwareVolume((uint64_t)v4, CFSTR("SoftwareVolume2"), 1, 0.0, *(float *)(DerivedStorage + 1296));
    itemfig_ReachedEndGuts(a1);

    CFRelease(v4);
  }
}

void playerfig_updateEffectiveResourceConservationLevel(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFArray *v13;
  int v14;
  int v15;
  BOOL v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef cf;
  CMTime v22;
  CMTime v23[5];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf))
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    if (*(float *)(DerivedStorage + 48) == 0.0)
      v3 = *(_DWORD *)(DerivedStorage + 68);
    else
      v3 = 0;
    v4 = *(_DWORD *)(DerivedStorage + 72);
    *(_DWORD *)(DerivedStorage + 72) = v3;
    if (dword_1EE2A2AC8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v3 = *(_DWORD *)(DerivedStorage + 72);
    }
    if (v3 != v4)
    {
      v6 = CMBaseObjectGetDerivedStorage();
      v7 = v6;
      if (v6)
      {
        v8 = *(_QWORD *)(v6 + 352);
        v9 = v8 != 0;
        v10 = CMBaseObjectGetDerivedStorage();
        if (v10)
        {
          v11 = 0;
          v12 = v10 + 368;
          while (1)
          {
            v13 = *(const __CFArray **)(v12 + v11);
            if (v13)
            {
              if (CFArrayGetCount(v13) > 0)
                break;
            }
            v11 += 8;
            if (v11 == 112)
              goto LABEL_14;
          }
          v14 = 1;
        }
        else
        {
LABEL_14:
          v14 = 0;
        }
        v15 = *(_DWORD *)(DerivedStorage + 72);
        v16 = v15 < 3 || v8 == 0;
        if (!v16)
        {
          playerfig_cleanupOverlappedOutroComponents((uint64_t)a1, 0);
          playeritemfig_releaseRenderPipelines(a1, *(_QWORD *)(DerivedStorage + 512), cf);
          *(_BYTE *)(v7 + 993) = 0;
          playerfig_disturbPlayQueue();
          goto LABEL_34;
        }
        v17 = v14 ^ 1;
        if (v15 != 2)
          v17 = 1;
        if ((v17 & 1) == 0)
        {
          playeritemfig_releaseRenderPipelines(a1, *(_QWORD *)(DerivedStorage + 512), cf);
          *(_BYTE *)(v7 + 993) = 0;
          goto LABEL_34;
        }
      }
      else
      {
        v9 = 0;
        v14 = 0;
        v15 = *(_DWORD *)(DerivedStorage + 72);
      }
      if (v15 <= 1 && *(_DWORD *)(DerivedStorage + 60))
      {
        v16 = v14 == 0;
        v18 = !v9;
        v19 = *(_QWORD *)(DerivedStorage + 512);
        if (!v16)
          v18 = 1;
        if ((v18 & 1) != 0)
        {
          if (v19)
          {
            if (!v9)
            {
              playerfig_repreparePlayQueue(a1, cf);
              if (v7)
              {
                if (*(_QWORD *)(v7 + 352))
                {
                  itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(_QWORD *)(DerivedStorage + 512), 0);
                  v20 = *(_QWORD *)(DerivedStorage + 512);
                  v23[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
                  v22 = v23[0];
                  itemfig_matchBossRateToPlayerRateAndPlaybackState(v20, v23, &v22);
                }
              }
            }
          }
        }
        else if (itemfig_rebuildRenderPipelinesAndBossGuts(v19, 0, 0, 1, 0, 0, 1)
               || itemfig_rebuildRenderPipelinesAndBossGuts(*(_QWORD *)(DerivedStorage + 512), 1, 1, 1, 0, cf, 0))
        {
          MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
          v23[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          v22 = v23[0];
          playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)v23, (uint64_t)&v22, cf);
          MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
        }
        else
        {
          playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, *(const __CFString **)(DerivedStorage + 512), MEMORY[0x1E0CA2E18]);
        }
      }
LABEL_34:
      playerfig_configureDownloadInPlayQueue();
    }
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  }
  if (cf)
  {
    FigDeferredTransactionCommit((uint64_t)cf);
    CFRelease(cf);
  }
}

const __CFArray *playerfig_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFIndex v4;
  BOOL v5;
  const __CFArray *result;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = 0;
  v5 = a2 == 0;
  while (1)
  {
    result = *(const __CFArray **)(DerivedStorage + 504);
    if (result)
      result = (const __CFArray *)CFArrayGetCount(result);
    if (v4 >= (uint64_t)result)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v4);
    if (v5)
    {
      itemfig_clearCoordinatedPlaybackSynchronizationTimebase();
      v5 = 1;
    }
    else
    {
      v5 = ValueAtIndex == a2;
    }
    ++v4;
  }
  return result;
}

uint64_t playerfig_stopResetDisturbReprepareAndResumeWithTransaction(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef a4)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  const __CFArray *v11;
  uint64_t v12;
  CMClockOrTimebaseRef v13;
  CMClockRef HostTimeClock;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  int v23;
  CMTime outRelativeToClockOrTimebaseAnchorTime;
  CMTime type;
  Float64 outRelativeRate;
  CMTime v27;
  CFTypeRef cf;
  CMTime time2;
  CMTime time1;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (dword_1EE2A2AC8)
  {
    LODWORD(v27.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
LABEL_6:
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    playerfig_cleanupOverlappedOutroComponents((uint64_t)a1, 0);
    if ((*(_BYTE *)(a2 + 12) & 1) != 0)
      goto LABEL_21;
    if ((*(_BYTE *)(a3 + 12) & 1) != 0)
      goto LABEL_21;
    if (*(float *)(DerivedStorage + 48) <= 0.0)
      goto LABEL_21;
    v11 = *(const __CFArray **)(DerivedStorage + 504);
    if (!v11 || CFArrayGetCount(v11) < 1)
      goto LABEL_21;
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    v12 = CMBaseObjectGetDerivedStorage();
    v13 = CMTimebaseCopySource(*(CMTimebaseRef *)(v12 + 328));
    memset(&v27, 0, sizeof(v27));
    CMSyncGetTime(&v27, v13);
    outRelativeRate = 0.0;
    type = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    outRelativeToClockOrTimebaseAnchorTime = type;
    if (!CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(v12 + 328), v13, &outRelativeRate, &type, &outRelativeToClockOrTimebaseAnchorTime)&& outRelativeRate > 0.0)
    {
      time1 = outRelativeToClockOrTimebaseAnchorTime;
      time2 = v27;
      if (CMTimeCompare(&time1, &time2) < 1)
      {
        if (!dword_1EE2A2AC8)
          goto LABEL_19;
        v21 = a2;
        v23 = 0;
        v22 = OS_LOG_TYPE_DEFAULT;
        v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      }
      else
      {
        *(CMTime *)a2 = type;
        HostTimeClock = CMClockGetHostTimeClock();
        time2 = outRelativeToClockOrTimebaseAnchorTime;
        CMSyncConvertTime(&time1, &time2, v13, HostTimeClock);
        *(CMTime *)a3 = time1;
        if (!dword_1EE2A2AC8)
          goto LABEL_19;
        v21 = a2;
        v23 = 0;
        v22 = OS_LOG_TYPE_DEFAULT;
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a2 = v21;
    }
LABEL_19:
    if (v13)
      CFRelease(v13);
LABEL_21:
    if (*(_QWORD *)(DerivedStorage + 512))
    {
      v16 = CMBaseObjectGetDerivedStorage();
      playerfig_pauseRenderPipelines();
      *(_BYTE *)(v16 + 993) = 0;
    }
    playeritemfig_releaseRenderPipelines(a1, 0, a4);
    playerfig_disturbPlayQueue();
    playerfig_repreparePlayQueue(a1, a4);
    if (*(_QWORD *)(DerivedStorage + 512))
    {
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 352))
      {
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(_QWORD *)(DerivedStorage + 512), 0);
        v17 = *(_QWORD *)(DerivedStorage + 512);
        time1 = *(CMTime *)a2;
        time2 = *(CMTime *)a3;
        itemfig_matchBossRateToPlayerRateAndPlaybackState(v17, &time1, &time2);
      }
    }
    playerfig_updateStartHostTimeEstimatesOfAllItems((uint64_t)a1);
  }
  v10 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
  if (!(_DWORD)v10)
  {
    a4 = cf;
    goto LABEL_6;
  }
  v19 = v10;
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf)
    CFRelease(cf);
  return v19;
}

uint64_t playerfig_repreparePlayQueue(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t PlaybackPrerequisitePropertiesReady;
  NSObject *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 512))
    return 0;
  v11 = 0;
  v5 = CMBaseObjectGetDerivedStorage();
  PlaybackPrerequisitePropertiesReady = itemfig_makePlaybackPrerequisitePropertiesReady(*(_QWORD *)(DerivedStorage + 512), &v11);
  if (v11)
  {
    if (*(_DWORD *)(DerivedStorage + 60) == 2)
    {
      playerfig_UpdateAudioSessionPreferredDeviceFormat();
      playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
      playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels((uint64_t)a1);
    }
    else if (dword_1EE2A2AC8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    itemfig_InformStakeholdersOfBestAvailableAudioContentType(*(_QWORD *)(DerivedStorage + 512));
  }
  else if (dword_1EE2A2AC8)
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_QWORD *)(v5 + 352))
    return playerfig_prepareWorkingItem(a1, 0, a2);
  if (dword_1EE2A2AC8)
  {
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return PlaybackPrerequisitePropertiesReady;
}

CFIndex playerfig_configureCacheVolatilityInPlayQueue()
{
  uint64_t DerivedStorage;
  CFIndex result;
  CFIndex v2;
  uint64_t *v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  v2 = result;
  v3 = (uint64_t *)MEMORY[0x1E0C9AE50];
  if (*(_DWORD *)(DerivedStorage + 60) && *(int *)(DerivedStorage + 72) <= 2)
    v3 = (uint64_t *)MEMORY[0x1E0C9AE40];
  if (result >= 1)
  {
    v4 = 0;
    v5 = *v3;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v4);
      result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 128);
      if (result)
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        result = CMBaseObjectIsMemberOfClass();
        if ((_DWORD)result)
        {
          CMBaseObject = CMByteStreamGetCMBaseObject();
          result = CMBaseObjectGetVTable();
          v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
          if (v7)
            result = v7(CMBaseObject, CFSTR("CRABS_AllowCacheMemoryToBeVolatile"), v5);
        }
      }
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

void playerfig_pauseRenderPipelines()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  char context;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    v1 = CMBaseObjectGetDerivedStorage();
    v2 = *(_QWORD *)(v1 + 352);
    if (v2)
    {
      if (*(_BYTE *)(v1 + 480))
      {
        context = 0;
        CFSetApplyFunction(*(CFSetRef *)(v1 + 360), (CFSetApplierFunction)fp_setRateToZeroIfTimebaseStarter, &context);
        if (!context)
          CMTimebaseSetRate(*(CMTimebaseRef *)(v1 + 328), 0.0);
      }
      else
      {
        FigPlaybackBossSetRate(v2, 0, 0.0);
      }
    }
  }
}

void fp_setRateToZeroIfTimebaseStarter(uint64_t a1, _BYTE *a2)
{
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, const void **);
  const void *v6;
  void (*v7)(uint64_t, __int128 *, __int128 *, float, float);
  const void *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v8 = 0;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v5)
  {
    v5(FigBaseObject, CFSTR("IsTimebaseStarter"), *MEMORY[0x1E0C9AE00], &v8);
    v6 = v8;
  }
  else
  {
    v6 = 0;
  }
  if (v6 != (const void *)*MEMORY[0x1E0C9AE50])
  {
    if (!v6)
      return;
    goto LABEL_6;
  }
  v7 = *(void (**)(uint64_t, __int128 *, __int128 *, float, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 8);
  if (v7)
  {
    v11 = *MEMORY[0x1E0CA2E18];
    v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v9 = v11;
    v10 = v12;
    v7(a1, &v11, &v9, 0.0, 0.0);
  }
  *a2 = 1;
  v6 = v8;
  if (v8)
LABEL_6:
    CFRelease(v6);
}

uint64_t playerfig_deferredLatencyChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v5;
  const void *v6;
  CFTypeRef v7;
  uint64_t v8;
  void (*v9)(CFTypeRef, const __CFString *, _QWORD, CMTime *);
  int Value;
  const __CFArray *v11;
  char v12;
  CFArrayRef *v13;
  const void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  CMTime v17;
  CMTime BOOLean;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (playerfig_isCurrentItemQuiescent())
  {
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
    BOOLean = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v17 = BOOLean;
    return playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)&BOOLean, (uint64_t)&v17, 0);
  }
  v5 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](v5[62]);
  MEMORY[0x19402EEEC](v5[57]);
  v6 = (const void *)v5[58];
  if (v6)
  {
    v7 = CFRetain(v6);
    MEMORY[0x19402EF04](v5[57]);
    if (v7)
    {
      BOOLean.value = 0;
      v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (!v8
        || (v9 = *(void (**)(CFTypeRef, const __CFString *, _QWORD, CMTime *))(v8 + 8)) == 0
        || (v9(v7, CFSTR("FAS_IsActive"), *MEMORY[0x1E0C9AE00], &BOOLean), !BOOLean.value)
        || (Value = CFBooleanGetValue((CFBooleanRef)BOOLean.value), CFRelease((CFTypeRef)BOOLean.value), !Value)
        || (v11 = (const __CFArray *)v5[63]) == 0)
      {
LABEL_19:
        CFRelease(v7);
        goto LABEL_20;
      }
      v12 = 0;
      v13 = (CFArrayRef *)(v5 + 63);
LABEL_14:
      if (CFArrayGetCount(v11) >= 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*v13, 0);
        if (ValueAtIndex)
        {
          v15 = (uint64_t)ValueAtIndex;
          v16 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 352);
          if (v16)
          {
            FigPlaybackBossSetRate(v16, 0, 0.0);
            BOOLean = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
            v17 = BOOLean;
            itemfig_matchBossRateToPlayerRateAndPlaybackState(v15, &BOOLean, &v17);
          }
        }
      }
      if ((v12 & 1) != 0)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
  else
  {
    MEMORY[0x19402EF04](v5[57]);
  }
  v11 = (const __CFArray *)v5[63];
  if (v11)
  {
    v7 = 0;
    v13 = (CFArrayRef *)(v5 + 63);
    v12 = 1;
    goto LABEL_14;
  }
LABEL_20:
  MEMORY[0x19402EA24](v5[62]);
  return MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
}

_BYTE *playerfig_RenderPipelineFailedToStart_setRateForInternalReason_0_f(const void *a1)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
    return (_BYTE *)playerfig_pauseForInternalReason(a1, 3u);
  return result;
}

void playerfig_deferredRenderPipelineRequiresManualRestart(uint64_t a1, const void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  const __CFArray *v5;
  const void *ValueAtIndex;
  uint64_t v7;
  const __CFArray *v8;
  const void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  CMTime v15;
  CMTime v16[5];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    v5 = *(const __CFArray **)(DerivedStorage + 504);
    if (v5 && CFArrayGetCount(v5) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      v7 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(v7 + 480))
      {
        MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
        v16[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v15 = v16[0];
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)v16, (uint64_t)&v15, 0);
        if (*(_BYTE *)(DerivedStorage + 58))
        {
LABEL_15:
          if (!*(_BYTE *)(DerivedStorage + 58))
          {
            if (dword_1EE2A2AC8)
            {
              v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          CFRelease(a2);
          return;
        }
        MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
        v8 = *(const __CFArray **)(DerivedStorage + 504);
        if (v8 && CFArrayGetCount(v8) >= 1)
        {
          v9 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
          v10 = CMBaseObjectGetDerivedStorage();
          if (*(_BYTE *)(v10 + 480))
          {
            v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            v14 = v10;
            itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v9, 0);
            FigPlaybackBossSetRate(*(_QWORD *)(v14 + 352), *(const void **)(v14 + 512), 0.0);
          }
        }
      }
      else
      {
        v12 = v7;
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)ValueAtIndex, 0);
        FigPlaybackBossSetRate(*(_QWORD *)(v12 + 352), *(const void **)(v12 + 512), 0.0);
        if (*(_BYTE *)(DerivedStorage + 58))
        {
          v16[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          v15 = v16[0];
          itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)ValueAtIndex, v16, &v15);
        }
      }
    }
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
    goto LABEL_15;
  }
}

void playerfig_deferredRenderPipelineWantsRebuild(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v6 = playerfig_isCurrentItemQuiescent();
  if (*(_QWORD *)(DerivedStorage + 912) && CFEqual(a3, CFSTR("DeviceHasDisconnected")))
  {
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  }
  else
  {
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
    if (v6)
    {
      if (!a2)
        return;
      goto LABEL_6;
    }
  }
  v9 = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v7 = v9;
  v8 = v10;
  playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)&v9, (uint64_t)&v7, 0);
  if (a2)
LABEL_6:
    CFRelease(a2);
}

CFStringRef fp_createNextRenderPipelineIdentifierString()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (*(_DWORD *)(DerivedStorage + 956) + 1);
  *(_DWORD *)(DerivedStorage + 956) = v1;
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("R%s.%02d"), DerivedStorage + 944, v1);
}

uint64_t itemfig_applyItemAudioCurvesToTrack(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, uint64_t);

  result = *(_QWORD *)(a2 + 16);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 1472);
    FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v6)
      return v6(FigBaseObject, CFSTR("SecondaryAudioCurves"), v4);
    else
      return 4294954514;
  }
  return result;
}

uint64_t fp_createCommonRenderPipelineOptionsForTrack(const void *a1, int a2, uint64_t a3, unsigned int a4, int a5, int a6, __CFDictionary **a7)
{
  _QWORD *DerivedStorage;
  uint64_t v13;
  const __CFAllocator *v14;
  __CFDictionary *Mutable;
  __CFDictionary *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const __CFString *, uint64_t);
  uint64_t v20;
  const void *v21;
  __CFDictionary *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, const __CFAllocator *, uint64_t, __CFDictionary *, CFStringRef, CFTypeRef *);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, const __CFAllocator *, uint64_t, __CFDictionary *, CFTypeRef *);
  CFTypeRef v28;
  uint64_t v29;
  uint64_t (*v30)(CFTypeRef, _QWORD, uint64_t);
  uint64_t v31;
  CFStringRef v32;
  CMTimeEpoch v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, _QWORD, CMTime *, _QWORD);
  uint64_t FigBaseObject;
  unsigned int (*v38)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, _QWORD, CMTime *, _QWORD);
  uint64_t v42;
  unsigned int (*v43)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const void **v44;
  uint64_t TrackStorage;
  const void **v46;
  const void *v47;
  CFStringRef v49;
  __int128 v50;
  __CFDictionary **v52;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[32];
  __int128 v62;
  _BYTE v63[32];
  CMTime v64;
  CMTime v65;
  uint64_t v66;
  CFTypeRef v67;
  int valuePtr;
  CFTypeRef v69[3];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v13 = CMBaseObjectGetDerivedStorage();
  v66 = 0;
  v67 = 0;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v20 = FigSignalErrorAt();
    v22 = 0;
    goto LABEL_73;
  }
  itemfig_assureContentProtectionReadyForInspection(a1);
  v52 = a7;
  if (!a6 || !DerivedStorage[145])
  {
    v32 = 0;
    v22 = 0;
    goto LABEL_24;
  }
  v49 = FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(v14, a4, 0);
  v16 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MEMORY[0x19402EEEC](*(_QWORD *)(v13 + 152));
  v17 = DerivedStorage[145];
  v18 = *(_QWORD *)(v13 + 160);
  v19 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v19)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v13 + 152));
LABEL_68:
    v20 = 4294954514;
    goto LABEL_69;
  }
  v20 = v19(v17, CFSTR("NeroTransport"), v18);
  MEMORY[0x19402EF04](*(_QWORD *)(v13 + 152));
  if ((_DWORD)v20)
  {
LABEL_69:
    v22 = v16;
    goto LABEL_71;
  }
  if (a2)
    CFDictionarySetValue(v16, CFSTR("Destination"), CFSTR("DestinationNero"));
  v21 = *(const void **)(v13 + 840);
  v22 = v16;
  if (v21)
    CFDictionarySetValue(v16, CFSTR("ClientSecTask"), v21);
  v23 = DerivedStorage[145];
  v24 = *(uint64_t (**)(uint64_t, const __CFAllocator *, uint64_t, __CFDictionary *, CFStringRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v24)
    goto LABEL_13;
  v25 = v24(v23, v14, 3, v16, v49, &v67);
  if ((_DWORD)v25 == -12164)
    goto LABEL_16;
  v20 = v25;
  if ((_DWORD)v25 == -12782)
  {
LABEL_13:
    v26 = DerivedStorage[145];
    v27 = *(uint64_t (**)(uint64_t, const __CFAllocator *, uint64_t, __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
    if (!v27)
    {
      v20 = 4294954514;
LABEL_71:
      v32 = v49;
      if (!v49)
        goto LABEL_73;
      goto LABEL_72;
    }
    v20 = v27(v26, v14, 3, v16, &v67);
  }
  if ((_DWORD)v20)
    goto LABEL_71;
LABEL_16:
  v28 = v67;
  if (v67)
  {
    v29 = DerivedStorage[146];
    if (!v29)
    {
LABEL_21:
      v22 = v16;
      CFDictionarySetValue(Mutable, CFSTR("BossTrack_SampleBufferCryptor"), v28);
      goto LABEL_22;
    }
    v30 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v30)
    {
      v31 = v30(v28, *MEMORY[0x1E0CA31C0], v29);
      if (!(_DWORD)v31)
      {
        v28 = v67;
        goto LABEL_21;
      }
      v20 = v31;
      goto LABEL_69;
    }
    goto LABEL_68;
  }
LABEL_22:
  v32 = v49;
LABEL_24:
  if (a5 == 1986618469 && itemfig_useDroppableFramesMinimumInterval())
  {
    v50 = *MEMORY[0x1E0CA2E18];
    v60 = v50;
    v33 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    *(_QWORD *)v61 = v33;
    v54 = v50;
    *(_QWORD *)&v55 = v33;
    FPSupport_GetDisplayRefreshInformation(0, (CMTime *)&v60, (uint64_t)&v54);
    v34 = CMBaseObjectGetDerivedStorage();
    v64.value = 0;
    v69[0] = 0;
    *(_OWORD *)&v65.value = v50;
    v65.epoch = v33;
    v35 = *(_QWORD *)(v34 + 968);
    v36 = *(unsigned int (**)(uint64_t, _QWORD, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 56);
    if (v36)
    {
      if (!v36(v35, a4, &v64, 0))
      {
        FigBaseObject = FigTrackReaderGetFigBaseObject(v64.value);
        v38 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v38)
        {
          if (!v38(FigBaseObject, CFSTR("MinSampleDuration"), v14, v69))
            CMTimeMakeFromDictionary(&v65, (CFDictionaryRef)v69[0]);
        }
      }
    }
    if (v64.value)
      CFRelease((CFTypeRef)v64.value);
    if (v69[0])
      CFRelease(v69[0]);
    v39 = CMBaseObjectGetDerivedStorage();
    v64.value = 0;
    v69[0] = 0;
    valuePtr = 1065353216;
    v40 = *(_QWORD *)(v39 + 968);
    v41 = *(unsigned int (**)(uint64_t, _QWORD, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 56);
    if (v41)
    {
      if (!v41(v40, a4, &v64, 0))
      {
        v42 = FigTrackReaderGetFigBaseObject(v64.value);
        v43 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v43)
        {
          if (!v43(v42, CFSTR("MaxEditRate"), v14, v69))
            CFNumberGetValue((CFNumberRef)v69[0], kCFNumberFloat32Type, &valuePtr);
        }
      }
    }
    if (v64.value)
      CFRelease((CFTypeRef)v64.value);
    if (v69[0])
      CFRelease(v69[0]);
    v64 = v65;
    FigCFDictionarySetCMTime();
    FigCFDictionarySetFloat32();
    if ((*(_BYTE *)(a3 + 12) & 1) == 0 && (BYTE12(v60) & 0x1D) == 1)
    {
      *(_OWORD *)a3 = v60;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)v61;
    }
    v64 = *(CMTime *)a3;
    FigCFDictionarySetCMTime();
    if ((BYTE12(v54) & 0x1D) == 1)
    {
      *(_OWORD *)&v64.value = v54;
      v64.epoch = v55;
      FigCFDictionarySetCMTime();
    }
  }
  v44 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(v13 + 781) && (a5 == 1935832172 || a5 == 1668310898))
    FigCFDictionarySetValue();
  TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a4, &v66);
  if (!(_DWORD)TrackStorage)
  {
    if (*(_BYTE *)(v66 + 8))
      v46 = v44;
    else
      v46 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("BossTrack_EnableForStepping"), *v46);
    v47 = (const void *)DerivedStorage[99];
    if (!v47 || a5 != 1986618469 && a5 != 1635088502)
    {
      if (a5 != 1835365473)
        goto LABEL_65;
      v47 = (const void *)DerivedStorage[100];
      if (!v47)
        goto LABEL_65;
    }
    v60 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)v61 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *(_OWORD *)&v61[8] = v60;
    *(_QWORD *)&v61[24] = *(_QWORD *)v61;
    v62 = v60;
    *(_OWORD *)&v63[8] = v60;
    *(_QWORD *)v63 = *(_QWORD *)v61;
    *(_QWORD *)&v63[24] = *(_QWORD *)v61;
    TrackStorage = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v47, a4, &v60);
    if (!(_DWORD)TrackStorage)
    {
      v56 = *(_OWORD *)&v61[16];
      v57 = v62;
      v58 = *(_OWORD *)v63;
      v59 = *(_OWORD *)&v63[16];
      v54 = v60;
      v55 = *(_OWORD *)v61;
      if (!FigVideoCompositionTimeWindowDurationIsZero((uint64_t)&v54))
      {
        v54 = v60;
        *(_QWORD *)&v55 = *(_QWORD *)v61;
        FigCFDictionarySetCMTime();
        v54 = *(_OWORD *)&v61[8];
        *(_QWORD *)&v55 = *(_QWORD *)&v61[24];
        FigCFDictionarySetCMTime();
        v54 = v62;
        *(_QWORD *)&v55 = *(_QWORD *)v63;
        FigCFDictionarySetCMTime();
        v54 = *(_OWORD *)&v63[8];
        *(_QWORD *)&v55 = *(_QWORD *)&v63[24];
        FigCFDictionarySetCMTime();
      }
LABEL_65:
      v20 = 0;
      *v52 = Mutable;
      Mutable = 0;
      if (!v32)
        goto LABEL_73;
LABEL_72:
      CFRelease(v32);
      goto LABEL_73;
    }
  }
  v20 = TrackStorage;
  if (v32)
    goto LABEL_72;
LABEL_73:
  if (v67)
    CFRelease(v67);
  if (v22)
    CFRelease(v22);
  if (Mutable)
    CFRelease(Mutable);
  return v20;
}

uint64_t fp_setPropertyOnAllAudioRenderPipelines(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const void *ValueAtIndex;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v6 = *(_QWORD *)(DerivedStorage + 560);
  if (v6)
  {
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v8)
    {
LABEL_11:
      v17 = 4294954514;
      goto LABEL_13;
    }
    v9 = v8(FigBaseObject, a2, a3);
    if ((_DWORD)v9)
    {
LABEL_12:
      v17 = v9;
      goto LABEL_13;
    }
  }
  v10 = *(const __CFArray **)(DerivedStorage + 632);
  if (v10)
  {
    Count = CFArrayGetCount(v10);
    if (Count >= 1)
    {
      v12 = Count;
      v13 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 632), v13);
        v15 = FigRenderPipelineGetFigBaseObject(ValueAtIndex);
        v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (!v16)
          goto LABEL_11;
        v9 = v16(v15, a2, a3);
        if ((_DWORD)v9)
          goto LABEL_12;
      }
      while (v12 != ++v13);
    }
  }
  v17 = 0;
LABEL_13:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  return v17;
}

BOOL itemfig_shouldEnableMainVideo()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFArray *v2;
  BOOL v3;
  const __CFArray *v4;
  CFIndex Count;
  const __CFArray *v6;
  CFIndex v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (fp_doesCPEProtectorAllowsVideoOutput(*(_QWORD *)(DerivedStorage + 1160)))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1736));
    v2 = *(const __CFArray **)(DerivedStorage + 1728);
    if (v2)
      v3 = CFArrayGetCount(v2) > 0;
    else
      v3 = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1736));
  }
  else
  {
    v3 = 0;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 224));
  v4 = *(const __CFArray **)(v1 + 208);
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(v1 + 224));
  MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 240));
  v6 = *(const __CFArray **)(v1 + 256);
  if (v6)
    v7 = CFArrayGetCount(v6);
  else
    v7 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(v1 + 240));
  if (!v3 && (*(_BYTE *)(DerivedStorage + 1824) || Count <= 0) && *(uint64_t *)(v1 + 216) <= 0 && v7 < 1)
    return 0;
  if (*(_BYTE *)(v1 + 858))
    return *(_BYTE *)(DerivedStorage + 2016) == 0;
  return 1;
}

uint64_t fp_buildImageQueueArray(int a1, int a2, CFArrayRef theArray, CFIndex a4, CFArrayRef *a5, CFArrayRef *a6)
{
  CFIndex Count;
  __CFArray *Mutable;
  const __CFAllocator *v13;
  int v14;
  CFIndex v15;
  int *p_valuePtr;
  const __CFArray *v17;
  const __CFNumber *ValueAtIndex;
  const __CFArray *v19;
  void *v20;
  CFNumberRef v21;
  __CFArray *v22;
  CFIndex i;
  const __CFArray *v24;
  const void *v25;
  uint64_t v26;
  CFArrayRef v27;
  CFArrayRef v28;
  const __CFAllocator *allocator;
  __CFArray *theArraya;
  int valuePtr;
  void *value;
  CFRange v34;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    value = 0;
    if (Count >= 1)
    {
      Mutable = 0;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v14 = 1;
      a4 = Count;
      goto LABEL_7;
    }
  }
  else
  {
    value = 0;
  }
  if (a4 < 1)
  {
    v26 = 0;
    goto LABEL_49;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, MEMORY[0x1E0C9B378]);
  v14 = 0;
LABEL_7:
  theArraya = CFArrayCreateMutable(v13, a4, MEMORY[0x1E0C9B378]);
  if (theArraya)
  {
    allocator = v13;
    v15 = 0;
    if (v14)
      p_valuePtr = 0;
    else
      p_valuePtr = &valuePtr;
    do
    {
      valuePtr = 0;
      v17 = *a6;
      if (*a6)
        v17 = (const __CFArray *)CFArrayGetCount(v17);
      if (v15 < (uint64_t)v17)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*a6, v15);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      }
      v19 = *a5;
      if (*a5)
        v19 = (const __CFArray *)CFArrayGetCount(v19);
      if (v15 < (uint64_t)v19)
      {
        v20 = (void *)CFArrayGetValueAtIndex(*a5, v15);
        value = v20;
        if (v20)
          CFRetain(v20);
      }
      FPSupport_EnsureCAImageQueue((CFTypeRef *)&value, p_valuePtr, a1, a2);
      CFArrayAppendValue(theArraya, value);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
      if ((v14 & 1) == 0)
      {
        v21 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
        CFArrayAppendValue(Mutable, v21);
        if (v21)
          CFRelease(v21);
      }
      ++v15;
    }
    while (a4 != v15);
    if (*a6)
    {
      if (Mutable)
      {
        v22 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
        for (i = 0; ; ++i)
        {
          v24 = *a6;
          if (*a6)
            v24 = (const __CFArray *)CFArrayGetCount(v24);
          if (i >= (uint64_t)v24)
            break;
          v25 = CFArrayGetValueAtIndex(*a6, i);
          v34.length = CFArrayGetCount(Mutable);
          v34.location = 0;
          if (!CFArrayContainsValue(Mutable, v34, v25))
            CFArrayAppendValue(v22, v25);
        }
      }
      else
      {
        v22 = (__CFArray *)CFRetain(*a6);
      }
      FPSupport_DeleteCASlotsInArray(v22);
    }
    else
    {
      v22 = 0;
    }
    v27 = *a5;
    *a5 = theArraya;
    CFRetain(theArraya);
    if (v27)
      CFRelease(v27);
    v28 = *a6;
    *a6 = Mutable;
    if (Mutable)
      CFRetain(Mutable);
    if (v28)
      CFRelease(v28);
    if (v22)
      CFRelease(v22);
    CFRelease(theArraya);
    v26 = 0;
    if (Mutable)
      goto LABEL_48;
  }
  else
  {
    v26 = FigSignalErrorAt();
    if (Mutable)
LABEL_48:
      CFRelease(Mutable);
  }
LABEL_49:
  if (value)
    CFRelease(value);
  return v26;
}

CFArrayRef fp_visualContextArrayIfVideoOutputAllowed(CFArrayRef theArray, uint64_t a2)
{
  CFArrayRef v2;

  v2 = theArray;
  if (theArray && CFArrayGetCount(theArray) >= 1 && !fp_doesCPEProtectorAllowsVideoOutput(a2))
    return 0;
  return v2;
}

uint64_t fp_imageQueueTableCreatedImageQueueCallback()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterAddWeakListener();
}

uint64_t fp_imageQueueTableWillReleaseImageQueueCallback()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t FigVideoCompositorSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigVideoCompositorGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(FigBaseObject, a2, a3);
  return result;
}

__n128 itemfig_getHighAndLowWaterLevelDurationsForVideoCompositionProcessing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  __n128 result;
  __int128 v7;
  __int128 v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = xmmword_1932F76D8;
  result.n128_u64[0] = 3;
  v7 = xmmword_1932F76F0;
  if (*(_BYTE *)(DerivedStorage + 688))
  {
    result.n128_u64[0] = kFigPlayerFileLowWaterLevelDuration_Minimum;
    v8 = kFigPlayerFileLowWaterLevelDuration_Minimum;
    v7 = kFigPlayerFileLowWaterLevelDuration_Minimum;
  }
  if (a2)
  {
    result = (__n128)v8;
    *(_OWORD *)a2 = v8;
    *(_QWORD *)(a2 + 16) = 0;
  }
  if (a3)
  {
    result = (__n128)v7;
    *(_OWORD *)a3 = v7;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t itemfig_copyCompositionInstructionAtTime(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFDictionary *v14;
  CFTypeRef v15;
  CMTime v17;
  CMTime time2;
  CMTime time1;
  CMTime v20;
  CMTime v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 672));
  v6 = *(const void **)(DerivedStorage + 680);
  if (!v6)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 672));
    goto LABEL_12;
  }
  v7 = (const __CFArray *)CFRetain(v6);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 672));
  if (!v7)
  {
LABEL_12:
    *a3 = 0;
    return 0;
  }
  Count = CFArrayGetCount(v7);
  v9 = Count - 1;
  if (Count < 1)
    goto LABEL_15;
  v10 = Count;
  v11 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v11);
    *(_OWORD *)&v17.value = *(_OWORD *)a2;
    v17.epoch = *(_QWORD *)(a2 + 16);
    Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("StartTime"));
    memset(&v21, 0, sizeof(v21));
    CMTimeMakeFromDictionary(&v21, Value);
    v14 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("EndTime"));
    memset(&v20, 0, sizeof(v20));
    CMTimeMakeFromDictionary(&v20, v14);
    if (v9 == v11)
    {
      time1 = v20;
      time2 = v17;
      if (!CMTimeCompare(&time1, &time2))
        break;
    }
    time1 = v17;
    time2 = v21;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      time1 = v20;
      time2 = v17;
      if (CMTimeCompare(&time1, &time2) >= 1)
        break;
    }
    if (v10 == ++v11)
      goto LABEL_15;
  }
  if (ValueAtIndex)
    v15 = CFRetain(ValueAtIndex);
  else
LABEL_15:
    v15 = 0;
  *a3 = v15;
  CFRelease(v7);
  return 0;
}

uint64_t fp_createFigImageQueueArrayForVideoRenderPipeline(uint64_t a1, uint64_t a2, int a3, const __CFArray *a4, const __CFArray *a5, CFIndex a6, CFArrayRef *a7, CFArrayRef *a8, const __CFArray *a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t DerivedStorage;
  uint64_t MutableCopy;
  __CFArray *v22;
  uint64_t (*v23)();
  uint64_t (*v24)();
  uint64_t matched;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v29;
  const opaqueCMFormatDescription *v30;
  CMVideoDimensions Dimensions;
  CFIndex Count;
  CFIndex v33;
  CFIndex v34;
  signed int MediaSubType;
  unsigned __int16 v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  int v39;
  unsigned __int16 v40;
  const __CFArray *v41;
  uint64_t v42;
  CFTypeRef v43;
  CFTypeRef cf;
  CFRange v45;
  CFRange v46;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v43 = 0;
  cf = 0;
  v42 = 0;
  fp_visualContextArrayIfVideoOutputAllowed(a4, *(_QWORD *)(DerivedStorage + 1160));
  MutableCopy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    v22 = (__CFArray *)MutableCopy;
    if (a3)
    {
LABEL_3:
      if (a9 && CFArrayGetCount(a9) >= 1)
      {
        v45.length = CFArrayGetCount(a9);
        v45.location = 0;
        CFArrayAppendArray(v22, a9, v45);
      }
      if (a11)
        v23 = fp_imageQueueTableWillReleaseImageQueueCallback;
      else
        v23 = 0;
      if (a11)
        v24 = fp_imageQueueTableCreatedImageQueueCallback;
      else
        v24 = 0;
      matched = FigImageQueueTableUpdateToMatchOutputsArray(a10, v22, *(void **)(DerivedStorage + 328), (void (*)(void *, uint64_t))v24, (void (*)(const void *, uint64_t))v23, a1);
      if (!(_DWORD)matched)
      {
        FigImageQueueTableCopyFigImageQueueArray(a10, &v42);
        *a12 = v42;
        v42 = 0;
      }
      goto LABEL_14;
    }
    v27 = *(_QWORD *)(DerivedStorage + 968);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 56);
    if (v28)
    {
      v29 = v28(v27, a2, &cf, 0);
      if (!(_DWORD)v29)
      {
        v29 = itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&v43);
        if (!(_DWORD)v29)
        {
          v30 = (const opaqueCMFormatDescription *)v43;
          Dimensions = CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)v43);
          v29 = fp_buildImageQueueArray(Dimensions.width, Dimensions.height, a5, a6, a7, a8);
          if (!(_DWORD)v29)
          {
            if (!a7 || !*a7)
              goto LABEL_3;
            Count = CFArrayGetCount(*a7);
            if (Count < 1)
            {
LABEL_114:
              if (*a7 && CFArrayGetCount(*a7) >= 1)
              {
                v41 = *a7;
                v46.length = CFArrayGetCount(v41);
                v46.location = 0;
                CFArrayAppendArray(v22, v41, v46);
              }
              goto LABEL_3;
            }
            v33 = Count;
            v34 = 0;
            while (!CFArrayGetValueAtIndex(*a7, v34))
            {
LABEL_113:
              if (v33 == ++v34)
                goto LABEL_114;
            }
            CAImageQueueSetFlags();
            MediaSubType = CMFormatDescriptionGetMediaSubType(v30);
            if (MediaSubType <= 1902207794)
            {
              if (MediaSubType <= 1685220712)
              {
                if (MediaSubType <= 1667524656)
                {
                  if (MediaSubType <= 1667326823)
                  {
                    if (MediaSubType == 1633771875 || MediaSubType == 1667312947)
                      goto LABEL_110;
                    v37 = 24931;
                  }
                  else if (MediaSubType > 1667330146)
                  {
                    if (MediaSubType == 1667330147)
                      goto LABEL_110;
                    v37 = 30307;
                  }
                  else
                  {
                    if (MediaSubType == 1667326824)
                      goto LABEL_110;
                    v37 = 25456;
                  }
                  v39 = v37 | 0x63610000;
                  goto LABEL_109;
                }
                if (MediaSubType <= 1667656802)
                {
                  if (MediaSubType != 1667524657 && MediaSubType != 1667574579)
                  {
                    v39 = 1667575091;
                    goto LABEL_109;
                  }
                  goto LABEL_110;
                }
                if (MediaSubType > 1668047202)
                {
                  if (MediaSubType == 1668047203)
                    goto LABEL_110;
                  v39 = 1668641633;
                }
                else
                {
                  if (MediaSubType == 1667656803)
                    goto LABEL_110;
                  v39 = 1667790435;
                }
LABEL_109:
                if (MediaSubType == v39)
                  goto LABEL_110;
LABEL_112:
                CAImageQueueSetFlags();
                goto LABEL_113;
              }
              if (MediaSubType <= 1885430578)
              {
                if (MediaSubType <= 1701733237)
                {
                  if (MediaSubType != 1685220713 && MediaSubType != 1700886115)
                  {
                    v39 = 1701733217;
                    goto LABEL_109;
                  }
                  goto LABEL_110;
                }
                if (MediaSubType > 1882599479)
                {
                  if (MediaSubType == 1882599480)
                    goto LABEL_110;
                  v39 = 1885430115;
                }
                else
                {
                  if (MediaSubType == 1701733238)
                    goto LABEL_110;
                  v39 = 1869117027;
                }
                goto LABEL_109;
              }
              if (MediaSubType <= 1885547314)
              {
                if ((MediaSubType - 1885430579) > 0x3D
                  || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
                {
                  goto LABEL_112;
                }
                goto LABEL_110;
              }
              if (MediaSubType <= 1886745440)
              {
                if (MediaSubType == 1885547315)
                  goto LABEL_110;
                v39 = 1885692723;
                goto LABEL_109;
              }
              if (MediaSubType == 1886745441)
                goto LABEL_110;
              v38 = 24931;
            }
            else
            {
              if (MediaSubType > 1902667125)
              {
                if (MediaSubType <= 2053202738)
                {
                  if (MediaSubType <= 1902998903)
                  {
                    if (MediaSubType != 1902667126 && MediaSubType != 1902671459)
                    {
                      v39 = 1902928227;
                      goto LABEL_109;
                    }
                    goto LABEL_110;
                  }
                  if (MediaSubType > 1903587384)
                  {
                    if (MediaSubType == 1903587385)
                      goto LABEL_110;
                    v36 = 24931;
                    goto LABEL_99;
                  }
                  if (MediaSubType == 1902998904)
                    goto LABEL_110;
                  v39 = 1903522657;
                }
                else
                {
                  if (MediaSubType <= 2053319474)
                  {
                    if ((MediaSubType - 2053202739) > 0x3D
                      || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
                    {
                      v36 = 30307;
LABEL_99:
                      v39 = v36 | 0x7A610000;
                      goto LABEL_109;
                    }
LABEL_110:
                    if (!FPSupport_IsRunningInAppleVirtualMachine())
                      CAImageQueueSetFlags();
                    goto LABEL_112;
                  }
                  if (MediaSubType > 2053923170)
                  {
                    if (MediaSubType == 2054517601)
                      goto LABEL_110;
                    v39 = 2053923171;
                  }
                  else
                  {
                    if (MediaSubType == 2053319475)
                      goto LABEL_110;
                    v39 = 2053464883;
                  }
                }
                goto LABEL_109;
              }
              if (MediaSubType > 1902324530)
              {
                if (MediaSubType <= 1902405732)
                {
                  if (MediaSubType == 1902324531 || MediaSubType == 1902403958)
                    goto LABEL_110;
                  v40 = 26673;
                }
                else
                {
                  if (MediaSubType > 1902469938)
                  {
                    if (MediaSubType == 1902469939)
                      goto LABEL_110;
                    v39 = 1902537827;
                    goto LABEL_109;
                  }
                  if (MediaSubType == 1902405733)
                    goto LABEL_110;
                  v40 = 28024;
                }
                v39 = v40 | 0x71640000;
                goto LABEL_109;
              }
              if ((MediaSubType - 1902207795) <= 0x3D
                && ((1 << (MediaSubType - 51)) & 0x2020000000000001) != 0
                || (MediaSubType - 1902212657) <= 0x34
                && ((1 << (MediaSubType - 49)) & 0x14000000000001) != 0)
              {
                goto LABEL_110;
              }
              v38 = 28771;
            }
            v39 = v38 | 0x71610000;
            goto LABEL_109;
          }
        }
      }
      matched = v29;
    }
    else
    {
      matched = 4294954514;
    }
LABEL_14:
    CFRelease(v22);
    goto LABEL_15;
  }
  matched = FigSignalErrorAt();
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v43)
    CFRelease(v43);
  return matched;
}

uint64_t fp_buildVideoRenderPipelineForTrack(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, char a5, uint64_t a6, const void *a7, int a8, const __CFArray *a9, const __CFArray *a10, char a11, _QWORD *a12)
{
  uint64_t DerivedStorage;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v21;
  __CFDictionary *Mutable;
  __CFDictionary *v23;
  int v24;
  const void **v25;
  const void **v26;
  __CFDictionary *v27;
  CFStringRef NextRenderPipelineIdentifierString;
  uint64_t v29;
  const void *v30;
  __CFDictionary *v31;
  uint64_t v32;
  uint64_t v33;
  const __CFAllocator *AllocatorForMedia;
  const void *v35;
  CFTypeRef v36;
  const void *v37;
  uint64_t v38;
  CMTimeValue value;
  uint64_t FigBaseObject;
  void (*v41)(uint64_t, const __CFString *, CMTimeValue);
  const __CFDictionary *v42;
  const __CFAllocator *v43;
  CFTypeRef v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, __CFString *, uint64_t);
  CFTypeRef v48;
  uint64_t v49;
  void (*v50)(uint64_t, const __CFString *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, const __CFString *, uint64_t);
  CFDictionaryRef v54;
  uint64_t v55;
  void (*v56)(uint64_t, const __CFString *, CFDictionaryRef);
  CFTypeRef v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t CMBaseObject;
  uint64_t (*v61)(uint64_t, const __CFString *, _QWORD, CMTime *);
  int v62;
  const void *v63;
  uint64_t v64;
  CMTimeValue v65;
  void (*v66)(uint64_t, __CFString *, __CFString *, CMTimeValue, _QWORD);
  const void *v67;
  uint64_t v68;
  void (*v69)(uint64_t, const __CFString *, const void *);
  const __CFAllocator *allocator;
  uint64_t v72;
  uint64_t v73;
  int v74;
  const void *v75;
  CMTime time;
  CMTime cf;
  CMTime v79;
  const void *v80;
  CFTypeRef v81;
  CFTypeRef v82;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = CMBaseObjectGetDerivedStorage();
  v81 = 0;
  v82 = 0;
  v80 = 0;
  v19 = *(_QWORD *)(v18 + 968);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 56);
  if (!v20)
  {
    v27 = 0;
    NextRenderPipelineIdentifierString = 0;
    v23 = 0;
    v29 = 4294954514;
    goto LABEL_22;
  }
  v72 = a6;
  v21 = v20(v19, a3, &v81, 0);
  if ((_DWORD)v21 || (v21 = itemfig_copyFormatDescription((uint64_t)v81, (uint64_t *)&v80), (_DWORD)v21))
  {
    v29 = v21;
    v27 = 0;
    NextRenderPipelineIdentifierString = 0;
    v23 = 0;
    goto LABEL_22;
  }
  v75 = a4;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = Mutable;
  if (!Mutable)
  {
    v29 = FigSignalErrorAt();
    v27 = 0;
LABEL_21:
    NextRenderPipelineIdentifierString = 0;
    goto LABEL_22;
  }
  v24 = *(_DWORD *)(DerivedStorage + 784);
  v25 = (const void **)MEMORY[0x1E0C9AE50];
  if (v24 == 1)
  {
    v26 = (const void **)MEMORY[0x1E0C9AE50];
  }
  else
  {
    if (v24 != 2)
      goto LABEL_11;
    v26 = (const void **)MEMORY[0x1E0C9AE40];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCA8], *v26);
LABEL_11:
  v30 = *(const void **)(DerivedStorage + 792);
  if (v30)
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CEDCB8], v30);
  v74 = a8;
  v73 = v18;
  if (*(_BYTE *)(DerivedStorage + 857))
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CEDC88], *v25);
  v31 = v23;
  v32 = CMBaseObjectGetDerivedStorage();
  v33 = CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v23 = (__CFDictionary *)CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%s:%s.t%d"), v33 + 944, v32 + 2048, a3);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 152));
  v35 = *(const void **)(DerivedStorage + 160);
  if (v35)
    v36 = CFRetain(v35);
  else
    v36 = 0;
  v27 = v31;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 152));
  v37 = v80;
  v29 = FPSupport_createVideoRenderPipeline((int)v31, v75, 1, a9, a10, v74, v80, *(_DWORD *)(DerivedStorage + 116), a5, v36, a7, *(_DWORD *)(DerivedStorage + 472), a11, v23, &v82);
  if (v36)
    CFRelease(v36);
  if ((_DWORD)v29)
    goto LABEL_21;
  NextRenderPipelineIdentifierString = fp_createNextRenderPipelineIdentifierString();
  if (!NextRenderPipelineIdentifierString)
  {
    v29 = 4294954510;
LABEL_22:
    if (v82)
      CFRelease(v82);
    goto LABEL_73;
  }
  if (a11)
  {
    cf.value = 0;
    v38 = FigGetAllocatorForMedia();
    FigSampleAttachmentCollectionRulesCopyForFilePlayback(v38, v37, &cf);
    value = cf.value;
    if (cf.value)
    {
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v82);
      v41 = *(void (**)(uint64_t, const __CFString *, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v41)
        v41(FigBaseObject, CFSTR("SampleAttachmentCollectionRules"), value);
      if (cf.value)
        CFRelease((CFTypeRef)cf.value);
    }
  }
  if (*(_BYTE *)(DerivedStorage + 1107))
  {
    cf.value = 0;
    v42 = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetValue();
    v43 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v44 = v82;
    FigGetDefaultLowWaterDurationForSpeedRampRenderPipelines(&v79);
    v29 = FigSpeedRampRenderPipelineCreate(v43, v44, &v79, v42, (void **)&cf);
    if (cf.value)
    {
      v45 = *(_QWORD *)(v73 + 2072);
      v46 = FigRenderPipelineGetFigBaseObject(cf.value);
      v47 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v47)
        v47(v46, CFSTR("SpeedRampData"), v45);
      v48 = v82;
      v82 = (CFTypeRef)cf.value;
      if (cf.value)
        CFRetain((CFTypeRef)cf.value);
      if (v48)
        CFRelease(v48);
      if (cf.value)
        CFRelease((CFTypeRef)cf.value);
    }
    if (v42)
      CFRelease(v42);
    if ((_DWORD)v29)
      goto LABEL_22;
  }
  if (v72)
  {
    v49 = FigRenderPipelineGetFigBaseObject(v82);
    v50 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v50)
      v50(v49, CFSTR("FieldMode"), v72);
  }
  v51 = *(_QWORD *)(DerivedStorage + 144);
  v52 = FigRenderPipelineGetFigBaseObject(v82);
  v53 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v53)
    v53(v52, CFSTR("NeroVideoGravity"), v51);
  if (*(_BYTE *)(v73 + 285))
  {
    memset(&cf, 0, sizeof(cf));
    CMTimeMake(&cf, 1, 2);
    time = cf;
    v54 = CMTimeCopyAsDictionary(&time, allocator);
    v55 = FigRenderPipelineGetFigBaseObject(v82);
    v56 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (v56)
      v56(v55, CFSTR("DurationAllowedForCachedVideoFrames"), v54);
    if (v54)
      CFRelease(v54);
  }
  v57 = v82;
  cf.value = 0;
  v58 = CMBaseObjectGetDerivedStorage();
  if (!v57)
    goto LABEL_69;
  v59 = v58;
  if (!v58)
    goto LABEL_69;
  if (!*(_QWORD *)(v58 + 128)
    || (CMByteStreamGetCMBaseObject(), FigCRABSGetClassID(), !CMBaseObjectIsMemberOfClass()))
  {
    v67 = *(const void **)(CMBaseObjectGetDerivedStorage() + 936);
    cf.value = (CMTimeValue)v67;
    if (v67)
      CFRetain(v67);
LABEL_67:
    v68 = FigRenderPipelineGetFigBaseObject(v57);
    v69 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
    if (v69)
      v69(v68, CFSTR("PlaybackSessionID"), v67);
    goto LABEL_69;
  }
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v61 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v61)
  {
    v62 = v61(CMBaseObject, CFSTR("CRABS_PlaybackSessionID"), 0, &cf);
    v63 = (const void *)cf.value;
    if (!cf.value || v62)
      goto LABEL_70;
    MEMORY[0x19402EEEC](*(_QWORD *)(v59 + 1896));
    v64 = *(_QWORD *)(v59 + 1904);
    if (v64)
    {
      v65 = cf.value;
      v66 = *(void (**)(uint64_t, __CFString *, __CFString *, CMTimeValue, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 48);
      if (v66)
        v66(v64, CFSTR("playerStats"), CFSTR("PowerLogID"), v65, 0);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v59 + 1896));
    v67 = (const void *)cf.value;
    goto LABEL_67;
  }
LABEL_69:
  v63 = (const void *)cf.value;
LABEL_70:
  if (v63)
    CFRelease(v63);
  v29 = 0;
  *a12 = v82;
  v82 = 0;
LABEL_73:
  if (v80)
    CFRelease(v80);
  if (v27)
    CFRelease(v27);
  if (NextRenderPipelineIdentifierString)
    CFRelease(NextRenderPipelineIdentifierString);
  if (v23)
    CFRelease(v23);
  if (v81)
    CFRelease(v81);
  return v29;
}

void itemfig_enableImageQueueTimingAndSetDurationOnFigImageQueueArray(uint64_t a1)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  CMTime v4;
  CMTime v5;

  FigImageQueueArraySetProperty();
  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!itemfig_getDurationIfReady(a1, (uint64_t)&v5) && (v5.flags & 1) != 0)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = v5;
    v3 = CMTimeCopyAsDictionary(&v4, v2);
    FigImageQueueArraySetProperty();
    if (v3)
      CFRelease(v3);
  }
}

void itemfig_updateRotationOnVideoRenderPipeline(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  CFNumberRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, const __CFString *, CFNumberRef);
  int VideoMatrixRotationAngleAndFlips;
  __int16 v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v14 = 0;
  if ((a2 || (a2 = *(_DWORD *)(DerivedStorage + 1000)) != 0) && !itemfig_getTrackStorage(a1, a2, &v15))
  {
    VideoMatrixRotationAngleAndFlips = itemfig_getVideoMatrixRotationAngleAndFlips(a1, (_BYTE *)&v14 + 1, &v14);
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &VideoMatrixRotationAngleAndFlips);
    v6 = v15;
    v7 = *(_QWORD *)(v15 + 16);
    if (v7)
    {
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
      v9 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (v9)
        v9(FigBaseObject, CFSTR("Rotation"), v5);
    }
    v10 = *(_QWORD *)(v6 + 248);
    if (v10)
    {
      v11 = FigRenderPipelineGetFigBaseObject(v10);
      v12 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v12)
        v12(v11, CFSTR("Rotation"), v5);
    }
    if (v5)
      CFRelease(v5);
  }
}

uint64_t itemfig_updatePriorImageQueueGaugeOnRenderPipelines(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t);
  uint64_t v9;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 2136))
  {
    v3 = result;
    if (!*(_QWORD *)(result + 656))
    {
      v4 = *(_DWORD *)(result + 1000);
      if (v4)
      {
        v9 = 0;
        result = itemfig_getTrackStorage(a1, v4, &v9);
        if ((_DWORD)result)
          v5 = 1;
        else
          v5 = v9 == 0;
        if (!v5)
        {
          result = *(_QWORD *)(v9 + 16);
          if (result)
          {
            v6 = *(_QWORD *)(v3 + 2136);
            FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
            result = CMBaseObjectGetVTable();
            v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
            if (v8)
              return v8(FigBaseObject, CFSTR("PriorImageQueueGauge"), v6);
          }
        }
      }
    }
  }
  return result;
}

BOOL fp_doesCPEProtectorAllowsVideoOutput(uint64_t a1)
{
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  _BOOL8 v3;
  CFTypeRef cf;

  if (!a1)
    return 1;
  cf = 0;
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v2)
    return *MEMORY[0x1E0C9AE50] == 0;
  v2(a1, CFSTR("AllowsVideoOutput"), *MEMORY[0x1E0C9AE00], &cf);
  v3 = *MEMORY[0x1E0C9AE50] == (_QWORD)cf;
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(uint64_t a1, double a2, double a3, uint64_t a4, const void *a5)
{
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v11;
  uint64_t FigBaseObject;
  void (*v13)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t Dimensions;
  float v15;
  float v16;
  double v17;
  double v18;
  int v19;
  CFDictionaryRef v20;
  CFDictionaryRef v21;
  float v22;
  float v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  void (*v30)(uint64_t, const __CFString *, CFDictionaryRef);
  CFDictionaryRef v31;
  uint64_t v32;
  void (*v33)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v34;
  CFDictionaryRef v35;
  float v37;
  float v38;
  CGSize v39;
  CGRect v40;

  if (a2 >= 1.0 && a3 >= 1.0)
  {
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)&a2);
    if (DictionaryRepresentation)
    {
      v11 = DictionaryRepresentation;
      FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
      v13 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (v13)
        v13(FigBaseObject, CFSTR("ScreenSize"), v11);
      if (!a5)
      {
        CFRelease(v11);
        return 0;
      }
      v37 = 1.0;
      v38 = 1.0;
      Dimensions = itemfig_GetDimensions(a5, &v38, &v37);
      if (!(_DWORD)Dimensions)
      {
        v15 = v37;
        v16 = v38;
        v17 = v38;
        v18 = v37;
        v19 = FigCFEqual();
        v39.width = v17;
        v39.height = v18;
        v20 = CGSizeCreateDictionaryRepresentation(v39);
        if (v20)
        {
          v21 = v20;
          v22 = a2 / v17;
          v23 = a3 / v18;
          if (v22 >= v23)
            v24 = a3 / v18;
          else
            v24 = a2 / v17;
          if (v22 <= v23)
            v22 = a3 / v18;
          if (!v19)
            v22 = v24;
          v25 = (float)(v16 * v22);
          v26 = (a2 - v25) * 0.5;
          v27 = (float)(v15 * v22);
          v28 = (a3 - v27) * 0.5;
          v29 = FigRenderPipelineGetFigBaseObject(a1);
          v30 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
          if (v30)
            v30(v29, CFSTR("OriginalVideoSize"), v21);
          v40.origin.x = v26;
          v40.origin.y = v28;
          v40.size.width = v25;
          v40.size.height = v27;
          v31 = CGRectCreateDictionaryRepresentation(v40);
          if (v31)
          {
            v32 = FigRenderPipelineGetFigBaseObject(a1);
            v33 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
            if (v33)
              v33(v32, CFSTR("VideoDisplayRect"), v31);
            v34 = 0;
          }
          else
          {
            v34 = FigSignalErrorAt();
          }
          CFRelease(v11);
          CFRelease(v21);
          if (!v31)
            return v34;
          v35 = v31;
          goto LABEL_26;
        }
        Dimensions = FigSignalErrorAt();
      }
      v34 = Dimensions;
      v35 = v11;
LABEL_26:
      CFRelease(v35);
      return v34;
    }
  }
  return FigSignalErrorAt();
}

void fp_postClosedCaptionNotificationIfEnabled(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  const void *v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  void *ValueAtIndex;
  void *v13;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v5)
  {
    v7 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 296))
    {
      cf = 0;
      FigCaptionCommandCreatePropertyList(a2, a3, (CFDictionaryRef *)&cf);
      if (cf)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(cf);
      }
    }
    else if (*(_BYTE *)(DerivedStorage + 298))
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 312));
      v8 = *(const __CFArray **)(v7 + 304);
      if (v8)
      {
        Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          v10 = Count;
          for (i = 0; i != v10; ++i)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 304), i);
            v13 = (void *)MEMORY[0x19403137C]();
            objc_msgSend(ValueAtIndex, "processCaptionCommand:data:", a2, a3);
            objc_autoreleasePoolPop(v13);
          }
        }
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v7 + 312));
    }
    CFRelease(v5);
  }
}

uint64_t itemfig_prepareClosedCaptionRenderPipeline(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t ClosedCaptionChannelStringFromFormatDescription;
  CFTypeRef v4;
  BOOL v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, CFTypeRef);
  CFTypeRef cf;

  cf = 0;
  ClosedCaptionChannelStringFromFormatDescription = FigClosedCaptionCreateClosedCaptionChannelStringFromFormatDescription((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a2, (CFStringRef *)&cf);
  v4 = cf;
  if ((_DWORD)ClosedCaptionChannelStringFromFormatDescription)
    v5 = 1;
  else
    v5 = cf == 0;
  if (!v5)
  {
    FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
    v7 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v7)
      v7(FigBaseObject, CFSTR("CCRPP_ClosedCaptionType"), v4);
    v4 = cf;
  }
  if (v4)
    CFRelease(v4);
  return ClosedCaptionChannelStringFromFormatDescription;
}

void playerfig_postSubtitleNotificationIfEnabled(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, int a8, int a9, uint64_t a10)
{
  uint64_t DerivedStorage;
  void (*v19)(uint64_t, _QWORD, CFTypeRef *);
  uint64_t v20;
  CFTypeRef v21;
  const void *v22;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a8)
  {
    cf = 0;
    v19 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v19)
    {
      v19(a10, 0, &cf);
      if (cf)
      {
        v20 = CMBaseObjectGetDerivedStorage();
        if (!*(_BYTE *)(v20 + 1021))
        {
          *(_BYTE *)(v20 + 1021) = 1;
          playerfig_updateCaptionOrSubtitleHintOnVideoPipeline(a10, cf);
        }
        if (cf)
          CFRelease(cf);
      }
    }
  }
  if (!a6 || *(_BYTE *)(DerivedStorage + 688) | a8)
  {
    cf = 0;
    FigSubtitleSampleCreatePropertyList(a6, a8, a9, (CFDictionaryRef *)&cf, a1, a2, a3, a4);
    v21 = cf;
    if (cf)
    {
      v22 = *(const void **)(DerivedStorage + 696);
      *(_QWORD *)(DerivedStorage + 696) = cf;
      CFRetain(v21);
      if (v22)
        CFRelease(v22);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(cf);
    }
  }
}

void playerfig_postCaptionNotificationIfEnabled(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, int a8, int a9, uint64_t a10)
{
  uint64_t DerivedStorage;
  void (*v19)(uint64_t, _QWORD, CFTypeRef *);
  uint64_t v20;
  CFTypeRef v21;
  const void *v22;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a8)
  {
    cf = 0;
    v19 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v19)
    {
      v19(a10, 0, &cf);
      if (cf)
      {
        v20 = CMBaseObjectGetDerivedStorage();
        if (!*(_BYTE *)(v20 + 1021))
        {
          *(_BYTE *)(v20 + 1021) = 1;
          playerfig_updateCaptionOrSubtitleHintOnVideoPipeline(a10, cf);
        }
        if (cf)
          CFRelease(cf);
      }
    }
  }
  if (!a6 || *(_BYTE *)(DerivedStorage + 688) | a8)
  {
    cf = 0;
    FigSubtitleSampleCreatePropertyList(a6, a8, a9, (CFDictionaryRef *)&cf, a1, a2, a3, a4);
    v21 = cf;
    if (cf)
    {
      v22 = *(const void **)(DerivedStorage + 696);
      *(_QWORD *)(DerivedStorage + 696) = cf;
      CFRetain(v21);
      if (v22)
        CFRelease(v22);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(cf);
    }
  }
}

void fp_interrogateRenderPipeline(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, uint64_t, const void **);
  const void *v7;
  const void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, const __CFString *, uint64_t, const void **);
  const void *v11;
  const void *v12;
  const void *v13;

  v12 = 0;
  v13 = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  v6 = *(void (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v6)
  {
    v6(FigBaseObject, CFSTR("PrefersConsumptionDrivenReads"), v4, &v13);
    v7 = v13;
  }
  else
  {
    v7 = 0;
  }
  v8 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v7 != (const void *)*MEMORY[0x1E0C9AE50])
  {
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  *a2 |= 1u;
  if (v7)
LABEL_6:
    CFRelease(v7);
LABEL_7:
  v9 = FigRenderPipelineGetFigBaseObject(a1);
  v10 = *(void (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v10)
  {
    v10(v9, CFSTR("VetoFigReadCacheUsage"), v4, &v12);
    v11 = v12;
  }
  else
  {
    v11 = 0;
  }
  if (v11 == v8)
  {
    *a2 |= 2u;
    if (!v11)
      return;
  }
  else if (!v11)
  {
    return;
  }
  CFRelease(v11);
}

uint64_t playerfig_setReadCacheEnabled()
{
  uint64_t DerivedStorage;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, __CFString *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 128);
  if (!result)
  {
    if (dword_1EE2A2AC8 < 3)
      return result;
    goto LABEL_9;
  }
  CMByteStreamGetCMBaseObject();
  FigCRABSGetClassID();
  result = CMBaseObjectIsMemberOfClass();
  if ((_DWORD)result)
  {
    if (dword_1EE2A2AC8 < 3)
      return result;
LABEL_9:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(DerivedStorage + 136) == 1)
  {
    if (dword_1EE2A2AC8 < 3)
      return result;
    goto LABEL_9;
  }
  if (dword_1EE2A2AC8 >= 3)
  {
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObject = CMByteStreamGetCMBaseObject();
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(result + 8) + 56);
  if (v5)
    result = v5(CMBaseObject, CFSTR("CFBS_EnableCaching"), *MEMORY[0x1E0C9AE50]);
  *(_BYTE *)(DerivedStorage + 136) = 1;
  return result;
}

void itemfig_deferredTimeJumped_f(const void *a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
    playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems(v2, a1);
  if (a1)
    CFRelease(a1);
}

void playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v5;
  CFIndex FirstIndexOfValue;
  CFRange v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v5 = *(const __CFArray **)(DerivedStorage + 504);
  v7.length = CFArrayGetCount(v5);
  v7.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v7, a2);
  if (FirstIndexOfValue != -1)
    playerfig_updateStartHostTimeEstimatesOfItemAtIndexAndFollowingItems(a1, FirstIndexOfValue);
  JUMPOUT(0x19402EA24);
}

void itemfig_DeferredLikelyToKeepUp(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *v8;
  uint64_t v9;
  const __CFNumber *Value;
  double v11;
  uint64_t v12;
  double Current;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v23;
  void (*v24)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v25;
  void (*v26)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v27;
  void (*v28)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  double valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(const void **)(DerivedStorage + 8);
  v9 = CMBaseObjectGetDerivedStorage();
  valuePtr = 0.0;
  if (*(_BYTE *)DerivedStorage)
  {
    CFRelease(a2);
    return;
  }
  if (*(_BYTE *)(DerivedStorage + 1690) && *(float *)(v9 + 48) != 0.0)
  {
    LOBYTE(a5) = 1;
  }
  else if (a5)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("FPM_Duration"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
    LOBYTE(a5) = 0;
  }
  if (!*(_BYTE *)(DerivedStorage + 1690))
  {
    *(_BYTE *)(DerivedStorage + 1690) = 1;
    if (*(double *)(DerivedStorage + 1552) > 0.0)
      *(CFAbsoluteTime *)(DerivedStorage + 1560) = CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 1552);
    *(double *)(DerivedStorage + 1656) = valuePtr;
    if ((a5 & 1) != 0)
      goto LABEL_41;
    goto LABEL_16;
  }
  if ((a5 & 1) == 0)
  {
LABEL_16:
    if (*(_QWORD *)(DerivedStorage + 128))
    {
      v11 = valuePtr;
      v12 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v12 + 1896));
      if (!*(_BYTE *)(v12 + 1993))
      {
        *(_BYTE *)(v12 + 1993) = 1;
        Current = CFAbsoluteTimeGetCurrent();
        *(double *)(v12 + 1944) = Current;
        v14 = *(double *)(v12 + 1936);
        if (v14 == 0.0)
          v15 = 0;
        else
          v15 = (uint64_t)((Current - v14) * 1000.0);
        v16 = *(double *)(v12 + 1928);
        v17 = *(double *)(v12 + 1920);
        if (v16 == 0.0)
          v18 = 0;
        else
          v18 = (uint64_t)((Current - v16) * 1000.0);
        v19 = *(_QWORD *)(v12 + 1904);
        if (v19)
        {
          v20 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v20)
            v20(v19, CFSTR("playerStats"), CFSTR("DAva"), (uint64_t)(v11 * 1000.0), 0);
        }
        v21 = *(_QWORD *)(v12 + 1904);
        if (v21)
        {
          v22 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v22)
            v22(v21, CFSTR("playerStats"), CFSTR("MaxBufferTime"), v15, 0);
          v23 = *(_QWORD *)(v12 + 1904);
          if (v23)
          {
            v24 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v24)
              v24(v23, CFSTR("playerStats"), CFSTR("TimeItemToLTKU"), (uint64_t)((Current - v17) * 1000.0), 0);
            v25 = *(_QWORD *)(v12 + 1904);
            if (v25)
            {
              v26 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v26)
                v26(v25, CFSTR("playerStats"), CFSTR("TimeWorkingToLTKU"), v18, 0);
            }
          }
        }
        itemfig_networkActivitySubmitMetricsForInitialStartupIfAvailable();
      }
      v27 = *(_QWORD *)(v12 + 1904);
      if (v27)
      {
        v28 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
        if (v28)
          v28(v27, CFSTR("playerStats"), 305, 0, 0);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v12 + 1896));
    }
  }
LABEL_41:
  playerfig_updatePlaybackStateAndBossRate(v8, 6, 0);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(a2);
}

const void *playerfig_preWirePixelBuffersIfNeeded(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  const __CFAllocator *v5;
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  const __CFDictionary *Mutable;
  __CFDictionary *v9;
  const void *v10;
  const void *v11;
  CFTypeRef v12;
  uint64_t v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 872));
  v4 = *(const void **)(DerivedStorage + 888);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 888) = 0;
  }
  if (a2)
  {
    *(_BYTE *)(DerivedStorage + 896) = 0;
  }
  else if (*(_BYTE *)(DerivedStorage + 896))
  {
    goto LABEL_14;
  }
  if (!FigCFDictionaryGetCGSizeIfPresent())
  {
LABEL_14:
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 872));
    return 0;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = CFDictionaryCreateMutable(v5, 0, v6, v7);
  FigCFDictionarySetInt32();
  v10 = CFDictionaryCreate(v5, 0, 0, 0, v6, v7);
  if (!v10)
  {
    FigSignalErrorAt();
    goto LABEL_24;
  }
  CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CA8FF0], v10);
  CFRelease(v10);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v11 = (const void *)CVPixelBufferPoolCreate(v5, Mutable, v9, (CVPixelBufferPoolRef *)(DerivedStorage + 888));
  if ((_DWORD)v11)
  {
    v10 = v11;
LABEL_24:
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 872));
    if (!v9)
      goto LABEL_19;
LABEL_18:
    CFRelease(v9);
    goto LABEL_19;
  }
  v12 = CFRetain(*(CFTypeRef *)(DerivedStorage + 888));
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 872));
  if (v12)
  {
    v13 = CVPixelBufferPoolPreAllocate();
    if ((_DWORD)v13)
    {
      v10 = (const void *)v13;
    }
    else
    {
      v10 = (const void *)CVPixelBufferPoolPrefetchPages();
      if (!(_DWORD)v10 && dword_1EE2A2AC8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v10 = 0;
      }
    }
    CFRelease(v12);
    if (!v9)
      goto LABEL_19;
    goto LABEL_18;
  }
  v10 = 0;
  if (v9)
    goto LABEL_18;
LABEL_19:
  if (Mutable)
    CFRelease(Mutable);
  return v10;
}

uint64_t playerfig_createDataChannelConfigurationAndSetIdentifiers(int a1, CFStringRef a2, CFAllocatorRef allocator, uint64_t *a4)
{
  const __CFDictionary *Mutable;
  uint64_t DerivedStorage;
  CFStringRef v9;
  uint64_t v10;
  uint64_t v11;
  CFStringRef v12;
  uint64_t v13;

  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CFStringCreateWithCString(allocator, (const char *)(DerivedStorage + 944), 0x600u);
  FigCFDictionarySetValue();
  if (a2)
  {
    v10 = CMBaseObjectGetDerivedStorage();
    a2 = CFStringCreateWithCString(allocator, (const char *)(v10 + 2048), 0x600u);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  v11 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 272));
  v12 = CFStringCreateWithFormat(allocator, 0, CFSTR("C/%d"), *(unsigned int *)(v11 + 280));
  if (v12)
    ++*(_DWORD *)(v11 + 280);
  else
    FigSignalErrorAt();
  MEMORY[0x19402EF04](*(_QWORD *)(v11 + 272));
  FigCFDictionarySetValue();
  v13 = FigDataChannelConfigurationCreate(allocator, Mutable, a4);
  if (Mutable)
    CFRelease(Mutable);
  if (v9)
    CFRelease(v9);
  if (a2)
    CFRelease(a2);
  if (v12)
    CFRelease(v12);
  return v13;
}

void itemfig_transferItemTrackPropertyToVideoTargetConfigurationDataChannelSettings(uint64_t a1, uint64_t a2, uint64_t a3, __CFDictionary *a4, const void *a5)
{
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t, _QWORD, void **);
  BOOL v11;
  void *value;

  value = 0;
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 40);
  if (v10)
  {
    if (v10(a1, a2, a3, *MEMORY[0x1E0C9AE00], &value))
      v11 = 1;
    else
      v11 = value == 0;
    if (!v11)
    {
      CFDictionarySetValue(a4, a5, value);
      CFRelease(value);
    }
  }
}

uint64_t playerfig_deferredValeriaEnabled(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = RaEiDSv6c();
  if ((_DWORD)result)
  {
    *(_BYTE *)(DerivedStorage + 858) = 1;
    result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
    if (result >= 1)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      result = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)result)
      {
        if (*(_BYTE *)(result + 2016))
        {
          v7 = *MEMORY[0x1E0CA2E18];
          v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          v5 = v7;
          v6 = v8;
          return playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)&v7, (uint64_t)&v5, 0);
        }
      }
    }
  }
  return result;
}

uint64_t playerfig_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CVPixelBufferRef *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v9;
  const void *v10;
  uint64_t v11;
  __CFString **v12;
  int v13;
  __CFString **v14;
  void *Copy;
  const __CFArray *v16;
  void *v17;
  uint64_t v18;
  const __CFAllocator *v19;
  int *v20;
  CFNumberType v21;
  const void **v22;
  int v23;
  const __CFArray *v24;
  CFIndex Count;
  CFIndex v26;
  __CFDictionary *Mutable;
  void *v28;
  CFIndex i;
  const __CFArray *v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  __CFString **v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  __CFDictionary *v38;
  const void **v39;
  const void *v40;
  CFTypeRef v41;
  void *v42;
  void *v43;
  void *v44;
  int v45;
  __CVBuffer *v46;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !a4)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  if (CFEqual(a2, CFSTR("PerformanceDictionary")))
  {
    v46 = 0;
    MEMORY[0x19402EA0C](*((_QWORD *)v9 + 62));
    v10 = (const void *)*((_QWORD *)v9 + 64);
    if (v10)
      v11 = itemfig_gatherItemPerformanceData(v10, 0, &v46);
    else
      v11 = 0;
    MEMORY[0x19402EA24](*((_QWORD *)v9 + 62));
    *a4 = v46;
    return v11;
  }
  if (CFEqual(a2, CFSTR("GatherPerformanceHistoryArray")))
  {
    v12 = (__CFString **)MEMORY[0x1E0C9AE50];
    v13 = v9[812];
LABEL_10:
    v14 = (__CFString **)MEMORY[0x1E0C9AE40];
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("PerformanceHistoryArray")))
  {
    if (v9[812])
    {
      v16 = (const __CFArray *)*((_QWORD *)v9 + 102);
      if (v16)
      {
        Copy = CFArrayCreateCopy(a3, v16);
        goto LABEL_15;
      }
LABEL_114:
      v11 = 0;
      *a4 = 0;
      return v11;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("FigAudioSession")))
  {
    MEMORY[0x19402EEEC](*((_QWORD *)v9 + 57));
    v17 = (void *)*((_QWORD *)v9 + 58);
    if (v17)
      v17 = (void *)CFRetain(v17);
    *a4 = (CVPixelBufferRef)v17;
    v18 = *((_QWORD *)v9 + 57);
    goto LABEL_27;
  }
  if (CFEqual(a2, CFSTR("IsValid")))
    goto LABEL_30;
  if (CFEqual(a2, CFSTR("LastSentSubtitleSample")))
  {
    Copy = (void *)*((_QWORD *)v9 + 87);
    if (!Copy)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (CFEqual(a2, CFSTR("PlayerVolume")))
  {
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v20 = (int *)(v9 + 764);
    v21 = kCFNumberFloatType;
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("PlayerMuted")))
  {
    v12 = (__CFString **)MEMORY[0x1E0C9AE50];
    v13 = v9[774];
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("EQPreset")))
  {
    v45 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 80);
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v20 = &v45;
    v21 = kCFNumberIntType;
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("NetworkCacheURL")))
  {
    Copy = (void *)*((_QWORD *)v9 + 24);
    if (Copy)
      goto LABEL_14;
    return 4294954513;
  }
  if (CFEqual(a2, CFSTR("DisplayingClosedCaptions")))
  {
    v22 = (const void **)MEMORY[0x1E0C9AE50];
    v23 = v9[298];
    goto LABEL_46;
  }
  if (CFEqual(a2, CFSTR("DisplayClosedCaptions")))
  {
    v12 = (__CFString **)MEMORY[0x1E0C9AE50];
    v13 = v9[297];
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("RequiredNumberOfCAContextsForClosedCaptionLayers")))
  {
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v20 = (int *)(v9 + 320);
    v21 = kCFNumberSInt32Type;
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("ClosedCaptionCAContextIDArray")))
  {
    v24 = (const __CFArray *)*((_QWORD *)v9 + 41);
    if (!v24)
      return FigSignalErrorAt();
    Count = CFArrayGetCount(v24);
    if (Count < 1)
      return FigSignalErrorAt();
    v26 = Count;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v28 = (void *)MEMORY[0x19403137C]();
    for (i = 0; i != v26; ++i)
    {
      objc_msgSend((id)CFArrayGetValueAtIndex(*((CFArrayRef *)v9 + 41), i), "contextId");
      FigCFArrayAppendInt32();
    }
    objc_autoreleasePoolPop(v28);
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("ActionAtEnd")))
  {
    switch(*((_DWORD *)v9 + 194))
    {
      case 0:
        v12 = kFigPlayerAction_Advance;
        goto LABEL_13;
      case 1:
        v12 = kFigPlayerAction_Stop;
        goto LABEL_13;
      case 2:
        v12 = kFigPlayerAction_None;
        goto LABEL_13;
      case 3:
        v12 = kFigPlayerAction_StopAtEndOfQueue;
        goto LABEL_13;
      default:
        return 0;
    }
  }
  if (CFEqual(a2, CFSTR("ApplyVideoTrackMatrix")))
  {
    v12 = (__CFString **)MEMORY[0x1E0C9AE50];
    v13 = v9[783];
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("VideoLayerDestinationIsTVOut")))
  {
    v12 = (__CFString **)MEMORY[0x1E0C9AE40];
    v13 = v9[232];
    v14 = (__CFString **)MEMORY[0x1E0C9AE50];
LABEL_11:
    if (!v13)
      v12 = v14;
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("PreventDisplaySleepDuringVideoPlayback")))
  {
    v12 = (__CFString **)MEMORY[0x1E0C9AE50];
    v13 = v9[232];
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("CurrentlyDisplayedCVPixelBuffer")))
  {
    MEMORY[0x19402EA0C](*((_QWORD *)v9 + 62));
    v30 = (const __CFArray *)*((_QWORD *)v9 + 63);
    if (v30 && CFArrayGetCount(v30) >= 1)
    {
      CFArrayGetValueAtIndex(*((CFArrayRef *)v9 + 63), 0);
      v31 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v31 + 1120));
      v11 = FPSupport_CopyCurrentlyDisplayedPixelBufferFromCAImageQueueArray(*(CFArrayRef *)(v31 + 1104), a3, a4);
      MEMORY[0x19402EF04](*(_QWORD *)(v31 + 1120));
    }
    else
    {
      v11 = 0;
      *a4 = 0;
    }
    MEMORY[0x19402EA24](*((_QWORD *)v9 + 62));
    return v11;
  }
  if (!CFEqual(a2, CFSTR("CurrentVideoFrameRate")))
  {
    if (CFEqual(a2, CFSTR("AudioDeviceUID")))
    {
      *a4 = (CVPixelBufferRef)*((_QWORD *)v9 + 85);
      v33 = (const void *)*((_QWORD *)v9 + 85);
      if (v33)
        CFRetain(v33);
      return 0;
    }
    if (CFEqual(a2, CFSTR("EnableHardwareAcceleratedVideoDecoder")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v34 = (__CFString **)MEMORY[0x1E0C9AE40];
      v35 = *((_DWORD *)v9 + 196) == 1;
      goto LABEL_88;
    }
    if (CFEqual(a2, CFSTR("PreferredVideoDecoderGPURegistryID")))
    {
      Copy = (void *)*((_QWORD *)v9 + 99);
      if (!Copy)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("DisplayList")))
    {
      Copy = (void *)*((_QWORD *)v9 + 106);
      if (!Copy)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("ExternalProtectionStatus")))
    {
      MEMORY[0x19402EA0C](*((_QWORD *)v9 + 62));
      v36 = itemfig_copyExternalProtectionStatus(*((_QWORD *)v9 + 64), a3, a4);
      MEMORY[0x19402EA24](*((_QWORD *)v9 + 62));
      return v36;
    }
    if (CFEqual(a2, CFSTR("DecodeMultipleAudioTracks")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = v9[120];
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("DecodeMultipleVideoTracks")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = v9[121];
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("STSLabel")))
    {
      MEMORY[0x19402EEEC](*((_QWORD *)v9 + 3));
      v37 = (void *)*((_QWORD *)v9 + 2);
      if (v37)
        v37 = (void *)CFRetain(v37);
      *a4 = (CVPixelBufferRef)v37;
      v18 = *((_QWORD *)v9 + 3);
      goto LABEL_27;
    }
    if (CFEqual(a2, CFSTR("MinRateForAudioPlayback")))
    {
      if (!v9[801])
        goto LABEL_114;
      v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v20 = (int *)(v9 + 804);
      goto LABEL_113;
    }
    if (CFEqual(a2, CFSTR("MaxRateForAudioPlayback")))
    {
      if (!v9[802])
        goto LABEL_114;
      v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v20 = (int *)(v9 + 808);
LABEL_113:
      v21 = kCFNumberFloat32Type;
      goto LABEL_36;
    }
    if (CFEqual(a2, CFSTR("MasterClock")))
    {
      Copy = (void *)*((_QWORD *)v9 + 11);
      if (!Copy)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("SendToNero")))
    {
      v38 = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v38)
        return FigSignalErrorAt();
      Mutable = v38;
      if (v9[122])
        v39 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v39 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v38, CFSTR("Visuals"), *v39);
      MEMORY[0x19402EEEC](*((_QWORD *)v9 + 19));
      v40 = (const void *)*((_QWORD *)v9 + 20);
      if (v40)
      {
        v41 = CFRetain(v40);
        MEMORY[0x19402EF04](*((_QWORD *)v9 + 19));
        if (v41)
        {
          CFDictionarySetValue(Mutable, CFSTR("NeroTransport"), v41);
          CFRelease(v41);
        }
      }
      else
      {
        MEMORY[0x19402EF04](*((_QWORD *)v9 + 19));
      }
LABEL_60:
      v11 = 0;
      *a4 = Mutable;
      return v11;
    }
    if (CFEqual(a2, CFSTR("IsNeroPlaybackActive")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = v9[123];
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("ProhibitAMR")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = v9[856];
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("PlayQueueIsHungry")))
    {
      v12 = (__CFString **)MEMORY[0x1E0C9AE50];
      v13 = v9[813];
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("MediaSelectionCriteria")))
    {
      MEMORY[0x19402EEEC](*((_QWORD *)v9 + 94));
      v42 = (void *)*((_QWORD *)v9 + 91);
      if (v42)
LABEL_136:
        v42 = (void *)CFRetain(v42);
    }
    else
    {
      if (CFEqual(a2, CFSTR("AppliesMediaSelectionCriteriaAutomatically")))
      {
        v22 = (const void **)MEMORY[0x1E0C9AE50];
        v23 = v9[760];
LABEL_46:
        if (!v23)
          v22 = (const void **)MEMORY[0x1E0C9AE40];
        Copy = (void *)*v22;
        if (!*v22)
          goto LABEL_15;
        goto LABEL_14;
      }
      if (CFEqual(a2, CFSTR("DefaultMediaSelectionCriteria")))
      {
        Copy = FigAutomaticMediaSelectionCopyDefaultCriteria();
        goto LABEL_15;
      }
      if (!CFEqual(a2, CFSTR("LegibleFallbackMediaSelectionCriteria")))
      {
        if (CFEqual(a2, CFSTR("AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections")))
        {
          v12 = (__CFString **)MEMORY[0x1E0C9AE50];
          v13 = v9[744];
          goto LABEL_10;
        }
        if (CFEqual(a2, CFSTR("DestinationPixelBufferAttributes")))
        {
          MEMORY[0x19402EEEC](*((_QWORD *)v9 + 61));
          v43 = (void *)*((_QWORD *)v9 + 60);
          if (v43)
            v43 = (void *)CFRetain(v43);
          *a4 = (CVPixelBufferRef)v43;
          v18 = *((_QWORD *)v9 + 61);
          goto LABEL_27;
        }
        if (CFEqual(a2, CFSTR("AllowPixelBufferPoolSharing")))
        {
          Copy = (void *)*((_QWORD *)v9 + 108);
          if (Copy)
            goto LABEL_14;
          v12 = (__CFString **)MEMORY[0x1E0C9AE40];
          goto LABEL_13;
        }
        if (CFEqual(a2, CFSTR("OptionsForPreWiringPixelBuffers")))
        {
          MEMORY[0x19402EEEC](*((_QWORD *)v9 + 109));
          v44 = (void *)*((_QWORD *)v9 + 110);
          if (v44)
            v44 = (void *)CFRetain(v44);
          *a4 = (CVPixelBufferRef)v44;
          v18 = *((_QWORD *)v9 + 109);
          goto LABEL_27;
        }
        if (CFEqual(a2, CFSTR("PrepareItemOnDispatchQueue")))
        {
LABEL_30:
          v12 = (__CFString **)MEMORY[0x1E0C9AE50];
LABEL_13:
          Copy = *v12;
LABEL_14:
          Copy = (void *)CFRetain(Copy);
LABEL_15:
          v11 = 0;
          *a4 = (CVPixelBufferRef)Copy;
          return v11;
        }
        if (CFEqual(a2, CFSTR("MultichannelAudioStrategy")))
        {
          Copy = (void *)*((_QWORD *)v9 + 113);
          goto LABEL_14;
        }
        if (CFEqual(a2, CFSTR("PlaybackState")))
        {
          Copy = (void *)FigCFNumberCreateSInt32();
          goto LABEL_15;
        }
        if (!CFEqual(a2, CFSTR("AutomaticallyWaitsToMinimizeStalling")))
        {
          if (CFEqual(a2, CFSTR("CaptionPlaybackStrategy")))
          {
            if (v9[782])
              v12 = kFigPlayerCaptionRenderingStrategy_CoreTextSubtitleRenderer;
            else
              v12 = kFigPlayerCaptionRenderingStrategy_CaptionDisplayService;
            goto LABEL_13;
          }
          if (CFEqual(a2, CFSTR("CaptionPipelineStrategy")))
          {
            if (v9[781])
              v12 = kFigPlayerCaptionPipelineStrategy_AttributedStrings;
            else
              v12 = kFigPlayerCaptionPipelineStrategy_FigCaptions;
            goto LABEL_13;
          }
          if (!CFEqual(a2, CFSTR("RequiresNumVideoSlots")))
            return 4294954512;
          v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v20 = (int *)(v9 + 216);
          v21 = kCFNumberCFIndexType;
LABEL_36:
          Copy = CFNumberCreate(v19, v21, v20);
          goto LABEL_15;
        }
        v12 = (__CFString **)MEMORY[0x1E0C9AE40];
        v34 = (__CFString **)MEMORY[0x1E0C9AE50];
        v35 = v9[57] == 0;
LABEL_88:
        if (!v35)
          v12 = v34;
        goto LABEL_13;
      }
      MEMORY[0x19402EEEC](*((_QWORD *)v9 + 94));
      v42 = (void *)*((_QWORD *)v9 + 92);
      if (v42)
        goto LABEL_136;
    }
    *a4 = (CVPixelBufferRef)v42;
    v18 = *((_QWORD *)v9 + 94);
LABEL_27:
    MEMORY[0x19402EF04](v18);
    return 0;
  }
  v32 = *((_QWORD *)v9 + 71);
  if (!v32)
    return 4294954513;
  return FigRenderPipelineCopyProperty(v32, (uint64_t)CFSTR("CurrentVideoFrameRate"), *MEMORY[0x1E0C9AE00], (uint64_t)a4);
}

uint64_t playerfig_InvalidateItem(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  result = FigPlaybackItemGetFigBaseObject(a1);
  if (result)
  {
    v2 = result;
    result = CMBaseObjectGetVTable();
    v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v3)
      return v3(v2);
  }
  return result;
}

void playerfig_handleVideoTargetNotification(int a1, const void *a2, CFTypeRef cf1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2A2AC8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2
    && (CFEqual(cf1, CFSTR("PreferredDataChannelGroupsChanged")) || CFEqual(cf1, CFSTR("DataChannelSettingsChanged"))))
  {
    playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(a2, 0, 0);
  }
}

void playerfig_sendEmptyConfigurationToEachVideoTarget(int a1, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v5;
  BOOL v6;
  CFIndex v7;
  uint64_t v8;
  const void *ValueAtIndex;
  CFTypeRef v10;
  unsigned int (*v11)(const void *, CFTypeRef);
  CFTypeRef cf;

  cf = 0;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v5 = Count;
      if (playerfig_createDataChannelConfigurationAndSetIdentifiers(a1, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], (uint64_t *)&cf))v6 = 1;
      else
        v6 = v5 < 1;
      if (!v6)
      {
        v7 = 0;
        v8 = v5 - 1;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
          v10 = cf;
          v11 = *(unsigned int (**)(const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          if (!v11)
            break;
        }
        while (!v11(ValueAtIndex, v10) && v8 != v7++);
      }
      if (cf)
        CFRelease(cf);
    }
  }
}

uint64_t playerfig_externalStartupTaskCompleted(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 504);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
      return playerfig_updatePlaybackStateAndBossRate(a2, 34, 0);
  }
  return result;
}

uint64_t playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(const void *a1, const void *a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const __CFArray *v8;
  const __CFArray *v9;
  _BOOL4 v10;
  _BOOL4 shouldEnableMainVideo;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = playerfig_doesAnyWorkingOrLameDuckItemHaveVideo();
  if ((_DWORD)result)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    v8 = *(const __CFArray **)(DerivedStorage + 504);
    if (!v8
      || CFArrayGetCount(v8) < 1
      || playerfig_isCurrentItemQuiescent()
      || ((v9 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 392)) == 0
        ? (v10 = 0)
        : (v10 = CFArrayGetCount(v9) > 0),
          (shouldEnableMainVideo = itemfig_shouldEnableMainVideo(), v10) && shouldEnableMainVideo
       || itemfig_rebuildRenderPipelinesAndBossGuts(*(const void **)(DerivedStorage + 512), 0, 0, 1, 0, 0, 1)|| itemfig_rebuildRenderPipelinesAndBossGuts(*(const void **)(DerivedStorage + 512), 1, 1, 1, 0, a2, 0)))
    {
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
      v15 = *MEMORY[0x1E0CA2E18];
      v16 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v13 = v15;
      v14 = v16;
      result = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&v15, (uint64_t)&v13, a2);
      if (a3)
      {
        if (!(_DWORD)result)
          *a3 = 1;
      }
    }
    else
    {
      if (dword_1EE2A2AC8 >= 2)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a3)
        *a3 = 1;
      playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, *(const __CFString **)(DerivedStorage + 512), MEMORY[0x1E0CA2E18]);
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
      return 0;
    }
  }
  return result;
}

uint64_t itemfig_copyExternalProtectionStatus(uint64_t a1, CFAllocatorRef allocator, CFDictionaryRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t, int *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  BOOL v16;
  __CFString **v17;
  int v18;
  CFBooleanRef BOOLean;
  void *values[21];

  values[20] = *(void **)MEMORY[0x1E0C80C00];
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    values[0] = 0;
    v6 = *(_QWORD *)(DerivedStorage + 1160);
    if (v6)
    {
      v7 = DerivedStorage;
      BOOLean = 0;
      v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
      if (v8)
      {
        result = v8(v6, CFSTR("ExternalProtectionRequiredForPlayback"), *MEMORY[0x1E0C9AE00], &BOOLean);
        if ((_DWORD)result)
          goto LABEL_21;
        if (!CFBooleanGetValue(BOOLean))
        {
          v14 = 0;
LABEL_30:
          if (BOOLean)
            CFRelease(BOOLean);
          goto LABEL_12;
        }
        v18 = 0;
        v10 = *(_QWORD *)(v7 + 1160);
        v11 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        if (*v11)
        {
          v12 = (uint64_t (*)(uint64_t, int *))v11[9];
          if (v12)
          {
            result = v12(v10, &v18);
            if (!(_DWORD)result)
            {
              if (dword_1EE2A2AC8 >= 2)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v16 = v18 == 1 || v18 == 4;
              v17 = kFigPlayerExternalProtectionStatus_NotProtected;
              if (v16)
                v17 = kFigPlayerExternalProtectionStatus_Protected;
              values[0] = *v17;
              v14 = CFDictionaryCreate(allocator, (const void **)kFigPlayerExternalProtectionStatusKey_Video, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!v14)
              {
                result = 4294954510;
                goto LABEL_22;
              }
              goto LABEL_30;
            }
LABEL_21:
            v14 = 0;
            goto LABEL_22;
          }
        }
      }
      result = 4294954514;
      goto LABEL_21;
    }
  }
  v14 = 0;
LABEL_12:
  if (v14)
  {
    result = 0;
  }
  else
  {
    v15 = CFDictionaryCreate(allocator, (const void **)kFigPlayerExternalProtectionStatusKey_Video, (const void **)kFigPlayerExternalProtectionStatus_Protected, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v15)
      result = 0;
    else
      result = 4294954510;
    if (v15)
      v14 = v15;
    else
      v14 = 0;
  }
LABEL_22:
  *a3 = v14;
  return result;
}

uint64_t playerfig_handleSetProperty(const void *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, _BYTE *a5)
{
  uint64_t v6;
  _BYTE *DerivedStorage;
  _BYTE *v11;
  CFTypeID TypeID;
  uint64_t v13;
  int v14;
  const void *v15;
  CFTypeID v16;
  uint64_t v17;
  const void *v18;
  const __CFArray *v19;
  uint64_t v20;
  CGSize v21;
  __int128 v22;
  __int128 v23;
  CFTypeID v24;
  const __CFDictionary *Value;
  const __CFDictionary *v26;
  int v27;
  int v28;
  int v29;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v31;
  CFTypeID v32;
  const __CFNumber *v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  int v37;
  const void *v38;
  NSObject *v39;
  unsigned int x_low;
  unsigned int v41;
  const char *v42;
  uint64_t v43;
  CFTypeID v44;
  const __CFNumber *v45;
  const __CFBoolean *v46;
  int v47;
  CGRect *v48;
  __int128 *v49;
  const __CFNumber *v50;
  CFDictionaryRef v51;
  CFTypeID v52;
  int v53;
  NSObject *v54;
  unsigned int v55;
  unsigned int v56;
  const char *v57;
  CFTypeID v58;
  CFTypeID v59;
  CGFloat width;
  uint64_t v61;
  CFTypeID v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  CFTypeID v69;
  void *v70;
  CFTypeID v71;
  CFTypeID v72;
  const void *v73;
  CFTypeRef v74;
  CFTypeID v75;
  Boolean v76;
  CFTypeID v77;
  Boolean v78;
  CFTypeID v79;
  const __CFAllocator *v80;
  CFNumberRef v81;
  CFDictionaryRef v82;
  uint64_t v83;
  CFTypeID v84;
  int v85;
  int v86;
  CFTypeID v87;
  int width_low;
  CFTypeID v89;
  Boolean v90;
  CFTypeID v91;
  Boolean v92;
  CFTypeID v93;
  int v94;
  CFTypeID v95;
  CFTypeID v96;
  CFTypeID v97;
  CFTypeID v98;
  const void *v99;
  CFTypeRef v100;
  const void *v101;
  CFTypeID v102;
  CFTypeID v103;
  int v104;
  uint64_t v105;
  int v106;
  const void *v107;
  CFTypeID v108;
  int v109;
  int v110;
  int ActionAtEndForString;
  CFTypeID v112;
  int v113;
  uint64_t v114;
  CFTypeID v115;
  const void *v116;
  const __CFArray *v117;
  CFTypeID v118;
  const void *v119;
  CFTypeRef v120;
  CFTypeID v121;
  const void *v122;
  CFTypeID v123;
  const void *v124;
  CFTypeID v125;
  BOOL v126;
  int v127;
  CFTypeID v128;
  const void *v129;
  CFTypeID v130;
  int v131;
  const void *v132;
  CFTypeID v133;
  CFArrayRef Copy;
  CFArrayRef v135;
  CFTypeID v136;
  const void *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, const __CFString *, uint64_t);
  CFTypeID v142;
  CFTypeID v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  CFTypeID v148;
  int v149;
  NSObject *v150;
  unsigned int v151;
  unsigned int v152;
  double v153;
  CFTypeID v154;
  int v155;
  NSObject *v156;
  unsigned int v157;
  unsigned int v158;
  double v159;
  CFTypeID v160;
  const void *v161;
  CFTypeID v162;
  const __CFBoolean *v163;
  const __CFBoolean *v164;
  int v165;
  BOOL v166;
  CFTypeID v167;
  const void *v168;
  uint64_t v169;
  uint64_t v170;
  CFTypeID v171;
  const void *v172;
  uint64_t v173;
  CFTypeID v174;
  Boolean v175;
  CFTypeID v176;
  CFTypeID v177;
  const void *v178;
  CFTypeRef v179;
  uint64_t v180;
  CFTypeID v181;
  int v182;
  int v183;
  uint64_t updated;
  NSObject *v185;
  NSObject *v186;
  unsigned int v187;
  unsigned int v188;
  NSObject *v189;
  NSObject *v190;
  unsigned int v191;
  unsigned int v192;
  Boolean v193;
  const void *v194;
  const void *v195;
  uint64_t v196;
  uint64_t v197;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const void *v202;
  CFDictionaryRef v203;
  CFTypeID v204;
  Boolean v205;
  const void *v206;
  uint64_t v207;
  CFTypeID v208;
  const void *v209;
  int v210;
  CFTypeID v211;
  const void *v212;
  CFTypeID v213;
  int v214;
  uint64_t v215;
  CFTypeID v216;
  CFTypeID v217;
  CFTypeID v218;
  int v219;
  CFTypeID v220;
  char v221;
  CFTypeID v222;
  char v223;
  CFTypeID v224;
  int v225;
  NSObject *v226;
  CGRect v227;
  int v228;
  CFDictionaryRef theDict;
  _BYTE v230[24];
  double v231;
  __int16 v232;
  _BYTE v233[14];
  __int16 v234;
  const void *v235;
  CGSize size;
  uint64_t v237;
  _OWORD valuePtr[4];
  CGRect rect;
  uint64_t v240;

  v6 = (uint64_t)a4;
  v240 = *MEMORY[0x1E0C80C00];
  theDict = a4;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  *a5 = 1;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v11 = DerivedStorage;
  if (CFEqual(a3, CFSTR("DestinationPixelBufferAttributes")))
  {
    if (!v6 || (TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID((CFTypeRef)v6)))
    {
      v13 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v13 + 488));
      v14 = FigCFEqual();
      v15 = *(const void **)(v13 + 480);
      *(_QWORD *)(v13 + 480) = v6;
      if (v6)
        CFRetain((CFTypeRef)v6);
      if (v15)
        CFRelease(v15);
      MEMORY[0x19402EF04](*(_QWORD *)(v13 + 488));
      if (v14)
        return 0;
LABEL_11:
      playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(a1, 0, 0);
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a3, CFSTR("ClosedCaptionLayerArray")))
  {
    if (!v6 || (v16 = CFArrayGetTypeID(), v16 == CFGetTypeID((CFTypeRef)v6)))
    {
      v17 = CMBaseObjectGetDerivedStorage();
      if (!FigCFEqual())
      {
        v18 = *(const void **)(v17 + 288);
        if (v6)
          v19 = (const __CFArray *)CFRetain((CFTypeRef)v6);
        else
          v19 = 0;
        *(_QWORD *)(v17 + 288) = v19;
        FPSupport_updateClosedCaptionLayer(v17 + 296, v19);
        objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
        if (!pthread_main_np())
          objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
        objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
        if (v18)
          CFRelease(v18);
        objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
      }
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a3, CFSTR("ClosedCaptionLayerBoundsUpdate")))
  {
    v20 = CMBaseObjectGetDerivedStorage();
    v228 = 0;
    v21 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
    rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
    rect.size = v21;
    v227.origin = rect.origin;
    v227.size = v21;
    v22 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 16);
    valuePtr[0] = *MEMORY[0x1E0CA4AD8];
    valuePtr[1] = v22;
    v23 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 48);
    valuePtr[2] = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 32);
    valuePtr[3] = v23;
    if (v6 && (v24 = CFDictionaryGetTypeID(), v24 == CFGetTypeID((CFTypeRef)v6)))
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("ClosedCaptionLayerBoundsUpdate_LayerBounds"));
      if (Value)
      {
        CGRectMakeWithDictionaryRepresentation(Value, &rect);
        v6 = (uint64_t)theDict;
      }
      v26 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("ClosedCaptionLayerBoundsUpdate_LayerVideoRelativeToViewport"));
      if (v26)
      {
        CGRectMakeWithDictionaryRepresentation(v26, &v227);
        v27 = 1;
      }
      else
      {
        v27 = 0;
      }
      if (CFDictionaryGetValue(theDict, CFSTR("ClosedCaptionLayerBoundsUpdate_LayerCaptionsAvoidanceMargins")))
      {
        FigGeometryMarginsMakeFromDictionary();
        v28 = 1;
      }
      else
      {
        v28 = 0;
      }
      v50 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ClosedCaptionLayerBoundsUpdate_LayerIndex"));
      if (v50)
      {
        CFNumberGetValue(v50, kCFNumberIntType, &v228);
        v6 = 0;
        v29 = v228;
        if (v228 < 0)
          return v6;
LABEL_27:
        if (dword_1EE2A2AC8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v29 = v228;
        }
        if (v27)
          v48 = &v227;
        else
          v48 = 0;
        if (v28)
          v49 = valuePtr;
        else
          v49 = 0;
        FPSupport_updateClosedCaptionLayerBounds(v20 + 296, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, *(_QWORD *)(v20 + 288), v29, v48, v49);
        return v6;
      }
      v6 = 0;
    }
    else
    {
      v6 = FigSignalErrorAt();
      v27 = 0;
      v28 = 0;
    }
    v29 = 0;
    goto LABEL_27;
  }
  if (CFEqual(a3, CFSTR("ClosedCaptionLayerSetOptions")))
  {
    v31 = CMBaseObjectGetDerivedStorage();
    LODWORD(valuePtr[0]) = 0;
    if (!v6 || (v32 = CFDictionaryGetTypeID(), v32 != CFGetTypeID((CFTypeRef)v6)))
    {
      v6 = FigSignalErrorAt();
      v35 = 0;
      v38 = 0;
      v37 = 0;
      goto LABEL_47;
    }
    v33 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("ClosedCaptionLayerSetOption_LayerIndex"));
    if (v33)
      CFNumberGetValue(v33, kCFNumberIntType, valuePtr);
    v34 = FigCFDictionaryGetValue();
    if (v34)
    {
      v35 = (const void *)v34;
      v36 = FigCFDictionaryGetValue();
      if (v36)
      {
        v6 = 0;
        v37 = valuePtr[0];
        if ((valuePtr[0] & 0x80000000) != 0)
          return v6;
        v38 = (const void *)v36;
LABEL_47:
        if (dword_1EE2A2AC8)
        {
          LODWORD(rect.origin.x) = 0;
          LOBYTE(v227.origin.x) = 0;
          v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          x_low = LODWORD(rect.origin.x);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            v41 = x_low;
          else
            v41 = x_low & 0xFFFFFFFE;
          if (v41)
          {
            if (a1)
              v42 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              *(double *)&v42 = COERCE_DOUBLE("");
            *(_DWORD *)v230 = 136316418;
            *(_QWORD *)&v230[4] = "playerfig_handleSetProperty";
            *(_WORD *)&v230[12] = 2048;
            *(_QWORD *)&v230[14] = a1;
            *(_WORD *)&v230[22] = 2082;
            v231 = *(double *)&v42;
            v232 = 1024;
            *(_DWORD *)v233 = valuePtr[0];
            *(_WORD *)&v233[4] = 2112;
            *(_QWORD *)&v233[6] = v35;
            v234 = 2112;
            v235 = v38;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v37 = valuePtr[0];
        }
        FPSupport_setClosedCaptionLayerOptions(v31 + 296, *(_QWORD *)(v31 + 288), v37, v35, v38);
        return v6;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a3, CFSTR("ClosedCaptionLayerSetSeparated")))
  {
    v43 = CMBaseObjectGetDerivedStorage();
    LODWORD(valuePtr[0]) = 0;
    if (v6 && (v44 = CFDictionaryGetTypeID(), v44 == CFGetTypeID((CFTypeRef)v6)))
    {
      v45 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("ClosedCaptionLayerSetSeparated_LayerIndex"));
      if (v45)
        CFNumberGetValue(v45, kCFNumberIntType, valuePtr);
      v46 = (const __CFBoolean *)FigCFDictionaryGetValue();
      if (v46)
        v47 = CFBooleanGetValue(v46);
      else
        v47 = 0;
      v6 = 0;
    }
    else
    {
      v6 = FigSignalErrorAt();
      v47 = 0;
    }
    v53 = valuePtr[0];
    if ((valuePtr[0] & 0x80000000) == 0)
    {
      if (dword_1EE2A2AC8)
      {
        LODWORD(rect.origin.x) = 0;
        LOBYTE(v227.origin.x) = 0;
        v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v55 = LODWORD(rect.origin.x);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          v56 = v55;
        else
          v56 = v55 & 0xFFFFFFFE;
        if (v56)
        {
          if (a1)
            v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          else
            *(double *)&v57 = COERCE_DOUBLE("");
          *(_DWORD *)v230 = 136316162;
          *(_QWORD *)&v230[4] = "playerfig_handleSetProperty";
          *(_WORD *)&v230[12] = 2048;
          *(_QWORD *)&v230[14] = a1;
          *(_WORD *)&v230[22] = 2082;
          v231 = *(double *)&v57;
          v232 = 1024;
          *(_DWORD *)v233 = valuePtr[0];
          *(_WORD *)&v233[4] = 2112;
          *(_QWORD *)&v233[6] = theDict;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v53 = valuePtr[0];
      }
      FPSupport_setClosedCaptionLayerSeparated(v43 + 296, *(_QWORD *)(v43 + 288), v53, v47);
    }
    return v6;
  }
  if (!CFEqual(a3, CFSTR("VideoLayer")))
  {
    if (CFEqual(a3, CFSTR("VideoLayerArray")))
    {
      if (v6)
      {
        v52 = CFArrayGetTypeID();
        if (v52 != CFGetTypeID((CFTypeRef)v6))
          return FigSignalErrorAt();
      }
      return playerfig_setClientVideoLayerArray(a1, (const __CFArray *)v6);
    }
    if (CFEqual(a3, CFSTR("VideoTargetArray")))
    {
      if (v6)
      {
        v58 = CFGetTypeID((CFTypeRef)v6);
        if (v58 != CFArrayGetTypeID())
          return FigSignalErrorAt();
      }
      return playerfig_setVideoTargetArray(a1, (const __CFArray *)v6);
    }
    if (CFEqual(a3, CFSTR("RequiresNumVideoSlots")))
    {
      if (v6)
      {
        v59 = CFGetTypeID((CFTypeRef)v6);
        if (v59 == CFNumberGetTypeID())
        {
          size.width = 0.0;
          CFNumberGetValue((CFNumberRef)v6, kCFNumberCFIndexType, &size);
          width = size.width;
          v61 = *((_QWORD *)v11 + 27);
          if (*(_QWORD *)&size.width == v61)
            return 0;
          *((_QWORD *)v11 + 27) = *(_QWORD *)&size.width;
          if (!playerfig_doesAnyWorkingOrLameDuckItemHaveVideo())
            return 0;
          if (!(*(uint64_t *)&width >= v61
               ? playerfig_gracefullyAddImageQueues((uint64_t)a1, 0)
               : playerfig_removeExcessImageQueuesAndSlotsFromAllWorkingOrLameDuckItems((uint64_t)a1, 0)))
            return 0;
          if (*((uint64_t *)v11 + 27) <= 0)
            playerfig_removeAllImageQueuesFromAllWorkingOrLameDuckItems();
          else
            playerfig_resetAlreadyPostedFirstVideoFrameEnqueuedNotificationFlagFromAllWorkingOrLameDuckItems();
          goto LABEL_11;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("VideoLayerDestinationIsTVOut"))
      || CFEqual(a3, CFSTR("PreventDisplaySleepDuringVideoPlayback")))
    {
      if (v6)
      {
        v63 = CFBooleanGetTypeID();
        if (v63 == CFGetTypeID((CFTypeRef)v6))
        {
          v64 = CFEqual(a3, CFSTR("PreventDisplaySleepDuringVideoPlayback"));
          v65 = CFBooleanGetValue((CFBooleanRef)v6);
          v66 = v65 == 0;
          if (v64)
            v66 = v65;
          if (v11[232] != v66)
          {
            v11[232] = v66;
            v67 = *((_QWORD *)v11 + 71);
            if (v67)
            {
              if (v66)
                v68 = (uint64_t *)MEMORY[0x1E0C9AE50];
              else
                v68 = (uint64_t *)MEMORY[0x1E0C9AE40];
              FigRenderPipelineSetProperty_0(v67, (uint64_t)CFSTR("PreventDisplaySleepDuringVideoPlayback"), *v68);
            }
          }
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("ImageQueueSlotTransitionFinished")))
      playerfig_freeTransitionImageQueueAndSlot();
    if (CFEqual(a3, CFSTR("AudioPipelineEarlyDump")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v69 = CFGetTypeID((CFTypeRef)v6);
      if (v69 != CFNumberGetTypeID())
        return FigSignalErrorAt();
      v70 = v11 + 112;
LABEL_144:
      CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, v70);
      return 0;
    }
    if (CFEqual(a3, CFSTR("VideoPipelineEarlyDump")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v71 = CFGetTypeID((CFTypeRef)v6);
      if (v71 != CFNumberGetTypeID())
        return FigSignalErrorAt();
      v70 = v11 + 116;
      goto LABEL_144;
    }
    if (CFEqual(a3, CFSTR("NetworkCacheURL")) && v6)
    {
      v72 = CFGetTypeID((CFTypeRef)v6);
      if (v72 == CFURLGetTypeID())
      {
        v73 = (const void *)*((_QWORD *)v11 + 24);
        if (v73)
          CFRelease(v73);
        v74 = CFRetain((CFTypeRef)v6);
        v6 = 0;
        *((_QWORD *)v11 + 24) = v74;
        return v6;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("DisallowVideoLayerDisplayCompositing")))
    {
      if (v6)
      {
        v75 = CFGetTypeID((CFTypeRef)v6);
        if (v75 == CFBooleanGetTypeID())
        {
          v76 = CFBooleanGetValue((CFBooleanRef)v6);
          v6 = 0;
          v11[233] = v76;
          return v6;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("AllowGaplessTransitions")))
    {
      if (v6)
      {
        v77 = CFGetTypeID((CFTypeRef)v6);
        if (v77 == CFBooleanGetTypeID())
        {
          v78 = CFBooleanGetValue((CFBooleanRef)v6);
          v6 = 0;
          v11[77] = v78;
          return v6;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("PlayerVolume")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v79 = CFGetTypeID((CFTypeRef)v6);
      if (v79 != CFNumberGetTypeID())
        return FigSignalErrorAt();
      LODWORD(v227.origin.x) = 0;
      CFNumberGetValue((CFNumberRef)v6, kCFNumberFloat32Type, &v227);
      if (*(float *)&v227.origin.x == *((float *)v11 + 191))
        return 0;
      v80 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v81 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &v227);
      *(_QWORD *)&valuePtr[0] = CFSTR("AVController_Volume");
      *(_QWORD *)&rect.origin.x = v81;
      v82 = CFDictionaryCreate(v80, (const void **)valuePtr, (const void **)&rect, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      MEMORY[0x19402EA0C](*((_QWORD *)v11 + 62));
      *((_DWORD *)v11 + 191) = LODWORD(v227.origin.x);
      if (*((_QWORD *)v11 + 64))
      {
        if (playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem((uint64_t)a1, 0))
        {
          MEMORY[0x19402EA24](*((_QWORD *)v11 + 62));
          size = (CGSize)*MEMORY[0x1E0CA2E18];
          v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          *(CGSize *)v230 = size;
          *(_QWORD *)&v230[16] = v237;
          playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v230, 0);
          v83 = 0;
LABEL_185:
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v82)
            CFRelease(v82);
          if (v81)
            CFRelease(v81);
          return v83;
        }
        v83 = playerfig_applySoftwareVolume((uint64_t)a1, CFSTR("SoftwareVolume1"), 0, *((float *)v11 + 191), 0.0);
      }
      else
      {
        v83 = 0;
      }
      MEMORY[0x19402EA24](*((_QWORD *)v11 + 62));
      goto LABEL_185;
    }
    if (CFEqual(a3, CFSTR("PlayerMuted")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v84 = CFGetTypeID((CFTypeRef)v6);
      if (v84 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v85 = CFBooleanGetValue((CFBooleanRef)v6);
      if (v11[774] == v85)
        return 0;
      v86 = v85;
      MEMORY[0x19402EA0C](*((_QWORD *)v11 + 62));
      if (*((_QWORD *)v11 + 64))
      {
        if (playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem((uint64_t)a1, 1))
        {
          v11[774] = v86;
          MEMORY[0x19402EA24](*((_QWORD *)v11 + 62));
          size = (CGSize)*MEMORY[0x1E0CA2E18];
          v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          *(CGSize *)v230 = size;
          *(_QWORD *)&v230[16] = v237;
          playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v230, 0);
          v6 = 0;
          goto LABEL_197;
        }
        v6 = itemfig_setMuted(*((_QWORD *)v11 + 64), v86);
      }
      else
      {
        v6 = 0;
      }
      v11[774] = v86;
      MEMORY[0x19402EA24](*((_QWORD *)v11 + 62));
LABEL_197:
      v51 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlayerParameter_CurrentMuted, (const void **)&theDict, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (!v51)
        return v6;
      goto LABEL_80;
    }
    if (CFEqual(a3, CFSTR("EQPreset")))
    {
      if (v6)
      {
        v87 = CFGetTypeID((CFTypeRef)v6);
        if (v87 == CFNumberGetTypeID())
        {
          LODWORD(size.width) = 0;
          CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &size);
          width_low = LODWORD(size.width);
          *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 80) = width_low;
          playerfig_applyEQPreset((uint64_t)a1);
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("SetVideoLayerBoundsAutomatically")))
    {
      if (v6)
      {
        v89 = CFGetTypeID((CFTypeRef)v6);
        if (v89 == CFBooleanGetTypeID())
        {
          v90 = CFBooleanGetValue((CFBooleanRef)v6);
          v6 = 0;
          v11[76] = v90;
          return v6;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("PostClosedCaptionCommands")))
    {
      if (v6)
      {
        v91 = CFGetTypeID((CFTypeRef)v6);
        if (v91 == CFBooleanGetTypeID())
        {
          v92 = CFBooleanGetValue((CFBooleanRef)v6);
          v6 = 0;
          v11[296] = v92;
          return v6;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("DisplayClosedCaptions")))
    {
      if (v6)
      {
        v93 = CFGetTypeID((CFTypeRef)v6);
        if (v93 == CFBooleanGetTypeID())
        {
          v94 = CFBooleanGetValue((CFBooleanRef)v6);
          playerfig_setClosedCaptionsDisplayRequested(a1, v94);
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("RequiredNumberOfCAContextsForClosedCaptionLayers")))
    {
      if (!v6)
        return v6;
      v95 = CFGetTypeID((CFTypeRef)v6);
      if (v95 == CFNumberGetTypeID())
      {
        LODWORD(size.width) = 0;
        CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, &size);
        if (LODWORD(size.width) != *((_DWORD *)v11 + 80))
        {
          *((_DWORD *)v11 + 80) = LODWORD(size.width);
          FPSupport_updateClosedCaptionLayer((uint64_t)(v11 + 296), *((const __CFArray **)v11 + 36));
        }
      }
      return 0;
    }
    if (CFEqual(a3, CFSTR("DisplayNonForcedSubtitles")))
    {
      if (v6)
      {
        v96 = CFGetTypeID((CFTypeRef)v6);
        if (v96 == CFBooleanGetTypeID())
        {
          v11[688] = CFBooleanGetValue((CFBooleanRef)v6);
          playerfig_updateSubtitleDisplayForItem((uint64_t)a1, 0);
          playerfig_updateCaptionOrSubtitleHintOnVideoPipeline((uint64_t)a1, 0);
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("PreferredLanguageList")))
    {
      if (!v6 || (v97 = CFDictionaryGetTypeID(), v97 == CFGetTypeID((CFTypeRef)v6)))
      {
        playerfig_setPreferredLanguageLists((uint64_t)a1, (const void *)v6);
        return 0;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("MediaSelectionCriteria")))
    {
      if (v6)
      {
        v98 = CFGetTypeID((CFTypeRef)v6);
        if (v98 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
      }
      MEMORY[0x19402EEEC](*((_QWORD *)v11 + 94));
      if (!FigCFEqual())
      {
        v99 = (const void *)*((_QWORD *)v11 + 91);
        if (v99)
        {
          v100 = CFRetain(v99);
          v101 = (const void *)*((_QWORD *)v11 + 91);
        }
        else
        {
          v101 = 0;
          v100 = 0;
        }
        *((_QWORD *)v11 + 91) = v6;
        if (!v6)
          goto LABEL_235;
        goto LABEL_234;
      }
      goto LABEL_226;
    }
    if (CFEqual(a3, CFSTR("LegibleFallbackMediaSelectionCriteria")))
    {
      if (v6)
      {
        v102 = CFGetTypeID((CFTypeRef)v6);
        if (v102 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
      }
      MEMORY[0x19402EEEC](*((_QWORD *)v11 + 94));
      if (!FigCFEqual())
      {
        v107 = (const void *)*((_QWORD *)v11 + 92);
        if (v107)
        {
          v100 = CFRetain(v107);
          v101 = (const void *)*((_QWORD *)v11 + 92);
        }
        else
        {
          v101 = 0;
          v100 = 0;
        }
        *((_QWORD *)v11 + 92) = v6;
        if (!v6)
          goto LABEL_235;
LABEL_234:
        CFRetain((CFTypeRef)v6);
LABEL_235:
        if (v101)
          CFRelease(v101);
        MEMORY[0x19402EF04](*((_QWORD *)v11 + 94));
        if (v100)
          CFRelease(v100);
        goto LABEL_239;
      }
LABEL_226:
      MEMORY[0x19402EF04](*((_QWORD *)v11 + 94));
      return 0;
    }
    if (CFEqual(a3, CFSTR("AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v103 = CFBooleanGetTypeID();
      if (v103 != CFGetTypeID((CFTypeRef)v6))
        return FigSignalErrorAt();
      v104 = v11[744] != 0;
      v11[744] = CFBooleanGetValue((CFBooleanRef)v6);
      if (v11[760] == v104)
        return 0;
      goto LABEL_239;
    }
    if (CFEqual(a3, CFSTR("AppliesMediaSelectionCriteriaAutomatically")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v108 = CFBooleanGetTypeID();
      if (v108 != CFGetTypeID((CFTypeRef)v6))
        return FigSignalErrorAt();
      v109 = v11[760];
      v110 = CFBooleanGetValue((CFBooleanRef)v6);
      v6 = 0;
      v11[760] = v110;
      if (!v110 || v109)
        return v6;
      goto LABEL_239;
    }
    if (CFEqual(a3, CFSTR("ActionAtEnd")))
    {
      ActionAtEndForString = FigPlaybackGetActionAtEndForString((const void *)v6);
      playerfig_setActionAtEnd(a1, ActionAtEndForString);
      return 0;
    }
    if (CFEqual(a3, CFSTR("ApplyVideoTrackMatrix")))
    {
      if (!v6)
        return v6;
      v112 = CFGetTypeID((CFTypeRef)v6);
      if (v112 != CFBooleanGetTypeID())
        return 0;
      v113 = CFBooleanGetValue((CFBooleanRef)v6);
      if (v113 != v11[783])
      {
        v11[783] = v113;
        MEMORY[0x19402EEEC](*((_QWORD *)v11 + 28));
        playerfig_updateVideoLayerSize(a1, 0);
        MEMORY[0x19402EF04](*((_QWORD *)v11 + 28));
        v114 = *((_QWORD *)v11 + 64);
        if (v114)
          itemfig_updateRotationOnVideoRenderPipeline(v114, 0);
        return 0;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("TimeAccuracy")))
    {
      MEMORY[0x19402EEEC](*((_QWORD *)v11 + 5));
      if (CFSetGetCount(*((CFSetRef *)v11 + 4)) < 1)
      {
        if (CFEqual((CFTypeRef)v6, CFSTR("Exact")))
        {
          v6 = 0;
          v11[78] = 1;
          goto LABEL_287;
        }
        if (CFEqual((CFTypeRef)v6, CFSTR("Approximate")))
        {
          v6 = 0;
          v11[78] = 0;
          goto LABEL_287;
        }
      }
      v6 = FigSignalErrorAt();
LABEL_287:
      MEMORY[0x19402EF04](*((_QWORD *)v11 + 5));
      return v6;
    }
    if (CFEqual(a3, CFSTR("FigAudioSession")))
    {
      if (v6)
      {
        v115 = CFGetTypeID((CFTypeRef)v6);
        if (v115 != FigAudioSessionGetTypeID())
          return FigSignalErrorAt();
      }
      MEMORY[0x19402EEEC](*((_QWORD *)v11 + 57));
      v116 = (const void *)*((_QWORD *)v11 + 58);
      *((_QWORD *)v11 + 58) = v6;
      if (v6)
        CFRetain((CFTypeRef)v6);
      if (v116)
        CFRelease(v116);
      MEMORY[0x19402EF04](*((_QWORD *)v11 + 57));
      if (!*((_QWORD *)v11 + 70))
      {
        v117 = (const __CFArray *)*((_QWORD *)v11 + 79);
        if (v117)
          CFArrayGetCount(v117);
      }
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
      goto LABEL_274;
    }
    if (CFEqual(a3, CFSTR("FigAudioSession2")))
      return 0;
    if (CFEqual(a3, CFSTR("ClientName")))
    {
      if (!v6 || (v118 = CFStringGetTypeID(), v118 == CFGetTypeID((CFTypeRef)v6)))
      {
        v119 = (const void *)*((_QWORD *)v11 + 1);
        if (v119)
        {
          CFRelease(v119);
          *((_QWORD *)v11 + 1) = 0;
        }
        if (v6)
        {
          v120 = CFRetain((CFTypeRef)v6);
          v6 = 0;
          *((_QWORD *)v11 + 1) = v120;
        }
        return v6;
      }
      return 0;
    }
    if (CFEqual(a3, CFSTR("STSLabel")))
    {
      if (v6)
      {
        v121 = CFStringGetTypeID();
        if (v121 != CFGetTypeID((CFTypeRef)v6))
          return 0;
      }
      MEMORY[0x19402EEEC](*((_QWORD *)v11 + 3));
      v122 = (const void *)*((_QWORD *)v11 + 2);
      *((_QWORD *)v11 + 2) = v6;
      if (v6)
        CFRetain((CFTypeRef)v6);
      if (v122)
        CFRelease(v122);
      MEMORY[0x19402EF04](*((_QWORD *)v11 + 3));
      return fp_setPropertyOnAllAudioRenderPipelines((uint64_t)a1, (uint64_t)CFSTR("STSLabel"), *((_QWORD *)v11 + 2));
    }
    if (CFEqual(a3, CFSTR("AudioDeviceUID")))
    {
      if (v6)
      {
        v123 = CFStringGetTypeID();
        if (v123 != CFGetTypeID((CFTypeRef)v6))
          return 0;
      }
      if (FigCFEqual())
        return 0;
      v124 = (const void *)*((_QWORD *)v11 + 85);
      *((_QWORD *)v11 + 85) = v6;
      if (v6)
        CFRetain((CFTypeRef)v6);
      if (v124)
        CFRelease(v124);
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
LABEL_305:
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v230, 0);
LABEL_239:
      v105 = (uint64_t)a1;
      v106 = 0;
LABEL_240:
      playerfig_applyAutoSelectionCriteriaInternal(v105, v106, 0);
      return 0;
    }
    if (CFEqual(a3, CFSTR("EnableHardwareAcceleratedVideoDecoder")))
    {
      if (!v6)
      {
        *((_DWORD *)v11 + 196) = 0;
        return v6;
      }
      v125 = CFGetTypeID((CFTypeRef)v6);
      if (v125 == CFBooleanGetTypeID())
      {
        v126 = *MEMORY[0x1E0C9AE50] == v6;
        v6 = 0;
        if (v126)
          v127 = 1;
        else
          v127 = 2;
        *((_DWORD *)v11 + 196) = v127;
        return v6;
      }
      return 4294954516;
    }
    if (CFEqual(a3, CFSTR("PreferredVideoDecoderGPURegistryID")))
    {
      if (!v6 || (v128 = CFNumberGetTypeID(), v128 == CFGetTypeID((CFTypeRef)v6)))
      {
        if (FigCFEqual())
          return 0;
        v129 = (const void *)*((_QWORD *)v11 + 99);
        *((_QWORD *)v11 + 99) = v6;
        if (v6)
          CFRetain((CFTypeRef)v6);
        if (v129)
          CFRelease(v129);
        size = (CGSize)*MEMORY[0x1E0CA2E18];
        v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        *(CGSize *)v230 = size;
        *(_QWORD *)&v230[16] = v237;
        goto LABEL_274;
      }
      return 4294954516;
    }
    if (CFEqual(a3, CFSTR("GatherPerformanceHistoryArray")))
    {
      if (v6)
      {
        v130 = CFBooleanGetTypeID();
        if (v130 == CFGetTypeID((CFTypeRef)v6))
        {
          v131 = CFBooleanGetValue((CFBooleanRef)v6);
          if (v131 != v11[812])
          {
            v11[812] = v131;
            if (!v131)
            {
              v132 = (const void *)*((_QWORD *)v11 + 102);
              if (v132)
              {
                CFRelease(v132);
                v6 = 0;
                *((_QWORD *)v11 + 102) = 0;
                return v6;
              }
            }
          }
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("DisplayList")))
    {
      if (v6)
      {
        v133 = CFArrayGetTypeID();
        if (v133 != CFGetTypeID((CFTypeRef)v6))
        {
          v6 = FigSignalErrorAt();
          if ((_DWORD)v6)
            return v6;
LABEL_345:
          MEMORY[0x19402EA0C](*((_QWORD *)v11 + 62));
          if (*((_QWORD *)v11 + 64) && (v139 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1160)) != 0)
          {
            v140 = *((_QWORD *)v11 + 106);
            v141 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
            if (v141)
              v6 = v141(v139, CFSTR("DisplayList"), v140);
            else
              v6 = 4294954514;
          }
          else
          {
            v6 = 0;
          }
          MEMORY[0x19402EA24](*((_QWORD *)v11 + 62));
          return v6;
        }
        Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)v6);
        v135 = Copy;
        if (!Copy)
          return 4294954510;
        v137 = (const void *)*((_QWORD *)v11 + 106);
        *((_QWORD *)v11 + 106) = Copy;
        CFRetain(Copy);
        v138 = 0;
        if (!v137)
        {
LABEL_342:
          if ((v138 & 1) == 0)
            CFRelease(v135);
          goto LABEL_345;
        }
      }
      else
      {
        v135 = 0;
        v137 = (const void *)*((_QWORD *)v11 + 106);
        *((_QWORD *)v11 + 106) = 0;
        v138 = 1;
        if (!v137)
          goto LABEL_342;
      }
      CFRelease(v137);
      goto LABEL_342;
    }
    if (CFEqual(a3, CFSTR("DecodeMultipleAudioTracks")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v136 = CFBooleanGetTypeID();
      if (v136 != CFGetTypeID((CFTypeRef)v6))
        return FigSignalErrorAt();
      v11[120] = CFBooleanGetValue((CFBooleanRef)v6);
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
      goto LABEL_274;
    }
    if (CFEqual(a3, CFSTR("DecodeMultipleVideoTracks")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v142 = CFBooleanGetTypeID();
      if (v142 != CFGetTypeID((CFTypeRef)v6))
        return FigSignalErrorAt();
      v11[121] = CFBooleanGetValue((CFBooleanRef)v6);
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
      goto LABEL_274;
    }
    if (CFEqual(a3, CFSTR("ClientSuspended")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v143 = CFBooleanGetTypeID();
      if (v143 != CFGetTypeID((CFTypeRef)v6))
        return FigSignalErrorAt();
      v144 = CFBooleanGetValue((CFBooleanRef)v6);
      MEMORY[0x19402EA0C](*((_QWORD *)v11 + 62));
      v146 = CMBaseObjectGetDerivedStorage();
      if (v144 != v11[65])
      {
        v11[65] = v144;
        if (dword_1EE2A2AC8)
        {
          LODWORD(valuePtr[0]) = 0;
          LOBYTE(rect.origin.x) = 0;
          v147 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v183 = *((_DWORD *)v11 + 15);
        if (v144)
        {
          v145 = 0;
          updated = 0;
          if (v183 != 1)
          {
LABEL_548:
            if (v146)
            {
              if (*(_QWORD *)(v146 + 128))
              {
                CMByteStreamGetCMBaseObject();
                FigCRABSGetClassID();
                if (CMBaseObjectIsMemberOfClass())
                  playerfig_configureDownloadInPlayQueue();
              }
            }
            MEMORY[0x19402EA24](*((_QWORD *)v11 + 62), v145);
            return updated;
          }
LABEL_514:
          updated = playerfig_updatePlayerActiveState(a1, v145);
          goto LABEL_548;
        }
        if (!v183 && v11[64])
        {
          LODWORD(v145) = 1;
          goto LABEL_514;
        }
      }
      updated = 0;
      goto LABEL_548;
    }
    if (CFEqual(a3, CFSTR("MinRateForAudioPlayback")))
    {
      if (v6)
      {
        v148 = CFNumberGetTypeID();
        if (v148 != CFGetTypeID((CFTypeRef)v6))
          return FigSignalErrorAt();
        LODWORD(valuePtr[0]) = 0;
        CFNumberGetValue((CFNumberRef)v6, kCFNumberFloat32Type, valuePtr);
        if (v11[801])
        {
          v149 = valuePtr[0];
          if (*(float *)valuePtr == *((float *)v11 + 201))
            return 0;
          if (*((float *)v11 + 12) != 0.0 && dword_1EE2A2AC8 >= 2)
          {
            LODWORD(rect.origin.x) = 0;
            LOBYTE(v227.origin.x) = 0;
            v150 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v151 = LODWORD(rect.origin.x);
            if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
              v152 = v151;
            else
              v152 = v151 & 0xFFFFFFFE;
            if (v152)
            {
              v153 = *((float *)v11 + 201);
              *(_DWORD *)v230 = 136315650;
              *(_QWORD *)&v230[4] = "playerfig_handleSetProperty";
              *(_WORD *)&v230[12] = 2048;
              *(double *)&v230[14] = v153;
              *(_WORD *)&v230[22] = 2048;
              v231 = *(float *)valuePtr;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v149 = valuePtr[0];
          }
          v11[801] = 1;
        }
        else
        {
          if (*((float *)v11 + 12) != 0.0 && dword_1EE2A2AC8 >= 2)
          {
            LODWORD(rect.origin.x) = 0;
            LOBYTE(v227.origin.x) = 0;
            v186 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v187 = LODWORD(rect.origin.x);
            if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
              v188 = v187;
            else
              v188 = v187 & 0xFFFFFFFE;
            if (v188)
            {
              *(_DWORD *)v230 = 136315394;
              *(_QWORD *)&v230[4] = "playerfig_handleSetProperty";
              *(_WORD *)&v230[12] = 2048;
              *(double *)&v230[14] = *(float *)valuePtr;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v11[801] = 1;
          v149 = valuePtr[0];
        }
        *((_DWORD *)v11 + 201) = v149;
      }
      else
      {
        if (v11[801] != 1)
          return 0;
        if (*((float *)v11 + 12) != 0.0 && dword_1EE2A2AC8 >= 2)
        {
          LODWORD(valuePtr[0]) = 0;
          LOBYTE(rect.origin.x) = 0;
          v185 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v11[801] = 0;
      }
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
LABEL_274:
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v230, 0);
      return 0;
    }
    if (CFEqual(a3, CFSTR("MaxRateForAudioPlayback")))
    {
      if (v6)
      {
        v154 = CFNumberGetTypeID();
        if (v154 != CFGetTypeID((CFTypeRef)v6))
          return FigSignalErrorAt();
        LODWORD(valuePtr[0]) = 0;
        CFNumberGetValue((CFNumberRef)v6, kCFNumberFloat32Type, valuePtr);
        if (v11[802])
        {
          v155 = valuePtr[0];
          if (*((float *)v11 + 202) == *(float *)valuePtr)
            return 0;
          if (*((float *)v11 + 12) != 0.0 && dword_1EE2A2AC8 >= 2)
          {
            LODWORD(rect.origin.x) = 0;
            LOBYTE(v227.origin.x) = 0;
            v156 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v157 = LODWORD(rect.origin.x);
            if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
              v158 = v157;
            else
              v158 = v157 & 0xFFFFFFFE;
            if (v158)
            {
              v159 = *((float *)v11 + 202);
              *(_DWORD *)v230 = 136315650;
              *(_QWORD *)&v230[4] = "playerfig_handleSetProperty";
              *(_WORD *)&v230[12] = 2048;
              *(double *)&v230[14] = v159;
              *(_WORD *)&v230[22] = 2048;
              v231 = *(float *)valuePtr;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v155 = valuePtr[0];
          }
          v11[802] = 1;
        }
        else
        {
          if (*((float *)v11 + 12) != 0.0 && dword_1EE2A2AC8 >= 2)
          {
            LODWORD(rect.origin.x) = 0;
            LOBYTE(v227.origin.x) = 0;
            v190 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v191 = LODWORD(rect.origin.x);
            if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
              v192 = v191;
            else
              v192 = v191 & 0xFFFFFFFE;
            if (v192)
            {
              *(_DWORD *)v230 = 136315394;
              *(_QWORD *)&v230[4] = "playerfig_handleSetProperty";
              *(_WORD *)&v230[12] = 2048;
              *(double *)&v230[14] = *(float *)valuePtr;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v11[802] = 1;
          v155 = valuePtr[0];
        }
        *((_DWORD *)v11 + 202) = v155;
      }
      else
      {
        if (v11[802] != 1)
          return 0;
        if (*((float *)v11 + 12) != 0.0 && dword_1EE2A2AC8 >= 2)
        {
          LODWORD(valuePtr[0]) = 0;
          LOBYTE(rect.origin.x) = 0;
          v189 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v11[802] = 0;
      }
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
      goto LABEL_274;
    }
    if (CFEqual(a3, CFSTR("MasterClock")))
    {
      if (v6)
      {
        v160 = CFGetTypeID((CFTypeRef)v6);
        if (v160 != CMClockGetTypeID())
          return FigSignalErrorAt();
        v161 = (const void *)*((_QWORD *)v11 + 11);
        if (v161 == (const void *)v6)
          return 0;
        *((_QWORD *)v11 + 11) = v6;
        CFRetain((CFTypeRef)v6);
        if (!v161)
          goto LABEL_482;
      }
      else
      {
        v161 = (const void *)*((_QWORD *)v11 + 11);
        if (!v161)
          return 0;
        *((_QWORD *)v11 + 11) = 0;
      }
      CFRelease(v161);
LABEL_482:
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
      goto LABEL_274;
    }
    if (CFEqual(a3, CFSTR("SendToNero")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v162 = CFDictionaryGetTypeID();
      if (v162 != CFGetTypeID((CFTypeRef)v6))
        return FigSignalErrorAt();
      v163 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("Visuals"));
      if (v163 && (v164 = v163, v165 = v11[122], v165 != CFBooleanGetValue(v163)))
      {
        v193 = CFBooleanGetValue(v164);
        v11[122] = v193;
        v166 = (v11[123] | v193) == 0;
      }
      else
      {
        v166 = 1;
      }
      MEMORY[0x19402EEEC](*((_QWORD *)v11 + 19));
      if (v11[122])
      {
        v194 = CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("NeroTransport"));
        if (v194)
        {
          v195 = (const void *)*((_QWORD *)v11 + 20);
          *((_QWORD *)v11 + 20) = v194;
          CFRetain(v194);
          if (v195)
            CFRelease(v195);
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      else
      {
        v206 = (const void *)*((_QWORD *)v11 + 20);
        if (v206)
        {
          CFRelease(v206);
          *((_QWORD *)v11 + 20) = 0;
        }
      }
      MEMORY[0x19402EF04](*((_QWORD *)v11 + 19));
      if (v166)
        return 0;
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
      goto LABEL_274;
    }
    if (CFEqual(a3, CFSTR("NeroDisplaySize")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v167 = CFDictionaryGetTypeID();
      if (v167 != CFGetTypeID((CFTypeRef)v6))
        return FigSignalErrorAt();
      size = (CGSize)*MEMORY[0x1E0C9D820];
      if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v6, &size))
        return FigSignalErrorAt();
      if (size.width == *((double *)v11 + 16) && size.height == *((double *)v11 + 17))
        return 0;
      *((CGSize *)v11 + 8) = size;
      v168 = (const void *)*((_QWORD *)v11 + 64);
      if (!v168 || (!v11[122] || !v11[123]) && !v11[185])
        return 0;
      v169 = *((_QWORD *)v11 + 73);
      if (!v169
        || (v6 = fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v169, *((double *)v11 + 16), *((double *)v11 + 17), *((_QWORD *)v11 + 18), v168), !(_DWORD)v6))
      {
        v170 = *((_QWORD *)v11 + 72);
        if (v170)
          v6 = fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v170, *((double *)v11 + 16), *((double *)v11 + 17), *((_QWORD *)v11 + 18), *((const void **)v11 + 64));
        else
          v6 = 0;
      }
      v196 = CMBaseObjectGetDerivedStorage();
      if (!*(_QWORD *)(v196 + 1856))
        return v6;
      v197 = v196;
      DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*((CGSize *)v11 + 8));
      if (!DictionaryRepresentation)
        return v6;
      v51 = DictionaryRepresentation;
      FigOutOfBandTrackControllerSetProperty(*(_QWORD *)(v197 + 1856), CFSTR("NeroDisplaySize"), DictionaryRepresentation);
LABEL_80:
      CFRelease(v51);
      return v6;
    }
    if (CFEqual(a3, CFSTR("NeroVideoGravity")))
    {
      if (!v6 || (v171 = CFStringGetTypeID(), v171 == CFGetTypeID((CFTypeRef)v6)))
      {
        if (!FigCFEqual())
        {
          v172 = (const void *)*((_QWORD *)v11 + 18);
          *((_QWORD *)v11 + 18) = v6;
          if (v6)
            CFRetain((CFTypeRef)v6);
          if (v172)
            CFRelease(v172);
          if (*((_QWORD *)v11 + 64) && (v11[122] && v11[123] || v11[185]))
          {
            v173 = *((_QWORD *)v11 + 71);
            if (v173)
              v6 = FigRenderPipelineSetProperty_0(v173, (uint64_t)CFSTR("NeroVideoGravity"), *((_QWORD *)v11 + 18));
            else
              v6 = 0;
            v199 = *((_QWORD *)v11 + 73);
            if (v199)
              v6 = fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v199, *((double *)v11 + 16), *((double *)v11 + 17), *((_QWORD *)v11 + 18), *((const void **)v11 + 64));
            if (!(_DWORD)v6)
            {
              v200 = *((_QWORD *)v11 + 72);
              if (v200)
                v6 = fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v200, *((double *)v11 + 16), *((double *)v11 + 17), *((_QWORD *)v11 + 18), *((const void **)v11 + 64));
              else
                v6 = 0;
            }
            v207 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1856);
            if (v207)
              FigOutOfBandTrackControllerSetProperty(v207, CFSTR("NeroVideoGravity"), *((const void **)v11 + 18));
            return v6;
          }
        }
        return 0;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("ProhibitAMR")))
    {
      if (v6)
      {
        v174 = CFGetTypeID((CFTypeRef)v6);
        if (v174 == CFBooleanGetTypeID())
        {
          v175 = CFBooleanGetValue((CFBooleanRef)v6);
          v6 = 0;
          v11[856] = v175;
          return v6;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("AllowPixelBufferPoolSharing")))
    {
      if (v6)
      {
        v176 = CFGetTypeID((CFTypeRef)v6);
        if (v176 == CFBooleanGetTypeID() || (v177 = CFGetTypeID((CFTypeRef)v6), v177 == CFNumberGetTypeID()))
        {
          v178 = (const void *)*((_QWORD *)v11 + 108);
          *((_QWORD *)v11 + 108) = v6;
          CFRetain((CFTypeRef)v6);
          if (v178)
            CFRelease(v178);
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("OptionsForPreWiringPixelBuffers")))
    {
      size = (CGSize)*MEMORY[0x1E0C9D820];
      if (v6 && !FigCFDictionaryGetCGSizeIfPresent())
        return FigSignalErrorAt();
      v179 = SecTaskCopyValueForEntitlement(*((SecTaskRef *)v11 + 105), CFSTR("com.apple.coremedia.allow-pre-wiring-pixel-buffers"), 0);
      if (v179 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
      {
        MEMORY[0x19402EEEC](*((_QWORD *)v11 + 109));
        v202 = (const void *)*((_QWORD *)v11 + 110);
        v203 = theDict;
        *((_QWORD *)v11 + 110) = theDict;
        if (v203)
          CFRetain(v203);
        if (v202)
          CFRelease(v202);
        MEMORY[0x19402EF04](*((_QWORD *)v11 + 109));
        v180 = (uint64_t)playerfig_preWirePixelBuffersIfNeeded((uint64_t)a1, 0);
      }
      else
      {
        v180 = FigSignalErrorAt();
      }
      v201 = v180;
      if (v179)
        CFRelease(v179);
      return v201;
    }
    if (CFEqual(a3, CFSTR("PrepareItemOnDispatchQueue")))
      return 0;
    if (CFEqual(a3, CFSTR("AllowOutOfBandTextTrackRendering")))
    {
      if (!v6)
        return FigSignalErrorAt();
      v181 = CFGetTypeID((CFTypeRef)v6);
      if (v181 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v182 = CFBooleanGetValue((CFBooleanRef)v6);
      if (v182 == v11[184])
        return 0;
      v11[184] = v182;
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
      goto LABEL_274;
    }
    if (CFEqual(a3, CFSTR("OutOfBandTextRenderingForNeroVideo")))
    {
      if (v6)
      {
        v204 = CFGetTypeID((CFTypeRef)v6);
        if (v204 == CFBooleanGetTypeID())
        {
          v205 = CFBooleanGetValue((CFBooleanRef)v6);
          v6 = 0;
          v11[185] = v205;
          return v6;
        }
      }
      return FigSignalErrorAt();
    }
    if (!CFEqual(a3, CFSTR("MultichannelAudioStrategy")))
    {
      if (!CFEqual(a3, CFSTR("BufferedAirPlayOutput")))
      {
        if (CFEqual(a3, CFSTR("AutomaticallyWaitsToMinimizeStalling")))
        {
          if (v6)
          {
            v213 = CFGetTypeID((CFTypeRef)v6);
            if (v213 == CFBooleanGetTypeID())
            {
              v214 = CFBooleanGetValue((CFBooleanRef)v6);
              if (v214 != v11[57])
              {
                v11[57] = v214;
                if (*((_QWORD *)v11 + 64))
                {
                  v215 = CMBaseObjectGetDerivedStorage();
                  MEMORY[0x19402EEEC](*(_QWORD *)(v215 + 1896));
                  FigReportingAgentStatsSetIntValue(*(_QWORD *)(v215 + 1904), 0x1E301B638, 0x1E301C9B8, v11[57]);
                  MEMORY[0x19402EF04](*(_QWORD *)(v215 + 1896));
                }
                playerfig_updatePlaybackStateAndBossRate(a1, 9, 0);
              }
              return 0;
            }
          }
        }
        else if (CFEqual(a3, CFSTR("CaptionPlaybackStrategy")))
        {
          if (v6)
          {
            v216 = CFStringGetTypeID();
            if (v216 == CFGetTypeID((CFTypeRef)v6))
            {
              if (CFEqual((CFTypeRef)v6, CFSTR("CoreTextSubtitleRenderer")))
              {
                v6 = 0;
                v11[782] = 1;
                return v6;
              }
              if (CFEqual((CFTypeRef)v6, CFSTR("CaptionDisplayService")))
              {
                v6 = 0;
                v11[782] = 0;
                return v6;
              }
            }
          }
        }
        else if (CFEqual(a3, CFSTR("CaptionPipelineStrategy")))
        {
          if (v6)
          {
            v217 = CFStringGetTypeID();
            if (v217 == CFGetTypeID((CFTypeRef)v6))
            {
              if (CFEqual((CFTypeRef)v6, CFSTR("CFAttributedStrings")))
              {
                v6 = 0;
                v11[781] = 1;
                return v6;
              }
              if (CFEqual((CFTypeRef)v6, CFSTR("FigCaptions")))
              {
                v6 = 0;
                v11[781] = 0;
                return v6;
              }
            }
          }
        }
        else
        {
          if (CFEqual(a3, CFSTR("ResourceConservationLevelWhenPaused")))
          {
            if (v6)
            {
              v218 = CFGetTypeID((CFTypeRef)v6);
              if (v218 != CFNumberGetTypeID())
                return FigSignalErrorAt();
              LODWORD(size.width) = 0;
              CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, &size);
              v219 = LODWORD(size.width);
            }
            else
            {
              v219 = 0;
              LODWORD(size.width) = 0;
            }
            playerfig_setResourceConservationLevelAndUpdateWhenPaused(a1, v219);
            return 0;
          }
          if (CFEqual(a3, CFSTR("AutomaticallyResumesRenderingAfterConfigurationChange")))
          {
            if (v6)
            {
              v220 = CFGetTypeID((CFTypeRef)v6);
              if (v220 == CFBooleanGetTypeID())
              {
                v126 = *MEMORY[0x1E0C9AE50] == v6;
                v6 = 0;
                v221 = v126;
                v11[58] = v221;
                return v6;
              }
            }
          }
          else if (CFEqual(a3, CFSTR("AssumeItemsWaitingToPlayWhilePlayerPaused")))
          {
            if (v6)
            {
              v222 = CFGetTypeID((CFTypeRef)v6);
              if (v222 == CFBooleanGetTypeID())
              {
                v126 = *MEMORY[0x1E0C9AE50] == v6;
                v6 = 0;
                v223 = v126;
                v11[59] = v223;
                return v6;
              }
            }
          }
          else
          {
            if (!CFEqual(a3, CFSTR("SuppressAudioRendering")))
              return 4294954512;
            if (v6)
            {
              v224 = CFGetTypeID((CFTypeRef)v6);
              if (v224 == CFBooleanGetTypeID())
              {
                v225 = *MEMORY[0x1E0C9AE50] == v6;
                if (v11[1105] != v225)
                {
                  if (dword_1EE2A2AC8)
                  {
                    LODWORD(valuePtr[0]) = 0;
                    LOBYTE(rect.origin.x) = 0;
                    v226 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  v11[1105] = v225;
                  playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(a1);
                }
                return 0;
              }
            }
          }
        }
        return FigSignalErrorAt();
      }
      if (v6)
      {
        v211 = CFGetTypeID((CFTypeRef)v6);
        if (v211 != FigBufferedAirPlayOutputGetTypeID())
          return FigSignalErrorAt();
      }
      if (FigCFEqual())
        return 0;
      MEMORY[0x19402EEEC](*((_QWORD *)v11 + 22));
      v212 = (const void *)*((_QWORD *)v11 + 21);
      *((_QWORD *)v11 + 21) = v6;
      if (v6)
        CFRetain((CFTypeRef)v6);
      if (v212)
        CFRelease(v212);
      MEMORY[0x19402EF04](*((_QWORD *)v11 + 22));
      itemfig_reportingAgentReportBufferedAirPlayMode(*((_QWORD *)v11 + 64));
      size = (CGSize)*MEMORY[0x1E0CA2E18];
      v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(CGSize *)v230 = size;
      *(_QWORD *)&v230[16] = v237;
      goto LABEL_305;
    }
    if (!v6)
      return FigSignalErrorAt();
    v208 = CFStringGetTypeID();
    if (v208 != CFGetTypeID((CFTypeRef)v6)
      || !CFEqual((CFTypeRef)v6, CFSTR("MatchMultichannelTrackPreferenceToAudioDevice"))
      && !CFEqual((CFTypeRef)v6, CFSTR("PreferStereo"))
      && !CFEqual((CFTypeRef)v6, CFSTR("PreferExclusivePassthrough"))
      && !CFEqual((CFTypeRef)v6, CFSTR("PreferAC3ViaExclusivePassthrough")))
    {
      return FigSignalErrorAt();
    }
    if (CFEqual((CFTypeRef)v6, *((CFTypeRef *)v11 + 113)))
      return 0;
    v209 = (const void *)*((_QWORD *)v11 + 113);
    *((_QWORD *)v11 + 113) = v6;
    CFRetain((CFTypeRef)v6);
    if (v209)
      CFRelease(v209);
    v210 = CFEqual((CFTypeRef)v6, CFSTR("PreferExclusivePassthrough"));
    if (v210)
      FPSupport_ReleasePassthroughHelper();
    if (CFEqual((CFTypeRef)v6, CFSTR("PreferAC3ViaExclusivePassthrough")))
    {
      FPSupport_ReleasePassthroughHelper();
    }
    else if (!(v11[920] | v210))
    {
LABEL_564:
      v105 = (uint64_t)a1;
      v106 = 1;
      goto LABEL_240;
    }
    size = (CGSize)*MEMORY[0x1E0CA2E18];
    v237 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    *(CGSize *)v230 = size;
    *(_QWORD *)&v230[16] = v237;
    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v230, 0);
    goto LABEL_564;
  }
  if (v6)
  {
    v51 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&theDict, 1, MEMORY[0x1E0C9B378]);
    v6 = playerfig_setClientVideoLayerArray(a1, v51);
    if (!v51)
      return v6;
    goto LABEL_80;
  }
  return playerfig_setClientVideoLayerArray(a1, 0);
}

uint64_t playerfig_setClientVideoLayerArray(const void *a1, const __CFArray *a2)
{
  void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const __CFArray *v9;
  uint64_t v10;
  const __CFArray *v11;
  const __CFArray *v12;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v15;
  const __CFAllocator *v16;
  CFIndex i;
  const void *ValueAtIndex;
  int v19;
  __CFArray *v20;
  uint64_t v21;
  CFIndex v22;
  const __CFArray *v23;
  const void *v24;
  uint64_t v25;
  FigVideoLayer *v26;
  FigVideoLayer *v27;
  FigVideoLayer *v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  int v32;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v34;
  const void *v35;
  const void *v37;
  CFTypeRef v38;
  void *v39;
  const __CFArray *theArray;
  CFTypeRef cf[21];
  CFRange v42;
  CFRange v43;

  cf[19] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!a2 || !CFArrayGetCount(a2))
    a2 = 0;
  if (FigCFEqual())
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    Mutable = 0;
    goto LABEL_51;
  }
  v39 = v4;
  v38 = CFRetain(a1);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 224));
  theArray = *(const __CFArray **)(DerivedStorage + 208);
  *(_QWORD *)(DerivedStorage + 208) = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 224));
  v9 = *(const __CFArray **)(DerivedStorage + 200);
  if (v9)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 200));
    if (a2)
    {
LABEL_8:
      v15 = CFArrayGetCount(a2);
      goto LABEL_11;
    }
  }
  else
  {
    Count = 0;
    if (a2)
      goto LABEL_8;
  }
  v15 = 0;
LABEL_11:
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v6 = FigSignalErrorAt();
    v10 = 0;
    v11 = 0;
    v12 = 0;
LABEL_63:
    v7 = v38;
    v4 = v39;
    goto LABEL_50;
  }
  v12 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
  if (!v12)
  {
    v21 = FigSignalErrorAt();
LABEL_62:
    v6 = v21;
    v10 = 0;
    v11 = 0;
    goto LABEL_63;
  }
  v37 = a1;
  if (v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      if (!v9
        || (v42.location = 0,
            v42.length = Count,
            v19 = CFArrayContainsValue(v9, v42, ValueAtIndex),
            v20 = Mutable,
            !v19))
      {
        v20 = v12;
      }
      CFArrayAppendValue(v20, ValueAtIndex);
    }
  }
  v43.length = CFArrayGetCount(v12);
  v43.location = 0;
  CFArrayAppendArray(Mutable, v12, v43);
  v21 = FigDeferredTransactionCreate((uint64_t)v16, (uint64_t *)cf);
  if ((_DWORD)v21)
    goto LABEL_62;
  v8 = (uint64_t)theArray;
  if (theArray)
  {
    v22 = CFArrayGetCount(theArray);
    v8 = (uint64_t)theArray;
    if (v22 >= 1)
    {
      playerfig_clearVideoLayers(theArray, 1, cf[0]);
      v8 = (uint64_t)theArray;
    }
  }
  if (*(_BYTE *)DerivedStorage)
  {
    v6 = 0;
    v10 = 0;
    v11 = 0;
    v7 = v38;
    v4 = v39;
    goto LABEL_51;
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v23 = *(const __CFArray **)(DerivedStorage + 504);
  if (v23 && CFArrayGetCount(v23) >= 1)
  {
    v24 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    itemfig_handleReadyToDisplayVideoLatch((uint64_t)v24, 4, cf[0]);
  }
  *(_QWORD *)(DerivedStorage + 200) = Mutable;
  CFRetain(Mutable);
  v25 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 200));
  v11 = CFArrayCreateMutable(v16, v25, MEMORY[0x1E0C9B378]);
  if (v25 < 1)
  {
LABEL_33:
    FPSupport_AppendDeferredTransactionChangeForAttachingFigVideoLayersToClientLayers(cf[0], Mutable, v11, (uint64_t)"playerfig_setClientVideoLayerArray");
    FPSupport_AppendDeferredTransactionChangeForSettingEdgeAntialiasingMaskOnLayers(cf[0], 0, v11, (uint64_t)"playerfig_setClientVideoLayerArray");
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 224));
    v10 = *(_QWORD *)(DerivedStorage + 208);
    *(_QWORD *)(DerivedStorage + 208) = v11;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 224));
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      v29 = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)v29)
      {
        v30 = v29;
        MEMORY[0x19402EEEC](*(_QWORD *)(v29 + 848));
        v31 = *(const void **)(v30 + 856);
        if (v31)
        {
          CFRelease(v31);
          *(_QWORD *)(v30 + 856) = 0;
        }
        MEMORY[0x19402EF04](*(_QWORD *)(v30 + 848));
      }
    }
    if (Count >= v15)
      v32 = playerfig_removeExcessImageQueuesAndSlotsFromAllWorkingOrLameDuckItems((uint64_t)v37, cf[0]);
    else
      v32 = playerfig_gracefullyAddImageQueues((uint64_t)v37, cf[0]);
    v7 = v38;
    v4 = v39;
    if (v32
      || (v34 = *(const __CFArray **)(DerivedStorage + 504)) != 0
      && CFArrayGetCount(v34) >= 1
      && (v35 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0),
          itemfig_handleReadyToDisplayVideoLatch((uint64_t)v35, 3, cf[0])))
    {
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
      playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(v37, cf[0], 0);
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    }
    v11 = 0;
    v6 = 0;
  }
  else
  {
    while (1)
    {
      v26 = [FigVideoLayer alloc];
      v27 = -[FigVideoLayer initWithDeferredTransaction:](v26, "initWithDeferredTransaction:", cf[0]);
      if (!v27)
        break;
      v28 = v27;
      CFArrayAppendValue(v11, v27);
      if (*(_BYTE *)(DerivedStorage + 233))
        FBLSupportAppendDeferredTransactionChangeToSetAllowsDisplayCompositing(cf[0], v28, 0, (uint64_t)"playerfig_setClientVideoLayerArray");
      if (!--v25)
        goto LABEL_33;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    v7 = v38;
    v4 = v39;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v10 = 0;
    v6 = 4294954434;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
LABEL_50:
  v8 = (uint64_t)theArray;
LABEL_51:
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], v8, (uint64_t)"playerfig_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], v10, (uint64_t)"playerfig_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], (uint64_t)v11, (uint64_t)"playerfig_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], (uint64_t)v9, (uint64_t)"playerfig_setClientVideoLayerArray");
  FigDeferredTransactionCommit((uint64_t)cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  if (Mutable)
    CFRelease(Mutable);
  if (v12)
    CFRelease(v12);
  if (v7)
    CFRelease(v7);
  objc_autoreleasePoolPop(v4);
  return v6;
}

uint64_t playerfig_setVideoTargetArray(const void *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v5;
  uint64_t Count;
  const __CFArray *v7;
  uint64_t v8;
  __CFArray *MutableCopy;
  uint64_t matched;
  const __CFArray *v12;
  const __CFAllocator **v13;
  CFMutableArrayRef Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex v17;
  CFIndex v18;
  CFIndex j;
  const void *v20;
  const void *v21;
  CFIndex k;
  const void *v23;
  uint64_t v24;
  __CFArray *v25;
  uint64_t v26;
  const void *v27;
  CFIndex v28;
  CFIndex v29;
  const __CFArray *v30;
  CFIndex v31;
  const void *v32;
  CFMutableArrayRef v33;
  const void *v34;
  uint64_t v35;
  CFIndex v36;
  int v37;
  uint64_t v38;
  const __CFArray *v39;
  CFIndex v40;
  const void *v41;
  const __CFArray *v42;
  uint64_t v43;
  uint64_t v44;
  CFIndex m;
  const __CFArray *v46;
  const void *v47;
  uint64_t v48;
  CFIndex v49;
  CFMutableArrayRef v50;
  __CFArray *v51;
  CFIndex v52;
  CFIndex v53;
  CFIndex n;
  const void *v55;
  CFIndex v56;
  CFArrayRef v57;
  CFIndex v58;
  CFIndex v59;
  CFIndex ii;
  const void *v61;
  uint64_t v62;
  const __CFString *v63;
  int v64;
  CFIndex FirstIndexOfValue;
  uint64_t v66;
  CFTypeRef v67;
  CFIndex v68;
  uint64_t v69;
  uint64_t v70;
  CFIndex v71;
  uint64_t v72;
  const void *v73;
  int v74;
  const __CFAllocator *allocator;
  __int128 v76;
  uint64_t v77;
  CFArrayRef theArray[2];
  uint64_t v79;
  CFMutableArrayRef v80;
  __CFArray *v81;
  char v82;
  int v83;
  CFRange v84;
  CFRange v85;
  CFRange v86;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CFRetain(a1);
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  v82 = 0;
  v80 = 0;
  v81 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 240));
  v70 = DerivedStorage;
  v7 = *(const __CFArray **)(DerivedStorage + 248);
  if (v7)
    v8 = CFArrayGetCount(v7);
  else
    v8 = 0;
  if (FigCFEqual())
  {
    MutableCopy = 0;
    matched = 0;
LABEL_9:
    MEMORY[0x19402EF04](*(_QWORD *)(v70 + 240));
    goto LABEL_10;
  }
  v69 = (uint64_t)a1;
  v67 = v5;
  if (Count)
    v12 = a2;
  else
    v12 = 0;
  v13 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v8 < 1)
  {
    MutableCopy = 0;
    goto LABEL_36;
  }
  if (v12)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      MutableCopy = Mutable;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
        v84.location = 0;
        v84.length = Count;
        if (!CFArrayContainsValue(v12, v84, ValueAtIndex))
          CFArrayAppendValue(MutableCopy, ValueAtIndex);
      }
      goto LABEL_32;
    }
LABEL_143:
    matched = FigSignalErrorAt();
    MutableCopy = 0;
    goto LABEL_9;
  }
  MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
  if (!MutableCopy)
    goto LABEL_143;
LABEL_32:
  v17 = CFArrayGetCount(MutableCopy);
  if (v17 >= 1)
  {
    v18 = v17;
    for (j = 0; j != v18; ++j)
    {
      v20 = CFArrayGetValueAtIndex(MutableCopy, j);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      playerfig_traceVideoTargetEvent(v69, (uint64_t)v20);
    }
    v13 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  }
LABEL_36:
  v5 = v67;
  v21 = (const void *)v69;
  if (Count < 1)
  {
    v26 = v70;
    v27 = *(const void **)(v70 + 256);
    *(_QWORD *)(v70 + 256) = 0;
    if (v27)
LABEL_47:
      CFRelease(v27);
  }
  else
  {
    for (k = 0; k != Count; ++k)
    {
      v23 = CFArrayGetValueAtIndex(v12, k);
      if (v7)
      {
        if (CFArrayGetCount(v7))
        {
          v85.location = 0;
          v85.length = v8;
          if (CFArrayContainsValue(v7, v85, v23))
            continue;
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      playerfig_traceVideoTargetEvent(v69, (uint64_t)v23);
    }
    v13 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
    v24 = FPSupport_CopySingleVideoChannelAndMultichannelVideoTargetsFromArray(v12, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v81, &v80);
    if ((_DWORD)v24)
    {
      matched = v24;
      goto LABEL_9;
    }
    v25 = v81;
    v26 = v70;
    v27 = *(const void **)(v70 + 256);
    *(_QWORD *)(v70 + 256) = v81;
    if (v25)
      CFRetain(v25);
    if (v27)
      goto LABEL_47;
  }
  if (v80)
  {
    v28 = CFArrayGetCount(v80);
    if (v28 < 1)
    {
LABEL_55:
      v64 = 0;
    }
    else
    {
      v29 = v28;
      v30 = *(const __CFArray **)(v26 + 264);
      if (v30 && v29 == CFArrayGetCount(v30))
      {
        v31 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(v80, v31);
          if (!FigCFArrayContainsValue())
            break;
          if (v29 == ++v31)
            goto LABEL_55;
        }
      }
      v64 = 1;
    }
    v33 = v80;
    v32 = *(const void **)(v26 + 264);
    *(_QWORD *)(v26 + 264) = v80;
    if (v33)
      CFRetain(v33);
  }
  else
  {
    v64 = 0;
    v32 = *(const void **)(v26 + 264);
    *(_QWORD *)(v26 + 264) = 0;
  }
  if (v32)
    CFRelease(v32);
  v34 = *(const void **)(v26 + 248);
  *(_QWORD *)(v26 + 248) = v12;
  if (v12)
    CFRetain(v12);
  if (v34)
    CFRelease(v34);
  MEMORY[0x19402EF04](*(_QWORD *)(v26 + 240));
  if (v8 >= 1
    && (playerfig_sendEmptyConfigurationToEachVideoTarget(v69, MutableCopy),
        v35 = CMBaseObjectGetDerivedStorage(),
        theArray[0] = 0,
        CFArrayGetCount(MutableCopy)))
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(v35 + 496));
    v66 = v35;
    if (!*(_QWORD *)(v35 + 512)
      || (v86.length = CFArrayGetCount(*(CFArrayRef *)(v35 + 504)),
          v86.location = 0,
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v35 + 504), v86, *(const void **)(v35 + 512)),
          FirstIndexOfValue < 0))
    {
      v37 = 0;
      matched = 0;
    }
    else
    {
      matched = 0;
      v36 = 0;
      v37 = 0;
      allocator = *v13;
      do
      {
        v68 = v36;
        v73 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v66 + 504), v36);
        v38 = CMBaseObjectGetDerivedStorage();
        v39 = *(const __CFArray **)(v38 + 1088);
        if ((v39 && CFArrayGetCount(v39) > 0 || FigCFDictionaryGetCount() >= 1) && CFArrayGetCount(MutableCopy) >= 1)
        {
          v40 = 0;
          do
          {
            v41 = CFArrayGetValueAtIndex(MutableCopy, v40);
            FigCFArrayRemoveLastElementOfValue();
            if (CFDictionaryGetValue(*(CFDictionaryRef *)(v38 + 1096), v41))
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterRemoveWeakListener();
              CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v38 + 1096), v41);
            }
            ++v40;
          }
          while (v40 < CFArrayGetCount(MutableCopy));
        }
        v42 = *(const __CFArray **)(v38 + 1048);
        if (v42)
        {
          v71 = CFArrayGetCount(v42);
          if (v71 >= 1)
          {
            v43 = 0;
            do
            {
              v83 = 0;
              *(_QWORD *)&v76 = 0;
              v72 = v43;
              FigCFArrayGetInt32AtIndex();
              itemfig_getTrackStorage((uint64_t)v73, v83, &v76);
              v44 = v76;
              if ((_QWORD)v76 && *(_QWORD *)(v76 + 216))
              {
                v74 = v37;
                for (m = 0; ; ++m)
                {
                  v46 = *(const __CFArray **)(v44 + 224);
                  if (v46)
                    v46 = (const __CFArray *)CFArrayGetCount(v46);
                  if (m >= (uint64_t)v46)
                    break;
                  v47 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v44 + 224), m);
                  v48 = FigImageQueueTableCopyVideoTargets((uint64_t)v47, theArray);
                  if ((_DWORD)v48)
                    goto LABEL_129;
                  if (theArray[0])
                  {
                    v49 = CFArrayGetCount(theArray[0]);
                    if (v49 < 1)
                    {
                      v51 = 0;
                      v56 = 0;
                    }
                    else
                    {
                      v50 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                      if (!v50)
                      {
                        v48 = FigSignalErrorAt();
LABEL_129:
                        matched = v48;
                        v37 = 0;
                        goto LABEL_130;
                      }
                      v51 = v50;
                      if (theArray[0])
                      {
                        v52 = CFArrayGetCount(theArray[0]);
                        if (v52 >= 1)
                        {
                          v53 = v52;
                          for (n = 0; n != v53; ++n)
                          {
                            v55 = CFArrayGetValueAtIndex(theArray[0], n);
                            if (!FigCFArrayContainsValue())
                              CFArrayAppendValue(v51, v55);
                          }
                        }
                      }
                      v56 = CFArrayGetCount(v51);
                    }
                    v57 = theArray[0];
                    if (theArray[0])
                      v57 = (CFArrayRef)CFArrayGetCount(theArray[0]);
                    if (v56 >= (uint64_t)v57)
                    {
                      matched = 0;
                    }
                    else
                    {
                      matched = FigImageQueueTableUpdateToMatchOutputsArray((uint64_t)v47, v51, *(void **)(v38 + 328), 0, 0, 0);
                      if (!(_DWORD)matched)
                        FigImageQueueTableSetTimebase((uint64_t)v47, *(void **)(v38 + 328));
                      v74 = 1;
                    }
                    if (theArray[0])
                    {
                      CFRelease(theArray[0]);
                      theArray[0] = 0;
                    }
                    if (v49 >= 1)
                      CFRelease(v51);
                  }
                  else
                  {
                    matched = 0;
                  }
                }
                if (*(_QWORD *)(v44 + 240))
                {
                  v58 = CFArrayGetCount(MutableCopy);
                  v37 = v74;
                  if (v58 >= 1)
                  {
                    v59 = v58;
                    for (ii = 0; ii != v59; ++ii)
                    {
                      v61 = CFArrayGetValueAtIndex(MutableCopy, ii);
                      if (CFDictionaryContainsValue(*(CFDictionaryRef *)(v44 + 240), v61))
                      {
                        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v44 + 240), v61);
                        v37 = 1;
                      }
                    }
                  }
                }
                else
                {
                  v37 = v74;
                }
              }
              v43 = v72 + 1;
            }
            while (v72 + 1 != v71);
          }
        }
        v36 = v68 + 1;
      }
      while (v68 != FirstIndexOfValue);
    }
LABEL_130:
    if (theArray[0])
      CFRelease(theArray[0]);
    MEMORY[0x19402EA24](*(_QWORD *)(v66 + 496), v36);
    v5 = v67;
    v21 = (const void *)v69;
    v26 = v70;
    if ((_DWORD)matched)
      goto LABEL_10;
  }
  else
  {
    v37 = 0;
  }
  if (playerfig_doesAnyWorkingOrLameDuckItemHaveVideo())
  {
    if (playerfig_gracefullyAddImageQueues((uint64_t)v21, 0))
    {
      v62 = playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(v21, 0, &v82);
    }
    else
    {
      v63 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v26 + 504), 0);
      v62 = playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v21, v63, MEMORY[0x1E0CA2E18]);
    }
    matched = v62;
    if ((_DWORD)v62)
      goto LABEL_10;
  }
  else
  {
    matched = 0;
  }
  if (!v82)
  {
    if (v64 | v37)
    {
      *(_OWORD *)theArray = *MEMORY[0x1E0CA2E18];
      v79 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v76 = *(_OWORD *)theArray;
      v77 = v79;
      matched = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v21, (uint64_t)theArray, (uint64_t)&v76, 0);
    }
    else
    {
      matched = 0;
    }
  }
LABEL_10:
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v5)
    CFRelease(v5);
  if (v81)
    CFRelease(v81);
  if (v80)
    CFRelease(v80);
  return matched;
}

uint64_t playerfig_removeExcessImageQueuesAndSlotsFromAllWorkingOrLameDuckItems(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFIndex v3;
  const void *ValueAtIndex;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  const __CFArray *v9;
  CFIndex Count;
  uint64_t v11;
  const __CFArray *v12;
  char *v13;
  const __CFArray *MutableCopy;
  __CFArray *Mutable;
  const __CFArray *v16;
  const __CFArray *v17;
  __CFArray *v18;
  CFIndex v19;
  const void *v20;
  CFIndex v21;
  const void *ConcatenationOfTwoArrays;
  const void *v23;
  const void *v24;
  uint64_t v25;
  const void *v26;
  const void *v27;
  const __CFArray *v28;
  uint64_t v29;
  CFTypeRef v30;
  uint64_t matched;
  const __CFArray *v32;
  int v33;
  uint64_t v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  unsigned int v41;
  const __CFAllocator *v42;
  uint64_t v43;
  CFIndex FirstIndexOfValue;
  const __CFArray *cf;
  CFIndex v47;
  const void *v48;
  uint64_t v49;
  CFTypeRef v50;
  CFTypeRef v51;
  CFRange v52;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (*(_QWORD *)(DerivedStorage + 512))
  {
    v52.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
    v52.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v52, *(const void **)(DerivedStorage + 512));
    if ((FirstIndexOfValue & 0x8000000000000000) == 0)
    {
      v3 = 0;
      v42 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v43 = DerivedStorage;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v3);
        v5 = CMBaseObjectGetDerivedStorage();
        v6 = FigCFWeakReferenceHolderCopyReferencedObject();
        v50 = 0;
        v51 = 0;
        if (*(_BYTE *)v5)
          v7 = 1;
        else
          v7 = v6 == 0;
        v47 = v3;
        v48 = (const void *)v6;
        if (v7)
        {
          v25 = 0;
          ConcatenationOfTwoArrays = 0;
          v23 = 0;
          v24 = 0;
          v18 = 0;
          Mutable = 0;
          v17 = 0;
          MutableCopy = 0;
          goto LABEL_70;
        }
        v8 = (_QWORD *)CMBaseObjectGetDerivedStorage();
        v9 = *(const __CFArray **)(v5 + 1104);
        if (v9)
          Count = CFArrayGetCount(v9);
        else
          Count = 0;
        v11 = v8[27];
        v12 = (const __CFArray *)v8[25];
        if (v12)
          v12 = (const __CFArray *)CFArrayGetCount(v12);
        v13 = (char *)v12 + v11;
        if ((uint64_t)v13 > Count)
        {
          v25 = FigSignalErrorAt();
          ConcatenationOfTwoArrays = 0;
          v23 = 0;
          v24 = 0;
          v18 = 0;
          Mutable = 0;
          v17 = 0;
          MutableCopy = 0;
          goto LABEL_26;
        }
        if (!itemfig_shouldEnableMainVideo())
        {
          ConcatenationOfTwoArrays = 0;
          v23 = 0;
          v24 = 0;
          v18 = 0;
          Mutable = 0;
          v17 = 0;
          MutableCopy = 0;
          v25 = 4294954433;
LABEL_26:
          DerivedStorage = v43;
          goto LABEL_70;
        }
        MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
        Mutable = CFArrayCreateMutable(v42, 0, MEMORY[0x1E0C9B378]);
        v16 = *(const __CFArray **)(v5 + 1112);
        if (v16 && CFArrayGetCount(v16) >= 1)
        {
          v17 = (const __CFArray *)FigCFArrayCreateMutableCopy();
          v18 = CFArrayCreateMutable(v42, 0, MEMORY[0x1E0C9B378]);
          if (!MutableCopy)
            goto LABEL_18;
        }
        else
        {
          v17 = 0;
          v18 = 0;
          if (!MutableCopy)
          {
LABEL_18:
            v19 = 0;
            goto LABEL_22;
          }
        }
        v19 = CFArrayGetCount(MutableCopy);
LABEL_22:
        while (v19 > (uint64_t)v13)
        {
          v20 = CFArrayGetValueAtIndex(MutableCopy, --v19);
          CFArrayAppendValue(Mutable, v20);
          CFArrayRemoveValueAtIndex(MutableCopy, v19);
        }
        if (v17)
          v21 = CFArrayGetCount(v17);
        else
          v21 = 0;
        while (v21 > (uint64_t)v13)
        {
          v26 = CFArrayGetValueAtIndex(v17, --v21);
          CFArrayAppendValue(v18, v26);
          CFArrayRemoveValueAtIndex(v17, v21);
        }
        fp_visualContextArrayIfVideoOutputAllowed(*(CFArrayRef *)(v5 + 1728), *(_QWORD *)(v5 + 1160));
        ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
        MEMORY[0x19402EEEC](v8[30]);
        v27 = (const void *)v8[32];
        if (!v27)
        {
          MEMORY[0x19402EF04](v8[30]);
LABEL_37:
          cf = 0;
          goto LABEL_38;
        }
        v28 = (const __CFArray *)CFRetain(v27);
        MEMORY[0x19402EF04](v8[30]);
        if (!v28)
          goto LABEL_37;
        cf = v28;
        if (CFArrayGetCount(v28) >= 1)
        {
          v29 = FigCFArrayCreateConcatenationOfTwoArrays();
          if (ConcatenationOfTwoArrays)
            CFRelease(ConcatenationOfTwoArrays);
          ConcatenationOfTwoArrays = (const void *)v29;
        }
LABEL_38:
        if (*(_QWORD *)(v5 + 656))
        {
          v30 = *(CFTypeRef *)(v5 + 816);
          v51 = v30;
          *(_QWORD *)(v5 + 816) = 0;
          matched = FigImageQueueTableUpdateToMatchOutputsArray(*(_QWORD *)(v5 + 824), (const __CFArray *)ConcatenationOfTwoArrays, *(void **)(v5 + 328), 0, 0, 0);
          if ((_DWORD)matched)
          {
            v25 = matched;
            v32 = 0;
          }
          else
          {
            FigImageQueueTableSetTimebase(*(_QWORD *)(v5 + 824), *(void **)(v5 + 328));
            FigImageQueueTableCopyFigImageQueueArray(*(_QWORD *)(v5 + 824), (uint64_t *)&v50);
            v25 = FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnComposition(a2, v50, *(const void **)(v5 + 808), (uint64_t)"itemfig_removeExcessImageQueuesAndSlots");
            v32 = (const __CFArray *)v50;
            v30 = v51;
          }
          itemfig_removeImageQueueListenersForObsoleteImageQueues((uint64_t)ValueAtIndex, (const __CFArray *)v30, v32);
          *(_QWORD *)(v5 + 816) = v50;
          v50 = 0;
          if (!v18)
            goto LABEL_58;
        }
        else
        {
          v33 = *(_DWORD *)(v5 + 1000);
          if (v33)
          {
            v49 = 0;
            itemfig_getTrackStorage((uint64_t)ValueAtIndex, v33, &v49);
            v34 = v49;
            v25 = FigImageQueueTableCopyFigImageQueueArray(*(_QWORD *)(v49 + 48), (uint64_t *)&v51);
            if (!(_DWORD)v25)
            {
              v25 = FigImageQueueTableUpdateToMatchOutputsArray(*(_QWORD *)(v34 + 48), (const __CFArray *)ConcatenationOfTwoArrays, *(void **)(v5 + 328), 0, 0, 0);
              if (!(_DWORD)v25)
              {
                FigImageQueueTableSetTimebase(*(_QWORD *)(v34 + 48), *(void **)(v5 + 328));
                FigImageQueueTableCopyFigImageQueueArray(*(_QWORD *)(v34 + 48), (uint64_t *)&v50);
                v25 = FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnRenderPipeline(a2, v50, *(const void **)(v34 + 16), (uint64_t)"itemfig_removeExcessImageQueuesAndSlots");
              }
            }
            itemfig_removeImageQueueListenersForObsoleteImageQueues((uint64_t)ValueAtIndex, (const __CFArray *)v51, (const __CFArray *)v50);
            if (!v18)
            {
LABEL_58:
              v24 = 0;
              v23 = 0;
LABEL_59:
              MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 1120));
              v38 = *(const void **)(v5 + 1104);
              *(_QWORD *)(v5 + 1104) = MutableCopy;
              if (MutableCopy)
                CFRetain(MutableCopy);
              if (v38)
                CFRelease(v38);
              v39 = *(const void **)(v5 + 1112);
              *(_QWORD *)(v5 + 1112) = v17;
              if (v17)
                CFRetain(v17);
              if (v39)
                CFRelease(v39);
              MEMORY[0x19402EF04](*(_QWORD *)(v5 + 1120));
              goto LABEL_68;
            }
          }
          else
          {
            v25 = 0;
            if (!v18)
              goto LABEL_58;
          }
        }
        if (CFArrayGetCount(v18) < 1)
          goto LABEL_58;
        v23 = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
        if (v23)
        {
          v24 = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
          if (v24)
          {
            v41 = v25;
            v35 = ConcatenationOfTwoArrays;
            v36 = (const void *)v8[104];
            v8[104] = v23;
            CFRetain(v23);
            if (v36)
              CFRelease(v36);
            v37 = (const void *)v8[103];
            v8[103] = v24;
            CFRetain(v24);
            if (v37)
              CFRelease(v37);
            ConcatenationOfTwoArrays = v35;
            v25 = v41;
            goto LABEL_59;
          }
          v25 = FigSignalErrorAt();
        }
        else
        {
          v25 = FigSignalErrorAt();
          v24 = 0;
        }
LABEL_68:
        DerivedStorage = v43;
        if (cf)
          CFRelease(cf);
LABEL_70:
        if (v50)
          CFRelease(v50);
        if (v51)
          CFRelease(v51);
        if (ConcatenationOfTwoArrays)
          CFRelease(ConcatenationOfTwoArrays);
        if (v17)
          CFRelease(v17);
        if (MutableCopy)
          CFRelease(MutableCopy);
        if (v18)
          CFRelease(v18);
        if (v23)
          CFRelease(v23);
        if (v24)
          CFRelease(v24);
        FPSupport_AppendDeferredTransactionChangeToRelease(a2, (uint64_t)Mutable, (uint64_t)"itemfig_removeExcessImageQueuesAndSlots");
        if (v48)
          CFRelease(v48);
        if ((_DWORD)v25)
          goto LABEL_96;
        v3 = v47 + 1;
      }
      while (v47 != FirstIndexOfValue);
    }
  }
  v25 = 0;
LABEL_96:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  return v25;
}

uint64_t playerfig_gracefullyAddImageQueues(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  BOOL v9;
  _QWORD *v10;
  const __CFArray *v11;
  CFIndex Count;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex v15;
  const void *v16;
  const __CFArray *v17;
  const void *MutableCopy;
  __CFArray *v19;
  const __CFArray *v20;
  uint64_t matched;
  const void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v27;
  unint64_t Dimensions;
  int32_t v29;
  unint64_t v30;
  int *v31;
  CFIndex v32;
  const void *ConcatenationOfTwoArrays;
  uint64_t v34;
  const void *v35;
  CFTypeRef v36;
  int v37;
  void *v38;
  const void *v39;
  const void *v40;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  CFTypeRef cf;
  int v47;
  void *value;
  CFTypeRef v49;
  CFTypeRef v50[2];
  CFTypeRef v51[18];

  v51[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (*(_DWORD *)(DerivedStorage + 52) != 4)
  {
    if (dword_1EE2A2AC8)
    {
LABEL_82:
      LODWORD(v49) = 0;
      LOBYTE(value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      matched = 4294954433;
      goto LABEL_38;
    }
LABEL_86:
    matched = 4294954433;
    goto LABEL_38;
  }
  v4 = *(const void **)(DerivedStorage + 512);
  if (v4 != CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0))
  {
    if (dword_1EE2A2AC8)
      goto LABEL_82;
    goto LABEL_86;
  }
  v5 = *(_QWORD *)(DerivedStorage + 512);
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = (const void *)v7;
  v51[0] = 0;
  v49 = 0;
  v50[0] = 0;
  if (*(_BYTE *)v6)
    v9 = 1;
  else
    v9 = v7 == 0;
  if (!v9)
  {
    v10 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v11 = *(const __CFArray **)(v6 + 1104);
    if (v11)
      Count = CFArrayGetCount(v11);
    else
      Count = 0;
    v13 = v10[27];
    v14 = (const __CFArray *)v10[25];
    if (v14)
      v15 = CFArrayGetCount(v14);
    else
      v15 = 0;
    MEMORY[0x19402EEEC](v10[30]);
    v16 = (const void *)v10[32];
    if (v16)
      cf = CFRetain(v16);
    else
      cf = 0;
    MEMORY[0x19402EF04](v10[30]);
    if (*(_DWORD *)(v6 + 1000))
    {
      v17 = *(const __CFArray **)(v6 + 392);
      if (v17 && CFArrayGetCount(v17) >= 1)
      {
        v44 = v8;
        v45 = DerivedStorage;
        v43 = v5;
        if (v13 < 1)
          MutableCopy = 0;
        else
          MutableCopy = (const void *)FigCFArrayCreateMutableCopy();
        v19 = (__CFArray *)FigCFArrayCreateMutableCopy();
        v24 = *(_QWORD *)(v6 + 968);
        v25 = *(unsigned int *)(v6 + 1000);
        v26 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 56);
        if (v26)
        {
          v42 = a2;
          v27 = v26(v24, v25, v50, 0);
          if (!(_DWORD)v27)
          {
            v27 = itemfig_copyFormatDescription((uint64_t)v50[0], (uint64_t *)v51);
            if (!(_DWORD)v27)
            {
              Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)v51[0]);
              if (Count < v15 + v13)
              {
                v29 = Dimensions;
                v30 = HIDWORD(Dimensions);
                if (v13 >= 1)
                  v31 = &v47;
                else
                  v31 = 0;
                v32 = v15 + v13 - Count;
                do
                {
                  value = 0;
                  v47 = 0;
                  FPSupport_EnsureCAImageQueue((CFTypeRef *)&value, v31, v29, v30);
                  if (v13 >= 1)
                    FigCFArrayAppendInt32();
                  CFArrayAppendValue(v19, value);
                  if (value)
                    CFRelease(value);
                  --v32;
                }
                while (v32);
              }
              fp_visualContextArrayIfVideoOutputAllowed(*(CFArrayRef *)(v6 + 1728), *(_QWORD *)(v6 + 1160));
              ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
              v22 = cf;
              v20 = (const __CFArray *)FigCFArrayCreateConcatenationOfTwoArrays();
              if (ConcatenationOfTwoArrays)
                CFRelease(ConcatenationOfTwoArrays);
              DerivedStorage = v45;
              if (*(_QWORD *)(v6 + 656))
              {
                matched = FigImageQueueTableUpdateToMatchOutputsArray(*(_QWORD *)(v6 + 824), v20, *(void **)(v6 + 328), 0, 0, 0);
                if (!(_DWORD)matched)
                {
                  FigImageQueueTableSetTimebase(*(_QWORD *)(v6 + 824), *(void **)(v6 + 328));
                  FigImageQueueTableCopyFigImageQueueArray(*(_QWORD *)(v6 + 824), (uint64_t *)&v49);
                  FigImageQueueArraySetProperty();
                  v34 = *(_QWORD *)(v6 + 1144);
                  if (v34)
                    itemfig_setVideoEnhancementModeOnImageQueues(v43, v34);
                  itemfig_enableImageQueueTimingAndSetDurationOnFigImageQueueArray(v43);
                  matched = FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnComposition(v42, v49, *(const void **)(v6 + 808), (uint64_t)"itemfig_gracefullyAddImageQueuesAndSlots");
                }
                v35 = *(const void **)(v6 + 816);
                v36 = v49;
                *(_QWORD *)(v6 + 816) = v49;
                if (v36)
                  CFRetain(v36);
                if (v35)
                  CFRelease(v35);
              }
              else
              {
                v37 = *(_DWORD *)(v6 + 1000);
                if (v37)
                {
                  value = 0;
                  itemfig_getTrackStorage(v43, v37, &value);
                  v38 = value;
                  matched = FigImageQueueTableUpdateToMatchOutputsArray(*((_QWORD *)value + 6), v20, *(void **)(v6 + 328), 0, 0, 0);
                  if (!(_DWORD)matched)
                  {
                    FigImageQueueTableSetTimebase(*((_QWORD *)v38 + 6), *(void **)(v6 + 328));
                    FigImageQueueTableCopyFigImageQueueArray(*((_QWORD *)v38 + 6), (uint64_t *)&v49);
                    itemfig_enableImageQueueTimingAndSetDurationOnFigImageQueueArray(v43);
                    matched = FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnRenderPipeline(v42, v49, *((const void **)v38 + 2), (uint64_t)"itemfig_gracefullyAddImageQueuesAndSlots");
                  }
                }
                else
                {
                  matched = 0;
                }
              }
              MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 1120));
              v39 = *(const void **)(v6 + 1104);
              *(_QWORD *)(v6 + 1104) = v19;
              if (v19)
                CFRetain(v19);
              if (v39)
                CFRelease(v39);
              v40 = *(const void **)(v6 + 1112);
              *(_QWORD *)(v6 + 1112) = MutableCopy;
              if (MutableCopy)
                CFRetain(MutableCopy);
              if (v40)
                CFRelease(v40);
              MEMORY[0x19402EF04](*(_QWORD *)(v6 + 1120));
              v8 = v44;
              if (!cf)
                goto LABEL_24;
              goto LABEL_23;
            }
          }
          matched = v27;
          v20 = 0;
        }
        else
        {
          v20 = 0;
          matched = 4294954514;
        }
        v8 = v44;
        DerivedStorage = v45;
      }
      else
      {
        v19 = 0;
        MutableCopy = 0;
        v20 = 0;
        matched = 4294954433;
      }
    }
    else
    {
      matched = FigSignalErrorAt();
      v19 = 0;
      MutableCopy = 0;
      v20 = 0;
    }
    v22 = cf;
    if (!cf)
    {
LABEL_24:
      if (v20)
        CFRelease(v20);
      if (v19)
        CFRelease(v19);
      if (MutableCopy)
        CFRelease(MutableCopy);
      if (v49)
        CFRelease(v49);
      goto LABEL_32;
    }
LABEL_23:
    CFRelease(v22);
    goto LABEL_24;
  }
  matched = 0;
LABEL_32:
  if (v50[0])
    CFRelease(v50[0]);
  if (v51[0])
    CFRelease(v51[0]);
  if (v8)
    CFRelease(v8);
LABEL_38:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  return matched;
}

void playerfig_removeAllImageQueuesFromAllWorkingOrLameDuckItems()
{
  uint64_t DerivedStorage;
  CFIndex FirstIndexOfValue;
  CFIndex v2;
  CFIndex v3;
  const void *ValueAtIndex;
  CFRange v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (*(_QWORD *)(DerivedStorage + 512))
  {
    v5.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
    v5.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v5, *(const void **)(DerivedStorage + 512));
    if ((FirstIndexOfValue & 0x8000000000000000) == 0)
    {
      v2 = 0;
      v3 = FirstIndexOfValue + 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v2);
        itemfig_removeAllImageQueues((uint64_t)ValueAtIndex);
        ++v2;
      }
      while (v3 != v2);
    }
  }
  JUMPOUT(0x19402EA24);
}

void playerfig_resetAlreadyPostedFirstVideoFrameEnqueuedNotificationFlagFromAllWorkingOrLameDuckItems()
{
  uint64_t DerivedStorage;
  CFIndex FirstIndexOfValue;
  CFIndex v2;
  CFIndex v3;
  CFRange v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (*(_QWORD *)(DerivedStorage + 512))
  {
    v4.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
    v4.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v4, *(const void **)(DerivedStorage + 512));
    if ((FirstIndexOfValue & 0x8000000000000000) == 0)
    {
      v2 = 0;
      v3 = FirstIndexOfValue + 1;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v2);
        *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 874) = 0;
        ++v2;
      }
      while (v3 != v2);
    }
  }
  JUMPOUT(0x19402EA24);
}

CFIndex playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const __CFArray *v5;
  const void *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  CFIndex result;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 512))
    return 1;
  v4 = DerivedStorage;
  v5 = *(const __CFArray **)(DerivedStorage + 504);
  if (!v5)
    return 1;
  if (CFArrayGetCount(v5) < 1)
    return 1;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 504), 0);
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (!*(_QWORD *)(v8 + 352) || *(_BYTE *)(v8 + 480))
      return 1;
  }
  if (*(const void **)(v4 + 512) == ValueAtIndex)
    return 0;
  result = *(_QWORD *)(v7 + 368);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result)
    {
      if (result <= 1)
      {
        v10 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 368), 0) + 3);
        if (v10)
          return v10 != *(_QWORD *)(v4 + 560);
      }
      return 1;
    }
  }
  return result;
}

void playerfig_setClosedCaptionsDisplayRequested(const void *a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 297) != a2)
  {
    *(_BYTE *)(DerivedStorage + 297) = a2;
    playerfig_updateClosedCaptionsDisplayForItem(a1, 0);
    playerfig_updateCaptionOrSubtitleHintOnVideoPipeline((uint64_t)a1, 0);
  }
}

void playerfig_setPreferredLanguageLists(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 712));
  v4 = *(const void **)(DerivedStorage + 720);
  *(_QWORD *)(DerivedStorage + 720) = a2;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 712));
  if (v4)
    CFRelease(v4);
}

uint64_t playerfig_setActionAtEnd(const void *a1, int a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  _BOOL4 v7;
  const void *ValueAtIndex;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v14;
  const void *v15;
  NSObject *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  const void *v20;
  _BYTE *v21;
  _BYTE *v22;
  __int128 v23;
  uint64_t v24;
  CFTypeRef cf[2];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(result + 776);
  if (v5 != a2)
  {
    v6 = result;
    MEMORY[0x19402EA0C](*(_QWORD *)(result + 496));
    v7 = 0;
    *(_DWORD *)(v6 + 776) = a2;
    if (a2 != 2 && v5 == 2)
      v7 = *(float *)(v6 + 48) != 0.0;
    if (CFArrayGetCount(*(CFArrayRef *)(v6 + 504)) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 504), 0);
      CFRetain(ValueAtIndex);
      if (ValueAtIndex)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v10 = *(_QWORD *)(DerivedStorage + 352);
        if (v10)
        {
          if (!a2 && v5 && FigPlaybackBossDidReachEnd(v10))
            v7 = 1;
          if (*(_BYTE *)(DerivedStorage + 480))
          {
            v11 = *(unsigned int *)(v6 + 776);
            Count = CFArrayGetCount(*(CFArrayRef *)(v6 + 504));
            if (!FigPlaybackGetEffectiveActionAtEnd(v11, Count))
            {
              v14 = *(const __CFArray **)(v6 + 504);
              if (v14)
              {
                if (CFArrayGetCount(v14) >= 2)
                {
                  v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 504), 1);
                  if (playerfig_maybeUndoQueueingForItem((uint64_t)a1, v15))
                  {
                    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 496));
                    *(_OWORD *)cf = *MEMORY[0x1E0CA2E18];
                    v26 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                    v23 = *(_OWORD *)cf;
                    v24 = v26;
                    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)cf, (uint64_t)&v23, 0);
                    MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 496));
                  }
                }
              }
            }
          }
          FigPlaybackBossSetStopAtEnd(*(_BYTE **)(DerivedStorage + 352), a2 == 1);
          if (v7)
          {
            if (*(_BYTE *)(DerivedStorage + 496)
              && !FigPlaybackBossDidReachEnd(*(_QWORD *)(DerivedStorage + 352)))
            {
              if (dword_1EE2A2AC8)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(_BYTE *)(DerivedStorage + 496) = 0;
              playerfig_prepareNextItemForTransition(a1, ValueAtIndex);
            }
            if (FigPlaybackBossDidReachEnd(*(_QWORD *)(DerivedStorage + 352)))
            {
              if (dword_1EE2A2AC8)
              {
                v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(_BYTE *)(v6 + 800) = 1;
              v17 = (_BYTE *)CMBaseObjectGetDerivedStorage();
              cf[0] = 0;
              if (!*v17)
              {
                v18 = v17;
                v19 = FigCFWeakReferenceHolderCopyReferencedObject();
                if (v19)
                {
                  v20 = (const void *)v19;
                  v21 = (_BYTE *)CMBaseObjectGetDerivedStorage();
                  if (!*v21)
                  {
                    v22 = v21;
                    CFRetain(ValueAtIndex);
                    if (!FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)cf))
                    {
                      MEMORY[0x19402EA0C](*((_QWORD *)v22 + 62));
                      if (*((_QWORD *)v18 + 44))
                        itemfig_advanceToNextItem((uint64_t)ValueAtIndex, cf[0]);
                      MEMORY[0x19402EA24](*((_QWORD *)v22 + 62));
                    }
                    FigDeferredTransactionCommit((uint64_t)cf[0]);
                    if (cf[0])
                      CFRelease(cf[0]);
                    playerfig_updatePlaybackStateAndBossRate(v20, 7, 0);
                    CFRelease(ValueAtIndex);
                    CFRelease(v20);
                  }
                }
              }
              *(_BYTE *)(v6 + 800) = 0;
            }
          }
        }
        CFRelease(ValueAtIndex);
        playerfig_updateStartHostTimeEstimatesOfAllItems((uint64_t)a1);
      }
    }
    return MEMORY[0x19402EA24](*(_QWORD *)(v6 + 496));
  }
  return result;
}

uint64_t playerfig_updatePlayerActiveState(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  const void *v13;
  const __CFArray *v14;
  uint64_t v15;
  CFIndex FirstIndexOfValue;
  CFIndex v17;
  CFIndex v18;
  NSObject *v19;
  NSObject *v20;
  CFTypeRef cf;
  BOOL v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  CFRange v29;

  v28 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  cf = 0;
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 60) == a2)
  {
    if (dword_1EE2A2AC8)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  else
  {
    v7 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
    if (!(_DWORD)v7)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
      v8 = *(_DWORD *)(DerivedStorage + 60);
      if (a2)
      {
        *(_DWORD *)(DerivedStorage + 60) = a2;
        playerfig_configureCacheVolatilityInPlayQueue();
        if (v8 == 1)
        {
          if (dword_1EE2A2AC8)
          {
            v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (*(_QWORD *)(DerivedStorage + 512) && *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 1288))
            itemfig_becameBothCurrentAndReadyForInspection(*(_QWORD *)(DerivedStorage + 512), &v23);
        }
        else if (v8)
        {
          if (dword_1EE2A2AC8)
          {
            v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          playerfig_UpdateAudioSessionPreferredDeviceFormat();
        }
        else
        {
          if (dword_1EE2A2AC8)
          {
            v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          playerfig_prepareWorkingItem(a1, 0, cf);
        }
        MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
        if (v23)
        {
          if (dword_1EE2A2AC8)
          {
            v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v26 = *MEMORY[0x1E0CA2E18];
          v27 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          v24 = v26;
          v25 = v27;
          playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&v26, (uint64_t)&v24, cf);
        }
        playerfig_configureDownloadInPlayQueue();
      }
      if (dword_1EE2A2AC8)
      {
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playerfig_disturbPlayQueue();
      playeritemfig_releaseRenderPipelines(a1, 0, cf);
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 240));
      v13 = *(const void **)(DerivedStorage + 248);
      if (v13)
        v14 = (const __CFArray *)CFRetain(v13);
      else
        v14 = 0;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 240));
      playerfig_sendEmptyConfigurationToEachVideoTarget((int)a1, v14);
      if (v14)
        CFRelease(v14);
      v15 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EA0C](*(_QWORD *)(v15 + 496));
      if (*(_QWORD *)(v15 + 512))
      {
        v29.length = CFArrayGetCount(*(CFArrayRef *)(v15 + 504));
        v29.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v15 + 504), v29, *(const void **)(v15 + 512));
        if ((FirstIndexOfValue & 0x8000000000000000) == 0)
        {
          v17 = 0;
          v18 = FirstIndexOfValue + 1;
          do
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(v15 + 504), v17);
            itemfig_releaseAIMEDataAndAllAIMEDataChannelResources();
            ++v17;
          }
          while (v18 != v17);
        }
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v15 + 496));
      playerfig_removeAllImageQueuesFromAllWorkingOrLameDuckItems();
      playerfig_freeTransitionImageQueueAndSlot();
    }
    FigDeferredTransactionCommit((uint64_t)cf);
    if (cf)
      CFRelease(cf);
    if (dword_1EE2A2AC8)
    {
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v7;
}

void itemfig_reportingAgentReportBufferedAirPlayMode(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  void (*v8)(uint64_t, __CFString *, __CFString *, _BOOL8, _QWORD);

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v3 = CMBaseObjectGetDerivedStorage();
    if (v2)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v5 = v3;
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1896));
      v6 = *(_QWORD *)(DerivedStorage + 1904);
      v7 = *(_QWORD *)(v5 + 168) != 0;
      if (v6)
      {
        v8 = *(void (**)(uint64_t, __CFString *, __CFString *, _BOOL8, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
        if (v8)
          v8(v6, CFSTR("playerStats"), CFSTR("BufferedAirPlay"), v7, 0);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1896));
      goto LABEL_10;
    }
    if (v2)
LABEL_10:
      CFRelease(v2);
  }
}

void playerfig_setResourceConservationLevelAndUpdateWhenPaused(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(DerivedStorage + 68) = a2;
  v6 = *(float *)(DerivedStorage + 48);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  if (v6 == 0.0)
    playerfig_updateEffectiveResourceConservationLevel(a1);
}

uint64_t playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v3 = *(const __CFArray **)(DerivedStorage + 504);
  if (v3
    && CFArrayGetCount(v3) >= 1
    && !playerfig_isCurrentItemQuiescent()
    && !itemfig_rebuildRenderPipelinesAndBossGuts(*(const void **)(DerivedStorage + 512), 0, 0, 1, 0, 0, 1)&& !itemfig_rebuildRenderPipelinesAndBossGuts(*(const void **)(DerivedStorage + 512), 1, 1, 1, 0, 0, 0))
  {
    playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, *(const __CFString **)(DerivedStorage + 512), MEMORY[0x1E0CA2E18]);
    JUMPOUT(0x19402EA24);
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  v7 = *MEMORY[0x1E0CA2E18];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v5 = v7;
  v6 = v8;
  return playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&v7, (uint64_t)&v5, 0);
}

void playerfig_traceVideoTargetEvent(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, __CFString *, _QWORD, CFStringRef *);
  const __CFString *v4;
  CFRange v5;
  CFStringRef theString;
  char __dst[8];
  UInt8 buffer[8];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  theString = 0;
  CMBaseObject = FigVideoTargetGetCMBaseObject(a2);
  v3 = *(void (**)(uint64_t, __CFString *, _QWORD, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v3)
  {
    v3(CMBaseObject, CFSTR("ReceiverLoggingIdentifier"), *MEMORY[0x1E0C9AE00], &theString);
    v4 = theString;
    if (*MEMORY[0x1E0CA1FC0] != 1)
      goto LABEL_11;
    *(_QWORD *)buffer = 0;
    if (theString)
    {
      if (CFStringGetLength(theString) <= 8)
        v5.length = CFStringGetLength(v4);
      else
        v5.length = 8;
      v5.location = 0;
      CFStringGetBytes(v4, v5, 0, 0x3Fu, 0, buffer, 8, 0);
    }
  }
  else
  {
    if (*MEMORY[0x1E0CA1FC0] != 1)
      return;
    *(_QWORD *)buffer = 0;
  }
  strncpy(__dst, (const char *)buffer, 8uLL);
  kdebug_trace();
  v4 = theString;
LABEL_11:
  if (v4)
    CFRelease(v4);
}

void itemfig_setVideoEnhancementModeOnImageQueues(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, uint64_t);
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  uint64_t i;
  uint64_t v15;
  const __CFArray *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, const __CFString *, uint64_t);
  uint64_t v20;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 656))
  {
    v6 = *(_QWORD *)(DerivedStorage + 824);
    if (v6)
    {
      if (FigImageQueueTableCopyMappedImageQueueArray(v6, *(_QWORD *)(v5 + 1104), (uint64_t *)&cf))
        goto LABEL_21;
      FigImageQueueArraySetProperty();
    }
  }
  else
  {
    v7 = *(_DWORD *)(DerivedStorage + 1000);
    if (v7)
    {
      v20 = 0;
      if (itemfig_getTrackStorage(a1, v7, &v20))
        goto LABEL_21;
      v8 = *(_QWORD *)(v20 + 16);
      if (!v8)
        goto LABEL_21;
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
      v10 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v10)
        v10(FigBaseObject, CFSTR("VideoEnhancementMode"), a2);
    }
  }
  v11 = *(const __CFArray **)(v5 + 1048);
  if (v11)
  {
    Count = CFArrayGetCount(v11);
    if (Count >= 1)
    {
      v13 = Count;
      for (i = 0; i != v13; ++i)
      {
        v20 = 0;
        FigCFArrayGetInt32AtIndex();
        itemfig_getTrackStorage(a1, 0, &v20);
        v15 = v20;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 4) == 1986618469)
          {
            v16 = *(const __CFArray **)(v20 + 216);
            if (v16)
            {
              if (CFArrayGetCount(v16) >= 1)
              {
                v17 = *(_QWORD *)(v15 + 248);
                if (v17)
                {
                  v18 = FigRenderPipelineGetFigBaseObject(v17);
                  v19 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
                  if (v19)
                    v19(v18, CFSTR("VideoEnhancementMode"), a2);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_21:
  if (cf)
    CFRelease(cf);
}

uint64_t playerfig_maybeUndoQueueingForItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  __CFString *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v9;
  NSObject *v10;
  const __CFSet *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  const char *v24;
  const char *v25;
  NSObject *v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  os_log_type_t type;
  unsigned int v31;
  char context;
  int v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const void *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;
  CFRange v44;
  CFRange v45;

  v43 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v27 = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  v44.location = 0;
  v44.length = Count;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v44, a2);
  context = 0;
  v7 = fp_copyPlayQueueDescription();
  if (dword_1EE2A2AC8)
  {
    v31 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7)
    CFRelease(v7);
  if (!FirstIndexOfValue)
  {
    if (!dword_1EE2A2AC8)
      return 0;
LABEL_19:
    v31 = 0;
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    goto LABEL_25;
  }
  v9 = *(const void **)(DerivedStorage + 512);
  if (!v9)
  {
    if (!dword_1EE2A2AC8)
      return 0;
    goto LABEL_19;
  }
  v45.location = 0;
  v45.length = Count;
  if (FirstIndexOfValue > CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v45, v9))
  {
    if (dword_1EE2A2AC8)
    {
      v31 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
LABEL_25:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    return 0;
  }
  v11 = *(const __CFSet **)(v27 + 360);
  if (!v11)
  {
    if (!dword_1EE2A2AC8)
      return 0;
    goto LABEL_19;
  }
  CFSetApplyFunction(v11, (CFSetApplierFunction)fp_writeTrueIfARenderPipelineDoesntImplementCancelAndFlushTransition, &context);
  if (context)
  {
    if (dword_1EE2A2AC8)
    {
      v31 = 0;
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      goto LABEL_25;
    }
    return 0;
  }
  CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), FirstIndexOfValue - 1);
  v14 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v14 + 488))
  {
    if (dword_1EE2A2AC8)
    {
      v31 = 0;
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      goto LABEL_25;
    }
    return 0;
  }
  v15 = v14;
  if (dword_1EE2A2AC8)
  {
    v31 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)(DerivedStorage + 512))
  {
    v18 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(v18 + 480))
    {
      v19 = v18;
      FigPlaybackBossInterruptQueueing(*(_QWORD *)(v18 + 352));
      FigPlaybackBossGoQuiescent(*(_QWORD *)(v19 + 352));
      *(_BYTE *)(v19 + 480) = 1;
    }
  }
  v20 = *(_QWORD *)(v15 + 488);
  v28[0] = *(_QWORD *)(v15 + 328);
  v28[1] = v20;
  v29 = 0;
  CFSetApplyFunction(*(CFSetRef *)(v27 + 360), (CFSetApplierFunction)fp_callCancelAndFlushTransition, v28);
  result = v29;
  if (!(_DWORD)v29)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), FirstIndexOfValue);
    itemfig_antiprepare();
  }
  if ((_DWORD)v29 == -12857)
  {
    if (dword_1EE2A2AC8)
    {
      v31 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v22 = v31;
      if (os_log_type_enabled(v21, type))
        v23 = v22;
      else
        v23 = v22 & 0xFFFFFFFE;
      if (v23)
      {
        if (a1)
          v24 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
        else
          v24 = "";
        if (a2)
          v25 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
        else
          v25 = "";
        v33 = 136316162;
        v34 = "playerfig_maybeUndoQueueingForItem";
        v35 = 2048;
        v36 = a1;
        v37 = 2082;
        v38 = v24;
        v39 = 2048;
        v40 = a2;
        v41 = 2082;
        v42 = v25;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294954439;
  }
  return result;
}

uint64_t fp_writeTrueIfARenderPipelineDoesntImplementCancelAndFlushTransition(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  result = CMBaseObjectGetVTable();
  if (!*(_QWORD *)(*(_QWORD *)(result + 16) + 80))
    *a2 = 1;
  return result;
}

uint64_t fp_callCancelAndFlushTransition(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  if (!*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (v5)
      result = v5(v3, v4);
    else
      result = 4294954514;
    *(_DWORD *)(a2 + 16) = result;
  }
  return result;
}

void itemfig_becameBothCurrentAndReadyForInspection(uint64_t a1, BOOL *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  _BOOL4 updated;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  BOOL v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    v6 = (const void *)v5;
    if (*(double *)(DerivedStorage + 1960) == 0.0)
      *(CFAbsoluteTime *)(DerivedStorage + 1960) = CFAbsoluteTimeGetCurrent();
    updated = playerfig_UpdateAudioSessionPreferredDeviceFormat();
    playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
    v9 = (updated | playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels((uint64_t)v6)) != 0;
    if (dword_1EE2A2AC8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a2)
      *a2 = v9;
    itemfig_InformStakeholdersOfBestAvailableAudioContentType(a1);
    CFRelease(v6);
  }
}

uint64_t playerfig_StartPreroll(float a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t started;
  uint64_t v11;
  NSObject *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)DerivedStorage || a1 == 0.0)
    return FigSignalErrorAt();
  if (*(float *)(DerivedStorage + 48) == 0.0)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    if (*(_QWORD *)(DerivedStorage + 512))
    {
      v8 = CMBaseObjectGetDerivedStorage();
      if (*(_QWORD *)(v8 + 352))
      {
        v9 = v8;
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(_QWORD *)(DerivedStorage + 512), a3);
        started = FigPlaybackBossStartPreroll(*(_QWORD *)(v9 + 352), *(const __CFDictionary **)(v9 + 512), *(const void **)(v9 + 512), a1);
        goto LABEL_19;
      }
      if (dword_1EE2A2AC8)
        goto LABEL_15;
    }
    else if (dword_1EE2A2AC8)
    {
LABEL_15:
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1)
    {
      v11 = 0;
      *(_BYTE *)(DerivedStorage + 544) = 1;
      *(float *)(DerivedStorage + 548) = a1;
      *(_DWORD *)(DerivedStorage + 552) = a3;
LABEL_20:
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
      return v11;
    }
    started = FigSignalErrorAt();
LABEL_19:
    v11 = started;
    goto LABEL_20;
  }
  v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return FigSignalErrorAt();
}

uint64_t playerfig_StepByCount(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)DerivedStorage || !*(_QWORD *)(DerivedStorage + 512))
    return FigSignalErrorAt();
  if (*(float *)(DerivedStorage + 48) != 0.0)
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return FigSignalErrorAt();
  }
  v7 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v7 + 352))
    return FigSignalErrorAt();
  v8 = v7;
  v9 = *(_DWORD *)(v7 + 524);
  if (v9)
  {
    *(_DWORD *)(v7 + 524) = 0;
    *(_DWORD *)(v7 + 536) = 0;
    itemfig_postSeekWasCanceledNotification(a1, *(_QWORD *)(DerivedStorage + 512), v9, 0);
  }
  itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(_QWORD *)(DerivedStorage + 512), 0);
  return FigPlaybackBossStepByCount(*(_QWORD *)(v8 + 352), a2, *(const void **)(v8 + 512));
}

uint64_t playerfig_SetRateAndAnchorTime(const void *a1, CMTime *a2, uint64_t a3, char a4, float a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFDictionaryRef v11;
  uint64_t v12;
  void *values[2];
  uint64_t v15;
  CMTime time;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((a2->flags & 0x1D) != 1 && (*(_DWORD *)(a3 + 12) & 0x1D) != 1)
    return playerfig_setRateForReason(a1, 0, a5);
  if ((a4 & 1) != 0)
  {
    time.value = (CMTimeValue)CFSTR("EstablishCoordinatedPlaybackTiming");
    values[0] = *(void **)MEMORY[0x1E0C9AE50];
    v11 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&time, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  else
  {
    v11 = 0;
  }
  time = *a2;
  *(_OWORD *)values = *(_OWORD *)a3;
  v15 = *(_QWORD *)(a3 + 16);
  v12 = playerfig_setRateGuts(a1, 0, MEMORY[0x1E0CA2E18], (uint64_t)&time, (uint64_t)values, a5);
  if (v11)
    CFRelease(v11);
  return v12;
}

uint64_t playerfig_CreatePlaybackItemFromAsset(const void *a1, const void *a2, int a3, const __CFDictionary *a4, _QWORD *a5)
{
  _BYTE *DerivedStorage;
  CFAllocatorRef v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v14;
  CFAllocatorRef v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  const __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  CFTypeRef v24;
  const __CFString *v25;
  int AssetDoNotLogURLs;
  BOOL v27;
  CFTypeRef v28;
  void *v29;
  CFTypeRef v30;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  CFTypeRef v35;
  const char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CFTypeRef v42;
  CFTypeRef v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  dispatch_queue_t v51;
  const __CFAllocator *v52;
  OpaqueCMClock *HostTimeClock;
  uint64_t OnlyTimebase;
  uint64_t v55;
  uint64_t v56;
  CFAllocatorRef v57;
  uint64_t v58;
  void (*v59)(uint64_t, const __CFString *, CFAllocatorRef, _BYTE *);
  const __CFDictionary *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  CFTypeRef v64;
  _QWORD *v65;
  CFTypeRef v66;
  uint64_t started;
  uint64_t v68;
  const __CFString *v69;
  dispatch_queue_t **v70;
  CFTypeRef v71;
  CFArrayRef v72;
  CFMutableDictionaryRef Mutable;
  NSObject *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t AssetBasicsIfReady;
  int v80;
  __int128 v81;
  _QWORD *v82;
  CFTypeRef v83;
  CFTypeRef v84;
  uint64_t v85;
  CFTypeRef v86;
  CFTypeRef v87;
  os_log_type_t type;
  unsigned int v89;
  CFTypeRef v90;
  uint64_t v91;
  CFTypeRef v92;
  CFTypeRef cf;
  void *value;
  CFTypeRef v95;
  CFTypeRef v96;
  _BYTE theDict[12];
  __int16 v98;
  const void *v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  const __CFString *v103;
  __int16 v104;
  const void *v105;
  __int16 v106;
  CFTypeRef v107;
  __int16 v108;
  const char *v109;
  CMTime v110;
  char __str[16];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v86 = 0;
  v87 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!a1 || *DerivedStorage || !a2 || !a5)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_119;
  }
  v11 = CFGetAllocator(a1);
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (!v13)
    goto LABEL_21;
  v14 = v13(CMBaseObject, CFSTR("assetProperty_CreationURL"), v11, &v86);
  if ((_DWORD)v14)
  {
LABEL_119:
    v20 = v14;
    goto LABEL_113;
  }
  v15 = CFGetAllocator(a1);
  v16 = FigAssetGetCMBaseObject(a2);
  v17 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (!v17)
  {
LABEL_21:
    v20 = 4294954514;
    goto LABEL_113;
  }
  v14 = v17(v16, CFSTR("assetProperty_ByteStreamProvider"), v15, &v87);
  if ((_DWORD)v14)
    goto LABEL_119;
  v18 = (const __CFString *)v86;
  v83 = v87;
  v19 = CMBaseObjectGetDerivedStorage();
  v95 = 0;
  v96 = 0;
  cf = 0;
  value = 0;
  v91 = 0;
  v92 = 0;
  v90 = 0;
  v114 = 0u;
  v115 = 0u;
  v112 = 0u;
  v113 = 0u;
  *(_OWORD *)__str = 0u;
  CFGetAllocator(a1);
  FigPlaybackItemGetClassID();
  v20 = CMDerivedObjectCreate();
  v21 = &sFigCDSNodeProtocolID;
  if (!v96)
  {
    FigSignalErrorAt();
    v28 = 0;
    goto LABEL_23;
  }
  v82 = a5;
  v22 = CMBaseObjectGetDerivedStorage();
  v23 = (char *)(v22 + 2048);
  *(_BYTE *)(v22 + 2048) = 0;
  if (a4 && CFDictionaryGetValueIfPresent(a4, CFSTR("LoggingIdentifier"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, v23, 10, 0x600u);
  if (FigCFDictionaryGetValueIfPresent())
  {
    v24 = cf;
    if (cf)
      v24 = CFRetain(cf);
    *(_QWORD *)(v22 + 2128) = v24;
  }
  v85 = v19;
  v25 = CFSTR("<redacted>");
  if (FigIsItOKToLogURLs())
  {
    AssetDoNotLogURLs = FPSupport_GetAssetDoNotLogURLs((uint64_t)a2);
    v27 = AssetDoNotLogURLs == 0;
    if (!AssetDoNotLogURLs)
      v25 = v18;
  }
  else
  {
    v27 = 0;
  }
  *(_BYTE *)(v22 + 1241) = v27;
  if (FigCFDictionaryGetValueIfPresent())
  {
    v30 = v92;
    if (v92)
      v30 = CFRetain(v92);
    *(_QWORD *)(v22 + 2032) = v30;
  }
  if (FigCFDictionaryGetValueIfPresent())
    *(_BYTE *)(v22 + 2040) = *MEMORY[0x1E0C9AE50] == v91;
  if (dword_1EE2A2AC8)
  {
    v89 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v32 = v89;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
      v33 = v32;
    else
      v33 = v32 & 0xFFFFFFFE;
    if (v33)
    {
      v80 = a3;
      v34 = CMBaseObjectGetDerivedStorage() + 944;
      v35 = v96;
      if (v96)
        v36 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      else
        v36 = "";
      *(_DWORD *)theDict = 136316675;
      *(_QWORD *)&theDict[4] = "fp_CreatePlaybackItem";
      v98 = 2048;
      v99 = a1;
      v100 = 2082;
      v101 = v34;
      v102 = 2113;
      v103 = v25;
      v104 = 2048;
      v105 = a2;
      v106 = 2048;
      v107 = v35;
      v108 = 2082;
      v109 = v36;
      _os_log_send_and_compose_impl();
      a3 = v80;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)(v22 + 8) = a1;
  v37 = MEMORY[0x1E0CA2E18];
  v38 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v22 + 140) = *MEMORY[0x1E0CA2E18];
  v39 = *(_QWORD *)(v37 + 16);
  *(_QWORD *)(v22 + 156) = v39;
  *(_OWORD *)(v22 + 164) = v38;
  *(_QWORD *)(v22 + 180) = v39;
  *(_OWORD *)(v22 + 188) = v38;
  *(_QWORD *)(v22 + 204) = v39;
  *(_QWORD *)(v22 + 40) = v39;
  v81 = v38;
  *(_OWORD *)(v22 + 24) = v38;
  *(_DWORD *)(v22 + 284) = 0x1000000;
  *(_WORD *)(v22 + 288) = 1;
  *(_DWORD *)(v22 + 292) = 0x40000000;
  *(_BYTE *)(v22 + 290) = 0;
  CMTimeMake(&v110, 1, 10);
  *(CMTime *)(v22 + 296) = v110;
  *(_BYTE *)(v22 + 320) = 0;
  v40 = MEMORY[0x1E0CA2E28];
  *(_OWORD *)(v22 + 48) = *MEMORY[0x1E0CA2E28];
  *(_QWORD *)(v22 + 64) = *(_QWORD *)(v40 + 16);
  v41 = MEMORY[0x1E0CA2E30];
  *(_OWORD *)(v22 + 72) = *MEMORY[0x1E0CA2E30];
  *(_QWORD *)(v22 + 88) = *(_QWORD *)(v41 + 16);
  *(_DWORD *)(v22 + 96) = 0;
  *(_DWORD *)(v22 + 936) = 0;
  if (v18)
    v42 = CFRetain(v18);
  else
    v42 = 0;
  *(_QWORD *)(v22 + 112) = v42;
  *(_QWORD *)(v22 + 1216) = CFRetain(a2);
  v43 = v83;
  if (v83)
    v43 = CFRetain(v83);
  *(_QWORD *)(v22 + 976) = v43;
  *(_DWORD *)(v22 + 120) = a3;
  *(_BYTE *)(v22 + 137) = (a3 & 0x40) != 0;
  *(_DWORD *)(v22 + 1408) = 0;
  *(_DWORD *)(v22 + 1424) = 1;
  *(_QWORD *)(v22 + 1416) = CFSTR("Connected");
  *(_QWORD *)(v22 + 504) = FigSimpleMutexCreate();
  *(_DWORD *)(v22 + 524) = 0;
  *(_DWORD *)(v22 + 536) = 0;
  *(_WORD *)(v22 + 544) = 0;
  *(_DWORD *)(v22 + 1428) = 1065353216;
  *(_DWORD *)(v22 + 1440) = 0;
  *(_QWORD *)(v22 + 640) = FigSimpleMutexCreate();
  *(_BYTE *)(v22 + 1242) = 1;
  *(_QWORD *)(v22 + 1120) = FigSimpleMutexCreate();
  *(_BYTE *)(v22 + 1392) = 1;
  *(_DWORD *)(v22 + 2044) = FPSupport_InitialSeekIDForSource(1);
  MEMORY[0x19402EEEC](*(_QWORD *)(v85 + 456));
  v44 = *(const void **)(v85 + 464);
  if (v44)
  {
    v28 = CFRetain(v44);
    MEMORY[0x19402EF04](*(_QWORD *)(v85 + 456));
    if (v28)
      *(_BYTE *)(v22 + 1393) = FPSupport_CopyAndCheckClientOnAllowListForPrefDomainKey((uint64_t)v28, 1, 0x1E2FE86B8, &v90);
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v85 + 456));
    v28 = 0;
  }
  v45 = FigReentrantMutexCreate();
  *(_QWORD *)(v22 + 1400) = v45;
  if (!v45)
    goto LABEL_123;
  v46 = FigSimpleMutexCreate();
  *(_QWORD *)(v22 + 1208) = v46;
  if (!v46)
    goto LABEL_123;
  v47 = FigSimpleMutexCreate();
  *(_QWORD *)(v22 + 672) = v47;
  if (!v47)
    goto LABEL_123;
  *(_DWORD *)(v22 + 664) = 0;
  CMTimeMake(&v110, 1, 3);
  *(CMTime *)(v22 + 692) = v110;
  *(_DWORD *)(v22 + 716) = 0;
  *(_OWORD *)(v22 + 720) = xmmword_1932F7750;
  *(_DWORD *)(v22 + 736) = 1065353216;
  v48 = FigSimpleMutexCreate();
  *(_QWORD *)(v22 + 776) = v48;
  if (!v48)
    goto LABEL_123;
  *(_WORD *)(v22 + 1328) = 1;
  *(_BYTE *)(v22 + 1330) = 0;
  *(_QWORD *)(v22 + 1336) = 0;
  *(_OWORD *)(v22 + 1356) = v81;
  *(_QWORD *)(v22 + 1372) = v39;
  v49 = FigReentrantMutexCreate();
  *(_QWORD *)(v22 + 616) = v49;
  if (!v49)
    goto LABEL_123;
  *(_QWORD *)(v22 + 1128) = 0;
  *(_WORD *)(v22 + 1136) = 256;
  v50 = FigSimpleMutexCreate();
  *(_QWORD *)(v22 + 848) = v50;
  if (!v50)
    goto LABEL_123;
  *(_WORD *)(v22 + 1152) = 257;
  snprintf(__str, 0x50uLL, "com.apple.coremedia.fileplaybackitem.timer.%s", v23);
  v51 = dispatch_queue_create(__str, 0);
  *(_QWORD *)(v22 + 104) = v51;
  if (v51)
  {
    v84 = v28;
    v52 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    HostTimeClock = CMClockGetHostTimeClock();
    OnlyTimebase = CMTimebaseCreateWithSourceClock(v52, HostTimeClock, (CMTimebaseRef *)(v22 + 328));
    if (!(_DWORD)OnlyTimebase)
    {
      OnlyTimebase = CMTimebaseCreateReadOnlyTimebase();
      if (!(_DWORD)OnlyTimebase)
      {
        v55 = FigSimpleMutexCreate();
        *(_QWORD *)(v22 + 2088) = v55;
        if (v55)
        {
          *(_QWORD *)theDict = 0;
          v56 = *(_QWORD *)(v22 + 1216);
          v57 = CFGetAllocator(a1);
          v58 = FigAssetGetCMBaseObject(v56);
          v59 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v59)
            v59(v58, CFSTR("assetProperty_CreationOptionsDictionary"), v57, theDict);
          v21 = &sFigCDSNodeProtocolID;
          if (!*(_QWORD *)theDict)
          {
LABEL_78:
            if (v90)
              CFRelease(v90);
            started = FigStartForwardingMediaServicesProcessDeathNotification();
            if ((_DWORD)started)
              goto LABEL_122;
            started = FigStartForwardingMediaServicesProcessDeathNotification();
            if ((_DWORD)started)
              goto LABEL_122;
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListeners();
            MEMORY[0x19402EEEC](*(_QWORD *)(v85 + 40));
            CFSetAddValue(*(CFMutableSetRef *)(v85 + 32), v96);
            MEMORY[0x19402EF04](*(_QWORD *)(v85 + 40));
            *(CFAbsoluteTime *)(v22 + 1520) = CFAbsoluteTimeGetCurrent();
            *(CFAbsoluteTime *)(v22 + 1920) = CFAbsoluteTimeGetCurrent();
            *(_QWORD *)(v22 + 1896) = FigSimpleMutexCreate();
            *(_OWORD *)(v22 + 1704) = 0u;
            v68 = FigSimpleMutexCreate();
            *(_QWORD *)(v22 + 1736) = v68;
            if (v68)
            {
              v69 = CFSTR("TimeDomain");
              if (CFSTR("TimeDomain"))
                v69 = (const __CFString *)CFRetain(CFSTR("TimeDomain"));
              *(_QWORD *)(v22 + 1464) = v69;
              *(_QWORD *)(v22 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
              if (FigRenderedLegibleOutputManagerIsSupported())
              {
                v70 = (dispatch_queue_t **)(v22 + 1744);
                started = FigLegibleOutputManagerCreate((uint64_t)v52, (uint64_t)itemfig_postLegibleOutputNotification, (uint64_t)itemfig_postLegibleFlushNotification, (uint64_t)v96, (CFTypeRef *)(v22 + 1744));
                if ((_DWORD)started)
                {
LABEL_122:
                  v20 = started;
                  a5 = v82;
                  v28 = v84;
                  goto LABEL_23;
                }
                FigLegibleOutputManagerSetCaptionPipelineStrategy(*v70, *(_BYTE *)(v85 + 781) == 0);
                FigLegibleOutputManagerSetCaptionRenderingStrategy(*v70, *(_BYTE *)(v85 + 782) == 0);
              }
              if (FigRenderedLegibleOutputManagerIsSupported())
              {
                started = FigRenderedLegibleOutputManagerCreate((uint64_t)v52, itemfig_postRenderedLegibleOutputNotification, itemfig_postRenderedLegibleFlushNotification, (uint64_t)v96, (CFTypeRef *)(v22 + 1776));
                if ((_DWORD)started)
                  goto LABEL_122;
              }
              started = FigMetadataStorageCreate(&v95);
              if ((_DWORD)started)
                goto LABEL_122;
              v71 = v95;
              *(_QWORD *)(v22 + 1760) = v95;
              v95 = 0;
              FPSupport_SetMetadataOutputCallbacks((uint64_t)v71, (uint64_t)itemfig_postMetadataOutputChanged, (uint64_t)itemfig_postMetadataOutputFlushed);
              v72 = CFArrayCreate(v52, 0, 0, MEMORY[0x1E0C9B378]);
              *(_QWORD *)(v22 + 1768) = v72;
              if (v72)
              {
                Mutable = CFDictionaryCreateMutable(v52, 0, 0, MEMORY[0x1E0C9B3A0]);
                *(_QWORD *)(v22 + 1096) = Mutable;
                if (Mutable)
                {
                  CMNotificationCenterGetDefaultLocalCenter();
                  FigNotificationCenterAddWeakListener();
                  v20 = 0;
                  v29 = (void *)v96;
                  v96 = 0;
                  a5 = v82;
                  v28 = v84;
                  if (!v84)
                    goto LABEL_95;
                  goto LABEL_94;
                }
              }
            }
            started = FigSignalErrorAt();
            goto LABEL_122;
          }
          v60 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)theDict, CFSTR("assetOption_PreloadDurationWhenNextItem"));
          CMTimeMakeFromDictionary(&v110, v60);
          *(CMTime *)(v22 + 1356) = v110;
          v61 = (const void *)*MEMORY[0x1E0C9AE50];
          *(_BYTE *)(v22 + 2016) = v61 == CFDictionaryGetValue(*(CFDictionaryRef *)theDict, CFSTR("assetOption_VideoNotEligibleForAppRecording"));
          v62 = CFDictionaryGetValue(*(CFDictionaryRef *)theDict, CFSTR("assetOption_DownloadDestinationURL"));
          if (v62)
            v62 = CFRetain(v62);
          *(_QWORD *)(v22 + 2096) = v62;
          v63 = CFDictionaryGetValue(*(CFDictionaryRef *)theDict, CFSTR("assetOption_ClientBundleIdentifier"));
          if (v63)
          {
            v64 = CFRetain(v63);
            *(_QWORD *)(v22 + 2080) = v64;
            if (v64)
            {
LABEL_76:
              *(_WORD *)(v22 + 2120) = 256;
              if (*(_QWORD *)theDict)
                CFRelease(*(CFTypeRef *)theDict);
              goto LABEL_78;
            }
            v65 = (_QWORD *)(v22 + 2080);
          }
          else
          {
            v65 = (_QWORD *)(v22 + 2080);
            *(_QWORD *)(v22 + 2080) = 0;
          }
          v66 = v90;
          if (v90)
            v66 = CFRetain(v90);
          *v65 = v66;
          goto LABEL_76;
        }
        OnlyTimebase = FigSignalErrorAt();
      }
    }
    v20 = OnlyTimebase;
    a5 = v82;
    v28 = v84;
  }
  else
  {
LABEL_123:
    v20 = FigSignalErrorAt();
    a5 = v82;
  }
  v21 = &sFigCDSNodeProtocolID;
LABEL_23:
  if (v96)
    CFRelease(v96);
  v29 = 0;
  if (v28)
LABEL_94:
    CFRelease(v28);
LABEL_95:
  if (v95)
    CFRelease(v95);
  if ((_DWORD)v20 && *((_DWORD *)v21 + 690))
  {
    v89 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v75 = v89;
    if (os_log_type_enabled(v74, type))
      v76 = v75;
    else
      v76 = v75 & 0xFFFFFFFE;
    if (v76)
    {
      *(_DWORD *)theDict = 136315394;
      *(_QWORD *)&theDict[4] = "fp_CreatePlaybackItem";
      v98 = 1024;
      LODWORD(v99) = v20;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_111;
  }
  if (!(_DWORD)v20)
  {
    v77 = CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListeners();
    if ((a3 & 0x80) != 0)
    {
      *(_BYTE *)(v77 + 1242) = 0;
    }
    else
    {
      AssetBasicsIfReady = itemfig_retrieveAssetBasicsIfReady(v29);
      if ((_DWORD)AssetBasicsIfReady)
      {
        v20 = AssetBasicsIfReady;
        goto LABEL_111;
      }
    }
    v20 = 0;
    *a5 = v29;
    goto LABEL_113;
  }
LABEL_111:
  if (v29)
    CFRelease(v29);
LABEL_113:
  if (v87)
    CFRelease(v87);
  if (v86)
    CFRelease(v86);
  return v20;
}

uint64_t playerfig_SetRateWithOptions(const void *a1, float a2)
{
  CMTimeEpoch v4;
  __int128 v6;
  __int128 v7;
  CMTimeEpoch v8;
  __int128 v9;
  CMTimeEpoch v10;
  CMTime v11;
  int v12;
  CMTime v13;

  v6 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v13.value = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v13.epoch = v4;
  v12 = 0;
  FigCFDictionaryGetInt32IfPresent();
  if (!FigCFDictionaryGetCMTimeIfPresent())
    return playerfig_setRateForReason(a1, 0, a2);
  v11 = v13;
  v9 = v6;
  v10 = v4;
  v7 = v6;
  v8 = v4;
  return playerfig_setRateGuts(a1, 0, &v11, (uint64_t)&v9, (uint64_t)&v7, a2);
}

uint64_t playerfig_SetProperties(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  return FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)playerfig_handleSetProperty, 0, 0, a3);
}

uint64_t playerfig_ReevaluateRouteConfiguration(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v5;
  CFTypeRef v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  CFIndex FirstIndexOfValue;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  const __CFArray *v17;
  uint64_t v18;
  int v19;
  const void *v20;
  CFTypeRef v21;
  NSObject *v22;
  int IsAnAudioDeviceAvailable;
  NSObject *v24;
  const __CFArray *v25;
  const void *v26;
  uint64_t v27;
  uint64_t matched;
  NSObject *v29;
  uint64_t (*v31)(CFTypeRef);
  CFTypeRef cf;
  char v33;
  CMTime v34;
  CMTime v35[5];
  uint64_t v36;
  CFRange v37;

  v36 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFCopyCompactDescription();
  v33 = 0;
  cf = 0;
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    v6 = 0;
    matched = 4294954511;
    goto LABEL_53;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 176));
  v5 = *(const void **)(DerivedStorage + 168);
  if (!v5)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 176));
    v6 = 0;
    goto LABEL_12;
  }
  v6 = CFRetain(v5);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 176));
  if (!v6)
    goto LABEL_12;
  CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v6);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v8)
  {
LABEL_63:
    matched = 4294954514;
    goto LABEL_53;
  }
  v9 = v8(CMBaseObject, CFSTR("IsActiveConfigurationInvalid"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v9)
    goto LABEL_65;
  if (cf != (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  if (dword_1EE2A2AC8)
  {
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v31 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v31)
    goto LABEL_63;
  v9 = v31(v6);
  if (!(_DWORD)v9)
  {
    v11 = 1;
LABEL_13:
    v12 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*(_QWORD *)(v12 + 496));
    if (!*(_QWORD *)(v12 + 512)
      || (v37.length = CFArrayGetCount(*(CFArrayRef *)(v12 + 504)),
          v37.location = 0,
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v12 + 504), v37, *(const void **)(v12 + 512)),
          FirstIndexOfValue < 0))
    {
LABEL_18:
      MEMORY[0x19402EA24](*(_QWORD *)(v12 + 496));
    }
    else
    {
      v14 = 0;
      v15 = FirstIndexOfValue + 1;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 504), v14);
        if (itemfig_wantsDifferentSpatializationConfiguration((uint64_t)ValueAtIndex))
          break;
        if (v15 == ++v14)
          goto LABEL_18;
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v12 + 496));
      if (dword_1EE2A2AC8)
      {
        v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        v11 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        v11 = 1;
      }
    }
    playerfig_applyAutoSelectionCriteriaInternal((uint64_t)a1, 0, &v33);
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    v17 = *(const __CFArray **)(DerivedStorage + 504);
    if (v17)
    {
      if (CFArrayGetCount(v17) >= 1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
        if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 996))
        {
          v18 = CMBaseObjectGetDerivedStorage();
          v19 = *(unsigned __int8 *)(v18 + 1106);
          MEMORY[0x19402EEEC](*(_QWORD *)(v18 + 456));
          v20 = *(const void **)(v18 + 464);
          if (v20)
            v21 = CFRetain(v20);
          else
            v21 = 0;
          MEMORY[0x19402EF04](*(_QWORD *)(v18 + 456));
          IsAnAudioDeviceAvailable = FPSupport_IsAnAudioDeviceAvailable((uint64_t)v21);
          if (v21)
            CFRelease(v21);
          if (v19 != IsAnAudioDeviceAvailable)
          {
            *(_BYTE *)(v18 + 1106) = IsAnAudioDeviceAvailable;
            if (dword_1EE2A2AC8)
            {
              v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
              v11 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            else
            {
              v11 = 1;
            }
          }
        }
      }
    }
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
    if (!v11 || v33)
    {
LABEL_38:
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
      v25 = *(const __CFArray **)(DerivedStorage + 504);
      if (!v25 || CFArrayGetCount(v25) < 1 || *(_DWORD *)(DerivedStorage + 60) != 2)
        goto LABEL_51;
      v26 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      v27 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(v27 + 1288))
      {
        playerfig_UpdateAudioSessionPreferredDeviceFormat();
        playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
        playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels((uint64_t)a1);
        itemfig_InformStakeholdersOfBestAvailableAudioContentType((uint64_t)v26);
      }
      if (!*(_QWORD *)(v27 + 352))
        goto LABEL_51;
      if (*(_BYTE *)(v27 + 480))
      {
        if (dword_1EE2A2AC8)
        {
LABEL_50:
          v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (FigCFDictionaryGetValue() != *MEMORY[0x1E0C9AE50])
        {
          itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v26, 0);
          v35[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          v34 = v35[0];
          matched = itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v26, v35, &v34);
LABEL_52:
          MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
          goto LABEL_53;
        }
        if (dword_1EE2A2AC8)
          goto LABEL_50;
      }
LABEL_51:
      matched = 0;
      goto LABEL_52;
    }
    v35[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v34 = v35[0];
    v9 = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)v35, (uint64_t)&v34, 0);
    if (!(_DWORD)v9)
    {
      v33 = 1;
      goto LABEL_38;
    }
  }
LABEL_65:
  matched = v9;
LABEL_53:
  if (v3)
    CFRelease(v3);
  if (v6)
    CFRelease(v6);
  if (cf)
    CFRelease(cf);
  return matched;
}

uint64_t playerfig_AddExternalStartupTask(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(v4 + 1112), a2);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  MEMORY[0x19402EA24](*(_QWORD *)(v4 + 496));
  return 0;
}

uint64_t playerfig_RemoveExternalStartupTask(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const __CFArray *v5;
  CFIndex FirstIndexOfValue;
  CFIndex v7;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFRange v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v5 = *(const __CFArray **)(v4 + 1112);
  v11.length = CFArrayGetCount(v5);
  v11.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v11, a2);
  if (FirstIndexOfValue == -1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v7 = FirstIndexOfValue;
    if (dword_1EE2A2AC8)
    {
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v4 + 1112), v7);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  MEMORY[0x19402EA24](*(_QWORD *)(v4 + 496));
  return 0;
}

uint64_t playerfig_TransferOwnershipOfPlaybackItemFromPlayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (a2)
  {
    if (a3)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v6 = CMBaseObjectGetDerivedStorage();
      if (*(_QWORD *)(DerivedStorage + 8) == a3)
      {
        if (a3 == a1)
          return 0;
        v7 = v6;
        MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 496));
        v8 = *(unsigned __int8 *)(DerivedStorage + 1);
        MEMORY[0x19402EA24](*(_QWORD *)(v7 + 496));
        if (!v8)
          itemfig_reportingAgentTeardown();
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t itemfig_retrieveAssetBasicsIfReady(void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t *, char *, _QWORD);
  uint64_t v9;
  uint64_t v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  v18[0] = CFSTR("assetProperty_ContentByteStream");
  v18[1] = CFSTR("assetProperty_FormatReader");
  v18[2] = CFSTR("assetProperty_Tracks");
  v18[3] = CFSTR("MediaSelectionArray");
  if (!v3)
    return 0;
  if (!*(_BYTE *)(DerivedStorage + 1240))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(DerivedStorage + 1216);
      v7 = v18[v4];
      v17 = 0;
      v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, char *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
      if (!v8)
      {
        v10 = 4294954514;
        goto LABEL_26;
      }
      v9 = v8(v6, v7, &v17, (char *)&v17 + 4, 0);
      if ((_DWORD)v9)
        goto LABEL_29;
      if ((_DWORD)v17 == 2)
      {
        v10 = 0;
        v5 = 1;
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if (v17 < 2)
            goto LABEL_23;
          v10 = 4294954436;
          goto LABEL_26;
        }
        v10 = HIDWORD(v17);
      }
      if ((_DWORD)v10 || !v5)
        goto LABEL_26;
      ++v4;
    }
    while (v4 != 4);
    v9 = itemfig_setBasicInspectables(a1);
    if ((_DWORD)v9)
    {
LABEL_29:
      v10 = v9;
      goto LABEL_26;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1208));
    if (*(_BYTE *)(DerivedStorage + 1240))
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      *(_BYTE *)(DerivedStorage + 1202) = 1;
      if (*(double *)(DerivedStorage + 1960) == 0.0)
        *(CFAbsoluteTime *)(DerivedStorage + 1960) = CFAbsoluteTimeGetCurrent();
      *(_BYTE *)(DerivedStorage + 1240) = 1;
      v11 = *(const __CFArray **)(DerivedStorage + 1248);
      *(_QWORD *)(DerivedStorage + 1248) = 0;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
      if (v11)
      {
        Count = CFArrayGetCount(v11);
        if (Count >= 1)
        {
          v13 = Count;
          for (i = 0; i != v13; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
            itemfig_postReadyForInspectionPayloadBecauseAssetPropertyLoadedAndBasicsReady((uint64_t)a1, ValueAtIndex);
          }
        }
        CFRelease(v11);
      }
    }
  }
LABEL_23:
  v10 = 0;
LABEL_26:
  CFRelease(v3);
  return v10;
}

void itemfig_reportingAgentReportEnqueueTime()
{
  uint64_t DerivedStorage;
  double Current;
  double v2;
  uint64_t v3;
  void (*v4)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Current = CFAbsoluteTimeGetCurrent();
  v2 = *(double *)(DerivedStorage + 1920);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1896));
  v3 = *(_QWORD *)(DerivedStorage + 1904);
  if (v3)
  {
    v4 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
    if (v4)
      v4(v3, CFSTR("playerStats"), CFSTR("TimeItemToEnqueue"), (uint64_t)((Current - v2) * 1000.0), 0);
  }
  JUMPOUT(0x19402EF04);
}

uint64_t itemfig_postReadyForInspectionPayloadBecauseAssetPropertyLoadedAndBasicsReady(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  __CFString **v6;
  const __CFAllocator *v7;
  CFDictionaryRef v8;
  int v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, CFTypeRef *, int *, int *);
  uint64_t FigBaseObject;
  unsigned int (*v17)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v20;
  CFTypeRef v22;
  int valuePtr;
  int v24;
  int v25;
  CFTypeRef v26;
  uint64_t v27;
  CFNumberRef number;
  CFTypeRef cf;
  void *values[19];

  values[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (!v5)
    return 0;
  if (*(_BYTE *)(DerivedStorage + 1240))
  {
    if (*(double *)(DerivedStorage + 1960) == 0.0)
      *(CFAbsoluteTime *)(DerivedStorage + 1960) = CFAbsoluteTimeGetCurrent();
    v22 = v5;
    if (!CFEqual(a2, CFSTR("Lyrics"))
      && !CFEqual(a2, CFSTR("Duration"))
      && !CFEqual(a2, CFSTR("assetProperty_InitialSamples"))
      && !CFEqual(a2, CFSTR("iTunesGaplessInfo"))
      && !CFEqual(a2, CFSTR("assetProperty_CPEProtector")))
    {
      v8 = 0;
LABEL_36:
      if (CFEqual(a2, CFSTR("assetProperty_InitialSamples")))
      {
        v27 = 0;
        number = 0;
        v10 = *(_QWORD *)(DerivedStorage + 968);
        v11 = *(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v11)
        {
          v11(v10, &v27);
          if (v27 >= 1)
          {
            v12 = 0;
            v13 = *MEMORY[0x1E0C9AE00];
            do
            {
              v26 = 0;
              v24 = 0;
              v25 = 1061109567;
              v14 = *(_QWORD *)(DerivedStorage + 968);
              v15 = *(void (**)(uint64_t, uint64_t, CFTypeRef *, int *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 48);
              if (v15)
                v15(v14, v12, &v26, &v25, &v24);
              FigBaseObject = FigTrackReaderGetFigBaseObject(v26);
              v17 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v17)
              {
                if (!v17(FigBaseObject, CFSTR("NominalFrameRate"), v13, &number) && number != 0)
                {
                  valuePtr = 0;
                  CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
                  if (dword_1EE2A2AC8)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  CFRelease(number);
                }
              }
              if (v26)
                CFRelease(v26);
              ++v12;
            }
            while (v12 < v27);
          }
        }
      }
      if (v8)
        CFRelease(v8);
      v20 = 0;
      v5 = v22;
      goto LABEL_56;
    }
    if (CFEqual(a2, CFSTR("Lyrics")))
    {
      v6 = kFigPlaybackItemProperty_Lyrics;
    }
    else if (CFEqual(a2, CFSTR("Duration")))
    {
      v6 = kFigPlaybackItemProperty_AccurateDuration;
    }
    else if (CFEqual(a2, CFSTR("assetProperty_InitialSamples")))
    {
      v6 = kFigPlaybackItemProperty_InitialSamples;
    }
    else if (CFEqual(a2, CFSTR("iTunesGaplessInfo")))
    {
      v6 = kFigPlaybackItemProperty_iTunesGaplessInfo;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("assetProperty_CPEProtector")))
      {
        if (!CFEqual(a2, CFSTR("assetProperty_ContentByteStream"))
          && !CFEqual(a2, CFSTR("assetProperty_FormatReader"))
          && !CFEqual(a2, CFSTR("assetProperty_Tracks")))
        {
          CFEqual(a2, CFSTR("MediaSelectionArray"));
        }
        goto LABEL_30;
      }
      v6 = kFigPlaybackItemProperty_CPEProtector;
    }
    values[0] = *v6;
    if (values[0])
    {
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      cf = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
      v8 = CFDictionaryCreate(v7, (const void **)kFigPlaybackItemParameter_Properties, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (cf)
        CFRelease(cf);
      if (v8)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1208));
        v9 = *(unsigned __int8 *)(DerivedStorage + 1201);
        *(_WORD *)(DerivedStorage + 1201) = 256;
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
LABEL_32:
        if (CFEqual(a2, CFSTR("Lyrics")))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
        }
        if (v9)
          itemfig_postSelectedMediaOptionsDidChangeNotification(a1);
        goto LABEL_36;
      }
LABEL_31:
      v9 = 0;
      goto LABEL_32;
    }
LABEL_30:
    v8 = 0;
    goto LABEL_31;
  }
  v20 = FigSignalErrorAt();
LABEL_56:
  CFRelease(v5);
  return v20;
}

uint64_t itemfig_reportAttemptToWriteToReadOnlyTimebase()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void itemfig_postLegibleOutputNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;

  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      v3 = (const void *)v2;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v3);
    }
  }
}

void itemfig_postLegibleFlushNotification(void *a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  CFDictionaryRef v4;
  void *values;

  values = a1;
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      v3 = (const void *)v2;
      v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackItemParameter_LegibleOutputKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v4)
        CFRelease(v4);
      CFRelease(v3);
    }
  }
}

void itemfig_postRenderedLegibleOutputNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;

  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      v3 = (const void *)v2;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v3);
    }
  }
}

void itemfig_postRenderedLegibleFlushNotification(void *a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  CFDictionaryRef v4;
  void *values;

  values = a1;
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      v3 = (const void *)v2;
      v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackItemParameter_RenderedLegibleOutputKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v4)
        CFRelease(v4);
      CFRelease(v3);
    }
  }
}

void itemfig_postMetadataOutputChanged(const void *a1, uint64_t a2, const void *a3)
{
  __CFDictionary *MetadataOutputDataCallbackPayload;

  MetadataOutputDataCallbackPayload = FPSupport_CreateMetadataOutputDataCallbackPayload(a3, a1);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (MetadataOutputDataCallbackPayload)
    CFRelease(MetadataOutputDataCallbackPayload);
}

void itemfig_postMetadataOutputFlushed(void *a1)
{
  CFDictionaryRef MedadataOutputFlushCallbackPayload;

  MedadataOutputFlushCallbackPayload = FPSupport_CreateMedadataOutputFlushCallbackPayload(a1);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (MedadataOutputFlushCallbackPayload)
    CFRelease(MedadataOutputFlushCallbackPayload);
}

void itemfig_timebaseEffectiveRateChanged(uint64_t a1, const void *a2)
{
  const void *v3;

  CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    CFRetain(a2);
    FigDeferNotificationToDispatchQueue();
    CFRelease(v3);
  }
}

uint64_t itemfig_CachePrimingCompleted()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void itemfig_formatReaderTracksChanged()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    v2 = (const void *)v1;
    if (*(_QWORD *)(DerivedStorage + 352))
    {
      if (dword_1EE2A2AC8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v4 = *MEMORY[0x1E0CA2E18];
      v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v6 = v4;
      v7 = v5;
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v2, (uint64_t)&v4, (uint64_t)&v6, 0);
    }
    CFRelease(v2);
  }
}

void itemfig_reportingAgentTeardown()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t);
  const void *v3;
  const void *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[237]);
  v1 = DerivedStorage[238];
  if (v1)
  {
    v2 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
    if (v2)
      v2(v1);
  }
  v3 = (const void *)DerivedStorage[239];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[239] = 0;
  }
  v4 = (const void *)DerivedStorage[238];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[238] = 0;
  }
  JUMPOUT(0x19402EF04);
}

void itemfig_copyChosenAlternateTrackIDsDictionary(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  CFAllocatorRef *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (*(_DWORD *)(DerivedStorage + 996))
  {
    valuePtr = *(_DWORD *)(DerivedStorage + 996);
    v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("Audio"), v8);
    CFRelease(v8);
  }
  if (*(_DWORD *)(DerivedStorage + 1016))
  {
    valuePtr = *(_DWORD *)(DerivedStorage + 1016);
    v9 = CFNumberCreate(*v7, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("Subtitle"), v9);
    CFRelease(v9);
  }
  *a3 = Mutable;
}

uint64_t itemfig_assureFormatReader(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1208));
  v3 = itemfig_setFormatReader(a1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1208));
  return v3;
}

uint64_t itemfig_createTrackIDArray(void *a1, CFArrayRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, size_t *);
  const void **v8;
  const void **v9;
  size_t v10;
  const __CFAllocator *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, int64_t, _QWORD, _QWORD, int *);
  uint64_t v15;
  CFNumberRef v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  const void *v20;
  int valuePtr;
  size_t count;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = itemfig_assureBasicsReadyForInspection(a1);
  if ((_DWORD)v5)
    return v5;
  v6 = *(_QWORD *)(DerivedStorage + 968);
  v7 = *(uint64_t (**)(uint64_t, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v7)
    return 4294954514;
  count = 0;
  v5 = v7(v6, &count);
  if ((_DWORD)v5)
    return v5;
  v8 = (const void **)malloc_type_calloc(count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  v10 = count;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((uint64_t)count < 1)
  {
LABEL_11:
    v17 = 0;
    *a2 = CFArrayCreate(v11, v9, v10, MEMORY[0x1E0C9B378]);
  }
  else
  {
    v12 = 0;
    while (1)
    {
      valuePtr = 0;
      v13 = *(_QWORD *)(DerivedStorage + 968);
      v14 = *(uint64_t (**)(uint64_t, int64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 48);
      if (!v14)
      {
        v17 = 4294954514;
        goto LABEL_14;
      }
      v15 = v14(v13, v12, 0, 0, &valuePtr);
      if ((_DWORD)v15)
        break;
      v16 = CFNumberCreate(v11, kCFNumberSInt32Type, &valuePtr);
      v9[v12] = v16;
      if (!v16)
      {
        v15 = FigSignalErrorAt();
        break;
      }
      ++v12;
      v10 = count;
      if (v12 >= (uint64_t)count)
        goto LABEL_11;
    }
    v17 = v15;
  }
LABEL_14:
  v18 = count;
  if ((uint64_t)count >= 1)
  {
    v19 = 0;
    do
    {
      v20 = v9[v19];
      if (v20)
      {
        CFRelease(v20);
        v18 = count;
      }
      ++v19;
    }
    while (v19 < v18);
  }
  free(v9);
  return v17;
}

uint64_t itemfig_createChosenTrackIDArray(void *a1, CFArrayRef *a2)
{
  _DWORD *DerivedStorage;
  const void *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, size_t *);
  const void **v11;
  const __CFAllocator **v12;
  uint64_t v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  CFAllocatorRef *v18;
  const __CFAllocator *v19;
  const void *ValueAtIndex;
  CFNumberRef v21;
  uint64_t v22;
  CFNumberRef v23;
  uint64_t v24;
  CFIndex v25;
  const __CFAllocator *v26;
  CFIndex v27;
  CFIndex j;
  const void *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  uint64_t i;
  const void *v36;
  CFArrayRef *v38;
  const void *v39;
  size_t count;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v6 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!v5)
    return 0;
  v7 = v6;
  count = 0;
  if (*v6)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_57;
  }
  v8 = itemfig_assureBasicsReadyForInspection(a1);
  if ((_DWORD)v8)
  {
LABEL_57:
    v22 = v8;
    v11 = 0;
    goto LABEL_50;
  }
  v9 = *((_QWORD *)DerivedStorage + 121);
  v10 = *(uint64_t (**)(uint64_t, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v10)
  {
    v8 = v10(v9, &count);
    if (!(_DWORD)v8)
    {
      v11 = (const void **)malloc_type_calloc(count, 8uLL, 0x6004044C4A2DFuLL);
      if (v11)
      {
        v12 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
        v38 = a2;
        v39 = v5;
        if (v7[121])
        {
          v13 = itemfig_ensureTrackStorageArray();
          if (!(_DWORD)v13)
          {
            v14 = CFArrayGetCount(*((CFArrayRef *)DerivedStorage + 81));
            if (v14 >= 1)
            {
              v15 = v14;
              v16 = 0;
              v17 = 0;
              v18 = v12;
              v19 = *v12;
              while (1)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)DerivedStorage + 81), v16);
                if (*((_DWORD *)ValueAtIndex + 1) == 1986618469 && *((_BYTE *)ValueAtIndex + 8))
                {
                  v21 = CFNumberCreate(v19, kCFNumberSInt32Type, ValueAtIndex);
                  v11[v17] = v21;
                  if (!v21)
                  {
                    v22 = FigSignalErrorAt();
                    v5 = v39;
                    goto LABEL_45;
                  }
                  ++v17;
                }
                if (v15 == ++v16)
                  goto LABEL_22;
              }
            }
            goto LABEL_21;
          }
          goto LABEL_59;
        }
        if (!DerivedStorage[250])
        {
LABEL_21:
          v18 = v12;
          v17 = 0;
LABEL_22:
          if (v7[120])
          {
            v24 = itemfig_ensureTrackStorageArray();
            v5 = v39;
            if ((_DWORD)v24)
            {
LABEL_53:
              v22 = v24;
LABEL_45:
              if (v17 >= 1)
              {
                for (i = 0; i != v17; ++i)
                {
                  v36 = v11[i];
                  if (v36)
                    CFRelease(v36);
                }
              }
              goto LABEL_50;
            }
            v25 = CFArrayGetCount(*((CFArrayRef *)DerivedStorage + 81));
            v26 = *v18;
            if (v25 >= 1)
            {
              v27 = v25;
              for (j = 0; j != v27; ++j)
              {
                v29 = CFArrayGetValueAtIndex(*((CFArrayRef *)DerivedStorage + 81), j);
                if (*((_DWORD *)v29 + 1) == 1936684398 && *((_BYTE *)v29 + 8))
                {
                  v30 = CFNumberCreate(v26, kCFNumberSInt32Type, v29);
                  v11[v17] = v30;
                  if (!v30)
                    goto LABEL_52;
                  ++v17;
                }
              }
            }
          }
          else
          {
            v26 = *v18;
            v5 = v39;
            if (DerivedStorage[249])
            {
              v31 = CFNumberCreate(*v18, kCFNumberSInt32Type, DerivedStorage + 249);
              v11[v17] = v31;
              if (!v31)
                goto LABEL_52;
              ++v17;
            }
          }
          if (DerivedStorage[254])
          {
            v32 = CFNumberCreate(v26, kCFNumberSInt32Type, DerivedStorage + 254);
            v11[v17] = v32;
            if (!v32)
              goto LABEL_52;
            ++v17;
          }
          if (!DerivedStorage[252])
          {
LABEL_41:
            if (!DerivedStorage[260])
            {
LABEL_44:
              v22 = 0;
              *v38 = CFArrayCreate(v26, v11, v17, MEMORY[0x1E0C9B378]);
              goto LABEL_45;
            }
            v34 = CFNumberCreate(v26, kCFNumberSInt32Type, DerivedStorage + 260);
            v11[v17] = v34;
            if (v34)
            {
              ++v17;
              goto LABEL_44;
            }
            goto LABEL_52;
          }
          v33 = CFNumberCreate(v26, kCFNumberSInt32Type, DerivedStorage + 252);
          v11[v17] = v33;
          if (v33)
          {
            ++v17;
            goto LABEL_41;
          }
LABEL_52:
          v24 = FigSignalErrorAt();
          goto LABEL_53;
        }
        v18 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
        v23 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, DerivedStorage + 250);
        *v11 = v23;
        if (v23)
        {
          v17 = 1;
          goto LABEL_22;
        }
      }
      v13 = FigSignalErrorAt();
LABEL_59:
      v22 = v13;
      goto LABEL_50;
    }
    goto LABEL_57;
  }
  v11 = 0;
  v22 = 4294954514;
LABEL_50:
  free(v11);
  CFRelease(v5);
  return v22;
}

uint64_t FigCPEProtectorIsApplicationAuthorized(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v4 && (v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v4[4]) != 0)
    return v5(a1, 1, a2);
  else
    return 4294954514;
}

uint64_t FigCPEProtectorIsContentAuthorized(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v4 && (v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v4[6]) != 0)
    return v5(a1, 1, a2);
  else
    return 4294954514;
}

uint64_t itemfig_copyMetadata(void *a1, const __CFAllocator *a2, __CFArray **a3)
{
  _BYTE *DerivedStorage;
  uint64_t result;
  _BYTE *v8;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !a3)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  result = itemfig_assureBasicsReadyForInspection(a1);
  if (!(_DWORD)result)
    return FigMetadataCopyMovieMetadata(*((_QWORD *)v8 + 121), a2, a3);
  return result;
}

uint64_t itemfig_createPlayabilityMetricsDictionary(uint64_t a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t PlayabilityMetrics;
  const __CFAllocator *v7;
  CFIndex v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t valuePtr;
  void *values[6];
  uint64_t v21;
  void *keys[8];

  keys[7] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  valuePtr = 0;
  v16 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  keys[0] = CFSTR("BytesStillNeededToEnd");
  keys[1] = CFSTR("DurationFromNowToEnd");
  keys[2] = CFSTR("CurrentMeasuredBytesPerSecond");
  keys[3] = CFSTR("RawMeasuredBytesPerSecond");
  keys[4] = CFSTR("BandwidthSlopFactor");
  keys[5] = CFSTR("EstimatedTimeToLikelyToKeepUp");
  v13 = 0;
  keys[6] = CFSTR("RemoteIPAddress");
  v21 = 0;
  *a3 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 616));
  PlayabilityMetrics = FigPlayabilityMonitorGetPlayabilityMetrics(*(_QWORD **)(DerivedStorage + 600), &valuePtr, &v18, &v17, &v16, &v15, &v14);
  if ((_DWORD)PlayabilityMetrics
    || (PlayabilityMetrics = FigPlayabilityMonitorCopyRemoteIPAddress(*(_QWORD *)(DerivedStorage + 600), &v13),
        (_DWORD)PlayabilityMetrics))
  {
    v10 = PlayabilityMetrics;
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 616));
  }
  else
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v8 = 6;
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, &valuePtr);
    values[1] = CFNumberCreate(v7, kCFNumberFloat64Type, &v18);
    values[2] = CFNumberCreate(v7, kCFNumberFloat64Type, &v17);
    values[3] = CFNumberCreate(v7, kCFNumberFloat64Type, &v16);
    values[4] = CFNumberCreate(v7, kCFNumberFloat64Type, &v15);
    values[5] = CFNumberCreate(v7, kCFNumberFloat64Type, &v14);
    if (v13)
    {
      v21 = v13;
      v8 = 7;
    }
    v9 = 0;
    while (values[v9])
    {
      if (v8 == ++v9)
      {
        v10 = 0;
        *a3 = CFDictionaryCreate(a2, (const void **)keys, (const void **)values, v8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        goto LABEL_9;
      }
    }
    v10 = 4294954434;
LABEL_9:
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 616));
    v11 = values;
    do
    {
      if (*v11)
        CFRelease(*v11);
      ++v11;
      --v8;
    }
    while (v8);
  }
  return v10;
}

uint64_t itemfig_handleSetProperty(void *a1, uint64_t a2, const void *a3, const __CFBoolean *a4, _BYTE *a5)
{
  _BYTE *DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  uint64_t v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  CFTypeID v16;
  float v17;
  int v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  float v22;
  int v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  CFTypeID v26;
  const __CFNumber *v27;
  const __CFNumber *v28;
  CFTypeID v29;
  int v30;
  CFTypeID TypeID;
  CFTypeID v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  CFTypeID v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  CFTypeID v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  CFTypeID v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  CFTypeID v44;
  const __CFBoolean *v45;
  const __CFBoolean *v46;
  CFTypeID v47;
  CFTypeID v48;
  uint64_t result;
  const void *v50;
  int v51;
  uint64_t v52;
  CFMutableDictionaryRef v53;
  NSObject *v54;
  CFTypeID v55;
  _OWORD *v56;
  CMTimeEpoch epoch;
  _OWORD *v58;
  CMTimeEpoch v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _OWORD *v63;
  CMTimeEpoch v64;
  uint64_t v65;
  NSObject *v66;
  const void *v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  void *v72;
  NSObject *v73;
  uint64_t v74;
  int v75;
  int v76;
  NSObject *v77;
  uint64_t v78;
  __int128 v79;
  NSObject *v80;
  int v81;
  int v82;
  NSObject *v83;
  int v84;
  int v85;
  NSObject *v86;
  uint64_t v87;
  CFTypeID v88;
  uint64_t v89;
  CFTypeID v90;
  const void *v91;
  uint64_t v92;
  CFTypeID v93;
  uint64_t v94;
  __CFString **v95;
  const __CFString *v96;
  uint64_t v97;
  CFTypeID v98;
  uint64_t v99;
  CMTimeEpoch v100;
  __int128 v101;
  const void *v102;
  uint64_t v103;
  CFTypeID v104;
  const void *v105;
  uint64_t v106;
  NSObject *v107;
  CFTypeID v108;
  int Value;
  uint64_t v110;
  NSObject *v111;
  unsigned int v112;
  unsigned int v113;
  CFTypeID v114;
  NSObject *v115;
  unsigned int v116;
  unsigned int v117;
  CFTypeID v118;
  uint64_t v119;
  NSObject *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  const char *v124;
  CFTypeID v125;
  NSObject *v126;
  unsigned int v127;
  unsigned int v128;
  CFTypeID v129;
  const void *v130;
  CFTypeID v131;
  const void *v132;
  CFTypeID v133;
  const void *v134;
  NSObject *v135;
  CFTypeID v136;
  const void *v137;
  NSObject *v138;
  NSObject *v139;
  const char *v140;
  uint64_t OpenGL;
  const void *v142;
  NSObject *v143;
  CFTypeID v144;
  CFTypeRef v145;
  int v146;
  const void *v147;
  CFTypeID v148;
  CFArrayRef Copy;
  CFArrayRef v150;
  CFArrayRef *v151;
  const void *v152;
  char v153;
  const __CFAllocator *v154;
  CFMutableArrayRef Mutable;
  __CFArray *v156;
  const __CFArray *v157;
  const __CFArray *v158;
  uint64_t v159;
  uint64_t v160;
  const void *v161;
  CFTypeID v162;
  int v163;
  NSObject *v164;
  const void *v165;
  CFTypeID v166;
  NSObject *v167;
  NSObject *v168;
  unsigned int v169;
  unsigned int v170;
  const void *v171;
  CFNumberRef v172;
  const void *v173;
  const void *v174;
  const void *v175;
  NSObject *v176;
  unsigned int v177;
  unsigned int v178;
  NSObject *v179;
  unsigned int v180;
  unsigned int v181;
  CFTypeID v182;
  char v183;
  char v184;
  const __CFArray *v185;
  CFTypeID v186;
  const __CFBoolean *v187;
  CFTypeID v188;
  const void *v189;
  NSObject *v190;
  CFTypeID v191;
  CFTypeID v192;
  Boolean v193;
  CFTypeID v194;
  Boolean v195;
  CFTypeID v196;
  CFTypeID v197;
  Boolean v198;
  CFTypeID v199;
  CFTypeID v200;
  Boolean v201;
  CFTypeID v202;
  CFNumberRef v203;
  CFTypeID v204;
  const void *v205;
  CFTypeID v206;
  CFTypeID v207;
  CFTypeID v208;
  const void *v209;
  CFTypeID v210;
  const void *v211;
  CFTypeID v212;
  CFTypeID v213;
  CFTypeID v214;
  CFTypeID v215;
  CFTypeID v216;
  CFTypeID v217;
  Boolean v218;
  CFTypeID v219;
  unsigned int (*v220)(const __CFBoolean *);
  const __CFBoolean *v221;
  NSObject *v222;
  CFTypeID v223;
  const __CFString *v224;
  const void *v225;
  CFTypeID v226;
  const void *v227;
  NSObject *v228;
  const void *v229;
  CFTypeID v230;
  const void *v231;
  CFTypeID v232;
  const void *v233;
  CFTypeID v234;
  CFTypeID v235;
  const void *v236;
  CFTypeID v237;
  CFTypeID v238;
  CFTypeID v239;
  NSObject *v240;
  CFTypeID v241;
  CFTypeID v242;
  NSObject *v243;
  CFTypeID v244;
  NSObject *v245;
  CFTypeID v246;
  CFTypeID v247;
  CFTypeID v248;
  CFTypeID v249;
  const void *v250;
  CFTypeID v251;
  const void *v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  CFTypeID v256;
  uint64_t v257;
  CFTypeID v258;
  const void *v259;
  const __CFAllocator *AllocatorForMedia;
  CFTypeID v261;
  const void *v262;
  CFTypeID v263;
  CFTypeID v264;
  const void *v265;
  NSObject *v266;
  NSObject *v267;
  NSObject *v268;
  NSObject *v269;
  const void *v270;
  __int128 v271;
  CMTime start;
  CMTime time2;
  const char *v274;
  __int16 v275;
  void *v276;
  __int16 v277;
  const char *v278;
  CMTime type;
  CMTimeRange valuePtr[2];
  uint64_t v281;
  CFRange v282;
  CFRange v283;

  v281 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  *a5 = 1;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v10 = (uint64_t)DerivedStorage;
  v11 = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a3, CFSTR("PlaybackItemProperties")))
  {
    if (CFEqual(a3, CFSTR("EnableDownloadWhenInPlayQueue")))
    {
      if (a4)
      {
        TypeID = CFBooleanGetTypeID();
        if (TypeID == CFGetTypeID(a4))
        {
          *(_BYTE *)(v10 + 1328) = CFBooleanGetValue(a4);
          playerfig_configureDownloadInPlayQueue();
        }
      }
      return 0;
    }
    if (CFEqual(a3, CFSTR("EnableDownloadWhenNotInPlayQueue")))
    {
      if (!a4)
        return 0;
      v32 = CFBooleanGetTypeID();
      if (v32 != CFGetTypeID(a4))
        return 0;
      *(_BYTE *)(v10 + 1329) = CFBooleanGetValue(a4);
      MEMORY[0x19402EA0C](*(_QWORD *)(v11 + 496));
      if (!*(_BYTE *)(v10 + 1))
        itemfig_configureDownloadForItem((uint64_t)a1, *(unsigned __int8 *)(v10 + 1329));
      goto LABEL_33;
    }
    if (CFEqual(a3, CFSTR("CachePrimingDownloadToken")))
    {
      if (a4)
      {
        v48 = CFNumberGetTypeID();
        if (v48 == CFGetTypeID(a4))
          return itemfig_startCachePrimingWithDownloadToken((uint64_t)a1, a4);
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("LikelyToKeepUpTrigger")))
    {
      if (!*(_BYTE *)(v10 + 1))
      {
        if (a4)
        {
          v55 = CFStringGetTypeID();
          if (v55 == CFGetTypeID(a4))
          {
            if (CFEqual(a4, CFSTR("LikelyToKeepUpTriggerDefault")))
            {
              result = 0;
              *(_DWORD *)(v10 + 1352) = 0;
              return result;
            }
            if (CFEqual(a4, CFSTR("LikelyToKeepUpTriggerLive")))
            {
              result = 0;
              *(_DWORD *)(v10 + 1352) = 1;
              return result;
            }
          }
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("ChosenAlternateTrackIDDictionary")))
      return itemfig_setChosenAlternateTrackIDsFromDictionary((uint64_t)a1, a4);
    if (CFEqual(a3, CFSTR("EndTime")))
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(v11 + 496));
      v56 = (_OWORD *)(v10 + 140);
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr[0].start, a4);
        *v56 = *(_OWORD *)&valuePtr[0].start.value;
        epoch = valuePtr[0].start.epoch;
      }
      else
      {
        v60 = MEMORY[0x1E0CA2E18];
        *v56 = *MEMORY[0x1E0CA2E18];
        epoch = *(_QWORD *)(v60 + 16);
      }
      *(_QWORD *)(v10 + 156) = epoch;
      itemfig_checkForShortAudioTrack();
      v61 = *(_QWORD *)(v10 + 352);
      if (!v61
        || *(void **)(v11 + 512) == a1
        && (*(_OWORD *)&valuePtr[0].start.value = *v56,
            valuePtr[0].start.epoch = *(_QWORD *)(v10 + 156),
            FigPlaybackBossCanChangeEndTimeTo(v61, (uint64_t)valuePtr)))
      {
        itemfig_setEndTimeOnBoss();
        MEMORY[0x19402EA24](*(_QWORD *)(v11 + 496));
        goto LABEL_110;
      }
      MEMORY[0x19402EA24](*(_QWORD *)(v11 + 496));
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
LABEL_108:
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v67, (uint64_t)valuePtr, (uint64_t)&time2, 0);
      return 0;
    }
    if (CFEqual(a3, CFSTR("ReverseEndTime")))
    {
      v58 = (_OWORD *)(v10 + 164);
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr[0].start, a4);
        *v58 = *(_OWORD *)&valuePtr[0].start.value;
        v59 = valuePtr[0].start.epoch;
      }
      else
      {
        v65 = MEMORY[0x1E0CA2E18];
        *v58 = *MEMORY[0x1E0CA2E18];
        v59 = *(_QWORD *)(v65 + 16);
      }
      *(_QWORD *)(v10 + 180) = v59;
      if (*(_QWORD *)(v10 + 352))
      {
        if (dword_1EE2A2AC8 >= 2)
        {
          LODWORD(start.value) = 0;
          LOBYTE(type.value) = 0;
          v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v67 = *(const void **)(v10 + 8);
        *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
        valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        time2 = valuePtr[0].start;
        goto LABEL_108;
      }
LABEL_110:
      playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems(*(_QWORD *)(v10 + 8), a1);
    }
    if (CFEqual(a3, CFSTR("AdvanceTimeForOverlappedPlayback")))
    {
      v63 = (_OWORD *)(v10 + 188);
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr[0].start, a4);
        *v63 = *(_OWORD *)&valuePtr[0].start.value;
        v64 = valuePtr[0].start.epoch;
      }
      else
      {
        v71 = MEMORY[0x1E0CA2E18];
        *v63 = *MEMORY[0x1E0CA2E18];
        v64 = *(_QWORD *)(v71 + 16);
      }
      *(_QWORD *)(v10 + 204) = v64;
      if (*(_QWORD *)(v10 + 352))
      {
        MEMORY[0x19402EA0C](*(_QWORD *)(v11 + 496));
        v72 = *(void **)(v11 + 512);
        MEMORY[0x19402EA24](*(_QWORD *)(v11 + 496));
        if (v72 != a1)
        {
          if (dword_1EE2A2AC8 >= 2)
          {
            LODWORD(start.value) = 0;
            LOBYTE(type.value) = 0;
            v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v67 = *(const void **)(v10 + 8);
          *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
          valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          time2 = valuePtr[0].start;
          goto LABEL_108;
        }
        v74 = *(_QWORD *)(v10 + 352);
        *(_OWORD *)&valuePtr[0].start.value = *v63;
        valuePtr[0].start.epoch = *(_QWORD *)(v10 + 204);
        FigPlaybackBossSetAdvanceTimeForOverlappedPlayback(v74, (__int128 *)&valuePtr[0].start.value);
      }
      goto LABEL_110;
    }
    if (CFEqual(a3, CFSTR("LoopTimeRange")))
    {
      v68 = (_OWORD *)(v10 + 236);
      if (a4)
      {
        CMTimeRangeMakeFromDictionary(valuePtr, a4);
        v69 = *(_OWORD *)&valuePtr[0].start.epoch;
        *v68 = *(_OWORD *)&valuePtr[0].start.value;
        *(_OWORD *)(v10 + 252) = v69;
        v70 = *(_OWORD *)&valuePtr[0].duration.timescale;
      }
      else
      {
        v78 = MEMORY[0x1E0CA2E40];
        v79 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
        *v68 = *MEMORY[0x1E0CA2E40];
        *(_OWORD *)(v10 + 252) = v79;
        v70 = *(_OWORD *)(v78 + 32);
      }
      *(_OWORD *)(v10 + 268) = v70;
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("ReversesMoreVideoFramesInMemory")))
    {
      result = 0;
      v75 = *(unsigned __int8 *)(v10 + 284);
      v76 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
      *(_BYTE *)(v10 + 284) = v76;
      if (!*(_QWORD *)(v10 + 352) || v75 == v76)
        return result;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("AggressivelyCachesVideoFrames")))
    {
      result = 0;
      v81 = *(unsigned __int8 *)(v10 + 285);
      v82 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
      *(_BYTE *)(v10 + 285) = v82;
      if (!*(_QWORD *)(v10 + 352) || v81 == v82)
        return result;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v83 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("DecodeAllFramesDuringOrdinaryPlayback")))
    {
      result = 0;
      v84 = *(unsigned __int8 *)(v10 + 286);
      v85 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
      *(_BYTE *)(v10 + 286) = v85;
      if (!*(_QWORD *)(v10 + 352) || v84 == v85)
        return result;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("EQPreset")))
    {
      v87 = *(_QWORD *)(v10 + 8);
      LODWORD(valuePtr[0].start.value) = 0;
      if (a4)
      {
        v88 = CFGetTypeID(a4);
        if (v88 == CFNumberGetTypeID())
        {
          if (CFNumberGetValue(a4, kCFNumberIntType, valuePtr))
          {
            *(_DWORD *)(v10 + 936) = valuePtr[0].start.value;
            playerfig_applyEQPreset(v87);
          }
        }
      }
      return 0;
    }
    if (CFEqual(a3, CFSTR("AudioDeviceChannelMap")))
    {
      v89 = *(_QWORD *)(v10 + 8);
      if (a4)
      {
        v90 = CFDataGetTypeID();
        if (v90 != CFGetTypeID(a4))
          return 0;
      }
      v91 = *(const void **)(v10 + 944);
      if (v91)
        CFRelease(v91);
      *(_QWORD *)(v10 + 944) = a4;
      if (a4)
      {
        CFRetain(a4);
        v92 = *(_QWORD *)(v10 + 944);
      }
      else
      {
        v92 = 0;
      }
      v96 = CFSTR("AudioDeviceChannelMap");
      v97 = v89;
      return fp_setPropertyOnAllAudioRenderPipelines(v97, (uint64_t)v96, v92);
    }
    if (CFEqual(a3, CFSTR("ReadAheadAllowBackfill")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v93 = CFGetTypeID(a4);
      if (v93 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      *(_BYTE *)(v10 + 1382) = 1;
      *(_BYTE *)(v10 + 1381) = CFBooleanGetValue(a4);
      result = *(_QWORD *)(v10 + 128);
      if (!result)
        return result;
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      result = CMBaseObjectIsMemberOfClass();
      if (!(_DWORD)result)
        return result;
      v94 = *(_QWORD *)(v10 + 128);
      v95 = kFigCachedReadAheadByteStreamProperty_ReadAheadAllowBackfill;
      return CMByteStreamSetProperty(v94, (uint64_t)*v95, (uint64_t)a4);
    }
    if (CFEqual(a3, CFSTR("SaveDownloadedDataToDiskWhenDone")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v98 = CFGetTypeID(a4);
      if (v98 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      result = *(_QWORD *)(v10 + 128);
      if (!result)
        return result;
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      result = CMBaseObjectIsMemberOfClass();
      if (!(_DWORD)result)
        return result;
      v94 = *(_QWORD *)(v10 + 128);
      v95 = kFigCachedReadAheadByteStreamProperty_SaveMemoryCacheToDiskWhenDone;
      return CMByteStreamSetProperty(v94, (uint64_t)*v95, (uint64_t)a4);
    }
    if (CFEqual(a3, CFSTR("VideoCompositionInstructionArray")))
    {
      memset(&time2, 0, sizeof(time2));
      result = itemfig_GetDuration((uint64_t)a1, (uint64_t)&time2);
      if ((_DWORD)result)
        return result;
      start = time2;
      v99 = MEMORY[0x1E0CA2E68];
      if ((*(_DWORD *)(v10 + 248) & 0x1D) == 1)
      {
        *(_OWORD *)&valuePtr[0].start.value = *(_OWORD *)(v10 + 236);
        valuePtr[0].start.epoch = *(_QWORD *)(v10 + 252);
        v271 = *MEMORY[0x1E0CA2E68];
        *(_OWORD *)&type.value = *MEMORY[0x1E0CA2E68];
        v100 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        type.epoch = v100;
        if ((CMTimeCompare(&valuePtr[0].start, &type) & 0x80000000) == 0 && (*(_DWORD *)(v10 + 272) & 0x1D) == 1)
        {
          *(_OWORD *)&valuePtr[0].start.value = *(_OWORD *)(v10 + 260);
          valuePtr[0].start.epoch = *(_QWORD *)(v10 + 276);
          *(_OWORD *)&type.value = v271;
          type.epoch = v100;
          if (CMTimeCompare(&valuePtr[0].start, &type) >= 1)
          {
            type = start;
            v101 = *(_OWORD *)(v10 + 252);
            *(_OWORD *)&valuePtr[0].start.value = *(_OWORD *)(v10 + 236);
            *(_OWORD *)&valuePtr[0].start.epoch = v101;
            *(_OWORD *)&valuePtr[0].duration.timescale = *(_OWORD *)(v10 + 268);
            CMTimeFoldIntoRange(&start, &type, valuePtr);
          }
        }
      }
      if (!a4
        || (*(_OWORD *)&valuePtr[0].start.value = *(_OWORD *)v99,
            valuePtr[0].start.epoch = *(_QWORD *)(v99 + 16),
            type = start,
            FigVideoCompositionInstructionArrayIsValid((uint64_t)a4, (uint64_t)valuePtr, (uint64_t)&type)))
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 672));
        v102 = *(const void **)(v10 + 680);
        *(_QWORD *)(v10 + 680) = a4;
        if (a4)
          CFRetain(a4);
        if (v102)
          CFRelease(v102);
        MEMORY[0x19402EF04](*(_QWORD *)(v10 + 672));
        v103 = *(_QWORD *)(v10 + 808);
        if (!v103)
          return 0;
        result = *(_QWORD *)(v10 + 352);
        if (result)
        {
          if (*(float *)(v11 + 48) == 0.0 || !*(_BYTE *)(v10 + 688))
          {
            FigPlaybackBossResetCompositionInstructions(result, v103, 1, 1);
            if (dword_1EE2A2AC8 >= 2)
            {
              v107 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigPlaybackBossRefreshVideoComposition(*(_QWORD *)(v10 + 352));
          }
          else
          {
            FigPlaybackBossResetCompositionInstructions(result, v103, 0, 0);
          }
          return 0;
        }
        return result;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("VideoCompositorSourceSampleDataTrackIDs")))
    {
      if (a4)
      {
        v104 = CFGetTypeID(a4);
        if (v104 != CFArrayGetTypeID())
          return FigSignalErrorAt();
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 776));
      v105 = *(const void **)(v10 + 784);
      *(_QWORD *)(v10 + 784) = a4;
      if (a4)
        CFRetain(a4);
      if (v105)
        CFRelease(v105);
      v106 = *(_QWORD *)(v10 + 776);
LABEL_189:
      MEMORY[0x19402EF04](v106);
      return 0;
    }
    if (CFEqual(a3, CFSTR("VideoCompositorSourceVideoTrackWindows"))
      || CFEqual(a3, CFSTR("VideoCompositorSourceSampleDataTrackWindows")))
    {
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("UsesMinimalLatencyForVideoCompositionRendering")))
    {
      if (a4)
      {
        v108 = CFGetTypeID(a4);
        if (v108 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue(a4);
          if (Value != *(unsigned __int8 *)(v10 + 688))
          {
            *(_BYTE *)(v10 + 688) = Value;
            if (*(_QWORD *)(v10 + 808))
            {
              memset(valuePtr, 0, 24);
              memset(&time2, 0, sizeof(time2));
              itemfig_getHighAndLowWaterLevelDurationsForVideoCompositionProcessing((uint64_t)a1, (uint64_t)valuePtr, (uint64_t)&time2);
              v110 = *(_QWORD *)(v10 + 808);
              start = valuePtr[0].start;
              type = time2;
              FigVideoCompositionProcessorSetOutputDurationHighAndLowWaterLevels(v110, &start, &type);
            }
          }
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("VideoCompositorFrameDuration")))
    {
      memset(&start, 0, sizeof(start));
      CMTimeMakeFromDictionary(&start, a4);
      if ((start.flags & 0x1D) == 1)
      {
        valuePtr[0].start = start;
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (CMTimeCompare(&valuePtr[0].start, &time2) >= 1 && !start.epoch)
        {
          *(_OWORD *)&valuePtr[0].start.value = *(_OWORD *)(v10 + 692);
          valuePtr[0].start.epoch = *(_QWORD *)(v10 + 708);
          *(_OWORD *)&time2.value = *(_OWORD *)&start.value;
          time2.epoch = 0;
          result = CMTimeCompare(&valuePtr[0].start, &time2);
          if (!(_DWORD)result)
            return result;
          *(CMTime *)(v10 + 692) = start;
          if (!*(_QWORD *)(v10 + 352))
            return 0;
          if (dword_1EE2A2AC8 >= 2)
          {
            LODWORD(type.value) = 0;
            v111 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v112 = type.value;
            if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
              v113 = v112;
            else
              v113 = v112 & 0xFFFFFFFE;
            if (v113)
            {
              LODWORD(time2.value) = 136315138;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v67 = *(const void **)(v10 + 8);
          *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
          valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          time2 = valuePtr[0].start;
          goto LABEL_108;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("VideoCompositorSourceTrackIDForFrameTiming")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v114 = CFGetTypeID(a4);
      if (v114 != CFNumberGetTypeID())
        return FigSignalErrorAt();
      start.value = 0;
      CFNumberGetValue(a4, kCFNumberCFIndexType, &start);
      if (*(_DWORD *)(v10 + 716) == LODWORD(start.value))
        return 0;
      *(_DWORD *)(v10 + 716) = start.value;
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(type.value) = 0;
        v115 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v116 = type.value;
        if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
          v117 = v116;
        else
          v117 = v116 & 0xFFFFFFFE;
        if (v117)
        {
          LODWORD(time2.value) = 136315138;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("VideoCompositorRenderDimensions")))
    {
      start.value = 0;
      *(_QWORD *)&start.timescale = 0;
      if (!a4)
        return FigSignalErrorAt();
      v118 = CFDictionaryGetTypeID();
      if (v118 != CFGetTypeID(a4) || !CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&start))
        return FigSignalErrorAt();
      MEMORY[0x19402EA0C](*(_QWORD *)(v11 + 496));
      if (*(double *)(v10 + 720) != *(double *)&start.value || *(double *)(v10 + 728) != *(double *)&start.timescale)
      {
        *(_OWORD *)(v10 + 720) = *(_OWORD *)&start.value;
        v119 = *(_QWORD *)(v10 + 352);
        MEMORY[0x19402EA24](*(_QWORD *)(v11 + 496));
        if (!v119)
          return 0;
        if (dword_1EE2A2AC8 >= 2)
        {
          LODWORD(type.value) = 0;
          v120 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v121 = type.value;
          if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
            v122 = v121;
          else
            v122 = v121 & 0xFFFFFFFE;
          if (v122)
          {
            v123 = *(_QWORD *)(v10 + 8);
            if (v123)
              v124 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              v124 = "";
            if (a1)
              v140 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            else
              v140 = "";
            LODWORD(time2.value) = 136316162;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v123;
            HIWORD(time2.epoch) = 2082;
            v274 = v124;
            v275 = 2048;
            v276 = a1;
            v277 = 2082;
            v278 = v140;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v67 = *(const void **)(v10 + 8);
        *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
        valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        time2 = valuePtr[0].start;
        goto LABEL_108;
      }
LABEL_33:
      MEMORY[0x19402EA24](*(_QWORD *)(v11 + 496));
      return 0;
    }
    if (CFEqual(a3, CFSTR("VideoCompositorRenderScale")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v125 = CFNumberGetTypeID();
      if (v125 != CFGetTypeID(a4))
        return FigSignalErrorAt();
      LODWORD(start.value) = 0;
      CFNumberGetValue(a4, kCFNumberFloatType, &start);
      if (*(float *)(v10 + 736) == *(float *)&start.value)
        return 0;
      *(_DWORD *)(v10 + 736) = start.value;
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(type.value) = 0;
        v126 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v127 = type.value;
        if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
          v128 = v127;
        else
          v128 = v127 & 0xFFFFFFFE;
        if (v128)
        {
          LODWORD(time2.value) = 136315138;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("VideoCompositorColorPrimaries")))
    {
      if (FigCFEqual())
        return 0;
      if (a4)
      {
        v129 = CFStringGetTypeID();
        if (v129 != CFGetTypeID(a4))
          return FigSignalErrorAt();
        v130 = *(const void **)(v10 + 744);
        *(_QWORD *)(v10 + 744) = a4;
        CFRetain(a4);
      }
      else
      {
        v130 = *(const void **)(v10 + 744);
        *(_QWORD *)(v10 + 744) = 0;
      }
      if (v130)
        CFRelease(v130);
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v135 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("VideoCompositorColorYCbCrMatrix")))
    {
      if (FigCFEqual())
        return 0;
      if (a4)
      {
        v131 = CFStringGetTypeID();
        if (v131 != CFGetTypeID(a4))
          return FigSignalErrorAt();
        v132 = *(const void **)(v10 + 752);
        *(_QWORD *)(v10 + 752) = a4;
        CFRetain(a4);
      }
      else
      {
        v132 = *(const void **)(v10 + 752);
        *(_QWORD *)(v10 + 752) = 0;
      }
      if (v132)
        CFRelease(v132);
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v139 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("VideoCompositorColorTransferFunction")))
    {
      if (FigCFEqual())
        return 0;
      if (a4)
      {
        v133 = CFStringGetTypeID();
        if (v133 != CFGetTypeID(a4))
          return FigSignalErrorAt();
        v134 = *(const void **)(v10 + 760);
        *(_QWORD *)(v10 + 760) = a4;
        CFRetain(a4);
      }
      else
      {
        v134 = *(const void **)(v10 + 760);
        *(_QWORD *)(v10 + 760) = 0;
      }
      if (v134)
        CFRelease(v134);
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v143 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("VideoCompositorHDRDisplayMetadataPolicy")))
    {
      if (FigCFEqual())
        return 0;
      if (a4)
      {
        v136 = CFGetTypeID(a4);
        if (v136 == CFStringGetTypeID())
        {
          v137 = *(const void **)(v10 + 768);
          *(_QWORD *)(v10 + 768) = a4;
          CFRetain(a4);
          if (v137)
            CFRelease(v137);
          if (!*(_QWORD *)(v10 + 352))
            return 0;
          if (dword_1EE2A2AC8 >= 2)
          {
            LODWORD(start.value) = 0;
            LOBYTE(type.value) = 0;
            v138 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v67 = *(const void **)(v10 + 8);
          *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
          valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          time2 = valuePtr[0].start;
          goto LABEL_108;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("VideoCompositor")))
    {
      start.value = 0;
      if (a4)
      {
        if (CFEqual(a4, CFSTR("VideoCompositor_Basic")))
        {
          OpenGL = 0;
LABEL_305:
          if (*(_DWORD *)(v10 + 664) == 1 && (v142 = *(const void **)(v10 + 656)) != 0)
            start.value = (CMTimeValue)CFRetain(v142);
          else
            OpenGL = FigVideoCompositorCreateBasic(*MEMORY[0x1E0C9AE00], 0, &start);
          v146 = 1;
          goto LABEL_384;
        }
        if (CFEqual(a4, CFSTR("VideoCompositor_vImage")))
        {
          OpenGL = 0;
LABEL_326:
          if (*(_DWORD *)(v10 + 664) == 3 && (v147 = *(const void **)(v10 + 656)) != 0)
            start.value = (CMTimeValue)CFRetain(v147);
          else
            OpenGL = FigVideoCompositorCreatevImage(*MEMORY[0x1E0C9AE00], 0, &start);
          v146 = 3;
          goto LABEL_384;
        }
        if (CFEqual(a4, CFSTR("VideoCompositor_Metal")))
        {
          OpenGL = 0;
LABEL_354:
          if (*(_DWORD *)(v10 + 664) == 4 && (v161 = *(const void **)(v10 + 656)) != 0)
            start.value = (CMTimeValue)CFRetain(v161);
          else
            OpenGL = FigVideoCompositorCreateMetal(*MEMORY[0x1E0C9AE00], &start);
          v146 = 4;
          goto LABEL_384;
        }
        if (CFEqual(a4, CFSTR("VideoCompositor_OpenGL")))
        {
          OpenGL = 0;
LABEL_369:
          if (*(_DWORD *)(v10 + 664) == 2 && (v165 = *(const void **)(v10 + 656)) != 0)
            start.value = (CMTimeValue)CFRetain(v165);
          else
            OpenGL = FigVideoCompositorCreateOpenGL((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (CFTypeRef *)&start);
          v146 = 2;
          goto LABEL_384;
        }
        if (CFEqual(a4, CFSTR("VideoCompositor_DeviceSpecific")))
        {
          valuePtr[0].start.value = 0;
          v146 = 0;
          OpenGL = FigVideoCompositorCopyDeviceSpecificCompositorName(0, valuePtr);
          if (!(_DWORD)OpenGL)
          {
            if (FigCFEqual())
            {
              v146 = 1;
            }
            else if (FigCFEqual())
            {
              v146 = 3;
            }
            else if (FigCFEqual())
            {
              v146 = 4;
            }
            else
            {
              v146 = 2 * (FigCFEqual() != 0);
            }
          }
          if (valuePtr[0].start.value)
            CFRelease((CFTypeRef)valuePtr[0].start.value);
          switch(v146)
          {
            case 0:
              goto LABEL_484;
            case 1:
              goto LABEL_305;
            case 2:
              goto LABEL_369;
            case 3:
              goto LABEL_326;
            case 4:
              goto LABEL_354;
            default:
              OpenGL = FigSignalErrorAt();
              break;
          }
LABEL_384:
          v171 = (const void *)start.value;
          if ((_DWORD)OpenGL || !start.value)
          {
            if ((_DWORD)OpenGL)
            {
LABEL_406:
              if (v171)
                CFRelease(v171);
              return OpenGL;
            }
          }
          else
          {
            LODWORD(valuePtr[0].start.value) = 23;
            v172 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
            FigVideoCompositorSetProperty(start.value, (uint64_t)CFSTR("WorkerThreadPriority"), (uint64_t)v172);
            if (v172)
              CFRelease(v172);
            v171 = (const void *)start.value;
          }
          if (*(const void **)(v10 + 656) != v171)
          {
            v173 = *(const void **)(v10 + 8);
            if (v173)
            {
              MEMORY[0x19402EA0C](*(_QWORD *)(v11 + 496));
              v174 = *(const void **)(v10 + 656);
              v175 = (const void *)start.value;
              *(_QWORD *)(v10 + 656) = start.value;
              if (v175)
                CFRetain(v175);
              if (v174)
                CFRelease(v174);
              *(_DWORD *)(v10 + 664) = v146;
              itemfig_updateHasEnabledVideo();
              MEMORY[0x19402EA24](*(_QWORD *)(v11 + 496));
              if (*(_QWORD *)(v10 + 352))
              {
                if (dword_1EE2A2AC8 >= 2)
                {
                  LODWORD(type.value) = 0;
                  v176 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v177 = type.value;
                  if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
                    v178 = v177;
                  else
                    v178 = v177 & 0xFFFFFFFE;
                  if (v178)
                  {
                    LODWORD(time2.value) = 136315138;
                    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
                valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                time2 = valuePtr[0].start;
                playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v173, (uint64_t)valuePtr, (uint64_t)&time2, 0);
              }
              v171 = (const void *)start.value;
            }
          }
          goto LABEL_406;
        }
        FigVideoCompositorGetTypeID();
        CFGetTypeID(a4);
        OpenGL = 0;
LABEL_484:
        v145 = CFRetain(a4);
      }
      else
      {
        OpenGL = 0;
        v145 = 0;
      }
      v146 = 0;
      start.value = (CMTimeValue)v145;
      goto LABEL_384;
    }
    if (CFEqual(a3, CFSTR("VideoCompositionProperties")))
    {
      if (a4)
      {
        v144 = CFGetTypeID(a4);
        if (v144 == CFDictionaryGetTypeID())
          return itemfig_setVideoCompositionProperties((uint64_t)a1, a4);
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("SynchronizedLayers")))
    {
      start.value = 0;
      if (a4 && (v148 = CFGetTypeID(a4), v148 == CFArrayGetTypeID()))
      {
        Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4);
        v150 = Copy;
        v151 = (CFArrayRef *)(v10 + 864);
        v152 = *(const void **)(v10 + 864);
        *(_QWORD *)(v10 + 864) = Copy;
        if (Copy)
        {
          CFRetain(Copy);
          v153 = 0;
          goto LABEL_339;
        }
      }
      else
      {
        v150 = 0;
        v151 = (CFArrayRef *)(v10 + 864);
        v152 = *(const void **)(v10 + 864);
        *(_QWORD *)(v10 + 864) = 0;
      }
      v153 = 1;
LABEL_339:
      if (v152)
        CFRelease(v152);
      if ((v153 & 1) == 0)
        CFRelease(v150);
      v154 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], &start.value);
      if (*(_QWORD *)(v10 + 856) && *(_QWORD *)(v10 + 8))
      {
        Mutable = CFArrayCreateMutable(v154, 0, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v156 = Mutable;
          MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 224));
          v157 = *(const __CFArray **)(v11 + 208);
          if (v157)
          {
            v282.length = CFArrayGetCount(v157);
            v282.location = 0;
            CFArrayAppendArray(v156, *(CFArrayRef *)(v11 + 208), v282);
          }
          MEMORY[0x19402EF04](*(_QWORD *)(v11 + 224));
          v158 = *v151;
          if (*v151)
          {
            v283.length = CFArrayGetCount(*v151);
            v283.location = 0;
            CFArrayAppendArray(v156, v158, v283);
          }
          MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 848));
          v159 = *(_QWORD *)(v10 + 856);
          if (v159)
          {
            v160 = FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v159, v156, (const void *)start.value);
          }
          else
          {
            LODWORD(type.value) = 0;
            v179 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v180 = type.value;
            if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
              v181 = v180;
            else
              v181 = v180 & 0xFFFFFFFE;
            if (v181)
            {
              LODWORD(time2.value) = 136315138;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v160 = 0;
          }
          MEMORY[0x19402EF04](*(_QWORD *)(v10 + 848));
          CFRelease(v156);
          goto LABEL_429;
        }
        LODWORD(type.value) = 0;
        v168 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v169 = type.value;
        if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
          v170 = v169;
        else
          v170 = v169 & 0xFFFFFFFE;
        if (v170)
        {
          LODWORD(time2.value) = 136315138;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v160 = 0;
LABEL_429:
      if (*v151)
      {
        *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E68];
        valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        itemfig_GetDuration((uint64_t)a1, (uint64_t)valuePtr);
        v185 = *(const __CFArray **)(v10 + 864);
        time2 = valuePtr[0].start;
        FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers((const void *)start.value, (__int128 *)&time2.value, v185, (uint64_t)"itemfig_handleSetProperty");
        if (*(_QWORD *)(v10 + 352))
          playerfig_synchronizeLayerToTimebaseWithTransaction((uint64_t)a1, (const void *)start.value);
      }
      FigDeferredTransactionCommit(start.value);
      if (start.value)
        CFRelease((CFTypeRef)start.value);
      return v160;
    }
    if (CFEqual(a3, CFSTR("BlendsVideoFrames")))
    {
      if (a4)
      {
        v162 = CFBooleanGetTypeID();
        if (v162 != CFGetTypeID(a4))
          return FigSignalErrorAt();
      }
      v163 = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
      if (*(unsigned __int8 *)(v10 + 1136) == v163)
        return 0;
      *(_BYTE *)(v10 + 1136) = v163;
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v164 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("PropagatePerFrameHDRDisplayMetadata")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v166 = CFGetTypeID(a4);
      if (v166 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      *(_BYTE *)(v10 + 1137) = CFBooleanGetValue(a4);
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v167 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("ApertureMode")))
    {
      LODWORD(valuePtr[0].start.value) = 0;
      LODWORD(time2.value) = 0;
      LODWORD(start.value) = 0;
      LODWORD(type.value) = 0;
      if (a4)
      {
        v182 = CFGetTypeID(a4);
        if (v182 == CFStringGetTypeID())
        {
          if (*(_BYTE *)(v10 + 1200))
            itemfig_GetDimensions(a1, (float *)valuePtr, (float *)&time2);
          if (CFEqual(a4, CFSTR("CleanAperture")))
          {
            v183 = 1;
            v184 = 1;
LABEL_471:
            *(_BYTE *)(v10 + 1152) = v183;
            *(_BYTE *)(v10 + 1153) = v184;
            goto LABEL_473;
          }
          if (CFEqual(a4, CFSTR("ProductionAperture")))
          {
            v184 = 0;
            v183 = 1;
            goto LABEL_471;
          }
          if (CFEqual(a4, CFSTR("EncodedPixels")))
          {
            v183 = 0;
            v184 = 0;
            goto LABEL_471;
          }
        }
      }
      result = FigSignalErrorAt();
      if ((_DWORD)result)
        return result;
LABEL_473:
      itemfig_setCAImageQueueFlagsForApertureMode();
    }
    if (CFEqual(a3, CFSTR("ImageQueueInterpolationCurve")))
    {
      if (a4)
      {
        v186 = CFArrayGetTypeID();
        if (v186 != CFGetTypeID(a4))
          return FigSignalErrorAt();
        v187 = *(const __CFBoolean **)(v10 + 1128);
        if (v187 == a4)
          return 0;
        *(_QWORD *)(v10 + 1128) = a4;
        CFRetain(a4);
        if (!v187)
          goto LABEL_456;
      }
      else
      {
        v187 = *(const __CFBoolean **)(v10 + 1128);
        if (!v187)
          return 0;
        *(_QWORD *)(v10 + 1128) = 0;
      }
      CFRelease(v187);
LABEL_456:
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v190 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("VideoEnhancementMode")))
    {
      if (a4)
      {
        v188 = CFGetTypeID(a4);
        if (v188 == CFStringGetTypeID())
        {
          if (!FigCFEqual())
          {
            v189 = *(const void **)(v10 + 1144);
            *(_QWORD *)(v10 + 1144) = a4;
            CFRetain(a4);
            if (v189)
              CFRelease(v189);
            itemfig_setVideoEnhancementModeOnImageQueues((uint64_t)a1, (uint64_t)a4);
          }
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("AlwaysMonitorPlayability")))
    {
      if (a4)
      {
        v191 = CFGetTypeID(a4);
        if (v191 == CFBooleanGetTypeID())
        {
          result = CFBooleanGetValue(a4);
          if ((_DWORD)result)
          {
            LOBYTE(valuePtr[0].start.value) = 0;
            MEMORY[0x19402EA0C](*(_QWORD *)(v10 + 616));
            *(_BYTE *)(v10 + 624) = 1;
            MEMORY[0x19402EA24](*(_QWORD *)(v10 + 616));
            result = itemfig_makePlaybackPrerequisitePropertiesReady((uint64_t)a1, valuePtr);
            if (LOBYTE(valuePtr[0].start.value))
            {
              MEMORY[0x19402EA0C](*(_QWORD *)(v10 + 616));
              *(_BYTE *)(v10 + 624) = 0;
              MEMORY[0x19402EA24](*(_QWORD *)(v10 + 616));
              return itemfig_monitorPlayability(a1);
            }
          }
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("ContinuePlayingDuringPrerollForSeek")))
    {
      if (a4)
      {
        v192 = CFGetTypeID(a4);
        if (v192 == CFBooleanGetTypeID())
        {
          v193 = CFBooleanGetValue(a4);
          *(_BYTE *)(v10 + 287) = v193;
          result = *(_QWORD *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetContinuePlayingDuringPrerollForSeek(result, v193);
            return 0;
          }
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("ContinuePlayingDuringPrerollForRateChange")))
    {
      if (a4)
      {
        v194 = CFGetTypeID(a4);
        if (v194 == CFBooleanGetTypeID())
        {
          v195 = CFBooleanGetValue(a4);
          *(_BYTE *)(v10 + 288) = v195;
          result = *(_QWORD *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetContinuePlayingDuringPrerollForRateChange(result, v195);
            return 0;
          }
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("IFrameOnlySpeedThreshold")))
    {
      if (a4)
      {
        v196 = CFGetTypeID(a4);
        if (v196 == CFNumberGetTypeID())
        {
          *(_BYTE *)(v10 + 290) = 1;
          CFNumberGetValue(a4, kCFNumberFloat32Type, (void *)(v10 + 292));
          result = *(_QWORD *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetIFrameOnlySpeedThreshold(result, *(float *)(v10 + 292));
            return 0;
          }
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("UseIFrameOnlyPlaybackForHighRateScaledEdits")))
    {
      if (a4)
      {
        v197 = CFGetTypeID(a4);
        if (v197 == CFBooleanGetTypeID())
        {
          v198 = CFBooleanGetValue(a4);
          *(_BYTE *)(v10 + 289) = v198;
          result = *(_QWORD *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetUseIFrameOnlyPlaybackForHighRateScaledEdits(result, v198);
            return 0;
          }
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("MinimumIntervalForIFrameOnlyPlayback")))
    {
      if (a4)
      {
        v199 = CFGetTypeID(a4);
        if (v199 == CFDictionaryGetTypeID())
        {
          CMTimeMakeFromDictionary(&valuePtr[0].start, a4);
          *(_OWORD *)(v10 + 296) = *(_OWORD *)&valuePtr[0].start.value;
          *(_QWORD *)(v10 + 312) = valuePtr[0].start.epoch;
          result = *(_QWORD *)(v10 + 352);
          if (result)
          {
            *(_OWORD *)&valuePtr[0].start.value = *(_OWORD *)(v10 + 296);
            valuePtr[0].start.epoch = *(_QWORD *)(v10 + 312);
            FigPlaybackBossSetMinimumIntervalForIFrameOnlyPlayback(result, (__int128 *)&valuePtr[0].start.value);
            return 0;
          }
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("ThoroughlyRefreshClosedCaptionsWhenSeeking")))
    {
      if (a4)
      {
        v200 = CFGetTypeID(a4);
        if (v200 == CFBooleanGetTypeID())
        {
          v201 = CFBooleanGetValue(a4);
          *(_BYTE *)(v10 + 320) = v201;
          result = *(_QWORD *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetThoroughlyRefreshClosedCaptionsWhenSeeking(result, v201);
            return 0;
          }
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("RequiresExternalProtection")))
    {
      if (a4)
      {
        v202 = CFGetTypeID(a4);
        if (v202 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(a4))
          {
            valuePtr[0].start.value = 1;
            v203 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, valuePtr);
            result = 0;
            *(_QWORD *)(v10 + 1168) = v203;
            return result;
          }
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("LoudnessInfo")))
    {
      if (a4)
      {
        v204 = CFGetTypeID(a4);
        if (v204 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
        v205 = *(const void **)(v10 + 1456);
        *(_QWORD *)(v10 + 1456) = a4;
        goto LABEL_545;
      }
      v205 = *(const void **)(v10 + 1456);
      *(_QWORD *)(v10 + 1456) = 0;
      goto LABEL_731;
    }
    if (CFEqual(a3, CFSTR("SoundCheckVolumeNormalization")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v206 = CFGetTypeID(a4);
      if (v206 != CFNumberGetTypeID())
        return FigSignalErrorAt();
      LODWORD(valuePtr[0].start.value) = 0;
      CFNumberGetValue(a4, kCFNumberFloat32Type, valuePtr);
      *(_DWORD *)(v10 + 1440) = valuePtr[0].start.value;
LABEL_733:
      itemfig_applyLoudnessInfo(a1, 0, 1, 0);
      return 0;
    }
    if (CFEqual(a3, CFSTR("Volume")))
    {
      if (a4)
      {
        v207 = CFGetTypeID(a4);
        if (v207 == CFNumberGetTypeID())
        {
          LODWORD(valuePtr[0].start.value) = 1065353216;
          CFNumberGetValue(a4, kCFNumberFloat32Type, valuePtr);
          *(_DWORD *)(v10 + 1428) = valuePtr[0].start.value;
          itemfig_updateVolumeOffset((uint64_t)a1);
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("AdjustTargetLevel")))
    {
      if (a4)
      {
        v208 = CFGetTypeID(a4);
        if (v208 == CFNumberGetTypeID())
        {
          v209 = *(const void **)(v10 + 1496);
          *(_QWORD *)(v10 + 1496) = a4;
          CFRetain(a4);
          if (v209)
            CFRelease(v209);
          itemfig_applyAdjustTargetLevel((uint64_t)a1);
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("AdjustCompressionProfile")))
    {
      if (a4)
      {
        v210 = CFGetTypeID(a4);
        if (v210 == CFNumberGetTypeID())
        {
          v211 = *(const void **)(v10 + 1504);
          *(_QWORD *)(v10 + 1504) = a4;
          CFRetain(a4);
          if (v211)
            CFRelease(v211);
          itemfig_applyAdjustCompressionProfile((uint64_t)a1);
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("MediaKind")))
    {
      if (a4)
      {
        v212 = CFGetTypeID(a4);
        if (v212 != CFStringGetTypeID())
          return FigSignalErrorAt();
        v205 = *(const void **)(v10 + 1448);
        *(_QWORD *)(v10 + 1448) = a4;
LABEL_545:
        CFRetain(a4);
        goto LABEL_731;
      }
      v205 = *(const void **)(v10 + 1448);
      *(_QWORD *)(v10 + 1448) = 0;
LABEL_731:
      if (v205)
        CFRelease(v205);
      goto LABEL_733;
    }
    if (CFEqual(a3, CFSTR("VisualContextArray")))
    {
      itemfig_setVisualContextArray((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a3, CFSTR("TextMarkupArray")))
    {
      itemfig_setTextMarkupArray((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a3, CFSTR("TextHighlightArray")))
    {
      itemfig_setTextHighlightArray((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a3, CFSTR("LegibleOutputs")))
    {
      if (!a4 || (v213 = CFGetTypeID(a4), v213 == CFDictionaryGetTypeID()))
      {
        itemfig_setLegibleOutputsDict((uint64_t)a1, a4);
        return 0;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("MetadataOutputs")))
    {
      if (!a4)
        return itemfig_setMetadataOutputsDict((uint64_t)a1, a4);
      v214 = CFGetTypeID(a4);
      if (v214 == CFDictionaryGetTypeID())
        return itemfig_setMetadataOutputsDict((uint64_t)a1, a4);
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("RenderedLegibleOutputs")))
    {
      if (!a4 || (v215 = CFGetTypeID(a4), v215 == CFDictionaryGetTypeID()))
      {
        itemfig_setRenderedLegibleOutputsDict((uint64_t)a1, a4);
        return 0;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("SelectedMediaArray")))
    {
      if (a4)
      {
        v216 = CFGetTypeID(a4);
        if (v216 == CFArrayGetTypeID())
          return itemfig_updateSelectedMediaArrayInternal(a1, a4, 0, 0);
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("SuppressVideoLayers")))
      return itemfig_setSuppressVideoLayers((uint64_t)a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
    if (CFEqual(a3, CFSTR("SuppressLegibleRendering")))
      return itemfig_setSuppressLegibleRendering((uint64_t)a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
    if (CFEqual(a3, CFSTR("SeekingWaitsForVideoCompositionRendering")))
    {
      if (a4)
      {
        v217 = CFBooleanGetTypeID();
        if (v217 != CFGetTypeID(a4))
          return FigSignalErrorAt();
        v218 = CFBooleanGetValue(a4);
      }
      else
      {
        v218 = 0;
      }
      *(_BYTE *)(v10 + 545) = v218;
      if (!*(_QWORD *)(v10 + 352) || !*(_QWORD *)(v10 + 656))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v266 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v266, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("AudioProcessingTap")))
    {
      if (a4)
      {
        v219 = MTAudioProcessingTapGetTypeID();
        if (v219 != CFGetTypeID(a4))
          return FigSignalErrorAt();
        v220 = *(unsigned int (**)(const __CFBoolean *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v220 || !v220(a4))
          return FigSignalErrorAt();
        v221 = *(const __CFBoolean **)(v10 + 1432);
        if (v221 == a4)
          return 0;
        *(_QWORD *)(v10 + 1432) = a4;
        CFRetain(a4);
        if (!v221)
          goto LABEL_742;
      }
      else
      {
        v221 = *(const __CFBoolean **)(v10 + 1432);
        if (!v221)
          return 0;
        *(_QWORD *)(v10 + 1432) = 0;
      }
      CFRelease(v221);
LABEL_742:
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v267 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("ResetAudioBufferedAhead")))
    {
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      result = fp_bufferedAirPlayActiveAndSupportsAtmos(*(_QWORD *)(v10 + 8), 0);
      if (!(_DWORD)result)
        return result;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v222 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("TimePitchAlgorithm")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v223 = CFStringGetTypeID();
      if (v223 != CFGetTypeID(a4))
        return FigSignalErrorAt();
      if (CFEqual(a4, *(CFTypeRef *)(v10 + 1464)))
        return 0;
      v224 = CFSTR("TimeDomain");
      if (FigCFEqual()
        || (v224 = CFSTR("Spectral"), FigCFEqual())
        || (v224 = CFSTR("Varispeed"), FigCFEqual())
        || (v224 = CFSTR("LowQualityZeroLatency"), FigCFEqual()))
      {
        v225 = *(const void **)(v10 + 1464);
        *(_QWORD *)(v10 + 1464) = v224;
        if (v224)
          CFRetain(v224);
      }
      else
      {
        result = FigSignalErrorAt();
        if ((_DWORD)result)
          return result;
        v225 = *(const void **)(v10 + 1464);
        *(_QWORD *)(v10 + 1464) = 0;
      }
      if (v225)
        CFRelease(v225);
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v268 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("AudioProcessingUnits")))
    {
      if (a4)
      {
        v226 = CFGetTypeID(a4);
        if (v226 != CFArrayGetTypeID())
          return FigSignalErrorAt();
      }
      result = FPSupport_AudioProcessingUnitsConfigurationsAreDifferent();
      if (!(_DWORD)result)
        return result;
      v227 = *(const void **)(v10 + 1480);
      *(_QWORD *)(v10 + 1480) = a4;
      if (a4)
        CFRetain(a4);
      if (v227)
        CFRelease(v227);
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v228 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("AudioCurves")))
    {
      LOBYTE(valuePtr[0].start.value) = 0;
      LOBYTE(time2.value) = 0;
      fp_checkForCinematicAudioParametersInAudioCurves(*(_QWORD *)(v10 + 1472), (BOOL *)valuePtr, 0, 0);
      if (fp_isValidAudioCurves(a4))
      {
        v229 = *(const void **)(v10 + 1472);
        *(_QWORD *)(v10 + 1472) = a4;
        if (a4)
          CFRetain(a4);
        if (v229)
          CFRelease(v229);
        itemfig_applyItemAudioCurvesToAllAudioTracks(v10);
        fp_checkForCinematicAudioParametersInAudioCurves((uint64_t)a4, (BOOL *)&time2, 0, 0);
        if (LOBYTE(valuePtr[0].start.value) != LOBYTE(time2.value))
          playerfig_dispatchAsyncAutoSelectionCriteriaChangedForItem(*(_QWORD *)(v10 + 8), a1);
        return 0;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("AudioClockDevice")))
    {
      if (a4)
      {
        v230 = CFStringGetTypeID();
        if (v230 != CFGetTypeID(a4))
          return FigSignalErrorAt();
        v231 = *(const void **)(v10 + 1488);
        *(_QWORD *)(v10 + 1488) = a4;
        CFRetain(a4);
      }
      else
      {
        v231 = *(const void **)(v10 + 1488);
        *(_QWORD *)(v10 + 1488) = 0;
      }
      if (v231)
        CFRelease(v231);
      v97 = *(_QWORD *)(v10 + 8);
      v96 = CFSTR("AudioQueueClockDevice");
      v92 = (uint64_t)a4;
      return fp_setPropertyOnAllAudioRenderPipelines(v97, (uint64_t)v96, v92);
    }
    if (CFEqual(a3, CFSTR("DisplayNonForcedSubtitles")))
    {
      itemfig_setDisplayNonForcedSubtitlesEnabled((uint64_t)a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a4);
      playerfig_updateClosedCaptionsDisplayForItem(*(const void **)(v10 + 8), (uint64_t)a1);
      playerfig_updateSubtitleDisplayForItem(*(_QWORD *)(v10 + 8), a1);
      playerfig_updateCaptionOrSubtitleHintOnVideoPipeline(*(_QWORD *)(v10 + 8), a1);
      return 0;
    }
    if (CFEqual(a3, CFSTR("AutomaticallyLoadedAssetProperties")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v232 = CFGetTypeID(a4);
      if (v232 != CFArrayGetTypeID())
        return FigSignalErrorAt();
      if (!*(_QWORD *)(v10 + 8))
        return 0;
      MEMORY[0x19402EA0C](*(_QWORD *)(v11 + 496));
      v233 = *(const void **)(v10 + 1224);
      *(_QWORD *)(v10 + 1224) = a4;
      goto LABEL_634;
    }
    if (CFEqual(a3, CFSTR("AutomaticallyLoadedAssetTrackProperties")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v234 = CFGetTypeID(a4);
      if (v234 != CFArrayGetTypeID())
        return FigSignalErrorAt();
      if (!*(_QWORD *)(v10 + 8))
        return 0;
      MEMORY[0x19402EA0C](*(_QWORD *)(v11 + 496));
      v233 = *(const void **)(v10 + 1232);
      *(_QWORD *)(v10 + 1232) = a4;
LABEL_634:
      CFRetain(a4);
      if (v233)
        CFRelease(v233);
      goto LABEL_33;
    }
    if (CFEqual(a3, CFSTR("ServiceIdentifier")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v235 = CFStringGetTypeID();
      if (v235 != CFGetTypeID(a4))
        return FigSignalErrorAt();
      v236 = *(const void **)(v10 + 1280);
      *(_QWORD *)(v10 + 1280) = a4;
      goto LABEL_676;
    }
    if (CFEqual(a3, CFSTR("ForceEnableAccessLog")))
    {
      if (a4)
      {
        v237 = CFGetTypeID(a4);
        if (v237 == CFBooleanGetTypeID())
        {
          result = 0;
          *(_BYTE *)(v10 + 1697) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("OutOfBandTextRenderingVideoDimensions")))
    {
      if (a4)
      {
        v238 = CFGetTypeID(a4);
        if (v238 == CFDictionaryGetTypeID() && CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)(v10 + 1880)))
        {
          result = 0;
          *(_BYTE *)(v10 + 1872) = 1;
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("PlayHapticTracks")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v239 = CFGetTypeID(a4);
      if (v239 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      *(_BYTE *)(v10 + 1023) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
      if (!*(_QWORD *)(v10 + 352))
        return 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v240 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("HapticPlaybackLocality")))
    {
      if (a4)
      {
        v241 = CFGetTypeID(a4);
        if (v241 != CFStringGetTypeID())
          return FigSignalErrorAt();
        v236 = *(const void **)(v10 + 1032);
        *(_QWORD *)(v10 + 1032) = a4;
        goto LABEL_676;
      }
      v236 = *(const void **)(v10 + 1032);
      *(_QWORD *)(v10 + 1032) = 0;
      goto LABEL_761;
    }
    if (CFEqual(a3, CFSTR("AudioSpatializationAllowed")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v242 = CFGetTypeID(a4);
      if (v242 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      *(_BYTE *)(v10 + 1392) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
      result = itemfig_wantsDifferentSpatializationConfiguration((uint64_t)a1);
      if (!(_DWORD)result)
        return result;
      if (dword_1EE2A2AC8)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v243 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("StereoAudioSpatializationAllowed")))
    {
      if (!a4)
        return FigSignalErrorAt();
      v244 = CFGetTypeID(a4);
      if (v244 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      *(_BYTE *)(v10 + 1394) = 1;
      *(_BYTE *)(v10 + 1393) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
      result = itemfig_wantsDifferentSpatializationConfiguration((uint64_t)a1);
      if (!(_DWORD)result)
        return result;
      if (dword_1EE2A2AC8)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v245 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.value = *MEMORY[0x1E0CA2E18];
      valuePtr[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2 = valuePtr[0].start;
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("CoordinationIdentifier")))
    {
      if (a4)
      {
        v246 = CFGetTypeID(a4);
        if (v246 != CFStringGetTypeID())
          return FigSignalErrorAt();
      }
      if (FigCFEqual())
        return 0;
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      v236 = *(const void **)(v10 + 2032);
      *(_QWORD *)(v10 + 2032) = a4;
      if (a4)
LABEL_676:
        CFRetain(a4);
LABEL_761:
      if (v236)
        CFRelease(v236);
      return 0;
    }
    if (CFEqual(a3, CFSTR("ParticipatesInCoordinatedPlayback")))
    {
      if (a4)
      {
        v247 = CFGetTypeID(a4);
        if (v247 == CFBooleanGetTypeID())
        {
          result = 0;
          *(_BYTE *)(v10 + 2040) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("VideoSlotUsage")))
    {
      if (a4)
      {
        v248 = CFGetTypeID(a4);
        if (v248 == CFArrayGetTypeID())
        {
          itemfig_updateVideoSlotUsage((uint64_t)a1, a4);
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization")))
    {
      if (a4)
      {
        v249 = CFGetTypeID(a4);
        if (v249 != CMTimebaseGetTypeID())
          return FigSignalErrorAt();
        v250 = *(const void **)(v10 + 344);
        *(_QWORD *)(v10 + 344) = a4;
        CFRetain(a4);
      }
      else
      {
        v250 = *(const void **)(v10 + 344);
        *(_QWORD *)(v10 + 344) = 0;
      }
      if (v250)
        CFRelease(v250);
      if (a4)
      {
        if (!dword_1EE2A2AC8)
          return 0;
      }
      else if (!dword_1EE2A2AC8)
      {
        return 0;
      }
      LODWORD(start.value) = 0;
      LOBYTE(type.value) = 0;
      v269 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT);
      goto LABEL_67;
    }
    if (CFEqual(a3, CFSTR("RTCReportingCategory")))
    {
      if (!a4)
        return 0;
      v251 = CFGetTypeID(a4);
      if (v251 != CFStringGetTypeID())
        return 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 1896));
      v252 = *(const void **)(v10 + 1912);
      *(_QWORD *)(v10 + 1912) = a4;
      CFRetain(a4);
      if (v252)
        CFRelease(v252);
      v253 = *(_QWORD *)(v10 + 1904);
      if (v253)
      {
        v254 = *(_QWORD *)(v10 + 1912);
        v255 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 48);
        if (v255)
          v255(v253, CFSTR("playerStats"), CFSTR("Category"), v254, 0);
      }
      goto LABEL_702;
    }
    if (CFEqual(a3, CFSTR("ClientReportingValues")))
    {
      if (!a4)
        return 0;
      v256 = CFGetTypeID(a4);
      if (v256 != CFDictionaryGetTypeID())
        return 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 1896));
      FigReportingAgentSetStatsForAllKeys(*(_QWORD *)(v10 + 1904), 0x1E301B638);
LABEL_702:
      v106 = *(_QWORD *)(v10 + 1896);
      goto LABEL_189;
    }
    if (CFEqual(a3, CFSTR("ArtificiallyDelayPreparingItemForTestingOnly")))
    {
      FigCFNumberGetFloat64();
      result = 0;
      *(_QWORD *)(v10 + 2064) = v257;
      return result;
    }
    if (CFEqual(a3, CFSTR("SpeedRampData")))
    {
      if (!*(_BYTE *)(v11 + 1107))
        return 0;
      if (a4)
      {
        v258 = CFGetTypeID(a4);
        if (v258 != CFDataGetTypeID() || !FigSpeedRampDataIsValid(a4))
          return FigSignalErrorAt();
        v259 = *(const void **)(v10 + 2072);
        if (v259)
        {
          CFRelease(v259);
          *(_QWORD *)(v10 + 2072) = 0;
        }
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        *(_QWORD *)(v10 + 2072) = CFDataCreateCopy(AllocatorForMedia, a4);
      }
      else
      {
        v270 = *(const void **)(v10 + 2072);
        if (v270)
        {
          CFRelease(v270);
          *(_QWORD *)(v10 + 2072) = 0;
        }
      }
      itemfig_updateSpeedRampDataOnAllRenderPipelines();
    }
    if (CFEqual(a3, CFSTR("AssetDownloadedName")))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 2088));
      if (!a4 || (v261 = CFGetTypeID(a4), v261 != CFStringGetTypeID()))
      {
LABEL_723:
        v106 = *(_QWORD *)(v10 + 2088);
        goto LABEL_189;
      }
      v262 = *(const void **)(v10 + 2104);
      *(_QWORD *)(v10 + 2104) = a4;
    }
    else
    {
      if (!CFEqual(a3, CFSTR("AssetDownloadedImageData")))
      {
        if (!CFEqual(a3, CFSTR("PriorImageQueueGauge")))
          return 4294954512;
        if (a4)
        {
          v264 = CFGetTypeID(a4);
          if (v264 != FigImageQueueGaugeGetTypeID())
            return 0;
          v265 = *(const void **)(v10 + 2136);
          *(_QWORD *)(v10 + 2136) = a4;
          CFRetain(a4);
        }
        else
        {
          v265 = *(const void **)(v10 + 2136);
          *(_QWORD *)(v10 + 2136) = 0;
        }
        if (v265)
          CFRelease(v265);
        itemfig_updatePriorImageQueueGaugeOnRenderPipelines((uint64_t)a1);
        return 0;
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 2088));
      if (!a4)
        goto LABEL_723;
      v263 = CFGetTypeID(a4);
      if (v263 != CFDataGetTypeID())
        goto LABEL_723;
      v262 = *(const void **)(v10 + 2112);
      *(_QWORD *)(v10 + 2112) = a4;
    }
    CFRetain(a4);
    if (v262)
      CFRelease(v262);
    goto LABEL_723;
  }
  if (!a1)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v12 = CFDictionaryGetTypeID();
  if (v12 != CFGetTypeID(a4))
    return FigSignalErrorAt();
  v13 = CMBaseObjectGetDerivedStorage();
  v14 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_RampInDuration"));
  if (v14)
  {
    v15 = v14;
    v16 = CFNumberGetTypeID();
    if (v16 == CFGetTypeID(v15))
    {
      *(_DWORD *)(v13 + 1292) = 0;
      CFNumberGetValue(v15, kCFNumberFloatType, (void *)(v13 + 1292));
      v17 = *(float *)(v13 + 1292);
      v18 = 0;
      if (v17 < 0.0)
      {
LABEL_11:
        *(_DWORD *)(v13 + 1292) = v18;
        goto LABEL_12;
      }
      if (v17 > 0.8)
      {
        v18 = 1061997773;
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v19 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_RampOutDuration"));
  if (v19)
  {
    v20 = v19;
    v21 = CFNumberGetTypeID();
    if (v21 == CFGetTypeID(v20))
    {
      *(_DWORD *)(v13 + 1296) = 0;
      CFNumberGetValue(v20, kCFNumberFloatType, (void *)(v13 + 1296));
      v22 = *(float *)(v13 + 1296);
      v23 = 0;
      if (v22 < 0.0)
      {
LABEL_17:
        *(_DWORD *)(v13 + 1296) = v23;
        goto LABEL_18;
      }
      if (v22 > 0.8)
      {
        v23 = 1061997773;
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v24 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_GaplessHeuristicInfo"));
  if (v24)
  {
    v25 = v24;
    v26 = CFNumberGetTypeID();
    if (v26 == CFGetTypeID(v25))
    {
      valuePtr[0].start.value = 0;
      CFNumberGetValue(v25, kCFNumberSInt64Type, valuePtr);
      *(_DWORD *)(v13 + 880) = valuePtr[0].start.value;
    }
  }
  v27 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_GaplessEncodingDelayInFrames"));
  if (v27 && (v28 = v27, v29 = CFNumberGetTypeID(), v29 == CFGetTypeID(v28)))
  {
    CFNumberGetValue(v28, kCFNumberSInt32Type, (void *)(v13 + 884));
    v30 = 1;
  }
  else
  {
    v30 = 0;
  }
  v33 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_GaplessEncodingDrainInFrames"));
  if (v33)
  {
    v34 = v33;
    v35 = CFNumberGetTypeID();
    if (v35 == CFGetTypeID(v34))
    {
      CFNumberGetValue(v34, kCFNumberSInt32Type, (void *)(v13 + 888));
      v30 = 1;
    }
  }
  v36 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_GaplessDurationInFrames"));
  if (v36)
  {
    v37 = v36;
    v38 = CFNumberGetTypeID();
    if (v38 == CFGetTypeID(v37))
    {
      CFNumberGetValue(v37, kCFNumberSInt64Type, (void *)(v13 + 896));
      v30 = 1;
    }
  }
  v39 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_GaplessLastPacketsResync"));
  if (v39)
  {
    v40 = v39;
    v41 = CFNumberGetTypeID();
    if (v41 == CFGetTypeID(v40))
    {
      CFNumberGetValue(v40, kCFNumberSInt64Type, (void *)(v13 + 904));
      v30 = 1;
    }
  }
  v42 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_AudibleDRMGroupID"));
  if (v42)
  {
    v43 = v42;
    v44 = CFNumberGetTypeID();
    if (v44 == CFGetTypeID(v43))
    {
      valuePtr[0].start.value = 0;
      CFNumberGetValue(v43, kCFNumberSInt64Type, valuePtr);
      *(_DWORD *)(v13 + 912) = valuePtr[0].start.value;
    }
  }
  v45 = (const __CFBoolean *)CFDictionaryGetValue(a4, CFSTR("AVItemPlaybackProperties_LookForLyrics"));
  if (v45)
  {
    v46 = v45;
    v47 = CFBooleanGetTypeID();
    if (v47 == CFGetTypeID(v46))
    {
      if (CFBooleanGetValue(v46))
      {
        if (*(_QWORD *)(v13 + 968))
          itemfig_lookForLyrics((uint64_t)a1);
        else
          *(_BYTE *)(v13 + 952) = 1;
      }
    }
  }
  if (!v30)
    return 0;
  v50 = *(const void **)(v13 + 920);
  if (v50)
  {
    CFRelease(v50);
    *(_QWORD *)(v13 + 920) = 0;
  }
  v51 = *(_DWORD *)(v13 + 888);
  v52 = *(_QWORD *)(v13 + 896);
  if (*(_QWORD *)(v13 + 884) || (v51 = 0, result = 0, v52))
  {
    v53 = FigGaplessInfoCreateForLaterEnhancement(*(_DWORD *)(v13 + 884), v51, v52);
    *(_QWORD *)(v13 + 920) = v53;
    if (!v53)
    {
      LODWORD(start.value) = 0;
      LOBYTE(type.value) = 0;
      v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
LABEL_67:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return result;
}

uint64_t itemfig_startCachePrimingWithDownloadToken(uint64_t a1, const __CFNumber *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t *v11;
  uint64_t v12;
  CFTypeRef cf;
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  valuePtr = 0;
  cf = 0;
  v15 = 0;
  if (*(_QWORD *)(DerivedStorage + 1344))
    goto LABEL_24;
  v4 = DerivedStorage;
  CFNumberGetValue(a2, kCFNumberSInt64Type, &valuePtr);
  v5 = FigAssetCopyAssetWithDownloadToken(valuePtr, (uint64_t *)&v16);
  if ((_DWORD)v5)
    goto LABEL_14;
  CMBaseObject = FigAssetGetCMBaseObject(v16);
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v7)
  {
LABEL_15:
    v12 = 4294954514;
    goto LABEL_16;
  }
  v8 = *MEMORY[0x1E0C9AE00];
  v5 = v7(CMBaseObject, CFSTR("assetProperty_ContentByteStream"), *MEMORY[0x1E0C9AE00], &v15);
  if ((_DWORD)v5)
  {
LABEL_14:
    v12 = v5;
    goto LABEL_16;
  }
  v9 = FigAssetGetCMBaseObject(*(_QWORD *)(v4 + 1216));
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v10)
    goto LABEL_15;
  v5 = v10(v9, CFSTR("assetProperty_ContentByteStream"), v8, &cf);
  if ((_DWORD)v5)
    goto LABEL_14;
  if (!v15
    || (CMByteStreamGetCMBaseObject(), FigCRABSGetClassID(), !CMBaseObjectIsMemberOfClass())
    || !cf
    || (CMByteStreamGetCMBaseObject(), FigCRABSGetClassID(), !CMBaseObjectIsMemberOfClass()))
  {
LABEL_24:
    v5 = FigSignalErrorAt();
    goto LABEL_14;
  }
  v11 = (uint64_t *)(v4 + 1344);
  v5 = FigCRABSCachePrimerCreate(v8, v15, cf, v11);
  if ((_DWORD)v5)
    goto LABEL_14;
  if (*v11)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    v5 = FigCRABSCachePrimerStart((dispatch_queue_t *)*v11);
    goto LABEL_14;
  }
  v12 = 0;
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
  return v12;
}

uint64_t itemfig_setChosenAlternateTrackIDsFromDictionary(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  CFTypeID TypeID;
  uint64_t Value;
  CFTypeID v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  CFTypeID v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int TrackIDMediaType;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  __CFDictionary *NotificationPayloadForProperties;
  int v30;
  NSObject *v31;
  NSObject *v32;
  unsigned int valuePtr;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 8);
  valuePtr = 0;
  if (!a2)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a2))
    return FigSignalErrorAt();
  Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("Audio"));
  if (Value)
  {
    v9 = CFNumberGetTypeID();
    if (v9 == CFGetTypeID((CFTypeRef)Value))
    {
      CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr);
      Value = valuePtr;
    }
    else
    {
      Value = 0;
    }
  }
  v17 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("Subtitle"));
  if (v17)
  {
    v18 = CFNumberGetTypeID();
    if (v18 == CFGetTypeID((CFTypeRef)v17))
    {
      CFNumberGetValue((CFNumberRef)v17, kCFNumberSInt32Type, &valuePtr);
      v17 = valuePtr;
    }
    else
    {
      v17 = 0;
    }
  }
  if (!(Value | v17))
    return 0;
  if (!*(_QWORD *)(v6 + 352))
  {
    v20 = *(_QWORD *)(v6 + 968);
    if (!v20)
    {
      *(_DWORD *)(v6 + 996) = Value;
      *(_DWORD *)(v6 + 1016) = v17;
      *(_DWORD *)(v6 + 1040) = 0;
      return 0;
    }
    if (*(_DWORD *)(v6 + 996) != (_DWORD)Value)
    {
      if (fp_getTrackIDMediaType(v20, Value) == 1936684398)
      {
        *(_DWORD *)(v6 + 996) = Value;
        v21 = 1;
        goto LABEL_48;
      }
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v21 = 0;
LABEL_48:
    if (*(_DWORD *)(v6 + 1016) != (_DWORD)v17)
    {
      if (fp_getTrackIDMediaType(*(_QWORD *)(v6 + 968), v17) == 1935832172)
      {
        *(_DWORD *)(v6 + 1016) = v17;
        v21 = 1;
      }
      else
      {
        v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (*(_DWORD *)(v6 + 1040))
    {
      if (fp_getTrackIDMediaType(*(_QWORD *)(v6 + 968), 0) == 1751216244)
      {
        *(_DWORD *)(v6 + 1040) = 0;
        goto LABEL_44;
      }
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!v21)
      return 0;
LABEL_44:
    NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v5, a1, v11, v12, v13, v14, v15, v16, CFSTR("SelectedMediaArray"), 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (NotificationPayloadForProperties)
      CFRelease(NotificationPayloadForProperties);
    return 0;
  }
  if (*(_DWORD *)(v6 + 996) == (_DWORD)Value)
  {
LABEL_26:
    v30 = 0;
    goto LABEL_27;
  }
  if (fp_getTrackIDMediaType(*(_QWORD *)(v6 + 968), Value) != 1936684398)
  {
    v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_26;
  }
  *(_DWORD *)(v6 + 996) = Value;
  if (dword_1EE2A2AC8 < 2)
  {
    v30 = 1;
  }
  else
  {
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    v30 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_27:
  if (*(_DWORD *)(v6 + 1016) != (_DWORD)v17)
  {
    TrackIDMediaType = fp_getTrackIDMediaType(*(_QWORD *)(v6 + 968), v17);
    if (TrackIDMediaType != 1935832172 && TrackIDMediaType != 1952807028)
    {
      v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      goto LABEL_36;
    }
    *(_DWORD *)(v6 + 1016) = v17;
    if (TrackIDMediaType == 1952807028)
    {
      if (dword_1EE2A2AC8 >= 2)
      {
LABEL_32:
        v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        v30 = 1;
LABEL_36:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_37;
      }
    }
    else if (dword_1EE2A2AC8 >= 2)
    {
      goto LABEL_32;
    }
    v30 = 1;
  }
LABEL_37:
  if (*(_DWORD *)(v6 + 1040))
  {
    if (fp_getTrackIDMediaType(*(_QWORD *)(v6 + 968), 0) == 1751216244)
    {
      *(_DWORD *)(v6 + 1040) = 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_43;
    }
    v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v30)
  {
LABEL_43:
    v34 = *MEMORY[0x1E0CA2E18];
    v35 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v36 = v34;
    v37 = v35;
    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v5, (uint64_t)&v34, (uint64_t)&v36, 0);
    goto LABEL_44;
  }
  return 0;
}

uint64_t itemfig_setVideoCompositionProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  CMTime *v7;
  const __CFDictionary *Value;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFNumber *v12;
  const __CFNumber *v13;
  CFTypeID v14;
  NSObject *v15;
  int v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  CFTypeID v19;
  uint64_t v20;
  NSObject *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  CFTypeID v24;
  NSObject *v25;
  int v26;
  const void **v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  CFTypeID v38;
  const void *v39;
  const void *v40;
  const void *v41;
  CFTypeID v42;
  const void *v43;
  const void *v44;
  const void *v45;
  CFTypeID v46;
  const void *v47;
  const void *v48;
  CFTypeRef v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  const void *v53;
  CFTypeID v54;
  const void *v55;
  NSObject *v56;
  unsigned int v57;
  unsigned int v58;
  CFTypeID v59;
  const void *v60;
  NSObject *v61;
  unsigned int v62;
  unsigned int v63;
  CFTypeID v64;
  const void *v65;
  NSObject *v66;
  unsigned int v67;
  unsigned int v68;
  CFTypeID v69;
  const void *v70;
  NSObject *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  const void *v75;
  const void *v76;
  const void *v77;
  CFTypeRef v78;
  CFNumberRef v79;
  uint64_t FigBaseObject;
  void (*v81)(uint64_t, const __CFString *, CFNumberRef);
  const void *v82;
  CFTypeRef v83;
  NSObject *v84;
  unsigned int v85;
  unsigned int v86;
  const void *v87;
  const void *v88;
  CFTypeID v89;
  uint64_t Duration;
  CMTimeEpoch v91;
  __int128 v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  const void *v97;
  uint64_t v99;
  __int128 v100;
  CFTypeRef v101;
  CFTypeRef cf;
  CMTime v103;
  CMTime valuePtr;
  CMTime time2;
  CMTimeRange time1[2];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v101 = 0;
  cf = 0;
  if (!a1)
  {
    v50 = FigSignalErrorAt();
    goto LABEL_236;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = CFDictionaryContainsKey(a2, CFSTR("VideoCompositorFrameDuration"));
  v7 = (CMTime *)MEMORY[0x1E0CA2E68];
  v99 = v5;
  if (!v6)
    goto LABEL_10;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("VideoCompositorFrameDuration"));
  CMTimeMakeFromDictionary(&time1[0].start, Value);
  valuePtr.value = time1[0].start.value;
  flags = time1[0].start.flags;
  valuePtr.timescale = time1[0].start.timescale;
  if ((time1[0].start.flags & 0x1D) != 1)
    goto LABEL_246;
  epoch = time1[0].start.epoch;
  time1[0].start.value = valuePtr.value;
  time1[0].start.timescale = valuePtr.timescale;
  time2 = *v7;
  if (CMTimeCompare(&time1[0].start, &time2) < 1 || epoch)
    goto LABEL_246;
  *(_OWORD *)&time1[0].start.value = *(_OWORD *)(DerivedStorage + 692);
  time1[0].start.epoch = *(_QWORD *)(DerivedStorage + 708);
  time2.value = valuePtr.value;
  time2.timescale = valuePtr.timescale;
  time2.flags = flags;
  time2.epoch = 0;
  if (!CMTimeCompare(&time1[0].start, &time2))
    goto LABEL_10;
  *(_QWORD *)(DerivedStorage + 692) = valuePtr.value;
  *(_DWORD *)(DerivedStorage + 700) = valuePtr.timescale;
  *(_DWORD *)(DerivedStorage + 704) = flags;
  *(_QWORD *)(DerivedStorage + 708) = 0;
  if (*(_QWORD *)(DerivedStorage + 352))
  {
    if (dword_1EE2A2AC8 < 2)
    {
      v16 = 1;
    }
    else
    {
      LODWORD(v103.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v16 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
LABEL_10:
    v16 = 0;
  }
  if (CFDictionaryContainsKey(a2, CFSTR("VideoCompositorSourceTrackIDForFrameTiming")))
  {
    v12 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("VideoCompositorSourceTrackIDForFrameTiming"));
    if (!v12)
      goto LABEL_246;
    v13 = v12;
    v14 = CFGetTypeID(v12);
    if (v14 != CFNumberGetTypeID())
      goto LABEL_246;
    valuePtr.value = 0;
    CFNumberGetValue(v13, kCFNumberCFIndexType, &valuePtr);
    if (*(_DWORD *)(DerivedStorage + 716) != LODWORD(valuePtr.value))
    {
      *(_DWORD *)(DerivedStorage + 716) = valuePtr.value;
      if (*(_QWORD *)(DerivedStorage + 352))
      {
        if (dword_1EE2A2AC8 < 2)
        {
          v16 = 1;
        }
        else
        {
          LODWORD(v103.value) = 0;
          v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          v16 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  if (CFDictionaryContainsKey(a2, CFSTR("VideoCompositorRenderDimensions")))
  {
    *(_OWORD *)&valuePtr.value = 0uLL;
    v17 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("VideoCompositorRenderDimensions"));
    if (!v17)
      goto LABEL_246;
    v18 = v17;
    v19 = CFGetTypeID(v17);
    if (v19 != CFDictionaryGetTypeID() || !CGSizeMakeWithDictionaryRepresentation(v18, (CGSize *)&valuePtr))
      goto LABEL_246;
    MEMORY[0x19402EA0C](*(_QWORD *)(v5 + 496));
    if (*(double *)(DerivedStorage + 720) == *(double *)&valuePtr.value
      && *(double *)(DerivedStorage + 728) == *(double *)&valuePtr.timescale)
    {
      MEMORY[0x19402EA24](*(_QWORD *)(v5 + 496));
    }
    else
    {
      *(_OWORD *)(DerivedStorage + 720) = *(_OWORD *)&valuePtr.value;
      v20 = *(_QWORD *)(DerivedStorage + 352);
      MEMORY[0x19402EA24](*(_QWORD *)(v5 + 496));
      if (v20)
      {
        if (dword_1EE2A2AC8 < 2)
        {
          v16 = 1;
        }
        else
        {
          LODWORD(v103.value) = 0;
          v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          v16 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  if (CFDictionaryContainsKey(a2, CFSTR("VideoCompositorRenderScale")))
  {
    LODWORD(valuePtr.value) = 1065353216;
    v22 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("VideoCompositorRenderScale"));
    if (!v22)
      goto LABEL_246;
    v23 = v22;
    v24 = CFGetTypeID(v22);
    if (v24 != CFNumberGetTypeID())
      goto LABEL_246;
    CFNumberGetValue(v23, kCFNumberFloatType, &valuePtr);
    if (*(float *)(DerivedStorage + 736) != *(float *)&valuePtr.value)
    {
      *(_DWORD *)(DerivedStorage + 736) = valuePtr.value;
      if (*(_QWORD *)(DerivedStorage + 352))
      {
        if (dword_1EE2A2AC8 < 2)
        {
          v16 = 1;
        }
        else
        {
          LODWORD(v103.value) = 0;
          v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          v16 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  v26 = CFDictionaryContainsKey(a2, CFSTR("VideoCompositorColorPrimaries"));
  v27 = (const void **)MEMORY[0x1E0C9B0D0];
  if (v26)
  {
    v28 = CFDictionaryGetValue(a2, CFSTR("VideoCompositorColorPrimaries"));
    v29 = v28 == *v27 ? 0 : v28;
    if (!FigCFEqual())
    {
      if (v29)
      {
        v54 = CFGetTypeID(v29);
        if (v54 != CFStringGetTypeID())
          goto LABEL_246;
        v55 = *(const void **)(DerivedStorage + 744);
        *(_QWORD *)(DerivedStorage + 744) = v29;
        CFRetain(v29);
        if (!v55)
          goto LABEL_107;
      }
      else
      {
        v55 = *(const void **)(DerivedStorage + 744);
        *(_QWORD *)(DerivedStorage + 744) = 0;
        if (!v55)
        {
LABEL_107:
          if (*(_QWORD *)(DerivedStorage + 352))
          {
            if (dword_1EE2A2AC8 < 2)
            {
              v16 = 1;
            }
            else
            {
              LODWORD(valuePtr.value) = 0;
              LOBYTE(v103.value) = 0;
              v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v57 = valuePtr.value;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
                v58 = v57;
              else
                v58 = v57 & 0xFFFFFFFE;
              if (v58)
              {
                LODWORD(time2.value) = 136315138;
                *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
                _os_log_send_and_compose_impl();
              }
              v16 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          goto LABEL_44;
        }
      }
      CFRelease(v55);
      goto LABEL_107;
    }
  }
LABEL_44:
  if (!CFDictionaryContainsKey(a2, CFSTR("VideoCompositorColorYCbCrMatrix")))
    goto LABEL_49;
  v30 = CFDictionaryGetValue(a2, CFSTR("VideoCompositorColorYCbCrMatrix"));
  v31 = v30 == *v27 ? 0 : v30;
  if (FigCFEqual())
    goto LABEL_49;
  if (v31)
  {
    v59 = CFGetTypeID(v31);
    if (v59 != CFStringGetTypeID())
      goto LABEL_246;
    v60 = *(const void **)(DerivedStorage + 752);
    *(_QWORD *)(DerivedStorage + 752) = v31;
    CFRetain(v31);
    if (!v60)
      goto LABEL_118;
    goto LABEL_117;
  }
  v60 = *(const void **)(DerivedStorage + 752);
  *(_QWORD *)(DerivedStorage + 752) = 0;
  if (v60)
LABEL_117:
    CFRelease(v60);
LABEL_118:
  if (*(_QWORD *)(DerivedStorage + 352))
  {
    if (dword_1EE2A2AC8 < 2)
    {
      v16 = 1;
    }
    else
    {
      LODWORD(valuePtr.value) = 0;
      LOBYTE(v103.value) = 0;
      v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v62 = valuePtr.value;
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        v63 = v62;
      else
        v63 = v62 & 0xFFFFFFFE;
      if (v63)
      {
        LODWORD(time2.value) = 136315138;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
        _os_log_send_and_compose_impl();
      }
      v16 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_49:
  if (!CFDictionaryContainsKey(a2, CFSTR("VideoCompositorColorTransferFunction")))
    goto LABEL_54;
  v32 = CFDictionaryGetValue(a2, CFSTR("VideoCompositorColorTransferFunction"));
  v33 = v32 == *v27 ? 0 : v32;
  if (FigCFEqual())
    goto LABEL_54;
  if (v33)
  {
    v64 = CFGetTypeID(v33);
    if (v64 != CFStringGetTypeID())
      goto LABEL_246;
    v65 = *(const void **)(DerivedStorage + 760);
    *(_QWORD *)(DerivedStorage + 760) = v33;
    CFRetain(v33);
    if (!v65)
      goto LABEL_129;
    goto LABEL_128;
  }
  v65 = *(const void **)(DerivedStorage + 760);
  *(_QWORD *)(DerivedStorage + 760) = 0;
  if (v65)
LABEL_128:
    CFRelease(v65);
LABEL_129:
  if (*(_QWORD *)(DerivedStorage + 352))
  {
    if (dword_1EE2A2AC8 < 2)
    {
      v16 = 1;
    }
    else
    {
      LODWORD(valuePtr.value) = 0;
      LOBYTE(v103.value) = 0;
      v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v67 = valuePtr.value;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        v68 = v67;
      else
        v68 = v67 & 0xFFFFFFFE;
      if (v68)
      {
        LODWORD(time2.value) = 136315138;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
        _os_log_send_and_compose_impl();
      }
      v16 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_54:
  if (!CFDictionaryContainsKey(a2, CFSTR("VideoCompositorHDRDisplayMetadataPolicy")))
    goto LABEL_59;
  v34 = CFDictionaryGetValue(a2, CFSTR("VideoCompositorHDRDisplayMetadataPolicy"));
  v35 = v34 == *v27 ? 0 : v34;
  if (FigCFEqual())
    goto LABEL_59;
  if (v35)
  {
    v69 = CFGetTypeID(v35);
    if (v69 != CFStringGetTypeID())
      goto LABEL_246;
    v70 = *(const void **)(DerivedStorage + 768);
    *(_QWORD *)(DerivedStorage + 768) = v35;
    CFRetain(v35);
    if (!v70)
      goto LABEL_140;
    goto LABEL_139;
  }
  v70 = *(const void **)(DerivedStorage + 768);
  *(_QWORD *)(DerivedStorage + 768) = 0;
  if (v70)
LABEL_139:
    CFRelease(v70);
LABEL_140:
  if (*(_QWORD *)(DerivedStorage + 352))
  {
    if (dword_1EE2A2AC8 < 2)
    {
      v16 = 1;
    }
    else
    {
      LODWORD(valuePtr.value) = 0;
      LOBYTE(v103.value) = 0;
      v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v72 = valuePtr.value;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        v73 = v72;
      else
        v73 = v72 & 0xFFFFFFFE;
      if (v73)
      {
        LODWORD(time2.value) = 136315138;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
        _os_log_send_and_compose_impl();
      }
      v16 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_59:
  if (CFDictionaryContainsKey(a2, CFSTR("VideoCompositorSourceSampleDataTrackIDs")))
  {
    v36 = CFDictionaryGetValue(a2, CFSTR("VideoCompositorSourceSampleDataTrackIDs"));
    if (v36 == *v27)
      v37 = 0;
    else
      v37 = v36;
    if (v37)
    {
      v38 = CFGetTypeID(v37);
      if (v38 != CFArrayGetTypeID())
        goto LABEL_251;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 776));
    v39 = *(const void **)(DerivedStorage + 784);
    *(_QWORD *)(DerivedStorage + 784) = v37;
    if (v37)
      CFRetain(v37);
    if (v39)
      CFRelease(v39);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 776));
  }
  if (CFDictionaryContainsKey(a2, CFSTR("VideoCompositorSourceVideoTrackWindows")))
  {
    v40 = CFDictionaryGetValue(a2, CFSTR("VideoCompositorSourceVideoTrackWindows"));
    if (v40 == *v27)
      v41 = 0;
    else
      v41 = v40;
    if (v41)
    {
      v42 = CFGetTypeID(v41);
      if (v42 != CFArrayGetTypeID())
        goto LABEL_251;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 776));
    if (!FigVideoCompositionWindowSerializedConfigurationForTracksEqual(*(CFTypeRef *)(DerivedStorage + 792), v41))
    {
      v43 = *(const void **)(DerivedStorage + 792);
      *(_QWORD *)(DerivedStorage + 792) = v41;
      if (v41)
        CFRetain(v41);
      if (v43)
        CFRelease(v43);
      v16 = 1;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 776));
  }
  if (!CFDictionaryContainsKey(a2, CFSTR("VideoCompositorSourceSampleDataTrackWindows")))
    goto LABEL_96;
  v44 = CFDictionaryGetValue(a2, CFSTR("VideoCompositorSourceSampleDataTrackWindows"));
  if (v44 == *v27)
    v45 = 0;
  else
    v45 = v44;
  if (!v45 || (v46 = CFGetTypeID(v45), v46 == CFArrayGetTypeID()))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 776));
    if (!FigVideoCompositionWindowSerializedConfigurationForTracksEqual(*(CFTypeRef *)(DerivedStorage + 800), v45))
    {
      v47 = *(const void **)(DerivedStorage + 800);
      *(_QWORD *)(DerivedStorage + 800) = v45;
      if (v45)
        CFRetain(v45);
      if (v47)
        CFRelease(v47);
      v16 = 1;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 776));
LABEL_96:
    if (!CFDictionaryContainsKey(a2, CFSTR("VideoCompositor")))
      goto LABEL_209;
    v48 = CFDictionaryGetValue(a2, CFSTR("VideoCompositor"));
    v49 = 0;
    v50 = 0;
    if (v48)
    {
      v51 = v48 == *v27;
      v52 = v99;
      if (!v51)
      {
        if (CFEqual(v48, CFSTR("VideoCompositor_Basic")))
          goto LABEL_100;
        if (CFEqual(v48, CFSTR("VideoCompositor_vImage")))
          goto LABEL_152;
        if (CFEqual(v48, CFSTR("VideoCompositor_Metal")))
          goto LABEL_170;
        if (CFEqual(v48, CFSTR("VideoCompositor_OpenGL")))
          goto LABEL_180;
        if (CFEqual(v48, CFSTR("VideoCompositor_DeviceSpecific")))
        {
          v50 = FigVideoCompositorCopyDeviceSpecificCompositorName(0, &v101);
          if ((_DWORD)v50)
          {
LABEL_250:
            v49 = CFRetain(v48);
            goto LABEL_148;
          }
          if (FigCFEqual())
          {
LABEL_100:
            if (*(_DWORD *)(DerivedStorage + 664) == 1 && (v53 = *(const void **)(DerivedStorage + 656)) != 0)
            {
              v50 = 0;
              cf = CFRetain(v53);
            }
            else
            {
              v50 = FigVideoCompositorCreateBasic(*MEMORY[0x1E0C9AE00], 0, &cf);
            }
            v74 = 1;
            goto LABEL_185;
          }
          if (FigCFEqual())
          {
LABEL_152:
            if (*(_DWORD *)(DerivedStorage + 664) == 3 && (v75 = *(const void **)(DerivedStorage + 656)) != 0)
            {
              v50 = 0;
              cf = CFRetain(v75);
            }
            else
            {
              v50 = FigVideoCompositorCreatevImage(*MEMORY[0x1E0C9AE00], 0, &cf);
            }
            v74 = 3;
            goto LABEL_185;
          }
          if (FigCFEqual())
          {
LABEL_170:
            if (*(_DWORD *)(DerivedStorage + 664) == 4 && (v76 = *(const void **)(DerivedStorage + 656)) != 0)
            {
              v50 = 0;
              cf = CFRetain(v76);
            }
            else
            {
              v50 = FigVideoCompositorCreateMetal(*MEMORY[0x1E0C9AE00], &cf);
            }
            v74 = 4;
            goto LABEL_185;
          }
          if (FigCFEqual())
          {
LABEL_180:
            if (*(_DWORD *)(DerivedStorage + 664) == 2 && (v77 = *(const void **)(DerivedStorage + 656)) != 0)
            {
              v50 = 0;
              cf = CFRetain(v77);
            }
            else
            {
              v50 = FigVideoCompositorCreateOpenGL((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, &cf);
            }
            v74 = 2;
            goto LABEL_185;
          }
        }
        else
        {
          FigVideoCompositorGetTypeID();
          CFGetTypeID(v48);
        }
        v50 = 0;
        goto LABEL_250;
      }
    }
    else
    {
      v52 = v99;
    }
LABEL_148:
    v74 = 0;
    cf = v49;
LABEL_185:
    v78 = cf;
    if ((_DWORD)v50 || !cf)
    {
      if ((_DWORD)v50)
        goto LABEL_210;
    }
    else
    {
      LODWORD(time1[0].start.value) = 23;
      v79 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, time1);
      FigBaseObject = FigVideoCompositorGetFigBaseObject(cf);
      v81 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v81)
        v81(FigBaseObject, CFSTR("WorkerThreadPriority"), v79);
      if (v79)
        CFRelease(v79);
      v78 = cf;
    }
    if (*(CFTypeRef *)(DerivedStorage + 656) == v78 || !*(_QWORD *)(DerivedStorage + 8))
      goto LABEL_206;
    MEMORY[0x19402EA0C](*(_QWORD *)(v52 + 496));
    v82 = *(const void **)(DerivedStorage + 656);
    v83 = cf;
    *(_QWORD *)(DerivedStorage + 656) = cf;
    if (v83)
      CFRetain(v83);
    if (v82)
      CFRelease(v82);
    *(_DWORD *)(DerivedStorage + 664) = v74;
    itemfig_updateHasEnabledVideo();
    MEMORY[0x19402EA24](*(_QWORD *)(v52 + 496));
    if (!*(_QWORD *)(DerivedStorage + 352))
    {
LABEL_206:
      v50 = 0;
      goto LABEL_210;
    }
    if (dword_1EE2A2AC8 < 2)
    {
      v50 = 0;
      v16 = 1;
      goto LABEL_210;
    }
    LODWORD(valuePtr.value) = 0;
    LOBYTE(v103.value) = 0;
    v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v85 = valuePtr.value;
    if (os_log_type_enabled(v84, v103.value))
      v86 = v85;
    else
      v86 = v85 & 0xFFFFFFFE;
    if (v86)
    {
      LODWORD(time2.value) = 136315138;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
      _os_log_send_and_compose_impl();
    }
    v16 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_209:
    v50 = 0;
    v52 = v99;
LABEL_210:
    if (!CFDictionaryContainsKey(a2, CFSTR("VideoCompositionInstructionArray")))
    {
LABEL_232:
      if (v16)
      {
        v97 = *(const void **)(DerivedStorage + 8);
        *(_OWORD *)&time1[0].start.value = *MEMORY[0x1E0CA2E18];
        time1[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        time2 = time1[0].start;
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v97, (uint64_t)time1, (uint64_t)&time2, 0);
      }
      goto LABEL_234;
    }
    memset(&time2, 0, sizeof(time2));
    v87 = CFDictionaryGetValue(a2, CFSTR("VideoCompositionInstructionArray"));
    if (v87)
    {
      v88 = v87;
      v89 = CFGetTypeID(v87);
      if (v89 == CFArrayGetTypeID())
      {
        Duration = itemfig_GetDuration(a1, (uint64_t)&time2);
        if ((_DWORD)Duration)
        {
LABEL_247:
          v50 = Duration;
          goto LABEL_234;
        }
        valuePtr = time2;
        if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) == 1)
        {
          *(_OWORD *)&time1[0].start.value = *(_OWORD *)(DerivedStorage + 236);
          time1[0].start.epoch = *(_QWORD *)(DerivedStorage + 252);
          v100 = *MEMORY[0x1E0CA2E68];
          *(_OWORD *)&v103.value = *MEMORY[0x1E0CA2E68];
          v91 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          v103.epoch = v91;
          if ((CMTimeCompare(&time1[0].start, &v103) & 0x80000000) == 0
            && (*(_DWORD *)(DerivedStorage + 272) & 0x1D) == 1)
          {
            *(_OWORD *)&time1[0].start.value = *(_OWORD *)(DerivedStorage + 260);
            time1[0].start.epoch = *(_QWORD *)(DerivedStorage + 276);
            *(_OWORD *)&v103.value = v100;
            v103.epoch = v91;
            if (CMTimeCompare(&time1[0].start, &v103) >= 1)
            {
              v103 = valuePtr;
              v92 = *(_OWORD *)(DerivedStorage + 252);
              *(_OWORD *)&time1[0].start.value = *(_OWORD *)(DerivedStorage + 236);
              *(_OWORD *)&time1[0].start.epoch = v92;
              *(_OWORD *)&time1[0].duration.timescale = *(_OWORD *)(DerivedStorage + 268);
              CMTimeFoldIntoRange(&valuePtr, &v103, time1);
            }
          }
        }
        *(_OWORD *)&time1[0].start.value = *MEMORY[0x1E0CA2E68];
        time1[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        v103 = valuePtr;
        if (FigVideoCompositionInstructionArrayIsValid((uint64_t)v88, (uint64_t)time1, (uint64_t)&v103))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 672));
          v93 = *(const void **)(DerivedStorage + 680);
          *(_QWORD *)(DerivedStorage + 680) = v88;
          CFRetain(v88);
          if (v93)
            CFRelease(v93);
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 672));
          v94 = *(_QWORD *)(DerivedStorage + 808);
          if (v94)
          {
            v95 = *(_QWORD *)(DerivedStorage + 352);
            if (v95)
            {
              if (!v16)
              {
                if (*(float *)(v52 + 48) == 0.0 || !*(_BYTE *)(DerivedStorage + 688))
                {
                  FigPlaybackBossResetCompositionInstructions(v95, v94, 1, 1);
                  if (dword_1EE2A2AC8 >= 2)
                  {
                    v96 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  FigPlaybackBossRefreshVideoComposition(*(_QWORD *)(DerivedStorage + 352));
                }
                else
                {
                  FigPlaybackBossResetCompositionInstructions(v95, v94, 0, 0);
                }
              }
            }
          }
          v50 = 0;
          goto LABEL_232;
        }
      }
    }
LABEL_246:
    Duration = FigSignalErrorAt();
    goto LABEL_247;
  }
LABEL_251:
  FigSignalErrorAt();
  v50 = 0;
LABEL_234:
  if (v101)
    CFRelease(v101);
LABEL_236:
  if (cf)
    CFRelease(cf);
  return v50;
}

void playerfig_synchronizeLayerToTimebaseWithTransaction(uint64_t a1, const void *a2)
{
  uint64_t *DerivedStorage;
  const void *v4;
  const void *Timebase;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[106]);
  v4 = (const void *)DerivedStorage[107];
  if (v4)
  {
    Timebase = (const void *)FigPlaybackBossGetTimebase(DerivedStorage[44]);
    FigLayerSynchronizerSynchronizeToTimebaseWithDeferredTransaction(v4, Timebase, 0, (uint64_t)"playerfig_synchronizeLayerToTimebaseWithTransaction", a2);
  }
  JUMPOUT(0x19402EF04);
}

void itemfig_setCAImageQueueFlagsForApertureMode()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex i;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1120));
  v1 = *(const __CFArray **)(DerivedStorage + 1104);
  if (v1)
  {
    Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      v3 = Count;
      for (i = 0; i != v3; ++i)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1104), i);
        CAImageQueueSetFlags();
      }
    }
  }
  JUMPOUT(0x19402EF04);
}

uint64_t itemfig_setVisualContextArray(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _QWORD *v5;
  uint64_t v6;
  const __CFArray *v7;
  int v8;
  const void *v9;
  uint64_t v10;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 8);
  if (!v4)
    return FigSignalErrorAt();
  v5 = (_QWORD *)DerivedStorage;
  v6 = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (CFArrayGetCount(a2))
      v7 = a2;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  MEMORY[0x19402EEEC](v5[217]);
  v8 = FigCFEqual();
  if (!v8)
  {
    v9 = (const void *)v5[216];
    v5[216] = v7;
    if (v7)
      CFRetain(v7);
    if (v9)
      CFRelease(v9);
  }
  MEMORY[0x19402EF04](v5[217]);
  MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 496));
  v10 = v5[44];
  result = MEMORY[0x19402EA24](*(_QWORD *)(v6 + 496));
  if (!v8)
  {
    if (v10)
      return playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(v4, 0, 0);
  }
  return result;
}

void itemfig_setTextMarkupArray(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, __CFString *, uint64_t);
  __CFString *v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 1832) && !CFArrayGetCount(a2))
    a2 = 0;
  if (!FigCFEqual())
  {
    v4 = *(const void **)(DerivedStorage + 1832);
    *(_QWORD *)(DerivedStorage + 1832) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    if (*(_QWORD *)(DerivedStorage + 352))
    {
      v5 = CMBaseObjectGetDerivedStorage();
      v6 = *(_QWORD *)(v5 + 584);
      if (!v6)
        goto LABEL_18;
      v7 = *(_QWORD *)(DerivedStorage + 1832);
      if (*(_BYTE *)(v5 + 781))
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        v9 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (!v9)
          goto LABEL_18;
        v10 = CFSTR("SRPP_TextMarkupArray");
      }
      else
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        v9 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (!v9)
          goto LABEL_18;
        v10 = CFSTR("CRPP_TextMarkupArray");
      }
      v9(FigBaseObject, v10, v7);
LABEL_18:
      v11 = *(_QWORD *)(DerivedStorage + 1856);
      if (v11)
        FigOutOfBandTrackControllerSetProperty(v11, CFSTR("TextMarkupArray"), *(const void **)(DerivedStorage + 1832));
    }
  }
}

void itemfig_setTextHighlightArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, uint64_t);
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, __CFString *, uint64_t);
  __CFString *v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
  {
    v4 = *(const void **)(DerivedStorage + 1840);
    *(_QWORD *)(DerivedStorage + 1840) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    if (*(_QWORD *)(DerivedStorage + 352))
    {
      v5 = CMBaseObjectGetDerivedStorage();
      v6 = *(_QWORD *)(v5 + 576);
      if (v6)
      {
        v7 = *(_QWORD *)(DerivedStorage + 1840);
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        v9 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v9)
          v9(FigBaseObject, CFSTR("CCRPP_TextHighlightArray"), v7);
      }
      v10 = *(_QWORD *)(v5 + 584);
      if (!v10)
        goto LABEL_18;
      v11 = *(unsigned __int8 *)(v5 + 781);
      v12 = *(_QWORD *)(DerivedStorage + 1840);
      if (v11)
      {
        v13 = FigRenderPipelineGetFigBaseObject(v10);
        v14 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (!v14)
          goto LABEL_18;
        v15 = CFSTR("SRPP_TextHighlightArray");
      }
      else
      {
        v13 = FigRenderPipelineGetFigBaseObject(v10);
        v14 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (!v14)
          goto LABEL_18;
        v15 = CFSTR("CRPP_TextHighlightArray");
      }
      v14(v13, v15, v12);
LABEL_18:
      v16 = *(_QWORD *)(DerivedStorage + 1856);
      if (v16)
        FigOutOfBandTrackControllerSetProperty(v16, CFSTR("TextHighlightArray"), *(const void **)(DerivedStorage + 1840));
    }
  }
}

void itemfig_setLegibleOutputsDict(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  const void *v6;
  dispatch_queue_t *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = (const void *)v4;
    if (a2 && !CFDictionaryGetCount(a2))
      a2 = 0;
    if (!FigCFEqual())
    {
      v6 = *(const void **)(DerivedStorage + 1752);
      *(_QWORD *)(DerivedStorage + 1752) = a2;
      if (a2)
        CFRetain(a2);
      if (v6)
        CFRelease(v6);
      v7 = *(dispatch_queue_t **)(DerivedStorage + 1744);
      if (v7)
        FigLegibleOutputManagerSetLegibleOutputsDict(v7, *(CFTypeRef *)(DerivedStorage + 1752));
      if (*(_QWORD *)(DerivedStorage + 352))
        playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(v5);
    }
    CFRelease(v5);
  }
}

